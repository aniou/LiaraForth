A Tinkerer's Assembler for the 6502/65c02/65816
Version BETA 17. Feb 2017
Copyright 2015-2017 Scot W. Stevenson <scot.stevenson@gmail.com>
This program comes with ABSOLUTELY NO WARRANTY

Code listing for file liaraforth.tasm
Generated on Sun Feb 19 17:48:31 2017
Target MPU: 65816
External files loaded: 4
Number of passes executed: 35
Number of steps executed: 10
Assembly time: 0.15892 seconds
Code origin: 006000
Bytes of machine code: 5444

LISTING:
   Line  Status/Type State/Width Address     Bytes     Instruction
   1:000 | DONE cmt | em  8  8 |        |             | ; Liara Forth for the W65C265SXB
   2:000 | DONE cmt | em  8  8 |        |             | ; Scot W. Stevenson <scot.stevenson@gmail.com>
   3:000 | DONE cmt | em  8  8 |        |             | ; First version: 01. Apr 2016
   4:000 | DONE cmt | em  8  8 |        |             | ; This version: 19. Feb 2017
   5:000 | DONE wsp | em  8  8 |        |             |
   6:000 | DONE cmt | em  8  8 |        |             | ; This code is written in Typist's Assembler Notation for the 65c02/65816
   7:000 | DONE cmt | em  8  8 |        |             | ; See docs/MANUAL.md for more information
   8:000 | DONE wsp | em  8  8 |        |             |
   9:000 | DONE dir | em  8  8 |        |             |         .mpu 65816                   
  10:000 | DONE cmt | em  8  8 |        |             | ;       .origin 8000    ; start of code to save to Flash memory
  11:000 | DONE dir | em  8  8 |        |             |         .origin 6000                 start of code to save to built-in RAM
  12:000 | DONE wsp | em  8  8 |        |             |
  13:000 | DONE cmt | em  8  8 |        |             | ; ===================================================================
  14:000 | DONE cmt | em  8  8 |        |             | ; TOP INCLUDES
  15:000 | DONE wsp | em  8  8 |        |             |
  16:000 | DONE cmt | em  8  8 |        |             | ; Definitions for Liara Forth for the W65C265SXB
  16:001 | DONE cmt | em  8  8 |        |             | ; Scot W. Stevenson <scot.stevenson@gmail.com>
  16:002 | DONE cmt | em  8  8 |        |             | ; First version: 01. Apr 2016
  16:003 | DONE cmt | em  8  8 |        |             | ; This version: 19. Feb 2017
  16:004 | DONE wsp | em  8  8 |        |             |
  16:005 | DONE cmt | em  8  8 |        |             | ; This file is included by liaraforth.tasm
  16:006 | DONE wsp | em  8  8 |        |             |
  16:007 | DONE cmt | em  8  8 |        |             | ; Note that Typist's Assembler Notation does not distinguish between
  16:008 | DONE cmt | em  8  8 |        |             | ; upper andlower case. Variations in case are for human readers only.
  16:009 | DONE wsp | em  8  8 |        |             |
  16:010 | DONE cmt | em  8  8 |        |             | ; I/O facilities are handled in the separate kernel files. The definitions for
  16:011 | DONE cmt | em  8  8 |        |             | ; multitasking are preliminary and will probably change
  16:012 | DONE wsp | em  8  8 |        |             |
  16:013 | DONE cmt | em  8  8 |        |             | ; ===================================================================
  16:014 | DONE cmt | em  8  8 |        |             | ; CONTROL VALUES
  16:015 | DONE wsp | em  8  8 |        |             |
  16:016 | DONE cmt | em  8  8 |        |             |         ; NC_LIMIT gives the number of maximum bytes the code of a word may be
  16:017 | DONE cmt | em  8  8 |        |             |         ; long and still be compiled natively - see COMPILE, for details.
  16:018 | DONE cmt | em  8  8 |        |             |         ; A value of zero means a word is always compiled as a subroutine.
  16:019 | DONE cmt | em  8  8 |        |             |         ; TODO Decide if we want to expose this value to the user
  16:020 | DONE dir | em  8  8 |        |             |         .equ nc_limit 0              
  16:021 | DONE wsp | em  8  8 |        |             |
  16:022 | DONE cmt | em  8  8 |        |             | ; ===================================================================
  16:023 | DONE cmt | em  8  8 |        |             | ; MEMORY MAP (consider moving parts of these to kernel.tasm)
  16:024 | DONE wsp | em  8  8 |        |             |
  16:025 | DONE dir | em  8  8 |        |             |         .equ cp0              0300   start of available RAM for Dictionary
  16:026 | DONE dir | em  8  8 |        |             |         .equ physicalram     07fff   end of installed RAM
  16:027 | DONE dir | em  8  8 |        |             |         .equ maxram-single   07bff   end of available RAM (single task mode)
  16:028 | DONE dir | em  8  8 |        |             |         .equ maxram-multiple 06fff   end of available RAM (multitask mode)
  16:029 | DONE dir | em  8  8 |        |             |         .equ buffers  7c00           buffer area start
  16:030 | DONE wsp | em  8  8 |        |             |
  16:031 | DONE cmt | em  8  8 |        |             | ; The two input buffers are currently switched in REFILL by bit flipping. If you
  16:032 | DONE cmt | em  8  8 |        |             | ; change their addresses, you'll probably have to rewrite the code there
  16:033 | DONE wsp | em  8  8 |        |             |
  16:034 | DONE dir | em  8  8 |        |             |         .equ buffersize  0ff         maximum size for input buffers
  16:035 | DONE dir | em  8  8 |        |             |         .equ ibuffer1   7c00         start of 256 byte input buffer 1
  16:036 | DONE dir | em  8  8 |        |             |         .equ ibuffer2   7d00         start of 256 byte input buffer 2
  16:037 | DONE dir | em  8  8 |        |             |         .equ padsize     0ff         size of PAD, must be > &84
  16:038 | DONE dir | em  8  8 |        |             |         .equ padoffset   07f         distance from CP to PAD (holds number strings)
  16:039 | DONE wsp | em  8  8 |        |             |
  16:040 | DONE cmt | em  8  8 |        |             | ; RAM from 0000 to 01ff is left for the Mensch Monitor to use
  16:041 | DONE wsp | em  8  8 |        |             |
  16:042 | DONE dir | em  8  8 |        |             |         .equ directpage          0200 single task Direct Page (DP) start
  16:043 | DONE dir | em  8  8 |        |             |         .equ stack-multiple      7000 multitask Stack (S) area start
  16:044 | DONE dir | em  8  8 |        |             |         .equ directpage-multiple 7400 multitask Direct Page (DP) area start
  16:045 | DONE wsp | em  8  8 |        |             |
  16:046 | DONE cmt | em  8  8 |        |             | ; Initial values
  16:047 | DONE wsp | em  8  8 |        |             |
  16:048 | DONE dir | em  8  8 |        |             |         .equ stack0 7fff             single task Stack (S) start (bottom)
  16:049 | DONE dir | em  8  8 |        |             |         .equ dsp0   02f8             initial Data Stack Pointer (X)
  16:050 | DONE wsp | em  8  8 |        |             |
  16:051 | DONE cmt | em  8  8 |        |             | ; ===================================================================
  16:052 | DONE cmt | em  8  8 |        |             | ; DIRECT PAGE ADDRESSES
  16:053 | DONE wsp | em  8  8 |        |             |
  16:054 | DONE cmt | em  8  8 |        |             | ; All are one cell (two bytes) long to prevent weird errors
  16:055 | DONE cmt | em  8  8 |        |             | ; TODO move these to USER variables for multitasking
  16:056 | DONE wsp | em  8  8 |        |             |
  16:057 | DONE dir | em  8  8 |        |             |         .equ cp { 000200 + &0 }      Compiler Pointer, 2 bytes
  16:058 | DONE dir | em  8  8 |        |             |         .equ dp { 000200 + &2 }      Dictionary Pointer, 2 bytes
  16:059 | DONE dir | em  8  8 |        |             |         .equ tmpdsp { 000200 + &4 }  Temporary DSP (X) storage, 2 bytes
  16:060 | DONE dir | em  8  8 |        |             |         .equ tmptos { 000200 + &6 }  Temporary TOS (Y) storage, 2 bytes
  16:061 | DONE dir | em  8  8 |        |             |         .equ output { 000200 + &8 }  Address where output is constructed
  16:062 | DONE dir | em  8  8 |        |             |         .equ insrc { 000200 + &10 }  Input Source for SOURCE-ID
  16:063 | DONE dir | em  8  8 |        |             |         .equ cib { 000200 + &12 }    Current Input Buffer, 7c00 or 7d00
  16:064 | DONE dir | em  8  8 |        |             |         .equ ciblen { 000200 + &14 } Length of current input buffer
  16:065 | DONE dir | em  8  8 |        |             |         .equ piblen { 000200 + &16 } Length of previous input buffer
  16:066 | DONE dir | em  8  8 |        |             |         .equ toin { 000200 + &18 }   Pointer to CIB (>IN in Forth)
  16:067 | DONE dir | em  8  8 |        |             |         .equ state { 000200 + &20 }  STATE: -1 compile, 0 interpret
  16:068 | DONE dir | em  8  8 |        |             |         .equ tmp1 { 000200 + &22 }   Temporary storage
  16:069 | DONE dir | em  8  8 |        |             |         .equ tmp2 { 000200 + &24 }   Temporary storage
  16:070 | DONE dir | em  8  8 |        |             |         .equ tmp3 { 000200 + &26 }   Temporary storage
  16:071 | DONE dir | em  8  8 |        |             |         .equ base { 000200 + &28 }   Radix for number conversion
  16:072 | DONE dir | em  8  8 |        |             |         .equ workword { 000200 + &30 } Currently compiliing word
  16:073 | DONE dir | em  8  8 |        |             |         .equ scratch { 000200 + &32 } 8 byte scratchpad (see UM/MOD)
  16:074 | DONE cmt | em  8  8 |        |             | ;       .equ UNUSED   { directpage + &40 } ;
  16:075 | DONE wsp | em  8  8 |        |             |
  16:076 | DONE wsp | em  8  8 |        |             |
  16:077 | DONE cmt | em  8  8 |        |             | ; ===================================================================
  16:078 | DONE cmt | em  8  8 |        |             | ; HELPER DEFINITIONS
  16:079 | DONE wsp | em  8  8 |        |             |
  16:080 | DONE cmt | em  8  8 |        |             | ; ASCII characters
  16:081 | DONE dir | em  8  8 |        |             |         .equ AscCC   03              break (Control-C) ASCII character
  16:082 | DONE dir | em  8  8 |        |             |         .equ AscBELL 07              ACSCII bell sound
  16:083 | DONE dir | em  8  8 |        |             |         .equ AscBS   08              backspace ASCII character
  16:084 | DONE dir | em  8  8 |        |             |         .equ AscLF   0a              line feed ASCII character
  16:085 | DONE dir | em  8  8 |        |             |         .equ AscCR   0d              carriage return ASCII character
  16:086 | DONE dir | em  8  8 |        |             |         .equ AscCN   0e              ASCII CNTR-n (for next command)
  16:087 | DONE dir | em  8  8 |        |             |         .equ AscCP   10              ASCII CNTR-p (for previous command)
  16:088 | DONE dir | em  8  8 |        |             |         .equ AscESC  1b              Escape ASCII character
  16:089 | DONE dir | em  8  8 |        |             |         .equ AscSP   20              space ASCII character
  16:090 | DONE dir | em  8  8 |        |             |         .equ AscDEL  7f              DEL ASCII character
  16:091 | DONE wsp | em  8  8 |        |             |
  16:092 | DONE cmt | em  8  8 |        |             | ; Dictionary flags. The first four are currently unused
  16:093 | DONE dir | em  8  8 |        |             |         .equ CO 0004                 Compile Only
  16:094 | DONE dir | em  8  8 |        |             |         .equ IM 0002                 Immediate Word
  16:095 | DONE dir | em  8  8 |        |             |         .equ NC 0001                 Native Compile allowed
  16:096 | DONE wsp | em  8  8 |        |             |
  17:000 | DONE wsp | em  8  8 |        |             |
  18:000 | DONE cmt | em  8  8 |        |             | ; Hardware dependencies are isolated to a large degree in kernel files. Liara
  19:000 | DONE cmt | em  8  8 |        |             | ; Forth ships with two such files: One for the crude65816 emulator, and one for
  20:000 | DONE cmt | em  8  8 |        |             | ; the 265sxb board. Only use one.
  21:000 | DONE wsp | em  8  8 |        |             |
  22:000 | DONE cmt | em  8  8 |        |             | ;       .include kernel_emu.tasm        ; routines for crude65815 emulator
  23:000 | DONE cmt | em  8  8 |        |             | ; Basic hardware routines for Liara Forth: 265SXB version
  23:001 | DONE cmt | em  8  8 |        |             | ; Scot W. Stevenson <scot.stevenson@gmail.com>
  23:002 | DONE cmt | em  8  8 |        |             | ; First version: 04. Jan 2017
  23:003 | DONE cmt | em  8  8 |        |             | ; This version: 15. Feb 2017
  23:004 | DONE wsp | em  8  8 |        |             |
  23:005 | DONE cmt | em  8  8 |        |             | ; This section provides basic hardware interface to the 265SXB, providing the
  23:006 | DONE cmt | em  8  8 |        |             | ; PUT_CHR and GET_CHR routines that Liara Forth uses. It is in its own section
  23:007 | DONE cmt | em  8  8 |        |             | ; to make porting Forth to other machines easier.
  23:008 | DONE wsp | em  8  8 |        |             |
  23:009 | DONE cmt | em  8  8 |        |             | ; The code here is based on Andrew Jacobs' Basic Vector Handling for the
  23:010 | DONE cmt | em  8  8 |        |             | ; W65C265SXB Development Board as part of the w65c265sxb-hacker project
  23:011 | DONE cmt | em  8  8 |        |             | ; (https://github.com/andrew-jacobs/w65c265sxb-hacker). It is released under the
  23:012 | DONE cmt | em  8  8 |        |             | ; following license:
  23:013 | DONE cmt | em  8  8 |        |             | ;
  23:014 | DONE cmt | em  8  8 |        |             | ; This work is made available under the terms of the Creative Commons
  23:015 | DONE cmt | em  8  8 |        |             | ; Attribution-NonCommercial-ShareAlike 4.0 International license. Open the
  23:016 | DONE cmt | em  8  8 |        |             | ; following URL to see the details.
  23:017 | DONE cmt | em  8  8 |        |             | ;
  23:018 | DONE cmt | em  8  8 |        |             | ; http://creativecommons.org/licenses/by-nc-sa/4.0/
  23:019 | DONE wsp | em  8  8 |        |             |
  23:020 | DONE cmt | em  8  8 |        |             | ; Original variable names from w65c256.inc are included in comments to make
  23:021 | DONE cmt | em  8  8 |        |             | ; updates and changes easier
  23:022 | DONE wsp | em  8  8 |        |             |
  23:023 | DONE cmt | em  8  8 |        |             | ; ===================================================================
  23:024 | DONE cmt | em  8  8 |        |             | ; HARDWARE DEFINITIONS
  23:025 | DONE cmt | em  8  8 |        |             | ; These follow Andrew Jacobs' names, but lower case and with "hw_" prefixed.
  23:026 | DONE cmt | em  8  8 |        |             | ; This is the only file where symbols with the hw_ prefix may be defined or used
  23:027 | DONE wsp | em  8  8 |        |             |
  23:028 | DONE cmt | em  8  8 |        |             | ; Baud rates are calculated by the formula { osc_freq/(16*baud_rate)-1 } which we
  23:029 | DONE cmt | em  8  8 |        |             | ; can do on the fly at every assembly with the following parameters, or just calculate
  23:030 | DONE cmt | em  8  8 |        |             | ; once and then define brg_value with:
  23:031 | DONE cmt | em  8  8 |        |             | ;
  23:032 | DONE cmt | em  8  8 |        |             | ; - For  9600 baud, use &23
  23:033 | DONE cmt | em  8  8 |        |             | ; - For 19200 baud, use &11
  23:034 | DONE wsp | em  8  8 |        |             |
  23:035 | DONE cmt | em  8  8 |        |             | ;       .equ osc_freq  3686400          ; SXB runs at 3.6864MHz
  23:036 | DONE cmt | em  8  8 |        |             | ;       .equ baud_rate 19200            ; ACIA baud rate
  23:037 | DONE cmt | em  8  8 |        |             | ;	.equ baud_rate 9600             ; ACIA baud rate
  23:038 | DONE wsp | em  8  8 |        |             |
  23:039 | DONE dir | em  8  8 |        |             |         .equ brg_value &11           19200 baud
  23:040 | DONE cmt | em  8  8 |        |             | ;       .equ brg_value &23              ; 9600 baud
  23:041 | DONE wsp | em  8  8 |        |             |
  23:042 | DONE dir | em  8  8 |        |             |         .equ hw_pd0  0df00           Port 0 Data Register
  23:043 | DONE dir | em  8  8 |        |             |         .equ hw_pd1  0df01           Port 1 Data Register
  23:044 | DONE dir | em  8  8 |        |             |         .equ hw_pd2  0df02           Port 2 Data Register
  23:045 | DONE dir | em  8  8 |        |             |         .equ hw_pd3  0df03           Port 3 Data Register
  23:046 | DONE dir | em  8  8 |        |             |         .equ hw_pdd0 0df04           Port 0 Data Direction Register
  23:047 | DONE dir | em  8  8 |        |             |         .equ hw_pdd1 0df05           Port 1 Data Direction Register
  23:048 | DONE dir | em  8  8 |        |             |         .equ hw_pdd2 0df06           Port 2 Data Direction Register
  23:049 | DONE dir | em  8  8 |        |             |         .equ hw_pdd3 0df07           Port 3 Data Direction Register
  23:050 | DONE wsp | em  8  8 |        |             |
  23:051 | DONE dir | em  8  8 |        |             |         .equ hw_pd4  0df20           Port 4 Data Register
  23:052 | DONE dir | em  8  8 |        |             |         .equ hw_pd5  0df21           Port 5 Data Register
  23:053 | DONE dir | em  8  8 |        |             |         .equ hw_pd6  0df22           Port 6 Data Register
  23:054 | DONE dir | em  8  8 |        |             |         .equ hw_pd7  0df23           Port 7 Data Register
  23:055 | DONE dir | em  8  8 |        |             |         .equ hw_pdd4 0df24           Port 4 Data Direction Register
  23:056 | DONE dir | em  8  8 |        |             |         .equ hw_pdd5 0df25           Port 5 Data Direction Register
  23:057 | DONE dir | em  8  8 |        |             |         .equ hw_pdd6 0df26           Port 6 Data Direction Register
  23:058 | DONE dir | em  8  8 |        |             |         .equ hw_pcs7 0df27           Port 7 Chip Select
  23:059 | DONE wsp | em  8  8 |        |             |
  23:060 | DONE dir | em  8  8 |        |             |         .equ hw_bcr  0df40           Bus Control Register
  23:061 | DONE dir | em  8  8 |        |             |         .equ hw_sscr 0df41           System Speed Control Register
  23:062 | DONE dir | em  8  8 |        |             |         .equ hw_tcr  0df42           Timer Control Register
  23:063 | DONE dir | em  8  8 |        |             |         .equ hw_ter  0df43           Timer Enable Register
  23:064 | DONE dir | em  8  8 |        |             |         .equ hw_tifr 0df44           Timer Interrupt Flag Register
  23:065 | DONE dir | em  8  8 |        |             |         .equ hw_eifr 0df45           Edge Interrupt Flag Register
  23:066 | DONE dir | em  8  8 |        |             |         .equ hw_tier 0df46           Timer Interrupt Enable Register
  23:067 | DONE dir | em  8  8 |        |             |         .equ hw_eier 0df47           Edge Interrupt Enable Register
  23:068 | DONE dir | em  8  8 |        |             |         .equ hw_uifr 0df48           UART Interrupt Flag Register
  23:069 | DONE dir | em  8  8 |        |             |         .equ hw_uier 0df49           UART Interrupt Enable Register
  23:070 | DONE wsp | em  8  8 |        |             |
  23:071 | DONE dir | em  8  8 |        |             |         .equ hw_t0cl 0df60           Timer 0 Counter Low
  23:072 | DONE dir | em  8  8 |        |             |         .equ hw_t0ch 0df61           Timer 0 Counter High
  23:073 | DONE dir | em  8  8 |        |             |         .equ hw_t1cl 0df62           Timer 1 Counter Low
  23:074 | DONE dir | em  8  8 |        |             |         .equ hw_t1ch 0df63           Timer 1 Counter High
  23:075 | DONE dir | em  8  8 |        |             |         .equ hw_t2cl 0df64           Timer 2 Counter Low
  23:076 | DONE dir | em  8  8 |        |             |         .equ hw_t2ch 0df65           Timer 2 Counter High
  23:077 | DONE dir | em  8  8 |        |             |         .equ hw_t3cl 0df66           Timer 3 Counter Low
  23:078 | DONE dir | em  8  8 |        |             |         .equ hw_t3ch 0df67           Timer 3 Counter High
  23:079 | DONE dir | em  8  8 |        |             |         .equ hw_t4cl 0df68           Timer 4 Counter Low
  23:080 | DONE dir | em  8  8 |        |             |         .equ hw_t4ch 0df69           Timer 4 Counter High
  23:081 | DONE dir | em  8  8 |        |             |         .equ hw_t5cl 0df6a           Timer 5 Counter Low
  23:082 | DONE dir | em  8  8 |        |             |         .equ hw_t5ch 0df6b           Timer 5 Counter High
  23:083 | DONE dir | em  8  8 |        |             |         .equ hw_t6cl 0df6c           Timer 6 Counter Low
  23:084 | DONE dir | em  8  8 |        |             |         .equ hw_t6ch 0df6d           Timer 6 Counter High
  23:085 | DONE dir | em  8  8 |        |             |         .equ hw_t7cl 0df6e           Timer 7 Counter Low
  23:086 | DONE dir | em  8  8 |        |             |         .equ hw_t7ch 0df6f           Timer 7 Counter High
  23:087 | DONE wsp | em  8  8 |        |             |
  23:088 | DONE dir | em  8  8 |        |             |         .equ hw_acsr0 0df70          UART 0 Control/Status Register
  23:089 | DONE dir | em  8  8 |        |             |         .equ hw_artd0 0df71          UART 0 Data Register
  23:090 | DONE dir | em  8  8 |        |             |         .equ hw_acsr1 0df72          UART 1 Control/Status Register
  23:091 | DONE dir | em  8  8 |        |             |         .equ hw_artd1 0df73          UART 1 Data Register
  23:092 | DONE dir | em  8  8 |        |             |         .equ hw_acsr2 0df74          UART 2 Control/Status Register
  23:093 | DONE dir | em  8  8 |        |             |         .equ hw_artd2 0df75          UART 2 Data Register
  23:094 | DONE dir | em  8  8 |        |             |         .equ hw_acsr3 0df76          UART 3 Control/Status Register
  23:095 | DONE dir | em  8  8 |        |             |         .equ hw_artd3 0df77          UART 3 Data Register
  23:096 | DONE wsp | em  8  8 |        |             |
  23:097 | DONE wsp | em  8  8 |        |             |
  23:098 | DONE cmt | em  8  8 |        |             | ; ===================================================================
  23:099 | DONE cmt | em  8  8 |        |             | ; RESET HARDWARE
  23:100 | DONE cmt | em  8  8 |        |             | ; Call this during boot. Uses Port 0 for communication in the default setting
  23:101 | DONE lbl | em  8  8 | 006000 |             | reset_hardware                       
  23:102 | DONE ins | em  8  8 | 006000 | 78          |                 sei                  
  23:103 | DONE ins | em  8  8 | 006001 | 18          |                 clc                  
  23:104 | DONE ins | em  8  8 | 006002 | fb          |                 xce                  
  23:105 | DONE ctl | na  8  8 |        |             |         .!native
  23:106 | DONE ins | na  8  8 | 006003 | c2 10       |                 rep 10               
  23:107 | DONE ctl | na  8 16 |        |             |         .!xy16
  23:108 | DONE dir | na  8 16 |        |             |         .!a8                         
  23:109 | DONE cmt | na  8 16 |        |             |                 ; temporarily reset the stack
  23:110 | DONE ins | na  8 16 | 006005 | a2 ff 01    |                 ldx.# 01ff           
  23:111 | DONE ins | na  8 16 | 006008 | 9a          |                 txs                  
  23:112 | DONE wsp | na  8 16 |        |             |
  23:113 | DONE ins | na  8 16 | 006009 | 9c 49 df    |                 stz 00df49           UART Interrupt Enable Register (UIER)
  23:114 | DONE wsp | na  8 16 |        |             |
  23:115 | DONE ins | na  8 16 | 00600c | a9 c0       |                 lda.# 0c0            Ensure A15/AMS are output
  23:116 | DONE ins | na  8 16 | 00600e | 8d 24 df    |                 sta 00df24           Port 4 Data Direction Register (PDD4)
  23:117 | DONE ins | na  8 16 | 006011 | 9c 20 df    |                 stz 00df20           Select bank 0 (Port 4 Data Register, PD4)
  23:118 | DONE wsp | na  8 16 |        |             |
  23:119 | DONE ins | na  8 16 | 006014 | a9 10       |                 lda.# %00010000      Set UART0 to use timer 3
  23:120 | DONE ins | na  8 16 | 006016 | 1c 42 df    |                 trb 00df42           Timer Control Register (TCR)
  23:121 | DONE ins | na  8 16 | 006019 | a9 0b       |                 lda.# .lsb 00000b    And set baud rate
  23:122 | DONE ins | na  8 16 | 00601b | 8d 66 df    |                 sta 00df66           Timer 3 Counter Low (T3CL)
  23:123 | DONE ins | na  8 16 | 00601e | a9 00       |                 lda.# .msb 00000b    
  23:124 | DONE ins | na  8 16 | 006020 | 8d 67 df    |                 sta 00df67           Timer 3 Counter High (T3CH)
  23:125 | DONE ins | na  8 16 | 006023 | a9 08       |                 lda.# 08             Enable timer 3 (1<<3)
  23:126 | DONE ins | na  8 16 | 006025 | 0c 43 df    |                 tsb 00df43           Timer Enable Register (TER)
  23:127 | DONE wsp | na  8 16 |        |             |
  23:128 | DONE ins | na  8 16 | 006028 | a9 25       |                 lda.# %00100101      Set UART0 for 8-N-1
  23:129 | DONE ins | na  8 16 | 00602a | 8d 70 df    |                 sta 00df70           UART 0 Control/Status Register (ACSR0)
  23:130 | DONE wsp | na  8 16 |        |             |
  23:131 | DONE cmt | na  8 16 |        |             |                 ; set up direct page
  23:132 | DONE ins | na  8 16 | 00602d | c2 20       |                 rep 20               
  23:133 | DONE ctl | na 16 16 |        |             |         .!a16
  23:134 | DONE ins | na 16 16 | 00602f | a9 00 02    |                 lda.# 000200         
  23:135 | DONE ins | na 16 16 | 006032 | 5b          |                 tcd                  
  23:136 | DONE wsp | na 16 16 |        |             |
  23:137 | DONE ins | na 16 16 | 006033 | 4c 66 60    |                 jmp 006066           we return with A as 8 bits
  23:138 | DONE wsp | na 16 16 |        |             |
  23:139 | DONE wsp | na 16 16 |        |             |
  23:140 | DONE cmt | na 16 16 |        |             | ; ===================================================================
  23:141 | DONE cmt | na 16 16 |        |             | ; PUT_CHR
  23:142 | DONE cmt | na 16 16 |        |             | ; Wait until the last transmission has been completed then send the character
  23:143 | DONE cmt | na 16 16 |        |             | ; in A. Destroys A. Does not have to be called with A8.
  23:144 | DONE lbl | na 16 16 | 006036 |             | put_chr                              
  23:145 | DONE ins | na 16 16 | 006036 | 08          |                 php                  save register sizes
  23:146 | DONE ins | na 16 16 | 006037 | e2 20       |                 sep 20               
  23:147 | DONE ctl | na  8 16 |        |             |         .!a8
  23:148 | DONE ins | na  8 16 | 006039 | 48          |                 pha                  
  23:149 | DONE ins | na  8 16 | 00603a | a9 02       |                 lda.# 02             (1<<1)
  23:150 | DONE wsp | na  8 16 |        |             |
  23:151 | DONE lbl | na  8 16 | 00603c |             | put_chr_wait                         
  23:152 | DONE ins | na  8 16 | 00603c | 2c 48 df    |                 bit 00df48           timer finished?
  23:153 | DONE ins | na  8 16 | 00603f | f0 fb       |                 beq 00603c           
  23:154 | DONE wsp | na  8 16 |        |             |
  23:155 | DONE ins | na  8 16 | 006041 | 68          |                 pla                  
  23:156 | DONE ins | na  8 16 | 006042 | 8d 71 df    |                 sta 00df71           transmit char
  23:157 | DONE ins | na  8 16 | 006045 | 28          |                 plp                  
  23:158 | DONE wsp | na  8 16 |        |             |
  23:159 | DONE ins | na  8 16 | 006046 | 60          |                 rts                  
  23:160 | DONE wsp | na  8 16 |        |             |
  23:161 | DONE cmt | na  8 16 |        |             | ; ===================================================================
  23:162 | DONE cmt | na  8 16 |        |             | ; GET_CHR
  23:163 | DONE cmt | na  8 16 |        |             | ; Fetch the next character from the receive buffer waiting for some to arrive
  23:164 | DONE cmt | na  8 16 |        |             | ; if the buffer is empty.
  23:165 | DONE lbl | na  8 16 | 006047 |             | get_chr                              
  23:166 | DONE ins | na  8 16 | 006047 | 08          |                 php                  Save register sizes
  23:167 | DONE ins | na  8 16 | 006048 | e2 20       |                 sep 20               
  23:168 | DONE ctl | na  8 16 |        |             |         .!a8
  23:169 | DONE ins | na  8 16 | 00604a | a9 01       |                 lda.# 01             (1<<0)
  23:170 | DONE wsp | na  8 16 |        |             |
  23:171 | DONE lbl | na  8 16 | 00604c |             | get_chr_wait                         
  23:172 | DONE ins | na  8 16 | 00604c | 2c 48 df    |                 bit 00df48           Any data in RX buffer?
  23:173 | DONE ins | na  8 16 | 00604f | f0 fb       |                 beq 00604c           No, keep waiting
  23:174 | DONE ins | na  8 16 | 006051 | ad 71 df    |                 lda 00df71           Yes, read it
  23:175 | DONE ins | na  8 16 | 006054 | 28          |                 plp                  
  23:176 | DONE wsp | na  8 16 |        |             |
  23:177 | DONE ins | na  8 16 | 006055 | 60          |                 rts                  
  23:178 | DONE wsp | na  8 16 |        |             |
  23:179 | DONE cmt | na  8 16 |        |             | ; ===================================================================
  23:180 | DONE cmt | na  8 16 |        |             | ; HAVE_CHR?
  23:181 | DONE cmt | na  8 16 |        |             | ; Check if the receive buffer contains any data and return C=1 if there is
  23:182 | DONE cmt | na  8 16 |        |             | ; some.
  23:183 | DONE cmt | na  8 16 |        |             | ; TODO Test this
  23:184 | DONE wsp | na  8 16 |        |             |
  23:185 | DONE lbl | na  8 16 | 006056 |             | have_chr?                            
  23:186 | DONE ins | na  8 16 | 006056 | 48          |                 pha                  save caller's A
  23:187 | DONE ins | na  8 16 | 006057 | 08          |                 php                  
  23:188 | DONE ins | na  8 16 | 006058 | e2 20       |                 sep 20               
  23:189 | DONE ctl | na  8 16 |        |             |         .!a8
  23:190 | DONE ins | na  8 16 | 00605a | ad 48 df    |                 lda 00df48           read the status register
  23:191 | DONE ins | na  8 16 | 00605d | 28          |                 plp                  
  23:192 | DONE ins | na  8 16 | 00605e | 6a          |                 ror.a                shift hw_uart0r bit into carry
  23:193 | DONE ins | na  8 16 | 00605f | c2 20       |                 rep 20               
  23:194 | DONE ctl | na 16 16 |        |             |         .!a16
  23:195 | DONE ins | na 16 16 | 006061 | 68          |                 pla                  restore A
  23:196 | DONE ins | na 16 16 | 006062 | 60          |                 rts                  
  23:197 | DONE wsp | na 16 16 |        |             |
  23:198 | DONE cmt | na 16 16 |        |             | ; END
  24:000 | DONE wsp | na 16 16 |        |             |
  25:000 | DONE wsp | na 16 16 |        |             |
  26:000 | DONE cmt | na 16 16 |        |             | ; ===================================================================
  27:000 | DONE cmt | na 16 16 |        |             | ; DICTIONARY ROUTINES
  28:000 | DONE wsp | na 16 16 |        |             |
  29:000 | DONE cmt | na 16 16 |        |             | ; Word code routines are sorted alphabetically, except for the first three
  30:000 | DONE cmt | na 16 16 |        |             | ; - COLD, ABORT, and QUIT - and a few others that flow into each other. The
  31:000 | DONE cmt | na 16 16 |        |             | ; byte and cycle values are calculated without the RTS instruction.
  32:000 | DONE wsp | na 16 16 |        |             |
  33:000 | DONE wsp | na 16 16 |        |             |
  34:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
  35:000 | DONE cmt | na 16 16 |        |             | ; COLD ( -- ) X bytes / X Cycles
  36:000 | DONE cmt | na 16 16 |        |             | ; Reboot the system
  37:000 | DONE lbl | na 16 16 | 006063 |             | xt_cold                              
  38:000 | DONE wsp | na 16 16 |        |             |
  39:000 | DONE ins | na 16 16 | 006063 | 4c 00 60    |                 jmp 006000           don't use JSR, jump back to start
  40:000 | DONE lbl | na 16 16 | 006066 |             | start                                
  41:000 | DONE dir | na 16 16 |        |             |         .!native                     these should be handled by hardware reset
  42:000 | DONE dir | na 16 16 |        |             |         .!a16                        
  43:000 | DONE dir | na 16 16 |        |             |         .!xy16                       
  44:000 | DONE ins | na 16 16 | 006066 | 78          |                 sei                  
  45:000 | DONE wsp | na 16 16 |        |             |
  46:000 | DONE cmt | na 16 16 |        |             |                 ; TODO switch to Single Task mode
  47:000 | DONE cmt | na 16 16 |        |             |                 ; TODO set up Direct Page stuff
  48:000 | DONE cmt | na 16 16 |        |             |                 ; TODO initiate User variables
  49:000 | DONE wsp | na 16 16 |        |             |
  50:000 | DONE wsp | na 16 16 |        |             |
  51:000 | DONE cmt | na 16 16 |        |             |                 ; We start out in decimal mode
  52:000 | DONE ins | na 16 16 | 006067 | 20 ef 64    |                 jsr 0064ef           
  53:000 | DONE wsp | na 16 16 |        |             |
  54:000 | DONE cmt | na 16 16 |        |             |                 ; The name token (nt) of DROP is always the first one in the
  55:000 | DONE cmt | na 16 16 |        |             |                 ; virgin Dictionary, so we start off the Dictionary Pointer (DP)
  56:000 | DONE cmt | na 16 16 |        |             |                 ; there. Anything that comes after that (with WORDS, before
  57:000 | DONE cmt | na 16 16 |        |             |                 ; that) is high-level
  58:000 | DONE ins | na 16 16 | 00606a | a9 f8 6e    |                 lda.# 006ef8         
  59:000 | DONE ins | na 16 16 | 00606d | 85 02       |                 sta.d 000202         
  60:000 | DONE wsp | na 16 16 |        |             |
  61:000 | DONE cmt | na 16 16 |        |             |                 ; The compiler pointer (CP) points to the first free cell
  62:000 | DONE cmt | na 16 16 |        |             |                 ; in RAM
  63:000 | DONE ins | na 16 16 | 00606f | a9 00 03    |                 lda.# 000300         
  64:000 | DONE ins | na 16 16 | 006072 | 85 00       |                 sta.d 000200         
  65:000 | DONE wsp | na 16 16 |        |             |
  66:000 | DONE cmt | na 16 16 |        |             |                 ; Prepare input buffers
  67:000 | DONE ins | na 16 16 | 006074 | a9 00 7c    |                 lda.# 007c00         start with first input buffer
  68:000 | DONE ins | na 16 16 | 006077 | 85 0c       |                 sta.d 00020c         
  69:000 | DONE ins | na 16 16 | 006079 | 64 10       |                 stz.d 000210         previous input buffer is empty
  70:000 | DONE ins | na 16 16 | 00607b | 64 0a       |                 stz.d 00020a         SOURCE-ID is zero
  71:000 | DONE ins | na 16 16 | 00607d | 64 14       |                 stz.d 000214         STATE is zero (interpret)
  72:000 | DONE wsp | na 16 16 |        |             |
  73:000 | DONE cmt | na 16 16 |        |             |                 ; Clear Data Stack
  74:000 | DONE ins | na 16 16 | 00607f | a0 00 00    |                 ldy.# 0000           
  75:000 | DONE ins | na 16 16 | 006082 | a2 f8 02    |                 ldx.# 0002f8         
  76:000 | DONE wsp | na 16 16 |        |             |
  77:000 | DONE cmt | na 16 16 |        |             |                 ; Clean the screen, assumes vt100 terminal
  78:000 | DONE ins | na 16 16 | 006085 | 20 bf 66    |                 jsr 0066bf           
  79:000 | DONE wsp | na 16 16 |        |             |
  80:000 | DONE cmt | na 16 16 |        |             |                 ; Define high-level words via EVALUATE. At this point, whatever
  81:000 | DONE cmt | na 16 16 |        |             |                 ; is in Y (TOS) is garbage, so we don't have to push it to the
  82:000 | DONE cmt | na 16 16 |        |             |                 ; stack first
  83:000 | DONE ins | na 16 16 | 006088 | ca          |                 dex                  
  84:000 | DONE ins | na 16 16 | 006089 | ca          |                 dex                  
  85:000 | DONE ins | na 16 16 | 00608a | ca          |                 dex                  
  86:000 | DONE ins | na 16 16 | 00608b | ca          |                 dex                  
  87:000 | DONE ins | na 16 16 | 00608c | a9 d2 6f    |                 lda.# 006fd2         
  88:000 | DONE ins | na 16 16 | 00608f | 95 00       |                 sta.dx 00            Start address goes in NOS
  89:000 | DONE ins | na 16 16 | 006091 | a0 ca 03    |                 ldy.# 0003ca         length goes in TOS
  90:000 | DONE wsp | na 16 16 |        |             |
  91:000 | DONE ins | na 16 16 | 006094 | 20 6c 65    |                 jsr 00656c           
  92:000 | DONE wsp | na 16 16 |        |             |
  93:000 | DONE cmt | na 16 16 |        |             |                 ; fall through to ABORT
  94:000 | DONE wsp | na 16 16 |        |             |
  95:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
  96:000 | DONE cmt | na 16 16 |        |             | ; ABORT ( -- ) 8+ bytes / X cycles
  97:000 | DONE cmt | na 16 16 |        |             | ; Reset the parameter (data) stack pointer and continue as QUIT
  98:000 | DONE cmt | na 16 16 |        |             | ; We can jump here via subroutine because we reset the stack pointer
  99:000 | DONE cmt | na 16 16 |        |             | ; anyway. Flows into QUIT.
 100:000 | DONE cmt | na 16 16 |        |             | ; TODO see which parts of COLD we should integrate here
 101:000 | DONE lbl | na 16 16 | 006097 |             | xt_abort                             
 102:000 | DONE ins | na 16 16 | 006097 | c2 20       |                 rep 20               
 102:001 | DONE ctl | na 16 16 |        |             |         .!a16
 103:000 | DONE cmt | na 16 16 |        |             |                 ; clear Data Stack
 104:000 | DONE ins | na 16 16 | 006099 | a0 00 00    |                 ldy.# 0000           
 105:000 | DONE ins | na 16 16 | 00609c | a2 f8 02    |                 ldx.# 0002f8         
 106:000 | DONE wsp | na 16 16 |        |             |
 107:000 | DONE wsp | na 16 16 |        |             |
 108:000 | DONE cmt | na 16 16 |        |             | ; drops through to QUIT, z_abort is the same as z_quit.
 109:000 | DONE wsp | na 16 16 |        |             |
 110:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 111:000 | DONE cmt | na 16 16 |        |             | ; QUIT ( -- ) X bytes / X cycles
 112:000 | DONE cmt | na 16 16 |        |             | ; Reset the input, clearning Return Stack. Jumps to QUIT do not have to be
 113:000 | DONE cmt | na 16 16 |        |             | ; subroutine jumps as the Return Stack is cleared anyway. Liara Forth follows
 114:000 | DONE cmt | na 16 16 |        |             | ; the ANSI Forth recommendation to use REFILL. Note we don't display the "ok"
 115:000 | DONE cmt | na 16 16 |        |             | ; system prompt until after the first output. This follows Gforth.
 116:000 | DONE lbl | na 16 16 | 00609f |             | xt_quit                              
 117:000 | DONE cmt | na 16 16 |        |             |                 ; clear Return Stack
 118:000 | DONE ins | na 16 16 | 00609f | a9 ff 7f    |                 lda.# 007fff         
 119:000 | DONE ins | na 16 16 | 0060a2 | 1b          |                 tcs                  
 120:000 | DONE wsp | na 16 16 |        |             |
 121:000 | DONE cmt | na 16 16 |        |             |                 ; make sure Instruction Pointer is empty
 122:000 | DONE cmt | na 16 16 |        |             |                 ; TODO move this someplace else or else it will end up in ROM
 123:000 | DONE ins | na 16 16 | 0060a3 | 9c 9b 65    |                 stz 00659b           
 124:000 | DONE wsp | na 16 16 |        |             |
 125:000 | DONE cmt | na 16 16 |        |             |                 ; switch SOURCE-ID to zero (keyboard input)
 126:000 | DONE ins | na 16 16 | 0060a6 | 64 0a       |                 stz.d 00020a         
 127:000 | DONE wsp | na 16 16 |        |             |
 128:000 | DONE cmt | na 16 16 |        |             |                 ; switch to interpret state (STATE is zero)
 129:000 | DONE ins | na 16 16 | 0060a8 | 64 14       |                 stz.d 000214         
 130:000 | DONE wsp | na 16 16 |        |             |
 131:000 | DONE lbl | na 16 16 | 0060aa |             | quit_get_line                        
 132:000 | DONE cmt | na 16 16 |        |             |                 ; Empty current input buffer. Note the previous input line is
 133:000 | DONE cmt | na 16 16 |        |             |                 ; conserved even if we came here from an abort
 134:000 | DONE ins | na 16 16 | 0060aa | 64 0e       |                 stz.d 00020e         
 135:000 | DONE wsp | na 16 16 |        |             |
 136:000 | DONE cmt | na 16 16 |        |             |                 ; Accept a line from the current input source
 137:000 | DONE ins | na 16 16 | 0060ac | 20 77 67    |                 jsr 006777           ( -- f )
 138:000 | DONE wsp | na 16 16 |        |             |
 139:000 | DONE ins | na 16 16 | 0060af | 98          |                 tya                  force flag test
 140:000 | DONE ins | na 16 16 | 0060b0 | d0 06       |                 bne 0060b8           
 141:000 | DONE wsp | na 16 16 |        |             |
 142:000 | DONE cmt | na 16 16 |        |             |                 ; If REFILL returned a FALSE flag, something went wrong and we
 143:000 | DONE cmt | na 16 16 |        |             |                 ; need to print an error message and reset the machine. We don't
 144:000 | DONE cmt | na 16 16 |        |             |                 ; need to save TOS because we're going to clobber it anyway when we
 145:000 | DONE cmt | na 16 16 |        |             |                 ; go back to ABORT.
 146:000 | DONE ins | na 16 16 | 0060b2 | a9 70 74    |                 lda.# 007470         
 147:000 | DONE ins | na 16 16 | 0060b5 | 4c 98 6f    |                 jmp 006f98           
 148:000 | DONE wsp | na 16 16 |        |             |
 149:000 | DONE wsp | na 16 16 |        |             |
 150:000 | DONE lbl | na 16 16 | 0060b8 |             | quit_refill_successful               
 151:000 | DONE cmt | na 16 16 |        |             |                 ; Assume we have successfully accepted a string of input from
 152:000 | DONE cmt | na 16 16 |        |             |                 ; a source, with address of buffer in cib and length of input in
 153:000 | DONE cmt | na 16 16 |        |             |                 ; ciblen. We arrive here still with the TRUE flag from REFILL as
 154:000 | DONE cmt | na 16 16 |        |             |                 ; TOS (in Y)
 155:000 | DONE ins | na 16 16 | 0060b8 | b4 00       |                 ldy.dx 00            drop TOS
 156:000 | DONE ins | na 16 16 | 0060ba | e8          |                 inx                  
 157:000 | DONE ins | na 16 16 | 0060bb | e8          |                 inx                  
 158:000 | DONE wsp | na 16 16 |        |             |
 159:000 | DONE cmt | na 16 16 |        |             |                 ; make >IN point to begining of buffer
 160:000 | DONE ins | na 16 16 | 0060bc | 64 12       |                 stz.d 000212         
 161:000 | DONE wsp | na 16 16 |        |             |
 162:000 | DONE cmt | na 16 16 |        |             |                 ; Main compile/execute routine. Consider moving this inside QUIT
 163:000 | DONE cmt | na 16 16 |        |             |                 ; once we know everything works
 164:000 | DONE ins | na 16 16 | 0060be | 20 26 6f    |                 jsr 006f26           
 165:000 | DONE wsp | na 16 16 |        |             |
 166:000 | DONE cmt | na 16 16 |        |             |                 ; Test for Data Stack underflow. Our stack is so large in single
 167:000 | DONE cmt | na 16 16 |        |             |                 ; user mode that we don't bother checking for overflow - if that
 168:000 | DONE cmt | na 16 16 |        |             |                 ; happens, we're screwed anyway
 169:000 | DONE ins | na 16 16 | 0060c1 | e0 f9 02    |                 cpx.# 0002f9         
 170:000 | DONE ins | na 16 16 | 0060c4 | 90 06       |                 bcc 0060cc           DSP must always be smaller (!) than DSP0
 171:000 | DONE wsp | na 16 16 |        |             |
 172:000 | DONE ins | na 16 16 | 0060c6 | a9 d6 74    |                 lda.# 0074d6         
 173:000 | DONE ins | na 16 16 | 0060c9 | 4c 98 6f    |                 jmp 006f98           
 174:000 | DONE wsp | na 16 16 |        |             |
 175:000 | DONE lbl | na 16 16 | 0060cc |             | quit_ok                              
 176:000 | DONE cmt | na 16 16 |        |             |                 ; Display system prompt if all went well. If we're interpreting,
 177:000 | DONE cmt | na 16 16 |        |             |                 ; this is " ok", if we're compiling, it's " compiled"
 178:000 | DONE ins | na 16 16 | 0060cc | a5 14       |                 lda.d 000214         
 179:000 | DONE ins | na 16 16 | 0060ce | d0 05       |                 bne 0060d5           
 180:000 | DONE wsp | na 16 16 |        |             |
 181:000 | DONE ins | na 16 16 | 0060d0 | a9 9c 73    |                 lda.# 00739c         
 182:000 | DONE ins | na 16 16 | 0060d3 | 80 03       |                 bra 0060d8           
 183:000 | DONE lbl | na 16 16 | 0060d5 |             | quit_compiled                        
 184:000 | DONE ins | na 16 16 | 0060d5 | a9 a0 73    |                 lda.# 0073a0         fall through to quit_print
 185:000 | DONE lbl | na 16 16 | 0060d8 |             | quit_print                           
 186:000 | DONE ins | na 16 16 | 0060d8 | 20 9e 6f    |                 jsr 006f9e           
 187:000 | DONE wsp | na 16 16 |        |             |
 188:000 | DONE cmt | na 16 16 |        |             |                 ; Awesome line, everybody. Now get the next one
 189:000 | DONE ins | na 16 16 | 0060db | 4c aa 60    |                 jmp 0060aa           
 190:000 | DONE wsp | na 16 16 |        |             |
 191:000 | DONE lbl | na 16 16 | 0060de |             | z_cold                               
 192:000 | DONE lbl | na 16 16 | 0060de |             | z_abort                              
 193:000 | DONE lbl | na 16 16 | 0060de |             | z_quit                               
 193:001 | DONE ins | na 16 16 | 0060de | ea          |                 nop                  dummy for compilation, TODO test if required
 194:000 | DONE wsp | na 16 16 |        |             |
 195:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 196:000 | DONE cmt | na 16 16 |        |             | ; < "LESS" ( n m -- f ) X bytes / X cycles
 197:000 | DONE cmt | na 16 16 |        |             | ; Return true flag if NOS < TOS. See
 198:000 | DONE cmt | na 16 16 |        |             | ; http://www.6502.org/tutorials/compare_beyond.html for details on the
 199:000 | DONE cmt | na 16 16 |        |             | ; comparisons
 200:000 | DONE lbl | na 16 16 | 0060df |             | xt_less                              
 201:000 | DONE ins | na 16 16 | 0060df | 98          |                 tya                  
 202:000 | DONE ins | na 16 16 | 0060e0 | a0 00 00    |                 ldy.# 0000           default is false
 203:000 | DONE wsp | na 16 16 |        |             |
 204:000 | DONE ins | na 16 16 | 0060e3 | 38          |                 sec                  
 205:000 | DONE ins | na 16 16 | 0060e4 | f5 00       |                 sbc.dx 00            
 206:000 | DONE ins | na 16 16 | 0060e6 | f0 08       |                 beq 0060f0           the same is not greater
 207:000 | DONE ins | na 16 16 | 0060e8 | 50 03       |                 bvc 0060ed           no overflow, skip ahead
 208:000 | DONE wsp | na 16 16 |        |             |
 209:000 | DONE cmt | na 16 16 |        |             |                 ; Deal with oveflow because we use signed numbers
 210:000 | DONE ins | na 16 16 | 0060ea | 49 00 80    |                 eor.# 8000           compliment negative flag
 211:000 | DONE wsp | na 16 16 |        |             |
 212:000 | DONE lbl | na 16 16 | 0060ed |             | xt_less_no_ov                        
 213:000 | DONE cmt | na 16 16 |        |             |                 ; if we're negative TOS > NOS
 214:000 | DONE ins | na 16 16 | 0060ed | 30 01       |                 bmi 0060f0           
 215:000 | DONE ins | na 16 16 | 0060ef | 88          |                 dey                  
 216:000 | DONE lbl | na 16 16 | 0060f0 |             | xt_less_nip                          
 217:000 | DONE ins | na 16 16 | 0060f0 | e8          |                 inx                  
 218:000 | DONE ins | na 16 16 | 0060f1 | e8          |                 inx                  
 219:000 | DONE wsp | na 16 16 |        |             |
 220:000 | DONE lbl | na 16 16 | 0060f2 |             | z_less                               
 220:001 | DONE ins | na 16 16 | 0060f2 | 60          |                 rts                  
 221:000 | DONE wsp | na 16 16 |        |             |
 222:000 | DONE wsp | na 16 16 |        |             |
 223:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 224:000 | DONE cmt | na 16 16 |        |             | ; <> "NOT-EQUAL" ( n m -- f ) X bytes / X cycles
 225:000 | DONE cmt | na 16 16 |        |             | ; Return true flag if TOS and NOS are not the same. This is just a different
 226:000 | DONE cmt | na 16 16 |        |             | ; version of EQUAL, we repeat the code for speed reasons
 227:000 | DONE lbl | na 16 16 | 0060f3 |             | xt_not-equal                         
 228:000 | DONE ins | na 16 16 | 0060f3 | 98          |                 tya                  
 229:000 | DONE ins | na 16 16 | 0060f4 | a0 00 00    |                 ldy.# 0000           default value is false
 230:000 | DONE wsp | na 16 16 |        |             |
 231:000 | DONE ins | na 16 16 | 0060f7 | d5 00       |                 cmp.dx 00            
 232:000 | DONE ins | na 16 16 | 0060f9 | f0 01       |                 beq 0060fc           
 233:000 | DONE ins | na 16 16 | 0060fb | 88          |                 dey                  wraps to 0FFFF (true)
 234:000 | DONE wsp | na 16 16 |        |             |
 235:000 | DONE lbl | na 16 16 | 0060fc |             | not-equal_equal                      ; yes, this is a silly name
 236:000 | DONE ins | na 16 16 | 0060fc | e8          |                 inx                  
 237:000 | DONE ins | na 16 16 | 0060fd | e8          |                 inx                  
 238:000 | DONE wsp | na 16 16 |        |             |
 239:000 | DONE lbl | na 16 16 | 0060fe |             | z_not-equal                          
 239:001 | DONE ins | na 16 16 | 0060fe | 60          |                 rts                  
 240:000 | DONE wsp | na 16 16 |        |             |
 241:000 | DONE wsp | na 16 16 |        |             |
 242:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 243:000 | DONE cmt | na 16 16 |        |             | ; > "GREATER" ( n m -- f ) X bytes / X cycles
 244:000 | DONE cmt | na 16 16 |        |             | ; Return true flag if NOS > TOS. See
 245:000 | DONE cmt | na 16 16 |        |             | ; http://www.6502.org/tutorials/compare_beyond.html for details on the
 246:000 | DONE cmt | na 16 16 |        |             | ; comparisons
 247:000 | DONE lbl | na 16 16 | 0060ff |             | xt_greater                           
 248:000 | DONE ins | na 16 16 | 0060ff | 98          |                 tya                  
 249:000 | DONE ins | na 16 16 | 006100 | a0 00 00    |                 ldy.# 0000           default is false
 250:000 | DONE wsp | na 16 16 |        |             |
 251:000 | DONE ins | na 16 16 | 006103 | 38          |                 sec                  
 252:000 | DONE ins | na 16 16 | 006104 | f5 00       |                 sbc.dx 00            
 253:000 | DONE ins | na 16 16 | 006106 | f0 08       |                 beq 006110           the same is not greater
 254:000 | DONE ins | na 16 16 | 006108 | 50 03       |                 bvc 00610d           no overflow, skip ahead
 255:000 | DONE wsp | na 16 16 |        |             |
 256:000 | DONE cmt | na 16 16 |        |             |                 ; Deal with oveflow because we use signed numbers
 257:000 | DONE ins | na 16 16 | 00610a | 49 00 80    |                 eor.# 8000           compliment negative flag
 258:000 | DONE wsp | na 16 16 |        |             |
 259:000 | DONE lbl | na 16 16 | 00610d |             | xt_greater_no_ov                     
 260:000 | DONE cmt | na 16 16 |        |             |                 ; if we're still positiv, TOS < NOS
 261:000 | DONE ins | na 16 16 | 00610d | 10 01       |                 bpl 006110           
 262:000 | DONE ins | na 16 16 | 00610f | 88          |                 dey                  
 263:000 | DONE lbl | na 16 16 | 006110 |             | xt_greater_nip                       
 264:000 | DONE ins | na 16 16 | 006110 | e8          |                 inx                  
 265:000 | DONE ins | na 16 16 | 006111 | e8          |                 inx                  
 266:000 | DONE wsp | na 16 16 |        |             |
 267:000 | DONE lbl | na 16 16 | 006112 |             | z_greater                            
 267:001 | DONE ins | na 16 16 | 006112 | 60          |                 rts                  
 268:000 | DONE wsp | na 16 16 |        |             |
 269:000 | DONE wsp | na 16 16 |        |             |
 270:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 271:000 | DONE cmt | na 16 16 |        |             | ; >IN "TO-IN" ( -- addr ) 6 bytes / 12 cycles
 272:000 | DONE cmt | na 16 16 |        |             | ; Return address where pointer to current char in input buffer lives (>IN)
 273:000 | DONE lbl | na 16 16 | 006113 |             | xt_to-in                             
 274:000 | DONE ins | na 16 16 | 006113 | ca          |                 dex                  
 275:000 | DONE ins | na 16 16 | 006114 | ca          |                 dex                  
 276:000 | DONE ins | na 16 16 | 006115 | 94 00       |                 sty.dx 00            
 277:000 | DONE wsp | na 16 16 |        |             |
 278:000 | DONE ins | na 16 16 | 006117 | a0 12 02    |                 ldy.# 000212         >IN
 279:000 | DONE lbl | na 16 16 | 00611a |             | z_to-in                              
 279:001 | DONE ins | na 16 16 | 00611a | 60          |                 rts                  
 280:000 | DONE wsp | na 16 16 |        |             |
 281:000 | DONE wsp | na 16 16 |        |             |
 282:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 283:000 | DONE cmt | na 16 16 |        |             | ; >R "TOR" ( n -- ) (R: -- n )  7 bytes / 22 cycles
 284:000 | DONE cmt | na 16 16 |        |             | ; Move Top of Data Stack to Top of Return Stack
 285:000 | DONE cmt | na 16 16 |        |             | ; TODO consider stripping PHA/PLA if natively compiled (see COMPILE,)
 286:000 | DONE lbl | na 16 16 | 00611b |             | xt_tor                               
 287:000 | DONE dir | na 16 16 |        |             |         .!a16                        
 288:000 | DONE cmt | na 16 16 |        |             |                 ; Save the return address. If this word is natively coded, this
 289:000 | DONE cmt | na 16 16 |        |             |                 ; is a complete waste of nine cycles, but required for
 290:000 | DONE cmt | na 16 16 |        |             |                 ; subroutine coding
 291:000 | DONE ins | na 16 16 | 00611b | 68          |                 pla                  
 292:000 | DONE wsp | na 16 16 |        |             |
 293:000 | DONE ins | na 16 16 | 00611c | 5a          |                 phy                  the actual work
 294:000 | DONE wsp | na 16 16 |        |             |
 295:000 | DONE ins | na 16 16 | 00611d | b4 00       |                 ldy.dx 00            DROP
 296:000 | DONE ins | na 16 16 | 00611f | e8          |                 inx                  
 297:000 | DONE ins | na 16 16 | 006120 | e8          |                 inx                  
 298:000 | DONE wsp | na 16 16 |        |             |
 299:000 | DONE ins | na 16 16 | 006121 | 48          |                 pha                  put return address back in place
 300:000 | DONE wsp | na 16 16 |        |             |
 301:000 | DONE lbl | na 16 16 | 006122 |             | z_tor                                
 301:001 | DONE ins | na 16 16 | 006122 | 60          |                 rts                  
 302:000 | DONE wsp | na 16 16 |        |             |
 303:000 | DONE wsp | na 16 16 |        |             |
 304:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 305:000 | DONE cmt | na 16 16 |        |             | ; . "DOT" ( n -- ) X bytes / X cycles
 306:000 | DONE cmt | na 16 16 |        |             | ; Print value that is TOS followed by a single space
 307:000 | DONE cmt | na 16 16 |        |             | ; Forth code is  DUP ABS 0 <# #S ROT SIGN #> TYPE SPACE
 308:000 | DONE cmt | na 16 16 |        |             | ; Since this is used interactively, and humans are slow (just ask GlaDOS), we
 309:000 | DONE cmt | na 16 16 |        |             | ; focus on size
 310:000 | DONE cmt | na 16 16 |        |             | ; TODO this is a temporary version
 311:000 | DONE lbl | na 16 16 | 006123 |             | xt_dot                               
 312:000 | DONE cmt | na 16 16 |        |             |                 ; --- TEMP print routine ---
 313:000 | DONE ins | na 16 16 | 006123 | 98          |                 tya                  
 314:000 | DONE ins | na 16 16 | 006124 | 29 00 ff    |                 and.# 0ff00          
 315:000 | DONE ins | na 16 16 | 006127 | eb          |                 xba                  
 316:000 | DONE ins | na 16 16 | 006128 | 20 b6 6f    |                 jsr 006fb6           
 317:000 | DONE ins | na 16 16 | 00612b | 98          |                 tya                  
 318:000 | DONE ins | na 16 16 | 00612c | 29 ff 00    |                 and.# 00ff           
 319:000 | DONE ins | na 16 16 | 00612f | 20 b6 6f    |                 jsr 006fb6           
 320:000 | DONE ins | na 16 16 | 006132 | 20 4a 68    |                 jsr 00684a           
 321:000 | DONE cmt | na 16 16 |        |             |                 ; --- TEMP print routine ---
 322:000 | DONE wsp | na 16 16 |        |             |
 323:000 | DONE cmt | na 16 16 |        |             |                 ; Since we don't care about speed in this word, we save one byte
 324:000 | DONE cmt | na 16 16 |        |             |                 ; by doing DROP the slow way and save one byte
 325:000 | DONE ins | na 16 16 | 006135 | 20 3b 65    |                 jsr 00653b           
 326:000 | DONE wsp | na 16 16 |        |             |
 327:000 | DONE lbl | na 16 16 | 006138 |             | z_dot                                
 327:001 | DONE ins | na 16 16 | 006138 | 60          |                 rts                  
 328:000 | DONE wsp | na 16 16 |        |             |
 329:000 | DONE wsp | na 16 16 |        |             |
 330:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 331:000 | DONE cmt | na 16 16 |        |             | ; .( "DOTPAREN" ( "string" -- ) 13 bytes / X cycles
 332:000 | DONE cmt | na 16 16 |        |             | ; Display string delimited by ")" immediately, regardless if word is compiled or
 333:000 | DONE cmt | na 16 16 |        |             | ; interpreted. Forth definition is  .( [CHAR] ) PARSE TYPE ; IMMEDIATE
 334:000 | DONE cmt | na 16 16 |        |             | ; TODO Decide if this should be a high-level word
 335:000 | DONE lbl | na 16 16 | 006139 |             | xt_dotparen                          
 336:000 | DONE cmt | na 16 16 |        |             |                ; use PARSE to find the end of the string
 337:000 | DONE ins | na 16 16 | 006139 | ca          |                 dex                  
 338:000 | DONE ins | na 16 16 | 00613a | ca          |                 dex                  
 339:000 | DONE ins | na 16 16 | 00613b | 94 00       |                 sty.dx 00            
 340:000 | DONE ins | na 16 16 | 00613d | a0 29 00    |                 ldy.# 29             
 341:000 | DONE wsp | na 16 16 |        |             |
 342:000 | DONE ins | na 16 16 | 006140 | 20 fe 66    |                 jsr 0066fe           ( -- addr u)
 343:000 | DONE ins | na 16 16 | 006143 | 20 85 68    |                 jsr 006885           
 344:000 | DONE wsp | na 16 16 |        |             |
 345:000 | DONE lbl | na 16 16 | 006146 |             | z_dotparen                           
 345:001 | DONE ins | na 16 16 | 006146 | 60          |                 rts                  
 346:000 | DONE wsp | na 16 16 |        |             |
 347:000 | DONE wsp | na 16 16 |        |             |
 348:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 349:000 | DONE cmt | na 16 16 |        |             | ; ." "DOTQUOTE" ( -- ) X bytes / X cycles
 350:000 | DONE cmt | na 16 16 |        |             | ; Compile string that is printed during run time. ANSI Forth wants this to be
 351:000 | DONE cmt | na 16 16 |        |             | ; compile-only, even though everybody and their friend uses it for everything.
 352:000 | DONE cmt | na 16 16 |        |             | ; We follow the book here, and recommend .( for general printing.
 353:000 | DONE lbl | na 16 16 | 006147 |             | xt_dotquote                          
 354:000 | DONE ins | na 16 16 | 006147 | ca          |                 dex                  
 355:000 | DONE ins | na 16 16 | 006148 | ca          |                 dex                  
 356:000 | DONE ins | na 16 16 | 006149 | 94 00       |                 sty.dx 00            
 357:000 | DONE ins | na 16 16 | 00614b | a0 22 00    |                 ldy.# 0022           ASCII for "
 358:000 | DONE wsp | na 16 16 |        |             |
 359:000 | DONE ins | na 16 16 | 00614e | 20 fe 66    |                 jsr 0066fe           
 360:000 | DONE ins | na 16 16 | 006151 | 20 d5 67    |                 jsr 0067d5           
 361:000 | DONE wsp | na 16 16 |        |             |
 362:000 | DONE ins | na 16 16 | 006154 | f4 85 68    |                 phe.# 006885         
 363:000 | DONE ins | na 16 16 | 006157 | 20 77 6f    |                 jsr 006f77           
 364:000 | DONE wsp | na 16 16 |        |             |
 365:000 | DONE ins | na 16 16 | 00615a | 60          |                 rts                  
 366:000 | DONE lbl | na 16 16 | 00615b |             | z_dotquote                           
 367:000 | DONE wsp | na 16 16 |        |             |
 368:000 | DONE wsp | na 16 16 |        |             |
 369:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 370:000 | DONE cmt | na 16 16 |        |             | ; .S "DOTS" ( -- ) X bytes / X cycles
 371:000 | DONE cmt | na 16 16 |        |             | ; Print content of Data Stack non-distructively. Since this is for humans, we
 372:000 | DONE cmt | na 16 16 |        |             | ; don't have to worry about speed. We follow the format of Gforth
 373:000 | DONE cmt | na 16 16 |        |             | ; and print the number of elements first in brackets, followed by the Data Stack
 374:000 | DONE cmt | na 16 16 |        |             | ; content (if present).
 375:000 | DONE lbl | na 16 16 | 00615b |             | xt_dots                              
 376:000 | DONE dir | na 16 16 |        |             |         .!a16                        
 377:000 | DONE dir | na 16 16 |        |             |         .!xy16                       
 378:000 | DONE ins | na 16 16 | 00615b | 20 f5 64    |                 jsr 0064f5           ( -- u)
 379:000 | DONE wsp | na 16 16 |        |             |
 380:000 | DONE cmt | na 16 16 |        |             |                 ; Print stack depth in brackets
 381:000 | DONE cmt | na 16 16 |        |             |                 ; TODO rewrite this to use EMIT
 382:000 | DONE ins | na 16 16 | 00615e | a9 3c 00    |                 lda.# 3c             
 383:000 | DONE ins | na 16 16 | 006161 | 20 36 60    |                 jsr 006036           
 384:000 | DONE wsp | na 16 16 |        |             |
 385:000 | DONE cmt | na 16 16 |        |             |                 ; --- TEMP print routine ---
 386:000 | DONE ins | na 16 16 | 006164 | 98          |                 tya                  
 387:000 | DONE ins | na 16 16 | 006165 | 29 00 ff    |                 and.# 0ff00          
 388:000 | DONE ins | na 16 16 | 006168 | eb          |                 xba                  
 389:000 | DONE ins | na 16 16 | 006169 | 20 b6 6f    |                 jsr 006fb6           
 390:000 | DONE ins | na 16 16 | 00616c | 98          |                 tya                  
 391:000 | DONE ins | na 16 16 | 00616d | 29 ff 00    |                 and.# 00ff           
 392:000 | DONE ins | na 16 16 | 006170 | 20 b6 6f    |                 jsr 006fb6           
 393:000 | DONE cmt | na 16 16 |        |             |                 ; --- TEMP print routine ---
 394:000 | DONE wsp | na 16 16 |        |             |
 395:000 | DONE cmt | na 16 16 |        |             |                 ; TODO rewrite this to use EMIT
 396:000 | DONE ins | na 16 16 | 006173 | a9 3e 00    |                 lda.# 3e             
 397:000 | DONE ins | na 16 16 | 006176 | 20 36 60    |                 jsr 006036           
 398:000 | DONE ins | na 16 16 | 006179 | 20 4a 68    |                 jsr 00684a           
 399:000 | DONE wsp | na 16 16 |        |             |
 400:000 | DONE wsp | na 16 16 |        |             |
 401:000 | DONE cmt | na 16 16 |        |             |                 ; There will be a lot of cases where .S is used when the stack
 402:000 | DONE cmt | na 16 16 |        |             |                 ; is empty. Get them first and exit quickly
 403:000 | DONE ins | na 16 16 | 00617c | 98          |                 tya                  force flag test
 404:000 | DONE ins | na 16 16 | 00617d | f0 20       |                 beq 00619f           
 405:000 | DONE wsp | na 16 16 |        |             |
 406:000 | DONE lbl | na 16 16 | 00617f |             | dots_not_empty                       
 407:000 | DONE cmt | na 16 16 |        |             |                 ; We have at least one element on the stack, which used to be in
 408:000 | DONE cmt | na 16 16 |        |             |                 ; Y as TOS, but is now NOS and therefore accessable by X. Also,
 409:000 | DONE cmt | na 16 16 |        |             |                 ; the depth of the Data Stack is already in Y waiting to be used
 410:000 | DONE cmt | na 16 16 |        |             |                 ; as a counter. We use this to our advantage.
 411:000 | DONE wsp | na 16 16 |        |             |
 412:000 | DONE cmt | na 16 16 |        |             |                 ; Normally we would go with STX.D tmptos / LDX.D tmptos with
 413:000 | DONE cmt | na 16 16 |        |             |                 ; 4 bytes and 8 cycles because we value speed over size.
 414:000 | DONE cmt | na 16 16 |        |             |                 ; However, .S is used interactively, and humans
 415:000 | DONE cmt | na 16 16 |        |             |                 ; won't notice the one cycle more of PHX/PLX (2 bytes,
 416:000 | DONE cmt | na 16 16 |        |             |                 ; 9 cycles), and we save the two bytes.
 417:000 | DONE ins | na 16 16 | 00617f | da          |                 phx                  
 418:000 | DONE wsp | na 16 16 |        |             |
 419:000 | DONE cmt | na 16 16 |        |             |                 ; We print from the bottom up. Note that the Data Stack locations
 420:000 | DONE cmt | na 16 16 |        |             |                 ; dsp0 and dsp0+2 always contain garbage so they can be skipped.
 421:000 | DONE cmt | na 16 16 |        |             |                 ; See docs/INTERNALS.md for details
 422:000 | DONE ins | na 16 16 | 006180 | a2 f8 02    |                 ldx.# 0002f8         points to dsp0, which is garbage
 423:000 | DONE ins | na 16 16 | 006183 | ca          |                 dex                  
 424:000 | DONE ins | na 16 16 | 006184 | ca          |                 dex                  points to dsp0-2, which is also garbage
 425:000 | DONE wsp | na 16 16 |        |             |
 426:000 | DONE lbl | na 16 16 | 006185 |             | dots_loop                            
 427:000 | DONE ins | na 16 16 | 006185 | ca          |                 dex                  get next element on DS, initially dsp0-4
 428:000 | DONE ins | na 16 16 | 006186 | ca          |                 dex                  
 429:000 | DONE wsp | na 16 16 |        |             |
 430:000 | DONE cmt | na 16 16 |        |             |                 ; --- TEMP print routine ---
 431:000 | DONE cmt | na 16 16 |        |             |                 ; TODO call EMIT
 432:000 | DONE ins | na 16 16 | 006187 | b5 00       |                 lda.dx 00            
 433:000 | DONE ins | na 16 16 | 006189 | 29 00 ff    |                 and.# 0ff00          
 434:000 | DONE ins | na 16 16 | 00618c | eb          |                 xba                  
 435:000 | DONE ins | na 16 16 | 00618d | 20 b6 6f    |                 jsr 006fb6           
 436:000 | DONE ins | na 16 16 | 006190 | b5 00       |                 lda.dx 00            
 437:000 | DONE ins | na 16 16 | 006192 | 29 ff 00    |                 and.# 00ff           
 438:000 | DONE ins | na 16 16 | 006195 | 20 b6 6f    |                 jsr 006fb6           
 439:000 | DONE ins | na 16 16 | 006198 | 20 4a 68    |                 jsr 00684a           
 440:000 | DONE cmt | na 16 16 |        |             |                 ; --- TEMP print routine ---
 441:000 | DONE wsp | na 16 16 |        |             |
 442:000 | DONE ins | na 16 16 | 00619b | 88          |                 dey                  
 443:000 | DONE ins | na 16 16 | 00619c | d0 e7       |                 bne 006185           
 444:000 | DONE wsp | na 16 16 |        |             |
 445:000 | DONE ins | na 16 16 | 00619e | fa          |                 plx                  restore original DSP
 446:000 | DONE wsp | na 16 16 |        |             |
 447:000 | DONE lbl | na 16 16 | 00619f |             | dots_done                            
 448:000 | DONE cmt | na 16 16 |        |             |                 ; Clean up. Again, we don't care about speed in this
 449:000 | DONE cmt | na 16 16 |        |             |                 ; word so we save one byte by doing DROP the slow way
 450:000 | DONE ins | na 16 16 | 00619f | 20 3b 65    |                 jsr 00653b           
 451:000 | DONE wsp | na 16 16 |        |             |
 452:000 | DONE lbl | na 16 16 | 0061a2 |             | z_dots                               
 452:001 | DONE ins | na 16 16 | 0061a2 | 60          |                 rts                  
 453:000 | DONE wsp | na 16 16 |        |             |
 454:000 | DONE wsp | na 16 16 |        |             |
 455:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 456:000 | DONE cmt | na 16 16 |        |             | ; , "COMMA" ( n -- ) 11 bytes / 29 cycles
 457:000 | DONE cmt | na 16 16 |        |             | ; Allot one cell and store TOS in memory. We ignore alignment issues, though
 458:000 | DONE cmt | na 16 16 |        |             | ; satisfy the ANSI requirement that an aligned compiler pointer will remain
 459:000 | DONE cmt | na 16 16 |        |             | ; aligned
 460:000 | DONE cmt | na 16 16 |        |             | ; There is another variant possible:
 461:000 | DONE cmt | na 16 16 |        |             | ;               tya
 462:000 | DONE cmt | na 16 16 |        |             | ;               ldy.d cp
 463:000 | DONE cmt | na 16 16 |        |             | ;               sta.y 0000
 464:000 | DONE cmt | na 16 16 |        |             | ;               iny
 465:000 | DONE cmt | na 16 16 |        |             | ;               iny
 466:000 | DONE cmt | na 16 16 |        |             | ;               sty.d cp
 467:000 | DONE cmt | na 16 16 |        |             | ;               ldy.dx 00
 468:000 | DONE cmt | na 16 16 |        |             | ;               inx
 469:000 | DONE cmt | na 16 16 |        |             | ;               inx
 470:000 | DONE cmt | na 16 16 |        |             | ; This is as fast as the variant below, but three bytes longer
 471:000 | DONE lbl | na 16 16 | 0061a3 |             | xt_comma                             
 472:000 | DONE dir | na 16 16 |        |             |         .!a16                        
 473:000 | DONE ins | na 16 16 | 0061a3 | 98          |                 tya                  
 474:000 | DONE ins | na 16 16 | 0061a4 | 92 00       |                 sta.di 000200        STA (CP)
 475:000 | DONE ins | na 16 16 | 0061a6 | e6 00       |                 inc.d 000200         
 476:000 | DONE ins | na 16 16 | 0061a8 | e6 00       |                 inc.d 000200         
 477:000 | DONE wsp | na 16 16 |        |             |
 478:000 | DONE ins | na 16 16 | 0061aa | b4 00       |                 ldy.dx 00            
 479:000 | DONE ins | na 16 16 | 0061ac | e8          |                 inx                  
 480:000 | DONE ins | na 16 16 | 0061ad | e8          |                 inx                  
 481:000 | DONE wsp | na 16 16 |        |             |
 482:000 | DONE lbl | na 16 16 | 0061ae |             | z_comma                              
 482:001 | DONE ins | na 16 16 | 0061ae | 60          |                 rts                  
 483:000 | DONE wsp | na 16 16 |        |             |
 484:000 | DONE wsp | na 16 16 |        |             |
 485:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 486:000 | DONE cmt | na 16 16 |        |             | ; : "COLON" ( "name" -- ) X bytes / X cycles
 487:000 | DONE cmt | na 16 16 |        |             | ; Start compilation of new word into the Dictionary. Use the CREATE routine
 488:000 | DONE cmt | na 16 16 |        |             | ; and fill in the rest by hand.
 489:000 | DONE lbl | na 16 16 | 0061af |             | xt_colon                             
 490:000 | DONE dir | na 16 16 |        |             |         .!a16                        
 491:000 | DONE cmt | na 16 16 |        |             |                 ; if we are already in compile mode, complain and abort
 492:000 | DONE ins | na 16 16 | 0061af | a5 14       |                 lda.d 000214         
 493:000 | DONE ins | na 16 16 | 0061b1 | f0 06       |                 beq 0061b9           
 494:000 | DONE wsp | na 16 16 |        |             |
 495:000 | DONE ins | na 16 16 | 0061b3 | a9 be 74    |                 lda.# 0074be         
 496:000 | DONE ins | na 16 16 | 0061b6 | 4c 98 6f    |                 jmp 006f98           
 497:000 | DONE lbl | na 16 16 | 0061b9 |             | @                                    
 498:000 | DONE cmt | na 16 16 |        |             |                 ; Switch to compile state. From now on, everything goes in the
 499:000 | DONE cmt | na 16 16 |        |             |                 ; Dictionary
 500:000 | DONE ins | na 16 16 | 0061b9 | e6 14       |                 inc.d 000214         
 501:000 | DONE wsp | na 16 16 |        |             |
 502:000 | DONE cmt | na 16 16 |        |             |                 ; CREATE is going to change DP to point to the new word's
 503:000 | DONE cmt | na 16 16 |        |             |                 ; header. While this is fine for (say) variables, it would mean
 504:000 | DONE cmt | na 16 16 |        |             |                 ; that FIND-NAME etc would find a half-finished word when
 505:000 | DONE cmt | na 16 16 |        |             |                 ; looking in the Dictionary. To prevent this, we save the old
 506:000 | DONE cmt | na 16 16 |        |             |                 ; version of DP and restore it later. The new DP is placed in
 507:000 | DONE cmt | na 16 16 |        |             |                 ; the variable WORKWORD until we're finished with a SEMICOLON.
 508:000 | DONE ins | na 16 16 | 0061bb | a5 02       |                 lda.d 000202         
 509:000 | DONE ins | na 16 16 | 0061bd | 48          |                 pha                  CREATE uses tmp1, tmp2 and tmp3
 510:000 | DONE wsp | na 16 16 |        |             |
 511:000 | DONE ins | na 16 16 | 0061be | 20 75 64    |                 jsr 006475           
 512:000 | DONE wsp | na 16 16 |        |             |
 513:000 | DONE cmt | na 16 16 |        |             |                 ; Get the nt of the new word as described above. Only COLON,
 514:000 | DONE cmt | na 16 16 |        |             |                 ; SEMICOLON and RECURSE access WORKWORD
 515:000 | DONE ins | na 16 16 | 0061c1 | a5 02       |                 lda.d 000202         
 516:000 | DONE ins | na 16 16 | 0061c3 | 85 1e       |                 sta.d 00021e         
 517:000 | DONE ins | na 16 16 | 0061c5 | 68          |                 pla                  
 518:000 | DONE ins | na 16 16 | 0061c6 | 85 02       |                 sta.d 000202         
 519:000 | DONE wsp | na 16 16 |        |             |
 520:000 | DONE cmt | na 16 16 |        |             |                 ; CREATE includes a subroutine jump to DOVAR by default. We back
 521:000 | DONE cmt | na 16 16 |        |             |                 ; up three bytes and overwrite that. Note that 3 x DEC.D would
 522:000 | DONE cmt | na 16 16 |        |             |                 ; use 3 bytes and 18 cycles; this version uses 8 bytes but
 523:000 | DONE cmt | na 16 16 |        |             |                 ; only 13 cycles
 524:000 | DONE ins | na 16 16 | 0061c8 | a5 00       |                 lda.d 000200         
 525:000 | DONE ins | na 16 16 | 0061ca | 38          |                 sec                  
 526:000 | DONE ins | na 16 16 | 0061cb | e9 03 00    |                 sbc.# 0003           
 527:000 | DONE ins | na 16 16 | 0061ce | 85 00       |                 sta.d 000200         
 528:000 | DONE wsp | na 16 16 |        |             |
 529:000 | DONE lbl | na 16 16 | 0061d0 |             | z_colon                              
 529:001 | DONE ins | na 16 16 | 0061d0 | 60          |                 rts                  
 530:000 | DONE wsp | na 16 16 |        |             |
 531:000 | DONE wsp | na 16 16 |        |             |
 532:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 533:000 | DONE cmt | na 16 16 |        |             | ; ; "SEMICOLON" ( -- ) X bytes / X cycles
 534:000 | DONE cmt | na 16 16 |        |             | ; End the compilation of a new word into the Dictionary. When we enter this,
 535:000 | DONE cmt | na 16 16 |        |             | ; WORKWORD is pointing to the nt_ of this word in the Dictionary, DP to the
 536:000 | DONE cmt | na 16 16 |        |             | ; previous word, and CP to the next free byte.  A Forth definition would be
 537:000 | DONE cmt | na 16 16 |        |             | ; (see "Starting Forth"):
 538:000 | DONE cmt | na 16 16 |        |             | ;  : ;  POSTPONE EXIT  REVEAL POSTPONE ; [ ; IMMEDIATE
 539:000 | DONE lbl | na 16 16 | 0061d1 |             | xt_semicolon                         
 540:000 | DONE dir | na 16 16 |        |             |         .!a16                        
 541:000 | DONE ins | na 16 16 | 0061d1 | 84 06       |                 sty.d 000206         
 542:000 | DONE wsp | na 16 16 |        |             |
 543:000 | DONE cmt | na 16 16 |        |             |                 ; CP is the byte that will be the address we use in the header for
 544:000 | DONE cmt | na 16 16 |        |             |                 ; the end-of-compile address (z_word). This is six bytes down in
 545:000 | DONE cmt | na 16 16 |        |             |                 ; the header
 546:000 | DONE ins | na 16 16 | 0061d3 | a0 06 00    |                 ldy.# 0006           
 547:000 | DONE ins | na 16 16 | 0061d6 | a5 00       |                 lda.d 000200         
 548:000 | DONE ins | na 16 16 | 0061d8 | 91 1e       |                 sta.diy 00021e       STA (WORKWORD),Y
 549:000 | DONE wsp | na 16 16 |        |             |
 550:000 | DONE cmt | na 16 16 |        |             |                 ; Add the RTS instruction to the end of the current word. We
 551:000 | DONE cmt | na 16 16 |        |             |                 ; don't have to switch the size of the A register because we
 552:000 | DONE cmt | na 16 16 |        |             |                 ; only move up the CP by one and the MSB will be overwritten.
 553:000 | DONE cmt | na 16 16 |        |             |                 ; Little endian MPUs for the win!
 554:000 | DONE ins | na 16 16 | 0061da | a9 60 00    |                 lda.# 60             opcode for RTS
 555:000 | DONE ins | na 16 16 | 0061dd | 92 00       |                 sta.di 000200        STA (CP)
 556:000 | DONE ins | na 16 16 | 0061df | e6 00       |                 inc.d 000200         MSB will be overwritten
 557:000 | DONE wsp | na 16 16 |        |             |
 558:000 | DONE cmt | na 16 16 |        |             |                 ; Word definition is complete. Make the new word the last one in
 559:000 | DONE cmt | na 16 16 |        |             |                 ; the Dictionary
 560:000 | DONE ins | na 16 16 | 0061e1 | a5 1e       |                 lda.d 00021e         
 561:000 | DONE ins | na 16 16 | 0061e3 | 85 02       |                 sta.d 000202         
 562:000 | DONE wsp | na 16 16 |        |             |
 563:000 | DONE cmt | na 16 16 |        |             |                 ; Get our TOS back
 564:000 | DONE ins | na 16 16 | 0061e5 | a4 06       |                 ldy.d 000206         
 565:000 | DONE wsp | na 16 16 |        |             |
 566:000 | DONE cmt | na 16 16 |        |             |                 ; Set compile flag back to zero so we're back in interpret mode
 567:000 | DONE ins | na 16 16 | 0061e7 | 64 14       |                 stz.d 000214         
 568:000 | DONE wsp | na 16 16 |        |             |
 569:000 | DONE lbl | na 16 16 | 0061e9 |             | z_semicolon                          
 569:001 | DONE ins | na 16 16 | 0061e9 | 60          |                 rts                  
 570:000 | DONE wsp | na 16 16 |        |             |
 571:000 | DONE wsp | na 16 16 |        |             |
 572:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 573:000 | DONE cmt | na 16 16 |        |             | ; ? "QUESTION" ( addr -- ) X bytes / X cycles
 574:000 | DONE cmt | na 16 16 |        |             | ; Print content of a variable. This is used interactively and humans are
 575:000 | DONE cmt | na 16 16 |        |             | ; slow, so we just go for the subroutine jumps to keep it short
 576:000 | DONE lbl | na 16 16 | 0061ea |             | xt_question                          
 577:000 | DONE ins | na 16 16 | 0061ea | 20 fd 61    |                 jsr 0061fd           
 578:000 | DONE ins | na 16 16 | 0061ed | 20 23 61    |                 jsr 006123           
 579:000 | DONE wsp | na 16 16 |        |             |
 580:000 | DONE lbl | na 16 16 | 0061f0 |             | z_question                           
 580:001 | DONE ins | na 16 16 | 0061f0 | 60          |                 rts                  
 581:000 | DONE wsp | na 16 16 |        |             |
 582:000 | DONE wsp | na 16 16 |        |             |
 583:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 584:000 | DONE cmt | na 16 16 |        |             | ; ! "STORE" ( n addr -- ) 9 bytes / X cycles
 585:000 | DONE cmt | na 16 16 |        |             | ; Save value at designated memory location
 586:000 | DONE lbl | na 16 16 | 0061f1 |             | xt_store                             
 587:000 | DONE dir | na 16 16 |        |             |         .!a16                        
 588:000 | DONE ins | na 16 16 | 0061f1 | b5 00       |                 lda.dx 00            NOS has value
 589:000 | DONE ins | na 16 16 | 0061f3 | 99 00 00    |                 sta.y 0000           
 590:000 | DONE wsp | na 16 16 |        |             |
 591:000 | DONE ins | na 16 16 | 0061f6 | b4 02       |                 ldy.dx 02            
 592:000 | DONE ins | na 16 16 | 0061f8 | e8          |                 inx                  
 593:000 | DONE ins | na 16 16 | 0061f9 | e8          |                 inx                  
 594:000 | DONE ins | na 16 16 | 0061fa | e8          |                 inx                  
 595:000 | DONE ins | na 16 16 | 0061fb | e8          |                 inx                  
 596:000 | DONE wsp | na 16 16 |        |             |
 597:000 | DONE lbl | na 16 16 | 0061fc |             | z_store                              
 597:001 | DONE ins | na 16 16 | 0061fc | 60          |                 rts                  
 598:000 | DONE wsp | na 16 16 |        |             |
 599:000 | DONE wsp | na 16 16 |        |             |
 600:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 601:000 | DONE cmt | na 16 16 |        |             | ; @ "FETCH" ( addr -- n ) 4 bytes / 7-8 cycles
 602:000 | DONE cmt | na 16 16 |        |             | ; Get one cell (16 bit) value from given address
 603:000 | DONE lbl | na 16 16 | 0061fd |             | xt_fetch                             
 604:000 | DONE ins | na 16 16 | 0061fd | b9 00 00    |                 lda.y 0000           
 605:000 | DONE ins | na 16 16 | 006200 | a8          |                 tay                  
 606:000 | DONE wsp | na 16 16 |        |             |
 607:000 | DONE lbl | na 16 16 | 006201 |             | z_fetch                              
 607:001 | DONE ins | na 16 16 | 006201 | 60          |                 rts                  
 608:000 | DONE wsp | na 16 16 |        |             |
 609:000 | DONE wsp | na 16 16 |        |             |
 610:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 611:000 | DONE cmt | na 16 16 |        |             | ; ['] "BRACKET-TICK" ( -- ) X bytes / X cycles
 612:000 | DONE cmt | na 16 16 |        |             | ; Store xt of following word during compilation
 613:000 | DONE lbl | na 16 16 | 006202 |             | xt_brackettick                       
 614:000 | DONE ins | na 16 16 | 006202 | 20 c0 62    |                 jsr 0062c0           
 615:000 | DONE ins | na 16 16 | 006205 | 4c 1c 66    |                 jmp 00661c           JSR/RTS
 616:000 | DONE lbl | na 16 16 | 006208 |             | z_brackettick                        
 617:000 | DONE wsp | na 16 16 |        |             |
 618:000 | DONE wsp | na 16 16 |        |             |
 619:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 620:000 | DONE cmt | na 16 16 |        |             | ; [ "LEFTBRACKET" ( -- ) X bytes / X cycles
 621:000 | DONE cmt | na 16 16 |        |             | ; Enter the interpretation state. This is an immediate, compile-only word
 622:000 | DONE lbl | na 16 16 | 006208 |             | xt_leftbracket                       
 623:000 | DONE ins | na 16 16 | 006208 | 64 14       |                 stz.d 000214         
 624:000 | DONE lbl | na 16 16 | 00620a |             | z_leftbracket                        
 624:001 | DONE ins | na 16 16 | 00620a | 60          |                 rts                  
 625:000 | DONE wsp | na 16 16 |        |             |
 626:000 | DONE wsp | na 16 16 |        |             |
 627:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 628:000 | DONE cmt | na 16 16 |        |             | ; ] "RIGHTBRACKET" ( -- ) X bytes / X cycles
 629:000 | DONE cmt | na 16 16 |        |             | ; Enter the compile state. In theory, we should be able to get away with
 630:000 | DONE cmt | na 16 16 |        |             | ; a simple INC.A, but this is more error tolerant. For obvious reasons, this
 631:000 | DONE cmt | na 16 16 |        |             | ; cannot be COMPILE-ONLY, and native compile doesn't make much sense either
 632:000 | DONE lbl | na 16 16 | 00620b |             | xt_rightbracket                      
 633:000 | DONE ins | na 16 16 | 00620b | a9 01 00    |                 lda.# 0001           
 634:000 | DONE ins | na 16 16 | 00620e | 85 14       |                 sta.d 000214         
 635:000 | DONE wsp | na 16 16 |        |             |
 636:000 | DONE lbl | na 16 16 | 006210 |             | z_rightbracket                       
 636:001 | DONE ins | na 16 16 | 006210 | 60          |                 rts                  
 637:000 | DONE wsp | na 16 16 |        |             |
 638:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 639:000 | DONE cmt | na 16 16 |        |             | ; [CHAR] "BRACKET-CHAR" ( -- ) X bytes / X cycles
 640:000 | DONE cmt | na 16 16 |        |             | ; At compile time, compile the ASCII value of a character as a literal
 641:000 | DONE cmt | na 16 16 |        |             | ; This is an immediate, compile-only word
 642:000 | DONE cmt | na 16 16 |        |             | ; TODO decide if this is worth unrolling
 643:000 | DONE lbl | na 16 16 | 006211 |             | xt_bracketchar                       
 644:000 | DONE ins | na 16 16 | 006211 | 20 11 64    |                 jsr 006411           
 645:000 | DONE ins | na 16 16 | 006214 | 20 1c 66    |                 jsr 00661c           
 646:000 | DONE wsp | na 16 16 |        |             |
 647:000 | DONE lbl | na 16 16 | 006217 |             | z_bracketchar                        
 647:001 | DONE ins | na 16 16 | 006217 | 60          |                 rts                  
 648:000 | DONE wsp | na 16 16 |        |             |
 649:000 | DONE wsp | na 16 16 |        |             |
 650:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 651:000 | DONE cmt | na 16 16 |        |             | ; + "PLUS" ( n m -- n+m ) 7 bytes / X cycles
 652:000 | DONE cmt | na 16 16 |        |             | ; Add TOS and NOS
 653:000 | DONE lbl | na 16 16 | 006218 |             | xt_plus                              
 654:000 | DONE dir | na 16 16 |        |             |         .!a16                        
 655:000 | DONE ins | na 16 16 | 006218 | 98          |                 tya                  
 656:000 | DONE ins | na 16 16 | 006219 | 18          |                 clc                  
 657:000 | DONE ins | na 16 16 | 00621a | 75 00       |                 adc.dx 00            
 658:000 | DONE ins | na 16 16 | 00621c | a8          |                 tay                  
 659:000 | DONE ins | na 16 16 | 00621d | e8          |                 inx                  
 660:000 | DONE ins | na 16 16 | 00621e | e8          |                 inx                  
 661:000 | DONE wsp | na 16 16 |        |             |
 662:000 | DONE lbl | na 16 16 | 00621f |             | z_plus                               
 662:001 | DONE ins | na 16 16 | 00621f | 60          |                 rts                  
 663:000 | DONE wsp | na 16 16 |        |             |
 664:000 | DONE wsp | na 16 16 |        |             |
 665:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 666:000 | DONE cmt | na 16 16 |        |             | ; - "MINUS" ( n m -- n-m ) 10 bytes / X cycles
 667:000 | DONE cmt | na 16 16 |        |             | ; Subtract NOS from TOS
 668:000 | DONE lbl | na 16 16 | 006220 |             | xt_minus                             
 669:000 | DONE dir | na 16 16 |        |             |         .!a16                        
 670:000 | DONE ins | na 16 16 | 006220 | 98          |                 tya                  
 671:000 | DONE ins | na 16 16 | 006221 | 49 ff ff    |                 eor.# 0ffff          
 672:000 | DONE wsp | na 16 16 |        |             |
 673:000 | DONE ins | na 16 16 | 006224 | 38          |                 sec                  not CLC
 674:000 | DONE ins | na 16 16 | 006225 | 75 00       |                 adc.dx 00            
 675:000 | DONE wsp | na 16 16 |        |             |
 676:000 | DONE ins | na 16 16 | 006227 | a8          |                 tay                  
 677:000 | DONE ins | na 16 16 | 006228 | e8          |                 inx                  
 678:000 | DONE ins | na 16 16 | 006229 | e8          |                 inx                  
 679:000 | DONE wsp | na 16 16 |        |             |
 680:000 | DONE lbl | na 16 16 | 00622a |             | z_minus                              
 680:001 | DONE ins | na 16 16 | 00622a | 60          |                 rts                  
 681:000 | DONE wsp | na 16 16 |        |             |
 682:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 683:000 | DONE cmt | na 16 16 |        |             | ; -ROT ( a b c -- c a b )  X bytes / X cycles
 684:000 | DONE cmt | na 16 16 |        |             | ; Rotate top three entries of Data Stack upwards
 685:000 | DONE lbl | na 16 16 | 00622b |             | xt_mrot                              
 686:000 | DONE dir | na 16 16 |        |             |         .!a16                        
 687:000 | DONE dir | na 16 16 |        |             |         .!xy16                       
 688:000 | DONE ins | na 16 16 | 00622b | b5 02       |                 lda.dx 02            save a
 689:000 | DONE ins | na 16 16 | 00622d | 94 02       |                 sty.dx 02            move c to 3OS
 690:000 | DONE ins | na 16 16 | 00622f | b4 00       |                 ldy.dx 00            move b to TOS
 691:000 | DONE ins | na 16 16 | 006231 | 95 00       |                 sta.dx 00            save a as NOS
 692:000 | DONE wsp | na 16 16 |        |             |
 693:000 | DONE lbl | na 16 16 | 006233 |             | z_mrot                               
 693:001 | DONE ins | na 16 16 | 006233 | 60          |                 rts                  
 694:000 | DONE wsp | na 16 16 |        |             |
 695:000 | DONE wsp | na 16 16 |        |             |
 696:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 697:000 | DONE cmt | na 16 16 |        |             | ; = "EQUAL" ( n m -- f ) 11 bytes / 18-20 cycles
 698:000 | DONE cmt | na 16 16 |        |             | ; See if TOS and NOS are the same
 699:000 | DONE lbl | na 16 16 | 006234 |             | xt_equal                             
 700:000 | DONE ins | na 16 16 | 006234 | 98          |                 tya                  
 701:000 | DONE ins | na 16 16 | 006235 | a0 00 00    |                 ldy.# 0000           default value is false
 702:000 | DONE wsp | na 16 16 |        |             |
 703:000 | DONE ins | na 16 16 | 006238 | d5 00       |                 cmp.dx 00            
 704:000 | DONE ins | na 16 16 | 00623a | d0 01       |                 bne 00623d           
 705:000 | DONE ins | na 16 16 | 00623c | 88          |                 dey                  wraps to 0FFFF (true)
 706:000 | DONE wsp | na 16 16 |        |             |
 707:000 | DONE lbl | na 16 16 | 00623d |             | equal_not                            
 708:000 | DONE ins | na 16 16 | 00623d | e8          |                 inx                  
 709:000 | DONE ins | na 16 16 | 00623e | e8          |                 inx                  
 710:000 | DONE wsp | na 16 16 |        |             |
 711:000 | DONE lbl | na 16 16 | 00623f |             | z_equal                              
 711:001 | DONE ins | na 16 16 | 00623f | 60          |                 rts                  
 712:000 | DONE wsp | na 16 16 |        |             |
 713:000 | DONE wsp | na 16 16 |        |             |
 714:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 715:000 | DONE cmt | na 16 16 |        |             | ; 0 "ZERO" ( -- 0 ) 7 bytes / 12 cycles
 716:000 | DONE cmt | na 16 16 |        |             | ; Pushes the number 0000 on the Data Stack
 717:000 | DONE lbl | na 16 16 | 006240 |             | xt_zero                              
 718:000 | DONE dir | na 16 16 |        |             |         .!xy16                       
 719:000 | DONE ins | na 16 16 | 006240 | ca          |                 dex                  
 720:000 | DONE ins | na 16 16 | 006241 | ca          |                 dex                  
 721:000 | DONE ins | na 16 16 | 006242 | 94 00       |                 sty.dx 00            
 722:000 | DONE ins | na 16 16 | 006244 | a0 00 00    |                 ldy.# 0000           
 723:000 | DONE wsp | na 16 16 |        |             |
 724:000 | DONE lbl | na 16 16 | 006247 |             | z_zero                               
 724:001 | DONE ins | na 16 16 | 006247 | 60          |                 rts                  
 725:000 | DONE wsp | na 16 16 |        |             |
 726:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 727:000 | DONE cmt | na 16 16 |        |             | ; 0= "ZERO-EQUAL" ( n -- f ) X bytes / X cycles
 728:000 | DONE cmt | na 16 16 |        |             | ; Return the true flag if TOS is zero
 729:000 | DONE lbl | na 16 16 | 006248 |             | xt_zero-equal                        
 730:000 | DONE dir | na 16 16 |        |             |         .!a16                        
 731:000 | DONE ins | na 16 16 | 006248 | 98          |                 tya                  force flag check
 732:000 | DONE ins | na 16 16 | 006249 | d0 05       |                 bne 006250           
 733:000 | DONE wsp | na 16 16 |        |             |
 734:000 | DONE ins | na 16 16 | 00624b | a0 ff 0f    |                 ldy.# 0fff           
 735:000 | DONE ins | na 16 16 | 00624e | 80 03       |                 bra 006253           
 736:000 | DONE lbl | na 16 16 | 006250 |             | ze_not_zero                          
 737:000 | DONE ins | na 16 16 | 006250 | a0 00 00    |                 ldy.# 0000           
 738:000 | DONE wsp | na 16 16 |        |             |
 739:000 | DONE lbl | na 16 16 | 006253 |             | z_zero-equal                         
 739:001 | DONE ins | na 16 16 | 006253 | 60          |                 rts                  
 740:000 | DONE wsp | na 16 16 |        |             |
 741:000 | DONE wsp | na 16 16 |        |             |
 742:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 743:000 | DONE cmt | na 16 16 |        |             | ; 0< "ZERO-LESS" ( n -- f ) 11 bytes / X cycles
 744:000 | DONE cmt | na 16 16 |        |             | ; Return the true flag if TOS is less than zero
 745:000 | DONE lbl | na 16 16 | 006254 |             | xt_zero-less                         
 746:000 | DONE dir | na 16 16 |        |             |         .!a16                        
 747:000 | DONE ins | na 16 16 | 006254 | 98          |                 tya                  force flag check
 748:000 | DONE ins | na 16 16 | 006255 | 30 05       |                 bmi 00625c           
 749:000 | DONE wsp | na 16 16 |        |             |
 750:000 | DONE ins | na 16 16 | 006257 | a0 00 00    |                 ldy.# 0000           
 751:000 | DONE ins | na 16 16 | 00625a | 80 03       |                 bra 00625f           
 752:000 | DONE wsp | na 16 16 |        |             |
 753:000 | DONE lbl | na 16 16 | 00625c |             | zero-less-is-less                    
 754:000 | DONE ins | na 16 16 | 00625c | a0 ff ff    |                 ldy.# 0ffff          
 755:000 | DONE wsp | na 16 16 |        |             |
 756:000 | DONE lbl | na 16 16 | 00625f |             | z_zero-less                          
 756:001 | DONE ins | na 16 16 | 00625f | 60          |                 rts                  
 757:000 | DONE wsp | na 16 16 |        |             |
 758:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 759:000 | DONE cmt | na 16 16 |        |             | ; 0<> "ZERO-NOTEQUAL" ( n -- f ) 11 bytes / X cycles
 760:000 | DONE cmt | na 16 16 |        |             | ; Return the true flag if TOS is not zero
 761:000 | DONE lbl | na 16 16 | 006260 |             | xt_zero-notequal                     
 762:000 | DONE dir | na 16 16 |        |             |         .!a16                        
 763:000 | DONE ins | na 16 16 | 006260 | 98          |                 tya                  force flag check
 764:000 | DONE ins | na 16 16 | 006261 | f0 05       |                 beq 006268           
 765:000 | DONE ins | na 16 16 | 006263 | a0 ff ff    |                 ldy.# 0ffff          
 766:000 | DONE ins | na 16 16 | 006266 | 80 03       |                 bra 00626b           
 767:000 | DONE lbl | na 16 16 | 006268 |             | zne_is_zero                          
 768:000 | DONE ins | na 16 16 | 006268 | a0 00 00    |                 ldy.# 0000           
 769:000 | DONE lbl | na 16 16 | 00626b |             | z_zero-notequal                      
 770:000 | DONE ins | na 16 16 | 00626b | 60          |                 rts                  
 771:000 | DONE wsp | na 16 16 |        |             |
 772:000 | DONE wsp | na 16 16 |        |             |
 773:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 774:000 | DONE cmt | na 16 16 |        |             | ; 0> "ZERO-MORE" ( n -- f ) X bytes / X cycles
 775:000 | DONE cmt | na 16 16 |        |             | ; Return the true flag if TOS is more than zero
 776:000 | DONE lbl | na 16 16 | 00626c |             | xt_zero-more                         
 777:000 | DONE dir | na 16 16 |        |             |         .!a16                        
 778:000 | DONE ins | na 16 16 | 00626c | a9 00 00    |                 lda.# 0000           default is false
 779:000 | DONE wsp | na 16 16 |        |             |
 780:000 | DONE ins | na 16 16 | 00626f | 88          |                 dey                  
 781:000 | DONE ins | na 16 16 | 006270 | 10 02       |                 bpl 006274           was at least 1
 782:000 | DONE wsp | na 16 16 |        |             |
 783:000 | DONE ins | na 16 16 | 006272 | 80 01       |                 bra 006275           nope, stays false
 784:000 | DONE wsp | na 16 16 |        |             |
 785:000 | DONE lbl | na 16 16 | 006274 |             | zero-more_true                       
 786:000 | DONE ins | na 16 16 | 006274 | 3a          |                 dec.a                wraps to 0ffff, true
 787:000 | DONE lbl | na 16 16 | 006275 |             | zero-more_done                       
 788:000 | DONE ins | na 16 16 | 006275 | a8          |                 tay                  
 789:000 | DONE wsp | na 16 16 |        |             |
 790:000 | DONE lbl | na 16 16 | 006276 |             | z_zero-more                          
 790:001 | DONE ins | na 16 16 | 006276 | 60          |                 rts                  
 791:000 | DONE wsp | na 16 16 |        |             |
 792:000 | DONE wsp | na 16 16 |        |             |
 793:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 794:000 | DONE cmt | na 16 16 |        |             | ; 0BRANCH ( 0 | f -- ) X bytes / X cycles
 795:000 | DONE cmt | na 16 16 |        |             | ; Branch if TOS is zero. This exects the next two bytes to be the address of
 796:000 | DONE cmt | na 16 16 |        |             | ; where to branch to if the test fails. The code may not be natively compiled
 797:000 | DONE cmt | na 16 16 |        |             | ; because we need the return address provided by JSR's push to the Return Stack
 798:000 | DONE cmt | na 16 16 |        |             | ; This routine uses tmp1
 799:000 | DONE lbl | na 16 16 | 006277 |             | xt_zbranch                           
 800:000 | DONE dir | na 16 16 |        |             |         .!a16                        
 801:000 | DONE cmt | na 16 16 |        |             |                 ; encode subroutine jump to run time code
 802:000 | DONE ins | na 16 16 | 006277 | f4 7e 62    |                 phe.# 00627e         
 803:000 | DONE ins | na 16 16 | 00627a | 20 77 6f    |                 jsr 006f77           
 804:000 | DONE wsp | na 16 16 |        |             |
 805:000 | DONE lbl | na 16 16 | 00627d |             | z_zbranch                            
 805:001 | DONE ins | na 16 16 | 00627d | 60          |                 rts                  
 806:000 | DONE wsp | na 16 16 |        |             |
 807:000 | DONE lbl | na 16 16 | 00627e |             | zbranch_rt                           
 808:000 | DONE cmt | na 16 16 |        |             |                 ; Compiled component. Use the address on the Return Stack to
 809:000 | DONE cmt | na 16 16 |        |             |                 ; decide where we want to return to
 810:000 | DONE ins | na 16 16 | 00627e | 68          |                 pla                  
 811:000 | DONE ins | na 16 16 | 00627f | 85 16       |                 sta.d 000216         
 812:000 | DONE wsp | na 16 16 |        |             |
 813:000 | DONE cmt | na 16 16 |        |             |                 ; See if the flag is zero, which is the whole purpose of this
 814:000 | DONE cmt | na 16 16 |        |             |                 ; operation after all
 815:000 | DONE ins | na 16 16 | 006281 | 98          |                 tya                  force flag check
 816:000 | DONE ins | na 16 16 | 006282 | f0 06       |                 beq 00628a           flag is false (zero), so we branch
 817:000 | DONE wsp | na 16 16 |        |             |
 818:000 | DONE cmt | na 16 16 |        |             |                 ; Flag is TRUE, so we skip over the next two bytes. Put
 819:000 | DONE cmt | na 16 16 |        |             |                 ; differently, this is the part between IF and THEN
 820:000 | DONE ins | na 16 16 | 006284 | a5 16       |                 lda.d 000216         
 821:000 | DONE ins | na 16 16 | 006286 | 1a          |                 inc.a                
 822:000 | DONE ins | na 16 16 | 006287 | 1a          |                 inc.a                
 823:000 | DONE wsp | na 16 16 |        |             |
 824:000 | DONE ins | na 16 16 | 006288 | 80 06       |                 bra 006290           
 825:000 | DONE wsp | na 16 16 |        |             |
 826:000 | DONE lbl | na 16 16 | 00628a |             | zb_zero                              
 827:000 | DONE cmt | na 16 16 |        |             |                 ; Flag is FALSE, so we take the dump to the address given in the
 828:000 | DONE cmt | na 16 16 |        |             |                 ; next two bytes. We don't need Y anymore, so we can use it for
 829:000 | DONE cmt | na 16 16 |        |             |                 ; indexing
 830:000 | DONE ins | na 16 16 | 00628a | a0 01 00    |                 ldy.# 0001           
 831:000 | DONE ins | na 16 16 | 00628d | b1 16       |                 lda.diy 000216       
 832:000 | DONE wsp | na 16 16 |        |             |
 833:000 | DONE cmt | na 16 16 |        |             |                 ; Subtract one from the address given becasue of the RTS
 834:000 | DONE cmt | na 16 16 |        |             |                 ; mechanics
 835:000 | DONE ins | na 16 16 | 00628f | 3a          |                 dec.a                
 836:000 | DONE wsp | na 16 16 |        |             |
 837:000 | DONE lbl | na 16 16 | 006290 |             | zb_done                              
 838:000 | DONE cmt | na 16 16 |        |             |                 ; One we or another, this is where we're going to jump to
 839:000 | DONE ins | na 16 16 | 006290 | 48          |                 pha                  
 840:000 | DONE wsp | na 16 16 |        |             |
 841:000 | DONE cmt | na 16 16 |        |             |                 ; Clean up the Data Stack and jump
 842:000 | DONE ins | na 16 16 | 006291 | b4 00       |                 ldy.dx 00            
 843:000 | DONE ins | na 16 16 | 006293 | e8          |                 inx                  
 844:000 | DONE ins | na 16 16 | 006294 | e8          |                 inx                  
 845:000 | DONE wsp | na 16 16 |        |             |
 846:000 | DONE ins | na 16 16 | 006295 | 60          |                 rts                  
 847:000 | DONE wsp | na 16 16 |        |             |
 848:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 849:000 | DONE cmt | na 16 16 |        |             | ; 1 "ONE" ( -- 1 ) 7 bytes / 12 cycles
 850:000 | DONE cmt | na 16 16 |        |             | ; Pushes the number 1 on the Data Stack
 851:000 | DONE lbl | na 16 16 | 006296 |             | xt_one                               
 852:000 | DONE dir | na 16 16 |        |             |         .!xy16                       
 853:000 | DONE ins | na 16 16 | 006296 | ca          |                 dex                  
 854:000 | DONE ins | na 16 16 | 006297 | ca          |                 dex                  
 855:000 | DONE ins | na 16 16 | 006298 | 94 00       |                 sty.dx 00            
 856:000 | DONE ins | na 16 16 | 00629a | a0 01 00    |                 ldy.# 0001           
 857:000 | DONE wsp | na 16 16 |        |             |
 858:000 | DONE lbl | na 16 16 | 00629d |             | z_one                                
 858:001 | DONE ins | na 16 16 | 00629d | 60          |                 rts                  
 859:000 | DONE wsp | na 16 16 |        |             |
 860:000 | DONE wsp | na 16 16 |        |             |
 861:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 862:000 | DONE cmt | na 16 16 |        |             | ; 1- "ONE-MINUS" ( n -- n-1 ) 1 byte / 2 cycles
 863:000 | DONE cmt | na 16 16 |        |             | ; Subtract 1 from Top of Stack (TOS). Because there is no checking if there is
 864:000 | DONE cmt | na 16 16 |        |             | ; actually anything on the Data Stack, this routine will fail silently if the
 865:000 | DONE cmt | na 16 16 |        |             | ; stack is empty
 866:000 | DONE lbl | na 16 16 | 00629e |             | xt_one-minus                         
 867:000 | DONE dir | na 16 16 |        |             |         .!xy16                       
 868:000 | DONE ins | na 16 16 | 00629e | 88          |                 dey                  
 869:000 | DONE lbl | na 16 16 | 00629f |             | z_one-minus                          
 869:001 | DONE ins | na 16 16 | 00629f | 60          |                 rts                  
 870:000 | DONE wsp | na 16 16 |        |             |
 871:000 | DONE wsp | na 16 16 |        |             |
 872:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 873:000 | DONE cmt | na 16 16 |        |             | ; 1+ "ONE-PLUS" ( n -- n+1 ) 1 byte / 2 cycles
 874:000 | DONE cmt | na 16 16 |        |             | ; Add 1 to TOS. Because there is no checking if there is actually anything on
 875:000 | DONE cmt | na 16 16 |        |             | ; the Data Stack, this routine will fail silently if the stack is empty
 876:000 | DONE lbl | na 16 16 | 0062a0 |             | xt_one-plus                          
 877:000 | DONE dir | na 16 16 |        |             |         .!xy16                       
 878:000 | DONE ins | na 16 16 | 0062a0 | c8          |                 iny                  
 879:000 | DONE lbl | na 16 16 | 0062a1 |             | z_one-plus                           
 879:001 | DONE ins | na 16 16 | 0062a1 | 60          |                 rts                  
 880:000 | DONE wsp | na 16 16 |        |             |
 881:000 | DONE wsp | na 16 16 |        |             |
 882:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 883:000 | DONE cmt | na 16 16 |        |             | ; 2 "TWO" ( -- 2 ) 7 bytes / 12 cycles
 884:000 | DONE cmt | na 16 16 |        |             | ; Pushes the number 2 on the Data Stack
 885:000 | DONE lbl | na 16 16 | 0062a2 |             | xt_two                               
 886:000 | DONE dir | na 16 16 |        |             |         .!xy16                       
 887:000 | DONE ins | na 16 16 | 0062a2 | ca          |                 dex                  
 888:000 | DONE ins | na 16 16 | 0062a3 | ca          |                 dex                  
 889:000 | DONE ins | na 16 16 | 0062a4 | 94 00       |                 sty.dx 00            
 890:000 | DONE ins | na 16 16 | 0062a6 | a0 02 00    |                 ldy.# 0002           
 891:000 | DONE wsp | na 16 16 |        |             |
 892:000 | DONE lbl | na 16 16 | 0062a9 |             | z_two                                
 892:001 | DONE ins | na 16 16 | 0062a9 | 60          |                 rts                  
 893:000 | DONE wsp | na 16 16 |        |             |
 894:000 | DONE wsp | na 16 16 |        |             |
 895:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 896:000 | DONE cmt | na 16 16 |        |             | ; 2* "TWO-STAR" ( n -- 2*n ) 3 bytes / 6 cycles
 897:000 | DONE cmt | na 16 16 |        |             | ; Multiply Top of Stack (TOS) by 2. This is also used by CELLS
 898:000 | DONE lbl | na 16 16 | 0062aa |             | xt_two-star                          
 899:000 | DONE dir | na 16 16 |        |             |         .!a16                        
 900:000 | DONE dir | na 16 16 |        |             |         .!xy16                       
 901:000 | DONE ins | na 16 16 | 0062aa | 98          |                 tya                  
 902:000 | DONE ins | na 16 16 | 0062ab | 0a          |                 asl.a                
 903:000 | DONE ins | na 16 16 | 0062ac | a8          |                 tay                  
 904:000 | DONE wsp | na 16 16 |        |             |
 905:000 | DONE lbl | na 16 16 | 0062ad |             | z_two-star                           
 905:001 | DONE ins | na 16 16 | 0062ad | 60          |                 rts                  
 906:000 | DONE wsp | na 16 16 |        |             |
 907:000 | DONE wsp | na 16 16 |        |             |
 908:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 909:000 | DONE cmt | na 16 16 |        |             | ; 2DROP ( n m -- ) 6 bytes / 13 cycles
 910:000 | DONE cmt | na 16 16 |        |             | ; Drop first two entries of Data Stack
 911:000 | DONE lbl | na 16 16 | 0062ae |             | xt_2drop                             
 912:000 | DONE ins | na 16 16 | 0062ae | b4 02       |                 ldy.dx 02            
 913:000 | DONE ins | na 16 16 | 0062b0 | e8          |                 inx                  
 914:000 | DONE ins | na 16 16 | 0062b1 | e8          |                 inx                  
 915:000 | DONE ins | na 16 16 | 0062b2 | e8          |                 inx                  
 916:000 | DONE ins | na 16 16 | 0062b3 | e8          |                 inx                  
 917:000 | DONE wsp | na 16 16 |        |             |
 918:000 | DONE lbl | na 16 16 | 0062b4 |             | z_2drop                              
 918:001 | DONE ins | na 16 16 | 0062b4 | 60          |                 rts                  
 919:000 | DONE wsp | na 16 16 |        |             |
 920:000 | DONE wsp | na 16 16 |        |             |
 921:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 922:000 | DONE cmt | na 16 16 |        |             | ; 2DUP ( n m -- n m n m ) 10 bytes / 23 cycles
 923:000 | DONE cmt | na 16 16 |        |             | ; Duplicated the top two data stack entries
 924:000 | DONE wsp | na 16 16 |        |             |
 925:000 | DONE lbl | na 16 16 | 0062b5 |             | xt_2dup                              
 926:000 | DONE dir | na 16 16 |        |             |         .!xy16                       
 927:000 | DONE ins | na 16 16 | 0062b5 | ca          |                 dex                  
 928:000 | DONE ins | na 16 16 | 0062b6 | ca          |                 dex                  
 929:000 | DONE ins | na 16 16 | 0062b7 | ca          |                 dex                  
 930:000 | DONE ins | na 16 16 | 0062b8 | ca          |                 dex                  
 931:000 | DONE ins | na 16 16 | 0062b9 | 94 02       |                 sty.dx 02            
 932:000 | DONE ins | na 16 16 | 0062bb | b5 04       |                 lda.dx 04            
 933:000 | DONE ins | na 16 16 | 0062bd | 95 00       |                 sta.dx 00            
 934:000 | DONE wsp | na 16 16 |        |             |
 935:000 | DONE lbl | na 16 16 | 0062bf |             | z_2dup                               
 935:001 | DONE ins | na 16 16 | 0062bf | 60          |                 rts                  
 936:000 | DONE wsp | na 16 16 |        |             |
 937:000 | DONE wsp | na 16 16 |        |             |
 938:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 939:000 | DONE cmt | na 16 16 |        |             | ; ' "TICK" ( "string" -- xt ) X bytes / X cycles
 940:000 | DONE cmt | na 16 16 |        |             | ; Given a string with the name of a word, return the word's execution token (xt)
 941:000 | DONE cmt | na 16 16 |        |             | ; Abort if not found
 942:000 | DONE lbl | na 16 16 | 0062c0 |             | xt_tick                              
 943:000 | DONE ins | na 16 16 | 0062c0 | 20 cc 66    |                 jsr 0066cc           ( -- addr u )
 944:000 | DONE wsp | na 16 16 |        |             |
 945:000 | DONE cmt | na 16 16 |        |             |                 ; if we got a zero, complain and abort
 946:000 | DONE ins | na 16 16 | 0062c3 | 98          |                 tya                  force flag check
 947:000 | DONE ins | na 16 16 | 0062c4 | d0 06       |                 bne 0062cc           
 948:000 | DONE wsp | na 16 16 |        |             |
 949:000 | DONE ins | na 16 16 | 0062c6 | a9 49 74    |                 lda.# 007449         
 950:000 | DONE ins | na 16 16 | 0062c9 | 4c 98 6f    |                 jmp 006f98           
 951:000 | DONE wsp | na 16 16 |        |             |
 952:000 | DONE lbl | na 16 16 | 0062cc |             | tick_have_word                       
 953:000 | DONE ins | na 16 16 | 0062cc | 20 a9 65    |                 jsr 0065a9           ( addr u -- nt)
 954:000 | DONE ins | na 16 16 | 0062cf | 98          |                 tya                  force flag check
 955:000 | DONE wsp | na 16 16 |        |             |
 956:000 | DONE cmt | na 16 16 |        |             |                 ; if we didn't find string in the dictionary, complain and abort
 957:000 | DONE ins | na 16 16 | 0062d0 | d0 06       |                 bne 0062d8           
 958:000 | DONE wsp | na 16 16 |        |             |
 959:000 | DONE ins | na 16 16 | 0062d2 | a9 e6 74    |                 lda.# 0074e6         
 960:000 | DONE ins | na 16 16 | 0062d5 | 4c 98 6f    |                 jmp 006f98           
 961:000 | DONE wsp | na 16 16 |        |             |
 962:000 | DONE lbl | na 16 16 | 0062d8 |             | tick_have_nt                         
 963:000 | DONE ins | na 16 16 | 0062d8 | 20 81 66    |                 jsr 006681           ( nt -- xt )
 964:000 | DONE wsp | na 16 16 |        |             |
 965:000 | DONE lbl | na 16 16 | 0062db |             | z_tick                               
 965:001 | DONE ins | na 16 16 | 0062db | 60          |                 rts                  
 966:000 | DONE wsp | na 16 16 |        |             |
 967:000 | DONE wsp | na 16 16 |        |             |
 968:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 969:000 | DONE cmt | na 16 16 |        |             | ; ABS ( n -- u ) 8 bytes / X cycles
 970:000 | DONE cmt | na 16 16 |        |             | ; Return the absolute value of a single number
 971:000 | DONE lbl | na 16 16 | 0062dc |             | xt_abs                               
 972:000 | DONE dir | na 16 16 |        |             |         .!a16                        
 973:000 | DONE dir | na 16 16 |        |             |         .!xy16                       
 974:000 | DONE ins | na 16 16 | 0062dc | 98          |                 tya                  force flag test
 975:000 | DONE ins | na 16 16 | 0062dd | 10 05       |                 bpl 0062e4           positive number is easy
 976:000 | DONE wsp | na 16 16 |        |             |
 977:000 | DONE cmt | na 16 16 |        |             |                 ; negative: Calculate 0-n
 978:000 | DONE ins | na 16 16 | 0062df | 49 ff ff    |                 eor.# 0ffff          
 979:000 | DONE ins | na 16 16 | 0062e2 | 1a          |                 inc.a                
 980:000 | DONE ins | na 16 16 | 0062e3 | a8          |                 tay                  
 981:000 | DONE wsp | na 16 16 |        |             |
 982:000 | DONE lbl | na 16 16 | 0062e4 |             | z_abs                                
 982:001 | DONE ins | na 16 16 | 0062e4 | 60          |                 rts                  
 983:000 | DONE wsp | na 16 16 |        |             |
 984:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 985:000 | DONE cmt | na 16 16 |        |             | ; ACCEPT ( addr n1 -- n2 ) X bytes / X cycles
 986:000 | DONE cmt | na 16 16 |        |             | ; Receive a string of at most n1 characters, placing them at addr. Return the
 987:000 | DONE cmt | na 16 16 |        |             | ; actual number of characters as n2. Characters are echoed as they are received.
 988:000 | DONE cmt | na 16 16 |        |             | ; ACCEPT is called by REFILL these days.
 989:000 | DONE lbl | na 16 16 | 0062e5 |             | xt_accept                            
 990:000 | DONE cmt | na 16 16 |        |             |                 ; Set up loop
 991:000 | DONE ins | na 16 16 | 0062e5 | 98          |                 tya                  force flag test
 992:000 | DONE ins | na 16 16 | 0062e6 | d0 03       |                 bne 0062eb           
 993:000 | DONE wsp | na 16 16 |        |             |
 994:000 | DONE cmt | na 16 16 |        |             |                 ; if we were told to get zero chars, just quit
 995:000 | DONE ins | na 16 16 | 0062e8 | e8          |                 inx                  NIP, TOS is zero which is also FALSE
 996:000 | DONE ins | na 16 16 | 0062e9 | e8          |                 inx                  
 997:000 | DONE wsp | na 16 16 |        |             |
 998:000 | DONE ins | na 16 16 | 0062ea | 60          |                 rts                  
 999:000 | DONE wsp | na 16 16 |        |             |
1000:000 | DONE lbl | na 16 16 | 0062eb |             | accept_nonzero                       
1001:000 | DONE ins | na 16 16 | 0062eb | b5 00       |                 lda.dx 00            address of buffer is NOS
1002:000 | DONE ins | na 16 16 | 0062ed | 85 16       |                 sta.d 000216         
1003:000 | DONE ins | na 16 16 | 0062ef | e8          |                 inx                  NIP
1004:000 | DONE ins | na 16 16 | 0062f0 | e8          |                 inx                  
1005:000 | DONE wsp | na 16 16 |        |             |
1006:000 | DONE ins | na 16 16 | 0062f1 | 84 18       |                 sty.d 000218         Save max number of chars in tmp2
1007:000 | DONE ins | na 16 16 | 0062f3 | a0 00 00    |                 ldy.# 0000           Use Y as counter
1008:000 | DONE ins | na 16 16 | 0062f6 | e2 20       |                 sep 20               
1008:001 | DONE ctl | na  8 16 |        |             |         .!a8
1009:000 | DONE wsp | na  8 16 |        |             |
1010:000 | DONE lbl | na  8 16 | 0062f8 |             | accept_loop                          
1011:000 | DONE cmt | na  8 16 |        |             |                 ; TODO rewrite with KEY so we can revector it
1012:000 | DONE cmt | na  8 16 |        |             |                 ; We don't need to check for CTRL-l, because a vt100 terminal
1013:000 | DONE cmt | na  8 16 |        |             |                 ; clears the screen automatically
1014:000 | DONE ins | na  8 16 | 0062f8 | 20 47 60    |                 jsr 006047           
1015:000 | DONE dir | na  8 16 |        |             |         .!a8                         
1016:000 | DONE cmt | na  8 16 |        |             |                 ; we quit on both line feed and carriage return
1017:000 | DONE ins | na  8 16 | 0062fb | c9 0a       |                 cmp.# AscLF          
1018:000 | DONE ins | na  8 16 | 0062fd | f0 44       |                 beq 006343           
1019:000 | DONE ins | na  8 16 | 0062ff | c9 0d       |                 cmp.# AscCR          
1020:000 | DONE ins | na  8 16 | 006301 | f0 40       |                 beq 006343           
1021:000 | DONE wsp | na  8 16 |        |             |
1022:000 | DONE cmt | na  8 16 |        |             |                 ; BS and DEL do the same thing for the moment
1023:000 | DONE ins | na  8 16 | 006303 | c9 08       |                 cmp.# AscBS          
1024:000 | DONE ins | na  8 16 | 006305 | f0 44       |                 beq 00634b           
1025:000 | DONE ins | na  8 16 | 006307 | c9 7f       |                 cmp.# AscDEL         
1026:000 | DONE ins | na  8 16 | 006309 | f0 40       |                 beq 00634b           
1027:000 | DONE wsp | na  8 16 |        |             |
1028:000 | DONE cmt | na  8 16 |        |             |                 ; CTRL-c and ESC abort (see if this is too harsh)
1029:000 | DONE ins | na  8 16 | 00630b | c9 03       |                 cmp.# AscCC          
1030:000 | DONE ins | na  8 16 | 00630d | d0 03       |                 bne 006312           
1031:000 | DONE ins | na  8 16 | 00630f | 4c 97 60    |                 jmp 006097           
1032:000 | DONE lbl | na  8 16 | 006312 |             | @                                    
1033:000 | DONE ins | na  8 16 | 006312 | c9 1b       |                 cmp.# AscESC         
1034:000 | DONE ins | na  8 16 | 006314 | d0 03       |                 bne 006319           
1035:000 | DONE ins | na  8 16 | 006316 | 4c 97 60    |                 jmp 006097           
1036:000 | DONE lbl | na  8 16 | 006319 |             | @                                    
1037:000 | DONE cmt | na  8 16 |        |             |                 ; CTRL-p will be used for "previous cmd", TODO
1038:000 | DONE ins | na  8 16 | 006319 | c9 10       |                 cmp.# AscCP          
1039:000 | DONE ins | na  8 16 | 00631b | d0 0c       |                 bne 006329           
1040:000 | DONE ins | na  8 16 | 00631d | c2 20       |                 rep 20               
1040:001 | DONE ctl | na 16 16 |        |             |         .!a16
1041:000 | DONE ins | na 16 16 | 00631f | a9 ff 74    |                 lda.# 0074ff         
1042:000 | DONE ins | na 16 16 | 006322 | 20 9e 6f    |                 jsr 006f9e           
1043:000 | DONE ins | na 16 16 | 006325 | e2 20       |                 sep 20               
1043:001 | DONE ctl | na  8 16 |        |             |         .!a8
1044:000 | DONE ins | na  8 16 | 006327 | 80 cf       |                 bra 0062f8           
1045:000 | DONE lbl | na  8 16 | 006329 |             | @                                    
1046:000 | DONE cmt | na  8 16 |        |             |                 ; CTRL-n will be used for "next cmd", TODO
1047:000 | DONE ins | na  8 16 | 006329 | c9 0e       |                 cmp.# AscCN          
1048:000 | DONE ins | na  8 16 | 00632b | d0 0c       |                 bne 006339           
1049:000 | DONE ins | na  8 16 | 00632d | c2 20       |                 rep 20               
1049:001 | DONE ctl | na 16 16 |        |             |         .!a16
1050:000 | DONE ins | na 16 16 | 00632f | a9 12 75    |                 lda.# 007512         
1051:000 | DONE ins | na 16 16 | 006332 | 20 9e 6f    |                 jsr 006f9e           
1052:000 | DONE ins | na 16 16 | 006335 | e2 20       |                 sep 20               
1052:001 | DONE ctl | na  8 16 |        |             |         .!a8
1053:000 | DONE ins | na  8 16 | 006337 | 80 bf       |                 bra 0062f8           
1054:000 | DONE wsp | na  8 16 |        |             |
1055:000 | DONE lbl | na  8 16 | 006339 |             | @                                    
1056:000 | DONE cmt | na  8 16 |        |             |                 ; That's quite enough, echo character
1057:000 | DONE cmt | na  8 16 |        |             |                 ; TODO change to EMIT
1058:000 | DONE ins | na  8 16 | 006339 | 20 36 60    |                 jsr 006036           echo character
1059:000 | DONE dir | na  8 16 |        |             |         .!a8                         
1060:000 | DONE cmt | na  8 16 |        |             |                 ; TODO multitasking: Add PAUSE here (or in EMIT)
1061:000 | DONE wsp | na  8 16 |        |             |
1062:000 | DONE ins | na  8 16 | 00633c | 91 0c       |                 sta.diy 00020c       STA (CIB),Y
1063:000 | DONE ins | na  8 16 | 00633e | c8          |                 iny                  
1064:000 | DONE ins | na  8 16 | 00633f | c4 18       |                 cpy.d 000218         reached character limit?
1065:000 | DONE ins | na  8 16 | 006341 | d0 b5       |                 bne 0062f8           fall thru if buffer limit reached
1066:000 | DONE wsp | na  8 16 |        |             |
1067:000 | DONE lbl | na  8 16 | 006343 |             | accept_eol                           
1068:000 | DONE ins | na  8 16 | 006343 | 84 0e       |                 sty.d 00020e         Y contains number of chars accepted already
1069:000 | DONE ins | na  8 16 | 006345 | c2 20       |                 rep 20               
1069:001 | DONE ctl | na 16 16 |        |             |         .!a16
1070:000 | DONE ins | na 16 16 | 006347 | 20 4a 68    |                 jsr 00684a           print final space
1071:000 | DONE ins | na 16 16 | 00634a | 60          |                 rts                  this is the actual return of the routine
1072:000 | DONE wsp | na 16 16 |        |             |
1073:000 | DONE lbl | na 16 16 | 00634b |             | accept_bs                            
1074:000 | DONE dir | na  8 16 |        |             |         .!a8                         
1075:000 | DONE ins | na  8 16 | 00634b | c0 00 00    |                 cpy.# 0000           buffer empty?
1076:000 | DONE ins | na  8 16 | 00634e | d0 06       |                 bne 006356           
1077:000 | DONE wsp | na  8 16 |        |             |
1078:000 | DONE ins | na  8 16 | 006350 | a9 07       |                 lda.# AscBELL        complain and don't delete beyond the start of line
1079:000 | DONE ins | na  8 16 | 006352 | 20 36 60    |                 jsr 006036           
1080:000 | DONE ins | na  8 16 | 006355 | c8          |                 iny                  
1081:000 | DONE lbl | na  8 16 | 006356 |             | @                                    
1082:000 | DONE ins | na  8 16 | 006356 | 88          |                 dey                  
1083:000 | DONE ins | na  8 16 | 006357 | a9 08       |                 lda.# AscBS          move back one
1084:000 | DONE ins | na  8 16 | 006359 | 20 36 60    |                 jsr 006036           
1085:000 | DONE ins | na  8 16 | 00635c | a9 20       |                 lda.# AscSP          print a space (rubout)
1086:000 | DONE ins | na  8 16 | 00635e | 20 36 60    |                 jsr 006036           
1087:000 | DONE ins | na  8 16 | 006361 | a9 08       |                 lda.# AscBS          move back over space
1088:000 | DONE ins | na  8 16 | 006363 | 20 36 60    |                 jsr 006036           
1089:000 | DONE wsp | na  8 16 |        |             |
1090:000 | DONE ins | na  8 16 | 006366 | 80 90       |                 bra 0062f8           
1091:000 | DONE wsp | na  8 16 |        |             |
1092:000 | DONE lbl | na  8 16 | 006368 |             | z_accept                             
1092:001 | DONE ins | na  8 16 | 006368 | 60          |                 rts                  
1093:000 | DONE wsp | na  8 16 |        |             |
1094:000 | DONE cmt | na  8 16 |        |             | ; -------------------------------------------------------------------
1095:000 | DONE cmt | na  8 16 |        |             | ; AGAIN ( addr -- ) 22 bytes / 50 cycles
1096:000 | DONE cmt | na  8 16 |        |             | ; Code a backwards branch to an address usually left by BEGIN. We use JMP
1097:000 | DONE cmt | na  8 16 |        |             | ; instead of BRA to make sure we have the range.
1098:000 | DONE cmt | na  8 16 |        |             | ; TODO see if we should insert a KEY? to make sure we can abort and/or a PAUSE
1099:000 | DONE lbl | na  8 16 | 006369 |             | xt_again                             
1100:000 | DONE wsp | na  8 16 |        |             |
1101:000 | DONE cmt | na  8 16 |        |             |                 ; Add the opcode for a JMP
1102:000 | DONE ins | na  8 16 | 006369 | e2 20       |                 sep 20               
1102:001 | DONE ctl | na  8 16 |        |             |         .!a8
1103:000 | DONE ins | na  8 16 | 00636b | a9 4c       |                 lda.# 4c             
1104:000 | DONE ins | na  8 16 | 00636d | 92 00       |                 sta.di 000200        STA (CP)
1105:000 | DONE ins | na  8 16 | 00636f | c2 20       |                 rep 20               
1105:001 | DONE ctl | na 16 16 |        |             |         .!a16
1106:000 | DONE ins | na 16 16 | 006371 | e6 00       |                 inc.d 000200         
1107:000 | DONE wsp | na 16 16 |        |             |
1108:000 | DONE cmt | na 16 16 |        |             |                 ; Add the address which should be TOS
1109:000 | DONE ins | na 16 16 | 006373 | 98          |                 tya                  
1110:000 | DONE ins | na 16 16 | 006374 | 92 00       |                 sta.di 000200        
1111:000 | DONE ins | na 16 16 | 006376 | e6 00       |                 inc.d 000200         
1112:000 | DONE ins | na 16 16 | 006378 | e6 00       |                 inc.d 000200         
1113:000 | DONE wsp | na 16 16 |        |             |
1114:000 | DONE cmt | na 16 16 |        |             |                 ; drop the address
1115:000 | DONE ins | na 16 16 | 00637a | b4 00       |                 ldy.dx 00            
1116:000 | DONE ins | na 16 16 | 00637c | e8          |                 inx                  
1117:000 | DONE ins | na 16 16 | 00637d | e8          |                 inx                  
1118:000 | DONE wsp | na 16 16 |        |             |
1119:000 | DONE lbl | na 16 16 | 00637e |             | z_again                              
1119:001 | DONE ins | na 16 16 | 00637e | 60          |                 rts                  
1120:000 | DONE wsp | na 16 16 |        |             |
1121:000 | DONE wsp | na 16 16 |        |             |
1122:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1123:000 | DONE cmt | na 16 16 |        |             | ; ALLOT ( n -- ) X bytes / X cycles
1124:000 | DONE cmt | na 16 16 |        |             | ; Reserve a certain number of bytes (not cells) or release them. If n = 0, do
1125:000 | DONE cmt | na 16 16 |        |             | ; nothing. If n is negative, release n bytes, but only to the beginning of the
1126:000 | DONE cmt | na 16 16 |        |             | ; Dictionary. If n is positive (the most common case), reserve n bytes, but not
1127:000 | DONE cmt | na 16 16 |        |             | ; past the Dictionary.
1128:000 | DONE cmt | na 16 16 |        |             | ; See http://forth-standard.org/standard/core/ALLOT
1129:000 | DONE cmt | na 16 16 |        |             | ; TODO test negative values
1130:000 | DONE lbl | na 16 16 | 00637f |             | xt_allot                             
1131:000 | DONE dir | na 16 16 |        |             |         .!a16                        
1132:000 | DONE ins | na 16 16 | 00637f | 98          |                 tya                  force flag check
1133:000 | DONE ins | na 16 16 | 006380 | f0 21       |                 beq 0063a3           zero bytes, don't do anything
1134:000 | DONE ins | na 16 16 | 006382 | 30 12       |                 bmi 006396           free memory instead of reserving it
1135:000 | DONE wsp | na 16 16 |        |             |
1136:000 | DONE cmt | na 16 16 |        |             |                 ; most common case: reserve n bytes. We've already transfered
1137:000 | DONE cmt | na 16 16 |        |             |                 ; TOS to A, so we just have to add the current compile pointer
1138:000 | DONE ins | na 16 16 | 006384 | 18          |                 clc                  
1139:000 | DONE ins | na 16 16 | 006385 | 65 00       |                 adc.d 000200         create new CP
1140:000 | DONE ins | na 16 16 | 006387 | b0 07       |                 bcs 006390           oops, we've wrapped
1141:000 | DONE wsp | na 16 16 |        |             |
1142:000 | DONE ins | na 16 16 | 006389 | a8          |                 tay                  save copy of new CP
1143:000 | DONE wsp | na 16 16 |        |             |
1144:000 | DONE ins | na 16 16 | 00638a | 38          |                 sec                  
1145:000 | DONE ins | na 16 16 | 00638b | e9 ff 7b    |                 sbc.# 007bff         
1146:000 | DONE ins | na 16 16 | 00638e | 30 11       |                 bmi 0063a1           oops, fall thru if beyond max RAM
1147:000 | DONE wsp | na 16 16 |        |             |
1148:000 | DONE lbl | na 16 16 | 006390 |             | allot_error                          
1149:000 | DONE ins | na 16 16 | 006390 | a9 aa 73    |                 lda.# 0073aa         
1150:000 | DONE ins | na 16 16 | 006393 | 4c 98 6f    |                 jmp 006f98           
1151:000 | DONE wsp | na 16 16 |        |             |
1152:000 | DONE lbl | na 16 16 | 006396 |             | allot_minus                          
1153:000 | DONE cmt | na 16 16 |        |             |                 ; negative value means we're freeing memory
1154:000 | DONE ins | na 16 16 | 006396 | 38          |                 sec                  
1155:000 | DONE ins | na 16 16 | 006397 | e5 00       |                 sbc.d 000200         
1156:000 | DONE ins | na 16 16 | 006399 | 90 f5       |                 bcc 006390           oops, we've wrapped
1157:000 | DONE wsp | na 16 16 |        |             |
1158:000 | DONE ins | na 16 16 | 00639b | a8          |                 tay                  
1159:000 | DONE wsp | na 16 16 |        |             |
1160:000 | DONE ins | na 16 16 | 00639c | e9 00 03    |                 sbc.# 000300         Carry Flag must still be set
1161:000 | DONE ins | na 16 16 | 00639f | 30 ef       |                 bmi 006390           oops, gone too far back
1162:000 | DONE wsp | na 16 16 |        |             |
1163:000 | DONE cmt | na 16 16 |        |             |                 ; fall through to allot_done
1164:000 | DONE lbl | na 16 16 | 0063a1 |             | allot_done                           
1165:000 | DONE ins | na 16 16 | 0063a1 | 84 00       |                 sty.d 000200         new compiler pointer
1166:000 | DONE lbl | na 16 16 | 0063a3 |             | allot_real_gone                      
1167:000 | DONE ins | na 16 16 | 0063a3 | b4 00       |                 ldy.dx 00            DROP
1168:000 | DONE ins | na 16 16 | 0063a5 | e8          |                 inx                  
1169:000 | DONE ins | na 16 16 | 0063a6 | e8          |                 inx                  
1170:000 | DONE wsp | na 16 16 |        |             |
1171:000 | DONE lbl | na 16 16 | 0063a7 |             | z_allot                              
1171:001 | DONE ins | na 16 16 | 0063a7 | 60          |                 rts                  
1172:000 | DONE wsp | na 16 16 |        |             |
1173:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1174:000 | DONE cmt | na 16 16 |        |             | ; AND ( n m -- n ) 6 bytes / X cycles
1175:000 | DONE cmt | na 16 16 |        |             | ; Logical AND
1176:000 | DONE lbl | na 16 16 | 0063a8 |             | xt_and                               
1177:000 | DONE ins | na 16 16 | 0063a8 | 98          |                 tya                  
1178:000 | DONE ins | na 16 16 | 0063a9 | 35 00       |                 and.dx 00            
1179:000 | DONE ins | na 16 16 | 0063ab | a8          |                 tay                  
1180:000 | DONE wsp | na 16 16 |        |             |
1181:000 | DONE ins | na 16 16 | 0063ac | e8          |                 inx                  NIP
1182:000 | DONE ins | na 16 16 | 0063ad | e8          |                 inx                  
1183:000 | DONE wsp | na 16 16 |        |             |
1184:000 | DONE lbl | na 16 16 | 0063ae |             | z_and                                
1184:001 | DONE ins | na 16 16 | 0063ae | 60          |                 rts                  
1185:000 | DONE wsp | na 16 16 |        |             |
1186:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1187:000 | DONE cmt | na 16 16 |        |             | ; BASE ( -- addr ) X bytes / X cycles
1188:000 | DONE cmt | na 16 16 |        |             | ; Get the address of where the radix for number conversion is stored
1189:000 | DONE lbl | na 16 16 | 0063af |             | xt_base                              
1190:000 | DONE ins | na 16 16 | 0063af | ca          |                 dex                  
1191:000 | DONE ins | na 16 16 | 0063b0 | ca          |                 dex                  
1192:000 | DONE ins | na 16 16 | 0063b1 | 94 00       |                 sty.dx 00            
1193:000 | DONE wsp | na 16 16 |        |             |
1194:000 | DONE ins | na 16 16 | 0063b3 | a0 1c 02    |                 ldy.# 00021c         
1195:000 | DONE wsp | na 16 16 |        |             |
1196:000 | DONE lbl | na 16 16 | 0063b6 |             | z_base                               
1196:001 | DONE ins | na 16 16 | 0063b6 | 60          |                 rts                  
1197:000 | DONE wsp | na 16 16 |        |             |
1198:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1199:000 | DONE cmt | na 16 16 |        |             | ; BELL ( -- ) X bytes / X cycles
1200:000 | DONE cmt | na 16 16 |        |             | ; Trigger terminal bell on vt100 terminals
1201:000 | DONE cmt | na 16 16 |        |             | ; TODO replace with EMIT
1202:000 | DONE lbl | na 16 16 | 0063b7 |             | xt_bell                              
1203:000 | DONE dir | na 16 16 |        |             |         .!a16                        
1204:000 | DONE ins | na 16 16 | 0063b7 | a9 07 00    |                 lda.# AscBELL        
1205:000 | DONE ins | na 16 16 | 0063ba | 20 36 60    |                 jsr 006036           
1206:000 | DONE wsp | na 16 16 |        |             |
1207:000 | DONE lbl | na 16 16 | 0063bd |             | z_bell                               
1207:001 | DONE ins | na 16 16 | 0063bd | 60          |                 rts                  
1208:000 | DONE wsp | na 16 16 |        |             |
1209:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1210:000 | DONE cmt | na 16 16 |        |             | ; BEGIN ( -- addr ) 6 bytes / 13 cycles
1211:000 | DONE cmt | na 16 16 |        |             | ; Mark entry point for a loop. This is just an immediate version of here which
1212:000 | DONE cmt | na 16 16 |        |             | ; could just as welle be coded as  : BEGIN HERE ; IMMEDIATE  but we code it here
1213:000 | DONE cmt | na 16 16 |        |             | ; differently for speed
1214:000 | DONE lbl | na 16 16 | 0063be |             | xt_begin                             
1215:000 | DONE cmt | na 16 16 |        |             |                 ; really just the same code as HERE
1216:000 | DONE ins | na 16 16 | 0063be | ca          |                 dex                  
1217:000 | DONE ins | na 16 16 | 0063bf | ca          |                 dex                  
1218:000 | DONE ins | na 16 16 | 0063c0 | 94 00       |                 sty.dx 00            
1219:000 | DONE wsp | na 16 16 |        |             |
1220:000 | DONE ins | na 16 16 | 0063c2 | a4 00       |                 ldy.d 000200         
1221:000 | DONE wsp | na 16 16 |        |             |
1222:000 | DONE lbl | na 16 16 | 0063c4 |             | z_begin                              
1222:001 | DONE ins | na 16 16 | 0063c4 | 60          |                 rts                  
1223:000 | DONE wsp | na 16 16 |        |             |
1224:000 | DONE wsp | na 16 16 |        |             |
1225:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1226:000 | DONE cmt | na 16 16 |        |             | ; BL ( -- u ) 7 bytes / 12 cycles
1227:000 | DONE cmt | na 16 16 |        |             | ; Put ASCII char for SPACE on Data Stack
1228:000 | DONE lbl | na 16 16 | 0063c5 |             | xt_bl                                
1229:000 | DONE dir | na 16 16 |        |             |         .!xy16                       
1230:000 | DONE ins | na 16 16 | 0063c5 | ca          |                 dex                  
1231:000 | DONE ins | na 16 16 | 0063c6 | ca          |                 dex                  
1232:000 | DONE ins | na 16 16 | 0063c7 | 94 00       |                 sty.dx 00            
1233:000 | DONE ins | na 16 16 | 0063c9 | a0 20 00    |                 ldy.# AscSP          
1234:000 | DONE wsp | na 16 16 |        |             |
1235:000 | DONE lbl | na 16 16 | 0063cc |             | z_bl                                 
1235:001 | DONE ins | na 16 16 | 0063cc | 60          |                 rts                  
1236:000 | DONE wsp | na 16 16 |        |             |
1237:000 | DONE wsp | na 16 16 |        |             |
1238:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1239:000 | DONE cmt | na 16 16 |        |             | ; BRANCH ( -- ) X bytes / X cycles
1240:000 | DONE cmt | na 16 16 |        |             | ; Transfer control to given address. Uses tmp3 and tmptos
1241:000 | DONE lbl | na 16 16 | 0063cd |             | xt_branch                            
1242:000 | DONE dir | na 16 16 |        |             |         .!a16                        
1243:000 | DONE cmt | na 16 16 |        |             |                 ; encode subroutine branch to runtime portion
1244:000 | DONE ins | na 16 16 | 0063cd | f4 d4 63    |                 phe.# 0063d4         
1245:000 | DONE ins | na 16 16 | 0063d0 | 20 77 6f    |                 jsr 006f77           
1246:000 | DONE wsp | na 16 16 |        |             |
1247:000 | DONE lbl | na 16 16 | 0063d3 |             | z_branch                             
1247:001 | DONE ins | na 16 16 | 0063d3 | 60          |                 rts                  
1248:000 | DONE wsp | na 16 16 |        |             |
1249:000 | DONE lbl | na 16 16 | 0063d4 |             | branch_rt                            
1250:000 | DONE ins | na 16 16 | 0063d4 | 84 06       |                 sty.d 000206         
1251:000 | DONE wsp | na 16 16 |        |             |
1252:000 | DONE cmt | na 16 16 |        |             |                 ; The value on the Return Stack determines where we go to
1253:000 | DONE ins | na 16 16 | 0063d6 | 68          |                 pla                  
1254:000 | DONE ins | na 16 16 | 0063d7 | 85 1a       |                 sta.d 00021a         
1255:000 | DONE ins | na 16 16 | 0063d9 | a0 01 00    |                 ldy.# 0001           
1256:000 | DONE ins | na 16 16 | 0063dc | b1 1a       |                 lda.diy 00021a       LDA (TMP1),Y ; get address we're pointing to
1257:000 | DONE ins | na 16 16 | 0063de | 3a          |                 dec.a                
1258:000 | DONE ins | na 16 16 | 0063df | 48          |                 pha                  put target address back on Return Stack
1259:000 | DONE wsp | na 16 16 |        |             |
1260:000 | DONE ins | na 16 16 | 0063e0 | a4 06       |                 ldy.d 000206         
1261:000 | DONE wsp | na 16 16 |        |             |
1262:000 | DONE ins | na 16 16 | 0063e2 | 60          |                 rts                  
1263:000 | DONE wsp | na 16 16 |        |             |
1264:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1265:000 | DONE cmt | na 16 16 |        |             | ; BYE ( -- ) 2 bytes / 7-8 cycles
1266:000 | DONE cmt | na 16 16 |        |             | ; Leave Liara Forth, returning to Mensch Monitor
1267:000 | DONE cmt | na 16 16 |        |             | ; TODO make sure this actually calls the MM
1268:000 | DONE lbl | na 16 16 | 0063e3 |             | xt_bye                               
1269:000 | DONE ins | na 16 16 | 0063e3 | 58          |                 cli                  
1270:000 | DONE ins | na 16 16 | 0063e4 | 00 00       |                 brk 00               status byte 00 required for assembler
1271:000 | DONE wsp | na 16 16 |        |             |
1272:000 | DONE lbl | na 16 16 | 0063e6 |             | z_bye                                
1272:001 | DONE ins | na 16 16 | 0063e6 | 60          |                 rts                  dummy for compiling, never reached
1273:000 | DONE wsp | na 16 16 |        |             |
1274:000 | DONE wsp | na 16 16 |        |             |
1275:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1276:000 | DONE cmt | na 16 16 |        |             | ; C, "C-COMMA" ( char -- ) 13 bytes / 28 cycles
1277:000 | DONE cmt | na 16 16 |        |             | ; Store one character in the Dictionary
1278:000 | DONE lbl | na 16 16 | 0063e7 |             | xt_c-comma                           
1279:000 | DONE ins | na 16 16 | 0063e7 | 98          |                 tya                  
1280:000 | DONE ins | na 16 16 | 0063e8 | e2 20       |                 sep 20               
1280:001 | DONE ctl | na  8 16 |        |             |         .!a8
1281:000 | DONE ins | na  8 16 | 0063ea | 92 00       |                 sta.di 000200        STA (CP)
1282:000 | DONE ins | na  8 16 | 0063ec | c2 20       |                 rep 20               
1282:001 | DONE ctl | na 16 16 |        |             |         .!a16
1283:000 | DONE ins | na 16 16 | 0063ee | e6 00       |                 inc.d 000200         quick version of 1 ALLOT
1284:000 | DONE wsp | na 16 16 |        |             |
1285:000 | DONE ins | na 16 16 | 0063f0 | b4 00       |                 ldy.dx 00            
1286:000 | DONE ins | na 16 16 | 0063f2 | e8          |                 inx                  
1287:000 | DONE ins | na 16 16 | 0063f3 | e8          |                 inx                  
1288:000 | DONE wsp | na 16 16 |        |             |
1289:000 | DONE lbl | na 16 16 | 0063f4 |             | z_c-comma                            
1289:001 | DONE ins | na 16 16 | 0063f4 | 60          |                 rts                  
1290:000 | DONE wsp | na 16 16 |        |             |
1291:000 | DONE wsp | na 16 16 |        |             |
1292:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1293:000 | DONE cmt | na 16 16 |        |             | ; C@ "C-FETCH" ( addr -- n ) 11 bytes / 16 cycles
1294:000 | DONE cmt | na 16 16 |        |             | ; Get a single byte from the given address
1295:000 | DONE lbl | na 16 16 | 0063f5 |             | xt_c-fetch                           
1296:000 | DONE ins | na 16 16 | 0063f5 | e2 20       |                 sep 20               
1296:001 | DONE ctl | na  8 16 |        |             |         .!a8
1297:000 | DONE ins | na  8 16 | 0063f7 | b9 00 00    |                 lda.y 0000           
1298:000 | DONE ins | na  8 16 | 0063fa | c2 20       |                 rep 20               
1298:001 | DONE ctl | na 16 16 |        |             |         .!a16
1299:000 | DONE ins | na 16 16 | 0063fc | 29 ff 00    |                 and.# 00ff           
1300:000 | DONE ins | na 16 16 | 0063ff | a8          |                 tay                  
1301:000 | DONE wsp | na 16 16 |        |             |
1302:000 | DONE lbl | na 16 16 | 006400 |             | z_c-fetch                            
1302:001 | DONE ins | na 16 16 | 006400 | 60          |                 rts                  
1303:000 | DONE wsp | na 16 16 |        |             |
1304:000 | DONE wsp | na 16 16 |        |             |
1305:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1306:000 | DONE cmt | na 16 16 |        |             | ; C! "C-STORE" ( n addr -- ) 15 bytes / 29 cycles
1307:000 | DONE cmt | na 16 16 |        |             | ; Store LSB of NOS at location given as TOS
1308:000 | DONE lbl | na 16 16 | 006401 |             | xt_c-store                           
1309:000 | DONE ins | na 16 16 | 006401 | b5 00       |                 lda.dx 00            
1310:000 | DONE ins | na 16 16 | 006403 | e2 20       |                 sep 20               
1310:001 | DONE ctl | na  8 16 |        |             |         .!a8
1311:000 | DONE ins | na  8 16 | 006405 | 99 00 00    |                 sta.y 0000           
1312:000 | DONE ins | na  8 16 | 006408 | c2 20       |                 rep 20               
1312:001 | DONE ctl | na 16 16 |        |             |         .!a16
1313:000 | DONE ins | na 16 16 | 00640a | b4 02       |                 ldy.dx 02            
1314:000 | DONE ins | na 16 16 | 00640c | e8          |                 inx                  
1315:000 | DONE ins | na 16 16 | 00640d | e8          |                 inx                  
1316:000 | DONE ins | na 16 16 | 00640e | e8          |                 inx                  
1317:000 | DONE ins | na 16 16 | 00640f | e8          |                 inx                  
1318:000 | DONE wsp | na 16 16 |        |             |
1319:000 | DONE lbl | na 16 16 | 006410 |             | z_c-store                            
1319:001 | DONE ins | na 16 16 | 006410 | 60          |                 rts                  
1320:000 | DONE wsp | na 16 16 |        |             |
1321:000 | DONE wsp | na 16 16 |        |             |
1322:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1323:000 | DONE cmt | na 16 16 |        |             | ; CELLS ( n -- n ) X bytes / X cycles
1324:000 | DONE cmt | na 16 16 |        |             | ; Given a number of cells, return the number of bytes that they will require.
1325:000 | DONE cmt | na 16 16 |        |             | ; This is 16 bit cell Forth, so the value returned by this word is the same as
1326:000 | DONE cmt | na 16 16 |        |             | ; returned by 2*, see there.
1327:000 | DONE wsp | na 16 16 |        |             |
1328:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1329:000 | DONE cmt | na 16 16 |        |             | ; CHAR ( "c" -- u ) 23 bytes / X cycles
1330:000 | DONE cmt | na 16 16 |        |             | ; Convert a character to its ASCII value
1331:000 | DONE lbl | na 16 16 | 006411 |             | xt_char                              
1332:000 | DONE dir | na 16 16 |        |             |         .!a16                        
1333:000 | DONE ins | na 16 16 | 006411 | 20 cc 66    |                 jsr 0066cc           ( -- addr u )
1334:000 | DONE wsp | na 16 16 |        |             |
1335:000 | DONE cmt | na 16 16 |        |             |                 ; if we got back a zero, we have a problem
1336:000 | DONE ins | na 16 16 | 006414 | 98          |                 tya                  force flag check
1337:000 | DONE ins | na 16 16 | 006415 | d0 06       |                 bne 00641d           
1338:000 | DONE wsp | na 16 16 |        |             |
1339:000 | DONE ins | na 16 16 | 006417 | a9 49 74    |                 lda.# 007449         
1340:000 | DONE ins | na 16 16 | 00641a | 4c 98 6f    |                 jmp 006f98           
1341:000 | DONE wsp | na 16 16 |        |             |
1342:000 | DONE lbl | na 16 16 | 00641d |             | char_got_char                        
1343:000 | DONE ins | na 16 16 | 00641d | b4 00       |                 ldy.dx 00            get addr from NOS
1344:000 | DONE ins | na 16 16 | 00641f | b9 00 00    |                 lda.y 0000           LDA 0000,Y - could be C@
1345:000 | DONE ins | na 16 16 | 006422 | 29 ff 00    |                 and.# 00ff           
1346:000 | DONE ins | na 16 16 | 006425 | a8          |                 tay                  
1347:000 | DONE wsp | na 16 16 |        |             |
1348:000 | DONE ins | na 16 16 | 006426 | e8          |                 inx                  
1349:000 | DONE ins | na 16 16 | 006427 | e8          |                 inx                  
1350:000 | DONE wsp | na 16 16 |        |             |
1351:000 | DONE lbl | na 16 16 | 006428 |             | z_char                               
1351:001 | DONE ins | na 16 16 | 006428 | 60          |                 rts                  
1352:000 | DONE wsp | na 16 16 |        |             |
1353:000 | DONE wsp | na 16 16 |        |             |
1354:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1355:000 | DONE cmt | na 16 16 |        |             | ; COMPILE-ONLY ( -- ) 8 bytes / X cycles
1356:000 | DONE cmt | na 16 16 |        |             | ; Mark the most recently defined word as COMPILE-ONLY. The alternative (and
1357:000 | DONE cmt | na 16 16 |        |             | ; traditional) way to do this is to include a word ?COMPILE that makes sure
1358:000 | DONE cmt | na 16 16 |        |             | ; we're in compile mode
1359:000 | DONE lbl | na 16 16 | 006429 |             | xt_compile-only                      
1360:000 | DONE dir | na 16 16 |        |             |         .!a16                        
1361:000 | DONE ins | na 16 16 | 006429 | a9 04 00    |                 lda.# CO             
1362:000 | DONE ins | na 16 16 | 00642c | eb          |                 xba                  flags are MSB
1363:000 | DONE ins | na 16 16 | 00642d | 12 02       |                 ora.di 000202        ORA (DP)
1364:000 | DONE ins | na 16 16 | 00642f | 92 02       |                 sta.di 000202        
1365:000 | DONE wsp | na 16 16 |        |             |
1366:000 | DONE lbl | na 16 16 | 006431 |             | z_compile-only                       
1366:001 | DONE ins | na 16 16 | 006431 | 60          |                 rts                  
1367:000 | DONE wsp | na 16 16 |        |             |
1368:000 | DONE wsp | na 16 16 |        |             |
1369:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1370:000 | DONE cmt | na 16 16 |        |             | ; COMPILE, ( xt -- ) X bytes / X cycles
1371:000 | DONE cmt | na 16 16 |        |             | ; Compile a given xt in the current word definition. It is an error if we are
1372:000 | DONE cmt | na 16 16 |        |             | ; not in the compile state. Because we are using subroutine threading, we can't
1373:000 | DONE cmt | na 16 16 |        |             | ; use , (COMMA) to compile new words the traditional way. We use the NC (Native
1374:000 | DONE cmt | na 16 16 |        |             | ; Compile) flag to decide if native compilation is allowed. If yes, we use the
1375:000 | DONE cmt | na 16 16 |        |             | ; value NC_LIMIT (in definitions.tasm) to decide if the code is too large to be
1376:000 | DONE cmt | na 16 16 |        |             | ; natively coded: If the size is smaller than NC_LIMIT, we silently use
1377:000 | DONE cmt | na 16 16 |        |             | ; subroutine coding.
1378:000 | DONE lbl | na 16 16 | 006432 |             | xt_compilecomma                      
1379:000 | DONE wsp | na 16 16 |        |             |
1380:000 | DONE lbl | na 16 16 | 006432 |             | compile_as_code                      
1381:000 | DONE cmt | na 16 16 |        |             |                 ; Compile xt as native code
1382:000 | DONE cmt | na 16 16 |        |             |                 ; use nc_limit to decide if we want native compile
1383:000 | DONE cmt | na 16 16 |        |             |                 ; TODO consider special cases:
1384:000 | DONE cmt | na 16 16 |        |             |                 ; - >R R> R@ should strip PLA/PHA if native compiled
1385:000 | DONE wsp | na 16 16 |        |             |
1386:000 | DONE cmt | na 16 16 |        |             |                 ; TODO currently just compiles subroutine jumps
1387:000 | DONE wsp | na 16 16 |        |             |
1388:000 | DONE lbl | na 16 16 | 006432 |             | compile_as_jump                      
1389:000 | DONE cmt | na 16 16 |        |             |                 ; Compile xt as a subroutine jump. We don't have to switch A to
1390:000 | DONE cmt | na 16 16 |        |             |                 ; 8-bit register size because we only advance CP by one byte, so
1391:000 | DONE cmt | na 16 16 |        |             |                 ; the MSB of A is overwritten. Little endian machines for the
1392:000 | DONE cmt | na 16 16 |        |             |                 ; win!
1393:000 | DONE ins | na 16 16 | 006432 | a9 20 00    |                 lda.# 20             opcode for JSR
1394:000 | DONE ins | na 16 16 | 006435 | 92 00       |                 sta.di 000200        STA (CP)
1395:000 | DONE ins | na 16 16 | 006437 | e6 00       |                 inc.d 000200         
1396:000 | DONE wsp | na 16 16 |        |             |
1397:000 | DONE cmt | na 16 16 |        |             |                 ; There is no "sty.di" instruction, so we have to do this the
1398:000 | DONE cmt | na 16 16 |        |             |                 ; hard way
1399:000 | DONE ins | na 16 16 | 006439 | 98          |                 tya                  
1400:000 | DONE ins | na 16 16 | 00643a | 92 00       |                 sta.di 000200        
1401:000 | DONE ins | na 16 16 | 00643c | e6 00       |                 inc.d 000200         
1402:000 | DONE ins | na 16 16 | 00643e | e6 00       |                 inc.d 000200         
1403:000 | DONE wsp | na 16 16 |        |             |
1404:000 | DONE ins | na 16 16 | 006440 | b4 00       |                 ldy.dx 00            
1405:000 | DONE ins | na 16 16 | 006442 | e8          |                 inx                  
1406:000 | DONE ins | na 16 16 | 006443 | e8          |                 inx                  
1407:000 | DONE wsp | na 16 16 |        |             |
1408:000 | DONE lbl | na 16 16 | 006444 |             | z_compilecomma                       
1408:001 | DONE ins | na 16 16 | 006444 | 60          |                 rts                  
1409:000 | DONE wsp | na 16 16 |        |             |
1410:000 | DONE wsp | na 16 16 |        |             |
1411:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1412:000 | DONE cmt | na 16 16 |        |             | ; CONSTANT ( "name" n -- ) X bytes / X cycles
1413:000 | DONE cmt | na 16 16 |        |             | ; Associate a fixed value with a word. This could be realized as
1414:000 | DONE cmt | na 16 16 |        |             | ; CREATE , DOES> @  as well. We do more in assembler but let CREATE do the heavy
1415:000 | DONE cmt | na 16 16 |        |             | ; lifting.
1416:000 | DONE cmt | na 16 16 |        |             | ; See http://www.bradrodriguez.com/papers/moving3.htm for a primer on how
1417:000 | DONE cmt | na 16 16 |        |             | ; this works in various Forths.
1418:000 | DONE lbl | na 16 16 | 006445 |             | xt_constant                          
1419:000 | DONE ins | na 16 16 | 006445 | 20 75 64    |                 jsr 006475           
1420:000 | DONE wsp | na 16 16 |        |             |
1421:000 | DONE cmt | na 16 16 |        |             |                 ; CREATE by default installs a subroutine jump to DOVAR, but we
1422:000 | DONE cmt | na 16 16 |        |             |                 ; actually want DOCONST this time. Go back two bytes and repace
1423:000 | DONE cmt | na 16 16 |        |             |                 ; the subroutine jump target
1424:000 | DONE ins | na 16 16 | 006448 | a5 00       |                 lda.d 000200         
1425:000 | DONE ins | na 16 16 | 00644a | 3a          |                 dec.a                
1426:000 | DONE ins | na 16 16 | 00644b | 3a          |                 dec.a                
1427:000 | DONE ins | na 16 16 | 00644c | 85 16       |                 sta.d 000216         
1428:000 | DONE wsp | na 16 16 |        |             |
1429:000 | DONE ins | na 16 16 | 00644e | a9 04 6f    |                 lda.# 006f04         
1430:000 | DONE ins | na 16 16 | 006451 | 92 16       |                 sta.di 000216        STA (TMP1)
1431:000 | DONE wsp | na 16 16 |        |             |
1432:000 | DONE cmt | na 16 16 |        |             |                 ; Save TOS in next cell. This is a direct version of COMMA
1433:000 | DONE ins | na 16 16 | 006453 | 98          |                 tya                  there is no "sty.di cp"
1434:000 | DONE ins | na 16 16 | 006454 | 92 00       |                 sta.di 000200        
1435:000 | DONE ins | na 16 16 | 006456 | e6 00       |                 inc.d 000200         
1436:000 | DONE ins | na 16 16 | 006458 | e6 00       |                 inc.d 000200         
1437:000 | DONE wsp | na 16 16 |        |             |
1438:000 | DONE ins | na 16 16 | 00645a | b4 00       |                 ldy.dx 00            DROP
1439:000 | DONE ins | na 16 16 | 00645c | e8          |                 inx                  
1440:000 | DONE ins | na 16 16 | 00645d | e8          |                 inx                  
1441:000 | DONE wsp | na 16 16 |        |             |
1442:000 | DONE lbl | na 16 16 | 00645e |             | z_constant                           
1442:001 | DONE ins | na 16 16 | 00645e | 60          |                 rts                  
1443:000 | DONE wsp | na 16 16 |        |             |
1444:000 | DONE wsp | na 16 16 |        |             |
1445:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1446:000 | DONE cmt | na 16 16 |        |             | ; COUNT ( c-addr -- addr u ) 14 bytes / X cycles
1447:000 | DONE cmt | na 16 16 |        |             | ; Convert old-style character string to address-length pair. Note that the
1448:000 | DONE cmt | na 16 16 |        |             | ; length of the string c-addr ist stored in character length (8 bit), not cell
1449:000 | DONE cmt | na 16 16 |        |             | ; length (16 bit). This is rarely used these days, though COUNT can also be used
1450:000 | DONE cmt | na 16 16 |        |             | ; to step through a string character by character.
1451:000 | DONE lbl | na 16 16 | 00645f |             | xt_count                             
1452:000 | DONE dir | na 16 16 |        |             |         .!a16                        
1453:000 | DONE dir | na 16 16 |        |             |         .!xy16                       
1454:000 | DONE ins | na 16 16 | 00645f | 98          |                 tya                  
1455:000 | DONE ins | na 16 16 | 006460 | 1a          |                 inc.a                String address starts one char later
1456:000 | DONE wsp | na 16 16 |        |             |
1457:000 | DONE ins | na 16 16 | 006461 | ca          |                 dex                  
1458:000 | DONE ins | na 16 16 | 006462 | ca          |                 dex                  
1459:000 | DONE ins | na 16 16 | 006463 | 95 00       |                 sta.dx 00            NOS
1460:000 | DONE wsp | na 16 16 |        |             |
1461:000 | DONE ins | na 16 16 | 006465 | b9 00 00    |                 lda.y 0000           LDA $0000,Y  first byte is length
1462:000 | DONE ins | na 16 16 | 006468 | eb          |                 xba                  move length to LSB
1463:000 | DONE ins | na 16 16 | 006469 | 29 ff 00    |                 and.# 00ff           get rid of whatever was MSB
1464:000 | DONE ins | na 16 16 | 00646c | a8          |                 tay                  TOS
1465:000 | DONE wsp | na 16 16 |        |             |
1466:000 | DONE lbl | na 16 16 | 00646d |             | z_count                              
1466:001 | DONE ins | na 16 16 | 00646d | 60          |                 rts                  
1467:000 | DONE wsp | na 16 16 |        |             |
1468:000 | DONE wsp | na 16 16 |        |             |
1469:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1470:000 | DONE cmt | na 16 16 |        |             | ; CR ( -- ) X bytes / X cycles
1471:000 | DONE cmt | na 16 16 |        |             | ; Cause following output to appear at beginning of next line
1472:000 | DONE cmt | na 16 16 |        |             | ; TODO replace with EMIT
1473:000 | DONE lbl | na 16 16 | 00646e |             | xt_cr                                
1474:000 | DONE ins | na 16 16 | 00646e | a9 0a 00    |                 lda.# AscLF          test with AscCR for emulators
1475:000 | DONE ins | na 16 16 | 006471 | 20 36 60    |                 jsr 006036           
1476:000 | DONE wsp | na 16 16 |        |             |
1477:000 | DONE lbl | na 16 16 | 006474 |             | z_cr                                 
1477:001 | DONE ins | na 16 16 | 006474 | 60          |                 rts                  
1478:000 | DONE wsp | na 16 16 |        |             |
1479:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1480:000 | DONE cmt | na 16 16 |        |             | ; CREATE ( "name" -- ) X bytes / X cycles
1481:000 | DONE cmt | na 16 16 |        |             | ; Create a Dictionary entry associated with "name", used for various words,
1482:000 | DONE cmt | na 16 16 |        |             | ; especially for VARIABLE. When called, this new word will return the associated
1483:000 | DONE cmt | na 16 16 |        |             | ; address.
1484:000 | DONE lbl | na 16 16 | 006475 |             | xt_create                            
1485:000 | DONE dir | na 16 16 |        |             |         .!a16                        
1486:000 | DONE ins | na 16 16 | 006475 | 20 cc 66    |                 jsr 0066cc           ( -- addr u )
1487:000 | DONE ins | na 16 16 | 006478 | d0 06       |                 bne 006480           
1488:000 | DONE wsp | na 16 16 |        |             |
1489:000 | DONE cmt | na 16 16 |        |             |                 ; if we got a zero-length name string, complain and abort
1490:000 | DONE ins | na 16 16 | 00647a | a9 49 74    |                 lda.# 007449         
1491:000 | DONE ins | na 16 16 | 00647d | 4c 98 6f    |                 jmp 006f98           
1492:000 | DONE wsp | na 16 16 |        |             |
1493:000 | DONE lbl | na 16 16 | 006480 |             | create_got_name                      
1494:000 | DONE cmt | na 16 16 |        |             |                 ; all Dictionary entries are lowercase
1495:000 | DONE ins | na 16 16 | 006480 | 20 d1 6f    |                 jsr 006fd1           
1496:000 | DONE wsp | na 16 16 |        |             |
1497:000 | DONE cmt | na 16 16 |        |             |                 ; Remember the first free byte of memory as the start of the new
1498:000 | DONE cmt | na 16 16 |        |             |                 ; word
1499:000 | DONE ins | na 16 16 | 006483 | a5 00       |                 lda.d 000200         
1500:000 | DONE ins | na 16 16 | 006485 | 85 16       |                 sta.d 000216         save start of new word
1501:000 | DONE wsp | na 16 16 |        |             |
1502:000 | DONE cmt | na 16 16 |        |             |                 ; Enforce limit on 255 char length names by masking the MSB
1503:000 | DONE cmt | na 16 16 |        |             |                 ; of the length of the given string. We arrive here with
1504:000 | DONE cmt | na 16 16 |        |             |                 ; ( addr u )
1505:000 | DONE ins | na 16 16 | 006487 | 98          |                 tya                  
1506:000 | DONE ins | na 16 16 | 006488 | 29 ff 00    |                 and.# 00ff           
1507:000 | DONE ins | na 16 16 | 00648b | 85 18       |                 sta.d 000218         save length of name string
1508:000 | DONE wsp | na 16 16 |        |             |
1509:000 | DONE cmt | na 16 16 |        |             |                 ; We need 8 bytes + the length of the name string for our new
1510:000 | DONE cmt | na 16 16 |        |             |                 ; header. This is also the offset for the start of the code
1511:000 | DONE cmt | na 16 16 |        |             |                 ; field (the xt_ label) so we need to remember it. Otherwise, we
1512:000 | DONE cmt | na 16 16 |        |             |                 ; could just allot the space afterwards.
1513:000 | DONE ins | na 16 16 | 00648d | 18          |                 clc                  
1514:000 | DONE ins | na 16 16 | 00648e | 69 08 00    |                 adc.# 0008           
1515:000 | DONE ins | na 16 16 | 006491 | 85 1a       |                 sta.d 00021a         total bytes required for header
1516:000 | DONE wsp | na 16 16 |        |             |
1517:000 | DONE cmt | na 16 16 |        |             |                 ; We need to allocate three more bytes for the hardcoded
1518:000 | DONE cmt | na 16 16 |        |             |                 ; code field area (CFA), the "payload" of the word which by
1519:000 | DONE cmt | na 16 16 |        |             |                 ; default will be a subroutine jump to DOVAR
1520:000 | DONE ins | na 16 16 | 006493 | 1a          |                 inc.a                
1521:000 | DONE ins | na 16 16 | 006494 | 1a          |                 inc.a                
1522:000 | DONE ins | na 16 16 | 006495 | 1a          |                 inc.a                
1523:000 | DONE wsp | na 16 16 |        |             |
1524:000 | DONE cmt | na 16 16 |        |             |                 ; Instead of jumping to ALLOT, we do things by hand for speed
1525:000 | DONE cmt | na 16 16 |        |             |                 ; and so we don't have to fool around with the stack
1526:000 | DONE ins | na 16 16 | 006496 | 18          |                 clc                  
1527:000 | DONE ins | na 16 16 | 006497 | 65 00       |                 adc.d 000200         
1528:000 | DONE ins | na 16 16 | 006499 | 85 00       |                 sta.d 000200         
1529:000 | DONE wsp | na 16 16 |        |             |
1530:000 | DONE cmt | na 16 16 |        |             |                 ; Now we walk through the header, using Y as the index. See
1531:000 | DONE cmt | na 16 16 |        |             |                 ; drawing of header in headers.tasm file for reference. We
1532:000 | DONE cmt | na 16 16 |        |             |                 ; arrive here with ( addr u ) still from PARSE-NAME. We need
1533:000 | DONE cmt | na 16 16 |        |             |                 ; that addr later for the name string, so we push it to the
1534:000 | DONE cmt | na 16 16 |        |             |                 ; Return Stack. We'll clean up the Data Stack later
1535:000 | DONE ins | na 16 16 | 00649b | b5 00       |                 lda.dx 00            
1536:000 | DONE ins | na 16 16 | 00649d | 48          |                 pha                  
1537:000 | DONE wsp | na 16 16 |        |             |
1538:000 | DONE cmt | na 16 16 |        |             |                 ; HEADER BYTES 0,1: Length byte and flags
1539:000 | DONE ins | na 16 16 | 00649e | a0 00 00    |                 ldy.# 0000           Y is now an index, not TOS
1540:000 | DONE ins | na 16 16 | 0064a1 | a5 18       |                 lda.d 000218         get length byte
1541:000 | DONE ins | na 16 16 | 0064a3 | 91 16       |                 sta.diy 000216       STA (TMP1),Y
1542:000 | DONE ins | na 16 16 | 0064a5 | c8          |                 iny                  
1543:000 | DONE ins | na 16 16 | 0064a6 | c8          |                 iny                  
1544:000 | DONE wsp | na 16 16 |        |             |
1545:000 | DONE cmt | na 16 16 |        |             |                 ; BYTES 2,3: Next word in the dictionary (its nt). This is the
1546:000 | DONE cmt | na 16 16 |        |             |                 ; current Dictionary Pointer
1547:000 | DONE ins | na 16 16 | 0064a7 | a5 02       |                 lda.d 000202         
1548:000 | DONE ins | na 16 16 | 0064a9 | 91 16       |                 sta.diy 000216       
1549:000 | DONE ins | na 16 16 | 0064ab | c8          |                 iny                  
1550:000 | DONE ins | na 16 16 | 0064ac | c8          |                 iny                  
1551:000 | DONE wsp | na 16 16 |        |             |
1552:000 | DONE cmt | na 16 16 |        |             |                 ; BYTES 4,5: Start of code field (xt of this word, "xt_" link)
1553:000 | DONE cmt | na 16 16 |        |             |                 ; This begins after the header, so we take the length of the
1554:000 | DONE cmt | na 16 16 |        |             |                 ; header, which we saved in tmp3, and use it as an offset to
1555:000 | DONE cmt | na 16 16 |        |             |                 ; the address of the start of the word
1556:000 | DONE ins | na 16 16 | 0064ad | a5 16       |                 lda.d 000216         can't use CP, because we've allotted space
1557:000 | DONE ins | na 16 16 | 0064af | 85 02       |                 sta.d 000202         while we've got it, make old CP the new DP
1558:000 | DONE wsp | na 16 16 |        |             |
1559:000 | DONE ins | na 16 16 | 0064b1 | 18          |                 clc                  
1560:000 | DONE ins | na 16 16 | 0064b2 | 65 1a       |                 adc.d 00021a         total header length
1561:000 | DONE ins | na 16 16 | 0064b4 | 91 16       |                 sta.diy 000216       
1562:000 | DONE ins | na 16 16 | 0064b6 | c8          |                 iny                  
1563:000 | DONE ins | na 16 16 | 0064b7 | c8          |                 iny                  
1564:000 | DONE wsp | na 16 16 |        |             |
1565:000 | DONE cmt | na 16 16 |        |             |                 ; BYTES 6,7: End of code ("z_" link)
1566:000 | DONE cmt | na 16 16 |        |             |                 ; By default, we execute a jump to the DOVAR routine, so we need
1567:000 | DONE cmt | na 16 16 |        |             |                 ; to move three bytes down, and then one more byte so the z_
1568:000 | DONE cmt | na 16 16 |        |             |                 ; label points to the (fictional) RTS instruction for correct
1569:000 | DONE cmt | na 16 16 |        |             |                 ; compilation. The start of the code field is still in A
1570:000 | DONE ins | na 16 16 | 0064b8 | 1a          |                 inc.a                
1571:000 | DONE ins | na 16 16 | 0064b9 | 1a          |                 inc.a                
1572:000 | DONE ins | na 16 16 | 0064ba | 1a          |                 inc.a                
1573:000 | DONE ins | na 16 16 | 0064bb | 91 16       |                 sta.diy 000216       
1574:000 | DONE ins | na 16 16 | 0064bd | c8          |                 iny                  
1575:000 | DONE ins | na 16 16 | 0064be | c8          |                 iny                  
1576:000 | DONE wsp | na 16 16 |        |             |
1577:000 | DONE cmt | na 16 16 |        |             |                 ; BYTE 8: Start of name string
1578:000 | DONE cmt | na 16 16 |        |             |                 ; The addr of the string is on the Return Stack, the length of
1579:000 | DONE cmt | na 16 16 |        |             |                 ; the name string is in tmp2. We subtract eight from the address
1580:000 | DONE cmt | na 16 16 |        |             |                 ; so we can use the same loop index
1581:000 | DONE ins | na 16 16 | 0064bf | 68          |                 pla                  get back string address
1582:000 | DONE ins | na 16 16 | 0064c0 | 38          |                 sec                  
1583:000 | DONE ins | na 16 16 | 0064c1 | e9 08 00    |                 sbc.# 0008           
1584:000 | DONE ins | na 16 16 | 0064c4 | 85 1a       |                 sta.d 00021a         
1585:000 | DONE ins | na 16 16 | 0064c6 | e2 20       |                 sep 20               
1585:001 | DONE ctl | na  8 16 |        |             |         .!a8
1586:000 | DONE lbl | na  8 16 | 0064c8 |             | @                                    
1587:000 | DONE ins | na  8 16 | 0064c8 | b1 1a       |                 lda.diy 00021a       
1588:000 | DONE ins | na  8 16 | 0064ca | 91 16       |                 sta.diy 000216       
1589:000 | DONE ins | na  8 16 | 0064cc | c8          |                 iny                  
1590:000 | DONE ins | na  8 16 | 0064cd | c6 18       |                 dec.d 000218         
1591:000 | DONE ins | na  8 16 | 0064cf | d0 f7       |                 bne 0064c8           
1592:000 | DONE wsp | na  8 16 |        |             |
1593:000 | DONE cmt | na  8 16 |        |             |                 ; After the name string, comes the Code Field (start at xt, that
1594:000 | DONE cmt | na  8 16 |        |             |                 ; is, the xt_ label of the word) which is initially a jump to the
1595:000 | DONE cmt | na  8 16 |        |             |                 ; subroutine to DOVAR. We're still in 8-bit A-register, which is
1596:000 | DONE cmt | na  8 16 |        |             |                 ; good
1597:000 | DONE ins | na  8 16 | 0064d1 | a9 20       |                 lda.# 20             opcode of JSR
1598:000 | DONE ins | na  8 16 | 0064d3 | 91 16       |                 sta.diy 000216       
1599:000 | DONE ins | na  8 16 | 0064d5 | c8          |                 iny                  single increase only because we have 8-bit A
1600:000 | DONE wsp | na  8 16 |        |             |
1601:000 | DONE ins | na  8 16 | 0064d6 | a9 1f       |                 lda.# .lsb 006f1f    
1602:000 | DONE ins | na  8 16 | 0064d8 | 91 16       |                 sta.diy 000216       
1603:000 | DONE ins | na  8 16 | 0064da | c8          |                 iny                  
1604:000 | DONE wsp | na  8 16 |        |             |
1605:000 | DONE ins | na  8 16 | 0064db | a9 6f       |                 lda.# .msb 006f1f    
1606:000 | DONE ins | na  8 16 | 0064dd | 91 16       |                 sta.diy 000216       
1607:000 | DONE wsp | na  8 16 |        |             |
1608:000 | DONE ins | na  8 16 | 0064df | c2 20       |                 rep 20               
1608:001 | DONE ctl | na 16 16 |        |             |         .!a16
1609:000 | DONE cmt | na 16 16 |        |             |                 ; We're done. Restore Data Stack (2DROP)
1610:000 | DONE ins | na 16 16 | 0064e1 | b4 02       |                 ldy.dx 02            
1611:000 | DONE ins | na 16 16 | 0064e3 | e8          |                 inx                  
1612:000 | DONE ins | na 16 16 | 0064e4 | e8          |                 inx                  
1613:000 | DONE ins | na 16 16 | 0064e5 | e8          |                 inx                  
1614:000 | DONE ins | na 16 16 | 0064e6 | e8          |                 inx                  
1615:000 | DONE wsp | na 16 16 |        |             |
1616:000 | DONE lbl | na 16 16 | 0064e7 |             | z_create                             
1616:001 | DONE ins | na 16 16 | 0064e7 | 60          |                 rts                  
1617:000 | DONE wsp | na 16 16 |        |             |
1618:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1619:000 | DONE cmt | na 16 16 |        |             | ; DABS ( d -- ud ) X bytes / X cycles
1620:000 | DONE cmt | na 16 16 |        |             | ; Return the absolute value of a double number
1621:000 | DONE cmt | na 16 16 |        |             | ; TODO recode in assembler
1622:000 | DONE lbl | na 16 16 | 0064e8 |             | xt_dabs                              
1623:000 | DONE cmt | na 16 16 |        |             |                 ; double cell is TOS
1624:000 | DONE ins | na 16 16 | 0064e8 | 98          |                 tya                  force flag test
1625:000 | DONE ins | na 16 16 | 0064e9 | f0 03       |                 beq 0064ee           already positive, life is good
1626:000 | DONE wsp | na 16 16 |        |             |
1627:000 | DONE ins | na 16 16 | 0064eb | 20 04 65    |                 jsr 006504           
1628:000 | DONE wsp | na 16 16 |        |             |
1629:000 | DONE lbl | na 16 16 | 0064ee |             | z_dabs                               
1629:001 | DONE ins | na 16 16 | 0064ee | 60          |                 rts                  
1630:000 | DONE wsp | na 16 16 |        |             |
1631:000 | DONE wsp | na 16 16 |        |             |
1632:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1633:000 | DONE cmt | na 16 16 |        |             | ; DECIMAL ( -- ) 7 bytes / X cycles
1634:000 | DONE cmt | na 16 16 |        |             | ; Change radix for number conversion to 10
1635:000 | DONE lbl | na 16 16 | 0064ef |             | xt_decimal                           
1636:000 | DONE dir | na 16 16 |        |             |         .!a16                        
1637:000 | DONE ins | na 16 16 | 0064ef | a9 0a 00    |                 lda.# 000a           
1638:000 | DONE ins | na 16 16 | 0064f2 | 85 1c       |                 sta.d 00021c         
1639:000 | DONE wsp | na 16 16 |        |             |
1640:000 | DONE lbl | na 16 16 | 0064f4 |             | z_decimal                            
1640:001 | DONE ins | na 16 16 | 0064f4 | 60          |                 rts                  
1641:000 | DONE wsp | na 16 16 |        |             |
1642:000 | DONE wsp | na 16 16 |        |             |
1643:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1644:000 | DONE cmt | na 16 16 |        |             | ; DEPTH ( -- u ) 14 bytes / X cycles
1645:000 | DONE cmt | na 16 16 |        |             | ; Push the number of entries in cells (not bytes) on the parameter stack.
1646:000 | DONE cmt | na 16 16 |        |             | ; Assumes X is valid as the DSP.
1647:000 | DONE lbl | na 16 16 | 0064f5 |             | xt_depth                             
1648:000 | DONE dir | na 16 16 |        |             |         .!a16                        
1649:000 | DONE cmt | na 16 16 |        |             |                 ; We've got zero entries when X is dsp0
1650:000 | DONE ins | na 16 16 | 0064f5 | 86 04       |                 stx.d 000204         
1651:000 | DONE ins | na 16 16 | 0064f7 | a9 f8 02    |                 lda.# 0002f8         
1652:000 | DONE ins | na 16 16 | 0064fa | 38          |                 sec                  
1653:000 | DONE ins | na 16 16 | 0064fb | e5 04       |                 sbc.d 000204         
1654:000 | DONE wsp | na 16 16 |        |             |
1655:000 | DONE cmt | na 16 16 |        |             |                 ; now divide by two because each cells is to bytes long
1656:000 | DONE ins | na 16 16 | 0064fd | 4a          |                 lsr.a                
1657:000 | DONE wsp | na 16 16 |        |             |
1658:000 | DONE ins | na 16 16 | 0064fe | ca          |                 dex                  
1659:000 | DONE ins | na 16 16 | 0064ff | ca          |                 dex                  
1660:000 | DONE ins | na 16 16 | 006500 | 94 00       |                 sty.dx 00            
1661:000 | DONE wsp | na 16 16 |        |             |
1662:000 | DONE cmt | na 16 16 |        |             |                 ; push result to stack
1663:000 | DONE ins | na 16 16 | 006502 | a8          |                 tay                  
1664:000 | DONE wsp | na 16 16 |        |             |
1665:000 | DONE lbl | na 16 16 | 006503 |             | z_depth                              
1665:001 | DONE ins | na 16 16 | 006503 | 60          |                 rts                  
1666:000 | DONE wsp | na 16 16 |        |             |
1667:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1668:000 | DONE cmt | na 16 16 |        |             | ; DNEGATE ( d -- d ) 19 bytes / X cycles
1669:000 | DONE cmt | na 16 16 |        |             | ; Change the sign of a double number. This is the double equivalent of NEGATE
1670:000 | DONE lbl | na 16 16 | 006504 |             | xt_dnegate                           
1671:000 | DONE dir | na 16 16 |        |             |         .!a16                        
1672:000 | DONE cmt | na 16 16 |        |             |                 ; start off with LSW (in NOS)
1673:000 | DONE ins | na 16 16 | 006504 | b5 00       |                 lda.dx 00            
1674:000 | DONE ins | na 16 16 | 006506 | 49 ff ff    |                 eor.# 0ffff          
1675:000 | DONE wsp | na 16 16 |        |             |
1676:000 | DONE cmt | na 16 16 |        |             |                 ; INC doesn't affect the carry flag, so we have to do this the
1677:000 | DONE cmt | na 16 16 |        |             |                 ; hard way
1678:000 | DONE ins | na 16 16 | 006509 | 18          |                 clc                  
1679:000 | DONE ins | na 16 16 | 00650a | 69 01 00    |                 adc.# 0001           
1680:000 | DONE ins | na 16 16 | 00650d | 95 00       |                 sta.dx 00            
1681:000 | DONE wsp | na 16 16 |        |             |
1682:000 | DONE cmt | na 16 16 |        |             |                 ; now MSW (in TOS)
1683:000 | DONE ins | na 16 16 | 00650f | 98          |                 tya                  
1684:000 | DONE ins | na 16 16 | 006510 | 49 ff ff    |                 eor.# 0ffff          
1685:000 | DONE ins | na 16 16 | 006513 | 69 00 00    |                 adc.# 0000           we are only interested in the carry
1686:000 | DONE ins | na 16 16 | 006516 | a8          |                 tay                  
1687:000 | DONE wsp | na 16 16 |        |             |
1688:000 | DONE lbl | na 16 16 | 006517 |             | z_dnegate                            
1688:001 | DONE ins | na 16 16 | 006517 | 60          |                 rts                  
1689:000 | DONE wsp | na 16 16 |        |             |
1690:000 | DONE wsp | na 16 16 |        |             |
1691:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1692:000 | DONE cmt | na 16 16 |        |             | ; DOES> ( -- ) X bytes / X cycles
1693:000 | DONE cmt | na 16 16 |        |             | ; Create the payload for defining new defining words. See the file
1694:000 | DONE cmt | na 16 16 |        |             | ; docs/create-does.txt and
1695:000 | DONE cmt | na 16 16 |        |             | ; http://www.bradrodriguez.com/papers/moving3.htm for a discussion of
1696:000 | DONE cmt | na 16 16 |        |             | ; DOES>'s internal workings. This uses tmp1 and tmp2
1697:000 | DONE lbl | na 16 16 | 006518 |             | xt_does                              
1698:000 | DONE cmt | na 16 16 |        |             |                 ; compile a subroutine jump to the runtime of DOES>
1699:000 | DONE ins | na 16 16 | 006518 | f4 25 65    |                 phe.# 006525         
1700:000 | DONE ins | na 16 16 | 00651b | 20 77 6f    |                 jsr 006f77           
1701:000 | DONE wsp | na 16 16 |        |             |
1702:000 | DONE cmt | na 16 16 |        |             |                 ; compile a subroutine jump to DODOES. In traditional terms,
1703:000 | DONE cmt | na 16 16 |        |             |                 ; this is the Code Field Area (CFA) of the new word
1704:000 | DONE ins | na 16 16 | 00651e | f4 12 6f    |                 phe.# 006f12         
1705:000 | DONE ins | na 16 16 | 006521 | 20 77 6f    |                 jsr 006f77           
1706:000 | DONE wsp | na 16 16 |        |             |
1707:000 | DONE lbl | na 16 16 | 006524 |             | z_does                               
1707:001 | DONE ins | na 16 16 | 006524 | 60          |                 rts                  
1708:000 | DONE wsp | na 16 16 |        |             |
1709:000 | DONE lbl | na 16 16 | 006525 |             | does_rt                              
1710:000 | DONE cmt | na 16 16 |        |             |                 ; Runtime portion of DOES>. This replaces the subroutine jump to
1711:000 | DONE cmt | na 16 16 |        |             |                 ; DOVAR that CREATE automatically encodes by a jump to the
1712:000 | DONE cmt | na 16 16 |        |             |                 ; address that contains a subroutine jump to DODOES. We don't
1713:000 | DONE cmt | na 16 16 |        |             |                 ; jump to DODOES directly because we need to work our magic with
1714:000 | DONE cmt | na 16 16 |        |             |                 ; the return addresses
1715:000 | DONE ins | na 16 16 | 006525 | 68          |                 pla                  
1716:000 | DONE ins | na 16 16 | 006526 | 1a          |                 inc.a                increase by one because of RTS mechanics
1717:000 | DONE ins | na 16 16 | 006527 | 85 16       |                 sta.d 000216         
1718:000 | DONE wsp | na 16 16 |        |             |
1719:000 | DONE cmt | na 16 16 |        |             |                 ; CREATE has also already modified the DP to point to the new
1720:000 | DONE cmt | na 16 16 |        |             |                 ; word. We have no idea which instructions followed the CREATE
1721:000 | DONE cmt | na 16 16 |        |             |                 ; command if there is a DOES> so the CP could point anywhere by
1722:000 | DONE cmt | na 16 16 |        |             |                 ; now.
1723:000 | DONE ins | na 16 16 | 006529 | a5 02       |                 lda.d 000202         
1724:000 | DONE wsp | na 16 16 |        |             |
1725:000 | DONE cmt | na 16 16 |        |             |                 ; The address of the word's xt is four bytes down (see
1726:000 | DONE cmt | na 16 16 |        |             |                 ; header.tasm for details).
1727:000 | DONE ins | na 16 16 | 00652b | 18          |                 clc                  
1728:000 | DONE ins | na 16 16 | 00652c | 69 04 00    |                 adc.# 0004           
1729:000 | DONE ins | na 16 16 | 00652f | 85 18       |                 sta.d 000218         
1730:000 | DONE wsp | na 16 16 |        |             |
1731:000 | DONE cmt | na 16 16 |        |             |                 ; Now we get that address and add one byte to skip over the JSR
1732:000 | DONE cmt | na 16 16 |        |             |                 ; opcode
1733:000 | DONE ins | na 16 16 | 006531 | b2 18       |                 lda.di 000218        LDA (TMP2)
1734:000 | DONE ins | na 16 16 | 006533 | 1a          |                 inc.a                
1735:000 | DONE ins | na 16 16 | 006534 | 85 18       |                 sta.d 000218         Points to address to be replaced
1736:000 | DONE wsp | na 16 16 |        |             |
1737:000 | DONE cmt | na 16 16 |        |             |                 ; Replace the DOVAR address
1738:000 | DONE ins | na 16 16 | 006536 | a5 16       |                 lda.d 000216         
1739:000 | DONE ins | na 16 16 | 006538 | 92 18       |                 sta.di 000218        STA (TMP2)
1740:000 | DONE wsp | na 16 16 |        |             |
1741:000 | DONE cmt | na 16 16 |        |             |                 ; Since we removed the return address that brought us here, we
1742:000 | DONE cmt | na 16 16 |        |             |                 ; go back to whatever the main routine was. Otherwise, we we
1743:000 | DONE cmt | na 16 16 |        |             |                 ; smash into the subroutine jump to DODOES.
1744:000 | DONE ins | na 16 16 | 00653a | 60          |                 rts                  
1745:000 | DONE wsp | na 16 16 |        |             |
1746:000 | DONE wsp | na 16 16 |        |             |
1747:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1748:000 | DONE cmt | na 16 16 |        |             | ; DROP ( n -- ) 4 bytes / 9 cycles
1749:000 | DONE cmt | na 16 16 |        |             | ; Drop first entry on Data Stack
1750:000 | DONE wsp | na 16 16 |        |             |
1751:000 | DONE lbl | na 16 16 | 00653b |             | xt_drop                              
1752:000 | DONE dir | na 16 16 |        |             |         .!xy16                       
1753:000 | DONE ins | na 16 16 | 00653b | b4 00       |                 ldy.dx 00            
1754:000 | DONE ins | na 16 16 | 00653d | e8          |                 inx                  
1755:000 | DONE ins | na 16 16 | 00653e | e8          |                 inx                  
1756:000 | DONE wsp | na 16 16 |        |             |
1757:000 | DONE lbl | na 16 16 | 00653f |             | z_drop                               
1757:001 | DONE ins | na 16 16 | 00653f | 60          |                 rts                  
1758:000 | DONE wsp | na 16 16 |        |             |
1759:000 | DONE wsp | na 16 16 |        |             |
1760:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1761:000 | DONE cmt | na 16 16 |        |             | ; DUMP ( addr u -- ) X bytes / X cycles
1762:000 | DONE cmt | na 16 16 |        |             | ; Print region of memory in a pretty way.
1763:000 | DONE cmt | na 16 16 |        |             | ; TODO This is a crude, temporary version for testing. Rewrite ASAP
1764:000 | DONE lbl | na 16 16 | 006540 |             | xt_dump                              
1765:000 | DONE cmt | na 16 16 |        |             |                 ; we use tmp1 as a counter because we need Y for other
1766:000 | DONE cmt | na 16 16 |        |             |                 ; stuff
1767:000 | DONE ins | na 16 16 | 006540 | 84 16       |                 sty.d 000216         
1768:000 | DONE wsp | na 16 16 |        |             |
1769:000 | DONE lbl | na 16 16 | 006542 |             | dump_line_loop                       
1770:000 | DONE ins | na 16 16 | 006542 | 20 6e 64    |                 jsr 00646e           
1771:000 | DONE wsp | na 16 16 |        |             |
1772:000 | DONE cmt | na 16 16 |        |             |                 ; start internal counter for 16 numbers per row
1773:000 | DONE ins | na 16 16 | 006545 | a0 10 00    |                 ldy.# 0010           
1774:000 | DONE lbl | na 16 16 | 006548 |             | dump_byte_loop                       
1775:000 | DONE cmt | na 16 16 |        |             |                 ; if there are zero bytes left to display, we're done
1776:000 | DONE ins | na 16 16 | 006548 | a5 16       |                 lda.d 000216         
1777:000 | DONE ins | na 16 16 | 00654a | f0 11       |                 beq 00655d           
1778:000 | DONE wsp | na 16 16 |        |             |
1779:000 | DONE cmt | na 16 16 |        |             |                 ; otherwise, print contents pointed to by address in NOS
1780:000 | DONE ins | na 16 16 | 00654c | a1 00       |                 lda.dxi 00           
1781:000 | DONE ins | na 16 16 | 00654e | 20 b6 6f    |                 jsr 006fb6           TODO replace by EMIT
1782:000 | DONE ins | na 16 16 | 006551 | 20 4a 68    |                 jsr 00684a           
1783:000 | DONE wsp | na 16 16 |        |             |
1784:000 | DONE cmt | na 16 16 |        |             |                 ; next character
1785:000 | DONE ins | na 16 16 | 006554 | f6 00       |                 inc.dx 00            
1786:000 | DONE wsp | na 16 16 |        |             |
1787:000 | DONE cmt | na 16 16 |        |             |                 ; loop counter
1788:000 | DONE ins | na 16 16 | 006556 | c6 16       |                 dec.d 000216         
1789:000 | DONE ins | na 16 16 | 006558 | 88          |                 dey                  
1790:000 | DONE ins | na 16 16 | 006559 | d0 ed       |                 bne 006548           
1791:000 | DONE ins | na 16 16 | 00655b | 80 e5       |                 bra 006542           
1792:000 | DONE wsp | na 16 16 |        |             |
1793:000 | DONE lbl | na 16 16 | 00655d |             | dump_done                            
1794:000 | DONE ins | na 16 16 | 00655d | 20 6e 64    |                 jsr 00646e           
1795:000 | DONE wsp | na 16 16 |        |             |
1796:000 | DONE cmt | na 16 16 |        |             |                 ; drop everything and return
1797:000 | DONE cmt | na 16 16 |        |             |                 ; TODO replace by call of 2DROP
1798:000 | DONE ins | na 16 16 | 006560 | b4 02       |                 ldy.dx 02            
1799:000 | DONE ins | na 16 16 | 006562 | e8          |                 inx                  
1800:000 | DONE ins | na 16 16 | 006563 | e8          |                 inx                  
1801:000 | DONE ins | na 16 16 | 006564 | e8          |                 inx                  
1802:000 | DONE ins | na 16 16 | 006565 | e8          |                 inx                  
1803:000 | DONE wsp | na 16 16 |        |             |
1804:000 | DONE lbl | na 16 16 | 006566 |             | z_dump                               
1804:001 | DONE ins | na 16 16 | 006566 | 60          |                 rts                  
1805:000 | DONE wsp | na 16 16 |        |             |
1806:000 | DONE wsp | na 16 16 |        |             |
1807:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1808:000 | DONE cmt | na 16 16 |        |             | ; DUP  ( n -- n n ) 4 bytes / 9 cycles
1809:000 | DONE cmt | na 16 16 |        |             | ; Duplicate first entry on Data Stack
1810:000 | DONE wsp | na 16 16 |        |             |
1811:000 | DONE lbl | na 16 16 | 006567 |             | xt_dup                               
1812:000 | DONE dir | na 16 16 |        |             |         .!xy16                       
1813:000 | DONE ins | na 16 16 | 006567 | ca          |                 dex                  
1814:000 | DONE ins | na 16 16 | 006568 | ca          |                 dex                  
1815:000 | DONE ins | na 16 16 | 006569 | 94 00       |                 sty.dx 00            
1816:000 | DONE wsp | na 16 16 |        |             |
1817:000 | DONE lbl | na 16 16 | 00656b |             | z_dup                                
1817:001 | DONE ins | na 16 16 | 00656b | 60          |                 rts                  
1818:000 | DONE wsp | na 16 16 |        |             |
1819:000 | DONE wsp | na 16 16 |        |             |
1820:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1821:000 | DONE cmt | na 16 16 |        |             | ; EVALUATE ( addr u -- ) X bytes / X cycles
1822:000 | DONE cmt | na 16 16 |        |             | ; Execute string. Set SOURCE-ID to -1, make addr u the input source,
1823:000 | DONE cmt | na 16 16 |        |             | ; set >IN to zero. After processing the line, revert to old input source.
1824:000 | DONE lbl | na 16 16 | 00656c |             | xt_evaluate                          
1825:000 | DONE cmt | na 16 16 |        |             |                 ; We follow pforth's procedure of pushing SOURCE, SOURCE-ID, and
1826:000 | DONE cmt | na 16 16 |        |             |                 ; >IN to the Return Stack
1827:000 | DONE ins | na 16 16 | 00656c | a5 12       |                 lda.d 000212         >IN
1828:000 | DONE ins | na 16 16 | 00656e | 48          |                 pha                  
1829:000 | DONE ins | na 16 16 | 00656f | a5 0a       |                 lda.d 00020a         Input Source (SOURCE-ID)
1830:000 | DONE ins | na 16 16 | 006571 | 48          |                 pha                  
1831:000 | DONE ins | na 16 16 | 006572 | a5 0c       |                 lda.d 00020c         
1832:000 | DONE ins | na 16 16 | 006574 | 48          |                 pha                  
1833:000 | DONE ins | na 16 16 | 006575 | a5 0e       |                 lda.d 00020e         
1834:000 | DONE ins | na 16 16 | 006577 | 48          |                 pha                  
1835:000 | DONE wsp | na 16 16 |        |             |
1836:000 | DONE cmt | na 16 16 |        |             |                 ; set SOURCE-ID to -1
1837:000 | DONE ins | na 16 16 | 006578 | a9 ff ff    |                 lda.# 0ffff          
1838:000 | DONE ins | na 16 16 | 00657b | 85 0a       |                 sta.d 00020a         
1839:000 | DONE wsp | na 16 16 |        |             |
1840:000 | DONE cmt | na 16 16 |        |             |                 ; set >IN to zero
1841:000 | DONE ins | na 16 16 | 00657d | 64 12       |                 stz.d 000212         
1842:000 | DONE wsp | na 16 16 |        |             |
1843:000 | DONE cmt | na 16 16 |        |             |                 ; move TOS and NOS to input buffers
1844:000 | DONE ins | na 16 16 | 00657f | 84 0e       |                 sty.d 00020e         
1845:000 | DONE ins | na 16 16 | 006581 | b5 00       |                 lda.dx 00            
1846:000 | DONE ins | na 16 16 | 006583 | 85 0c       |                 sta.d 00020c         
1847:000 | DONE wsp | na 16 16 |        |             |
1848:000 | DONE cmt | na 16 16 |        |             |                 ; dump address string from stack
1849:000 | DONE ins | na 16 16 | 006585 | b4 02       |                 ldy.dx 02            
1850:000 | DONE ins | na 16 16 | 006587 | e8          |                 inx                  
1851:000 | DONE ins | na 16 16 | 006588 | e8          |                 inx                  
1852:000 | DONE ins | na 16 16 | 006589 | e8          |                 inx                  
1853:000 | DONE ins | na 16 16 | 00658a | e8          |                 inx                  
1854:000 | DONE wsp | na 16 16 |        |             |
1855:000 | DONE ins | na 16 16 | 00658b | 20 26 6f    |                 jsr 006f26           
1856:000 | DONE wsp | na 16 16 |        |             |
1857:000 | DONE cmt | na 16 16 |        |             |                 ; restore state from before evaluate
1858:000 | DONE ins | na 16 16 | 00658e | 68          |                 pla                  
1859:000 | DONE ins | na 16 16 | 00658f | 85 0e       |                 sta.d 00020e         
1860:000 | DONE ins | na 16 16 | 006591 | 68          |                 pla                  
1861:000 | DONE ins | na 16 16 | 006592 | 85 0c       |                 sta.d 00020c         
1862:000 | DONE ins | na 16 16 | 006594 | 68          |                 pla                  
1863:000 | DONE ins | na 16 16 | 006595 | 85 0a       |                 sta.d 00020a         
1864:000 | DONE ins | na 16 16 | 006597 | 68          |                 pla                  
1865:000 | DONE ins | na 16 16 | 006598 | 85 12       |                 sta.d 000212         
1866:000 | DONE wsp | na 16 16 |        |             |
1867:000 | DONE lbl | na 16 16 | 00659a |             | z_evaluate                           
1867:001 | DONE ins | na 16 16 | 00659a | 60          |                 rts                  
1868:000 | DONE wsp | na 16 16 |        |             |
1869:000 | DONE wsp | na 16 16 |        |             |
1870:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1871:000 | DONE cmt | na 16 16 |        |             | ; EXECUTE ( xt -- ) X bytes / X cycles
1872:000 | DONE cmt | na 16 16 |        |             | ; Run a word with help of its xt on the TOS
1873:000 | DONE wsp | na 16 16 |        |             |
1874:000 | DONE cmt | na 16 16 |        |             | ; Reserve three bytes for the jump - three in case we want to expand to the full
1875:000 | DONE cmt | na 16 16 |        |             | ; range
1876:000 | DONE cmt | na 16 16 |        |             | ; TODO move this to someplace that is assured to be RAM, not possibly ROM
1877:000 | DONE lbl | na 16 16 | 00659b |             | execute_ip                           
1877:001 | DONE dir | na 16 16 | 00659b | (3 bytes)   |         .byte 00, 00, 00             
1877:001 | DONE dir | na 16 16 |        |             |                 00 00 00                 --  . . .
1878:000 | DONE wsp | na 16 16 |        |             |
1879:000 | DONE lbl | na 16 16 | 00659e |             | xt_execute                           
1880:000 | DONE dir | na 16 16 |        |             |         .!a16                        
1881:000 | DONE dir | na 16 16 |        |             |         .!xy16                       
1882:000 | DONE cmt | na 16 16 |        |             |                 ; Store the xt for later use and then drop it off the stack
1883:000 | DONE ins | na 16 16 | 00659e | 8c 9b 65    |                 sty 00659b           
1884:000 | DONE ins | na 16 16 | 0065a1 | b4 00       |                 ldy.dx 00            
1885:000 | DONE ins | na 16 16 | 0065a3 | e8          |                 inx                  
1886:000 | DONE ins | na 16 16 | 0065a4 | e8          |                 inx                  
1887:000 | DONE wsp | na 16 16 |        |             |
1888:000 | DONE cmt | na 16 16 |        |             |                 ; Only JMP has the addressing mode we need. All our Forth
1889:000 | DONE cmt | na 16 16 |        |             |                 ; words end with a RTS instruction, so they will take us back to
1890:000 | DONE cmt | na 16 16 |        |             |                 ; the original caller of this routine without us having to muck
1891:000 | DONE cmt | na 16 16 |        |             |                 ; about with the Return Stack.
1892:000 | DONE ins | na 16 16 | 0065a5 | 6c 9b 65    |                 jmp.i 00659b         JMP (EXECUTE_IP)
1893:000 | DONE wsp | na 16 16 |        |             |
1894:000 | DONE lbl | na 16 16 | 0065a8 |             | z_execute                            
1894:001 | DONE ins | na 16 16 | 0065a8 | ea          |                 nop                  Never reached, see if we need the NOP
1895:000 | DONE wsp | na 16 16 |        |             |
1896:000 | DONE wsp | na 16 16 |        |             |
1897:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1898:000 | DONE cmt | na 16 16 |        |             | ; FALSE ( -- f ) 7 bytes / 12 cycles
1899:000 | DONE cmt | na 16 16 |        |             | ; Pushes value $0000 for Forth true on Data Stack. This is the same code as for
1900:000 | DONE cmt | na 16 16 |        |             | ; ZERO, see there. Dictionary entry should have xt_zero/z_zero instead of
1901:000 | DONE cmt | na 16 16 |        |             | ; xt_false/z_false
1902:000 | DONE wsp | na 16 16 |        |             |
1903:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1904:000 | DONE cmt | na 16 16 |        |             | ; FIND-NAME ( addr u -- nt | 0 ) 91 bytes / X cycles
1905:000 | DONE cmt | na 16 16 |        |             | ; Given a string, find the Name Token (nt) of a word or return zero if the word
1906:000 | DONE cmt | na 16 16 |        |             | ; is not in the dictionary. We use this instead of ancient FIND to look up words
1907:000 | DONE cmt | na 16 16 |        |             | ; in the Dictionary passed by PARSE-NAME. Note this returns the nt, not the xt
1908:000 | DONE cmt | na 16 16 |        |             | ; of a word like FIND. To convert, use NAME>INT. This is a Gforth word. See
1909:000 | DONE cmt | na 16 16 |        |             | ; https://www.complang.tuwien.ac.at/forth/gforth/Docs-html/Name-token.html
1910:000 | DONE cmt | na 16 16 |        |             | ; FIND calls this word for the hard word
1911:000 | DONE lbl | na 16 16 | 0065a9 |             | xt_find-name                         
1912:000 | DONE cmt | na 16 16 |        |             |                 ; We abort when we get an empty string, that is, one with
1913:000 | DONE cmt | na 16 16 |        |             |                 ; a length of zero TOS. We could test for this, but it will
1914:000 | DONE cmt | na 16 16 |        |             |                 ; happen so rarely that the speed penalty is higher if we run
1915:000 | DONE cmt | na 16 16 |        |             |                 ; the test for every single call. Looking for an empty string
1916:000 | DONE cmt | na 16 16 |        |             |                 ; does force us to check the whole dictionary, though. The test
1917:000 | DONE cmt | na 16 16 |        |             |                 ; would be 3 bytes and 4 to 6 cycles longer:
1918:000 | DONE cmt | na 16 16 |        |             |                 ;       tya                     ; force flag check
1919:000 | DONE cmt | na 16 16 |        |             |                 ;       beq find-name_failure
1920:000 | DONE dir | na 16 16 |        |             |         .!a16                        
1921:000 | DONE dir | na 16 16 |        |             |         .!xy16                       
1922:000 | DONE cmt | na 16 16 |        |             |                 ; set up loop for the first time
1923:000 | DONE ins | na 16 16 | 0065a9 | 84 06       |                 sty.d 000206         length of mystery string in tmptos, Y now free
1924:000 | DONE wsp | na 16 16 |        |             |
1925:000 | DONE ins | na 16 16 | 0065ab | a4 02       |                 ldy.d 000202         
1926:000 | DONE ins | na 16 16 | 0065ad | 84 16       |                 sty.d 000216         nt of first Dictionary word
1927:000 | DONE wsp | na 16 16 |        |             |
1928:000 | DONE ins | na 16 16 | 0065af | b4 00       |                 ldy.dx 00            
1929:000 | DONE ins | na 16 16 | 0065b1 | 84 18       |                 sty.d 000218         address of mystery string, was NOS
1930:000 | DONE wsp | na 16 16 |        |             |
1931:000 | DONE lbl | na 16 16 | 0065b3 |             | find-name_loop                       
1932:000 | DONE cmt | na 16 16 |        |             |                 ; First quick test: Are strings the same length?
1933:000 | DONE ins | na 16 16 | 0065b3 | b2 16       |                 lda.di 000216        LSB in first header word is length
1934:000 | DONE ins | na 16 16 | 0065b5 | 29 ff 00    |                 and.# 00ff           
1935:000 | DONE ins | na 16 16 | 0065b8 | c5 06       |                 cmp.d 000206         we test LSB
1936:000 | DONE cmt | na 16 16 |        |             |                 ; Most of the time, it will not be the same, so we save one
1937:000 | DONE cmt | na 16 16 |        |             |                 ; cycle pro loop if we only take the branch when they are the
1938:000 | DONE cmt | na 16 16 |        |             |                 ; same
1939:000 | DONE ins | na 16 16 | 0065ba | f0 0c       |                 beq 0065c8           
1940:000 | DONE wsp | na 16 16 |        |             |
1941:000 | DONE lbl | na 16 16 | 0065bc |             | find-name_next_entry                 
1942:000 | DONE cmt | na 16 16 |        |             |                 ; next header address is two bytes down
1943:000 | DONE ins | na 16 16 | 0065bc | e6 16       |                 inc.d 000216         
1944:000 | DONE ins | na 16 16 | 0065be | e6 16       |                 inc.d 000216         
1945:000 | DONE ins | na 16 16 | 0065c0 | b2 16       |                 lda.di 000216        LDA (TMP1)
1946:000 | DONE wsp | na 16 16 |        |             |
1947:000 | DONE cmt | na 16 16 |        |             |                 ; a zero entry marks the end of the Dictionary
1948:000 | DONE ins | na 16 16 | 0065c2 | f0 36       |                 beq 0065fa           
1949:000 | DONE wsp | na 16 16 |        |             |
1950:000 | DONE ins | na 16 16 | 0065c4 | 85 16       |                 sta.d 000216         new header
1951:000 | DONE ins | na 16 16 | 0065c6 | 80 eb       |                 bra 0065b3           
1952:000 | DONE wsp | na 16 16 |        |             |
1953:000 | DONE lbl | na 16 16 | 0065c8 |             | find-name_chars                      
1954:000 | DONE cmt | na 16 16 |        |             |                 ; Yes, same length, so we compare characters
1955:000 | DONE wsp | na 16 16 |        |             |
1956:000 | DONE cmt | na 16 16 |        |             |                 ; Switch A to 8 bit for this
1957:000 | DONE ins | na 16 16 | 0065c8 | e2 20       |                 sep 20               
1957:001 | DONE ctl | na  8 16 |        |             |         .!a8
1958:000 | DONE cmt | na  8 16 |        |             |                 ; Second quick test: Check first char, which is 8 bytes into the
1959:000 | DONE cmt | na  8 16 |        |             |                 ; header
1960:000 | DONE ins | na  8 16 | 0065ca | a0 08 00    |                 ldy.# 0008           
1961:000 | DONE ins | na  8 16 | 0065cd | b1 16       |                 lda.diy 000216       LDA (TMP1),Y - first char of entry
1962:000 | DONE ins | na  8 16 | 0065cf | d2 18       |                 cmp.di 000218        CMP (TMP2) - first char of mystery string
1963:000 | DONE ins | na  8 16 | 0065d1 | f0 04       |                 beq 0065d7           
1964:000 | DONE wsp | na  8 16 |        |             |
1965:000 | DONE lbl | na  8 16 | 0065d3 |             | find-name_char_nomatcnt_8            
1966:000 | DONE cmt | na  8 16 |        |             |                 ; First char is not the same, next entry
1967:000 | DONE ins | na  8 16 | 0065d3 | c2 20       |                 rep 20               
1967:001 | DONE ctl | na 16 16 |        |             |         .!a16
1968:000 | DONE ins | na 16 16 | 0065d5 | 80 e5       |                 bra 0065bc           
1969:000 | DONE wsp | na 16 16 |        |             |
1970:000 | DONE lbl | na 16 16 | 0065d7 |             | find-name_all_chars                  
1971:000 | DONE dir | na  8 16 |        |             |         .!a8                         
1972:000 | DONE cmt | na  8 16 |        |             |                 ; String length is the same, and the first character is the
1973:000 | DONE cmt | na  8 16 |        |             |                 ; same. If the word is only one character long, we're done
1974:000 | DONE ins | na  8 16 | 0065d7 | a4 06       |                 ldy.d 000206         
1975:000 | DONE ins | na  8 16 | 0065d9 | 88          |                 dey                  faster and shorter than CPY.# 01
1976:000 | DONE ins | na  8 16 | 0065da | f0 18       |                 beq 0065f4           
1977:000 | DONE wsp | na  8 16 |        |             |
1978:000 | DONE cmt | na  8 16 |        |             |                 ; No such luck: The strings are the same length and the first
1979:000 | DONE cmt | na  8 16 |        |             |                 ; char is the same, but the word is more than one char long. So
1980:000 | DONE cmt | na  8 16 |        |             |                 ; we suck it up and compare every single character. We go from
1981:000 | DONE cmt | na  8 16 |        |             |                 ; back to front, because words like CELLS and CELL+ would take
1982:000 | DONE cmt | na  8 16 |        |             |                 ; longer otherwise. We can also shorten the loop by one because
1983:000 | DONE cmt | na  8 16 |        |             |                 ; we've already compared the first char.
1984:000 | DONE wsp | na  8 16 |        |             |
1985:000 | DONE cmt | na  8 16 |        |             |                 ; Even worse, we have to add 8 bytes to address of Dictionary
1986:000 | DONE cmt | na  8 16 |        |             |                 ; string to allow testing with one loop. We need this like
1987:000 | DONE cmt | na  8 16 |        |             |                 ; a hole in the head because we just switched A to 8 bit.
1988:000 | DONE cmt | na  8 16 |        |             |                 ; However, staying with an 8-bit A is even slower.
1989:000 | DONE ins | na  8 16 | 0065dc | c2 20       |                 rep 20               
1989:001 | DONE ctl | na 16 16 |        |             |         .!a16
1990:000 | DONE ins | na 16 16 | 0065de | a5 16       |                 lda.d 000216         address of Dictionary string
1991:000 | DONE ins | na 16 16 | 0065e0 | 18          |                 clc                  
1992:000 | DONE ins | na 16 16 | 0065e1 | 69 08 00    |                 adc.# 0008           
1993:000 | DONE ins | na 16 16 | 0065e4 | 85 1a       |                 sta.d 00021a         
1994:000 | DONE ins | na 16 16 | 0065e6 | e2 20       |                 sep 20               
1994:001 | DONE ctl | na  8 16 |        |             |         .!a8
1995:000 | DONE ins | na  8 16 | 0065e8 | a4 06       |                 ldy.d 000206         get length of strings as loop index
1996:000 | DONE ins | na  8 16 | 0065ea | 88          |                 dey                  first index is length minus 1
1997:000 | DONE wsp | na  8 16 |        |             |
1998:000 | DONE lbl | na  8 16 | 0065eb |             | @                                    
1999:000 | DONE ins | na  8 16 | 0065eb | b1 18       |                 lda.diy 000218       LDA (TMP2),Y - last char of mystery string
2000:000 | DONE ins | na  8 16 | 0065ed | d1 1a       |                 cmp.diy 00021a       CMP (TMP1),Y - last char of DP string
2001:000 | DONE ins | na  8 16 | 0065ef | d0 e2       |                 bne 0065d3           
2002:000 | DONE ins | na  8 16 | 0065f1 | 88          |                 dey                  start of string (Y=0) was already tested
2003:000 | DONE ins | na  8 16 | 0065f2 | d0 f7       |                 bne 0065eb           
2004:000 | DONE wsp | na  8 16 |        |             |
2005:000 | DONE lbl | na  8 16 | 0065f4 |             | find-name_success                    
2006:000 | DONE cmt | na  8 16 |        |             |                 ; If we reach here, the strings are the same and we have a match
2007:000 | DONE cmt | na  8 16 |        |             |                 ; We get here with an 8 bit A
2008:000 | DONE ins | na  8 16 | 0065f4 | c2 20       |                 rep 20               
2008:001 | DONE ctl | na 16 16 |        |             |         .!a16
2009:000 | DONE ins | na 16 16 | 0065f6 | a4 16       |                 ldy.d 000216         get the correct DP
2010:000 | DONE ins | na 16 16 | 0065f8 | 80 03       |                 bra 0065fd           
2011:000 | DONE wsp | na 16 16 |        |             |
2012:000 | DONE wsp | na 16 16 |        |             |
2013:000 | DONE lbl | na 16 16 | 0065fa |             | find-name_failure_16                 
2014:000 | DONE cmt | na 16 16 |        |             |                 ; Word not found in Dictionary, return zero. Assumes A is 16
2015:000 | DONE cmt | na 16 16 |        |             |                 ; bit
2016:000 | DONE ins | na 16 16 | 0065fa | a0 00 00    |                 ldy.# 0000           fall thru
2017:000 | DONE wsp | na 16 16 |        |             |
2018:000 | DONE lbl | na 16 16 | 0065fd |             | find-name_done                       
2019:000 | DONE ins | na 16 16 | 0065fd | e8          |                 inx                  drop old address (NIP)
2020:000 | DONE ins | na 16 16 | 0065fe | e8          |                 inx                  
2021:000 | DONE wsp | na 16 16 |        |             |
2022:000 | DONE lbl | na 16 16 | 0065ff |             | z_find-name                          
2022:001 | DONE ins | na 16 16 | 0065ff | 60          |                 rts                  
2023:000 | DONE wsp | na 16 16 |        |             |
2024:000 | DONE wsp | na 16 16 |        |             |
2025:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
2026:000 | DONE cmt | na 16 16 |        |             | ; IMMEDIATE ( -- ) X bytes / X cycles
2027:000 | DONE cmt | na 16 16 |        |             | ; Mark the most recently defined word as IMMEDIATE. Will only affect the last
2028:000 | DONE cmt | na 16 16 |        |             | ; word in the Dictionary. If the words is still in ROM for some reason, this
2029:000 | DONE cmt | na 16 16 |        |             | ; will have no effect and will fail without an error message
2030:000 | DONE lbl | na 16 16 | 006600 |             | xt_immediate                         
2031:000 | DONE dir | na 16 16 |        |             |         .!a16                        
2032:000 | DONE ins | na 16 16 | 006600 | a9 02 00    |                 lda.# IM             Immediate flag
2033:000 | DONE ins | na 16 16 | 006603 | eb          |                 xba                  flags are MSB
2034:000 | DONE ins | na 16 16 | 006604 | 12 02       |                 ora.di 000202        ORA (DP)
2035:000 | DONE ins | na 16 16 | 006606 | 92 02       |                 sta.di 000202        
2036:000 | DONE wsp | na 16 16 |        |             |
2037:000 | DONE lbl | na 16 16 | 006608 |             | z_immediate                          
2037:001 | DONE ins | na 16 16 | 006608 | 60          |                 rts                  
2038:000 | DONE wsp | na 16 16 |        |             |
2039:000 | DONE wsp | na 16 16 |        |             |
2040:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
2041:000 | DONE cmt | na 16 16 |        |             | ; INVERT ( n -- n ) 5 bytes / X cycles
2042:000 | DONE cmt | na 16 16 |        |             | ; Complement of TOS
2043:000 | DONE lbl | na 16 16 | 006609 |             | xt_invert                            
2044:000 | DONE dir | na 16 16 |        |             |         .!a16                        
2045:000 | DONE ins | na 16 16 | 006609 | 98          |                 tya                  
2046:000 | DONE ins | na 16 16 | 00660a | 49 ff ff    |                 eor.# 0ffff          
2047:000 | DONE ins | na 16 16 | 00660d | a8          |                 tay                  
2048:000 | DONE wsp | na 16 16 |        |             |
2049:000 | DONE lbl | na 16 16 | 00660e |             | z_invert                             
2049:001 | DONE ins | na 16 16 | 00660e | 60          |                 rts                  
2050:000 | DONE wsp | na 16 16 |        |             |
2051:000 | DONE wsp | na 16 16 |        |             |
2052:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
2053:000 | DONE cmt | na 16 16 |        |             | ; HERE ( -- u ) 6 bytes / 13 cycles
2054:000 | DONE cmt | na 16 16 |        |             | ; Push Compiler Pointer address on the Data Stack
2055:000 | DONE lbl | na 16 16 | 00660f |             | xt_here                              
2056:000 | DONE dir | na 16 16 |        |             |         .!xy16                       
2057:000 | DONE ins | na 16 16 | 00660f | ca          |                 dex                  
2058:000 | DONE ins | na 16 16 | 006610 | ca          |                 dex                  
2059:000 | DONE ins | na 16 16 | 006611 | 94 00       |                 sty.dx 00            
2060:000 | DONE wsp | na 16 16 |        |             |
2061:000 | DONE ins | na 16 16 | 006613 | a4 00       |                 ldy.d 000200         
2062:000 | DONE wsp | na 16 16 |        |             |
2063:000 | DONE lbl | na 16 16 | 006615 |             | z_here                               
2063:001 | DONE ins | na 16 16 | 006615 | 60          |                 rts                  
2064:000 | DONE wsp | na 16 16 |        |             |
2065:000 | DONE wsp | na 16 16 |        |             |
2066:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
2067:000 | DONE cmt | na 16 16 |        |             | ; HEX ( -- ) X bytes / X cycles
2068:000 | DONE cmt | na 16 16 |        |             | ; Change radix for number conversion to 16
2069:000 | DONE lbl | na 16 16 | 006616 |             | xt_hex                               
2070:000 | DONE dir | na 16 16 |        |             |         .!a16                        
2071:000 | DONE ins | na 16 16 | 006616 | a9 10 00    |                 lda.# 0010           
2072:000 | DONE ins | na 16 16 | 006619 | 85 1c       |                 sta.d 00021c         
2073:000 | DONE wsp | na 16 16 |        |             |
2074:000 | DONE lbl | na 16 16 | 00661b |             | z_hex                                
2074:001 | DONE ins | na 16 16 | 00661b | 60          |                 rts                  
2075:000 | DONE wsp | na 16 16 |        |             |
2076:000 | DONE wsp | na 16 16 |        |             |
2077:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
2078:000 | DONE cmt | na 16 16 |        |             | ; LITERAL ( n -- ) X bytes / X cycles
2079:000 | DONE cmt | na 16 16 |        |             | ; Compile-only word to store TOS so that it is pushed on stack during runtime.
2080:000 | DONE cmt | na 16 16 |        |             | ; This is a immediate, compile-only word. Test it with  : AAA [ 1 ] LITERAL ;
2081:000 | DONE cmt | na 16 16 |        |             | ; for instance
2082:000 | DONE lbl | na 16 16 | 00661c |             | xt_literal                           
2083:000 | DONE cmt | na 16 16 |        |             |                 ; During runtime, we call the routine at the bottom by compiling
2084:000 | DONE cmt | na 16 16 |        |             |                 ; JSR LITERAL_RT. Note the cmpl_ routines use tmptos
2085:000 | DONE ins | na 16 16 | 00661c | f4 2e 66    |                 phe.# 00662e         PEA LITERAL_RT
2086:000 | DONE ins | na 16 16 | 00661f | 20 77 6f    |                 jsr 006f77           
2087:000 | DONE wsp | na 16 16 |        |             |
2088:000 | DONE cmt | na 16 16 |        |             |                 ; compile the value that is to be pushed to the Data Stack at
2089:000 | DONE cmt | na 16 16 |        |             |                 ; runtime. There is no "sty.di", so we have to do this the hard
2090:000 | DONE cmt | na 16 16 |        |             |                 ; way. This is basically , ("comma")
2091:000 | DONE ins | na 16 16 | 006622 | 98          |                 tya                  
2092:000 | DONE ins | na 16 16 | 006623 | 92 00       |                 sta.di 000200        
2093:000 | DONE ins | na 16 16 | 006625 | e6 00       |                 inc.d 000200         
2094:000 | DONE ins | na 16 16 | 006627 | e6 00       |                 inc.d 000200         
2095:000 | DONE wsp | na 16 16 |        |             |
2096:000 | DONE ins | na 16 16 | 006629 | b4 00       |                 ldy.dx 00            DROP
2097:000 | DONE ins | na 16 16 | 00662b | e8          |                 inx                  
2098:000 | DONE ins | na 16 16 | 00662c | e8          |                 inx                  
2099:000 | DONE wsp | na 16 16 |        |             |
2100:000 | DONE lbl | na 16 16 | 00662d |             | z_literal                            
2100:001 | DONE ins | na 16 16 | 00662d | 60          |                 rts                  
2101:000 | DONE wsp | na 16 16 |        |             |
2102:000 | DONE lbl | na 16 16 | 00662e |             | literal_rt                           
2103:000 | DONE cmt | na 16 16 |        |             |                 ; During runtime, we push the value following this word
2104:000 | DONE cmt | na 16 16 |        |             |                 ; back on the Data Stack. The subroutine jump that brought us
2105:000 | DONE cmt | na 16 16 |        |             |                 ; here put the address to return to on the Return Stack - this
2106:000 | DONE cmt | na 16 16 |        |             |                 ; points to the data we need to get
2107:000 | DONE wsp | na 16 16 |        |             |
2108:000 | DONE cmt | na 16 16 |        |             |                 ; Make room on Data Stack, Y now free to use
2109:000 | DONE ins | na 16 16 | 00662e | ca          |                 dex                  
2110:000 | DONE ins | na 16 16 | 00662f | ca          |                 dex                  
2111:000 | DONE ins | na 16 16 | 006630 | 94 00       |                 sty.dx 00            
2112:000 | DONE wsp | na 16 16 |        |             |
2113:000 | DONE cmt | na 16 16 |        |             |                 ; The 65816 stores (<RETURN-ADDRESS> - 1) on the Return Stack
2114:000 | DONE cmt | na 16 16 |        |             |                 ; so we have to manipulate the address
2115:000 | DONE ins | na 16 16 | 006632 | 7a          |                 ply                  
2116:000 | DONE ins | na 16 16 | 006633 | c8          |                 iny                  
2117:000 | DONE ins | na 16 16 | 006634 | b9 00 00    |                 lda.y 0000           LDA $0000,Y - get value after jump
2118:000 | DONE wsp | na 16 16 |        |             |
2119:000 | DONE ins | na 16 16 | 006637 | c8          |                 iny                  move return address past data and restore
2120:000 | DONE ins | na 16 16 | 006638 | 5a          |                 phy                  so we can get back home
2121:000 | DONE wsp | na 16 16 |        |             |
2122:000 | DONE ins | na 16 16 | 006639 | a8          |                 tay                  Value is now on the Data Stack ( -- n )
2123:000 | DONE wsp | na 16 16 |        |             |
2124:000 | DONE ins | na 16 16 | 00663a | 60          |                 rts                  
2125:000 | DONE wsp | na 16 16 |        |             |
2126:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
2127:000 | DONE cmt | na 16 16 |        |             | ; M* "MSTAR" ( n n -- d ) 16*16 -> 32  X bytes / X cycles
2128:000 | DONE cmt | na 16 16 |        |             | ; Multiply two 16 bit numbers, producing a 32 bit result. All values are signed.
2129:000 | DONE cmt | na 16 16 |        |             | ; This was originally adapted from FIG Forth for Tali Forth. The original Forth
2130:000 | DONE cmt | na 16 16 |        |             | ; code is : M* OVER OVER XOR >R ABS SWAP ABS UM* R> D+- ;  with
2131:000 | DONE cmt | na 16 16 |        |             | ; : D+- O< IF DNEGATE THEN ;
2132:000 | DONE cmt | na 16 16 |        |             | ; TODO Test this more once we have the Double words etc all working
2133:000 | DONE lbl | na 16 16 | 00663b |             | xt_mstar                             
2134:000 | DONE dir | na 16 16 |        |             |         .!a16                        
2135:000 | DONE cmt | na 16 16 |        |             |                 ; figure out the sign
2136:000 | DONE ins | na 16 16 | 00663b | 98          |                 tya                  
2137:000 | DONE ins | na 16 16 | 00663c | 55 00       |                 eor.dx 00            
2138:000 | DONE wsp | na 16 16 |        |             |
2139:000 | DONE cmt | na 16 16 |        |             |                 ; um* uses all kinds of tmp stuff so we don't risk a conflict
2140:000 | DONE cmt | na 16 16 |        |             |                 ; and just take the cycle hit by pushing this to the stack
2141:000 | DONE ins | na 16 16 | 00663e | 48          |                 pha                  
2142:000 | DONE wsp | na 16 16 |        |             |
2143:000 | DONE cmt | na 16 16 |        |             |                 ; get the absolute value of both numbers so we can feed them to
2144:000 | DONE cmt | na 16 16 |        |             |                 ; UM*, which does the real work
2145:000 | DONE ins | na 16 16 | 00663f | 98          |                 tya                  
2146:000 | DONE ins | na 16 16 | 006640 | 10 05       |                 bpl 006647           
2147:000 | DONE wsp | na 16 16 |        |             |
2148:000 | DONE cmt | na 16 16 |        |             |                 ; TOS is negative so we have to ABS it
2149:000 | DONE ins | na 16 16 | 006642 | 49 ff ff    |                 eor.# 0ffff          
2150:000 | DONE ins | na 16 16 | 006645 | 1a          |                 inc.a                
2151:000 | DONE ins | na 16 16 | 006646 | a8          |                 tay                  
2152:000 | DONE wsp | na 16 16 |        |             |
2153:000 | DONE lbl | na 16 16 | 006647 |             | mstar_abs_nos                        
2154:000 | DONE ins | na 16 16 | 006647 | b5 00       |                 lda.dx 00            
2155:000 | DONE ins | na 16 16 | 006649 | 10 06       |                 bpl 006651           
2156:000 | DONE wsp | na 16 16 |        |             |
2157:000 | DONE cmt | na 16 16 |        |             |                 ; NOS is negative so we have to ABS it
2158:000 | DONE ins | na 16 16 | 00664b | 49 ff ff    |                 eor.# 0ffff          
2159:000 | DONE ins | na 16 16 | 00664e | 1a          |                 inc.a                
2160:000 | DONE ins | na 16 16 | 00664f | 95 00       |                 sta.dx 00            
2161:000 | DONE wsp | na 16 16 |        |             |
2162:000 | DONE lbl | na 16 16 | 006651 |             | mstar_umstar                         
2163:000 | DONE ins | na 16 16 | 006651 | 20 a6 68    |                 jsr 0068a6           now ( d ) on stack
2164:000 | DONE wsp | na 16 16 |        |             |
2165:000 | DONE cmt | na 16 16 |        |             |                 ; handle the sign
2166:000 | DONE ins | na 16 16 | 006654 | 68          |                 pla                  
2167:000 | DONE wsp | na 16 16 |        |             |
2168:000 | DONE cmt | na 16 16 |        |             |                 ; postive, we don't have to care
2169:000 | DONE ins | na 16 16 | 006655 | 10 03       |                 bpl 00665a           
2170:000 | DONE wsp | na 16 16 |        |             |
2171:000 | DONE ins | na 16 16 | 006657 | 20 04 65    |                 jsr 006504           
2172:000 | DONE wsp | na 16 16 |        |             |
2173:000 | DONE lbl | na 16 16 | 00665a |             | z_mstar                              
2173:001 | DONE ins | na 16 16 | 00665a | 60          |                 rts                  
2174:000 | DONE wsp | na 16 16 |        |             |
2175:000 | DONE wsp | na 16 16 |        |             |
2176:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
2177:000 | DONE cmt | na 16 16 |        |             | ; MAX ( n m -- n ) 18 bytes / X cycles
2178:000 | DONE cmt | na 16 16 |        |             | ; Compare TOS and NOS and keep which one is larger. Adapted from Lance A.
2179:000 | DONE cmt | na 16 16 |        |             | ; Leventhal "6502 Assembly Language Subroutines". Negative Flag indicates which
2180:000 | DONE cmt | na 16 16 |        |             | ; number is larger. See also http://6502.org/tutorials/compare_instructions.html
2181:000 | DONE cmt | na 16 16 |        |             | ; and http://www.righto.com/2012/12/the-6502-overflow-flag-explained.html
2182:000 | DONE lbl | na 16 16 | 00665b |             | xt_max                               
2183:000 | DONE ins | na 16 16 | 00665b | 98          |                 tya                  
2184:000 | DONE ins | na 16 16 | 00665c | d5 00       |                 cmp.dx 00            
2185:000 | DONE wsp | na 16 16 |        |             |
2186:000 | DONE cmt | na 16 16 |        |             |                 ; If they are the same, life is good. This step also sets the
2187:000 | DONE cmt | na 16 16 |        |             |                 ; Carry flag
2188:000 | DONE ins | na 16 16 | 00665e | f0 0b       |                 beq 00666b           Faster than DROP because TOS is in Y
2189:000 | DONE wsp | na 16 16 |        |             |
2190:000 | DONE ins | na 16 16 | 006660 | f5 00       |                 sbc.dx 00            
2191:000 | DONE ins | na 16 16 | 006662 | 50 03       |                 bvc 006667           no overflow, skip ahead
2192:000 | DONE wsp | na 16 16 |        |             |
2193:000 | DONE cmt | na 16 16 |        |             |                 ; Deal with oveflow because we use signed numbers
2194:000 | DONE ins | na 16 16 | 006664 | 49 00 80    |                 eor.# 8000           compliment negative flag
2195:000 | DONE wsp | na 16 16 |        |             |
2196:000 | DONE lbl | na 16 16 | 006667 |             | max_no_ov                            
2197:000 | DONE ins | na 16 16 | 006667 | 10 02       |                 bpl 00666b           keep TOS
2198:000 | DONE lbl | na 16 16 | 006669 |             | max_drop                             
2199:000 | DONE ins | na 16 16 | 006669 | b4 00       |                 ldy.dx 00            DROP so NOS is result
2200:000 | DONE lbl | na 16 16 | 00666b |             | max_nip                              
2201:000 | DONE ins | na 16 16 | 00666b | e8          |                 inx                  
2202:000 | DONE ins | na 16 16 | 00666c | e8          |                 inx                  
2203:000 | DONE wsp | na 16 16 |        |             |
2204:000 | DONE lbl | na 16 16 | 00666d |             | z_max                                
2204:001 | DONE ins | na 16 16 | 00666d | 60          |                 rts                  
2205:000 | DONE wsp | na 16 16 |        |             |
2206:000 | DONE wsp | na 16 16 |        |             |
2207:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
2208:000 | DONE cmt | na 16 16 |        |             | ; MIN ( n m -- n ) 18 bytes / X cycles
2209:000 | DONE cmt | na 16 16 |        |             | ; Compare TOS and NOS and keep which one is smaller Adapted from Lance A.
2210:000 | DONE cmt | na 16 16 |        |             | ; Leventhal "6502 Assembly Language Subroutines". Negative Flag indicates which
2211:000 | DONE cmt | na 16 16 |        |             | ; number is larger. See also http://6502.org/tutorials/compare_instructions.html
2212:000 | DONE cmt | na 16 16 |        |             | ; and http://www.righto.com/2012/12/the-6502-overflow-flag-explained.html
2213:000 | DONE lbl | na 16 16 | 00666e |             | xt_min                               
2214:000 | DONE ins | na 16 16 | 00666e | 98          |                 tya                  
2215:000 | DONE ins | na 16 16 | 00666f | d5 00       |                 cmp.dx 00            
2216:000 | DONE wsp | na 16 16 |        |             |
2217:000 | DONE cmt | na 16 16 |        |             |                 ; If they are the same, life is good. This step also sets the
2218:000 | DONE cmt | na 16 16 |        |             |                 ; Carry flag
2219:000 | DONE ins | na 16 16 | 006671 | f0 0b       |                 beq 00667e           Faster than DROP because TOS is in Y
2220:000 | DONE wsp | na 16 16 |        |             |
2221:000 | DONE ins | na 16 16 | 006673 | f5 00       |                 sbc.dx 00            
2222:000 | DONE ins | na 16 16 | 006675 | 50 03       |                 bvc 00667a           no overflow, skip ahead
2223:000 | DONE wsp | na 16 16 |        |             |
2224:000 | DONE cmt | na 16 16 |        |             |                 ; Deal with oveflow because we use signed numbers
2225:000 | DONE ins | na 16 16 | 006677 | 49 00 80    |                 eor.# 8000           compliment negative flag
2226:000 | DONE wsp | na 16 16 |        |             |
2227:000 | DONE lbl | na 16 16 | 00667a |             | min_no_ov                            
2228:000 | DONE ins | na 16 16 | 00667a | 30 02       |                 bmi 00667e           keep TOS
2229:000 | DONE lbl | na 16 16 | 00667c |             | min_drop                             
2230:000 | DONE ins | na 16 16 | 00667c | b4 00       |                 ldy.dx 00            DROP so NOS is result
2231:000 | DONE lbl | na 16 16 | 00667e |             | min_nip                              
2232:000 | DONE ins | na 16 16 | 00667e | e8          |                 inx                  
2233:000 | DONE ins | na 16 16 | 00667f | e8          |                 inx                  
2234:000 | DONE wsp | na 16 16 |        |             |
2235:000 | DONE lbl | na 16 16 | 006680 |             | z_min                                
2235:001 | DONE ins | na 16 16 | 006680 | 60          |                 rts                  
2236:000 | DONE wsp | na 16 16 |        |             |
2237:000 | DONE wsp | na 16 16 |        |             |
2238:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
2239:000 | DONE cmt | na 16 16 |        |             | ; NAME>INT ( nt -- xt ) 4 bytes / 8 cycles
2240:000 | DONE cmt | na 16 16 |        |             | ; Given the Name Token (nt) of a word, return its Execute Token (xt)
2241:000 | DONE lbl | na 16 16 | 006681 |             | xt_name-int                          
2242:000 | DONE dir | na 16 16 |        |             |         .!a16                        
2243:000 | DONE dir | na 16 16 |        |             |         .!xy16                       
2244:000 | DONE cmt | na 16 16 |        |             |                 ; The xt of a word beginns four bytes down from its nt
2245:000 | DONE ins | na 16 16 | 006681 | c8          |                 iny                  
2246:000 | DONE ins | na 16 16 | 006682 | c8          |                 iny                  
2247:000 | DONE ins | na 16 16 | 006683 | c8          |                 iny                  
2248:000 | DONE ins | na 16 16 | 006684 | c8          |                 iny                  
2249:000 | DONE ins | na 16 16 | 006685 | b9 00 00    |                 lda.y 0000           
2250:000 | DONE ins | na 16 16 | 006688 | a8          |                 tay                  
2251:000 | DONE wsp | na 16 16 |        |             |
2252:000 | DONE lbl | na 16 16 | 006689 |             | z_name-int                           
2252:001 | DONE ins | na 16 16 | 006689 | 60          |                 rts                  
2253:000 | DONE wsp | na 16 16 |        |             |
2254:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
2255:000 | DONE cmt | na 16 16 |        |             | ; NAME>STRING ( nt -- addr u ) 16 bytes / X cycles
2256:000 | DONE cmt | na 16 16 |        |             | ; Given a name token (nt) of a word, return its string. This is a Gforth word
2257:000 | DONE cmt | na 16 16 |        |             | ; that works with the Dictionary header entries. It is not checked if nt is
2258:000 | DONE cmt | na 16 16 |        |             | ; a valid name token.
2259:000 | DONE lbl | na 16 16 | 00668a |             | xt_name-string                       
2260:000 | DONE dir | na 16 16 |        |             |         .!a16                        
2261:000 | DONE dir | na 16 16 |        |             |         .!xy16                       
2262:000 | DONE ins | na 16 16 | 00668a | ca          |                 dex                  move NOS down one
2263:000 | DONE ins | na 16 16 | 00668b | ca          |                 dex                  
2264:000 | DONE wsp | na 16 16 |        |             |
2265:000 | DONE cmt | na 16 16 |        |             |                 ; the name string of a word begins 8 bytes down from its nt,
2266:000 | DONE cmt | na 16 16 |        |             |                 ; which we have as TOS
2267:000 | DONE ins | na 16 16 | 00668c | 98          |                 tya                  
2268:000 | DONE ins | na 16 16 | 00668d | 18          |                 clc                  
2269:000 | DONE ins | na 16 16 | 00668e | 69 08 00    |                 adc.# 0008           
2270:000 | DONE ins | na 16 16 | 006691 | 95 00       |                 sta.dx 00            NOS
2271:000 | DONE wsp | na 16 16 |        |             |
2272:000 | DONE cmt | na 16 16 |        |             |                 ; the length of the name string is in the LSB of the first word
2273:000 | DONE cmt | na 16 16 |        |             |                 ; of the dictionary entry header (the name token)
2274:000 | DONE ins | na 16 16 | 006693 | b9 00 00    |                 lda.y 0000           LDA $0000,Y
2275:000 | DONE ins | na 16 16 | 006696 | 29 ff 00    |                 and.# 00ff           mask all but length byte
2276:000 | DONE ins | na 16 16 | 006699 | a8          |                 tay                  
2277:000 | DONE wsp | na 16 16 |        |             |
2278:000 | DONE lbl | na 16 16 | 00669a |             | z_name-string                        
2278:001 | DONE ins | na 16 16 | 00669a | 60          |                 rts                  
2279:000 | DONE wsp | na 16 16 |        |             |
2280:000 | DONE wsp | na 16 16 |        |             |
2281:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
2282:000 | DONE cmt | na 16 16 |        |             | ; NEGATE ( n -- n ) 6 bytes / X cycles
2283:000 | DONE cmt | na 16 16 |        |             | ; Two's complement of TOS
2284:000 | DONE lbl | na 16 16 | 00669b |             | xt_negate                            
2285:000 | DONE ins | na 16 16 | 00669b | 98          |                 tya                  
2286:000 | DONE ins | na 16 16 | 00669c | 49 ff ff    |                 eor.# 0ffff          
2287:000 | DONE ins | na 16 16 | 00669f | 1a          |                 inc.a                
2288:000 | DONE ins | na 16 16 | 0066a0 | a8          |                 tay                  
2289:000 | DONE wsp | na 16 16 |        |             |
2290:000 | DONE lbl | na 16 16 | 0066a1 |             | z_negate                             
2290:001 | DONE ins | na 16 16 | 0066a1 | 60          |                 rts                  
2291:000 | DONE wsp | na 16 16 |        |             |
2292:000 | DONE wsp | na 16 16 |        |             |
2293:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
2294:000 | DONE cmt | na 16 16 |        |             | ; NIP ( n m -- m ) 2 bytes / 4 cycles
2295:000 | DONE cmt | na 16 16 |        |             | ; Delete entry that is NOS
2296:000 | DONE lbl | na 16 16 | 0066a2 |             | xt_nip                               
2297:000 | DONE dir | na 16 16 |        |             |         .!xy16                       
2298:000 | DONE ins | na 16 16 | 0066a2 | e8          |                 inx                  
2299:000 | DONE ins | na 16 16 | 0066a3 | e8          |                 inx                  
2300:000 | DONE lbl | na 16 16 | 0066a4 |             | z_nip                                
2300:001 | DONE ins | na 16 16 | 0066a4 | 60          |                 rts                  
2301:000 | DONE wsp | na 16 16 |        |             |
2302:000 | DONE wsp | na 16 16 |        |             |
2303:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
2304:000 | DONE cmt | na 16 16 |        |             | ; OR ( n m -- n ) 6 bytes / X cycles
2305:000 | DONE cmt | na 16 16 |        |             | ; Logical OR
2306:000 | DONE lbl | na 16 16 | 0066a5 |             | xt_or                                
2307:000 | DONE ins | na 16 16 | 0066a5 | 98          |                 tya                  
2308:000 | DONE ins | na 16 16 | 0066a6 | 15 00       |                 ora.dx 00            
2309:000 | DONE ins | na 16 16 | 0066a8 | a8          |                 tay                  
2310:000 | DONE wsp | na 16 16 |        |             |
2311:000 | DONE ins | na 16 16 | 0066a9 | e8          |                 inx                  
2312:000 | DONE ins | na 16 16 | 0066aa | e8          |                 inx                  
2313:000 | DONE wsp | na 16 16 |        |             |
2314:000 | DONE lbl | na 16 16 | 0066ab |             | z_or                                 
2314:001 | DONE ins | na 16 16 | 0066ab | 60          |                 rts                  
2315:000 | DONE wsp | na 16 16 |        |             |
2316:000 | DONE wsp | na 16 16 |        |             |
2317:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
2318:000 | DONE cmt | na 16 16 |        |             | ; OVER ( n m -- n m n )  6 bytes / 14 cycles
2319:000 | DONE cmt | na 16 16 |        |             | ; Push NOS on Data Stack
2320:000 | DONE lbl | na 16 16 | 0066ac |             | xt_over                              
2321:000 | DONE ins | na 16 16 | 0066ac | ca          |                 dex                  
2322:000 | DONE ins | na 16 16 | 0066ad | ca          |                 dex                  
2323:000 | DONE ins | na 16 16 | 0066ae | 94 00       |                 sty.dx 00            
2324:000 | DONE ins | na 16 16 | 0066b0 | b4 02       |                 ldy.dx 02            
2325:000 | DONE wsp | na 16 16 |        |             |
2326:000 | DONE lbl | na 16 16 | 0066b2 |             | z_over                               
2326:001 | DONE ins | na 16 16 | 0066b2 | 60          |                 rts                  
2327:000 | DONE wsp | na 16 16 |        |             |
2328:000 | DONE wsp | na 16 16 |        |             |
2329:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
2330:000 | DONE cmt | na 16 16 |        |             | ; PAD ( -- addr ) 11 bytes / X cycles
2331:000 | DONE cmt | na 16 16 |        |             | ; Return address to a temporary area in free memory for user. Must be at least
2332:000 | DONE cmt | na 16 16 |        |             | ; 84 bytes in size (says ANSI). It is located relative to the compile area
2333:000 | DONE cmt | na 16 16 |        |             | ; pointer (CP) and therefore varies in position. This area is reserved for the
2334:000 | DONE cmt | na 16 16 |        |             | ; user and not used by the system
2335:000 | DONE lbl | na 16 16 | 0066b3 |             | xt_pad                               
2336:000 | DONE dir | na 16 16 |        |             |         .!a16                        
2337:000 | DONE ins | na 16 16 | 0066b3 | ca          |                 dex                  
2338:000 | DONE ins | na 16 16 | 0066b4 | ca          |                 dex                  
2339:000 | DONE ins | na 16 16 | 0066b5 | 94 00       |                 sty.dx 00            
2340:000 | DONE wsp | na 16 16 |        |             |
2341:000 | DONE ins | na 16 16 | 0066b7 | a5 00       |                 lda.d 000200         
2342:000 | DONE ins | na 16 16 | 0066b9 | 18          |                 clc                  
2343:000 | DONE ins | na 16 16 | 0066ba | 69 7f 00    |                 adc.# 00007f         
2344:000 | DONE ins | na 16 16 | 0066bd | a8          |                 tay                  
2345:000 | DONE wsp | na 16 16 |        |             |
2346:000 | DONE lbl | na 16 16 | 0066be |             | z_pad                                
2346:001 | DONE ins | na 16 16 | 0066be | 60          |                 rts                  
2347:000 | DONE wsp | na 16 16 |        |             |
2348:000 | DONE wsp | na 16 16 |        |             |
2349:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
2350:000 | DONE cmt | na 16 16 |        |             | ; PAGE ( -- ) X bytes / X cycles
2351:000 | DONE cmt | na 16 16 |        |             | ; Clear the screen on vt-100 terminals by sending the code "ESC[2J". This is
2352:000 | DONE cmt | na 16 16 |        |             | ; only useful in interactive scenarios so we don't worry about speed
2353:000 | DONE cmt | na 16 16 |        |             | ; TODO rewrite with EMIT
2354:000 | DONE lbl | na 16 16 | 0066bf |             | xt_page                              
2355:000 | DONE ins | na 16 16 | 0066bf | a9 f6 74    |                 lda.# 0074f6         
2356:000 | DONE ins | na 16 16 | 0066c2 | 20 9e 6f    |                 jsr 006f9e           
2357:000 | DONE wsp | na 16 16 |        |             |
2358:000 | DONE cmt | na 16 16 |        |             |                 ; In theory, this should have moved the cursor to the top left
2359:000 | DONE cmt | na 16 16 |        |             |                 ; corner ("home"), but this doesn't seem to work in practice.
2360:000 | DONE cmt | na 16 16 |        |             |                 ; So we send "ESC[H" as well.
2361:000 | DONE ins | na 16 16 | 0066c5 | a9 fb 74    |                 lda.# 0074fb         
2362:000 | DONE ins | na 16 16 | 0066c8 | 20 9e 6f    |                 jsr 006f9e           
2363:000 | DONE wsp | na 16 16 |        |             |
2364:000 | DONE lbl | na 16 16 | 0066cb |             | z_page                               
2364:001 | DONE ins | na 16 16 | 0066cb | 60          |                 rts                  
2365:000 | DONE wsp | na 16 16 |        |             |
2366:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
2367:000 | DONE cmt | na 16 16 |        |             | ; PARSE-NAME ( "name" -- addr u ) 41+ bytes / X cycles
2368:000 | DONE cmt | na 16 16 |        |             | ; Find next word in input string, skipping leading spaces. This is a special
2369:000 | DONE cmt | na 16 16 |        |             | ; form of PARSE and drops through to that word. See PARSE for more detail. We
2370:000 | DONE cmt | na 16 16 |        |             | ; use this word internally for the interpreter because it is a lot easier to use
2371:000 | DONE cmt | na 16 16 |        |             | ; http://forth-standard.org/standard/core/PARSE-NAME has a Forth implementation
2372:000 | DONE lbl | na 16 16 | 0066cc |             | xt_parse-name                        
2373:000 | DONE dir | na 16 16 |        |             |         .!a16                        
2374:000 | DONE dir | na 16 16 |        |             |         .!xy16                       
2375:000 | DONE cmt | na 16 16 |        |             |                 ; skip leading spaces, changing >IN, then place SPACE
2376:000 | DONE cmt | na 16 16 |        |             |                 ; character on data stack for PARSE
2377:000 | DONE ins | na 16 16 | 0066cc | 5a          |                 phy                  save TOS for later use
2378:000 | DONE ins | na 16 16 | 0066cd | a4 12       |                 ldy.d 000212         >IN
2379:000 | DONE ins | na 16 16 | 0066cf | e2 20       |                 sep 20               
2379:001 | DONE ctl | na  8 16 |        |             |         .!a8
2380:000 | DONE lbl | na  8 16 | 0066d1 |             | parse-name_loop                      
2381:000 | DONE ins | na  8 16 | 0066d1 | c4 0e       |                 cpy.d 00020e         end of line?
2382:000 | DONE ins | na  8 16 | 0066d3 | f0 09       |                 beq 0066de           
2383:000 | DONE wsp | na  8 16 |        |             |
2384:000 | DONE ins | na  8 16 | 0066d5 | b1 0c       |                 lda.diy 00020c       LDA (CIB),Y
2385:000 | DONE ins | na  8 16 | 0066d7 | c9 20       |                 cmp.# AscSP          
2386:000 | DONE ins | na  8 16 | 0066d9 | d0 17       |                 bne 0066f2           
2387:000 | DONE ins | na  8 16 | 0066db | c8          |                 iny                  
2388:000 | DONE ins | na  8 16 | 0066dc | 80 f3       |                 bra 0066d1           
2389:000 | DONE wsp | na  8 16 |        |             |
2390:000 | DONE lbl | na  8 16 | 0066de |             | parse-name_empty_line                
2391:000 | DONE ins | na  8 16 | 0066de | c2 20       |                 rep 20               
2391:001 | DONE ctl | na 16 16 |        |             |         .!a16
2392:000 | DONE cmt | na 16 16 |        |             |                 ; The Gforth documentation does not say what address is returned
2393:000 | DONE cmt | na 16 16 |        |             |                 ; if a string with only spaces is returned. Experiments with
2394:000 | DONE cmt | na 16 16 |        |             |                 ; the word  : PNT ( "name" -- ) PARSE-NAME SWAP U. U. TYPE ;
2395:000 | DONE cmt | na 16 16 |        |             |                 ; show that it returns the address of the last space in the
2396:000 | DONE cmt | na 16 16 |        |             |                 ; input, which is cib+ciblen. So we do that as well.
2397:000 | DONE ins | na 16 16 | 0066e0 | ca          |                 dex                  
2398:000 | DONE ins | na 16 16 | 0066e1 | ca          |                 dex                  
2399:000 | DONE ins | na 16 16 | 0066e2 | ca          |                 dex                  
2400:000 | DONE ins | na 16 16 | 0066e3 | ca          |                 dex                  
2401:000 | DONE wsp | na 16 16 |        |             |
2402:000 | DONE ins | na 16 16 | 0066e4 | 7a          |                 ply                  restore old TOS as 3OS
2403:000 | DONE ins | na 16 16 | 0066e5 | 94 02       |                 sty.dx 02            
2404:000 | DONE wsp | na 16 16 |        |             |
2405:000 | DONE ins | na 16 16 | 0066e7 | a5 0c       |                 lda.d 00020c         
2406:000 | DONE ins | na 16 16 | 0066e9 | 18          |                 clc                  
2407:000 | DONE ins | na 16 16 | 0066ea | 65 0e       |                 adc.d 00020e         
2408:000 | DONE ins | na 16 16 | 0066ec | 95 00       |                 sta.dx 00            Address as NOS
2409:000 | DONE wsp | na 16 16 |        |             |
2410:000 | DONE ins | na 16 16 | 0066ee | a0 00 00    |                 ldy.# 0000           TOS
2411:000 | DONE wsp | na 16 16 |        |             |
2412:000 | DONE ins | na 16 16 | 0066f1 | 60          |                 rts                  don't have to go through PARSE
2413:000 | DONE wsp | na 16 16 |        |             |
2414:000 | DONE lbl | na 16 16 | 0066f2 |             | parse-name_found                     
2415:000 | DONE dir | na 16 16 |        |             |         .!xy16                       
2416:000 | DONE ins | na 16 16 | 0066f2 | c2 20       |                 rep 20               
2416:001 | DONE ctl | na 16 16 |        |             |         .!a16
2417:000 | DONE ins | na 16 16 | 0066f4 | 84 12       |                 sty.d 000212         new >IN
2418:000 | DONE wsp | na 16 16 |        |             |
2419:000 | DONE ins | na 16 16 | 0066f6 | 7a          |                 ply                  recover TOS
2420:000 | DONE ins | na 16 16 | 0066f7 | ca          |                 dex                  
2421:000 | DONE ins | na 16 16 | 0066f8 | ca          |                 dex                  
2422:000 | DONE ins | na 16 16 | 0066f9 | 94 00       |                 sty.dx 00            
2423:000 | DONE wsp | na 16 16 |        |             |
2424:000 | DONE ins | na 16 16 | 0066fb | a0 20 00    |                 ldy.# AscSP          put space on TOS for PARSE
2425:000 | DONE wsp | na 16 16 |        |             |
2426:000 | DONE cmt | na 16 16 |        |             |                 ; fall thru to PARSE
2427:000 | DONE wsp | na 16 16 |        |             |
2428:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
2429:000 | DONE cmt | na 16 16 |        |             | ; PARSE ( c "name" -- addr u ) 45 bytes / X+ cycles
2430:000 | DONE cmt | na 16 16 |        |             | ; Find word in input string delimited by character given Do not skip leading
2431:000 | DONE cmt | na 16 16 |        |             | ; delimiters, this is an important difference to PARSE-NAME. PARSE and
2432:000 | DONE cmt | na 16 16 |        |             | ; PARSE-NAME replace WORD in modern systems. See the ANSI documentation at
2433:000 | DONE cmt | na 16 16 |        |             | ; http://www.forth200x.org/documents/html3/rationale.html#rat:core:PARSE
2434:000 | DONE cmt | na 16 16 |        |             | ; PARSE-NAME drops through to here
2435:000 | DONE cmt | na 16 16 |        |             | ;
2436:000 | DONE cmt | na 16 16 |        |             | ;    cib   cib+toin    cib+ciblen
2437:000 | DONE cmt | na 16 16 |        |             | ;     v       v             v
2438:000 | DONE cmt | na 16 16 |        |             | ;     |#####################|              Length of found string:
2439:000 | DONE cmt | na 16 16 |        |             | ;                                          ciblen - toin
2440:000 | DONE cmt | na 16 16 |        |             | ;     +------>|  toin (>IN)
2441:000 | DONE cmt | na 16 16 |        |             | ;     +-------------------->|  ciblen
2442:000 | DONE cmt | na 16 16 |        |             | ;
2443:000 | DONE cmt | na 16 16 |        |             | ; The input string is stored starting at the address in the Current Input Buffer
2444:000 | DONE cmt | na 16 16 |        |             | ; (CIB), the length of which is in CIBLEN. While searching for the delimiter,
2445:000 | DONE cmt | na 16 16 |        |             | ; TOIN (>IN) points to the where we currently are. Since PARSE does not skip
2446:000 | DONE cmt | na 16 16 |        |             | ; leading delimiters, we assume we are on a useful string.
2447:000 | DONE lbl | na 16 16 | 0066fe |             | xt_parse                             
2448:000 | DONE dir | na 16 16 |        |             |         .!a16                        
2449:000 | DONE dir | na 16 16 |        |             |         .!xy16                       
2450:000 | DONE ins | na 16 16 | 0066fe | 84 16       |                 sty.d 000216         save delimiter, char is LSB
2451:000 | DONE wsp | na 16 16 |        |             |
2452:000 | DONE cmt | na 16 16 |        |             |                 ; save beginning of new word (cib+toin) to NOS. Don't need to
2453:000 | DONE cmt | na 16 16 |        |             |                 ; worry about TOS because Y gets clobbered anyway before we
2454:000 | DONE cmt | na 16 16 |        |             |                 ; return
2455:000 | DONE ins | na 16 16 | 006700 | a5 12       |                 lda.d 000212         
2456:000 | DONE ins | na 16 16 | 006702 | 85 1a       |                 sta.d 00021a         save >IN for later length calculation
2457:000 | DONE ins | na 16 16 | 006704 | 18          |                 clc                  
2458:000 | DONE ins | na 16 16 | 006705 | 65 0c       |                 adc.d 00020c         
2459:000 | DONE wsp | na 16 16 |        |             |
2460:000 | DONE ins | na 16 16 | 006707 | ca          |                 dex                  save addr as NOS
2461:000 | DONE ins | na 16 16 | 006708 | ca          |                 dex                  
2462:000 | DONE ins | na 16 16 | 006709 | 95 00       |                 sta.dx 00            
2463:000 | DONE wsp | na 16 16 |        |             |
2464:000 | DONE ins | na 16 16 | 00670b | 64 18       |                 stz.d 000218         offset for EOL/char found adjustment of >IN
2465:000 | DONE wsp | na 16 16 |        |             |
2466:000 | DONE cmt | na 16 16 |        |             |                 ; prepare loop using Y as index
2467:000 | DONE ins | na 16 16 | 00670d | a4 12       |                 ldy.d 000212         
2468:000 | DONE ins | na 16 16 | 00670f | e2 20       |                 sep 20               
2468:001 | DONE ctl | na  8 16 |        |             |         .!a8
2469:000 | DONE wsp | na  8 16 |        |             |
2470:000 | DONE lbl | na  8 16 | 006711 |             | parse_loop                           
2471:000 | DONE ins | na  8 16 | 006711 | c4 0e       |                 cpy.d 00020e         check for EOL first
2472:000 | DONE ins | na  8 16 | 006713 | f0 0d       |                 beq 006722           
2473:000 | DONE wsp | na  8 16 |        |             |
2474:000 | DONE ins | na  8 16 | 006715 | b1 0c       |                 lda.diy 00020c       LDA (CIB),Y
2475:000 | DONE ins | na  8 16 | 006717 | c5 16       |                 cmp.d 000216         found delimiter?
2476:000 | DONE ins | na  8 16 | 006719 | f0 03       |                 beq 00671e           
2477:000 | DONE ins | na  8 16 | 00671b | c8          |                 iny                  
2478:000 | DONE ins | na  8 16 | 00671c | 80 f3       |                 bra 006711           
2479:000 | DONE wsp | na  8 16 |        |             |
2480:000 | DONE lbl | na  8 16 | 00671e |             | parse_found_delimiter                
2481:000 | DONE cmt | na  8 16 |        |             |                 ; If we haven't reached the end of the line, but found
2482:000 | DONE cmt | na  8 16 |        |             |                 ; a delimiter, we want >IN to point to the next character after
2483:000 | DONE cmt | na  8 16 |        |             |                 ; the delimiter, not the delimiter itself. This is what the
2484:000 | DONE cmt | na  8 16 |        |             |                 ; offset is for
2485:000 | DONE ins | na  8 16 | 00671e | c2 20       |                 rep 20               
2485:001 | DONE ctl | na 16 16 |        |             |         .!a16
2486:000 | DONE ins | na 16 16 | 006720 | e6 18       |                 inc.d 000218         
2487:000 | DONE wsp | na 16 16 |        |             |
2488:000 | DONE lbl | na 16 16 | 006722 |             | parse_reached_eol                    
2489:000 | DONE cmt | na 16 16 |        |             |                 ; calculate length of string found (see ascii drawing)
2490:000 | DONE dir | na 16 16 |        |             |         .!xy16                       
2491:000 | DONE ins | na 16 16 | 006722 | c2 20       |                 rep 20               
2491:001 | DONE ctl | na 16 16 |        |             |         .!a16
2492:000 | DONE ins | na 16 16 | 006724 | 98          |                 tya                  
2493:000 | DONE ins | na 16 16 | 006725 | 38          |                 sec                  
2494:000 | DONE ins | na 16 16 | 006726 | e5 1a       |                 sbc.d 00021a         original value for >IN / index of first char
2495:000 | DONE ins | na 16 16 | 006728 | 48          |                 pha                  save so we can manipulate Y
2496:000 | DONE wsp | na 16 16 |        |             |
2497:000 | DONE cmt | na 16 16 |        |             |                 ; calculate new >IN
2498:000 | DONE ins | na 16 16 | 006729 | 98          |                 tya                  
2499:000 | DONE ins | na 16 16 | 00672a | 18          |                 clc                  
2500:000 | DONE ins | na 16 16 | 00672b | 65 18       |                 adc.d 000218         offset for EOL vs found delimiter
2501:000 | DONE ins | na 16 16 | 00672d | 85 12       |                 sta.d 000212         
2502:000 | DONE wsp | na 16 16 |        |             |
2503:000 | DONE ins | na 16 16 | 00672f | 7a          |                 ply                  length of string in TOS
2504:000 | DONE wsp | na 16 16 |        |             |
2505:000 | DONE lbl | na 16 16 | 006730 |             | z_parse-name                         
2506:000 | DONE lbl | na 16 16 | 006730 |             | z_parse                              
2506:001 | DONE ins | na 16 16 | 006730 | 60          |                 rts                  
2507:000 | DONE wsp | na 16 16 |        |             |
2508:000 | DONE wsp | na 16 16 |        |             |
2509:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
2510:000 | DONE cmt | na 16 16 |        |             | ; POSTPONE ( -- ) X bytes / X cycles
2511:000 | DONE cmt | na 16 16 |        |             | ; Add the compilation behavior of a word to a new word at compile time. If the
2512:000 | DONE cmt | na 16 16 |        |             | ; word that follows it is immediate, include it so that it will be compiled when
2513:000 | DONE cmt | na 16 16 |        |             | ; the word being defined is itself used for a new word. Tricky, but very useful.
2514:000 | DONE cmt | na 16 16 |        |             | ; Because POSTPONE expects a word (not an xt) in the input stream (not on the
2515:000 | DONE cmt | na 16 16 |        |             | ; Data Stack). This means we cannot build words with "jsr xt_postpone, jsr
2516:000 | DONE cmt | na 16 16 |        |             | ; <word>" directly. This word uses tmp1
2517:000 | DONE lbl | na 16 16 | 006731 |             | xt_postpone                          
2518:000 | DONE cmt | na 16 16 |        |             |                 ; get name from string
2519:000 | DONE ins | na 16 16 | 006731 | 20 cc 66    |                 jsr 0066cc           ( addr n )
2520:000 | DONE wsp | na 16 16 |        |             |
2521:000 | DONE cmt | na 16 16 |        |             |                 ; if there is no word in stream, complain and abort
2522:000 | DONE ins | na 16 16 | 006734 | d0 06       |                 bne 00673c           
2523:000 | DONE ins | na 16 16 | 006736 | a9 49 74    |                 lda.# 007449         
2524:000 | DONE ins | na 16 16 | 006739 | 4c 98 6f    |                 jmp 006f98           
2525:000 | DONE wsp | na 16 16 |        |             |
2526:000 | DONE lbl | na 16 16 | 00673c |             | pp_got_word                          
2527:000 | DONE cmt | na 16 16 |        |             |                 ; convert to lower
2528:000 | DONE cmt | na 16 16 |        |             |                 ; TODO move this to FIND-NAME
2529:000 | DONE ins | na 16 16 | 00673c | 20 d1 6f    |                 jsr 006fd1           
2530:000 | DONE wsp | na 16 16 |        |             |
2531:000 | DONE ins | na 16 16 | 00673f | 20 a9 65    |                 jsr 0065a9           ( nt | 0 )
2532:000 | DONE wsp | na 16 16 |        |             |
2533:000 | DONE cmt | na 16 16 |        |             |                 ; if word is not in Dictionary, complain and abort
2534:000 | DONE ins | na 16 16 | 006742 | d0 03       |                 bne 006747           
2535:000 | DONE ins | na 16 16 | 006744 | a9 e6 74    |                 lda.# 0074e6         
2536:000 | DONE wsp | na 16 16 |        |             |
2537:000 | DONE lbl | na 16 16 | 006747 |             | pp_got_nt                            
2538:000 | DONE cmt | na 16 16 |        |             |                 ; Keep nt safe for later use
2539:000 | DONE ins | na 16 16 | 006747 | 84 16       |                 sty.d 000216         
2540:000 | DONE wsp | na 16 16 |        |             |
2541:000 | DONE cmt | na 16 16 |        |             |                 ; We need the xt instead of the nt for the actual compiling
2542:000 | DONE ins | na 16 16 | 006749 | 20 81 66    |                 jsr 006681           ( xt )
2543:000 | DONE wsp | na 16 16 |        |             |
2544:000 | DONE cmt | na 16 16 |        |             |                 ; See if this is an immediate word. This is easier with nt than
2545:000 | DONE cmt | na 16 16 |        |             |                 ; with xt
2546:000 | DONE ins | na 16 16 | 00674c | b2 16       |                 lda.di 000216        LDA (TMP1) - get status byte of word
2547:000 | DONE ins | na 16 16 | 00674e | eb          |                 xba                  flags are MSB
2548:000 | DONE ins | na 16 16 | 00674f | 29 02 00    |                 and.# IM             mask everything but Immediate bit
2549:000 | DONE ins | na 16 16 | 006752 | f0 03       |                 beq 006757           
2550:000 | DONE wsp | na 16 16 |        |             |
2551:000 | DONE cmt | na 16 16 |        |             |                 ; The word is immediate, so instead of executing it right now,
2552:000 | DONE cmt | na 16 16 |        |             |                 ; we compile it. xt is on the stack, so this is simple. The RTS
2553:000 | DONE cmt | na 16 16 |        |             |                 ; of COMPILE, takes us back to the original caller
2554:000 | DONE ins | na 16 16 | 006754 | 4c 32 64    |                 jmp 006432           JSR/RTS
2555:000 | DONE wsp | na 16 16 |        |             |
2556:000 | DONE lbl | na 16 16 | 006757 |             | pp_not_immediate                     
2557:000 | DONE cmt | na 16 16 |        |             |                 ; This is not an immediate word, so we enact "deffered
2558:000 | DONE cmt | na 16 16 |        |             |                 ; compilation" by including ' <NAME> COMPILE, which we do by
2559:000 | DONE cmt | na 16 16 |        |             |                 ; compiling the run-time routine of LITERAL, the xt itself, and
2560:000 | DONE cmt | na 16 16 |        |             |                 ; a subroutine jump to COMPILE,
2561:000 | DONE ins | na 16 16 | 006757 | f4 2e 66    |                 phe.# 00662e         PEA LITERAL_RT
2562:000 | DONE ins | na 16 16 | 00675a | 20 77 6f    |                 jsr 006f77           
2563:000 | DONE wsp | na 16 16 |        |             |
2564:000 | DONE cmt | na 16 16 |        |             |                 ; The xt is TOS. We can't use COMPILE, here because it might
2565:000 | DONE cmt | na 16 16 |        |             |                 ; decided to do something silly like compile it as a native word
2566:000 | DONE cmt | na 16 16 |        |             |                 ; and ruin everything
2567:000 | DONE ins | na 16 16 | 00675d | 20 a3 61    |                 jsr 0061a3           
2568:000 | DONE wsp | na 16 16 |        |             |
2569:000 | DONE cmt | na 16 16 |        |             |                 ; compile COMPILE, - it's RTS takes us back to original caller
2570:000 | DONE ins | na 16 16 | 006760 | f4 32 64    |                 phe.# 006432         
2571:000 | DONE ins | na 16 16 | 006763 | 4c 77 6f    |                 jmp 006f77           JSR/RTS
2572:000 | DONE wsp | na 16 16 |        |             |
2573:000 | DONE lbl | na 16 16 | 006766 |             | z_postpone                           ; never reached
2574:000 | DONE wsp | na 16 16 |        |             |
2575:000 | DONE wsp | na 16 16 |        |             |
2576:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
2577:000 | DONE cmt | na 16 16 |        |             | ; R@ "RFETCH" ( -- n ) (R: n -- n )  X bytes / X cycles
2578:000 | DONE cmt | na 16 16 |        |             | ; Get (not pull) Top of Return Stack. We follow Gforth in that this word is not
2579:000 | DONE cmt | na 16 16 |        |             | ; compiled only, because it can be interesting to know what the top of R is in
2580:000 | DONE cmt | na 16 16 |        |             | ; an interactive setting. However, this causes all kinds of problems if we try
2581:000 | DONE cmt | na 16 16 |        |             | ; to natively compile the word, so it does not get the NC flag even though it is
2582:000 | DONE cmt | na 16 16 |        |             | ; actually short enough to make that reasonable
2583:000 | DONE cmt | na 16 16 |        |             | ; TODO consider special case in COMPILE, see there
2584:000 | DONE lbl | na 16 16 | 006766 |             | xt_rfetch                            
2585:000 | DONE cmt | na 16 16 |        |             |                 ; get return address that is on top of the return stack
2586:000 | DONE ins | na 16 16 | 006766 | 68          |                 pla                  
2587:000 | DONE wsp | na 16 16 |        |             |
2588:000 | DONE ins | na 16 16 | 006767 | ca          |                 dex                  
2589:000 | DONE ins | na 16 16 | 006768 | ca          |                 dex                  
2590:000 | DONE ins | na 16 16 | 006769 | 94 00       |                 sty.dx 00            
2591:000 | DONE wsp | na 16 16 |        |             |
2592:000 | DONE ins | na 16 16 | 00676b | 7a          |                 ply                  get top of return stack and push copy back again
2593:000 | DONE ins | na 16 16 | 00676c | 5a          |                 phy                  
2594:000 | DONE wsp | na 16 16 |        |             |
2595:000 | DONE ins | na 16 16 | 00676d | 48          |                 pha                  restore the return address
2596:000 | DONE wsp | na 16 16 |        |             |
2597:000 | DONE lbl | na 16 16 | 00676e |             | z_rfetch                             
2597:001 | DONE ins | na 16 16 | 00676e | 60          |                 rts                  
2598:000 | DONE wsp | na 16 16 |        |             |
2599:000 | DONE wsp | na 16 16 |        |             |
2600:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
2601:000 | DONE cmt | na 16 16 |        |             | ; R> "FROMR" ( -- n ) (R: n -- )  7 bytes / 23 cycles
2602:000 | DONE cmt | na 16 16 |        |             | ; Move Top of Return Stack to Top of Data Stack. Remember we have to move the
2603:000 | DONE cmt | na 16 16 |        |             | ; jump address out of the way first.
2604:000 | DONE cmt | na 16 16 |        |             | ; TODO consider stripping PHA/PLA if natively compiled (see COMPILE,)
2605:000 | DONE lbl | na 16 16 | 00676f |             | xt_fromr                             
2606:000 | DONE cmt | na 16 16 |        |             |                 ; Rescue the address of the return jump that is currently top of
2607:000 | DONE cmt | na 16 16 |        |             |                 ; the Return Stack. If this word is natively compiled, this is
2608:000 | DONE cmt | na 16 16 |        |             |                 ; a waste of nine cycles
2609:000 | DONE ins | na 16 16 | 00676f | 68          |                 pla                  
2610:000 | DONE wsp | na 16 16 |        |             |
2611:000 | DONE ins | na 16 16 | 006770 | ca          |                 dex                  
2612:000 | DONE ins | na 16 16 | 006771 | ca          |                 dex                  
2613:000 | DONE ins | na 16 16 | 006772 | 94 00       |                 sty.dx 00            
2614:000 | DONE wsp | na 16 16 |        |             |
2615:000 | DONE ins | na 16 16 | 006774 | 7a          |                 ply                  the actual work
2616:000 | DONE wsp | na 16 16 |        |             |
2617:000 | DONE ins | na 16 16 | 006775 | 48          |                 pha                  get return address back
2618:000 | DONE wsp | na 16 16 |        |             |
2619:000 | DONE lbl | na 16 16 | 006776 |             | z_fromr                              
2619:001 | DONE ins | na 16 16 | 006776 | 60          |                 rts                  
2620:000 | DONE wsp | na 16 16 |        |             |
2621:000 | DONE wsp | na 16 16 |        |             |
2622:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
2623:000 | DONE cmt | na 16 16 |        |             | ; REFILL ( -- f ) X bytes / X cycles
2624:000 | DONE cmt | na 16 16 |        |             | ; "Attempt to fill the input buffer from the input source, returning a true flag
2625:000 | DONE cmt | na 16 16 |        |             | ; if successful. When the input source is the user input device, attempt to
2626:000 | DONE cmt | na 16 16 |        |             | ; receive input into the terminal input buffer. If successful, make the result
2627:000 | DONE cmt | na 16 16 |        |             | ; the input buffer, set >IN to zero, and return true. Receipt of a line
2628:000 | DONE cmt | na 16 16 |        |             | ; containing no characters is considered successful. If there is no input
2629:000 | DONE cmt | na 16 16 |        |             | ; available from the current input source, return false. When the input source
2630:000 | DONE cmt | na 16 16 |        |             | ; is a string from EVALUATE, return false and perform no other action."
2631:000 | DONE cmt | na 16 16 |        |             | ; See https://www.complang.tuwien.ac.at/forth/gforth/Docs-html/The-Input-Stream.html
2632:000 | DONE cmt | na 16 16 |        |             | ; and Conklin & Rather p. 156
2633:000 | DONE lbl | na 16 16 | 006777 |             | xt_refill                            
2634:000 | DONE dir | na 16 16 |        |             |         .!a16                        
2635:000 | DONE dir | na 16 16 |        |             |         .!xy16                       
2636:000 | DONE cmt | na 16 16 |        |             |                 ; We handle buffer switches here so that regardless of input
2637:000 | DONE cmt | na 16 16 |        |             |                 ; source, we have access to the previous input. This is not in
2638:000 | DONE cmt | na 16 16 |        |             |                 ; the ANSI specification in any way.
2639:000 | DONE ins | na 16 16 | 006777 | a5 0c       |                 lda.d 00020c         
2640:000 | DONE ins | na 16 16 | 006779 | 49 00 01    |                 eor.# 0100           flip 07d00 / 07c00
2641:000 | DONE ins | na 16 16 | 00677c | 85 0c       |                 sta.d 00020c         
2642:000 | DONE wsp | na 16 16 |        |             |
2643:000 | DONE ins | na 16 16 | 00677e | a5 0e       |                 lda.d 00020e         current length is now previous length
2644:000 | DONE ins | na 16 16 | 006780 | 85 10       |                 sta.d 000210         
2645:000 | DONE wsp | na 16 16 |        |             |
2646:000 | DONE cmt | na 16 16 |        |             |                 ; Get input source from SOURCE-ID. We don't have blocks in this
2647:000 | DONE cmt | na 16 16 |        |             |                 ; version, or else we would have to check BLK first. This is an
2648:000 | DONE cmt | na 16 16 |        |             |                 ; optimized version of a subroutine jump to SOURCE-ID
2649:000 | DONE ins | na 16 16 | 006782 | a5 0a       |                 lda.d 00020a         
2650:000 | DONE ins | na 16 16 | 006784 | d0 14       |                 bne 00679a           
2651:000 | DONE wsp | na 16 16 |        |             |
2652:000 | DONE cmt | na 16 16 |        |             |                 ; SOURCE-ID of zero means we're getting stuff from the keyboard
2653:000 | DONE cmt | na 16 16 |        |             |                 ; with ACCEPT.
2654:000 | DONE ins | na 16 16 | 006786 | ca          |                 dex                  push Data Stack down twice
2655:000 | DONE ins | na 16 16 | 006787 | ca          |                 dex                  
2656:000 | DONE ins | na 16 16 | 006788 | 94 00       |                 sty.dx 00            
2657:000 | DONE wsp | na 16 16 |        |             |
2658:000 | DONE ins | na 16 16 | 00678a | a5 0c       |                 lda.d 00020c         address of current input buffer NOS
2659:000 | DONE ins | na 16 16 | 00678c | ca          |                 dex                  
2660:000 | DONE ins | na 16 16 | 00678d | ca          |                 dex                  
2661:000 | DONE ins | na 16 16 | 00678e | 95 00       |                 sta.dx 00            
2662:000 | DONE wsp | na 16 16 |        |             |
2663:000 | DONE ins | na 16 16 | 006790 | a0 ff 00    |                 ldy.# 0000ff         
2664:000 | DONE wsp | na 16 16 |        |             |
2665:000 | DONE ins | na 16 16 | 006793 | 20 e5 62    |                 jsr 0062e5           ( addr n1 -- n2)
2666:000 | DONE wsp | na 16 16 |        |             |
2667:000 | DONE cmt | na 16 16 |        |             |                 ; ACCEPT returns the number of characters accepted, but we don't
2668:000 | DONE cmt | na 16 16 |        |             |                 ; need them. We just overwrite TOS this with the flag
2669:000 | DONE ins | na 16 16 | 006796 | a0 ff ff    |                 ldy.# 0ffff          
2670:000 | DONE wsp | na 16 16 |        |             |
2671:000 | DONE ins | na 16 16 | 006799 | 60          |                 rts                  
2672:000 | DONE wsp | na 16 16 |        |             |
2673:000 | DONE lbl | na 16 16 | 00679a |             | refill_src_not_kbd                   
2674:000 | DONE cmt | na 16 16 |        |             |                 ; If SOURCE-ID doesn't return a zero, it must be a string in
2675:000 | DONE cmt | na 16 16 |        |             |                 ; memory or a file (remember, no blocks in this version)
2676:000 | DONE ins | na 16 16 | 00679a | 1a          |                 inc.a                
2677:000 | DONE ins | na 16 16 | 00679b | d0 06       |                 bne 0067a3           
2678:000 | DONE wsp | na 16 16 |        |             |
2679:000 | DONE cmt | na 16 16 |        |             |                 ; Simply return FALSE flag as per specification
2680:000 | DONE ins | na 16 16 | 00679d | ca          |                 dex                  
2681:000 | DONE ins | na 16 16 | 00679e | ca          |                 dex                  
2682:000 | DONE ins | na 16 16 | 00679f | 94 00       |                 sty.dx 00            
2683:000 | DONE ins | na 16 16 | 0067a1 | a8          |                 tay                  
2684:000 | DONE wsp | na 16 16 |        |             |
2685:000 | DONE ins | na 16 16 | 0067a2 | 60          |                 rts                  
2686:000 | DONE wsp | na 16 16 |        |             |
2687:000 | DONE lbl | na 16 16 | 0067a3 |             | refill_source_is_not_string          
2688:000 | DONE cmt | na 16 16 |        |             |                 ; Since we don't have blocks, this must mean that we are trying
2689:000 | DONE cmt | na 16 16 |        |             |                 ; to read from a file. However, we don't have files yet, so we
2690:000 | DONE cmt | na 16 16 |        |             |                 ; report an error and jump to ABORT.
2691:000 | DONE ins | na 16 16 | 0067a3 | a9 9e 74    |                 lda.# 00749e         
2692:000 | DONE ins | na 16 16 | 0067a6 | 4c 98 6f    |                 jmp 006f98           
2693:000 | DONE wsp | na 16 16 |        |             |
2694:000 | DONE lbl | na 16 16 | 0067a9 |             | z_refill                             
2694:001 | DONE ins | na 16 16 | 0067a9 | 60          |                 rts                  dummy for compiling
2695:000 | DONE wsp | na 16 16 |        |             |
2696:000 | DONE wsp | na 16 16 |        |             |
2697:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
2698:000 | DONE cmt | na 16 16 |        |             | ; ROT ( a b c -- b c a ) X bytes / X cycles
2699:000 | DONE cmt | na 16 16 |        |             | ; Rotate the top three entries downwards (third entry becomes first)
2700:000 | DONE cmt | na 16 16 |        |             | ; Remember this with the "R" for "revolution": The bottom entry becomes the top.
2701:000 | DONE lbl | na 16 16 | 0067aa |             | xt_rot                               
2702:000 | DONE dir | na 16 16 |        |             |         .!a16                        
2703:000 | DONE dir | na 16 16 |        |             |         .!xy16                       
2704:000 | DONE ins | na 16 16 | 0067aa | b5 00       |                 lda.dx 00            save b
2705:000 | DONE ins | na 16 16 | 0067ac | 94 00       |                 sty.dx 00            move c to NOS
2706:000 | DONE ins | na 16 16 | 0067ae | b4 02       |                 ldy.dx 02            move a to TOS
2707:000 | DONE ins | na 16 16 | 0067b0 | 95 02       |                 sta.dx 02            save b as 3OS
2708:000 | DONE wsp | na 16 16 |        |             |
2709:000 | DONE lbl | na 16 16 | 0067b2 |             | z_rot                                
2709:001 | DONE ins | na 16 16 | 0067b2 | 60          |                 rts                  
2710:000 | DONE wsp | na 16 16 |        |             |
2711:000 | DONE wsp | na 16 16 |        |             |
2712:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
2713:000 | DONE cmt | na 16 16 |        |             | ; S" "SQUOTE" ( "string" -- addr u ) X bytes / X cycles
2714:000 | DONE cmt | na 16 16 |        |             | ; Store address and length of string given, returning ( addr u ). ANSI core
2715:000 | DONE cmt | na 16 16 |        |             | ; claims this is compile-only, but the file set expands it to be interpreted, so
2716:000 | DONE cmt | na 16 16 |        |             | ; it is a state-sensitive word, which are evil. This can also be realized as
2717:000 | DONE cmt | na 16 16 |        |             | ; : S" [CHAR] " PARSE POSTPONE SLITERAL ; IMMEDIATE  but it is used so much we
2718:000 | DONE cmt | na 16 16 |        |             | ; want it in code
2719:000 | DONE lbl | na 16 16 | 0067b3 |             | xt_squote                            
2720:000 | DONE cmt | na 16 16 |        |             |                 ; we use PARSE to find the end of the sting. If the string is
2721:000 | DONE cmt | na 16 16 |        |             |                 ; empty, we don't complain, following Gforth's behavior
2722:000 | DONE ins | na 16 16 | 0067b3 | ca          |                 dex                  
2723:000 | DONE ins | na 16 16 | 0067b4 | ca          |                 dex                  
2724:000 | DONE ins | na 16 16 | 0067b5 | 94 00       |                 sty.dx 00            
2725:000 | DONE wsp | na 16 16 |        |             |
2726:000 | DONE ins | na 16 16 | 0067b7 | a0 22 00    |                 ldy.# 0022           ASCII for " in hex
2727:000 | DONE ins | na 16 16 | 0067ba | 20 fe 66    |                 jsr 0066fe           Returns ( addr u ) of string
2728:000 | DONE wsp | na 16 16 |        |             |
2729:000 | DONE cmt | na 16 16 |        |             |                 ; What happens now depends on the state. If we are compiling, we
2730:000 | DONE cmt | na 16 16 |        |             |                 ; include a subroutine jump to SLITERAL to save the string. If
2731:000 | DONE cmt | na 16 16 |        |             |                 ; we are interpreting, we're done
2732:000 | DONE ins | na 16 16 | 0067bd | a5 14       |                 lda.d 000214         
2733:000 | DONE ins | na 16 16 | 0067bf | f0 03       |                 beq 0067c4           if we're interpreting, we're done
2734:000 | DONE wsp | na 16 16 |        |             |
2735:000 | DONE cmt | na 16 16 |        |             |                 ; We're compiling, so we need SLITERAL. We use it's RTS while
2736:000 | DONE cmt | na 16 16 |        |             |                 ; we're at it
2737:000 | DONE ins | na 16 16 | 0067c1 | 4c d5 67    |                 jmp 0067d5           JSR/RTS
2738:000 | DONE wsp | na 16 16 |        |             |
2739:000 | DONE lbl | na 16 16 | 0067c4 |             | z_squote                             
2739:001 | DONE ins | na 16 16 | 0067c4 | 60          |                 rts                  
2740:000 | DONE wsp | na 16 16 |        |             |
2741:000 | DONE wsp | na 16 16 |        |             |
2742:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
2743:000 | DONE cmt | na 16 16 |        |             | ; S>D ( n -- d ) 15 bytes / X cycles
2744:000 | DONE cmt | na 16 16 |        |             | ; Convert a single cell number to double cells, conserving the sign
2745:000 | DONE lbl | na 16 16 | 0067c5 |             | xt_stod                              
2746:000 | DONE ins | na 16 16 | 0067c5 | ca          |                 dex                  make room on stack
2747:000 | DONE ins | na 16 16 | 0067c6 | ca          |                 dex                  
2748:000 | DONE ins | na 16 16 | 0067c7 | 94 00       |                 sty.dx 00            
2749:000 | DONE wsp | na 16 16 |        |             |
2750:000 | DONE ins | na 16 16 | 0067c9 | 98          |                 tya                  force sign check
2751:000 | DONE ins | na 16 16 | 0067ca | 10 05       |                 bpl 0067d1           
2752:000 | DONE wsp | na 16 16 |        |             |
2753:000 | DONE cmt | na 16 16 |        |             |                 ; negative number, extend sign
2754:000 | DONE ins | na 16 16 | 0067cc | a0 ff ff    |                 ldy.# 0ffff          
2755:000 | DONE ins | na 16 16 | 0067cf | 80 03       |                 bra 0067d4           
2756:000 | DONE wsp | na 16 16 |        |             |
2757:000 | DONE lbl | na 16 16 | 0067d1 |             | stod_pos                             
2758:000 | DONE cmt | na 16 16 |        |             |                 ; positive number
2759:000 | DONE ins | na 16 16 | 0067d1 | a0 00 00    |                 ldy.# 0000           fall through
2760:000 | DONE wsp | na 16 16 |        |             |
2761:000 | DONE lbl | na 16 16 | 0067d4 |             | z_stod                               
2761:001 | DONE ins | na 16 16 | 0067d4 | 60          |                 rts                  
2762:000 | DONE wsp | na 16 16 |        |             |
2763:000 | DONE wsp | na 16 16 |        |             |
2764:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
2765:000 | DONE cmt | na 16 16 |        |             | ; SLITERAL ( addr u -- ) ( -- addr u ) X bytes / X cycles
2766:000 | DONE cmt | na 16 16 |        |             | ; At compile time, store string, at runtime, return address and length of string
2767:000 | DONE cmt | na 16 16 |        |             | ; on the Data Stack. Used for S" among other things. This routine uses tmp1,
2768:000 | DONE cmt | na 16 16 |        |             | ; tmp2
2769:000 | DONE lbl | na 16 16 | 0067d5 |             | xt_sliteral                          
2770:000 | DONE dir | na 16 16 |        |             |         .!a16                        
2771:000 | DONE cmt | na 16 16 |        |             |                 ; We can't assume that ( addr u ) of the current string is in
2772:000 | DONE cmt | na 16 16 |        |             |                 ; a stable area, so we first have to move them to safety. Since
2773:000 | DONE cmt | na 16 16 |        |             |                 ; CP points to where the interpreter expects to be able to
2774:000 | DONE cmt | na 16 16 |        |             |                 ; continue in the code, we have to jump over the string. We use
2775:000 | DONE cmt | na 16 16 |        |             |                 ; JMP instead of BRA so we can use longer strings
2776:000 | DONE ins | na 16 16 | 0067d5 | b5 00       |                 lda.dx 00            Address of string is NOS
2777:000 | DONE ins | na 16 16 | 0067d7 | 85 16       |                 sta.d 000216         
2778:000 | DONE ins | na 16 16 | 0067d9 | 84 18       |                 sty.d 000218         keep copy of string length
2779:000 | DONE wsp | na 16 16 |        |             |
2780:000 | DONE ins | na 16 16 | 0067db | e2 20       |                 sep 20               
2780:001 | DONE ctl | na  8 16 |        |             |         .!a8
2781:000 | DONE ins | na  8 16 | 0067dd | a9 4c       |                 lda.# 04c            opcode for JMP
2782:000 | DONE ins | na  8 16 | 0067df | 92 00       |                 sta.di 000200        STA (CP)
2783:000 | DONE ins | na  8 16 | 0067e1 | c2 20       |                 rep 20               
2783:001 | DONE ctl | na 16 16 |        |             |         .!a16
2784:000 | DONE ins | na 16 16 | 0067e3 | e6 00       |                 inc.d 000200         
2785:000 | DONE wsp | na 16 16 |        |             |
2786:000 | DONE cmt | na 16 16 |        |             |                 ; Our jump target is CP + 2 (for the length of the jump
2787:000 | DONE cmt | na 16 16 |        |             |                 ; instruction itself ) + the length of the string
2788:000 | DONE ins | na 16 16 | 0067e5 | a5 18       |                 lda.d 000218         string length
2789:000 | DONE ins | na 16 16 | 0067e7 | 1a          |                 inc.a                
2790:000 | DONE ins | na 16 16 | 0067e8 | 1a          |                 inc.a                
2791:000 | DONE wsp | na 16 16 |        |             |
2792:000 | DONE ins | na 16 16 | 0067e9 | 18          |                 clc                  
2793:000 | DONE ins | na 16 16 | 0067ea | 65 00       |                 adc.d 000200         current address
2794:000 | DONE ins | na 16 16 | 0067ec | 92 00       |                 sta.di 000200        store jump target
2795:000 | DONE wsp | na 16 16 |        |             |
2796:000 | DONE cmt | na 16 16 |        |             |                 ; update CP to move past JMP instruction
2797:000 | DONE ins | na 16 16 | 0067ee | e6 00       |                 inc.d 000200         
2798:000 | DONE ins | na 16 16 | 0067f0 | e6 00       |                 inc.d 000200         
2799:000 | DONE wsp | na 16 16 |        |             |
2800:000 | DONE cmt | na 16 16 |        |             |                 ; now we can safely copy the code
2801:000 | DONE ins | na 16 16 | 0067f2 | 88          |                 dey                  last offset is one less than length
2802:000 | DONE ins | na 16 16 | 0067f3 | e2 20       |                 sep 20               
2802:001 | DONE ctl | na  8 16 |        |             |         .!a8
2803:000 | DONE lbl | na  8 16 | 0067f5 |             | sl_loop                              
2804:000 | DONE ins | na  8 16 | 0067f5 | b1 16       |                 lda.diy 000216       LDA (TMP1),Y
2805:000 | DONE ins | na  8 16 | 0067f7 | 91 00       |                 sta.diy 000200       STA (CP),Y
2806:000 | DONE ins | na  8 16 | 0067f9 | 88          |                 dey                  
2807:000 | DONE ins | na  8 16 | 0067fa | 10 f9       |                 bpl 0067f5           
2808:000 | DONE wsp | na  8 16 |        |             |
2809:000 | DONE ins | na  8 16 | 0067fc | c2 20       |                 rep 20               
2809:001 | DONE ctl | na 16 16 |        |             |         .!a16
2810:000 | DONE cmt | na 16 16 |        |             |                 ; keep old CP as new address of string
2811:000 | DONE ins | na 16 16 | 0067fe | a5 00       |                 lda.d 000200         
2812:000 | DONE ins | na 16 16 | 006800 | 85 16       |                 sta.d 000216         overwrites original address
2813:000 | DONE wsp | na 16 16 |        |             |
2814:000 | DONE cmt | na 16 16 |        |             |                 ; update CP
2815:000 | DONE ins | na 16 16 | 006802 | 18          |                 clc                  
2816:000 | DONE ins | na 16 16 | 006803 | 65 18       |                 adc.d 000218         length of string
2817:000 | DONE ins | na 16 16 | 006805 | 85 00       |                 sta.d 000200         
2818:000 | DONE wsp | na 16 16 |        |             |
2819:000 | DONE cmt | na 16 16 |        |             |                 ; Compile a subroutine jump to the runtime of SLITERAL that
2820:000 | DONE cmt | na 16 16 |        |             |                 ; pushes the new ( addr u ) pair to the Data Stack. When we're
2821:000 | DONE cmt | na 16 16 |        |             |                 ; done, the code will look like this:
2822:000 | DONE cmt | na 16 16 |        |             |                 ;
2823:000 | DONE cmt | na 16 16 |        |             |                 ; xt -->    jmp a
2824:000 | DONE cmt | na 16 16 |        |             |                 ;           <string data bytes>
2825:000 | DONE cmt | na 16 16 |        |             |                 ;  a -->    jsr sliteral_rt
2826:000 | DONE cmt | na 16 16 |        |             |                 ;           <string address>
2827:000 | DONE cmt | na 16 16 |        |             |                 ;           <string length>
2828:000 | DONE cmt | na 16 16 |        |             |                 ; rts -->
2829:000 | DONE cmt | na 16 16 |        |             |                 ;
2830:000 | DONE cmt | na 16 16 |        |             |                 ; This means we'll have to adjust the return address for two
2831:000 | DONE cmt | na 16 16 |        |             |                 ; cells, not just one
2832:000 | DONE ins | na 16 16 | 006807 | f4 20 68    |                 phe.# 006820         
2833:000 | DONE ins | na 16 16 | 00680a | 20 77 6f    |                 jsr 006f77           
2834:000 | DONE wsp | na 16 16 |        |             |
2835:000 | DONE cmt | na 16 16 |        |             |                 ; We want to have the addr end up as NOS and the length as TOS,
2836:000 | DONE cmt | na 16 16 |        |             |                 ; so we store the address first
2837:000 | DONE ins | na 16 16 | 00680d | a5 16       |                 lda.d 000216         new address of string
2838:000 | DONE ins | na 16 16 | 00680f | 48          |                 pha                  
2839:000 | DONE ins | na 16 16 | 006810 | 20 72 6f    |                 jsr 006f72           
2840:000 | DONE wsp | na 16 16 |        |             |
2841:000 | DONE ins | na 16 16 | 006813 | a5 18       |                 lda.d 000218         
2842:000 | DONE ins | na 16 16 | 006815 | 48          |                 pha                  
2843:000 | DONE ins | na 16 16 | 006816 | 20 72 6f    |                 jsr 006f72           
2844:000 | DONE wsp | na 16 16 |        |             |
2845:000 | DONE cmt | na 16 16 |        |             |                 ; all done, clean up and leave
2846:000 | DONE ins | na 16 16 | 006819 | b4 02       |                 ldy.dx 02            2DROP
2847:000 | DONE ins | na 16 16 | 00681b | e8          |                 inx                  
2848:000 | DONE ins | na 16 16 | 00681c | e8          |                 inx                  
2849:000 | DONE ins | na 16 16 | 00681d | e8          |                 inx                  
2850:000 | DONE ins | na 16 16 | 00681e | e8          |                 inx                  
2851:000 | DONE wsp | na 16 16 |        |             |
2852:000 | DONE lbl | na 16 16 | 00681f |             | z_sliteral                           
2852:001 | DONE ins | na 16 16 | 00681f | 60          |                 rts                  
2853:000 | DONE wsp | na 16 16 |        |             |
2854:000 | DONE lbl | na 16 16 | 006820 |             | sliteral_rt                          
2855:000 | DONE cmt | na 16 16 |        |             |                 ; Run time behaviour of SLITERAL: Push ( addr u ) of string to
2856:000 | DONE cmt | na 16 16 |        |             |                 ; the Data Stack. We arrive here with the return address as the
2857:000 | DONE cmt | na 16 16 |        |             |                 ; top of Return Stack, which points to the address of the string
2858:000 | DONE wsp | na 16 16 |        |             |
2859:000 | DONE cmt | na 16 16 |        |             |                 ; Make room on stack, which also frees Y for other use
2860:000 | DONE ins | na 16 16 | 006820 | ca          |                 dex                  
2861:000 | DONE ins | na 16 16 | 006821 | ca          |                 dex                  
2862:000 | DONE ins | na 16 16 | 006822 | ca          |                 dex                  
2863:000 | DONE ins | na 16 16 | 006823 | ca          |                 dex                  
2864:000 | DONE ins | na 16 16 | 006824 | 94 02       |                 sty.dx 02            
2865:000 | DONE wsp | na 16 16 |        |             |
2866:000 | DONE cmt | na 16 16 |        |             |                 ; Get the address of the string address off the stack and
2867:000 | DONE cmt | na 16 16 |        |             |                 ; increase by one because of the RTS mechanics
2868:000 | DONE ins | na 16 16 | 006826 | 7a          |                 ply                  
2869:000 | DONE ins | na 16 16 | 006827 | c8          |                 iny                  
2870:000 | DONE wsp | na 16 16 |        |             |
2871:000 | DONE ins | na 16 16 | 006828 | b9 00 00    |                 lda.y 0000           LDA $0000,Y
2872:000 | DONE ins | na 16 16 | 00682b | 95 00       |                 sta.dx 00            save string address as NOS
2873:000 | DONE ins | na 16 16 | 00682d | c8          |                 iny                  
2874:000 | DONE ins | na 16 16 | 00682e | c8          |                 iny                  
2875:000 | DONE ins | na 16 16 | 00682f | b9 00 00    |                 lda.y 0000           get length of string, will be TOS ...
2876:000 | DONE wsp | na 16 16 |        |             |
2877:000 | DONE ins | na 16 16 | 006832 | c8          |                 iny                  ... first, though, repair return jump
2878:000 | DONE ins | na 16 16 | 006833 | 5a          |                 phy                  
2879:000 | DONE wsp | na 16 16 |        |             |
2880:000 | DONE ins | na 16 16 | 006834 | a8          |                 tay                  TOS is now length of string
2881:000 | DONE wsp | na 16 16 |        |             |
2882:000 | DONE ins | na 16 16 | 006835 | 60          |                 rts                  
2883:000 | DONE wsp | na 16 16 |        |             |
2884:000 | DONE wsp | na 16 16 |        |             |
2885:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
2886:000 | DONE cmt | na 16 16 |        |             | ; SOURCE ( -- addr u ) 12 bytes / X cycles
2887:000 | DONE cmt | na 16 16 |        |             | ; Return the address and size of current input buffer. Replaces TIB and #TIB in
2888:000 | DONE cmt | na 16 16 |        |             | ; ANSI Forth
2889:000 | DONE wsp | na 16 16 |        |             |
2890:000 | DONE lbl | na 16 16 | 006836 |             | xt_source                            
2891:000 | DONE ins | na 16 16 | 006836 | ca          |                 dex                  make room on Data Stack
2892:000 | DONE ins | na 16 16 | 006837 | ca          |                 dex                  
2893:000 | DONE ins | na 16 16 | 006838 | ca          |                 dex                  
2894:000 | DONE ins | na 16 16 | 006839 | ca          |                 dex                  
2895:000 | DONE ins | na 16 16 | 00683a | 94 02       |                 sty.dx 02            
2896:000 | DONE wsp | na 16 16 |        |             |
2897:000 | DONE ins | na 16 16 | 00683c | a5 0c       |                 lda.d 00020c         address of current input buffer as NOS
2898:000 | DONE ins | na 16 16 | 00683e | 95 00       |                 sta.dx 00            
2899:000 | DONE wsp | na 16 16 |        |             |
2900:000 | DONE ins | na 16 16 | 006840 | a4 0e       |                 ldy.d 00020e         length of current input buffer as TOS
2901:000 | DONE wsp | na 16 16 |        |             |
2902:000 | DONE lbl | na 16 16 | 006842 |             | z_source                             
2902:001 | DONE ins | na 16 16 | 006842 | 60          |                 rts                  
2903:000 | DONE wsp | na 16 16 |        |             |
2904:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
2905:000 | DONE cmt | na 16 16 |        |             | ; SOURCE-ID ( -- n ) 6 bytes / 13 cycles
2906:000 | DONE cmt | na 16 16 |        |             | ; Identify the input source unless it is a block (s. Conklin & Rather p. 156).
2907:000 | DONE cmt | na 16 16 |        |             | ; Since we don't have blocks (yet), this will give the input source: 0 is
2908:000 | DONE cmt | na 16 16 |        |             | ; keyboard, -1 (0ffff) is character string, and a text file gives the fileid.
2909:000 | DONE lbl | na 16 16 | 006843 |             | xt_source-id                         
2910:000 | DONE dir | na 16 16 |        |             |         .!xy16                       
2911:000 | DONE ins | na 16 16 | 006843 | ca          |                 dex                  
2912:000 | DONE ins | na 16 16 | 006844 | ca          |                 dex                  
2913:000 | DONE ins | na 16 16 | 006845 | 94 00       |                 sty.dx 00            
2914:000 | DONE ins | na 16 16 | 006847 | a4 0a       |                 ldy.d 00020a         
2915:000 | DONE wsp | na 16 16 |        |             |
2916:000 | DONE lbl | na 16 16 | 006849 |             | z_source-id                          
2916:001 | DONE ins | na 16 16 | 006849 | 60          |                 rts                  
2917:000 | DONE wsp | na 16 16 |        |             |
2918:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
2919:000 | DONE cmt | na 16 16 |        |             | ; SPACE ( -- ) X bytes / X cycles
2920:000 | DONE cmt | na 16 16 |        |             | ; Print one ASCII space character
2921:000 | DONE cmt | na 16 16 |        |             | ; TODO change to call EMIT
2922:000 | DONE lbl | na 16 16 | 00684a |             | xt_space                             
2923:000 | DONE ins | na 16 16 | 00684a | a9 20 00    |                 lda.# AscSP          
2924:000 | DONE ins | na 16 16 | 00684d | 20 36 60    |                 jsr 006036           
2925:000 | DONE dir | na 16 16 |        |             |         .!a16                        
2926:000 | DONE wsp | na 16 16 |        |             |
2927:000 | DONE lbl | na 16 16 | 006850 |             | z_space                              
2927:001 | DONE ins | na 16 16 | 006850 | 60          |                 rts                  
2928:000 | DONE wsp | na 16 16 |        |             |
2929:000 | DONE wsp | na 16 16 |        |             |
2930:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
2931:000 | DONE cmt | na 16 16 |        |             | ; SPACES ( u -- ) 12 bytes / X cycles
2932:000 | DONE cmt | na 16 16 |        |             | ; Print u spaces. Calls SPACE, because this is probably interactive and humans
2933:000 | DONE cmt | na 16 16 |        |             | ; are slow enough we don't have to care about speed.
2934:000 | DONE lbl | na 16 16 | 006851 |             | xt_spaces                            
2935:000 | DONE dir | na 16 16 |        |             |         .!a16                        
2936:000 | DONE dir | na 16 16 |        |             |         .!xy16                       
2937:000 | DONE lbl | na 16 16 | 006851 |             | @                                    
2938:000 | DONE ins | na 16 16 | 006851 | 88          |                 dey                  this also handles case u=0
2939:000 | DONE ins | na 16 16 | 006852 | 30 05       |                 bmi 006859           
2940:000 | DONE wsp | na 16 16 |        |             |
2941:000 | DONE ins | na 16 16 | 006854 | 20 4a 68    |                 jsr 00684a           
2942:000 | DONE ins | na 16 16 | 006857 | 80 f8       |                 bra 006851           
2943:000 | DONE wsp | na 16 16 |        |             |
2944:000 | DONE lbl | na 16 16 | 006859 |             | spaces_done                          
2945:000 | DONE ins | na 16 16 | 006859 | b4 00       |                 ldy.dx 00            DROP
2946:000 | DONE ins | na 16 16 | 00685b | e8          |                 inx                  
2947:000 | DONE ins | na 16 16 | 00685c | e8          |                 inx                  
2948:000 | DONE wsp | na 16 16 |        |             |
2949:000 | DONE lbl | na 16 16 | 00685d |             | z_spaces                             
2949:001 | DONE ins | na 16 16 | 00685d | 60          |                 rts                  
2950:000 | DONE wsp | na 16 16 |        |             |
2951:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
2952:000 | DONE cmt | na 16 16 |        |             | ; STAR ( n n -- n ) 16*16 -> 16  X bytes / X cycles
2953:000 | DONE cmt | na 16 16 |        |             | ; Multiply two signed 16 bit numbers, returning a 16 bit result. This is nothing
2954:000 | DONE cmt | na 16 16 |        |             | ; more than UM* DROP
2955:000 | DONE lbl | na 16 16 | 00685e |             | xt_star                              
2956:000 | DONE ins | na 16 16 | 00685e | 20 a6 68    |                 jsr 0068a6           
2957:000 | DONE ins | na 16 16 | 006861 | b4 00       |                 ldy.dx 00            DROP
2958:000 | DONE ins | na 16 16 | 006863 | e8          |                 inx                  
2959:000 | DONE ins | na 16 16 | 006864 | e8          |                 inx                  
2960:000 | DONE wsp | na 16 16 |        |             |
2961:000 | DONE lbl | na 16 16 | 006865 |             | z_star                               
2961:001 | DONE ins | na 16 16 | 006865 | 60          |                 rts                  
2962:000 | DONE wsp | na 16 16 |        |             |
2963:000 | DONE wsp | na 16 16 |        |             |
2964:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
2965:000 | DONE cmt | na 16 16 |        |             | ; STATE ( -- addr ) 7 bytes / 12 cycles
2966:000 | DONE cmt | na 16 16 |        |             | ; Return the address of a cell containing the compilation-state flag. STATE
2967:000 | DONE cmt | na 16 16 |        |             | ; is true when in compilation state, false otherwise. STATE should not be
2968:000 | DONE cmt | na 16 16 |        |             | ; changed directly by the user; see
2969:000 | DONE cmt | na 16 16 |        |             | ; http://forth.sourceforge.net/standard/dpans/dpans6.htm#6.1.2250
2970:000 | DONE lbl | na 16 16 | 006866 |             | xt_state                             
2971:000 | DONE dir | na 16 16 |        |             |         .!xy16                       
2972:000 | DONE ins | na 16 16 | 006866 | ca          |                 dex                  
2973:000 | DONE ins | na 16 16 | 006867 | ca          |                 dex                  
2974:000 | DONE ins | na 16 16 | 006868 | 94 00       |                 sty.dx 00            
2975:000 | DONE ins | na 16 16 | 00686a | a0 14 02    |                 ldy.# 000214         
2976:000 | DONE wsp | na 16 16 |        |             |
2977:000 | DONE lbl | na 16 16 | 00686d |             | z_state                              
2977:001 | DONE ins | na 16 16 | 00686d | 60          |                 rts                  
2978:000 | DONE wsp | na 16 16 |        |             |
2979:000 | DONE wsp | na 16 16 |        |             |
2980:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
2981:000 | DONE cmt | na 16 16 |        |             | ; SWAP ( n m -- m n ) 5 bytes / 12 cycles
2982:000 | DONE cmt | na 16 16 |        |             | ; Exchange TOS with NOS. We don't check if there are enough elements on the Data
2983:000 | DONE cmt | na 16 16 |        |             | ; Stack; underflow errors will go undetected and return garbage.
2984:000 | DONE lbl | na 16 16 | 00686e |             | xt_swap                              
2985:000 | DONE dir | na 16 16 |        |             |         .!a16                        
2986:000 | DONE dir | na 16 16 |        |             |         .!xy16                       
2987:000 | DONE ins | na 16 16 | 00686e | b5 00       |                 lda.dx 00            
2988:000 | DONE ins | na 16 16 | 006870 | 94 00       |                 sty.dx 00            
2989:000 | DONE ins | na 16 16 | 006872 | a8          |                 tay                  
2990:000 | DONE wsp | na 16 16 |        |             |
2991:000 | DONE lbl | na 16 16 | 006873 |             | z_swap                               
2991:001 | DONE ins | na 16 16 | 006873 | 60          |                 rts                  
2992:000 | DONE wsp | na 16 16 |        |             |
2993:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
2994:000 | DONE cmt | na 16 16 |        |             | ; TRUE ( -- f ) 7 bytes / 12 cycles
2995:000 | DONE cmt | na 16 16 |        |             | ; Pushes value $FFFF for Forth true on Data Stack
2996:000 | DONE lbl | na 16 16 | 006874 |             | xt_true                              
2997:000 | DONE dir | na 16 16 |        |             |         .!a16                        
2998:000 | DONE dir | na 16 16 |        |             |         .!xy16                       
2999:000 | DONE ins | na 16 16 | 006874 | ca          |                 dex                  
3000:000 | DONE ins | na 16 16 | 006875 | ca          |                 dex                  
3001:000 | DONE ins | na 16 16 | 006876 | 94 00       |                 sty.dx 00            
3002:000 | DONE ins | na 16 16 | 006878 | a0 ff ff    |                 ldy.# 0ffff          
3003:000 | DONE wsp | na 16 16 |        |             |
3004:000 | DONE lbl | na 16 16 | 00687b |             | z_true                               
3004:001 | DONE ins | na 16 16 | 00687b | 60          |                 rts                  
3005:000 | DONE wsp | na 16 16 |        |             |
3006:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
3007:000 | DONE cmt | na 16 16 |        |             | ; TUCK ( n m -- m n m ) 8 bytes / 19 cycles
3008:000 | DONE cmt | na 16 16 |        |             | ; Insert TOS below NOS. We do not check if there are enough elements on the Data
3009:000 | DONE cmt | na 16 16 |        |             | ; Stack, underflow will go undetected and return garbage.
3010:000 | DONE lbl | na 16 16 | 00687c |             | xt_tuck                              
3011:000 | DONE dir | na 16 16 |        |             |         .!a16                        
3012:000 | DONE dir | na 16 16 |        |             |         .!xy16                       
3013:000 | DONE ins | na 16 16 | 00687c | ca          |                 dex                  
3014:000 | DONE ins | na 16 16 | 00687d | ca          |                 dex                  
3015:000 | DONE ins | na 16 16 | 00687e | b5 02       |                 lda.dx 2             
3016:000 | DONE ins | na 16 16 | 006880 | 95 00       |                 sta.dx 0             
3017:000 | DONE ins | na 16 16 | 006882 | 94 02       |                 sty.dx 2             
3018:000 | DONE wsp | na 16 16 |        |             |
3019:000 | DONE lbl | na 16 16 | 006884 |             | z_tuck                               
3019:001 | DONE ins | na 16 16 | 006884 | 60          |                 rts                  
3020:000 | DONE wsp | na 16 16 |        |             |
3021:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
3022:000 | DONE cmt | na 16 16 |        |             | ; TYPE ( addr u -- ) 23+ bytes / X cycles
3023:000 | DONE cmt | na 16 16 |        |             | ; Print character string if u is not 0. We restrict all calls to put_chr and
3024:000 | DONE cmt | na 16 16 |        |             | ; get_chr to make porting easier.  We call put_chr here directly instead of
3025:000 | DONE cmt | na 16 16 |        |             | ; going through EMIT because EMIT will later have a PAUSE statement for
3026:000 | DONE cmt | na 16 16 |        |             | ; multitasking and we probably don't want to PAUSE after every character.
3027:000 | DONE cmt | na 16 16 |        |             | ; However, we'll make a final decision about that when multitasking is up and
3028:000 | DONE cmt | na 16 16 |        |             | ; running.
3029:000 | DONE lbl | na 16 16 | 006885 |             | xt_type                              
3030:000 | DONE dir | na 16 16 |        |             |         .!a16                        
3031:000 | DONE dir | na 16 16 |        |             |         .!xy16                       
3032:000 | DONE cmt | na 16 16 |        |             |                 ; just leave if u is zero (empty string)
3033:000 | DONE ins | na 16 16 | 006885 | 98          |                 tya                  force flag check of TOS
3034:000 | DONE ins | na 16 16 | 006886 | f0 17       |                 beq 00689f           
3035:000 | DONE wsp | na 16 16 |        |             |
3036:000 | DONE ins | na 16 16 | 006888 | b5 00       |                 lda.dx 00            get address from NOS
3037:000 | DONE ins | na 16 16 | 00688a | 85 16       |                 sta.d 000216         
3038:000 | DONE ins | na 16 16 | 00688c | 84 18       |                 sty.d 000218         number of chars is TOS
3039:000 | DONE ins | na 16 16 | 00688e | a0 00 00    |                 ldy.# 0000           
3040:000 | DONE ins | na 16 16 | 006891 | e2 20       |                 sep 20               
3040:001 | DONE ctl | na  8 16 |        |             |         .!a8
3041:000 | DONE lbl | na  8 16 | 006893 |             | type_loop                            
3042:000 | DONE ins | na  8 16 | 006893 | b1 16       |                 lda.diy 000216       LDA (TMP1),Y
3043:000 | DONE ins | na  8 16 | 006895 | 20 36 60    |                 jsr 006036           
3044:000 | DONE ins | na  8 16 | 006898 | c8          |                 iny                  
3045:000 | DONE ins | na  8 16 | 006899 | c4 18       |                 cpy.d 000218         
3046:000 | DONE ins | na  8 16 | 00689b | d0 f6       |                 bne 006893           
3047:000 | DONE wsp | na  8 16 |        |             |
3048:000 | DONE ins | na  8 16 | 00689d | c2 20       |                 rep 20               
3048:001 | DONE ctl | na 16 16 |        |             |         .!a16
3049:000 | DONE lbl | na 16 16 | 00689f |             | type_done                            
3050:000 | DONE cmt | na 16 16 |        |             |                 ; clear stack
3051:000 | DONE ins | na 16 16 | 00689f | b4 02       |                 ldy.dx 02            
3052:000 | DONE ins | na 16 16 | 0068a1 | e8          |                 inx                  
3053:000 | DONE ins | na 16 16 | 0068a2 | e8          |                 inx                  
3054:000 | DONE ins | na 16 16 | 0068a3 | e8          |                 inx                  
3055:000 | DONE ins | na 16 16 | 0068a4 | e8          |                 inx                  
3056:000 | DONE wsp | na 16 16 |        |             |
3057:000 | DONE cmt | na 16 16 |        |             |                 ; TODO LATER add PAUSE here for multitasking
3058:000 | DONE wsp | na 16 16 |        |             |
3059:000 | DONE lbl | na 16 16 | 0068a5 |             | z_type                               
3059:001 | DONE ins | na 16 16 | 0068a5 | 60          |                 rts                  
3060:000 | DONE wsp | na 16 16 |        |             |
3061:000 | DONE wsp | na 16 16 |        |             |
3062:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
3063:000 | DONE cmt | na 16 16 |        |             | ; UM* "UMSTAR" ( u u -- ud ) 16*16 -> 32  X bytes / X cycles
3064:000 | DONE cmt | na 16 16 |        |             | ; Multiply two unsigned 16 bit numbers, producing a 32 bit result.This is based
3065:000 | DONE cmt | na 16 16 |        |             | ; on modified FIG Forth code by Dr. Jefyll, see
3066:000 | DONE cmt | na 16 16 |        |             | ; http://forum.6502.org/viewtopic.php?f=9&t=689 for a detailed discussion. We
3067:000 | DONE cmt | na 16 16 |        |             | ; use the system scratch pad (SYSPAD) for temp storage (N in the original code)
3068:000 | DONE cmt | na 16 16 |        |             | ; FIG Forth is in the public domain. Note old Forth versions such as FIG Forth
3069:000 | DONE cmt | na 16 16 |        |             | ; call this "U*"
3070:000 | DONE wsp | na 16 16 |        |             |
3071:000 | DONE cmt | na 16 16 |        |             | ; This is currently a brute-force loop based on the 8-bit variant in "6502
3072:000 | DONE cmt | na 16 16 |        |             | ; Assembly Language Programming" by Leventhal. Once everything is working,
3073:000 | DONE cmt | na 16 16 |        |             | ; consider switching to a table-supported version based on
3074:000 | DONE cmt | na 16 16 |        |             | ; http://codebase64.org/doku.php?id=base:seriously_fast_multiplication
3075:000 | DONE cmt | na 16 16 |        |             | ; http://codebase64.org/doku.php?id=magazines:chacking16#d_graphics_for_the_masseslib3d_and_cool_world
3076:000 | DONE cmt | na 16 16 |        |             | ; http://forum.6502.org/viewtopic.php?p=205#p205
3077:000 | DONE cmt | na 16 16 |        |             | ; http://forum.6502.org/viewtopic.php?f=9&t=689 We use tmp1, tmp2, tmp3 for
3078:000 | DONE cmt | na 16 16 |        |             | ; this, with the assumption that tmp3 immediately follows tmp2
3079:000 | DONE wsp | na 16 16 |        |             |
3080:000 | DONE lbl | na 16 16 | 0068a6 |             | xt_umstar                            
3081:000 | DONE dir | na 16 16 |        |             |         .!a16                        
3082:000 | DONE cmt | na 16 16 |        |             |                 ; SPECIAL CASE 1: multiplication by zero
3083:000 | DONE ins | na 16 16 | 0068a6 | 98          |                 tya                  
3084:000 | DONE ins | na 16 16 | 0068a7 | f0 3d       |                 beq 0068e6           
3085:000 | DONE ins | na 16 16 | 0068a9 | b5 00       |                 lda.dx 00            
3086:000 | DONE ins | na 16 16 | 0068ab | f0 39       |                 beq 0068e6           
3087:000 | DONE wsp | na 16 16 |        |             |
3088:000 | DONE cmt | na 16 16 |        |             |                 ; SPECIAL CASE 2: multiplication by one
3089:000 | DONE cmt | na 16 16 |        |             |                 ; This is a different routine than 2* because that instruction
3090:000 | DONE cmt | na 16 16 |        |             |                 ; stays inside one cell, whereas UM* produces a Double Cell
3091:000 | DONE cmt | na 16 16 |        |             |                 ; answer
3092:000 | DONE ins | na 16 16 | 0068ad | c0 01 00    |                 cpy.# 0001           non-distructively
3093:000 | DONE ins | na 16 16 | 0068b0 | f0 3b       |                 beq 0068ed           
3094:000 | DONE ins | na 16 16 | 0068b2 | b5 00       |                 lda.dx 00            
3095:000 | DONE ins | na 16 16 | 0068b4 | 3a          |                 dec.a                don't care about distruction
3096:000 | DONE ins | na 16 16 | 0068b5 | f0 39       |                 beq 0068f0           
3097:000 | DONE wsp | na 16 16 |        |             |
3098:000 | DONE cmt | na 16 16 |        |             |                 ; SPECIAL CASE 3: multiplication by two
3099:000 | DONE ins | na 16 16 | 0068b7 | c0 02 00    |                 cpy.# 0002           
3100:000 | DONE ins | na 16 16 | 0068ba | f0 3b       |                 beq 0068f7           
3101:000 | DONE wsp | na 16 16 |        |             |
3102:000 | DONE ins | na 16 16 | 0068bc | b5 00       |                 lda.dx 00            
3103:000 | DONE ins | na 16 16 | 0068be | c9 02 00    |                 cmp.# 0002           
3104:000 | DONE ins | na 16 16 | 0068c1 | f0 38       |                 beq 0068fb           
3105:000 | DONE wsp | na 16 16 |        |             |
3106:000 | DONE cmt | na 16 16 |        |             |                 ; NO SPECIAL CASE ("THE HARD WAY")
3107:000 | DONE ins | na 16 16 | 0068c3 | 84 16       |                 sty.d 000216         TOS number  "40"
3108:000 | DONE ins | na 16 16 | 0068c5 | 85 18       |                 sta.d 000218         NOS number  "41"
3109:000 | DONE ins | na 16 16 | 0068c7 | a0 10 00    |                 ldy.# &16            loop counter
3110:000 | DONE wsp | na 16 16 |        |             |
3111:000 | DONE ins | na 16 16 | 0068ca | a9 00 00    |                 lda.# 0000           
3112:000 | DONE ins | na 16 16 | 0068cd | 85 1a       |                 sta.d 00021a         Most Significat Word (MSW) of result
3113:000 | DONE wsp | na 16 16 |        |             |
3114:000 | DONE lbl | na 16 16 | 0068cf |             | umstar_loop                          
3115:000 | DONE ins | na 16 16 | 0068cf | 0a          |                 asl.a                useless for first iteration
3116:000 | DONE ins | na 16 16 | 0068d0 | 26 1a       |                 rol.d 00021a         move carry into MSB, useless first iteration
3117:000 | DONE ins | na 16 16 | 0068d2 | 06 18       |                 asl.d 000218         move bit of NOS number into carry
3118:000 | DONE wsp | na 16 16 |        |             |
3119:000 | DONE cmt | na 16 16 |        |             |                 ; if there is no carry bit, we don't have to add and can go to
3120:000 | DONE cmt | na 16 16 |        |             |                 ; the next bit
3121:000 | DONE ins | na 16 16 | 0068d4 | 90 07       |                 bcc 0068dd           
3122:000 | DONE wsp | na 16 16 |        |             |
3123:000 | DONE ins | na 16 16 | 0068d6 | 18          |                 clc                  
3124:000 | DONE ins | na 16 16 | 0068d7 | 65 16       |                 adc.d 000216         we have a set bit, so add TOS
3125:000 | DONE wsp | na 16 16 |        |             |
3126:000 | DONE cmt | na 16 16 |        |             |                 ; if we have a carry, increase the MSW of result
3127:000 | DONE ins | na 16 16 | 0068d9 | 90 02       |                 bcc 0068dd           
3128:000 | DONE ins | na 16 16 | 0068db | e6 1a       |                 inc.d 00021a         
3129:000 | DONE wsp | na 16 16 |        |             |
3130:000 | DONE lbl | na 16 16 | 0068dd |             | umstar_counter                       
3131:000 | DONE ins | na 16 16 | 0068dd | 88          |                 dey                  
3132:000 | DONE ins | na 16 16 | 0068de | d0 ef       |                 bne 0068cf           
3133:000 | DONE wsp | na 16 16 |        |             |
3134:000 | DONE cmt | na 16 16 |        |             |                 ; We're all done, clean up and leave
3135:000 | DONE ins | na 16 16 | 0068e0 | 95 00       |                 sta.dx 00            store lower cell of number in NOS
3136:000 | DONE ins | na 16 16 | 0068e2 | a4 1a       |                 ldy.d 00021a         store MSB in TOS as double cell
3137:000 | DONE wsp | na 16 16 |        |             |
3138:000 | DONE ins | na 16 16 | 0068e4 | 80 1e       |                 bra 006904           don't use RTS so we can natively compile
3139:000 | DONE wsp | na 16 16 |        |             |
3140:000 | DONE lbl | na 16 16 | 0068e6 |             | umstar_zero                          
3141:000 | DONE cmt | na 16 16 |        |             |                 ; one or both of the numbers is zero, so we got off light
3142:000 | DONE ins | na 16 16 | 0068e6 | a0 00 00    |                 ldy.# 0000           
3143:000 | DONE ins | na 16 16 | 0068e9 | 94 00       |                 sty.dx 00            
3144:000 | DONE ins | na 16 16 | 0068eb | 80 17       |                 bra 006904           
3145:000 | DONE wsp | na 16 16 |        |             |
3146:000 | DONE lbl | na 16 16 | 0068ed |             | umstar_one_tos                       
3147:000 | DONE cmt | na 16 16 |        |             |                 ; TOS is one, life is easy
3148:000 | DONE ins | na 16 16 | 0068ed | 88          |                 dey                  NOS is LSW, TOS becomes zero
3149:000 | DONE ins | na 16 16 | 0068ee | 80 14       |                 bra 006904           
3150:000 | DONE lbl | na 16 16 | 0068f0 |             | umstar_one_nos                       
3151:000 | DONE cmt | na 16 16 |        |             |                 ; NOS is one, life is easy
3152:000 | DONE ins | na 16 16 | 0068f0 | 94 00       |                 sty.dx 00            
3153:000 | DONE ins | na 16 16 | 0068f2 | a0 00 00    |                 ldy.# 0000           
3154:000 | DONE ins | na 16 16 | 0068f5 | 80 0d       |                 bra 006904           
3155:000 | DONE wsp | na 16 16 |        |             |
3156:000 | DONE lbl | na 16 16 | 0068f7 |             | umstar_two_tos                       
3157:000 | DONE cmt | na 16 16 |        |             |                 ; TOS is two, life is easy
3158:000 | DONE ins | na 16 16 | 0068f7 | b5 00       |                 lda.dx 00            
3159:000 | DONE ins | na 16 16 | 0068f9 | 80 01       |                 bra 0068fc           
3160:000 | DONE lbl | na 16 16 | 0068fb |             | umstar_two_nos                       
3161:000 | DONE cmt | na 16 16 |        |             |                 ; NOS is two, life is still easy
3162:000 | DONE ins | na 16 16 | 0068fb | 98          |                 tya                  
3163:000 | DONE lbl | na 16 16 | 0068fc |             | umstar_two_common                    
3164:000 | DONE ins | na 16 16 | 0068fc | 0a          |                 asl.a                multiply by two, top bit in Carry Flag
3165:000 | DONE ins | na 16 16 | 0068fd | 95 00       |                 sta.dx 00            Double Cell LSW is NOS
3166:000 | DONE wsp | na 16 16 |        |             |
3167:000 | DONE ins | na 16 16 | 0068ff | a9 00 00    |                 lda.# 0000           
3168:000 | DONE ins | na 16 16 | 006902 | 2a          |                 rol.a                Rotate any Carry Flag into MSW
3169:000 | DONE ins | na 16 16 | 006903 | a8          |                 tay                  
3170:000 | DONE wsp | na 16 16 |        |             |
3171:000 | DONE lbl | na 16 16 | 006904 |             | z_umstar                             
3171:001 | DONE ins | na 16 16 | 006904 | 60          |                 rts                  
3172:000 | DONE wsp | na 16 16 |        |             |
3173:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
3174:000 | DONE cmt | na 16 16 |        |             | ; UM/MOD ( ud u -- u u ) 32/16 -> 16  X bytes / X cycles
3175:000 | DONE cmt | na 16 16 |        |             | ; Divide double cell number by single cell number, returning the quotient as TOS
3176:000 | DONE cmt | na 16 16 |        |             | ; and any remainder as NOS. All numbers are unsigned. This is the basic division
3177:000 | DONE cmt | na 16 16 |        |             | ; operation all others use. Based on Garth Wilson's code at
3178:000 | DONE cmt | na 16 16 |        |             | ; http://6502.org/source/integers/ummodfix/ummodfix.htm We use "scratch" for N
3179:000 | DONE cmt | na 16 16 |        |             | ; and include a separate detection of division by zero to force an error code
3180:000 | DONE lbl | na 16 16 | 006905 |             | xt_ummod                             
3181:000 | DONE dir | na 16 16 |        |             |         .!a16                        
3182:000 | DONE dir | na 16 16 |        |             |         .!xy16                       
3183:000 | DONE cmt | na 16 16 |        |             |                 ; Move the inputs to the scratchpad to avoid having to fool
3184:000 | DONE cmt | na 16 16 |        |             |                 ; around with the Data Stack and for speed. Garth's original
3185:000 | DONE cmt | na 16 16 |        |             |                 ; code uses the MVN instruction for this, but our TOS is Y which
3186:000 | DONE cmt | na 16 16 |        |             |                 ; makes that harder. When we're done, the setup will look likes
3187:000 | DONE cmt | na 16 16 |        |             |                 ; this: (S is start of the scratchpad in Direct Page)
3188:000 | DONE cmt | na 16 16 |        |             |                 ;
3189:000 | DONE cmt | na 16 16 |        |             |                 ;     +-----+-----+-----+-----+-----+-----+-----+-----+
3190:000 | DONE cmt | na 16 16 |        |             |                 ;     |  DIVISOR  |        DIVIDEND       | TEMP AREA |
3191:000 | DONE cmt | na 16 16 |        |             |                 ;     |           |  hi cell     lo cell  | carry bit |
3192:000 | DONE cmt | na 16 16 |        |             |                 ;     |  S    S+1 | S+2   S+3 | S+4   S+5 | S+6   S+7 |
3193:000 | DONE cmt | na 16 16 |        |             |                 ;     +-----+-----+-----+-----+-----+-----+-----+-----+
3194:000 | DONE cmt | na 16 16 |        |             |                 ;
3195:000 | DONE cmt | na 16 16 |        |             |                 ; The divisor is TOS (in Y), high cell of the dividend in NOS,
3196:000 | DONE cmt | na 16 16 |        |             |                 ; and low cell in 3OS
3197:000 | DONE wsp | na 16 16 |        |             |
3198:000 | DONE cmt | na 16 16 |        |             |                 ; Catch division by zero. We could include this in the code as
3199:000 | DONE cmt | na 16 16 |        |             |                 ; part of overflow detection (see below), but we want an error
3200:000 | DONE cmt | na 16 16 |        |             |                 ; to appear like in Gforth
3201:000 | DONE ins | na 16 16 | 006905 | 98          |                 tya                  force flag test
3202:000 | DONE ins | na 16 16 | 006906 | d0 06       |                 bne 00690e           
3203:000 | DONE wsp | na 16 16 |        |             |
3204:000 | DONE ins | na 16 16 | 006908 | a9 16 74    |                 lda.# 007416         
3205:000 | DONE ins | na 16 16 | 00690b | 4c 98 6f    |                 jmp 006f98           
3206:000 | DONE wsp | na 16 16 |        |             |
3207:000 | DONE lbl | na 16 16 | 00690e |             | ummod_notzero                        
3208:000 | DONE ins | na 16 16 | 00690e | 84 20       |                 sty.d 000220         Y is now free
3209:000 | DONE ins | na 16 16 | 006910 | b5 00       |                 lda.dx 00            high cell of dividend
3210:000 | DONE ins | na 16 16 | 006912 | 85 22       |                 sta.d 000222         
3211:000 | DONE ins | na 16 16 | 006914 | b5 02       |                 lda.dx 02            low cell of dividend
3212:000 | DONE ins | na 16 16 | 006916 | 85 24       |                 sta.d 000224         
3213:000 | DONE wsp | na 16 16 |        |             |
3214:000 | DONE cmt | na 16 16 |        |             |                 ; Drop one entry off of the stack and save the new Data Stack
3215:000 | DONE cmt | na 16 16 |        |             |                 ; Pointer, freeing X for index duty
3216:000 | DONE ins | na 16 16 | 006918 | e8          |                 inx                  
3217:000 | DONE ins | na 16 16 | 006919 | e8          |                 inx                  
3218:000 | DONE ins | na 16 16 | 00691a | 86 04       |                 stx.d 000204         
3219:000 | DONE wsp | na 16 16 |        |             |
3220:000 | DONE cmt | na 16 16 |        |             |                 ; Detect overflow. Subtract divisor from high cell of dividend.
3221:000 | DONE cmt | na 16 16 |        |             |                 ; If carry flag remains set, divisor was not large enough to
3222:000 | DONE cmt | na 16 16 |        |             |                 ; avoid overflow. This also would detect division by zero, but
3223:000 | DONE cmt | na 16 16 |        |             |                 ; we did that already in a separate step
3224:000 | DONE ins | na 16 16 | 00691c | 38          |                 sec                  
3225:000 | DONE ins | na 16 16 | 00691d | a5 22       |                 lda.d 000222         
3226:000 | DONE ins | na 16 16 | 00691f | e5 20       |                 sbc.d 000220         
3227:000 | DONE ins | na 16 16 | 006921 | b0 21       |                 bcs 006944           
3228:000 | DONE wsp | na 16 16 |        |             |
3229:000 | DONE cmt | na 16 16 |        |             |                 ; If there is no overflow, the carry flag remains clear for
3230:000 | DONE cmt | na 16 16 |        |             |                 ; first roll. We loop 16 times, but since we shift the dividend
3231:000 | DONE cmt | na 16 16 |        |             |                 ; over at the same time as shifting the answer in, the operation
3232:000 | DONE cmt | na 16 16 |        |             |                 ; must start and (!) finish with a shift of the low cell of the
3233:000 | DONE cmt | na 16 16 |        |             |                 ; dividend (which ends up holding the quotient), so we start
3234:000 | DONE cmt | na 16 16 |        |             |                 ; with 17 times in X. Y is used for temporary storage
3235:000 | DONE ins | na 16 16 | 006923 | a2 11 00    |                 ldx.# &17            
3236:000 | DONE wsp | na 16 16 |        |             |
3237:000 | DONE lbl | na 16 16 | 006926 |             | ummod_shift                          
3238:000 | DONE cmt | na 16 16 |        |             |                 ; Move low cell of dividend left one bit, also shifting answer
3239:000 | DONE cmt | na 16 16 |        |             |                 ; in. The first rotation brings in a zero, which later gets
3240:000 | DONE cmt | na 16 16 |        |             |                 ; pushed off the other end in the last rotation
3241:000 | DONE ins | na 16 16 | 006926 | 26 24       |                 rol.d 000224         
3242:000 | DONE wsp | na 16 16 |        |             |
3243:000 | DONE cmt | na 16 16 |        |             |                 ; loop control
3244:000 | DONE ins | na 16 16 | 006928 | ca          |                 dex                  
3245:000 | DONE ins | na 16 16 | 006929 | f0 22       |                 beq 00694d           
3246:000 | DONE wsp | na 16 16 |        |             |
3247:000 | DONE cmt | na 16 16 |        |             |                 ; Shift high cell of divident left one bit, also shifting the
3248:000 | DONE cmt | na 16 16 |        |             |                 ; next bit in from high bit of low cell
3249:000 | DONE ins | na 16 16 | 00692b | 26 22       |                 rol.d 000222         
3250:000 | DONE ins | na 16 16 | 00692d | a9 00 00    |                 lda.# 0000           
3251:000 | DONE ins | na 16 16 | 006930 | 2a          |                 rol.a                
3252:000 | DONE ins | na 16 16 | 006931 | 85 26       |                 sta.d 000226         store old high bit of dividend
3253:000 | DONE wsp | na 16 16 |        |             |
3254:000 | DONE cmt | na 16 16 |        |             |                 ; See if divisor will fit into high 17 bits of dividend by
3255:000 | DONE cmt | na 16 16 |        |             |                 ; subtracting and then looking at the carry flag. If carry was
3256:000 | DONE cmt | na 16 16 |        |             |                 ; cleared, divisor did not fit
3257:000 | DONE ins | na 16 16 | 006933 | 38          |                 sec                  
3258:000 | DONE ins | na 16 16 | 006934 | a5 22       |                 lda.d 000222         
3259:000 | DONE ins | na 16 16 | 006936 | e5 20       |                 sbc.d 000220         
3260:000 | DONE ins | na 16 16 | 006938 | a8          |                 tay                  save difference in Y until we know if we need it
3261:000 | DONE wsp | na 16 16 |        |             |
3262:000 | DONE cmt | na 16 16 |        |             |                 ; Bit 0 of S+6 serves as the 17th bit. Complete the subtraction
3263:000 | DONE cmt | na 16 16 |        |             |                 ; by doing the 17th bit before determining if the divisor fits
3264:000 | DONE cmt | na 16 16 |        |             |                 ; into the high 17 bits of the dividend. If so, the carry flag
3265:000 | DONE cmt | na 16 16 |        |             |                 ; remains set
3266:000 | DONE ins | na 16 16 | 006939 | a5 26       |                 lda.d 000226         
3267:000 | DONE ins | na 16 16 | 00693b | e9 00 00    |                 sbc.# 0000           
3268:000 | DONE ins | na 16 16 | 00693e | 90 e6       |                 bcc 006926           
3269:000 | DONE wsp | na 16 16 |        |             |
3270:000 | DONE cmt | na 16 16 |        |             |                 ; Since the divisor fit into high 17 bits, update dividend high
3271:000 | DONE cmt | na 16 16 |        |             |                 ; cell to what it would be after subtraction
3272:000 | DONE ins | na 16 16 | 006940 | 84 22       |                 sty.d 000222         
3273:000 | DONE ins | na 16 16 | 006942 | 80 e2       |                 bra 006926           
3274:000 | DONE wsp | na 16 16 |        |             |
3275:000 | DONE lbl | na 16 16 | 006944 |             | ummod_overflow                       
3276:000 | DONE cmt | na 16 16 |        |             |                 ; If an overflow condition occurs, put 0ffff
3277:000 | DONE cmt | na 16 16 |        |             |                 ; in both the quotient and remainder
3278:000 | DONE ins | na 16 16 | 006944 | a6 04       |                 ldx.d 000204         restore DSP
3279:000 | DONE ins | na 16 16 | 006946 | a0 ff ff    |                 ldy.# 0ffff          
3280:000 | DONE ins | na 16 16 | 006949 | 94 00       |                 sty.dx 00            
3281:000 | DONE ins | na 16 16 | 00694b | 80 08       |                 bra 006955           go to end to enable native coding
3282:000 | DONE wsp | na 16 16 |        |             |
3283:000 | DONE lbl | na 16 16 | 00694d |             | ummod_complete                       
3284:000 | DONE ins | na 16 16 | 00694d | a6 04       |                 ldx.d 000204         restore DSP
3285:000 | DONE ins | na 16 16 | 00694f | a4 24       |                 ldy.d 000224         quotient is TOS
3286:000 | DONE ins | na 16 16 | 006951 | a5 22       |                 lda.d 000222         remainder is NOS
3287:000 | DONE ins | na 16 16 | 006953 | 95 00       |                 sta.dx 00            
3288:000 | DONE wsp | na 16 16 |        |             |
3289:000 | DONE lbl | na 16 16 | 006955 |             | z_ummod                              
3289:001 | DONE ins | na 16 16 | 006955 | 60          |                 rts                  
3290:000 | DONE wsp | na 16 16 |        |             |
3291:000 | DONE wsp | na 16 16 |        |             |
3292:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
3293:000 | DONE cmt | na 16 16 |        |             | ; UNUSED ( -- u ) 11 bytes / X cycles
3294:000 | DONE cmt | na 16 16 |        |             | ; Return amount of memory available for the Dictionary. Does not include
3295:000 | DONE cmt | na 16 16 |        |             | ; memory for buffers, stacks etc. Does not exclude the space used by PAD
3296:000 | DONE cmt | na 16 16 |        |             | ; TODO rewrite for multitasking
3297:000 | DONE lbl | na 16 16 | 006956 |             | xt_unused                            
3298:000 | DONE dir | na 16 16 |        |             |         .!a16                        
3299:000 | DONE ins | na 16 16 | 006956 | a9 ff 7b    |                 lda.# 007bff         
3300:000 | DONE ins | na 16 16 | 006959 | 38          |                 sec                  
3301:000 | DONE ins | na 16 16 | 00695a | e5 00       |                 sbc.d 000200         current compile pointer
3302:000 | DONE wsp | na 16 16 |        |             |
3303:000 | DONE ins | na 16 16 | 00695c | ca          |                 dex                  
3304:000 | DONE ins | na 16 16 | 00695d | ca          |                 dex                  
3305:000 | DONE ins | na 16 16 | 00695e | 94 00       |                 sty.dx 00            
3306:000 | DONE wsp | na 16 16 |        |             |
3307:000 | DONE ins | na 16 16 | 006960 | a8          |                 tay                  
3308:000 | DONE wsp | na 16 16 |        |             |
3309:000 | DONE lbl | na 16 16 | 006961 |             | z_unused                             
3309:001 | DONE ins | na 16 16 | 006961 | 60          |                 rts                  
3310:000 | DONE wsp | na 16 16 |        |             |
3311:000 | DONE wsp | na 16 16 |        |             |
3312:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
3313:000 | DONE cmt | na 16 16 |        |             | ; VARIABLE ( "name" -- ) X bytes / X cycles
3314:000 | DONE cmt | na 16 16 |        |             | ; Define a word that returns the address for a variable. There are various Forth
3315:000 | DONE cmt | na 16 16 |        |             | ; definitions for this word, such as  CREATE 1 CELLS ALLOT  or CREATE 0 ,
3316:000 | DONE cmt | na 16 16 |        |             | ; We use a variant of the second one so the variable is initialized to zero
3317:000 | DONE lbl | na 16 16 | 006962 |             | xt_variable                          
3318:000 | DONE cmt | na 16 16 |        |             |                 ; We let CREATE do the heavy lifting
3319:000 | DONE ins | na 16 16 | 006962 | 20 75 64    |                 jsr 006475           
3320:000 | DONE wsp | na 16 16 |        |             |
3321:000 | DONE cmt | na 16 16 |        |             |                 ; There is no "stz.di cp" so we have to do this the
3322:000 | DONE cmt | na 16 16 |        |             |                 ; old way, which is still faster than a subroutine jump to ZERO
3323:000 | DONE ins | na 16 16 | 006965 | a9 00 00    |                 lda.# 0000           
3324:000 | DONE ins | na 16 16 | 006968 | 92 00       |                 sta.di 000200        STA (CP)
3325:000 | DONE wsp | na 16 16 |        |             |
3326:000 | DONE ins | na 16 16 | 00696a | e6 00       |                 inc.d 000200         direct COMMA
3327:000 | DONE ins | na 16 16 | 00696c | e6 00       |                 inc.d 000200         
3328:000 | DONE wsp | na 16 16 |        |             |
3329:000 | DONE lbl | na 16 16 | 00696e |             | z_variable                           
3329:001 | DONE ins | na 16 16 | 00696e | 60          |                 rts                  
3330:000 | DONE wsp | na 16 16 |        |             |
3331:000 | DONE wsp | na 16 16 |        |             |
3332:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
3333:000 | DONE cmt | na 16 16 |        |             | ; WORDS ( -- ) X bytes / X cycles
3334:000 | DONE cmt | na 16 16 |        |             | ; Print list of all Forth words available. This only really makes sense in an
3335:000 | DONE cmt | na 16 16 |        |             | ; interactive setting, so we don't have to worry about speed.
3336:000 | DONE lbl | na 16 16 | 00696f |             | xt_words                             
3337:000 | DONE dir | na 16 16 |        |             |         .!a16                        
3338:000 | DONE dir | na 16 16 |        |             |         .!xy16                       
3339:000 | DONE ins | na 16 16 | 00696f | 20 6e 64    |                 jsr 00646e           start on next line, this is a style choice
3340:000 | DONE wsp | na 16 16 |        |             |
3341:000 | DONE ins | na 16 16 | 006972 | a5 02       |                 lda.d 000202         nt of first entry in Dictionary (last added)
3342:000 | DONE ins | na 16 16 | 006974 | 48          |                 pha                  
3343:000 | DONE wsp | na 16 16 |        |             |
3344:000 | DONE ins | na 16 16 | 006975 | ca          |                 dex                  create room on TOS
3345:000 | DONE ins | na 16 16 | 006976 | ca          |                 dex                  
3346:000 | DONE ins | na 16 16 | 006977 | 94 00       |                 sty.dx 00            
3347:000 | DONE wsp | na 16 16 |        |             |
3348:000 | DONE lbl | na 16 16 | 006979 |             | words_loop                           
3349:000 | DONE ins | na 16 16 | 006979 | a8          |                 tay                  ( nt )
3350:000 | DONE ins | na 16 16 | 00697a | 20 8a 66    |                 jsr 00668a           ( nt -- addr u )
3351:000 | DONE ins | na 16 16 | 00697d | 20 85 68    |                 jsr 006885           ( addr u -- )
3352:000 | DONE ins | na 16 16 | 006980 | 20 4a 68    |                 jsr 00684a           
3353:000 | DONE wsp | na 16 16 |        |             |
3354:000 | DONE ins | na 16 16 | 006983 | 68          |                 pla                  get back first entry in Dictionary
3355:000 | DONE wsp | na 16 16 |        |             |
3356:000 | DONE cmt | na 16 16 |        |             |                 ; The next nt is two bytes below the nt of the current one in
3357:000 | DONE cmt | na 16 16 |        |             |                 ; the Dictionary header
3358:000 | DONE ins | na 16 16 | 006984 | 1a          |                 inc.a                
3359:000 | DONE ins | na 16 16 | 006985 | 1a          |                 inc.a                
3360:000 | DONE wsp | na 16 16 |        |             |
3361:000 | DONE ins | na 16 16 | 006986 | ca          |                 dex                  
3362:000 | DONE ins | na 16 16 | 006987 | ca          |                 dex                  
3363:000 | DONE ins | na 16 16 | 006988 | 94 00       |                 sty.dx 00            
3364:000 | DONE wsp | na 16 16 |        |             |
3365:000 | DONE ins | na 16 16 | 00698a | a8          |                 tay                  
3366:000 | DONE ins | na 16 16 | 00698b | b9 00 00    |                 lda.y 0000           LDA $0000,Y
3367:000 | DONE ins | na 16 16 | 00698e | 48          |                 pha                  
3368:000 | DONE ins | na 16 16 | 00698f | d0 e8       |                 bne 006979           zero entry signals end of Dictionary
3369:000 | DONE wsp | na 16 16 |        |             |
3370:000 | DONE cmt | na 16 16 |        |             |                 ; all done, clean up
3371:000 | DONE ins | na 16 16 | 006991 | 68          |                 pla                  balance MPU stack, value discarded
3372:000 | DONE wsp | na 16 16 |        |             |
3373:000 | DONE ins | na 16 16 | 006992 | b4 00       |                 ldy.dx 00            
3374:000 | DONE ins | na 16 16 | 006994 | e8          |                 inx                  
3375:000 | DONE ins | na 16 16 | 006995 | e8          |                 inx                  
3376:000 | DONE wsp | na 16 16 |        |             |
3377:000 | DONE lbl | na 16 16 | 006996 |             | z_words                              
3377:001 | DONE ins | na 16 16 | 006996 | 60          |                 rts                  
3378:000 | DONE wsp | na 16 16 |        |             |
3379:000 | DONE wsp | na 16 16 |        |             |
3380:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
3381:000 | DONE cmt | na 16 16 |        |             | ; XOR ( n m -- n ) 6 bytes / X cycles
3382:000 | DONE cmt | na 16 16 |        |             | ; Logical XOR
3383:000 | DONE lbl | na 16 16 | 006997 |             | xt_xor                               
3384:000 | DONE ins | na 16 16 | 006997 | 98          |                 tya                  
3385:000 | DONE ins | na 16 16 | 006998 | 55 00       |                 eor.dx 00            
3386:000 | DONE ins | na 16 16 | 00699a | a8          |                 tay                  
3387:000 | DONE wsp | na 16 16 |        |             |
3388:000 | DONE ins | na 16 16 | 00699b | e8          |                 inx                  
3389:000 | DONE ins | na 16 16 | 00699c | e8          |                 inx                  
3390:000 | DONE wsp | na 16 16 |        |             |
3391:000 | DONE lbl | na 16 16 | 00699d |             | z_xor                                
3391:001 | DONE ins | na 16 16 | 00699d | 60          |                 rts                  
3392:000 | DONE wsp | na 16 16 |        |             |
3393:000 | DONE wsp | na 16 16 |        |             |
3394:000 | DONE cmt | na 16 16 |        |             | ; ===================================================================
3395:000 | DONE cmt | na 16 16 |        |             | ; MIDDLE INCLUDES
3396:000 | DONE wsp | na 16 16 |        |             |
3397:000 | DONE cmt | na 16 16 |        |             | ; Dictionary Headers for Liara Forth for the W65C265SXB
3397:001 | DONE cmt | na 16 16 |        |             | ; Scot W. Stevenson <scot.stevenson@gmail.com>
3397:002 | DONE cmt | na 16 16 |        |             | ; First version: 05. Dec 2016
3397:003 | DONE cmt | na 16 16 |        |             | ; This version: 19. Feb 2017
3397:004 | DONE wsp | na 16 16 |        |             |
3397:005 | DONE cmt | na 16 16 |        |             | ; Dictionary headers are kept separately from the code, which allows various
3397:006 | DONE cmt | na 16 16 |        |             | ; tricks in the code. We roughly follow the Gforth terminology: The Execution
3397:007 | DONE cmt | na 16 16 |        |             | ; Token (xt) is the address of the first byte of a word's code that can be,
3397:008 | DONE cmt | na 16 16 |        |             | ; well, executed; the Name Token (nt) is a pointer to the beginning of the
3397:009 | DONE cmt | na 16 16 |        |             | ; word's header in the Dictionary. There, the link to the next word in the
3397:010 | DONE cmt | na 16 16 |        |             | ; Dictionary is always one cell down from the current word's own nt. In the code
3397:011 | DONE cmt | na 16 16 |        |             | ; itself, we use "nt_<WORD>" ("header") for the nt and "xt_<WORD>" ("A" as the
3397:012 | DONE cmt | na 16 16 |        |             | ; beginning) for the xt.
3397:013 | DONE cmt | na 16 16 |        |             | ;
3397:014 | DONE cmt | na 16 16 |        |             | ; This gives us the following header structure:
3397:015 | DONE cmt | na 16 16 |        |             | ;
3397:016 | DONE cmt | na 16 16 |        |             | ;              8 bit     8 bit
3397:017 | DONE cmt | na 16 16 |        |             | ;               LSB       MSB
3397:018 | DONE cmt | na 16 16 |        |             | ; nt_word ->  +--------+--------+
3397:019 | DONE cmt | na 16 16 |        |             | ;             | Length | Status |
3397:020 | DONE cmt | na 16 16 |        |             | ;          +2 +--------+--------+
3397:021 | DONE cmt | na 16 16 |        |             | ;             | Next Header     | -> nt_next_word
3397:022 | DONE cmt | na 16 16 |        |             | ;          +4 +-----------------+
3397:023 | DONE cmt | na 16 16 |        |             | ;             | Start of Code   | -> xt_word
3397:024 | DONE cmt | na 16 16 |        |             | ;          +6 +-----------------+
3397:025 | DONE cmt | na 16 16 |        |             | ;             | End of Code     | -> z_word
3397:026 | DONE cmt | na 16 16 |        |             | ;          +8 +--------+--------+
3397:027 | DONE cmt | na 16 16 |        |             | ;             | Name   |        |
3397:028 | DONE cmt | na 16 16 |        |             | ;             +--------+--------+
3397:029 | DONE cmt | na 16 16 |        |             | ;             |        |        |
3397:030 | DONE cmt | na 16 16 |        |             | ;             +--------+--------+
3397:031 | DONE cmt | na 16 16 |        |             | ;             |        |  ...   | (name string does not end with a zero)
3397:032 | DONE cmt | na 16 16 |        |             | ;          +n +--------+--------+
3397:033 | DONE cmt | na 16 16 |        |             | ;
3397:034 | DONE cmt | na 16 16 |        |             | ; The Status Byte is created by adding the flags defined in
3397:035 | DONE cmt | na 16 16 |        |             | ; definitions.tasm:
3397:036 | DONE cmt | na 16 16 |        |             | ;
3397:037 | DONE cmt | na 16 16 |        |             | ;       CO - Compile Only
3397:038 | DONE cmt | na 16 16 |        |             | ;       IM - Immediate Word
3397:039 | DONE cmt | na 16 16 |        |             | ;       NC - Native Compile allowed (inline compile)
3397:040 | DONE wsp | na 16 16 |        |             |
3397:041 | DONE cmt | na 16 16 |        |             | ; Note there are currently five bits unused. The last word (top word in code)
3397:042 | DONE cmt | na 16 16 |        |             | ; is always BYE. It is marked as the last word by its value of 0000 in its Next
3397:043 | DONE cmt | na 16 16 |        |             | ; Header field. The words are sorted with the more common ones first (further
3397:044 | DONE cmt | na 16 16 |        |             | ; down in code) so they are found earlier.  Anythiing to do with output comes
3397:045 | DONE cmt | na 16 16 |        |             | ; later (further up) because things will always be slow if there is a human
3397:046 | DONE cmt | na 16 16 |        |             | ; involved.
3397:047 | DONE wsp | na 16 16 |        |             |
3397:048 | DONE lbl | na 16 16 | 00699e |             | nt_bye                               
3397:049 | DONE dir | na 16 16 | 00699e | (1 bytes)   |         .byte 03                     length of word string
3397:049 | DONE dir | na 16 16 |        |             |                 03                       --  .
3397:050 | DONE dir | na 16 16 | 00699f | (1 bytes)   |         .byte { NC }                 status byte
3397:050 | DONE dir | na 16 16 |        |             |                 01                       --  .
3397:051 | DONE dir | na 16 16 | 0069a0 | (2 bytes)   |         .word 0000                   next word in dictionary, 0000 signals end
3397:051 | DONE dir | na 16 16 |        |             |                 00 00                    --  . .
3397:052 | DONE dir | na 16 16 | 0069a2 | (2 bytes)   |         .word 0063e3                 start of code, the xt of this word
3397:052 | DONE dir | na 16 16 |        |             |                 e3 63                    --  . c
3397:053 | DONE dir | na 16 16 | 0069a4 | (2 bytes)   |         .word 0063e6                 end of code (points to RTS)
3397:053 | DONE dir | na 16 16 |        |             |                 e6 63                    --  . c
3397:054 | DONE dir | na 16 16 | 0069a6 | (3 bytes)   |         .byte 62, 79, 65             word name, always lower case
3397:054 | DONE dir | na 16 16 |        |             |                 62 79 65                 --  b y e
3397:055 | DONE wsp | na 16 16 |        |             |
3397:056 | DONE lbl | na 16 16 | 0069a9 |             | nt_cold                              
3397:057 | DONE dir | na 16 16 | 0069a9 | (2 bytes)   |         .byte 4, 00                  
3397:057 | DONE dir | na 16 16 |        |             |                 04 00                    --  . .
3397:058 | DONE dir | na 16 16 | 0069ab | (6 bytes)   |         .word nt_bye, xt_cold, 0060de 
3397:058 | DONE dir | na 16 16 |        |             |                 9e 69 63 60 de 60        --  . i c ` . `
3397:059 | DONE dir | na 16 16 | 0069b1 | (4 bytes)   |         .byte 63, 6f, 6c, 64         
3397:059 | DONE dir | na 16 16 |        |             |                 63 6f 6c 64              --  c o l d
3397:060 | DONE wsp | na 16 16 |        |             |
3397:061 | DONE lbl | na 16 16 | 0069b5 |             | nt_words                             
3397:062 | DONE dir | na 16 16 | 0069b5 | (2 bytes)   |         .byte 5, { NC }              
3397:062 | DONE dir | na 16 16 |        |             |                 05 01                    --  . .
3397:063 | DONE dir | na 16 16 | 0069b7 | (6 bytes)   |         .word nt_cold, xt_words, 006996 
3397:063 | DONE dir | na 16 16 |        |             |                 a9 69 6f 69 96 69        --  . i o i . i
3397:064 | DONE dir | na 16 16 | 0069bd | (5 bytes)   |         .byte 77, 6f, 72, 64, 73     
3397:064 | DONE dir | na 16 16 |        |             |                 77 6f 72 64 73           --  w o r d s
3397:065 | DONE wsp | na 16 16 |        |             |
3397:066 | DONE lbl | na 16 16 | 0069c2 |             | nt_dump                              
3397:067 | DONE dir | na 16 16 | 0069c2 | (2 bytes)   |         .byte 4, { NC }              
3397:067 | DONE dir | na 16 16 |        |             |                 04 01                    --  . .
3397:068 | DONE dir | na 16 16 | 0069c4 | (6 bytes)   |         .word nt_words, xt_dump, 006566 
3397:068 | DONE dir | na 16 16 |        |             |                 b5 69 40 65 66 65        --  . i @ e f e
3397:069 | DONE dir | na 16 16 | 0069ca | (4 bytes)   |         .byte 64, 75, 6d, 70         
3397:069 | DONE dir | na 16 16 |        |             |                 64 75 6d 70              --  d u m p
3397:070 | DONE wsp | na 16 16 |        |             |
3397:071 | DONE lbl | na 16 16 | 0069ce |             | nt_bell                              
3397:072 | DONE dir | na 16 16 | 0069ce | (2 bytes)   |         .byte 4, { NC }              
3397:072 | DONE dir | na 16 16 |        |             |                 04 01                    --  . .
3397:073 | DONE dir | na 16 16 | 0069d0 | (6 bytes)   |         .word nt_dump, xt_bell, 0063bd 
3397:073 | DONE dir | na 16 16 |        |             |                 c2 69 b7 63 bd 63        --  . i . c . c
3397:074 | DONE dir | na 16 16 | 0069d6 | (4 bytes)   |         .byte 62, 65, 6c, 6c         
3397:074 | DONE dir | na 16 16 |        |             |                 62 65 6c 6c              --  b e l l
3397:075 | DONE wsp | na 16 16 |        |             |
3397:076 | DONE lbl | na 16 16 | 0069da |             | nt_decimal                           
3397:077 | DONE dir | na 16 16 | 0069da | (2 bytes)   |         .byte 7, { NC }              
3397:077 | DONE dir | na 16 16 |        |             |                 07 01                    --  . .
3397:078 | DONE dir | na 16 16 | 0069dc | (6 bytes)   |         .word nt_bell, xt_decimal, 0064f4 
3397:078 | DONE dir | na 16 16 |        |             |                 ce 69 ef 64 f4 64        --  . i . d . d
3397:079 | DONE dir | na 16 16 | 0069e2 | (7 bytes)   |         .byte 64, 65, 63, 69, 6d, 61, 6c 
3397:079 | DONE dir | na 16 16 |        |             |                 64 65 63 69 6d 61 6c     --  d e c i m a l
3397:080 | DONE wsp | na 16 16 |        |             |
3397:081 | DONE lbl | na 16 16 | 0069e9 |             | nt_hex                               
3397:082 | DONE dir | na 16 16 | 0069e9 | (2 bytes)   |         .byte 3, { NC }              
3397:082 | DONE dir | na 16 16 |        |             |                 03 01                    --  . .
3397:083 | DONE dir | na 16 16 | 0069eb | (6 bytes)   |         .word nt_decimal, xt_hex, 00661b 
3397:083 | DONE dir | na 16 16 |        |             |                 da 69 16 66 1b 66        --  . i . f . f
3397:084 | DONE dir | na 16 16 | 0069f1 | (3 bytes)   |         .byte 68, 65, 78             
3397:084 | DONE dir | na 16 16 |        |             |                 68 65 78                 --  h e x
3397:085 | DONE wsp | na 16 16 |        |             |
3397:086 | DONE lbl | na 16 16 | 0069f4 |             | nt_unused                            
3397:087 | DONE dir | na 16 16 | 0069f4 | (2 bytes)   |         .byte 6, { NC }              
3397:087 | DONE dir | na 16 16 |        |             |                 06 01                    --  . .
3397:088 | DONE dir | na 16 16 | 0069f6 | (6 bytes)   |         .word nt_hex, xt_unused, 006961 
3397:088 | DONE dir | na 16 16 |        |             |                 e9 69 56 69 61 69        --  . i V i a i
3397:089 | DONE dir | na 16 16 | 0069fc | (6 bytes)   |         .byte 75, 6e, 75, 73, 65, 64 
3397:089 | DONE dir | na 16 16 |        |             |                 75 6e 75 73 65 64        --  u n u s e d
3397:090 | DONE wsp | na 16 16 |        |             |
3397:091 | DONE lbl | na 16 16 | 006a02 |             | nt_page                              
3397:092 | DONE dir | na 16 16 | 006a02 | (2 bytes)   |         .byte 4, { NC }              
3397:092 | DONE dir | na 16 16 |        |             |                 04 01                    --  . .
3397:093 | DONE dir | na 16 16 | 006a04 | (6 bytes)   |         .word nt_unused, xt_page, 0066cb 
3397:093 | DONE dir | na 16 16 |        |             |                 f4 69 bf 66 cb 66        --  . i . f . f
3397:094 | DONE dir | na 16 16 | 006a0a | (4 bytes)   |         .byte 70, 61, 67, 65         
3397:094 | DONE dir | na 16 16 |        |             |                 70 61 67 65              --  p a g e
3397:095 | DONE wsp | na 16 16 |        |             |
3397:096 | DONE lbl | na 16 16 | 006a0e |             | nt_dabs                              
3397:097 | DONE dir | na 16 16 | 006a0e | (2 bytes)   |         .byte 4, { NC }              
3397:097 | DONE dir | na 16 16 |        |             |                 04 01                    --  . .
3397:098 | DONE dir | na 16 16 | 006a10 | (6 bytes)   |         .word nt_page, xt_dabs, 0064ee 
3397:098 | DONE dir | na 16 16 |        |             |                 02 6a e8 64 ee 64        --  . j . d . d
3397:099 | DONE dir | na 16 16 | 006a16 | (4 bytes)   |         .byte 64, 61, 62, 73         
3397:099 | DONE dir | na 16 16 |        |             |                 64 61 62 73              --  d a b s
3397:100 | DONE wsp | na 16 16 |        |             |
3397:101 | DONE lbl | na 16 16 | 006a1a |             | nt_dnegate                           
3397:102 | DONE dir | na 16 16 | 006a1a | (2 bytes)   |         .byte 7, { NC }              
3397:102 | DONE dir | na 16 16 |        |             |                 07 01                    --  . .
3397:103 | DONE dir | na 16 16 | 006a1c | (6 bytes)   |         .word nt_dabs, xt_dnegate, 006517 
3397:103 | DONE dir | na 16 16 |        |             |                 0e 6a 04 65 17 65        --  . j . e . e
3397:104 | DONE dir | na 16 16 | 006a22 | (7 bytes)   |         .byte 64, 6e, 65, 67, 61, 74, 65 
3397:104 | DONE dir | na 16 16 |        |             |                 64 6e 65 67 61 74 65     --  d n e g a t e
3397:105 | DONE wsp | na 16 16 |        |             |
3397:106 | DONE lbl | na 16 16 | 006a29 |             | nt_stod                              
3397:107 | DONE dir | na 16 16 | 006a29 | (2 bytes)   |         .byte 3, { NC }              
3397:107 | DONE dir | na 16 16 |        |             |                 03 01                    --  . .
3397:108 | DONE dir | na 16 16 | 006a2b | (6 bytes)   |         .word nt_dnegate, xt_stod, 0067d4 
3397:108 | DONE dir | na 16 16 |        |             |                 1a 6a c5 67 d4 67        --  . j . g . g
3397:109 | DONE dir | na 16 16 | 006a31 | (3 bytes)   |         .byte 73, 3e, 64             
3397:109 | DONE dir | na 16 16 |        |             |                 73 3e 64                 --  s > d
3397:110 | DONE wsp | na 16 16 |        |             |
3397:111 | DONE lbl | na 16 16 | 006a34 |             | nt_ummod                             
3397:112 | DONE dir | na 16 16 | 006a34 | (2 bytes)   |         .byte 6, { NC }              
3397:112 | DONE dir | na 16 16 |        |             |                 06 01                    --  . .
3397:113 | DONE dir | na 16 16 | 006a36 | (6 bytes)   |         .word nt_stod, xt_ummod, 006955 
3397:113 | DONE dir | na 16 16 |        |             |                 29 6a 05 69 55 69        --  ) j . i U i
3397:114 | DONE dir | na 16 16 | 006a3c | (6 bytes)   |         .byte 75, 6d, 2f, 6d, 6f, 64 
3397:114 | DONE dir | na 16 16 |        |             |                 75 6d 2f 6d 6f 64        --  u m / m o d
3397:115 | DONE wsp | na 16 16 |        |             |
3397:116 | DONE lbl | na 16 16 | 006a42 |             | nt_star                              
3397:117 | DONE dir | na 16 16 | 006a42 | (2 bytes)   |         .byte 1, { NC }              
3397:117 | DONE dir | na 16 16 |        |             |                 01 01                    --  . .
3397:118 | DONE dir | na 16 16 | 006a44 | (6 bytes)   |         .word nt_ummod, xt_star, 006865 
3397:118 | DONE dir | na 16 16 |        |             |                 34 6a 5e 68 65 68        --  4 j ^ h e h
3397:119 | DONE dir | na 16 16 | 006a4a | (1 bytes)   |         .byte 2a                     
3397:119 | DONE dir | na 16 16 |        |             |                 2a                       --  *
3397:120 | DONE wsp | na 16 16 |        |             |
3397:121 | DONE lbl | na 16 16 | 006a4b |             | nt_mstar                             
3397:122 | DONE dir | na 16 16 | 006a4b | (2 bytes)   |         .byte 2, { NC }              
3397:122 | DONE dir | na 16 16 |        |             |                 02 01                    --  . .
3397:123 | DONE dir | na 16 16 | 006a4d | (6 bytes)   |         .word nt_star, xt_mstar, 00665a 
3397:123 | DONE dir | na 16 16 |        |             |                 42 6a 3b 66 5a 66        --  B j ; f Z f
3397:124 | DONE dir | na 16 16 | 006a53 | (2 bytes)   |         .byte 6d, 2a                 
3397:124 | DONE dir | na 16 16 |        |             |                 6d 2a                    --  m *
3397:125 | DONE wsp | na 16 16 |        |             |
3397:126 | DONE lbl | na 16 16 | 006a55 |             | nt_umstar                            
3397:127 | DONE dir | na 16 16 | 006a55 | (2 bytes)   |         .byte 3, { NC }              
3397:127 | DONE dir | na 16 16 |        |             |                 03 01                    --  . .
3397:128 | DONE dir | na 16 16 | 006a57 | (6 bytes)   |         .word nt_mstar, xt_umstar, 006904 
3397:128 | DONE dir | na 16 16 |        |             |                 4b 6a a6 68 04 69        --  K j . h . i
3397:129 | DONE dir | na 16 16 | 006a5d | (3 bytes)   |         .byte 75, 6d, 2a             
3397:129 | DONE dir | na 16 16 |        |             |                 75 6d 2a                 --  u m *
3397:130 | DONE wsp | na 16 16 |        |             |
3397:131 | DONE lbl | na 16 16 | 006a60 |             | nt_count                             
3397:132 | DONE dir | na 16 16 | 006a60 | (2 bytes)   |         .byte 5, { NC }              
3397:132 | DONE dir | na 16 16 |        |             |                 05 01                    --  . .
3397:133 | DONE dir | na 16 16 | 006a62 | (6 bytes)   |         .word nt_umstar, xt_count, 00646d 
3397:133 | DONE dir | na 16 16 |        |             |                 55 6a 5f 64 6d 64        --  U j _ d m d
3397:134 | DONE dir | na 16 16 | 006a68 | (5 bytes)   |         .byte 63, 6f, 75, 6e, 74     
3397:134 | DONE dir | na 16 16 |        |             |                 63 6f 75 6e 74           --  c o u n t
3397:135 | DONE wsp | na 16 16 |        |             |
3397:136 | DONE lbl | na 16 16 | 006a6d |             | nt_abort                             
3397:137 | DONE dir | na 16 16 | 006a6d | (2 bytes)   |         .byte 5, 00                  TODO check flags - NC possible?
3397:137 | DONE dir | na 16 16 |        |             |                 05 00                    --  . .
3397:138 | DONE dir | na 16 16 | 006a6f | (6 bytes)   |         .word nt_count, xt_abort, 0060de 
3397:138 | DONE dir | na 16 16 |        |             |                 60 6a 97 60 de 60        --  ` j . ` . `
3397:139 | DONE dir | na 16 16 | 006a75 | (5 bytes)   |         .byte 61, 62, 6f, 72, 74     
3397:139 | DONE dir | na 16 16 |        |             |                 61 62 6f 72 74           --  a b o r t
3397:140 | DONE wsp | na 16 16 |        |             |
3397:141 | DONE lbl | na 16 16 | 006a7a |             | nt_parse                             
3397:142 | DONE dir | na 16 16 | 006a7a | (2 bytes)   |         .byte 5, 00                  
3397:142 | DONE dir | na 16 16 |        |             |                 05 00                    --  . .
3397:143 | DONE dir | na 16 16 | 006a7c | (6 bytes)   |         .word nt_abort, xt_parse, 006730 
3397:143 | DONE dir | na 16 16 |        |             |                 6d 6a fe 66 30 67        --  m j . f 0 g
3397:144 | DONE dir | na 16 16 | 006a82 | (5 bytes)   |         .byte 70, 61, 72, 73, 65     
3397:144 | DONE dir | na 16 16 |        |             |                 70 61 72 73 65           --  p a r s e
3397:145 | DONE wsp | na 16 16 |        |             |
3397:146 | DONE lbl | na 16 16 | 006a87 |             | nt_quit                              
3397:147 | DONE dir | na 16 16 | 006a87 | (2 bytes)   |         .byte 4, 00                  
3397:147 | DONE dir | na 16 16 |        |             |                 04 00                    --  . .
3397:148 | DONE dir | na 16 16 | 006a89 | (6 bytes)   |         .word nt_parse, xt_quit, 0060de 
3397:148 | DONE dir | na 16 16 |        |             |                 7a 6a 9f 60 de 60        --  z j . ` . `
3397:149 | DONE dir | na 16 16 | 006a8f | (4 bytes)   |         .byte 71, 75, 69, 74         
3397:149 | DONE dir | na 16 16 |        |             |                 71 75 69 74              --  q u i t
3397:150 | DONE wsp | na 16 16 |        |             |
3397:151 | DONE lbl | na 16 16 | 006a93 |             | nt_question                          
3397:152 | DONE dir | na 16 16 | 006a93 | (2 bytes)   |         .byte 1, { NC }              
3397:152 | DONE dir | na 16 16 |        |             |                 01 01                    --  . .
3397:153 | DONE dir | na 16 16 | 006a95 | (6 bytes)   |         .word nt_quit, xt_question, 0061f0 
3397:153 | DONE dir | na 16 16 |        |             |                 87 6a ea 61 f0 61        --  . j . a . a
3397:154 | DONE dir | na 16 16 | 006a9b | (1 bytes)   |         .byte 3f                     
3397:154 | DONE dir | na 16 16 |        |             |                 3f                       --  ?
3397:155 | DONE wsp | na 16 16 |        |             |
3397:156 | DONE lbl | na 16 16 | 006a9c |             | nt_name-int                          
3397:157 | DONE dir | na 16 16 | 006a9c | (2 bytes)   |         .byte 8, { NC }              
3397:157 | DONE dir | na 16 16 |        |             |                 08 01                    --  . .
3397:158 | DONE dir | na 16 16 | 006a9e | (6 bytes)   |         .word nt_question, xt_name-int, 006689 
3397:158 | DONE dir | na 16 16 |        |             |                 93 6a 81 66 89 66        --  . j . f . f
3397:159 | DONE dir | na 16 16 | 006aa4 | (8 bytes)   |         .byte 6e, 61, 6d, 65, 3e, 69, 6e, 74 
3397:159 | DONE dir | na 16 16 |        |             |                 6e 61 6d 65 3e 69 6e 74  --  n a m e > i n t
3397:159 | DONE dir | na 16 16 |        |             |                                          -- 
3397:160 | DONE wsp | na 16 16 |        |             |
3397:161 | DONE lbl | na 16 16 | 006aac |             | nt_cr                                
3397:162 | DONE dir | na 16 16 | 006aac | (2 bytes)   |         .byte 2, { NC }              
3397:162 | DONE dir | na 16 16 |        |             |                 02 01                    --  . .
3397:163 | DONE dir | na 16 16 | 006aae | (6 bytes)   |         .word nt_name-int, xt_cr, 006474 
3397:163 | DONE dir | na 16 16 |        |             |                 9c 6a 6e 64 74 64        --  . j n d t d
3397:164 | DONE dir | na 16 16 | 006ab4 | (2 bytes)   |         .byte 63, 72                 
3397:164 | DONE dir | na 16 16 |        |             |                 63 72                    --  c r
3397:165 | DONE wsp | na 16 16 |        |             |
3397:166 | DONE lbl | na 16 16 | 006ab6 |             | nt_bl                                
3397:167 | DONE dir | na 16 16 | 006ab6 | (2 bytes)   |         .byte 2, { NC }              
3397:167 | DONE dir | na 16 16 |        |             |                 02 01                    --  . .
3397:168 | DONE dir | na 16 16 | 006ab8 | (6 bytes)   |         .word nt_cr, xt_bl, 0063cc   
3397:168 | DONE dir | na 16 16 |        |             |                 ac 6a c5 63 cc 63        --  . j . c . c
3397:169 | DONE dir | na 16 16 | 006abe | (2 bytes)   |         .byte 62, 6c                 
3397:169 | DONE dir | na 16 16 |        |             |                 62 6c                    --  b l
3397:170 | DONE wsp | na 16 16 |        |             |
3397:171 | DONE lbl | na 16 16 | 006ac0 |             | nt_spaces                            
3397:172 | DONE dir | na 16 16 | 006ac0 | (2 bytes)   |         .byte 6, { NC }              
3397:172 | DONE dir | na 16 16 |        |             |                 06 01                    --  . .
3397:173 | DONE dir | na 16 16 | 006ac2 | (6 bytes)   |         .word nt_bl, xt_spaces, 00685d 
3397:173 | DONE dir | na 16 16 |        |             |                 b6 6a 51 68 5d 68        --  . j Q h ] h
3397:174 | DONE dir | na 16 16 | 006ac8 | (6 bytes)   |         .byte 73, 70, 61, 63, 65, 73 
3397:174 | DONE dir | na 16 16 |        |             |                 73 70 61 63 65 73        --  s p a c e s
3397:175 | DONE wsp | na 16 16 |        |             |
3397:176 | DONE lbl | na 16 16 | 006ace |             | nt_space                             
3397:177 | DONE dir | na 16 16 | 006ace | (2 bytes)   |         .byte 5, { NC }              
3397:177 | DONE dir | na 16 16 |        |             |                 05 01                    --  . .
3397:178 | DONE dir | na 16 16 | 006ad0 | (6 bytes)   |         .word nt_spaces, xt_space, 006850 
3397:178 | DONE dir | na 16 16 |        |             |                 c0 6a 4a 68 50 68        --  . j J h P h
3397:179 | DONE dir | na 16 16 | 006ad6 | (5 bytes)   |         .byte 73, 70, 61, 63, 65     
3397:179 | DONE dir | na 16 16 |        |             |                 73 70 61 63 65           --  s p a c e
3397:180 | DONE wsp | na 16 16 |        |             |
3397:181 | DONE lbl | na 16 16 | 006adb |             | nt_dots                              
3397:182 | DONE dir | na 16 16 | 006adb | (2 bytes)   |         .byte 2, { NC }              
3397:182 | DONE dir | na 16 16 |        |             |                 02 01                    --  . .
3397:183 | DONE dir | na 16 16 | 006add | (6 bytes)   |         .word nt_space, xt_dots, 0061a2 
3397:183 | DONE dir | na 16 16 |        |             |                 ce 6a 5b 61 a2 61        --  . j [ a . a
3397:184 | DONE dir | na 16 16 | 006ae3 | (2 bytes)   |         .byte 2e, 73                 
3397:184 | DONE dir | na 16 16 |        |             |                 2e 73                    --  . s
3397:185 | DONE wsp | na 16 16 |        |             |
3397:186 | DONE lbl | na 16 16 | 006ae5 |             | nt_type                              
3397:187 | DONE dir | na 16 16 | 006ae5 | (2 bytes)   |         .byte 4, 0                   
3397:187 | DONE dir | na 16 16 |        |             |                 04 00                    --  . .
3397:188 | DONE dir | na 16 16 | 006ae7 | (6 bytes)   |         .word nt_dots, xt_type, 0068a5 
3397:188 | DONE dir | na 16 16 |        |             |                 db 6a 85 68 a5 68        --  . j . h . h
3397:189 | DONE dir | na 16 16 | 006aed | (4 bytes)   |         .byte 74, 79, 70, 65         
3397:189 | DONE dir | na 16 16 |        |             |                 74 79 70 65              --  t y p e
3397:190 | DONE wsp | na 16 16 |        |             |
3397:191 | DONE lbl | na 16 16 | 006af1 |             | nt_dot                               
3397:192 | DONE dir | na 16 16 | 006af1 | (2 bytes)   |         .byte 1, { NC }              
3397:192 | DONE dir | na 16 16 |        |             |                 01 01                    --  . .
3397:193 | DONE dir | na 16 16 | 006af3 | (6 bytes)   |         .word nt_type, xt_dot, 006138 
3397:193 | DONE dir | na 16 16 |        |             |                 e5 6a 23 61 38 61        --  . j # a 8 a
3397:194 | DONE dir | na 16 16 | 006af9 | (1 bytes)   |         .byte 2e                     
3397:194 | DONE dir | na 16 16 |        |             |                 2e                       --  .
3397:195 | DONE wsp | na 16 16 |        |             |
3397:196 | DONE lbl | na 16 16 | 006afa |             | nt_pad                               
3397:197 | DONE dir | na 16 16 | 006afa | (2 bytes)   |         .byte 3, { NC }              
3397:197 | DONE dir | na 16 16 |        |             |                 03 01                    --  . .
3397:198 | DONE dir | na 16 16 | 006afc | (6 bytes)   |         .word nt_dot, xt_pad, 0066be 
3397:198 | DONE dir | na 16 16 |        |             |                 f1 6a b3 66 be 66        --  . j . f . f
3397:199 | DONE dir | na 16 16 | 006b02 | (3 bytes)   |         .byte 70, 61, 64             
3397:199 | DONE dir | na 16 16 |        |             |                 70 61 64                 --  p a d
3397:200 | DONE wsp | na 16 16 |        |             |
3397:201 | DONE lbl | na 16 16 | 006b05 |             | nt_base                              
3397:202 | DONE dir | na 16 16 | 006b05 | (2 bytes)   |         .byte 4, { NC }              
3397:202 | DONE dir | na 16 16 |        |             |                 04 01                    --  . .
3397:203 | DONE dir | na 16 16 | 006b07 | (6 bytes)   |         .word nt_pad, xt_base, 0063b6 
3397:203 | DONE dir | na 16 16 |        |             |                 fa 6a af 63 b6 63        --  . j . c . c
3397:204 | DONE dir | na 16 16 | 006b0d | (4 bytes)   |         .byte 62, 61, 73, 65         
3397:204 | DONE dir | na 16 16 |        |             |                 62 61 73 65              --  b a s e
3397:205 | DONE wsp | na 16 16 |        |             |
3397:206 | DONE lbl | na 16 16 | 006b11 |             | nt_evaluate                          
3397:207 | DONE dir | na 16 16 | 006b11 | (2 bytes)   |         .byte 8, { NC }              
3397:207 | DONE dir | na 16 16 |        |             |                 08 01                    --  . .
3397:208 | DONE dir | na 16 16 | 006b13 | (6 bytes)   |         .word nt_base, xt_evaluate, 00659a 
3397:208 | DONE dir | na 16 16 |        |             |                 05 6b 6c 65 9a 65        --  . k l e . e
3397:209 | DONE dir | na 16 16 | 006b19 | (8 bytes)   |         .byte 65, 76, 61, 6c, 75, 61, 74, 65 
3397:209 | DONE dir | na 16 16 |        |             |                 65 76 61 6c 75 61 74 65  --  e v a l u a t e
3397:209 | DONE dir | na 16 16 |        |             |                                          -- 
3397:210 | DONE wsp | na 16 16 |        |             |
3397:211 | DONE lbl | na 16 16 | 006b21 |             | nt_cells                             
3397:212 | DONE dir | na 16 16 | 006b21 | (2 bytes)   |         .byte 5, { NC }              2* because we have 16 bit stack
3397:212 | DONE dir | na 16 16 |        |             |                 05 01                    --  . .
3397:213 | DONE dir | na 16 16 | 006b23 | (6 bytes)   |         .word nt_evaluate, xt_two-star, 0062ad 
3397:213 | DONE dir | na 16 16 |        |             |                 11 6b aa 62 ad 62        --  . k . b . b
3397:214 | DONE dir | na 16 16 | 006b29 | (5 bytes)   |         .byte 63, 65, 6c, 6c, 73     
3397:214 | DONE dir | na 16 16 |        |             |                 63 65 6c 6c 73           --  c e l l s
3397:215 | DONE wsp | na 16 16 |        |             |
3397:216 | DONE lbl | na 16 16 | 006b2e |             | nt_dotquote                          
3397:217 | DONE dir | na 16 16 | 006b2e | (2 bytes)   |         .byte 2, { CO + NC + IM }    
3397:217 | DONE dir | na 16 16 |        |             |                 02 07                    --  . .
3397:218 | DONE dir | na 16 16 | 006b30 | (6 bytes)   |         .word nt_cells, xt_dotquote, 00615b 
3397:218 | DONE dir | na 16 16 |        |             |                 21 6b 47 61 5b 61        --  ! k G a [ a
3397:219 | DONE dir | na 16 16 | 006b36 | (2 bytes)   |         .byte 2e, &34                
3397:219 | DONE dir | na 16 16 |        |             |                 2e 22                    --  . "
3397:220 | DONE wsp | na 16 16 |        |             |
3397:221 | DONE lbl | na 16 16 | 006b38 |             | nt_squote                            
3397:222 | DONE dir | na 16 16 | 006b38 | (2 bytes)   |         .byte 2, { IM + NC }         not CO, see source code
3397:222 | DONE dir | na 16 16 |        |             |                 02 03                    --  . .
3397:223 | DONE dir | na 16 16 | 006b3a | (6 bytes)   |         .word nt_dotquote, xt_squote, 0067c4 
3397:223 | DONE dir | na 16 16 |        |             |                 2e 6b b3 67 c4 67        --  . k . g . g
3397:224 | DONE dir | na 16 16 | 006b40 | (2 bytes)   |         .byte 73, &34                
3397:224 | DONE dir | na 16 16 |        |             |                 73 22                    --  s "
3397:225 | DONE wsp | na 16 16 |        |             |
3397:226 | DONE lbl | na 16 16 | 006b42 |             | nt_sliteral                          
3397:227 | DONE dir | na 16 16 | 006b42 | (2 bytes)   |         .byte 8, { IM + CO }         
3397:227 | DONE dir | na 16 16 |        |             |                 08 06                    --  . .
3397:228 | DONE dir | na 16 16 | 006b44 | (6 bytes)   |         .word nt_squote, xt_sliteral, 00681f 
3397:228 | DONE dir | na 16 16 |        |             |                 38 6b d5 67 1f 68        --  8 k . g . h
3397:229 | DONE dir | na 16 16 | 006b4a | (8 bytes)   |         .byte 73, 6c, 69, 74, 65, 72, 61, 6c 
3397:229 | DONE dir | na 16 16 |        |             |                 73 6c 69 74 65 72 61 6c  --  s l i t e r a l
3397:229 | DONE dir | na 16 16 |        |             |                                          -- 
3397:230 | DONE wsp | na 16 16 |        |             |
3397:231 | DONE lbl | na 16 16 | 006b52 |             | nt_brackettick                       
3397:232 | DONE dir | na 16 16 | 006b52 | (2 bytes)   |         .byte 3, { IM + CO }         
3397:232 | DONE dir | na 16 16 |        |             |                 03 06                    --  . .
3397:233 | DONE dir | na 16 16 | 006b54 | (6 bytes)   |         .word nt_sliteral, xt_brackettick, 006208 
3397:233 | DONE dir | na 16 16 |        |             |                 42 6b 02 62 08 62        --  B k . b . b
3397:234 | DONE dir | na 16 16 | 006b5a | (3 bytes)   |         .byte 5b, 27, 5d             
3397:234 | DONE dir | na 16 16 |        |             |                 5b 27 5d                 --  [ ' ]
3397:235 | DONE wsp | na 16 16 |        |             |
3397:236 | DONE lbl | na 16 16 | 006b5d |             | nt_bracketchar                       
3397:237 | DONE dir | na 16 16 | 006b5d | (2 bytes)   |         .byte 6, { IM + CO }         
3397:237 | DONE dir | na 16 16 |        |             |                 06 06                    --  . .
3397:238 | DONE dir | na 16 16 | 006b5f | (6 bytes)   |         .word nt_brackettick, xt_bracketchar, 006217 
3397:238 | DONE dir | na 16 16 |        |             |                 52 6b 11 62 17 62        --  R k . b . b
3397:239 | DONE dir | na 16 16 | 006b65 | (6 bytes)   |         .byte 5b, 63, 68, 61, 72, 5d 
3397:239 | DONE dir | na 16 16 |        |             |                 5b 63 68 61 72 5d        --  [ c h a r ]
3397:240 | DONE wsp | na 16 16 |        |             |
3397:241 | DONE lbl | na 16 16 | 006b6b |             | nt_literal                           
3397:242 | DONE dir | na 16 16 | 006b6b | (2 bytes)   |         .byte 7, { IM + CO }         
3397:242 | DONE dir | na 16 16 |        |             |                 07 06                    --  . .
3397:243 | DONE dir | na 16 16 | 006b6d | (6 bytes)   |         .word nt_bracketchar, xt_literal, 00662d 
3397:243 | DONE dir | na 16 16 |        |             |                 5d 6b 1c 66 2d 66        --  ] k . f - f
3397:244 | DONE dir | na 16 16 | 006b73 | (7 bytes)   |         .byte 6c, 69, 74, 65, 72, 61, 6c 
3397:244 | DONE dir | na 16 16 |        |             |                 6c 69 74 65 72 61 6c     --  l i t e r a l
3397:245 | DONE wsp | na 16 16 |        |             |
3397:246 | DONE lbl | na 16 16 | 006b7a |             | nt_compile-only                      
3397:247 | DONE dir | na 16 16 | 006b7a | (2 bytes)   |         .byte 0c, { NC }             
3397:247 | DONE dir | na 16 16 |        |             |                 0c 01                    --   .
3397:248 | DONE dir | na 16 16 | 006b7c | (6 bytes)   |         .word nt_literal, xt_compile-only, 006431 
3397:248 | DONE dir | na 16 16 |        |             |                 6b 6b 29 64 31 64        --  k k ) d 1 d
3397:249 | DONE dir | na 16 16 | 006b82 | (12 bytes)  |         .byte 63, 6f, 6d, 70, 69, 6c, 65, 2d, 6f, 6e, 6c, 79 
3397:249 | DONE dir | na 16 16 |        |             |                 63 6f 6d 70 69 6c 65 2d  --  c o m p i l e -
3397:249 | DONE dir | na 16 16 |        |             |                 6f 6e 6c 79              --  o n l y
3397:250 | DONE wsp | na 16 16 |        |             |
3397:251 | DONE lbl | na 16 16 | 006b8e |             | nt_immediate                         
3397:252 | DONE dir | na 16 16 | 006b8e | (2 bytes)   |         .byte 9, { NC }              
3397:252 | DONE dir | na 16 16 |        |             |                 09 01                    --  	 .
3397:253 | DONE dir | na 16 16 | 006b90 | (6 bytes)   |         .word nt_compile-only, xt_immediate, 006608 
3397:253 | DONE dir | na 16 16 |        |             |                 7a 6b 00 66 08 66        --  z k . f . f
3397:254 | DONE dir | na 16 16 | 006b96 | (9 bytes)   |         .byte 69, 6d, 6d, 65, 64, 69, 61, 74, 65 
3397:254 | DONE dir | na 16 16 |        |             |                 69 6d 6d 65 64 69 61 74  --  i m m e d i a t
3397:254 | DONE dir | na 16 16 |        |             |                 65                       --  e
3397:255 | DONE wsp | na 16 16 |        |             |
3397:256 | DONE lbl | na 16 16 | 006b9f |             | nt_postpone                          
3397:257 | DONE dir | na 16 16 | 006b9f | (2 bytes)   |         .byte 8, { IM + CO }         
3397:257 | DONE dir | na 16 16 |        |             |                 08 06                    --  . .
3397:258 | DONE dir | na 16 16 | 006ba1 | (6 bytes)   |         .word nt_immediate, xt_postpone, 006766 
3397:258 | DONE dir | na 16 16 |        |             |                 8e 6b 31 67 66 67        --  . k 1 g f g
3397:259 | DONE dir | na 16 16 | 006ba7 | (8 bytes)   |         .byte 70, 6f, 73, 74, 70, 6f, 6e, 65 
3397:259 | DONE dir | na 16 16 |        |             |                 70 6f 73 74 70 6f 6e 65  --  p o s t p o n e
3397:259 | DONE dir | na 16 16 |        |             |                                          -- 
3397:260 | DONE wsp | na 16 16 |        |             |
3397:261 | DONE lbl | na 16 16 | 006baf |             | nt_rightbracket                      
3397:262 | DONE dir | na 16 16 | 006baf | (2 bytes)   |         .byte 1, { NC }              
3397:262 | DONE dir | na 16 16 |        |             |                 01 01                    --  . .
3397:263 | DONE dir | na 16 16 | 006bb1 | (6 bytes)   |         .word nt_postpone, xt_rightbracket, 006210 
3397:263 | DONE dir | na 16 16 |        |             |                 9f 6b 0b 62 10 62        --  . k  b . b
3397:264 | DONE dir | na 16 16 | 006bb7 | (1 bytes)   |         .byte 5d                     
3397:264 | DONE dir | na 16 16 |        |             |                 5d                       --  ]
3397:265 | DONE wsp | na 16 16 |        |             |
3397:266 | DONE lbl | na 16 16 | 006bb8 |             | nt_leftbracket                       
3397:267 | DONE dir | na 16 16 | 006bb8 | (2 bytes)   |         .byte 1, { IM + CO }         
3397:267 | DONE dir | na 16 16 |        |             |                 01 06                    --  . .
3397:268 | DONE dir | na 16 16 | 006bba | (6 bytes)   |         .word nt_rightbracket, xt_leftbracket, 00620a 
3397:268 | DONE dir | na 16 16 |        |             |                 af 6b 08 62 0a 62        --  . k . b 
 b
3397:269 | DONE dir | na 16 16 | 006bc0 | (1 bytes)   |         .byte 5b                     
3397:269 | DONE dir | na 16 16 |        |             |                 5b                       --  [
3397:270 | DONE wsp | na 16 16 |        |             |
3397:271 | DONE lbl | na 16 16 | 006bc1 |             | nt_zbranch                           
3397:272 | DONE dir | na 16 16 | 006bc1 | (2 bytes)   |         .byte 7, { IM + CO }         
3397:272 | DONE dir | na 16 16 |        |             |                 07 06                    --  . .
3397:273 | DONE dir | na 16 16 | 006bc3 | (6 bytes)   |         .word nt_leftbracket, xt_zbranch, 00627d 
3397:273 | DONE dir | na 16 16 |        |             |                 b8 6b 77 62 7d 62        --  . k w b } b
3397:274 | DONE dir | na 16 16 | 006bc9 | (7 bytes)   |         .byte 30, 62, 72, 61, 6e, 63, 68 
3397:274 | DONE dir | na 16 16 |        |             |                 30 62 72 61 6e 63 68     --  0 b r a n c h
3397:275 | DONE wsp | na 16 16 |        |             |
3397:276 | DONE lbl | na 16 16 | 006bd0 |             | nt_branch                            
3397:277 | DONE dir | na 16 16 | 006bd0 | (2 bytes)   |         .byte 6, { IM + CO }         
3397:277 | DONE dir | na 16 16 |        |             |                 06 06                    --  . .
3397:278 | DONE dir | na 16 16 | 006bd2 | (6 bytes)   |         .word nt_zbranch, xt_branch, 0063d3 
3397:278 | DONE dir | na 16 16 |        |             |                 c1 6b cd 63 d3 63        --  . k . c . c
3397:279 | DONE dir | na 16 16 | 006bd8 | (6 bytes)   |         .byte 62, 72, 61, 6e, 63, 68 
3397:279 | DONE dir | na 16 16 |        |             |                 62 72 61 6e 63 68        --  b r a n c h
3397:280 | DONE wsp | na 16 16 |        |             |
3397:281 | DONE lbl | na 16 16 | 006bde |             | nt_again                             
3397:282 | DONE dir | na 16 16 | 006bde | (2 bytes)   |         .byte 5, { IM + NC + CO }    
3397:282 | DONE dir | na 16 16 |        |             |                 05 07                    --  . .
3397:283 | DONE dir | na 16 16 | 006be0 | (6 bytes)   |         .word nt_branch, xt_again, 00637e 
3397:283 | DONE dir | na 16 16 |        |             |                 d0 6b 69 63 7e 63        --  . k i c ~ c
3397:284 | DONE dir | na 16 16 | 006be6 | (5 bytes)   |         .byte 61, 67, 61, 69, 6e     
3397:284 | DONE dir | na 16 16 |        |             |                 61 67 61 69 6e           --  a g a i n
3397:285 | DONE wsp | na 16 16 |        |             |
3397:286 | DONE lbl | na 16 16 | 006beb |             | nt_begin                             
3397:287 | DONE dir | na 16 16 | 006beb | (2 bytes)   |         .byte 5, { IM + NC + CO }    
3397:287 | DONE dir | na 16 16 |        |             |                 05 07                    --  . .
3397:288 | DONE dir | na 16 16 | 006bed | (6 bytes)   |         .word nt_again, xt_begin, 0063c4 
3397:288 | DONE dir | na 16 16 |        |             |                 de 6b be 63 c4 63        --  . k . c . c
3397:289 | DONE dir | na 16 16 | 006bf3 | (5 bytes)   |         .byte 62, 65, 67, 69, 6e     
3397:289 | DONE dir | na 16 16 |        |             |                 62 65 67 69 6e           --  b e g i n
3397:290 | DONE wsp | na 16 16 |        |             |
3397:291 | DONE lbl | na 16 16 | 006bf8 |             | nt_compilecomma                      
3397:292 | DONE dir | na 16 16 | 006bf8 | (2 bytes)   |         .byte 08, { CO }             
3397:292 | DONE dir | na 16 16 |        |             |                 08 04                    --  . .
3397:293 | DONE dir | na 16 16 | 006bfa | (6 bytes)   |         .word nt_begin, xt_compilecomma, 006444 
3397:293 | DONE dir | na 16 16 |        |             |                 eb 6b 32 64 44 64        --  . k 2 d D d
3397:294 | DONE dir | na 16 16 | 006c00 | (8 bytes)   |         .byte 63, 6f, 6d, 70, 69, 6c, 65, 2c 
3397:294 | DONE dir | na 16 16 |        |             |                 63 6f 6d 70 69 6c 65 2c  --  c o m p i l e ,
3397:294 | DONE dir | na 16 16 |        |             |                                          -- 
3397:295 | DONE wsp | na 16 16 |        |             |
3397:296 | DONE lbl | na 16 16 | 006c08 |             | nt_semicolon                         
3397:297 | DONE dir | na 16 16 | 006c08 | (2 bytes)   |         .byte 1, { CO + IM }         
3397:297 | DONE dir | na 16 16 |        |             |                 01 06                    --  . .
3397:298 | DONE dir | na 16 16 | 006c0a | (6 bytes)   |         .word nt_compilecomma, xt_semicolon, 0061e9 
3397:298 | DONE dir | na 16 16 |        |             |                 f8 6b d1 61 e9 61        --  . k . a . a
3397:299 | DONE dir | na 16 16 | 006c10 | (1 bytes)   |         .byte 3b                     
3397:299 | DONE dir | na 16 16 |        |             |                 3b                       --  ;
3397:300 | DONE wsp | na 16 16 |        |             |
3397:301 | DONE lbl | na 16 16 | 006c11 |             | nt_colon                             
3397:302 | DONE dir | na 16 16 | 006c11 | (2 bytes)   |         .byte 1, { NC }              
3397:302 | DONE dir | na 16 16 |        |             |                 01 01                    --  . .
3397:303 | DONE dir | na 16 16 | 006c13 | (6 bytes)   |         .word nt_semicolon, xt_colon, 0061d0 
3397:303 | DONE dir | na 16 16 |        |             |                 08 6c af 61 d0 61        --  . l . a . a
3397:304 | DONE dir | na 16 16 | 006c19 | (1 bytes)   |         .byte 3a                     
3397:304 | DONE dir | na 16 16 |        |             |                 3a                       --  :
3397:305 | DONE wsp | na 16 16 |        |             |
3397:306 | DONE lbl | na 16 16 | 006c1a |             | nt_allot                             
3397:307 | DONE dir | na 16 16 | 006c1a | (2 bytes)   |         .byte 5, { NC }              
3397:307 | DONE dir | na 16 16 |        |             |                 05 01                    --  . .
3397:308 | DONE dir | na 16 16 | 006c1c | (6 bytes)   |         .word nt_colon, xt_allot, 0063a7 
3397:308 | DONE dir | na 16 16 |        |             |                 11 6c 7f 63 a7 63        --  . l . c . c
3397:309 | DONE dir | na 16 16 | 006c22 | (5 bytes)   |         .byte 61, 6c, 6c, 6f, 74     
3397:309 | DONE dir | na 16 16 |        |             |                 61 6c 6c 6f 74           --  a l l o t
3397:310 | DONE wsp | na 16 16 |        |             |
3397:311 | DONE lbl | na 16 16 | 006c27 |             | nt_does                              
3397:312 | DONE dir | na 16 16 | 006c27 | (2 bytes)   |         .byte 5, { IM + CO }         
3397:312 | DONE dir | na 16 16 |        |             |                 05 06                    --  . .
3397:313 | DONE dir | na 16 16 | 006c29 | (6 bytes)   |         .word nt_allot, xt_does, 006524 
3397:313 | DONE dir | na 16 16 |        |             |                 1a 6c 18 65 24 65        --  . l . e $ e
3397:314 | DONE dir | na 16 16 | 006c2f | (5 bytes)   |         .byte 64, 6f, 65, 73, 3e     
3397:314 | DONE dir | na 16 16 |        |             |                 64 6f 65 73 3e           --  d o e s >
3397:315 | DONE wsp | na 16 16 |        |             |
3397:316 | DONE lbl | na 16 16 | 006c34 |             | nt_create                            
3397:317 | DONE dir | na 16 16 | 006c34 | (2 bytes)   |         .byte 6, { NC }              
3397:317 | DONE dir | na 16 16 |        |             |                 06 01                    --  . .
3397:318 | DONE dir | na 16 16 | 006c36 | (6 bytes)   |         .word nt_does, xt_create, 0064e7 
3397:318 | DONE dir | na 16 16 |        |             |                 27 6c 75 64 e7 64        --  ' l u d . d
3397:319 | DONE dir | na 16 16 | 006c3c | (6 bytes)   |         .byte 63, 72, 65, 61, 74, 65 
3397:319 | DONE dir | na 16 16 |        |             |                 63 72 65 61 74 65        --  c r e a t e
3397:320 | DONE wsp | na 16 16 |        |             |
3397:321 | DONE lbl | na 16 16 | 006c42 |             | nt_name-string                       
3397:322 | DONE dir | na 16 16 | 006c42 | (2 bytes)   |         .byte 0b, { NC }             
3397:322 | DONE dir | na 16 16 |        |             |                 0b 01                    --   .
3397:323 | DONE dir | na 16 16 | 006c44 | (6 bytes)   |         .word nt_create, xt_name-string, 00669a 
3397:323 | DONE dir | na 16 16 |        |             |                 34 6c 8a 66 9a 66        --  4 l . f . f
3397:324 | DONE dir | na 16 16 | 006c4a | (11 bytes)  |         .byte 6e, 61, 6d, 65, 3e, 73, 74, 72, 69, 6e, 67 
3397:324 | DONE dir | na 16 16 |        |             |                 6e 61 6d 65 3e 73 74 72  --  n a m e > s t r
3397:324 | DONE dir | na 16 16 |        |             |                 69 6e 67                 --  i n g
3397:325 | DONE wsp | na 16 16 |        |             |
3397:326 | DONE lbl | na 16 16 | 006c55 |             | nt_2dup                              
3397:327 | DONE dir | na 16 16 | 006c55 | (2 bytes)   |         .byte 4, { NC }              
3397:327 | DONE dir | na 16 16 |        |             |                 04 01                    --  . .
3397:328 | DONE dir | na 16 16 | 006c57 | (6 bytes)   |         .word nt_name-string, xt_2dup, 0062bf 
3397:328 | DONE dir | na 16 16 |        |             |                 42 6c b5 62 bf 62        --  B l . b . b
3397:329 | DONE dir | na 16 16 | 006c5d | (4 bytes)   |         .byte 32, 64, 75, 70         
3397:329 | DONE dir | na 16 16 |        |             |                 32 64 75 70              --  2 d u p
3397:330 | DONE wsp | na 16 16 |        |             |
3397:331 | DONE lbl | na 16 16 | 006c61 |             | nt_abs                               
3397:332 | DONE dir | na 16 16 | 006c61 | (2 bytes)   |         .byte 3, { NC }              
3397:332 | DONE dir | na 16 16 |        |             |                 03 01                    --  . .
3397:333 | DONE dir | na 16 16 | 006c63 | (6 bytes)   |         .word nt_2dup, xt_abs, 0062e4 
3397:333 | DONE dir | na 16 16 |        |             |                 55 6c dc 62 e4 62        --  U l . b . b
3397:334 | DONE dir | na 16 16 | 006c69 | (3 bytes)   |         .byte 61, 62, 73             
3397:334 | DONE dir | na 16 16 |        |             |                 61 62 73                 --  a b s
3397:335 | DONE wsp | na 16 16 |        |             |
3397:336 | DONE lbl | na 16 16 | 006c6c |             | nt_state                             
3397:337 | DONE dir | na 16 16 | 006c6c | (2 bytes)   |         .byte 5, { NC }              
3397:337 | DONE dir | na 16 16 |        |             |                 05 01                    --  . .
3397:338 | DONE dir | na 16 16 | 006c6e | (6 bytes)   |         .word nt_abs, xt_state, 00686d 
3397:338 | DONE dir | na 16 16 |        |             |                 61 6c 66 68 6d 68        --  a l f h m h
3397:339 | DONE dir | na 16 16 | 006c74 | (5 bytes)   |         .byte 73, 74, 61, 74, 65     
3397:339 | DONE dir | na 16 16 |        |             |                 73 74 61 74 65           --  s t a t e
3397:340 | DONE wsp | na 16 16 |        |             |
3397:341 | DONE lbl | na 16 16 | 006c79 |             | nt_to-in                             
3397:342 | DONE dir | na 16 16 | 006c79 | (2 bytes)   |         .byte 3, { NC }              
3397:342 | DONE dir | na 16 16 |        |             |                 03 01                    --  . .
3397:343 | DONE dir | na 16 16 | 006c7b | (6 bytes)   |         .word nt_state, xt_to-in, 00611a 
3397:343 | DONE dir | na 16 16 |        |             |                 6c 6c 13 61 1a 61        --  l l . a . a
3397:344 | DONE dir | na 16 16 | 006c81 | (3 bytes)   |         .byte 3e, 69, 6e             
3397:344 | DONE dir | na 16 16 |        |             |                 3e 69 6e                 --  > i n
3397:345 | DONE wsp | na 16 16 |        |             |
3397:346 | DONE lbl | na 16 16 | 006c84 |             | nt_source                            
3397:347 | DONE dir | na 16 16 | 006c84 | (2 bytes)   |         .byte 6, { NC }              
3397:347 | DONE dir | na 16 16 |        |             |                 06 01                    --  . .
3397:348 | DONE dir | na 16 16 | 006c86 | (6 bytes)   |         .word nt_to-in, xt_source, 006842 
3397:348 | DONE dir | na 16 16 |        |             |                 79 6c 36 68 42 68        --  y l 6 h B h
3397:349 | DONE dir | na 16 16 | 006c8c | (6 bytes)   |         .byte 73, 6f, 75, 72, 63, 65 
3397:349 | DONE dir | na 16 16 |        |             |                 73 6f 75 72 63 65        --  s o u r c e
3397:350 | DONE wsp | na 16 16 |        |             |
3397:351 | DONE lbl | na 16 16 | 006c92 |             | nt_depth                             
3397:352 | DONE dir | na 16 16 | 006c92 | (2 bytes)   |         .byte 5, { NC }              
3397:352 | DONE dir | na 16 16 |        |             |                 05 01                    --  . .
3397:353 | DONE dir | na 16 16 | 006c94 | (6 bytes)   |         .word nt_source, xt_depth, 006503 
3397:353 | DONE dir | na 16 16 |        |             |                 84 6c f5 64 03 65        --  . l . d . e
3397:354 | DONE dir | na 16 16 | 006c9a | (5 bytes)   |         .byte 64, 65, 70, 74, 68     
3397:354 | DONE dir | na 16 16 |        |             |                 64 65 70 74 68           --  d e p t h
3397:355 | DONE wsp | na 16 16 |        |             |
3397:356 | DONE lbl | na 16 16 | 006c9f |             | nt_constant                          
3397:357 | DONE dir | na 16 16 | 006c9f | (2 bytes)   |         .byte 8, { NC }              
3397:357 | DONE dir | na 16 16 |        |             |                 08 01                    --  . .
3397:358 | DONE dir | na 16 16 | 006ca1 | (6 bytes)   |         .word nt_depth, xt_constant, 00645e 
3397:358 | DONE dir | na 16 16 |        |             |                 92 6c 45 64 5e 64        --  . l E d ^ d
3397:359 | DONE dir | na 16 16 | 006ca7 | (8 bytes)   |         .byte 63, 6f, 6e, 73, 74, 61, 6e, 74 
3397:359 | DONE dir | na 16 16 |        |             |                 63 6f 6e 73 74 61 6e 74  --  c o n s t a n t
3397:359 | DONE dir | na 16 16 |        |             |                                          -- 
3397:360 | DONE wsp | na 16 16 |        |             |
3397:361 | DONE lbl | na 16 16 | 006caf |             | nt_variable                          
3397:362 | DONE dir | na 16 16 | 006caf | (2 bytes)   |         .byte 8, { NC }              
3397:362 | DONE dir | na 16 16 |        |             |                 08 01                    --  . .
3397:363 | DONE dir | na 16 16 | 006cb1 | (6 bytes)   |         .word nt_constant, xt_variable, 00696e 
3397:363 | DONE dir | na 16 16 |        |             |                 9f 6c 62 69 6e 69        --  . l b i n i
3397:364 | DONE dir | na 16 16 | 006cb7 | (8 bytes)   |         .byte 76, 61, 72, 69, 61, 62, 6c, 65 
3397:364 | DONE dir | na 16 16 |        |             |                 76 61 72 69 61 62 6c 65  --  v a r i a b l e
3397:364 | DONE dir | na 16 16 |        |             |                                          -- 
3397:365 | DONE wsp | na 16 16 |        |             |
3397:366 | DONE lbl | na 16 16 | 006cbf |             | nt_tick                              
3397:367 | DONE dir | na 16 16 | 006cbf | (2 bytes)   |         .byte 1, { NC }              
3397:367 | DONE dir | na 16 16 |        |             |                 01 01                    --  . .
3397:368 | DONE dir | na 16 16 | 006cc1 | (6 bytes)   |         .word nt_variable, xt_tick, 0062db 
3397:368 | DONE dir | na 16 16 |        |             |                 af 6c c0 62 db 62        --  . l . b . b
3397:369 | DONE dir | na 16 16 | 006cc7 | (1 bytes)   |         .byte 27                     hex for "'"
3397:369 | DONE dir | na 16 16 |        |             |                 27                       --  '
3397:370 | DONE wsp | na 16 16 |        |             |
3397:371 | DONE lbl | na 16 16 | 006cc8 |             | nt_min                               
3397:372 | DONE dir | na 16 16 | 006cc8 | (2 bytes)   |         .byte 3, { NC }              
3397:372 | DONE dir | na 16 16 |        |             |                 03 01                    --  . .
3397:373 | DONE dir | na 16 16 | 006cca | (6 bytes)   |         .word nt_tick, xt_min, 006680 
3397:373 | DONE dir | na 16 16 |        |             |                 bf 6c 6e 66 80 66        --  . l n f . f
3397:374 | DONE dir | na 16 16 | 006cd0 | (3 bytes)   |         .byte 6d, 69, 6e             
3397:374 | DONE dir | na 16 16 |        |             |                 6d 69 6e                 --  m i n
3397:375 | DONE wsp | na 16 16 |        |             |
3397:376 | DONE lbl | na 16 16 | 006cd3 |             | nt_max                               
3397:377 | DONE dir | na 16 16 | 006cd3 | (2 bytes)   |         .byte 3, { NC }              
3397:377 | DONE dir | na 16 16 |        |             |                 03 01                    --  . .
3397:378 | DONE dir | na 16 16 | 006cd5 | (6 bytes)   |         .word nt_min, xt_max, 00666d 
3397:378 | DONE dir | na 16 16 |        |             |                 c8 6c 5b 66 6d 66        --  . l [ f m f
3397:379 | DONE dir | na 16 16 | 006cdb | (3 bytes)   |         .byte 6d, 61, 78             
3397:379 | DONE dir | na 16 16 |        |             |                 6d 61 78                 --  m a x
3397:380 | DONE wsp | na 16 16 |        |             |
3397:381 | DONE lbl | na 16 16 | 006cde |             | nt_negate                            
3397:382 | DONE dir | na 16 16 | 006cde | (2 bytes)   |         .byte 6, { NC }              
3397:382 | DONE dir | na 16 16 |        |             |                 06 01                    --  . .
3397:383 | DONE dir | na 16 16 | 006ce0 | (6 bytes)   |         .word nt_max, xt_negate, 0066a1 
3397:383 | DONE dir | na 16 16 |        |             |                 d3 6c 9b 66 a1 66        --  . l . f . f
3397:384 | DONE dir | na 16 16 | 006ce6 | (6 bytes)   |         .byte 6e, 65, 67, 61, 74, 65 
3397:384 | DONE dir | na 16 16 |        |             |                 6e 65 67 61 74 65        --  n e g a t e
3397:385 | DONE wsp | na 16 16 |        |             |
3397:386 | DONE lbl | na 16 16 | 006cec |             | nt_invert                            
3397:387 | DONE dir | na 16 16 | 006cec | (2 bytes)   |         .byte 6, { NC }              
3397:387 | DONE dir | na 16 16 |        |             |                 06 01                    --  . .
3397:388 | DONE dir | na 16 16 | 006cee | (6 bytes)   |         .word nt_negate, xt_invert, 00660e 
3397:388 | DONE dir | na 16 16 |        |             |                 de 6c 09 66 0e 66        --  . l 	 f . f
3397:389 | DONE dir | na 16 16 | 006cf4 | (6 bytes)   |         .byte 69, 6e, 76, 65, 72, 74 
3397:389 | DONE dir | na 16 16 |        |             |                 69 6e 76 65 72 74        --  i n v e r t
3397:390 | DONE wsp | na 16 16 |        |             |
3397:391 | DONE lbl | na 16 16 | 006cfa |             | nt_char                              
3397:392 | DONE dir | na 16 16 | 006cfa | (2 bytes)   |         .byte 4, { NC }              
3397:392 | DONE dir | na 16 16 |        |             |                 04 01                    --  . .
3397:393 | DONE dir | na 16 16 | 006cfc | (6 bytes)   |         .word nt_invert, xt_char, 006428 
3397:393 | DONE dir | na 16 16 |        |             |                 ec 6c 11 64 28 64        --  . l . d ( d
3397:394 | DONE dir | na 16 16 | 006d02 | (4 bytes)   |         .byte 63, 68, 61, 72         
3397:394 | DONE dir | na 16 16 |        |             |                 63 68 61 72              --  c h a r
3397:395 | DONE wsp | na 16 16 |        |             |
3397:396 | DONE lbl | na 16 16 | 006d06 |             | nt_xor                               
3397:397 | DONE dir | na 16 16 | 006d06 | (2 bytes)   |         .byte 3, { NC }              
3397:397 | DONE dir | na 16 16 |        |             |                 03 01                    --  . .
3397:398 | DONE dir | na 16 16 | 006d08 | (6 bytes)   |         .word nt_char, xt_xor, 00699d 
3397:398 | DONE dir | na 16 16 |        |             |                 fa 6c 97 69 9d 69        --  . l . i . i
3397:399 | DONE dir | na 16 16 | 006d0e | (3 bytes)   |         .byte 78, 6f, 72             
3397:399 | DONE dir | na 16 16 |        |             |                 78 6f 72                 --  x o r
3397:400 | DONE wsp | na 16 16 |        |             |
3397:401 | DONE lbl | na 16 16 | 006d11 |             | nt_or                                
3397:402 | DONE dir | na 16 16 | 006d11 | (2 bytes)   |         .byte 2, { NC }              
3397:402 | DONE dir | na 16 16 |        |             |                 02 01                    --  . .
3397:403 | DONE dir | na 16 16 | 006d13 | (6 bytes)   |         .word nt_xor, xt_or, 0066ab  
3397:403 | DONE dir | na 16 16 |        |             |                 06 6d a5 66 ab 66        --  . m . f . f
3397:404 | DONE dir | na 16 16 | 006d19 | (2 bytes)   |         .byte 6f, 72                 
3397:404 | DONE dir | na 16 16 |        |             |                 6f 72                    --  o r
3397:405 | DONE wsp | na 16 16 |        |             |
3397:406 | DONE lbl | na 16 16 | 006d1b |             | nt_and                               
3397:407 | DONE dir | na 16 16 | 006d1b | (2 bytes)   |         .byte 3, { NC }              
3397:407 | DONE dir | na 16 16 |        |             |                 03 01                    --  . .
3397:408 | DONE dir | na 16 16 | 006d1d | (6 bytes)   |         .word nt_or, xt_and, 0063ae  
3397:408 | DONE dir | na 16 16 |        |             |                 11 6d a8 63 ae 63        --  . m . c . c
3397:409 | DONE dir | na 16 16 | 006d23 | (3 bytes)   |         .byte 61, 6e, 64             
3397:409 | DONE dir | na 16 16 |        |             |                 61 6e 64                 --  a n d
3397:410 | DONE wsp | na 16 16 |        |             |
3397:411 | DONE lbl | na 16 16 | 006d26 |             | nt_c-comma                           
3397:412 | DONE dir | na 16 16 | 006d26 | (2 bytes)   |         .byte 2, { NC }              
3397:412 | DONE dir | na 16 16 |        |             |                 02 01                    --  . .
3397:413 | DONE dir | na 16 16 | 006d28 | (6 bytes)   |         .word nt_and, xt_c-comma, 0063f4 
3397:413 | DONE dir | na 16 16 |        |             |                 1b 6d e7 63 f4 63        --  . m . c . c
3397:414 | DONE dir | na 16 16 | 006d2e | (2 bytes)   |         .byte 63, 2c                 
3397:414 | DONE dir | na 16 16 |        |             |                 63 2c                    --  c ,
3397:415 | DONE wsp | na 16 16 |        |             |
3397:416 | DONE lbl | na 16 16 | 006d30 |             | nt_c-fetch                           
3397:417 | DONE dir | na 16 16 | 006d30 | (2 bytes)   |         .byte 2, { NC }              
3397:417 | DONE dir | na 16 16 |        |             |                 02 01                    --  . .
3397:418 | DONE dir | na 16 16 | 006d32 | (6 bytes)   |         .word nt_c-comma, xt_c-fetch, 006400 
3397:418 | DONE dir | na 16 16 |        |             |                 26 6d f5 63 00 64        --  & m . c . d
3397:419 | DONE dir | na 16 16 | 006d38 | (2 bytes)   |         .byte 63, 40                 
3397:419 | DONE dir | na 16 16 |        |             |                 63 40                    --  c @
3397:420 | DONE wsp | na 16 16 |        |             |
3397:421 | DONE lbl | na 16 16 | 006d3a |             | nt_c-store                           
3397:422 | DONE dir | na 16 16 | 006d3a | (2 bytes)   |         .byte 2, { NC }              
3397:422 | DONE dir | na 16 16 |        |             |                 02 01                    --  . .
3397:423 | DONE dir | na 16 16 | 006d3c | (6 bytes)   |         .word nt_c-fetch, xt_c-store, 006410 
3397:423 | DONE dir | na 16 16 |        |             |                 30 6d 01 64 10 64        --  0 m . d . d
3397:424 | DONE dir | na 16 16 | 006d42 | (2 bytes)   |         .byte 63, 21                 
3397:424 | DONE dir | na 16 16 |        |             |                 63 21                    --  c !
3397:425 | DONE wsp | na 16 16 |        |             |
3397:426 | DONE lbl | na 16 16 | 006d44 |             | nt_two-star                          
3397:427 | DONE dir | na 16 16 | 006d44 | (2 bytes)   |         .byte 2, { NC }              
3397:427 | DONE dir | na 16 16 |        |             |                 02 01                    --  . .
3397:428 | DONE dir | na 16 16 | 006d46 | (6 bytes)   |         .word nt_c-store, xt_two-star, 0062ad 
3397:428 | DONE dir | na 16 16 |        |             |                 3a 6d aa 62 ad 62        --  : m . b . b
3397:429 | DONE dir | na 16 16 | 006d4c | (2 bytes)   |         .byte 32, 2a                 
3397:429 | DONE dir | na 16 16 |        |             |                 32 2a                    --  2 *
3397:430 | DONE wsp | na 16 16 |        |             |
3397:431 | DONE lbl | na 16 16 | 006d4e |             | nt_minus                             
3397:432 | DONE dir | na 16 16 | 006d4e | (2 bytes)   |         .byte 1, { NC }              
3397:432 | DONE dir | na 16 16 |        |             |                 01 01                    --  . .
3397:433 | DONE dir | na 16 16 | 006d50 | (6 bytes)   |         .word nt_two-star, xt_minus, 00622a 
3397:433 | DONE dir | na 16 16 |        |             |                 44 6d 20 62 2a 62        --  D m   b * b
3397:434 | DONE dir | na 16 16 | 006d56 | (1 bytes)   |         .byte 2d                     
3397:434 | DONE dir | na 16 16 |        |             |                 2d                       --  -
3397:435 | DONE wsp | na 16 16 |        |             |
3397:436 | DONE lbl | na 16 16 | 006d57 |             | nt_plus                              
3397:437 | DONE dir | na 16 16 | 006d57 | (2 bytes)   |         .byte 1, { NC }              
3397:437 | DONE dir | na 16 16 |        |             |                 01 01                    --  . .
3397:438 | DONE dir | na 16 16 | 006d59 | (6 bytes)   |         .word nt_minus, xt_plus, 00621f 
3397:438 | DONE dir | na 16 16 |        |             |                 4e 6d 18 62 1f 62        --  N m . b . b
3397:439 | DONE dir | na 16 16 | 006d5f | (1 bytes)   |         .byte 2b                     
3397:439 | DONE dir | na 16 16 |        |             |                 2b                       --  +
3397:440 | DONE wsp | na 16 16 |        |             |
3397:441 | DONE lbl | na 16 16 | 006d60 |             | nt_one-minus                         
3397:442 | DONE dir | na 16 16 | 006d60 | (2 bytes)   |         .byte 2, { NC }              
3397:442 | DONE dir | na 16 16 |        |             |                 02 01                    --  . .
3397:443 | DONE dir | na 16 16 | 006d62 | (6 bytes)   |         .word nt_plus, xt_one-minus, 00629f 
3397:443 | DONE dir | na 16 16 |        |             |                 57 6d 9e 62 9f 62        --  W m . b . b
3397:444 | DONE dir | na 16 16 | 006d68 | (2 bytes)   |         .byte 31, 2d                 
3397:444 | DONE dir | na 16 16 |        |             |                 31 2d                    --  1 -
3397:445 | DONE wsp | na 16 16 |        |             |
3397:446 | DONE lbl | na 16 16 | 006d6a |             | nt_one-plus                          
3397:447 | DONE dir | na 16 16 | 006d6a | (2 bytes)   |         .byte 2, { NC }              
3397:447 | DONE dir | na 16 16 |        |             |                 02 01                    --  . .
3397:448 | DONE dir | na 16 16 | 006d6c | (6 bytes)   |         .word nt_one-minus, xt_one-plus, 0062a1 
3397:448 | DONE dir | na 16 16 |        |             |                 60 6d a0 62 a1 62        --  ` m . b . b
3397:449 | DONE dir | na 16 16 | 006d72 | (2 bytes)   |         .byte 31, 2b                 
3397:449 | DONE dir | na 16 16 |        |             |                 31 2b                    --  1 +
3397:450 | DONE wsp | na 16 16 |        |             |
3397:451 | DONE lbl | na 16 16 | 006d74 |             | nt_zero-notequal                     
3397:452 | DONE dir | na 16 16 | 006d74 | (2 bytes)   |         .byte 3, { NC }              
3397:452 | DONE dir | na 16 16 |        |             |                 03 01                    --  . .
3397:453 | DONE dir | na 16 16 | 006d76 | (6 bytes)   |         .word nt_one-plus, xt_zero-notequal, 00626b 
3397:453 | DONE dir | na 16 16 |        |             |                 6a 6d 60 62 6b 62        --  j m ` b k b
3397:454 | DONE dir | na 16 16 | 006d7c | (3 bytes)   |         .byte 30, 3c, 3e             
3397:454 | DONE dir | na 16 16 |        |             |                 30 3c 3e                 --  0 < >
3397:455 | DONE wsp | na 16 16 |        |             |
3397:456 | DONE lbl | na 16 16 | 006d7f |             | nt_zero-more                         
3397:457 | DONE dir | na 16 16 | 006d7f | (2 bytes)   |         .byte 2, { NC }              
3397:457 | DONE dir | na 16 16 |        |             |                 02 01                    --  . .
3397:458 | DONE dir | na 16 16 | 006d81 | (6 bytes)   |         .word nt_zero-notequal, xt_zero-more, 006276 
3397:458 | DONE dir | na 16 16 |        |             |                 74 6d 6c 62 76 62        --  t m l b v b
3397:459 | DONE dir | na 16 16 | 006d87 | (2 bytes)   |         .byte 30, 3e                 
3397:459 | DONE dir | na 16 16 |        |             |                 30 3e                    --  0 >
3397:460 | DONE wsp | na 16 16 |        |             |
3397:461 | DONE lbl | na 16 16 | 006d89 |             | nt_zero-less                         
3397:462 | DONE dir | na 16 16 | 006d89 | (2 bytes)   |         .byte 2, { NC }              
3397:462 | DONE dir | na 16 16 |        |             |                 02 01                    --  . .
3397:463 | DONE dir | na 16 16 | 006d8b | (6 bytes)   |         .word nt_zero-more, xt_zero-less, 00625f 
3397:463 | DONE dir | na 16 16 |        |             |                 7f 6d 54 62 5f 62        --  . m T b _ b
3397:464 | DONE dir | na 16 16 | 006d91 | (2 bytes)   |         .byte 30, 3c                 
3397:464 | DONE dir | na 16 16 |        |             |                 30 3c                    --  0 <
3397:465 | DONE wsp | na 16 16 |        |             |
3397:466 | DONE lbl | na 16 16 | 006d93 |             | nt_greater                           
3397:467 | DONE dir | na 16 16 | 006d93 | (2 bytes)   |         .byte 1, { NC }              
3397:467 | DONE dir | na 16 16 |        |             |                 01 01                    --  . .
3397:468 | DONE dir | na 16 16 | 006d95 | (6 bytes)   |         .word nt_zero-less, xt_greater, 006112 
3397:468 | DONE dir | na 16 16 |        |             |                 89 6d ff 60 12 61        --  . m . ` . a
3397:469 | DONE dir | na 16 16 | 006d9b | (1 bytes)   |         .byte 3e                     
3397:469 | DONE dir | na 16 16 |        |             |                 3e                       --  >
3397:470 | DONE wsp | na 16 16 |        |             |
3397:471 | DONE lbl | na 16 16 | 006d9c |             | nt_less                              
3397:472 | DONE dir | na 16 16 | 006d9c | (2 bytes)   |         .byte 1, { NC }              
3397:472 | DONE dir | na 16 16 |        |             |                 01 01                    --  . .
3397:473 | DONE dir | na 16 16 | 006d9e | (6 bytes)   |         .word nt_greater, xt_less, 0060f2 
3397:473 | DONE dir | na 16 16 |        |             |                 93 6d df 60 f2 60        --  . m . ` . `
3397:474 | DONE dir | na 16 16 | 006da4 | (1 bytes)   |         .byte 3c                     
3397:474 | DONE dir | na 16 16 |        |             |                 3c                       --  <
3397:475 | DONE wsp | na 16 16 |        |             |
3397:476 | DONE lbl | na 16 16 | 006da5 |             | nt_zero-equal                        
3397:477 | DONE dir | na 16 16 | 006da5 | (2 bytes)   |         .byte 2, { NC }              
3397:477 | DONE dir | na 16 16 |        |             |                 02 01                    --  . .
3397:478 | DONE dir | na 16 16 | 006da7 | (6 bytes)   |         .word nt_less, xt_zero-equal, 006253 
3397:478 | DONE dir | na 16 16 |        |             |                 9c 6d 48 62 53 62        --  . m H b S b
3397:479 | DONE dir | na 16 16 | 006dad | (2 bytes)   |         .byte 30, 3d                 
3397:479 | DONE dir | na 16 16 |        |             |                 30 3d                    --  0 =
3397:480 | DONE wsp | na 16 16 |        |             |
3397:481 | DONE lbl | na 16 16 | 006daf |             | nt_not-equal                         
3397:482 | DONE dir | na 16 16 | 006daf | (2 bytes)   |         .byte 2, { NC }              
3397:482 | DONE dir | na 16 16 |        |             |                 02 01                    --  . .
3397:483 | DONE dir | na 16 16 | 006db1 | (6 bytes)   |         .word nt_zero-equal, xt_not-equal, 0060fe 
3397:483 | DONE dir | na 16 16 |        |             |                 a5 6d f3 60 fe 60        --  . m . ` . `
3397:484 | DONE dir | na 16 16 | 006db7 | (2 bytes)   |         .byte 3c, 3e                 
3397:484 | DONE dir | na 16 16 |        |             |                 3c 3e                    --  < >
3397:485 | DONE wsp | na 16 16 |        |             |
3397:486 | DONE lbl | na 16 16 | 006db9 |             | nt_equal                             
3397:487 | DONE dir | na 16 16 | 006db9 | (2 bytes)   |         .byte 1, { NC }              
3397:487 | DONE dir | na 16 16 |        |             |                 01 01                    --  . .
3397:488 | DONE dir | na 16 16 | 006dbb | (6 bytes)   |         .word nt_not-equal, xt_equal, 00623f 
3397:488 | DONE dir | na 16 16 |        |             |                 af 6d 34 62 3f 62        --  . m 4 b ? b
3397:489 | DONE dir | na 16 16 | 006dc1 | (1 bytes)   |         .byte 3d                     
3397:489 | DONE dir | na 16 16 |        |             |                 3d                       --  =
3397:490 | DONE wsp | na 16 16 |        |             |
3397:491 | DONE lbl | na 16 16 | 006dc2 |             | nt_false                             
3397:492 | DONE dir | na 16 16 | 006dc2 | (2 bytes)   |         .byte 5, { NC }              
3397:492 | DONE dir | na 16 16 |        |             |                 05 01                    --  . .
3397:493 | DONE dir | na 16 16 | 006dc4 | (6 bytes)   |         .word nt_equal, xt_zero, 006247 
3397:493 | DONE dir | na 16 16 |        |             |                 b9 6d 40 62 47 62        --  . m @ b G b
3397:494 | DONE dir | na 16 16 | 006dca | (5 bytes)   |         .byte 66, 61, 6c, 73, 65     
3397:494 | DONE dir | na 16 16 |        |             |                 66 61 6c 73 65           --  f a l s e
3397:495 | DONE wsp | na 16 16 |        |             |
3397:496 | DONE lbl | na 16 16 | 006dcf |             | nt_true                              
3397:497 | DONE dir | na 16 16 | 006dcf | (2 bytes)   |         .byte 4, { NC }              
3397:497 | DONE dir | na 16 16 |        |             |                 04 01                    --  . .
3397:498 | DONE dir | na 16 16 | 006dd1 | (6 bytes)   |         .word nt_false, xt_true, 00687b 
3397:498 | DONE dir | na 16 16 |        |             |                 c2 6d 74 68 7b 68        --  . m t h { h
3397:499 | DONE dir | na 16 16 | 006dd7 | (4 bytes)   |         .byte 74, 72, 75, 65         
3397:499 | DONE dir | na 16 16 |        |             |                 74 72 75 65              --  t r u e
3397:500 | DONE wsp | na 16 16 |        |             |
3397:501 | DONE lbl | na 16 16 | 006ddb |             | nt_two                               
3397:502 | DONE dir | na 16 16 | 006ddb | (2 bytes)   |         .byte 1, { NC }              
3397:502 | DONE dir | na 16 16 |        |             |                 01 01                    --  . .
3397:503 | DONE dir | na 16 16 | 006ddd | (6 bytes)   |         .word nt_true, xt_two, 0062a9 
3397:503 | DONE dir | na 16 16 |        |             |                 cf 6d a2 62 a9 62        --  . m . b . b
3397:504 | DONE dir | na 16 16 | 006de3 | (1 bytes)   |         .byte 32                     
3397:504 | DONE dir | na 16 16 |        |             |                 32                       --  2
3397:505 | DONE wsp | na 16 16 |        |             |
3397:506 | DONE lbl | na 16 16 | 006de4 |             | nt_one                               
3397:507 | DONE dir | na 16 16 | 006de4 | (2 bytes)   |         .byte 1, { NC }              
3397:507 | DONE dir | na 16 16 |        |             |                 01 01                    --  . .
3397:508 | DONE dir | na 16 16 | 006de6 | (6 bytes)   |         .word nt_two, xt_one, 00629d 
3397:508 | DONE dir | na 16 16 |        |             |                 db 6d 96 62 9d 62        --  . m . b . b
3397:509 | DONE dir | na 16 16 | 006dec | (1 bytes)   |         .byte 31                     
3397:509 | DONE dir | na 16 16 |        |             |                 31                       --  1
3397:510 | DONE wsp | na 16 16 |        |             |
3397:511 | DONE lbl | na 16 16 | 006ded |             | nt_zero                              
3397:512 | DONE dir | na 16 16 | 006ded | (2 bytes)   |         .byte 1, { NC }              
3397:512 | DONE dir | na 16 16 |        |             |                 01 01                    --  . .
3397:513 | DONE dir | na 16 16 | 006def | (6 bytes)   |         .word nt_one, xt_zero, 006247 
3397:513 | DONE dir | na 16 16 |        |             |                 e4 6d 40 62 47 62        --  . m @ b G b
3397:514 | DONE dir | na 16 16 | 006df5 | (1 bytes)   |         .byte 30                     
3397:514 | DONE dir | na 16 16 |        |             |                 30                       --  0
3397:515 | DONE wsp | na 16 16 |        |             |
3397:516 | DONE lbl | na 16 16 | 006df6 |             | nt_find-name                         
3397:517 | DONE dir | na 16 16 | 006df6 | (2 bytes)   |         .byte 9, 0                   
3397:517 | DONE dir | na 16 16 |        |             |                 09 00                    --  	 .
3397:518 | DONE dir | na 16 16 | 006df8 | (6 bytes)   |         .word nt_zero, xt_find-name, 0065ff 
3397:518 | DONE dir | na 16 16 |        |             |                 ed 6d a9 65 ff 65        --  . m . e . e
3397:519 | DONE dir | na 16 16 | 006dfe | (9 bytes)   |         .byte 66, 69, 6e, 64, 2d, 6e, 61, 6d, 65 
3397:519 | DONE dir | na 16 16 |        |             |                 66 69 6e 64 2d 6e 61 6d  --  f i n d - n a m
3397:519 | DONE dir | na 16 16 |        |             |                 65                       --  e
3397:520 | DONE wsp | na 16 16 |        |             |
3397:521 | DONE lbl | na 16 16 | 006e07 |             | nt_refill                            
3397:522 | DONE dir | na 16 16 | 006e07 | (2 bytes)   |         .byte 6, 0                   TODO check flags
3397:522 | DONE dir | na 16 16 |        |             |                 06 00                    --  . .
3397:523 | DONE dir | na 16 16 | 006e09 | (6 bytes)   |         .word nt_find-name, xt_refill, 0067a9 
3397:523 | DONE dir | na 16 16 |        |             |                 f6 6d 77 67 a9 67        --  . m w g . g
3397:524 | DONE dir | na 16 16 | 006e0f | (6 bytes)   |         .byte 72, 65, 66, 69, 6c, 6c 
3397:524 | DONE dir | na 16 16 |        |             |                 72 65 66 69 6c 6c        --  r e f i l l
3397:525 | DONE wsp | na 16 16 |        |             |
3397:526 | DONE lbl | na 16 16 | 006e15 |             | nt_parse-name                        
3397:527 | DONE dir | na 16 16 | 006e15 | (2 bytes)   |         .byte &10, 0                 
3397:527 | DONE dir | na 16 16 |        |             |                 0a 00                    --  
 .
3397:528 | DONE dir | na 16 16 | 006e17 | (6 bytes)   |         .word nt_refill, xt_parse-name, 006730 
3397:528 | DONE dir | na 16 16 |        |             |                 07 6e cc 66 30 67        --  . n . f 0 g
3397:529 | DONE dir | na 16 16 | 006e1d | (10 bytes)  |         .byte 70, 61, 72, 73, 65, 2d, 6e, 61, 6d, 65 
3397:529 | DONE dir | na 16 16 |        |             |                 70 61 72 73 65 2d 6e 61  --  p a r s e - n a
3397:529 | DONE dir | na 16 16 |        |             |                 6d 65                    --  m e
3397:530 | DONE wsp | na 16 16 |        |             |
3397:531 | DONE lbl | na 16 16 | 006e27 |             | nt_source-id                         
3397:532 | DONE dir | na 16 16 | 006e27 | (2 bytes)   |         .byte 9, { NC }              
3397:532 | DONE dir | na 16 16 |        |             |                 09 01                    --  	 .
3397:533 | DONE dir | na 16 16 | 006e29 | (6 bytes)   |         .word nt_parse-name, xt_source-id, 006849 
3397:533 | DONE dir | na 16 16 |        |             |                 15 6e 43 68 49 68        --  . n C h I h
3397:534 | DONE dir | na 16 16 | 006e2f | (9 bytes)   |         .byte 73, 6f, 75, 72, 63, 65, 2d, 69, 64 
3397:534 | DONE dir | na 16 16 |        |             |                 73 6f 75 72 63 65 2d 69  --  s o u r c e - i
3397:534 | DONE dir | na 16 16 |        |             |                 64                       --  d
3397:535 | DONE wsp | na 16 16 |        |             |
3397:536 | DONE lbl | na 16 16 | 006e38 |             | nt_comma                             
3397:537 | DONE dir | na 16 16 | 006e38 | (2 bytes)   |         .byte 1, { NC }              
3397:537 | DONE dir | na 16 16 |        |             |                 01 01                    --  . .
3397:538 | DONE dir | na 16 16 | 006e3a | (6 bytes)   |         .word nt_source-id, xt_comma, 0061ae 
3397:538 | DONE dir | na 16 16 |        |             |                 27 6e a3 61 ae 61        --  ' n . a . a
3397:539 | DONE dir | na 16 16 | 006e40 | (1 bytes)   |         .byte 2c                     
3397:539 | DONE dir | na 16 16 |        |             |                 2c                       --  ,
3397:540 | DONE wsp | na 16 16 |        |             |
3397:541 | DONE lbl | na 16 16 | 006e41 |             | nt_accept                            
3397:542 | DONE dir | na 16 16 | 006e41 | (2 bytes)   |         .byte 6, 00                  TODO check flags
3397:542 | DONE dir | na 16 16 |        |             |                 06 00                    --  . .
3397:543 | DONE dir | na 16 16 | 006e43 | (6 bytes)   |         .word nt_comma, xt_accept, 006368 
3397:543 | DONE dir | na 16 16 |        |             |                 38 6e e5 62 68 63        --  8 n . b h c
3397:544 | DONE dir | na 16 16 | 006e49 | (6 bytes)   |         .byte 61, 63, 63, 65, 70, 74 
3397:544 | DONE dir | na 16 16 |        |             |                 61 63 63 65 70 74        --  a c c e p t
3397:545 | DONE wsp | na 16 16 |        |             |
3397:546 | DONE lbl | na 16 16 | 006e4f |             | nt_tuck                              
3397:547 | DONE dir | na 16 16 | 006e4f | (2 bytes)   |         .byte 4, { NC }              
3397:547 | DONE dir | na 16 16 |        |             |                 04 01                    --  . .
3397:548 | DONE dir | na 16 16 | 006e51 | (6 bytes)   |         .word nt_accept, xt_tuck, 006884 
3397:548 | DONE dir | na 16 16 |        |             |                 41 6e 7c 68 84 68        --  A n | h . h
3397:549 | DONE dir | na 16 16 | 006e57 | (4 bytes)   |         .byte 74, 75, 63, 6b         
3397:549 | DONE dir | na 16 16 |        |             |                 74 75 63 6b              --  t u c k
3397:550 | DONE wsp | na 16 16 |        |             |
3397:551 | DONE lbl | na 16 16 | 006e5b |             | nt_nip                               
3397:552 | DONE dir | na 16 16 | 006e5b | (2 bytes)   |         .byte 3, { NC }              
3397:552 | DONE dir | na 16 16 |        |             |                 03 01                    --  . .
3397:553 | DONE dir | na 16 16 | 006e5d | (6 bytes)   |         .word nt_tuck, xt_nip, 0066a4 
3397:553 | DONE dir | na 16 16 |        |             |                 4f 6e a2 66 a4 66        --  O n . f . f
3397:554 | DONE dir | na 16 16 | 006e63 | (3 bytes)   |         .byte 6e, 69, 70             
3397:554 | DONE dir | na 16 16 |        |             |                 6e 69 70                 --  n i p
3397:555 | DONE wsp | na 16 16 |        |             |
3397:556 | DONE lbl | na 16 16 | 006e66 |             | nt_mrot                              
3397:557 | DONE dir | na 16 16 | 006e66 | (2 bytes)   |         .byte 4, { NC }              
3397:557 | DONE dir | na 16 16 |        |             |                 04 01                    --  . .
3397:558 | DONE dir | na 16 16 | 006e68 | (6 bytes)   |         .word nt_nip, xt_mrot, 006233 
3397:558 | DONE dir | na 16 16 |        |             |                 5b 6e 2b 62 33 62        --  [ n + b 3 b
3397:559 | DONE dir | na 16 16 | 006e6e | (4 bytes)   |         .byte 2d, 72, 6f, 74         
3397:559 | DONE dir | na 16 16 |        |             |                 2d 72 6f 74              --  - r o t
3397:560 | DONE wsp | na 16 16 |        |             |
3397:561 | DONE lbl | na 16 16 | 006e72 |             | nt_rot                               
3397:562 | DONE dir | na 16 16 | 006e72 | (2 bytes)   |         .byte 3, { NC }              
3397:562 | DONE dir | na 16 16 |        |             |                 03 01                    --  . .
3397:563 | DONE dir | na 16 16 | 006e74 | (6 bytes)   |         .word nt_mrot, xt_rot, 0067b2 
3397:563 | DONE dir | na 16 16 |        |             |                 66 6e aa 67 b2 67        --  f n . g . g
3397:564 | DONE dir | na 16 16 | 006e7a | (3 bytes)   |         .byte 72, 6f, 74             
3397:564 | DONE dir | na 16 16 |        |             |                 72 6f 74                 --  r o t
3397:565 | DONE wsp | na 16 16 |        |             |
3397:566 | DONE lbl | na 16 16 | 006e7d |             | nt_execute                           
3397:567 | DONE dir | na 16 16 | 006e7d | (2 bytes)   |         .byte 7, { NC }              
3397:567 | DONE dir | na 16 16 |        |             |                 07 01                    --  . .
3397:568 | DONE dir | na 16 16 | 006e7f | (6 bytes)   |         .word nt_rot, xt_execute, 0065a8 
3397:568 | DONE dir | na 16 16 |        |             |                 72 6e 9e 65 a8 65        --  r n . e . e
3397:569 | DONE dir | na 16 16 | 006e85 | (7 bytes)   |         .byte 65, 78, 65, 63, 75, 74, 65 
3397:569 | DONE dir | na 16 16 |        |             |                 65 78 65 63 75 74 65     --  e x e c u t e
3397:570 | DONE wsp | na 16 16 |        |             |
3397:571 | DONE lbl | na 16 16 | 006e8c |             | nt_here                              
3397:572 | DONE dir | na 16 16 | 006e8c | (2 bytes)   |         .byte 4, { NC }              
3397:572 | DONE dir | na 16 16 |        |             |                 04 01                    --  . .
3397:573 | DONE dir | na 16 16 | 006e8e | (6 bytes)   |         .word nt_execute, xt_here, 006615 
3397:573 | DONE dir | na 16 16 |        |             |                 7d 6e 0f 66 15 66        --  } n . f . f
3397:574 | DONE dir | na 16 16 | 006e94 | (4 bytes)   |         .byte 68, 65, 72, 65         
3397:574 | DONE dir | na 16 16 |        |             |                 68 65 72 65              --  h e r e
3397:575 | DONE wsp | na 16 16 |        |             |
3397:576 | DONE lbl | na 16 16 | 006e98 |             | nt_2drop                             
3397:577 | DONE dir | na 16 16 | 006e98 | (2 bytes)   |         .byte 5, { NC }              
3397:577 | DONE dir | na 16 16 |        |             |                 05 01                    --  . .
3397:578 | DONE dir | na 16 16 | 006e9a | (6 bytes)   |         .word nt_here, xt_2drop, 0062b4 
3397:578 | DONE dir | na 16 16 |        |             |                 8c 6e ae 62 b4 62        --  . n . b . b
3397:579 | DONE dir | na 16 16 | 006ea0 | (5 bytes)   |         .byte 32, 64, 72, 6f, 70     
3397:579 | DONE dir | na 16 16 |        |             |                 32 64 72 6f 70           --  2 d r o p
3397:580 | DONE wsp | na 16 16 |        |             |
3397:581 | DONE lbl | na 16 16 | 006ea5 |             | nt_rfetch                            
3397:582 | DONE dir | na 16 16 | 006ea5 | (2 bytes)   |         .byte 2, 0                   we follow Gforth in making this not CO
3397:582 | DONE dir | na 16 16 |        |             |                 02 00                    --  . .
3397:583 | DONE dir | na 16 16 | 006ea7 | (6 bytes)   |         .word nt_2drop, xt_rfetch, 00676e 
3397:583 | DONE dir | na 16 16 |        |             |                 98 6e 66 67 6e 67        --  . n f g n g
3397:584 | DONE dir | na 16 16 | 006ead | (2 bytes)   |         .byte 72, 40                 
3397:584 | DONE dir | na 16 16 |        |             |                 72 40                    --  r @
3397:585 | DONE wsp | na 16 16 |        |             |
3397:586 | DONE lbl | na 16 16 | 006eaf |             | nt_fromr                             
3397:587 | DONE dir | na 16 16 | 006eaf | (2 bytes)   |         .byte 2, { CO }              
3397:587 | DONE dir | na 16 16 |        |             |                 02 04                    --  . .
3397:588 | DONE dir | na 16 16 | 006eb1 | (6 bytes)   |         .word nt_rfetch, xt_fromr, 006776 
3397:588 | DONE dir | na 16 16 |        |             |                 a5 6e 6f 67 76 67        --  . n o g v g
3397:589 | DONE dir | na 16 16 | 006eb7 | (2 bytes)   |         .byte 72, 3e                 
3397:589 | DONE dir | na 16 16 |        |             |                 72 3e                    --  r >
3397:590 | DONE wsp | na 16 16 |        |             |
3397:591 | DONE lbl | na 16 16 | 006eb9 |             | nt_tor                               
3397:592 | DONE dir | na 16 16 | 006eb9 | (2 bytes)   |         .byte 2, { CO }              
3397:592 | DONE dir | na 16 16 |        |             |                 02 04                    --  . .
3397:593 | DONE dir | na 16 16 | 006ebb | (6 bytes)   |         .word nt_fromr, xt_tor, 006122 
3397:593 | DONE dir | na 16 16 |        |             |                 af 6e 1b 61 22 61        --  . n . a " a
3397:594 | DONE dir | na 16 16 | 006ec1 | (2 bytes)   |         .byte 3e, 72                 
3397:594 | DONE dir | na 16 16 |        |             |                 3e 72                    --  > r
3397:595 | DONE wsp | na 16 16 |        |             |
3397:596 | DONE lbl | na 16 16 | 006ec3 |             | nt_over                              
3397:597 | DONE dir | na 16 16 | 006ec3 | (2 bytes)   |         .byte 4, { NC }              
3397:597 | DONE dir | na 16 16 |        |             |                 04 01                    --  . .
3397:598 | DONE dir | na 16 16 | 006ec5 | (6 bytes)   |         .word nt_tor, xt_over, 0066b2 
3397:598 | DONE dir | na 16 16 |        |             |                 b9 6e ac 66 b2 66        --  . n . f . f
3397:599 | DONE dir | na 16 16 | 006ecb | (4 bytes)   |         .byte 6f, 76, 65, 72         
3397:599 | DONE dir | na 16 16 |        |             |                 6f 76 65 72              --  o v e r
3397:600 | DONE wsp | na 16 16 |        |             |
3397:601 | DONE lbl | na 16 16 | 006ecf |             | nt_fetch                             
3397:602 | DONE dir | na 16 16 | 006ecf | (2 bytes)   |         .byte 1, { NC }              
3397:602 | DONE dir | na 16 16 |        |             |                 01 01                    --  . .
3397:603 | DONE dir | na 16 16 | 006ed1 | (6 bytes)   |         .word nt_over, xt_fetch, 006201 
3397:603 | DONE dir | na 16 16 |        |             |                 c3 6e fd 61 01 62        --  . n . a . b
3397:604 | DONE dir | na 16 16 | 006ed7 | (1 bytes)   |         .byte 40                     
3397:604 | DONE dir | na 16 16 |        |             |                 40                       --  @
3397:605 | DONE wsp | na 16 16 |        |             |
3397:606 | DONE lbl | na 16 16 | 006ed8 |             | nt_store                             
3397:607 | DONE dir | na 16 16 | 006ed8 | (2 bytes)   |         .byte 1, { NC }              
3397:607 | DONE dir | na 16 16 |        |             |                 01 01                    --  . .
3397:608 | DONE dir | na 16 16 | 006eda | (6 bytes)   |         .word nt_fetch, xt_store, 0061fc 
3397:608 | DONE dir | na 16 16 |        |             |                 cf 6e f1 61 fc 61        --  . n . a . a
3397:609 | DONE dir | na 16 16 | 006ee0 | (1 bytes)   |         .byte 21                     
3397:609 | DONE dir | na 16 16 |        |             |                 21                       --  !
3397:610 | DONE wsp | na 16 16 |        |             |
3397:611 | DONE lbl | na 16 16 | 006ee1 |             | nt_swap                              
3397:612 | DONE dir | na 16 16 | 006ee1 | (2 bytes)   |         .byte 4, { NC }              
3397:612 | DONE dir | na 16 16 |        |             |                 04 01                    --  . .
3397:613 | DONE dir | na 16 16 | 006ee3 | (6 bytes)   |         .word nt_store, xt_swap, 006873 
3397:613 | DONE dir | na 16 16 |        |             |                 d8 6e 6e 68 73 68        --  . n n h s h
3397:614 | DONE dir | na 16 16 | 006ee9 | (4 bytes)   |         .byte 73, 77, 61, 70         
3397:614 | DONE dir | na 16 16 |        |             |                 73 77 61 70              --  s w a p
3397:615 | DONE wsp | na 16 16 |        |             |
3397:616 | DONE lbl | na 16 16 | 006eed |             | nt_dup                               
3397:617 | DONE dir | na 16 16 | 006eed | (2 bytes)   |         .byte 3, { NC }              
3397:617 | DONE dir | na 16 16 |        |             |                 03 01                    --  . .
3397:618 | DONE dir | na 16 16 | 006eef | (6 bytes)   |         .word nt_swap, xt_dup, 00656b 
3397:618 | DONE dir | na 16 16 |        |             |                 e1 6e 67 65 6b 65        --  . n g e k e
3397:619 | DONE dir | na 16 16 | 006ef5 | (3 bytes)   |         .byte 64, 75, 70             
3397:619 | DONE dir | na 16 16 |        |             |                 64 75 70                 --  d u p
3397:620 | DONE wsp | na 16 16 |        |             |
3397:621 | DONE cmt | na 16 16 |        |             | ; DROP is always the first entry in dictionary
3397:622 | DONE lbl | na 16 16 | 006ef8 |             | nt_drop                              
3397:623 | DONE dir | na 16 16 | 006ef8 | (2 bytes)   |         .byte 4, { NC }              
3397:623 | DONE dir | na 16 16 |        |             |                 04 01                    --  . .
3397:624 | DONE dir | na 16 16 | 006efa | (6 bytes)   |         .word nt_dup, xt_drop, 00653f 
3397:624 | DONE dir | na 16 16 |        |             |                 ed 6e 3b 65 3f 65        --  . n ; e ? e
3397:625 | DONE dir | na 16 16 | 006f00 | (4 bytes)   |         .byte 64, 72, 6f, 70         
3397:625 | DONE dir | na 16 16 |        |             |                 64 72 6f 70              --  d r o p
3397:626 | DONE wsp | na 16 16 |        |             |
3397:627 | DONE cmt | na 16 16 |        |             | ; END
3398:000 | DONE wsp | na 16 16 |        |             |
3399:000 | DONE cmt | na 16 16 |        |             | ; ===================================================================
3400:000 | DONE cmt | na 16 16 |        |             | ; CODE FIELD ROUTINES
3401:000 | DONE wsp | na 16 16 |        |             |
3402:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
3403:000 | DONE cmt | na 16 16 |        |             | ; DOCONST
3404:000 | DONE cmt | na 16 16 |        |             | ; Execute a constant: Push the data in the first two byte of the Data Field onto
3405:000 | DONE cmt | na 16 16 |        |             | ; the stack
3406:000 | DONE lbl | na 16 16 | 006f04 |             | doconst                              
3407:000 | DONE dir | na 16 16 |        |             |         .!a16                        
3408:000 | DONE dir | na 16 16 |        |             |         .!xy16                       
3409:000 | DONE ins | na 16 16 | 006f04 | ca          |                 dex                  make room on Data Stack
3410:000 | DONE ins | na 16 16 | 006f05 | ca          |                 dex                  
3411:000 | DONE ins | na 16 16 | 006f06 | 94 00       |                 sty.dx 00            
3412:000 | DONE wsp | na 16 16 |        |             |
3413:000 | DONE cmt | na 16 16 |        |             |                 ; The value we need is stored two bytes after the JSR return
3414:000 | DONE cmt | na 16 16 |        |             |                 ; address, which in turn is what is on top of the Return Stack
3415:000 | DONE ins | na 16 16 | 006f08 | 68          |                 pla                  get the return address
3416:000 | DONE ins | na 16 16 | 006f09 | 85 16       |                 sta.d 000216         
3417:000 | DONE wsp | na 16 16 |        |             |
3418:000 | DONE cmt | na 16 16 |        |             |                 ; start Y as index off with 1 instead of zero because of 65816's
3419:000 | DONE cmt | na 16 16 |        |             |                 ; address handling
3420:000 | DONE ins | na 16 16 | 006f0b | a0 01 00    |                 ldy.# 0001           
3421:000 | DONE ins | na 16 16 | 006f0e | b1 16       |                 lda.diy 000216       LDA (TMP1),Y
3422:000 | DONE ins | na 16 16 | 006f10 | a8          |                 tay                  
3423:000 | DONE wsp | na 16 16 |        |             |
3424:000 | DONE ins | na 16 16 | 006f11 | 60          |                 rts                  takes us to original caller
3425:000 | DONE wsp | na 16 16 |        |             |
3426:000 | DONE wsp | na 16 16 |        |             |
3427:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
3428:000 | DONE cmt | na 16 16 |        |             | ; DODOES
3429:000 | DONE cmt | na 16 16 |        |             | ; Used in combination with DOES>'s runtime portion to actually do the work of
3430:000 | DONE cmt | na 16 16 |        |             | ; the new word. See DOES> and docs/create-does.txt for details. Uses tmp3
3431:000 | DONE lbl | na 16 16 | 006f12 |             | dodoes                               
3432:000 | DONE cmt | na 16 16 |        |             |                 ; Assumes the address of the CFA of the original defining word
3433:000 | DONE cmt | na 16 16 |        |             |                 ; (say, CONSTANT) is on the top of the Return Stack. Save it for
3434:000 | DONE cmt | na 16 16 |        |             |                 ; a later jump, adding one byte because of the way the 65816
3435:000 | DONE cmt | na 16 16 |        |             |                 ; works
3436:000 | DONE ins | na 16 16 | 006f12 | 68          |                 pla                  
3437:000 | DONE ins | na 16 16 | 006f13 | 1a          |                 inc.a                
3438:000 | DONE ins | na 16 16 | 006f14 | 85 1a       |                 sta.d 00021a         
3439:000 | DONE wsp | na 16 16 |        |             |
3440:000 | DONE cmt | na 16 16 |        |             |                 ; Next on the Return Stack should be the address of the PFA of
3441:000 | DONE cmt | na 16 16 |        |             |                 ; the calling defined word (say, the name of whatever constant we
3442:000 | DONE cmt | na 16 16 |        |             |                 ; just defined). Move this to the Data Stack, again adding one.
3443:000 | DONE ins | na 16 16 | 006f16 | ca          |                 dex                  
3444:000 | DONE ins | na 16 16 | 006f17 | ca          |                 dex                  
3445:000 | DONE ins | na 16 16 | 006f18 | 94 00       |                 sty.dx 00            
3446:000 | DONE wsp | na 16 16 |        |             |
3447:000 | DONE ins | na 16 16 | 006f1a | 7a          |                 ply                  
3448:000 | DONE ins | na 16 16 | 006f1b | c8          |                 iny                  
3449:000 | DONE wsp | na 16 16 |        |             |
3450:000 | DONE cmt | na 16 16 |        |             |                 ; This leaves the return address from the original main routine
3451:000 | DONE cmt | na 16 16 |        |             |                 ; on top of the Return Stack. We leave that untouched and jump
3452:000 | DONE cmt | na 16 16 |        |             |                 ; to the special code of the defining word. It's RTS instruction
3453:000 | DONE cmt | na 16 16 |        |             |                 ; will take us back to the main routine
3454:000 | DONE ins | na 16 16 | 006f1c | 6c 1a 02    |                 jmp.i 00021a         JMP (TMP3)
3455:000 | DONE wsp | na 16 16 |        |             |
3456:000 | DONE wsp | na 16 16 |        |             |
3457:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
3458:000 | DONE cmt | na 16 16 |        |             | ; DOVAR
3459:000 | DONE cmt | na 16 16 |        |             | ; Execute a variable: Push the address of the first bytes of the Data Field onto
3460:000 | DONE cmt | na 16 16 |        |             | ; the stack. This is called with JSR so we can pick up the address of the
3461:000 | DONE cmt | na 16 16 |        |             | ; calling variable off the 65816's Return Stack. The final RTS takes us to the
3462:000 | DONE cmt | na 16 16 |        |             | ; original caller of the routine that in turn called DOVAR. This is the default
3463:000 | DONE cmt | na 16 16 |        |             | ; routine installed with CREATE
3464:000 | DONE lbl | na 16 16 | 006f1f |             | dovar                                
3465:000 | DONE dir | na 16 16 |        |             |         .!a16                        
3466:000 | DONE dir | na 16 16 |        |             |         .!xy16                       
3467:000 | DONE ins | na 16 16 | 006f1f | ca          |                 dex                  make room on Data Stack
3468:000 | DONE ins | na 16 16 | 006f20 | ca          |                 dex                  
3469:000 | DONE ins | na 16 16 | 006f21 | 94 00       |                 sty.dx 00            
3470:000 | DONE wsp | na 16 16 |        |             |
3471:000 | DONE cmt | na 16 16 |        |             |                 ; The address we need is stored in the two bytes after the JSR
3472:000 | DONE cmt | na 16 16 |        |             |                 ; return address, which in turn is what is on top of the Return
3473:000 | DONE cmt | na 16 16 |        |             |                 ; Stack
3474:000 | DONE ins | na 16 16 | 006f23 | 7a          |                 ply                  value is now TOS
3475:000 | DONE ins | na 16 16 | 006f24 | c8          |                 iny                  add one because of 65816's address handling
3476:000 | DONE wsp | na 16 16 |        |             |
3477:000 | DONE ins | na 16 16 | 006f25 | 60          |                 rts                  takes us to original caller
3478:000 | DONE wsp | na 16 16 |        |             |
3479:000 | DONE wsp | na 16 16 |        |             |
3480:000 | DONE cmt | na 16 16 |        |             | ; ===================================================================
3481:000 | DONE cmt | na 16 16 |        |             | ; LOW LEVEL HELPER FUNCTIONS
3482:000 | DONE wsp | na 16 16 |        |             |
3483:000 | DONE wsp | na 16 16 |        |             |
3484:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
3485:000 | DONE cmt | na 16 16 |        |             | ; COMPILE OR EXECUTE (AKA INTERPRET)
3486:000 | DONE cmt | na 16 16 |        |             | ; Core routine for interpreter called by EVALUATE and QUIT. We process one line
3487:000 | DONE cmt | na 16 16 |        |             | ; only. Assumes that address of name is in cib and length of whole input
3488:000 | DONE cmt | na 16 16 |        |             | ; string is in ciblen
3489:000 | DONE lbl | na 16 16 | 006f26 |             | compex                               
3490:000 | DONE lbl | na 16 16 | 006f26 |             | compex_loop                          
3491:000 | DONE dir | na 16 16 |        |             |         .!a16                        
3492:000 | DONE dir | na 16 16 |        |             |         .!xy16                       
3493:000 | DONE cmt | na 16 16 |        |             |                 ; Normally we would use PARSE here with the SPACE character as
3494:000 | DONE cmt | na 16 16 |        |             |                 ; a parameter (PARSE replaces WORD in modern Forths). However,
3495:000 | DONE cmt | na 16 16 |        |             |                 ; Gforth's PARSE-NAME makes more sense as it uses spaces as
3496:000 | DONE cmt | na 16 16 |        |             |                 ; delimiters per default and skips any leading spaces, which
3497:000 | DONE cmt | na 16 16 |        |             |                 ; PARSE doesn't
3498:000 | DONE ins | na 16 16 | 006f26 | 20 cc 66    |                 jsr 0066cc           ( "string" -- addr u )
3499:000 | DONE wsp | na 16 16 |        |             |
3500:000 | DONE cmt | na 16 16 |        |             |                 ; TODO decide if we want to make a copy of the string here so
3501:000 | DONE cmt | na 16 16 |        |             |                 ; that we can provide a better error message
3502:000 | DONE wsp | na 16 16 |        |             |
3503:000 | DONE cmt | na 16 16 |        |             |                 ; If PARSE-NAME returns 0 (empty line), no characters were left
3504:000 | DONE cmt | na 16 16 |        |             |                 ; in the line and we need to go get a new line
3505:000 | DONE ins | na 16 16 | 006f29 | 98          |                 tya                  force flag check
3506:000 | DONE ins | na 16 16 | 006f2a | f0 3f       |                 beq 006f6b           
3507:000 | DONE wsp | na 16 16 |        |             |
3508:000 | DONE cmt | na 16 16 |        |             |                 ; We let the user input words in any case, but use lower case
3509:000 | DONE cmt | na 16 16 |        |             |                 ; internally (sorry, Garth).
3510:000 | DONE ins | na 16 16 | 006f2c | 20 d1 6f    |                 jsr 006fd1           
3511:000 | DONE wsp | na 16 16 |        |             |
3512:000 | DONE cmt | na 16 16 |        |             |                 ; Go to FIND-NAME to see if this is a word we know
3513:000 | DONE ins | na 16 16 | 006f2f | 20 a9 65    |                 jsr 0065a9           ( addr u -- nt | 0 )
3514:000 | DONE wsp | na 16 16 |        |             |
3515:000 | DONE cmt | na 16 16 |        |             |                 ; a zero signals that we didn't find a word in the Dictionary
3516:000 | DONE ins | na 16 16 | 006f32 | 98          |                 tya                  
3517:000 | DONE ins | na 16 16 | 006f33 | d0 06       |                 bne 006f3b           
3518:000 | DONE wsp | na 16 16 |        |             |
3519:000 | DONE cmt | na 16 16 |        |             |                 ; TODO No name token, try NUMBER CONVERSION
3520:000 | DONE wsp | na 16 16 |        |             |
3521:000 | DONE cmt | na 16 16 |        |             |                 ; Number conversion has failed, which means the user screwed up,
3522:000 | DONE cmt | na 16 16 |        |             |                 ; so complain and abort
3523:000 | DONE cmt | na 16 16 |        |             |                 ; TODO see if we can print the offending string first
3524:000 | DONE ins | na 16 16 | 006f35 | a9 e6 74    |                 lda.# 0074e6         "Unknown word"
3525:000 | DONE ins | na 16 16 | 006f38 | 4c 98 6f    |                 jmp 006f98           
3526:000 | DONE wsp | na 16 16 |        |             |
3527:000 | DONE lbl | na 16 16 | 006f3b |             | compex_got_name_token                
3528:000 | DONE cmt | na 16 16 |        |             |                 ; We have a known word's nt as TOS. We're going to need its xt
3529:000 | DONE cmt | na 16 16 |        |             |                 ; though, which is four byte father down. This is a quicker
3530:000 | DONE cmt | na 16 16 |        |             |                 ; version of NAME>INT. But first, save a version of nt for
3531:000 | DONE cmt | na 16 16 |        |             |                 ; error handling and compilation stuff.
3532:000 | DONE ins | na 16 16 | 006f3b | 84 16       |                 sty.d 000216         
3533:000 | DONE ins | na 16 16 | 006f3d | c8          |                 iny                  
3534:000 | DONE ins | na 16 16 | 006f3e | c8          |                 iny                  
3535:000 | DONE ins | na 16 16 | 006f3f | c8          |                 iny                  
3536:000 | DONE ins | na 16 16 | 006f40 | c8          |                 iny                  
3537:000 | DONE ins | na 16 16 | 006f41 | b9 00 00    |                 lda.y 0000           LDA $0000,Y
3538:000 | DONE ins | na 16 16 | 006f44 | a8          |                 tay                  xt is TOS
3539:000 | DONE wsp | na 16 16 |        |             |
3540:000 | DONE cmt | na 16 16 |        |             |                 ; See if we are in interpret or compile mode
3541:000 | DONE ins | na 16 16 | 006f45 | a5 14       |                 lda.d 000214         
3542:000 | DONE ins | na 16 16 | 006f47 | d0 14       |                 bne 006f5d           
3543:000 | DONE wsp | na 16 16 |        |             |
3544:000 | DONE cmt | na 16 16 |        |             |                 ; We are interpreting, so EXECUTE the xt that is TOS. First,
3545:000 | DONE cmt | na 16 16 |        |             |                 ; though, see if this isn't a compile-only word, which would be
3546:000 | DONE cmt | na 16 16 |        |             |                 ; illegal.
3547:000 | DONE ins | na 16 16 | 006f49 | b2 16       |                 lda.di 000216        
3548:000 | DONE ins | na 16 16 | 006f4b | eb          |                 xba                  flags are MSB
3549:000 | DONE ins | na 16 16 | 006f4c | 29 04 00    |                 and.# CO             mask everything but Compile Only bit
3550:000 | DONE ins | na 16 16 | 006f4f | f0 06       |                 beq 006f57           
3551:000 | DONE wsp | na 16 16 |        |             |
3552:000 | DONE cmt | na 16 16 |        |             |                 ; TODO see if we can print offending word first
3553:000 | DONE ins | na 16 16 | 006f51 | a9 d8 73    |                 lda.# 0073d8         
3554:000 | DONE ins | na 16 16 | 006f54 | 4c 98 6f    |                 jmp 006f98           
3555:000 | DONE wsp | na 16 16 |        |             |
3556:000 | DONE lbl | na 16 16 | 006f57 |             | compex_interpret                     
3557:000 | DONE cmt | na 16 16 |        |             |                 ; We JSR to EXECUTE instead of calling the xt directly because
3558:000 | DONE cmt | na 16 16 |        |             |                 ; the RTS of the word we're executing will bring us back here,
3559:000 | DONE cmt | na 16 16 |        |             |                 ; skipping EXECUTE completely during RTS. If we were to execute
3560:000 | DONE cmt | na 16 16 |        |             |                 ; xt directly, we have to fool around with the Return Stack
3561:000 | DONE cmt | na 16 16 |        |             |                 ; instead, which is actually slightly slower
3562:000 | DONE ins | na 16 16 | 006f57 | 20 9e 65    |                 jsr 00659e           
3563:000 | DONE wsp | na 16 16 |        |             |
3564:000 | DONE cmt | na 16 16 |        |             |                 ; That's quite enough for this word, let's get the next one
3565:000 | DONE ins | na 16 16 | 006f5a | 4c 26 6f    |                 jmp 006f26           
3566:000 | DONE wsp | na 16 16 |        |             |
3567:000 | DONE lbl | na 16 16 | 006f5d |             | compex_compile                       
3568:000 | DONE cmt | na 16 16 |        |             |                 ; We're compiling. However, we need to see if this is an
3569:000 | DONE cmt | na 16 16 |        |             |                 ; IMMEDIATE word, which would mean we execute it right now even
3570:000 | DONE cmt | na 16 16 |        |             |                 ; during compilation mode. Fortunately, we saved the nt so life
3571:000 | DONE cmt | na 16 16 |        |             |                 ; is easier
3572:000 | DONE ins | na 16 16 | 006f5d | b2 16       |                 lda.di 000216        
3573:000 | DONE ins | na 16 16 | 006f5f | eb          |                 xba                  flags are MSB
3574:000 | DONE ins | na 16 16 | 006f60 | 29 02 00    |                 and.# IM             Mask all but IM bit
3575:000 | DONE ins | na 16 16 | 006f63 | d0 f2       |                 bne 006f57           IMMEDIATE word, execute right now
3576:000 | DONE wsp | na 16 16 |        |             |
3577:000 | DONE cmt | na 16 16 |        |             |                 ; Compile the xt into the Dictionary with COMPILE,
3578:000 | DONE ins | na 16 16 | 006f65 | 20 32 64    |                 jsr 006432           
3579:000 | DONE wsp | na 16 16 |        |             |
3580:000 | DONE ins | na 16 16 | 006f68 | 4c 26 6f    |                 jmp 006f26           
3581:000 | DONE wsp | na 16 16 |        |             |
3582:000 | DONE lbl | na 16 16 | 006f6b |             | compex_line_done                     
3583:000 | DONE cmt | na 16 16 |        |             |                 ; drop stuff from PARSE_NAME
3584:000 | DONE ins | na 16 16 | 006f6b | b4 02       |                 ldy.dx 02            
3585:000 | DONE ins | na 16 16 | 006f6d | e8          |                 inx                  
3586:000 | DONE ins | na 16 16 | 006f6e | e8          |                 inx                  
3587:000 | DONE ins | na 16 16 | 006f6f | e8          |                 inx                  
3588:000 | DONE ins | na 16 16 | 006f70 | e8          |                 inx                  
3589:000 | DONE wsp | na 16 16 |        |             |
3590:000 | DONE ins | na 16 16 | 006f71 | 60          |                 rts                  
3591:000 | DONE wsp | na 16 16 |        |             |
3592:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
3593:000 | DONE cmt | na 16 16 |        |             | ; COMPILE WORDS, JUMPS AND SUBROUTINE JUMPS INTO CODE
3594:000 | DONE cmt | na 16 16 |        |             | ; These three routines compile instructions such as "jsr xt_words" into a word
3595:000 | DONE cmt | na 16 16 |        |             | ; at compile time so they are available at run time. Use by pushing the word or
3596:000 | DONE cmt | na 16 16 |        |             | ; address to be compiled on the Return Stack with
3597:000 | DONE cmt | na 16 16 |        |             | ;
3598:000 | DONE cmt | na 16 16 |        |             | ;       phe.# <WORD>    ; PEA <WORD>
3599:000 | DONE cmt | na 16 16 |        |             | ;
3600:000 | DONE cmt | na 16 16 |        |             | ; Followed by a jump to which ever versions we need. Words that use this routine
3601:000 | DONE cmt | na 16 16 |        |             | ; may not be natively compiled. We use "cmpl" as not to confuse these routines
3602:000 | DONE cmt | na 16 16 |        |             | ; with the COMPILE, word. This routine uses tmptos. Always call this with
3603:000 | DONE cmt | na 16 16 |        |             | ; a subroutine jump, which means no combining JSR/RTS to JMP.
3604:000 | DONE cmt | na 16 16 |        |             | ; TODO see if we need to add a JSR.L variant at some point
3605:000 | DONE wsp | na 16 16 |        |             |
3606:000 | DONE dir | na 16 16 |        |             |         .!a16                        paranoid
3607:000 | DONE lbl | na 16 16 | 006f72 |             | cmpl_word                            
3608:000 | DONE ins | na 16 16 | 006f72 | a9 00 00    |                 lda.# 0000           zero value as a flag, compile word only
3609:000 | DONE ins | na 16 16 | 006f75 | 80 08       |                 bra 006f7f           
3610:000 | DONE lbl | na 16 16 | 006f77 |             | cmpl_subroutine                      
3611:000 | DONE ins | na 16 16 | 006f77 | a9 20 00    |                 lda.# 0020           compile "JSR" opcode first
3612:000 | DONE ins | na 16 16 | 006f7a | 80 03       |                 bra 006f7f           
3613:000 | DONE lbl | na 16 16 | 006f7c |             | cmpl_jump                            
3614:000 | DONE ins | na 16 16 | 006f7c | a9 4c 00    |                 lda.# 004c           compile "JMP", fall through to cmpl_common
3615:000 | DONE lbl | na 16 16 | 006f7f |             | cmpl_common                          
3616:000 | DONE cmt | na 16 16 |        |             |                 ; we're going to need the Y register to get anything done
3617:000 | DONE ins | na 16 16 | 006f7f | 84 06       |                 sty.d 000206         
3618:000 | DONE wsp | na 16 16 |        |             |
3619:000 | DONE ins | na 16 16 | 006f81 | a8          |                 tay                  force flag check
3620:000 | DONE ins | na 16 16 | 006f82 | f0 08       |                 beq 006f8c           came in through cmpl_word, just compile body
3621:000 | DONE wsp | na 16 16 |        |             |
3622:000 | DONE cmt | na 16 16 |        |             |                 ; A contains an opcode that must be compiled first. This is an
3623:000 | DONE cmt | na 16 16 |        |             |                 ; optimized version of C, ("c-comma")
3624:000 | DONE ins | na 16 16 | 006f84 | e2 20       |                 sep 20               
3624:001 | DONE ctl | na  8 16 |        |             |         .!a8
3625:000 | DONE ins | na  8 16 | 006f86 | 92 00       |                 sta.di 000200        STA (CP)
3626:000 | DONE ins | na  8 16 | 006f88 | c2 20       |                 rep 20               
3626:001 | DONE ctl | na 16 16 |        |             |         .!a16
3627:000 | DONE ins | na 16 16 | 006f8a | e6 00       |                 inc.d 000200         fall through to cmpl_body
3628:000 | DONE lbl | na 16 16 | 006f8c |             | cmpl_body                            
3629:000 | DONE ins | na 16 16 | 006f8c | 7a          |                 ply                  the return address we'll need later
3630:000 | DONE wsp | na 16 16 |        |             |
3631:000 | DONE ins | na 16 16 | 006f8d | 68          |                 pla                  next value on stack is the word to compile
3632:000 | DONE ins | na 16 16 | 006f8e | 92 00       |                 sta.di 000200        this is a quicker version of , ("comma")
3633:000 | DONE ins | na 16 16 | 006f90 | e6 00       |                 inc.d 000200         
3634:000 | DONE ins | na 16 16 | 006f92 | e6 00       |                 inc.d 000200         
3635:000 | DONE wsp | na 16 16 |        |             |
3636:000 | DONE ins | na 16 16 | 006f94 | 5a          |                 phy                  make sure we can get back home
3637:000 | DONE wsp | na 16 16 |        |             |
3638:000 | DONE ins | na 16 16 | 006f95 | a4 06       |                 ldy.d 000206         restore Data Stack
3639:000 | DONE wsp | na 16 16 |        |             |
3640:000 | DONE ins | na 16 16 | 006f97 | 60          |                 rts                  
3641:000 | DONE wsp | na 16 16 |        |             |
3642:000 | DONE wsp | na 16 16 |        |             |
3643:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
3644:000 | DONE cmt | na 16 16 |        |             | ; FATAL ERROR
3645:000 | DONE cmt | na 16 16 |        |             | ; Take address of error string from A, print it and then call abort
3646:000 | DONE lbl | na 16 16 | 006f98 |             | error                                
3647:000 | DONE ins | na 16 16 | 006f98 | 20 9e 6f    |                 jsr 006f9e           
3648:000 | DONE ins | na 16 16 | 006f9b | 4c 97 60    |                 jmp 006097           
3649:000 | DONE wsp | na 16 16 |        |             |
3650:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
3651:000 | DONE cmt | na 16 16 |        |             | ; Print a zero terminated string to the console, adding a CR character. Takes
3652:000 | DONE cmt | na 16 16 |        |             | ; the address of the string in 16-bit A register, calls put_chr.  A is
3653:000 | DONE cmt | na 16 16 |        |             | ; destroyed. We could probably figure out some way to use TYPE instead, but zero
3654:000 | DONE cmt | na 16 16 |        |             | ; terminated strings are easier for the 65816 to use.
3655:000 | DONE cmt | na 16 16 |        |             | ; TODO add version without final line feed
3656:000 | DONE lbl | na 16 16 | 006f9e |             | print_string                         
3657:000 | DONE dir | na 16 16 |        |             |         .!a16                        
3658:000 | DONE dir | na 16 16 |        |             |         .!xy16                       
3659:000 | DONE cmt | na 16 16 |        |             |                 ; don't use tmpdsp for X because we don't know if the user has
3660:000 | DONE cmt | na 16 16 |        |             |                 ; used it for something already
3661:000 | DONE ins | na 16 16 | 006f9e | da          |                 phx                  
3662:000 | DONE ins | na 16 16 | 006f9f | aa          |                 tax                  x16 contains address of string
3663:000 | DONE lbl | na 16 16 | 006fa0 |             | @                                    
3664:000 | DONE ins | na 16 16 | 006fa0 | e2 20       |                 sep 20               
3664:001 | DONE ctl | na  8 16 |        |             |         .!a8
3665:000 | DONE ins | na  8 16 | 006fa2 | bd 00 00    |                 lda.x 0000           LDA $0000,X
3666:000 | DONE ins | na  8 16 | 006fa5 | f0 06       |                 beq 006fad           
3667:000 | DONE ins | na  8 16 | 006fa7 | 20 36 60    |                 jsr 006036           
3668:000 | DONE ins | na  8 16 | 006faa | e8          |                 inx                  
3669:000 | DONE ins | na  8 16 | 006fab | 80 f3       |                 bra 006fa0           
3670:000 | DONE wsp | na  8 16 |        |             |
3671:000 | DONE lbl | na  8 16 | 006fad |             | print_string_done                    
3672:000 | DONE ins | na  8 16 | 006fad | a9 0a       |                 lda.# AscLF          should be CR on some systems
3673:000 | DONE ins | na  8 16 | 006faf | 20 36 60    |                 jsr 006036           
3674:000 | DONE ins | na  8 16 | 006fb2 | c2 20       |                 rep 20               
3674:001 | DONE ctl | na 16 16 |        |             |         .!a16
3675:000 | DONE ins | na 16 16 | 006fb4 | fa          |                 plx                  
3676:000 | DONE ins | na 16 16 | 006fb5 | 60          |                 rts                  
3677:000 | DONE wsp | na 16 16 |        |             |
3678:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
3679:000 | DONE cmt | na 16 16 |        |             | ; CONVERT BYTE TO ASCII
3680:000 | DONE cmt | na 16 16 |        |             | ; Convert byte in A to two ASCII hex digits and print them. Calls
3681:000 | DONE cmt | na 16 16 |        |             | ; nibble_to_ascii. Assumes A is 8 bit.
3682:000 | DONE lbl | na 16 16 | 006fb6 |             | byte_to_ascii                        
3683:000 | DONE ins | na 16 16 | 006fb6 | 48          |                 pha                  
3684:000 | DONE cmt | na 16 16 |        |             |                 ; convert high nibble first
3685:000 | DONE ins | na 16 16 | 006fb7 | 4a          |                 lsr.a                
3686:000 | DONE ins | na 16 16 | 006fb8 | 4a          |                 lsr.a                
3687:000 | DONE ins | na 16 16 | 006fb9 | 4a          |                 lsr.a                
3688:000 | DONE ins | na 16 16 | 006fba | 4a          |                 lsr.a                
3689:000 | DONE ins | na 16 16 | 006fbb | 20 bf 6f    |                 jsr 006fbf           
3690:000 | DONE wsp | na 16 16 |        |             |
3691:000 | DONE ins | na 16 16 | 006fbe | 68          |                 pla                  
3692:000 | DONE wsp | na 16 16 |        |             |
3693:000 | DONE cmt | na 16 16 |        |             |                 ; fall thru to nibble_to_ascii
3694:000 | DONE wsp | na 16 16 |        |             |
3695:000 | DONE wsp | na 16 16 |        |             |
3696:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
3697:000 | DONE cmt | na 16 16 |        |             | ; CONVERT NIBBLE TO ASCII
3698:000 | DONE cmt | na 16 16 |        |             | ; Converts the lower nibble of a number in A and returns the ASCII character
3699:000 | DONE cmt | na 16 16 |        |             | ; number, then prints it. Assumes A is 8 bit
3700:000 | DONE lbl | na 16 16 | 006fbf |             | nibble_to_ascii                      
3701:000 | DONE ins | na 16 16 | 006fbf | 29 0f 00    |                 and.# 000f           
3702:000 | DONE ins | na 16 16 | 006fc2 | 09 30 00    |                 ora.# 30             
3703:000 | DONE ins | na 16 16 | 006fc5 | c9 3a 00    |                 cmp.# 003a           '9' + 1
3704:000 | DONE ins | na 16 16 | 006fc8 | 90 03       |                 bcc 006fcd           
3705:000 | DONE ins | na 16 16 | 006fca | 69 06 00    |                 adc.# 0006           
3706:000 | DONE lbl | na 16 16 | 006fcd |             | @                                    
3707:000 | DONE ins | na 16 16 | 006fcd | 20 36 60    |                 jsr 006036           
3708:000 | DONE dir | na 16 16 |        |             |         .!a16                        
3709:000 | DONE ins | na 16 16 | 006fd0 | 60          |                 rts                  
3710:000 | DONE wsp | na 16 16 |        |             |
3711:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
3712:000 | DONE cmt | na 16 16 |        |             | ; Convert a string given by ( addr u ) to lowercase in place. Since we have to
3713:000 | DONE cmt | na 16 16 |        |             | ; treat the input buffer as read-only by ANS rules, we have to put the converted
3714:000 | DONE cmt | na 16 16 |        |             | ; string somewhere and then return the new address and length
3715:000 | DONE lbl | na 16 16 | 006fd1 |             | string_to_lowercase                  
3716:000 | DONE cmt | na 16 16 |        |             |                 ; TODO CODE THIS
3717:000 | DONE ins | na 16 16 | 006fd1 | 60          |                 rts                  
3718:000 | DONE wsp | na 16 16 |        |             |
3719:000 | DONE wsp | na 16 16 |        |             |
3720:000 | DONE cmt | na 16 16 |        |             | ; ===================================================================
3721:000 | DONE cmt | na 16 16 |        |             | ; HIGH-LEVEL WORDS
3722:000 | DONE wsp | na 16 16 |        |             |
3723:000 | DONE cmt | na 16 16 |        |             | ; These are executed during start up. Remember that we have to put a space at
3724:000 | DONE cmt | na 16 16 |        |             | ; the end of the line if there is another line with code following it. No zero
3725:000 | DONE cmt | na 16 16 |        |             | ; or CR/LF is required
3726:000 | DONE lbl | na 16 16 | 006fd2 |             | hi-start                             
3727:000 | DONE cmt | na 16 16 |        |             |         ; High level definitions
3728:000 | DONE dir | na 16 16 | 006fd2 | (37 bytes)  |         .byte 3a, 20, 28, 20, 5b, 63, 68, 61, 72, 5d, 20, 29, 20, (...) ( "parens"
3728:000 | DONE dir | na 16 16 |        |             |                 3a 20 28 20 5b 63 68 61  --  :   (   [ c h a
3728:000 | DONE dir | na 16 16 |        |             |                 72 5d 20 29 20 70 61 72  --  r ]   )   p a r
3728:000 | DONE dir | na 16 16 |        |             |                 73 65 20 32 64 72 6f 70  --  s e   2 d r o p
3728:000 | DONE dir | na 16 16 |        |             |                 20 3b 20 69 6d 6d 65 64  --    ;   i m m e d
3728:000 | DONE dir | na 16 16 |        |             |                 69 61 74 65 20           --  i a t e  
3729:000 | DONE dir | na 16 16 | 006ff7 | (37 bytes)  |         .byte 3a, 20, 2e, 28, 20, 5b, 63, 68, 61, 72, 5d, 20, 29, (...) .( "dotparens"
3729:000 | DONE dir | na 16 16 |        |             |                 3a 20 2e 28 20 5b 63 68  --  :   . (   [ c h
3729:000 | DONE dir | na 16 16 |        |             |                 61 72 5d 20 29 20 70 61  --  a r ]   )   p a
3729:000 | DONE dir | na 16 16 |        |             |                 72 73 65 20 74 79 70 65  --  r s e   t y p e
3729:000 | DONE dir | na 16 16 |        |             |                 20 3b 20 69 6d 6d 65 64  --    ;   i m m e d
3729:000 | DONE dir | na 16 16 |        |             |                 69 61 74 65 20           --  i a t e  
3730:000 | DONE dir | na 16 16 | 00701c | (56 bytes)  |         .byte 3a, 20, 69, 66, 20, 70, 6f, 73, 74, 70, 6f, 6e, 65, (...) IF
3730:000 | DONE dir | na 16 16 |        |             |                 3a 20 69 66 20 70 6f 73  --  :   i f   p o s
3730:000 | DONE dir | na 16 16 |        |             |                 74 70 6f 6e 65 20 30 62  --  t p o n e   0 b
3730:000 | DONE dir | na 16 16 |        |             |                 72 61 6e 63 68 20 68 65  --  r a n c h   h e
3730:000 | DONE dir | na 16 16 |        |             |                 72 65 20 30 20 2c 20 3b  --  r e   0   ,   ;
3730:000 | DONE dir | na 16 16 |        |             |                 20 69 6d 6d 65 64 69 61  --    i m m e d i a
3730:000 | DONE dir | na 16 16 |        |             |                 74 65 20 63 6f 6d 70 69  --  t e   c o m p i
3730:000 | DONE dir | na 16 16 |        |             |                 6c 65 2d 6f 6e 6c 79 20  --  l e - o n l y  
3730:000 | DONE dir | na 16 16 |        |             |                                          -- 
3731:000 | DONE dir | na 16 16 | 007054 | (44 bytes)  |         .byte 3a, 20, 74, 68, 65, 6e, 20, 68, 65, 72, 65, 20, 73, (...) THEN
3731:000 | DONE dir | na 16 16 |        |             |                 3a 20 74 68 65 6e 20 68  --  :   t h e n   h
3731:000 | DONE dir | na 16 16 |        |             |                 65 72 65 20 73 77 61 70  --  e r e   s w a p
3731:000 | DONE dir | na 16 16 |        |             |                 20 21 20 3b 20 69 6d 6d  --    !   ;   i m m
3731:000 | DONE dir | na 16 16 |        |             |                 65 64 69 61 74 65 20 63  --  e d i a t e   c
3731:000 | DONE dir | na 16 16 |        |             |                 6f 6d 70 69 6c 65 2d 6f  --  o m p i l e - o
3731:000 | DONE dir | na 16 16 |        |             |                 6e 6c 79 20              --  n l y  
3732:000 | DONE dir | na 16 16 | 007080 | (68 bytes)  |         .byte 3a, 20, 65, 6c, 73, 65, 20, 70, 6f, 73, 74, 70, 6f, (...) ELSE
3732:000 | DONE dir | na 16 16 |        |             |                 3a 20 65 6c 73 65 20 70  --  :   e l s e   p
3732:000 | DONE dir | na 16 16 |        |             |                 6f 73 74 70 6f 6e 65 20  --  o s t p o n e  
3732:000 | DONE dir | na 16 16 |        |             |                 62 72 61 6e 63 68 20 68  --  b r a n c h   h
3732:000 | DONE dir | na 16 16 |        |             |                 65 72 65 20 30 20 2c 20  --  e r e   0   ,  
3732:000 | DONE dir | na 16 16 |        |             |                 68 65 72 65 20 72 6f 74  --  h e r e   r o t
3732:000 | DONE dir | na 16 16 |        |             |                 20 21 20 3b 20 69 6d 6d  --    !   ;   i m m
3732:000 | DONE dir | na 16 16 |        |             |                 65 64 69 61 74 65 20 63  --  e d i a t e   c
3732:000 | DONE dir | na 16 16 |        |             |                 6f 6d 70 69 6c 65 2d 6f  --  o m p i l e - o
3732:000 | DONE dir | na 16 16 |        |             |                 6e 6c 79 20              --  n l y  
3733:000 | DONE dir | na 16 16 | 0070c4 | (61 bytes)  |         .byte 3a, 20, 72, 65, 70, 65, 61, 74, 20, 70, 6f, 73, 74, (...) REPEAT
3733:000 | DONE dir | na 16 16 |        |             |                 3a 20 72 65 70 65 61 74  --  :   r e p e a t
3733:000 | DONE dir | na 16 16 |        |             |                 20 70 6f 73 74 70 6f 6e  --    p o s t p o n
3733:000 | DONE dir | na 16 16 |        |             |                 65 20 61 67 61 69 6e 20  --  e   a g a i n  
3733:000 | DONE dir | na 16 16 |        |             |                 68 65 72 65 20 73 77 61  --  h e r e   s w a
3733:000 | DONE dir | na 16 16 |        |             |                 70 20 21 20 3b 20 69 6d  --  p   !   ;   i m
3733:000 | DONE dir | na 16 16 |        |             |                 6d 65 64 69 61 74 65 20  --  m e d i a t e  
3733:000 | DONE dir | na 16 16 |        |             |                 63 6f 6d 70 69 6c 65 2d  --  c o m p i l e -
3733:000 | DONE dir | na 16 16 |        |             |                 6f 6e 6c 79 20           --  o n l y  
3734:000 | DONE dir | na 16 16 | 007101 | (52 bytes)  |         .byte 3a, 20, 75, 6e, 74, 69, 6c, 20, 70, 6f, 73, 74, 70, (...) UNTIL
3734:000 | DONE dir | na 16 16 |        |             |                 3a 20 75 6e 74 69 6c 20  --  :   u n t i l  
3734:000 | DONE dir | na 16 16 |        |             |                 70 6f 73 74 70 6f 6e 65  --  p o s t p o n e
3734:000 | DONE dir | na 16 16 |        |             |                 20 30 62 72 61 6e 63 68  --    0 b r a n c h
3734:000 | DONE dir | na 16 16 |        |             |                 20 2c 20 3b 20 69 6d 6d  --    ,   ;   i m m
3734:000 | DONE dir | na 16 16 |        |             |                 65 64 69 61 74 65 20 63  --  e d i a t e   c
3734:000 | DONE dir | na 16 16 |        |             |                 6f 6d 70 69 6c 65 2d 6f  --  o m p i l e - o
3734:000 | DONE dir | na 16 16 |        |             |                 6e 6c 79 20              --  n l y  
3735:000 | DONE dir | na 16 16 | 007135 | (64 bytes)  |         .byte 3a, 20, 77, 68, 69, 6c, 65, 20, 70, 6f, 73, 74, 70, (...) WHILE
3735:000 | DONE dir | na 16 16 |        |             |                 3a 20 77 68 69 6c 65 20  --  :   w h i l e  
3735:000 | DONE dir | na 16 16 |        |             |                 70 6f 73 74 70 6f 6e 65  --  p o s t p o n e
3735:000 | DONE dir | na 16 16 |        |             |                 20 30 62 72 61 6e 63 68  --    0 b r a n c h
3735:000 | DONE dir | na 16 16 |        |             |                 20 68 65 72 65 20 30 20  --    h e r e   0  
3735:000 | DONE dir | na 16 16 |        |             |                 2c 20 73 77 61 70 20 3b  --  ,   s w a p   ;
3735:000 | DONE dir | na 16 16 |        |             |                 20 69 6d 6d 65 64 69 61  --    i m m e d i a
3735:000 | DONE dir | na 16 16 |        |             |                 74 65 20 63 6f 6d 70 69  --  t e   c o m p i
3735:000 | DONE dir | na 16 16 |        |             |                 6c 65 2d 6f 6e 6c 79 20  --  l e - o n l y  
3735:000 | DONE dir | na 16 16 |        |             |                                          -- 
3736:000 | DONE wsp | na 16 16 |        |             |
3737:000 | DONE cmt | na 16 16 |        |             |         ; High level math definitions. The should be moved to actual 65816 code
3738:000 | DONE cmt | na 16 16 |        |             |         ; for speed at some point. Note we use SM/REM instead of FM/MOD for most
3739:000 | DONE cmt | na 16 16 |        |             |         ; stuff anyway. Definitions for SM/REM and FM/MOD taken von Gforth
3740:000 | DONE cmt | na 16 16 |        |             |         ; sources, see
3741:000 | DONE cmt | na 16 16 |        |             |         ; https://groups.google.com/forum/#!topic/comp.lang.forth/_bx4dJFb9R0
3742:000 | DONE dir | na 16 16 | 007175 | (59 bytes)  |         .byte 3a, 20, 73, 6d, 2f, 72, 65, 6d, 20, 6f, 76, 65, 72, (...) 
3742:000 | DONE dir | na 16 16 |        |             |                 3a 20 73 6d 2f 72 65 6d  --  :   s m / r e m
3742:000 | DONE dir | na 16 16 |        |             |                 20 6f 76 65 72 20 3e 72  --    o v e r   > r
3742:000 | DONE dir | na 16 16 |        |             |                 20 64 75 70 20 3e 72 20  --    d u p   > r  
3742:000 | DONE dir | na 16 16 |        |             |                 61 62 73 20 2d 72 6f 74  --  a b s   - r o t
3742:000 | DONE dir | na 16 16 |        |             |                 20 64 61 62 73 20 72 6f  --    d a b s   r o
3742:000 | DONE dir | na 16 16 |        |             |                 74 20 75 6d 2f 6d 6f 64  --  t   u m / m o d
3742:000 | DONE dir | na 16 16 |        |             |                 20 72 3e 20 72 40 20 78  --    r >   r @   x
3742:000 | DONE dir | na 16 16 |        |             |                 6f 72 20                 --  o r  
3743:000 | DONE dir | na 16 16 | 0071b0 | (51 bytes)  |         .byte 30, 3c, 20, 69, 66, 20, 6e, 65, 67, 61, 74, 65, 20, (...) 
3743:000 | DONE dir | na 16 16 |        |             |                 30 3c 20 69 66 20 6e 65  --  0 <   i f   n e
3743:000 | DONE dir | na 16 16 |        |             |                 67 61 74 65 20 74 68 65  --  g a t e   t h e
3743:000 | DONE dir | na 16 16 |        |             |                 6e 20 72 3e 20 30 3c 20  --  n   r >   0 <  
3743:000 | DONE dir | na 16 16 |        |             |                 69 66 20 73 77 61 70 20  --  i f   s w a p  
3743:000 | DONE dir | na 16 16 |        |             |                 6e 65 67 61 74 65 20 73  --  n e g a t e   s
3743:000 | DONE dir | na 16 16 |        |             |                 77 61 70 20 74 68 65 6e  --  w a p   t h e n
3743:000 | DONE dir | na 16 16 |        |             |                 20 3b 20                 --    ;  
3744:000 | DONE dir | na 16 16 | 0071e3 | (57 bytes)  |         .byte 3a, 20, 66, 6d, 2f, 6d, 6f, 64, 20, 64, 75, 70, 20, (...) 
3744:000 | DONE dir | na 16 16 |        |             |                 3a 20 66 6d 2f 6d 6f 64  --  :   f m / m o d
3744:000 | DONE dir | na 16 16 |        |             |                 20 64 75 70 20 3e 72 20  --    d u p   > r  
3744:000 | DONE dir | na 16 16 |        |             |                 64 75 70 20 30 3c 20 69  --  d u p   0 <   i
3744:000 | DONE dir | na 16 16 |        |             |                 66 20 6e 65 67 61 74 65  --  f   n e g a t e
3744:000 | DONE dir | na 16 16 |        |             |                 20 3e 72 20 64 6e 65 67  --    > r   d n e g
3744:000 | DONE dir | na 16 16 |        |             |                 61 74 65 20 72 3e 20 74  --  a t e   r >   t
3744:000 | DONE dir | na 16 16 |        |             |                 68 65 6e 20 6f 76 65 72  --  h e n   o v e r
3744:000 | DONE dir | na 16 16 |        |             |                 20                       --   
3745:000 | DONE dir | na 16 16 | 00721c | (63 bytes)  |         .byte 30, 3c, 20, 69, 66, 20, 74, 75, 63, 6b, 20, 2b, 20, (...) 
3745:000 | DONE dir | na 16 16 |        |             |                 30 3c 20 69 66 20 74 75  --  0 <   i f   t u
3745:000 | DONE dir | na 16 16 |        |             |                 63 6b 20 2b 20 73 77 61  --  c k   +   s w a
3745:000 | DONE dir | na 16 16 |        |             |                 70 20 74 68 65 6e 20 75  --  p   t h e n   u
3745:000 | DONE dir | na 16 16 |        |             |                 6d 2f 6d 6f 64 20 72 3e  --  m / m o d   r >
3745:000 | DONE dir | na 16 16 |        |             |                 20 30 3c 20 69 66 20 73  --    0 <   i f   s
3745:000 | DONE dir | na 16 16 |        |             |                 77 61 70 20 6e 65 67 61  --  w a p   n e g a
3745:000 | DONE dir | na 16 16 |        |             |                 74 65 20 73 77 61 70 20  --  t e   s w a p  
3745:000 | DONE dir | na 16 16 |        |             |                 74 68 65 6e 20 3b 20     --  t h e n   ;  
3746:000 | DONE dir | na 16 16 | 00725b | (33 bytes)  |         .byte 3a, 20, 2f, 20, 3e, 72, 20, 73, 3e, 64, 20, 72, 3e, (...) 
3746:000 | DONE dir | na 16 16 |        |             |                 3a 20 2f 20 3e 72 20 73  --  :   /   > r   s
3746:000 | DONE dir | na 16 16 |        |             |                 3e 64 20 72 3e 20 73 6d  --  > d   r >   s m
3746:000 | DONE dir | na 16 16 |        |             |                 2f 72 65 6d 20 73 77 61  --  / r e m   s w a
3746:000 | DONE dir | na 16 16 |        |             |                 70 20 64 72 6f 70 20 3b  --  p   d r o p   ;
3746:000 | DONE dir | na 16 16 |        |             |                 20                       --   
3747:000 | DONE dir | na 16 16 | 00727c | (26 bytes)  |         .byte 3a, 20, 2f, 6d, 6f, 64, 20, 3e, 72, 20, 73, 3e, 64, (...) 
3747:000 | DONE dir | na 16 16 |        |             |                 3a 20 2f 6d 6f 64 20 3e  --  :   / m o d   >
3747:000 | DONE dir | na 16 16 |        |             |                 72 20 73 3e 64 20 72 3e  --  r   s > d   r >
3747:000 | DONE dir | na 16 16 |        |             |                 20 73 6d 2f 72 65 6d 20  --    s m / r e m  
3747:000 | DONE dir | na 16 16 |        |             |                 3b 20                    --  ;  
3748:000 | DONE dir | na 16 16 | 007296 | (33 bytes)  |         .byte 3a, 20, 2a, 2f, 20, 3e, 72, 20, 6d, 2a, 20, 72, 3e, (...) 
3748:000 | DONE dir | na 16 16 |        |             |                 3a 20 2a 2f 20 3e 72 20  --  :   * /   > r  
3748:000 | DONE dir | na 16 16 |        |             |                 6d 2a 20 72 3e 20 73 6d  --  m *   r >   s m
3748:000 | DONE dir | na 16 16 |        |             |                 2f 72 65 6d 20 73 77 61  --  / r e m   s w a
3748:000 | DONE dir | na 16 16 |        |             |                 70 20 64 72 6f 70 20 3b  --  p   d r o p   ;
3748:000 | DONE dir | na 16 16 |        |             |                 20                       --   
3749:000 | DONE dir | na 16 16 | 0072b7 | (26 bytes)  |         .byte 3a, 20, 2a, 2f, 6d, 6f, 64, 20, 3e, 72, 20, 6d, 2a, (...) 
3749:000 | DONE dir | na 16 16 |        |             |                 3a 20 2a 2f 6d 6f 64 20  --  :   * / m o d  
3749:000 | DONE dir | na 16 16 |        |             |                 3e 72 20 6d 2a 20 72 3e  --  > r   m *   r >
3749:000 | DONE dir | na 16 16 |        |             |                 20 73 6d 2f 72 65 6d 20  --    s m / r e m  
3749:000 | DONE dir | na 16 16 |        |             |                 3b 20                    --  ;  
3750:000 | DONE wsp | na 16 16 |        |             |
3751:000 | DONE cmt | na 16 16 |        |             |         ; Splash strings
3752:000 | DONE dir | na 16 16 | 0072d1 | (35 bytes)  |         .byte 2e, 28, 20, 4c, 69, 61, 72, 61, 20, 46, 6f, 72, 74, (...) 
3752:000 | DONE dir | na 16 16 |        |             |                 2e 28 20 4c 69 61 72 61  --  . (   L i a r a
3752:000 | DONE dir | na 16 16 |        |             |                 20 46 6f 72 74 68 20 66  --    F o r t h   f
3752:000 | DONE dir | na 16 16 |        |             |                 6f 72 20 74 68 65 20 57  --  o r   t h e   W
3752:000 | DONE dir | na 16 16 |        |             |                 36 35 43 32 36 35 53 58  --  6 5 C 2 6 5 S X
3752:000 | DONE dir | na 16 16 |        |             |                 42 20 29                 --  B   )
3753:000 | DONE dir | na 16 16 | 0072f4 | (37 bytes)  |         .byte 63, 72, 20, 2e, 28, 20, 56, 65, 72, 73, 69, 6f, 6e, (...) 
3753:000 | DONE dir | na 16 16 |        |             |                 63 72 20 2e 28 20 56 65  --  c r   . (   V e
3753:000 | DONE dir | na 16 16 |        |             |                 72 73 69 6f 6e 20 50 52  --  r s i o n   P R
3753:000 | DONE dir | na 16 16 |        |             |                 45 2d 41 4c 50 48 41 20  --  E - A L P H A  
3753:000 | DONE dir | na 16 16 |        |             |                 31 39 2e 20 46 65 62 20  --  1 9 .   F e b  
3753:000 | DONE dir | na 16 16 |        |             |                 32 30 31 37 29           --  2 0 1 7 )
3754:000 | DONE dir | na 16 16 | 007319 | (51 bytes)  |         .byte 63, 72, 20, 2e, 28, 20, 53, 63, 6f, 74, 20, 57, 2e, (...) 
3754:000 | DONE dir | na 16 16 |        |             |                 63 72 20 2e 28 20 53 63  --  c r   . (   S c
3754:000 | DONE dir | na 16 16 |        |             |                 6f 74 20 57 2e 20 53 74  --  o t   W .   S t
3754:000 | DONE dir | na 16 16 |        |             |                 65 76 65 6e 73 6f 6e 20  --  e v e n s o n  
3754:000 | DONE dir | na 16 16 |        |             |                 3c 73 63 6f 74 2e 73 74  --  < s c o t . s t
3754:000 | DONE dir | na 16 16 |        |             |                 65 76 65 6e 73 6f 6e 40  --  e v e n s o n @
3754:000 | DONE dir | na 16 16 |        |             |                 67 6d 61 69 6c 2e 63 6f  --  g m a i l . c o
3754:000 | DONE dir | na 16 16 |        |             |                 6d 3e 29                 --  m > )
3755:000 | DONE dir | na 16 16 | 00734c | (52 bytes)  |         .byte 63, 72, 20, 2e, 28, 20, 4c, 69, 61, 72, 61, 20, 46, (...) 
3755:000 | DONE dir | na 16 16 |        |             |                 63 72 20 2e 28 20 4c 69  --  c r   . (   L i
3755:000 | DONE dir | na 16 16 |        |             |                 61 72 61 20 46 6f 72 74  --  a r a   F o r t
3755:000 | DONE dir | na 16 16 |        |             |                 68 20 63 6f 6d 65 73 20  --  h   c o m e s  
3755:000 | DONE dir | na 16 16 |        |             |                 77 69 74 68 20 61 62 73  --  w i t h   a b s
3755:000 | DONE dir | na 16 16 |        |             |                 6f 6c 75 74 65 6c 79 20  --  o l u t e l y  
3755:000 | DONE dir | na 16 16 |        |             |                 4e 4f 20 57 41 52 52 41  --  N O   W A R R A
3755:000 | DONE dir | na 16 16 |        |             |                 4e 54 59 29              --  N T Y )
3756:000 | DONE dir | na 16 16 | 007380 | (28 bytes)  |         .byte 63, 72, 20, 2e, 28, 20, 54, 79, 70, 65, 20, 27, 62, (...) 
3756:000 | DONE dir | na 16 16 |        |             |                 63 72 20 2e 28 20 54 79  --  c r   . (   T y
3756:000 | DONE dir | na 16 16 |        |             |                 70 65 20 27 62 79 65 27  --  p e   ' b y e '
3756:000 | DONE dir | na 16 16 |        |             |                 20 74 6f 20 65 78 69 74  --    t o   e x i t
3756:000 | DONE dir | na 16 16 |        |             |                 29 20 63 72              --  )   c r
3757:000 | DONE lbl | na 16 16 | 00739c |             | hi-end                               
3758:000 | DONE wsp | na 16 16 |        |             |
3759:000 | DONE wsp | na 16 16 |        |             |
3760:000 | DONE cmt | na 16 16 |        |             | ; ===================================================================
3761:000 | DONE cmt | na 16 16 |        |             | ; BOTTOM INCLUDES
3762:000 | DONE wsp | na 16 16 |        |             |
3763:000 | DONE cmt | na 16 16 |        |             | ; List of Strings for Liara Forth for the W65C265SXB
3763:001 | DONE cmt | na 16 16 |        |             | ; Scot W. Stevenson <scot.stevenson@gmail.com>
3763:002 | DONE cmt | na 16 16 |        |             | ; First version: 01. Apr 2016
3763:003 | DONE cmt | na 16 16 |        |             | ; This version:  15. Feb 2017
3763:004 | DONE wsp | na 16 16 |        |             |
3763:005 | DONE cmt | na 16 16 |        |             | ; This file is included by liaraforth.tasm
3763:006 | DONE wsp | na 16 16 |        |             |
3763:007 | DONE cmt | na 16 16 |        |             | ; ===================================================================
3763:008 | DONE cmt | na 16 16 |        |             | ; GENERAL
3763:009 | DONE wsp | na 16 16 |        |             |
3763:010 | DONE cmt | na 16 16 |        |             | ; All general strings must be zero-terminated, names start with "s_"
3763:011 | DONE cmt | na 16 16 |        |             | ; TODO see if "ok" needs trailing space. The printstring routine adds the EOL
3763:012 | DONE cmt | na 16 16 |        |             | ; character
3763:013 | DONE wsp | na 16 16 |        |             |
3763:014 | DONE lbl | na 16 16 | 00739c |             | s_ok                                 
3763:015 | DONE dir | na 16 16 | 00739c | (4 bytes)   |         .byte 20, 6f, 6b, 0          note space at beginning
3763:015 | DONE dir | na 16 16 |        |             |                 20 6f 6b 00              --    o k .
3763:016 | DONE lbl | na 16 16 | 0073a0 |             | s_compiled                           
3763:017 | DONE dir | na 16 16 | 0073a0 | (10 bytes)  |         .byte 20, 63, 6f, 6d, 70, 69, 6c, 65, 64, 0 
3763:017 | DONE dir | na 16 16 |        |             |                 20 63 6f 6d 70 69 6c 65  --    c o m p i l e
3763:017 | DONE dir | na 16 16 |        |             |                 64 00                    --  d .
3763:018 | DONE wsp | na 16 16 |        |             |
3763:019 | DONE wsp | na 16 16 |        |             |
3763:020 | DONE cmt | na 16 16 |        |             | ; ===================================================================
3763:021 | DONE cmt | na 16 16 |        |             | ; ERROR STRINGS
3763:022 | DONE wsp | na 16 16 |        |             |
3763:023 | DONE cmt | na 16 16 |        |             | ; All error strings must be zero-terminated, names start with "es_"
3763:024 | DONE wsp | na 16 16 |        |             |
3763:025 | DONE lbl | na 16 16 | 0073aa |             | es_allot                             
3763:026 | DONE dir | na 16 16 | 0073aa | (20 bytes)  |         .byte 41, 4c, 4c, 4f, 54, 20, 6f, 75, 74, 20, 6f, 66, 20, (...) 
3763:026 | DONE dir | na 16 16 |        |             |                 41 4c 4c 4f 54 20 6f 75  --  A L L O T   o u
3763:026 | DONE dir | na 16 16 |        |             |                 74 20 6f 66 20 62 6f 75  --  t   o f   b o u
3763:026 | DONE dir | na 16 16 |        |             |                 6e 64 73 00              --  n d s .
3763:027 | DONE lbl | na 16 16 | 0073be |             | es_channel                           
3763:028 | DONE dir | na 16 16 | 0073be | (26 bytes)  |         .byte 41, 63, 63, 65, 73, 73, 69, 6e, 67, 20, 75, 6e, 6b, (...) 
3763:028 | DONE dir | na 16 16 |        |             |                 41 63 63 65 73 73 69 6e  --  A c c e s s i n
3763:028 | DONE dir | na 16 16 |        |             |                 67 20 75 6e 6b 6e 6f 77  --  g   u n k n o w
3763:028 | DONE dir | na 16 16 |        |             |                 6e 20 63 68 61 6e 6e 65  --  n   c h a n n e
3763:028 | DONE dir | na 16 16 |        |             |                 6c 00                    --  l .
3763:029 | DONE lbl | na 16 16 | 0073d8 |             | es_componly                          
3763:030 | DONE dir | na 16 16 | 0073d8 | (33 bytes)  |         .byte 49, 6e, 74, 65, 72, 70, 72, 65, 74, 69, 6e, 67, 20, (...) 
3763:030 | DONE dir | na 16 16 |        |             |                 49 6e 74 65 72 70 72 65  --  I n t e r p r e
3763:030 | DONE dir | na 16 16 |        |             |                 74 69 6e 67 20 61 20 63  --  t i n g   a   c
3763:030 | DONE dir | na 16 16 |        |             |                 6f 6d 70 69 6c 65 2d 6f  --  o m p i l e - o
3763:030 | DONE dir | na 16 16 |        |             |                 6e 6c 79 20 77 6f 72 64  --  n l y   w o r d
3763:030 | DONE dir | na 16 16 |        |             |                 00                       --  .
3763:031 | DONE lbl | na 16 16 | 0073f9 |             | es_defer                             
3763:032 | DONE dir | na 16 16 | 0073f9 | (29 bytes)  |         .byte 44, 45, 46, 45, 52, 65, 64, 20, 77, 6f, 72, 64, 20, (...) 
3763:032 | DONE dir | na 16 16 |        |             |                 44 45 46 45 52 65 64 20  --  D E F E R e d  
3763:032 | DONE dir | na 16 16 |        |             |                 77 6f 72 64 20 6e 6f 74  --  w o r d   n o t
3763:032 | DONE dir | na 16 16 |        |             |                 20 64 65 66 69 6e 65 64  --    d e f i n e d
3763:032 | DONE dir | na 16 16 |        |             |                 20 79 65 74 00           --    y e t .
3763:033 | DONE lbl | na 16 16 | 007416 |             | es_divzero                           
3763:034 | DONE dir | na 16 16 | 007416 | (17 bytes)  |         .byte 44, 69, 76, 69, 73, 69, 6f, 6e, 20, 62, 79, 20, 7a, (...) 
3763:034 | DONE dir | na 16 16 |        |             |                 44 69 76 69 73 69 6f 6e  --  D i v i s i o n
3763:034 | DONE dir | na 16 16 |        |             |                 20 62 79 20 7a 65 72 6f  --    b y   z e r o
3763:034 | DONE dir | na 16 16 |        |             |                 00                       --  .
3763:035 | DONE lbl | na 16 16 | 007427 |             | es_error                             
3763:036 | DONE dir | na 16 16 | 007427 | (12 bytes)  |         .byte 3e, 3e, 3e, 45, 72, 72, 6f, 72, 3c, 3c, 3c, 0 
3763:036 | DONE dir | na 16 16 |        |             |                 3e 3e 3e 45 72 72 6f 72  --  > > > E r r o r
3763:036 | DONE dir | na 16 16 |        |             |                 3c 3c 3c 00              --  < < < .
3763:037 | DONE lbl | na 16 16 | 007433 |             | es_intonly                           
3763:038 | DONE dir | na 16 16 | 007433 | (22 bytes)  |         .byte 4e, 6f, 74, 20, 69, 6e, 20, 69, 6e, 74, 65, 72, 70, (...) 
3763:038 | DONE dir | na 16 16 |        |             |                 4e 6f 74 20 69 6e 20 69  --  N o t   i n   i
3763:038 | DONE dir | na 16 16 |        |             |                 6e 74 65 72 70 72 65 74  --  n t e r p r e t
3763:038 | DONE dir | na 16 16 |        |             |                 20 6d 6f 64 65 00        --    m o d e .
3763:039 | DONE lbl | na 16 16 | 007449 |             | es_noname                            
3763:040 | DONE dir | na 16 16 | 007449 | (16 bytes)  |         .byte 50, 61, 72, 73, 69, 6e, 67, 20, 66, 61, 69, 6c, 75, (...) 
3763:040 | DONE dir | na 16 16 |        |             |                 50 61 72 73 69 6e 67 20  --  P a r s i n g  
3763:040 | DONE dir | na 16 16 |        |             |                 66 61 69 6c 75 72 65 00  --  f a i l u r e .
3763:040 | DONE dir | na 16 16 |        |             |                                          -- 
3763:041 | DONE lbl | na 16 16 | 007459 |             | es_radix                             
3763:042 | DONE dir | na 16 16 | 007459 | (23 bytes)  |         .byte 44, 69, 67, 69, 74, 20, 6c, 61, 72, 67, 65, 72, 20, (...) 
3763:042 | DONE dir | na 16 16 |        |             |                 44 69 67 69 74 20 6c 61  --  D i g i t   l a
3763:042 | DONE dir | na 16 16 |        |             |                 72 67 65 72 20 74 68 61  --  r g e r   t h a
3763:042 | DONE dir | na 16 16 |        |             |                 6e 20 62 61 73 65 00     --  n   b a s e .
3763:043 | DONE lbl | na 16 16 | 007470 |             | es_refill1                           
3763:044 | DONE dir | na 16 16 | 007470 | (46 bytes)  |         .byte 51, 55, 49, 54, 20, 63, 6f, 75, 6c, 64, 20, 6e, 6f, (...) 
3763:044 | DONE dir | na 16 16 |        |             |                 51 55 49 54 20 63 6f 75  --  Q U I T   c o u
3763:044 | DONE dir | na 16 16 |        |             |                 6c 64 20 6e 6f 74 20 67  --  l d   n o t   g
3763:044 | DONE dir | na 16 16 |        |             |                 65 74 20 69 6e 70 75 74  --  e t   i n p u t
3763:044 | DONE dir | na 16 16 |        |             |                 20 28 52 45 46 49 4c 4c  --    ( R E F I L L
3763:044 | DONE dir | na 16 16 |        |             |                 20 72 65 74 75 72 6e 65  --    r e t u r n e
3763:044 | DONE dir | na 16 16 |        |             |                 64 20 2d 31 29 00        --  d   - 1 ) .
3763:045 | DONE lbl | na 16 16 | 00749e |             | es_refill2                           
3763:046 | DONE dir | na 16 16 | 00749e | (32 bytes)  |         .byte 49, 6c, 6c, 65, 67, 61, 6c, 20, 53, 4f, 55, 52, 43, (...) 
3763:046 | DONE dir | na 16 16 |        |             |                 49 6c 6c 65 67 61 6c 20  --  I l l e g a l  
3763:046 | DONE dir | na 16 16 |        |             |                 53 4f 55 52 43 45 2d 49  --  S O U R C E - I
3763:046 | DONE dir | na 16 16 |        |             |                 44 20 64 75 72 69 6e 67  --  D   d u r i n g
3763:046 | DONE dir | na 16 16 |        |             |                 20 52 45 46 49 4c 4c 00  --    R E F I L L .
3763:046 | DONE dir | na 16 16 |        |             |                                          -- 
3763:047 | DONE lbl | na 16 16 | 0074be |             | es_state                             
3763:048 | DONE dir | na 16 16 | 0074be | (24 bytes)  |         .byte 41, 6c, 72, 65, 61, 64, 79, 20, 69, 6e, 20, 63, 6f, (...) 
3763:048 | DONE dir | na 16 16 |        |             |                 41 6c 72 65 61 64 79 20  --  A l r e a d y  
3763:048 | DONE dir | na 16 16 |        |             |                 69 6e 20 63 6f 6d 70 69  --  i n   c o m p i
3763:048 | DONE dir | na 16 16 |        |             |                 6c 65 20 6d 6f 64 65 00  --  l e   m o d e .
3763:048 | DONE dir | na 16 16 |        |             |                                          -- 
3763:049 | DONE lbl | na 16 16 | 0074d6 |             | es_underflow                         
3763:050 | DONE dir | na 16 16 | 0074d6 | (16 bytes)  |         .byte 53, 74, 61, 63, 6b, 20, 75, 6e, 64, 65, 72, 66, 6c, (...) 
3763:050 | DONE dir | na 16 16 |        |             |                 53 74 61 63 6b 20 75 6e  --  S t a c k   u n
3763:050 | DONE dir | na 16 16 |        |             |                 64 65 72 66 6c 6f 77 00  --  d e r f l o w .
3763:050 | DONE dir | na 16 16 |        |             |                                          -- 
3763:051 | DONE lbl | na 16 16 | 0074e6 |             | es_syntax                            
3763:052 | DONE dir | na 16 16 | 0074e6 | (16 bytes)  |         .byte 20, 55, 6e, 64, 65, 66, 69, 6e, 65, 64, 20, 77, 6f, (...) 
3763:052 | DONE dir | na 16 16 |        |             |                 20 55 6e 64 65 66 69 6e  --    U n d e f i n
3763:052 | DONE dir | na 16 16 |        |             |                 65 64 20 77 6f 72 64 00  --  e d   w o r d .
3763:052 | DONE dir | na 16 16 |        |             |                                          -- 
3763:053 | DONE wsp | na 16 16 |        |             |
3763:054 | DONE wsp | na 16 16 |        |             |
3763:055 | DONE cmt | na 16 16 |        |             | ; ===================================================================
3763:056 | DONE cmt | na 16 16 |        |             | ; ANSI VT-100 SEQUENCES
3763:057 | DONE wsp | na 16 16 |        |             |
3763:058 | DONE lbl | na 16 16 | 0074f6 |             | vt100_page                           
3763:059 | DONE dir | na 16 16 | 0074f6 | (5 bytes)   |         .byte AscESC, 5b, 32, 4a, 0  clear screen
3763:059 | DONE dir | na 16 16 |        |             |                 1b 5b 32 4a 00           --  . [ 2 J .
3763:060 | DONE lbl | na 16 16 | 0074fb |             | vt100_home                           
3763:061 | DONE dir | na 16 16 | 0074fb | (4 bytes)   |         .byte AscESC, 5b, 48, 0      cursor home
3763:061 | DONE dir | na 16 16 |        |             |                 1b 5b 48 00              --  . [ H .
3763:062 | DONE wsp | na 16 16 |        |             |
3763:063 | DONE wsp | na 16 16 |        |             |
3763:064 | DONE cmt | na 16 16 |        |             | ; ===================================================================
3763:065 | DONE cmt | na 16 16 |        |             | ; TESTING STRINGS
3763:066 | DONE wsp | na 16 16 |        |             |
3763:067 | DONE cmt | na 16 16 |        |             | ; These strings are only used during testing and are removed as Liara Forth is
3763:068 | DONE cmt | na 16 16 |        |             | ; developed. All start with "tests_"
3763:069 | DONE wsp | na 16 16 |        |             |
3763:070 | DONE lbl | na 16 16 | 0074ff |             | tests_prev_cmd                       
3763:071 | DONE dir | na 16 16 | 0074ff | (19 bytes)  |         .byte 28, 70, 72, 65, 76, 69, 6f, 75, 73, 20, 63, 6f, 6d, (...) 
3763:071 | DONE dir | na 16 16 |        |             |                 28 70 72 65 76 69 6f 75  --  ( p r e v i o u
3763:071 | DONE dir | na 16 16 |        |             |                 73 20 63 6f 6d 6d 61 6e  --  s   c o m m a n
3763:071 | DONE dir | na 16 16 |        |             |                 64 29 00                 --  d ) .
3763:072 | DONE lbl | na 16 16 | 007512 |             | tests_next_cmd                       
3763:073 | DONE dir | na 16 16 | 007512 | (15 bytes)  |         .byte 28, 6e, 65, 78, 74, 20, 63, 6f, 6d, 6d, 61, 6e, 64, (...) 
3763:073 | DONE dir | na 16 16 |        |             |                 28 6e 65 78 74 20 63 6f  --  ( n e x t   c o
3763:073 | DONE dir | na 16 16 |        |             |                 6d 6d 61 6e 64 29 00     --  m m a n d ) .
3763:074 | DONE wsp | na 16 16 |        |             |
3763:075 | DONE wsp | na 16 16 |        |             |
3763:076 | DONE cmt | na 16 16 |        |             | ; ===================================================================
3763:077 | DONE cmt | na 16 16 |        |             | ; ALPHABET STRINGS
3763:078 | DONE wsp | na 16 16 |        |             |
3763:079 | DONE cmt | na 16 16 |        |             | ; Leave alphastr as the last entry in the source code to make it easier to
3763:080 | DONE cmt | na 16 16 |        |             | ; see where this section ends. This cannot be a zero-terminated string
3763:081 | DONE wsp | na 16 16 |        |             |
3763:082 | DONE lbl | na 16 16 | 007521 |             | alphastr                             
3763:083 | DONE dir | na 16 16 | 007521 | (35 bytes)  |         .byte 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 61, 62, 63, (...) 
3763:083 | DONE dir | na 16 16 |        |             |                 30 31 32 33 34 35 36 37  --  0 1 2 3 4 5 6 7
3763:083 | DONE dir | na 16 16 |        |             |                 38 39 61 62 63 64 65 66  --  8 9 a b c d e f
3763:083 | DONE dir | na 16 16 |        |             |                 67 68 69 6a 6b 6c 6d 6e  --  g h i j k l m n
3763:083 | DONE dir | na 16 16 |        |             |                 6f 70 71 72 73 74 75 76  --  o p q r s t u v
3763:083 | DONE dir | na 16 16 |        |             |                 77 79 7a                 --  w y z
3764:000 | DONE wsp | na 16 16 |        |             |
3765:000 | DONE cmt | na 16 16 |        |             | ; ===================================================================
3766:000 | DONE cmt | na 16 16 |        |             | ; TESTING ROUTINES (UNCOMMENT FOR USE)
3767:000 | DONE wsp | na 16 16 |        |             |
3768:000 | DONE cmt | na 16 16 |        |             |                 ; --- TODO TESTING (PRINT ONE "A") ---
3769:000 | DONE cmt | na 16 16 |        |             |                 ; lda.# 61
3770:000 | DONE cmt | na 16 16 |        |             |                 ; jsr put_chr
3771:000 | DONE cmt | na 16 16 |        |             |                 ; .!a16
3772:000 | DONE cmt | na 16 16 |        |             |                 ; brk 00
3773:000 | DONE cmt | na 16 16 |        |             |                 ; --- TODO TESTING ---
3774:000 | DONE wsp | na 16 16 |        |             |
3775:000 | DONE cmt | na 16 16 |        |             |                 ; --- TESTING SHOW WHAT IS TOS ---
3776:000 | DONE cmt | na 16 16 |        |             |                 ; tya
3777:000 | DONE cmt | na 16 16 |        |             |                 ; and.# 0ff00
3778:000 | DONE cmt | na 16 16 |        |             |                 ; xba
3779:000 | DONE cmt | na 16 16 |        |             |                 ; jsr byte_to_ascii
3780:000 | DONE cmt | na 16 16 |        |             |                 ; tya
3781:000 | DONE cmt | na 16 16 |        |             |                 ; and.# 00ff
3782:000 | DONE cmt | na 16 16 |        |             |                 ; jsr byte_to_ascii
3783:000 | DONE cmt | na 16 16 |        |             |                 ; jsr xt_cr
3784:000 | DONE cmt | na 16 16 |        |             |                 ; --------------------------------
3785:000 | DONE wsp | na 16 16 |        |             |
3786:000 | DONE cmt | na 16 16 |        |             |                 ; --- TODO TESTING (HALT CPU) ---
3787:000 | DONE cmt | na 16 16 |        |             |                 ; brk 00 ; BRK for 265sxb tests (drops back to Mensch Monitor)
3788:000 | DONE cmt | na 16 16 |        |             |                 ; stp    ; STP for crude65816 emulator tests
3789:000 | DONE cmt | na 16 16 |        |             |                 ; --- TODO TESTING ---
3790:000 | DONE wsp | na 16 16 |        |             |
3791:000 | DONE wsp | na 16 16 |        |             |
3792:000 | DONE cmt | na 16 16 |        |             | ; ===================================================================
3793:000 | DONE cmt | na 16 16 |        |             | ; END
3794:000 | DONE dir | na 16 16 |        |             |         .end                         

MACROS:
        (none)

SYMBOL TABLE:
- accept_bs                   : 00634b
- accept_eol                  : 006343
- accept_loop                 : 0062f8
- accept_nonzero              : 0062eb
- allot_done                  : 0063a1
- allot_error                 : 006390
- allot_minus                 : 006396
- allot_real_gone             : 0063a3
- alphastr                    : 007521
- ascbell                     : 000007
- ascbs                       : 000008
- asccc                       : 000003
- asccn                       : 00000e
- asccp                       : 000010
- asccr                       : 00000d
- ascdel                      : 00007f
- ascesc                      : 00001b
- asclf                       : 00000a
- ascsp                       : 000020
- base                        : 00021c
- branch_rt                   : 0063d4
- brg_value                   : 00000b
- buffers                     : 007c00
- buffersize                  : 0000ff
- byte_to_ascii               : 006fb6
- char_got_char               : 00641d
- cib                         : 00020c
- ciblen                      : 00020e
- cmpl_body                   : 006f8c
- cmpl_common                 : 006f7f
- cmpl_jump                   : 006f7c
- cmpl_subroutine             : 006f77
- cmpl_word                   : 006f72
- co                          : 000004
- compex                      : 006f26
- compex_compile              : 006f5d
- compex_got_name_token       : 006f3b
- compex_interpret            : 006f57
- compex_line_done            : 006f6b
- compex_loop                 : 006f26
- compile_as_code             : 006432
- compile_as_jump             : 006432
- cp                          : 000200
- cp0                         : 000300
- create_got_name             : 006480
- directpage                  : 000200
- directpage-multiple         : 007400
- doconst                     : 006f04
- dodoes                      : 006f12
- does_rt                     : 006525
- dots_done                   : 00619f
- dots_loop                   : 006185
- dots_not_empty              : 00617f
- dovar                       : 006f1f
- dp                          : 000202
- dsp0                        : 0002f8
- dump_byte_loop              : 006548
- dump_done                   : 00655d
- dump_line_loop              : 006542
- equal_not                   : 00623d
- error                       : 006f98
- es_allot                    : 0073aa
- es_channel                  : 0073be
- es_componly                 : 0073d8
- es_defer                    : 0073f9
- es_divzero                  : 007416
- es_error                    : 007427
- es_intonly                  : 007433
- es_noname                   : 007449
- es_radix                    : 007459
- es_refill1                  : 007470
- es_refill2                  : 00749e
- es_state                    : 0074be
- es_syntax                   : 0074e6
- es_underflow                : 0074d6
- execute_ip                  : 00659b
- find-name_all_chars         : 0065d7
- find-name_char_nomatcnt_8   : 0065d3
- find-name_chars             : 0065c8
- find-name_done              : 0065fd
- find-name_failure_16        : 0065fa
- find-name_loop              : 0065b3
- find-name_next_entry        : 0065bc
- find-name_success           : 0065f4
- get_chr                     : 006047
- get_chr_wait                : 00604c
- have_chr?                   : 006056
- hi-end                      : 00739c
- hi-start                    : 006fd2
- hw_acsr0                    : 00df70
- hw_acsr1                    : 00df72
- hw_acsr2                    : 00df74
- hw_acsr3                    : 00df76
- hw_artd0                    : 00df71
- hw_artd1                    : 00df73
- hw_artd2                    : 00df75
- hw_artd3                    : 00df77
- hw_bcr                      : 00df40
- hw_eier                     : 00df47
- hw_eifr                     : 00df45
- hw_pcs7                     : 00df27
- hw_pd0                      : 00df00
- hw_pd1                      : 00df01
- hw_pd2                      : 00df02
- hw_pd3                      : 00df03
- hw_pd4                      : 00df20
- hw_pd5                      : 00df21
- hw_pd6                      : 00df22
- hw_pd7                      : 00df23
- hw_pdd0                     : 00df04
- hw_pdd1                     : 00df05
- hw_pdd2                     : 00df06
- hw_pdd3                     : 00df07
- hw_pdd4                     : 00df24
- hw_pdd5                     : 00df25
- hw_pdd6                     : 00df26
- hw_sscr                     : 00df41
- hw_t0ch                     : 00df61
- hw_t0cl                     : 00df60
- hw_t1ch                     : 00df63
- hw_t1cl                     : 00df62
- hw_t2ch                     : 00df65
- hw_t2cl                     : 00df64
- hw_t3ch                     : 00df67
- hw_t3cl                     : 00df66
- hw_t4ch                     : 00df69
- hw_t4cl                     : 00df68
- hw_t5ch                     : 00df6b
- hw_t5cl                     : 00df6a
- hw_t6ch                     : 00df6d
- hw_t6cl                     : 00df6c
- hw_t7ch                     : 00df6f
- hw_t7cl                     : 00df6e
- hw_tcr                      : 00df42
- hw_ter                      : 00df43
- hw_tier                     : 00df46
- hw_tifr                     : 00df44
- hw_uier                     : 00df49
- hw_uifr                     : 00df48
- ibuffer1                    : 007c00
- ibuffer2                    : 007d00
- im                          : 000002
- insrc                       : 00020a
- literal_rt                  : 00662e
- max_drop                    : 006669
- max_nip                     : 00666b
- max_no_ov                   : 006667
- maxram-multiple             : 006fff
- maxram-single               : 007bff
- min_drop                    : 00667c
- min_nip                     : 00667e
- min_no_ov                   : 00667a
- mstar_abs_nos               : 006647
- mstar_umstar                : 006651
- nc                          : 000001
- nc_limit                    : 000000
- nibble_to_ascii             : 006fbf
- not-equal_equal             : 0060fc
- nt_2drop                    : 006e98
- nt_2dup                     : 006c55
- nt_abort                    : 006a6d
- nt_abs                      : 006c61
- nt_accept                   : 006e41
- nt_again                    : 006bde
- nt_allot                    : 006c1a
- nt_and                      : 006d1b
- nt_base                     : 006b05
- nt_begin                    : 006beb
- nt_bell                     : 0069ce
- nt_bl                       : 006ab6
- nt_bracketchar              : 006b5d
- nt_brackettick              : 006b52
- nt_branch                   : 006bd0
- nt_bye                      : 00699e
- nt_c-comma                  : 006d26
- nt_c-fetch                  : 006d30
- nt_c-store                  : 006d3a
- nt_cells                    : 006b21
- nt_char                     : 006cfa
- nt_cold                     : 0069a9
- nt_colon                    : 006c11
- nt_comma                    : 006e38
- nt_compile-only             : 006b7a
- nt_compilecomma             : 006bf8
- nt_constant                 : 006c9f
- nt_count                    : 006a60
- nt_cr                       : 006aac
- nt_create                   : 006c34
- nt_dabs                     : 006a0e
- nt_decimal                  : 0069da
- nt_depth                    : 006c92
- nt_dnegate                  : 006a1a
- nt_does                     : 006c27
- nt_dot                      : 006af1
- nt_dotquote                 : 006b2e
- nt_dots                     : 006adb
- nt_drop                     : 006ef8
- nt_dump                     : 0069c2
- nt_dup                      : 006eed
- nt_equal                    : 006db9
- nt_evaluate                 : 006b11
- nt_execute                  : 006e7d
- nt_false                    : 006dc2
- nt_fetch                    : 006ecf
- nt_find-name                : 006df6
- nt_fromr                    : 006eaf
- nt_greater                  : 006d93
- nt_here                     : 006e8c
- nt_hex                      : 0069e9
- nt_immediate                : 006b8e
- nt_invert                   : 006cec
- nt_leftbracket              : 006bb8
- nt_less                     : 006d9c
- nt_literal                  : 006b6b
- nt_max                      : 006cd3
- nt_min                      : 006cc8
- nt_minus                    : 006d4e
- nt_mrot                     : 006e66
- nt_mstar                    : 006a4b
- nt_name-int                 : 006a9c
- nt_name-string              : 006c42
- nt_negate                   : 006cde
- nt_nip                      : 006e5b
- nt_not-equal                : 006daf
- nt_one                      : 006de4
- nt_one-minus                : 006d60
- nt_one-plus                 : 006d6a
- nt_or                       : 006d11
- nt_over                     : 006ec3
- nt_pad                      : 006afa
- nt_page                     : 006a02
- nt_parse                    : 006a7a
- nt_parse-name               : 006e15
- nt_plus                     : 006d57
- nt_postpone                 : 006b9f
- nt_question                 : 006a93
- nt_quit                     : 006a87
- nt_refill                   : 006e07
- nt_rfetch                   : 006ea5
- nt_rightbracket             : 006baf
- nt_rot                      : 006e72
- nt_semicolon                : 006c08
- nt_sliteral                 : 006b42
- nt_source                   : 006c84
- nt_source-id                : 006e27
- nt_space                    : 006ace
- nt_spaces                   : 006ac0
- nt_squote                   : 006b38
- nt_star                     : 006a42
- nt_state                    : 006c6c
- nt_stod                     : 006a29
- nt_store                    : 006ed8
- nt_swap                     : 006ee1
- nt_tick                     : 006cbf
- nt_to-in                    : 006c79
- nt_tor                      : 006eb9
- nt_true                     : 006dcf
- nt_tuck                     : 006e4f
- nt_two                      : 006ddb
- nt_two-star                 : 006d44
- nt_type                     : 006ae5
- nt_ummod                    : 006a34
- nt_umstar                   : 006a55
- nt_unused                   : 0069f4
- nt_variable                 : 006caf
- nt_words                    : 0069b5
- nt_xor                      : 006d06
- nt_zbranch                  : 006bc1
- nt_zero                     : 006ded
- nt_zero-equal               : 006da5
- nt_zero-less                : 006d89
- nt_zero-more                : 006d7f
- nt_zero-notequal            : 006d74
- output                      : 000208
- padoffset                   : 00007f
- padsize                     : 0000ff
- parse-name_empty_line       : 0066de
- parse-name_found            : 0066f2
- parse-name_loop             : 0066d1
- parse_found_delimiter       : 00671e
- parse_loop                  : 006711
- parse_reached_eol           : 006722
- physicalram                 : 007fff
- piblen                      : 000210
- pp_got_nt                   : 006747
- pp_got_word                 : 00673c
- pp_not_immediate            : 006757
- print_string                : 006f9e
- print_string_done           : 006fad
- put_chr                     : 006036
- put_chr_wait                : 00603c
- quit_compiled               : 0060d5
- quit_get_line               : 0060aa
- quit_ok                     : 0060cc
- quit_print                  : 0060d8
- quit_refill_successful      : 0060b8
- refill_source_is_not_string : 0067a3
- refill_src_not_kbd          : 00679a
- reset_hardware              : 006000
- s_compiled                  : 0073a0
- s_ok                        : 00739c
- scratch                     : 000220
- sl_loop                     : 0067f5
- sliteral_rt                 : 006820
- spaces_done                 : 006859
- stack-multiple              : 007000
- stack0                      : 007fff
- start                       : 006066
- state                       : 000214
- stod_pos                    : 0067d1
- string_to_lowercase         : 006fd1
- tests_next_cmd              : 007512
- tests_prev_cmd              : 0074ff
- tick_have_nt                : 0062d8
- tick_have_word              : 0062cc
- tmp1                        : 000216
- tmp2                        : 000218
- tmp3                        : 00021a
- tmpdsp                      : 000204
- tmptos                      : 000206
- toin                        : 000212
- type_done                   : 00689f
- type_loop                   : 006893
- ummod_complete              : 00694d
- ummod_notzero               : 00690e
- ummod_overflow              : 006944
- ummod_shift                 : 006926
- umstar_counter              : 0068dd
- umstar_loop                 : 0068cf
- umstar_one_nos              : 0068f0
- umstar_one_tos              : 0068ed
- umstar_two_common           : 0068fc
- umstar_two_nos              : 0068fb
- umstar_two_tos              : 0068f7
- umstar_zero                 : 0068e6
- vt100_home                  : 0074fb
- vt100_page                  : 0074f6
- words_loop                  : 006979
- workword                    : 00021e
- xt_2drop                    : 0062ae
- xt_2dup                     : 0062b5
- xt_abort                    : 006097
- xt_abs                      : 0062dc
- xt_accept                   : 0062e5
- xt_again                    : 006369
- xt_allot                    : 00637f
- xt_and                      : 0063a8
- xt_base                     : 0063af
- xt_begin                    : 0063be
- xt_bell                     : 0063b7
- xt_bl                       : 0063c5
- xt_bracketchar              : 006211
- xt_brackettick              : 006202
- xt_branch                   : 0063cd
- xt_bye                      : 0063e3
- xt_c-comma                  : 0063e7
- xt_c-fetch                  : 0063f5
- xt_c-store                  : 006401
- xt_char                     : 006411
- xt_cold                     : 006063
- xt_colon                    : 0061af
- xt_comma                    : 0061a3
- xt_compile-only             : 006429
- xt_compilecomma             : 006432
- xt_constant                 : 006445
- xt_count                    : 00645f
- xt_cr                       : 00646e
- xt_create                   : 006475
- xt_dabs                     : 0064e8
- xt_decimal                  : 0064ef
- xt_depth                    : 0064f5
- xt_dnegate                  : 006504
- xt_does                     : 006518
- xt_dot                      : 006123
- xt_dotparen                 : 006139
- xt_dotquote                 : 006147
- xt_dots                     : 00615b
- xt_drop                     : 00653b
- xt_dump                     : 006540
- xt_dup                      : 006567
- xt_equal                    : 006234
- xt_evaluate                 : 00656c
- xt_execute                  : 00659e
- xt_fetch                    : 0061fd
- xt_find-name                : 0065a9
- xt_fromr                    : 00676f
- xt_greater                  : 0060ff
- xt_greater_nip              : 006110
- xt_greater_no_ov            : 00610d
- xt_here                     : 00660f
- xt_hex                      : 006616
- xt_immediate                : 006600
- xt_invert                   : 006609
- xt_leftbracket              : 006208
- xt_less                     : 0060df
- xt_less_nip                 : 0060f0
- xt_less_no_ov               : 0060ed
- xt_literal                  : 00661c
- xt_max                      : 00665b
- xt_min                      : 00666e
- xt_minus                    : 006220
- xt_mrot                     : 00622b
- xt_mstar                    : 00663b
- xt_name-int                 : 006681
- xt_name-string              : 00668a
- xt_negate                   : 00669b
- xt_nip                      : 0066a2
- xt_not-equal                : 0060f3
- xt_one                      : 006296
- xt_one-minus                : 00629e
- xt_one-plus                 : 0062a0
- xt_or                       : 0066a5
- xt_over                     : 0066ac
- xt_pad                      : 0066b3
- xt_page                     : 0066bf
- xt_parse                    : 0066fe
- xt_parse-name               : 0066cc
- xt_plus                     : 006218
- xt_postpone                 : 006731
- xt_question                 : 0061ea
- xt_quit                     : 00609f
- xt_refill                   : 006777
- xt_rfetch                   : 006766
- xt_rightbracket             : 00620b
- xt_rot                      : 0067aa
- xt_semicolon                : 0061d1
- xt_sliteral                 : 0067d5
- xt_source                   : 006836
- xt_source-id                : 006843
- xt_space                    : 00684a
- xt_spaces                   : 006851
- xt_squote                   : 0067b3
- xt_star                     : 00685e
- xt_state                    : 006866
- xt_stod                     : 0067c5
- xt_store                    : 0061f1
- xt_swap                     : 00686e
- xt_tick                     : 0062c0
- xt_to-in                    : 006113
- xt_tor                      : 00611b
- xt_true                     : 006874
- xt_tuck                     : 00687c
- xt_two                      : 0062a2
- xt_two-star                 : 0062aa
- xt_type                     : 006885
- xt_ummod                    : 006905
- xt_umstar                   : 0068a6
- xt_unused                   : 006956
- xt_variable                 : 006962
- xt_words                    : 00696f
- xt_xor                      : 006997
- xt_zbranch                  : 006277
- xt_zero                     : 006240
- xt_zero-equal               : 006248
- xt_zero-less                : 006254
- xt_zero-more                : 00626c
- xt_zero-notequal            : 006260
- z_2drop                     : 0062b4
- z_2dup                      : 0062bf
- z_abort                     : 0060de
- z_abs                       : 0062e4
- z_accept                    : 006368
- z_again                     : 00637e
- z_allot                     : 0063a7
- z_and                       : 0063ae
- z_base                      : 0063b6
- z_begin                     : 0063c4
- z_bell                      : 0063bd
- z_bl                        : 0063cc
- z_bracketchar               : 006217
- z_brackettick               : 006208
- z_branch                    : 0063d3
- z_bye                       : 0063e6
- z_c-comma                   : 0063f4
- z_c-fetch                   : 006400
- z_c-store                   : 006410
- z_char                      : 006428
- z_cold                      : 0060de
- z_colon                     : 0061d0
- z_comma                     : 0061ae
- z_compile-only              : 006431
- z_compilecomma              : 006444
- z_constant                  : 00645e
- z_count                     : 00646d
- z_cr                        : 006474
- z_create                    : 0064e7
- z_dabs                      : 0064ee
- z_decimal                   : 0064f4
- z_depth                     : 006503
- z_dnegate                   : 006517
- z_does                      : 006524
- z_dot                       : 006138
- z_dotparen                  : 006146
- z_dotquote                  : 00615b
- z_dots                      : 0061a2
- z_drop                      : 00653f
- z_dump                      : 006566
- z_dup                       : 00656b
- z_equal                     : 00623f
- z_evaluate                  : 00659a
- z_execute                   : 0065a8
- z_fetch                     : 006201
- z_find-name                 : 0065ff
- z_fromr                     : 006776
- z_greater                   : 006112
- z_here                      : 006615
- z_hex                       : 00661b
- z_immediate                 : 006608
- z_invert                    : 00660e
- z_leftbracket               : 00620a
- z_less                      : 0060f2
- z_literal                   : 00662d
- z_max                       : 00666d
- z_min                       : 006680
- z_minus                     : 00622a
- z_mrot                      : 006233
- z_mstar                     : 00665a
- z_name-int                  : 006689
- z_name-string               : 00669a
- z_negate                    : 0066a1
- z_nip                       : 0066a4
- z_not-equal                 : 0060fe
- z_one                       : 00629d
- z_one-minus                 : 00629f
- z_one-plus                  : 0062a1
- z_or                        : 0066ab
- z_over                      : 0066b2
- z_pad                       : 0066be
- z_page                      : 0066cb
- z_parse                     : 006730
- z_parse-name                : 006730
- z_plus                      : 00621f
- z_postpone                  : 006766
- z_question                  : 0061f0
- z_quit                      : 0060de
- z_refill                    : 0067a9
- z_rfetch                    : 00676e
- z_rightbracket              : 006210
- z_rot                       : 0067b2
- z_semicolon                 : 0061e9
- z_sliteral                  : 00681f
- z_source                    : 006842
- z_source-id                 : 006849
- z_space                     : 006850
- z_spaces                    : 00685d
- z_squote                    : 0067c4
- z_star                      : 006865
- z_state                     : 00686d
- z_stod                      : 0067d4
- z_store                     : 0061fc
- z_swap                      : 006873
- z_tick                      : 0062db
- z_to-in                     : 00611a
- z_tor                       : 006122
- z_true                      : 00687b
- z_tuck                      : 006884
- z_two                       : 0062a9
- z_two-star                  : 0062ad
- z_type                      : 0068a5
- z_ummod                     : 006955
- z_umstar                    : 006904
- z_unused                    : 006961
- z_variable                  : 00696e
- z_words                     : 006996
- z_xor                       : 00699d
- z_zbranch                   : 00627d
- z_zero                      : 006247
- z_zero-equal                : 006253
- z_zero-less                 : 00625f
- z_zero-more                 : 006276
- z_zero-notequal             : 00626b
- zb_done                     : 006290
- zb_zero                     : 00628a
- zbranch_rt                  : 00627e
- ze_not_zero                 : 006250
- zero-less-is-less           : 00625c
- zero-more_done              : 006275
- zero-more_true              : 006274
- zne_is_zero                 : 006268
