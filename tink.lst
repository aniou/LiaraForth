A Tinkerer's Assembler for the 6502/65c02/65816
Version BETA 24. January 2017
Copyright 2015-2017 Scot W. Stevenson <scot.stevenson@gmail.com>
This program comes with ABSOLUTELY NO WARRANTY

Code listing for file liaraforth.tasm
Generated on Tue Feb 14 11:36:46 2017
Target MPU: 65816
External files loaded: 4
Number of passes executed: 35
Number of steps executed: 10
Assembly time: 0.09740 seconds
Code origin: 006000
Bytes of machine code: 2925

LISTING:
   Line  Status/Type State/Width Address     Bytes     Instruction
   1:000 | DONE cmt | em  8  8 |        |             | ; Liara Forth for the W65C265SXB
   2:000 | DONE cmt | em  8  8 |        |             | ; Scot W. Stevenson <scot.stevenson@gmail.com>
   3:000 | DONE cmt | em  8  8 |        |             | ; First version: 01. Apr 2016
   4:000 | DONE cmt | em  8  8 |        |             | ; This version: 14. Feb 2017
   5:000 | DONE wsp | em  8  8 |        |             |
   6:000 | DONE cmt | em  8  8 |        |             | ; This code is written in Typist's Assembler Notation for the 65c02/65816
   7:000 | DONE cmt | em  8  8 |        |             | ; See docs/MANUAL.md for more information
   8:000 | DONE wsp | em  8  8 |        |             |
   9:000 | DONE dir | em  8  8 |        |             |         .mpu 65816                   
  10:000 | DONE cmt | em  8  8 |        |             | ;       .origin 8000    ; start of code to save to Flash memory
  11:000 | DONE dir | em  8  8 |        |             |         .origin 6000                 ; start of code to save to built-in RAM
  12:000 | DONE wsp | em  8  8 |        |             |
  13:000 | DONE cmt | em  8  8 |        |             | ; ===================================================================
  14:000 | DONE cmt | em  8  8 |        |             | ; TOP INCLUDES
  15:000 | DONE wsp | em  8  8 |        |             |
  16:000 | DONE cmt | em  8  8 |        |             | ; Definitions for Liara Forth for the W65C265SXB
  16:001 | DONE cmt | em  8  8 |        |             | ; Scot W. Stevenson <scot.stevenson@gmail.com>
  16:002 | DONE cmt | em  8  8 |        |             | ; First version: 01. Apr 2016
  16:003 | DONE cmt | em  8  8 |        |             | ; This version: 12. Feb 2017
  16:004 | DONE wsp | em  8  8 |        |             |
  16:005 | DONE cmt | em  8  8 |        |             | ; This file is included by liaraforth.tasm
  16:006 | DONE wsp | em  8  8 |        |             |
  16:007 | DONE cmt | em  8  8 |        |             | ; Note that Typist's Assembler Notation does not distinguish between
  16:008 | DONE cmt | em  8  8 |        |             | ; upper andlower case. Variations in case are for human readers only.
  16:009 | DONE wsp | em  8  8 |        |             |
  16:010 | DONE cmt | em  8  8 |        |             | ; I/O facilities are handled in the separate kernel files. The definitions for
  16:011 | DONE cmt | em  8  8 |        |             | ; multitasking are preliminary and will probably change
  16:012 | DONE wsp | em  8  8 |        |             |
  16:013 | DONE cmt | em  8  8 |        |             | ; ===================================================================
  16:014 | DONE cmt | em  8  8 |        |             | ; MEMORY MAP (consider moving parts of these to kernel.tasm)
  16:015 | DONE wsp | em  8  8 |        |             |
  16:016 | DONE dir | em  8  8 |        |             |         .equ cp0              0300   ; start of available RAM for Dictionary
  16:017 | DONE dir | em  8  8 |        |             |         .equ physicalram     07fff   ; end of installed RAM
  16:018 | DONE dir | em  8  8 |        |             |         .equ maxram-single   07bff   ; end of available RAM (single task mode)
  16:019 | DONE dir | em  8  8 |        |             |         .equ maxram-multiple 06fff   ; end of available RAM (multitask mode)
  16:020 | DONE dir | em  8  8 |        |             |         .equ buffers  7c00           ; buffer area start
  16:021 | DONE wsp | em  8  8 |        |             |
  16:022 | DONE cmt | em  8  8 |        |             | ; The two input buffers are currently switched in REFILL by bit flipping. If you
  16:023 | DONE cmt | em  8  8 |        |             | ; change their addresses, you'll probably have to rewrite the code there
  16:024 | DONE wsp | em  8  8 |        |             |
  16:025 | DONE dir | em  8  8 |        |             |         .equ buffersize  0ff         ; maximum size for input buffers
  16:026 | DONE dir | em  8  8 |        |             |         .equ ibuffer1   7c00         ; start of 256 byte input buffer 1
  16:027 | DONE dir | em  8  8 |        |             |         .equ ibuffer2   7d00         ; start of 256 byte input buffer 2
  16:028 | DONE dir | em  8  8 |        |             |         .equ padsize     0ff         ; size of PAD, must be > &84
  16:029 | DONE dir | em  8  8 |        |             |         .equ padoffset   07f         ; distance from CP to PAD (holds number strings)
  16:030 | DONE wsp | em  8  8 |        |             |
  16:031 | DONE cmt | em  8  8 |        |             | ; RAM from 0000 to 01ff is left for the Mensch Monitor to use
  16:032 | DONE wsp | em  8  8 |        |             |
  16:033 | DONE dir | em  8  8 |        |             |         .equ directpage          0200 ; single task Direct Page (DP) start
  16:034 | DONE dir | em  8  8 |        |             |         .equ stack-multiple      7000 ; multitask Stack (S) area start
  16:035 | DONE dir | em  8  8 |        |             |         .equ directpage-multiple 7400 ; multitask Direct Page (DP) area start
  16:036 | DONE wsp | em  8  8 |        |             |
  16:037 | DONE cmt | em  8  8 |        |             | ; Initial values
  16:038 | DONE wsp | em  8  8 |        |             |
  16:039 | DONE dir | em  8  8 |        |             |         .equ stack0 7fff             ; single task Stack (S) start (bottom)
  16:040 | DONE dir | em  8  8 |        |             |         .equ dsp0   02f0             ; initial Data Stack Pointer (X)
  16:041 | DONE wsp | em  8  8 |        |             |
  16:042 | DONE cmt | em  8  8 |        |             | ; ===================================================================
  16:043 | DONE cmt | em  8  8 |        |             | ; DIRECT PAGE ADDRESSES
  16:044 | DONE wsp | em  8  8 |        |             |
  16:045 | DONE cmt | em  8  8 |        |             | ; All are one cell (two bytes) long to prevent weird errors
  16:046 | DONE cmt | em  8  8 |        |             | ; TODO move these to USER variables for multitasking
  16:047 | DONE wsp | em  8  8 |        |             |
  16:048 | DONE dir | em  8  8 |        |             |         .equ cp { 000200 + &0 }      ; Compiler Pointer, 2 bytes
  16:049 | DONE dir | em  8  8 |        |             |         .equ dp { 000200 + &2 }      ; Dictionary Pointer, 2 bytes
  16:050 | DONE dir | em  8  8 |        |             |         .equ tmpdsp { 000200 + &4 }  ; Temporary DSP (X) storage, 2 bytes
  16:051 | DONE dir | em  8  8 |        |             |         .equ tmptos { 000200 + &6 }  ; Temporary TOS (Y) storage, 2 bytes
  16:052 | DONE dir | em  8  8 |        |             |         .equ output { 000200 + &8 }  ; Address where output is constructed
  16:053 | DONE dir | em  8  8 |        |             |         .equ insrc { 000200 + &10 }  ; Input Source for SOURCE-ID
  16:054 | DONE dir | em  8  8 |        |             |         .equ cib { 000200 + &12 }    ; Current Input Buffer, 7c00 or 7d00
  16:055 | DONE dir | em  8  8 |        |             |         .equ ciblen { 000200 + &14 } ; Length of current input buffer
  16:056 | DONE dir | em  8  8 |        |             |         .equ piblen { 000200 + &16 } ; Length of previous input buffer
  16:057 | DONE dir | em  8  8 |        |             |         .equ toin { 000200 + &18 }   ; Pointer to CIB (>IN in Forth)
  16:058 | DONE dir | em  8  8 |        |             |         .equ state { 000200 + &20 }  ; STATE: 1 compile, 0 interpret
  16:059 | DONE dir | em  8  8 |        |             |         .equ tmp1 { 000200 + &22 }   ; Temporary storage, usually address
  16:060 | DONE dir | em  8  8 |        |             |         .equ tmp2 { 000200 + &24 }   ; Temporary storage, usually counter
  16:061 | DONE dir | em  8  8 |        |             |         .equ tmp3 { 000200 + &26 }   ; Temporary storage
  16:062 | DONE wsp | em  8  8 |        |             |
  16:063 | DONE wsp | em  8  8 |        |             |
  16:064 | DONE cmt | em  8  8 |        |             | ; ===================================================================
  16:065 | DONE cmt | em  8  8 |        |             | ; HELPER DEFINITIONS
  16:066 | DONE wsp | em  8  8 |        |             |
  16:067 | DONE cmt | em  8  8 |        |             | ; ASCII characters
  16:068 | DONE wsp | em  8  8 |        |             |
  16:069 | DONE dir | em  8  8 |        |             |         .equ AscCC   03              ; break (Control-C) ASCII character
  16:070 | DONE dir | em  8  8 |        |             |         .equ AscBELL 07              ; ACSCII bell sound
  16:071 | DONE dir | em  8  8 |        |             |         .equ AscBS   08              ; backspace ASCII character
  16:072 | DONE dir | em  8  8 |        |             |         .equ AscLF   0a              ; line feed ASCII character
  16:073 | DONE dir | em  8  8 |        |             |         .equ AscCR   0d              ; carriage return ASCII character
  16:074 | DONE dir | em  8  8 |        |             |         .equ AscCN   0e              ; ASCII CNTR-n (for next command)
  16:075 | DONE dir | em  8  8 |        |             |         .equ AscCP   10              ; ASCII CNTR-p (for previous command)
  16:076 | DONE dir | em  8  8 |        |             |         .equ AscESC  1b              ; Escape ASCII character
  16:077 | DONE dir | em  8  8 |        |             |         .equ AscSP   20              ; space ASCII character
  16:078 | DONE dir | em  8  8 |        |             |         .equ AscDEL  7f              ; DEL ASCII character
  16:079 | DONE wsp | em  8  8 |        |             |
  16:080 | DONE cmt | em  8  8 |        |             | ; Dictionary flags
  16:081 | DONE wsp | em  8  8 |        |             |
  16:082 | DONE dir | em  8  8 |        |             |         .equ PW %10000000            ; Primitive (Native) Word
  16:083 | DONE dir | em  8  8 |        |             |         .equ CO %01000000            ; Compile Only
  16:084 | DONE dir | em  8  8 |        |             |         .equ IM %00100000            ; Immediate Word
  16:085 | DONE dir | em  8  8 |        |             |         .equ NC %00010000            ; Native (inline) Compile
  17:000 | DONE wsp | em  8  8 |        |             |
  18:000 | DONE cmt | em  8  8 |        |             | ; Hardware dependencies are isolated to a large degree in kernel files. Liara
  19:000 | DONE cmt | em  8  8 |        |             | ; Forth ships with two such files: One for the crude65816 emulator, and one for
  20:000 | DONE cmt | em  8  8 |        |             | ; the 265sxb board. Only use one.
  21:000 | DONE wsp | em  8  8 |        |             |
  22:000 | DONE cmt | em  8  8 |        |             | ;       .include kernel_emu.tasm        ; routines for crude65815 emulator
  23:000 | DONE cmt | em  8  8 |        |             | ; Basic hardware routines for Liara Forth: 265SXB version
  23:001 | DONE cmt | em  8  8 |        |             | ; Scot W. Stevenson <scot.stevenson@gmail.com>
  23:002 | DONE cmt | em  8  8 |        |             | ; First version: 04. Jan 2017
  23:003 | DONE cmt | em  8  8 |        |             | ; This version: 29. Jan 2017
  23:004 | DONE wsp | em  8  8 |        |             |
  23:005 | DONE cmt | em  8  8 |        |             | ; This section provides basic hardware interface to the 265SXB, providing the
  23:006 | DONE cmt | em  8  8 |        |             | ; PUT_CHR and GET_CHR routines that Liara Forth uses. It is in its own section
  23:007 | DONE cmt | em  8  8 |        |             | ; to make porting Forth to other machines easier.
  23:008 | DONE wsp | em  8  8 |        |             |
  23:009 | DONE cmt | em  8  8 |        |             | ; The code here is based on Andrew Jacobs' Basic Vector Handling for the
  23:010 | DONE cmt | em  8  8 |        |             | ; W65C265SXB Development Board as part of the w65c265sxb-hacker project
  23:011 | DONE cmt | em  8  8 |        |             | ; (https://github.com/andrew-jacobs/w65c265sxb-hacker). It is released under the
  23:012 | DONE cmt | em  8  8 |        |             | ; following license:
  23:013 | DONE cmt | em  8  8 |        |             | ;
  23:014 | DONE cmt | em  8  8 |        |             | ; This work is made available under the terms of the Creative Commons
  23:015 | DONE cmt | em  8  8 |        |             | ; Attribution-NonCommercial-ShareAlike 4.0 International license. Open the
  23:016 | DONE cmt | em  8  8 |        |             | ; following URL to see the details.
  23:017 | DONE cmt | em  8  8 |        |             | ;
  23:018 | DONE cmt | em  8  8 |        |             | ; http://creativecommons.org/licenses/by-nc-sa/4.0/
  23:019 | DONE wsp | em  8  8 |        |             |
  23:020 | DONE cmt | em  8  8 |        |             | ; Original variable names from w65c256.inc are included in comments to make
  23:021 | DONE cmt | em  8  8 |        |             | ; updates and changes easier
  23:022 | DONE wsp | em  8  8 |        |             |
  23:023 | DONE cmt | em  8  8 |        |             | ; ===================================================================
  23:024 | DONE cmt | em  8  8 |        |             | ; HARDWARE DEFINITIONS
  23:025 | DONE cmt | em  8  8 |        |             | ; These follow Andrew Jacobs' names, but lower case and with "hw_" prefixed.
  23:026 | DONE cmt | em  8  8 |        |             | ; This is the only file where symbols with the hw_ prefix may be defined or used
  23:027 | DONE wsp | em  8  8 |        |             |
  23:028 | DONE cmt | em  8  8 |        |             | ; Baud rates are calculated by the formula { osc_freq/(16*baud_rate)-1 } which we
  23:029 | DONE cmt | em  8  8 |        |             | ; can do on the fly at every assembly with the following parameters, or just calculate
  23:030 | DONE cmt | em  8  8 |        |             | ; once and then define brg_value with:
  23:031 | DONE cmt | em  8  8 |        |             | ;
  23:032 | DONE cmt | em  8  8 |        |             | ; - For  9600 baud, use &23
  23:033 | DONE cmt | em  8  8 |        |             | ; - For 19200 baud, use &11
  23:034 | DONE wsp | em  8  8 |        |             |
  23:035 | DONE cmt | em  8  8 |        |             | ;       .equ osc_freq  3686400          ; SXB runs at 3.6864MHz
  23:036 | DONE cmt | em  8  8 |        |             | ;       .equ baud_rate 19200            ; ACIA baud rate
  23:037 | DONE cmt | em  8  8 |        |             | ;	.equ baud_rate 9600             ; ACIA baud rate
  23:038 | DONE wsp | em  8  8 |        |             |
  23:039 | DONE dir | em  8  8 |        |             |         .equ brg_value &11           ; 19200 baud
  23:040 | DONE cmt | em  8  8 |        |             | ;       .equ brg_value &23              ; 9600 baud
  23:041 | DONE wsp | em  8  8 |        |             |
  23:042 | DONE dir | em  8  8 |        |             |         .equ hw_pd0  0df00           ; Port 0 Data Register
  23:043 | DONE dir | em  8  8 |        |             |         .equ hw_pd1  0df01           ; Port 1 Data Register
  23:044 | DONE dir | em  8  8 |        |             |         .equ hw_pd2  0df02           ; Port 2 Data Register
  23:045 | DONE dir | em  8  8 |        |             |         .equ hw_pd3  0df03           ; Port 3 Data Register
  23:046 | DONE dir | em  8  8 |        |             |         .equ hw_pdd0 0df04           ; Port 0 Data Direction Register
  23:047 | DONE dir | em  8  8 |        |             |         .equ hw_pdd1 0df05           ; Port 1 Data Direction Register
  23:048 | DONE dir | em  8  8 |        |             |         .equ hw_pdd2 0df06           ; Port 2 Data Direction Register
  23:049 | DONE dir | em  8  8 |        |             |         .equ hw_pdd3 0df07           ; Port 3 Data Direction Register
  23:050 | DONE wsp | em  8  8 |        |             |
  23:051 | DONE dir | em  8  8 |        |             |         .equ hw_pd4  0df20           ; Port 4 Data Register
  23:052 | DONE dir | em  8  8 |        |             |         .equ hw_pd5  0df21           ; Port 5 Data Register
  23:053 | DONE dir | em  8  8 |        |             |         .equ hw_pd6  0df22           ; Port 6 Data Register
  23:054 | DONE dir | em  8  8 |        |             |         .equ hw_pd7  0df23           ; Port 7 Data Register
  23:055 | DONE dir | em  8  8 |        |             |         .equ hw_pdd4 0df24           ; Port 4 Data Direction Register
  23:056 | DONE dir | em  8  8 |        |             |         .equ hw_pdd5 0df25           ; Port 5 Data Direction Register
  23:057 | DONE dir | em  8  8 |        |             |         .equ hw_pdd6 0df26           ; Port 6 Data Direction Register
  23:058 | DONE dir | em  8  8 |        |             |         .equ hw_pcs7 0df27           ; Port 7 Chip Select
  23:059 | DONE wsp | em  8  8 |        |             |
  23:060 | DONE dir | em  8  8 |        |             |         .equ hw_bcr  0df40           ; Bus Control Register
  23:061 | DONE dir | em  8  8 |        |             |         .equ hw_sscr 0df41           ; System Speed Control Register
  23:062 | DONE dir | em  8  8 |        |             |         .equ hw_tcr  0df42           ; Timer Control Register
  23:063 | DONE dir | em  8  8 |        |             |         .equ hw_ter  0df43           ; Timer Enable Register
  23:064 | DONE dir | em  8  8 |        |             |         .equ hw_tifr 0df44           ; Timer Interrupt Flag Register
  23:065 | DONE dir | em  8  8 |        |             |         .equ hw_eifr 0df45           ; Edge Interrupt Flag Register
  23:066 | DONE dir | em  8  8 |        |             |         .equ hw_tier 0df46           ; Timer Interrupt Enable Register
  23:067 | DONE dir | em  8  8 |        |             |         .equ hw_eier 0df47           ; Edge Interrupt Enable Register
  23:068 | DONE dir | em  8  8 |        |             |         .equ hw_uifr 0df48           ; UART Interrupt Flag Register
  23:069 | DONE dir | em  8  8 |        |             |         .equ hw_uier 0df49           ; UART Interrupt Enable Register
  23:070 | DONE wsp | em  8  8 |        |             |
  23:071 | DONE dir | em  8  8 |        |             |         .equ hw_t0cl 0df60           ; Timer 0 Counter Low
  23:072 | DONE dir | em  8  8 |        |             |         .equ hw_t0ch 0df61           ; Timer 0 Counter High
  23:073 | DONE dir | em  8  8 |        |             |         .equ hw_t1cl 0df62           ; Timer 1 Counter Low
  23:074 | DONE dir | em  8  8 |        |             |         .equ hw_t1ch 0df63           ; Timer 1 Counter High
  23:075 | DONE dir | em  8  8 |        |             |         .equ hw_t2cl 0df64           ; Timer 2 Counter Low
  23:076 | DONE dir | em  8  8 |        |             |         .equ hw_t2ch 0df65           ; Timer 2 Counter High
  23:077 | DONE dir | em  8  8 |        |             |         .equ hw_t3cl 0df66           ; Timer 3 Counter Low
  23:078 | DONE dir | em  8  8 |        |             |         .equ hw_t3ch 0df67           ; Timer 3 Counter High
  23:079 | DONE dir | em  8  8 |        |             |         .equ hw_t4cl 0df68           ; Timer 4 Counter Low
  23:080 | DONE dir | em  8  8 |        |             |         .equ hw_t4ch 0df69           ; Timer 4 Counter High
  23:081 | DONE dir | em  8  8 |        |             |         .equ hw_t5cl 0df6a           ; Timer 5 Counter Low
  23:082 | DONE dir | em  8  8 |        |             |         .equ hw_t5ch 0df6b           ; Timer 5 Counter High
  23:083 | DONE dir | em  8  8 |        |             |         .equ hw_t6cl 0df6c           ; Timer 6 Counter Low
  23:084 | DONE dir | em  8  8 |        |             |         .equ hw_t6ch 0df6d           ; Timer 6 Counter High
  23:085 | DONE dir | em  8  8 |        |             |         .equ hw_t7cl 0df6e           ; Timer 7 Counter Low
  23:086 | DONE dir | em  8  8 |        |             |         .equ hw_t7ch 0df6f           ; Timer 7 Counter High
  23:087 | DONE wsp | em  8  8 |        |             |
  23:088 | DONE dir | em  8  8 |        |             |         .equ hw_acsr0 0df70          ; UART 0 Control/Status Register
  23:089 | DONE dir | em  8  8 |        |             |         .equ hw_artd0 0df71          ; UART 0 Data Register
  23:090 | DONE dir | em  8  8 |        |             |         .equ hw_acsr1 0df72          ; UART 1 Control/Status Register
  23:091 | DONE dir | em  8  8 |        |             |         .equ hw_artd1 0df73          ; UART 1 Data Register
  23:092 | DONE dir | em  8  8 |        |             |         .equ hw_acsr2 0df74          ; UART 2 Control/Status Register
  23:093 | DONE dir | em  8  8 |        |             |         .equ hw_artd2 0df75          ; UART 2 Data Register
  23:094 | DONE dir | em  8  8 |        |             |         .equ hw_acsr3 0df76          ; UART 3 Control/Status Register
  23:095 | DONE dir | em  8  8 |        |             |         .equ hw_artd3 0df77          ; UART 3 Data Register
  23:096 | DONE wsp | em  8  8 |        |             |
  23:097 | DONE wsp | em  8  8 |        |             |
  23:098 | DONE cmt | em  8  8 |        |             | ; ===================================================================
  23:099 | DONE cmt | em  8  8 |        |             | ; RESET HARDWARE
  23:100 | DONE cmt | em  8  8 |        |             | ; Call this during boot. Uses Port 0 for communication in the default setting
  23:101 | DONE lbl | em  8  8 | 006000 |             | reset_hardware                       
  23:102 | DONE ins | em  8  8 | 006000 | 78          |                 sei                  
  23:103 | DONE ins | em  8  8 | 006001 | 18          |                 clc                  
  23:104 | DONE ins | em  8  8 | 006002 | fb          |                 xce                  
  23:105 | DONE ctl | na  8  8 |        |             |         .!native
  23:106 | DONE ins | na  8  8 | 006003 | c2 10       |                 rep 10               
  23:107 | DONE ctl | na  8 16 |        |             |         .!xy16
  23:108 | DONE cmt | na  8 16 |        |             |                 ; temporarily reset the stack
  23:109 | DONE ins | na  8 16 | 006005 | a2 ff 01    |                 ldx.# 01ff           
  23:110 | DONE ins | na  8 16 | 006008 | 9a          |                 txs                  
  23:111 | DONE wsp | na  8 16 |        |             |
  23:112 | DONE ins | na  8 16 | 006009 | 9c 49 df    |                 stz 00df49           ; UART Interrupt Enable Register (UIER)
  23:113 | DONE wsp | na  8 16 |        |             |
  23:114 | DONE ins | na  8 16 | 00600c | a9 c0       |                 lda.# 0c0            ; Ensure A15/AMS are output
  23:115 | DONE ins | na  8 16 | 00600e | 8d 24 df    |                 sta 00df24           ; Port 4 Data Direction Register (PDD4)
  23:116 | DONE ins | na  8 16 | 006011 | 9c 20 df    |                 stz 00df20           ; Select bank 0 (Port 4 Data Register, PD4)
  23:117 | DONE wsp | na  8 16 |        |             |
  23:118 | DONE ins | na  8 16 | 006014 | a9 10       |                 lda.# %00010000      ; Set UART0 to use timer 3
  23:119 | DONE ins | na  8 16 | 006016 | 1c 42 df    |                 trb 00df42           ; Timer Control Register (TCR)
  23:120 | DONE ins | na  8 16 | 006019 | a9 0b       |                 lda.# .lsb 00000b    ; And set baud rate
  23:121 | DONE ins | na  8 16 | 00601b | 8d 66 df    |                 sta 00df66           ; Timer 3 Counter Low (T3CL)
  23:122 | DONE ins | na  8 16 | 00601e | a9 00       |                 lda.# .msb 00000b    
  23:123 | DONE ins | na  8 16 | 006020 | 8d 67 df    |                 sta 00df67           ; Timer 3 Counter High (T3CH)
  23:124 | DONE ins | na  8 16 | 006023 | a9 08       |                 lda.# 08             ; Enable timer 3 (1<<3)
  23:125 | DONE ins | na  8 16 | 006025 | 0c 43 df    |                 tsb 00df43           ; Timer Enable Register (TER)
  23:126 | DONE wsp | na  8 16 |        |             |
  23:127 | DONE ins | na  8 16 | 006028 | a9 25       |                 lda.# %00100101      ; Set UART0 for 8-N-1
  23:128 | DONE ins | na  8 16 | 00602a | 8d 70 df    |                 sta 00df70           ; UART 0 Control/Status Register (ACSR0)
  23:129 | DONE wsp | na  8 16 |        |             |
  23:130 | DONE ins | na  8 16 | 00602d | 4c 60 60    |                 jmp 006060           ; we return with A as 8 bits
  23:131 | DONE wsp | na  8 16 |        |             |
  23:132 | DONE wsp | na  8 16 |        |             |
  23:133 | DONE cmt | na  8 16 |        |             | ; ===================================================================
  23:134 | DONE cmt | na  8 16 |        |             | ; PUT_CHR
  23:135 | DONE cmt | na  8 16 |        |             | ; Wait until the last transmission has been completed then send the character
  23:136 | DONE cmt | na  8 16 |        |             | ; in A. Destroys A. Does not have to be called with A8.
  23:137 | DONE lbl | na  8 16 | 006030 |             | put_chr                              
  23:138 | DONE ins | na  8 16 | 006030 | 08          |                 php                  ; save register sizes
  23:139 | DONE ins | na  8 16 | 006031 | e2 20       |                 sep 20               
  23:140 | DONE ctl | na  8 16 |        |             |         .!a8
  23:141 | DONE ins | na  8 16 | 006033 | 48          |                 pha                  
  23:142 | DONE ins | na  8 16 | 006034 | a9 02       |                 lda.# 02             ; (1<<1)
  23:143 | DONE wsp | na  8 16 |        |             |
  23:144 | DONE lbl | na  8 16 | 006036 |             | put_chr_wait                         
  23:145 | DONE ins | na  8 16 | 006036 | 2c 48 df    |                 bit 00df48           ; timer finished?
  23:146 | DONE ins | na  8 16 | 006039 | f0 fb       |                 beq 006036           
  23:147 | DONE wsp | na  8 16 |        |             |
  23:148 | DONE ins | na  8 16 | 00603b | 68          |                 pla                  
  23:149 | DONE ins | na  8 16 | 00603c | 8d 71 df    |                 sta 00df71           ; transmit char
  23:150 | DONE ins | na  8 16 | 00603f | 28          |                 plp                  
  23:151 | DONE wsp | na  8 16 |        |             |
  23:152 | DONE ins | na  8 16 | 006040 | 60          |                 rts                  
  23:153 | DONE wsp | na  8 16 |        |             |
  23:154 | DONE cmt | na  8 16 |        |             | ; ===================================================================
  23:155 | DONE cmt | na  8 16 |        |             | ; GET_CHR
  23:156 | DONE cmt | na  8 16 |        |             | ; Fetch the next character from the receive buffer waiting for some to arrive
  23:157 | DONE cmt | na  8 16 |        |             | ; if the buffer is empty.
  23:158 | DONE lbl | na  8 16 | 006041 |             | get_chr                              
  23:159 | DONE ins | na  8 16 | 006041 | 08          |                 php                  ; Save register sizes
  23:160 | DONE ins | na  8 16 | 006042 | e2 20       |                 sep 20               
  23:161 | DONE ctl | na  8 16 |        |             |         .!a8
  23:162 | DONE ins | na  8 16 | 006044 | a9 01       |                 lda.# 01             ; (1<<0)
  23:163 | DONE wsp | na  8 16 |        |             |
  23:164 | DONE lbl | na  8 16 | 006046 |             | get_chr_wait                         
  23:165 | DONE ins | na  8 16 | 006046 | 2c 48 df    |                 bit 00df48           ; Any data in RX buffer?
  23:166 | DONE ins | na  8 16 | 006049 | f0 fb       |                 beq 006046           ; No, keep waiting
  23:167 | DONE ins | na  8 16 | 00604b | ad 71 df    |                 lda 00df71           ; Yes, read it
  23:168 | DONE ins | na  8 16 | 00604e | 28          |                 plp                  
  23:169 | DONE wsp | na  8 16 |        |             |
  23:170 | DONE ins | na  8 16 | 00604f | 60          |                 rts                  
  23:171 | DONE wsp | na  8 16 |        |             |
  23:172 | DONE cmt | na  8 16 |        |             | ; ===================================================================
  23:173 | DONE cmt | na  8 16 |        |             | ; HAVE_CHR?
  23:174 | DONE cmt | na  8 16 |        |             | ; Check if the receive buffer contains any data and return C=1 if there is
  23:175 | DONE cmt | na  8 16 |        |             | ; some.
  23:176 | DONE cmt | na  8 16 |        |             | ; TODO Test this
  23:177 | DONE wsp | na  8 16 |        |             |
  23:178 | DONE lbl | na  8 16 | 006050 |             | have_chr?                            
  23:179 | DONE ins | na  8 16 | 006050 | 48          |                 pha                  ; save caller's A
  23:180 | DONE ins | na  8 16 | 006051 | 08          |                 php                  
  23:181 | DONE ins | na  8 16 | 006052 | e2 20       |                 sep 20               
  23:182 | DONE ctl | na  8 16 |        |             |         .!a8
  23:183 | DONE ins | na  8 16 | 006054 | ad 48 df    |                 lda 00df48           ; read the status register
  23:184 | DONE ins | na  8 16 | 006057 | 28          |                 plp                  
  23:185 | DONE ins | na  8 16 | 006058 | 6a          |                 ror.a                ; shift hw_uart0r bit into carry
  23:186 | DONE ins | na  8 16 | 006059 | c2 20       |                 rep 20               
  23:187 | DONE ctl | na 16 16 |        |             |         .!a16
  23:188 | DONE ins | na 16 16 | 00605b | 68          |                 pla                  ; restore A
  23:189 | DONE ins | na 16 16 | 00605c | 60          |                 rts                  
  23:190 | DONE wsp | na 16 16 |        |             |
  23:191 | DONE cmt | na 16 16 |        |             | ; END
  24:000 | DONE wsp | na 16 16 |        |             |
  25:000 | DONE wsp | na 16 16 |        |             |
  26:000 | DONE cmt | na 16 16 |        |             | ; ===================================================================
  27:000 | DONE cmt | na 16 16 |        |             | ; DICTIONARY ROUTINES
  28:000 | DONE wsp | na 16 16 |        |             |
  29:000 | DONE cmt | na 16 16 |        |             | ; Word code routines are sorted alphabetically, except for the first three
  30:000 | DONE cmt | na 16 16 |        |             | ; - COLD, ABORT, and QUIT - and a few others that flow into each other. The
  31:000 | DONE cmt | na 16 16 |        |             | ; byte and cycle values are calculated without the RTS instruction.
  32:000 | DONE wsp | na 16 16 |        |             |
  33:000 | DONE wsp | na 16 16 |        |             |
  34:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
  35:000 | DONE cmt | na 16 16 |        |             | ; COLD ( -- ) X bytes / X Cycles
  36:000 | DONE cmt | na 16 16 |        |             | ; Reboot the system
  37:000 | DONE lbl | na 16 16 | 00605d |             | xt_cold                              
  38:000 | DONE wsp | na 16 16 |        |             |
  39:000 | DONE ins | na 16 16 | 00605d | 4c 00 60    |                 jmp 006000           ; don't use JSR, jump back to start
  40:000 | DONE lbl | na 16 16 | 006060 |             | start                                
  41:000 | DONE ins | na 16 16 | 006060 | 18          |                 clc                  
  41:001 | DONE ins | na 16 16 | 006061 | fb          |                 xce                  
  41:002 | DONE ctl | na 16 16 |        |             |         .!native
  42:000 | DONE ins | na 16 16 | 006062 | c2 20       |                 rep 20               
  42:001 | DONE ctl | na 16 16 |        |             |         .!a16
  43:000 | DONE ins | na 16 16 | 006064 | c2 10       |                 rep 10               
  43:001 | DONE ctl | na 16 16 |        |             |         .!xy16
  44:000 | DONE ins | na 16 16 | 006066 | 78          |                 sei                  
  45:000 | DONE wsp | na 16 16 |        |             |
  46:000 | DONE cmt | na 16 16 |        |             |                 ; TODO switch to Single Task mode
  47:000 | DONE cmt | na 16 16 |        |             |                 ; TODO set up Direct Page stuff
  48:000 | DONE cmt | na 16 16 |        |             |                 ; TODO initiate User variables
  49:000 | DONE wsp | na 16 16 |        |             |
  50:000 | DONE cmt | na 16 16 |        |             |                 ; The name token (nt) of DROP is always the first one in the
  51:000 | DONE cmt | na 16 16 |        |             |                 ; virgin Dictionary, so we start off the Dictionary Pointer (DP)
  52:000 | DONE cmt | na 16 16 |        |             |                 ; there. Adding high-level words will change this before the
  53:000 | DONE cmt | na 16 16 |        |             |                 ; user has a chance to call WORDS
  54:000 | DONE ins | na 16 16 | 006067 | a9 97 68    |                 lda.# 006897         
  55:000 | DONE ins | na 16 16 | 00606a | 85 02       |                 sta.d 000202         
  56:000 | DONE wsp | na 16 16 |        |             |
  57:000 | DONE cmt | na 16 16 |        |             |                 ; The compiler pointer (CP) points to the first free cell
  58:000 | DONE cmt | na 16 16 |        |             |                 ; in RAM
  59:000 | DONE ins | na 16 16 | 00606c | a9 00 03    |                 lda.# 000300         
  60:000 | DONE ins | na 16 16 | 00606f | 85 00       |                 sta.d 000200         
  61:000 | DONE wsp | na 16 16 |        |             |
  62:000 | DONE cmt | na 16 16 |        |             |                 ; Prepare input buffers
  63:000 | DONE ins | na 16 16 | 006071 | a9 00 7c    |                 lda.# 007c00         ; start with first input buffer
  64:000 | DONE ins | na 16 16 | 006074 | 85 0c       |                 sta.d 00020c         
  65:000 | DONE wsp | na 16 16 |        |             |
  66:000 | DONE ins | na 16 16 | 006076 | 64 10       |                 stz.d 000210         ; previous input buffer is empty
  67:000 | DONE ins | na 16 16 | 006078 | 64 0a       |                 stz.d 00020a         ; SOURCE-ID is zero
  68:000 | DONE ins | na 16 16 | 00607a | 64 14       |                 stz.d 000214         ; STATE is zero (interpret)
  69:000 | DONE wsp | na 16 16 |        |             |
  70:000 | DONE cmt | na 16 16 |        |             |                 ; Clear Data Stack
  71:000 | DONE ins | na 16 16 | 00607c | a0 00 00    |                 ldy.# 0000           
  72:000 | DONE ins | na 16 16 | 00607f | a2 f0 02    |                 ldx.# 0002f0         
  73:000 | DONE wsp | na 16 16 |        |             |
  74:000 | DONE cmt | na 16 16 |        |             |                 ; Clean the screen, assumes vt100 terminal
  75:000 | DONE ins | na 16 16 | 006082 | 20 41 64    |                 jsr 006441           
  76:000 | DONE wsp | na 16 16 |        |             |
  77:000 | DONE cmt | na 16 16 |        |             |                 ; Define high-level words via EVALUATE. At this point, whatever
  78:000 | DONE cmt | na 16 16 |        |             |                 ; is in Y (TOS) is rubbish, so we don't have to push it to the
  79:000 | DONE cmt | na 16 16 |        |             |                 ; stack first
  80:000 | DONE ins | na 16 16 | 006085 | ca          |                 dex                  
  81:000 | DONE ins | na 16 16 | 006086 | ca          |                 dex                  
  82:000 | DONE ins | na 16 16 | 006087 | ca          |                 dex                  
  83:000 | DONE ins | na 16 16 | 006088 | ca          |                 dex                  
  84:000 | DONE ins | na 16 16 | 006089 | a9 1c 69    |                 lda.# 00691c         
  85:000 | DONE ins | na 16 16 | 00608c | 95 00       |                 sta.dx 00            ; Start address goes in NOS
  86:000 | DONE ins | na 16 16 | 00608e | a0 cb 00    |                 ldy.# 0000cb         ; length goes in TOS
  87:000 | DONE wsp | na 16 16 |        |             |
  88:000 | DONE ins | na 16 16 | 006091 | 20 76 63    |                 jsr 006376           
  89:000 | DONE wsp | na 16 16 |        |             |
  90:000 | DONE cmt | na 16 16 |        |             |                 ; drop through to ABORT
  91:000 | DONE wsp | na 16 16 |        |             |
  92:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
  93:000 | DONE cmt | na 16 16 |        |             | ; ABORT ( -- ) 8+ bytes / X cycles
  94:000 | DONE cmt | na 16 16 |        |             | ; Reset the parameter (data) stack pointer and continue as QUIT
  95:000 | DONE cmt | na 16 16 |        |             | ; We can jump here via subroutine because we reset the stack pointer
  96:000 | DONE cmt | na 16 16 |        |             | ; anyway. Flows into QUIT.
  97:000 | DONE cmt | na 16 16 |        |             | ; TODO see which parts of COLD we should integrate here
  98:000 | DONE lbl | na 16 16 | 006094 |             | xt_abort                             
  99:000 | DONE ins | na 16 16 | 006094 | c2 20       |                 rep 20               
  99:001 | DONE ctl | na 16 16 |        |             |         .!a16
 100:000 | DONE cmt | na 16 16 |        |             |                 ; clear Data Stack
 101:000 | DONE ins | na 16 16 | 006096 | a0 00 00    |                 ldy.# 0000           
 102:000 | DONE ins | na 16 16 | 006099 | a2 f0 02    |                 ldx.# 0002f0         
 103:000 | DONE wsp | na 16 16 |        |             |
 104:000 | DONE wsp | na 16 16 |        |             |
 105:000 | DONE cmt | na 16 16 |        |             | ; drops through to QUIT, z_abort is the same as z_quit.
 106:000 | DONE wsp | na 16 16 |        |             |
 107:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 108:000 | DONE cmt | na 16 16 |        |             | ; QUIT ( -- ) X bytes / X cycles
 109:000 | DONE cmt | na 16 16 |        |             | ; Reset the input, clearning Return Stack. Jumps to QUIT do not have to be
 110:000 | DONE cmt | na 16 16 |        |             | ; subroutine jumps as the Return Stack is cleared anyway. Liara Forth follows
 111:000 | DONE cmt | na 16 16 |        |             | ; the ANSI Forth recommendation to use REFILL. Note we don't display the "ok"
 112:000 | DONE cmt | na 16 16 |        |             | ; system prompt until after the first output. This follows Gforth.
 113:000 | DONE lbl | na 16 16 | 00609c |             | xt_quit                              
 114:000 | DONE cmt | na 16 16 |        |             |                 ; clear Return Stack
 115:000 | DONE ins | na 16 16 | 00609c | a9 ff 7f    |                 lda.# 007fff         
 116:000 | DONE ins | na 16 16 | 00609f | 1b          |                 tcs                  
 117:000 | DONE wsp | na 16 16 |        |             |
 118:000 | DONE cmt | na 16 16 |        |             |                 ; make sure Instruction Pointer is empty
 119:000 | DONE cmt | na 16 16 |        |             |                 ; TODO move this someplace else or else it will end up in ROM
 120:000 | DONE ins | na 16 16 | 0060a0 | 9c a5 63    |                 stz 0063a5           
 121:000 | DONE wsp | na 16 16 |        |             |
 122:000 | DONE cmt | na 16 16 |        |             |                 ; switch SOURCE-ID to zero (keyboard input)
 123:000 | DONE ins | na 16 16 | 0060a3 | 64 0a       |                 stz.d 00020a         
 124:000 | DONE wsp | na 16 16 |        |             |
 125:000 | DONE cmt | na 16 16 |        |             |                 ; switch to interpret state (STATE is zero)
 126:000 | DONE ins | na 16 16 | 0060a5 | 64 14       |                 stz.d 000214         
 127:000 | DONE wsp | na 16 16 |        |             |
 128:000 | DONE lbl | na 16 16 | 0060a7 |             | quit_get_line                        
 129:000 | DONE cmt | na 16 16 |        |             |                 ; Empty current input buffer. Note the previous input line is
 130:000 | DONE cmt | na 16 16 |        |             |                 ; conserved even if we came here from an abort
 131:000 | DONE ins | na 16 16 | 0060a7 | 64 0e       |                 stz.d 00020e         
 132:000 | DONE wsp | na 16 16 |        |             |
 133:000 | DONE cmt | na 16 16 |        |             |                 ; Accept a line from the current input source
 134:000 | DONE ins | na 16 16 | 0060a9 | 20 b3 64    |                 jsr 0064b3           ; ( -- f )
 135:000 | DONE wsp | na 16 16 |        |             |
 136:000 | DONE ins | na 16 16 | 0060ac | 98          |                 tya                  ; force flag test
 137:000 | DONE ins | na 16 16 | 0060ad | d0 06       |                 bne 0060b5           
 138:000 | DONE wsp | na 16 16 |        |             |
 139:000 | DONE cmt | na 16 16 |        |             |                 ; If REFILL returned a FALSE flag, something went wrong and we
 140:000 | DONE cmt | na 16 16 |        |             |                 ; need to print an error message and reset the machine. We don't
 141:000 | DONE cmt | na 16 16 |        |             |                 ; need to save TOS because we're going to clobber it anyway when we
 142:000 | DONE cmt | na 16 16 |        |             |                 ; go back to ABORT.
 143:000 | DONE ins | na 16 16 | 0060af | a9 b1 6a    |                 lda.# 006ab1         
 144:000 | DONE ins | na 16 16 | 0060b2 | 4c e2 68    |                 jmp 0068e2           
 145:000 | DONE wsp | na 16 16 |        |             |
 146:000 | DONE wsp | na 16 16 |        |             |
 147:000 | DONE lbl | na 16 16 | 0060b5 |             | quit_refill_successful               
 148:000 | DONE cmt | na 16 16 |        |             |                 ; Assume we have successfully accepted a string of input from
 149:000 | DONE cmt | na 16 16 |        |             |                 ; a source, with address of buffer in cib and length of input in
 150:000 | DONE cmt | na 16 16 |        |             |                 ; ciblen. We arrive here still with the TRUE flag from REFILL as
 151:000 | DONE cmt | na 16 16 |        |             |                 ; TOS (in Y)
 152:000 | DONE ins | na 16 16 | 0060b5 | b4 00       |                 ldy.dx 00            ; drop TOS
 153:000 | DONE ins | na 16 16 | 0060b7 | e8          |                 inx                  
 154:000 | DONE ins | na 16 16 | 0060b8 | e8          |                 inx                  
 155:000 | DONE wsp | na 16 16 |        |             |
 156:000 | DONE cmt | na 16 16 |        |             |                 ; make >IN point to begining of buffer
 157:000 | DONE ins | na 16 16 | 0060b9 | 64 12       |                 stz.d 000212         
 158:000 | DONE wsp | na 16 16 |        |             |
 159:000 | DONE cmt | na 16 16 |        |             |                 ; Main compile/execute routine. Consider moving this inside QUIT
 160:000 | DONE cmt | na 16 16 |        |             |                 ; once we know everything works
 161:000 | DONE ins | na 16 16 | 0060bb | 20 b8 68    |                 jsr 0068b8           
 162:000 | DONE wsp | na 16 16 |        |             |
 163:000 | DONE cmt | na 16 16 |        |             |                 ; Test for Data Stack underflow. Our stack is so large in single
 164:000 | DONE cmt | na 16 16 |        |             |                 ; user mode that we don't bother checking for overflow - if that
 165:000 | DONE cmt | na 16 16 |        |             |                 ; happens, we're screwed anyway
 166:000 | DONE ins | na 16 16 | 0060be | e0 f1 02    |                 cpx.# 0002f1         
 167:000 | DONE ins | na 16 16 | 0060c1 | 90 06       |                 bcc 0060c9           ; DSP must always be smaller (!) than DSP0
 168:000 | DONE wsp | na 16 16 |        |             |
 169:000 | DONE ins | na 16 16 | 0060c3 | a9 ff 6a    |                 lda.# 006aff         
 170:000 | DONE ins | na 16 16 | 0060c6 | 4c e2 68    |                 jmp 0068e2           
 171:000 | DONE wsp | na 16 16 |        |             |
 172:000 | DONE lbl | na 16 16 | 0060c9 |             | quit_ok                              
 173:000 | DONE cmt | na 16 16 |        |             |                 ; Display system prompt if all went well
 174:000 | DONE ins | na 16 16 | 0060c9 | a9 e7 69    |                 lda.# 0069e7         
 175:000 | DONE ins | na 16 16 | 0060cc | 20 e8 68    |                 jsr 0068e8           
 176:000 | DONE wsp | na 16 16 |        |             |
 177:000 | DONE wsp | na 16 16 |        |             |
 178:000 | DONE cmt | na 16 16 |        |             |                 ; get next line
 179:000 | DONE ins | na 16 16 | 0060cf | 4c a7 60    |                 jmp 0060a7           
 180:000 | DONE wsp | na 16 16 |        |             |
 181:000 | DONE lbl | na 16 16 | 0060d2 |             | z_cold                               
 182:000 | DONE lbl | na 16 16 | 0060d2 |             | z_abort                              
 183:000 | DONE lbl | na 16 16 | 0060d2 |             | z_quit                               
 183:001 | DONE ins | na 16 16 | 0060d2 | ea          |                 nop                  ; dummy for compilation, TODO test if required
 184:000 | DONE wsp | na 16 16 |        |             |
 185:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 186:000 | DONE cmt | na 16 16 |        |             | ; >IN "TO-IN" ( -- addr ) 6 bytes / 12 cycles
 187:000 | DONE cmt | na 16 16 |        |             | ; Return address where pointer to current char in input buffer lives (>IN)
 188:000 | DONE lbl | na 16 16 | 0060d3 |             | xt_to-in                             
 189:000 | DONE ins | na 16 16 | 0060d3 | ca          |                 dex                  
 190:000 | DONE ins | na 16 16 | 0060d4 | ca          |                 dex                  
 191:000 | DONE ins | na 16 16 | 0060d5 | 94 00       |                 sty.dx 00            
 192:000 | DONE wsp | na 16 16 |        |             |
 193:000 | DONE ins | na 16 16 | 0060d7 | a0 12 02    |                 ldy.# 000212         ; >IN
 194:000 | DONE lbl | na 16 16 | 0060da |             | z_to-in                              
 194:001 | DONE ins | na 16 16 | 0060da | 60          |                 rts                  
 195:000 | DONE wsp | na 16 16 |        |             |
 196:000 | DONE wsp | na 16 16 |        |             |
 197:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 198:000 | DONE cmt | na 16 16 |        |             | ; , "COMMA" ( n -- ) 11 bytes / 29 cycles
 199:000 | DONE cmt | na 16 16 |        |             | ; Allot one cell and store TOS in memory. We ignore alignment issues, though
 200:000 | DONE cmt | na 16 16 |        |             | ; satisfy the ANSI requirement that an aligned compiler pointer will remain
 201:000 | DONE cmt | na 16 16 |        |             | ; aligned
 202:000 | DONE cmt | na 16 16 |        |             | ; There is another variant possible:
 203:000 | DONE cmt | na 16 16 |        |             | ;               tya
 204:000 | DONE cmt | na 16 16 |        |             | ;               ldy.d cp
 205:000 | DONE cmt | na 16 16 |        |             | ;               sta.y 0000
 206:000 | DONE cmt | na 16 16 |        |             | ;               iny
 207:000 | DONE cmt | na 16 16 |        |             | ;               iny
 208:000 | DONE cmt | na 16 16 |        |             | ;               sty.d cp
 209:000 | DONE cmt | na 16 16 |        |             | ;               ldy.dx 00
 210:000 | DONE cmt | na 16 16 |        |             | ;               inx
 211:000 | DONE cmt | na 16 16 |        |             | ;               inx
 212:000 | DONE cmt | na 16 16 |        |             | ; This is as fast as the variant below, but three bytes longer
 213:000 | DONE lbl | na 16 16 | 0060db |             | xt_comma                             
 214:000 | DONE ins | na 16 16 | 0060db | 98          |                 tya                  
 215:000 | DONE ins | na 16 16 | 0060dc | 92 00       |                 sta.di 000200        ; STA (CP)
 216:000 | DONE ins | na 16 16 | 0060de | e6 00       |                 inc.d 000200         
 217:000 | DONE ins | na 16 16 | 0060e0 | e6 00       |                 inc.d 000200         
 218:000 | DONE wsp | na 16 16 |        |             |
 219:000 | DONE ins | na 16 16 | 0060e2 | b4 00       |                 ldy.dx 00            
 220:000 | DONE ins | na 16 16 | 0060e4 | e8          |                 inx                  
 221:000 | DONE ins | na 16 16 | 0060e5 | e8          |                 inx                  
 222:000 | DONE wsp | na 16 16 |        |             |
 223:000 | DONE lbl | na 16 16 | 0060e6 |             | z_comma                              
 223:001 | DONE ins | na 16 16 | 0060e6 | 60          |                 rts                  
 224:000 | DONE wsp | na 16 16 |        |             |
 225:000 | DONE wsp | na 16 16 |        |             |
 226:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 227:000 | DONE cmt | na 16 16 |        |             | ; ? "QUESTION" ( addr -- ) X bytes / X cycles
 228:000 | DONE cmt | na 16 16 |        |             | ; Print content of a variable. This is used interactively and so can be pretty
 229:000 | DONE cmt | na 16 16 |        |             | ; slow, so we just go for the subroutine jumps to keep it short
 230:000 | DONE lbl | na 16 16 | 0060e7 |             | xt_question                          
 231:000 | DONE ins | na 16 16 | 0060e7 | 20 f8 60    |                 jsr 0060f8           
 232:000 | DONE ins | na 16 16 | 0060ea | 20 d9 62    |                 jsr 0062d9           
 233:000 | DONE wsp | na 16 16 |        |             |
 234:000 | DONE lbl | na 16 16 | 0060ed |             | z_question                           
 234:001 | DONE ins | na 16 16 | 0060ed | 60          |                 rts                  
 235:000 | DONE wsp | na 16 16 |        |             |
 236:000 | DONE wsp | na 16 16 |        |             |
 237:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 238:000 | DONE cmt | na 16 16 |        |             | ; ! "STORE" ( n addr -- ) 9 bytes / X cycles
 239:000 | DONE cmt | na 16 16 |        |             | ; Save value at designated memory location
 240:000 | DONE lbl | na 16 16 | 0060ee |             | xt_store                             
 241:000 | DONE ins | na 16 16 | 0060ee | b5 00       |                 lda.dx 00            ; NOS has value
 242:000 | DONE ins | na 16 16 | 0060f0 | 99 00 00    |                 sta.y 0000           
 243:000 | DONE ins | na 16 16 | 0060f3 | e8          |                 inx                  
 244:000 | DONE ins | na 16 16 | 0060f4 | e8          |                 inx                  
 245:000 | DONE ins | na 16 16 | 0060f5 | e8          |                 inx                  
 246:000 | DONE ins | na 16 16 | 0060f6 | e8          |                 inx                  
 247:000 | DONE wsp | na 16 16 |        |             |
 248:000 | DONE lbl | na 16 16 | 0060f7 |             | z_store                              
 248:001 | DONE ins | na 16 16 | 0060f7 | 60          |                 rts                  
 249:000 | DONE wsp | na 16 16 |        |             |
 250:000 | DONE wsp | na 16 16 |        |             |
 251:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 252:000 | DONE cmt | na 16 16 |        |             | ; @ "FETCH" ( addr -- n ) 4 bytes / 7-8 cycles
 253:000 | DONE cmt | na 16 16 |        |             | ; Get one cell (16 bit) value from given address
 254:000 | DONE lbl | na 16 16 | 0060f8 |             | xt_fetch                             
 255:000 | DONE ins | na 16 16 | 0060f8 | b9 00 00    |                 lda.y 0000           
 256:000 | DONE ins | na 16 16 | 0060fb | a8          |                 tay                  
 257:000 | DONE lbl | na 16 16 | 0060fc |             | z_fetch                              
 257:001 | DONE ins | na 16 16 | 0060fc | 60          |                 rts                  
 258:000 | DONE wsp | na 16 16 |        |             |
 259:000 | DONE wsp | na 16 16 |        |             |
 260:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 261:000 | DONE cmt | na 16 16 |        |             | ; + "PLUS" ( n m -- n+m ) 7 bytes / X cycles
 262:000 | DONE cmt | na 16 16 |        |             | ; Add TOS and NOS
 263:000 | DONE lbl | na 16 16 | 0060fd |             | xt_plus                              
 264:000 | DONE dir | na 16 16 |        |             |         .!a16                        
 265:000 | DONE ins | na 16 16 | 0060fd | 98          |                 tya                  
 266:000 | DONE ins | na 16 16 | 0060fe | 18          |                 clc                  
 267:000 | DONE ins | na 16 16 | 0060ff | 75 00       |                 adc.dx 00            
 268:000 | DONE ins | na 16 16 | 006101 | a8          |                 tay                  
 269:000 | DONE ins | na 16 16 | 006102 | e8          |                 inx                  
 270:000 | DONE ins | na 16 16 | 006103 | e8          |                 inx                  
 271:000 | DONE wsp | na 16 16 |        |             |
 272:000 | DONE lbl | na 16 16 | 006104 |             | z_plus                               
 272:001 | DONE ins | na 16 16 | 006104 | 60          |                 rts                  
 273:000 | DONE wsp | na 16 16 |        |             |
 274:000 | DONE wsp | na 16 16 |        |             |
 275:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 276:000 | DONE cmt | na 16 16 |        |             | ; - "MINUS" ( n m -- n-m ) 10 bytes / X cycles
 277:000 | DONE cmt | na 16 16 |        |             | ; Subtract NOS from TOS
 278:000 | DONE lbl | na 16 16 | 006105 |             | xt_minus                             
 279:000 | DONE dir | na 16 16 |        |             |         .!a16                        
 280:000 | DONE ins | na 16 16 | 006105 | 98          |                 tya                  
 281:000 | DONE ins | na 16 16 | 006106 | 49 ff ff    |                 eor.# 0ffff          
 282:000 | DONE wsp | na 16 16 |        |             |
 283:000 | DONE ins | na 16 16 | 006109 | 38          |                 sec                  ; not CLC
 284:000 | DONE ins | na 16 16 | 00610a | 75 00       |                 adc.dx 00            
 285:000 | DONE wsp | na 16 16 |        |             |
 286:000 | DONE ins | na 16 16 | 00610c | a8          |                 tay                  
 287:000 | DONE ins | na 16 16 | 00610d | e8          |                 inx                  
 288:000 | DONE ins | na 16 16 | 00610e | e8          |                 inx                  
 289:000 | DONE wsp | na 16 16 |        |             |
 290:000 | DONE lbl | na 16 16 | 00610f |             | z_minus                              
 290:001 | DONE ins | na 16 16 | 00610f | 60          |                 rts                  
 291:000 | DONE wsp | na 16 16 |        |             |
 292:000 | DONE wsp | na 16 16 |        |             |
 293:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 294:000 | DONE cmt | na 16 16 |        |             | ; 0 "ZERO" ( -- 0 ) 7 bytes / 12 cycles
 295:000 | DONE cmt | na 16 16 |        |             | ; Pushes the number 0000 on the Data Stack
 296:000 | DONE lbl | na 16 16 | 006110 |             | xt_zero                              
 297:000 | DONE dir | na 16 16 |        |             |         .!xy16                       
 298:000 | DONE ins | na 16 16 | 006110 | ca          |                 dex                  
 299:000 | DONE ins | na 16 16 | 006111 | ca          |                 dex                  
 300:000 | DONE ins | na 16 16 | 006112 | 94 00       |                 sty.dx 00            
 301:000 | DONE ins | na 16 16 | 006114 | a0 00 00    |                 ldy.# 0000           
 302:000 | DONE wsp | na 16 16 |        |             |
 303:000 | DONE lbl | na 16 16 | 006117 |             | z_zero                               
 303:001 | DONE ins | na 16 16 | 006117 | 60          |                 rts                  
 304:000 | DONE wsp | na 16 16 |        |             |
 305:000 | DONE wsp | na 16 16 |        |             |
 306:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 307:000 | DONE cmt | na 16 16 |        |             | ; 1 "ONE" ( -- 1 ) 7 bytes / 12 cycles
 308:000 | DONE cmt | na 16 16 |        |             | ; Pushes the number 1 on the Data Stack
 309:000 | DONE lbl | na 16 16 | 006118 |             | xt_one                               
 310:000 | DONE dir | na 16 16 |        |             |         .!xy16                       
 311:000 | DONE ins | na 16 16 | 006118 | ca          |                 dex                  
 312:000 | DONE ins | na 16 16 | 006119 | ca          |                 dex                  
 313:000 | DONE ins | na 16 16 | 00611a | 94 00       |                 sty.dx 00            
 314:000 | DONE ins | na 16 16 | 00611c | a0 01 00    |                 ldy.# 0001           
 315:000 | DONE wsp | na 16 16 |        |             |
 316:000 | DONE lbl | na 16 16 | 00611f |             | z_one                                
 316:001 | DONE ins | na 16 16 | 00611f | 60          |                 rts                  
 317:000 | DONE wsp | na 16 16 |        |             |
 318:000 | DONE wsp | na 16 16 |        |             |
 319:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 320:000 | DONE cmt | na 16 16 |        |             | ; 1- "ONE-MINUS" ( n -- n-1 ) 1 byte / 2 cycles
 321:000 | DONE cmt | na 16 16 |        |             | ; Subtract 1 from Top of Stack (TOS). Because there is no checking if there is
 322:000 | DONE cmt | na 16 16 |        |             | ; actually anything on the Data Stack, this routine will fail silently if the
 323:000 | DONE cmt | na 16 16 |        |             | ; stack is empty
 324:000 | DONE lbl | na 16 16 | 006120 |             | xt_one-minus                         
 325:000 | DONE dir | na 16 16 |        |             |         .!xy16                       
 326:000 | DONE ins | na 16 16 | 006120 | 88          |                 dey                  
 327:000 | DONE lbl | na 16 16 | 006121 |             | z_one-minus                          
 327:001 | DONE ins | na 16 16 | 006121 | 60          |                 rts                  
 328:000 | DONE wsp | na 16 16 |        |             |
 329:000 | DONE wsp | na 16 16 |        |             |
 330:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 331:000 | DONE cmt | na 16 16 |        |             | ; 1+ "ONE-PLUS" ( n -- n+1 ) 1 byte / 2 cycles
 332:000 | DONE cmt | na 16 16 |        |             | ; Add 1 to TOS. Because there is no checking if there is actually anything on
 333:000 | DONE cmt | na 16 16 |        |             | ; the Data Stack, this routine will fail silently if the stack is empty
 334:000 | DONE lbl | na 16 16 | 006122 |             | xt_one-plus                          
 335:000 | DONE dir | na 16 16 |        |             |         .!xy16                       
 336:000 | DONE ins | na 16 16 | 006122 | c8          |                 iny                  
 337:000 | DONE lbl | na 16 16 | 006123 |             | z_one-plus                           
 337:001 | DONE ins | na 16 16 | 006123 | 60          |                 rts                  
 338:000 | DONE wsp | na 16 16 |        |             |
 339:000 | DONE wsp | na 16 16 |        |             |
 340:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 341:000 | DONE cmt | na 16 16 |        |             | ; 2 "TWO" ( -- 2 ) 7 bytes / 12 cycles
 342:000 | DONE cmt | na 16 16 |        |             | ; Pushes the number 2 on the Data Stack
 343:000 | DONE lbl | na 16 16 | 006124 |             | xt_two                               
 344:000 | DONE dir | na 16 16 |        |             |         .!xy16                       
 345:000 | DONE ins | na 16 16 | 006124 | ca          |                 dex                  
 346:000 | DONE ins | na 16 16 | 006125 | ca          |                 dex                  
 347:000 | DONE ins | na 16 16 | 006126 | 94 00       |                 sty.dx 00            
 348:000 | DONE ins | na 16 16 | 006128 | a0 02 00    |                 ldy.# 0002           
 349:000 | DONE wsp | na 16 16 |        |             |
 350:000 | DONE lbl | na 16 16 | 00612b |             | z_two                                
 350:001 | DONE ins | na 16 16 | 00612b | 60          |                 rts                  
 351:000 | DONE wsp | na 16 16 |        |             |
 352:000 | DONE wsp | na 16 16 |        |             |
 353:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 354:000 | DONE cmt | na 16 16 |        |             | ; 2* "TWO-STAR" ( n -- 2*n ) 3 bytes / 6 cycles
 355:000 | DONE cmt | na 16 16 |        |             | ; Multiply Top of Stack (TOS) by 2. This is also used by CELLS
 356:000 | DONE lbl | na 16 16 | 00612c |             | xt_two-star                          
 357:000 | DONE dir | na 16 16 |        |             |         .!a16                        
 358:000 | DONE dir | na 16 16 |        |             |         .!xy16                       
 359:000 | DONE ins | na 16 16 | 00612c | 98          |                 tya                  
 360:000 | DONE ins | na 16 16 | 00612d | 0a          |                 asl.a                
 361:000 | DONE ins | na 16 16 | 00612e | a8          |                 tay                  
 362:000 | DONE wsp | na 16 16 |        |             |
 363:000 | DONE lbl | na 16 16 | 00612f |             | z_two-star                           
 363:001 | DONE ins | na 16 16 | 00612f | 60          |                 rts                  
 364:000 | DONE wsp | na 16 16 |        |             |
 365:000 | DONE wsp | na 16 16 |        |             |
 366:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 367:000 | DONE cmt | na 16 16 |        |             | ; 2DROP ( n m -- ) 6 bytes / 13 cycles
 368:000 | DONE cmt | na 16 16 |        |             | ; Drop first two entries of Data Stack
 369:000 | DONE lbl | na 16 16 | 006130 |             | xt_2drop                             
 370:000 | DONE ins | na 16 16 | 006130 | b4 02       |                 ldy.dx 02            
 371:000 | DONE ins | na 16 16 | 006132 | e8          |                 inx                  
 372:000 | DONE ins | na 16 16 | 006133 | e8          |                 inx                  
 373:000 | DONE ins | na 16 16 | 006134 | e8          |                 inx                  
 374:000 | DONE ins | na 16 16 | 006135 | e8          |                 inx                  
 375:000 | DONE wsp | na 16 16 |        |             |
 376:000 | DONE lbl | na 16 16 | 006136 |             | z_2drop                              
 376:001 | DONE ins | na 16 16 | 006136 | 60          |                 rts                  
 377:000 | DONE wsp | na 16 16 |        |             |
 378:000 | DONE wsp | na 16 16 |        |             |
 379:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 380:000 | DONE cmt | na 16 16 |        |             | ; 2DUP ( n m -- n m n m ) 10 bytes / 23 cycles
 381:000 | DONE cmt | na 16 16 |        |             | ; Duplicated the top two data stack entries
 382:000 | DONE wsp | na 16 16 |        |             |
 383:000 | DONE lbl | na 16 16 | 006137 |             | xt_2dup                              
 384:000 | DONE dir | na 16 16 |        |             |         .!xy16                       
 385:000 | DONE ins | na 16 16 | 006137 | ca          |                 dex                  
 386:000 | DONE ins | na 16 16 | 006138 | ca          |                 dex                  
 387:000 | DONE ins | na 16 16 | 006139 | ca          |                 dex                  
 388:000 | DONE ins | na 16 16 | 00613a | ca          |                 dex                  
 389:000 | DONE ins | na 16 16 | 00613b | 94 02       |                 sty.dx 02            
 390:000 | DONE ins | na 16 16 | 00613d | b5 04       |                 lda.dx 04            
 391:000 | DONE ins | na 16 16 | 00613f | 95 00       |                 sta.dx 00            
 392:000 | DONE wsp | na 16 16 |        |             |
 393:000 | DONE lbl | na 16 16 | 006141 |             | z_2dup                               
 393:001 | DONE ins | na 16 16 | 006141 | 60          |                 rts                  
 394:000 | DONE wsp | na 16 16 |        |             |
 395:000 | DONE wsp | na 16 16 |        |             |
 396:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 397:000 | DONE cmt | na 16 16 |        |             | ; ' "TICK" ( "string" -- xt ) X bytes / X cycles
 398:000 | DONE cmt | na 16 16 |        |             | ; Given a string with the name of a word, return the word's execution token (xt)
 399:000 | DONE cmt | na 16 16 |        |             | ; Abort if not found
 400:000 | DONE lbl | na 16 16 | 006142 |             | xt_tick                              
 401:000 | DONE ins | na 16 16 | 006142 | 20 4e 64    |                 jsr 00644e           ; ( -- addr u )
 402:000 | DONE wsp | na 16 16 |        |             |
 403:000 | DONE cmt | na 16 16 |        |             | 		; if we got a zero, complain and abort
 404:000 | DONE ins | na 16 16 | 006145 | 98          |                 tya                  ; force flag check
 405:000 | DONE ins | na 16 16 | 006146 | d0 06       |                 bne 00614e           
 406:000 | DONE wsp | na 16 16 |        |             |
 407:000 | DONE ins | na 16 16 | 006148 | a9 8a 6a    |                 lda.# 006a8a         
 408:000 | DONE ins | na 16 16 | 00614b | 4c e2 68    |                 jmp 0068e2           
 409:000 | DONE wsp | na 16 16 |        |             |
 410:000 | DONE lbl | na 16 16 | 00614e |             | tick_have_word                       
 411:000 | DONE ins | na 16 16 | 00614e | 20 b3 63    |                 jsr 0063b3           ; ( addr u -- nt)
 412:000 | DONE ins | na 16 16 | 006151 | 98          |                 tya                  ; force flag check
 413:000 | DONE wsp | na 16 16 |        |             |
 414:000 | DONE cmt | na 16 16 |        |             |                 ; if we didn't find string in the dictionary, complain and abort
 415:000 | DONE ins | na 16 16 | 006152 | d0 06       |                 bne 00615a           
 416:000 | DONE wsp | na 16 16 |        |             |
 417:000 | DONE ins | na 16 16 | 006154 | a9 0f 6b    |                 lda.# 006b0f         
 418:000 | DONE ins | na 16 16 | 006157 | 4c e2 68    |                 jmp 0068e2           
 419:000 | DONE wsp | na 16 16 |        |             |
 420:000 | DONE lbl | na 16 16 | 00615a |             | tick_have_nt                         
 421:000 | DONE ins | na 16 16 | 00615a | 20 11 64    |                 jsr 006411           ; ( nt -- xt )
 422:000 | DONE wsp | na 16 16 |        |             |
 423:000 | DONE lbl | na 16 16 | 00615d |             | z_tick                               
 423:001 | DONE ins | na 16 16 | 00615d | 60          |                 rts                  
 424:000 | DONE wsp | na 16 16 |        |             |
 425:000 | DONE wsp | na 16 16 |        |             |
 426:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 427:000 | DONE cmt | na 16 16 |        |             | ; ABS ( n -- u ) 8 bytes / X cycles
 428:000 | DONE cmt | na 16 16 |        |             | ; Return the absolute value of a single number
 429:000 | DONE lbl | na 16 16 | 00615e |             | xt_abs                               
 430:000 | DONE dir | na 16 16 |        |             |         .!a16                        
 431:000 | DONE dir | na 16 16 |        |             |         .!xy16                       
 432:000 | DONE ins | na 16 16 | 00615e | 98          |                 tya                  ; force flag test
 433:000 | DONE ins | na 16 16 | 00615f | 10 05       |                 bpl 006166           ; positive number is easy
 434:000 | DONE wsp | na 16 16 |        |             |
 435:000 | DONE cmt | na 16 16 |        |             |                 ; negative: Calculate 0-n
 436:000 | DONE ins | na 16 16 | 006161 | 49 ff ff    |                 eor.# 0ffff          
 437:000 | DONE ins | na 16 16 | 006164 | 1a          |                 inc.a                
 438:000 | DONE ins | na 16 16 | 006165 | a8          |                 tay                  
 439:000 | DONE wsp | na 16 16 |        |             |
 440:000 | DONE lbl | na 16 16 | 006166 |             | z_abs                                
 440:001 | DONE ins | na 16 16 | 006166 | 60          |                 rts                  
 441:000 | DONE wsp | na 16 16 |        |             |
 442:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 443:000 | DONE cmt | na 16 16 |        |             | ; ACCEPT ( addr n1 -- n2 ) X bytes / X cycles
 444:000 | DONE cmt | na 16 16 |        |             | ; Receive a string of at most n1 characters, placing them at addr. Return the
 445:000 | DONE cmt | na 16 16 |        |             | ; actual number of characters as n2. Characters are echoed as they are received.
 446:000 | DONE cmt | na 16 16 |        |             | ; ACCEPT is called by REFILL these days.
 447:000 | DONE lbl | na 16 16 | 006167 |             | xt_accept                            
 448:000 | DONE cmt | na 16 16 |        |             |                 ; Set up loop
 449:000 | DONE ins | na 16 16 | 006167 | 98          |                 tya                  ; force flag test
 450:000 | DONE ins | na 16 16 | 006168 | d0 03       |                 bne 00616d           
 451:000 | DONE wsp | na 16 16 |        |             |
 452:000 | DONE cmt | na 16 16 |        |             |                 ; if we were told to get zero chars, just quit
 453:000 | DONE ins | na 16 16 | 00616a | e8          |                 inx                  ; NIP, TOS is zero which is also FALSE
 454:000 | DONE ins | na 16 16 | 00616b | e8          |                 inx                  
 455:000 | DONE wsp | na 16 16 |        |             |
 456:000 | DONE ins | na 16 16 | 00616c | 60          |                 rts                  
 457:000 | DONE wsp | na 16 16 |        |             |
 458:000 | DONE lbl | na 16 16 | 00616d |             | accept_nonzero                       
 459:000 | DONE ins | na 16 16 | 00616d | b5 00       |                 lda.dx 00            ; address of buffer is NOS
 460:000 | DONE ins | na 16 16 | 00616f | 85 16       |                 sta.d 000216         
 461:000 | DONE ins | na 16 16 | 006171 | e8          |                 inx                  ; NIP
 462:000 | DONE ins | na 16 16 | 006172 | e8          |                 inx                  
 463:000 | DONE wsp | na 16 16 |        |             |
 464:000 | DONE ins | na 16 16 | 006173 | 84 18       |                 sty.d 000218         ; Save max number of chars in tmp2
 465:000 | DONE ins | na 16 16 | 006175 | a0 00 00    |                 ldy.# 0000           ; Use Y as counter
 466:000 | DONE ins | na 16 16 | 006178 | e2 20       |                 sep 20               
 466:001 | DONE ctl | na  8 16 |        |             |         .!a8
 467:000 | DONE wsp | na  8 16 |        |             |
 468:000 | DONE lbl | na  8 16 | 00617a |             | accept_loop                          
 469:000 | DONE cmt | na  8 16 |        |             |                 ; TODO rewrite with KEY so we can revector it
 470:000 | DONE cmt | na  8 16 |        |             |                 ; We don't need to check for CTRL-l, because a vt100 terminal
 471:000 | DONE cmt | na  8 16 |        |             |                 ; clears the screen automatically
 472:000 | DONE ins | na  8 16 | 00617a | 20 41 60    |                 jsr 006041           
 473:000 | DONE dir | na  8 16 |        |             |         .!a8                         
 474:000 | DONE cmt | na  8 16 |        |             |                 ; we quit on both line feed and carriage return
 475:000 | DONE ins | na  8 16 | 00617d | c9 0a       |                 cmp.# AscLF          
 476:000 | DONE ins | na  8 16 | 00617f | f0 44       |                 beq 0061c5           
 477:000 | DONE ins | na  8 16 | 006181 | c9 0d       |                 cmp.# AscCR          
 478:000 | DONE ins | na  8 16 | 006183 | f0 40       |                 beq 0061c5           
 479:000 | DONE wsp | na  8 16 |        |             |
 480:000 | DONE cmt | na  8 16 |        |             |                 ; BS and DEL do the same thing for the moment
 481:000 | DONE ins | na  8 16 | 006185 | c9 08       |                 cmp.# AscBS          
 482:000 | DONE ins | na  8 16 | 006187 | f0 44       |                 beq 0061cd           
 483:000 | DONE ins | na  8 16 | 006189 | c9 7f       |                 cmp.# AscDEL         
 484:000 | DONE ins | na  8 16 | 00618b | f0 40       |                 beq 0061cd           
 485:000 | DONE wsp | na  8 16 |        |             |
 486:000 | DONE cmt | na  8 16 |        |             |                 ; CTRL-c and ESC abort (see if this is too harsh)
 487:000 | DONE ins | na  8 16 | 00618d | c9 03       |                 cmp.# AscCC          
 488:000 | DONE ins | na  8 16 | 00618f | d0 03       |                 bne 006194           
 489:000 | DONE ins | na  8 16 | 006191 | 4c 94 60    |                 jmp 006094           
 490:000 | DONE lbl | na  8 16 | 006194 |             | @                                    
 491:000 | DONE ins | na  8 16 | 006194 | c9 1b       |                 cmp.# AscESC         
 492:000 | DONE ins | na  8 16 | 006196 | d0 03       |                 bne 00619b           
 493:000 | DONE ins | na  8 16 | 006198 | 4c 94 60    |                 jmp 006094           
 494:000 | DONE lbl | na  8 16 | 00619b |             | @                                    
 495:000 | DONE cmt | na  8 16 |        |             |                 ; CTRL-p will be used for "previous cmd", TODO
 496:000 | DONE ins | na  8 16 | 00619b | c9 10       |                 cmp.# AscCP          
 497:000 | DONE ins | na  8 16 | 00619d | d0 0c       |                 bne 0061ab           
 498:000 | DONE ins | na  8 16 | 00619f | c2 20       |                 rep 20               
 498:001 | DONE ctl | na 16 16 |        |             |         .!a16
 499:000 | DONE ins | na 16 16 | 0061a1 | a9 28 6b    |                 lda.# 006b28         
 500:000 | DONE ins | na 16 16 | 0061a4 | 20 e8 68    |                 jsr 0068e8           
 501:000 | DONE ins | na 16 16 | 0061a7 | e2 20       |                 sep 20               
 501:001 | DONE ctl | na  8 16 |        |             |         .!a8
 502:000 | DONE ins | na  8 16 | 0061a9 | 80 cf       |                 bra 00617a           
 503:000 | DONE lbl | na  8 16 | 0061ab |             | @                                    
 504:000 | DONE cmt | na  8 16 |        |             |                 ; CTRL-n will be used for "next cmd", TODO
 505:000 | DONE ins | na  8 16 | 0061ab | c9 0e       |                 cmp.# AscCN          
 506:000 | DONE ins | na  8 16 | 0061ad | d0 0c       |                 bne 0061bb           
 507:000 | DONE ins | na  8 16 | 0061af | c2 20       |                 rep 20               
 507:001 | DONE ctl | na 16 16 |        |             |         .!a16
 508:000 | DONE ins | na 16 16 | 0061b1 | a9 3b 6b    |                 lda.# 006b3b         
 509:000 | DONE ins | na 16 16 | 0061b4 | 20 e8 68    |                 jsr 0068e8           
 510:000 | DONE ins | na 16 16 | 0061b7 | e2 20       |                 sep 20               
 510:001 | DONE ctl | na  8 16 |        |             |         .!a8
 511:000 | DONE ins | na  8 16 | 0061b9 | 80 bf       |                 bra 00617a           
 512:000 | DONE wsp | na  8 16 |        |             |
 513:000 | DONE lbl | na  8 16 | 0061bb |             | @                                    
 514:000 | DONE cmt | na  8 16 |        |             |                 ; That's quite enough, echo character
 515:000 | DONE cmt | na  8 16 |        |             |                 ; TODO change to EMIT
 516:000 | DONE ins | na  8 16 | 0061bb | 20 30 60    |                 jsr 006030           ; echo character
 517:000 | DONE dir | na  8 16 |        |             |         .!a8                         
 518:000 | DONE cmt | na  8 16 |        |             |                 ; TODO multitasking: Add PAUSE here (or in EMIT)
 519:000 | DONE wsp | na  8 16 |        |             |
 520:000 | DONE ins | na  8 16 | 0061be | 91 0c       |                 sta.diy 00020c       ; STA (CIB),Y
 521:000 | DONE ins | na  8 16 | 0061c0 | c8          |                 iny                  
 522:000 | DONE ins | na  8 16 | 0061c1 | c4 18       |                 cpy.d 000218         ; reached character limit?
 523:000 | DONE ins | na  8 16 | 0061c3 | d0 b5       |                 bne 00617a           ; fall thru if buffer limit reached
 524:000 | DONE wsp | na  8 16 |        |             |
 525:000 | DONE lbl | na  8 16 | 0061c5 |             | accept_eol                           
 526:000 | DONE ins | na  8 16 | 0061c5 | 84 0e       |                 sty.d 00020e         ; Y contains number of chars accepted already
 527:000 | DONE ins | na  8 16 | 0061c7 | c2 20       |                 rep 20               
 527:001 | DONE ctl | na 16 16 |        |             |         .!a16
 528:000 | DONE ins | na 16 16 | 0061c9 | 20 03 65    |                 jsr 006503           ; print final space
 529:000 | DONE ins | na 16 16 | 0061cc | 60          |                 rts                  ; this is the actual return of the routine
 530:000 | DONE wsp | na 16 16 |        |             |
 531:000 | DONE lbl | na 16 16 | 0061cd |             | accept_bs                            
 532:000 | DONE dir | na  8 16 |        |             |         .!a8                         
 533:000 | DONE ins | na  8 16 | 0061cd | c0 00 00    |                 cpy.# 0000           ; buffer empty?
 534:000 | DONE ins | na  8 16 | 0061d0 | d0 06       |                 bne 0061d8           
 535:000 | DONE wsp | na  8 16 |        |             |
 536:000 | DONE ins | na  8 16 | 0061d2 | a9 07       |                 lda.# AscBELL        ; complain and don't delete beyond the start of line
 537:000 | DONE ins | na  8 16 | 0061d4 | 20 30 60    |                 jsr 006030           
 538:000 | DONE ins | na  8 16 | 0061d7 | c8          |                 iny                  
 539:000 | DONE lbl | na  8 16 | 0061d8 |             | @                                    
 540:000 | DONE ins | na  8 16 | 0061d8 | 88          |                 dey                  
 541:000 | DONE ins | na  8 16 | 0061d9 | a9 08       |                 lda.# AscBS          ; move back one
 542:000 | DONE ins | na  8 16 | 0061db | 20 30 60    |                 jsr 006030           
 543:000 | DONE ins | na  8 16 | 0061de | a9 20       |                 lda.# AscSP          ; print a space (rubout)
 544:000 | DONE ins | na  8 16 | 0061e0 | 20 30 60    |                 jsr 006030           
 545:000 | DONE ins | na  8 16 | 0061e3 | a9 08       |                 lda.# AscBS          ; move back over space
 546:000 | DONE ins | na  8 16 | 0061e5 | 20 30 60    |                 jsr 006030           
 547:000 | DONE wsp | na  8 16 |        |             |
 548:000 | DONE ins | na  8 16 | 0061e8 | 80 90       |                 bra 00617a           
 549:000 | DONE wsp | na  8 16 |        |             |
 550:000 | DONE lbl | na  8 16 | 0061ea |             | z_accept                             
 550:001 | DONE ins | na  8 16 | 0061ea | 60          |                 rts                  
 551:000 | DONE wsp | na  8 16 |        |             |
 552:000 | DONE cmt | na  8 16 |        |             | ; -------------------------------------------------------------------
 553:000 | DONE cmt | na  8 16 |        |             | ; ALLOT ( n -- ) X bytes / X cycles
 554:000 | DONE cmt | na  8 16 |        |             | ; Reserve a certain number of bytes (not cells) or release them. If n = 0, do
 555:000 | DONE cmt | na  8 16 |        |             | ; nothing. If n is negative, release n bytes, but only to the beginning of the
 556:000 | DONE cmt | na  8 16 |        |             | ; Dictionary. If n is positive (the most common case), reserve n bytes, but not
 557:000 | DONE cmt | na  8 16 |        |             | ; past the Dictionary.
 558:000 | DONE cmt | na  8 16 |        |             | ; See http://forth-standard.org/standard/core/ALLOT
 559:000 | DONE cmt | na  8 16 |        |             | ; TODO test negative values
 560:000 | DONE lbl | na  8 16 | 0061eb |             | xt_allot                             
 561:000 | DONE dir | na 16 16 |        |             |         .!a16                        
 562:000 | DONE ins | na 16 16 | 0061eb | 98          |                 tya                  ; force flag check
 563:000 | DONE ins | na 16 16 | 0061ec | f0 21       |                 beq 00620f           ; zero bytes, don't do anything
 564:000 | DONE ins | na 16 16 | 0061ee | 30 12       |                 bmi 006202           ; free memory instead of reserving it
 565:000 | DONE wsp | na 16 16 |        |             |
 566:000 | DONE cmt | na 16 16 |        |             |                 ; most common case: reserve n bytes. We've already transfered
 567:000 | DONE cmt | na 16 16 |        |             |                 ; TOS to A, so we just have to add the current compile pointer
 568:000 | DONE ins | na 16 16 | 0061f0 | 18          |                 clc                  
 569:000 | DONE ins | na 16 16 | 0061f1 | 65 00       |                 adc.d 000200         ; create new CP
 570:000 | DONE ins | na 16 16 | 0061f3 | b0 07       |                 bcs 0061fc           ; oops, we've wrapped
 571:000 | DONE wsp | na 16 16 |        |             |
 572:000 | DONE ins | na 16 16 | 0061f5 | a8          |                 tay                  ; save copy of new CP
 573:000 | DONE wsp | na 16 16 |        |             |
 574:000 | DONE ins | na 16 16 | 0061f6 | 38          |                 sec                  
 575:000 | DONE ins | na 16 16 | 0061f7 | e9 ff 7b    |                 sbc.# 007bff         
 576:000 | DONE ins | na 16 16 | 0061fa | 30 11       |                 bmi 00620d           ; oops, fall thru if beyond max RAM
 577:000 | DONE wsp | na 16 16 |        |             |
 578:000 | DONE lbl | na 16 16 | 0061fc |             | allot_error                          
 579:000 | DONE ins | na 16 16 | 0061fc | a9 eb 69    |                 lda.# 0069eb         
 580:000 | DONE ins | na 16 16 | 0061ff | 4c e2 68    |                 jmp 0068e2           
 581:000 | DONE wsp | na 16 16 |        |             |
 582:000 | DONE lbl | na 16 16 | 006202 |             | allot_minus                          
 583:000 | DONE cmt | na 16 16 |        |             |                 ; negative value means we're freeing memory
 584:000 | DONE ins | na 16 16 | 006202 | 38          |                 sec                  
 585:000 | DONE ins | na 16 16 | 006203 | e5 00       |                 sbc.d 000200         
 586:000 | DONE ins | na 16 16 | 006205 | 90 f5       |                 bcc 0061fc           ; oops, we've wrapped
 587:000 | DONE wsp | na 16 16 |        |             |
 588:000 | DONE ins | na 16 16 | 006207 | a8          |                 tay                  
 589:000 | DONE wsp | na 16 16 |        |             |
 590:000 | DONE ins | na 16 16 | 006208 | e9 00 03    |                 sbc.# 000300         ; Carry Flag must still be set
 591:000 | DONE ins | na 16 16 | 00620b | 30 ef       |                 bmi 0061fc           ; oops, gone too far back
 592:000 | DONE wsp | na 16 16 |        |             |
 593:000 | DONE cmt | na 16 16 |        |             |                 ; fall through to allot_done
 594:000 | DONE lbl | na 16 16 | 00620d |             | allot_done                           
 595:000 | DONE ins | na 16 16 | 00620d | 84 00       |                 sty.d 000200         ; new compiler pointer
 596:000 | DONE lbl | na 16 16 | 00620f |             | allot_real_gone                      
 597:000 | DONE ins | na 16 16 | 00620f | b4 00       |                 ldy.dx 00            ; DROP
 598:000 | DONE ins | na 16 16 | 006211 | e8          |                 inx                  
 599:000 | DONE ins | na 16 16 | 006212 | e8          |                 inx                  
 600:000 | DONE wsp | na 16 16 |        |             |
 601:000 | DONE lbl | na 16 16 | 006213 |             | z_allot                              
 601:001 | DONE ins | na 16 16 | 006213 | 60          |                 rts                  
 602:000 | DONE wsp | na 16 16 |        |             |
 603:000 | DONE wsp | na 16 16 |        |             |
 604:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 605:000 | DONE cmt | na 16 16 |        |             | ; BELL ( -- ) X bytes / X cycles
 606:000 | DONE cmt | na 16 16 |        |             | ; Trigger terminal bell on vt100 terminals
 607:000 | DONE cmt | na 16 16 |        |             | ; TODO replace with EMIT
 608:000 | DONE lbl | na 16 16 | 006214 |             | xt_bell                              
 609:000 | DONE dir | na 16 16 |        |             |         .!a16                        
 610:000 | DONE ins | na 16 16 | 006214 | a9 07 00    |                 lda.# AscBELL        
 611:000 | DONE ins | na 16 16 | 006217 | 20 30 60    |                 jsr 006030           
 612:000 | DONE wsp | na 16 16 |        |             |
 613:000 | DONE lbl | na 16 16 | 00621a |             | z_bell                               
 613:001 | DONE ins | na 16 16 | 00621a | 60          |                 rts                  
 614:000 | DONE wsp | na 16 16 |        |             |
 615:000 | DONE wsp | na 16 16 |        |             |
 616:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 617:000 | DONE cmt | na 16 16 |        |             | ; BL ( -- u ) 7 bytes / 12 cycles
 618:000 | DONE cmt | na 16 16 |        |             | ; Put ASCII char for SPACE on Data Stack
 619:000 | DONE lbl | na 16 16 | 00621b |             | xt_bl                                
 620:000 | DONE dir | na 16 16 |        |             |         .!xy16                       
 621:000 | DONE ins | na 16 16 | 00621b | ca          |                 dex                  
 622:000 | DONE ins | na 16 16 | 00621c | ca          |                 dex                  
 623:000 | DONE ins | na 16 16 | 00621d | 94 00       |                 sty.dx 00            
 624:000 | DONE ins | na 16 16 | 00621f | a0 20 00    |                 ldy.# AscSP          
 625:000 | DONE wsp | na 16 16 |        |             |
 626:000 | DONE lbl | na 16 16 | 006222 |             | z_bl                                 
 626:001 | DONE ins | na 16 16 | 006222 | 60          |                 rts                  
 627:000 | DONE wsp | na 16 16 |        |             |
 628:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 629:000 | DONE cmt | na 16 16 |        |             | ; BYE ( -- ) 2 bytes / 7-8 cycles
 630:000 | DONE cmt | na 16 16 |        |             | ; Leave Liara Forth, returning to Mensch Monitor
 631:000 | DONE lbl | na 16 16 | 006223 |             | xt_bye                               
 632:000 | DONE ins | na 16 16 | 006223 | 58          |                 cli                  
 633:000 | DONE ins | na 16 16 | 006224 | 00 00       |                 brk 00               ; status byte 00 required for assembler
 634:000 | DONE wsp | na 16 16 |        |             |
 635:000 | DONE lbl | na 16 16 | 006226 |             | z_bye                                
 635:001 | DONE ins | na 16 16 | 006226 | 60          |                 rts                  ; dummy for compiling, never reached
 636:000 | DONE wsp | na 16 16 |        |             |
 637:000 | DONE wsp | na 16 16 |        |             |
 638:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 639:000 | DONE cmt | na 16 16 |        |             | ; CELLS ( n -- n ) X bytes / X cycles
 640:000 | DONE cmt | na 16 16 |        |             | ; Given a number of cells, return the number of bytes that they will require.
 641:000 | DONE cmt | na 16 16 |        |             | ; This is 16 bit cell Forth, so the value returned by this word is the same as
 642:000 | DONE cmt | na 16 16 |        |             | ; returned by 2*, see there.
 643:000 | DONE wsp | na 16 16 |        |             |
 644:000 | DONE wsp | na 16 16 |        |             |
 645:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 646:000 | DONE cmt | na 16 16 |        |             | ; CONSTANT ( "name" n -- ) X bytes / X cycles
 647:000 | DONE cmt | na 16 16 |        |             | ; Associate a fixed value with a word. This could be realized as
 648:000 | DONE cmt | na 16 16 |        |             | ; CREATE , DOES> @  as well. We do more in assembler but let CREATE do the heavy
 649:000 | DONE cmt | na 16 16 |        |             | ; lifting.
 650:000 | DONE cmt | na 16 16 |        |             | ; See http://www.bradrodriguez.com/papers/moving3.htm for a primer on how
 651:000 | DONE cmt | na 16 16 |        |             | ; this works in various Forths.
 652:000 | DONE lbl | na 16 16 | 006227 |             | xt_constant                          
 653:000 | DONE ins | na 16 16 | 006227 | 20 57 62    |                 jsr 006257           
 654:000 | DONE wsp | na 16 16 |        |             |
 655:000 | DONE cmt | na 16 16 |        |             |                 ; CREATE by default installs a subroutine jump to DOVAR, but we
 656:000 | DONE cmt | na 16 16 |        |             |                 ; actually want DOCONST this time. Go back two bytes and repace
 657:000 | DONE cmt | na 16 16 |        |             |                 ; the subroutine jump target
 658:000 | DONE ins | na 16 16 | 00622a | a5 00       |                 lda.d 000200         
 659:000 | DONE ins | na 16 16 | 00622c | 3a          |                 dec.a                
 660:000 | DONE ins | na 16 16 | 00622d | 3a          |                 dec.a                
 661:000 | DONE ins | na 16 16 | 00622e | 85 16       |                 sta.d 000216         
 662:000 | DONE wsp | na 16 16 |        |             |
 663:000 | DONE ins | na 16 16 | 006230 | a9 aa 68    |                 lda.# 0068aa         
 664:000 | DONE ins | na 16 16 | 006233 | 92 16       |                 sta.di 000216        ; STA (TMP1)
 665:000 | DONE wsp | na 16 16 |        |             |
 666:000 | DONE cmt | na 16 16 |        |             |                 ; Save TOS in next cell. This is a direct version of COMMA
 667:000 | DONE ins | na 16 16 | 006235 | 98          |                 tya                  ; there is no "sty.di cp"
 668:000 | DONE ins | na 16 16 | 006236 | 92 00       |                 sta.di 000200        
 669:000 | DONE ins | na 16 16 | 006238 | e6 00       |                 inc.d 000200         
 670:000 | DONE ins | na 16 16 | 00623a | e6 00       |                 inc.d 000200         
 671:000 | DONE wsp | na 16 16 |        |             |
 672:000 | DONE ins | na 16 16 | 00623c | b4 00       |                 ldy.dx 00            ; DROP
 673:000 | DONE ins | na 16 16 | 00623e | e8          |                 inx                  
 674:000 | DONE ins | na 16 16 | 00623f | e8          |                 inx                  
 675:000 | DONE wsp | na 16 16 |        |             |
 676:000 | DONE lbl | na 16 16 | 006240 |             | z_constant                           
 676:001 | DONE ins | na 16 16 | 006240 | 60          |                 rts                  
 677:000 | DONE wsp | na 16 16 |        |             |
 678:000 | DONE wsp | na 16 16 |        |             |
 679:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 680:000 | DONE cmt | na 16 16 |        |             | ; COUNT ( c-addr -- addr u ) 14 bytes / X cycles
 681:000 | DONE cmt | na 16 16 |        |             | ; Convert old-style character string to address-length pair. Note that the
 682:000 | DONE cmt | na 16 16 |        |             | ; length of the string c-addr ist stored in character length (8 bit), not cell
 683:000 | DONE cmt | na 16 16 |        |             | ; length (16 bit). This is rarely used these days, though COUNT can also be used
 684:000 | DONE cmt | na 16 16 |        |             | ; to step through a string character by character.
 685:000 | DONE lbl | na 16 16 | 006241 |             | xt_count                             
 686:000 | DONE dir | na 16 16 |        |             |         .!a16                        
 687:000 | DONE dir | na 16 16 |        |             |         .!xy16                       
 688:000 | DONE ins | na 16 16 | 006241 | 98          |                 tya                  
 689:000 | DONE ins | na 16 16 | 006242 | 1a          |                 inc.a                ; String address starts one char later
 690:000 | DONE wsp | na 16 16 |        |             |
 691:000 | DONE ins | na 16 16 | 006243 | ca          |                 dex                  
 692:000 | DONE ins | na 16 16 | 006244 | ca          |                 dex                  
 693:000 | DONE ins | na 16 16 | 006245 | 95 00       |                 sta.dx 00            ; NOS
 694:000 | DONE wsp | na 16 16 |        |             |
 695:000 | DONE ins | na 16 16 | 006247 | b9 00 00    |                 lda.y 0000           ; LDA $0000,Y  first byte is length
 696:000 | DONE ins | na 16 16 | 00624a | eb          |                 xba                  ; move length to LSB
 697:000 | DONE ins | na 16 16 | 00624b | 29 ff 00    |                 and.# 00ff           ; get rid of whatever was MSB
 698:000 | DONE ins | na 16 16 | 00624e | a8          |                 tay                  ; TOS
 699:000 | DONE wsp | na 16 16 |        |             |
 700:000 | DONE lbl | na 16 16 | 00624f |             | z_count                              
 700:001 | DONE ins | na 16 16 | 00624f | 60          |                 rts                  
 701:000 | DONE wsp | na 16 16 |        |             |
 702:000 | DONE wsp | na 16 16 |        |             |
 703:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 704:000 | DONE cmt | na 16 16 |        |             | ; CR ( -- ) X bytes / X cycles
 705:000 | DONE cmt | na 16 16 |        |             | ; Cause following output to appear at beginning of next line
 706:000 | DONE cmt | na 16 16 |        |             | ; TODO replace with EMIT
 707:000 | DONE lbl | na 16 16 | 006250 |             | xt_cr                                
 708:000 | DONE ins | na 16 16 | 006250 | a9 0a 00    |                 lda.# AscLF          ; test with AscCR for emulators
 709:000 | DONE ins | na 16 16 | 006253 | 20 30 60    |                 jsr 006030           
 710:000 | DONE wsp | na 16 16 |        |             |
 711:000 | DONE lbl | na 16 16 | 006256 |             | z_cr                                 
 711:001 | DONE ins | na 16 16 | 006256 | 60          |                 rts                  
 712:000 | DONE wsp | na 16 16 |        |             |
 713:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 714:000 | DONE cmt | na 16 16 |        |             | ; CREATE ( "name" -- ) X bytes / X cycles
 715:000 | DONE cmt | na 16 16 |        |             | ; Create a Dictionary entry associated with "name", used for various words,
 716:000 | DONE cmt | na 16 16 |        |             | ; especially for VARIABLE. When called, this new word will return the associated
 717:000 | DONE cmt | na 16 16 |        |             | ; address.
 718:000 | DONE lbl | na 16 16 | 006257 |             | xt_create                            
 719:000 | DONE dir | na 16 16 |        |             |         .!a16                        
 720:000 | DONE ins | na 16 16 | 006257 | 20 4e 64    |                 jsr 00644e           ; ( -- addr u )
 721:000 | DONE ins | na 16 16 | 00625a | d0 06       |                 bne 006262           
 722:000 | DONE wsp | na 16 16 |        |             |
 723:000 | DONE cmt | na 16 16 |        |             |                 ; if we got a zero-length name string, complain and abort
 724:000 | DONE ins | na 16 16 | 00625c | a9 8a 6a    |                 lda.# 006a8a         
 725:000 | DONE ins | na 16 16 | 00625f | 4c e2 68    |                 jmp 0068e2           
 726:000 | DONE wsp | na 16 16 |        |             |
 727:000 | DONE lbl | na 16 16 | 006262 |             | create_got_name                      
 728:000 | DONE cmt | na 16 16 |        |             |                 ; all Dictionary entries are lowercase
 729:000 | DONE ins | na 16 16 | 006262 | 20 1b 69    |                 jsr 00691b           
 730:000 | DONE wsp | na 16 16 |        |             |
 731:000 | DONE cmt | na 16 16 |        |             |                 ; Remember the first free byte of memory as the start of the new
 732:000 | DONE cmt | na 16 16 |        |             |                 ; word
 733:000 | DONE ins | na 16 16 | 006265 | a5 00       |                 lda.d 000200         
 734:000 | DONE ins | na 16 16 | 006267 | 85 16       |                 sta.d 000216         ; save start of new word
 735:000 | DONE wsp | na 16 16 |        |             |
 736:000 | DONE cmt | na 16 16 |        |             |                 ; Enforce limit on 255 char length names by masking the MSB
 737:000 | DONE cmt | na 16 16 |        |             |                 ; of the length of the given string. We arrive here with
 738:000 | DONE cmt | na 16 16 |        |             |                 ; ( addr u )
 739:000 | DONE ins | na 16 16 | 006269 | 98          |                 tya                  
 740:000 | DONE ins | na 16 16 | 00626a | 29 ff 00    |                 and.# 00ff           
 741:000 | DONE ins | na 16 16 | 00626d | 85 18       |                 sta.d 000218         ; save length of name string
 742:000 | DONE wsp | na 16 16 |        |             |
 743:000 | DONE cmt | na 16 16 |        |             |                 ; We need 8 bytes + the length of the name string for our new
 744:000 | DONE cmt | na 16 16 |        |             |                 ; header. This is also the offset for the start of the code
 745:000 | DONE cmt | na 16 16 |        |             |                 ; field (the xt_ label) so we need to remember it. Otherwise, we
 746:000 | DONE cmt | na 16 16 |        |             |                 ; could just allot the space afterwards.
 747:000 | DONE ins | na 16 16 | 00626f | 18          |                 clc                  
 748:000 | DONE ins | na 16 16 | 006270 | 69 08 00    |                 adc.# 0008           
 749:000 | DONE ins | na 16 16 | 006273 | 85 1a       |                 sta.d 00021a         ; total bytes required for header
 750:000 | DONE wsp | na 16 16 |        |             |
 751:000 | DONE cmt | na 16 16 |        |             |                 ; We need to allocate three more bytes for the hardcoded
 752:000 | DONE cmt | na 16 16 |        |             |                 ; code field area (CFA), the "payload" of the word which by
 753:000 | DONE cmt | na 16 16 |        |             |                 ; default will be a subroutine jump to DOVAR
 754:000 | DONE ins | na 16 16 | 006275 | 1a          |                 inc.a                
 755:000 | DONE ins | na 16 16 | 006276 | 1a          |                 inc.a                
 756:000 | DONE ins | na 16 16 | 006277 | 1a          |                 inc.a                
 757:000 | DONE wsp | na 16 16 |        |             |
 758:000 | DONE cmt | na 16 16 |        |             |                 ; Instead of jumping to ALLOT, we do things by hand for speed
 759:000 | DONE cmt | na 16 16 |        |             |                 ; and so we don't have to fool around with the stack
 760:000 | DONE ins | na 16 16 | 006278 | 18          |                 clc                  
 761:000 | DONE ins | na 16 16 | 006279 | 65 00       |                 adc.d 000200         
 762:000 | DONE ins | na 16 16 | 00627b | 85 00       |                 sta.d 000200         
 763:000 | DONE wsp | na 16 16 |        |             |
 764:000 | DONE cmt | na 16 16 |        |             |                 ; Now we walk through the header, using Y as the index. See
 765:000 | DONE cmt | na 16 16 |        |             |                 ; drawing of header in headers.tasm file for reference. We
 766:000 | DONE cmt | na 16 16 |        |             |                 ; arrive here with ( addr u ) still from PARSE-NAME. We need
 767:000 | DONE cmt | na 16 16 |        |             |                 ; that addr later for the name string, so we push it to the
 768:000 | DONE cmt | na 16 16 |        |             |                 ; Return Stack. We'll clean up the Data Stack later
 769:000 | DONE ins | na 16 16 | 00627d | b5 00       |                 lda.dx 00            
 770:000 | DONE ins | na 16 16 | 00627f | 48          |                 pha                  
 771:000 | DONE wsp | na 16 16 |        |             |
 772:000 | DONE cmt | na 16 16 |        |             |                 ; HEADER BYTES 0,1: Length byte and flags
 773:000 | DONE ins | na 16 16 | 006280 | a0 00 00    |                 ldy.# 0000           ; Y is now an index, not TOS
 774:000 | DONE ins | na 16 16 | 006283 | a5 18       |                 lda.d 000218         ; get length byte
 775:000 | DONE ins | na 16 16 | 006285 | 91 16       |                 sta.diy 000216       ; STA (TMP1),Y
 776:000 | DONE ins | na 16 16 | 006287 | c8          |                 iny                  
 777:000 | DONE ins | na 16 16 | 006288 | c8          |                 iny                  
 778:000 | DONE wsp | na 16 16 |        |             |
 779:000 | DONE cmt | na 16 16 |        |             |                 ; BYTES 2,3: Next word in the dictionary (its nt). This is the
 780:000 | DONE cmt | na 16 16 |        |             |                 ; current Dictionary Pointer
 781:000 | DONE ins | na 16 16 | 006289 | a5 02       |                 lda.d 000202         
 782:000 | DONE ins | na 16 16 | 00628b | 91 16       |                 sta.diy 000216       
 783:000 | DONE ins | na 16 16 | 00628d | c8          |                 iny                  
 784:000 | DONE ins | na 16 16 | 00628e | c8          |                 iny                  
 785:000 | DONE wsp | na 16 16 |        |             |
 786:000 | DONE cmt | na 16 16 |        |             |                 ; BYTES 4,5: Start of code field (xt of this word, "xt_" link)
 787:000 | DONE cmt | na 16 16 |        |             |                 ; This begins after the header, so we take the length of the
 788:000 | DONE cmt | na 16 16 |        |             |                 ; header, which we saved in tmp3, and use it as an offset to
 789:000 | DONE cmt | na 16 16 |        |             |                 ; the address of the start of the word
 790:000 | DONE ins | na 16 16 | 00628f | a5 16       |                 lda.d 000216         ; can't use CP, because we've allotted space
 791:000 | DONE ins | na 16 16 | 006291 | 85 02       |                 sta.d 000202         ; while we've got it, make old CP the new DP
 792:000 | DONE wsp | na 16 16 |        |             |
 793:000 | DONE ins | na 16 16 | 006293 | 18          |                 clc                  
 794:000 | DONE ins | na 16 16 | 006294 | 65 1a       |                 adc.d 00021a         ; total header length
 795:000 | DONE ins | na 16 16 | 006296 | 91 16       |                 sta.diy 000216       
 796:000 | DONE ins | na 16 16 | 006298 | c8          |                 iny                  
 797:000 | DONE ins | na 16 16 | 006299 | c8          |                 iny                  
 798:000 | DONE wsp | na 16 16 |        |             |
 799:000 | DONE cmt | na 16 16 |        |             |                 ; BYTES 6,7: End of code ("z_" link)
 800:000 | DONE cmt | na 16 16 |        |             |                 ; By default, we execute a jump to the DOVAR routine, so we need
 801:000 | DONE cmt | na 16 16 |        |             |                 ; to move three bytes down, and then one more byte so the z_
 802:000 | DONE cmt | na 16 16 |        |             |                 ; label points to the (fictional) RTS instruction for correct
 803:000 | DONE cmt | na 16 16 |        |             |                 ; compilation. The start of the code field is still in A
 804:000 | DONE ins | na 16 16 | 00629a | 1a          |                 inc.a                
 805:000 | DONE ins | na 16 16 | 00629b | 1a          |                 inc.a                
 806:000 | DONE ins | na 16 16 | 00629c | 1a          |                 inc.a                
 807:000 | DONE ins | na 16 16 | 00629d | 91 16       |                 sta.diy 000216       
 808:000 | DONE ins | na 16 16 | 00629f | c8          |                 iny                  
 809:000 | DONE ins | na 16 16 | 0062a0 | c8          |                 iny                  
 810:000 | DONE wsp | na 16 16 |        |             |
 811:000 | DONE cmt | na 16 16 |        |             |                 ; BYTE 8: Start of name string
 812:000 | DONE cmt | na 16 16 |        |             |                 ; The addr of the string is on the Return Stack, the length of
 813:000 | DONE cmt | na 16 16 |        |             |                 ; the name string is in tmp2. We subtract eight from the address
 814:000 | DONE cmt | na 16 16 |        |             |                 ; so we can use the same loop index
 815:000 | DONE ins | na 16 16 | 0062a1 | 68          |                 pla                  ; get back string address
 816:000 | DONE ins | na 16 16 | 0062a2 | 38          |                 sec                  
 817:000 | DONE ins | na 16 16 | 0062a3 | e9 08 00    |                 sbc.# 0008           
 818:000 | DONE ins | na 16 16 | 0062a6 | 85 1a       |                 sta.d 00021a         
 819:000 | DONE ins | na 16 16 | 0062a8 | e2 20       |                 sep 20               
 819:001 | DONE ctl | na  8 16 |        |             |         .!a8
 820:000 | DONE lbl | na  8 16 | 0062aa |             | @                                    
 821:000 | DONE ins | na  8 16 | 0062aa | b1 1a       |                 lda.diy 00021a       
 822:000 | DONE ins | na  8 16 | 0062ac | 91 16       |                 sta.diy 000216       
 823:000 | DONE ins | na  8 16 | 0062ae | c8          |                 iny                  
 824:000 | DONE ins | na  8 16 | 0062af | c6 18       |                 dec.d 000218         
 825:000 | DONE ins | na  8 16 | 0062b1 | d0 f7       |                 bne 0062aa           
 826:000 | DONE wsp | na  8 16 |        |             |
 827:000 | DONE cmt | na  8 16 |        |             |                 ; After the name string, comes the Code Field (start at xt, that
 828:000 | DONE cmt | na  8 16 |        |             |                 ; is, the xt_ label of the word) which is initially a jump to the
 829:000 | DONE cmt | na  8 16 |        |             |                 ; subroutine to DOVAR. We're still in 8-bit A-register, which is
 830:000 | DONE cmt | na  8 16 |        |             |                 ; good
 831:000 | DONE ins | na  8 16 | 0062b3 | a9 20       |                 lda.# 20             ; opcode of JSR
 832:000 | DONE ins | na  8 16 | 0062b5 | 91 16       |                 sta.diy 000216       
 833:000 | DONE ins | na  8 16 | 0062b7 | c8          |                 iny                  ; single increase only because we have 8-bit A
 834:000 | DONE wsp | na  8 16 |        |             |
 835:000 | DONE ins | na  8 16 | 0062b8 | a9 a3       |                 lda.# .lsb 0068a3    
 836:000 | DONE ins | na  8 16 | 0062ba | 91 16       |                 sta.diy 000216       
 837:000 | DONE ins | na  8 16 | 0062bc | c8          |                 iny                  
 838:000 | DONE wsp | na  8 16 |        |             |
 839:000 | DONE ins | na  8 16 | 0062bd | a9 68       |                 lda.# .msb 0068a3    
 840:000 | DONE ins | na  8 16 | 0062bf | 91 16       |                 sta.diy 000216       
 841:000 | DONE wsp | na  8 16 |        |             |
 842:000 | DONE ins | na  8 16 | 0062c1 | c2 20       |                 rep 20               
 842:001 | DONE ctl | na 16 16 |        |             |         .!a16
 843:000 | DONE cmt | na 16 16 |        |             |                 ; We're done. Restore Data Stack (2DROP)
 844:000 | DONE ins | na 16 16 | 0062c3 | b4 02       |                 ldy.dx 02            
 845:000 | DONE ins | na 16 16 | 0062c5 | e8          |                 inx                  
 846:000 | DONE ins | na 16 16 | 0062c6 | e8          |                 inx                  
 847:000 | DONE ins | na 16 16 | 0062c7 | e8          |                 inx                  
 848:000 | DONE ins | na 16 16 | 0062c8 | e8          |                 inx                  
 849:000 | DONE wsp | na 16 16 |        |             |
 850:000 | DONE lbl | na 16 16 | 0062c9 |             | z_create                             
 850:001 | DONE ins | na 16 16 | 0062c9 | 60          |                 rts                  
 851:000 | DONE wsp | na 16 16 |        |             |
 852:000 | DONE wsp | na 16 16 |        |             |
 853:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 854:000 | DONE cmt | na 16 16 |        |             | ; DEPTH ( -- u ) 14 bytes / X cycles
 855:000 | DONE cmt | na 16 16 |        |             | ; Push the number of entries in cells (not bytes) on the parameter stack.
 856:000 | DONE cmt | na 16 16 |        |             | ; Assumes X is valid as the DSP.
 857:000 | DONE lbl | na 16 16 | 0062ca |             | xt_depth                             
 858:000 | DONE dir | na 16 16 |        |             |         .!a16                        
 859:000 | DONE cmt | na 16 16 |        |             | 		; We've got zero entries when X is dsp0
 860:000 | DONE ins | na 16 16 | 0062ca | 86 04       |                 stx.d 000204         
 861:000 | DONE ins | na 16 16 | 0062cc | a9 f0 02    |                 lda.# 0002f0         
 862:000 | DONE ins | na 16 16 | 0062cf | 38          |                 sec                  
 863:000 | DONE ins | na 16 16 | 0062d0 | e5 04       |                 sbc.d 000204         
 864:000 | DONE wsp | na 16 16 |        |             |
 865:000 | DONE cmt | na 16 16 |        |             |                 ; now divide by two because each cells is to bytes long
 866:000 | DONE ins | na 16 16 | 0062d2 | 4a          |                 lsr.a                
 867:000 | DONE wsp | na 16 16 |        |             |
 868:000 | DONE ins | na 16 16 | 0062d3 | ca          |                 dex                  
 869:000 | DONE ins | na 16 16 | 0062d4 | ca          |                 dex                  
 870:000 | DONE ins | na 16 16 | 0062d5 | 94 00       |                 sty.dx 00            
 871:000 | DONE wsp | na 16 16 |        |             |
 872:000 | DONE cmt | na 16 16 |        |             |                 ; push result to stack
 873:000 | DONE ins | na 16 16 | 0062d7 | a8          |                 tay                  
 874:000 | DONE wsp | na 16 16 |        |             |
 875:000 | DONE lbl | na 16 16 | 0062d8 |             | z_depth                              
 875:001 | DONE ins | na 16 16 | 0062d8 | 60          |                 rts                  
 876:000 | DONE wsp | na 16 16 |        |             |
 877:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 878:000 | DONE cmt | na 16 16 |        |             | ; DOT ( n -- ) X bytes / X cycles
 879:000 | DONE cmt | na 16 16 |        |             | ; Print value that is TOS followed by a single space
 880:000 | DONE cmt | na 16 16 |        |             | ; Forth code is  DUP ABS 0 <# #S ROT SIGN #> TYPE SPACE
 881:000 | DONE cmt | na 16 16 |        |             | ; Since this is used interactively, and humans are slow (just ask GlaDOS), we
 882:000 | DONE cmt | na 16 16 |        |             | ; focus on size
 883:000 | DONE cmt | na 16 16 |        |             | ; TODO this is a temporary version
 884:000 | DONE lbl | na 16 16 | 0062d9 |             | xt_dot                               
 885:000 | DONE cmt | na 16 16 |        |             |                 ; --- TEMP print routine ---
 886:000 | DONE ins | na 16 16 | 0062d9 | 98          |                 tya                  
 887:000 | DONE ins | na 16 16 | 0062da | 29 00 ff    |                 and.# 0ff00          
 888:000 | DONE ins | na 16 16 | 0062dd | eb          |                 xba                  
 889:000 | DONE ins | na 16 16 | 0062de | 20 00 69    |                 jsr 006900           
 890:000 | DONE ins | na 16 16 | 0062e1 | 98          |                 tya                  
 891:000 | DONE ins | na 16 16 | 0062e2 | 29 ff 00    |                 and.# 00ff           
 892:000 | DONE ins | na 16 16 | 0062e5 | 20 00 69    |                 jsr 006900           
 893:000 | DONE ins | na 16 16 | 0062e8 | 20 03 65    |                 jsr 006503           
 894:000 | DONE cmt | na 16 16 |        |             |                 ; --- TEMP print routine ---
 895:000 | DONE wsp | na 16 16 |        |             |
 896:000 | DONE cmt | na 16 16 |        |             |                 ; Since we don't care about speed in this word, we save one byte
 897:000 | DONE cmt | na 16 16 |        |             |                 ; by doing DROP the slow way and save one byte
 898:000 | DONE ins | na 16 16 | 0062eb | 20 45 63    |                 jsr 006345           
 899:000 | DONE wsp | na 16 16 |        |             |
 900:000 | DONE lbl | na 16 16 | 0062ee |             | z_dot                                
 900:001 | DONE ins | na 16 16 | 0062ee | 60          |                 rts                  
 901:000 | DONE wsp | na 16 16 |        |             |
 902:000 | DONE wsp | na 16 16 |        |             |
 903:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 904:000 | DONE cmt | na 16 16 |        |             | ; DOTPAREN ( "string" -- ) 13 bytes / X cycles
 905:000 | DONE cmt | na 16 16 |        |             | ; Display string delimited by ")" immediately, regardless if word is compiled or
 906:000 | DONE cmt | na 16 16 |        |             | ; interpreted. Forth definition is  .( [CHAR] ) PARSE TYPE ; IMMEDIATE
 907:000 | DONE lbl | na 16 16 | 0062ef |             | xt_dotparen                          
 908:000 | DONE cmt | na 16 16 |        |             |                ; use PARSE to find the end of the string
 909:000 | DONE ins | na 16 16 | 0062ef | ca          |                 dex                  
 910:000 | DONE ins | na 16 16 | 0062f0 | ca          |                 dex                  
 911:000 | DONE ins | na 16 16 | 0062f1 | 94 00       |                 sty.dx 00            
 912:000 | DONE ins | na 16 16 | 0062f3 | a0 29 00    |                 ldy.# 29             
 913:000 | DONE wsp | na 16 16 |        |             |
 914:000 | DONE ins | na 16 16 | 0062f6 | 20 80 64    |                 jsr 006480           ; ( -- addr u)
 915:000 | DONE ins | na 16 16 | 0062f9 | 20 36 65    |                 jsr 006536           
 916:000 | DONE wsp | na 16 16 |        |             |
 917:000 | DONE lbl | na 16 16 | 0062fc |             | z_dotparen                           
 917:001 | DONE ins | na 16 16 | 0062fc | 60          |                 rts                  
 918:000 | DONE wsp | na 16 16 |        |             |
 919:000 | DONE wsp | na 16 16 |        |             |
 920:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 921:000 | DONE cmt | na 16 16 |        |             | ; DOTS ".S" ( -- ) X bytes / X cycles
 922:000 | DONE cmt | na 16 16 |        |             | ; Print content of Data Stack non-distructively. Since this is for humans, we
 923:000 | DONE cmt | na 16 16 |        |             | ; don't have to worry about speed. We follow the format of Gforth
 924:000 | DONE cmt | na 16 16 |        |             | ; and print the number of elements first in brackets, followed by the Data Stack
 925:000 | DONE cmt | na 16 16 |        |             | ; content (if present).
 926:000 | DONE lbl | na 16 16 | 0062fd |             | xt_dots                              
 927:000 | DONE dir | na 16 16 |        |             |         .!a16                        
 928:000 | DONE dir | na 16 16 |        |             |         .!xy16                       
 929:000 | DONE ins | na 16 16 | 0062fd | 20 ca 62    |                 jsr 0062ca           ; ( -- u)
 930:000 | DONE wsp | na 16 16 |        |             |
 931:000 | DONE cmt | na 16 16 |        |             |                 ; Print stack depth in brackets
 932:000 | DONE cmt | na 16 16 |        |             |                 ; TODO rewrite this to use EMIT
 933:000 | DONE ins | na 16 16 | 006300 | a9 3c 00    |                 lda.# 3c             
 934:000 | DONE ins | na 16 16 | 006303 | 20 30 60    |                 jsr 006030           
 935:000 | DONE wsp | na 16 16 |        |             |
 936:000 | DONE cmt | na 16 16 |        |             |                 ; --- TEMP print routine ---
 937:000 | DONE ins | na 16 16 | 006306 | 98          |                 tya                  
 938:000 | DONE ins | na 16 16 | 006307 | 29 00 ff    |                 and.# 0ff00          
 939:000 | DONE ins | na 16 16 | 00630a | eb          |                 xba                  
 940:000 | DONE ins | na 16 16 | 00630b | 20 00 69    |                 jsr 006900           
 941:000 | DONE ins | na 16 16 | 00630e | 98          |                 tya                  
 942:000 | DONE ins | na 16 16 | 00630f | 29 ff 00    |                 and.# 00ff           
 943:000 | DONE ins | na 16 16 | 006312 | 20 00 69    |                 jsr 006900           
 944:000 | DONE cmt | na 16 16 |        |             |                 ; --- TEMP print routine ---
 945:000 | DONE wsp | na 16 16 |        |             |
 946:000 | DONE cmt | na 16 16 |        |             |                 ; TODO rewrite this to use EMIT
 947:000 | DONE ins | na 16 16 | 006315 | a9 3e 00    |                 lda.# 3e             
 948:000 | DONE ins | na 16 16 | 006318 | 20 30 60    |                 jsr 006030           
 949:000 | DONE ins | na 16 16 | 00631b | 20 03 65    |                 jsr 006503           
 950:000 | DONE wsp | na 16 16 |        |             |
 951:000 | DONE wsp | na 16 16 |        |             |
 952:000 | DONE cmt | na 16 16 |        |             |                 ; There will be a lot of cases where .S is used when the stack
 953:000 | DONE cmt | na 16 16 |        |             |                 ; is empty. Get them first and exit quickly
 954:000 | DONE ins | na 16 16 | 00631e | 98          |                 tya                  ; force flag test
 955:000 | DONE ins | na 16 16 | 00631f | f0 20       |                 beq 006341           
 956:000 | DONE wsp | na 16 16 |        |             |
 957:000 | DONE lbl | na 16 16 | 006321 |             | dots_not_empty                       
 958:000 | DONE cmt | na 16 16 |        |             |                 ; We have at least one element on the stack, which used to be in
 959:000 | DONE cmt | na 16 16 |        |             |                 ; Y as TOS, but is now NOS and therefore accessable by X. Also,
 960:000 | DONE cmt | na 16 16 |        |             |                 ; the depth of the Data Stack is already in Y waiting to be used
 961:000 | DONE cmt | na 16 16 |        |             |                 ; as a counter. We use this to our advantage.
 962:000 | DONE wsp | na 16 16 |        |             |
 963:000 | DONE cmt | na 16 16 |        |             |                 ; Normally we would go with STX.D tmptos / LDX.D tmptos with
 964:000 | DONE cmt | na 16 16 |        |             |                 ; 4 bytes and 8 cycles because we value speed over size.
 965:000 | DONE cmt | na 16 16 |        |             |                 ; However, .S is used interactively, and humans
 966:000 | DONE cmt | na 16 16 |        |             |                 ; won't notice the one cycle more of PHX/PLX (2 bytes,
 967:000 | DONE cmt | na 16 16 |        |             |                 ; 9 cycles). We save the two bytes.
 968:000 | DONE ins | na 16 16 | 006321 | da          |                 phx                  
 969:000 | DONE wsp | na 16 16 |        |             |
 970:000 | DONE cmt | na 16 16 |        |             |                 ; We print from the bottom up. Note that the Data Stack locations
 971:000 | DONE cmt | na 16 16 |        |             |                 ; dsp0 and dsp0+2 always contain garbage so they can be skipped,
 972:000 | DONE cmt | na 16 16 |        |             |                 ; see docs/INTERNALS.md for more details
 973:000 | DONE ins | na 16 16 | 006322 | a2 f0 02    |                 ldx.# 0002f0         ; points to dsp0, which is garbage
 974:000 | DONE ins | na 16 16 | 006325 | ca          |                 dex                  
 975:000 | DONE ins | na 16 16 | 006326 | ca          |                 dex                  ; points to dsp0-2, which is more garbage
 976:000 | DONE wsp | na 16 16 |        |             |
 977:000 | DONE lbl | na 16 16 | 006327 |             | dots_loop                            
 978:000 | DONE ins | na 16 16 | 006327 | ca          |                 dex                  ; get next element on DS, initially dsp0-4
 979:000 | DONE ins | na 16 16 | 006328 | ca          |                 dex                  
 980:000 | DONE wsp | na 16 16 |        |             |
 981:000 | DONE cmt | na 16 16 |        |             |                 ; --- TEMP print routine ---
 982:000 | DONE cmt | na 16 16 |        |             |                 ; TODO call EMIT
 983:000 | DONE ins | na 16 16 | 006329 | b5 00       |                 lda.dx 00            
 984:000 | DONE ins | na 16 16 | 00632b | 29 00 ff    |                 and.# 0ff00          
 985:000 | DONE ins | na 16 16 | 00632e | eb          |                 xba                  
 986:000 | DONE ins | na 16 16 | 00632f | 20 00 69    |                 jsr 006900           
 987:000 | DONE ins | na 16 16 | 006332 | b5 00       |                 lda.dx 00            
 988:000 | DONE ins | na 16 16 | 006334 | 29 ff 00    |                 and.# 00ff           
 989:000 | DONE ins | na 16 16 | 006337 | 20 00 69    |                 jsr 006900           
 990:000 | DONE ins | na 16 16 | 00633a | 20 03 65    |                 jsr 006503           
 991:000 | DONE cmt | na 16 16 |        |             |                 ; --- TEMP print routine ---
 992:000 | DONE wsp | na 16 16 |        |             |
 993:000 | DONE ins | na 16 16 | 00633d | 88          |                 dey                  
 994:000 | DONE ins | na 16 16 | 00633e | d0 e7       |                 bne 006327           
 995:000 | DONE wsp | na 16 16 |        |             |
 996:000 | DONE ins | na 16 16 | 006340 | fa          |                 plx                  ; restore original DSP
 997:000 | DONE wsp | na 16 16 |        |             |
 998:000 | DONE lbl | na 16 16 | 006341 |             | dots_done                            
 999:000 | DONE cmt | na 16 16 |        |             |                 ; Clean up. Again, we don't care about speed in this
1000:000 | DONE cmt | na 16 16 |        |             |                 ; word so we save one byte by doing DROP the slow way
1001:000 | DONE ins | na 16 16 | 006341 | 20 45 63    |                 jsr 006345           
1002:000 | DONE wsp | na 16 16 |        |             |
1003:000 | DONE lbl | na 16 16 | 006344 |             | z_dots                               
1003:001 | DONE ins | na 16 16 | 006344 | 60          |                 rts                  
1004:000 | DONE wsp | na 16 16 |        |             |
1005:000 | DONE wsp | na 16 16 |        |             |
1006:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1007:000 | DONE cmt | na 16 16 |        |             | ; DROP ( n -- ) 4 bytes / 9 cycles
1008:000 | DONE cmt | na 16 16 |        |             | ; Drop first entry on Data Stack
1009:000 | DONE wsp | na 16 16 |        |             |
1010:000 | DONE lbl | na 16 16 | 006345 |             | xt_drop                              
1011:000 | DONE dir | na 16 16 |        |             |         .!xy16                       
1012:000 | DONE ins | na 16 16 | 006345 | b4 00       |                 ldy.dx 00            
1013:000 | DONE ins | na 16 16 | 006347 | e8          |                 inx                  
1014:000 | DONE ins | na 16 16 | 006348 | e8          |                 inx                  
1015:000 | DONE wsp | na 16 16 |        |             |
1016:000 | DONE lbl | na 16 16 | 006349 |             | z_drop                               
1016:001 | DONE ins | na 16 16 | 006349 | 60          |                 rts                  
1017:000 | DONE wsp | na 16 16 |        |             |
1018:000 | DONE wsp | na 16 16 |        |             |
1019:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1020:000 | DONE cmt | na 16 16 |        |             | ; DUMP ( addr u -- ) X bytes / X cycles
1021:000 | DONE cmt | na 16 16 |        |             | ; Print region of memory in a pretty way.
1022:000 | DONE cmt | na 16 16 |        |             | ; TODO This is a crude, temporary version for testing. Rewrite ASAP
1023:000 | DONE lbl | na 16 16 | 00634a |             | xt_dump                              
1024:000 | DONE cmt | na 16 16 |        |             |                 ; we use tmp1 as a counter because we need Y for other
1025:000 | DONE cmt | na 16 16 |        |             |                 ; stuff
1026:000 | DONE ins | na 16 16 | 00634a | 84 16       |                 sty.d 000216         
1027:000 | DONE wsp | na 16 16 |        |             |
1028:000 | DONE lbl | na 16 16 | 00634c |             | dump_line_loop                       
1029:000 | DONE ins | na 16 16 | 00634c | 20 50 62    |                 jsr 006250           
1030:000 | DONE wsp | na 16 16 |        |             |
1031:000 | DONE cmt | na 16 16 |        |             |                 ; start internal counter for 16 numbers per row
1032:000 | DONE ins | na 16 16 | 00634f | a0 10 00    |                 ldy.# 0010           
1033:000 | DONE lbl | na 16 16 | 006352 |             | dump_byte_loop                       
1034:000 | DONE cmt | na 16 16 |        |             |                 ; if there are zero bytes left to display, we're done
1035:000 | DONE ins | na 16 16 | 006352 | a5 16       |                 lda.d 000216         
1036:000 | DONE ins | na 16 16 | 006354 | f0 11       |                 beq 006367           
1037:000 | DONE wsp | na 16 16 |        |             |
1038:000 | DONE cmt | na 16 16 |        |             |                 ; otherwise, print contents pointed to by address in NOS
1039:000 | DONE ins | na 16 16 | 006356 | a1 00       |                 lda.dxi 00           
1040:000 | DONE ins | na 16 16 | 006358 | 20 00 69    |                 jsr 006900           ; TODO replace by EMIT
1041:000 | DONE ins | na 16 16 | 00635b | 20 03 65    |                 jsr 006503           
1042:000 | DONE wsp | na 16 16 |        |             |
1043:000 | DONE cmt | na 16 16 |        |             |                 ; next character
1044:000 | DONE ins | na 16 16 | 00635e | f6 00       |                 inc.dx 00            
1045:000 | DONE wsp | na 16 16 |        |             |
1046:000 | DONE cmt | na 16 16 |        |             |                 ; loop counter
1047:000 | DONE ins | na 16 16 | 006360 | c6 16       |                 dec.d 000216         
1048:000 | DONE ins | na 16 16 | 006362 | 88          |                 dey                  
1049:000 | DONE ins | na 16 16 | 006363 | d0 ed       |                 bne 006352           
1050:000 | DONE ins | na 16 16 | 006365 | 80 e5       |                 bra 00634c           
1051:000 | DONE wsp | na 16 16 |        |             |
1052:000 | DONE lbl | na 16 16 | 006367 |             | dump_done                            
1053:000 | DONE ins | na 16 16 | 006367 | 20 50 62    |                 jsr 006250           
1054:000 | DONE wsp | na 16 16 |        |             |
1055:000 | DONE cmt | na 16 16 |        |             |                 ; drop everything and return
1056:000 | DONE cmt | na 16 16 |        |             |                 ; TODO replace by call of 2DROP
1057:000 | DONE ins | na 16 16 | 00636a | b4 02       |                 ldy.dx 02            
1058:000 | DONE ins | na 16 16 | 00636c | e8          |                 inx                  
1059:000 | DONE ins | na 16 16 | 00636d | e8          |                 inx                  
1060:000 | DONE ins | na 16 16 | 00636e | e8          |                 inx                  
1061:000 | DONE ins | na 16 16 | 00636f | e8          |                 inx                  
1062:000 | DONE wsp | na 16 16 |        |             |
1063:000 | DONE lbl | na 16 16 | 006370 |             | z_dump                               
1063:001 | DONE ins | na 16 16 | 006370 | 60          |                 rts                  
1064:000 | DONE wsp | na 16 16 |        |             |
1065:000 | DONE wsp | na 16 16 |        |             |
1066:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1067:000 | DONE cmt | na 16 16 |        |             | ; DUP  ( n -- n n ) 4 bytes / 9 cycles
1068:000 | DONE cmt | na 16 16 |        |             | ; Duplicate first entry on Data Stack
1069:000 | DONE wsp | na 16 16 |        |             |
1070:000 | DONE lbl | na 16 16 | 006371 |             | xt_dup                               
1071:000 | DONE dir | na 16 16 |        |             |         .!xy16                       
1072:000 | DONE ins | na 16 16 | 006371 | ca          |                 dex                  
1073:000 | DONE ins | na 16 16 | 006372 | ca          |                 dex                  
1074:000 | DONE ins | na 16 16 | 006373 | 94 00       |                 sty.dx 00            
1075:000 | DONE wsp | na 16 16 |        |             |
1076:000 | DONE lbl | na 16 16 | 006375 |             | z_dup                                
1076:001 | DONE ins | na 16 16 | 006375 | 60          |                 rts                  
1077:000 | DONE wsp | na 16 16 |        |             |
1078:000 | DONE wsp | na 16 16 |        |             |
1079:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1080:000 | DONE cmt | na 16 16 |        |             | ; EVALUATE ( addr u -- ) X bytes / X cycles
1081:000 | DONE cmt | na 16 16 |        |             | ; Execute string. Set SOURCE-ID to -1, make addr u the input source,
1082:000 | DONE cmt | na 16 16 |        |             | ; set >IN to zero. After processing the line, revert to old input source.
1083:000 | DONE lbl | na 16 16 | 006376 |             | xt_evaluate                          
1084:000 | DONE cmt | na 16 16 |        |             |                 ; We follow pforth's procedure of pushing SOURCE, SOURCE-ID, and
1085:000 | DONE cmt | na 16 16 |        |             |                 ; >IN to the Return Stack
1086:000 | DONE ins | na 16 16 | 006376 | a5 12       |                 lda.d 000212         ; >IN
1087:000 | DONE ins | na 16 16 | 006378 | 48          |                 pha                  
1088:000 | DONE ins | na 16 16 | 006379 | a5 0a       |                 lda.d 00020a         ; Input Source (SOURCE-ID)
1089:000 | DONE ins | na 16 16 | 00637b | 48          |                 pha                  
1090:000 | DONE ins | na 16 16 | 00637c | a5 0c       |                 lda.d 00020c         
1091:000 | DONE ins | na 16 16 | 00637e | 48          |                 pha                  
1092:000 | DONE ins | na 16 16 | 00637f | a5 0e       |                 lda.d 00020e         
1093:000 | DONE ins | na 16 16 | 006381 | 48          |                 pha                  
1094:000 | DONE wsp | na 16 16 |        |             |
1095:000 | DONE cmt | na 16 16 |        |             |                 ; set SOURCE-ID to -1
1096:000 | DONE ins | na 16 16 | 006382 | a9 ff ff    |                 lda.# 0ffff          
1097:000 | DONE ins | na 16 16 | 006385 | 85 0a       |                 sta.d 00020a         
1098:000 | DONE wsp | na 16 16 |        |             |
1099:000 | DONE cmt | na 16 16 |        |             |                 ; set >IN to zero
1100:000 | DONE ins | na 16 16 | 006387 | 64 12       |                 stz.d 000212         
1101:000 | DONE wsp | na 16 16 |        |             |
1102:000 | DONE cmt | na 16 16 |        |             |                 ; move TOS and NOS to input buffers
1103:000 | DONE ins | na 16 16 | 006389 | 84 0e       |                 sty.d 00020e         
1104:000 | DONE ins | na 16 16 | 00638b | b5 00       |                 lda.dx 00            
1105:000 | DONE ins | na 16 16 | 00638d | 85 0c       |                 sta.d 00020c         
1106:000 | DONE wsp | na 16 16 |        |             |
1107:000 | DONE cmt | na 16 16 |        |             |                 ; dump address string from stack
1108:000 | DONE ins | na 16 16 | 00638f | b4 02       |                 ldy.dx 02            
1109:000 | DONE ins | na 16 16 | 006391 | e8          |                 inx                  
1110:000 | DONE ins | na 16 16 | 006392 | e8          |                 inx                  
1111:000 | DONE ins | na 16 16 | 006393 | e8          |                 inx                  
1112:000 | DONE ins | na 16 16 | 006394 | e8          |                 inx                  
1113:000 | DONE wsp | na 16 16 |        |             |
1114:000 | DONE ins | na 16 16 | 006395 | 20 b8 68    |                 jsr 0068b8           
1115:000 | DONE wsp | na 16 16 |        |             |
1116:000 | DONE cmt | na 16 16 |        |             |                 ; restore state from before evaluate
1117:000 | DONE ins | na 16 16 | 006398 | 68          |                 pla                  
1118:000 | DONE ins | na 16 16 | 006399 | 85 0e       |                 sta.d 00020e         
1119:000 | DONE ins | na 16 16 | 00639b | 68          |                 pla                  
1120:000 | DONE ins | na 16 16 | 00639c | 85 0c       |                 sta.d 00020c         
1121:000 | DONE ins | na 16 16 | 00639e | 68          |                 pla                  
1122:000 | DONE ins | na 16 16 | 00639f | 85 0a       |                 sta.d 00020a         
1123:000 | DONE ins | na 16 16 | 0063a1 | 68          |                 pla                  
1124:000 | DONE ins | na 16 16 | 0063a2 | 85 12       |                 sta.d 000212         
1125:000 | DONE wsp | na 16 16 |        |             |
1126:000 | DONE lbl | na 16 16 | 0063a4 |             | z_evaluate                           
1126:001 | DONE ins | na 16 16 | 0063a4 | 60          |                 rts                  
1127:000 | DONE wsp | na 16 16 |        |             |
1128:000 | DONE wsp | na 16 16 |        |             |
1129:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1130:000 | DONE cmt | na 16 16 |        |             | ; EXECUTE ( xt -- ) X bytes / X cycles
1131:000 | DONE cmt | na 16 16 |        |             | ; Run a word with help of its xt on the TOS
1132:000 | DONE wsp | na 16 16 |        |             |
1133:000 | DONE cmt | na 16 16 |        |             | ; Reserve three bytes for the jump - three in case we want to expand to the full
1134:000 | DONE cmt | na 16 16 |        |             | ; range
1135:000 | DONE cmt | na 16 16 |        |             | ; TODO move this to someplace that is assured to be RAM, not possibly ROM
1136:000 | DONE lbl | na 16 16 | 0063a5 |             | execute_ip                           
1136:001 | DONE dir | na 16 16 | 0063a5 | (3 bytes)   |         .byte 00, 00, 00             
1136:001 | DONE dir | na 16 16 |        |             |                 00 00 00                 --  . . .
1137:000 | DONE wsp | na 16 16 |        |             |
1138:000 | DONE lbl | na 16 16 | 0063a8 |             | xt_execute                           
1139:000 | DONE dir | na 16 16 |        |             |         .!a16                        
1140:000 | DONE dir | na 16 16 |        |             |         .!xy16                       
1141:000 | DONE cmt | na 16 16 |        |             | 		; Store the xt for later use and then drop it off the stack
1142:000 | DONE ins | na 16 16 | 0063a8 | 8c a5 63    |                 sty 0063a5           
1143:000 | DONE ins | na 16 16 | 0063ab | b4 00       |                 ldy.dx 00            
1144:000 | DONE ins | na 16 16 | 0063ad | e8          |                 inx                  
1145:000 | DONE ins | na 16 16 | 0063ae | e8          |                 inx                  
1146:000 | DONE wsp | na 16 16 |        |             |
1147:000 | DONE cmt | na 16 16 |        |             |                 ; Only JMP has the addressing mode we need. All our Forth
1148:000 | DONE cmt | na 16 16 |        |             |                 ; words end with a RTS instruction, so they will take us back to
1149:000 | DONE cmt | na 16 16 |        |             |                 ; the original caller of this routine without us having to muck
1150:000 | DONE cmt | na 16 16 |        |             |                 ; about with the Return Stack.
1151:000 | DONE ins | na 16 16 | 0063af | 6c a5 63    |                 jmp.i 0063a5         ; JMP (EXECUTE_IP)
1152:000 | DONE wsp | na 16 16 |        |             |
1153:000 | DONE lbl | na 16 16 | 0063b2 |             | z_execute                            
1153:001 | DONE ins | na 16 16 | 0063b2 | ea          |                 nop                  ; Never reached, see if we need the NOP
1154:000 | DONE wsp | na 16 16 |        |             |
1155:000 | DONE wsp | na 16 16 |        |             |
1156:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1157:000 | DONE cmt | na 16 16 |        |             | ; FALSE ( -- f ) 7 bytes / 12 cycles
1158:000 | DONE cmt | na 16 16 |        |             | ; Pushes value $0000 for Forth true on Data Stack. This is the same code as for
1159:000 | DONE cmt | na 16 16 |        |             | ; ZERO, see there. Dictionary entry should have xt_zero/z_zero instead of
1160:000 | DONE cmt | na 16 16 |        |             | ; xt_false/z_false
1161:000 | DONE wsp | na 16 16 |        |             |
1162:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1163:000 | DONE cmt | na 16 16 |        |             | ; FIND-NAME ( addr u -- nt | 0 ) 91 bytes / X cycles
1164:000 | DONE cmt | na 16 16 |        |             | ; Given a string, find the Name Token (nt) of a word or return zero if the word
1165:000 | DONE cmt | na 16 16 |        |             | ; is not in the dictionary. We use this instead of ancient FIND to look up words
1166:000 | DONE cmt | na 16 16 |        |             | ; in the Dictionary passed by PARSE-NAME. Note this returns the nt, not the xt
1167:000 | DONE cmt | na 16 16 |        |             | ; of a word like FIND. To convert, use NAME>INT. This is a Gforth word. See
1168:000 | DONE cmt | na 16 16 |        |             | ; https://www.complang.tuwien.ac.at/forth/gforth/Docs-html/Name-token.html
1169:000 | DONE cmt | na 16 16 |        |             | ; FIND calls this word for the hard word
1170:000 | DONE lbl | na 16 16 | 0063b3 |             | xt_find-name                         
1171:000 | DONE cmt | na 16 16 |        |             |                 ; We abort when we get an empty string, that is, one with
1172:000 | DONE cmt | na 16 16 |        |             |                 ; a length of zero TOS. We could test for this, but it will
1173:000 | DONE cmt | na 16 16 |        |             |                 ; happen so rarely that the speed penalty is higher if we run
1174:000 | DONE cmt | na 16 16 |        |             |                 ; the test for every single call. Looking for an empty string
1175:000 | DONE cmt | na 16 16 |        |             |                 ; does force us to check the whole dictionary, though. The test
1176:000 | DONE cmt | na 16 16 |        |             |                 ; would be 3 bytes and 4 to 6 cycles longer:
1177:000 | DONE cmt | na 16 16 |        |             |                 ;       tya                     ; force flag check
1178:000 | DONE cmt | na 16 16 |        |             |                 ;       beq find-name_failure
1179:000 | DONE dir | na 16 16 |        |             |         .!a16                        
1180:000 | DONE dir | na 16 16 |        |             |         .!xy16                       
1181:000 | DONE cmt | na 16 16 |        |             |                 ; set up loop for the first time
1182:000 | DONE ins | na 16 16 | 0063b3 | 84 06       |                 sty.d 000206         ; length of mystery string in tmptos, Y now free
1183:000 | DONE wsp | na 16 16 |        |             |
1184:000 | DONE ins | na 16 16 | 0063b5 | a4 02       |                 ldy.d 000202         
1185:000 | DONE ins | na 16 16 | 0063b7 | 84 16       |                 sty.d 000216         ; nt of first Dictionary word
1186:000 | DONE wsp | na 16 16 |        |             |
1187:000 | DONE ins | na 16 16 | 0063b9 | b4 00       |                 ldy.dx 00            
1188:000 | DONE ins | na 16 16 | 0063bb | 84 18       |                 sty.d 000218         ; address of mystery string, was NOS
1189:000 | DONE wsp | na 16 16 |        |             |
1190:000 | DONE lbl | na 16 16 | 0063bd |             | find-name_loop                       
1191:000 | DONE cmt | na 16 16 |        |             |                 ; First quick test: Are strings the same length?
1192:000 | DONE ins | na 16 16 | 0063bd | b2 16       |                 lda.di 000216        ; LSB in first header word is length
1193:000 | DONE ins | na 16 16 | 0063bf | 29 ff 00    |                 and.# 00ff           
1194:000 | DONE ins | na 16 16 | 0063c2 | c5 06       |                 cmp.d 000206         ; we test LSB
1195:000 | DONE cmt | na 16 16 |        |             |                 ; Most of the time, it will not be the same, so we save one
1196:000 | DONE cmt | na 16 16 |        |             |                 ; cycle pro loop if we only take the branch when they are the
1197:000 | DONE cmt | na 16 16 |        |             |                 ; same
1198:000 | DONE ins | na 16 16 | 0063c4 | f0 0c       |                 beq 0063d2           
1199:000 | DONE wsp | na 16 16 |        |             |
1200:000 | DONE lbl | na 16 16 | 0063c6 |             | find-name_next_entry                 
1201:000 | DONE cmt | na 16 16 |        |             |                 ; next header address is two bytes down
1202:000 | DONE ins | na 16 16 | 0063c6 | e6 16       |                 inc.d 000216         
1203:000 | DONE ins | na 16 16 | 0063c8 | e6 16       |                 inc.d 000216         
1204:000 | DONE ins | na 16 16 | 0063ca | b2 16       |                 lda.di 000216        ; LDA (TMP1)
1205:000 | DONE wsp | na 16 16 |        |             |
1206:000 | DONE cmt | na 16 16 |        |             |                 ; a zero entry marks the end of the Dictionary
1207:000 | DONE ins | na 16 16 | 0063cc | f0 36       |                 beq 006404           
1208:000 | DONE wsp | na 16 16 |        |             |
1209:000 | DONE ins | na 16 16 | 0063ce | 85 16       |                 sta.d 000216         ; new header
1210:000 | DONE ins | na 16 16 | 0063d0 | 80 eb       |                 bra 0063bd           
1211:000 | DONE wsp | na 16 16 |        |             |
1212:000 | DONE lbl | na 16 16 | 0063d2 |             | find-name_chars                      
1213:000 | DONE cmt | na 16 16 |        |             |                 ; Yes, same length, so we compare characters
1214:000 | DONE wsp | na 16 16 |        |             |
1215:000 | DONE cmt | na 16 16 |        |             |                 ; Switch A to 8 bit for this
1216:000 | DONE ins | na 16 16 | 0063d2 | e2 20       |                 sep 20               
1216:001 | DONE ctl | na  8 16 |        |             |         .!a8
1217:000 | DONE cmt | na  8 16 |        |             |                 ; Second quick test: Check first char, which is 8 bytes into the
1218:000 | DONE cmt | na  8 16 |        |             |                 ; header
1219:000 | DONE ins | na  8 16 | 0063d4 | a0 08 00    |                 ldy.# 0008           
1220:000 | DONE ins | na  8 16 | 0063d7 | b1 16       |                 lda.diy 000216       ; LDA (TMP1),Y - first char of entry
1221:000 | DONE ins | na  8 16 | 0063d9 | d2 18       |                 cmp.di 000218        ; CMP (TMP2) - first char of mystery string
1222:000 | DONE ins | na  8 16 | 0063db | f0 04       |                 beq 0063e1           
1223:000 | DONE wsp | na  8 16 |        |             |
1224:000 | DONE lbl | na  8 16 | 0063dd |             | find-name_char_nomatcnt_8            
1225:000 | DONE cmt | na  8 16 |        |             |                 ; First char is not the same, next entry
1226:000 | DONE ins | na  8 16 | 0063dd | c2 20       |                 rep 20               
1226:001 | DONE ctl | na 16 16 |        |             |         .!a16
1227:000 | DONE ins | na 16 16 | 0063df | 80 e5       |                 bra 0063c6           
1228:000 | DONE wsp | na 16 16 |        |             |
1229:000 | DONE lbl | na 16 16 | 0063e1 |             | find-name_all_chars                  
1230:000 | DONE dir | na  8 16 |        |             |         .!a8                         
1231:000 | DONE cmt | na  8 16 |        |             |                 ; String length is the same, and the first character is the
1232:000 | DONE cmt | na  8 16 |        |             |                 ; same. If the word is only one character long, we're done
1233:000 | DONE ins | na  8 16 | 0063e1 | a4 06       |                 ldy.d 000206         
1234:000 | DONE ins | na  8 16 | 0063e3 | 88          |                 dey                  ; faster and shorter than CPY.# 01
1235:000 | DONE ins | na  8 16 | 0063e4 | f0 18       |                 beq 0063fe           
1236:000 | DONE wsp | na  8 16 |        |             |
1237:000 | DONE cmt | na  8 16 |        |             |                 ; No such luck: The strings are the same length and the first
1238:000 | DONE cmt | na  8 16 |        |             |                 ; char is the same, but the word is more than one char long. So
1239:000 | DONE cmt | na  8 16 |        |             |                 ; we suck it up and compare every single character. We go from
1240:000 | DONE cmt | na  8 16 |        |             |                 ; back to front, because words like CELLS and CELL+ would take
1241:000 | DONE cmt | na  8 16 |        |             |                 ; longer otherwise. We can also shorten the loop by one because
1242:000 | DONE cmt | na  8 16 |        |             |                 ; we've already compared the first char.
1243:000 | DONE wsp | na  8 16 |        |             |
1244:000 | DONE cmt | na  8 16 |        |             |                 ; Even worse, we have to add 8 bytes to address of Dictionary
1245:000 | DONE cmt | na  8 16 |        |             |                 ; string to allow testing with one loop. We need this like
1246:000 | DONE cmt | na  8 16 |        |             |                 ; a hole in the head because we just switched A to 8 bit.
1247:000 | DONE cmt | na  8 16 |        |             |                 ; However, staying with an 8-bit A is even slower.
1248:000 | DONE ins | na  8 16 | 0063e6 | c2 20       |                 rep 20               
1248:001 | DONE ctl | na 16 16 |        |             |         .!a16
1249:000 | DONE ins | na 16 16 | 0063e8 | a5 16       |                 lda.d 000216         ; address of Dictionary string
1250:000 | DONE ins | na 16 16 | 0063ea | 18          |                 clc                  
1251:000 | DONE ins | na 16 16 | 0063eb | 69 08 00    |                 adc.# 0008           
1252:000 | DONE ins | na 16 16 | 0063ee | 85 1a       |                 sta.d 00021a         
1253:000 | DONE ins | na 16 16 | 0063f0 | e2 20       |                 sep 20               
1253:001 | DONE ctl | na  8 16 |        |             |         .!a8
1254:000 | DONE ins | na  8 16 | 0063f2 | a4 06       |                 ldy.d 000206         ; get length of strings as loop index
1255:000 | DONE ins | na  8 16 | 0063f4 | 88          |                 dey                  ; first index is length minus 1
1256:000 | DONE wsp | na  8 16 |        |             |
1257:000 | DONE lbl | na  8 16 | 0063f5 |             | @                                    
1258:000 | DONE ins | na  8 16 | 0063f5 | b1 18       |                 lda.diy 000218       ; LDA (TMP2),Y - last char of mystery string
1259:000 | DONE ins | na  8 16 | 0063f7 | d1 1a       |                 cmp.diy 00021a       ; CMP (TMP1),Y - last char of DP string
1260:000 | DONE ins | na  8 16 | 0063f9 | d0 e2       |                 bne 0063dd           
1261:000 | DONE ins | na  8 16 | 0063fb | 88          |                 dey                  ; start of string (Y=0) was already tested
1262:000 | DONE ins | na  8 16 | 0063fc | d0 f7       |                 bne 0063f5           
1263:000 | DONE wsp | na  8 16 |        |             |
1264:000 | DONE lbl | na  8 16 | 0063fe |             | find-name_success                    
1265:000 | DONE cmt | na  8 16 |        |             |                 ; If we reach here, the strings are the same and we have a match
1266:000 | DONE cmt | na  8 16 |        |             |                 ; We get here with an 8 bit A
1267:000 | DONE ins | na  8 16 | 0063fe | c2 20       |                 rep 20               
1267:001 | DONE ctl | na 16 16 |        |             |         .!a16
1268:000 | DONE ins | na 16 16 | 006400 | a4 16       |                 ldy.d 000216         ; get the correct DP
1269:000 | DONE ins | na 16 16 | 006402 | 80 03       |                 bra 006407           
1270:000 | DONE wsp | na 16 16 |        |             |
1271:000 | DONE wsp | na 16 16 |        |             |
1272:000 | DONE lbl | na 16 16 | 006404 |             | find-name_failure_16                 
1273:000 | DONE cmt | na 16 16 |        |             |                 ; Word not found in Dictionary, return zero. Assumes A is 16
1274:000 | DONE cmt | na 16 16 |        |             |                 ; bit
1275:000 | DONE ins | na 16 16 | 006404 | a0 00 00    |                 ldy.# 0000           ; fall thru
1276:000 | DONE wsp | na 16 16 |        |             |
1277:000 | DONE lbl | na 16 16 | 006407 |             | find-name_done                       
1278:000 | DONE ins | na 16 16 | 006407 | e8          |                 inx                  ; drop old address (NIP)
1279:000 | DONE ins | na 16 16 | 006408 | e8          |                 inx                  
1280:000 | DONE wsp | na 16 16 |        |             |
1281:000 | DONE lbl | na 16 16 | 006409 |             | z_find-name                          
1281:001 | DONE ins | na 16 16 | 006409 | 60          |                 rts                  
1282:000 | DONE wsp | na 16 16 |        |             |
1283:000 | DONE wsp | na 16 16 |        |             |
1284:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1285:000 | DONE cmt | na 16 16 |        |             | ; HERE ( -- u ) 6 bytes / 13 cycles
1286:000 | DONE cmt | na 16 16 |        |             | ; Push Compiler Pointer address on the Data Stack
1287:000 | DONE lbl | na 16 16 | 00640a |             | xt_here                              
1288:000 | DONE dir | na 16 16 |        |             |         .!a16                        ; paranoid
1289:000 | DONE dir | na 16 16 |        |             |         .!xy16                       
1290:000 | DONE ins | na 16 16 | 00640a | ca          |                 dex                  
1291:000 | DONE ins | na 16 16 | 00640b | ca          |                 dex                  
1292:000 | DONE ins | na 16 16 | 00640c | 94 00       |                 sty.dx 00            
1293:000 | DONE wsp | na 16 16 |        |             |
1294:000 | DONE ins | na 16 16 | 00640e | a4 00       |                 ldy.d 000200         
1295:000 | DONE wsp | na 16 16 |        |             |
1296:000 | DONE lbl | na 16 16 | 006410 |             | z_here                               
1296:001 | DONE ins | na 16 16 | 006410 | 60          |                 rts                  
1297:000 | DONE wsp | na 16 16 |        |             |
1298:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1299:000 | DONE cmt | na 16 16 |        |             | ; NAME>INT ( nt -- xt ) 4 bytes / 8 cycles
1300:000 | DONE cmt | na 16 16 |        |             | ; Given the Name Token (nt) of a word, return its Execute Token (xt)
1301:000 | DONE lbl | na 16 16 | 006411 |             | xt_name-int                          
1302:000 | DONE dir | na 16 16 |        |             |         .!a16                        
1303:000 | DONE dir | na 16 16 |        |             |         .!xy16                       
1304:000 | DONE cmt | na 16 16 |        |             | 		; The xt of a word beginns four bytes down from its nt
1305:000 | DONE ins | na 16 16 | 006411 | c8          |                 iny                  
1306:000 | DONE ins | na 16 16 | 006412 | c8          |                 iny                  
1307:000 | DONE ins | na 16 16 | 006413 | c8          |                 iny                  
1308:000 | DONE ins | na 16 16 | 006414 | c8          |                 iny                  
1309:000 | DONE ins | na 16 16 | 006415 | b9 00 00    |                 lda.y 0000           
1310:000 | DONE ins | na 16 16 | 006418 | a8          |                 tay                  
1311:000 | DONE wsp | na 16 16 |        |             |
1312:000 | DONE lbl | na 16 16 | 006419 |             | z_name-int                           
1312:001 | DONE ins | na 16 16 | 006419 | 60          |                 rts                  
1313:000 | DONE wsp | na 16 16 |        |             |
1314:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1315:000 | DONE cmt | na 16 16 |        |             | ; NAME>STRING ( nt -- addr u ) 16 bytes / X cycles
1316:000 | DONE cmt | na 16 16 |        |             | ; Given a name token (nt) of a word, return its string. This is a Gforth word
1317:000 | DONE cmt | na 16 16 |        |             | ; that works with the Dictionary header entries. It is not checked if nt is
1318:000 | DONE cmt | na 16 16 |        |             | ; a valid name token.
1319:000 | DONE lbl | na 16 16 | 00641a |             | xt_name-string                       
1320:000 | DONE dir | na 16 16 |        |             |         .!a16                        
1321:000 | DONE dir | na 16 16 |        |             |         .!xy16                       
1322:000 | DONE ins | na 16 16 | 00641a | ca          |                 dex                  ; move NOS down one
1323:000 | DONE ins | na 16 16 | 00641b | ca          |                 dex                  
1324:000 | DONE wsp | na 16 16 |        |             |
1325:000 | DONE cmt | na 16 16 |        |             |                 ; the name string of a word begins 8 bytes down from its nt,
1326:000 | DONE cmt | na 16 16 |        |             |                 ; which we have as TOS
1327:000 | DONE ins | na 16 16 | 00641c | 98          |                 tya                  
1328:000 | DONE ins | na 16 16 | 00641d | 18          |                 clc                  
1329:000 | DONE ins | na 16 16 | 00641e | 69 08 00    |                 adc.# 0008           
1330:000 | DONE ins | na 16 16 | 006421 | 95 00       |                 sta.dx 00            ; NOS
1331:000 | DONE wsp | na 16 16 |        |             |
1332:000 | DONE cmt | na 16 16 |        |             |                 ; the length of the name string is in the LSB of the first word
1333:000 | DONE cmt | na 16 16 |        |             |                 ; of the dictionary entry header (the name token)
1334:000 | DONE ins | na 16 16 | 006423 | b9 00 00    |                 lda.y 0000           ; LDA $0000,Y
1335:000 | DONE ins | na 16 16 | 006426 | 29 ff 00    |                 and.# 00ff           ; mask all but length byte
1336:000 | DONE ins | na 16 16 | 006429 | a8          |                 tay                  
1337:000 | DONE wsp | na 16 16 |        |             |
1338:000 | DONE lbl | na 16 16 | 00642a |             | z_name-string                        
1338:001 | DONE ins | na 16 16 | 00642a | 60          |                 rts                  
1339:000 | DONE wsp | na 16 16 |        |             |
1340:000 | DONE wsp | na 16 16 |        |             |
1341:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1342:000 | DONE cmt | na 16 16 |        |             | ; NIP ( n m -- m ) 2 bytes / 4 cycles
1343:000 | DONE cmt | na 16 16 |        |             | ; Delete entry that is NOS
1344:000 | DONE lbl | na 16 16 | 00642b |             | xt_nip                               
1345:000 | DONE dir | na 16 16 |        |             |         .!xy16                       
1346:000 | DONE ins | na 16 16 | 00642b | e8          |                 inx                  
1347:000 | DONE ins | na 16 16 | 00642c | e8          |                 inx                  
1348:000 | DONE lbl | na 16 16 | 00642d |             | z_nip                                
1348:001 | DONE ins | na 16 16 | 00642d | 60          |                 rts                  
1349:000 | DONE wsp | na 16 16 |        |             |
1350:000 | DONE wsp | na 16 16 |        |             |
1351:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1352:000 | DONE cmt | na 16 16 |        |             | ; OVER ( n m -- n m n )  6 bytes / 14 cycles
1353:000 | DONE cmt | na 16 16 |        |             | ; Push NOS on Data Stack
1354:000 | DONE lbl | na 16 16 | 00642e |             | xt_over                              
1355:000 | DONE ins | na 16 16 | 00642e | ca          |                 dex                  
1356:000 | DONE ins | na 16 16 | 00642f | ca          |                 dex                  
1357:000 | DONE ins | na 16 16 | 006430 | 94 00       |                 sty.dx 00            
1358:000 | DONE ins | na 16 16 | 006432 | b4 02       |                 ldy.dx 02            
1359:000 | DONE wsp | na 16 16 |        |             |
1360:000 | DONE lbl | na 16 16 | 006434 |             | z_over                               
1360:001 | DONE ins | na 16 16 | 006434 | 60          |                 rts                  
1361:000 | DONE wsp | na 16 16 |        |             |
1362:000 | DONE wsp | na 16 16 |        |             |
1363:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1364:000 | DONE cmt | na 16 16 |        |             | ; PAD ( -- addr ) 11 bytes / X cycles
1365:000 | DONE cmt | na 16 16 |        |             | ; Return address to a temporary area in free memory for user. Must be at least
1366:000 | DONE cmt | na 16 16 |        |             | ; 84 bytes in size (says ANSI). It is located relative to the compile area
1367:000 | DONE cmt | na 16 16 |        |             | ; pointer (CP) and therefore varies in position. This area is reserved for the
1368:000 | DONE cmt | na 16 16 |        |             | ; user and not used by the system
1369:000 | DONE lbl | na 16 16 | 006435 |             | xt_pad                               
1370:000 | DONE dir | na 16 16 |        |             |         .!a16                        
1371:000 | DONE ins | na 16 16 | 006435 | ca          |                 dex                  
1372:000 | DONE ins | na 16 16 | 006436 | ca          |                 dex                  
1373:000 | DONE ins | na 16 16 | 006437 | 94 00       |                 sty.dx 00            
1374:000 | DONE wsp | na 16 16 |        |             |
1375:000 | DONE ins | na 16 16 | 006439 | a5 00       |                 lda.d 000200         
1376:000 | DONE ins | na 16 16 | 00643b | 18          |                 clc                  
1377:000 | DONE ins | na 16 16 | 00643c | 69 7f 00    |                 adc.# 00007f         
1378:000 | DONE ins | na 16 16 | 00643f | a8          |                 tay                  
1379:000 | DONE wsp | na 16 16 |        |             |
1380:000 | DONE lbl | na 16 16 | 006440 |             | z_pad                                
1380:001 | DONE ins | na 16 16 | 006440 | 60          |                 rts                  
1381:000 | DONE wsp | na 16 16 |        |             |
1382:000 | DONE wsp | na 16 16 |        |             |
1383:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1384:000 | DONE cmt | na 16 16 |        |             | ; PAGE ( -- ) X bytes / X cycles
1385:000 | DONE cmt | na 16 16 |        |             | ; Clear the screen on vt-100 terminals by sending the code "ESC[2J". This is
1386:000 | DONE cmt | na 16 16 |        |             | ; only useful in interactive scenarios so we don't worry about speed
1387:000 | DONE cmt | na 16 16 |        |             | ; TODO rewrite with EMIT
1388:000 | DONE lbl | na 16 16 | 006441 |             | xt_page                              
1389:000 | DONE ins | na 16 16 | 006441 | a9 1f 6b    |                 lda.# 006b1f         
1390:000 | DONE ins | na 16 16 | 006444 | 20 e8 68    |                 jsr 0068e8           
1391:000 | DONE wsp | na 16 16 |        |             |
1392:000 | DONE cmt | na 16 16 |        |             |                 ; In theory, this should have moved the cursor to the top left
1393:000 | DONE cmt | na 16 16 |        |             |                 ; corner ("home"), but this doesn't seem to work in practice.
1394:000 | DONE cmt | na 16 16 |        |             |                 ; So we send "ESC[H" as well.
1395:000 | DONE ins | na 16 16 | 006447 | a9 24 6b    |                 lda.# 006b24         
1396:000 | DONE ins | na 16 16 | 00644a | 20 e8 68    |                 jsr 0068e8           
1397:000 | DONE wsp | na 16 16 |        |             |
1398:000 | DONE lbl | na 16 16 | 00644d |             | z_page                               
1398:001 | DONE ins | na 16 16 | 00644d | 60          |                 rts                  
1399:000 | DONE wsp | na 16 16 |        |             |
1400:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1401:000 | DONE cmt | na 16 16 |        |             | ; PARSE-NAME ( "name" -- addr u ) 41+ bytes / X cycles
1402:000 | DONE cmt | na 16 16 |        |             | ; Find next word in input string, skipping leading spaces. This is a special
1403:000 | DONE cmt | na 16 16 |        |             | ; form of PARSE and drops through to that word. See PARSE for more detail. We
1404:000 | DONE cmt | na 16 16 |        |             | ; use this word internally for the interpreter because it is a lot easier to use
1405:000 | DONE cmt | na 16 16 |        |             | ; http://forth-standard.org/standard/core/PARSE-NAME has a Forth implementation
1406:000 | DONE lbl | na 16 16 | 00644e |             | xt_parse-name                        
1407:000 | DONE dir | na 16 16 |        |             |         .!a16                        
1408:000 | DONE dir | na 16 16 |        |             |         .!xy16                       
1409:000 | DONE cmt | na 16 16 |        |             |                 ; skip leading spaces, changing >IN, then place SPACE
1410:000 | DONE cmt | na 16 16 |        |             |                 ; character on data stack for PARSE
1411:000 | DONE ins | na 16 16 | 00644e | 5a          |                 phy                  ; save TOS for later use
1412:000 | DONE ins | na 16 16 | 00644f | a4 12       |                 ldy.d 000212         ; >IN
1413:000 | DONE ins | na 16 16 | 006451 | e2 20       |                 sep 20               
1413:001 | DONE ctl | na  8 16 |        |             |         .!a8
1414:000 | DONE lbl | na  8 16 | 006453 |             | parse-name_loop                      
1415:000 | DONE ins | na  8 16 | 006453 | c4 0e       |                 cpy.d 00020e         ; end of line?
1416:000 | DONE ins | na  8 16 | 006455 | f0 09       |                 beq 006460           
1417:000 | DONE wsp | na  8 16 |        |             |
1418:000 | DONE ins | na  8 16 | 006457 | b1 0c       |                 lda.diy 00020c       ; LDA (CIB),Y
1419:000 | DONE ins | na  8 16 | 006459 | c9 20       |                 cmp.# AscSP          
1420:000 | DONE ins | na  8 16 | 00645b | d0 17       |                 bne 006474           
1421:000 | DONE ins | na  8 16 | 00645d | c8          |                 iny                  
1422:000 | DONE ins | na  8 16 | 00645e | 80 f3       |                 bra 006453           
1423:000 | DONE wsp | na  8 16 |        |             |
1424:000 | DONE lbl | na  8 16 | 006460 |             | parse-name_empty_line                
1425:000 | DONE ins | na  8 16 | 006460 | c2 20       |                 rep 20               
1425:001 | DONE ctl | na 16 16 |        |             |         .!a16
1426:000 | DONE cmt | na 16 16 |        |             |                 ; The Gforth documentation does not say what address is returned
1427:000 | DONE cmt | na 16 16 |        |             |                 ; if a string with only spaces is returned. Experiments with
1428:000 | DONE cmt | na 16 16 |        |             |                 ; the word  : PNT ( "name" -- ) PARSE-NAME SWAP U. U. TYPE ;
1429:000 | DONE cmt | na 16 16 |        |             |                 ; show that it returns the address of the last space in the
1430:000 | DONE cmt | na 16 16 |        |             |                 ; input, which is cib+ciblen. So we do that as well.
1431:000 | DONE ins | na 16 16 | 006462 | ca          |                 dex                  
1432:000 | DONE ins | na 16 16 | 006463 | ca          |                 dex                  
1433:000 | DONE ins | na 16 16 | 006464 | ca          |                 dex                  
1434:000 | DONE ins | na 16 16 | 006465 | ca          |                 dex                  
1435:000 | DONE wsp | na 16 16 |        |             |
1436:000 | DONE ins | na 16 16 | 006466 | 7a          |                 ply                  ; restore old TOS as 3OS
1437:000 | DONE ins | na 16 16 | 006467 | 94 02       |                 sty.dx 02            
1438:000 | DONE wsp | na 16 16 |        |             |
1439:000 | DONE ins | na 16 16 | 006469 | a5 0c       |                 lda.d 00020c         
1440:000 | DONE ins | na 16 16 | 00646b | 18          |                 clc                  
1441:000 | DONE ins | na 16 16 | 00646c | 65 0e       |                 adc.d 00020e         
1442:000 | DONE ins | na 16 16 | 00646e | 95 00       |                 sta.dx 00            ; Address as NOS
1443:000 | DONE wsp | na 16 16 |        |             |
1444:000 | DONE ins | na 16 16 | 006470 | a0 00 00    |                 ldy.# 0000           ; TOS
1445:000 | DONE wsp | na 16 16 |        |             |
1446:000 | DONE ins | na 16 16 | 006473 | 60          |                 rts                  ; don't have to go through PARSE
1447:000 | DONE wsp | na 16 16 |        |             |
1448:000 | DONE lbl | na 16 16 | 006474 |             | parse-name_found                     
1449:000 | DONE dir | na 16 16 |        |             |         .!xy16                       
1450:000 | DONE ins | na 16 16 | 006474 | c2 20       |                 rep 20               
1450:001 | DONE ctl | na 16 16 |        |             |         .!a16
1451:000 | DONE ins | na 16 16 | 006476 | 84 12       |                 sty.d 000212         ; new >IN
1452:000 | DONE wsp | na 16 16 |        |             |
1453:000 | DONE ins | na 16 16 | 006478 | 7a          |                 ply                  ; recover TOS
1454:000 | DONE ins | na 16 16 | 006479 | ca          |                 dex                  
1455:000 | DONE ins | na 16 16 | 00647a | ca          |                 dex                  
1456:000 | DONE ins | na 16 16 | 00647b | 94 00       |                 sty.dx 00            
1457:000 | DONE wsp | na 16 16 |        |             |
1458:000 | DONE ins | na 16 16 | 00647d | a0 20 00    |                 ldy.# AscSP          ; put space on TOS for PARSE
1459:000 | DONE wsp | na 16 16 |        |             |
1460:000 | DONE cmt | na 16 16 |        |             |                 ; fall thru to PARSE
1461:000 | DONE wsp | na 16 16 |        |             |
1462:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1463:000 | DONE cmt | na 16 16 |        |             | ; PARSE ( c "name" -- addr u ) 45 bytes / X+ cycles
1464:000 | DONE cmt | na 16 16 |        |             | ; Find word in input string delimited by character given Do not skip leading
1465:000 | DONE cmt | na 16 16 |        |             | ; delimiters, this is an important difference to PARSE-NAME. PARSE and
1466:000 | DONE cmt | na 16 16 |        |             | ; PARSE-NAME replace WORD in modern systems. See the ANSI documentation at
1467:000 | DONE cmt | na 16 16 |        |             | ; http://www.forth200x.org/documents/html3/rationale.html#rat:core:PARSE
1468:000 | DONE cmt | na 16 16 |        |             | ; PARSE-NAME drops through to here
1469:000 | DONE cmt | na 16 16 |        |             | ;
1470:000 | DONE cmt | na 16 16 |        |             | ;    cib   cib+toin    cib+ciblen
1471:000 | DONE cmt | na 16 16 |        |             | ;     v       v             v
1472:000 | DONE cmt | na 16 16 |        |             | ;     |#####################|              Length of found string:
1473:000 | DONE cmt | na 16 16 |        |             | ;                                          ciblen - toin
1474:000 | DONE cmt | na 16 16 |        |             | ;     +------>|  toin (>IN)
1475:000 | DONE cmt | na 16 16 |        |             | ;     +-------------------->|  ciblen
1476:000 | DONE cmt | na 16 16 |        |             | ;
1477:000 | DONE cmt | na 16 16 |        |             | ; The input string is stored starting at the address in the Current Input Buffer
1478:000 | DONE cmt | na 16 16 |        |             | ; (CIB), the length of which is in CIBLEN. While searching for the delimiter,
1479:000 | DONE cmt | na 16 16 |        |             | ; TOIN (>IN) points to the where we currently are. Since PARSE does not skip
1480:000 | DONE cmt | na 16 16 |        |             | ; leading delimiters, we assume we are on a useful string.
1481:000 | DONE lbl | na 16 16 | 006480 |             | xt_parse                             
1482:000 | DONE dir | na 16 16 |        |             |         .!a16                        
1483:000 | DONE dir | na 16 16 |        |             |         .!xy16                       
1484:000 | DONE ins | na 16 16 | 006480 | 84 16       |                 sty.d 000216         ; save delimiter, char is LSB
1485:000 | DONE wsp | na 16 16 |        |             |
1486:000 | DONE cmt | na 16 16 |        |             |                 ; save beginning of new word (cib+toin) to NOS. Don't need to
1487:000 | DONE cmt | na 16 16 |        |             |                 ; worry about TOS because Y gets clobbered anyway before we
1488:000 | DONE cmt | na 16 16 |        |             |                 ; return
1489:000 | DONE ins | na 16 16 | 006482 | a5 12       |                 lda.d 000212         
1490:000 | DONE ins | na 16 16 | 006484 | 85 1a       |                 sta.d 00021a         ; save >IN for later length calculation
1491:000 | DONE ins | na 16 16 | 006486 | 18          |                 clc                  
1492:000 | DONE ins | na 16 16 | 006487 | 65 0c       |                 adc.d 00020c         
1493:000 | DONE wsp | na 16 16 |        |             |
1494:000 | DONE ins | na 16 16 | 006489 | ca          |                 dex                  ; save addr as NOS
1495:000 | DONE ins | na 16 16 | 00648a | ca          |                 dex                  
1496:000 | DONE ins | na 16 16 | 00648b | 95 00       |                 sta.dx 00            
1497:000 | DONE wsp | na 16 16 |        |             |
1498:000 | DONE ins | na 16 16 | 00648d | 64 18       |                 stz.d 000218         ; offset for EOL/char found adjustment of >IN
1499:000 | DONE wsp | na 16 16 |        |             |
1500:000 | DONE cmt | na 16 16 |        |             |                 ; prepare loop using Y as index
1501:000 | DONE ins | na 16 16 | 00648f | a4 12       |                 ldy.d 000212         
1502:000 | DONE ins | na 16 16 | 006491 | e2 20       |                 sep 20               
1502:001 | DONE ctl | na  8 16 |        |             |         .!a8
1503:000 | DONE wsp | na  8 16 |        |             |
1504:000 | DONE lbl | na  8 16 | 006493 |             | parse_loop                           
1505:000 | DONE ins | na  8 16 | 006493 | c4 0e       |                 cpy.d 00020e         ; check for EOL first
1506:000 | DONE ins | na  8 16 | 006495 | f0 0d       |                 beq 0064a4           
1507:000 | DONE wsp | na  8 16 |        |             |
1508:000 | DONE ins | na  8 16 | 006497 | b1 0c       |                 lda.diy 00020c       ; LDA (CIB),Y
1509:000 | DONE ins | na  8 16 | 006499 | c5 16       |                 cmp.d 000216         ; found delimiter?
1510:000 | DONE ins | na  8 16 | 00649b | f0 03       |                 beq 0064a0           
1511:000 | DONE ins | na  8 16 | 00649d | c8          |                 iny                  
1512:000 | DONE ins | na  8 16 | 00649e | 80 f3       |                 bra 006493           
1513:000 | DONE wsp | na  8 16 |        |             |
1514:000 | DONE lbl | na  8 16 | 0064a0 |             | parse_found_delimiter                
1515:000 | DONE cmt | na  8 16 |        |             |                 ; If we haven't reached the end of the line, but found
1516:000 | DONE cmt | na  8 16 |        |             |                 ; a delimiter, we want >IN to point to the next character after
1517:000 | DONE cmt | na  8 16 |        |             |                 ; the delimiter, not the delimiter itself. This is what the
1518:000 | DONE cmt | na  8 16 |        |             |                 ; offset is for
1519:000 | DONE ins | na  8 16 | 0064a0 | c2 20       |                 rep 20               
1519:001 | DONE ctl | na 16 16 |        |             |         .!a16
1520:000 | DONE ins | na 16 16 | 0064a2 | e6 18       |                 inc.d 000218         
1521:000 | DONE wsp | na 16 16 |        |             |
1522:000 | DONE lbl | na 16 16 | 0064a4 |             | parse_reached_eol                    
1523:000 | DONE cmt | na 16 16 |        |             |                 ; calculate length of string found (see ascii drawing)
1524:000 | DONE dir | na 16 16 |        |             |         .!xy16                       
1525:000 | DONE ins | na 16 16 | 0064a4 | c2 20       |                 rep 20               
1525:001 | DONE ctl | na 16 16 |        |             |         .!a16
1526:000 | DONE ins | na 16 16 | 0064a6 | 98          |                 tya                  
1527:000 | DONE ins | na 16 16 | 0064a7 | 38          |                 sec                  
1528:000 | DONE ins | na 16 16 | 0064a8 | e5 1a       |                 sbc.d 00021a         ; original value for >IN / index of first char
1529:000 | DONE ins | na 16 16 | 0064aa | 48          |                 pha                  ; save so we can manipulate Y
1530:000 | DONE wsp | na 16 16 |        |             |
1531:000 | DONE cmt | na 16 16 |        |             |                 ; calculate new >IN
1532:000 | DONE ins | na 16 16 | 0064ab | 98          |                 tya                  
1533:000 | DONE ins | na 16 16 | 0064ac | 18          |                 clc                  
1534:000 | DONE ins | na 16 16 | 0064ad | 65 18       |                 adc.d 000218         ; offset for EOL vs found delimiter
1535:000 | DONE ins | na 16 16 | 0064af | 85 12       |                 sta.d 000212         
1536:000 | DONE wsp | na 16 16 |        |             |
1537:000 | DONE ins | na 16 16 | 0064b1 | 7a          |                 ply                  ; length of string in TOS
1538:000 | DONE wsp | na 16 16 |        |             |
1539:000 | DONE lbl | na 16 16 | 0064b2 |             | z_parse-name                         
1540:000 | DONE lbl | na 16 16 | 0064b2 |             | z_parse                              
1540:001 | DONE ins | na 16 16 | 0064b2 | 60          |                 rts                  
1541:000 | DONE wsp | na 16 16 |        |             |
1542:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1543:000 | DONE cmt | na 16 16 |        |             | ; REFILL ( -- f ) X bytes / X cycles
1544:000 | DONE cmt | na 16 16 |        |             | ; "Attempt to fill the input buffer from the input source, returning a true flag
1545:000 | DONE cmt | na 16 16 |        |             | ; if successful. When the input source is the user input device, attempt to
1546:000 | DONE cmt | na 16 16 |        |             | ; receive input into the terminal input buffer. If successful, make the result
1547:000 | DONE cmt | na 16 16 |        |             | ; the input buffer, set >IN to zero, and return true. Receipt of a line
1548:000 | DONE cmt | na 16 16 |        |             | ; containing no characters is considered successful. If there is no input
1549:000 | DONE cmt | na 16 16 |        |             | ; available from the current input source, return false. When the input source
1550:000 | DONE cmt | na 16 16 |        |             | ; is a string from EVALUATE, return false and perform no other action."
1551:000 | DONE cmt | na 16 16 |        |             | ; See https://www.complang.tuwien.ac.at/forth/gforth/Docs-html/The-Input-Stream.html
1552:000 | DONE cmt | na 16 16 |        |             | ; and Conklin & Rather p. 156
1553:000 | DONE lbl | na 16 16 | 0064b3 |             | xt_refill                            
1554:000 | DONE dir | na 16 16 |        |             |         .!a16                        
1555:000 | DONE dir | na 16 16 |        |             |         .!xy16                       
1556:000 | DONE cmt | na 16 16 |        |             |                 ; We handle buffer switches here so that regardless of input
1557:000 | DONE cmt | na 16 16 |        |             |                 ; source, we have access to the previous input. This is not in
1558:000 | DONE cmt | na 16 16 |        |             |                 ; the ANSI specification in any way.
1559:000 | DONE ins | na 16 16 | 0064b3 | a5 0c       |                 lda.d 00020c         
1560:000 | DONE ins | na 16 16 | 0064b5 | 49 00 01    |                 eor.# 0100           ; flip 07d00 / 07c00
1561:000 | DONE ins | na 16 16 | 0064b8 | 85 0c       |                 sta.d 00020c         
1562:000 | DONE wsp | na 16 16 |        |             |
1563:000 | DONE ins | na 16 16 | 0064ba | a5 0e       |                 lda.d 00020e         ; current length is now previous length
1564:000 | DONE ins | na 16 16 | 0064bc | 85 10       |                 sta.d 000210         
1565:000 | DONE wsp | na 16 16 |        |             |
1566:000 | DONE cmt | na 16 16 |        |             |                 ; Get input source from SOURCE-ID. We don't have blocks in this
1567:000 | DONE cmt | na 16 16 |        |             |                 ; version, or else we would have to check BLK first. This is an
1568:000 | DONE cmt | na 16 16 |        |             |                 ; optimized version of a subroutine jump to SOURCE-ID
1569:000 | DONE ins | na 16 16 | 0064be | a5 0a       |                 lda.d 00020a         
1570:000 | DONE ins | na 16 16 | 0064c0 | d0 14       |                 bne 0064d6           
1571:000 | DONE wsp | na 16 16 |        |             |
1572:000 | DONE cmt | na 16 16 |        |             |                 ; SOURCE-ID of zero means we're getting stuff from the keyboard
1573:000 | DONE cmt | na 16 16 |        |             |                 ; with ACCEPT.
1574:000 | DONE ins | na 16 16 | 0064c2 | ca          |                 dex                  ; push Data Stack down twice
1575:000 | DONE ins | na 16 16 | 0064c3 | ca          |                 dex                  
1576:000 | DONE ins | na 16 16 | 0064c4 | 94 00       |                 sty.dx 00            
1577:000 | DONE wsp | na 16 16 |        |             |
1578:000 | DONE ins | na 16 16 | 0064c6 | a5 0c       |                 lda.d 00020c         ; address of current input buffer NOS
1579:000 | DONE ins | na 16 16 | 0064c8 | ca          |                 dex                  
1580:000 | DONE ins | na 16 16 | 0064c9 | ca          |                 dex                  
1581:000 | DONE ins | na 16 16 | 0064ca | 95 00       |                 sta.dx 00            
1582:000 | DONE wsp | na 16 16 |        |             |
1583:000 | DONE ins | na 16 16 | 0064cc | a0 ff 00    |                 ldy.# 0000ff         
1584:000 | DONE wsp | na 16 16 |        |             |
1585:000 | DONE ins | na 16 16 | 0064cf | 20 67 61    |                 jsr 006167           ; ( addr n1 -- n2)
1586:000 | DONE wsp | na 16 16 |        |             |
1587:000 | DONE cmt | na 16 16 |        |             |                 ; ACCEPT returns the number of characters accepted, but we don't
1588:000 | DONE cmt | na 16 16 |        |             |                 ; need them. We just overwrite TOS this with the flag
1589:000 | DONE ins | na 16 16 | 0064d2 | a0 ff ff    |                 ldy.# 0ffff          
1590:000 | DONE wsp | na 16 16 |        |             |
1591:000 | DONE ins | na 16 16 | 0064d5 | 60          |                 rts                  
1592:000 | DONE wsp | na 16 16 |        |             |
1593:000 | DONE lbl | na 16 16 | 0064d6 |             | refill_src_not_kbd                   
1594:000 | DONE cmt | na 16 16 |        |             |                 ; If SOURCE-ID doesn't return a zero, it must be a string in
1595:000 | DONE cmt | na 16 16 |        |             |                 ; memory or a file (remember, no blocks in this version)
1596:000 | DONE ins | na 16 16 | 0064d6 | 1a          |                 inc.a                
1597:000 | DONE ins | na 16 16 | 0064d7 | d0 06       |                 bne 0064df           
1598:000 | DONE wsp | na 16 16 |        |             |
1599:000 | DONE cmt | na 16 16 |        |             |                 ; Simply return FALSE flag as per specification
1600:000 | DONE ins | na 16 16 | 0064d9 | ca          |                 dex                  
1601:000 | DONE ins | na 16 16 | 0064da | ca          |                 dex                  
1602:000 | DONE ins | na 16 16 | 0064db | 94 00       |                 sty.dx 00            
1603:000 | DONE ins | na 16 16 | 0064dd | a8          |                 tay                  
1604:000 | DONE wsp | na 16 16 |        |             |
1605:000 | DONE ins | na 16 16 | 0064de | 60          |                 rts                  
1606:000 | DONE wsp | na 16 16 |        |             |
1607:000 | DONE lbl | na 16 16 | 0064df |             | refill_source_is_not_string          
1608:000 | DONE cmt | na 16 16 |        |             |                 ; Since we don't have blocks, this must mean that we are trying
1609:000 | DONE cmt | na 16 16 |        |             |                 ; to read from a file. However, we don't have files yet, so we
1610:000 | DONE cmt | na 16 16 |        |             |                 ; report an error and jump to ABORT.
1611:000 | DONE ins | na 16 16 | 0064df | a9 df 6a    |                 lda.# 006adf         
1612:000 | DONE ins | na 16 16 | 0064e2 | 4c e2 68    |                 jmp 0068e2           
1613:000 | DONE wsp | na 16 16 |        |             |
1614:000 | DONE lbl | na 16 16 | 0064e5 |             | z_refill                             
1614:001 | DONE ins | na 16 16 | 0064e5 | 60          |                 rts                  ; dummy for compiling
1615:000 | DONE wsp | na 16 16 |        |             |
1616:000 | DONE wsp | na 16 16 |        |             |
1617:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1618:000 | DONE cmt | na 16 16 |        |             | ; ROT ( a b c -- b c a ) X bytes / X cycles
1619:000 | DONE cmt | na 16 16 |        |             | ; Rotate the top three entries downwards (third entry becomes first)
1620:000 | DONE cmt | na 16 16 |        |             | ; Remember this with the "R" for "revolution": The bottom entry becomes the top.
1621:000 | DONE lbl | na 16 16 | 0064e6 |             | xt_rot                               
1622:000 | DONE dir | na 16 16 |        |             |         .!a16                        
1623:000 | DONE dir | na 16 16 |        |             |         .!xy16                       
1624:000 | DONE ins | na 16 16 | 0064e6 | b5 00       |                 lda.dx 00            ; save b
1625:000 | DONE ins | na 16 16 | 0064e8 | 94 00       |                 sty.dx 00            ; move c to NOS
1626:000 | DONE ins | na 16 16 | 0064ea | b4 02       |                 ldy.dx 02            ; move a to TOS
1627:000 | DONE ins | na 16 16 | 0064ec | 95 02       |                 sta.dx 02            ; save b as 3OS
1628:000 | DONE wsp | na 16 16 |        |             |
1629:000 | DONE lbl | na 16 16 | 0064ee |             | z_rot                                
1629:001 | DONE ins | na 16 16 | 0064ee | 60          |                 rts                  
1630:000 | DONE wsp | na 16 16 |        |             |
1631:000 | DONE wsp | na 16 16 |        |             |
1632:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1633:000 | DONE cmt | na 16 16 |        |             | ; SOURCE ( -- addr u ) 12 bytes / X cycles
1634:000 | DONE cmt | na 16 16 |        |             | ; Return the address and size of current input buffer. Replaces TIB and #TIB in
1635:000 | DONE cmt | na 16 16 |        |             | ; ANSI Forth
1636:000 | DONE wsp | na 16 16 |        |             |
1637:000 | DONE lbl | na 16 16 | 0064ef |             | xt_source                            
1637:001 | DONE ins | na 16 16 | 0064ef | ca          |                 dex                  ; make room on Data Stack
1638:000 | DONE ins | na 16 16 | 0064f0 | ca          |                 dex                  
1639:000 | DONE ins | na 16 16 | 0064f1 | ca          |                 dex                  
1640:000 | DONE ins | na 16 16 | 0064f2 | ca          |                 dex                  
1641:000 | DONE ins | na 16 16 | 0064f3 | 94 02       |                 sty.dx 02            
1642:000 | DONE wsp | na 16 16 |        |             |
1643:000 | DONE ins | na 16 16 | 0064f5 | a5 0c       |                 lda.d 00020c         ; address of current input buffer as NOS
1644:000 | DONE ins | na 16 16 | 0064f7 | 95 00       |                 sta.dx 00            
1645:000 | DONE wsp | na 16 16 |        |             |
1646:000 | DONE ins | na 16 16 | 0064f9 | a4 0e       |                 ldy.d 00020e         ; length of current input buffer as TOS
1647:000 | DONE wsp | na 16 16 |        |             |
1648:000 | DONE lbl | na 16 16 | 0064fb |             | z_source                             
1648:001 | DONE ins | na 16 16 | 0064fb | 60          |                 rts                  
1649:000 | DONE wsp | na 16 16 |        |             |
1650:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1651:000 | DONE cmt | na 16 16 |        |             | ; SOURCE-ID ( -- n ) 6 bytes / 13 cycles
1652:000 | DONE cmt | na 16 16 |        |             | ; Identify the input source unless it is a block (s. Conklin & Rather p. 156).
1653:000 | DONE cmt | na 16 16 |        |             | ; Since we don't have blocks (yet), this will give the input source: 0 is
1654:000 | DONE cmt | na 16 16 |        |             | ; keyboard, -1 (0ffff) is character string, and a text file gives the fileid.
1655:000 | DONE wsp | na 16 16 |        |             |
1656:000 | DONE lbl | na 16 16 | 0064fc |             | xt_source-id                         
1657:000 | DONE dir | na 16 16 |        |             |         .!xy16                       
1658:000 | DONE ins | na 16 16 | 0064fc | ca          |                 dex                  
1659:000 | DONE ins | na 16 16 | 0064fd | ca          |                 dex                  
1660:000 | DONE ins | na 16 16 | 0064fe | 94 00       |                 sty.dx 00            
1661:000 | DONE ins | na 16 16 | 006500 | a4 0a       |                 ldy.d 00020a         
1662:000 | DONE wsp | na 16 16 |        |             |
1663:000 | DONE lbl | na 16 16 | 006502 |             | z_source-id                          
1663:001 | DONE ins | na 16 16 | 006502 | 60          |                 rts                  
1664:000 | DONE wsp | na 16 16 |        |             |
1665:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1666:000 | DONE cmt | na 16 16 |        |             | ; SPACE ( -- ) X bytes / X cycles
1667:000 | DONE cmt | na 16 16 |        |             | ; Print one ASCII space character
1668:000 | DONE cmt | na 16 16 |        |             | ; TODO change to call EMIT
1669:000 | DONE lbl | na 16 16 | 006503 |             | xt_space                             
1670:000 | DONE ins | na 16 16 | 006503 | a9 20 00    |                 lda.# AscSP          
1671:000 | DONE ins | na 16 16 | 006506 | 20 30 60    |                 jsr 006030           
1672:000 | DONE dir | na 16 16 |        |             |         .!a16                        
1673:000 | DONE wsp | na 16 16 |        |             |
1674:000 | DONE lbl | na 16 16 | 006509 |             | z_space                              
1674:001 | DONE ins | na 16 16 | 006509 | 60          |                 rts                  
1675:000 | DONE wsp | na 16 16 |        |             |
1676:000 | DONE wsp | na 16 16 |        |             |
1677:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1678:000 | DONE cmt | na 16 16 |        |             | ; SPACES ( u -- ) 12 bytes / X cycles
1679:000 | DONE cmt | na 16 16 |        |             | ; Print u spaces. Calls SPACE, because this is probably interactive and humans
1680:000 | DONE cmt | na 16 16 |        |             | ; are slow enough we don't have to care about speed.
1681:000 | DONE lbl | na 16 16 | 00650a |             | xt_spaces                            
1682:000 | DONE dir | na 16 16 |        |             |         .!a16                        
1683:000 | DONE dir | na 16 16 |        |             |         .!xy16                       
1684:000 | DONE lbl | na 16 16 | 00650a |             | @                                    
1685:000 | DONE ins | na 16 16 | 00650a | 88          |                 dey                  ; this also handles case u=0
1686:000 | DONE ins | na 16 16 | 00650b | 30 05       |                 bmi 006512           
1687:000 | DONE wsp | na 16 16 |        |             |
1688:000 | DONE ins | na 16 16 | 00650d | 20 03 65    |                 jsr 006503           
1689:000 | DONE ins | na 16 16 | 006510 | 80 f8       |                 bra 00650a           
1690:000 | DONE wsp | na 16 16 |        |             |
1691:000 | DONE lbl | na 16 16 | 006512 |             | spaces_done                          
1692:000 | DONE ins | na 16 16 | 006512 | b4 00       |                 ldy.dx 00            ; DROP
1693:000 | DONE ins | na 16 16 | 006514 | e8          |                 inx                  
1694:000 | DONE ins | na 16 16 | 006515 | e8          |                 inx                  
1695:000 | DONE wsp | na 16 16 |        |             |
1696:000 | DONE lbl | na 16 16 | 006516 |             | z_spaces                             
1696:001 | DONE ins | na 16 16 | 006516 | 60          |                 rts                  
1697:000 | DONE wsp | na 16 16 |        |             |
1698:000 | DONE wsp | na 16 16 |        |             |
1699:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1700:000 | DONE cmt | na 16 16 |        |             | ; STATE ( -- addr ) 7 bytes / 12 cycles
1701:000 | DONE cmt | na 16 16 |        |             | ; Return the address of a cell containing the compilation-state flag. STATE
1702:000 | DONE cmt | na 16 16 |        |             | ; is true when in compilation state, false otherwise. STATE should not be
1703:000 | DONE cmt | na 16 16 |        |             | ; changed directly by the user; see
1704:000 | DONE cmt | na 16 16 |        |             | ; http://forth.sourceforge.net/standard/dpans/dpans6.htm#6.1.2250
1705:000 | DONE lbl | na 16 16 | 006517 |             | xt_state                             
1706:000 | DONE dir | na 16 16 |        |             |         .!xy16                       
1707:000 | DONE ins | na 16 16 | 006517 | ca          |                 dex                  
1708:000 | DONE ins | na 16 16 | 006518 | ca          |                 dex                  
1709:000 | DONE ins | na 16 16 | 006519 | 94 00       |                 sty.dx 00            
1710:000 | DONE ins | na 16 16 | 00651b | a0 14 02    |                 ldy.# 000214         
1711:000 | DONE wsp | na 16 16 |        |             |
1712:000 | DONE lbl | na 16 16 | 00651e |             | z_state                              
1712:001 | DONE ins | na 16 16 | 00651e | 60          |                 rts                  
1713:000 | DONE wsp | na 16 16 |        |             |
1714:000 | DONE wsp | na 16 16 |        |             |
1715:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1716:000 | DONE cmt | na 16 16 |        |             | ; SWAP ( n m -- m n ) 5 bytes / 12 cycles
1717:000 | DONE cmt | na 16 16 |        |             | ; Exchange TOS with NOS. We don't check if there are enough elements on the Data
1718:000 | DONE cmt | na 16 16 |        |             | ; Stack; underflow errors will go undetected and return garbage.
1719:000 | DONE lbl | na 16 16 | 00651f |             | xt_swap                              
1720:000 | DONE dir | na 16 16 |        |             |         .!a16                        
1721:000 | DONE dir | na 16 16 |        |             |         .!xy16                       
1722:000 | DONE ins | na 16 16 | 00651f | b5 00       |                 lda.dx 00            
1723:000 | DONE ins | na 16 16 | 006521 | 94 00       |                 sty.dx 00            
1724:000 | DONE ins | na 16 16 | 006523 | a8          |                 tay                  
1725:000 | DONE wsp | na 16 16 |        |             |
1726:000 | DONE lbl | na 16 16 | 006524 |             | z_swap                               
1726:001 | DONE ins | na 16 16 | 006524 | 60          |                 rts                  
1727:000 | DONE wsp | na 16 16 |        |             |
1728:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1729:000 | DONE cmt | na 16 16 |        |             | ; TRUE ( -- f ) 7 bytes / 12 cycles
1730:000 | DONE cmt | na 16 16 |        |             | ; Pushes value $FFFF for Forth true on Data Stack
1731:000 | DONE lbl | na 16 16 | 006525 |             | xt_true                              
1732:000 | DONE dir | na 16 16 |        |             |         .!a16                        
1733:000 | DONE dir | na 16 16 |        |             |         .!xy16                       
1734:000 | DONE ins | na 16 16 | 006525 | ca          |                 dex                  
1735:000 | DONE ins | na 16 16 | 006526 | ca          |                 dex                  
1736:000 | DONE ins | na 16 16 | 006527 | 94 00       |                 sty.dx 00            
1737:000 | DONE ins | na 16 16 | 006529 | a0 ff ff    |                 ldy.# 0ffff          
1738:000 | DONE wsp | na 16 16 |        |             |
1739:000 | DONE lbl | na 16 16 | 00652c |             | z_true                               
1739:001 | DONE ins | na 16 16 | 00652c | 60          |                 rts                  
1740:000 | DONE wsp | na 16 16 |        |             |
1741:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1742:000 | DONE cmt | na 16 16 |        |             | ; TUCK ( n m -- m n m ) 8 bytes / 19 cycles
1743:000 | DONE cmt | na 16 16 |        |             | ; Insert TOS below NOS. We do not check if there are enough elements on the Data
1744:000 | DONE cmt | na 16 16 |        |             | ; Stack, underflow will go undetected and return garbage.
1745:000 | DONE lbl | na 16 16 | 00652d |             | xt_tuck                              
1746:000 | DONE dir | na 16 16 |        |             |         .!a16                        
1747:000 | DONE dir | na 16 16 |        |             |         .!xy16                       
1748:000 | DONE ins | na 16 16 | 00652d | ca          |                 dex                  
1749:000 | DONE ins | na 16 16 | 00652e | ca          |                 dex                  
1750:000 | DONE ins | na 16 16 | 00652f | b5 02       |                 lda.dx 2             
1751:000 | DONE ins | na 16 16 | 006531 | 95 00       |                 sta.dx 0             
1752:000 | DONE ins | na 16 16 | 006533 | 94 02       |                 sty.dx 2             
1753:000 | DONE wsp | na 16 16 |        |             |
1754:000 | DONE lbl | na 16 16 | 006535 |             | z_tuck                               
1754:001 | DONE ins | na 16 16 | 006535 | 60          |                 rts                  
1755:000 | DONE wsp | na 16 16 |        |             |
1756:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1757:000 | DONE cmt | na 16 16 |        |             | ; TYPE ( addr u -- ) 23+ bytes / X cycles
1758:000 | DONE cmt | na 16 16 |        |             | ; Print character string if u is not 0. We restrict all calls to put_chr and
1759:000 | DONE cmt | na 16 16 |        |             | ; get_chr to make porting easier.  We call put_chr here directly instead of
1760:000 | DONE cmt | na 16 16 |        |             | ; going through EMIT because EMIT will later have a PAUSE statement for
1761:000 | DONE cmt | na 16 16 |        |             | ; multitasking and we probably don't want to PAUSE after every character.
1762:000 | DONE cmt | na 16 16 |        |             | ; However, we'll make a final decision about that when multitasking is up and
1763:000 | DONE cmt | na 16 16 |        |             | ; running.
1764:000 | DONE lbl | na 16 16 | 006536 |             | xt_type                              
1765:000 | DONE dir | na 16 16 |        |             |         .!a16                        
1766:000 | DONE dir | na 16 16 |        |             |         .!xy16                       
1767:000 | DONE cmt | na 16 16 |        |             |                 ; just leave if u is zero (empty string)
1768:000 | DONE ins | na 16 16 | 006536 | 98          |                 tya                  ; force flag check of TOS
1769:000 | DONE ins | na 16 16 | 006537 | f0 17       |                 beq 006550           
1770:000 | DONE wsp | na 16 16 |        |             |
1771:000 | DONE ins | na 16 16 | 006539 | b5 00       |                 lda.dx 00            ; get address from NOS
1772:000 | DONE ins | na 16 16 | 00653b | 85 16       |                 sta.d 000216         
1773:000 | DONE ins | na 16 16 | 00653d | 84 18       |                 sty.d 000218         ; number of chars is TOS
1774:000 | DONE ins | na 16 16 | 00653f | a0 00 00    |                 ldy.# 0000           
1775:000 | DONE ins | na 16 16 | 006542 | e2 20       |                 sep 20               
1775:001 | DONE ctl | na  8 16 |        |             |         .!a8
1776:000 | DONE lbl | na  8 16 | 006544 |             | type_loop                            
1777:000 | DONE ins | na  8 16 | 006544 | b1 16       |                 lda.diy 000216       ; LDA (TMP1),Y
1778:000 | DONE ins | na  8 16 | 006546 | 20 30 60    |                 jsr 006030           
1779:000 | DONE ins | na  8 16 | 006549 | c8          |                 iny                  
1780:000 | DONE ins | na  8 16 | 00654a | c4 18       |                 cpy.d 000218         
1781:000 | DONE ins | na  8 16 | 00654c | d0 f6       |                 bne 006544           
1782:000 | DONE wsp | na  8 16 |        |             |
1783:000 | DONE ins | na  8 16 | 00654e | c2 20       |                 rep 20               
1783:001 | DONE ctl | na 16 16 |        |             |         .!a16
1784:000 | DONE lbl | na 16 16 | 006550 |             | type_done                            
1785:000 | DONE cmt | na 16 16 |        |             |                 ; clear stack
1786:000 | DONE ins | na 16 16 | 006550 | b4 02       |                 ldy.dx 02            
1787:000 | DONE ins | na 16 16 | 006552 | e8          |                 inx                  
1788:000 | DONE ins | na 16 16 | 006553 | e8          |                 inx                  
1789:000 | DONE ins | na 16 16 | 006554 | e8          |                 inx                  
1790:000 | DONE ins | na 16 16 | 006555 | e8          |                 inx                  
1791:000 | DONE wsp | na 16 16 |        |             |
1792:000 | DONE cmt | na 16 16 |        |             |                 ; TODO LATER add PAUSE here for multitasking
1793:000 | DONE wsp | na 16 16 |        |             |
1794:000 | DONE lbl | na 16 16 | 006556 |             | z_type                               
1794:001 | DONE ins | na 16 16 | 006556 | 60          |                 rts                  
1795:000 | DONE wsp | na 16 16 |        |             |
1796:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1797:000 | DONE cmt | na 16 16 |        |             | ; UNUSED ( -- u ) 11 bytes / X cycles
1798:000 | DONE cmt | na 16 16 |        |             | ; Return amount of memory available for the Dictionary. Does not include
1799:000 | DONE cmt | na 16 16 |        |             | ; memory for buffers, stacks etc. Does not exclude the space used by PAD
1800:000 | DONE cmt | na 16 16 |        |             | ; TODO rewrite for multitasking
1801:000 | DONE lbl | na 16 16 | 006557 |             | xt_unused                            
1802:000 | DONE dir | na 16 16 |        |             |         .!a16                        
1803:000 | DONE ins | na 16 16 | 006557 | a9 ff 7b    |                 lda.# 007bff         
1804:000 | DONE ins | na 16 16 | 00655a | 38          |                 sec                  
1805:000 | DONE ins | na 16 16 | 00655b | e5 00       |                 sbc.d 000200         ; current compile pointer
1806:000 | DONE wsp | na 16 16 |        |             |
1807:000 | DONE ins | na 16 16 | 00655d | ca          |                 dex                  
1808:000 | DONE ins | na 16 16 | 00655e | ca          |                 dex                  
1809:000 | DONE ins | na 16 16 | 00655f | 94 00       |                 sty.dx 00            
1810:000 | DONE wsp | na 16 16 |        |             |
1811:000 | DONE ins | na 16 16 | 006561 | a8          |                 tay                  
1812:000 | DONE wsp | na 16 16 |        |             |
1813:000 | DONE lbl | na 16 16 | 006562 |             | z_unused                             
1813:001 | DONE ins | na 16 16 | 006562 | 60          |                 rts                  
1814:000 | DONE wsp | na 16 16 |        |             |
1815:000 | DONE wsp | na 16 16 |        |             |
1816:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1817:000 | DONE cmt | na 16 16 |        |             | ; VARIABLE ( "name" -- ) X bytes / X cycles
1818:000 | DONE cmt | na 16 16 |        |             | ; Define a word that returns the address for a variable. There are various Forth
1819:000 | DONE cmt | na 16 16 |        |             | ; definitions for this word, such as  CREATE 1 CELLS ALLOT  or CREATE 0 ,
1820:000 | DONE cmt | na 16 16 |        |             | ; We use a variant of the second one so the variable is initialized to zero
1821:000 | DONE lbl | na 16 16 | 006563 |             | xt_variable                          
1822:000 | DONE cmt | na 16 16 |        |             |                 ; We let CREATE do most of the heavy lifting
1823:000 | DONE ins | na 16 16 | 006563 | 20 57 62    |                 jsr 006257           
1824:000 | DONE wsp | na 16 16 |        |             |
1825:000 | DONE cmt | na 16 16 |        |             |                 ; There is no "stz.di cp" so we have to do this the
1826:000 | DONE cmt | na 16 16 |        |             |                 ; old way, which is still faster than a subroutine jump to ZERO
1827:000 | DONE ins | na 16 16 | 006566 | a9 00 00    |                 lda.# 0000           
1828:000 | DONE ins | na 16 16 | 006569 | 92 00       |                 sta.di 000200        ; STA (CP)
1829:000 | DONE wsp | na 16 16 |        |             |
1830:000 | DONE ins | na 16 16 | 00656b | e6 00       |                 inc.d 000200         ; direct COMMA
1831:000 | DONE ins | na 16 16 | 00656d | e6 00       |                 inc.d 000200         
1832:000 | DONE wsp | na 16 16 |        |             |
1833:000 | DONE lbl | na 16 16 | 00656f |             | z_variable                           
1833:001 | DONE ins | na 16 16 | 00656f | 60          |                 rts                  
1834:000 | DONE wsp | na 16 16 |        |             |
1835:000 | DONE wsp | na 16 16 |        |             |
1836:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1837:000 | DONE cmt | na 16 16 |        |             | ; WORDS ( -- ) X bytes / X cycles
1838:000 | DONE cmt | na 16 16 |        |             | ; Print list of all Forth words available. This only really makes sense in an
1839:000 | DONE cmt | na 16 16 |        |             | ; interactive setting, so we don't have to worry about speed.
1840:000 | DONE lbl | na 16 16 | 006570 |             | xt_words                             
1841:000 | DONE ins | na 16 16 | 006570 | 20 50 62    |                 jsr 006250           ; start on next line, this is a style choice
1842:000 | DONE wsp | na 16 16 |        |             |
1843:000 | DONE ins | na 16 16 | 006573 | a5 02       |                 lda.d 000202         ; nt of first entry in Dictionary (last added)
1844:000 | DONE ins | na 16 16 | 006575 | 48          |                 pha                  
1845:000 | DONE wsp | na 16 16 |        |             |
1846:000 | DONE ins | na 16 16 | 006576 | ca          |                 dex                  ; create room on TOS
1847:000 | DONE ins | na 16 16 | 006577 | ca          |                 dex                  
1848:000 | DONE ins | na 16 16 | 006578 | 94 00       |                 sty.dx 00            
1849:000 | DONE wsp | na 16 16 |        |             |
1850:000 | DONE lbl | na 16 16 | 00657a |             | words_loop                           
1851:000 | DONE ins | na 16 16 | 00657a | a8          |                 tay                  ; ( nt )
1852:000 | DONE wsp | na 16 16 |        |             |
1853:000 | DONE ins | na 16 16 | 00657b | 20 1a 64    |                 jsr 00641a           ; ( nt -- addr u )
1854:000 | DONE ins | na 16 16 | 00657e | 20 36 65    |                 jsr 006536           ; ( addr u -- )
1855:000 | DONE ins | na 16 16 | 006581 | 20 03 65    |                 jsr 006503           
1856:000 | DONE dir | na 16 16 |        |             |         .!a16                        
1857:000 | DONE dir | na 16 16 |        |             |         .!xy16                       
1858:000 | DONE ins | na 16 16 | 006584 | 68          |                 pla                  
1859:000 | DONE wsp | na 16 16 |        |             |
1860:000 | DONE cmt | na 16 16 |        |             |                 ; the next nt is two bytes below the nt of the current one in
1861:000 | DONE cmt | na 16 16 |        |             |                 ; the Dictionary header
1862:000 | DONE cmt | na 16 16 |        |             |                 ;
1863:000 | DONE ins | na 16 16 | 006585 | 1a          |                 inc.a                
1864:000 | DONE ins | na 16 16 | 006586 | 1a          |                 inc.a                
1865:000 | DONE wsp | na 16 16 |        |             |
1866:000 | DONE ins | na 16 16 | 006587 | ca          |                 dex                  
1867:000 | DONE ins | na 16 16 | 006588 | ca          |                 dex                  
1868:000 | DONE ins | na 16 16 | 006589 | 94 00       |                 sty.dx 00            
1869:000 | DONE wsp | na 16 16 |        |             |
1870:000 | DONE ins | na 16 16 | 00658b | a8          |                 tay                  
1871:000 | DONE ins | na 16 16 | 00658c | b9 00 00    |                 lda.y 0000           ; LDA $0000,Y
1872:000 | DONE ins | na 16 16 | 00658f | 48          |                 pha                  
1873:000 | DONE ins | na 16 16 | 006590 | d0 e8       |                 bne 00657a           ; zero entry signals end of Dictionary
1874:000 | DONE wsp | na 16 16 |        |             |
1875:000 | DONE cmt | na 16 16 |        |             |                 ; all done, clean up
1876:000 | DONE ins | na 16 16 | 006592 | 68          |                 pla                  ; balance MPU stack, value discarded
1877:000 | DONE wsp | na 16 16 |        |             |
1878:000 | DONE ins | na 16 16 | 006593 | b4 00       |                 ldy.dx 00            
1879:000 | DONE ins | na 16 16 | 006595 | e8          |                 inx                  
1880:000 | DONE ins | na 16 16 | 006596 | e8          |                 inx                  
1881:000 | DONE wsp | na 16 16 |        |             |
1882:000 | DONE lbl | na 16 16 | 006597 |             | z_words                              
1882:001 | DONE ins | na 16 16 | 006597 | 60          |                 rts                  
1883:000 | DONE wsp | na 16 16 |        |             |
1884:000 | DONE wsp | na 16 16 |        |             |
1885:000 | DONE wsp | na 16 16 |        |             |
1886:000 | DONE cmt | na 16 16 |        |             | ; ===================================================================
1887:000 | DONE cmt | na 16 16 |        |             | ; MIDDLE INCLUDES
1888:000 | DONE wsp | na 16 16 |        |             |
1889:000 | DONE cmt | na 16 16 |        |             | ; Dictionary Headers for Liara Forth for the W65C265SXB
1889:001 | DONE cmt | na 16 16 |        |             | ; Scot W. Stevenson <scot.stevenson@gmail.com>
1889:002 | DONE cmt | na 16 16 |        |             | ; First version: 05. Dec 2016
1889:003 | DONE cmt | na 16 16 |        |             | ; This version: 14. Feb 2017
1889:004 | DONE wsp | na 16 16 |        |             |
1889:005 | DONE cmt | na 16 16 |        |             | ; Dictionary headers are kept separately from the code, which allows various
1889:006 | DONE cmt | na 16 16 |        |             | ; tricks in the code. We roughly follow the Gforth terminology: The Execution
1889:007 | DONE cmt | na 16 16 |        |             | ; Token (xt) is the address of the first byte of a word's code that can be,
1889:008 | DONE cmt | na 16 16 |        |             | ; well, executed; the Name Token (nt) is a pointer to the beginning of the
1889:009 | DONE cmt | na 16 16 |        |             | ; word's header in the Dictionary. There, the link to the next word in the
1889:010 | DONE cmt | na 16 16 |        |             | ; Dictionary is always one cell down from the current word's own nt. In the code
1889:011 | DONE cmt | na 16 16 |        |             | ; itself, we use "nt_<WORD>" ("header") for the nt and "xt_<WORD>" ("A" as the
1889:012 | DONE cmt | na 16 16 |        |             | ; beginning) for the xt.
1889:013 | DONE cmt | na 16 16 |        |             | ;
1889:014 | DONE cmt | na 16 16 |        |             | ; This gives us the following header structure:
1889:015 | DONE cmt | na 16 16 |        |             | ;
1889:016 | DONE cmt | na 16 16 |        |             | ;              8 bit     8 bit
1889:017 | DONE cmt | na 16 16 |        |             | ;               LSB       MSB
1889:018 | DONE cmt | na 16 16 |        |             | ; nt_word ->  +--------+--------+
1889:019 | DONE cmt | na 16 16 |        |             | ;             | Length | Status |
1889:020 | DONE cmt | na 16 16 |        |             | ;          +2 +--------+--------+
1889:021 | DONE cmt | na 16 16 |        |             | ;             | Next Header     | -> nt_next_word
1889:022 | DONE cmt | na 16 16 |        |             | ;          +4 +-----------------+
1889:023 | DONE cmt | na 16 16 |        |             | ;             | Start of Code   | -> xt_word
1889:024 | DONE cmt | na 16 16 |        |             | ;          +6 +-----------------+
1889:025 | DONE cmt | na 16 16 |        |             | ;             | End of Code     | -> z_word
1889:026 | DONE cmt | na 16 16 |        |             | ;          +8 +--------+--------+
1889:027 | DONE cmt | na 16 16 |        |             | ;             | Name   |        |
1889:028 | DONE cmt | na 16 16 |        |             | ;             +--------+--------+
1889:029 | DONE cmt | na 16 16 |        |             | ;             |        |        |
1889:030 | DONE cmt | na 16 16 |        |             | ;             +--------+--------+
1889:031 | DONE cmt | na 16 16 |        |             | ;             |        |  ...   | (name string does not end with a zero)
1889:032 | DONE cmt | na 16 16 |        |             | ;          +n +--------+--------+
1889:033 | DONE wsp | na 16 16 |        |             |
1889:034 | DONE cmt | na 16 16 |        |             | ; Status bytes are created by adding dictionary flags defined in
1889:035 | DONE cmt | na 16 16 |        |             | ; definitions.tasm:
1889:036 | DONE cmt | na 16 16 |        |             | ;
1889:037 | DONE cmt | na 16 16 |        |             | ;       PW - Primitive Word (natively coded)
1889:038 | DONE cmt | na 16 16 |        |             | ;       CO - Compile Only
1889:039 | DONE cmt | na 16 16 |        |             | ;       IM - Immediate Word
1889:040 | DONE cmt | na 16 16 |        |             | ;       NC - Native Compile (inline compile)
1889:041 | DONE wsp | na 16 16 |        |             |
1889:042 | DONE cmt | na 16 16 |        |             | ; The last word (top word in code) is always BYE, signaled to FIND by a 0000 in
1889:043 | DONE cmt | na 16 16 |        |             | ; the link to the Next Word field. The words are sorted with the more common
1889:044 | DONE cmt | na 16 16 |        |             | ; ones first (further down in code) and the output words later (further up)
1889:045 | DONE cmt | na 16 16 |        |             | ; because things will always be slow if there is a human involved.
1889:046 | DONE wsp | na 16 16 |        |             |
1889:047 | DONE lbl | na 16 16 | 006598 |             | nt_bye                               
1889:048 | DONE dir | na 16 16 | 006598 | (1 bytes)   |         .byte 03                     ; length of word string
1889:048 | DONE dir | na 16 16 |        |             |                 03                       --  .
1889:049 | DONE dir | na 16 16 | 006599 | (1 bytes)   |         .byte { PW + NC }            ; status byte
1889:049 | DONE dir | na 16 16 |        |             |                 90                       --  .
1889:050 | DONE dir | na 16 16 | 00659a | (2 bytes)   |         .word 0000                   ; next word in dictionary, 0000 signals end
1889:050 | DONE dir | na 16 16 |        |             |                 00 00                    --  . .
1889:051 | DONE dir | na 16 16 | 00659c | (2 bytes)   |         .word 006223                 ; start of code, the xt of this word
1889:051 | DONE dir | na 16 16 |        |             |                 23 62                    --  # b
1889:052 | DONE dir | na 16 16 | 00659e | (2 bytes)   |         .word 006226                 ; end of code (points to RTS)
1889:052 | DONE dir | na 16 16 |        |             |                 26 62                    --  & b
1889:053 | DONE dir | na 16 16 | 0065a0 | (3 bytes)   |         .byte 62, 79, 65             ; word name, always lower case
1889:053 | DONE dir | na 16 16 |        |             |                 62 79 65                 --  b y e
1889:054 | DONE wsp | na 16 16 |        |             |
1889:055 | DONE lbl | na 16 16 | 0065a3 |             | nt_cold                              
1889:056 | DONE dir | na 16 16 | 0065a3 | (2 bytes)   |         .byte 4, 00                  
1889:056 | DONE dir | na 16 16 |        |             |                 04 00                    --  . .
1889:057 | DONE dir | na 16 16 | 0065a5 | (6 bytes)   |         .word nt_bye, xt_cold, 0060d2 
1889:057 | DONE dir | na 16 16 |        |             |                 98 65 5d 60 d2 60        --  . e ] ` . `
1889:058 | DONE dir | na 16 16 | 0065ab | (4 bytes)   |         .byte 63, 6f, 6c, 64         
1889:058 | DONE dir | na 16 16 |        |             |                 63 6f 6c 64              --  c o l d
1889:059 | DONE wsp | na 16 16 |        |             |
1889:060 | DONE lbl | na 16 16 | 0065af |             | nt_words                             
1889:061 | DONE dir | na 16 16 | 0065af | (2 bytes)   |         .byte 5, { PW + NC }         
1889:061 | DONE dir | na 16 16 |        |             |                 05 90                    --  . .
1889:062 | DONE dir | na 16 16 | 0065b1 | (6 bytes)   |         .word nt_cold, xt_words, 006597 
1889:062 | DONE dir | na 16 16 |        |             |                 a3 65 70 65 97 65        --  . e p e . e
1889:063 | DONE dir | na 16 16 | 0065b7 | (5 bytes)   |         .byte 77, 6f, 72, 64, 73     
1889:063 | DONE dir | na 16 16 |        |             |                 77 6f 72 64 73           --  w o r d s
1889:064 | DONE wsp | na 16 16 |        |             |
1889:065 | DONE lbl | na 16 16 | 0065bc |             | nt_dump                              
1889:066 | DONE dir | na 16 16 | 0065bc | (2 bytes)   |         .byte 4, { PW + NC }         
1889:066 | DONE dir | na 16 16 |        |             |                 04 90                    --  . .
1889:067 | DONE dir | na 16 16 | 0065be | (6 bytes)   |         .word nt_words, xt_dump, 006370 
1889:067 | DONE dir | na 16 16 |        |             |                 af 65 4a 63 70 63        --  . e J c p c
1889:068 | DONE dir | na 16 16 | 0065c4 | (4 bytes)   |         .byte 64, 75, 6d, 70         
1889:068 | DONE dir | na 16 16 |        |             |                 64 75 6d 70              --  d u m p
1889:069 | DONE wsp | na 16 16 |        |             |
1889:070 | DONE lbl | na 16 16 | 0065c8 |             | nt_bell                              
1889:071 | DONE dir | na 16 16 | 0065c8 | (2 bytes)   |         .byte 4, { PW + NC }         
1889:071 | DONE dir | na 16 16 |        |             |                 04 90                    --  . .
1889:072 | DONE dir | na 16 16 | 0065ca | (6 bytes)   |         .word nt_dump, xt_bell, 00621a 
1889:072 | DONE dir | na 16 16 |        |             |                 bc 65 14 62 1a 62        --  . e . b . b
1889:073 | DONE dir | na 16 16 | 0065d0 | (4 bytes)   |         .byte 62, 65, 6c, 6c         
1889:073 | DONE dir | na 16 16 |        |             |                 62 65 6c 6c              --  b e l l
1889:074 | DONE wsp | na 16 16 |        |             |
1889:075 | DONE lbl | na 16 16 | 0065d4 |             | nt_unused                            
1889:076 | DONE dir | na 16 16 | 0065d4 | (2 bytes)   |         .byte 6, { PW + NC }         
1889:076 | DONE dir | na 16 16 |        |             |                 06 90                    --  . .
1889:077 | DONE dir | na 16 16 | 0065d6 | (6 bytes)   |         .word nt_bell, xt_unused, 006562 
1889:077 | DONE dir | na 16 16 |        |             |                 c8 65 57 65 62 65        --  . e W e b e
1889:078 | DONE dir | na 16 16 | 0065dc | (6 bytes)   |         .byte 75, 6e, 75, 73, 65, 64 
1889:078 | DONE dir | na 16 16 |        |             |                 75 6e 75 73 65 64        --  u n u s e d
1889:079 | DONE wsp | na 16 16 |        |             |
1889:080 | DONE lbl | na 16 16 | 0065e2 |             | nt_page                              
1889:081 | DONE dir | na 16 16 | 0065e2 | (2 bytes)   |         .byte 4, { PW + NC }         
1889:081 | DONE dir | na 16 16 |        |             |                 04 90                    --  . .
1889:082 | DONE dir | na 16 16 | 0065e4 | (6 bytes)   |         .word nt_unused, xt_page, 00644d 
1889:082 | DONE dir | na 16 16 |        |             |                 d4 65 41 64 4d 64        --  . e A d M d
1889:083 | DONE dir | na 16 16 | 0065ea | (4 bytes)   |         .byte 70, 61, 67, 65         
1889:083 | DONE dir | na 16 16 |        |             |                 70 61 67 65              --  p a g e
1889:084 | DONE wsp | na 16 16 |        |             |
1889:085 | DONE lbl | na 16 16 | 0065ee |             | nt_count                             
1889:086 | DONE dir | na 16 16 | 0065ee | (2 bytes)   |         .byte 5, {NC + PW }          
1889:086 | DONE dir | na 16 16 |        |             |                 05 90                    --  . .
1889:087 | DONE dir | na 16 16 | 0065f0 | (6 bytes)   |         .word nt_page, xt_count, 00624f 
1889:087 | DONE dir | na 16 16 |        |             |                 e2 65 41 62 4f 62        --  . e A b O b
1889:088 | DONE dir | na 16 16 | 0065f6 | (5 bytes)   |         .byte 63, 6f, 75, 6e, 74     
1889:088 | DONE dir | na 16 16 |        |             |                 63 6f 75 6e 74           --  c o u n t
1889:089 | DONE wsp | na 16 16 |        |             |
1889:090 | DONE lbl | na 16 16 | 0065fb |             | nt_abort                             
1889:091 | DONE dir | na 16 16 | 0065fb | (2 bytes)   |         .byte 5, 00                  ; TODO check flags
1889:091 | DONE dir | na 16 16 |        |             |                 05 00                    --  . .
1889:092 | DONE dir | na 16 16 | 0065fd | (6 bytes)   |         .word nt_count, xt_abort, 0060d2 
1889:092 | DONE dir | na 16 16 |        |             |                 ee 65 94 60 d2 60        --  . e . ` . `
1889:093 | DONE dir | na 16 16 | 006603 | (5 bytes)   |         .byte 61, 62, 6f, 72, 74     
1889:093 | DONE dir | na 16 16 |        |             |                 61 62 6f 72 74           --  a b o r t
1889:094 | DONE wsp | na 16 16 |        |             |
1889:095 | DONE lbl | na 16 16 | 006608 |             | nt_parse                             
1889:096 | DONE dir | na 16 16 | 006608 | (2 bytes)   |         .byte 5, 00                  
1889:096 | DONE dir | na 16 16 |        |             |                 05 00                    --  . .
1889:097 | DONE dir | na 16 16 | 00660a | (6 bytes)   |         .word nt_abort, xt_parse, 0064b2 
1889:097 | DONE dir | na 16 16 |        |             |                 fb 65 80 64 b2 64        --  . e . d . d
1889:098 | DONE dir | na 16 16 | 006610 | (5 bytes)   |         .byte 70, 61, 72, 73, 65     
1889:098 | DONE dir | na 16 16 |        |             |                 70 61 72 73 65           --  p a r s e
1889:099 | DONE wsp | na 16 16 |        |             |
1889:100 | DONE lbl | na 16 16 | 006615 |             | nt_quit                              
1889:101 | DONE dir | na 16 16 | 006615 | (2 bytes)   |         .byte 4, 00                  
1889:101 | DONE dir | na 16 16 |        |             |                 04 00                    --  . .
1889:102 | DONE dir | na 16 16 | 006617 | (6 bytes)   |         .word nt_parse, xt_quit, 0060d2 
1889:102 | DONE dir | na 16 16 |        |             |                 08 66 9c 60 d2 60        --  . f . ` . `
1889:103 | DONE dir | na 16 16 | 00661d | (4 bytes)   |         .byte 71, 75, 69, 74         
1889:103 | DONE dir | na 16 16 |        |             |                 71 75 69 74              --  q u i t
1889:104 | DONE wsp | na 16 16 |        |             |
1889:105 | DONE lbl | na 16 16 | 006621 |             | nt_question                          
1889:106 | DONE dir | na 16 16 | 006621 | (2 bytes)   |         .byte 1, { PW + NC }         
1889:106 | DONE dir | na 16 16 |        |             |                 01 90                    --  . .
1889:107 | DONE dir | na 16 16 | 006623 | (6 bytes)   |         .word nt_quit, xt_question, 0060ed 
1889:107 | DONE dir | na 16 16 |        |             |                 15 66 e7 60 ed 60        --  . f . ` . `
1889:108 | DONE dir | na 16 16 | 006629 | (1 bytes)   |         .byte 3f                     
1889:108 | DONE dir | na 16 16 |        |             |                 3f                       --  ?
1889:109 | DONE wsp | na 16 16 |        |             |
1889:110 | DONE lbl | na 16 16 | 00662a |             | nt_name-int                          
1889:111 | DONE dir | na 16 16 | 00662a | (2 bytes)   |         .byte 8, { PW + NC }         
1889:111 | DONE dir | na 16 16 |        |             |                 08 90                    --  . .
1889:112 | DONE dir | na 16 16 | 00662c | (6 bytes)   |         .word nt_question, xt_name-int, 006419 
1889:112 | DONE dir | na 16 16 |        |             |                 21 66 11 64 19 64        --  ! f . d . d
1889:113 | DONE dir | na 16 16 | 006632 | (8 bytes)   |         .byte 6e, 61, 6d, 65, 3e, 69, 6e, 74 
1889:113 | DONE dir | na 16 16 |        |             |                 6e 61 6d 65 3e 69 6e 74  --  n a m e > i n t
1889:113 | DONE dir | na 16 16 |        |             |                                          -- 
1889:114 | DONE wsp | na 16 16 |        |             |
1889:115 | DONE lbl | na 16 16 | 00663a |             | nt_cr                                
1889:116 | DONE dir | na 16 16 | 00663a | (2 bytes)   |         .byte 2, { PW + NC }         
1889:116 | DONE dir | na 16 16 |        |             |                 02 90                    --  . .
1889:117 | DONE dir | na 16 16 | 00663c | (6 bytes)   |         .word nt_name-int, xt_cr, 006256 
1889:117 | DONE dir | na 16 16 |        |             |                 2a 66 50 62 56 62        --  * f P b V b
1889:118 | DONE dir | na 16 16 | 006642 | (2 bytes)   |         .byte 63, 72                 
1889:118 | DONE dir | na 16 16 |        |             |                 63 72                    --  c r
1889:119 | DONE wsp | na 16 16 |        |             |
1889:120 | DONE lbl | na 16 16 | 006644 |             | nt_bl                                
1889:121 | DONE dir | na 16 16 | 006644 | (2 bytes)   |         .byte 2, { PW + NC }         
1889:121 | DONE dir | na 16 16 |        |             |                 02 90                    --  . .
1889:122 | DONE dir | na 16 16 | 006646 | (6 bytes)   |         .word nt_cr, xt_bl, 006222   
1889:122 | DONE dir | na 16 16 |        |             |                 3a 66 1b 62 22 62        --  : f . b " b
1889:123 | DONE dir | na 16 16 | 00664c | (2 bytes)   |         .byte 62, 6c                 
1889:123 | DONE dir | na 16 16 |        |             |                 62 6c                    --  b l
1889:124 | DONE wsp | na 16 16 |        |             |
1889:125 | DONE lbl | na 16 16 | 00664e |             | nt_spaces                            
1889:126 | DONE dir | na 16 16 | 00664e | (2 bytes)   |         .byte 6, { PW + NC }         
1889:126 | DONE dir | na 16 16 |        |             |                 06 90                    --  . .
1889:127 | DONE dir | na 16 16 | 006650 | (6 bytes)   |         .word nt_bl, xt_spaces, 006516 
1889:127 | DONE dir | na 16 16 |        |             |                 44 66 0a 65 16 65        --  D f 
 e . e
1889:128 | DONE dir | na 16 16 | 006656 | (6 bytes)   |         .byte 73, 70, 61, 63, 65, 73 
1889:128 | DONE dir | na 16 16 |        |             |                 73 70 61 63 65 73        --  s p a c e s
1889:129 | DONE wsp | na 16 16 |        |             |
1889:130 | DONE lbl | na 16 16 | 00665c |             | nt_space                             
1889:131 | DONE dir | na 16 16 | 00665c | (2 bytes)   |         .byte 5, { PW + NC }         
1889:131 | DONE dir | na 16 16 |        |             |                 05 90                    --  . .
1889:132 | DONE dir | na 16 16 | 00665e | (6 bytes)   |         .word nt_spaces, xt_space, 006509 
1889:132 | DONE dir | na 16 16 |        |             |                 4e 66 03 65 09 65        --  N f . e 	 e
1889:133 | DONE dir | na 16 16 | 006664 | (5 bytes)   |         .byte 73, 70, 61, 63, 65     
1889:133 | DONE dir | na 16 16 |        |             |                 73 70 61 63 65           --  s p a c e
1889:134 | DONE wsp | na 16 16 |        |             |
1889:135 | DONE lbl | na 16 16 | 006669 |             | nt_dots                              
1889:136 | DONE dir | na 16 16 | 006669 | (2 bytes)   |         .byte 2, { PW + NC }         
1889:136 | DONE dir | na 16 16 |        |             |                 02 90                    --  . .
1889:137 | DONE dir | na 16 16 | 00666b | (6 bytes)   |         .word nt_space, xt_dots, 006344 
1889:137 | DONE dir | na 16 16 |        |             |                 5c 66 fd 62 44 63        --  \ f . b D c
1889:138 | DONE dir | na 16 16 | 006671 | (2 bytes)   |         .byte 2e, 73                 
1889:138 | DONE dir | na 16 16 |        |             |                 2e 73                    --  . s
1889:139 | DONE wsp | na 16 16 |        |             |
1889:140 | DONE lbl | na 16 16 | 006673 |             | nt_dotparen                          
1889:141 | DONE dir | na 16 16 | 006673 | (2 bytes)   |         .byte 2, { IM + NC}          
1889:141 | DONE dir | na 16 16 |        |             |                 02 30                    --  . 0
1889:142 | DONE dir | na 16 16 | 006675 | (6 bytes)   |         .word nt_dots, xt_dotparen, 0062fc 
1889:142 | DONE dir | na 16 16 |        |             |                 69 66 ef 62 fc 62        --  i f . b . b
1889:143 | DONE dir | na 16 16 | 00667b | (2 bytes)   |         .byte 2e, 28                 
1889:143 | DONE dir | na 16 16 |        |             |                 2e 28                    --  . (
1889:144 | DONE wsp | na 16 16 |        |             |
1889:145 | DONE lbl | na 16 16 | 00667d |             | nt_type                              
1889:146 | DONE dir | na 16 16 | 00667d | (2 bytes)   |         .byte 4, 0                   
1889:146 | DONE dir | na 16 16 |        |             |                 04 00                    --  . .
1889:147 | DONE dir | na 16 16 | 00667f | (6 bytes)   |         .word nt_dotparen, xt_type, 006556 
1889:147 | DONE dir | na 16 16 |        |             |                 73 66 36 65 56 65        --  s f 6 e V e
1889:148 | DONE dir | na 16 16 | 006685 | (4 bytes)   |         .byte 74, 79, 70, 65         
1889:148 | DONE dir | na 16 16 |        |             |                 74 79 70 65              --  t y p e
1889:149 | DONE wsp | na 16 16 |        |             |
1889:150 | DONE lbl | na 16 16 | 006689 |             | nt_dot                               
1889:151 | DONE dir | na 16 16 | 006689 | (2 bytes)   |         .byte 1, { PW + NC }         
1889:151 | DONE dir | na 16 16 |        |             |                 01 90                    --  . .
1889:152 | DONE dir | na 16 16 | 00668b | (6 bytes)   |         .word nt_type, xt_dot, 0062ee 
1889:152 | DONE dir | na 16 16 |        |             |                 7d 66 d9 62 ee 62        --  } f . b . b
1889:153 | DONE dir | na 16 16 | 006691 | (1 bytes)   |         .byte 2e                     
1889:153 | DONE dir | na 16 16 |        |             |                 2e                       --  .
1889:154 | DONE wsp | na 16 16 |        |             |
1889:155 | DONE lbl | na 16 16 | 006692 |             | nt_pad                               
1889:156 | DONE dir | na 16 16 | 006692 | (2 bytes)   |         .byte 3, { PW + NC }         
1889:156 | DONE dir | na 16 16 |        |             |                 03 90                    --  . .
1889:157 | DONE dir | na 16 16 | 006694 | (6 bytes)   |         .word nt_dot, xt_pad, 006440 
1889:157 | DONE dir | na 16 16 |        |             |                 89 66 35 64 40 64        --  . f 5 d @ d
1889:158 | DONE dir | na 16 16 | 00669a | (3 bytes)   |         .byte 70, 61, 64             
1889:158 | DONE dir | na 16 16 |        |             |                 70 61 64                 --  p a d
1889:159 | DONE wsp | na 16 16 |        |             |
1889:160 | DONE lbl | na 16 16 | 00669d |             | nt_evaluate                          
1889:161 | DONE dir | na 16 16 | 00669d | (2 bytes)   |         .byte 8, { PW + NC }         
1889:161 | DONE dir | na 16 16 |        |             |                 08 90                    --  . .
1889:162 | DONE dir | na 16 16 | 00669f | (6 bytes)   |         .word nt_pad, xt_evaluate, 0063a4 
1889:162 | DONE dir | na 16 16 |        |             |                 92 66 76 63 a4 63        --  . f v c . c
1889:163 | DONE dir | na 16 16 | 0066a5 | (8 bytes)   |         .byte 65, 76, 61, 6c, 75, 61, 74, 65 
1889:163 | DONE dir | na 16 16 |        |             |                 65 76 61 6c 75 61 74 65  --  e v a l u a t e
1889:163 | DONE dir | na 16 16 |        |             |                                          -- 
1889:164 | DONE wsp | na 16 16 |        |             |
1889:165 | DONE lbl | na 16 16 | 0066ad |             | nt_cells                             
1889:166 | DONE dir | na 16 16 | 0066ad | (2 bytes)   |         .byte 5, { PW + NC }         ; 2* because we have 16 bit stack
1889:166 | DONE dir | na 16 16 |        |             |                 05 90                    --  . .
1889:167 | DONE dir | na 16 16 | 0066af | (6 bytes)   |         .word nt_evaluate, xt_two-star, 00612f 
1889:167 | DONE dir | na 16 16 |        |             |                 9d 66 2c 61 2f 61        --  . f , a / a
1889:168 | DONE dir | na 16 16 | 0066b5 | (5 bytes)   |         .byte 63, 65, 6c, 6c, 73     
1889:168 | DONE dir | na 16 16 |        |             |                 63 65 6c 6c 73           --  c e l l s
1889:169 | DONE wsp | na 16 16 |        |             |
1889:170 | DONE lbl | na 16 16 | 0066ba |             | nt_allot                             
1889:171 | DONE dir | na 16 16 | 0066ba | (2 bytes)   |         .byte 5, { PW + NC }         
1889:171 | DONE dir | na 16 16 |        |             |                 05 90                    --  . .
1889:172 | DONE dir | na 16 16 | 0066bc | (6 bytes)   |         .word nt_cells, xt_allot, 006213 
1889:172 | DONE dir | na 16 16 |        |             |                 ad 66 eb 61 13 62        --  . f . a . b
1889:173 | DONE dir | na 16 16 | 0066c2 | (5 bytes)   |         .byte 61, 6c, 6c, 6f, 74     
1889:173 | DONE dir | na 16 16 |        |             |                 61 6c 6c 6f 74           --  a l l o t
1889:174 | DONE wsp | na 16 16 |        |             |
1889:175 | DONE lbl | na 16 16 | 0066c7 |             | nt_create                            
1889:176 | DONE dir | na 16 16 | 0066c7 | (2 bytes)   |         .byte 6, { PW + NC }         
1889:176 | DONE dir | na 16 16 |        |             |                 06 90                    --  . .
1889:177 | DONE dir | na 16 16 | 0066c9 | (6 bytes)   |         .word nt_allot, xt_create, 0062c9 
1889:177 | DONE dir | na 16 16 |        |             |                 ba 66 57 62 c9 62        --  . f W b . b
1889:178 | DONE dir | na 16 16 | 0066cf | (6 bytes)   |         .byte 63, 72, 65, 61, 74, 65 
1889:178 | DONE dir | na 16 16 |        |             |                 63 72 65 61 74 65        --  c r e a t e
1889:179 | DONE wsp | na 16 16 |        |             |
1889:180 | DONE lbl | na 16 16 | 0066d5 |             | nt_name-string                       
1889:181 | DONE dir | na 16 16 | 0066d5 | (2 bytes)   |         .byte 0b, { PW + NC }        
1889:181 | DONE dir | na 16 16 |        |             |                 0b 90                    --   .
1889:182 | DONE dir | na 16 16 | 0066d7 | (6 bytes)   |         .word nt_create, xt_name-string, 00642a 
1889:182 | DONE dir | na 16 16 |        |             |                 c7 66 1a 64 2a 64        --  . f . d * d
1889:183 | DONE dir | na 16 16 | 0066dd | (11 bytes)  |         .byte 6e, 61, 6d, 65, 3e, 73, 74, 72, 69, 6e, 67 
1889:183 | DONE dir | na 16 16 |        |             |                 6e 61 6d 65 3e 73 74 72  --  n a m e > s t r
1889:183 | DONE dir | na 16 16 |        |             |                 69 6e 67                 --  i n g
1889:184 | DONE wsp | na 16 16 |        |             |
1889:185 | DONE lbl | na 16 16 | 0066e8 |             | nt_2dup                              
1889:186 | DONE dir | na 16 16 | 0066e8 | (2 bytes)   |         .byte 4, { PW + NC }         
1889:186 | DONE dir | na 16 16 |        |             |                 04 90                    --  . .
1889:187 | DONE dir | na 16 16 | 0066ea | (6 bytes)   |         .word nt_name-string, xt_2dup, 006141 
1889:187 | DONE dir | na 16 16 |        |             |                 d5 66 37 61 41 61        --  . f 7 a A a
1889:188 | DONE dir | na 16 16 | 0066f0 | (4 bytes)   |         .byte 32, 64, 75, 70         
1889:188 | DONE dir | na 16 16 |        |             |                 32 64 75 70              --  2 d u p
1889:189 | DONE wsp | na 16 16 |        |             |
1889:190 | DONE lbl | na 16 16 | 0066f4 |             | nt_abs                               
1889:191 | DONE dir | na 16 16 | 0066f4 | (2 bytes)   |         .byte 3, { PW + NC }         
1889:191 | DONE dir | na 16 16 |        |             |                 03 90                    --  . .
1889:192 | DONE dir | na 16 16 | 0066f6 | (6 bytes)   |         .word nt_2dup, xt_abs, 006166 
1889:192 | DONE dir | na 16 16 |        |             |                 e8 66 5e 61 66 61        --  . f ^ a f a
1889:193 | DONE dir | na 16 16 | 0066fc | (3 bytes)   |         .byte 61, 62, 73             
1889:193 | DONE dir | na 16 16 |        |             |                 61 62 73                 --  a b s
1889:194 | DONE wsp | na 16 16 |        |             |
1889:195 | DONE lbl | na 16 16 | 0066ff |             | nt_state                             
1889:196 | DONE dir | na 16 16 | 0066ff | (2 bytes)   |         .byte 5, { PW + NC }         
1889:196 | DONE dir | na 16 16 |        |             |                 05 90                    --  . .
1889:197 | DONE dir | na 16 16 | 006701 | (6 bytes)   |         .word nt_abs, xt_state, 00651e 
1889:197 | DONE dir | na 16 16 |        |             |                 f4 66 17 65 1e 65        --  . f . e . e
1889:198 | DONE dir | na 16 16 | 006707 | (5 bytes)   |         .byte 73, 74, 61, 74, 65     
1889:198 | DONE dir | na 16 16 |        |             |                 73 74 61 74 65           --  s t a t e
1889:199 | DONE wsp | na 16 16 |        |             |
1889:200 | DONE lbl | na 16 16 | 00670c |             | nt_to-in                             
1889:201 | DONE dir | na 16 16 | 00670c | (2 bytes)   |         .byte 3, { PW + NC }         
1889:201 | DONE dir | na 16 16 |        |             |                 03 90                    --  . .
1889:202 | DONE dir | na 16 16 | 00670e | (6 bytes)   |         .word nt_state, xt_to-in, 0060da 
1889:202 | DONE dir | na 16 16 |        |             |                 ff 66 d3 60 da 60        --  . f . ` . `
1889:203 | DONE dir | na 16 16 | 006714 | (3 bytes)   |         .byte 3e, 69, 6e             
1889:203 | DONE dir | na 16 16 |        |             |                 3e 69 6e                 --  > i n
1889:204 | DONE wsp | na 16 16 |        |             |
1889:205 | DONE lbl | na 16 16 | 006717 |             | nt_source                            
1889:206 | DONE dir | na 16 16 | 006717 | (2 bytes)   |         .byte 6, { PW + NC }         
1889:206 | DONE dir | na 16 16 |        |             |                 06 90                    --  . .
1889:207 | DONE dir | na 16 16 | 006719 | (6 bytes)   |         .word nt_to-in, xt_source, 0064fb 
1889:207 | DONE dir | na 16 16 |        |             |                 0c 67 ef 64 fb 64        --   g . d . d
1889:208 | DONE dir | na 16 16 | 00671f | (6 bytes)   |         .byte 73, 6f, 75, 72, 63, 65 
1889:208 | DONE dir | na 16 16 |        |             |                 73 6f 75 72 63 65        --  s o u r c e
1889:209 | DONE wsp | na 16 16 |        |             |
1889:210 | DONE lbl | na 16 16 | 006725 |             | nt_depth                             
1889:211 | DONE dir | na 16 16 | 006725 | (2 bytes)   |         .byte 5, { PW + NC }         
1889:211 | DONE dir | na 16 16 |        |             |                 05 90                    --  . .
1889:212 | DONE dir | na 16 16 | 006727 | (6 bytes)   |         .word nt_source, xt_depth, 0062d8 
1889:212 | DONE dir | na 16 16 |        |             |                 17 67 ca 62 d8 62        --  . g . b . b
1889:213 | DONE dir | na 16 16 | 00672d | (5 bytes)   |         .byte 64, 65, 70, 74, 68     
1889:213 | DONE dir | na 16 16 |        |             |                 64 65 70 74 68           --  d e p t h
1889:214 | DONE wsp | na 16 16 |        |             |
1889:215 | DONE lbl | na 16 16 | 006732 |             | nt_constant                          
1889:216 | DONE dir | na 16 16 | 006732 | (2 bytes)   |         .byte 8, { PW + NC }         
1889:216 | DONE dir | na 16 16 |        |             |                 08 90                    --  . .
1889:217 | DONE dir | na 16 16 | 006734 | (6 bytes)   |         .word nt_depth, xt_constant, 006240 
1889:217 | DONE dir | na 16 16 |        |             |                 25 67 27 62 40 62        --  % g ' b @ b
1889:218 | DONE dir | na 16 16 | 00673a | (8 bytes)   |         .byte 63, 6f, 6e, 73, 74, 61, 6e, 74 
1889:218 | DONE dir | na 16 16 |        |             |                 63 6f 6e 73 74 61 6e 74  --  c o n s t a n t
1889:218 | DONE dir | na 16 16 |        |             |                                          -- 
1889:219 | DONE wsp | na 16 16 |        |             |
1889:220 | DONE lbl | na 16 16 | 006742 |             | nt_variable                          
1889:221 | DONE dir | na 16 16 | 006742 | (2 bytes)   |         .byte 8, { PW + NC }         
1889:221 | DONE dir | na 16 16 |        |             |                 08 90                    --  . .
1889:222 | DONE dir | na 16 16 | 006744 | (6 bytes)   |         .word nt_constant, xt_variable, 00656f 
1889:222 | DONE dir | na 16 16 |        |             |                 32 67 63 65 6f 65        --  2 g c e o e
1889:223 | DONE dir | na 16 16 | 00674a | (8 bytes)   |         .byte 76, 61, 72, 69, 61, 62, 6c, 65 
1889:223 | DONE dir | na 16 16 |        |             |                 76 61 72 69 61 62 6c 65  --  v a r i a b l e
1889:223 | DONE dir | na 16 16 |        |             |                                          -- 
1889:224 | DONE wsp | na 16 16 |        |             |
1889:225 | DONE lbl | na 16 16 | 006752 |             | nt_tick                              
1889:226 | DONE dir | na 16 16 | 006752 | (2 bytes)   |         .byte 1, { PW + NC }         
1889:226 | DONE dir | na 16 16 |        |             |                 01 90                    --  . .
1889:227 | DONE dir | na 16 16 | 006754 | (6 bytes)   |         .word nt_variable, xt_tick, 00615d 
1889:227 | DONE dir | na 16 16 |        |             |                 42 67 42 61 5d 61        --  B g B a ] a
1889:228 | DONE dir | na 16 16 | 00675a | (1 bytes)   |         .byte 27                     ; hex for "'"
1889:228 | DONE dir | na 16 16 |        |             |                 27                       --  '
1889:229 | DONE wsp | na 16 16 |        |             |
1889:230 | DONE lbl | na 16 16 | 00675b |             | nt_two-star                          
1889:231 | DONE dir | na 16 16 | 00675b | (2 bytes)   |         .byte 2, { PW + NC }         
1889:231 | DONE dir | na 16 16 |        |             |                 02 90                    --  . .
1889:232 | DONE dir | na 16 16 | 00675d | (6 bytes)   |         .word nt_tick, xt_two-star, 00612f 
1889:232 | DONE dir | na 16 16 |        |             |                 52 67 2c 61 2f 61        --  R g , a / a
1889:233 | DONE dir | na 16 16 | 006763 | (2 bytes)   |         .byte 32, 2a                 
1889:233 | DONE dir | na 16 16 |        |             |                 32 2a                    --  2 *
1889:234 | DONE wsp | na 16 16 |        |             |
1889:235 | DONE lbl | na 16 16 | 006765 |             | nt_minus                             
1889:236 | DONE dir | na 16 16 | 006765 | (2 bytes)   |         .byte 1, { PW + NC }         
1889:236 | DONE dir | na 16 16 |        |             |                 01 90                    --  . .
1889:237 | DONE dir | na 16 16 | 006767 | (6 bytes)   |         .word nt_two-star, xt_minus, 00610f 
1889:237 | DONE dir | na 16 16 |        |             |                 5b 67 05 61 0f 61        --  [ g . a . a
1889:238 | DONE dir | na 16 16 | 00676d | (1 bytes)   |         .byte 2d                     
1889:238 | DONE dir | na 16 16 |        |             |                 2d                       --  -
1889:239 | DONE wsp | na 16 16 |        |             |
1889:240 | DONE lbl | na 16 16 | 00676e |             | nt_plus                              
1889:241 | DONE dir | na 16 16 | 00676e | (2 bytes)   |         .byte 1, { PW + NC }         
1889:241 | DONE dir | na 16 16 |        |             |                 01 90                    --  . .
1889:242 | DONE dir | na 16 16 | 006770 | (6 bytes)   |         .word nt_minus, xt_plus, 006104 
1889:242 | DONE dir | na 16 16 |        |             |                 65 67 fd 60 04 61        --  e g . ` . a
1889:243 | DONE dir | na 16 16 | 006776 | (1 bytes)   |         .byte 2b                     
1889:243 | DONE dir | na 16 16 |        |             |                 2b                       --  +
1889:244 | DONE wsp | na 16 16 |        |             |
1889:245 | DONE lbl | na 16 16 | 006777 |             | nt_one-minus                         
1889:246 | DONE dir | na 16 16 | 006777 | (2 bytes)   |         .byte 2, { PW + NC }         
1889:246 | DONE dir | na 16 16 |        |             |                 02 90                    --  . .
1889:247 | DONE dir | na 16 16 | 006779 | (6 bytes)   |         .word nt_plus, xt_one-minus, 006121 
1889:247 | DONE dir | na 16 16 |        |             |                 6e 67 20 61 21 61        --  n g   a ! a
1889:248 | DONE dir | na 16 16 | 00677f | (2 bytes)   |         .byte 31, 2d                 
1889:248 | DONE dir | na 16 16 |        |             |                 31 2d                    --  1 -
1889:249 | DONE wsp | na 16 16 |        |             |
1889:250 | DONE lbl | na 16 16 | 006781 |             | nt_one-plus                          
1889:251 | DONE dir | na 16 16 | 006781 | (2 bytes)   |         .byte 2, { PW + NC }         
1889:251 | DONE dir | na 16 16 |        |             |                 02 90                    --  . .
1889:252 | DONE dir | na 16 16 | 006783 | (6 bytes)   |         .word nt_one-minus, xt_one-plus, 006123 
1889:252 | DONE dir | na 16 16 |        |             |                 77 67 22 61 23 61        --  w g " a # a
1889:253 | DONE dir | na 16 16 | 006789 | (2 bytes)   |         .byte 31, 2b                 
1889:253 | DONE dir | na 16 16 |        |             |                 31 2b                    --  1 +
1889:254 | DONE wsp | na 16 16 |        |             |
1889:255 | DONE lbl | na 16 16 | 00678b |             | nt_false                             
1889:256 | DONE dir | na 16 16 | 00678b | (2 bytes)   |         .byte 5, { PW + NC }         
1889:256 | DONE dir | na 16 16 |        |             |                 05 90                    --  . .
1889:257 | DONE dir | na 16 16 | 00678d | (6 bytes)   |         .word nt_one-plus, xt_zero, 006117 
1889:257 | DONE dir | na 16 16 |        |             |                 81 67 10 61 17 61        --  . g . a . a
1889:258 | DONE dir | na 16 16 | 006793 | (5 bytes)   |         .byte 66, 61, 6c, 73, 65     
1889:258 | DONE dir | na 16 16 |        |             |                 66 61 6c 73 65           --  f a l s e
1889:259 | DONE wsp | na 16 16 |        |             |
1889:260 | DONE lbl | na 16 16 | 006798 |             | nt_true                              
1889:261 | DONE dir | na 16 16 | 006798 | (2 bytes)   |         .byte 4, { PW + NC }         
1889:261 | DONE dir | na 16 16 |        |             |                 04 90                    --  . .
1889:262 | DONE dir | na 16 16 | 00679a | (6 bytes)   |         .word nt_false, xt_true, 00652c 
1889:262 | DONE dir | na 16 16 |        |             |                 8b 67 25 65 2c 65        --  . g % e , e
1889:263 | DONE dir | na 16 16 | 0067a0 | (4 bytes)   |         .byte 74, 72, 75, 65         
1889:263 | DONE dir | na 16 16 |        |             |                 74 72 75 65              --  t r u e
1889:264 | DONE wsp | na 16 16 |        |             |
1889:265 | DONE lbl | na 16 16 | 0067a4 |             | nt_two                               
1889:266 | DONE dir | na 16 16 | 0067a4 | (2 bytes)   |         .byte 1, { PW + NC }         
1889:266 | DONE dir | na 16 16 |        |             |                 01 90                    --  . .
1889:267 | DONE dir | na 16 16 | 0067a6 | (6 bytes)   |         .word nt_true, xt_two, 00612b 
1889:267 | DONE dir | na 16 16 |        |             |                 98 67 24 61 2b 61        --  . g $ a + a
1889:268 | DONE dir | na 16 16 | 0067ac | (1 bytes)   |         .byte 32                     
1889:268 | DONE dir | na 16 16 |        |             |                 32                       --  2
1889:269 | DONE wsp | na 16 16 |        |             |
1889:270 | DONE lbl | na 16 16 | 0067ad |             | nt_one                               
1889:271 | DONE dir | na 16 16 | 0067ad | (2 bytes)   |         .byte 1, { PW + NC }         
1889:271 | DONE dir | na 16 16 |        |             |                 01 90                    --  . .
1889:272 | DONE dir | na 16 16 | 0067af | (6 bytes)   |         .word nt_two, xt_one, 00611f 
1889:272 | DONE dir | na 16 16 |        |             |                 a4 67 18 61 1f 61        --  . g . a . a
1889:273 | DONE dir | na 16 16 | 0067b5 | (1 bytes)   |         .byte 31                     
1889:273 | DONE dir | na 16 16 |        |             |                 31                       --  1
1889:274 | DONE wsp | na 16 16 |        |             |
1889:275 | DONE lbl | na 16 16 | 0067b6 |             | nt_zero                              
1889:276 | DONE dir | na 16 16 | 0067b6 | (2 bytes)   |         .byte 1, { PW + NC }         
1889:276 | DONE dir | na 16 16 |        |             |                 01 90                    --  . .
1889:277 | DONE dir | na 16 16 | 0067b8 | (6 bytes)   |         .word nt_one, xt_zero, 006117 
1889:277 | DONE dir | na 16 16 |        |             |                 ad 67 10 61 17 61        --  . g . a . a
1889:278 | DONE dir | na 16 16 | 0067be | (1 bytes)   |         .byte 30                     
1889:278 | DONE dir | na 16 16 |        |             |                 30                       --  0
1889:279 | DONE wsp | na 16 16 |        |             |
1889:280 | DONE lbl | na 16 16 | 0067bf |             | nt_find-name                         
1889:281 | DONE dir | na 16 16 | 0067bf | (2 bytes)   |         .byte 9, 0                   
1889:281 | DONE dir | na 16 16 |        |             |                 09 00                    --  	 .
1889:282 | DONE dir | na 16 16 | 0067c1 | (6 bytes)   |         .word nt_zero, xt_find-name, 006409 
1889:282 | DONE dir | na 16 16 |        |             |                 b6 67 b3 63 09 64        --  . g . c 	 d
1889:283 | DONE dir | na 16 16 | 0067c7 | (9 bytes)   |         .byte 66, 69, 6e, 64, 2d, 6e, 61, 6d, 65 
1889:283 | DONE dir | na 16 16 |        |             |                 66 69 6e 64 2d 6e 61 6d  --  f i n d - n a m
1889:283 | DONE dir | na 16 16 |        |             |                 65                       --  e
1889:284 | DONE wsp | na 16 16 |        |             |
1889:285 | DONE lbl | na 16 16 | 0067d0 |             | nt_refill                            
1889:286 | DONE dir | na 16 16 | 0067d0 | (2 bytes)   |         .byte 6, { PW }              ; TODO check flags
1889:286 | DONE dir | na 16 16 |        |             |                 06 80                    --  . .
1889:287 | DONE dir | na 16 16 | 0067d2 | (6 bytes)   |         .word nt_find-name, xt_refill, 0064e5 
1889:287 | DONE dir | na 16 16 |        |             |                 bf 67 b3 64 e5 64        --  . g . d . d
1889:288 | DONE dir | na 16 16 | 0067d8 | (6 bytes)   |         .byte 72, 65, 66, 69, 6c, 6c 
1889:288 | DONE dir | na 16 16 |        |             |                 72 65 66 69 6c 6c        --  r e f i l l
1889:289 | DONE wsp | na 16 16 |        |             |
1889:290 | DONE lbl | na 16 16 | 0067de |             | nt_parse-name                        
1889:291 | DONE dir | na 16 16 | 0067de | (2 bytes)   |         .byte &10, 0                 
1889:291 | DONE dir | na 16 16 |        |             |                 0a 00                    --  
 .
1889:292 | DONE dir | na 16 16 | 0067e0 | (6 bytes)   |         .word nt_refill, xt_parse-name, 0064b2 
1889:292 | DONE dir | na 16 16 |        |             |                 d0 67 4e 64 b2 64        --  . g N d . d
1889:293 | DONE dir | na 16 16 | 0067e6 | (10 bytes)  |         .byte 70, 61, 72, 73, 65, 2d, 6e, 61, 6d, 65 
1889:293 | DONE dir | na 16 16 |        |             |                 70 61 72 73 65 2d 6e 61  --  p a r s e - n a
1889:293 | DONE dir | na 16 16 |        |             |                 6d 65                    --  m e
1889:294 | DONE wsp | na 16 16 |        |             |
1889:295 | DONE lbl | na 16 16 | 0067f0 |             | nt_source-id                         
1889:296 | DONE dir | na 16 16 | 0067f0 | (2 bytes)   |         .byte 9, { PW + NC }         
1889:296 | DONE dir | na 16 16 |        |             |                 09 90                    --  	 .
1889:297 | DONE dir | na 16 16 | 0067f2 | (6 bytes)   |         .word nt_parse-name, xt_source-id, 006502 
1889:297 | DONE dir | na 16 16 |        |             |                 de 67 fc 64 02 65        --  . g . d . e
1889:298 | DONE dir | na 16 16 | 0067f8 | (9 bytes)   |         .byte 73, 6f, 75, 72, 63, 65, 2d, 69, 64 
1889:298 | DONE dir | na 16 16 |        |             |                 73 6f 75 72 63 65 2d 69  --  s o u r c e - i
1889:298 | DONE dir | na 16 16 |        |             |                 64                       --  d
1889:299 | DONE wsp | na 16 16 |        |             |
1889:300 | DONE lbl | na 16 16 | 006801 |             | nt_comma                             
1889:301 | DONE dir | na 16 16 | 006801 | (2 bytes)   |         .byte 1, { PW + NC }         
1889:301 | DONE dir | na 16 16 |        |             |                 01 90                    --  . .
1889:302 | DONE dir | na 16 16 | 006803 | (6 bytes)   |         .word nt_source-id, xt_comma, 0060e6 
1889:302 | DONE dir | na 16 16 |        |             |                 f0 67 db 60 e6 60        --  . g . ` . `
1889:303 | DONE dir | na 16 16 | 006809 | (1 bytes)   |         .byte 2c                     
1889:303 | DONE dir | na 16 16 |        |             |                 2c                       --  ,
1889:304 | DONE wsp | na 16 16 |        |             |
1889:305 | DONE lbl | na 16 16 | 00680a |             | nt_accept                            
1889:306 | DONE dir | na 16 16 | 00680a | (2 bytes)   |         .byte 6, 00                  ; TODO check flags
1889:306 | DONE dir | na 16 16 |        |             |                 06 00                    --  . .
1889:307 | DONE dir | na 16 16 | 00680c | (6 bytes)   |         .word nt_comma, xt_accept, 0061ea 
1889:307 | DONE dir | na 16 16 |        |             |                 01 68 67 61 ea 61        --  . h g a . a
1889:308 | DONE dir | na 16 16 | 006812 | (6 bytes)   |         .byte 61, 63, 63, 65, 70, 74 
1889:308 | DONE dir | na 16 16 |        |             |                 61 63 63 65 70 74        --  a c c e p t
1889:309 | DONE wsp | na 16 16 |        |             |
1889:310 | DONE lbl | na 16 16 | 006818 |             | nt_tuck                              
1889:311 | DONE dir | na 16 16 | 006818 | (2 bytes)   |         .byte 4, { PW + NC }         
1889:311 | DONE dir | na 16 16 |        |             |                 04 90                    --  . .
1889:312 | DONE dir | na 16 16 | 00681a | (6 bytes)   |         .word nt_accept, xt_tuck, 006535 
1889:312 | DONE dir | na 16 16 |        |             |                 0a 68 2d 65 35 65        --  
 h - e 5 e
1889:313 | DONE dir | na 16 16 | 006820 | (4 bytes)   |         .byte 74, 75, 63, 6b         
1889:313 | DONE dir | na 16 16 |        |             |                 74 75 63 6b              --  t u c k
1889:314 | DONE wsp | na 16 16 |        |             |
1889:315 | DONE lbl | na 16 16 | 006824 |             | nt_nip                               
1889:316 | DONE dir | na 16 16 | 006824 | (2 bytes)   |         .byte 3, { PW + NC }         
1889:316 | DONE dir | na 16 16 |        |             |                 03 90                    --  . .
1889:317 | DONE dir | na 16 16 | 006826 | (6 bytes)   |         .word nt_tuck, xt_nip, 00642d 
1889:317 | DONE dir | na 16 16 |        |             |                 18 68 2b 64 2d 64        --  . h + d - d
1889:318 | DONE dir | na 16 16 | 00682c | (3 bytes)   |         .byte 6e, 69, 70             
1889:318 | DONE dir | na 16 16 |        |             |                 6e 69 70                 --  n i p
1889:319 | DONE wsp | na 16 16 |        |             |
1889:320 | DONE lbl | na 16 16 | 00682f |             | nt_rot                               
1889:321 | DONE dir | na 16 16 | 00682f | (2 bytes)   |         .byte 3, { PW + NC }         
1889:321 | DONE dir | na 16 16 |        |             |                 03 90                    --  . .
1889:322 | DONE dir | na 16 16 | 006831 | (6 bytes)   |         .word nt_nip, xt_rot, 0064ee 
1889:322 | DONE dir | na 16 16 |        |             |                 24 68 e6 64 ee 64        --  $ h . d . d
1889:323 | DONE dir | na 16 16 | 006837 | (3 bytes)   |         .byte 72, 6f, 74             
1889:323 | DONE dir | na 16 16 |        |             |                 72 6f 74                 --  r o t
1889:324 | DONE wsp | na 16 16 |        |             |
1889:325 | DONE lbl | na 16 16 | 00683a |             | nt_execute                           
1889:326 | DONE dir | na 16 16 | 00683a | (2 bytes)   |         .byte 7, { PW + NC }         
1889:326 | DONE dir | na 16 16 |        |             |                 07 90                    --  . .
1889:327 | DONE dir | na 16 16 | 00683c | (6 bytes)   |         .word nt_rot, xt_execute, 0063b2 
1889:327 | DONE dir | na 16 16 |        |             |                 2f 68 a8 63 b2 63        --  / h . c . c
1889:328 | DONE dir | na 16 16 | 006842 | (7 bytes)   |         .byte 65, 78, 65, 63, 75, 74, 65 
1889:328 | DONE dir | na 16 16 |        |             |                 65 78 65 63 75 74 65     --  e x e c u t e
1889:329 | DONE wsp | na 16 16 |        |             |
1889:330 | DONE lbl | na 16 16 | 006849 |             | nt_here                              
1889:331 | DONE dir | na 16 16 | 006849 | (2 bytes)   |         .byte 4, { PW + NC }         
1889:331 | DONE dir | na 16 16 |        |             |                 04 90                    --  . .
1889:332 | DONE dir | na 16 16 | 00684b | (6 bytes)   |         .word nt_execute, xt_here, 006410 
1889:332 | DONE dir | na 16 16 |        |             |                 3a 68 0a 64 10 64        --  : h 
 d . d
1889:333 | DONE dir | na 16 16 | 006851 | (4 bytes)   |         .byte 68, 65, 72, 65         
1889:333 | DONE dir | na 16 16 |        |             |                 68 65 72 65              --  h e r e
1889:334 | DONE wsp | na 16 16 |        |             |
1889:335 | DONE lbl | na 16 16 | 006855 |             | nt_2drop                             
1889:336 | DONE dir | na 16 16 | 006855 | (2 bytes)   |         .byte 5, { PW + NC }         
1889:336 | DONE dir | na 16 16 |        |             |                 05 90                    --  . .
1889:337 | DONE dir | na 16 16 | 006857 | (6 bytes)   |         .word nt_here, xt_2drop, 006136 
1889:337 | DONE dir | na 16 16 |        |             |                 49 68 30 61 36 61        --  I h 0 a 6 a
1889:338 | DONE dir | na 16 16 | 00685d | (5 bytes)   |         .byte 32, 64, 72, 6f, 70     
1889:338 | DONE dir | na 16 16 |        |             |                 32 64 72 6f 70           --  2 d r o p
1889:339 | DONE wsp | na 16 16 |        |             |
1889:340 | DONE lbl | na 16 16 | 006862 |             | nt_over                              
1889:341 | DONE dir | na 16 16 | 006862 | (2 bytes)   |         .byte 4, { PW + NC }         
1889:341 | DONE dir | na 16 16 |        |             |                 04 90                    --  . .
1889:342 | DONE dir | na 16 16 | 006864 | (6 bytes)   |         .word nt_2drop, xt_over, 006434 
1889:342 | DONE dir | na 16 16 |        |             |                 55 68 2e 64 34 64        --  U h . d 4 d
1889:343 | DONE dir | na 16 16 | 00686a | (4 bytes)   |         .byte 6f, 76, 65, 72         
1889:343 | DONE dir | na 16 16 |        |             |                 6f 76 65 72              --  o v e r
1889:344 | DONE wsp | na 16 16 |        |             |
1889:345 | DONE lbl | na 16 16 | 00686e |             | nt_fetch                             
1889:346 | DONE dir | na 16 16 | 00686e | (2 bytes)   |         .byte 1, { PW + NC }         
1889:346 | DONE dir | na 16 16 |        |             |                 01 90                    --  . .
1889:347 | DONE dir | na 16 16 | 006870 | (6 bytes)   |         .word nt_over, xt_fetch, 0060fc 
1889:347 | DONE dir | na 16 16 |        |             |                 62 68 f8 60 fc 60        --  b h . ` . `
1889:348 | DONE dir | na 16 16 | 006876 | (1 bytes)   |         .byte 40                     
1889:348 | DONE dir | na 16 16 |        |             |                 40                       --  @
1889:349 | DONE wsp | na 16 16 |        |             |
1889:350 | DONE lbl | na 16 16 | 006877 |             | nt_store                             
1889:351 | DONE dir | na 16 16 | 006877 | (2 bytes)   |         .byte 1, { PW + NC }         
1889:351 | DONE dir | na 16 16 |        |             |                 01 90                    --  . .
1889:352 | DONE dir | na 16 16 | 006879 | (6 bytes)   |         .word nt_fetch, xt_store, 0060f7 
1889:352 | DONE dir | na 16 16 |        |             |                 6e 68 ee 60 f7 60        --  n h . ` . `
1889:353 | DONE dir | na 16 16 | 00687f | (1 bytes)   |         .byte 21                     
1889:353 | DONE dir | na 16 16 |        |             |                 21                       --  !
1889:354 | DONE wsp | na 16 16 |        |             |
1889:355 | DONE lbl | na 16 16 | 006880 |             | nt_swap                              
1889:356 | DONE dir | na 16 16 | 006880 | (2 bytes)   |         .byte 4, { PW + NC }         
1889:356 | DONE dir | na 16 16 |        |             |                 04 90                    --  . .
1889:357 | DONE dir | na 16 16 | 006882 | (6 bytes)   |         .word nt_store, xt_swap, 006524 
1889:357 | DONE dir | na 16 16 |        |             |                 77 68 1f 65 24 65        --  w h . e $ e
1889:358 | DONE dir | na 16 16 | 006888 | (4 bytes)   |         .byte 73, 77, 61, 70         
1889:358 | DONE dir | na 16 16 |        |             |                 73 77 61 70              --  s w a p
1889:359 | DONE wsp | na 16 16 |        |             |
1889:360 | DONE lbl | na 16 16 | 00688c |             | nt_dup                               
1889:361 | DONE dir | na 16 16 | 00688c | (2 bytes)   |         .byte 3, { PW + NC }         
1889:361 | DONE dir | na 16 16 |        |             |                 03 90                    --  . .
1889:362 | DONE dir | na 16 16 | 00688e | (6 bytes)   |         .word nt_swap, xt_dup, 006375 
1889:362 | DONE dir | na 16 16 |        |             |                 80 68 71 63 75 63        --  . h q c u c
1889:363 | DONE dir | na 16 16 | 006894 | (3 bytes)   |         .byte 64, 75, 70             
1889:363 | DONE dir | na 16 16 |        |             |                 64 75 70                 --  d u p
1889:364 | DONE wsp | na 16 16 |        |             |
1889:365 | DONE cmt | na 16 16 |        |             | ; DROP is always the first entry in dictionary
1889:366 | DONE lbl | na 16 16 | 006897 |             | nt_drop                              
1889:367 | DONE dir | na 16 16 | 006897 | (2 bytes)   |         .byte 4, { PW + NC }         
1889:367 | DONE dir | na 16 16 |        |             |                 04 90                    --  . .
1889:368 | DONE dir | na 16 16 | 006899 | (6 bytes)   |         .word nt_dup, xt_drop, 006349 
1889:368 | DONE dir | na 16 16 |        |             |                 8c 68 45 63 49 63        --  . h E c I c
1889:369 | DONE dir | na 16 16 | 00689f | (4 bytes)   |         .byte 64, 72, 6f, 70         
1889:369 | DONE dir | na 16 16 |        |             |                 64 72 6f 70              --  d r o p
1889:370 | DONE wsp | na 16 16 |        |             |
1889:371 | DONE cmt | na 16 16 |        |             | ; END
1890:000 | DONE wsp | na 16 16 |        |             |
1891:000 | DONE cmt | na 16 16 |        |             | ; ===================================================================
1892:000 | DONE cmt | na 16 16 |        |             | ; CODE FIELD ROUTINES
1893:000 | DONE wsp | na 16 16 |        |             |
1894:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1895:000 | DONE cmt | na 16 16 |        |             | ; DOVAR
1896:000 | DONE cmt | na 16 16 |        |             | ; Execute a variable: Push the address of the first bytes of the Data Field onto
1897:000 | DONE cmt | na 16 16 |        |             | ; the stack. This is called with JSR so we can pick up the address of the
1898:000 | DONE cmt | na 16 16 |        |             | ; calling variable off the 65816's Return Stack. The final RTS takes us to the
1899:000 | DONE cmt | na 16 16 |        |             | ; original caller of the routine that in turn called DOVAR. This is the default
1900:000 | DONE cmt | na 16 16 |        |             | ; routine installed with CREATE
1901:000 | DONE lbl | na 16 16 | 0068a3 |             | dovar                                
1902:000 | DONE dir | na 16 16 |        |             |         .!a16                        
1903:000 | DONE dir | na 16 16 |        |             |         .!xy16                       
1904:000 | DONE ins | na 16 16 | 0068a3 | ca          |                 dex                  ; make room on Data Stack
1905:000 | DONE ins | na 16 16 | 0068a4 | ca          |                 dex                  
1906:000 | DONE ins | na 16 16 | 0068a5 | 94 00       |                 sty.dx 00            
1907:000 | DONE wsp | na 16 16 |        |             |
1908:000 | DONE cmt | na 16 16 |        |             |                 ; The address we need is stored in the two bytes after the JSR
1909:000 | DONE cmt | na 16 16 |        |             |                 ; return address, which in turn is what is on top of the Return
1910:000 | DONE cmt | na 16 16 |        |             |                 ; Stack
1911:000 | DONE ins | na 16 16 | 0068a7 | 7a          |                 ply                  ; value is now TOS
1912:000 | DONE ins | na 16 16 | 0068a8 | c8          |                 iny                  ; add one because of 65816's address handling
1913:000 | DONE wsp | na 16 16 |        |             |
1914:000 | DONE ins | na 16 16 | 0068a9 | 60          |                 rts                  ; takes us to original caller
1915:000 | DONE wsp | na 16 16 |        |             |
1916:000 | DONE wsp | na 16 16 |        |             |
1917:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1918:000 | DONE cmt | na 16 16 |        |             | ; DOCONST
1919:000 | DONE cmt | na 16 16 |        |             | ; Execute a constant: Push the data in the first two byte of the Data Field onto
1920:000 | DONE cmt | na 16 16 |        |             | ; the stack
1921:000 | DONE lbl | na 16 16 | 0068aa |             | doconst                              
1922:000 | DONE dir | na 16 16 |        |             |         .!a16                        
1923:000 | DONE dir | na 16 16 |        |             |         .!xy16                       
1924:000 | DONE ins | na 16 16 | 0068aa | ca          |                 dex                  ; make room on Data Stack
1925:000 | DONE ins | na 16 16 | 0068ab | ca          |                 dex                  
1926:000 | DONE ins | na 16 16 | 0068ac | 94 00       |                 sty.dx 00            
1927:000 | DONE wsp | na 16 16 |        |             |
1928:000 | DONE cmt | na 16 16 |        |             |                 ; The value we need is stored two bytes after the JSR return
1929:000 | DONE cmt | na 16 16 |        |             |                 ; address, which in turn is what is on top of the Return Stack
1930:000 | DONE ins | na 16 16 | 0068ae | 68          |                 pla                  ; get the return address
1931:000 | DONE ins | na 16 16 | 0068af | 85 16       |                 sta.d 000216         
1932:000 | DONE wsp | na 16 16 |        |             |
1933:000 | DONE cmt | na 16 16 |        |             |                 ; start Y as index off with 1 instead of zero because of 65816's
1934:000 | DONE cmt | na 16 16 |        |             |                 ; address handling
1935:000 | DONE ins | na 16 16 | 0068b1 | a0 01 00    |                 ldy.# 0001           
1936:000 | DONE ins | na 16 16 | 0068b4 | b1 16       |                 lda.diy 000216       ; LDA (TMP1),Y
1937:000 | DONE ins | na 16 16 | 0068b6 | a8          |                 tay                  
1938:000 | DONE wsp | na 16 16 |        |             |
1939:000 | DONE ins | na 16 16 | 0068b7 | 60          |                 rts                  ; takes us to original caller
1940:000 | DONE wsp | na 16 16 |        |             |
1941:000 | DONE wsp | na 16 16 |        |             |
1942:000 | DONE cmt | na 16 16 |        |             | ; ===================================================================
1943:000 | DONE cmt | na 16 16 |        |             | ; LOW LEVEL HELPER FUNCTIONS
1944:000 | DONE wsp | na 16 16 |        |             |
1945:000 | DONE wsp | na 16 16 |        |             |
1946:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1947:000 | DONE cmt | na 16 16 |        |             | ; COMPILE OR EXECUTE (INTERPRET)
1948:000 | DONE cmt | na 16 16 |        |             | ; Core routine for interpreter called by EVALUATE and QUIT. We process one line
1949:000 | DONE cmt | na 16 16 |        |             | ; only. Assumes that address of name is in cib and length of whole input
1950:000 | DONE cmt | na 16 16 |        |             | ; string is in ciblen. Consider moving this up to QUIT once we know what we are
1951:000 | DONE cmt | na 16 16 |        |             | ; doing
1952:000 | DONE lbl | na 16 16 | 0068b8 |             | compex                               
1953:000 | DONE lbl | na 16 16 | 0068b8 |             | compex_loop                          
1954:000 | DONE cmt | na 16 16 |        |             |                 ; Normally we would use PARSE here with the SPACE character as
1955:000 | DONE cmt | na 16 16 |        |             |                 ; a parameter (PARSE replaces WORD in modern Forths). However,
1956:000 | DONE cmt | na 16 16 |        |             |                 ; Gforth's PARSE-NAME makes more sense as it uses spaces as
1957:000 | DONE cmt | na 16 16 |        |             |                 ; delimiters per default and skips any leading spaces, which
1958:000 | DONE cmt | na 16 16 |        |             |                 ; PARSE does not do.
1959:000 | DONE ins | na 16 16 | 0068b8 | 20 4e 64    |                 jsr 00644e           ; ( 'string' -- addr u )
1960:000 | DONE dir | na 16 16 |        |             |         .!a16                        
1961:000 | DONE cmt | na 16 16 |        |             |                 ; if PARSE-NAME returns 0 (empty line), no characters were left
1962:000 | DONE cmt | na 16 16 |        |             |                 ; in the line and we need to go get a new line
1963:000 | DONE ins | na 16 16 | 0068bb | 98          |                 tya                  ; force flag check
1964:000 | DONE ins | na 16 16 | 0068bc | f0 1d       |                 beq 0068db           
1965:000 | DONE wsp | na 16 16 |        |             |
1966:000 | DONE cmt | na 16 16 |        |             |                 ; We let the user input words in any case, but use lower case
1967:000 | DONE cmt | na 16 16 |        |             |                 ; internally (sorry, Garth).
1968:000 | DONE ins | na 16 16 | 0068be | 20 1b 69    |                 jsr 00691b           ; returns ( addr u )
1969:000 | DONE wsp | na 16 16 |        |             |
1970:000 | DONE cmt | na 16 16 |        |             |                 ; If we got something that is not a zero, we go to FIND-NAME to
1971:000 | DONE cmt | na 16 16 |        |             |                 ; get the nt. Returns ( nt | 0 )
1972:000 | DONE ins | na 16 16 | 0068c1 | 20 b3 63    |                 jsr 0063b3           
1973:000 | DONE dir | na 16 16 |        |             |         .!a16                        
1974:000 | DONE wsp | na 16 16 |        |             |
1975:000 | DONE cmt | na 16 16 |        |             |                 ; a zero signals that we didn't find a word in the Dictionary
1976:000 | DONE ins | na 16 16 | 0068c4 | 98          |                 tya                  ; force flag check
1977:000 | DONE ins | na 16 16 | 0068c5 | d0 06       |                 bne 0068cd           
1978:000 | DONE wsp | na 16 16 |        |             |
1979:000 | DONE cmt | na 16 16 |        |             |                 ; TODO No name token, try NUMBER CONVERSION
1980:000 | DONE wsp | na 16 16 |        |             |
1981:000 | DONE cmt | na 16 16 |        |             |                 ; Woe is us, all has failed
1982:000 | DONE ins | na 16 16 | 0068c7 | a9 0f 6b    |                 lda.# 006b0f         ; "Unknown word"
1983:000 | DONE ins | na 16 16 | 0068ca | 4c e2 68    |                 jmp 0068e2           
1984:000 | DONE wsp | na 16 16 |        |             |
1985:000 | DONE lbl | na 16 16 | 0068cd |             | compex_got_name_token                
1986:000 | DONE cmt | na 16 16 |        |             |                 ; TODO see if INTERPRETED OR COMPILED
1987:000 | DONE wsp | na 16 16 |        |             |
1988:000 | DONE cmt | na 16 16 |        |             |                 ; INTERPRET WORD
1989:000 | DONE cmt | na 16 16 |        |             |                 ; We arrive here with the nt as TOS. The xt of a word is
1990:000 | DONE cmt | na 16 16 |        |             |                 ; four bytes farther on, so this is a quick version of NAME>INT
1991:000 | DONE wsp | na 16 16 |        |             |
1992:000 | DONE dir | na 16 16 |        |             |         .!xy16                       
1993:000 | DONE ins | na 16 16 | 0068cd | c8          |                 iny                  
1994:000 | DONE ins | na 16 16 | 0068ce | c8          |                 iny                  
1995:000 | DONE ins | na 16 16 | 0068cf | c8          |                 iny                  
1996:000 | DONE ins | na 16 16 | 0068d0 | c8          |                 iny                  
1997:000 | DONE ins | na 16 16 | 0068d1 | b9 00 00    |                 lda.y 0000           ; LDA $0000,Y
1998:000 | DONE ins | na 16 16 | 0068d4 | a8          |                 tay                  
1999:000 | DONE wsp | na 16 16 |        |             |
2000:000 | DONE ins | na 16 16 | 0068d5 | 20 a8 63    |                 jsr 0063a8           
2001:000 | DONE wsp | na 16 16 |        |             |
2002:000 | DONE cmt | na 16 16 |        |             |                 ; that's quite enough for this word, let's get the next one
2003:000 | DONE ins | na 16 16 | 0068d8 | 4c b8 68    |                 jmp 0068b8           
2004:000 | DONE wsp | na 16 16 |        |             |
2005:000 | DONE lbl | na 16 16 | 0068db |             | compex_line_done                     
2006:000 | DONE cmt | na 16 16 |        |             |                 ; drop stuff from PARSE_NAME
2007:000 | DONE ins | na 16 16 | 0068db | b4 02       |                 ldy.dx 02            
2008:000 | DONE ins | na 16 16 | 0068dd | e8          |                 inx                  
2009:000 | DONE ins | na 16 16 | 0068de | e8          |                 inx                  
2010:000 | DONE ins | na 16 16 | 0068df | e8          |                 inx                  
2011:000 | DONE ins | na 16 16 | 0068e0 | e8          |                 inx                  
2012:000 | DONE wsp | na 16 16 |        |             |
2013:000 | DONE ins | na 16 16 | 0068e1 | 60          |                 rts                  
2014:000 | DONE wsp | na 16 16 |        |             |
2015:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
2016:000 | DONE cmt | na 16 16 |        |             | ; Fatal error encountered: Take address of error string from A, print it and
2017:000 | DONE cmt | na 16 16 |        |             | ; then call abort
2018:000 | DONE lbl | na 16 16 | 0068e2 |             | error                                
2019:000 | DONE ins | na 16 16 | 0068e2 | 20 e8 68    |                 jsr 0068e8           
2020:000 | DONE ins | na 16 16 | 0068e5 | 4c 94 60    |                 jmp 006094           
2021:000 | DONE wsp | na 16 16 |        |             |
2022:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
2023:000 | DONE cmt | na 16 16 |        |             | ; Print a zero terminated string to the console, adding a CR character. Takes
2024:000 | DONE cmt | na 16 16 |        |             | ; the address of the string in 16-bit A register, calls put_chr.  A is
2025:000 | DONE cmt | na 16 16 |        |             | ; destroyed. We could probably figure out some way to use TYPE instead, but zero
2026:000 | DONE cmt | na 16 16 |        |             | ; terminated strings are easier for the 65816 to use.
2027:000 | DONE cmt | na 16 16 |        |             | ; TODO add version without final line feed
2028:000 | DONE lbl | na 16 16 | 0068e8 |             | print_string                         
2029:000 | DONE dir | na 16 16 |        |             |         .!a16                        
2030:000 | DONE dir | na 16 16 |        |             |         .!xy16                       
2031:000 | DONE cmt | na 16 16 |        |             |                 ; don't use tmpdsp for X because we don't know if the user has
2032:000 | DONE cmt | na 16 16 |        |             |                 ; used it for something already
2033:000 | DONE ins | na 16 16 | 0068e8 | da          |                 phx                  
2034:000 | DONE ins | na 16 16 | 0068e9 | aa          |                 tax                  ; x16 contains address of string
2035:000 | DONE lbl | na 16 16 | 0068ea |             | @                                    
2036:000 | DONE ins | na 16 16 | 0068ea | e2 20       |                 sep 20               
2036:001 | DONE ctl | na  8 16 |        |             |         .!a8
2037:000 | DONE ins | na  8 16 | 0068ec | bd 00 00    |                 lda.x 0000           ; LDA $0000,X
2038:000 | DONE ins | na  8 16 | 0068ef | f0 06       |                 beq 0068f7           
2039:000 | DONE ins | na  8 16 | 0068f1 | 20 30 60    |                 jsr 006030           
2040:000 | DONE ins | na  8 16 | 0068f4 | e8          |                 inx                  
2041:000 | DONE ins | na  8 16 | 0068f5 | 80 f3       |                 bra 0068ea           
2042:000 | DONE wsp | na  8 16 |        |             |
2043:000 | DONE lbl | na  8 16 | 0068f7 |             | print_string_done                    
2044:000 | DONE ins | na  8 16 | 0068f7 | a9 0a       |                 lda.# AscLF          ; should be CR on some systems
2045:000 | DONE ins | na  8 16 | 0068f9 | 20 30 60    |                 jsr 006030           
2046:000 | DONE ins | na  8 16 | 0068fc | c2 20       |                 rep 20               
2046:001 | DONE ctl | na 16 16 |        |             |         .!a16
2047:000 | DONE ins | na 16 16 | 0068fe | fa          |                 plx                  
2048:000 | DONE ins | na 16 16 | 0068ff | 60          |                 rts                  
2049:000 | DONE wsp | na 16 16 |        |             |
2050:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
2051:000 | DONE cmt | na 16 16 |        |             | ; CONVERT BYTE TO ASCII
2052:000 | DONE cmt | na 16 16 |        |             | ; Convert byte in A to two ASCII hex digits and print them. Calls
2053:000 | DONE cmt | na 16 16 |        |             | ; nibble_to_ascii. Assumes A is 8 bit.
2054:000 | DONE lbl | na 16 16 | 006900 |             | byte_to_ascii                        
2055:000 | DONE ins | na 16 16 | 006900 | 48          |                 pha                  
2056:000 | DONE cmt | na 16 16 |        |             |                 ; convert high nibble first
2057:000 | DONE ins | na 16 16 | 006901 | 4a          |                 lsr.a                
2058:000 | DONE ins | na 16 16 | 006902 | 4a          |                 lsr.a                
2059:000 | DONE ins | na 16 16 | 006903 | 4a          |                 lsr.a                
2060:000 | DONE ins | na 16 16 | 006904 | 4a          |                 lsr.a                
2061:000 | DONE ins | na 16 16 | 006905 | 20 09 69    |                 jsr 006909           
2062:000 | DONE wsp | na 16 16 |        |             |
2063:000 | DONE ins | na 16 16 | 006908 | 68          |                 pla                  
2064:000 | DONE wsp | na 16 16 |        |             |
2065:000 | DONE cmt | na 16 16 |        |             |                 ; fall thru to nibble_to_ascii
2066:000 | DONE wsp | na 16 16 |        |             |
2067:000 | DONE wsp | na 16 16 |        |             |
2068:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
2069:000 | DONE cmt | na 16 16 |        |             | ; CONVERT NIBBLE TO ASCII
2070:000 | DONE cmt | na 16 16 |        |             | ; Converts the lower nibble of a number in A and returns the ASCII character
2071:000 | DONE cmt | na 16 16 |        |             | ; number, then prints it. Assumes A is 8 bit
2072:000 | DONE lbl | na 16 16 | 006909 |             | nibble_to_ascii                      
2073:000 | DONE ins | na 16 16 | 006909 | 29 0f 00    |                 and.# 000f           
2074:000 | DONE ins | na 16 16 | 00690c | 09 30 00    |                 ora.# 30             
2075:000 | DONE ins | na 16 16 | 00690f | c9 3a 00    |                 cmp.# 003a           ; '9' + 1
2076:000 | DONE ins | na 16 16 | 006912 | 90 03       |                 bcc 006917           
2077:000 | DONE ins | na 16 16 | 006914 | 69 06 00    |                 adc.# 0006           
2078:000 | DONE lbl | na 16 16 | 006917 |             | @                                    
2079:000 | DONE ins | na 16 16 | 006917 | 20 30 60    |                 jsr 006030           
2080:000 | DONE dir | na 16 16 |        |             |         .!a16                        
2081:000 | DONE ins | na 16 16 | 00691a | 60          |                 rts                  
2082:000 | DONE wsp | na 16 16 |        |             |
2083:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
2084:000 | DONE cmt | na 16 16 |        |             | ; Convert a string given by ( addr u ) to lowercase in place. Since we have to
2085:000 | DONE cmt | na 16 16 |        |             | ; treat the input buffer as read-only by ANS rules, we have to put the converted
2086:000 | DONE cmt | na 16 16 |        |             | ; string somewhere and then return the new address and length
2087:000 | DONE lbl | na 16 16 | 00691b |             | string_to_lowercase                  
2088:000 | DONE cmt | na 16 16 |        |             |                 ; TODO CODE THIS
2089:000 | DONE ins | na 16 16 | 00691b | 60          |                 rts                  
2090:000 | DONE wsp | na 16 16 |        |             |
2091:000 | DONE wsp | na 16 16 |        |             |
2092:000 | DONE cmt | na 16 16 |        |             | ; ===================================================================
2093:000 | DONE cmt | na 16 16 |        |             | ; HIGH-LEVEL WORDS
2094:000 | DONE wsp | na 16 16 |        |             |
2095:000 | DONE cmt | na 16 16 |        |             | ; These are executed during start up. Remember that we have to put a space at
2096:000 | DONE cmt | na 16 16 |        |             | ; the end of the line if there is another line with code following it. No zero
2097:000 | DONE cmt | na 16 16 |        |             | ; or CR/LF is required
2098:000 | DONE lbl | na 16 16 | 00691c |             | hi-start                             
2099:000 | DONE dir | na 16 16 | 00691c | (35 bytes)  |         .byte 2e, 28, 20, 4c, 69, 61, 72, 61, 20, 46, 6f, 72, 74, (...) 
2099:000 | DONE dir | na 16 16 |        |             |                 2e 28 20 4c 69 61 72 61  --  . (   L i a r a
2099:000 | DONE dir | na 16 16 |        |             |                 20 46 6f 72 74 68 20 66  --    F o r t h   f
2099:000 | DONE dir | na 16 16 |        |             |                 6f 72 20 74 68 65 20 57  --  o r   t h e   W
2099:000 | DONE dir | na 16 16 |        |             |                 36 35 43 32 36 35 53 58  --  6 5 C 2 6 5 S X
2099:000 | DONE dir | na 16 16 |        |             |                 42 20 29                 --  B   )
2100:000 | DONE dir | na 16 16 | 00693f | (37 bytes)  |         .byte 63, 72, 20, 2e, 28, 20, 56, 65, 72, 73, 69, 6f, 6e, (...) 
2100:000 | DONE dir | na 16 16 |        |             |                 63 72 20 2e 28 20 56 65  --  c r   . (   V e
2100:000 | DONE dir | na 16 16 |        |             |                 72 73 69 6f 6e 20 50 52  --  r s i o n   P R
2100:000 | DONE dir | na 16 16 |        |             |                 45 2d 41 4c 50 48 41 20  --  E - A L P H A  
2100:000 | DONE dir | na 16 16 |        |             |                 31 34 2e 20 46 65 62 20  --  1 4 .   F e b  
2100:000 | DONE dir | na 16 16 |        |             |                 32 30 31 37 29           --  2 0 1 7 )
2101:000 | DONE dir | na 16 16 | 006964 | (51 bytes)  |         .byte 63, 72, 20, 2e, 28, 20, 53, 63, 6f, 74, 20, 57, 2e, (...) 
2101:000 | DONE dir | na 16 16 |        |             |                 63 72 20 2e 28 20 53 63  --  c r   . (   S c
2101:000 | DONE dir | na 16 16 |        |             |                 6f 74 20 57 2e 20 53 74  --  o t   W .   S t
2101:000 | DONE dir | na 16 16 |        |             |                 65 76 65 6e 73 6f 6e 20  --  e v e n s o n  
2101:000 | DONE dir | na 16 16 |        |             |                 3c 73 63 6f 74 2e 73 74  --  < s c o t . s t
2101:000 | DONE dir | na 16 16 |        |             |                 65 76 65 6e 73 6f 6e 40  --  e v e n s o n @
2101:000 | DONE dir | na 16 16 |        |             |                 67 6d 61 69 6c 2e 63 6f  --  g m a i l . c o
2101:000 | DONE dir | na 16 16 |        |             |                 6d 3e 29                 --  m > )
2102:000 | DONE dir | na 16 16 | 006997 | (52 bytes)  |         .byte 63, 72, 20, 2e, 28, 20, 4c, 69, 61, 72, 61, 20, 46, (...) 
2102:000 | DONE dir | na 16 16 |        |             |                 63 72 20 2e 28 20 4c 69  --  c r   . (   L i
2102:000 | DONE dir | na 16 16 |        |             |                 61 72 61 20 46 6f 72 74  --  a r a   F o r t
2102:000 | DONE dir | na 16 16 |        |             |                 68 20 63 6f 6d 65 73 20  --  h   c o m e s  
2102:000 | DONE dir | na 16 16 |        |             |                 77 69 74 68 20 61 62 73  --  w i t h   a b s
2102:000 | DONE dir | na 16 16 |        |             |                 6f 6c 75 74 65 6c 79 20  --  o l u t e l y  
2102:000 | DONE dir | na 16 16 |        |             |                 4e 4f 20 57 41 52 52 41  --  N O   W A R R A
2102:000 | DONE dir | na 16 16 |        |             |                 4e 54 59 29              --  N T Y )
2103:000 | DONE dir | na 16 16 | 0069cb | (28 bytes)  |         .byte 63, 72, 20, 2e, 28, 20, 54, 79, 70, 65, 20, 27, 62, (...) 
2103:000 | DONE dir | na 16 16 |        |             |                 63 72 20 2e 28 20 54 79  --  c r   . (   T y
2103:000 | DONE dir | na 16 16 |        |             |                 70 65 20 27 62 79 65 27  --  p e   ' b y e '
2103:000 | DONE dir | na 16 16 |        |             |                 20 74 6f 20 65 78 69 74  --    t o   e x i t
2103:000 | DONE dir | na 16 16 |        |             |                 29 20 63 72              --  )   c r
2104:000 | DONE lbl | na 16 16 | 0069e7 |             | hi-end                               
2105:000 | DONE wsp | na 16 16 |        |             |
2106:000 | DONE wsp | na 16 16 |        |             |
2107:000 | DONE cmt | na 16 16 |        |             | ; ===================================================================
2108:000 | DONE cmt | na 16 16 |        |             | ; BOTTOM INCLUDES
2109:000 | DONE wsp | na 16 16 |        |             |
2110:000 | DONE cmt | na 16 16 |        |             | ; List of Strings for Liara Forth for the W65C265SXB
2110:001 | DONE cmt | na 16 16 |        |             | ; Scot W. Stevenson <scot.stevenson@gmail.com>
2110:002 | DONE cmt | na 16 16 |        |             | ; First version: 01. Apr 2016
2110:003 | DONE cmt | na 16 16 |        |             | ; This version:  12. Feb 2017
2110:004 | DONE wsp | na 16 16 |        |             |
2110:005 | DONE cmt | na 16 16 |        |             | ; This file is included by liaraforth.tasm
2110:006 | DONE wsp | na 16 16 |        |             |
2110:007 | DONE cmt | na 16 16 |        |             | ; ===================================================================
2110:008 | DONE cmt | na 16 16 |        |             | ; GENERAL
2110:009 | DONE wsp | na 16 16 |        |             |
2110:010 | DONE cmt | na 16 16 |        |             | ; All general strings must be zero-terminated, names start with "s_"
2110:011 | DONE cmt | na 16 16 |        |             | ; TODO see if "ok" needs trailing space. The printstring routine adds the EOL
2110:012 | DONE cmt | na 16 16 |        |             | ; character
2110:013 | DONE wsp | na 16 16 |        |             |
2110:014 | DONE lbl | na 16 16 | 0069e7 |             | s_ok                                 
2110:015 | DONE dir | na 16 16 | 0069e7 | (4 bytes)   |         .byte 20, 6f, 6b, 0          ; note space at beginning
2110:015 | DONE dir | na 16 16 |        |             |                 20 6f 6b 00              --    o k .
2110:016 | DONE wsp | na 16 16 |        |             |
2110:017 | DONE wsp | na 16 16 |        |             |
2110:018 | DONE cmt | na 16 16 |        |             | ; ===================================================================
2110:019 | DONE cmt | na 16 16 |        |             | ; ERROR STRINGS
2110:020 | DONE wsp | na 16 16 |        |             |
2110:021 | DONE cmt | na 16 16 |        |             | ; All error strings must be zero-terminated, names start with "es_"
2110:022 | DONE wsp | na 16 16 |        |             |
2110:023 | DONE lbl | na 16 16 | 0069eb |             | es_allot                             
2110:024 | DONE dir | na 16 16 | 0069eb | (20 bytes)  |         .byte 41, 4c, 4c, 4f, 54, 20, 6f, 75, 74, 20, 6f, 66, 20, (...) 
2110:024 | DONE dir | na 16 16 |        |             |                 41 4c 4c 4f 54 20 6f 75  --  A L L O T   o u
2110:024 | DONE dir | na 16 16 |        |             |                 74 20 6f 66 20 62 6f 75  --  t   o f   b o u
2110:024 | DONE dir | na 16 16 |        |             |                 6e 64 73 00              --  n d s .
2110:025 | DONE lbl | na 16 16 | 0069ff |             | es_channel                           
2110:026 | DONE dir | na 16 16 | 0069ff | (26 bytes)  |         .byte 41, 63, 63, 65, 73, 73, 69, 6e, 67, 20, 75, 6e, 6b, (...) 
2110:026 | DONE dir | na 16 16 |        |             |                 41 63 63 65 73 73 69 6e  --  A c c e s s i n
2110:026 | DONE dir | na 16 16 |        |             |                 67 20 75 6e 6b 6e 6f 77  --  g   u n k n o w
2110:026 | DONE dir | na 16 16 |        |             |                 6e 20 63 68 61 6e 6e 65  --  n   c h a n n e
2110:026 | DONE dir | na 16 16 |        |             |                 6c 00                    --  l .
2110:027 | DONE lbl | na 16 16 | 006a19 |             | es_componly                          
2110:028 | DONE dir | na 16 16 | 006a19 | (33 bytes)  |         .byte 49, 6e, 74, 65, 72, 70, 72, 65, 74, 69, 6e, 67, 20, (...) 
2110:028 | DONE dir | na 16 16 |        |             |                 49 6e 74 65 72 70 72 65  --  I n t e r p r e
2110:028 | DONE dir | na 16 16 |        |             |                 74 69 6e 67 20 61 20 63  --  t i n g   a   c
2110:028 | DONE dir | na 16 16 |        |             |                 6f 6d 70 69 6c 65 2d 6f  --  o m p i l e - o
2110:028 | DONE dir | na 16 16 |        |             |                 6e 6c 79 20 77 6f 72 64  --  n l y   w o r d
2110:028 | DONE dir | na 16 16 |        |             |                 00                       --  .
2110:029 | DONE lbl | na 16 16 | 006a3a |             | es_defer                             
2110:030 | DONE dir | na 16 16 | 006a3a | (29 bytes)  |         .byte 44, 45, 46, 45, 52, 65, 64, 20, 77, 6f, 72, 64, 20, (...) 
2110:030 | DONE dir | na 16 16 |        |             |                 44 45 46 45 52 65 64 20  --  D E F E R e d  
2110:030 | DONE dir | na 16 16 |        |             |                 77 6f 72 64 20 6e 6f 74  --  w o r d   n o t
2110:030 | DONE dir | na 16 16 |        |             |                 20 64 65 66 69 6e 65 64  --    d e f i n e d
2110:030 | DONE dir | na 16 16 |        |             |                 20 79 65 74 00           --    y e t .
2110:031 | DONE lbl | na 16 16 | 006a57 |             | es_divzero                           
2110:032 | DONE dir | na 16 16 | 006a57 | (17 bytes)  |         .byte 44, 69, 76, 69, 73, 69, 6f, 6e, 20, 62, 79, 20, 7a, (...) 
2110:032 | DONE dir | na 16 16 |        |             |                 44 69 76 69 73 69 6f 6e  --  D i v i s i o n
2110:032 | DONE dir | na 16 16 |        |             |                 20 62 79 20 7a 65 72 6f  --    b y   z e r o
2110:032 | DONE dir | na 16 16 |        |             |                 00                       --  .
2110:033 | DONE lbl | na 16 16 | 006a68 |             | es_error                             
2110:034 | DONE dir | na 16 16 | 006a68 | (12 bytes)  |         .byte 3e, 3e, 3e, 45, 72, 72, 6f, 72, 3c, 3c, 3c, 0 
2110:034 | DONE dir | na 16 16 |        |             |                 3e 3e 3e 45 72 72 6f 72  --  > > > E r r o r
2110:034 | DONE dir | na 16 16 |        |             |                 3c 3c 3c 00              --  < < < .
2110:035 | DONE lbl | na 16 16 | 006a74 |             | es_intonly                           
2110:036 | DONE dir | na 16 16 | 006a74 | (22 bytes)  |         .byte 4e, 6f, 74, 20, 69, 6e, 20, 69, 6e, 74, 65, 72, 70, (...) 
2110:036 | DONE dir | na 16 16 |        |             |                 4e 6f 74 20 69 6e 20 69  --  N o t   i n   i
2110:036 | DONE dir | na 16 16 |        |             |                 6e 74 65 72 70 72 65 74  --  n t e r p r e t
2110:036 | DONE dir | na 16 16 |        |             |                 20 6d 6f 64 65 00        --    m o d e .
2110:037 | DONE lbl | na 16 16 | 006a8a |             | es_noname                            
2110:038 | DONE dir | na 16 16 | 006a8a | (16 bytes)  |         .byte 50, 61, 72, 73, 69, 6e, 67, 20, 66, 61, 69, 6c, 75, (...) 
2110:038 | DONE dir | na 16 16 |        |             |                 50 61 72 73 69 6e 67 20  --  P a r s i n g  
2110:038 | DONE dir | na 16 16 |        |             |                 66 61 69 6c 75 72 65 00  --  f a i l u r e .
2110:038 | DONE dir | na 16 16 |        |             |                                          -- 
2110:039 | DONE lbl | na 16 16 | 006a9a |             | es_radix                             
2110:040 | DONE dir | na 16 16 | 006a9a | (23 bytes)  |         .byte 44, 69, 67, 69, 74, 20, 6c, 61, 72, 67, 65, 72, 20, (...) 
2110:040 | DONE dir | na 16 16 |        |             |                 44 69 67 69 74 20 6c 61  --  D i g i t   l a
2110:040 | DONE dir | na 16 16 |        |             |                 72 67 65 72 20 74 68 61  --  r g e r   t h a
2110:040 | DONE dir | na 16 16 |        |             |                 6e 20 62 61 73 65 00     --  n   b a s e .
2110:041 | DONE lbl | na 16 16 | 006ab1 |             | es_refill1                           
2110:042 | DONE dir | na 16 16 | 006ab1 | (46 bytes)  |         .byte 51, 55, 49, 54, 20, 63, 6f, 75, 6c, 64, 20, 6e, 6f, (...) 
2110:042 | DONE dir | na 16 16 |        |             |                 51 55 49 54 20 63 6f 75  --  Q U I T   c o u
2110:042 | DONE dir | na 16 16 |        |             |                 6c 64 20 6e 6f 74 20 67  --  l d   n o t   g
2110:042 | DONE dir | na 16 16 |        |             |                 65 74 20 69 6e 70 75 74  --  e t   i n p u t
2110:042 | DONE dir | na 16 16 |        |             |                 20 28 52 45 46 49 4c 4c  --    ( R E F I L L
2110:042 | DONE dir | na 16 16 |        |             |                 20 72 65 74 75 72 6e 65  --    r e t u r n e
2110:042 | DONE dir | na 16 16 |        |             |                 64 20 2d 31 29 00        --  d   - 1 ) .
2110:043 | DONE lbl | na 16 16 | 006adf |             | es_refill2                           
2110:044 | DONE dir | na 16 16 | 006adf | (32 bytes)  |         .byte 49, 6c, 6c, 65, 67, 61, 6c, 20, 53, 4f, 55, 52, 43, (...) 
2110:044 | DONE dir | na 16 16 |        |             |                 49 6c 6c 65 67 61 6c 20  --  I l l e g a l  
2110:044 | DONE dir | na 16 16 |        |             |                 53 4f 55 52 43 45 2d 49  --  S O U R C E - I
2110:044 | DONE dir | na 16 16 |        |             |                 44 20 64 75 72 69 6e 67  --  D   d u r i n g
2110:044 | DONE dir | na 16 16 |        |             |                 20 52 45 46 49 4c 4c 00  --    R E F I L L .
2110:044 | DONE dir | na 16 16 |        |             |                                          -- 
2110:045 | DONE lbl | na 16 16 | 006aff |             | es_underflow                         
2110:046 | DONE dir | na 16 16 | 006aff | (16 bytes)  |         .byte 53, 74, 61, 63, 6b, 20, 75, 6e, 64, 65, 72, 66, 6c, (...) 
2110:046 | DONE dir | na 16 16 |        |             |                 53 74 61 63 6b 20 75 6e  --  S t a c k   u n
2110:046 | DONE dir | na 16 16 |        |             |                 64 65 72 66 6c 6f 77 00  --  d e r f l o w .
2110:046 | DONE dir | na 16 16 |        |             |                                          -- 
2110:047 | DONE lbl | na 16 16 | 006b0f |             | es_syntax                            
2110:048 | DONE dir | na 16 16 | 006b0f | (16 bytes)  |         .byte 20, 55, 6e, 64, 65, 66, 69, 6e, 65, 64, 20, 77, 6f, (...) 
2110:048 | DONE dir | na 16 16 |        |             |                 20 55 6e 64 65 66 69 6e  --    U n d e f i n
2110:048 | DONE dir | na 16 16 |        |             |                 65 64 20 77 6f 72 64 00  --  e d   w o r d .
2110:048 | DONE dir | na 16 16 |        |             |                                          -- 
2110:049 | DONE wsp | na 16 16 |        |             |
2110:050 | DONE wsp | na 16 16 |        |             |
2110:051 | DONE cmt | na 16 16 |        |             | ; ===================================================================
2110:052 | DONE cmt | na 16 16 |        |             | ; ANSI VT-100 SEQUENCES
2110:053 | DONE wsp | na 16 16 |        |             |
2110:054 | DONE lbl | na 16 16 | 006b1f |             | vt100_page                           
2110:055 | DONE dir | na 16 16 | 006b1f | (5 bytes)   |         .byte AscESC, 5b, 32, 4a, 0  ; clear screen
2110:055 | DONE dir | na 16 16 |        |             |                 1b 5b 32 4a 00           --  . [ 2 J .
2110:056 | DONE lbl | na 16 16 | 006b24 |             | vt100_home                           
2110:057 | DONE dir | na 16 16 | 006b24 | (4 bytes)   |         .byte AscESC, 5b, 48, 0      ; cursor home
2110:057 | DONE dir | na 16 16 |        |             |                 1b 5b 48 00              --  . [ H .
2110:058 | DONE wsp | na 16 16 |        |             |
2110:059 | DONE wsp | na 16 16 |        |             |
2110:060 | DONE cmt | na 16 16 |        |             | ; ===================================================================
2110:061 | DONE cmt | na 16 16 |        |             | ; TESTING STRINGS
2110:062 | DONE wsp | na 16 16 |        |             |
2110:063 | DONE cmt | na 16 16 |        |             | ; These strings are only used during testing and are removed as Liara Forth is
2110:064 | DONE cmt | na 16 16 |        |             | ; developed. All start with "tests_"
2110:065 | DONE wsp | na 16 16 |        |             |
2110:066 | DONE lbl | na 16 16 | 006b28 |             | tests_prev_cmd                       
2110:067 | DONE dir | na 16 16 | 006b28 | (19 bytes)  |         .byte 28, 70, 72, 65, 76, 69, 6f, 75, 73, 20, 63, 6f, 6d, (...) 
2110:067 | DONE dir | na 16 16 |        |             |                 28 70 72 65 76 69 6f 75  --  ( p r e v i o u
2110:067 | DONE dir | na 16 16 |        |             |                 73 20 63 6f 6d 6d 61 6e  --  s   c o m m a n
2110:067 | DONE dir | na 16 16 |        |             |                 64 29 00                 --  d ) .
2110:068 | DONE lbl | na 16 16 | 006b3b |             | tests_next_cmd                       
2110:069 | DONE dir | na 16 16 | 006b3b | (15 bytes)  |         .byte 28, 6e, 65, 78, 74, 20, 63, 6f, 6d, 6d, 61, 6e, 64, (...) 
2110:069 | DONE dir | na 16 16 |        |             |                 28 6e 65 78 74 20 63 6f  --  ( n e x t   c o
2110:069 | DONE dir | na 16 16 |        |             |                 6d 6d 61 6e 64 29 00     --  m m a n d ) .
2110:070 | DONE wsp | na 16 16 |        |             |
2110:071 | DONE wsp | na 16 16 |        |             |
2110:072 | DONE cmt | na 16 16 |        |             | ; ===================================================================
2110:073 | DONE cmt | na 16 16 |        |             | ; ALPHABET STRINGS
2110:074 | DONE wsp | na 16 16 |        |             |
2110:075 | DONE cmt | na 16 16 |        |             | ; Leave alphastr as the last entry in the source code to make it easier to
2110:076 | DONE cmt | na 16 16 |        |             | ; see where this section ends. This cannot be a zero-terminated string
2110:077 | DONE wsp | na 16 16 |        |             |
2110:078 | DONE lbl | na 16 16 | 006b4a |             | alphastr                             
2110:079 | DONE dir | na 16 16 | 006b4a | (35 bytes)  |         .byte 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 61, 62, 63, (...) 
2110:079 | DONE dir | na 16 16 |        |             |                 30 31 32 33 34 35 36 37  --  0 1 2 3 4 5 6 7
2110:079 | DONE dir | na 16 16 |        |             |                 38 39 61 62 63 64 65 66  --  8 9 a b c d e f
2110:079 | DONE dir | na 16 16 |        |             |                 67 68 69 6a 6b 6c 6d 6e  --  g h i j k l m n
2110:079 | DONE dir | na 16 16 |        |             |                 6f 70 71 72 73 74 75 76  --  o p q r s t u v
2110:079 | DONE dir | na 16 16 |        |             |                 77 79 7a                 --  w y z
2111:000 | DONE wsp | na 16 16 |        |             |
2112:000 | DONE cmt | na 16 16 |        |             | ; ===================================================================
2113:000 | DONE cmt | na 16 16 |        |             | ; TESTING ROUTINES (UNCOMMENT FOR USE)
2114:000 | DONE wsp | na 16 16 |        |             |
2115:000 | DONE cmt | na 16 16 |        |             |                 ; --- TODO TESTING (PRINT ONE "A") ---
2116:000 | DONE cmt | na 16 16 |        |             |                 ; lda.# 61
2117:000 | DONE cmt | na 16 16 |        |             |                 ; jsr put_chr
2118:000 | DONE cmt | na 16 16 |        |             |                 ; .!a16
2119:000 | DONE cmt | na 16 16 |        |             |                 ; brk 00
2120:000 | DONE cmt | na 16 16 |        |             |                 ; --- TODO TESTING ---
2121:000 | DONE wsp | na 16 16 |        |             |
2122:000 | DONE cmt | na 16 16 |        |             |                 ; --- TESTING SHOW WHAT IS TOS ---
2123:000 | DONE cmt | na 16 16 |        |             |                 ; tya
2124:000 | DONE cmt | na 16 16 |        |             |                 ; and.# 0ff00
2125:000 | DONE cmt | na 16 16 |        |             |                 ; xba
2126:000 | DONE cmt | na 16 16 |        |             |                 ; jsr byte_to_ascii
2127:000 | DONE cmt | na 16 16 |        |             |                 ; tya
2128:000 | DONE cmt | na 16 16 |        |             |                 ; and.# 00ff
2129:000 | DONE cmt | na 16 16 |        |             |                 ; jsr byte_to_ascii
2130:000 | DONE cmt | na 16 16 |        |             |                 ; jsr xt_cr
2131:000 | DONE cmt | na 16 16 |        |             |                 ; --------------------------------
2132:000 | DONE wsp | na 16 16 |        |             |
2133:000 | DONE cmt | na 16 16 |        |             |                 ; --- TODO TESTING (HALT CPU) ---
2134:000 | DONE cmt | na 16 16 |        |             |                 ; brk 00 ; BRK for 265sxb tests (drops back to Mensch Monitor)
2135:000 | DONE cmt | na 16 16 |        |             |                 ; stp    ; STP for crude65816 emulator tests
2136:000 | DONE cmt | na 16 16 |        |             |                 ; --- TODO TESTING ---
2137:000 | DONE wsp | na 16 16 |        |             |
2138:000 | DONE wsp | na 16 16 |        |             |
2139:000 | DONE cmt | na 16 16 |        |             | ; ===================================================================
2140:000 | DONE cmt | na 16 16 |        |             | ; END
2141:000 | DONE wsp | na 16 16 |        |             |
2142:000 | DONE dir | na 16 16 |        |             |         .end                         

MACROS:
        (none)

SYMBOL TABLE:
- accept_bs                   : 0061cd
- accept_eol                  : 0061c5
- accept_loop                 : 00617a
- accept_nonzero              : 00616d
- allot_done                  : 00620d
- allot_error                 : 0061fc
- allot_minus                 : 006202
- allot_real_gone             : 00620f
- alphastr                    : 006b4a
- ascbell                     : 000007
- ascbs                       : 000008
- asccc                       : 000003
- asccn                       : 00000e
- asccp                       : 000010
- asccr                       : 00000d
- ascdel                      : 00007f
- ascesc                      : 00001b
- asclf                       : 00000a
- ascsp                       : 000020
- brg_value                   : 00000b
- buffers                     : 007c00
- buffersize                  : 0000ff
- byte_to_ascii               : 006900
- cib                         : 00020c
- ciblen                      : 00020e
- co                          : 000040
- compex                      : 0068b8
- compex_got_name_token       : 0068cd
- compex_line_done            : 0068db
- compex_loop                 : 0068b8
- cp                          : 000200
- cp0                         : 000300
- create_got_name             : 006262
- directpage                  : 000200
- directpage-multiple         : 007400
- doconst                     : 0068aa
- dots_done                   : 006341
- dots_loop                   : 006327
- dots_not_empty              : 006321
- dovar                       : 0068a3
- dp                          : 000202
- dsp0                        : 0002f0
- dump_byte_loop              : 006352
- dump_done                   : 006367
- dump_line_loop              : 00634c
- error                       : 0068e2
- es_allot                    : 0069eb
- es_channel                  : 0069ff
- es_componly                 : 006a19
- es_defer                    : 006a3a
- es_divzero                  : 006a57
- es_error                    : 006a68
- es_intonly                  : 006a74
- es_noname                   : 006a8a
- es_radix                    : 006a9a
- es_refill1                  : 006ab1
- es_refill2                  : 006adf
- es_syntax                   : 006b0f
- es_underflow                : 006aff
- execute_ip                  : 0063a5
- find-name_all_chars         : 0063e1
- find-name_char_nomatcnt_8   : 0063dd
- find-name_chars             : 0063d2
- find-name_done              : 006407
- find-name_failure_16        : 006404
- find-name_loop              : 0063bd
- find-name_next_entry        : 0063c6
- find-name_success           : 0063fe
- get_chr                     : 006041
- get_chr_wait                : 006046
- have_chr?                   : 006050
- hi-end                      : 0069e7
- hi-start                    : 00691c
- hw_acsr0                    : 00df70
- hw_acsr1                    : 00df72
- hw_acsr2                    : 00df74
- hw_acsr3                    : 00df76
- hw_artd0                    : 00df71
- hw_artd1                    : 00df73
- hw_artd2                    : 00df75
- hw_artd3                    : 00df77
- hw_bcr                      : 00df40
- hw_eier                     : 00df47
- hw_eifr                     : 00df45
- hw_pcs7                     : 00df27
- hw_pd0                      : 00df00
- hw_pd1                      : 00df01
- hw_pd2                      : 00df02
- hw_pd3                      : 00df03
- hw_pd4                      : 00df20
- hw_pd5                      : 00df21
- hw_pd6                      : 00df22
- hw_pd7                      : 00df23
- hw_pdd0                     : 00df04
- hw_pdd1                     : 00df05
- hw_pdd2                     : 00df06
- hw_pdd3                     : 00df07
- hw_pdd4                     : 00df24
- hw_pdd5                     : 00df25
- hw_pdd6                     : 00df26
- hw_sscr                     : 00df41
- hw_t0ch                     : 00df61
- hw_t0cl                     : 00df60
- hw_t1ch                     : 00df63
- hw_t1cl                     : 00df62
- hw_t2ch                     : 00df65
- hw_t2cl                     : 00df64
- hw_t3ch                     : 00df67
- hw_t3cl                     : 00df66
- hw_t4ch                     : 00df69
- hw_t4cl                     : 00df68
- hw_t5ch                     : 00df6b
- hw_t5cl                     : 00df6a
- hw_t6ch                     : 00df6d
- hw_t6cl                     : 00df6c
- hw_t7ch                     : 00df6f
- hw_t7cl                     : 00df6e
- hw_tcr                      : 00df42
- hw_ter                      : 00df43
- hw_tier                     : 00df46
- hw_tifr                     : 00df44
- hw_uier                     : 00df49
- hw_uifr                     : 00df48
- ibuffer1                    : 007c00
- ibuffer2                    : 007d00
- im                          : 000020
- insrc                       : 00020a
- maxram-multiple             : 006fff
- maxram-single               : 007bff
- nc                          : 000010
- nibble_to_ascii             : 006909
- nt_2drop                    : 006855
- nt_2dup                     : 0066e8
- nt_abort                    : 0065fb
- nt_abs                      : 0066f4
- nt_accept                   : 00680a
- nt_allot                    : 0066ba
- nt_bell                     : 0065c8
- nt_bl                       : 006644
- nt_bye                      : 006598
- nt_cells                    : 0066ad
- nt_cold                     : 0065a3
- nt_comma                    : 006801
- nt_constant                 : 006732
- nt_count                    : 0065ee
- nt_cr                       : 00663a
- nt_create                   : 0066c7
- nt_depth                    : 006725
- nt_dot                      : 006689
- nt_dotparen                 : 006673
- nt_dots                     : 006669
- nt_drop                     : 006897
- nt_dump                     : 0065bc
- nt_dup                      : 00688c
- nt_evaluate                 : 00669d
- nt_execute                  : 00683a
- nt_false                    : 00678b
- nt_fetch                    : 00686e
- nt_find-name                : 0067bf
- nt_here                     : 006849
- nt_minus                    : 006765
- nt_name-int                 : 00662a
- nt_name-string              : 0066d5
- nt_nip                      : 006824
- nt_one                      : 0067ad
- nt_one-minus                : 006777
- nt_one-plus                 : 006781
- nt_over                     : 006862
- nt_pad                      : 006692
- nt_page                     : 0065e2
- nt_parse                    : 006608
- nt_parse-name               : 0067de
- nt_plus                     : 00676e
- nt_question                 : 006621
- nt_quit                     : 006615
- nt_refill                   : 0067d0
- nt_rot                      : 00682f
- nt_source                   : 006717
- nt_source-id                : 0067f0
- nt_space                    : 00665c
- nt_spaces                   : 00664e
- nt_state                    : 0066ff
- nt_store                    : 006877
- nt_swap                     : 006880
- nt_tick                     : 006752
- nt_to-in                    : 00670c
- nt_true                     : 006798
- nt_tuck                     : 006818
- nt_two                      : 0067a4
- nt_two-star                 : 00675b
- nt_type                     : 00667d
- nt_unused                   : 0065d4
- nt_variable                 : 006742
- nt_words                    : 0065af
- nt_zero                     : 0067b6
- output                      : 000208
- padoffset                   : 00007f
- padsize                     : 0000ff
- parse-name_empty_line       : 006460
- parse-name_found            : 006474
- parse-name_loop             : 006453
- parse_found_delimiter       : 0064a0
- parse_loop                  : 006493
- parse_reached_eol           : 0064a4
- physicalram                 : 007fff
- piblen                      : 000210
- print_string                : 0068e8
- print_string_done           : 0068f7
- put_chr                     : 006030
- put_chr_wait                : 006036
- pw                          : 000080
- quit_get_line               : 0060a7
- quit_ok                     : 0060c9
- quit_refill_successful      : 0060b5
- refill_source_is_not_string : 0064df
- refill_src_not_kbd          : 0064d6
- reset_hardware              : 006000
- s_ok                        : 0069e7
- spaces_done                 : 006512
- stack-multiple              : 007000
- stack0                      : 007fff
- start                       : 006060
- state                       : 000214
- string_to_lowercase         : 00691b
- tests_next_cmd              : 006b3b
- tests_prev_cmd              : 006b28
- tick_have_nt                : 00615a
- tick_have_word              : 00614e
- tmp1                        : 000216
- tmp2                        : 000218
- tmp3                        : 00021a
- tmpdsp                      : 000204
- tmptos                      : 000206
- toin                        : 000212
- type_done                   : 006550
- type_loop                   : 006544
- vt100_home                  : 006b24
- vt100_page                  : 006b1f
- words_loop                  : 00657a
- xt_2drop                    : 006130
- xt_2dup                     : 006137
- xt_abort                    : 006094
- xt_abs                      : 00615e
- xt_accept                   : 006167
- xt_allot                    : 0061eb
- xt_bell                     : 006214
- xt_bl                       : 00621b
- xt_bye                      : 006223
- xt_cold                     : 00605d
- xt_comma                    : 0060db
- xt_constant                 : 006227
- xt_count                    : 006241
- xt_cr                       : 006250
- xt_create                   : 006257
- xt_depth                    : 0062ca
- xt_dot                      : 0062d9
- xt_dotparen                 : 0062ef
- xt_dots                     : 0062fd
- xt_drop                     : 006345
- xt_dump                     : 00634a
- xt_dup                      : 006371
- xt_evaluate                 : 006376
- xt_execute                  : 0063a8
- xt_fetch                    : 0060f8
- xt_find-name                : 0063b3
- xt_here                     : 00640a
- xt_minus                    : 006105
- xt_name-int                 : 006411
- xt_name-string              : 00641a
- xt_nip                      : 00642b
- xt_one                      : 006118
- xt_one-minus                : 006120
- xt_one-plus                 : 006122
- xt_over                     : 00642e
- xt_pad                      : 006435
- xt_page                     : 006441
- xt_parse                    : 006480
- xt_parse-name               : 00644e
- xt_plus                     : 0060fd
- xt_question                 : 0060e7
- xt_quit                     : 00609c
- xt_refill                   : 0064b3
- xt_rot                      : 0064e6
- xt_source                   : 0064ef
- xt_source-id                : 0064fc
- xt_space                    : 006503
- xt_spaces                   : 00650a
- xt_state                    : 006517
- xt_store                    : 0060ee
- xt_swap                     : 00651f
- xt_tick                     : 006142
- xt_to-in                    : 0060d3
- xt_true                     : 006525
- xt_tuck                     : 00652d
- xt_two                      : 006124
- xt_two-star                 : 00612c
- xt_type                     : 006536
- xt_unused                   : 006557
- xt_variable                 : 006563
- xt_words                    : 006570
- xt_zero                     : 006110
- z_2drop                     : 006136
- z_2dup                      : 006141
- z_abort                     : 0060d2
- z_abs                       : 006166
- z_accept                    : 0061ea
- z_allot                     : 006213
- z_bell                      : 00621a
- z_bl                        : 006222
- z_bye                       : 006226
- z_cold                      : 0060d2
- z_comma                     : 0060e6
- z_constant                  : 006240
- z_count                     : 00624f
- z_cr                        : 006256
- z_create                    : 0062c9
- z_depth                     : 0062d8
- z_dot                       : 0062ee
- z_dotparen                  : 0062fc
- z_dots                      : 006344
- z_drop                      : 006349
- z_dump                      : 006370
- z_dup                       : 006375
- z_evaluate                  : 0063a4
- z_execute                   : 0063b2
- z_fetch                     : 0060fc
- z_find-name                 : 006409
- z_here                      : 006410
- z_minus                     : 00610f
- z_name-int                  : 006419
- z_name-string               : 00642a
- z_nip                       : 00642d
- z_one                       : 00611f
- z_one-minus                 : 006121
- z_one-plus                  : 006123
- z_over                      : 006434
- z_pad                       : 006440
- z_page                      : 00644d
- z_parse                     : 0064b2
- z_parse-name                : 0064b2
- z_plus                      : 006104
- z_question                  : 0060ed
- z_quit                      : 0060d2
- z_refill                    : 0064e5
- z_rot                       : 0064ee
- z_source                    : 0064fb
- z_source-id                 : 006502
- z_space                     : 006509
- z_spaces                    : 006516
- z_state                     : 00651e
- z_store                     : 0060f7
- z_swap                      : 006524
- z_tick                      : 00615d
- z_to-in                     : 0060da
- z_true                      : 00652c
- z_tuck                      : 006535
- z_two                       : 00612b
- z_two-star                  : 00612f
- z_type                      : 006556
- z_unused                    : 006562
- z_variable                  : 00656f
- z_words                     : 006597
- z_zero                      : 006117
