A Tinkerer's Assembler for the 6502/65c02/65816
Version BETA 24. January 2017
Copyright 2015-2017 Scot W. Stevenson <scot.stevenson@gmail.com>
This program comes with ABSOLUTELY NO WARRANTY

Code listing for file liaraforth.tasm
Generated on Tue Feb 14 11:27:48 2017
Target MPU: 65816
External files loaded: 4
Number of passes executed: 35
Number of steps executed: 10
Assembly time: 0.10142 seconds
Code origin: 006000
Bytes of machine code: 2905

LISTING:
   Line  Status/Type State/Width Address     Bytes     Instruction
   1:000 | DONE cmt | em  8  8 |        |             | ; Liara Forth for the W65C265SXB
   2:000 | DONE cmt | em  8  8 |        |             | ; Scot W. Stevenson <scot.stevenson@gmail.com>
   3:000 | DONE cmt | em  8  8 |        |             | ; First version: 01. Apr 2016
   4:000 | DONE cmt | em  8  8 |        |             | ; This version: 14. Feb 2017
   5:000 | DONE wsp | em  8  8 |        |             |
   6:000 | DONE cmt | em  8  8 |        |             | ; This code is written in Typist's Assembler Notation for the 65c02/65816
   7:000 | DONE cmt | em  8  8 |        |             | ; See docs/MANUAL.md for more information
   8:000 | DONE wsp | em  8  8 |        |             |
   9:000 | DONE dir | em  8  8 |        |             |         .mpu 65816                   
  10:000 | DONE cmt | em  8  8 |        |             | ;       .origin 8000    ; start of code to save to Flash memory
  11:000 | DONE dir | em  8  8 |        |             |         .origin 6000                 ; start of code to save to built-in RAM
  12:000 | DONE wsp | em  8  8 |        |             |
  13:000 | DONE cmt | em  8  8 |        |             | ; ===================================================================
  14:000 | DONE cmt | em  8  8 |        |             | ; TOP INCLUDES
  15:000 | DONE wsp | em  8  8 |        |             |
  16:000 | DONE cmt | em  8  8 |        |             | ; Definitions for Liara Forth for the W65C265SXB
  16:001 | DONE cmt | em  8  8 |        |             | ; Scot W. Stevenson <scot.stevenson@gmail.com>
  16:002 | DONE cmt | em  8  8 |        |             | ; First version: 01. Apr 2016
  16:003 | DONE cmt | em  8  8 |        |             | ; This version: 12. Feb 2017
  16:004 | DONE wsp | em  8  8 |        |             |
  16:005 | DONE cmt | em  8  8 |        |             | ; This file is included by liaraforth.tasm
  16:006 | DONE wsp | em  8  8 |        |             |
  16:007 | DONE cmt | em  8  8 |        |             | ; Note that Typist's Assembler Notation does not distinguish between
  16:008 | DONE cmt | em  8  8 |        |             | ; upper andlower case. Variations in case are for human readers only.
  16:009 | DONE wsp | em  8  8 |        |             |
  16:010 | DONE cmt | em  8  8 |        |             | ; I/O facilities are handled in the separate kernel files. The definitions for
  16:011 | DONE cmt | em  8  8 |        |             | ; multitasking are preliminary and will probably change
  16:012 | DONE wsp | em  8  8 |        |             |
  16:013 | DONE cmt | em  8  8 |        |             | ; ===================================================================
  16:014 | DONE cmt | em  8  8 |        |             | ; MEMORY MAP (consider moving parts of these to kernel.tasm)
  16:015 | DONE wsp | em  8  8 |        |             |
  16:016 | DONE dir | em  8  8 |        |             |         .equ cp0              0300   ; start of available RAM for Dictionary
  16:017 | DONE dir | em  8  8 |        |             |         .equ physicalram     07fff   ; end of installed RAM
  16:018 | DONE dir | em  8  8 |        |             |         .equ maxram-single   07bff   ; end of available RAM (single task mode)
  16:019 | DONE dir | em  8  8 |        |             |         .equ maxram-multiple 06fff   ; end of available RAM (multitask mode)
  16:020 | DONE dir | em  8  8 |        |             |         .equ buffers  7c00           ; buffer area start
  16:021 | DONE wsp | em  8  8 |        |             |
  16:022 | DONE cmt | em  8  8 |        |             | ; The two input buffers are currently switched in REFILL by bit flipping. If you
  16:023 | DONE cmt | em  8  8 |        |             | ; change their addresses, you'll probably have to rewrite the code there
  16:024 | DONE wsp | em  8  8 |        |             |
  16:025 | DONE dir | em  8  8 |        |             |         .equ buffersize  0ff         ; maximum size for input buffers
  16:026 | DONE dir | em  8  8 |        |             |         .equ ibuffer1   7c00         ; start of 256 byte input buffer 1
  16:027 | DONE dir | em  8  8 |        |             |         .equ ibuffer2   7d00         ; start of 256 byte input buffer 2
  16:028 | DONE dir | em  8  8 |        |             |         .equ padsize     0ff         ; size of PAD, must be > &84
  16:029 | DONE dir | em  8  8 |        |             |         .equ padoffset   07f         ; distance from CP to PAD (holds number strings)
  16:030 | DONE wsp | em  8  8 |        |             |
  16:031 | DONE cmt | em  8  8 |        |             | ; RAM from 0000 to 01ff is left for the Mensch Monitor to use
  16:032 | DONE wsp | em  8  8 |        |             |
  16:033 | DONE dir | em  8  8 |        |             |         .equ directpage          0200 ; single task Direct Page (DP) start
  16:034 | DONE dir | em  8  8 |        |             |         .equ stack-multiple      7000 ; multitask Stack (S) area start
  16:035 | DONE dir | em  8  8 |        |             |         .equ directpage-multiple 7400 ; multitask Direct Page (DP) area start
  16:036 | DONE wsp | em  8  8 |        |             |
  16:037 | DONE cmt | em  8  8 |        |             | ; Initial values
  16:038 | DONE wsp | em  8  8 |        |             |
  16:039 | DONE dir | em  8  8 |        |             |         .equ stack0 7fff             ; single task Stack (S) start (bottom)
  16:040 | DONE dir | em  8  8 |        |             |         .equ dsp0   02f0             ; initial Data Stack Pointer (X)
  16:041 | DONE wsp | em  8  8 |        |             |
  16:042 | DONE cmt | em  8  8 |        |             | ; ===================================================================
  16:043 | DONE cmt | em  8  8 |        |             | ; DIRECT PAGE ADDRESSES
  16:044 | DONE wsp | em  8  8 |        |             |
  16:045 | DONE cmt | em  8  8 |        |             | ; All are one cell (two bytes) long to prevent weird errors
  16:046 | DONE cmt | em  8  8 |        |             | ; TODO move these to USER variables for multitasking
  16:047 | DONE wsp | em  8  8 |        |             |
  16:048 | DONE dir | em  8  8 |        |             |         .equ cp { 000200 + &0 }      ; Compiler Pointer, 2 bytes
  16:049 | DONE dir | em  8  8 |        |             |         .equ dp { 000200 + &2 }      ; Dictionary Pointer, 2 bytes
  16:050 | DONE dir | em  8  8 |        |             |         .equ tmpdsp { 000200 + &4 }  ; Temporary DSP (X) storage, 2 bytes
  16:051 | DONE dir | em  8  8 |        |             |         .equ tmptos { 000200 + &6 }  ; Temporary TOS (Y) storage, 2 bytes
  16:052 | DONE dir | em  8  8 |        |             |         .equ output { 000200 + &8 }  ; Address where output is constructed
  16:053 | DONE dir | em  8  8 |        |             |         .equ insrc { 000200 + &10 }  ; Input Source for SOURCE-ID
  16:054 | DONE dir | em  8  8 |        |             |         .equ cib { 000200 + &12 }    ; Current Input Buffer, 7c00 or 7d00
  16:055 | DONE dir | em  8  8 |        |             |         .equ ciblen { 000200 + &14 } ; Length of current input buffer
  16:056 | DONE dir | em  8  8 |        |             |         .equ piblen { 000200 + &16 } ; Length of previous input buffer
  16:057 | DONE dir | em  8  8 |        |             |         .equ toin { 000200 + &18 }   ; Pointer to CIB (>IN in Forth)
  16:058 | DONE dir | em  8  8 |        |             |         .equ state { 000200 + &20 }  ; STATE: 1 compile, 0 interpret
  16:059 | DONE dir | em  8  8 |        |             |         .equ tmp1 { 000200 + &22 }   ; Temporary storage, usually address
  16:060 | DONE dir | em  8  8 |        |             |         .equ tmp2 { 000200 + &24 }   ; Temporary storage, usually counter
  16:061 | DONE dir | em  8  8 |        |             |         .equ tmp3 { 000200 + &26 }   ; Temporary storage
  16:062 | DONE wsp | em  8  8 |        |             |
  16:063 | DONE wsp | em  8  8 |        |             |
  16:064 | DONE cmt | em  8  8 |        |             | ; ===================================================================
  16:065 | DONE cmt | em  8  8 |        |             | ; HELPER DEFINITIONS
  16:066 | DONE wsp | em  8  8 |        |             |
  16:067 | DONE cmt | em  8  8 |        |             | ; ASCII characters
  16:068 | DONE wsp | em  8  8 |        |             |
  16:069 | DONE dir | em  8  8 |        |             |         .equ AscCC   03              ; break (Control-C) ASCII character
  16:070 | DONE dir | em  8  8 |        |             |         .equ AscBELL 07              ; ACSCII bell sound
  16:071 | DONE dir | em  8  8 |        |             |         .equ AscBS   08              ; backspace ASCII character
  16:072 | DONE dir | em  8  8 |        |             |         .equ AscLF   0a              ; line feed ASCII character
  16:073 | DONE dir | em  8  8 |        |             |         .equ AscCR   0d              ; carriage return ASCII character
  16:074 | DONE dir | em  8  8 |        |             |         .equ AscCN   0e              ; ASCII CNTR-n (for next command)
  16:075 | DONE dir | em  8  8 |        |             |         .equ AscCP   10              ; ASCII CNTR-p (for previous command)
  16:076 | DONE dir | em  8  8 |        |             |         .equ AscESC  1b              ; Escape ASCII character
  16:077 | DONE dir | em  8  8 |        |             |         .equ AscSP   20              ; space ASCII character
  16:078 | DONE dir | em  8  8 |        |             |         .equ AscDEL  7f              ; DEL ASCII character
  16:079 | DONE wsp | em  8  8 |        |             |
  16:080 | DONE cmt | em  8  8 |        |             | ; Dictionary flags
  16:081 | DONE wsp | em  8  8 |        |             |
  16:082 | DONE dir | em  8  8 |        |             |         .equ PW %10000000            ; Primitive (Native) Word
  16:083 | DONE dir | em  8  8 |        |             |         .equ CO %01000000            ; Compile Only
  16:084 | DONE dir | em  8  8 |        |             |         .equ IM %00100000            ; Immediate Word
  16:085 | DONE dir | em  8  8 |        |             |         .equ NC %00010000            ; Native (inline) Compile
  17:000 | DONE wsp | em  8  8 |        |             |
  18:000 | DONE cmt | em  8  8 |        |             | ; Hardware dependencies are isolated to a large degree in kernel files. Liara
  19:000 | DONE cmt | em  8  8 |        |             | ; Forth ships with two such files: One for the crude65816 emulator, and one for
  20:000 | DONE cmt | em  8  8 |        |             | ; the 265sxb board. Only use one.
  21:000 | DONE wsp | em  8  8 |        |             |
  22:000 | DONE cmt | em  8  8 |        |             | ;       .include kernel_emu.tasm        ; routines for crude65815 emulator
  23:000 | DONE cmt | em  8  8 |        |             | ; Basic hardware routines for Liara Forth: 265SXB version
  23:001 | DONE cmt | em  8  8 |        |             | ; Scot W. Stevenson <scot.stevenson@gmail.com>
  23:002 | DONE cmt | em  8  8 |        |             | ; First version: 04. Jan 2017
  23:003 | DONE cmt | em  8  8 |        |             | ; This version: 29. Jan 2017
  23:004 | DONE wsp | em  8  8 |        |             |
  23:005 | DONE cmt | em  8  8 |        |             | ; This section provides basic hardware interface to the 265SXB, providing the
  23:006 | DONE cmt | em  8  8 |        |             | ; PUT_CHR and GET_CHR routines that Liara Forth uses. It is in its own section
  23:007 | DONE cmt | em  8  8 |        |             | ; to make porting Forth to other machines easier.
  23:008 | DONE wsp | em  8  8 |        |             |
  23:009 | DONE cmt | em  8  8 |        |             | ; The code here is based on Andrew Jacobs' Basic Vector Handling for the
  23:010 | DONE cmt | em  8  8 |        |             | ; W65C265SXB Development Board as part of the w65c265sxb-hacker project
  23:011 | DONE cmt | em  8  8 |        |             | ; (https://github.com/andrew-jacobs/w65c265sxb-hacker). It is released under the
  23:012 | DONE cmt | em  8  8 |        |             | ; following license:
  23:013 | DONE cmt | em  8  8 |        |             | ;
  23:014 | DONE cmt | em  8  8 |        |             | ; This work is made available under the terms of the Creative Commons
  23:015 | DONE cmt | em  8  8 |        |             | ; Attribution-NonCommercial-ShareAlike 4.0 International license. Open the
  23:016 | DONE cmt | em  8  8 |        |             | ; following URL to see the details.
  23:017 | DONE cmt | em  8  8 |        |             | ;
  23:018 | DONE cmt | em  8  8 |        |             | ; http://creativecommons.org/licenses/by-nc-sa/4.0/
  23:019 | DONE wsp | em  8  8 |        |             |
  23:020 | DONE cmt | em  8  8 |        |             | ; Original variable names from w65c256.inc are included in comments to make
  23:021 | DONE cmt | em  8  8 |        |             | ; updates and changes easier
  23:022 | DONE wsp | em  8  8 |        |             |
  23:023 | DONE cmt | em  8  8 |        |             | ; ===================================================================
  23:024 | DONE cmt | em  8  8 |        |             | ; HARDWARE DEFINITIONS
  23:025 | DONE cmt | em  8  8 |        |             | ; These follow Andrew Jacobs' names, but lower case and with "hw_" prefixed.
  23:026 | DONE cmt | em  8  8 |        |             | ; This is the only file where symbols with the hw_ prefix may be defined or used
  23:027 | DONE wsp | em  8  8 |        |             |
  23:028 | DONE cmt | em  8  8 |        |             | ; Baud rates are calculated by the formula { osc_freq/(16*baud_rate)-1 } which we
  23:029 | DONE cmt | em  8  8 |        |             | ; can do on the fly at every assembly with the following parameters, or just calculate
  23:030 | DONE cmt | em  8  8 |        |             | ; once and then define brg_value with:
  23:031 | DONE cmt | em  8  8 |        |             | ;
  23:032 | DONE cmt | em  8  8 |        |             | ; - For  9600 baud, use &23
  23:033 | DONE cmt | em  8  8 |        |             | ; - For 19200 baud, use &11
  23:034 | DONE wsp | em  8  8 |        |             |
  23:035 | DONE cmt | em  8  8 |        |             | ;       .equ osc_freq  3686400          ; SXB runs at 3.6864MHz
  23:036 | DONE cmt | em  8  8 |        |             | ;       .equ baud_rate 19200            ; ACIA baud rate
  23:037 | DONE cmt | em  8  8 |        |             | ;	.equ baud_rate 9600             ; ACIA baud rate
  23:038 | DONE wsp | em  8  8 |        |             |
  23:039 | DONE dir | em  8  8 |        |             |         .equ brg_value &11           ; 19200 baud
  23:040 | DONE cmt | em  8  8 |        |             | ;       .equ brg_value &23              ; 9600 baud
  23:041 | DONE wsp | em  8  8 |        |             |
  23:042 | DONE dir | em  8  8 |        |             |         .equ hw_pd0  0df00           ; Port 0 Data Register
  23:043 | DONE dir | em  8  8 |        |             |         .equ hw_pd1  0df01           ; Port 1 Data Register
  23:044 | DONE dir | em  8  8 |        |             |         .equ hw_pd2  0df02           ; Port 2 Data Register
  23:045 | DONE dir | em  8  8 |        |             |         .equ hw_pd3  0df03           ; Port 3 Data Register
  23:046 | DONE dir | em  8  8 |        |             |         .equ hw_pdd0 0df04           ; Port 0 Data Direction Register
  23:047 | DONE dir | em  8  8 |        |             |         .equ hw_pdd1 0df05           ; Port 1 Data Direction Register
  23:048 | DONE dir | em  8  8 |        |             |         .equ hw_pdd2 0df06           ; Port 2 Data Direction Register
  23:049 | DONE dir | em  8  8 |        |             |         .equ hw_pdd3 0df07           ; Port 3 Data Direction Register
  23:050 | DONE wsp | em  8  8 |        |             |
  23:051 | DONE dir | em  8  8 |        |             |         .equ hw_pd4  0df20           ; Port 4 Data Register
  23:052 | DONE dir | em  8  8 |        |             |         .equ hw_pd5  0df21           ; Port 5 Data Register
  23:053 | DONE dir | em  8  8 |        |             |         .equ hw_pd6  0df22           ; Port 6 Data Register
  23:054 | DONE dir | em  8  8 |        |             |         .equ hw_pd7  0df23           ; Port 7 Data Register
  23:055 | DONE dir | em  8  8 |        |             |         .equ hw_pdd4 0df24           ; Port 4 Data Direction Register
  23:056 | DONE dir | em  8  8 |        |             |         .equ hw_pdd5 0df25           ; Port 5 Data Direction Register
  23:057 | DONE dir | em  8  8 |        |             |         .equ hw_pdd6 0df26           ; Port 6 Data Direction Register
  23:058 | DONE dir | em  8  8 |        |             |         .equ hw_pcs7 0df27           ; Port 7 Chip Select
  23:059 | DONE wsp | em  8  8 |        |             |
  23:060 | DONE dir | em  8  8 |        |             |         .equ hw_bcr  0df40           ; Bus Control Register
  23:061 | DONE dir | em  8  8 |        |             |         .equ hw_sscr 0df41           ; System Speed Control Register
  23:062 | DONE dir | em  8  8 |        |             |         .equ hw_tcr  0df42           ; Timer Control Register
  23:063 | DONE dir | em  8  8 |        |             |         .equ hw_ter  0df43           ; Timer Enable Register
  23:064 | DONE dir | em  8  8 |        |             |         .equ hw_tifr 0df44           ; Timer Interrupt Flag Register
  23:065 | DONE dir | em  8  8 |        |             |         .equ hw_eifr 0df45           ; Edge Interrupt Flag Register
  23:066 | DONE dir | em  8  8 |        |             |         .equ hw_tier 0df46           ; Timer Interrupt Enable Register
  23:067 | DONE dir | em  8  8 |        |             |         .equ hw_eier 0df47           ; Edge Interrupt Enable Register
  23:068 | DONE dir | em  8  8 |        |             |         .equ hw_uifr 0df48           ; UART Interrupt Flag Register
  23:069 | DONE dir | em  8  8 |        |             |         .equ hw_uier 0df49           ; UART Interrupt Enable Register
  23:070 | DONE wsp | em  8  8 |        |             |
  23:071 | DONE dir | em  8  8 |        |             |         .equ hw_t0cl 0df60           ; Timer 0 Counter Low
  23:072 | DONE dir | em  8  8 |        |             |         .equ hw_t0ch 0df61           ; Timer 0 Counter High
  23:073 | DONE dir | em  8  8 |        |             |         .equ hw_t1cl 0df62           ; Timer 1 Counter Low
  23:074 | DONE dir | em  8  8 |        |             |         .equ hw_t1ch 0df63           ; Timer 1 Counter High
  23:075 | DONE dir | em  8  8 |        |             |         .equ hw_t2cl 0df64           ; Timer 2 Counter Low
  23:076 | DONE dir | em  8  8 |        |             |         .equ hw_t2ch 0df65           ; Timer 2 Counter High
  23:077 | DONE dir | em  8  8 |        |             |         .equ hw_t3cl 0df66           ; Timer 3 Counter Low
  23:078 | DONE dir | em  8  8 |        |             |         .equ hw_t3ch 0df67           ; Timer 3 Counter High
  23:079 | DONE dir | em  8  8 |        |             |         .equ hw_t4cl 0df68           ; Timer 4 Counter Low
  23:080 | DONE dir | em  8  8 |        |             |         .equ hw_t4ch 0df69           ; Timer 4 Counter High
  23:081 | DONE dir | em  8  8 |        |             |         .equ hw_t5cl 0df6a           ; Timer 5 Counter Low
  23:082 | DONE dir | em  8  8 |        |             |         .equ hw_t5ch 0df6b           ; Timer 5 Counter High
  23:083 | DONE dir | em  8  8 |        |             |         .equ hw_t6cl 0df6c           ; Timer 6 Counter Low
  23:084 | DONE dir | em  8  8 |        |             |         .equ hw_t6ch 0df6d           ; Timer 6 Counter High
  23:085 | DONE dir | em  8  8 |        |             |         .equ hw_t7cl 0df6e           ; Timer 7 Counter Low
  23:086 | DONE dir | em  8  8 |        |             |         .equ hw_t7ch 0df6f           ; Timer 7 Counter High
  23:087 | DONE wsp | em  8  8 |        |             |
  23:088 | DONE dir | em  8  8 |        |             |         .equ hw_acsr0 0df70          ; UART 0 Control/Status Register
  23:089 | DONE dir | em  8  8 |        |             |         .equ hw_artd0 0df71          ; UART 0 Data Register
  23:090 | DONE dir | em  8  8 |        |             |         .equ hw_acsr1 0df72          ; UART 1 Control/Status Register
  23:091 | DONE dir | em  8  8 |        |             |         .equ hw_artd1 0df73          ; UART 1 Data Register
  23:092 | DONE dir | em  8  8 |        |             |         .equ hw_acsr2 0df74          ; UART 2 Control/Status Register
  23:093 | DONE dir | em  8  8 |        |             |         .equ hw_artd2 0df75          ; UART 2 Data Register
  23:094 | DONE dir | em  8  8 |        |             |         .equ hw_acsr3 0df76          ; UART 3 Control/Status Register
  23:095 | DONE dir | em  8  8 |        |             |         .equ hw_artd3 0df77          ; UART 3 Data Register
  23:096 | DONE wsp | em  8  8 |        |             |
  23:097 | DONE wsp | em  8  8 |        |             |
  23:098 | DONE cmt | em  8  8 |        |             | ; ===================================================================
  23:099 | DONE cmt | em  8  8 |        |             | ; RESET HARDWARE
  23:100 | DONE cmt | em  8  8 |        |             | ; Call this during boot. Uses Port 0 for communication in the default setting
  23:101 | DONE lbl | em  8  8 | 006000 |             | reset_hardware                       
  23:102 | DONE ins | em  8  8 | 006000 | 78          |                 sei                  
  23:103 | DONE ins | em  8  8 | 006001 | 18          |                 clc                  
  23:104 | DONE ins | em  8  8 | 006002 | fb          |                 xce                  
  23:105 | DONE ctl | na  8  8 |        |             |         .!native
  23:106 | DONE ins | na  8  8 | 006003 | c2 10       |                 rep 10               
  23:107 | DONE ctl | na  8 16 |        |             |         .!xy16
  23:108 | DONE cmt | na  8 16 |        |             |                 ; temporarily reset the stack
  23:109 | DONE ins | na  8 16 | 006005 | a2 ff 01    |                 ldx.# 01ff           
  23:110 | DONE ins | na  8 16 | 006008 | 9a          |                 txs                  
  23:111 | DONE wsp | na  8 16 |        |             |
  23:112 | DONE ins | na  8 16 | 006009 | 9c 49 df    |                 stz 00df49           ; UART Interrupt Enable Register (UIER)
  23:113 | DONE wsp | na  8 16 |        |             |
  23:114 | DONE ins | na  8 16 | 00600c | a9 c0       |                 lda.# 0c0            ; Ensure A15/AMS are output
  23:115 | DONE ins | na  8 16 | 00600e | 8d 24 df    |                 sta 00df24           ; Port 4 Data Direction Register (PDD4)
  23:116 | DONE ins | na  8 16 | 006011 | 9c 20 df    |                 stz 00df20           ; Select bank 0 (Port 4 Data Register, PD4)
  23:117 | DONE wsp | na  8 16 |        |             |
  23:118 | DONE ins | na  8 16 | 006014 | a9 10       |                 lda.# %00010000      ; Set UART0 to use timer 3
  23:119 | DONE ins | na  8 16 | 006016 | 1c 42 df    |                 trb 00df42           ; Timer Control Register (TCR)
  23:120 | DONE ins | na  8 16 | 006019 | a9 0b       |                 lda.# .lsb 00000b    ; And set baud rate
  23:121 | DONE ins | na  8 16 | 00601b | 8d 66 df    |                 sta 00df66           ; Timer 3 Counter Low (T3CL)
  23:122 | DONE ins | na  8 16 | 00601e | a9 00       |                 lda.# .msb 00000b    
  23:123 | DONE ins | na  8 16 | 006020 | 8d 67 df    |                 sta 00df67           ; Timer 3 Counter High (T3CH)
  23:124 | DONE ins | na  8 16 | 006023 | a9 08       |                 lda.# 08             ; Enable timer 3 (1<<3)
  23:125 | DONE ins | na  8 16 | 006025 | 0c 43 df    |                 tsb 00df43           ; Timer Enable Register (TER)
  23:126 | DONE wsp | na  8 16 |        |             |
  23:127 | DONE ins | na  8 16 | 006028 | a9 25       |                 lda.# %00100101      ; Set UART0 for 8-N-1
  23:128 | DONE ins | na  8 16 | 00602a | 8d 70 df    |                 sta 00df70           ; UART 0 Control/Status Register (ACSR0)
  23:129 | DONE wsp | na  8 16 |        |             |
  23:130 | DONE ins | na  8 16 | 00602d | 4c 60 60    |                 jmp 006060           ; we return with A as 8 bits
  23:131 | DONE wsp | na  8 16 |        |             |
  23:132 | DONE wsp | na  8 16 |        |             |
  23:133 | DONE cmt | na  8 16 |        |             | ; ===================================================================
  23:134 | DONE cmt | na  8 16 |        |             | ; PUT_CHR
  23:135 | DONE cmt | na  8 16 |        |             | ; Wait until the last transmission has been completed then send the character
  23:136 | DONE cmt | na  8 16 |        |             | ; in A. Destroys A. Does not have to be called with A8.
  23:137 | DONE lbl | na  8 16 | 006030 |             | put_chr                              
  23:138 | DONE ins | na  8 16 | 006030 | 08          |                 php                  ; save register sizes
  23:139 | DONE ins | na  8 16 | 006031 | e2 20       |                 sep 20               
  23:140 | DONE ctl | na  8 16 |        |             |         .!a8
  23:141 | DONE ins | na  8 16 | 006033 | 48          |                 pha                  
  23:142 | DONE ins | na  8 16 | 006034 | a9 02       |                 lda.# 02             ; (1<<1)
  23:143 | DONE wsp | na  8 16 |        |             |
  23:144 | DONE lbl | na  8 16 | 006036 |             | put_chr_wait                         
  23:145 | DONE ins | na  8 16 | 006036 | 2c 48 df    |                 bit 00df48           ; timer finished?
  23:146 | DONE ins | na  8 16 | 006039 | f0 fb       |                 beq 006036           
  23:147 | DONE wsp | na  8 16 |        |             |
  23:148 | DONE ins | na  8 16 | 00603b | 68          |                 pla                  
  23:149 | DONE ins | na  8 16 | 00603c | 8d 71 df    |                 sta 00df71           ; transmit char
  23:150 | DONE ins | na  8 16 | 00603f | 28          |                 plp                  
  23:151 | DONE wsp | na  8 16 |        |             |
  23:152 | DONE ins | na  8 16 | 006040 | 60          |                 rts                  
  23:153 | DONE wsp | na  8 16 |        |             |
  23:154 | DONE cmt | na  8 16 |        |             | ; ===================================================================
  23:155 | DONE cmt | na  8 16 |        |             | ; GET_CHR
  23:156 | DONE cmt | na  8 16 |        |             | ; Fetch the next character from the receive buffer waiting for some to arrive
  23:157 | DONE cmt | na  8 16 |        |             | ; if the buffer is empty.
  23:158 | DONE lbl | na  8 16 | 006041 |             | get_chr                              
  23:159 | DONE ins | na  8 16 | 006041 | 08          |                 php                  ; Save register sizes
  23:160 | DONE ins | na  8 16 | 006042 | e2 20       |                 sep 20               
  23:161 | DONE ctl | na  8 16 |        |             |         .!a8
  23:162 | DONE ins | na  8 16 | 006044 | a9 01       |                 lda.# 01             ; (1<<0)
  23:163 | DONE wsp | na  8 16 |        |             |
  23:164 | DONE lbl | na  8 16 | 006046 |             | get_chr_wait                         
  23:165 | DONE ins | na  8 16 | 006046 | 2c 48 df    |                 bit 00df48           ; Any data in RX buffer?
  23:166 | DONE ins | na  8 16 | 006049 | f0 fb       |                 beq 006046           ; No, keep waiting
  23:167 | DONE ins | na  8 16 | 00604b | ad 71 df    |                 lda 00df71           ; Yes, read it
  23:168 | DONE ins | na  8 16 | 00604e | 28          |                 plp                  
  23:169 | DONE wsp | na  8 16 |        |             |
  23:170 | DONE ins | na  8 16 | 00604f | 60          |                 rts                  
  23:171 | DONE wsp | na  8 16 |        |             |
  23:172 | DONE cmt | na  8 16 |        |             | ; ===================================================================
  23:173 | DONE cmt | na  8 16 |        |             | ; HAVE_CHR?
  23:174 | DONE cmt | na  8 16 |        |             | ; Check if the receive buffer contains any data and return C=1 if there is
  23:175 | DONE cmt | na  8 16 |        |             | ; some.
  23:176 | DONE cmt | na  8 16 |        |             | ; TODO Test this
  23:177 | DONE wsp | na  8 16 |        |             |
  23:178 | DONE lbl | na  8 16 | 006050 |             | have_chr?                            
  23:179 | DONE ins | na  8 16 | 006050 | 48          |                 pha                  ; save caller's A
  23:180 | DONE ins | na  8 16 | 006051 | 08          |                 php                  
  23:181 | DONE ins | na  8 16 | 006052 | e2 20       |                 sep 20               
  23:182 | DONE ctl | na  8 16 |        |             |         .!a8
  23:183 | DONE ins | na  8 16 | 006054 | ad 48 df    |                 lda 00df48           ; read the status register
  23:184 | DONE ins | na  8 16 | 006057 | 28          |                 plp                  
  23:185 | DONE ins | na  8 16 | 006058 | 6a          |                 ror.a                ; shift hw_uart0r bit into carry
  23:186 | DONE ins | na  8 16 | 006059 | c2 20       |                 rep 20               
  23:187 | DONE ctl | na 16 16 |        |             |         .!a16
  23:188 | DONE ins | na 16 16 | 00605b | 68          |                 pla                  ; restore A
  23:189 | DONE ins | na 16 16 | 00605c | 60          |                 rts                  
  23:190 | DONE wsp | na 16 16 |        |             |
  23:191 | DONE cmt | na 16 16 |        |             | ; END
  24:000 | DONE wsp | na 16 16 |        |             |
  25:000 | DONE wsp | na 16 16 |        |             |
  26:000 | DONE cmt | na 16 16 |        |             | ; ===================================================================
  27:000 | DONE cmt | na 16 16 |        |             | ; DICTIONARY ROUTINES
  28:000 | DONE wsp | na 16 16 |        |             |
  29:000 | DONE cmt | na 16 16 |        |             | ; Word code routines are sorted alphabetically, except for the first three
  30:000 | DONE cmt | na 16 16 |        |             | ; - COLD, ABORT, and QUIT - and a few others that flow into each other. The
  31:000 | DONE cmt | na 16 16 |        |             | ; byte and cycle values are calculated without the RTS instruction.
  32:000 | DONE wsp | na 16 16 |        |             |
  33:000 | DONE wsp | na 16 16 |        |             |
  34:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
  35:000 | DONE cmt | na 16 16 |        |             | ; COLD ( -- ) X bytes / X Cycles
  36:000 | DONE cmt | na 16 16 |        |             | ; Reboot the system
  37:000 | DONE lbl | na 16 16 | 00605d |             | xt_cold                              
  38:000 | DONE wsp | na 16 16 |        |             |
  39:000 | DONE ins | na 16 16 | 00605d | 4c 00 60    |                 jmp 006000           ; don't use JSR, jump back to start
  40:000 | DONE lbl | na 16 16 | 006060 |             | start                                
  41:000 | DONE ins | na 16 16 | 006060 | 18          |                 clc                  
  41:001 | DONE ins | na 16 16 | 006061 | fb          |                 xce                  
  41:002 | DONE ctl | na 16 16 |        |             |         .!native
  42:000 | DONE ins | na 16 16 | 006062 | c2 20       |                 rep 20               
  42:001 | DONE ctl | na 16 16 |        |             |         .!a16
  43:000 | DONE ins | na 16 16 | 006064 | c2 10       |                 rep 10               
  43:001 | DONE ctl | na 16 16 |        |             |         .!xy16
  44:000 | DONE ins | na 16 16 | 006066 | 78          |                 sei                  
  45:000 | DONE wsp | na 16 16 |        |             |
  46:000 | DONE cmt | na 16 16 |        |             |                 ; TODO switch to Single Task mode
  47:000 | DONE cmt | na 16 16 |        |             |                 ; TODO set up Direct Page stuff
  48:000 | DONE cmt | na 16 16 |        |             |                 ; TODO initiate User variables
  49:000 | DONE wsp | na 16 16 |        |             |
  50:000 | DONE cmt | na 16 16 |        |             |                 ; The name token (nt) of DROP is always the first one in the
  51:000 | DONE cmt | na 16 16 |        |             |                 ; virgin Dictionary, so we start off the Dictionary Pointer (DP)
  52:000 | DONE cmt | na 16 16 |        |             |                 ; there. Adding high-level words will change this before the
  53:000 | DONE cmt | na 16 16 |        |             |                 ; user has a chance to call WORDS
  54:000 | DONE ins | na 16 16 | 006067 | a9 83 68    |                 lda.# 006883         
  55:000 | DONE ins | na 16 16 | 00606a | 85 02       |                 sta.d 000202         
  56:000 | DONE wsp | na 16 16 |        |             |
  57:000 | DONE cmt | na 16 16 |        |             |                 ; The compiler pointer (CP) points to the first free cell
  58:000 | DONE cmt | na 16 16 |        |             |                 ; in RAM
  59:000 | DONE ins | na 16 16 | 00606c | a9 00 03    |                 lda.# 000300         
  60:000 | DONE ins | na 16 16 | 00606f | 85 00       |                 sta.d 000200         
  61:000 | DONE wsp | na 16 16 |        |             |
  62:000 | DONE cmt | na 16 16 |        |             |                 ; Prepare input buffers
  63:000 | DONE ins | na 16 16 | 006071 | a9 00 7c    |                 lda.# 007c00         ; start with first input buffer
  64:000 | DONE ins | na 16 16 | 006074 | 85 0c       |                 sta.d 00020c         
  65:000 | DONE wsp | na 16 16 |        |             |
  66:000 | DONE ins | na 16 16 | 006076 | 64 10       |                 stz.d 000210         ; previous input buffer is empty
  67:000 | DONE ins | na 16 16 | 006078 | 64 0a       |                 stz.d 00020a         ; SOURCE-ID is zero
  68:000 | DONE ins | na 16 16 | 00607a | 64 14       |                 stz.d 000214         ; STATE is zero (interpret)
  69:000 | DONE wsp | na 16 16 |        |             |
  70:000 | DONE cmt | na 16 16 |        |             |                 ; Clear Data Stack
  71:000 | DONE ins | na 16 16 | 00607c | a0 00 00    |                 ldy.# 0000           
  72:000 | DONE ins | na 16 16 | 00607f | a2 f0 02    |                 ldx.# 0002f0         
  73:000 | DONE wsp | na 16 16 |        |             |
  74:000 | DONE cmt | na 16 16 |        |             |                 ; Clean the screen, assumes vt100 terminal
  75:000 | DONE ins | na 16 16 | 006082 | 20 36 64    |                 jsr 006436           
  76:000 | DONE wsp | na 16 16 |        |             |
  77:000 | DONE cmt | na 16 16 |        |             |                 ; Define high-level words via EVALUATE. At this point, whatever
  78:000 | DONE cmt | na 16 16 |        |             |                 ; is in Y (TOS) is rubbish, so we don't have to push it to the
  79:000 | DONE cmt | na 16 16 |        |             |                 ; stack first
  80:000 | DONE ins | na 16 16 | 006085 | ca          |                 dex                  
  81:000 | DONE ins | na 16 16 | 006086 | ca          |                 dex                  
  82:000 | DONE ins | na 16 16 | 006087 | ca          |                 dex                  
  83:000 | DONE ins | na 16 16 | 006088 | ca          |                 dex                  
  84:000 | DONE ins | na 16 16 | 006089 | a9 08 69    |                 lda.# 006908         
  85:000 | DONE ins | na 16 16 | 00608c | 95 00       |                 sta.dx 00            ; Start address goes in NOS
  86:000 | DONE ins | na 16 16 | 00608e | a0 cb 00    |                 ldy.# 0000cb         ; length goes in TOS
  87:000 | DONE wsp | na 16 16 |        |             |
  88:000 | DONE ins | na 16 16 | 006091 | 20 6b 63    |                 jsr 00636b           
  89:000 | DONE wsp | na 16 16 |        |             |
  90:000 | DONE cmt | na 16 16 |        |             |                 ; drop through to ABORT
  91:000 | DONE wsp | na 16 16 |        |             |
  92:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
  93:000 | DONE cmt | na 16 16 |        |             | ; ABORT ( -- ) 8+ bytes / X cycles
  94:000 | DONE cmt | na 16 16 |        |             | ; Reset the parameter (data) stack pointer and continue as QUIT
  95:000 | DONE cmt | na 16 16 |        |             | ; We can jump here via subroutine because we reset the stack pointer
  96:000 | DONE cmt | na 16 16 |        |             | ; anyway. Flows into QUIT.
  97:000 | DONE cmt | na 16 16 |        |             | ; TODO see which parts of COLD we should integrate here
  98:000 | DONE lbl | na 16 16 | 006094 |             | xt_abort                             
  99:000 | DONE ins | na 16 16 | 006094 | c2 20       |                 rep 20               
  99:001 | DONE ctl | na 16 16 |        |             |         .!a16
 100:000 | DONE cmt | na 16 16 |        |             |                 ; clear Data Stack
 101:000 | DONE ins | na 16 16 | 006096 | a0 00 00    |                 ldy.# 0000           
 102:000 | DONE ins | na 16 16 | 006099 | a2 f0 02    |                 ldx.# 0002f0         
 103:000 | DONE wsp | na 16 16 |        |             |
 104:000 | DONE wsp | na 16 16 |        |             |
 105:000 | DONE cmt | na 16 16 |        |             | ; drops through to QUIT, z_abort is the same as z_quit.
 106:000 | DONE wsp | na 16 16 |        |             |
 107:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 108:000 | DONE cmt | na 16 16 |        |             | ; QUIT ( -- ) X bytes / X cycles
 109:000 | DONE cmt | na 16 16 |        |             | ; Reset the input, clearning Return Stack. Jumps to QUIT do not have to be
 110:000 | DONE cmt | na 16 16 |        |             | ; subroutine jumps as the Return Stack is cleared anyway. Liara Forth follows
 111:000 | DONE cmt | na 16 16 |        |             | ; the ANSI Forth recommendation to use REFILL. Note we don't display the "ok"
 112:000 | DONE cmt | na 16 16 |        |             | ; system prompt until after the first output. This follows Gforth.
 113:000 | DONE lbl | na 16 16 | 00609c |             | xt_quit                              
 114:000 | DONE cmt | na 16 16 |        |             |                 ; clear Return Stack
 115:000 | DONE ins | na 16 16 | 00609c | a9 ff 7f    |                 lda.# 007fff         
 116:000 | DONE ins | na 16 16 | 00609f | 1b          |                 tcs                  
 117:000 | DONE wsp | na 16 16 |        |             |
 118:000 | DONE cmt | na 16 16 |        |             |                 ; make sure Instruction Pointer is empty
 119:000 | DONE cmt | na 16 16 |        |             |                 ; TODO move this someplace else or else it will end up in ROM
 120:000 | DONE ins | na 16 16 | 0060a0 | 9c 9a 63    |                 stz 00639a           
 121:000 | DONE wsp | na 16 16 |        |             |
 122:000 | DONE cmt | na 16 16 |        |             |                 ; switch SOURCE-ID to zero (keyboard input)
 123:000 | DONE ins | na 16 16 | 0060a3 | 64 0a       |                 stz.d 00020a         
 124:000 | DONE wsp | na 16 16 |        |             |
 125:000 | DONE cmt | na 16 16 |        |             |                 ; switch to interpret state (STATE is zero)
 126:000 | DONE ins | na 16 16 | 0060a5 | 64 14       |                 stz.d 000214         
 127:000 | DONE wsp | na 16 16 |        |             |
 128:000 | DONE lbl | na 16 16 | 0060a7 |             | quit_get_line                        
 129:000 | DONE cmt | na 16 16 |        |             |                 ; Empty current input buffer. Note the previous input line is
 130:000 | DONE cmt | na 16 16 |        |             |                 ; conserved even if we came here from an abort
 131:000 | DONE ins | na 16 16 | 0060a7 | 64 0e       |                 stz.d 00020e         
 132:000 | DONE wsp | na 16 16 |        |             |
 133:000 | DONE cmt | na 16 16 |        |             |                 ; Accept a line from the current input source
 134:000 | DONE ins | na 16 16 | 0060a9 | 20 a8 64    |                 jsr 0064a8           ; ( -- f )
 135:000 | DONE wsp | na 16 16 |        |             |
 136:000 | DONE ins | na 16 16 | 0060ac | 98          |                 tya                  ; force flag test
 137:000 | DONE ins | na 16 16 | 0060ad | d0 06       |                 bne 0060b5           
 138:000 | DONE wsp | na 16 16 |        |             |
 139:000 | DONE cmt | na 16 16 |        |             |                 ; If REFILL returned a FALSE flag, something went wrong and we
 140:000 | DONE cmt | na 16 16 |        |             |                 ; need to print an error message and reset the machine. We don't
 141:000 | DONE cmt | na 16 16 |        |             |                 ; need to save TOS because we're going to clobber it anyway when we
 142:000 | DONE cmt | na 16 16 |        |             |                 ; go back to ABORT.
 143:000 | DONE ins | na 16 16 | 0060af | a9 9d 6a    |                 lda.# 006a9d         
 144:000 | DONE ins | na 16 16 | 0060b2 | 4c ce 68    |                 jmp 0068ce           
 145:000 | DONE wsp | na 16 16 |        |             |
 146:000 | DONE wsp | na 16 16 |        |             |
 147:000 | DONE lbl | na 16 16 | 0060b5 |             | quit_refill_successful               
 148:000 | DONE cmt | na 16 16 |        |             |                 ; Assume we have successfully accepted a string of input from
 149:000 | DONE cmt | na 16 16 |        |             |                 ; a source, with address of buffer in cib and length of input in
 150:000 | DONE cmt | na 16 16 |        |             |                 ; ciblen. We arrive here still with the TRUE flag from REFILL as
 151:000 | DONE cmt | na 16 16 |        |             |                 ; TOS (in Y)
 152:000 | DONE ins | na 16 16 | 0060b5 | b4 00       |                 ldy.dx 00            ; drop TOS
 153:000 | DONE ins | na 16 16 | 0060b7 | e8          |                 inx                  
 154:000 | DONE ins | na 16 16 | 0060b8 | e8          |                 inx                  
 155:000 | DONE wsp | na 16 16 |        |             |
 156:000 | DONE cmt | na 16 16 |        |             |                 ; make >IN point to begining of buffer
 157:000 | DONE ins | na 16 16 | 0060b9 | 64 12       |                 stz.d 000212         
 158:000 | DONE wsp | na 16 16 |        |             |
 159:000 | DONE cmt | na 16 16 |        |             |                 ; Main compile/execute routine. Consider moving this inside QUIT
 160:000 | DONE cmt | na 16 16 |        |             |                 ; once we know everything works
 161:000 | DONE ins | na 16 16 | 0060bb | 20 a4 68    |                 jsr 0068a4           
 162:000 | DONE wsp | na 16 16 |        |             |
 163:000 | DONE cmt | na 16 16 |        |             |                 ; Test for Data Stack underflow. Our stack is so large in single
 164:000 | DONE cmt | na 16 16 |        |             |                 ; user mode that we don't bother checking for overflow - if that
 165:000 | DONE cmt | na 16 16 |        |             |                 ; happens, we're screwed anyway
 166:000 | DONE ins | na 16 16 | 0060be | e0 f1 02    |                 cpx.# 0002f1         
 167:000 | DONE ins | na 16 16 | 0060c1 | 90 06       |                 bcc 0060c9           ; DSP must always be smaller (!) than DSP0
 168:000 | DONE wsp | na 16 16 |        |             |
 169:000 | DONE ins | na 16 16 | 0060c3 | a9 eb 6a    |                 lda.# 006aeb         
 170:000 | DONE ins | na 16 16 | 0060c6 | 4c ce 68    |                 jmp 0068ce           
 171:000 | DONE wsp | na 16 16 |        |             |
 172:000 | DONE lbl | na 16 16 | 0060c9 |             | quit_ok                              
 173:000 | DONE cmt | na 16 16 |        |             |                 ; Display system prompt if all went well
 174:000 | DONE ins | na 16 16 | 0060c9 | a9 d3 69    |                 lda.# 0069d3         
 175:000 | DONE ins | na 16 16 | 0060cc | 20 d4 68    |                 jsr 0068d4           
 176:000 | DONE wsp | na 16 16 |        |             |
 177:000 | DONE wsp | na 16 16 |        |             |
 178:000 | DONE cmt | na 16 16 |        |             |                 ; get next line
 179:000 | DONE ins | na 16 16 | 0060cf | 4c a7 60    |                 jmp 0060a7           
 180:000 | DONE wsp | na 16 16 |        |             |
 181:000 | DONE lbl | na 16 16 | 0060d2 |             | z_cold                               
 182:000 | DONE lbl | na 16 16 | 0060d2 |             | z_abort                              
 183:000 | DONE lbl | na 16 16 | 0060d2 |             | z_quit                               
 183:001 | DONE ins | na 16 16 | 0060d2 | ea          |                 nop                  ; dummy for compilation, TODO test if required
 184:000 | DONE wsp | na 16 16 |        |             |
 185:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 186:000 | DONE cmt | na 16 16 |        |             | ; >IN "TO-IN" ( -- addr ) 6 bytes / 12 cycles
 187:000 | DONE cmt | na 16 16 |        |             | ; Return address where pointer to current char in input buffer lives (>IN)
 188:000 | DONE lbl | na 16 16 | 0060d3 |             | xt_to-in                             
 189:000 | DONE ins | na 16 16 | 0060d3 | ca          |                 dex                  
 190:000 | DONE ins | na 16 16 | 0060d4 | ca          |                 dex                  
 191:000 | DONE ins | na 16 16 | 0060d5 | 94 00       |                 sty.dx 00            
 192:000 | DONE wsp | na 16 16 |        |             |
 193:000 | DONE ins | na 16 16 | 0060d7 | a0 12 02    |                 ldy.# 000212         ; >IN
 194:000 | DONE lbl | na 16 16 | 0060da |             | z_to-in                              
 194:001 | DONE ins | na 16 16 | 0060da | 60          |                 rts                  
 195:000 | DONE wsp | na 16 16 |        |             |
 196:000 | DONE wsp | na 16 16 |        |             |
 197:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 198:000 | DONE cmt | na 16 16 |        |             | ; , "COMMA" ( n -- ) 11 bytes / 29 cycles
 199:000 | DONE cmt | na 16 16 |        |             | ; Allot one cell and store TOS in memory. We ignore alignment issues, though
 200:000 | DONE cmt | na 16 16 |        |             | ; satisfy the ANSI requirement that an aligned compiler pointer will remain
 201:000 | DONE cmt | na 16 16 |        |             | ; aligned
 202:000 | DONE cmt | na 16 16 |        |             | ; There is another variant possible:
 203:000 | DONE cmt | na 16 16 |        |             | ;               tya
 204:000 | DONE cmt | na 16 16 |        |             | ;               ldy.d cp
 205:000 | DONE cmt | na 16 16 |        |             | ;               sta.y 0000
 206:000 | DONE cmt | na 16 16 |        |             | ;               iny
 207:000 | DONE cmt | na 16 16 |        |             | ;               iny
 208:000 | DONE cmt | na 16 16 |        |             | ;               sty.d cp
 209:000 | DONE cmt | na 16 16 |        |             | ;               ldy.dx 00
 210:000 | DONE cmt | na 16 16 |        |             | ;               inx
 211:000 | DONE cmt | na 16 16 |        |             | ;               inx
 212:000 | DONE cmt | na 16 16 |        |             | ; This is as fast as the variant below, but three bytes longer
 213:000 | DONE lbl | na 16 16 | 0060db |             | xt_comma                             
 214:000 | DONE ins | na 16 16 | 0060db | 98          |                 tya                  
 215:000 | DONE ins | na 16 16 | 0060dc | 92 00       |                 sta.di 000200        ; STA (CP)
 216:000 | DONE ins | na 16 16 | 0060de | e6 00       |                 inc.d 000200         
 217:000 | DONE ins | na 16 16 | 0060e0 | e6 00       |                 inc.d 000200         
 218:000 | DONE wsp | na 16 16 |        |             |
 219:000 | DONE ins | na 16 16 | 0060e2 | b4 00       |                 ldy.dx 00            
 220:000 | DONE ins | na 16 16 | 0060e4 | e8          |                 inx                  
 221:000 | DONE ins | na 16 16 | 0060e5 | e8          |                 inx                  
 222:000 | DONE wsp | na 16 16 |        |             |
 223:000 | DONE lbl | na 16 16 | 0060e6 |             | z_comma                              
 223:001 | DONE ins | na 16 16 | 0060e6 | 60          |                 rts                  
 224:000 | DONE wsp | na 16 16 |        |             |
 225:000 | DONE wsp | na 16 16 |        |             |
 226:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 227:000 | DONE cmt | na 16 16 |        |             | ; ! "STORE" ( n addr -- ) 9 bytes / X cycles
 228:000 | DONE cmt | na 16 16 |        |             | ; Save value at designated memory location
 229:000 | DONE lbl | na 16 16 | 0060e7 |             | xt_store                             
 230:000 | DONE ins | na 16 16 | 0060e7 | b5 00       |                 lda.dx 00            ; NOS has value
 231:000 | DONE ins | na 16 16 | 0060e9 | 99 00 00    |                 sta.y 0000           
 232:000 | DONE ins | na 16 16 | 0060ec | e8          |                 inx                  
 233:000 | DONE ins | na 16 16 | 0060ed | e8          |                 inx                  
 234:000 | DONE ins | na 16 16 | 0060ee | e8          |                 inx                  
 235:000 | DONE ins | na 16 16 | 0060ef | e8          |                 inx                  
 236:000 | DONE wsp | na 16 16 |        |             |
 237:000 | DONE lbl | na 16 16 | 0060f0 |             | z_store                              
 237:001 | DONE ins | na 16 16 | 0060f0 | 60          |                 rts                  
 238:000 | DONE wsp | na 16 16 |        |             |
 239:000 | DONE wsp | na 16 16 |        |             |
 240:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 241:000 | DONE cmt | na 16 16 |        |             | ; @ "FETCH" ( addr -- n ) 4 bytes / 7-8 cycles
 242:000 | DONE cmt | na 16 16 |        |             | ; Get one cell (16 bit) value from given address
 243:000 | DONE lbl | na 16 16 | 0060f1 |             | xt_fetch                             
 244:000 | DONE ins | na 16 16 | 0060f1 | b9 00 00    |                 lda.y 0000           
 245:000 | DONE ins | na 16 16 | 0060f4 | a8          |                 tay                  
 246:000 | DONE lbl | na 16 16 | 0060f5 |             | z_fetch                              
 246:001 | DONE ins | na 16 16 | 0060f5 | 60          |                 rts                  
 247:000 | DONE wsp | na 16 16 |        |             |
 248:000 | DONE wsp | na 16 16 |        |             |
 249:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 250:000 | DONE cmt | na 16 16 |        |             | ; + "PLUS" ( n m -- n+m ) 7 bytes / X cycles
 251:000 | DONE cmt | na 16 16 |        |             | ; Add TOS and NOS
 252:000 | DONE lbl | na 16 16 | 0060f6 |             | xt_plus                              
 253:000 | DONE dir | na 16 16 |        |             |         .!a16                        
 254:000 | DONE ins | na 16 16 | 0060f6 | 98          |                 tya                  
 255:000 | DONE ins | na 16 16 | 0060f7 | 18          |                 clc                  
 256:000 | DONE ins | na 16 16 | 0060f8 | 75 00       |                 adc.dx 00            
 257:000 | DONE ins | na 16 16 | 0060fa | a8          |                 tay                  
 258:000 | DONE ins | na 16 16 | 0060fb | e8          |                 inx                  
 259:000 | DONE ins | na 16 16 | 0060fc | e8          |                 inx                  
 260:000 | DONE wsp | na 16 16 |        |             |
 261:000 | DONE lbl | na 16 16 | 0060fd |             | z_plus                               
 261:001 | DONE ins | na 16 16 | 0060fd | 60          |                 rts                  
 262:000 | DONE wsp | na 16 16 |        |             |
 263:000 | DONE wsp | na 16 16 |        |             |
 264:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 265:000 | DONE cmt | na 16 16 |        |             | ; - "MINUS" ( n m -- n-m ) 10 bytes / X cycles
 266:000 | DONE cmt | na 16 16 |        |             | ; Subtract NOS from TOS
 267:000 | DONE lbl | na 16 16 | 0060fe |             | xt_minus                             
 268:000 | DONE dir | na 16 16 |        |             |         .!a16                        
 269:000 | DONE ins | na 16 16 | 0060fe | 98          |                 tya                  
 270:000 | DONE ins | na 16 16 | 0060ff | 49 ff ff    |                 eor.# 0ffff          
 271:000 | DONE wsp | na 16 16 |        |             |
 272:000 | DONE ins | na 16 16 | 006102 | 38          |                 sec                  ; not CLC
 273:000 | DONE ins | na 16 16 | 006103 | 75 00       |                 adc.dx 00            
 274:000 | DONE wsp | na 16 16 |        |             |
 275:000 | DONE ins | na 16 16 | 006105 | a8          |                 tay                  
 276:000 | DONE ins | na 16 16 | 006106 | e8          |                 inx                  
 277:000 | DONE ins | na 16 16 | 006107 | e8          |                 inx                  
 278:000 | DONE wsp | na 16 16 |        |             |
 279:000 | DONE lbl | na 16 16 | 006108 |             | z_minus                              
 279:001 | DONE ins | na 16 16 | 006108 | 60          |                 rts                  
 280:000 | DONE wsp | na 16 16 |        |             |
 281:000 | DONE wsp | na 16 16 |        |             |
 282:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 283:000 | DONE cmt | na 16 16 |        |             | ; 0 "ZERO" ( -- 0 ) 7 bytes / 12 cycles
 284:000 | DONE cmt | na 16 16 |        |             | ; Pushes the number 0000 on the Data Stack
 285:000 | DONE lbl | na 16 16 | 006109 |             | xt_zero                              
 286:000 | DONE dir | na 16 16 |        |             |         .!xy16                       
 287:000 | DONE ins | na 16 16 | 006109 | ca          |                 dex                  
 288:000 | DONE ins | na 16 16 | 00610a | ca          |                 dex                  
 289:000 | DONE ins | na 16 16 | 00610b | 94 00       |                 sty.dx 00            
 290:000 | DONE ins | na 16 16 | 00610d | a0 00 00    |                 ldy.# 0000           
 291:000 | DONE wsp | na 16 16 |        |             |
 292:000 | DONE lbl | na 16 16 | 006110 |             | z_zero                               
 292:001 | DONE ins | na 16 16 | 006110 | 60          |                 rts                  
 293:000 | DONE wsp | na 16 16 |        |             |
 294:000 | DONE wsp | na 16 16 |        |             |
 295:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 296:000 | DONE cmt | na 16 16 |        |             | ; 1 "ONE" ( -- 1 ) 7 bytes / 12 cycles
 297:000 | DONE cmt | na 16 16 |        |             | ; Pushes the number 1 on the Data Stack
 298:000 | DONE lbl | na 16 16 | 006111 |             | xt_one                               
 299:000 | DONE dir | na 16 16 |        |             |         .!xy16                       
 300:000 | DONE ins | na 16 16 | 006111 | ca          |                 dex                  
 301:000 | DONE ins | na 16 16 | 006112 | ca          |                 dex                  
 302:000 | DONE ins | na 16 16 | 006113 | 94 00       |                 sty.dx 00            
 303:000 | DONE ins | na 16 16 | 006115 | a0 01 00    |                 ldy.# 0001           
 304:000 | DONE wsp | na 16 16 |        |             |
 305:000 | DONE lbl | na 16 16 | 006118 |             | z_one                                
 305:001 | DONE ins | na 16 16 | 006118 | 60          |                 rts                  
 306:000 | DONE wsp | na 16 16 |        |             |
 307:000 | DONE wsp | na 16 16 |        |             |
 308:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 309:000 | DONE cmt | na 16 16 |        |             | ; 1- "ONE-MINUS" ( n -- n-1 ) 1 byte / 2 cycles
 310:000 | DONE cmt | na 16 16 |        |             | ; Subtract 1 from Top of Stack (TOS). Because there is no checking if there is
 311:000 | DONE cmt | na 16 16 |        |             | ; actually anything on the Data Stack, this routine will fail silently if the
 312:000 | DONE cmt | na 16 16 |        |             | ; stack is empty
 313:000 | DONE lbl | na 16 16 | 006119 |             | xt_one-minus                         
 314:000 | DONE dir | na 16 16 |        |             |         .!xy16                       
 315:000 | DONE ins | na 16 16 | 006119 | 88          |                 dey                  
 316:000 | DONE lbl | na 16 16 | 00611a |             | z_one-minus                          
 316:001 | DONE ins | na 16 16 | 00611a | 60          |                 rts                  
 317:000 | DONE wsp | na 16 16 |        |             |
 318:000 | DONE wsp | na 16 16 |        |             |
 319:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 320:000 | DONE cmt | na 16 16 |        |             | ; 1+ "ONE-PLUS" ( n -- n+1 ) 1 byte / 2 cycles
 321:000 | DONE cmt | na 16 16 |        |             | ; Add 1 to TOS. Because there is no checking if there is actually anything on
 322:000 | DONE cmt | na 16 16 |        |             | ; the Data Stack, this routine will fail silently if the stack is empty
 323:000 | DONE lbl | na 16 16 | 00611b |             | xt_one-plus                          
 324:000 | DONE dir | na 16 16 |        |             |         .!xy16                       
 325:000 | DONE ins | na 16 16 | 00611b | c8          |                 iny                  
 326:000 | DONE lbl | na 16 16 | 00611c |             | z_one-plus                           
 326:001 | DONE ins | na 16 16 | 00611c | 60          |                 rts                  
 327:000 | DONE wsp | na 16 16 |        |             |
 328:000 | DONE wsp | na 16 16 |        |             |
 329:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 330:000 | DONE cmt | na 16 16 |        |             | ; 2 "TWO" ( -- 2 ) 7 bytes / 12 cycles
 331:000 | DONE cmt | na 16 16 |        |             | ; Pushes the number 2 on the Data Stack
 332:000 | DONE lbl | na 16 16 | 00611d |             | xt_two                               
 333:000 | DONE dir | na 16 16 |        |             |         .!xy16                       
 334:000 | DONE ins | na 16 16 | 00611d | ca          |                 dex                  
 335:000 | DONE ins | na 16 16 | 00611e | ca          |                 dex                  
 336:000 | DONE ins | na 16 16 | 00611f | 94 00       |                 sty.dx 00            
 337:000 | DONE ins | na 16 16 | 006121 | a0 02 00    |                 ldy.# 0002           
 338:000 | DONE wsp | na 16 16 |        |             |
 339:000 | DONE lbl | na 16 16 | 006124 |             | z_two                                
 339:001 | DONE ins | na 16 16 | 006124 | 60          |                 rts                  
 340:000 | DONE wsp | na 16 16 |        |             |
 341:000 | DONE wsp | na 16 16 |        |             |
 342:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 343:000 | DONE cmt | na 16 16 |        |             | ; 2* "TWO-STAR" ( n -- 2*n ) 3 bytes / 6 cycles
 344:000 | DONE cmt | na 16 16 |        |             | ; Multiply Top of Stack (TOS) by 2. This is also used by CELLS
 345:000 | DONE lbl | na 16 16 | 006125 |             | xt_two-star                          
 346:000 | DONE dir | na 16 16 |        |             |         .!a16                        
 347:000 | DONE dir | na 16 16 |        |             |         .!xy16                       
 348:000 | DONE ins | na 16 16 | 006125 | 98          |                 tya                  
 349:000 | DONE ins | na 16 16 | 006126 | 0a          |                 asl.a                
 350:000 | DONE ins | na 16 16 | 006127 | a8          |                 tay                  
 351:000 | DONE wsp | na 16 16 |        |             |
 352:000 | DONE lbl | na 16 16 | 006128 |             | z_two-star                           
 352:001 | DONE ins | na 16 16 | 006128 | 60          |                 rts                  
 353:000 | DONE wsp | na 16 16 |        |             |
 354:000 | DONE wsp | na 16 16 |        |             |
 355:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 356:000 | DONE cmt | na 16 16 |        |             | ; 2DROP ( n m -- ) 6 bytes / 13 cycles
 357:000 | DONE cmt | na 16 16 |        |             | ; Drop first two entries of Data Stack
 358:000 | DONE lbl | na 16 16 | 006129 |             | xt_2drop                             
 359:000 | DONE ins | na 16 16 | 006129 | b4 02       |                 ldy.dx 02            
 360:000 | DONE ins | na 16 16 | 00612b | e8          |                 inx                  
 361:000 | DONE ins | na 16 16 | 00612c | e8          |                 inx                  
 362:000 | DONE ins | na 16 16 | 00612d | e8          |                 inx                  
 363:000 | DONE ins | na 16 16 | 00612e | e8          |                 inx                  
 364:000 | DONE wsp | na 16 16 |        |             |
 365:000 | DONE lbl | na 16 16 | 00612f |             | z_2drop                              
 365:001 | DONE ins | na 16 16 | 00612f | 60          |                 rts                  
 366:000 | DONE wsp | na 16 16 |        |             |
 367:000 | DONE wsp | na 16 16 |        |             |
 368:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 369:000 | DONE cmt | na 16 16 |        |             | ; 2DUP ( n m -- n m n m ) 10 bytes / 23 cycles
 370:000 | DONE cmt | na 16 16 |        |             | ; Duplicated the top two data stack entries
 371:000 | DONE wsp | na 16 16 |        |             |
 372:000 | DONE lbl | na 16 16 | 006130 |             | xt_2dup                              
 373:000 | DONE dir | na 16 16 |        |             |         .!xy16                       
 374:000 | DONE ins | na 16 16 | 006130 | ca          |                 dex                  
 375:000 | DONE ins | na 16 16 | 006131 | ca          |                 dex                  
 376:000 | DONE ins | na 16 16 | 006132 | ca          |                 dex                  
 377:000 | DONE ins | na 16 16 | 006133 | ca          |                 dex                  
 378:000 | DONE ins | na 16 16 | 006134 | 94 02       |                 sty.dx 02            
 379:000 | DONE ins | na 16 16 | 006136 | b5 04       |                 lda.dx 04            
 380:000 | DONE ins | na 16 16 | 006138 | 95 00       |                 sta.dx 00            
 381:000 | DONE wsp | na 16 16 |        |             |
 382:000 | DONE lbl | na 16 16 | 00613a |             | z_2dup                               
 382:001 | DONE ins | na 16 16 | 00613a | 60          |                 rts                  
 383:000 | DONE wsp | na 16 16 |        |             |
 384:000 | DONE wsp | na 16 16 |        |             |
 385:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 386:000 | DONE cmt | na 16 16 |        |             | ; ' "TICK" ( "string" -- xt ) X bytes / X cycles
 387:000 | DONE cmt | na 16 16 |        |             | ; Given a string with the name of a word, return the word's execution token (xt)
 388:000 | DONE cmt | na 16 16 |        |             | ; Abort if not found
 389:000 | DONE lbl | na 16 16 | 00613b |             | xt_tick                              
 390:000 | DONE ins | na 16 16 | 00613b | 20 43 64    |                 jsr 006443           ; ( -- addr u )
 391:000 | DONE wsp | na 16 16 |        |             |
 392:000 | DONE cmt | na 16 16 |        |             | 		; if we got a zero, complain and abort
 393:000 | DONE ins | na 16 16 | 00613e | 98          |                 tya                  ; force flag check
 394:000 | DONE ins | na 16 16 | 00613f | d0 06       |                 bne 006147           
 395:000 | DONE wsp | na 16 16 |        |             |
 396:000 | DONE ins | na 16 16 | 006141 | a9 76 6a    |                 lda.# 006a76         
 397:000 | DONE ins | na 16 16 | 006144 | 4c ce 68    |                 jmp 0068ce           
 398:000 | DONE wsp | na 16 16 |        |             |
 399:000 | DONE lbl | na 16 16 | 006147 |             | tick_have_word                       
 400:000 | DONE ins | na 16 16 | 006147 | 20 a8 63    |                 jsr 0063a8           ; ( addr u -- nt)
 401:000 | DONE ins | na 16 16 | 00614a | 98          |                 tya                  ; force flag check
 402:000 | DONE wsp | na 16 16 |        |             |
 403:000 | DONE cmt | na 16 16 |        |             |                 ; if we didn't find string in the dictionary, complain and abort
 404:000 | DONE ins | na 16 16 | 00614b | d0 06       |                 bne 006153           
 405:000 | DONE wsp | na 16 16 |        |             |
 406:000 | DONE ins | na 16 16 | 00614d | a9 fb 6a    |                 lda.# 006afb         
 407:000 | DONE ins | na 16 16 | 006150 | 4c ce 68    |                 jmp 0068ce           
 408:000 | DONE wsp | na 16 16 |        |             |
 409:000 | DONE lbl | na 16 16 | 006153 |             | tick_have_nt                         
 410:000 | DONE ins | na 16 16 | 006153 | 20 06 64    |                 jsr 006406           ; ( nt -- xt )
 411:000 | DONE wsp | na 16 16 |        |             |
 412:000 | DONE lbl | na 16 16 | 006156 |             | z_tick                               
 412:001 | DONE ins | na 16 16 | 006156 | 60          |                 rts                  
 413:000 | DONE wsp | na 16 16 |        |             |
 414:000 | DONE wsp | na 16 16 |        |             |
 415:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 416:000 | DONE cmt | na 16 16 |        |             | ; ABS ( n -- u ) 8 bytes / X cycles
 417:000 | DONE cmt | na 16 16 |        |             | ; Return the absolute value of a single number
 418:000 | DONE lbl | na 16 16 | 006157 |             | xt_abs                               
 419:000 | DONE dir | na 16 16 |        |             |         .!a16                        
 420:000 | DONE dir | na 16 16 |        |             |         .!xy16                       
 421:000 | DONE ins | na 16 16 | 006157 | 98          |                 tya                  ; force flag test
 422:000 | DONE ins | na 16 16 | 006158 | 10 05       |                 bpl 00615f           ; positive number is easy
 423:000 | DONE wsp | na 16 16 |        |             |
 424:000 | DONE cmt | na 16 16 |        |             |                 ; negative: Calculate 0-n
 425:000 | DONE ins | na 16 16 | 00615a | 49 ff ff    |                 eor.# 0ffff          
 426:000 | DONE ins | na 16 16 | 00615d | 1a          |                 inc.a                
 427:000 | DONE ins | na 16 16 | 00615e | a8          |                 tay                  
 428:000 | DONE wsp | na 16 16 |        |             |
 429:000 | DONE lbl | na 16 16 | 00615f |             | z_abs                                
 429:001 | DONE ins | na 16 16 | 00615f | 60          |                 rts                  
 430:000 | DONE wsp | na 16 16 |        |             |
 431:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 432:000 | DONE cmt | na 16 16 |        |             | ; ACCEPT ( addr n1 -- n2 ) X bytes / X cycles
 433:000 | DONE cmt | na 16 16 |        |             | ; Receive a string of at most n1 characters, placing them at addr. Return the
 434:000 | DONE cmt | na 16 16 |        |             | ; actual number of characters as n2. Characters are echoed as they are received.
 435:000 | DONE cmt | na 16 16 |        |             | ; ACCEPT is called by REFILL these days.
 436:000 | DONE lbl | na 16 16 | 006160 |             | xt_accept                            
 437:000 | DONE cmt | na 16 16 |        |             |                 ; Set up loop
 438:000 | DONE ins | na 16 16 | 006160 | 98          |                 tya                  ; force flag test
 439:000 | DONE ins | na 16 16 | 006161 | d0 03       |                 bne 006166           
 440:000 | DONE wsp | na 16 16 |        |             |
 441:000 | DONE cmt | na 16 16 |        |             |                 ; if we were told to get zero chars, just quit
 442:000 | DONE ins | na 16 16 | 006163 | e8          |                 inx                  ; NIP, TOS is zero which is also FALSE
 443:000 | DONE ins | na 16 16 | 006164 | e8          |                 inx                  
 444:000 | DONE wsp | na 16 16 |        |             |
 445:000 | DONE ins | na 16 16 | 006165 | 60          |                 rts                  
 446:000 | DONE wsp | na 16 16 |        |             |
 447:000 | DONE lbl | na 16 16 | 006166 |             | accept_nonzero                       
 448:000 | DONE ins | na 16 16 | 006166 | b5 00       |                 lda.dx 00            ; address of buffer is NOS
 449:000 | DONE ins | na 16 16 | 006168 | 85 16       |                 sta.d 000216         
 450:000 | DONE ins | na 16 16 | 00616a | e8          |                 inx                  ; NIP
 451:000 | DONE ins | na 16 16 | 00616b | e8          |                 inx                  
 452:000 | DONE wsp | na 16 16 |        |             |
 453:000 | DONE ins | na 16 16 | 00616c | 84 18       |                 sty.d 000218         ; Save max number of chars in tmp2
 454:000 | DONE ins | na 16 16 | 00616e | a0 00 00    |                 ldy.# 0000           ; Use Y as counter
 455:000 | DONE ins | na 16 16 | 006171 | e2 20       |                 sep 20               
 455:001 | DONE ctl | na  8 16 |        |             |         .!a8
 456:000 | DONE wsp | na  8 16 |        |             |
 457:000 | DONE lbl | na  8 16 | 006173 |             | accept_loop                          
 458:000 | DONE cmt | na  8 16 |        |             |                 ; TODO rewrite with KEY so we can revector it
 459:000 | DONE cmt | na  8 16 |        |             |                 ; We don't need to check for CTRL-l, because a vt100 terminal
 460:000 | DONE cmt | na  8 16 |        |             |                 ; clears the screen automatically
 461:000 | DONE ins | na  8 16 | 006173 | 20 41 60    |                 jsr 006041           
 462:000 | DONE dir | na  8 16 |        |             |         .!a8                         
 463:000 | DONE cmt | na  8 16 |        |             |                 ; we quit on both line feed and carriage return
 464:000 | DONE ins | na  8 16 | 006176 | c9 0a       |                 cmp.# AscLF          
 465:000 | DONE ins | na  8 16 | 006178 | f0 44       |                 beq 0061be           
 466:000 | DONE ins | na  8 16 | 00617a | c9 0d       |                 cmp.# AscCR          
 467:000 | DONE ins | na  8 16 | 00617c | f0 40       |                 beq 0061be           
 468:000 | DONE wsp | na  8 16 |        |             |
 469:000 | DONE cmt | na  8 16 |        |             |                 ; BS and DEL do the same thing for the moment
 470:000 | DONE ins | na  8 16 | 00617e | c9 08       |                 cmp.# AscBS          
 471:000 | DONE ins | na  8 16 | 006180 | f0 44       |                 beq 0061c6           
 472:000 | DONE ins | na  8 16 | 006182 | c9 7f       |                 cmp.# AscDEL         
 473:000 | DONE ins | na  8 16 | 006184 | f0 40       |                 beq 0061c6           
 474:000 | DONE wsp | na  8 16 |        |             |
 475:000 | DONE cmt | na  8 16 |        |             |                 ; CTRL-c and ESC abort (see if this is too harsh)
 476:000 | DONE ins | na  8 16 | 006186 | c9 03       |                 cmp.# AscCC          
 477:000 | DONE ins | na  8 16 | 006188 | d0 03       |                 bne 00618d           
 478:000 | DONE ins | na  8 16 | 00618a | 4c 94 60    |                 jmp 006094           
 479:000 | DONE lbl | na  8 16 | 00618d |             | @                                    
 480:000 | DONE ins | na  8 16 | 00618d | c9 1b       |                 cmp.# AscESC         
 481:000 | DONE ins | na  8 16 | 00618f | d0 03       |                 bne 006194           
 482:000 | DONE ins | na  8 16 | 006191 | 4c 94 60    |                 jmp 006094           
 483:000 | DONE lbl | na  8 16 | 006194 |             | @                                    
 484:000 | DONE cmt | na  8 16 |        |             |                 ; CTRL-p will be used for "previous cmd", TODO
 485:000 | DONE ins | na  8 16 | 006194 | c9 10       |                 cmp.# AscCP          
 486:000 | DONE ins | na  8 16 | 006196 | d0 0c       |                 bne 0061a4           
 487:000 | DONE ins | na  8 16 | 006198 | c2 20       |                 rep 20               
 487:001 | DONE ctl | na 16 16 |        |             |         .!a16
 488:000 | DONE ins | na 16 16 | 00619a | a9 14 6b    |                 lda.# 006b14         
 489:000 | DONE ins | na 16 16 | 00619d | 20 d4 68    |                 jsr 0068d4           
 490:000 | DONE ins | na 16 16 | 0061a0 | e2 20       |                 sep 20               
 490:001 | DONE ctl | na  8 16 |        |             |         .!a8
 491:000 | DONE ins | na  8 16 | 0061a2 | 80 cf       |                 bra 006173           
 492:000 | DONE lbl | na  8 16 | 0061a4 |             | @                                    
 493:000 | DONE cmt | na  8 16 |        |             |                 ; CTRL-n will be used for "next cmd", TODO
 494:000 | DONE ins | na  8 16 | 0061a4 | c9 0e       |                 cmp.# AscCN          
 495:000 | DONE ins | na  8 16 | 0061a6 | d0 0c       |                 bne 0061b4           
 496:000 | DONE ins | na  8 16 | 0061a8 | c2 20       |                 rep 20               
 496:001 | DONE ctl | na 16 16 |        |             |         .!a16
 497:000 | DONE ins | na 16 16 | 0061aa | a9 27 6b    |                 lda.# 006b27         
 498:000 | DONE ins | na 16 16 | 0061ad | 20 d4 68    |                 jsr 0068d4           
 499:000 | DONE ins | na 16 16 | 0061b0 | e2 20       |                 sep 20               
 499:001 | DONE ctl | na  8 16 |        |             |         .!a8
 500:000 | DONE ins | na  8 16 | 0061b2 | 80 bf       |                 bra 006173           
 501:000 | DONE wsp | na  8 16 |        |             |
 502:000 | DONE lbl | na  8 16 | 0061b4 |             | @                                    
 503:000 | DONE cmt | na  8 16 |        |             |                 ; That's quite enough, echo character
 504:000 | DONE cmt | na  8 16 |        |             |                 ; TODO change to EMIT
 505:000 | DONE ins | na  8 16 | 0061b4 | 20 30 60    |                 jsr 006030           ; echo character
 506:000 | DONE dir | na  8 16 |        |             |         .!a8                         
 507:000 | DONE cmt | na  8 16 |        |             |                 ; TODO multitasking: Add PAUSE here (or in EMIT)
 508:000 | DONE wsp | na  8 16 |        |             |
 509:000 | DONE ins | na  8 16 | 0061b7 | 91 0c       |                 sta.diy 00020c       ; STA (CIB),Y
 510:000 | DONE ins | na  8 16 | 0061b9 | c8          |                 iny                  
 511:000 | DONE ins | na  8 16 | 0061ba | c4 18       |                 cpy.d 000218         ; reached character limit?
 512:000 | DONE ins | na  8 16 | 0061bc | d0 b5       |                 bne 006173           ; fall thru if buffer limit reached
 513:000 | DONE wsp | na  8 16 |        |             |
 514:000 | DONE lbl | na  8 16 | 0061be |             | accept_eol                           
 515:000 | DONE ins | na  8 16 | 0061be | 84 0e       |                 sty.d 00020e         ; Y contains number of chars accepted already
 516:000 | DONE ins | na  8 16 | 0061c0 | c2 20       |                 rep 20               
 516:001 | DONE ctl | na 16 16 |        |             |         .!a16
 517:000 | DONE ins | na 16 16 | 0061c2 | 20 f8 64    |                 jsr 0064f8           ; print final space
 518:000 | DONE ins | na 16 16 | 0061c5 | 60          |                 rts                  ; this is the actual return of the routine
 519:000 | DONE wsp | na 16 16 |        |             |
 520:000 | DONE lbl | na 16 16 | 0061c6 |             | accept_bs                            
 521:000 | DONE dir | na  8 16 |        |             |         .!a8                         
 522:000 | DONE ins | na  8 16 | 0061c6 | c0 00 00    |                 cpy.# 0000           ; buffer empty?
 523:000 | DONE ins | na  8 16 | 0061c9 | d0 06       |                 bne 0061d1           
 524:000 | DONE wsp | na  8 16 |        |             |
 525:000 | DONE ins | na  8 16 | 0061cb | a9 07       |                 lda.# AscBELL        ; complain and don't delete beyond the start of line
 526:000 | DONE ins | na  8 16 | 0061cd | 20 30 60    |                 jsr 006030           
 527:000 | DONE ins | na  8 16 | 0061d0 | c8          |                 iny                  
 528:000 | DONE lbl | na  8 16 | 0061d1 |             | @                                    
 529:000 | DONE ins | na  8 16 | 0061d1 | 88          |                 dey                  
 530:000 | DONE ins | na  8 16 | 0061d2 | a9 08       |                 lda.# AscBS          ; move back one
 531:000 | DONE ins | na  8 16 | 0061d4 | 20 30 60    |                 jsr 006030           
 532:000 | DONE ins | na  8 16 | 0061d7 | a9 20       |                 lda.# AscSP          ; print a space (rubout)
 533:000 | DONE ins | na  8 16 | 0061d9 | 20 30 60    |                 jsr 006030           
 534:000 | DONE ins | na  8 16 | 0061dc | a9 08       |                 lda.# AscBS          ; move back over space
 535:000 | DONE ins | na  8 16 | 0061de | 20 30 60    |                 jsr 006030           
 536:000 | DONE wsp | na  8 16 |        |             |
 537:000 | DONE ins | na  8 16 | 0061e1 | 80 90       |                 bra 006173           
 538:000 | DONE wsp | na  8 16 |        |             |
 539:000 | DONE lbl | na  8 16 | 0061e3 |             | z_accept                             
 539:001 | DONE ins | na  8 16 | 0061e3 | 60          |                 rts                  
 540:000 | DONE wsp | na  8 16 |        |             |
 541:000 | DONE cmt | na  8 16 |        |             | ; -------------------------------------------------------------------
 542:000 | DONE cmt | na  8 16 |        |             | ; ALLOT ( n -- ) X bytes / X cycles
 543:000 | DONE cmt | na  8 16 |        |             | ; Reserve a certain number of bytes (not cells) or release them. If n = 0, do
 544:000 | DONE cmt | na  8 16 |        |             | ; nothing. If n is negative, release n bytes, but only to the beginning of the
 545:000 | DONE cmt | na  8 16 |        |             | ; Dictionary. If n is positive (the most common case), reserve n bytes, but not
 546:000 | DONE cmt | na  8 16 |        |             | ; past the Dictionary.
 547:000 | DONE cmt | na  8 16 |        |             | ; See http://forth-standard.org/standard/core/ALLOT
 548:000 | DONE cmt | na  8 16 |        |             | ; TODO test negative values
 549:000 | DONE lbl | na  8 16 | 0061e4 |             | xt_allot                             
 550:000 | DONE dir | na 16 16 |        |             |         .!a16                        
 551:000 | DONE ins | na 16 16 | 0061e4 | 98          |                 tya                  ; force flag check
 552:000 | DONE ins | na 16 16 | 0061e5 | f0 21       |                 beq 006208           ; zero bytes, don't do anything
 553:000 | DONE ins | na 16 16 | 0061e7 | 30 12       |                 bmi 0061fb           ; free memory instead of reserving it
 554:000 | DONE wsp | na 16 16 |        |             |
 555:000 | DONE cmt | na 16 16 |        |             |                 ; most common case: reserve n bytes. We've already transfered
 556:000 | DONE cmt | na 16 16 |        |             |                 ; TOS to A, so we just have to add the current compile pointer
 557:000 | DONE ins | na 16 16 | 0061e9 | 18          |                 clc                  
 558:000 | DONE ins | na 16 16 | 0061ea | 65 00       |                 adc.d 000200         ; create new CP
 559:000 | DONE ins | na 16 16 | 0061ec | b0 07       |                 bcs 0061f5           ; oops, we've wrapped
 560:000 | DONE wsp | na 16 16 |        |             |
 561:000 | DONE ins | na 16 16 | 0061ee | a8          |                 tay                  ; save copy of new CP
 562:000 | DONE wsp | na 16 16 |        |             |
 563:000 | DONE ins | na 16 16 | 0061ef | 38          |                 sec                  
 564:000 | DONE ins | na 16 16 | 0061f0 | e9 ff 7b    |                 sbc.# 007bff         
 565:000 | DONE ins | na 16 16 | 0061f3 | 30 11       |                 bmi 006206           ; oops, fall thru if beyond max RAM
 566:000 | DONE wsp | na 16 16 |        |             |
 567:000 | DONE lbl | na 16 16 | 0061f5 |             | allot_error                          
 568:000 | DONE ins | na 16 16 | 0061f5 | a9 d7 69    |                 lda.# 0069d7         
 569:000 | DONE ins | na 16 16 | 0061f8 | 4c ce 68    |                 jmp 0068ce           
 570:000 | DONE wsp | na 16 16 |        |             |
 571:000 | DONE lbl | na 16 16 | 0061fb |             | allot_minus                          
 572:000 | DONE cmt | na 16 16 |        |             |                 ; negative value means we're freeing memory
 573:000 | DONE ins | na 16 16 | 0061fb | 38          |                 sec                  
 574:000 | DONE ins | na 16 16 | 0061fc | e5 00       |                 sbc.d 000200         
 575:000 | DONE ins | na 16 16 | 0061fe | 90 f5       |                 bcc 0061f5           ; oops, we've wrapped
 576:000 | DONE wsp | na 16 16 |        |             |
 577:000 | DONE ins | na 16 16 | 006200 | a8          |                 tay                  
 578:000 | DONE wsp | na 16 16 |        |             |
 579:000 | DONE ins | na 16 16 | 006201 | e9 00 03    |                 sbc.# 000300         ; Carry Flag must still be set
 580:000 | DONE ins | na 16 16 | 006204 | 30 ef       |                 bmi 0061f5           ; oops, gone too far back
 581:000 | DONE wsp | na 16 16 |        |             |
 582:000 | DONE cmt | na 16 16 |        |             |                 ; fall through to allot_done
 583:000 | DONE lbl | na 16 16 | 006206 |             | allot_done                           
 584:000 | DONE ins | na 16 16 | 006206 | 84 00       |                 sty.d 000200         ; new compiler pointer
 585:000 | DONE lbl | na 16 16 | 006208 |             | allot_real_gone                      
 586:000 | DONE ins | na 16 16 | 006208 | b4 00       |                 ldy.dx 00            ; DROP
 587:000 | DONE ins | na 16 16 | 00620a | e8          |                 inx                  
 588:000 | DONE ins | na 16 16 | 00620b | e8          |                 inx                  
 589:000 | DONE wsp | na 16 16 |        |             |
 590:000 | DONE lbl | na 16 16 | 00620c |             | z_allot                              
 590:001 | DONE ins | na 16 16 | 00620c | 60          |                 rts                  
 591:000 | DONE wsp | na 16 16 |        |             |
 592:000 | DONE wsp | na 16 16 |        |             |
 593:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 594:000 | DONE cmt | na 16 16 |        |             | ; BELL ( -- ) X bytes / X cycles
 595:000 | DONE cmt | na 16 16 |        |             | ; Trigger terminal bell on vt100 terminals
 596:000 | DONE cmt | na 16 16 |        |             | ; TODO replace with EMIT
 597:000 | DONE lbl | na 16 16 | 00620d |             | xt_bell                              
 598:000 | DONE dir | na 16 16 |        |             |         .!a16                        
 599:000 | DONE ins | na 16 16 | 00620d | a9 07 00    |                 lda.# AscBELL        
 600:000 | DONE ins | na 16 16 | 006210 | 20 30 60    |                 jsr 006030           
 601:000 | DONE wsp | na 16 16 |        |             |
 602:000 | DONE lbl | na 16 16 | 006213 |             | z_bell                               
 602:001 | DONE ins | na 16 16 | 006213 | 60          |                 rts                  
 603:000 | DONE wsp | na 16 16 |        |             |
 604:000 | DONE wsp | na 16 16 |        |             |
 605:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 606:000 | DONE cmt | na 16 16 |        |             | ; BL ( -- u ) 7 bytes / 12 cycles
 607:000 | DONE cmt | na 16 16 |        |             | ; Put ASCII char for SPACE on Data Stack
 608:000 | DONE lbl | na 16 16 | 006214 |             | xt_bl                                
 609:000 | DONE dir | na 16 16 |        |             |         .!xy16                       
 610:000 | DONE ins | na 16 16 | 006214 | ca          |                 dex                  
 611:000 | DONE ins | na 16 16 | 006215 | ca          |                 dex                  
 612:000 | DONE ins | na 16 16 | 006216 | 94 00       |                 sty.dx 00            
 613:000 | DONE ins | na 16 16 | 006218 | a0 20 00    |                 ldy.# AscSP          
 614:000 | DONE wsp | na 16 16 |        |             |
 615:000 | DONE lbl | na 16 16 | 00621b |             | z_bl                                 
 615:001 | DONE ins | na 16 16 | 00621b | 60          |                 rts                  
 616:000 | DONE wsp | na 16 16 |        |             |
 617:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 618:000 | DONE cmt | na 16 16 |        |             | ; BYE ( -- ) 2 bytes / 7-8 cycles
 619:000 | DONE cmt | na 16 16 |        |             | ; Leave Liara Forth, returning to Mensch Monitor
 620:000 | DONE lbl | na 16 16 | 00621c |             | xt_bye                               
 621:000 | DONE ins | na 16 16 | 00621c | 58          |                 cli                  
 622:000 | DONE ins | na 16 16 | 00621d | 00 00       |                 brk 00               ; status byte 00 required for assembler
 623:000 | DONE wsp | na 16 16 |        |             |
 624:000 | DONE lbl | na 16 16 | 00621f |             | z_bye                                
 624:001 | DONE ins | na 16 16 | 00621f | 60          |                 rts                  ; dummy for compiling, never reached
 625:000 | DONE wsp | na 16 16 |        |             |
 626:000 | DONE wsp | na 16 16 |        |             |
 627:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 628:000 | DONE cmt | na 16 16 |        |             | ; CELLS ( n -- n ) X bytes / X cycles
 629:000 | DONE cmt | na 16 16 |        |             | ; Given a number of cells, return the number of bytes that they will require.
 630:000 | DONE cmt | na 16 16 |        |             | ; This is 16 bit cell Forth, so the value returned by this word is the same as
 631:000 | DONE cmt | na 16 16 |        |             | ; returned by 2*, see there.
 632:000 | DONE wsp | na 16 16 |        |             |
 633:000 | DONE wsp | na 16 16 |        |             |
 634:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 635:000 | DONE cmt | na 16 16 |        |             | ; CONSTANT ( "name" n -- ) X bytes / X cycles
 636:000 | DONE cmt | na 16 16 |        |             | ; Associate a fixed value with a word. This could be realized as
 637:000 | DONE cmt | na 16 16 |        |             | ; CREATE , DOES> @  as well. We do more in assembler but let CREATE do the heavy
 638:000 | DONE cmt | na 16 16 |        |             | ; lifting.
 639:000 | DONE cmt | na 16 16 |        |             | ; See http://www.bradrodriguez.com/papers/moving3.htm for a primer on how
 640:000 | DONE cmt | na 16 16 |        |             | ; this works in various Forths.
 641:000 | DONE lbl | na 16 16 | 006220 |             | xt_constant                          
 642:000 | DONE ins | na 16 16 | 006220 | 20 4c 62    |                 jsr 00624c           
 643:000 | DONE wsp | na 16 16 |        |             |
 644:000 | DONE cmt | na 16 16 |        |             |                 ; CREATE by default installs a subroutine jump to DOVAR, but we
 645:000 | DONE cmt | na 16 16 |        |             |                 ; actually want DOCONST this time. Go back two bytes and repace
 646:000 | DONE cmt | na 16 16 |        |             |                 ; the subroutine jump target
 647:000 | DONE ins | na 16 16 | 006223 | a5 00       |                 lda.d 000200         
 648:000 | DONE ins | na 16 16 | 006225 | 3a          |                 dec.a                
 649:000 | DONE ins | na 16 16 | 006226 | 3a          |                 dec.a                
 650:000 | DONE ins | na 16 16 | 006227 | 85 16       |                 sta.d 000216         
 651:000 | DONE wsp | na 16 16 |        |             |
 652:000 | DONE ins | na 16 16 | 006229 | a9 96 68    |                 lda.# 006896         
 653:000 | DONE ins | na 16 16 | 00622c | 92 16       |                 sta.di 000216        ; STA (TMP1)
 654:000 | DONE wsp | na 16 16 |        |             |
 655:000 | DONE cmt | na 16 16 |        |             |                 ; Save TOS in next cell. This is a direct version of COMMA
 656:000 | DONE ins | na 16 16 | 00622e | 98          |                 tya                  ; there is no "sty.di cp"
 657:000 | DONE ins | na 16 16 | 00622f | 92 00       |                 sta.di 000200        
 658:000 | DONE ins | na 16 16 | 006231 | e6 00       |                 inc.d 000200         
 659:000 | DONE ins | na 16 16 | 006233 | e6 00       |                 inc.d 000200         
 660:000 | DONE wsp | na 16 16 |        |             |
 661:000 | DONE lbl | na 16 16 | 006235 |             | z_constant                           
 661:001 | DONE ins | na 16 16 | 006235 | 60          |                 rts                  
 662:000 | DONE wsp | na 16 16 |        |             |
 663:000 | DONE wsp | na 16 16 |        |             |
 664:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 665:000 | DONE cmt | na 16 16 |        |             | ; COUNT ( c-addr -- addr u ) 14 bytes / X cycles
 666:000 | DONE cmt | na 16 16 |        |             | ; Convert old-style character string to address-length pair. Note that the
 667:000 | DONE cmt | na 16 16 |        |             | ; length of the string c-addr ist stored in character length (8 bit), not cell
 668:000 | DONE cmt | na 16 16 |        |             | ; length (16 bit). This is rarely used these days, though COUNT can also be used
 669:000 | DONE cmt | na 16 16 |        |             | ; to step through a string character by character.
 670:000 | DONE lbl | na 16 16 | 006236 |             | xt_count                             
 671:000 | DONE dir | na 16 16 |        |             |         .!a16                        
 672:000 | DONE dir | na 16 16 |        |             |         .!xy16                       
 673:000 | DONE ins | na 16 16 | 006236 | 98          |                 tya                  
 674:000 | DONE ins | na 16 16 | 006237 | 1a          |                 inc.a                ; String address starts one char later
 675:000 | DONE wsp | na 16 16 |        |             |
 676:000 | DONE ins | na 16 16 | 006238 | ca          |                 dex                  
 677:000 | DONE ins | na 16 16 | 006239 | ca          |                 dex                  
 678:000 | DONE ins | na 16 16 | 00623a | 95 00       |                 sta.dx 00            ; NOS
 679:000 | DONE wsp | na 16 16 |        |             |
 680:000 | DONE ins | na 16 16 | 00623c | b9 00 00    |                 lda.y 0000           ; LDA $0000,Y  first byte is length
 681:000 | DONE ins | na 16 16 | 00623f | eb          |                 xba                  ; move length to LSB
 682:000 | DONE ins | na 16 16 | 006240 | 29 ff 00    |                 and.# 00ff           ; get rid of whatever was MSB
 683:000 | DONE ins | na 16 16 | 006243 | a8          |                 tay                  ; TOS
 684:000 | DONE wsp | na 16 16 |        |             |
 685:000 | DONE lbl | na 16 16 | 006244 |             | z_count                              
 685:001 | DONE ins | na 16 16 | 006244 | 60          |                 rts                  
 686:000 | DONE wsp | na 16 16 |        |             |
 687:000 | DONE wsp | na 16 16 |        |             |
 688:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 689:000 | DONE cmt | na 16 16 |        |             | ; CR ( -- ) X bytes / X cycles
 690:000 | DONE cmt | na 16 16 |        |             | ; Cause following output to appear at beginning of next line
 691:000 | DONE cmt | na 16 16 |        |             | ; TODO replace with EMIT
 692:000 | DONE lbl | na 16 16 | 006245 |             | xt_cr                                
 693:000 | DONE ins | na 16 16 | 006245 | a9 0a 00    |                 lda.# AscLF          ; test with AscCR for emulators
 694:000 | DONE ins | na 16 16 | 006248 | 20 30 60    |                 jsr 006030           
 695:000 | DONE wsp | na 16 16 |        |             |
 696:000 | DONE lbl | na 16 16 | 00624b |             | z_cr                                 
 696:001 | DONE ins | na 16 16 | 00624b | 60          |                 rts                  
 697:000 | DONE wsp | na 16 16 |        |             |
 698:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 699:000 | DONE cmt | na 16 16 |        |             | ; CREATE ( "name" -- ) X bytes / X cycles
 700:000 | DONE cmt | na 16 16 |        |             | ; Create a Dictionary entry associated with "name", used for various words,
 701:000 | DONE cmt | na 16 16 |        |             | ; especially for VARIABLE. When called, this new word will return the associated
 702:000 | DONE cmt | na 16 16 |        |             | ; address.
 703:000 | DONE lbl | na 16 16 | 00624c |             | xt_create                            
 704:000 | DONE dir | na 16 16 |        |             |         .!a16                        
 705:000 | DONE ins | na 16 16 | 00624c | 20 43 64    |                 jsr 006443           ; ( -- addr u )
 706:000 | DONE ins | na 16 16 | 00624f | d0 06       |                 bne 006257           
 707:000 | DONE wsp | na 16 16 |        |             |
 708:000 | DONE cmt | na 16 16 |        |             |                 ; if we got a zero-length name string, complain and abort
 709:000 | DONE ins | na 16 16 | 006251 | a9 76 6a    |                 lda.# 006a76         
 710:000 | DONE ins | na 16 16 | 006254 | 4c ce 68    |                 jmp 0068ce           
 711:000 | DONE wsp | na 16 16 |        |             |
 712:000 | DONE lbl | na 16 16 | 006257 |             | create_got_name                      
 713:000 | DONE cmt | na 16 16 |        |             |                 ; all Dictionary entries are lowercase
 714:000 | DONE ins | na 16 16 | 006257 | 20 07 69    |                 jsr 006907           
 715:000 | DONE wsp | na 16 16 |        |             |
 716:000 | DONE cmt | na 16 16 |        |             |                 ; Remember the first free byte of memory as the start of the new
 717:000 | DONE cmt | na 16 16 |        |             |                 ; word
 718:000 | DONE ins | na 16 16 | 00625a | a5 00       |                 lda.d 000200         
 719:000 | DONE ins | na 16 16 | 00625c | 85 16       |                 sta.d 000216         ; save start of new word
 720:000 | DONE wsp | na 16 16 |        |             |
 721:000 | DONE cmt | na 16 16 |        |             |                 ; Enforce limit on 255 char length names by masking the MSB
 722:000 | DONE cmt | na 16 16 |        |             |                 ; of the length of the given string. We arrive here with
 723:000 | DONE cmt | na 16 16 |        |             |                 ; ( addr u )
 724:000 | DONE ins | na 16 16 | 00625e | 98          |                 tya                  
 725:000 | DONE ins | na 16 16 | 00625f | 29 ff 00    |                 and.# 00ff           
 726:000 | DONE ins | na 16 16 | 006262 | 85 18       |                 sta.d 000218         ; save length of name string
 727:000 | DONE wsp | na 16 16 |        |             |
 728:000 | DONE cmt | na 16 16 |        |             |                 ; We need 8 bytes + the length of the name string for our new
 729:000 | DONE cmt | na 16 16 |        |             |                 ; header. This is also the offset for the start of the code
 730:000 | DONE cmt | na 16 16 |        |             |                 ; field (the xt_ label) so we need to remember it. Otherwise, we
 731:000 | DONE cmt | na 16 16 |        |             |                 ; could just allot the space afterwards.
 732:000 | DONE ins | na 16 16 | 006264 | 18          |                 clc                  
 733:000 | DONE ins | na 16 16 | 006265 | 69 08 00    |                 adc.# 0008           
 734:000 | DONE ins | na 16 16 | 006268 | 85 1a       |                 sta.d 00021a         ; total bytes required for header
 735:000 | DONE wsp | na 16 16 |        |             |
 736:000 | DONE cmt | na 16 16 |        |             |                 ; We need to allocate three more bytes for the hardcoded
 737:000 | DONE cmt | na 16 16 |        |             |                 ; code field area (CFA), the "payload" of the word which by
 738:000 | DONE cmt | na 16 16 |        |             |                 ; default will be a subroutine jump to DOVAR
 739:000 | DONE ins | na 16 16 | 00626a | 1a          |                 inc.a                
 740:000 | DONE ins | na 16 16 | 00626b | 1a          |                 inc.a                
 741:000 | DONE ins | na 16 16 | 00626c | 1a          |                 inc.a                
 742:000 | DONE wsp | na 16 16 |        |             |
 743:000 | DONE cmt | na 16 16 |        |             |                 ; Instead of jumping to ALLOT, we do things by hand for speed
 744:000 | DONE cmt | na 16 16 |        |             |                 ; and so we don't have to fool around with the stack
 745:000 | DONE ins | na 16 16 | 00626d | 18          |                 clc                  
 746:000 | DONE ins | na 16 16 | 00626e | 65 00       |                 adc.d 000200         
 747:000 | DONE ins | na 16 16 | 006270 | 85 00       |                 sta.d 000200         
 748:000 | DONE wsp | na 16 16 |        |             |
 749:000 | DONE cmt | na 16 16 |        |             |                 ; Now we walk through the header, using Y as the index. See
 750:000 | DONE cmt | na 16 16 |        |             |                 ; drawing of header in headers.tasm file for reference. We
 751:000 | DONE cmt | na 16 16 |        |             |                 ; arrive here with ( addr u ) still from PARSE-NAME. We need
 752:000 | DONE cmt | na 16 16 |        |             |                 ; that addr later for the name string, so we push it to the
 753:000 | DONE cmt | na 16 16 |        |             |                 ; Return Stack. We'll clean up the Data Stack later
 754:000 | DONE ins | na 16 16 | 006272 | b5 00       |                 lda.dx 00            
 755:000 | DONE ins | na 16 16 | 006274 | 48          |                 pha                  
 756:000 | DONE wsp | na 16 16 |        |             |
 757:000 | DONE cmt | na 16 16 |        |             |                 ; HEADER BYTES 0,1: Length byte and flags
 758:000 | DONE ins | na 16 16 | 006275 | a0 00 00    |                 ldy.# 0000           ; Y is now an index, not TOS
 759:000 | DONE ins | na 16 16 | 006278 | a5 18       |                 lda.d 000218         ; get length byte
 760:000 | DONE ins | na 16 16 | 00627a | 91 16       |                 sta.diy 000216       ; STA (TMP1),Y
 761:000 | DONE ins | na 16 16 | 00627c | c8          |                 iny                  
 762:000 | DONE ins | na 16 16 | 00627d | c8          |                 iny                  
 763:000 | DONE wsp | na 16 16 |        |             |
 764:000 | DONE cmt | na 16 16 |        |             |                 ; BYTES 2,3: Next word in the dictionary (its nt). This is the
 765:000 | DONE cmt | na 16 16 |        |             |                 ; current Dictionary Pointer
 766:000 | DONE ins | na 16 16 | 00627e | a5 02       |                 lda.d 000202         
 767:000 | DONE ins | na 16 16 | 006280 | 91 16       |                 sta.diy 000216       
 768:000 | DONE ins | na 16 16 | 006282 | c8          |                 iny                  
 769:000 | DONE ins | na 16 16 | 006283 | c8          |                 iny                  
 770:000 | DONE wsp | na 16 16 |        |             |
 771:000 | DONE cmt | na 16 16 |        |             |                 ; BYTES 4,5: Start of code field (xt of this word, "xt_" link)
 772:000 | DONE cmt | na 16 16 |        |             |                 ; This begins after the header, so we take the length of the
 773:000 | DONE cmt | na 16 16 |        |             |                 ; header, which we saved in tmp3, and use it as an offset to
 774:000 | DONE cmt | na 16 16 |        |             |                 ; the address of the start of the word
 775:000 | DONE ins | na 16 16 | 006284 | a5 16       |                 lda.d 000216         ; can't use CP, because we've allotted space
 776:000 | DONE ins | na 16 16 | 006286 | 85 02       |                 sta.d 000202         ; while we've got it, make old CP the new DP
 777:000 | DONE wsp | na 16 16 |        |             |
 778:000 | DONE ins | na 16 16 | 006288 | 18          |                 clc                  
 779:000 | DONE ins | na 16 16 | 006289 | 65 1a       |                 adc.d 00021a         ; total header length
 780:000 | DONE ins | na 16 16 | 00628b | 91 16       |                 sta.diy 000216       
 781:000 | DONE ins | na 16 16 | 00628d | c8          |                 iny                  
 782:000 | DONE ins | na 16 16 | 00628e | c8          |                 iny                  
 783:000 | DONE wsp | na 16 16 |        |             |
 784:000 | DONE cmt | na 16 16 |        |             |                 ; BYTES 6,7: End of code ("z_" link)
 785:000 | DONE cmt | na 16 16 |        |             |                 ; By default, we execute a jump to the DOVAR routine, so we need
 786:000 | DONE cmt | na 16 16 |        |             |                 ; to move three bytes down, and then one more byte so the z_
 787:000 | DONE cmt | na 16 16 |        |             |                 ; label points to the (fictional) RTS instruction for correct
 788:000 | DONE cmt | na 16 16 |        |             |                 ; compilation. The start of the code field is still in A
 789:000 | DONE ins | na 16 16 | 00628f | 1a          |                 inc.a                
 790:000 | DONE ins | na 16 16 | 006290 | 1a          |                 inc.a                
 791:000 | DONE ins | na 16 16 | 006291 | 1a          |                 inc.a                
 792:000 | DONE ins | na 16 16 | 006292 | 91 16       |                 sta.diy 000216       
 793:000 | DONE ins | na 16 16 | 006294 | c8          |                 iny                  
 794:000 | DONE ins | na 16 16 | 006295 | c8          |                 iny                  
 795:000 | DONE wsp | na 16 16 |        |             |
 796:000 | DONE cmt | na 16 16 |        |             |                 ; BYTE 8: Start of name string
 797:000 | DONE cmt | na 16 16 |        |             |                 ; The addr of the string is on the Return Stack, the length of
 798:000 | DONE cmt | na 16 16 |        |             |                 ; the name string is in tmp2. We subtract eight from the address
 799:000 | DONE cmt | na 16 16 |        |             |                 ; so we can use the same loop index
 800:000 | DONE ins | na 16 16 | 006296 | 68          |                 pla                  ; get back string address
 801:000 | DONE ins | na 16 16 | 006297 | 38          |                 sec                  
 802:000 | DONE ins | na 16 16 | 006298 | e9 08 00    |                 sbc.# 0008           
 803:000 | DONE ins | na 16 16 | 00629b | 85 1a       |                 sta.d 00021a         
 804:000 | DONE ins | na 16 16 | 00629d | e2 20       |                 sep 20               
 804:001 | DONE ctl | na  8 16 |        |             |         .!a8
 805:000 | DONE lbl | na  8 16 | 00629f |             | @                                    
 806:000 | DONE ins | na  8 16 | 00629f | b1 1a       |                 lda.diy 00021a       
 807:000 | DONE ins | na  8 16 | 0062a1 | 91 16       |                 sta.diy 000216       
 808:000 | DONE ins | na  8 16 | 0062a3 | c8          |                 iny                  
 809:000 | DONE ins | na  8 16 | 0062a4 | c6 18       |                 dec.d 000218         
 810:000 | DONE ins | na  8 16 | 0062a6 | d0 f7       |                 bne 00629f           
 811:000 | DONE wsp | na  8 16 |        |             |
 812:000 | DONE cmt | na  8 16 |        |             |                 ; After the name string, comes the Code Field (start at xt, that
 813:000 | DONE cmt | na  8 16 |        |             |                 ; is, the xt_ label of the word) which is initially a jump to the
 814:000 | DONE cmt | na  8 16 |        |             |                 ; subroutine to DOVAR. We're still in 8-bit A-register, which is
 815:000 | DONE cmt | na  8 16 |        |             |                 ; good
 816:000 | DONE ins | na  8 16 | 0062a8 | a9 20       |                 lda.# 20             ; opcode of JSR
 817:000 | DONE ins | na  8 16 | 0062aa | 91 16       |                 sta.diy 000216       
 818:000 | DONE ins | na  8 16 | 0062ac | c8          |                 iny                  ; single increase only because we have 8-bit A
 819:000 | DONE wsp | na  8 16 |        |             |
 820:000 | DONE ins | na  8 16 | 0062ad | a9 8f       |                 lda.# .lsb 00688f    
 821:000 | DONE ins | na  8 16 | 0062af | 91 16       |                 sta.diy 000216       
 822:000 | DONE ins | na  8 16 | 0062b1 | c8          |                 iny                  
 823:000 | DONE wsp | na  8 16 |        |             |
 824:000 | DONE ins | na  8 16 | 0062b2 | a9 68       |                 lda.# .msb 00688f    
 825:000 | DONE ins | na  8 16 | 0062b4 | 91 16       |                 sta.diy 000216       
 826:000 | DONE wsp | na  8 16 |        |             |
 827:000 | DONE ins | na  8 16 | 0062b6 | c2 20       |                 rep 20               
 827:001 | DONE ctl | na 16 16 |        |             |         .!a16
 828:000 | DONE cmt | na 16 16 |        |             |                 ; We're done. Restore Data Stack (2DROP)
 829:000 | DONE ins | na 16 16 | 0062b8 | b4 02       |                 ldy.dx 02            
 830:000 | DONE ins | na 16 16 | 0062ba | e8          |                 inx                  
 831:000 | DONE ins | na 16 16 | 0062bb | e8          |                 inx                  
 832:000 | DONE ins | na 16 16 | 0062bc | e8          |                 inx                  
 833:000 | DONE ins | na 16 16 | 0062bd | e8          |                 inx                  
 834:000 | DONE wsp | na 16 16 |        |             |
 835:000 | DONE lbl | na 16 16 | 0062be |             | z_create                             
 835:001 | DONE ins | na 16 16 | 0062be | 60          |                 rts                  
 836:000 | DONE wsp | na 16 16 |        |             |
 837:000 | DONE wsp | na 16 16 |        |             |
 838:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 839:000 | DONE cmt | na 16 16 |        |             | ; DEPTH ( -- u ) 14 bytes / X cycles
 840:000 | DONE cmt | na 16 16 |        |             | ; Push the number of entries in cells (not bytes) on the parameter stack.
 841:000 | DONE cmt | na 16 16 |        |             | ; Assumes X is valid as the DSP.
 842:000 | DONE lbl | na 16 16 | 0062bf |             | xt_depth                             
 843:000 | DONE dir | na 16 16 |        |             |         .!a16                        
 844:000 | DONE cmt | na 16 16 |        |             | 		; We've got zero entries when X is dsp0
 845:000 | DONE ins | na 16 16 | 0062bf | 86 04       |                 stx.d 000204         
 846:000 | DONE ins | na 16 16 | 0062c1 | a9 f0 02    |                 lda.# 0002f0         
 847:000 | DONE ins | na 16 16 | 0062c4 | 38          |                 sec                  
 848:000 | DONE ins | na 16 16 | 0062c5 | e5 04       |                 sbc.d 000204         
 849:000 | DONE wsp | na 16 16 |        |             |
 850:000 | DONE cmt | na 16 16 |        |             |                 ; now divide by two because each cells is to bytes long
 851:000 | DONE ins | na 16 16 | 0062c7 | 4a          |                 lsr.a                
 852:000 | DONE wsp | na 16 16 |        |             |
 853:000 | DONE ins | na 16 16 | 0062c8 | ca          |                 dex                  
 854:000 | DONE ins | na 16 16 | 0062c9 | ca          |                 dex                  
 855:000 | DONE ins | na 16 16 | 0062ca | 94 00       |                 sty.dx 00            
 856:000 | DONE wsp | na 16 16 |        |             |
 857:000 | DONE cmt | na 16 16 |        |             |                 ; push result to stack
 858:000 | DONE ins | na 16 16 | 0062cc | a8          |                 tay                  
 859:000 | DONE wsp | na 16 16 |        |             |
 860:000 | DONE lbl | na 16 16 | 0062cd |             | z_depth                              
 860:001 | DONE ins | na 16 16 | 0062cd | 60          |                 rts                  
 861:000 | DONE wsp | na 16 16 |        |             |
 862:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 863:000 | DONE cmt | na 16 16 |        |             | ; DOT ( n -- ) X bytes / X cycles
 864:000 | DONE cmt | na 16 16 |        |             | ; Print value that is TOS followed by a single space
 865:000 | DONE cmt | na 16 16 |        |             | ; Forth code is  DUP ABS 0 <# #S ROT SIGN #> TYPE SPACE
 866:000 | DONE cmt | na 16 16 |        |             | ; Since this is used interactively, and humans are slow (just ask GlaDOS), we
 867:000 | DONE cmt | na 16 16 |        |             | ; focus on size
 868:000 | DONE cmt | na 16 16 |        |             | ; TODO this is a temporary version
 869:000 | DONE lbl | na 16 16 | 0062ce |             | xt_dot                               
 870:000 | DONE cmt | na 16 16 |        |             |                 ; --- TEMP print routine ---
 871:000 | DONE ins | na 16 16 | 0062ce | 98          |                 tya                  
 872:000 | DONE ins | na 16 16 | 0062cf | 29 00 ff    |                 and.# 0ff00          
 873:000 | DONE ins | na 16 16 | 0062d2 | eb          |                 xba                  
 874:000 | DONE ins | na 16 16 | 0062d3 | 20 ec 68    |                 jsr 0068ec           
 875:000 | DONE ins | na 16 16 | 0062d6 | 98          |                 tya                  
 876:000 | DONE ins | na 16 16 | 0062d7 | 29 ff 00    |                 and.# 00ff           
 877:000 | DONE ins | na 16 16 | 0062da | 20 ec 68    |                 jsr 0068ec           
 878:000 | DONE ins | na 16 16 | 0062dd | 20 f8 64    |                 jsr 0064f8           
 879:000 | DONE cmt | na 16 16 |        |             |                 ; --- TEMP print routine ---
 880:000 | DONE wsp | na 16 16 |        |             |
 881:000 | DONE cmt | na 16 16 |        |             |                 ; Since we don't care about speed in this word, we save one byte
 882:000 | DONE cmt | na 16 16 |        |             |                 ; by doing DROP the slow way and save one byte
 883:000 | DONE ins | na 16 16 | 0062e0 | 20 3a 63    |                 jsr 00633a           
 884:000 | DONE wsp | na 16 16 |        |             |
 885:000 | DONE lbl | na 16 16 | 0062e3 |             | z_dot                                
 885:001 | DONE ins | na 16 16 | 0062e3 | 60          |                 rts                  
 886:000 | DONE wsp | na 16 16 |        |             |
 887:000 | DONE wsp | na 16 16 |        |             |
 888:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 889:000 | DONE cmt | na 16 16 |        |             | ; DOTPAREN ( "string" -- ) 13 bytes / X cycles
 890:000 | DONE cmt | na 16 16 |        |             | ; Display string delimited by ")" immediately, regardless if word is compiled or
 891:000 | DONE cmt | na 16 16 |        |             | ; interpreted. Forth definition is  .( [CHAR] ) PARSE TYPE ; IMMEDIATE
 892:000 | DONE lbl | na 16 16 | 0062e4 |             | xt_dotparen                          
 893:000 | DONE cmt | na 16 16 |        |             |                ; use PARSE to find the end of the string
 894:000 | DONE ins | na 16 16 | 0062e4 | ca          |                 dex                  
 895:000 | DONE ins | na 16 16 | 0062e5 | ca          |                 dex                  
 896:000 | DONE ins | na 16 16 | 0062e6 | 94 00       |                 sty.dx 00            
 897:000 | DONE ins | na 16 16 | 0062e8 | a0 29 00    |                 ldy.# 29             
 898:000 | DONE wsp | na 16 16 |        |             |
 899:000 | DONE ins | na 16 16 | 0062eb | 20 75 64    |                 jsr 006475           ; ( -- addr u)
 900:000 | DONE ins | na 16 16 | 0062ee | 20 2b 65    |                 jsr 00652b           
 901:000 | DONE wsp | na 16 16 |        |             |
 902:000 | DONE lbl | na 16 16 | 0062f1 |             | z_dotparen                           
 902:001 | DONE ins | na 16 16 | 0062f1 | 60          |                 rts                  
 903:000 | DONE wsp | na 16 16 |        |             |
 904:000 | DONE wsp | na 16 16 |        |             |
 905:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 906:000 | DONE cmt | na 16 16 |        |             | ; DOTS ".S" ( -- ) X bytes / X cycles
 907:000 | DONE cmt | na 16 16 |        |             | ; Print content of Data Stack non-distructively. Since this is for humans, we
 908:000 | DONE cmt | na 16 16 |        |             | ; don't have to worry about speed. We follow the format of Gforth
 909:000 | DONE cmt | na 16 16 |        |             | ; and print the number of elements first in brackets, followed by the Data Stack
 910:000 | DONE cmt | na 16 16 |        |             | ; content (if present).
 911:000 | DONE lbl | na 16 16 | 0062f2 |             | xt_dots                              
 912:000 | DONE dir | na 16 16 |        |             |         .!a16                        
 913:000 | DONE dir | na 16 16 |        |             |         .!xy16                       
 914:000 | DONE ins | na 16 16 | 0062f2 | 20 bf 62    |                 jsr 0062bf           ; ( -- u)
 915:000 | DONE wsp | na 16 16 |        |             |
 916:000 | DONE cmt | na 16 16 |        |             |                 ; Print stack depth in brackets
 917:000 | DONE cmt | na 16 16 |        |             |                 ; TODO rewrite this to use EMIT
 918:000 | DONE ins | na 16 16 | 0062f5 | a9 3c 00    |                 lda.# 3c             
 919:000 | DONE ins | na 16 16 | 0062f8 | 20 30 60    |                 jsr 006030           
 920:000 | DONE wsp | na 16 16 |        |             |
 921:000 | DONE cmt | na 16 16 |        |             |                 ; --- TEMP print routine ---
 922:000 | DONE ins | na 16 16 | 0062fb | 98          |                 tya                  
 923:000 | DONE ins | na 16 16 | 0062fc | 29 00 ff    |                 and.# 0ff00          
 924:000 | DONE ins | na 16 16 | 0062ff | eb          |                 xba                  
 925:000 | DONE ins | na 16 16 | 006300 | 20 ec 68    |                 jsr 0068ec           
 926:000 | DONE ins | na 16 16 | 006303 | 98          |                 tya                  
 927:000 | DONE ins | na 16 16 | 006304 | 29 ff 00    |                 and.# 00ff           
 928:000 | DONE ins | na 16 16 | 006307 | 20 ec 68    |                 jsr 0068ec           
 929:000 | DONE cmt | na 16 16 |        |             |                 ; --- TEMP print routine ---
 930:000 | DONE wsp | na 16 16 |        |             |
 931:000 | DONE cmt | na 16 16 |        |             |                 ; TODO rewrite this to use EMIT
 932:000 | DONE ins | na 16 16 | 00630a | a9 3e 00    |                 lda.# 3e             
 933:000 | DONE ins | na 16 16 | 00630d | 20 30 60    |                 jsr 006030           
 934:000 | DONE ins | na 16 16 | 006310 | 20 f8 64    |                 jsr 0064f8           
 935:000 | DONE wsp | na 16 16 |        |             |
 936:000 | DONE wsp | na 16 16 |        |             |
 937:000 | DONE cmt | na 16 16 |        |             |                 ; There will be a lot of cases where .S is used when the stack
 938:000 | DONE cmt | na 16 16 |        |             |                 ; is empty. Get them first and exit quickly
 939:000 | DONE ins | na 16 16 | 006313 | 98          |                 tya                  ; force flag test
 940:000 | DONE ins | na 16 16 | 006314 | f0 20       |                 beq 006336           
 941:000 | DONE wsp | na 16 16 |        |             |
 942:000 | DONE lbl | na 16 16 | 006316 |             | dots_not_empty                       
 943:000 | DONE cmt | na 16 16 |        |             |                 ; We have at least one element on the stack, which used to be in
 944:000 | DONE cmt | na 16 16 |        |             |                 ; Y as TOS, but is now NOS and therefore accessable by X. Also,
 945:000 | DONE cmt | na 16 16 |        |             |                 ; the depth of the Data Stack is already in Y waiting to be used
 946:000 | DONE cmt | na 16 16 |        |             |                 ; as a counter. We use this to our advantage.
 947:000 | DONE wsp | na 16 16 |        |             |
 948:000 | DONE cmt | na 16 16 |        |             |                 ; Normally we would go with STX.D tmptos / LDX.D tmptos with
 949:000 | DONE cmt | na 16 16 |        |             |                 ; 4 bytes and 8 cycles because we value speed over size.
 950:000 | DONE cmt | na 16 16 |        |             |                 ; However, .S is used interactively, and humans
 951:000 | DONE cmt | na 16 16 |        |             |                 ; won't notice the one cycle more of PHX/PLX (2 bytes,
 952:000 | DONE cmt | na 16 16 |        |             |                 ; 9 cycles). We save the two bytes.
 953:000 | DONE ins | na 16 16 | 006316 | da          |                 phx                  
 954:000 | DONE wsp | na 16 16 |        |             |
 955:000 | DONE cmt | na 16 16 |        |             |                 ; We print from the bottom up. Note that the Data Stack locations
 956:000 | DONE cmt | na 16 16 |        |             |                 ; dsp0 and dsp0+2 always contain garbage so they can be skipped,
 957:000 | DONE cmt | na 16 16 |        |             |                 ; see docs/INTERNALS.md for more details
 958:000 | DONE ins | na 16 16 | 006317 | a2 f0 02    |                 ldx.# 0002f0         ; points to dsp0, which is garbage
 959:000 | DONE ins | na 16 16 | 00631a | ca          |                 dex                  
 960:000 | DONE ins | na 16 16 | 00631b | ca          |                 dex                  ; points to dsp0-2, which is more garbage
 961:000 | DONE wsp | na 16 16 |        |             |
 962:000 | DONE lbl | na 16 16 | 00631c |             | dots_loop                            
 963:000 | DONE ins | na 16 16 | 00631c | ca          |                 dex                  ; get next element on DS, initially dsp0-4
 964:000 | DONE ins | na 16 16 | 00631d | ca          |                 dex                  
 965:000 | DONE wsp | na 16 16 |        |             |
 966:000 | DONE cmt | na 16 16 |        |             |                 ; --- TEMP print routine ---
 967:000 | DONE cmt | na 16 16 |        |             |                 ; TODO call EMIT
 968:000 | DONE ins | na 16 16 | 00631e | b5 00       |                 lda.dx 00            
 969:000 | DONE ins | na 16 16 | 006320 | 29 00 ff    |                 and.# 0ff00          
 970:000 | DONE ins | na 16 16 | 006323 | eb          |                 xba                  
 971:000 | DONE ins | na 16 16 | 006324 | 20 ec 68    |                 jsr 0068ec           
 972:000 | DONE ins | na 16 16 | 006327 | b5 00       |                 lda.dx 00            
 973:000 | DONE ins | na 16 16 | 006329 | 29 ff 00    |                 and.# 00ff           
 974:000 | DONE ins | na 16 16 | 00632c | 20 ec 68    |                 jsr 0068ec           
 975:000 | DONE ins | na 16 16 | 00632f | 20 f8 64    |                 jsr 0064f8           
 976:000 | DONE cmt | na 16 16 |        |             |                 ; --- TEMP print routine ---
 977:000 | DONE wsp | na 16 16 |        |             |
 978:000 | DONE ins | na 16 16 | 006332 | 88          |                 dey                  
 979:000 | DONE ins | na 16 16 | 006333 | d0 e7       |                 bne 00631c           
 980:000 | DONE wsp | na 16 16 |        |             |
 981:000 | DONE ins | na 16 16 | 006335 | fa          |                 plx                  ; restore original DSP
 982:000 | DONE wsp | na 16 16 |        |             |
 983:000 | DONE lbl | na 16 16 | 006336 |             | dots_done                            
 984:000 | DONE cmt | na 16 16 |        |             |                 ; Clean up. Again, we don't care about speed in this
 985:000 | DONE cmt | na 16 16 |        |             |                 ; word so we save one byte by doing DROP the slow way
 986:000 | DONE ins | na 16 16 | 006336 | 20 3a 63    |                 jsr 00633a           
 987:000 | DONE wsp | na 16 16 |        |             |
 988:000 | DONE lbl | na 16 16 | 006339 |             | z_dots                               
 988:001 | DONE ins | na 16 16 | 006339 | 60          |                 rts                  
 989:000 | DONE wsp | na 16 16 |        |             |
 990:000 | DONE wsp | na 16 16 |        |             |
 991:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 992:000 | DONE cmt | na 16 16 |        |             | ; DROP ( n -- ) 4 bytes / 9 cycles
 993:000 | DONE cmt | na 16 16 |        |             | ; Drop first entry on Data Stack
 994:000 | DONE wsp | na 16 16 |        |             |
 995:000 | DONE lbl | na 16 16 | 00633a |             | xt_drop                              
 996:000 | DONE dir | na 16 16 |        |             |         .!xy16                       
 997:000 | DONE ins | na 16 16 | 00633a | b4 00       |                 ldy.dx 00            
 998:000 | DONE ins | na 16 16 | 00633c | e8          |                 inx                  
 999:000 | DONE ins | na 16 16 | 00633d | e8          |                 inx                  
1000:000 | DONE wsp | na 16 16 |        |             |
1001:000 | DONE lbl | na 16 16 | 00633e |             | z_drop                               
1001:001 | DONE ins | na 16 16 | 00633e | 60          |                 rts                  
1002:000 | DONE wsp | na 16 16 |        |             |
1003:000 | DONE wsp | na 16 16 |        |             |
1004:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1005:000 | DONE cmt | na 16 16 |        |             | ; DUMP ( addr u -- ) X bytes / X cycles
1006:000 | DONE cmt | na 16 16 |        |             | ; Print region of memory in a pretty way.
1007:000 | DONE cmt | na 16 16 |        |             | ; TODO This is a crude, temporary version for testing. Rewrite ASAP
1008:000 | DONE lbl | na 16 16 | 00633f |             | xt_dump                              
1009:000 | DONE cmt | na 16 16 |        |             |                 ; we use tmp1 as a counter because we need Y for other
1010:000 | DONE cmt | na 16 16 |        |             |                 ; stuff
1011:000 | DONE ins | na 16 16 | 00633f | 84 16       |                 sty.d 000216         
1012:000 | DONE wsp | na 16 16 |        |             |
1013:000 | DONE lbl | na 16 16 | 006341 |             | dump_line_loop                       
1014:000 | DONE ins | na 16 16 | 006341 | 20 45 62    |                 jsr 006245           
1015:000 | DONE wsp | na 16 16 |        |             |
1016:000 | DONE cmt | na 16 16 |        |             |                 ; start internal counter for 16 numbers per row
1017:000 | DONE ins | na 16 16 | 006344 | a0 10 00    |                 ldy.# 0010           
1018:000 | DONE lbl | na 16 16 | 006347 |             | dump_byte_loop                       
1019:000 | DONE cmt | na 16 16 |        |             |                 ; if there are zero bytes left to display, we're done
1020:000 | DONE ins | na 16 16 | 006347 | a5 16       |                 lda.d 000216         
1021:000 | DONE ins | na 16 16 | 006349 | f0 11       |                 beq 00635c           
1022:000 | DONE wsp | na 16 16 |        |             |
1023:000 | DONE cmt | na 16 16 |        |             |                 ; otherwise, print contents pointed to by address in NOS
1024:000 | DONE ins | na 16 16 | 00634b | a1 00       |                 lda.dxi 00           
1025:000 | DONE ins | na 16 16 | 00634d | 20 ec 68    |                 jsr 0068ec           ; TODO replace by EMIT
1026:000 | DONE ins | na 16 16 | 006350 | 20 f8 64    |                 jsr 0064f8           
1027:000 | DONE wsp | na 16 16 |        |             |
1028:000 | DONE cmt | na 16 16 |        |             |                 ; next character
1029:000 | DONE ins | na 16 16 | 006353 | f6 00       |                 inc.dx 00            
1030:000 | DONE wsp | na 16 16 |        |             |
1031:000 | DONE cmt | na 16 16 |        |             |                 ; loop counter
1032:000 | DONE ins | na 16 16 | 006355 | c6 16       |                 dec.d 000216         
1033:000 | DONE ins | na 16 16 | 006357 | 88          |                 dey                  
1034:000 | DONE ins | na 16 16 | 006358 | d0 ed       |                 bne 006347           
1035:000 | DONE ins | na 16 16 | 00635a | 80 e5       |                 bra 006341           
1036:000 | DONE wsp | na 16 16 |        |             |
1037:000 | DONE lbl | na 16 16 | 00635c |             | dump_done                            
1038:000 | DONE ins | na 16 16 | 00635c | 20 45 62    |                 jsr 006245           
1039:000 | DONE wsp | na 16 16 |        |             |
1040:000 | DONE cmt | na 16 16 |        |             |                 ; drop everything and return
1041:000 | DONE cmt | na 16 16 |        |             |                 ; TODO replace by call of 2DROP
1042:000 | DONE ins | na 16 16 | 00635f | b4 02       |                 ldy.dx 02            
1043:000 | DONE ins | na 16 16 | 006361 | e8          |                 inx                  
1044:000 | DONE ins | na 16 16 | 006362 | e8          |                 inx                  
1045:000 | DONE ins | na 16 16 | 006363 | e8          |                 inx                  
1046:000 | DONE ins | na 16 16 | 006364 | e8          |                 inx                  
1047:000 | DONE wsp | na 16 16 |        |             |
1048:000 | DONE lbl | na 16 16 | 006365 |             | z_dump                               
1048:001 | DONE ins | na 16 16 | 006365 | 60          |                 rts                  
1049:000 | DONE wsp | na 16 16 |        |             |
1050:000 | DONE wsp | na 16 16 |        |             |
1051:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1052:000 | DONE cmt | na 16 16 |        |             | ; DUP  ( n -- n n ) 4 bytes / 9 cycles
1053:000 | DONE cmt | na 16 16 |        |             | ; Duplicate first entry on Data Stack
1054:000 | DONE wsp | na 16 16 |        |             |
1055:000 | DONE lbl | na 16 16 | 006366 |             | xt_dup                               
1056:000 | DONE dir | na 16 16 |        |             |         .!xy16                       
1057:000 | DONE ins | na 16 16 | 006366 | ca          |                 dex                  
1058:000 | DONE ins | na 16 16 | 006367 | ca          |                 dex                  
1059:000 | DONE ins | na 16 16 | 006368 | 94 00       |                 sty.dx 00            
1060:000 | DONE wsp | na 16 16 |        |             |
1061:000 | DONE lbl | na 16 16 | 00636a |             | z_dup                                
1061:001 | DONE ins | na 16 16 | 00636a | 60          |                 rts                  
1062:000 | DONE wsp | na 16 16 |        |             |
1063:000 | DONE wsp | na 16 16 |        |             |
1064:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1065:000 | DONE cmt | na 16 16 |        |             | ; EVALUATE ( addr u -- ) X bytes / X cycles
1066:000 | DONE cmt | na 16 16 |        |             | ; Execute string. Set SOURCE-ID to -1, make addr u the input source,
1067:000 | DONE cmt | na 16 16 |        |             | ; set >IN to zero. After processing the line, revert to old input source.
1068:000 | DONE lbl | na 16 16 | 00636b |             | xt_evaluate                          
1069:000 | DONE cmt | na 16 16 |        |             |                 ; We follow pforth's procedure of pushing SOURCE, SOURCE-ID, and
1070:000 | DONE cmt | na 16 16 |        |             |                 ; >IN to the Return Stack
1071:000 | DONE ins | na 16 16 | 00636b | a5 12       |                 lda.d 000212         ; >IN
1072:000 | DONE ins | na 16 16 | 00636d | 48          |                 pha                  
1073:000 | DONE ins | na 16 16 | 00636e | a5 0a       |                 lda.d 00020a         ; Input Source (SOURCE-ID)
1074:000 | DONE ins | na 16 16 | 006370 | 48          |                 pha                  
1075:000 | DONE ins | na 16 16 | 006371 | a5 0c       |                 lda.d 00020c         
1076:000 | DONE ins | na 16 16 | 006373 | 48          |                 pha                  
1077:000 | DONE ins | na 16 16 | 006374 | a5 0e       |                 lda.d 00020e         
1078:000 | DONE ins | na 16 16 | 006376 | 48          |                 pha                  
1079:000 | DONE wsp | na 16 16 |        |             |
1080:000 | DONE cmt | na 16 16 |        |             |                 ; set SOURCE-ID to -1
1081:000 | DONE ins | na 16 16 | 006377 | a9 ff ff    |                 lda.# 0ffff          
1082:000 | DONE ins | na 16 16 | 00637a | 85 0a       |                 sta.d 00020a         
1083:000 | DONE wsp | na 16 16 |        |             |
1084:000 | DONE cmt | na 16 16 |        |             |                 ; set >IN to zero
1085:000 | DONE ins | na 16 16 | 00637c | 64 12       |                 stz.d 000212         
1086:000 | DONE wsp | na 16 16 |        |             |
1087:000 | DONE cmt | na 16 16 |        |             |                 ; move TOS and NOS to input buffers
1088:000 | DONE ins | na 16 16 | 00637e | 84 0e       |                 sty.d 00020e         
1089:000 | DONE ins | na 16 16 | 006380 | b5 00       |                 lda.dx 00            
1090:000 | DONE ins | na 16 16 | 006382 | 85 0c       |                 sta.d 00020c         
1091:000 | DONE wsp | na 16 16 |        |             |
1092:000 | DONE cmt | na 16 16 |        |             |                 ; dump address string from stack
1093:000 | DONE ins | na 16 16 | 006384 | b4 02       |                 ldy.dx 02            
1094:000 | DONE ins | na 16 16 | 006386 | e8          |                 inx                  
1095:000 | DONE ins | na 16 16 | 006387 | e8          |                 inx                  
1096:000 | DONE ins | na 16 16 | 006388 | e8          |                 inx                  
1097:000 | DONE ins | na 16 16 | 006389 | e8          |                 inx                  
1098:000 | DONE wsp | na 16 16 |        |             |
1099:000 | DONE ins | na 16 16 | 00638a | 20 a4 68    |                 jsr 0068a4           
1100:000 | DONE wsp | na 16 16 |        |             |
1101:000 | DONE cmt | na 16 16 |        |             |                 ; restore state from before evaluate
1102:000 | DONE ins | na 16 16 | 00638d | 68          |                 pla                  
1103:000 | DONE ins | na 16 16 | 00638e | 85 0e       |                 sta.d 00020e         
1104:000 | DONE ins | na 16 16 | 006390 | 68          |                 pla                  
1105:000 | DONE ins | na 16 16 | 006391 | 85 0c       |                 sta.d 00020c         
1106:000 | DONE ins | na 16 16 | 006393 | 68          |                 pla                  
1107:000 | DONE ins | na 16 16 | 006394 | 85 0a       |                 sta.d 00020a         
1108:000 | DONE ins | na 16 16 | 006396 | 68          |                 pla                  
1109:000 | DONE ins | na 16 16 | 006397 | 85 12       |                 sta.d 000212         
1110:000 | DONE wsp | na 16 16 |        |             |
1111:000 | DONE lbl | na 16 16 | 006399 |             | z_evaluate                           
1111:001 | DONE ins | na 16 16 | 006399 | 60          |                 rts                  
1112:000 | DONE wsp | na 16 16 |        |             |
1113:000 | DONE wsp | na 16 16 |        |             |
1114:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1115:000 | DONE cmt | na 16 16 |        |             | ; EXECUTE ( xt -- ) X bytes / X cycles
1116:000 | DONE cmt | na 16 16 |        |             | ; Run a word with help of its xt on the TOS
1117:000 | DONE wsp | na 16 16 |        |             |
1118:000 | DONE cmt | na 16 16 |        |             | ; Reserve three bytes for the jump - three in case we want to expand to the full
1119:000 | DONE cmt | na 16 16 |        |             | ; range
1120:000 | DONE cmt | na 16 16 |        |             | ; TODO move this to someplace that is assured to be RAM, not possibly ROM
1121:000 | DONE lbl | na 16 16 | 00639a |             | execute_ip                           
1121:001 | DONE dir | na 16 16 | 00639a | (3 bytes)   |         .byte 00, 00, 00             
1121:001 | DONE dir | na 16 16 |        |             |                 00 00 00                 --  . . .
1122:000 | DONE wsp | na 16 16 |        |             |
1123:000 | DONE lbl | na 16 16 | 00639d |             | xt_execute                           
1124:000 | DONE dir | na 16 16 |        |             |         .!a16                        
1125:000 | DONE dir | na 16 16 |        |             |         .!xy16                       
1126:000 | DONE cmt | na 16 16 |        |             | 		; Store the xt for later use and then drop it off the stack
1127:000 | DONE ins | na 16 16 | 00639d | 8c 9a 63    |                 sty 00639a           
1128:000 | DONE ins | na 16 16 | 0063a0 | b4 00       |                 ldy.dx 00            
1129:000 | DONE ins | na 16 16 | 0063a2 | e8          |                 inx                  
1130:000 | DONE ins | na 16 16 | 0063a3 | e8          |                 inx                  
1131:000 | DONE wsp | na 16 16 |        |             |
1132:000 | DONE cmt | na 16 16 |        |             |                 ; Only JMP has the addressing mode we need. All our Forth
1133:000 | DONE cmt | na 16 16 |        |             |                 ; words end with a RTS instruction, so they will take us back to
1134:000 | DONE cmt | na 16 16 |        |             |                 ; the original caller of this routine without us having to muck
1135:000 | DONE cmt | na 16 16 |        |             |                 ; about with the Return Stack.
1136:000 | DONE ins | na 16 16 | 0063a4 | 6c 9a 63    |                 jmp.i 00639a         ; JMP (EXECUTE_IP)
1137:000 | DONE wsp | na 16 16 |        |             |
1138:000 | DONE lbl | na 16 16 | 0063a7 |             | z_execute                            
1138:001 | DONE ins | na 16 16 | 0063a7 | ea          |                 nop                  ; Never reached, see if we need the NOP
1139:000 | DONE wsp | na 16 16 |        |             |
1140:000 | DONE wsp | na 16 16 |        |             |
1141:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1142:000 | DONE cmt | na 16 16 |        |             | ; FALSE ( -- f ) 7 bytes / 12 cycles
1143:000 | DONE cmt | na 16 16 |        |             | ; Pushes value $0000 for Forth true on Data Stack. This is the same code as for
1144:000 | DONE cmt | na 16 16 |        |             | ; ZERO, see there. Dictionary entry should have xt_zero/z_zero instead of
1145:000 | DONE cmt | na 16 16 |        |             | ; xt_false/z_false
1146:000 | DONE wsp | na 16 16 |        |             |
1147:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1148:000 | DONE cmt | na 16 16 |        |             | ; FIND-NAME ( addr u -- nt | 0 ) 91 bytes / X cycles
1149:000 | DONE cmt | na 16 16 |        |             | ; Given a string, find the Name Token (nt) of a word or return zero if the word
1150:000 | DONE cmt | na 16 16 |        |             | ; is not in the dictionary. We use this instead of ancient FIND to look up words
1151:000 | DONE cmt | na 16 16 |        |             | ; in the Dictionary passed by PARSE-NAME. Note this returns the nt, not the xt
1152:000 | DONE cmt | na 16 16 |        |             | ; of a word like FIND. To convert, use NAME>INT. This is a Gforth word. See
1153:000 | DONE cmt | na 16 16 |        |             | ; https://www.complang.tuwien.ac.at/forth/gforth/Docs-html/Name-token.html
1154:000 | DONE cmt | na 16 16 |        |             | ; FIND calls this word for the hard word
1155:000 | DONE lbl | na 16 16 | 0063a8 |             | xt_find-name                         
1156:000 | DONE cmt | na 16 16 |        |             |                 ; We abort when we get an empty string, that is, one with
1157:000 | DONE cmt | na 16 16 |        |             |                 ; a length of zero TOS. We could test for this, but it will
1158:000 | DONE cmt | na 16 16 |        |             |                 ; happen so rarely that the speed penalty is higher if we run
1159:000 | DONE cmt | na 16 16 |        |             |                 ; the test for every single call. Looking for an empty string
1160:000 | DONE cmt | na 16 16 |        |             |                 ; does force us to check the whole dictionary, though. The test
1161:000 | DONE cmt | na 16 16 |        |             |                 ; would be 3 bytes and 4 to 6 cycles longer:
1162:000 | DONE cmt | na 16 16 |        |             |                 ;       tya                     ; force flag check
1163:000 | DONE cmt | na 16 16 |        |             |                 ;       beq find-name_failure
1164:000 | DONE dir | na 16 16 |        |             |         .!a16                        
1165:000 | DONE dir | na 16 16 |        |             |         .!xy16                       
1166:000 | DONE cmt | na 16 16 |        |             |                 ; set up loop for the first time
1167:000 | DONE ins | na 16 16 | 0063a8 | 84 06       |                 sty.d 000206         ; length of mystery string in tmptos, Y now free
1168:000 | DONE wsp | na 16 16 |        |             |
1169:000 | DONE ins | na 16 16 | 0063aa | a4 02       |                 ldy.d 000202         
1170:000 | DONE ins | na 16 16 | 0063ac | 84 16       |                 sty.d 000216         ; nt of first Dictionary word
1171:000 | DONE wsp | na 16 16 |        |             |
1172:000 | DONE ins | na 16 16 | 0063ae | b4 00       |                 ldy.dx 00            
1173:000 | DONE ins | na 16 16 | 0063b0 | 84 18       |                 sty.d 000218         ; address of mystery string, was NOS
1174:000 | DONE wsp | na 16 16 |        |             |
1175:000 | DONE lbl | na 16 16 | 0063b2 |             | find-name_loop                       
1176:000 | DONE cmt | na 16 16 |        |             |                 ; First quick test: Are strings the same length?
1177:000 | DONE ins | na 16 16 | 0063b2 | b2 16       |                 lda.di 000216        ; LSB in first header word is length
1178:000 | DONE ins | na 16 16 | 0063b4 | 29 ff 00    |                 and.# 00ff           
1179:000 | DONE ins | na 16 16 | 0063b7 | c5 06       |                 cmp.d 000206         ; we test LSB
1180:000 | DONE cmt | na 16 16 |        |             |                 ; Most of the time, it will not be the same, so we save one
1181:000 | DONE cmt | na 16 16 |        |             |                 ; cycle pro loop if we only take the branch when they are the
1182:000 | DONE cmt | na 16 16 |        |             |                 ; same
1183:000 | DONE ins | na 16 16 | 0063b9 | f0 0c       |                 beq 0063c7           
1184:000 | DONE wsp | na 16 16 |        |             |
1185:000 | DONE lbl | na 16 16 | 0063bb |             | find-name_next_entry                 
1186:000 | DONE cmt | na 16 16 |        |             |                 ; next header address is two bytes down
1187:000 | DONE ins | na 16 16 | 0063bb | e6 16       |                 inc.d 000216         
1188:000 | DONE ins | na 16 16 | 0063bd | e6 16       |                 inc.d 000216         
1189:000 | DONE ins | na 16 16 | 0063bf | b2 16       |                 lda.di 000216        ; LDA (TMP1)
1190:000 | DONE wsp | na 16 16 |        |             |
1191:000 | DONE cmt | na 16 16 |        |             |                 ; a zero entry marks the end of the Dictionary
1192:000 | DONE ins | na 16 16 | 0063c1 | f0 36       |                 beq 0063f9           
1193:000 | DONE wsp | na 16 16 |        |             |
1194:000 | DONE ins | na 16 16 | 0063c3 | 85 16       |                 sta.d 000216         ; new header
1195:000 | DONE ins | na 16 16 | 0063c5 | 80 eb       |                 bra 0063b2           
1196:000 | DONE wsp | na 16 16 |        |             |
1197:000 | DONE lbl | na 16 16 | 0063c7 |             | find-name_chars                      
1198:000 | DONE cmt | na 16 16 |        |             |                 ; Yes, same length, so we compare characters
1199:000 | DONE wsp | na 16 16 |        |             |
1200:000 | DONE cmt | na 16 16 |        |             |                 ; Switch A to 8 bit for this
1201:000 | DONE ins | na 16 16 | 0063c7 | e2 20       |                 sep 20               
1201:001 | DONE ctl | na  8 16 |        |             |         .!a8
1202:000 | DONE cmt | na  8 16 |        |             |                 ; Second quick test: Check first char, which is 8 bytes into the
1203:000 | DONE cmt | na  8 16 |        |             |                 ; header
1204:000 | DONE ins | na  8 16 | 0063c9 | a0 08 00    |                 ldy.# 0008           
1205:000 | DONE ins | na  8 16 | 0063cc | b1 16       |                 lda.diy 000216       ; LDA (TMP1),Y - first char of entry
1206:000 | DONE ins | na  8 16 | 0063ce | d2 18       |                 cmp.di 000218        ; CMP (TMP2) - first char of mystery string
1207:000 | DONE ins | na  8 16 | 0063d0 | f0 04       |                 beq 0063d6           
1208:000 | DONE wsp | na  8 16 |        |             |
1209:000 | DONE lbl | na  8 16 | 0063d2 |             | find-name_char_nomatcnt_8            
1210:000 | DONE cmt | na  8 16 |        |             |                 ; First char is not the same, next entry
1211:000 | DONE ins | na  8 16 | 0063d2 | c2 20       |                 rep 20               
1211:001 | DONE ctl | na 16 16 |        |             |         .!a16
1212:000 | DONE ins | na 16 16 | 0063d4 | 80 e5       |                 bra 0063bb           
1213:000 | DONE wsp | na 16 16 |        |             |
1214:000 | DONE lbl | na 16 16 | 0063d6 |             | find-name_all_chars                  
1215:000 | DONE dir | na  8 16 |        |             |         .!a8                         
1216:000 | DONE cmt | na  8 16 |        |             |                 ; String length is the same, and the first character is the
1217:000 | DONE cmt | na  8 16 |        |             |                 ; same. If the word is only one character long, we're done
1218:000 | DONE ins | na  8 16 | 0063d6 | a4 06       |                 ldy.d 000206         
1219:000 | DONE ins | na  8 16 | 0063d8 | 88          |                 dey                  ; faster and shorter than CPY.# 01
1220:000 | DONE ins | na  8 16 | 0063d9 | f0 18       |                 beq 0063f3           
1221:000 | DONE wsp | na  8 16 |        |             |
1222:000 | DONE cmt | na  8 16 |        |             |                 ; No such luck: The strings are the same length and the first
1223:000 | DONE cmt | na  8 16 |        |             |                 ; char is the same, but the word is more than one char long. So
1224:000 | DONE cmt | na  8 16 |        |             |                 ; we suck it up and compare every single character. We go from
1225:000 | DONE cmt | na  8 16 |        |             |                 ; back to front, because words like CELLS and CELL+ would take
1226:000 | DONE cmt | na  8 16 |        |             |                 ; longer otherwise. We can also shorten the loop by one because
1227:000 | DONE cmt | na  8 16 |        |             |                 ; we've already compared the first char.
1228:000 | DONE wsp | na  8 16 |        |             |
1229:000 | DONE cmt | na  8 16 |        |             |                 ; Even worse, we have to add 8 bytes to address of Dictionary
1230:000 | DONE cmt | na  8 16 |        |             |                 ; string to allow testing with one loop. We need this like
1231:000 | DONE cmt | na  8 16 |        |             |                 ; a hole in the head because we just switched A to 8 bit.
1232:000 | DONE cmt | na  8 16 |        |             |                 ; However, staying with an 8-bit A is even slower.
1233:000 | DONE ins | na  8 16 | 0063db | c2 20       |                 rep 20               
1233:001 | DONE ctl | na 16 16 |        |             |         .!a16
1234:000 | DONE ins | na 16 16 | 0063dd | a5 16       |                 lda.d 000216         ; address of Dictionary string
1235:000 | DONE ins | na 16 16 | 0063df | 18          |                 clc                  
1236:000 | DONE ins | na 16 16 | 0063e0 | 69 08 00    |                 adc.# 0008           
1237:000 | DONE ins | na 16 16 | 0063e3 | 85 1a       |                 sta.d 00021a         
1238:000 | DONE ins | na 16 16 | 0063e5 | e2 20       |                 sep 20               
1238:001 | DONE ctl | na  8 16 |        |             |         .!a8
1239:000 | DONE ins | na  8 16 | 0063e7 | a4 06       |                 ldy.d 000206         ; get length of strings as loop index
1240:000 | DONE ins | na  8 16 | 0063e9 | 88          |                 dey                  ; first index is length minus 1
1241:000 | DONE wsp | na  8 16 |        |             |
1242:000 | DONE lbl | na  8 16 | 0063ea |             | @                                    
1243:000 | DONE ins | na  8 16 | 0063ea | b1 18       |                 lda.diy 000218       ; LDA (TMP2),Y - last char of mystery string
1244:000 | DONE ins | na  8 16 | 0063ec | d1 1a       |                 cmp.diy 00021a       ; CMP (TMP1),Y - last char of DP string
1245:000 | DONE ins | na  8 16 | 0063ee | d0 e2       |                 bne 0063d2           
1246:000 | DONE ins | na  8 16 | 0063f0 | 88          |                 dey                  ; start of string (Y=0) was already tested
1247:000 | DONE ins | na  8 16 | 0063f1 | d0 f7       |                 bne 0063ea           
1248:000 | DONE wsp | na  8 16 |        |             |
1249:000 | DONE lbl | na  8 16 | 0063f3 |             | find-name_success                    
1250:000 | DONE cmt | na  8 16 |        |             |                 ; If we reach here, the strings are the same and we have a match
1251:000 | DONE cmt | na  8 16 |        |             |                 ; We get here with an 8 bit A
1252:000 | DONE ins | na  8 16 | 0063f3 | c2 20       |                 rep 20               
1252:001 | DONE ctl | na 16 16 |        |             |         .!a16
1253:000 | DONE ins | na 16 16 | 0063f5 | a4 16       |                 ldy.d 000216         ; get the correct DP
1254:000 | DONE ins | na 16 16 | 0063f7 | 80 03       |                 bra 0063fc           
1255:000 | DONE wsp | na 16 16 |        |             |
1256:000 | DONE wsp | na 16 16 |        |             |
1257:000 | DONE lbl | na 16 16 | 0063f9 |             | find-name_failure_16                 
1258:000 | DONE cmt | na 16 16 |        |             |                 ; Word not found in Dictionary, return zero. Assumes A is 16
1259:000 | DONE cmt | na 16 16 |        |             |                 ; bit
1260:000 | DONE ins | na 16 16 | 0063f9 | a0 00 00    |                 ldy.# 0000           ; fall thru
1261:000 | DONE wsp | na 16 16 |        |             |
1262:000 | DONE lbl | na 16 16 | 0063fc |             | find-name_done                       
1263:000 | DONE ins | na 16 16 | 0063fc | e8          |                 inx                  ; drop old address (NIP)
1264:000 | DONE ins | na 16 16 | 0063fd | e8          |                 inx                  
1265:000 | DONE wsp | na 16 16 |        |             |
1266:000 | DONE lbl | na 16 16 | 0063fe |             | z_find-name                          
1266:001 | DONE ins | na 16 16 | 0063fe | 60          |                 rts                  
1267:000 | DONE wsp | na 16 16 |        |             |
1268:000 | DONE wsp | na 16 16 |        |             |
1269:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1270:000 | DONE cmt | na 16 16 |        |             | ; HERE ( -- u ) 6 bytes / 13 cycles
1271:000 | DONE cmt | na 16 16 |        |             | ; Push Compiler Pointer address on the Data Stack
1272:000 | DONE lbl | na 16 16 | 0063ff |             | xt_here                              
1273:000 | DONE dir | na 16 16 |        |             |         .!a16                        ; paranoid
1274:000 | DONE dir | na 16 16 |        |             |         .!xy16                       
1275:000 | DONE ins | na 16 16 | 0063ff | ca          |                 dex                  
1276:000 | DONE ins | na 16 16 | 006400 | ca          |                 dex                  
1277:000 | DONE ins | na 16 16 | 006401 | 94 00       |                 sty.dx 00            
1278:000 | DONE wsp | na 16 16 |        |             |
1279:000 | DONE ins | na 16 16 | 006403 | a4 00       |                 ldy.d 000200         
1280:000 | DONE wsp | na 16 16 |        |             |
1281:000 | DONE lbl | na 16 16 | 006405 |             | z_here                               
1281:001 | DONE ins | na 16 16 | 006405 | 60          |                 rts                  
1282:000 | DONE wsp | na 16 16 |        |             |
1283:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1284:000 | DONE cmt | na 16 16 |        |             | ; NAME>INT ( nt -- xt ) 4 bytes / 8 cycles
1285:000 | DONE cmt | na 16 16 |        |             | ; Given the Name Token (nt) of a word, return its Execute Token (xt)
1286:000 | DONE lbl | na 16 16 | 006406 |             | xt_name-int                          
1287:000 | DONE dir | na 16 16 |        |             |         .!a16                        
1288:000 | DONE dir | na 16 16 |        |             |         .!xy16                       
1289:000 | DONE cmt | na 16 16 |        |             | 		; The xt of a word beginns four bytes down from its nt
1290:000 | DONE ins | na 16 16 | 006406 | c8          |                 iny                  
1291:000 | DONE ins | na 16 16 | 006407 | c8          |                 iny                  
1292:000 | DONE ins | na 16 16 | 006408 | c8          |                 iny                  
1293:000 | DONE ins | na 16 16 | 006409 | c8          |                 iny                  
1294:000 | DONE ins | na 16 16 | 00640a | b9 00 00    |                 lda.y 0000           
1295:000 | DONE ins | na 16 16 | 00640d | a8          |                 tay                  
1296:000 | DONE wsp | na 16 16 |        |             |
1297:000 | DONE lbl | na 16 16 | 00640e |             | z_name-int                           
1297:001 | DONE ins | na 16 16 | 00640e | 60          |                 rts                  
1298:000 | DONE wsp | na 16 16 |        |             |
1299:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1300:000 | DONE cmt | na 16 16 |        |             | ; NAME>STRING ( nt -- addr u ) 16 bytes / X cycles
1301:000 | DONE cmt | na 16 16 |        |             | ; Given a name token (nt) of a word, return its string. This is a Gforth word
1302:000 | DONE cmt | na 16 16 |        |             | ; that works with the Dictionary header entries. It is not checked if nt is
1303:000 | DONE cmt | na 16 16 |        |             | ; a valid name token.
1304:000 | DONE lbl | na 16 16 | 00640f |             | xt_name-string                       
1305:000 | DONE dir | na 16 16 |        |             |         .!a16                        
1306:000 | DONE dir | na 16 16 |        |             |         .!xy16                       
1307:000 | DONE ins | na 16 16 | 00640f | ca          |                 dex                  ; move NOS down one
1308:000 | DONE ins | na 16 16 | 006410 | ca          |                 dex                  
1309:000 | DONE wsp | na 16 16 |        |             |
1310:000 | DONE cmt | na 16 16 |        |             |                 ; the name string of a word begins 8 bytes down from its nt,
1311:000 | DONE cmt | na 16 16 |        |             |                 ; which we have as TOS
1312:000 | DONE ins | na 16 16 | 006411 | 98          |                 tya                  
1313:000 | DONE ins | na 16 16 | 006412 | 18          |                 clc                  
1314:000 | DONE ins | na 16 16 | 006413 | 69 08 00    |                 adc.# 0008           
1315:000 | DONE ins | na 16 16 | 006416 | 95 00       |                 sta.dx 00            ; NOS
1316:000 | DONE wsp | na 16 16 |        |             |
1317:000 | DONE cmt | na 16 16 |        |             |                 ; the length of the name string is in the LSB of the first word
1318:000 | DONE cmt | na 16 16 |        |             |                 ; of the dictionary entry header (the name token)
1319:000 | DONE ins | na 16 16 | 006418 | b9 00 00    |                 lda.y 0000           ; LDA $0000,Y
1320:000 | DONE ins | na 16 16 | 00641b | 29 ff 00    |                 and.# 00ff           ; mask all but length byte
1321:000 | DONE ins | na 16 16 | 00641e | a8          |                 tay                  
1322:000 | DONE wsp | na 16 16 |        |             |
1323:000 | DONE lbl | na 16 16 | 00641f |             | z_name-string                        
1323:001 | DONE ins | na 16 16 | 00641f | 60          |                 rts                  
1324:000 | DONE wsp | na 16 16 |        |             |
1325:000 | DONE wsp | na 16 16 |        |             |
1326:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1327:000 | DONE cmt | na 16 16 |        |             | ; NIP ( n m -- m ) 2 bytes / 4 cycles
1328:000 | DONE cmt | na 16 16 |        |             | ; Delete entry that is NOS
1329:000 | DONE lbl | na 16 16 | 006420 |             | xt_nip                               
1330:000 | DONE dir | na 16 16 |        |             |         .!xy16                       
1331:000 | DONE ins | na 16 16 | 006420 | e8          |                 inx                  
1332:000 | DONE ins | na 16 16 | 006421 | e8          |                 inx                  
1333:000 | DONE lbl | na 16 16 | 006422 |             | z_nip                                
1333:001 | DONE ins | na 16 16 | 006422 | 60          |                 rts                  
1334:000 | DONE wsp | na 16 16 |        |             |
1335:000 | DONE wsp | na 16 16 |        |             |
1336:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1337:000 | DONE cmt | na 16 16 |        |             | ; OVER ( n m -- n m n )  6 bytes / 14 cycles
1338:000 | DONE cmt | na 16 16 |        |             | ; Push NOS on Data Stack
1339:000 | DONE lbl | na 16 16 | 006423 |             | xt_over                              
1340:000 | DONE ins | na 16 16 | 006423 | ca          |                 dex                  
1341:000 | DONE ins | na 16 16 | 006424 | ca          |                 dex                  
1342:000 | DONE ins | na 16 16 | 006425 | 94 00       |                 sty.dx 00            
1343:000 | DONE ins | na 16 16 | 006427 | b4 02       |                 ldy.dx 02            
1344:000 | DONE wsp | na 16 16 |        |             |
1345:000 | DONE lbl | na 16 16 | 006429 |             | z_over                               
1345:001 | DONE ins | na 16 16 | 006429 | 60          |                 rts                  
1346:000 | DONE wsp | na 16 16 |        |             |
1347:000 | DONE wsp | na 16 16 |        |             |
1348:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1349:000 | DONE cmt | na 16 16 |        |             | ; PAD ( -- addr ) 11 bytes / X cycles
1350:000 | DONE cmt | na 16 16 |        |             | ; Return address to a temporary area in free memory for user. Must be at least
1351:000 | DONE cmt | na 16 16 |        |             | ; 84 bytes in size (says ANSI). It is located relative to the compile area
1352:000 | DONE cmt | na 16 16 |        |             | ; pointer (CP) and therefore varies in position. This area is reserved for the
1353:000 | DONE cmt | na 16 16 |        |             | ; user and not used by the system
1354:000 | DONE lbl | na 16 16 | 00642a |             | xt_pad                               
1355:000 | DONE dir | na 16 16 |        |             |         .!a16                        
1356:000 | DONE ins | na 16 16 | 00642a | ca          |                 dex                  
1357:000 | DONE ins | na 16 16 | 00642b | ca          |                 dex                  
1358:000 | DONE ins | na 16 16 | 00642c | 94 00       |                 sty.dx 00            
1359:000 | DONE wsp | na 16 16 |        |             |
1360:000 | DONE ins | na 16 16 | 00642e | a5 00       |                 lda.d 000200         
1361:000 | DONE ins | na 16 16 | 006430 | 18          |                 clc                  
1362:000 | DONE ins | na 16 16 | 006431 | 69 7f 00    |                 adc.# 00007f         
1363:000 | DONE ins | na 16 16 | 006434 | a8          |                 tay                  
1364:000 | DONE wsp | na 16 16 |        |             |
1365:000 | DONE lbl | na 16 16 | 006435 |             | z_pad                                
1365:001 | DONE ins | na 16 16 | 006435 | 60          |                 rts                  
1366:000 | DONE wsp | na 16 16 |        |             |
1367:000 | DONE wsp | na 16 16 |        |             |
1368:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1369:000 | DONE cmt | na 16 16 |        |             | ; PAGE ( -- ) X bytes / X cycles
1370:000 | DONE cmt | na 16 16 |        |             | ; Clear the screen on vt-100 terminals by sending the code "ESC[2J". This is
1371:000 | DONE cmt | na 16 16 |        |             | ; only useful in interactive scenarios so we don't worry about speed
1372:000 | DONE cmt | na 16 16 |        |             | ; TODO rewrite with EMIT
1373:000 | DONE lbl | na 16 16 | 006436 |             | xt_page                              
1374:000 | DONE ins | na 16 16 | 006436 | a9 0b 6b    |                 lda.# 006b0b         
1375:000 | DONE ins | na 16 16 | 006439 | 20 d4 68    |                 jsr 0068d4           
1376:000 | DONE wsp | na 16 16 |        |             |
1377:000 | DONE cmt | na 16 16 |        |             |                 ; In theory, this should have moved the cursor to the top left
1378:000 | DONE cmt | na 16 16 |        |             |                 ; corner ("home"), but this doesn't seem to work in practice.
1379:000 | DONE cmt | na 16 16 |        |             |                 ; So we send "ESC[H" as well.
1380:000 | DONE ins | na 16 16 | 00643c | a9 10 6b    |                 lda.# 006b10         
1381:000 | DONE ins | na 16 16 | 00643f | 20 d4 68    |                 jsr 0068d4           
1382:000 | DONE wsp | na 16 16 |        |             |
1383:000 | DONE lbl | na 16 16 | 006442 |             | z_page                               
1383:001 | DONE ins | na 16 16 | 006442 | 60          |                 rts                  
1384:000 | DONE wsp | na 16 16 |        |             |
1385:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1386:000 | DONE cmt | na 16 16 |        |             | ; PARSE-NAME ( "name" -- addr u ) 41+ bytes / X cycles
1387:000 | DONE cmt | na 16 16 |        |             | ; Find next word in input string, skipping leading spaces. This is a special
1388:000 | DONE cmt | na 16 16 |        |             | ; form of PARSE and drops through to that word. See PARSE for more detail. We
1389:000 | DONE cmt | na 16 16 |        |             | ; use this word internally for the interpreter because it is a lot easier to use
1390:000 | DONE cmt | na 16 16 |        |             | ; http://forth-standard.org/standard/core/PARSE-NAME has a Forth implementation
1391:000 | DONE lbl | na 16 16 | 006443 |             | xt_parse-name                        
1392:000 | DONE dir | na 16 16 |        |             |         .!a16                        
1393:000 | DONE dir | na 16 16 |        |             |         .!xy16                       
1394:000 | DONE cmt | na 16 16 |        |             |                 ; skip leading spaces, changing >IN, then place SPACE
1395:000 | DONE cmt | na 16 16 |        |             |                 ; character on data stack for PARSE
1396:000 | DONE ins | na 16 16 | 006443 | 5a          |                 phy                  ; save TOS for later use
1397:000 | DONE ins | na 16 16 | 006444 | a4 12       |                 ldy.d 000212         ; >IN
1398:000 | DONE ins | na 16 16 | 006446 | e2 20       |                 sep 20               
1398:001 | DONE ctl | na  8 16 |        |             |         .!a8
1399:000 | DONE lbl | na  8 16 | 006448 |             | parse-name_loop                      
1400:000 | DONE ins | na  8 16 | 006448 | c4 0e       |                 cpy.d 00020e         ; end of line?
1401:000 | DONE ins | na  8 16 | 00644a | f0 09       |                 beq 006455           
1402:000 | DONE wsp | na  8 16 |        |             |
1403:000 | DONE ins | na  8 16 | 00644c | b1 0c       |                 lda.diy 00020c       ; LDA (CIB),Y
1404:000 | DONE ins | na  8 16 | 00644e | c9 20       |                 cmp.# AscSP          
1405:000 | DONE ins | na  8 16 | 006450 | d0 17       |                 bne 006469           
1406:000 | DONE ins | na  8 16 | 006452 | c8          |                 iny                  
1407:000 | DONE ins | na  8 16 | 006453 | 80 f3       |                 bra 006448           
1408:000 | DONE wsp | na  8 16 |        |             |
1409:000 | DONE lbl | na  8 16 | 006455 |             | parse-name_empty_line                
1410:000 | DONE ins | na  8 16 | 006455 | c2 20       |                 rep 20               
1410:001 | DONE ctl | na 16 16 |        |             |         .!a16
1411:000 | DONE cmt | na 16 16 |        |             |                 ; The Gforth documentation does not say what address is returned
1412:000 | DONE cmt | na 16 16 |        |             |                 ; if a string with only spaces is returned. Experiments with
1413:000 | DONE cmt | na 16 16 |        |             |                 ; the word  : PNT ( "name" -- ) PARSE-NAME SWAP U. U. TYPE ;
1414:000 | DONE cmt | na 16 16 |        |             |                 ; show that it returns the address of the last space in the
1415:000 | DONE cmt | na 16 16 |        |             |                 ; input, which is cib+ciblen. So we do that as well.
1416:000 | DONE ins | na 16 16 | 006457 | ca          |                 dex                  
1417:000 | DONE ins | na 16 16 | 006458 | ca          |                 dex                  
1418:000 | DONE ins | na 16 16 | 006459 | ca          |                 dex                  
1419:000 | DONE ins | na 16 16 | 00645a | ca          |                 dex                  
1420:000 | DONE wsp | na 16 16 |        |             |
1421:000 | DONE ins | na 16 16 | 00645b | 7a          |                 ply                  ; restore old TOS as 3OS
1422:000 | DONE ins | na 16 16 | 00645c | 94 02       |                 sty.dx 02            
1423:000 | DONE wsp | na 16 16 |        |             |
1424:000 | DONE ins | na 16 16 | 00645e | a5 0c       |                 lda.d 00020c         
1425:000 | DONE ins | na 16 16 | 006460 | 18          |                 clc                  
1426:000 | DONE ins | na 16 16 | 006461 | 65 0e       |                 adc.d 00020e         
1427:000 | DONE ins | na 16 16 | 006463 | 95 00       |                 sta.dx 00            ; Address as NOS
1428:000 | DONE wsp | na 16 16 |        |             |
1429:000 | DONE ins | na 16 16 | 006465 | a0 00 00    |                 ldy.# 0000           ; TOS
1430:000 | DONE wsp | na 16 16 |        |             |
1431:000 | DONE ins | na 16 16 | 006468 | 60          |                 rts                  ; don't have to go through PARSE
1432:000 | DONE wsp | na 16 16 |        |             |
1433:000 | DONE lbl | na 16 16 | 006469 |             | parse-name_found                     
1434:000 | DONE dir | na 16 16 |        |             |         .!xy16                       
1435:000 | DONE ins | na 16 16 | 006469 | c2 20       |                 rep 20               
1435:001 | DONE ctl | na 16 16 |        |             |         .!a16
1436:000 | DONE ins | na 16 16 | 00646b | 84 12       |                 sty.d 000212         ; new >IN
1437:000 | DONE wsp | na 16 16 |        |             |
1438:000 | DONE ins | na 16 16 | 00646d | 7a          |                 ply                  ; recover TOS
1439:000 | DONE ins | na 16 16 | 00646e | ca          |                 dex                  
1440:000 | DONE ins | na 16 16 | 00646f | ca          |                 dex                  
1441:000 | DONE ins | na 16 16 | 006470 | 94 00       |                 sty.dx 00            
1442:000 | DONE wsp | na 16 16 |        |             |
1443:000 | DONE ins | na 16 16 | 006472 | a0 20 00    |                 ldy.# AscSP          ; put space on TOS for PARSE
1444:000 | DONE wsp | na 16 16 |        |             |
1445:000 | DONE cmt | na 16 16 |        |             |                 ; fall thru to PARSE
1446:000 | DONE wsp | na 16 16 |        |             |
1447:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1448:000 | DONE cmt | na 16 16 |        |             | ; PARSE ( c "name" -- addr u ) 45 bytes / X+ cycles
1449:000 | DONE cmt | na 16 16 |        |             | ; Find word in input string delimited by character given Do not skip leading
1450:000 | DONE cmt | na 16 16 |        |             | ; delimiters, this is an important difference to PARSE-NAME. PARSE and
1451:000 | DONE cmt | na 16 16 |        |             | ; PARSE-NAME replace WORD in modern systems. See the ANSI documentation at
1452:000 | DONE cmt | na 16 16 |        |             | ; http://www.forth200x.org/documents/html3/rationale.html#rat:core:PARSE
1453:000 | DONE cmt | na 16 16 |        |             | ; PARSE-NAME drops through to here
1454:000 | DONE cmt | na 16 16 |        |             | ;
1455:000 | DONE cmt | na 16 16 |        |             | ;    cib   cib+toin    cib+ciblen
1456:000 | DONE cmt | na 16 16 |        |             | ;     v       v             v
1457:000 | DONE cmt | na 16 16 |        |             | ;     |#####################|              Length of found string:
1458:000 | DONE cmt | na 16 16 |        |             | ;                                          ciblen - toin
1459:000 | DONE cmt | na 16 16 |        |             | ;     +------>|  toin (>IN)
1460:000 | DONE cmt | na 16 16 |        |             | ;     +-------------------->|  ciblen
1461:000 | DONE cmt | na 16 16 |        |             | ;
1462:000 | DONE cmt | na 16 16 |        |             | ; The input string is stored starting at the address in the Current Input Buffer
1463:000 | DONE cmt | na 16 16 |        |             | ; (CIB), the length of which is in CIBLEN. While searching for the delimiter,
1464:000 | DONE cmt | na 16 16 |        |             | ; TOIN (>IN) points to the where we currently are. Since PARSE does not skip
1465:000 | DONE cmt | na 16 16 |        |             | ; leading delimiters, we assume we are on a useful string.
1466:000 | DONE lbl | na 16 16 | 006475 |             | xt_parse                             
1467:000 | DONE dir | na 16 16 |        |             |         .!a16                        
1468:000 | DONE dir | na 16 16 |        |             |         .!xy16                       
1469:000 | DONE ins | na 16 16 | 006475 | 84 16       |                 sty.d 000216         ; save delimiter, char is LSB
1470:000 | DONE wsp | na 16 16 |        |             |
1471:000 | DONE cmt | na 16 16 |        |             |                 ; save beginning of new word (cib+toin) to NOS. Don't need to
1472:000 | DONE cmt | na 16 16 |        |             |                 ; worry about TOS because Y gets clobbered anyway before we
1473:000 | DONE cmt | na 16 16 |        |             |                 ; return
1474:000 | DONE ins | na 16 16 | 006477 | a5 12       |                 lda.d 000212         
1475:000 | DONE ins | na 16 16 | 006479 | 85 1a       |                 sta.d 00021a         ; save >IN for later length calculation
1476:000 | DONE ins | na 16 16 | 00647b | 18          |                 clc                  
1477:000 | DONE ins | na 16 16 | 00647c | 65 0c       |                 adc.d 00020c         
1478:000 | DONE wsp | na 16 16 |        |             |
1479:000 | DONE ins | na 16 16 | 00647e | ca          |                 dex                  ; save addr as NOS
1480:000 | DONE ins | na 16 16 | 00647f | ca          |                 dex                  
1481:000 | DONE ins | na 16 16 | 006480 | 95 00       |                 sta.dx 00            
1482:000 | DONE wsp | na 16 16 |        |             |
1483:000 | DONE ins | na 16 16 | 006482 | 64 18       |                 stz.d 000218         ; offset for EOL/char found adjustment of >IN
1484:000 | DONE wsp | na 16 16 |        |             |
1485:000 | DONE cmt | na 16 16 |        |             |                 ; prepare loop using Y as index
1486:000 | DONE ins | na 16 16 | 006484 | a4 12       |                 ldy.d 000212         
1487:000 | DONE ins | na 16 16 | 006486 | e2 20       |                 sep 20               
1487:001 | DONE ctl | na  8 16 |        |             |         .!a8
1488:000 | DONE wsp | na  8 16 |        |             |
1489:000 | DONE lbl | na  8 16 | 006488 |             | parse_loop                           
1490:000 | DONE ins | na  8 16 | 006488 | c4 0e       |                 cpy.d 00020e         ; check for EOL first
1491:000 | DONE ins | na  8 16 | 00648a | f0 0d       |                 beq 006499           
1492:000 | DONE wsp | na  8 16 |        |             |
1493:000 | DONE ins | na  8 16 | 00648c | b1 0c       |                 lda.diy 00020c       ; LDA (CIB),Y
1494:000 | DONE ins | na  8 16 | 00648e | c5 16       |                 cmp.d 000216         ; found delimiter?
1495:000 | DONE ins | na  8 16 | 006490 | f0 03       |                 beq 006495           
1496:000 | DONE ins | na  8 16 | 006492 | c8          |                 iny                  
1497:000 | DONE ins | na  8 16 | 006493 | 80 f3       |                 bra 006488           
1498:000 | DONE wsp | na  8 16 |        |             |
1499:000 | DONE lbl | na  8 16 | 006495 |             | parse_found_delimiter                
1500:000 | DONE cmt | na  8 16 |        |             |                 ; If we haven't reached the end of the line, but found
1501:000 | DONE cmt | na  8 16 |        |             |                 ; a delimiter, we want >IN to point to the next character after
1502:000 | DONE cmt | na  8 16 |        |             |                 ; the delimiter, not the delimiter itself. This is what the
1503:000 | DONE cmt | na  8 16 |        |             |                 ; offset is for
1504:000 | DONE ins | na  8 16 | 006495 | c2 20       |                 rep 20               
1504:001 | DONE ctl | na 16 16 |        |             |         .!a16
1505:000 | DONE ins | na 16 16 | 006497 | e6 18       |                 inc.d 000218         
1506:000 | DONE wsp | na 16 16 |        |             |
1507:000 | DONE lbl | na 16 16 | 006499 |             | parse_reached_eol                    
1508:000 | DONE cmt | na 16 16 |        |             |                 ; calculate length of string found (see ascii drawing)
1509:000 | DONE dir | na 16 16 |        |             |         .!xy16                       
1510:000 | DONE ins | na 16 16 | 006499 | c2 20       |                 rep 20               
1510:001 | DONE ctl | na 16 16 |        |             |         .!a16
1511:000 | DONE ins | na 16 16 | 00649b | 98          |                 tya                  
1512:000 | DONE ins | na 16 16 | 00649c | 38          |                 sec                  
1513:000 | DONE ins | na 16 16 | 00649d | e5 1a       |                 sbc.d 00021a         ; original value for >IN / index of first char
1514:000 | DONE ins | na 16 16 | 00649f | 48          |                 pha                  ; save so we can manipulate Y
1515:000 | DONE wsp | na 16 16 |        |             |
1516:000 | DONE cmt | na 16 16 |        |             |                 ; calculate new >IN
1517:000 | DONE ins | na 16 16 | 0064a0 | 98          |                 tya                  
1518:000 | DONE ins | na 16 16 | 0064a1 | 18          |                 clc                  
1519:000 | DONE ins | na 16 16 | 0064a2 | 65 18       |                 adc.d 000218         ; offset for EOL vs found delimiter
1520:000 | DONE ins | na 16 16 | 0064a4 | 85 12       |                 sta.d 000212         
1521:000 | DONE wsp | na 16 16 |        |             |
1522:000 | DONE ins | na 16 16 | 0064a6 | 7a          |                 ply                  ; length of string in TOS
1523:000 | DONE wsp | na 16 16 |        |             |
1524:000 | DONE lbl | na 16 16 | 0064a7 |             | z_parse-name                         
1525:000 | DONE lbl | na 16 16 | 0064a7 |             | z_parse                              
1525:001 | DONE ins | na 16 16 | 0064a7 | 60          |                 rts                  
1526:000 | DONE wsp | na 16 16 |        |             |
1527:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1528:000 | DONE cmt | na 16 16 |        |             | ; REFILL ( -- f ) X bytes / X cycles
1529:000 | DONE cmt | na 16 16 |        |             | ; "Attempt to fill the input buffer from the input source, returning a true flag
1530:000 | DONE cmt | na 16 16 |        |             | ; if successful. When the input source is the user input device, attempt to
1531:000 | DONE cmt | na 16 16 |        |             | ; receive input into the terminal input buffer. If successful, make the result
1532:000 | DONE cmt | na 16 16 |        |             | ; the input buffer, set >IN to zero, and return true. Receipt of a line
1533:000 | DONE cmt | na 16 16 |        |             | ; containing no characters is considered successful. If there is no input
1534:000 | DONE cmt | na 16 16 |        |             | ; available from the current input source, return false. When the input source
1535:000 | DONE cmt | na 16 16 |        |             | ; is a string from EVALUATE, return false and perform no other action."
1536:000 | DONE cmt | na 16 16 |        |             | ; See https://www.complang.tuwien.ac.at/forth/gforth/Docs-html/The-Input-Stream.html
1537:000 | DONE cmt | na 16 16 |        |             | ; and Conklin & Rather p. 156
1538:000 | DONE lbl | na 16 16 | 0064a8 |             | xt_refill                            
1539:000 | DONE dir | na 16 16 |        |             |         .!a16                        
1540:000 | DONE dir | na 16 16 |        |             |         .!xy16                       
1541:000 | DONE cmt | na 16 16 |        |             |                 ; We handle buffer switches here so that regardless of input
1542:000 | DONE cmt | na 16 16 |        |             |                 ; source, we have access to the previous input. This is not in
1543:000 | DONE cmt | na 16 16 |        |             |                 ; the ANSI specification in any way.
1544:000 | DONE ins | na 16 16 | 0064a8 | a5 0c       |                 lda.d 00020c         
1545:000 | DONE ins | na 16 16 | 0064aa | 49 00 01    |                 eor.# 0100           ; flip 07d00 / 07c00
1546:000 | DONE ins | na 16 16 | 0064ad | 85 0c       |                 sta.d 00020c         
1547:000 | DONE wsp | na 16 16 |        |             |
1548:000 | DONE ins | na 16 16 | 0064af | a5 0e       |                 lda.d 00020e         ; current length is now previous length
1549:000 | DONE ins | na 16 16 | 0064b1 | 85 10       |                 sta.d 000210         
1550:000 | DONE wsp | na 16 16 |        |             |
1551:000 | DONE cmt | na 16 16 |        |             |                 ; Get input source from SOURCE-ID. We don't have blocks in this
1552:000 | DONE cmt | na 16 16 |        |             |                 ; version, or else we would have to check BLK first. This is an
1553:000 | DONE cmt | na 16 16 |        |             |                 ; optimized version of a subroutine jump to SOURCE-ID
1554:000 | DONE ins | na 16 16 | 0064b3 | a5 0a       |                 lda.d 00020a         
1555:000 | DONE ins | na 16 16 | 0064b5 | d0 14       |                 bne 0064cb           
1556:000 | DONE wsp | na 16 16 |        |             |
1557:000 | DONE cmt | na 16 16 |        |             |                 ; SOURCE-ID of zero means we're getting stuff from the keyboard
1558:000 | DONE cmt | na 16 16 |        |             |                 ; with ACCEPT.
1559:000 | DONE ins | na 16 16 | 0064b7 | ca          |                 dex                  ; push Data Stack down twice
1560:000 | DONE ins | na 16 16 | 0064b8 | ca          |                 dex                  
1561:000 | DONE ins | na 16 16 | 0064b9 | 94 00       |                 sty.dx 00            
1562:000 | DONE wsp | na 16 16 |        |             |
1563:000 | DONE ins | na 16 16 | 0064bb | a5 0c       |                 lda.d 00020c         ; address of current input buffer NOS
1564:000 | DONE ins | na 16 16 | 0064bd | ca          |                 dex                  
1565:000 | DONE ins | na 16 16 | 0064be | ca          |                 dex                  
1566:000 | DONE ins | na 16 16 | 0064bf | 95 00       |                 sta.dx 00            
1567:000 | DONE wsp | na 16 16 |        |             |
1568:000 | DONE ins | na 16 16 | 0064c1 | a0 ff 00    |                 ldy.# 0000ff         
1569:000 | DONE wsp | na 16 16 |        |             |
1570:000 | DONE ins | na 16 16 | 0064c4 | 20 60 61    |                 jsr 006160           ; ( addr n1 -- n2)
1571:000 | DONE wsp | na 16 16 |        |             |
1572:000 | DONE cmt | na 16 16 |        |             |                 ; ACCEPT returns the number of characters accepted, but we don't
1573:000 | DONE cmt | na 16 16 |        |             |                 ; need them. We just overwrite TOS this with the flag
1574:000 | DONE ins | na 16 16 | 0064c7 | a0 ff ff    |                 ldy.# 0ffff          
1575:000 | DONE wsp | na 16 16 |        |             |
1576:000 | DONE ins | na 16 16 | 0064ca | 60          |                 rts                  
1577:000 | DONE wsp | na 16 16 |        |             |
1578:000 | DONE lbl | na 16 16 | 0064cb |             | refill_src_not_kbd                   
1579:000 | DONE cmt | na 16 16 |        |             |                 ; If SOURCE-ID doesn't return a zero, it must be a string in
1580:000 | DONE cmt | na 16 16 |        |             |                 ; memory or a file (remember, no blocks in this version)
1581:000 | DONE ins | na 16 16 | 0064cb | 1a          |                 inc.a                
1582:000 | DONE ins | na 16 16 | 0064cc | d0 06       |                 bne 0064d4           
1583:000 | DONE wsp | na 16 16 |        |             |
1584:000 | DONE cmt | na 16 16 |        |             |                 ; Simply return FALSE flag as per specification
1585:000 | DONE ins | na 16 16 | 0064ce | ca          |                 dex                  
1586:000 | DONE ins | na 16 16 | 0064cf | ca          |                 dex                  
1587:000 | DONE ins | na 16 16 | 0064d0 | 94 00       |                 sty.dx 00            
1588:000 | DONE ins | na 16 16 | 0064d2 | a8          |                 tay                  
1589:000 | DONE wsp | na 16 16 |        |             |
1590:000 | DONE ins | na 16 16 | 0064d3 | 60          |                 rts                  
1591:000 | DONE wsp | na 16 16 |        |             |
1592:000 | DONE lbl | na 16 16 | 0064d4 |             | refill_source_is_not_string          
1593:000 | DONE cmt | na 16 16 |        |             |                 ; Since we don't have blocks, this must mean that we are trying
1594:000 | DONE cmt | na 16 16 |        |             |                 ; to read from a file. However, we don't have files yet, so we
1595:000 | DONE cmt | na 16 16 |        |             |                 ; report an error and jump to ABORT.
1596:000 | DONE ins | na 16 16 | 0064d4 | a9 cb 6a    |                 lda.# 006acb         
1597:000 | DONE ins | na 16 16 | 0064d7 | 4c ce 68    |                 jmp 0068ce           
1598:000 | DONE wsp | na 16 16 |        |             |
1599:000 | DONE lbl | na 16 16 | 0064da |             | z_refill                             
1599:001 | DONE ins | na 16 16 | 0064da | 60          |                 rts                  ; dummy for compiling
1600:000 | DONE wsp | na 16 16 |        |             |
1601:000 | DONE wsp | na 16 16 |        |             |
1602:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1603:000 | DONE cmt | na 16 16 |        |             | ; ROT ( a b c -- b c a ) X bytes / X cycles
1604:000 | DONE cmt | na 16 16 |        |             | ; Rotate the top three entries downwards (third entry becomes first)
1605:000 | DONE cmt | na 16 16 |        |             | ; Remember this with the "R" for "revolution": The bottom entry becomes the top.
1606:000 | DONE lbl | na 16 16 | 0064db |             | xt_rot                               
1607:000 | DONE dir | na 16 16 |        |             |         .!a16                        
1608:000 | DONE dir | na 16 16 |        |             |         .!xy16                       
1609:000 | DONE ins | na 16 16 | 0064db | b5 00       |                 lda.dx 00            ; save b
1610:000 | DONE ins | na 16 16 | 0064dd | 94 00       |                 sty.dx 00            ; move c to NOS
1611:000 | DONE ins | na 16 16 | 0064df | b4 02       |                 ldy.dx 02            ; move a to TOS
1612:000 | DONE ins | na 16 16 | 0064e1 | 95 02       |                 sta.dx 02            ; save b as 3OS
1613:000 | DONE wsp | na 16 16 |        |             |
1614:000 | DONE lbl | na 16 16 | 0064e3 |             | z_rot                                
1614:001 | DONE ins | na 16 16 | 0064e3 | 60          |                 rts                  
1615:000 | DONE wsp | na 16 16 |        |             |
1616:000 | DONE wsp | na 16 16 |        |             |
1617:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1618:000 | DONE cmt | na 16 16 |        |             | ; SOURCE ( -- addr u ) 12 bytes / X cycles
1619:000 | DONE cmt | na 16 16 |        |             | ; Return the address and size of current input buffer. Replaces TIB and #TIB in
1620:000 | DONE cmt | na 16 16 |        |             | ; ANSI Forth
1621:000 | DONE wsp | na 16 16 |        |             |
1622:000 | DONE lbl | na 16 16 | 0064e4 |             | xt_source                            
1622:001 | DONE ins | na 16 16 | 0064e4 | ca          |                 dex                  ; make room on Data Stack
1623:000 | DONE ins | na 16 16 | 0064e5 | ca          |                 dex                  
1624:000 | DONE ins | na 16 16 | 0064e6 | ca          |                 dex                  
1625:000 | DONE ins | na 16 16 | 0064e7 | ca          |                 dex                  
1626:000 | DONE ins | na 16 16 | 0064e8 | 94 02       |                 sty.dx 02            
1627:000 | DONE wsp | na 16 16 |        |             |
1628:000 | DONE ins | na 16 16 | 0064ea | a5 0c       |                 lda.d 00020c         ; address of current input buffer as NOS
1629:000 | DONE ins | na 16 16 | 0064ec | 95 00       |                 sta.dx 00            
1630:000 | DONE wsp | na 16 16 |        |             |
1631:000 | DONE ins | na 16 16 | 0064ee | a4 0e       |                 ldy.d 00020e         ; length of current input buffer as TOS
1632:000 | DONE wsp | na 16 16 |        |             |
1633:000 | DONE lbl | na 16 16 | 0064f0 |             | z_source                             
1633:001 | DONE ins | na 16 16 | 0064f0 | 60          |                 rts                  
1634:000 | DONE wsp | na 16 16 |        |             |
1635:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1636:000 | DONE cmt | na 16 16 |        |             | ; SOURCE-ID ( -- n ) 6 bytes / 13 cycles
1637:000 | DONE cmt | na 16 16 |        |             | ; Identify the input source unless it is a block (s. Conklin & Rather p. 156).
1638:000 | DONE cmt | na 16 16 |        |             | ; Since we don't have blocks (yet), this will give the input source: 0 is
1639:000 | DONE cmt | na 16 16 |        |             | ; keyboard, -1 (0ffff) is character string, and a text file gives the fileid.
1640:000 | DONE wsp | na 16 16 |        |             |
1641:000 | DONE lbl | na 16 16 | 0064f1 |             | xt_source-id                         
1642:000 | DONE dir | na 16 16 |        |             |         .!xy16                       
1643:000 | DONE ins | na 16 16 | 0064f1 | ca          |                 dex                  
1644:000 | DONE ins | na 16 16 | 0064f2 | ca          |                 dex                  
1645:000 | DONE ins | na 16 16 | 0064f3 | 94 00       |                 sty.dx 00            
1646:000 | DONE ins | na 16 16 | 0064f5 | a4 0a       |                 ldy.d 00020a         
1647:000 | DONE wsp | na 16 16 |        |             |
1648:000 | DONE lbl | na 16 16 | 0064f7 |             | z_source-id                          
1648:001 | DONE ins | na 16 16 | 0064f7 | 60          |                 rts                  
1649:000 | DONE wsp | na 16 16 |        |             |
1650:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1651:000 | DONE cmt | na 16 16 |        |             | ; SPACE ( -- ) X bytes / X cycles
1652:000 | DONE cmt | na 16 16 |        |             | ; Print one ASCII space character
1653:000 | DONE cmt | na 16 16 |        |             | ; TODO change to call EMIT
1654:000 | DONE lbl | na 16 16 | 0064f8 |             | xt_space                             
1655:000 | DONE ins | na 16 16 | 0064f8 | a9 20 00    |                 lda.# AscSP          
1656:000 | DONE ins | na 16 16 | 0064fb | 20 30 60    |                 jsr 006030           
1657:000 | DONE dir | na 16 16 |        |             |         .!a16                        
1658:000 | DONE wsp | na 16 16 |        |             |
1659:000 | DONE lbl | na 16 16 | 0064fe |             | z_space                              
1659:001 | DONE ins | na 16 16 | 0064fe | 60          |                 rts                  
1660:000 | DONE wsp | na 16 16 |        |             |
1661:000 | DONE wsp | na 16 16 |        |             |
1662:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1663:000 | DONE cmt | na 16 16 |        |             | ; SPACES ( u -- ) 12 bytes / X cycles
1664:000 | DONE cmt | na 16 16 |        |             | ; Print u spaces. Calls SPACE, because this is probably interactive and humans
1665:000 | DONE cmt | na 16 16 |        |             | ; are slow enough we don't have to care about speed.
1666:000 | DONE lbl | na 16 16 | 0064ff |             | xt_spaces                            
1667:000 | DONE dir | na 16 16 |        |             |         .!a16                        
1668:000 | DONE dir | na 16 16 |        |             |         .!xy16                       
1669:000 | DONE lbl | na 16 16 | 0064ff |             | @                                    
1670:000 | DONE ins | na 16 16 | 0064ff | 88          |                 dey                  ; this also handles case u=0
1671:000 | DONE ins | na 16 16 | 006500 | 30 05       |                 bmi 006507           
1672:000 | DONE wsp | na 16 16 |        |             |
1673:000 | DONE ins | na 16 16 | 006502 | 20 f8 64    |                 jsr 0064f8           
1674:000 | DONE ins | na 16 16 | 006505 | 80 f8       |                 bra 0064ff           
1675:000 | DONE wsp | na 16 16 |        |             |
1676:000 | DONE lbl | na 16 16 | 006507 |             | spaces_done                          
1677:000 | DONE ins | na 16 16 | 006507 | b4 00       |                 ldy.dx 00            ; DROP
1678:000 | DONE ins | na 16 16 | 006509 | e8          |                 inx                  
1679:000 | DONE ins | na 16 16 | 00650a | e8          |                 inx                  
1680:000 | DONE wsp | na 16 16 |        |             |
1681:000 | DONE lbl | na 16 16 | 00650b |             | z_spaces                             
1681:001 | DONE ins | na 16 16 | 00650b | 60          |                 rts                  
1682:000 | DONE wsp | na 16 16 |        |             |
1683:000 | DONE wsp | na 16 16 |        |             |
1684:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1685:000 | DONE cmt | na 16 16 |        |             | ; STATE ( -- addr ) 7 bytes / 12 cycles
1686:000 | DONE cmt | na 16 16 |        |             | ; Return the address of a cell containing the compilation-state flag. STATE
1687:000 | DONE cmt | na 16 16 |        |             | ; is true when in compilation state, false otherwise. STATE should not be
1688:000 | DONE cmt | na 16 16 |        |             | ; changed directly by the user; see
1689:000 | DONE cmt | na 16 16 |        |             | ; http://forth.sourceforge.net/standard/dpans/dpans6.htm#6.1.2250
1690:000 | DONE lbl | na 16 16 | 00650c |             | xt_state                             
1691:000 | DONE dir | na 16 16 |        |             |         .!xy16                       
1692:000 | DONE ins | na 16 16 | 00650c | ca          |                 dex                  
1693:000 | DONE ins | na 16 16 | 00650d | ca          |                 dex                  
1694:000 | DONE ins | na 16 16 | 00650e | 94 00       |                 sty.dx 00            
1695:000 | DONE ins | na 16 16 | 006510 | a0 14 02    |                 ldy.# 000214         
1696:000 | DONE wsp | na 16 16 |        |             |
1697:000 | DONE lbl | na 16 16 | 006513 |             | z_state                              
1697:001 | DONE ins | na 16 16 | 006513 | 60          |                 rts                  
1698:000 | DONE wsp | na 16 16 |        |             |
1699:000 | DONE wsp | na 16 16 |        |             |
1700:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1701:000 | DONE cmt | na 16 16 |        |             | ; SWAP ( n m -- m n ) 5 bytes / 12 cycles
1702:000 | DONE cmt | na 16 16 |        |             | ; Exchange TOS with NOS. We don't check if there are enough elements on the Data
1703:000 | DONE cmt | na 16 16 |        |             | ; Stack; underflow errors will go undetected and return garbage.
1704:000 | DONE lbl | na 16 16 | 006514 |             | xt_swap                              
1705:000 | DONE dir | na 16 16 |        |             |         .!a16                        
1706:000 | DONE dir | na 16 16 |        |             |         .!xy16                       
1707:000 | DONE ins | na 16 16 | 006514 | b5 00       |                 lda.dx 00            
1708:000 | DONE ins | na 16 16 | 006516 | 94 00       |                 sty.dx 00            
1709:000 | DONE ins | na 16 16 | 006518 | a8          |                 tay                  
1710:000 | DONE wsp | na 16 16 |        |             |
1711:000 | DONE lbl | na 16 16 | 006519 |             | z_swap                               
1711:001 | DONE ins | na 16 16 | 006519 | 60          |                 rts                  
1712:000 | DONE wsp | na 16 16 |        |             |
1713:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1714:000 | DONE cmt | na 16 16 |        |             | ; TRUE ( -- f ) 7 bytes / 12 cycles
1715:000 | DONE cmt | na 16 16 |        |             | ; Pushes value $FFFF for Forth true on Data Stack
1716:000 | DONE lbl | na 16 16 | 00651a |             | xt_true                              
1717:000 | DONE dir | na 16 16 |        |             |         .!a16                        
1718:000 | DONE dir | na 16 16 |        |             |         .!xy16                       
1719:000 | DONE ins | na 16 16 | 00651a | ca          |                 dex                  
1720:000 | DONE ins | na 16 16 | 00651b | ca          |                 dex                  
1721:000 | DONE ins | na 16 16 | 00651c | 94 00       |                 sty.dx 00            
1722:000 | DONE ins | na 16 16 | 00651e | a0 ff ff    |                 ldy.# 0ffff          
1723:000 | DONE wsp | na 16 16 |        |             |
1724:000 | DONE lbl | na 16 16 | 006521 |             | z_true                               
1724:001 | DONE ins | na 16 16 | 006521 | 60          |                 rts                  
1725:000 | DONE wsp | na 16 16 |        |             |
1726:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1727:000 | DONE cmt | na 16 16 |        |             | ; TUCK ( n m -- m n m ) 8 bytes / 19 cycles
1728:000 | DONE cmt | na 16 16 |        |             | ; Insert TOS below NOS. We do not check if there are enough elements on the Data
1729:000 | DONE cmt | na 16 16 |        |             | ; Stack, underflow will go undetected and return garbage.
1730:000 | DONE lbl | na 16 16 | 006522 |             | xt_tuck                              
1731:000 | DONE dir | na 16 16 |        |             |         .!a16                        
1732:000 | DONE dir | na 16 16 |        |             |         .!xy16                       
1733:000 | DONE ins | na 16 16 | 006522 | ca          |                 dex                  
1734:000 | DONE ins | na 16 16 | 006523 | ca          |                 dex                  
1735:000 | DONE ins | na 16 16 | 006524 | b5 02       |                 lda.dx 2             
1736:000 | DONE ins | na 16 16 | 006526 | 95 00       |                 sta.dx 0             
1737:000 | DONE ins | na 16 16 | 006528 | 94 02       |                 sty.dx 2             
1738:000 | DONE wsp | na 16 16 |        |             |
1739:000 | DONE lbl | na 16 16 | 00652a |             | z_tuck                               
1739:001 | DONE ins | na 16 16 | 00652a | 60          |                 rts                  
1740:000 | DONE wsp | na 16 16 |        |             |
1741:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1742:000 | DONE cmt | na 16 16 |        |             | ; TYPE ( addr u -- ) 23+ bytes / X cycles
1743:000 | DONE cmt | na 16 16 |        |             | ; Print character string if u is not 0. We restrict all calls to put_chr and
1744:000 | DONE cmt | na 16 16 |        |             | ; get_chr to make porting easier.  We call put_chr here directly instead of
1745:000 | DONE cmt | na 16 16 |        |             | ; going through EMIT because EMIT will later have a PAUSE statement for
1746:000 | DONE cmt | na 16 16 |        |             | ; multitasking and we probably don't want to PAUSE after every character.
1747:000 | DONE cmt | na 16 16 |        |             | ; However, we'll make a final decision about that when multitasking is up and
1748:000 | DONE cmt | na 16 16 |        |             | ; running.
1749:000 | DONE lbl | na 16 16 | 00652b |             | xt_type                              
1750:000 | DONE dir | na 16 16 |        |             |         .!a16                        
1751:000 | DONE dir | na 16 16 |        |             |         .!xy16                       
1752:000 | DONE cmt | na 16 16 |        |             |                 ; just leave if u is zero (empty string)
1753:000 | DONE ins | na 16 16 | 00652b | 98          |                 tya                  ; force flag check of TOS
1754:000 | DONE ins | na 16 16 | 00652c | f0 17       |                 beq 006545           
1755:000 | DONE wsp | na 16 16 |        |             |
1756:000 | DONE ins | na 16 16 | 00652e | b5 00       |                 lda.dx 00            ; get address from NOS
1757:000 | DONE ins | na 16 16 | 006530 | 85 16       |                 sta.d 000216         
1758:000 | DONE ins | na 16 16 | 006532 | 84 18       |                 sty.d 000218         ; number of chars is TOS
1759:000 | DONE ins | na 16 16 | 006534 | a0 00 00    |                 ldy.# 0000           
1760:000 | DONE ins | na 16 16 | 006537 | e2 20       |                 sep 20               
1760:001 | DONE ctl | na  8 16 |        |             |         .!a8
1761:000 | DONE lbl | na  8 16 | 006539 |             | type_loop                            
1762:000 | DONE ins | na  8 16 | 006539 | b1 16       |                 lda.diy 000216       ; LDA (TMP1),Y
1763:000 | DONE ins | na  8 16 | 00653b | 20 30 60    |                 jsr 006030           
1764:000 | DONE ins | na  8 16 | 00653e | c8          |                 iny                  
1765:000 | DONE ins | na  8 16 | 00653f | c4 18       |                 cpy.d 000218         
1766:000 | DONE ins | na  8 16 | 006541 | d0 f6       |                 bne 006539           
1767:000 | DONE wsp | na  8 16 |        |             |
1768:000 | DONE ins | na  8 16 | 006543 | c2 20       |                 rep 20               
1768:001 | DONE ctl | na 16 16 |        |             |         .!a16
1769:000 | DONE lbl | na 16 16 | 006545 |             | type_done                            
1770:000 | DONE cmt | na 16 16 |        |             |                 ; clear stack
1771:000 | DONE ins | na 16 16 | 006545 | b4 02       |                 ldy.dx 02            
1772:000 | DONE ins | na 16 16 | 006547 | e8          |                 inx                  
1773:000 | DONE ins | na 16 16 | 006548 | e8          |                 inx                  
1774:000 | DONE ins | na 16 16 | 006549 | e8          |                 inx                  
1775:000 | DONE ins | na 16 16 | 00654a | e8          |                 inx                  
1776:000 | DONE wsp | na 16 16 |        |             |
1777:000 | DONE cmt | na 16 16 |        |             |                 ; TODO LATER add PAUSE here for multitasking
1778:000 | DONE wsp | na 16 16 |        |             |
1779:000 | DONE lbl | na 16 16 | 00654b |             | z_type                               
1779:001 | DONE ins | na 16 16 | 00654b | 60          |                 rts                  
1780:000 | DONE wsp | na 16 16 |        |             |
1781:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1782:000 | DONE cmt | na 16 16 |        |             | ; UNUSED ( -- u ) 11 bytes / X cycles
1783:000 | DONE cmt | na 16 16 |        |             | ; Return amount of memory available for the Dictionary. Does not include
1784:000 | DONE cmt | na 16 16 |        |             | ; memory for buffers, stacks etc. Does not exclude the space used by PAD
1785:000 | DONE cmt | na 16 16 |        |             | ; TODO rewrite for multitasking
1786:000 | DONE lbl | na 16 16 | 00654c |             | xt_unused                            
1787:000 | DONE dir | na 16 16 |        |             |         .!a16                        
1788:000 | DONE ins | na 16 16 | 00654c | a9 ff 7b    |                 lda.# 007bff         
1789:000 | DONE ins | na 16 16 | 00654f | 38          |                 sec                  
1790:000 | DONE ins | na 16 16 | 006550 | e5 00       |                 sbc.d 000200         ; current compile pointer
1791:000 | DONE wsp | na 16 16 |        |             |
1792:000 | DONE ins | na 16 16 | 006552 | ca          |                 dex                  
1793:000 | DONE ins | na 16 16 | 006553 | ca          |                 dex                  
1794:000 | DONE ins | na 16 16 | 006554 | 94 00       |                 sty.dx 00            
1795:000 | DONE wsp | na 16 16 |        |             |
1796:000 | DONE ins | na 16 16 | 006556 | a8          |                 tay                  
1797:000 | DONE wsp | na 16 16 |        |             |
1798:000 | DONE lbl | na 16 16 | 006557 |             | z_unused                             
1798:001 | DONE ins | na 16 16 | 006557 | 60          |                 rts                  
1799:000 | DONE wsp | na 16 16 |        |             |
1800:000 | DONE wsp | na 16 16 |        |             |
1801:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1802:000 | DONE cmt | na 16 16 |        |             | ; VARIABLE ( "name" -- ) X bytes / X cycles
1803:000 | DONE cmt | na 16 16 |        |             | ; Define a word that returns the address for a variable. There are various Forth
1804:000 | DONE cmt | na 16 16 |        |             | ; definitions for this word, such as  CREATE 1 CELLS ALLOT  or CREATE 0 ,
1805:000 | DONE cmt | na 16 16 |        |             | ; We use a variant of the second one so the variable is initialized to zero
1806:000 | DONE lbl | na 16 16 | 006558 |             | xt_variable                          
1807:000 | DONE cmt | na 16 16 |        |             |                 ; We let CREATE do most of the heavy lifting
1808:000 | DONE ins | na 16 16 | 006558 | 20 4c 62    |                 jsr 00624c           
1809:000 | DONE wsp | na 16 16 |        |             |
1810:000 | DONE cmt | na 16 16 |        |             |                 ; There is no "stz.di cp" so we have to do this the
1811:000 | DONE cmt | na 16 16 |        |             |                 ; old way, which is still faster than a subroutine jump to ZERO
1812:000 | DONE ins | na 16 16 | 00655b | a9 00 00    |                 lda.# 0000           
1813:000 | DONE ins | na 16 16 | 00655e | 92 00       |                 sta.di 000200        ; STA (CP)
1814:000 | DONE wsp | na 16 16 |        |             |
1815:000 | DONE ins | na 16 16 | 006560 | e6 00       |                 inc.d 000200         ; direct COMMA
1816:000 | DONE ins | na 16 16 | 006562 | e6 00       |                 inc.d 000200         
1817:000 | DONE wsp | na 16 16 |        |             |
1818:000 | DONE lbl | na 16 16 | 006564 |             | z_variable                           
1818:001 | DONE ins | na 16 16 | 006564 | 60          |                 rts                  
1819:000 | DONE wsp | na 16 16 |        |             |
1820:000 | DONE wsp | na 16 16 |        |             |
1821:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1822:000 | DONE cmt | na 16 16 |        |             | ; WORDS ( -- ) X bytes / X cycles
1823:000 | DONE cmt | na 16 16 |        |             | ; Print list of all Forth words available. This only really makes sense in an
1824:000 | DONE cmt | na 16 16 |        |             | ; interactive setting, so we don't have to worry about speed.
1825:000 | DONE lbl | na 16 16 | 006565 |             | xt_words                             
1826:000 | DONE ins | na 16 16 | 006565 | 20 45 62    |                 jsr 006245           ; start on next line, this is a style choice
1827:000 | DONE wsp | na 16 16 |        |             |
1828:000 | DONE ins | na 16 16 | 006568 | a5 02       |                 lda.d 000202         ; nt of first entry in Dictionary (last added)
1829:000 | DONE ins | na 16 16 | 00656a | 48          |                 pha                  
1830:000 | DONE wsp | na 16 16 |        |             |
1831:000 | DONE ins | na 16 16 | 00656b | ca          |                 dex                  ; create room on TOS
1832:000 | DONE ins | na 16 16 | 00656c | ca          |                 dex                  
1833:000 | DONE ins | na 16 16 | 00656d | 94 00       |                 sty.dx 00            
1834:000 | DONE wsp | na 16 16 |        |             |
1835:000 | DONE lbl | na 16 16 | 00656f |             | words_loop                           
1836:000 | DONE ins | na 16 16 | 00656f | a8          |                 tay                  ; ( nt )
1837:000 | DONE wsp | na 16 16 |        |             |
1838:000 | DONE ins | na 16 16 | 006570 | 20 0f 64    |                 jsr 00640f           ; ( nt -- addr u )
1839:000 | DONE ins | na 16 16 | 006573 | 20 2b 65    |                 jsr 00652b           ; ( addr u -- )
1840:000 | DONE ins | na 16 16 | 006576 | 20 f8 64    |                 jsr 0064f8           
1841:000 | DONE dir | na 16 16 |        |             |         .!a16                        
1842:000 | DONE dir | na 16 16 |        |             |         .!xy16                       
1843:000 | DONE ins | na 16 16 | 006579 | 68          |                 pla                  
1844:000 | DONE wsp | na 16 16 |        |             |
1845:000 | DONE cmt | na 16 16 |        |             |                 ; the next nt is two bytes below the nt of the current one in
1846:000 | DONE cmt | na 16 16 |        |             |                 ; the Dictionary header
1847:000 | DONE cmt | na 16 16 |        |             |                 ;
1848:000 | DONE ins | na 16 16 | 00657a | 1a          |                 inc.a                
1849:000 | DONE ins | na 16 16 | 00657b | 1a          |                 inc.a                
1850:000 | DONE wsp | na 16 16 |        |             |
1851:000 | DONE ins | na 16 16 | 00657c | ca          |                 dex                  
1852:000 | DONE ins | na 16 16 | 00657d | ca          |                 dex                  
1853:000 | DONE ins | na 16 16 | 00657e | 94 00       |                 sty.dx 00            
1854:000 | DONE wsp | na 16 16 |        |             |
1855:000 | DONE ins | na 16 16 | 006580 | a8          |                 tay                  
1856:000 | DONE ins | na 16 16 | 006581 | b9 00 00    |                 lda.y 0000           ; LDA $0000,Y
1857:000 | DONE ins | na 16 16 | 006584 | 48          |                 pha                  
1858:000 | DONE ins | na 16 16 | 006585 | d0 e8       |                 bne 00656f           ; zero entry signals end of Dictionary
1859:000 | DONE wsp | na 16 16 |        |             |
1860:000 | DONE cmt | na 16 16 |        |             |                 ; all done, clean up
1861:000 | DONE ins | na 16 16 | 006587 | 68          |                 pla                  ; balance MPU stack, value discarded
1862:000 | DONE wsp | na 16 16 |        |             |
1863:000 | DONE ins | na 16 16 | 006588 | b4 00       |                 ldy.dx 00            
1864:000 | DONE ins | na 16 16 | 00658a | e8          |                 inx                  
1865:000 | DONE ins | na 16 16 | 00658b | e8          |                 inx                  
1866:000 | DONE wsp | na 16 16 |        |             |
1867:000 | DONE lbl | na 16 16 | 00658c |             | z_words                              
1867:001 | DONE ins | na 16 16 | 00658c | 60          |                 rts                  
1868:000 | DONE wsp | na 16 16 |        |             |
1869:000 | DONE wsp | na 16 16 |        |             |
1870:000 | DONE wsp | na 16 16 |        |             |
1871:000 | DONE cmt | na 16 16 |        |             | ; ===================================================================
1872:000 | DONE cmt | na 16 16 |        |             | ; MIDDLE INCLUDES
1873:000 | DONE wsp | na 16 16 |        |             |
1874:000 | DONE cmt | na 16 16 |        |             | ; Dictionary Headers for Liara Forth for the W65C265SXB
1874:001 | DONE cmt | na 16 16 |        |             | ; Scot W. Stevenson <scot.stevenson@gmail.com>
1874:002 | DONE cmt | na 16 16 |        |             | ; First version: 05. Dec 2016
1874:003 | DONE cmt | na 16 16 |        |             | ; This version: 14. Feb 2017
1874:004 | DONE wsp | na 16 16 |        |             |
1874:005 | DONE cmt | na 16 16 |        |             | ; Dictionary headers are kept separately from the code, which allows various
1874:006 | DONE cmt | na 16 16 |        |             | ; tricks in the code. We roughly follow the Gforth terminology: The Execution
1874:007 | DONE cmt | na 16 16 |        |             | ; Token (xt) is the address of the first byte of a word's code that can be,
1874:008 | DONE cmt | na 16 16 |        |             | ; well, executed; the Name Token (nt) is a pointer to the beginning of the
1874:009 | DONE cmt | na 16 16 |        |             | ; word's header in the Dictionary. There, the link to the next word in the
1874:010 | DONE cmt | na 16 16 |        |             | ; Dictionary is always one cell down from the current word's own nt. In the code
1874:011 | DONE cmt | na 16 16 |        |             | ; itself, we use "nt_<WORD>" ("header") for the nt and "xt_<WORD>" ("A" as the
1874:012 | DONE cmt | na 16 16 |        |             | ; beginning) for the xt.
1874:013 | DONE cmt | na 16 16 |        |             | ;
1874:014 | DONE cmt | na 16 16 |        |             | ; This gives us the following header structure:
1874:015 | DONE cmt | na 16 16 |        |             | ;
1874:016 | DONE cmt | na 16 16 |        |             | ;              8 bit     8 bit
1874:017 | DONE cmt | na 16 16 |        |             | ;               LSB       MSB
1874:018 | DONE cmt | na 16 16 |        |             | ; nt_word ->  +--------+--------+
1874:019 | DONE cmt | na 16 16 |        |             | ;             | Length | Status |
1874:020 | DONE cmt | na 16 16 |        |             | ;          +2 +--------+--------+
1874:021 | DONE cmt | na 16 16 |        |             | ;             | Next Header     | -> nt_next_word
1874:022 | DONE cmt | na 16 16 |        |             | ;          +4 +-----------------+
1874:023 | DONE cmt | na 16 16 |        |             | ;             | Start of Code   | -> xt_word
1874:024 | DONE cmt | na 16 16 |        |             | ;          +6 +-----------------+
1874:025 | DONE cmt | na 16 16 |        |             | ;             | End of Code     | -> z_word
1874:026 | DONE cmt | na 16 16 |        |             | ;          +8 +--------+--------+
1874:027 | DONE cmt | na 16 16 |        |             | ;             | Name   |        |
1874:028 | DONE cmt | na 16 16 |        |             | ;             +--------+--------+
1874:029 | DONE cmt | na 16 16 |        |             | ;             |        |        |
1874:030 | DONE cmt | na 16 16 |        |             | ;             +--------+--------+
1874:031 | DONE cmt | na 16 16 |        |             | ;             |        |  ...   | (name string does not end with a zero)
1874:032 | DONE cmt | na 16 16 |        |             | ;          +n +--------+--------+
1874:033 | DONE wsp | na 16 16 |        |             |
1874:034 | DONE cmt | na 16 16 |        |             | ; Status bytes are created by adding dictionary flags defined in
1874:035 | DONE cmt | na 16 16 |        |             | ; definitions.tasm:
1874:036 | DONE cmt | na 16 16 |        |             | ;
1874:037 | DONE cmt | na 16 16 |        |             | ;       PW - Primitive Word (natively coded)
1874:038 | DONE cmt | na 16 16 |        |             | ;       CO - Compile Only
1874:039 | DONE cmt | na 16 16 |        |             | ;       IM - Immediate Word
1874:040 | DONE cmt | na 16 16 |        |             | ;       NC - Native Compile (inline compile)
1874:041 | DONE wsp | na 16 16 |        |             |
1874:042 | DONE cmt | na 16 16 |        |             | ; The last word (top word in code) is always BYE, signaled to FIND by a 0000 in
1874:043 | DONE cmt | na 16 16 |        |             | ; the link to the Next Word field. The words are sorted with the more common
1874:044 | DONE cmt | na 16 16 |        |             | ; ones first (further down in code) and the output words later (further up)
1874:045 | DONE cmt | na 16 16 |        |             | ; because things will always be slow if there is a human involved.
1874:046 | DONE wsp | na 16 16 |        |             |
1874:047 | DONE lbl | na 16 16 | 00658d |             | nt_bye                               
1874:048 | DONE dir | na 16 16 | 00658d | (1 bytes)   |         .byte 03                     ; length of word string
1874:048 | DONE dir | na 16 16 |        |             |                 03                       --  .
1874:049 | DONE dir | na 16 16 | 00658e | (1 bytes)   |         .byte { PW + NC }            ; status byte
1874:049 | DONE dir | na 16 16 |        |             |                 90                       --  .
1874:050 | DONE dir | na 16 16 | 00658f | (2 bytes)   |         .word 0000                   ; next word in dictionary, 0000 signals end
1874:050 | DONE dir | na 16 16 |        |             |                 00 00                    --  . .
1874:051 | DONE dir | na 16 16 | 006591 | (2 bytes)   |         .word 00621c                 ; start of code, the xt of this word
1874:051 | DONE dir | na 16 16 |        |             |                 1c 62                    --  . b
1874:052 | DONE dir | na 16 16 | 006593 | (2 bytes)   |         .word 00621f                 ; end of code (points to RTS)
1874:052 | DONE dir | na 16 16 |        |             |                 1f 62                    --  . b
1874:053 | DONE dir | na 16 16 | 006595 | (3 bytes)   |         .byte 62, 79, 65             ; word name, always lower case
1874:053 | DONE dir | na 16 16 |        |             |                 62 79 65                 --  b y e
1874:054 | DONE wsp | na 16 16 |        |             |
1874:055 | DONE lbl | na 16 16 | 006598 |             | nt_cold                              
1874:056 | DONE dir | na 16 16 | 006598 | (2 bytes)   |         .byte 4, 00                  
1874:056 | DONE dir | na 16 16 |        |             |                 04 00                    --  . .
1874:057 | DONE dir | na 16 16 | 00659a | (6 bytes)   |         .word nt_bye, xt_cold, 0060d2 
1874:057 | DONE dir | na 16 16 |        |             |                 8d 65 5d 60 d2 60        --  . e ] ` . `
1874:058 | DONE dir | na 16 16 | 0065a0 | (4 bytes)   |         .byte 63, 6f, 6c, 64         
1874:058 | DONE dir | na 16 16 |        |             |                 63 6f 6c 64              --  c o l d
1874:059 | DONE wsp | na 16 16 |        |             |
1874:060 | DONE lbl | na 16 16 | 0065a4 |             | nt_words                             
1874:061 | DONE dir | na 16 16 | 0065a4 | (2 bytes)   |         .byte 5, { PW + NC }         
1874:061 | DONE dir | na 16 16 |        |             |                 05 90                    --  . .
1874:062 | DONE dir | na 16 16 | 0065a6 | (6 bytes)   |         .word nt_cold, xt_words, 00658c 
1874:062 | DONE dir | na 16 16 |        |             |                 98 65 65 65 8c 65        --  . e e e . e
1874:063 | DONE dir | na 16 16 | 0065ac | (5 bytes)   |         .byte 77, 6f, 72, 64, 73     
1874:063 | DONE dir | na 16 16 |        |             |                 77 6f 72 64 73           --  w o r d s
1874:064 | DONE wsp | na 16 16 |        |             |
1874:065 | DONE lbl | na 16 16 | 0065b1 |             | nt_dump                              
1874:066 | DONE dir | na 16 16 | 0065b1 | (2 bytes)   |         .byte 4, { PW + NC }         
1874:066 | DONE dir | na 16 16 |        |             |                 04 90                    --  . .
1874:067 | DONE dir | na 16 16 | 0065b3 | (6 bytes)   |         .word nt_words, xt_dump, 006365 
1874:067 | DONE dir | na 16 16 |        |             |                 a4 65 3f 63 65 63        --  . e ? c e c
1874:068 | DONE dir | na 16 16 | 0065b9 | (4 bytes)   |         .byte 64, 75, 6d, 70         
1874:068 | DONE dir | na 16 16 |        |             |                 64 75 6d 70              --  d u m p
1874:069 | DONE wsp | na 16 16 |        |             |
1874:070 | DONE lbl | na 16 16 | 0065bd |             | nt_bell                              
1874:071 | DONE dir | na 16 16 | 0065bd | (2 bytes)   |         .byte 4, { PW + NC }         
1874:071 | DONE dir | na 16 16 |        |             |                 04 90                    --  . .
1874:072 | DONE dir | na 16 16 | 0065bf | (6 bytes)   |         .word nt_dump, xt_bell, 006213 
1874:072 | DONE dir | na 16 16 |        |             |                 b1 65 0d 62 13 62        --  . e  b . b
1874:073 | DONE dir | na 16 16 | 0065c5 | (4 bytes)   |         .byte 62, 65, 6c, 6c         
1874:073 | DONE dir | na 16 16 |        |             |                 62 65 6c 6c              --  b e l l
1874:074 | DONE wsp | na 16 16 |        |             |
1874:075 | DONE lbl | na 16 16 | 0065c9 |             | nt_unused                            
1874:076 | DONE dir | na 16 16 | 0065c9 | (2 bytes)   |         .byte 6, { PW + NC }         
1874:076 | DONE dir | na 16 16 |        |             |                 06 90                    --  . .
1874:077 | DONE dir | na 16 16 | 0065cb | (6 bytes)   |         .word nt_bell, xt_unused, 006557 
1874:077 | DONE dir | na 16 16 |        |             |                 bd 65 4c 65 57 65        --  . e L e W e
1874:078 | DONE dir | na 16 16 | 0065d1 | (6 bytes)   |         .byte 75, 6e, 75, 73, 65, 64 
1874:078 | DONE dir | na 16 16 |        |             |                 75 6e 75 73 65 64        --  u n u s e d
1874:079 | DONE wsp | na 16 16 |        |             |
1874:080 | DONE lbl | na 16 16 | 0065d7 |             | nt_page                              
1874:081 | DONE dir | na 16 16 | 0065d7 | (2 bytes)   |         .byte 4, { PW + NC }         
1874:081 | DONE dir | na 16 16 |        |             |                 04 90                    --  . .
1874:082 | DONE dir | na 16 16 | 0065d9 | (6 bytes)   |         .word nt_unused, xt_page, 006442 
1874:082 | DONE dir | na 16 16 |        |             |                 c9 65 36 64 42 64        --  . e 6 d B d
1874:083 | DONE dir | na 16 16 | 0065df | (4 bytes)   |         .byte 70, 61, 67, 65         
1874:083 | DONE dir | na 16 16 |        |             |                 70 61 67 65              --  p a g e
1874:084 | DONE wsp | na 16 16 |        |             |
1874:085 | DONE lbl | na 16 16 | 0065e3 |             | nt_count                             
1874:086 | DONE dir | na 16 16 | 0065e3 | (2 bytes)   |         .byte 5, {NC + PW }          
1874:086 | DONE dir | na 16 16 |        |             |                 05 90                    --  . .
1874:087 | DONE dir | na 16 16 | 0065e5 | (6 bytes)   |         .word nt_page, xt_count, 006244 
1874:087 | DONE dir | na 16 16 |        |             |                 d7 65 36 62 44 62        --  . e 6 b D b
1874:088 | DONE dir | na 16 16 | 0065eb | (5 bytes)   |         .byte 63, 6f, 75, 6e, 74     
1874:088 | DONE dir | na 16 16 |        |             |                 63 6f 75 6e 74           --  c o u n t
1874:089 | DONE wsp | na 16 16 |        |             |
1874:090 | DONE lbl | na 16 16 | 0065f0 |             | nt_abort                             
1874:091 | DONE dir | na 16 16 | 0065f0 | (2 bytes)   |         .byte 5, 00                  ; TODO check flags
1874:091 | DONE dir | na 16 16 |        |             |                 05 00                    --  . .
1874:092 | DONE dir | na 16 16 | 0065f2 | (6 bytes)   |         .word nt_count, xt_abort, 0060d2 
1874:092 | DONE dir | na 16 16 |        |             |                 e3 65 94 60 d2 60        --  . e . ` . `
1874:093 | DONE dir | na 16 16 | 0065f8 | (5 bytes)   |         .byte 61, 62, 6f, 72, 74     
1874:093 | DONE dir | na 16 16 |        |             |                 61 62 6f 72 74           --  a b o r t
1874:094 | DONE wsp | na 16 16 |        |             |
1874:095 | DONE lbl | na 16 16 | 0065fd |             | nt_parse                             
1874:096 | DONE dir | na 16 16 | 0065fd | (2 bytes)   |         .byte 5, 00                  
1874:096 | DONE dir | na 16 16 |        |             |                 05 00                    --  . .
1874:097 | DONE dir | na 16 16 | 0065ff | (6 bytes)   |         .word nt_abort, xt_parse, 0064a7 
1874:097 | DONE dir | na 16 16 |        |             |                 f0 65 75 64 a7 64        --  . e u d . d
1874:098 | DONE dir | na 16 16 | 006605 | (5 bytes)   |         .byte 70, 61, 72, 73, 65     
1874:098 | DONE dir | na 16 16 |        |             |                 70 61 72 73 65           --  p a r s e
1874:099 | DONE wsp | na 16 16 |        |             |
1874:100 | DONE lbl | na 16 16 | 00660a |             | nt_quit                              
1874:101 | DONE dir | na 16 16 | 00660a | (2 bytes)   |         .byte 4, 00                  
1874:101 | DONE dir | na 16 16 |        |             |                 04 00                    --  . .
1874:102 | DONE dir | na 16 16 | 00660c | (6 bytes)   |         .word nt_parse, xt_quit, 0060d2 
1874:102 | DONE dir | na 16 16 |        |             |                 fd 65 9c 60 d2 60        --  . e . ` . `
1874:103 | DONE dir | na 16 16 | 006612 | (4 bytes)   |         .byte 71, 75, 69, 74         
1874:103 | DONE dir | na 16 16 |        |             |                 71 75 69 74              --  q u i t
1874:104 | DONE wsp | na 16 16 |        |             |
1874:105 | DONE lbl | na 16 16 | 006616 |             | nt_name-int                          
1874:106 | DONE dir | na 16 16 | 006616 | (2 bytes)   |         .byte 8, { PW + NC }         
1874:106 | DONE dir | na 16 16 |        |             |                 08 90                    --  . .
1874:107 | DONE dir | na 16 16 | 006618 | (6 bytes)   |         .word nt_quit, xt_name-int, 00640e 
1874:107 | DONE dir | na 16 16 |        |             |                 0a 66 06 64 0e 64        --  
 f . d . d
1874:108 | DONE dir | na 16 16 | 00661e | (8 bytes)   |         .byte 6e, 61, 6d, 65, 3e, 69, 6e, 74 
1874:108 | DONE dir | na 16 16 |        |             |                 6e 61 6d 65 3e 69 6e 74  --  n a m e > i n t
1874:108 | DONE dir | na 16 16 |        |             |                                          -- 
1874:109 | DONE wsp | na 16 16 |        |             |
1874:110 | DONE lbl | na 16 16 | 006626 |             | nt_cr                                
1874:111 | DONE dir | na 16 16 | 006626 | (2 bytes)   |         .byte 2, { PW + NC }         
1874:111 | DONE dir | na 16 16 |        |             |                 02 90                    --  . .
1874:112 | DONE dir | na 16 16 | 006628 | (6 bytes)   |         .word nt_name-int, xt_cr, 00624b 
1874:112 | DONE dir | na 16 16 |        |             |                 16 66 45 62 4b 62        --  . f E b K b
1874:113 | DONE dir | na 16 16 | 00662e | (2 bytes)   |         .byte 63, 72                 
1874:113 | DONE dir | na 16 16 |        |             |                 63 72                    --  c r
1874:114 | DONE wsp | na 16 16 |        |             |
1874:115 | DONE lbl | na 16 16 | 006630 |             | nt_bl                                
1874:116 | DONE dir | na 16 16 | 006630 | (2 bytes)   |         .byte 2, { PW + NC }         
1874:116 | DONE dir | na 16 16 |        |             |                 02 90                    --  . .
1874:117 | DONE dir | na 16 16 | 006632 | (6 bytes)   |         .word nt_cr, xt_bl, 00621b   
1874:117 | DONE dir | na 16 16 |        |             |                 26 66 14 62 1b 62        --  & f . b . b
1874:118 | DONE dir | na 16 16 | 006638 | (2 bytes)   |         .byte 62, 6c                 
1874:118 | DONE dir | na 16 16 |        |             |                 62 6c                    --  b l
1874:119 | DONE wsp | na 16 16 |        |             |
1874:120 | DONE lbl | na 16 16 | 00663a |             | nt_spaces                            
1874:121 | DONE dir | na 16 16 | 00663a | (2 bytes)   |         .byte 6, { PW + NC }         
1874:121 | DONE dir | na 16 16 |        |             |                 06 90                    --  . .
1874:122 | DONE dir | na 16 16 | 00663c | (6 bytes)   |         .word nt_bl, xt_spaces, 00650b 
1874:122 | DONE dir | na 16 16 |        |             |                 30 66 ff 64 0b 65        --  0 f . d  e
1874:123 | DONE dir | na 16 16 | 006642 | (6 bytes)   |         .byte 73, 70, 61, 63, 65, 73 
1874:123 | DONE dir | na 16 16 |        |             |                 73 70 61 63 65 73        --  s p a c e s
1874:124 | DONE wsp | na 16 16 |        |             |
1874:125 | DONE lbl | na 16 16 | 006648 |             | nt_space                             
1874:126 | DONE dir | na 16 16 | 006648 | (2 bytes)   |         .byte 5, { PW + NC }         
1874:126 | DONE dir | na 16 16 |        |             |                 05 90                    --  . .
1874:127 | DONE dir | na 16 16 | 00664a | (6 bytes)   |         .word nt_spaces, xt_space, 0064fe 
1874:127 | DONE dir | na 16 16 |        |             |                 3a 66 f8 64 fe 64        --  : f . d . d
1874:128 | DONE dir | na 16 16 | 006650 | (5 bytes)   |         .byte 73, 70, 61, 63, 65     
1874:128 | DONE dir | na 16 16 |        |             |                 73 70 61 63 65           --  s p a c e
1874:129 | DONE wsp | na 16 16 |        |             |
1874:130 | DONE lbl | na 16 16 | 006655 |             | nt_dots                              
1874:131 | DONE dir | na 16 16 | 006655 | (2 bytes)   |         .byte 2, { PW + NC }         
1874:131 | DONE dir | na 16 16 |        |             |                 02 90                    --  . .
1874:132 | DONE dir | na 16 16 | 006657 | (6 bytes)   |         .word nt_space, xt_dots, 006339 
1874:132 | DONE dir | na 16 16 |        |             |                 48 66 f2 62 39 63        --  H f . b 9 c
1874:133 | DONE dir | na 16 16 | 00665d | (2 bytes)   |         .byte 2e, 73                 
1874:133 | DONE dir | na 16 16 |        |             |                 2e 73                    --  . s
1874:134 | DONE wsp | na 16 16 |        |             |
1874:135 | DONE lbl | na 16 16 | 00665f |             | nt_dotparen                          
1874:136 | DONE dir | na 16 16 | 00665f | (2 bytes)   |         .byte 2, { IM + NC}          
1874:136 | DONE dir | na 16 16 |        |             |                 02 30                    --  . 0
1874:137 | DONE dir | na 16 16 | 006661 | (6 bytes)   |         .word nt_dots, xt_dotparen, 0062f1 
1874:137 | DONE dir | na 16 16 |        |             |                 55 66 e4 62 f1 62        --  U f . b . b
1874:138 | DONE dir | na 16 16 | 006667 | (2 bytes)   |         .byte 2e, 28                 
1874:138 | DONE dir | na 16 16 |        |             |                 2e 28                    --  . (
1874:139 | DONE wsp | na 16 16 |        |             |
1874:140 | DONE lbl | na 16 16 | 006669 |             | nt_type                              
1874:141 | DONE dir | na 16 16 | 006669 | (2 bytes)   |         .byte 4, 0                   
1874:141 | DONE dir | na 16 16 |        |             |                 04 00                    --  . .
1874:142 | DONE dir | na 16 16 | 00666b | (6 bytes)   |         .word nt_dotparen, xt_type, 00654b 
1874:142 | DONE dir | na 16 16 |        |             |                 5f 66 2b 65 4b 65        --  _ f + e K e
1874:143 | DONE dir | na 16 16 | 006671 | (4 bytes)   |         .byte 74, 79, 70, 65         
1874:143 | DONE dir | na 16 16 |        |             |                 74 79 70 65              --  t y p e
1874:144 | DONE wsp | na 16 16 |        |             |
1874:145 | DONE lbl | na 16 16 | 006675 |             | nt_dot                               
1874:146 | DONE dir | na 16 16 | 006675 | (2 bytes)   |         .byte 1, { PW + NC }         
1874:146 | DONE dir | na 16 16 |        |             |                 01 90                    --  . .
1874:147 | DONE dir | na 16 16 | 006677 | (6 bytes)   |         .word nt_type, xt_dot, 0062e3 
1874:147 | DONE dir | na 16 16 |        |             |                 69 66 ce 62 e3 62        --  i f . b . b
1874:148 | DONE dir | na 16 16 | 00667d | (1 bytes)   |         .byte 2e                     
1874:148 | DONE dir | na 16 16 |        |             |                 2e                       --  .
1874:149 | DONE wsp | na 16 16 |        |             |
1874:150 | DONE lbl | na 16 16 | 00667e |             | nt_pad                               
1874:151 | DONE dir | na 16 16 | 00667e | (2 bytes)   |         .byte 3, { PW + NC }         
1874:151 | DONE dir | na 16 16 |        |             |                 03 90                    --  . .
1874:152 | DONE dir | na 16 16 | 006680 | (6 bytes)   |         .word nt_dot, xt_pad, 006435 
1874:152 | DONE dir | na 16 16 |        |             |                 75 66 2a 64 35 64        --  u f * d 5 d
1874:153 | DONE dir | na 16 16 | 006686 | (3 bytes)   |         .byte 70, 61, 64             
1874:153 | DONE dir | na 16 16 |        |             |                 70 61 64                 --  p a d
1874:154 | DONE wsp | na 16 16 |        |             |
1874:155 | DONE lbl | na 16 16 | 006689 |             | nt_evaluate                          
1874:156 | DONE dir | na 16 16 | 006689 | (2 bytes)   |         .byte 8, { PW + NC }         
1874:156 | DONE dir | na 16 16 |        |             |                 08 90                    --  . .
1874:157 | DONE dir | na 16 16 | 00668b | (6 bytes)   |         .word nt_pad, xt_evaluate, 006399 
1874:157 | DONE dir | na 16 16 |        |             |                 7e 66 6b 63 99 63        --  ~ f k c . c
1874:158 | DONE dir | na 16 16 | 006691 | (8 bytes)   |         .byte 65, 76, 61, 6c, 75, 61, 74, 65 
1874:158 | DONE dir | na 16 16 |        |             |                 65 76 61 6c 75 61 74 65  --  e v a l u a t e
1874:158 | DONE dir | na 16 16 |        |             |                                          -- 
1874:159 | DONE wsp | na 16 16 |        |             |
1874:160 | DONE lbl | na 16 16 | 006699 |             | nt_cells                             
1874:161 | DONE dir | na 16 16 | 006699 | (2 bytes)   |         .byte 5, { PW + NC }         ; 2* because we have 16 bit stack
1874:161 | DONE dir | na 16 16 |        |             |                 05 90                    --  . .
1874:162 | DONE dir | na 16 16 | 00669b | (6 bytes)   |         .word nt_evaluate, xt_two-star, 006128 
1874:162 | DONE dir | na 16 16 |        |             |                 89 66 25 61 28 61        --  . f % a ( a
1874:163 | DONE dir | na 16 16 | 0066a1 | (5 bytes)   |         .byte 63, 65, 6c, 6c, 73     
1874:163 | DONE dir | na 16 16 |        |             |                 63 65 6c 6c 73           --  c e l l s
1874:164 | DONE wsp | na 16 16 |        |             |
1874:165 | DONE lbl | na 16 16 | 0066a6 |             | nt_allot                             
1874:166 | DONE dir | na 16 16 | 0066a6 | (2 bytes)   |         .byte 5, { PW + NC }         
1874:166 | DONE dir | na 16 16 |        |             |                 05 90                    --  . .
1874:167 | DONE dir | na 16 16 | 0066a8 | (6 bytes)   |         .word nt_cells, xt_allot, 00620c 
1874:167 | DONE dir | na 16 16 |        |             |                 99 66 e4 61 0c 62        --  . f . a  b
1874:168 | DONE dir | na 16 16 | 0066ae | (5 bytes)   |         .byte 61, 6c, 6c, 6f, 74     
1874:168 | DONE dir | na 16 16 |        |             |                 61 6c 6c 6f 74           --  a l l o t
1874:169 | DONE wsp | na 16 16 |        |             |
1874:170 | DONE lbl | na 16 16 | 0066b3 |             | nt_create                            
1874:171 | DONE dir | na 16 16 | 0066b3 | (2 bytes)   |         .byte 6, { PW + NC }         
1874:171 | DONE dir | na 16 16 |        |             |                 06 90                    --  . .
1874:172 | DONE dir | na 16 16 | 0066b5 | (6 bytes)   |         .word nt_allot, xt_create, 0062be 
1874:172 | DONE dir | na 16 16 |        |             |                 a6 66 4c 62 be 62        --  . f L b . b
1874:173 | DONE dir | na 16 16 | 0066bb | (6 bytes)   |         .byte 63, 72, 65, 61, 74, 65 
1874:173 | DONE dir | na 16 16 |        |             |                 63 72 65 61 74 65        --  c r e a t e
1874:174 | DONE wsp | na 16 16 |        |             |
1874:175 | DONE lbl | na 16 16 | 0066c1 |             | nt_name-string                       
1874:176 | DONE dir | na 16 16 | 0066c1 | (2 bytes)   |         .byte 0b, { PW + NC }        
1874:176 | DONE dir | na 16 16 |        |             |                 0b 90                    --   .
1874:177 | DONE dir | na 16 16 | 0066c3 | (6 bytes)   |         .word nt_create, xt_name-string, 00641f 
1874:177 | DONE dir | na 16 16 |        |             |                 b3 66 0f 64 1f 64        --  . f . d . d
1874:178 | DONE dir | na 16 16 | 0066c9 | (11 bytes)  |         .byte 6e, 61, 6d, 65, 3e, 73, 74, 72, 69, 6e, 67 
1874:178 | DONE dir | na 16 16 |        |             |                 6e 61 6d 65 3e 73 74 72  --  n a m e > s t r
1874:178 | DONE dir | na 16 16 |        |             |                 69 6e 67                 --  i n g
1874:179 | DONE wsp | na 16 16 |        |             |
1874:180 | DONE lbl | na 16 16 | 0066d4 |             | nt_2dup                              
1874:181 | DONE dir | na 16 16 | 0066d4 | (2 bytes)   |         .byte 4, { PW + NC }         
1874:181 | DONE dir | na 16 16 |        |             |                 04 90                    --  . .
1874:182 | DONE dir | na 16 16 | 0066d6 | (6 bytes)   |         .word nt_name-string, xt_2dup, 00613a 
1874:182 | DONE dir | na 16 16 |        |             |                 c1 66 30 61 3a 61        --  . f 0 a : a
1874:183 | DONE dir | na 16 16 | 0066dc | (4 bytes)   |         .byte 32, 64, 75, 70         
1874:183 | DONE dir | na 16 16 |        |             |                 32 64 75 70              --  2 d u p
1874:184 | DONE wsp | na 16 16 |        |             |
1874:185 | DONE lbl | na 16 16 | 0066e0 |             | nt_abs                               
1874:186 | DONE dir | na 16 16 | 0066e0 | (2 bytes)   |         .byte 3, { PW + NC }         
1874:186 | DONE dir | na 16 16 |        |             |                 03 90                    --  . .
1874:187 | DONE dir | na 16 16 | 0066e2 | (6 bytes)   |         .word nt_2dup, xt_abs, 00615f 
1874:187 | DONE dir | na 16 16 |        |             |                 d4 66 57 61 5f 61        --  . f W a _ a
1874:188 | DONE dir | na 16 16 | 0066e8 | (3 bytes)   |         .byte 61, 62, 73             
1874:188 | DONE dir | na 16 16 |        |             |                 61 62 73                 --  a b s
1874:189 | DONE wsp | na 16 16 |        |             |
1874:190 | DONE lbl | na 16 16 | 0066eb |             | nt_state                             
1874:191 | DONE dir | na 16 16 | 0066eb | (2 bytes)   |         .byte 5, { PW + NC }         
1874:191 | DONE dir | na 16 16 |        |             |                 05 90                    --  . .
1874:192 | DONE dir | na 16 16 | 0066ed | (6 bytes)   |         .word nt_abs, xt_state, 006513 
1874:192 | DONE dir | na 16 16 |        |             |                 e0 66 0c 65 13 65        --  . f  e . e
1874:193 | DONE dir | na 16 16 | 0066f3 | (5 bytes)   |         .byte 73, 74, 61, 74, 65     
1874:193 | DONE dir | na 16 16 |        |             |                 73 74 61 74 65           --  s t a t e
1874:194 | DONE wsp | na 16 16 |        |             |
1874:195 | DONE lbl | na 16 16 | 0066f8 |             | nt_to-in                             
1874:196 | DONE dir | na 16 16 | 0066f8 | (2 bytes)   |         .byte 3, { PW + NC }         
1874:196 | DONE dir | na 16 16 |        |             |                 03 90                    --  . .
1874:197 | DONE dir | na 16 16 | 0066fa | (6 bytes)   |         .word nt_state, xt_to-in, 0060da 
1874:197 | DONE dir | na 16 16 |        |             |                 eb 66 d3 60 da 60        --  . f . ` . `
1874:198 | DONE dir | na 16 16 | 006700 | (3 bytes)   |         .byte 3e, 69, 6e             
1874:198 | DONE dir | na 16 16 |        |             |                 3e 69 6e                 --  > i n
1874:199 | DONE wsp | na 16 16 |        |             |
1874:200 | DONE lbl | na 16 16 | 006703 |             | nt_source                            
1874:201 | DONE dir | na 16 16 | 006703 | (2 bytes)   |         .byte 6, { PW + NC }         
1874:201 | DONE dir | na 16 16 |        |             |                 06 90                    --  . .
1874:202 | DONE dir | na 16 16 | 006705 | (6 bytes)   |         .word nt_to-in, xt_source, 0064f0 
1874:202 | DONE dir | na 16 16 |        |             |                 f8 66 e4 64 f0 64        --  . f . d . d
1874:203 | DONE dir | na 16 16 | 00670b | (6 bytes)   |         .byte 73, 6f, 75, 72, 63, 65 
1874:203 | DONE dir | na 16 16 |        |             |                 73 6f 75 72 63 65        --  s o u r c e
1874:204 | DONE wsp | na 16 16 |        |             |
1874:205 | DONE lbl | na 16 16 | 006711 |             | nt_depth                             
1874:206 | DONE dir | na 16 16 | 006711 | (2 bytes)   |         .byte 5, { PW + NC }         
1874:206 | DONE dir | na 16 16 |        |             |                 05 90                    --  . .
1874:207 | DONE dir | na 16 16 | 006713 | (6 bytes)   |         .word nt_source, xt_depth, 0062cd 
1874:207 | DONE dir | na 16 16 |        |             |                 03 67 bf 62 cd 62        --  . g . b . b
1874:208 | DONE dir | na 16 16 | 006719 | (5 bytes)   |         .byte 64, 65, 70, 74, 68     
1874:208 | DONE dir | na 16 16 |        |             |                 64 65 70 74 68           --  d e p t h
1874:209 | DONE wsp | na 16 16 |        |             |
1874:210 | DONE lbl | na 16 16 | 00671e |             | nt_constant                          
1874:211 | DONE dir | na 16 16 | 00671e | (2 bytes)   |         .byte 8, { PW + NC }         
1874:211 | DONE dir | na 16 16 |        |             |                 08 90                    --  . .
1874:212 | DONE dir | na 16 16 | 006720 | (6 bytes)   |         .word nt_depth, xt_constant, 006235 
1874:212 | DONE dir | na 16 16 |        |             |                 11 67 20 62 35 62        --  . g   b 5 b
1874:213 | DONE dir | na 16 16 | 006726 | (8 bytes)   |         .byte 63, 6f, 6e, 73, 74, 61, 6e, 74 
1874:213 | DONE dir | na 16 16 |        |             |                 63 6f 6e 73 74 61 6e 74  --  c o n s t a n t
1874:213 | DONE dir | na 16 16 |        |             |                                          -- 
1874:214 | DONE wsp | na 16 16 |        |             |
1874:215 | DONE lbl | na 16 16 | 00672e |             | nt_variable                          
1874:216 | DONE dir | na 16 16 | 00672e | (2 bytes)   |         .byte 8, { PW + NC }         
1874:216 | DONE dir | na 16 16 |        |             |                 08 90                    --  . .
1874:217 | DONE dir | na 16 16 | 006730 | (6 bytes)   |         .word nt_constant, xt_variable, 006564 
1874:217 | DONE dir | na 16 16 |        |             |                 1e 67 58 65 64 65        --  . g X e d e
1874:218 | DONE dir | na 16 16 | 006736 | (8 bytes)   |         .byte 76, 61, 72, 69, 61, 62, 6c, 65 
1874:218 | DONE dir | na 16 16 |        |             |                 76 61 72 69 61 62 6c 65  --  v a r i a b l e
1874:218 | DONE dir | na 16 16 |        |             |                                          -- 
1874:219 | DONE wsp | na 16 16 |        |             |
1874:220 | DONE lbl | na 16 16 | 00673e |             | nt_tick                              
1874:221 | DONE dir | na 16 16 | 00673e | (2 bytes)   |         .byte 1, { PW + NC }         
1874:221 | DONE dir | na 16 16 |        |             |                 01 90                    --  . .
1874:222 | DONE dir | na 16 16 | 006740 | (6 bytes)   |         .word nt_variable, xt_tick, 006156 
1874:222 | DONE dir | na 16 16 |        |             |                 2e 67 3b 61 56 61        --  . g ; a V a
1874:223 | DONE dir | na 16 16 | 006746 | (1 bytes)   |         .byte 27                     ; hex for "'"
1874:223 | DONE dir | na 16 16 |        |             |                 27                       --  '
1874:224 | DONE wsp | na 16 16 |        |             |
1874:225 | DONE lbl | na 16 16 | 006747 |             | nt_two-star                          
1874:226 | DONE dir | na 16 16 | 006747 | (2 bytes)   |         .byte 2, { PW + NC }         
1874:226 | DONE dir | na 16 16 |        |             |                 02 90                    --  . .
1874:227 | DONE dir | na 16 16 | 006749 | (6 bytes)   |         .word nt_tick, xt_two-star, 006128 
1874:227 | DONE dir | na 16 16 |        |             |                 3e 67 25 61 28 61        --  > g % a ( a
1874:228 | DONE dir | na 16 16 | 00674f | (2 bytes)   |         .byte 32, 2a                 
1874:228 | DONE dir | na 16 16 |        |             |                 32 2a                    --  2 *
1874:229 | DONE wsp | na 16 16 |        |             |
1874:230 | DONE lbl | na 16 16 | 006751 |             | nt_minus                             
1874:231 | DONE dir | na 16 16 | 006751 | (2 bytes)   |         .byte 1, { PW + NC }         
1874:231 | DONE dir | na 16 16 |        |             |                 01 90                    --  . .
1874:232 | DONE dir | na 16 16 | 006753 | (6 bytes)   |         .word nt_two-star, xt_minus, 006108 
1874:232 | DONE dir | na 16 16 |        |             |                 47 67 fe 60 08 61        --  G g . ` . a
1874:233 | DONE dir | na 16 16 | 006759 | (1 bytes)   |         .byte 2d                     
1874:233 | DONE dir | na 16 16 |        |             |                 2d                       --  -
1874:234 | DONE wsp | na 16 16 |        |             |
1874:235 | DONE lbl | na 16 16 | 00675a |             | nt_plus                              
1874:236 | DONE dir | na 16 16 | 00675a | (2 bytes)   |         .byte 1, { PW + NC }         
1874:236 | DONE dir | na 16 16 |        |             |                 01 90                    --  . .
1874:237 | DONE dir | na 16 16 | 00675c | (6 bytes)   |         .word nt_minus, xt_plus, 0060fd 
1874:237 | DONE dir | na 16 16 |        |             |                 51 67 f6 60 fd 60        --  Q g . ` . `
1874:238 | DONE dir | na 16 16 | 006762 | (1 bytes)   |         .byte 2b                     
1874:238 | DONE dir | na 16 16 |        |             |                 2b                       --  +
1874:239 | DONE wsp | na 16 16 |        |             |
1874:240 | DONE lbl | na 16 16 | 006763 |             | nt_one-minus                         
1874:241 | DONE dir | na 16 16 | 006763 | (2 bytes)   |         .byte 2, { PW + NC }         
1874:241 | DONE dir | na 16 16 |        |             |                 02 90                    --  . .
1874:242 | DONE dir | na 16 16 | 006765 | (6 bytes)   |         .word nt_plus, xt_one-minus, 00611a 
1874:242 | DONE dir | na 16 16 |        |             |                 5a 67 19 61 1a 61        --  Z g . a . a
1874:243 | DONE dir | na 16 16 | 00676b | (2 bytes)   |         .byte 31, 2d                 
1874:243 | DONE dir | na 16 16 |        |             |                 31 2d                    --  1 -
1874:244 | DONE wsp | na 16 16 |        |             |
1874:245 | DONE lbl | na 16 16 | 00676d |             | nt_one-plus                          
1874:246 | DONE dir | na 16 16 | 00676d | (2 bytes)   |         .byte 2, { PW + NC }         
1874:246 | DONE dir | na 16 16 |        |             |                 02 90                    --  . .
1874:247 | DONE dir | na 16 16 | 00676f | (6 bytes)   |         .word nt_one-minus, xt_one-plus, 00611c 
1874:247 | DONE dir | na 16 16 |        |             |                 63 67 1b 61 1c 61        --  c g . a . a
1874:248 | DONE dir | na 16 16 | 006775 | (2 bytes)   |         .byte 31, 2b                 
1874:248 | DONE dir | na 16 16 |        |             |                 31 2b                    --  1 +
1874:249 | DONE wsp | na 16 16 |        |             |
1874:250 | DONE lbl | na 16 16 | 006777 |             | nt_false                             
1874:251 | DONE dir | na 16 16 | 006777 | (2 bytes)   |         .byte 5, { PW + NC }         
1874:251 | DONE dir | na 16 16 |        |             |                 05 90                    --  . .
1874:252 | DONE dir | na 16 16 | 006779 | (6 bytes)   |         .word nt_one-plus, xt_zero, 006110 
1874:252 | DONE dir | na 16 16 |        |             |                 6d 67 09 61 10 61        --  m g 	 a . a
1874:253 | DONE dir | na 16 16 | 00677f | (5 bytes)   |         .byte 66, 61, 6c, 73, 65     
1874:253 | DONE dir | na 16 16 |        |             |                 66 61 6c 73 65           --  f a l s e
1874:254 | DONE wsp | na 16 16 |        |             |
1874:255 | DONE lbl | na 16 16 | 006784 |             | nt_true                              
1874:256 | DONE dir | na 16 16 | 006784 | (2 bytes)   |         .byte 4, { PW + NC }         
1874:256 | DONE dir | na 16 16 |        |             |                 04 90                    --  . .
1874:257 | DONE dir | na 16 16 | 006786 | (6 bytes)   |         .word nt_false, xt_true, 006521 
1874:257 | DONE dir | na 16 16 |        |             |                 77 67 1a 65 21 65        --  w g . e ! e
1874:258 | DONE dir | na 16 16 | 00678c | (4 bytes)   |         .byte 74, 72, 75, 65         
1874:258 | DONE dir | na 16 16 |        |             |                 74 72 75 65              --  t r u e
1874:259 | DONE wsp | na 16 16 |        |             |
1874:260 | DONE lbl | na 16 16 | 006790 |             | nt_two                               
1874:261 | DONE dir | na 16 16 | 006790 | (2 bytes)   |         .byte 1, { PW + NC }         
1874:261 | DONE dir | na 16 16 |        |             |                 01 90                    --  . .
1874:262 | DONE dir | na 16 16 | 006792 | (6 bytes)   |         .word nt_true, xt_two, 006124 
1874:262 | DONE dir | na 16 16 |        |             |                 84 67 1d 61 24 61        --  . g . a $ a
1874:263 | DONE dir | na 16 16 | 006798 | (1 bytes)   |         .byte 32                     
1874:263 | DONE dir | na 16 16 |        |             |                 32                       --  2
1874:264 | DONE wsp | na 16 16 |        |             |
1874:265 | DONE lbl | na 16 16 | 006799 |             | nt_one                               
1874:266 | DONE dir | na 16 16 | 006799 | (2 bytes)   |         .byte 1, { PW + NC }         
1874:266 | DONE dir | na 16 16 |        |             |                 01 90                    --  . .
1874:267 | DONE dir | na 16 16 | 00679b | (6 bytes)   |         .word nt_two, xt_one, 006118 
1874:267 | DONE dir | na 16 16 |        |             |                 90 67 11 61 18 61        --  . g . a . a
1874:268 | DONE dir | na 16 16 | 0067a1 | (1 bytes)   |         .byte 31                     
1874:268 | DONE dir | na 16 16 |        |             |                 31                       --  1
1874:269 | DONE wsp | na 16 16 |        |             |
1874:270 | DONE lbl | na 16 16 | 0067a2 |             | nt_zero                              
1874:271 | DONE dir | na 16 16 | 0067a2 | (2 bytes)   |         .byte 1, { PW + NC }         
1874:271 | DONE dir | na 16 16 |        |             |                 01 90                    --  . .
1874:272 | DONE dir | na 16 16 | 0067a4 | (6 bytes)   |         .word nt_one, xt_zero, 006110 
1874:272 | DONE dir | na 16 16 |        |             |                 99 67 09 61 10 61        --  . g 	 a . a
1874:273 | DONE dir | na 16 16 | 0067aa | (1 bytes)   |         .byte 30                     
1874:273 | DONE dir | na 16 16 |        |             |                 30                       --  0
1874:274 | DONE wsp | na 16 16 |        |             |
1874:275 | DONE lbl | na 16 16 | 0067ab |             | nt_find-name                         
1874:276 | DONE dir | na 16 16 | 0067ab | (2 bytes)   |         .byte 9, 0                   
1874:276 | DONE dir | na 16 16 |        |             |                 09 00                    --  	 .
1874:277 | DONE dir | na 16 16 | 0067ad | (6 bytes)   |         .word nt_zero, xt_find-name, 0063fe 
1874:277 | DONE dir | na 16 16 |        |             |                 a2 67 a8 63 fe 63        --  . g . c . c
1874:278 | DONE dir | na 16 16 | 0067b3 | (9 bytes)   |         .byte 66, 69, 6e, 64, 2d, 6e, 61, 6d, 65 
1874:278 | DONE dir | na 16 16 |        |             |                 66 69 6e 64 2d 6e 61 6d  --  f i n d - n a m
1874:278 | DONE dir | na 16 16 |        |             |                 65                       --  e
1874:279 | DONE wsp | na 16 16 |        |             |
1874:280 | DONE lbl | na 16 16 | 0067bc |             | nt_refill                            
1874:281 | DONE dir | na 16 16 | 0067bc | (2 bytes)   |         .byte 6, { PW }              ; TODO check flags
1874:281 | DONE dir | na 16 16 |        |             |                 06 80                    --  . .
1874:282 | DONE dir | na 16 16 | 0067be | (6 bytes)   |         .word nt_find-name, xt_refill, 0064da 
1874:282 | DONE dir | na 16 16 |        |             |                 ab 67 a8 64 da 64        --  . g . d . d
1874:283 | DONE dir | na 16 16 | 0067c4 | (6 bytes)   |         .byte 72, 65, 66, 69, 6c, 6c 
1874:283 | DONE dir | na 16 16 |        |             |                 72 65 66 69 6c 6c        --  r e f i l l
1874:284 | DONE wsp | na 16 16 |        |             |
1874:285 | DONE lbl | na 16 16 | 0067ca |             | nt_parse-name                        
1874:286 | DONE dir | na 16 16 | 0067ca | (2 bytes)   |         .byte &10, 0                 
1874:286 | DONE dir | na 16 16 |        |             |                 0a 00                    --  
 .
1874:287 | DONE dir | na 16 16 | 0067cc | (6 bytes)   |         .word nt_refill, xt_parse-name, 0064a7 
1874:287 | DONE dir | na 16 16 |        |             |                 bc 67 43 64 a7 64        --  . g C d . d
1874:288 | DONE dir | na 16 16 | 0067d2 | (10 bytes)  |         .byte 70, 61, 72, 73, 65, 2d, 6e, 61, 6d, 65 
1874:288 | DONE dir | na 16 16 |        |             |                 70 61 72 73 65 2d 6e 61  --  p a r s e - n a
1874:288 | DONE dir | na 16 16 |        |             |                 6d 65                    --  m e
1874:289 | DONE wsp | na 16 16 |        |             |
1874:290 | DONE lbl | na 16 16 | 0067dc |             | nt_source-id                         
1874:291 | DONE dir | na 16 16 | 0067dc | (2 bytes)   |         .byte 9, { PW + NC }         
1874:291 | DONE dir | na 16 16 |        |             |                 09 90                    --  	 .
1874:292 | DONE dir | na 16 16 | 0067de | (6 bytes)   |         .word nt_parse-name, xt_source-id, 0064f7 
1874:292 | DONE dir | na 16 16 |        |             |                 ca 67 f1 64 f7 64        --  . g . d . d
1874:293 | DONE dir | na 16 16 | 0067e4 | (9 bytes)   |         .byte 73, 6f, 75, 72, 63, 65, 2d, 69, 64 
1874:293 | DONE dir | na 16 16 |        |             |                 73 6f 75 72 63 65 2d 69  --  s o u r c e - i
1874:293 | DONE dir | na 16 16 |        |             |                 64                       --  d
1874:294 | DONE wsp | na 16 16 |        |             |
1874:295 | DONE lbl | na 16 16 | 0067ed |             | nt_comma                             
1874:296 | DONE dir | na 16 16 | 0067ed | (2 bytes)   |         .byte 1, { PW + NC }         
1874:296 | DONE dir | na 16 16 |        |             |                 01 90                    --  . .
1874:297 | DONE dir | na 16 16 | 0067ef | (6 bytes)   |         .word nt_source-id, xt_comma, 0060e6 
1874:297 | DONE dir | na 16 16 |        |             |                 dc 67 db 60 e6 60        --  . g . ` . `
1874:298 | DONE dir | na 16 16 | 0067f5 | (1 bytes)   |         .byte 2c                     
1874:298 | DONE dir | na 16 16 |        |             |                 2c                       --  ,
1874:299 | DONE wsp | na 16 16 |        |             |
1874:300 | DONE lbl | na 16 16 | 0067f6 |             | nt_accept                            
1874:301 | DONE dir | na 16 16 | 0067f6 | (2 bytes)   |         .byte 6, 00                  ; TODO check flags
1874:301 | DONE dir | na 16 16 |        |             |                 06 00                    --  . .
1874:302 | DONE dir | na 16 16 | 0067f8 | (6 bytes)   |         .word nt_comma, xt_accept, 0061e3 
1874:302 | DONE dir | na 16 16 |        |             |                 ed 67 60 61 e3 61        --  . g ` a . a
1874:303 | DONE dir | na 16 16 | 0067fe | (6 bytes)   |         .byte 61, 63, 63, 65, 70, 74 
1874:303 | DONE dir | na 16 16 |        |             |                 61 63 63 65 70 74        --  a c c e p t
1874:304 | DONE wsp | na 16 16 |        |             |
1874:305 | DONE lbl | na 16 16 | 006804 |             | nt_tuck                              
1874:306 | DONE dir | na 16 16 | 006804 | (2 bytes)   |         .byte 4, { PW + NC }         
1874:306 | DONE dir | na 16 16 |        |             |                 04 90                    --  . .
1874:307 | DONE dir | na 16 16 | 006806 | (6 bytes)   |         .word nt_accept, xt_tuck, 00652a 
1874:307 | DONE dir | na 16 16 |        |             |                 f6 67 22 65 2a 65        --  . g " e * e
1874:308 | DONE dir | na 16 16 | 00680c | (4 bytes)   |         .byte 74, 75, 63, 6b         
1874:308 | DONE dir | na 16 16 |        |             |                 74 75 63 6b              --  t u c k
1874:309 | DONE wsp | na 16 16 |        |             |
1874:310 | DONE lbl | na 16 16 | 006810 |             | nt_nip                               
1874:311 | DONE dir | na 16 16 | 006810 | (2 bytes)   |         .byte 3, { PW + NC }         
1874:311 | DONE dir | na 16 16 |        |             |                 03 90                    --  . .
1874:312 | DONE dir | na 16 16 | 006812 | (6 bytes)   |         .word nt_tuck, xt_nip, 006422 
1874:312 | DONE dir | na 16 16 |        |             |                 04 68 20 64 22 64        --  . h   d " d
1874:313 | DONE dir | na 16 16 | 006818 | (3 bytes)   |         .byte 6e, 69, 70             
1874:313 | DONE dir | na 16 16 |        |             |                 6e 69 70                 --  n i p
1874:314 | DONE wsp | na 16 16 |        |             |
1874:315 | DONE lbl | na 16 16 | 00681b |             | nt_rot                               
1874:316 | DONE dir | na 16 16 | 00681b | (2 bytes)   |         .byte 3, { PW + NC }         
1874:316 | DONE dir | na 16 16 |        |             |                 03 90                    --  . .
1874:317 | DONE dir | na 16 16 | 00681d | (6 bytes)   |         .word nt_nip, xt_rot, 0064e3 
1874:317 | DONE dir | na 16 16 |        |             |                 10 68 db 64 e3 64        --  . h . d . d
1874:318 | DONE dir | na 16 16 | 006823 | (3 bytes)   |         .byte 72, 6f, 74             
1874:318 | DONE dir | na 16 16 |        |             |                 72 6f 74                 --  r o t
1874:319 | DONE wsp | na 16 16 |        |             |
1874:320 | DONE lbl | na 16 16 | 006826 |             | nt_execute                           
1874:321 | DONE dir | na 16 16 | 006826 | (2 bytes)   |         .byte 7, { PW + NC }         
1874:321 | DONE dir | na 16 16 |        |             |                 07 90                    --  . .
1874:322 | DONE dir | na 16 16 | 006828 | (6 bytes)   |         .word nt_rot, xt_execute, 0063a7 
1874:322 | DONE dir | na 16 16 |        |             |                 1b 68 9d 63 a7 63        --  . h . c . c
1874:323 | DONE dir | na 16 16 | 00682e | (7 bytes)   |         .byte 65, 78, 65, 63, 75, 74, 65 
1874:323 | DONE dir | na 16 16 |        |             |                 65 78 65 63 75 74 65     --  e x e c u t e
1874:324 | DONE wsp | na 16 16 |        |             |
1874:325 | DONE lbl | na 16 16 | 006835 |             | nt_here                              
1874:326 | DONE dir | na 16 16 | 006835 | (2 bytes)   |         .byte 4, { PW + NC }         
1874:326 | DONE dir | na 16 16 |        |             |                 04 90                    --  . .
1874:327 | DONE dir | na 16 16 | 006837 | (6 bytes)   |         .word nt_execute, xt_here, 006405 
1874:327 | DONE dir | na 16 16 |        |             |                 26 68 ff 63 05 64        --  & h . c . d
1874:328 | DONE dir | na 16 16 | 00683d | (4 bytes)   |         .byte 68, 65, 72, 65         
1874:328 | DONE dir | na 16 16 |        |             |                 68 65 72 65              --  h e r e
1874:329 | DONE wsp | na 16 16 |        |             |
1874:330 | DONE lbl | na 16 16 | 006841 |             | nt_2drop                             
1874:331 | DONE dir | na 16 16 | 006841 | (2 bytes)   |         .byte 5, { PW + NC }         
1874:331 | DONE dir | na 16 16 |        |             |                 05 90                    --  . .
1874:332 | DONE dir | na 16 16 | 006843 | (6 bytes)   |         .word nt_here, xt_2drop, 00612f 
1874:332 | DONE dir | na 16 16 |        |             |                 35 68 29 61 2f 61        --  5 h ) a / a
1874:333 | DONE dir | na 16 16 | 006849 | (5 bytes)   |         .byte 32, 64, 72, 6f, 70     
1874:333 | DONE dir | na 16 16 |        |             |                 32 64 72 6f 70           --  2 d r o p
1874:334 | DONE wsp | na 16 16 |        |             |
1874:335 | DONE lbl | na 16 16 | 00684e |             | nt_over                              
1874:336 | DONE dir | na 16 16 | 00684e | (2 bytes)   |         .byte 4, { PW + NC }         
1874:336 | DONE dir | na 16 16 |        |             |                 04 90                    --  . .
1874:337 | DONE dir | na 16 16 | 006850 | (6 bytes)   |         .word nt_2drop, xt_over, 006429 
1874:337 | DONE dir | na 16 16 |        |             |                 41 68 23 64 29 64        --  A h # d ) d
1874:338 | DONE dir | na 16 16 | 006856 | (4 bytes)   |         .byte 6f, 76, 65, 72         
1874:338 | DONE dir | na 16 16 |        |             |                 6f 76 65 72              --  o v e r
1874:339 | DONE wsp | na 16 16 |        |             |
1874:340 | DONE lbl | na 16 16 | 00685a |             | nt_fetch                             
1874:341 | DONE dir | na 16 16 | 00685a | (2 bytes)   |         .byte 1, { PW + NC }         
1874:341 | DONE dir | na 16 16 |        |             |                 01 90                    --  . .
1874:342 | DONE dir | na 16 16 | 00685c | (6 bytes)   |         .word nt_over, xt_fetch, 0060f5 
1874:342 | DONE dir | na 16 16 |        |             |                 4e 68 f1 60 f5 60        --  N h . ` . `
1874:343 | DONE dir | na 16 16 | 006862 | (1 bytes)   |         .byte 40                     
1874:343 | DONE dir | na 16 16 |        |             |                 40                       --  @
1874:344 | DONE wsp | na 16 16 |        |             |
1874:345 | DONE lbl | na 16 16 | 006863 |             | nt_store                             
1874:346 | DONE dir | na 16 16 | 006863 | (2 bytes)   |         .byte 1, { PW + NC }         
1874:346 | DONE dir | na 16 16 |        |             |                 01 90                    --  . .
1874:347 | DONE dir | na 16 16 | 006865 | (6 bytes)   |         .word nt_fetch, xt_store, 0060f0 
1874:347 | DONE dir | na 16 16 |        |             |                 5a 68 e7 60 f0 60        --  Z h . ` . `
1874:348 | DONE dir | na 16 16 | 00686b | (1 bytes)   |         .byte 21                     
1874:348 | DONE dir | na 16 16 |        |             |                 21                       --  !
1874:349 | DONE wsp | na 16 16 |        |             |
1874:350 | DONE lbl | na 16 16 | 00686c |             | nt_swap                              
1874:351 | DONE dir | na 16 16 | 00686c | (2 bytes)   |         .byte 4, { PW + NC }         
1874:351 | DONE dir | na 16 16 |        |             |                 04 90                    --  . .
1874:352 | DONE dir | na 16 16 | 00686e | (6 bytes)   |         .word nt_store, xt_swap, 006519 
1874:352 | DONE dir | na 16 16 |        |             |                 63 68 14 65 19 65        --  c h . e . e
1874:353 | DONE dir | na 16 16 | 006874 | (4 bytes)   |         .byte 73, 77, 61, 70         
1874:353 | DONE dir | na 16 16 |        |             |                 73 77 61 70              --  s w a p
1874:354 | DONE wsp | na 16 16 |        |             |
1874:355 | DONE lbl | na 16 16 | 006878 |             | nt_dup                               
1874:356 | DONE dir | na 16 16 | 006878 | (2 bytes)   |         .byte 3, { PW + NC }         
1874:356 | DONE dir | na 16 16 |        |             |                 03 90                    --  . .
1874:357 | DONE dir | na 16 16 | 00687a | (6 bytes)   |         .word nt_swap, xt_dup, 00636a 
1874:357 | DONE dir | na 16 16 |        |             |                 6c 68 66 63 6a 63        --  l h f c j c
1874:358 | DONE dir | na 16 16 | 006880 | (3 bytes)   |         .byte 64, 75, 70             
1874:358 | DONE dir | na 16 16 |        |             |                 64 75 70                 --  d u p
1874:359 | DONE wsp | na 16 16 |        |             |
1874:360 | DONE cmt | na 16 16 |        |             | ; DROP is always the first entry in dictionary
1874:361 | DONE lbl | na 16 16 | 006883 |             | nt_drop                              
1874:362 | DONE dir | na 16 16 | 006883 | (2 bytes)   |         .byte 4, { PW + NC }         
1874:362 | DONE dir | na 16 16 |        |             |                 04 90                    --  . .
1874:363 | DONE dir | na 16 16 | 006885 | (6 bytes)   |         .word nt_dup, xt_drop, 00633e 
1874:363 | DONE dir | na 16 16 |        |             |                 78 68 3a 63 3e 63        --  x h : c > c
1874:364 | DONE dir | na 16 16 | 00688b | (4 bytes)   |         .byte 64, 72, 6f, 70         
1874:364 | DONE dir | na 16 16 |        |             |                 64 72 6f 70              --  d r o p
1874:365 | DONE wsp | na 16 16 |        |             |
1874:366 | DONE cmt | na 16 16 |        |             | ; END
1875:000 | DONE wsp | na 16 16 |        |             |
1876:000 | DONE cmt | na 16 16 |        |             | ; ===================================================================
1877:000 | DONE cmt | na 16 16 |        |             | ; CODE FIELD ROUTINES
1878:000 | DONE wsp | na 16 16 |        |             |
1879:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1880:000 | DONE cmt | na 16 16 |        |             | ; DOVAR
1881:000 | DONE cmt | na 16 16 |        |             | ; Execute a variable: Push the address of the first bytes of the Data Field onto
1882:000 | DONE cmt | na 16 16 |        |             | ; the stack. This is called with JSR so we can pick up the address of the
1883:000 | DONE cmt | na 16 16 |        |             | ; calling variable off the 65816's Return Stack. The final RTS takes us to the
1884:000 | DONE cmt | na 16 16 |        |             | ; original caller of the routine that in turn called DOVAR. This is the default
1885:000 | DONE cmt | na 16 16 |        |             | ; routine installed with CREATE
1886:000 | DONE lbl | na 16 16 | 00688f |             | dovar                                
1887:000 | DONE dir | na 16 16 |        |             |         .!a16                        
1888:000 | DONE dir | na 16 16 |        |             |         .!xy16                       
1889:000 | DONE ins | na 16 16 | 00688f | ca          |                 dex                  ; make room on Data Stack
1890:000 | DONE ins | na 16 16 | 006890 | ca          |                 dex                  
1891:000 | DONE ins | na 16 16 | 006891 | 94 00       |                 sty.dx 00            
1892:000 | DONE wsp | na 16 16 |        |             |
1893:000 | DONE cmt | na 16 16 |        |             |                 ; The address we need is stored in the two bytes after the JSR
1894:000 | DONE cmt | na 16 16 |        |             |                 ; return address, which in turn is what is on top of the Return
1895:000 | DONE cmt | na 16 16 |        |             |                 ; Stack
1896:000 | DONE ins | na 16 16 | 006893 | 7a          |                 ply                  ; value is now TOS
1897:000 | DONE ins | na 16 16 | 006894 | c8          |                 iny                  ; add one because of 65816's address handling
1898:000 | DONE wsp | na 16 16 |        |             |
1899:000 | DONE ins | na 16 16 | 006895 | 60          |                 rts                  ; takes us to original caller
1900:000 | DONE wsp | na 16 16 |        |             |
1901:000 | DONE wsp | na 16 16 |        |             |
1902:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1903:000 | DONE cmt | na 16 16 |        |             | ; DOCONST
1904:000 | DONE cmt | na 16 16 |        |             | ; Execute a constant: Push the data in the first two byte of the Data Field onto
1905:000 | DONE cmt | na 16 16 |        |             | ; the stack
1906:000 | DONE lbl | na 16 16 | 006896 |             | doconst                              
1907:000 | DONE dir | na 16 16 |        |             |         .!a16                        
1908:000 | DONE dir | na 16 16 |        |             |         .!xy16                       
1909:000 | DONE ins | na 16 16 | 006896 | ca          |                 dex                  ; make room on Data Stack
1910:000 | DONE ins | na 16 16 | 006897 | ca          |                 dex                  
1911:000 | DONE ins | na 16 16 | 006898 | 94 00       |                 sty.dx 00            
1912:000 | DONE wsp | na 16 16 |        |             |
1913:000 | DONE cmt | na 16 16 |        |             |                 ; The value we need is stored two bytes after the JSR return
1914:000 | DONE cmt | na 16 16 |        |             |                 ; address, which in turn is what is on top of the Return Stack
1915:000 | DONE ins | na 16 16 | 00689a | 68          |                 pla                  ; get the return address
1916:000 | DONE ins | na 16 16 | 00689b | 85 16       |                 sta.d 000216         
1917:000 | DONE wsp | na 16 16 |        |             |
1918:000 | DONE cmt | na 16 16 |        |             |                 ; start Y as index off with 1 instead of zero because of 65816's
1919:000 | DONE cmt | na 16 16 |        |             |                 ; address handling
1920:000 | DONE ins | na 16 16 | 00689d | a0 01 00    |                 ldy.# 0001           
1921:000 | DONE ins | na 16 16 | 0068a0 | b1 16       |                 lda.diy 000216       ; LDA (TMP1),Y
1922:000 | DONE ins | na 16 16 | 0068a2 | a8          |                 tay                  
1923:000 | DONE wsp | na 16 16 |        |             |
1924:000 | DONE ins | na 16 16 | 0068a3 | 60          |                 rts                  ; takes us to original caller
1925:000 | DONE wsp | na 16 16 |        |             |
1926:000 | DONE wsp | na 16 16 |        |             |
1927:000 | DONE cmt | na 16 16 |        |             | ; ===================================================================
1928:000 | DONE cmt | na 16 16 |        |             | ; LOW LEVEL HELPER FUNCTIONS
1929:000 | DONE wsp | na 16 16 |        |             |
1930:000 | DONE wsp | na 16 16 |        |             |
1931:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1932:000 | DONE cmt | na 16 16 |        |             | ; COMPILE OR EXECUTE (INTERPRET)
1933:000 | DONE cmt | na 16 16 |        |             | ; Core routine for interpreter called by EVALUATE and QUIT. We process one line
1934:000 | DONE cmt | na 16 16 |        |             | ; only. Assumes that address of name is in cib and length of whole input
1935:000 | DONE cmt | na 16 16 |        |             | ; string is in ciblen. Consider moving this up to QUIT once we know what we are
1936:000 | DONE cmt | na 16 16 |        |             | ; doing
1937:000 | DONE lbl | na 16 16 | 0068a4 |             | compex                               
1938:000 | DONE lbl | na 16 16 | 0068a4 |             | compex_loop                          
1939:000 | DONE cmt | na 16 16 |        |             |                 ; Normally we would use PARSE here with the SPACE character as
1940:000 | DONE cmt | na 16 16 |        |             |                 ; a parameter (PARSE replaces WORD in modern Forths). However,
1941:000 | DONE cmt | na 16 16 |        |             |                 ; Gforth's PARSE-NAME makes more sense as it uses spaces as
1942:000 | DONE cmt | na 16 16 |        |             |                 ; delimiters per default and skips any leading spaces, which
1943:000 | DONE cmt | na 16 16 |        |             |                 ; PARSE does not do.
1944:000 | DONE ins | na 16 16 | 0068a4 | 20 43 64    |                 jsr 006443           ; ( 'string' -- addr u )
1945:000 | DONE dir | na 16 16 |        |             |         .!a16                        
1946:000 | DONE cmt | na 16 16 |        |             |                 ; if PARSE-NAME returns 0 (empty line), no characters were left
1947:000 | DONE cmt | na 16 16 |        |             |                 ; in the line and we need to go get a new line
1948:000 | DONE ins | na 16 16 | 0068a7 | 98          |                 tya                  ; force flag check
1949:000 | DONE ins | na 16 16 | 0068a8 | f0 1d       |                 beq 0068c7           
1950:000 | DONE wsp | na 16 16 |        |             |
1951:000 | DONE cmt | na 16 16 |        |             |                 ; We let the user input words in any case, but use lower case
1952:000 | DONE cmt | na 16 16 |        |             |                 ; internally (sorry, Garth).
1953:000 | DONE ins | na 16 16 | 0068aa | 20 07 69    |                 jsr 006907           ; returns ( addr u )
1954:000 | DONE wsp | na 16 16 |        |             |
1955:000 | DONE cmt | na 16 16 |        |             |                 ; If we got something that is not a zero, we go to FIND-NAME to
1956:000 | DONE cmt | na 16 16 |        |             |                 ; get the nt. Returns ( nt | 0 )
1957:000 | DONE ins | na 16 16 | 0068ad | 20 a8 63    |                 jsr 0063a8           
1958:000 | DONE dir | na 16 16 |        |             |         .!a16                        
1959:000 | DONE wsp | na 16 16 |        |             |
1960:000 | DONE cmt | na 16 16 |        |             |                 ; a zero signals that we didn't find a word in the Dictionary
1961:000 | DONE ins | na 16 16 | 0068b0 | 98          |                 tya                  ; force flag check
1962:000 | DONE ins | na 16 16 | 0068b1 | d0 06       |                 bne 0068b9           
1963:000 | DONE wsp | na 16 16 |        |             |
1964:000 | DONE cmt | na 16 16 |        |             |                 ; TODO No name token, try NUMBER CONVERSION
1965:000 | DONE wsp | na 16 16 |        |             |
1966:000 | DONE cmt | na 16 16 |        |             |                 ; Woe is us, all has failed
1967:000 | DONE ins | na 16 16 | 0068b3 | a9 fb 6a    |                 lda.# 006afb         ; "Unknown word"
1968:000 | DONE ins | na 16 16 | 0068b6 | 4c ce 68    |                 jmp 0068ce           
1969:000 | DONE wsp | na 16 16 |        |             |
1970:000 | DONE lbl | na 16 16 | 0068b9 |             | compex_got_name_token                
1971:000 | DONE cmt | na 16 16 |        |             |                 ; TODO see if INTERPRETED OR COMPILED
1972:000 | DONE wsp | na 16 16 |        |             |
1973:000 | DONE cmt | na 16 16 |        |             |                 ; INTERPRET WORD
1974:000 | DONE cmt | na 16 16 |        |             |                 ; We arrive here with the nt as TOS. The xt of a word is
1975:000 | DONE cmt | na 16 16 |        |             |                 ; four bytes farther on, so this is a quick version of NAME>INT
1976:000 | DONE wsp | na 16 16 |        |             |
1977:000 | DONE dir | na 16 16 |        |             |         .!xy16                       
1978:000 | DONE ins | na 16 16 | 0068b9 | c8          |                 iny                  
1979:000 | DONE ins | na 16 16 | 0068ba | c8          |                 iny                  
1980:000 | DONE ins | na 16 16 | 0068bb | c8          |                 iny                  
1981:000 | DONE ins | na 16 16 | 0068bc | c8          |                 iny                  
1982:000 | DONE ins | na 16 16 | 0068bd | b9 00 00    |                 lda.y 0000           ; LDA $0000,Y
1983:000 | DONE ins | na 16 16 | 0068c0 | a8          |                 tay                  
1984:000 | DONE wsp | na 16 16 |        |             |
1985:000 | DONE ins | na 16 16 | 0068c1 | 20 9d 63    |                 jsr 00639d           
1986:000 | DONE wsp | na 16 16 |        |             |
1987:000 | DONE cmt | na 16 16 |        |             |                 ; that's quite enough for this word, let's get the next one
1988:000 | DONE ins | na 16 16 | 0068c4 | 4c a4 68    |                 jmp 0068a4           
1989:000 | DONE wsp | na 16 16 |        |             |
1990:000 | DONE lbl | na 16 16 | 0068c7 |             | compex_line_done                     
1991:000 | DONE cmt | na 16 16 |        |             |                 ; drop stuff from PARSE_NAME
1992:000 | DONE ins | na 16 16 | 0068c7 | b4 02       |                 ldy.dx 02            
1993:000 | DONE ins | na 16 16 | 0068c9 | e8          |                 inx                  
1994:000 | DONE ins | na 16 16 | 0068ca | e8          |                 inx                  
1995:000 | DONE ins | na 16 16 | 0068cb | e8          |                 inx                  
1996:000 | DONE ins | na 16 16 | 0068cc | e8          |                 inx                  
1997:000 | DONE wsp | na 16 16 |        |             |
1998:000 | DONE ins | na 16 16 | 0068cd | 60          |                 rts                  
1999:000 | DONE wsp | na 16 16 |        |             |
2000:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
2001:000 | DONE cmt | na 16 16 |        |             | ; Fatal error encountered: Take address of error string from A, print it and
2002:000 | DONE cmt | na 16 16 |        |             | ; then call abort
2003:000 | DONE lbl | na 16 16 | 0068ce |             | error                                
2004:000 | DONE ins | na 16 16 | 0068ce | 20 d4 68    |                 jsr 0068d4           
2005:000 | DONE ins | na 16 16 | 0068d1 | 4c 94 60    |                 jmp 006094           
2006:000 | DONE wsp | na 16 16 |        |             |
2007:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
2008:000 | DONE cmt | na 16 16 |        |             | ; Print a zero terminated string to the console, adding a CR character. Takes
2009:000 | DONE cmt | na 16 16 |        |             | ; the address of the string in 16-bit A register, calls put_chr.  A is
2010:000 | DONE cmt | na 16 16 |        |             | ; destroyed. We could probably figure out some way to use TYPE instead, but zero
2011:000 | DONE cmt | na 16 16 |        |             | ; terminated strings are easier for the 65816 to use.
2012:000 | DONE cmt | na 16 16 |        |             | ; TODO add version without final line feed
2013:000 | DONE lbl | na 16 16 | 0068d4 |             | print_string                         
2014:000 | DONE dir | na 16 16 |        |             |         .!a16                        
2015:000 | DONE dir | na 16 16 |        |             |         .!xy16                       
2016:000 | DONE cmt | na 16 16 |        |             |                 ; don't use tmpdsp for X because we don't know if the user has
2017:000 | DONE cmt | na 16 16 |        |             |                 ; used it for something already
2018:000 | DONE ins | na 16 16 | 0068d4 | da          |                 phx                  
2019:000 | DONE ins | na 16 16 | 0068d5 | aa          |                 tax                  ; x16 contains address of string
2020:000 | DONE lbl | na 16 16 | 0068d6 |             | @                                    
2021:000 | DONE ins | na 16 16 | 0068d6 | e2 20       |                 sep 20               
2021:001 | DONE ctl | na  8 16 |        |             |         .!a8
2022:000 | DONE ins | na  8 16 | 0068d8 | bd 00 00    |                 lda.x 0000           ; LDA $0000,X
2023:000 | DONE ins | na  8 16 | 0068db | f0 06       |                 beq 0068e3           
2024:000 | DONE ins | na  8 16 | 0068dd | 20 30 60    |                 jsr 006030           
2025:000 | DONE ins | na  8 16 | 0068e0 | e8          |                 inx                  
2026:000 | DONE ins | na  8 16 | 0068e1 | 80 f3       |                 bra 0068d6           
2027:000 | DONE wsp | na  8 16 |        |             |
2028:000 | DONE lbl | na  8 16 | 0068e3 |             | print_string_done                    
2029:000 | DONE ins | na  8 16 | 0068e3 | a9 0a       |                 lda.# AscLF          ; should be CR on some systems
2030:000 | DONE ins | na  8 16 | 0068e5 | 20 30 60    |                 jsr 006030           
2031:000 | DONE ins | na  8 16 | 0068e8 | c2 20       |                 rep 20               
2031:001 | DONE ctl | na 16 16 |        |             |         .!a16
2032:000 | DONE ins | na 16 16 | 0068ea | fa          |                 plx                  
2033:000 | DONE ins | na 16 16 | 0068eb | 60          |                 rts                  
2034:000 | DONE wsp | na 16 16 |        |             |
2035:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
2036:000 | DONE cmt | na 16 16 |        |             | ; CONVERT BYTE TO ASCII
2037:000 | DONE cmt | na 16 16 |        |             | ; Convert byte in A to two ASCII hex digits and print them. Calls
2038:000 | DONE cmt | na 16 16 |        |             | ; nibble_to_ascii. Assumes A is 8 bit.
2039:000 | DONE lbl | na 16 16 | 0068ec |             | byte_to_ascii                        
2040:000 | DONE ins | na 16 16 | 0068ec | 48          |                 pha                  
2041:000 | DONE cmt | na 16 16 |        |             |                 ; convert high nibble first
2042:000 | DONE ins | na 16 16 | 0068ed | 4a          |                 lsr.a                
2043:000 | DONE ins | na 16 16 | 0068ee | 4a          |                 lsr.a                
2044:000 | DONE ins | na 16 16 | 0068ef | 4a          |                 lsr.a                
2045:000 | DONE ins | na 16 16 | 0068f0 | 4a          |                 lsr.a                
2046:000 | DONE ins | na 16 16 | 0068f1 | 20 f5 68    |                 jsr 0068f5           
2047:000 | DONE wsp | na 16 16 |        |             |
2048:000 | DONE ins | na 16 16 | 0068f4 | 68          |                 pla                  
2049:000 | DONE wsp | na 16 16 |        |             |
2050:000 | DONE cmt | na 16 16 |        |             |                 ; fall thru to nibble_to_ascii
2051:000 | DONE wsp | na 16 16 |        |             |
2052:000 | DONE wsp | na 16 16 |        |             |
2053:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
2054:000 | DONE cmt | na 16 16 |        |             | ; CONVERT NIBBLE TO ASCII
2055:000 | DONE cmt | na 16 16 |        |             | ; Converts the lower nibble of a number in A and returns the ASCII character
2056:000 | DONE cmt | na 16 16 |        |             | ; number, then prints it. Assumes A is 8 bit
2057:000 | DONE lbl | na 16 16 | 0068f5 |             | nibble_to_ascii                      
2058:000 | DONE ins | na 16 16 | 0068f5 | 29 0f 00    |                 and.# 000f           
2059:000 | DONE ins | na 16 16 | 0068f8 | 09 30 00    |                 ora.# 30             
2060:000 | DONE ins | na 16 16 | 0068fb | c9 3a 00    |                 cmp.# 003a           ; '9' + 1
2061:000 | DONE ins | na 16 16 | 0068fe | 90 03       |                 bcc 006903           
2062:000 | DONE ins | na 16 16 | 006900 | 69 06 00    |                 adc.# 0006           
2063:000 | DONE lbl | na 16 16 | 006903 |             | @                                    
2064:000 | DONE ins | na 16 16 | 006903 | 20 30 60    |                 jsr 006030           
2065:000 | DONE dir | na 16 16 |        |             |         .!a16                        
2066:000 | DONE ins | na 16 16 | 006906 | 60          |                 rts                  
2067:000 | DONE wsp | na 16 16 |        |             |
2068:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
2069:000 | DONE cmt | na 16 16 |        |             | ; Convert a string given by ( addr u ) to lowercase in place. Since we have to
2070:000 | DONE cmt | na 16 16 |        |             | ; treat the input buffer as read-only by ANS rules, we have to put the converted
2071:000 | DONE cmt | na 16 16 |        |             | ; string somewhere and then return the new address and length
2072:000 | DONE lbl | na 16 16 | 006907 |             | string_to_lowercase                  
2073:000 | DONE cmt | na 16 16 |        |             |                 ; TODO CODE THIS
2074:000 | DONE ins | na 16 16 | 006907 | 60          |                 rts                  
2075:000 | DONE wsp | na 16 16 |        |             |
2076:000 | DONE wsp | na 16 16 |        |             |
2077:000 | DONE cmt | na 16 16 |        |             | ; ===================================================================
2078:000 | DONE cmt | na 16 16 |        |             | ; HIGH-LEVEL WORDS
2079:000 | DONE wsp | na 16 16 |        |             |
2080:000 | DONE cmt | na 16 16 |        |             | ; These are executed during start up. Remember that we have to put a space at
2081:000 | DONE cmt | na 16 16 |        |             | ; the end of the line if there is another line with code following it. No zero
2082:000 | DONE cmt | na 16 16 |        |             | ; or CR/LF is required
2083:000 | DONE lbl | na 16 16 | 006908 |             | hi-start                             
2084:000 | DONE dir | na 16 16 | 006908 | (35 bytes)  |         .byte 2e, 28, 20, 4c, 69, 61, 72, 61, 20, 46, 6f, 72, 74, (...) 
2084:000 | DONE dir | na 16 16 |        |             |                 2e 28 20 4c 69 61 72 61  --  . (   L i a r a
2084:000 | DONE dir | na 16 16 |        |             |                 20 46 6f 72 74 68 20 66  --    F o r t h   f
2084:000 | DONE dir | na 16 16 |        |             |                 6f 72 20 74 68 65 20 57  --  o r   t h e   W
2084:000 | DONE dir | na 16 16 |        |             |                 36 35 43 32 36 35 53 58  --  6 5 C 2 6 5 S X
2084:000 | DONE dir | na 16 16 |        |             |                 42 20 29                 --  B   )
2085:000 | DONE dir | na 16 16 | 00692b | (37 bytes)  |         .byte 63, 72, 20, 2e, 28, 20, 56, 65, 72, 73, 69, 6f, 6e, (...) 
2085:000 | DONE dir | na 16 16 |        |             |                 63 72 20 2e 28 20 56 65  --  c r   . (   V e
2085:000 | DONE dir | na 16 16 |        |             |                 72 73 69 6f 6e 20 50 52  --  r s i o n   P R
2085:000 | DONE dir | na 16 16 |        |             |                 45 2d 41 4c 50 48 41 20  --  E - A L P H A  
2085:000 | DONE dir | na 16 16 |        |             |                 31 34 2e 20 46 65 62 20  --  1 4 .   F e b  
2085:000 | DONE dir | na 16 16 |        |             |                 32 30 31 37 29           --  2 0 1 7 )
2086:000 | DONE dir | na 16 16 | 006950 | (51 bytes)  |         .byte 63, 72, 20, 2e, 28, 20, 53, 63, 6f, 74, 20, 57, 2e, (...) 
2086:000 | DONE dir | na 16 16 |        |             |                 63 72 20 2e 28 20 53 63  --  c r   . (   S c
2086:000 | DONE dir | na 16 16 |        |             |                 6f 74 20 57 2e 20 53 74  --  o t   W .   S t
2086:000 | DONE dir | na 16 16 |        |             |                 65 76 65 6e 73 6f 6e 20  --  e v e n s o n  
2086:000 | DONE dir | na 16 16 |        |             |                 3c 73 63 6f 74 2e 73 74  --  < s c o t . s t
2086:000 | DONE dir | na 16 16 |        |             |                 65 76 65 6e 73 6f 6e 40  --  e v e n s o n @
2086:000 | DONE dir | na 16 16 |        |             |                 67 6d 61 69 6c 2e 63 6f  --  g m a i l . c o
2086:000 | DONE dir | na 16 16 |        |             |                 6d 3e 29                 --  m > )
2087:000 | DONE dir | na 16 16 | 006983 | (52 bytes)  |         .byte 63, 72, 20, 2e, 28, 20, 4c, 69, 61, 72, 61, 20, 46, (...) 
2087:000 | DONE dir | na 16 16 |        |             |                 63 72 20 2e 28 20 4c 69  --  c r   . (   L i
2087:000 | DONE dir | na 16 16 |        |             |                 61 72 61 20 46 6f 72 74  --  a r a   F o r t
2087:000 | DONE dir | na 16 16 |        |             |                 68 20 63 6f 6d 65 73 20  --  h   c o m e s  
2087:000 | DONE dir | na 16 16 |        |             |                 77 69 74 68 20 61 62 73  --  w i t h   a b s
2087:000 | DONE dir | na 16 16 |        |             |                 6f 6c 75 74 65 6c 79 20  --  o l u t e l y  
2087:000 | DONE dir | na 16 16 |        |             |                 4e 4f 20 57 41 52 52 41  --  N O   W A R R A
2087:000 | DONE dir | na 16 16 |        |             |                 4e 54 59 29              --  N T Y )
2088:000 | DONE dir | na 16 16 | 0069b7 | (28 bytes)  |         .byte 63, 72, 20, 2e, 28, 20, 54, 79, 70, 65, 20, 27, 62, (...) 
2088:000 | DONE dir | na 16 16 |        |             |                 63 72 20 2e 28 20 54 79  --  c r   . (   T y
2088:000 | DONE dir | na 16 16 |        |             |                 70 65 20 27 62 79 65 27  --  p e   ' b y e '
2088:000 | DONE dir | na 16 16 |        |             |                 20 74 6f 20 65 78 69 74  --    t o   e x i t
2088:000 | DONE dir | na 16 16 |        |             |                 29 20 63 72              --  )   c r
2089:000 | DONE lbl | na 16 16 | 0069d3 |             | hi-end                               
2090:000 | DONE wsp | na 16 16 |        |             |
2091:000 | DONE wsp | na 16 16 |        |             |
2092:000 | DONE cmt | na 16 16 |        |             | ; ===================================================================
2093:000 | DONE cmt | na 16 16 |        |             | ; BOTTOM INCLUDES
2094:000 | DONE wsp | na 16 16 |        |             |
2095:000 | DONE cmt | na 16 16 |        |             | ; List of Strings for Liara Forth for the W65C265SXB
2095:001 | DONE cmt | na 16 16 |        |             | ; Scot W. Stevenson <scot.stevenson@gmail.com>
2095:002 | DONE cmt | na 16 16 |        |             | ; First version: 01. Apr 2016
2095:003 | DONE cmt | na 16 16 |        |             | ; This version:  12. Feb 2017
2095:004 | DONE wsp | na 16 16 |        |             |
2095:005 | DONE cmt | na 16 16 |        |             | ; This file is included by liaraforth.tasm
2095:006 | DONE wsp | na 16 16 |        |             |
2095:007 | DONE cmt | na 16 16 |        |             | ; ===================================================================
2095:008 | DONE cmt | na 16 16 |        |             | ; GENERAL
2095:009 | DONE wsp | na 16 16 |        |             |
2095:010 | DONE cmt | na 16 16 |        |             | ; All general strings must be zero-terminated, names start with "s_"
2095:011 | DONE cmt | na 16 16 |        |             | ; TODO see if "ok" needs trailing space. The printstring routine adds the EOL
2095:012 | DONE cmt | na 16 16 |        |             | ; character
2095:013 | DONE wsp | na 16 16 |        |             |
2095:014 | DONE lbl | na 16 16 | 0069d3 |             | s_ok                                 
2095:015 | DONE dir | na 16 16 | 0069d3 | (4 bytes)   |         .byte 20, 6f, 6b, 0          ; note space at beginning
2095:015 | DONE dir | na 16 16 |        |             |                 20 6f 6b 00              --    o k .
2095:016 | DONE wsp | na 16 16 |        |             |
2095:017 | DONE wsp | na 16 16 |        |             |
2095:018 | DONE cmt | na 16 16 |        |             | ; ===================================================================
2095:019 | DONE cmt | na 16 16 |        |             | ; ERROR STRINGS
2095:020 | DONE wsp | na 16 16 |        |             |
2095:021 | DONE cmt | na 16 16 |        |             | ; All error strings must be zero-terminated, names start with "es_"
2095:022 | DONE wsp | na 16 16 |        |             |
2095:023 | DONE lbl | na 16 16 | 0069d7 |             | es_allot                             
2095:024 | DONE dir | na 16 16 | 0069d7 | (20 bytes)  |         .byte 41, 4c, 4c, 4f, 54, 20, 6f, 75, 74, 20, 6f, 66, 20, (...) 
2095:024 | DONE dir | na 16 16 |        |             |                 41 4c 4c 4f 54 20 6f 75  --  A L L O T   o u
2095:024 | DONE dir | na 16 16 |        |             |                 74 20 6f 66 20 62 6f 75  --  t   o f   b o u
2095:024 | DONE dir | na 16 16 |        |             |                 6e 64 73 00              --  n d s .
2095:025 | DONE lbl | na 16 16 | 0069eb |             | es_channel                           
2095:026 | DONE dir | na 16 16 | 0069eb | (26 bytes)  |         .byte 41, 63, 63, 65, 73, 73, 69, 6e, 67, 20, 75, 6e, 6b, (...) 
2095:026 | DONE dir | na 16 16 |        |             |                 41 63 63 65 73 73 69 6e  --  A c c e s s i n
2095:026 | DONE dir | na 16 16 |        |             |                 67 20 75 6e 6b 6e 6f 77  --  g   u n k n o w
2095:026 | DONE dir | na 16 16 |        |             |                 6e 20 63 68 61 6e 6e 65  --  n   c h a n n e
2095:026 | DONE dir | na 16 16 |        |             |                 6c 00                    --  l .
2095:027 | DONE lbl | na 16 16 | 006a05 |             | es_componly                          
2095:028 | DONE dir | na 16 16 | 006a05 | (33 bytes)  |         .byte 49, 6e, 74, 65, 72, 70, 72, 65, 74, 69, 6e, 67, 20, (...) 
2095:028 | DONE dir | na 16 16 |        |             |                 49 6e 74 65 72 70 72 65  --  I n t e r p r e
2095:028 | DONE dir | na 16 16 |        |             |                 74 69 6e 67 20 61 20 63  --  t i n g   a   c
2095:028 | DONE dir | na 16 16 |        |             |                 6f 6d 70 69 6c 65 2d 6f  --  o m p i l e - o
2095:028 | DONE dir | na 16 16 |        |             |                 6e 6c 79 20 77 6f 72 64  --  n l y   w o r d
2095:028 | DONE dir | na 16 16 |        |             |                 00                       --  .
2095:029 | DONE lbl | na 16 16 | 006a26 |             | es_defer                             
2095:030 | DONE dir | na 16 16 | 006a26 | (29 bytes)  |         .byte 44, 45, 46, 45, 52, 65, 64, 20, 77, 6f, 72, 64, 20, (...) 
2095:030 | DONE dir | na 16 16 |        |             |                 44 45 46 45 52 65 64 20  --  D E F E R e d  
2095:030 | DONE dir | na 16 16 |        |             |                 77 6f 72 64 20 6e 6f 74  --  w o r d   n o t
2095:030 | DONE dir | na 16 16 |        |             |                 20 64 65 66 69 6e 65 64  --    d e f i n e d
2095:030 | DONE dir | na 16 16 |        |             |                 20 79 65 74 00           --    y e t .
2095:031 | DONE lbl | na 16 16 | 006a43 |             | es_divzero                           
2095:032 | DONE dir | na 16 16 | 006a43 | (17 bytes)  |         .byte 44, 69, 76, 69, 73, 69, 6f, 6e, 20, 62, 79, 20, 7a, (...) 
2095:032 | DONE dir | na 16 16 |        |             |                 44 69 76 69 73 69 6f 6e  --  D i v i s i o n
2095:032 | DONE dir | na 16 16 |        |             |                 20 62 79 20 7a 65 72 6f  --    b y   z e r o
2095:032 | DONE dir | na 16 16 |        |             |                 00                       --  .
2095:033 | DONE lbl | na 16 16 | 006a54 |             | es_error                             
2095:034 | DONE dir | na 16 16 | 006a54 | (12 bytes)  |         .byte 3e, 3e, 3e, 45, 72, 72, 6f, 72, 3c, 3c, 3c, 0 
2095:034 | DONE dir | na 16 16 |        |             |                 3e 3e 3e 45 72 72 6f 72  --  > > > E r r o r
2095:034 | DONE dir | na 16 16 |        |             |                 3c 3c 3c 00              --  < < < .
2095:035 | DONE lbl | na 16 16 | 006a60 |             | es_intonly                           
2095:036 | DONE dir | na 16 16 | 006a60 | (22 bytes)  |         .byte 4e, 6f, 74, 20, 69, 6e, 20, 69, 6e, 74, 65, 72, 70, (...) 
2095:036 | DONE dir | na 16 16 |        |             |                 4e 6f 74 20 69 6e 20 69  --  N o t   i n   i
2095:036 | DONE dir | na 16 16 |        |             |                 6e 74 65 72 70 72 65 74  --  n t e r p r e t
2095:036 | DONE dir | na 16 16 |        |             |                 20 6d 6f 64 65 00        --    m o d e .
2095:037 | DONE lbl | na 16 16 | 006a76 |             | es_noname                            
2095:038 | DONE dir | na 16 16 | 006a76 | (16 bytes)  |         .byte 50, 61, 72, 73, 69, 6e, 67, 20, 66, 61, 69, 6c, 75, (...) 
2095:038 | DONE dir | na 16 16 |        |             |                 50 61 72 73 69 6e 67 20  --  P a r s i n g  
2095:038 | DONE dir | na 16 16 |        |             |                 66 61 69 6c 75 72 65 00  --  f a i l u r e .
2095:038 | DONE dir | na 16 16 |        |             |                                          -- 
2095:039 | DONE lbl | na 16 16 | 006a86 |             | es_radix                             
2095:040 | DONE dir | na 16 16 | 006a86 | (23 bytes)  |         .byte 44, 69, 67, 69, 74, 20, 6c, 61, 72, 67, 65, 72, 20, (...) 
2095:040 | DONE dir | na 16 16 |        |             |                 44 69 67 69 74 20 6c 61  --  D i g i t   l a
2095:040 | DONE dir | na 16 16 |        |             |                 72 67 65 72 20 74 68 61  --  r g e r   t h a
2095:040 | DONE dir | na 16 16 |        |             |                 6e 20 62 61 73 65 00     --  n   b a s e .
2095:041 | DONE lbl | na 16 16 | 006a9d |             | es_refill1                           
2095:042 | DONE dir | na 16 16 | 006a9d | (46 bytes)  |         .byte 51, 55, 49, 54, 20, 63, 6f, 75, 6c, 64, 20, 6e, 6f, (...) 
2095:042 | DONE dir | na 16 16 |        |             |                 51 55 49 54 20 63 6f 75  --  Q U I T   c o u
2095:042 | DONE dir | na 16 16 |        |             |                 6c 64 20 6e 6f 74 20 67  --  l d   n o t   g
2095:042 | DONE dir | na 16 16 |        |             |                 65 74 20 69 6e 70 75 74  --  e t   i n p u t
2095:042 | DONE dir | na 16 16 |        |             |                 20 28 52 45 46 49 4c 4c  --    ( R E F I L L
2095:042 | DONE dir | na 16 16 |        |             |                 20 72 65 74 75 72 6e 65  --    r e t u r n e
2095:042 | DONE dir | na 16 16 |        |             |                 64 20 2d 31 29 00        --  d   - 1 ) .
2095:043 | DONE lbl | na 16 16 | 006acb |             | es_refill2                           
2095:044 | DONE dir | na 16 16 | 006acb | (32 bytes)  |         .byte 49, 6c, 6c, 65, 67, 61, 6c, 20, 53, 4f, 55, 52, 43, (...) 
2095:044 | DONE dir | na 16 16 |        |             |                 49 6c 6c 65 67 61 6c 20  --  I l l e g a l  
2095:044 | DONE dir | na 16 16 |        |             |                 53 4f 55 52 43 45 2d 49  --  S O U R C E - I
2095:044 | DONE dir | na 16 16 |        |             |                 44 20 64 75 72 69 6e 67  --  D   d u r i n g
2095:044 | DONE dir | na 16 16 |        |             |                 20 52 45 46 49 4c 4c 00  --    R E F I L L .
2095:044 | DONE dir | na 16 16 |        |             |                                          -- 
2095:045 | DONE lbl | na 16 16 | 006aeb |             | es_underflow                         
2095:046 | DONE dir | na 16 16 | 006aeb | (16 bytes)  |         .byte 53, 74, 61, 63, 6b, 20, 75, 6e, 64, 65, 72, 66, 6c, (...) 
2095:046 | DONE dir | na 16 16 |        |             |                 53 74 61 63 6b 20 75 6e  --  S t a c k   u n
2095:046 | DONE dir | na 16 16 |        |             |                 64 65 72 66 6c 6f 77 00  --  d e r f l o w .
2095:046 | DONE dir | na 16 16 |        |             |                                          -- 
2095:047 | DONE lbl | na 16 16 | 006afb |             | es_syntax                            
2095:048 | DONE dir | na 16 16 | 006afb | (16 bytes)  |         .byte 20, 55, 6e, 64, 65, 66, 69, 6e, 65, 64, 20, 77, 6f, (...) 
2095:048 | DONE dir | na 16 16 |        |             |                 20 55 6e 64 65 66 69 6e  --    U n d e f i n
2095:048 | DONE dir | na 16 16 |        |             |                 65 64 20 77 6f 72 64 00  --  e d   w o r d .
2095:048 | DONE dir | na 16 16 |        |             |                                          -- 
2095:049 | DONE wsp | na 16 16 |        |             |
2095:050 | DONE wsp | na 16 16 |        |             |
2095:051 | DONE cmt | na 16 16 |        |             | ; ===================================================================
2095:052 | DONE cmt | na 16 16 |        |             | ; ANSI VT-100 SEQUENCES
2095:053 | DONE wsp | na 16 16 |        |             |
2095:054 | DONE lbl | na 16 16 | 006b0b |             | vt100_page                           
2095:055 | DONE dir | na 16 16 | 006b0b | (5 bytes)   |         .byte AscESC, 5b, 32, 4a, 0  ; clear screen
2095:055 | DONE dir | na 16 16 |        |             |                 1b 5b 32 4a 00           --  . [ 2 J .
2095:056 | DONE lbl | na 16 16 | 006b10 |             | vt100_home                           
2095:057 | DONE dir | na 16 16 | 006b10 | (4 bytes)   |         .byte AscESC, 5b, 48, 0      ; cursor home
2095:057 | DONE dir | na 16 16 |        |             |                 1b 5b 48 00              --  . [ H .
2095:058 | DONE wsp | na 16 16 |        |             |
2095:059 | DONE wsp | na 16 16 |        |             |
2095:060 | DONE cmt | na 16 16 |        |             | ; ===================================================================
2095:061 | DONE cmt | na 16 16 |        |             | ; TESTING STRINGS
2095:062 | DONE wsp | na 16 16 |        |             |
2095:063 | DONE cmt | na 16 16 |        |             | ; These strings are only used during testing and are removed as Liara Forth is
2095:064 | DONE cmt | na 16 16 |        |             | ; developed. All start with "tests_"
2095:065 | DONE wsp | na 16 16 |        |             |
2095:066 | DONE lbl | na 16 16 | 006b14 |             | tests_prev_cmd                       
2095:067 | DONE dir | na 16 16 | 006b14 | (19 bytes)  |         .byte 28, 70, 72, 65, 76, 69, 6f, 75, 73, 20, 63, 6f, 6d, (...) 
2095:067 | DONE dir | na 16 16 |        |             |                 28 70 72 65 76 69 6f 75  --  ( p r e v i o u
2095:067 | DONE dir | na 16 16 |        |             |                 73 20 63 6f 6d 6d 61 6e  --  s   c o m m a n
2095:067 | DONE dir | na 16 16 |        |             |                 64 29 00                 --  d ) .
2095:068 | DONE lbl | na 16 16 | 006b27 |             | tests_next_cmd                       
2095:069 | DONE dir | na 16 16 | 006b27 | (15 bytes)  |         .byte 28, 6e, 65, 78, 74, 20, 63, 6f, 6d, 6d, 61, 6e, 64, (...) 
2095:069 | DONE dir | na 16 16 |        |             |                 28 6e 65 78 74 20 63 6f  --  ( n e x t   c o
2095:069 | DONE dir | na 16 16 |        |             |                 6d 6d 61 6e 64 29 00     --  m m a n d ) .
2095:070 | DONE wsp | na 16 16 |        |             |
2095:071 | DONE wsp | na 16 16 |        |             |
2095:072 | DONE cmt | na 16 16 |        |             | ; ===================================================================
2095:073 | DONE cmt | na 16 16 |        |             | ; ALPHABET STRINGS
2095:074 | DONE wsp | na 16 16 |        |             |
2095:075 | DONE cmt | na 16 16 |        |             | ; Leave alphastr as the last entry in the source code to make it easier to
2095:076 | DONE cmt | na 16 16 |        |             | ; see where this section ends. This cannot be a zero-terminated string
2095:077 | DONE wsp | na 16 16 |        |             |
2095:078 | DONE lbl | na 16 16 | 006b36 |             | alphastr                             
2095:079 | DONE dir | na 16 16 | 006b36 | (35 bytes)  |         .byte 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 61, 62, 63, (...) 
2095:079 | DONE dir | na 16 16 |        |             |                 30 31 32 33 34 35 36 37  --  0 1 2 3 4 5 6 7
2095:079 | DONE dir | na 16 16 |        |             |                 38 39 61 62 63 64 65 66  --  8 9 a b c d e f
2095:079 | DONE dir | na 16 16 |        |             |                 67 68 69 6a 6b 6c 6d 6e  --  g h i j k l m n
2095:079 | DONE dir | na 16 16 |        |             |                 6f 70 71 72 73 74 75 76  --  o p q r s t u v
2095:079 | DONE dir | na 16 16 |        |             |                 77 79 7a                 --  w y z
2096:000 | DONE wsp | na 16 16 |        |             |
2097:000 | DONE cmt | na 16 16 |        |             | ; ===================================================================
2098:000 | DONE cmt | na 16 16 |        |             | ; TESTING ROUTINES (UNCOMMENT FOR USE)
2099:000 | DONE wsp | na 16 16 |        |             |
2100:000 | DONE cmt | na 16 16 |        |             |                 ; --- TODO TESTING (PRINT ONE "A") ---
2101:000 | DONE cmt | na 16 16 |        |             |                 ; lda.# 61
2102:000 | DONE cmt | na 16 16 |        |             |                 ; jsr put_chr
2103:000 | DONE cmt | na 16 16 |        |             |                 ; .!a16
2104:000 | DONE cmt | na 16 16 |        |             |                 ; brk 00
2105:000 | DONE cmt | na 16 16 |        |             |                 ; --- TODO TESTING ---
2106:000 | DONE wsp | na 16 16 |        |             |
2107:000 | DONE cmt | na 16 16 |        |             |                 ; --- TESTING SHOW WHAT IS TOS ---
2108:000 | DONE cmt | na 16 16 |        |             |                 ; tya
2109:000 | DONE cmt | na 16 16 |        |             |                 ; and.# 0ff00
2110:000 | DONE cmt | na 16 16 |        |             |                 ; xba
2111:000 | DONE cmt | na 16 16 |        |             |                 ; jsr byte_to_ascii
2112:000 | DONE cmt | na 16 16 |        |             |                 ; tya
2113:000 | DONE cmt | na 16 16 |        |             |                 ; and.# 00ff
2114:000 | DONE cmt | na 16 16 |        |             |                 ; jsr byte_to_ascii
2115:000 | DONE cmt | na 16 16 |        |             |                 ; jsr xt_cr
2116:000 | DONE cmt | na 16 16 |        |             |                 ; --------------------------------
2117:000 | DONE wsp | na 16 16 |        |             |
2118:000 | DONE cmt | na 16 16 |        |             |                 ; --- TODO TESTING (HALT CPU) ---
2119:000 | DONE cmt | na 16 16 |        |             |                 ; brk 00 ; BRK for 265sxb tests (drops back to Mensch Monitor)
2120:000 | DONE cmt | na 16 16 |        |             |                 ; stp    ; STP for crude65816 emulator tests
2121:000 | DONE cmt | na 16 16 |        |             |                 ; --- TODO TESTING ---
2122:000 | DONE wsp | na 16 16 |        |             |
2123:000 | DONE wsp | na 16 16 |        |             |
2124:000 | DONE cmt | na 16 16 |        |             | ; ===================================================================
2125:000 | DONE cmt | na 16 16 |        |             | ; END
2126:000 | DONE wsp | na 16 16 |        |             |
2127:000 | DONE dir | na 16 16 |        |             |         .end                         

MACROS:
        (none)

SYMBOL TABLE:
- accept_bs                   : 0061c6
- accept_eol                  : 0061be
- accept_loop                 : 006173
- accept_nonzero              : 006166
- allot_done                  : 006206
- allot_error                 : 0061f5
- allot_minus                 : 0061fb
- allot_real_gone             : 006208
- alphastr                    : 006b36
- ascbell                     : 000007
- ascbs                       : 000008
- asccc                       : 000003
- asccn                       : 00000e
- asccp                       : 000010
- asccr                       : 00000d
- ascdel                      : 00007f
- ascesc                      : 00001b
- asclf                       : 00000a
- ascsp                       : 000020
- brg_value                   : 00000b
- buffers                     : 007c00
- buffersize                  : 0000ff
- byte_to_ascii               : 0068ec
- cib                         : 00020c
- ciblen                      : 00020e
- co                          : 000040
- compex                      : 0068a4
- compex_got_name_token       : 0068b9
- compex_line_done            : 0068c7
- compex_loop                 : 0068a4
- cp                          : 000200
- cp0                         : 000300
- create_got_name             : 006257
- directpage                  : 000200
- directpage-multiple         : 007400
- doconst                     : 006896
- dots_done                   : 006336
- dots_loop                   : 00631c
- dots_not_empty              : 006316
- dovar                       : 00688f
- dp                          : 000202
- dsp0                        : 0002f0
- dump_byte_loop              : 006347
- dump_done                   : 00635c
- dump_line_loop              : 006341
- error                       : 0068ce
- es_allot                    : 0069d7
- es_channel                  : 0069eb
- es_componly                 : 006a05
- es_defer                    : 006a26
- es_divzero                  : 006a43
- es_error                    : 006a54
- es_intonly                  : 006a60
- es_noname                   : 006a76
- es_radix                    : 006a86
- es_refill1                  : 006a9d
- es_refill2                  : 006acb
- es_syntax                   : 006afb
- es_underflow                : 006aeb
- execute_ip                  : 00639a
- find-name_all_chars         : 0063d6
- find-name_char_nomatcnt_8   : 0063d2
- find-name_chars             : 0063c7
- find-name_done              : 0063fc
- find-name_failure_16        : 0063f9
- find-name_loop              : 0063b2
- find-name_next_entry        : 0063bb
- find-name_success           : 0063f3
- get_chr                     : 006041
- get_chr_wait                : 006046
- have_chr?                   : 006050
- hi-end                      : 0069d3
- hi-start                    : 006908
- hw_acsr0                    : 00df70
- hw_acsr1                    : 00df72
- hw_acsr2                    : 00df74
- hw_acsr3                    : 00df76
- hw_artd0                    : 00df71
- hw_artd1                    : 00df73
- hw_artd2                    : 00df75
- hw_artd3                    : 00df77
- hw_bcr                      : 00df40
- hw_eier                     : 00df47
- hw_eifr                     : 00df45
- hw_pcs7                     : 00df27
- hw_pd0                      : 00df00
- hw_pd1                      : 00df01
- hw_pd2                      : 00df02
- hw_pd3                      : 00df03
- hw_pd4                      : 00df20
- hw_pd5                      : 00df21
- hw_pd6                      : 00df22
- hw_pd7                      : 00df23
- hw_pdd0                     : 00df04
- hw_pdd1                     : 00df05
- hw_pdd2                     : 00df06
- hw_pdd3                     : 00df07
- hw_pdd4                     : 00df24
- hw_pdd5                     : 00df25
- hw_pdd6                     : 00df26
- hw_sscr                     : 00df41
- hw_t0ch                     : 00df61
- hw_t0cl                     : 00df60
- hw_t1ch                     : 00df63
- hw_t1cl                     : 00df62
- hw_t2ch                     : 00df65
- hw_t2cl                     : 00df64
- hw_t3ch                     : 00df67
- hw_t3cl                     : 00df66
- hw_t4ch                     : 00df69
- hw_t4cl                     : 00df68
- hw_t5ch                     : 00df6b
- hw_t5cl                     : 00df6a
- hw_t6ch                     : 00df6d
- hw_t6cl                     : 00df6c
- hw_t7ch                     : 00df6f
- hw_t7cl                     : 00df6e
- hw_tcr                      : 00df42
- hw_ter                      : 00df43
- hw_tier                     : 00df46
- hw_tifr                     : 00df44
- hw_uier                     : 00df49
- hw_uifr                     : 00df48
- ibuffer1                    : 007c00
- ibuffer2                    : 007d00
- im                          : 000020
- insrc                       : 00020a
- maxram-multiple             : 006fff
- maxram-single               : 007bff
- nc                          : 000010
- nibble_to_ascii             : 0068f5
- nt_2drop                    : 006841
- nt_2dup                     : 0066d4
- nt_abort                    : 0065f0
- nt_abs                      : 0066e0
- nt_accept                   : 0067f6
- nt_allot                    : 0066a6
- nt_bell                     : 0065bd
- nt_bl                       : 006630
- nt_bye                      : 00658d
- nt_cells                    : 006699
- nt_cold                     : 006598
- nt_comma                    : 0067ed
- nt_constant                 : 00671e
- nt_count                    : 0065e3
- nt_cr                       : 006626
- nt_create                   : 0066b3
- nt_depth                    : 006711
- nt_dot                      : 006675
- nt_dotparen                 : 00665f
- nt_dots                     : 006655
- nt_drop                     : 006883
- nt_dump                     : 0065b1
- nt_dup                      : 006878
- nt_evaluate                 : 006689
- nt_execute                  : 006826
- nt_false                    : 006777
- nt_fetch                    : 00685a
- nt_find-name                : 0067ab
- nt_here                     : 006835
- nt_minus                    : 006751
- nt_name-int                 : 006616
- nt_name-string              : 0066c1
- nt_nip                      : 006810
- nt_one                      : 006799
- nt_one-minus                : 006763
- nt_one-plus                 : 00676d
- nt_over                     : 00684e
- nt_pad                      : 00667e
- nt_page                     : 0065d7
- nt_parse                    : 0065fd
- nt_parse-name               : 0067ca
- nt_plus                     : 00675a
- nt_quit                     : 00660a
- nt_refill                   : 0067bc
- nt_rot                      : 00681b
- nt_source                   : 006703
- nt_source-id                : 0067dc
- nt_space                    : 006648
- nt_spaces                   : 00663a
- nt_state                    : 0066eb
- nt_store                    : 006863
- nt_swap                     : 00686c
- nt_tick                     : 00673e
- nt_to-in                    : 0066f8
- nt_true                     : 006784
- nt_tuck                     : 006804
- nt_two                      : 006790
- nt_two-star                 : 006747
- nt_type                     : 006669
- nt_unused                   : 0065c9
- nt_variable                 : 00672e
- nt_words                    : 0065a4
- nt_zero                     : 0067a2
- output                      : 000208
- padoffset                   : 00007f
- padsize                     : 0000ff
- parse-name_empty_line       : 006455
- parse-name_found            : 006469
- parse-name_loop             : 006448
- parse_found_delimiter       : 006495
- parse_loop                  : 006488
- parse_reached_eol           : 006499
- physicalram                 : 007fff
- piblen                      : 000210
- print_string                : 0068d4
- print_string_done           : 0068e3
- put_chr                     : 006030
- put_chr_wait                : 006036
- pw                          : 000080
- quit_get_line               : 0060a7
- quit_ok                     : 0060c9
- quit_refill_successful      : 0060b5
- refill_source_is_not_string : 0064d4
- refill_src_not_kbd          : 0064cb
- reset_hardware              : 006000
- s_ok                        : 0069d3
- spaces_done                 : 006507
- stack-multiple              : 007000
- stack0                      : 007fff
- start                       : 006060
- state                       : 000214
- string_to_lowercase         : 006907
- tests_next_cmd              : 006b27
- tests_prev_cmd              : 006b14
- tick_have_nt                : 006153
- tick_have_word              : 006147
- tmp1                        : 000216
- tmp2                        : 000218
- tmp3                        : 00021a
- tmpdsp                      : 000204
- tmptos                      : 000206
- toin                        : 000212
- type_done                   : 006545
- type_loop                   : 006539
- vt100_home                  : 006b10
- vt100_page                  : 006b0b
- words_loop                  : 00656f
- xt_2drop                    : 006129
- xt_2dup                     : 006130
- xt_abort                    : 006094
- xt_abs                      : 006157
- xt_accept                   : 006160
- xt_allot                    : 0061e4
- xt_bell                     : 00620d
- xt_bl                       : 006214
- xt_bye                      : 00621c
- xt_cold                     : 00605d
- xt_comma                    : 0060db
- xt_constant                 : 006220
- xt_count                    : 006236
- xt_cr                       : 006245
- xt_create                   : 00624c
- xt_depth                    : 0062bf
- xt_dot                      : 0062ce
- xt_dotparen                 : 0062e4
- xt_dots                     : 0062f2
- xt_drop                     : 00633a
- xt_dump                     : 00633f
- xt_dup                      : 006366
- xt_evaluate                 : 00636b
- xt_execute                  : 00639d
- xt_fetch                    : 0060f1
- xt_find-name                : 0063a8
- xt_here                     : 0063ff
- xt_minus                    : 0060fe
- xt_name-int                 : 006406
- xt_name-string              : 00640f
- xt_nip                      : 006420
- xt_one                      : 006111
- xt_one-minus                : 006119
- xt_one-plus                 : 00611b
- xt_over                     : 006423
- xt_pad                      : 00642a
- xt_page                     : 006436
- xt_parse                    : 006475
- xt_parse-name               : 006443
- xt_plus                     : 0060f6
- xt_quit                     : 00609c
- xt_refill                   : 0064a8
- xt_rot                      : 0064db
- xt_source                   : 0064e4
- xt_source-id                : 0064f1
- xt_space                    : 0064f8
- xt_spaces                   : 0064ff
- xt_state                    : 00650c
- xt_store                    : 0060e7
- xt_swap                     : 006514
- xt_tick                     : 00613b
- xt_to-in                    : 0060d3
- xt_true                     : 00651a
- xt_tuck                     : 006522
- xt_two                      : 00611d
- xt_two-star                 : 006125
- xt_type                     : 00652b
- xt_unused                   : 00654c
- xt_variable                 : 006558
- xt_words                    : 006565
- xt_zero                     : 006109
- z_2drop                     : 00612f
- z_2dup                      : 00613a
- z_abort                     : 0060d2
- z_abs                       : 00615f
- z_accept                    : 0061e3
- z_allot                     : 00620c
- z_bell                      : 006213
- z_bl                        : 00621b
- z_bye                       : 00621f
- z_cold                      : 0060d2
- z_comma                     : 0060e6
- z_constant                  : 006235
- z_count                     : 006244
- z_cr                        : 00624b
- z_create                    : 0062be
- z_depth                     : 0062cd
- z_dot                       : 0062e3
- z_dotparen                  : 0062f1
- z_dots                      : 006339
- z_drop                      : 00633e
- z_dump                      : 006365
- z_dup                       : 00636a
- z_evaluate                  : 006399
- z_execute                   : 0063a7
- z_fetch                     : 0060f5
- z_find-name                 : 0063fe
- z_here                      : 006405
- z_minus                     : 006108
- z_name-int                  : 00640e
- z_name-string               : 00641f
- z_nip                       : 006422
- z_one                       : 006118
- z_one-minus                 : 00611a
- z_one-plus                  : 00611c
- z_over                      : 006429
- z_pad                       : 006435
- z_page                      : 006442
- z_parse                     : 0064a7
- z_parse-name                : 0064a7
- z_plus                      : 0060fd
- z_quit                      : 0060d2
- z_refill                    : 0064da
- z_rot                       : 0064e3
- z_source                    : 0064f0
- z_source-id                 : 0064f7
- z_space                     : 0064fe
- z_spaces                    : 00650b
- z_state                     : 006513
- z_store                     : 0060f0
- z_swap                      : 006519
- z_tick                      : 006156
- z_to-in                     : 0060da
- z_true                      : 006521
- z_tuck                      : 00652a
- z_two                       : 006124
- z_two-star                  : 006128
- z_type                      : 00654b
- z_unused                    : 006557
- z_variable                  : 006564
- z_words                     : 00658c
- z_zero                      : 006110
