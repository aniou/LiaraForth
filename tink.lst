A Tinkerer's Assembler for the 6502/65c02/65816
Version BETA 17. Feb 2017
Copyright 2015-2017 Scot W. Stevenson <scot.stevenson@gmail.com>
This program comes with ABSOLUTELY NO WARRANTY

Code listing for file liaraforth.tasm
Generated on Thu Mar  9 12:21:54 2017
Target MPU: 65816
External files loaded: 5
Number of passes executed: 35
Number of steps executed: 10
Assembly time: 0.24770 seconds
Code origin: 005000
Bytes of machine code: 8270

LISTING:
   Line  Status/Type State/Width Address     Bytes     Instruction
   1:000 | DONE cmt | em  8  8 |        |             | ; Liara Forth for the W65C265SXB
   2:000 | DONE cmt | em  8  8 |        |             | ; Scot W. Stevenson <scot.stevenson@gmail.com>
   3:000 | DONE cmt | em  8  8 |        |             | ; First version: 01. Apr 2016
   4:000 | DONE cmt | em  8  8 |        |             | ; This version: 08. Mar 2017
   5:000 | DONE wsp | em  8  8 |        |             |
   6:000 | DONE cmt | em  8  8 |        |             | ; This code is written in Typist's Assembler Notation for the 65c02/65816
   7:000 | DONE cmt | em  8  8 |        |             | ; See docs/MANUAL.md for more information
   8:000 | DONE wsp | em  8  8 |        |             |
   9:000 | DONE dir | em  8  8 |        |             |         .mpu 65816                   
  10:000 | DONE dir | em  8  8 |        |             |         .origin 5000                 start of code to save to built-in RAM
  11:000 | DONE cmt | em  8  8 |        |             | ;       .origin 8000    ; start of code to save to Flash memory
  12:000 | DONE lbl | em  8  8 | 005000 |             | code0                                ; used to calculate UNUSED
  13:000 | DONE wsp | em  8  8 |        |             |
  14:000 | DONE cmt | em  8  8 |        |             | ; ===================================================================
  15:000 | DONE cmt | em  8  8 |        |             | ; TOP INCLUDES
  16:000 | DONE wsp | em  8  8 |        |             |
  17:000 | DONE cmt | em  8  8 |        |             | ; Definitions for Liara Forth for the W65C265SXB
  17:001 | DONE cmt | em  8  8 |        |             | ; Scot W. Stevenson <scot.stevenson@gmail.com>
  17:002 | DONE cmt | em  8  8 |        |             | ; First version: 01. Apr 2016
  17:003 | DONE cmt | em  8  8 |        |             | ; This version: 05. Mar 2017
  17:004 | DONE wsp | em  8  8 |        |             |
  17:005 | DONE cmt | em  8  8 |        |             | ; This file is included by liaraforth.tasm
  17:006 | DONE wsp | em  8  8 |        |             |
  17:007 | DONE cmt | em  8  8 |        |             | ; Note that Typist's Assembler Notation does not distinguish between
  17:008 | DONE cmt | em  8  8 |        |             | ; upper andlower case. Variations in case are for human readers only.
  17:009 | DONE wsp | em  8  8 |        |             |
  17:010 | DONE cmt | em  8  8 |        |             | ; I/O facilities are handled in the separate kernel files. The definitions for
  17:011 | DONE cmt | em  8  8 |        |             | ; multitasking are preliminary and will probably change
  17:012 | DONE wsp | em  8  8 |        |             |
  17:013 | DONE cmt | em  8  8 |        |             | ; ===================================================================
  17:014 | DONE cmt | em  8  8 |        |             | ; CONTROL VALUES
  17:015 | DONE wsp | em  8  8 |        |             |
  17:016 | DONE cmt | em  8  8 |        |             |         ; NC_LIMIT gives the number of maximum bytes the code of a word may be
  17:017 | DONE cmt | em  8  8 |        |             |         ; long and still be compiled natively - see COMPILE, for details.
  17:018 | DONE cmt | em  8  8 |        |             |         ; A value of zero means a word is always compiled as a subroutine.
  17:019 | DONE cmt | em  8  8 |        |             |         ; TODO expose this to the user
  17:020 | DONE dir | em  8  8 |        |             |         .equ nc_limit 0              
  17:021 | DONE wsp | em  8  8 |        |             |
  17:022 | DONE cmt | em  8  8 |        |             | ; ===================================================================
  17:023 | DONE cmt | em  8  8 |        |             | ; MEMORY MAP
  17:024 | DONE cmt | em  8  8 |        |             | ; We reuse the memory that the Mensch Monitor had been using
  17:025 | DONE wsp | em  8  8 |        |             |
  17:026 | DONE cmt | em  8  8 |        |             |         ; TODO add any extra RAM in other banks
  17:027 | DONE cmt | em  8  8 |        |             |         ; TODO add stuff for multitasking
  17:028 | DONE wsp | em  8  8 |        |             |
  17:029 | DONE cmt | em  8  8 |        |             |         ;  00:0000  +-------------------+  ram-start, dpage, user0
  17:030 | DONE cmt | em  8  8 |        |             |         ;           |                   |
  17:031 | DONE cmt | em  8  8 |        |             |         ;           |  ^  Data Stack    |  <-- dsp
  17:032 | DONE cmt | em  8  8 |        |             |         ;           |  |                |
  17:033 | DONE cmt | em  8  8 |        |             |         ;  00:0100  +-------------------+  dsp0, stack
  17:034 | DONE cmt | em  8  8 |        |             |         ;           |                   |
  17:035 | DONE cmt | em  8  8 |        |             |         ;           |  ^  Return Stack  |  <-- rsp
  17:036 | DONE cmt | em  8  8 |        |             |         ;           |  |                |
  17:037 | DONE cmt | em  8  8 |        |             |         ;  00:0200  +-------------------+  rsp0, buffer, buffer0
  17:038 | DONE cmt | em  8  8 |        |             |         ;           |  |                |
  17:039 | DONE cmt | em  8  8 |        |             |         ;           |  v  Input Buffer  |
  17:040 | DONE cmt | em  8  8 |        |             |         ;           |                   |
  17:041 | DONE cmt | em  8  8 |        |             |         ;  00:0300  +-------------------+  cp0
  17:042 | DONE cmt | em  8  8 |        |             |         ;           |  |                |
  17:043 | DONE cmt | em  8  8 |        |             |         ;           |  v  Dictionary    |  <-- cp
  17:044 | DONE cmt | em  8  8 |        |             |         ;           |                   |
  17:045 | DONE cmt | em  8  8 |        |             |         ;   (...)   ~~~~~~~~~~~~~~~~~~~~~
  17:046 | DONE cmt | em  8  8 |        |             |         ;           |                   |
  17:047 | DONE cmt | em  8  8 |        |             |         ;           |                   |
  17:048 | DONE cmt | em  8  8 |        |             |         ;  00:7fff  +-------------------+  ram-end
  17:049 | DONE wsp | em  8  8 |        |             |
  17:050 | DONE cmt | em  8  8 |        |             |         ; Hard physical addresses
  17:051 | DONE dir | em  8  8 |        |             |         .equ ram-start  0000         start of installed RAM
  17:052 | DONE dir | em  8  8 |        |             |         .equ ram-end { 8000 - 1 }    end of 32k installed RAM
  17:053 | DONE wsp | em  8  8 |        |             |
  17:054 | DONE cmt | em  8  8 |        |             |         ; Soft physical addresses
  17:055 | DONE dir | em  8  8 |        |             |         .equ dpage      ram-start    direct page:       0000 - 00ff
  17:056 | DONE dir | em  8  8 |        |             |         .equ stack { 000000 + 0100 } return stack area: 0100 - 01ff
  17:057 | DONE dir | em  8  8 |        |             |         .equ buffer0 { stack + 0100 } buffer areas:      0200 - 02ff
  17:058 | DONE wsp | em  8  8 |        |             |
  17:059 | DONE cmt | em  8  8 |        |             |         ; Defined locations
  17:060 | DONE dir | em  8  8 |        |             |         .equ user0      dpage        user and system variables
  17:061 | DONE dir | em  8  8 |        |             |         .equ dsp0 { stack - 1 }      initial Data Stack Pointer:   00ff
  17:062 | DONE dir | em  8  8 |        |             |         .equ stack0 { buffer0 - 1 }  initial Return Stack Pointer: 01ff
  17:063 | DONE wsp | em  8  8 |        |             |
  17:064 | DONE cmt | em  8  8 |        |             |         ; Buffers
  17:065 | DONE dir | em  8  8 |        |             |         .equ bsize      0080         size of input/output buffers
  17:066 | DONE dir | em  8  8 |        |             |         .equ buffer1 { buffer0 + 000080 } output buffer 0280 (UNUSED)
  17:067 | DONE wsp | em  8  8 |        |             |
  17:068 | DONE cmt | em  8  8 |        |             |         ; Dictionary RAM
  17:069 | DONE dir | em  8  8 |        |             |         .equ cp0 { buffer1 + 000080 } Dictionary starts after last buffer
  17:070 | DONE dir | em  8  8 |        |             |         .equ cp-end { code0 - 1 }    Last RAM byte available
  17:071 | DONE wsp | em  8  8 |        |             |
  17:072 | DONE cmt | em  8  8 |        |             |         ; Other locations
  17:073 | DONE dir | em  8  8 |        |             |         .equ padoffset  0ff          offset from CP to PAD (holds number strings)
  17:074 | DONE wsp | em  8  8 |        |             |
  17:075 | DONE wsp | em  8  8 |        |             |
  17:076 | DONE cmt | em  8  8 |        |             | ; ===================================================================
  17:077 | DONE cmt | em  8  8 |        |             | ; DIRECT PAGE ADDRESSES
  17:078 | DONE wsp | em  8  8 |        |             |
  17:079 | DONE cmt | em  8  8 |        |             | ; All are one cell (two bytes) long to prevent weird errors
  17:080 | DONE cmt | em  8  8 |        |             | ; TODO rewrite with USER variables
  17:081 | DONE dir | em  8  8 |        |             |         .equ cp { 000000 + &00 }     Compiler Pointer, 2 bytes
  17:082 | DONE dir | em  8  8 |        |             |         .equ dp { 000000 + &02 }     Dictionary Pointer, 2 bytes
  17:083 | DONE dir | em  8  8 |        |             |         .equ workword { 000000 + &04 } Currently compiliing word
  17:084 | DONE dir | em  8  8 |        |             |         .equ insrc { 000000 + &06 }  Input Source for SOURCE-ID
  17:085 | DONE dir | em  8  8 |        |             |         .equ cib { 000000 + &08 }    Address of current input buffer
  17:086 | DONE dir | em  8  8 |        |             |         .equ ciblen { 000000 + &10 } Length of current input buffer
  17:087 | DONE dir | em  8  8 |        |             |         .equ toin { 000000 + &12 }   Pointer to CIB (>IN in Forth)
  17:088 | DONE dir | em  8  8 |        |             |         .equ output { 000000 + &14 } Jump target for EMIT
  17:089 | DONE dir | em  8  8 |        |             |         .equ input { 000000 + &16 }  Jump target for KEY
  17:090 | DONE dir | em  8  8 |        |             |         .equ havekey { 000000 + &18 } Jump target for KEY?
  17:091 | DONE dir | em  8  8 |        |             |         .equ state { 000000 + &20 }  STATE: -1 compile, 0 interpret
  17:092 | DONE dir | em  8  8 |        |             |         .equ base { 000000 + &22 }   Radix for number conversion
  17:093 | DONE dir | em  8  8 |        |             |         .equ tohold { 000000 + &24 } Pointer for formatted output
  17:094 | DONE dir | em  8  8 |        |             |         .equ tmpbranch { 000000 + &26 } temp storage for 0BRANCH, BRANCH only
  17:095 | DONE dir | em  8  8 |        |             |         .equ tmp1 { 000000 + &28 }   Temporary storage
  17:096 | DONE dir | em  8  8 |        |             |         .equ tmp2 { 000000 + &30 }   Temporary storage
  17:097 | DONE dir | em  8  8 |        |             |         .equ tmp3 { 000000 + &32 }   Temporary storage
  17:098 | DONE dir | em  8  8 |        |             |         .equ tmpdsp { 000000 + &34 } Temporary DSP (X) storage, 2 bytes
  17:099 | DONE dir | em  8  8 |        |             |         .equ tmptos { 000000 + &36 } Temporary TOS (Y) storage, 2 bytes
  17:100 | DONE dir | em  8  8 |        |             |         .equ scratch { 000000 + &38 } 8 byte scratchpad (see UM/MOD)
  17:101 | DONE wsp | em  8  8 |        |             |
  17:102 | DONE wsp | em  8  8 |        |             |
  17:103 | DONE cmt | em  8  8 |        |             | ; ===================================================================
  17:104 | DONE cmt | em  8  8 |        |             | ; HELPER DEFINITIONS
  17:105 | DONE wsp | em  8  8 |        |             |
  17:106 | DONE cmt | em  8  8 |        |             | ; ASCII characters
  17:107 | DONE dir | em  8  8 |        |             |         .equ AscCC   03              break (Control-C) ASCII character
  17:108 | DONE dir | em  8  8 |        |             |         .equ AscBELL 07              ACSCII bell sound
  17:109 | DONE dir | em  8  8 |        |             |         .equ AscBS   08              backspace ASCII character
  17:110 | DONE dir | em  8  8 |        |             |         .equ AscLF   0a              line feed ASCII character
  17:111 | DONE dir | em  8  8 |        |             |         .equ AscCR   0d              carriage return ASCII character
  17:112 | DONE dir | em  8  8 |        |             |         .equ AscCN   0e              ASCII CNTR-n (for next command)
  17:113 | DONE dir | em  8  8 |        |             |         .equ AscCP   10              ASCII CNTR-p (for previous command)
  17:114 | DONE dir | em  8  8 |        |             |         .equ AscESC  1b              Escape ASCII character
  17:115 | DONE dir | em  8  8 |        |             |         .equ AscSP   20              space ASCII character
  17:116 | DONE dir | em  8  8 |        |             |         .equ AscDEL  7f              DEL ASCII character
  17:117 | DONE wsp | em  8  8 |        |             |
  17:118 | DONE cmt | em  8  8 |        |             | ; Dictionary flags. The first four are currently unused
  17:119 | DONE dir | em  8  8 |        |             |         .equ CO 0004                 Compile Only
  17:120 | DONE dir | em  8  8 |        |             |         .equ IM 0002                 Immediate Word
  17:121 | DONE dir | em  8  8 |        |             |         .equ NC 0001                 Native Compile allowed
  17:122 | DONE wsp | em  8  8 |        |             |
  18:000 | DONE wsp | em  8  8 |        |             |
  19:000 | DONE cmt | em  8  8 |        |             | ; Hardware dependencies are isolated to a large degree in kernel files. Liara
  20:000 | DONE cmt | em  8  8 |        |             | ; Forth ships with two such files: One (very ALPHA) for the crude65816 emulator,
  21:000 | DONE cmt | em  8  8 |        |             | ; and one for the 265sxb board. Only use one. Which ever kernel file is used, it
  22:000 | DONE cmt | em  8  8 |        |             | ; must contain at least the routines put_chr, get_chr and have_chr, which work
  23:000 | DONE cmt | em  8  8 |        |             | ; on the A register
  24:000 | DONE wsp | em  8  8 |        |             |
  25:000 | DONE cmt | em  8  8 |        |             | ; Basic hardware routines for Liara Forth: 265SXB version
  25:001 | DONE cmt | em  8  8 |        |             | ; Scot W. Stevenson <scot.stevenson@gmail.com>
  25:002 | DONE cmt | em  8  8 |        |             | ; First version: 04. Jan 2017
  25:003 | DONE cmt | em  8  8 |        |             | ; This version: 05. Mar 2017
  25:004 | DONE wsp | em  8  8 |        |             |
  25:005 | DONE cmt | em  8  8 |        |             | ; This section provides basic hardware interface to the 265SXB, providing at the
  25:006 | DONE cmt | em  8  8 |        |             | ; very least the the PUT_CHR, GET_CHR and HAVE_CHR routines that Liara Forth
  25:007 | DONE cmt | em  8  8 |        |             | ; uses. These MUST BE PRESENT. It is in its own section to make porting Forth
  25:008 | DONE cmt | em  8  8 |        |             | ; to other machines easier.
  25:009 | DONE wsp | em  8  8 |        |             |
  25:010 | DONE cmt | em  8  8 |        |             | ; The code here is based on Andrew Jacobs' Basic Vector Handling for the
  25:011 | DONE cmt | em  8  8 |        |             | ; W65C265SXB Development Board as part of the w65c265sxb-hacker project
  25:012 | DONE cmt | em  8  8 |        |             | ; (https://github.com/andrew-jacobs/w65c265sxb-hacker). It is released under the
  25:013 | DONE cmt | em  8  8 |        |             | ; following license:
  25:014 | DONE cmt | em  8  8 |        |             | ;
  25:015 | DONE cmt | em  8  8 |        |             | ;     This work is made available under the terms of the Creative Commons
  25:016 | DONE cmt | em  8  8 |        |             | ;     Attribution-NonCommercial-ShareAlike 4.0 International license. Open the
  25:017 | DONE cmt | em  8  8 |        |             | ;     following URL to see the details.
  25:018 | DONE cmt | em  8  8 |        |             | ;     http://creativecommons.org/licenses/by-nc-sa/4.0/
  25:019 | DONE wsp | em  8  8 |        |             |
  25:020 | DONE cmt | em  8  8 |        |             | ; Original variable names from w65c256.inc are included in comments to make
  25:021 | DONE cmt | em  8  8 |        |             | ; updates and changes easier
  25:022 | DONE wsp | em  8  8 |        |             |
  25:023 | DONE cmt | em  8  8 |        |             | ; ===================================================================
  25:024 | DONE cmt | em  8  8 |        |             | ; HARDWARE DEFINITIONS
  25:025 | DONE cmt | em  8  8 |        |             | ; These follow Andrew Jacobs' names, but lower case and with "hw_" prefixed.
  25:026 | DONE cmt | em  8  8 |        |             | ; This is the only file where symbols with the hw_ prefix may be defined or used
  25:027 | DONE wsp | em  8  8 |        |             |
  25:028 | DONE cmt | em  8  8 |        |             | ; Baud rates are calculated by the formula { osc_freq/(16*baud_rate)-1 } which we
  25:029 | DONE cmt | em  8  8 |        |             | ; can do on the fly at every assembly with the following parameters, or just calculate
  25:030 | DONE cmt | em  8  8 |        |             | ; once and then define brg_value with:
  25:031 | DONE cmt | em  8  8 |        |             | ;
  25:032 | DONE cmt | em  8  8 |        |             | ; - For  9600 baud, use &23
  25:033 | DONE cmt | em  8  8 |        |             | ; - For 19200 baud, use &11
  25:034 | DONE wsp | em  8  8 |        |             |
  25:035 | DONE cmt | em  8  8 |        |             | ;       .equ osc_freq  3686400          ; SXB runs at 3.6864MHz
  25:036 | DONE cmt | em  8  8 |        |             | ;       .equ baud_rate 19200            ; ACIA baud rate
  25:037 | DONE cmt | em  8  8 |        |             | ;	.equ baud_rate 9600             ; ACIA baud rate
  25:038 | DONE wsp | em  8  8 |        |             |
  25:039 | DONE dir | em  8  8 |        |             |         .equ brg_value &11           19200 baud
  25:040 | DONE cmt | em  8  8 |        |             | ;       .equ brg_value &23              ; 9600 baud
  25:041 | DONE wsp | em  8  8 |        |             |
  25:042 | DONE dir | em  8  8 |        |             |         .equ hw_pd0  0df00           Port 0 Data Register
  25:043 | DONE dir | em  8  8 |        |             |         .equ hw_pd1  0df01           Port 1 Data Register
  25:044 | DONE dir | em  8  8 |        |             |         .equ hw_pd2  0df02           Port 2 Data Register
  25:045 | DONE dir | em  8  8 |        |             |         .equ hw_pd3  0df03           Port 3 Data Register
  25:046 | DONE dir | em  8  8 |        |             |         .equ hw_pdd0 0df04           Port 0 Data Direction Register
  25:047 | DONE dir | em  8  8 |        |             |         .equ hw_pdd1 0df05           Port 1 Data Direction Register
  25:048 | DONE dir | em  8  8 |        |             |         .equ hw_pdd2 0df06           Port 2 Data Direction Register
  25:049 | DONE dir | em  8  8 |        |             |         .equ hw_pdd3 0df07           Port 3 Data Direction Register
  25:050 | DONE wsp | em  8  8 |        |             |
  25:051 | DONE dir | em  8  8 |        |             |         .equ hw_pd4  0df20           Port 4 Data Register
  25:052 | DONE dir | em  8  8 |        |             |         .equ hw_pd5  0df21           Port 5 Data Register
  25:053 | DONE dir | em  8  8 |        |             |         .equ hw_pd6  0df22           Port 6 Data Register
  25:054 | DONE dir | em  8  8 |        |             |         .equ hw_pd7  0df23           Port 7 Data Register
  25:055 | DONE dir | em  8  8 |        |             |         .equ hw_pdd4 0df24           Port 4 Data Direction Register
  25:056 | DONE dir | em  8  8 |        |             |         .equ hw_pdd5 0df25           Port 5 Data Direction Register
  25:057 | DONE dir | em  8  8 |        |             |         .equ hw_pdd6 0df26           Port 6 Data Direction Register
  25:058 | DONE dir | em  8  8 |        |             |         .equ hw_pcs7 0df27           Port 7 Chip Select
  25:059 | DONE wsp | em  8  8 |        |             |
  25:060 | DONE dir | em  8  8 |        |             |         .equ hw_bcr  0df40           Bus Control Register
  25:061 | DONE dir | em  8  8 |        |             |         .equ hw_sscr 0df41           System Speed Control Register
  25:062 | DONE dir | em  8  8 |        |             |         .equ hw_tcr  0df42           Timer Control Register
  25:063 | DONE dir | em  8  8 |        |             |         .equ hw_ter  0df43           Timer Enable Register
  25:064 | DONE dir | em  8  8 |        |             |         .equ hw_tifr 0df44           Timer Interrupt Flag Register
  25:065 | DONE dir | em  8  8 |        |             |         .equ hw_eifr 0df45           Edge Interrupt Flag Register
  25:066 | DONE dir | em  8  8 |        |             |         .equ hw_tier 0df46           Timer Interrupt Enable Register
  25:067 | DONE dir | em  8  8 |        |             |         .equ hw_eier 0df47           Edge Interrupt Enable Register
  25:068 | DONE dir | em  8  8 |        |             |         .equ hw_uifr 0df48           UART Interrupt Flag Register
  25:069 | DONE dir | em  8  8 |        |             |         .equ hw_uier 0df49           UART Interrupt Enable Register
  25:070 | DONE wsp | em  8  8 |        |             |
  25:071 | DONE dir | em  8  8 |        |             |         .equ hw_t0cl 0df60           Timer 0 Counter Low
  25:072 | DONE dir | em  8  8 |        |             |         .equ hw_t0ch 0df61           Timer 0 Counter High
  25:073 | DONE dir | em  8  8 |        |             |         .equ hw_t1cl 0df62           Timer 1 Counter Low
  25:074 | DONE dir | em  8  8 |        |             |         .equ hw_t1ch 0df63           Timer 1 Counter High
  25:075 | DONE dir | em  8  8 |        |             |         .equ hw_t2cl 0df64           Timer 2 Counter Low
  25:076 | DONE dir | em  8  8 |        |             |         .equ hw_t2ch 0df65           Timer 2 Counter High
  25:077 | DONE dir | em  8  8 |        |             |         .equ hw_t3cl 0df66           Timer 3 Counter Low
  25:078 | DONE dir | em  8  8 |        |             |         .equ hw_t3ch 0df67           Timer 3 Counter High
  25:079 | DONE dir | em  8  8 |        |             |         .equ hw_t4cl 0df68           Timer 4 Counter Low
  25:080 | DONE dir | em  8  8 |        |             |         .equ hw_t4ch 0df69           Timer 4 Counter High
  25:081 | DONE dir | em  8  8 |        |             |         .equ hw_t5cl 0df6a           Timer 5 Counter Low
  25:082 | DONE dir | em  8  8 |        |             |         .equ hw_t5ch 0df6b           Timer 5 Counter High
  25:083 | DONE dir | em  8  8 |        |             |         .equ hw_t6cl 0df6c           Timer 6 Counter Low
  25:084 | DONE dir | em  8  8 |        |             |         .equ hw_t6ch 0df6d           Timer 6 Counter High
  25:085 | DONE dir | em  8  8 |        |             |         .equ hw_t7cl 0df6e           Timer 7 Counter Low
  25:086 | DONE dir | em  8  8 |        |             |         .equ hw_t7ch 0df6f           Timer 7 Counter High
  25:087 | DONE wsp | em  8  8 |        |             |
  25:088 | DONE dir | em  8  8 |        |             |         .equ hw_acsr0 0df70          UART 0 Control/Status Register
  25:089 | DONE dir | em  8  8 |        |             |         .equ hw_artd0 0df71          UART 0 Data Register
  25:090 | DONE dir | em  8  8 |        |             |         .equ hw_acsr1 0df72          UART 1 Control/Status Register
  25:091 | DONE dir | em  8  8 |        |             |         .equ hw_artd1 0df73          UART 1 Data Register
  25:092 | DONE dir | em  8  8 |        |             |         .equ hw_acsr2 0df74          UART 2 Control/Status Register
  25:093 | DONE dir | em  8  8 |        |             |         .equ hw_artd2 0df75          UART 2 Data Register
  25:094 | DONE dir | em  8  8 |        |             |         .equ hw_acsr3 0df76          UART 3 Control/Status Register
  25:095 | DONE dir | em  8  8 |        |             |         .equ hw_artd3 0df77          UART 3 Data Register
  25:096 | DONE wsp | em  8  8 |        |             |
  25:097 | DONE wsp | em  8  8 |        |             |
  25:098 | DONE cmt | em  8  8 |        |             | ; ===================================================================
  25:099 | DONE cmt | em  8  8 |        |             | ; RESET HARDWARE
  25:100 | DONE cmt | em  8  8 |        |             | ; Call this during boot. Uses Port 0 for communication in the default setting.
  25:101 | DONE cmt | em  8  8 |        |             | ; Note this does not reset the MPU, which is done by the main Forth code
  25:102 | DONE lbl | em  8  8 | 005000 |             | reset_hardware                       
  25:103 | DONE ins | em  8  8 | 005000 | 78          |                 sei                  
  25:104 | DONE ins | em  8  8 | 005001 | 18          |                 clc                  
  25:105 | DONE ins | em  8  8 | 005002 | fb          |                 xce                  
  25:106 | DONE ctl | na  8  8 |        |             |         .!native
  25:107 | DONE ins | na  8  8 | 005003 | c2 10       |                 rep 10               
  25:108 | DONE ctl | na  8 16 |        |             |         .!xy16
  25:109 | DONE ins | na  8 16 | 005005 | e2 20       |                 sep 20               
  25:110 | DONE ctl | na  8 16 |        |             |         .!a8
  25:111 | DONE cmt | na  8 16 |        |             |                 ; temporarily reset the stack
  25:112 | DONE ins | na  8 16 | 005007 | a2 ff 01    |                 ldx.# 01ff           
  25:113 | DONE ins | na  8 16 | 00500a | 9a          |                 txs                  
  25:114 | DONE wsp | na  8 16 |        |             |
  25:115 | DONE ins | na  8 16 | 00500b | 9c 49 df    |                 stz 00df49           UART Interrupt Enable Register (UIER)
  25:116 | DONE wsp | na  8 16 |        |             |
  25:117 | DONE ins | na  8 16 | 00500e | a9 c0       |                 lda.# 0c0            Ensure A15/AMS are output
  25:118 | DONE ins | na  8 16 | 005010 | 8d 24 df    |                 sta 00df24           Port 4 Data Direction Register (PDD4)
  25:119 | DONE ins | na  8 16 | 005013 | 9c 20 df    |                 stz 00df20           Select bank 0 (Port 4 Data Register, PD4)
  25:120 | DONE wsp | na  8 16 |        |             |
  25:121 | DONE ins | na  8 16 | 005016 | a9 10       |                 lda.# %00010000      Set UART0 to use timer 3
  25:122 | DONE ins | na  8 16 | 005018 | 1c 42 df    |                 trb 00df42           Timer Control Register (TCR)
  25:123 | DONE ins | na  8 16 | 00501b | a9 0b       |                 lda.# .lsb 00000b    And set baud rate
  25:124 | DONE ins | na  8 16 | 00501d | 8d 66 df    |                 sta 00df66           Timer 3 Counter Low (T3CL)
  25:125 | DONE ins | na  8 16 | 005020 | a9 00       |                 lda.# .msb 00000b    
  25:126 | DONE ins | na  8 16 | 005022 | 8d 67 df    |                 sta 00df67           Timer 3 Counter High (T3CH)
  25:127 | DONE ins | na  8 16 | 005025 | a9 08       |                 lda.# 08             Enable timer 3 (1<<3)
  25:128 | DONE ins | na  8 16 | 005027 | 0c 43 df    |                 tsb 00df43           Timer Enable Register (TER)
  25:129 | DONE wsp | na  8 16 |        |             |
  25:130 | DONE ins | na  8 16 | 00502a | a9 25       |                 lda.# %00100101      Set UART0 for 8-N-1
  25:131 | DONE ins | na  8 16 | 00502c | 8d 70 df    |                 sta 00df70           UART 0 Control/Status Register (ACSR0)
  25:132 | DONE wsp | na  8 16 |        |             |
  25:133 | DONE ins | na  8 16 | 00502f | c2 20       |                 rep 20               
  25:134 | DONE ctl | na 16 16 |        |             |         .!a16
  25:135 | DONE ins | na 16 16 | 005031 | 4c 67 50    |                 jmp 005067           we return with A as 8 bits
  25:136 | DONE wsp | na 16 16 |        |             |
  25:137 | DONE wsp | na 16 16 |        |             |
  25:138 | DONE cmt | na 16 16 |        |             | ; ===================================================================
  25:139 | DONE cmt | na 16 16 |        |             | ; PUT_CHR
  25:140 | DONE cmt | na 16 16 |        |             | ; Wait until the last transmission has been completed then send the character
  25:141 | DONE cmt | na 16 16 |        |             | ; in A. Destroys A. This handles all the register size stuff, and does not need to be
  25:142 | DONE cmt | na 16 16 |        |             | ; called with a 8-bit Y register as TOS. This is only called directly by EMIT
  25:143 | DONE cmt | na 16 16 |        |             | ; through the OUTPUT variable. In Forth, this is refered to as UART0
  25:144 | DONE lbl | na 16 16 | 005034 |             | put_chr                              
  25:145 | DONE ins | na 16 16 | 005034 | e2 20       |                 sep 20               
  25:146 | DONE ctl | na  8 16 |        |             |         .!a8
  25:147 | DONE ins | na  8 16 | 005036 | 48          |                 pha                  
  25:148 | DONE ins | na  8 16 | 005037 | a9 02       |                 lda.# 02             (1<<1)
  25:149 | DONE wsp | na  8 16 |        |             |
  25:150 | DONE lbl | na  8 16 | 005039 |             | put_chr_wait                         
  25:151 | DONE ins | na  8 16 | 005039 | 2c 48 df    |                 bit 00df48           timer finished?
  25:152 | DONE ins | na  8 16 | 00503c | f0 fb       |                 beq 005039           
  25:153 | DONE wsp | na  8 16 |        |             |
  25:154 | DONE ins | na  8 16 | 00503e | 68          |                 pla                  
  25:155 | DONE ins | na  8 16 | 00503f | 8d 71 df    |                 sta 00df71           transmit char
  25:156 | DONE ins | na  8 16 | 005042 | c2 20       |                 rep 20               
  25:157 | DONE ctl | na 16 16 |        |             |         .!a16
  25:158 | DONE wsp | na 16 16 |        |             |
  25:159 | DONE ins | na 16 16 | 005044 | 60          |                 rts                  
  25:160 | DONE wsp | na 16 16 |        |             |
  25:161 | DONE cmt | na 16 16 |        |             | ; ===================================================================
  25:162 | DONE cmt | na 16 16 |        |             | ; GET_CHR
  25:163 | DONE cmt | na 16 16 |        |             | ; Fetch the next character from the receive buffer waiting for some to arrive
  25:164 | DONE cmt | na 16 16 |        |             | ; if the buffer is empty. This is handled by KEY through the INPUT variable
  25:165 | DONE cmt | na 16 16 |        |             | ; Note the routine returns its value through A - getting it TOS is the caller's
  25:166 | DONE cmt | na 16 16 |        |             | ; problem
  25:167 | DONE lbl | na 16 16 | 005045 |             | get_chr                              
  25:168 | DONE ins | na 16 16 | 005045 | e2 20       |                 sep 20               
  25:169 | DONE ctl | na  8 16 |        |             |         .!a8
  25:170 | DONE ins | na  8 16 | 005047 | a9 01       |                 lda.# 01             (1<<0)
  25:171 | DONE wsp | na  8 16 |        |             |
  25:172 | DONE lbl | na  8 16 | 005049 |             | get_chr_wait                         
  25:173 | DONE ins | na  8 16 | 005049 | 2c 48 df    |                 bit 00df48           Any data in RX buffer?
  25:174 | DONE ins | na  8 16 | 00504c | f0 fb       |                 beq 005049           No, keep waiting
  25:175 | DONE ins | na  8 16 | 00504e | ad 71 df    |                 lda 00df71           Yes, read it
  25:176 | DONE ins | na  8 16 | 005051 | c2 20       |                 rep 20               
  25:177 | DONE ctl | na 16 16 |        |             |         .!a16
  25:178 | DONE ins | na 16 16 | 005053 | 29 ff 00    |                 and.# 00ff           paranoid
  25:179 | DONE wsp | na 16 16 |        |             |
  25:180 | DONE ins | na 16 16 | 005056 | 60          |                 rts                  
  25:181 | DONE wsp | na 16 16 |        |             |
  25:182 | DONE cmt | na 16 16 |        |             | ; ===================================================================
  25:183 | DONE cmt | na 16 16 |        |             | ; HAVE_CHR
  25:184 | DONE cmt | na 16 16 |        |             | ; Check if the receive buffer contains any data and return C=1 if there is
  25:185 | DONE cmt | na 16 16 |        |             | ; some. This should be handled by KEY? through the HAVEKEY variable
  25:186 | DONE cmt | na 16 16 |        |             | ; TODO Test this
  25:187 | DONE wsp | na 16 16 |        |             |
  25:188 | DONE lbl | na 16 16 | 005057 |             | have_chr                             
  25:189 | DONE ins | na 16 16 | 005057 | 48          |                 pha                  save caller's A
  25:190 | DONE ins | na 16 16 | 005058 | 08          |                 php                  
  25:191 | DONE ins | na 16 16 | 005059 | e2 20       |                 sep 20               
  25:192 | DONE ctl | na  8 16 |        |             |         .!a8
  25:193 | DONE ins | na  8 16 | 00505b | ad 48 df    |                 lda 00df48           read the status register
  25:194 | DONE ins | na  8 16 | 00505e | 28          |                 plp                  
  25:195 | DONE ins | na  8 16 | 00505f | 6a          |                 ror.a                shift hw_uart0r bit into carry
  25:196 | DONE ins | na  8 16 | 005060 | c2 20       |                 rep 20               
  25:197 | DONE ctl | na 16 16 |        |             |         .!a16
  25:198 | DONE ins | na 16 16 | 005062 | 68          |                 pla                  restore A
  25:199 | DONE ins | na 16 16 | 005063 | 60          |                 rts                  
  25:200 | DONE wsp | na 16 16 |        |             |
  25:201 | DONE cmt | na 16 16 |        |             | ; END
  26:000 | DONE cmt | na 16 16 |        |             | ;       .include kernel_emu.tasm        ; routines for crude65815 emulator
  27:000 | DONE wsp | na 16 16 |        |             |
  28:000 | DONE wsp | na 16 16 |        |             |
  29:000 | DONE cmt | na 16 16 |        |             | ; ===================================================================
  30:000 | DONE cmt | na 16 16 |        |             | ; DICTIONARY ROUTINES
  31:000 | DONE wsp | na 16 16 |        |             |
  32:000 | DONE cmt | na 16 16 |        |             | ; Word code routines are sorted alphabetically, except for the first three
  33:000 | DONE cmt | na 16 16 |        |             | ; - COLD, ABORT, and QUIT - and a few others that flow into each other. The
  34:000 | DONE cmt | na 16 16 |        |             | ; byte and cycle values are calculated without the RTS instruction.
  35:000 | DONE wsp | na 16 16 |        |             |
  36:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
  37:000 | DONE cmt | na 16 16 |        |             | ; COLD ( -- ) X bytes / X Cycles
  38:000 | DONE cmt | na 16 16 |        |             | ; Reset the Forth system. Use BYE to return to the Mensch Monitor.
  39:000 | DONE lbl | na 16 16 | 005064 |             | xt_cold                              
  40:000 | DONE wsp | na 16 16 |        |             |
  41:000 | DONE ins | na 16 16 | 005064 | 4c 00 50    |                 jmp 005000           don't use JSR, jump back to start
  42:000 | DONE lbl | na 16 16 | 005067 |             | start                                
  43:000 | DONE dir | na 16 16 |        |             |         .!native                     these should have been handled by hardware reset
  44:000 | DONE dir | na 16 16 |        |             |         .!a16                        
  45:000 | DONE dir | na 16 16 |        |             |         .!xy16                       
  46:000 | DONE ins | na 16 16 | 005067 | 78          |                 sei                  
  47:000 | DONE wsp | na 16 16 |        |             |
  48:000 | DONE cmt | na 16 16 |        |             |                 ; Initialize the Return Stack (65816 stack)
  49:000 | DONE ins | na 16 16 | 005068 | a2 ff 01    |                 ldx.# 0001ff         01ff
  50:000 | DONE ins | na 16 16 | 00506b | 9a          |                 txs                  
  51:000 | DONE wsp | na 16 16 |        |             |
  52:000 | DONE cmt | na 16 16 |        |             |                 ; Clear Data Stack. This is repeated in ABORT, but we have no
  53:000 | DONE cmt | na 16 16 |        |             |                 ; choice if we want to load high-level words via EVALUATE
  54:000 | DONE ins | na 16 16 | 00506c | a0 00 00    |                 ldy.# 0000           
  55:000 | DONE ins | na 16 16 | 00506f | a2 ff 00    |                 ldx.# 0000ff         
  56:000 | DONE wsp | na 16 16 |        |             |
  57:000 | DONE cmt | na 16 16 |        |             |                 ; We start out in decimal mode
  58:000 | DONE ins | na 16 16 | 005072 | a9 0a 00    |                 lda.# 000a           
  59:000 | DONE ins | na 16 16 | 005075 | 85 16       |                 sta.d 000016         
  60:000 | DONE wsp | na 16 16 |        |             |
  61:000 | DONE cmt | na 16 16 |        |             |                 ; set the OUTPUT vector to the default, which is always put_chr,
  62:000 | DONE cmt | na 16 16 |        |             |                 ; but may have synonyms such as uart0
  63:000 | DONE ins | na 16 16 | 005077 | a9 34 50    |                 lda.# 005034         
  64:000 | DONE ins | na 16 16 | 00507a | 85 0e       |                 sta.d 00000e         
  65:000 | DONE wsp | na 16 16 |        |             |
  66:000 | DONE cmt | na 16 16 |        |             |                 ; set the INPUT vector to the default, which is always get_chr,
  67:000 | DONE cmt | na 16 16 |        |             |                 ; but may have synonyms such as uart0
  68:000 | DONE ins | na 16 16 | 00507c | a9 45 50    |                 lda.# 005045         
  69:000 | DONE ins | na 16 16 | 00507f | 85 10       |                 sta.d 000010         
  70:000 | DONE wsp | na 16 16 |        |             |
  71:000 | DONE cmt | na 16 16 |        |             |                 ; set the HAVE_KEY vector to the default, which is always
  72:000 | DONE cmt | na 16 16 |        |             |                 ; have_chr, but may have synonyms such as uart0
  73:000 | DONE ins | na 16 16 | 005081 | a9 57 50    |                 lda.# 005057         
  74:000 | DONE ins | na 16 16 | 005084 | 85 12       |                 sta.d 000012         
  75:000 | DONE wsp | na 16 16 |        |             |
  76:000 | DONE cmt | na 16 16 |        |             |                 ; The compiler pointer (CP) points to the first free byte
  77:000 | DONE cmt | na 16 16 |        |             |                 ; in the Dictionary
  78:000 | DONE ins | na 16 16 | 005086 | a9 00 03    |                 lda.# 000300         
  79:000 | DONE ins | na 16 16 | 005089 | 85 00       |                 sta.d 000000         
  80:000 | DONE wsp | na 16 16 |        |             |
  81:000 | DONE ins | na 16 16 | 00508b | a9 00 02    |                 lda.# 000200         
  82:000 | DONE ins | na 16 16 | 00508e | 85 08       |                 sta.d 000008         input buffer
  83:000 | DONE ins | na 16 16 | 005090 | 64 0a       |                 stz.d 00000a         input buffer starts empty
  84:000 | DONE ins | na 16 16 | 005092 | 64 06       |                 stz.d 000006         SOURCE-ID is zero
  85:000 | DONE ins | na 16 16 | 005094 | 64 14       |                 stz.d 000014         STATE is zero (interpret)
  86:000 | DONE wsp | na 16 16 |        |             |
  87:000 | DONE cmt | na 16 16 |        |             |                 ; The name token (nt) of DROP is always the first one in the
  88:000 | DONE cmt | na 16 16 |        |             |                 ; new Dictionary, so we start off the Dictionary Pointer (DP)
  89:000 | DONE cmt | na 16 16 |        |             |                 ; there. Anything that comes after that (with WORDS, before
  90:000 | DONE cmt | na 16 16 |        |             |                 ; that) is high-level
  91:000 | DONE ins | na 16 16 | 005096 | a9 a5 67    |                 lda.# 0067a5         
  92:000 | DONE ins | na 16 16 | 005099 | 85 02       |                 sta.d 000002         
  93:000 | DONE wsp | na 16 16 |        |             |
  94:000 | DONE cmt | na 16 16 |        |             |                 ; Clean the screen, assumes vt100 terminal
  95:000 | DONE ins | na 16 16 | 00509b | 20 36 5b    |                 jsr 005b36           
  96:000 | DONE wsp | na 16 16 |        |             |
  97:000 | DONE cmt | na 16 16 |        |             |                 ; Define high-level words via EVALUATE. At this point, whatever
  98:000 | DONE cmt | na 16 16 |        |             |                 ; is in Y (TOS) is garbage, so we don't have to push it to the
  99:000 | DONE cmt | na 16 16 |        |             |                 ; stack first
 100:000 | DONE ins | na 16 16 | 00509e | ca          |                 dex                  
 101:000 | DONE ins | na 16 16 | 00509f | ca          |                 dex                  
 102:000 | DONE ins | na 16 16 | 0050a0 | ca          |                 dex                  
 103:000 | DONE ins | na 16 16 | 0050a1 | ca          |                 dex                  
 104:000 | DONE ins | na 16 16 | 0050a2 | a9 b9 68    |                 lda.# 0068b9         
 105:000 | DONE ins | na 16 16 | 0050a5 | 95 00       |                 sta.dx 00            Start address goes in NOS
 106:000 | DONE ins | na 16 16 | 0050a7 | a0 08 06    |                 ldy.# 000608         length goes in TOS
 107:000 | DONE wsp | na 16 16 |        |             |
 108:000 | DONE ins | na 16 16 | 0050aa | 20 1a 58    |                 jsr 00581a           
 109:000 | DONE wsp | na 16 16 |        |             |
 110:000 | DONE cmt | na 16 16 |        |             |                 ; fall through to ABORT
 111:000 | DONE wsp | na 16 16 |        |             |
 112:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 113:000 | DONE cmt | na 16 16 |        |             | ; ABORT ( -- ) 8+ bytes / X cycles
 114:000 | DONE cmt | na 16 16 |        |             | ; Reset the parameter (data) stack pointer and continue as QUIT
 115:000 | DONE cmt | na 16 16 |        |             | ; We can jump here via subroutine because we reset the stack pointer
 116:000 | DONE cmt | na 16 16 |        |             | ; anyway. Flows into QUIT.
 117:000 | DONE lbl | na 16 16 | 0050ad |             | xt_abort                             
 118:000 | DONE ins | na 16 16 | 0050ad | c2 20       |                 rep 20               
 118:001 | DONE ctl | na 16 16 |        |             |         .!a16
 119:000 | DONE cmt | na 16 16 |        |             |                 ; clear Data Stack
 120:000 | DONE ins | na 16 16 | 0050af | a0 00 00    |                 ldy.# 0000           
 121:000 | DONE ins | na 16 16 | 0050b2 | a2 ff 00    |                 ldx.# 0000ff         
 122:000 | DONE wsp | na 16 16 |        |             |
 123:000 | DONE wsp | na 16 16 |        |             |
 124:000 | DONE cmt | na 16 16 |        |             | ; drops through to QUIT, z_abort is the same as z_quit.
 125:000 | DONE wsp | na 16 16 |        |             |
 126:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 127:000 | DONE cmt | na 16 16 |        |             | ; QUIT ( -- ) X bytes / X cycles
 128:000 | DONE cmt | na 16 16 |        |             | ; Reset the input, clearning Return Stack. Jumps to QUIT do not have to be
 129:000 | DONE cmt | na 16 16 |        |             | ; subroutine jumps as the Return Stack is cleared anyway. Liara Forth follows
 130:000 | DONE cmt | na 16 16 |        |             | ; the ANSI Forth recommendation to use REFILL. Note we don't display the "ok"
 131:000 | DONE cmt | na 16 16 |        |             | ; system prompt until after the first output. This follows Gforth.
 132:000 | DONE lbl | na 16 16 | 0050b5 |             | xt_quit                              
 133:000 | DONE cmt | na 16 16 |        |             |                 ; clear Return Stack
 134:000 | DONE ins | na 16 16 | 0050b5 | a9 ff 01    |                 lda.# 0001ff         
 135:000 | DONE ins | na 16 16 | 0050b8 | 1b          |                 tcs                  
 136:000 | DONE wsp | na 16 16 |        |             |
 137:000 | DONE cmt | na 16 16 |        |             |                 ; make sure Instruction Pointer is empty
 138:000 | DONE cmt | na 16 16 |        |             |                 ; TODO move this someplace else or else it will end up in ROM
 139:000 | DONE ins | na 16 16 | 0050b9 | 9c 49 58    |                 stz 005849           
 140:000 | DONE wsp | na 16 16 |        |             |
 141:000 | DONE cmt | na 16 16 |        |             |                 ; switch SOURCE-ID to zero (keyboard input)
 142:000 | DONE ins | na 16 16 | 0050bc | 64 06       |                 stz.d 000006         
 143:000 | DONE wsp | na 16 16 |        |             |
 144:000 | DONE cmt | na 16 16 |        |             |                 ; switch to interpret state (STATE is zero)
 145:000 | DONE ins | na 16 16 | 0050be | 64 14       |                 stz.d 000014         
 146:000 | DONE wsp | na 16 16 |        |             |
 147:000 | DONE lbl | na 16 16 | 0050c0 |             | quit_get_line                        
 148:000 | DONE cmt | na 16 16 |        |             |                 ; Empty current input buffer
 149:000 | DONE ins | na 16 16 | 0050c0 | 64 0a       |                 stz.d 00000a         
 150:000 | DONE wsp | na 16 16 |        |             |
 151:000 | DONE cmt | na 16 16 |        |             |                 ; Accept a line from the current input source
 152:000 | DONE ins | na 16 16 | 0050c2 | 20 0a 5c    |                 jsr 005c0a           ( -- f )
 153:000 | DONE wsp | na 16 16 |        |             |
 154:000 | DONE ins | na 16 16 | 0050c5 | 98          |                 tya                  force flag test
 155:000 | DONE ins | na 16 16 | 0050c6 | d0 06       |                 bne 0050ce           
 156:000 | DONE wsp | na 16 16 |        |             |
 157:000 | DONE cmt | na 16 16 |        |             |                 ; If REFILL returned a FALSE flag, something went wrong and we
 158:000 | DONE cmt | na 16 16 |        |             |                 ; need to print an error message and reset the machine. We don't
 159:000 | DONE cmt | na 16 16 |        |             |                 ; need to save TOS because we're going to clobber it anyway when we
 160:000 | DONE cmt | na 16 16 |        |             |                 ; go back to ABORT.
 161:000 | DONE ins | na 16 16 | 0050c8 | a9 7b 6f    |                 lda.# 006f7b         
 162:000 | DONE ins | na 16 16 | 0050cb | 4c 67 68    |                 jmp 006867           
 163:000 | DONE wsp | na 16 16 |        |             |
 164:000 | DONE wsp | na 16 16 |        |             |
 165:000 | DONE lbl | na 16 16 | 0050ce |             | quit_refill_successful               
 166:000 | DONE cmt | na 16 16 |        |             |                 ; Assume we have successfully accepted a string of input from
 167:000 | DONE cmt | na 16 16 |        |             |                 ; a source, with address cib and length of input in ciblen. We
 168:000 | DONE cmt | na 16 16 |        |             |                 ; arrive here still with the TRUE flag from REFILL as TOS (in Y)
 169:000 | DONE ins | na 16 16 | 0050ce | b4 00       |                 ldy.dx 00            drop TOS
 170:000 | DONE ins | na 16 16 | 0050d0 | e8          |                 inx                  
 171:000 | DONE ins | na 16 16 | 0050d1 | e8          |                 inx                  
 172:000 | DONE wsp | na 16 16 |        |             |
 173:000 | DONE cmt | na 16 16 |        |             |                 ; make >IN point to begining of buffer
 174:000 | DONE ins | na 16 16 | 0050d2 | 64 0c       |                 stz.d 00000c         
 175:000 | DONE wsp | na 16 16 |        |             |
 176:000 | DONE cmt | na 16 16 |        |             |                 ; Main compile/execute routine. Consider moving this inside QUIT
 177:000 | DONE cmt | na 16 16 |        |             |                 ; once we know everything works
 178:000 | DONE ins | na 16 16 | 0050d4 | 20 e2 67    |                 jsr 0067e2           
 179:000 | DONE wsp | na 16 16 |        |             |
 180:000 | DONE cmt | na 16 16 |        |             |                 ; Test for Data Stack underflow. Our stack is so large in single
 181:000 | DONE cmt | na 16 16 |        |             |                 ; user mode that we don't bother checking for overflow - if that
 182:000 | DONE cmt | na 16 16 |        |             |                 ; happens, we're screwed anyway
 183:000 | DONE ins | na 16 16 | 0050d7 | e0 00 01    |                 cpx.# 000100         
 184:000 | DONE ins | na 16 16 | 0050da | 90 06       |                 bcc 0050e2           DSP must always be smaller (!) than DSP0
 185:000 | DONE wsp | na 16 16 |        |             |
 186:000 | DONE ins | na 16 16 | 0050dc | a9 e1 6f    |                 lda.# 006fe1         
 187:000 | DONE ins | na 16 16 | 0050df | 4c 67 68    |                 jmp 006867           
 188:000 | DONE wsp | na 16 16 |        |             |
 189:000 | DONE lbl | na 16 16 | 0050e2 |             | quit_ok                              
 190:000 | DONE cmt | na 16 16 |        |             |                 ; Display system prompt if all went well. If we're interpreting,
 191:000 | DONE cmt | na 16 16 |        |             |                 ; this is " ok", if we're compiling, it's " compiled"
 192:000 | DONE ins | na 16 16 | 0050e2 | a5 14       |                 lda.d 000014         
 193:000 | DONE ins | na 16 16 | 0050e4 | d0 05       |                 bne 0050eb           
 194:000 | DONE wsp | na 16 16 |        |             |
 195:000 | DONE ins | na 16 16 | 0050e6 | a9 c1 6e    |                 lda.# 006ec1         
 196:000 | DONE ins | na 16 16 | 0050e9 | 80 03       |                 bra 0050ee           
 197:000 | DONE lbl | na 16 16 | 0050eb |             | quit_compiled                        
 198:000 | DONE ins | na 16 16 | 0050eb | a9 c5 6e    |                 lda.# 006ec5         fall through to quit_print
 199:000 | DONE lbl | na 16 16 | 0050ee |             | quit_print                           
 200:000 | DONE ins | na 16 16 | 0050ee | 20 6d 68    |                 jsr 00686d           
 201:000 | DONE wsp | na 16 16 |        |             |
 202:000 | DONE cmt | na 16 16 |        |             |                 ; Awesome line, everybody. Now get the next one
 203:000 | DONE ins | na 16 16 | 0050f1 | 4c c0 50    |                 jmp 0050c0           
 204:000 | DONE wsp | na 16 16 |        |             |
 205:000 | DONE lbl | na 16 16 | 0050f4 |             | z_cold                               
 206:000 | DONE lbl | na 16 16 | 0050f4 |             | z_abort                              
 207:000 | DONE lbl | na 16 16 | 0050f4 |             | z_quit                               ; empty, no RTS required
 208:000 | DONE wsp | na 16 16 |        |             |
 209:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 210:000 | DONE cmt | na 16 16 |        |             | ; < "LESS" ( n m -- f ) X bytes / X cycles
 211:000 | DONE cmt | na 16 16 |        |             | ; Return true flag if NOS < TOS. See
 212:000 | DONE cmt | na 16 16 |        |             | ; http://www.6502.org/tutorials/compare_beyond.html for details on the
 213:000 | DONE cmt | na 16 16 |        |             | ; comparisons
 214:000 | DONE lbl | na 16 16 | 0050f4 |             | xt_less                              
 215:000 | DONE ins | na 16 16 | 0050f4 | 98          |                 tya                  
 216:000 | DONE ins | na 16 16 | 0050f5 | a0 00 00    |                 ldy.# 0000           default is false
 217:000 | DONE wsp | na 16 16 |        |             |
 218:000 | DONE ins | na 16 16 | 0050f8 | 38          |                 sec                  
 219:000 | DONE ins | na 16 16 | 0050f9 | f5 00       |                 sbc.dx 00            
 220:000 | DONE ins | na 16 16 | 0050fb | f0 08       |                 beq 005105           the same is not greater
 221:000 | DONE ins | na 16 16 | 0050fd | 50 03       |                 bvc 005102           no overflow, skip ahead
 222:000 | DONE wsp | na 16 16 |        |             |
 223:000 | DONE cmt | na 16 16 |        |             |                 ; Deal with oveflow because we use signed numbers
 224:000 | DONE ins | na 16 16 | 0050ff | 49 00 80    |                 eor.# 8000           compliment negative flag
 225:000 | DONE wsp | na 16 16 |        |             |
 226:000 | DONE lbl | na 16 16 | 005102 |             | less_no_ov                           
 227:000 | DONE cmt | na 16 16 |        |             |                 ; if we're negative TOS > NOS
 228:000 | DONE ins | na 16 16 | 005102 | 30 01       |                 bmi 005105           
 229:000 | DONE ins | na 16 16 | 005104 | 88          |                 dey                  
 230:000 | DONE lbl | na 16 16 | 005105 |             | less_nip                             
 231:000 | DONE ins | na 16 16 | 005105 | e8          |                 inx                  
 232:000 | DONE ins | na 16 16 | 005106 | e8          |                 inx                  
 233:000 | DONE wsp | na 16 16 |        |             |
 234:000 | DONE lbl | na 16 16 | 005107 |             | z_less                               
 234:001 | DONE ins | na 16 16 | 005107 | 60          |                 rts                  
 235:000 | DONE wsp | na 16 16 |        |             |
 236:000 | DONE wsp | na 16 16 |        |             |
 237:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 238:000 | DONE cmt | na 16 16 |        |             | ; <> "NOT-EQUAL" ( n m -- f ) X bytes / X cycles
 239:000 | DONE cmt | na 16 16 |        |             | ; Return true flag if TOS and NOS are not the same. This is just a different
 240:000 | DONE cmt | na 16 16 |        |             | ; version of EQUAL, we repeat the code for speed reasons
 241:000 | DONE lbl | na 16 16 | 005108 |             | xt_not-equal                         
 242:000 | DONE ins | na 16 16 | 005108 | 98          |                 tya                  
 243:000 | DONE ins | na 16 16 | 005109 | a0 00 00    |                 ldy.# 0000           default value is false
 244:000 | DONE wsp | na 16 16 |        |             |
 245:000 | DONE ins | na 16 16 | 00510c | d5 00       |                 cmp.dx 00            
 246:000 | DONE ins | na 16 16 | 00510e | f0 01       |                 beq 005111           
 247:000 | DONE ins | na 16 16 | 005110 | 88          |                 dey                  wraps to 0FFFF (true)
 248:000 | DONE wsp | na 16 16 |        |             |
 249:000 | DONE lbl | na 16 16 | 005111 |             | not-equal_equal                      ; yes, this is a silly name
 250:000 | DONE ins | na 16 16 | 005111 | e8          |                 inx                  
 251:000 | DONE ins | na 16 16 | 005112 | e8          |                 inx                  
 252:000 | DONE wsp | na 16 16 |        |             |
 253:000 | DONE lbl | na 16 16 | 005113 |             | z_not-equal                          
 253:001 | DONE ins | na 16 16 | 005113 | 60          |                 rts                  
 254:000 | DONE wsp | na 16 16 |        |             |
 255:000 | DONE wsp | na 16 16 |        |             |
 256:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 257:000 | DONE cmt | na 16 16 |        |             | ; <# "LESSNUMBER" ( -- ) 8 bytes / X cycles
 258:000 | DONE cmt | na 16 16 |        |             | ; Start the process to create pictured numeric output. The new string is
 259:000 | DONE cmt | na 16 16 |        |             | ; constructed from back to front, saving the new character at the beginning of
 260:000 | DONE cmt | na 16 16 |        |             | ; the output string. Since we use PAD as a starting address and work backward
 261:000 | DONE cmt | na 16 16 |        |             | ; (!), the string is constructed in the space between the end of the dictionary
 262:000 | DONE cmt | na 16 16 |        |             | ; (as defined by CP) and the PAD. This allows us to satisfy the ANS Forth
 263:000 | DONE cmt | na 16 16 |        |             | ; condition that programs don't fool around with the PAD but still use its
 264:000 | DONE cmt | na 16 16 |        |             | ; address. Code based on pForth, see
 265:000 | DONE cmt | na 16 16 |        |             | ; http://pforth.googlecode.com/svn/trunk/fth/numberio.fth pForth is in the pubic
 266:000 | DONE cmt | na 16 16 |        |             | ; domain. Forth is : <# PAD HLD ! ; we use the internal variable tohold instead
 267:000 | DONE cmt | na 16 16 |        |             | ; of HLD.
 268:000 | DONE cmt | na 16 16 |        |             | ; TODO consider using OUTPUT buffer as a location instead
 269:000 | DONE lbl | na 16 16 | 005114 |             | xt_lessnumber                        
 270:000 | DONE ins | na 16 16 | 005114 | 20 2a 5b    |                 jsr 005b2a           
 271:000 | DONE ins | na 16 16 | 005117 | 84 18       |                 sty.d 000018         
 272:000 | DONE wsp | na 16 16 |        |             |
 273:000 | DONE ins | na 16 16 | 005119 | b4 00       |                 ldy.dx 00            
 274:000 | DONE ins | na 16 16 | 00511b | e8          |                 inx                  
 275:000 | DONE ins | na 16 16 | 00511c | e8          |                 inx                  
 276:000 | DONE wsp | na 16 16 |        |             |
 277:000 | DONE lbl | na 16 16 | 00511d |             | z_lessnumber                         
 277:001 | DONE ins | na 16 16 | 00511d | 60          |                 rts                  
 278:000 | DONE wsp | na 16 16 |        |             |
 279:000 | DONE wsp | na 16 16 |        |             |
 280:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 281:000 | DONE cmt | na 16 16 |        |             | ; > "GREATER" ( n m -- f ) X bytes / X cycles
 282:000 | DONE cmt | na 16 16 |        |             | ; Return true flag if NOS > TOS. See
 283:000 | DONE cmt | na 16 16 |        |             | ; http://www.6502.org/tutorials/compare_beyond.html for details on the
 284:000 | DONE cmt | na 16 16 |        |             | ; comparisons
 285:000 | DONE lbl | na 16 16 | 00511e |             | xt_greater                           
 286:000 | DONE ins | na 16 16 | 00511e | 98          |                 tya                  
 287:000 | DONE ins | na 16 16 | 00511f | a0 00 00    |                 ldy.# 0000           default is false
 288:000 | DONE wsp | na 16 16 |        |             |
 289:000 | DONE ins | na 16 16 | 005122 | 38          |                 sec                  
 290:000 | DONE ins | na 16 16 | 005123 | f5 00       |                 sbc.dx 00            
 291:000 | DONE ins | na 16 16 | 005125 | f0 08       |                 beq 00512f           the same is not greater
 292:000 | DONE ins | na 16 16 | 005127 | 50 03       |                 bvc 00512c           no overflow, skip ahead
 293:000 | DONE wsp | na 16 16 |        |             |
 294:000 | DONE cmt | na 16 16 |        |             |                 ; Deal with oveflow because we use signed numbers
 295:000 | DONE ins | na 16 16 | 005129 | 49 00 80    |                 eor.# 8000           compliment negative flag
 296:000 | DONE wsp | na 16 16 |        |             |
 297:000 | DONE lbl | na 16 16 | 00512c |             | greater_no_ov                        
 298:000 | DONE cmt | na 16 16 |        |             |                 ; if we're still positiv, TOS < NOS
 299:000 | DONE ins | na 16 16 | 00512c | 10 01       |                 bpl 00512f           
 300:000 | DONE ins | na 16 16 | 00512e | 88          |                 dey                  
 301:000 | DONE lbl | na 16 16 | 00512f |             | greater_nip                          
 302:000 | DONE ins | na 16 16 | 00512f | e8          |                 inx                  
 303:000 | DONE ins | na 16 16 | 005130 | e8          |                 inx                  
 304:000 | DONE wsp | na 16 16 |        |             |
 305:000 | DONE lbl | na 16 16 | 005131 |             | z_greater                            
 305:001 | DONE ins | na 16 16 | 005131 | 60          |                 rts                  
 306:000 | DONE wsp | na 16 16 |        |             |
 307:000 | DONE wsp | na 16 16 |        |             |
 308:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 309:000 | DONE cmt | na 16 16 |        |             | ; >BODY "TOBODY" ( xt -- addr ) 3 bytes / 6 cycles
 310:000 | DONE cmt | na 16 16 |        |             | ; Given a word's execution token (xt), return the address of the start of that
 311:000 | DONE cmt | na 16 16 |        |             | ; word's parameter field (PFA). This is the address that HERE would return right
 312:000 | DONE cmt | na 16 16 |        |             | ; after CREATE. This is a difficult word for STC Forths, because most words
 313:000 | DONE cmt | na 16 16 |        |             | ; don't have a Code Field Area (CFA) to skip. We solve this by testing if the
 314:000 | DONE cmt | na 16 16 |        |             | ; first three bytes of the body (that starts at xt) are subroutine jumps to
 315:000 | DONE cmt | na 16 16 |        |             | ; DOVAR, DOCONST or DODOES
 316:000 | DONE lbl | na 16 16 | 005132 |             | xt_tobody                            
 317:000 | DONE cmt | na 16 16 |        |             |                 ; In the header, xt already points to the CFA, which CREATE by
 318:000 | DONE cmt | na 16 16 |        |             |                 ; default fills with a JSR to DOVAR
 319:000 | DONE ins | na 16 16 | 005132 | e2 20       |                 sep 20               
 319:001 | DONE ctl | na  8 16 |        |             |         .!a8
 320:000 | DONE ins | na  8 16 | 005134 | b9 00 00    |                 lda.y 0000           see if we have a JSR instruction
 321:000 | DONE ins | na  8 16 | 005137 | c9 20       |                 cmp.# 20             
 322:000 | DONE ins | na  8 16 | 005139 | c2 20       |                 rep 20               
 322:001 | DONE ctl | na 16 16 |        |             |         .!a16
 323:000 | DONE ins | na 16 16 | 00513b | d0 18       |                 bne 005155           
 324:000 | DONE wsp | na 16 16 |        |             |
 325:000 | DONE cmt | na 16 16 |        |             |                 ; Okay, so we found a JSR instruction. But is it one of the
 326:000 | DONE cmt | na 16 16 |        |             |                 ; right ones?
 327:000 | DONE ins | na 16 16 | 00513d | c8          |                 iny                  
 328:000 | DONE ins | na 16 16 | 00513e | b9 00 00    |                 lda.y 0000           
 329:000 | DONE wsp | na 16 16 |        |             |
 330:000 | DONE ins | na 16 16 | 005141 | c9 db 67    |                 cmp.# 0067db         
 331:000 | DONE ins | na 16 16 | 005144 | f0 0d       |                 beq 005153           
 332:000 | DONE ins | na 16 16 | 005146 | c9 b1 67    |                 cmp.# 0067b1         
 333:000 | DONE ins | na 16 16 | 005149 | f0 08       |                 beq 005153           
 334:000 | DONE ins | na 16 16 | 00514b | c9 ce 67    |                 cmp.# 0067ce         
 335:000 | DONE ins | na 16 16 | 00514e | f0 03       |                 beq 005153           
 336:000 | DONE wsp | na 16 16 |        |             |
 337:000 | DONE cmt | na 16 16 |        |             |                 ; This is some other jump, so we go back to beginning of word
 338:000 | DONE ins | na 16 16 | 005150 | 88          |                 dey                  restor original xt
 339:000 | DONE ins | na 16 16 | 005151 | 80 02       |                 bra 005155           
 340:000 | DONE wsp | na 16 16 |        |             |
 341:000 | DONE lbl | na 16 16 | 005153 |             | tobody_have_cfa                      
 342:000 | DONE cmt | na 16 16 |        |             |                 ; Got the right kind of jump. We've already increased the index
 343:000 | DONE cmt | na 16 16 |        |             |                 ; by one, so we just have to add two
 344:000 | DONE ins | na 16 16 | 005153 | c8          |                 iny                  
 345:000 | DONE ins | na 16 16 | 005154 | c8          |                 iny                  drops through to end
 346:000 | DONE wsp | na 16 16 |        |             |
 347:000 | DONE lbl | na 16 16 | 005155 |             | tobody_nojsr                         
 348:000 | DONE cmt | na 16 16 |        |             |                 ; If we don't have a jump instruction, the xt already points to
 349:000 | DONE cmt | na 16 16 |        |             |                 ; the PFA, because there is no CFA
 350:000 | DONE cmt | na 16 16 |        |             |                 ; body
 351:000 | DONE wsp | na 16 16 |        |             |
 352:000 | DONE lbl | na 16 16 | 005155 |             | z_tobody                             
 352:001 | DONE ins | na 16 16 | 005155 | 60          |                 rts                  
 353:000 | DONE wsp | na 16 16 |        |             |
 354:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 355:000 | DONE cmt | na 16 16 |        |             | ; >IN "TOIN" ( -- addr ) 6 bytes / 12 cycles
 356:000 | DONE cmt | na 16 16 |        |             | ; Return address where pointer to current char in input buffer lives (>IN)
 357:000 | DONE lbl | na 16 16 | 005156 |             | xt_to-in                             
 358:000 | DONE ins | na 16 16 | 005156 | ca          |                 dex                  
 359:000 | DONE ins | na 16 16 | 005157 | ca          |                 dex                  
 360:000 | DONE ins | na 16 16 | 005158 | 94 00       |                 sty.dx 00            
 361:000 | DONE wsp | na 16 16 |        |             |
 362:000 | DONE ins | na 16 16 | 00515a | a0 0c 00    |                 ldy.# 00000c         >IN
 363:000 | DONE lbl | na 16 16 | 00515d |             | z_to-in                              
 363:001 | DONE ins | na 16 16 | 00515d | 60          |                 rts                  
 364:000 | DONE wsp | na 16 16 |        |             |
 365:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 366:000 | DONE cmt | na 16 16 |        |             | ; >NUMBER ( ud addr u -- ud addr u ) X bytes / X cycles
 367:000 | DONE cmt | na 16 16 |        |             | ; Convert a string to a double number. Logic here is based on the routine by
 368:000 | DONE cmt | na 16 16 |        |             | ; Phil Burk of the same name in pForth; see
 369:000 | DONE cmt | na 16 16 |        |             | ; https://github.com/philburk/pforth/blob/master/fth/numberio.fth the original
 370:000 | DONE cmt | na 16 16 |        |             | ; Forth code. We arrive here from NUMBER which has made sure that we don't have
 371:000 | DONE cmt | na 16 16 |        |             | ; to deal with a sign and we don't have to deal with a dot as a last character
 372:000 | DONE cmt | na 16 16 |        |             | ; that signalizes double - this should be a pure number string.
 373:000 | DONE cmt | na 16 16 |        |             | ; This routine calles UM*, which uses tmp1, tmp2 and tmp3, so we cannot access
 374:000 | DONE cmt | na 16 16 |        |             | ; any of those.
 375:000 | DONE lbl | na 16 16 | 00515e |             | xt_tonumber                          
 376:000 | DONE dir | na 16 16 |        |             |         .!a16                        
 377:000 | DONE cmt | na 16 16 |        |             |                 ; For the math routine, we move the inputs to the scratchpad to
 378:000 | DONE cmt | na 16 16 |        |             |                 ; avoid having to fool around with the Data Stack.
 379:000 | DONE cmt | na 16 16 |        |             |                 ;
 380:000 | DONE cmt | na 16 16 |        |             |                 ;     +-----+-----+-----+-----+-----+-----+-----+-----+
 381:000 | DONE cmt | na 16 16 |        |             |                 ;     |   UD-LO   |   UD-HI   |     N     | UD-HI-LO  |
 382:000 | DONE cmt | na 16 16 |        |             |                 ;     |           |           |           |           |
 383:000 | DONE cmt | na 16 16 |        |             |                 ;     |  S    S+1 | S+2   S+3 | S+4   S+5 | S+6   S+7 |
 384:000 | DONE cmt | na 16 16 |        |             |                 ;     +-----+-----+-----+-----+-----+-----+-----+-----+
 385:000 | DONE wsp | na 16 16 |        |             |
 386:000 | DONE cmt | na 16 16 |        |             |                 ; The math routine works by converting one character to its
 387:000 | DONE cmt | na 16 16 |        |             |                 ; numerical value (N) via DIGIT? and storing it in S+4 for
 388:000 | DONE cmt | na 16 16 |        |             |                 ; the moment. We then multiply the UD-HI value with the radix
 389:000 | DONE cmt | na 16 16 |        |             |                 ; (from BASE) using UM*, which returns a double-cell result. We
 390:000 | DONE cmt | na 16 16 |        |             |                 ; discard the high cell of that result (UD-HI-HI) and store the
 391:000 | DONE cmt | na 16 16 |        |             |                 ; low cell (UD-HI-LO) in S+6 for now. -- The second part is
 392:000 | DONE cmt | na 16 16 |        |             |                 ; multiplying UD-LO with the radix. The high cell (UD-LO-HI)
 393:000 | DONE cmt | na 16 16 |        |             |                 ; gets put in S+2, the low cell (HD-LO-LO) in S. We then use
 394:000 | DONE cmt | na 16 16 |        |             |                 ; a version of D+ to add ( S S+2 ) and ( S+4 S+6) together,
 395:000 | DONE cmt | na 16 16 |        |             |                 ; storing the result back in S and S+2, before we start another
 396:000 | DONE cmt | na 16 16 |        |             |                 ; round with it as the new UD-LO and UD-HI.
 397:000 | DONE wsp | na 16 16 |        |             |
 398:000 | DONE cmt | na 16 16 |        |             |                 ; Fill the scratchpad. We arrive with ( ud-lo ud-hi addr u ).
 399:000 | DONE cmt | na 16 16 |        |             |                 ; After this step, the original ud-lo and ud-hi will still be on
 400:000 | DONE cmt | na 16 16 |        |             |                 ; the Data Stack, but will be ignored and later overwritten
 401:000 | DONE ins | na 16 16 | 00515e | b5 04       |                 lda.dx 04            ud-lo
 402:000 | DONE ins | na 16 16 | 005160 | 85 26       |                 sta.d 000026         
 403:000 | DONE ins | na 16 16 | 005162 | b5 02       |                 lda.dx 02            ud-hi
 404:000 | DONE ins | na 16 16 | 005164 | 85 28       |                 sta.d 000028         
 405:000 | DONE wsp | na 16 16 |        |             |
 406:000 | DONE cmt | na 16 16 |        |             |                 ; We push down one on the Data Stack to use TOS for character
 407:000 | DONE cmt | na 16 16 |        |             |                 ; conversion - now ( ud-lo ud-hi addr u u )
 408:000 | DONE ins | na 16 16 | 005166 | ca          |                 dex                  
 409:000 | DONE ins | na 16 16 | 005167 | ca          |                 dex                  
 410:000 | DONE ins | na 16 16 | 005168 | 94 00       |                 sty.dx 00            
 411:000 | DONE wsp | na 16 16 |        |             |
 412:000 | DONE lbl | na 16 16 | 00516a |             | tonumber_loop                        
 413:000 | DONE cmt | na 16 16 |        |             |                 ; Get one character
 414:000 | DONE ins | na 16 16 | 00516a | a1 02       |                 lda.dxi 02           
 415:000 | DONE ins | na 16 16 | 00516c | a8          |                 tay                  ( ud-lo ud-hi addr u char )
 416:000 | DONE wsp | na 16 16 |        |             |
 417:000 | DONE cmt | na 16 16 |        |             |                 ; Convert one character. DIGIT? takes care of the correct
 418:000 | DONE cmt | na 16 16 |        |             |                 ; register size for A and does a paranoid AND to make sure that
 419:000 | DONE cmt | na 16 16 |        |             |                 ; B is zero, so we don't have to do any of that here.
 420:000 | DONE ins | na 16 16 | 00516d | 20 04 57    |                 jsr 005704           ( char -- n -1 | char 0 )
 421:000 | DONE wsp | na 16 16 |        |             |
 422:000 | DONE cmt | na 16 16 |        |             |                 ; This gives us (ud-lo ud-hi addr u char f | n f ), so check the
 423:000 | DONE cmt | na 16 16 |        |             |                 ; flag. If it is zero, we return what we have and let the caller
 424:000 | DONE cmt | na 16 16 |        |             |                 ; (usually NUMBER) complain to the user
 425:000 | DONE ins | na 16 16 | 005170 | 98          |                 tya                  
 426:000 | DONE ins | na 16 16 | 005171 | d0 06       |                 bne 005179           
 427:000 | DONE wsp | na 16 16 |        |             |
 428:000 | DONE ins | na 16 16 | 005173 | b4 00       |                 ldy.dx 00            
 429:000 | DONE ins | na 16 16 | 005175 | e8          |                 inx                  
 430:000 | DONE ins | na 16 16 | 005176 | e8          |                 inx                  
 431:000 | DONE ins | na 16 16 | 005177 | 80 35       |                 bra 0051ae           
 432:000 | DONE wsp | na 16 16 |        |             |
 433:000 | DONE lbl | na 16 16 | 005179 |             | tonumber_ok                          
 434:000 | DONE cmt | na 16 16 |        |             |                 ; Conversion was successful, so we're here with
 435:000 | DONE cmt | na 16 16 |        |             |                 ; ( ud-lo ud-hi addr u n -1 ) and can start the math routine.
 436:000 | DONE wsp | na 16 16 |        |             |
 437:000 | DONE cmt | na 16 16 |        |             |                 ; Save N so we don't have to fool around with the Data Stack
 438:000 | DONE ins | na 16 16 | 005179 | b5 00       |                 lda.dx 00            
 439:000 | DONE ins | na 16 16 | 00517b | 85 2a       |                 sta.d 00002a         
 440:000 | DONE wsp | na 16 16 |        |             |
 441:000 | DONE cmt | na 16 16 |        |             |                 ; Now multiply ud-hi (the one in the scratchpad, not the
 442:000 | DONE cmt | na 16 16 |        |             |                 ; original one in the Data Stack) by the radix from BASE. We can
 443:000 | DONE cmt | na 16 16 |        |             |                 ; clobber TOS and NOS
 444:000 | DONE ins | na 16 16 | 00517d | a5 28       |                 lda.d 000028         
 445:000 | DONE ins | na 16 16 | 00517f | 95 00       |                 sta.dx 00            
 446:000 | DONE ins | na 16 16 | 005181 | a4 16       |                 ldy.d 000016         ( ud-lo ud-hi addr u ud-hi base )
 447:000 | DONE wsp | na 16 16 |        |             |
 448:000 | DONE cmt | na 16 16 |        |             |                 ; UM* returns a double celled number
 449:000 | DONE ins | na 16 16 | 005183 | 20 fb 5d    |                 jsr 005dfb           ( ud-lo ud-hi addr u ud-hi-lo ud-hi-hi )
 450:000 | DONE wsp | na 16 16 |        |             |
 451:000 | DONE cmt | na 16 16 |        |             |                 ; Move ud-hi-lo to safety
 452:000 | DONE ins | na 16 16 | 005186 | b5 00       |                 lda.dx 00            ud-hi-lo
 453:000 | DONE ins | na 16 16 | 005188 | 85 2c       |                 sta.d 00002c         
 454:000 | DONE wsp | na 16 16 |        |             |
 455:000 | DONE cmt | na 16 16 |        |             |                 ; Now we multiply ud-lo, overwriting the stack entries
 456:000 | DONE ins | na 16 16 | 00518a | a5 26       |                 lda.d 000026         
 457:000 | DONE ins | na 16 16 | 00518c | 95 00       |                 sta.dx 00            ( ud-lo ud-hi addr u ud-lo ud-hi-hi )
 458:000 | DONE ins | na 16 16 | 00518e | a4 16       |                 ldy.d 000016         ( ud-lo ud-hi addr u ud-lo base )
 459:000 | DONE wsp | na 16 16 |        |             |
 460:000 | DONE ins | na 16 16 | 005190 | 20 fb 5d    |                 jsr 005dfb           ( ud-lo ud-hi addr u ud-lo-lo ud-lo-hi )
 461:000 | DONE ins | na 16 16 | 005193 | 84 28       |                 sty.d 000028         
 462:000 | DONE ins | na 16 16 | 005195 | b5 00       |                 lda.dx 00            
 463:000 | DONE ins | na 16 16 | 005197 | 85 26       |                 sta.d 000026         
 464:000 | DONE wsp | na 16 16 |        |             |
 465:000 | DONE cmt | na 16 16 |        |             |                 ; This is a faster version of D+
 466:000 | DONE ins | na 16 16 | 005199 | a5 26       |                 lda.d 000026         
 467:000 | DONE ins | na 16 16 | 00519b | 18          |                 clc                  
 468:000 | DONE ins | na 16 16 | 00519c | 65 2a       |                 adc.d 00002a         
 469:000 | DONE ins | na 16 16 | 00519e | 85 26       |                 sta.d 000026         this is the new ud-lo
 470:000 | DONE ins | na 16 16 | 0051a0 | a5 28       |                 lda.d 000028         
 471:000 | DONE ins | na 16 16 | 0051a2 | 65 2c       |                 adc.d 00002c         
 472:000 | DONE ins | na 16 16 | 0051a4 | 85 28       |                 sta.d 000028         this is the new ud-hi
 473:000 | DONE wsp | na 16 16 |        |             |
 474:000 | DONE cmt | na 16 16 |        |             |                 ; Clean up: Get rid of one of the two top elements on the Data
 475:000 | DONE cmt | na 16 16 |        |             |                 ; Stack. NIP is faster if Y is TOS
 476:000 | DONE ins | na 16 16 | 0051a6 | e8          |                 inx                  
 477:000 | DONE ins | na 16 16 | 0051a7 | e8          |                 inx                  ( ud-lo ud-hi addr u ud-lo-hi )
 478:000 | DONE wsp | na 16 16 |        |             |
 479:000 | DONE cmt | na 16 16 |        |             |                 ; One character down
 480:000 | DONE ins | na 16 16 | 0051a8 | f6 02       |                 inc.dx 02            increase address
 481:000 | DONE ins | na 16 16 | 0051aa | d6 00       |                 dec.dx 00            decrease length
 482:000 | DONE wsp | na 16 16 |        |             |
 483:000 | DONE ins | na 16 16 | 0051ac | d0 bc       |                 bne 00516a           
 484:000 | DONE wsp | na 16 16 |        |             |
 485:000 | DONE lbl | na 16 16 | 0051ae |             | tonumber_done                        
 486:000 | DONE cmt | na 16 16 |        |             |                 ; Counter has reached zero or we have an error. In both cases,
 487:000 | DONE cmt | na 16 16 |        |             |                 ; we clean up the Data Stack and return. We arrive here with
 488:000 | DONE cmt | na 16 16 |        |             |                 ; ( ud-lo ud-hi addr u char ) if there was an error
 489:000 | DONE cmt | na 16 16 |        |             |                 ; and ( ud-lo ud-hi addr u ud-lo ) if not
 490:000 | DONE ins | na 16 16 | 0051ae | b4 00       |                 ldy.dx 00            
 491:000 | DONE ins | na 16 16 | 0051b0 | e8          |                 inx                  
 492:000 | DONE ins | na 16 16 | 0051b1 | e8          |                 inx                  ( ud-lo ud-hi addr u )
 493:000 | DONE wsp | na 16 16 |        |             |
 494:000 | DONE cmt | na 16 16 |        |             |                 ; The new ud-lo and ud-hi are still on the scratch pad
 495:000 | DONE ins | na 16 16 | 0051b2 | a5 26       |                 lda.d 000026         new ud-lo
 496:000 | DONE ins | na 16 16 | 0051b4 | 95 04       |                 sta.dx 04            
 497:000 | DONE ins | na 16 16 | 0051b6 | a5 28       |                 lda.d 000028         
 498:000 | DONE ins | na 16 16 | 0051b8 | 95 02       |                 sta.dx 02            new ud-hi
 499:000 | DONE wsp | na 16 16 |        |             |
 500:000 | DONE lbl | na 16 16 | 0051ba |             | z_tonumber                           
 500:001 | DONE ins | na 16 16 | 0051ba | 60          |                 rts                  
 501:000 | DONE wsp | na 16 16 |        |             |
 502:000 | DONE wsp | na 16 16 |        |             |
 503:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 504:000 | DONE cmt | na 16 16 |        |             | ; >R "TOR" ( n -- ) (R: -- n )  7 bytes / 22 cycles
 505:000 | DONE cmt | na 16 16 |        |             | ; Move Top of Data Stack to Top of Return Stack
 506:000 | DONE cmt | na 16 16 |        |             | ; TODO consider stripping PHA/PLA if natively compiled (see COMPILE,)
 507:000 | DONE lbl | na 16 16 | 0051bb |             | xt_tor                               
 508:000 | DONE dir | na 16 16 |        |             |         .!a16                        
 509:000 | DONE cmt | na 16 16 |        |             |                 ; Save the return address. If this word is natively coded, this
 510:000 | DONE cmt | na 16 16 |        |             |                 ; is a complete waste of nine cycles, but required for
 511:000 | DONE cmt | na 16 16 |        |             |                 ; subroutine coding
 512:000 | DONE ins | na 16 16 | 0051bb | 68          |                 pla                  
 513:000 | DONE wsp | na 16 16 |        |             |
 514:000 | DONE ins | na 16 16 | 0051bc | 5a          |                 phy                  the actual work
 515:000 | DONE wsp | na 16 16 |        |             |
 516:000 | DONE ins | na 16 16 | 0051bd | b4 00       |                 ldy.dx 00            DROP
 517:000 | DONE ins | na 16 16 | 0051bf | e8          |                 inx                  
 518:000 | DONE ins | na 16 16 | 0051c0 | e8          |                 inx                  
 519:000 | DONE wsp | na 16 16 |        |             |
 520:000 | DONE ins | na 16 16 | 0051c1 | 48          |                 pha                  put return address back in place
 521:000 | DONE wsp | na 16 16 |        |             |
 522:000 | DONE lbl | na 16 16 | 0051c2 |             | z_tor                                
 522:001 | DONE ins | na 16 16 | 0051c2 | 60          |                 rts                  
 523:000 | DONE wsp | na 16 16 |        |             |
 524:000 | DONE wsp | na 16 16 |        |             |
 525:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 526:000 | DONE cmt | na 16 16 |        |             | ; /STRING ( addr u n -- ) X bytes / X cycles
 527:000 | DONE cmt | na 16 16 |        |             | ; Remove characters from front of string. Uses tmp1
 528:000 | DONE cmt | na 16 16 |        |             | ; Forth version: ROT OVER + ROT ROT - ;
 529:000 | DONE cmt | na 16 16 |        |             | ; TODO check for negative strings so 1 /STRING TYPE won't try to print the whole
 530:000 | DONE cmt | na 16 16 |        |             | ; address space; follow Gforth in failing gracefully
 531:000 | DONE lbl | na 16 16 | 0051c3 |             | xt_slashstring                       
 532:000 | DONE ins | na 16 16 | 0051c3 | 84 1c       |                 sty.d 00001c         
 533:000 | DONE wsp | na 16 16 |        |             |
 534:000 | DONE ins | na 16 16 | 0051c5 | b5 00       |                 lda.dx 00            length
 535:000 | DONE ins | na 16 16 | 0051c7 | 38          |                 sec                  
 536:000 | DONE ins | na 16 16 | 0051c8 | e5 1c       |                 sbc.d 00001c         
 537:000 | DONE ins | na 16 16 | 0051ca | a8          |                 tay                  
 538:000 | DONE wsp | na 16 16 |        |             |
 539:000 | DONE ins | na 16 16 | 0051cb | b5 02       |                 lda.dx 02            address
 540:000 | DONE ins | na 16 16 | 0051cd | 18          |                 clc                  
 541:000 | DONE ins | na 16 16 | 0051ce | 65 1c       |                 adc.d 00001c         
 542:000 | DONE ins | na 16 16 | 0051d0 | 95 02       |                 sta.dx 02            
 543:000 | DONE wsp | na 16 16 |        |             |
 544:000 | DONE ins | na 16 16 | 0051d2 | e8          |                 inx                  
 545:000 | DONE ins | na 16 16 | 0051d3 | e8          |                 inx                  
 546:000 | DONE wsp | na 16 16 |        |             |
 547:000 | DONE lbl | na 16 16 | 0051d4 |             | z_slashstring                        
 547:001 | DONE ins | na 16 16 | 0051d4 | 60          |                 rts                  
 548:000 | DONE wsp | na 16 16 |        |             |
 549:000 | DONE wsp | na 16 16 |        |             |
 550:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 551:000 | DONE cmt | na 16 16 |        |             | ; . "DOT" ( n -- ) X bytes / X cycles
 552:000 | DONE cmt | na 16 16 |        |             | ; Print unsigned value that is TOS followed by a single space. Forth code is  DUP ABS
 553:000 | DONE cmt | na 16 16 |        |             | ; 0 <# #S ROT SIGN #> TYPE SPACE, but we want to have one routine that is not
 554:000 | DONE cmt | na 16 16 |        |             | ; high-level. Based on
 555:000 | DONE cmt | na 16 16 |        |             | ; https://github.com/philburk/pforth/blob/master/fth/numberio.fth Since this is
 556:000 | DONE cmt | na 16 16 |        |             | ; used interactively, and humans are slow (just ask GlaDOS), we focus on size.
 557:000 | DONE cmt | na 16 16 |        |             | ; TODO Once we know this works, move to assembler
 558:000 | DONE cmt | na 16 16 |        |             | ; TODO make a version "print_unsigned" without a trailing space for output
 559:000 | DONE lbl | na 16 16 | 0051d5 |             | xt_dot                               
 560:000 | DONE ins | na 16 16 | 0051d5 | 20 eb 57    |                 jsr 0057eb           ( n n )
 561:000 | DONE ins | na 16 16 | 0051d8 | 20 4c 54    |                 jsr 00544c           ( n n )
 562:000 | DONE ins | na 16 16 | 0051db | 20 33 53    |                 jsr 005333           ( n n 0 )
 563:000 | DONE ins | na 16 16 | 0051de | 20 14 51    |                 jsr 005114           ( n n 0 )
 564:000 | DONE ins | na 16 16 | 0051e1 | 20 b0 52    |                 jsr 0052b0           ( n ud )
 565:000 | DONE ins | na 16 16 | 0051e4 | 20 32 5c    |                 jsr 005c32           ( ud n )
 566:000 | DONE ins | na 16 16 | 0051e7 | 20 95 5c    |                 jsr 005c95           ( ud )
 567:000 | DONE ins | na 16 16 | 0051ea | 20 a1 52    |                 jsr 0052a1           
 568:000 | DONE ins | na 16 16 | 0051ed | 20 b6 5d    |                 jsr 005db6           
 569:000 | DONE ins | na 16 16 | 0051f0 | 20 72 5d    |                 jsr 005d72           
 570:000 | DONE wsp | na 16 16 |        |             |
 571:000 | DONE lbl | na 16 16 | 0051f3 |             | z_dot                                
 571:001 | DONE ins | na 16 16 | 0051f3 | 60          |                 rts                  
 572:000 | DONE wsp | na 16 16 |        |             |
 573:000 | DONE wsp | na 16 16 |        |             |
 574:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 575:000 | DONE cmt | na 16 16 |        |             | ; ." "DOTQUOTE" ( -- ) X bytes / X cycles
 576:000 | DONE cmt | na 16 16 |        |             | ; Compile string that is printed during run time. ANSI Forth wants this to be
 577:000 | DONE cmt | na 16 16 |        |             | ; compile-only, even though everybody and their friend uses it for everything.
 578:000 | DONE cmt | na 16 16 |        |             | ; We follow the book here, and recommend .( for general printing.
 579:000 | DONE lbl | na 16 16 | 0051f4 |             | xt_dotquote                          
 580:000 | DONE ins | na 16 16 | 0051f4 | ca          |                 dex                  
 581:000 | DONE ins | na 16 16 | 0051f5 | ca          |                 dex                  
 582:000 | DONE ins | na 16 16 | 0051f6 | 94 00       |                 sty.dx 00            
 583:000 | DONE ins | na 16 16 | 0051f8 | a0 22 00    |                 ldy.# 0022           ASCII for "
 584:000 | DONE wsp | na 16 16 |        |             |
 585:000 | DONE ins | na 16 16 | 0051fb | 20 75 5b    |                 jsr 005b75           
 586:000 | DONE ins | na 16 16 | 0051fe | 20 a3 5c    |                 jsr 005ca3           
 587:000 | DONE wsp | na 16 16 |        |             |
 588:000 | DONE ins | na 16 16 | 005201 | f4 b6 5d    |                 phe.# 005db6         
 589:000 | DONE ins | na 16 16 | 005204 | 20 46 68    |                 jsr 006846           
 590:000 | DONE wsp | na 16 16 |        |             |
 591:000 | DONE ins | na 16 16 | 005207 | 60          |                 rts                  
 592:000 | DONE lbl | na 16 16 | 005208 |             | z_dotquote                           
 593:000 | DONE wsp | na 16 16 |        |             |
 594:000 | DONE wsp | na 16 16 |        |             |
 595:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 596:000 | DONE cmt | na 16 16 |        |             | ; .S "DOTS" ( -- ) X bytes / X cycles
 597:000 | DONE cmt | na 16 16 |        |             | ; Print content of Data Stack non-distructively. Since this is for humans, we
 598:000 | DONE cmt | na 16 16 |        |             | ; don't have to worry about speed. We follow the format of Gforth
 599:000 | DONE cmt | na 16 16 |        |             | ; and print the number of elements first in brackets, followed by the Data Stack
 600:000 | DONE cmt | na 16 16 |        |             | ; content (if present).
 601:000 | DONE cmt | na 16 16 |        |             | ; TODO rewrite in high Forth words
 602:000 | DONE lbl | na 16 16 | 005208 |             | xt_dots                              
 603:000 | DONE dir | na 16 16 |        |             |         .!a16                        
 604:000 | DONE dir | na 16 16 |        |             |         .!xy16                       
 605:000 | DONE ins | na 16 16 | 005208 | 20 79 57    |                 jsr 005779           ( -- u)
 606:000 | DONE wsp | na 16 16 |        |             |
 607:000 | DONE cmt | na 16 16 |        |             |                 ; Print stack depth in brackets
 608:000 | DONE ins | na 16 16 | 00520b | a9 3c 00    |                 lda.# 3c             
 609:000 | DONE ins | na 16 16 | 00520e | 20 f5 57    |                 jsr 0057f5           
 610:000 | DONE wsp | na 16 16 |        |             |
 611:000 | DONE cmt | na 16 16 |        |             |                 ; We keep a copy of the number of things on the stack to use as
 612:000 | DONE cmt | na 16 16 |        |             |                 ; a counter further down
 613:000 | DONE ins | na 16 16 | 005211 | ca          |                 dex                  DUP
 614:000 | DONE ins | na 16 16 | 005212 | ca          |                 dex                  
 615:000 | DONE ins | na 16 16 | 005213 | 94 00       |                 sty.dx 00            
 616:000 | DONE wsp | na 16 16 |        |             |
 617:000 | DONE ins | na 16 16 | 005215 | 20 85 68    |                 jsr 006885           
 618:000 | DONE wsp | na 16 16 |        |             |
 619:000 | DONE ins | na 16 16 | 005218 | a9 3e 00    |                 lda.# 3e             
 620:000 | DONE ins | na 16 16 | 00521b | 20 f5 57    |                 jsr 0057f5           
 621:000 | DONE ins | na 16 16 | 00521e | 20 72 5d    |                 jsr 005d72           
 622:000 | DONE wsp | na 16 16 |        |             |
 623:000 | DONE wsp | na 16 16 |        |             |
 624:000 | DONE cmt | na 16 16 |        |             |                 ; There will be a lot of cases where .S is used when the stack
 625:000 | DONE cmt | na 16 16 |        |             |                 ; is empty. Get them first and exit quickly
 626:000 | DONE ins | na 16 16 | 005221 | 98          |                 tya                  force flag test
 627:000 | DONE ins | na 16 16 | 005222 | f0 17       |                 beq 00523b           
 628:000 | DONE wsp | na 16 16 |        |             |
 629:000 | DONE lbl | na 16 16 | 005224 |             | dots_not_empty                       
 630:000 | DONE cmt | na 16 16 |        |             |                 ; We have at least one element on the stack, which used to be in
 631:000 | DONE cmt | na 16 16 |        |             |                 ; Y as TOS, but is now NOS and therefore accessable by X. Also,
 632:000 | DONE cmt | na 16 16 |        |             |                 ; the depth of the Data Stack is already in Y waiting to be used
 633:000 | DONE cmt | na 16 16 |        |             |                 ; as a counter. We use this to our advantage.
 634:000 | DONE wsp | na 16 16 |        |             |
 635:000 | DONE ins | na 16 16 | 005224 | 86 22       |                 stx.d 000022         
 636:000 | DONE wsp | na 16 16 |        |             |
 637:000 | DONE cmt | na 16 16 |        |             |                 ; We print from the bottom up. Note that the Data Stack locations
 638:000 | DONE cmt | na 16 16 |        |             |                 ; dsp0 and dsp0+2 always contain garbage so they can be skipped.
 639:000 | DONE cmt | na 16 16 |        |             |                 ; See docs/INTERNALS.md for details
 640:000 | DONE ins | na 16 16 | 005226 | a2 ff 00    |                 ldx.# 0000ff         points to dsp0, which is garbage
 641:000 | DONE ins | na 16 16 | 005229 | ca          |                 dex                  
 642:000 | DONE ins | na 16 16 | 00522a | ca          |                 dex                  points to dsp0-2, which is also garbage
 643:000 | DONE wsp | na 16 16 |        |             |
 644:000 | DONE lbl | na 16 16 | 00522b |             | dots_loop                            
 645:000 | DONE ins | na 16 16 | 00522b | ca          |                 dex                  get next element on DS, initially dsp0-4
 646:000 | DONE ins | na 16 16 | 00522c | ca          |                 dex                  
 647:000 | DONE wsp | na 16 16 |        |             |
 648:000 | DONE ins | na 16 16 | 00522d | 5a          |                 phy                  save our counter
 649:000 | DONE ins | na 16 16 | 00522e | da          |                 phx                  
 650:000 | DONE wsp | na 16 16 |        |             |
 651:000 | DONE ins | na 16 16 | 00522f | b4 00       |                 ldy.dx 00            
 652:000 | DONE ins | na 16 16 | 005231 | 20 d7 5d    |                 jsr 005dd7           U.
 653:000 | DONE wsp | na 16 16 |        |             |
 654:000 | DONE ins | na 16 16 | 005234 | fa          |                 plx                  
 655:000 | DONE wsp | na 16 16 |        |             |
 656:000 | DONE ins | na 16 16 | 005235 | 7a          |                 ply                  get counter back
 657:000 | DONE ins | na 16 16 | 005236 | 88          |                 dey                  
 658:000 | DONE wsp | na 16 16 |        |             |
 659:000 | DONE ins | na 16 16 | 005237 | d0 f2       |                 bne 00522b           
 660:000 | DONE wsp | na 16 16 |        |             |
 661:000 | DONE ins | na 16 16 | 005239 | a6 22       |                 ldx.d 000022         restore data stack pointer
 662:000 | DONE wsp | na 16 16 |        |             |
 663:000 | DONE lbl | na 16 16 | 00523b |             | dots_done                            
 664:000 | DONE cmt | na 16 16 |        |             |                 ; Clean up. Again, we don't care about speed in this
 665:000 | DONE cmt | na 16 16 |        |             |                 ; word so we save one byte by doing DROP the slow way
 666:000 | DONE ins | na 16 16 | 00523b | 20 bf 57    |                 jsr 0057bf           
 667:000 | DONE wsp | na 16 16 |        |             |
 668:000 | DONE lbl | na 16 16 | 00523e |             | z_dots                               
 668:001 | DONE ins | na 16 16 | 00523e | 60          |                 rts                  
 669:000 | DONE wsp | na 16 16 |        |             |
 670:000 | DONE wsp | na 16 16 |        |             |
 671:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 672:000 | DONE cmt | na 16 16 |        |             | ; , "COMMA" ( n -- ) 11 bytes / 29 cycles
 673:000 | DONE cmt | na 16 16 |        |             | ; Allot one cell and store TOS in memory. We ignore alignment issues, though
 674:000 | DONE cmt | na 16 16 |        |             | ; satisfy the ANSI requirement that an aligned compiler pointer will remain
 675:000 | DONE cmt | na 16 16 |        |             | ; aligned
 676:000 | DONE cmt | na 16 16 |        |             | ; There is another variant possible:
 677:000 | DONE cmt | na 16 16 |        |             | ;               tya
 678:000 | DONE cmt | na 16 16 |        |             | ;               ldy.d cp
 679:000 | DONE cmt | na 16 16 |        |             | ;               sta.y 0000
 680:000 | DONE cmt | na 16 16 |        |             | ;               iny
 681:000 | DONE cmt | na 16 16 |        |             | ;               iny
 682:000 | DONE cmt | na 16 16 |        |             | ;               sty.d cp
 683:000 | DONE cmt | na 16 16 |        |             | ;               ldy.dx 00
 684:000 | DONE cmt | na 16 16 |        |             | ;               inx
 685:000 | DONE cmt | na 16 16 |        |             | ;               inx
 686:000 | DONE cmt | na 16 16 |        |             | ; This is as fast as the variant below, but three bytes longer
 687:000 | DONE lbl | na 16 16 | 00523f |             | xt_comma                             
 688:000 | DONE dir | na 16 16 |        |             |         .!a16                        
 689:000 | DONE ins | na 16 16 | 00523f | 98          |                 tya                  
 690:000 | DONE ins | na 16 16 | 005240 | 92 00       |                 sta.di 000000        STA (CP)
 691:000 | DONE ins | na 16 16 | 005242 | e6 00       |                 inc.d 000000         
 692:000 | DONE ins | na 16 16 | 005244 | e6 00       |                 inc.d 000000         
 693:000 | DONE wsp | na 16 16 |        |             |
 694:000 | DONE ins | na 16 16 | 005246 | b4 00       |                 ldy.dx 00            
 695:000 | DONE ins | na 16 16 | 005248 | e8          |                 inx                  
 696:000 | DONE ins | na 16 16 | 005249 | e8          |                 inx                  
 697:000 | DONE wsp | na 16 16 |        |             |
 698:000 | DONE lbl | na 16 16 | 00524a |             | z_comma                              
 698:001 | DONE ins | na 16 16 | 00524a | 60          |                 rts                  
 699:000 | DONE wsp | na 16 16 |        |             |
 700:000 | DONE wsp | na 16 16 |        |             |
 701:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 702:000 | DONE cmt | na 16 16 |        |             | ; : "COLON" ( "name" -- ) X bytes / X cycles
 703:000 | DONE cmt | na 16 16 |        |             | ; Start compilation of new word into the Dictionary. Use the CREATE routine
 704:000 | DONE cmt | na 16 16 |        |             | ; and fill in the rest by hand.
 705:000 | DONE lbl | na 16 16 | 00524b |             | xt_colon                             
 706:000 | DONE dir | na 16 16 |        |             |         .!a16                        
 707:000 | DONE cmt | na 16 16 |        |             |                 ; if we are already in compile mode, complain and abort
 708:000 | DONE ins | na 16 16 | 00524b | a5 14       |                 lda.d 000014         
 709:000 | DONE ins | na 16 16 | 00524d | f0 06       |                 beq 005255           
 710:000 | DONE wsp | na 16 16 |        |             |
 711:000 | DONE ins | na 16 16 | 00524f | a9 c9 6f    |                 lda.# 006fc9         
 712:000 | DONE ins | na 16 16 | 005252 | 4c 67 68    |                 jmp 006867           
 713:000 | DONE lbl | na 16 16 | 005255 |             | @                                    
 714:000 | DONE cmt | na 16 16 |        |             |                 ; Switch to compile state. From now on, everything goes in the
 715:000 | DONE cmt | na 16 16 |        |             |                 ; Dictionary
 716:000 | DONE ins | na 16 16 | 005255 | e6 14       |                 inc.d 000014         
 717:000 | DONE wsp | na 16 16 |        |             |
 718:000 | DONE cmt | na 16 16 |        |             |                 ; CREATE is going to change DP to point to the new word's
 719:000 | DONE cmt | na 16 16 |        |             |                 ; header. While this is fine for (say) variables, it would mean
 720:000 | DONE cmt | na 16 16 |        |             |                 ; that FIND-NAME etc would find a half-finished word when
 721:000 | DONE cmt | na 16 16 |        |             |                 ; looking in the Dictionary. To prevent this, we save the old
 722:000 | DONE cmt | na 16 16 |        |             |                 ; version of DP and restore it later. The new DP is placed in
 723:000 | DONE cmt | na 16 16 |        |             |                 ; the variable WORKWORD until we're finished with a SEMICOLON.
 724:000 | DONE ins | na 16 16 | 005257 | a5 02       |                 lda.d 000002         
 725:000 | DONE ins | na 16 16 | 005259 | 48          |                 pha                  CREATE uses tmp1, tmp2 and tmp3
 726:000 | DONE wsp | na 16 16 |        |             |
 727:000 | DONE ins | na 16 16 | 00525a | 20 7a 56    |                 jsr 00567a           
 728:000 | DONE wsp | na 16 16 |        |             |
 729:000 | DONE cmt | na 16 16 |        |             |                 ; Get the nt of the new word as described above. Only COLON,
 730:000 | DONE cmt | na 16 16 |        |             |                 ; SEMICOLON and RECURSE access WORKWORD
 731:000 | DONE ins | na 16 16 | 00525d | a5 02       |                 lda.d 000002         
 732:000 | DONE ins | na 16 16 | 00525f | 85 04       |                 sta.d 000004         
 733:000 | DONE ins | na 16 16 | 005261 | 68          |                 pla                  
 734:000 | DONE ins | na 16 16 | 005262 | 85 02       |                 sta.d 000002         
 735:000 | DONE wsp | na 16 16 |        |             |
 736:000 | DONE cmt | na 16 16 |        |             |                 ; CREATE includes a subroutine jump to DOVAR by default. We back
 737:000 | DONE cmt | na 16 16 |        |             |                 ; up three bytes and overwrite that. Note that 3 x DEC.D would
 738:000 | DONE cmt | na 16 16 |        |             |                 ; use 3 bytes and 18 cycles; this version uses 8 bytes but
 739:000 | DONE cmt | na 16 16 |        |             |                 ; only 13 cycles
 740:000 | DONE ins | na 16 16 | 005264 | a5 00       |                 lda.d 000000         
 741:000 | DONE ins | na 16 16 | 005266 | 38          |                 sec                  
 742:000 | DONE ins | na 16 16 | 005267 | e9 03 00    |                 sbc.# 0003           
 743:000 | DONE ins | na 16 16 | 00526a | 85 00       |                 sta.d 000000         
 744:000 | DONE wsp | na 16 16 |        |             |
 745:000 | DONE lbl | na 16 16 | 00526c |             | z_colon                              
 745:001 | DONE ins | na 16 16 | 00526c | 60          |                 rts                  
 746:000 | DONE wsp | na 16 16 |        |             |
 747:000 | DONE wsp | na 16 16 |        |             |
 748:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 749:000 | DONE cmt | na 16 16 |        |             | ; ; "SEMICOLON" ( -- ) X bytes / X cycles
 750:000 | DONE cmt | na 16 16 |        |             | ; End the compilation of a new word into the Dictionary. When we enter this,
 751:000 | DONE cmt | na 16 16 |        |             | ; WORKWORD is pointing to the nt_ of this word in the Dictionary, DP to the
 752:000 | DONE cmt | na 16 16 |        |             | ; previous word, and CP to the next free byte.  A Forth definition would be
 753:000 | DONE cmt | na 16 16 |        |             | ; (see "Starting Forth"):
 754:000 | DONE cmt | na 16 16 |        |             | ;  : ;  POSTPONE EXIT  REVEAL POSTPONE ; [ ; IMMEDIATE
 755:000 | DONE lbl | na 16 16 | 00526d |             | xt_semicolon                         
 756:000 | DONE dir | na 16 16 |        |             |         .!a16                        
 757:000 | DONE ins | na 16 16 | 00526d | 84 24       |                 sty.d 000024         
 758:000 | DONE wsp | na 16 16 |        |             |
 759:000 | DONE cmt | na 16 16 |        |             |                 ; CP is the byte that will be the address we use in the header for
 760:000 | DONE cmt | na 16 16 |        |             |                 ; the end-of-compile address (z_word). This is six bytes down in
 761:000 | DONE cmt | na 16 16 |        |             |                 ; the header
 762:000 | DONE ins | na 16 16 | 00526f | a0 06 00    |                 ldy.# 0006           
 763:000 | DONE ins | na 16 16 | 005272 | a5 00       |                 lda.d 000000         
 764:000 | DONE ins | na 16 16 | 005274 | 91 04       |                 sta.diy 000004       STA (WORKWORD),Y
 765:000 | DONE wsp | na 16 16 |        |             |
 766:000 | DONE cmt | na 16 16 |        |             |                 ; Add the RTS instruction to the end of the current word. We
 767:000 | DONE cmt | na 16 16 |        |             |                 ; don't have to switch the size of the A register because we
 768:000 | DONE cmt | na 16 16 |        |             |                 ; only move up the CP by one and the MSB will be overwritten.
 769:000 | DONE cmt | na 16 16 |        |             |                 ; Little endian MPUs for the win!
 770:000 | DONE ins | na 16 16 | 005276 | a9 60 00    |                 lda.# 60             opcode for RTS
 771:000 | DONE ins | na 16 16 | 005279 | 92 00       |                 sta.di 000000        STA (CP)
 772:000 | DONE ins | na 16 16 | 00527b | e6 00       |                 inc.d 000000         MSB will be overwritten
 773:000 | DONE wsp | na 16 16 |        |             |
 774:000 | DONE cmt | na 16 16 |        |             |                 ; Word definition is complete. Make the new word the last one in
 775:000 | DONE cmt | na 16 16 |        |             |                 ; the Dictionary
 776:000 | DONE ins | na 16 16 | 00527d | a5 04       |                 lda.d 000004         
 777:000 | DONE ins | na 16 16 | 00527f | 85 02       |                 sta.d 000002         
 778:000 | DONE wsp | na 16 16 |        |             |
 779:000 | DONE cmt | na 16 16 |        |             |                 ; Get our TOS back
 780:000 | DONE ins | na 16 16 | 005281 | a4 24       |                 ldy.d 000024         
 781:000 | DONE wsp | na 16 16 |        |             |
 782:000 | DONE cmt | na 16 16 |        |             |                 ; Set compile flag back to zero so we're back in interpret mode
 783:000 | DONE ins | na 16 16 | 005283 | 64 14       |                 stz.d 000014         
 784:000 | DONE wsp | na 16 16 |        |             |
 785:000 | DONE lbl | na 16 16 | 005285 |             | z_semicolon                          
 785:001 | DONE ins | na 16 16 | 005285 | 60          |                 rts                  
 786:000 | DONE wsp | na 16 16 |        |             |
 787:000 | DONE wsp | na 16 16 |        |             |
 788:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 789:000 | DONE cmt | na 16 16 |        |             | ; # "HASH" / "NUMBER-SIGN" ( ud -- ud )  X bytes / X cycles
 790:000 | DONE cmt | na 16 16 |        |             | ; Add one character to the beginning of the pictured output string.
 791:000 | DONE cmt | na 16 16 |        |             | ; Code based on https://github.com/philburk/pforth/blob/master/fth/numberio.fth
 792:000 | DONE cmt | na 16 16 |        |             | ; Forth code is  BASE @ UD/MOD ROT 9 OVER < IF 7 + THEN [CHAR] 0 + HOLD ;
 793:000 | DONE cmt | na 16 16 |        |             | ; TODO convert more parts to assembler
 794:000 | DONE lbl | na 16 16 | 005286 |             | xt_hash                              
 795:000 | DONE dir | na 16 16 |        |             |         .!a16                        
 796:000 | DONE ins | na 16 16 | 005286 | 20 53 55    |                 jsr 005553           ( ud addr )
 797:000 | DONE ins | na 16 16 | 005289 | 20 d4 52    |                 jsr 0052d4           ( ud u )
 798:000 | DONE ins | na 16 16 | 00528c | 20 e0 5d    |                 jsr 005de0           ( rem ud )
 799:000 | DONE ins | na 16 16 | 00528f | 20 32 5c    |                 jsr 005c32           ( ud rem )
 800:000 | DONE wsp | na 16 16 |        |             |
 801:000 | DONE cmt | na 16 16 |        |             |                 ; Convert the number that is left over to an ASCII character. We
 802:000 | DONE cmt | na 16 16 |        |             |                 ; use a string lookup for speed
 803:000 | DONE ins | na 16 16 | 005292 | e2 20       |                 sep 20               
 803:001 | DONE ctl | na  8 16 |        |             |         .!a8
 804:000 | DONE ins | na  8 16 | 005294 | b9 2b 70    |                 lda.y 00702b         
 805:000 | DONE ins | na  8 16 | 005297 | c2 20       |                 rep 20               
 805:001 | DONE ctl | na 16 16 |        |             |         .!a16
 806:000 | DONE cmt | na 16 16 |        |             |                 ; overwrite remainder with ASCII value
 807:000 | DONE ins | na 16 16 | 005299 | 29 ff 00    |                 and.# 00ff           
 808:000 | DONE ins | na 16 16 | 00529c | a8          |                 tay                  ( ud char )
 809:000 | DONE wsp | na 16 16 |        |             |
 810:000 | DONE ins | na 16 16 | 00529d | 20 89 59    |                 jsr 005989           JSR/RTS
 811:000 | DONE wsp | na 16 16 |        |             |
 812:000 | DONE lbl | na 16 16 | 0052a0 |             | z_hash                               
 812:001 | DONE ins | na 16 16 | 0052a0 | 60          |                 rts                  
 813:000 | DONE wsp | na 16 16 |        |             |
 814:000 | DONE wsp | na 16 16 |        |             |
 815:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 816:000 | DONE cmt | na 16 16 |        |             | ; #> "NUMBERMORE" / "NUMBER-GREATER" ( d -- addr u ) X bytes / X cycles
 817:000 | DONE cmt | na 16 16 |        |             | ; Finish conversion of pictured number string, putting address and length on the
 818:000 | DONE cmt | na 16 16 |        |             | ; Data Stack. Original Fort is  2DROP HLD @ PAD OVER -  Based on
 819:000 | DONE cmt | na 16 16 |        |             | ; https://github.com/philburk/pforth/blob/master/fth/numberio.fth
 820:000 | DONE lbl | na 16 16 | 0052a1 |             | xt_numbermore                        
 821:000 | DONE dir | na 16 16 |        |             |         .!a16                        
 822:000 | DONE cmt | na 16 16 |        |             |                 ; We simply overwrite the double cell number, saving us a lot of
 823:000 | DONE cmt | na 16 16 |        |             |                 ; stack thrashing. First, put the address of the string's head in
 824:000 | DONE cmt | na 16 16 |        |             |                 ; TOS and NOS
 825:000 | DONE ins | na 16 16 | 0052a1 | a4 18       |                 ldy.d 000018         
 826:000 | DONE ins | na 16 16 | 0052a3 | 94 00       |                 sty.dx 00            ( addr addr )
 827:000 | DONE wsp | na 16 16 |        |             |
 828:000 | DONE cmt | na 16 16 |        |             |                 ; add the address of the string's end, which is PAD
 829:000 | DONE ins | na 16 16 | 0052a5 | 20 2a 5b    |                 jsr 005b2a           ( addr addr pad )
 830:000 | DONE wsp | na 16 16 |        |             |
 831:000 | DONE ins | na 16 16 | 0052a8 | 38          |                 sec                  
 832:000 | DONE ins | na 16 16 | 0052a9 | 98          |                 tya                  
 833:000 | DONE ins | na 16 16 | 0052aa | f5 00       |                 sbc.dx 00            pad - addr is the length of the string
 834:000 | DONE ins | na 16 16 | 0052ac | a8          |                 tay                  ( addr addr n )
 835:000 | DONE wsp | na 16 16 |        |             |
 836:000 | DONE ins | na 16 16 | 0052ad | e8          |                 inx                  NIP
 837:000 | DONE ins | na 16 16 | 0052ae | e8          |                 inx                  
 838:000 | DONE wsp | na 16 16 |        |             |
 839:000 | DONE lbl | na 16 16 | 0052af |             | z_numbermore                         
 839:001 | DONE ins | na 16 16 | 0052af | 60          |                 rts                  
 840:000 | DONE wsp | na 16 16 |        |             |
 841:000 | DONE wsp | na 16 16 |        |             |
 842:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 843:000 | DONE cmt | na 16 16 |        |             | ; #S "HASHS" / "NUMBER SIGN" ( ud -- ud ) X bytes / X cycles
 844:000 | DONE cmt | na 16 16 |        |             | ; Completely convert number for pictured numerical output. Based on
 845:000 | DONE cmt | na 16 16 |        |             | ; https://github.com/philburk/pforth/blob/master/fth/system.fth
 846:000 | DONE cmt | na 16 16 |        |             | ; Original Forth code  BEGIN # 2DUP OR 0= UNTIL
 847:000 | DONE lbl | na 16 16 | 0052b0 |             | xt_hashs                             
 848:000 | DONE dir | na 16 16 |        |             |         .!a16                        
 849:000 | DONE lbl | na 16 16 | 0052b0 |             | hashs_loop                           
 850:000 | DONE cmt | na 16 16 |        |             |                 ; covert a single number ("#")
 851:000 | DONE ins | na 16 16 | 0052b0 | 20 86 52    |                 jsr 005286           ( ud -- ud )
 852:000 | DONE wsp | na 16 16 |        |             |
 853:000 | DONE cmt | na 16 16 |        |             |                 ; stop when the double-celled number on the TOS is zero
 854:000 | DONE ins | na 16 16 | 0052b3 | 98          |                 tya                  
 855:000 | DONE ins | na 16 16 | 0052b4 | 15 00       |                 ora.dx 00            
 856:000 | DONE ins | na 16 16 | 0052b6 | d0 f8       |                 bne 0052b0           
 857:000 | DONE wsp | na 16 16 |        |             |
 858:000 | DONE lbl | na 16 16 | 0052b8 |             | z_hashs                              
 858:001 | DONE ins | na 16 16 | 0052b8 | 60          |                 rts                  
 859:000 | DONE wsp | na 16 16 |        |             |
 860:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 861:000 | DONE cmt | na 16 16 |        |             | ; ? "QUESTION" ( addr -- ) X bytes / X cycles
 862:000 | DONE cmt | na 16 16 |        |             | ; Print content of a variable. This is used interactively and humans are
 863:000 | DONE cmt | na 16 16 |        |             | ; slow, so we just go for the subroutine jumps to keep it short
 864:000 | DONE lbl | na 16 16 | 0052b9 |             | xt_question                          
 865:000 | DONE ins | na 16 16 | 0052b9 | 20 d4 52    |                 jsr 0052d4           
 866:000 | DONE ins | na 16 16 | 0052bc | 20 d5 51    |                 jsr 0051d5           
 867:000 | DONE wsp | na 16 16 |        |             |
 868:000 | DONE lbl | na 16 16 | 0052bf |             | z_question                           
 868:001 | DONE ins | na 16 16 | 0052bf | 60          |                 rts                  
 869:000 | DONE wsp | na 16 16 |        |             |
 870:000 | DONE wsp | na 16 16 |        |             |
 871:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 872:000 | DONE cmt | na 16 16 |        |             | ; QDUP ( n -- 0 | n n ) X bytes / X cycles
 873:000 | DONE cmt | na 16 16 |        |             | ; If top element on Data Stack is not zero, duplicate it
 874:000 | DONE lbl | na 16 16 | 0052c0 |             | xt_qdup                              
 875:000 | DONE ins | na 16 16 | 0052c0 | 98          |                 tya                  
 876:000 | DONE ins | na 16 16 | 0052c1 | f0 04       |                 beq 0052c7           
 877:000 | DONE wsp | na 16 16 |        |             |
 878:000 | DONE ins | na 16 16 | 0052c3 | ca          |                 dex                  
 879:000 | DONE ins | na 16 16 | 0052c4 | ca          |                 dex                  
 880:000 | DONE ins | na 16 16 | 0052c5 | 94 00       |                 sty.dx 00            
 881:000 | DONE wsp | na 16 16 |        |             |
 882:000 | DONE lbl | na 16 16 | 0052c7 |             | z_qdup                               
 882:001 | DONE ins | na 16 16 | 0052c7 | 60          |                 rts                  
 883:000 | DONE wsp | na 16 16 |        |             |
 884:000 | DONE wsp | na 16 16 |        |             |
 885:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 886:000 | DONE cmt | na 16 16 |        |             | ; ! "STORE" ( n addr -- ) 9 bytes / X cycles
 887:000 | DONE cmt | na 16 16 |        |             | ; Save value at designated memory location
 888:000 | DONE lbl | na 16 16 | 0052c8 |             | xt_store                             
 889:000 | DONE dir | na 16 16 |        |             |         .!a16                        
 890:000 | DONE ins | na 16 16 | 0052c8 | b5 00       |                 lda.dx 00            NOS has value
 891:000 | DONE ins | na 16 16 | 0052ca | 99 00 00    |                 sta.y 0000           
 892:000 | DONE wsp | na 16 16 |        |             |
 893:000 | DONE ins | na 16 16 | 0052cd | b4 02       |                 ldy.dx 02            
 894:000 | DONE ins | na 16 16 | 0052cf | e8          |                 inx                  
 895:000 | DONE ins | na 16 16 | 0052d0 | e8          |                 inx                  
 896:000 | DONE ins | na 16 16 | 0052d1 | e8          |                 inx                  
 897:000 | DONE ins | na 16 16 | 0052d2 | e8          |                 inx                  
 898:000 | DONE wsp | na 16 16 |        |             |
 899:000 | DONE lbl | na 16 16 | 0052d3 |             | z_store                              
 899:001 | DONE ins | na 16 16 | 0052d3 | 60          |                 rts                  
 900:000 | DONE wsp | na 16 16 |        |             |
 901:000 | DONE wsp | na 16 16 |        |             |
 902:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 903:000 | DONE cmt | na 16 16 |        |             | ; @ "FETCH" ( addr -- n ) 4 bytes / 7-8 cycles
 904:000 | DONE cmt | na 16 16 |        |             | ; Get one cell (16 bit) value from given address
 905:000 | DONE lbl | na 16 16 | 0052d4 |             | xt_fetch                             
 906:000 | DONE ins | na 16 16 | 0052d4 | b9 00 00    |                 lda.y 0000           
 907:000 | DONE ins | na 16 16 | 0052d7 | a8          |                 tay                  
 908:000 | DONE wsp | na 16 16 |        |             |
 909:000 | DONE lbl | na 16 16 | 0052d8 |             | z_fetch                              
 909:001 | DONE ins | na 16 16 | 0052d8 | 60          |                 rts                  
 910:000 | DONE wsp | na 16 16 |        |             |
 911:000 | DONE wsp | na 16 16 |        |             |
 912:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 913:000 | DONE cmt | na 16 16 |        |             | ; ['] "BRACKET-TICK" ( -- ) X bytes / X cycles
 914:000 | DONE cmt | na 16 16 |        |             | ; Store xt of following word during compilation
 915:000 | DONE lbl | na 16 16 | 0052d9 |             | xt_brackettick                       
 916:000 | DONE ins | na 16 16 | 0052d9 | 20 13 54    |                 jsr 005413           
 917:000 | DONE ins | na 16 16 | 0052dc | 4c af 59    |                 jmp 0059af           JSR/RTS
 918:000 | DONE lbl | na 16 16 | 0052df |             | z_brackettick                        
 919:000 | DONE wsp | na 16 16 |        |             |
 920:000 | DONE wsp | na 16 16 |        |             |
 921:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 922:000 | DONE cmt | na 16 16 |        |             | ; [ "LEFTBRACKET" ( -- ) X bytes / X cycles
 923:000 | DONE cmt | na 16 16 |        |             | ; Enter the interpretation state. This is an immediate, compile-only word
 924:000 | DONE lbl | na 16 16 | 0052df |             | xt_leftbracket                       
 925:000 | DONE ins | na 16 16 | 0052df | 64 14       |                 stz.d 000014         
 926:000 | DONE lbl | na 16 16 | 0052e1 |             | z_leftbracket                        
 926:001 | DONE ins | na 16 16 | 0052e1 | 60          |                 rts                  
 927:000 | DONE wsp | na 16 16 |        |             |
 928:000 | DONE wsp | na 16 16 |        |             |
 929:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 930:000 | DONE cmt | na 16 16 |        |             | ; ] "RIGHTBRACKET" ( -- ) X bytes / X cycles
 931:000 | DONE cmt | na 16 16 |        |             | ; Enter the compile state. In theory, we should be able to get away with
 932:000 | DONE cmt | na 16 16 |        |             | ; a simple INC.A, but this is more error tolerant. For obvious reasons, this
 933:000 | DONE cmt | na 16 16 |        |             | ; cannot be COMPILE-ONLY, and native compile doesn't make much sense either
 934:000 | DONE lbl | na 16 16 | 0052e2 |             | xt_rightbracket                      
 935:000 | DONE ins | na 16 16 | 0052e2 | a9 01 00    |                 lda.# 0001           
 936:000 | DONE ins | na 16 16 | 0052e5 | 85 14       |                 sta.d 000014         
 937:000 | DONE wsp | na 16 16 |        |             |
 938:000 | DONE lbl | na 16 16 | 0052e7 |             | z_rightbracket                       
 938:001 | DONE ins | na 16 16 | 0052e7 | 60          |                 rts                  
 939:000 | DONE wsp | na 16 16 |        |             |
 940:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 941:000 | DONE cmt | na 16 16 |        |             | ; [CHAR] "BRACKET-CHAR" ( "c" -- ) X bytes / X cycles
 942:000 | DONE cmt | na 16 16 |        |             | ; At compile time, compile the ASCII value of a character as a literal
 943:000 | DONE cmt | na 16 16 |        |             | ; This is an immediate, compile-only word. A definition given in
 944:000 | DONE cmt | na 16 16 |        |             | ; http://forth-standard.org/standard/implement is
 945:000 | DONE cmt | na 16 16 |        |             | ; : [CHAR] CHAR POSTPONE LITERAL ; IMMEDIATE
 946:000 | DONE cmt | na 16 16 |        |             | ; TODO decide if this is worth unrolling
 947:000 | DONE lbl | na 16 16 | 0052e8 |             | xt_bracketchar                       
 948:000 | DONE ins | na 16 16 | 0052e8 | 20 c2 55    |                 jsr 0055c2           
 949:000 | DONE ins | na 16 16 | 0052eb | 20 af 59    |                 jsr 0059af           
 950:000 | DONE wsp | na 16 16 |        |             |
 951:000 | DONE lbl | na 16 16 | 0052ee |             | z_bracketchar                        
 951:001 | DONE ins | na 16 16 | 0052ee | 60          |                 rts                  
 952:000 | DONE wsp | na 16 16 |        |             |
 953:000 | DONE wsp | na 16 16 |        |             |
 954:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 955:000 | DONE cmt | na 16 16 |        |             | ; \ "BACKSLASH" ( -- ) 4 bytes / X cycles
 956:000 | DONE cmt | na 16 16 |        |             | ; Ignore rest of line as comment
 957:000 | DONE lbl | na 16 16 | 0052ef |             | xt_backslash                         
 958:000 | DONE dir | na 16 16 |        |             |         .!a16                        
 959:000 | DONE cmt | na 16 16 |        |             |                 ; Advance >IN to end of the line
 960:000 | DONE ins | na 16 16 | 0052ef | a5 0a       |                 lda.d 00000a         
 961:000 | DONE ins | na 16 16 | 0052f1 | 85 0c       |                 sta.d 00000c         
 962:000 | DONE wsp | na 16 16 |        |             |
 963:000 | DONE lbl | na 16 16 | 0052f3 |             | z_backslash                          
 963:001 | DONE ins | na 16 16 | 0052f3 | 60          |                 rts                  
 964:000 | DONE wsp | na 16 16 |        |             |
 965:000 | DONE wsp | na 16 16 |        |             |
 966:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 967:000 | DONE cmt | na 16 16 |        |             | ; + "PLUS" ( n m -- n+m ) 7 bytes / X cycles
 968:000 | DONE cmt | na 16 16 |        |             | ; Add TOS and NOS
 969:000 | DONE lbl | na 16 16 | 0052f4 |             | xt_plus                              
 970:000 | DONE dir | na 16 16 |        |             |         .!a16                        
 971:000 | DONE ins | na 16 16 | 0052f4 | 98          |                 tya                  
 972:000 | DONE ins | na 16 16 | 0052f5 | 18          |                 clc                  
 973:000 | DONE ins | na 16 16 | 0052f6 | 75 00       |                 adc.dx 00            
 974:000 | DONE ins | na 16 16 | 0052f8 | a8          |                 tay                  
 975:000 | DONE ins | na 16 16 | 0052f9 | e8          |                 inx                  
 976:000 | DONE ins | na 16 16 | 0052fa | e8          |                 inx                  
 977:000 | DONE wsp | na 16 16 |        |             |
 978:000 | DONE lbl | na 16 16 | 0052fb |             | z_plus                               
 978:001 | DONE ins | na 16 16 | 0052fb | 60          |                 rts                  
 979:000 | DONE wsp | na 16 16 |        |             |
 980:000 | DONE wsp | na 16 16 |        |             |
 981:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 982:000 | DONE cmt | na 16 16 |        |             | ; - "MINUS" ( n m -- n-m ) 10 bytes / X cycles
 983:000 | DONE cmt | na 16 16 |        |             | ; Subtract NOS from TOS
 984:000 | DONE lbl | na 16 16 | 0052fc |             | xt_minus                             
 985:000 | DONE dir | na 16 16 |        |             |         .!a16                        
 986:000 | DONE ins | na 16 16 | 0052fc | 98          |                 tya                  
 987:000 | DONE ins | na 16 16 | 0052fd | 49 ff ff    |                 eor.# 0ffff          
 988:000 | DONE wsp | na 16 16 |        |             |
 989:000 | DONE ins | na 16 16 | 005300 | 38          |                 sec                  not CLC
 990:000 | DONE ins | na 16 16 | 005301 | 75 00       |                 adc.dx 00            
 991:000 | DONE wsp | na 16 16 |        |             |
 992:000 | DONE ins | na 16 16 | 005303 | a8          |                 tay                  
 993:000 | DONE ins | na 16 16 | 005304 | e8          |                 inx                  
 994:000 | DONE ins | na 16 16 | 005305 | e8          |                 inx                  
 995:000 | DONE wsp | na 16 16 |        |             |
 996:000 | DONE lbl | na 16 16 | 005306 |             | z_minus                              
 996:001 | DONE ins | na 16 16 | 005306 | 60          |                 rts                  
 997:000 | DONE wsp | na 16 16 |        |             |
 998:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 999:000 | DONE cmt | na 16 16 |        |             | ; -ROT ( a b c -- c a b )  X bytes / X cycles
1000:000 | DONE cmt | na 16 16 |        |             | ; Rotate top three entries of Data Stack upwards
1001:000 | DONE lbl | na 16 16 | 005307 |             | xt_mrot                              
1002:000 | DONE dir | na 16 16 |        |             |         .!a16                        
1003:000 | DONE dir | na 16 16 |        |             |         .!xy16                       
1004:000 | DONE ins | na 16 16 | 005307 | b5 02       |                 lda.dx 02            save a
1005:000 | DONE ins | na 16 16 | 005309 | 94 02       |                 sty.dx 02            move c to 3OS
1006:000 | DONE ins | na 16 16 | 00530b | b4 00       |                 ldy.dx 00            move b to TOS
1007:000 | DONE ins | na 16 16 | 00530d | 95 00       |                 sta.dx 00            save a as NOS
1008:000 | DONE wsp | na 16 16 |        |             |
1009:000 | DONE lbl | na 16 16 | 00530f |             | z_mrot                               
1009:001 | DONE ins | na 16 16 | 00530f | 60          |                 rts                  
1010:000 | DONE wsp | na 16 16 |        |             |
1011:000 | DONE wsp | na 16 16 |        |             |
1012:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1013:000 | DONE cmt | na 16 16 |        |             | ; -TRAILING ( addr u -- addr u ) X bytes / X cycles
1014:000 | DONE cmt | na 16 16 |        |             | ; Remove any trailing blanks. Uses tmp3
1015:000 | DONE lbl | na 16 16 | 005310 |             | xt_dtrailing                         
1016:000 | DONE cmt | na 16 16 |        |             |                 ; if u is zero, just return string
1017:000 | DONE ins | na 16 16 | 005310 | 98          |                 tya                  force flag check
1018:000 | DONE ins | na 16 16 | 005311 | f0 13       |                 beq 005326           
1019:000 | DONE wsp | na 16 16 |        |             |
1020:000 | DONE ins | na 16 16 | 005313 | b5 00       |                 lda.dx 00            
1021:000 | DONE ins | na 16 16 | 005315 | 85 20       |                 sta.d 000020         
1022:000 | DONE ins | na 16 16 | 005317 | 88          |                 dey                  convert length to index
1023:000 | DONE ins | na 16 16 | 005318 | e2 20       |                 sep 20               
1023:001 | DONE ctl | na  8 16 |        |             |         .!a8
1024:000 | DONE wsp | na  8 16 |        |             |
1025:000 | DONE lbl | na  8 16 | 00531a |             | dtrailing_loop                       
1026:000 | DONE ins | na  8 16 | 00531a | b1 20       |                 lda.diy 000020       
1027:000 | DONE ins | na  8 16 | 00531c | c9 20       |                 cmp.# 20             
1028:000 | DONE ins | na  8 16 | 00531e | d0 03       |                 bne 005323           
1029:000 | DONE ins | na  8 16 | 005320 | 88          |                 dey                  
1030:000 | DONE ins | na  8 16 | 005321 | 10 f7       |                 bpl 00531a           fall through when done
1031:000 | DONE wsp | na  8 16 |        |             |
1032:000 | DONE lbl | na  8 16 | 005323 |             | dtrailing_done                       
1033:000 | DONE ins | na  8 16 | 005323 | c2 20       |                 rep 20               
1033:001 | DONE ctl | na 16 16 |        |             |         .!a16
1034:000 | DONE ins | na 16 16 | 005325 | c8          |                 iny                  convert index to length
1035:000 | DONE wsp | na 16 16 |        |             |
1036:000 | DONE lbl | na 16 16 | 005326 |             | z_dtrailing                          
1036:001 | DONE ins | na 16 16 | 005326 | 60          |                 rts                  
1037:000 | DONE wsp | na 16 16 |        |             |
1038:000 | DONE wsp | na 16 16 |        |             |
1039:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1040:000 | DONE cmt | na 16 16 |        |             | ; = "EQUAL" ( n m -- f ) 11 bytes / 18-20 cycles
1041:000 | DONE cmt | na 16 16 |        |             | ; See if TOS and NOS are the same
1042:000 | DONE lbl | na 16 16 | 005327 |             | xt_equal                             
1043:000 | DONE ins | na 16 16 | 005327 | 98          |                 tya                  
1044:000 | DONE ins | na 16 16 | 005328 | a0 00 00    |                 ldy.# 0000           default value is false
1045:000 | DONE wsp | na 16 16 |        |             |
1046:000 | DONE ins | na 16 16 | 00532b | d5 00       |                 cmp.dx 00            
1047:000 | DONE ins | na 16 16 | 00532d | d0 01       |                 bne 005330           
1048:000 | DONE ins | na 16 16 | 00532f | 88          |                 dey                  wraps to 0FFFF (true)
1049:000 | DONE wsp | na 16 16 |        |             |
1050:000 | DONE lbl | na 16 16 | 005330 |             | equal_not                            
1051:000 | DONE ins | na 16 16 | 005330 | e8          |                 inx                  
1052:000 | DONE ins | na 16 16 | 005331 | e8          |                 inx                  
1053:000 | DONE wsp | na 16 16 |        |             |
1054:000 | DONE lbl | na 16 16 | 005332 |             | z_equal                              
1054:001 | DONE ins | na 16 16 | 005332 | 60          |                 rts                  
1055:000 | DONE wsp | na 16 16 |        |             |
1056:000 | DONE wsp | na 16 16 |        |             |
1057:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1058:000 | DONE cmt | na 16 16 |        |             | ; 0 "ZERO" ( -- 0 ) 7 bytes / 12 cycles
1059:000 | DONE cmt | na 16 16 |        |             | ; Pushes the number 0000 on the Data Stack
1060:000 | DONE lbl | na 16 16 | 005333 |             | xt_zero                              
1061:000 | DONE dir | na 16 16 |        |             |         .!xy16                       
1062:000 | DONE ins | na 16 16 | 005333 | ca          |                 dex                  
1063:000 | DONE ins | na 16 16 | 005334 | ca          |                 dex                  
1064:000 | DONE ins | na 16 16 | 005335 | 94 00       |                 sty.dx 00            
1065:000 | DONE ins | na 16 16 | 005337 | a0 00 00    |                 ldy.# 0000           
1066:000 | DONE wsp | na 16 16 |        |             |
1067:000 | DONE lbl | na 16 16 | 00533a |             | z_zero                               
1067:001 | DONE ins | na 16 16 | 00533a | 60          |                 rts                  
1068:000 | DONE wsp | na 16 16 |        |             |
1069:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1070:000 | DONE cmt | na 16 16 |        |             | ; 0= "ZERO-EQUAL" ( n -- f ) X bytes / X cycles
1071:000 | DONE cmt | na 16 16 |        |             | ; Return the true flag if TOS is zero
1072:000 | DONE lbl | na 16 16 | 00533b |             | xt_zero-equal                        
1073:000 | DONE dir | na 16 16 |        |             |         .!a16                        
1074:000 | DONE ins | na 16 16 | 00533b | 98          |                 tya                  force flag check
1075:000 | DONE ins | na 16 16 | 00533c | d0 05       |                 bne 005343           
1076:000 | DONE wsp | na 16 16 |        |             |
1077:000 | DONE ins | na 16 16 | 00533e | a0 ff ff    |                 ldy.# 0ffff          
1078:000 | DONE ins | na 16 16 | 005341 | 80 03       |                 bra 005346           
1079:000 | DONE lbl | na 16 16 | 005343 |             | ze_not_zero                          
1080:000 | DONE ins | na 16 16 | 005343 | a0 00 00    |                 ldy.# 0000           
1081:000 | DONE wsp | na 16 16 |        |             |
1082:000 | DONE lbl | na 16 16 | 005346 |             | z_zero-equal                         
1082:001 | DONE ins | na 16 16 | 005346 | 60          |                 rts                  
1083:000 | DONE wsp | na 16 16 |        |             |
1084:000 | DONE wsp | na 16 16 |        |             |
1085:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1086:000 | DONE cmt | na 16 16 |        |             | ; 0< "ZERO-LESS" ( n -- f ) 11 bytes / X cycles
1087:000 | DONE cmt | na 16 16 |        |             | ; Return the true flag if TOS is less than zero
1088:000 | DONE lbl | na 16 16 | 005347 |             | xt_zero-less                         
1089:000 | DONE dir | na 16 16 |        |             |         .!a16                        
1090:000 | DONE ins | na 16 16 | 005347 | 98          |                 tya                  force flag check
1091:000 | DONE ins | na 16 16 | 005348 | 30 05       |                 bmi 00534f           
1092:000 | DONE wsp | na 16 16 |        |             |
1093:000 | DONE ins | na 16 16 | 00534a | a0 00 00    |                 ldy.# 0000           
1094:000 | DONE ins | na 16 16 | 00534d | 80 03       |                 bra 005352           
1095:000 | DONE wsp | na 16 16 |        |             |
1096:000 | DONE lbl | na 16 16 | 00534f |             | zero-less-is-less                    
1097:000 | DONE ins | na 16 16 | 00534f | a0 ff ff    |                 ldy.# 0ffff          
1098:000 | DONE wsp | na 16 16 |        |             |
1099:000 | DONE lbl | na 16 16 | 005352 |             | z_zero-less                          
1099:001 | DONE ins | na 16 16 | 005352 | 60          |                 rts                  
1100:000 | DONE wsp | na 16 16 |        |             |
1101:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1102:000 | DONE cmt | na 16 16 |        |             | ; 0<> "ZERO-NOTEQUAL" ( n -- f ) 11 bytes / X cycles
1103:000 | DONE cmt | na 16 16 |        |             | ; Return the true flag if TOS is not zero
1104:000 | DONE lbl | na 16 16 | 005353 |             | xt_zero-notequal                     
1105:000 | DONE dir | na 16 16 |        |             |         .!a16                        
1106:000 | DONE ins | na 16 16 | 005353 | 98          |                 tya                  force flag check
1107:000 | DONE ins | na 16 16 | 005354 | f0 05       |                 beq 00535b           
1108:000 | DONE ins | na 16 16 | 005356 | a0 ff ff    |                 ldy.# 0ffff          
1109:000 | DONE ins | na 16 16 | 005359 | 80 03       |                 bra 00535e           
1110:000 | DONE lbl | na 16 16 | 00535b |             | zne_is_zero                          
1111:000 | DONE ins | na 16 16 | 00535b | a0 00 00    |                 ldy.# 0000           
1112:000 | DONE lbl | na 16 16 | 00535e |             | z_zero-notequal                      
1113:000 | DONE ins | na 16 16 | 00535e | 60          |                 rts                  
1114:000 | DONE wsp | na 16 16 |        |             |
1115:000 | DONE wsp | na 16 16 |        |             |
1116:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1117:000 | DONE cmt | na 16 16 |        |             | ; 0> "ZERO-MORE" ( n -- f ) X bytes / X cycles
1118:000 | DONE cmt | na 16 16 |        |             | ; Return the true flag if TOS is more than zero
1119:000 | DONE lbl | na 16 16 | 00535f |             | xt_zero-more                         
1120:000 | DONE dir | na 16 16 |        |             |         .!a16                        
1121:000 | DONE ins | na 16 16 | 00535f | a9 00 00    |                 lda.# 0000           default is false
1122:000 | DONE wsp | na 16 16 |        |             |
1123:000 | DONE ins | na 16 16 | 005362 | 88          |                 dey                  
1124:000 | DONE ins | na 16 16 | 005363 | 10 02       |                 bpl 005367           was at least 1
1125:000 | DONE wsp | na 16 16 |        |             |
1126:000 | DONE ins | na 16 16 | 005365 | 80 01       |                 bra 005368           nope, stays false
1127:000 | DONE wsp | na 16 16 |        |             |
1128:000 | DONE lbl | na 16 16 | 005367 |             | zero-more_true                       
1129:000 | DONE ins | na 16 16 | 005367 | 3a          |                 dec.a                wraps to 0ffff, true
1130:000 | DONE lbl | na 16 16 | 005368 |             | zero-more_done                       
1131:000 | DONE ins | na 16 16 | 005368 | a8          |                 tay                  
1132:000 | DONE wsp | na 16 16 |        |             |
1133:000 | DONE lbl | na 16 16 | 005369 |             | z_zero-more                          
1133:001 | DONE ins | na 16 16 | 005369 | 60          |                 rts                  
1134:000 | DONE wsp | na 16 16 |        |             |
1135:000 | DONE wsp | na 16 16 |        |             |
1136:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1137:000 | DONE cmt | na 16 16 |        |             | ; 0BRANCH ( 0 | f -- ) X bytes / X cycles
1138:000 | DONE cmt | na 16 16 |        |             | ; Branch if TOS is zero. This exects the next two bytes to be the address of
1139:000 | DONE cmt | na 16 16 |        |             | ; where to branch to if the test fails. The code may not be natively compiled
1140:000 | DONE cmt | na 16 16 |        |             | ; because we need the return address provided by JSR's push to the Return Stack
1141:000 | DONE cmt | na 16 16 |        |             | ; This routine uses tmpbranch
1142:000 | DONE lbl | na 16 16 | 00536a |             | xt_zbranch                           
1143:000 | DONE dir | na 16 16 |        |             |         .!a16                        
1144:000 | DONE cmt | na 16 16 |        |             |                 ; encode subroutine jump to run time code
1145:000 | DONE ins | na 16 16 | 00536a | f4 71 53    |                 phe.# 005371         
1146:000 | DONE ins | na 16 16 | 00536d | 20 46 68    |                 jsr 006846           
1147:000 | DONE wsp | na 16 16 |        |             |
1148:000 | DONE lbl | na 16 16 | 005370 |             | z_zbranch                            
1148:001 | DONE ins | na 16 16 | 005370 | 60          |                 rts                  
1149:000 | DONE wsp | na 16 16 |        |             |
1150:000 | DONE lbl | na 16 16 | 005371 |             | zbranch_rt                           
1151:000 | DONE cmt | na 16 16 |        |             |                 ; See if the flag is zero, which is the whole purpose of this
1152:000 | DONE cmt | na 16 16 |        |             |                 ; operation after all
1153:000 | DONE ins | na 16 16 | 005371 | 98          |                 tya                  force flag check
1154:000 | DONE ins | na 16 16 | 005372 | f0 05       |                 beq 005379           flag is false (zero), so we branch
1155:000 | DONE wsp | na 16 16 |        |             |
1156:000 | DONE cmt | na 16 16 |        |             |                 ; Flag is TRUE, so we skip over the next two bytes. Put
1157:000 | DONE cmt | na 16 16 |        |             |                 ; differently, this is the part between IF and THEN
1158:000 | DONE ins | na 16 16 | 005374 | 68          |                 pla                  
1159:000 | DONE ins | na 16 16 | 005375 | 1a          |                 inc.a                
1160:000 | DONE ins | na 16 16 | 005376 | 1a          |                 inc.a                
1161:000 | DONE wsp | na 16 16 |        |             |
1162:000 | DONE ins | na 16 16 | 005377 | 80 09       |                 bra 005382           
1163:000 | DONE wsp | na 16 16 |        |             |
1164:000 | DONE lbl | na 16 16 | 005379 |             | zb_zero                              
1165:000 | DONE cmt | na 16 16 |        |             |                 ; Flag is FALSE, so we take the dump to the address given in the
1166:000 | DONE cmt | na 16 16 |        |             |                 ; next two bytes. We don't need Y anymore, so we can use it for
1167:000 | DONE cmt | na 16 16 |        |             |                 ; indexing
1168:000 | DONE ins | na 16 16 | 005379 | 68          |                 pla                  
1169:000 | DONE ins | na 16 16 | 00537a | 85 1a       |                 sta.d 00001a         
1170:000 | DONE ins | na 16 16 | 00537c | a0 01 00    |                 ldy.# 0001           
1171:000 | DONE ins | na 16 16 | 00537f | b1 1a       |                 lda.diy 00001a       
1172:000 | DONE wsp | na 16 16 |        |             |
1173:000 | DONE cmt | na 16 16 |        |             |                 ; Subtract one from the address given becasue of the RTS
1174:000 | DONE cmt | na 16 16 |        |             |                 ; mechanics
1175:000 | DONE ins | na 16 16 | 005381 | 3a          |                 dec.a                
1176:000 | DONE wsp | na 16 16 |        |             |
1177:000 | DONE lbl | na 16 16 | 005382 |             | zb_done                              
1178:000 | DONE cmt | na 16 16 |        |             |                 ; One we or another, this is where we're going to jump to
1179:000 | DONE ins | na 16 16 | 005382 | 48          |                 pha                  
1180:000 | DONE wsp | na 16 16 |        |             |
1181:000 | DONE cmt | na 16 16 |        |             |                 ; Clean up the Data Stack and jump
1182:000 | DONE ins | na 16 16 | 005383 | b4 00       |                 ldy.dx 00            
1183:000 | DONE ins | na 16 16 | 005385 | e8          |                 inx                  
1184:000 | DONE ins | na 16 16 | 005386 | e8          |                 inx                  
1185:000 | DONE wsp | na 16 16 |        |             |
1186:000 | DONE ins | na 16 16 | 005387 | 60          |                 rts                  
1187:000 | DONE wsp | na 16 16 |        |             |
1188:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1189:000 | DONE cmt | na 16 16 |        |             | ; 1 "ONE" ( -- 1 ) 7 bytes / 12 cycles
1190:000 | DONE cmt | na 16 16 |        |             | ; Pushes the number 1 on the Data Stack
1191:000 | DONE lbl | na 16 16 | 005388 |             | xt_one                               
1192:000 | DONE dir | na 16 16 |        |             |         .!xy16                       
1193:000 | DONE ins | na 16 16 | 005388 | ca          |                 dex                  
1194:000 | DONE ins | na 16 16 | 005389 | ca          |                 dex                  
1195:000 | DONE ins | na 16 16 | 00538a | 94 00       |                 sty.dx 00            
1196:000 | DONE ins | na 16 16 | 00538c | a0 01 00    |                 ldy.# 0001           
1197:000 | DONE wsp | na 16 16 |        |             |
1198:000 | DONE lbl | na 16 16 | 00538f |             | z_one                                
1198:001 | DONE ins | na 16 16 | 00538f | 60          |                 rts                  
1199:000 | DONE wsp | na 16 16 |        |             |
1200:000 | DONE wsp | na 16 16 |        |             |
1201:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1202:000 | DONE cmt | na 16 16 |        |             | ; 1- "ONE-MINUS" ( n -- n-1 ) 1 byte / 2 cycles
1203:000 | DONE cmt | na 16 16 |        |             | ; Subtract 1 from Top of Stack (TOS). Because there is no checking if there is
1204:000 | DONE cmt | na 16 16 |        |             | ; actually anything on the Data Stack, this routine will fail silently if the
1205:000 | DONE cmt | na 16 16 |        |             | ; stack is empty
1206:000 | DONE lbl | na 16 16 | 005390 |             | xt_one-minus                         
1207:000 | DONE dir | na 16 16 |        |             |         .!xy16                       
1208:000 | DONE ins | na 16 16 | 005390 | 88          |                 dey                  
1209:000 | DONE lbl | na 16 16 | 005391 |             | z_one-minus                          
1209:001 | DONE ins | na 16 16 | 005391 | 60          |                 rts                  
1210:000 | DONE wsp | na 16 16 |        |             |
1211:000 | DONE wsp | na 16 16 |        |             |
1212:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1213:000 | DONE cmt | na 16 16 |        |             | ; 1+ "ONE-PLUS" ( n -- n+1 ) 1 byte / 2 cycles
1214:000 | DONE cmt | na 16 16 |        |             | ; Add 1 to TOS. Because there is no checking if there is actually anything on
1215:000 | DONE cmt | na 16 16 |        |             | ; the Data Stack, this routine will fail silently if the stack is empty
1216:000 | DONE lbl | na 16 16 | 005392 |             | xt_one-plus                          
1217:000 | DONE dir | na 16 16 |        |             |         .!xy16                       
1218:000 | DONE ins | na 16 16 | 005392 | c8          |                 iny                  
1219:000 | DONE lbl | na 16 16 | 005393 |             | z_one-plus                           
1219:001 | DONE ins | na 16 16 | 005393 | 60          |                 rts                  
1220:000 | DONE wsp | na 16 16 |        |             |
1221:000 | DONE wsp | na 16 16 |        |             |
1222:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1223:000 | DONE cmt | na 16 16 |        |             | ; 2 "TWO" ( -- 2 ) 7 bytes / 12 cycles
1224:000 | DONE cmt | na 16 16 |        |             | ; Pushes the number 2 on the Data Stack
1225:000 | DONE lbl | na 16 16 | 005394 |             | xt_two                               
1226:000 | DONE dir | na 16 16 |        |             |         .!xy16                       
1227:000 | DONE ins | na 16 16 | 005394 | ca          |                 dex                  
1228:000 | DONE ins | na 16 16 | 005395 | ca          |                 dex                  
1229:000 | DONE ins | na 16 16 | 005396 | 94 00       |                 sty.dx 00            
1230:000 | DONE ins | na 16 16 | 005398 | a0 02 00    |                 ldy.# 0002           
1231:000 | DONE wsp | na 16 16 |        |             |
1232:000 | DONE lbl | na 16 16 | 00539b |             | z_two                                
1232:001 | DONE ins | na 16 16 | 00539b | 60          |                 rts                  
1233:000 | DONE wsp | na 16 16 |        |             |
1234:000 | DONE wsp | na 16 16 |        |             |
1235:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1236:000 | DONE cmt | na 16 16 |        |             | ; 2* "TWO-STAR" ( n -- 2*n ) 3 bytes / 6 cycles
1237:000 | DONE cmt | na 16 16 |        |             | ; Multiply Top of Stack (TOS) by 2. This is also used by CELLS
1238:000 | DONE lbl | na 16 16 | 00539c |             | xt_two-star                          
1239:000 | DONE dir | na 16 16 |        |             |         .!a16                        
1240:000 | DONE dir | na 16 16 |        |             |         .!xy16                       
1241:000 | DONE ins | na 16 16 | 00539c | 98          |                 tya                  
1242:000 | DONE ins | na 16 16 | 00539d | 0a          |                 asl.a                
1243:000 | DONE ins | na 16 16 | 00539e | a8          |                 tay                  
1244:000 | DONE wsp | na 16 16 |        |             |
1245:000 | DONE lbl | na 16 16 | 00539f |             | z_two-star                           
1245:001 | DONE ins | na 16 16 | 00539f | 60          |                 rts                  
1246:000 | DONE wsp | na 16 16 |        |             |
1247:000 | DONE wsp | na 16 16 |        |             |
1248:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1249:000 | DONE cmt | na 16 16 |        |             | ; 2>R "TWOTOR" ( n1 n2 -- )(R: -- n1 n2)  X bytes / X cycles
1250:000 | DONE cmt | na 16 16 |        |             | ; Push top two entries to Return Stack. The same as SWAP >R >R except that if we
1251:000 | DONE cmt | na 16 16 |        |             | ; jumped here, the return address will be in the way. May not be natively
1252:000 | DONE cmt | na 16 16 |        |             | ; compiled
1253:000 | DONE cmt | na 16 16 |        |             | ; TODO not coded
1254:000 | DONE lbl | na 16 16 | 0053a0 |             | xt_twotor                            
1255:000 | DONE cmt | na 16 16 |        |             |                 ; get the return address out of the way
1256:000 | DONE ins | na 16 16 | 0053a0 | 68          |                 pla                  
1257:000 | DONE ins | na 16 16 | 0053a1 | 85 20       |                 sta.d 000020         
1258:000 | DONE cmt | na 16 16 |        |             |                 ; --- CUT HERE for native compile ---
1259:000 | DONE wsp | na 16 16 |        |             |
1260:000 | DONE ins | na 16 16 | 0053a3 | b5 00       |                 lda.dx 00            NOS stays next on Return Stack
1261:000 | DONE ins | na 16 16 | 0053a5 | 48          |                 pha                  
1262:000 | DONE ins | na 16 16 | 0053a6 | 5a          |                 phy                  TOS stays on top
1263:000 | DONE wsp | na 16 16 |        |             |
1264:000 | DONE ins | na 16 16 | 0053a7 | b4 02       |                 ldy.dx 02            clean up data stack
1265:000 | DONE ins | na 16 16 | 0053a9 | e8          |                 inx                  
1266:000 | DONE ins | na 16 16 | 0053aa | e8          |                 inx                  
1267:000 | DONE ins | na 16 16 | 0053ab | e8          |                 inx                  
1268:000 | DONE ins | na 16 16 | 0053ac | e8          |                 inx                  
1269:000 | DONE wsp | na 16 16 |        |             |
1270:000 | DONE cmt | na 16 16 |        |             |                 ; --- CUT HERE for native compile ---
1271:000 | DONE ins | na 16 16 | 0053ad | a5 20       |                 lda.d 000020         
1272:000 | DONE ins | na 16 16 | 0053af | 48          |                 pha                  
1273:000 | DONE wsp | na 16 16 |        |             |
1274:000 | DONE lbl | na 16 16 | 0053b0 |             | z_twotor                             
1274:001 | DONE ins | na 16 16 | 0053b0 | 60          |                 rts                  
1275:000 | DONE wsp | na 16 16 |        |             |
1276:000 | DONE wsp | na 16 16 |        |             |
1277:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1278:000 | DONE cmt | na 16 16 |        |             | ; 2DROP ( n m -- ) 6 bytes / 13 cycles
1279:000 | DONE cmt | na 16 16 |        |             | ; Drop first two entries of Data Stack
1280:000 | DONE lbl | na 16 16 | 0053b1 |             | xt_2drop                             
1281:000 | DONE ins | na 16 16 | 0053b1 | b4 02       |                 ldy.dx 02            
1282:000 | DONE ins | na 16 16 | 0053b3 | e8          |                 inx                  
1283:000 | DONE ins | na 16 16 | 0053b4 | e8          |                 inx                  
1284:000 | DONE ins | na 16 16 | 0053b5 | e8          |                 inx                  
1285:000 | DONE ins | na 16 16 | 0053b6 | e8          |                 inx                  
1286:000 | DONE wsp | na 16 16 |        |             |
1287:000 | DONE lbl | na 16 16 | 0053b7 |             | z_2drop                              
1287:001 | DONE ins | na 16 16 | 0053b7 | 60          |                 rts                  
1288:000 | DONE wsp | na 16 16 |        |             |
1289:000 | DONE wsp | na 16 16 |        |             |
1290:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1291:000 | DONE cmt | na 16 16 |        |             | ; 2DUP ( n m -- n m n m ) 10 bytes / 23 cycles
1292:000 | DONE cmt | na 16 16 |        |             | ; Duplicated the top two data stack entries
1293:000 | DONE wsp | na 16 16 |        |             |
1294:000 | DONE lbl | na 16 16 | 0053b8 |             | xt_2dup                              
1295:000 | DONE dir | na 16 16 |        |             |         .!xy16                       
1296:000 | DONE ins | na 16 16 | 0053b8 | ca          |                 dex                  
1297:000 | DONE ins | na 16 16 | 0053b9 | ca          |                 dex                  
1298:000 | DONE ins | na 16 16 | 0053ba | ca          |                 dex                  
1299:000 | DONE ins | na 16 16 | 0053bb | ca          |                 dex                  
1300:000 | DONE ins | na 16 16 | 0053bc | 94 02       |                 sty.dx 02            
1301:000 | DONE ins | na 16 16 | 0053be | b5 04       |                 lda.dx 04            
1302:000 | DONE ins | na 16 16 | 0053c0 | 95 00       |                 sta.dx 00            
1303:000 | DONE wsp | na 16 16 |        |             |
1304:000 | DONE lbl | na 16 16 | 0053c2 |             | z_2dup                               
1304:001 | DONE ins | na 16 16 | 0053c2 | 60          |                 rts                  
1305:000 | DONE wsp | na 16 16 |        |             |
1306:000 | DONE wsp | na 16 16 |        |             |
1307:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1308:000 | DONE cmt | na 16 16 |        |             | ; 2OVER ( d1 d2 -- d1 d2 d1 ) X bytes / X cycles
1309:000 | DONE cmt | na 16 16 |        |             | ; Copy cell pair that is NOS to TOS
1310:000 | DONE lbl | na 16 16 | 0053c3 |             | xt_2over                             
1311:000 | DONE ins | na 16 16 | 0053c3 | ca          |                 dex                  
1312:000 | DONE ins | na 16 16 | 0053c4 | ca          |                 dex                  
1313:000 | DONE ins | na 16 16 | 0053c5 | ca          |                 dex                  
1314:000 | DONE ins | na 16 16 | 0053c6 | ca          |                 dex                  
1315:000 | DONE ins | na 16 16 | 0053c7 | 94 02       |                 sty.dx 02            
1316:000 | DONE ins | na 16 16 | 0053c9 | b4 06       |                 ldy.dx 06            
1317:000 | DONE ins | na 16 16 | 0053cb | b5 08       |                 lda.dx 08            
1318:000 | DONE ins | na 16 16 | 0053cd | 95 00       |                 sta.dx 00            
1319:000 | DONE wsp | na 16 16 |        |             |
1320:000 | DONE lbl | na 16 16 | 0053cf |             | z_2over                              
1320:001 | DONE ins | na 16 16 | 0053cf | 60          |                 rts                  
1321:000 | DONE wsp | na 16 16 |        |             |
1322:000 | DONE wsp | na 16 16 |        |             |
1323:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1324:000 | DONE cmt | na 16 16 |        |             | ; 2R> "TWOFROMR" ( -- n1 n2 ) ( R: n1 n2 ) X bytes / X cycles
1325:000 | DONE cmt | na 16 16 |        |             | ; Pull top two entries from Return Stack. Is the same as R> R> SWAP
1326:000 | DONE cmt | na 16 16 |        |             | ; As with R>, the problem with the is word is that the top value on the Return
1327:000 | DONE cmt | na 16 16 |        |             | ; Stack for a STC Forth is the return address, which we need to get out of the
1328:000 | DONE cmt | na 16 16 |        |             | ; way first. Uses tmp3
1329:000 | DONE lbl | na 16 16 | 0053d0 |             | xt_twofromr                          
1330:000 | DONE cmt | na 16 16 |        |             |                 ; get the return address out of the way
1331:000 | DONE ins | na 16 16 | 0053d0 | 68          |                 pla                  
1332:000 | DONE ins | na 16 16 | 0053d1 | 85 20       |                 sta.d 000020         
1333:000 | DONE cmt | na 16 16 |        |             |                 ; --- CUT HERE for native compile ---
1334:000 | DONE wsp | na 16 16 |        |             |
1335:000 | DONE ins | na 16 16 | 0053d3 | ca          |                 dex                  make room on Data Stack
1336:000 | DONE ins | na 16 16 | 0053d4 | ca          |                 dex                  
1337:000 | DONE ins | na 16 16 | 0053d5 | ca          |                 dex                  
1338:000 | DONE ins | na 16 16 | 0053d6 | ca          |                 dex                  
1339:000 | DONE ins | na 16 16 | 0053d7 | 94 02       |                 sty.dx 02            
1340:000 | DONE wsp | na 16 16 |        |             |
1341:000 | DONE ins | na 16 16 | 0053d9 | 7a          |                 ply                  top element stays on top
1342:000 | DONE ins | na 16 16 | 0053da | 68          |                 pla                  next element stays below
1343:000 | DONE ins | na 16 16 | 0053db | 95 00       |                 sta.dx 00            
1344:000 | DONE wsp | na 16 16 |        |             |
1345:000 | DONE cmt | na 16 16 |        |             |                 ; --- CUT HERE for native compile ---
1346:000 | DONE cmt | na 16 16 |        |             |                 ; restore return address
1347:000 | DONE ins | na 16 16 | 0053dd | a5 20       |                 lda.d 000020         
1348:000 | DONE ins | na 16 16 | 0053df | 48          |                 pha                  
1349:000 | DONE wsp | na 16 16 |        |             |
1350:000 | DONE lbl | na 16 16 | 0053e0 |             | z_twofromr                           
1350:001 | DONE ins | na 16 16 | 0053e0 | 60          |                 rts                  
1351:000 | DONE wsp | na 16 16 |        |             |
1352:000 | DONE wsp | na 16 16 |        |             |
1353:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1354:000 | DONE cmt | na 16 16 |        |             | ; 2R@ ( -- n1 n2 )(R: n1 n2 -- n1 n2 )  X bytes / X cycles
1355:000 | DONE cmt | na 16 16 |        |             | ; Copy two words off the Return Stack.  This is R> R> 2DUP >R >R SWAP but we
1356:000 | DONE cmt | na 16 16 |        |             | ; can do this a lot faster in assembler This routine may not be natively
1357:000 | DONE cmt | na 16 16 |        |             | ; compiled; because it accessed by a JSR, the first element on the Return Stack
1358:000 | DONE cmt | na 16 16 |        |             | ; (LDA.S 01) is the return address.
1359:000 | DONE lbl | na 16 16 | 0053e1 |             | xt_tworfetch                         
1360:000 | DONE cmt | na 16 16 |        |             |                 ; make room on the Data Stack
1361:000 | DONE ins | na 16 16 | 0053e1 | ca          |                 dex                  
1362:000 | DONE ins | na 16 16 | 0053e2 | ca          |                 dex                  
1363:000 | DONE ins | na 16 16 | 0053e3 | ca          |                 dex                  
1364:000 | DONE ins | na 16 16 | 0053e4 | ca          |                 dex                  
1365:000 | DONE ins | na 16 16 | 0053e5 | 94 02       |                 sty.dx 02            
1366:000 | DONE wsp | na 16 16 |        |             |
1367:000 | DONE ins | na 16 16 | 0053e7 | a3 03       |                 lda.s 03             get top of Return Stack
1368:000 | DONE ins | na 16 16 | 0053e9 | a8          |                 tay                  
1369:000 | DONE ins | na 16 16 | 0053ea | a3 05       |                 lda.s 05             get next on Return Stack
1370:000 | DONE ins | na 16 16 | 0053ec | 95 00       |                 sta.dx 00            
1371:000 | DONE wsp | na 16 16 |        |             |
1372:000 | DONE lbl | na 16 16 | 0053ee |             | z_tworfetch                          
1372:001 | DONE ins | na 16 16 | 0053ee | 60          |                 rts                  
1373:000 | DONE wsp | na 16 16 |        |             |
1374:000 | DONE wsp | na 16 16 |        |             |
1375:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1376:000 | DONE cmt | na 16 16 |        |             | ; 2SWAP ( d1 d2 -- d2 d1 ) X bytes / X cycles
1377:000 | DONE cmt | na 16 16 |        |             | ; Swap two double cell numbers on the Data Stack.
1378:000 | DONE lbl | na 16 16 | 0053ef |             | xt_2swap                             
1379:000 | DONE ins | na 16 16 | 0053ef | 5a          |                 phy                  hi word of TOS
1380:000 | DONE ins | na 16 16 | 0053f0 | b4 02       |                 ldy.dx 02            hi word of NOS
1381:000 | DONE ins | na 16 16 | 0053f2 | 68          |                 pla                  
1382:000 | DONE ins | na 16 16 | 0053f3 | 95 02       |                 sta.dx 02            
1383:000 | DONE wsp | na 16 16 |        |             |
1384:000 | DONE ins | na 16 16 | 0053f5 | b5 00       |                 lda.dx 00            lo word of TOS
1385:000 | DONE ins | na 16 16 | 0053f7 | 48          |                 pha                  
1386:000 | DONE ins | na 16 16 | 0053f8 | b5 04       |                 lda.dx 04            lo word of NOS
1387:000 | DONE ins | na 16 16 | 0053fa | 95 00       |                 sta.dx 00            
1388:000 | DONE ins | na 16 16 | 0053fc | 68          |                 pla                  
1389:000 | DONE ins | na 16 16 | 0053fd | 95 04       |                 sta.dx 04            
1390:000 | DONE wsp | na 16 16 |        |             |
1391:000 | DONE lbl | na 16 16 | 0053ff |             | z_2swap                              
1391:001 | DONE ins | na 16 16 | 0053ff | 60          |                 rts                  
1392:000 | DONE wsp | na 16 16 |        |             |
1393:000 | DONE wsp | na 16 16 |        |             |
1394:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1395:000 | DONE cmt | na 16 16 |        |             | ; 2VARIABLE ( "name" -- ) X bytes / X cycles
1396:000 | DONE cmt | na 16 16 |        |             | ; Create a variable with space for a double celled word. This can be realized in
1397:000 | DONE cmt | na 16 16 |        |             | ; Forth as either CREATE 2 CELLS ALLOT or just CREATE 0 , 0 ,
1398:000 | DONE cmt | na 16 16 |        |             | ; We use the second variant, letting CREATE do the hard work
1399:000 | DONE cmt | na 16 16 |        |             | ; TODO see if it is faster to use Y as an index and increase by four
1400:000 | DONE lbl | na 16 16 | 005400 |             | xt_2variable                         
1401:000 | DONE dir | na 16 16 |        |             |         .!a16                        
1402:000 | DONE ins | na 16 16 | 005400 | 20 7a 56    |                 jsr 00567a           
1403:000 | DONE wsp | na 16 16 |        |             |
1404:000 | DONE ins | na 16 16 | 005403 | a9 00 00    |                 lda.# 0000           
1405:000 | DONE ins | na 16 16 | 005406 | 92 00       |                 sta.di 000000        
1406:000 | DONE ins | na 16 16 | 005408 | e6 00       |                 inc.d 000000         
1407:000 | DONE ins | na 16 16 | 00540a | e6 00       |                 inc.d 000000         
1408:000 | DONE ins | na 16 16 | 00540c | 92 00       |                 sta.di 000000        
1409:000 | DONE ins | na 16 16 | 00540e | e6 00       |                 inc.d 000000         
1410:000 | DONE ins | na 16 16 | 005410 | e6 00       |                 inc.d 000000         
1411:000 | DONE wsp | na 16 16 |        |             |
1412:000 | DONE lbl | na 16 16 | 005412 |             | z_2variable                          
1412:001 | DONE ins | na 16 16 | 005412 | 60          |                 rts                  
1413:000 | DONE wsp | na 16 16 |        |             |
1414:000 | DONE wsp | na 16 16 |        |             |
1415:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1416:000 | DONE cmt | na 16 16 |        |             | ; ' "TICK" ( "string" -- xt ) X bytes / X cycles
1417:000 | DONE cmt | na 16 16 |        |             | ; Given a string with the name of a word, return the word's execution token (xt)
1418:000 | DONE cmt | na 16 16 |        |             | ; Abort if not found
1419:000 | DONE lbl | na 16 16 | 005413 |             | xt_tick                              
1420:000 | DONE ins | na 16 16 | 005413 | 20 43 5b    |                 jsr 005b43           ( -- addr u )
1421:000 | DONE wsp | na 16 16 |        |             |
1422:000 | DONE cmt | na 16 16 |        |             |                 ; if we got a zero, complain and abort
1423:000 | DONE ins | na 16 16 | 005416 | 98          |                 tya                  force flag check
1424:000 | DONE ins | na 16 16 | 005417 | d0 06       |                 bne 00541f           
1425:000 | DONE wsp | na 16 16 |        |             |
1426:000 | DONE ins | na 16 16 | 005419 | a9 54 6f    |                 lda.# 006f54         
1427:000 | DONE ins | na 16 16 | 00541c | 4c 67 68    |                 jmp 006867           
1428:000 | DONE wsp | na 16 16 |        |             |
1429:000 | DONE lbl | na 16 16 | 00541f |             | tick_have_word                       
1430:000 | DONE ins | na 16 16 | 00541f | 20 87 58    |                 jsr 005887           ( addr u -- nt)
1431:000 | DONE ins | na 16 16 | 005422 | 98          |                 tya                  force flag check
1432:000 | DONE wsp | na 16 16 |        |             |
1433:000 | DONE cmt | na 16 16 |        |             |                 ; if we didn't find string in the dictionary, complain and abort
1434:000 | DONE ins | na 16 16 | 005423 | d0 06       |                 bne 00542b           
1435:000 | DONE wsp | na 16 16 |        |             |
1436:000 | DONE ins | na 16 16 | 005425 | a9 f1 6f    |                 lda.# 006ff1         
1437:000 | DONE ins | na 16 16 | 005428 | 4c 67 68    |                 jmp 006867           
1438:000 | DONE wsp | na 16 16 |        |             |
1439:000 | DONE lbl | na 16 16 | 00542b |             | tick_have_nt                         
1440:000 | DONE ins | na 16 16 | 00542b | 20 63 5a    |                 jsr 005a63           ( nt -- xt )
1441:000 | DONE wsp | na 16 16 |        |             |
1442:000 | DONE lbl | na 16 16 | 00542e |             | z_tick                               
1442:001 | DONE ins | na 16 16 | 00542e | 60          |                 rts                  
1443:000 | DONE wsp | na 16 16 |        |             |
1444:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1445:000 | DONE cmt | na 16 16 |        |             | ; ABORT" "ABORTQ" ( "string" -- ) X bytes / X cycles
1446:000 | DONE cmt | na 16 16 |        |             | ; If flag on TOS is not false, print error message and abort. This a compile-only word
1447:000 | DONE lbl | na 16 16 | 00542f |             | xt_abortq                            
1448:000 | DONE dir | na 16 16 |        |             |         .!a16                        
1449:000 | DONE ins | na 16 16 | 00542f | 20 4f 5c    |                 jsr 005c4f           save string
1450:000 | DONE wsp | na 16 16 |        |             |
1451:000 | DONE ins | na 16 16 | 005432 | f4 39 54    |                 phe.# 005439         compile run-time aspect
1452:000 | DONE ins | na 16 16 | 005435 | 20 46 68    |                 jsr 006846           
1453:000 | DONE wsp | na 16 16 |        |             |
1454:000 | DONE ins | na 16 16 | 005438 | 60          |                 rts                  
1455:000 | DONE wsp | na 16 16 |        |             |
1456:000 | DONE lbl | na 16 16 | 005439 |             | abortq_rt                            
1457:000 | DONE cmt | na 16 16 |        |             |                 ; we land here with ( f addr u )
1458:000 | DONE ins | na 16 16 | 005439 | b5 02       |                 lda.dx 02            get flag as 3OS
1459:000 | DONE ins | na 16 16 | 00543b | f0 06       |                 beq 005443           if FALSE, we're done
1460:000 | DONE wsp | na 16 16 |        |             |
1461:000 | DONE cmt | na 16 16 |        |             |                 ; if TRUE, we print string and ABORT
1462:000 | DONE cmt | na 16 16 |        |             |                 ; TODO see if we want to inform user we're aborting
1463:000 | DONE ins | na 16 16 | 00543d | 20 b6 5d    |                 jsr 005db6           
1464:000 | DONE ins | na 16 16 | 005440 | 4c ad 50    |                 jmp 0050ad           not JSR because we never come back
1465:000 | DONE wsp | na 16 16 |        |             |
1466:000 | DONE lbl | na 16 16 | 005443 |             | abortq_done                          
1467:000 | DONE cmt | na 16 16 |        |             |                 ; drop the three entries from the Data Stack
1468:000 | DONE ins | na 16 16 | 005443 | b4 04       |                 ldy.dx 04            fourth on the stack
1469:000 | DONE wsp | na 16 16 |        |             |
1470:000 | DONE cmt | na 16 16 |        |             |                 ; this is the same size, but three cycles faster than six INX
1471:000 | DONE cmt | na 16 16 |        |             |                 ; instructions
1472:000 | DONE ins | na 16 16 | 005445 | 8a          |                 txa                  
1473:000 | DONE ins | na 16 16 | 005446 | 18          |                 clc                  
1474:000 | DONE ins | na 16 16 | 005447 | 69 06 00    |                 adc.# 0006           
1475:000 | DONE ins | na 16 16 | 00544a | aa          |                 tax                  
1476:000 | DONE wsp | na 16 16 |        |             |
1477:000 | DONE lbl | na 16 16 | 00544b |             | z_abortq                             
1477:001 | DONE ins | na 16 16 | 00544b | 60          |                 rts                  
1478:000 | DONE wsp | na 16 16 |        |             |
1479:000 | DONE wsp | na 16 16 |        |             |
1480:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1481:000 | DONE cmt | na 16 16 |        |             | ; ABS ( n -- u ) 8 bytes / X cycles
1482:000 | DONE cmt | na 16 16 |        |             | ; Return the absolute value of a single number
1483:000 | DONE lbl | na 16 16 | 00544c |             | xt_abs                               
1484:000 | DONE dir | na 16 16 |        |             |         .!a16                        
1485:000 | DONE dir | na 16 16 |        |             |         .!xy16                       
1486:000 | DONE ins | na 16 16 | 00544c | 98          |                 tya                  force flag test
1487:000 | DONE ins | na 16 16 | 00544d | 10 05       |                 bpl 005454           positive number is easy
1488:000 | DONE wsp | na 16 16 |        |             |
1489:000 | DONE cmt | na 16 16 |        |             |                 ; negative: Calculate 0-n
1490:000 | DONE ins | na 16 16 | 00544f | 49 ff ff    |                 eor.# 0ffff          
1491:000 | DONE ins | na 16 16 | 005452 | 1a          |                 inc.a                
1492:000 | DONE ins | na 16 16 | 005453 | a8          |                 tay                  
1493:000 | DONE wsp | na 16 16 |        |             |
1494:000 | DONE lbl | na 16 16 | 005454 |             | z_abs                                
1494:001 | DONE ins | na 16 16 | 005454 | 60          |                 rts                  
1495:000 | DONE wsp | na 16 16 |        |             |
1496:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1497:000 | DONE cmt | na 16 16 |        |             | ; ACCEPT ( addr n1 -- n2 ) X bytes / X cycles
1498:000 | DONE cmt | na 16 16 |        |             | ; Receive a string of at most n1 characters, placing them at addr. Return the
1499:000 | DONE cmt | na 16 16 |        |             | ; actual number of characters as n2. Characters are echoed as they are received.
1500:000 | DONE cmt | na 16 16 |        |             | ; ACCEPT is called by REFILL these days.
1501:000 | DONE wsp | na 16 16 |        |             |
1502:000 | DONE cmt | na 16 16 |        |             | ; Though we're dealing with individual characters, all these actions are
1503:000 | DONE cmt | na 16 16 |        |             | ; performed with a 16 bit A register. The only place we switch is in the kernel
1504:000 | DONE cmt | na 16 16 |        |             | ; routines themselves
1505:000 | DONE lbl | na 16 16 | 005455 |             | xt_accept                            
1506:000 | DONE dir | na 16 16 |        |             |         .!a16                        
1507:000 | DONE cmt | na 16 16 |        |             |                 ; Set up loop
1508:000 | DONE ins | na 16 16 | 005455 | 98          |                 tya                  force flag test
1509:000 | DONE ins | na 16 16 | 005456 | d0 03       |                 bne 00545b           
1510:000 | DONE wsp | na 16 16 |        |             |
1511:000 | DONE cmt | na 16 16 |        |             |                 ; if we were told to get zero chars, just quit
1512:000 | DONE ins | na 16 16 | 005458 | e8          |                 inx                  NIP, TOS is zero which is also FALSE
1513:000 | DONE ins | na 16 16 | 005459 | e8          |                 inx                  
1514:000 | DONE wsp | na 16 16 |        |             |
1515:000 | DONE ins | na 16 16 | 00545a | 60          |                 rts                  
1516:000 | DONE wsp | na 16 16 |        |             |
1517:000 | DONE lbl | na 16 16 | 00545b |             | accept_nonzero                       
1518:000 | DONE ins | na 16 16 | 00545b | b5 00       |                 lda.dx 00            address of buffer is NOS
1519:000 | DONE ins | na 16 16 | 00545d | 85 1c       |                 sta.d 00001c         
1520:000 | DONE ins | na 16 16 | 00545f | e8          |                 inx                  NIP
1521:000 | DONE ins | na 16 16 | 005460 | e8          |                 inx                  
1522:000 | DONE wsp | na 16 16 |        |             |
1523:000 | DONE ins | na 16 16 | 005461 | 84 1e       |                 sty.d 00001e         Save max number of chars in tmp2
1524:000 | DONE ins | na 16 16 | 005463 | a0 00 00    |                 ldy.# 0000           Use Y as counter
1525:000 | DONE wsp | na 16 16 |        |             |
1526:000 | DONE lbl | na 16 16 | 005466 |             | accept_loop                          
1527:000 | DONE cmt | na 16 16 |        |             |                 ; We don't need to check for CTRL-l, because a vt100 terminal
1528:000 | DONE cmt | na 16 16 |        |             |                 ; clears the screen automatically
1529:000 | DONE wsp | na 16 16 |        |             |
1530:000 | DONE cmt | na 16 16 |        |             |                 ; This is a rolled-out version of KEY so we don't spend time
1531:000 | DONE cmt | na 16 16 |        |             |                 ; fooling around wit the stack
1532:000 | DONE ins | na 16 16 | 005466 | 8e 22 00    |                 stx 000022           
1533:000 | DONE ins | na 16 16 | 005469 | a2 00 00    |                 ldx.# 0000           
1534:000 | DONE ins | na 16 16 | 00546c | fc 10 00    |                 jsr.xi 000010        JSR (INPUT,X)
1535:000 | DONE ins | na 16 16 | 00546f | a6 22       |                 ldx.d 000022         
1536:000 | DONE wsp | na 16 16 |        |             |
1537:000 | DONE cmt | na 16 16 |        |             |                 ; we quit on both line feed and carriage return
1538:000 | DONE ins | na 16 16 | 005471 | c9 0a 00    |                 cmp.# AscLF          
1539:000 | DONE ins | na 16 16 | 005474 | f0 43       |                 beq 0054b9           
1540:000 | DONE ins | na 16 16 | 005476 | c9 0d 00    |                 cmp.# AscCR          
1541:000 | DONE ins | na 16 16 | 005479 | f0 3e       |                 beq 0054b9           
1542:000 | DONE wsp | na 16 16 |        |             |
1543:000 | DONE cmt | na 16 16 |        |             |                 ; BS and DEL do the same thing for the moment
1544:000 | DONE ins | na 16 16 | 00547b | c9 08 00    |                 cmp.# AscBS          
1545:000 | DONE ins | na 16 16 | 00547e | f0 3f       |                 beq 0054bf           
1546:000 | DONE ins | na 16 16 | 005480 | c9 7f 00    |                 cmp.# AscDEL         
1547:000 | DONE ins | na 16 16 | 005483 | f0 3a       |                 beq 0054bf           
1548:000 | DONE wsp | na 16 16 |        |             |
1549:000 | DONE cmt | na 16 16 |        |             |                 ; CTRL-c and ESC abort (see if this is too harsh)
1550:000 | DONE ins | na 16 16 | 005485 | c9 03 00    |                 cmp.# AscCC          
1551:000 | DONE ins | na 16 16 | 005488 | d0 03       |                 bne 00548d           
1552:000 | DONE ins | na 16 16 | 00548a | 4c ad 50    |                 jmp 0050ad           
1553:000 | DONE lbl | na 16 16 | 00548d |             | @                                    
1554:000 | DONE ins | na 16 16 | 00548d | c9 1b 00    |                 cmp.# AscESC         
1555:000 | DONE ins | na 16 16 | 005490 | d0 03       |                 bne 005495           
1556:000 | DONE ins | na 16 16 | 005492 | 4c ad 50    |                 jmp 0050ad           
1557:000 | DONE lbl | na 16 16 | 005495 |             | @                                    
1558:000 | DONE cmt | na 16 16 |        |             |                 ; CTRL-p will be used for "previous cmd", TODO
1559:000 | DONE ins | na 16 16 | 005495 | c9 10 00    |                 cmp.# AscCP          
1560:000 | DONE ins | na 16 16 | 005498 | d0 08       |                 bne 0054a2           
1561:000 | DONE wsp | na 16 16 |        |             |
1562:000 | DONE ins | na 16 16 | 00549a | a9 09 70    |                 lda.# 007009         
1563:000 | DONE ins | na 16 16 | 00549d | 20 6d 68    |                 jsr 00686d           
1564:000 | DONE wsp | na 16 16 |        |             |
1565:000 | DONE ins | na 16 16 | 0054a0 | 80 c4       |                 bra 005466           
1566:000 | DONE lbl | na 16 16 | 0054a2 |             | @                                    
1567:000 | DONE cmt | na 16 16 |        |             |                 ; CTRL-n will be used for "next cmd", TODO
1568:000 | DONE ins | na 16 16 | 0054a2 | c9 0e 00    |                 cmp.# AscCN          
1569:000 | DONE ins | na 16 16 | 0054a5 | d0 08       |                 bne 0054af           
1570:000 | DONE wsp | na 16 16 |        |             |
1571:000 | DONE ins | na 16 16 | 0054a7 | a9 1c 70    |                 lda.# 00701c         
1572:000 | DONE ins | na 16 16 | 0054aa | 20 6d 68    |                 jsr 00686d           
1573:000 | DONE wsp | na 16 16 |        |             |
1574:000 | DONE ins | na 16 16 | 0054ad | 80 b7       |                 bra 005466           
1575:000 | DONE wsp | na 16 16 |        |             |
1576:000 | DONE lbl | na 16 16 | 0054af |             | @                                    
1577:000 | DONE cmt | na 16 16 |        |             |                 ; That's quite enough, echo character. EMIT_A sidesteps all the
1578:000 | DONE cmt | na 16 16 |        |             |                 ; fooling around with the Data Stack
1579:000 | DONE ins | na 16 16 | 0054af | 20 f5 57    |                 jsr 0057f5           
1580:000 | DONE wsp | na 16 16 |        |             |
1581:000 | DONE ins | na 16 16 | 0054b2 | 91 08       |                 sta.diy 000008       STA (CIB),Y
1582:000 | DONE wsp | na 16 16 |        |             |
1583:000 | DONE ins | na 16 16 | 0054b4 | c8          |                 iny                  
1584:000 | DONE ins | na 16 16 | 0054b5 | c4 1e       |                 cpy.d 00001e         reached character limit?
1585:000 | DONE ins | na 16 16 | 0054b7 | d0 ad       |                 bne 005466           fall thru if buffer limit reached
1586:000 | DONE wsp | na 16 16 |        |             |
1587:000 | DONE lbl | na 16 16 | 0054b9 |             | accept_eol                           
1588:000 | DONE ins | na 16 16 | 0054b9 | 84 0a       |                 sty.d 00000a         Y contains number of chars accepted already
1589:000 | DONE wsp | na 16 16 |        |             |
1590:000 | DONE ins | na 16 16 | 0054bb | 20 72 5d    |                 jsr 005d72           print final space
1591:000 | DONE ins | na 16 16 | 0054be | 60          |                 rts                  this is the actual return of the routine
1592:000 | DONE wsp | na 16 16 |        |             |
1593:000 | DONE lbl | na 16 16 | 0054bf |             | accept_bs                            
1594:000 | DONE ins | na 16 16 | 0054bf | c0 00 00    |                 cpy.# 0000           buffer empty?
1595:000 | DONE ins | na 16 16 | 0054c2 | d0 07       |                 bne 0054cb           
1596:000 | DONE wsp | na 16 16 |        |             |
1597:000 | DONE ins | na 16 16 | 0054c4 | a9 07 00    |                 lda.# AscBELL        complain and don't delete beyond the start of line
1598:000 | DONE ins | na 16 16 | 0054c7 | 20 f5 57    |                 jsr 0057f5           
1599:000 | DONE ins | na 16 16 | 0054ca | c8          |                 iny                  
1600:000 | DONE lbl | na 16 16 | 0054cb |             | @                                    
1601:000 | DONE ins | na 16 16 | 0054cb | 88          |                 dey                  
1602:000 | DONE ins | na 16 16 | 0054cc | a9 08 00    |                 lda.# AscBS          move back one
1603:000 | DONE ins | na 16 16 | 0054cf | 20 f5 57    |                 jsr 0057f5           
1604:000 | DONE ins | na 16 16 | 0054d2 | a9 20 00    |                 lda.# AscSP          print a space (rubout)
1605:000 | DONE ins | na 16 16 | 0054d5 | 20 f5 57    |                 jsr 0057f5           
1606:000 | DONE ins | na 16 16 | 0054d8 | a9 08 00    |                 lda.# AscBS          move back over space
1607:000 | DONE ins | na 16 16 | 0054db | 20 f5 57    |                 jsr 0057f5           
1608:000 | DONE wsp | na 16 16 |        |             |
1609:000 | DONE ins | na 16 16 | 0054de | 80 86       |                 bra 005466           
1610:000 | DONE wsp | na 16 16 |        |             |
1611:000 | DONE lbl | na 16 16 | 0054e0 |             | z_accept                             
1611:001 | DONE ins | na 16 16 | 0054e0 | 60          |                 rts                  
1612:000 | DONE wsp | na 16 16 |        |             |
1613:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1614:000 | DONE cmt | na 16 16 |        |             | ; AGAIN ( addr -- ) 22 bytes / 50 cycles
1615:000 | DONE cmt | na 16 16 |        |             | ; Code a backwards branch to an address usually left by BEGIN. We use JMP
1616:000 | DONE cmt | na 16 16 |        |             | ; instead of BRA to make sure we have the range.
1617:000 | DONE cmt | na 16 16 |        |             | ; TODO see if we should insert a KEY? to make sure we can abort and/or a PAUSE
1618:000 | DONE lbl | na 16 16 | 0054e1 |             | xt_again                             
1619:000 | DONE wsp | na 16 16 |        |             |
1620:000 | DONE cmt | na 16 16 |        |             |                 ; Add the opcode for a JMP
1621:000 | DONE ins | na 16 16 | 0054e1 | e2 20       |                 sep 20               
1621:001 | DONE ctl | na  8 16 |        |             |         .!a8
1622:000 | DONE ins | na  8 16 | 0054e3 | a9 4c       |                 lda.# 4c             
1623:000 | DONE ins | na  8 16 | 0054e5 | 92 00       |                 sta.di 000000        STA (CP)
1624:000 | DONE ins | na  8 16 | 0054e7 | c2 20       |                 rep 20               
1624:001 | DONE ctl | na 16 16 |        |             |         .!a16
1625:000 | DONE ins | na 16 16 | 0054e9 | e6 00       |                 inc.d 000000         
1626:000 | DONE wsp | na 16 16 |        |             |
1627:000 | DONE cmt | na 16 16 |        |             |                 ; Add the address which should be TOS
1628:000 | DONE ins | na 16 16 | 0054eb | 98          |                 tya                  
1629:000 | DONE ins | na 16 16 | 0054ec | 92 00       |                 sta.di 000000        
1630:000 | DONE ins | na 16 16 | 0054ee | e6 00       |                 inc.d 000000         
1631:000 | DONE ins | na 16 16 | 0054f0 | e6 00       |                 inc.d 000000         
1632:000 | DONE wsp | na 16 16 |        |             |
1633:000 | DONE cmt | na 16 16 |        |             |                 ; drop the address
1634:000 | DONE ins | na 16 16 | 0054f2 | b4 00       |                 ldy.dx 00            
1635:000 | DONE ins | na 16 16 | 0054f4 | e8          |                 inx                  
1636:000 | DONE ins | na 16 16 | 0054f5 | e8          |                 inx                  
1637:000 | DONE wsp | na 16 16 |        |             |
1638:000 | DONE lbl | na 16 16 | 0054f6 |             | z_again                              
1638:001 | DONE ins | na 16 16 | 0054f6 | 60          |                 rts                  
1639:000 | DONE wsp | na 16 16 |        |             |
1640:000 | DONE wsp | na 16 16 |        |             |
1641:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1642:000 | DONE cmt | na 16 16 |        |             | ; ALIGN ( -- ) 1 bytes / X cycles
1643:000 | DONE cmt | na 16 16 |        |             | ; Make sure CP is aligned. This does nothing on the 65816
1644:000 | DONE lbl | na 16 16 | 0054f7 |             | xt_align                             
1645:000 | DONE ins | na 16 16 | 0054f7 | ea          |                 nop                  removed during native compile
1646:000 | DONE lbl | na 16 16 | 0054f8 |             | z_align                              
1646:001 | DONE ins | na 16 16 | 0054f8 | 60          |                 rts                  
1647:000 | DONE wsp | na 16 16 |        |             |
1648:000 | DONE wsp | na 16 16 |        |             |
1649:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1650:000 | DONE cmt | na 16 16 |        |             | ; ALIGNED ( addr -- a-addr ) X bytes / X cycles
1651:000 | DONE cmt | na 16 16 |        |             | ; Return the next aligned address. With the 65816, this does nothing
1652:000 | DONE lbl | na 16 16 | 0054f9 |             | xt_aligned                           
1653:000 | DONE ins | na 16 16 | 0054f9 | ea          |                 nop                  removed during native compile
1654:000 | DONE lbl | na 16 16 | 0054fa |             | z_aligned                            
1654:001 | DONE ins | na 16 16 | 0054fa | 60          |                 rts                  
1655:000 | DONE wsp | na 16 16 |        |             |
1656:000 | DONE wsp | na 16 16 |        |             |
1657:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1658:000 | DONE cmt | na 16 16 |        |             | ; ALLOT ( n -- ) X bytes / X cycles
1659:000 | DONE cmt | na 16 16 |        |             | ; Reserve a certain number of bytes (not cells) or release them. If n = 0, do
1660:000 | DONE cmt | na 16 16 |        |             | ; nothing. If n is negative, release n bytes, but only to the beginning of the
1661:000 | DONE cmt | na 16 16 |        |             | ; Dictionary. If n is positive (the most common case), reserve n bytes, but not
1662:000 | DONE cmt | na 16 16 |        |             | ; past the Dictionary.
1663:000 | DONE cmt | na 16 16 |        |             | ; See http://forth-standard.org/standard/core/ALLOT
1664:000 | DONE cmt | na 16 16 |        |             | ; TODO test negative values
1665:000 | DONE lbl | na 16 16 | 0054fb |             | xt_allot                             
1666:000 | DONE dir | na 16 16 |        |             |         .!a16                        
1667:000 | DONE ins | na 16 16 | 0054fb | 98          |                 tya                  force flag check
1668:000 | DONE ins | na 16 16 | 0054fc | f0 21       |                 beq 00551f           zero bytes, don't do anything
1669:000 | DONE ins | na 16 16 | 0054fe | 30 12       |                 bmi 005512           free memory instead of reserving it
1670:000 | DONE wsp | na 16 16 |        |             |
1671:000 | DONE cmt | na 16 16 |        |             |                 ; most common case: reserve n bytes. We've already transfered
1672:000 | DONE cmt | na 16 16 |        |             |                 ; TOS to A, so we just have to add the current compile pointer
1673:000 | DONE ins | na 16 16 | 005500 | 18          |                 clc                  
1674:000 | DONE ins | na 16 16 | 005501 | 65 00       |                 adc.d 000000         create new CP
1675:000 | DONE ins | na 16 16 | 005503 | b0 07       |                 bcs 00550c           oops, we've wrapped
1676:000 | DONE wsp | na 16 16 |        |             |
1677:000 | DONE ins | na 16 16 | 005505 | a8          |                 tay                  save copy of new CP
1678:000 | DONE wsp | na 16 16 |        |             |
1679:000 | DONE ins | na 16 16 | 005506 | 38          |                 sec                  
1680:000 | DONE ins | na 16 16 | 005507 | e9 ff 4f    |                 sbc.# 004fff         
1681:000 | DONE ins | na 16 16 | 00550a | 30 11       |                 bmi 00551d           oops, fall thru if beyond max RAM
1682:000 | DONE wsp | na 16 16 |        |             |
1683:000 | DONE lbl | na 16 16 | 00550c |             | allot_error                          
1684:000 | DONE ins | na 16 16 | 00550c | a9 cf 6e    |                 lda.# 006ecf         
1685:000 | DONE ins | na 16 16 | 00550f | 4c 67 68    |                 jmp 006867           
1686:000 | DONE wsp | na 16 16 |        |             |
1687:000 | DONE lbl | na 16 16 | 005512 |             | allot_minus                          
1688:000 | DONE cmt | na 16 16 |        |             |                 ; negative value means we're freeing memory
1689:000 | DONE ins | na 16 16 | 005512 | 38          |                 sec                  
1690:000 | DONE ins | na 16 16 | 005513 | e5 00       |                 sbc.d 000000         
1691:000 | DONE ins | na 16 16 | 005515 | 90 f5       |                 bcc 00550c           oops, we've wrapped
1692:000 | DONE wsp | na 16 16 |        |             |
1693:000 | DONE ins | na 16 16 | 005517 | a8          |                 tay                  
1694:000 | DONE wsp | na 16 16 |        |             |
1695:000 | DONE ins | na 16 16 | 005518 | e9 00 03    |                 sbc.# 000300         Carry Flag must still be set
1696:000 | DONE ins | na 16 16 | 00551b | 30 ef       |                 bmi 00550c           oops, gone too far back
1697:000 | DONE wsp | na 16 16 |        |             |
1698:000 | DONE cmt | na 16 16 |        |             |                 ; fall through to allot_done
1699:000 | DONE lbl | na 16 16 | 00551d |             | allot_done                           
1700:000 | DONE ins | na 16 16 | 00551d | 84 00       |                 sty.d 000000         new compiler pointer
1701:000 | DONE lbl | na 16 16 | 00551f |             | allot_real_gone                      
1702:000 | DONE ins | na 16 16 | 00551f | b4 00       |                 ldy.dx 00            DROP
1703:000 | DONE ins | na 16 16 | 005521 | e8          |                 inx                  
1704:000 | DONE ins | na 16 16 | 005522 | e8          |                 inx                  
1705:000 | DONE wsp | na 16 16 |        |             |
1706:000 | DONE lbl | na 16 16 | 005523 |             | z_allot                              
1706:001 | DONE ins | na 16 16 | 005523 | 60          |                 rts                  
1707:000 | DONE wsp | na 16 16 |        |             |
1708:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1709:000 | DONE cmt | na 16 16 |        |             | ; AND ( n m -- n ) 6 bytes / X cycles
1710:000 | DONE cmt | na 16 16 |        |             | ; Logical AND
1711:000 | DONE lbl | na 16 16 | 005524 |             | xt_and                               
1712:000 | DONE ins | na 16 16 | 005524 | 98          |                 tya                  
1713:000 | DONE ins | na 16 16 | 005525 | 35 00       |                 and.dx 00            
1714:000 | DONE ins | na 16 16 | 005527 | a8          |                 tay                  
1715:000 | DONE wsp | na 16 16 |        |             |
1716:000 | DONE ins | na 16 16 | 005528 | e8          |                 inx                  NIP
1717:000 | DONE ins | na 16 16 | 005529 | e8          |                 inx                  
1718:000 | DONE wsp | na 16 16 |        |             |
1719:000 | DONE lbl | na 16 16 | 00552a |             | z_and                                
1719:001 | DONE ins | na 16 16 | 00552a | 60          |                 rts                  
1720:000 | DONE wsp | na 16 16 |        |             |
1721:000 | DONE wsp | na 16 16 |        |             |
1722:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1723:000 | DONE cmt | na 16 16 |        |             | ; AT-XY ( nx ny -- ) X bytes / X cycles
1724:000 | DONE cmt | na 16 16 |        |             | ; Move cursor to coordinates given. ESC[<n>;<m>H Do not use U. to print the
1725:000 | DONE cmt | na 16 16 |        |             | ; numbers because the trailing space will not work with xterm (works fine with
1726:000 | DONE cmt | na 16 16 |        |             | ; Mac OS X Terminals, though)
1727:000 | DONE cmt | na 16 16 |        |             | ; TODO doesn't like hex values, need to get rid of byte_to_ascii
1728:000 | DONE cmt | na 16 16 |        |             | ; or call as word with 0 u.r and decimal
1729:000 | DONE lbl | na 16 16 | 00552b |             | xt_at-xy                             
1730:000 | DONE dir | na 16 16 |        |             |         .!a16                        
1731:000 | DONE ins | na 16 16 | 00552b | a9 1b 00    |                 lda.# AscESC         ESC
1732:000 | DONE ins | na 16 16 | 00552e | 20 f5 57    |                 jsr 0057f5           
1733:000 | DONE ins | na 16 16 | 005531 | a9 5b 00    |                 lda.# 5b             [
1734:000 | DONE ins | na 16 16 | 005534 | 20 f5 57    |                 jsr 0057f5           
1735:000 | DONE ins | na 16 16 | 005537 | b5 00       |                 lda.dx 00            x
1736:000 | DONE ins | na 16 16 | 005539 | 20 9e 68    |                 jsr 00689e           
1737:000 | DONE ins | na 16 16 | 00553c | a9 3b 00    |                 lda.# 3b             semicolon
1738:000 | DONE ins | na 16 16 | 00553f | 20 f5 57    |                 jsr 0057f5           
1739:000 | DONE ins | na 16 16 | 005542 | 98          |                 tya                  y
1740:000 | DONE ins | na 16 16 | 005543 | 20 9e 68    |                 jsr 00689e           
1741:000 | DONE ins | na 16 16 | 005546 | a9 48 00    |                 lda.# 48             H
1742:000 | DONE ins | na 16 16 | 005549 | 20 f5 57    |                 jsr 0057f5           
1743:000 | DONE wsp | na 16 16 |        |             |
1744:000 | DONE ins | na 16 16 | 00554c | b4 02       |                 ldy.dx 02            
1745:000 | DONE ins | na 16 16 | 00554e | e8          |                 inx                  
1746:000 | DONE ins | na 16 16 | 00554f | e8          |                 inx                  
1747:000 | DONE ins | na 16 16 | 005550 | e8          |                 inx                  
1748:000 | DONE ins | na 16 16 | 005551 | e8          |                 inx                  
1749:000 | DONE wsp | na 16 16 |        |             |
1750:000 | DONE lbl | na 16 16 | 005552 |             | z_at-xy                              
1750:001 | DONE ins | na 16 16 | 005552 | 60          |                 rts                  
1751:000 | DONE wsp | na 16 16 |        |             |
1752:000 | DONE wsp | na 16 16 |        |             |
1753:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1754:000 | DONE cmt | na 16 16 |        |             | ; BASE ( -- addr ) X bytes / X cycles
1755:000 | DONE cmt | na 16 16 |        |             | ; Get the address of where the radix for number conversion is stored
1756:000 | DONE lbl | na 16 16 | 005553 |             | xt_base                              
1757:000 | DONE ins | na 16 16 | 005553 | ca          |                 dex                  
1758:000 | DONE ins | na 16 16 | 005554 | ca          |                 dex                  
1759:000 | DONE ins | na 16 16 | 005555 | 94 00       |                 sty.dx 00            
1760:000 | DONE wsp | na 16 16 |        |             |
1761:000 | DONE ins | na 16 16 | 005557 | a0 16 00    |                 ldy.# 000016         
1762:000 | DONE wsp | na 16 16 |        |             |
1763:000 | DONE lbl | na 16 16 | 00555a |             | z_base                               
1763:001 | DONE ins | na 16 16 | 00555a | 60          |                 rts                  
1764:000 | DONE wsp | na 16 16 |        |             |
1765:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1766:000 | DONE cmt | na 16 16 |        |             | ; BELL ( -- ) X bytes / X cycles
1767:000 | DONE cmt | na 16 16 |        |             | ; Trigger terminal bell on vt100 terminals
1768:000 | DONE cmt | na 16 16 |        |             | ; TODO replace with EMIT
1769:000 | DONE lbl | na 16 16 | 00555b |             | xt_bell                              
1770:000 | DONE dir | na 16 16 |        |             |         .!a16                        
1771:000 | DONE ins | na 16 16 | 00555b | a9 07 00    |                 lda.# AscBELL        
1772:000 | DONE ins | na 16 16 | 00555e | 6c 0e 00    |                 jmp.i 00000e         JSR/RTS
1773:000 | DONE wsp | na 16 16 |        |             |
1774:000 | DONE lbl | na 16 16 | 005561 |             | z_bell                               ; never reached
1775:000 | DONE wsp | na 16 16 |        |             |
1776:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1777:000 | DONE cmt | na 16 16 |        |             | ; BEGIN ( -- addr ) 6 bytes / 13 cycles
1778:000 | DONE cmt | na 16 16 |        |             | ; Mark entry point for a loop. This is just an immediate version of here which
1779:000 | DONE cmt | na 16 16 |        |             | ; could just as welle be coded as  : BEGIN HERE ; IMMEDIATE  but we code it here
1780:000 | DONE cmt | na 16 16 |        |             | ; differently for speed
1781:000 | DONE lbl | na 16 16 | 005561 |             | xt_begin                             
1782:000 | DONE cmt | na 16 16 |        |             |                 ; really just the same code as HERE
1783:000 | DONE ins | na 16 16 | 005561 | ca          |                 dex                  
1784:000 | DONE ins | na 16 16 | 005562 | ca          |                 dex                  
1785:000 | DONE ins | na 16 16 | 005563 | 94 00       |                 sty.dx 00            
1786:000 | DONE wsp | na 16 16 |        |             |
1787:000 | DONE ins | na 16 16 | 005565 | a4 00       |                 ldy.d 000000         
1788:000 | DONE wsp | na 16 16 |        |             |
1789:000 | DONE lbl | na 16 16 | 005567 |             | z_begin                              
1789:001 | DONE ins | na 16 16 | 005567 | 60          |                 rts                  
1790:000 | DONE wsp | na 16 16 |        |             |
1791:000 | DONE wsp | na 16 16 |        |             |
1792:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1793:000 | DONE cmt | na 16 16 |        |             | ; BL ( -- u ) 7 bytes / 12 cycles
1794:000 | DONE cmt | na 16 16 |        |             | ; Put ASCII char for SPACE on Data Stack
1795:000 | DONE lbl | na 16 16 | 005568 |             | xt_bl                                
1796:000 | DONE dir | na 16 16 |        |             |         .!xy16                       
1797:000 | DONE ins | na 16 16 | 005568 | ca          |                 dex                  
1798:000 | DONE ins | na 16 16 | 005569 | ca          |                 dex                  
1799:000 | DONE ins | na 16 16 | 00556a | 94 00       |                 sty.dx 00            
1800:000 | DONE ins | na 16 16 | 00556c | a0 20 00    |                 ldy.# AscSP          
1801:000 | DONE wsp | na 16 16 |        |             |
1802:000 | DONE lbl | na 16 16 | 00556f |             | z_bl                                 
1802:001 | DONE ins | na 16 16 | 00556f | 60          |                 rts                  
1803:000 | DONE wsp | na 16 16 |        |             |
1804:000 | DONE wsp | na 16 16 |        |             |
1805:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1806:000 | DONE cmt | na 16 16 |        |             | ; BOUNDS ( addr u -- addr+u addr ) 9 bytes / X cycles
1807:000 | DONE cmt | na 16 16 |        |             | ; Given a string, return the correct Data Stack parameters for a DO/LOOP loop
1808:000 | DONE cmt | na 16 16 |        |             | ; over its characters. This is realized as OVER + SWAP in Forth, but we do it
1809:000 | DONE cmt | na 16 16 |        |             | ; a lot faster in assembler. Uses tmptos
1810:000 | DONE lbl | na 16 16 | 005570 |             | xt_bounds                            
1811:000 | DONE dir | na 16 16 |        |             |         .!a16                        
1812:000 | DONE ins | na 16 16 | 005570 | 84 24       |                 sty.d 000024         
1813:000 | DONE ins | na 16 16 | 005572 | b4 00       |                 ldy.dx 00            addr now TOS
1814:000 | DONE wsp | na 16 16 |        |             |
1815:000 | DONE ins | na 16 16 | 005574 | 18          |                 clc                  
1816:000 | DONE ins | na 16 16 | 005575 | 65 24       |                 adc.d 000024         
1817:000 | DONE ins | na 16 16 | 005577 | 95 00       |                 sta.dx 00            addr+u now NOS
1818:000 | DONE wsp | na 16 16 |        |             |
1819:000 | DONE lbl | na 16 16 | 005579 |             | z_bounds                             
1819:001 | DONE ins | na 16 16 | 005579 | 60          |                 rts                  
1820:000 | DONE wsp | na 16 16 |        |             |
1821:000 | DONE wsp | na 16 16 |        |             |
1822:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1823:000 | DONE cmt | na 16 16 |        |             | ; BRANCH ( -- ) X bytes / X cycles
1824:000 | DONE cmt | na 16 16 |        |             | ; Transfer control to given address. This word was adapted from Tali Forth. It
1825:000 | DONE cmt | na 16 16 |        |             | ; uses tmpbranch
1826:000 | DONE lbl | na 16 16 | 00557a |             | xt_branch                            
1827:000 | DONE dir | na 16 16 |        |             |         .!a16                        
1828:000 | DONE cmt | na 16 16 |        |             |                 ; encode subroutine branch to runtime portion
1829:000 | DONE ins | na 16 16 | 00557a | f4 81 55    |                 phe.# 005581         
1830:000 | DONE ins | na 16 16 | 00557d | 20 46 68    |                 jsr 006846           
1831:000 | DONE wsp | na 16 16 |        |             |
1832:000 | DONE lbl | na 16 16 | 005580 |             | z_branch                             
1832:001 | DONE ins | na 16 16 | 005580 | 60          |                 rts                  
1833:000 | DONE wsp | na 16 16 |        |             |
1834:000 | DONE lbl | na 16 16 | 005581 |             | branch_rt                            
1835:000 | DONE cmt | na 16 16 |        |             |                 ; The value on the Return Stack determines where we go to
1836:000 | DONE ins | na 16 16 | 005581 | 68          |                 pla                  
1837:000 | DONE ins | na 16 16 | 005582 | 85 1a       |                 sta.d 00001a         
1838:000 | DONE wsp | na 16 16 |        |             |
1839:000 | DONE ins | na 16 16 | 005584 | 5a          |                 phy                  avoid using temp variables
1840:000 | DONE ins | na 16 16 | 005585 | a0 01 00    |                 ldy.# 0001           
1841:000 | DONE ins | na 16 16 | 005588 | b1 1a       |                 lda.diy 00001a       LDA (TMPBRANCH),Y
1842:000 | DONE ins | na 16 16 | 00558a | 7a          |                 ply                  
1843:000 | DONE wsp | na 16 16 |        |             |
1844:000 | DONE ins | na 16 16 | 00558b | 3a          |                 dec.a                
1845:000 | DONE ins | na 16 16 | 00558c | 48          |                 pha                  put target address back on Return Stack
1846:000 | DONE wsp | na 16 16 |        |             |
1847:000 | DONE ins | na 16 16 | 00558d | 60          |                 rts                  
1848:000 | DONE wsp | na 16 16 |        |             |
1849:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1850:000 | DONE cmt | na 16 16 |        |             | ; BYE ( -- ) 2 bytes / 7-8 cycles
1851:000 | DONE cmt | na 16 16 |        |             | ; Leave Liara Forth, returning to Mensch Monitor
1852:000 | DONE lbl | na 16 16 | 00558e |             | xt_bye                               
1853:000 | DONE ins | na 16 16 | 00558e | 78          |                 sei                  
1854:000 | DONE ins | na 16 16 | 00558f | d8          |                 cld                  
1855:000 | DONE ins | na 16 16 | 005590 | 38          |                 sec                  
1855:001 | DONE ins | na 16 16 | 005591 | fb          |                 xce                  
1855:002 | DONE ctl | em  8  8 |        |             |         .!emulated
1855:003 | DONE ctl | em  8  8 |        |             |         .!a8
1855:004 | DONE ctl | em  8  8 |        |             |         .!xy8
1856:000 | DONE ins | em  8  8 | 005592 | 6c fc ff    |                 jmp.i 0fffc          
1857:000 | DONE wsp | em  8  8 |        |             |
1858:000 | DONE lbl | em  8  8 | 005595 |             | z_bye                                ; never reached
1859:000 | DONE wsp | em  8  8 |        |             |
1860:000 | DONE wsp | em  8  8 |        |             |
1861:000 | DONE cmt | em  8  8 |        |             | ; -------------------------------------------------------------------
1862:000 | DONE cmt | em  8  8 |        |             | ; C, "C-COMMA" ( char -- ) 13 bytes / 28 cycles
1863:000 | DONE cmt | em  8  8 |        |             | ; Store one character in the Dictionary
1864:000 | DONE lbl | em  8  8 | 005595 |             | xt_c-comma                           
1865:000 | DONE ins | em  8  8 | 005595 | 98          |                 tya                  
1866:000 | DONE ins | em  8  8 | 005596 | e2 20       |                 sep 20               
1866:001 | DONE ctl | em  8  8 |        |             |         .!a8
1867:000 | DONE ins | em  8  8 | 005598 | 92 00       |                 sta.di 000000        STA (CP)
1868:000 | DONE ins | em  8  8 | 00559a | c2 20       |                 rep 20               
1868:001 | DONE ctl | em 16  8 |        |             |         .!a16
1869:000 | DONE ins | em 16  8 | 00559c | e6 00       |                 inc.d 000000         quick version of 1 ALLOT
1870:000 | DONE wsp | em 16  8 |        |             |
1871:000 | DONE ins | em 16  8 | 00559e | b4 00       |                 ldy.dx 00            
1872:000 | DONE ins | em 16  8 | 0055a0 | e8          |                 inx                  
1873:000 | DONE ins | em 16  8 | 0055a1 | e8          |                 inx                  
1874:000 | DONE wsp | em 16  8 |        |             |
1875:000 | DONE lbl | em 16  8 | 0055a2 |             | z_c-comma                            
1875:001 | DONE ins | em 16  8 | 0055a2 | 60          |                 rts                  
1876:000 | DONE wsp | em 16  8 |        |             |
1877:000 | DONE wsp | em 16  8 |        |             |
1878:000 | DONE cmt | em 16  8 |        |             | ; -------------------------------------------------------------------
1879:000 | DONE cmt | em 16  8 |        |             | ; C@ "C-FETCH" ( addr -- n ) 11 bytes / 16 cycles
1880:000 | DONE cmt | em 16  8 |        |             | ; Get a single byte from the given address
1881:000 | DONE lbl | em 16  8 | 0055a3 |             | xt_c-fetch                           
1882:000 | DONE ins | em 16  8 | 0055a3 | e2 20       |                 sep 20               
1882:001 | DONE ctl | em  8  8 |        |             |         .!a8
1883:000 | DONE ins | em  8  8 | 0055a5 | b9 00 00    |                 lda.y 0000           
1884:000 | DONE ins | em  8  8 | 0055a8 | c2 20       |                 rep 20               
1884:001 | DONE ctl | em 16  8 |        |             |         .!a16
1885:000 | DONE ins | em 16  8 | 0055aa | 29 ff 00    |                 and.# 00ff           
1886:000 | DONE ins | em 16  8 | 0055ad | a8          |                 tay                  
1887:000 | DONE wsp | em 16  8 |        |             |
1888:000 | DONE lbl | em 16  8 | 0055ae |             | z_c-fetch                            
1888:001 | DONE ins | em 16  8 | 0055ae | 60          |                 rts                  
1889:000 | DONE wsp | em 16  8 |        |             |
1890:000 | DONE wsp | em 16  8 |        |             |
1891:000 | DONE cmt | em 16  8 |        |             | ; -------------------------------------------------------------------
1892:000 | DONE cmt | em 16  8 |        |             | ; C! "C-STORE" ( n addr -- ) 15 bytes / 29 cycles
1893:000 | DONE cmt | em 16  8 |        |             | ; Store LSB of NOS at location given as TOS
1894:000 | DONE lbl | em 16  8 | 0055af |             | xt_c-store                           
1895:000 | DONE ins | em 16  8 | 0055af | b5 00       |                 lda.dx 00            
1896:000 | DONE ins | em 16  8 | 0055b1 | e2 20       |                 sep 20               
1896:001 | DONE ctl | em  8  8 |        |             |         .!a8
1897:000 | DONE ins | em  8  8 | 0055b3 | 99 00 00    |                 sta.y 0000           
1898:000 | DONE ins | em  8  8 | 0055b6 | c2 20       |                 rep 20               
1898:001 | DONE ctl | em 16  8 |        |             |         .!a16
1899:000 | DONE ins | em 16  8 | 0055b8 | b4 02       |                 ldy.dx 02            
1900:000 | DONE ins | em 16  8 | 0055ba | e8          |                 inx                  
1901:000 | DONE ins | em 16  8 | 0055bb | e8          |                 inx                  
1902:000 | DONE ins | em 16  8 | 0055bc | e8          |                 inx                  
1903:000 | DONE ins | em 16  8 | 0055bd | e8          |                 inx                  
1904:000 | DONE wsp | em 16  8 |        |             |
1905:000 | DONE lbl | em 16  8 | 0055be |             | z_c-store                            
1905:001 | DONE ins | em 16  8 | 0055be | 60          |                 rts                  
1906:000 | DONE wsp | em 16  8 |        |             |
1907:000 | DONE wsp | em 16  8 |        |             |
1908:000 | DONE cmt | em 16  8 |        |             | ; -------------------------------------------------------------------
1909:000 | DONE cmt | em 16  8 |        |             | ; CELL+ ( u -- u+2 ) X bytes / X cycles
1910:000 | DONE cmt | em 16  8 |        |             | ; Add the size of one cell to the value on top of the stack. Since this is
1911:000 | DONE cmt | em 16  8 |        |             | ; a 16-bit cell size, we add two
1912:000 | DONE lbl | em 16  8 | 0055bf |             | xt_cellplus                          
1913:000 | DONE ins | em 16  8 | 0055bf | c8          |                 iny                  
1914:000 | DONE ins | em 16  8 | 0055c0 | c8          |                 iny                  
1915:000 | DONE lbl | em 16  8 | 0055c1 |             | z_cellplus                           
1915:001 | DONE ins | em 16  8 | 0055c1 | 60          |                 rts                  
1916:000 | DONE wsp | em 16  8 |        |             |
1917:000 | DONE wsp | em 16  8 |        |             |
1918:000 | DONE cmt | em 16  8 |        |             | ; -------------------------------------------------------------------
1919:000 | DONE cmt | em 16  8 |        |             | ; CELLS ( n -- n ) X bytes / X cycles
1920:000 | DONE cmt | em 16  8 |        |             | ; Given a number of cells, return the number of bytes that they will require.
1921:000 | DONE cmt | em 16  8 |        |             | ; This is 16 bit cell Forth, so the value returned by this word is the same as
1922:000 | DONE cmt | em 16  8 |        |             | ; returned by 2*, see there.
1923:000 | DONE wsp | em 16  8 |        |             |
1924:000 | DONE cmt | em 16  8 |        |             | ; -------------------------------------------------------------------
1925:000 | DONE cmt | em 16  8 |        |             | ; CHAR ( "c" -- u ) 23 bytes / X cycles
1926:000 | DONE cmt | em 16  8 |        |             | ; Convert a character to its ASCII value
1927:000 | DONE lbl | em 16  8 | 0055c2 |             | xt_char                              
1928:000 | DONE dir | em 16  8 |        |             |         .!a16                        
1929:000 | DONE ins | em 16  8 | 0055c2 | 20 43 5b    |                 jsr 005b43           ( -- addr u )
1930:000 | DONE wsp | em 16  8 |        |             |
1931:000 | DONE cmt | em 16  8 |        |             |                 ; if we got back a zero, we have a problem
1932:000 | DONE ins | em 16  8 | 0055c5 | 98          |                 tya                  force flag check
1933:000 | DONE ins | em 16  8 | 0055c6 | d0 06       |                 bne 0055ce           
1934:000 | DONE wsp | em 16  8 |        |             |
1935:000 | DONE ins | em 16  8 | 0055c8 | a9 54 6f    |                 lda.# 006f54         
1936:000 | DONE ins | em 16  8 | 0055cb | 4c 67 68    |                 jmp 006867           
1937:000 | DONE wsp | em 16  8 |        |             |
1938:000 | DONE lbl | em 16  8 | 0055ce |             | char_got_char                        
1939:000 | DONE ins | em 16  8 | 0055ce | b4 00       |                 ldy.dx 00            get addr from NOS
1940:000 | DONE ins | em 16  8 | 0055d0 | b9 00 00    |                 lda.y 0000           LDA 0000,Y - could be C@
1941:000 | DONE ins | em 16  8 | 0055d3 | 29 ff 00    |                 and.# 00ff           
1942:000 | DONE ins | em 16  8 | 0055d6 | a8          |                 tay                  
1943:000 | DONE wsp | em 16  8 |        |             |
1944:000 | DONE ins | em 16  8 | 0055d7 | e8          |                 inx                  
1945:000 | DONE ins | em 16  8 | 0055d8 | e8          |                 inx                  
1946:000 | DONE wsp | em 16  8 |        |             |
1947:000 | DONE lbl | em 16  8 | 0055d9 |             | z_char                               
1947:001 | DONE ins | em 16  8 | 0055d9 | 60          |                 rts                  
1948:000 | DONE wsp | em 16  8 |        |             |
1949:000 | DONE wsp | em 16  8 |        |             |
1950:000 | DONE cmt | em 16  8 |        |             | ; -------------------------------------------------------------------
1951:000 | DONE cmt | em 16  8 |        |             | ; CHARPLUS ( u -- u+1 ) X bytes / X cycles
1952:000 | DONE cmt | em 16  8 |        |             | ; Adds the size of a character to the value on top of the stack. Since our
1953:000 | DONE cmt | em 16  8 |        |             | ; character size is one, this is the same code as 1+, see there
1954:000 | DONE wsp | em 16  8 |        |             |
1955:000 | DONE wsp | em 16  8 |        |             |
1956:000 | DONE cmt | em 16  8 |        |             | ; -------------------------------------------------------------------
1957:000 | DONE cmt | em 16  8 |        |             | ; CHARS ( u -- u ) X bytes / X cycles
1958:000 | DONE cmt | em 16  8 |        |             | ; Return the size in bytes of the number of characters on the top of the stack.
1959:000 | DONE cmt | em 16  8 |        |             | ; In this case, does nothing
1960:000 | DONE lbl | em 16  8 | 0055da |             | xt_chars                             
1961:000 | DONE wsp | em 16  8 |        |             |
1962:000 | DONE ins | em 16  8 | 0055da | ea          |                 nop                  will be removed during native compile
1963:000 | DONE lbl | em 16  8 | 0055db |             | z_chars                              
1963:001 | DONE ins | em 16  8 | 0055db | 60          |                 rts                  
1964:000 | DONE wsp | em 16  8 |        |             |
1965:000 | DONE cmt | em 16  8 |        |             | ; -------------------------------------------------------------------
1966:000 | DONE cmt | em 16  8 |        |             | ; CMOVE ( addr1 addr2 u -- ) X bytes / X cycles
1967:000 | DONE cmt | em 16  8 |        |             | ; Move characters from a lower to a higher address. Because of the danger of
1968:000 | DONE cmt | em 16  8 |        |             | ; overlap, we must start at the end of the source string (addr1+u) and copy
1969:000 | DONE cmt | em 16  8 |        |             | ; byte-by-byte to the end of the destination address (addr2+u). This is what the
1970:000 | DONE cmt | em 16  8 |        |             | ; MVP instruction is for. Use MOVE if you are not sure what to do.
1971:000 | DONE cmt | em 16  8 |        |             | ;       =====* source
1972:000 | DONE cmt | em 16  8 |        |             | ;          ====* destination
1973:000 | DONE lbl | em 16  8 | 0055dc |             | xt_cmove                             
1974:000 | DONE cmt | em 16  8 |        |             |                 ; We start at the end of the blocks, so we have to increase both
1975:000 | DONE cmt | em 16  8 |        |             |                 ; addr1 and addr2 by u
1976:000 | DONE ins | em 16  8 | 0055dc | 98          |                 tya                  
1977:000 | DONE ins | em 16  8 | 0055dd | 18          |                 clc                  
1978:000 | DONE ins | em 16  8 | 0055de | 75 02       |                 adc.dx 02            source, goes in X
1979:000 | DONE ins | em 16  8 | 0055e0 | 3a          |                 dec.a                convert length to index
1980:000 | DONE ins | em 16  8 | 0055e1 | 95 02       |                 sta.dx 02            
1981:000 | DONE wsp | em 16  8 |        |             |
1982:000 | DONE ins | em 16  8 | 0055e3 | 98          |                 tya                  
1983:000 | DONE ins | em 16  8 | 0055e4 | 18          |                 clc                  
1984:000 | DONE ins | em 16  8 | 0055e5 | 75 00       |                 adc.dx 00            destination, goes in Y
1985:000 | DONE ins | em 16  8 | 0055e7 | 3a          |                 dec.a                convert length to index
1986:000 | DONE wsp | em 16  8 |        |             |
1987:000 | DONE ins | em 16  8 | 0055e8 | 86 22       |                 stx.d 000022         keep DSP safe
1988:000 | DONE wsp | em 16  8 |        |             |
1989:000 | DONE ins | em 16  8 | 0055ea | 88          |                 dey                  
1990:000 | DONE ins | em 16  8 | 0055eb | 5a          |                 phy                  save number of bytes to transfer
1991:000 | DONE wsp | em 16  8 |        |             |
1992:000 | DONE ins | em 16  8 | 0055ec | a8          |                 tay                  destination now in Y
1993:000 | DONE wsp | em 16  8 |        |             |
1994:000 | DONE ins | em 16  8 | 0055ed | b5 02       |                 lda.dx 02            get source address
1995:000 | DONE ins | em 16  8 | 0055ef | aa          |                 tax                  
1996:000 | DONE wsp | em 16  8 |        |             |
1997:000 | DONE ins | em 16  8 | 0055f0 | 68          |                 pla                  retrieve number of bytes to transfer
1998:000 | DONE ins | em 16  8 | 0055f1 | 44 00 00    |                 mvp 0                
1998:001 | DONE ctl | em 16  8 |        |             |            
1999:000 | DONE wsp | em 16  8 |        |             |
2000:000 | DONE ins | em 16  8 | 0055f4 | a6 22       |                 ldx.d 000022         
2001:000 | DONE ins | em 16  8 | 0055f6 | b4 04       |                 ldy.dx 04            
2002:000 | DONE wsp | em 16  8 |        |             |
2003:000 | DONE ins | em 16  8 | 0055f8 | 8a          |                 txa                  It's worth addition for three cells dropped
2004:000 | DONE ins | em 16  8 | 0055f9 | 18          |                 clc                  
2005:000 | DONE ins | em 16  8 | 0055fa | 69 06 00    |                 adc.# 0006           
2006:000 | DONE ins | em 16  8 | 0055fd | aa          |                 tax                  
2007:000 | DONE wsp | em 16  8 |        |             |
2008:000 | DONE lbl | em 16  8 | 0055fe |             | z_cmove                              
2008:001 | DONE ins | em 16  8 | 0055fe | 60          |                 rts                  
2009:000 | DONE wsp | em 16  8 |        |             |
2010:000 | DONE cmt | em 16  8 |        |             | ; -------------------------------------------------------------------
2011:000 | DONE cmt | em 16  8 |        |             | ; CMOVE> ( addr1 addr 2 u -- ) X bytes / X cycles
2012:000 | DONE cmt | em 16  8 |        |             | ; Move characters from a higher to a lower address. Because of the danger of
2013:000 | DONE cmt | em 16  8 |        |             | ; overlap, we must start at the beginning of the source (addr1) to copy it
2014:000 | DONE cmt | em 16  8 |        |             | ; byte-by-byte to the beginning of the destination (addr2). This is what the MVN
2015:000 | DONE cmt | em 16  8 |        |             | ; instruction is for. Use MOVE if you are not sure what to do.
2016:000 | DONE cmt | em 16  8 |        |             | ;          *==== source
2017:000 | DONE cmt | em 16  8 |        |             | ;       *===== destination
2018:000 | DONE lbl | em 16  8 | 0055ff |             | xt_cmoveup                           
2019:000 | DONE ins | em 16  8 | 0055ff | 86 22       |                 stx.d 000022         keep DSP safe
2020:000 | DONE wsp | em 16  8 |        |             |
2021:000 | DONE ins | em 16  8 | 005601 | 88          |                 dey                  
2022:000 | DONE ins | em 16  8 | 005602 | 5a          |                 phy                  save number of bytes to transfer
2023:000 | DONE wsp | em 16  8 |        |             |
2024:000 | DONE ins | em 16  8 | 005603 | b5 00       |                 lda.dx 00            get destination address
2025:000 | DONE ins | em 16  8 | 005605 | a8          |                 tay                  
2026:000 | DONE wsp | em 16  8 |        |             |
2027:000 | DONE ins | em 16  8 | 005606 | b5 02       |                 lda.dx 02            get source address
2028:000 | DONE ins | em 16  8 | 005608 | aa          |                 tax                  
2029:000 | DONE wsp | em 16  8 |        |             |
2030:000 | DONE ins | em 16  8 | 005609 | 68          |                 pla                  retrieve number of bytes to transfer
2031:000 | DONE ins | em 16  8 | 00560a | 54 00 00    |                 mvn 0                
2031:001 | DONE ctl | em 16  8 |        |             |            
2032:000 | DONE wsp | em 16  8 |        |             |
2033:000 | DONE ins | em 16  8 | 00560d | a6 22       |                 ldx.d 000022         
2034:000 | DONE ins | em 16  8 | 00560f | b4 04       |                 ldy.dx 04            
2035:000 | DONE wsp | em 16  8 |        |             |
2036:000 | DONE ins | em 16  8 | 005611 | 8a          |                 txa                  It's worth addition for three cells dropped
2037:000 | DONE ins | em 16  8 | 005612 | 18          |                 clc                  
2038:000 | DONE ins | em 16  8 | 005613 | 69 06 00    |                 adc.# 0006           
2039:000 | DONE ins | em 16  8 | 005616 | aa          |                 tax                  
2040:000 | DONE wsp | em 16  8 |        |             |
2041:000 | DONE lbl | em 16  8 | 005617 |             | z_cmoveup                            
2041:001 | DONE ins | em 16  8 | 005617 | 60          |                 rts                  
2042:000 | DONE wsp | em 16  8 |        |             |
2043:000 | DONE wsp | em 16  8 |        |             |
2044:000 | DONE cmt | em 16  8 |        |             | ; -------------------------------------------------------------------
2045:000 | DONE cmt | em 16  8 |        |             | ; COMPILE-ONLY ( -- ) 8 bytes / X cycles
2046:000 | DONE cmt | em 16  8 |        |             | ; Mark the most recently defined word as COMPILE-ONLY. The alternative (and
2047:000 | DONE cmt | em 16  8 |        |             | ; traditional) way to do this is to include a word ?COMPILE that makes sure
2048:000 | DONE cmt | em 16  8 |        |             | ; we're in compile mode
2049:000 | DONE lbl | em 16  8 | 005618 |             | xt_compile-only                      
2050:000 | DONE dir | em 16  8 |        |             |         .!a16                        
2051:000 | DONE ins | em 16  8 | 005618 | a9 04 00    |                 lda.# CO             
2052:000 | DONE ins | em 16  8 | 00561b | eb          |                 xba                  flags are MSB
2053:000 | DONE ins | em 16  8 | 00561c | 12 02       |                 ora.di 000002        ORA (DP)
2054:000 | DONE ins | em 16  8 | 00561e | 92 02       |                 sta.di 000002        
2055:000 | DONE wsp | em 16  8 |        |             |
2056:000 | DONE lbl | em 16  8 | 005620 |             | z_compile-only                       
2056:001 | DONE ins | em 16  8 | 005620 | 60          |                 rts                  
2057:000 | DONE wsp | em 16  8 |        |             |
2058:000 | DONE wsp | em 16  8 |        |             |
2059:000 | DONE cmt | em 16  8 |        |             | ; -------------------------------------------------------------------
2060:000 | DONE cmt | em 16  8 |        |             | ; COMPILE, ( xt -- ) X bytes / X cycles
2061:000 | DONE cmt | em 16  8 |        |             | ; Compile a given xt in the current word definition. It is an error if we are
2062:000 | DONE cmt | em 16  8 |        |             | ; not in the compile state. Because we are using subroutine threading, we can't
2063:000 | DONE cmt | em 16  8 |        |             | ; use , (COMMA) to compile new words the traditional way. We use the NC (Native
2064:000 | DONE cmt | em 16  8 |        |             | ; Compile) flag to decide if native compilation is allowed. If yes, we use the
2065:000 | DONE cmt | em 16  8 |        |             | ; value NC_LIMIT (in definitions.tasm) to decide if the code is too large to be
2066:000 | DONE cmt | em 16  8 |        |             | ; natively coded: If the size is smaller than NC_LIMIT, we silently use
2067:000 | DONE cmt | em 16  8 |        |             | ; subroutine coding.
2068:000 | DONE cmt | em 16  8 |        |             | ; TODO currently just compiles subroutine jumps
2069:000 | DONE lbl | em 16  8 | 005621 |             | xt_compilecomma                      
2070:000 | DONE dir | em 16  8 |        |             |         .!a16                        
2071:000 | DONE wsp | em 16  8 |        |             |
2072:000 | DONE lbl | em 16  8 | 005621 |             | compile_as_code                      
2073:000 | DONE cmt | em 16  8 |        |             |                 ; Compile xt as native code
2074:000 | DONE cmt | em 16  8 |        |             |                 ; use nc_limit to decide if we want native compile
2075:000 | DONE cmt | em 16  8 |        |             |                 ; TODO consider special cases:
2076:000 | DONE cmt | em 16  8 |        |             |                 ;  - >R R> should strip PLA/PHA if native compiled
2077:000 | DONE cmt | em 16  8 |        |             |                 ;  - 2>R and 2R> should strip three first and last bytes
2078:000 | DONE cmt | em 16  8 |        |             |                 ;  - NOP should be removed if only instruction
2079:000 | DONE cmt | em 16  8 |        |             |                 ;  - Don't compile comments
2080:000 | DONE wsp | em 16  8 |        |             |
2081:000 | DONE lbl | em 16  8 | 005621 |             | compile_as_jump                      
2082:000 | DONE cmt | em 16  8 |        |             |                 ; Compile xt as a subroutine jump.
2083:000 | DONE ins | em 16  8 | 005621 | e2 20       |                 sep 20               
2083:001 | DONE ctl | em  8  8 |        |             |         .!a8
2084:000 | DONE ins | em  8  8 | 005623 | a9 20       |                 lda.# 20             opcode for JSR
2085:000 | DONE ins | em  8  8 | 005625 | 92 00       |                 sta.di 000000        STA (CP)
2086:000 | DONE ins | em  8  8 | 005627 | c2 20       |                 rep 20               
2086:001 | DONE ctl | em 16  8 |        |             |         .!a16
2087:000 | DONE ins | em 16  8 | 005629 | e6 00       |                 inc.d 000000         
2088:000 | DONE wsp | em 16  8 |        |             |
2089:000 | DONE cmt | em 16  8 |        |             |                 ; There is no "sty.di" instruction, so we have to do this the
2090:000 | DONE cmt | em 16  8 |        |             |                 ; hard way
2091:000 | DONE ins | em 16  8 | 00562b | 98          |                 tya                  
2092:000 | DONE ins | em 16  8 | 00562c | 92 00       |                 sta.di 000000        
2093:000 | DONE ins | em 16  8 | 00562e | e6 00       |                 inc.d 000000         
2094:000 | DONE ins | em 16  8 | 005630 | e6 00       |                 inc.d 000000         
2095:000 | DONE wsp | em 16  8 |        |             |
2096:000 | DONE ins | em 16  8 | 005632 | b4 00       |                 ldy.dx 00            
2097:000 | DONE ins | em 16  8 | 005634 | e8          |                 inx                  
2098:000 | DONE ins | em 16  8 | 005635 | e8          |                 inx                  
2099:000 | DONE wsp | em 16  8 |        |             |
2100:000 | DONE lbl | em 16  8 | 005636 |             | z_compilecomma                       
2100:001 | DONE ins | em 16  8 | 005636 | 60          |                 rts                  
2101:000 | DONE wsp | em 16  8 |        |             |
2102:000 | DONE wsp | em 16  8 |        |             |
2103:000 | DONE cmt | em 16  8 |        |             | ; -------------------------------------------------------------------
2104:000 | DONE cmt | em 16  8 |        |             | ; CONSTANT ( "name" n -- ) X bytes / X cycles
2105:000 | DONE cmt | em 16  8 |        |             | ; Associate a fixed value with a word. This could be realized as
2106:000 | DONE cmt | em 16  8 |        |             | ; CREATE , DOES> @  as well. We do more in assembler but let CREATE do the heavy
2107:000 | DONE cmt | em 16  8 |        |             | ; lifting.
2108:000 | DONE cmt | em 16  8 |        |             | ; See http://www.bradrodriguez.com/papers/moving3.htm for a primer on how
2109:000 | DONE cmt | em 16  8 |        |             | ; this works in various Forths.
2110:000 | DONE lbl | em 16  8 | 005637 |             | xt_constant                          
2111:000 | DONE ins | em 16  8 | 005637 | 20 7a 56    |                 jsr 00567a           
2112:000 | DONE wsp | em 16  8 |        |             |
2113:000 | DONE cmt | em 16  8 |        |             |                 ; CREATE by default installs a subroutine jump to DOVAR, but we
2114:000 | DONE cmt | em 16  8 |        |             |                 ; actually want DOCONST this time. Go back two bytes and repace
2115:000 | DONE cmt | em 16  8 |        |             |                 ; the subroutine jump target
2116:000 | DONE ins | em 16  8 | 00563a | a5 00       |                 lda.d 000000         
2117:000 | DONE ins | em 16  8 | 00563c | 3a          |                 dec.a                
2118:000 | DONE ins | em 16  8 | 00563d | 3a          |                 dec.a                
2119:000 | DONE ins | em 16  8 | 00563e | 85 1c       |                 sta.d 00001c         
2120:000 | DONE wsp | em 16  8 |        |             |
2121:000 | DONE ins | em 16  8 | 005640 | a9 b1 67    |                 lda.# 0067b1         
2122:000 | DONE ins | em 16  8 | 005643 | 92 1c       |                 sta.di 00001c        STA (TMP1)
2123:000 | DONE wsp | em 16  8 |        |             |
2124:000 | DONE cmt | em 16  8 |        |             |                 ; Save TOS in next cell. This is a direct version of COMMA
2125:000 | DONE ins | em 16  8 | 005645 | 98          |                 tya                  there is no "sty.di cp"
2126:000 | DONE ins | em 16  8 | 005646 | 92 00       |                 sta.di 000000        
2127:000 | DONE ins | em 16  8 | 005648 | e6 00       |                 inc.d 000000         
2128:000 | DONE ins | em 16  8 | 00564a | e6 00       |                 inc.d 000000         
2129:000 | DONE wsp | em 16  8 |        |             |
2130:000 | DONE ins | em 16  8 | 00564c | b4 00       |                 ldy.dx 00            DROP
2131:000 | DONE ins | em 16  8 | 00564e | e8          |                 inx                  
2132:000 | DONE ins | em 16  8 | 00564f | e8          |                 inx                  drop through to adjust_z
2133:000 | DONE wsp | em 16  8 |        |             |
2134:000 | DONE cmt | em 16  8 |        |             |                 ; Now the length of the complete word (z_word) has increased by
2135:000 | DONE cmt | em 16  8 |        |             |                 ; two. We need to update that number or else words such as SEE
2136:000 | DONE cmt | em 16  8 |        |             |                 ; will ignore the PFA. We use this same routine for VARIABLE,
2137:000 | DONE cmt | em 16  8 |        |             |                 ; VALUE and DEFER
2138:000 | DONE lbl | em 16  8 | 005650 |             | adjust_z                             
2139:000 | DONE ins | em 16  8 | 005650 | 20 97 59    |                 jsr 005997           gives us ( nt )
2140:000 | DONE wsp | em 16  8 |        |             |
2141:000 | DONE cmt | em 16  8 |        |             |                 ; z_word is kept six bytes further down
2142:000 | DONE ins | em 16  8 | 005653 | 98          |                 tya                  
2143:000 | DONE ins | em 16  8 | 005654 | 18          |                 clc                  
2144:000 | DONE ins | em 16  8 | 005655 | 69 06 00    |                 adc.# 0006           
2145:000 | DONE ins | em 16  8 | 005658 | a8          |                 tay                  
2146:000 | DONE wsp | em 16  8 |        |             |
2147:000 | DONE ins | em 16  8 | 005659 | b9 00 00    |                 lda.y 0000           LDA 0000,Y
2148:000 | DONE ins | em 16  8 | 00565c | 1a          |                 inc.a                
2149:000 | DONE ins | em 16  8 | 00565d | 1a          |                 inc.a                
2150:000 | DONE ins | em 16  8 | 00565e | 99 00 00    |                 sta.y 0000           
2151:000 | DONE wsp | em 16  8 |        |             |
2152:000 | DONE ins | em 16  8 | 005661 | b4 00       |                 ldy.dx 00            get rid of nt
2153:000 | DONE ins | em 16  8 | 005663 | e8          |                 inx                  
2154:000 | DONE ins | em 16  8 | 005664 | e8          |                 inx                  
2155:000 | DONE wsp | em 16  8 |        |             |
2156:000 | DONE lbl | em 16  8 | 005665 |             | z_constant                           
2156:001 | DONE ins | em 16  8 | 005665 | 60          |                 rts                  
2157:000 | DONE wsp | em 16  8 |        |             |
2158:000 | DONE wsp | em 16  8 |        |             |
2159:000 | DONE cmt | em 16  8 |        |             | ; -------------------------------------------------------------------
2160:000 | DONE cmt | em 16  8 |        |             | ; COUNT ( c-addr -- addr u ) 14 bytes / X cycles
2161:000 | DONE cmt | em 16  8 |        |             | ; Convert old-style character string to address-length pair. Note that the
2162:000 | DONE cmt | em 16  8 |        |             | ; length of the string c-addr ist stored in character length (8 bit), not cell
2163:000 | DONE cmt | em 16  8 |        |             | ; length (16 bit). This is rarely used these days, though COUNT can also be used
2164:000 | DONE cmt | em 16  8 |        |             | ; to step through a string character by character.
2165:000 | DONE lbl | em 16  8 | 005666 |             | xt_count                             
2166:000 | DONE dir | em 16  8 |        |             |         .!a16                        
2167:000 | DONE dir | em 16 16 |        |             |         .!xy16                       
2168:000 | DONE ins | em 16 16 | 005666 | 98          |                 tya                  
2169:000 | DONE ins | em 16 16 | 005667 | 1a          |                 inc.a                String address starts one char later
2170:000 | DONE wsp | em 16 16 |        |             |
2171:000 | DONE ins | em 16 16 | 005668 | ca          |                 dex                  
2172:000 | DONE ins | em 16 16 | 005669 | ca          |                 dex                  
2173:000 | DONE ins | em 16 16 | 00566a | 95 00       |                 sta.dx 00            NOS
2174:000 | DONE wsp | em 16 16 |        |             |
2175:000 | DONE ins | em 16 16 | 00566c | b9 00 00    |                 lda.y 0000           LDA $0000,Y  first byte is length
2176:000 | DONE ins | em 16 16 | 00566f | 29 ff 00    |                 and.# 00ff           get rid of whatever was MSB
2177:000 | DONE ins | em 16 16 | 005672 | a8          |                 tay                  TOS
2178:000 | DONE wsp | em 16 16 |        |             |
2179:000 | DONE lbl | em 16 16 | 005673 |             | z_count                              
2179:001 | DONE ins | em 16 16 | 005673 | 60          |                 rts                  
2180:000 | DONE wsp | em 16 16 |        |             |
2181:000 | DONE wsp | em 16 16 |        |             |
2182:000 | DONE cmt | em 16 16 |        |             | ; -------------------------------------------------------------------
2183:000 | DONE cmt | em 16 16 |        |             | ; CR ( -- ) X bytes / X cycles
2184:000 | DONE cmt | em 16 16 |        |             | ; Cause following output to appear at beginning of next line
2185:000 | DONE lbl | em 16 16 | 005674 |             | xt_cr                                
2186:000 | DONE ins | em 16 16 | 005674 | a9 0a 00    |                 lda.# AscLF          test with AscCR for emulators
2187:000 | DONE ins | em 16 16 | 005677 | 6c 0e 00    |                 jmp.i 00000e         JSR/RTS
2188:000 | DONE wsp | em 16 16 |        |             |
2189:000 | DONE lbl | em 16 16 | 00567a |             | z_cr                                 ; never reached
2190:000 | DONE wsp | em 16 16 |        |             |
2191:000 | DONE cmt | em 16 16 |        |             | ; -------------------------------------------------------------------
2192:000 | DONE cmt | em 16 16 |        |             | ; CREATE ( "name" -- ) X bytes / X cycles
2193:000 | DONE cmt | em 16 16 |        |             | ; Create a Dictionary entry associated with "name", used for various words,
2194:000 | DONE cmt | em 16 16 |        |             | ; especially for VARIABLE. When called, this new word will return the associated
2195:000 | DONE cmt | em 16 16 |        |             | ; address.
2196:000 | DONE lbl | em 16 16 | 00567a |             | xt_create                            
2197:000 | DONE dir | em 16 16 |        |             |         .!a16                        
2198:000 | DONE ins | em 16 16 | 00567a | 20 43 5b    |                 jsr 005b43           ( -- addr u )
2199:000 | DONE ins | em 16 16 | 00567d | d0 06       |                 bne 005685           
2200:000 | DONE wsp | em 16 16 |        |             |
2201:000 | DONE cmt | em 16 16 |        |             |                 ; if we got a zero-length name string, complain and abort
2202:000 | DONE ins | em 16 16 | 00567f | a9 54 6f    |                 lda.# 006f54         
2203:000 | DONE ins | em 16 16 | 005682 | 4c 67 68    |                 jmp 006867           
2204:000 | DONE wsp | em 16 16 |        |             |
2205:000 | DONE lbl | em 16 16 | 005685 |             | create_got_name                      
2206:000 | DONE cmt | em 16 16 |        |             |                 ; Remember the first free byte of memory as the start of the new
2207:000 | DONE cmt | em 16 16 |        |             |                 ; word
2208:000 | DONE ins | em 16 16 | 005685 | a5 00       |                 lda.d 000000         
2209:000 | DONE ins | em 16 16 | 005687 | 85 1c       |                 sta.d 00001c         save start of new word
2210:000 | DONE wsp | em 16 16 |        |             |
2211:000 | DONE cmt | em 16 16 |        |             |                 ; Enforce limit on 255 char length names by masking the MSB
2212:000 | DONE cmt | em 16 16 |        |             |                 ; of the length of the given string. We arrive here with
2213:000 | DONE cmt | em 16 16 |        |             |                 ; ( addr u )
2214:000 | DONE ins | em 16 16 | 005689 | 98          |                 tya                  
2215:000 | DONE ins | em 16 16 | 00568a | 29 ff 00    |                 and.# 00ff           
2216:000 | DONE ins | em 16 16 | 00568d | 85 1e       |                 sta.d 00001e         save length of name string
2217:000 | DONE wsp | em 16 16 |        |             |
2218:000 | DONE cmt | em 16 16 |        |             |                 ; We need 8 bytes + the length of the name string for our new
2219:000 | DONE cmt | em 16 16 |        |             |                 ; header. This is also the offset for the start of the code
2220:000 | DONE cmt | em 16 16 |        |             |                 ; field (the xt_ label) so we need to remember it. Otherwise, we
2221:000 | DONE cmt | em 16 16 |        |             |                 ; could just allot the space afterwards.
2222:000 | DONE ins | em 16 16 | 00568f | 18          |                 clc                  
2223:000 | DONE ins | em 16 16 | 005690 | 69 08 00    |                 adc.# 0008           
2224:000 | DONE ins | em 16 16 | 005693 | 85 20       |                 sta.d 000020         total bytes required for header
2225:000 | DONE wsp | em 16 16 |        |             |
2226:000 | DONE cmt | em 16 16 |        |             |                 ; We need to allocate three more bytes for the hardcoded
2227:000 | DONE cmt | em 16 16 |        |             |                 ; code field area (CFA), the "payload" of the word which by
2228:000 | DONE cmt | em 16 16 |        |             |                 ; default will be a subroutine jump to DOVAR
2229:000 | DONE ins | em 16 16 | 005695 | 1a          |                 inc.a                
2230:000 | DONE ins | em 16 16 | 005696 | 1a          |                 inc.a                
2231:000 | DONE ins | em 16 16 | 005697 | 1a          |                 inc.a                
2232:000 | DONE wsp | em 16 16 |        |             |
2233:000 | DONE cmt | em 16 16 |        |             |                 ; Instead of jumping to ALLOT, we do things by hand for speed
2234:000 | DONE cmt | em 16 16 |        |             |                 ; and so we don't have to fool around with the stack
2235:000 | DONE ins | em 16 16 | 005698 | 18          |                 clc                  
2236:000 | DONE ins | em 16 16 | 005699 | 65 00       |                 adc.d 000000         
2237:000 | DONE ins | em 16 16 | 00569b | 85 00       |                 sta.d 000000         
2238:000 | DONE wsp | em 16 16 |        |             |
2239:000 | DONE cmt | em 16 16 |        |             |                 ; Now we walk through the header, using Y as the index. See
2240:000 | DONE cmt | em 16 16 |        |             |                 ; drawing of header in headers.tasm file for reference. We
2241:000 | DONE cmt | em 16 16 |        |             |                 ; arrive here with ( addr u ) still from PARSE-NAME. We need
2242:000 | DONE cmt | em 16 16 |        |             |                 ; that addr later for the name string, so we push it to the
2243:000 | DONE cmt | em 16 16 |        |             |                 ; Return Stack. We'll clean up the Data Stack later
2244:000 | DONE ins | em 16 16 | 00569d | b5 00       |                 lda.dx 00            
2245:000 | DONE ins | em 16 16 | 00569f | 48          |                 pha                  
2246:000 | DONE wsp | em 16 16 |        |             |
2247:000 | DONE cmt | em 16 16 |        |             |                 ; HEADER BYTES 0,1: Length byte and flags
2248:000 | DONE ins | em 16 16 | 0056a0 | a0 00 00    |                 ldy.# 0000           Y is now an index, not TOS
2249:000 | DONE ins | em 16 16 | 0056a3 | a5 1e       |                 lda.d 00001e         get length byte
2250:000 | DONE ins | em 16 16 | 0056a5 | 91 1c       |                 sta.diy 00001c       STA (TMP1),Y
2251:000 | DONE ins | em 16 16 | 0056a7 | c8          |                 iny                  
2252:000 | DONE ins | em 16 16 | 0056a8 | c8          |                 iny                  
2253:000 | DONE wsp | em 16 16 |        |             |
2254:000 | DONE cmt | em 16 16 |        |             |                 ; BYTES 2,3: Next word in the dictionary (its nt). This is the
2255:000 | DONE cmt | em 16 16 |        |             |                 ; current Dictionary Pointer
2256:000 | DONE ins | em 16 16 | 0056a9 | a5 02       |                 lda.d 000002         
2257:000 | DONE ins | em 16 16 | 0056ab | 91 1c       |                 sta.diy 00001c       
2258:000 | DONE ins | em 16 16 | 0056ad | c8          |                 iny                  
2259:000 | DONE ins | em 16 16 | 0056ae | c8          |                 iny                  
2260:000 | DONE wsp | em 16 16 |        |             |
2261:000 | DONE cmt | em 16 16 |        |             |                 ; BYTES 4,5: Start of code field (xt of this word, "xt_" link)
2262:000 | DONE cmt | em 16 16 |        |             |                 ; This begins after the header, so we take the length of the
2263:000 | DONE cmt | em 16 16 |        |             |                 ; header, which we saved in tmp3, and use it as an offset to
2264:000 | DONE cmt | em 16 16 |        |             |                 ; the address of the start of the word
2265:000 | DONE ins | em 16 16 | 0056af | a5 1c       |                 lda.d 00001c         can't use CP, because we've allotted space
2266:000 | DONE ins | em 16 16 | 0056b1 | 85 02       |                 sta.d 000002         while we've got it, make old CP the new DP
2267:000 | DONE wsp | em 16 16 |        |             |
2268:000 | DONE ins | em 16 16 | 0056b3 | 18          |                 clc                  
2269:000 | DONE ins | em 16 16 | 0056b4 | 65 20       |                 adc.d 000020         total header length
2270:000 | DONE ins | em 16 16 | 0056b6 | 91 1c       |                 sta.diy 00001c       
2271:000 | DONE ins | em 16 16 | 0056b8 | c8          |                 iny                  
2272:000 | DONE ins | em 16 16 | 0056b9 | c8          |                 iny                  
2273:000 | DONE wsp | em 16 16 |        |             |
2274:000 | DONE cmt | em 16 16 |        |             |                 ; BYTES 6,7: End of code ("z_" link)
2275:000 | DONE cmt | em 16 16 |        |             |                 ; By default, we execute a jump to the DOVAR routine, so we need
2276:000 | DONE cmt | em 16 16 |        |             |                 ; to move three bytes down, and then one more byte so the z_
2277:000 | DONE cmt | em 16 16 |        |             |                 ; label points to the (fictional) RTS instruction for correct
2278:000 | DONE cmt | em 16 16 |        |             |                 ; compilation. The start of the code field is still in A
2279:000 | DONE ins | em 16 16 | 0056ba | 1a          |                 inc.a                
2280:000 | DONE ins | em 16 16 | 0056bb | 1a          |                 inc.a                
2281:000 | DONE ins | em 16 16 | 0056bc | 1a          |                 inc.a                
2282:000 | DONE ins | em 16 16 | 0056bd | 91 1c       |                 sta.diy 00001c       
2283:000 | DONE ins | em 16 16 | 0056bf | c8          |                 iny                  
2284:000 | DONE ins | em 16 16 | 0056c0 | c8          |                 iny                  
2285:000 | DONE wsp | em 16 16 |        |             |
2286:000 | DONE cmt | em 16 16 |        |             |                 ; BYTE 8: Start of name string
2287:000 | DONE cmt | em 16 16 |        |             |                 ; The addr of the string is on the Return Stack, the length of
2288:000 | DONE cmt | em 16 16 |        |             |                 ; the name string is in tmp2. We subtract eight from the address
2289:000 | DONE cmt | em 16 16 |        |             |                 ; so we can use the same loop index
2290:000 | DONE ins | em 16 16 | 0056c1 | 68          |                 pla                  get back string address
2291:000 | DONE ins | em 16 16 | 0056c2 | 38          |                 sec                  
2292:000 | DONE ins | em 16 16 | 0056c3 | e9 08 00    |                 sbc.# 0008           
2293:000 | DONE ins | em 16 16 | 0056c6 | 85 20       |                 sta.d 000020         
2294:000 | DONE ins | em 16 16 | 0056c8 | e2 20       |                 sep 20               
2294:001 | DONE ctl | em  8 16 |        |             |         .!a8
2295:000 | DONE lbl | em  8 16 | 0056ca |             | @                                    
2296:000 | DONE ins | em  8 16 | 0056ca | b1 20       |                 lda.diy 000020       
2297:000 | DONE ins | em  8 16 | 0056cc | 91 1c       |                 sta.diy 00001c       
2298:000 | DONE ins | em  8 16 | 0056ce | c8          |                 iny                  
2299:000 | DONE ins | em  8 16 | 0056cf | c6 1e       |                 dec.d 00001e         
2300:000 | DONE ins | em  8 16 | 0056d1 | d0 f7       |                 bne 0056ca           
2301:000 | DONE wsp | em  8 16 |        |             |
2302:000 | DONE cmt | em  8 16 |        |             |                 ; After the name string, comes the Code Field (start at xt, that
2303:000 | DONE cmt | em  8 16 |        |             |                 ; is, the xt_ label of the word) which is initially a jump to the
2304:000 | DONE cmt | em  8 16 |        |             |                 ; subroutine to DOVAR. We're still in 8-bit A-register, which is
2305:000 | DONE cmt | em  8 16 |        |             |                 ; good
2306:000 | DONE ins | em  8 16 | 0056d3 | a9 20       |                 lda.# 20             opcode of JSR
2307:000 | DONE ins | em  8 16 | 0056d5 | 91 1c       |                 sta.diy 00001c       
2308:000 | DONE ins | em  8 16 | 0056d7 | c8          |                 iny                  single increase only because we have 8-bit A
2309:000 | DONE wsp | em  8 16 |        |             |
2310:000 | DONE ins | em  8 16 | 0056d8 | a9 db       |                 lda.# .lsb 0067db    
2311:000 | DONE ins | em  8 16 | 0056da | 91 1c       |                 sta.diy 00001c       
2312:000 | DONE ins | em  8 16 | 0056dc | c8          |                 iny                  
2313:000 | DONE wsp | em  8 16 |        |             |
2314:000 | DONE ins | em  8 16 | 0056dd | a9 67       |                 lda.# .msb 0067db    
2315:000 | DONE ins | em  8 16 | 0056df | 91 1c       |                 sta.diy 00001c       
2316:000 | DONE wsp | em  8 16 |        |             |
2317:000 | DONE ins | em  8 16 | 0056e1 | c2 20       |                 rep 20               
2317:001 | DONE ctl | em 16 16 |        |             |         .!a16
2318:000 | DONE cmt | em 16 16 |        |             |                 ; We're done. Restore Data Stack (2DROP)
2319:000 | DONE ins | em 16 16 | 0056e3 | b4 02       |                 ldy.dx 02            
2320:000 | DONE ins | em 16 16 | 0056e5 | e8          |                 inx                  
2321:000 | DONE ins | em 16 16 | 0056e6 | e8          |                 inx                  
2322:000 | DONE ins | em 16 16 | 0056e7 | e8          |                 inx                  
2323:000 | DONE ins | em 16 16 | 0056e8 | e8          |                 inx                  
2324:000 | DONE wsp | em 16 16 |        |             |
2325:000 | DONE lbl | em 16 16 | 0056e9 |             | z_create                             
2325:001 | DONE ins | em 16 16 | 0056e9 | 60          |                 rts                  
2326:000 | DONE wsp | em 16 16 |        |             |
2327:000 | DONE wsp | em 16 16 |        |             |
2328:000 | DONE cmt | em 16 16 |        |             | ; -------------------------------------------------------------------
2329:000 | DONE cmt | em 16 16 |        |             | ; DEFER ( "name" -- ) X bytes / X cycles
2330:000 | DONE cmt | em 16 16 |        |             | ; Reserve an name that can be linked to various xt by IS. The ANSI reference
2331:000 | DONE cmt | em 16 16 |        |             | ; implementation is CREATE ['] ABORT , DOES> @ EXECUTE ; but we use this as
2332:000 | DONE cmt | em 16 16 |        |             | ; a low-level word so we can set stuff up earlier and faster
2333:000 | DONE lbl | em 16 16 | 0056ea |             | xt_defer                             
2334:000 | DONE ins | em 16 16 | 0056ea | 20 7a 56    |                 jsr 00567a           
2335:000 | DONE wsp | em 16 16 |        |             |
2336:000 | DONE cmt | em 16 16 |        |             |                 ; CREATE by default installs a subroutine jump to DOVAR, but we
2337:000 | DONE cmt | em 16 16 |        |             |                 ; actually want DODEFER this time. Go back two bytes and repace
2338:000 | DONE cmt | em 16 16 |        |             |                 ; the subroutine jump target
2339:000 | DONE ins | em 16 16 | 0056ed | a5 00       |                 lda.d 000000         
2340:000 | DONE ins | em 16 16 | 0056ef | 3a          |                 dec.a                
2341:000 | DONE ins | em 16 16 | 0056f0 | 3a          |                 dec.a                
2342:000 | DONE ins | em 16 16 | 0056f1 | 85 1c       |                 sta.d 00001c         
2343:000 | DONE wsp | em 16 16 |        |             |
2344:000 | DONE ins | em 16 16 | 0056f3 | a9 bf 67    |                 lda.# 0067bf         
2345:000 | DONE ins | em 16 16 | 0056f6 | 92 1c       |                 sta.di 00001c        STA (TMP1)
2346:000 | DONE wsp | em 16 16 |        |             |
2347:000 | DONE cmt | em 16 16 |        |             |                 ; DODEFER executes the next address it finds after its call. As
2348:000 | DONE cmt | em 16 16 |        |             |                 ; a default, we include the error "Defer not defined"
2349:000 | DONE ins | em 16 16 | 0056f8 | a9 c8 67    |                 lda.# 0067c8         
2350:000 | DONE ins | em 16 16 | 0056fb | 92 00       |                 sta.di 000000        
2351:000 | DONE ins | em 16 16 | 0056fd | e6 00       |                 inc.d 000000         
2352:000 | DONE ins | em 16 16 | 0056ff | e6 00       |                 inc.d 000000         
2353:000 | DONE wsp | em 16 16 |        |             |
2354:000 | DONE ins | em 16 16 | 005701 | 4c 50 56    |                 jmp 005650           adjust the header to the correct length
2355:000 | DONE wsp | em 16 16 |        |             |
2356:000 | DONE lbl | em 16 16 | 005704 |             | z_defer                              ; never reached
2357:000 | DONE wsp | em 16 16 |        |             |
2358:000 | DONE wsp | em 16 16 |        |             |
2359:000 | DONE cmt | em 16 16 |        |             | ; -------------------------------------------------------------------
2360:000 | DONE cmt | em 16 16 |        |             | ; DIGIT? ( char -- u f | char f )  X bytes / X cycles
2361:000 | DONE cmt | em 16 16 |        |             | ; Convert a single ASCII character to a number in the current radix. Inspired by
2362:000 | DONE cmt | em 16 16 |        |             | ; the pForth instruction DIGIT in pForth, see
2363:000 | DONE cmt | em 16 16 |        |             | ; https://github.com/philburk/pforth/blob/master/fth/numberio.fth
2364:000 | DONE cmt | em 16 16 |        |             | ; Rewritten from DIGIT>NUMBER in Tali Forth. Note in contrast to pForth, we get
2365:000 | DONE cmt | em 16 16 |        |             | ; the base (radix) ourselves instead of having the user provide it. There is no
2366:000 | DONE cmt | em 16 16 |        |             | ; standard name for this routine, which itself is not ANSI; we use DIGIT?
2367:000 | DONE cmt | em 16 16 |        |             | ; following pForth and Gforth.
2368:000 | DONE lbl | em 16 16 | 005704 |             | xt_digitq                            
2369:000 | DONE dir | em 16 16 |        |             |         .!a16                        
2370:000 | DONE ins | em 16 16 | 005704 | 98          |                 tya                  
2371:000 | DONE ins | em 16 16 | 005705 | 29 ff 00    |                 and.# 00ff           paranoid
2372:000 | DONE wsp | em 16 16 |        |             |
2373:000 | DONE ins | em 16 16 | 005708 | e2 20       |                 sep 20               
2373:001 | DONE ctl | em  8 16 |        |             |         .!a8
2374:000 | DONE cmt | em  8 16 |        |             |                 ; Make sure we're not below the ASCII code for '0'
2375:000 | DONE ins | em  8 16 | 00570a | c9 30       |                 cmp.# 30             
2376:000 | DONE ins | em  8 16 | 00570c | 90 1d       |                 bcc 00572b           
2377:000 | DONE wsp | em  8 16 |        |             |
2378:000 | DONE cmt | em  8 16 |        |             |                 ; Then see if we are below '9', because that would make this
2379:000 | DONE cmt | em  8 16 |        |             |                 ; a normal number
2380:000 | DONE ins | em  8 16 | 00570e | c9 3a       |                 cmp.# 00003a         This is ':'
2381:000 | DONE ins | em  8 16 | 005710 | 90 12       |                 bcc 005724           
2382:000 | DONE wsp | em  8 16 |        |             |
2383:000 | DONE cmt | em  8 16 |        |             |                 ; Well, then let's see if this is the gap between '9' and 'A' so
2384:000 | DONE cmt | em  8 16 |        |             |                 ; we can treat the whole range as a number
2385:000 | DONE ins | em  8 16 | 005712 | c9 40       |                 cmp.# 000040         This is '@'
2386:000 | DONE ins | em  8 16 | 005714 | 90 15       |                 bcc 00572b           
2387:000 | DONE wsp | em  8 16 |        |             |
2388:000 | DONE cmt | em  8 16 |        |             |                 ; Probably a letter, so we make sure it is uppercase
2389:000 | DONE ins | em  8 16 | 005716 | c9 61       |                 cmp.# 61             
2390:000 | DONE ins | em  8 16 | 005718 | 90 07       |                 bcc 005721           not lower case, too low
2391:000 | DONE ins | em  8 16 | 00571a | c9 7b       |                 cmp.# 00007b         
2392:000 | DONE ins | em  8 16 | 00571c | b0 03       |                 bcs 005721           not lower case, too high
2393:000 | DONE wsp | em  8 16 |        |             |
2394:000 | DONE ins | em  8 16 | 00571e | 18          |                 clc                  just right
2395:000 | DONE ins | em  8 16 | 00571f | 69 e0       |                 adc.# e0             offset to uppercase (wraps)
2396:000 | DONE wsp | em  8 16 |        |             |
2397:000 | DONE lbl | em  8 16 | 005721 |             | dq_case_done                         
2398:000 | DONE cmt | em  8 16 |        |             |                 ; Get rid of the gap between '9' and 'A' so we can treat the
2399:000 | DONE cmt | em  8 16 |        |             |                 ; whole range as one number
2400:000 | DONE ins | em  8 16 | 005721 | 38          |                 sec                  
2401:000 | DONE ins | em  8 16 | 005722 | e9 07       |                 sbc.# 07             fall through to dq_checkbase
2402:000 | DONE wsp | em  8 16 |        |             |
2403:000 | DONE lbl | em  8 16 | 005724 |             | dq_checkbase                         
2404:000 | DONE cmt | em  8 16 |        |             |                 ; We have a number, now see if it inside the range given by BASE
2405:000 | DONE ins | em  8 16 | 005724 | 38          |                 sec                  
2406:000 | DONE ins | em  8 16 | 005725 | e9 30       |                 sbc.# 30             This is also the actual conversion step
2407:000 | DONE ins | em  8 16 | 005727 | c5 16       |                 cmp.d 000016         
2408:000 | DONE ins | em  8 16 | 005729 | 90 0b       |                 bcc 005736           
2409:000 | DONE wsp | em  8 16 |        |             |
2410:000 | DONE lbl | em  8 16 | 00572b |             | dq_notdigit                          
2411:000 | DONE cmt | em  8 16 |        |             |                 ; not a digit, add a false flag
2412:000 | DONE ins | em  8 16 | 00572b | ca          |                 dex                  
2413:000 | DONE ins | em  8 16 | 00572c | ca          |                 dex                  
2414:000 | DONE ins | em  8 16 | 00572d | 94 00       |                 sty.dx 00            keep the offending character in NOS
2415:000 | DONE ins | em  8 16 | 00572f | a0 00 00    |                 ldy.# 0000           
2416:000 | DONE ins | em  8 16 | 005732 | c2 20       |                 rep 20               
2416:001 | DONE ctl | em 16 16 |        |             |         .!a16
2417:000 | DONE ins | em 16 16 | 005734 | 80 09       |                 bra 00573f           
2418:000 | DONE wsp | em 16 16 |        |             |
2419:000 | DONE lbl | em 16 16 | 005736 |             | dq_success                           
2420:000 | DONE ins | em 16 16 | 005736 | ca          |                 dex                  
2421:000 | DONE ins | em 16 16 | 005737 | ca          |                 dex                  
2422:000 | DONE ins | em 16 16 | 005738 | c2 20       |                 rep 20               
2422:001 | DONE ctl | em 16 16 |        |             |         .!a16
2423:000 | DONE ins | em 16 16 | 00573a | 95 00       |                 sta.dx 00            put the number in NOS
2424:000 | DONE ins | em 16 16 | 00573c | a0 ff ff    |                 ldy.# 0ffff          
2425:000 | DONE wsp | em 16 16 |        |             |
2426:000 | DONE lbl | em 16 16 | 00573f |             | z_digitq                             
2426:001 | DONE ins | em 16 16 | 00573f | 60          |                 rts                  
2427:000 | DONE wsp | em 16 16 |        |             |
2428:000 | DONE wsp | em 16 16 |        |             |
2429:000 | DONE cmt | em 16 16 |        |             | ; -------------------------------------------------------------------
2430:000 | DONE cmt | em 16 16 |        |             | ; DPLUS ( d d -- d ) X bytes / X cycles
2431:000 | DONE cmt | em 16 16 |        |             | ; Add two double cell numbers
2432:000 | DONE lbl | em 16 16 | 005740 |             | xt_dplus                             
2433:000 | DONE dir | em 16 16 |        |             |         .!a16                        
2434:000 | DONE ins | em 16 16 | 005740 | 5a          |                 phy                  save hi word of first number, frees Y
2435:000 | DONE ins | em 16 16 | 005741 | b5 00       |                 lda.dx 00            lo word of first number
2436:000 | DONE ins | em 16 16 | 005743 | 18          |                 clc                  
2437:000 | DONE ins | em 16 16 | 005744 | 75 04       |                 adc.dx 04            add lo word of second number
2438:000 | DONE ins | em 16 16 | 005746 | a8          |                 tay                  
2439:000 | DONE wsp | em 16 16 |        |             |
2440:000 | DONE ins | em 16 16 | 005747 | 68          |                 pla                  get hi word of first number
2441:000 | DONE ins | em 16 16 | 005748 | 75 02       |                 adc.dx 02            add hi word of second number
2442:000 | DONE wsp | em 16 16 |        |             |
2443:000 | DONE ins | em 16 16 | 00574a | e8          |                 inx                  
2444:000 | DONE ins | em 16 16 | 00574b | e8          |                 inx                  
2445:000 | DONE ins | em 16 16 | 00574c | e8          |                 inx                  
2446:000 | DONE ins | em 16 16 | 00574d | e8          |                 inx                  
2447:000 | DONE wsp | em 16 16 |        |             |
2448:000 | DONE ins | em 16 16 | 00574e | 94 00       |                 sty.dx 00            lo result goes NOS
2449:000 | DONE ins | em 16 16 | 005750 | a8          |                 tay                  to result goes TOS
2450:000 | DONE wsp | em 16 16 |        |             |
2451:000 | DONE lbl | em 16 16 | 005751 |             | z_dplus                              
2451:001 | DONE ins | em 16 16 | 005751 | 60          |                 rts                  
2452:000 | DONE wsp | em 16 16 |        |             |
2453:000 | DONE cmt | em 16 16 |        |             | ; -------------------------------------------------------------------
2454:000 | DONE cmt | em 16 16 |        |             | ; DMINUS ( d d -- d ) X bytes / X cycles
2455:000 | DONE cmt | em 16 16 |        |             | ; Subtract two double cell numbers
2456:000 | DONE lbl | em 16 16 | 005752 |             | xt_dminus                            
2457:000 | DONE dir | em 16 16 |        |             |         .!a16                        
2458:000 | DONE ins | em 16 16 | 005752 | b5 04       |                 lda.dx 04            lo word NOS
2459:000 | DONE ins | em 16 16 | 005754 | 38          |                 sec                  
2460:000 | DONE ins | em 16 16 | 005755 | f5 00       |                 sbc.dx 00            lo word TOS
2461:000 | DONE ins | em 16 16 | 005757 | 48          |                 pha                  
2462:000 | DONE wsp | em 16 16 |        |             |
2463:000 | DONE ins | em 16 16 | 005758 | 94 00       |                 sty.dx 00            use as temp storage for hi word TOS
2464:000 | DONE ins | em 16 16 | 00575a | b5 02       |                 lda.dx 02            hi word, NOS
2465:000 | DONE ins | em 16 16 | 00575c | f5 00       |                 sbc.dx 00            hi word, TOS
2466:000 | DONE ins | em 16 16 | 00575e | a8          |                 tay                  result hi word now TOS
2467:000 | DONE wsp | em 16 16 |        |             |
2468:000 | DONE ins | em 16 16 | 00575f | e8          |                 inx                  
2469:000 | DONE ins | em 16 16 | 005760 | e8          |                 inx                  
2470:000 | DONE ins | em 16 16 | 005761 | e8          |                 inx                  
2471:000 | DONE ins | em 16 16 | 005762 | e8          |                 inx                  
2472:000 | DONE wsp | em 16 16 |        |             |
2473:000 | DONE ins | em 16 16 | 005763 | 68          |                 pla                  
2474:000 | DONE ins | em 16 16 | 005764 | 95 00       |                 sta.dx 00            result lo word now NOS
2475:000 | DONE wsp | em 16 16 |        |             |
2476:000 | DONE lbl | em 16 16 | 005766 |             | z_dminus                             
2476:001 | DONE ins | em 16 16 | 005766 | 60          |                 rts                  
2477:000 | DONE wsp | em 16 16 |        |             |
2478:000 | DONE wsp | em 16 16 |        |             |
2479:000 | DONE cmt | em 16 16 |        |             | ; -------------------------------------------------------------------
2480:000 | DONE cmt | em 16 16 |        |             | ; D>S ( ud -- u ) X bytes / X cycles
2481:000 | DONE cmt | em 16 16 |        |             | ; Convert double cell number to single cell. Note this currently does not
2482:000 | DONE cmt | em 16 16 |        |             | ; respect the sign, in constrast to Gforth - this is simply DROP
2483:000 | DONE cmt | em 16 16 |        |             | ; TODO make this work the way Gforth's does
2484:000 | DONE lbl | em 16 16 | 005767 |             | xt_dtos                              
2485:000 | DONE dir | em 16 16 |        |             |         .!a16                        
2486:000 | DONE ins | em 16 16 | 005767 | b4 00       |                 ldy.dx 00            
2487:000 | DONE ins | em 16 16 | 005769 | e8          |                 inx                  
2488:000 | DONE ins | em 16 16 | 00576a | e8          |                 inx                  
2489:000 | DONE wsp | em 16 16 |        |             |
2490:000 | DONE lbl | em 16 16 | 00576b |             | z_dtos                               
2490:001 | DONE ins | em 16 16 | 00576b | 60          |                 rts                  
2491:000 | DONE wsp | em 16 16 |        |             |
2492:000 | DONE wsp | em 16 16 |        |             |
2493:000 | DONE cmt | em 16 16 |        |             | ; -------------------------------------------------------------------
2494:000 | DONE cmt | em 16 16 |        |             | ; DABS ( d -- ud ) X bytes / X cycles
2495:000 | DONE cmt | em 16 16 |        |             | ; Return the absolute value of a double number
2496:000 | DONE cmt | em 16 16 |        |             | ; TODO recode in assembler
2497:000 | DONE lbl | em 16 16 | 00576c |             | xt_dabs                              
2498:000 | DONE cmt | em 16 16 |        |             |                 ; double cell is TOS
2499:000 | DONE ins | em 16 16 | 00576c | 98          |                 tya                  force flag test
2500:000 | DONE ins | em 16 16 | 00576d | f0 03       |                 beq 005772           already positive, life is good
2501:000 | DONE wsp | em 16 16 |        |             |
2502:000 | DONE ins | em 16 16 | 00576f | 20 88 57    |                 jsr 005788           
2503:000 | DONE wsp | em 16 16 |        |             |
2504:000 | DONE lbl | em 16 16 | 005772 |             | z_dabs                               
2504:001 | DONE ins | em 16 16 | 005772 | 60          |                 rts                  
2505:000 | DONE wsp | em 16 16 |        |             |
2506:000 | DONE wsp | em 16 16 |        |             |
2507:000 | DONE cmt | em 16 16 |        |             | ; -------------------------------------------------------------------
2508:000 | DONE cmt | em 16 16 |        |             | ; DECIMAL ( -- ) 7 bytes / X cycles
2509:000 | DONE cmt | em 16 16 |        |             | ; Change radix for number conversion to 10
2510:000 | DONE lbl | em 16 16 | 005773 |             | xt_decimal                           
2511:000 | DONE dir | em 16 16 |        |             |         .!a16                        
2512:000 | DONE ins | em 16 16 | 005773 | a9 0a 00    |                 lda.# 000a           
2513:000 | DONE ins | em 16 16 | 005776 | 85 16       |                 sta.d 000016         
2514:000 | DONE wsp | em 16 16 |        |             |
2515:000 | DONE lbl | em 16 16 | 005778 |             | z_decimal                            
2515:001 | DONE ins | em 16 16 | 005778 | 60          |                 rts                  
2516:000 | DONE wsp | em 16 16 |        |             |
2517:000 | DONE wsp | em 16 16 |        |             |
2518:000 | DONE cmt | em 16 16 |        |             | ; -------------------------------------------------------------------
2519:000 | DONE cmt | em 16 16 |        |             | ; DEPTH ( -- u ) 14 bytes / X cycles
2520:000 | DONE cmt | em 16 16 |        |             | ; Push the number of entries in cells (not bytes) on the parameter stack.
2521:000 | DONE cmt | em 16 16 |        |             | ; Assumes X is valid as the DSP.
2522:000 | DONE lbl | em 16 16 | 005779 |             | xt_depth                             
2523:000 | DONE dir | em 16 16 |        |             |         .!a16                        
2524:000 | DONE cmt | em 16 16 |        |             |                 ; We've got zero entries when X is dsp0
2525:000 | DONE ins | em 16 16 | 005779 | 86 22       |                 stx.d 000022         
2526:000 | DONE ins | em 16 16 | 00577b | a9 ff 00    |                 lda.# 0000ff         
2527:000 | DONE ins | em 16 16 | 00577e | 38          |                 sec                  
2528:000 | DONE ins | em 16 16 | 00577f | e5 22       |                 sbc.d 000022         
2529:000 | DONE wsp | em 16 16 |        |             |
2530:000 | DONE cmt | em 16 16 |        |             |                 ; now divide by two because each cells is to bytes long
2531:000 | DONE ins | em 16 16 | 005781 | 4a          |                 lsr.a                
2532:000 | DONE wsp | em 16 16 |        |             |
2533:000 | DONE ins | em 16 16 | 005782 | ca          |                 dex                  
2534:000 | DONE ins | em 16 16 | 005783 | ca          |                 dex                  
2535:000 | DONE ins | em 16 16 | 005784 | 94 00       |                 sty.dx 00            
2536:000 | DONE wsp | em 16 16 |        |             |
2537:000 | DONE cmt | em 16 16 |        |             |                 ; push result to stack
2538:000 | DONE ins | em 16 16 | 005786 | a8          |                 tay                  
2539:000 | DONE wsp | em 16 16 |        |             |
2540:000 | DONE lbl | em 16 16 | 005787 |             | z_depth                              
2540:001 | DONE ins | em 16 16 | 005787 | 60          |                 rts                  
2541:000 | DONE wsp | em 16 16 |        |             |
2542:000 | DONE cmt | em 16 16 |        |             | ; -------------------------------------------------------------------
2543:000 | DONE cmt | em 16 16 |        |             | ; DNEGATE ( d -- d ) 19 bytes / X cycles
2544:000 | DONE cmt | em 16 16 |        |             | ; Change the sign of a double number. This is the double equivalent of NEGATE
2545:000 | DONE lbl | em 16 16 | 005788 |             | xt_dnegate                           
2546:000 | DONE dir | em 16 16 |        |             |         .!a16                        
2547:000 | DONE cmt | em 16 16 |        |             |                 ; start off with LSW (in NOS)
2548:000 | DONE ins | em 16 16 | 005788 | b5 00       |                 lda.dx 00            
2549:000 | DONE ins | em 16 16 | 00578a | 49 ff ff    |                 eor.# 0ffff          
2550:000 | DONE wsp | em 16 16 |        |             |
2551:000 | DONE cmt | em 16 16 |        |             |                 ; INC doesn't affect the carry flag, so we have to do this the
2552:000 | DONE cmt | em 16 16 |        |             |                 ; hard way
2553:000 | DONE ins | em 16 16 | 00578d | 18          |                 clc                  
2554:000 | DONE ins | em 16 16 | 00578e | 69 01 00    |                 adc.# 0001           
2555:000 | DONE ins | em 16 16 | 005791 | 95 00       |                 sta.dx 00            
2556:000 | DONE wsp | em 16 16 |        |             |
2557:000 | DONE cmt | em 16 16 |        |             |                 ; now MSW (in TOS)
2558:000 | DONE ins | em 16 16 | 005793 | 98          |                 tya                  
2559:000 | DONE ins | em 16 16 | 005794 | 49 ff ff    |                 eor.# 0ffff          
2560:000 | DONE ins | em 16 16 | 005797 | 69 00 00    |                 adc.# 0000           we are only interested in the carry
2561:000 | DONE ins | em 16 16 | 00579a | a8          |                 tay                  
2562:000 | DONE wsp | em 16 16 |        |             |
2563:000 | DONE lbl | em 16 16 | 00579b |             | z_dnegate                            
2563:001 | DONE ins | em 16 16 | 00579b | 60          |                 rts                  
2564:000 | DONE wsp | em 16 16 |        |             |
2565:000 | DONE wsp | em 16 16 |        |             |
2566:000 | DONE cmt | em 16 16 |        |             | ; -------------------------------------------------------------------
2567:000 | DONE cmt | em 16 16 |        |             | ; DOES> ( -- ) X bytes / X cycles
2568:000 | DONE cmt | em 16 16 |        |             | ; Create the payload for defining new defining words. See the file
2569:000 | DONE cmt | em 16 16 |        |             | ; docs/create-does.txt and
2570:000 | DONE cmt | em 16 16 |        |             | ; http://www.bradrodriguez.com/papers/moving3.htm for a discussion of
2571:000 | DONE cmt | em 16 16 |        |             | ; DOES>'s internal workings. This uses tmp1 and tmp2
2572:000 | DONE cmt | em 16 16 |        |             | ; TODO see if this creates a correct z_word address
2573:000 | DONE lbl | em 16 16 | 00579c |             | xt_does                              
2574:000 | DONE cmt | em 16 16 |        |             |                 ; compile a subroutine jump to the runtime of DOES>
2575:000 | DONE ins | em 16 16 | 00579c | f4 a9 57    |                 phe.# 0057a9         
2576:000 | DONE ins | em 16 16 | 00579f | 20 46 68    |                 jsr 006846           
2577:000 | DONE wsp | em 16 16 |        |             |
2578:000 | DONE cmt | em 16 16 |        |             |                 ; compile a subroutine jump to DODOES. In traditional terms,
2579:000 | DONE cmt | em 16 16 |        |             |                 ; this is the Code Field Area (CFA) of the new word
2580:000 | DONE ins | em 16 16 | 0057a2 | f4 ce 67    |                 phe.# 0067ce         
2581:000 | DONE ins | em 16 16 | 0057a5 | 20 46 68    |                 jsr 006846           
2582:000 | DONE wsp | em 16 16 |        |             |
2583:000 | DONE lbl | em 16 16 | 0057a8 |             | z_does                               
2583:001 | DONE ins | em 16 16 | 0057a8 | 60          |                 rts                  
2584:000 | DONE wsp | em 16 16 |        |             |
2585:000 | DONE lbl | em 16 16 | 0057a9 |             | does_rt                              
2586:000 | DONE cmt | em 16 16 |        |             |                 ; Runtime portion of DOES>. This replaces the subroutine jump to
2587:000 | DONE cmt | em 16 16 |        |             |                 ; DOVAR that CREATE automatically encodes by a jump to the
2588:000 | DONE cmt | em 16 16 |        |             |                 ; address that contains a subroutine jump to DODOES. We don't
2589:000 | DONE cmt | em 16 16 |        |             |                 ; jump to DODOES directly because we need to work our magic with
2590:000 | DONE cmt | em 16 16 |        |             |                 ; the return addresses
2591:000 | DONE ins | em 16 16 | 0057a9 | 68          |                 pla                  
2592:000 | DONE ins | em 16 16 | 0057aa | 1a          |                 inc.a                increase by one because of RTS mechanics
2593:000 | DONE ins | em 16 16 | 0057ab | 85 1c       |                 sta.d 00001c         
2594:000 | DONE wsp | em 16 16 |        |             |
2595:000 | DONE cmt | em 16 16 |        |             |                 ; CREATE has also already modified the DP to point to the new
2596:000 | DONE cmt | em 16 16 |        |             |                 ; word. We have no idea which instructions followed the CREATE
2597:000 | DONE cmt | em 16 16 |        |             |                 ; command if there is a DOES> so the CP could point anywhere by
2598:000 | DONE cmt | em 16 16 |        |             |                 ; now.
2599:000 | DONE ins | em 16 16 | 0057ad | a5 02       |                 lda.d 000002         
2600:000 | DONE wsp | em 16 16 |        |             |
2601:000 | DONE cmt | em 16 16 |        |             |                 ; The address of the word's xt is four bytes down (see
2602:000 | DONE cmt | em 16 16 |        |             |                 ; header.tasm for details).
2603:000 | DONE ins | em 16 16 | 0057af | 18          |                 clc                  
2604:000 | DONE ins | em 16 16 | 0057b0 | 69 04 00    |                 adc.# 0004           
2605:000 | DONE ins | em 16 16 | 0057b3 | 85 1e       |                 sta.d 00001e         
2606:000 | DONE wsp | em 16 16 |        |             |
2607:000 | DONE cmt | em 16 16 |        |             |                 ; Now we get that address and add one byte to skip over the JSR
2608:000 | DONE cmt | em 16 16 |        |             |                 ; opcode
2609:000 | DONE ins | em 16 16 | 0057b5 | b2 1e       |                 lda.di 00001e        LDA (TMP2)
2610:000 | DONE ins | em 16 16 | 0057b7 | 1a          |                 inc.a                
2611:000 | DONE ins | em 16 16 | 0057b8 | 85 1e       |                 sta.d 00001e         Points to address to be replaced
2612:000 | DONE wsp | em 16 16 |        |             |
2613:000 | DONE cmt | em 16 16 |        |             |                 ; Replace the DOVAR address
2614:000 | DONE ins | em 16 16 | 0057ba | a5 1c       |                 lda.d 00001c         
2615:000 | DONE ins | em 16 16 | 0057bc | 92 1e       |                 sta.di 00001e        STA (TMP2)
2616:000 | DONE wsp | em 16 16 |        |             |
2617:000 | DONE cmt | em 16 16 |        |             |                 ; Since we removed the return address that brought us here, we
2618:000 | DONE cmt | em 16 16 |        |             |                 ; go back to whatever the main routine was. Otherwise, we we
2619:000 | DONE cmt | em 16 16 |        |             |                 ; smash into the subroutine jump to DODOES.
2620:000 | DONE ins | em 16 16 | 0057be | 60          |                 rts                  
2621:000 | DONE wsp | em 16 16 |        |             |
2622:000 | DONE wsp | em 16 16 |        |             |
2623:000 | DONE cmt | em 16 16 |        |             | ; -------------------------------------------------------------------
2624:000 | DONE cmt | em 16 16 |        |             | ; DROP ( n -- ) 4 bytes / 9 cycles
2625:000 | DONE cmt | em 16 16 |        |             | ; Drop first entry on Data Stack
2626:000 | DONE wsp | em 16 16 |        |             |
2627:000 | DONE lbl | em 16 16 | 0057bf |             | xt_drop                              
2628:000 | DONE dir | em 16 16 |        |             |         .!xy16                       
2629:000 | DONE ins | em 16 16 | 0057bf | b4 00       |                 ldy.dx 00            
2630:000 | DONE ins | em 16 16 | 0057c1 | e8          |                 inx                  
2631:000 | DONE ins | em 16 16 | 0057c2 | e8          |                 inx                  
2632:000 | DONE wsp | em 16 16 |        |             |
2633:000 | DONE lbl | em 16 16 | 0057c3 |             | z_drop                               
2633:001 | DONE ins | em 16 16 | 0057c3 | 60          |                 rts                  
2634:000 | DONE wsp | em 16 16 |        |             |
2635:000 | DONE wsp | em 16 16 |        |             |
2636:000 | DONE cmt | em 16 16 |        |             | ; -------------------------------------------------------------------
2637:000 | DONE cmt | em 16 16 |        |             | ; DUMP ( addr u -- ) X bytes / X cycles
2638:000 | DONE cmt | em 16 16 |        |             | ; Print region of memory in a pretty way.
2639:000 | DONE cmt | em 16 16 |        |             | ; TODO This is a crude, temporary version for testing. Rewrite ASAP
2640:000 | DONE lbl | em 16 16 | 0057c4 |             | xt_dump                              
2641:000 | DONE cmt | em 16 16 |        |             |                 ; we use tmp1 as a counter because we need Y for other
2642:000 | DONE cmt | em 16 16 |        |             |                 ; stuff
2643:000 | DONE ins | em 16 16 | 0057c4 | 84 1c       |                 sty.d 00001c         
2644:000 | DONE wsp | em 16 16 |        |             |
2645:000 | DONE lbl | em 16 16 | 0057c6 |             | dump_line_loop                       
2646:000 | DONE ins | em 16 16 | 0057c6 | 20 74 56    |                 jsr 005674           
2647:000 | DONE wsp | em 16 16 |        |             |
2648:000 | DONE cmt | em 16 16 |        |             |                 ; start internal counter for 16 numbers per row
2649:000 | DONE ins | em 16 16 | 0057c9 | a0 10 00    |                 ldy.# 0010           
2650:000 | DONE lbl | em 16 16 | 0057cc |             | dump_byte_loop                       
2651:000 | DONE cmt | em 16 16 |        |             |                 ; if there are zero bytes left to display, we're done
2652:000 | DONE ins | em 16 16 | 0057cc | a5 1c       |                 lda.d 00001c         
2653:000 | DONE ins | em 16 16 | 0057ce | f0 11       |                 beq 0057e1           
2654:000 | DONE wsp | em 16 16 |        |             |
2655:000 | DONE cmt | em 16 16 |        |             |                 ; otherwise, print contents pointed to by address in NOS
2656:000 | DONE ins | em 16 16 | 0057d0 | a1 00       |                 lda.dxi 00           
2657:000 | DONE ins | em 16 16 | 0057d2 | 20 9e 68    |                 jsr 00689e           TODO replace by EMIT
2658:000 | DONE ins | em 16 16 | 0057d5 | 20 72 5d    |                 jsr 005d72           
2659:000 | DONE wsp | em 16 16 |        |             |
2660:000 | DONE cmt | em 16 16 |        |             |                 ; next character
2661:000 | DONE ins | em 16 16 | 0057d8 | f6 00       |                 inc.dx 00            
2662:000 | DONE wsp | em 16 16 |        |             |
2663:000 | DONE cmt | em 16 16 |        |             |                 ; loop counter
2664:000 | DONE ins | em 16 16 | 0057da | c6 1c       |                 dec.d 00001c         
2665:000 | DONE ins | em 16 16 | 0057dc | 88          |                 dey                  
2666:000 | DONE ins | em 16 16 | 0057dd | d0 ed       |                 bne 0057cc           
2667:000 | DONE ins | em 16 16 | 0057df | 80 e5       |                 bra 0057c6           
2668:000 | DONE wsp | em 16 16 |        |             |
2669:000 | DONE lbl | em 16 16 | 0057e1 |             | dump_done                            
2670:000 | DONE ins | em 16 16 | 0057e1 | 20 74 56    |                 jsr 005674           
2671:000 | DONE wsp | em 16 16 |        |             |
2672:000 | DONE cmt | em 16 16 |        |             |                 ; drop everything and return
2673:000 | DONE cmt | em 16 16 |        |             |                 ; TODO replace by call of 2DROP
2674:000 | DONE ins | em 16 16 | 0057e4 | b4 02       |                 ldy.dx 02            
2675:000 | DONE ins | em 16 16 | 0057e6 | e8          |                 inx                  
2676:000 | DONE ins | em 16 16 | 0057e7 | e8          |                 inx                  
2677:000 | DONE ins | em 16 16 | 0057e8 | e8          |                 inx                  
2678:000 | DONE ins | em 16 16 | 0057e9 | e8          |                 inx                  
2679:000 | DONE wsp | em 16 16 |        |             |
2680:000 | DONE lbl | em 16 16 | 0057ea |             | z_dump                               
2680:001 | DONE ins | em 16 16 | 0057ea | 60          |                 rts                  
2681:000 | DONE wsp | em 16 16 |        |             |
2682:000 | DONE wsp | em 16 16 |        |             |
2683:000 | DONE cmt | em 16 16 |        |             | ; -------------------------------------------------------------------
2684:000 | DONE cmt | em 16 16 |        |             | ; DUP  ( n -- n n ) 4 bytes / 9 cycles
2685:000 | DONE cmt | em 16 16 |        |             | ; Duplicate first entry on Data Stack
2686:000 | DONE lbl | em 16 16 | 0057eb |             | xt_dup                               
2687:000 | DONE dir | em 16 16 |        |             |         .!xy16                       
2688:000 | DONE ins | em 16 16 | 0057eb | ca          |                 dex                  
2689:000 | DONE ins | em 16 16 | 0057ec | ca          |                 dex                  
2690:000 | DONE ins | em 16 16 | 0057ed | 94 00       |                 sty.dx 00            
2691:000 | DONE wsp | em 16 16 |        |             |
2692:000 | DONE lbl | em 16 16 | 0057ef |             | z_dup                                
2692:001 | DONE ins | em 16 16 | 0057ef | 60          |                 rts                  
2693:000 | DONE wsp | em 16 16 |        |             |
2694:000 | DONE cmt | em 16 16 |        |             | ; -------------------------------------------------------------------
2695:000 | DONE cmt | em 16 16 |        |             | ; EMIT ( char -- ) X bytes / X cycles
2696:000 | DONE cmt | em 16 16 |        |             | ; Run-time default for EMIT. The user can revector this by changing the value of
2697:000 | DONE cmt | em 16 16 |        |             | ; the OUTPUT variable. We ignore the MSB completely, and do not check to see if
2698:000 | DONE cmt | em 16 16 |        |             | ; we have been given a valid ASCII character. Note that we keep the A register
2699:000 | DONE cmt | em 16 16 |        |             | ; in 16 bit mode all the time - it is up to the kernel routine stored at OUTPUT
2700:000 | DONE cmt | em 16 16 |        |             | ; to deal with that.
2701:000 | DONE lbl | em 16 16 | 0057f0 |             | xt_emit                              
2702:000 | DONE dir | em 16 16 |        |             |         .!a16                        
2703:000 | DONE cmt | em 16 16 |        |             |                 ; we put the value in A so we don't have to switch the XY
2704:000 | DONE cmt | em 16 16 |        |             |                 ; register size
2705:000 | DONE ins | em 16 16 | 0057f0 | 98          |                 tya                  
2706:000 | DONE wsp | em 16 16 |        |             |
2707:000 | DONE cmt | em 16 16 |        |             |                 ; we DROP immediately so we can JMP.I to the output routine and
2708:000 | DONE cmt | em 16 16 |        |             |                 ; can use its RTS to take us back to the caller
2709:000 | DONE ins | em 16 16 | 0057f1 | b4 00       |                 ldy.dx 00            
2710:000 | DONE ins | em 16 16 | 0057f3 | e8          |                 inx                  
2711:000 | DONE ins | em 16 16 | 0057f4 | e8          |                 inx                  
2712:000 | DONE lbl | em 16 16 | 0057f5 |             | emit_a                               
2713:000 | DONE cmt | em 16 16 |        |             |                 ; Lots of times we want to print the character in A without
2714:000 | DONE cmt | em 16 16 |        |             |                 ; fooling around with the Data Stack. EMIT_A assumes a 16 bit
2715:000 | DONE cmt | em 16 16 |        |             |                 ; wide A register with the character in LSB and does not touch
2716:000 | DONE cmt | em 16 16 |        |             |                 ; the Data Stack, but can still be vectored via OUTPUT. Call it
2717:000 | DONE cmt | em 16 16 |        |             |                 ; with JSR as you would XT_EMIT
2718:000 | DONE ins | em 16 16 | 0057f5 | 6c 0e 00    |                 jmp.i 00000e         call to kernel, JSR/RTS
2719:000 | DONE wsp | em 16 16 |        |             |
2720:000 | DONE lbl | em 16 16 | 0057f8 |             | z_emit                               ; never reached
2721:000 | DONE wsp | em 16 16 |        |             |
2722:000 | DONE wsp | em 16 16 |        |             |
2723:000 | DONE cmt | em 16 16 |        |             | ; -------------------------------------------------------------------
2724:000 | DONE cmt | em 16 16 |        |             | ; ERASE ( addr u -- ) X bytes / X cycles
2725:000 | DONE cmt | em 16 16 |        |             | ; Set a region of memory to zero. Uses tmp2
2726:000 | DONE lbl | em 16 16 | 0057f8 |             | xt_erase                             
2727:000 | DONE dir | em 16 16 |        |             |         .!a16                        
2728:000 | DONE ins | em 16 16 | 0057f8 | ca          |                 dex                  
2729:000 | DONE ins | em 16 16 | 0057f9 | ca          |                 dex                  
2730:000 | DONE ins | em 16 16 | 0057fa | 94 00       |                 sty.dx 00            
2731:000 | DONE wsp | em 16 16 |        |             |
2732:000 | DONE ins | em 16 16 | 0057fc | a0 00 00    |                 ldy.# 0000           falls through to FILL
2733:000 | DONE wsp | em 16 16 |        |             |
2734:000 | DONE cmt | em 16 16 |        |             | ; -------------------------------------------------------------------
2735:000 | DONE cmt | em 16 16 |        |             | ; FILL ( addr u b -- ) X bytes / X cycles
2736:000 | DONE cmt | em 16 16 |        |             | ; Fill the given region of memory with the LSB of the TOS. Shares code with
2737:000 | DONE cmt | em 16 16 |        |             | ; ERASE
2738:000 | DONE lbl | em 16 16 | 0057ff |             | xt_fill                              
2739:000 | DONE ins | em 16 16 | 0057ff | b5 02       |                 lda.dx 02            address is 3OS
2740:000 | DONE ins | em 16 16 | 005801 | 85 1e       |                 sta.d 00001e         
2741:000 | DONE wsp | em 16 16 |        |             |
2742:000 | DONE ins | em 16 16 | 005803 | 98          |                 tya                  
2743:000 | DONE ins | em 16 16 | 005804 | b4 00       |                 ldy.dx 00            don't bother with drop, to it later
2744:000 | DONE ins | em 16 16 | 005806 | e2 20       |                 sep 20               
2744:001 | DONE ctl | em  8 16 |        |             |         .!a8
2745:000 | DONE lbl | em  8 16 | 005808 |             | erase_loop                           
2746:000 | DONE ins | em  8 16 | 005808 | 88          |                 dey                  
2747:000 | DONE ins | em  8 16 | 005809 | 30 04       |                 bmi 00580f           
2748:000 | DONE wsp | em  8 16 |        |             |
2749:000 | DONE ins | em  8 16 | 00580b | 91 1e       |                 sta.diy 00001e       
2750:000 | DONE ins | em  8 16 | 00580d | 80 f9       |                 bra 005808           
2751:000 | DONE wsp | em  8 16 |        |             |
2752:000 | DONE lbl | em  8 16 | 00580f |             | erase_done                           
2753:000 | DONE ins | em  8 16 | 00580f | c2 20       |                 rep 20               
2753:001 | DONE ctl | em 16 16 |        |             |         .!a16
2754:000 | DONE ins | em 16 16 | 005811 | b4 02       |                 ldy.dx 02            dump three elements off the sack
2755:000 | DONE ins | em 16 16 | 005813 | 8a          |                 txa                  
2756:000 | DONE ins | em 16 16 | 005814 | 18          |                 clc                  
2757:000 | DONE ins | em 16 16 | 005815 | 69 06 00    |                 adc.# 0006           
2758:000 | DONE ins | em 16 16 | 005818 | aa          |                 tax                  
2759:000 | DONE lbl | em 16 16 | 005819 |             | z_fill                               
2760:000 | DONE lbl | em 16 16 | 005819 |             | z_erase                              
2760:001 | DONE ins | em 16 16 | 005819 | 60          |                 rts                  
2761:000 | DONE wsp | em 16 16 |        |             |
2762:000 | DONE wsp | em 16 16 |        |             |
2763:000 | DONE cmt | em 16 16 |        |             | ; -------------------------------------------------------------------
2764:000 | DONE cmt | em 16 16 |        |             | ; EVALUATE ( addr u -- ) X bytes / X cycles
2765:000 | DONE cmt | em 16 16 |        |             | ; Execute string. Set SOURCE-ID to -1, make addr u the input source,
2766:000 | DONE cmt | em 16 16 |        |             | ; set >IN to zero. After processing the line, revert to old input source.
2767:000 | DONE lbl | em 16 16 | 00581a |             | xt_evaluate                          
2768:000 | DONE cmt | em 16 16 |        |             |                 ; We follow pforth's procedure of pushing SOURCE, SOURCE-ID, and
2769:000 | DONE cmt | em 16 16 |        |             |                 ; >IN to the Return Stack
2770:000 | DONE ins | em 16 16 | 00581a | a5 0c       |                 lda.d 00000c         >IN
2771:000 | DONE ins | em 16 16 | 00581c | 48          |                 pha                  
2772:000 | DONE ins | em 16 16 | 00581d | a5 06       |                 lda.d 000006         Input Source (SOURCE-ID)
2773:000 | DONE ins | em 16 16 | 00581f | 48          |                 pha                  
2774:000 | DONE ins | em 16 16 | 005820 | a5 08       |                 lda.d 000008         
2775:000 | DONE ins | em 16 16 | 005822 | 48          |                 pha                  
2776:000 | DONE ins | em 16 16 | 005823 | a5 0a       |                 lda.d 00000a         
2777:000 | DONE ins | em 16 16 | 005825 | 48          |                 pha                  
2778:000 | DONE wsp | em 16 16 |        |             |
2779:000 | DONE cmt | em 16 16 |        |             |                 ; set SOURCE-ID to -1
2780:000 | DONE ins | em 16 16 | 005826 | a9 ff ff    |                 lda.# 0ffff          
2781:000 | DONE ins | em 16 16 | 005829 | 85 06       |                 sta.d 000006         
2782:000 | DONE wsp | em 16 16 |        |             |
2783:000 | DONE cmt | em 16 16 |        |             |                 ; set >IN to zero
2784:000 | DONE ins | em 16 16 | 00582b | 64 0c       |                 stz.d 00000c         
2785:000 | DONE wsp | em 16 16 |        |             |
2786:000 | DONE cmt | em 16 16 |        |             |                 ; move TOS and NOS to input buffers
2787:000 | DONE ins | em 16 16 | 00582d | 84 0a       |                 sty.d 00000a         
2788:000 | DONE ins | em 16 16 | 00582f | b5 00       |                 lda.dx 00            
2789:000 | DONE ins | em 16 16 | 005831 | 85 08       |                 sta.d 000008         
2790:000 | DONE wsp | em 16 16 |        |             |
2791:000 | DONE cmt | em 16 16 |        |             |                 ; dump address string from stack
2792:000 | DONE ins | em 16 16 | 005833 | b4 02       |                 ldy.dx 02            
2793:000 | DONE ins | em 16 16 | 005835 | e8          |                 inx                  
2794:000 | DONE ins | em 16 16 | 005836 | e8          |                 inx                  
2795:000 | DONE ins | em 16 16 | 005837 | e8          |                 inx                  
2796:000 | DONE ins | em 16 16 | 005838 | e8          |                 inx                  
2797:000 | DONE wsp | em 16 16 |        |             |
2798:000 | DONE ins | em 16 16 | 005839 | 20 e2 67    |                 jsr 0067e2           
2799:000 | DONE wsp | em 16 16 |        |             |
2800:000 | DONE cmt | em 16 16 |        |             |                 ; restore state from before evaluate
2801:000 | DONE ins | em 16 16 | 00583c | 68          |                 pla                  
2802:000 | DONE ins | em 16 16 | 00583d | 85 0a       |                 sta.d 00000a         
2803:000 | DONE ins | em 16 16 | 00583f | 68          |                 pla                  
2804:000 | DONE ins | em 16 16 | 005840 | 85 08       |                 sta.d 000008         
2805:000 | DONE ins | em 16 16 | 005842 | 68          |                 pla                  
2806:000 | DONE ins | em 16 16 | 005843 | 85 06       |                 sta.d 000006         
2807:000 | DONE ins | em 16 16 | 005845 | 68          |                 pla                  
2808:000 | DONE ins | em 16 16 | 005846 | 85 0c       |                 sta.d 00000c         
2809:000 | DONE wsp | em 16 16 |        |             |
2810:000 | DONE lbl | em 16 16 | 005848 |             | z_evaluate                           
2810:001 | DONE ins | em 16 16 | 005848 | 60          |                 rts                  
2811:000 | DONE wsp | em 16 16 |        |             |
2812:000 | DONE wsp | em 16 16 |        |             |
2813:000 | DONE cmt | em 16 16 |        |             | ; -------------------------------------------------------------------
2814:000 | DONE cmt | em 16 16 |        |             | ; EXECUTE ( xt -- ) X bytes / X cycles
2815:000 | DONE cmt | em 16 16 |        |             | ; Run a word with help of its xt on the TOS
2816:000 | DONE wsp | em 16 16 |        |             |
2817:000 | DONE cmt | em 16 16 |        |             | ; Reserve three bytes for the jump - three in case we want to expand to the full
2818:000 | DONE cmt | em 16 16 |        |             | ; range
2819:000 | DONE cmt | em 16 16 |        |             | ; TODO move this to someplace that is assured to be RAM, not possibly ROM
2820:000 | DONE lbl | em 16 16 | 005849 |             | execute_ip                           
2820:001 | DONE dir | em 16 16 | 005849 | (3 bytes)   |         .byte 00, 00, 00             
2820:001 | DONE dir | em 16 16 |        |             |                 00 00 00                 --  . . .
2821:000 | DONE wsp | em 16 16 |        |             |
2822:000 | DONE lbl | em 16 16 | 00584c |             | xt_execute                           
2823:000 | DONE dir | em 16 16 |        |             |         .!a16                        
2824:000 | DONE dir | em 16 16 |        |             |         .!xy16                       
2825:000 | DONE cmt | em 16 16 |        |             |                 ; Store the xt for later use and then drop it off the stack
2826:000 | DONE ins | em 16 16 | 00584c | 8c 49 58    |                 sty 005849           
2827:000 | DONE ins | em 16 16 | 00584f | b4 00       |                 ldy.dx 00            
2828:000 | DONE ins | em 16 16 | 005851 | e8          |                 inx                  
2829:000 | DONE ins | em 16 16 | 005852 | e8          |                 inx                  
2830:000 | DONE wsp | em 16 16 |        |             |
2831:000 | DONE cmt | em 16 16 |        |             |                 ; Only JMP has the addressing mode we need. All our Forth
2832:000 | DONE cmt | em 16 16 |        |             |                 ; words end with a RTS instruction, so they will take us back to
2833:000 | DONE cmt | em 16 16 |        |             |                 ; the original caller of this routine without us having to muck
2834:000 | DONE cmt | em 16 16 |        |             |                 ; about with the Return Stack.
2835:000 | DONE ins | em 16 16 | 005853 | 6c 49 58    |                 jmp.i 005849         JMP (EXECUTE_IP)
2836:000 | DONE wsp | em 16 16 |        |             |
2837:000 | DONE lbl | em 16 16 | 005856 |             | z_execute                            ; empty, no RTS required
2838:000 | DONE wsp | em 16 16 |        |             |
2839:000 | DONE wsp | em 16 16 |        |             |
2840:000 | DONE cmt | em 16 16 |        |             | ; -------------------------------------------------------------------
2841:000 | DONE cmt | em 16 16 |        |             | ; FALSE ( -- f ) 7 bytes / 12 cycles
2842:000 | DONE cmt | em 16 16 |        |             | ; Pushes value $0000 for Forth true on Data Stack. This is the same code as for
2843:000 | DONE cmt | em 16 16 |        |             | ; ZERO, see there. Dictionary entry should have xt_zero/z_zero instead of
2844:000 | DONE cmt | em 16 16 |        |             | ; xt_false/z_false
2845:000 | DONE wsp | em 16 16 |        |             |
2846:000 | DONE wsp | em 16 16 |        |             |
2847:000 | DONE cmt | em 16 16 |        |             | ; -------------------------------------------------------------------
2848:000 | DONE cmt | em 16 16 |        |             | ; FIND ( cs-addr -- addr 0 | xt 1 | xt -1 ) X bytes / X cycles
2849:000 | DONE cmt | em 16 16 |        |             | ; Find word in Dictionary. Included for backwards compatibility, Liara Forth
2850:000 | DONE cmt | em 16 16 |        |             | ; follows Gforth by replacing this with FIND-NAME. Counted string either returns
2851:000 | DONE cmt | em 16 16 |        |             | ; address with a fail flag if not found in the Dictionary, or the xt with a flag
2852:000 | DONE cmt | em 16 16 |        |             | ; to indicate if this is immediate or not. FIND is a wrapper around FIND-NAME.
2853:000 | DONE cmt | em 16 16 |        |             | ; See https://www.complang.tuwien.ac.at/forth/gforth/Docs-html/Word-Lists.html
2854:000 | DONE cmt | em 16 16 |        |             | ; and https://www.complang.tuwien.ac.at/forth/gforth/Docs-html/Name-token.html
2855:000 | DONE cmt | em 16 16 |        |             | ; for better solutions.
2856:000 | DONE lbl | em 16 16 | 005856 |             | xt_find                              
2857:000 | DONE cmt | em 16 16 |        |             |                 ; Convert counted string address to modern format
2858:000 | DONE ins | em 16 16 | 005856 | 20 66 56    |                 jsr 005666           ( addr u )
2859:000 | DONE wsp | em 16 16 |        |             |
2860:000 | DONE cmt | em 16 16 |        |             |                 ; Save address in case the conversion fails
2861:000 | DONE ins | em 16 16 | 005859 | b5 00       |                 lda.dx 00            
2862:000 | DONE ins | em 16 16 | 00585b | 48          |                 pha                  
2863:000 | DONE wsp | em 16 16 |        |             |
2864:000 | DONE ins | em 16 16 | 00585c | 20 87 58    |                 jsr 005887           ( nt | 0 )
2865:000 | DONE wsp | em 16 16 |        |             |
2866:000 | DONE ins | em 16 16 | 00585f | 98          |                 tya                  force flag check
2867:000 | DONE ins | em 16 16 | 005860 | d0 0a       |                 bne 00586c           
2868:000 | DONE wsp | em 16 16 |        |             |
2869:000 | DONE cmt | em 16 16 |        |             |                 ; No word found. Return the address of the string, leaving 0 as
2870:000 | DONE cmt | em 16 16 |        |             |                 ; a false flag TOS
2871:000 | DONE ins | em 16 16 | 005862 | ca          |                 dex                  ( <?> 0 )
2872:000 | DONE ins | em 16 16 | 005863 | ca          |                 dex                  
2873:000 | DONE ins | em 16 16 | 005864 | a0 00 00    |                 ldy.# 0000           
2874:000 | DONE ins | em 16 16 | 005867 | 68          |                 pla                  
2875:000 | DONE ins | em 16 16 | 005868 | 95 00       |                 sta.dx 00            ( addr 0 )
2876:000 | DONE ins | em 16 16 | 00586a | 80 1a       |                 bra 005886           
2877:000 | DONE wsp | em 16 16 |        |             |
2878:000 | DONE lbl | em 16 16 | 00586c |             | find_found                           
2879:000 | DONE cmt | em 16 16 |        |             |                 ; We have a nt. Now we have to convert it to the format that
2880:000 | DONE cmt | em 16 16 |        |             |                 ; FIND wants to return Arrive here with ( nt )
2881:000 | DONE ins | em 16 16 | 00586c | 68          |                 pla                  we won't need the address after all
2882:000 | DONE wsp | em 16 16 |        |             |
2883:000 | DONE cmt | em 16 16 |        |             |                 ; We will need the nt later
2884:000 | DONE ins | em 16 16 | 00586d | 5a          |                 phy                  
2885:000 | DONE wsp | em 16 16 |        |             |
2886:000 | DONE ins | em 16 16 | 00586e | 20 63 5a    |                 jsr 005a63           ( nt -- xt )
2887:000 | DONE ins | em 16 16 | 005871 | ca          |                 dex                  
2888:000 | DONE ins | em 16 16 | 005872 | ca          |                 dex                  
2889:000 | DONE ins | em 16 16 | 005873 | 94 00       |                 sty.dx 00            ( xt <?> )
2890:000 | DONE wsp | em 16 16 |        |             |
2891:000 | DONE cmt | em 16 16 |        |             |                 ; If immediate, return 1 (not: zero), else return -1
2892:000 | DONE ins | em 16 16 | 005875 | 7a          |                 ply                  get nt back
2893:000 | DONE ins | em 16 16 | 005876 | b9 00 00    |                 lda.y 0000           
2894:000 | DONE ins | em 16 16 | 005879 | a0 00 00    |                 ldy.# 0000           prepare flag
2895:000 | DONE wsp | em 16 16 |        |             |
2896:000 | DONE ins | em 16 16 | 00587c | eb          |                 xba                  flags are MSB
2897:000 | DONE ins | em 16 16 | 00587d | 29 02 00    |                 and.# IM             Mask all but IM bit
2898:000 | DONE wsp | em 16 16 |        |             |
2899:000 | DONE ins | em 16 16 | 005880 | d0 03       |                 bne 005885           IMMEDIATE word, return 1
2900:000 | DONE ins | em 16 16 | 005882 | 88          |                 dey                  not emmediate, return -1
2901:000 | DONE ins | em 16 16 | 005883 | 80 01       |                 bra 005886           
2902:000 | DONE wsp | em 16 16 |        |             |
2903:000 | DONE lbl | em 16 16 | 005885 |             | find_imm                             
2904:000 | DONE ins | em 16 16 | 005885 | c8          |                 iny                  
2905:000 | DONE wsp | em 16 16 |        |             |
2906:000 | DONE lbl | em 16 16 | 005886 |             | z_find                               
2906:001 | DONE ins | em 16 16 | 005886 | 60          |                 rts                  
2907:000 | DONE wsp | em 16 16 |        |             |
2908:000 | DONE cmt | em 16 16 |        |             | ; -------------------------------------------------------------------
2909:000 | DONE cmt | em 16 16 |        |             | ; FIND-NAME ( addr u -- nt | 0 ) 91 bytes / X cycles
2910:000 | DONE cmt | em 16 16 |        |             | ; Given a string, find the Name Token (nt) of a word or return zero if the word
2911:000 | DONE cmt | em 16 16 |        |             | ; is not in the dictionary. We use this instead of ancient FIND to look up words
2912:000 | DONE cmt | em 16 16 |        |             | ; in the Dictionary passed by PARSE-NAME. Note this returns the nt, not the xt
2913:000 | DONE cmt | em 16 16 |        |             | ; of a word like FIND. To convert, use NAME>INT. This is a Gforth word. See
2914:000 | DONE cmt | em 16 16 |        |             | ; https://www.complang.tuwien.ac.at/forth/gforth/Docs-html/Name-token.html
2915:000 | DONE cmt | em 16 16 |        |             | ; FIND calls this word for the hard word
2916:000 | DONE lbl | em 16 16 | 005887 |             | xt_find-name                         
2917:000 | DONE cmt | em 16 16 |        |             |                 ; We abort when we get an empty string, that is, one with
2918:000 | DONE cmt | em 16 16 |        |             |                 ; a length of zero TOS. We could test for this, but it will
2919:000 | DONE cmt | em 16 16 |        |             |                 ; happen so rarely that the speed penalty is higher if we run
2920:000 | DONE cmt | em 16 16 |        |             |                 ; the test for every single call. Looking for an empty string
2921:000 | DONE cmt | em 16 16 |        |             |                 ; does force us to check the whole dictionary, though. The test
2922:000 | DONE cmt | em 16 16 |        |             |                 ; would be 3 bytes and 4 to 6 cycles longer:
2923:000 | DONE cmt | em 16 16 |        |             |                 ;       tya                     ; force flag check
2924:000 | DONE cmt | em 16 16 |        |             |                 ;       beq find-name_failure
2925:000 | DONE dir | em 16 16 |        |             |         .!a16                        
2926:000 | DONE dir | em 16 16 |        |             |         .!xy16                       
2927:000 | DONE cmt | em 16 16 |        |             |                 ; set up loop for the first time
2928:000 | DONE ins | em 16 16 | 005887 | 84 24       |                 sty.d 000024         length of mystery string in tmptos, Y now free
2929:000 | DONE wsp | em 16 16 |        |             |
2930:000 | DONE ins | em 16 16 | 005889 | a4 02       |                 ldy.d 000002         
2931:000 | DONE ins | em 16 16 | 00588b | 84 1c       |                 sty.d 00001c         nt of first Dictionary word
2932:000 | DONE wsp | em 16 16 |        |             |
2933:000 | DONE ins | em 16 16 | 00588d | b4 00       |                 ldy.dx 00            
2934:000 | DONE ins | em 16 16 | 00588f | 84 1e       |                 sty.d 00001e         address of mystery string, was NOS
2935:000 | DONE wsp | em 16 16 |        |             |
2936:000 | DONE lbl | em 16 16 | 005891 |             | find-name_loop                       
2937:000 | DONE cmt | em 16 16 |        |             |                 ; First quick test: Are strings the same length?
2938:000 | DONE ins | em 16 16 | 005891 | b2 1c       |                 lda.di 00001c        LSB in first header word is length
2939:000 | DONE ins | em 16 16 | 005893 | 29 ff 00    |                 and.# 00ff           
2940:000 | DONE ins | em 16 16 | 005896 | c5 24       |                 cmp.d 000024         we test LSB
2941:000 | DONE cmt | em 16 16 |        |             |                 ; Most of the time, it will not be the same, so we save one
2942:000 | DONE cmt | em 16 16 |        |             |                 ; cycle pro loop if we only take the branch when they are the
2943:000 | DONE cmt | em 16 16 |        |             |                 ; same
2944:000 | DONE ins | em 16 16 | 005898 | f0 0c       |                 beq 0058a6           
2945:000 | DONE wsp | em 16 16 |        |             |
2946:000 | DONE lbl | em 16 16 | 00589a |             | find-name_next_entry                 
2947:000 | DONE cmt | em 16 16 |        |             |                 ; next header address is two bytes down
2948:000 | DONE ins | em 16 16 | 00589a | e6 1c       |                 inc.d 00001c         
2949:000 | DONE ins | em 16 16 | 00589c | e6 1c       |                 inc.d 00001c         
2950:000 | DONE ins | em 16 16 | 00589e | b2 1c       |                 lda.di 00001c        LDA (TMP1)
2951:000 | DONE wsp | em 16 16 |        |             |
2952:000 | DONE cmt | em 16 16 |        |             |                 ; a zero entry marks the end of the Dictionary
2953:000 | DONE ins | em 16 16 | 0058a0 | f0 36       |                 beq 0058d8           
2954:000 | DONE wsp | em 16 16 |        |             |
2955:000 | DONE ins | em 16 16 | 0058a2 | 85 1c       |                 sta.d 00001c         new header
2956:000 | DONE ins | em 16 16 | 0058a4 | 80 eb       |                 bra 005891           
2957:000 | DONE wsp | em 16 16 |        |             |
2958:000 | DONE lbl | em 16 16 | 0058a6 |             | find-name_chars                      
2959:000 | DONE cmt | em 16 16 |        |             |                 ; Yes, same length, so we compare characters
2960:000 | DONE wsp | em 16 16 |        |             |
2961:000 | DONE cmt | em 16 16 |        |             |                 ; Switch A to 8 bit for this
2962:000 | DONE ins | em 16 16 | 0058a6 | e2 20       |                 sep 20               
2962:001 | DONE ctl | em  8 16 |        |             |         .!a8
2963:000 | DONE cmt | em  8 16 |        |             |                 ; Second quick test: Check first char, which is 8 bytes into the
2964:000 | DONE cmt | em  8 16 |        |             |                 ; header
2965:000 | DONE ins | em  8 16 | 0058a8 | a0 08 00    |                 ldy.# 0008           
2966:000 | DONE ins | em  8 16 | 0058ab | b1 1c       |                 lda.diy 00001c       LDA (TMP1),Y - first char of entry
2967:000 | DONE ins | em  8 16 | 0058ad | d2 1e       |                 cmp.di 00001e        CMP (TMP2) - first char of mystery string
2968:000 | DONE ins | em  8 16 | 0058af | f0 04       |                 beq 0058b5           
2969:000 | DONE wsp | em  8 16 |        |             |
2970:000 | DONE lbl | em  8 16 | 0058b1 |             | find-name_char_nomatcnt_8            
2971:000 | DONE cmt | em  8 16 |        |             |                 ; First char is not the same, next entry
2972:000 | DONE ins | em  8 16 | 0058b1 | c2 20       |                 rep 20               
2972:001 | DONE ctl | em 16 16 |        |             |         .!a16
2973:000 | DONE ins | em 16 16 | 0058b3 | 80 e5       |                 bra 00589a           
2974:000 | DONE wsp | em 16 16 |        |             |
2975:000 | DONE lbl | em 16 16 | 0058b5 |             | find-name_all_chars                  
2976:000 | DONE dir | em  8 16 |        |             |         .!a8                         
2977:000 | DONE cmt | em  8 16 |        |             |                 ; String length is the same, and the first character is the
2978:000 | DONE cmt | em  8 16 |        |             |                 ; same. If the word is only one character long, we're done
2979:000 | DONE ins | em  8 16 | 0058b5 | a4 24       |                 ldy.d 000024         
2980:000 | DONE ins | em  8 16 | 0058b7 | 88          |                 dey                  faster and shorter than CPY.# 01
2981:000 | DONE ins | em  8 16 | 0058b8 | f0 18       |                 beq 0058d2           
2982:000 | DONE wsp | em  8 16 |        |             |
2983:000 | DONE cmt | em  8 16 |        |             |                 ; No such luck: The strings are the same length and the first
2984:000 | DONE cmt | em  8 16 |        |             |                 ; char is the same, but the word is more than one char long. So
2985:000 | DONE cmt | em  8 16 |        |             |                 ; we suck it up and compare every single character. We go from
2986:000 | DONE cmt | em  8 16 |        |             |                 ; back to front, because words like CELLS and CELL+ would take
2987:000 | DONE cmt | em  8 16 |        |             |                 ; longer otherwise. We can also shorten the loop by one because
2988:000 | DONE cmt | em  8 16 |        |             |                 ; we've already compared the first char.
2989:000 | DONE wsp | em  8 16 |        |             |
2990:000 | DONE cmt | em  8 16 |        |             |                 ; Even worse, we have to add 8 bytes to address of Dictionary
2991:000 | DONE cmt | em  8 16 |        |             |                 ; string to allow testing with one loop. We need this like
2992:000 | DONE cmt | em  8 16 |        |             |                 ; a hole in the head because we just switched A to 8 bit.
2993:000 | DONE cmt | em  8 16 |        |             |                 ; However, staying with an 8-bit A is even slower.
2994:000 | DONE ins | em  8 16 | 0058ba | c2 20       |                 rep 20               
2994:001 | DONE ctl | em 16 16 |        |             |         .!a16
2995:000 | DONE ins | em 16 16 | 0058bc | a5 1c       |                 lda.d 00001c         address of Dictionary string
2996:000 | DONE ins | em 16 16 | 0058be | 18          |                 clc                  
2997:000 | DONE ins | em 16 16 | 0058bf | 69 08 00    |                 adc.# 0008           
2998:000 | DONE ins | em 16 16 | 0058c2 | 85 20       |                 sta.d 000020         
2999:000 | DONE ins | em 16 16 | 0058c4 | e2 20       |                 sep 20               
2999:001 | DONE ctl | em  8 16 |        |             |         .!a8
3000:000 | DONE ins | em  8 16 | 0058c6 | a4 24       |                 ldy.d 000024         get length of strings as loop index
3001:000 | DONE ins | em  8 16 | 0058c8 | 88          |                 dey                  first index is length minus 1
3002:000 | DONE wsp | em  8 16 |        |             |
3003:000 | DONE lbl | em  8 16 | 0058c9 |             | @                                    
3004:000 | DONE ins | em  8 16 | 0058c9 | b1 1e       |                 lda.diy 00001e       LDA (TMP2),Y - last char of mystery string
3005:000 | DONE ins | em  8 16 | 0058cb | d1 20       |                 cmp.diy 000020       CMP (TMP1),Y - last char of DP string
3006:000 | DONE ins | em  8 16 | 0058cd | d0 e2       |                 bne 0058b1           
3007:000 | DONE ins | em  8 16 | 0058cf | 88          |                 dey                  start of string (Y=0) was already tested
3008:000 | DONE ins | em  8 16 | 0058d0 | d0 f7       |                 bne 0058c9           
3009:000 | DONE wsp | em  8 16 |        |             |
3010:000 | DONE lbl | em  8 16 | 0058d2 |             | find-name_success                    
3011:000 | DONE cmt | em  8 16 |        |             |                 ; If we reach here, the strings are the same and we have a match
3012:000 | DONE cmt | em  8 16 |        |             |                 ; We get here with an 8 bit A
3013:000 | DONE ins | em  8 16 | 0058d2 | c2 20       |                 rep 20               
3013:001 | DONE ctl | em 16 16 |        |             |         .!a16
3014:000 | DONE ins | em 16 16 | 0058d4 | a4 1c       |                 ldy.d 00001c         get the correct DP
3015:000 | DONE ins | em 16 16 | 0058d6 | 80 03       |                 bra 0058db           
3016:000 | DONE wsp | em 16 16 |        |             |
3017:000 | DONE wsp | em 16 16 |        |             |
3018:000 | DONE lbl | em 16 16 | 0058d8 |             | find-name_failure_16                 
3019:000 | DONE cmt | em 16 16 |        |             |                 ; Word not found in Dictionary, return zero. Assumes A is 16
3020:000 | DONE cmt | em 16 16 |        |             |                 ; bit
3021:000 | DONE ins | em 16 16 | 0058d8 | a0 00 00    |                 ldy.# 0000           fall thru
3022:000 | DONE wsp | em 16 16 |        |             |
3023:000 | DONE lbl | em 16 16 | 0058db |             | find-name_done                       
3024:000 | DONE ins | em 16 16 | 0058db | e8          |                 inx                  drop old address (NIP)
3025:000 | DONE ins | em 16 16 | 0058dc | e8          |                 inx                  
3026:000 | DONE wsp | em 16 16 |        |             |
3027:000 | DONE lbl | em 16 16 | 0058dd |             | z_find-name                          
3027:001 | DONE ins | em 16 16 | 0058dd | 60          |                 rts                  
3028:000 | DONE wsp | em 16 16 |        |             |
3029:000 | DONE wsp | em 16 16 |        |             |
3030:000 | DONE cmt | em 16 16 |        |             | ; -------------------------------------------------------------------
3031:000 | DONE cmt | em 16 16 |        |             | ; FM/MOD ( d n1 -- n2 n3 ) X bytes / X cycles
3032:000 | DONE cmt | em 16 16 |        |             | ; Floored division, compare with SM/REM. We define FM/MOD in terms of UM/MOD,
3033:000 | DONE cmt | em 16 16 |        |             | ; see http://git.savannah.gnu.org/cgit/gforth.git/tree/prim We prefer to use
3034:000 | DONE cmt | em 16 16 |        |             | ; SM/REM for further words. You could also define FM/MOD in Terms of SM/REM,
3035:000 | DONE cmt | em 16 16 |        |             | ; see http://www.figuk.plus.com/build/arith.htm
3036:000 | DONE cmt | em 16 16 |        |             | ; Original Forth: DUP >R DUP 0< IF NEGATE >R DNEGATE R> THEN >R DUP 0< R@ AND +
3037:000 | DONE cmt | em 16 16 |        |             | ; R> UM/MOD R> 0< IF SWAP NEGATE SWAP THEN ;
3038:000 | DONE cmt | em 16 16 |        |             | ; TODO this is just a 1:1 list of jumps, optimize once it is working
3039:000 | DONE lbl | em 16 16 | 0058de |             | xt_fmmod                             
3040:000 | DONE ins | em 16 16 | 0058de | 20 eb 57    |                 jsr 0057eb           
3041:000 | DONE ins | em 16 16 | 0058e1 | 20 bb 51    |                 jsr 0051bb           
3042:000 | DONE ins | em 16 16 | 0058e4 | 20 eb 57    |                 jsr 0057eb           
3043:000 | DONE wsp | em 16 16 |        |             |
3044:000 | DONE ins | em 16 16 | 0058e7 | 98          |                 tya                  0< IF
3045:000 | DONE ins | em 16 16 | 0058e8 | 10 12       |                 bpl 0058fc           
3046:000 | DONE wsp | em 16 16 |        |             |
3047:000 | DONE ins | em 16 16 | 0058ea | b4 00       |                 ldy.dx 00            
3048:000 | DONE ins | em 16 16 | 0058ec | e8          |                 inx                  
3049:000 | DONE ins | em 16 16 | 0058ed | e8          |                 inx                  
3050:000 | DONE wsp | em 16 16 |        |             |
3051:000 | DONE ins | em 16 16 | 0058ee | 20 86 5a    |                 jsr 005a86           
3052:000 | DONE ins | em 16 16 | 0058f1 | 20 bb 51    |                 jsr 0051bb           
3053:000 | DONE ins | em 16 16 | 0058f4 | 20 88 57    |                 jsr 005788           
3054:000 | DONE ins | em 16 16 | 0058f7 | 20 02 5c    |                 jsr 005c02           
3055:000 | DONE wsp | em 16 16 |        |             |
3056:000 | DONE ins | em 16 16 | 0058fa | 80 04       |                 bra 005900           
3057:000 | DONE lbl | em 16 16 | 0058fc |             | fmmod_1                              
3058:000 | DONE ins | em 16 16 | 0058fc | b4 00       |                 ldy.dx 00            
3059:000 | DONE ins | em 16 16 | 0058fe | e8          |                 inx                  
3060:000 | DONE ins | em 16 16 | 0058ff | e8          |                 inx                  
3061:000 | DONE lbl | em 16 16 | 005900 |             | fmmod_1_1                            
3062:000 | DONE ins | em 16 16 | 005900 | 20 bb 51    |                 jsr 0051bb           
3063:000 | DONE ins | em 16 16 | 005903 | 20 eb 57    |                 jsr 0057eb           
3064:000 | DONE ins | em 16 16 | 005906 | 20 47 53    |                 jsr 005347           
3065:000 | DONE ins | em 16 16 | 005909 | 20 f9 5b    |                 jsr 005bf9           
3066:000 | DONE ins | em 16 16 | 00590c | 20 24 55    |                 jsr 005524           
3067:000 | DONE ins | em 16 16 | 00590f | 20 f4 52    |                 jsr 0052f4           
3068:000 | DONE ins | em 16 16 | 005912 | 20 02 5c    |                 jsr 005c02           
3069:000 | DONE ins | em 16 16 | 005915 | 20 5a 5e    |                 jsr 005e5a           
3070:000 | DONE ins | em 16 16 | 005918 | 20 02 5c    |                 jsr 005c02           
3071:000 | DONE wsp | em 16 16 |        |             |
3072:000 | DONE ins | em 16 16 | 00591b | 98          |                 tya                  
3073:000 | DONE ins | em 16 16 | 00591c | 10 0f       |                 bpl 00592d           
3074:000 | DONE wsp | em 16 16 |        |             |
3075:000 | DONE ins | em 16 16 | 00591e | b4 00       |                 ldy.dx 00            
3076:000 | DONE ins | em 16 16 | 005920 | e8          |                 inx                  
3077:000 | DONE ins | em 16 16 | 005921 | e8          |                 inx                  
3078:000 | DONE wsp | em 16 16 |        |             |
3079:000 | DONE ins | em 16 16 | 005922 | 20 95 5d    |                 jsr 005d95           
3080:000 | DONE ins | em 16 16 | 005925 | 20 86 5a    |                 jsr 005a86           
3081:000 | DONE ins | em 16 16 | 005928 | 20 95 5d    |                 jsr 005d95           
3082:000 | DONE wsp | em 16 16 |        |             |
3083:000 | DONE ins | em 16 16 | 00592b | 80 04       |                 bra 005931           
3084:000 | DONE lbl | em 16 16 | 00592d |             | fmmod_2                              
3085:000 | DONE wsp | em 16 16 |        |             |
3086:000 | DONE ins | em 16 16 | 00592d | b4 00       |                 ldy.dx 00            
3087:000 | DONE ins | em 16 16 | 00592f | e8          |                 inx                  
3088:000 | DONE ins | em 16 16 | 005930 | e8          |                 inx                  
3089:000 | DONE wsp | em 16 16 |        |             |
3090:000 | DONE lbl | em 16 16 | 005931 |             | fmmod_2_1                            
3091:000 | DONE wsp | em 16 16 |        |             |
3092:000 | DONE lbl | em 16 16 | 005931 |             | z_fmmod                              
3092:001 | DONE ins | em 16 16 | 005931 | 60          |                 rts                  
3093:000 | DONE wsp | em 16 16 |        |             |
3094:000 | DONE wsp | em 16 16 |        |             |
3095:000 | DONE cmt | em 16 16 |        |             | ; -------------------------------------------------------------------
3096:000 | DONE cmt | em 16 16 |        |             | ; KEY ( -- char ) X bytes / X cycles
3097:000 | DONE cmt | em 16 16 |        |             | ; Get one character from the input, without echoing.
3098:000 | DONE lbl | em 16 16 | 005932 |             | xt_key                               
3099:000 | DONE dir | em 16 16 |        |             |         .!a16                        
3100:000 | DONE wsp | em 16 16 |        |             |
3101:000 | DONE ins | em 16 16 | 005932 | ca          |                 dex                  make room on Data Stack
3102:000 | DONE ins | em 16 16 | 005933 | ca          |                 dex                  
3103:000 | DONE ins | em 16 16 | 005934 | b4 00       |                 ldy.dx 00            
3104:000 | DONE wsp | em 16 16 |        |             |
3105:000 | DONE cmt | em 16 16 |        |             |                 ; There is no "jsr.i" instruction, so we have to do this the
3106:000 | DONE cmt | em 16 16 |        |             |                 ; hard way
3107:000 | DONE ins | em 16 16 | 005936 | 86 22       |                 stx.d 000022         
3108:000 | DONE ins | em 16 16 | 005938 | a2 00 00    |                 ldx.# 0000           
3109:000 | DONE ins | em 16 16 | 00593b | fc 10 00    |                 jsr.xi 000010        JSR (INPUT,X) - returns char in A
3110:000 | DONE ins | em 16 16 | 00593e | a6 22       |                 ldx.d 000022         
3111:000 | DONE wsp | em 16 16 |        |             |
3112:000 | DONE ins | em 16 16 | 005940 | a8          |                 tay                  
3113:000 | DONE wsp | em 16 16 |        |             |
3114:000 | DONE lbl | em 16 16 | 005941 |             | z_key                                ; never reached
3115:000 | DONE wsp | em 16 16 |        |             |
3116:000 | DONE wsp | em 16 16 |        |             |
3117:000 | DONE cmt | em 16 16 |        |             | ; -------------------------------------------------------------------
3118:000 | DONE cmt | em 16 16 |        |             | ; IMMEDIATE ( -- ) X bytes / X cycles
3119:000 | DONE cmt | em 16 16 |        |             | ; Mark the most recently defined word as IMMEDIATE. Will only affect the last
3120:000 | DONE cmt | em 16 16 |        |             | ; word in the Dictionary. If the words is still in ROM for some reason, this
3121:000 | DONE cmt | em 16 16 |        |             | ; will have no effect and will fail without an error message
3122:000 | DONE lbl | em 16 16 | 005941 |             | xt_immediate                         
3123:000 | DONE dir | em 16 16 |        |             |         .!a16                        
3124:000 | DONE ins | em 16 16 | 005941 | a9 02 00    |                 lda.# IM             Immediate flag
3125:000 | DONE ins | em 16 16 | 005944 | eb          |                 xba                  flags are MSB
3126:000 | DONE ins | em 16 16 | 005945 | 12 02       |                 ora.di 000002        ORA (DP)
3127:000 | DONE ins | em 16 16 | 005947 | 92 02       |                 sta.di 000002        
3128:000 | DONE wsp | em 16 16 |        |             |
3129:000 | DONE lbl | em 16 16 | 005949 |             | z_immediate                          
3129:001 | DONE ins | em 16 16 | 005949 | 60          |                 rts                  
3130:000 | DONE wsp | em 16 16 |        |             |
3131:000 | DONE wsp | em 16 16 |        |             |
3132:000 | DONE cmt | em 16 16 |        |             | ; -------------------------------------------------------------------
3133:000 | DONE cmt | em 16 16 |        |             | ; INPUT ( -- addr ) X bytes / X cycles
3134:000 | DONE cmt | em 16 16 |        |             | ; Return the address where the jump targeet for KEY is stored
3135:000 | DONE lbl | em 16 16 | 00594a |             | xt_input                             
3136:000 | DONE ins | em 16 16 | 00594a | ca          |                 dex                  
3137:000 | DONE ins | em 16 16 | 00594b | ca          |                 dex                  
3138:000 | DONE ins | em 16 16 | 00594c | 94 00       |                 sty.dx 00            
3139:000 | DONE wsp | em 16 16 |        |             |
3140:000 | DONE ins | em 16 16 | 00594e | a0 10 00    |                 ldy.# 000010         
3141:000 | DONE wsp | em 16 16 |        |             |
3142:000 | DONE lbl | em 16 16 | 005951 |             | z_input                              
3142:001 | DONE ins | em 16 16 | 005951 | 60          |                 rts                  
3143:000 | DONE wsp | em 16 16 |        |             |
3144:000 | DONE wsp | em 16 16 |        |             |
3145:000 | DONE cmt | em 16 16 |        |             | ; -------------------------------------------------------------------
3146:000 | DONE cmt | em 16 16 |        |             | ; INT>NAME ( xt -- nt ) X bytes / X cycles
3147:000 | DONE cmt | em 16 16 |        |             | ; Given an execution token (xt), return the name token (nt). This is called
3148:000 | DONE cmt | em 16 16 |        |             | ; >NAME in Gforth, but changed to INT>NAME for Liara to fit better with
3149:000 | DONE cmt | em 16 16 |        |             | ; NAME>INT.
3150:000 | DONE lbl | em 16 16 | 005952 |             | xt_int-name                          
3151:000 | DONE cmt | em 16 16 |        |             |                 ; Unfortunately, to find the header, we have to walk through the
3152:000 | DONE cmt | em 16 16 |        |             |                 ; dictionary
3153:000 | DONE ins | em 16 16 | 005952 | a5 02       |                 lda.d 000002         nt of first Dictionary word
3154:000 | DONE ins | em 16 16 | 005954 | 85 1c       |                 sta.d 00001c         
3155:000 | DONE wsp | em 16 16 |        |             |
3156:000 | DONE ins | em 16 16 | 005956 | 84 24       |                 sty.d 000024         xt of mystery word
3157:000 | DONE ins | em 16 16 | 005958 | a0 04 00    |                 ldy.# 0004           xt in header is two bytes down
3158:000 | DONE wsp | em 16 16 |        |             |
3159:000 | DONE lbl | em 16 16 | 00595b |             | in_loop                              
3160:000 | DONE ins | em 16 16 | 00595b | b1 1c       |                 lda.diy 00001c       LDA (TMP1),Y - get xt of current nt
3161:000 | DONE ins | em 16 16 | 00595d | c5 24       |                 cmp.d 000024         
3162:000 | DONE ins | em 16 16 | 00595f | f0 12       |                 beq 005973           
3163:000 | DONE wsp | em 16 16 |        |             |
3164:000 | DONE cmt | em 16 16 |        |             |                 ; no joy, next header address is two bytes down
3165:000 | DONE ins | em 16 16 | 005961 | e6 1c       |                 inc.d 00001c         
3166:000 | DONE ins | em 16 16 | 005963 | e6 1c       |                 inc.d 00001c         
3167:000 | DONE ins | em 16 16 | 005965 | b2 1c       |                 lda.di 00001c        LDA (TMP1)
3168:000 | DONE wsp | em 16 16 |        |             |
3169:000 | DONE cmt | em 16 16 |        |             |                 ; a zero entry marks the end of the Dictionary
3170:000 | DONE ins | em 16 16 | 005967 | f0 04       |                 beq 00596d           
3171:000 | DONE wsp | em 16 16 |        |             |
3172:000 | DONE ins | em 16 16 | 005969 | 85 1c       |                 sta.d 00001c         new header
3173:000 | DONE ins | em 16 16 | 00596b | 80 ee       |                 bra 00595b           
3174:000 | DONE wsp | em 16 16 |        |             |
3175:000 | DONE lbl | em 16 16 | 00596d |             | in_notfound                          
3176:000 | DONE ins | em 16 16 | 00596d | a9 f1 6f    |                 lda.# 006ff1         
3177:000 | DONE ins | em 16 16 | 005970 | 4c 67 68    |                 jmp 006867           
3178:000 | DONE wsp | em 16 16 |        |             |
3179:000 | DONE lbl | em 16 16 | 005973 |             | in_found                             
3180:000 | DONE ins | em 16 16 | 005973 | a4 1c       |                 ldy.d 00001c         replace xt by nt
3181:000 | DONE lbl | em 16 16 | 005975 |             | z_int-name                           
3181:001 | DONE ins | em 16 16 | 005975 | 60          |                 rts                  
3182:000 | DONE wsp | em 16 16 |        |             |
3183:000 | DONE wsp | em 16 16 |        |             |
3184:000 | DONE cmt | em 16 16 |        |             | ; -------------------------------------------------------------------
3185:000 | DONE cmt | em 16 16 |        |             | ; INVERT ( n -- n ) 5 bytes / X cycles
3186:000 | DONE cmt | em 16 16 |        |             | ; Complement of TOS
3187:000 | DONE lbl | em 16 16 | 005976 |             | xt_invert                            
3188:000 | DONE dir | em 16 16 |        |             |         .!a16                        
3189:000 | DONE ins | em 16 16 | 005976 | 98          |                 tya                  
3190:000 | DONE ins | em 16 16 | 005977 | 49 ff ff    |                 eor.# 0ffff          
3191:000 | DONE ins | em 16 16 | 00597a | a8          |                 tay                  
3192:000 | DONE wsp | em 16 16 |        |             |
3193:000 | DONE lbl | em 16 16 | 00597b |             | z_invert                             
3193:001 | DONE ins | em 16 16 | 00597b | 60          |                 rts                  
3194:000 | DONE wsp | em 16 16 |        |             |
3195:000 | DONE wsp | em 16 16 |        |             |
3196:000 | DONE cmt | em 16 16 |        |             | ; -------------------------------------------------------------------
3197:000 | DONE cmt | em 16 16 |        |             | ; HERE ( -- u ) 6 bytes / 13 cycles
3198:000 | DONE cmt | em 16 16 |        |             | ; Push Compiler Pointer address on the Data Stack
3199:000 | DONE lbl | em 16 16 | 00597c |             | xt_here                              
3200:000 | DONE dir | em 16 16 |        |             |         .!xy16                       
3201:000 | DONE ins | em 16 16 | 00597c | ca          |                 dex                  
3202:000 | DONE ins | em 16 16 | 00597d | ca          |                 dex                  
3203:000 | DONE ins | em 16 16 | 00597e | 94 00       |                 sty.dx 00            
3204:000 | DONE wsp | em 16 16 |        |             |
3205:000 | DONE ins | em 16 16 | 005980 | a4 00       |                 ldy.d 000000         
3206:000 | DONE wsp | em 16 16 |        |             |
3207:000 | DONE lbl | em 16 16 | 005982 |             | z_here                               
3207:001 | DONE ins | em 16 16 | 005982 | 60          |                 rts                  
3208:000 | DONE wsp | em 16 16 |        |             |
3209:000 | DONE cmt | em 16 16 |        |             | ; -------------------------------------------------------------------
3210:000 | DONE cmt | em 16 16 |        |             | ; HEX ( -- ) X bytes / X cycles
3211:000 | DONE cmt | em 16 16 |        |             | ; Change radix for number conversion to 16
3212:000 | DONE lbl | em 16 16 | 005983 |             | xt_hex                               
3213:000 | DONE dir | em 16 16 |        |             |         .!a16                        
3214:000 | DONE ins | em 16 16 | 005983 | a9 10 00    |                 lda.# 0010           
3215:000 | DONE ins | em 16 16 | 005986 | 85 16       |                 sta.d 000016         
3216:000 | DONE wsp | em 16 16 |        |             |
3217:000 | DONE lbl | em 16 16 | 005988 |             | z_hex                                
3217:001 | DONE ins | em 16 16 | 005988 | 60          |                 rts                  
3218:000 | DONE wsp | em 16 16 |        |             |
3219:000 | DONE cmt | em 16 16 |        |             | ; -------------------------------------------------------------------
3220:000 | DONE cmt | em 16 16 |        |             | ; HOLD ( char -- ) X bytes / X cycles
3221:000 | DONE cmt | em 16 16 |        |             | ; Insert a character at the current position of a pictured numeric output string
3222:000 | DONE cmt | em 16 16 |        |             | ; Code based on https://github.com/philburk/pforth/blob/master/fth/numberio.fth
3223:000 | DONE cmt | em 16 16 |        |             | ; Forth code is : HOLD  -1 HLD +!  HLD @ C! ;  We use the the internal variable
3224:000 | DONE cmt | em 16 16 |        |             | ; tohold instead of HLD.
3225:000 | DONE lbl | em 16 16 | 005989 |             | xt_hold                              
3226:000 | DONE dir | em 16 16 |        |             |         .!a16                        
3227:000 | DONE ins | em 16 16 | 005989 | c6 18       |                 dec.d 000018         -1 HLD +!
3228:000 | DONE wsp | em 16 16 |        |             |
3229:000 | DONE ins | em 16 16 | 00598b | 98          |                 tya                  
3230:000 | DONE ins | em 16 16 | 00598c | e2 20       |                 sep 20               
3230:001 | DONE ctl | em  8 16 |        |             |         .!a8
3231:000 | DONE ins | em  8 16 | 00598e | 92 18       |                 sta.di 000018        STA (TOHOLD)
3232:000 | DONE ins | em  8 16 | 005990 | c2 20       |                 rep 20               
3232:001 | DONE ctl | em 16 16 |        |             |         .!a16
3233:000 | DONE ins | em 16 16 | 005992 | b4 00       |                 ldy.dx 00            
3234:000 | DONE ins | em 16 16 | 005994 | e8          |                 inx                  
3235:000 | DONE ins | em 16 16 | 005995 | e8          |                 inx                  
3236:000 | DONE wsp | em 16 16 |        |             |
3237:000 | DONE lbl | em 16 16 | 005996 |             | z_hold                               
3237:001 | DONE ins | em 16 16 | 005996 | 60          |                 rts                  
3238:000 | DONE wsp | em 16 16 |        |             |
3239:000 | DONE cmt | em 16 16 |        |             | ; -------------------------------------------------------------------
3240:000 | DONE cmt | em 16 16 |        |             | ; LATESTNT ( -- nt ) 7 bytes / X cycles
3241:000 | DONE cmt | em 16 16 |        |             | ; Return the name token (nt) of the last word in the Dictionary. The Gforth
3242:000 | DONE cmt | em 16 16 |        |             | ; version of this word is called LATEST.
3243:000 | DONE lbl | em 16 16 | 005997 |             | xt_latestnt                          
3244:000 | DONE dir | em 16 16 |        |             |         .!a16                        
3245:000 | DONE ins | em 16 16 | 005997 | ca          |                 dex                  make room on Data Stack
3246:000 | DONE ins | em 16 16 | 005998 | ca          |                 dex                  
3247:000 | DONE ins | em 16 16 | 005999 | 94 00       |                 sty.dx 00            
3248:000 | DONE wsp | em 16 16 |        |             |
3249:000 | DONE ins | em 16 16 | 00599b | a5 02       |                 lda.d 000002         
3250:000 | DONE ins | em 16 16 | 00599d | a8          |                 tay                  
3251:000 | DONE wsp | em 16 16 |        |             |
3252:000 | DONE lbl | em 16 16 | 00599e |             | z_latestnt                           
3252:001 | DONE ins | em 16 16 | 00599e | 60          |                 rts                  
3253:000 | DONE wsp | em 16 16 |        |             |
3254:000 | DONE wsp | em 16 16 |        |             |
3255:000 | DONE cmt | em 16 16 |        |             | ; -------------------------------------------------------------------
3256:000 | DONE cmt | em 16 16 |        |             | ; LATESTXT ( -- xt ) 11 bytes / X cycles
3257:000 | DONE cmt | em 16 16 |        |             | ; Return the name token (xt) of the last word in the Dictionary. This is simply
3258:000 | DONE cmt | em 16 16 |        |             | ; LATESTNT but four bytes down and with a FETCH
3259:000 | DONE lbl | em 16 16 | 00599f |             | xt_latestxt                          
3260:000 | DONE dir | em 16 16 |        |             |         .!a16                        
3261:000 | DONE ins | em 16 16 | 00599f | ca          |                 dex                  make room on Data Stack
3262:000 | DONE ins | em 16 16 | 0059a0 | ca          |                 dex                  
3263:000 | DONE ins | em 16 16 | 0059a1 | 94 00       |                 sty.dx 00            
3264:000 | DONE wsp | em 16 16 |        |             |
3265:000 | DONE ins | em 16 16 | 0059a3 | a5 02       |                 lda.d 000002         
3266:000 | DONE wsp | em 16 16 |        |             |
3267:000 | DONE ins | em 16 16 | 0059a5 | 18          |                 clc                  xt is stored four bytes below nt in header
3268:000 | DONE ins | em 16 16 | 0059a6 | 69 04 00    |                 adc.# 0004           
3269:000 | DONE ins | em 16 16 | 0059a9 | a8          |                 tay                  
3270:000 | DONE wsp | em 16 16 |        |             |
3271:000 | DONE ins | em 16 16 | 0059aa | b9 00 00    |                 lda.y 0000           FETCH
3272:000 | DONE ins | em 16 16 | 0059ad | a8          |                 tay                  
3273:000 | DONE wsp | em 16 16 |        |             |
3274:000 | DONE lbl | em 16 16 | 0059ae |             | z_latestxt                           
3274:001 | DONE ins | em 16 16 | 0059ae | 60          |                 rts                  
3275:000 | DONE wsp | em 16 16 |        |             |
3276:000 | DONE wsp | em 16 16 |        |             |
3277:000 | DONE cmt | em 16 16 |        |             | ; -------------------------------------------------------------------
3278:000 | DONE cmt | em 16 16 |        |             | ; LITERAL ( n -- ) X bytes / X cycles
3279:000 | DONE cmt | em 16 16 |        |             | ; Compile-only word to store TOS so that it is pushed on stack during runtime.
3280:000 | DONE cmt | em 16 16 |        |             | ; This is a immediate, compile-only word. Test it with  : AAA [ 1 ] LITERAL ;
3281:000 | DONE cmt | em 16 16 |        |             | ; for instance
3282:000 | DONE lbl | em 16 16 | 0059af |             | xt_literal                           
3283:000 | DONE cmt | em 16 16 |        |             |                 ; During runtime, we call the routine at the bottom by compiling
3284:000 | DONE cmt | em 16 16 |        |             |                 ; JSR LITERAL_RT. Note the cmpl_ routines use tmptos
3285:000 | DONE ins | em 16 16 | 0059af | f4 c1 59    |                 phe.# 0059c1         PEA LITERAL_RT
3286:000 | DONE ins | em 16 16 | 0059b2 | 20 46 68    |                 jsr 006846           
3287:000 | DONE wsp | em 16 16 |        |             |
3288:000 | DONE cmt | em 16 16 |        |             |                 ; compile the value that is to be pushed to the Data Stack at
3289:000 | DONE cmt | em 16 16 |        |             |                 ; runtime. There is no "sty.di", so we have to do this the hard
3290:000 | DONE cmt | em 16 16 |        |             |                 ; way. This is basically , ("comma")
3291:000 | DONE ins | em 16 16 | 0059b5 | 98          |                 tya                  
3292:000 | DONE ins | em 16 16 | 0059b6 | 92 00       |                 sta.di 000000        
3293:000 | DONE ins | em 16 16 | 0059b8 | e6 00       |                 inc.d 000000         
3294:000 | DONE ins | em 16 16 | 0059ba | e6 00       |                 inc.d 000000         
3295:000 | DONE wsp | em 16 16 |        |             |
3296:000 | DONE ins | em 16 16 | 0059bc | b4 00       |                 ldy.dx 00            DROP
3297:000 | DONE ins | em 16 16 | 0059be | e8          |                 inx                  
3298:000 | DONE ins | em 16 16 | 0059bf | e8          |                 inx                  
3299:000 | DONE wsp | em 16 16 |        |             |
3300:000 | DONE lbl | em 16 16 | 0059c0 |             | z_literal                            
3300:001 | DONE ins | em 16 16 | 0059c0 | 60          |                 rts                  
3301:000 | DONE wsp | em 16 16 |        |             |
3302:000 | DONE lbl | em 16 16 | 0059c1 |             | literal_rt                           
3303:000 | DONE cmt | em 16 16 |        |             |                 ; During runtime, we push the value following this word
3304:000 | DONE cmt | em 16 16 |        |             |                 ; back on the Data Stack. The subroutine jump that brought us
3305:000 | DONE cmt | em 16 16 |        |             |                 ; here put the address to return to on the Return Stack - this
3306:000 | DONE cmt | em 16 16 |        |             |                 ; points to the data we need to get
3307:000 | DONE wsp | em 16 16 |        |             |
3308:000 | DONE cmt | em 16 16 |        |             |                 ; Make room on Data Stack, Y now free to use
3309:000 | DONE ins | em 16 16 | 0059c1 | ca          |                 dex                  
3310:000 | DONE ins | em 16 16 | 0059c2 | ca          |                 dex                  
3311:000 | DONE ins | em 16 16 | 0059c3 | 94 00       |                 sty.dx 00            
3312:000 | DONE wsp | em 16 16 |        |             |
3313:000 | DONE cmt | em 16 16 |        |             |                 ; The 65816 stores (<RETURN-ADDRESS> - 1) on the Return Stack
3314:000 | DONE cmt | em 16 16 |        |             |                 ; so we have to manipulate the address
3315:000 | DONE ins | em 16 16 | 0059c5 | 7a          |                 ply                  
3316:000 | DONE ins | em 16 16 | 0059c6 | c8          |                 iny                  
3317:000 | DONE ins | em 16 16 | 0059c7 | b9 00 00    |                 lda.y 0000           LDA $0000,Y - get value after jump
3318:000 | DONE wsp | em 16 16 |        |             |
3319:000 | DONE ins | em 16 16 | 0059ca | c8          |                 iny                  move return address past data and restore
3320:000 | DONE ins | em 16 16 | 0059cb | 5a          |                 phy                  so we can get back home
3321:000 | DONE wsp | em 16 16 |        |             |
3322:000 | DONE ins | em 16 16 | 0059cc | a8          |                 tay                  Value is now on the Data Stack ( -- n )
3323:000 | DONE wsp | em 16 16 |        |             |
3324:000 | DONE ins | em 16 16 | 0059cd | 60          |                 rts                  
3325:000 | DONE wsp | em 16 16 |        |             |
3326:000 | DONE wsp | em 16 16 |        |             |
3327:000 | DONE cmt | em 16 16 |        |             | ; -------------------------------------------------------------------
3328:000 | DONE cmt | em 16 16 |        |             | ; LSHIFT ( n u -- n ) X bytes / X cycles
3329:000 | DONE cmt | em 16 16 |        |             | ; Logically shift TOS u times to the left, adding zeros to the right
3330:000 | DONE lbl | em 16 16 | 0059ce |             | xt_lshift                            
3331:000 | DONE cmt | em 16 16 |        |             |                 ; We shift at most 16 bits, because anything above that will be
3332:000 | DONE cmt | em 16 16 |        |             |                 ; zeros anyway
3333:000 | DONE ins | em 16 16 | 0059ce | 98          |                 tya                  
3334:000 | DONE ins | em 16 16 | 0059cf | 29 0f 00    |                 and.# 000f           
3335:000 | DONE ins | em 16 16 | 0059d2 | f0 09       |                 beq 0059dd           if zero shifts, we're done
3336:000 | DONE wsp | em 16 16 |        |             |
3337:000 | DONE ins | em 16 16 | 0059d4 | a8          |                 tay                  number of shifts is TOS
3338:000 | DONE ins | em 16 16 | 0059d5 | b5 00       |                 lda.dx 00            number is in NOS
3339:000 | DONE lbl | em 16 16 | 0059d7 |             | lshift_loop                          
3340:000 | DONE ins | em 16 16 | 0059d7 | 0a          |                 asl.a                
3341:000 | DONE ins | em 16 16 | 0059d8 | 88          |                 dey                  
3342:000 | DONE ins | em 16 16 | 0059d9 | d0 fc       |                 bne 0059d7           
3343:000 | DONE wsp | em 16 16 |        |             |
3344:000 | DONE ins | em 16 16 | 0059db | 95 00       |                 sta.dx 00            put NOS, which last step will pull up
3345:000 | DONE wsp | em 16 16 |        |             |
3346:000 | DONE lbl | em 16 16 | 0059dd |             | lshift_done                          
3347:000 | DONE ins | em 16 16 | 0059dd | b4 00       |                 ldy.dx 00            
3348:000 | DONE ins | em 16 16 | 0059df | e8          |                 inx                  
3349:000 | DONE ins | em 16 16 | 0059e0 | e8          |                 inx                  
3350:000 | DONE wsp | em 16 16 |        |             |
3351:000 | DONE lbl | em 16 16 | 0059e1 |             | z_lshift                             
3351:001 | DONE ins | em 16 16 | 0059e1 | 60          |                 rts                  
3352:000 | DONE wsp | em 16 16 |        |             |
3353:000 | DONE wsp | em 16 16 |        |             |
3354:000 | DONE cmt | em 16 16 |        |             | ; -------------------------------------------------------------------
3355:000 | DONE cmt | em 16 16 |        |             | ; M* "MSTAR" ( n n -- d ) 16*16 -> 32  X bytes / X cycles
3356:000 | DONE cmt | em 16 16 |        |             | ; Multiply two 16 bit numbers, producing a 32 bit result. All values are signed.
3357:000 | DONE cmt | em 16 16 |        |             | ; This was originally adapted from FIG Forth for Tali Forth. The original Forth
3358:000 | DONE cmt | em 16 16 |        |             | ; code is : M* OVER OVER XOR >R ABS SWAP ABS UM* R> D+- ;  with
3359:000 | DONE cmt | em 16 16 |        |             | ; : D+- O< IF DNEGATE THEN ;
3360:000 | DONE cmt | em 16 16 |        |             | ; TODO Test this more once we have the Double words etc all working
3361:000 | DONE lbl | em 16 16 | 0059e2 |             | xt_mstar                             
3362:000 | DONE dir | em 16 16 |        |             |         .!a16                        
3363:000 | DONE cmt | em 16 16 |        |             |                 ; figure out the sign
3364:000 | DONE ins | em 16 16 | 0059e2 | 98          |                 tya                  
3365:000 | DONE ins | em 16 16 | 0059e3 | 55 00       |                 eor.dx 00            
3366:000 | DONE wsp | em 16 16 |        |             |
3367:000 | DONE cmt | em 16 16 |        |             |                 ; um* uses all kinds of tmp stuff so we don't risk a conflict
3368:000 | DONE cmt | em 16 16 |        |             |                 ; and just take the cycle hit by pushing this to the stack
3369:000 | DONE ins | em 16 16 | 0059e5 | 48          |                 pha                  
3370:000 | DONE wsp | em 16 16 |        |             |
3371:000 | DONE cmt | em 16 16 |        |             |                 ; get the absolute value of both numbers so we can feed them to
3372:000 | DONE cmt | em 16 16 |        |             |                 ; UM*, which does the real work
3373:000 | DONE ins | em 16 16 | 0059e6 | 98          |                 tya                  
3374:000 | DONE ins | em 16 16 | 0059e7 | 10 05       |                 bpl 0059ee           
3375:000 | DONE wsp | em 16 16 |        |             |
3376:000 | DONE cmt | em 16 16 |        |             |                 ; TOS is negative so we have to ABS it
3377:000 | DONE ins | em 16 16 | 0059e9 | 49 ff ff    |                 eor.# 0ffff          
3378:000 | DONE ins | em 16 16 | 0059ec | 1a          |                 inc.a                
3379:000 | DONE ins | em 16 16 | 0059ed | a8          |                 tay                  
3380:000 | DONE wsp | em 16 16 |        |             |
3381:000 | DONE lbl | em 16 16 | 0059ee |             | mstar_abs_nos                        
3382:000 | DONE ins | em 16 16 | 0059ee | b5 00       |                 lda.dx 00            
3383:000 | DONE ins | em 16 16 | 0059f0 | 10 06       |                 bpl 0059f8           
3384:000 | DONE wsp | em 16 16 |        |             |
3385:000 | DONE cmt | em 16 16 |        |             |                 ; NOS is negative so we have to ABS it
3386:000 | DONE ins | em 16 16 | 0059f2 | 49 ff ff    |                 eor.# 0ffff          
3387:000 | DONE ins | em 16 16 | 0059f5 | 1a          |                 inc.a                
3388:000 | DONE ins | em 16 16 | 0059f6 | 95 00       |                 sta.dx 00            
3389:000 | DONE wsp | em 16 16 |        |             |
3390:000 | DONE lbl | em 16 16 | 0059f8 |             | mstar_umstar                         
3391:000 | DONE ins | em 16 16 | 0059f8 | 20 fb 5d    |                 jsr 005dfb           now ( d ) on stack
3392:000 | DONE wsp | em 16 16 |        |             |
3393:000 | DONE cmt | em 16 16 |        |             |                 ; handle the sign
3394:000 | DONE ins | em 16 16 | 0059fb | 68          |                 pla                  
3395:000 | DONE wsp | em 16 16 |        |             |
3396:000 | DONE cmt | em 16 16 |        |             |                 ; postive, we don't have to care
3397:000 | DONE ins | em 16 16 | 0059fc | 10 03       |                 bpl 005a01           
3398:000 | DONE wsp | em 16 16 |        |             |
3399:000 | DONE ins | em 16 16 | 0059fe | 20 88 57    |                 jsr 005788           
3400:000 | DONE wsp | em 16 16 |        |             |
3401:000 | DONE lbl | em 16 16 | 005a01 |             | z_mstar                              
3401:001 | DONE ins | em 16 16 | 005a01 | 60          |                 rts                  
3402:000 | DONE wsp | em 16 16 |        |             |
3403:000 | DONE wsp | em 16 16 |        |             |
3404:000 | DONE cmt | em 16 16 |        |             | ; -------------------------------------------------------------------
3405:000 | DONE cmt | em 16 16 |        |             | ; MARKER ( "name" -- ) X bytes / X cycles
3406:000 | DONE cmt | em 16 16 |        |             | ; Create a deletion boundry, restoring the Dictionary to an earlier state. This
3407:000 | DONE cmt | em 16 16 |        |             | ; replaces FORGET in earlier Forths. Old entries are not actually deleted, but
3408:000 | DONE cmt | em 16 16 |        |             | ; merely overwritten by restoring CP and DP.
3409:000 | DONE lbl | em 16 16 | 005a02 |             | xt_marker                            
3410:000 | DONE cmt | em 16 16 |        |             |                 ; This is a defining word
3411:000 | DONE ins | em 16 16 | 005a02 | 20 7a 56    |                 jsr 00567a           
3412:000 | DONE wsp | em 16 16 |        |             |
3413:000 | DONE cmt | em 16 16 |        |             |                 ; Add the current DP as a payload - the DP of the marker itself
3414:000 | DONE cmt | em 16 16 |        |             |                 ; TODO see if it doesn't make more sense to add nt_ of the previous
3415:000 | DONE cmt | em 16 16 |        |             |                 ; word
3416:000 | DONE ins | em 16 16 | 005a05 | a5 02       |                 lda.d 000002         
3417:000 | DONE ins | em 16 16 | 005a07 | 92 00       |                 sta.di 000000        STA (CP)
3418:000 | DONE ins | em 16 16 | 005a09 | e6 00       |                 inc.d 000000         
3419:000 | DONE ins | em 16 16 | 005a0b | e6 00       |                 inc.d 000000         
3420:000 | DONE wsp | em 16 16 |        |             |
3421:000 | DONE cmt | em 16 16 |        |             |                 ; DOES> by hand: Add runtime behavior and DODOES routine
3422:000 | DONE ins | em 16 16 | 005a0d | 20 a9 57    |                 jsr 0057a9           
3423:000 | DONE ins | em 16 16 | 005a10 | 20 ce 67    |                 jsr 0067ce           
3424:000 | DONE wsp | em 16 16 |        |             |
3425:000 | DONE cmt | em 16 16 |        |             |                 ; DOES> payload
3426:000 | DONE ins | em 16 16 | 005a13 | 20 d4 52    |                 jsr 0052d4           ( nt )
3427:000 | DONE wsp | em 16 16 |        |             |
3428:000 | DONE cmt | em 16 16 |        |             |                 ; We now have the DP of the marker itself on the stack, but we
3429:000 | DONE cmt | em 16 16 |        |             |                 ; need the DP of the previous word. That is two bytes down
3430:000 | DONE ins | em 16 16 | 005a16 | 84 20       |                 sty.d 000020         
3431:000 | DONE ins | em 16 16 | 005a18 | a0 02 00    |                 ldy.# 0002           overwrite TOS, won't be needing it
3432:000 | DONE ins | em 16 16 | 005a1b | b1 20       |                 lda.diy 000020       LDA (TMP3),Y
3433:000 | DONE ins | em 16 16 | 005a1d | 85 02       |                 sta.d 000002         
3434:000 | DONE wsp | em 16 16 |        |             |
3435:000 | DONE cmt | em 16 16 |        |             |                 ; Adjust the CP, which is one byte after the z_ address of the
3436:000 | DONE cmt | em 16 16 |        |             |                 ; word we just restored. That address is six bytes down
3437:000 | DONE ins | em 16 16 | 005a1f | a0 06 00    |                 ldy.# 0006           
3438:000 | DONE ins | em 16 16 | 005a22 | b1 02       |                 lda.diy 000002       LDA (DP),Y
3439:000 | DONE ins | em 16 16 | 005a24 | 1a          |                 inc.a                first free byte is one byte further down
3440:000 | DONE ins | em 16 16 | 005a25 | 85 00       |                 sta.d 000000         
3441:000 | DONE wsp | em 16 16 |        |             |
3442:000 | DONE cmt | em 16 16 |        |             |                 ; clean up stack
3443:000 | DONE ins | em 16 16 | 005a27 | b4 00       |                 ldy.dx 00            
3444:000 | DONE ins | em 16 16 | 005a29 | e8          |                 inx                  
3445:000 | DONE ins | em 16 16 | 005a2a | e8          |                 inx                  
3446:000 | DONE wsp | em 16 16 |        |             |
3447:000 | DONE lbl | em 16 16 | 005a2b |             | z_marker                             
3447:001 | DONE ins | em 16 16 | 005a2b | 60          |                 rts                  
3448:000 | DONE wsp | em 16 16 |        |             |
3449:000 | DONE wsp | em 16 16 |        |             |
3450:000 | DONE cmt | em 16 16 |        |             | ; -------------------------------------------------------------------
3451:000 | DONE cmt | em 16 16 |        |             | ; MAX ( n m -- n ) 18 bytes / X cycles
3452:000 | DONE cmt | em 16 16 |        |             | ; Compare TOS and NOS and keep which one is larger. Adapted from Lance A.
3453:000 | DONE cmt | em 16 16 |        |             | ; Leventhal "6502 Assembly Language Subroutines". Negative Flag indicates which
3454:000 | DONE cmt | em 16 16 |        |             | ; number is larger. See also http://6502.org/tutorials/compare_instructions.html
3455:000 | DONE cmt | em 16 16 |        |             | ; and http://www.righto.com/2012/12/the-6502-overflow-flag-explained.html
3456:000 | DONE lbl | em 16 16 | 005a2c |             | xt_max                               
3457:000 | DONE ins | em 16 16 | 005a2c | 98          |                 tya                  
3458:000 | DONE ins | em 16 16 | 005a2d | d5 00       |                 cmp.dx 00            
3459:000 | DONE wsp | em 16 16 |        |             |
3460:000 | DONE cmt | em 16 16 |        |             |                 ; If they are the same, life is good. This step also sets the
3461:000 | DONE cmt | em 16 16 |        |             |                 ; Carry flag
3462:000 | DONE ins | em 16 16 | 005a2f | f0 0b       |                 beq 005a3c           Faster than DROP because TOS is in Y
3463:000 | DONE wsp | em 16 16 |        |             |
3464:000 | DONE ins | em 16 16 | 005a31 | f5 00       |                 sbc.dx 00            
3465:000 | DONE ins | em 16 16 | 005a33 | 50 03       |                 bvc 005a38           no overflow, skip ahead
3466:000 | DONE wsp | em 16 16 |        |             |
3467:000 | DONE cmt | em 16 16 |        |             |                 ; Deal with oveflow because we use signed numbers
3468:000 | DONE ins | em 16 16 | 005a35 | 49 00 80    |                 eor.# 8000           compliment negative flag
3469:000 | DONE wsp | em 16 16 |        |             |
3470:000 | DONE lbl | em 16 16 | 005a38 |             | max_no_ov                            
3471:000 | DONE ins | em 16 16 | 005a38 | 10 02       |                 bpl 005a3c           keep TOS
3472:000 | DONE lbl | em 16 16 | 005a3a |             | max_drop                             
3473:000 | DONE ins | em 16 16 | 005a3a | b4 00       |                 ldy.dx 00            DROP so NOS is result
3474:000 | DONE lbl | em 16 16 | 005a3c |             | max_nip                              
3475:000 | DONE ins | em 16 16 | 005a3c | e8          |                 inx                  
3476:000 | DONE ins | em 16 16 | 005a3d | e8          |                 inx                  
3477:000 | DONE wsp | em 16 16 |        |             |
3478:000 | DONE lbl | em 16 16 | 005a3e |             | z_max                                
3478:001 | DONE ins | em 16 16 | 005a3e | 60          |                 rts                  
3479:000 | DONE wsp | em 16 16 |        |             |
3480:000 | DONE wsp | em 16 16 |        |             |
3481:000 | DONE cmt | em 16 16 |        |             | ; -------------------------------------------------------------------
3482:000 | DONE cmt | em 16 16 |        |             | ; MIN ( n m -- n ) 18 bytes / X cycles
3483:000 | DONE cmt | em 16 16 |        |             | ; Compare TOS and NOS and keep which one is smaller Adapted from Lance A.
3484:000 | DONE cmt | em 16 16 |        |             | ; Leventhal "6502 Assembly Language Subroutines". Negative Flag indicates which
3485:000 | DONE cmt | em 16 16 |        |             | ; number is larger. See also http://6502.org/tutorials/compare_instructions.html
3486:000 | DONE cmt | em 16 16 |        |             | ; and http://www.righto.com/2012/12/the-6502-overflow-flag-explained.html
3487:000 | DONE lbl | em 16 16 | 005a3f |             | xt_min                               
3488:000 | DONE ins | em 16 16 | 005a3f | 98          |                 tya                  
3489:000 | DONE ins | em 16 16 | 005a40 | d5 00       |                 cmp.dx 00            
3490:000 | DONE wsp | em 16 16 |        |             |
3491:000 | DONE cmt | em 16 16 |        |             |                 ; If they are the same, life is good. This step also sets the
3492:000 | DONE cmt | em 16 16 |        |             |                 ; Carry flag
3493:000 | DONE ins | em 16 16 | 005a42 | f0 0b       |                 beq 005a4f           Faster than DROP because TOS is in Y
3494:000 | DONE wsp | em 16 16 |        |             |
3495:000 | DONE ins | em 16 16 | 005a44 | f5 00       |                 sbc.dx 00            
3496:000 | DONE ins | em 16 16 | 005a46 | 50 03       |                 bvc 005a4b           no overflow, skip ahead
3497:000 | DONE wsp | em 16 16 |        |             |
3498:000 | DONE cmt | em 16 16 |        |             |                 ; Deal with oveflow because we use signed numbers
3499:000 | DONE ins | em 16 16 | 005a48 | 49 00 80    |                 eor.# 8000           compliment negative flag
3500:000 | DONE wsp | em 16 16 |        |             |
3501:000 | DONE lbl | em 16 16 | 005a4b |             | min_no_ov                            
3502:000 | DONE ins | em 16 16 | 005a4b | 30 02       |                 bmi 005a4f           keep TOS
3503:000 | DONE lbl | em 16 16 | 005a4d |             | min_drop                             
3504:000 | DONE ins | em 16 16 | 005a4d | b4 00       |                 ldy.dx 00            DROP so NOS is result
3505:000 | DONE lbl | em 16 16 | 005a4f |             | min_nip                              
3506:000 | DONE ins | em 16 16 | 005a4f | e8          |                 inx                  
3507:000 | DONE ins | em 16 16 | 005a50 | e8          |                 inx                  
3508:000 | DONE wsp | em 16 16 |        |             |
3509:000 | DONE lbl | em 16 16 | 005a51 |             | z_min                                
3509:001 | DONE ins | em 16 16 | 005a51 | 60          |                 rts                  
3510:000 | DONE wsp | em 16 16 |        |             |
3511:000 | DONE cmt | em 16 16 |        |             | ; -------------------------------------------------------------------
3512:000 | DONE cmt | em 16 16 |        |             | ; MOVE ( addr1 addr2 u -- ) X bytes / X cycles
3513:000 | DONE cmt | em 16 16 |        |             | ; Move u bytes from addr1 to addr2, so that in the end, addr2 contains exactly
3514:000 | DONE cmt | em 16 16 |        |             | ; what was in addr1. This routine calls CMOVE or CMOVE>. Forth verison is
3515:000 | DONE cmt | em 16 16 |        |             | ; >R 2DUP U< IF R> CMOVE> ELSE  R> CMOVE THEN ; see
3516:000 | DONE cmt | em 16 16 |        |             | ; https://groups.google.com/forum/#!topic/comp.lang.forth/-l2WlE7pEE0
3517:000 | DONE cmt | em 16 16 |        |             | ; Also see CMOVE> and CMOVE and http://forum.6502.org/viewtopic.php?f=2&t=1685
3518:000 | DONE lbl | em 16 16 | 005a52 |             | xt_move                              
3519:000 | DONE dir | em 16 16 |        |             |         .!a16                        
3520:000 | DONE cmt | em 16 16 |        |             |                 ; if u is zero, we just skip all of this
3521:000 | DONE ins | em 16 16 | 005a52 | 98          |                 tya                  
3522:000 | DONE ins | em 16 16 | 005a53 | f0 0e       |                 beq 005a63           
3523:000 | DONE wsp | em 16 16 |        |             |
3524:000 | DONE cmt | em 16 16 |        |             |                 ; if source and destination are the same, that would be silly as
3525:000 | DONE cmt | em 16 16 |        |             |                 ; well
3526:000 | DONE ins | em 16 16 | 005a55 | b5 00       |                 lda.dx 00            addr2 (destination)
3527:000 | DONE ins | em 16 16 | 005a57 | d5 04       |                 cmp.dx 04            addr1 (source)
3528:000 | DONE ins | em 16 16 | 005a59 | f0 08       |                 beq 005a63           
3529:000 | DONE wsp | em 16 16 |        |             |
3530:000 | DONE cmt | em 16 16 |        |             |                 ; The destination is higher than the source, so use CMOVE, which
3531:000 | DONE cmt | em 16 16 |        |             |                 ; calls MVP
3532:000 | DONE ins | em 16 16 | 005a5b | 10 03       |                 bpl 005a60           
3533:000 | DONE wsp | em 16 16 |        |             |
3534:000 | DONE ins | em 16 16 | 005a5d | 4c dc 55    |                 jmp 0055dc           JSR/RTS
3535:000 | DONE wsp | em 16 16 |        |             |
3536:000 | DONE cmt | em 16 16 |        |             |                 ; The source is higher than the destination, use CMOVE>,
3537:000 | DONE cmt | em 16 16 |        |             |                 ; which calls MVN
3538:000 | DONE lbl | em 16 16 | 005a60 |             | move_cmoveup                         
3539:000 | DONE ins | em 16 16 | 005a60 | 4c ff 55    |                 jmp 0055ff           
3540:000 | DONE wsp | em 16 16 |        |             |
3541:000 | DONE lbl | em 16 16 | 005a63 |             | z_move                               ; never reached
3542:000 | DONE wsp | em 16 16 |        |             |
3543:000 | DONE wsp | em 16 16 |        |             |
3544:000 | DONE cmt | em 16 16 |        |             | ; -------------------------------------------------------------------
3545:000 | DONE cmt | em 16 16 |        |             | ; NAME>INT ( nt -- xt ) 4 bytes / 8 cycles
3546:000 | DONE cmt | em 16 16 |        |             | ; Given the Name Token (nt) of a word, return its Execute Token (xt)
3547:000 | DONE cmt | em 16 16 |        |             | ; TODO deal with compile-only words, see
3548:000 | DONE cmt | em 16 16 |        |             | ; https://www.complang.tuwien.ac.at/forth/gforth/Docs-html/Name-token.html
3549:000 | DONE lbl | em 16 16 | 005a63 |             | xt_name-int                          
3550:000 | DONE dir | em 16 16 |        |             |         .!a16                        
3551:000 | DONE dir | em 16 16 |        |             |         .!xy16                       
3552:000 | DONE cmt | em 16 16 |        |             |                 ; The xt of a word beginns four bytes down from its nt
3553:000 | DONE ins | em 16 16 | 005a63 | c8          |                 iny                  
3554:000 | DONE ins | em 16 16 | 005a64 | c8          |                 iny                  
3555:000 | DONE ins | em 16 16 | 005a65 | c8          |                 iny                  
3556:000 | DONE ins | em 16 16 | 005a66 | c8          |                 iny                  
3557:000 | DONE ins | em 16 16 | 005a67 | b9 00 00    |                 lda.y 0000           
3558:000 | DONE ins | em 16 16 | 005a6a | a8          |                 tay                  
3559:000 | DONE wsp | em 16 16 |        |             |
3560:000 | DONE lbl | em 16 16 | 005a6b |             | z_name-int                           
3560:001 | DONE ins | em 16 16 | 005a6b | 60          |                 rts                  
3561:000 | DONE wsp | em 16 16 |        |             |
3562:000 | DONE cmt | em 16 16 |        |             | ; -------------------------------------------------------------------
3563:000 | DONE cmt | em 16 16 |        |             | ; NAME>STRING ( nt -- addr u ) 16 bytes / X cycles
3564:000 | DONE cmt | em 16 16 |        |             | ; Given a name token (nt) of a word, return its string. This is a Gforth word
3565:000 | DONE cmt | em 16 16 |        |             | ; that works with the Dictionary header entries. It is not checked if nt is
3566:000 | DONE cmt | em 16 16 |        |             | ; a valid name token. There is no "STRING>NAME" - this is handled by the
3567:000 | DONE cmt | em 16 16 |        |             | ; combination of PARSE-NAME and FIND-NAME
3568:000 | DONE lbl | em 16 16 | 005a6c |             | xt_name-string                       
3569:000 | DONE dir | em 16 16 |        |             |         .!a16                        
3570:000 | DONE dir | em 16 16 |        |             |         .!xy16                       
3571:000 | DONE ins | em 16 16 | 005a6c | ca          |                 dex                  move NOS down one
3572:000 | DONE ins | em 16 16 | 005a6d | ca          |                 dex                  
3573:000 | DONE wsp | em 16 16 |        |             |
3574:000 | DONE cmt | em 16 16 |        |             |                 ; the name string of a word begins 8 bytes down from its nt,
3575:000 | DONE cmt | em 16 16 |        |             |                 ; which we have as TOS
3576:000 | DONE ins | em 16 16 | 005a6e | 98          |                 tya                  
3577:000 | DONE ins | em 16 16 | 005a6f | 18          |                 clc                  
3578:000 | DONE ins | em 16 16 | 005a70 | 69 08 00    |                 adc.# 0008           
3579:000 | DONE ins | em 16 16 | 005a73 | 95 00       |                 sta.dx 00            NOS
3580:000 | DONE wsp | em 16 16 |        |             |
3581:000 | DONE cmt | em 16 16 |        |             |                 ; the length of the name string is in the LSB of the first word
3582:000 | DONE cmt | em 16 16 |        |             |                 ; of the dictionary entry header (the name token)
3583:000 | DONE ins | em 16 16 | 005a75 | b9 00 00    |                 lda.y 0000           LDA $0000,Y
3584:000 | DONE ins | em 16 16 | 005a78 | 29 ff 00    |                 and.# 00ff           mask all but length byte
3585:000 | DONE ins | em 16 16 | 005a7b | a8          |                 tay                  
3586:000 | DONE wsp | em 16 16 |        |             |
3587:000 | DONE lbl | em 16 16 | 005a7c |             | z_name-string                        
3587:001 | DONE ins | em 16 16 | 005a7c | 60          |                 rts                  
3588:000 | DONE wsp | em 16 16 |        |             |
3589:000 | DONE wsp | em 16 16 |        |             |
3590:000 | DONE cmt | em 16 16 |        |             | ; -------------------------------------------------------------------
3591:000 | DONE cmt | em 16 16 |        |             | ; NATIVE-COMPILE ( -- ) X bytes / X cycles
3592:000 | DONE cmt | em 16 16 |        |             | ; Enable native compilation for last word in Dictionary
3593:000 | DONE lbl | em 16 16 | 005a7d |             | xt_native-compile                    
3594:000 | DONE dir | em 16 16 |        |             |         .!a16                        
3595:000 | DONE ins | em 16 16 | 005a7d | a9 01 00    |                 lda.# NC             
3596:000 | DONE ins | em 16 16 | 005a80 | eb          |                 xba                  flags are MSB
3597:000 | DONE ins | em 16 16 | 005a81 | 12 02       |                 ora.di 000002        ORA (DP)
3598:000 | DONE ins | em 16 16 | 005a83 | 92 02       |                 sta.di 000002        
3599:000 | DONE wsp | em 16 16 |        |             |
3600:000 | DONE lbl | em 16 16 | 005a85 |             | z_native-compile                     
3601:000 | DONE ins | em 16 16 | 005a85 | 60          |                 rts                  
3602:000 | DONE wsp | em 16 16 |        |             |
3603:000 | DONE wsp | em 16 16 |        |             |
3604:000 | DONE cmt | em 16 16 |        |             | ; -------------------------------------------------------------------
3605:000 | DONE cmt | em 16 16 |        |             | ; NEGATE ( n -- n ) 6 bytes / X cycles
3606:000 | DONE cmt | em 16 16 |        |             | ; Two's complement of TOS
3607:000 | DONE lbl | em 16 16 | 005a86 |             | xt_negate                            
3608:000 | DONE ins | em 16 16 | 005a86 | 98          |                 tya                  
3609:000 | DONE ins | em 16 16 | 005a87 | 49 ff ff    |                 eor.# 0ffff          
3610:000 | DONE ins | em 16 16 | 005a8a | 1a          |                 inc.a                
3611:000 | DONE ins | em 16 16 | 005a8b | a8          |                 tay                  
3612:000 | DONE wsp | em 16 16 |        |             |
3613:000 | DONE lbl | em 16 16 | 005a8c |             | z_negate                             
3613:001 | DONE ins | em 16 16 | 005a8c | 60          |                 rts                  
3614:000 | DONE wsp | em 16 16 |        |             |
3615:000 | DONE wsp | em 16 16 |        |             |
3616:000 | DONE cmt | em 16 16 |        |             | ; -------------------------------------------------------------------
3617:000 | DONE cmt | em 16 16 |        |             | ; NIP ( n m -- m ) 2 bytes / 4 cycles
3618:000 | DONE cmt | em 16 16 |        |             | ; Delete entry that is NOS
3619:000 | DONE lbl | em 16 16 | 005a8d |             | xt_nip                               
3620:000 | DONE dir | em 16 16 |        |             |         .!xy16                       
3621:000 | DONE ins | em 16 16 | 005a8d | e8          |                 inx                  
3622:000 | DONE ins | em 16 16 | 005a8e | e8          |                 inx                  
3623:000 | DONE lbl | em 16 16 | 005a8f |             | z_nip                                
3623:001 | DONE ins | em 16 16 | 005a8f | 60          |                 rts                  
3624:000 | DONE wsp | em 16 16 |        |             |
3625:000 | DONE wsp | em 16 16 |        |             |
3626:000 | DONE cmt | em 16 16 |        |             | ; -------------------------------------------------------------------
3627:000 | DONE cmt | em 16 16 |        |             | ; NUMBER ( addr u -- u | d ) X bytes / X cycles
3628:000 | DONE cmt | em 16 16 |        |             | ; Convert a number string to a double or single cell number. This is a wrapper
3629:000 | DONE cmt | em 16 16 |        |             | ; for >NUMBER and follows the convention set out in the "Forth Programmer's
3630:000 | DONE cmt | em 16 16 |        |             | ; Handbook" (Conklin & Rather) 3rd edition p. 87. Based in part on the "Starting
3631:000 | DONE cmt | em 16 16 |        |             | ; Forth" code https://www.forth.com/starting-forth/10-input-output-operators/
3632:000 | DONE cmt | em 16 16 |        |             | ; Gforth uses S>NUMBER? and S>UNUMBER? which return the numbers and a flag, see
3633:000 | DONE cmt | em 16 16 |        |             | ; https://www.complang.tuwien.ac.at/forth/gforth/Docs-html/Number-Conversion.html
3634:000 | DONE cmt | em 16 16 |        |             | ; Another difference to Gforth is that we follow ANSI Forth that the dot to
3635:000 | DONE cmt | em 16 16 |        |             | ; signal a double cell number is required to be the last character of the
3636:000 | DONE cmt | em 16 16 |        |             | ; string. Number calls >NUMBER which in turn calls UM*, which uses tmp1, tmp2,
3637:000 | DONE cmt | em 16 16 |        |             | ; and tmp3, so we can't use them here, which is pain.
3638:000 | DONE lbl | em 16 16 | 005a90 |             | xt_number                            
3639:000 | DONE dir | em 16 16 |        |             |         .!a16                        
3640:000 | DONE cmt | em 16 16 |        |             |                 ; The flags for sign and double are kept on the stack because
3641:000 | DONE cmt | em 16 16 |        |             |                 ; we've run out of temporary variables. MSB is for minus, LSB is
3642:000 | DONE cmt | em 16 16 |        |             |                 ; for double
3643:000 | DONE ins | em 16 16 | 005a90 | f4 00 00    |                 phe.# 0000           
3644:000 | DONE wsp | em 16 16 |        |             |
3645:000 | DONE ins | em 16 16 | 005a93 | 84 24       |                 sty.d 000024         save length of string, freeing Y
3646:000 | DONE wsp | em 16 16 |        |             |
3647:000 | DONE cmt | em 16 16 |        |             |                 ; if the first character is a minus, strip it off and set
3648:000 | DONE cmt | em 16 16 |        |             |                 ; a flag
3649:000 | DONE ins | em 16 16 | 005a95 | e2 20       |                 sep 20               
3649:001 | DONE ctl | em  8 16 |        |             |         .!a8
3650:000 | DONE ins | em  8 16 | 005a97 | a1 00       |                 lda.dxi 00           get first character
3651:000 | DONE ins | em  8 16 | 005a99 | c9 2d       |                 cmp.# 2d             
3652:000 | DONE ins | em  8 16 | 005a9b | c2 20       |                 rep 20               
3652:001 | DONE ctl | em 16 16 |        |             |         .!a16
3653:000 | DONE ins | em 16 16 | 005a9d | d0 09       |                 bne 005aa8           
3654:000 | DONE wsp | em 16 16 |        |             |
3655:000 | DONE cmt | em 16 16 |        |             |                 ; We have a minus.
3656:000 | DONE ins | em 16 16 | 005a9f | 68          |                 pla                  
3657:000 | DONE ins | em 16 16 | 005aa0 | 09 00 ff    |                 ora.# 0ff00          MSB is minus
3658:000 | DONE ins | em 16 16 | 005aa3 | 48          |                 pha                  
3659:000 | DONE wsp | em 16 16 |        |             |
3660:000 | DONE ins | em 16 16 | 005aa4 | f6 00       |                 inc.dx 00            start one character later
3661:000 | DONE ins | em 16 16 | 005aa6 | c6 24       |                 dec.d 000024         reduce string length by one
3662:000 | DONE wsp | em 16 16 |        |             |
3663:000 | DONE lbl | em 16 16 | 005aa8 |             | number_dot                           
3664:000 | DONE cmt | em 16 16 |        |             |                 ; if the last character is a dot, strip it off and set a flag
3665:000 | DONE ins | em 16 16 | 005aa8 | a5 24       |                 lda.d 000024         get the string length
3666:000 | DONE ins | em 16 16 | 005aaa | 3a          |                 dec.a                subtract one to convert length to index
3667:000 | DONE ins | em 16 16 | 005aab | 18          |                 clc                  
3668:000 | DONE ins | em 16 16 | 005aac | 75 00       |                 adc.dx 00            add length of string
3669:000 | DONE ins | em 16 16 | 005aae | a8          |                 tay                  
3670:000 | DONE ins | em 16 16 | 005aaf | e2 20       |                 sep 20               
3670:001 | DONE ctl | em  8 16 |        |             |         .!a8
3671:000 | DONE ins | em  8 16 | 005ab1 | b9 00 00    |                 lda.y 0000           get last character
3672:000 | DONE ins | em  8 16 | 005ab4 | c9 2e       |                 cmp.# 2e             
3673:000 | DONE ins | em  8 16 | 005ab6 | c2 20       |                 rep 20               
3673:001 | DONE ctl | em 16 16 |        |             |         .!a16
3674:000 | DONE ins | em 16 16 | 005ab8 | d0 07       |                 bne 005ac1           
3675:000 | DONE wsp | em 16 16 |        |             |
3676:000 | DONE cmt | em 16 16 |        |             |                 ; we have a dot
3677:000 | DONE ins | em 16 16 | 005aba | 68          |                 pla                  get the flag back
3678:000 | DONE ins | em 16 16 | 005abb | 09 ff 00    |                 ora.# 00ff           LSB is double
3679:000 | DONE ins | em 16 16 | 005abe | 48          |                 pha                  
3680:000 | DONE wsp | em 16 16 |        |             |
3681:000 | DONE ins | em 16 16 | 005abf | c6 24       |                 dec.d 000024         reduce string length by one
3682:000 | DONE wsp | em 16 16 |        |             |
3683:000 | DONE lbl | em 16 16 | 005ac1 |             | number_main                          
3684:000 | DONE cmt | em 16 16 |        |             |                 ; set up stack for subroutine jump to >NUMBER
3685:000 | DONE ins | em 16 16 | 005ac1 | b5 00       |                 lda.dx 00            get the string address to safety
3686:000 | DONE ins | em 16 16 | 005ac3 | 74 00       |                 stz.dx 00            NOS is now zero
3687:000 | DONE ins | em 16 16 | 005ac5 | ca          |                 dex                  
3688:000 | DONE ins | em 16 16 | 005ac6 | ca          |                 dex                  
3689:000 | DONE ins | em 16 16 | 005ac7 | 74 00       |                 stz.dx 00            3OS and NOS are now zero
3690:000 | DONE ins | em 16 16 | 005ac9 | ca          |                 dex                  
3691:000 | DONE ins | em 16 16 | 005aca | ca          |                 dex                  
3692:000 | DONE wsp | em 16 16 |        |             |
3693:000 | DONE ins | em 16 16 | 005acb | 95 00       |                 sta.dx 00            address is back as NOS
3694:000 | DONE ins | em 16 16 | 005acd | a4 24       |                 ldy.d 000024         length is back as TOS
3695:000 | DONE wsp | em 16 16 |        |             |
3696:000 | DONE lbl | em 16 16 | 005acf |             | number_loop                          
3697:000 | DONE ins | em 16 16 | 005acf | 20 5e 51    |                 jsr 00515e           ( ud addr u -- ud addr u )
3698:000 | DONE wsp | em 16 16 |        |             |
3699:000 | DONE ins | em 16 16 | 005ad2 | 98          |                 tya                  test length of returned string, should be 0
3700:000 | DONE ins | em 16 16 | 005ad3 | f0 06       |                 beq 005adb           
3701:000 | DONE wsp | em 16 16 |        |             |
3702:000 | DONE cmt | em 16 16 |        |             |                 ; Something went wrong during conversion, we still have stuff
3703:000 | DONE cmt | em 16 16 |        |             |                 ; left over. Print error string and abort. If number was called
3704:000 | DONE cmt | em 16 16 |        |             |                 ; by INTERPRET, we've already checked for words, so we're in
3705:000 | DONE cmt | em 16 16 |        |             |                 ; trouble one way or another
3706:000 | DONE cmt | em 16 16 |        |             |                 ; TODO print offending string
3707:000 | DONE ins | em 16 16 | 005ad5 | a9 f1 6f    |                 lda.# 006ff1         
3708:000 | DONE ins | em 16 16 | 005ad8 | 4c 67 68    |                 jmp 006867           
3709:000 | DONE wsp | em 16 16 |        |             |
3710:000 | DONE lbl | em 16 16 | 005adb |             | number_ok                            
3711:000 | DONE cmt | em 16 16 |        |             |                 ; All characters successfully converted. Drop the string info
3712:000 | DONE ins | em 16 16 | 005adb | b4 02       |                 ldy.dx 02            
3713:000 | DONE ins | em 16 16 | 005add | e8          |                 inx                  
3714:000 | DONE ins | em 16 16 | 005ade | e8          |                 inx                  
3715:000 | DONE ins | em 16 16 | 005adf | e8          |                 inx                  
3716:000 | DONE ins | em 16 16 | 005ae0 | e8          |                 inx                  
3717:000 | DONE wsp | em 16 16 |        |             |
3718:000 | DONE cmt | em 16 16 |        |             |                 ; We have a double-cell number on the Data Stack that might have
3719:000 | DONE cmt | em 16 16 |        |             |                 ; a minus and might actually be single-cell
3720:000 | DONE ins | em 16 16 | 005ae1 | 68          |                 pla                  get copy of the flags
3721:000 | DONE ins | em 16 16 | 005ae2 | 48          |                 pha                  
3722:000 | DONE ins | em 16 16 | 005ae3 | 29 ff 00    |                 and.# 00ff           only keep the part with the number size (LSB)
3723:000 | DONE ins | em 16 16 | 005ae6 | f0 1b       |                 beq 005b03           
3724:000 | DONE wsp | em 16 16 |        |             |
3725:000 | DONE cmt | em 16 16 |        |             |                 ; This is a double-cell number. If it had a minus, we'll have to
3726:000 | DONE cmt | em 16 16 |        |             |                 ; negate it
3727:000 | DONE ins | em 16 16 | 005ae8 | 68          |                 pla                  
3728:000 | DONE ins | em 16 16 | 005ae9 | 29 00 ff    |                 and.# 0ff00          only keep part with the sing (MSB)
3729:000 | DONE ins | em 16 16 | 005aec | f0 25       |                 beq 005b13           no minus, all done
3730:000 | DONE wsp | em 16 16 |        |             |
3731:000 | DONE ins | em 16 16 | 005aee | b5 00       |                 lda.dx 00            DNEGATE, starts with LSW
3732:000 | DONE ins | em 16 16 | 005af0 | 49 ff ff    |                 eor.# 0ffff          
3733:000 | DONE wsp | em 16 16 |        |             |
3734:000 | DONE cmt | em 16 16 |        |             |                 ; INC won't affect the carry flag, so we have to do this the
3735:000 | DONE cmt | em 16 16 |        |             |                 ; hard way
3736:000 | DONE ins | em 16 16 | 005af3 | 18          |                 clc                  
3737:000 | DONE ins | em 16 16 | 005af4 | 69 01 00    |                 adc.# 0001           
3738:000 | DONE ins | em 16 16 | 005af7 | 95 00       |                 sta.dx 00            
3739:000 | DONE wsp | em 16 16 |        |             |
3740:000 | DONE cmt | em 16 16 |        |             |                 ; now MSW (in TOS)
3741:000 | DONE ins | em 16 16 | 005af9 | 98          |                 tya                  
3742:000 | DONE ins | em 16 16 | 005afa | 49 ff ff    |                 eor.# 0ffff          
3743:000 | DONE ins | em 16 16 | 005afd | 69 00 00    |                 adc.# 0000           we are only interested in the carry
3744:000 | DONE ins | em 16 16 | 005b00 | a8          |                 tay                  
3745:000 | DONE wsp | em 16 16 |        |             |
3746:000 | DONE ins | em 16 16 | 005b01 | 80 10       |                 bra 005b13           
3747:000 | DONE wsp | em 16 16 |        |             |
3748:000 | DONE lbl | em 16 16 | 005b03 |             | number_single                        
3749:000 | DONE cmt | em 16 16 |        |             |                 ; This is a single cell number, so we just drop the top cell
3750:000 | DONE ins | em 16 16 | 005b03 | b4 00       |                 ldy.dx 00            
3751:000 | DONE ins | em 16 16 | 005b05 | e8          |                 inx                  
3752:000 | DONE ins | em 16 16 | 005b06 | e8          |                 inx                  
3753:000 | DONE wsp | em 16 16 |        |             |
3754:000 | DONE cmt | em 16 16 |        |             |                 ; If we have a minus, we'll have to negate it. Note this code is
3755:000 | DONE cmt | em 16 16 |        |             |                 ; doubled for speed
3756:000 | DONE ins | em 16 16 | 005b07 | 68          |                 pla                  
3757:000 | DONE ins | em 16 16 | 005b08 | 29 00 ff    |                 and.# 0ff00          
3758:000 | DONE ins | em 16 16 | 005b0b | f0 06       |                 beq 005b13           no minus, all done
3759:000 | DONE wsp | em 16 16 |        |             |
3760:000 | DONE ins | em 16 16 | 005b0d | 98          |                 tya                  NEGATE
3761:000 | DONE ins | em 16 16 | 005b0e | 49 ff ff    |                 eor.# 0ffff          
3762:000 | DONE ins | em 16 16 | 005b11 | 1a          |                 inc.a                
3763:000 | DONE ins | em 16 16 | 005b12 | a8          |                 tay                  fall through to end
3764:000 | DONE wsp | em 16 16 |        |             |
3765:000 | DONE lbl | em 16 16 | 005b13 |             | z_number                             
3765:001 | DONE ins | em 16 16 | 005b13 | 60          |                 rts                  
3766:000 | DONE wsp | em 16 16 |        |             |
3767:000 | DONE wsp | em 16 16 |        |             |
3768:000 | DONE cmt | em 16 16 |        |             | ; -------------------------------------------------------------------
3769:000 | DONE cmt | em 16 16 |        |             | ; OR ( n m -- n ) 6 bytes / X cycles
3770:000 | DONE cmt | em 16 16 |        |             | ; Logical OR
3771:000 | DONE lbl | em 16 16 | 005b14 |             | xt_or                                
3772:000 | DONE ins | em 16 16 | 005b14 | 98          |                 tya                  
3773:000 | DONE ins | em 16 16 | 005b15 | 15 00       |                 ora.dx 00            
3774:000 | DONE ins | em 16 16 | 005b17 | a8          |                 tay                  
3775:000 | DONE wsp | em 16 16 |        |             |
3776:000 | DONE ins | em 16 16 | 005b18 | e8          |                 inx                  
3777:000 | DONE ins | em 16 16 | 005b19 | e8          |                 inx                  
3778:000 | DONE wsp | em 16 16 |        |             |
3779:000 | DONE lbl | em 16 16 | 005b1a |             | z_or                                 
3779:001 | DONE ins | em 16 16 | 005b1a | 60          |                 rts                  
3780:000 | DONE wsp | em 16 16 |        |             |
3781:000 | DONE wsp | em 16 16 |        |             |
3782:000 | DONE cmt | em 16 16 |        |             | ; -------------------------------------------------------------------
3783:000 | DONE cmt | em 16 16 |        |             | ; OUTPUT ( -- addr ) X bytes / X cycles
3784:000 | DONE cmt | em 16 16 |        |             | ; Return the address where the jump target for EMIT is stored. By default, this
3785:000 | DONE cmt | em 16 16 |        |             | ; will hold the value of put_chr from the kernel routine, but this can be
3786:000 | DONE cmt | em 16 16 |        |             | ; changed by the user
3787:000 | DONE lbl | em 16 16 | 005b1b |             | xt_output                            
3788:000 | DONE ins | em 16 16 | 005b1b | ca          |                 dex                  
3789:000 | DONE ins | em 16 16 | 005b1c | ca          |                 dex                  
3790:000 | DONE ins | em 16 16 | 005b1d | 94 00       |                 sty.dx 00            
3791:000 | DONE wsp | em 16 16 |        |             |
3792:000 | DONE ins | em 16 16 | 005b1f | a0 0e 00    |                 ldy.# 00000e         
3793:000 | DONE wsp | em 16 16 |        |             |
3794:000 | DONE lbl | em 16 16 | 005b22 |             | z_output                             
3794:001 | DONE ins | em 16 16 | 005b22 | 60          |                 rts                  
3795:000 | DONE wsp | em 16 16 |        |             |
3796:000 | DONE wsp | em 16 16 |        |             |
3797:000 | DONE cmt | em 16 16 |        |             | ; -------------------------------------------------------------------
3798:000 | DONE cmt | em 16 16 |        |             | ; OVER ( n m -- n m n )  6 bytes / 14 cycles
3799:000 | DONE cmt | em 16 16 |        |             | ; Push NOS on Data Stack
3800:000 | DONE lbl | em 16 16 | 005b23 |             | xt_over                              
3801:000 | DONE ins | em 16 16 | 005b23 | ca          |                 dex                  
3802:000 | DONE ins | em 16 16 | 005b24 | ca          |                 dex                  
3803:000 | DONE ins | em 16 16 | 005b25 | 94 00       |                 sty.dx 00            
3804:000 | DONE ins | em 16 16 | 005b27 | b4 02       |                 ldy.dx 02            
3805:000 | DONE wsp | em 16 16 |        |             |
3806:000 | DONE lbl | em 16 16 | 005b29 |             | z_over                               
3806:001 | DONE ins | em 16 16 | 005b29 | 60          |                 rts                  
3807:000 | DONE wsp | em 16 16 |        |             |
3808:000 | DONE wsp | em 16 16 |        |             |
3809:000 | DONE cmt | em 16 16 |        |             | ; -------------------------------------------------------------------
3810:000 | DONE cmt | em 16 16 |        |             | ; PAD ( -- addr ) 11 bytes / X cycles
3811:000 | DONE cmt | em 16 16 |        |             | ; Return address to a temporary area in free memory for user. Must be at least
3812:000 | DONE cmt | em 16 16 |        |             | ; 84 bytes in size (says ANSI). It is located relative to the compile area
3813:000 | DONE cmt | em 16 16 |        |             | ; pointer (CP) and therefore varies in position. This area is reserved for the
3814:000 | DONE cmt | em 16 16 |        |             | ; user and not used by the system
3815:000 | DONE lbl | em 16 16 | 005b2a |             | xt_pad                               
3816:000 | DONE dir | em 16 16 |        |             |         .!a16                        
3817:000 | DONE ins | em 16 16 | 005b2a | ca          |                 dex                  
3818:000 | DONE ins | em 16 16 | 005b2b | ca          |                 dex                  
3819:000 | DONE ins | em 16 16 | 005b2c | 94 00       |                 sty.dx 00            
3820:000 | DONE wsp | em 16 16 |        |             |
3821:000 | DONE ins | em 16 16 | 005b2e | a5 00       |                 lda.d 000000         
3822:000 | DONE ins | em 16 16 | 005b30 | 18          |                 clc                  
3823:000 | DONE ins | em 16 16 | 005b31 | 69 ff 00    |                 adc.# 0000ff         
3824:000 | DONE ins | em 16 16 | 005b34 | a8          |                 tay                  
3825:000 | DONE wsp | em 16 16 |        |             |
3826:000 | DONE lbl | em 16 16 | 005b35 |             | z_pad                                
3826:001 | DONE ins | em 16 16 | 005b35 | 60          |                 rts                  
3827:000 | DONE wsp | em 16 16 |        |             |
3828:000 | DONE wsp | em 16 16 |        |             |
3829:000 | DONE cmt | em 16 16 |        |             | ; -------------------------------------------------------------------
3830:000 | DONE cmt | em 16 16 |        |             | ; PAGE ( -- ) X bytes / X cycles
3831:000 | DONE cmt | em 16 16 |        |             | ; Clear the screen on vt-100 terminals by sending the code "ESC[2J". This is
3832:000 | DONE cmt | em 16 16 |        |             | ; only useful in interactive scenarios so we don't worry about speed
3833:000 | DONE cmt | em 16 16 |        |             | ; TODO rewrite with EMIT
3834:000 | DONE lbl | em 16 16 | 005b36 |             | xt_page                              
3835:000 | DONE ins | em 16 16 | 005b36 | a9 00 70    |                 lda.# 007000         
3836:000 | DONE ins | em 16 16 | 005b39 | 20 6d 68    |                 jsr 00686d           
3837:000 | DONE wsp | em 16 16 |        |             |
3838:000 | DONE cmt | em 16 16 |        |             |                 ; In theory, this should have moved the cursor to the top left
3839:000 | DONE cmt | em 16 16 |        |             |                 ; corner ("home"), but this doesn't seem to work in practice.
3840:000 | DONE cmt | em 16 16 |        |             |                 ; So we send "ESC[H" as well.
3841:000 | DONE ins | em 16 16 | 005b3c | a9 05 70    |                 lda.# 007005         
3842:000 | DONE ins | em 16 16 | 005b3f | 20 6d 68    |                 jsr 00686d           
3843:000 | DONE wsp | em 16 16 |        |             |
3844:000 | DONE lbl | em 16 16 | 005b42 |             | z_page                               
3844:001 | DONE ins | em 16 16 | 005b42 | 60          |                 rts                  
3845:000 | DONE wsp | em 16 16 |        |             |
3846:000 | DONE cmt | em 16 16 |        |             | ; -------------------------------------------------------------------
3847:000 | DONE cmt | em 16 16 |        |             | ; PARSE-NAME ( "name" -- addr u ) 41+ bytes / X cycles
3848:000 | DONE cmt | em 16 16 |        |             | ; Find next word in input string, skipping leading spaces. This is a special
3849:000 | DONE cmt | em 16 16 |        |             | ; form of PARSE and drops through to that word. See PARSE for more detail. We
3850:000 | DONE cmt | em 16 16 |        |             | ; use this word internally for the interpreter because it is a lot easier to use
3851:000 | DONE cmt | em 16 16 |        |             | ; http://forth-standard.org/standard/core/PARSE-NAME has a Forth implementation
3852:000 | DONE cmt | em 16 16 |        |             | ; Roughly, the word is comparable to  BL WORD COUNT in old terms.
3853:000 | DONE lbl | em 16 16 | 005b43 |             | xt_parse-name                        
3854:000 | DONE dir | em 16 16 |        |             |         .!a16                        
3855:000 | DONE dir | em 16 16 |        |             |         .!xy16                       
3856:000 | DONE cmt | em 16 16 |        |             |                 ; skip leading spaces, changing >IN, then place SPACE
3857:000 | DONE cmt | em 16 16 |        |             |                 ; character on data stack for PARSE
3858:000 | DONE ins | em 16 16 | 005b43 | 5a          |                 phy                  save TOS for later use
3859:000 | DONE ins | em 16 16 | 005b44 | a4 0c       |                 ldy.d 00000c         >IN
3860:000 | DONE ins | em 16 16 | 005b46 | e2 20       |                 sep 20               
3860:001 | DONE ctl | em  8 16 |        |             |         .!a8
3861:000 | DONE lbl | em  8 16 | 005b48 |             | parse-name_loop                      
3862:000 | DONE ins | em  8 16 | 005b48 | c4 0a       |                 cpy.d 00000a         end of line?
3863:000 | DONE ins | em  8 16 | 005b4a | f0 09       |                 beq 005b55           
3864:000 | DONE wsp | em  8 16 |        |             |
3865:000 | DONE ins | em  8 16 | 005b4c | b1 08       |                 lda.diy 000008       LDA (CIB),Y
3866:000 | DONE ins | em  8 16 | 005b4e | c9 20       |                 cmp.# AscSP          
3867:000 | DONE ins | em  8 16 | 005b50 | d0 17       |                 bne 005b69           
3868:000 | DONE ins | em  8 16 | 005b52 | c8          |                 iny                  
3869:000 | DONE ins | em  8 16 | 005b53 | 80 f3       |                 bra 005b48           
3870:000 | DONE wsp | em  8 16 |        |             |
3871:000 | DONE lbl | em  8 16 | 005b55 |             | parse-name_empty_line                
3872:000 | DONE ins | em  8 16 | 005b55 | c2 20       |                 rep 20               
3872:001 | DONE ctl | em 16 16 |        |             |         .!a16
3873:000 | DONE cmt | em 16 16 |        |             |                 ; The Gforth documentation does not say what address is returned
3874:000 | DONE cmt | em 16 16 |        |             |                 ; if a string with only spaces is returned. Experiments with
3875:000 | DONE cmt | em 16 16 |        |             |                 ; the word  : PNT ( "name" -- ) PARSE-NAME SWAP U. U. TYPE ;
3876:000 | DONE cmt | em 16 16 |        |             |                 ; show that it returns the address of the last space in the
3877:000 | DONE cmt | em 16 16 |        |             |                 ; input, which is cib+ciblen. So we do that as well.
3878:000 | DONE ins | em 16 16 | 005b57 | ca          |                 dex                  
3879:000 | DONE ins | em 16 16 | 005b58 | ca          |                 dex                  
3880:000 | DONE ins | em 16 16 | 005b59 | ca          |                 dex                  
3881:000 | DONE ins | em 16 16 | 005b5a | ca          |                 dex                  
3882:000 | DONE wsp | em 16 16 |        |             |
3883:000 | DONE ins | em 16 16 | 005b5b | 7a          |                 ply                  restore old TOS as 3OS
3884:000 | DONE ins | em 16 16 | 005b5c | 94 02       |                 sty.dx 02            
3885:000 | DONE wsp | em 16 16 |        |             |
3886:000 | DONE ins | em 16 16 | 005b5e | a5 08       |                 lda.d 000008         
3887:000 | DONE ins | em 16 16 | 005b60 | 18          |                 clc                  
3888:000 | DONE ins | em 16 16 | 005b61 | 65 0a       |                 adc.d 00000a         
3889:000 | DONE ins | em 16 16 | 005b63 | 95 00       |                 sta.dx 00            Address as NOS
3890:000 | DONE wsp | em 16 16 |        |             |
3891:000 | DONE ins | em 16 16 | 005b65 | a0 00 00    |                 ldy.# 0000           TOS
3892:000 | DONE wsp | em 16 16 |        |             |
3893:000 | DONE ins | em 16 16 | 005b68 | 60          |                 rts                  don't have to go through PARSE
3894:000 | DONE wsp | em 16 16 |        |             |
3895:000 | DONE lbl | em 16 16 | 005b69 |             | parse-name_found                     
3896:000 | DONE dir | em 16 16 |        |             |         .!xy16                       
3897:000 | DONE ins | em 16 16 | 005b69 | c2 20       |                 rep 20               
3897:001 | DONE ctl | em 16 16 |        |             |         .!a16
3898:000 | DONE ins | em 16 16 | 005b6b | 84 0c       |                 sty.d 00000c         new >IN
3899:000 | DONE wsp | em 16 16 |        |             |
3900:000 | DONE ins | em 16 16 | 005b6d | 7a          |                 ply                  recover TOS
3901:000 | DONE ins | em 16 16 | 005b6e | ca          |                 dex                  
3902:000 | DONE ins | em 16 16 | 005b6f | ca          |                 dex                  
3903:000 | DONE ins | em 16 16 | 005b70 | 94 00       |                 sty.dx 00            
3904:000 | DONE wsp | em 16 16 |        |             |
3905:000 | DONE ins | em 16 16 | 005b72 | a0 20 00    |                 ldy.# AscSP          put space on TOS for PARSE
3906:000 | DONE wsp | em 16 16 |        |             |
3907:000 | DONE cmt | em 16 16 |        |             |                 ; fall thru to PARSE
3908:000 | DONE wsp | em 16 16 |        |             |
3909:000 | DONE cmt | em 16 16 |        |             | ; -------------------------------------------------------------------
3910:000 | DONE cmt | em 16 16 |        |             | ; PARSE ( c "name" -- addr u ) 45 bytes / X+ cycles
3911:000 | DONE cmt | em 16 16 |        |             | ; Find word in input string delimited by character given Do not skip leading
3912:000 | DONE cmt | em 16 16 |        |             | ; delimiters, this is an important difference to PARSE-NAME. PARSE and
3913:000 | DONE cmt | em 16 16 |        |             | ; PARSE-NAME replace WORD in modern systems. See the ANSI documentation at
3914:000 | DONE cmt | em 16 16 |        |             | ; http://www.forth200x.org/documents/html3/rationale.html#rat:core:PARSE
3915:000 | DONE cmt | em 16 16 |        |             | ; PARSE-NAME drops through to here
3916:000 | DONE cmt | em 16 16 |        |             | ;
3917:000 | DONE cmt | em 16 16 |        |             | ;    cib   cib+toin    cib+ciblen
3918:000 | DONE cmt | em 16 16 |        |             | ;     v       v             v
3919:000 | DONE cmt | em 16 16 |        |             | ;     |#####################|              Length of found string:
3920:000 | DONE cmt | em 16 16 |        |             | ;                                          ciblen - toin
3921:000 | DONE cmt | em 16 16 |        |             | ;     +------>|  toin (>IN)
3922:000 | DONE cmt | em 16 16 |        |             | ;     +-------------------->|  ciblen
3923:000 | DONE cmt | em 16 16 |        |             | ;
3924:000 | DONE cmt | em 16 16 |        |             | ; The input string is stored starting at the address in the Current Input Buffer
3925:000 | DONE cmt | em 16 16 |        |             | ; (CIB), the length of which is in CIBLEN. While searching for the delimiter,
3926:000 | DONE cmt | em 16 16 |        |             | ; TOIN (>IN) points to the where we currently are. Since PARSE does not skip
3927:000 | DONE cmt | em 16 16 |        |             | ; leading delimiters, we assume we are on a useful string.
3928:000 | DONE lbl | em 16 16 | 005b75 |             | xt_parse                             
3929:000 | DONE dir | em 16 16 |        |             |         .!a16                        
3930:000 | DONE dir | em 16 16 |        |             |         .!xy16                       
3931:000 | DONE ins | em 16 16 | 005b75 | 84 1c       |                 sty.d 00001c         save delimiter, char is LSB
3932:000 | DONE wsp | em 16 16 |        |             |
3933:000 | DONE cmt | em 16 16 |        |             |                 ; save beginning of new word (cib+toin) to NOS. Don't need to
3934:000 | DONE cmt | em 16 16 |        |             |                 ; worry about TOS because Y gets clobbered anyway before we
3935:000 | DONE cmt | em 16 16 |        |             |                 ; return
3936:000 | DONE ins | em 16 16 | 005b77 | a5 0c       |                 lda.d 00000c         
3937:000 | DONE ins | em 16 16 | 005b79 | 85 20       |                 sta.d 000020         save >IN for later length calculation
3938:000 | DONE ins | em 16 16 | 005b7b | 18          |                 clc                  
3939:000 | DONE ins | em 16 16 | 005b7c | 65 08       |                 adc.d 000008         
3940:000 | DONE wsp | em 16 16 |        |             |
3941:000 | DONE ins | em 16 16 | 005b7e | ca          |                 dex                  save addr as NOS
3942:000 | DONE ins | em 16 16 | 005b7f | ca          |                 dex                  
3943:000 | DONE ins | em 16 16 | 005b80 | 95 00       |                 sta.dx 00            
3944:000 | DONE wsp | em 16 16 |        |             |
3945:000 | DONE ins | em 16 16 | 005b82 | 64 1e       |                 stz.d 00001e         offset for EOL/char found adjustment of >IN
3946:000 | DONE wsp | em 16 16 |        |             |
3947:000 | DONE cmt | em 16 16 |        |             |                 ; prepare loop using Y as index
3948:000 | DONE ins | em 16 16 | 005b84 | a4 0c       |                 ldy.d 00000c         
3949:000 | DONE ins | em 16 16 | 005b86 | e2 20       |                 sep 20               
3949:001 | DONE ctl | em  8 16 |        |             |         .!a8
3950:000 | DONE wsp | em  8 16 |        |             |
3951:000 | DONE lbl | em  8 16 | 005b88 |             | parse_loop                           
3952:000 | DONE ins | em  8 16 | 005b88 | c4 0a       |                 cpy.d 00000a         check for EOL first
3953:000 | DONE ins | em  8 16 | 005b8a | f0 0d       |                 beq 005b99           
3954:000 | DONE wsp | em  8 16 |        |             |
3955:000 | DONE ins | em  8 16 | 005b8c | b1 08       |                 lda.diy 000008       LDA (CIB),Y
3956:000 | DONE ins | em  8 16 | 005b8e | c5 1c       |                 cmp.d 00001c         found delimiter?
3957:000 | DONE ins | em  8 16 | 005b90 | f0 03       |                 beq 005b95           
3958:000 | DONE ins | em  8 16 | 005b92 | c8          |                 iny                  
3959:000 | DONE ins | em  8 16 | 005b93 | 80 f3       |                 bra 005b88           
3960:000 | DONE wsp | em  8 16 |        |             |
3961:000 | DONE lbl | em  8 16 | 005b95 |             | parse_found_delimiter                
3962:000 | DONE cmt | em  8 16 |        |             |                 ; If we haven't reached the end of the line, but found
3963:000 | DONE cmt | em  8 16 |        |             |                 ; a delimiter, we want >IN to point to the next character after
3964:000 | DONE cmt | em  8 16 |        |             |                 ; the delimiter, not the delimiter itself. This is what the
3965:000 | DONE cmt | em  8 16 |        |             |                 ; offset is for
3966:000 | DONE ins | em  8 16 | 005b95 | c2 20       |                 rep 20               
3966:001 | DONE ctl | em 16 16 |        |             |         .!a16
3967:000 | DONE ins | em 16 16 | 005b97 | e6 1e       |                 inc.d 00001e         
3968:000 | DONE wsp | em 16 16 |        |             |
3969:000 | DONE lbl | em 16 16 | 005b99 |             | parse_reached_eol                    
3970:000 | DONE cmt | em 16 16 |        |             |                 ; calculate length of string found (see ascii drawing)
3971:000 | DONE dir | em 16 16 |        |             |         .!xy16                       
3972:000 | DONE ins | em 16 16 | 005b99 | c2 20       |                 rep 20               
3972:001 | DONE ctl | em 16 16 |        |             |         .!a16
3973:000 | DONE ins | em 16 16 | 005b9b | 98          |                 tya                  
3974:000 | DONE ins | em 16 16 | 005b9c | 38          |                 sec                  
3975:000 | DONE ins | em 16 16 | 005b9d | e5 20       |                 sbc.d 000020         original value for >IN / index of first char
3976:000 | DONE ins | em 16 16 | 005b9f | 48          |                 pha                  save so we can manipulate Y
3977:000 | DONE wsp | em 16 16 |        |             |
3978:000 | DONE cmt | em 16 16 |        |             |                 ; calculate new >IN
3979:000 | DONE ins | em 16 16 | 005ba0 | 98          |                 tya                  
3980:000 | DONE ins | em 16 16 | 005ba1 | 18          |                 clc                  
3981:000 | DONE ins | em 16 16 | 005ba2 | 65 1e       |                 adc.d 00001e         offset for EOL vs found delimiter
3982:000 | DONE ins | em 16 16 | 005ba4 | 85 0c       |                 sta.d 00000c         
3983:000 | DONE wsp | em 16 16 |        |             |
3984:000 | DONE ins | em 16 16 | 005ba6 | 7a          |                 ply                  length of string in TOS
3985:000 | DONE wsp | em 16 16 |        |             |
3986:000 | DONE lbl | em 16 16 | 005ba7 |             | z_parse-name                         
3987:000 | DONE lbl | em 16 16 | 005ba7 |             | z_parse                              
3987:001 | DONE ins | em 16 16 | 005ba7 | 60          |                 rts                  
3988:000 | DONE wsp | em 16 16 |        |             |
3989:000 | DONE wsp | em 16 16 |        |             |
3990:000 | DONE cmt | em 16 16 |        |             | ; -------------------------------------------------------------------
3991:000 | DONE cmt | em 16 16 |        |             | ; PICK ( n n u -- n n n ) X bytes / X cycles
3992:000 | DONE cmt | em 16 16 |        |             | ; Take the u-th element out of the stack and put it on TOS, overwriting the
3993:000 | DONE cmt | em 16 16 |        |             | ; current TOS. 0 PICK is equivalent to DUP, 1 PICK to OVER. Note that using PICK
3994:000 | DONE cmt | em 16 16 |        |             | ; is considered poor coding form. Also note that FIG Forth has a different
3995:000 | DONE cmt | em 16 16 |        |             | ; behavior for PICK than ANS Forth.
3996:000 | DONE cmt | em 16 16 |        |             | ; TODO use DEPTH to check for underflow
3997:000 | DONE lbl | em 16 16 | 005ba8 |             | xt_pick                              
3998:000 | DONE ins | em 16 16 | 005ba8 | 86 22       |                 stx.d 000022         
3999:000 | DONE wsp | em 16 16 |        |             |
4000:000 | DONE ins | em 16 16 | 005baa | 98          |                 tya                  Y is just an offset to the DSP
4001:000 | DONE ins | em 16 16 | 005bab | 0a          |                 asl.a                double because of cell size two bytes
4002:000 | DONE wsp | em 16 16 |        |             |
4003:000 | DONE ins | em 16 16 | 005bac | 18          |                 clc                  
4004:000 | DONE ins | em 16 16 | 005bad | 65 22       |                 adc.d 000022         
4005:000 | DONE wsp | em 16 16 |        |             |
4006:000 | DONE ins | em 16 16 | 005baf | aa          |                 tax                  
4007:000 | DONE ins | em 16 16 | 005bb0 | b5 00       |                 lda.dx 00            LDA $00,X
4008:000 | DONE ins | em 16 16 | 005bb2 | a8          |                 tay                  Is now TOS
4009:000 | DONE wsp | em 16 16 |        |             |
4010:000 | DONE ins | em 16 16 | 005bb3 | a6 22       |                 ldx.d 000022         
4011:000 | DONE wsp | em 16 16 |        |             |
4012:000 | DONE lbl | em 16 16 | 005bb5 |             | z_pick                               
4012:001 | DONE ins | em 16 16 | 005bb5 | 60          |                 rts                  
4013:000 | DONE wsp | em 16 16 |        |             |
4014:000 | DONE wsp | em 16 16 |        |             |
4015:000 | DONE cmt | em 16 16 |        |             | ; -------------------------------------------------------------------
4016:000 | DONE cmt | em 16 16 |        |             | ; +! "PLUSSTORE" ( n addr -- ) 15 bytes / X cycles
4017:000 | DONE cmt | em 16 16 |        |             | ; Add NOS to address in TOS
4018:000 | DONE lbl | em 16 16 | 005bb6 |             | xt_plusstore                         
4019:000 | DONE dir | em 16 16 |        |             |         .!a16                        
4020:000 | DONE ins | em 16 16 | 005bb6 | b9 00 00    |                 lda.y 0000           
4021:000 | DONE ins | em 16 16 | 005bb9 | 18          |                 clc                  
4022:000 | DONE ins | em 16 16 | 005bba | 75 00       |                 adc.dx 00            
4023:000 | DONE ins | em 16 16 | 005bbc | 99 00 00    |                 sta.y 0000           
4024:000 | DONE wsp | em 16 16 |        |             |
4025:000 | DONE ins | em 16 16 | 005bbf | b4 02       |                 ldy.dx 02            
4026:000 | DONE ins | em 16 16 | 005bc1 | e8          |                 inx                  
4027:000 | DONE ins | em 16 16 | 005bc2 | e8          |                 inx                  
4028:000 | DONE ins | em 16 16 | 005bc3 | e8          |                 inx                  
4029:000 | DONE ins | em 16 16 | 005bc4 | e8          |                 inx                  
4030:000 | DONE wsp | em 16 16 |        |             |
4031:000 | DONE lbl | em 16 16 | 005bc5 |             | z_plusstore                          
4031:001 | DONE ins | em 16 16 | 005bc5 | 60          |                 rts                  
4032:000 | DONE wsp | em 16 16 |        |             |
4033:000 | DONE wsp | em 16 16 |        |             |
4034:000 | DONE cmt | em 16 16 |        |             | ; -------------------------------------------------------------------
4035:000 | DONE cmt | em 16 16 |        |             | ; POSTPONE ( -- ) X bytes / X cycles
4036:000 | DONE cmt | em 16 16 |        |             | ; Add the compilation behavior of a word to a new word at compile time. If the
4037:000 | DONE cmt | em 16 16 |        |             | ; word that follows it is immediate, include it so that it will be compiled when
4038:000 | DONE cmt | em 16 16 |        |             | ; the word being defined is itself used for a new word. Tricky, but very useful.
4039:000 | DONE cmt | em 16 16 |        |             | ; Because POSTPONE expects a word (not an xt) in the input stream (not on the
4040:000 | DONE cmt | em 16 16 |        |             | ; Data Stack). This means we cannot build words with "jsr xt_postpone, jsr
4041:000 | DONE cmt | em 16 16 |        |             | ; <word>" directly. This word uses tmp1
4042:000 | DONE lbl | em 16 16 | 005bc6 |             | xt_postpone                          
4043:000 | DONE cmt | em 16 16 |        |             |                 ; get name from string
4044:000 | DONE ins | em 16 16 | 005bc6 | 20 43 5b    |                 jsr 005b43           ( addr n )
4045:000 | DONE wsp | em 16 16 |        |             |
4046:000 | DONE cmt | em 16 16 |        |             |                 ; if there is no word in stream, complain and abort
4047:000 | DONE ins | em 16 16 | 005bc9 | d0 06       |                 bne 005bd1           
4048:000 | DONE ins | em 16 16 | 005bcb | a9 54 6f    |                 lda.# 006f54         
4049:000 | DONE ins | em 16 16 | 005bce | 4c 67 68    |                 jmp 006867           
4050:000 | DONE wsp | em 16 16 |        |             |
4051:000 | DONE lbl | em 16 16 | 005bd1 |             | pp_got_word                          
4052:000 | DONE ins | em 16 16 | 005bd1 | 20 87 58    |                 jsr 005887           ( nt | 0 )
4053:000 | DONE wsp | em 16 16 |        |             |
4054:000 | DONE cmt | em 16 16 |        |             |                 ; if word is not in Dictionary, complain and abort
4055:000 | DONE ins | em 16 16 | 005bd4 | d0 03       |                 bne 005bd9           
4056:000 | DONE ins | em 16 16 | 005bd6 | a9 f1 6f    |                 lda.# 006ff1         
4057:000 | DONE wsp | em 16 16 |        |             |
4058:000 | DONE lbl | em 16 16 | 005bd9 |             | pp_got_nt                            
4059:000 | DONE cmt | em 16 16 |        |             |                 ; Keep nt safe for later use
4060:000 | DONE ins | em 16 16 | 005bd9 | 84 1c       |                 sty.d 00001c         
4061:000 | DONE wsp | em 16 16 |        |             |
4062:000 | DONE cmt | em 16 16 |        |             |                 ; We need the xt instead of the nt for the actual compiling
4063:000 | DONE ins | em 16 16 | 005bdb | 20 63 5a    |                 jsr 005a63           NAME>INT ( nt -- xt )
4064:000 | DONE wsp | em 16 16 |        |             |
4065:000 | DONE cmt | em 16 16 |        |             |                 ; See if this is an immediate word. This is easier with nt than
4066:000 | DONE cmt | em 16 16 |        |             |                 ; with xt
4067:000 | DONE ins | em 16 16 | 005bde | b2 1c       |                 lda.di 00001c        LDA (TMP1) - get status byte of word
4068:000 | DONE ins | em 16 16 | 005be0 | eb          |                 xba                  flags are MSB
4069:000 | DONE ins | em 16 16 | 005be1 | 29 02 00    |                 and.# IM             mask everything but Immediate bit
4070:000 | DONE ins | em 16 16 | 005be4 | f0 03       |                 beq 005be9           
4071:000 | DONE wsp | em 16 16 |        |             |
4072:000 | DONE cmt | em 16 16 |        |             |                 ; The word is immediate, so instead of executing it right now,
4073:000 | DONE cmt | em 16 16 |        |             |                 ; we compile it. xt is on the stack, so this is simple. The RTS
4074:000 | DONE cmt | em 16 16 |        |             |                 ; of COMPILE, takes us back to the original caller
4075:000 | DONE ins | em 16 16 | 005be6 | 4c 21 56    |                 jmp 005621           JSR/RTS
4076:000 | DONE wsp | em 16 16 |        |             |
4077:000 | DONE lbl | em 16 16 | 005be9 |             | pp_not_immediate                     
4078:000 | DONE cmt | em 16 16 |        |             |                 ; This is not an immediate word, so we enact "deferred
4079:000 | DONE cmt | em 16 16 |        |             |                 ; compilation" by including ' <NAME> COMPILE, which we do by
4080:000 | DONE cmt | em 16 16 |        |             |                 ; compiling the run-time routine of LITERAL, the xt itself, and
4081:000 | DONE cmt | em 16 16 |        |             |                 ; a subroutine jump to COMPILE,
4082:000 | DONE ins | em 16 16 | 005be9 | f4 c1 59    |                 phe.# 0059c1         PEA LITERAL_RT
4083:000 | DONE ins | em 16 16 | 005bec | 20 46 68    |                 jsr 006846           
4084:000 | DONE wsp | em 16 16 |        |             |
4085:000 | DONE cmt | em 16 16 |        |             |                 ; The xt is TOS. We can't use COMPILE, here because it might
4086:000 | DONE cmt | em 16 16 |        |             |                 ; decided to do something silly like compile it as a native word
4087:000 | DONE cmt | em 16 16 |        |             |                 ; and ruin everything
4088:000 | DONE ins | em 16 16 | 005bef | 20 3f 52    |                 jsr 00523f           
4089:000 | DONE wsp | em 16 16 |        |             |
4090:000 | DONE cmt | em 16 16 |        |             |                 ; compile COMPILE, - it's RTS takes us back to original caller
4091:000 | DONE ins | em 16 16 | 005bf2 | f4 21 56    |                 phe.# 005621         
4092:000 | DONE ins | em 16 16 | 005bf5 | 20 46 68    |                 jsr 006846           JSR/RTS
4093:000 | DONE wsp | em 16 16 |        |             |
4094:000 | DONE lbl | em 16 16 | 005bf8 |             | z_postpone                           
4094:001 | DONE ins | em 16 16 | 005bf8 | 60          |                 rts                  
4095:000 | DONE wsp | em 16 16 |        |             |
4096:000 | DONE wsp | em 16 16 |        |             |
4097:000 | DONE cmt | em 16 16 |        |             | ; -------------------------------------------------------------------
4098:000 | DONE cmt | em 16 16 |        |             | ; R@ "RFETCH" ( -- n ) (R: n -- n )  X bytes / X cycles
4099:000 | DONE cmt | em 16 16 |        |             | ; Get (not pull) Top of Return Stack. We follow Gforth in that this word is not
4100:000 | DONE cmt | em 16 16 |        |             | ; compiled only, because it can be interesting to know what the top of R is in
4101:000 | DONE cmt | em 16 16 |        |             | ; an interactive setting. However, this causes all kinds of problems if we try
4102:000 | DONE cmt | em 16 16 |        |             | ; to natively compile the word, so it does not get the NC flag even though it is
4103:000 | DONE cmt | em 16 16 |        |             | ; actually short enough to make that reasonable
4104:000 | DONE cmt | em 16 16 |        |             | ; TODO consider special case in COMPILE, see there
4105:000 | DONE lbl | em 16 16 | 005bf9 |             | xt_rfetch                            
4106:000 | DONE cmt | em 16 16 |        |             |                 ; get return address that is on top of the return stack
4107:000 | DONE ins | em 16 16 | 005bf9 | 68          |                 pla                  
4108:000 | DONE wsp | em 16 16 |        |             |
4109:000 | DONE ins | em 16 16 | 005bfa | ca          |                 dex                  
4110:000 | DONE ins | em 16 16 | 005bfb | ca          |                 dex                  
4111:000 | DONE ins | em 16 16 | 005bfc | 94 00       |                 sty.dx 00            
4112:000 | DONE wsp | em 16 16 |        |             |
4113:000 | DONE ins | em 16 16 | 005bfe | 7a          |                 ply                  get top of return stack and push copy back again
4114:000 | DONE ins | em 16 16 | 005bff | 5a          |                 phy                  
4115:000 | DONE wsp | em 16 16 |        |             |
4116:000 | DONE ins | em 16 16 | 005c00 | 48          |                 pha                  restore the return address
4117:000 | DONE wsp | em 16 16 |        |             |
4118:000 | DONE lbl | em 16 16 | 005c01 |             | z_rfetch                             
4118:001 | DONE ins | em 16 16 | 005c01 | 60          |                 rts                  
4119:000 | DONE wsp | em 16 16 |        |             |
4120:000 | DONE wsp | em 16 16 |        |             |
4121:000 | DONE cmt | em 16 16 |        |             | ; -------------------------------------------------------------------
4122:000 | DONE cmt | em 16 16 |        |             | ; R> "FROMR" ( -- n ) (R: n -- )  7 bytes / 23 cycles
4123:000 | DONE cmt | em 16 16 |        |             | ; Move Top of Return Stack to Top of Data Stack. Remember we have to move the
4124:000 | DONE cmt | em 16 16 |        |             | ; jump address out of the way first.
4125:000 | DONE cmt | em 16 16 |        |             | ; TODO consider stripping PHA/PLA if natively compiled (see COMPILE,)
4126:000 | DONE lbl | em 16 16 | 005c02 |             | xt_fromr                             
4127:000 | DONE cmt | em 16 16 |        |             |                 ; Rescue the address of the return jump that is currently top of
4128:000 | DONE cmt | em 16 16 |        |             |                 ; the Return Stack. If this word is natively compiled, this is
4129:000 | DONE cmt | em 16 16 |        |             |                 ; a waste of nine cycles
4130:000 | DONE ins | em 16 16 | 005c02 | 68          |                 pla                  
4131:000 | DONE wsp | em 16 16 |        |             |
4132:000 | DONE ins | em 16 16 | 005c03 | ca          |                 dex                  
4133:000 | DONE ins | em 16 16 | 005c04 | ca          |                 dex                  
4134:000 | DONE ins | em 16 16 | 005c05 | 94 00       |                 sty.dx 00            
4135:000 | DONE wsp | em 16 16 |        |             |
4136:000 | DONE ins | em 16 16 | 005c07 | 7a          |                 ply                  the actual work
4137:000 | DONE wsp | em 16 16 |        |             |
4138:000 | DONE ins | em 16 16 | 005c08 | 48          |                 pha                  get return address back
4139:000 | DONE wsp | em 16 16 |        |             |
4140:000 | DONE lbl | em 16 16 | 005c09 |             | z_fromr                              
4140:001 | DONE ins | em 16 16 | 005c09 | 60          |                 rts                  
4141:000 | DONE wsp | em 16 16 |        |             |
4142:000 | DONE wsp | em 16 16 |        |             |
4143:000 | DONE cmt | em 16 16 |        |             | ; -------------------------------------------------------------------
4144:000 | DONE cmt | em 16 16 |        |             | ; REFILL ( -- f ) X bytes / X cycles
4145:000 | DONE cmt | em 16 16 |        |             | ; "Attempt to fill the input buffer from the input source, returning a true flag
4146:000 | DONE cmt | em 16 16 |        |             | ; if successful. When the input source is the user input device, attempt to
4147:000 | DONE cmt | em 16 16 |        |             | ; receive input into the terminal input buffer. If successful, make the result
4148:000 | DONE cmt | em 16 16 |        |             | ; the input buffer, set >IN to zero, and return true. Receipt of a line
4149:000 | DONE cmt | em 16 16 |        |             | ; containing no characters is considered successful. If there is no input
4150:000 | DONE cmt | em 16 16 |        |             | ; available from the current input source, return false. When the input source
4151:000 | DONE cmt | em 16 16 |        |             | ; is a string from EVALUATE, return false and perform no other action."
4152:000 | DONE cmt | em 16 16 |        |             | ; See https://www.complang.tuwien.ac.at/forth/gforth/Docs-html/The-Input-Stream.html
4153:000 | DONE cmt | em 16 16 |        |             | ; and Conklin & Rather p. 156
4154:000 | DONE lbl | em 16 16 | 005c0a |             | xt_refill                            
4155:000 | DONE dir | em 16 16 |        |             |         .!a16                        
4156:000 | DONE dir | em 16 16 |        |             |         .!xy16                       
4157:000 | DONE cmt | em 16 16 |        |             |                 ; Get input source from SOURCE-ID. We don't have blocks in this
4158:000 | DONE cmt | em 16 16 |        |             |                 ; version, or else we would have to check BLK first. This is an
4159:000 | DONE cmt | em 16 16 |        |             |                 ; optimized version of a subroutine jump to SOURCE-ID
4160:000 | DONE ins | em 16 16 | 005c0a | a5 06       |                 lda.d 000006         
4161:000 | DONE ins | em 16 16 | 005c0c | d0 14       |                 bne 005c22           
4162:000 | DONE wsp | em 16 16 |        |             |
4163:000 | DONE cmt | em 16 16 |        |             |                 ; SOURCE-ID of zero means we're getting stuff from the keyboard
4164:000 | DONE cmt | em 16 16 |        |             |                 ; with ACCEPT.
4165:000 | DONE ins | em 16 16 | 005c0e | ca          |                 dex                  
4166:000 | DONE ins | em 16 16 | 005c0f | ca          |                 dex                  
4167:000 | DONE ins | em 16 16 | 005c10 | ca          |                 dex                  
4168:000 | DONE ins | em 16 16 | 005c11 | ca          |                 dex                  
4169:000 | DONE ins | em 16 16 | 005c12 | 94 02       |                 sty.dx 02            
4170:000 | DONE wsp | em 16 16 |        |             |
4171:000 | DONE ins | em 16 16 | 005c14 | a5 08       |                 lda.d 000008         address of current input buffer NOS
4172:000 | DONE ins | em 16 16 | 005c16 | 95 00       |                 sta.dx 00            
4173:000 | DONE ins | em 16 16 | 005c18 | a0 80 00    |                 ldy.# 000080         max number of chars to accept TOS
4174:000 | DONE wsp | em 16 16 |        |             |
4175:000 | DONE ins | em 16 16 | 005c1b | 20 55 54    |                 jsr 005455           ( addr n1 -- n2)
4176:000 | DONE wsp | em 16 16 |        |             |
4177:000 | DONE cmt | em 16 16 |        |             |                 ; ACCEPT returns the number of characters accepted, but we don't
4178:000 | DONE cmt | em 16 16 |        |             |                 ; need them. We just overwrite TOS this with the flag
4179:000 | DONE ins | em 16 16 | 005c1e | a0 ff ff    |                 ldy.# 0ffff          
4180:000 | DONE wsp | em 16 16 |        |             |
4181:000 | DONE ins | em 16 16 | 005c21 | 60          |                 rts                  
4182:000 | DONE wsp | em 16 16 |        |             |
4183:000 | DONE lbl | em 16 16 | 005c22 |             | refill_src_not_kbd                   
4184:000 | DONE cmt | em 16 16 |        |             |                 ; If SOURCE-ID doesn't return a zero, it must be a string in
4185:000 | DONE cmt | em 16 16 |        |             |                 ; memory or a file (remember, no blocks in this version)
4186:000 | DONE ins | em 16 16 | 005c22 | 1a          |                 inc.a                
4187:000 | DONE ins | em 16 16 | 005c23 | d0 06       |                 bne 005c2b           
4188:000 | DONE wsp | em 16 16 |        |             |
4189:000 | DONE cmt | em 16 16 |        |             |                 ; Simply return FALSE flag as per specification
4190:000 | DONE ins | em 16 16 | 005c25 | ca          |                 dex                  
4191:000 | DONE ins | em 16 16 | 005c26 | ca          |                 dex                  
4192:000 | DONE ins | em 16 16 | 005c27 | 94 00       |                 sty.dx 00            
4193:000 | DONE ins | em 16 16 | 005c29 | a8          |                 tay                  
4194:000 | DONE wsp | em 16 16 |        |             |
4195:000 | DONE ins | em 16 16 | 005c2a | 60          |                 rts                  
4196:000 | DONE wsp | em 16 16 |        |             |
4197:000 | DONE lbl | em 16 16 | 005c2b |             | refill_source_is_not_string          
4198:000 | DONE cmt | em 16 16 |        |             |                 ; Since we don't have blocks, this must mean that we are trying
4199:000 | DONE cmt | em 16 16 |        |             |                 ; to read from a file. However, we don't have files yet, so we
4200:000 | DONE cmt | em 16 16 |        |             |                 ; report an error and jump to ABORT.
4201:000 | DONE ins | em 16 16 | 005c2b | a9 a9 6f    |                 lda.# 006fa9         
4202:000 | DONE ins | em 16 16 | 005c2e | 4c 67 68    |                 jmp 006867           
4203:000 | DONE wsp | em 16 16 |        |             |
4204:000 | DONE lbl | em 16 16 | 005c31 |             | z_refill                             
4204:001 | DONE ins | em 16 16 | 005c31 | 60          |                 rts                  dummy for compiling
4205:000 | DONE wsp | em 16 16 |        |             |
4206:000 | DONE wsp | em 16 16 |        |             |
4207:000 | DONE cmt | em 16 16 |        |             | ; -------------------------------------------------------------------
4208:000 | DONE cmt | em 16 16 |        |             | ; ROT ( a b c -- b c a ) X bytes / X cycles
4209:000 | DONE cmt | em 16 16 |        |             | ; Rotate the top three entries downwards (third entry becomes first)
4210:000 | DONE cmt | em 16 16 |        |             | ; Remember this with the "R" for "revolution": The bottom entry becomes the top.
4211:000 | DONE lbl | em 16 16 | 005c32 |             | xt_rot                               
4212:000 | DONE dir | em 16 16 |        |             |         .!a16                        
4213:000 | DONE dir | em 16 16 |        |             |         .!xy16                       
4214:000 | DONE ins | em 16 16 | 005c32 | b5 00       |                 lda.dx 00            save b
4215:000 | DONE ins | em 16 16 | 005c34 | 94 00       |                 sty.dx 00            move c to NOS
4216:000 | DONE ins | em 16 16 | 005c36 | b4 02       |                 ldy.dx 02            move a to TOS
4217:000 | DONE ins | em 16 16 | 005c38 | 95 02       |                 sta.dx 02            save b as 3OS
4218:000 | DONE wsp | em 16 16 |        |             |
4219:000 | DONE lbl | em 16 16 | 005c3a |             | z_rot                                
4219:001 | DONE ins | em 16 16 | 005c3a | 60          |                 rts                  
4220:000 | DONE wsp | em 16 16 |        |             |
4221:000 | DONE wsp | em 16 16 |        |             |
4222:000 | DONE cmt | em 16 16 |        |             | ; -------------------------------------------------------------------
4223:000 | DONE cmt | em 16 16 |        |             | ; RSHIFT ( n u -- u ) X bytes / X cycles
4224:000 | DONE cmt | em 16 16 |        |             | ; Shift TOS right, filling vacant bits with zero
4225:000 | DONE lbl | em 16 16 | 005c3b |             | xt_rshift                            
4226:000 | DONE cmt | em 16 16 |        |             |                 ; We shift at most 16 bits, because anything above that will be
4227:000 | DONE cmt | em 16 16 |        |             |                 ; zeros anyway
4228:000 | DONE ins | em 16 16 | 005c3b | 98          |                 tya                  
4229:000 | DONE ins | em 16 16 | 005c3c | 29 0f 00    |                 and.# 000f           
4230:000 | DONE ins | em 16 16 | 005c3f | f0 09       |                 beq 005c4a           if zero shifts, we're done
4231:000 | DONE wsp | em 16 16 |        |             |
4232:000 | DONE ins | em 16 16 | 005c41 | a8          |                 tay                  number of shifts is TOS
4233:000 | DONE ins | em 16 16 | 005c42 | b5 00       |                 lda.dx 00            number is in NOS
4234:000 | DONE lbl | em 16 16 | 005c44 |             | rshift_loop                          
4235:000 | DONE ins | em 16 16 | 005c44 | 4a          |                 lsr.a                
4236:000 | DONE ins | em 16 16 | 005c45 | 88          |                 dey                  
4237:000 | DONE ins | em 16 16 | 005c46 | d0 fc       |                 bne 005c44           
4238:000 | DONE wsp | em 16 16 |        |             |
4239:000 | DONE ins | em 16 16 | 005c48 | 95 00       |                 sta.dx 00            put NOS, which last step will pull up
4240:000 | DONE wsp | em 16 16 |        |             |
4241:000 | DONE lbl | em 16 16 | 005c4a |             | rshift_done                          
4242:000 | DONE ins | em 16 16 | 005c4a | b4 00       |                 ldy.dx 00            
4243:000 | DONE ins | em 16 16 | 005c4c | e8          |                 inx                  
4244:000 | DONE ins | em 16 16 | 005c4d | e8          |                 inx                  
4245:000 | DONE wsp | em 16 16 |        |             |
4246:000 | DONE lbl | em 16 16 | 005c4e |             | z_rshift                             
4246:001 | DONE ins | em 16 16 | 005c4e | 60          |                 rts                  
4247:000 | DONE wsp | em 16 16 |        |             |
4248:000 | DONE wsp | em 16 16 |        |             |
4249:000 | DONE cmt | em 16 16 |        |             | ; -------------------------------------------------------------------
4250:000 | DONE cmt | em 16 16 |        |             | ; S" "SQUOTE" ( "string" -- addr u ) X bytes / X cycles
4251:000 | DONE cmt | em 16 16 |        |             | ; Store address and length of string given, returning ( addr u ). ANSI core
4252:000 | DONE cmt | em 16 16 |        |             | ; claims this is compile-only, but the file set expands it to be interpreted, so
4253:000 | DONE cmt | em 16 16 |        |             | ; it is a state-sensitive word, which are evil. This can also be realized as
4254:000 | DONE cmt | em 16 16 |        |             | ; : S" [CHAR] " PARSE POSTPONE SLITERAL ; IMMEDIATE  but it is used so much we
4255:000 | DONE cmt | em 16 16 |        |             | ; want it in code
4256:000 | DONE lbl | em 16 16 | 005c4f |             | xt_squote                            
4257:000 | DONE cmt | em 16 16 |        |             |                 ; we use PARSE to find the end of the sting. If the string is
4258:000 | DONE cmt | em 16 16 |        |             |                 ; empty, we don't complain, following Gforth's behavior
4259:000 | DONE ins | em 16 16 | 005c4f | ca          |                 dex                  
4260:000 | DONE ins | em 16 16 | 005c50 | ca          |                 dex                  
4261:000 | DONE ins | em 16 16 | 005c51 | 94 00       |                 sty.dx 00            
4262:000 | DONE wsp | em 16 16 |        |             |
4263:000 | DONE ins | em 16 16 | 005c53 | a0 22 00    |                 ldy.# 0022           ASCII for " in hex
4264:000 | DONE ins | em 16 16 | 005c56 | 20 75 5b    |                 jsr 005b75           Returns ( addr u ) of string
4265:000 | DONE wsp | em 16 16 |        |             |
4266:000 | DONE cmt | em 16 16 |        |             |                 ; What happens now depends on the state. If we are compiling, we
4267:000 | DONE cmt | em 16 16 |        |             |                 ; include a subroutine jump to SLITERAL to save the string. If
4268:000 | DONE cmt | em 16 16 |        |             |                 ; we are interpreting, we're done
4269:000 | DONE ins | em 16 16 | 005c59 | a5 14       |                 lda.d 000014         
4270:000 | DONE ins | em 16 16 | 005c5b | d0 24       |                 bne 005c81           
4271:000 | DONE wsp | em 16 16 |        |             |
4272:000 | DONE cmt | em 16 16 |        |             | 		; We copy our string to someplace safe because it lives
4273:000 | DONE cmt | em 16 16 |        |             |                 ; dangerously if we leave it in the input buffer. This might
4274:000 | DONE cmt | em 16 16 |        |             |                 ; seem like a lot of effort for a few bytes, but MVN is so fast
4275:000 | DONE cmt | em 16 16 |        |             |                 ; - 7 cycles per byte - that it is worth it. See
4276:000 | DONE cmt | em 16 16 |        |             |                 ; http://forum.6502.org/viewtopic.php?f=2&t=1685&p=50975#p50975
4277:000 | DONE cmt | em 16 16 |        |             |                 ; and http://6502.org/tutorials/65c816opcodes.html#6.6
4278:000 | DONE ins | em 16 16 | 005c5d | ca          |                 dex                  
4279:000 | DONE ins | em 16 16 | 005c5e | ca          |                 dex                  
4280:000 | DONE ins | em 16 16 | 005c5f | 94 00       |                 sty.dx 00            
4281:000 | DONE ins | em 16 16 | 005c61 | a4 00       |                 ldy.d 000000         HERE  ( addr-s u addr-d )
4282:000 | DONE wsp | em 16 16 |        |             |
4283:000 | DONE ins | em 16 16 | 005c63 | b5 00       |                 lda.dx 00            SWAP ( addr-s addr-d u )
4284:000 | DONE ins | em 16 16 | 005c65 | 94 00       |                 sty.dx 00            
4285:000 | DONE ins | em 16 16 | 005c67 | a8          |                 tay                  
4286:000 | DONE wsp | em 16 16 |        |             |
4287:000 | DONE ins | em 16 16 | 005c68 | 5a          |                 phy                  save copy of u
4288:000 | DONE ins | em 16 16 | 005c69 | b5 00       |                 lda.dx 00            save copy of addr-d
4289:000 | DONE ins | em 16 16 | 005c6b | 48          |                 pha                  
4290:000 | DONE wsp | em 16 16 |        |             |
4291:000 | DONE ins | em 16 16 | 005c6c | 20 52 5a    |                 jsr 005a52           
4292:000 | DONE wsp | em 16 16 |        |             |
4293:000 | DONE ins | em 16 16 | 005c6f | ca          |                 dex                  
4294:000 | DONE ins | em 16 16 | 005c70 | ca          |                 dex                  
4295:000 | DONE ins | em 16 16 | 005c71 | ca          |                 dex                  
4296:000 | DONE ins | em 16 16 | 005c72 | ca          |                 dex                  
4297:000 | DONE ins | em 16 16 | 005c73 | 94 02       |                 sty.dx 02            
4298:000 | DONE wsp | em 16 16 |        |             |
4299:000 | DONE ins | em 16 16 | 005c75 | 68          |                 pla                  get addr-d back
4300:000 | DONE ins | em 16 16 | 005c76 | 95 00       |                 sta.dx 00            put NOS
4301:000 | DONE ins | em 16 16 | 005c78 | 68          |                 pla                  get u back, put TOS
4302:000 | DONE ins | em 16 16 | 005c79 | a8          |                 tay                  
4303:000 | DONE wsp | em 16 16 |        |             |
4304:000 | DONE cmt | em 16 16 |        |             |                 ; update CP
4305:000 | DONE ins | em 16 16 | 005c7a | 18          |                 clc                  
4306:000 | DONE ins | em 16 16 | 005c7b | 65 00       |                 adc.d 000000         
4307:000 | DONE ins | em 16 16 | 005c7d | 85 00       |                 sta.d 000000         
4308:000 | DONE wsp | em 16 16 |        |             |
4309:000 | DONE ins | em 16 16 | 005c7f | 80 03       |                 bra 005c84           
4310:000 | DONE wsp | em 16 16 |        |             |
4311:000 | DONE lbl | em 16 16 | 005c81 |             | squote_compile                       
4312:000 | DONE cmt | em 16 16 |        |             |                 ; We're compiling, so we need SLITERAL. We use it's RTS while
4313:000 | DONE cmt | em 16 16 |        |             |                 ; we're at it
4314:000 | DONE ins | em 16 16 | 005c81 | 4c a3 5c    |                 jmp 005ca3           JSR/RTS
4315:000 | DONE wsp | em 16 16 |        |             |
4316:000 | DONE lbl | em 16 16 | 005c84 |             | z_squote                             
4316:001 | DONE ins | em 16 16 | 005c84 | 60          |                 rts                  
4317:000 | DONE wsp | em 16 16 |        |             |
4318:000 | DONE wsp | em 16 16 |        |             |
4319:000 | DONE cmt | em 16 16 |        |             | ; -------------------------------------------------------------------
4320:000 | DONE cmt | em 16 16 |        |             | ; S>D ( n -- d ) 15 bytes / X cycles
4321:000 | DONE cmt | em 16 16 |        |             | ; Convert a single cell number to double cells, conserving the sign
4322:000 | DONE lbl | em 16 16 | 005c85 |             | xt_stod                              
4323:000 | DONE ins | em 16 16 | 005c85 | ca          |                 dex                  make room on stack
4324:000 | DONE ins | em 16 16 | 005c86 | ca          |                 dex                  
4325:000 | DONE ins | em 16 16 | 005c87 | 94 00       |                 sty.dx 00            
4326:000 | DONE wsp | em 16 16 |        |             |
4327:000 | DONE ins | em 16 16 | 005c89 | 98          |                 tya                  force flag check
4328:000 | DONE ins | em 16 16 | 005c8a | 10 05       |                 bpl 005c91           
4329:000 | DONE wsp | em 16 16 |        |             |
4330:000 | DONE cmt | em 16 16 |        |             |                 ; negative number, extend sign
4331:000 | DONE ins | em 16 16 | 005c8c | a0 ff ff    |                 ldy.# 0ffff          
4332:000 | DONE ins | em 16 16 | 005c8f | 80 03       |                 bra 005c94           
4333:000 | DONE wsp | em 16 16 |        |             |
4334:000 | DONE lbl | em 16 16 | 005c91 |             | stod_pos                             
4335:000 | DONE cmt | em 16 16 |        |             |                 ; positive number
4336:000 | DONE ins | em 16 16 | 005c91 | a0 00 00    |                 ldy.# 0000           fall through
4337:000 | DONE wsp | em 16 16 |        |             |
4338:000 | DONE lbl | em 16 16 | 005c94 |             | z_stod                               
4338:001 | DONE ins | em 16 16 | 005c94 | 60          |                 rts                  
4339:000 | DONE wsp | em 16 16 |        |             |
4340:000 | DONE cmt | em 16 16 |        |             | ; -------------------------------------------------------------------
4341:000 | DONE cmt | em 16 16 |        |             | ; SIGN ( n -- ) 13 bytes / X cycles
4342:000 | DONE cmt | em 16 16 |        |             | ; If TOS is negative, add a minus sign to the pictured output. Code based on
4343:000 | DONE cmt | em 16 16 |        |             | ; https://github.com/philburk/pforth/blob/master/fth/system.fth
4344:000 | DONE cmt | em 16 16 |        |             | ; Origin Forth code is  0< IF [CHAR] - HOLD THEN
4345:000 | DONE lbl | em 16 16 | 005c95 |             | xt_sign                              
4346:000 | DONE dir | em 16 16 |        |             |         .!a16                        
4347:000 | DONE cmt | em 16 16 |        |             |                 ; See if number is negative
4348:000 | DONE ins | em 16 16 | 005c95 | 98          |                 tya                  force flag check
4349:000 | DONE ins | em 16 16 | 005c96 | 10 06       |                 bpl 005c9e           
4350:000 | DONE wsp | em 16 16 |        |             |
4351:000 | DONE cmt | em 16 16 |        |             |                 ; We're negative, overwrite number TOS
4352:000 | DONE ins | em 16 16 | 005c98 | a0 2d 00    |                 ldy.# 002d           ASCII for '-'
4353:000 | DONE wsp | em 16 16 |        |             |
4354:000 | DONE ins | em 16 16 | 005c9b | 4c 89 59    |                 jmp 005989           JSR/RTS, does not fall through
4355:000 | DONE wsp | em 16 16 |        |             |
4356:000 | DONE lbl | em 16 16 | 005c9e |             | sign_plus                            
4357:000 | DONE ins | em 16 16 | 005c9e | b4 00       |                 ldy.dx 00            get rid of number and leave
4358:000 | DONE ins | em 16 16 | 005ca0 | e8          |                 inx                  
4359:000 | DONE ins | em 16 16 | 005ca1 | e8          |                 inx                  
4360:000 | DONE wsp | em 16 16 |        |             |
4361:000 | DONE lbl | em 16 16 | 005ca2 |             | z_sign                               
4361:001 | DONE ins | em 16 16 | 005ca2 | 60          |                 rts                  
4362:000 | DONE wsp | em 16 16 |        |             |
4363:000 | DONE wsp | em 16 16 |        |             |
4364:000 | DONE cmt | em 16 16 |        |             | ; -------------------------------------------------------------------
4365:000 | DONE cmt | em 16 16 |        |             | ; SLITERAL ( addr u -- ) ( -- addr u ) X bytes / X cycles
4366:000 | DONE cmt | em 16 16 |        |             | ; At compile time, store string, at runtime, return address and length of string
4367:000 | DONE cmt | em 16 16 |        |             | ; on the Data Stack. Used for S" among other things. This routine uses tmp1,
4368:000 | DONE cmt | em 16 16 |        |             | ; tmp2
4369:000 | DONE lbl | em 16 16 | 005ca3 |             | xt_sliteral                          
4370:000 | DONE dir | em 16 16 |        |             |         .!a16                        
4371:000 | DONE cmt | em 16 16 |        |             |                 ; We can't assume that ( addr u ) of the current string is in
4372:000 | DONE cmt | em 16 16 |        |             |                 ; a stable area, so we first have to move them to safety. Since
4373:000 | DONE cmt | em 16 16 |        |             |                 ; CP points to where the interpreter expects to be able to
4374:000 | DONE cmt | em 16 16 |        |             |                 ; continue in the code, we have to jump over the string. We use
4375:000 | DONE cmt | em 16 16 |        |             |                 ; JMP instead of BRA so we can use longer strings
4376:000 | DONE ins | em 16 16 | 005ca3 | b5 00       |                 lda.dx 00            Address of string is NOS
4377:000 | DONE ins | em 16 16 | 005ca5 | 85 1c       |                 sta.d 00001c         
4378:000 | DONE ins | em 16 16 | 005ca7 | 84 1e       |                 sty.d 00001e         keep copy of string length
4379:000 | DONE wsp | em 16 16 |        |             |
4380:000 | DONE ins | em 16 16 | 005ca9 | e2 20       |                 sep 20               
4380:001 | DONE ctl | em  8 16 |        |             |         .!a8
4381:000 | DONE ins | em  8 16 | 005cab | a9 4c       |                 lda.# 04c            opcode for JMP
4382:000 | DONE ins | em  8 16 | 005cad | 92 00       |                 sta.di 000000        STA (CP)
4383:000 | DONE ins | em  8 16 | 005caf | c2 20       |                 rep 20               
4383:001 | DONE ctl | em 16 16 |        |             |         .!a16
4384:000 | DONE ins | em 16 16 | 005cb1 | e6 00       |                 inc.d 000000         
4385:000 | DONE wsp | em 16 16 |        |             |
4386:000 | DONE cmt | em 16 16 |        |             |                 ; Our jump target is CP + 2 (for the length of the jump
4387:000 | DONE cmt | em 16 16 |        |             |                 ; instruction itself ) + the length of the string
4388:000 | DONE ins | em 16 16 | 005cb3 | a5 1e       |                 lda.d 00001e         string length
4389:000 | DONE ins | em 16 16 | 005cb5 | 1a          |                 inc.a                
4390:000 | DONE ins | em 16 16 | 005cb6 | 1a          |                 inc.a                
4391:000 | DONE wsp | em 16 16 |        |             |
4392:000 | DONE ins | em 16 16 | 005cb7 | 18          |                 clc                  
4393:000 | DONE ins | em 16 16 | 005cb8 | 65 00       |                 adc.d 000000         current address
4394:000 | DONE ins | em 16 16 | 005cba | 92 00       |                 sta.di 000000        store jump target
4395:000 | DONE wsp | em 16 16 |        |             |
4396:000 | DONE cmt | em 16 16 |        |             |                 ; update CP to move past JMP instruction
4397:000 | DONE ins | em 16 16 | 005cbc | e6 00       |                 inc.d 000000         
4398:000 | DONE ins | em 16 16 | 005cbe | e6 00       |                 inc.d 000000         
4399:000 | DONE wsp | em 16 16 |        |             |
4400:000 | DONE cmt | em 16 16 |        |             |                 ; now we can safely copy the code
4401:000 | DONE ins | em 16 16 | 005cc0 | 88          |                 dey                  last offset is one less than length
4402:000 | DONE ins | em 16 16 | 005cc1 | e2 20       |                 sep 20               
4402:001 | DONE ctl | em  8 16 |        |             |         .!a8
4403:000 | DONE lbl | em  8 16 | 005cc3 |             | sl_loop                              
4404:000 | DONE ins | em  8 16 | 005cc3 | b1 1c       |                 lda.diy 00001c       LDA (TMP1),Y
4405:000 | DONE ins | em  8 16 | 005cc5 | 91 00       |                 sta.diy 000000       STA (CP),Y
4406:000 | DONE ins | em  8 16 | 005cc7 | 88          |                 dey                  
4407:000 | DONE ins | em  8 16 | 005cc8 | 10 f9       |                 bpl 005cc3           
4408:000 | DONE wsp | em  8 16 |        |             |
4409:000 | DONE ins | em  8 16 | 005cca | c2 20       |                 rep 20               
4409:001 | DONE ctl | em 16 16 |        |             |         .!a16
4410:000 | DONE cmt | em 16 16 |        |             |                 ; keep old CP as new address of string
4411:000 | DONE ins | em 16 16 | 005ccc | a5 00       |                 lda.d 000000         
4412:000 | DONE ins | em 16 16 | 005cce | 85 1c       |                 sta.d 00001c         overwrites original address
4413:000 | DONE wsp | em 16 16 |        |             |
4414:000 | DONE cmt | em 16 16 |        |             |                 ; update CP
4415:000 | DONE ins | em 16 16 | 005cd0 | 18          |                 clc                  
4416:000 | DONE ins | em 16 16 | 005cd1 | 65 1e       |                 adc.d 00001e         length of string
4417:000 | DONE ins | em 16 16 | 005cd3 | 85 00       |                 sta.d 000000         
4418:000 | DONE wsp | em 16 16 |        |             |
4419:000 | DONE cmt | em 16 16 |        |             |                 ; Compile a subroutine jump to the runtime of SLITERAL that
4420:000 | DONE cmt | em 16 16 |        |             |                 ; pushes the new ( addr u ) pair to the Data Stack. When we're
4421:000 | DONE cmt | em 16 16 |        |             |                 ; done, the code will look like this:
4422:000 | DONE cmt | em 16 16 |        |             |                 ;
4423:000 | DONE cmt | em 16 16 |        |             |                 ; xt -->    jmp a
4424:000 | DONE cmt | em 16 16 |        |             |                 ;           <string data bytes>
4425:000 | DONE cmt | em 16 16 |        |             |                 ;  a -->    jsr sliteral_rt
4426:000 | DONE cmt | em 16 16 |        |             |                 ;           <string address>
4427:000 | DONE cmt | em 16 16 |        |             |                 ;           <string length>
4428:000 | DONE cmt | em 16 16 |        |             |                 ; rts -->
4429:000 | DONE cmt | em 16 16 |        |             |                 ;
4430:000 | DONE cmt | em 16 16 |        |             |                 ; This means we'll have to adjust the return address for two
4431:000 | DONE cmt | em 16 16 |        |             |                 ; cells, not just one
4432:000 | DONE ins | em 16 16 | 005cd5 | f4 ee 5c    |                 phe.# 005cee         
4433:000 | DONE ins | em 16 16 | 005cd8 | 20 46 68    |                 jsr 006846           
4434:000 | DONE wsp | em 16 16 |        |             |
4435:000 | DONE cmt | em 16 16 |        |             |                 ; We want to have the addr end up as NOS and the length as TOS,
4436:000 | DONE cmt | em 16 16 |        |             |                 ; so we store the address first
4437:000 | DONE ins | em 16 16 | 005cdb | a5 1c       |                 lda.d 00001c         new address of string
4438:000 | DONE ins | em 16 16 | 005cdd | 48          |                 pha                  
4439:000 | DONE ins | em 16 16 | 005cde | 20 41 68    |                 jsr 006841           
4440:000 | DONE wsp | em 16 16 |        |             |
4441:000 | DONE ins | em 16 16 | 005ce1 | a5 1e       |                 lda.d 00001e         
4442:000 | DONE ins | em 16 16 | 005ce3 | 48          |                 pha                  
4443:000 | DONE ins | em 16 16 | 005ce4 | 20 41 68    |                 jsr 006841           
4444:000 | DONE wsp | em 16 16 |        |             |
4445:000 | DONE cmt | em 16 16 |        |             |                 ; all done, clean up and leave
4446:000 | DONE ins | em 16 16 | 005ce7 | b4 02       |                 ldy.dx 02            2DROP
4447:000 | DONE ins | em 16 16 | 005ce9 | e8          |                 inx                  
4448:000 | DONE ins | em 16 16 | 005cea | e8          |                 inx                  
4449:000 | DONE ins | em 16 16 | 005ceb | e8          |                 inx                  
4450:000 | DONE ins | em 16 16 | 005cec | e8          |                 inx                  
4451:000 | DONE wsp | em 16 16 |        |             |
4452:000 | DONE lbl | em 16 16 | 005ced |             | z_sliteral                           
4452:001 | DONE ins | em 16 16 | 005ced | 60          |                 rts                  
4453:000 | DONE wsp | em 16 16 |        |             |
4454:000 | DONE lbl | em 16 16 | 005cee |             | sliteral_rt                          
4455:000 | DONE cmt | em 16 16 |        |             |                 ; Run time behaviour of SLITERAL: Push ( addr u ) of string to
4456:000 | DONE cmt | em 16 16 |        |             |                 ; the Data Stack. We arrive here with the return address as the
4457:000 | DONE cmt | em 16 16 |        |             |                 ; top of Return Stack, which points to the address of the string
4458:000 | DONE wsp | em 16 16 |        |             |
4459:000 | DONE cmt | em 16 16 |        |             |                 ; Make room on stack, which also frees Y for other use
4460:000 | DONE ins | em 16 16 | 005cee | ca          |                 dex                  
4461:000 | DONE ins | em 16 16 | 005cef | ca          |                 dex                  
4462:000 | DONE ins | em 16 16 | 005cf0 | ca          |                 dex                  
4463:000 | DONE ins | em 16 16 | 005cf1 | ca          |                 dex                  
4464:000 | DONE ins | em 16 16 | 005cf2 | 94 02       |                 sty.dx 02            
4465:000 | DONE wsp | em 16 16 |        |             |
4466:000 | DONE cmt | em 16 16 |        |             |                 ; Get the address of the string address off the stack and
4467:000 | DONE cmt | em 16 16 |        |             |                 ; increase by one because of the RTS mechanics
4468:000 | DONE ins | em 16 16 | 005cf4 | 7a          |                 ply                  
4469:000 | DONE ins | em 16 16 | 005cf5 | c8          |                 iny                  
4470:000 | DONE wsp | em 16 16 |        |             |
4471:000 | DONE ins | em 16 16 | 005cf6 | b9 00 00    |                 lda.y 0000           LDA $0000,Y
4472:000 | DONE ins | em 16 16 | 005cf9 | 95 00       |                 sta.dx 00            save string address as NOS
4473:000 | DONE ins | em 16 16 | 005cfb | c8          |                 iny                  
4474:000 | DONE ins | em 16 16 | 005cfc | c8          |                 iny                  
4475:000 | DONE ins | em 16 16 | 005cfd | b9 00 00    |                 lda.y 0000           get length of string, will be TOS ...
4476:000 | DONE wsp | em 16 16 |        |             |
4477:000 | DONE ins | em 16 16 | 005d00 | c8          |                 iny                  ... first, though, repair return jump
4478:000 | DONE ins | em 16 16 | 005d01 | 5a          |                 phy                  
4479:000 | DONE wsp | em 16 16 |        |             |
4480:000 | DONE ins | em 16 16 | 005d02 | a8          |                 tay                  TOS is now length of string
4481:000 | DONE wsp | em 16 16 |        |             |
4482:000 | DONE ins | em 16 16 | 005d03 | 60          |                 rts                  
4483:000 | DONE wsp | em 16 16 |        |             |
4484:000 | DONE cmt | em 16 16 |        |             | ; -------------------------------------------------------------------
4485:000 | DONE cmt | em 16 16 |        |             | ; SM/REM ( d n1 -- n2 n3) X bytes / X cycles
4486:000 | DONE cmt | em 16 16 |        |             | ; Symmetic signed division. Compare FM/MOD. Code from Gforth, see
4487:000 | DONE cmt | em 16 16 |        |             | ; https://groups.google.com/forum/#!topic/comp.lang.forth/_bx4dJFb9R0
4488:000 | DONE cmt | em 16 16 |        |             | ; and http://git.savannah.gnu.org/cgit/gforth.git/tree/prim ; see
4489:000 | DONE cmt | em 16 16 |        |             | ; http://www.figuk.plus.com/build/arith.htm for variants. Forth is
4490:000 | DONE cmt | em 16 16 |        |             | ; SM/REM OVER >R DUP >R ABS -ROT DABS ROT UM/MOD R>
4491:000 | DONE cmt | em 16 16 |        |             | ; R@ XOR 0< IF NEGATE THEN R> 0< IF SWAP NEGATE SWAP THEN ;
4492:000 | DONE cmt | em 16 16 |        |             | ; TODO optimize in assembler
4493:000 | DONE lbl | em 16 16 | 005d04 |             | xt_smrem                             
4494:000 | DONE dir | em 16 16 |        |             |         .!a16                        
4495:000 | DONE ins | em 16 16 | 005d04 | 20 23 5b    |                 jsr 005b23           
4496:000 | DONE wsp | em 16 16 |        |             |
4497:000 | DONE ins | em 16 16 | 005d07 | 5a          |                 phy                  >R
4498:000 | DONE ins | em 16 16 | 005d08 | b4 00       |                 ldy.dx 00            
4499:000 | DONE ins | em 16 16 | 005d0a | e8          |                 inx                  
4500:000 | DONE ins | em 16 16 | 005d0b | e8          |                 inx                  
4501:000 | DONE wsp | em 16 16 |        |             |
4502:000 | DONE ins | em 16 16 | 005d0c | ca          |                 dex                  DUP
4503:000 | DONE ins | em 16 16 | 005d0d | ca          |                 dex                  
4504:000 | DONE ins | em 16 16 | 005d0e | 94 00       |                 sty.dx 00            
4505:000 | DONE wsp | em 16 16 |        |             |
4506:000 | DONE ins | em 16 16 | 005d10 | 5a          |                 phy                  >R
4507:000 | DONE ins | em 16 16 | 005d11 | b4 00       |                 ldy.dx 00            
4508:000 | DONE ins | em 16 16 | 005d13 | e8          |                 inx                  
4509:000 | DONE ins | em 16 16 | 005d14 | e8          |                 inx                  
4510:000 | DONE wsp | em 16 16 |        |             |
4511:000 | DONE ins | em 16 16 | 005d15 | 20 4c 54    |                 jsr 00544c           ABS
4512:000 | DONE ins | em 16 16 | 005d18 | 20 07 53    |                 jsr 005307           -ROT
4513:000 | DONE ins | em 16 16 | 005d1b | 20 6c 57    |                 jsr 00576c           DABS
4514:000 | DONE ins | em 16 16 | 005d1e | 20 32 5c    |                 jsr 005c32           ROT
4515:000 | DONE ins | em 16 16 | 005d21 | 20 5a 5e    |                 jsr 005e5a           UM/MOD
4516:000 | DONE wsp | em 16 16 |        |             |
4517:000 | DONE ins | em 16 16 | 005d24 | ca          |                 dex                  R>
4518:000 | DONE ins | em 16 16 | 005d25 | ca          |                 dex                  
4519:000 | DONE ins | em 16 16 | 005d26 | 94 00       |                 sty.dx 00            
4520:000 | DONE ins | em 16 16 | 005d28 | 7a          |                 ply                  
4521:000 | DONE wsp | em 16 16 |        |             |
4522:000 | DONE ins | em 16 16 | 005d29 | ca          |                 dex                  R@
4523:000 | DONE ins | em 16 16 | 005d2a | ca          |                 dex                  
4524:000 | DONE ins | em 16 16 | 005d2b | 94 00       |                 sty.dx 00            
4525:000 | DONE ins | em 16 16 | 005d2d | 7a          |                 ply                  
4526:000 | DONE ins | em 16 16 | 005d2e | 5a          |                 phy                  
4527:000 | DONE wsp | em 16 16 |        |             |
4528:000 | DONE ins | em 16 16 | 005d2f | 20 36 5f    |                 jsr 005f36           XOR
4529:000 | DONE wsp | em 16 16 |        |             |
4530:000 | DONE ins | em 16 16 | 005d32 | 98          |                 tya                  0< IF
4531:000 | DONE ins | em 16 16 | 005d33 | 10 09       |                 bpl 005d3e           
4532:000 | DONE wsp | em 16 16 |        |             |
4533:000 | DONE ins | em 16 16 | 005d35 | b4 00       |                 ldy.dx 00            from IF
4534:000 | DONE ins | em 16 16 | 005d37 | e8          |                 inx                  
4535:000 | DONE ins | em 16 16 | 005d38 | e8          |                 inx                  
4536:000 | DONE wsp | em 16 16 |        |             |
4537:000 | DONE ins | em 16 16 | 005d39 | 20 86 5a    |                 jsr 005a86           NEGATE
4538:000 | DONE ins | em 16 16 | 005d3c | 80 04       |                 bra 005d42           
4539:000 | DONE lbl | em 16 16 | 005d3e |             | smrem_1                              
4540:000 | DONE ins | em 16 16 | 005d3e | b4 00       |                 ldy.dx 00            from IF
4541:000 | DONE ins | em 16 16 | 005d40 | e8          |                 inx                  
4542:000 | DONE ins | em 16 16 | 005d41 | e8          |                 inx                  
4543:000 | DONE wsp | em 16 16 |        |             |
4544:000 | DONE lbl | em 16 16 | 005d42 |             | smrem_1_1                            
4545:000 | DONE ins | em 16 16 | 005d42 | ca          |                 dex                  R>
4546:000 | DONE ins | em 16 16 | 005d43 | ca          |                 dex                  
4547:000 | DONE ins | em 16 16 | 005d44 | 94 00       |                 sty.dx 00            
4548:000 | DONE ins | em 16 16 | 005d46 | 7a          |                 ply                  
4549:000 | DONE wsp | em 16 16 |        |             |
4550:000 | DONE ins | em 16 16 | 005d47 | 98          |                 tya                  0< IF
4551:000 | DONE ins | em 16 16 | 005d48 | 10 0f       |                 bpl 005d59           
4552:000 | DONE wsp | em 16 16 |        |             |
4553:000 | DONE ins | em 16 16 | 005d4a | b4 00       |                 ldy.dx 00            from IF
4554:000 | DONE ins | em 16 16 | 005d4c | e8          |                 inx                  
4555:000 | DONE ins | em 16 16 | 005d4d | e8          |                 inx                  
4556:000 | DONE wsp | em 16 16 |        |             |
4557:000 | DONE ins | em 16 16 | 005d4e | 20 95 5d    |                 jsr 005d95           
4558:000 | DONE ins | em 16 16 | 005d51 | 20 86 5a    |                 jsr 005a86           
4559:000 | DONE ins | em 16 16 | 005d54 | 20 95 5d    |                 jsr 005d95           
4560:000 | DONE ins | em 16 16 | 005d57 | 80 04       |                 bra 005d5d           
4561:000 | DONE wsp | em 16 16 |        |             |
4562:000 | DONE lbl | em 16 16 | 005d59 |             | smrem_2                              
4563:000 | DONE ins | em 16 16 | 005d59 | b4 00       |                 ldy.dx 00            
4564:000 | DONE ins | em 16 16 | 005d5b | e8          |                 inx                  
4565:000 | DONE ins | em 16 16 | 005d5c | e8          |                 inx                  
4566:000 | DONE wsp | em 16 16 |        |             |
4567:000 | DONE wsp | em 16 16 |        |             |
4568:000 | DONE lbl | em 16 16 | 005d5d |             | smrem_2_1                            
4569:000 | DONE wsp | em 16 16 |        |             |
4570:000 | DONE lbl | em 16 16 | 005d5d |             | z_smrem                              
4570:001 | DONE ins | em 16 16 | 005d5d | 60          |                 rts                  
4571:000 | DONE wsp | em 16 16 |        |             |
4572:000 | DONE wsp | em 16 16 |        |             |
4573:000 | DONE cmt | em 16 16 |        |             | ; -------------------------------------------------------------------
4574:000 | DONE cmt | em 16 16 |        |             | ; SOURCE ( -- addr u ) 12 bytes / X cycles
4575:000 | DONE cmt | em 16 16 |        |             | ; Return the address and size of current input buffer. Replaces TIB and #TIB in
4576:000 | DONE cmt | em 16 16 |        |             | ; ANSI Forth
4577:000 | DONE wsp | em 16 16 |        |             |
4578:000 | DONE lbl | em 16 16 | 005d5e |             | xt_source                            
4579:000 | DONE ins | em 16 16 | 005d5e | ca          |                 dex                  make room on Data Stack
4580:000 | DONE ins | em 16 16 | 005d5f | ca          |                 dex                  
4581:000 | DONE ins | em 16 16 | 005d60 | ca          |                 dex                  
4582:000 | DONE ins | em 16 16 | 005d61 | ca          |                 dex                  
4583:000 | DONE ins | em 16 16 | 005d62 | 94 02       |                 sty.dx 02            
4584:000 | DONE wsp | em 16 16 |        |             |
4585:000 | DONE ins | em 16 16 | 005d64 | a5 08       |                 lda.d 000008         address of current input buffer as NOS
4586:000 | DONE ins | em 16 16 | 005d66 | 95 00       |                 sta.dx 00            
4587:000 | DONE wsp | em 16 16 |        |             |
4588:000 | DONE ins | em 16 16 | 005d68 | a4 0a       |                 ldy.d 00000a         length of current input buffer as TOS
4589:000 | DONE wsp | em 16 16 |        |             |
4590:000 | DONE lbl | em 16 16 | 005d6a |             | z_source                             
4590:001 | DONE ins | em 16 16 | 005d6a | 60          |                 rts                  
4591:000 | DONE wsp | em 16 16 |        |             |
4592:000 | DONE cmt | em 16 16 |        |             | ; -------------------------------------------------------------------
4593:000 | DONE cmt | em 16 16 |        |             | ; SOURCE-ID ( -- n ) 6 bytes / 13 cycles
4594:000 | DONE cmt | em 16 16 |        |             | ; Identify the input source unless it is a block (s. Conklin & Rather p. 156).
4595:000 | DONE cmt | em 16 16 |        |             | ; Since we don't have blocks (yet), this will give the input source: 0 is
4596:000 | DONE cmt | em 16 16 |        |             | ; keyboard, -1 (0ffff) is character string, and a text file gives the fileid.
4597:000 | DONE lbl | em 16 16 | 005d6b |             | xt_source-id                         
4598:000 | DONE dir | em 16 16 |        |             |         .!xy16                       
4599:000 | DONE ins | em 16 16 | 005d6b | ca          |                 dex                  
4600:000 | DONE ins | em 16 16 | 005d6c | ca          |                 dex                  
4601:000 | DONE ins | em 16 16 | 005d6d | 94 00       |                 sty.dx 00            
4602:000 | DONE ins | em 16 16 | 005d6f | a4 06       |                 ldy.d 000006         
4603:000 | DONE wsp | em 16 16 |        |             |
4604:000 | DONE lbl | em 16 16 | 005d71 |             | z_source-id                          
4604:001 | DONE ins | em 16 16 | 005d71 | 60          |                 rts                  
4605:000 | DONE wsp | em 16 16 |        |             |
4606:000 | DONE cmt | em 16 16 |        |             | ; -------------------------------------------------------------------
4607:000 | DONE cmt | em 16 16 |        |             | ; SPACE ( -- ) X bytes / X cycles
4608:000 | DONE cmt | em 16 16 |        |             | ; Print one ASCII space character
4609:000 | DONE cmt | em 16 16 |        |             | ; TODO change to call EMIT
4610:000 | DONE lbl | em 16 16 | 005d72 |             | xt_space                             
4611:000 | DONE ins | em 16 16 | 005d72 | a9 20 00    |                 lda.# AscSP          
4612:000 | DONE ins | em 16 16 | 005d75 | 6c 0e 00    |                 jmp.i 00000e         JSR/RTS
4613:000 | DONE wsp | em 16 16 |        |             |
4614:000 | DONE lbl | em 16 16 | 005d78 |             | z_space                              ; never reached
4615:000 | DONE wsp | em 16 16 |        |             |
4616:000 | DONE wsp | em 16 16 |        |             |
4617:000 | DONE cmt | em 16 16 |        |             | ; -------------------------------------------------------------------
4618:000 | DONE cmt | em 16 16 |        |             | ; SPACES ( u -- ) 12 bytes / X cycles
4619:000 | DONE cmt | em 16 16 |        |             | ; Print u spaces. Calls SPACE, because this is probably interactive and humans
4620:000 | DONE cmt | em 16 16 |        |             | ; are slow enough we don't have to care about speed.
4621:000 | DONE lbl | em 16 16 | 005d78 |             | xt_spaces                            
4622:000 | DONE dir | em 16 16 |        |             |         .!a16                        
4623:000 | DONE dir | em 16 16 |        |             |         .!xy16                       
4624:000 | DONE lbl | em 16 16 | 005d78 |             | @                                    
4625:000 | DONE ins | em 16 16 | 005d78 | 88          |                 dey                  this also handles case u=0
4626:000 | DONE ins | em 16 16 | 005d79 | 30 05       |                 bmi 005d80           
4627:000 | DONE wsp | em 16 16 |        |             |
4628:000 | DONE ins | em 16 16 | 005d7b | 20 72 5d    |                 jsr 005d72           
4629:000 | DONE ins | em 16 16 | 005d7e | 80 f8       |                 bra 005d78           
4630:000 | DONE wsp | em 16 16 |        |             |
4631:000 | DONE lbl | em 16 16 | 005d80 |             | spaces_done                          
4632:000 | DONE ins | em 16 16 | 005d80 | b4 00       |                 ldy.dx 00            DROP
4633:000 | DONE ins | em 16 16 | 005d82 | e8          |                 inx                  
4634:000 | DONE ins | em 16 16 | 005d83 | e8          |                 inx                  
4635:000 | DONE wsp | em 16 16 |        |             |
4636:000 | DONE lbl | em 16 16 | 005d84 |             | z_spaces                             
4636:001 | DONE ins | em 16 16 | 005d84 | 60          |                 rts                  
4637:000 | DONE wsp | em 16 16 |        |             |
4638:000 | DONE cmt | em 16 16 |        |             | ; -------------------------------------------------------------------
4639:000 | DONE cmt | em 16 16 |        |             | ; STAR ( n n -- n ) 16*16 -> 16  X bytes / X cycles
4640:000 | DONE cmt | em 16 16 |        |             | ; Multiply two signed 16 bit numbers, returning a 16 bit result. This is nothing
4641:000 | DONE cmt | em 16 16 |        |             | ; more than UM* DROP
4642:000 | DONE lbl | em 16 16 | 005d85 |             | xt_star                              
4643:000 | DONE ins | em 16 16 | 005d85 | 20 fb 5d    |                 jsr 005dfb           
4644:000 | DONE ins | em 16 16 | 005d88 | b4 00       |                 ldy.dx 00            DROP
4645:000 | DONE ins | em 16 16 | 005d8a | e8          |                 inx                  
4646:000 | DONE ins | em 16 16 | 005d8b | e8          |                 inx                  
4647:000 | DONE wsp | em 16 16 |        |             |
4648:000 | DONE lbl | em 16 16 | 005d8c |             | z_star                               
4648:001 | DONE ins | em 16 16 | 005d8c | 60          |                 rts                  
4649:000 | DONE wsp | em 16 16 |        |             |
4650:000 | DONE wsp | em 16 16 |        |             |
4651:000 | DONE cmt | em 16 16 |        |             | ; -------------------------------------------------------------------
4652:000 | DONE cmt | em 16 16 |        |             | ; STATE ( -- addr ) 7 bytes / 12 cycles
4653:000 | DONE cmt | em 16 16 |        |             | ; Return the address of a cell containing the compilation-state flag. STATE
4654:000 | DONE cmt | em 16 16 |        |             | ; is true when in compilation state, false otherwise. STATE should not be
4655:000 | DONE cmt | em 16 16 |        |             | ; changed directly by the user; see
4656:000 | DONE cmt | em 16 16 |        |             | ; http://forth.sourceforge.net/standard/dpans/dpans6.htm#6.1.2250
4657:000 | DONE lbl | em 16 16 | 005d8d |             | xt_state                             
4658:000 | DONE dir | em 16 16 |        |             |         .!xy16                       
4659:000 | DONE ins | em 16 16 | 005d8d | ca          |                 dex                  
4660:000 | DONE ins | em 16 16 | 005d8e | ca          |                 dex                  
4661:000 | DONE ins | em 16 16 | 005d8f | 94 00       |                 sty.dx 00            
4662:000 | DONE ins | em 16 16 | 005d91 | a0 14 00    |                 ldy.# 000014         
4663:000 | DONE wsp | em 16 16 |        |             |
4664:000 | DONE lbl | em 16 16 | 005d94 |             | z_state                              
4664:001 | DONE ins | em 16 16 | 005d94 | 60          |                 rts                  
4665:000 | DONE wsp | em 16 16 |        |             |
4666:000 | DONE wsp | em 16 16 |        |             |
4667:000 | DONE cmt | em 16 16 |        |             | ; -------------------------------------------------------------------
4668:000 | DONE cmt | em 16 16 |        |             | ; SWAP ( n m -- m n ) 5 bytes / 12 cycles
4669:000 | DONE cmt | em 16 16 |        |             | ; Exchange TOS with NOS. We don't check if there are enough elements on the Data
4670:000 | DONE cmt | em 16 16 |        |             | ; Stack; underflow errors will go undetected and return garbage.
4671:000 | DONE lbl | em 16 16 | 005d95 |             | xt_swap                              
4672:000 | DONE dir | em 16 16 |        |             |         .!a16                        
4673:000 | DONE dir | em 16 16 |        |             |         .!xy16                       
4674:000 | DONE ins | em 16 16 | 005d95 | b5 00       |                 lda.dx 00            
4675:000 | DONE ins | em 16 16 | 005d97 | 94 00       |                 sty.dx 00            
4676:000 | DONE ins | em 16 16 | 005d99 | a8          |                 tay                  
4677:000 | DONE wsp | em 16 16 |        |             |
4678:000 | DONE lbl | em 16 16 | 005d9a |             | z_swap                               
4678:001 | DONE ins | em 16 16 | 005d9a | 60          |                 rts                  
4679:000 | DONE wsp | em 16 16 |        |             |
4680:000 | DONE wsp | em 16 16 |        |             |
4681:000 | DONE cmt | em 16 16 |        |             | ; -------------------------------------------------------------------
4682:000 | DONE cmt | em 16 16 |        |             | ; TO ( n "name" -- ) X bytes / X cycles
4683:000 | DONE cmt | em 16 16 |        |             | ; Change the value of a VALUE. Note that in theory this would work with CONSTANT
4684:000 | DONE cmt | em 16 16 |        |             | ; as well, but we frown on this behavior. Note that while it is in violation of
4685:000 | DONE cmt | em 16 16 |        |             | ; ANS Forth, we can change the number in a VALUE with <number> ' <value> >BODY
4686:000 | DONE cmt | em 16 16 |        |             | ; +!  just as you can with Gforth
4687:000 | DONE cmt | em 16 16 |        |             | ; TODO unroll this to assembler
4688:000 | DONE lbl | em 16 16 | 005d9b |             | xt_to                                
4689:000 | DONE ins | em 16 16 | 005d9b | 20 13 54    |                 jsr 005413           '
4690:000 | DONE ins | em 16 16 | 005d9e | 20 32 51    |                 jsr 005132           >BODY
4691:000 | DONE ins | em 16 16 | 005da1 | 20 c8 52    |                 jsr 0052c8           !
4692:000 | DONE wsp | em 16 16 |        |             |
4693:000 | DONE lbl | em 16 16 | 005da4 |             | z_to                                 
4693:001 | DONE ins | em 16 16 | 005da4 | 60          |                 rts                  
4694:000 | DONE wsp | em 16 16 |        |             |
4695:000 | DONE wsp | em 16 16 |        |             |
4696:000 | DONE cmt | em 16 16 |        |             | ; -------------------------------------------------------------------
4697:000 | DONE cmt | em 16 16 |        |             | ; TRUE ( -- f ) 7 bytes / 12 cycles
4698:000 | DONE cmt | em 16 16 |        |             | ; Pushes value $FFFF for Forth true on Data Stack
4699:000 | DONE lbl | em 16 16 | 005da5 |             | xt_true                              
4700:000 | DONE dir | em 16 16 |        |             |         .!a16                        
4701:000 | DONE dir | em 16 16 |        |             |         .!xy16                       
4702:000 | DONE ins | em 16 16 | 005da5 | ca          |                 dex                  
4703:000 | DONE ins | em 16 16 | 005da6 | ca          |                 dex                  
4704:000 | DONE ins | em 16 16 | 005da7 | 94 00       |                 sty.dx 00            
4705:000 | DONE ins | em 16 16 | 005da9 | a0 ff ff    |                 ldy.# 0ffff          
4706:000 | DONE wsp | em 16 16 |        |             |
4707:000 | DONE lbl | em 16 16 | 005dac |             | z_true                               
4707:001 | DONE ins | em 16 16 | 005dac | 60          |                 rts                  
4708:000 | DONE wsp | em 16 16 |        |             |
4709:000 | DONE cmt | em 16 16 |        |             | ; -------------------------------------------------------------------
4710:000 | DONE cmt | em 16 16 |        |             | ; TUCK ( n m -- m n m ) 8 bytes / 19 cycles
4711:000 | DONE cmt | em 16 16 |        |             | ; Insert TOS below NOS. We do not check if there are enough elements on the Data
4712:000 | DONE cmt | em 16 16 |        |             | ; Stack, underflow will go undetected and return garbage.
4713:000 | DONE lbl | em 16 16 | 005dad |             | xt_tuck                              
4714:000 | DONE dir | em 16 16 |        |             |         .!a16                        
4715:000 | DONE dir | em 16 16 |        |             |         .!xy16                       
4716:000 | DONE ins | em 16 16 | 005dad | ca          |                 dex                  
4717:000 | DONE ins | em 16 16 | 005dae | ca          |                 dex                  
4718:000 | DONE ins | em 16 16 | 005daf | b5 02       |                 lda.dx 2             
4719:000 | DONE ins | em 16 16 | 005db1 | 95 00       |                 sta.dx 0             
4720:000 | DONE ins | em 16 16 | 005db3 | 94 02       |                 sty.dx 2             
4721:000 | DONE wsp | em 16 16 |        |             |
4722:000 | DONE lbl | em 16 16 | 005db5 |             | z_tuck                               
4722:001 | DONE ins | em 16 16 | 005db5 | 60          |                 rts                  
4723:000 | DONE wsp | em 16 16 |        |             |
4724:000 | DONE cmt | em 16 16 |        |             | ; -------------------------------------------------------------------
4725:000 | DONE cmt | em 16 16 |        |             | ; TYPE  ( addr u -- ) 23+ bytes / X cycles
4726:000 | DONE cmt | em 16 16 |        |             | ; Print character string if u is not 0. Works though EMIT and is affect by the
4727:000 | DONE cmt | em 16 16 |        |             | ; OUTPUT revectoring
4728:000 | DONE lbl | em 16 16 | 005db6 |             | xt_type                              
4729:000 | DONE dir | em 16 16 |        |             |         .!a16                        
4730:000 | DONE dir | em 16 16 |        |             |         .!xy16                       
4731:000 | DONE cmt | em 16 16 |        |             |                 ; just leave if u is zero (empty string)
4732:000 | DONE ins | em 16 16 | 005db6 | 98          |                 tya                  force flag check of TOS
4733:000 | DONE ins | em 16 16 | 005db7 | f0 17       |                 beq 005dd0           
4734:000 | DONE wsp | em 16 16 |        |             |
4735:000 | DONE ins | em 16 16 | 005db9 | b5 00       |                 lda.dx 00            get address from NOS
4736:000 | DONE ins | em 16 16 | 005dbb | 85 1c       |                 sta.d 00001c         
4737:000 | DONE ins | em 16 16 | 005dbd | 84 1e       |                 sty.d 00001e         number of chars is TOS
4738:000 | DONE ins | em 16 16 | 005dbf | a0 00 00    |                 ldy.# 0000           
4739:000 | DONE ins | em 16 16 | 005dc2 | e2 20       |                 sep 20               
4739:001 | DONE ctl | em  8 16 |        |             |         .!a8
4740:000 | DONE lbl | em  8 16 | 005dc4 |             | type_loop                            
4741:000 | DONE ins | em  8 16 | 005dc4 | b1 1c       |                 lda.diy 00001c       LDA (TMP1),Y
4742:000 | DONE ins | em  8 16 | 005dc6 | 20 f5 57    |                 jsr 0057f5           
4743:000 | DONE ins | em  8 16 | 005dc9 | c8          |                 iny                  
4744:000 | DONE ins | em  8 16 | 005dca | c4 1e       |                 cpy.d 00001e         
4745:000 | DONE ins | em  8 16 | 005dcc | d0 f6       |                 bne 005dc4           
4746:000 | DONE wsp | em  8 16 |        |             |
4747:000 | DONE ins | em  8 16 | 005dce | c2 20       |                 rep 20               
4747:001 | DONE ctl | em 16 16 |        |             |         .!a16
4748:000 | DONE lbl | em 16 16 | 005dd0 |             | type_done                            
4749:000 | DONE cmt | em 16 16 |        |             |                 ; clear stack
4750:000 | DONE ins | em 16 16 | 005dd0 | b4 02       |                 ldy.dx 02            
4751:000 | DONE ins | em 16 16 | 005dd2 | e8          |                 inx                  
4752:000 | DONE ins | em 16 16 | 005dd3 | e8          |                 inx                  
4753:000 | DONE ins | em 16 16 | 005dd4 | e8          |                 inx                  
4754:000 | DONE ins | em 16 16 | 005dd5 | e8          |                 inx                  
4755:000 | DONE wsp | em 16 16 |        |             |
4756:000 | DONE cmt | em 16 16 |        |             |                 ; TODO LATER add PAUSE here for multitasking
4757:000 | DONE wsp | em 16 16 |        |             |
4758:000 | DONE lbl | em 16 16 | 005dd6 |             | z_type                               
4758:001 | DONE ins | em 16 16 | 005dd6 | 60          |                 rts                  
4759:000 | DONE wsp | em 16 16 |        |             |
4760:000 | DONE wsp | em 16 16 |        |             |
4761:000 | DONE cmt | em 16 16 |        |             | ; -------------------------------------------------------------------
4762:000 | DONE cmt | em 16 16 |        |             | ; UDOT ( n -- ) X bytes / X cycles
4763:000 | DONE cmt | em 16 16 |        |             | ; Print unsigned number. This is based on the Forth word
4764:000 | DONE cmt | em 16 16 |        |             | ; 0 <# #S #> TYPE SPACE but uses the general print_number routine
4765:000 | DONE cmt | em 16 16 |        |             | ; that .S and DUMP etc use as well.
4766:000 | DONE lbl | em 16 16 | 005dd7 |             | xt_udot                              
4767:000 | DONE ins | em 16 16 | 005dd7 | 20 85 68    |                 jsr 006885           ( n -- )
4768:000 | DONE ins | em 16 16 | 005dda | a9 20 00    |                 lda.# 0020           SPACE
4769:000 | DONE ins | em 16 16 | 005ddd | 4c f5 57    |                 jmp 0057f5           JSR/RTS
4770:000 | DONE wsp | em 16 16 |        |             |
4771:000 | DONE lbl | em 16 16 | 005de0 |             | z_udot                               ; not reached
4772:000 | DONE wsp | em 16 16 |        |             |
4773:000 | DONE wsp | em 16 16 |        |             |
4774:000 | DONE wsp | em 16 16 |        |             |
4775:000 | DONE cmt | em 16 16 |        |             | ; -------------------------------------------------------------------
4776:000 | DONE cmt | em 16 16 |        |             | ; UDMOD ( ud u -- u ud ) 32/16 --> 32  X bytes / X cycles
4777:000 | DONE cmt | em 16 16 |        |             | ; Devide double-cell number by single-cell number, producing a double-cell
4778:000 | DONE cmt | em 16 16 |        |             | ; result and a single-cell remainder. Based on
4779:000 | DONE cmt | em 16 16 |        |             | ; Gforth  : UD/MOD  >R 0 R@ UM/MOD R> SWAP >R UM/MOD R> ;
4780:000 | DONE cmt | em 16 16 |        |             | ; pForth  : UD/MOD  >R 0 R@ UM/MOD ROT ROT R> UM/MOD ROT ;
4781:000 | DONE cmt | em 16 16 |        |             | ; This doesn't seem to be used anywhere else but for # (HASH) in coverting
4782:000 | DONE cmt | em 16 16 |        |             | ; pictured numerical output, though pForth claims it uses UM/MOD for that
4783:000 | DONE cmt | em 16 16 |        |             | ; At some point, we need to get back to UM/MOD because it's optimized
4784:000 | DONE lbl | em 16 16 | 005de0 |             | xt_udmod                             
4785:000 | DONE ins | em 16 16 | 005de0 | 20 bb 51    |                 jsr 0051bb           
4786:000 | DONE ins | em 16 16 | 005de3 | 20 33 53    |                 jsr 005333           
4787:000 | DONE ins | em 16 16 | 005de6 | 20 f9 5b    |                 jsr 005bf9           
4788:000 | DONE ins | em 16 16 | 005de9 | 20 5a 5e    |                 jsr 005e5a           
4789:000 | DONE ins | em 16 16 | 005dec | 20 32 5c    |                 jsr 005c32           
4790:000 | DONE ins | em 16 16 | 005def | 20 32 5c    |                 jsr 005c32           
4791:000 | DONE ins | em 16 16 | 005df2 | 20 02 5c    |                 jsr 005c02           
4792:000 | DONE ins | em 16 16 | 005df5 | 20 5a 5e    |                 jsr 005e5a           
4793:000 | DONE ins | em 16 16 | 005df8 | 4c 32 5c    |                 jmp 005c32           JSR/RTS
4794:000 | DONE lbl | em 16 16 | 005dfb |             | z_udmod                              
4795:000 | DONE wsp | em 16 16 |        |             |
4796:000 | DONE wsp | em 16 16 |        |             |
4797:000 | DONE cmt | em 16 16 |        |             | ; -------------------------------------------------------------------
4798:000 | DONE cmt | em 16 16 |        |             | ; UM* "UMSTAR" ( u u -- ud ) 16*16 -> 32  X bytes / X cycles
4799:000 | DONE cmt | em 16 16 |        |             | ; Multiply two unsigned 16 bit numbers, producing a 32 bit result.This is based
4800:000 | DONE cmt | em 16 16 |        |             | ; on modified FIG Forth code by Dr. Jefyll, see
4801:000 | DONE cmt | em 16 16 |        |             | ; http://forum.6502.org/viewtopic.php?f=9&t=689 for a detailed discussion. We
4802:000 | DONE cmt | em 16 16 |        |             | ; use the system scratch pad (SYSPAD) for temp storage (N in the original code)
4803:000 | DONE cmt | em 16 16 |        |             | ; FIG Forth is in the public domain. Note old Forth versions such as FIG Forth
4804:000 | DONE cmt | em 16 16 |        |             | ; call this "U*"
4805:000 | DONE wsp | em 16 16 |        |             |
4806:000 | DONE cmt | em 16 16 |        |             | ; This is currently a brute-force loop based on the 8-bit variant in "6502
4807:000 | DONE cmt | em 16 16 |        |             | ; Assembly Language Programming" by Leventhal. Once everything is working,
4808:000 | DONE cmt | em 16 16 |        |             | ; consider switching to a table-supported version based on
4809:000 | DONE cmt | em 16 16 |        |             | ; http://codebase64.org/doku.php?id=base:seriously_fast_multiplication
4810:000 | DONE cmt | em 16 16 |        |             | ; http://codebase64.org/doku.php?id=magazines:chacking16#d_graphics_for_the_masseslib3d_and_cool_world
4811:000 | DONE cmt | em 16 16 |        |             | ; http://forum.6502.org/viewtopic.php?p=205#p205
4812:000 | DONE cmt | em 16 16 |        |             | ; http://forum.6502.org/viewtopic.php?f=9&t=689 We use tmp1, tmp2, tmp3 for
4813:000 | DONE cmt | em 16 16 |        |             | ; this, with the assumption that tmp3 immediately follows tmp2
4814:000 | DONE lbl | em 16 16 | 005dfb |             | xt_umstar                            
4815:000 | DONE dir | em 16 16 |        |             |         .!a16                        
4816:000 | DONE cmt | em 16 16 |        |             |                 ; SPECIAL CASE 1: multiplication by zero
4817:000 | DONE ins | em 16 16 | 005dfb | 98          |                 tya                  
4818:000 | DONE ins | em 16 16 | 005dfc | f0 3d       |                 beq 005e3b           
4819:000 | DONE ins | em 16 16 | 005dfe | b5 00       |                 lda.dx 00            
4820:000 | DONE ins | em 16 16 | 005e00 | f0 39       |                 beq 005e3b           
4821:000 | DONE wsp | em 16 16 |        |             |
4822:000 | DONE cmt | em 16 16 |        |             |                 ; SPECIAL CASE 2: multiplication by one
4823:000 | DONE cmt | em 16 16 |        |             |                 ; This is a different routine than 2* because that instruction
4824:000 | DONE cmt | em 16 16 |        |             |                 ; stays inside one cell, whereas UM* produces a Double Cell
4825:000 | DONE cmt | em 16 16 |        |             |                 ; answer
4826:000 | DONE ins | em 16 16 | 005e02 | c0 01 00    |                 cpy.# 0001           non-distructively
4827:000 | DONE ins | em 16 16 | 005e05 | f0 3b       |                 beq 005e42           
4828:000 | DONE ins | em 16 16 | 005e07 | b5 00       |                 lda.dx 00            
4829:000 | DONE ins | em 16 16 | 005e09 | 3a          |                 dec.a                don't care about distruction
4830:000 | DONE ins | em 16 16 | 005e0a | f0 39       |                 beq 005e45           
4831:000 | DONE wsp | em 16 16 |        |             |
4832:000 | DONE cmt | em 16 16 |        |             |                 ; SPECIAL CASE 3: multiplication by two
4833:000 | DONE ins | em 16 16 | 005e0c | c0 02 00    |                 cpy.# 0002           
4834:000 | DONE ins | em 16 16 | 005e0f | f0 3b       |                 beq 005e4c           
4835:000 | DONE wsp | em 16 16 |        |             |
4836:000 | DONE ins | em 16 16 | 005e11 | b5 00       |                 lda.dx 00            
4837:000 | DONE ins | em 16 16 | 005e13 | c9 02 00    |                 cmp.# 0002           
4838:000 | DONE ins | em 16 16 | 005e16 | f0 38       |                 beq 005e50           
4839:000 | DONE wsp | em 16 16 |        |             |
4840:000 | DONE cmt | em 16 16 |        |             |                 ; NO SPECIAL CASE ("The Hard Way")
4841:000 | DONE ins | em 16 16 | 005e18 | 84 1c       |                 sty.d 00001c         TOS number  "40"
4842:000 | DONE ins | em 16 16 | 005e1a | 85 1e       |                 sta.d 00001e         NOS number  "41"
4843:000 | DONE ins | em 16 16 | 005e1c | a0 10 00    |                 ldy.# &16            loop counter
4844:000 | DONE wsp | em 16 16 |        |             |
4845:000 | DONE ins | em 16 16 | 005e1f | a9 00 00    |                 lda.# 0000           
4846:000 | DONE ins | em 16 16 | 005e22 | 85 20       |                 sta.d 000020         Most Significat Word (MSW) of result
4847:000 | DONE wsp | em 16 16 |        |             |
4848:000 | DONE lbl | em 16 16 | 005e24 |             | umstar_loop                          
4849:000 | DONE ins | em 16 16 | 005e24 | 0a          |                 asl.a                useless for first iteration
4850:000 | DONE ins | em 16 16 | 005e25 | 26 20       |                 rol.d 000020         move carry into MSB, useless first iteration
4851:000 | DONE ins | em 16 16 | 005e27 | 06 1e       |                 asl.d 00001e         move bit of NOS number into carry
4852:000 | DONE wsp | em 16 16 |        |             |
4853:000 | DONE cmt | em 16 16 |        |             |                 ; if there is no carry bit, we don't have to add and can go to
4854:000 | DONE cmt | em 16 16 |        |             |                 ; the next bit
4855:000 | DONE ins | em 16 16 | 005e29 | 90 07       |                 bcc 005e32           
4856:000 | DONE wsp | em 16 16 |        |             |
4857:000 | DONE ins | em 16 16 | 005e2b | 18          |                 clc                  
4858:000 | DONE ins | em 16 16 | 005e2c | 65 1c       |                 adc.d 00001c         we have a set bit, so add TOS
4859:000 | DONE wsp | em 16 16 |        |             |
4860:000 | DONE cmt | em 16 16 |        |             |                 ; if we have a carry, increase the MSW of result
4861:000 | DONE ins | em 16 16 | 005e2e | 90 02       |                 bcc 005e32           
4862:000 | DONE ins | em 16 16 | 005e30 | e6 20       |                 inc.d 000020         
4863:000 | DONE wsp | em 16 16 |        |             |
4864:000 | DONE lbl | em 16 16 | 005e32 |             | umstar_counter                       
4865:000 | DONE ins | em 16 16 | 005e32 | 88          |                 dey                  
4866:000 | DONE ins | em 16 16 | 005e33 | d0 ef       |                 bne 005e24           
4867:000 | DONE wsp | em 16 16 |        |             |
4868:000 | DONE cmt | em 16 16 |        |             |                 ; We're all done, clean up and leave
4869:000 | DONE ins | em 16 16 | 005e35 | 95 00       |                 sta.dx 00            store lower cell of number in NOS
4870:000 | DONE ins | em 16 16 | 005e37 | a4 20       |                 ldy.d 000020         store MSB in TOS as double cell
4871:000 | DONE wsp | em 16 16 |        |             |
4872:000 | DONE ins | em 16 16 | 005e39 | 80 1e       |                 bra 005e59           don't use RTS so we can natively compile
4873:000 | DONE wsp | em 16 16 |        |             |
4874:000 | DONE lbl | em 16 16 | 005e3b |             | umstar_zero                          
4875:000 | DONE cmt | em 16 16 |        |             |                 ; one or both of the numbers is zero, so we got off light
4876:000 | DONE ins | em 16 16 | 005e3b | a0 00 00    |                 ldy.# 0000           
4877:000 | DONE ins | em 16 16 | 005e3e | 94 00       |                 sty.dx 00            
4878:000 | DONE ins | em 16 16 | 005e40 | 80 17       |                 bra 005e59           
4879:000 | DONE wsp | em 16 16 |        |             |
4880:000 | DONE lbl | em 16 16 | 005e42 |             | umstar_one_tos                       
4881:000 | DONE cmt | em 16 16 |        |             |                 ; TOS is one, life is easy
4882:000 | DONE ins | em 16 16 | 005e42 | 88          |                 dey                  NOS is LSW, TOS becomes zero
4883:000 | DONE ins | em 16 16 | 005e43 | 80 14       |                 bra 005e59           
4884:000 | DONE lbl | em 16 16 | 005e45 |             | umstar_one_nos                       
4885:000 | DONE cmt | em 16 16 |        |             |                 ; NOS is one, life is easy
4886:000 | DONE ins | em 16 16 | 005e45 | 94 00       |                 sty.dx 00            
4887:000 | DONE ins | em 16 16 | 005e47 | a0 00 00    |                 ldy.# 0000           
4888:000 | DONE ins | em 16 16 | 005e4a | 80 0d       |                 bra 005e59           
4889:000 | DONE wsp | em 16 16 |        |             |
4890:000 | DONE lbl | em 16 16 | 005e4c |             | umstar_two_tos                       
4891:000 | DONE cmt | em 16 16 |        |             |                 ; TOS is two, life is easy
4892:000 | DONE ins | em 16 16 | 005e4c | b5 00       |                 lda.dx 00            
4893:000 | DONE ins | em 16 16 | 005e4e | 80 01       |                 bra 005e51           
4894:000 | DONE lbl | em 16 16 | 005e50 |             | umstar_two_nos                       
4895:000 | DONE cmt | em 16 16 |        |             |                 ; NOS is two, life is still easy
4896:000 | DONE ins | em 16 16 | 005e50 | 98          |                 tya                  
4897:000 | DONE lbl | em 16 16 | 005e51 |             | umstar_two_common                    
4898:000 | DONE ins | em 16 16 | 005e51 | 0a          |                 asl.a                multiply by two, top bit in Carry Flag
4899:000 | DONE ins | em 16 16 | 005e52 | 95 00       |                 sta.dx 00            Double Cell LSW is NOS
4900:000 | DONE wsp | em 16 16 |        |             |
4901:000 | DONE ins | em 16 16 | 005e54 | a9 00 00    |                 lda.# 0000           
4902:000 | DONE ins | em 16 16 | 005e57 | 2a          |                 rol.a                Rotate any Carry Flag into MSW
4903:000 | DONE ins | em 16 16 | 005e58 | a8          |                 tay                  
4904:000 | DONE wsp | em 16 16 |        |             |
4905:000 | DONE lbl | em 16 16 | 005e59 |             | z_umstar                             
4905:001 | DONE ins | em 16 16 | 005e59 | 60          |                 rts                  
4906:000 | DONE wsp | em 16 16 |        |             |
4907:000 | DONE cmt | em 16 16 |        |             | ; -------------------------------------------------------------------
4908:000 | DONE cmt | em 16 16 |        |             | ; UM/MOD ( ud u -- u u ) 32/16 -> 16  X bytes / X cycles
4909:000 | DONE cmt | em 16 16 |        |             | ; Divide double cell number by single cell number, returning the quotient as TOS
4910:000 | DONE cmt | em 16 16 |        |             | ; and any remainder as NOS. All numbers are unsigned. This is the basic division
4911:000 | DONE cmt | em 16 16 |        |             | ; operation all others use. Based on Garth Wilson's code at
4912:000 | DONE cmt | em 16 16 |        |             | ; http://6502.org/source/integers/ummodfix/ummodfix.htm We use "scratch" for N
4913:000 | DONE cmt | em 16 16 |        |             | ; and include a separate detection of division by zero to force an error code
4914:000 | DONE lbl | em 16 16 | 005e5a |             | xt_ummod                             
4915:000 | DONE dir | em 16 16 |        |             |         .!a16                        
4916:000 | DONE dir | em 16 16 |        |             |         .!xy16                       
4917:000 | DONE cmt | em 16 16 |        |             |                 ; Move the inputs to the scratchpad to avoid having to fool
4918:000 | DONE cmt | em 16 16 |        |             |                 ; around with the Data Stack and for speed. Garth's original
4919:000 | DONE cmt | em 16 16 |        |             |                 ; code uses the MVN instruction for this, but our TOS is Y which
4920:000 | DONE cmt | em 16 16 |        |             |                 ; makes that harder. When we're done, the setup will look likes
4921:000 | DONE cmt | em 16 16 |        |             |                 ; this: (S is start of the scratchpad in Direct Page)
4922:000 | DONE cmt | em 16 16 |        |             |                 ;
4923:000 | DONE cmt | em 16 16 |        |             |                 ;     +-----+-----+-----+-----+-----+-----+-----+-----+
4924:000 | DONE cmt | em 16 16 |        |             |                 ;     |  DIVISOR  |        DIVIDEND       | TEMP AREA |
4925:000 | DONE cmt | em 16 16 |        |             |                 ;     |           |  hi cell     lo cell  | carry bit |
4926:000 | DONE cmt | em 16 16 |        |             |                 ;     |  S    S+1 | S+2   S+3 | S+4   S+5 | S+6   S+7 |
4927:000 | DONE cmt | em 16 16 |        |             |                 ;     +-----+-----+-----+-----+-----+-----+-----+-----+
4928:000 | DONE cmt | em 16 16 |        |             |                 ;
4929:000 | DONE cmt | em 16 16 |        |             |                 ; The divisor is TOS (in Y), high cell of the dividend in NOS,
4930:000 | DONE cmt | em 16 16 |        |             |                 ; and low cell in 3OS
4931:000 | DONE wsp | em 16 16 |        |             |
4932:000 | DONE cmt | em 16 16 |        |             |                 ; Catch division by zero. We could include this in the code as
4933:000 | DONE cmt | em 16 16 |        |             |                 ; part of overflow detection (see below), but we want an error
4934:000 | DONE cmt | em 16 16 |        |             |                 ; to appear like in Gforth
4935:000 | DONE ins | em 16 16 | 005e5a | 98          |                 tya                  force flag test
4936:000 | DONE ins | em 16 16 | 005e5b | d0 06       |                 bne 005e63           
4937:000 | DONE wsp | em 16 16 |        |             |
4938:000 | DONE ins | em 16 16 | 005e5d | a9 21 6f    |                 lda.# 006f21         
4939:000 | DONE ins | em 16 16 | 005e60 | 4c 67 68    |                 jmp 006867           
4940:000 | DONE wsp | em 16 16 |        |             |
4941:000 | DONE lbl | em 16 16 | 005e63 |             | ummod_notzero                        
4942:000 | DONE ins | em 16 16 | 005e63 | 84 26       |                 sty.d 000026         Y is now free
4943:000 | DONE ins | em 16 16 | 005e65 | b5 00       |                 lda.dx 00            high cell of dividend
4944:000 | DONE ins | em 16 16 | 005e67 | 85 28       |                 sta.d 000028         
4945:000 | DONE ins | em 16 16 | 005e69 | b5 02       |                 lda.dx 02            low cell of dividend
4946:000 | DONE ins | em 16 16 | 005e6b | 85 2a       |                 sta.d 00002a         
4947:000 | DONE wsp | em 16 16 |        |             |
4948:000 | DONE cmt | em 16 16 |        |             |                 ; Drop one entry off of the stack and save the new Data Stack
4949:000 | DONE cmt | em 16 16 |        |             |                 ; Pointer, freeing X for index duty
4950:000 | DONE ins | em 16 16 | 005e6d | e8          |                 inx                  
4951:000 | DONE ins | em 16 16 | 005e6e | e8          |                 inx                  
4952:000 | DONE ins | em 16 16 | 005e6f | 86 22       |                 stx.d 000022         
4953:000 | DONE wsp | em 16 16 |        |             |
4954:000 | DONE cmt | em 16 16 |        |             |                 ; Detect overflow. Subtract divisor from high cell of dividend.
4955:000 | DONE cmt | em 16 16 |        |             |                 ; If carry flag remains set, divisor was not large enough to
4956:000 | DONE cmt | em 16 16 |        |             |                 ; avoid overflow. This also would detect division by zero, but
4957:000 | DONE cmt | em 16 16 |        |             |                 ; we did that already in a separate step
4958:000 | DONE ins | em 16 16 | 005e71 | 38          |                 sec                  
4959:000 | DONE ins | em 16 16 | 005e72 | a5 28       |                 lda.d 000028         
4960:000 | DONE ins | em 16 16 | 005e74 | e5 26       |                 sbc.d 000026         
4961:000 | DONE ins | em 16 16 | 005e76 | b0 21       |                 bcs 005e99           
4962:000 | DONE wsp | em 16 16 |        |             |
4963:000 | DONE cmt | em 16 16 |        |             |                 ; If there is no overflow, the carry flag remains clear for
4964:000 | DONE cmt | em 16 16 |        |             |                 ; first roll. We loop 16 times, but since we shift the dividend
4965:000 | DONE cmt | em 16 16 |        |             |                 ; over at the same time as shifting the answer in, the operation
4966:000 | DONE cmt | em 16 16 |        |             |                 ; must start and (!) finish with a shift of the low cell of the
4967:000 | DONE cmt | em 16 16 |        |             |                 ; dividend (which ends up holding the quotient), so we start
4968:000 | DONE cmt | em 16 16 |        |             |                 ; with 17 times in X. Y is used for temporary storage
4969:000 | DONE ins | em 16 16 | 005e78 | a2 11 00    |                 ldx.# &17            
4970:000 | DONE wsp | em 16 16 |        |             |
4971:000 | DONE lbl | em 16 16 | 005e7b |             | ummod_shift                          
4972:000 | DONE cmt | em 16 16 |        |             |                 ; Move low cell of dividend left one bit, also shifting answer
4973:000 | DONE cmt | em 16 16 |        |             |                 ; in. The first rotation brings in a zero, which later gets
4974:000 | DONE cmt | em 16 16 |        |             |                 ; pushed off the other end in the last rotation
4975:000 | DONE ins | em 16 16 | 005e7b | 26 2a       |                 rol.d 00002a         
4976:000 | DONE wsp | em 16 16 |        |             |
4977:000 | DONE cmt | em 16 16 |        |             |                 ; loop control
4978:000 | DONE ins | em 16 16 | 005e7d | ca          |                 dex                  
4979:000 | DONE ins | em 16 16 | 005e7e | f0 22       |                 beq 005ea2           
4980:000 | DONE wsp | em 16 16 |        |             |
4981:000 | DONE cmt | em 16 16 |        |             |                 ; Shift high cell of divident left one bit, also shifting the
4982:000 | DONE cmt | em 16 16 |        |             |                 ; next bit in from high bit of low cell
4983:000 | DONE ins | em 16 16 | 005e80 | 26 28       |                 rol.d 000028         
4984:000 | DONE ins | em 16 16 | 005e82 | a9 00 00    |                 lda.# 0000           
4985:000 | DONE ins | em 16 16 | 005e85 | 2a          |                 rol.a                
4986:000 | DONE ins | em 16 16 | 005e86 | 85 2c       |                 sta.d 00002c         store old high bit of dividend
4987:000 | DONE wsp | em 16 16 |        |             |
4988:000 | DONE cmt | em 16 16 |        |             |                 ; See if divisor will fit into high 17 bits of dividend by
4989:000 | DONE cmt | em 16 16 |        |             |                 ; subtracting and then looking at the carry flag. If carry was
4990:000 | DONE cmt | em 16 16 |        |             |                 ; cleared, divisor did not fit
4991:000 | DONE ins | em 16 16 | 005e88 | 38          |                 sec                  
4992:000 | DONE ins | em 16 16 | 005e89 | a5 28       |                 lda.d 000028         
4993:000 | DONE ins | em 16 16 | 005e8b | e5 26       |                 sbc.d 000026         
4994:000 | DONE ins | em 16 16 | 005e8d | a8          |                 tay                  save difference in Y until we know if we need it
4995:000 | DONE wsp | em 16 16 |        |             |
4996:000 | DONE cmt | em 16 16 |        |             |                 ; Bit 0 of S+6 serves as the 17th bit. Complete the subtraction
4997:000 | DONE cmt | em 16 16 |        |             |                 ; by doing the 17th bit before determining if the divisor fits
4998:000 | DONE cmt | em 16 16 |        |             |                 ; into the high 17 bits of the dividend. If so, the carry flag
4999:000 | DONE cmt | em 16 16 |        |             |                 ; remains set
5000:000 | DONE ins | em 16 16 | 005e8e | a5 2c       |                 lda.d 00002c         
5001:000 | DONE ins | em 16 16 | 005e90 | e9 00 00    |                 sbc.# 0000           
5002:000 | DONE ins | em 16 16 | 005e93 | 90 e6       |                 bcc 005e7b           
5003:000 | DONE wsp | em 16 16 |        |             |
5004:000 | DONE cmt | em 16 16 |        |             |                 ; Since the divisor fit into high 17 bits, update dividend high
5005:000 | DONE cmt | em 16 16 |        |             |                 ; cell to what it would be after subtraction
5006:000 | DONE ins | em 16 16 | 005e95 | 84 28       |                 sty.d 000028         
5007:000 | DONE ins | em 16 16 | 005e97 | 80 e2       |                 bra 005e7b           
5008:000 | DONE wsp | em 16 16 |        |             |
5009:000 | DONE lbl | em 16 16 | 005e99 |             | ummod_overflow                       
5010:000 | DONE cmt | em 16 16 |        |             |                 ; If an overflow condition occurs, put 0ffff
5011:000 | DONE cmt | em 16 16 |        |             |                 ; in both the quotient and remainder
5012:000 | DONE ins | em 16 16 | 005e99 | a6 22       |                 ldx.d 000022         restore DSP
5013:000 | DONE ins | em 16 16 | 005e9b | a0 ff ff    |                 ldy.# 0ffff          
5014:000 | DONE ins | em 16 16 | 005e9e | 94 00       |                 sty.dx 00            
5015:000 | DONE ins | em 16 16 | 005ea0 | 80 08       |                 bra 005eaa           go to end to enable native coding
5016:000 | DONE wsp | em 16 16 |        |             |
5017:000 | DONE lbl | em 16 16 | 005ea2 |             | ummod_complete                       
5018:000 | DONE ins | em 16 16 | 005ea2 | a6 22       |                 ldx.d 000022         restore DSP
5019:000 | DONE ins | em 16 16 | 005ea4 | a4 2a       |                 ldy.d 00002a         quotient is TOS
5020:000 | DONE ins | em 16 16 | 005ea6 | a5 28       |                 lda.d 000028         remainder is NOS
5021:000 | DONE ins | em 16 16 | 005ea8 | 95 00       |                 sta.dx 00            
5022:000 | DONE wsp | em 16 16 |        |             |
5023:000 | DONE lbl | em 16 16 | 005eaa |             | z_ummod                              
5023:001 | DONE ins | em 16 16 | 005eaa | 60          |                 rts                  
5024:000 | DONE wsp | em 16 16 |        |             |
5025:000 | DONE wsp | em 16 16 |        |             |
5026:000 | DONE cmt | em 16 16 |        |             | ; -------------------------------------------------------------------
5027:000 | DONE cmt | em 16 16 |        |             | ; UNUSED ( -- u ) 11 bytes / X cycles
5028:000 | DONE cmt | em 16 16 |        |             | ; Return amount of memory available for the Dictionary. Does not exclude the
5029:000 | DONE cmt | em 16 16 |        |             | ; space for PAD.
5030:000 | DONE lbl | em 16 16 | 005eab |             | xt_unused                            
5031:000 | DONE dir | em 16 16 |        |             |         .!a16                        
5032:000 | DONE ins | em 16 16 | 005eab | a9 ff 4f    |                 lda.# 004fff         
5033:000 | DONE ins | em 16 16 | 005eae | 38          |                 sec                  
5034:000 | DONE ins | em 16 16 | 005eaf | e5 00       |                 sbc.d 000000         current compile pointer
5035:000 | DONE wsp | em 16 16 |        |             |
5036:000 | DONE ins | em 16 16 | 005eb1 | ca          |                 dex                  
5037:000 | DONE ins | em 16 16 | 005eb2 | ca          |                 dex                  
5038:000 | DONE ins | em 16 16 | 005eb3 | 94 00       |                 sty.dx 00            
5039:000 | DONE wsp | em 16 16 |        |             |
5040:000 | DONE ins | em 16 16 | 005eb5 | a8          |                 tay                  
5041:000 | DONE wsp | em 16 16 |        |             |
5042:000 | DONE lbl | em 16 16 | 005eb6 |             | z_unused                             
5042:001 | DONE ins | em 16 16 | 005eb6 | 60          |                 rts                  
5043:000 | DONE wsp | em 16 16 |        |             |
5044:000 | DONE wsp | em 16 16 |        |             |
5045:000 | DONE cmt | em 16 16 |        |             | ; -------------------------------------------------------------------
5046:000 | DONE cmt | em 16 16 |        |             | ; VALUE ( n "name" -- ) X bytes / X cycles
5047:000 | DONE cmt | em 16 16 |        |             | ; Associate a name with a value (like a constant) that can be changed (like
5048:000 | DONE cmt | em 16 16 |        |             | ; a variable) with TO. We use the routines as CONSTANT, see there.
5049:000 | DONE wsp | em 16 16 |        |             |
5050:000 | DONE wsp | em 16 16 |        |             |
5051:000 | DONE cmt | em 16 16 |        |             | ; -------------------------------------------------------------------
5052:000 | DONE cmt | em 16 16 |        |             | ; VARIABLE ( "name" -- ) X bytes / X cycles
5053:000 | DONE cmt | em 16 16 |        |             | ; Define a word that returns the address for a variable. There are various Forth
5054:000 | DONE cmt | em 16 16 |        |             | ; definitions for this word, such as  CREATE 1 CELLS ALLOT  or CREATE 0 ,
5055:000 | DONE cmt | em 16 16 |        |             | ; We use a variant of the second one so the variable is initialized to zero
5056:000 | DONE lbl | em 16 16 | 005eb7 |             | xt_variable                          
5057:000 | DONE cmt | em 16 16 |        |             |                 ; We let CREATE do the heavy lifting
5058:000 | DONE ins | em 16 16 | 005eb7 | 20 7a 56    |                 jsr 00567a           
5059:000 | DONE wsp | em 16 16 |        |             |
5060:000 | DONE cmt | em 16 16 |        |             |                 ; There is no "stz.di cp" so we have to do this the
5061:000 | DONE cmt | em 16 16 |        |             |                 ; old way, which is still faster than a subroutine jump to ZERO
5062:000 | DONE ins | em 16 16 | 005eba | a9 00 00    |                 lda.# 0000           
5063:000 | DONE ins | em 16 16 | 005ebd | 92 00       |                 sta.di 000000        STA (CP)
5064:000 | DONE wsp | em 16 16 |        |             |
5065:000 | DONE ins | em 16 16 | 005ebf | e6 00       |                 inc.d 000000         direct COMMA
5066:000 | DONE ins | em 16 16 | 005ec1 | e6 00       |                 inc.d 000000         
5067:000 | DONE wsp | em 16 16 |        |             |
5068:000 | DONE ins | em 16 16 | 005ec3 | 4c 50 56    |                 jmp 005650           adjust the z_ value by adding 2 bytes
5069:000 | DONE wsp | em 16 16 |        |             |
5070:000 | DONE lbl | em 16 16 | 005ec6 |             | z_variable                           ; never reached
5071:000 | DONE wsp | em 16 16 |        |             |
5072:000 | DONE wsp | em 16 16 |        |             |
5073:000 | DONE cmt | em 16 16 |        |             | ; -------------------------------------------------------------------
5074:000 | DONE cmt | em 16 16 |        |             | ; WORD ( char "name" -- c-addr ) X bytes / X cycles
5075:000 | DONE cmt | em 16 16 |        |             | ; Obsolete parsing word included for backwards compatibility. Do note use this,
5076:000 | DONE cmt | em 16 16 |        |             | ; use PARSE or PARSE-NAME. Skips leading delimiters and copies word to storage
5077:000 | DONE cmt | em 16 16 |        |             | ; area for a maximum size of 255 bytes. Returns the result as a counted string
5078:000 | DONE cmt | em 16 16 |        |             | ; (requires COUNT to convert to modern format), and inserts a space after the
5079:000 | DONE cmt | em 16 16 |        |             | ; string. See "Forth Programmer's Handbook" 3rd edition p.159 and
5080:000 | DONE cmt | em 16 16 |        |             | ; http://www.forth200x.org/documents/html/rationale.html#rat:core:PARSE
5081:000 | DONE cmt | em 16 16 |        |             | ; for discussions of why you shouldn't be using WORD anymore. Forth would be
5082:000 | DONE cmt | em 16 16 |        |             | ; PARSE DUP BUFFER1 C! OUTPUT 1+ SWAP MOVE BUFFER1
5083:000 | DONE cmt | em 16 16 |        |             | ; TODO What about the space?
5084:000 | DONE lbl | em 16 16 | 005ec6 |             | xt_word                              
5085:000 | DONE cmt | em 16 16 |        |             |                 ; The real work is done by PARSE
5086:000 | DONE ins | em 16 16 | 005ec6 | 20 75 5b    |                 jsr 005b75           ( addr u )
5087:000 | DONE wsp | em 16 16 |        |             |
5088:000 | DONE cmt | em 16 16 |        |             |                 ; Now we have to convert the modern address to the old form
5089:000 | DONE ins | em 16 16 | 005ec9 | 8c 80 02    |                 sty 000280           overwrite MSB
5090:000 | DONE wsp | em 16 16 |        |             |
5091:000 | DONE ins | em 16 16 | 005ecc | ca          |                 dex                  
5092:000 | DONE ins | em 16 16 | 005ecd | ca          |                 dex                  ( addr <?> u )
5093:000 | DONE ins | em 16 16 | 005ece | a9 80 02    |                 lda.# 000280         
5094:000 | DONE ins | em 16 16 | 005ed1 | 1a          |                 inc.a                
5095:000 | DONE ins | em 16 16 | 005ed2 | 95 00       |                 sta.dx 00            ( addr buffer1+1 u )
5096:000 | DONE wsp | em 16 16 |        |             |
5097:000 | DONE ins | em 16 16 | 005ed4 | 20 52 5a    |                 jsr 005a52           
5098:000 | DONE wsp | em 16 16 |        |             |
5099:000 | DONE ins | em 16 16 | 005ed7 | ca          |                 dex                  
5100:000 | DONE ins | em 16 16 | 005ed8 | ca          |                 dex                  
5101:000 | DONE ins | em 16 16 | 005ed9 | 94 00       |                 sty.dx 00            
5102:000 | DONE wsp | em 16 16 |        |             |
5103:000 | DONE ins | em 16 16 | 005edb | a0 80 02    |                 ldy.# 000280         
5104:000 | DONE wsp | em 16 16 |        |             |
5105:000 | DONE lbl | em 16 16 | 005ede |             | z_word                               
5105:001 | DONE ins | em 16 16 | 005ede | 60          |                 rts                  
5106:000 | DONE wsp | em 16 16 |        |             |
5107:000 | DONE wsp | em 16 16 |        |             |
5108:000 | DONE cmt | em 16 16 |        |             | ; -------------------------------------------------------------------
5109:000 | DONE cmt | em 16 16 |        |             | ; WORDS&SIZES ( -- ) X bytes / X cycles
5110:000 | DONE cmt | em 16 16 |        |             | ; Prints all words in the dictionary with the sizes of their code as returned by
5111:000 | DONE cmt | em 16 16 |        |             | ; WORDSIZE. Used to test different optimizations of the compiling routines,
5112:000 | DONE cmt | em 16 16 |        |             | ; specific to Liara Forth. Uses tmp3
5113:000 | DONE lbl | em 16 16 | 005edf |             | xt_wordsnsizes                       
5114:000 | DONE dir | em 16 16 |        |             |         .!a16                        
5115:000 | DONE ins | em 16 16 | 005edf | a9 ff ff    |                 lda.# 0ffff          
5116:000 | DONE ins | em 16 16 | 005ee2 | 85 20       |                 sta.d 000020         set flag that we want sizes, too
5117:000 | DONE wsp | em 16 16 |        |             |
5118:000 | DONE cmt | em 16 16 |        |             |                 ; continue with WORDS
5119:000 | DONE ins | em 16 16 | 005ee4 | 80 02       |                 bra 005ee8           
5120:000 | DONE wsp | em 16 16 |        |             |
5121:000 | DONE cmt | em 16 16 |        |             | ; -------------------------------------------------------------------
5122:000 | DONE cmt | em 16 16 |        |             | ; WORDS ( -- ) X bytes / X cycles
5123:000 | DONE cmt | em 16 16 |        |             | ; Print list of all Forth words available. This only really makes sense in an
5124:000 | DONE cmt | em 16 16 |        |             | ; interactive setting, so we don't have to worry about speed. WORDS&SIZES falls
5125:000 | DONE cmt | em 16 16 |        |             | ; through to here. Uses tmp3. Both WORDS and WORDS&SIZES might be better off as
5126:000 | DONE cmt | em 16 16 |        |             | ; high-level Forth words, but these routines are left over from early testing
5127:000 | DONE lbl | em 16 16 | 005ee6 |             | xt_words                             
5128:000 | DONE ins | em 16 16 | 005ee6 | 64 20       |                 stz.d 000020         store flag that we don't want to print sizes
5129:000 | DONE wsp | em 16 16 |        |             |
5130:000 | DONE lbl | em 16 16 | 005ee8 |             | words_common                         
5131:000 | DONE cmt | em 16 16 |        |             |                 ; common routine for WORDS and WORDS&SIZES
5132:000 | DONE ins | em 16 16 | 005ee8 | 20 74 56    |                 jsr 005674           start on next line, this is a style choice
5133:000 | DONE wsp | em 16 16 |        |             |
5134:000 | DONE ins | em 16 16 | 005eeb | a5 02       |                 lda.d 000002         nt of first entry in Dictionary (last added)
5135:000 | DONE ins | em 16 16 | 005eed | 48          |                 pha                  
5136:000 | DONE wsp | em 16 16 |        |             |
5137:000 | DONE ins | em 16 16 | 005eee | ca          |                 dex                  create room on TOS
5138:000 | DONE ins | em 16 16 | 005eef | ca          |                 dex                  
5139:000 | DONE ins | em 16 16 | 005ef0 | 94 00       |                 sty.dx 00            
5140:000 | DONE wsp | em 16 16 |        |             |
5141:000 | DONE lbl | em 16 16 | 005ef2 |             | words_loop                           
5142:000 | DONE ins | em 16 16 | 005ef2 | a8          |                 tay                  ( nt )
5143:000 | DONE ins | em 16 16 | 005ef3 | 20 6c 5a    |                 jsr 005a6c           ( nt -- addr u )
5144:000 | DONE ins | em 16 16 | 005ef6 | 20 b6 5d    |                 jsr 005db6           
5145:000 | DONE ins | em 16 16 | 005ef9 | 20 72 5d    |                 jsr 005d72           
5146:000 | DONE wsp | em 16 16 |        |             |
5147:000 | DONE cmt | em 16 16 |        |             |                 ; If the user wants sizes as well, print them
5148:000 | DONE ins | em 16 16 | 005efc | a5 20       |                 lda.d 000020         
5149:000 | DONE ins | em 16 16 | 005efe | f0 0f       |                 beq 005f0f           
5150:000 | DONE wsp | em 16 16 |        |             |
5151:000 | DONE cmt | em 16 16 |        |             |                 ; For the moment, just print the size in bytes after the word's
5152:000 | DONE cmt | em 16 16 |        |             |                 ; name string. We can decide if we want to get all fancy later
5153:000 | DONE ins | em 16 16 | 005f00 | ca          |                 dex                  
5154:000 | DONE ins | em 16 16 | 005f01 | ca          |                 dex                  
5155:000 | DONE ins | em 16 16 | 005f02 | 94 00       |                 sty.dx 00            
5156:000 | DONE wsp | em 16 16 |        |             |
5157:000 | DONE ins | em 16 16 | 005f04 | 7a          |                 ply                  get nt back again
5158:000 | DONE ins | em 16 16 | 005f05 | 5a          |                 phy                  
5159:000 | DONE ins | em 16 16 | 005f06 | 20 23 5f    |                 jsr 005f23           ( u )
5160:000 | DONE ins | em 16 16 | 005f09 | 20 d5 51    |                 jsr 0051d5           
5161:000 | DONE ins | em 16 16 | 005f0c | 20 72 5d    |                 jsr 005d72           
5162:000 | DONE wsp | em 16 16 |        |             |
5163:000 | DONE lbl | em 16 16 | 005f0f |             | words_nosizes                        
5164:000 | DONE ins | em 16 16 | 005f0f | 68          |                 pla                  get back first entry in Dictionary
5165:000 | DONE wsp | em 16 16 |        |             |
5166:000 | DONE cmt | em 16 16 |        |             |                 ; The next nt is two bytes below the nt of the current one in
5167:000 | DONE cmt | em 16 16 |        |             |                 ; the Dictionary header
5168:000 | DONE ins | em 16 16 | 005f10 | 1a          |                 inc.a                
5169:000 | DONE ins | em 16 16 | 005f11 | 1a          |                 inc.a                
5170:000 | DONE wsp | em 16 16 |        |             |
5171:000 | DONE ins | em 16 16 | 005f12 | ca          |                 dex                  
5172:000 | DONE ins | em 16 16 | 005f13 | ca          |                 dex                  
5173:000 | DONE ins | em 16 16 | 005f14 | 94 00       |                 sty.dx 00            
5174:000 | DONE wsp | em 16 16 |        |             |
5175:000 | DONE ins | em 16 16 | 005f16 | a8          |                 tay                  
5176:000 | DONE ins | em 16 16 | 005f17 | b9 00 00    |                 lda.y 0000           LDA $0000,Y
5177:000 | DONE ins | em 16 16 | 005f1a | 48          |                 pha                  
5178:000 | DONE ins | em 16 16 | 005f1b | d0 d5       |                 bne 005ef2           zero entry signals end of Dictionary
5179:000 | DONE wsp | em 16 16 |        |             |
5180:000 | DONE cmt | em 16 16 |        |             |                 ; all done, clean up
5181:000 | DONE ins | em 16 16 | 005f1d | 68          |                 pla                  balance MPU stack, value discarded
5182:000 | DONE wsp | em 16 16 |        |             |
5183:000 | DONE ins | em 16 16 | 005f1e | b4 00       |                 ldy.dx 00            
5184:000 | DONE ins | em 16 16 | 005f20 | e8          |                 inx                  
5185:000 | DONE ins | em 16 16 | 005f21 | e8          |                 inx                  
5186:000 | DONE wsp | em 16 16 |        |             |
5187:000 | DONE lbl | em 16 16 | 005f22 |             | z_words                              
5188:000 | DONE lbl | em 16 16 | 005f22 |             | z_wordsnsizes                        
5188:001 | DONE ins | em 16 16 | 005f22 | 60          |                 rts                  
5189:000 | DONE wsp | em 16 16 |        |             |
5190:000 | DONE cmt | em 16 16 |        |             | ; -------------------------------------------------------------------
5191:000 | DONE cmt | em 16 16 |        |             | ; WORDSIZE ( nt -- u ) X bytes / X cycles
5192:000 | DONE cmt | em 16 16 |        |             | ; Given an word's name token (nt), return the size of the word's payload (CFA
5193:000 | DONE cmt | em 16 16 |        |             | ; plus PFA) in bytes. Does not count the final RTS. Specific to Liara Forth.
5194:000 | DONE cmt | em 16 16 |        |             | ; Uses tmp2, note WORDS and WORDS&SIZES use tmp3
5195:000 | DONE lbl | em 16 16 | 005f23 |             | xt_wordsize                          
5196:000 | DONE cmt | em 16 16 |        |             |                 ; We get the beginning address of the code from the word's
5197:000 | DONE cmt | em 16 16 |        |             |                 ; header entry for the execution token (xt, 4 bytes down) and
5198:000 | DONE cmt | em 16 16 |        |             |                 ; the pointer to the end of the code (z_word, six bytes down).
5199:000 | DONE ins | em 16 16 | 005f23 | c8          |                 iny                  
5200:000 | DONE ins | em 16 16 | 005f24 | c8          |                 iny                  
5201:000 | DONE ins | em 16 16 | 005f25 | c8          |                 iny                  
5202:000 | DONE ins | em 16 16 | 005f26 | c8          |                 iny                  nt+4, location of xt
5203:000 | DONE ins | em 16 16 | 005f27 | b9 00 00    |                 lda.y 0000           get xt
5204:000 | DONE ins | em 16 16 | 005f2a | 85 1e       |                 sta.d 00001e         
5205:000 | DONE wsp | em 16 16 |        |             |
5206:000 | DONE ins | em 16 16 | 005f2c | c8          |                 iny                  
5207:000 | DONE ins | em 16 16 | 005f2d | c8          |                 iny                  nt+6, location of z_word
5208:000 | DONE ins | em 16 16 | 005f2e | b9 00 00    |                 lda.y 0000           
5209:000 | DONE wsp | em 16 16 |        |             |
5210:000 | DONE ins | em 16 16 | 005f31 | 38          |                 sec                  (z_word - xt_word)
5211:000 | DONE ins | em 16 16 | 005f32 | e5 1e       |                 sbc.d 00001e         
5212:000 | DONE ins | em 16 16 | 005f34 | a8          |                 tay                  
5213:000 | DONE wsp | em 16 16 |        |             |
5214:000 | DONE lbl | em 16 16 | 005f35 |             | z_wordsize                           
5214:001 | DONE ins | em 16 16 | 005f35 | 60          |                 rts                  
5215:000 | DONE wsp | em 16 16 |        |             |
5216:000 | DONE wsp | em 16 16 |        |             |
5217:000 | DONE cmt | em 16 16 |        |             | ; -------------------------------------------------------------------
5218:000 | DONE cmt | em 16 16 |        |             | ; XOR ( n m -- n ) 6 bytes / X cycles
5219:000 | DONE cmt | em 16 16 |        |             | ; Logical XOR
5220:000 | DONE lbl | em 16 16 | 005f36 |             | xt_xor                               
5221:000 | DONE ins | em 16 16 | 005f36 | 98          |                 tya                  
5222:000 | DONE ins | em 16 16 | 005f37 | 55 00       |                 eor.dx 00            
5223:000 | DONE ins | em 16 16 | 005f39 | a8          |                 tay                  
5224:000 | DONE wsp | em 16 16 |        |             |
5225:000 | DONE ins | em 16 16 | 005f3a | e8          |                 inx                  
5226:000 | DONE ins | em 16 16 | 005f3b | e8          |                 inx                  
5227:000 | DONE wsp | em 16 16 |        |             |
5228:000 | DONE lbl | em 16 16 | 005f3c |             | z_xor                                
5228:001 | DONE ins | em 16 16 | 005f3c | 60          |                 rts                  
5229:000 | DONE wsp | em 16 16 |        |             |
5230:000 | DONE wsp | em 16 16 |        |             |
5231:000 | DONE cmt | em 16 16 |        |             | ; ===================================================================
5232:000 | DONE cmt | em 16 16 |        |             | ; MIDDLE INCLUDES
5233:000 | DONE wsp | em 16 16 |        |             |
5234:000 | DONE cmt | em 16 16 |        |             | ; Dictionary Headers for Liara Forth for the W65C265SXB
5234:001 | DONE cmt | em 16 16 |        |             | ; Scot W. Stevenson <scot.stevenson@gmail.com>
5234:002 | DONE cmt | em 16 16 |        |             | ; First version: 05. Dec 2016
5234:003 | DONE cmt | em 16 16 |        |             | ; This version: 09. Mar 2017
5234:004 | DONE wsp | em 16 16 |        |             |
5234:005 | DONE cmt | em 16 16 |        |             | ; Dictionary headers are kept separately from the code, which allows various
5234:006 | DONE cmt | em 16 16 |        |             | ; tricks in the code. We roughly follow the Gforth terminology: The Execution
5234:007 | DONE cmt | em 16 16 |        |             | ; Token (xt) is the address of the first byte of a word's code that can be,
5234:008 | DONE cmt | em 16 16 |        |             | ; well, executed; the Name Token (nt) is a pointer to the beginning of the
5234:009 | DONE cmt | em 16 16 |        |             | ; word's header in the Dictionary. There, the link to the next word in the
5234:010 | DONE cmt | em 16 16 |        |             | ; Dictionary is always one cell down from the current word's own nt. In the code
5234:011 | DONE cmt | em 16 16 |        |             | ; itself, we use "nt_<WORD>" ("header") for the nt and "xt_<WORD>" ("A" as the
5234:012 | DONE cmt | em 16 16 |        |             | ; beginning) for the xt.
5234:013 | DONE cmt | em 16 16 |        |             | ;
5234:014 | DONE cmt | em 16 16 |        |             | ; This gives us the following header structure:
5234:015 | DONE cmt | em 16 16 |        |             | ;
5234:016 | DONE cmt | em 16 16 |        |             | ;              8 bit     8 bit
5234:017 | DONE cmt | em 16 16 |        |             | ;               LSB       MSB
5234:018 | DONE cmt | em 16 16 |        |             | ; nt_word ->  +--------+--------+
5234:019 | DONE cmt | em 16 16 |        |             | ;             | Length | Status |
5234:020 | DONE cmt | em 16 16 |        |             | ;          +2 +--------+--------+
5234:021 | DONE cmt | em 16 16 |        |             | ;             | Next Header     | -> nt_next_word
5234:022 | DONE cmt | em 16 16 |        |             | ;          +4 +-----------------+
5234:023 | DONE cmt | em 16 16 |        |             | ;             | Start of Code   | -> xt_word
5234:024 | DONE cmt | em 16 16 |        |             | ;          +6 +-----------------+
5234:025 | DONE cmt | em 16 16 |        |             | ;             | End of Code     | -> z_word
5234:026 | DONE cmt | em 16 16 |        |             | ;          +8 +--------+--------+
5234:027 | DONE cmt | em 16 16 |        |             | ;             | Name   |        |
5234:028 | DONE cmt | em 16 16 |        |             | ;             +--------+--------+
5234:029 | DONE cmt | em 16 16 |        |             | ;             |        |        |
5234:030 | DONE cmt | em 16 16 |        |             | ;             +--------+--------+
5234:031 | DONE cmt | em 16 16 |        |             | ;             |        |  ...   | (name string does not end with a zero)
5234:032 | DONE cmt | em 16 16 |        |             | ;          +n +--------+--------+
5234:033 | DONE cmt | em 16 16 |        |             | ;
5234:034 | DONE cmt | em 16 16 |        |             | ; The Status Byte is created by adding the flags defined in
5234:035 | DONE cmt | em 16 16 |        |             | ; definitions.tasm:
5234:036 | DONE cmt | em 16 16 |        |             | ;
5234:037 | DONE cmt | em 16 16 |        |             | ;       CO - Compile Only
5234:038 | DONE cmt | em 16 16 |        |             | ;       IM - Immediate Word
5234:039 | DONE cmt | em 16 16 |        |             | ;       NC - Native Compile allowed (inline compile)
5234:040 | DONE wsp | em 16 16 |        |             |
5234:041 | DONE cmt | em 16 16 |        |             | ; Note there are currently five bits unused. The last word (top word in code)
5234:042 | DONE cmt | em 16 16 |        |             | ; is always BYE. It is marked as the last word by its value of 0000 in its Next
5234:043 | DONE cmt | em 16 16 |        |             | ; Header field. The words are sorted with the more common ones first (further
5234:044 | DONE cmt | em 16 16 |        |             | ; down in code) so they are found earlier.  Anythiing to do with output comes
5234:045 | DONE cmt | em 16 16 |        |             | ; later (further up) because things will always be slow if there is a human
5234:046 | DONE cmt | em 16 16 |        |             | ; involved.
5234:047 | DONE wsp | em 16 16 |        |             |
5234:048 | DONE lbl | em 16 16 | 005f3d |             | nt_bye                               
5234:049 | DONE dir | em 16 16 | 005f3d | (1 bytes)   |         .byte 03                     length of word string
5234:049 | DONE dir | em 16 16 |        |             |                 03                       --  .
5234:050 | DONE dir | em 16 16 | 005f3e | (1 bytes)   |         .byte { NC }                 status byte
5234:050 | DONE dir | em 16 16 |        |             |                 01                       --  .
5234:051 | DONE dir | em 16 16 | 005f3f | (2 bytes)   |         .word 0000                   next word in dictionary, 0000 signals end
5234:051 | DONE dir | em 16 16 |        |             |                 00 00                    --  . .
5234:052 | DONE dir | em 16 16 | 005f41 | (2 bytes)   |         .word 00558e                 start of code, the xt of this word
5234:052 | DONE dir | em 16 16 |        |             |                 8e 55                    --  . U
5234:053 | DONE dir | em 16 16 | 005f43 | (2 bytes)   |         .word 005595                 end of code (points to RTS)
5234:053 | DONE dir | em 16 16 |        |             |                 95 55                    --  . U
5234:054 | DONE dir | em 16 16 | 005f45 | (3 bytes)   |         .byte 62, 79, 65             word name, always lower case
5234:054 | DONE dir | em 16 16 |        |             |                 62 79 65                 --  b y e
5234:055 | DONE wsp | em 16 16 |        |             |
5234:056 | DONE lbl | em 16 16 | 005f48 |             | nt_cold                              
5234:057 | DONE dir | em 16 16 | 005f48 | (2 bytes)   |         .byte 4, 00                  
5234:057 | DONE dir | em 16 16 |        |             |                 04 00                    --  . .
5234:058 | DONE dir | em 16 16 | 005f4a | (6 bytes)   |         .word nt_bye, xt_cold, 0050f4 
5234:058 | DONE dir | em 16 16 |        |             |                 3d 5f 64 50 f4 50        --  = _ d P . P
5234:059 | DONE dir | em 16 16 | 005f50 | (4 bytes)   |         .byte 63, 6f, 6c, 64         
5234:059 | DONE dir | em 16 16 |        |             |                 63 6f 6c 64              --  c o l d
5234:060 | DONE wsp | em 16 16 |        |             |
5234:061 | DONE lbl | em 16 16 | 005f54 |             | nt_word                              
5234:062 | DONE dir | em 16 16 | 005f54 | (2 bytes)   |         .byte 4, { NC }              
5234:062 | DONE dir | em 16 16 |        |             |                 04 01                    --  . .
5234:063 | DONE dir | em 16 16 | 005f56 | (6 bytes)   |         .word nt_cold, xt_word, 005ede 
5234:063 | DONE dir | em 16 16 |        |             |                 48 5f c6 5e de 5e        --  H _ . ^ . ^
5234:064 | DONE dir | em 16 16 | 005f5c | (4 bytes)   |         .byte 77, 6f, 72, 64         
5234:064 | DONE dir | em 16 16 |        |             |                 77 6f 72 64              --  w o r d
5234:065 | DONE wsp | em 16 16 |        |             |
5234:066 | DONE lbl | em 16 16 | 005f60 |             | nt_find                              
5234:067 | DONE dir | em 16 16 | 005f60 | (2 bytes)   |         .byte 4, { NC }              
5234:067 | DONE dir | em 16 16 |        |             |                 04 01                    --  . .
5234:068 | DONE dir | em 16 16 | 005f62 | (6 bytes)   |         .word nt_word, xt_find, 005886 
5234:068 | DONE dir | em 16 16 |        |             |                 54 5f 56 58 86 58        --  T _ V X . X
5234:069 | DONE dir | em 16 16 | 005f68 | (4 bytes)   |         .byte 66, 69, 6e, 64         
5234:069 | DONE dir | em 16 16 |        |             |                 66 69 6e 64              --  f i n d
5234:070 | DONE wsp | em 16 16 |        |             |
5234:071 | DONE lbl | em 16 16 | 005f6c |             | nt_aligned                           
5234:072 | DONE dir | em 16 16 | 005f6c | (2 bytes)   |         .byte 7, { NC }              
5234:072 | DONE dir | em 16 16 |        |             |                 07 01                    --  . .
5234:073 | DONE dir | em 16 16 | 005f6e | (6 bytes)   |         .word nt_find, xt_aligned, 0054fa 
5234:073 | DONE dir | em 16 16 |        |             |                 60 5f f9 54 fa 54        --  ` _ . T . T
5234:074 | DONE dir | em 16 16 | 005f74 | (7 bytes)   |         .byte 61, 6c, 69, 67, 6e, 65, 64 
5234:074 | DONE dir | em 16 16 |        |             |                 61 6c 69 67 6e 65 64     --  a l i g n e d
5234:075 | DONE wsp | em 16 16 |        |             |
5234:076 | DONE lbl | em 16 16 | 005f7b |             | nt_align                             
5234:077 | DONE dir | em 16 16 | 005f7b | (2 bytes)   |         .byte 5, { NC }              
5234:077 | DONE dir | em 16 16 |        |             |                 05 01                    --  . .
5234:078 | DONE dir | em 16 16 | 005f7d | (6 bytes)   |         .word nt_aligned, xt_align, 0054f8 
5234:078 | DONE dir | em 16 16 |        |             |                 6c 5f f7 54 f8 54        --  l _ . T . T
5234:079 | DONE dir | em 16 16 | 005f83 | (5 bytes)   |         .byte 61, 6c, 69, 67, 6e     
5234:079 | DONE dir | em 16 16 |        |             |                 61 6c 69 67 6e           --  a l i g n
5234:080 | DONE wsp | em 16 16 |        |             |
5234:081 | DONE lbl | em 16 16 | 005f88 |             | nt_wordsnsizes                       
5234:082 | DONE dir | em 16 16 | 005f88 | (2 bytes)   |         .byte 0b, { NC }             
5234:082 | DONE dir | em 16 16 |        |             |                 0b 01                    --   .
5234:083 | DONE dir | em 16 16 | 005f8a | (6 bytes)   |         .word nt_align, xt_wordsnsizes, 005f22 
5234:083 | DONE dir | em 16 16 |        |             |                 7b 5f df 5e 22 5f        --  { _ . ^ " _
5234:084 | DONE dir | em 16 16 | 005f90 | (11 bytes)  |         .byte 77, 6f, 72, 64, 73, 26, 73, 69, 7a, 65, 73 
5234:084 | DONE dir | em 16 16 |        |             |                 77 6f 72 64 73 26 73 69  --  w o r d s & s i
5234:084 | DONE dir | em 16 16 |        |             |                 7a 65 73                 --  z e s
5234:085 | DONE wsp | em 16 16 |        |             |
5234:086 | DONE lbl | em 16 16 | 005f9b |             | nt_words                             
5234:087 | DONE dir | em 16 16 | 005f9b | (2 bytes)   |         .byte 5, { NC }              
5234:087 | DONE dir | em 16 16 |        |             |                 05 01                    --  . .
5234:088 | DONE dir | em 16 16 | 005f9d | (6 bytes)   |         .word nt_wordsnsizes, xt_words, 005f22 
5234:088 | DONE dir | em 16 16 |        |             |                 88 5f e6 5e 22 5f        --  . _ . ^ " _
5234:089 | DONE dir | em 16 16 | 005fa3 | (5 bytes)   |         .byte 77, 6f, 72, 64, 73     
5234:089 | DONE dir | em 16 16 |        |             |                 77 6f 72 64 73           --  w o r d s
5234:090 | DONE wsp | em 16 16 |        |             |
5234:091 | DONE lbl | em 16 16 | 005fa8 |             | nt_dump                              
5234:092 | DONE dir | em 16 16 | 005fa8 | (2 bytes)   |         .byte 4, { NC }              
5234:092 | DONE dir | em 16 16 |        |             |                 04 01                    --  . .
5234:093 | DONE dir | em 16 16 | 005faa | (6 bytes)   |         .word nt_words, xt_dump, 0057ea 
5234:093 | DONE dir | em 16 16 |        |             |                 9b 5f c4 57 ea 57        --  . _ . W . W
5234:094 | DONE dir | em 16 16 | 005fb0 | (4 bytes)   |         .byte 64, 75, 6d, 70         
5234:094 | DONE dir | em 16 16 |        |             |                 64 75 6d 70              --  d u m p
5234:095 | DONE wsp | em 16 16 |        |             |
5234:096 | DONE lbl | em 16 16 | 005fb4 |             | nt_marker                            
5234:097 | DONE dir | em 16 16 | 005fb4 | (2 bytes)   |         .byte 6, { IM + NC }         
5234:097 | DONE dir | em 16 16 |        |             |                 06 03                    --  . .
5234:098 | DONE dir | em 16 16 | 005fb6 | (6 bytes)   |         .word nt_dump, xt_marker, 005a2b 
5234:098 | DONE dir | em 16 16 |        |             |                 a8 5f 02 5a 2b 5a        --  . _ . Z + Z
5234:099 | DONE dir | em 16 16 | 005fbc | (6 bytes)   |         .byte 6d, 61, 72, 6b, 65, 72 
5234:099 | DONE dir | em 16 16 |        |             |                 6d 61 72 6b 65 72        --  m a r k e r
5234:100 | DONE wsp | em 16 16 |        |             |
5234:101 | DONE lbl | em 16 16 | 005fc2 |             | nt_wordsize                          
5234:102 | DONE dir | em 16 16 | 005fc2 | (2 bytes)   |         .byte 8, { NC }              
5234:102 | DONE dir | em 16 16 |        |             |                 08 01                    --  . .
5234:103 | DONE dir | em 16 16 | 005fc4 | (6 bytes)   |         .word nt_marker, xt_wordsize, 005f35 
5234:103 | DONE dir | em 16 16 |        |             |                 b4 5f 23 5f 35 5f        --  . _ # _ 5 _
5234:104 | DONE dir | em 16 16 | 005fca | (8 bytes)   |         .byte 77, 6f, 72, 64, 73, 69, 7a, 65 
5234:104 | DONE dir | em 16 16 |        |             |                 77 6f 72 64 73 69 7a 65  --  w o r d s i z e
5234:104 | DONE dir | em 16 16 |        |             |                                          -- 
5234:105 | DONE wsp | em 16 16 |        |             |
5234:106 | DONE lbl | em 16 16 | 005fd2 |             | nt_pick                              
5234:107 | DONE dir | em 16 16 | 005fd2 | (2 bytes)   |         .byte 4, { NC }              
5234:107 | DONE dir | em 16 16 |        |             |                 04 01                    --  . .
5234:108 | DONE dir | em 16 16 | 005fd4 | (6 bytes)   |         .word nt_wordsize, xt_pick, 005bb5 
5234:108 | DONE dir | em 16 16 |        |             |                 c2 5f a8 5b b5 5b        --  . _ . [ . [
5234:109 | DONE dir | em 16 16 | 005fda | (4 bytes)   |         .byte 70, 69, 63, 6b         
5234:109 | DONE dir | em 16 16 |        |             |                 70 69 63 6b              --  p i c k
5234:110 | DONE wsp | em 16 16 |        |             |
5234:111 | DONE lbl | em 16 16 | 005fde |             | nt_bell                              
5234:112 | DONE dir | em 16 16 | 005fde | (2 bytes)   |         .byte 4, { NC }              
5234:112 | DONE dir | em 16 16 |        |             |                 04 01                    --  . .
5234:113 | DONE dir | em 16 16 | 005fe0 | (6 bytes)   |         .word nt_pick, xt_bell, 005561 
5234:113 | DONE dir | em 16 16 |        |             |                 d2 5f 5b 55 61 55        --  . _ [ U a U
5234:114 | DONE dir | em 16 16 | 005fe6 | (4 bytes)   |         .byte 62, 65, 6c, 6c         
5234:114 | DONE dir | em 16 16 |        |             |                 62 65 6c 6c              --  b e l l
5234:115 | DONE wsp | em 16 16 |        |             |
5234:116 | DONE lbl | em 16 16 | 005fea |             | nt_chars                             
5234:117 | DONE dir | em 16 16 | 005fea | (2 bytes)   |         .byte 5, { NC }              
5234:117 | DONE dir | em 16 16 |        |             |                 05 01                    --  . .
5234:118 | DONE dir | em 16 16 | 005fec | (6 bytes)   |         .word nt_bell, xt_chars, 0055db 
5234:118 | DONE dir | em 16 16 |        |             |                 de 5f da 55 db 55        --  . _ . U . U
5234:119 | DONE dir | em 16 16 | 005ff2 | (5 bytes)   |         .byte 63, 68, 61, 72, 73     
5234:119 | DONE dir | em 16 16 |        |             |                 63 68 61 72 73           --  c h a r s
5234:120 | DONE wsp | em 16 16 |        |             |
5234:121 | DONE lbl | em 16 16 | 005ff7 |             | nt_cellplus                          
5234:122 | DONE dir | em 16 16 | 005ff7 | (2 bytes)   |         .byte 5, { NC }              
5234:122 | DONE dir | em 16 16 |        |             |                 05 01                    --  . .
5234:123 | DONE dir | em 16 16 | 005ff9 | (6 bytes)   |         .word nt_chars, xt_cellplus, 0055c1 
5234:123 | DONE dir | em 16 16 |        |             |                 ea 5f bf 55 c1 55        --  . _ . U . U
5234:124 | DONE dir | em 16 16 | 005fff | (5 bytes)   |         .byte 63, 65, 6c, 6c, 2b     
5234:124 | DONE dir | em 16 16 |        |             |                 63 65 6c 6c 2b           --  c e l l +
5234:125 | DONE wsp | em 16 16 |        |             |
5234:126 | DONE lbl | em 16 16 | 006004 |             | nt_charplus                          
5234:127 | DONE dir | em 16 16 | 006004 | (2 bytes)   |         .byte 5, { NC }              uses code of 1+
5234:127 | DONE dir | em 16 16 |        |             |                 05 01                    --  . .
5234:128 | DONE dir | em 16 16 | 006006 | (6 bytes)   |         .word nt_cellplus, xt_one-plus, 005393 
5234:128 | DONE dir | em 16 16 |        |             |                 f7 5f 92 53 93 53        --  . _ . S . S
5234:129 | DONE dir | em 16 16 | 00600c | (5 bytes)   |         .byte 63, 68, 61, 72, 2b     
5234:129 | DONE dir | em 16 16 |        |             |                 63 68 61 72 2b           --  c h a r +
5234:130 | DONE wsp | em 16 16 |        |             |
5234:131 | DONE lbl | em 16 16 | 006011 |             | nt_decimal                           
5234:132 | DONE dir | em 16 16 | 006011 | (2 bytes)   |         .byte 7, { NC }              
5234:132 | DONE dir | em 16 16 |        |             |                 07 01                    --  . .
5234:133 | DONE dir | em 16 16 | 006013 | (6 bytes)   |         .word nt_charplus, xt_decimal, 005778 
5234:133 | DONE dir | em 16 16 |        |             |                 04 60 73 57 78 57        --  . ` s W x W
5234:134 | DONE dir | em 16 16 | 006019 | (7 bytes)   |         .byte 64, 65, 63, 69, 6d, 61, 6c 
5234:134 | DONE dir | em 16 16 |        |             |                 64 65 63 69 6d 61 6c     --  d e c i m a l
5234:135 | DONE wsp | em 16 16 |        |             |
5234:136 | DONE lbl | em 16 16 | 006020 |             | nt_hex                               
5234:137 | DONE dir | em 16 16 | 006020 | (2 bytes)   |         .byte 3, { NC }              
5234:137 | DONE dir | em 16 16 |        |             |                 03 01                    --  . .
5234:138 | DONE dir | em 16 16 | 006022 | (6 bytes)   |         .word nt_decimal, xt_hex, 005988 
5234:138 | DONE dir | em 16 16 |        |             |                 11 60 83 59 88 59        --  . ` . Y . Y
5234:139 | DONE dir | em 16 16 | 006028 | (3 bytes)   |         .byte 68, 65, 78             
5234:139 | DONE dir | em 16 16 |        |             |                 68 65 78                 --  h e x
5234:140 | DONE wsp | em 16 16 |        |             |
5234:141 | DONE lbl | em 16 16 | 00602b |             | nt_unused                            
5234:142 | DONE dir | em 16 16 | 00602b | (2 bytes)   |         .byte 6, { NC }              
5234:142 | DONE dir | em 16 16 |        |             |                 06 01                    --  . .
5234:143 | DONE dir | em 16 16 | 00602d | (6 bytes)   |         .word nt_hex, xt_unused, 005eb6 
5234:143 | DONE dir | em 16 16 |        |             |                 20 60 ab 5e b6 5e        --    ` . ^ . ^
5234:144 | DONE dir | em 16 16 | 006033 | (6 bytes)   |         .byte 75, 6e, 75, 73, 65, 64 
5234:144 | DONE dir | em 16 16 |        |             |                 75 6e 75 73 65 64        --  u n u s e d
5234:145 | DONE wsp | em 16 16 |        |             |
5234:146 | DONE lbl | em 16 16 | 006039 |             | nt_page                              
5234:147 | DONE dir | em 16 16 | 006039 | (2 bytes)   |         .byte 4, { NC }              
5234:147 | DONE dir | em 16 16 |        |             |                 04 01                    --  . .
5234:148 | DONE dir | em 16 16 | 00603b | (6 bytes)   |         .word nt_unused, xt_page, 005b42 
5234:148 | DONE dir | em 16 16 |        |             |                 2b 60 36 5b 42 5b        --  + ` 6 [ B [
5234:149 | DONE dir | em 16 16 | 006041 | (4 bytes)   |         .byte 70, 61, 67, 65         
5234:149 | DONE dir | em 16 16 |        |             |                 70 61 67 65              --  p a g e
5234:150 | DONE wsp | em 16 16 |        |             |
5234:151 | DONE lbl | em 16 16 | 006045 |             | nt_at-xy                             
5234:152 | DONE dir | em 16 16 | 006045 | (2 bytes)   |         .byte 5, { NC }              
5234:152 | DONE dir | em 16 16 |        |             |                 05 01                    --  . .
5234:153 | DONE dir | em 16 16 | 006047 | (6 bytes)   |         .word nt_page, xt_at-xy, 005552 
5234:153 | DONE dir | em 16 16 |        |             |                 39 60 2b 55 52 55        --  9 ` + U R U
5234:154 | DONE dir | em 16 16 | 00604d | (5 bytes)   |         .byte 61, 74, 2d, 78, 79     
5234:154 | DONE dir | em 16 16 |        |             |                 61 74 2d 78 79           --  a t - x y
5234:155 | DONE wsp | em 16 16 |        |             |
5234:156 | DONE lbl | em 16 16 | 006052 |             | nt_tworfetch                         
5234:157 | DONE dir | em 16 16 | 006052 | (2 bytes)   |         .byte 3, 00                  not natively compiled (yet)
5234:157 | DONE dir | em 16 16 |        |             |                 03 00                    --  . .
5234:158 | DONE dir | em 16 16 | 006054 | (6 bytes)   |         .word nt_at-xy, xt_tworfetch, 0053ee 
5234:158 | DONE dir | em 16 16 |        |             |                 45 60 e1 53 ee 53        --  E ` . S . S
5234:159 | DONE dir | em 16 16 | 00605a | (3 bytes)   |         .byte 32, 72, 40             
5234:159 | DONE dir | em 16 16 |        |             |                 32 72 40                 --  2 r @
5234:160 | DONE wsp | em 16 16 |        |             |
5234:161 | DONE lbl | em 16 16 | 00605d |             | nt_2variable                         
5234:162 | DONE dir | em 16 16 | 00605d | (2 bytes)   |         .byte 9, { NC }              
5234:162 | DONE dir | em 16 16 |        |             |                 09 01                    --  	 .
5234:163 | DONE dir | em 16 16 | 00605f | (6 bytes)   |         .word nt_tworfetch, xt_2variable, 005412 
5234:163 | DONE dir | em 16 16 |        |             |                 52 60 00 54 12 54        --  R ` . T . T
5234:164 | DONE dir | em 16 16 | 006065 | (9 bytes)   |         .byte 32, 76, 61, 72, 69, 61, 62, 6c, 65 
5234:164 | DONE dir | em 16 16 |        |             |                 32 76 61 72 69 61 62 6c  --  2 v a r i a b l
5234:164 | DONE dir | em 16 16 |        |             |                 65                       --  e
5234:165 | DONE wsp | em 16 16 |        |             |
5234:166 | DONE lbl | em 16 16 | 00606e |             | nt_dabs                              
5234:167 | DONE dir | em 16 16 | 00606e | (2 bytes)   |         .byte 4, { NC }              
5234:167 | DONE dir | em 16 16 |        |             |                 04 01                    --  . .
5234:168 | DONE dir | em 16 16 | 006070 | (6 bytes)   |         .word nt_2variable, xt_dabs, 005772 
5234:168 | DONE dir | em 16 16 |        |             |                 5d 60 6c 57 72 57        --  ] ` l W r W
5234:169 | DONE dir | em 16 16 | 006076 | (4 bytes)   |         .byte 64, 61, 62, 73         
5234:169 | DONE dir | em 16 16 |        |             |                 64 61 62 73              --  d a b s
5234:170 | DONE wsp | em 16 16 |        |             |
5234:171 | DONE lbl | em 16 16 | 00607a |             | nt_dnegate                           
5234:172 | DONE dir | em 16 16 | 00607a | (2 bytes)   |         .byte 7, { NC }              
5234:172 | DONE dir | em 16 16 |        |             |                 07 01                    --  . .
5234:173 | DONE dir | em 16 16 | 00607c | (6 bytes)   |         .word nt_dabs, xt_dnegate, 00579b 
5234:173 | DONE dir | em 16 16 |        |             |                 6e 60 88 57 9b 57        --  n ` . W . W
5234:174 | DONE dir | em 16 16 | 006082 | (7 bytes)   |         .byte 64, 6e, 65, 67, 61, 74, 65 
5234:174 | DONE dir | em 16 16 |        |             |                 64 6e 65 67 61 74 65     --  d n e g a t e
5234:175 | DONE wsp | em 16 16 |        |             |
5234:176 | DONE lbl | em 16 16 | 006089 |             | nt_dtos                              
5234:177 | DONE dir | em 16 16 | 006089 | (2 bytes)   |         .byte 3, { NC }              
5234:177 | DONE dir | em 16 16 |        |             |                 03 01                    --  . .
5234:178 | DONE dir | em 16 16 | 00608b | (6 bytes)   |         .word nt_dnegate, xt_dtos, 00576b 
5234:178 | DONE dir | em 16 16 |        |             |                 7a 60 67 57 6b 57        --  z ` g W k W
5234:179 | DONE dir | em 16 16 | 006091 | (3 bytes)   |         .byte 64, 3e, 73             
5234:179 | DONE dir | em 16 16 |        |             |                 64 3e 73                 --  d > s
5234:180 | DONE wsp | em 16 16 |        |             |
5234:181 | DONE lbl | em 16 16 | 006094 |             | nt_stod                              
5234:182 | DONE dir | em 16 16 | 006094 | (2 bytes)   |         .byte 3, { NC }              
5234:182 | DONE dir | em 16 16 |        |             |                 03 01                    --  . .
5234:183 | DONE dir | em 16 16 | 006096 | (6 bytes)   |         .word nt_dtos, xt_stod, 005c94 
5234:183 | DONE dir | em 16 16 |        |             |                 89 60 85 5c 94 5c        --  . ` . \ . \
5234:184 | DONE dir | em 16 16 | 00609c | (3 bytes)   |         .byte 73, 3e, 64             
5234:184 | DONE dir | em 16 16 |        |             |                 73 3e 64                 --  s > d
5234:185 | DONE wsp | em 16 16 |        |             |
5234:186 | DONE lbl | em 16 16 | 00609f |             | nt_twofromr                          
5234:187 | DONE dir | em 16 16 | 00609f | (2 bytes)   |         .byte 3, { CO }              
5234:187 | DONE dir | em 16 16 |        |             |                 03 04                    --  . .
5234:188 | DONE dir | em 16 16 | 0060a1 | (6 bytes)   |         .word nt_stod, xt_twofromr, 0053e0 
5234:188 | DONE dir | em 16 16 |        |             |                 94 60 d0 53 e0 53        --  . ` . S . S
5234:189 | DONE dir | em 16 16 | 0060a7 | (3 bytes)   |         .byte 32, 72, 3e             
5234:189 | DONE dir | em 16 16 |        |             |                 32 72 3e                 --  2 r >
5234:190 | DONE wsp | em 16 16 |        |             |
5234:191 | DONE lbl | em 16 16 | 0060aa |             | nt_twotor                            
5234:192 | DONE dir | em 16 16 | 0060aa | (2 bytes)   |         .byte 3, { CO }              
5234:192 | DONE dir | em 16 16 |        |             |                 03 04                    --  . .
5234:193 | DONE dir | em 16 16 | 0060ac | (6 bytes)   |         .word nt_twofromr, xt_twotor, 0053b0 
5234:193 | DONE dir | em 16 16 |        |             |                 9f 60 a0 53 b0 53        --  . ` . S . S
5234:194 | DONE dir | em 16 16 | 0060b2 | (3 bytes)   |         .byte 32, 3e, 72             
5234:194 | DONE dir | em 16 16 |        |             |                 32 3e 72                 --  2 > r
5234:195 | DONE wsp | em 16 16 |        |             |
5234:196 | DONE lbl | em 16 16 | 0060b5 |             | nt_dminus                            
5234:197 | DONE dir | em 16 16 | 0060b5 | (2 bytes)   |         .byte 2, { NC }              
5234:197 | DONE dir | em 16 16 |        |             |                 02 01                    --  . .
5234:198 | DONE dir | em 16 16 | 0060b7 | (6 bytes)   |         .word nt_twotor, xt_dminus, 005766 
5234:198 | DONE dir | em 16 16 |        |             |                 aa 60 52 57 66 57        --  . ` R W f W
5234:199 | DONE dir | em 16 16 | 0060bd | (2 bytes)   |         .byte 64, 2d                 
5234:199 | DONE dir | em 16 16 |        |             |                 64 2d                    --  d -
5234:200 | DONE wsp | em 16 16 |        |             |
5234:201 | DONE lbl | em 16 16 | 0060bf |             | nt_dplus                             
5234:202 | DONE dir | em 16 16 | 0060bf | (2 bytes)   |         .byte 2, { NC }              
5234:202 | DONE dir | em 16 16 |        |             |                 02 01                    --  . .
5234:203 | DONE dir | em 16 16 | 0060c1 | (6 bytes)   |         .word nt_dminus, xt_dplus, 005751 
5234:203 | DONE dir | em 16 16 |        |             |                 b5 60 40 57 51 57        --  . ` @ W Q W
5234:204 | DONE dir | em 16 16 | 0060c7 | (2 bytes)   |         .byte 64, 2b                 
5234:204 | DONE dir | em 16 16 |        |             |                 64 2b                    --  d +
5234:205 | DONE wsp | em 16 16 |        |             |
5234:206 | DONE lbl | em 16 16 | 0060c9 |             | nt_fmmod                             
5234:207 | DONE dir | em 16 16 | 0060c9 | (2 bytes)   |         .byte 6, { NC }              
5234:207 | DONE dir | em 16 16 |        |             |                 06 01                    --  . .
5234:208 | DONE dir | em 16 16 | 0060cb | (6 bytes)   |         .word nt_dplus, xt_fmmod, 005931 
5234:208 | DONE dir | em 16 16 |        |             |                 bf 60 de 58 31 59        --  . ` . X 1 Y
5234:209 | DONE dir | em 16 16 | 0060d1 | (6 bytes)   |         .byte 66, 6d, 2f, 6d, 6f, 64 
5234:209 | DONE dir | em 16 16 |        |             |                 66 6d 2f 6d 6f 64        --  f m / m o d
5234:210 | DONE wsp | em 16 16 |        |             |
5234:211 | DONE lbl | em 16 16 | 0060d7 |             | nt_smrem                             
5234:212 | DONE dir | em 16 16 | 0060d7 | (2 bytes)   |         .byte 6, { NC }              
5234:212 | DONE dir | em 16 16 |        |             |                 06 01                    --  . .
5234:213 | DONE dir | em 16 16 | 0060d9 | (6 bytes)   |         .word nt_fmmod, xt_smrem, 005d5d 
5234:213 | DONE dir | em 16 16 |        |             |                 c9 60 04 5d 5d 5d        --  . ` . ] ] ]
5234:214 | DONE dir | em 16 16 | 0060df | (6 bytes)   |         .byte 73, 6d, 2f, 72, 65, 6d 
5234:214 | DONE dir | em 16 16 |        |             |                 73 6d 2f 72 65 6d        --  s m / r e m
5234:215 | DONE wsp | em 16 16 |        |             |
5234:216 | DONE lbl | em 16 16 | 0060e5 |             | nt_udmod                             
5234:217 | DONE dir | em 16 16 | 0060e5 | (2 bytes)   |         .byte 6, { NC }              
5234:217 | DONE dir | em 16 16 |        |             |                 06 01                    --  . .
5234:218 | DONE dir | em 16 16 | 0060e7 | (6 bytes)   |         .word nt_smrem, xt_udmod, 005dfb 
5234:218 | DONE dir | em 16 16 |        |             |                 d7 60 e0 5d fb 5d        --  . ` . ] . ]
5234:219 | DONE dir | em 16 16 | 0060ed | (6 bytes)   |         .byte 75, 64, 2f, 6d, 6f, 64 
5234:219 | DONE dir | em 16 16 |        |             |                 75 64 2f 6d 6f 64        --  u d / m o d
5234:220 | DONE wsp | em 16 16 |        |             |
5234:221 | DONE lbl | em 16 16 | 0060f3 |             | nt_ummod                             
5234:222 | DONE dir | em 16 16 | 0060f3 | (2 bytes)   |         .byte 6, { NC }              
5234:222 | DONE dir | em 16 16 |        |             |                 06 01                    --  . .
5234:223 | DONE dir | em 16 16 | 0060f5 | (6 bytes)   |         .word nt_udmod, xt_ummod, 005eaa 
5234:223 | DONE dir | em 16 16 |        |             |                 e5 60 5a 5e aa 5e        --  . ` Z ^ . ^
5234:224 | DONE dir | em 16 16 | 0060fb | (6 bytes)   |         .byte 75, 6d, 2f, 6d, 6f, 64 
5234:224 | DONE dir | em 16 16 |        |             |                 75 6d 2f 6d 6f 64        --  u m / m o d
5234:225 | DONE wsp | em 16 16 |        |             |
5234:226 | DONE lbl | em 16 16 | 006101 |             | nt_star                              
5234:227 | DONE dir | em 16 16 | 006101 | (2 bytes)   |         .byte 1, { NC }              
5234:227 | DONE dir | em 16 16 |        |             |                 01 01                    --  . .
5234:228 | DONE dir | em 16 16 | 006103 | (6 bytes)   |         .word nt_ummod, xt_star, 005d8c 
5234:228 | DONE dir | em 16 16 |        |             |                 f3 60 85 5d 8c 5d        --  . ` . ] . ]
5234:229 | DONE dir | em 16 16 | 006109 | (1 bytes)   |         .byte 2a                     
5234:229 | DONE dir | em 16 16 |        |             |                 2a                       --  *
5234:230 | DONE wsp | em 16 16 |        |             |
5234:231 | DONE lbl | em 16 16 | 00610a |             | nt_mstar                             
5234:232 | DONE dir | em 16 16 | 00610a | (2 bytes)   |         .byte 2, { NC }              
5234:232 | DONE dir | em 16 16 |        |             |                 02 01                    --  . .
5234:233 | DONE dir | em 16 16 | 00610c | (6 bytes)   |         .word nt_star, xt_mstar, 005a01 
5234:233 | DONE dir | em 16 16 |        |             |                 01 61 e2 59 01 5a        --  . a . Y . Z
5234:234 | DONE dir | em 16 16 | 006112 | (2 bytes)   |         .byte 6d, 2a                 
5234:234 | DONE dir | em 16 16 |        |             |                 6d 2a                    --  m *
5234:235 | DONE wsp | em 16 16 |        |             |
5234:236 | DONE lbl | em 16 16 | 006114 |             | nt_umstar                            
5234:237 | DONE dir | em 16 16 | 006114 | (2 bytes)   |         .byte 3, { NC }              
5234:237 | DONE dir | em 16 16 |        |             |                 03 01                    --  . .
5234:238 | DONE dir | em 16 16 | 006116 | (6 bytes)   |         .word nt_mstar, xt_umstar, 005e59 
5234:238 | DONE dir | em 16 16 |        |             |                 0a 61 fb 5d 59 5e        --  
 a . ] Y ^
5234:239 | DONE dir | em 16 16 | 00611c | (3 bytes)   |         .byte 75, 6d, 2a             
5234:239 | DONE dir | em 16 16 |        |             |                 75 6d 2a                 --  u m *
5234:240 | DONE wsp | em 16 16 |        |             |
5234:241 | DONE lbl | em 16 16 | 00611f |             | nt_cmoveup                           
5234:242 | DONE dir | em 16 16 | 00611f | (2 bytes)   |         .byte 6, { NC }              
5234:242 | DONE dir | em 16 16 |        |             |                 06 01                    --  . .
5234:243 | DONE dir | em 16 16 | 006121 | (6 bytes)   |         .word nt_umstar, xt_cmoveup, 005617 
5234:243 | DONE dir | em 16 16 |        |             |                 14 61 ff 55 17 56        --  . a . U . V
5234:244 | DONE dir | em 16 16 | 006127 | (6 bytes)   |         .byte 63, 6d, 6f, 76, 65, 3e 
5234:244 | DONE dir | em 16 16 |        |             |                 63 6d 6f 76 65 3e        --  c m o v e >
5234:245 | DONE wsp | em 16 16 |        |             |
5234:246 | DONE lbl | em 16 16 | 00612d |             | nt_cmove                             
5234:247 | DONE dir | em 16 16 | 00612d | (2 bytes)   |         .byte 5, { NC }              
5234:247 | DONE dir | em 16 16 |        |             |                 05 01                    --  . .
5234:248 | DONE dir | em 16 16 | 00612f | (6 bytes)   |         .word nt_cmoveup, xt_cmove, 0055fe 
5234:248 | DONE dir | em 16 16 |        |             |                 1f 61 dc 55 fe 55        --  . a . U . U
5234:249 | DONE dir | em 16 16 | 006135 | (5 bytes)   |         .byte 63, 6d, 6f, 76, 65     
5234:249 | DONE dir | em 16 16 |        |             |                 63 6d 6f 76 65           --  c m o v e
5234:250 | DONE wsp | em 16 16 |        |             |
5234:251 | DONE lbl | em 16 16 | 00613a |             | nt_count                             
5234:252 | DONE dir | em 16 16 | 00613a | (2 bytes)   |         .byte 5, { NC }              
5234:252 | DONE dir | em 16 16 |        |             |                 05 01                    --  . .
5234:253 | DONE dir | em 16 16 | 00613c | (6 bytes)   |         .word nt_cmove, xt_count, 005673 
5234:253 | DONE dir | em 16 16 |        |             |                 2d 61 66 56 73 56        --  - a f V s V
5234:254 | DONE dir | em 16 16 | 006142 | (5 bytes)   |         .byte 63, 6f, 75, 6e, 74     
5234:254 | DONE dir | em 16 16 |        |             |                 63 6f 75 6e 74           --  c o u n t
5234:255 | DONE wsp | em 16 16 |        |             |
5234:256 | DONE lbl | em 16 16 | 006147 |             | nt_abortq                            
5234:257 | DONE dir | em 16 16 | 006147 | (2 bytes)   |         .byte 6, { CO + IM }         
5234:257 | DONE dir | em 16 16 |        |             |                 06 06                    --  . .
5234:258 | DONE dir | em 16 16 | 006149 | (6 bytes)   |         .word nt_count, xt_abortq, 00544b 
5234:258 | DONE dir | em 16 16 |        |             |                 3a 61 2f 54 4b 54        --  : a / T K T
5234:259 | DONE dir | em 16 16 | 00614f | (6 bytes)   |         .byte 61, 62, 6f, 72, 74, &34 ABORT"
5234:259 | DONE dir | em 16 16 |        |             |                 61 62 6f 72 74 22        --  a b o r t "
5234:260 | DONE wsp | em 16 16 |        |             |
5234:261 | DONE lbl | em 16 16 | 006155 |             | nt_abort                             
5234:262 | DONE dir | em 16 16 | 006155 | (2 bytes)   |         .byte 5, 00                  TODO check flags - NC possible?
5234:262 | DONE dir | em 16 16 |        |             |                 05 00                    --  . .
5234:263 | DONE dir | em 16 16 | 006157 | (6 bytes)   |         .word nt_abortq, xt_abort, 0050f4 
5234:263 | DONE dir | em 16 16 |        |             |                 47 61 ad 50 f4 50        --  G a . P . P
5234:264 | DONE dir | em 16 16 | 00615d | (5 bytes)   |         .byte 61, 62, 6f, 72, 74     
5234:264 | DONE dir | em 16 16 |        |             |                 61 62 6f 72 74           --  a b o r t
5234:265 | DONE wsp | em 16 16 |        |             |
5234:266 | DONE lbl | em 16 16 | 006162 |             | nt_parse                             
5234:267 | DONE dir | em 16 16 | 006162 | (2 bytes)   |         .byte 5, 00                  
5234:267 | DONE dir | em 16 16 |        |             |                 05 00                    --  . .
5234:268 | DONE dir | em 16 16 | 006164 | (6 bytes)   |         .word nt_abort, xt_parse, 005ba7 
5234:268 | DONE dir | em 16 16 |        |             |                 55 61 75 5b a7 5b        --  U a u [ . [
5234:269 | DONE dir | em 16 16 | 00616a | (5 bytes)   |         .byte 70, 61, 72, 73, 65     
5234:269 | DONE dir | em 16 16 |        |             |                 70 61 72 73 65           --  p a r s e
5234:270 | DONE wsp | em 16 16 |        |             |
5234:271 | DONE lbl | em 16 16 | 00616f |             | nt_quit                              
5234:272 | DONE dir | em 16 16 | 00616f | (2 bytes)   |         .byte 4, 00                  
5234:272 | DONE dir | em 16 16 |        |             |                 04 00                    --  . .
5234:273 | DONE dir | em 16 16 | 006171 | (6 bytes)   |         .word nt_parse, xt_quit, 0050f4 
5234:273 | DONE dir | em 16 16 |        |             |                 62 61 b5 50 f4 50        --  b a . P . P
5234:274 | DONE dir | em 16 16 | 006177 | (4 bytes)   |         .byte 71, 75, 69, 74         
5234:274 | DONE dir | em 16 16 |        |             |                 71 75 69 74              --  q u i t
5234:275 | DONE wsp | em 16 16 |        |             |
5234:276 | DONE lbl | em 16 16 | 00617b |             | nt_question                          
5234:277 | DONE dir | em 16 16 | 00617b | (2 bytes)   |         .byte 1, { NC }              
5234:277 | DONE dir | em 16 16 |        |             |                 01 01                    --  . .
5234:278 | DONE dir | em 16 16 | 00617d | (6 bytes)   |         .word nt_quit, xt_question, 0052bf 
5234:278 | DONE dir | em 16 16 |        |             |                 6f 61 b9 52 bf 52        --  o a . R . R
5234:279 | DONE dir | em 16 16 | 006183 | (1 bytes)   |         .byte 3f                     
5234:279 | DONE dir | em 16 16 |        |             |                 3f                       --  ?
5234:280 | DONE wsp | em 16 16 |        |             |
5234:281 | DONE lbl | em 16 16 | 006184 |             | nt_int-name                          
5234:282 | DONE dir | em 16 16 | 006184 | (2 bytes)   |         .byte 8, { NC }              
5234:282 | DONE dir | em 16 16 |        |             |                 08 01                    --  . .
5234:283 | DONE dir | em 16 16 | 006186 | (6 bytes)   |         .word nt_question, xt_int-name, 005975 
5234:283 | DONE dir | em 16 16 |        |             |                 7b 61 52 59 75 59        --  { a R Y u Y
5234:284 | DONE dir | em 16 16 | 00618c | (8 bytes)   |         .byte 69, 6e, 74, 3e, 6e, 61, 6d, 65 
5234:284 | DONE dir | em 16 16 |        |             |                 69 6e 74 3e 6e 61 6d 65  --  i n t > n a m e
5234:284 | DONE dir | em 16 16 |        |             |                                          -- 
5234:285 | DONE wsp | em 16 16 |        |             |
5234:286 | DONE lbl | em 16 16 | 006194 |             | nt_name-int                          
5234:287 | DONE dir | em 16 16 | 006194 | (2 bytes)   |         .byte 8, { NC }              
5234:287 | DONE dir | em 16 16 |        |             |                 08 01                    --  . .
5234:288 | DONE dir | em 16 16 | 006196 | (6 bytes)   |         .word nt_int-name, xt_name-int, 005a6b 
5234:288 | DONE dir | em 16 16 |        |             |                 84 61 63 5a 6b 5a        --  . a c Z k Z
5234:289 | DONE dir | em 16 16 | 00619c | (8 bytes)   |         .byte 6e, 61, 6d, 65, 3e, 69, 6e, 74 
5234:289 | DONE dir | em 16 16 |        |             |                 6e 61 6d 65 3e 69 6e 74  --  n a m e > i n t
5234:289 | DONE dir | em 16 16 |        |             |                                          -- 
5234:290 | DONE wsp | em 16 16 |        |             |
5234:291 | DONE lbl | em 16 16 | 0061a4 |             | nt_cr                                
5234:292 | DONE dir | em 16 16 | 0061a4 | (2 bytes)   |         .byte 2, { NC }              
5234:292 | DONE dir | em 16 16 |        |             |                 02 01                    --  . .
5234:293 | DONE dir | em 16 16 | 0061a6 | (6 bytes)   |         .word nt_name-int, xt_cr, 00567a 
5234:293 | DONE dir | em 16 16 |        |             |                 94 61 74 56 7a 56        --  . a t V z V
5234:294 | DONE dir | em 16 16 | 0061ac | (2 bytes)   |         .byte 63, 72                 
5234:294 | DONE dir | em 16 16 |        |             |                 63 72                    --  c r
5234:295 | DONE wsp | em 16 16 |        |             |
5234:296 | DONE lbl | em 16 16 | 0061ae |             | nt_fill                              
5234:297 | DONE dir | em 16 16 | 0061ae | (2 bytes)   |         .byte 4, { NC }              
5234:297 | DONE dir | em 16 16 |        |             |                 04 01                    --  . .
5234:298 | DONE dir | em 16 16 | 0061b0 | (6 bytes)   |         .word nt_cr, xt_fill, 005819 
5234:298 | DONE dir | em 16 16 |        |             |                 a4 61 ff 57 19 58        --  . a . W . X
5234:299 | DONE dir | em 16 16 | 0061b6 | (4 bytes)   |         .byte 66, 69, 6c, 6c         
5234:299 | DONE dir | em 16 16 |        |             |                 66 69 6c 6c              --  f i l l
5234:300 | DONE wsp | em 16 16 |        |             |
5234:301 | DONE lbl | em 16 16 | 0061ba |             | nt_erase                             
5234:302 | DONE dir | em 16 16 | 0061ba | (2 bytes)   |         .byte 5, { NC }              
5234:302 | DONE dir | em 16 16 |        |             |                 05 01                    --  . .
5234:303 | DONE dir | em 16 16 | 0061bc | (6 bytes)   |         .word nt_fill, xt_erase, 005819 
5234:303 | DONE dir | em 16 16 |        |             |                 ae 61 f8 57 19 58        --  . a . W . X
5234:304 | DONE dir | em 16 16 | 0061c2 | (5 bytes)   |         .byte 65, 72, 61, 73, 65     
5234:304 | DONE dir | em 16 16 |        |             |                 65 72 61 73 65           --  e r a s e
5234:305 | DONE wsp | em 16 16 |        |             |
5234:306 | DONE lbl | em 16 16 | 0061c7 |             | nt_numbermore                        
5234:307 | DONE dir | em 16 16 | 0061c7 | (2 bytes)   |         .byte 2, { NC }              "quoth the rumben"
5234:307 | DONE dir | em 16 16 |        |             |                 02 01                    --  . .
5234:308 | DONE dir | em 16 16 | 0061c9 | (6 bytes)   |         .word nt_erase, xt_numbermore, 0052af 
5234:308 | DONE dir | em 16 16 |        |             |                 ba 61 a1 52 af 52        --  . a . R . R
5234:309 | DONE dir | em 16 16 | 0061cf | (2 bytes)   |         .byte 23, 3e                 
5234:309 | DONE dir | em 16 16 |        |             |                 23 3e                    --  # >
5234:310 | DONE wsp | em 16 16 |        |             |
5234:311 | DONE lbl | em 16 16 | 0061d1 |             | nt_hold                              
5234:312 | DONE dir | em 16 16 | 0061d1 | (2 bytes)   |         .byte 4, { NC }              
5234:312 | DONE dir | em 16 16 |        |             |                 04 01                    --  . .
5234:313 | DONE dir | em 16 16 | 0061d3 | (6 bytes)   |         .word nt_numbermore, xt_hold, 005996 
5234:313 | DONE dir | em 16 16 |        |             |                 c7 61 89 59 96 59        --  . a . Y . Y
5234:314 | DONE dir | em 16 16 | 0061d9 | (4 bytes)   |         .byte 68, 6f, 6c, 64         
5234:314 | DONE dir | em 16 16 |        |             |                 68 6f 6c 64              --  h o l d
5234:315 | DONE wsp | em 16 16 |        |             |
5234:316 | DONE lbl | em 16 16 | 0061dd |             | nt_hashs                             
5234:317 | DONE dir | em 16 16 | 0061dd | (2 bytes)   |         .byte 2, { NC }              also known as "number-s"
5234:317 | DONE dir | em 16 16 |        |             |                 02 01                    --  . .
5234:318 | DONE dir | em 16 16 | 0061df | (6 bytes)   |         .word nt_hold, xt_hashs, 0052b8 
5234:318 | DONE dir | em 16 16 |        |             |                 d1 61 b0 52 b8 52        --  . a . R . R
5234:319 | DONE dir | em 16 16 | 0061e5 | (2 bytes)   |         .byte 23, 73                 
5234:319 | DONE dir | em 16 16 |        |             |                 23 73                    --  # s
5234:320 | DONE wsp | em 16 16 |        |             |
5234:321 | DONE lbl | em 16 16 | 0061e7 |             | nt_sign                              
5234:322 | DONE dir | em 16 16 | 0061e7 | (2 bytes)   |         .byte 4, { NC }              
5234:322 | DONE dir | em 16 16 |        |             |                 04 01                    --  . .
5234:323 | DONE dir | em 16 16 | 0061e9 | (6 bytes)   |         .word nt_hashs, xt_sign, 005ca2 
5234:323 | DONE dir | em 16 16 |        |             |                 dd 61 95 5c a2 5c        --  . a . \ . \
5234:324 | DONE dir | em 16 16 | 0061ef | (4 bytes)   |         .byte 73, 69, 67, 6e         
5234:324 | DONE dir | em 16 16 |        |             |                 73 69 67 6e              --  s i g n
5234:325 | DONE wsp | em 16 16 |        |             |
5234:326 | DONE lbl | em 16 16 | 0061f3 |             | nt_hash                              
5234:327 | DONE dir | em 16 16 | 0061f3 | (2 bytes)   |         .byte 1, { NC }              also known as "number-sign"
5234:327 | DONE dir | em 16 16 |        |             |                 01 01                    --  . .
5234:328 | DONE dir | em 16 16 | 0061f5 | (6 bytes)   |         .word nt_sign, xt_hash, 0052a0 
5234:328 | DONE dir | em 16 16 |        |             |                 e7 61 86 52 a0 52        --  . a . R . R
5234:329 | DONE dir | em 16 16 | 0061fb | (1 bytes)   |         .byte 23                     
5234:329 | DONE dir | em 16 16 |        |             |                 23                       --  #
5234:330 | DONE wsp | em 16 16 |        |             |
5234:331 | DONE lbl | em 16 16 | 0061fc |             | nt_lessnumber                        
5234:332 | DONE dir | em 16 16 | 0061fc | (2 bytes)   |         .byte 2, { NC }              
5234:332 | DONE dir | em 16 16 |        |             |                 02 01                    --  . .
5234:333 | DONE dir | em 16 16 | 0061fe | (6 bytes)   |         .word nt_hash, xt_lessnumber, 00511d 
5234:333 | DONE dir | em 16 16 |        |             |                 f3 61 14 51 1d 51        --  . a . Q . Q
5234:334 | DONE dir | em 16 16 | 006204 | (2 bytes)   |         .byte 3c, 23                 
5234:334 | DONE dir | em 16 16 |        |             |                 3c 23                    --  < #
5234:335 | DONE wsp | em 16 16 |        |             |
5234:336 | DONE lbl | em 16 16 | 006206 |             | nt_bl                                
5234:337 | DONE dir | em 16 16 | 006206 | (2 bytes)   |         .byte 2, { NC }              
5234:337 | DONE dir | em 16 16 |        |             |                 02 01                    --  . .
5234:338 | DONE dir | em 16 16 | 006208 | (6 bytes)   |         .word nt_lessnumber, xt_bl, 00556f 
5234:338 | DONE dir | em 16 16 |        |             |                 fc 61 68 55 6f 55        --  . a h U o U
5234:339 | DONE dir | em 16 16 | 00620e | (2 bytes)   |         .byte 62, 6c                 
5234:339 | DONE dir | em 16 16 |        |             |                 62 6c                    --  b l
5234:340 | DONE wsp | em 16 16 |        |             |
5234:341 | DONE lbl | em 16 16 | 006210 |             | nt_spaces                            
5234:342 | DONE dir | em 16 16 | 006210 | (2 bytes)   |         .byte 6, { NC }              
5234:342 | DONE dir | em 16 16 |        |             |                 06 01                    --  . .
5234:343 | DONE dir | em 16 16 | 006212 | (6 bytes)   |         .word nt_bl, xt_spaces, 005d84 
5234:343 | DONE dir | em 16 16 |        |             |                 06 62 78 5d 84 5d        --  . b x ] . ]
5234:344 | DONE dir | em 16 16 | 006218 | (6 bytes)   |         .byte 73, 70, 61, 63, 65, 73 
5234:344 | DONE dir | em 16 16 |        |             |                 73 70 61 63 65 73        --  s p a c e s
5234:345 | DONE wsp | em 16 16 |        |             |
5234:346 | DONE lbl | em 16 16 | 00621e |             | nt_space                             
5234:347 | DONE dir | em 16 16 | 00621e | (2 bytes)   |         .byte 5, { NC }              
5234:347 | DONE dir | em 16 16 |        |             |                 05 01                    --  . .
5234:348 | DONE dir | em 16 16 | 006220 | (6 bytes)   |         .word nt_spaces, xt_space, 005d78 
5234:348 | DONE dir | em 16 16 |        |             |                 10 62 72 5d 78 5d        --  . b r ] x ]
5234:349 | DONE dir | em 16 16 | 006226 | (5 bytes)   |         .byte 73, 70, 61, 63, 65     
5234:349 | DONE dir | em 16 16 |        |             |                 73 70 61 63 65           --  s p a c e
5234:350 | DONE wsp | em 16 16 |        |             |
5234:351 | DONE lbl | em 16 16 | 00622b |             | nt_dots                              
5234:352 | DONE dir | em 16 16 | 00622b | (2 bytes)   |         .byte 2, { NC }              
5234:352 | DONE dir | em 16 16 |        |             |                 02 01                    --  . .
5234:353 | DONE dir | em 16 16 | 00622d | (6 bytes)   |         .word nt_space, xt_dots, 00523e 
5234:353 | DONE dir | em 16 16 |        |             |                 1e 62 08 52 3e 52        --  . b . R > R
5234:354 | DONE dir | em 16 16 | 006233 | (2 bytes)   |         .byte 2e, 73                 
5234:354 | DONE dir | em 16 16 |        |             |                 2e 73                    --  . s
5234:355 | DONE wsp | em 16 16 |        |             |
5234:356 | DONE lbl | em 16 16 | 006235 |             | nt_type                              
5234:357 | DONE dir | em 16 16 | 006235 | (2 bytes)   |         .byte 4, { NC }              
5234:357 | DONE dir | em 16 16 |        |             |                 04 01                    --  . .
5234:358 | DONE dir | em 16 16 | 006237 | (6 bytes)   |         .word nt_dots, xt_type, 005dd6 
5234:358 | DONE dir | em 16 16 |        |             |                 2b 62 b6 5d d6 5d        --  + b . ] . ]
5234:359 | DONE dir | em 16 16 | 00623d | (4 bytes)   |         .byte 74, 79, 70, 65         
5234:359 | DONE dir | em 16 16 |        |             |                 74 79 70 65              --  t y p e
5234:360 | DONE wsp | em 16 16 |        |             |
5234:361 | DONE lbl | em 16 16 | 006241 |             | nt_udot                              
5234:362 | DONE dir | em 16 16 | 006241 | (2 bytes)   |         .byte 2, { NC }              
5234:362 | DONE dir | em 16 16 |        |             |                 02 01                    --  . .
5234:363 | DONE dir | em 16 16 | 006243 | (6 bytes)   |         .word nt_type, xt_udot, 005de0 
5234:363 | DONE dir | em 16 16 |        |             |                 35 62 d7 5d e0 5d        --  5 b . ] . ]
5234:364 | DONE dir | em 16 16 | 006249 | (2 bytes)   |         .byte 75, 2e                 
5234:364 | DONE dir | em 16 16 |        |             |                 75 2e                    --  u .
5234:365 | DONE wsp | em 16 16 |        |             |
5234:366 | DONE lbl | em 16 16 | 00624b |             | nt_emit                              
5234:367 | DONE dir | em 16 16 | 00624b | (2 bytes)   |         .byte 4, { NC }              
5234:367 | DONE dir | em 16 16 |        |             |                 04 01                    --  . .
5234:368 | DONE dir | em 16 16 | 00624d | (6 bytes)   |         .word nt_udot, xt_emit, 0057f8 
5234:368 | DONE dir | em 16 16 |        |             |                 41 62 f0 57 f8 57        --  A b . W . W
5234:369 | DONE dir | em 16 16 | 006253 | (4 bytes)   |         .byte 65, 6d, 69, 74         
5234:369 | DONE dir | em 16 16 |        |             |                 65 6d 69 74              --  e m i t
5234:370 | DONE wsp | em 16 16 |        |             |
5234:371 | DONE lbl | em 16 16 | 006257 |             | nt_dot                               
5234:372 | DONE dir | em 16 16 | 006257 | (2 bytes)   |         .byte 1, { NC }              
5234:372 | DONE dir | em 16 16 |        |             |                 01 01                    --  . .
5234:373 | DONE dir | em 16 16 | 006259 | (6 bytes)   |         .word nt_emit, xt_dot, 0051f3 
5234:373 | DONE dir | em 16 16 |        |             |                 4b 62 d5 51 f3 51        --  K b . Q . Q
5234:374 | DONE dir | em 16 16 | 00625f | (1 bytes)   |         .byte 2e                     
5234:374 | DONE dir | em 16 16 |        |             |                 2e                       --  .
5234:375 | DONE wsp | em 16 16 |        |             |
5234:376 | DONE lbl | em 16 16 | 006260 |             | nt_pad                               
5234:377 | DONE dir | em 16 16 | 006260 | (2 bytes)   |         .byte 3, { NC }              
5234:377 | DONE dir | em 16 16 |        |             |                 03 01                    --  . .
5234:378 | DONE dir | em 16 16 | 006262 | (6 bytes)   |         .word nt_dot, xt_pad, 005b35 
5234:378 | DONE dir | em 16 16 |        |             |                 57 62 2a 5b 35 5b        --  W b * [ 5 [
5234:379 | DONE dir | em 16 16 | 006268 | (3 bytes)   |         .byte 70, 61, 64             
5234:379 | DONE dir | em 16 16 |        |             |                 70 61 64                 --  p a d
5234:380 | DONE wsp | em 16 16 |        |             |
5234:381 | DONE lbl | em 16 16 | 00626b |             | nt_base                              
5234:382 | DONE dir | em 16 16 | 00626b | (2 bytes)   |         .byte 4, { NC }              
5234:382 | DONE dir | em 16 16 |        |             |                 04 01                    --  . .
5234:383 | DONE dir | em 16 16 | 00626d | (6 bytes)   |         .word nt_pad, xt_base, 00555a 
5234:383 | DONE dir | em 16 16 |        |             |                 60 62 53 55 5a 55        --  ` b S U Z U
5234:384 | DONE dir | em 16 16 | 006273 | (4 bytes)   |         .byte 62, 61, 73, 65         
5234:384 | DONE dir | em 16 16 |        |             |                 62 61 73 65              --  b a s e
5234:385 | DONE wsp | em 16 16 |        |             |
5234:386 | DONE lbl | em 16 16 | 006277 |             | nt_input                             
5234:387 | DONE dir | em 16 16 | 006277 | (2 bytes)   |         .byte 5, { NC }              
5234:387 | DONE dir | em 16 16 |        |             |                 05 01                    --  . .
5234:388 | DONE dir | em 16 16 | 006279 | (6 bytes)   |         .word nt_base, xt_input, 005951 
5234:388 | DONE dir | em 16 16 |        |             |                 6b 62 4a 59 51 59        --  k b J Y Q Y
5234:389 | DONE dir | em 16 16 | 00627f | (5 bytes)   |         .byte 69, 6e, 70, 75, 74     
5234:389 | DONE dir | em 16 16 |        |             |                 69 6e 70 75 74           --  i n p u t
5234:390 | DONE wsp | em 16 16 |        |             |
5234:391 | DONE lbl | em 16 16 | 006284 |             | nt_output                            
5234:392 | DONE dir | em 16 16 | 006284 | (2 bytes)   |         .byte 6, { NC }              
5234:392 | DONE dir | em 16 16 |        |             |                 06 01                    --  . .
5234:393 | DONE dir | em 16 16 | 006286 | (6 bytes)   |         .word nt_input, xt_output, 005b22 
5234:393 | DONE dir | em 16 16 |        |             |                 77 62 1b 5b 22 5b        --  w b . [ " [
5234:394 | DONE dir | em 16 16 | 00628c | (6 bytes)   |         .byte 6f, 75, 74, 70, 75, 74 
5234:394 | DONE dir | em 16 16 |        |             |                 6f 75 74 70 75 74        --  o u t p u t
5234:395 | DONE wsp | em 16 16 |        |             |
5234:396 | DONE lbl | em 16 16 | 006292 |             | nt_evaluate                          
5234:397 | DONE dir | em 16 16 | 006292 | (2 bytes)   |         .byte 8, { NC }              
5234:397 | DONE dir | em 16 16 |        |             |                 08 01                    --  . .
5234:398 | DONE dir | em 16 16 | 006294 | (6 bytes)   |         .word nt_output, xt_evaluate, 005848 
5234:398 | DONE dir | em 16 16 |        |             |                 84 62 1a 58 48 58        --  . b . X H X
5234:399 | DONE dir | em 16 16 | 00629a | (8 bytes)   |         .byte 65, 76, 61, 6c, 75, 61, 74, 65 
5234:399 | DONE dir | em 16 16 |        |             |                 65 76 61 6c 75 61 74 65  --  e v a l u a t e
5234:399 | DONE dir | em 16 16 |        |             |                                          -- 
5234:400 | DONE wsp | em 16 16 |        |             |
5234:401 | DONE lbl | em 16 16 | 0062a2 |             | nt_cells                             
5234:402 | DONE dir | em 16 16 | 0062a2 | (2 bytes)   |         .byte 5, { NC }              2* because we have 16 bit stack
5234:402 | DONE dir | em 16 16 |        |             |                 05 01                    --  . .
5234:403 | DONE dir | em 16 16 | 0062a4 | (6 bytes)   |         .word nt_evaluate, xt_two-star, 00539f 
5234:403 | DONE dir | em 16 16 |        |             |                 92 62 9c 53 9f 53        --  . b . S . S
5234:404 | DONE dir | em 16 16 | 0062aa | (5 bytes)   |         .byte 63, 65, 6c, 6c, 73     
5234:404 | DONE dir | em 16 16 |        |             |                 63 65 6c 6c 73           --  c e l l s
5234:405 | DONE wsp | em 16 16 |        |             |
5234:406 | DONE lbl | em 16 16 | 0062af |             | nt_dotquote                          
5234:407 | DONE dir | em 16 16 | 0062af | (2 bytes)   |         .byte 2, { CO + NC + IM }    
5234:407 | DONE dir | em 16 16 |        |             |                 02 07                    --  . .
5234:408 | DONE dir | em 16 16 | 0062b1 | (6 bytes)   |         .word nt_cells, xt_dotquote, 005208 
5234:408 | DONE dir | em 16 16 |        |             |                 a2 62 f4 51 08 52        --  . b . Q . R
5234:409 | DONE dir | em 16 16 | 0062b7 | (2 bytes)   |         .byte 2e, &34                
5234:409 | DONE dir | em 16 16 |        |             |                 2e 22                    --  . "
5234:410 | DONE wsp | em 16 16 |        |             |
5234:411 | DONE lbl | em 16 16 | 0062b9 |             | nt_squote                            
5234:412 | DONE dir | em 16 16 | 0062b9 | (2 bytes)   |         .byte 2, { IM + NC }         not CO, see source code
5234:412 | DONE dir | em 16 16 |        |             |                 02 03                    --  . .
5234:413 | DONE dir | em 16 16 | 0062bb | (6 bytes)   |         .word nt_dotquote, xt_squote, 005c84 
5234:413 | DONE dir | em 16 16 |        |             |                 af 62 4f 5c 84 5c        --  . b O \ . \
5234:414 | DONE dir | em 16 16 | 0062c1 | (2 bytes)   |         .byte 73, &34                
5234:414 | DONE dir | em 16 16 |        |             |                 73 22                    --  s "
5234:415 | DONE wsp | em 16 16 |        |             |
5234:416 | DONE lbl | em 16 16 | 0062c3 |             | nt_sliteral                          
5234:417 | DONE dir | em 16 16 | 0062c3 | (2 bytes)   |         .byte 8, { IM + CO }         
5234:417 | DONE dir | em 16 16 |        |             |                 08 06                    --  . .
5234:418 | DONE dir | em 16 16 | 0062c5 | (6 bytes)   |         .word nt_squote, xt_sliteral, 005ced 
5234:418 | DONE dir | em 16 16 |        |             |                 b9 62 a3 5c ed 5c        --  . b . \ . \
5234:419 | DONE dir | em 16 16 | 0062cb | (8 bytes)   |         .byte 73, 6c, 69, 74, 65, 72, 61, 6c 
5234:419 | DONE dir | em 16 16 |        |             |                 73 6c 69 74 65 72 61 6c  --  s l i t e r a l
5234:419 | DONE dir | em 16 16 |        |             |                                          -- 
5234:420 | DONE wsp | em 16 16 |        |             |
5234:421 | DONE lbl | em 16 16 | 0062d3 |             | nt_brackettick                       
5234:422 | DONE dir | em 16 16 | 0062d3 | (2 bytes)   |         .byte 3, { IM + CO }         
5234:422 | DONE dir | em 16 16 |        |             |                 03 06                    --  . .
5234:423 | DONE dir | em 16 16 | 0062d5 | (6 bytes)   |         .word nt_sliteral, xt_brackettick, 0052df 
5234:423 | DONE dir | em 16 16 |        |             |                 c3 62 d9 52 df 52        --  . b . R . R
5234:424 | DONE dir | em 16 16 | 0062db | (3 bytes)   |         .byte 5b, 27, 5d             
5234:424 | DONE dir | em 16 16 |        |             |                 5b 27 5d                 --  [ ' ]
5234:425 | DONE wsp | em 16 16 |        |             |
5234:426 | DONE lbl | em 16 16 | 0062de |             | nt_bracketchar                       
5234:427 | DONE dir | em 16 16 | 0062de | (2 bytes)   |         .byte 6, { IM + CO }         
5234:427 | DONE dir | em 16 16 |        |             |                 06 06                    --  . .
5234:428 | DONE dir | em 16 16 | 0062e0 | (6 bytes)   |         .word nt_brackettick, xt_bracketchar, 0052ee 
5234:428 | DONE dir | em 16 16 |        |             |                 d3 62 e8 52 ee 52        --  . b . R . R
5234:429 | DONE dir | em 16 16 | 0062e6 | (6 bytes)   |         .byte 5b, 63, 68, 61, 72, 5d 
5234:429 | DONE dir | em 16 16 |        |             |                 5b 63 68 61 72 5d        --  [ c h a r ]
5234:430 | DONE wsp | em 16 16 |        |             |
5234:431 | DONE lbl | em 16 16 | 0062ec |             | nt_literal                           
5234:432 | DONE dir | em 16 16 | 0062ec | (2 bytes)   |         .byte 7, { IM + CO }         
5234:432 | DONE dir | em 16 16 |        |             |                 07 06                    --  . .
5234:433 | DONE dir | em 16 16 | 0062ee | (6 bytes)   |         .word nt_bracketchar, xt_literal, 0059c0 
5234:433 | DONE dir | em 16 16 |        |             |                 de 62 af 59 c0 59        --  . b . Y . Y
5234:434 | DONE dir | em 16 16 | 0062f4 | (7 bytes)   |         .byte 6c, 69, 74, 65, 72, 61, 6c 
5234:434 | DONE dir | em 16 16 |        |             |                 6c 69 74 65 72 61 6c     --  l i t e r a l
5234:435 | DONE wsp | em 16 16 |        |             |
5234:436 | DONE lbl | em 16 16 | 0062fb |             | nt_native-compile                    
5234:437 | DONE dir | em 16 16 | 0062fb | (2 bytes)   |         .byte 0e, { NC }             
5234:437 | DONE dir | em 16 16 |        |             |                 0e 01                    --  . .
5234:438 | DONE dir | em 16 16 | 0062fd | (6 bytes)   |         .word nt_literal, xt_native-compile, 005a85 
5234:438 | DONE dir | em 16 16 |        |             |                 ec 62 7d 5a 85 5a        --  . b } Z . Z
5234:439 | DONE dir | em 16 16 | 006303 | (14 bytes)  |         .byte 6e, 61, 74, 69, 76, 65, 2d, 63, 6f, 6d, 70, 69, 6c, 65 
5234:439 | DONE dir | em 16 16 |        |             |                 6e 61 74 69 76 65 2d 63  --  n a t i v e - c
5234:439 | DONE dir | em 16 16 |        |             |                 6f 6d 70 69 6c 65        --  o m p i l e
5234:440 | DONE wsp | em 16 16 |        |             |
5234:441 | DONE lbl | em 16 16 | 006311 |             | nt_compile-only                      
5234:442 | DONE dir | em 16 16 | 006311 | (2 bytes)   |         .byte 0c, { NC }             
5234:442 | DONE dir | em 16 16 |        |             |                 0c 01                    --   .
5234:443 | DONE dir | em 16 16 | 006313 | (6 bytes)   |         .word nt_native-compile, xt_compile-only, 005620 
5234:443 | DONE dir | em 16 16 |        |             |                 fb 62 18 56 20 56        --  . b . V   V
5234:444 | DONE dir | em 16 16 | 006319 | (12 bytes)  |         .byte 63, 6f, 6d, 70, 69, 6c, 65, 2d, 6f, 6e, 6c, 79 
5234:444 | DONE dir | em 16 16 |        |             |                 63 6f 6d 70 69 6c 65 2d  --  c o m p i l e -
5234:444 | DONE dir | em 16 16 |        |             |                 6f 6e 6c 79              --  o n l y
5234:445 | DONE wsp | em 16 16 |        |             |
5234:446 | DONE lbl | em 16 16 | 006325 |             | nt_immediate                         
5234:447 | DONE dir | em 16 16 | 006325 | (2 bytes)   |         .byte 9, { NC }              
5234:447 | DONE dir | em 16 16 |        |             |                 09 01                    --  	 .
5234:448 | DONE dir | em 16 16 | 006327 | (6 bytes)   |         .word nt_compile-only, xt_immediate, 005949 
5234:448 | DONE dir | em 16 16 |        |             |                 11 63 41 59 49 59        --  . c A Y I Y
5234:449 | DONE dir | em 16 16 | 00632d | (9 bytes)   |         .byte 69, 6d, 6d, 65, 64, 69, 61, 74, 65 
5234:449 | DONE dir | em 16 16 |        |             |                 69 6d 6d 65 64 69 61 74  --  i m m e d i a t
5234:449 | DONE dir | em 16 16 |        |             |                 65                       --  e
5234:450 | DONE wsp | em 16 16 |        |             |
5234:451 | DONE lbl | em 16 16 | 006336 |             | nt_postpone                          
5234:452 | DONE dir | em 16 16 | 006336 | (2 bytes)   |         .byte 8, { IM + CO }         
5234:452 | DONE dir | em 16 16 |        |             |                 08 06                    --  . .
5234:453 | DONE dir | em 16 16 | 006338 | (6 bytes)   |         .word nt_immediate, xt_postpone, 005bf8 
5234:453 | DONE dir | em 16 16 |        |             |                 25 63 c6 5b f8 5b        --  % c . [ . [
5234:454 | DONE dir | em 16 16 | 00633e | (8 bytes)   |         .byte 70, 6f, 73, 74, 70, 6f, 6e, 65 
5234:454 | DONE dir | em 16 16 |        |             |                 70 6f 73 74 70 6f 6e 65  --  p o s t p o n e
5234:454 | DONE dir | em 16 16 |        |             |                                          -- 
5234:455 | DONE wsp | em 16 16 |        |             |
5234:456 | DONE lbl | em 16 16 | 006346 |             | nt_rightbracket                      
5234:457 | DONE dir | em 16 16 | 006346 | (2 bytes)   |         .byte 1, { NC }              
5234:457 | DONE dir | em 16 16 |        |             |                 01 01                    --  . .
5234:458 | DONE dir | em 16 16 | 006348 | (6 bytes)   |         .word nt_postpone, xt_rightbracket, 0052e7 
5234:458 | DONE dir | em 16 16 |        |             |                 36 63 e2 52 e7 52        --  6 c . R . R
5234:459 | DONE dir | em 16 16 | 00634e | (1 bytes)   |         .byte 5d                     
5234:459 | DONE dir | em 16 16 |        |             |                 5d                       --  ]
5234:460 | DONE wsp | em 16 16 |        |             |
5234:461 | DONE lbl | em 16 16 | 00634f |             | nt_leftbracket                       
5234:462 | DONE dir | em 16 16 | 00634f | (2 bytes)   |         .byte 1, { IM + CO }         
5234:462 | DONE dir | em 16 16 |        |             |                 01 06                    --  . .
5234:463 | DONE dir | em 16 16 | 006351 | (6 bytes)   |         .word nt_rightbracket, xt_leftbracket, 0052e1 
5234:463 | DONE dir | em 16 16 |        |             |                 46 63 df 52 e1 52        --  F c . R . R
5234:464 | DONE dir | em 16 16 | 006357 | (1 bytes)   |         .byte 5b                     
5234:464 | DONE dir | em 16 16 |        |             |                 5b                       --  [
5234:465 | DONE wsp | em 16 16 |        |             |
5234:466 | DONE lbl | em 16 16 | 006358 |             | nt_latestnt                          
5234:467 | DONE dir | em 16 16 | 006358 | (2 bytes)   |         .byte 8, { NC }              
5234:467 | DONE dir | em 16 16 |        |             |                 08 01                    --  . .
5234:468 | DONE dir | em 16 16 | 00635a | (6 bytes)   |         .word nt_leftbracket, xt_latestnt, 00599e 
5234:468 | DONE dir | em 16 16 |        |             |                 4f 63 97 59 9e 59        --  O c . Y . Y
5234:469 | DONE dir | em 16 16 | 006360 | (8 bytes)   |         .byte 6c, 61, 74, 65, 73, 74, 6e, 74 
5234:469 | DONE dir | em 16 16 |        |             |                 6c 61 74 65 73 74 6e 74  --  l a t e s t n t
5234:469 | DONE dir | em 16 16 |        |             |                                          -- 
5234:470 | DONE wsp | em 16 16 |        |             |
5234:471 | DONE lbl | em 16 16 | 006368 |             | nt_latestxt                          
5234:472 | DONE dir | em 16 16 | 006368 | (2 bytes)   |         .byte 8, { NC }              
5234:472 | DONE dir | em 16 16 |        |             |                 08 01                    --  . .
5234:473 | DONE dir | em 16 16 | 00636a | (6 bytes)   |         .word nt_latestnt, xt_latestxt, 0059ae 
5234:473 | DONE dir | em 16 16 |        |             |                 58 63 9f 59 ae 59        --  X c . Y . Y
5234:474 | DONE dir | em 16 16 | 006370 | (8 bytes)   |         .byte 6c, 61, 74, 65, 73, 74, 78, 74 
5234:474 | DONE dir | em 16 16 |        |             |                 6c 61 74 65 73 74 78 74  --  l a t e s t x t
5234:474 | DONE dir | em 16 16 |        |             |                                          -- 
5234:475 | DONE wsp | em 16 16 |        |             |
5234:476 | DONE lbl | em 16 16 | 006378 |             | nt_dtrailing                         
5234:477 | DONE dir | em 16 16 | 006378 | (2 bytes)   |         .byte 9, { NC }              
5234:477 | DONE dir | em 16 16 |        |             |                 09 01                    --  	 .
5234:478 | DONE dir | em 16 16 | 00637a | (6 bytes)   |         .word nt_latestxt, xt_dtrailing, 005326 
5234:478 | DONE dir | em 16 16 |        |             |                 68 63 10 53 26 53        --  h c . S & S
5234:479 | DONE dir | em 16 16 | 006380 | (9 bytes)   |         .byte 2d, 74, 72, 61, 69, 6c, 69, 6e, 67 
5234:479 | DONE dir | em 16 16 |        |             |                 2d 74 72 61 69 6c 69 6e  --  - t r a i l i n
5234:479 | DONE dir | em 16 16 |        |             |                 67                       --  g
5234:480 | DONE wsp | em 16 16 |        |             |
5234:481 | DONE lbl | em 16 16 | 006389 |             | nt_slashstring                       
5234:482 | DONE dir | em 16 16 | 006389 | (2 bytes)   |         .byte 7, { NC }              
5234:482 | DONE dir | em 16 16 |        |             |                 07 01                    --  . .
5234:483 | DONE dir | em 16 16 | 00638b | (6 bytes)   |         .word nt_dtrailing, xt_slashstring, 0051d4 
5234:483 | DONE dir | em 16 16 |        |             |                 78 63 c3 51 d4 51        --  x c . Q . Q
5234:484 | DONE dir | em 16 16 | 006391 | (7 bytes)   |         .byte 2f, 73, 74, 72, 69, 6e, 67 
5234:484 | DONE dir | em 16 16 |        |             |                 2f 73 74 72 69 6e 67     --  / s t r i n g
5234:485 | DONE wsp | em 16 16 |        |             |
5234:486 | DONE lbl | em 16 16 | 006398 |             | nt_zbranch                           
5234:487 | DONE dir | em 16 16 | 006398 | (2 bytes)   |         .byte 7, { IM + CO }         
5234:487 | DONE dir | em 16 16 |        |             |                 07 06                    --  . .
5234:488 | DONE dir | em 16 16 | 00639a | (6 bytes)   |         .word nt_slashstring, xt_zbranch, 005370 
5234:488 | DONE dir | em 16 16 |        |             |                 89 63 6a 53 70 53        --  . c j S p S
5234:489 | DONE dir | em 16 16 | 0063a0 | (7 bytes)   |         .byte 30, 62, 72, 61, 6e, 63, 68 
5234:489 | DONE dir | em 16 16 |        |             |                 30 62 72 61 6e 63 68     --  0 b r a n c h
5234:490 | DONE wsp | em 16 16 |        |             |
5234:491 | DONE lbl | em 16 16 | 0063a7 |             | nt_branch                            
5234:492 | DONE dir | em 16 16 | 0063a7 | (2 bytes)   |         .byte 6, { IM + CO }         
5234:492 | DONE dir | em 16 16 |        |             |                 06 06                    --  . .
5234:493 | DONE dir | em 16 16 | 0063a9 | (6 bytes)   |         .word nt_zbranch, xt_branch, 005580 
5234:493 | DONE dir | em 16 16 |        |             |                 98 63 7a 55 80 55        --  . c z U . U
5234:494 | DONE dir | em 16 16 | 0063af | (6 bytes)   |         .byte 62, 72, 61, 6e, 63, 68 
5234:494 | DONE dir | em 16 16 |        |             |                 62 72 61 6e 63 68        --  b r a n c h
5234:495 | DONE wsp | em 16 16 |        |             |
5234:496 | DONE lbl | em 16 16 | 0063b5 |             | nt_again                             
5234:497 | DONE dir | em 16 16 | 0063b5 | (2 bytes)   |         .byte 5, { IM + NC + CO }    
5234:497 | DONE dir | em 16 16 |        |             |                 05 07                    --  . .
5234:498 | DONE dir | em 16 16 | 0063b7 | (6 bytes)   |         .word nt_branch, xt_again, 0054f6 
5234:498 | DONE dir | em 16 16 |        |             |                 a7 63 e1 54 f6 54        --  . c . T . T
5234:499 | DONE dir | em 16 16 | 0063bd | (5 bytes)   |         .byte 61, 67, 61, 69, 6e     
5234:499 | DONE dir | em 16 16 |        |             |                 61 67 61 69 6e           --  a g a i n
5234:500 | DONE wsp | em 16 16 |        |             |
5234:501 | DONE lbl | em 16 16 | 0063c2 |             | nt_begin                             
5234:502 | DONE dir | em 16 16 | 0063c2 | (2 bytes)   |         .byte 5, { IM + NC + CO }    
5234:502 | DONE dir | em 16 16 |        |             |                 05 07                    --  . .
5234:503 | DONE dir | em 16 16 | 0063c4 | (6 bytes)   |         .word nt_again, xt_begin, 005567 
5234:503 | DONE dir | em 16 16 |        |             |                 b5 63 61 55 67 55        --  . c a U g U
5234:504 | DONE dir | em 16 16 | 0063ca | (5 bytes)   |         .byte 62, 65, 67, 69, 6e     
5234:504 | DONE dir | em 16 16 |        |             |                 62 65 67 69 6e           --  b e g i n
5234:505 | DONE wsp | em 16 16 |        |             |
5234:506 | DONE lbl | em 16 16 | 0063cf |             | nt_compilecomma                      
5234:507 | DONE dir | em 16 16 | 0063cf | (2 bytes)   |         .byte 08, { CO }             
5234:507 | DONE dir | em 16 16 |        |             |                 08 04                    --  . .
5234:508 | DONE dir | em 16 16 | 0063d1 | (6 bytes)   |         .word nt_begin, xt_compilecomma, 005636 
5234:508 | DONE dir | em 16 16 |        |             |                 c2 63 21 56 36 56        --  . c ! V 6 V
5234:509 | DONE dir | em 16 16 | 0063d7 | (8 bytes)   |         .byte 63, 6f, 6d, 70, 69, 6c, 65, 2c 
5234:509 | DONE dir | em 16 16 |        |             |                 63 6f 6d 70 69 6c 65 2c  --  c o m p i l e ,
5234:509 | DONE dir | em 16 16 |        |             |                                          -- 
5234:510 | DONE wsp | em 16 16 |        |             |
5234:511 | DONE lbl | em 16 16 | 0063df |             | nt_semicolon                         
5234:512 | DONE dir | em 16 16 | 0063df | (2 bytes)   |         .byte 1, { CO + IM }         
5234:512 | DONE dir | em 16 16 |        |             |                 01 06                    --  . .
5234:513 | DONE dir | em 16 16 | 0063e1 | (6 bytes)   |         .word nt_compilecomma, xt_semicolon, 005285 
5234:513 | DONE dir | em 16 16 |        |             |                 cf 63 6d 52 85 52        --  . c m R . R
5234:514 | DONE dir | em 16 16 | 0063e7 | (1 bytes)   |         .byte 3b                     
5234:514 | DONE dir | em 16 16 |        |             |                 3b                       --  ;
5234:515 | DONE wsp | em 16 16 |        |             |
5234:516 | DONE lbl | em 16 16 | 0063e8 |             | nt_colon                             
5234:517 | DONE dir | em 16 16 | 0063e8 | (2 bytes)   |         .byte 1, { NC }              
5234:517 | DONE dir | em 16 16 |        |             |                 01 01                    --  . .
5234:518 | DONE dir | em 16 16 | 0063ea | (6 bytes)   |         .word nt_semicolon, xt_colon, 00526c 
5234:518 | DONE dir | em 16 16 |        |             |                 df 63 4b 52 6c 52        --  . c K R l R
5234:519 | DONE dir | em 16 16 | 0063f0 | (1 bytes)   |         .byte 3a                     
5234:519 | DONE dir | em 16 16 |        |             |                 3a                       --  :
5234:520 | DONE wsp | em 16 16 |        |             |
5234:521 | DONE lbl | em 16 16 | 0063f1 |             | nt_allot                             
5234:522 | DONE dir | em 16 16 | 0063f1 | (2 bytes)   |         .byte 5, { NC }              
5234:522 | DONE dir | em 16 16 |        |             |                 05 01                    --  . .
5234:523 | DONE dir | em 16 16 | 0063f3 | (6 bytes)   |         .word nt_colon, xt_allot, 005523 
5234:523 | DONE dir | em 16 16 |        |             |                 e8 63 fb 54 23 55        --  . c . T # U
5234:524 | DONE dir | em 16 16 | 0063f9 | (5 bytes)   |         .byte 61, 6c, 6c, 6f, 74     
5234:524 | DONE dir | em 16 16 |        |             |                 61 6c 6c 6f 74           --  a l l o t
5234:525 | DONE wsp | em 16 16 |        |             |
5234:526 | DONE lbl | em 16 16 | 0063fe |             | nt_defer                             
5234:527 | DONE dir | em 16 16 | 0063fe | (2 bytes)   |         .byte 5, { NC }              
5234:527 | DONE dir | em 16 16 |        |             |                 05 01                    --  . .
5234:528 | DONE dir | em 16 16 | 006400 | (6 bytes)   |         .word nt_allot, xt_defer, 005704 
5234:528 | DONE dir | em 16 16 |        |             |                 f1 63 ea 56 04 57        --  . c . V . W
5234:529 | DONE dir | em 16 16 | 006406 | (5 bytes)   |         .byte 64, 65, 66, 65, 72     
5234:529 | DONE dir | em 16 16 |        |             |                 64 65 66 65 72           --  d e f e r
5234:530 | DONE wsp | em 16 16 |        |             |
5234:531 | DONE lbl | em 16 16 | 00640b |             | nt_tobody                            
5234:532 | DONE dir | em 16 16 | 00640b | (2 bytes)   |         .byte 5, { NC }              
5234:532 | DONE dir | em 16 16 |        |             |                 05 01                    --  . .
5234:533 | DONE dir | em 16 16 | 00640d | (6 bytes)   |         .word nt_defer, xt_tobody, 005155 
5234:533 | DONE dir | em 16 16 |        |             |                 fe 63 32 51 55 51        --  . c 2 Q U Q
5234:534 | DONE dir | em 16 16 | 006413 | (5 bytes)   |         .byte 3e, 62, 6f, 64, 79     
5234:534 | DONE dir | em 16 16 |        |             |                 3e 62 6f 64 79           --  > b o d y
5234:535 | DONE wsp | em 16 16 |        |             |
5234:536 | DONE lbl | em 16 16 | 006418 |             | nt_does                              
5234:537 | DONE dir | em 16 16 | 006418 | (2 bytes)   |         .byte 5, { IM + CO }         
5234:537 | DONE dir | em 16 16 |        |             |                 05 06                    --  . .
5234:538 | DONE dir | em 16 16 | 00641a | (6 bytes)   |         .word nt_tobody, xt_does, 0057a8 
5234:538 | DONE dir | em 16 16 |        |             |                 0b 64 9c 57 a8 57        --   d . W . W
5234:539 | DONE dir | em 16 16 | 006420 | (5 bytes)   |         .byte 64, 6f, 65, 73, 3e     
5234:539 | DONE dir | em 16 16 |        |             |                 64 6f 65 73 3e           --  d o e s >
5234:540 | DONE wsp | em 16 16 |        |             |
5234:541 | DONE lbl | em 16 16 | 006425 |             | nt_create                            
5234:542 | DONE dir | em 16 16 | 006425 | (2 bytes)   |         .byte 6, { NC }              
5234:542 | DONE dir | em 16 16 |        |             |                 06 01                    --  . .
5234:543 | DONE dir | em 16 16 | 006427 | (6 bytes)   |         .word nt_does, xt_create, 0056e9 
5234:543 | DONE dir | em 16 16 |        |             |                 18 64 7a 56 e9 56        --  . d z V . V
5234:544 | DONE dir | em 16 16 | 00642d | (6 bytes)   |         .byte 63, 72, 65, 61, 74, 65 
5234:544 | DONE dir | em 16 16 |        |             |                 63 72 65 61 74 65        --  c r e a t e
5234:545 | DONE wsp | em 16 16 |        |             |
5234:546 | DONE lbl | em 16 16 | 006433 |             | nt_name-string                       
5234:547 | DONE dir | em 16 16 | 006433 | (2 bytes)   |         .byte 0b, { NC }             
5234:547 | DONE dir | em 16 16 |        |             |                 0b 01                    --   .
5234:548 | DONE dir | em 16 16 | 006435 | (6 bytes)   |         .word nt_create, xt_name-string, 005a7c 
5234:548 | DONE dir | em 16 16 |        |             |                 25 64 6c 5a 7c 5a        --  % d l Z | Z
5234:549 | DONE dir | em 16 16 | 00643b | (11 bytes)  |         .byte 6e, 61, 6d, 65, 3e, 73, 74, 72, 69, 6e, 67 
5234:549 | DONE dir | em 16 16 |        |             |                 6e 61 6d 65 3e 73 74 72  --  n a m e > s t r
5234:549 | DONE dir | em 16 16 |        |             |                 69 6e 67                 --  i n g
5234:550 | DONE wsp | em 16 16 |        |             |
5234:551 | DONE lbl | em 16 16 | 006446 |             | nt_2dup                              
5234:552 | DONE dir | em 16 16 | 006446 | (2 bytes)   |         .byte 4, { NC }              
5234:552 | DONE dir | em 16 16 |        |             |                 04 01                    --  . .
5234:553 | DONE dir | em 16 16 | 006448 | (6 bytes)   |         .word nt_name-string, xt_2dup, 0053c2 
5234:553 | DONE dir | em 16 16 |        |             |                 33 64 b8 53 c2 53        --  3 d . S . S
5234:554 | DONE dir | em 16 16 | 00644e | (4 bytes)   |         .byte 32, 64, 75, 70         
5234:554 | DONE dir | em 16 16 |        |             |                 32 64 75 70              --  2 d u p
5234:555 | DONE wsp | em 16 16 |        |             |
5234:556 | DONE lbl | em 16 16 | 006452 |             | nt_abs                               
5234:557 | DONE dir | em 16 16 | 006452 | (2 bytes)   |         .byte 3, { NC }              
5234:557 | DONE dir | em 16 16 |        |             |                 03 01                    --  . .
5234:558 | DONE dir | em 16 16 | 006454 | (6 bytes)   |         .word nt_2dup, xt_abs, 005454 
5234:558 | DONE dir | em 16 16 |        |             |                 46 64 4c 54 54 54        --  F d L T T T
5234:559 | DONE dir | em 16 16 | 00645a | (3 bytes)   |         .byte 61, 62, 73             
5234:559 | DONE dir | em 16 16 |        |             |                 61 62 73                 --  a b s
5234:560 | DONE wsp | em 16 16 |        |             |
5234:561 | DONE lbl | em 16 16 | 00645d |             | nt_state                             
5234:562 | DONE dir | em 16 16 | 00645d | (2 bytes)   |         .byte 5, { NC }              
5234:562 | DONE dir | em 16 16 |        |             |                 05 01                    --  . .
5234:563 | DONE dir | em 16 16 | 00645f | (6 bytes)   |         .word nt_abs, xt_state, 005d94 
5234:563 | DONE dir | em 16 16 |        |             |                 52 64 8d 5d 94 5d        --  R d . ] . ]
5234:564 | DONE dir | em 16 16 | 006465 | (5 bytes)   |         .byte 73, 74, 61, 74, 65     
5234:564 | DONE dir | em 16 16 |        |             |                 73 74 61 74 65           --  s t a t e
5234:565 | DONE wsp | em 16 16 |        |             |
5234:566 | DONE lbl | em 16 16 | 00646a |             | nt_to-in                             
5234:567 | DONE dir | em 16 16 | 00646a | (2 bytes)   |         .byte 3, { NC }              
5234:567 | DONE dir | em 16 16 |        |             |                 03 01                    --  . .
5234:568 | DONE dir | em 16 16 | 00646c | (6 bytes)   |         .word nt_state, xt_to-in, 00515d 
5234:568 | DONE dir | em 16 16 |        |             |                 5d 64 56 51 5d 51        --  ] d V Q ] Q
5234:569 | DONE dir | em 16 16 | 006472 | (3 bytes)   |         .byte 3e, 69, 6e             
5234:569 | DONE dir | em 16 16 |        |             |                 3e 69 6e                 --  > i n
5234:570 | DONE wsp | em 16 16 |        |             |
5234:571 | DONE lbl | em 16 16 | 006475 |             | nt_source                            
5234:572 | DONE dir | em 16 16 | 006475 | (2 bytes)   |         .byte 6, { NC }              
5234:572 | DONE dir | em 16 16 |        |             |                 06 01                    --  . .
5234:573 | DONE dir | em 16 16 | 006477 | (6 bytes)   |         .word nt_to-in, xt_source, 005d6a 
5234:573 | DONE dir | em 16 16 |        |             |                 6a 64 5e 5d 6a 5d        --  j d ^ ] j ]
5234:574 | DONE dir | em 16 16 | 00647d | (6 bytes)   |         .byte 73, 6f, 75, 72, 63, 65 
5234:574 | DONE dir | em 16 16 |        |             |                 73 6f 75 72 63 65        --  s o u r c e
5234:575 | DONE wsp | em 16 16 |        |             |
5234:576 | DONE lbl | em 16 16 | 006483 |             | nt_depth                             
5234:577 | DONE dir | em 16 16 | 006483 | (2 bytes)   |         .byte 5, { NC }              
5234:577 | DONE dir | em 16 16 |        |             |                 05 01                    --  . .
5234:578 | DONE dir | em 16 16 | 006485 | (6 bytes)   |         .word nt_source, xt_depth, 005787 
5234:578 | DONE dir | em 16 16 |        |             |                 75 64 79 57 87 57        --  u d y W . W
5234:579 | DONE dir | em 16 16 | 00648b | (5 bytes)   |         .byte 64, 65, 70, 74, 68     
5234:579 | DONE dir | em 16 16 |        |             |                 64 65 70 74 68           --  d e p t h
5234:580 | DONE wsp | em 16 16 |        |             |
5234:581 | DONE lbl | em 16 16 | 006490 |             | nt_to                                
5234:582 | DONE dir | em 16 16 | 006490 | (2 bytes)   |         .byte 2, { NC }              
5234:582 | DONE dir | em 16 16 |        |             |                 02 01                    --  . .
5234:583 | DONE dir | em 16 16 | 006492 | (6 bytes)   |         .word nt_depth, xt_to, 005da4 
5234:583 | DONE dir | em 16 16 |        |             |                 83 64 9b 5d a4 5d        --  . d . ] . ]
5234:584 | DONE dir | em 16 16 | 006498 | (2 bytes)   |         .byte 74, 6f                 
5234:584 | DONE dir | em 16 16 |        |             |                 74 6f                    --  t o
5234:585 | DONE wsp | em 16 16 |        |             |
5234:586 | DONE lbl | em 16 16 | 00649a |             | nt_value                             
5234:587 | DONE dir | em 16 16 | 00649a | (2 bytes)   |         .byte 5, { NC }              uses routines of CONSTANT
5234:587 | DONE dir | em 16 16 |        |             |                 05 01                    --  . .
5234:588 | DONE dir | em 16 16 | 00649c | (6 bytes)   |         .word nt_to, xt_constant, 005665 
5234:588 | DONE dir | em 16 16 |        |             |                 90 64 37 56 65 56        --  . d 7 V e V
5234:589 | DONE dir | em 16 16 | 0064a2 | (5 bytes)   |         .byte 76, 61, 6c, 75, 65     
5234:589 | DONE dir | em 16 16 |        |             |                 76 61 6c 75 65           --  v a l u e
5234:590 | DONE wsp | em 16 16 |        |             |
5234:591 | DONE lbl | em 16 16 | 0064a7 |             | nt_constant                          
5234:592 | DONE dir | em 16 16 | 0064a7 | (2 bytes)   |         .byte 8, { NC }              
5234:592 | DONE dir | em 16 16 |        |             |                 08 01                    --  . .
5234:593 | DONE dir | em 16 16 | 0064a9 | (6 bytes)   |         .word nt_value, xt_constant, 005665 
5234:593 | DONE dir | em 16 16 |        |             |                 9a 64 37 56 65 56        --  . d 7 V e V
5234:594 | DONE dir | em 16 16 | 0064af | (8 bytes)   |         .byte 63, 6f, 6e, 73, 74, 61, 6e, 74 
5234:594 | DONE dir | em 16 16 |        |             |                 63 6f 6e 73 74 61 6e 74  --  c o n s t a n t
5234:594 | DONE dir | em 16 16 |        |             |                                          -- 
5234:595 | DONE wsp | em 16 16 |        |             |
5234:596 | DONE lbl | em 16 16 | 0064b7 |             | nt_variable                          
5234:597 | DONE dir | em 16 16 | 0064b7 | (2 bytes)   |         .byte 8, { NC }              
5234:597 | DONE dir | em 16 16 |        |             |                 08 01                    --  . .
5234:598 | DONE dir | em 16 16 | 0064b9 | (6 bytes)   |         .word nt_constant, xt_variable, 005ec6 
5234:598 | DONE dir | em 16 16 |        |             |                 a7 64 b7 5e c6 5e        --  . d . ^ . ^
5234:599 | DONE dir | em 16 16 | 0064bf | (8 bytes)   |         .byte 76, 61, 72, 69, 61, 62, 6c, 65 
5234:599 | DONE dir | em 16 16 |        |             |                 76 61 72 69 61 62 6c 65  --  v a r i a b l e
5234:599 | DONE dir | em 16 16 |        |             |                                          -- 
5234:600 | DONE wsp | em 16 16 |        |             |
5234:601 | DONE lbl | em 16 16 | 0064c7 |             | nt_tick                              
5234:602 | DONE dir | em 16 16 | 0064c7 | (2 bytes)   |         .byte 1, { NC }              
5234:602 | DONE dir | em 16 16 |        |             |                 01 01                    --  . .
5234:603 | DONE dir | em 16 16 | 0064c9 | (6 bytes)   |         .word nt_variable, xt_tick, 00542e 
5234:603 | DONE dir | em 16 16 |        |             |                 b7 64 13 54 2e 54        --  . d . T . T
5234:604 | DONE dir | em 16 16 | 0064cf | (1 bytes)   |         .byte 27                     hex for "'"
5234:604 | DONE dir | em 16 16 |        |             |                 27                       --  '
5234:605 | DONE wsp | em 16 16 |        |             |
5234:606 | DONE lbl | em 16 16 | 0064d0 |             | nt_move                              
5234:607 | DONE dir | em 16 16 | 0064d0 | (2 bytes)   |         .byte 4, { NC }              
5234:607 | DONE dir | em 16 16 |        |             |                 04 01                    --  . .
5234:608 | DONE dir | em 16 16 | 0064d2 | (6 bytes)   |         .word nt_tick, xt_move, 005a63 
5234:608 | DONE dir | em 16 16 |        |             |                 c7 64 52 5a 63 5a        --  . d R Z c Z
5234:609 | DONE dir | em 16 16 | 0064d8 | (4 bytes)   |         .byte 6d, 6f, 76, 65         
5234:609 | DONE dir | em 16 16 |        |             |                 6d 6f 76 65              --  m o v e
5234:610 | DONE wsp | em 16 16 |        |             |
5234:611 | DONE lbl | em 16 16 | 0064dc |             | nt_min                               
5234:612 | DONE dir | em 16 16 | 0064dc | (2 bytes)   |         .byte 3, { NC }              
5234:612 | DONE dir | em 16 16 |        |             |                 03 01                    --  . .
5234:613 | DONE dir | em 16 16 | 0064de | (6 bytes)   |         .word nt_move, xt_min, 005a51 
5234:613 | DONE dir | em 16 16 |        |             |                 d0 64 3f 5a 51 5a        --  . d ? Z Q Z
5234:614 | DONE dir | em 16 16 | 0064e4 | (3 bytes)   |         .byte 6d, 69, 6e             
5234:614 | DONE dir | em 16 16 |        |             |                 6d 69 6e                 --  m i n
5234:615 | DONE wsp | em 16 16 |        |             |
5234:616 | DONE lbl | em 16 16 | 0064e7 |             | nt_max                               
5234:617 | DONE dir | em 16 16 | 0064e7 | (2 bytes)   |         .byte 3, { NC }              
5234:617 | DONE dir | em 16 16 |        |             |                 03 01                    --  . .
5234:618 | DONE dir | em 16 16 | 0064e9 | (6 bytes)   |         .word nt_min, xt_max, 005a3e 
5234:618 | DONE dir | em 16 16 |        |             |                 dc 64 2c 5a 3e 5a        --  . d , Z > Z
5234:619 | DONE dir | em 16 16 | 0064ef | (3 bytes)   |         .byte 6d, 61, 78             
5234:619 | DONE dir | em 16 16 |        |             |                 6d 61 78                 --  m a x
5234:620 | DONE wsp | em 16 16 |        |             |
5234:621 | DONE lbl | em 16 16 | 0064f2 |             | nt_negate                            
5234:622 | DONE dir | em 16 16 | 0064f2 | (2 bytes)   |         .byte 6, { NC }              
5234:622 | DONE dir | em 16 16 |        |             |                 06 01                    --  . .
5234:623 | DONE dir | em 16 16 | 0064f4 | (6 bytes)   |         .word nt_max, xt_negate, 005a8c 
5234:623 | DONE dir | em 16 16 |        |             |                 e7 64 86 5a 8c 5a        --  . d . Z . Z
5234:624 | DONE dir | em 16 16 | 0064fa | (6 bytes)   |         .byte 6e, 65, 67, 61, 74, 65 
5234:624 | DONE dir | em 16 16 |        |             |                 6e 65 67 61 74 65        --  n e g a t e
5234:625 | DONE wsp | em 16 16 |        |             |
5234:626 | DONE lbl | em 16 16 | 006500 |             | nt_invert                            
5234:627 | DONE dir | em 16 16 | 006500 | (2 bytes)   |         .byte 6, { NC }              
5234:627 | DONE dir | em 16 16 |        |             |                 06 01                    --  . .
5234:628 | DONE dir | em 16 16 | 006502 | (6 bytes)   |         .word nt_negate, xt_invert, 00597b 
5234:628 | DONE dir | em 16 16 |        |             |                 f2 64 76 59 7b 59        --  . d v Y { Y
5234:629 | DONE dir | em 16 16 | 006508 | (6 bytes)   |         .byte 69, 6e, 76, 65, 72, 74 
5234:629 | DONE dir | em 16 16 |        |             |                 69 6e 76 65 72 74        --  i n v e r t
5234:630 | DONE wsp | em 16 16 |        |             |
5234:631 | DONE lbl | em 16 16 | 00650e |             | nt_char                              
5234:632 | DONE dir | em 16 16 | 00650e | (2 bytes)   |         .byte 4, { NC }              
5234:632 | DONE dir | em 16 16 |        |             |                 04 01                    --  . .
5234:633 | DONE dir | em 16 16 | 006510 | (6 bytes)   |         .word nt_invert, xt_char, 0055d9 
5234:633 | DONE dir | em 16 16 |        |             |                 00 65 c2 55 d9 55        --  . e . U . U
5234:634 | DONE dir | em 16 16 | 006516 | (4 bytes)   |         .byte 63, 68, 61, 72         
5234:634 | DONE dir | em 16 16 |        |             |                 63 68 61 72              --  c h a r
5234:635 | DONE wsp | em 16 16 |        |             |
5234:636 | DONE lbl | em 16 16 | 00651a |             | nt_rshift                            
5234:637 | DONE dir | em 16 16 | 00651a | (2 bytes)   |         .byte 6, { NC }              
5234:637 | DONE dir | em 16 16 |        |             |                 06 01                    --  . .
5234:638 | DONE dir | em 16 16 | 00651c | (6 bytes)   |         .word nt_char, xt_rshift, 005c4e 
5234:638 | DONE dir | em 16 16 |        |             |                 0e 65 3b 5c 4e 5c        --  . e ; \ N \
5234:639 | DONE dir | em 16 16 | 006522 | (6 bytes)   |         .byte 72, 73, 68, 69, 66, 74 
5234:639 | DONE dir | em 16 16 |        |             |                 72 73 68 69 66 74        --  r s h i f t
5234:640 | DONE wsp | em 16 16 |        |             |
5234:641 | DONE lbl | em 16 16 | 006528 |             | nt_xor                               
5234:642 | DONE dir | em 16 16 | 006528 | (2 bytes)   |         .byte 3, { NC }              
5234:642 | DONE dir | em 16 16 |        |             |                 03 01                    --  . .
5234:643 | DONE dir | em 16 16 | 00652a | (6 bytes)   |         .word nt_rshift, xt_xor, 005f3c 
5234:643 | DONE dir | em 16 16 |        |             |                 1a 65 36 5f 3c 5f        --  . e 6 _ < _
5234:644 | DONE dir | em 16 16 | 006530 | (3 bytes)   |         .byte 78, 6f, 72             
5234:644 | DONE dir | em 16 16 |        |             |                 78 6f 72                 --  x o r
5234:645 | DONE wsp | em 16 16 |        |             |
5234:646 | DONE lbl | em 16 16 | 006533 |             | nt_or                                
5234:647 | DONE dir | em 16 16 | 006533 | (2 bytes)   |         .byte 2, { NC }              
5234:647 | DONE dir | em 16 16 |        |             |                 02 01                    --  . .
5234:648 | DONE dir | em 16 16 | 006535 | (6 bytes)   |         .word nt_xor, xt_or, 005b1a  
5234:648 | DONE dir | em 16 16 |        |             |                 28 65 14 5b 1a 5b        --  ( e . [ . [
5234:649 | DONE dir | em 16 16 | 00653b | (2 bytes)   |         .byte 6f, 72                 
5234:649 | DONE dir | em 16 16 |        |             |                 6f 72                    --  o r
5234:650 | DONE wsp | em 16 16 |        |             |
5234:651 | DONE lbl | em 16 16 | 00653d |             | nt_and                               
5234:652 | DONE dir | em 16 16 | 00653d | (2 bytes)   |         .byte 3, { NC }              
5234:652 | DONE dir | em 16 16 |        |             |                 03 01                    --  . .
5234:653 | DONE dir | em 16 16 | 00653f | (6 bytes)   |         .word nt_or, xt_and, 00552a  
5234:653 | DONE dir | em 16 16 |        |             |                 33 65 24 55 2a 55        --  3 e $ U * U
5234:654 | DONE dir | em 16 16 | 006545 | (3 bytes)   |         .byte 61, 6e, 64             
5234:654 | DONE dir | em 16 16 |        |             |                 61 6e 64                 --  a n d
5234:655 | DONE wsp | em 16 16 |        |             |
5234:656 | DONE lbl | em 16 16 | 006548 |             | nt_lshift                            
5234:657 | DONE dir | em 16 16 | 006548 | (2 bytes)   |         .byte 6, { NC }              
5234:657 | DONE dir | em 16 16 |        |             |                 06 01                    --  . .
5234:658 | DONE dir | em 16 16 | 00654a | (6 bytes)   |         .word nt_and, xt_lshift, 0059e1 
5234:658 | DONE dir | em 16 16 |        |             |                 3d 65 ce 59 e1 59        --  = e . Y . Y
5234:659 | DONE dir | em 16 16 | 006550 | (6 bytes)   |         .byte 6c, 73, 68, 69, 66, 74 
5234:659 | DONE dir | em 16 16 |        |             |                 6c 73 68 69 66 74        --  l s h i f t
5234:660 | DONE wsp | em 16 16 |        |             |
5234:661 | DONE lbl | em 16 16 | 006556 |             | nt_plusstore                         
5234:662 | DONE dir | em 16 16 | 006556 | (2 bytes)   |         .byte 2, { NC }              
5234:662 | DONE dir | em 16 16 |        |             |                 02 01                    --  . .
5234:663 | DONE dir | em 16 16 | 006558 | (6 bytes)   |         .word nt_lshift, xt_plusstore, 005bc5 
5234:663 | DONE dir | em 16 16 |        |             |                 48 65 b6 5b c5 5b        --  H e . [ . [
5234:664 | DONE dir | em 16 16 | 00655e | (2 bytes)   |         .byte 2b, 21                 
5234:664 | DONE dir | em 16 16 |        |             |                 2b 21                    --  + !
5234:665 | DONE wsp | em 16 16 |        |             |
5234:666 | DONE lbl | em 16 16 | 006560 |             | nt_c-comma                           
5234:667 | DONE dir | em 16 16 | 006560 | (2 bytes)   |         .byte 2, { NC }              
5234:667 | DONE dir | em 16 16 |        |             |                 02 01                    --  . .
5234:668 | DONE dir | em 16 16 | 006562 | (6 bytes)   |         .word nt_plusstore, xt_c-comma, 0055a2 
5234:668 | DONE dir | em 16 16 |        |             |                 56 65 95 55 a2 55        --  V e . U . U
5234:669 | DONE dir | em 16 16 | 006568 | (2 bytes)   |         .byte 63, 2c                 
5234:669 | DONE dir | em 16 16 |        |             |                 63 2c                    --  c ,
5234:670 | DONE wsp | em 16 16 |        |             |
5234:671 | DONE lbl | em 16 16 | 00656a |             | nt_c-fetch                           
5234:672 | DONE dir | em 16 16 | 00656a | (2 bytes)   |         .byte 2, { NC }              
5234:672 | DONE dir | em 16 16 |        |             |                 02 01                    --  . .
5234:673 | DONE dir | em 16 16 | 00656c | (6 bytes)   |         .word nt_c-comma, xt_c-fetch, 0055ae 
5234:673 | DONE dir | em 16 16 |        |             |                 60 65 a3 55 ae 55        --  ` e . U . U
5234:674 | DONE dir | em 16 16 | 006572 | (2 bytes)   |         .byte 63, 40                 
5234:674 | DONE dir | em 16 16 |        |             |                 63 40                    --  c @
5234:675 | DONE wsp | em 16 16 |        |             |
5234:676 | DONE lbl | em 16 16 | 006574 |             | nt_c-store                           
5234:677 | DONE dir | em 16 16 | 006574 | (2 bytes)   |         .byte 2, { NC }              
5234:677 | DONE dir | em 16 16 |        |             |                 02 01                    --  . .
5234:678 | DONE dir | em 16 16 | 006576 | (6 bytes)   |         .word nt_c-fetch, xt_c-store, 0055be 
5234:678 | DONE dir | em 16 16 |        |             |                 6a 65 af 55 be 55        --  j e . U . U
5234:679 | DONE dir | em 16 16 | 00657c | (2 bytes)   |         .byte 63, 21                 
5234:679 | DONE dir | em 16 16 |        |             |                 63 21                    --  c !
5234:680 | DONE wsp | em 16 16 |        |             |
5234:681 | DONE lbl | em 16 16 | 00657e |             | nt_two-star                          
5234:682 | DONE dir | em 16 16 | 00657e | (2 bytes)   |         .byte 2, { NC }              
5234:682 | DONE dir | em 16 16 |        |             |                 02 01                    --  . .
5234:683 | DONE dir | em 16 16 | 006580 | (6 bytes)   |         .word nt_c-store, xt_two-star, 00539f 
5234:683 | DONE dir | em 16 16 |        |             |                 74 65 9c 53 9f 53        --  t e . S . S
5234:684 | DONE dir | em 16 16 | 006586 | (2 bytes)   |         .byte 32, 2a                 
5234:684 | DONE dir | em 16 16 |        |             |                 32 2a                    --  2 *
5234:685 | DONE wsp | em 16 16 |        |             |
5234:686 | DONE lbl | em 16 16 | 006588 |             | nt_minus                             
5234:687 | DONE dir | em 16 16 | 006588 | (2 bytes)   |         .byte 1, { NC }              
5234:687 | DONE dir | em 16 16 |        |             |                 01 01                    --  . .
5234:688 | DONE dir | em 16 16 | 00658a | (6 bytes)   |         .word nt_two-star, xt_minus, 005306 
5234:688 | DONE dir | em 16 16 |        |             |                 7e 65 fc 52 06 53        --  ~ e . R . S
5234:689 | DONE dir | em 16 16 | 006590 | (1 bytes)   |         .byte 2d                     
5234:689 | DONE dir | em 16 16 |        |             |                 2d                       --  -
5234:690 | DONE wsp | em 16 16 |        |             |
5234:691 | DONE lbl | em 16 16 | 006591 |             | nt_plus                              
5234:692 | DONE dir | em 16 16 | 006591 | (2 bytes)   |         .byte 1, { NC }              
5234:692 | DONE dir | em 16 16 |        |             |                 01 01                    --  . .
5234:693 | DONE dir | em 16 16 | 006593 | (6 bytes)   |         .word nt_minus, xt_plus, 0052fb 
5234:693 | DONE dir | em 16 16 |        |             |                 88 65 f4 52 fb 52        --  . e . R . R
5234:694 | DONE dir | em 16 16 | 006599 | (1 bytes)   |         .byte 2b                     
5234:694 | DONE dir | em 16 16 |        |             |                 2b                       --  +
5234:695 | DONE wsp | em 16 16 |        |             |
5234:696 | DONE lbl | em 16 16 | 00659a |             | nt_one-minus                         
5234:697 | DONE dir | em 16 16 | 00659a | (2 bytes)   |         .byte 2, { NC }              
5234:697 | DONE dir | em 16 16 |        |             |                 02 01                    --  . .
5234:698 | DONE dir | em 16 16 | 00659c | (6 bytes)   |         .word nt_plus, xt_one-minus, 005391 
5234:698 | DONE dir | em 16 16 |        |             |                 91 65 90 53 91 53        --  . e . S . S
5234:699 | DONE dir | em 16 16 | 0065a2 | (2 bytes)   |         .byte 31, 2d                 
5234:699 | DONE dir | em 16 16 |        |             |                 31 2d                    --  1 -
5234:700 | DONE wsp | em 16 16 |        |             |
5234:701 | DONE lbl | em 16 16 | 0065a4 |             | nt_one-plus                          
5234:702 | DONE dir | em 16 16 | 0065a4 | (2 bytes)   |         .byte 2, { NC }              
5234:702 | DONE dir | em 16 16 |        |             |                 02 01                    --  . .
5234:703 | DONE dir | em 16 16 | 0065a6 | (6 bytes)   |         .word nt_one-minus, xt_one-plus, 005393 
5234:703 | DONE dir | em 16 16 |        |             |                 9a 65 92 53 93 53        --  . e . S . S
5234:704 | DONE dir | em 16 16 | 0065ac | (2 bytes)   |         .byte 31, 2b                 
5234:704 | DONE dir | em 16 16 |        |             |                 31 2b                    --  1 +
5234:705 | DONE wsp | em 16 16 |        |             |
5234:706 | DONE lbl | em 16 16 | 0065ae |             | nt_zero-notequal                     
5234:707 | DONE dir | em 16 16 | 0065ae | (2 bytes)   |         .byte 3, { NC }              
5234:707 | DONE dir | em 16 16 |        |             |                 03 01                    --  . .
5234:708 | DONE dir | em 16 16 | 0065b0 | (6 bytes)   |         .word nt_one-plus, xt_zero-notequal, 00535e 
5234:708 | DONE dir | em 16 16 |        |             |                 a4 65 53 53 5e 53        --  . e S S ^ S
5234:709 | DONE dir | em 16 16 | 0065b6 | (3 bytes)   |         .byte 30, 3c, 3e             
5234:709 | DONE dir | em 16 16 |        |             |                 30 3c 3e                 --  0 < >
5234:710 | DONE wsp | em 16 16 |        |             |
5234:711 | DONE lbl | em 16 16 | 0065b9 |             | nt_zero-more                         
5234:712 | DONE dir | em 16 16 | 0065b9 | (2 bytes)   |         .byte 2, { NC }              
5234:712 | DONE dir | em 16 16 |        |             |                 02 01                    --  . .
5234:713 | DONE dir | em 16 16 | 0065bb | (6 bytes)   |         .word nt_zero-notequal, xt_zero-more, 005369 
5234:713 | DONE dir | em 16 16 |        |             |                 ae 65 5f 53 69 53        --  . e _ S i S
5234:714 | DONE dir | em 16 16 | 0065c1 | (2 bytes)   |         .byte 30, 3e                 
5234:714 | DONE dir | em 16 16 |        |             |                 30 3e                    --  0 >
5234:715 | DONE wsp | em 16 16 |        |             |
5234:716 | DONE lbl | em 16 16 | 0065c3 |             | nt_zero-less                         
5234:717 | DONE dir | em 16 16 | 0065c3 | (2 bytes)   |         .byte 2, { NC }              
5234:717 | DONE dir | em 16 16 |        |             |                 02 01                    --  . .
5234:718 | DONE dir | em 16 16 | 0065c5 | (6 bytes)   |         .word nt_zero-more, xt_zero-less, 005352 
5234:718 | DONE dir | em 16 16 |        |             |                 b9 65 47 53 52 53        --  . e G S R S
5234:719 | DONE dir | em 16 16 | 0065cb | (2 bytes)   |         .byte 30, 3c                 
5234:719 | DONE dir | em 16 16 |        |             |                 30 3c                    --  0 <
5234:720 | DONE wsp | em 16 16 |        |             |
5234:721 | DONE lbl | em 16 16 | 0065cd |             | nt_greater                           
5234:722 | DONE dir | em 16 16 | 0065cd | (2 bytes)   |         .byte 1, { NC }              
5234:722 | DONE dir | em 16 16 |        |             |                 01 01                    --  . .
5234:723 | DONE dir | em 16 16 | 0065cf | (6 bytes)   |         .word nt_zero-less, xt_greater, 005131 
5234:723 | DONE dir | em 16 16 |        |             |                 c3 65 1e 51 31 51        --  . e . Q 1 Q
5234:724 | DONE dir | em 16 16 | 0065d5 | (1 bytes)   |         .byte 3e                     
5234:724 | DONE dir | em 16 16 |        |             |                 3e                       --  >
5234:725 | DONE wsp | em 16 16 |        |             |
5234:726 | DONE lbl | em 16 16 | 0065d6 |             | nt_less                              
5234:727 | DONE dir | em 16 16 | 0065d6 | (2 bytes)   |         .byte 1, { NC }              
5234:727 | DONE dir | em 16 16 |        |             |                 01 01                    --  . .
5234:728 | DONE dir | em 16 16 | 0065d8 | (6 bytes)   |         .word nt_greater, xt_less, 005107 
5234:728 | DONE dir | em 16 16 |        |             |                 cd 65 f4 50 07 51        --  . e . P . Q
5234:729 | DONE dir | em 16 16 | 0065de | (1 bytes)   |         .byte 3c                     
5234:729 | DONE dir | em 16 16 |        |             |                 3c                       --  <
5234:730 | DONE wsp | em 16 16 |        |             |
5234:731 | DONE lbl | em 16 16 | 0065df |             | nt_zero-equal                        
5234:732 | DONE dir | em 16 16 | 0065df | (2 bytes)   |         .byte 2, { NC }              
5234:732 | DONE dir | em 16 16 |        |             |                 02 01                    --  . .
5234:733 | DONE dir | em 16 16 | 0065e1 | (6 bytes)   |         .word nt_less, xt_zero-equal, 005346 
5234:733 | DONE dir | em 16 16 |        |             |                 d6 65 3b 53 46 53        --  . e ; S F S
5234:734 | DONE dir | em 16 16 | 0065e7 | (2 bytes)   |         .byte 30, 3d                 
5234:734 | DONE dir | em 16 16 |        |             |                 30 3d                    --  0 =
5234:735 | DONE wsp | em 16 16 |        |             |
5234:736 | DONE lbl | em 16 16 | 0065e9 |             | nt_not-equal                         
5234:737 | DONE dir | em 16 16 | 0065e9 | (2 bytes)   |         .byte 2, { NC }              
5234:737 | DONE dir | em 16 16 |        |             |                 02 01                    --  . .
5234:738 | DONE dir | em 16 16 | 0065eb | (6 bytes)   |         .word nt_zero-equal, xt_not-equal, 005113 
5234:738 | DONE dir | em 16 16 |        |             |                 df 65 08 51 13 51        --  . e . Q . Q
5234:739 | DONE dir | em 16 16 | 0065f1 | (2 bytes)   |         .byte 3c, 3e                 
5234:739 | DONE dir | em 16 16 |        |             |                 3c 3e                    --  < >
5234:740 | DONE wsp | em 16 16 |        |             |
5234:741 | DONE lbl | em 16 16 | 0065f3 |             | nt_equal                             
5234:742 | DONE dir | em 16 16 | 0065f3 | (2 bytes)   |         .byte 1, { NC }              
5234:742 | DONE dir | em 16 16 |        |             |                 01 01                    --  . .
5234:743 | DONE dir | em 16 16 | 0065f5 | (6 bytes)   |         .word nt_not-equal, xt_equal, 005332 
5234:743 | DONE dir | em 16 16 |        |             |                 e9 65 27 53 32 53        --  . e ' S 2 S
5234:744 | DONE dir | em 16 16 | 0065fb | (1 bytes)   |         .byte 3d                     
5234:744 | DONE dir | em 16 16 |        |             |                 3d                       --  =
5234:745 | DONE wsp | em 16 16 |        |             |
5234:746 | DONE lbl | em 16 16 | 0065fc |             | nt_false                             
5234:747 | DONE dir | em 16 16 | 0065fc | (2 bytes)   |         .byte 5, { NC }              
5234:747 | DONE dir | em 16 16 |        |             |                 05 01                    --  . .
5234:748 | DONE dir | em 16 16 | 0065fe | (6 bytes)   |         .word nt_equal, xt_zero, 00533a 
5234:748 | DONE dir | em 16 16 |        |             |                 f3 65 33 53 3a 53        --  . e 3 S : S
5234:749 | DONE dir | em 16 16 | 006604 | (5 bytes)   |         .byte 66, 61, 6c, 73, 65     
5234:749 | DONE dir | em 16 16 |        |             |                 66 61 6c 73 65           --  f a l s e
5234:750 | DONE wsp | em 16 16 |        |             |
5234:751 | DONE lbl | em 16 16 | 006609 |             | nt_true                              
5234:752 | DONE dir | em 16 16 | 006609 | (2 bytes)   |         .byte 4, { NC }              
5234:752 | DONE dir | em 16 16 |        |             |                 04 01                    --  . .
5234:753 | DONE dir | em 16 16 | 00660b | (6 bytes)   |         .word nt_false, xt_true, 005dac 
5234:753 | DONE dir | em 16 16 |        |             |                 fc 65 a5 5d ac 5d        --  . e . ] . ]
5234:754 | DONE dir | em 16 16 | 006611 | (4 bytes)   |         .byte 74, 72, 75, 65         
5234:754 | DONE dir | em 16 16 |        |             |                 74 72 75 65              --  t r u e
5234:755 | DONE wsp | em 16 16 |        |             |
5234:756 | DONE lbl | em 16 16 | 006615 |             | nt_tonumber                          
5234:757 | DONE dir | em 16 16 | 006615 | (2 bytes)   |         .byte 7, { NC }              see if actually NC
5234:757 | DONE dir | em 16 16 |        |             |                 07 01                    --  . .
5234:758 | DONE dir | em 16 16 | 006617 | (6 bytes)   |         .word nt_true, xt_tonumber, 0051ba 
5234:758 | DONE dir | em 16 16 |        |             |                 09 66 5e 51 ba 51        --  	 f ^ Q . Q
5234:759 | DONE dir | em 16 16 | 00661d | (7 bytes)   |         .byte 3e, 6e, 75, 6d, 62, 65, 72 
5234:759 | DONE dir | em 16 16 |        |             |                 3e 6e 75 6d 62 65 72     --  > n u m b e r
5234:760 | DONE wsp | em 16 16 |        |             |
5234:761 | DONE lbl | em 16 16 | 006624 |             | nt_number                            
5234:762 | DONE dir | em 16 16 | 006624 | (2 bytes)   |         .byte 6, { NC }              see if actually NC
5234:762 | DONE dir | em 16 16 |        |             |                 06 01                    --  . .
5234:763 | DONE dir | em 16 16 | 006626 | (6 bytes)   |         .word nt_tonumber, xt_number, 005b13 
5234:763 | DONE dir | em 16 16 |        |             |                 15 66 90 5a 13 5b        --  . f . Z . [
5234:764 | DONE dir | em 16 16 | 00662c | (6 bytes)   |         .byte 6e, 75, 6d, 62, 65, 72 
5234:764 | DONE dir | em 16 16 |        |             |                 6e 75 6d 62 65 72        --  n u m b e r
5234:765 | DONE wsp | em 16 16 |        |             |
5234:766 | DONE lbl | em 16 16 | 006632 |             | nt_two                               
5234:767 | DONE dir | em 16 16 | 006632 | (2 bytes)   |         .byte 1, { NC }              
5234:767 | DONE dir | em 16 16 |        |             |                 01 01                    --  . .
5234:768 | DONE dir | em 16 16 | 006634 | (6 bytes)   |         .word nt_number, xt_two, 00539b 
5234:768 | DONE dir | em 16 16 |        |             |                 24 66 94 53 9b 53        --  $ f . S . S
5234:769 | DONE dir | em 16 16 | 00663a | (1 bytes)   |         .byte 32                     
5234:769 | DONE dir | em 16 16 |        |             |                 32                       --  2
5234:770 | DONE wsp | em 16 16 |        |             |
5234:771 | DONE lbl | em 16 16 | 00663b |             | nt_one                               
5234:772 | DONE dir | em 16 16 | 00663b | (2 bytes)   |         .byte 1, { NC }              
5234:772 | DONE dir | em 16 16 |        |             |                 01 01                    --  . .
5234:773 | DONE dir | em 16 16 | 00663d | (6 bytes)   |         .word nt_two, xt_one, 00538f 
5234:773 | DONE dir | em 16 16 |        |             |                 32 66 88 53 8f 53        --  2 f . S . S
5234:774 | DONE dir | em 16 16 | 006643 | (1 bytes)   |         .byte 31                     
5234:774 | DONE dir | em 16 16 |        |             |                 31                       --  1
5234:775 | DONE wsp | em 16 16 |        |             |
5234:776 | DONE lbl | em 16 16 | 006644 |             | nt_zero                              
5234:777 | DONE dir | em 16 16 | 006644 | (2 bytes)   |         .byte 1, { NC }              
5234:777 | DONE dir | em 16 16 |        |             |                 01 01                    --  . .
5234:778 | DONE dir | em 16 16 | 006646 | (6 bytes)   |         .word nt_one, xt_zero, 00533a 
5234:778 | DONE dir | em 16 16 |        |             |                 3b 66 33 53 3a 53        --  ; f 3 S : S
5234:779 | DONE dir | em 16 16 | 00664c | (1 bytes)   |         .byte 30                     
5234:779 | DONE dir | em 16 16 |        |             |                 30                       --  0
5234:780 | DONE wsp | em 16 16 |        |             |
5234:781 | DONE lbl | em 16 16 | 00664d |             | nt_find-name                         
5234:782 | DONE dir | em 16 16 | 00664d | (2 bytes)   |         .byte 9, 0                   
5234:782 | DONE dir | em 16 16 |        |             |                 09 00                    --  	 .
5234:783 | DONE dir | em 16 16 | 00664f | (6 bytes)   |         .word nt_zero, xt_find-name, 0058dd 
5234:783 | DONE dir | em 16 16 |        |             |                 44 66 87 58 dd 58        --  D f . X . X
5234:784 | DONE dir | em 16 16 | 006655 | (9 bytes)   |         .byte 66, 69, 6e, 64, 2d, 6e, 61, 6d, 65 
5234:784 | DONE dir | em 16 16 |        |             |                 66 69 6e 64 2d 6e 61 6d  --  f i n d - n a m
5234:784 | DONE dir | em 16 16 |        |             |                 65                       --  e
5234:785 | DONE wsp | em 16 16 |        |             |
5234:786 | DONE lbl | em 16 16 | 00665e |             | nt_refill                            
5234:787 | DONE dir | em 16 16 | 00665e | (2 bytes)   |         .byte 6, 0                   TODO check flags
5234:787 | DONE dir | em 16 16 |        |             |                 06 00                    --  . .
5234:788 | DONE dir | em 16 16 | 006660 | (6 bytes)   |         .word nt_find-name, xt_refill, 005c31 
5234:788 | DONE dir | em 16 16 |        |             |                 4d 66 0a 5c 31 5c        --  M f 
 \ 1 \
5234:789 | DONE dir | em 16 16 | 006666 | (6 bytes)   |         .byte 72, 65, 66, 69, 6c, 6c 
5234:789 | DONE dir | em 16 16 |        |             |                 72 65 66 69 6c 6c        --  r e f i l l
5234:790 | DONE wsp | em 16 16 |        |             |
5234:791 | DONE lbl | em 16 16 | 00666c |             | nt_parse-name                        
5234:792 | DONE dir | em 16 16 | 00666c | (2 bytes)   |         .byte &10, 0                 
5234:792 | DONE dir | em 16 16 |        |             |                 0a 00                    --  
 .
5234:793 | DONE dir | em 16 16 | 00666e | (6 bytes)   |         .word nt_refill, xt_parse-name, 005ba7 
5234:793 | DONE dir | em 16 16 |        |             |                 5e 66 43 5b a7 5b        --  ^ f C [ . [
5234:794 | DONE dir | em 16 16 | 006674 | (10 bytes)  |         .byte 70, 61, 72, 73, 65, 2d, 6e, 61, 6d, 65 
5234:794 | DONE dir | em 16 16 |        |             |                 70 61 72 73 65 2d 6e 61  --  p a r s e - n a
5234:794 | DONE dir | em 16 16 |        |             |                 6d 65                    --  m e
5234:795 | DONE wsp | em 16 16 |        |             |
5234:796 | DONE lbl | em 16 16 | 00667e |             | nt_source-id                         
5234:797 | DONE dir | em 16 16 | 00667e | (2 bytes)   |         .byte 9, { NC }              
5234:797 | DONE dir | em 16 16 |        |             |                 09 01                    --  	 .
5234:798 | DONE dir | em 16 16 | 006680 | (6 bytes)   |         .word nt_parse-name, xt_source-id, 005d71 
5234:798 | DONE dir | em 16 16 |        |             |                 6c 66 6b 5d 71 5d        --  l f k ] q ]
5234:799 | DONE dir | em 16 16 | 006686 | (9 bytes)   |         .byte 73, 6f, 75, 72, 63, 65, 2d, 69, 64 
5234:799 | DONE dir | em 16 16 |        |             |                 73 6f 75 72 63 65 2d 69  --  s o u r c e - i
5234:799 | DONE dir | em 16 16 |        |             |                 64                       --  d
5234:800 | DONE wsp | em 16 16 |        |             |
5234:801 | DONE lbl | em 16 16 | 00668f |             | nt_comma                             
5234:802 | DONE dir | em 16 16 | 00668f | (2 bytes)   |         .byte 1, { NC }              
5234:802 | DONE dir | em 16 16 |        |             |                 01 01                    --  . .
5234:803 | DONE dir | em 16 16 | 006691 | (6 bytes)   |         .word nt_source-id, xt_comma, 00524a 
5234:803 | DONE dir | em 16 16 |        |             |                 7e 66 3f 52 4a 52        --  ~ f ? R J R
5234:804 | DONE dir | em 16 16 | 006697 | (1 bytes)   |         .byte 2c                     
5234:804 | DONE dir | em 16 16 |        |             |                 2c                       --  ,
5234:805 | DONE wsp | em 16 16 |        |             |
5234:806 | DONE lbl | em 16 16 | 006698 |             | nt_accept                            
5234:807 | DONE dir | em 16 16 | 006698 | (2 bytes)   |         .byte 6, 00                  TODO check flags
5234:807 | DONE dir | em 16 16 |        |             |                 06 00                    --  . .
5234:808 | DONE dir | em 16 16 | 00669a | (6 bytes)   |         .word nt_comma, xt_accept, 0054e0 
5234:808 | DONE dir | em 16 16 |        |             |                 8f 66 55 54 e0 54        --  . f U T . T
5234:809 | DONE dir | em 16 16 | 0066a0 | (6 bytes)   |         .byte 61, 63, 63, 65, 70, 74 
5234:809 | DONE dir | em 16 16 |        |             |                 61 63 63 65 70 74        --  a c c e p t
5234:810 | DONE wsp | em 16 16 |        |             |
5234:811 | DONE lbl | em 16 16 | 0066a6 |             | nt_key                               
5234:812 | DONE dir | em 16 16 | 0066a6 | (2 bytes)   |         .byte 3, { NC }              
5234:812 | DONE dir | em 16 16 |        |             |                 03 01                    --  . .
5234:813 | DONE dir | em 16 16 | 0066a8 | (6 bytes)   |         .word nt_accept, xt_key, 005941 
5234:813 | DONE dir | em 16 16 |        |             |                 98 66 32 59 41 59        --  . f 2 Y A Y
5234:814 | DONE dir | em 16 16 | 0066ae | (3 bytes)   |         .byte 6b, 65, 79             
5234:814 | DONE dir | em 16 16 |        |             |                 6b 65 79                 --  k e y
5234:815 | DONE wsp | em 16 16 |        |             |
5234:816 | DONE lbl | em 16 16 | 0066b1 |             | nt_backslash                         
5234:817 | DONE dir | em 16 16 | 0066b1 | (2 bytes)   |         .byte 1, { NC }              
5234:817 | DONE dir | em 16 16 |        |             |                 01 01                    --  . .
5234:818 | DONE dir | em 16 16 | 0066b3 | (6 bytes)   |         .word nt_key, xt_backslash, 0052f3 
5234:818 | DONE dir | em 16 16 |        |             |                 a6 66 ef 52 f3 52        --  . f . R . R
5234:819 | DONE dir | em 16 16 | 0066b9 | (1 bytes)   |         .byte 5c                     
5234:819 | DONE dir | em 16 16 |        |             |                 5c                       --  \
5234:820 | DONE wsp | em 16 16 |        |             |
5234:821 | DONE lbl | em 16 16 | 0066ba |             | nt_qdup                              
5234:822 | DONE dir | em 16 16 | 0066ba | (2 bytes)   |         .byte 4, { NC }              
5234:822 | DONE dir | em 16 16 |        |             |                 04 01                    --  . .
5234:823 | DONE dir | em 16 16 | 0066bc | (6 bytes)   |         .word nt_backslash, xt_qdup, 0052c7 
5234:823 | DONE dir | em 16 16 |        |             |                 b1 66 c0 52 c7 52        --  . f . R . R
5234:824 | DONE dir | em 16 16 | 0066c2 | (4 bytes)   |         .byte 3f, 64, 75, 70         
5234:824 | DONE dir | em 16 16 |        |             |                 3f 64 75 70              --  ? d u p
5234:825 | DONE wsp | em 16 16 |        |             |
5234:826 | DONE lbl | em 16 16 | 0066c6 |             | nt_tuck                              
5234:827 | DONE dir | em 16 16 | 0066c6 | (2 bytes)   |         .byte 4, { NC }              
5234:827 | DONE dir | em 16 16 |        |             |                 04 01                    --  . .
5234:828 | DONE dir | em 16 16 | 0066c8 | (6 bytes)   |         .word nt_qdup, xt_tuck, 005db5 
5234:828 | DONE dir | em 16 16 |        |             |                 ba 66 ad 5d b5 5d        --  . f . ] . ]
5234:829 | DONE dir | em 16 16 | 0066ce | (4 bytes)   |         .byte 74, 75, 63, 6b         
5234:829 | DONE dir | em 16 16 |        |             |                 74 75 63 6b              --  t u c k
5234:830 | DONE wsp | em 16 16 |        |             |
5234:831 | DONE lbl | em 16 16 | 0066d2 |             | nt_nip                               
5234:832 | DONE dir | em 16 16 | 0066d2 | (2 bytes)   |         .byte 3, { NC }              
5234:832 | DONE dir | em 16 16 |        |             |                 03 01                    --  . .
5234:833 | DONE dir | em 16 16 | 0066d4 | (6 bytes)   |         .word nt_tuck, xt_nip, 005a8f 
5234:833 | DONE dir | em 16 16 |        |             |                 c6 66 8d 5a 8f 5a        --  . f . Z . Z
5234:834 | DONE dir | em 16 16 | 0066da | (3 bytes)   |         .byte 6e, 69, 70             
5234:834 | DONE dir | em 16 16 |        |             |                 6e 69 70                 --  n i p
5234:835 | DONE wsp | em 16 16 |        |             |
5234:836 | DONE lbl | em 16 16 | 0066dd |             | nt_mrot                              
5234:837 | DONE dir | em 16 16 | 0066dd | (2 bytes)   |         .byte 4, { NC }              
5234:837 | DONE dir | em 16 16 |        |             |                 04 01                    --  . .
5234:838 | DONE dir | em 16 16 | 0066df | (6 bytes)   |         .word nt_nip, xt_mrot, 00530f 
5234:838 | DONE dir | em 16 16 |        |             |                 d2 66 07 53 0f 53        --  . f . S . S
5234:839 | DONE dir | em 16 16 | 0066e5 | (4 bytes)   |         .byte 2d, 72, 6f, 74         
5234:839 | DONE dir | em 16 16 |        |             |                 2d 72 6f 74              --  - r o t
5234:840 | DONE wsp | em 16 16 |        |             |
5234:841 | DONE lbl | em 16 16 | 0066e9 |             | nt_rot                               
5234:842 | DONE dir | em 16 16 | 0066e9 | (2 bytes)   |         .byte 3, { NC }              
5234:842 | DONE dir | em 16 16 |        |             |                 03 01                    --  . .
5234:843 | DONE dir | em 16 16 | 0066eb | (6 bytes)   |         .word nt_mrot, xt_rot, 005c3a 
5234:843 | DONE dir | em 16 16 |        |             |                 dd 66 32 5c 3a 5c        --  . f 2 \ : \
5234:844 | DONE dir | em 16 16 | 0066f1 | (3 bytes)   |         .byte 72, 6f, 74             
5234:844 | DONE dir | em 16 16 |        |             |                 72 6f 74                 --  r o t
5234:845 | DONE wsp | em 16 16 |        |             |
5234:846 | DONE lbl | em 16 16 | 0066f4 |             | nt_2over                             
5234:847 | DONE dir | em 16 16 | 0066f4 | (2 bytes)   |         .byte 5, { NC }              
5234:847 | DONE dir | em 16 16 |        |             |                 05 01                    --  . .
5234:848 | DONE dir | em 16 16 | 0066f6 | (6 bytes)   |         .word nt_rot, xt_2over, 0053cf 
5234:848 | DONE dir | em 16 16 |        |             |                 e9 66 c3 53 cf 53        --  . f . S . S
5234:849 | DONE dir | em 16 16 | 0066fc | (5 bytes)   |         .byte 32, 6f, 76, 65, 72     
5234:849 | DONE dir | em 16 16 |        |             |                 32 6f 76 65 72           --  2 o v e r
5234:850 | DONE wsp | em 16 16 |        |             |
5234:851 | DONE lbl | em 16 16 | 006701 |             | nt_2swap                             
5234:852 | DONE dir | em 16 16 | 006701 | (2 bytes)   |         .byte 5, { NC }              
5234:852 | DONE dir | em 16 16 |        |             |                 05 01                    --  . .
5234:853 | DONE dir | em 16 16 | 006703 | (6 bytes)   |         .word nt_2over, xt_2swap, 0053ff 
5234:853 | DONE dir | em 16 16 |        |             |                 f4 66 ef 53 ff 53        --  . f . S . S
5234:854 | DONE dir | em 16 16 | 006709 | (5 bytes)   |         .byte 32, 73, 77, 61, 70     
5234:854 | DONE dir | em 16 16 |        |             |                 32 73 77 61 70           --  2 s w a p
5234:855 | DONE wsp | em 16 16 |        |             |
5234:856 | DONE lbl | em 16 16 | 00670e |             | nt_execute                           
5234:857 | DONE dir | em 16 16 | 00670e | (2 bytes)   |         .byte 7, { NC }              
5234:857 | DONE dir | em 16 16 |        |             |                 07 01                    --  . .
5234:858 | DONE dir | em 16 16 | 006710 | (6 bytes)   |         .word nt_2swap, xt_execute, 005856 
5234:858 | DONE dir | em 16 16 |        |             |                 01 67 4c 58 56 58        --  . g L X V X
5234:859 | DONE dir | em 16 16 | 006716 | (7 bytes)   |         .byte 65, 78, 65, 63, 75, 74, 65 
5234:859 | DONE dir | em 16 16 |        |             |                 65 78 65 63 75 74 65     --  e x e c u t e
5234:860 | DONE wsp | em 16 16 |        |             |
5234:861 | DONE lbl | em 16 16 | 00671d |             | nt_here                              
5234:862 | DONE dir | em 16 16 | 00671d | (2 bytes)   |         .byte 4, { NC }              
5234:862 | DONE dir | em 16 16 |        |             |                 04 01                    --  . .
5234:863 | DONE dir | em 16 16 | 00671f | (6 bytes)   |         .word nt_execute, xt_here, 005982 
5234:863 | DONE dir | em 16 16 |        |             |                 0e 67 7c 59 82 59        --  . g | Y . Y
5234:864 | DONE dir | em 16 16 | 006725 | (4 bytes)   |         .byte 68, 65, 72, 65         
5234:864 | DONE dir | em 16 16 |        |             |                 68 65 72 65              --  h e r e
5234:865 | DONE wsp | em 16 16 |        |             |
5234:866 | DONE lbl | em 16 16 | 006729 |             | nt_2drop                             
5234:867 | DONE dir | em 16 16 | 006729 | (2 bytes)   |         .byte 5, { NC }              
5234:867 | DONE dir | em 16 16 |        |             |                 05 01                    --  . .
5234:868 | DONE dir | em 16 16 | 00672b | (6 bytes)   |         .word nt_here, xt_2drop, 0053b7 
5234:868 | DONE dir | em 16 16 |        |             |                 1d 67 b1 53 b7 53        --  . g . S . S
5234:869 | DONE dir | em 16 16 | 006731 | (5 bytes)   |         .byte 32, 64, 72, 6f, 70     
5234:869 | DONE dir | em 16 16 |        |             |                 32 64 72 6f 70           --  2 d r o p
5234:870 | DONE wsp | em 16 16 |        |             |
5234:871 | DONE lbl | em 16 16 | 006736 |             | nt_rfetch                            
5234:872 | DONE dir | em 16 16 | 006736 | (2 bytes)   |         .byte 2, 0                   we follow Gforth in making this not CO
5234:872 | DONE dir | em 16 16 |        |             |                 02 00                    --  . .
5234:873 | DONE dir | em 16 16 | 006738 | (6 bytes)   |         .word nt_2drop, xt_rfetch, 005c01 
5234:873 | DONE dir | em 16 16 |        |             |                 29 67 f9 5b 01 5c        --  ) g . [ . \
5234:874 | DONE dir | em 16 16 | 00673e | (2 bytes)   |         .byte 72, 40                 
5234:874 | DONE dir | em 16 16 |        |             |                 72 40                    --  r @
5234:875 | DONE wsp | em 16 16 |        |             |
5234:876 | DONE lbl | em 16 16 | 006740 |             | nt_fromr                             
5234:877 | DONE dir | em 16 16 | 006740 | (2 bytes)   |         .byte 2, { CO }              
5234:877 | DONE dir | em 16 16 |        |             |                 02 04                    --  . .
5234:878 | DONE dir | em 16 16 | 006742 | (6 bytes)   |         .word nt_rfetch, xt_fromr, 005c09 
5234:878 | DONE dir | em 16 16 |        |             |                 36 67 02 5c 09 5c        --  6 g . \ 	 \
5234:879 | DONE dir | em 16 16 | 006748 | (2 bytes)   |         .byte 72, 3e                 
5234:879 | DONE dir | em 16 16 |        |             |                 72 3e                    --  r >
5234:880 | DONE wsp | em 16 16 |        |             |
5234:881 | DONE lbl | em 16 16 | 00674a |             | nt_tor                               
5234:882 | DONE dir | em 16 16 | 00674a | (2 bytes)   |         .byte 2, { CO }              
5234:882 | DONE dir | em 16 16 |        |             |                 02 04                    --  . .
5234:883 | DONE dir | em 16 16 | 00674c | (6 bytes)   |         .word nt_fromr, xt_tor, 0051c2 
5234:883 | DONE dir | em 16 16 |        |             |                 40 67 bb 51 c2 51        --  @ g . Q . Q
5234:884 | DONE dir | em 16 16 | 006752 | (2 bytes)   |         .byte 3e, 72                 
5234:884 | DONE dir | em 16 16 |        |             |                 3e 72                    --  > r
5234:885 | DONE wsp | em 16 16 |        |             |
5234:886 | DONE lbl | em 16 16 | 006754 |             | nt_digitq                            
5234:887 | DONE dir | em 16 16 | 006754 | (2 bytes)   |         .byte 6, { NC }              
5234:887 | DONE dir | em 16 16 |        |             |                 06 01                    --  . .
5234:888 | DONE dir | em 16 16 | 006756 | (6 bytes)   |         .word nt_tor, xt_digitq, 00573f 
5234:888 | DONE dir | em 16 16 |        |             |                 4a 67 04 57 3f 57        --  J g . W ? W
5234:889 | DONE dir | em 16 16 | 00675c | (6 bytes)   |         .byte 64, 69, 67, 69, 74, 3f 
5234:889 | DONE dir | em 16 16 |        |             |                 64 69 67 69 74 3f        --  d i g i t ?
5234:890 | DONE wsp | em 16 16 |        |             |
5234:891 | DONE lbl | em 16 16 | 006762 |             | nt_bounds                            
5234:892 | DONE dir | em 16 16 | 006762 | (2 bytes)   |         .byte 6, { NC }              
5234:892 | DONE dir | em 16 16 |        |             |                 06 01                    --  . .
5234:893 | DONE dir | em 16 16 | 006764 | (6 bytes)   |         .word nt_digitq, xt_bounds, 005579 
5234:893 | DONE dir | em 16 16 |        |             |                 54 67 70 55 79 55        --  T g p U y U
5234:894 | DONE dir | em 16 16 | 00676a | (6 bytes)   |         .byte 62, 6f, 75, 6e, 64, 73 
5234:894 | DONE dir | em 16 16 |        |             |                 62 6f 75 6e 64 73        --  b o u n d s
5234:895 | DONE wsp | em 16 16 |        |             |
5234:896 | DONE lbl | em 16 16 | 006770 |             | nt_over                              
5234:897 | DONE dir | em 16 16 | 006770 | (2 bytes)   |         .byte 4, { NC }              
5234:897 | DONE dir | em 16 16 |        |             |                 04 01                    --  . .
5234:898 | DONE dir | em 16 16 | 006772 | (6 bytes)   |         .word nt_bounds, xt_over, 005b29 
5234:898 | DONE dir | em 16 16 |        |             |                 62 67 23 5b 29 5b        --  b g # [ ) [
5234:899 | DONE dir | em 16 16 | 006778 | (4 bytes)   |         .byte 6f, 76, 65, 72         
5234:899 | DONE dir | em 16 16 |        |             |                 6f 76 65 72              --  o v e r
5234:900 | DONE wsp | em 16 16 |        |             |
5234:901 | DONE lbl | em 16 16 | 00677c |             | nt_fetch                             
5234:902 | DONE dir | em 16 16 | 00677c | (2 bytes)   |         .byte 1, { NC }              
5234:902 | DONE dir | em 16 16 |        |             |                 01 01                    --  . .
5234:903 | DONE dir | em 16 16 | 00677e | (6 bytes)   |         .word nt_over, xt_fetch, 0052d8 
5234:903 | DONE dir | em 16 16 |        |             |                 70 67 d4 52 d8 52        --  p g . R . R
5234:904 | DONE dir | em 16 16 | 006784 | (1 bytes)   |         .byte 40                     
5234:904 | DONE dir | em 16 16 |        |             |                 40                       --  @
5234:905 | DONE wsp | em 16 16 |        |             |
5234:906 | DONE lbl | em 16 16 | 006785 |             | nt_store                             
5234:907 | DONE dir | em 16 16 | 006785 | (2 bytes)   |         .byte 1, { NC }              
5234:907 | DONE dir | em 16 16 |        |             |                 01 01                    --  . .
5234:908 | DONE dir | em 16 16 | 006787 | (6 bytes)   |         .word nt_fetch, xt_store, 0052d3 
5234:908 | DONE dir | em 16 16 |        |             |                 7c 67 c8 52 d3 52        --  | g . R . R
5234:909 | DONE dir | em 16 16 | 00678d | (1 bytes)   |         .byte 21                     
5234:909 | DONE dir | em 16 16 |        |             |                 21                       --  !
5234:910 | DONE wsp | em 16 16 |        |             |
5234:911 | DONE lbl | em 16 16 | 00678e |             | nt_swap                              
5234:912 | DONE dir | em 16 16 | 00678e | (2 bytes)   |         .byte 4, { NC }              
5234:912 | DONE dir | em 16 16 |        |             |                 04 01                    --  . .
5234:913 | DONE dir | em 16 16 | 006790 | (6 bytes)   |         .word nt_store, xt_swap, 005d9a 
5234:913 | DONE dir | em 16 16 |        |             |                 85 67 95 5d 9a 5d        --  . g . ] . ]
5234:914 | DONE dir | em 16 16 | 006796 | (4 bytes)   |         .byte 73, 77, 61, 70         
5234:914 | DONE dir | em 16 16 |        |             |                 73 77 61 70              --  s w a p
5234:915 | DONE wsp | em 16 16 |        |             |
5234:916 | DONE lbl | em 16 16 | 00679a |             | nt_dup                               
5234:917 | DONE dir | em 16 16 | 00679a | (2 bytes)   |         .byte 3, { NC }              
5234:917 | DONE dir | em 16 16 |        |             |                 03 01                    --  . .
5234:918 | DONE dir | em 16 16 | 00679c | (6 bytes)   |         .word nt_swap, xt_dup, 0057ef 
5234:918 | DONE dir | em 16 16 |        |             |                 8e 67 eb 57 ef 57        --  . g . W . W
5234:919 | DONE dir | em 16 16 | 0067a2 | (3 bytes)   |         .byte 64, 75, 70             
5234:919 | DONE dir | em 16 16 |        |             |                 64 75 70                 --  d u p
5234:920 | DONE wsp | em 16 16 |        |             |
5234:921 | DONE cmt | em 16 16 |        |             | ; DROP is always the first entry in dictionary
5234:922 | DONE lbl | em 16 16 | 0067a5 |             | nt_drop                              
5234:923 | DONE dir | em 16 16 | 0067a5 | (2 bytes)   |         .byte 4, { NC }              
5234:923 | DONE dir | em 16 16 |        |             |                 04 01                    --  . .
5234:924 | DONE dir | em 16 16 | 0067a7 | (6 bytes)   |         .word nt_dup, xt_drop, 0057c3 
5234:924 | DONE dir | em 16 16 |        |             |                 9a 67 bf 57 c3 57        --  . g . W . W
5234:925 | DONE dir | em 16 16 | 0067ad | (4 bytes)   |         .byte 64, 72, 6f, 70         
5234:925 | DONE dir | em 16 16 |        |             |                 64 72 6f 70              --  d r o p
5234:926 | DONE wsp | em 16 16 |        |             |
5234:927 | DONE cmt | em 16 16 |        |             | ; END
5235:000 | DONE wsp | em 16 16 |        |             |
5236:000 | DONE cmt | em 16 16 |        |             | ; ===================================================================
5237:000 | DONE cmt | em 16 16 |        |             | ; CODE FIELD ROUTINES
5238:000 | DONE wsp | em 16 16 |        |             |
5239:000 | DONE cmt | em 16 16 |        |             | ; -------------------------------------------------------------------
5240:000 | DONE cmt | em 16 16 |        |             | ; DOCONST
5241:000 | DONE cmt | em 16 16 |        |             | ; Execute a constant: Push the data in the first two byte of the Data Field onto
5242:000 | DONE cmt | em 16 16 |        |             | ; the stack
5243:000 | DONE lbl | em 16 16 | 0067b1 |             | doconst                              
5244:000 | DONE dir | em 16 16 |        |             |         .!a16                        
5245:000 | DONE dir | em 16 16 |        |             |         .!xy16                       
5246:000 | DONE ins | em 16 16 | 0067b1 | ca          |                 dex                  make room on Data Stack
5247:000 | DONE ins | em 16 16 | 0067b2 | ca          |                 dex                  
5248:000 | DONE ins | em 16 16 | 0067b3 | 94 00       |                 sty.dx 00            
5249:000 | DONE wsp | em 16 16 |        |             |
5250:000 | DONE cmt | em 16 16 |        |             |                 ; The value we need is stored two bytes after the JSR return
5251:000 | DONE cmt | em 16 16 |        |             |                 ; address, which in turn is what is on top of the Return Stack
5252:000 | DONE ins | em 16 16 | 0067b5 | 68          |                 pla                  get the return address
5253:000 | DONE ins | em 16 16 | 0067b6 | 85 1c       |                 sta.d 00001c         
5254:000 | DONE wsp | em 16 16 |        |             |
5255:000 | DONE cmt | em 16 16 |        |             |                 ; start Y as index off with 1 instead of zero because of 65816's
5256:000 | DONE cmt | em 16 16 |        |             |                 ; address handling
5257:000 | DONE ins | em 16 16 | 0067b8 | a0 01 00    |                 ldy.# 0001           
5258:000 | DONE ins | em 16 16 | 0067bb | b1 1c       |                 lda.diy 00001c       LDA (TMP1),Y
5259:000 | DONE ins | em 16 16 | 0067bd | a8          |                 tay                  
5260:000 | DONE wsp | em 16 16 |        |             |
5261:000 | DONE ins | em 16 16 | 0067be | 60          |                 rts                  takes us to original caller
5262:000 | DONE wsp | em 16 16 |        |             |
5263:000 | DONE wsp | em 16 16 |        |             |
5264:000 | DONE cmt | em 16 16 |        |             | ; -------------------------------------------------------------------
5265:000 | DONE cmt | em 16 16 |        |             | ; DODEFER
5266:000 | DONE cmt | em 16 16 |        |             | ; Execute a DEFER statement at runtime: Execute the address we find after the
5267:000 | DONE cmt | em 16 16 |        |             | ; caller in the Data Field
5268:000 | DONE lbl | em 16 16 | 0067bf |             | dodefer                              
5269:000 | DONE cmt | em 16 16 |        |             |                 ; the xt we need is stored in the two bytes after the JSR return
5270:000 | DONE cmt | em 16 16 |        |             |                 ; address, which is what is on top of the Retun Stack. So all we
5271:000 | DONE cmt | em 16 16 |        |             |                 ; have to do is replace our return jump with what we find there
5272:000 | DONE ins | em 16 16 | 0067bf | 68          |                 pla                  this is the address where we find the xt ...
5273:000 | DONE ins | em 16 16 | 0067c0 | 1a          |                 inc.a                ... except one byte later
5274:000 | DONE ins | em 16 16 | 0067c1 | 85 1c       |                 sta.d 00001c         
5275:000 | DONE ins | em 16 16 | 0067c3 | b2 1c       |                 lda.di 00001c        LDA (TMP1)
5276:000 | DONE ins | em 16 16 | 0067c5 | 3a          |                 dec.a                Now we need to move one byte back
5277:000 | DONE ins | em 16 16 | 0067c6 | 48          |                 pha                  Return new address
5278:000 | DONE wsp | em 16 16 |        |             |
5279:000 | DONE ins | em 16 16 | 0067c7 | 60          |                 rts                  This is actually a jump to the new target
5280:000 | DONE wsp | em 16 16 |        |             |
5281:000 | DONE lbl | em 16 16 | 0067c8 |             | defer_error                          
5282:000 | DONE cmt | em 16 16 |        |             |                 ; if the defer has not been defined with an IS word, we land
5283:000 | DONE cmt | em 16 16 |        |             |                 ; here by default
5284:000 | DONE ins | em 16 16 | 0067c8 | a9 04 6f    |                 lda.# 006f04         
5285:000 | DONE ins | em 16 16 | 0067cb | 4c 67 68    |                 jmp 006867           
5286:000 | DONE wsp | em 16 16 |        |             |
5287:000 | DONE wsp | em 16 16 |        |             |
5288:000 | DONE cmt | em 16 16 |        |             | ; -------------------------------------------------------------------
5289:000 | DONE cmt | em 16 16 |        |             | ; DODOES
5290:000 | DONE cmt | em 16 16 |        |             | ; Used in combination with DOES>'s runtime portion to actually do the work of
5291:000 | DONE cmt | em 16 16 |        |             | ; the new word. See DOES> and docs/create-does.txt for details. Uses tmp3
5292:000 | DONE lbl | em 16 16 | 0067ce |             | dodoes                               
5293:000 | DONE cmt | em 16 16 |        |             |                 ; Assumes the address of the CFA of the original defining word
5294:000 | DONE cmt | em 16 16 |        |             |                 ; (say, CONSTANT) is on the top of the Return Stack. Save it for
5295:000 | DONE cmt | em 16 16 |        |             |                 ; a later jump, adding one byte because of the way the 65816
5296:000 | DONE cmt | em 16 16 |        |             |                 ; works
5297:000 | DONE ins | em 16 16 | 0067ce | 68          |                 pla                  
5298:000 | DONE ins | em 16 16 | 0067cf | 1a          |                 inc.a                
5299:000 | DONE ins | em 16 16 | 0067d0 | 85 20       |                 sta.d 000020         
5300:000 | DONE wsp | em 16 16 |        |             |
5301:000 | DONE cmt | em 16 16 |        |             |                 ; Next on the Return Stack should be the address of the PFA of
5302:000 | DONE cmt | em 16 16 |        |             |                 ; the calling defined word (say, the name of whatever constant we
5303:000 | DONE cmt | em 16 16 |        |             |                 ; just defined). Move this to the Data Stack, again adding one.
5304:000 | DONE ins | em 16 16 | 0067d2 | ca          |                 dex                  
5305:000 | DONE ins | em 16 16 | 0067d3 | ca          |                 dex                  
5306:000 | DONE ins | em 16 16 | 0067d4 | 94 00       |                 sty.dx 00            
5307:000 | DONE wsp | em 16 16 |        |             |
5308:000 | DONE ins | em 16 16 | 0067d6 | 7a          |                 ply                  
5309:000 | DONE ins | em 16 16 | 0067d7 | c8          |                 iny                  
5310:000 | DONE wsp | em 16 16 |        |             |
5311:000 | DONE cmt | em 16 16 |        |             |                 ; This leaves the return address from the original main routine
5312:000 | DONE cmt | em 16 16 |        |             |                 ; on top of the Return Stack. We leave that untouched and jump
5313:000 | DONE cmt | em 16 16 |        |             |                 ; to the special code of the defining word. It's RTS instruction
5314:000 | DONE cmt | em 16 16 |        |             |                 ; will take us back to the main routine
5315:000 | DONE ins | em 16 16 | 0067d8 | 6c 20 00    |                 jmp.i 000020         JMP (TMP3)
5316:000 | DONE wsp | em 16 16 |        |             |
5317:000 | DONE wsp | em 16 16 |        |             |
5318:000 | DONE cmt | em 16 16 |        |             | ; -------------------------------------------------------------------
5319:000 | DONE cmt | em 16 16 |        |             | ; DOVAR
5320:000 | DONE cmt | em 16 16 |        |             | ; Execute a variable: Push the address of the first bytes of the Data Field onto
5321:000 | DONE cmt | em 16 16 |        |             | ; the stack. This is called with JSR so we can pick up the address of the
5322:000 | DONE cmt | em 16 16 |        |             | ; calling variable off the 65816's Return Stack. The final RTS takes us to the
5323:000 | DONE cmt | em 16 16 |        |             | ; original caller of the routine that in turn called DOVAR. This is the default
5324:000 | DONE cmt | em 16 16 |        |             | ; routine installed with CREATE
5325:000 | DONE lbl | em 16 16 | 0067db |             | dovar                                
5326:000 | DONE dir | em 16 16 |        |             |         .!a16                        
5327:000 | DONE dir | em 16 16 |        |             |         .!xy16                       
5328:000 | DONE ins | em 16 16 | 0067db | ca          |                 dex                  make room on Data Stack
5329:000 | DONE ins | em 16 16 | 0067dc | ca          |                 dex                  
5330:000 | DONE ins | em 16 16 | 0067dd | 94 00       |                 sty.dx 00            
5331:000 | DONE wsp | em 16 16 |        |             |
5332:000 | DONE cmt | em 16 16 |        |             |                 ; The address we need is stored in the two bytes after the JSR
5333:000 | DONE cmt | em 16 16 |        |             |                 ; return address, which in turn is what is on top of the Return
5334:000 | DONE cmt | em 16 16 |        |             |                 ; Stack
5335:000 | DONE ins | em 16 16 | 0067df | 7a          |                 ply                  value is now TOS
5336:000 | DONE ins | em 16 16 | 0067e0 | c8          |                 iny                  add one because of 65816's address handling
5337:000 | DONE wsp | em 16 16 |        |             |
5338:000 | DONE ins | em 16 16 | 0067e1 | 60          |                 rts                  takes us to original caller
5339:000 | DONE wsp | em 16 16 |        |             |
5340:000 | DONE wsp | em 16 16 |        |             |
5341:000 | DONE cmt | em 16 16 |        |             | ; ===================================================================
5342:000 | DONE cmt | em 16 16 |        |             | ; LOW LEVEL HELPER FUNCTIONS
5343:000 | DONE wsp | em 16 16 |        |             |
5344:000 | DONE wsp | em 16 16 |        |             |
5345:000 | DONE cmt | em 16 16 |        |             | ; -------------------------------------------------------------------
5346:000 | DONE cmt | em 16 16 |        |             | ; INTERPRET
5347:000 | DONE cmt | em 16 16 |        |             | ; Core routine for interpreter called by EVALUATE and QUIT. We process one line
5348:000 | DONE cmt | em 16 16 |        |             | ; only. Assumes that address of name is in cib and length of whole input
5349:000 | DONE cmt | em 16 16 |        |             | ; string is in ciblen
5350:000 | DONE lbl | em 16 16 | 0067e2 |             | interpret                            
5351:000 | DONE lbl | em 16 16 | 0067e2 |             | interpret_loop                       
5352:000 | DONE dir | em 16 16 |        |             |         .!a16                        
5353:000 | DONE dir | em 16 16 |        |             |         .!xy16                       
5354:000 | DONE cmt | em 16 16 |        |             |                 ; Normally we would use PARSE here with the SPACE character as
5355:000 | DONE cmt | em 16 16 |        |             |                 ; a parameter (PARSE replaces WORD in modern Forths). However,
5356:000 | DONE cmt | em 16 16 |        |             |                 ; Gforth's PARSE-NAME makes more sense as it uses spaces as
5357:000 | DONE cmt | em 16 16 |        |             |                 ; delimiters per default and skips any leading spaces, which
5358:000 | DONE cmt | em 16 16 |        |             |                 ; PARSE doesn't
5359:000 | DONE ins | em 16 16 | 0067e2 | 20 43 5b    |                 jsr 005b43           ( "string" -- addr u )
5360:000 | DONE wsp | em 16 16 |        |             |
5361:000 | DONE cmt | em 16 16 |        |             |                 ; If PARSE-NAME returns 0 (empty line), no characters were left
5362:000 | DONE cmt | em 16 16 |        |             |                 ; in the line and we need to go get a new line
5363:000 | DONE ins | em 16 16 | 0067e5 | 98          |                 tya                  force flag check
5364:000 | DONE ins | em 16 16 | 0067e6 | f0 52       |                 beq 00683a           
5365:000 | DONE wsp | em 16 16 |        |             |
5366:000 | DONE cmt | em 16 16 |        |             |                 ; Go to FIND-NAME to see if this is a word we know. We have to
5367:000 | DONE cmt | em 16 16 |        |             |                 ; make a copy of the address in case it isn't a word we know and
5368:000 | DONE cmt | em 16 16 |        |             |                 ; we have to go see if it is a number
5369:000 | DONE ins | em 16 16 | 0067e8 | 20 b8 53    |                 jsr 0053b8           TODO convert this to assembler
5370:000 | DONE ins | em 16 16 | 0067eb | 20 87 58    |                 jsr 005887           ( addr u -- nt | 0 )
5371:000 | DONE wsp | em 16 16 |        |             |
5372:000 | DONE cmt | em 16 16 |        |             |                 ; a zero signals that we didn't find a word in the Dictionary
5373:000 | DONE ins | em 16 16 | 0067ee | 98          |                 tya                  
5374:000 | DONE ins | em 16 16 | 0067ef | d0 15       |                 bne 006806           
5375:000 | DONE wsp | em 16 16 |        |             |
5376:000 | DONE cmt | em 16 16 |        |             |                 ; We didn't get any nt we know of, so let's see if this is
5377:000 | DONE cmt | em 16 16 |        |             |                 ; a number.
5378:000 | DONE ins | em 16 16 | 0067f1 | 20 bf 57    |                 jsr 0057bf           TODO convert this to assembler
5379:000 | DONE wsp | em 16 16 |        |             |
5380:000 | DONE wsp | em 16 16 |        |             |
5381:000 | DONE cmt | em 16 16 |        |             |                 ; If the number conversion doesn't work, NUMBER will do the
5382:000 | DONE cmt | em 16 16 |        |             |                 ; complaining for us
5383:000 | DONE ins | em 16 16 | 0067f4 | 20 90 5a    |                 jsr 005a90           ( addr u -- u | d )
5384:000 | DONE wsp | em 16 16 |        |             |
5385:000 | DONE cmt | em 16 16 |        |             |                 ; If we're interpreting, we're done
5386:000 | DONE ins | em 16 16 | 0067f7 | a5 14       |                 lda.d 000014         
5387:000 | DONE ins | em 16 16 | 0067f9 | f0 e7       |                 beq 0067e2           
5388:000 | DONE wsp | em 16 16 |        |             |
5389:000 | DONE cmt | em 16 16 |        |             |                 ; We're compiling, so there is a bit more work. Note this
5390:000 | DONE cmt | em 16 16 |        |             |                 ; doesn't work with double-cell numbers, only single-cell
5391:000 | DONE ins | em 16 16 | 0067fb | f4 c1 59    |                 phe.# 0059c1         LITERAL runtime
5392:000 | DONE ins | em 16 16 | 0067fe | 20 46 68    |                 jsr 006846           
5393:000 | DONE wsp | em 16 16 |        |             |
5394:000 | DONE cmt | em 16 16 |        |             |                 ; compile our number
5395:000 | DONE cmt | em 16 16 |        |             |                 ; TODO convert this to assembler
5396:000 | DONE ins | em 16 16 | 006801 | 20 3f 52    |                 jsr 00523f           
5397:000 | DONE wsp | em 16 16 |        |             |
5398:000 | DONE cmt | em 16 16 |        |             |                 ; That was so much fun, let's do it again!
5399:000 | DONE ins | em 16 16 | 006804 | 80 dc       |                 bra 0067e2           
5400:000 | DONE wsp | em 16 16 |        |             |
5401:000 | DONE lbl | em 16 16 | 006806 |             | interpret_got_name_token             
5402:000 | DONE cmt | em 16 16 |        |             |                 ; We have a known word's nt as TOS. We're going to need its xt
5403:000 | DONE cmt | em 16 16 |        |             |                 ; though, which is four bytes father down.
5404:000 | DONE wsp | em 16 16 |        |             |
5405:000 | DONE cmt | em 16 16 |        |             |                 ; Arrive here with ( addr u nt ), so we NIP twice, which is
5406:000 | DONE cmt | em 16 16 |        |             |                 ; really fast if Y is TOS
5407:000 | DONE ins | em 16 16 | 006806 | e8          |                 inx                  
5408:000 | DONE ins | em 16 16 | 006807 | e8          |                 inx                  
5409:000 | DONE ins | em 16 16 | 006808 | e8          |                 inx                  
5410:000 | DONE ins | em 16 16 | 006809 | e8          |                 inx                  
5411:000 | DONE wsp | em 16 16 |        |             |
5412:000 | DONE cmt | em 16 16 |        |             |                 ; This is a quicker
5413:000 | DONE cmt | em 16 16 |        |             |                 ; version of NAME>INT. But first, save a version of nt for
5414:000 | DONE cmt | em 16 16 |        |             |                 ; error handling and compilation stuff.
5415:000 | DONE ins | em 16 16 | 00680a | 84 1a       |                 sty.d 00001a         
5416:000 | DONE ins | em 16 16 | 00680c | c8          |                 iny                  
5417:000 | DONE ins | em 16 16 | 00680d | c8          |                 iny                  
5418:000 | DONE ins | em 16 16 | 00680e | c8          |                 iny                  
5419:000 | DONE ins | em 16 16 | 00680f | c8          |                 iny                  
5420:000 | DONE ins | em 16 16 | 006810 | b9 00 00    |                 lda.y 0000           LDA $0000,Y
5421:000 | DONE ins | em 16 16 | 006813 | a8          |                 tay                  xt is TOS
5422:000 | DONE wsp | em 16 16 |        |             |
5423:000 | DONE cmt | em 16 16 |        |             |                 ; See if we are in interpret or compile mode
5424:000 | DONE ins | em 16 16 | 006814 | a5 14       |                 lda.d 000014         
5425:000 | DONE ins | em 16 16 | 006816 | d0 14       |                 bne 00682c           
5426:000 | DONE wsp | em 16 16 |        |             |
5427:000 | DONE cmt | em 16 16 |        |             |                 ; We are interpreting, so EXECUTE the xt that is TOS. First,
5428:000 | DONE cmt | em 16 16 |        |             |                 ; though, see if this isn't a compile-only word, which would be
5429:000 | DONE cmt | em 16 16 |        |             |                 ; illegal.
5430:000 | DONE ins | em 16 16 | 006818 | b2 1a       |                 lda.di 00001a        
5431:000 | DONE ins | em 16 16 | 00681a | eb          |                 xba                  flags are MSB
5432:000 | DONE ins | em 16 16 | 00681b | 29 04 00    |                 and.# CO             mask everything but Compile Only bit
5433:000 | DONE ins | em 16 16 | 00681e | f0 06       |                 beq 006826           
5434:000 | DONE wsp | em 16 16 |        |             |
5435:000 | DONE cmt | em 16 16 |        |             |                 ; TODO see if we can print offending word first
5436:000 | DONE ins | em 16 16 | 006820 | a9 e3 6e    |                 lda.# 006ee3         
5437:000 | DONE ins | em 16 16 | 006823 | 4c 67 68    |                 jmp 006867           
5438:000 | DONE wsp | em 16 16 |        |             |
5439:000 | DONE lbl | em 16 16 | 006826 |             | interpret_interpret                  
5440:000 | DONE cmt | em 16 16 |        |             |                 ; We JSR to EXECUTE instead of calling the xt directly because
5441:000 | DONE cmt | em 16 16 |        |             |                 ; the RTS of the word we're executing will bring us back here,
5442:000 | DONE cmt | em 16 16 |        |             |                 ; skipping EXECUTE completely during RTS. If we were to execute
5443:000 | DONE cmt | em 16 16 |        |             |                 ; xt directly, we have to fool around with the Return Stack
5444:000 | DONE cmt | em 16 16 |        |             |                 ; instead, which is actually slightly slower
5445:000 | DONE ins | em 16 16 | 006826 | 20 4c 58    |                 jsr 00584c           
5446:000 | DONE wsp | em 16 16 |        |             |
5447:000 | DONE cmt | em 16 16 |        |             |                 ; That's quite enough for this word, let's get the next one
5448:000 | DONE ins | em 16 16 | 006829 | 4c e2 67    |                 jmp 0067e2           
5449:000 | DONE wsp | em 16 16 |        |             |
5450:000 | DONE lbl | em 16 16 | 00682c |             | interpret_compile                    
5451:000 | DONE cmt | em 16 16 |        |             |                 ; We're compiling. However, we need to see if this is an
5452:000 | DONE cmt | em 16 16 |        |             |                 ; IMMEDIATE word, which would mean we execute it right now even
5453:000 | DONE cmt | em 16 16 |        |             |                 ; during compilation mode. Fortunately, we saved the nt so life
5454:000 | DONE cmt | em 16 16 |        |             |                 ; is easier
5455:000 | DONE ins | em 16 16 | 00682c | b2 1a       |                 lda.di 00001a        
5456:000 | DONE ins | em 16 16 | 00682e | eb          |                 xba                  flags are MSB
5457:000 | DONE ins | em 16 16 | 00682f | 29 02 00    |                 and.# IM             Mask all but IM bit
5458:000 | DONE ins | em 16 16 | 006832 | d0 f2       |                 bne 006826           IMMEDIATE word, execute right now
5459:000 | DONE wsp | em 16 16 |        |             |
5460:000 | DONE cmt | em 16 16 |        |             |                 ; Compile the xt into the Dictionary with COMPILE,
5461:000 | DONE ins | em 16 16 | 006834 | 20 21 56    |                 jsr 005621           
5462:000 | DONE ins | em 16 16 | 006837 | 4c e2 67    |                 jmp 0067e2           
5463:000 | DONE wsp | em 16 16 |        |             |
5464:000 | DONE lbl | em 16 16 | 00683a |             | interpret_line_done                  
5465:000 | DONE cmt | em 16 16 |        |             |                 ; drop stuff from PARSE_NAME
5466:000 | DONE ins | em 16 16 | 00683a | b4 02       |                 ldy.dx 02            
5467:000 | DONE ins | em 16 16 | 00683c | e8          |                 inx                  
5468:000 | DONE ins | em 16 16 | 00683d | e8          |                 inx                  
5469:000 | DONE ins | em 16 16 | 00683e | e8          |                 inx                  
5470:000 | DONE ins | em 16 16 | 00683f | e8          |                 inx                  
5471:000 | DONE wsp | em 16 16 |        |             |
5472:000 | DONE ins | em 16 16 | 006840 | 60          |                 rts                  
5473:000 | DONE wsp | em 16 16 |        |             |
5474:000 | DONE cmt | em 16 16 |        |             | ; -------------------------------------------------------------------
5475:000 | DONE cmt | em 16 16 |        |             | ; COMPILE WORDS, JUMPS AND SUBROUTINE JUMPS INTO CODE
5476:000 | DONE cmt | em 16 16 |        |             | ; These three routines compile instructions such as "jsr xt_words" into a word
5477:000 | DONE cmt | em 16 16 |        |             | ; at compile time so they are available at run time. Use by pushing the word or
5478:000 | DONE cmt | em 16 16 |        |             | ; address to be compiled on the Return Stack with
5479:000 | DONE cmt | em 16 16 |        |             | ;
5480:000 | DONE cmt | em 16 16 |        |             | ;       phe.# <WORD>    ; PEA <WORD>
5481:000 | DONE cmt | em 16 16 |        |             | ;
5482:000 | DONE cmt | em 16 16 |        |             | ; Followed by a jump to which ever versions we need. Words that use this routine
5483:000 | DONE cmt | em 16 16 |        |             | ; may not be natively compiled. We use "cmpl" as not to confuse these routines
5484:000 | DONE cmt | em 16 16 |        |             | ; with the COMPILE, word. This routine uses tmptos. Always call this with
5485:000 | DONE cmt | em 16 16 |        |             | ; a subroutine jump, which means no combining JSR/RTS to JMP.
5486:000 | DONE cmt | em 16 16 |        |             | ; TODO see if we need to add a JSR.L variant at some point
5487:000 | DONE wsp | em 16 16 |        |             |
5488:000 | DONE dir | em 16 16 |        |             |         .!a16                        paranoid
5489:000 | DONE lbl | em 16 16 | 006841 |             | cmpl_word                            
5490:000 | DONE ins | em 16 16 | 006841 | a9 00 00    |                 lda.# 0000           zero value as a flag, compile word only
5491:000 | DONE ins | em 16 16 | 006844 | 80 08       |                 bra 00684e           
5492:000 | DONE lbl | em 16 16 | 006846 |             | cmpl_subroutine                      
5493:000 | DONE ins | em 16 16 | 006846 | a9 20 00    |                 lda.# 0020           compile "JSR" opcode first
5494:000 | DONE ins | em 16 16 | 006849 | 80 03       |                 bra 00684e           
5495:000 | DONE lbl | em 16 16 | 00684b |             | cmpl_jump                            
5496:000 | DONE ins | em 16 16 | 00684b | a9 4c 00    |                 lda.# 004c           compile "JMP", fall through to cmpl_common
5497:000 | DONE lbl | em 16 16 | 00684e |             | cmpl_common                          
5498:000 | DONE cmt | em 16 16 |        |             |                 ; we're going to need the Y register to get anything done
5499:000 | DONE ins | em 16 16 | 00684e | 84 24       |                 sty.d 000024         
5500:000 | DONE wsp | em 16 16 |        |             |
5501:000 | DONE ins | em 16 16 | 006850 | a8          |                 tay                  force flag check
5502:000 | DONE ins | em 16 16 | 006851 | f0 08       |                 beq 00685b           came in through cmpl_word, just compile body
5503:000 | DONE wsp | em 16 16 |        |             |
5504:000 | DONE cmt | em 16 16 |        |             |                 ; A contains an opcode that must be compiled first. This is an
5505:000 | DONE cmt | em 16 16 |        |             |                 ; optimized version of C, ("c-comma")
5506:000 | DONE ins | em 16 16 | 006853 | e2 20       |                 sep 20               
5506:001 | DONE ctl | em  8 16 |        |             |         .!a8
5507:000 | DONE ins | em  8 16 | 006855 | 92 00       |                 sta.di 000000        STA (CP)
5508:000 | DONE ins | em  8 16 | 006857 | c2 20       |                 rep 20               
5508:001 | DONE ctl | em 16 16 |        |             |         .!a16
5509:000 | DONE ins | em 16 16 | 006859 | e6 00       |                 inc.d 000000         fall through to cmpl_body
5510:000 | DONE lbl | em 16 16 | 00685b |             | cmpl_body                            
5511:000 | DONE ins | em 16 16 | 00685b | 7a          |                 ply                  the return address we'll need later
5512:000 | DONE wsp | em 16 16 |        |             |
5513:000 | DONE ins | em 16 16 | 00685c | 68          |                 pla                  next value on stack is the word to compile
5514:000 | DONE ins | em 16 16 | 00685d | 92 00       |                 sta.di 000000        this is a quicker version of , ("comma")
5515:000 | DONE ins | em 16 16 | 00685f | e6 00       |                 inc.d 000000         
5516:000 | DONE ins | em 16 16 | 006861 | e6 00       |                 inc.d 000000         
5517:000 | DONE wsp | em 16 16 |        |             |
5518:000 | DONE ins | em 16 16 | 006863 | 5a          |                 phy                  make sure we can get back home
5519:000 | DONE wsp | em 16 16 |        |             |
5520:000 | DONE ins | em 16 16 | 006864 | a4 24       |                 ldy.d 000024         restore Data Stack
5521:000 | DONE wsp | em 16 16 |        |             |
5522:000 | DONE ins | em 16 16 | 006866 | 60          |                 rts                  
5523:000 | DONE wsp | em 16 16 |        |             |
5524:000 | DONE wsp | em 16 16 |        |             |
5525:000 | DONE cmt | em 16 16 |        |             | ; -------------------------------------------------------------------
5526:000 | DONE cmt | em 16 16 |        |             | ; FATAL ERROR
5527:000 | DONE cmt | em 16 16 |        |             | ; Take address of error string from A, print it and then call abort
5528:000 | DONE lbl | em 16 16 | 006867 |             | error                                
5529:000 | DONE ins | em 16 16 | 006867 | 20 6d 68    |                 jsr 00686d           
5530:000 | DONE ins | em 16 16 | 00686a | 4c ad 50    |                 jmp 0050ad           
5531:000 | DONE wsp | em 16 16 |        |             |
5532:000 | DONE cmt | em 16 16 |        |             | ; -------------------------------------------------------------------
5533:000 | DONE cmt | em 16 16 |        |             | ; Print a zero terminated string to the console, adding a CR character. Takes
5534:000 | DONE cmt | em 16 16 |        |             | ; the address of the string in 16-bit A register, calls put_chr.  A is
5535:000 | DONE cmt | em 16 16 |        |             | ; destroyed. We could probably figure out some way to use TYPE instead, but zero
5536:000 | DONE cmt | em 16 16 |        |             | ; terminated strings are easier for the 65816 to use.
5537:000 | DONE lbl | em 16 16 | 00686d |             | print_string                         
5538:000 | DONE dir | em 16 16 |        |             |         .!a16                        
5539:000 | DONE dir | em 16 16 |        |             |         .!xy16                       
5540:000 | DONE cmt | em 16 16 |        |             |                 ; don't use tmpdsp for X because we don't know if the user has
5541:000 | DONE cmt | em 16 16 |        |             |                 ; used it for something already
5542:000 | DONE ins | em 16 16 | 00686d | da          |                 phx                  
5543:000 | DONE ins | em 16 16 | 00686e | aa          |                 tax                  x16 contains address of string
5544:000 | DONE lbl | em 16 16 | 00686f |             | @                                    
5545:000 | DONE ins | em 16 16 | 00686f | e2 20       |                 sep 20               
5545:001 | DONE ctl | em  8 16 |        |             |         .!a8
5546:000 | DONE ins | em  8 16 | 006871 | bd 00 00    |                 lda.x 0000           LDA $0000,X
5547:000 | DONE ins | em  8 16 | 006874 | f0 06       |                 beq 00687c           
5548:000 | DONE ins | em  8 16 | 006876 | 20 f5 57    |                 jsr 0057f5           
5549:000 | DONE ins | em  8 16 | 006879 | e8          |                 inx                  
5550:000 | DONE ins | em  8 16 | 00687a | 80 f3       |                 bra 00686f           
5551:000 | DONE wsp | em  8 16 |        |             |
5552:000 | DONE lbl | em  8 16 | 00687c |             | print_string_done                    
5553:000 | DONE ins | em  8 16 | 00687c | a9 0a       |                 lda.# AscLF          should be CR on some systems
5554:000 | DONE ins | em  8 16 | 00687e | 20 f5 57    |                 jsr 0057f5           
5555:000 | DONE ins | em  8 16 | 006881 | c2 20       |                 rep 20               
5555:001 | DONE ctl | em 16 16 |        |             |         .!a16
5556:000 | DONE ins | em 16 16 | 006883 | fa          |                 plx                  
5557:000 | DONE ins | em 16 16 | 006884 | 60          |                 rts                  
5558:000 | DONE wsp | em 16 16 |        |             |
5559:000 | DONE wsp | em 16 16 |        |             |
5560:000 | DONE cmt | em 16 16 |        |             | ; -------------------------------------------------------------------
5561:000 | DONE cmt | em 16 16 |        |             | ; PRINT UNSIGNED NUMBER
5562:000 | DONE cmt | em 16 16 |        |             | ; Is the equivalent to Forth's 0 <# S# #> TYPE or U. without the SPACE at the
5563:000 | DONE cmt | em 16 16 |        |             | ; end. TODO convert this to more assembler for speed
5564:000 | DONE lbl | em 16 16 | 006885 |             | print_number                         
5565:000 | DONE ins | em 16 16 | 006885 | ca          |                 dex                  0
5566:000 | DONE ins | em 16 16 | 006886 | ca          |                 dex                  
5567:000 | DONE ins | em 16 16 | 006887 | 94 00       |                 sty.dx 00            
5568:000 | DONE ins | em 16 16 | 006889 | a0 00 00    |                 ldy.# 0000           
5569:000 | DONE wsp | em 16 16 |        |             |
5570:000 | DONE ins | em 16 16 | 00688c | 20 2a 5b    |                 jsr 005b2a           <#
5571:000 | DONE ins | em 16 16 | 00688f | 84 18       |                 sty.d 000018         
5572:000 | DONE ins | em 16 16 | 006891 | b4 00       |                 ldy.dx 00            
5573:000 | DONE ins | em 16 16 | 006893 | e8          |                 inx                  
5574:000 | DONE ins | em 16 16 | 006894 | e8          |                 inx                  
5575:000 | DONE wsp | em 16 16 |        |             |
5576:000 | DONE ins | em 16 16 | 006895 | 20 b0 52    |                 jsr 0052b0           #S
5577:000 | DONE ins | em 16 16 | 006898 | 20 a1 52    |                 jsr 0052a1           #>
5578:000 | DONE ins | em 16 16 | 00689b | 4c b6 5d    |                 jmp 005db6           TYPE - JSR/RTS
5579:000 | DONE wsp | em 16 16 |        |             |
5580:000 | DONE wsp | em 16 16 |        |             |
5581:000 | DONE cmt | em 16 16 |        |             | ; -------------------------------------------------------------------
5582:000 | DONE cmt | em 16 16 |        |             | ; CONVERT BYTE TO ASCII
5583:000 | DONE cmt | em 16 16 |        |             | ; Convert byte in A to two ASCII hex digits and print them. Calls
5584:000 | DONE cmt | em 16 16 |        |             | ; nibble_to_ascii. Assumes A is 8 bit.
5585:000 | DONE lbl | em 16 16 | 00689e |             | byte_to_ascii                        
5586:000 | DONE dir | em 16 16 |        |             |         .!a16                        
5587:000 | DONE ins | em 16 16 | 00689e | 48          |                 pha                  
5588:000 | DONE cmt | em 16 16 |        |             |                 ; convert high nibble first
5589:000 | DONE ins | em 16 16 | 00689f | 4a          |                 lsr.a                
5590:000 | DONE ins | em 16 16 | 0068a0 | 4a          |                 lsr.a                
5591:000 | DONE ins | em 16 16 | 0068a1 | 4a          |                 lsr.a                
5592:000 | DONE ins | em 16 16 | 0068a2 | 4a          |                 lsr.a                
5593:000 | DONE ins | em 16 16 | 0068a3 | 20 a7 68    |                 jsr 0068a7           
5594:000 | DONE wsp | em 16 16 |        |             |
5595:000 | DONE ins | em 16 16 | 0068a6 | 68          |                 pla                  
5596:000 | DONE wsp | em 16 16 |        |             |
5597:000 | DONE cmt | em 16 16 |        |             |                 ; fall thru to nibble_to_ascii
5598:000 | DONE wsp | em 16 16 |        |             |
5599:000 | DONE wsp | em 16 16 |        |             |
5600:000 | DONE cmt | em 16 16 |        |             | ; -------------------------------------------------------------------
5601:000 | DONE cmt | em 16 16 |        |             | ; CONVERT NIBBLE TO ASCII
5602:000 | DONE cmt | em 16 16 |        |             | ; Converts the lower nibble of a number in A and returns the ASCII character
5603:000 | DONE cmt | em 16 16 |        |             | ; number, then prints it. Assumes A is 8 bit
5604:000 | DONE lbl | em 16 16 | 0068a7 |             | nibble_to_ascii                      
5605:000 | DONE dir | em 16 16 |        |             |         .!a16                        
5606:000 | DONE ins | em 16 16 | 0068a7 | 29 0f 00    |                 and.# 000f           
5607:000 | DONE ins | em 16 16 | 0068aa | 09 30 00    |                 ora.# 30             
5608:000 | DONE ins | em 16 16 | 0068ad | c9 3a 00    |                 cmp.# 003a           '9' + 1
5609:000 | DONE ins | em 16 16 | 0068b0 | 90 03       |                 bcc 0068b5           
5610:000 | DONE ins | em 16 16 | 0068b2 | 69 06 00    |                 adc.# 0006           
5611:000 | DONE lbl | em 16 16 | 0068b5 |             | @                                    
5612:000 | DONE ins | em 16 16 | 0068b5 | 20 f5 57    |                 jsr 0057f5           
5613:000 | DONE wsp | em 16 16 |        |             |
5614:000 | DONE ins | em 16 16 | 0068b8 | 60          |                 rts                  
5615:000 | DONE wsp | em 16 16 |        |             |
5616:000 | DONE cmt | em 16 16 |        |             | ; ===================================================================
5617:000 | DONE cmt | em 16 16 |        |             | ; HIGH-LEVEL WORDS
5618:000 | DONE wsp | em 16 16 |        |             |
5619:000 | DONE cmt | em 16 16 |        |             | ; These are executed during start up. Remember that we have to put a space at
5620:000 | DONE cmt | em 16 16 |        |             | ; the end of the line if there is another line with code following it. No zero
5621:000 | DONE cmt | em 16 16 |        |             | ; or CR/LF is required
5622:000 | DONE lbl | em 16 16 | 0068b9 |             | hi-start                             
5623:000 | DONE cmt | em 16 16 |        |             |         ; High flow control. Some of these could be realized with CS-ROLL and
5624:000 | DONE cmt | em 16 16 |        |             |         ; CS-PICK instead
5625:000 | DONE dir | em 16 16 | 0068b9 | (56 bytes)  |         .byte 3a, 20, 69, 66, 20, 70, 6f, 73, 74, 70, 6f, 6e, 65, (...) 
5625:000 | DONE dir | em 16 16 |        |             |                 3a 20 69 66 20 70 6f 73  --  :   i f   p o s
5625:000 | DONE dir | em 16 16 |        |             |                 74 70 6f 6e 65 20 30 62  --  t p o n e   0 b
5625:000 | DONE dir | em 16 16 |        |             |                 72 61 6e 63 68 20 68 65  --  r a n c h   h e
5625:000 | DONE dir | em 16 16 |        |             |                 72 65 20 30 20 2c 20 3b  --  r e   0   ,   ;
5625:000 | DONE dir | em 16 16 |        |             |                 20 69 6d 6d 65 64 69 61  --    i m m e d i a
5625:000 | DONE dir | em 16 16 |        |             |                 74 65 20 63 6f 6d 70 69  --  t e   c o m p i
5625:000 | DONE dir | em 16 16 |        |             |                 6c 65 2d 6f 6e 6c 79 20  --  l e - o n l y  
5625:000 | DONE dir | em 16 16 |        |             |                                          -- 
5626:000 | DONE dir | em 16 16 | 0068f1 | (44 bytes)  |         .byte 3a, 20, 74, 68, 65, 6e, 20, 68, 65, 72, 65, 20, 73, (...) 
5626:000 | DONE dir | em 16 16 |        |             |                 3a 20 74 68 65 6e 20 68  --  :   t h e n   h
5626:000 | DONE dir | em 16 16 |        |             |                 65 72 65 20 73 77 61 70  --  e r e   s w a p
5626:000 | DONE dir | em 16 16 |        |             |                 20 21 20 3b 20 69 6d 6d  --    !   ;   i m m
5626:000 | DONE dir | em 16 16 |        |             |                 65 64 69 61 74 65 20 63  --  e d i a t e   c
5626:000 | DONE dir | em 16 16 |        |             |                 6f 6d 70 69 6c 65 2d 6f  --  o m p i l e - o
5626:000 | DONE dir | em 16 16 |        |             |                 6e 6c 79 20              --  n l y  
5627:000 | DONE dir | em 16 16 | 00691d | (68 bytes)  |         .byte 3a, 20, 65, 6c, 73, 65, 20, 70, 6f, 73, 74, 70, 6f, (...) 
5627:000 | DONE dir | em 16 16 |        |             |                 3a 20 65 6c 73 65 20 70  --  :   e l s e   p
5627:000 | DONE dir | em 16 16 |        |             |                 6f 73 74 70 6f 6e 65 20  --  o s t p o n e  
5627:000 | DONE dir | em 16 16 |        |             |                 62 72 61 6e 63 68 20 68  --  b r a n c h   h
5627:000 | DONE dir | em 16 16 |        |             |                 65 72 65 20 30 20 2c 20  --  e r e   0   ,  
5627:000 | DONE dir | em 16 16 |        |             |                 68 65 72 65 20 72 6f 74  --  h e r e   r o t
5627:000 | DONE dir | em 16 16 |        |             |                 20 21 20 3b 20 69 6d 6d  --    !   ;   i m m
5627:000 | DONE dir | em 16 16 |        |             |                 65 64 69 61 74 65 20 63  --  e d i a t e   c
5627:000 | DONE dir | em 16 16 |        |             |                 6f 6d 70 69 6c 65 2d 6f  --  o m p i l e - o
5627:000 | DONE dir | em 16 16 |        |             |                 6e 6c 79 20              --  n l y  
5628:000 | DONE dir | em 16 16 | 006961 | (61 bytes)  |         .byte 3a, 20, 72, 65, 70, 65, 61, 74, 20, 70, 6f, 73, 74, (...) 
5628:000 | DONE dir | em 16 16 |        |             |                 3a 20 72 65 70 65 61 74  --  :   r e p e a t
5628:000 | DONE dir | em 16 16 |        |             |                 20 70 6f 73 74 70 6f 6e  --    p o s t p o n
5628:000 | DONE dir | em 16 16 |        |             |                 65 20 61 67 61 69 6e 20  --  e   a g a i n  
5628:000 | DONE dir | em 16 16 |        |             |                 68 65 72 65 20 73 77 61  --  h e r e   s w a
5628:000 | DONE dir | em 16 16 |        |             |                 70 20 21 20 3b 20 69 6d  --  p   !   ;   i m
5628:000 | DONE dir | em 16 16 |        |             |                 6d 65 64 69 61 74 65 20  --  m e d i a t e  
5628:000 | DONE dir | em 16 16 |        |             |                 63 6f 6d 70 69 6c 65 2d  --  c o m p i l e -
5628:000 | DONE dir | em 16 16 |        |             |                 6f 6e 6c 79 20           --  o n l y  
5629:000 | DONE dir | em 16 16 | 00699e | (52 bytes)  |         .byte 3a, 20, 75, 6e, 74, 69, 6c, 20, 70, 6f, 73, 74, 70, (...) 
5629:000 | DONE dir | em 16 16 |        |             |                 3a 20 75 6e 74 69 6c 20  --  :   u n t i l  
5629:000 | DONE dir | em 16 16 |        |             |                 70 6f 73 74 70 6f 6e 65  --  p o s t p o n e
5629:000 | DONE dir | em 16 16 |        |             |                 20 30 62 72 61 6e 63 68  --    0 b r a n c h
5629:000 | DONE dir | em 16 16 |        |             |                 20 2c 20 3b 20 69 6d 6d  --    ,   ;   i m m
5629:000 | DONE dir | em 16 16 |        |             |                 65 64 69 61 74 65 20 63  --  e d i a t e   c
5629:000 | DONE dir | em 16 16 |        |             |                 6f 6d 70 69 6c 65 2d 6f  --  o m p i l e - o
5629:000 | DONE dir | em 16 16 |        |             |                 6e 6c 79 20              --  n l y  
5630:000 | DONE dir | em 16 16 | 0069d2 | (64 bytes)  |         .byte 3a, 20, 77, 68, 69, 6c, 65, 20, 70, 6f, 73, 74, 70, (...) 
5630:000 | DONE dir | em 16 16 |        |             |                 3a 20 77 68 69 6c 65 20  --  :   w h i l e  
5630:000 | DONE dir | em 16 16 |        |             |                 70 6f 73 74 70 6f 6e 65  --  p o s t p o n e
5630:000 | DONE dir | em 16 16 |        |             |                 20 30 62 72 61 6e 63 68  --    0 b r a n c h
5630:000 | DONE dir | em 16 16 |        |             |                 20 68 65 72 65 20 30 20  --    h e r e   0  
5630:000 | DONE dir | em 16 16 |        |             |                 2c 20 73 77 61 70 20 3b  --  ,   s w a p   ;
5630:000 | DONE dir | em 16 16 |        |             |                 20 69 6d 6d 65 64 69 61  --    i m m e d i a
5630:000 | DONE dir | em 16 16 |        |             |                 74 65 20 63 6f 6d 70 69  --  t e   c o m p i
5630:000 | DONE dir | em 16 16 |        |             |                 6c 65 2d 6f 6e 6c 79 20  --  l e - o n l y  
5630:000 | DONE dir | em 16 16 |        |             |                                          -- 
5631:000 | DONE wsp | em 16 16 |        |             |
5632:000 | DONE cmt | em 16 16 |        |             |         ; DEFER's friends. Code taken from ANSI Forth specifications. Many of
5633:000 | DONE cmt | em 16 16 |        |             |         ; these will be moved to assembler code in due course
5634:000 | DONE dir | em 16 16 | 006a12 | (19 bytes)  |         .byte 3a, 20, 64, 65, 66, 65, 72, 21, 20, 3e, 62, 6f, 64, (...) 
5634:000 | DONE dir | em 16 16 |        |             |                 3a 20 64 65 66 65 72 21  --  :   d e f e r !
5634:000 | DONE dir | em 16 16 |        |             |                 20 3e 62 6f 64 79 20 21  --    > b o d y   !
5634:000 | DONE dir | em 16 16 |        |             |                 20 3b 20                 --    ;  
5635:000 | DONE dir | em 16 16 | 006a25 | (19 bytes)  |         .byte 3a, 20, 64, 65, 66, 65, 72, 40, 20, 3e, 62, 6f, 64, (...) 
5635:000 | DONE dir | em 16 16 |        |             |                 3a 20 64 65 66 65 72 40  --  :   d e f e r @
5635:000 | DONE dir | em 16 16 |        |             |                 20 3e 62 6f 64 79 20 40  --    > b o d y   @
5635:000 | DONE dir | em 16 16 |        |             |                 20 3b 20                 --    ;  
5636:000 | DONE dir | em 16 16 | 006a38 | (76 bytes)  |         .byte 3a, 20, 69, 73, 20, 73, 74, 61, 74, 65, 20, 40, 20, (...) 
5636:000 | DONE dir | em 16 16 |        |             |                 3a 20 69 73 20 73 74 61  --  :   i s   s t a
5636:000 | DONE dir | em 16 16 |        |             |                 74 65 20 40 20 69 66 20  --  t e   @   i f  
5636:000 | DONE dir | em 16 16 |        |             |                 70 6f 73 74 70 6f 6e 65  --  p o s t p o n e
5636:000 | DONE dir | em 16 16 |        |             |                 20 5b 27 5d 20 70 6f 73  --    [ ' ]   p o s
5636:000 | DONE dir | em 16 16 |        |             |                 74 70 6f 6e 65 20 64 65  --  t p o n e   d e
5636:000 | DONE dir | em 16 16 |        |             |                 66 65 72 21 20 65 6c 73  --  f e r !   e l s
5636:000 | DONE dir | em 16 16 |        |             |                 65 20 27 20 64 65 66 65  --  e   '   d e f e
5636:000 | DONE dir | em 16 16 |        |             |                 72 21 20 74 68 65 6e 20  --  r !   t h e n  
5636:000 | DONE dir | em 16 16 |        |             |                 3b 20 69 6d 6d 65 64 69  --  ;   i m m e d i
5636:000 | DONE dir | em 16 16 |        |             |                 61 74 65 20              --  a t e  
5637:000 | DONE dir | em 16 16 | 006a84 | (83 bytes)  |         .byte 3a, 20, 61, 63, 74, 69, 6f, 6e, 2d, 6f, 66, 20, 73, (...) 
5637:000 | DONE dir | em 16 16 |        |             |                 3a 20 61 63 74 69 6f 6e  --  :   a c t i o n
5637:000 | DONE dir | em 16 16 |        |             |                 2d 6f 66 20 73 74 61 74  --  - o f   s t a t
5637:000 | DONE dir | em 16 16 |        |             |                 65 20 40 20 69 66 20 70  --  e   @   i f   p
5637:000 | DONE dir | em 16 16 |        |             |                 6f 73 74 70 6f 6e 65 20  --  o s t p o n e  
5637:000 | DONE dir | em 16 16 |        |             |                 5b 27 5d 20 70 6f 73 74  --  [ ' ]   p o s t
5637:000 | DONE dir | em 16 16 |        |             |                 70 6f 6e 65 20 64 65 66  --  p o n e   d e f
5637:000 | DONE dir | em 16 16 |        |             |                 65 72 40 20 65 6c 73 65  --  e r @   e l s e
5637:000 | DONE dir | em 16 16 |        |             |                 20 27 20 64 65 66 65 72  --    '   d e f e r
5637:000 | DONE dir | em 16 16 |        |             |                 40 20 74 68 65 6e 20 3b  --  @   t h e n   ;
5637:000 | DONE dir | em 16 16 |        |             |                 20 69 6d 6d 65 64 69 61  --    i m m e d i a
5637:000 | DONE dir | em 16 16 |        |             |                 74 65 20                 --  t e  
5638:000 | DONE wsp | em 16 16 |        |             |
5639:000 | DONE cmt | em 16 16 |        |             |         ; Output and comment words
5640:000 | DONE dir | em 16 16 | 006ad7 | (37 bytes)  |         .byte 3a, 20, 28, 20, 5b, 63, 68, 61, 72, 5d, 20, 29, 20, (...) 
5640:000 | DONE dir | em 16 16 |        |             |                 3a 20 28 20 5b 63 68 61  --  :   (   [ c h a
5640:000 | DONE dir | em 16 16 |        |             |                 72 5d 20 29 20 70 61 72  --  r ]   )   p a r
5640:000 | DONE dir | em 16 16 |        |             |                 73 65 20 32 64 72 6f 70  --  s e   2 d r o p
5640:000 | DONE dir | em 16 16 |        |             |                 20 3b 20 69 6d 6d 65 64  --    ;   i m m e d
5640:000 | DONE dir | em 16 16 |        |             |                 69 61 74 65 20           --  i a t e  
5641:000 | DONE dir | em 16 16 | 006afc | (37 bytes)  |         .byte 3a, 20, 2e, 28, 20, 5b, 63, 68, 61, 72, 5d, 20, 29, (...) 
5641:000 | DONE dir | em 16 16 |        |             |                 3a 20 2e 28 20 5b 63 68  --  :   . (   [ c h
5641:000 | DONE dir | em 16 16 |        |             |                 61 72 5d 20 29 20 70 61  --  a r ]   )   p a
5641:000 | DONE dir | em 16 16 |        |             |                 72 73 65 20 74 79 70 65  --  r s e   t y p e
5641:000 | DONE dir | em 16 16 |        |             |                 20 3b 20 69 6d 6d 65 64  --    ;   i m m e d
5641:000 | DONE dir | em 16 16 |        |             |                 69 61 74 65 20           --  i a t e  
5642:000 | DONE wsp | em 16 16 |        |             |
5643:000 | DONE cmt | em 16 16 |        |             |         ; High level math definitions. The should be moved to actual 65816 code
5644:000 | DONE cmt | em 16 16 |        |             |         ; for speed at some point. Note we use SM/REM instead of FM/MOD for most
5645:000 | DONE cmt | em 16 16 |        |             |         ; stuff
5646:000 | DONE dir | em 16 16 | 006b21 | (33 bytes)  |         .byte 3a, 20, 2f, 20, 3e, 72, 20, 73, 3e, 64, 20, 72, 3e, (...) 
5646:000 | DONE dir | em 16 16 |        |             |                 3a 20 2f 20 3e 72 20 73  --  :   /   > r   s
5646:000 | DONE dir | em 16 16 |        |             |                 3e 64 20 72 3e 20 73 6d  --  > d   r >   s m
5646:000 | DONE dir | em 16 16 |        |             |                 2f 72 65 6d 20 73 77 61  --  / r e m   s w a
5646:000 | DONE dir | em 16 16 |        |             |                 70 20 64 72 6f 70 20 3b  --  p   d r o p   ;
5646:000 | DONE dir | em 16 16 |        |             |                 20                       --   
5647:000 | DONE dir | em 16 16 | 006b42 | (26 bytes)  |         .byte 3a, 20, 2f, 6d, 6f, 64, 20, 3e, 72, 20, 73, 3e, 64, (...) 
5647:000 | DONE dir | em 16 16 |        |             |                 3a 20 2f 6d 6f 64 20 3e  --  :   / m o d   >
5647:000 | DONE dir | em 16 16 |        |             |                 72 20 73 3e 64 20 72 3e  --  r   s > d   r >
5647:000 | DONE dir | em 16 16 |        |             |                 20 73 6d 2f 72 65 6d 20  --    s m / r e m  
5647:000 | DONE dir | em 16 16 |        |             |                 3b 20                    --  ;  
5648:000 | DONE dir | em 16 16 | 006b5c | (33 bytes)  |         .byte 3a, 20, 2a, 2f, 20, 3e, 72, 20, 6d, 2a, 20, 72, 3e, (...) 
5648:000 | DONE dir | em 16 16 |        |             |                 3a 20 2a 2f 20 3e 72 20  --  :   * /   > r  
5648:000 | DONE dir | em 16 16 |        |             |                 6d 2a 20 72 3e 20 73 6d  --  m *   r >   s m
5648:000 | DONE dir | em 16 16 |        |             |                 2f 72 65 6d 20 73 77 61  --  / r e m   s w a
5648:000 | DONE dir | em 16 16 |        |             |                 70 20 64 72 6f 70 20 3b  --  p   d r o p   ;
5648:000 | DONE dir | em 16 16 |        |             |                 20                       --   
5649:000 | DONE dir | em 16 16 | 006b7d | (26 bytes)  |         .byte 3a, 20, 2a, 2f, 6d, 6f, 64, 20, 3e, 72, 20, 6d, 2a, (...) 
5649:000 | DONE dir | em 16 16 |        |             |                 3a 20 2a 2f 6d 6f 64 20  --  :   * / m o d  
5649:000 | DONE dir | em 16 16 |        |             |                 3e 72 20 6d 2a 20 72 3e  --  > r   m *   r >
5649:000 | DONE dir | em 16 16 |        |             |                 20 73 6d 2f 72 65 6d 20  --    s m / r e m  
5649:000 | DONE dir | em 16 16 |        |             |                 3b 20                    --  ;  
5650:000 | DONE wsp | em 16 16 |        |             |
5651:000 | DONE cmt | em 16 16 |        |             |         ; Output definitions. Since these usually involve the user, and humans
5652:000 | DONE cmt | em 16 16 |        |             |         ; are slow, these can stay high-level for the moment. Based on
5653:000 | DONE cmt | em 16 16 |        |             |         ; https://github.com/philburk/pforth/blob/master/fth/numberio.fth
5654:000 | DONE wsp | em 16 16 |        |             |
5655:000 | DONE cmt | em 16 16 |        |             |         ; TODO becaues of Tinker bug, ".byte" is recognized as the directive
5656:000 | DONE cmt | em 16 16 |        |             |         ; even though it is in a string. Until that is fixed, we start with the
5657:000 | DONE cmt | em 16 16 |        |             |         ; ASCII code for a dot
5658:000 | DONE cmt | em 16 16 |        |             | ;       .byte ": ", &46, "byte 0 <# # #s #> type space ; "
5659:000 | DONE cmt | em 16 16 |        |             | ;       .byte ": u. 0 <# #s #> type space ; "
5660:000 | DONE dir | em 16 16 | 006b97 | (44 bytes)  |         .byte 3a, 20, 75, 2e, 72, 20, 3e, 72, 20, 30, 20, 3c, 23, (...) 
5660:000 | DONE dir | em 16 16 |        |             |                 3a 20 75 2e 72 20 3e 72  --  :   u . r   > r
5660:000 | DONE dir | em 16 16 |        |             |                 20 30 20 3c 23 20 23 73  --    0   < #   # s
5660:000 | DONE dir | em 16 16 |        |             |                 20 23 3e 20 72 3e 20 6f  --    # >   r >   o
5660:000 | DONE dir | em 16 16 |        |             |                 76 65 72 20 2d 20 73 70  --  v e r   -   s p
5660:000 | DONE dir | em 16 16 |        |             |                 61 63 65 73 20 74 79 70  --  a c e s   t y p
5660:000 | DONE dir | em 16 16 |        |             |                 65 20 3b 20              --  e   ;  
5661:000 | DONE dir | em 16 16 | 006bc3 | (60 bytes)  |         .byte 3a, 20, 2e, 72, 20, 3e, 72, 20, 64, 75, 70, 20, 61, (...) 
5661:000 | DONE dir | em 16 16 |        |             |                 3a 20 2e 72 20 3e 72 20  --  :   . r   > r  
5661:000 | DONE dir | em 16 16 |        |             |                 64 75 70 20 61 62 73 20  --  d u p   a b s  
5661:000 | DONE dir | em 16 16 |        |             |                 30 20 3c 23 20 23 73 20  --  0   < #   # s  
5661:000 | DONE dir | em 16 16 |        |             |                 72 6f 74 20 73 69 67 6e  --  r o t   s i g n
5661:000 | DONE dir | em 16 16 |        |             |                 20 23 3e 20 72 3e 20 6f  --    # >   r >   o
5661:000 | DONE dir | em 16 16 |        |             |                 76 65 72 20 2d 20 73 70  --  v e r   -   s p
5661:000 | DONE dir | em 16 16 |        |             |                 61 63 65 73 20 74 79 70  --  a c e s   t y p
5661:000 | DONE dir | em 16 16 |        |             |                 65 20 3b 20              --  e   ;  
5662:000 | DONE dir | em 16 16 | 006bff | (28 bytes)  |         .byte 3a, 20, 75, 64, 2e, 20, 3c, 23, 20, 23, 73, 20, 23, (...) 
5662:000 | DONE dir | em 16 16 |        |             |                 3a 20 75 64 2e 20 3c 23  --  :   u d .   < #
5662:000 | DONE dir | em 16 16 |        |             |                 20 23 73 20 23 3e 20 74  --    # s   # >   t
5662:000 | DONE dir | em 16 16 |        |             |                 79 70 65 20 73 70 61 63  --  y p e   s p a c
5662:000 | DONE dir | em 16 16 |        |             |                 65 20 3b 20              --  e   ;  
5663:000 | DONE dir | em 16 16 | 006c1b | (43 bytes)  |         .byte 3a, 20, 75, 64, 2e, 72, 20, 3e, 72, 20, 3c, 23, 20, (...) 
5663:000 | DONE dir | em 16 16 |        |             |                 3a 20 75 64 2e 72 20 3e  --  :   u d . r   >
5663:000 | DONE dir | em 16 16 |        |             |                 72 20 3c 23 20 23 73 20  --  r   < #   # s  
5663:000 | DONE dir | em 16 16 |        |             |                 23 3e 20 72 3e 20 6f 76  --  # >   r >   o v
5663:000 | DONE dir | em 16 16 |        |             |                 65 72 20 2d 20 73 70 61  --  e r   -   s p a
5663:000 | DONE dir | em 16 16 |        |             |                 63 65 73 20 74 79 70 65  --  c e s   t y p e
5663:000 | DONE dir | em 16 16 |        |             |                 20 3b 20                 --    ;  
5664:000 | DONE dir | em 16 16 | 006c46 | (46 bytes)  |         .byte 3a, 20, 64, 2e, 20, 74, 75, 63, 6b, 20, 64, 61, 62, (...) 
5664:000 | DONE dir | em 16 16 |        |             |                 3a 20 64 2e 20 74 75 63  --  :   d .   t u c
5664:000 | DONE dir | em 16 16 |        |             |                 6b 20 64 61 62 73 20 3c  --  k   d a b s   <
5664:000 | DONE dir | em 16 16 |        |             |                 23 20 23 73 20 72 6f 74  --  #   # s   r o t
5664:000 | DONE dir | em 16 16 |        |             |                 20 73 69 67 6e 20 23 3e  --    s i g n   # >
5664:000 | DONE dir | em 16 16 |        |             |                 20 74 79 70 65 20 73 70  --    t y p e   s p
5664:000 | DONE dir | em 16 16 |        |             |                 61 63 65 20 3b 20        --  a c e   ;  
5665:000 | DONE dir | em 16 16 | 006c74 | (61 bytes)  |         .byte 3a, 20, 64, 2e, 72, 20, 3e, 72, 20, 74, 75, 63, 6b, (...) 
5665:000 | DONE dir | em 16 16 |        |             |                 3a 20 64 2e 72 20 3e 72  --  :   d . r   > r
5665:000 | DONE dir | em 16 16 |        |             |                 20 74 75 63 6b 20 64 61  --    t u c k   d a
5665:000 | DONE dir | em 16 16 |        |             |                 62 73 20 3c 23 20 23 73  --  b s   < #   # s
5665:000 | DONE dir | em 16 16 |        |             |                 20 72 6f 74 20 73 69 67  --    r o t   s i g
5665:000 | DONE dir | em 16 16 |        |             |                 6e 20 23 3e 20 72 3e 20  --  n   # >   r >  
5665:000 | DONE dir | em 16 16 |        |             |                 6f 76 65 72 20 2d 20 73  --  o v e r   -   s
5665:000 | DONE dir | em 16 16 |        |             |                 70 61 63 65 73 20 74 79  --  p a c e s   t y
5665:000 | DONE dir | em 16 16 |        |             |                 70 65 20 3b 20           --  p e   ;  
5666:000 | DONE cmt | em 16 16 |        |             | ;       .byte ": . dup abs 0 <# #s rot sign #> type space ; "
5667:000 | DONE wsp | em 16 16 |        |             |
5668:000 | DONE cmt | em 16 16 |        |             |         ; LOOP constructs. See discussion at
5669:000 | DONE cmt | em 16 16 |        |             | 	; https://blogs.msdn.microsoft.com/ashleyf/2011/02/06/loopty-do-i-loop/
5670:000 | DONE cmt | em 16 16 |        |             | 	; .byte ": do postpone (do) here ; immediate compile-only "
5671:000 | DONE cmt | em 16 16 |        |             | 	; .byte ": +loop postpone (+loop) , postpone unloop ; immediate compile-only "
5672:000 | DONE cmt | em 16 16 |        |             | 	; .byte ": loop postpone 1 postpone (+loop) , postpone unloop ; immediate compile-only "
5673:000 | DONE cmt | em 16 16 |        |             |         ; .byte ": leave postpone branch here swap 0 , ; immediate compile-only "
5674:000 | DONE wsp | em 16 16 |        |             |
5675:000 | DONE cmt | em 16 16 |        |             |         ; .S was realized in assembler form during construction but is replaced
5676:000 | DONE cmt | em 16 16 |        |             |         ; by a high-level word because it is easier to modify
5677:000 | DONE cmt | em 16 16 |        |             |         ; TODO finish coding or put
5678:000 | DONE cmt | em 16 16 |        |             |         ; .byte ": .s .", &34, " <", &34, " depth u. .", &34, " >", &34, ' '
5679:000 | DONE cmt | em 16 16 |        |             |         ; .byte " 0 <# # #s #> type ; "
5680:000 | DONE wsp | em 16 16 |        |             |
5681:000 | DONE cmt | em 16 16 |        |             |         ; SEE is a longish word we'll want to modify for a while until we are
5682:000 | DONE cmt | em 16 16 |        |             |         ; happy with the format
5683:000 | DONE dir | em 16 16 | 006cb1 | (55 bytes)  |         .byte 3a, 20, 73, 65, 65, 20, 70, 61, 72, 73, 65, 2d, 6e, (...) 
5683:000 | DONE dir | em 16 16 |        |             |                 3a 20 73 65 65 20 70 61  --  :   s e e   p a
5683:000 | DONE dir | em 16 16 |        |             |                 72 73 65 2d 6e 61 6d 65  --  r s e - n a m e
5683:000 | DONE dir | em 16 16 |        |             |                 20 66 69 6e 64 2d 6e 61  --    f i n d - n a
5683:000 | DONE dir | em 16 16 |        |             |                 6d 65 20 64 75 70 20 30  --  m e   d u p   0
5683:000 | DONE dir | em 16 16 |        |             |                 3d 20 61 62 6f 72 74 22  --  =   a b o r t "
5683:000 | DONE dir | em 16 16 |        |             |                 20 4e 6f 20 73 75 63 68  --    N o   s u c h
5683:000 | DONE dir | em 16 16 |        |             |                 20 6e 61 6d 65 22 20     --    n a m e "  
5684:000 | DONE dir | em 16 16 | 006ce8 | (38 bytes)  |         .byte 62, 61, 73, 65, 20, 40, 20, 3e, 72, 20, 68, 65, 78, (...) 
5684:000 | DONE dir | em 16 16 |        |             |                 62 61 73 65 20 40 20 3e  --  b a s e   @   >
5684:000 | DONE dir | em 16 16 |        |             |                 72 20 68 65 78 20 64 75  --  r   h e x   d u
5684:000 | DONE dir | em 16 16 |        |             |                 70 20 63 72 20 73 70 61  --  p   c r   s p a
5684:000 | DONE dir | em 16 16 |        |             |                 63 65 20 2e 22 20 6e 74  --  c e   . "   n t
5684:000 | DONE dir | em 16 16 |        |             |                 3a 20 22 20 2e 20        --  :   "   .  
5685:000 | DONE dir | em 16 16 | 006d0e | (27 bytes)  |         .byte 64, 75, 70, 20, 34, 20, 2b, 20, 40, 20, 73, 70, 61, (...) 
5685:000 | DONE dir | em 16 16 |        |             |                 64 75 70 20 34 20 2b 20  --  d u p   4   +  
5685:000 | DONE dir | em 16 16 |        |             |                 40 20 73 70 61 63 65 20  --  @   s p a c e  
5685:000 | DONE dir | em 16 16 |        |             |                 2e 22 20 78 74 3a 20 22  --  . "   x t :   "
5685:000 | DONE dir | em 16 16 |        |             |                 20 2e 20                 --    .  
5686:000 | DONE dir | em 16 16 | 006d29 | (37 bytes)  |         .byte 64, 75, 70, 20, 31, 2b, 20, 63, 40, 20, 31, 20, 61, (...) 
5686:000 | DONE dir | em 16 16 |        |             |                 64 75 70 20 31 2b 20 63  --  d u p   1 +   c
5686:000 | DONE dir | em 16 16 |        |             |                 40 20 31 20 61 6e 64 20  --  @   1   a n d  
5686:000 | DONE dir | em 16 16 |        |             |                 69 66 20 73 70 61 63 65  --  i f   s p a c e
5686:000 | DONE dir | em 16 16 |        |             |                 20 2e 22 20 4e 43 22 20  --    . "   N C "  
5686:000 | DONE dir | em 16 16 |        |             |                 74 68 65 6e 20           --  t h e n  
5687:000 | DONE dir | em 16 16 | 006d4e | (37 bytes)  |         .byte 64, 75, 70, 20, 31, 2b, 20, 63, 40, 20, 32, 20, 61, (...) 
5687:000 | DONE dir | em 16 16 |        |             |                 64 75 70 20 31 2b 20 63  --  d u p   1 +   c
5687:000 | DONE dir | em 16 16 |        |             |                 40 20 32 20 61 6e 64 20  --  @   2   a n d  
5687:000 | DONE dir | em 16 16 |        |             |                 69 66 20 73 70 61 63 65  --  i f   s p a c e
5687:000 | DONE dir | em 16 16 |        |             |                 20 2e 22 20 49 4d 22 20  --    . "   I M "  
5687:000 | DONE dir | em 16 16 |        |             |                 74 68 65 6e 20           --  t h e n  
5688:000 | DONE dir | em 16 16 | 006d73 | (37 bytes)  |         .byte 64, 75, 70, 20, 31, 2b, 20, 63, 40, 20, 34, 20, 61, (...) 
5688:000 | DONE dir | em 16 16 |        |             |                 64 75 70 20 31 2b 20 63  --  d u p   1 +   c
5688:000 | DONE dir | em 16 16 |        |             |                 40 20 34 20 61 6e 64 20  --  @   4   a n d  
5688:000 | DONE dir | em 16 16 |        |             |                 69 66 20 73 70 61 63 65  --  i f   s p a c e
5688:000 | DONE dir | em 16 16 |        |             |                 20 2e 22 20 43 4f 22 20  --    . "   C O "  
5688:000 | DONE dir | em 16 16 |        |             |                 74 68 65 6e 20           --  t h e n  
5689:000 | DONE dir | em 16 16 | 006d98 | (57 bytes)  |         .byte 64, 75, 70, 20, 63, 72, 20, 73, 70, 61, 63, 65, 20, (...) 
5689:000 | DONE dir | em 16 16 |        |             |                 64 75 70 20 63 72 20 73  --  d u p   c r   s
5689:000 | DONE dir | em 16 16 |        |             |                 70 61 63 65 20 2e 22 20  --  p a c e   . "  
5689:000 | DONE dir | em 16 16 |        |             |                 73 69 7a 65 20 28 64 65  --  s i z e   ( d e
5689:000 | DONE dir | em 16 16 |        |             |                 63 69 6d 61 6c 29 3a 20  --  c i m a l ) :  
5689:000 | DONE dir | em 16 16 |        |             |                 22 20 64 65 63 69 6d 61  --  "   d e c i m a
5689:000 | DONE dir | em 16 16 |        |             |                 6c 20 77 6f 72 64 73 69  --  l   w o r d s i
5689:000 | DONE dir | em 16 16 |        |             |                 7a 65 20 64 75 70 20 2e  --  z e   d u p   .
5689:000 | DONE dir | em 16 16 |        |             |                 20                       --   
5690:000 | DONE dir | em 16 16 | 006dd1 | (36 bytes)  |         .byte 73, 77, 61, 70, 20, 6e, 61, 6d, 65, 3e, 69, 6e, 74, (...) 
5690:000 | DONE dir | em 16 16 |        |             |                 73 77 61 70 20 6e 61 6d  --  s w a p   n a m
5690:000 | DONE dir | em 16 16 |        |             |                 65 3e 69 6e 74 20 73 77  --  e > i n t   s w
5690:000 | DONE dir | em 16 16 |        |             |                 61 70 20 64 75 6d 70 20  --  a p   d u m p  
5690:000 | DONE dir | em 16 16 |        |             |                 72 3e 20 62 61 73 65 20  --  r >   b a s e  
5690:000 | DONE dir | em 16 16 |        |             |                 21 20 3b 20              --  !   ;  
5691:000 | DONE wsp | em 16 16 |        |             |
5692:000 | DONE cmt | em 16 16 |        |             | ; ===================================================================
5693:000 | DONE cmt | em 16 16 |        |             | ; USER INCLUDES
5694:000 | DONE wsp | em 16 16 |        |             |
5695:000 | DONE cmt | em 16 16 |        |             | ; Include any Forth words defined by the user in USER.TASM
5696:000 | DONE wsp | em 16 16 |        |             |
5698:000 | DONE wsp | em 16 16 |        |             |
5699:000 | DONE cmt | em 16 16 |        |             | ; ===================================================================
5700:000 | DONE wsp | em 16 16 |        |             |
5701:000 | DONE cmt | em 16 16 |        |             |         ; Splash strings. We leave these as high-level words because they are
5702:000 | DONE cmt | em 16 16 |        |             |         ; generated at the end of the boot process and signal that the other
5703:000 | DONE cmt | em 16 16 |        |             |         ; high-level definitions worked (or at least didn't crash)
5704:000 | DONE dir | em 16 16 | 006df5 | (35 bytes)  |         .byte 2e, 28, 20, 4c, 69, 61, 72, 61, 20, 46, 6f, 72, 74, (...) 
5704:000 | DONE dir | em 16 16 |        |             |                 2e 28 20 4c 69 61 72 61  --  . (   L i a r a
5704:000 | DONE dir | em 16 16 |        |             |                 20 46 6f 72 74 68 20 66  --    F o r t h   f
5704:000 | DONE dir | em 16 16 |        |             |                 6f 72 20 74 68 65 20 57  --  o r   t h e   W
5704:000 | DONE dir | em 16 16 |        |             |                 36 35 43 32 36 35 53 58  --  6 5 C 2 6 5 S X
5704:000 | DONE dir | em 16 16 |        |             |                 42 20 29                 --  B   )
5705:000 | DONE dir | em 16 16 | 006e18 | (38 bytes)  |         .byte 63, 72, 20, 2e, 28, 20, 56, 65, 72, 73, 69, 6f, 6e, (...) 
5705:000 | DONE dir | em 16 16 |        |             |                 63 72 20 2e 28 20 56 65  --  c r   . (   V e
5705:000 | DONE dir | em 16 16 |        |             |                 72 73 69 6f 6e 20 50 52  --  r s i o n   P R
5705:000 | DONE dir | em 16 16 |        |             |                 45 2d 41 4c 50 48 41 20  --  E - A L P H A  
5705:000 | DONE dir | em 16 16 |        |             |                 39 2e 20 4d 61 72 63 68  --  9 .   M a r c h
5705:000 | DONE dir | em 16 16 |        |             |                 20 32 30 31 37 29        --    2 0 1 7 )
5706:000 | DONE dir | em 16 16 | 006e3e | (51 bytes)  |         .byte 63, 72, 20, 2e, 28, 20, 53, 63, 6f, 74, 20, 57, 2e, (...) 
5706:000 | DONE dir | em 16 16 |        |             |                 63 72 20 2e 28 20 53 63  --  c r   . (   S c
5706:000 | DONE dir | em 16 16 |        |             |                 6f 74 20 57 2e 20 53 74  --  o t   W .   S t
5706:000 | DONE dir | em 16 16 |        |             |                 65 76 65 6e 73 6f 6e 20  --  e v e n s o n  
5706:000 | DONE dir | em 16 16 |        |             |                 3c 73 63 6f 74 2e 73 74  --  < s c o t . s t
5706:000 | DONE dir | em 16 16 |        |             |                 65 76 65 6e 73 6f 6e 40  --  e v e n s o n @
5706:000 | DONE dir | em 16 16 |        |             |                 67 6d 61 69 6c 2e 63 6f  --  g m a i l . c o
5706:000 | DONE dir | em 16 16 |        |             |                 6d 3e 29                 --  m > )
5707:000 | DONE dir | em 16 16 | 006e71 | (52 bytes)  |         .byte 63, 72, 20, 2e, 28, 20, 4c, 69, 61, 72, 61, 20, 46, (...) 
5707:000 | DONE dir | em 16 16 |        |             |                 63 72 20 2e 28 20 4c 69  --  c r   . (   L i
5707:000 | DONE dir | em 16 16 |        |             |                 61 72 61 20 46 6f 72 74  --  a r a   F o r t
5707:000 | DONE dir | em 16 16 |        |             |                 68 20 63 6f 6d 65 73 20  --  h   c o m e s  
5707:000 | DONE dir | em 16 16 |        |             |                 77 69 74 68 20 61 62 73  --  w i t h   a b s
5707:000 | DONE dir | em 16 16 |        |             |                 6f 6c 75 74 65 6c 79 20  --  o l u t e l y  
5707:000 | DONE dir | em 16 16 |        |             |                 4e 4f 20 57 41 52 52 41  --  N O   W A R R A
5707:000 | DONE dir | em 16 16 |        |             |                 4e 54 59 29              --  N T Y )
5708:000 | DONE dir | em 16 16 | 006ea5 | (28 bytes)  |         .byte 63, 72, 20, 2e, 28, 20, 54, 79, 70, 65, 20, 27, 62, (...) 
5708:000 | DONE dir | em 16 16 |        |             |                 63 72 20 2e 28 20 54 79  --  c r   . (   T y
5708:000 | DONE dir | em 16 16 |        |             |                 70 65 20 27 62 79 65 27  --  p e   ' b y e '
5708:000 | DONE dir | em 16 16 |        |             |                 20 74 6f 20 65 78 69 74  --    t o   e x i t
5708:000 | DONE dir | em 16 16 |        |             |                 29 20 63 72              --  )   c r
5709:000 | DONE lbl | em 16 16 | 006ec1 |             | hi-end                               
5710:000 | DONE wsp | em 16 16 |        |             |
5711:000 | DONE wsp | em 16 16 |        |             |
5712:000 | DONE wsp | em 16 16 |        |             |
5713:000 | DONE cmt | em 16 16 |        |             | ; ===================================================================
5714:000 | DONE cmt | em 16 16 |        |             | ; BOTTOM INCLUDES
5715:000 | DONE wsp | em 16 16 |        |             |
5716:000 | DONE cmt | em 16 16 |        |             | ; List of Strings for Liara Forth for the W65C265SXB
5716:001 | DONE cmt | em 16 16 |        |             | ; Scot W. Stevenson <scot.stevenson@gmail.com>
5716:002 | DONE cmt | em 16 16 |        |             | ; First version: 01. Apr 2016
5716:003 | DONE cmt | em 16 16 |        |             | ; This version:  05. Mar 2017
5716:004 | DONE wsp | em 16 16 |        |             |
5716:005 | DONE cmt | em 16 16 |        |             | ; This file is included by liaraforth.tasm
5716:006 | DONE wsp | em 16 16 |        |             |
5716:007 | DONE cmt | em 16 16 |        |             | ; ===================================================================
5716:008 | DONE cmt | em 16 16 |        |             | ; GENERAL
5716:009 | DONE wsp | em 16 16 |        |             |
5716:010 | DONE cmt | em 16 16 |        |             | ; All general strings must be zero-terminated, names start with "s_"
5716:011 | DONE wsp | em 16 16 |        |             |
5716:012 | DONE lbl | em 16 16 | 006ec1 |             | s_ok                                 
5716:013 | DONE dir | em 16 16 | 006ec1 | (4 bytes)   |         .byte 20, 6f, 6b, 0          note space at beginning
5716:013 | DONE dir | em 16 16 |        |             |                 20 6f 6b 00              --    o k .
5716:014 | DONE lbl | em 16 16 | 006ec5 |             | s_compiled                           
5716:015 | DONE dir | em 16 16 | 006ec5 | (10 bytes)  |         .byte 20, 63, 6f, 6d, 70, 69, 6c, 65, 64, 0 
5716:015 | DONE dir | em 16 16 |        |             |                 20 63 6f 6d 70 69 6c 65  --    c o m p i l e
5716:015 | DONE dir | em 16 16 |        |             |                 64 00                    --  d .
5716:016 | DONE wsp | em 16 16 |        |             |
5716:017 | DONE wsp | em 16 16 |        |             |
5716:018 | DONE cmt | em 16 16 |        |             | ; ===================================================================
5716:019 | DONE cmt | em 16 16 |        |             | ; ERROR STRINGS
5716:020 | DONE wsp | em 16 16 |        |             |
5716:021 | DONE cmt | em 16 16 |        |             | ; All error strings must be zero-terminated, names start with "es_"
5716:022 | DONE wsp | em 16 16 |        |             |
5716:023 | DONE lbl | em 16 16 | 006ecf |             | es_allot                             
5716:024 | DONE dir | em 16 16 | 006ecf | (20 bytes)  |         .byte 41, 4c, 4c, 4f, 54, 20, 6f, 75, 74, 20, 6f, 66, 20, (...) 
5716:024 | DONE dir | em 16 16 |        |             |                 41 4c 4c 4f 54 20 6f 75  --  A L L O T   o u
5716:024 | DONE dir | em 16 16 |        |             |                 74 20 6f 66 20 62 6f 75  --  t   o f   b o u
5716:024 | DONE dir | em 16 16 |        |             |                 6e 64 73 00              --  n d s .
5716:025 | DONE lbl | em 16 16 | 006ee3 |             | es_componly                          
5716:026 | DONE dir | em 16 16 | 006ee3 | (33 bytes)  |         .byte 49, 6e, 74, 65, 72, 70, 72, 65, 74, 69, 6e, 67, 20, (...) 
5716:026 | DONE dir | em 16 16 |        |             |                 49 6e 74 65 72 70 72 65  --  I n t e r p r e
5716:026 | DONE dir | em 16 16 |        |             |                 74 69 6e 67 20 61 20 63  --  t i n g   a   c
5716:026 | DONE dir | em 16 16 |        |             |                 6f 6d 70 69 6c 65 2d 6f  --  o m p i l e - o
5716:026 | DONE dir | em 16 16 |        |             |                 6e 6c 79 20 77 6f 72 64  --  n l y   w o r d
5716:026 | DONE dir | em 16 16 |        |             |                 00                       --  .
5716:027 | DONE lbl | em 16 16 | 006f04 |             | es_defer                             
5716:028 | DONE dir | em 16 16 | 006f04 | (29 bytes)  |         .byte 44, 45, 46, 45, 52, 65, 64, 20, 77, 6f, 72, 64, 20, (...) 
5716:028 | DONE dir | em 16 16 |        |             |                 44 45 46 45 52 65 64 20  --  D E F E R e d  
5716:028 | DONE dir | em 16 16 |        |             |                 77 6f 72 64 20 6e 6f 74  --  w o r d   n o t
5716:028 | DONE dir | em 16 16 |        |             |                 20 64 65 66 69 6e 65 64  --    d e f i n e d
5716:028 | DONE dir | em 16 16 |        |             |                 20 79 65 74 00           --    y e t .
5716:029 | DONE lbl | em 16 16 | 006f21 |             | es_divzero                           
5716:030 | DONE dir | em 16 16 | 006f21 | (17 bytes)  |         .byte 44, 69, 76, 69, 73, 69, 6f, 6e, 20, 62, 79, 20, 7a, (...) 
5716:030 | DONE dir | em 16 16 |        |             |                 44 69 76 69 73 69 6f 6e  --  D i v i s i o n
5716:030 | DONE dir | em 16 16 |        |             |                 20 62 79 20 7a 65 72 6f  --    b y   z e r o
5716:030 | DONE dir | em 16 16 |        |             |                 00                       --  .
5716:031 | DONE lbl | em 16 16 | 006f32 |             | es_error                             
5716:032 | DONE dir | em 16 16 | 006f32 | (12 bytes)  |         .byte 3e, 3e, 3e, 45, 72, 72, 6f, 72, 3c, 3c, 3c, 0 
5716:032 | DONE dir | em 16 16 |        |             |                 3e 3e 3e 45 72 72 6f 72  --  > > > E r r o r
5716:032 | DONE dir | em 16 16 |        |             |                 3c 3c 3c 00              --  < < < .
5716:033 | DONE lbl | em 16 16 | 006f3e |             | es_intonly                           
5716:034 | DONE dir | em 16 16 | 006f3e | (22 bytes)  |         .byte 4e, 6f, 74, 20, 69, 6e, 20, 69, 6e, 74, 65, 72, 70, (...) 
5716:034 | DONE dir | em 16 16 |        |             |                 4e 6f 74 20 69 6e 20 69  --  N o t   i n   i
5716:034 | DONE dir | em 16 16 |        |             |                 6e 74 65 72 70 72 65 74  --  n t e r p r e t
5716:034 | DONE dir | em 16 16 |        |             |                 20 6d 6f 64 65 00        --    m o d e .
5716:035 | DONE lbl | em 16 16 | 006f54 |             | es_noname                            
5716:036 | DONE dir | em 16 16 | 006f54 | (16 bytes)  |         .byte 50, 61, 72, 73, 69, 6e, 67, 20, 66, 61, 69, 6c, 75, (...) 
5716:036 | DONE dir | em 16 16 |        |             |                 50 61 72 73 69 6e 67 20  --  P a r s i n g  
5716:036 | DONE dir | em 16 16 |        |             |                 66 61 69 6c 75 72 65 00  --  f a i l u r e .
5716:036 | DONE dir | em 16 16 |        |             |                                          -- 
5716:037 | DONE lbl | em 16 16 | 006f64 |             | es_radix                             
5716:038 | DONE dir | em 16 16 | 006f64 | (23 bytes)  |         .byte 44, 69, 67, 69, 74, 20, 6c, 61, 72, 67, 65, 72, 20, (...) 
5716:038 | DONE dir | em 16 16 |        |             |                 44 69 67 69 74 20 6c 61  --  D i g i t   l a
5716:038 | DONE dir | em 16 16 |        |             |                 72 67 65 72 20 74 68 61  --  r g e r   t h a
5716:038 | DONE dir | em 16 16 |        |             |                 6e 20 62 61 73 65 00     --  n   b a s e .
5716:039 | DONE lbl | em 16 16 | 006f7b |             | es_refill1                           
5716:040 | DONE dir | em 16 16 | 006f7b | (46 bytes)  |         .byte 51, 55, 49, 54, 20, 63, 6f, 75, 6c, 64, 20, 6e, 6f, (...) 
5716:040 | DONE dir | em 16 16 |        |             |                 51 55 49 54 20 63 6f 75  --  Q U I T   c o u
5716:040 | DONE dir | em 16 16 |        |             |                 6c 64 20 6e 6f 74 20 67  --  l d   n o t   g
5716:040 | DONE dir | em 16 16 |        |             |                 65 74 20 69 6e 70 75 74  --  e t   i n p u t
5716:040 | DONE dir | em 16 16 |        |             |                 20 28 52 45 46 49 4c 4c  --    ( R E F I L L
5716:040 | DONE dir | em 16 16 |        |             |                 20 72 65 74 75 72 6e 65  --    r e t u r n e
5716:040 | DONE dir | em 16 16 |        |             |                 64 20 2d 31 29 00        --  d   - 1 ) .
5716:041 | DONE lbl | em 16 16 | 006fa9 |             | es_refill2                           
5716:042 | DONE dir | em 16 16 | 006fa9 | (32 bytes)  |         .byte 49, 6c, 6c, 65, 67, 61, 6c, 20, 53, 4f, 55, 52, 43, (...) 
5716:042 | DONE dir | em 16 16 |        |             |                 49 6c 6c 65 67 61 6c 20  --  I l l e g a l  
5716:042 | DONE dir | em 16 16 |        |             |                 53 4f 55 52 43 45 2d 49  --  S O U R C E - I
5716:042 | DONE dir | em 16 16 |        |             |                 44 20 64 75 72 69 6e 67  --  D   d u r i n g
5716:042 | DONE dir | em 16 16 |        |             |                 20 52 45 46 49 4c 4c 00  --    R E F I L L .
5716:042 | DONE dir | em 16 16 |        |             |                                          -- 
5716:043 | DONE lbl | em 16 16 | 006fc9 |             | es_state                             
5716:044 | DONE dir | em 16 16 | 006fc9 | (24 bytes)  |         .byte 41, 6c, 72, 65, 61, 64, 79, 20, 69, 6e, 20, 63, 6f, (...) 
5716:044 | DONE dir | em 16 16 |        |             |                 41 6c 72 65 61 64 79 20  --  A l r e a d y  
5716:044 | DONE dir | em 16 16 |        |             |                 69 6e 20 63 6f 6d 70 69  --  i n   c o m p i
5716:044 | DONE dir | em 16 16 |        |             |                 6c 65 20 6d 6f 64 65 00  --  l e   m o d e .
5716:044 | DONE dir | em 16 16 |        |             |                                          -- 
5716:045 | DONE lbl | em 16 16 | 006fe1 |             | es_underflow                         
5716:046 | DONE dir | em 16 16 | 006fe1 | (16 bytes)  |         .byte 53, 74, 61, 63, 6b, 20, 75, 6e, 64, 65, 72, 66, 6c, (...) 
5716:046 | DONE dir | em 16 16 |        |             |                 53 74 61 63 6b 20 75 6e  --  S t a c k   u n
5716:046 | DONE dir | em 16 16 |        |             |                 64 65 72 66 6c 6f 77 00  --  d e r f l o w .
5716:046 | DONE dir | em 16 16 |        |             |                                          -- 
5716:047 | DONE lbl | em 16 16 | 006ff1 |             | es_syntax                            
5716:048 | DONE dir | em 16 16 | 006ff1 | (15 bytes)  |         .byte 55, 6e, 64, 65, 66, 69, 6e, 65, 64, 20, 77, 6f, 72, (...) 
5716:048 | DONE dir | em 16 16 |        |             |                 55 6e 64 65 66 69 6e 65  --  U n d e f i n e
5716:048 | DONE dir | em 16 16 |        |             |                 64 20 77 6f 72 64 00     --  d   w o r d .
5716:049 | DONE wsp | em 16 16 |        |             |
5716:050 | DONE wsp | em 16 16 |        |             |
5716:051 | DONE cmt | em 16 16 |        |             | ; ===================================================================
5716:052 | DONE cmt | em 16 16 |        |             | ; ANSI VT-100 SEQUENCES
5716:053 | DONE wsp | em 16 16 |        |             |
5716:054 | DONE lbl | em 16 16 | 007000 |             | vt100_page                           
5716:055 | DONE dir | em 16 16 | 007000 | (5 bytes)   |         .byte AscESC, 5b, 32, 4a, 0  clear screen
5716:055 | DONE dir | em 16 16 |        |             |                 1b 5b 32 4a 00           --  . [ 2 J .
5716:056 | DONE lbl | em 16 16 | 007005 |             | vt100_home                           
5716:057 | DONE dir | em 16 16 | 007005 | (4 bytes)   |         .byte AscESC, 5b, 48, 0      cursor home
5716:057 | DONE dir | em 16 16 |        |             |                 1b 5b 48 00              --  . [ H .
5716:058 | DONE wsp | em 16 16 |        |             |
5716:059 | DONE wsp | em 16 16 |        |             |
5716:060 | DONE cmt | em 16 16 |        |             | ; ===================================================================
5716:061 | DONE cmt | em 16 16 |        |             | ; TESTING STRINGS
5716:062 | DONE wsp | em 16 16 |        |             |
5716:063 | DONE cmt | em 16 16 |        |             | ; These strings are only used during testing and are removed as Liara Forth is
5716:064 | DONE cmt | em 16 16 |        |             | ; developed. All start with "tests_"
5716:065 | DONE wsp | em 16 16 |        |             |
5716:066 | DONE lbl | em 16 16 | 007009 |             | tests_prev_cmd                       
5716:067 | DONE dir | em 16 16 | 007009 | (19 bytes)  |         .byte 28, 70, 72, 65, 76, 69, 6f, 75, 73, 20, 63, 6f, 6d, (...) 
5716:067 | DONE dir | em 16 16 |        |             |                 28 70 72 65 76 69 6f 75  --  ( p r e v i o u
5716:067 | DONE dir | em 16 16 |        |             |                 73 20 63 6f 6d 6d 61 6e  --  s   c o m m a n
5716:067 | DONE dir | em 16 16 |        |             |                 64 29 00                 --  d ) .
5716:068 | DONE lbl | em 16 16 | 00701c |             | tests_next_cmd                       
5716:069 | DONE dir | em 16 16 | 00701c | (15 bytes)  |         .byte 28, 6e, 65, 78, 74, 20, 63, 6f, 6d, 6d, 61, 6e, 64, (...) 
5716:069 | DONE dir | em 16 16 |        |             |                 28 6e 65 78 74 20 63 6f  --  ( n e x t   c o
5716:069 | DONE dir | em 16 16 |        |             |                 6d 6d 61 6e 64 29 00     --  m m a n d ) .
5716:070 | DONE wsp | em 16 16 |        |             |
5716:071 | DONE wsp | em 16 16 |        |             |
5716:072 | DONE cmt | em 16 16 |        |             | ; ===================================================================
5716:073 | DONE cmt | em 16 16 |        |             | ; ALPHABET STRINGS
5716:074 | DONE wsp | em 16 16 |        |             |
5716:075 | DONE cmt | em 16 16 |        |             | ; Leave alphastr as the last entry in the source code to make it easier to
5716:076 | DONE cmt | em 16 16 |        |             | ; see where this section ends. This cannot be a zero-terminated string
5716:077 | DONE wsp | em 16 16 |        |             |
5716:078 | DONE lbl | em 16 16 | 00702b |             | alphastring                          
5716:079 | DONE dir | em 16 16 | 00702b | (35 bytes)  |         .byte 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 61, 62, 63, (...) 
5716:079 | DONE dir | em 16 16 |        |             |                 30 31 32 33 34 35 36 37  --  0 1 2 3 4 5 6 7
5716:079 | DONE dir | em 16 16 |        |             |                 38 39 61 62 63 64 65 66  --  8 9 a b c d e f
5716:079 | DONE dir | em 16 16 |        |             |                 67 68 69 6a 6b 6c 6d 6e  --  g h i j k l m n
5716:079 | DONE dir | em 16 16 |        |             |                 6f 70 71 72 73 74 75 76  --  o p q r s t u v
5716:079 | DONE dir | em 16 16 |        |             |                 77 79 7a                 --  w y z
5717:000 | DONE wsp | em 16 16 |        |             |
5718:000 | DONE wsp | em 16 16 |        |             |
5719:000 | DONE cmt | em 16 16 |        |             | ; ===================================================================
5720:000 | DONE cmt | em 16 16 |        |             | ; END
5721:000 | DONE dir | em 16 16 |        |             |         .end                         

MACROS:
        (none)

SYMBOL TABLE:
- abortq_done                 : 005443
- abortq_rt                   : 005439
- accept_bs                   : 0054bf
- accept_eol                  : 0054b9
- accept_loop                 : 005466
- accept_nonzero              : 00545b
- adjust_z                    : 005650
- allot_done                  : 00551d
- allot_error                 : 00550c
- allot_minus                 : 005512
- allot_real_gone             : 00551f
- alphastring                 : 00702b
- ascbell                     : 000007
- ascbs                       : 000008
- asccc                       : 000003
- asccn                       : 00000e
- asccp                       : 000010
- asccr                       : 00000d
- ascdel                      : 00007f
- ascesc                      : 00001b
- asclf                       : 00000a
- ascsp                       : 000020
- base                        : 000016
- branch_rt                   : 005581
- brg_value                   : 00000b
- bsize                       : 000080
- buffer0                     : 000200
- buffer1                     : 000280
- byte_to_ascii               : 00689e
- char_got_char               : 0055ce
- cib                         : 000008
- ciblen                      : 00000a
- cmpl_body                   : 00685b
- cmpl_common                 : 00684e
- cmpl_jump                   : 00684b
- cmpl_subroutine             : 006846
- cmpl_word                   : 006841
- co                          : 000004
- code0                       : 005000
- compile_as_code             : 005621
- compile_as_jump             : 005621
- cp                          : 000000
- cp-end                      : 004fff
- cp0                         : 000300
- create_got_name             : 005685
- defer_error                 : 0067c8
- doconst                     : 0067b1
- dodefer                     : 0067bf
- dodoes                      : 0067ce
- does_rt                     : 0057a9
- dots_done                   : 00523b
- dots_loop                   : 00522b
- dots_not_empty              : 005224
- dovar                       : 0067db
- dp                          : 000002
- dpage                       : 000000
- dq_case_done                : 005721
- dq_checkbase                : 005724
- dq_notdigit                 : 00572b
- dq_success                  : 005736
- dsp0                        : 0000ff
- dtrailing_done              : 005323
- dtrailing_loop              : 00531a
- dump_byte_loop              : 0057cc
- dump_done                   : 0057e1
- dump_line_loop              : 0057c6
- emit_a                      : 0057f5
- equal_not                   : 005330
- erase_done                  : 00580f
- erase_loop                  : 005808
- error                       : 006867
- es_allot                    : 006ecf
- es_componly                 : 006ee3
- es_defer                    : 006f04
- es_divzero                  : 006f21
- es_error                    : 006f32
- es_intonly                  : 006f3e
- es_noname                   : 006f54
- es_radix                    : 006f64
- es_refill1                  : 006f7b
- es_refill2                  : 006fa9
- es_state                    : 006fc9
- es_syntax                   : 006ff1
- es_underflow                : 006fe1
- execute_ip                  : 005849
- find-name_all_chars         : 0058b5
- find-name_char_nomatcnt_8   : 0058b1
- find-name_chars             : 0058a6
- find-name_done              : 0058db
- find-name_failure_16        : 0058d8
- find-name_loop              : 005891
- find-name_next_entry        : 00589a
- find-name_success           : 0058d2
- find_found                  : 00586c
- find_imm                    : 005885
- fmmod_1                     : 0058fc
- fmmod_1_1                   : 005900
- fmmod_2                     : 00592d
- fmmod_2_1                   : 005931
- get_chr                     : 005045
- get_chr_wait                : 005049
- greater_nip                 : 00512f
- greater_no_ov               : 00512c
- hashs_loop                  : 0052b0
- have_chr                    : 005057
- havekey                     : 000012
- hi-end                      : 006ec1
- hi-start                    : 0068b9
- hw_acsr0                    : 00df70
- hw_acsr1                    : 00df72
- hw_acsr2                    : 00df74
- hw_acsr3                    : 00df76
- hw_artd0                    : 00df71
- hw_artd1                    : 00df73
- hw_artd2                    : 00df75
- hw_artd3                    : 00df77
- hw_bcr                      : 00df40
- hw_eier                     : 00df47
- hw_eifr                     : 00df45
- hw_pcs7                     : 00df27
- hw_pd0                      : 00df00
- hw_pd1                      : 00df01
- hw_pd2                      : 00df02
- hw_pd3                      : 00df03
- hw_pd4                      : 00df20
- hw_pd5                      : 00df21
- hw_pd6                      : 00df22
- hw_pd7                      : 00df23
- hw_pdd0                     : 00df04
- hw_pdd1                     : 00df05
- hw_pdd2                     : 00df06
- hw_pdd3                     : 00df07
- hw_pdd4                     : 00df24
- hw_pdd5                     : 00df25
- hw_pdd6                     : 00df26
- hw_sscr                     : 00df41
- hw_t0ch                     : 00df61
- hw_t0cl                     : 00df60
- hw_t1ch                     : 00df63
- hw_t1cl                     : 00df62
- hw_t2ch                     : 00df65
- hw_t2cl                     : 00df64
- hw_t3ch                     : 00df67
- hw_t3cl                     : 00df66
- hw_t4ch                     : 00df69
- hw_t4cl                     : 00df68
- hw_t5ch                     : 00df6b
- hw_t5cl                     : 00df6a
- hw_t6ch                     : 00df6d
- hw_t6cl                     : 00df6c
- hw_t7ch                     : 00df6f
- hw_t7cl                     : 00df6e
- hw_tcr                      : 00df42
- hw_ter                      : 00df43
- hw_tier                     : 00df46
- hw_tifr                     : 00df44
- hw_uier                     : 00df49
- hw_uifr                     : 00df48
- im                          : 000002
- in_found                    : 005973
- in_loop                     : 00595b
- in_notfound                 : 00596d
- input                       : 000010
- insrc                       : 000006
- interpret                   : 0067e2
- interpret_compile           : 00682c
- interpret_got_name_token    : 006806
- interpret_interpret         : 006826
- interpret_line_done         : 00683a
- interpret_loop              : 0067e2
- less_nip                    : 005105
- less_no_ov                  : 005102
- literal_rt                  : 0059c1
- lshift_done                 : 0059dd
- lshift_loop                 : 0059d7
- max_drop                    : 005a3a
- max_nip                     : 005a3c
- max_no_ov                   : 005a38
- min_drop                    : 005a4d
- min_nip                     : 005a4f
- min_no_ov                   : 005a4b
- move_cmoveup                : 005a60
- mstar_abs_nos               : 0059ee
- mstar_umstar                : 0059f8
- nc                          : 000001
- nc_limit                    : 000000
- nibble_to_ascii             : 0068a7
- not-equal_equal             : 005111
- nt_2drop                    : 006729
- nt_2dup                     : 006446
- nt_2over                    : 0066f4
- nt_2swap                    : 006701
- nt_2variable                : 00605d
- nt_abort                    : 006155
- nt_abortq                   : 006147
- nt_abs                      : 006452
- nt_accept                   : 006698
- nt_again                    : 0063b5
- nt_align                    : 005f7b
- nt_aligned                  : 005f6c
- nt_allot                    : 0063f1
- nt_and                      : 00653d
- nt_at-xy                    : 006045
- nt_backslash                : 0066b1
- nt_base                     : 00626b
- nt_begin                    : 0063c2
- nt_bell                     : 005fde
- nt_bl                       : 006206
- nt_bounds                   : 006762
- nt_bracketchar              : 0062de
- nt_brackettick              : 0062d3
- nt_branch                   : 0063a7
- nt_bye                      : 005f3d
- nt_c-comma                  : 006560
- nt_c-fetch                  : 00656a
- nt_c-store                  : 006574
- nt_cellplus                 : 005ff7
- nt_cells                    : 0062a2
- nt_char                     : 00650e
- nt_charplus                 : 006004
- nt_chars                    : 005fea
- nt_cmove                    : 00612d
- nt_cmoveup                  : 00611f
- nt_cold                     : 005f48
- nt_colon                    : 0063e8
- nt_comma                    : 00668f
- nt_compile-only             : 006311
- nt_compilecomma             : 0063cf
- nt_constant                 : 0064a7
- nt_count                    : 00613a
- nt_cr                       : 0061a4
- nt_create                   : 006425
- nt_dabs                     : 00606e
- nt_decimal                  : 006011
- nt_defer                    : 0063fe
- nt_depth                    : 006483
- nt_digitq                   : 006754
- nt_dminus                   : 0060b5
- nt_dnegate                  : 00607a
- nt_does                     : 006418
- nt_dot                      : 006257
- nt_dotquote                 : 0062af
- nt_dots                     : 00622b
- nt_dplus                    : 0060bf
- nt_drop                     : 0067a5
- nt_dtos                     : 006089
- nt_dtrailing                : 006378
- nt_dump                     : 005fa8
- nt_dup                      : 00679a
- nt_emit                     : 00624b
- nt_equal                    : 0065f3
- nt_erase                    : 0061ba
- nt_evaluate                 : 006292
- nt_execute                  : 00670e
- nt_false                    : 0065fc
- nt_fetch                    : 00677c
- nt_fill                     : 0061ae
- nt_find                     : 005f60
- nt_find-name                : 00664d
- nt_fmmod                    : 0060c9
- nt_fromr                    : 006740
- nt_greater                  : 0065cd
- nt_hash                     : 0061f3
- nt_hashs                    : 0061dd
- nt_here                     : 00671d
- nt_hex                      : 006020
- nt_hold                     : 0061d1
- nt_immediate                : 006325
- nt_input                    : 006277
- nt_int-name                 : 006184
- nt_invert                   : 006500
- nt_key                      : 0066a6
- nt_latestnt                 : 006358
- nt_latestxt                 : 006368
- nt_leftbracket              : 00634f
- nt_less                     : 0065d6
- nt_lessnumber               : 0061fc
- nt_literal                  : 0062ec
- nt_lshift                   : 006548
- nt_marker                   : 005fb4
- nt_max                      : 0064e7
- nt_min                      : 0064dc
- nt_minus                    : 006588
- nt_move                     : 0064d0
- nt_mrot                     : 0066dd
- nt_mstar                    : 00610a
- nt_name-int                 : 006194
- nt_name-string              : 006433
- nt_native-compile           : 0062fb
- nt_negate                   : 0064f2
- nt_nip                      : 0066d2
- nt_not-equal                : 0065e9
- nt_number                   : 006624
- nt_numbermore               : 0061c7
- nt_one                      : 00663b
- nt_one-minus                : 00659a
- nt_one-plus                 : 0065a4
- nt_or                       : 006533
- nt_output                   : 006284
- nt_over                     : 006770
- nt_pad                      : 006260
- nt_page                     : 006039
- nt_parse                    : 006162
- nt_parse-name               : 00666c
- nt_pick                     : 005fd2
- nt_plus                     : 006591
- nt_plusstore                : 006556
- nt_postpone                 : 006336
- nt_qdup                     : 0066ba
- nt_question                 : 00617b
- nt_quit                     : 00616f
- nt_refill                   : 00665e
- nt_rfetch                   : 006736
- nt_rightbracket             : 006346
- nt_rot                      : 0066e9
- nt_rshift                   : 00651a
- nt_semicolon                : 0063df
- nt_sign                     : 0061e7
- nt_slashstring              : 006389
- nt_sliteral                 : 0062c3
- nt_smrem                    : 0060d7
- nt_source                   : 006475
- nt_source-id                : 00667e
- nt_space                    : 00621e
- nt_spaces                   : 006210
- nt_squote                   : 0062b9
- nt_star                     : 006101
- nt_state                    : 00645d
- nt_stod                     : 006094
- nt_store                    : 006785
- nt_swap                     : 00678e
- nt_tick                     : 0064c7
- nt_to                       : 006490
- nt_to-in                    : 00646a
- nt_tobody                   : 00640b
- nt_tonumber                 : 006615
- nt_tor                      : 00674a
- nt_true                     : 006609
- nt_tuck                     : 0066c6
- nt_two                      : 006632
- nt_two-star                 : 00657e
- nt_twofromr                 : 00609f
- nt_tworfetch                : 006052
- nt_twotor                   : 0060aa
- nt_type                     : 006235
- nt_udmod                    : 0060e5
- nt_udot                     : 006241
- nt_ummod                    : 0060f3
- nt_umstar                   : 006114
- nt_unused                   : 00602b
- nt_value                    : 00649a
- nt_variable                 : 0064b7
- nt_word                     : 005f54
- nt_words                    : 005f9b
- nt_wordsize                 : 005fc2
- nt_wordsnsizes              : 005f88
- nt_xor                      : 006528
- nt_zbranch                  : 006398
- nt_zero                     : 006644
- nt_zero-equal               : 0065df
- nt_zero-less                : 0065c3
- nt_zero-more                : 0065b9
- nt_zero-notequal            : 0065ae
- number_dot                  : 005aa8
- number_loop                 : 005acf
- number_main                 : 005ac1
- number_ok                   : 005adb
- number_single               : 005b03
- output                      : 00000e
- padoffset                   : 0000ff
- parse-name_empty_line       : 005b55
- parse-name_found            : 005b69
- parse-name_loop             : 005b48
- parse_found_delimiter       : 005b95
- parse_loop                  : 005b88
- parse_reached_eol           : 005b99
- pp_got_nt                   : 005bd9
- pp_got_word                 : 005bd1
- pp_not_immediate            : 005be9
- print_number                : 006885
- print_string                : 00686d
- print_string_done           : 00687c
- put_chr                     : 005034
- put_chr_wait                : 005039
- quit_compiled               : 0050eb
- quit_get_line               : 0050c0
- quit_ok                     : 0050e2
- quit_print                  : 0050ee
- quit_refill_successful      : 0050ce
- ram-end                     : 007fff
- ram-start                   : 000000
- refill_source_is_not_string : 005c2b
- refill_src_not_kbd          : 005c22
- reset_hardware              : 005000
- rshift_done                 : 005c4a
- rshift_loop                 : 005c44
- s_compiled                  : 006ec5
- s_ok                        : 006ec1
- scratch                     : 000026
- sign_plus                   : 005c9e
- sl_loop                     : 005cc3
- sliteral_rt                 : 005cee
- smrem_1                     : 005d3e
- smrem_1_1                   : 005d42
- smrem_2                     : 005d59
- smrem_2_1                   : 005d5d
- spaces_done                 : 005d80
- squote_compile              : 005c81
- stack                       : 000100
- stack0                      : 0001ff
- start                       : 005067
- state                       : 000014
- stod_pos                    : 005c91
- tests_next_cmd              : 00701c
- tests_prev_cmd              : 007009
- tick_have_nt                : 00542b
- tick_have_word              : 00541f
- tmp1                        : 00001c
- tmp2                        : 00001e
- tmp3                        : 000020
- tmpbranch                   : 00001a
- tmpdsp                      : 000022
- tmptos                      : 000024
- tobody_have_cfa             : 005153
- tobody_nojsr                : 005155
- tohold                      : 000018
- toin                        : 00000c
- tonumber_done               : 0051ae
- tonumber_loop               : 00516a
- tonumber_ok                 : 005179
- type_done                   : 005dd0
- type_loop                   : 005dc4
- ummod_complete              : 005ea2
- ummod_notzero               : 005e63
- ummod_overflow              : 005e99
- ummod_shift                 : 005e7b
- umstar_counter              : 005e32
- umstar_loop                 : 005e24
- umstar_one_nos              : 005e45
- umstar_one_tos              : 005e42
- umstar_two_common           : 005e51
- umstar_two_nos              : 005e50
- umstar_two_tos              : 005e4c
- umstar_zero                 : 005e3b
- user0                       : 000000
- vt100_home                  : 007005
- vt100_page                  : 007000
- words_common                : 005ee8
- words_loop                  : 005ef2
- words_nosizes               : 005f0f
- workword                    : 000004
- xt_2drop                    : 0053b1
- xt_2dup                     : 0053b8
- xt_2over                    : 0053c3
- xt_2swap                    : 0053ef
- xt_2variable                : 005400
- xt_abort                    : 0050ad
- xt_abortq                   : 00542f
- xt_abs                      : 00544c
- xt_accept                   : 005455
- xt_again                    : 0054e1
- xt_align                    : 0054f7
- xt_aligned                  : 0054f9
- xt_allot                    : 0054fb
- xt_and                      : 005524
- xt_at-xy                    : 00552b
- xt_backslash                : 0052ef
- xt_base                     : 005553
- xt_begin                    : 005561
- xt_bell                     : 00555b
- xt_bl                       : 005568
- xt_bounds                   : 005570
- xt_bracketchar              : 0052e8
- xt_brackettick              : 0052d9
- xt_branch                   : 00557a
- xt_bye                      : 00558e
- xt_c-comma                  : 005595
- xt_c-fetch                  : 0055a3
- xt_c-store                  : 0055af
- xt_cellplus                 : 0055bf
- xt_char                     : 0055c2
- xt_chars                    : 0055da
- xt_cmove                    : 0055dc
- xt_cmoveup                  : 0055ff
- xt_cold                     : 005064
- xt_colon                    : 00524b
- xt_comma                    : 00523f
- xt_compile-only             : 005618
- xt_compilecomma             : 005621
- xt_constant                 : 005637
- xt_count                    : 005666
- xt_cr                       : 005674
- xt_create                   : 00567a
- xt_dabs                     : 00576c
- xt_decimal                  : 005773
- xt_defer                    : 0056ea
- xt_depth                    : 005779
- xt_digitq                   : 005704
- xt_dminus                   : 005752
- xt_dnegate                  : 005788
- xt_does                     : 00579c
- xt_dot                      : 0051d5
- xt_dotquote                 : 0051f4
- xt_dots                     : 005208
- xt_dplus                    : 005740
- xt_drop                     : 0057bf
- xt_dtos                     : 005767
- xt_dtrailing                : 005310
- xt_dump                     : 0057c4
- xt_dup                      : 0057eb
- xt_emit                     : 0057f0
- xt_equal                    : 005327
- xt_erase                    : 0057f8
- xt_evaluate                 : 00581a
- xt_execute                  : 00584c
- xt_fetch                    : 0052d4
- xt_fill                     : 0057ff
- xt_find                     : 005856
- xt_find-name                : 005887
- xt_fmmod                    : 0058de
- xt_fromr                    : 005c02
- xt_greater                  : 00511e
- xt_hash                     : 005286
- xt_hashs                    : 0052b0
- xt_here                     : 00597c
- xt_hex                      : 005983
- xt_hold                     : 005989
- xt_immediate                : 005941
- xt_input                    : 00594a
- xt_int-name                 : 005952
- xt_invert                   : 005976
- xt_key                      : 005932
- xt_latestnt                 : 005997
- xt_latestxt                 : 00599f
- xt_leftbracket              : 0052df
- xt_less                     : 0050f4
- xt_lessnumber               : 005114
- xt_literal                  : 0059af
- xt_lshift                   : 0059ce
- xt_marker                   : 005a02
- xt_max                      : 005a2c
- xt_min                      : 005a3f
- xt_minus                    : 0052fc
- xt_move                     : 005a52
- xt_mrot                     : 005307
- xt_mstar                    : 0059e2
- xt_name-int                 : 005a63
- xt_name-string              : 005a6c
- xt_native-compile           : 005a7d
- xt_negate                   : 005a86
- xt_nip                      : 005a8d
- xt_not-equal                : 005108
- xt_number                   : 005a90
- xt_numbermore               : 0052a1
- xt_one                      : 005388
- xt_one-minus                : 005390
- xt_one-plus                 : 005392
- xt_or                       : 005b14
- xt_output                   : 005b1b
- xt_over                     : 005b23
- xt_pad                      : 005b2a
- xt_page                     : 005b36
- xt_parse                    : 005b75
- xt_parse-name               : 005b43
- xt_pick                     : 005ba8
- xt_plus                     : 0052f4
- xt_plusstore                : 005bb6
- xt_postpone                 : 005bc6
- xt_qdup                     : 0052c0
- xt_question                 : 0052b9
- xt_quit                     : 0050b5
- xt_refill                   : 005c0a
- xt_rfetch                   : 005bf9
- xt_rightbracket             : 0052e2
- xt_rot                      : 005c32
- xt_rshift                   : 005c3b
- xt_semicolon                : 00526d
- xt_sign                     : 005c95
- xt_slashstring              : 0051c3
- xt_sliteral                 : 005ca3
- xt_smrem                    : 005d04
- xt_source                   : 005d5e
- xt_source-id                : 005d6b
- xt_space                    : 005d72
- xt_spaces                   : 005d78
- xt_squote                   : 005c4f
- xt_star                     : 005d85
- xt_state                    : 005d8d
- xt_stod                     : 005c85
- xt_store                    : 0052c8
- xt_swap                     : 005d95
- xt_tick                     : 005413
- xt_to                       : 005d9b
- xt_to-in                    : 005156
- xt_tobody                   : 005132
- xt_tonumber                 : 00515e
- xt_tor                      : 0051bb
- xt_true                     : 005da5
- xt_tuck                     : 005dad
- xt_two                      : 005394
- xt_two-star                 : 00539c
- xt_twofromr                 : 0053d0
- xt_tworfetch                : 0053e1
- xt_twotor                   : 0053a0
- xt_type                     : 005db6
- xt_udmod                    : 005de0
- xt_udot                     : 005dd7
- xt_ummod                    : 005e5a
- xt_umstar                   : 005dfb
- xt_unused                   : 005eab
- xt_variable                 : 005eb7
- xt_word                     : 005ec6
- xt_words                    : 005ee6
- xt_wordsize                 : 005f23
- xt_wordsnsizes              : 005edf
- xt_xor                      : 005f36
- xt_zbranch                  : 00536a
- xt_zero                     : 005333
- xt_zero-equal               : 00533b
- xt_zero-less                : 005347
- xt_zero-more                : 00535f
- xt_zero-notequal            : 005353
- z_2drop                     : 0053b7
- z_2dup                      : 0053c2
- z_2over                     : 0053cf
- z_2swap                     : 0053ff
- z_2variable                 : 005412
- z_abort                     : 0050f4
- z_abortq                    : 00544b
- z_abs                       : 005454
- z_accept                    : 0054e0
- z_again                     : 0054f6
- z_align                     : 0054f8
- z_aligned                   : 0054fa
- z_allot                     : 005523
- z_and                       : 00552a
- z_at-xy                     : 005552
- z_backslash                 : 0052f3
- z_base                      : 00555a
- z_begin                     : 005567
- z_bell                      : 005561
- z_bl                        : 00556f
- z_bounds                    : 005579
- z_bracketchar               : 0052ee
- z_brackettick               : 0052df
- z_branch                    : 005580
- z_bye                       : 005595
- z_c-comma                   : 0055a2
- z_c-fetch                   : 0055ae
- z_c-store                   : 0055be
- z_cellplus                  : 0055c1
- z_char                      : 0055d9
- z_chars                     : 0055db
- z_cmove                     : 0055fe
- z_cmoveup                   : 005617
- z_cold                      : 0050f4
- z_colon                     : 00526c
- z_comma                     : 00524a
- z_compile-only              : 005620
- z_compilecomma              : 005636
- z_constant                  : 005665
- z_count                     : 005673
- z_cr                        : 00567a
- z_create                    : 0056e9
- z_dabs                      : 005772
- z_decimal                   : 005778
- z_defer                     : 005704
- z_depth                     : 005787
- z_digitq                    : 00573f
- z_dminus                    : 005766
- z_dnegate                   : 00579b
- z_does                      : 0057a8
- z_dot                       : 0051f3
- z_dotquote                  : 005208
- z_dots                      : 00523e
- z_dplus                     : 005751
- z_drop                      : 0057c3
- z_dtos                      : 00576b
- z_dtrailing                 : 005326
- z_dump                      : 0057ea
- z_dup                       : 0057ef
- z_emit                      : 0057f8
- z_equal                     : 005332
- z_erase                     : 005819
- z_evaluate                  : 005848
- z_execute                   : 005856
- z_fetch                     : 0052d8
- z_fill                      : 005819
- z_find                      : 005886
- z_find-name                 : 0058dd
- z_fmmod                     : 005931
- z_fromr                     : 005c09
- z_greater                   : 005131
- z_hash                      : 0052a0
- z_hashs                     : 0052b8
- z_here                      : 005982
- z_hex                       : 005988
- z_hold                      : 005996
- z_immediate                 : 005949
- z_input                     : 005951
- z_int-name                  : 005975
- z_invert                    : 00597b
- z_key                       : 005941
- z_latestnt                  : 00599e
- z_latestxt                  : 0059ae
- z_leftbracket               : 0052e1
- z_less                      : 005107
- z_lessnumber                : 00511d
- z_literal                   : 0059c0
- z_lshift                    : 0059e1
- z_marker                    : 005a2b
- z_max                       : 005a3e
- z_min                       : 005a51
- z_minus                     : 005306
- z_move                      : 005a63
- z_mrot                      : 00530f
- z_mstar                     : 005a01
- z_name-int                  : 005a6b
- z_name-string               : 005a7c
- z_native-compile            : 005a85
- z_negate                    : 005a8c
- z_nip                       : 005a8f
- z_not-equal                 : 005113
- z_number                    : 005b13
- z_numbermore                : 0052af
- z_one                       : 00538f
- z_one-minus                 : 005391
- z_one-plus                  : 005393
- z_or                        : 005b1a
- z_output                    : 005b22
- z_over                      : 005b29
- z_pad                       : 005b35
- z_page                      : 005b42
- z_parse                     : 005ba7
- z_parse-name                : 005ba7
- z_pick                      : 005bb5
- z_plus                      : 0052fb
- z_plusstore                 : 005bc5
- z_postpone                  : 005bf8
- z_qdup                      : 0052c7
- z_question                  : 0052bf
- z_quit                      : 0050f4
- z_refill                    : 005c31
- z_rfetch                    : 005c01
- z_rightbracket              : 0052e7
- z_rot                       : 005c3a
- z_rshift                    : 005c4e
- z_semicolon                 : 005285
- z_sign                      : 005ca2
- z_slashstring               : 0051d4
- z_sliteral                  : 005ced
- z_smrem                     : 005d5d
- z_source                    : 005d6a
- z_source-id                 : 005d71
- z_space                     : 005d78
- z_spaces                    : 005d84
- z_squote                    : 005c84
- z_star                      : 005d8c
- z_state                     : 005d94
- z_stod                      : 005c94
- z_store                     : 0052d3
- z_swap                      : 005d9a
- z_tick                      : 00542e
- z_to                        : 005da4
- z_to-in                     : 00515d
- z_tobody                    : 005155
- z_tonumber                  : 0051ba
- z_tor                       : 0051c2
- z_true                      : 005dac
- z_tuck                      : 005db5
- z_two                       : 00539b
- z_two-star                  : 00539f
- z_twofromr                  : 0053e0
- z_tworfetch                 : 0053ee
- z_twotor                    : 0053b0
- z_type                      : 005dd6
- z_udmod                     : 005dfb
- z_udot                      : 005de0
- z_ummod                     : 005eaa
- z_umstar                    : 005e59
- z_unused                    : 005eb6
- z_variable                  : 005ec6
- z_word                      : 005ede
- z_words                     : 005f22
- z_wordsize                  : 005f35
- z_wordsnsizes               : 005f22
- z_xor                       : 005f3c
- z_zbranch                   : 005370
- z_zero                      : 00533a
- z_zero-equal                : 005346
- z_zero-less                 : 005352
- z_zero-more                 : 005369
- z_zero-notequal             : 00535e
- zb_done                     : 005382
- zb_zero                     : 005379
- zbranch_rt                  : 005371
- ze_not_zero                 : 005343
- zero-less-is-less           : 00534f
- zero-more_done              : 005368
- zero-more_true              : 005367
- zne_is_zero                 : 00535b
