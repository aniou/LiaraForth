A Tinkerer's Assembler for the 6502/65c02/65816
Version BETA 17. Feb 2017
Copyright 2015-2017 Scot W. Stevenson <scot.stevenson@gmail.com>
This program comes with ABSOLUTELY NO WARRANTY

Code listing for file liaraforth.tasm
Generated on Sun Mar  5 11:02:56 2017
Target MPU: 65816
External files loaded: 4
Number of passes executed: 35
Number of steps executed: 10
Assembly time: 0.20589 seconds
Code origin: 005000
Bytes of machine code: 8089

LISTING:
   Line  Status/Type State/Width Address     Bytes     Instruction
   1:000 | DONE cmt | em  8  8 |        |             | ; Liara Forth for the W65C265SXB
   2:000 | DONE cmt | em  8  8 |        |             | ; Scot W. Stevenson <scot.stevenson@gmail.com>
   3:000 | DONE cmt | em  8  8 |        |             | ; First version: 01. Apr 2016
   4:000 | DONE cmt | em  8  8 |        |             | ; This version: 05. Mar 2017
   5:000 | DONE wsp | em  8  8 |        |             |
   6:000 | DONE cmt | em  8  8 |        |             | ; This code is written in Typist's Assembler Notation for the 65c02/65816
   7:000 | DONE cmt | em  8  8 |        |             | ; See docs/MANUAL.md for more information
   8:000 | DONE wsp | em  8  8 |        |             |
   9:000 | DONE dir | em  8  8 |        |             |         .mpu 65816                   
  10:000 | DONE dir | em  8  8 |        |             |         .origin 5000                 start of code to save to built-in RAM
  11:000 | DONE cmt | em  8  8 |        |             | ;       .origin 8000    ; start of code to save to Flash memory
  12:000 | DONE lbl | em  8  8 | 005000 |             | code0                                ; used to calculated UNUSED etc
  13:000 | DONE wsp | em  8  8 |        |             |
  14:000 | DONE cmt | em  8  8 |        |             | ; ===================================================================
  15:000 | DONE cmt | em  8  8 |        |             | ; TOP INCLUDES
  16:000 | DONE wsp | em  8  8 |        |             |
  17:000 | DONE cmt | em  8  8 |        |             | ; Definitions for Liara Forth for the W65C265SXB
  17:001 | DONE cmt | em  8  8 |        |             | ; Scot W. Stevenson <scot.stevenson@gmail.com>
  17:002 | DONE cmt | em  8  8 |        |             | ; First version: 01. Apr 2016
  17:003 | DONE cmt | em  8  8 |        |             | ; This version: 05. Mar 2017
  17:004 | DONE wsp | em  8  8 |        |             |
  17:005 | DONE cmt | em  8  8 |        |             | ; This file is included by liaraforth.tasm
  17:006 | DONE wsp | em  8  8 |        |             |
  17:007 | DONE cmt | em  8  8 |        |             | ; Note that Typist's Assembler Notation does not distinguish between
  17:008 | DONE cmt | em  8  8 |        |             | ; upper andlower case. Variations in case are for human readers only.
  17:009 | DONE wsp | em  8  8 |        |             |
  17:010 | DONE cmt | em  8  8 |        |             | ; I/O facilities are handled in the separate kernel files. The definitions for
  17:011 | DONE cmt | em  8  8 |        |             | ; multitasking are preliminary and will probably change
  17:012 | DONE wsp | em  8  8 |        |             |
  17:013 | DONE cmt | em  8  8 |        |             | ; ===================================================================
  17:014 | DONE cmt | em  8  8 |        |             | ; CONTROL VALUES
  17:015 | DONE wsp | em  8  8 |        |             |
  17:016 | DONE cmt | em  8  8 |        |             |         ; NC_LIMIT gives the number of maximum bytes the code of a word may be
  17:017 | DONE cmt | em  8  8 |        |             |         ; long and still be compiled natively - see COMPILE, for details.
  17:018 | DONE cmt | em  8  8 |        |             |         ; A value of zero means a word is always compiled as a subroutine.
  17:019 | DONE cmt | em  8  8 |        |             |         ; TODO expose this to the user
  17:020 | DONE dir | em  8  8 |        |             |         .equ nc_limit 0              
  17:021 | DONE wsp | em  8  8 |        |             |
  17:022 | DONE cmt | em  8  8 |        |             | ; ===================================================================
  17:023 | DONE cmt | em  8  8 |        |             | ; MEMORY MAP
  17:024 | DONE cmt | em  8  8 |        |             | ; We reuse the memory that the Mensch Monitor had been using
  17:025 | DONE wsp | em  8  8 |        |             |
  17:026 | DONE cmt | em  8  8 |        |             |         ; TODO add any extra RAM in other banks
  17:027 | DONE cmt | em  8  8 |        |             |         ; TODO add stuff for multitasking
  17:028 | DONE wsp | em  8  8 |        |             |
  17:029 | DONE cmt | em  8  8 |        |             |         ;  00:0000  +-------------------+  ram-start, dpage, user0
  17:030 | DONE cmt | em  8  8 |        |             |         ;           |                   |
  17:031 | DONE cmt | em  8  8 |        |             |         ;           |  ^  Data Stack    |  <-- dsp
  17:032 | DONE cmt | em  8  8 |        |             |         ;           |  |                |
  17:033 | DONE cmt | em  8  8 |        |             |         ;  00:0100  +-------------------+  dsp0, stack
  17:034 | DONE cmt | em  8  8 |        |             |         ;           |                   |
  17:035 | DONE cmt | em  8  8 |        |             |         ;           |  ^  Return Stack  |  <-- rsp
  17:036 | DONE cmt | em  8  8 |        |             |         ;           |  |                |
  17:037 | DONE cmt | em  8  8 |        |             |         ;  00:0200  +-------------------+  rsp0, buffer, buffer0
  17:038 | DONE cmt | em  8  8 |        |             |         ;           |  |                |
  17:039 | DONE cmt | em  8  8 |        |             |         ;           |  v  Input Buffer  |
  17:040 | DONE cmt | em  8  8 |        |             |         ;           |                   |
  17:041 | DONE cmt | em  8  8 |        |             |         ;  00:0300  +-------------------+  cp0
  17:042 | DONE cmt | em  8  8 |        |             |         ;           |  |                |
  17:043 | DONE cmt | em  8  8 |        |             |         ;           |  v  Dictionary    |  <-- cp
  17:044 | DONE cmt | em  8  8 |        |             |         ;           |                   |
  17:045 | DONE cmt | em  8  8 |        |             |         ;   (...)   ~~~~~~~~~~~~~~~~~~~~~
  17:046 | DONE cmt | em  8  8 |        |             |         ;           |                   |
  17:047 | DONE cmt | em  8  8 |        |             |         ;           |                   |
  17:048 | DONE cmt | em  8  8 |        |             |         ;  00:7fff  +-------------------+  ram-end
  17:049 | DONE wsp | em  8  8 |        |             |
  17:050 | DONE cmt | em  8  8 |        |             |         ; Hard physical addresses
  17:051 | DONE dir | em  8  8 |        |             |         .equ ram-start  0000         start of installed RAM
  17:052 | DONE dir | em  8  8 |        |             |         .equ ram-end { 8000 - 1 }    end of 32k installed RAM
  17:053 | DONE wsp | em  8  8 |        |             |
  17:054 | DONE cmt | em  8  8 |        |             |         ; Soft physical addresses
  17:055 | DONE dir | em  8  8 |        |             |         .equ dpage      ram-start    direct page:       0000 - 00ff
  17:056 | DONE dir | em  8  8 |        |             |         .equ stack { 000000 + 0100 } return stack area: 0100 - 01ff
  17:057 | DONE dir | em  8  8 |        |             |         .equ buffer { stack + 0100 } buffer areas:      0200 - 02ff
  17:058 | DONE wsp | em  8  8 |        |             |
  17:059 | DONE cmt | em  8  8 |        |             |         ; Defined locations
  17:060 | DONE dir | em  8  8 |        |             |         .equ user0      dpage        user and system variables
  17:061 | DONE dir | em  8  8 |        |             |         .equ dsp0 { stack - 1 }      initial Data Stack Pointer:   00ff
  17:062 | DONE dir | em  8  8 |        |             |         .equ stack0 { buffer - 1 }   initial Return Stack Pointer: 01ff
  17:063 | DONE wsp | em  8  8 |        |             |
  17:064 | DONE cmt | em  8  8 |        |             |         ; Buffers
  17:065 | DONE dir | em  8  8 |        |             |         .equ bsize      0080         size of input/output buffers
  17:066 | DONE dir | em  8  8 |        |             |         .equ unused { buffer + 000080 } unused buffer 0280 (UNUSED)
  17:067 | DONE wsp | em  8  8 |        |             |
  17:068 | DONE cmt | em  8  8 |        |             |         ; Dictionary RAM
  17:069 | DONE dir | em  8  8 |        |             |         .equ cp0 { unused + 000080 } Dictionary starts after last buffer
  17:070 | DONE dir | em  8  8 |        |             |         .equ cp-end { code0 - 1 }    Last RAM byte available
  17:071 | DONE wsp | em  8  8 |        |             |
  17:072 | DONE cmt | em  8  8 |        |             |         ; Other locations
  17:073 | DONE dir | em  8  8 |        |             |         .equ padoffset  0ff          offset from CP to PAD (holds number strings)
  17:074 | DONE wsp | em  8  8 |        |             |
  17:075 | DONE wsp | em  8  8 |        |             |
  17:076 | DONE cmt | em  8  8 |        |             | ; ===================================================================
  17:077 | DONE cmt | em  8  8 |        |             | ; DIRECT PAGE ADDRESSES
  17:078 | DONE wsp | em  8  8 |        |             |
  17:079 | DONE cmt | em  8  8 |        |             | ; All are one cell (two bytes) long to prevent weird errors
  17:080 | DONE cmt | em  8  8 |        |             | ; TODO rewrite with USER variables
  17:081 | DONE dir | em  8  8 |        |             |         .equ cp { 000000 + &00 }     Compiler Pointer, 2 bytes
  17:082 | DONE dir | em  8  8 |        |             |         .equ dp { 000000 + &02 }     Dictionary Pointer, 2 bytes
  17:083 | DONE dir | em  8  8 |        |             |         .equ workword { 000000 + &04 } Currently compiliing word
  17:084 | DONE dir | em  8  8 |        |             |         .equ insrc { 000000 + &06 }  Input Source for SOURCE-ID
  17:085 | DONE dir | em  8  8 |        |             |         .equ cib { 000000 + &08 }    Address of current input buffer
  17:086 | DONE dir | em  8  8 |        |             |         .equ ciblen { 000000 + &10 } Length of current input buffer
  17:087 | DONE dir | em  8  8 |        |             |         .equ toin { 000000 + &12 }   Pointer to CIB (>IN in Forth)
  17:088 | DONE dir | em  8  8 |        |             |         .equ output { 000000 + &14 } Jump target for EMIT
  17:089 | DONE dir | em  8  8 |        |             |         .equ input { 000000 + &16 }  Jump target for KEY
  17:090 | DONE dir | em  8  8 |        |             |         .equ havekey { 000000 + &18 } Jump target for KEY?
  17:091 | DONE dir | em  8  8 |        |             |         .equ state { 000000 + &20 }  STATE: -1 compile, 0 interpret
  17:092 | DONE dir | em  8  8 |        |             |         .equ base { 000000 + &22 }   Radix for number conversion
  17:093 | DONE dir | em  8  8 |        |             |         .equ tohold { 000000 + &24 } Pointer for formatted output
  17:094 | DONE dir | em  8  8 |        |             |         .equ tmpbranch { 000000 + &26 } temp storage for 0BRANCH, BRANCH only
  17:095 | DONE dir | em  8  8 |        |             |         .equ tmp1 { 000000 + &28 }   Temporary storage
  17:096 | DONE dir | em  8  8 |        |             |         .equ tmp2 { 000000 + &30 }   Temporary storage
  17:097 | DONE dir | em  8  8 |        |             |         .equ tmp3 { 000000 + &32 }   Temporary storage
  17:098 | DONE dir | em  8  8 |        |             |         .equ tmpdsp { 000000 + &34 } Temporary DSP (X) storage, 2 bytes
  17:099 | DONE dir | em  8  8 |        |             |         .equ tmptos { 000000 + &36 } Temporary TOS (Y) storage, 2 bytes
  17:100 | DONE dir | em  8  8 |        |             |         .equ scratch { 000000 + &38 } 8 byte scratchpad (see UM/MOD)
  17:101 | DONE wsp | em  8  8 |        |             |
  17:102 | DONE wsp | em  8  8 |        |             |
  17:103 | DONE cmt | em  8  8 |        |             | ; ===================================================================
  17:104 | DONE cmt | em  8  8 |        |             | ; HELPER DEFINITIONS
  17:105 | DONE wsp | em  8  8 |        |             |
  17:106 | DONE cmt | em  8  8 |        |             | ; ASCII characters
  17:107 | DONE dir | em  8  8 |        |             |         .equ AscCC   03              break (Control-C) ASCII character
  17:108 | DONE dir | em  8  8 |        |             |         .equ AscBELL 07              ACSCII bell sound
  17:109 | DONE dir | em  8  8 |        |             |         .equ AscBS   08              backspace ASCII character
  17:110 | DONE dir | em  8  8 |        |             |         .equ AscLF   0a              line feed ASCII character
  17:111 | DONE dir | em  8  8 |        |             |         .equ AscCR   0d              carriage return ASCII character
  17:112 | DONE dir | em  8  8 |        |             |         .equ AscCN   0e              ASCII CNTR-n (for next command)
  17:113 | DONE dir | em  8  8 |        |             |         .equ AscCP   10              ASCII CNTR-p (for previous command)
  17:114 | DONE dir | em  8  8 |        |             |         .equ AscESC  1b              Escape ASCII character
  17:115 | DONE dir | em  8  8 |        |             |         .equ AscSP   20              space ASCII character
  17:116 | DONE dir | em  8  8 |        |             |         .equ AscDEL  7f              DEL ASCII character
  17:117 | DONE wsp | em  8  8 |        |             |
  17:118 | DONE cmt | em  8  8 |        |             | ; Dictionary flags. The first four are currently unused
  17:119 | DONE dir | em  8  8 |        |             |         .equ CO 0004                 Compile Only
  17:120 | DONE dir | em  8  8 |        |             |         .equ IM 0002                 Immediate Word
  17:121 | DONE dir | em  8  8 |        |             |         .equ NC 0001                 Native Compile allowed
  17:122 | DONE wsp | em  8  8 |        |             |
  18:000 | DONE wsp | em  8  8 |        |             |
  19:000 | DONE cmt | em  8  8 |        |             | ; Hardware dependencies are isolated to a large degree in kernel files. Liara
  20:000 | DONE cmt | em  8  8 |        |             | ; Forth ships with two such files: One (very ALPHA) for the crude65816 emulator,
  21:000 | DONE cmt | em  8  8 |        |             | ; and one for the 265sxb board. Only use one.
  22:000 | DONE wsp | em  8  8 |        |             |
  23:000 | DONE cmt | em  8  8 |        |             | ; Basic hardware routines for Liara Forth: 265SXB version
  23:001 | DONE cmt | em  8  8 |        |             | ; Scot W. Stevenson <scot.stevenson@gmail.com>
  23:002 | DONE cmt | em  8  8 |        |             | ; First version: 04. Jan 2017
  23:003 | DONE cmt | em  8  8 |        |             | ; This version: 05. Mar 2017
  23:004 | DONE wsp | em  8  8 |        |             |
  23:005 | DONE cmt | em  8  8 |        |             | ; This section provides basic hardware interface to the 265SXB, providing at the
  23:006 | DONE cmt | em  8  8 |        |             | ; very least the the PUT_CHR, GET_CHR and HAVE_CHR routines that Liara Forth
  23:007 | DONE cmt | em  8  8 |        |             | ; uses. These MUST BE PRESENT. It is in its own section to make porting Forth
  23:008 | DONE cmt | em  8  8 |        |             | ; to other machines easier.
  23:009 | DONE wsp | em  8  8 |        |             |
  23:010 | DONE cmt | em  8  8 |        |             | ; The code here is based on Andrew Jacobs' Basic Vector Handling for the
  23:011 | DONE cmt | em  8  8 |        |             | ; W65C265SXB Development Board as part of the w65c265sxb-hacker project
  23:012 | DONE cmt | em  8  8 |        |             | ; (https://github.com/andrew-jacobs/w65c265sxb-hacker). It is released under the
  23:013 | DONE cmt | em  8  8 |        |             | ; following license:
  23:014 | DONE cmt | em  8  8 |        |             | ;
  23:015 | DONE cmt | em  8  8 |        |             | ;     This work is made available under the terms of the Creative Commons
  23:016 | DONE cmt | em  8  8 |        |             | ;     Attribution-NonCommercial-ShareAlike 4.0 International license. Open the
  23:017 | DONE cmt | em  8  8 |        |             | ;     following URL to see the details.
  23:018 | DONE cmt | em  8  8 |        |             | ;     http://creativecommons.org/licenses/by-nc-sa/4.0/
  23:019 | DONE wsp | em  8  8 |        |             |
  23:020 | DONE cmt | em  8  8 |        |             | ; Original variable names from w65c256.inc are included in comments to make
  23:021 | DONE cmt | em  8  8 |        |             | ; updates and changes easier
  23:022 | DONE wsp | em  8  8 |        |             |
  23:023 | DONE cmt | em  8  8 |        |             | ; ===================================================================
  23:024 | DONE cmt | em  8  8 |        |             | ; HARDWARE DEFINITIONS
  23:025 | DONE cmt | em  8  8 |        |             | ; These follow Andrew Jacobs' names, but lower case and with "hw_" prefixed.
  23:026 | DONE cmt | em  8  8 |        |             | ; This is the only file where symbols with the hw_ prefix may be defined or used
  23:027 | DONE wsp | em  8  8 |        |             |
  23:028 | DONE cmt | em  8  8 |        |             | ; Baud rates are calculated by the formula { osc_freq/(16*baud_rate)-1 } which we
  23:029 | DONE cmt | em  8  8 |        |             | ; can do on the fly at every assembly with the following parameters, or just calculate
  23:030 | DONE cmt | em  8  8 |        |             | ; once and then define brg_value with:
  23:031 | DONE cmt | em  8  8 |        |             | ;
  23:032 | DONE cmt | em  8  8 |        |             | ; - For  9600 baud, use &23
  23:033 | DONE cmt | em  8  8 |        |             | ; - For 19200 baud, use &11
  23:034 | DONE wsp | em  8  8 |        |             |
  23:035 | DONE cmt | em  8  8 |        |             | ;       .equ osc_freq  3686400          ; SXB runs at 3.6864MHz
  23:036 | DONE cmt | em  8  8 |        |             | ;       .equ baud_rate 19200            ; ACIA baud rate
  23:037 | DONE cmt | em  8  8 |        |             | ;	.equ baud_rate 9600             ; ACIA baud rate
  23:038 | DONE wsp | em  8  8 |        |             |
  23:039 | DONE dir | em  8  8 |        |             |         .equ brg_value &11           19200 baud
  23:040 | DONE cmt | em  8  8 |        |             | ;       .equ brg_value &23              ; 9600 baud
  23:041 | DONE wsp | em  8  8 |        |             |
  23:042 | DONE dir | em  8  8 |        |             |         .equ hw_pd0  0df00           Port 0 Data Register
  23:043 | DONE dir | em  8  8 |        |             |         .equ hw_pd1  0df01           Port 1 Data Register
  23:044 | DONE dir | em  8  8 |        |             |         .equ hw_pd2  0df02           Port 2 Data Register
  23:045 | DONE dir | em  8  8 |        |             |         .equ hw_pd3  0df03           Port 3 Data Register
  23:046 | DONE dir | em  8  8 |        |             |         .equ hw_pdd0 0df04           Port 0 Data Direction Register
  23:047 | DONE dir | em  8  8 |        |             |         .equ hw_pdd1 0df05           Port 1 Data Direction Register
  23:048 | DONE dir | em  8  8 |        |             |         .equ hw_pdd2 0df06           Port 2 Data Direction Register
  23:049 | DONE dir | em  8  8 |        |             |         .equ hw_pdd3 0df07           Port 3 Data Direction Register
  23:050 | DONE wsp | em  8  8 |        |             |
  23:051 | DONE dir | em  8  8 |        |             |         .equ hw_pd4  0df20           Port 4 Data Register
  23:052 | DONE dir | em  8  8 |        |             |         .equ hw_pd5  0df21           Port 5 Data Register
  23:053 | DONE dir | em  8  8 |        |             |         .equ hw_pd6  0df22           Port 6 Data Register
  23:054 | DONE dir | em  8  8 |        |             |         .equ hw_pd7  0df23           Port 7 Data Register
  23:055 | DONE dir | em  8  8 |        |             |         .equ hw_pdd4 0df24           Port 4 Data Direction Register
  23:056 | DONE dir | em  8  8 |        |             |         .equ hw_pdd5 0df25           Port 5 Data Direction Register
  23:057 | DONE dir | em  8  8 |        |             |         .equ hw_pdd6 0df26           Port 6 Data Direction Register
  23:058 | DONE dir | em  8  8 |        |             |         .equ hw_pcs7 0df27           Port 7 Chip Select
  23:059 | DONE wsp | em  8  8 |        |             |
  23:060 | DONE dir | em  8  8 |        |             |         .equ hw_bcr  0df40           Bus Control Register
  23:061 | DONE dir | em  8  8 |        |             |         .equ hw_sscr 0df41           System Speed Control Register
  23:062 | DONE dir | em  8  8 |        |             |         .equ hw_tcr  0df42           Timer Control Register
  23:063 | DONE dir | em  8  8 |        |             |         .equ hw_ter  0df43           Timer Enable Register
  23:064 | DONE dir | em  8  8 |        |             |         .equ hw_tifr 0df44           Timer Interrupt Flag Register
  23:065 | DONE dir | em  8  8 |        |             |         .equ hw_eifr 0df45           Edge Interrupt Flag Register
  23:066 | DONE dir | em  8  8 |        |             |         .equ hw_tier 0df46           Timer Interrupt Enable Register
  23:067 | DONE dir | em  8  8 |        |             |         .equ hw_eier 0df47           Edge Interrupt Enable Register
  23:068 | DONE dir | em  8  8 |        |             |         .equ hw_uifr 0df48           UART Interrupt Flag Register
  23:069 | DONE dir | em  8  8 |        |             |         .equ hw_uier 0df49           UART Interrupt Enable Register
  23:070 | DONE wsp | em  8  8 |        |             |
  23:071 | DONE dir | em  8  8 |        |             |         .equ hw_t0cl 0df60           Timer 0 Counter Low
  23:072 | DONE dir | em  8  8 |        |             |         .equ hw_t0ch 0df61           Timer 0 Counter High
  23:073 | DONE dir | em  8  8 |        |             |         .equ hw_t1cl 0df62           Timer 1 Counter Low
  23:074 | DONE dir | em  8  8 |        |             |         .equ hw_t1ch 0df63           Timer 1 Counter High
  23:075 | DONE dir | em  8  8 |        |             |         .equ hw_t2cl 0df64           Timer 2 Counter Low
  23:076 | DONE dir | em  8  8 |        |             |         .equ hw_t2ch 0df65           Timer 2 Counter High
  23:077 | DONE dir | em  8  8 |        |             |         .equ hw_t3cl 0df66           Timer 3 Counter Low
  23:078 | DONE dir | em  8  8 |        |             |         .equ hw_t3ch 0df67           Timer 3 Counter High
  23:079 | DONE dir | em  8  8 |        |             |         .equ hw_t4cl 0df68           Timer 4 Counter Low
  23:080 | DONE dir | em  8  8 |        |             |         .equ hw_t4ch 0df69           Timer 4 Counter High
  23:081 | DONE dir | em  8  8 |        |             |         .equ hw_t5cl 0df6a           Timer 5 Counter Low
  23:082 | DONE dir | em  8  8 |        |             |         .equ hw_t5ch 0df6b           Timer 5 Counter High
  23:083 | DONE dir | em  8  8 |        |             |         .equ hw_t6cl 0df6c           Timer 6 Counter Low
  23:084 | DONE dir | em  8  8 |        |             |         .equ hw_t6ch 0df6d           Timer 6 Counter High
  23:085 | DONE dir | em  8  8 |        |             |         .equ hw_t7cl 0df6e           Timer 7 Counter Low
  23:086 | DONE dir | em  8  8 |        |             |         .equ hw_t7ch 0df6f           Timer 7 Counter High
  23:087 | DONE wsp | em  8  8 |        |             |
  23:088 | DONE dir | em  8  8 |        |             |         .equ hw_acsr0 0df70          UART 0 Control/Status Register
  23:089 | DONE dir | em  8  8 |        |             |         .equ hw_artd0 0df71          UART 0 Data Register
  23:090 | DONE dir | em  8  8 |        |             |         .equ hw_acsr1 0df72          UART 1 Control/Status Register
  23:091 | DONE dir | em  8  8 |        |             |         .equ hw_artd1 0df73          UART 1 Data Register
  23:092 | DONE dir | em  8  8 |        |             |         .equ hw_acsr2 0df74          UART 2 Control/Status Register
  23:093 | DONE dir | em  8  8 |        |             |         .equ hw_artd2 0df75          UART 2 Data Register
  23:094 | DONE dir | em  8  8 |        |             |         .equ hw_acsr3 0df76          UART 3 Control/Status Register
  23:095 | DONE dir | em  8  8 |        |             |         .equ hw_artd3 0df77          UART 3 Data Register
  23:096 | DONE wsp | em  8  8 |        |             |
  23:097 | DONE wsp | em  8  8 |        |             |
  23:098 | DONE cmt | em  8  8 |        |             | ; ===================================================================
  23:099 | DONE cmt | em  8  8 |        |             | ; RESET HARDWARE
  23:100 | DONE cmt | em  8  8 |        |             | ; Call this during boot. Uses Port 0 for communication in the default setting.
  23:101 | DONE cmt | em  8  8 |        |             | ; Note this does not reset the MPU, which is done by the main Forth code
  23:102 | DONE lbl | em  8  8 | 005000 |             | reset_hardware                       
  23:103 | DONE ins | em  8  8 | 005000 | 78          |                 sei                  
  23:104 | DONE ins | em  8  8 | 005001 | 18          |                 clc                  
  23:105 | DONE ins | em  8  8 | 005002 | fb          |                 xce                  
  23:106 | DONE ctl | na  8  8 |        |             |         .!native
  23:107 | DONE ins | na  8  8 | 005003 | c2 10       |                 rep 10               
  23:108 | DONE ctl | na  8 16 |        |             |         .!xy16
  23:109 | DONE ins | na  8 16 | 005005 | e2 20       |                 sep 20               
  23:110 | DONE ctl | na  8 16 |        |             |         .!a8
  23:111 | DONE cmt | na  8 16 |        |             |                 ; temporarily reset the stack
  23:112 | DONE ins | na  8 16 | 005007 | a2 ff 01    |                 ldx.# 01ff           
  23:113 | DONE ins | na  8 16 | 00500a | 9a          |                 txs                  
  23:114 | DONE wsp | na  8 16 |        |             |
  23:115 | DONE ins | na  8 16 | 00500b | 9c 49 df    |                 stz 00df49           UART Interrupt Enable Register (UIER)
  23:116 | DONE wsp | na  8 16 |        |             |
  23:117 | DONE ins | na  8 16 | 00500e | a9 c0       |                 lda.# 0c0            Ensure A15/AMS are output
  23:118 | DONE ins | na  8 16 | 005010 | 8d 24 df    |                 sta 00df24           Port 4 Data Direction Register (PDD4)
  23:119 | DONE ins | na  8 16 | 005013 | 9c 20 df    |                 stz 00df20           Select bank 0 (Port 4 Data Register, PD4)
  23:120 | DONE wsp | na  8 16 |        |             |
  23:121 | DONE ins | na  8 16 | 005016 | a9 10       |                 lda.# %00010000      Set UART0 to use timer 3
  23:122 | DONE ins | na  8 16 | 005018 | 1c 42 df    |                 trb 00df42           Timer Control Register (TCR)
  23:123 | DONE ins | na  8 16 | 00501b | a9 0b       |                 lda.# .lsb 00000b    And set baud rate
  23:124 | DONE ins | na  8 16 | 00501d | 8d 66 df    |                 sta 00df66           Timer 3 Counter Low (T3CL)
  23:125 | DONE ins | na  8 16 | 005020 | a9 00       |                 lda.# .msb 00000b    
  23:126 | DONE ins | na  8 16 | 005022 | 8d 67 df    |                 sta 00df67           Timer 3 Counter High (T3CH)
  23:127 | DONE ins | na  8 16 | 005025 | a9 08       |                 lda.# 08             Enable timer 3 (1<<3)
  23:128 | DONE ins | na  8 16 | 005027 | 0c 43 df    |                 tsb 00df43           Timer Enable Register (TER)
  23:129 | DONE wsp | na  8 16 |        |             |
  23:130 | DONE ins | na  8 16 | 00502a | a9 25       |                 lda.# %00100101      Set UART0 for 8-N-1
  23:131 | DONE ins | na  8 16 | 00502c | 8d 70 df    |                 sta 00df70           UART 0 Control/Status Register (ACSR0)
  23:132 | DONE wsp | na  8 16 |        |             |
  23:133 | DONE ins | na  8 16 | 00502f | c2 20       |                 rep 20               
  23:134 | DONE ctl | na 16 16 |        |             |         .!a16
  23:135 | DONE ins | na 16 16 | 005031 | 4c 64 50    |                 jmp 005064           we return with A as 8 bits
  23:136 | DONE wsp | na 16 16 |        |             |
  23:137 | DONE wsp | na 16 16 |        |             |
  23:138 | DONE cmt | na 16 16 |        |             | ; ===================================================================
  23:139 | DONE cmt | na 16 16 |        |             | ; PUT_CHR
  23:140 | DONE cmt | na 16 16 |        |             | ; Wait until the last transmission has been completed then send the character
  23:141 | DONE cmt | na 16 16 |        |             | ; in A. Destroys A. This handles all the register size stuff, and does not need to be
  23:142 | DONE cmt | na 16 16 |        |             | ; called with a 8-bit Y register as TOS. This is only called directly by EMIT
  23:143 | DONE cmt | na 16 16 |        |             | ; through the OUTPUT variable. In Forth, this is refered to as UART0
  23:144 | DONE lbl | na 16 16 | 005034 |             | put_chr                              
  23:145 | DONE ins | na 16 16 | 005034 | 08          |                 php                  save register sizes
  23:146 | DONE ins | na 16 16 | 005035 | e2 20       |                 sep 20               
  23:147 | DONE ctl | na  8 16 |        |             |         .!a8
  23:148 | DONE ins | na  8 16 | 005037 | 48          |                 pha                  
  23:149 | DONE ins | na  8 16 | 005038 | a9 02       |                 lda.# 02             (1<<1)
  23:150 | DONE wsp | na  8 16 |        |             |
  23:151 | DONE lbl | na  8 16 | 00503a |             | put_chr_wait                         
  23:152 | DONE ins | na  8 16 | 00503a | 2c 48 df    |                 bit 00df48           timer finished?
  23:153 | DONE ins | na  8 16 | 00503d | f0 fb       |                 beq 00503a           
  23:154 | DONE wsp | na  8 16 |        |             |
  23:155 | DONE ins | na  8 16 | 00503f | 68          |                 pla                  
  23:156 | DONE ins | na  8 16 | 005040 | 8d 71 df    |                 sta 00df71           transmit char
  23:157 | DONE ins | na  8 16 | 005043 | 28          |                 plp                  
  23:158 | DONE wsp | na  8 16 |        |             |
  23:159 | DONE ins | na  8 16 | 005044 | 60          |                 rts                  
  23:160 | DONE wsp | na  8 16 |        |             |
  23:161 | DONE cmt | na  8 16 |        |             | ; ===================================================================
  23:162 | DONE cmt | na  8 16 |        |             | ; GET_CHR
  23:163 | DONE cmt | na  8 16 |        |             | ; Fetch the next character from the receive buffer waiting for some to arrive
  23:164 | DONE cmt | na  8 16 |        |             | ; if the buffer is empty. This is handled by KEY through the INPUT variable
  23:165 | DONE lbl | na  8 16 | 005045 |             | get_chr                              
  23:166 | DONE ins | na  8 16 | 005045 | 08          |                 php                  Save register sizes
  23:167 | DONE ins | na  8 16 | 005046 | e2 20       |                 sep 20               
  23:168 | DONE ctl | na  8 16 |        |             |         .!a8
  23:169 | DONE ins | na  8 16 | 005048 | a9 01       |                 lda.# 01             (1<<0)
  23:170 | DONE wsp | na  8 16 |        |             |
  23:171 | DONE lbl | na  8 16 | 00504a |             | get_chr_wait                         
  23:172 | DONE ins | na  8 16 | 00504a | 2c 48 df    |                 bit 00df48           Any data in RX buffer?
  23:173 | DONE ins | na  8 16 | 00504d | f0 fb       |                 beq 00504a           No, keep waiting
  23:174 | DONE ins | na  8 16 | 00504f | ad 71 df    |                 lda 00df71           Yes, read it
  23:175 | DONE ins | na  8 16 | 005052 | 28          |                 plp                  
  23:176 | DONE wsp | na  8 16 |        |             |
  23:177 | DONE ins | na  8 16 | 005053 | 60          |                 rts                  
  23:178 | DONE wsp | na  8 16 |        |             |
  23:179 | DONE cmt | na  8 16 |        |             | ; ===================================================================
  23:180 | DONE cmt | na  8 16 |        |             | ; HAVE_CHR
  23:181 | DONE cmt | na  8 16 |        |             | ; Check if the receive buffer contains any data and return C=1 if there is
  23:182 | DONE cmt | na  8 16 |        |             | ; some. This should be handled by KEY? through the HAVEKEY variable
  23:183 | DONE cmt | na  8 16 |        |             | ; TODO Test this
  23:184 | DONE wsp | na  8 16 |        |             |
  23:185 | DONE lbl | na  8 16 | 005054 |             | have_chr                             
  23:186 | DONE ins | na  8 16 | 005054 | 48          |                 pha                  save caller's A
  23:187 | DONE ins | na  8 16 | 005055 | 08          |                 php                  
  23:188 | DONE ins | na  8 16 | 005056 | e2 20       |                 sep 20               
  23:189 | DONE ctl | na  8 16 |        |             |         .!a8
  23:190 | DONE ins | na  8 16 | 005058 | ad 48 df    |                 lda 00df48           read the status register
  23:191 | DONE ins | na  8 16 | 00505b | 28          |                 plp                  
  23:192 | DONE ins | na  8 16 | 00505c | 6a          |                 ror.a                shift hw_uart0r bit into carry
  23:193 | DONE ins | na  8 16 | 00505d | c2 20       |                 rep 20               
  23:194 | DONE ctl | na 16 16 |        |             |         .!a16
  23:195 | DONE ins | na 16 16 | 00505f | 68          |                 pla                  restore A
  23:196 | DONE ins | na 16 16 | 005060 | 60          |                 rts                  
  23:197 | DONE wsp | na 16 16 |        |             |
  23:198 | DONE cmt | na 16 16 |        |             | ; END
  24:000 | DONE cmt | na 16 16 |        |             | ;       .include kernel_emu.tasm        ; routines for crude65815 emulator
  25:000 | DONE wsp | na 16 16 |        |             |
  26:000 | DONE wsp | na 16 16 |        |             |
  27:000 | DONE cmt | na 16 16 |        |             | ; ===================================================================
  28:000 | DONE cmt | na 16 16 |        |             | ; DICTIONARY ROUTINES
  29:000 | DONE wsp | na 16 16 |        |             |
  30:000 | DONE cmt | na 16 16 |        |             | ; Word code routines are sorted alphabetically, except for the first three
  31:000 | DONE cmt | na 16 16 |        |             | ; - COLD, ABORT, and QUIT - and a few others that flow into each other. The
  32:000 | DONE cmt | na 16 16 |        |             | ; byte and cycle values are calculated without the RTS instruction.
  33:000 | DONE wsp | na 16 16 |        |             |
  34:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
  35:000 | DONE cmt | na 16 16 |        |             | ; COLD ( -- ) X bytes / X Cycles
  36:000 | DONE cmt | na 16 16 |        |             | ; Reboot the system
  37:000 | DONE lbl | na 16 16 | 005061 |             | xt_cold                              
  38:000 | DONE wsp | na 16 16 |        |             |
  39:000 | DONE ins | na 16 16 | 005061 | 4c 00 50    |                 jmp 005000           don't use JSR, jump back to start
  40:000 | DONE lbl | na 16 16 | 005064 |             | start                                
  41:000 | DONE dir | na 16 16 |        |             |         .!native                     these should be handled by hardware reset
  42:000 | DONE dir | na 16 16 |        |             |         .!a16                        
  43:000 | DONE dir | na 16 16 |        |             |         .!xy16                       
  44:000 | DONE ins | na 16 16 | 005064 | 78          |                 sei                  
  45:000 | DONE wsp | na 16 16 |        |             |
  46:000 | DONE cmt | na 16 16 |        |             |                 ; Initialize the Return Stack (65816 stack)
  47:000 | DONE ins | na 16 16 | 005065 | a2 ff 01    |                 ldx.# 0001ff         01ff
  48:000 | DONE ins | na 16 16 | 005068 | 9a          |                 txs                  
  49:000 | DONE wsp | na 16 16 |        |             |
  50:000 | DONE cmt | na 16 16 |        |             |                 ; Clear Data Stack. This is repeated in ABORT, but we have no
  51:000 | DONE cmt | na 16 16 |        |             |                 ; choice if we want to load high-level words via EVALUATE
  52:000 | DONE ins | na 16 16 | 005069 | a0 00 00    |                 ldy.# 0000           
  53:000 | DONE ins | na 16 16 | 00506c | a2 ff 00    |                 ldx.# 0000ff         
  54:000 | DONE wsp | na 16 16 |        |             |
  55:000 | DONE cmt | na 16 16 |        |             |                 ; We start out in decimal mode
  56:000 | DONE ins | na 16 16 | 00506f | a9 0a 00    |                 lda.# 000a           
  57:000 | DONE ins | na 16 16 | 005072 | 85 16       |                 sta.d 000016         
  58:000 | DONE wsp | na 16 16 |        |             |
  59:000 | DONE cmt | na 16 16 |        |             |                 ; set the OUTPUT vector to the default, which is always put_chr,
  60:000 | DONE cmt | na 16 16 |        |             |                 ; but may have synonyms such as uart0
  61:000 | DONE ins | na 16 16 | 005074 | a9 34 50    |                 lda.# 005034         
  62:000 | DONE ins | na 16 16 | 005077 | 85 0e       |                 sta.d 00000e         
  63:000 | DONE wsp | na 16 16 |        |             |
  64:000 | DONE cmt | na 16 16 |        |             |                 ; set the INPUT vector to the default, which is always get_chr,
  65:000 | DONE cmt | na 16 16 |        |             |                 ; but may have synonyms such as uart0
  66:000 | DONE ins | na 16 16 | 005079 | a9 45 50    |                 lda.# 005045         
  67:000 | DONE ins | na 16 16 | 00507c | 85 10       |                 sta.d 000010         
  68:000 | DONE wsp | na 16 16 |        |             |
  69:000 | DONE cmt | na 16 16 |        |             |                 ; set the HAVE_KEY vector to the default, which is always
  70:000 | DONE cmt | na 16 16 |        |             |                 ; have_chr, but may have synonyms such as uart0
  71:000 | DONE ins | na 16 16 | 00507e | a9 54 50    |                 lda.# 005054         
  72:000 | DONE ins | na 16 16 | 005081 | 85 12       |                 sta.d 000012         
  73:000 | DONE wsp | na 16 16 |        |             |
  74:000 | DONE cmt | na 16 16 |        |             |                 ; The compiler pointer (CP) points to the first free byte
  75:000 | DONE cmt | na 16 16 |        |             |                 ; in the Dictionary
  76:000 | DONE ins | na 16 16 | 005083 | a9 00 03    |                 lda.# 000300         
  77:000 | DONE ins | na 16 16 | 005086 | 85 00       |                 sta.d 000000         
  78:000 | DONE wsp | na 16 16 |        |             |
  79:000 | DONE ins | na 16 16 | 005088 | a9 00 02    |                 lda.# 000200         
  80:000 | DONE ins | na 16 16 | 00508b | 85 08       |                 sta.d 000008         input buffer
  81:000 | DONE ins | na 16 16 | 00508d | 64 0a       |                 stz.d 00000a         input buffer starts empty
  82:000 | DONE ins | na 16 16 | 00508f | 64 06       |                 stz.d 000006         SOURCE-ID is zero
  83:000 | DONE ins | na 16 16 | 005091 | 64 14       |                 stz.d 000014         STATE is zero (interpret)
  84:000 | DONE wsp | na 16 16 |        |             |
  85:000 | DONE cmt | na 16 16 |        |             |                 ; The name token (nt) of DROP is always the first one in the
  86:000 | DONE cmt | na 16 16 |        |             |                 ; new Dictionary, so we start off the Dictionary Pointer (DP)
  87:000 | DONE cmt | na 16 16 |        |             |                 ; there. Anything that comes after that (with WORDS, before
  88:000 | DONE cmt | na 16 16 |        |             |                 ; that) is high-level
  89:000 | DONE ins | na 16 16 | 005093 | a9 ca 66    |                 lda.# 0066ca         
  90:000 | DONE ins | na 16 16 | 005096 | 85 02       |                 sta.d 000002         
  91:000 | DONE wsp | na 16 16 |        |             |
  92:000 | DONE cmt | na 16 16 |        |             |                 ; Clean the screen, assumes vt100 terminal
  93:000 | DONE ins | na 16 16 | 005098 | 20 b7 5a    |                 jsr 005ab7           
  94:000 | DONE wsp | na 16 16 |        |             |
  95:000 | DONE cmt | na 16 16 |        |             |                 ; Define high-level words via EVALUATE. At this point, whatever
  96:000 | DONE cmt | na 16 16 |        |             |                 ; is in Y (TOS) is garbage, so we don't have to push it to the
  97:000 | DONE cmt | na 16 16 |        |             |                 ; stack first
  98:000 | DONE ins | na 16 16 | 00509b | ca          |                 dex                  
  99:000 | DONE ins | na 16 16 | 00509c | ca          |                 dex                  
 100:000 | DONE ins | na 16 16 | 00509d | ca          |                 dex                  
 101:000 | DONE ins | na 16 16 | 00509e | ca          |                 dex                  
 102:000 | DONE ins | na 16 16 | 00509f | a9 c5 67    |                 lda.# 0067c5         
 103:000 | DONE ins | na 16 16 | 0050a2 | 95 00       |                 sta.dx 00            Start address goes in NOS
 104:000 | DONE ins | na 16 16 | 0050a4 | a0 47 06    |                 ldy.# 000647         length goes in TOS
 105:000 | DONE wsp | na 16 16 |        |             |
 106:000 | DONE ins | na 16 16 | 0050a7 | 20 db 57    |                 jsr 0057db           
 107:000 | DONE wsp | na 16 16 |        |             |
 108:000 | DONE cmt | na 16 16 |        |             |                 ; fall through to ABORT
 109:000 | DONE wsp | na 16 16 |        |             |
 110:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 111:000 | DONE cmt | na 16 16 |        |             | ; ABORT ( -- ) 8+ bytes / X cycles
 112:000 | DONE cmt | na 16 16 |        |             | ; Reset the parameter (data) stack pointer and continue as QUIT
 113:000 | DONE cmt | na 16 16 |        |             | ; We can jump here via subroutine because we reset the stack pointer
 114:000 | DONE cmt | na 16 16 |        |             | ; anyway. Flows into QUIT.
 115:000 | DONE lbl | na 16 16 | 0050aa |             | xt_abort                             
 116:000 | DONE ins | na 16 16 | 0050aa | c2 20       |                 rep 20               
 116:001 | DONE ctl | na 16 16 |        |             |         .!a16
 117:000 | DONE cmt | na 16 16 |        |             |                 ; clear Data Stack
 118:000 | DONE ins | na 16 16 | 0050ac | a0 00 00    |                 ldy.# 0000           
 119:000 | DONE ins | na 16 16 | 0050af | a2 ff 00    |                 ldx.# 0000ff         
 120:000 | DONE wsp | na 16 16 |        |             |
 121:000 | DONE wsp | na 16 16 |        |             |
 122:000 | DONE cmt | na 16 16 |        |             | ; drops through to QUIT, z_abort is the same as z_quit.
 123:000 | DONE wsp | na 16 16 |        |             |
 124:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 125:000 | DONE cmt | na 16 16 |        |             | ; QUIT ( -- ) X bytes / X cycles
 126:000 | DONE cmt | na 16 16 |        |             | ; Reset the input, clearning Return Stack. Jumps to QUIT do not have to be
 127:000 | DONE cmt | na 16 16 |        |             | ; subroutine jumps as the Return Stack is cleared anyway. Liara Forth follows
 128:000 | DONE cmt | na 16 16 |        |             | ; the ANSI Forth recommendation to use REFILL. Note we don't display the "ok"
 129:000 | DONE cmt | na 16 16 |        |             | ; system prompt until after the first output. This follows Gforth.
 130:000 | DONE lbl | na 16 16 | 0050b2 |             | xt_quit                              
 131:000 | DONE cmt | na 16 16 |        |             |                 ; clear Return Stack
 132:000 | DONE ins | na 16 16 | 0050b2 | a9 ff 01    |                 lda.# 0001ff         
 133:000 | DONE ins | na 16 16 | 0050b5 | 1b          |                 tcs                  
 134:000 | DONE wsp | na 16 16 |        |             |
 135:000 | DONE cmt | na 16 16 |        |             |                 ; make sure Instruction Pointer is empty
 136:000 | DONE cmt | na 16 16 |        |             |                 ; TODO move this someplace else or else it will end up in ROM
 137:000 | DONE ins | na 16 16 | 0050b6 | 9c 0a 58    |                 stz 00580a           
 138:000 | DONE wsp | na 16 16 |        |             |
 139:000 | DONE cmt | na 16 16 |        |             |                 ; switch SOURCE-ID to zero (keyboard input)
 140:000 | DONE ins | na 16 16 | 0050b9 | 64 06       |                 stz.d 000006         
 141:000 | DONE wsp | na 16 16 |        |             |
 142:000 | DONE cmt | na 16 16 |        |             |                 ; switch to interpret state (STATE is zero)
 143:000 | DONE ins | na 16 16 | 0050bb | 64 14       |                 stz.d 000014         
 144:000 | DONE wsp | na 16 16 |        |             |
 145:000 | DONE lbl | na 16 16 | 0050bd |             | quit_get_line                        
 146:000 | DONE cmt | na 16 16 |        |             |                 ; Empty current input buffer
 147:000 | DONE ins | na 16 16 | 0050bd | 64 0a       |                 stz.d 00000a         
 148:000 | DONE wsp | na 16 16 |        |             |
 149:000 | DONE cmt | na 16 16 |        |             |                 ; Accept a line from the current input source
 150:000 | DONE ins | na 16 16 | 0050bf | 20 8b 5b    |                 jsr 005b8b           ( -- f )
 151:000 | DONE wsp | na 16 16 |        |             |
 152:000 | DONE ins | na 16 16 | 0050c2 | 98          |                 tya                  force flag test
 153:000 | DONE ins | na 16 16 | 0050c3 | d0 06       |                 bne 0050cb           
 154:000 | DONE wsp | na 16 16 |        |             |
 155:000 | DONE cmt | na 16 16 |        |             |                 ; If REFILL returned a FALSE flag, something went wrong and we
 156:000 | DONE cmt | na 16 16 |        |             |                 ; need to print an error message and reset the machine. We don't
 157:000 | DONE cmt | na 16 16 |        |             |                 ; need to save TOS because we're going to clobber it anyway when we
 158:000 | DONE cmt | na 16 16 |        |             |                 ; go back to ABORT.
 159:000 | DONE ins | na 16 16 | 0050c5 | a9 c6 6e    |                 lda.# 006ec6         
 160:000 | DONE ins | na 16 16 | 0050c8 | 4c 8c 67    |                 jmp 00678c           
 161:000 | DONE wsp | na 16 16 |        |             |
 162:000 | DONE wsp | na 16 16 |        |             |
 163:000 | DONE lbl | na 16 16 | 0050cb |             | quit_refill_successful               
 164:000 | DONE cmt | na 16 16 |        |             |                 ; Assume we have successfully accepted a string of input from
 165:000 | DONE cmt | na 16 16 |        |             |                 ; a source, with address cib and length of input in ciblen. We
 166:000 | DONE cmt | na 16 16 |        |             |                 ; arrive here still with the TRUE flag from REFILL as TOS (in Y)
 167:000 | DONE ins | na 16 16 | 0050cb | b4 00       |                 ldy.dx 00            drop TOS
 168:000 | DONE ins | na 16 16 | 0050cd | e8          |                 inx                  
 169:000 | DONE ins | na 16 16 | 0050ce | e8          |                 inx                  
 170:000 | DONE wsp | na 16 16 |        |             |
 171:000 | DONE cmt | na 16 16 |        |             |                 ; make >IN point to begining of buffer
 172:000 | DONE ins | na 16 16 | 0050cf | 64 0c       |                 stz.d 00000c         
 173:000 | DONE wsp | na 16 16 |        |             |
 174:000 | DONE cmt | na 16 16 |        |             |                 ; Main compile/execute routine. Consider moving this inside QUIT
 175:000 | DONE cmt | na 16 16 |        |             |                 ; once we know everything works
 176:000 | DONE ins | na 16 16 | 0050d1 | 20 07 67    |                 jsr 006707           
 177:000 | DONE wsp | na 16 16 |        |             |
 178:000 | DONE cmt | na 16 16 |        |             |                 ; Test for Data Stack underflow. Our stack is so large in single
 179:000 | DONE cmt | na 16 16 |        |             |                 ; user mode that we don't bother checking for overflow - if that
 180:000 | DONE cmt | na 16 16 |        |             |                 ; happens, we're screwed anyway
 181:000 | DONE ins | na 16 16 | 0050d4 | e0 00 01    |                 cpx.# 000100         
 182:000 | DONE ins | na 16 16 | 0050d7 | 90 06       |                 bcc 0050df           DSP must always be smaller (!) than DSP0
 183:000 | DONE wsp | na 16 16 |        |             |
 184:000 | DONE ins | na 16 16 | 0050d9 | a9 2c 6f    |                 lda.# 006f2c         
 185:000 | DONE ins | na 16 16 | 0050dc | 4c 8c 67    |                 jmp 00678c           
 186:000 | DONE wsp | na 16 16 |        |             |
 187:000 | DONE lbl | na 16 16 | 0050df |             | quit_ok                              
 188:000 | DONE cmt | na 16 16 |        |             |                 ; Display system prompt if all went well. If we're interpreting,
 189:000 | DONE cmt | na 16 16 |        |             |                 ; this is " ok", if we're compiling, it's " compiled"
 190:000 | DONE ins | na 16 16 | 0050df | a5 14       |                 lda.d 000014         
 191:000 | DONE ins | na 16 16 | 0050e1 | d0 05       |                 bne 0050e8           
 192:000 | DONE wsp | na 16 16 |        |             |
 193:000 | DONE ins | na 16 16 | 0050e3 | a9 0c 6e    |                 lda.# 006e0c         
 194:000 | DONE ins | na 16 16 | 0050e6 | 80 03       |                 bra 0050eb           
 195:000 | DONE lbl | na 16 16 | 0050e8 |             | quit_compiled                        
 196:000 | DONE ins | na 16 16 | 0050e8 | a9 10 6e    |                 lda.# 006e10         fall through to quit_print
 197:000 | DONE lbl | na 16 16 | 0050eb |             | quit_print                           
 198:000 | DONE ins | na 16 16 | 0050eb | 20 92 67    |                 jsr 006792           
 199:000 | DONE wsp | na 16 16 |        |             |
 200:000 | DONE cmt | na 16 16 |        |             |                 ; Awesome line, everybody. Now get the next one
 201:000 | DONE ins | na 16 16 | 0050ee | 4c bd 50    |                 jmp 0050bd           
 202:000 | DONE wsp | na 16 16 |        |             |
 203:000 | DONE lbl | na 16 16 | 0050f1 |             | z_cold                               
 204:000 | DONE lbl | na 16 16 | 0050f1 |             | z_abort                              
 205:000 | DONE lbl | na 16 16 | 0050f1 |             | z_quit                               ; empty, no RTS required
 206:000 | DONE wsp | na 16 16 |        |             |
 207:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 208:000 | DONE cmt | na 16 16 |        |             | ; < "LESS" ( n m -- f ) X bytes / X cycles
 209:000 | DONE cmt | na 16 16 |        |             | ; Return true flag if NOS < TOS. See
 210:000 | DONE cmt | na 16 16 |        |             | ; http://www.6502.org/tutorials/compare_beyond.html for details on the
 211:000 | DONE cmt | na 16 16 |        |             | ; comparisons
 212:000 | DONE lbl | na 16 16 | 0050f1 |             | xt_less                              
 213:000 | DONE ins | na 16 16 | 0050f1 | 98          |                 tya                  
 214:000 | DONE ins | na 16 16 | 0050f2 | a0 00 00    |                 ldy.# 0000           default is false
 215:000 | DONE wsp | na 16 16 |        |             |
 216:000 | DONE ins | na 16 16 | 0050f5 | 38          |                 sec                  
 217:000 | DONE ins | na 16 16 | 0050f6 | f5 00       |                 sbc.dx 00            
 218:000 | DONE ins | na 16 16 | 0050f8 | f0 08       |                 beq 005102           the same is not greater
 219:000 | DONE ins | na 16 16 | 0050fa | 50 03       |                 bvc 0050ff           no overflow, skip ahead
 220:000 | DONE wsp | na 16 16 |        |             |
 221:000 | DONE cmt | na 16 16 |        |             |                 ; Deal with oveflow because we use signed numbers
 222:000 | DONE ins | na 16 16 | 0050fc | 49 00 80    |                 eor.# 8000           compliment negative flag
 223:000 | DONE wsp | na 16 16 |        |             |
 224:000 | DONE lbl | na 16 16 | 0050ff |             | xt_less_no_ov                        
 225:000 | DONE cmt | na 16 16 |        |             |                 ; if we're negative TOS > NOS
 226:000 | DONE ins | na 16 16 | 0050ff | 30 01       |                 bmi 005102           
 227:000 | DONE ins | na 16 16 | 005101 | 88          |                 dey                  
 228:000 | DONE lbl | na 16 16 | 005102 |             | xt_less_nip                          
 229:000 | DONE ins | na 16 16 | 005102 | e8          |                 inx                  
 230:000 | DONE ins | na 16 16 | 005103 | e8          |                 inx                  
 231:000 | DONE wsp | na 16 16 |        |             |
 232:000 | DONE lbl | na 16 16 | 005104 |             | z_less                               
 232:001 | DONE ins | na 16 16 | 005104 | 60          |                 rts                  
 233:000 | DONE wsp | na 16 16 |        |             |
 234:000 | DONE wsp | na 16 16 |        |             |
 235:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 236:000 | DONE cmt | na 16 16 |        |             | ; <> "NOT-EQUAL" ( n m -- f ) X bytes / X cycles
 237:000 | DONE cmt | na 16 16 |        |             | ; Return true flag if TOS and NOS are not the same. This is just a different
 238:000 | DONE cmt | na 16 16 |        |             | ; version of EQUAL, we repeat the code for speed reasons
 239:000 | DONE lbl | na 16 16 | 005105 |             | xt_not-equal                         
 240:000 | DONE ins | na 16 16 | 005105 | 98          |                 tya                  
 241:000 | DONE ins | na 16 16 | 005106 | a0 00 00    |                 ldy.# 0000           default value is false
 242:000 | DONE wsp | na 16 16 |        |             |
 243:000 | DONE ins | na 16 16 | 005109 | d5 00       |                 cmp.dx 00            
 244:000 | DONE ins | na 16 16 | 00510b | f0 01       |                 beq 00510e           
 245:000 | DONE ins | na 16 16 | 00510d | 88          |                 dey                  wraps to 0FFFF (true)
 246:000 | DONE wsp | na 16 16 |        |             |
 247:000 | DONE lbl | na 16 16 | 00510e |             | not-equal_equal                      ; yes, this is a silly name
 248:000 | DONE ins | na 16 16 | 00510e | e8          |                 inx                  
 249:000 | DONE ins | na 16 16 | 00510f | e8          |                 inx                  
 250:000 | DONE wsp | na 16 16 |        |             |
 251:000 | DONE lbl | na 16 16 | 005110 |             | z_not-equal                          
 251:001 | DONE ins | na 16 16 | 005110 | 60          |                 rts                  
 252:000 | DONE wsp | na 16 16 |        |             |
 253:000 | DONE wsp | na 16 16 |        |             |
 254:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 255:000 | DONE cmt | na 16 16 |        |             | ; <# "LESSNUMBER" ( -- ) 8 bytes / X cycles
 256:000 | DONE cmt | na 16 16 |        |             | ; Start the process to create pictured numeric output. The new string is
 257:000 | DONE cmt | na 16 16 |        |             | ; constructed from back to front, saving the new character at the beginning of
 258:000 | DONE cmt | na 16 16 |        |             | ; the output string. Since we use PAD as a starting address and work backward
 259:000 | DONE cmt | na 16 16 |        |             | ; (!), the string is constructed in the space between the end of the dictionary
 260:000 | DONE cmt | na 16 16 |        |             | ; (as defined by CP) and the PAD. This allows us to satisfy the ANS Forth
 261:000 | DONE cmt | na 16 16 |        |             | ; condition that programs don't fool around with the PAD but still use its
 262:000 | DONE cmt | na 16 16 |        |             | ; address. Code based on pForth, see
 263:000 | DONE cmt | na 16 16 |        |             | ; http://pforth.googlecode.com/svn/trunk/fth/numberio.fth pForth is in the pubic
 264:000 | DONE cmt | na 16 16 |        |             | ; domain. Forth is : <# PAD HLD ! ; we use the internal variable tohold instead
 265:000 | DONE cmt | na 16 16 |        |             | ; of HLD.
 266:000 | DONE cmt | na 16 16 |        |             | ; TODO consider using OUTPUT buffer as a location instead
 267:000 | DONE lbl | na 16 16 | 005111 |             | xt_lessnumber                        
 268:000 | DONE ins | na 16 16 | 005111 | 20 ab 5a    |                 jsr 005aab           
 269:000 | DONE ins | na 16 16 | 005114 | 84 18       |                 sty.d 000018         
 270:000 | DONE wsp | na 16 16 |        |             |
 271:000 | DONE ins | na 16 16 | 005116 | b4 00       |                 ldy.dx 00            
 272:000 | DONE ins | na 16 16 | 005118 | e8          |                 inx                  
 273:000 | DONE ins | na 16 16 | 005119 | e8          |                 inx                  
 274:000 | DONE wsp | na 16 16 |        |             |
 275:000 | DONE lbl | na 16 16 | 00511a |             | z_lessnumber                         
 275:001 | DONE ins | na 16 16 | 00511a | 60          |                 rts                  
 276:000 | DONE wsp | na 16 16 |        |             |
 277:000 | DONE wsp | na 16 16 |        |             |
 278:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 279:000 | DONE cmt | na 16 16 |        |             | ; > "GREATER" ( n m -- f ) X bytes / X cycles
 280:000 | DONE cmt | na 16 16 |        |             | ; Return true flag if NOS > TOS. See
 281:000 | DONE cmt | na 16 16 |        |             | ; http://www.6502.org/tutorials/compare_beyond.html for details on the
 282:000 | DONE cmt | na 16 16 |        |             | ; comparisons
 283:000 | DONE lbl | na 16 16 | 00511b |             | xt_greater                           
 284:000 | DONE ins | na 16 16 | 00511b | 98          |                 tya                  
 285:000 | DONE ins | na 16 16 | 00511c | a0 00 00    |                 ldy.# 0000           default is false
 286:000 | DONE wsp | na 16 16 |        |             |
 287:000 | DONE ins | na 16 16 | 00511f | 38          |                 sec                  
 288:000 | DONE ins | na 16 16 | 005120 | f5 00       |                 sbc.dx 00            
 289:000 | DONE ins | na 16 16 | 005122 | f0 08       |                 beq 00512c           the same is not greater
 290:000 | DONE ins | na 16 16 | 005124 | 50 03       |                 bvc 005129           no overflow, skip ahead
 291:000 | DONE wsp | na 16 16 |        |             |
 292:000 | DONE cmt | na 16 16 |        |             |                 ; Deal with oveflow because we use signed numbers
 293:000 | DONE ins | na 16 16 | 005126 | 49 00 80    |                 eor.# 8000           compliment negative flag
 294:000 | DONE wsp | na 16 16 |        |             |
 295:000 | DONE lbl | na 16 16 | 005129 |             | xt_greater_no_ov                     
 296:000 | DONE cmt | na 16 16 |        |             |                 ; if we're still positiv, TOS < NOS
 297:000 | DONE ins | na 16 16 | 005129 | 10 01       |                 bpl 00512c           
 298:000 | DONE ins | na 16 16 | 00512b | 88          |                 dey                  
 299:000 | DONE lbl | na 16 16 | 00512c |             | xt_greater_nip                       
 300:000 | DONE ins | na 16 16 | 00512c | e8          |                 inx                  
 301:000 | DONE ins | na 16 16 | 00512d | e8          |                 inx                  
 302:000 | DONE wsp | na 16 16 |        |             |
 303:000 | DONE lbl | na 16 16 | 00512e |             | z_greater                            
 303:001 | DONE ins | na 16 16 | 00512e | 60          |                 rts                  
 304:000 | DONE wsp | na 16 16 |        |             |
 305:000 | DONE wsp | na 16 16 |        |             |
 306:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 307:000 | DONE cmt | na 16 16 |        |             | ; >BODY "TOBODY" ( xt -- addr ) 3 bytes / 6 cycles
 308:000 | DONE cmt | na 16 16 |        |             | ; Given a word's execution token (xt), return the address of the start of that
 309:000 | DONE cmt | na 16 16 |        |             | ; word's parameter field (PFA). This is the address that HERE would return right
 310:000 | DONE cmt | na 16 16 |        |             | ; after CREATE. Returns garbage if the word was not created with CREATE
 311:000 | DONE cmt | na 16 16 |        |             | ; TODO think if it should return sensible value instead
 312:000 | DONE lbl | na 16 16 | 00512f |             | xt_tobody                            
 313:000 | DONE cmt | na 16 16 |        |             |                 ; In the header, xt already points to the CFA, which CREATE by
 314:000 | DONE cmt | na 16 16 |        |             |                 ; default fills with a JSR to DOVAR. We just need to move xt
 315:000 | DONE cmt | na 16 16 |        |             |                 ; down by three bytes
 316:000 | DONE ins | na 16 16 | 00512f | c8          |                 iny                  
 317:000 | DONE ins | na 16 16 | 005130 | c8          |                 iny                  
 318:000 | DONE ins | na 16 16 | 005131 | c8          |                 iny                  
 319:000 | DONE wsp | na 16 16 |        |             |
 320:000 | DONE lbl | na 16 16 | 005132 |             | z_tobody                             
 320:001 | DONE ins | na 16 16 | 005132 | 60          |                 rts                  
 321:000 | DONE wsp | na 16 16 |        |             |
 322:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 323:000 | DONE cmt | na 16 16 |        |             | ; >IN "TOIN" ( -- addr ) 6 bytes / 12 cycles
 324:000 | DONE cmt | na 16 16 |        |             | ; Return address where pointer to current char in input buffer lives (>IN)
 325:000 | DONE lbl | na 16 16 | 005133 |             | xt_to-in                             
 326:000 | DONE ins | na 16 16 | 005133 | ca          |                 dex                  
 327:000 | DONE ins | na 16 16 | 005134 | ca          |                 dex                  
 328:000 | DONE ins | na 16 16 | 005135 | 94 00       |                 sty.dx 00            
 329:000 | DONE wsp | na 16 16 |        |             |
 330:000 | DONE ins | na 16 16 | 005137 | a0 0c 00    |                 ldy.# 00000c         >IN
 331:000 | DONE lbl | na 16 16 | 00513a |             | z_to-in                              
 331:001 | DONE ins | na 16 16 | 00513a | 60          |                 rts                  
 332:000 | DONE wsp | na 16 16 |        |             |
 333:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 334:000 | DONE cmt | na 16 16 |        |             | ; >NUMBER ( ud addr u -- ud addr u ) X bytes / X cycles
 335:000 | DONE cmt | na 16 16 |        |             | ; Convert a string to a double number. Logic here is based on the routine by
 336:000 | DONE cmt | na 16 16 |        |             | ; Phil Burk of the same name in pForth; see
 337:000 | DONE cmt | na 16 16 |        |             | ; https://github.com/philburk/pforth/blob/master/fth/numberio.fth the original
 338:000 | DONE cmt | na 16 16 |        |             | ; Forth code. We arrive here from NUMBER which has made sure that we don't have
 339:000 | DONE cmt | na 16 16 |        |             | ; to deal with a sign and we don't have to deal with a dot as a last character
 340:000 | DONE cmt | na 16 16 |        |             | ; that signalizes double - this should be a pure number string.
 341:000 | DONE cmt | na 16 16 |        |             | ; This routine calles UM*, which uses tmp1, tmp2 and tmp3, so we cannot access
 342:000 | DONE cmt | na 16 16 |        |             | ; any of those.
 343:000 | DONE lbl | na 16 16 | 00513b |             | xt_tonumber                          
 344:000 | DONE dir | na 16 16 |        |             |         .!a16                        
 345:000 | DONE cmt | na 16 16 |        |             |                 ; For the math routine, we move the inputs to the scratchpad to
 346:000 | DONE cmt | na 16 16 |        |             |                 ; avoid having to fool around with the Data Stack.
 347:000 | DONE cmt | na 16 16 |        |             |                 ;
 348:000 | DONE cmt | na 16 16 |        |             |                 ;     +-----+-----+-----+-----+-----+-----+-----+-----+
 349:000 | DONE cmt | na 16 16 |        |             |                 ;     |   UD-LO   |   UD-HI   |     N     | UD-HI-LO  |
 350:000 | DONE cmt | na 16 16 |        |             |                 ;     |           |           |           |           |
 351:000 | DONE cmt | na 16 16 |        |             |                 ;     |  S    S+1 | S+2   S+3 | S+4   S+5 | S+6   S+7 |
 352:000 | DONE cmt | na 16 16 |        |             |                 ;     +-----+-----+-----+-----+-----+-----+-----+-----+
 353:000 | DONE wsp | na 16 16 |        |             |
 354:000 | DONE cmt | na 16 16 |        |             |                 ; The math routine works by converting one character to its
 355:000 | DONE cmt | na 16 16 |        |             |                 ; numerical value (N) via DIGIT? and storing it in S+4 for
 356:000 | DONE cmt | na 16 16 |        |             |                 ; the moment. We then multiply the UD-HI value with the radix
 357:000 | DONE cmt | na 16 16 |        |             |                 ; (from BASE) using UM*, which returns a double-cell result. We
 358:000 | DONE cmt | na 16 16 |        |             |                 ; discard the high cell of that result (UD-HI-HI) and store the
 359:000 | DONE cmt | na 16 16 |        |             |                 ; low cell (UD-HI-LO) in S+6 for now. -- The second part is
 360:000 | DONE cmt | na 16 16 |        |             |                 ; multiplying UD-LO with the radix. The high cell (UD-LO-HI)
 361:000 | DONE cmt | na 16 16 |        |             |                 ; gets put in S+2, the low cell (HD-LO-LO) in S. We then use
 362:000 | DONE cmt | na 16 16 |        |             |                 ; a version of D+ to add ( S S+2 ) and ( S+4 S+6) together,
 363:000 | DONE cmt | na 16 16 |        |             |                 ; storing the result back in S and S+2, before we start another
 364:000 | DONE cmt | na 16 16 |        |             |                 ; round with it as the new UD-LO and UD-HI.
 365:000 | DONE wsp | na 16 16 |        |             |
 366:000 | DONE cmt | na 16 16 |        |             |                 ; Fill the scratchpad. We arrive with ( ud-lo ud-hi addr u ).
 367:000 | DONE cmt | na 16 16 |        |             |                 ; After this step, the original ud-lo and ud-hi will still be on
 368:000 | DONE cmt | na 16 16 |        |             |                 ; the Data Stack, but will be ignored and later overwritten
 369:000 | DONE ins | na 16 16 | 00513b | b5 04       |                 lda.dx 04            ud-lo
 370:000 | DONE ins | na 16 16 | 00513d | 85 26       |                 sta.d 000026         
 371:000 | DONE ins | na 16 16 | 00513f | b5 02       |                 lda.dx 02            ud-hi
 372:000 | DONE ins | na 16 16 | 005141 | 85 28       |                 sta.d 000028         
 373:000 | DONE wsp | na 16 16 |        |             |
 374:000 | DONE cmt | na 16 16 |        |             |                 ; We push down one on the Data Stack to use TOS for character
 375:000 | DONE cmt | na 16 16 |        |             |                 ; conversion - now ( ud-lo ud-hi addr u u )
 376:000 | DONE ins | na 16 16 | 005143 | ca          |                 dex                  
 377:000 | DONE ins | na 16 16 | 005144 | ca          |                 dex                  
 378:000 | DONE ins | na 16 16 | 005145 | 94 00       |                 sty.dx 00            
 379:000 | DONE wsp | na 16 16 |        |             |
 380:000 | DONE lbl | na 16 16 | 005147 |             | tonumber_loop                        
 381:000 | DONE cmt | na 16 16 |        |             |                 ; Get one character
 382:000 | DONE ins | na 16 16 | 005147 | a1 02       |                 lda.dxi 02           
 383:000 | DONE ins | na 16 16 | 005149 | a8          |                 tay                  ( ud-lo ud-hi addr u char )
 384:000 | DONE wsp | na 16 16 |        |             |
 385:000 | DONE cmt | na 16 16 |        |             |                 ; Convert one character. DIGIT? takes care of the correct
 386:000 | DONE cmt | na 16 16 |        |             |                 ; register size for A and does a paranoid AND to make sure that
 387:000 | DONE cmt | na 16 16 |        |             |                 ; B is zero, so we don't have to do any of that here.
 388:000 | DONE ins | na 16 16 | 00514a | 20 c3 56    |                 jsr 0056c3           ( char -- n -1 | char 0 )
 389:000 | DONE wsp | na 16 16 |        |             |
 390:000 | DONE cmt | na 16 16 |        |             |                 ; This gives us (ud-lo ud-hi addr u char f | n f ), so check the
 391:000 | DONE cmt | na 16 16 |        |             |                 ; flag. If it is zero, we return what we have and let the caller
 392:000 | DONE cmt | na 16 16 |        |             |                 ; (usually NUMBER) complain to the user
 393:000 | DONE ins | na 16 16 | 00514d | 98          |                 tya                  
 394:000 | DONE ins | na 16 16 | 00514e | d0 06       |                 bne 005156           
 395:000 | DONE wsp | na 16 16 |        |             |
 396:000 | DONE ins | na 16 16 | 005150 | b4 00       |                 ldy.dx 00            
 397:000 | DONE ins | na 16 16 | 005152 | e8          |                 inx                  
 398:000 | DONE ins | na 16 16 | 005153 | e8          |                 inx                  
 399:000 | DONE ins | na 16 16 | 005154 | 80 35       |                 bra 00518b           
 400:000 | DONE wsp | na 16 16 |        |             |
 401:000 | DONE lbl | na 16 16 | 005156 |             | tonumber_ok                          
 402:000 | DONE cmt | na 16 16 |        |             |                 ; Conversion was successful, so we're here with
 403:000 | DONE cmt | na 16 16 |        |             |                 ; ( ud-lo ud-hi addr u n -1 ) and can start the math routine.
 404:000 | DONE wsp | na 16 16 |        |             |
 405:000 | DONE cmt | na 16 16 |        |             |                 ; Save N so we don't have to fool around with the Data Stack
 406:000 | DONE ins | na 16 16 | 005156 | b5 00       |                 lda.dx 00            
 407:000 | DONE ins | na 16 16 | 005158 | 85 2a       |                 sta.d 00002a         
 408:000 | DONE wsp | na 16 16 |        |             |
 409:000 | DONE cmt | na 16 16 |        |             |                 ; Now multiply ud-hi (the one in the scratchpad, not the
 410:000 | DONE cmt | na 16 16 |        |             |                 ; original one in the Data Stack) by the radix from BASE. We can
 411:000 | DONE cmt | na 16 16 |        |             |                 ; clobber TOS and NOS
 412:000 | DONE ins | na 16 16 | 00515a | a5 28       |                 lda.d 000028         
 413:000 | DONE ins | na 16 16 | 00515c | 95 00       |                 sta.dx 00            
 414:000 | DONE ins | na 16 16 | 00515e | a4 16       |                 ldy.d 000016         ( ud-lo ud-hi addr u ud-hi base )
 415:000 | DONE wsp | na 16 16 |        |             |
 416:000 | DONE cmt | na 16 16 |        |             |                 ; UM* returns a double celled number
 417:000 | DONE ins | na 16 16 | 005160 | 20 73 5d    |                 jsr 005d73           ( ud-lo ud-hi addr u ud-hi-lo ud-hi-hi )
 418:000 | DONE wsp | na 16 16 |        |             |
 419:000 | DONE cmt | na 16 16 |        |             |                 ; Move ud-hi-lo to safety
 420:000 | DONE ins | na 16 16 | 005163 | b5 00       |                 lda.dx 00            ud-hi-lo
 421:000 | DONE ins | na 16 16 | 005165 | 85 2c       |                 sta.d 00002c         
 422:000 | DONE wsp | na 16 16 |        |             |
 423:000 | DONE cmt | na 16 16 |        |             |                 ; Now we multiply ud-lo, overwriting the stack entries
 424:000 | DONE ins | na 16 16 | 005167 | a5 26       |                 lda.d 000026         
 425:000 | DONE ins | na 16 16 | 005169 | 95 00       |                 sta.dx 00            ( ud-lo ud-hi addr u ud-lo ud-hi-hi )
 426:000 | DONE ins | na 16 16 | 00516b | a4 16       |                 ldy.d 000016         ( ud-lo ud-hi addr u ud-lo base )
 427:000 | DONE wsp | na 16 16 |        |             |
 428:000 | DONE ins | na 16 16 | 00516d | 20 73 5d    |                 jsr 005d73           ( ud-lo ud-hi addr u ud-lo-lo ud-lo-hi )
 429:000 | DONE ins | na 16 16 | 005170 | 84 28       |                 sty.d 000028         
 430:000 | DONE ins | na 16 16 | 005172 | b5 00       |                 lda.dx 00            
 431:000 | DONE ins | na 16 16 | 005174 | 85 26       |                 sta.d 000026         
 432:000 | DONE wsp | na 16 16 |        |             |
 433:000 | DONE cmt | na 16 16 |        |             |                 ; This is a faster version of D+
 434:000 | DONE ins | na 16 16 | 005176 | a5 26       |                 lda.d 000026         
 435:000 | DONE ins | na 16 16 | 005178 | 18          |                 clc                  
 436:000 | DONE ins | na 16 16 | 005179 | 65 2a       |                 adc.d 00002a         
 437:000 | DONE ins | na 16 16 | 00517b | 85 26       |                 sta.d 000026         this is the new ud-lo
 438:000 | DONE ins | na 16 16 | 00517d | a5 28       |                 lda.d 000028         
 439:000 | DONE ins | na 16 16 | 00517f | 65 2c       |                 adc.d 00002c         
 440:000 | DONE ins | na 16 16 | 005181 | 85 28       |                 sta.d 000028         this is the new ud-hi
 441:000 | DONE wsp | na 16 16 |        |             |
 442:000 | DONE cmt | na 16 16 |        |             |                 ; Clean up: Get rid of one of the two top elements on the Data
 443:000 | DONE cmt | na 16 16 |        |             |                 ; Stack. NIP is faster if Y is TOS
 444:000 | DONE ins | na 16 16 | 005183 | e8          |                 inx                  
 445:000 | DONE ins | na 16 16 | 005184 | e8          |                 inx                  ( ud-lo ud-hi addr u ud-lo-hi )
 446:000 | DONE wsp | na 16 16 |        |             |
 447:000 | DONE cmt | na 16 16 |        |             |                 ; One character down
 448:000 | DONE ins | na 16 16 | 005185 | f6 02       |                 inc.dx 02            increase address
 449:000 | DONE ins | na 16 16 | 005187 | d6 00       |                 dec.dx 00            decrease length
 450:000 | DONE wsp | na 16 16 |        |             |
 451:000 | DONE ins | na 16 16 | 005189 | d0 bc       |                 bne 005147           
 452:000 | DONE wsp | na 16 16 |        |             |
 453:000 | DONE lbl | na 16 16 | 00518b |             | tonumber_done                        
 454:000 | DONE cmt | na 16 16 |        |             |                 ; Counter has reached zero or we have an error. In both cases,
 455:000 | DONE cmt | na 16 16 |        |             |                 ; we clean up the Data Stack and return. We arrive here with
 456:000 | DONE cmt | na 16 16 |        |             |                 ; ( ud-lo ud-hi addr u char ) if there was an error
 457:000 | DONE cmt | na 16 16 |        |             |                 ; and ( ud-lo ud-hi addr u ud-lo ) if not
 458:000 | DONE ins | na 16 16 | 00518b | b4 00       |                 ldy.dx 00            
 459:000 | DONE ins | na 16 16 | 00518d | e8          |                 inx                  
 460:000 | DONE ins | na 16 16 | 00518e | e8          |                 inx                  ( ud-lo ud-hi addr u )
 461:000 | DONE wsp | na 16 16 |        |             |
 462:000 | DONE cmt | na 16 16 |        |             |                 ; The new ud-lo and ud-hi are still on the scratch pad
 463:000 | DONE ins | na 16 16 | 00518f | a5 26       |                 lda.d 000026         new ud-lo
 464:000 | DONE ins | na 16 16 | 005191 | 95 04       |                 sta.dx 04            
 465:000 | DONE ins | na 16 16 | 005193 | a5 28       |                 lda.d 000028         
 466:000 | DONE ins | na 16 16 | 005195 | 95 02       |                 sta.dx 02            new ud-hi
 467:000 | DONE wsp | na 16 16 |        |             |
 468:000 | DONE lbl | na 16 16 | 005197 |             | z_tonumber                           
 468:001 | DONE ins | na 16 16 | 005197 | 60          |                 rts                  
 469:000 | DONE wsp | na 16 16 |        |             |
 470:000 | DONE wsp | na 16 16 |        |             |
 471:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 472:000 | DONE cmt | na 16 16 |        |             | ; >R "TOR" ( n -- ) (R: -- n )  7 bytes / 22 cycles
 473:000 | DONE cmt | na 16 16 |        |             | ; Move Top of Data Stack to Top of Return Stack
 474:000 | DONE cmt | na 16 16 |        |             | ; TODO consider stripping PHA/PLA if natively compiled (see COMPILE,)
 475:000 | DONE lbl | na 16 16 | 005198 |             | xt_tor                               
 476:000 | DONE dir | na 16 16 |        |             |         .!a16                        
 477:000 | DONE cmt | na 16 16 |        |             |                 ; Save the return address. If this word is natively coded, this
 478:000 | DONE cmt | na 16 16 |        |             |                 ; is a complete waste of nine cycles, but required for
 479:000 | DONE cmt | na 16 16 |        |             |                 ; subroutine coding
 480:000 | DONE ins | na 16 16 | 005198 | 68          |                 pla                  
 481:000 | DONE wsp | na 16 16 |        |             |
 482:000 | DONE ins | na 16 16 | 005199 | 5a          |                 phy                  the actual work
 483:000 | DONE wsp | na 16 16 |        |             |
 484:000 | DONE ins | na 16 16 | 00519a | b4 00       |                 ldy.dx 00            DROP
 485:000 | DONE ins | na 16 16 | 00519c | e8          |                 inx                  
 486:000 | DONE ins | na 16 16 | 00519d | e8          |                 inx                  
 487:000 | DONE wsp | na 16 16 |        |             |
 488:000 | DONE ins | na 16 16 | 00519e | 48          |                 pha                  put return address back in place
 489:000 | DONE wsp | na 16 16 |        |             |
 490:000 | DONE lbl | na 16 16 | 00519f |             | z_tor                                
 490:001 | DONE ins | na 16 16 | 00519f | 60          |                 rts                  
 491:000 | DONE wsp | na 16 16 |        |             |
 492:000 | DONE wsp | na 16 16 |        |             |
 493:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 494:000 | DONE cmt | na 16 16 |        |             | ; /STRING ( addr u n -- ) X bytes / X cycles
 495:000 | DONE cmt | na 16 16 |        |             | ; Remove characters from front of string. Uses tmp1
 496:000 | DONE cmt | na 16 16 |        |             | ; Forth version: ROT OVER + ROT ROT - ;
 497:000 | DONE cmt | na 16 16 |        |             | ; TODO check for negative strings so 1 /STRING TYPE won't try to print the whole
 498:000 | DONE cmt | na 16 16 |        |             | ; address space; follow Gforth in failing gracefully
 499:000 | DONE lbl | na 16 16 | 0051a0 |             | xt_slashstring                       
 500:000 | DONE ins | na 16 16 | 0051a0 | 84 1c       |                 sty.d 00001c         
 501:000 | DONE wsp | na 16 16 |        |             |
 502:000 | DONE ins | na 16 16 | 0051a2 | b5 00       |                 lda.dx 00            length
 503:000 | DONE ins | na 16 16 | 0051a4 | 38          |                 sec                  
 504:000 | DONE ins | na 16 16 | 0051a5 | e5 1c       |                 sbc.d 00001c         
 505:000 | DONE ins | na 16 16 | 0051a7 | a8          |                 tay                  
 506:000 | DONE wsp | na 16 16 |        |             |
 507:000 | DONE ins | na 16 16 | 0051a8 | b5 02       |                 lda.dx 02            address
 508:000 | DONE ins | na 16 16 | 0051aa | 18          |                 clc                  
 509:000 | DONE ins | na 16 16 | 0051ab | 65 1c       |                 adc.d 00001c         
 510:000 | DONE ins | na 16 16 | 0051ad | 95 02       |                 sta.dx 02            
 511:000 | DONE wsp | na 16 16 |        |             |
 512:000 | DONE ins | na 16 16 | 0051af | e8          |                 inx                  
 513:000 | DONE ins | na 16 16 | 0051b0 | e8          |                 inx                  
 514:000 | DONE wsp | na 16 16 |        |             |
 515:000 | DONE lbl | na 16 16 | 0051b1 |             | z_slashstring                        
 515:001 | DONE ins | na 16 16 | 0051b1 | 60          |                 rts                  
 516:000 | DONE wsp | na 16 16 |        |             |
 517:000 | DONE wsp | na 16 16 |        |             |
 518:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 519:000 | DONE cmt | na 16 16 |        |             | ; . "DOT" ( n -- ) X bytes / X cycles
 520:000 | DONE cmt | na 16 16 |        |             | ; Print value that is TOS followed by a single space. Forth code is  DUP ABS
 521:000 | DONE cmt | na 16 16 |        |             | ; 0 <# #S ROT SIGN #> TYPE SPACE, but we want to have one routine that is not
 522:000 | DONE cmt | na 16 16 |        |             | ; high-level. Based on
 523:000 | DONE cmt | na 16 16 |        |             | ; https://github.com/philburk/pforth/blob/master/fth/numberio.fth Since this is
 524:000 | DONE cmt | na 16 16 |        |             | ; used interactively, and humans are slow (just ask GlaDOS), we focus on size.
 525:000 | DONE cmt | na 16 16 |        |             | ; TODO Once we know this works, move to assembler
 526:000 | DONE lbl | na 16 16 | 0051b2 |             | xt_dot                               
 527:000 | DONE ins | na 16 16 | 0051b2 | 20 aa 57    |                 jsr 0057aa           ( n n )
 528:000 | DONE ins | na 16 16 | 0051b5 | 20 3a 54    |                 jsr 00543a           ( n n )
 529:000 | DONE ins | na 16 16 | 0051b8 | 20 21 53    |                 jsr 005321           ( n n 0 )
 530:000 | DONE ins | na 16 16 | 0051bb | 20 11 51    |                 jsr 005111           ( n n 0 )
 531:000 | DONE ins | na 16 16 | 0051be | 20 9e 52    |                 jsr 00529e           ( n ud )
 532:000 | DONE ins | na 16 16 | 0051c1 | 20 b3 5b    |                 jsr 005bb3           ( ud n )
 533:000 | DONE ins | na 16 16 | 0051c4 | 20 16 5c    |                 jsr 005c16           ( ud )
 534:000 | DONE ins | na 16 16 | 0051c7 | 20 8f 52    |                 jsr 00528f           
 535:000 | DONE ins | na 16 16 | 0051ca | 20 37 5d    |                 jsr 005d37           
 536:000 | DONE ins | na 16 16 | 0051cd | 20 f3 5c    |                 jsr 005cf3           
 537:000 | DONE wsp | na 16 16 |        |             |
 538:000 | DONE lbl | na 16 16 | 0051d0 |             | z_dot                                
 538:001 | DONE ins | na 16 16 | 0051d0 | 60          |                 rts                  
 539:000 | DONE wsp | na 16 16 |        |             |
 540:000 | DONE wsp | na 16 16 |        |             |
 541:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 542:000 | DONE cmt | na 16 16 |        |             | ; ." "DOTQUOTE" ( -- ) X bytes / X cycles
 543:000 | DONE cmt | na 16 16 |        |             | ; Compile string that is printed during run time. ANSI Forth wants this to be
 544:000 | DONE cmt | na 16 16 |        |             | ; compile-only, even though everybody and their friend uses it for everything.
 545:000 | DONE cmt | na 16 16 |        |             | ; We follow the book here, and recommend .( for general printing.
 546:000 | DONE lbl | na 16 16 | 0051d1 |             | xt_dotquote                          
 547:000 | DONE ins | na 16 16 | 0051d1 | ca          |                 dex                  
 548:000 | DONE ins | na 16 16 | 0051d2 | ca          |                 dex                  
 549:000 | DONE ins | na 16 16 | 0051d3 | 94 00       |                 sty.dx 00            
 550:000 | DONE ins | na 16 16 | 0051d5 | a0 22 00    |                 ldy.# 0022           ASCII for "
 551:000 | DONE wsp | na 16 16 |        |             |
 552:000 | DONE ins | na 16 16 | 0051d8 | 20 f6 5a    |                 jsr 005af6           
 553:000 | DONE ins | na 16 16 | 0051db | 20 24 5c    |                 jsr 005c24           
 554:000 | DONE wsp | na 16 16 |        |             |
 555:000 | DONE ins | na 16 16 | 0051de | f4 37 5d    |                 phe.# 005d37         
 556:000 | DONE ins | na 16 16 | 0051e1 | 20 6b 67    |                 jsr 00676b           
 557:000 | DONE wsp | na 16 16 |        |             |
 558:000 | DONE ins | na 16 16 | 0051e4 | 60          |                 rts                  
 559:000 | DONE lbl | na 16 16 | 0051e5 |             | z_dotquote                           
 560:000 | DONE wsp | na 16 16 |        |             |
 561:000 | DONE wsp | na 16 16 |        |             |
 562:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 563:000 | DONE cmt | na 16 16 |        |             | ; .S "DOTS" ( -- ) X bytes / X cycles
 564:000 | DONE cmt | na 16 16 |        |             | ; Print content of Data Stack non-distructively. Since this is for humans, we
 565:000 | DONE cmt | na 16 16 |        |             | ; don't have to worry about speed. We follow the format of Gforth
 566:000 | DONE cmt | na 16 16 |        |             | ; and print the number of elements first in brackets, followed by the Data Stack
 567:000 | DONE cmt | na 16 16 |        |             | ; content (if present).
 568:000 | DONE cmt | na 16 16 |        |             | ; TODO rewrite in high Forth words
 569:000 | DONE lbl | na 16 16 | 0051e5 |             | xt_dots                              
 570:000 | DONE dir | na 16 16 |        |             |         .!a16                        
 571:000 | DONE dir | na 16 16 |        |             |         .!xy16                       
 572:000 | DONE ins | na 16 16 | 0051e5 | 20 38 57    |                 jsr 005738           ( -- u)
 573:000 | DONE wsp | na 16 16 |        |             |
 574:000 | DONE cmt | na 16 16 |        |             |                 ; Print stack depth in brackets
 575:000 | DONE cmt | na 16 16 |        |             |                 ; TODO rewrite this to use EMIT
 576:000 | DONE ins | na 16 16 | 0051e8 | a9 3c 00    |                 lda.# 3c             
 577:000 | DONE ins | na 16 16 | 0051eb | 20 34 50    |                 jsr 005034           
 578:000 | DONE wsp | na 16 16 |        |             |
 579:000 | DONE cmt | na 16 16 |        |             |                 ; --- TEMP print routine ---
 580:000 | DONE ins | na 16 16 | 0051ee | 98          |                 tya                  
 581:000 | DONE ins | na 16 16 | 0051ef | 29 00 ff    |                 and.# 0ff00          
 582:000 | DONE ins | na 16 16 | 0051f2 | eb          |                 xba                  
 583:000 | DONE ins | na 16 16 | 0051f3 | 20 aa 67    |                 jsr 0067aa           
 584:000 | DONE ins | na 16 16 | 0051f6 | 98          |                 tya                  
 585:000 | DONE ins | na 16 16 | 0051f7 | 29 ff 00    |                 and.# 00ff           
 586:000 | DONE ins | na 16 16 | 0051fa | 20 aa 67    |                 jsr 0067aa           
 587:000 | DONE cmt | na 16 16 |        |             |                 ; --- TEMP print routine ---
 588:000 | DONE wsp | na 16 16 |        |             |
 589:000 | DONE cmt | na 16 16 |        |             |                 ; TODO rewrite this to use EMIT
 590:000 | DONE ins | na 16 16 | 0051fd | a9 3e 00    |                 lda.# 3e             
 591:000 | DONE ins | na 16 16 | 005200 | 20 34 50    |                 jsr 005034           
 592:000 | DONE ins | na 16 16 | 005203 | 20 f3 5c    |                 jsr 005cf3           
 593:000 | DONE wsp | na 16 16 |        |             |
 594:000 | DONE wsp | na 16 16 |        |             |
 595:000 | DONE cmt | na 16 16 |        |             |                 ; There will be a lot of cases where .S is used when the stack
 596:000 | DONE cmt | na 16 16 |        |             |                 ; is empty. Get them first and exit quickly
 597:000 | DONE ins | na 16 16 | 005206 | 98          |                 tya                  force flag test
 598:000 | DONE ins | na 16 16 | 005207 | f0 20       |                 beq 005229           
 599:000 | DONE wsp | na 16 16 |        |             |
 600:000 | DONE lbl | na 16 16 | 005209 |             | dots_not_empty                       
 601:000 | DONE cmt | na 16 16 |        |             |                 ; We have at least one element on the stack, which used to be in
 602:000 | DONE cmt | na 16 16 |        |             |                 ; Y as TOS, but is now NOS and therefore accessable by X. Also,
 603:000 | DONE cmt | na 16 16 |        |             |                 ; the depth of the Data Stack is already in Y waiting to be used
 604:000 | DONE cmt | na 16 16 |        |             |                 ; as a counter. We use this to our advantage.
 605:000 | DONE wsp | na 16 16 |        |             |
 606:000 | DONE cmt | na 16 16 |        |             |                 ; Normally we would go with STX.D tmptos / LDX.D tmptos with
 607:000 | DONE cmt | na 16 16 |        |             |                 ; 4 bytes and 8 cycles because we value speed over size.
 608:000 | DONE cmt | na 16 16 |        |             |                 ; However, .S is used interactively, and humans
 609:000 | DONE cmt | na 16 16 |        |             |                 ; won't notice the one cycle more of PHX/PLX (2 bytes,
 610:000 | DONE cmt | na 16 16 |        |             |                 ; 9 cycles), and we save the two bytes.
 611:000 | DONE ins | na 16 16 | 005209 | da          |                 phx                  
 612:000 | DONE wsp | na 16 16 |        |             |
 613:000 | DONE cmt | na 16 16 |        |             |                 ; We print from the bottom up. Note that the Data Stack locations
 614:000 | DONE cmt | na 16 16 |        |             |                 ; dsp0 and dsp0+2 always contain garbage so they can be skipped.
 615:000 | DONE cmt | na 16 16 |        |             |                 ; See docs/INTERNALS.md for details
 616:000 | DONE ins | na 16 16 | 00520a | a2 ff 00    |                 ldx.# 0000ff         points to dsp0, which is garbage
 617:000 | DONE ins | na 16 16 | 00520d | ca          |                 dex                  
 618:000 | DONE ins | na 16 16 | 00520e | ca          |                 dex                  points to dsp0-2, which is also garbage
 619:000 | DONE wsp | na 16 16 |        |             |
 620:000 | DONE lbl | na 16 16 | 00520f |             | dots_loop                            
 621:000 | DONE ins | na 16 16 | 00520f | ca          |                 dex                  get next element on DS, initially dsp0-4
 622:000 | DONE ins | na 16 16 | 005210 | ca          |                 dex                  
 623:000 | DONE wsp | na 16 16 |        |             |
 624:000 | DONE cmt | na 16 16 |        |             |                 ; --- TEMP print routine ---
 625:000 | DONE cmt | na 16 16 |        |             |                 ; TODO call EMIT
 626:000 | DONE ins | na 16 16 | 005211 | b5 00       |                 lda.dx 00            
 627:000 | DONE ins | na 16 16 | 005213 | 29 00 ff    |                 and.# 0ff00          
 628:000 | DONE ins | na 16 16 | 005216 | eb          |                 xba                  
 629:000 | DONE ins | na 16 16 | 005217 | 20 aa 67    |                 jsr 0067aa           
 630:000 | DONE ins | na 16 16 | 00521a | b5 00       |                 lda.dx 00            
 631:000 | DONE ins | na 16 16 | 00521c | 29 ff 00    |                 and.# 00ff           
 632:000 | DONE ins | na 16 16 | 00521f | 20 aa 67    |                 jsr 0067aa           
 633:000 | DONE ins | na 16 16 | 005222 | 20 f3 5c    |                 jsr 005cf3           
 634:000 | DONE cmt | na 16 16 |        |             |                 ; --- TEMP print routine ---
 635:000 | DONE wsp | na 16 16 |        |             |
 636:000 | DONE ins | na 16 16 | 005225 | 88          |                 dey                  
 637:000 | DONE ins | na 16 16 | 005226 | d0 e7       |                 bne 00520f           
 638:000 | DONE wsp | na 16 16 |        |             |
 639:000 | DONE ins | na 16 16 | 005228 | fa          |                 plx                  restore original DSP
 640:000 | DONE wsp | na 16 16 |        |             |
 641:000 | DONE lbl | na 16 16 | 005229 |             | dots_done                            
 642:000 | DONE cmt | na 16 16 |        |             |                 ; Clean up. Again, we don't care about speed in this
 643:000 | DONE cmt | na 16 16 |        |             |                 ; word so we save one byte by doing DROP the slow way
 644:000 | DONE ins | na 16 16 | 005229 | 20 7e 57    |                 jsr 00577e           
 645:000 | DONE wsp | na 16 16 |        |             |
 646:000 | DONE lbl | na 16 16 | 00522c |             | z_dots                               
 646:001 | DONE ins | na 16 16 | 00522c | 60          |                 rts                  
 647:000 | DONE wsp | na 16 16 |        |             |
 648:000 | DONE wsp | na 16 16 |        |             |
 649:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 650:000 | DONE cmt | na 16 16 |        |             | ; , "COMMA" ( n -- ) 11 bytes / 29 cycles
 651:000 | DONE cmt | na 16 16 |        |             | ; Allot one cell and store TOS in memory. We ignore alignment issues, though
 652:000 | DONE cmt | na 16 16 |        |             | ; satisfy the ANSI requirement that an aligned compiler pointer will remain
 653:000 | DONE cmt | na 16 16 |        |             | ; aligned
 654:000 | DONE cmt | na 16 16 |        |             | ; There is another variant possible:
 655:000 | DONE cmt | na 16 16 |        |             | ;               tya
 656:000 | DONE cmt | na 16 16 |        |             | ;               ldy.d cp
 657:000 | DONE cmt | na 16 16 |        |             | ;               sta.y 0000
 658:000 | DONE cmt | na 16 16 |        |             | ;               iny
 659:000 | DONE cmt | na 16 16 |        |             | ;               iny
 660:000 | DONE cmt | na 16 16 |        |             | ;               sty.d cp
 661:000 | DONE cmt | na 16 16 |        |             | ;               ldy.dx 00
 662:000 | DONE cmt | na 16 16 |        |             | ;               inx
 663:000 | DONE cmt | na 16 16 |        |             | ;               inx
 664:000 | DONE cmt | na 16 16 |        |             | ; This is as fast as the variant below, but three bytes longer
 665:000 | DONE lbl | na 16 16 | 00522d |             | xt_comma                             
 666:000 | DONE dir | na 16 16 |        |             |         .!a16                        
 667:000 | DONE ins | na 16 16 | 00522d | 98          |                 tya                  
 668:000 | DONE ins | na 16 16 | 00522e | 92 00       |                 sta.di 000000        STA (CP)
 669:000 | DONE ins | na 16 16 | 005230 | e6 00       |                 inc.d 000000         
 670:000 | DONE ins | na 16 16 | 005232 | e6 00       |                 inc.d 000000         
 671:000 | DONE wsp | na 16 16 |        |             |
 672:000 | DONE ins | na 16 16 | 005234 | b4 00       |                 ldy.dx 00            
 673:000 | DONE ins | na 16 16 | 005236 | e8          |                 inx                  
 674:000 | DONE ins | na 16 16 | 005237 | e8          |                 inx                  
 675:000 | DONE wsp | na 16 16 |        |             |
 676:000 | DONE lbl | na 16 16 | 005238 |             | z_comma                              
 676:001 | DONE ins | na 16 16 | 005238 | 60          |                 rts                  
 677:000 | DONE wsp | na 16 16 |        |             |
 678:000 | DONE wsp | na 16 16 |        |             |
 679:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 680:000 | DONE cmt | na 16 16 |        |             | ; : "COLON" ( "name" -- ) X bytes / X cycles
 681:000 | DONE cmt | na 16 16 |        |             | ; Start compilation of new word into the Dictionary. Use the CREATE routine
 682:000 | DONE cmt | na 16 16 |        |             | ; and fill in the rest by hand.
 683:000 | DONE lbl | na 16 16 | 005239 |             | xt_colon                             
 684:000 | DONE dir | na 16 16 |        |             |         .!a16                        
 685:000 | DONE cmt | na 16 16 |        |             |                 ; if we are already in compile mode, complain and abort
 686:000 | DONE ins | na 16 16 | 005239 | a5 14       |                 lda.d 000014         
 687:000 | DONE ins | na 16 16 | 00523b | f0 06       |                 beq 005243           
 688:000 | DONE wsp | na 16 16 |        |             |
 689:000 | DONE ins | na 16 16 | 00523d | a9 14 6f    |                 lda.# 006f14         
 690:000 | DONE ins | na 16 16 | 005240 | 4c 8c 67    |                 jmp 00678c           
 691:000 | DONE lbl | na 16 16 | 005243 |             | @                                    
 692:000 | DONE cmt | na 16 16 |        |             |                 ; Switch to compile state. From now on, everything goes in the
 693:000 | DONE cmt | na 16 16 |        |             |                 ; Dictionary
 694:000 | DONE ins | na 16 16 | 005243 | e6 14       |                 inc.d 000014         
 695:000 | DONE wsp | na 16 16 |        |             |
 696:000 | DONE cmt | na 16 16 |        |             |                 ; CREATE is going to change DP to point to the new word's
 697:000 | DONE cmt | na 16 16 |        |             |                 ; header. While this is fine for (say) variables, it would mean
 698:000 | DONE cmt | na 16 16 |        |             |                 ; that FIND-NAME etc would find a half-finished word when
 699:000 | DONE cmt | na 16 16 |        |             |                 ; looking in the Dictionary. To prevent this, we save the old
 700:000 | DONE cmt | na 16 16 |        |             |                 ; version of DP and restore it later. The new DP is placed in
 701:000 | DONE cmt | na 16 16 |        |             |                 ; the variable WORKWORD until we're finished with a SEMICOLON.
 702:000 | DONE ins | na 16 16 | 005245 | a5 02       |                 lda.d 000002         
 703:000 | DONE ins | na 16 16 | 005247 | 48          |                 pha                  CREATE uses tmp1, tmp2 and tmp3
 704:000 | DONE wsp | na 16 16 |        |             |
 705:000 | DONE ins | na 16 16 | 005248 | 20 39 56    |                 jsr 005639           
 706:000 | DONE wsp | na 16 16 |        |             |
 707:000 | DONE cmt | na 16 16 |        |             |                 ; Get the nt of the new word as described above. Only COLON,
 708:000 | DONE cmt | na 16 16 |        |             |                 ; SEMICOLON and RECURSE access WORKWORD
 709:000 | DONE ins | na 16 16 | 00524b | a5 02       |                 lda.d 000002         
 710:000 | DONE ins | na 16 16 | 00524d | 85 04       |                 sta.d 000004         
 711:000 | DONE ins | na 16 16 | 00524f | 68          |                 pla                  
 712:000 | DONE ins | na 16 16 | 005250 | 85 02       |                 sta.d 000002         
 713:000 | DONE wsp | na 16 16 |        |             |
 714:000 | DONE cmt | na 16 16 |        |             |                 ; CREATE includes a subroutine jump to DOVAR by default. We back
 715:000 | DONE cmt | na 16 16 |        |             |                 ; up three bytes and overwrite that. Note that 3 x DEC.D would
 716:000 | DONE cmt | na 16 16 |        |             |                 ; use 3 bytes and 18 cycles; this version uses 8 bytes but
 717:000 | DONE cmt | na 16 16 |        |             |                 ; only 13 cycles
 718:000 | DONE ins | na 16 16 | 005252 | a5 00       |                 lda.d 000000         
 719:000 | DONE ins | na 16 16 | 005254 | 38          |                 sec                  
 720:000 | DONE ins | na 16 16 | 005255 | e9 03 00    |                 sbc.# 0003           
 721:000 | DONE ins | na 16 16 | 005258 | 85 00       |                 sta.d 000000         
 722:000 | DONE wsp | na 16 16 |        |             |
 723:000 | DONE lbl | na 16 16 | 00525a |             | z_colon                              
 723:001 | DONE ins | na 16 16 | 00525a | 60          |                 rts                  
 724:000 | DONE wsp | na 16 16 |        |             |
 725:000 | DONE wsp | na 16 16 |        |             |
 726:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 727:000 | DONE cmt | na 16 16 |        |             | ; ; "SEMICOLON" ( -- ) X bytes / X cycles
 728:000 | DONE cmt | na 16 16 |        |             | ; End the compilation of a new word into the Dictionary. When we enter this,
 729:000 | DONE cmt | na 16 16 |        |             | ; WORKWORD is pointing to the nt_ of this word in the Dictionary, DP to the
 730:000 | DONE cmt | na 16 16 |        |             | ; previous word, and CP to the next free byte.  A Forth definition would be
 731:000 | DONE cmt | na 16 16 |        |             | ; (see "Starting Forth"):
 732:000 | DONE cmt | na 16 16 |        |             | ;  : ;  POSTPONE EXIT  REVEAL POSTPONE ; [ ; IMMEDIATE
 733:000 | DONE lbl | na 16 16 | 00525b |             | xt_semicolon                         
 734:000 | DONE dir | na 16 16 |        |             |         .!a16                        
 735:000 | DONE ins | na 16 16 | 00525b | 84 24       |                 sty.d 000024         
 736:000 | DONE wsp | na 16 16 |        |             |
 737:000 | DONE cmt | na 16 16 |        |             |                 ; CP is the byte that will be the address we use in the header for
 738:000 | DONE cmt | na 16 16 |        |             |                 ; the end-of-compile address (z_word). This is six bytes down in
 739:000 | DONE cmt | na 16 16 |        |             |                 ; the header
 740:000 | DONE ins | na 16 16 | 00525d | a0 06 00    |                 ldy.# 0006           
 741:000 | DONE ins | na 16 16 | 005260 | a5 00       |                 lda.d 000000         
 742:000 | DONE ins | na 16 16 | 005262 | 91 04       |                 sta.diy 000004       STA (WORKWORD),Y
 743:000 | DONE wsp | na 16 16 |        |             |
 744:000 | DONE cmt | na 16 16 |        |             |                 ; Add the RTS instruction to the end of the current word. We
 745:000 | DONE cmt | na 16 16 |        |             |                 ; don't have to switch the size of the A register because we
 746:000 | DONE cmt | na 16 16 |        |             |                 ; only move up the CP by one and the MSB will be overwritten.
 747:000 | DONE cmt | na 16 16 |        |             |                 ; Little endian MPUs for the win!
 748:000 | DONE ins | na 16 16 | 005264 | a9 60 00    |                 lda.# 60             opcode for RTS
 749:000 | DONE ins | na 16 16 | 005267 | 92 00       |                 sta.di 000000        STA (CP)
 750:000 | DONE ins | na 16 16 | 005269 | e6 00       |                 inc.d 000000         MSB will be overwritten
 751:000 | DONE wsp | na 16 16 |        |             |
 752:000 | DONE cmt | na 16 16 |        |             |                 ; Word definition is complete. Make the new word the last one in
 753:000 | DONE cmt | na 16 16 |        |             |                 ; the Dictionary
 754:000 | DONE ins | na 16 16 | 00526b | a5 04       |                 lda.d 000004         
 755:000 | DONE ins | na 16 16 | 00526d | 85 02       |                 sta.d 000002         
 756:000 | DONE wsp | na 16 16 |        |             |
 757:000 | DONE cmt | na 16 16 |        |             |                 ; Get our TOS back
 758:000 | DONE ins | na 16 16 | 00526f | a4 24       |                 ldy.d 000024         
 759:000 | DONE wsp | na 16 16 |        |             |
 760:000 | DONE cmt | na 16 16 |        |             |                 ; Set compile flag back to zero so we're back in interpret mode
 761:000 | DONE ins | na 16 16 | 005271 | 64 14       |                 stz.d 000014         
 762:000 | DONE wsp | na 16 16 |        |             |
 763:000 | DONE lbl | na 16 16 | 005273 |             | z_semicolon                          
 763:001 | DONE ins | na 16 16 | 005273 | 60          |                 rts                  
 764:000 | DONE wsp | na 16 16 |        |             |
 765:000 | DONE wsp | na 16 16 |        |             |
 766:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 767:000 | DONE cmt | na 16 16 |        |             | ; # "HASH" / "NUMBER-SIGN" ( ud -- ud )  X bytes / X cycles
 768:000 | DONE cmt | na 16 16 |        |             | ; Add one character to the beginning of the pictured output string.
 769:000 | DONE cmt | na 16 16 |        |             | ; Code based on https://github.com/philburk/pforth/blob/master/fth/numberio.fth
 770:000 | DONE cmt | na 16 16 |        |             | ; Forth code is  BASE @ UD/MOD ROT 9 OVER < IF 7 + THEN [CHAR] 0 + HOLD ;
 771:000 | DONE cmt | na 16 16 |        |             | ; TODO convert more parts to assembler
 772:000 | DONE lbl | na 16 16 | 005274 |             | xt_hash                              
 773:000 | DONE dir | na 16 16 |        |             |         .!a16                        
 774:000 | DONE ins | na 16 16 | 005274 | 20 11 55    |                 jsr 005511           ( ud addr )
 775:000 | DONE ins | na 16 16 | 005277 | 20 c2 52    |                 jsr 0052c2           ( ud u )
 776:000 | DONE ins | na 16 16 | 00527a | 20 58 5d    |                 jsr 005d58           ( rem ud )
 777:000 | DONE ins | na 16 16 | 00527d | 20 b3 5b    |                 jsr 005bb3           ( ud rem )
 778:000 | DONE wsp | na 16 16 |        |             |
 779:000 | DONE cmt | na 16 16 |        |             |                 ; Convert the number that is left over to an ASCII character. We
 780:000 | DONE cmt | na 16 16 |        |             |                 ; use a string lookup for speed
 781:000 | DONE ins | na 16 16 | 005280 | e2 20       |                 sep 20               
 781:001 | DONE ctl | na  8 16 |        |             |         .!a8
 782:000 | DONE ins | na  8 16 | 005282 | b9 76 6f    |                 lda.y 006f76         
 783:000 | DONE ins | na  8 16 | 005285 | c2 20       |                 rep 20               
 783:001 | DONE ctl | na 16 16 |        |             |         .!a16
 784:000 | DONE cmt | na 16 16 |        |             |                 ; overwrite remainder with ASCII value
 785:000 | DONE ins | na 16 16 | 005287 | 29 ff 00    |                 and.# 00ff           
 786:000 | DONE ins | na 16 16 | 00528a | a8          |                 tay                  ( ud char )
 787:000 | DONE wsp | na 16 16 |        |             |
 788:000 | DONE ins | na 16 16 | 00528b | 20 0a 59    |                 jsr 00590a           JSR/RTS
 789:000 | DONE wsp | na 16 16 |        |             |
 790:000 | DONE lbl | na 16 16 | 00528e |             | z_hash                               
 790:001 | DONE ins | na 16 16 | 00528e | 60          |                 rts                  
 791:000 | DONE wsp | na 16 16 |        |             |
 792:000 | DONE wsp | na 16 16 |        |             |
 793:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 794:000 | DONE cmt | na 16 16 |        |             | ; #> "NUMBERMORE" / "NUMBER-GREATER" ( d -- addr u ) X bytes / X cycles
 795:000 | DONE cmt | na 16 16 |        |             | ; Finish conversion of pictured number string, putting address and length on the
 796:000 | DONE cmt | na 16 16 |        |             | ; Data Stack. Original Fort is  2DROP HLD @ PAD OVER -  Based on
 797:000 | DONE cmt | na 16 16 |        |             | ; https://github.com/philburk/pforth/blob/master/fth/numberio.fth
 798:000 | DONE lbl | na 16 16 | 00528f |             | xt_numbermore                        
 799:000 | DONE dir | na 16 16 |        |             |         .!a16                        
 800:000 | DONE cmt | na 16 16 |        |             |                 ; We simply overwrite the double cell number, saving us a lot of
 801:000 | DONE cmt | na 16 16 |        |             |                 ; stack thrashing. First, put the address of the string's head in
 802:000 | DONE cmt | na 16 16 |        |             |                 ; TOS and NOS
 803:000 | DONE ins | na 16 16 | 00528f | a4 18       |                 ldy.d 000018         
 804:000 | DONE ins | na 16 16 | 005291 | 94 00       |                 sty.dx 00            ( addr addr )
 805:000 | DONE wsp | na 16 16 |        |             |
 806:000 | DONE cmt | na 16 16 |        |             |                 ; add the address of the string's end, which is PAD
 807:000 | DONE ins | na 16 16 | 005293 | 20 ab 5a    |                 jsr 005aab           ( addr addr pad )
 808:000 | DONE wsp | na 16 16 |        |             |
 809:000 | DONE ins | na 16 16 | 005296 | 38          |                 sec                  
 810:000 | DONE ins | na 16 16 | 005297 | 98          |                 tya                  
 811:000 | DONE ins | na 16 16 | 005298 | f5 00       |                 sbc.dx 00            pad - addr is the length of the string
 812:000 | DONE ins | na 16 16 | 00529a | a8          |                 tay                  ( addr addr n )
 813:000 | DONE wsp | na 16 16 |        |             |
 814:000 | DONE ins | na 16 16 | 00529b | e8          |                 inx                  NIP
 815:000 | DONE ins | na 16 16 | 00529c | e8          |                 inx                  
 816:000 | DONE wsp | na 16 16 |        |             |
 817:000 | DONE lbl | na 16 16 | 00529d |             | z_numbermore                         
 817:001 | DONE ins | na 16 16 | 00529d | 60          |                 rts                  
 818:000 | DONE wsp | na 16 16 |        |             |
 819:000 | DONE wsp | na 16 16 |        |             |
 820:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 821:000 | DONE cmt | na 16 16 |        |             | ; #S "HASHS" / "NUMBER SIGN" ( ud -- ud ) X bytes / X cycles
 822:000 | DONE cmt | na 16 16 |        |             | ; Completely convert number for pictured numerical output. Based on
 823:000 | DONE cmt | na 16 16 |        |             | ; https://github.com/philburk/pforth/blob/master/fth/system.fth
 824:000 | DONE cmt | na 16 16 |        |             | ; Original Forth code  BEGIN # 2DUP OR 0= UNTIL
 825:000 | DONE lbl | na 16 16 | 00529e |             | xt_hashs                             
 826:000 | DONE dir | na 16 16 |        |             |         .!a16                        
 827:000 | DONE lbl | na 16 16 | 00529e |             | hashs_loop                           
 828:000 | DONE cmt | na 16 16 |        |             |                 ; covert a single number ("#")
 829:000 | DONE ins | na 16 16 | 00529e | 20 74 52    |                 jsr 005274           ( ud -- ud )
 830:000 | DONE wsp | na 16 16 |        |             |
 831:000 | DONE cmt | na 16 16 |        |             |                 ; stop when the double-celled number on the TOS is zero
 832:000 | DONE ins | na 16 16 | 0052a1 | 98          |                 tya                  
 833:000 | DONE ins | na 16 16 | 0052a2 | 15 00       |                 ora.dx 00            
 834:000 | DONE ins | na 16 16 | 0052a4 | d0 f8       |                 bne 00529e           
 835:000 | DONE wsp | na 16 16 |        |             |
 836:000 | DONE lbl | na 16 16 | 0052a6 |             | z_hashs                              
 836:001 | DONE ins | na 16 16 | 0052a6 | 60          |                 rts                  
 837:000 | DONE wsp | na 16 16 |        |             |
 838:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 839:000 | DONE cmt | na 16 16 |        |             | ; ? "QUESTION" ( addr -- ) X bytes / X cycles
 840:000 | DONE cmt | na 16 16 |        |             | ; Print content of a variable. This is used interactively and humans are
 841:000 | DONE cmt | na 16 16 |        |             | ; slow, so we just go for the subroutine jumps to keep it short
 842:000 | DONE lbl | na 16 16 | 0052a7 |             | xt_question                          
 843:000 | DONE ins | na 16 16 | 0052a7 | 20 c2 52    |                 jsr 0052c2           
 844:000 | DONE ins | na 16 16 | 0052aa | 20 b2 51    |                 jsr 0051b2           
 845:000 | DONE wsp | na 16 16 |        |             |
 846:000 | DONE lbl | na 16 16 | 0052ad |             | z_question                           
 846:001 | DONE ins | na 16 16 | 0052ad | 60          |                 rts                  
 847:000 | DONE wsp | na 16 16 |        |             |
 848:000 | DONE wsp | na 16 16 |        |             |
 849:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 850:000 | DONE cmt | na 16 16 |        |             | ; QDUP ( n -- 0 | n n ) X bytes / X cycles
 851:000 | DONE cmt | na 16 16 |        |             | ; If top element on Data Stack is not zero, duplicate it
 852:000 | DONE lbl | na 16 16 | 0052ae |             | xt_qdup                              
 853:000 | DONE ins | na 16 16 | 0052ae | 98          |                 tya                  
 854:000 | DONE ins | na 16 16 | 0052af | f0 04       |                 beq 0052b5           
 855:000 | DONE wsp | na 16 16 |        |             |
 856:000 | DONE ins | na 16 16 | 0052b1 | ca          |                 dex                  
 857:000 | DONE ins | na 16 16 | 0052b2 | ca          |                 dex                  
 858:000 | DONE ins | na 16 16 | 0052b3 | 94 00       |                 sty.dx 00            
 859:000 | DONE wsp | na 16 16 |        |             |
 860:000 | DONE lbl | na 16 16 | 0052b5 |             | z_qdup                               
 860:001 | DONE ins | na 16 16 | 0052b5 | 60          |                 rts                  
 861:000 | DONE wsp | na 16 16 |        |             |
 862:000 | DONE wsp | na 16 16 |        |             |
 863:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 864:000 | DONE cmt | na 16 16 |        |             | ; ! "STORE" ( n addr -- ) 9 bytes / X cycles
 865:000 | DONE cmt | na 16 16 |        |             | ; Save value at designated memory location
 866:000 | DONE lbl | na 16 16 | 0052b6 |             | xt_store                             
 867:000 | DONE dir | na 16 16 |        |             |         .!a16                        
 868:000 | DONE ins | na 16 16 | 0052b6 | b5 00       |                 lda.dx 00            NOS has value
 869:000 | DONE ins | na 16 16 | 0052b8 | 99 00 00    |                 sta.y 0000           
 870:000 | DONE wsp | na 16 16 |        |             |
 871:000 | DONE ins | na 16 16 | 0052bb | b4 02       |                 ldy.dx 02            
 872:000 | DONE ins | na 16 16 | 0052bd | e8          |                 inx                  
 873:000 | DONE ins | na 16 16 | 0052be | e8          |                 inx                  
 874:000 | DONE ins | na 16 16 | 0052bf | e8          |                 inx                  
 875:000 | DONE ins | na 16 16 | 0052c0 | e8          |                 inx                  
 876:000 | DONE wsp | na 16 16 |        |             |
 877:000 | DONE lbl | na 16 16 | 0052c1 |             | z_store                              
 877:001 | DONE ins | na 16 16 | 0052c1 | 60          |                 rts                  
 878:000 | DONE wsp | na 16 16 |        |             |
 879:000 | DONE wsp | na 16 16 |        |             |
 880:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 881:000 | DONE cmt | na 16 16 |        |             | ; @ "FETCH" ( addr -- n ) 4 bytes / 7-8 cycles
 882:000 | DONE cmt | na 16 16 |        |             | ; Get one cell (16 bit) value from given address
 883:000 | DONE lbl | na 16 16 | 0052c2 |             | xt_fetch                             
 884:000 | DONE ins | na 16 16 | 0052c2 | b9 00 00    |                 lda.y 0000           
 885:000 | DONE ins | na 16 16 | 0052c5 | a8          |                 tay                  
 886:000 | DONE wsp | na 16 16 |        |             |
 887:000 | DONE lbl | na 16 16 | 0052c6 |             | z_fetch                              
 887:001 | DONE ins | na 16 16 | 0052c6 | 60          |                 rts                  
 888:000 | DONE wsp | na 16 16 |        |             |
 889:000 | DONE wsp | na 16 16 |        |             |
 890:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 891:000 | DONE cmt | na 16 16 |        |             | ; ['] "BRACKET-TICK" ( -- ) X bytes / X cycles
 892:000 | DONE cmt | na 16 16 |        |             | ; Store xt of following word during compilation
 893:000 | DONE lbl | na 16 16 | 0052c7 |             | xt_brackettick                       
 894:000 | DONE ins | na 16 16 | 0052c7 | 20 01 54    |                 jsr 005401           
 895:000 | DONE ins | na 16 16 | 0052ca | 4c 30 59    |                 jmp 005930           JSR/RTS
 896:000 | DONE lbl | na 16 16 | 0052cd |             | z_brackettick                        
 897:000 | DONE wsp | na 16 16 |        |             |
 898:000 | DONE wsp | na 16 16 |        |             |
 899:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 900:000 | DONE cmt | na 16 16 |        |             | ; [ "LEFTBRACKET" ( -- ) X bytes / X cycles
 901:000 | DONE cmt | na 16 16 |        |             | ; Enter the interpretation state. This is an immediate, compile-only word
 902:000 | DONE lbl | na 16 16 | 0052cd |             | xt_leftbracket                       
 903:000 | DONE ins | na 16 16 | 0052cd | 64 14       |                 stz.d 000014         
 904:000 | DONE lbl | na 16 16 | 0052cf |             | z_leftbracket                        
 904:001 | DONE ins | na 16 16 | 0052cf | 60          |                 rts                  
 905:000 | DONE wsp | na 16 16 |        |             |
 906:000 | DONE wsp | na 16 16 |        |             |
 907:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 908:000 | DONE cmt | na 16 16 |        |             | ; ] "RIGHTBRACKET" ( -- ) X bytes / X cycles
 909:000 | DONE cmt | na 16 16 |        |             | ; Enter the compile state. In theory, we should be able to get away with
 910:000 | DONE cmt | na 16 16 |        |             | ; a simple INC.A, but this is more error tolerant. For obvious reasons, this
 911:000 | DONE cmt | na 16 16 |        |             | ; cannot be COMPILE-ONLY, and native compile doesn't make much sense either
 912:000 | DONE lbl | na 16 16 | 0052d0 |             | xt_rightbracket                      
 913:000 | DONE ins | na 16 16 | 0052d0 | a9 01 00    |                 lda.# 0001           
 914:000 | DONE ins | na 16 16 | 0052d3 | 85 14       |                 sta.d 000014         
 915:000 | DONE wsp | na 16 16 |        |             |
 916:000 | DONE lbl | na 16 16 | 0052d5 |             | z_rightbracket                       
 916:001 | DONE ins | na 16 16 | 0052d5 | 60          |                 rts                  
 917:000 | DONE wsp | na 16 16 |        |             |
 918:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 919:000 | DONE cmt | na 16 16 |        |             | ; [CHAR] "BRACKET-CHAR" ( "c" -- ) X bytes / X cycles
 920:000 | DONE cmt | na 16 16 |        |             | ; At compile time, compile the ASCII value of a character as a literal
 921:000 | DONE cmt | na 16 16 |        |             | ; This is an immediate, compile-only word. A definition given in
 922:000 | DONE cmt | na 16 16 |        |             | ; http://forth-standard.org/standard/implement is
 923:000 | DONE cmt | na 16 16 |        |             | ; : [CHAR] CHAR POSTPONE LITERAL ; IMMEDIATE
 924:000 | DONE cmt | na 16 16 |        |             | ; TODO decide if this is worth unrolling
 925:000 | DONE lbl | na 16 16 | 0052d6 |             | xt_bracketchar                       
 926:000 | DONE ins | na 16 16 | 0052d6 | 20 80 55    |                 jsr 005580           
 927:000 | DONE ins | na 16 16 | 0052d9 | 20 30 59    |                 jsr 005930           
 928:000 | DONE wsp | na 16 16 |        |             |
 929:000 | DONE lbl | na 16 16 | 0052dc |             | z_bracketchar                        
 929:001 | DONE ins | na 16 16 | 0052dc | 60          |                 rts                  
 930:000 | DONE wsp | na 16 16 |        |             |
 931:000 | DONE wsp | na 16 16 |        |             |
 932:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 933:000 | DONE cmt | na 16 16 |        |             | ; \ "BACKSLASH" ( -- ) 4 bytes / X cycles
 934:000 | DONE cmt | na 16 16 |        |             | ; Ignore rest of line as comment
 935:000 | DONE lbl | na 16 16 | 0052dd |             | xt_backslash                         
 936:000 | DONE dir | na 16 16 |        |             |         .!a16                        
 937:000 | DONE cmt | na 16 16 |        |             |                 ; Advance >IN to end of the line
 938:000 | DONE ins | na 16 16 | 0052dd | a5 0a       |                 lda.d 00000a         
 939:000 | DONE ins | na 16 16 | 0052df | 85 0c       |                 sta.d 00000c         
 940:000 | DONE wsp | na 16 16 |        |             |
 941:000 | DONE lbl | na 16 16 | 0052e1 |             | z_backslash                          
 941:001 | DONE ins | na 16 16 | 0052e1 | 60          |                 rts                  
 942:000 | DONE wsp | na 16 16 |        |             |
 943:000 | DONE wsp | na 16 16 |        |             |
 944:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 945:000 | DONE cmt | na 16 16 |        |             | ; + "PLUS" ( n m -- n+m ) 7 bytes / X cycles
 946:000 | DONE cmt | na 16 16 |        |             | ; Add TOS and NOS
 947:000 | DONE lbl | na 16 16 | 0052e2 |             | xt_plus                              
 948:000 | DONE dir | na 16 16 |        |             |         .!a16                        
 949:000 | DONE ins | na 16 16 | 0052e2 | 98          |                 tya                  
 950:000 | DONE ins | na 16 16 | 0052e3 | 18          |                 clc                  
 951:000 | DONE ins | na 16 16 | 0052e4 | 75 00       |                 adc.dx 00            
 952:000 | DONE ins | na 16 16 | 0052e6 | a8          |                 tay                  
 953:000 | DONE ins | na 16 16 | 0052e7 | e8          |                 inx                  
 954:000 | DONE ins | na 16 16 | 0052e8 | e8          |                 inx                  
 955:000 | DONE wsp | na 16 16 |        |             |
 956:000 | DONE lbl | na 16 16 | 0052e9 |             | z_plus                               
 956:001 | DONE ins | na 16 16 | 0052e9 | 60          |                 rts                  
 957:000 | DONE wsp | na 16 16 |        |             |
 958:000 | DONE wsp | na 16 16 |        |             |
 959:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 960:000 | DONE cmt | na 16 16 |        |             | ; - "MINUS" ( n m -- n-m ) 10 bytes / X cycles
 961:000 | DONE cmt | na 16 16 |        |             | ; Subtract NOS from TOS
 962:000 | DONE lbl | na 16 16 | 0052ea |             | xt_minus                             
 963:000 | DONE dir | na 16 16 |        |             |         .!a16                        
 964:000 | DONE ins | na 16 16 | 0052ea | 98          |                 tya                  
 965:000 | DONE ins | na 16 16 | 0052eb | 49 ff ff    |                 eor.# 0ffff          
 966:000 | DONE wsp | na 16 16 |        |             |
 967:000 | DONE ins | na 16 16 | 0052ee | 38          |                 sec                  not CLC
 968:000 | DONE ins | na 16 16 | 0052ef | 75 00       |                 adc.dx 00            
 969:000 | DONE wsp | na 16 16 |        |             |
 970:000 | DONE ins | na 16 16 | 0052f1 | a8          |                 tay                  
 971:000 | DONE ins | na 16 16 | 0052f2 | e8          |                 inx                  
 972:000 | DONE ins | na 16 16 | 0052f3 | e8          |                 inx                  
 973:000 | DONE wsp | na 16 16 |        |             |
 974:000 | DONE lbl | na 16 16 | 0052f4 |             | z_minus                              
 974:001 | DONE ins | na 16 16 | 0052f4 | 60          |                 rts                  
 975:000 | DONE wsp | na 16 16 |        |             |
 976:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 977:000 | DONE cmt | na 16 16 |        |             | ; -ROT ( a b c -- c a b )  X bytes / X cycles
 978:000 | DONE cmt | na 16 16 |        |             | ; Rotate top three entries of Data Stack upwards
 979:000 | DONE lbl | na 16 16 | 0052f5 |             | xt_mrot                              
 980:000 | DONE dir | na 16 16 |        |             |         .!a16                        
 981:000 | DONE dir | na 16 16 |        |             |         .!xy16                       
 982:000 | DONE ins | na 16 16 | 0052f5 | b5 02       |                 lda.dx 02            save a
 983:000 | DONE ins | na 16 16 | 0052f7 | 94 02       |                 sty.dx 02            move c to 3OS
 984:000 | DONE ins | na 16 16 | 0052f9 | b4 00       |                 ldy.dx 00            move b to TOS
 985:000 | DONE ins | na 16 16 | 0052fb | 95 00       |                 sta.dx 00            save a as NOS
 986:000 | DONE wsp | na 16 16 |        |             |
 987:000 | DONE lbl | na 16 16 | 0052fd |             | z_mrot                               
 987:001 | DONE ins | na 16 16 | 0052fd | 60          |                 rts                  
 988:000 | DONE wsp | na 16 16 |        |             |
 989:000 | DONE wsp | na 16 16 |        |             |
 990:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 991:000 | DONE cmt | na 16 16 |        |             | ; -TRAILING ( addr u -- addr u ) X bytes / X cycles
 992:000 | DONE cmt | na 16 16 |        |             | ; Remove any trailing blanks. Uses tmp3
 993:000 | DONE lbl | na 16 16 | 0052fe |             | xt_dtrailing                         
 994:000 | DONE cmt | na 16 16 |        |             |                 ; if u is zero, just return string
 995:000 | DONE ins | na 16 16 | 0052fe | 98          |                 tya                  force flag check
 996:000 | DONE ins | na 16 16 | 0052ff | f0 13       |                 beq 005314           
 997:000 | DONE wsp | na 16 16 |        |             |
 998:000 | DONE ins | na 16 16 | 005301 | b5 00       |                 lda.dx 00            
 999:000 | DONE ins | na 16 16 | 005303 | 85 20       |                 sta.d 000020         
1000:000 | DONE ins | na 16 16 | 005305 | 88          |                 dey                  convert length to index
1001:000 | DONE ins | na 16 16 | 005306 | e2 20       |                 sep 20               
1001:001 | DONE ctl | na  8 16 |        |             |         .!a8
1002:000 | DONE wsp | na  8 16 |        |             |
1003:000 | DONE lbl | na  8 16 | 005308 |             | dtrailing_loop                       
1004:000 | DONE ins | na  8 16 | 005308 | b1 20       |                 lda.diy 000020       
1005:000 | DONE ins | na  8 16 | 00530a | c9 20       |                 cmp.# 20             
1006:000 | DONE ins | na  8 16 | 00530c | d0 03       |                 bne 005311           
1007:000 | DONE ins | na  8 16 | 00530e | 88          |                 dey                  
1008:000 | DONE ins | na  8 16 | 00530f | 10 f7       |                 bpl 005308           fall through when done
1009:000 | DONE wsp | na  8 16 |        |             |
1010:000 | DONE lbl | na  8 16 | 005311 |             | dtrailing_done                       
1011:000 | DONE ins | na  8 16 | 005311 | c2 20       |                 rep 20               
1011:001 | DONE ctl | na 16 16 |        |             |         .!a16
1012:000 | DONE ins | na 16 16 | 005313 | c8          |                 iny                  convert index to length
1013:000 | DONE wsp | na 16 16 |        |             |
1014:000 | DONE lbl | na 16 16 | 005314 |             | z_dtrailing                          
1014:001 | DONE ins | na 16 16 | 005314 | 60          |                 rts                  
1015:000 | DONE wsp | na 16 16 |        |             |
1016:000 | DONE wsp | na 16 16 |        |             |
1017:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1018:000 | DONE cmt | na 16 16 |        |             | ; = "EQUAL" ( n m -- f ) 11 bytes / 18-20 cycles
1019:000 | DONE cmt | na 16 16 |        |             | ; See if TOS and NOS are the same
1020:000 | DONE lbl | na 16 16 | 005315 |             | xt_equal                             
1021:000 | DONE ins | na 16 16 | 005315 | 98          |                 tya                  
1022:000 | DONE ins | na 16 16 | 005316 | a0 00 00    |                 ldy.# 0000           default value is false
1023:000 | DONE wsp | na 16 16 |        |             |
1024:000 | DONE ins | na 16 16 | 005319 | d5 00       |                 cmp.dx 00            
1025:000 | DONE ins | na 16 16 | 00531b | d0 01       |                 bne 00531e           
1026:000 | DONE ins | na 16 16 | 00531d | 88          |                 dey                  wraps to 0FFFF (true)
1027:000 | DONE wsp | na 16 16 |        |             |
1028:000 | DONE lbl | na 16 16 | 00531e |             | equal_not                            
1029:000 | DONE ins | na 16 16 | 00531e | e8          |                 inx                  
1030:000 | DONE ins | na 16 16 | 00531f | e8          |                 inx                  
1031:000 | DONE wsp | na 16 16 |        |             |
1032:000 | DONE lbl | na 16 16 | 005320 |             | z_equal                              
1032:001 | DONE ins | na 16 16 | 005320 | 60          |                 rts                  
1033:000 | DONE wsp | na 16 16 |        |             |
1034:000 | DONE wsp | na 16 16 |        |             |
1035:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1036:000 | DONE cmt | na 16 16 |        |             | ; 0 "ZERO" ( -- 0 ) 7 bytes / 12 cycles
1037:000 | DONE cmt | na 16 16 |        |             | ; Pushes the number 0000 on the Data Stack
1038:000 | DONE lbl | na 16 16 | 005321 |             | xt_zero                              
1039:000 | DONE dir | na 16 16 |        |             |         .!xy16                       
1040:000 | DONE ins | na 16 16 | 005321 | ca          |                 dex                  
1041:000 | DONE ins | na 16 16 | 005322 | ca          |                 dex                  
1042:000 | DONE ins | na 16 16 | 005323 | 94 00       |                 sty.dx 00            
1043:000 | DONE ins | na 16 16 | 005325 | a0 00 00    |                 ldy.# 0000           
1044:000 | DONE wsp | na 16 16 |        |             |
1045:000 | DONE lbl | na 16 16 | 005328 |             | z_zero                               
1045:001 | DONE ins | na 16 16 | 005328 | 60          |                 rts                  
1046:000 | DONE wsp | na 16 16 |        |             |
1047:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1048:000 | DONE cmt | na 16 16 |        |             | ; 0= "ZERO-EQUAL" ( n -- f ) X bytes / X cycles
1049:000 | DONE cmt | na 16 16 |        |             | ; Return the true flag if TOS is zero
1050:000 | DONE lbl | na 16 16 | 005329 |             | xt_zero-equal                        
1051:000 | DONE dir | na 16 16 |        |             |         .!a16                        
1052:000 | DONE ins | na 16 16 | 005329 | 98          |                 tya                  force flag check
1053:000 | DONE ins | na 16 16 | 00532a | d0 05       |                 bne 005331           
1054:000 | DONE wsp | na 16 16 |        |             |
1055:000 | DONE ins | na 16 16 | 00532c | a0 ff ff    |                 ldy.# 0ffff          
1056:000 | DONE ins | na 16 16 | 00532f | 80 03       |                 bra 005334           
1057:000 | DONE lbl | na 16 16 | 005331 |             | ze_not_zero                          
1058:000 | DONE ins | na 16 16 | 005331 | a0 00 00    |                 ldy.# 0000           
1059:000 | DONE wsp | na 16 16 |        |             |
1060:000 | DONE lbl | na 16 16 | 005334 |             | z_zero-equal                         
1060:001 | DONE ins | na 16 16 | 005334 | 60          |                 rts                  
1061:000 | DONE wsp | na 16 16 |        |             |
1062:000 | DONE wsp | na 16 16 |        |             |
1063:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1064:000 | DONE cmt | na 16 16 |        |             | ; 0< "ZERO-LESS" ( n -- f ) 11 bytes / X cycles
1065:000 | DONE cmt | na 16 16 |        |             | ; Return the true flag if TOS is less than zero
1066:000 | DONE lbl | na 16 16 | 005335 |             | xt_zero-less                         
1067:000 | DONE dir | na 16 16 |        |             |         .!a16                        
1068:000 | DONE ins | na 16 16 | 005335 | 98          |                 tya                  force flag check
1069:000 | DONE ins | na 16 16 | 005336 | 30 05       |                 bmi 00533d           
1070:000 | DONE wsp | na 16 16 |        |             |
1071:000 | DONE ins | na 16 16 | 005338 | a0 00 00    |                 ldy.# 0000           
1072:000 | DONE ins | na 16 16 | 00533b | 80 03       |                 bra 005340           
1073:000 | DONE wsp | na 16 16 |        |             |
1074:000 | DONE lbl | na 16 16 | 00533d |             | zero-less-is-less                    
1075:000 | DONE ins | na 16 16 | 00533d | a0 ff ff    |                 ldy.# 0ffff          
1076:000 | DONE wsp | na 16 16 |        |             |
1077:000 | DONE lbl | na 16 16 | 005340 |             | z_zero-less                          
1077:001 | DONE ins | na 16 16 | 005340 | 60          |                 rts                  
1078:000 | DONE wsp | na 16 16 |        |             |
1079:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1080:000 | DONE cmt | na 16 16 |        |             | ; 0<> "ZERO-NOTEQUAL" ( n -- f ) 11 bytes / X cycles
1081:000 | DONE cmt | na 16 16 |        |             | ; Return the true flag if TOS is not zero
1082:000 | DONE lbl | na 16 16 | 005341 |             | xt_zero-notequal                     
1083:000 | DONE dir | na 16 16 |        |             |         .!a16                        
1084:000 | DONE ins | na 16 16 | 005341 | 98          |                 tya                  force flag check
1085:000 | DONE ins | na 16 16 | 005342 | f0 05       |                 beq 005349           
1086:000 | DONE ins | na 16 16 | 005344 | a0 ff ff    |                 ldy.# 0ffff          
1087:000 | DONE ins | na 16 16 | 005347 | 80 03       |                 bra 00534c           
1088:000 | DONE lbl | na 16 16 | 005349 |             | zne_is_zero                          
1089:000 | DONE ins | na 16 16 | 005349 | a0 00 00    |                 ldy.# 0000           
1090:000 | DONE lbl | na 16 16 | 00534c |             | z_zero-notequal                      
1091:000 | DONE ins | na 16 16 | 00534c | 60          |                 rts                  
1092:000 | DONE wsp | na 16 16 |        |             |
1093:000 | DONE wsp | na 16 16 |        |             |
1094:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1095:000 | DONE cmt | na 16 16 |        |             | ; 0> "ZERO-MORE" ( n -- f ) X bytes / X cycles
1096:000 | DONE cmt | na 16 16 |        |             | ; Return the true flag if TOS is more than zero
1097:000 | DONE lbl | na 16 16 | 00534d |             | xt_zero-more                         
1098:000 | DONE dir | na 16 16 |        |             |         .!a16                        
1099:000 | DONE ins | na 16 16 | 00534d | a9 00 00    |                 lda.# 0000           default is false
1100:000 | DONE wsp | na 16 16 |        |             |
1101:000 | DONE ins | na 16 16 | 005350 | 88          |                 dey                  
1102:000 | DONE ins | na 16 16 | 005351 | 10 02       |                 bpl 005355           was at least 1
1103:000 | DONE wsp | na 16 16 |        |             |
1104:000 | DONE ins | na 16 16 | 005353 | 80 01       |                 bra 005356           nope, stays false
1105:000 | DONE wsp | na 16 16 |        |             |
1106:000 | DONE lbl | na 16 16 | 005355 |             | zero-more_true                       
1107:000 | DONE ins | na 16 16 | 005355 | 3a          |                 dec.a                wraps to 0ffff, true
1108:000 | DONE lbl | na 16 16 | 005356 |             | zero-more_done                       
1109:000 | DONE ins | na 16 16 | 005356 | a8          |                 tay                  
1110:000 | DONE wsp | na 16 16 |        |             |
1111:000 | DONE lbl | na 16 16 | 005357 |             | z_zero-more                          
1111:001 | DONE ins | na 16 16 | 005357 | 60          |                 rts                  
1112:000 | DONE wsp | na 16 16 |        |             |
1113:000 | DONE wsp | na 16 16 |        |             |
1114:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1115:000 | DONE cmt | na 16 16 |        |             | ; 0BRANCH ( 0 | f -- ) X bytes / X cycles
1116:000 | DONE cmt | na 16 16 |        |             | ; Branch if TOS is zero. This exects the next two bytes to be the address of
1117:000 | DONE cmt | na 16 16 |        |             | ; where to branch to if the test fails. The code may not be natively compiled
1118:000 | DONE cmt | na 16 16 |        |             | ; because we need the return address provided by JSR's push to the Return Stack
1119:000 | DONE cmt | na 16 16 |        |             | ; This routine uses tmpbranch
1120:000 | DONE lbl | na 16 16 | 005358 |             | xt_zbranch                           
1121:000 | DONE dir | na 16 16 |        |             |         .!a16                        
1122:000 | DONE cmt | na 16 16 |        |             |                 ; encode subroutine jump to run time code
1123:000 | DONE ins | na 16 16 | 005358 | f4 5f 53    |                 phe.# 00535f         
1124:000 | DONE ins | na 16 16 | 00535b | 20 6b 67    |                 jsr 00676b           
1125:000 | DONE wsp | na 16 16 |        |             |
1126:000 | DONE lbl | na 16 16 | 00535e |             | z_zbranch                            
1126:001 | DONE ins | na 16 16 | 00535e | 60          |                 rts                  
1127:000 | DONE wsp | na 16 16 |        |             |
1128:000 | DONE lbl | na 16 16 | 00535f |             | zbranch_rt                           
1129:000 | DONE cmt | na 16 16 |        |             |                 ; See if the flag is zero, which is the whole purpose of this
1130:000 | DONE cmt | na 16 16 |        |             |                 ; operation after all
1131:000 | DONE ins | na 16 16 | 00535f | 98          |                 tya                  force flag check
1132:000 | DONE ins | na 16 16 | 005360 | f0 05       |                 beq 005367           flag is false (zero), so we branch
1133:000 | DONE wsp | na 16 16 |        |             |
1134:000 | DONE cmt | na 16 16 |        |             |                 ; Flag is TRUE, so we skip over the next two bytes. Put
1135:000 | DONE cmt | na 16 16 |        |             |                 ; differently, this is the part between IF and THEN
1136:000 | DONE ins | na 16 16 | 005362 | 68          |                 pla                  
1137:000 | DONE ins | na 16 16 | 005363 | 1a          |                 inc.a                
1138:000 | DONE ins | na 16 16 | 005364 | 1a          |                 inc.a                
1139:000 | DONE wsp | na 16 16 |        |             |
1140:000 | DONE ins | na 16 16 | 005365 | 80 09       |                 bra 005370           
1141:000 | DONE wsp | na 16 16 |        |             |
1142:000 | DONE lbl | na 16 16 | 005367 |             | zb_zero                              
1143:000 | DONE cmt | na 16 16 |        |             |                 ; Flag is FALSE, so we take the dump to the address given in the
1144:000 | DONE cmt | na 16 16 |        |             |                 ; next two bytes. We don't need Y anymore, so we can use it for
1145:000 | DONE cmt | na 16 16 |        |             |                 ; indexing
1146:000 | DONE ins | na 16 16 | 005367 | 68          |                 pla                  
1147:000 | DONE ins | na 16 16 | 005368 | 85 1a       |                 sta.d 00001a         
1148:000 | DONE ins | na 16 16 | 00536a | a0 01 00    |                 ldy.# 0001           
1149:000 | DONE ins | na 16 16 | 00536d | b1 1a       |                 lda.diy 00001a       
1150:000 | DONE wsp | na 16 16 |        |             |
1151:000 | DONE cmt | na 16 16 |        |             |                 ; Subtract one from the address given becasue of the RTS
1152:000 | DONE cmt | na 16 16 |        |             |                 ; mechanics
1153:000 | DONE ins | na 16 16 | 00536f | 3a          |                 dec.a                
1154:000 | DONE wsp | na 16 16 |        |             |
1155:000 | DONE lbl | na 16 16 | 005370 |             | zb_done                              
1156:000 | DONE cmt | na 16 16 |        |             |                 ; One we or another, this is where we're going to jump to
1157:000 | DONE ins | na 16 16 | 005370 | 48          |                 pha                  
1158:000 | DONE wsp | na 16 16 |        |             |
1159:000 | DONE cmt | na 16 16 |        |             |                 ; Clean up the Data Stack and jump
1160:000 | DONE ins | na 16 16 | 005371 | b4 00       |                 ldy.dx 00            
1161:000 | DONE ins | na 16 16 | 005373 | e8          |                 inx                  
1162:000 | DONE ins | na 16 16 | 005374 | e8          |                 inx                  
1163:000 | DONE wsp | na 16 16 |        |             |
1164:000 | DONE ins | na 16 16 | 005375 | 60          |                 rts                  
1165:000 | DONE wsp | na 16 16 |        |             |
1166:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1167:000 | DONE cmt | na 16 16 |        |             | ; 1 "ONE" ( -- 1 ) 7 bytes / 12 cycles
1168:000 | DONE cmt | na 16 16 |        |             | ; Pushes the number 1 on the Data Stack
1169:000 | DONE lbl | na 16 16 | 005376 |             | xt_one                               
1170:000 | DONE dir | na 16 16 |        |             |         .!xy16                       
1171:000 | DONE ins | na 16 16 | 005376 | ca          |                 dex                  
1172:000 | DONE ins | na 16 16 | 005377 | ca          |                 dex                  
1173:000 | DONE ins | na 16 16 | 005378 | 94 00       |                 sty.dx 00            
1174:000 | DONE ins | na 16 16 | 00537a | a0 01 00    |                 ldy.# 0001           
1175:000 | DONE wsp | na 16 16 |        |             |
1176:000 | DONE lbl | na 16 16 | 00537d |             | z_one                                
1176:001 | DONE ins | na 16 16 | 00537d | 60          |                 rts                  
1177:000 | DONE wsp | na 16 16 |        |             |
1178:000 | DONE wsp | na 16 16 |        |             |
1179:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1180:000 | DONE cmt | na 16 16 |        |             | ; 1- "ONE-MINUS" ( n -- n-1 ) 1 byte / 2 cycles
1181:000 | DONE cmt | na 16 16 |        |             | ; Subtract 1 from Top of Stack (TOS). Because there is no checking if there is
1182:000 | DONE cmt | na 16 16 |        |             | ; actually anything on the Data Stack, this routine will fail silently if the
1183:000 | DONE cmt | na 16 16 |        |             | ; stack is empty
1184:000 | DONE lbl | na 16 16 | 00537e |             | xt_one-minus                         
1185:000 | DONE dir | na 16 16 |        |             |         .!xy16                       
1186:000 | DONE ins | na 16 16 | 00537e | 88          |                 dey                  
1187:000 | DONE lbl | na 16 16 | 00537f |             | z_one-minus                          
1187:001 | DONE ins | na 16 16 | 00537f | 60          |                 rts                  
1188:000 | DONE wsp | na 16 16 |        |             |
1189:000 | DONE wsp | na 16 16 |        |             |
1190:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1191:000 | DONE cmt | na 16 16 |        |             | ; 1+ "ONE-PLUS" ( n -- n+1 ) 1 byte / 2 cycles
1192:000 | DONE cmt | na 16 16 |        |             | ; Add 1 to TOS. Because there is no checking if there is actually anything on
1193:000 | DONE cmt | na 16 16 |        |             | ; the Data Stack, this routine will fail silently if the stack is empty
1194:000 | DONE lbl | na 16 16 | 005380 |             | xt_one-plus                          
1195:000 | DONE dir | na 16 16 |        |             |         .!xy16                       
1196:000 | DONE ins | na 16 16 | 005380 | c8          |                 iny                  
1197:000 | DONE lbl | na 16 16 | 005381 |             | z_one-plus                           
1197:001 | DONE ins | na 16 16 | 005381 | 60          |                 rts                  
1198:000 | DONE wsp | na 16 16 |        |             |
1199:000 | DONE wsp | na 16 16 |        |             |
1200:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1201:000 | DONE cmt | na 16 16 |        |             | ; 2 "TWO" ( -- 2 ) 7 bytes / 12 cycles
1202:000 | DONE cmt | na 16 16 |        |             | ; Pushes the number 2 on the Data Stack
1203:000 | DONE lbl | na 16 16 | 005382 |             | xt_two                               
1204:000 | DONE dir | na 16 16 |        |             |         .!xy16                       
1205:000 | DONE ins | na 16 16 | 005382 | ca          |                 dex                  
1206:000 | DONE ins | na 16 16 | 005383 | ca          |                 dex                  
1207:000 | DONE ins | na 16 16 | 005384 | 94 00       |                 sty.dx 00            
1208:000 | DONE ins | na 16 16 | 005386 | a0 02 00    |                 ldy.# 0002           
1209:000 | DONE wsp | na 16 16 |        |             |
1210:000 | DONE lbl | na 16 16 | 005389 |             | z_two                                
1210:001 | DONE ins | na 16 16 | 005389 | 60          |                 rts                  
1211:000 | DONE wsp | na 16 16 |        |             |
1212:000 | DONE wsp | na 16 16 |        |             |
1213:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1214:000 | DONE cmt | na 16 16 |        |             | ; 2* "TWO-STAR" ( n -- 2*n ) 3 bytes / 6 cycles
1215:000 | DONE cmt | na 16 16 |        |             | ; Multiply Top of Stack (TOS) by 2. This is also used by CELLS
1216:000 | DONE lbl | na 16 16 | 00538a |             | xt_two-star                          
1217:000 | DONE dir | na 16 16 |        |             |         .!a16                        
1218:000 | DONE dir | na 16 16 |        |             |         .!xy16                       
1219:000 | DONE ins | na 16 16 | 00538a | 98          |                 tya                  
1220:000 | DONE ins | na 16 16 | 00538b | 0a          |                 asl.a                
1221:000 | DONE ins | na 16 16 | 00538c | a8          |                 tay                  
1222:000 | DONE wsp | na 16 16 |        |             |
1223:000 | DONE lbl | na 16 16 | 00538d |             | z_two-star                           
1223:001 | DONE ins | na 16 16 | 00538d | 60          |                 rts                  
1224:000 | DONE wsp | na 16 16 |        |             |
1225:000 | DONE wsp | na 16 16 |        |             |
1226:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1227:000 | DONE cmt | na 16 16 |        |             | ; 2>R "TWOTOR" ( n1 n2 -- )(R: -- n1 n2)  X bytes / X cycles
1228:000 | DONE cmt | na 16 16 |        |             | ; Push top two entries to Return Stack. The same as SWAP >R >R except that if we
1229:000 | DONE cmt | na 16 16 |        |             | ; jumped here, the return address will be in the way. May not be natively
1230:000 | DONE cmt | na 16 16 |        |             | ; compiled
1231:000 | DONE cmt | na 16 16 |        |             | ; TODO not coded
1232:000 | DONE lbl | na 16 16 | 00538e |             | xt_twotor                            
1233:000 | DONE cmt | na 16 16 |        |             |                 ; get the return address out of the way
1234:000 | DONE ins | na 16 16 | 00538e | 68          |                 pla                  
1235:000 | DONE ins | na 16 16 | 00538f | 85 20       |                 sta.d 000020         
1236:000 | DONE cmt | na 16 16 |        |             |                 ; --- CUT HERE for native compile ---
1237:000 | DONE wsp | na 16 16 |        |             |
1238:000 | DONE ins | na 16 16 | 005391 | b5 00       |                 lda.dx 00            NOS stays next on Return Stack
1239:000 | DONE ins | na 16 16 | 005393 | 48          |                 pha                  
1240:000 | DONE ins | na 16 16 | 005394 | 5a          |                 phy                  TOS stays on top
1241:000 | DONE wsp | na 16 16 |        |             |
1242:000 | DONE ins | na 16 16 | 005395 | b4 02       |                 ldy.dx 02            clean up data stack
1243:000 | DONE ins | na 16 16 | 005397 | e8          |                 inx                  
1244:000 | DONE ins | na 16 16 | 005398 | e8          |                 inx                  
1245:000 | DONE ins | na 16 16 | 005399 | e8          |                 inx                  
1246:000 | DONE ins | na 16 16 | 00539a | e8          |                 inx                  
1247:000 | DONE wsp | na 16 16 |        |             |
1248:000 | DONE cmt | na 16 16 |        |             |                 ; --- CUT HERE for native compile ---
1249:000 | DONE ins | na 16 16 | 00539b | a5 20       |                 lda.d 000020         
1250:000 | DONE ins | na 16 16 | 00539d | 48          |                 pha                  
1251:000 | DONE wsp | na 16 16 |        |             |
1252:000 | DONE lbl | na 16 16 | 00539e |             | z_twotor                             
1252:001 | DONE ins | na 16 16 | 00539e | 60          |                 rts                  
1253:000 | DONE wsp | na 16 16 |        |             |
1254:000 | DONE wsp | na 16 16 |        |             |
1255:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1256:000 | DONE cmt | na 16 16 |        |             | ; 2DROP ( n m -- ) 6 bytes / 13 cycles
1257:000 | DONE cmt | na 16 16 |        |             | ; Drop first two entries of Data Stack
1258:000 | DONE lbl | na 16 16 | 00539f |             | xt_2drop                             
1259:000 | DONE ins | na 16 16 | 00539f | b4 02       |                 ldy.dx 02            
1260:000 | DONE ins | na 16 16 | 0053a1 | e8          |                 inx                  
1261:000 | DONE ins | na 16 16 | 0053a2 | e8          |                 inx                  
1262:000 | DONE ins | na 16 16 | 0053a3 | e8          |                 inx                  
1263:000 | DONE ins | na 16 16 | 0053a4 | e8          |                 inx                  
1264:000 | DONE wsp | na 16 16 |        |             |
1265:000 | DONE lbl | na 16 16 | 0053a5 |             | z_2drop                              
1265:001 | DONE ins | na 16 16 | 0053a5 | 60          |                 rts                  
1266:000 | DONE wsp | na 16 16 |        |             |
1267:000 | DONE wsp | na 16 16 |        |             |
1268:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1269:000 | DONE cmt | na 16 16 |        |             | ; 2DUP ( n m -- n m n m ) 10 bytes / 23 cycles
1270:000 | DONE cmt | na 16 16 |        |             | ; Duplicated the top two data stack entries
1271:000 | DONE wsp | na 16 16 |        |             |
1272:000 | DONE lbl | na 16 16 | 0053a6 |             | xt_2dup                              
1273:000 | DONE dir | na 16 16 |        |             |         .!xy16                       
1274:000 | DONE ins | na 16 16 | 0053a6 | ca          |                 dex                  
1275:000 | DONE ins | na 16 16 | 0053a7 | ca          |                 dex                  
1276:000 | DONE ins | na 16 16 | 0053a8 | ca          |                 dex                  
1277:000 | DONE ins | na 16 16 | 0053a9 | ca          |                 dex                  
1278:000 | DONE ins | na 16 16 | 0053aa | 94 02       |                 sty.dx 02            
1279:000 | DONE ins | na 16 16 | 0053ac | b5 04       |                 lda.dx 04            
1280:000 | DONE ins | na 16 16 | 0053ae | 95 00       |                 sta.dx 00            
1281:000 | DONE wsp | na 16 16 |        |             |
1282:000 | DONE lbl | na 16 16 | 0053b0 |             | z_2dup                               
1282:001 | DONE ins | na 16 16 | 0053b0 | 60          |                 rts                  
1283:000 | DONE wsp | na 16 16 |        |             |
1284:000 | DONE wsp | na 16 16 |        |             |
1285:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1286:000 | DONE cmt | na 16 16 |        |             | ; 2OVER ( d1 d2 -- d1 d2 d1 ) X bytes / X cycles
1287:000 | DONE cmt | na 16 16 |        |             | ; Copy cell pair that is NOS to TOS
1288:000 | DONE lbl | na 16 16 | 0053b1 |             | xt_2over                             
1289:000 | DONE ins | na 16 16 | 0053b1 | ca          |                 dex                  
1290:000 | DONE ins | na 16 16 | 0053b2 | ca          |                 dex                  
1291:000 | DONE ins | na 16 16 | 0053b3 | ca          |                 dex                  
1292:000 | DONE ins | na 16 16 | 0053b4 | ca          |                 dex                  
1293:000 | DONE ins | na 16 16 | 0053b5 | 94 02       |                 sty.dx 02            
1294:000 | DONE ins | na 16 16 | 0053b7 | b4 06       |                 ldy.dx 06            
1295:000 | DONE ins | na 16 16 | 0053b9 | b5 08       |                 lda.dx 08            
1296:000 | DONE ins | na 16 16 | 0053bb | 95 00       |                 sta.dx 00            
1297:000 | DONE wsp | na 16 16 |        |             |
1298:000 | DONE lbl | na 16 16 | 0053bd |             | z_2over                              
1298:001 | DONE ins | na 16 16 | 0053bd | 60          |                 rts                  
1299:000 | DONE wsp | na 16 16 |        |             |
1300:000 | DONE wsp | na 16 16 |        |             |
1301:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1302:000 | DONE cmt | na 16 16 |        |             | ; 2R> "TWOFROMR" ( -- n1 n2 ) ( R: n1 n2 ) X bytes / X cycles
1303:000 | DONE cmt | na 16 16 |        |             | ; Pull top two entries from Return Stack. Is the same as R> R> SWAP
1304:000 | DONE cmt | na 16 16 |        |             | ; As with R>, the problem with the is word is that the top value on the Return
1305:000 | DONE cmt | na 16 16 |        |             | ; Stack for a STC Forth is the return address, which we need to get out of the
1306:000 | DONE cmt | na 16 16 |        |             | ; way first. Uses tmp3
1307:000 | DONE lbl | na 16 16 | 0053be |             | xt_twofromr                          
1308:000 | DONE cmt | na 16 16 |        |             |                 ; get the return address out of the way
1309:000 | DONE ins | na 16 16 | 0053be | 68          |                 pla                  
1310:000 | DONE ins | na 16 16 | 0053bf | 85 20       |                 sta.d 000020         
1311:000 | DONE cmt | na 16 16 |        |             |                 ; --- CUT HERE for native compile ---
1312:000 | DONE wsp | na 16 16 |        |             |
1313:000 | DONE ins | na 16 16 | 0053c1 | ca          |                 dex                  make room on Data Stack
1314:000 | DONE ins | na 16 16 | 0053c2 | ca          |                 dex                  
1315:000 | DONE ins | na 16 16 | 0053c3 | ca          |                 dex                  
1316:000 | DONE ins | na 16 16 | 0053c4 | ca          |                 dex                  
1317:000 | DONE ins | na 16 16 | 0053c5 | 94 02       |                 sty.dx 02            
1318:000 | DONE wsp | na 16 16 |        |             |
1319:000 | DONE ins | na 16 16 | 0053c7 | 7a          |                 ply                  top element stays on top
1320:000 | DONE ins | na 16 16 | 0053c8 | 68          |                 pla                  next element stays below
1321:000 | DONE ins | na 16 16 | 0053c9 | 95 00       |                 sta.dx 00            
1322:000 | DONE wsp | na 16 16 |        |             |
1323:000 | DONE cmt | na 16 16 |        |             |                 ; --- CUT HERE for native compile ---
1324:000 | DONE cmt | na 16 16 |        |             |                 ; restore return address
1325:000 | DONE ins | na 16 16 | 0053cb | a5 20       |                 lda.d 000020         
1326:000 | DONE ins | na 16 16 | 0053cd | 48          |                 pha                  
1327:000 | DONE wsp | na 16 16 |        |             |
1328:000 | DONE lbl | na 16 16 | 0053ce |             | z_twofromr                           
1328:001 | DONE ins | na 16 16 | 0053ce | 60          |                 rts                  
1329:000 | DONE wsp | na 16 16 |        |             |
1330:000 | DONE wsp | na 16 16 |        |             |
1331:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1332:000 | DONE cmt | na 16 16 |        |             | ; 2R@ ( -- n1 n2 )(R: n1 n2 -- n1 n2 )  X bytes / X cycles
1333:000 | DONE cmt | na 16 16 |        |             | ; Copy two words off the Return Stack.  This is R> R> 2DUP >R >R SWAP but we
1334:000 | DONE cmt | na 16 16 |        |             | ; can do this a lot faster in assembler This routine may not be natively
1335:000 | DONE cmt | na 16 16 |        |             | ; compiled; because it accessed by a JSR, the first element on the Return Stack
1336:000 | DONE cmt | na 16 16 |        |             | ; (LDA.S 01) is the return address.
1337:000 | DONE lbl | na 16 16 | 0053cf |             | xt_tworfetch                         
1338:000 | DONE cmt | na 16 16 |        |             |                 ; make room on the Data Stack
1339:000 | DONE ins | na 16 16 | 0053cf | ca          |                 dex                  
1340:000 | DONE ins | na 16 16 | 0053d0 | ca          |                 dex                  
1341:000 | DONE ins | na 16 16 | 0053d1 | ca          |                 dex                  
1342:000 | DONE ins | na 16 16 | 0053d2 | ca          |                 dex                  
1343:000 | DONE ins | na 16 16 | 0053d3 | 94 02       |                 sty.dx 02            
1344:000 | DONE wsp | na 16 16 |        |             |
1345:000 | DONE ins | na 16 16 | 0053d5 | a3 03       |                 lda.s 03             get top of Return Stack
1346:000 | DONE ins | na 16 16 | 0053d7 | a8          |                 tay                  
1347:000 | DONE ins | na 16 16 | 0053d8 | a3 05       |                 lda.s 05             get next on Return Stack
1348:000 | DONE ins | na 16 16 | 0053da | 95 00       |                 sta.dx 00            
1349:000 | DONE wsp | na 16 16 |        |             |
1350:000 | DONE lbl | na 16 16 | 0053dc |             | z_tworfetch                          
1350:001 | DONE ins | na 16 16 | 0053dc | 60          |                 rts                  
1351:000 | DONE wsp | na 16 16 |        |             |
1352:000 | DONE wsp | na 16 16 |        |             |
1353:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1354:000 | DONE cmt | na 16 16 |        |             | ; 2SWAP ( d1 d2 -- d2 d1 ) X bytes / X cycles
1355:000 | DONE cmt | na 16 16 |        |             | ; Swap two double cell numbers on the Data Stack.
1356:000 | DONE lbl | na 16 16 | 0053dd |             | xt_2swap                             
1357:000 | DONE ins | na 16 16 | 0053dd | 5a          |                 phy                  hi word of TOS
1358:000 | DONE ins | na 16 16 | 0053de | b4 02       |                 ldy.dx 02            hi word of NOS
1359:000 | DONE ins | na 16 16 | 0053e0 | 68          |                 pla                  
1360:000 | DONE ins | na 16 16 | 0053e1 | 95 02       |                 sta.dx 02            
1361:000 | DONE wsp | na 16 16 |        |             |
1362:000 | DONE ins | na 16 16 | 0053e3 | b5 00       |                 lda.dx 00            lo word of TOS
1363:000 | DONE ins | na 16 16 | 0053e5 | 48          |                 pha                  
1364:000 | DONE ins | na 16 16 | 0053e6 | b5 04       |                 lda.dx 04            lo word of NOS
1365:000 | DONE ins | na 16 16 | 0053e8 | 95 00       |                 sta.dx 00            
1366:000 | DONE ins | na 16 16 | 0053ea | 68          |                 pla                  
1367:000 | DONE ins | na 16 16 | 0053eb | 95 04       |                 sta.dx 04            
1368:000 | DONE wsp | na 16 16 |        |             |
1369:000 | DONE lbl | na 16 16 | 0053ed |             | z_2swap                              
1369:001 | DONE ins | na 16 16 | 0053ed | 60          |                 rts                  
1370:000 | DONE wsp | na 16 16 |        |             |
1371:000 | DONE wsp | na 16 16 |        |             |
1372:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1373:000 | DONE cmt | na 16 16 |        |             | ; 2VARIABLE ( "name" -- ) X bytes / X cycles
1374:000 | DONE cmt | na 16 16 |        |             | ; Create a variable with space for a double celled word. This can be realized in
1375:000 | DONE cmt | na 16 16 |        |             | ; Forth as either CREATE 2 CELLS ALLOT or just CREATE 0 , 0 ,
1376:000 | DONE cmt | na 16 16 |        |             | ; We use the second variant, letting CREATE do the hard work
1377:000 | DONE cmt | na 16 16 |        |             | ; TODO see if it is faster to use Y as an index and increase by four
1378:000 | DONE lbl | na 16 16 | 0053ee |             | xt_2variable                         
1379:000 | DONE dir | na 16 16 |        |             |         .!a16                        
1380:000 | DONE ins | na 16 16 | 0053ee | 20 39 56    |                 jsr 005639           
1381:000 | DONE wsp | na 16 16 |        |             |
1382:000 | DONE ins | na 16 16 | 0053f1 | a9 00 00    |                 lda.# 0000           
1383:000 | DONE ins | na 16 16 | 0053f4 | 92 00       |                 sta.di 000000        
1384:000 | DONE ins | na 16 16 | 0053f6 | e6 00       |                 inc.d 000000         
1385:000 | DONE ins | na 16 16 | 0053f8 | e6 00       |                 inc.d 000000         
1386:000 | DONE ins | na 16 16 | 0053fa | 92 00       |                 sta.di 000000        
1387:000 | DONE ins | na 16 16 | 0053fc | e6 00       |                 inc.d 000000         
1388:000 | DONE ins | na 16 16 | 0053fe | e6 00       |                 inc.d 000000         
1389:000 | DONE wsp | na 16 16 |        |             |
1390:000 | DONE lbl | na 16 16 | 005400 |             | z_2variable                          
1390:001 | DONE ins | na 16 16 | 005400 | 60          |                 rts                  
1391:000 | DONE wsp | na 16 16 |        |             |
1392:000 | DONE wsp | na 16 16 |        |             |
1393:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1394:000 | DONE cmt | na 16 16 |        |             | ; ' "TICK" ( "string" -- xt ) X bytes / X cycles
1395:000 | DONE cmt | na 16 16 |        |             | ; Given a string with the name of a word, return the word's execution token (xt)
1396:000 | DONE cmt | na 16 16 |        |             | ; Abort if not found
1397:000 | DONE lbl | na 16 16 | 005401 |             | xt_tick                              
1398:000 | DONE ins | na 16 16 | 005401 | 20 c4 5a    |                 jsr 005ac4           ( -- addr u )
1399:000 | DONE wsp | na 16 16 |        |             |
1400:000 | DONE cmt | na 16 16 |        |             |                 ; if we got a zero, complain and abort
1401:000 | DONE ins | na 16 16 | 005404 | 98          |                 tya                  force flag check
1402:000 | DONE ins | na 16 16 | 005405 | d0 06       |                 bne 00540d           
1403:000 | DONE wsp | na 16 16 |        |             |
1404:000 | DONE ins | na 16 16 | 005407 | a9 9f 6e    |                 lda.# 006e9f         
1405:000 | DONE ins | na 16 16 | 00540a | 4c 8c 67    |                 jmp 00678c           
1406:000 | DONE wsp | na 16 16 |        |             |
1407:000 | DONE lbl | na 16 16 | 00540d |             | tick_have_word                       
1408:000 | DONE ins | na 16 16 | 00540d | 20 17 58    |                 jsr 005817           ( addr u -- nt)
1409:000 | DONE ins | na 16 16 | 005410 | 98          |                 tya                  force flag check
1410:000 | DONE wsp | na 16 16 |        |             |
1411:000 | DONE cmt | na 16 16 |        |             |                 ; if we didn't find string in the dictionary, complain and abort
1412:000 | DONE ins | na 16 16 | 005411 | d0 06       |                 bne 005419           
1413:000 | DONE wsp | na 16 16 |        |             |
1414:000 | DONE ins | na 16 16 | 005413 | a9 3c 6f    |                 lda.# 006f3c         
1415:000 | DONE ins | na 16 16 | 005416 | 4c 8c 67    |                 jmp 00678c           
1416:000 | DONE wsp | na 16 16 |        |             |
1417:000 | DONE lbl | na 16 16 | 005419 |             | tick_have_nt                         
1418:000 | DONE ins | na 16 16 | 005419 | 20 e4 59    |                 jsr 0059e4           ( nt -- xt )
1419:000 | DONE wsp | na 16 16 |        |             |
1420:000 | DONE lbl | na 16 16 | 00541c |             | z_tick                               
1420:001 | DONE ins | na 16 16 | 00541c | 60          |                 rts                  
1421:000 | DONE wsp | na 16 16 |        |             |
1422:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1423:000 | DONE cmt | na 16 16 |        |             | ; ABORT" "ABORTQ" ( "string" -- ) X bytes / X cycles
1424:000 | DONE cmt | na 16 16 |        |             | ; If flag on TOS is not false, print error message and abort. This a compile-only word
1425:000 | DONE lbl | na 16 16 | 00541d |             | xt_abortq                            
1426:000 | DONE dir | na 16 16 |        |             |         .!a16                        
1427:000 | DONE ins | na 16 16 | 00541d | 20 d0 5b    |                 jsr 005bd0           save string
1428:000 | DONE wsp | na 16 16 |        |             |
1429:000 | DONE ins | na 16 16 | 005420 | f4 27 54    |                 phe.# 005427         compile run-time aspect
1430:000 | DONE ins | na 16 16 | 005423 | 20 6b 67    |                 jsr 00676b           
1431:000 | DONE wsp | na 16 16 |        |             |
1432:000 | DONE ins | na 16 16 | 005426 | 60          |                 rts                  
1433:000 | DONE wsp | na 16 16 |        |             |
1434:000 | DONE lbl | na 16 16 | 005427 |             | abortq_rt                            
1435:000 | DONE cmt | na 16 16 |        |             |                 ; we land here with ( f addr u )
1436:000 | DONE ins | na 16 16 | 005427 | b5 02       |                 lda.dx 02            get flag as 3OS
1437:000 | DONE ins | na 16 16 | 005429 | f0 06       |                 beq 005431           if FALSE, we're done
1438:000 | DONE wsp | na 16 16 |        |             |
1439:000 | DONE cmt | na 16 16 |        |             |                 ; if TRUE, we print string and ABORT
1440:000 | DONE cmt | na 16 16 |        |             |                 ; TODO see if we want to inform user we're aborting
1441:000 | DONE ins | na 16 16 | 00542b | 20 37 5d    |                 jsr 005d37           
1442:000 | DONE ins | na 16 16 | 00542e | 4c aa 50    |                 jmp 0050aa           not JSR because we never come back
1443:000 | DONE wsp | na 16 16 |        |             |
1444:000 | DONE lbl | na 16 16 | 005431 |             | abortq_done                          
1445:000 | DONE cmt | na 16 16 |        |             |                 ; drop the three entries from the Data Stack
1446:000 | DONE ins | na 16 16 | 005431 | b4 04       |                 ldy.dx 04            fourth on the stack
1447:000 | DONE wsp | na 16 16 |        |             |
1448:000 | DONE cmt | na 16 16 |        |             |                 ; this is the same size, but three cycles faster than six INX
1449:000 | DONE cmt | na 16 16 |        |             |                 ; instructions
1450:000 | DONE ins | na 16 16 | 005433 | 8a          |                 txa                  
1451:000 | DONE ins | na 16 16 | 005434 | 18          |                 clc                  
1452:000 | DONE ins | na 16 16 | 005435 | 69 06 00    |                 adc.# 0006           
1453:000 | DONE ins | na 16 16 | 005438 | aa          |                 tax                  
1454:000 | DONE wsp | na 16 16 |        |             |
1455:000 | DONE lbl | na 16 16 | 005439 |             | z_abortq                             
1455:001 | DONE ins | na 16 16 | 005439 | 60          |                 rts                  
1456:000 | DONE wsp | na 16 16 |        |             |
1457:000 | DONE wsp | na 16 16 |        |             |
1458:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1459:000 | DONE cmt | na 16 16 |        |             | ; ABS ( n -- u ) 8 bytes / X cycles
1460:000 | DONE cmt | na 16 16 |        |             | ; Return the absolute value of a single number
1461:000 | DONE lbl | na 16 16 | 00543a |             | xt_abs                               
1462:000 | DONE dir | na 16 16 |        |             |         .!a16                        
1463:000 | DONE dir | na 16 16 |        |             |         .!xy16                       
1464:000 | DONE ins | na 16 16 | 00543a | 98          |                 tya                  force flag test
1465:000 | DONE ins | na 16 16 | 00543b | 10 05       |                 bpl 005442           positive number is easy
1466:000 | DONE wsp | na 16 16 |        |             |
1467:000 | DONE cmt | na 16 16 |        |             |                 ; negative: Calculate 0-n
1468:000 | DONE ins | na 16 16 | 00543d | 49 ff ff    |                 eor.# 0ffff          
1469:000 | DONE ins | na 16 16 | 005440 | 1a          |                 inc.a                
1470:000 | DONE ins | na 16 16 | 005441 | a8          |                 tay                  
1471:000 | DONE wsp | na 16 16 |        |             |
1472:000 | DONE lbl | na 16 16 | 005442 |             | z_abs                                
1472:001 | DONE ins | na 16 16 | 005442 | 60          |                 rts                  
1473:000 | DONE wsp | na 16 16 |        |             |
1474:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1475:000 | DONE cmt | na 16 16 |        |             | ; ACCEPT ( addr n1 -- n2 ) X bytes / X cycles
1476:000 | DONE cmt | na 16 16 |        |             | ; Receive a string of at most n1 characters, placing them at addr. Return the
1477:000 | DONE cmt | na 16 16 |        |             | ; actual number of characters as n2. Characters are echoed as they are received.
1478:000 | DONE cmt | na 16 16 |        |             | ; ACCEPT is called by REFILL these days.
1479:000 | DONE lbl | na 16 16 | 005443 |             | xt_accept                            
1480:000 | DONE cmt | na 16 16 |        |             |                 ; Set up loop
1481:000 | DONE ins | na 16 16 | 005443 | 98          |                 tya                  force flag test
1482:000 | DONE ins | na 16 16 | 005444 | d0 03       |                 bne 005449           
1483:000 | DONE wsp | na 16 16 |        |             |
1484:000 | DONE cmt | na 16 16 |        |             |                 ; if we were told to get zero chars, just quit
1485:000 | DONE ins | na 16 16 | 005446 | e8          |                 inx                  NIP, TOS is zero which is also FALSE
1486:000 | DONE ins | na 16 16 | 005447 | e8          |                 inx                  
1487:000 | DONE wsp | na 16 16 |        |             |
1488:000 | DONE ins | na 16 16 | 005448 | 60          |                 rts                  
1489:000 | DONE wsp | na 16 16 |        |             |
1490:000 | DONE lbl | na 16 16 | 005449 |             | accept_nonzero                       
1491:000 | DONE ins | na 16 16 | 005449 | b5 00       |                 lda.dx 00            address of buffer is NOS
1492:000 | DONE ins | na 16 16 | 00544b | 85 1c       |                 sta.d 00001c         
1493:000 | DONE ins | na 16 16 | 00544d | e8          |                 inx                  NIP
1494:000 | DONE ins | na 16 16 | 00544e | e8          |                 inx                  
1495:000 | DONE wsp | na 16 16 |        |             |
1496:000 | DONE ins | na 16 16 | 00544f | 84 1e       |                 sty.d 00001e         Save max number of chars in tmp2
1497:000 | DONE ins | na 16 16 | 005451 | a0 00 00    |                 ldy.# 0000           Use Y as counter
1498:000 | DONE ins | na 16 16 | 005454 | e2 20       |                 sep 20               
1498:001 | DONE ctl | na  8 16 |        |             |         .!a8
1499:000 | DONE wsp | na  8 16 |        |             |
1500:000 | DONE lbl | na  8 16 | 005456 |             | accept_loop                          
1501:000 | DONE cmt | na  8 16 |        |             |                 ; TODO rewrite with KEY so we can revector it
1502:000 | DONE cmt | na  8 16 |        |             |                 ; We don't need to check for CTRL-l, because a vt100 terminal
1503:000 | DONE cmt | na  8 16 |        |             |                 ; clears the screen automatically
1504:000 | DONE ins | na  8 16 | 005456 | 20 45 50    |                 jsr 005045           
1505:000 | DONE dir | na  8 16 |        |             |         .!a8                         
1506:000 | DONE cmt | na  8 16 |        |             |                 ; we quit on both line feed and carriage return
1507:000 | DONE ins | na  8 16 | 005459 | c9 0a       |                 cmp.# AscLF          
1508:000 | DONE ins | na  8 16 | 00545b | f0 44       |                 beq 0054a1           
1509:000 | DONE ins | na  8 16 | 00545d | c9 0d       |                 cmp.# AscCR          
1510:000 | DONE ins | na  8 16 | 00545f | f0 40       |                 beq 0054a1           
1511:000 | DONE wsp | na  8 16 |        |             |
1512:000 | DONE cmt | na  8 16 |        |             |                 ; BS and DEL do the same thing for the moment
1513:000 | DONE ins | na  8 16 | 005461 | c9 08       |                 cmp.# AscBS          
1514:000 | DONE ins | na  8 16 | 005463 | f0 44       |                 beq 0054a9           
1515:000 | DONE ins | na  8 16 | 005465 | c9 7f       |                 cmp.# AscDEL         
1516:000 | DONE ins | na  8 16 | 005467 | f0 40       |                 beq 0054a9           
1517:000 | DONE wsp | na  8 16 |        |             |
1518:000 | DONE cmt | na  8 16 |        |             |                 ; CTRL-c and ESC abort (see if this is too harsh)
1519:000 | DONE ins | na  8 16 | 005469 | c9 03       |                 cmp.# AscCC          
1520:000 | DONE ins | na  8 16 | 00546b | d0 03       |                 bne 005470           
1521:000 | DONE ins | na  8 16 | 00546d | 4c aa 50    |                 jmp 0050aa           
1522:000 | DONE lbl | na  8 16 | 005470 |             | @                                    
1523:000 | DONE ins | na  8 16 | 005470 | c9 1b       |                 cmp.# AscESC         
1524:000 | DONE ins | na  8 16 | 005472 | d0 03       |                 bne 005477           
1525:000 | DONE ins | na  8 16 | 005474 | 4c aa 50    |                 jmp 0050aa           
1526:000 | DONE lbl | na  8 16 | 005477 |             | @                                    
1527:000 | DONE cmt | na  8 16 |        |             |                 ; CTRL-p will be used for "previous cmd", TODO
1528:000 | DONE ins | na  8 16 | 005477 | c9 10       |                 cmp.# AscCP          
1529:000 | DONE ins | na  8 16 | 005479 | d0 0c       |                 bne 005487           
1530:000 | DONE ins | na  8 16 | 00547b | c2 20       |                 rep 20               
1530:001 | DONE ctl | na 16 16 |        |             |         .!a16
1531:000 | DONE ins | na 16 16 | 00547d | a9 54 6f    |                 lda.# 006f54         
1532:000 | DONE ins | na 16 16 | 005480 | 20 92 67    |                 jsr 006792           
1533:000 | DONE ins | na 16 16 | 005483 | e2 20       |                 sep 20               
1533:001 | DONE ctl | na  8 16 |        |             |         .!a8
1534:000 | DONE ins | na  8 16 | 005485 | 80 cf       |                 bra 005456           
1535:000 | DONE lbl | na  8 16 | 005487 |             | @                                    
1536:000 | DONE cmt | na  8 16 |        |             |                 ; CTRL-n will be used for "next cmd", TODO
1537:000 | DONE ins | na  8 16 | 005487 | c9 0e       |                 cmp.# AscCN          
1538:000 | DONE ins | na  8 16 | 005489 | d0 0c       |                 bne 005497           
1539:000 | DONE ins | na  8 16 | 00548b | c2 20       |                 rep 20               
1539:001 | DONE ctl | na 16 16 |        |             |         .!a16
1540:000 | DONE ins | na 16 16 | 00548d | a9 67 6f    |                 lda.# 006f67         
1541:000 | DONE ins | na 16 16 | 005490 | 20 92 67    |                 jsr 006792           
1542:000 | DONE ins | na 16 16 | 005493 | e2 20       |                 sep 20               
1542:001 | DONE ctl | na  8 16 |        |             |         .!a8
1543:000 | DONE ins | na  8 16 | 005495 | 80 bf       |                 bra 005456           
1544:000 | DONE wsp | na  8 16 |        |             |
1545:000 | DONE lbl | na  8 16 | 005497 |             | @                                    
1546:000 | DONE cmt | na  8 16 |        |             |                 ; That's quite enough, echo character. EMIT_A sidesteps all the
1547:000 | DONE cmt | na  8 16 |        |             |                 ; fooling around with the Data Stack
1548:000 | DONE ins | na  8 16 | 005497 | 20 b4 57    |                 jsr 0057b4           
1549:000 | DONE dir | na  8 16 |        |             |         .!a8                         
1550:000 | DONE ins | na  8 16 | 00549a | 91 08       |                 sta.diy 000008       STA (CIB),Y
1551:000 | DONE wsp | na  8 16 |        |             |
1552:000 | DONE ins | na  8 16 | 00549c | c8          |                 iny                  
1553:000 | DONE ins | na  8 16 | 00549d | c4 1e       |                 cpy.d 00001e         reached character limit?
1554:000 | DONE ins | na  8 16 | 00549f | d0 b5       |                 bne 005456           fall thru if buffer limit reached
1555:000 | DONE wsp | na  8 16 |        |             |
1556:000 | DONE lbl | na  8 16 | 0054a1 |             | accept_eol                           
1557:000 | DONE ins | na  8 16 | 0054a1 | 84 0a       |                 sty.d 00000a         Y contains number of chars accepted already
1558:000 | DONE ins | na  8 16 | 0054a3 | c2 20       |                 rep 20               
1558:001 | DONE ctl | na 16 16 |        |             |         .!a16
1559:000 | DONE ins | na 16 16 | 0054a5 | 20 f3 5c    |                 jsr 005cf3           print final space
1560:000 | DONE ins | na 16 16 | 0054a8 | 60          |                 rts                  this is the actual return of the routine
1561:000 | DONE wsp | na 16 16 |        |             |
1562:000 | DONE lbl | na 16 16 | 0054a9 |             | accept_bs                            
1563:000 | DONE dir | na  8 16 |        |             |         .!a8                         
1564:000 | DONE ins | na  8 16 | 0054a9 | c0 00 00    |                 cpy.# 0000           buffer empty?
1565:000 | DONE ins | na  8 16 | 0054ac | d0 06       |                 bne 0054b4           
1566:000 | DONE wsp | na  8 16 |        |             |
1567:000 | DONE ins | na  8 16 | 0054ae | a9 07       |                 lda.# AscBELL        complain and don't delete beyond the start of line
1568:000 | DONE ins | na  8 16 | 0054b0 | 20 b4 57    |                 jsr 0057b4           
1569:000 | DONE ins | na  8 16 | 0054b3 | c8          |                 iny                  
1570:000 | DONE lbl | na  8 16 | 0054b4 |             | @                                    
1571:000 | DONE ins | na  8 16 | 0054b4 | 88          |                 dey                  
1572:000 | DONE ins | na  8 16 | 0054b5 | a9 08       |                 lda.# AscBS          move back one
1573:000 | DONE ins | na  8 16 | 0054b7 | 20 b4 57    |                 jsr 0057b4           
1574:000 | DONE ins | na  8 16 | 0054ba | a9 20       |                 lda.# AscSP          print a space (rubout)
1575:000 | DONE ins | na  8 16 | 0054bc | 20 b4 57    |                 jsr 0057b4           
1576:000 | DONE ins | na  8 16 | 0054bf | a9 08       |                 lda.# AscBS          move back over space
1577:000 | DONE ins | na  8 16 | 0054c1 | 20 b4 57    |                 jsr 0057b4           
1578:000 | DONE wsp | na  8 16 |        |             |
1579:000 | DONE ins | na  8 16 | 0054c4 | 80 90       |                 bra 005456           
1580:000 | DONE wsp | na  8 16 |        |             |
1581:000 | DONE lbl | na  8 16 | 0054c6 |             | z_accept                             
1581:001 | DONE ins | na  8 16 | 0054c6 | 60          |                 rts                  
1582:000 | DONE wsp | na  8 16 |        |             |
1583:000 | DONE cmt | na  8 16 |        |             | ; -------------------------------------------------------------------
1584:000 | DONE cmt | na  8 16 |        |             | ; AGAIN ( addr -- ) 22 bytes / 50 cycles
1585:000 | DONE cmt | na  8 16 |        |             | ; Code a backwards branch to an address usually left by BEGIN. We use JMP
1586:000 | DONE cmt | na  8 16 |        |             | ; instead of BRA to make sure we have the range.
1587:000 | DONE cmt | na  8 16 |        |             | ; TODO see if we should insert a KEY? to make sure we can abort and/or a PAUSE
1588:000 | DONE lbl | na  8 16 | 0054c7 |             | xt_again                             
1589:000 | DONE wsp | na  8 16 |        |             |
1590:000 | DONE cmt | na  8 16 |        |             |                 ; Add the opcode for a JMP
1591:000 | DONE ins | na  8 16 | 0054c7 | e2 20       |                 sep 20               
1591:001 | DONE ctl | na  8 16 |        |             |         .!a8
1592:000 | DONE ins | na  8 16 | 0054c9 | a9 4c       |                 lda.# 4c             
1593:000 | DONE ins | na  8 16 | 0054cb | 92 00       |                 sta.di 000000        STA (CP)
1594:000 | DONE ins | na  8 16 | 0054cd | c2 20       |                 rep 20               
1594:001 | DONE ctl | na 16 16 |        |             |         .!a16
1595:000 | DONE ins | na 16 16 | 0054cf | e6 00       |                 inc.d 000000         
1596:000 | DONE wsp | na 16 16 |        |             |
1597:000 | DONE cmt | na 16 16 |        |             |                 ; Add the address which should be TOS
1598:000 | DONE ins | na 16 16 | 0054d1 | 98          |                 tya                  
1599:000 | DONE ins | na 16 16 | 0054d2 | 92 00       |                 sta.di 000000        
1600:000 | DONE ins | na 16 16 | 0054d4 | e6 00       |                 inc.d 000000         
1601:000 | DONE ins | na 16 16 | 0054d6 | e6 00       |                 inc.d 000000         
1602:000 | DONE wsp | na 16 16 |        |             |
1603:000 | DONE cmt | na 16 16 |        |             |                 ; drop the address
1604:000 | DONE ins | na 16 16 | 0054d8 | b4 00       |                 ldy.dx 00            
1605:000 | DONE ins | na 16 16 | 0054da | e8          |                 inx                  
1606:000 | DONE ins | na 16 16 | 0054db | e8          |                 inx                  
1607:000 | DONE wsp | na 16 16 |        |             |
1608:000 | DONE lbl | na 16 16 | 0054dc |             | z_again                              
1608:001 | DONE ins | na 16 16 | 0054dc | 60          |                 rts                  
1609:000 | DONE wsp | na 16 16 |        |             |
1610:000 | DONE wsp | na 16 16 |        |             |
1611:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1612:000 | DONE cmt | na 16 16 |        |             | ; ALIGN ( -- ) 1 bytes / X cycles
1613:000 | DONE cmt | na 16 16 |        |             | ; Make sure CP is aligned. This does nothing on the 65816
1614:000 | DONE lbl | na 16 16 | 0054dd |             | xt_align                             
1615:000 | DONE ins | na 16 16 | 0054dd | ea          |                 nop                  removed during native compile
1616:000 | DONE lbl | na 16 16 | 0054de |             | z_align                              
1616:001 | DONE ins | na 16 16 | 0054de | 60          |                 rts                  
1617:000 | DONE wsp | na 16 16 |        |             |
1618:000 | DONE wsp | na 16 16 |        |             |
1619:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1620:000 | DONE cmt | na 16 16 |        |             | ; ALIGNED ( addr -- a-addr ) X bytes / X cycles
1621:000 | DONE cmt | na 16 16 |        |             | ; Return the next aligned address. With the 65816, this does nothing
1622:000 | DONE lbl | na 16 16 | 0054df |             | xt_aligned                           
1623:000 | DONE ins | na 16 16 | 0054df | ea          |                 nop                  removed during native compile
1624:000 | DONE lbl | na 16 16 | 0054e0 |             | z_aligned                            
1624:001 | DONE ins | na 16 16 | 0054e0 | 60          |                 rts                  
1625:000 | DONE wsp | na 16 16 |        |             |
1626:000 | DONE wsp | na 16 16 |        |             |
1627:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1628:000 | DONE cmt | na 16 16 |        |             | ; ALLOT ( n -- ) X bytes / X cycles
1629:000 | DONE cmt | na 16 16 |        |             | ; Reserve a certain number of bytes (not cells) or release them. If n = 0, do
1630:000 | DONE cmt | na 16 16 |        |             | ; nothing. If n is negative, release n bytes, but only to the beginning of the
1631:000 | DONE cmt | na 16 16 |        |             | ; Dictionary. If n is positive (the most common case), reserve n bytes, but not
1632:000 | DONE cmt | na 16 16 |        |             | ; past the Dictionary.
1633:000 | DONE cmt | na 16 16 |        |             | ; See http://forth-standard.org/standard/core/ALLOT
1634:000 | DONE cmt | na 16 16 |        |             | ; TODO test negative values
1635:000 | DONE lbl | na 16 16 | 0054e1 |             | xt_allot                             
1636:000 | DONE dir | na 16 16 |        |             |         .!a16                        
1637:000 | DONE ins | na 16 16 | 0054e1 | 98          |                 tya                  force flag check
1638:000 | DONE ins | na 16 16 | 0054e2 | f0 21       |                 beq 005505           zero bytes, don't do anything
1639:000 | DONE ins | na 16 16 | 0054e4 | 30 12       |                 bmi 0054f8           free memory instead of reserving it
1640:000 | DONE wsp | na 16 16 |        |             |
1641:000 | DONE cmt | na 16 16 |        |             |                 ; most common case: reserve n bytes. We've already transfered
1642:000 | DONE cmt | na 16 16 |        |             |                 ; TOS to A, so we just have to add the current compile pointer
1643:000 | DONE ins | na 16 16 | 0054e6 | 18          |                 clc                  
1644:000 | DONE ins | na 16 16 | 0054e7 | 65 00       |                 adc.d 000000         create new CP
1645:000 | DONE ins | na 16 16 | 0054e9 | b0 07       |                 bcs 0054f2           oops, we've wrapped
1646:000 | DONE wsp | na 16 16 |        |             |
1647:000 | DONE ins | na 16 16 | 0054eb | a8          |                 tay                  save copy of new CP
1648:000 | DONE wsp | na 16 16 |        |             |
1649:000 | DONE ins | na 16 16 | 0054ec | 38          |                 sec                  
1650:000 | DONE ins | na 16 16 | 0054ed | e9 ff 4f    |                 sbc.# 004fff         
1651:000 | DONE ins | na 16 16 | 0054f0 | 30 11       |                 bmi 005503           oops, fall thru if beyond max RAM
1652:000 | DONE wsp | na 16 16 |        |             |
1653:000 | DONE lbl | na 16 16 | 0054f2 |             | allot_error                          
1654:000 | DONE ins | na 16 16 | 0054f2 | a9 1a 6e    |                 lda.# 006e1a         
1655:000 | DONE ins | na 16 16 | 0054f5 | 4c 8c 67    |                 jmp 00678c           
1656:000 | DONE wsp | na 16 16 |        |             |
1657:000 | DONE lbl | na 16 16 | 0054f8 |             | allot_minus                          
1658:000 | DONE cmt | na 16 16 |        |             |                 ; negative value means we're freeing memory
1659:000 | DONE ins | na 16 16 | 0054f8 | 38          |                 sec                  
1660:000 | DONE ins | na 16 16 | 0054f9 | e5 00       |                 sbc.d 000000         
1661:000 | DONE ins | na 16 16 | 0054fb | 90 f5       |                 bcc 0054f2           oops, we've wrapped
1662:000 | DONE wsp | na 16 16 |        |             |
1663:000 | DONE ins | na 16 16 | 0054fd | a8          |                 tay                  
1664:000 | DONE wsp | na 16 16 |        |             |
1665:000 | DONE ins | na 16 16 | 0054fe | e9 00 03    |                 sbc.# 000300         Carry Flag must still be set
1666:000 | DONE ins | na 16 16 | 005501 | 30 ef       |                 bmi 0054f2           oops, gone too far back
1667:000 | DONE wsp | na 16 16 |        |             |
1668:000 | DONE cmt | na 16 16 |        |             |                 ; fall through to allot_done
1669:000 | DONE lbl | na 16 16 | 005503 |             | allot_done                           
1670:000 | DONE ins | na 16 16 | 005503 | 84 00       |                 sty.d 000000         new compiler pointer
1671:000 | DONE lbl | na 16 16 | 005505 |             | allot_real_gone                      
1672:000 | DONE ins | na 16 16 | 005505 | b4 00       |                 ldy.dx 00            DROP
1673:000 | DONE ins | na 16 16 | 005507 | e8          |                 inx                  
1674:000 | DONE ins | na 16 16 | 005508 | e8          |                 inx                  
1675:000 | DONE wsp | na 16 16 |        |             |
1676:000 | DONE lbl | na 16 16 | 005509 |             | z_allot                              
1676:001 | DONE ins | na 16 16 | 005509 | 60          |                 rts                  
1677:000 | DONE wsp | na 16 16 |        |             |
1678:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1679:000 | DONE cmt | na 16 16 |        |             | ; AND ( n m -- n ) 6 bytes / X cycles
1680:000 | DONE cmt | na 16 16 |        |             | ; Logical AND
1681:000 | DONE lbl | na 16 16 | 00550a |             | xt_and                               
1682:000 | DONE ins | na 16 16 | 00550a | 98          |                 tya                  
1683:000 | DONE ins | na 16 16 | 00550b | 35 00       |                 and.dx 00            
1684:000 | DONE ins | na 16 16 | 00550d | a8          |                 tay                  
1685:000 | DONE wsp | na 16 16 |        |             |
1686:000 | DONE ins | na 16 16 | 00550e | e8          |                 inx                  NIP
1687:000 | DONE ins | na 16 16 | 00550f | e8          |                 inx                  
1688:000 | DONE wsp | na 16 16 |        |             |
1689:000 | DONE lbl | na 16 16 | 005510 |             | z_and                                
1689:001 | DONE ins | na 16 16 | 005510 | 60          |                 rts                  
1690:000 | DONE wsp | na 16 16 |        |             |
1691:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1692:000 | DONE cmt | na 16 16 |        |             | ; BASE ( -- addr ) X bytes / X cycles
1693:000 | DONE cmt | na 16 16 |        |             | ; Get the address of where the radix for number conversion is stored
1694:000 | DONE lbl | na 16 16 | 005511 |             | xt_base                              
1695:000 | DONE ins | na 16 16 | 005511 | ca          |                 dex                  
1696:000 | DONE ins | na 16 16 | 005512 | ca          |                 dex                  
1697:000 | DONE ins | na 16 16 | 005513 | 94 00       |                 sty.dx 00            
1698:000 | DONE wsp | na 16 16 |        |             |
1699:000 | DONE ins | na 16 16 | 005515 | a0 16 00    |                 ldy.# 000016         
1700:000 | DONE wsp | na 16 16 |        |             |
1701:000 | DONE lbl | na 16 16 | 005518 |             | z_base                               
1701:001 | DONE ins | na 16 16 | 005518 | 60          |                 rts                  
1702:000 | DONE wsp | na 16 16 |        |             |
1703:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1704:000 | DONE cmt | na 16 16 |        |             | ; BELL ( -- ) X bytes / X cycles
1705:000 | DONE cmt | na 16 16 |        |             | ; Trigger terminal bell on vt100 terminals
1706:000 | DONE cmt | na 16 16 |        |             | ; TODO replace with EMIT
1707:000 | DONE lbl | na 16 16 | 005519 |             | xt_bell                              
1708:000 | DONE dir | na 16 16 |        |             |         .!a16                        
1709:000 | DONE ins | na 16 16 | 005519 | a9 07 00    |                 lda.# AscBELL        
1710:000 | DONE ins | na 16 16 | 00551c | 6c 0e 00    |                 jmp.i 00000e         JSR/RTS
1711:000 | DONE wsp | na 16 16 |        |             |
1712:000 | DONE lbl | na 16 16 | 00551f |             | z_bell                               ; never reached
1713:000 | DONE wsp | na 16 16 |        |             |
1714:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1715:000 | DONE cmt | na 16 16 |        |             | ; BEGIN ( -- addr ) 6 bytes / 13 cycles
1716:000 | DONE cmt | na 16 16 |        |             | ; Mark entry point for a loop. This is just an immediate version of here which
1717:000 | DONE cmt | na 16 16 |        |             | ; could just as welle be coded as  : BEGIN HERE ; IMMEDIATE  but we code it here
1718:000 | DONE cmt | na 16 16 |        |             | ; differently for speed
1719:000 | DONE lbl | na 16 16 | 00551f |             | xt_begin                             
1720:000 | DONE cmt | na 16 16 |        |             |                 ; really just the same code as HERE
1721:000 | DONE ins | na 16 16 | 00551f | ca          |                 dex                  
1722:000 | DONE ins | na 16 16 | 005520 | ca          |                 dex                  
1723:000 | DONE ins | na 16 16 | 005521 | 94 00       |                 sty.dx 00            
1724:000 | DONE wsp | na 16 16 |        |             |
1725:000 | DONE ins | na 16 16 | 005523 | a4 00       |                 ldy.d 000000         
1726:000 | DONE wsp | na 16 16 |        |             |
1727:000 | DONE lbl | na 16 16 | 005525 |             | z_begin                              
1727:001 | DONE ins | na 16 16 | 005525 | 60          |                 rts                  
1728:000 | DONE wsp | na 16 16 |        |             |
1729:000 | DONE wsp | na 16 16 |        |             |
1730:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1731:000 | DONE cmt | na 16 16 |        |             | ; BL ( -- u ) 7 bytes / 12 cycles
1732:000 | DONE cmt | na 16 16 |        |             | ; Put ASCII char for SPACE on Data Stack
1733:000 | DONE lbl | na 16 16 | 005526 |             | xt_bl                                
1734:000 | DONE dir | na 16 16 |        |             |         .!xy16                       
1735:000 | DONE ins | na 16 16 | 005526 | ca          |                 dex                  
1736:000 | DONE ins | na 16 16 | 005527 | ca          |                 dex                  
1737:000 | DONE ins | na 16 16 | 005528 | 94 00       |                 sty.dx 00            
1738:000 | DONE ins | na 16 16 | 00552a | a0 20 00    |                 ldy.# AscSP          
1739:000 | DONE wsp | na 16 16 |        |             |
1740:000 | DONE lbl | na 16 16 | 00552d |             | z_bl                                 
1740:001 | DONE ins | na 16 16 | 00552d | 60          |                 rts                  
1741:000 | DONE wsp | na 16 16 |        |             |
1742:000 | DONE wsp | na 16 16 |        |             |
1743:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1744:000 | DONE cmt | na 16 16 |        |             | ; BOUNDS ( addr u -- addr+u addr ) 9 bytes / X cycles
1745:000 | DONE cmt | na 16 16 |        |             | ; Given a string, return the correct Data Stack parameters for a DO/LOOP loop
1746:000 | DONE cmt | na 16 16 |        |             | ; over its characters. This is realized as OVER + SWAP in Forth, but we do it
1747:000 | DONE cmt | na 16 16 |        |             | ; a lot faster in assembler. Uses tmptos
1748:000 | DONE lbl | na 16 16 | 00552e |             | xt_bounds                            
1749:000 | DONE dir | na 16 16 |        |             |         .!a16                        
1750:000 | DONE ins | na 16 16 | 00552e | 84 24       |                 sty.d 000024         
1751:000 | DONE ins | na 16 16 | 005530 | b4 00       |                 ldy.dx 00            addr now TOS
1752:000 | DONE wsp | na 16 16 |        |             |
1753:000 | DONE ins | na 16 16 | 005532 | 18          |                 clc                  
1754:000 | DONE ins | na 16 16 | 005533 | 65 24       |                 adc.d 000024         
1755:000 | DONE ins | na 16 16 | 005535 | 95 00       |                 sta.dx 00            addr+u now NOS
1756:000 | DONE wsp | na 16 16 |        |             |
1757:000 | DONE lbl | na 16 16 | 005537 |             | z_bounds                             
1757:001 | DONE ins | na 16 16 | 005537 | 60          |                 rts                  
1758:000 | DONE wsp | na 16 16 |        |             |
1759:000 | DONE wsp | na 16 16 |        |             |
1760:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1761:000 | DONE cmt | na 16 16 |        |             | ; BRANCH ( -- ) X bytes / X cycles
1762:000 | DONE cmt | na 16 16 |        |             | ; Transfer control to given address. This word was adapted from Tali Forth. It
1763:000 | DONE cmt | na 16 16 |        |             | ; uses tmpbranch
1764:000 | DONE lbl | na 16 16 | 005538 |             | xt_branch                            
1765:000 | DONE dir | na 16 16 |        |             |         .!a16                        
1766:000 | DONE cmt | na 16 16 |        |             |                 ; encode subroutine branch to runtime portion
1767:000 | DONE ins | na 16 16 | 005538 | f4 3f 55    |                 phe.# 00553f         
1768:000 | DONE ins | na 16 16 | 00553b | 20 6b 67    |                 jsr 00676b           
1769:000 | DONE wsp | na 16 16 |        |             |
1770:000 | DONE lbl | na 16 16 | 00553e |             | z_branch                             
1770:001 | DONE ins | na 16 16 | 00553e | 60          |                 rts                  
1771:000 | DONE wsp | na 16 16 |        |             |
1772:000 | DONE lbl | na 16 16 | 00553f |             | branch_rt                            
1773:000 | DONE cmt | na 16 16 |        |             |                 ; The value on the Return Stack determines where we go to
1774:000 | DONE ins | na 16 16 | 00553f | 68          |                 pla                  
1775:000 | DONE ins | na 16 16 | 005540 | 85 1a       |                 sta.d 00001a         
1776:000 | DONE wsp | na 16 16 |        |             |
1777:000 | DONE ins | na 16 16 | 005542 | 5a          |                 phy                  avoid using temp variables
1778:000 | DONE ins | na 16 16 | 005543 | a0 01 00    |                 ldy.# 0001           
1779:000 | DONE ins | na 16 16 | 005546 | b1 1a       |                 lda.diy 00001a       LDA (TMPBRANCH),Y
1780:000 | DONE ins | na 16 16 | 005548 | 7a          |                 ply                  
1781:000 | DONE wsp | na 16 16 |        |             |
1782:000 | DONE ins | na 16 16 | 005549 | 3a          |                 dec.a                
1783:000 | DONE ins | na 16 16 | 00554a | 48          |                 pha                  put target address back on Return Stack
1784:000 | DONE wsp | na 16 16 |        |             |
1785:000 | DONE ins | na 16 16 | 00554b | 60          |                 rts                  
1786:000 | DONE wsp | na 16 16 |        |             |
1787:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1788:000 | DONE cmt | na 16 16 |        |             | ; BYE ( -- ) 2 bytes / 7-8 cycles
1789:000 | DONE cmt | na 16 16 |        |             | ; Leave Liara Forth, returning to Mensch Monitor
1790:000 | DONE lbl | na 16 16 | 00554c |             | xt_bye                               
1791:000 | DONE ins | na 16 16 | 00554c | 78          |                 sei                  
1792:000 | DONE ins | na 16 16 | 00554d | d8          |                 cld                  
1793:000 | DONE ins | na 16 16 | 00554e | 38          |                 sec                  
1793:001 | DONE ins | na 16 16 | 00554f | fb          |                 xce                  
1793:002 | DONE ctl | em  8  8 |        |             |         .!emulated
1793:003 | DONE ctl | em  8  8 |        |             |         .!a8
1793:004 | DONE ctl | em  8  8 |        |             |         .!xy8
1794:000 | DONE ins | em  8  8 | 005550 | 6c fc ff    |                 jmp.i 0fffc          
1795:000 | DONE wsp | em  8  8 |        |             |
1796:000 | DONE lbl | em  8  8 | 005553 |             | z_bye                                ; never reached
1797:000 | DONE wsp | em  8  8 |        |             |
1798:000 | DONE wsp | em  8  8 |        |             |
1799:000 | DONE cmt | em  8  8 |        |             | ; -------------------------------------------------------------------
1800:000 | DONE cmt | em  8  8 |        |             | ; C, "C-COMMA" ( char -- ) 13 bytes / 28 cycles
1801:000 | DONE cmt | em  8  8 |        |             | ; Store one character in the Dictionary
1802:000 | DONE lbl | em  8  8 | 005553 |             | xt_c-comma                           
1803:000 | DONE ins | em  8  8 | 005553 | 98          |                 tya                  
1804:000 | DONE ins | em  8  8 | 005554 | e2 20       |                 sep 20               
1804:001 | DONE ctl | em  8  8 |        |             |         .!a8
1805:000 | DONE ins | em  8  8 | 005556 | 92 00       |                 sta.di 000000        STA (CP)
1806:000 | DONE ins | em  8  8 | 005558 | c2 20       |                 rep 20               
1806:001 | DONE ctl | em 16  8 |        |             |         .!a16
1807:000 | DONE ins | em 16  8 | 00555a | e6 00       |                 inc.d 000000         quick version of 1 ALLOT
1808:000 | DONE wsp | em 16  8 |        |             |
1809:000 | DONE ins | em 16  8 | 00555c | b4 00       |                 ldy.dx 00            
1810:000 | DONE ins | em 16  8 | 00555e | e8          |                 inx                  
1811:000 | DONE ins | em 16  8 | 00555f | e8          |                 inx                  
1812:000 | DONE wsp | em 16  8 |        |             |
1813:000 | DONE lbl | em 16  8 | 005560 |             | z_c-comma                            
1813:001 | DONE ins | em 16  8 | 005560 | 60          |                 rts                  
1814:000 | DONE wsp | em 16  8 |        |             |
1815:000 | DONE wsp | em 16  8 |        |             |
1816:000 | DONE cmt | em 16  8 |        |             | ; -------------------------------------------------------------------
1817:000 | DONE cmt | em 16  8 |        |             | ; C@ "C-FETCH" ( addr -- n ) 11 bytes / 16 cycles
1818:000 | DONE cmt | em 16  8 |        |             | ; Get a single byte from the given address
1819:000 | DONE lbl | em 16  8 | 005561 |             | xt_c-fetch                           
1820:000 | DONE ins | em 16  8 | 005561 | e2 20       |                 sep 20               
1820:001 | DONE ctl | em  8  8 |        |             |         .!a8
1821:000 | DONE ins | em  8  8 | 005563 | b9 00 00    |                 lda.y 0000           
1822:000 | DONE ins | em  8  8 | 005566 | c2 20       |                 rep 20               
1822:001 | DONE ctl | em 16  8 |        |             |         .!a16
1823:000 | DONE ins | em 16  8 | 005568 | 29 ff 00    |                 and.# 00ff           
1824:000 | DONE ins | em 16  8 | 00556b | a8          |                 tay                  
1825:000 | DONE wsp | em 16  8 |        |             |
1826:000 | DONE lbl | em 16  8 | 00556c |             | z_c-fetch                            
1826:001 | DONE ins | em 16  8 | 00556c | 60          |                 rts                  
1827:000 | DONE wsp | em 16  8 |        |             |
1828:000 | DONE wsp | em 16  8 |        |             |
1829:000 | DONE cmt | em 16  8 |        |             | ; -------------------------------------------------------------------
1830:000 | DONE cmt | em 16  8 |        |             | ; C! "C-STORE" ( n addr -- ) 15 bytes / 29 cycles
1831:000 | DONE cmt | em 16  8 |        |             | ; Store LSB of NOS at location given as TOS
1832:000 | DONE lbl | em 16  8 | 00556d |             | xt_c-store                           
1833:000 | DONE ins | em 16  8 | 00556d | b5 00       |                 lda.dx 00            
1834:000 | DONE ins | em 16  8 | 00556f | e2 20       |                 sep 20               
1834:001 | DONE ctl | em  8  8 |        |             |         .!a8
1835:000 | DONE ins | em  8  8 | 005571 | 99 00 00    |                 sta.y 0000           
1836:000 | DONE ins | em  8  8 | 005574 | c2 20       |                 rep 20               
1836:001 | DONE ctl | em 16  8 |        |             |         .!a16
1837:000 | DONE ins | em 16  8 | 005576 | b4 02       |                 ldy.dx 02            
1838:000 | DONE ins | em 16  8 | 005578 | e8          |                 inx                  
1839:000 | DONE ins | em 16  8 | 005579 | e8          |                 inx                  
1840:000 | DONE ins | em 16  8 | 00557a | e8          |                 inx                  
1841:000 | DONE ins | em 16  8 | 00557b | e8          |                 inx                  
1842:000 | DONE wsp | em 16  8 |        |             |
1843:000 | DONE lbl | em 16  8 | 00557c |             | z_c-store                            
1843:001 | DONE ins | em 16  8 | 00557c | 60          |                 rts                  
1844:000 | DONE wsp | em 16  8 |        |             |
1845:000 | DONE wsp | em 16  8 |        |             |
1846:000 | DONE cmt | em 16  8 |        |             | ; -------------------------------------------------------------------
1847:000 | DONE cmt | em 16  8 |        |             | ; CELL+ ( u -- u+2 ) X bytes / X cycles
1848:000 | DONE cmt | em 16  8 |        |             | ; Add the size of one cell to the value on top of the stack. Since this is
1849:000 | DONE cmt | em 16  8 |        |             | ; a 16-bit cell size, we add two
1850:000 | DONE lbl | em 16  8 | 00557d |             | xt_cellplus                          
1851:000 | DONE ins | em 16  8 | 00557d | c8          |                 iny                  
1852:000 | DONE ins | em 16  8 | 00557e | c8          |                 iny                  
1853:000 | DONE lbl | em 16  8 | 00557f |             | z_cellplus                           
1853:001 | DONE ins | em 16  8 | 00557f | 60          |                 rts                  
1854:000 | DONE wsp | em 16  8 |        |             |
1855:000 | DONE wsp | em 16  8 |        |             |
1856:000 | DONE cmt | em 16  8 |        |             | ; -------------------------------------------------------------------
1857:000 | DONE cmt | em 16  8 |        |             | ; CELLS ( n -- n ) X bytes / X cycles
1858:000 | DONE cmt | em 16  8 |        |             | ; Given a number of cells, return the number of bytes that they will require.
1859:000 | DONE cmt | em 16  8 |        |             | ; This is 16 bit cell Forth, so the value returned by this word is the same as
1860:000 | DONE cmt | em 16  8 |        |             | ; returned by 2*, see there.
1861:000 | DONE wsp | em 16  8 |        |             |
1862:000 | DONE cmt | em 16  8 |        |             | ; -------------------------------------------------------------------
1863:000 | DONE cmt | em 16  8 |        |             | ; CHAR ( "c" -- u ) 23 bytes / X cycles
1864:000 | DONE cmt | em 16  8 |        |             | ; Convert a character to its ASCII value
1865:000 | DONE lbl | em 16  8 | 005580 |             | xt_char                              
1866:000 | DONE dir | em 16  8 |        |             |         .!a16                        
1867:000 | DONE ins | em 16  8 | 005580 | 20 c4 5a    |                 jsr 005ac4           ( -- addr u )
1868:000 | DONE wsp | em 16  8 |        |             |
1869:000 | DONE cmt | em 16  8 |        |             |                 ; if we got back a zero, we have a problem
1870:000 | DONE ins | em 16  8 | 005583 | 98          |                 tya                  force flag check
1871:000 | DONE ins | em 16  8 | 005584 | d0 06       |                 bne 00558c           
1872:000 | DONE wsp | em 16  8 |        |             |
1873:000 | DONE ins | em 16  8 | 005586 | a9 9f 6e    |                 lda.# 006e9f         
1874:000 | DONE ins | em 16  8 | 005589 | 4c 8c 67    |                 jmp 00678c           
1875:000 | DONE wsp | em 16  8 |        |             |
1876:000 | DONE lbl | em 16  8 | 00558c |             | char_got_char                        
1877:000 | DONE ins | em 16  8 | 00558c | b4 00       |                 ldy.dx 00            get addr from NOS
1878:000 | DONE ins | em 16  8 | 00558e | b9 00 00    |                 lda.y 0000           LDA 0000,Y - could be C@
1879:000 | DONE ins | em 16  8 | 005591 | 29 ff 00    |                 and.# 00ff           
1880:000 | DONE ins | em 16  8 | 005594 | a8          |                 tay                  
1881:000 | DONE wsp | em 16  8 |        |             |
1882:000 | DONE ins | em 16  8 | 005595 | e8          |                 inx                  
1883:000 | DONE ins | em 16  8 | 005596 | e8          |                 inx                  
1884:000 | DONE wsp | em 16  8 |        |             |
1885:000 | DONE lbl | em 16  8 | 005597 |             | z_char                               
1885:001 | DONE ins | em 16  8 | 005597 | 60          |                 rts                  
1886:000 | DONE wsp | em 16  8 |        |             |
1887:000 | DONE wsp | em 16  8 |        |             |
1888:000 | DONE cmt | em 16  8 |        |             | ; -------------------------------------------------------------------
1889:000 | DONE cmt | em 16  8 |        |             | ; CHARPLUS ( u -- u+1 ) X bytes / X cycles
1890:000 | DONE cmt | em 16  8 |        |             | ; Adds the size of a character to the value on top of the stack. Since our
1891:000 | DONE cmt | em 16  8 |        |             | ; character size is one, this is the same code as 1+, see there
1892:000 | DONE wsp | em 16  8 |        |             |
1893:000 | DONE wsp | em 16  8 |        |             |
1894:000 | DONE cmt | em 16  8 |        |             | ; -------------------------------------------------------------------
1895:000 | DONE cmt | em 16  8 |        |             | ; CHARS ( u -- u ) X bytes / X cycles
1896:000 | DONE cmt | em 16  8 |        |             | ; Return the size in bytes of the number of characters on the top of the stack.
1897:000 | DONE cmt | em 16  8 |        |             | ; In this case, does nothing
1898:000 | DONE lbl | em 16  8 | 005598 |             | xt_chars                             
1899:000 | DONE wsp | em 16  8 |        |             |
1900:000 | DONE ins | em 16  8 | 005598 | ea          |                 nop                  will be removed during native compile
1901:000 | DONE lbl | em 16  8 | 005599 |             | z_chars                              
1901:001 | DONE ins | em 16  8 | 005599 | 60          |                 rts                  
1902:000 | DONE wsp | em 16  8 |        |             |
1903:000 | DONE cmt | em 16  8 |        |             | ; -------------------------------------------------------------------
1904:000 | DONE cmt | em 16  8 |        |             | ; CMOVE ( addr1 addr2 u -- ) X bytes / X cycles
1905:000 | DONE cmt | em 16  8 |        |             | ; Move characters from a lower to a higher address. Because of the danger of
1906:000 | DONE cmt | em 16  8 |        |             | ; overlap, we must start at the end of the source string (addr1+u) and copy
1907:000 | DONE cmt | em 16  8 |        |             | ; byte-by-byte to the end of the destination address (addr2+u). This is what the
1908:000 | DONE cmt | em 16  8 |        |             | ; MVP instruction is for. Use MOVE if you are not sure what to do.
1909:000 | DONE cmt | em 16  8 |        |             | ;       =====* source
1910:000 | DONE cmt | em 16  8 |        |             | ;          ====* destination
1911:000 | DONE lbl | em 16  8 | 00559a |             | xt_cmove                             
1912:000 | DONE cmt | em 16  8 |        |             |                 ; We start at the end of the blocks, so we have to increase both
1913:000 | DONE cmt | em 16  8 |        |             |                 ; addr1 and addr2 by u
1914:000 | DONE ins | em 16  8 | 00559a | 98          |                 tya                  
1915:000 | DONE ins | em 16  8 | 00559b | 18          |                 clc                  
1916:000 | DONE ins | em 16  8 | 00559c | 75 02       |                 adc.dx 02            source, goes in X
1917:000 | DONE ins | em 16  8 | 00559e | 3a          |                 dec.a                convert length to index
1918:000 | DONE ins | em 16  8 | 00559f | 95 02       |                 sta.dx 02            
1919:000 | DONE wsp | em 16  8 |        |             |
1920:000 | DONE ins | em 16  8 | 0055a1 | 98          |                 tya                  
1921:000 | DONE ins | em 16  8 | 0055a2 | 18          |                 clc                  
1922:000 | DONE ins | em 16  8 | 0055a3 | 75 00       |                 adc.dx 00            destination, goes in Y
1923:000 | DONE ins | em 16  8 | 0055a5 | 3a          |                 dec.a                convert length to index
1924:000 | DONE wsp | em 16  8 |        |             |
1925:000 | DONE ins | em 16  8 | 0055a6 | 86 22       |                 stx.d 000022         keep DSP safe
1926:000 | DONE wsp | em 16  8 |        |             |
1927:000 | DONE ins | em 16  8 | 0055a8 | 88          |                 dey                  
1928:000 | DONE ins | em 16  8 | 0055a9 | 5a          |                 phy                  save number of bytes to transfer
1929:000 | DONE wsp | em 16  8 |        |             |
1930:000 | DONE ins | em 16  8 | 0055aa | a8          |                 tay                  destination now in Y
1931:000 | DONE wsp | em 16  8 |        |             |
1932:000 | DONE ins | em 16  8 | 0055ab | b5 02       |                 lda.dx 02            get source address
1933:000 | DONE ins | em 16  8 | 0055ad | aa          |                 tax                  
1934:000 | DONE wsp | em 16  8 |        |             |
1935:000 | DONE ins | em 16  8 | 0055ae | 68          |                 pla                  retrieve number of bytes to transfer
1936:000 | DONE ins | em 16  8 | 0055af | 44 00 00    |                 mvp 0                
1936:001 | DONE ctl | em 16  8 |        |             |            
1937:000 | DONE wsp | em 16  8 |        |             |
1938:000 | DONE ins | em 16  8 | 0055b2 | a6 22       |                 ldx.d 000022         
1939:000 | DONE ins | em 16  8 | 0055b4 | b4 04       |                 ldy.dx 04            
1940:000 | DONE wsp | em 16  8 |        |             |
1941:000 | DONE ins | em 16  8 | 0055b6 | 8a          |                 txa                  It's worth addition for three cells dropped
1942:000 | DONE ins | em 16  8 | 0055b7 | 18          |                 clc                  
1943:000 | DONE ins | em 16  8 | 0055b8 | 69 06 00    |                 adc.# 0006           
1944:000 | DONE ins | em 16  8 | 0055bb | aa          |                 tax                  
1945:000 | DONE wsp | em 16  8 |        |             |
1946:000 | DONE lbl | em 16  8 | 0055bc |             | z_cmove                              
1946:001 | DONE ins | em 16  8 | 0055bc | 60          |                 rts                  
1947:000 | DONE wsp | em 16  8 |        |             |
1948:000 | DONE cmt | em 16  8 |        |             | ; -------------------------------------------------------------------
1949:000 | DONE cmt | em 16  8 |        |             | ; CMOVE> ( addr1 addr 2 u -- ) X bytes / X cycles
1950:000 | DONE cmt | em 16  8 |        |             | ; Move characters from a higher to a lower address. Because of the danger of
1951:000 | DONE cmt | em 16  8 |        |             | ; overlap, we must start at the beginning of the source (addr1) to copy it
1952:000 | DONE cmt | em 16  8 |        |             | ; byte-by-byte to the beginning of the destination (addr2). This is what the MVN
1953:000 | DONE cmt | em 16  8 |        |             | ; instruction is for. Use MOVE if you are not sure what to do.
1954:000 | DONE cmt | em 16  8 |        |             | ;          *==== source
1955:000 | DONE cmt | em 16  8 |        |             | ;       *===== destination
1956:000 | DONE lbl | em 16  8 | 0055bd |             | xt_cmoveup                           
1957:000 | DONE ins | em 16  8 | 0055bd | 86 22       |                 stx.d 000022         keep DSP safe
1958:000 | DONE wsp | em 16  8 |        |             |
1959:000 | DONE ins | em 16  8 | 0055bf | 88          |                 dey                  
1960:000 | DONE ins | em 16  8 | 0055c0 | 5a          |                 phy                  save number of bytes to transfer
1961:000 | DONE wsp | em 16  8 |        |             |
1962:000 | DONE ins | em 16  8 | 0055c1 | b5 00       |                 lda.dx 00            get destination address
1963:000 | DONE ins | em 16  8 | 0055c3 | a8          |                 tay                  
1964:000 | DONE wsp | em 16  8 |        |             |
1965:000 | DONE ins | em 16  8 | 0055c4 | b5 02       |                 lda.dx 02            get source address
1966:000 | DONE ins | em 16  8 | 0055c6 | aa          |                 tax                  
1967:000 | DONE wsp | em 16  8 |        |             |
1968:000 | DONE ins | em 16  8 | 0055c7 | 68          |                 pla                  retrieve number of bytes to transfer
1969:000 | DONE ins | em 16  8 | 0055c8 | 54 00 00    |                 mvn 0                
1969:001 | DONE ctl | em 16  8 |        |             |            
1970:000 | DONE wsp | em 16  8 |        |             |
1971:000 | DONE ins | em 16  8 | 0055cb | a6 22       |                 ldx.d 000022         
1972:000 | DONE ins | em 16  8 | 0055cd | b4 04       |                 ldy.dx 04            
1973:000 | DONE wsp | em 16  8 |        |             |
1974:000 | DONE ins | em 16  8 | 0055cf | 8a          |                 txa                  It's worth addition for three cells dropped
1975:000 | DONE ins | em 16  8 | 0055d0 | 18          |                 clc                  
1976:000 | DONE ins | em 16  8 | 0055d1 | 69 06 00    |                 adc.# 0006           
1977:000 | DONE ins | em 16  8 | 0055d4 | aa          |                 tax                  
1978:000 | DONE wsp | em 16  8 |        |             |
1979:000 | DONE lbl | em 16  8 | 0055d5 |             | z_cmoveup                            
1979:001 | DONE ins | em 16  8 | 0055d5 | 60          |                 rts                  
1980:000 | DONE wsp | em 16  8 |        |             |
1981:000 | DONE wsp | em 16  8 |        |             |
1982:000 | DONE cmt | em 16  8 |        |             | ; -------------------------------------------------------------------
1983:000 | DONE cmt | em 16  8 |        |             | ; COMPILE-ONLY ( -- ) 8 bytes / X cycles
1984:000 | DONE cmt | em 16  8 |        |             | ; Mark the most recently defined word as COMPILE-ONLY. The alternative (and
1985:000 | DONE cmt | em 16  8 |        |             | ; traditional) way to do this is to include a word ?COMPILE that makes sure
1986:000 | DONE cmt | em 16  8 |        |             | ; we're in compile mode
1987:000 | DONE lbl | em 16  8 | 0055d6 |             | xt_compile-only                      
1988:000 | DONE dir | em 16  8 |        |             |         .!a16                        
1989:000 | DONE ins | em 16  8 | 0055d6 | a9 04 00    |                 lda.# CO             
1990:000 | DONE ins | em 16  8 | 0055d9 | eb          |                 xba                  flags are MSB
1991:000 | DONE ins | em 16  8 | 0055da | 12 02       |                 ora.di 000002        ORA (DP)
1992:000 | DONE ins | em 16  8 | 0055dc | 92 02       |                 sta.di 000002        
1993:000 | DONE wsp | em 16  8 |        |             |
1994:000 | DONE lbl | em 16  8 | 0055de |             | z_compile-only                       
1994:001 | DONE ins | em 16  8 | 0055de | 60          |                 rts                  
1995:000 | DONE wsp | em 16  8 |        |             |
1996:000 | DONE wsp | em 16  8 |        |             |
1997:000 | DONE cmt | em 16  8 |        |             | ; -------------------------------------------------------------------
1998:000 | DONE cmt | em 16  8 |        |             | ; COMPILE, ( xt -- ) X bytes / X cycles
1999:000 | DONE cmt | em 16  8 |        |             | ; Compile a given xt in the current word definition. It is an error if we are
2000:000 | DONE cmt | em 16  8 |        |             | ; not in the compile state. Because we are using subroutine threading, we can't
2001:000 | DONE cmt | em 16  8 |        |             | ; use , (COMMA) to compile new words the traditional way. We use the NC (Native
2002:000 | DONE cmt | em 16  8 |        |             | ; Compile) flag to decide if native compilation is allowed. If yes, we use the
2003:000 | DONE cmt | em 16  8 |        |             | ; value NC_LIMIT (in definitions.tasm) to decide if the code is too large to be
2004:000 | DONE cmt | em 16  8 |        |             | ; natively coded: If the size is smaller than NC_LIMIT, we silently use
2005:000 | DONE cmt | em 16  8 |        |             | ; subroutine coding.
2006:000 | DONE cmt | em 16  8 |        |             | ; TODO currently just compiles subroutine jumps
2007:000 | DONE lbl | em 16  8 | 0055df |             | xt_compilecomma                      
2008:000 | DONE dir | em 16  8 |        |             |         .!a16                        
2009:000 | DONE wsp | em 16  8 |        |             |
2010:000 | DONE lbl | em 16  8 | 0055df |             | compile_as_code                      
2011:000 | DONE cmt | em 16  8 |        |             |                 ; Compile xt as native code
2012:000 | DONE cmt | em 16  8 |        |             |                 ; use nc_limit to decide if we want native compile
2013:000 | DONE cmt | em 16  8 |        |             |                 ; TODO consider special cases:
2014:000 | DONE cmt | em 16  8 |        |             |                 ;  - >R R> should strip PLA/PHA if native compiled
2015:000 | DONE cmt | em 16  8 |        |             |                 ;  - 2>R and 2R> should strip three first and last bytes
2016:000 | DONE cmt | em 16  8 |        |             |                 ;  - NOP should be removed if only instruction
2017:000 | DONE cmt | em 16  8 |        |             |                 ;  - Don't compile comments
2018:000 | DONE wsp | em 16  8 |        |             |
2019:000 | DONE lbl | em 16  8 | 0055df |             | compile_as_jump                      
2020:000 | DONE cmt | em 16  8 |        |             |                 ; Compile xt as a subroutine jump.
2021:000 | DONE ins | em 16  8 | 0055df | e2 20       |                 sep 20               
2021:001 | DONE ctl | em  8  8 |        |             |         .!a8
2022:000 | DONE ins | em  8  8 | 0055e1 | a9 20       |                 lda.# 20             opcode for JSR
2023:000 | DONE ins | em  8  8 | 0055e3 | 92 00       |                 sta.di 000000        STA (CP)
2024:000 | DONE ins | em  8  8 | 0055e5 | c2 20       |                 rep 20               
2024:001 | DONE ctl | em 16  8 |        |             |         .!a16
2025:000 | DONE ins | em 16  8 | 0055e7 | e6 00       |                 inc.d 000000         
2026:000 | DONE wsp | em 16  8 |        |             |
2027:000 | DONE cmt | em 16  8 |        |             |                 ; There is no "sty.di" instruction, so we have to do this the
2028:000 | DONE cmt | em 16  8 |        |             |                 ; hard way
2029:000 | DONE ins | em 16  8 | 0055e9 | 98          |                 tya                  
2030:000 | DONE ins | em 16  8 | 0055ea | 92 00       |                 sta.di 000000        
2031:000 | DONE ins | em 16  8 | 0055ec | e6 00       |                 inc.d 000000         
2032:000 | DONE ins | em 16  8 | 0055ee | e6 00       |                 inc.d 000000         
2033:000 | DONE wsp | em 16  8 |        |             |
2034:000 | DONE ins | em 16  8 | 0055f0 | b4 00       |                 ldy.dx 00            
2035:000 | DONE ins | em 16  8 | 0055f2 | e8          |                 inx                  
2036:000 | DONE ins | em 16  8 | 0055f3 | e8          |                 inx                  
2037:000 | DONE wsp | em 16  8 |        |             |
2038:000 | DONE lbl | em 16  8 | 0055f4 |             | z_compilecomma                       
2038:001 | DONE ins | em 16  8 | 0055f4 | 60          |                 rts                  
2039:000 | DONE wsp | em 16  8 |        |             |
2040:000 | DONE wsp | em 16  8 |        |             |
2041:000 | DONE cmt | em 16  8 |        |             | ; -------------------------------------------------------------------
2042:000 | DONE cmt | em 16  8 |        |             | ; CONSTANT ( "name" n -- ) X bytes / X cycles
2043:000 | DONE cmt | em 16  8 |        |             | ; Associate a fixed value with a word. This could be realized as
2044:000 | DONE cmt | em 16  8 |        |             | ; CREATE , DOES> @  as well. We do more in assembler but let CREATE do the heavy
2045:000 | DONE cmt | em 16  8 |        |             | ; lifting.
2046:000 | DONE cmt | em 16  8 |        |             | ; See http://www.bradrodriguez.com/papers/moving3.htm for a primer on how
2047:000 | DONE cmt | em 16  8 |        |             | ; this works in various Forths.
2048:000 | DONE lbl | em 16  8 | 0055f5 |             | xt_constant                          
2049:000 | DONE ins | em 16  8 | 0055f5 | 20 39 56    |                 jsr 005639           
2050:000 | DONE wsp | em 16  8 |        |             |
2051:000 | DONE cmt | em 16  8 |        |             |                 ; CREATE by default installs a subroutine jump to DOVAR, but we
2052:000 | DONE cmt | em 16  8 |        |             |                 ; actually want DOCONST this time. Go back two bytes and repace
2053:000 | DONE cmt | em 16  8 |        |             |                 ; the subroutine jump target
2054:000 | DONE ins | em 16  8 | 0055f8 | a5 00       |                 lda.d 000000         
2055:000 | DONE ins | em 16  8 | 0055fa | 3a          |                 dec.a                
2056:000 | DONE ins | em 16  8 | 0055fb | 3a          |                 dec.a                
2057:000 | DONE ins | em 16  8 | 0055fc | 85 1c       |                 sta.d 00001c         
2058:000 | DONE wsp | em 16  8 |        |             |
2059:000 | DONE ins | em 16  8 | 0055fe | a9 d6 66    |                 lda.# 0066d6         
2060:000 | DONE ins | em 16  8 | 005601 | 92 1c       |                 sta.di 00001c        STA (TMP1)
2061:000 | DONE wsp | em 16  8 |        |             |
2062:000 | DONE cmt | em 16  8 |        |             |                 ; Save TOS in next cell. This is a direct version of COMMA
2063:000 | DONE ins | em 16  8 | 005603 | 98          |                 tya                  there is no "sty.di cp"
2064:000 | DONE ins | em 16  8 | 005604 | 92 00       |                 sta.di 000000        
2065:000 | DONE ins | em 16  8 | 005606 | e6 00       |                 inc.d 000000         
2066:000 | DONE ins | em 16  8 | 005608 | e6 00       |                 inc.d 000000         
2067:000 | DONE wsp | em 16  8 |        |             |
2068:000 | DONE ins | em 16  8 | 00560a | b4 00       |                 ldy.dx 00            DROP
2069:000 | DONE ins | em 16  8 | 00560c | e8          |                 inx                  
2070:000 | DONE ins | em 16  8 | 00560d | e8          |                 inx                  drop through to adjust_z
2071:000 | DONE wsp | em 16  8 |        |             |
2072:000 | DONE cmt | em 16  8 |        |             |                 ; Now the length of the complete word (z_word) has increased by
2073:000 | DONE cmt | em 16  8 |        |             |                 ; two. We need to update that number or else words such as SEE
2074:000 | DONE cmt | em 16  8 |        |             |                 ; will ignore the PFA. We use this same routine for VARIABLE,
2075:000 | DONE cmt | em 16  8 |        |             |                 ; VALUE and DEFER
2076:000 | DONE lbl | em 16  8 | 00560e |             | adjust_z                             
2077:000 | DONE ins | em 16  8 | 00560e | 20 18 59    |                 jsr 005918           gives us ( nt )
2078:000 | DONE wsp | em 16  8 |        |             |
2079:000 | DONE cmt | em 16  8 |        |             |                 ; z_word is kept six bytes further down
2080:000 | DONE ins | em 16  8 | 005611 | 98          |                 tya                  
2081:000 | DONE ins | em 16  8 | 005612 | 18          |                 clc                  
2082:000 | DONE ins | em 16  8 | 005613 | 69 06 00    |                 adc.# 0006           
2083:000 | DONE ins | em 16  8 | 005616 | a8          |                 tay                  
2084:000 | DONE wsp | em 16  8 |        |             |
2085:000 | DONE ins | em 16  8 | 005617 | b9 00 00    |                 lda.y 0000           LDA 0000,Y
2086:000 | DONE ins | em 16  8 | 00561a | 1a          |                 inc.a                
2087:000 | DONE ins | em 16  8 | 00561b | 1a          |                 inc.a                
2088:000 | DONE ins | em 16  8 | 00561c | 99 00 00    |                 sta.y 0000           
2089:000 | DONE wsp | em 16  8 |        |             |
2090:000 | DONE ins | em 16  8 | 00561f | b4 00       |                 ldy.dx 00            get rid of nt
2091:000 | DONE ins | em 16  8 | 005621 | e8          |                 inx                  
2092:000 | DONE ins | em 16  8 | 005622 | e8          |                 inx                  
2093:000 | DONE wsp | em 16  8 |        |             |
2094:000 | DONE lbl | em 16  8 | 005623 |             | z_constant                           
2094:001 | DONE ins | em 16  8 | 005623 | 60          |                 rts                  
2095:000 | DONE wsp | em 16  8 |        |             |
2096:000 | DONE wsp | em 16  8 |        |             |
2097:000 | DONE cmt | em 16  8 |        |             | ; -------------------------------------------------------------------
2098:000 | DONE cmt | em 16  8 |        |             | ; COUNT ( c-addr -- addr u ) 14 bytes / X cycles
2099:000 | DONE cmt | em 16  8 |        |             | ; Convert old-style character string to address-length pair. Note that the
2100:000 | DONE cmt | em 16  8 |        |             | ; length of the string c-addr ist stored in character length (8 bit), not cell
2101:000 | DONE cmt | em 16  8 |        |             | ; length (16 bit). This is rarely used these days, though COUNT can also be used
2102:000 | DONE cmt | em 16  8 |        |             | ; to step through a string character by character.
2103:000 | DONE lbl | em 16  8 | 005624 |             | xt_count                             
2104:000 | DONE dir | em 16  8 |        |             |         .!a16                        
2105:000 | DONE dir | em 16 16 |        |             |         .!xy16                       
2106:000 | DONE ins | em 16 16 | 005624 | 98          |                 tya                  
2107:000 | DONE ins | em 16 16 | 005625 | 1a          |                 inc.a                String address starts one char later
2108:000 | DONE wsp | em 16 16 |        |             |
2109:000 | DONE ins | em 16 16 | 005626 | ca          |                 dex                  
2110:000 | DONE ins | em 16 16 | 005627 | ca          |                 dex                  
2111:000 | DONE ins | em 16 16 | 005628 | 95 00       |                 sta.dx 00            NOS
2112:000 | DONE wsp | em 16 16 |        |             |
2113:000 | DONE ins | em 16 16 | 00562a | b9 00 00    |                 lda.y 0000           LDA $0000,Y  first byte is length
2114:000 | DONE ins | em 16 16 | 00562d | eb          |                 xba                  move length to LSB
2115:000 | DONE ins | em 16 16 | 00562e | 29 ff 00    |                 and.# 00ff           get rid of whatever was MSB
2116:000 | DONE ins | em 16 16 | 005631 | a8          |                 tay                  TOS
2117:000 | DONE wsp | em 16 16 |        |             |
2118:000 | DONE lbl | em 16 16 | 005632 |             | z_count                              
2118:001 | DONE ins | em 16 16 | 005632 | 60          |                 rts                  
2119:000 | DONE wsp | em 16 16 |        |             |
2120:000 | DONE wsp | em 16 16 |        |             |
2121:000 | DONE cmt | em 16 16 |        |             | ; -------------------------------------------------------------------
2122:000 | DONE cmt | em 16 16 |        |             | ; CR ( -- ) X bytes / X cycles
2123:000 | DONE cmt | em 16 16 |        |             | ; Cause following output to appear at beginning of next line
2124:000 | DONE cmt | em 16 16 |        |             | ; TODO replace with EMIT
2125:000 | DONE lbl | em 16 16 | 005633 |             | xt_cr                                
2126:000 | DONE ins | em 16 16 | 005633 | a9 0a 00    |                 lda.# AscLF          test with AscCR for emulators
2127:000 | DONE ins | em 16 16 | 005636 | 6c 0e 00    |                 jmp.i 00000e         JSR/RTS
2128:000 | DONE wsp | em 16 16 |        |             |
2129:000 | DONE lbl | em 16 16 | 005639 |             | z_cr                                 ; never reached
2130:000 | DONE wsp | em 16 16 |        |             |
2131:000 | DONE cmt | em 16 16 |        |             | ; -------------------------------------------------------------------
2132:000 | DONE cmt | em 16 16 |        |             | ; CREATE ( "name" -- ) X bytes / X cycles
2133:000 | DONE cmt | em 16 16 |        |             | ; Create a Dictionary entry associated with "name", used for various words,
2134:000 | DONE cmt | em 16 16 |        |             | ; especially for VARIABLE. When called, this new word will return the associated
2135:000 | DONE cmt | em 16 16 |        |             | ; address.
2136:000 | DONE lbl | em 16 16 | 005639 |             | xt_create                            
2137:000 | DONE dir | em 16 16 |        |             |         .!a16                        
2138:000 | DONE ins | em 16 16 | 005639 | 20 c4 5a    |                 jsr 005ac4           ( -- addr u )
2139:000 | DONE ins | em 16 16 | 00563c | d0 06       |                 bne 005644           
2140:000 | DONE wsp | em 16 16 |        |             |
2141:000 | DONE cmt | em 16 16 |        |             |                 ; if we got a zero-length name string, complain and abort
2142:000 | DONE ins | em 16 16 | 00563e | a9 9f 6e    |                 lda.# 006e9f         
2143:000 | DONE ins | em 16 16 | 005641 | 4c 8c 67    |                 jmp 00678c           
2144:000 | DONE wsp | em 16 16 |        |             |
2145:000 | DONE lbl | em 16 16 | 005644 |             | create_got_name                      
2146:000 | DONE cmt | em 16 16 |        |             |                 ; Remember the first free byte of memory as the start of the new
2147:000 | DONE cmt | em 16 16 |        |             |                 ; word
2148:000 | DONE ins | em 16 16 | 005644 | a5 00       |                 lda.d 000000         
2149:000 | DONE ins | em 16 16 | 005646 | 85 1c       |                 sta.d 00001c         save start of new word
2150:000 | DONE wsp | em 16 16 |        |             |
2151:000 | DONE cmt | em 16 16 |        |             |                 ; Enforce limit on 255 char length names by masking the MSB
2152:000 | DONE cmt | em 16 16 |        |             |                 ; of the length of the given string. We arrive here with
2153:000 | DONE cmt | em 16 16 |        |             |                 ; ( addr u )
2154:000 | DONE ins | em 16 16 | 005648 | 98          |                 tya                  
2155:000 | DONE ins | em 16 16 | 005649 | 29 ff 00    |                 and.# 00ff           
2156:000 | DONE ins | em 16 16 | 00564c | 85 1e       |                 sta.d 00001e         save length of name string
2157:000 | DONE wsp | em 16 16 |        |             |
2158:000 | DONE cmt | em 16 16 |        |             |                 ; We need 8 bytes + the length of the name string for our new
2159:000 | DONE cmt | em 16 16 |        |             |                 ; header. This is also the offset for the start of the code
2160:000 | DONE cmt | em 16 16 |        |             |                 ; field (the xt_ label) so we need to remember it. Otherwise, we
2161:000 | DONE cmt | em 16 16 |        |             |                 ; could just allot the space afterwards.
2162:000 | DONE ins | em 16 16 | 00564e | 18          |                 clc                  
2163:000 | DONE ins | em 16 16 | 00564f | 69 08 00    |                 adc.# 0008           
2164:000 | DONE ins | em 16 16 | 005652 | 85 20       |                 sta.d 000020         total bytes required for header
2165:000 | DONE wsp | em 16 16 |        |             |
2166:000 | DONE cmt | em 16 16 |        |             |                 ; We need to allocate three more bytes for the hardcoded
2167:000 | DONE cmt | em 16 16 |        |             |                 ; code field area (CFA), the "payload" of the word which by
2168:000 | DONE cmt | em 16 16 |        |             |                 ; default will be a subroutine jump to DOVAR
2169:000 | DONE ins | em 16 16 | 005654 | 1a          |                 inc.a                
2170:000 | DONE ins | em 16 16 | 005655 | 1a          |                 inc.a                
2171:000 | DONE ins | em 16 16 | 005656 | 1a          |                 inc.a                
2172:000 | DONE wsp | em 16 16 |        |             |
2173:000 | DONE cmt | em 16 16 |        |             |                 ; Instead of jumping to ALLOT, we do things by hand for speed
2174:000 | DONE cmt | em 16 16 |        |             |                 ; and so we don't have to fool around with the stack
2175:000 | DONE ins | em 16 16 | 005657 | 18          |                 clc                  
2176:000 | DONE ins | em 16 16 | 005658 | 65 00       |                 adc.d 000000         
2177:000 | DONE ins | em 16 16 | 00565a | 85 00       |                 sta.d 000000         
2178:000 | DONE wsp | em 16 16 |        |             |
2179:000 | DONE cmt | em 16 16 |        |             |                 ; Now we walk through the header, using Y as the index. See
2180:000 | DONE cmt | em 16 16 |        |             |                 ; drawing of header in headers.tasm file for reference. We
2181:000 | DONE cmt | em 16 16 |        |             |                 ; arrive here with ( addr u ) still from PARSE-NAME. We need
2182:000 | DONE cmt | em 16 16 |        |             |                 ; that addr later for the name string, so we push it to the
2183:000 | DONE cmt | em 16 16 |        |             |                 ; Return Stack. We'll clean up the Data Stack later
2184:000 | DONE ins | em 16 16 | 00565c | b5 00       |                 lda.dx 00            
2185:000 | DONE ins | em 16 16 | 00565e | 48          |                 pha                  
2186:000 | DONE wsp | em 16 16 |        |             |
2187:000 | DONE cmt | em 16 16 |        |             |                 ; HEADER BYTES 0,1: Length byte and flags
2188:000 | DONE ins | em 16 16 | 00565f | a0 00 00    |                 ldy.# 0000           Y is now an index, not TOS
2189:000 | DONE ins | em 16 16 | 005662 | a5 1e       |                 lda.d 00001e         get length byte
2190:000 | DONE ins | em 16 16 | 005664 | 91 1c       |                 sta.diy 00001c       STA (TMP1),Y
2191:000 | DONE ins | em 16 16 | 005666 | c8          |                 iny                  
2192:000 | DONE ins | em 16 16 | 005667 | c8          |                 iny                  
2193:000 | DONE wsp | em 16 16 |        |             |
2194:000 | DONE cmt | em 16 16 |        |             |                 ; BYTES 2,3: Next word in the dictionary (its nt). This is the
2195:000 | DONE cmt | em 16 16 |        |             |                 ; current Dictionary Pointer
2196:000 | DONE ins | em 16 16 | 005668 | a5 02       |                 lda.d 000002         
2197:000 | DONE ins | em 16 16 | 00566a | 91 1c       |                 sta.diy 00001c       
2198:000 | DONE ins | em 16 16 | 00566c | c8          |                 iny                  
2199:000 | DONE ins | em 16 16 | 00566d | c8          |                 iny                  
2200:000 | DONE wsp | em 16 16 |        |             |
2201:000 | DONE cmt | em 16 16 |        |             |                 ; BYTES 4,5: Start of code field (xt of this word, "xt_" link)
2202:000 | DONE cmt | em 16 16 |        |             |                 ; This begins after the header, so we take the length of the
2203:000 | DONE cmt | em 16 16 |        |             |                 ; header, which we saved in tmp3, and use it as an offset to
2204:000 | DONE cmt | em 16 16 |        |             |                 ; the address of the start of the word
2205:000 | DONE ins | em 16 16 | 00566e | a5 1c       |                 lda.d 00001c         can't use CP, because we've allotted space
2206:000 | DONE ins | em 16 16 | 005670 | 85 02       |                 sta.d 000002         while we've got it, make old CP the new DP
2207:000 | DONE wsp | em 16 16 |        |             |
2208:000 | DONE ins | em 16 16 | 005672 | 18          |                 clc                  
2209:000 | DONE ins | em 16 16 | 005673 | 65 20       |                 adc.d 000020         total header length
2210:000 | DONE ins | em 16 16 | 005675 | 91 1c       |                 sta.diy 00001c       
2211:000 | DONE ins | em 16 16 | 005677 | c8          |                 iny                  
2212:000 | DONE ins | em 16 16 | 005678 | c8          |                 iny                  
2213:000 | DONE wsp | em 16 16 |        |             |
2214:000 | DONE cmt | em 16 16 |        |             |                 ; BYTES 6,7: End of code ("z_" link)
2215:000 | DONE cmt | em 16 16 |        |             |                 ; By default, we execute a jump to the DOVAR routine, so we need
2216:000 | DONE cmt | em 16 16 |        |             |                 ; to move three bytes down, and then one more byte so the z_
2217:000 | DONE cmt | em 16 16 |        |             |                 ; label points to the (fictional) RTS instruction for correct
2218:000 | DONE cmt | em 16 16 |        |             |                 ; compilation. The start of the code field is still in A
2219:000 | DONE ins | em 16 16 | 005679 | 1a          |                 inc.a                
2220:000 | DONE ins | em 16 16 | 00567a | 1a          |                 inc.a                
2221:000 | DONE ins | em 16 16 | 00567b | 1a          |                 inc.a                
2222:000 | DONE ins | em 16 16 | 00567c | 91 1c       |                 sta.diy 00001c       
2223:000 | DONE ins | em 16 16 | 00567e | c8          |                 iny                  
2224:000 | DONE ins | em 16 16 | 00567f | c8          |                 iny                  
2225:000 | DONE wsp | em 16 16 |        |             |
2226:000 | DONE cmt | em 16 16 |        |             |                 ; BYTE 8: Start of name string
2227:000 | DONE cmt | em 16 16 |        |             |                 ; The addr of the string is on the Return Stack, the length of
2228:000 | DONE cmt | em 16 16 |        |             |                 ; the name string is in tmp2. We subtract eight from the address
2229:000 | DONE cmt | em 16 16 |        |             |                 ; so we can use the same loop index
2230:000 | DONE ins | em 16 16 | 005680 | 68          |                 pla                  get back string address
2231:000 | DONE ins | em 16 16 | 005681 | 38          |                 sec                  
2232:000 | DONE ins | em 16 16 | 005682 | e9 08 00    |                 sbc.# 0008           
2233:000 | DONE ins | em 16 16 | 005685 | 85 20       |                 sta.d 000020         
2234:000 | DONE ins | em 16 16 | 005687 | e2 20       |                 sep 20               
2234:001 | DONE ctl | em  8 16 |        |             |         .!a8
2235:000 | DONE lbl | em  8 16 | 005689 |             | @                                    
2236:000 | DONE ins | em  8 16 | 005689 | b1 20       |                 lda.diy 000020       
2237:000 | DONE ins | em  8 16 | 00568b | 91 1c       |                 sta.diy 00001c       
2238:000 | DONE ins | em  8 16 | 00568d | c8          |                 iny                  
2239:000 | DONE ins | em  8 16 | 00568e | c6 1e       |                 dec.d 00001e         
2240:000 | DONE ins | em  8 16 | 005690 | d0 f7       |                 bne 005689           
2241:000 | DONE wsp | em  8 16 |        |             |
2242:000 | DONE cmt | em  8 16 |        |             |                 ; After the name string, comes the Code Field (start at xt, that
2243:000 | DONE cmt | em  8 16 |        |             |                 ; is, the xt_ label of the word) which is initially a jump to the
2244:000 | DONE cmt | em  8 16 |        |             |                 ; subroutine to DOVAR. We're still in 8-bit A-register, which is
2245:000 | DONE cmt | em  8 16 |        |             |                 ; good
2246:000 | DONE ins | em  8 16 | 005692 | a9 20       |                 lda.# 20             opcode of JSR
2247:000 | DONE ins | em  8 16 | 005694 | 91 1c       |                 sta.diy 00001c       
2248:000 | DONE ins | em  8 16 | 005696 | c8          |                 iny                  single increase only because we have 8-bit A
2249:000 | DONE wsp | em  8 16 |        |             |
2250:000 | DONE ins | em  8 16 | 005697 | a9 00       |                 lda.# .lsb 006700    
2251:000 | DONE ins | em  8 16 | 005699 | 91 1c       |                 sta.diy 00001c       
2252:000 | DONE ins | em  8 16 | 00569b | c8          |                 iny                  
2253:000 | DONE wsp | em  8 16 |        |             |
2254:000 | DONE ins | em  8 16 | 00569c | a9 67       |                 lda.# .msb 006700    
2255:000 | DONE ins | em  8 16 | 00569e | 91 1c       |                 sta.diy 00001c       
2256:000 | DONE wsp | em  8 16 |        |             |
2257:000 | DONE ins | em  8 16 | 0056a0 | c2 20       |                 rep 20               
2257:001 | DONE ctl | em 16 16 |        |             |         .!a16
2258:000 | DONE cmt | em 16 16 |        |             |                 ; We're done. Restore Data Stack (2DROP)
2259:000 | DONE ins | em 16 16 | 0056a2 | b4 02       |                 ldy.dx 02            
2260:000 | DONE ins | em 16 16 | 0056a4 | e8          |                 inx                  
2261:000 | DONE ins | em 16 16 | 0056a5 | e8          |                 inx                  
2262:000 | DONE ins | em 16 16 | 0056a6 | e8          |                 inx                  
2263:000 | DONE ins | em 16 16 | 0056a7 | e8          |                 inx                  
2264:000 | DONE wsp | em 16 16 |        |             |
2265:000 | DONE lbl | em 16 16 | 0056a8 |             | z_create                             
2265:001 | DONE ins | em 16 16 | 0056a8 | 60          |                 rts                  
2266:000 | DONE wsp | em 16 16 |        |             |
2267:000 | DONE wsp | em 16 16 |        |             |
2268:000 | DONE cmt | em 16 16 |        |             | ; -------------------------------------------------------------------
2269:000 | DONE cmt | em 16 16 |        |             | ; DEFER ( "name" -- ) X bytes / X cycles
2270:000 | DONE cmt | em 16 16 |        |             | ; Reserve an name that can be linked to various xt by IS. The ANSI reference
2271:000 | DONE cmt | em 16 16 |        |             | ; implementation is CREATE ['] ABORT , DOES> @ EXECUTE ; but we use this as
2272:000 | DONE cmt | em 16 16 |        |             | ; a low-level word so we can set stuff up earlier and faster
2273:000 | DONE lbl | em 16 16 | 0056a9 |             | xt_defer                             
2274:000 | DONE ins | em 16 16 | 0056a9 | 20 39 56    |                 jsr 005639           
2275:000 | DONE wsp | em 16 16 |        |             |
2276:000 | DONE cmt | em 16 16 |        |             |                 ; CREATE by default installs a subroutine jump to DOVAR, but we
2277:000 | DONE cmt | em 16 16 |        |             |                 ; actually want DODEFER this time. Go back two bytes and repace
2278:000 | DONE cmt | em 16 16 |        |             |                 ; the subroutine jump target
2279:000 | DONE ins | em 16 16 | 0056ac | a5 00       |                 lda.d 000000         
2280:000 | DONE ins | em 16 16 | 0056ae | 3a          |                 dec.a                
2281:000 | DONE ins | em 16 16 | 0056af | 3a          |                 dec.a                
2282:000 | DONE ins | em 16 16 | 0056b0 | 85 1c       |                 sta.d 00001c         
2283:000 | DONE wsp | em 16 16 |        |             |
2284:000 | DONE ins | em 16 16 | 0056b2 | a9 e4 66    |                 lda.# 0066e4         
2285:000 | DONE ins | em 16 16 | 0056b5 | 92 1c       |                 sta.di 00001c        STA (TMP1)
2286:000 | DONE wsp | em 16 16 |        |             |
2287:000 | DONE cmt | em 16 16 |        |             |                 ; DODEFER executes the next address it finds after its call. As
2288:000 | DONE cmt | em 16 16 |        |             |                 ; a default, we include the error "Defer not defined"
2289:000 | DONE ins | em 16 16 | 0056b7 | a9 ed 66    |                 lda.# 0066ed         
2290:000 | DONE ins | em 16 16 | 0056ba | 92 00       |                 sta.di 000000        
2291:000 | DONE ins | em 16 16 | 0056bc | e6 00       |                 inc.d 000000         
2292:000 | DONE ins | em 16 16 | 0056be | e6 00       |                 inc.d 000000         
2293:000 | DONE wsp | em 16 16 |        |             |
2294:000 | DONE ins | em 16 16 | 0056c0 | 4c 0e 56    |                 jmp 00560e           adjust the header to the correct length
2295:000 | DONE wsp | em 16 16 |        |             |
2296:000 | DONE lbl | em 16 16 | 0056c3 |             | z_defer                              ; never reached
2297:000 | DONE wsp | em 16 16 |        |             |
2298:000 | DONE wsp | em 16 16 |        |             |
2299:000 | DONE cmt | em 16 16 |        |             | ; -------------------------------------------------------------------
2300:000 | DONE cmt | em 16 16 |        |             | ; DIGIT? ( char -- u f | char f )  X bytes / X cycles
2301:000 | DONE cmt | em 16 16 |        |             | ; Convert a single ASCII character to a number in the current radix. Inspired by
2302:000 | DONE cmt | em 16 16 |        |             | ; the pForth instruction DIGIT in pForth, see
2303:000 | DONE cmt | em 16 16 |        |             | ; https://github.com/philburk/pforth/blob/master/fth/numberio.fth
2304:000 | DONE cmt | em 16 16 |        |             | ; Rewritten from DIGIT>NUMBER in Tali Forth. Note in contrast to pForth, we get
2305:000 | DONE cmt | em 16 16 |        |             | ; the base (radix) ourselves instead of having the user provide it. There is no
2306:000 | DONE cmt | em 16 16 |        |             | ; standard name for this routine, which itself is not ANSI; we use DIGIT?
2307:000 | DONE cmt | em 16 16 |        |             | ; following pForth and Gforth.
2308:000 | DONE lbl | em 16 16 | 0056c3 |             | xt_digitq                            
2309:000 | DONE dir | em 16 16 |        |             |         .!a16                        
2310:000 | DONE ins | em 16 16 | 0056c3 | 98          |                 tya                  
2311:000 | DONE ins | em 16 16 | 0056c4 | 29 ff 00    |                 and.# 00ff           paranoid
2312:000 | DONE wsp | em 16 16 |        |             |
2313:000 | DONE ins | em 16 16 | 0056c7 | e2 20       |                 sep 20               
2313:001 | DONE ctl | em  8 16 |        |             |         .!a8
2314:000 | DONE cmt | em  8 16 |        |             |                 ; Make sure we're not below the ASCII code for '0'
2315:000 | DONE ins | em  8 16 | 0056c9 | c9 30       |                 cmp.# 30             
2316:000 | DONE ins | em  8 16 | 0056cb | 90 1d       |                 bcc 0056ea           
2317:000 | DONE wsp | em  8 16 |        |             |
2318:000 | DONE cmt | em  8 16 |        |             |                 ; Then see if we are below '9', because that would make this
2319:000 | DONE cmt | em  8 16 |        |             |                 ; a normal number
2320:000 | DONE ins | em  8 16 | 0056cd | c9 3a       |                 cmp.# 00003a         This is ':'
2321:000 | DONE ins | em  8 16 | 0056cf | 90 12       |                 bcc 0056e3           
2322:000 | DONE wsp | em  8 16 |        |             |
2323:000 | DONE cmt | em  8 16 |        |             |                 ; Well, then let's see if this is the gap between '9' and 'A' so
2324:000 | DONE cmt | em  8 16 |        |             |                 ; we can treat the whole range as a number
2325:000 | DONE ins | em  8 16 | 0056d1 | c9 40       |                 cmp.# 000040         This is '@'
2326:000 | DONE ins | em  8 16 | 0056d3 | 90 15       |                 bcc 0056ea           
2327:000 | DONE wsp | em  8 16 |        |             |
2328:000 | DONE cmt | em  8 16 |        |             |                 ; Probably a letter, so we make sure it is uppercase
2329:000 | DONE ins | em  8 16 | 0056d5 | c9 61       |                 cmp.# 61             
2330:000 | DONE ins | em  8 16 | 0056d7 | 90 07       |                 bcc 0056e0           not lower case, too low
2331:000 | DONE ins | em  8 16 | 0056d9 | c9 7b       |                 cmp.# 00007b         
2332:000 | DONE ins | em  8 16 | 0056db | b0 03       |                 bcs 0056e0           not lower case, too high
2333:000 | DONE wsp | em  8 16 |        |             |
2334:000 | DONE ins | em  8 16 | 0056dd | 18          |                 clc                  just right
2335:000 | DONE ins | em  8 16 | 0056de | 69 e0       |                 adc.# e0             offset to uppercase (wraps)
2336:000 | DONE wsp | em  8 16 |        |             |
2337:000 | DONE lbl | em  8 16 | 0056e0 |             | dq_case_done                         
2338:000 | DONE cmt | em  8 16 |        |             |                 ; Get rid of the gap between '9' and 'A' so we can treat the
2339:000 | DONE cmt | em  8 16 |        |             |                 ; whole range as one number
2340:000 | DONE ins | em  8 16 | 0056e0 | 38          |                 sec                  
2341:000 | DONE ins | em  8 16 | 0056e1 | e9 07       |                 sbc.# 07             fall through to dq_checkbase
2342:000 | DONE wsp | em  8 16 |        |             |
2343:000 | DONE lbl | em  8 16 | 0056e3 |             | dq_checkbase                         
2344:000 | DONE cmt | em  8 16 |        |             |                 ; We have a number, now see if it inside the range given by BASE
2345:000 | DONE ins | em  8 16 | 0056e3 | 38          |                 sec                  
2346:000 | DONE ins | em  8 16 | 0056e4 | e9 30       |                 sbc.# 30             This is also the actual conversion step
2347:000 | DONE ins | em  8 16 | 0056e6 | c5 16       |                 cmp.d 000016         
2348:000 | DONE ins | em  8 16 | 0056e8 | 90 0b       |                 bcc 0056f5           
2349:000 | DONE wsp | em  8 16 |        |             |
2350:000 | DONE lbl | em  8 16 | 0056ea |             | dq_notdigit                          
2351:000 | DONE cmt | em  8 16 |        |             |                 ; not a digit, add a false flag
2352:000 | DONE ins | em  8 16 | 0056ea | ca          |                 dex                  
2353:000 | DONE ins | em  8 16 | 0056eb | ca          |                 dex                  
2354:000 | DONE ins | em  8 16 | 0056ec | 94 00       |                 sty.dx 00            keep the offending character in NOS
2355:000 | DONE ins | em  8 16 | 0056ee | a0 00 00    |                 ldy.# 0000           
2356:000 | DONE ins | em  8 16 | 0056f1 | c2 20       |                 rep 20               
2356:001 | DONE ctl | em 16 16 |        |             |         .!a16
2357:000 | DONE ins | em 16 16 | 0056f3 | 80 09       |                 bra 0056fe           
2358:000 | DONE wsp | em 16 16 |        |             |
2359:000 | DONE lbl | em 16 16 | 0056f5 |             | dq_success                           
2360:000 | DONE ins | em 16 16 | 0056f5 | ca          |                 dex                  
2361:000 | DONE ins | em 16 16 | 0056f6 | ca          |                 dex                  
2362:000 | DONE ins | em 16 16 | 0056f7 | c2 20       |                 rep 20               
2362:001 | DONE ctl | em 16 16 |        |             |         .!a16
2363:000 | DONE ins | em 16 16 | 0056f9 | 95 00       |                 sta.dx 00            put the number in NOS
2364:000 | DONE ins | em 16 16 | 0056fb | a0 ff ff    |                 ldy.# 0ffff          
2365:000 | DONE wsp | em 16 16 |        |             |
2366:000 | DONE lbl | em 16 16 | 0056fe |             | z_digitq                             
2366:001 | DONE ins | em 16 16 | 0056fe | 60          |                 rts                  
2367:000 | DONE wsp | em 16 16 |        |             |
2368:000 | DONE wsp | em 16 16 |        |             |
2369:000 | DONE cmt | em 16 16 |        |             | ; -------------------------------------------------------------------
2370:000 | DONE cmt | em 16 16 |        |             | ; DPLUS ( d d -- d ) X bytes / X cycles
2371:000 | DONE cmt | em 16 16 |        |             | ; Add two double cell numbers
2372:000 | DONE lbl | em 16 16 | 0056ff |             | xt_dplus                             
2373:000 | DONE dir | em 16 16 |        |             |         .!a16                        
2374:000 | DONE ins | em 16 16 | 0056ff | 5a          |                 phy                  save hi word of first number, frees Y
2375:000 | DONE ins | em 16 16 | 005700 | b5 00       |                 lda.dx 00            lo word of first number
2376:000 | DONE ins | em 16 16 | 005702 | 18          |                 clc                  
2377:000 | DONE ins | em 16 16 | 005703 | 75 04       |                 adc.dx 04            add lo word of second number
2378:000 | DONE ins | em 16 16 | 005705 | a8          |                 tay                  
2379:000 | DONE wsp | em 16 16 |        |             |
2380:000 | DONE ins | em 16 16 | 005706 | 68          |                 pla                  get hi word of first number
2381:000 | DONE ins | em 16 16 | 005707 | 75 02       |                 adc.dx 02            add hi word of second number
2382:000 | DONE wsp | em 16 16 |        |             |
2383:000 | DONE ins | em 16 16 | 005709 | e8          |                 inx                  
2384:000 | DONE ins | em 16 16 | 00570a | e8          |                 inx                  
2385:000 | DONE ins | em 16 16 | 00570b | e8          |                 inx                  
2386:000 | DONE ins | em 16 16 | 00570c | e8          |                 inx                  
2387:000 | DONE wsp | em 16 16 |        |             |
2388:000 | DONE ins | em 16 16 | 00570d | 94 00       |                 sty.dx 00            lo result goes NOS
2389:000 | DONE ins | em 16 16 | 00570f | a8          |                 tay                  to result goes TOS
2390:000 | DONE wsp | em 16 16 |        |             |
2391:000 | DONE lbl | em 16 16 | 005710 |             | z_dplus                              
2391:001 | DONE ins | em 16 16 | 005710 | 60          |                 rts                  
2392:000 | DONE wsp | em 16 16 |        |             |
2393:000 | DONE cmt | em 16 16 |        |             | ; -------------------------------------------------------------------
2394:000 | DONE cmt | em 16 16 |        |             | ; DMINUS ( d d -- d ) X bytes / X cycles
2395:000 | DONE cmt | em 16 16 |        |             | ; Subtract two double cell numbers
2396:000 | DONE lbl | em 16 16 | 005711 |             | xt_dminus                            
2397:000 | DONE dir | em 16 16 |        |             |         .!a16                        
2398:000 | DONE ins | em 16 16 | 005711 | b5 04       |                 lda.dx 04            lo word NOS
2399:000 | DONE ins | em 16 16 | 005713 | 38          |                 sec                  
2400:000 | DONE ins | em 16 16 | 005714 | f5 00       |                 sbc.dx 00            lo word TOS
2401:000 | DONE ins | em 16 16 | 005716 | 48          |                 pha                  
2402:000 | DONE wsp | em 16 16 |        |             |
2403:000 | DONE ins | em 16 16 | 005717 | 94 00       |                 sty.dx 00            use as temp storage for hi word TOS
2404:000 | DONE ins | em 16 16 | 005719 | b5 02       |                 lda.dx 02            hi word, NOS
2405:000 | DONE ins | em 16 16 | 00571b | f5 00       |                 sbc.dx 00            hi word, TOS
2406:000 | DONE ins | em 16 16 | 00571d | a8          |                 tay                  result hi word now TOS
2407:000 | DONE wsp | em 16 16 |        |             |
2408:000 | DONE ins | em 16 16 | 00571e | e8          |                 inx                  
2409:000 | DONE ins | em 16 16 | 00571f | e8          |                 inx                  
2410:000 | DONE ins | em 16 16 | 005720 | e8          |                 inx                  
2411:000 | DONE ins | em 16 16 | 005721 | e8          |                 inx                  
2412:000 | DONE wsp | em 16 16 |        |             |
2413:000 | DONE ins | em 16 16 | 005722 | 68          |                 pla                  
2414:000 | DONE ins | em 16 16 | 005723 | 95 00       |                 sta.dx 00            result lo word now NOS
2415:000 | DONE wsp | em 16 16 |        |             |
2416:000 | DONE lbl | em 16 16 | 005725 |             | z_dminus                             
2416:001 | DONE ins | em 16 16 | 005725 | 60          |                 rts                  
2417:000 | DONE wsp | em 16 16 |        |             |
2418:000 | DONE wsp | em 16 16 |        |             |
2419:000 | DONE cmt | em 16 16 |        |             | ; -------------------------------------------------------------------
2420:000 | DONE cmt | em 16 16 |        |             | ; D>S ( ud -- u ) X bytes / X cycles
2421:000 | DONE cmt | em 16 16 |        |             | ; Convert double cell number to single cell. Note this currently does not
2422:000 | DONE cmt | em 16 16 |        |             | ; respect the sign, in constrast to Gforth - this is simply DROP
2423:000 | DONE cmt | em 16 16 |        |             | ; TODO make this work the way Gforth's does
2424:000 | DONE lbl | em 16 16 | 005726 |             | xt_dtos                              
2425:000 | DONE dir | em 16 16 |        |             |         .!a16                        
2426:000 | DONE ins | em 16 16 | 005726 | b4 00       |                 ldy.dx 00            
2427:000 | DONE ins | em 16 16 | 005728 | e8          |                 inx                  
2428:000 | DONE ins | em 16 16 | 005729 | e8          |                 inx                  
2429:000 | DONE wsp | em 16 16 |        |             |
2430:000 | DONE lbl | em 16 16 | 00572a |             | z_dtos                               
2430:001 | DONE ins | em 16 16 | 00572a | 60          |                 rts                  
2431:000 | DONE wsp | em 16 16 |        |             |
2432:000 | DONE wsp | em 16 16 |        |             |
2433:000 | DONE cmt | em 16 16 |        |             | ; -------------------------------------------------------------------
2434:000 | DONE cmt | em 16 16 |        |             | ; DABS ( d -- ud ) X bytes / X cycles
2435:000 | DONE cmt | em 16 16 |        |             | ; Return the absolute value of a double number
2436:000 | DONE cmt | em 16 16 |        |             | ; TODO recode in assembler
2437:000 | DONE lbl | em 16 16 | 00572b |             | xt_dabs                              
2438:000 | DONE cmt | em 16 16 |        |             |                 ; double cell is TOS
2439:000 | DONE ins | em 16 16 | 00572b | 98          |                 tya                  force flag test
2440:000 | DONE ins | em 16 16 | 00572c | f0 03       |                 beq 005731           already positive, life is good
2441:000 | DONE wsp | em 16 16 |        |             |
2442:000 | DONE ins | em 16 16 | 00572e | 20 47 57    |                 jsr 005747           
2443:000 | DONE wsp | em 16 16 |        |             |
2444:000 | DONE lbl | em 16 16 | 005731 |             | z_dabs                               
2444:001 | DONE ins | em 16 16 | 005731 | 60          |                 rts                  
2445:000 | DONE wsp | em 16 16 |        |             |
2446:000 | DONE wsp | em 16 16 |        |             |
2447:000 | DONE cmt | em 16 16 |        |             | ; -------------------------------------------------------------------
2448:000 | DONE cmt | em 16 16 |        |             | ; DECIMAL ( -- ) 7 bytes / X cycles
2449:000 | DONE cmt | em 16 16 |        |             | ; Change radix for number conversion to 10
2450:000 | DONE lbl | em 16 16 | 005732 |             | xt_decimal                           
2451:000 | DONE dir | em 16 16 |        |             |         .!a16                        
2452:000 | DONE ins | em 16 16 | 005732 | a9 0a 00    |                 lda.# 000a           
2453:000 | DONE ins | em 16 16 | 005735 | 85 16       |                 sta.d 000016         
2454:000 | DONE wsp | em 16 16 |        |             |
2455:000 | DONE lbl | em 16 16 | 005737 |             | z_decimal                            
2455:001 | DONE ins | em 16 16 | 005737 | 60          |                 rts                  
2456:000 | DONE wsp | em 16 16 |        |             |
2457:000 | DONE wsp | em 16 16 |        |             |
2458:000 | DONE cmt | em 16 16 |        |             | ; -------------------------------------------------------------------
2459:000 | DONE cmt | em 16 16 |        |             | ; DEPTH ( -- u ) 14 bytes / X cycles
2460:000 | DONE cmt | em 16 16 |        |             | ; Push the number of entries in cells (not bytes) on the parameter stack.
2461:000 | DONE cmt | em 16 16 |        |             | ; Assumes X is valid as the DSP.
2462:000 | DONE lbl | em 16 16 | 005738 |             | xt_depth                             
2463:000 | DONE dir | em 16 16 |        |             |         .!a16                        
2464:000 | DONE cmt | em 16 16 |        |             |                 ; We've got zero entries when X is dsp0
2465:000 | DONE ins | em 16 16 | 005738 | 86 22       |                 stx.d 000022         
2466:000 | DONE ins | em 16 16 | 00573a | a9 ff 00    |                 lda.# 0000ff         
2467:000 | DONE ins | em 16 16 | 00573d | 38          |                 sec                  
2468:000 | DONE ins | em 16 16 | 00573e | e5 22       |                 sbc.d 000022         
2469:000 | DONE wsp | em 16 16 |        |             |
2470:000 | DONE cmt | em 16 16 |        |             |                 ; now divide by two because each cells is to bytes long
2471:000 | DONE ins | em 16 16 | 005740 | 4a          |                 lsr.a                
2472:000 | DONE wsp | em 16 16 |        |             |
2473:000 | DONE ins | em 16 16 | 005741 | ca          |                 dex                  
2474:000 | DONE ins | em 16 16 | 005742 | ca          |                 dex                  
2475:000 | DONE ins | em 16 16 | 005743 | 94 00       |                 sty.dx 00            
2476:000 | DONE wsp | em 16 16 |        |             |
2477:000 | DONE cmt | em 16 16 |        |             |                 ; push result to stack
2478:000 | DONE ins | em 16 16 | 005745 | a8          |                 tay                  
2479:000 | DONE wsp | em 16 16 |        |             |
2480:000 | DONE lbl | em 16 16 | 005746 |             | z_depth                              
2480:001 | DONE ins | em 16 16 | 005746 | 60          |                 rts                  
2481:000 | DONE wsp | em 16 16 |        |             |
2482:000 | DONE cmt | em 16 16 |        |             | ; -------------------------------------------------------------------
2483:000 | DONE cmt | em 16 16 |        |             | ; DNEGATE ( d -- d ) 19 bytes / X cycles
2484:000 | DONE cmt | em 16 16 |        |             | ; Change the sign of a double number. This is the double equivalent of NEGATE
2485:000 | DONE lbl | em 16 16 | 005747 |             | xt_dnegate                           
2486:000 | DONE dir | em 16 16 |        |             |         .!a16                        
2487:000 | DONE cmt | em 16 16 |        |             |                 ; start off with LSW (in NOS)
2488:000 | DONE ins | em 16 16 | 005747 | b5 00       |                 lda.dx 00            
2489:000 | DONE ins | em 16 16 | 005749 | 49 ff ff    |                 eor.# 0ffff          
2490:000 | DONE wsp | em 16 16 |        |             |
2491:000 | DONE cmt | em 16 16 |        |             |                 ; INC doesn't affect the carry flag, so we have to do this the
2492:000 | DONE cmt | em 16 16 |        |             |                 ; hard way
2493:000 | DONE ins | em 16 16 | 00574c | 18          |                 clc                  
2494:000 | DONE ins | em 16 16 | 00574d | 69 01 00    |                 adc.# 0001           
2495:000 | DONE ins | em 16 16 | 005750 | 95 00       |                 sta.dx 00            
2496:000 | DONE wsp | em 16 16 |        |             |
2497:000 | DONE cmt | em 16 16 |        |             |                 ; now MSW (in TOS)
2498:000 | DONE ins | em 16 16 | 005752 | 98          |                 tya                  
2499:000 | DONE ins | em 16 16 | 005753 | 49 ff ff    |                 eor.# 0ffff          
2500:000 | DONE ins | em 16 16 | 005756 | 69 00 00    |                 adc.# 0000           we are only interested in the carry
2501:000 | DONE ins | em 16 16 | 005759 | a8          |                 tay                  
2502:000 | DONE wsp | em 16 16 |        |             |
2503:000 | DONE lbl | em 16 16 | 00575a |             | z_dnegate                            
2503:001 | DONE ins | em 16 16 | 00575a | 60          |                 rts                  
2504:000 | DONE wsp | em 16 16 |        |             |
2505:000 | DONE wsp | em 16 16 |        |             |
2506:000 | DONE cmt | em 16 16 |        |             | ; -------------------------------------------------------------------
2507:000 | DONE cmt | em 16 16 |        |             | ; DOES> ( -- ) X bytes / X cycles
2508:000 | DONE cmt | em 16 16 |        |             | ; Create the payload for defining new defining words. See the file
2509:000 | DONE cmt | em 16 16 |        |             | ; docs/create-does.txt and
2510:000 | DONE cmt | em 16 16 |        |             | ; http://www.bradrodriguez.com/papers/moving3.htm for a discussion of
2511:000 | DONE cmt | em 16 16 |        |             | ; DOES>'s internal workings. This uses tmp1 and tmp2
2512:000 | DONE cmt | em 16 16 |        |             | ; TODO see if this creates a correct z_word address
2513:000 | DONE lbl | em 16 16 | 00575b |             | xt_does                              
2514:000 | DONE cmt | em 16 16 |        |             |                 ; compile a subroutine jump to the runtime of DOES>
2515:000 | DONE ins | em 16 16 | 00575b | f4 68 57    |                 phe.# 005768         
2516:000 | DONE ins | em 16 16 | 00575e | 20 6b 67    |                 jsr 00676b           
2517:000 | DONE wsp | em 16 16 |        |             |
2518:000 | DONE cmt | em 16 16 |        |             |                 ; compile a subroutine jump to DODOES. In traditional terms,
2519:000 | DONE cmt | em 16 16 |        |             |                 ; this is the Code Field Area (CFA) of the new word
2520:000 | DONE ins | em 16 16 | 005761 | f4 f3 66    |                 phe.# 0066f3         
2521:000 | DONE ins | em 16 16 | 005764 | 20 6b 67    |                 jsr 00676b           
2522:000 | DONE wsp | em 16 16 |        |             |
2523:000 | DONE lbl | em 16 16 | 005767 |             | z_does                               
2523:001 | DONE ins | em 16 16 | 005767 | 60          |                 rts                  
2524:000 | DONE wsp | em 16 16 |        |             |
2525:000 | DONE lbl | em 16 16 | 005768 |             | does_rt                              
2526:000 | DONE cmt | em 16 16 |        |             |                 ; Runtime portion of DOES>. This replaces the subroutine jump to
2527:000 | DONE cmt | em 16 16 |        |             |                 ; DOVAR that CREATE automatically encodes by a jump to the
2528:000 | DONE cmt | em 16 16 |        |             |                 ; address that contains a subroutine jump to DODOES. We don't
2529:000 | DONE cmt | em 16 16 |        |             |                 ; jump to DODOES directly because we need to work our magic with
2530:000 | DONE cmt | em 16 16 |        |             |                 ; the return addresses
2531:000 | DONE ins | em 16 16 | 005768 | 68          |                 pla                  
2532:000 | DONE ins | em 16 16 | 005769 | 1a          |                 inc.a                increase by one because of RTS mechanics
2533:000 | DONE ins | em 16 16 | 00576a | 85 1c       |                 sta.d 00001c         
2534:000 | DONE wsp | em 16 16 |        |             |
2535:000 | DONE cmt | em 16 16 |        |             |                 ; CREATE has also already modified the DP to point to the new
2536:000 | DONE cmt | em 16 16 |        |             |                 ; word. We have no idea which instructions followed the CREATE
2537:000 | DONE cmt | em 16 16 |        |             |                 ; command if there is a DOES> so the CP could point anywhere by
2538:000 | DONE cmt | em 16 16 |        |             |                 ; now.
2539:000 | DONE ins | em 16 16 | 00576c | a5 02       |                 lda.d 000002         
2540:000 | DONE wsp | em 16 16 |        |             |
2541:000 | DONE cmt | em 16 16 |        |             |                 ; The address of the word's xt is four bytes down (see
2542:000 | DONE cmt | em 16 16 |        |             |                 ; header.tasm for details).
2543:000 | DONE ins | em 16 16 | 00576e | 18          |                 clc                  
2544:000 | DONE ins | em 16 16 | 00576f | 69 04 00    |                 adc.# 0004           
2545:000 | DONE ins | em 16 16 | 005772 | 85 1e       |                 sta.d 00001e         
2546:000 | DONE wsp | em 16 16 |        |             |
2547:000 | DONE cmt | em 16 16 |        |             |                 ; Now we get that address and add one byte to skip over the JSR
2548:000 | DONE cmt | em 16 16 |        |             |                 ; opcode
2549:000 | DONE ins | em 16 16 | 005774 | b2 1e       |                 lda.di 00001e        LDA (TMP2)
2550:000 | DONE ins | em 16 16 | 005776 | 1a          |                 inc.a                
2551:000 | DONE ins | em 16 16 | 005777 | 85 1e       |                 sta.d 00001e         Points to address to be replaced
2552:000 | DONE wsp | em 16 16 |        |             |
2553:000 | DONE cmt | em 16 16 |        |             |                 ; Replace the DOVAR address
2554:000 | DONE ins | em 16 16 | 005779 | a5 1c       |                 lda.d 00001c         
2555:000 | DONE ins | em 16 16 | 00577b | 92 1e       |                 sta.di 00001e        STA (TMP2)
2556:000 | DONE wsp | em 16 16 |        |             |
2557:000 | DONE cmt | em 16 16 |        |             |                 ; Since we removed the return address that brought us here, we
2558:000 | DONE cmt | em 16 16 |        |             |                 ; go back to whatever the main routine was. Otherwise, we we
2559:000 | DONE cmt | em 16 16 |        |             |                 ; smash into the subroutine jump to DODOES.
2560:000 | DONE ins | em 16 16 | 00577d | 60          |                 rts                  
2561:000 | DONE wsp | em 16 16 |        |             |
2562:000 | DONE wsp | em 16 16 |        |             |
2563:000 | DONE cmt | em 16 16 |        |             | ; -------------------------------------------------------------------
2564:000 | DONE cmt | em 16 16 |        |             | ; DROP ( n -- ) 4 bytes / 9 cycles
2565:000 | DONE cmt | em 16 16 |        |             | ; Drop first entry on Data Stack
2566:000 | DONE wsp | em 16 16 |        |             |
2567:000 | DONE lbl | em 16 16 | 00577e |             | xt_drop                              
2568:000 | DONE dir | em 16 16 |        |             |         .!xy16                       
2569:000 | DONE ins | em 16 16 | 00577e | b4 00       |                 ldy.dx 00            
2570:000 | DONE ins | em 16 16 | 005780 | e8          |                 inx                  
2571:000 | DONE ins | em 16 16 | 005781 | e8          |                 inx                  
2572:000 | DONE wsp | em 16 16 |        |             |
2573:000 | DONE lbl | em 16 16 | 005782 |             | z_drop                               
2573:001 | DONE ins | em 16 16 | 005782 | 60          |                 rts                  
2574:000 | DONE wsp | em 16 16 |        |             |
2575:000 | DONE wsp | em 16 16 |        |             |
2576:000 | DONE cmt | em 16 16 |        |             | ; -------------------------------------------------------------------
2577:000 | DONE cmt | em 16 16 |        |             | ; DUMP ( addr u -- ) X bytes / X cycles
2578:000 | DONE cmt | em 16 16 |        |             | ; Print region of memory in a pretty way.
2579:000 | DONE cmt | em 16 16 |        |             | ; TODO This is a crude, temporary version for testing. Rewrite ASAP
2580:000 | DONE lbl | em 16 16 | 005783 |             | xt_dump                              
2581:000 | DONE cmt | em 16 16 |        |             |                 ; we use tmp1 as a counter because we need Y for other
2582:000 | DONE cmt | em 16 16 |        |             |                 ; stuff
2583:000 | DONE ins | em 16 16 | 005783 | 84 1c       |                 sty.d 00001c         
2584:000 | DONE wsp | em 16 16 |        |             |
2585:000 | DONE lbl | em 16 16 | 005785 |             | dump_line_loop                       
2586:000 | DONE ins | em 16 16 | 005785 | 20 33 56    |                 jsr 005633           
2587:000 | DONE wsp | em 16 16 |        |             |
2588:000 | DONE cmt | em 16 16 |        |             |                 ; start internal counter for 16 numbers per row
2589:000 | DONE ins | em 16 16 | 005788 | a0 10 00    |                 ldy.# 0010           
2590:000 | DONE lbl | em 16 16 | 00578b |             | dump_byte_loop                       
2591:000 | DONE cmt | em 16 16 |        |             |                 ; if there are zero bytes left to display, we're done
2592:000 | DONE ins | em 16 16 | 00578b | a5 1c       |                 lda.d 00001c         
2593:000 | DONE ins | em 16 16 | 00578d | f0 11       |                 beq 0057a0           
2594:000 | DONE wsp | em 16 16 |        |             |
2595:000 | DONE cmt | em 16 16 |        |             |                 ; otherwise, print contents pointed to by address in NOS
2596:000 | DONE ins | em 16 16 | 00578f | a1 00       |                 lda.dxi 00           
2597:000 | DONE ins | em 16 16 | 005791 | 20 aa 67    |                 jsr 0067aa           TODO replace by EMIT
2598:000 | DONE ins | em 16 16 | 005794 | 20 f3 5c    |                 jsr 005cf3           
2599:000 | DONE wsp | em 16 16 |        |             |
2600:000 | DONE cmt | em 16 16 |        |             |                 ; next character
2601:000 | DONE ins | em 16 16 | 005797 | f6 00       |                 inc.dx 00            
2602:000 | DONE wsp | em 16 16 |        |             |
2603:000 | DONE cmt | em 16 16 |        |             |                 ; loop counter
2604:000 | DONE ins | em 16 16 | 005799 | c6 1c       |                 dec.d 00001c         
2605:000 | DONE ins | em 16 16 | 00579b | 88          |                 dey                  
2606:000 | DONE ins | em 16 16 | 00579c | d0 ed       |                 bne 00578b           
2607:000 | DONE ins | em 16 16 | 00579e | 80 e5       |                 bra 005785           
2608:000 | DONE wsp | em 16 16 |        |             |
2609:000 | DONE lbl | em 16 16 | 0057a0 |             | dump_done                            
2610:000 | DONE ins | em 16 16 | 0057a0 | 20 33 56    |                 jsr 005633           
2611:000 | DONE wsp | em 16 16 |        |             |
2612:000 | DONE cmt | em 16 16 |        |             |                 ; drop everything and return
2613:000 | DONE cmt | em 16 16 |        |             |                 ; TODO replace by call of 2DROP
2614:000 | DONE ins | em 16 16 | 0057a3 | b4 02       |                 ldy.dx 02            
2615:000 | DONE ins | em 16 16 | 0057a5 | e8          |                 inx                  
2616:000 | DONE ins | em 16 16 | 0057a6 | e8          |                 inx                  
2617:000 | DONE ins | em 16 16 | 0057a7 | e8          |                 inx                  
2618:000 | DONE ins | em 16 16 | 0057a8 | e8          |                 inx                  
2619:000 | DONE wsp | em 16 16 |        |             |
2620:000 | DONE lbl | em 16 16 | 0057a9 |             | z_dump                               
2620:001 | DONE ins | em 16 16 | 0057a9 | 60          |                 rts                  
2621:000 | DONE wsp | em 16 16 |        |             |
2622:000 | DONE wsp | em 16 16 |        |             |
2623:000 | DONE cmt | em 16 16 |        |             | ; -------------------------------------------------------------------
2624:000 | DONE cmt | em 16 16 |        |             | ; DUP  ( n -- n n ) 4 bytes / 9 cycles
2625:000 | DONE cmt | em 16 16 |        |             | ; Duplicate first entry on Data Stack
2626:000 | DONE lbl | em 16 16 | 0057aa |             | xt_dup                               
2627:000 | DONE dir | em 16 16 |        |             |         .!xy16                       
2628:000 | DONE ins | em 16 16 | 0057aa | ca          |                 dex                  
2629:000 | DONE ins | em 16 16 | 0057ab | ca          |                 dex                  
2630:000 | DONE ins | em 16 16 | 0057ac | 94 00       |                 sty.dx 00            
2631:000 | DONE wsp | em 16 16 |        |             |
2632:000 | DONE lbl | em 16 16 | 0057ae |             | z_dup                                
2632:001 | DONE ins | em 16 16 | 0057ae | 60          |                 rts                  
2633:000 | DONE wsp | em 16 16 |        |             |
2634:000 | DONE cmt | em 16 16 |        |             | ; -------------------------------------------------------------------
2635:000 | DONE cmt | em 16 16 |        |             | ; EMIT ( char -- ) X bytes / X cycles
2636:000 | DONE cmt | em 16 16 |        |             | ; Run-time default for EMIT. The user can revector this by changing the value of
2637:000 | DONE cmt | em 16 16 |        |             | ; the OUTPUT variable. We ignore the MSB completely, and do not check to see if
2638:000 | DONE cmt | em 16 16 |        |             | ; we have been given a valid ASCII character.
2639:000 | DONE lbl | em 16 16 | 0057af |             | xt_emit                              
2640:000 | DONE dir | em 16 16 |        |             |         .!a16                        
2641:000 | DONE cmt | em 16 16 |        |             |                 ; we put the value in A so we don't have to switch the XY
2642:000 | DONE cmt | em 16 16 |        |             |                 ; register size
2643:000 | DONE ins | em 16 16 | 0057af | 98          |                 tya                  
2644:000 | DONE wsp | em 16 16 |        |             |
2645:000 | DONE cmt | em 16 16 |        |             |                 ; we DROP immediately so we can JMP.I to the output routine and
2646:000 | DONE cmt | em 16 16 |        |             |                 ; can use its RTS to take us back to the caller
2647:000 | DONE ins | em 16 16 | 0057b0 | b4 00       |                 ldy.dx 00            
2648:000 | DONE ins | em 16 16 | 0057b2 | e8          |                 inx                  
2649:000 | DONE ins | em 16 16 | 0057b3 | e8          |                 inx                  
2650:000 | DONE lbl | em 16 16 | 0057b4 |             | emit_a                               
2651:000 | DONE cmt | em 16 16 |        |             |                 ; Lots of times we want to print the character in A without
2652:000 | DONE cmt | em 16 16 |        |             |                 ; fooling around with the Data Stack. EMIT_A assumes a 16 bit
2653:000 | DONE cmt | em 16 16 |        |             |                 ; wide A register with the character in LSB and does not touch
2654:000 | DONE cmt | em 16 16 |        |             |                 ; the Data Stack, but can still be vectored via OUTPUT. Call it
2655:000 | DONE cmt | em 16 16 |        |             |                 ; with JSR as you would XT_EMIT
2656:000 | DONE ins | em 16 16 | 0057b4 | e2 20       |                 sep 20               
2656:001 | DONE ctl | em  8 16 |        |             |         .!a8
2657:000 | DONE ins | em  8 16 | 0057b6 | 6c 0e 00    |                 jmp.i 00000e         call to kernel, JSR/RTS
2658:000 | DONE wsp | em  8 16 |        |             |
2659:000 | DONE lbl | em  8 16 | 0057b9 |             | z_emit                               ; never reached
2660:000 | DONE wsp | em  8 16 |        |             |
2661:000 | DONE wsp | em  8 16 |        |             |
2662:000 | DONE cmt | em  8 16 |        |             | ; -------------------------------------------------------------------
2663:000 | DONE cmt | em  8 16 |        |             | ; ERASE ( addr u -- ) X bytes / X cycles
2664:000 | DONE cmt | em  8 16 |        |             | ; Set a region of memory to zero. Uses tmp2
2665:000 | DONE lbl | em  8 16 | 0057b9 |             | xt_erase                             
2666:000 | DONE dir | em 16 16 |        |             |         .!a16                        
2667:000 | DONE ins | em 16 16 | 0057b9 | ca          |                 dex                  
2668:000 | DONE ins | em 16 16 | 0057ba | ca          |                 dex                  
2669:000 | DONE ins | em 16 16 | 0057bb | 94 00       |                 sty.dx 00            
2670:000 | DONE wsp | em 16 16 |        |             |
2671:000 | DONE ins | em 16 16 | 0057bd | a0 00 00    |                 ldy.# 0000           falls through to FILL
2672:000 | DONE wsp | em 16 16 |        |             |
2673:000 | DONE cmt | em 16 16 |        |             | ; -------------------------------------------------------------------
2674:000 | DONE cmt | em 16 16 |        |             | ; FILL ( addr u b -- ) X bytes / X cycles
2675:000 | DONE cmt | em 16 16 |        |             | ; Fill the given region of memory with the LSB of the TOS. Shares code with
2676:000 | DONE cmt | em 16 16 |        |             | ; ERASE
2677:000 | DONE lbl | em 16 16 | 0057c0 |             | xt_fill                              
2678:000 | DONE ins | em 16 16 | 0057c0 | b5 02       |                 lda.dx 02            address is 3OS
2679:000 | DONE ins | em 16 16 | 0057c2 | 85 1e       |                 sta.d 00001e         
2680:000 | DONE wsp | em 16 16 |        |             |
2681:000 | DONE ins | em 16 16 | 0057c4 | 98          |                 tya                  
2682:000 | DONE ins | em 16 16 | 0057c5 | b4 00       |                 ldy.dx 00            don't bother with drop, to it later
2683:000 | DONE ins | em 16 16 | 0057c7 | e2 20       |                 sep 20               
2683:001 | DONE ctl | em  8 16 |        |             |         .!a8
2684:000 | DONE lbl | em  8 16 | 0057c9 |             | erase_loop                           
2685:000 | DONE ins | em  8 16 | 0057c9 | 88          |                 dey                  
2686:000 | DONE ins | em  8 16 | 0057ca | 30 04       |                 bmi 0057d0           
2687:000 | DONE wsp | em  8 16 |        |             |
2688:000 | DONE ins | em  8 16 | 0057cc | 91 1e       |                 sta.diy 00001e       
2689:000 | DONE ins | em  8 16 | 0057ce | 80 f9       |                 bra 0057c9           
2690:000 | DONE wsp | em  8 16 |        |             |
2691:000 | DONE lbl | em  8 16 | 0057d0 |             | erase_done                           
2692:000 | DONE ins | em  8 16 | 0057d0 | c2 20       |                 rep 20               
2692:001 | DONE ctl | em 16 16 |        |             |         .!a16
2693:000 | DONE ins | em 16 16 | 0057d2 | b4 02       |                 ldy.dx 02            dump three elements off the sack
2694:000 | DONE ins | em 16 16 | 0057d4 | 8a          |                 txa                  
2695:000 | DONE ins | em 16 16 | 0057d5 | 18          |                 clc                  
2696:000 | DONE ins | em 16 16 | 0057d6 | 69 06 00    |                 adc.# 0006           
2697:000 | DONE ins | em 16 16 | 0057d9 | aa          |                 tax                  
2698:000 | DONE lbl | em 16 16 | 0057da |             | z_fill                               
2699:000 | DONE lbl | em 16 16 | 0057da |             | z_erase                              
2699:001 | DONE ins | em 16 16 | 0057da | 60          |                 rts                  
2700:000 | DONE wsp | em 16 16 |        |             |
2701:000 | DONE wsp | em 16 16 |        |             |
2702:000 | DONE cmt | em 16 16 |        |             | ; -------------------------------------------------------------------
2703:000 | DONE cmt | em 16 16 |        |             | ; EVALUATE ( addr u -- ) X bytes / X cycles
2704:000 | DONE cmt | em 16 16 |        |             | ; Execute string. Set SOURCE-ID to -1, make addr u the input source,
2705:000 | DONE cmt | em 16 16 |        |             | ; set >IN to zero. After processing the line, revert to old input source.
2706:000 | DONE lbl | em 16 16 | 0057db |             | xt_evaluate                          
2707:000 | DONE cmt | em 16 16 |        |             |                 ; We follow pforth's procedure of pushing SOURCE, SOURCE-ID, and
2708:000 | DONE cmt | em 16 16 |        |             |                 ; >IN to the Return Stack
2709:000 | DONE ins | em 16 16 | 0057db | a5 0c       |                 lda.d 00000c         >IN
2710:000 | DONE ins | em 16 16 | 0057dd | 48          |                 pha                  
2711:000 | DONE ins | em 16 16 | 0057de | a5 06       |                 lda.d 000006         Input Source (SOURCE-ID)
2712:000 | DONE ins | em 16 16 | 0057e0 | 48          |                 pha                  
2713:000 | DONE ins | em 16 16 | 0057e1 | a5 08       |                 lda.d 000008         
2714:000 | DONE ins | em 16 16 | 0057e3 | 48          |                 pha                  
2715:000 | DONE ins | em 16 16 | 0057e4 | a5 0a       |                 lda.d 00000a         
2716:000 | DONE ins | em 16 16 | 0057e6 | 48          |                 pha                  
2717:000 | DONE wsp | em 16 16 |        |             |
2718:000 | DONE cmt | em 16 16 |        |             |                 ; set SOURCE-ID to -1
2719:000 | DONE ins | em 16 16 | 0057e7 | a9 ff ff    |                 lda.# 0ffff          
2720:000 | DONE ins | em 16 16 | 0057ea | 85 06       |                 sta.d 000006         
2721:000 | DONE wsp | em 16 16 |        |             |
2722:000 | DONE cmt | em 16 16 |        |             |                 ; set >IN to zero
2723:000 | DONE ins | em 16 16 | 0057ec | 64 0c       |                 stz.d 00000c         
2724:000 | DONE wsp | em 16 16 |        |             |
2725:000 | DONE cmt | em 16 16 |        |             |                 ; move TOS and NOS to input buffers
2726:000 | DONE ins | em 16 16 | 0057ee | 84 0a       |                 sty.d 00000a         
2727:000 | DONE ins | em 16 16 | 0057f0 | b5 00       |                 lda.dx 00            
2728:000 | DONE ins | em 16 16 | 0057f2 | 85 08       |                 sta.d 000008         
2729:000 | DONE wsp | em 16 16 |        |             |
2730:000 | DONE cmt | em 16 16 |        |             |                 ; dump address string from stack
2731:000 | DONE ins | em 16 16 | 0057f4 | b4 02       |                 ldy.dx 02            
2732:000 | DONE ins | em 16 16 | 0057f6 | e8          |                 inx                  
2733:000 | DONE ins | em 16 16 | 0057f7 | e8          |                 inx                  
2734:000 | DONE ins | em 16 16 | 0057f8 | e8          |                 inx                  
2735:000 | DONE ins | em 16 16 | 0057f9 | e8          |                 inx                  
2736:000 | DONE wsp | em 16 16 |        |             |
2737:000 | DONE ins | em 16 16 | 0057fa | 20 07 67    |                 jsr 006707           
2738:000 | DONE wsp | em 16 16 |        |             |
2739:000 | DONE cmt | em 16 16 |        |             |                 ; restore state from before evaluate
2740:000 | DONE ins | em 16 16 | 0057fd | 68          |                 pla                  
2741:000 | DONE ins | em 16 16 | 0057fe | 85 0a       |                 sta.d 00000a         
2742:000 | DONE ins | em 16 16 | 005800 | 68          |                 pla                  
2743:000 | DONE ins | em 16 16 | 005801 | 85 08       |                 sta.d 000008         
2744:000 | DONE ins | em 16 16 | 005803 | 68          |                 pla                  
2745:000 | DONE ins | em 16 16 | 005804 | 85 06       |                 sta.d 000006         
2746:000 | DONE ins | em 16 16 | 005806 | 68          |                 pla                  
2747:000 | DONE ins | em 16 16 | 005807 | 85 0c       |                 sta.d 00000c         
2748:000 | DONE wsp | em 16 16 |        |             |
2749:000 | DONE lbl | em 16 16 | 005809 |             | z_evaluate                           
2749:001 | DONE ins | em 16 16 | 005809 | 60          |                 rts                  
2750:000 | DONE wsp | em 16 16 |        |             |
2751:000 | DONE wsp | em 16 16 |        |             |
2752:000 | DONE cmt | em 16 16 |        |             | ; -------------------------------------------------------------------
2753:000 | DONE cmt | em 16 16 |        |             | ; EXECUTE ( xt -- ) X bytes / X cycles
2754:000 | DONE cmt | em 16 16 |        |             | ; Run a word with help of its xt on the TOS
2755:000 | DONE wsp | em 16 16 |        |             |
2756:000 | DONE cmt | em 16 16 |        |             | ; Reserve three bytes for the jump - three in case we want to expand to the full
2757:000 | DONE cmt | em 16 16 |        |             | ; range
2758:000 | DONE cmt | em 16 16 |        |             | ; TODO move this to someplace that is assured to be RAM, not possibly ROM
2759:000 | DONE lbl | em 16 16 | 00580a |             | execute_ip                           
2759:001 | DONE dir | em 16 16 | 00580a | (3 bytes)   |         .byte 00, 00, 00             
2759:001 | DONE dir | em 16 16 |        |             |                 00 00 00                 --  . . .
2760:000 | DONE wsp | em 16 16 |        |             |
2761:000 | DONE lbl | em 16 16 | 00580d |             | xt_execute                           
2762:000 | DONE dir | em 16 16 |        |             |         .!a16                        
2763:000 | DONE dir | em 16 16 |        |             |         .!xy16                       
2764:000 | DONE cmt | em 16 16 |        |             |                 ; Store the xt for later use and then drop it off the stack
2765:000 | DONE ins | em 16 16 | 00580d | 8c 0a 58    |                 sty 00580a           
2766:000 | DONE ins | em 16 16 | 005810 | b4 00       |                 ldy.dx 00            
2767:000 | DONE ins | em 16 16 | 005812 | e8          |                 inx                  
2768:000 | DONE ins | em 16 16 | 005813 | e8          |                 inx                  
2769:000 | DONE wsp | em 16 16 |        |             |
2770:000 | DONE cmt | em 16 16 |        |             |                 ; Only JMP has the addressing mode we need. All our Forth
2771:000 | DONE cmt | em 16 16 |        |             |                 ; words end with a RTS instruction, so they will take us back to
2772:000 | DONE cmt | em 16 16 |        |             |                 ; the original caller of this routine without us having to muck
2773:000 | DONE cmt | em 16 16 |        |             |                 ; about with the Return Stack.
2774:000 | DONE ins | em 16 16 | 005814 | 6c 0a 58    |                 jmp.i 00580a         JMP (EXECUTE_IP)
2775:000 | DONE wsp | em 16 16 |        |             |
2776:000 | DONE lbl | em 16 16 | 005817 |             | z_execute                            ; empty, no RTS required
2777:000 | DONE wsp | em 16 16 |        |             |
2778:000 | DONE wsp | em 16 16 |        |             |
2779:000 | DONE cmt | em 16 16 |        |             | ; -------------------------------------------------------------------
2780:000 | DONE cmt | em 16 16 |        |             | ; FALSE ( -- f ) 7 bytes / 12 cycles
2781:000 | DONE cmt | em 16 16 |        |             | ; Pushes value $0000 for Forth true on Data Stack. This is the same code as for
2782:000 | DONE cmt | em 16 16 |        |             | ; ZERO, see there. Dictionary entry should have xt_zero/z_zero instead of
2783:000 | DONE cmt | em 16 16 |        |             | ; xt_false/z_false
2784:000 | DONE wsp | em 16 16 |        |             |
2785:000 | DONE cmt | em 16 16 |        |             | ; -------------------------------------------------------------------
2786:000 | DONE cmt | em 16 16 |        |             | ; FIND-NAME ( addr u -- nt | 0 ) 91 bytes / X cycles
2787:000 | DONE cmt | em 16 16 |        |             | ; Given a string, find the Name Token (nt) of a word or return zero if the word
2788:000 | DONE cmt | em 16 16 |        |             | ; is not in the dictionary. We use this instead of ancient FIND to look up words
2789:000 | DONE cmt | em 16 16 |        |             | ; in the Dictionary passed by PARSE-NAME. Note this returns the nt, not the xt
2790:000 | DONE cmt | em 16 16 |        |             | ; of a word like FIND. To convert, use NAME>INT. This is a Gforth word. See
2791:000 | DONE cmt | em 16 16 |        |             | ; https://www.complang.tuwien.ac.at/forth/gforth/Docs-html/Name-token.html
2792:000 | DONE cmt | em 16 16 |        |             | ; FIND calls this word for the hard word
2793:000 | DONE lbl | em 16 16 | 005817 |             | xt_find-name                         
2794:000 | DONE cmt | em 16 16 |        |             |                 ; We abort when we get an empty string, that is, one with
2795:000 | DONE cmt | em 16 16 |        |             |                 ; a length of zero TOS. We could test for this, but it will
2796:000 | DONE cmt | em 16 16 |        |             |                 ; happen so rarely that the speed penalty is higher if we run
2797:000 | DONE cmt | em 16 16 |        |             |                 ; the test for every single call. Looking for an empty string
2798:000 | DONE cmt | em 16 16 |        |             |                 ; does force us to check the whole dictionary, though. The test
2799:000 | DONE cmt | em 16 16 |        |             |                 ; would be 3 bytes and 4 to 6 cycles longer:
2800:000 | DONE cmt | em 16 16 |        |             |                 ;       tya                     ; force flag check
2801:000 | DONE cmt | em 16 16 |        |             |                 ;       beq find-name_failure
2802:000 | DONE dir | em 16 16 |        |             |         .!a16                        
2803:000 | DONE dir | em 16 16 |        |             |         .!xy16                       
2804:000 | DONE cmt | em 16 16 |        |             |                 ; set up loop for the first time
2805:000 | DONE ins | em 16 16 | 005817 | 84 24       |                 sty.d 000024         length of mystery string in tmptos, Y now free
2806:000 | DONE wsp | em 16 16 |        |             |
2807:000 | DONE ins | em 16 16 | 005819 | a4 02       |                 ldy.d 000002         
2808:000 | DONE ins | em 16 16 | 00581b | 84 1c       |                 sty.d 00001c         nt of first Dictionary word
2809:000 | DONE wsp | em 16 16 |        |             |
2810:000 | DONE ins | em 16 16 | 00581d | b4 00       |                 ldy.dx 00            
2811:000 | DONE ins | em 16 16 | 00581f | 84 1e       |                 sty.d 00001e         address of mystery string, was NOS
2812:000 | DONE wsp | em 16 16 |        |             |
2813:000 | DONE lbl | em 16 16 | 005821 |             | find-name_loop                       
2814:000 | DONE cmt | em 16 16 |        |             |                 ; First quick test: Are strings the same length?
2815:000 | DONE ins | em 16 16 | 005821 | b2 1c       |                 lda.di 00001c        LSB in first header word is length
2816:000 | DONE ins | em 16 16 | 005823 | 29 ff 00    |                 and.# 00ff           
2817:000 | DONE ins | em 16 16 | 005826 | c5 24       |                 cmp.d 000024         we test LSB
2818:000 | DONE cmt | em 16 16 |        |             |                 ; Most of the time, it will not be the same, so we save one
2819:000 | DONE cmt | em 16 16 |        |             |                 ; cycle pro loop if we only take the branch when they are the
2820:000 | DONE cmt | em 16 16 |        |             |                 ; same
2821:000 | DONE ins | em 16 16 | 005828 | f0 0c       |                 beq 005836           
2822:000 | DONE wsp | em 16 16 |        |             |
2823:000 | DONE lbl | em 16 16 | 00582a |             | find-name_next_entry                 
2824:000 | DONE cmt | em 16 16 |        |             |                 ; next header address is two bytes down
2825:000 | DONE ins | em 16 16 | 00582a | e6 1c       |                 inc.d 00001c         
2826:000 | DONE ins | em 16 16 | 00582c | e6 1c       |                 inc.d 00001c         
2827:000 | DONE ins | em 16 16 | 00582e | b2 1c       |                 lda.di 00001c        LDA (TMP1)
2828:000 | DONE wsp | em 16 16 |        |             |
2829:000 | DONE cmt | em 16 16 |        |             |                 ; a zero entry marks the end of the Dictionary
2830:000 | DONE ins | em 16 16 | 005830 | f0 36       |                 beq 005868           
2831:000 | DONE wsp | em 16 16 |        |             |
2832:000 | DONE ins | em 16 16 | 005832 | 85 1c       |                 sta.d 00001c         new header
2833:000 | DONE ins | em 16 16 | 005834 | 80 eb       |                 bra 005821           
2834:000 | DONE wsp | em 16 16 |        |             |
2835:000 | DONE lbl | em 16 16 | 005836 |             | find-name_chars                      
2836:000 | DONE cmt | em 16 16 |        |             |                 ; Yes, same length, so we compare characters
2837:000 | DONE wsp | em 16 16 |        |             |
2838:000 | DONE cmt | em 16 16 |        |             |                 ; Switch A to 8 bit for this
2839:000 | DONE ins | em 16 16 | 005836 | e2 20       |                 sep 20               
2839:001 | DONE ctl | em  8 16 |        |             |         .!a8
2840:000 | DONE cmt | em  8 16 |        |             |                 ; Second quick test: Check first char, which is 8 bytes into the
2841:000 | DONE cmt | em  8 16 |        |             |                 ; header
2842:000 | DONE ins | em  8 16 | 005838 | a0 08 00    |                 ldy.# 0008           
2843:000 | DONE ins | em  8 16 | 00583b | b1 1c       |                 lda.diy 00001c       LDA (TMP1),Y - first char of entry
2844:000 | DONE ins | em  8 16 | 00583d | d2 1e       |                 cmp.di 00001e        CMP (TMP2) - first char of mystery string
2845:000 | DONE ins | em  8 16 | 00583f | f0 04       |                 beq 005845           
2846:000 | DONE wsp | em  8 16 |        |             |
2847:000 | DONE lbl | em  8 16 | 005841 |             | find-name_char_nomatcnt_8            
2848:000 | DONE cmt | em  8 16 |        |             |                 ; First char is not the same, next entry
2849:000 | DONE ins | em  8 16 | 005841 | c2 20       |                 rep 20               
2849:001 | DONE ctl | em 16 16 |        |             |         .!a16
2850:000 | DONE ins | em 16 16 | 005843 | 80 e5       |                 bra 00582a           
2851:000 | DONE wsp | em 16 16 |        |             |
2852:000 | DONE lbl | em 16 16 | 005845 |             | find-name_all_chars                  
2853:000 | DONE dir | em  8 16 |        |             |         .!a8                         
2854:000 | DONE cmt | em  8 16 |        |             |                 ; String length is the same, and the first character is the
2855:000 | DONE cmt | em  8 16 |        |             |                 ; same. If the word is only one character long, we're done
2856:000 | DONE ins | em  8 16 | 005845 | a4 24       |                 ldy.d 000024         
2857:000 | DONE ins | em  8 16 | 005847 | 88          |                 dey                  faster and shorter than CPY.# 01
2858:000 | DONE ins | em  8 16 | 005848 | f0 18       |                 beq 005862           
2859:000 | DONE wsp | em  8 16 |        |             |
2860:000 | DONE cmt | em  8 16 |        |             |                 ; No such luck: The strings are the same length and the first
2861:000 | DONE cmt | em  8 16 |        |             |                 ; char is the same, but the word is more than one char long. So
2862:000 | DONE cmt | em  8 16 |        |             |                 ; we suck it up and compare every single character. We go from
2863:000 | DONE cmt | em  8 16 |        |             |                 ; back to front, because words like CELLS and CELL+ would take
2864:000 | DONE cmt | em  8 16 |        |             |                 ; longer otherwise. We can also shorten the loop by one because
2865:000 | DONE cmt | em  8 16 |        |             |                 ; we've already compared the first char.
2866:000 | DONE wsp | em  8 16 |        |             |
2867:000 | DONE cmt | em  8 16 |        |             |                 ; Even worse, we have to add 8 bytes to address of Dictionary
2868:000 | DONE cmt | em  8 16 |        |             |                 ; string to allow testing with one loop. We need this like
2869:000 | DONE cmt | em  8 16 |        |             |                 ; a hole in the head because we just switched A to 8 bit.
2870:000 | DONE cmt | em  8 16 |        |             |                 ; However, staying with an 8-bit A is even slower.
2871:000 | DONE ins | em  8 16 | 00584a | c2 20       |                 rep 20               
2871:001 | DONE ctl | em 16 16 |        |             |         .!a16
2872:000 | DONE ins | em 16 16 | 00584c | a5 1c       |                 lda.d 00001c         address of Dictionary string
2873:000 | DONE ins | em 16 16 | 00584e | 18          |                 clc                  
2874:000 | DONE ins | em 16 16 | 00584f | 69 08 00    |                 adc.# 0008           
2875:000 | DONE ins | em 16 16 | 005852 | 85 20       |                 sta.d 000020         
2876:000 | DONE ins | em 16 16 | 005854 | e2 20       |                 sep 20               
2876:001 | DONE ctl | em  8 16 |        |             |         .!a8
2877:000 | DONE ins | em  8 16 | 005856 | a4 24       |                 ldy.d 000024         get length of strings as loop index
2878:000 | DONE ins | em  8 16 | 005858 | 88          |                 dey                  first index is length minus 1
2879:000 | DONE wsp | em  8 16 |        |             |
2880:000 | DONE lbl | em  8 16 | 005859 |             | @                                    
2881:000 | DONE ins | em  8 16 | 005859 | b1 1e       |                 lda.diy 00001e       LDA (TMP2),Y - last char of mystery string
2882:000 | DONE ins | em  8 16 | 00585b | d1 20       |                 cmp.diy 000020       CMP (TMP1),Y - last char of DP string
2883:000 | DONE ins | em  8 16 | 00585d | d0 e2       |                 bne 005841           
2884:000 | DONE ins | em  8 16 | 00585f | 88          |                 dey                  start of string (Y=0) was already tested
2885:000 | DONE ins | em  8 16 | 005860 | d0 f7       |                 bne 005859           
2886:000 | DONE wsp | em  8 16 |        |             |
2887:000 | DONE lbl | em  8 16 | 005862 |             | find-name_success                    
2888:000 | DONE cmt | em  8 16 |        |             |                 ; If we reach here, the strings are the same and we have a match
2889:000 | DONE cmt | em  8 16 |        |             |                 ; We get here with an 8 bit A
2890:000 | DONE ins | em  8 16 | 005862 | c2 20       |                 rep 20               
2890:001 | DONE ctl | em 16 16 |        |             |         .!a16
2891:000 | DONE ins | em 16 16 | 005864 | a4 1c       |                 ldy.d 00001c         get the correct DP
2892:000 | DONE ins | em 16 16 | 005866 | 80 03       |                 bra 00586b           
2893:000 | DONE wsp | em 16 16 |        |             |
2894:000 | DONE wsp | em 16 16 |        |             |
2895:000 | DONE lbl | em 16 16 | 005868 |             | find-name_failure_16                 
2896:000 | DONE cmt | em 16 16 |        |             |                 ; Word not found in Dictionary, return zero. Assumes A is 16
2897:000 | DONE cmt | em 16 16 |        |             |                 ; bit
2898:000 | DONE ins | em 16 16 | 005868 | a0 00 00    |                 ldy.# 0000           fall thru
2899:000 | DONE wsp | em 16 16 |        |             |
2900:000 | DONE lbl | em 16 16 | 00586b |             | find-name_done                       
2901:000 | DONE ins | em 16 16 | 00586b | e8          |                 inx                  drop old address (NIP)
2902:000 | DONE ins | em 16 16 | 00586c | e8          |                 inx                  
2903:000 | DONE wsp | em 16 16 |        |             |
2904:000 | DONE lbl | em 16 16 | 00586d |             | z_find-name                          
2904:001 | DONE ins | em 16 16 | 00586d | 60          |                 rts                  
2905:000 | DONE wsp | em 16 16 |        |             |
2906:000 | DONE wsp | em 16 16 |        |             |
2907:000 | DONE cmt | em 16 16 |        |             | ; -------------------------------------------------------------------
2908:000 | DONE cmt | em 16 16 |        |             | ; FM/MOD ( d n1 -- n2 n3 ) X bytes / X cycles
2909:000 | DONE cmt | em 16 16 |        |             | ; Floored division, compare with SM/REM. We define FM/MOD in terms of UM/MOD,
2910:000 | DONE cmt | em 16 16 |        |             | ; see http://git.savannah.gnu.org/cgit/gforth.git/tree/prim We prefer to use
2911:000 | DONE cmt | em 16 16 |        |             | ; SM/REM for further words. You could also define FM/MOD in Terms of SM/REM,
2912:000 | DONE cmt | em 16 16 |        |             | ; see http://www.figuk.plus.com/build/arith.htm
2913:000 | DONE cmt | em 16 16 |        |             | ; Original Forth: DUP >R DUP 0< IF NEGATE >R DNEGATE R> THEN >R DUP 0< R@ AND +
2914:000 | DONE cmt | em 16 16 |        |             | ; R> UM/MOD R> 0< IF SWAP NEGATE SWAP THEN ;
2915:000 | DONE cmt | em 16 16 |        |             | ; TODO this is just a 1:1 list of jumps, optimize once it is working
2916:000 | DONE lbl | em 16 16 | 00586e |             | xt_fmmod                             
2917:000 | DONE ins | em 16 16 | 00586e | 20 aa 57    |                 jsr 0057aa           
2918:000 | DONE ins | em 16 16 | 005871 | 20 98 51    |                 jsr 005198           
2919:000 | DONE ins | em 16 16 | 005874 | 20 aa 57    |                 jsr 0057aa           
2920:000 | DONE wsp | em 16 16 |        |             |
2921:000 | DONE ins | em 16 16 | 005877 | 98          |                 tya                  0< IF
2922:000 | DONE ins | em 16 16 | 005878 | 10 12       |                 bpl 00588c           
2923:000 | DONE wsp | em 16 16 |        |             |
2924:000 | DONE ins | em 16 16 | 00587a | b4 00       |                 ldy.dx 00            
2925:000 | DONE ins | em 16 16 | 00587c | e8          |                 inx                  
2926:000 | DONE ins | em 16 16 | 00587d | e8          |                 inx                  
2927:000 | DONE wsp | em 16 16 |        |             |
2928:000 | DONE ins | em 16 16 | 00587e | 20 07 5a    |                 jsr 005a07           
2929:000 | DONE ins | em 16 16 | 005881 | 20 98 51    |                 jsr 005198           
2930:000 | DONE ins | em 16 16 | 005884 | 20 47 57    |                 jsr 005747           
2931:000 | DONE ins | em 16 16 | 005887 | 20 83 5b    |                 jsr 005b83           
2932:000 | DONE wsp | em 16 16 |        |             |
2933:000 | DONE ins | em 16 16 | 00588a | 80 04       |                 bra 005890           
2934:000 | DONE lbl | em 16 16 | 00588c |             | fmmod_1                              
2935:000 | DONE ins | em 16 16 | 00588c | b4 00       |                 ldy.dx 00            
2936:000 | DONE ins | em 16 16 | 00588e | e8          |                 inx                  
2937:000 | DONE ins | em 16 16 | 00588f | e8          |                 inx                  
2938:000 | DONE lbl | em 16 16 | 005890 |             | fmmod_1_1                            
2939:000 | DONE ins | em 16 16 | 005890 | 20 98 51    |                 jsr 005198           
2940:000 | DONE ins | em 16 16 | 005893 | 20 aa 57    |                 jsr 0057aa           
2941:000 | DONE ins | em 16 16 | 005896 | 20 35 53    |                 jsr 005335           
2942:000 | DONE ins | em 16 16 | 005899 | 20 7a 5b    |                 jsr 005b7a           
2943:000 | DONE ins | em 16 16 | 00589c | 20 0a 55    |                 jsr 00550a           
2944:000 | DONE ins | em 16 16 | 00589f | 20 e2 52    |                 jsr 0052e2           
2945:000 | DONE ins | em 16 16 | 0058a2 | 20 83 5b    |                 jsr 005b83           
2946:000 | DONE ins | em 16 16 | 0058a5 | 20 d2 5d    |                 jsr 005dd2           
2947:000 | DONE ins | em 16 16 | 0058a8 | 20 83 5b    |                 jsr 005b83           
2948:000 | DONE wsp | em 16 16 |        |             |
2949:000 | DONE ins | em 16 16 | 0058ab | 98          |                 tya                  
2950:000 | DONE ins | em 16 16 | 0058ac | 10 0f       |                 bpl 0058bd           
2951:000 | DONE wsp | em 16 16 |        |             |
2952:000 | DONE ins | em 16 16 | 0058ae | b4 00       |                 ldy.dx 00            
2953:000 | DONE ins | em 16 16 | 0058b0 | e8          |                 inx                  
2954:000 | DONE ins | em 16 16 | 0058b1 | e8          |                 inx                  
2955:000 | DONE wsp | em 16 16 |        |             |
2956:000 | DONE ins | em 16 16 | 0058b2 | 20 16 5d    |                 jsr 005d16           
2957:000 | DONE ins | em 16 16 | 0058b5 | 20 07 5a    |                 jsr 005a07           
2958:000 | DONE ins | em 16 16 | 0058b8 | 20 16 5d    |                 jsr 005d16           
2959:000 | DONE wsp | em 16 16 |        |             |
2960:000 | DONE ins | em 16 16 | 0058bb | 80 04       |                 bra 0058c1           
2961:000 | DONE lbl | em 16 16 | 0058bd |             | fmmod_2                              
2962:000 | DONE wsp | em 16 16 |        |             |
2963:000 | DONE ins | em 16 16 | 0058bd | b4 00       |                 ldy.dx 00            
2964:000 | DONE ins | em 16 16 | 0058bf | e8          |                 inx                  
2965:000 | DONE ins | em 16 16 | 0058c0 | e8          |                 inx                  
2966:000 | DONE wsp | em 16 16 |        |             |
2967:000 | DONE lbl | em 16 16 | 0058c1 |             | fmmod_2_1                            
2968:000 | DONE wsp | em 16 16 |        |             |
2969:000 | DONE lbl | em 16 16 | 0058c1 |             | z_fmmod                              
2969:001 | DONE ins | em 16 16 | 0058c1 | 60          |                 rts                  
2970:000 | DONE wsp | em 16 16 |        |             |
2971:000 | DONE wsp | em 16 16 |        |             |
2972:000 | DONE cmt | em 16 16 |        |             | ; -------------------------------------------------------------------
2973:000 | DONE cmt | em 16 16 |        |             | ; IMMEDIATE ( -- ) X bytes / X cycles
2974:000 | DONE cmt | em 16 16 |        |             | ; Mark the most recently defined word as IMMEDIATE. Will only affect the last
2975:000 | DONE cmt | em 16 16 |        |             | ; word in the Dictionary. If the words is still in ROM for some reason, this
2976:000 | DONE cmt | em 16 16 |        |             | ; will have no effect and will fail without an error message
2977:000 | DONE lbl | em 16 16 | 0058c2 |             | xt_immediate                         
2978:000 | DONE dir | em 16 16 |        |             |         .!a16                        
2979:000 | DONE ins | em 16 16 | 0058c2 | a9 02 00    |                 lda.# IM             Immediate flag
2980:000 | DONE ins | em 16 16 | 0058c5 | eb          |                 xba                  flags are MSB
2981:000 | DONE ins | em 16 16 | 0058c6 | 12 02       |                 ora.di 000002        ORA (DP)
2982:000 | DONE ins | em 16 16 | 0058c8 | 92 02       |                 sta.di 000002        
2983:000 | DONE wsp | em 16 16 |        |             |
2984:000 | DONE lbl | em 16 16 | 0058ca |             | z_immediate                          
2984:001 | DONE ins | em 16 16 | 0058ca | 60          |                 rts                  
2985:000 | DONE wsp | em 16 16 |        |             |
2986:000 | DONE wsp | em 16 16 |        |             |
2987:000 | DONE cmt | em 16 16 |        |             | ; -------------------------------------------------------------------
2988:000 | DONE cmt | em 16 16 |        |             | ; INPUT ( -- addr ) X bytes / X cycles
2989:000 | DONE cmt | em 16 16 |        |             | ; Return the address where the jump targeet for KEY is stored
2990:000 | DONE lbl | em 16 16 | 0058cb |             | xt_input                             
2991:000 | DONE ins | em 16 16 | 0058cb | ca          |                 dex                  
2992:000 | DONE ins | em 16 16 | 0058cc | ca          |                 dex                  
2993:000 | DONE ins | em 16 16 | 0058cd | 94 00       |                 sty.dx 00            
2994:000 | DONE wsp | em 16 16 |        |             |
2995:000 | DONE ins | em 16 16 | 0058cf | a0 10 00    |                 ldy.# 000010         
2996:000 | DONE wsp | em 16 16 |        |             |
2997:000 | DONE lbl | em 16 16 | 0058d2 |             | z_input                              
2997:001 | DONE ins | em 16 16 | 0058d2 | 60          |                 rts                  
2998:000 | DONE wsp | em 16 16 |        |             |
2999:000 | DONE wsp | em 16 16 |        |             |
3000:000 | DONE cmt | em 16 16 |        |             | ; -------------------------------------------------------------------
3001:000 | DONE cmt | em 16 16 |        |             | ; INT>NAME ( xt -- nt ) X bytes / X cycles
3002:000 | DONE cmt | em 16 16 |        |             | ; Given an execution token (xt), return the name token (nt). This is called
3003:000 | DONE cmt | em 16 16 |        |             | ; >NAME in Gforth, but changed to INT>NAME for Liara to fit better with
3004:000 | DONE cmt | em 16 16 |        |             | ; NAME>INT.
3005:000 | DONE lbl | em 16 16 | 0058d3 |             | xt_int-name                          
3006:000 | DONE cmt | em 16 16 |        |             |                 ; Unfortunately, to find the header, we have to walk through the
3007:000 | DONE cmt | em 16 16 |        |             |                 ; dictionary
3008:000 | DONE ins | em 16 16 | 0058d3 | a5 02       |                 lda.d 000002         nt of first Dictionary word
3009:000 | DONE ins | em 16 16 | 0058d5 | 85 1c       |                 sta.d 00001c         
3010:000 | DONE wsp | em 16 16 |        |             |
3011:000 | DONE ins | em 16 16 | 0058d7 | 84 24       |                 sty.d 000024         xt of mystery word
3012:000 | DONE ins | em 16 16 | 0058d9 | a0 04 00    |                 ldy.# 0004           xt in header is two bytes down
3013:000 | DONE wsp | em 16 16 |        |             |
3014:000 | DONE lbl | em 16 16 | 0058dc |             | xt_in_loop                           
3015:000 | DONE ins | em 16 16 | 0058dc | b1 1c       |                 lda.diy 00001c       LDA (TMP1),Y - get xt of current nt
3016:000 | DONE ins | em 16 16 | 0058de | c5 24       |                 cmp.d 000024         
3017:000 | DONE ins | em 16 16 | 0058e0 | f0 12       |                 beq 0058f4           
3018:000 | DONE wsp | em 16 16 |        |             |
3019:000 | DONE cmt | em 16 16 |        |             |                 ; no joy, next header address is two bytes down
3020:000 | DONE ins | em 16 16 | 0058e2 | e6 1c       |                 inc.d 00001c         
3021:000 | DONE ins | em 16 16 | 0058e4 | e6 1c       |                 inc.d 00001c         
3022:000 | DONE ins | em 16 16 | 0058e6 | b2 1c       |                 lda.di 00001c        LDA (TMP1)
3023:000 | DONE wsp | em 16 16 |        |             |
3024:000 | DONE cmt | em 16 16 |        |             |                 ; a zero entry marks the end of the Dictionary
3025:000 | DONE ins | em 16 16 | 0058e8 | f0 04       |                 beq 0058ee           
3026:000 | DONE wsp | em 16 16 |        |             |
3027:000 | DONE ins | em 16 16 | 0058ea | 85 1c       |                 sta.d 00001c         new header
3028:000 | DONE ins | em 16 16 | 0058ec | 80 ee       |                 bra 0058dc           
3029:000 | DONE wsp | em 16 16 |        |             |
3030:000 | DONE lbl | em 16 16 | 0058ee |             | xt_in_notfound                       
3031:000 | DONE ins | em 16 16 | 0058ee | a9 3c 6f    |                 lda.# 006f3c         
3032:000 | DONE ins | em 16 16 | 0058f1 | 4c 8c 67    |                 jmp 00678c           
3033:000 | DONE wsp | em 16 16 |        |             |
3034:000 | DONE lbl | em 16 16 | 0058f4 |             | xt_in_found                          
3035:000 | DONE ins | em 16 16 | 0058f4 | a4 1c       |                 ldy.d 00001c         replace xt by nt
3036:000 | DONE lbl | em 16 16 | 0058f6 |             | z_int-name                           
3036:001 | DONE ins | em 16 16 | 0058f6 | 60          |                 rts                  
3037:000 | DONE wsp | em 16 16 |        |             |
3038:000 | DONE wsp | em 16 16 |        |             |
3039:000 | DONE cmt | em 16 16 |        |             | ; -------------------------------------------------------------------
3040:000 | DONE cmt | em 16 16 |        |             | ; INVERT ( n -- n ) 5 bytes / X cycles
3041:000 | DONE cmt | em 16 16 |        |             | ; Complement of TOS
3042:000 | DONE lbl | em 16 16 | 0058f7 |             | xt_invert                            
3043:000 | DONE dir | em 16 16 |        |             |         .!a16                        
3044:000 | DONE ins | em 16 16 | 0058f7 | 98          |                 tya                  
3045:000 | DONE ins | em 16 16 | 0058f8 | 49 ff ff    |                 eor.# 0ffff          
3046:000 | DONE ins | em 16 16 | 0058fb | a8          |                 tay                  
3047:000 | DONE wsp | em 16 16 |        |             |
3048:000 | DONE lbl | em 16 16 | 0058fc |             | z_invert                             
3048:001 | DONE ins | em 16 16 | 0058fc | 60          |                 rts                  
3049:000 | DONE wsp | em 16 16 |        |             |
3050:000 | DONE wsp | em 16 16 |        |             |
3051:000 | DONE cmt | em 16 16 |        |             | ; -------------------------------------------------------------------
3052:000 | DONE cmt | em 16 16 |        |             | ; HERE ( -- u ) 6 bytes / 13 cycles
3053:000 | DONE cmt | em 16 16 |        |             | ; Push Compiler Pointer address on the Data Stack
3054:000 | DONE lbl | em 16 16 | 0058fd |             | xt_here                              
3055:000 | DONE dir | em 16 16 |        |             |         .!xy16                       
3056:000 | DONE ins | em 16 16 | 0058fd | ca          |                 dex                  
3057:000 | DONE ins | em 16 16 | 0058fe | ca          |                 dex                  
3058:000 | DONE ins | em 16 16 | 0058ff | 94 00       |                 sty.dx 00            
3059:000 | DONE wsp | em 16 16 |        |             |
3060:000 | DONE ins | em 16 16 | 005901 | a4 00       |                 ldy.d 000000         
3061:000 | DONE wsp | em 16 16 |        |             |
3062:000 | DONE lbl | em 16 16 | 005903 |             | z_here                               
3062:001 | DONE ins | em 16 16 | 005903 | 60          |                 rts                  
3063:000 | DONE wsp | em 16 16 |        |             |
3064:000 | DONE cmt | em 16 16 |        |             | ; -------------------------------------------------------------------
3065:000 | DONE cmt | em 16 16 |        |             | ; HEX ( -- ) X bytes / X cycles
3066:000 | DONE cmt | em 16 16 |        |             | ; Change radix for number conversion to 16
3067:000 | DONE lbl | em 16 16 | 005904 |             | xt_hex                               
3068:000 | DONE dir | em 16 16 |        |             |         .!a16                        
3069:000 | DONE ins | em 16 16 | 005904 | a9 10 00    |                 lda.# 0010           
3070:000 | DONE ins | em 16 16 | 005907 | 85 16       |                 sta.d 000016         
3071:000 | DONE wsp | em 16 16 |        |             |
3072:000 | DONE lbl | em 16 16 | 005909 |             | z_hex                                
3072:001 | DONE ins | em 16 16 | 005909 | 60          |                 rts                  
3073:000 | DONE wsp | em 16 16 |        |             |
3074:000 | DONE cmt | em 16 16 |        |             | ; -------------------------------------------------------------------
3075:000 | DONE cmt | em 16 16 |        |             | ; HOLD ( char -- ) X bytes / X cycles
3076:000 | DONE cmt | em 16 16 |        |             | ; Insert a character at the current position of a pictured numeric output string
3077:000 | DONE cmt | em 16 16 |        |             | ; Code based on https://github.com/philburk/pforth/blob/master/fth/numberio.fth
3078:000 | DONE cmt | em 16 16 |        |             | ; Forth code is : HOLD  -1 HLD +!  HLD @ C! ;  We use the the internal variable
3079:000 | DONE cmt | em 16 16 |        |             | ; tohold instead of HLD.
3080:000 | DONE lbl | em 16 16 | 00590a |             | xt_hold                              
3081:000 | DONE dir | em 16 16 |        |             |         .!a16                        
3082:000 | DONE ins | em 16 16 | 00590a | c6 18       |                 dec.d 000018         -1 HLD +!
3083:000 | DONE wsp | em 16 16 |        |             |
3084:000 | DONE ins | em 16 16 | 00590c | 98          |                 tya                  
3085:000 | DONE ins | em 16 16 | 00590d | e2 20       |                 sep 20               
3085:001 | DONE ctl | em  8 16 |        |             |         .!a8
3086:000 | DONE ins | em  8 16 | 00590f | 92 18       |                 sta.di 000018        STA (TOHOLD)
3087:000 | DONE ins | em  8 16 | 005911 | c2 20       |                 rep 20               
3087:001 | DONE ctl | em 16 16 |        |             |         .!a16
3088:000 | DONE ins | em 16 16 | 005913 | b4 00       |                 ldy.dx 00            
3089:000 | DONE ins | em 16 16 | 005915 | e8          |                 inx                  
3090:000 | DONE ins | em 16 16 | 005916 | e8          |                 inx                  
3091:000 | DONE wsp | em 16 16 |        |             |
3092:000 | DONE lbl | em 16 16 | 005917 |             | z_hold                               
3092:001 | DONE ins | em 16 16 | 005917 | 60          |                 rts                  
3093:000 | DONE wsp | em 16 16 |        |             |
3094:000 | DONE cmt | em 16 16 |        |             | ; -------------------------------------------------------------------
3095:000 | DONE cmt | em 16 16 |        |             | ; LATESTNT ( -- nt ) 7 bytes / X cycles
3096:000 | DONE cmt | em 16 16 |        |             | ; Return the name token (nt) of the last word in the Dictionary. The Gforth
3097:000 | DONE cmt | em 16 16 |        |             | ; version of this word is called LATEST.
3098:000 | DONE lbl | em 16 16 | 005918 |             | xt_latestnt                          
3099:000 | DONE dir | em 16 16 |        |             |         .!a16                        
3100:000 | DONE ins | em 16 16 | 005918 | ca          |                 dex                  make room on Data Stack
3101:000 | DONE ins | em 16 16 | 005919 | ca          |                 dex                  
3102:000 | DONE ins | em 16 16 | 00591a | 94 00       |                 sty.dx 00            
3103:000 | DONE wsp | em 16 16 |        |             |
3104:000 | DONE ins | em 16 16 | 00591c | a5 02       |                 lda.d 000002         
3105:000 | DONE ins | em 16 16 | 00591e | a8          |                 tay                  
3106:000 | DONE wsp | em 16 16 |        |             |
3107:000 | DONE lbl | em 16 16 | 00591f |             | z_latestnt                           
3107:001 | DONE ins | em 16 16 | 00591f | 60          |                 rts                  
3108:000 | DONE wsp | em 16 16 |        |             |
3109:000 | DONE wsp | em 16 16 |        |             |
3110:000 | DONE cmt | em 16 16 |        |             | ; -------------------------------------------------------------------
3111:000 | DONE cmt | em 16 16 |        |             | ; LATESTXT ( -- xt ) 11 bytes / X cycles
3112:000 | DONE cmt | em 16 16 |        |             | ; Return the name token (xt) of the last word in the Dictionary. This is simply
3113:000 | DONE cmt | em 16 16 |        |             | ; LATESTNT but four bytes down and with a FETCH
3114:000 | DONE lbl | em 16 16 | 005920 |             | xt_latestxt                          
3115:000 | DONE dir | em 16 16 |        |             |         .!a16                        
3116:000 | DONE ins | em 16 16 | 005920 | ca          |                 dex                  make room on Data Stack
3117:000 | DONE ins | em 16 16 | 005921 | ca          |                 dex                  
3118:000 | DONE ins | em 16 16 | 005922 | 94 00       |                 sty.dx 00            
3119:000 | DONE wsp | em 16 16 |        |             |
3120:000 | DONE ins | em 16 16 | 005924 | a5 02       |                 lda.d 000002         
3121:000 | DONE wsp | em 16 16 |        |             |
3122:000 | DONE ins | em 16 16 | 005926 | 18          |                 clc                  xt is stored four bytes below nt in header
3123:000 | DONE ins | em 16 16 | 005927 | 69 04 00    |                 adc.# 0004           
3124:000 | DONE ins | em 16 16 | 00592a | a8          |                 tay                  
3125:000 | DONE wsp | em 16 16 |        |             |
3126:000 | DONE ins | em 16 16 | 00592b | b9 00 00    |                 lda.y 0000           FETCH
3127:000 | DONE ins | em 16 16 | 00592e | a8          |                 tay                  
3128:000 | DONE wsp | em 16 16 |        |             |
3129:000 | DONE lbl | em 16 16 | 00592f |             | z_latestxt                           
3129:001 | DONE ins | em 16 16 | 00592f | 60          |                 rts                  
3130:000 | DONE wsp | em 16 16 |        |             |
3131:000 | DONE wsp | em 16 16 |        |             |
3132:000 | DONE cmt | em 16 16 |        |             | ; -------------------------------------------------------------------
3133:000 | DONE cmt | em 16 16 |        |             | ; LITERAL ( n -- ) X bytes / X cycles
3134:000 | DONE cmt | em 16 16 |        |             | ; Compile-only word to store TOS so that it is pushed on stack during runtime.
3135:000 | DONE cmt | em 16 16 |        |             | ; This is a immediate, compile-only word. Test it with  : AAA [ 1 ] LITERAL ;
3136:000 | DONE cmt | em 16 16 |        |             | ; for instance
3137:000 | DONE lbl | em 16 16 | 005930 |             | xt_literal                           
3138:000 | DONE cmt | em 16 16 |        |             |                 ; During runtime, we call the routine at the bottom by compiling
3139:000 | DONE cmt | em 16 16 |        |             |                 ; JSR LITERAL_RT. Note the cmpl_ routines use tmptos
3140:000 | DONE ins | em 16 16 | 005930 | f4 42 59    |                 phe.# 005942         PEA LITERAL_RT
3141:000 | DONE ins | em 16 16 | 005933 | 20 6b 67    |                 jsr 00676b           
3142:000 | DONE wsp | em 16 16 |        |             |
3143:000 | DONE cmt | em 16 16 |        |             |                 ; compile the value that is to be pushed to the Data Stack at
3144:000 | DONE cmt | em 16 16 |        |             |                 ; runtime. There is no "sty.di", so we have to do this the hard
3145:000 | DONE cmt | em 16 16 |        |             |                 ; way. This is basically , ("comma")
3146:000 | DONE ins | em 16 16 | 005936 | 98          |                 tya                  
3147:000 | DONE ins | em 16 16 | 005937 | 92 00       |                 sta.di 000000        
3148:000 | DONE ins | em 16 16 | 005939 | e6 00       |                 inc.d 000000         
3149:000 | DONE ins | em 16 16 | 00593b | e6 00       |                 inc.d 000000         
3150:000 | DONE wsp | em 16 16 |        |             |
3151:000 | DONE ins | em 16 16 | 00593d | b4 00       |                 ldy.dx 00            DROP
3152:000 | DONE ins | em 16 16 | 00593f | e8          |                 inx                  
3153:000 | DONE ins | em 16 16 | 005940 | e8          |                 inx                  
3154:000 | DONE wsp | em 16 16 |        |             |
3155:000 | DONE lbl | em 16 16 | 005941 |             | z_literal                            
3155:001 | DONE ins | em 16 16 | 005941 | 60          |                 rts                  
3156:000 | DONE wsp | em 16 16 |        |             |
3157:000 | DONE lbl | em 16 16 | 005942 |             | literal_rt                           
3158:000 | DONE cmt | em 16 16 |        |             |                 ; During runtime, we push the value following this word
3159:000 | DONE cmt | em 16 16 |        |             |                 ; back on the Data Stack. The subroutine jump that brought us
3160:000 | DONE cmt | em 16 16 |        |             |                 ; here put the address to return to on the Return Stack - this
3161:000 | DONE cmt | em 16 16 |        |             |                 ; points to the data we need to get
3162:000 | DONE wsp | em 16 16 |        |             |
3163:000 | DONE cmt | em 16 16 |        |             |                 ; Make room on Data Stack, Y now free to use
3164:000 | DONE ins | em 16 16 | 005942 | ca          |                 dex                  
3165:000 | DONE ins | em 16 16 | 005943 | ca          |                 dex                  
3166:000 | DONE ins | em 16 16 | 005944 | 94 00       |                 sty.dx 00            
3167:000 | DONE wsp | em 16 16 |        |             |
3168:000 | DONE cmt | em 16 16 |        |             |                 ; The 65816 stores (<RETURN-ADDRESS> - 1) on the Return Stack
3169:000 | DONE cmt | em 16 16 |        |             |                 ; so we have to manipulate the address
3170:000 | DONE ins | em 16 16 | 005946 | 7a          |                 ply                  
3171:000 | DONE ins | em 16 16 | 005947 | c8          |                 iny                  
3172:000 | DONE ins | em 16 16 | 005948 | b9 00 00    |                 lda.y 0000           LDA $0000,Y - get value after jump
3173:000 | DONE wsp | em 16 16 |        |             |
3174:000 | DONE ins | em 16 16 | 00594b | c8          |                 iny                  move return address past data and restore
3175:000 | DONE ins | em 16 16 | 00594c | 5a          |                 phy                  so we can get back home
3176:000 | DONE wsp | em 16 16 |        |             |
3177:000 | DONE ins | em 16 16 | 00594d | a8          |                 tay                  Value is now on the Data Stack ( -- n )
3178:000 | DONE wsp | em 16 16 |        |             |
3179:000 | DONE ins | em 16 16 | 00594e | 60          |                 rts                  
3180:000 | DONE wsp | em 16 16 |        |             |
3181:000 | DONE wsp | em 16 16 |        |             |
3182:000 | DONE cmt | em 16 16 |        |             | ; -------------------------------------------------------------------
3183:000 | DONE cmt | em 16 16 |        |             | ; LSHIFT ( n u -- n ) X bytes / X cycles
3184:000 | DONE cmt | em 16 16 |        |             | ; Logically shift TOS u times to the left, adding zeros to the right
3185:000 | DONE lbl | em 16 16 | 00594f |             | xt_lshift                            
3186:000 | DONE cmt | em 16 16 |        |             |                 ; We shift at most 16 bits, because anything above that will be
3187:000 | DONE cmt | em 16 16 |        |             |                 ; zeros anyway
3188:000 | DONE ins | em 16 16 | 00594f | 98          |                 tya                  
3189:000 | DONE ins | em 16 16 | 005950 | 29 0f 00    |                 and.# 000f           
3190:000 | DONE ins | em 16 16 | 005953 | f0 09       |                 beq 00595e           if zero shifts, we're done
3191:000 | DONE wsp | em 16 16 |        |             |
3192:000 | DONE ins | em 16 16 | 005955 | a8          |                 tay                  number of shifts is TOS
3193:000 | DONE ins | em 16 16 | 005956 | b5 00       |                 lda.dx 00            number is in NOS
3194:000 | DONE lbl | em 16 16 | 005958 |             | lshift_loop                          
3195:000 | DONE ins | em 16 16 | 005958 | 0a          |                 asl.a                
3196:000 | DONE ins | em 16 16 | 005959 | 88          |                 dey                  
3197:000 | DONE ins | em 16 16 | 00595a | d0 fc       |                 bne 005958           
3198:000 | DONE wsp | em 16 16 |        |             |
3199:000 | DONE ins | em 16 16 | 00595c | 95 00       |                 sta.dx 00            put NOS, which last step will pull up
3200:000 | DONE wsp | em 16 16 |        |             |
3201:000 | DONE lbl | em 16 16 | 00595e |             | lshift_done                          
3202:000 | DONE ins | em 16 16 | 00595e | b4 00       |                 ldy.dx 00            
3203:000 | DONE ins | em 16 16 | 005960 | e8          |                 inx                  
3204:000 | DONE ins | em 16 16 | 005961 | e8          |                 inx                  
3205:000 | DONE wsp | em 16 16 |        |             |
3206:000 | DONE lbl | em 16 16 | 005962 |             | z_lshift                             
3206:001 | DONE ins | em 16 16 | 005962 | 60          |                 rts                  
3207:000 | DONE wsp | em 16 16 |        |             |
3208:000 | DONE wsp | em 16 16 |        |             |
3209:000 | DONE cmt | em 16 16 |        |             | ; -------------------------------------------------------------------
3210:000 | DONE cmt | em 16 16 |        |             | ; M* "MSTAR" ( n n -- d ) 16*16 -> 32  X bytes / X cycles
3211:000 | DONE cmt | em 16 16 |        |             | ; Multiply two 16 bit numbers, producing a 32 bit result. All values are signed.
3212:000 | DONE cmt | em 16 16 |        |             | ; This was originally adapted from FIG Forth for Tali Forth. The original Forth
3213:000 | DONE cmt | em 16 16 |        |             | ; code is : M* OVER OVER XOR >R ABS SWAP ABS UM* R> D+- ;  with
3214:000 | DONE cmt | em 16 16 |        |             | ; : D+- O< IF DNEGATE THEN ;
3215:000 | DONE cmt | em 16 16 |        |             | ; TODO Test this more once we have the Double words etc all working
3216:000 | DONE lbl | em 16 16 | 005963 |             | xt_mstar                             
3217:000 | DONE dir | em 16 16 |        |             |         .!a16                        
3218:000 | DONE cmt | em 16 16 |        |             |                 ; figure out the sign
3219:000 | DONE ins | em 16 16 | 005963 | 98          |                 tya                  
3220:000 | DONE ins | em 16 16 | 005964 | 55 00       |                 eor.dx 00            
3221:000 | DONE wsp | em 16 16 |        |             |
3222:000 | DONE cmt | em 16 16 |        |             |                 ; um* uses all kinds of tmp stuff so we don't risk a conflict
3223:000 | DONE cmt | em 16 16 |        |             |                 ; and just take the cycle hit by pushing this to the stack
3224:000 | DONE ins | em 16 16 | 005966 | 48          |                 pha                  
3225:000 | DONE wsp | em 16 16 |        |             |
3226:000 | DONE cmt | em 16 16 |        |             |                 ; get the absolute value of both numbers so we can feed them to
3227:000 | DONE cmt | em 16 16 |        |             |                 ; UM*, which does the real work
3228:000 | DONE ins | em 16 16 | 005967 | 98          |                 tya                  
3229:000 | DONE ins | em 16 16 | 005968 | 10 05       |                 bpl 00596f           
3230:000 | DONE wsp | em 16 16 |        |             |
3231:000 | DONE cmt | em 16 16 |        |             |                 ; TOS is negative so we have to ABS it
3232:000 | DONE ins | em 16 16 | 00596a | 49 ff ff    |                 eor.# 0ffff          
3233:000 | DONE ins | em 16 16 | 00596d | 1a          |                 inc.a                
3234:000 | DONE ins | em 16 16 | 00596e | a8          |                 tay                  
3235:000 | DONE wsp | em 16 16 |        |             |
3236:000 | DONE lbl | em 16 16 | 00596f |             | mstar_abs_nos                        
3237:000 | DONE ins | em 16 16 | 00596f | b5 00       |                 lda.dx 00            
3238:000 | DONE ins | em 16 16 | 005971 | 10 06       |                 bpl 005979           
3239:000 | DONE wsp | em 16 16 |        |             |
3240:000 | DONE cmt | em 16 16 |        |             |                 ; NOS is negative so we have to ABS it
3241:000 | DONE ins | em 16 16 | 005973 | 49 ff ff    |                 eor.# 0ffff          
3242:000 | DONE ins | em 16 16 | 005976 | 1a          |                 inc.a                
3243:000 | DONE ins | em 16 16 | 005977 | 95 00       |                 sta.dx 00            
3244:000 | DONE wsp | em 16 16 |        |             |
3245:000 | DONE lbl | em 16 16 | 005979 |             | mstar_umstar                         
3246:000 | DONE ins | em 16 16 | 005979 | 20 73 5d    |                 jsr 005d73           now ( d ) on stack
3247:000 | DONE wsp | em 16 16 |        |             |
3248:000 | DONE cmt | em 16 16 |        |             |                 ; handle the sign
3249:000 | DONE ins | em 16 16 | 00597c | 68          |                 pla                  
3250:000 | DONE wsp | em 16 16 |        |             |
3251:000 | DONE cmt | em 16 16 |        |             |                 ; postive, we don't have to care
3252:000 | DONE ins | em 16 16 | 00597d | 10 03       |                 bpl 005982           
3253:000 | DONE wsp | em 16 16 |        |             |
3254:000 | DONE ins | em 16 16 | 00597f | 20 47 57    |                 jsr 005747           
3255:000 | DONE wsp | em 16 16 |        |             |
3256:000 | DONE lbl | em 16 16 | 005982 |             | z_mstar                              
3256:001 | DONE ins | em 16 16 | 005982 | 60          |                 rts                  
3257:000 | DONE wsp | em 16 16 |        |             |
3258:000 | DONE wsp | em 16 16 |        |             |
3259:000 | DONE cmt | em 16 16 |        |             | ; -------------------------------------------------------------------
3260:000 | DONE cmt | em 16 16 |        |             | ; MARKER ( "name" -- ) X bytes / X cycles
3261:000 | DONE cmt | em 16 16 |        |             | ; Create a deletion boundry, restoring the Dictionary to an earlier state. This
3262:000 | DONE cmt | em 16 16 |        |             | ; replaces FORGET in earlier Forths. Old entries are not actually deleted, but
3263:000 | DONE cmt | em 16 16 |        |             | ; merely overwritten by restoring CP and DP.
3264:000 | DONE lbl | em 16 16 | 005983 |             | xt_marker                            
3265:000 | DONE cmt | em 16 16 |        |             |                 ; This is a defining word
3266:000 | DONE ins | em 16 16 | 005983 | 20 39 56    |                 jsr 005639           
3267:000 | DONE wsp | em 16 16 |        |             |
3268:000 | DONE cmt | em 16 16 |        |             |                 ; Add the current DP as a payload - the DP of the marker itself
3269:000 | DONE cmt | em 16 16 |        |             |                 ; TODO see if it doesn't make more sense to add nt_ of the previous
3270:000 | DONE cmt | em 16 16 |        |             |                 ; word
3271:000 | DONE ins | em 16 16 | 005986 | a5 02       |                 lda.d 000002         
3272:000 | DONE ins | em 16 16 | 005988 | 92 00       |                 sta.di 000000        STA (CP)
3273:000 | DONE ins | em 16 16 | 00598a | e6 00       |                 inc.d 000000         
3274:000 | DONE ins | em 16 16 | 00598c | e6 00       |                 inc.d 000000         
3275:000 | DONE wsp | em 16 16 |        |             |
3276:000 | DONE cmt | em 16 16 |        |             |                 ; DOES> by hand: Add runtime behavior and DODOES routine
3277:000 | DONE ins | em 16 16 | 00598e | 20 68 57    |                 jsr 005768           
3278:000 | DONE ins | em 16 16 | 005991 | 20 f3 66    |                 jsr 0066f3           
3279:000 | DONE wsp | em 16 16 |        |             |
3280:000 | DONE cmt | em 16 16 |        |             |                 ; DOES> payload
3281:000 | DONE ins | em 16 16 | 005994 | 20 c2 52    |                 jsr 0052c2           ( nt )
3282:000 | DONE wsp | em 16 16 |        |             |
3283:000 | DONE cmt | em 16 16 |        |             |                 ; We now have the DP of the marker itself on the stack, but we
3284:000 | DONE cmt | em 16 16 |        |             |                 ; need the DP of the previous word. That is two bytes down
3285:000 | DONE ins | em 16 16 | 005997 | 84 20       |                 sty.d 000020         
3286:000 | DONE ins | em 16 16 | 005999 | a0 02 00    |                 ldy.# 0002           overwrite TOS, won't be needing it
3287:000 | DONE ins | em 16 16 | 00599c | b1 20       |                 lda.diy 000020       LDA (TMP3),Y
3288:000 | DONE ins | em 16 16 | 00599e | 85 02       |                 sta.d 000002         
3289:000 | DONE wsp | em 16 16 |        |             |
3290:000 | DONE cmt | em 16 16 |        |             |                 ; Adjust the CP, which is one byte after the z_ address of the
3291:000 | DONE cmt | em 16 16 |        |             |                 ; word we just restored. That address is six bytes down
3292:000 | DONE ins | em 16 16 | 0059a0 | a0 06 00    |                 ldy.# 0006           
3293:000 | DONE ins | em 16 16 | 0059a3 | b1 02       |                 lda.diy 000002       LDA (DP),Y
3294:000 | DONE ins | em 16 16 | 0059a5 | 1a          |                 inc.a                first free byte is one byte further down
3295:000 | DONE ins | em 16 16 | 0059a6 | 85 00       |                 sta.d 000000         
3296:000 | DONE wsp | em 16 16 |        |             |
3297:000 | DONE cmt | em 16 16 |        |             |                 ; clean up stack
3298:000 | DONE ins | em 16 16 | 0059a8 | b4 00       |                 ldy.dx 00            
3299:000 | DONE ins | em 16 16 | 0059aa | e8          |                 inx                  
3300:000 | DONE ins | em 16 16 | 0059ab | e8          |                 inx                  
3301:000 | DONE wsp | em 16 16 |        |             |
3302:000 | DONE lbl | em 16 16 | 0059ac |             | z_marker                             
3302:001 | DONE ins | em 16 16 | 0059ac | 60          |                 rts                  
3303:000 | DONE wsp | em 16 16 |        |             |
3304:000 | DONE wsp | em 16 16 |        |             |
3305:000 | DONE cmt | em 16 16 |        |             | ; -------------------------------------------------------------------
3306:000 | DONE cmt | em 16 16 |        |             | ; MAX ( n m -- n ) 18 bytes / X cycles
3307:000 | DONE cmt | em 16 16 |        |             | ; Compare TOS and NOS and keep which one is larger. Adapted from Lance A.
3308:000 | DONE cmt | em 16 16 |        |             | ; Leventhal "6502 Assembly Language Subroutines". Negative Flag indicates which
3309:000 | DONE cmt | em 16 16 |        |             | ; number is larger. See also http://6502.org/tutorials/compare_instructions.html
3310:000 | DONE cmt | em 16 16 |        |             | ; and http://www.righto.com/2012/12/the-6502-overflow-flag-explained.html
3311:000 | DONE lbl | em 16 16 | 0059ad |             | xt_max                               
3312:000 | DONE ins | em 16 16 | 0059ad | 98          |                 tya                  
3313:000 | DONE ins | em 16 16 | 0059ae | d5 00       |                 cmp.dx 00            
3314:000 | DONE wsp | em 16 16 |        |             |
3315:000 | DONE cmt | em 16 16 |        |             |                 ; If they are the same, life is good. This step also sets the
3316:000 | DONE cmt | em 16 16 |        |             |                 ; Carry flag
3317:000 | DONE ins | em 16 16 | 0059b0 | f0 0b       |                 beq 0059bd           Faster than DROP because TOS is in Y
3318:000 | DONE wsp | em 16 16 |        |             |
3319:000 | DONE ins | em 16 16 | 0059b2 | f5 00       |                 sbc.dx 00            
3320:000 | DONE ins | em 16 16 | 0059b4 | 50 03       |                 bvc 0059b9           no overflow, skip ahead
3321:000 | DONE wsp | em 16 16 |        |             |
3322:000 | DONE cmt | em 16 16 |        |             |                 ; Deal with oveflow because we use signed numbers
3323:000 | DONE ins | em 16 16 | 0059b6 | 49 00 80    |                 eor.# 8000           compliment negative flag
3324:000 | DONE wsp | em 16 16 |        |             |
3325:000 | DONE lbl | em 16 16 | 0059b9 |             | max_no_ov                            
3326:000 | DONE ins | em 16 16 | 0059b9 | 10 02       |                 bpl 0059bd           keep TOS
3327:000 | DONE lbl | em 16 16 | 0059bb |             | max_drop                             
3328:000 | DONE ins | em 16 16 | 0059bb | b4 00       |                 ldy.dx 00            DROP so NOS is result
3329:000 | DONE lbl | em 16 16 | 0059bd |             | max_nip                              
3330:000 | DONE ins | em 16 16 | 0059bd | e8          |                 inx                  
3331:000 | DONE ins | em 16 16 | 0059be | e8          |                 inx                  
3332:000 | DONE wsp | em 16 16 |        |             |
3333:000 | DONE lbl | em 16 16 | 0059bf |             | z_max                                
3333:001 | DONE ins | em 16 16 | 0059bf | 60          |                 rts                  
3334:000 | DONE wsp | em 16 16 |        |             |
3335:000 | DONE wsp | em 16 16 |        |             |
3336:000 | DONE cmt | em 16 16 |        |             | ; -------------------------------------------------------------------
3337:000 | DONE cmt | em 16 16 |        |             | ; MIN ( n m -- n ) 18 bytes / X cycles
3338:000 | DONE cmt | em 16 16 |        |             | ; Compare TOS and NOS and keep which one is smaller Adapted from Lance A.
3339:000 | DONE cmt | em 16 16 |        |             | ; Leventhal "6502 Assembly Language Subroutines". Negative Flag indicates which
3340:000 | DONE cmt | em 16 16 |        |             | ; number is larger. See also http://6502.org/tutorials/compare_instructions.html
3341:000 | DONE cmt | em 16 16 |        |             | ; and http://www.righto.com/2012/12/the-6502-overflow-flag-explained.html
3342:000 | DONE lbl | em 16 16 | 0059c0 |             | xt_min                               
3343:000 | DONE ins | em 16 16 | 0059c0 | 98          |                 tya                  
3344:000 | DONE ins | em 16 16 | 0059c1 | d5 00       |                 cmp.dx 00            
3345:000 | DONE wsp | em 16 16 |        |             |
3346:000 | DONE cmt | em 16 16 |        |             |                 ; If they are the same, life is good. This step also sets the
3347:000 | DONE cmt | em 16 16 |        |             |                 ; Carry flag
3348:000 | DONE ins | em 16 16 | 0059c3 | f0 0b       |                 beq 0059d0           Faster than DROP because TOS is in Y
3349:000 | DONE wsp | em 16 16 |        |             |
3350:000 | DONE ins | em 16 16 | 0059c5 | f5 00       |                 sbc.dx 00            
3351:000 | DONE ins | em 16 16 | 0059c7 | 50 03       |                 bvc 0059cc           no overflow, skip ahead
3352:000 | DONE wsp | em 16 16 |        |             |
3353:000 | DONE cmt | em 16 16 |        |             |                 ; Deal with oveflow because we use signed numbers
3354:000 | DONE ins | em 16 16 | 0059c9 | 49 00 80    |                 eor.# 8000           compliment negative flag
3355:000 | DONE wsp | em 16 16 |        |             |
3356:000 | DONE lbl | em 16 16 | 0059cc |             | min_no_ov                            
3357:000 | DONE ins | em 16 16 | 0059cc | 30 02       |                 bmi 0059d0           keep TOS
3358:000 | DONE lbl | em 16 16 | 0059ce |             | min_drop                             
3359:000 | DONE ins | em 16 16 | 0059ce | b4 00       |                 ldy.dx 00            DROP so NOS is result
3360:000 | DONE lbl | em 16 16 | 0059d0 |             | min_nip                              
3361:000 | DONE ins | em 16 16 | 0059d0 | e8          |                 inx                  
3362:000 | DONE ins | em 16 16 | 0059d1 | e8          |                 inx                  
3363:000 | DONE wsp | em 16 16 |        |             |
3364:000 | DONE lbl | em 16 16 | 0059d2 |             | z_min                                
3364:001 | DONE ins | em 16 16 | 0059d2 | 60          |                 rts                  
3365:000 | DONE wsp | em 16 16 |        |             |
3366:000 | DONE cmt | em 16 16 |        |             | ; -------------------------------------------------------------------
3367:000 | DONE cmt | em 16 16 |        |             | ; MOVE ( addr1 addr2 u -- ) X bytes / X cycles
3368:000 | DONE cmt | em 16 16 |        |             | ; Move u bytes from addr1 to addr2, so that in the end, addr2 contains exactly
3369:000 | DONE cmt | em 16 16 |        |             | ; what was in addr1. This routine calls CMOVE or CMOVE>. Forth verison is
3370:000 | DONE cmt | em 16 16 |        |             | ; >R 2DUP U< IF R> CMOVE> ELSE  R> CMOVE THEN ; see
3371:000 | DONE cmt | em 16 16 |        |             | ; https://groups.google.com/forum/#!topic/comp.lang.forth/-l2WlE7pEE0
3372:000 | DONE cmt | em 16 16 |        |             | ; Also see CMOVE> and CMOVE and http://forum.6502.org/viewtopic.php?f=2&t=1685
3373:000 | DONE lbl | em 16 16 | 0059d3 |             | xt_move                              
3374:000 | DONE dir | em 16 16 |        |             |         .!a16                        
3375:000 | DONE cmt | em 16 16 |        |             |                 ; if u is zero, we just skip all of this
3376:000 | DONE ins | em 16 16 | 0059d3 | 98          |                 tya                  
3377:000 | DONE ins | em 16 16 | 0059d4 | f0 0e       |                 beq 0059e4           
3378:000 | DONE wsp | em 16 16 |        |             |
3379:000 | DONE cmt | em 16 16 |        |             |                 ; if source and destination are the same, that would be silly as
3380:000 | DONE cmt | em 16 16 |        |             |                 ; well
3381:000 | DONE ins | em 16 16 | 0059d6 | b5 00       |                 lda.dx 00            addr2 (destination)
3382:000 | DONE ins | em 16 16 | 0059d8 | d5 04       |                 cmp.dx 04            addr1 (source)
3383:000 | DONE ins | em 16 16 | 0059da | f0 08       |                 beq 0059e4           
3384:000 | DONE wsp | em 16 16 |        |             |
3385:000 | DONE cmt | em 16 16 |        |             |                 ; The destination is higher than the source, so use CMOVE, which
3386:000 | DONE cmt | em 16 16 |        |             |                 ; calls MVP
3387:000 | DONE ins | em 16 16 | 0059dc | 10 03       |                 bpl 0059e1           
3388:000 | DONE wsp | em 16 16 |        |             |
3389:000 | DONE ins | em 16 16 | 0059de | 4c 9a 55    |                 jmp 00559a           JSR/RTS
3390:000 | DONE wsp | em 16 16 |        |             |
3391:000 | DONE cmt | em 16 16 |        |             |                 ; The source is higher than the destination, use CMOVE>,
3392:000 | DONE cmt | em 16 16 |        |             |                 ; which calls MVN
3393:000 | DONE lbl | em 16 16 | 0059e1 |             | move_cmoveup                         
3394:000 | DONE ins | em 16 16 | 0059e1 | 4c bd 55    |                 jmp 0055bd           
3395:000 | DONE wsp | em 16 16 |        |             |
3396:000 | DONE lbl | em 16 16 | 0059e4 |             | z_move                               ; never reached
3397:000 | DONE wsp | em 16 16 |        |             |
3398:000 | DONE wsp | em 16 16 |        |             |
3399:000 | DONE cmt | em 16 16 |        |             | ; -------------------------------------------------------------------
3400:000 | DONE cmt | em 16 16 |        |             | ; NAME>INT ( nt -- xt ) 4 bytes / 8 cycles
3401:000 | DONE cmt | em 16 16 |        |             | ; Given the Name Token (nt) of a word, return its Execute Token (xt)
3402:000 | DONE cmt | em 16 16 |        |             | ; TODO deal with compile-only words, see
3403:000 | DONE cmt | em 16 16 |        |             | ; https://www.complang.tuwien.ac.at/forth/gforth/Docs-html/Name-token.html
3404:000 | DONE lbl | em 16 16 | 0059e4 |             | xt_name-int                          
3405:000 | DONE dir | em 16 16 |        |             |         .!a16                        
3406:000 | DONE dir | em 16 16 |        |             |         .!xy16                       
3407:000 | DONE cmt | em 16 16 |        |             |                 ; The xt of a word beginns four bytes down from its nt
3408:000 | DONE ins | em 16 16 | 0059e4 | c8          |                 iny                  
3409:000 | DONE ins | em 16 16 | 0059e5 | c8          |                 iny                  
3410:000 | DONE ins | em 16 16 | 0059e6 | c8          |                 iny                  
3411:000 | DONE ins | em 16 16 | 0059e7 | c8          |                 iny                  
3412:000 | DONE ins | em 16 16 | 0059e8 | b9 00 00    |                 lda.y 0000           
3413:000 | DONE ins | em 16 16 | 0059eb | a8          |                 tay                  
3414:000 | DONE wsp | em 16 16 |        |             |
3415:000 | DONE lbl | em 16 16 | 0059ec |             | z_name-int                           
3415:001 | DONE ins | em 16 16 | 0059ec | 60          |                 rts                  
3416:000 | DONE wsp | em 16 16 |        |             |
3417:000 | DONE cmt | em 16 16 |        |             | ; -------------------------------------------------------------------
3418:000 | DONE cmt | em 16 16 |        |             | ; NAME>STRING ( nt -- addr u ) 16 bytes / X cycles
3419:000 | DONE cmt | em 16 16 |        |             | ; Given a name token (nt) of a word, return its string. This is a Gforth word
3420:000 | DONE cmt | em 16 16 |        |             | ; that works with the Dictionary header entries. It is not checked if nt is
3421:000 | DONE cmt | em 16 16 |        |             | ; a valid name token. There is no "STRING>NAME" - this is handled by the
3422:000 | DONE cmt | em 16 16 |        |             | ; combination of PARSE-NAME and FIND-NAME
3423:000 | DONE lbl | em 16 16 | 0059ed |             | xt_name-string                       
3424:000 | DONE dir | em 16 16 |        |             |         .!a16                        
3425:000 | DONE dir | em 16 16 |        |             |         .!xy16                       
3426:000 | DONE ins | em 16 16 | 0059ed | ca          |                 dex                  move NOS down one
3427:000 | DONE ins | em 16 16 | 0059ee | ca          |                 dex                  
3428:000 | DONE wsp | em 16 16 |        |             |
3429:000 | DONE cmt | em 16 16 |        |             |                 ; the name string of a word begins 8 bytes down from its nt,
3430:000 | DONE cmt | em 16 16 |        |             |                 ; which we have as TOS
3431:000 | DONE ins | em 16 16 | 0059ef | 98          |                 tya                  
3432:000 | DONE ins | em 16 16 | 0059f0 | 18          |                 clc                  
3433:000 | DONE ins | em 16 16 | 0059f1 | 69 08 00    |                 adc.# 0008           
3434:000 | DONE ins | em 16 16 | 0059f4 | 95 00       |                 sta.dx 00            NOS
3435:000 | DONE wsp | em 16 16 |        |             |
3436:000 | DONE cmt | em 16 16 |        |             |                 ; the length of the name string is in the LSB of the first word
3437:000 | DONE cmt | em 16 16 |        |             |                 ; of the dictionary entry header (the name token)
3438:000 | DONE ins | em 16 16 | 0059f6 | b9 00 00    |                 lda.y 0000           LDA $0000,Y
3439:000 | DONE ins | em 16 16 | 0059f9 | 29 ff 00    |                 and.# 00ff           mask all but length byte
3440:000 | DONE ins | em 16 16 | 0059fc | a8          |                 tay                  
3441:000 | DONE wsp | em 16 16 |        |             |
3442:000 | DONE lbl | em 16 16 | 0059fd |             | z_name-string                        
3442:001 | DONE ins | em 16 16 | 0059fd | 60          |                 rts                  
3443:000 | DONE wsp | em 16 16 |        |             |
3444:000 | DONE wsp | em 16 16 |        |             |
3445:000 | DONE cmt | em 16 16 |        |             | ; -------------------------------------------------------------------
3446:000 | DONE cmt | em 16 16 |        |             | ; NATIVE-COMPILE ( -- ) X bytes / X cycles
3447:000 | DONE cmt | em 16 16 |        |             | ; Enable native compilation for last word in Dictionary
3448:000 | DONE lbl | em 16 16 | 0059fe |             | xt_native-compile                    
3449:000 | DONE dir | em 16 16 |        |             |         .!a16                        
3450:000 | DONE ins | em 16 16 | 0059fe | a9 01 00    |                 lda.# NC             
3451:000 | DONE ins | em 16 16 | 005a01 | eb          |                 xba                  flags are MSB
3452:000 | DONE ins | em 16 16 | 005a02 | 12 02       |                 ora.di 000002        ORA (DP)
3453:000 | DONE ins | em 16 16 | 005a04 | 92 02       |                 sta.di 000002        
3454:000 | DONE wsp | em 16 16 |        |             |
3455:000 | DONE lbl | em 16 16 | 005a06 |             | z_native-compile                     
3456:000 | DONE ins | em 16 16 | 005a06 | 60          |                 rts                  
3457:000 | DONE wsp | em 16 16 |        |             |
3458:000 | DONE wsp | em 16 16 |        |             |
3459:000 | DONE cmt | em 16 16 |        |             | ; -------------------------------------------------------------------
3460:000 | DONE cmt | em 16 16 |        |             | ; NEGATE ( n -- n ) 6 bytes / X cycles
3461:000 | DONE cmt | em 16 16 |        |             | ; Two's complement of TOS
3462:000 | DONE lbl | em 16 16 | 005a07 |             | xt_negate                            
3463:000 | DONE ins | em 16 16 | 005a07 | 98          |                 tya                  
3464:000 | DONE ins | em 16 16 | 005a08 | 49 ff ff    |                 eor.# 0ffff          
3465:000 | DONE ins | em 16 16 | 005a0b | 1a          |                 inc.a                
3466:000 | DONE ins | em 16 16 | 005a0c | a8          |                 tay                  
3467:000 | DONE wsp | em 16 16 |        |             |
3468:000 | DONE lbl | em 16 16 | 005a0d |             | z_negate                             
3468:001 | DONE ins | em 16 16 | 005a0d | 60          |                 rts                  
3469:000 | DONE wsp | em 16 16 |        |             |
3470:000 | DONE wsp | em 16 16 |        |             |
3471:000 | DONE cmt | em 16 16 |        |             | ; -------------------------------------------------------------------
3472:000 | DONE cmt | em 16 16 |        |             | ; NIP ( n m -- m ) 2 bytes / 4 cycles
3473:000 | DONE cmt | em 16 16 |        |             | ; Delete entry that is NOS
3474:000 | DONE lbl | em 16 16 | 005a0e |             | xt_nip                               
3475:000 | DONE dir | em 16 16 |        |             |         .!xy16                       
3476:000 | DONE ins | em 16 16 | 005a0e | e8          |                 inx                  
3477:000 | DONE ins | em 16 16 | 005a0f | e8          |                 inx                  
3478:000 | DONE lbl | em 16 16 | 005a10 |             | z_nip                                
3478:001 | DONE ins | em 16 16 | 005a10 | 60          |                 rts                  
3479:000 | DONE wsp | em 16 16 |        |             |
3480:000 | DONE wsp | em 16 16 |        |             |
3481:000 | DONE cmt | em 16 16 |        |             | ; -------------------------------------------------------------------
3482:000 | DONE cmt | em 16 16 |        |             | ; NUMBER ( addr u -- u | d ) X bytes / X cycles
3483:000 | DONE cmt | em 16 16 |        |             | ; Convert a number string to a double or single cell number. This is a wrapper
3484:000 | DONE cmt | em 16 16 |        |             | ; for >NUMBER and follows the convention set out in the "Forth Programmer's
3485:000 | DONE cmt | em 16 16 |        |             | ; Handbook" (Conklin & Rather) 3rd edition p. 87. Based in part on the "Starting
3486:000 | DONE cmt | em 16 16 |        |             | ; Forth" code https://www.forth.com/starting-forth/10-input-output-operators/
3487:000 | DONE cmt | em 16 16 |        |             | ; Gforth uses S>NUMBER? and S>UNUMBER? which return the numbers and a flag, see
3488:000 | DONE cmt | em 16 16 |        |             | ; https://www.complang.tuwien.ac.at/forth/gforth/Docs-html/Number-Conversion.html
3489:000 | DONE cmt | em 16 16 |        |             | ; Another difference to Gforth is that we follow ANSI Forth that the dot to
3490:000 | DONE cmt | em 16 16 |        |             | ; signal a double cell number is required to be the last character of the
3491:000 | DONE cmt | em 16 16 |        |             | ; string. Number calls >NUMBER which in turn calls UM*, which uses tmp1, tmp2,
3492:000 | DONE cmt | em 16 16 |        |             | ; and tmp3, so we can't use them here, which is pain.
3493:000 | DONE lbl | em 16 16 | 005a11 |             | xt_number                            
3494:000 | DONE dir | em 16 16 |        |             |         .!a16                        
3495:000 | DONE cmt | em 16 16 |        |             |                 ; The flags for sign and double are kept on the stack because
3496:000 | DONE cmt | em 16 16 |        |             |                 ; we've run out of temporary variables. MSB is for minus, LSB is
3497:000 | DONE cmt | em 16 16 |        |             |                 ; for double
3498:000 | DONE ins | em 16 16 | 005a11 | f4 00 00    |                 phe.# 0000           
3499:000 | DONE wsp | em 16 16 |        |             |
3500:000 | DONE ins | em 16 16 | 005a14 | 84 24       |                 sty.d 000024         save length of string, freeing Y
3501:000 | DONE wsp | em 16 16 |        |             |
3502:000 | DONE cmt | em 16 16 |        |             |                 ; if the first character is a minus, strip it off and set
3503:000 | DONE cmt | em 16 16 |        |             |                 ; a flag
3504:000 | DONE ins | em 16 16 | 005a16 | e2 20       |                 sep 20               
3504:001 | DONE ctl | em  8 16 |        |             |         .!a8
3505:000 | DONE ins | em  8 16 | 005a18 | a1 00       |                 lda.dxi 00           get first character
3506:000 | DONE ins | em  8 16 | 005a1a | c9 2d       |                 cmp.# 2d             
3507:000 | DONE ins | em  8 16 | 005a1c | c2 20       |                 rep 20               
3507:001 | DONE ctl | em 16 16 |        |             |         .!a16
3508:000 | DONE ins | em 16 16 | 005a1e | d0 09       |                 bne 005a29           
3509:000 | DONE wsp | em 16 16 |        |             |
3510:000 | DONE cmt | em 16 16 |        |             |                 ; We have a minus.
3511:000 | DONE ins | em 16 16 | 005a20 | 68          |                 pla                  
3512:000 | DONE ins | em 16 16 | 005a21 | 09 00 ff    |                 ora.# 0ff00          MSB is minus
3513:000 | DONE ins | em 16 16 | 005a24 | 48          |                 pha                  
3514:000 | DONE wsp | em 16 16 |        |             |
3515:000 | DONE ins | em 16 16 | 005a25 | f6 00       |                 inc.dx 00            start one character later
3516:000 | DONE ins | em 16 16 | 005a27 | c6 24       |                 dec.d 000024         reduce string length by one
3517:000 | DONE wsp | em 16 16 |        |             |
3518:000 | DONE lbl | em 16 16 | 005a29 |             | number_dot                           
3519:000 | DONE cmt | em 16 16 |        |             |                 ; if the last character is a dot, strip it off and set a flag
3520:000 | DONE ins | em 16 16 | 005a29 | a5 24       |                 lda.d 000024         get the string length
3521:000 | DONE ins | em 16 16 | 005a2b | 3a          |                 dec.a                subtract one to convert length to index
3522:000 | DONE ins | em 16 16 | 005a2c | 18          |                 clc                  
3523:000 | DONE ins | em 16 16 | 005a2d | 75 00       |                 adc.dx 00            add length of string
3524:000 | DONE ins | em 16 16 | 005a2f | a8          |                 tay                  
3525:000 | DONE ins | em 16 16 | 005a30 | e2 20       |                 sep 20               
3525:001 | DONE ctl | em  8 16 |        |             |         .!a8
3526:000 | DONE ins | em  8 16 | 005a32 | b9 00 00    |                 lda.y 0000           get last character
3527:000 | DONE ins | em  8 16 | 005a35 | c9 2e       |                 cmp.# 2e             
3528:000 | DONE ins | em  8 16 | 005a37 | c2 20       |                 rep 20               
3528:001 | DONE ctl | em 16 16 |        |             |         .!a16
3529:000 | DONE ins | em 16 16 | 005a39 | d0 07       |                 bne 005a42           
3530:000 | DONE wsp | em 16 16 |        |             |
3531:000 | DONE cmt | em 16 16 |        |             |                 ; we have a dot
3532:000 | DONE ins | em 16 16 | 005a3b | 68          |                 pla                  get the flag back
3533:000 | DONE ins | em 16 16 | 005a3c | 09 ff 00    |                 ora.# 00ff           LSB is double
3534:000 | DONE ins | em 16 16 | 005a3f | 48          |                 pha                  
3535:000 | DONE wsp | em 16 16 |        |             |
3536:000 | DONE ins | em 16 16 | 005a40 | c6 24       |                 dec.d 000024         reduce string length by one
3537:000 | DONE wsp | em 16 16 |        |             |
3538:000 | DONE lbl | em 16 16 | 005a42 |             | number_main                          
3539:000 | DONE cmt | em 16 16 |        |             |                 ; set up stack for subroutine jump to >NUMBER
3540:000 | DONE ins | em 16 16 | 005a42 | b5 00       |                 lda.dx 00            get the string address to safety
3541:000 | DONE ins | em 16 16 | 005a44 | 74 00       |                 stz.dx 00            NOS is now zero
3542:000 | DONE ins | em 16 16 | 005a46 | ca          |                 dex                  
3543:000 | DONE ins | em 16 16 | 005a47 | ca          |                 dex                  
3544:000 | DONE ins | em 16 16 | 005a48 | 74 00       |                 stz.dx 00            3OS and NOS are now zero
3545:000 | DONE ins | em 16 16 | 005a4a | ca          |                 dex                  
3546:000 | DONE ins | em 16 16 | 005a4b | ca          |                 dex                  
3547:000 | DONE wsp | em 16 16 |        |             |
3548:000 | DONE ins | em 16 16 | 005a4c | 95 00       |                 sta.dx 00            address is back as NOS
3549:000 | DONE ins | em 16 16 | 005a4e | a4 24       |                 ldy.d 000024         length is back as TOS
3550:000 | DONE wsp | em 16 16 |        |             |
3551:000 | DONE lbl | em 16 16 | 005a50 |             | number_loop                          
3552:000 | DONE ins | em 16 16 | 005a50 | 20 3b 51    |                 jsr 00513b           ( ud addr u -- ud addr u )
3553:000 | DONE wsp | em 16 16 |        |             |
3554:000 | DONE ins | em 16 16 | 005a53 | 98          |                 tya                  test length of returned string, should be 0
3555:000 | DONE ins | em 16 16 | 005a54 | f0 06       |                 beq 005a5c           
3556:000 | DONE wsp | em 16 16 |        |             |
3557:000 | DONE cmt | em 16 16 |        |             |                 ; Something went wrong during conversion, we still have stuff
3558:000 | DONE cmt | em 16 16 |        |             |                 ; left over. Print error string and abort. If number was called
3559:000 | DONE cmt | em 16 16 |        |             |                 ; by INTERPRET, we've already checked for words, so we're in
3560:000 | DONE cmt | em 16 16 |        |             |                 ; trouble one way or another
3561:000 | DONE cmt | em 16 16 |        |             |                 ; TODO print offending string
3562:000 | DONE ins | em 16 16 | 005a56 | a9 3c 6f    |                 lda.# 006f3c         
3563:000 | DONE ins | em 16 16 | 005a59 | 4c 8c 67    |                 jmp 00678c           
3564:000 | DONE wsp | em 16 16 |        |             |
3565:000 | DONE lbl | em 16 16 | 005a5c |             | number_ok                            
3566:000 | DONE cmt | em 16 16 |        |             |                 ; All characters successfully converted. Drop the string info
3567:000 | DONE ins | em 16 16 | 005a5c | b4 02       |                 ldy.dx 02            
3568:000 | DONE ins | em 16 16 | 005a5e | e8          |                 inx                  
3569:000 | DONE ins | em 16 16 | 005a5f | e8          |                 inx                  
3570:000 | DONE ins | em 16 16 | 005a60 | e8          |                 inx                  
3571:000 | DONE ins | em 16 16 | 005a61 | e8          |                 inx                  
3572:000 | DONE wsp | em 16 16 |        |             |
3573:000 | DONE cmt | em 16 16 |        |             |                 ; We have a double-cell number on the Data Stack that might have
3574:000 | DONE cmt | em 16 16 |        |             |                 ; a minus and might actually be single-cell
3575:000 | DONE ins | em 16 16 | 005a62 | 68          |                 pla                  get copy of the flags
3576:000 | DONE ins | em 16 16 | 005a63 | 48          |                 pha                  
3577:000 | DONE ins | em 16 16 | 005a64 | 29 ff 00    |                 and.# 00ff           only keep the part with the number size (LSB)
3578:000 | DONE ins | em 16 16 | 005a67 | f0 1b       |                 beq 005a84           
3579:000 | DONE wsp | em 16 16 |        |             |
3580:000 | DONE cmt | em 16 16 |        |             |                 ; This is a double-cell number. If it had a minus, we'll have to
3581:000 | DONE cmt | em 16 16 |        |             |                 ; negate it
3582:000 | DONE ins | em 16 16 | 005a69 | 68          |                 pla                  
3583:000 | DONE ins | em 16 16 | 005a6a | 29 00 ff    |                 and.# 0ff00          only keep part with the sing (MSB)
3584:000 | DONE ins | em 16 16 | 005a6d | f0 25       |                 beq 005a94           no minus, all done
3585:000 | DONE wsp | em 16 16 |        |             |
3586:000 | DONE ins | em 16 16 | 005a6f | b5 00       |                 lda.dx 00            DNEGATE, starts with LSW
3587:000 | DONE ins | em 16 16 | 005a71 | 49 ff ff    |                 eor.# 0ffff          
3588:000 | DONE wsp | em 16 16 |        |             |
3589:000 | DONE cmt | em 16 16 |        |             |                 ; INC won't affect the carry flag, so we have to do this the
3590:000 | DONE cmt | em 16 16 |        |             |                 ; hard way
3591:000 | DONE ins | em 16 16 | 005a74 | 18          |                 clc                  
3592:000 | DONE ins | em 16 16 | 005a75 | 69 01 00    |                 adc.# 0001           
3593:000 | DONE ins | em 16 16 | 005a78 | 95 00       |                 sta.dx 00            
3594:000 | DONE wsp | em 16 16 |        |             |
3595:000 | DONE cmt | em 16 16 |        |             |                 ; now MSW (in TOS)
3596:000 | DONE ins | em 16 16 | 005a7a | 98          |                 tya                  
3597:000 | DONE ins | em 16 16 | 005a7b | 49 ff ff    |                 eor.# 0ffff          
3598:000 | DONE ins | em 16 16 | 005a7e | 69 00 00    |                 adc.# 0000           we are only interested in the carry
3599:000 | DONE ins | em 16 16 | 005a81 | a8          |                 tay                  
3600:000 | DONE wsp | em 16 16 |        |             |
3601:000 | DONE ins | em 16 16 | 005a82 | 80 10       |                 bra 005a94           
3602:000 | DONE wsp | em 16 16 |        |             |
3603:000 | DONE lbl | em 16 16 | 005a84 |             | number_single                        
3604:000 | DONE cmt | em 16 16 |        |             |                 ; This is a single cell number, so we just drop the top cell
3605:000 | DONE ins | em 16 16 | 005a84 | b4 00       |                 ldy.dx 00            
3606:000 | DONE ins | em 16 16 | 005a86 | e8          |                 inx                  
3607:000 | DONE ins | em 16 16 | 005a87 | e8          |                 inx                  
3608:000 | DONE wsp | em 16 16 |        |             |
3609:000 | DONE cmt | em 16 16 |        |             |                 ; If we have a minus, we'll have to negate it. Note this code is
3610:000 | DONE cmt | em 16 16 |        |             |                 ; doubled for speed
3611:000 | DONE ins | em 16 16 | 005a88 | 68          |                 pla                  
3612:000 | DONE ins | em 16 16 | 005a89 | 29 00 ff    |                 and.# 0ff00          
3613:000 | DONE ins | em 16 16 | 005a8c | f0 06       |                 beq 005a94           no minus, all done
3614:000 | DONE wsp | em 16 16 |        |             |
3615:000 | DONE ins | em 16 16 | 005a8e | 98          |                 tya                  NEGATE
3616:000 | DONE ins | em 16 16 | 005a8f | 49 ff ff    |                 eor.# 0ffff          
3617:000 | DONE ins | em 16 16 | 005a92 | 1a          |                 inc.a                
3618:000 | DONE ins | em 16 16 | 005a93 | a8          |                 tay                  fall through to end
3619:000 | DONE wsp | em 16 16 |        |             |
3620:000 | DONE lbl | em 16 16 | 005a94 |             | z_number                             
3620:001 | DONE ins | em 16 16 | 005a94 | 60          |                 rts                  
3621:000 | DONE wsp | em 16 16 |        |             |
3622:000 | DONE wsp | em 16 16 |        |             |
3623:000 | DONE cmt | em 16 16 |        |             | ; -------------------------------------------------------------------
3624:000 | DONE cmt | em 16 16 |        |             | ; OR ( n m -- n ) 6 bytes / X cycles
3625:000 | DONE cmt | em 16 16 |        |             | ; Logical OR
3626:000 | DONE lbl | em 16 16 | 005a95 |             | xt_or                                
3627:000 | DONE ins | em 16 16 | 005a95 | 98          |                 tya                  
3628:000 | DONE ins | em 16 16 | 005a96 | 15 00       |                 ora.dx 00            
3629:000 | DONE ins | em 16 16 | 005a98 | a8          |                 tay                  
3630:000 | DONE wsp | em 16 16 |        |             |
3631:000 | DONE ins | em 16 16 | 005a99 | e8          |                 inx                  
3632:000 | DONE ins | em 16 16 | 005a9a | e8          |                 inx                  
3633:000 | DONE wsp | em 16 16 |        |             |
3634:000 | DONE lbl | em 16 16 | 005a9b |             | z_or                                 
3634:001 | DONE ins | em 16 16 | 005a9b | 60          |                 rts                  
3635:000 | DONE wsp | em 16 16 |        |             |
3636:000 | DONE wsp | em 16 16 |        |             |
3637:000 | DONE cmt | em 16 16 |        |             | ; -------------------------------------------------------------------
3638:000 | DONE cmt | em 16 16 |        |             | ; OUTPUT ( -- addr ) X bytes / X cycles
3639:000 | DONE cmt | em 16 16 |        |             | ; Return the address where the jump target for EMIT is stored. By default, this
3640:000 | DONE cmt | em 16 16 |        |             | ; will hold the value of put_chr from the kernel routine, but this can be
3641:000 | DONE cmt | em 16 16 |        |             | ; changed by the user
3642:000 | DONE lbl | em 16 16 | 005a9c |             | xt_output                            
3643:000 | DONE ins | em 16 16 | 005a9c | ca          |                 dex                  
3644:000 | DONE ins | em 16 16 | 005a9d | ca          |                 dex                  
3645:000 | DONE ins | em 16 16 | 005a9e | 94 00       |                 sty.dx 00            
3646:000 | DONE wsp | em 16 16 |        |             |
3647:000 | DONE ins | em 16 16 | 005aa0 | a0 0e 00    |                 ldy.# 00000e         
3648:000 | DONE wsp | em 16 16 |        |             |
3649:000 | DONE lbl | em 16 16 | 005aa3 |             | z_output                             
3649:001 | DONE ins | em 16 16 | 005aa3 | 60          |                 rts                  
3650:000 | DONE wsp | em 16 16 |        |             |
3651:000 | DONE wsp | em 16 16 |        |             |
3652:000 | DONE cmt | em 16 16 |        |             | ; -------------------------------------------------------------------
3653:000 | DONE cmt | em 16 16 |        |             | ; OVER ( n m -- n m n )  6 bytes / 14 cycles
3654:000 | DONE cmt | em 16 16 |        |             | ; Push NOS on Data Stack
3655:000 | DONE lbl | em 16 16 | 005aa4 |             | xt_over                              
3656:000 | DONE ins | em 16 16 | 005aa4 | ca          |                 dex                  
3657:000 | DONE ins | em 16 16 | 005aa5 | ca          |                 dex                  
3658:000 | DONE ins | em 16 16 | 005aa6 | 94 00       |                 sty.dx 00            
3659:000 | DONE ins | em 16 16 | 005aa8 | b4 02       |                 ldy.dx 02            
3660:000 | DONE wsp | em 16 16 |        |             |
3661:000 | DONE lbl | em 16 16 | 005aaa |             | z_over                               
3661:001 | DONE ins | em 16 16 | 005aaa | 60          |                 rts                  
3662:000 | DONE wsp | em 16 16 |        |             |
3663:000 | DONE wsp | em 16 16 |        |             |
3664:000 | DONE cmt | em 16 16 |        |             | ; -------------------------------------------------------------------
3665:000 | DONE cmt | em 16 16 |        |             | ; PAD ( -- addr ) 11 bytes / X cycles
3666:000 | DONE cmt | em 16 16 |        |             | ; Return address to a temporary area in free memory for user. Must be at least
3667:000 | DONE cmt | em 16 16 |        |             | ; 84 bytes in size (says ANSI). It is located relative to the compile area
3668:000 | DONE cmt | em 16 16 |        |             | ; pointer (CP) and therefore varies in position. This area is reserved for the
3669:000 | DONE cmt | em 16 16 |        |             | ; user and not used by the system
3670:000 | DONE lbl | em 16 16 | 005aab |             | xt_pad                               
3671:000 | DONE dir | em 16 16 |        |             |         .!a16                        
3672:000 | DONE ins | em 16 16 | 005aab | ca          |                 dex                  
3673:000 | DONE ins | em 16 16 | 005aac | ca          |                 dex                  
3674:000 | DONE ins | em 16 16 | 005aad | 94 00       |                 sty.dx 00            
3675:000 | DONE wsp | em 16 16 |        |             |
3676:000 | DONE ins | em 16 16 | 005aaf | a5 00       |                 lda.d 000000         
3677:000 | DONE ins | em 16 16 | 005ab1 | 18          |                 clc                  
3678:000 | DONE ins | em 16 16 | 005ab2 | 69 ff 00    |                 adc.# 0000ff         
3679:000 | DONE ins | em 16 16 | 005ab5 | a8          |                 tay                  
3680:000 | DONE wsp | em 16 16 |        |             |
3681:000 | DONE lbl | em 16 16 | 005ab6 |             | z_pad                                
3681:001 | DONE ins | em 16 16 | 005ab6 | 60          |                 rts                  
3682:000 | DONE wsp | em 16 16 |        |             |
3683:000 | DONE wsp | em 16 16 |        |             |
3684:000 | DONE cmt | em 16 16 |        |             | ; -------------------------------------------------------------------
3685:000 | DONE cmt | em 16 16 |        |             | ; PAGE ( -- ) X bytes / X cycles
3686:000 | DONE cmt | em 16 16 |        |             | ; Clear the screen on vt-100 terminals by sending the code "ESC[2J". This is
3687:000 | DONE cmt | em 16 16 |        |             | ; only useful in interactive scenarios so we don't worry about speed
3688:000 | DONE cmt | em 16 16 |        |             | ; TODO rewrite with EMIT
3689:000 | DONE lbl | em 16 16 | 005ab7 |             | xt_page                              
3690:000 | DONE ins | em 16 16 | 005ab7 | a9 4b 6f    |                 lda.# 006f4b         
3691:000 | DONE ins | em 16 16 | 005aba | 20 92 67    |                 jsr 006792           
3692:000 | DONE wsp | em 16 16 |        |             |
3693:000 | DONE cmt | em 16 16 |        |             |                 ; In theory, this should have moved the cursor to the top left
3694:000 | DONE cmt | em 16 16 |        |             |                 ; corner ("home"), but this doesn't seem to work in practice.
3695:000 | DONE cmt | em 16 16 |        |             |                 ; So we send "ESC[H" as well.
3696:000 | DONE ins | em 16 16 | 005abd | a9 50 6f    |                 lda.# 006f50         
3697:000 | DONE ins | em 16 16 | 005ac0 | 20 92 67    |                 jsr 006792           
3698:000 | DONE wsp | em 16 16 |        |             |
3699:000 | DONE lbl | em 16 16 | 005ac3 |             | z_page                               
3699:001 | DONE ins | em 16 16 | 005ac3 | 60          |                 rts                  
3700:000 | DONE wsp | em 16 16 |        |             |
3701:000 | DONE cmt | em 16 16 |        |             | ; -------------------------------------------------------------------
3702:000 | DONE cmt | em 16 16 |        |             | ; PARSE-NAME ( "name" -- addr u ) 41+ bytes / X cycles
3703:000 | DONE cmt | em 16 16 |        |             | ; Find next word in input string, skipping leading spaces. This is a special
3704:000 | DONE cmt | em 16 16 |        |             | ; form of PARSE and drops through to that word. See PARSE for more detail. We
3705:000 | DONE cmt | em 16 16 |        |             | ; use this word internally for the interpreter because it is a lot easier to use
3706:000 | DONE cmt | em 16 16 |        |             | ; http://forth-standard.org/standard/core/PARSE-NAME has a Forth implementation
3707:000 | DONE cmt | em 16 16 |        |             | ; Roughly, the word is comparable to  BL WORD COUNT in old terms.
3708:000 | DONE lbl | em 16 16 | 005ac4 |             | xt_parse-name                        
3709:000 | DONE dir | em 16 16 |        |             |         .!a16                        
3710:000 | DONE dir | em 16 16 |        |             |         .!xy16                       
3711:000 | DONE cmt | em 16 16 |        |             |                 ; skip leading spaces, changing >IN, then place SPACE
3712:000 | DONE cmt | em 16 16 |        |             |                 ; character on data stack for PARSE
3713:000 | DONE ins | em 16 16 | 005ac4 | 5a          |                 phy                  save TOS for later use
3714:000 | DONE ins | em 16 16 | 005ac5 | a4 0c       |                 ldy.d 00000c         >IN
3715:000 | DONE ins | em 16 16 | 005ac7 | e2 20       |                 sep 20               
3715:001 | DONE ctl | em  8 16 |        |             |         .!a8
3716:000 | DONE lbl | em  8 16 | 005ac9 |             | parse-name_loop                      
3717:000 | DONE ins | em  8 16 | 005ac9 | c4 0a       |                 cpy.d 00000a         end of line?
3718:000 | DONE ins | em  8 16 | 005acb | f0 09       |                 beq 005ad6           
3719:000 | DONE wsp | em  8 16 |        |             |
3720:000 | DONE ins | em  8 16 | 005acd | b1 08       |                 lda.diy 000008       LDA (CIB),Y
3721:000 | DONE ins | em  8 16 | 005acf | c9 20       |                 cmp.# AscSP          
3722:000 | DONE ins | em  8 16 | 005ad1 | d0 17       |                 bne 005aea           
3723:000 | DONE ins | em  8 16 | 005ad3 | c8          |                 iny                  
3724:000 | DONE ins | em  8 16 | 005ad4 | 80 f3       |                 bra 005ac9           
3725:000 | DONE wsp | em  8 16 |        |             |
3726:000 | DONE lbl | em  8 16 | 005ad6 |             | parse-name_empty_line                
3727:000 | DONE ins | em  8 16 | 005ad6 | c2 20       |                 rep 20               
3727:001 | DONE ctl | em 16 16 |        |             |         .!a16
3728:000 | DONE cmt | em 16 16 |        |             |                 ; The Gforth documentation does not say what address is returned
3729:000 | DONE cmt | em 16 16 |        |             |                 ; if a string with only spaces is returned. Experiments with
3730:000 | DONE cmt | em 16 16 |        |             |                 ; the word  : PNT ( "name" -- ) PARSE-NAME SWAP U. U. TYPE ;
3731:000 | DONE cmt | em 16 16 |        |             |                 ; show that it returns the address of the last space in the
3732:000 | DONE cmt | em 16 16 |        |             |                 ; input, which is cib+ciblen. So we do that as well.
3733:000 | DONE ins | em 16 16 | 005ad8 | ca          |                 dex                  
3734:000 | DONE ins | em 16 16 | 005ad9 | ca          |                 dex                  
3735:000 | DONE ins | em 16 16 | 005ada | ca          |                 dex                  
3736:000 | DONE ins | em 16 16 | 005adb | ca          |                 dex                  
3737:000 | DONE wsp | em 16 16 |        |             |
3738:000 | DONE ins | em 16 16 | 005adc | 7a          |                 ply                  restore old TOS as 3OS
3739:000 | DONE ins | em 16 16 | 005add | 94 02       |                 sty.dx 02            
3740:000 | DONE wsp | em 16 16 |        |             |
3741:000 | DONE ins | em 16 16 | 005adf | a5 08       |                 lda.d 000008         
3742:000 | DONE ins | em 16 16 | 005ae1 | 18          |                 clc                  
3743:000 | DONE ins | em 16 16 | 005ae2 | 65 0a       |                 adc.d 00000a         
3744:000 | DONE ins | em 16 16 | 005ae4 | 95 00       |                 sta.dx 00            Address as NOS
3745:000 | DONE wsp | em 16 16 |        |             |
3746:000 | DONE ins | em 16 16 | 005ae6 | a0 00 00    |                 ldy.# 0000           TOS
3747:000 | DONE wsp | em 16 16 |        |             |
3748:000 | DONE ins | em 16 16 | 005ae9 | 60          |                 rts                  don't have to go through PARSE
3749:000 | DONE wsp | em 16 16 |        |             |
3750:000 | DONE lbl | em 16 16 | 005aea |             | parse-name_found                     
3751:000 | DONE dir | em 16 16 |        |             |         .!xy16                       
3752:000 | DONE ins | em 16 16 | 005aea | c2 20       |                 rep 20               
3752:001 | DONE ctl | em 16 16 |        |             |         .!a16
3753:000 | DONE ins | em 16 16 | 005aec | 84 0c       |                 sty.d 00000c         new >IN
3754:000 | DONE wsp | em 16 16 |        |             |
3755:000 | DONE ins | em 16 16 | 005aee | 7a          |                 ply                  recover TOS
3756:000 | DONE ins | em 16 16 | 005aef | ca          |                 dex                  
3757:000 | DONE ins | em 16 16 | 005af0 | ca          |                 dex                  
3758:000 | DONE ins | em 16 16 | 005af1 | 94 00       |                 sty.dx 00            
3759:000 | DONE wsp | em 16 16 |        |             |
3760:000 | DONE ins | em 16 16 | 005af3 | a0 20 00    |                 ldy.# AscSP          put space on TOS for PARSE
3761:000 | DONE wsp | em 16 16 |        |             |
3762:000 | DONE cmt | em 16 16 |        |             |                 ; fall thru to PARSE
3763:000 | DONE wsp | em 16 16 |        |             |
3764:000 | DONE cmt | em 16 16 |        |             | ; -------------------------------------------------------------------
3765:000 | DONE cmt | em 16 16 |        |             | ; PARSE ( c "name" -- addr u ) 45 bytes / X+ cycles
3766:000 | DONE cmt | em 16 16 |        |             | ; Find word in input string delimited by character given Do not skip leading
3767:000 | DONE cmt | em 16 16 |        |             | ; delimiters, this is an important difference to PARSE-NAME. PARSE and
3768:000 | DONE cmt | em 16 16 |        |             | ; PARSE-NAME replace WORD in modern systems. See the ANSI documentation at
3769:000 | DONE cmt | em 16 16 |        |             | ; http://www.forth200x.org/documents/html3/rationale.html#rat:core:PARSE
3770:000 | DONE cmt | em 16 16 |        |             | ; PARSE-NAME drops through to here
3771:000 | DONE cmt | em 16 16 |        |             | ;
3772:000 | DONE cmt | em 16 16 |        |             | ;    cib   cib+toin    cib+ciblen
3773:000 | DONE cmt | em 16 16 |        |             | ;     v       v             v
3774:000 | DONE cmt | em 16 16 |        |             | ;     |#####################|              Length of found string:
3775:000 | DONE cmt | em 16 16 |        |             | ;                                          ciblen - toin
3776:000 | DONE cmt | em 16 16 |        |             | ;     +------>|  toin (>IN)
3777:000 | DONE cmt | em 16 16 |        |             | ;     +-------------------->|  ciblen
3778:000 | DONE cmt | em 16 16 |        |             | ;
3779:000 | DONE cmt | em 16 16 |        |             | ; The input string is stored starting at the address in the Current Input Buffer
3780:000 | DONE cmt | em 16 16 |        |             | ; (CIB), the length of which is in CIBLEN. While searching for the delimiter,
3781:000 | DONE cmt | em 16 16 |        |             | ; TOIN (>IN) points to the where we currently are. Since PARSE does not skip
3782:000 | DONE cmt | em 16 16 |        |             | ; leading delimiters, we assume we are on a useful string.
3783:000 | DONE lbl | em 16 16 | 005af6 |             | xt_parse                             
3784:000 | DONE dir | em 16 16 |        |             |         .!a16                        
3785:000 | DONE dir | em 16 16 |        |             |         .!xy16                       
3786:000 | DONE ins | em 16 16 | 005af6 | 84 1c       |                 sty.d 00001c         save delimiter, char is LSB
3787:000 | DONE wsp | em 16 16 |        |             |
3788:000 | DONE cmt | em 16 16 |        |             |                 ; save beginning of new word (cib+toin) to NOS. Don't need to
3789:000 | DONE cmt | em 16 16 |        |             |                 ; worry about TOS because Y gets clobbered anyway before we
3790:000 | DONE cmt | em 16 16 |        |             |                 ; return
3791:000 | DONE ins | em 16 16 | 005af8 | a5 0c       |                 lda.d 00000c         
3792:000 | DONE ins | em 16 16 | 005afa | 85 20       |                 sta.d 000020         save >IN for later length calculation
3793:000 | DONE ins | em 16 16 | 005afc | 18          |                 clc                  
3794:000 | DONE ins | em 16 16 | 005afd | 65 08       |                 adc.d 000008         
3795:000 | DONE wsp | em 16 16 |        |             |
3796:000 | DONE ins | em 16 16 | 005aff | ca          |                 dex                  save addr as NOS
3797:000 | DONE ins | em 16 16 | 005b00 | ca          |                 dex                  
3798:000 | DONE ins | em 16 16 | 005b01 | 95 00       |                 sta.dx 00            
3799:000 | DONE wsp | em 16 16 |        |             |
3800:000 | DONE ins | em 16 16 | 005b03 | 64 1e       |                 stz.d 00001e         offset for EOL/char found adjustment of >IN
3801:000 | DONE wsp | em 16 16 |        |             |
3802:000 | DONE cmt | em 16 16 |        |             |                 ; prepare loop using Y as index
3803:000 | DONE ins | em 16 16 | 005b05 | a4 0c       |                 ldy.d 00000c         
3804:000 | DONE ins | em 16 16 | 005b07 | e2 20       |                 sep 20               
3804:001 | DONE ctl | em  8 16 |        |             |         .!a8
3805:000 | DONE wsp | em  8 16 |        |             |
3806:000 | DONE lbl | em  8 16 | 005b09 |             | parse_loop                           
3807:000 | DONE ins | em  8 16 | 005b09 | c4 0a       |                 cpy.d 00000a         check for EOL first
3808:000 | DONE ins | em  8 16 | 005b0b | f0 0d       |                 beq 005b1a           
3809:000 | DONE wsp | em  8 16 |        |             |
3810:000 | DONE ins | em  8 16 | 005b0d | b1 08       |                 lda.diy 000008       LDA (CIB),Y
3811:000 | DONE ins | em  8 16 | 005b0f | c5 1c       |                 cmp.d 00001c         found delimiter?
3812:000 | DONE ins | em  8 16 | 005b11 | f0 03       |                 beq 005b16           
3813:000 | DONE ins | em  8 16 | 005b13 | c8          |                 iny                  
3814:000 | DONE ins | em  8 16 | 005b14 | 80 f3       |                 bra 005b09           
3815:000 | DONE wsp | em  8 16 |        |             |
3816:000 | DONE lbl | em  8 16 | 005b16 |             | parse_found_delimiter                
3817:000 | DONE cmt | em  8 16 |        |             |                 ; If we haven't reached the end of the line, but found
3818:000 | DONE cmt | em  8 16 |        |             |                 ; a delimiter, we want >IN to point to the next character after
3819:000 | DONE cmt | em  8 16 |        |             |                 ; the delimiter, not the delimiter itself. This is what the
3820:000 | DONE cmt | em  8 16 |        |             |                 ; offset is for
3821:000 | DONE ins | em  8 16 | 005b16 | c2 20       |                 rep 20               
3821:001 | DONE ctl | em 16 16 |        |             |         .!a16
3822:000 | DONE ins | em 16 16 | 005b18 | e6 1e       |                 inc.d 00001e         
3823:000 | DONE wsp | em 16 16 |        |             |
3824:000 | DONE lbl | em 16 16 | 005b1a |             | parse_reached_eol                    
3825:000 | DONE cmt | em 16 16 |        |             |                 ; calculate length of string found (see ascii drawing)
3826:000 | DONE dir | em 16 16 |        |             |         .!xy16                       
3827:000 | DONE ins | em 16 16 | 005b1a | c2 20       |                 rep 20               
3827:001 | DONE ctl | em 16 16 |        |             |         .!a16
3828:000 | DONE ins | em 16 16 | 005b1c | 98          |                 tya                  
3829:000 | DONE ins | em 16 16 | 005b1d | 38          |                 sec                  
3830:000 | DONE ins | em 16 16 | 005b1e | e5 20       |                 sbc.d 000020         original value for >IN / index of first char
3831:000 | DONE ins | em 16 16 | 005b20 | 48          |                 pha                  save so we can manipulate Y
3832:000 | DONE wsp | em 16 16 |        |             |
3833:000 | DONE cmt | em 16 16 |        |             |                 ; calculate new >IN
3834:000 | DONE ins | em 16 16 | 005b21 | 98          |                 tya                  
3835:000 | DONE ins | em 16 16 | 005b22 | 18          |                 clc                  
3836:000 | DONE ins | em 16 16 | 005b23 | 65 1e       |                 adc.d 00001e         offset for EOL vs found delimiter
3837:000 | DONE ins | em 16 16 | 005b25 | 85 0c       |                 sta.d 00000c         
3838:000 | DONE wsp | em 16 16 |        |             |
3839:000 | DONE ins | em 16 16 | 005b27 | 7a          |                 ply                  length of string in TOS
3840:000 | DONE wsp | em 16 16 |        |             |
3841:000 | DONE lbl | em 16 16 | 005b28 |             | z_parse-name                         
3842:000 | DONE lbl | em 16 16 | 005b28 |             | z_parse                              
3842:001 | DONE ins | em 16 16 | 005b28 | 60          |                 rts                  
3843:000 | DONE wsp | em 16 16 |        |             |
3844:000 | DONE wsp | em 16 16 |        |             |
3845:000 | DONE cmt | em 16 16 |        |             | ; -------------------------------------------------------------------
3846:000 | DONE cmt | em 16 16 |        |             | ; PICK ( n n u -- n n n ) X bytes / X cycles
3847:000 | DONE cmt | em 16 16 |        |             | ; Take the u-th element out of the stack and put it on TOS, overwriting the
3848:000 | DONE cmt | em 16 16 |        |             | ; current TOS. 0 PICK is equivalent to DUP, 1 PICK to OVER. Note that using PICK
3849:000 | DONE cmt | em 16 16 |        |             | ; is considered poor coding form. Also note that FIG Forth has a different
3850:000 | DONE cmt | em 16 16 |        |             | ; behavior for PICK than ANS Forth.
3851:000 | DONE cmt | em 16 16 |        |             | ; TODO use DEPTH to check for underflow
3852:000 | DONE lbl | em 16 16 | 005b29 |             | xt_pick                              
3853:000 | DONE ins | em 16 16 | 005b29 | 86 22       |                 stx.d 000022         
3854:000 | DONE wsp | em 16 16 |        |             |
3855:000 | DONE ins | em 16 16 | 005b2b | 98          |                 tya                  Y is just an offset to the DSP
3856:000 | DONE ins | em 16 16 | 005b2c | 0a          |                 asl.a                double because of cell size two bytes
3857:000 | DONE wsp | em 16 16 |        |             |
3858:000 | DONE ins | em 16 16 | 005b2d | 18          |                 clc                  
3859:000 | DONE ins | em 16 16 | 005b2e | 65 22       |                 adc.d 000022         
3860:000 | DONE wsp | em 16 16 |        |             |
3861:000 | DONE ins | em 16 16 | 005b30 | aa          |                 tax                  
3862:000 | DONE ins | em 16 16 | 005b31 | b5 00       |                 lda.dx 00            LDA $00,X
3863:000 | DONE ins | em 16 16 | 005b33 | a8          |                 tay                  Is now TOS
3864:000 | DONE wsp | em 16 16 |        |             |
3865:000 | DONE ins | em 16 16 | 005b34 | a6 22       |                 ldx.d 000022         
3866:000 | DONE wsp | em 16 16 |        |             |
3867:000 | DONE lbl | em 16 16 | 005b36 |             | z_pick                               
3867:001 | DONE ins | em 16 16 | 005b36 | 60          |                 rts                  
3868:000 | DONE wsp | em 16 16 |        |             |
3869:000 | DONE wsp | em 16 16 |        |             |
3870:000 | DONE cmt | em 16 16 |        |             | ; -------------------------------------------------------------------
3871:000 | DONE cmt | em 16 16 |        |             | ; +! "PLUSSTORE" ( n addr -- ) 15 bytes / X cycles
3872:000 | DONE cmt | em 16 16 |        |             | ; Add NOS to address in TOS
3873:000 | DONE lbl | em 16 16 | 005b37 |             | xt_plusstore                         
3874:000 | DONE dir | em 16 16 |        |             |         .!a16                        
3875:000 | DONE ins | em 16 16 | 005b37 | b9 00 00    |                 lda.y 0000           
3876:000 | DONE ins | em 16 16 | 005b3a | 18          |                 clc                  
3877:000 | DONE ins | em 16 16 | 005b3b | 75 00       |                 adc.dx 00            
3878:000 | DONE ins | em 16 16 | 005b3d | 99 00 00    |                 sta.y 0000           
3879:000 | DONE wsp | em 16 16 |        |             |
3880:000 | DONE ins | em 16 16 | 005b40 | b4 02       |                 ldy.dx 02            
3881:000 | DONE ins | em 16 16 | 005b42 | e8          |                 inx                  
3882:000 | DONE ins | em 16 16 | 005b43 | e8          |                 inx                  
3883:000 | DONE ins | em 16 16 | 005b44 | e8          |                 inx                  
3884:000 | DONE ins | em 16 16 | 005b45 | e8          |                 inx                  
3885:000 | DONE wsp | em 16 16 |        |             |
3886:000 | DONE lbl | em 16 16 | 005b46 |             | z_plusstore                          
3886:001 | DONE ins | em 16 16 | 005b46 | 60          |                 rts                  
3887:000 | DONE wsp | em 16 16 |        |             |
3888:000 | DONE wsp | em 16 16 |        |             |
3889:000 | DONE cmt | em 16 16 |        |             | ; -------------------------------------------------------------------
3890:000 | DONE cmt | em 16 16 |        |             | ; POSTPONE ( -- ) X bytes / X cycles
3891:000 | DONE cmt | em 16 16 |        |             | ; Add the compilation behavior of a word to a new word at compile time. If the
3892:000 | DONE cmt | em 16 16 |        |             | ; word that follows it is immediate, include it so that it will be compiled when
3893:000 | DONE cmt | em 16 16 |        |             | ; the word being defined is itself used for a new word. Tricky, but very useful.
3894:000 | DONE cmt | em 16 16 |        |             | ; Because POSTPONE expects a word (not an xt) in the input stream (not on the
3895:000 | DONE cmt | em 16 16 |        |             | ; Data Stack). This means we cannot build words with "jsr xt_postpone, jsr
3896:000 | DONE cmt | em 16 16 |        |             | ; <word>" directly. This word uses tmp1
3897:000 | DONE lbl | em 16 16 | 005b47 |             | xt_postpone                          
3898:000 | DONE cmt | em 16 16 |        |             |                 ; get name from string
3899:000 | DONE ins | em 16 16 | 005b47 | 20 c4 5a    |                 jsr 005ac4           ( addr n )
3900:000 | DONE wsp | em 16 16 |        |             |
3901:000 | DONE cmt | em 16 16 |        |             |                 ; if there is no word in stream, complain and abort
3902:000 | DONE ins | em 16 16 | 005b4a | d0 06       |                 bne 005b52           
3903:000 | DONE ins | em 16 16 | 005b4c | a9 9f 6e    |                 lda.# 006e9f         
3904:000 | DONE ins | em 16 16 | 005b4f | 4c 8c 67    |                 jmp 00678c           
3905:000 | DONE wsp | em 16 16 |        |             |
3906:000 | DONE lbl | em 16 16 | 005b52 |             | pp_got_word                          
3907:000 | DONE ins | em 16 16 | 005b52 | 20 17 58    |                 jsr 005817           ( nt | 0 )
3908:000 | DONE wsp | em 16 16 |        |             |
3909:000 | DONE cmt | em 16 16 |        |             |                 ; if word is not in Dictionary, complain and abort
3910:000 | DONE ins | em 16 16 | 005b55 | d0 03       |                 bne 005b5a           
3911:000 | DONE ins | em 16 16 | 005b57 | a9 3c 6f    |                 lda.# 006f3c         
3912:000 | DONE wsp | em 16 16 |        |             |
3913:000 | DONE lbl | em 16 16 | 005b5a |             | pp_got_nt                            
3914:000 | DONE cmt | em 16 16 |        |             |                 ; Keep nt safe for later use
3915:000 | DONE ins | em 16 16 | 005b5a | 84 1c       |                 sty.d 00001c         
3916:000 | DONE wsp | em 16 16 |        |             |
3917:000 | DONE cmt | em 16 16 |        |             |                 ; We need the xt instead of the nt for the actual compiling
3918:000 | DONE ins | em 16 16 | 005b5c | 20 e4 59    |                 jsr 0059e4           NAME>INT ( nt -- xt )
3919:000 | DONE wsp | em 16 16 |        |             |
3920:000 | DONE cmt | em 16 16 |        |             |                 ; See if this is an immediate word. This is easier with nt than
3921:000 | DONE cmt | em 16 16 |        |             |                 ; with xt
3922:000 | DONE ins | em 16 16 | 005b5f | b2 1c       |                 lda.di 00001c        LDA (TMP1) - get status byte of word
3923:000 | DONE ins | em 16 16 | 005b61 | eb          |                 xba                  flags are MSB
3924:000 | DONE ins | em 16 16 | 005b62 | 29 02 00    |                 and.# IM             mask everything but Immediate bit
3925:000 | DONE ins | em 16 16 | 005b65 | f0 03       |                 beq 005b6a           
3926:000 | DONE wsp | em 16 16 |        |             |
3927:000 | DONE cmt | em 16 16 |        |             |                 ; The word is immediate, so instead of executing it right now,
3928:000 | DONE cmt | em 16 16 |        |             |                 ; we compile it. xt is on the stack, so this is simple. The RTS
3929:000 | DONE cmt | em 16 16 |        |             |                 ; of COMPILE, takes us back to the original caller
3930:000 | DONE ins | em 16 16 | 005b67 | 4c df 55    |                 jmp 0055df           JSR/RTS
3931:000 | DONE wsp | em 16 16 |        |             |
3932:000 | DONE lbl | em 16 16 | 005b6a |             | pp_not_immediate                     
3933:000 | DONE cmt | em 16 16 |        |             |                 ; This is not an immediate word, so we enact "deferred
3934:000 | DONE cmt | em 16 16 |        |             |                 ; compilation" by including ' <NAME> COMPILE, which we do by
3935:000 | DONE cmt | em 16 16 |        |             |                 ; compiling the run-time routine of LITERAL, the xt itself, and
3936:000 | DONE cmt | em 16 16 |        |             |                 ; a subroutine jump to COMPILE,
3937:000 | DONE ins | em 16 16 | 005b6a | f4 42 59    |                 phe.# 005942         PEA LITERAL_RT
3938:000 | DONE ins | em 16 16 | 005b6d | 20 6b 67    |                 jsr 00676b           
3939:000 | DONE wsp | em 16 16 |        |             |
3940:000 | DONE cmt | em 16 16 |        |             |                 ; The xt is TOS. We can't use COMPILE, here because it might
3941:000 | DONE cmt | em 16 16 |        |             |                 ; decided to do something silly like compile it as a native word
3942:000 | DONE cmt | em 16 16 |        |             |                 ; and ruin everything
3943:000 | DONE ins | em 16 16 | 005b70 | 20 2d 52    |                 jsr 00522d           
3944:000 | DONE wsp | em 16 16 |        |             |
3945:000 | DONE cmt | em 16 16 |        |             |                 ; compile COMPILE, - it's RTS takes us back to original caller
3946:000 | DONE ins | em 16 16 | 005b73 | f4 df 55    |                 phe.# 0055df         
3947:000 | DONE ins | em 16 16 | 005b76 | 20 6b 67    |                 jsr 00676b           JSR/RTS
3948:000 | DONE wsp | em 16 16 |        |             |
3949:000 | DONE lbl | em 16 16 | 005b79 |             | z_postpone                           
3949:001 | DONE ins | em 16 16 | 005b79 | 60          |                 rts                  
3950:000 | DONE wsp | em 16 16 |        |             |
3951:000 | DONE wsp | em 16 16 |        |             |
3952:000 | DONE cmt | em 16 16 |        |             | ; -------------------------------------------------------------------
3953:000 | DONE cmt | em 16 16 |        |             | ; R@ "RFETCH" ( -- n ) (R: n -- n )  X bytes / X cycles
3954:000 | DONE cmt | em 16 16 |        |             | ; Get (not pull) Top of Return Stack. We follow Gforth in that this word is not
3955:000 | DONE cmt | em 16 16 |        |             | ; compiled only, because it can be interesting to know what the top of R is in
3956:000 | DONE cmt | em 16 16 |        |             | ; an interactive setting. However, this causes all kinds of problems if we try
3957:000 | DONE cmt | em 16 16 |        |             | ; to natively compile the word, so it does not get the NC flag even though it is
3958:000 | DONE cmt | em 16 16 |        |             | ; actually short enough to make that reasonable
3959:000 | DONE cmt | em 16 16 |        |             | ; TODO consider special case in COMPILE, see there
3960:000 | DONE lbl | em 16 16 | 005b7a |             | xt_rfetch                            
3961:000 | DONE cmt | em 16 16 |        |             |                 ; get return address that is on top of the return stack
3962:000 | DONE ins | em 16 16 | 005b7a | 68          |                 pla                  
3963:000 | DONE wsp | em 16 16 |        |             |
3964:000 | DONE ins | em 16 16 | 005b7b | ca          |                 dex                  
3965:000 | DONE ins | em 16 16 | 005b7c | ca          |                 dex                  
3966:000 | DONE ins | em 16 16 | 005b7d | 94 00       |                 sty.dx 00            
3967:000 | DONE wsp | em 16 16 |        |             |
3968:000 | DONE ins | em 16 16 | 005b7f | 7a          |                 ply                  get top of return stack and push copy back again
3969:000 | DONE ins | em 16 16 | 005b80 | 5a          |                 phy                  
3970:000 | DONE wsp | em 16 16 |        |             |
3971:000 | DONE ins | em 16 16 | 005b81 | 48          |                 pha                  restore the return address
3972:000 | DONE wsp | em 16 16 |        |             |
3973:000 | DONE lbl | em 16 16 | 005b82 |             | z_rfetch                             
3973:001 | DONE ins | em 16 16 | 005b82 | 60          |                 rts                  
3974:000 | DONE wsp | em 16 16 |        |             |
3975:000 | DONE wsp | em 16 16 |        |             |
3976:000 | DONE cmt | em 16 16 |        |             | ; -------------------------------------------------------------------
3977:000 | DONE cmt | em 16 16 |        |             | ; R> "FROMR" ( -- n ) (R: n -- )  7 bytes / 23 cycles
3978:000 | DONE cmt | em 16 16 |        |             | ; Move Top of Return Stack to Top of Data Stack. Remember we have to move the
3979:000 | DONE cmt | em 16 16 |        |             | ; jump address out of the way first.
3980:000 | DONE cmt | em 16 16 |        |             | ; TODO consider stripping PHA/PLA if natively compiled (see COMPILE,)
3981:000 | DONE lbl | em 16 16 | 005b83 |             | xt_fromr                             
3982:000 | DONE cmt | em 16 16 |        |             |                 ; Rescue the address of the return jump that is currently top of
3983:000 | DONE cmt | em 16 16 |        |             |                 ; the Return Stack. If this word is natively compiled, this is
3984:000 | DONE cmt | em 16 16 |        |             |                 ; a waste of nine cycles
3985:000 | DONE ins | em 16 16 | 005b83 | 68          |                 pla                  
3986:000 | DONE wsp | em 16 16 |        |             |
3987:000 | DONE ins | em 16 16 | 005b84 | ca          |                 dex                  
3988:000 | DONE ins | em 16 16 | 005b85 | ca          |                 dex                  
3989:000 | DONE ins | em 16 16 | 005b86 | 94 00       |                 sty.dx 00            
3990:000 | DONE wsp | em 16 16 |        |             |
3991:000 | DONE ins | em 16 16 | 005b88 | 7a          |                 ply                  the actual work
3992:000 | DONE wsp | em 16 16 |        |             |
3993:000 | DONE ins | em 16 16 | 005b89 | 48          |                 pha                  get return address back
3994:000 | DONE wsp | em 16 16 |        |             |
3995:000 | DONE lbl | em 16 16 | 005b8a |             | z_fromr                              
3995:001 | DONE ins | em 16 16 | 005b8a | 60          |                 rts                  
3996:000 | DONE wsp | em 16 16 |        |             |
3997:000 | DONE wsp | em 16 16 |        |             |
3998:000 | DONE cmt | em 16 16 |        |             | ; -------------------------------------------------------------------
3999:000 | DONE cmt | em 16 16 |        |             | ; REFILL ( -- f ) X bytes / X cycles
4000:000 | DONE cmt | em 16 16 |        |             | ; "Attempt to fill the input buffer from the input source, returning a true flag
4001:000 | DONE cmt | em 16 16 |        |             | ; if successful. When the input source is the user input device, attempt to
4002:000 | DONE cmt | em 16 16 |        |             | ; receive input into the terminal input buffer. If successful, make the result
4003:000 | DONE cmt | em 16 16 |        |             | ; the input buffer, set >IN to zero, and return true. Receipt of a line
4004:000 | DONE cmt | em 16 16 |        |             | ; containing no characters is considered successful. If there is no input
4005:000 | DONE cmt | em 16 16 |        |             | ; available from the current input source, return false. When the input source
4006:000 | DONE cmt | em 16 16 |        |             | ; is a string from EVALUATE, return false and perform no other action."
4007:000 | DONE cmt | em 16 16 |        |             | ; See https://www.complang.tuwien.ac.at/forth/gforth/Docs-html/The-Input-Stream.html
4008:000 | DONE cmt | em 16 16 |        |             | ; and Conklin & Rather p. 156
4009:000 | DONE lbl | em 16 16 | 005b8b |             | xt_refill                            
4010:000 | DONE dir | em 16 16 |        |             |         .!a16                        
4011:000 | DONE dir | em 16 16 |        |             |         .!xy16                       
4012:000 | DONE cmt | em 16 16 |        |             |                 ; Get input source from SOURCE-ID. We don't have blocks in this
4013:000 | DONE cmt | em 16 16 |        |             |                 ; version, or else we would have to check BLK first. This is an
4014:000 | DONE cmt | em 16 16 |        |             |                 ; optimized version of a subroutine jump to SOURCE-ID
4015:000 | DONE ins | em 16 16 | 005b8b | a5 06       |                 lda.d 000006         
4016:000 | DONE ins | em 16 16 | 005b8d | d0 14       |                 bne 005ba3           
4017:000 | DONE wsp | em 16 16 |        |             |
4018:000 | DONE cmt | em 16 16 |        |             |                 ; SOURCE-ID of zero means we're getting stuff from the keyboard
4019:000 | DONE cmt | em 16 16 |        |             |                 ; with ACCEPT.
4020:000 | DONE ins | em 16 16 | 005b8f | ca          |                 dex                  
4021:000 | DONE ins | em 16 16 | 005b90 | ca          |                 dex                  
4022:000 | DONE ins | em 16 16 | 005b91 | ca          |                 dex                  
4023:000 | DONE ins | em 16 16 | 005b92 | ca          |                 dex                  
4024:000 | DONE ins | em 16 16 | 005b93 | 94 02       |                 sty.dx 02            
4025:000 | DONE wsp | em 16 16 |        |             |
4026:000 | DONE ins | em 16 16 | 005b95 | a5 08       |                 lda.d 000008         address of current input buffer NOS
4027:000 | DONE ins | em 16 16 | 005b97 | 95 00       |                 sta.dx 00            
4028:000 | DONE ins | em 16 16 | 005b99 | a0 80 00    |                 ldy.# 000080         max number of chars to accept TOS
4029:000 | DONE wsp | em 16 16 |        |             |
4030:000 | DONE ins | em 16 16 | 005b9c | 20 43 54    |                 jsr 005443           ( addr n1 -- n2)
4031:000 | DONE wsp | em 16 16 |        |             |
4032:000 | DONE cmt | em 16 16 |        |             |                 ; ACCEPT returns the number of characters accepted, but we don't
4033:000 | DONE cmt | em 16 16 |        |             |                 ; need them. We just overwrite TOS this with the flag
4034:000 | DONE ins | em 16 16 | 005b9f | a0 ff ff    |                 ldy.# 0ffff          
4035:000 | DONE wsp | em 16 16 |        |             |
4036:000 | DONE ins | em 16 16 | 005ba2 | 60          |                 rts                  
4037:000 | DONE wsp | em 16 16 |        |             |
4038:000 | DONE lbl | em 16 16 | 005ba3 |             | refill_src_not_kbd                   
4039:000 | DONE cmt | em 16 16 |        |             |                 ; If SOURCE-ID doesn't return a zero, it must be a string in
4040:000 | DONE cmt | em 16 16 |        |             |                 ; memory or a file (remember, no blocks in this version)
4041:000 | DONE ins | em 16 16 | 005ba3 | 1a          |                 inc.a                
4042:000 | DONE ins | em 16 16 | 005ba4 | d0 06       |                 bne 005bac           
4043:000 | DONE wsp | em 16 16 |        |             |
4044:000 | DONE cmt | em 16 16 |        |             |                 ; Simply return FALSE flag as per specification
4045:000 | DONE ins | em 16 16 | 005ba6 | ca          |                 dex                  
4046:000 | DONE ins | em 16 16 | 005ba7 | ca          |                 dex                  
4047:000 | DONE ins | em 16 16 | 005ba8 | 94 00       |                 sty.dx 00            
4048:000 | DONE ins | em 16 16 | 005baa | a8          |                 tay                  
4049:000 | DONE wsp | em 16 16 |        |             |
4050:000 | DONE ins | em 16 16 | 005bab | 60          |                 rts                  
4051:000 | DONE wsp | em 16 16 |        |             |
4052:000 | DONE lbl | em 16 16 | 005bac |             | refill_source_is_not_string          
4053:000 | DONE cmt | em 16 16 |        |             |                 ; Since we don't have blocks, this must mean that we are trying
4054:000 | DONE cmt | em 16 16 |        |             |                 ; to read from a file. However, we don't have files yet, so we
4055:000 | DONE cmt | em 16 16 |        |             |                 ; report an error and jump to ABORT.
4056:000 | DONE ins | em 16 16 | 005bac | a9 f4 6e    |                 lda.# 006ef4         
4057:000 | DONE ins | em 16 16 | 005baf | 4c 8c 67    |                 jmp 00678c           
4058:000 | DONE wsp | em 16 16 |        |             |
4059:000 | DONE lbl | em 16 16 | 005bb2 |             | z_refill                             
4059:001 | DONE ins | em 16 16 | 005bb2 | 60          |                 rts                  dummy for compiling
4060:000 | DONE wsp | em 16 16 |        |             |
4061:000 | DONE wsp | em 16 16 |        |             |
4062:000 | DONE cmt | em 16 16 |        |             | ; -------------------------------------------------------------------
4063:000 | DONE cmt | em 16 16 |        |             | ; ROT ( a b c -- b c a ) X bytes / X cycles
4064:000 | DONE cmt | em 16 16 |        |             | ; Rotate the top three entries downwards (third entry becomes first)
4065:000 | DONE cmt | em 16 16 |        |             | ; Remember this with the "R" for "revolution": The bottom entry becomes the top.
4066:000 | DONE lbl | em 16 16 | 005bb3 |             | xt_rot                               
4067:000 | DONE dir | em 16 16 |        |             |         .!a16                        
4068:000 | DONE dir | em 16 16 |        |             |         .!xy16                       
4069:000 | DONE ins | em 16 16 | 005bb3 | b5 00       |                 lda.dx 00            save b
4070:000 | DONE ins | em 16 16 | 005bb5 | 94 00       |                 sty.dx 00            move c to NOS
4071:000 | DONE ins | em 16 16 | 005bb7 | b4 02       |                 ldy.dx 02            move a to TOS
4072:000 | DONE ins | em 16 16 | 005bb9 | 95 02       |                 sta.dx 02            save b as 3OS
4073:000 | DONE wsp | em 16 16 |        |             |
4074:000 | DONE lbl | em 16 16 | 005bbb |             | z_rot                                
4074:001 | DONE ins | em 16 16 | 005bbb | 60          |                 rts                  
4075:000 | DONE wsp | em 16 16 |        |             |
4076:000 | DONE wsp | em 16 16 |        |             |
4077:000 | DONE cmt | em 16 16 |        |             | ; -------------------------------------------------------------------
4078:000 | DONE cmt | em 16 16 |        |             | ; RSHIFT ( n u -- u ) X bytes / X cycles
4079:000 | DONE cmt | em 16 16 |        |             | ; Shift TOS right, filling vacant bits with zero
4080:000 | DONE lbl | em 16 16 | 005bbc |             | xt_rshift                            
4081:000 | DONE cmt | em 16 16 |        |             |                 ; We shift at most 16 bits, because anything above that will be
4082:000 | DONE cmt | em 16 16 |        |             |                 ; zeros anyway
4083:000 | DONE ins | em 16 16 | 005bbc | 98          |                 tya                  
4084:000 | DONE ins | em 16 16 | 005bbd | 29 0f 00    |                 and.# 000f           
4085:000 | DONE ins | em 16 16 | 005bc0 | f0 09       |                 beq 005bcb           if zero shifts, we're done
4086:000 | DONE wsp | em 16 16 |        |             |
4087:000 | DONE ins | em 16 16 | 005bc2 | a8          |                 tay                  number of shifts is TOS
4088:000 | DONE ins | em 16 16 | 005bc3 | b5 00       |                 lda.dx 00            number is in NOS
4089:000 | DONE lbl | em 16 16 | 005bc5 |             | rshift_loop                          
4090:000 | DONE ins | em 16 16 | 005bc5 | 4a          |                 lsr.a                
4091:000 | DONE ins | em 16 16 | 005bc6 | 88          |                 dey                  
4092:000 | DONE ins | em 16 16 | 005bc7 | d0 fc       |                 bne 005bc5           
4093:000 | DONE wsp | em 16 16 |        |             |
4094:000 | DONE ins | em 16 16 | 005bc9 | 95 00       |                 sta.dx 00            put NOS, which last step will pull up
4095:000 | DONE wsp | em 16 16 |        |             |
4096:000 | DONE lbl | em 16 16 | 005bcb |             | rshift_done                          
4097:000 | DONE ins | em 16 16 | 005bcb | b4 00       |                 ldy.dx 00            
4098:000 | DONE ins | em 16 16 | 005bcd | e8          |                 inx                  
4099:000 | DONE ins | em 16 16 | 005bce | e8          |                 inx                  
4100:000 | DONE wsp | em 16 16 |        |             |
4101:000 | DONE lbl | em 16 16 | 005bcf |             | z_rshift                             
4101:001 | DONE ins | em 16 16 | 005bcf | 60          |                 rts                  
4102:000 | DONE wsp | em 16 16 |        |             |
4103:000 | DONE wsp | em 16 16 |        |             |
4104:000 | DONE cmt | em 16 16 |        |             | ; -------------------------------------------------------------------
4105:000 | DONE cmt | em 16 16 |        |             | ; S" "SQUOTE" ( "string" -- addr u ) X bytes / X cycles
4106:000 | DONE cmt | em 16 16 |        |             | ; Store address and length of string given, returning ( addr u ). ANSI core
4107:000 | DONE cmt | em 16 16 |        |             | ; claims this is compile-only, but the file set expands it to be interpreted, so
4108:000 | DONE cmt | em 16 16 |        |             | ; it is a state-sensitive word, which are evil. This can also be realized as
4109:000 | DONE cmt | em 16 16 |        |             | ; : S" [CHAR] " PARSE POSTPONE SLITERAL ; IMMEDIATE  but it is used so much we
4110:000 | DONE cmt | em 16 16 |        |             | ; want it in code
4111:000 | DONE lbl | em 16 16 | 005bd0 |             | xt_squote                            
4112:000 | DONE cmt | em 16 16 |        |             |                 ; we use PARSE to find the end of the sting. If the string is
4113:000 | DONE cmt | em 16 16 |        |             |                 ; empty, we don't complain, following Gforth's behavior
4114:000 | DONE ins | em 16 16 | 005bd0 | ca          |                 dex                  
4115:000 | DONE ins | em 16 16 | 005bd1 | ca          |                 dex                  
4116:000 | DONE ins | em 16 16 | 005bd2 | 94 00       |                 sty.dx 00            
4117:000 | DONE wsp | em 16 16 |        |             |
4118:000 | DONE ins | em 16 16 | 005bd4 | a0 22 00    |                 ldy.# 0022           ASCII for " in hex
4119:000 | DONE ins | em 16 16 | 005bd7 | 20 f6 5a    |                 jsr 005af6           Returns ( addr u ) of string
4120:000 | DONE wsp | em 16 16 |        |             |
4121:000 | DONE cmt | em 16 16 |        |             |                 ; What happens now depends on the state. If we are compiling, we
4122:000 | DONE cmt | em 16 16 |        |             |                 ; include a subroutine jump to SLITERAL to save the string. If
4123:000 | DONE cmt | em 16 16 |        |             |                 ; we are interpreting, we're done
4124:000 | DONE ins | em 16 16 | 005bda | a5 14       |                 lda.d 000014         
4125:000 | DONE ins | em 16 16 | 005bdc | d0 24       |                 bne 005c02           
4126:000 | DONE wsp | em 16 16 |        |             |
4127:000 | DONE cmt | em 16 16 |        |             | 		; We copy our string to someplace safe because it lives
4128:000 | DONE cmt | em 16 16 |        |             |                 ; dangerously if we leave it in the input buffer. This might
4129:000 | DONE cmt | em 16 16 |        |             |                 ; seem like a lot of effort for a few bytes, but MVN is so fast
4130:000 | DONE cmt | em 16 16 |        |             |                 ; - 7 cycles per byte - that it is worth it. See
4131:000 | DONE cmt | em 16 16 |        |             |                 ; http://forum.6502.org/viewtopic.php?f=2&t=1685&p=50975#p50975
4132:000 | DONE cmt | em 16 16 |        |             |                 ; and http://6502.org/tutorials/65c816opcodes.html#6.6
4133:000 | DONE ins | em 16 16 | 005bde | ca          |                 dex                  
4134:000 | DONE ins | em 16 16 | 005bdf | ca          |                 dex                  
4135:000 | DONE ins | em 16 16 | 005be0 | 94 00       |                 sty.dx 00            
4136:000 | DONE ins | em 16 16 | 005be2 | a4 00       |                 ldy.d 000000         HERE  ( addr-s u addr-d )
4137:000 | DONE wsp | em 16 16 |        |             |
4138:000 | DONE ins | em 16 16 | 005be4 | b5 00       |                 lda.dx 00            SWAP ( addr-s addr-d u )
4139:000 | DONE ins | em 16 16 | 005be6 | 94 00       |                 sty.dx 00            
4140:000 | DONE ins | em 16 16 | 005be8 | a8          |                 tay                  
4141:000 | DONE wsp | em 16 16 |        |             |
4142:000 | DONE ins | em 16 16 | 005be9 | 5a          |                 phy                  save copy of u
4143:000 | DONE ins | em 16 16 | 005bea | b5 00       |                 lda.dx 00            save copy of addr-d
4144:000 | DONE ins | em 16 16 | 005bec | 48          |                 pha                  
4145:000 | DONE wsp | em 16 16 |        |             |
4146:000 | DONE ins | em 16 16 | 005bed | 20 d3 59    |                 jsr 0059d3           
4147:000 | DONE wsp | em 16 16 |        |             |
4148:000 | DONE ins | em 16 16 | 005bf0 | ca          |                 dex                  
4149:000 | DONE ins | em 16 16 | 005bf1 | ca          |                 dex                  
4150:000 | DONE ins | em 16 16 | 005bf2 | ca          |                 dex                  
4151:000 | DONE ins | em 16 16 | 005bf3 | ca          |                 dex                  
4152:000 | DONE ins | em 16 16 | 005bf4 | 94 02       |                 sty.dx 02            
4153:000 | DONE wsp | em 16 16 |        |             |
4154:000 | DONE ins | em 16 16 | 005bf6 | 68          |                 pla                  get addr-d back
4155:000 | DONE ins | em 16 16 | 005bf7 | 95 00       |                 sta.dx 00            put NOS
4156:000 | DONE ins | em 16 16 | 005bf9 | 68          |                 pla                  get u back, put TOS
4157:000 | DONE ins | em 16 16 | 005bfa | a8          |                 tay                  
4158:000 | DONE wsp | em 16 16 |        |             |
4159:000 | DONE cmt | em 16 16 |        |             |                 ; update CP
4160:000 | DONE ins | em 16 16 | 005bfb | 18          |                 clc                  
4161:000 | DONE ins | em 16 16 | 005bfc | 65 00       |                 adc.d 000000         
4162:000 | DONE ins | em 16 16 | 005bfe | 85 00       |                 sta.d 000000         
4163:000 | DONE wsp | em 16 16 |        |             |
4164:000 | DONE ins | em 16 16 | 005c00 | 80 03       |                 bra 005c05           
4165:000 | DONE wsp | em 16 16 |        |             |
4166:000 | DONE lbl | em 16 16 | 005c02 |             | squote_compile                       
4167:000 | DONE cmt | em 16 16 |        |             |                 ; We're compiling, so we need SLITERAL. We use it's RTS while
4168:000 | DONE cmt | em 16 16 |        |             |                 ; we're at it
4169:000 | DONE ins | em 16 16 | 005c02 | 4c 24 5c    |                 jmp 005c24           JSR/RTS
4170:000 | DONE wsp | em 16 16 |        |             |
4171:000 | DONE lbl | em 16 16 | 005c05 |             | z_squote                             
4171:001 | DONE ins | em 16 16 | 005c05 | 60          |                 rts                  
4172:000 | DONE wsp | em 16 16 |        |             |
4173:000 | DONE wsp | em 16 16 |        |             |
4174:000 | DONE cmt | em 16 16 |        |             | ; -------------------------------------------------------------------
4175:000 | DONE cmt | em 16 16 |        |             | ; S>D ( n -- d ) 15 bytes / X cycles
4176:000 | DONE cmt | em 16 16 |        |             | ; Convert a single cell number to double cells, conserving the sign
4177:000 | DONE lbl | em 16 16 | 005c06 |             | xt_stod                              
4178:000 | DONE ins | em 16 16 | 005c06 | ca          |                 dex                  make room on stack
4179:000 | DONE ins | em 16 16 | 005c07 | ca          |                 dex                  
4180:000 | DONE ins | em 16 16 | 005c08 | 94 00       |                 sty.dx 00            
4181:000 | DONE wsp | em 16 16 |        |             |
4182:000 | DONE ins | em 16 16 | 005c0a | 98          |                 tya                  force flag check
4183:000 | DONE ins | em 16 16 | 005c0b | 10 05       |                 bpl 005c12           
4184:000 | DONE wsp | em 16 16 |        |             |
4185:000 | DONE cmt | em 16 16 |        |             |                 ; negative number, extend sign
4186:000 | DONE ins | em 16 16 | 005c0d | a0 ff ff    |                 ldy.# 0ffff          
4187:000 | DONE ins | em 16 16 | 005c10 | 80 03       |                 bra 005c15           
4188:000 | DONE wsp | em 16 16 |        |             |
4189:000 | DONE lbl | em 16 16 | 005c12 |             | stod_pos                             
4190:000 | DONE cmt | em 16 16 |        |             |                 ; positive number
4191:000 | DONE ins | em 16 16 | 005c12 | a0 00 00    |                 ldy.# 0000           fall through
4192:000 | DONE wsp | em 16 16 |        |             |
4193:000 | DONE lbl | em 16 16 | 005c15 |             | z_stod                               
4193:001 | DONE ins | em 16 16 | 005c15 | 60          |                 rts                  
4194:000 | DONE wsp | em 16 16 |        |             |
4195:000 | DONE cmt | em 16 16 |        |             | ; -------------------------------------------------------------------
4196:000 | DONE cmt | em 16 16 |        |             | ; SIGN ( n -- ) 13 bytes / X cycles
4197:000 | DONE cmt | em 16 16 |        |             | ; If TOS is negative, add a minus sign to the pictured output. Code based on
4198:000 | DONE cmt | em 16 16 |        |             | ; https://github.com/philburk/pforth/blob/master/fth/system.fth
4199:000 | DONE cmt | em 16 16 |        |             | ; Origin Forth code is  0< IF [CHAR] - HOLD THEN
4200:000 | DONE lbl | em 16 16 | 005c16 |             | xt_sign                              
4201:000 | DONE dir | em 16 16 |        |             |         .!a16                        
4202:000 | DONE cmt | em 16 16 |        |             |                 ; See if number is negative
4203:000 | DONE ins | em 16 16 | 005c16 | 98          |                 tya                  force flag check
4204:000 | DONE ins | em 16 16 | 005c17 | 10 06       |                 bpl 005c1f           
4205:000 | DONE wsp | em 16 16 |        |             |
4206:000 | DONE cmt | em 16 16 |        |             |                 ; We're negative, overwrite number TOS
4207:000 | DONE ins | em 16 16 | 005c19 | a0 2d 00    |                 ldy.# 002d           ASCII for '-'
4208:000 | DONE wsp | em 16 16 |        |             |
4209:000 | DONE ins | em 16 16 | 005c1c | 4c 0a 59    |                 jmp 00590a           JSR/RTS, does not fall through
4210:000 | DONE wsp | em 16 16 |        |             |
4211:000 | DONE lbl | em 16 16 | 005c1f |             | sign_plus                            
4212:000 | DONE ins | em 16 16 | 005c1f | b4 00       |                 ldy.dx 00            get rid of number and leave
4213:000 | DONE ins | em 16 16 | 005c21 | e8          |                 inx                  
4214:000 | DONE ins | em 16 16 | 005c22 | e8          |                 inx                  
4215:000 | DONE wsp | em 16 16 |        |             |
4216:000 | DONE lbl | em 16 16 | 005c23 |             | z_sign                               
4216:001 | DONE ins | em 16 16 | 005c23 | 60          |                 rts                  
4217:000 | DONE wsp | em 16 16 |        |             |
4218:000 | DONE wsp | em 16 16 |        |             |
4219:000 | DONE cmt | em 16 16 |        |             | ; -------------------------------------------------------------------
4220:000 | DONE cmt | em 16 16 |        |             | ; SLITERAL ( addr u -- ) ( -- addr u ) X bytes / X cycles
4221:000 | DONE cmt | em 16 16 |        |             | ; At compile time, store string, at runtime, return address and length of string
4222:000 | DONE cmt | em 16 16 |        |             | ; on the Data Stack. Used for S" among other things. This routine uses tmp1,
4223:000 | DONE cmt | em 16 16 |        |             | ; tmp2
4224:000 | DONE lbl | em 16 16 | 005c24 |             | xt_sliteral                          
4225:000 | DONE dir | em 16 16 |        |             |         .!a16                        
4226:000 | DONE cmt | em 16 16 |        |             |                 ; We can't assume that ( addr u ) of the current string is in
4227:000 | DONE cmt | em 16 16 |        |             |                 ; a stable area, so we first have to move them to safety. Since
4228:000 | DONE cmt | em 16 16 |        |             |                 ; CP points to where the interpreter expects to be able to
4229:000 | DONE cmt | em 16 16 |        |             |                 ; continue in the code, we have to jump over the string. We use
4230:000 | DONE cmt | em 16 16 |        |             |                 ; JMP instead of BRA so we can use longer strings
4231:000 | DONE ins | em 16 16 | 005c24 | b5 00       |                 lda.dx 00            Address of string is NOS
4232:000 | DONE ins | em 16 16 | 005c26 | 85 1c       |                 sta.d 00001c         
4233:000 | DONE ins | em 16 16 | 005c28 | 84 1e       |                 sty.d 00001e         keep copy of string length
4234:000 | DONE wsp | em 16 16 |        |             |
4235:000 | DONE ins | em 16 16 | 005c2a | e2 20       |                 sep 20               
4235:001 | DONE ctl | em  8 16 |        |             |         .!a8
4236:000 | DONE ins | em  8 16 | 005c2c | a9 4c       |                 lda.# 04c            opcode for JMP
4237:000 | DONE ins | em  8 16 | 005c2e | 92 00       |                 sta.di 000000        STA (CP)
4238:000 | DONE ins | em  8 16 | 005c30 | c2 20       |                 rep 20               
4238:001 | DONE ctl | em 16 16 |        |             |         .!a16
4239:000 | DONE ins | em 16 16 | 005c32 | e6 00       |                 inc.d 000000         
4240:000 | DONE wsp | em 16 16 |        |             |
4241:000 | DONE cmt | em 16 16 |        |             |                 ; Our jump target is CP + 2 (for the length of the jump
4242:000 | DONE cmt | em 16 16 |        |             |                 ; instruction itself ) + the length of the string
4243:000 | DONE ins | em 16 16 | 005c34 | a5 1e       |                 lda.d 00001e         string length
4244:000 | DONE ins | em 16 16 | 005c36 | 1a          |                 inc.a                
4245:000 | DONE ins | em 16 16 | 005c37 | 1a          |                 inc.a                
4246:000 | DONE wsp | em 16 16 |        |             |
4247:000 | DONE ins | em 16 16 | 005c38 | 18          |                 clc                  
4248:000 | DONE ins | em 16 16 | 005c39 | 65 00       |                 adc.d 000000         current address
4249:000 | DONE ins | em 16 16 | 005c3b | 92 00       |                 sta.di 000000        store jump target
4250:000 | DONE wsp | em 16 16 |        |             |
4251:000 | DONE cmt | em 16 16 |        |             |                 ; update CP to move past JMP instruction
4252:000 | DONE ins | em 16 16 | 005c3d | e6 00       |                 inc.d 000000         
4253:000 | DONE ins | em 16 16 | 005c3f | e6 00       |                 inc.d 000000         
4254:000 | DONE wsp | em 16 16 |        |             |
4255:000 | DONE cmt | em 16 16 |        |             |                 ; now we can safely copy the code
4256:000 | DONE ins | em 16 16 | 005c41 | 88          |                 dey                  last offset is one less than length
4257:000 | DONE ins | em 16 16 | 005c42 | e2 20       |                 sep 20               
4257:001 | DONE ctl | em  8 16 |        |             |         .!a8
4258:000 | DONE lbl | em  8 16 | 005c44 |             | sl_loop                              
4259:000 | DONE ins | em  8 16 | 005c44 | b1 1c       |                 lda.diy 00001c       LDA (TMP1),Y
4260:000 | DONE ins | em  8 16 | 005c46 | 91 00       |                 sta.diy 000000       STA (CP),Y
4261:000 | DONE ins | em  8 16 | 005c48 | 88          |                 dey                  
4262:000 | DONE ins | em  8 16 | 005c49 | 10 f9       |                 bpl 005c44           
4263:000 | DONE wsp | em  8 16 |        |             |
4264:000 | DONE ins | em  8 16 | 005c4b | c2 20       |                 rep 20               
4264:001 | DONE ctl | em 16 16 |        |             |         .!a16
4265:000 | DONE cmt | em 16 16 |        |             |                 ; keep old CP as new address of string
4266:000 | DONE ins | em 16 16 | 005c4d | a5 00       |                 lda.d 000000         
4267:000 | DONE ins | em 16 16 | 005c4f | 85 1c       |                 sta.d 00001c         overwrites original address
4268:000 | DONE wsp | em 16 16 |        |             |
4269:000 | DONE cmt | em 16 16 |        |             |                 ; update CP
4270:000 | DONE ins | em 16 16 | 005c51 | 18          |                 clc                  
4271:000 | DONE ins | em 16 16 | 005c52 | 65 1e       |                 adc.d 00001e         length of string
4272:000 | DONE ins | em 16 16 | 005c54 | 85 00       |                 sta.d 000000         
4273:000 | DONE wsp | em 16 16 |        |             |
4274:000 | DONE cmt | em 16 16 |        |             |                 ; Compile a subroutine jump to the runtime of SLITERAL that
4275:000 | DONE cmt | em 16 16 |        |             |                 ; pushes the new ( addr u ) pair to the Data Stack. When we're
4276:000 | DONE cmt | em 16 16 |        |             |                 ; done, the code will look like this:
4277:000 | DONE cmt | em 16 16 |        |             |                 ;
4278:000 | DONE cmt | em 16 16 |        |             |                 ; xt -->    jmp a
4279:000 | DONE cmt | em 16 16 |        |             |                 ;           <string data bytes>
4280:000 | DONE cmt | em 16 16 |        |             |                 ;  a -->    jsr sliteral_rt
4281:000 | DONE cmt | em 16 16 |        |             |                 ;           <string address>
4282:000 | DONE cmt | em 16 16 |        |             |                 ;           <string length>
4283:000 | DONE cmt | em 16 16 |        |             |                 ; rts -->
4284:000 | DONE cmt | em 16 16 |        |             |                 ;
4285:000 | DONE cmt | em 16 16 |        |             |                 ; This means we'll have to adjust the return address for two
4286:000 | DONE cmt | em 16 16 |        |             |                 ; cells, not just one
4287:000 | DONE ins | em 16 16 | 005c56 | f4 6f 5c    |                 phe.# 005c6f         
4288:000 | DONE ins | em 16 16 | 005c59 | 20 6b 67    |                 jsr 00676b           
4289:000 | DONE wsp | em 16 16 |        |             |
4290:000 | DONE cmt | em 16 16 |        |             |                 ; We want to have the addr end up as NOS and the length as TOS,
4291:000 | DONE cmt | em 16 16 |        |             |                 ; so we store the address first
4292:000 | DONE ins | em 16 16 | 005c5c | a5 1c       |                 lda.d 00001c         new address of string
4293:000 | DONE ins | em 16 16 | 005c5e | 48          |                 pha                  
4294:000 | DONE ins | em 16 16 | 005c5f | 20 66 67    |                 jsr 006766           
4295:000 | DONE wsp | em 16 16 |        |             |
4296:000 | DONE ins | em 16 16 | 005c62 | a5 1e       |                 lda.d 00001e         
4297:000 | DONE ins | em 16 16 | 005c64 | 48          |                 pha                  
4298:000 | DONE ins | em 16 16 | 005c65 | 20 66 67    |                 jsr 006766           
4299:000 | DONE wsp | em 16 16 |        |             |
4300:000 | DONE cmt | em 16 16 |        |             |                 ; all done, clean up and leave
4301:000 | DONE ins | em 16 16 | 005c68 | b4 02       |                 ldy.dx 02            2DROP
4302:000 | DONE ins | em 16 16 | 005c6a | e8          |                 inx                  
4303:000 | DONE ins | em 16 16 | 005c6b | e8          |                 inx                  
4304:000 | DONE ins | em 16 16 | 005c6c | e8          |                 inx                  
4305:000 | DONE ins | em 16 16 | 005c6d | e8          |                 inx                  
4306:000 | DONE wsp | em 16 16 |        |             |
4307:000 | DONE lbl | em 16 16 | 005c6e |             | z_sliteral                           
4307:001 | DONE ins | em 16 16 | 005c6e | 60          |                 rts                  
4308:000 | DONE wsp | em 16 16 |        |             |
4309:000 | DONE lbl | em 16 16 | 005c6f |             | sliteral_rt                          
4310:000 | DONE cmt | em 16 16 |        |             |                 ; Run time behaviour of SLITERAL: Push ( addr u ) of string to
4311:000 | DONE cmt | em 16 16 |        |             |                 ; the Data Stack. We arrive here with the return address as the
4312:000 | DONE cmt | em 16 16 |        |             |                 ; top of Return Stack, which points to the address of the string
4313:000 | DONE wsp | em 16 16 |        |             |
4314:000 | DONE cmt | em 16 16 |        |             |                 ; Make room on stack, which also frees Y for other use
4315:000 | DONE ins | em 16 16 | 005c6f | ca          |                 dex                  
4316:000 | DONE ins | em 16 16 | 005c70 | ca          |                 dex                  
4317:000 | DONE ins | em 16 16 | 005c71 | ca          |                 dex                  
4318:000 | DONE ins | em 16 16 | 005c72 | ca          |                 dex                  
4319:000 | DONE ins | em 16 16 | 005c73 | 94 02       |                 sty.dx 02            
4320:000 | DONE wsp | em 16 16 |        |             |
4321:000 | DONE cmt | em 16 16 |        |             |                 ; Get the address of the string address off the stack and
4322:000 | DONE cmt | em 16 16 |        |             |                 ; increase by one because of the RTS mechanics
4323:000 | DONE ins | em 16 16 | 005c75 | 7a          |                 ply                  
4324:000 | DONE ins | em 16 16 | 005c76 | c8          |                 iny                  
4325:000 | DONE wsp | em 16 16 |        |             |
4326:000 | DONE ins | em 16 16 | 005c77 | b9 00 00    |                 lda.y 0000           LDA $0000,Y
4327:000 | DONE ins | em 16 16 | 005c7a | 95 00       |                 sta.dx 00            save string address as NOS
4328:000 | DONE ins | em 16 16 | 005c7c | c8          |                 iny                  
4329:000 | DONE ins | em 16 16 | 005c7d | c8          |                 iny                  
4330:000 | DONE ins | em 16 16 | 005c7e | b9 00 00    |                 lda.y 0000           get length of string, will be TOS ...
4331:000 | DONE wsp | em 16 16 |        |             |
4332:000 | DONE ins | em 16 16 | 005c81 | c8          |                 iny                  ... first, though, repair return jump
4333:000 | DONE ins | em 16 16 | 005c82 | 5a          |                 phy                  
4334:000 | DONE wsp | em 16 16 |        |             |
4335:000 | DONE ins | em 16 16 | 005c83 | a8          |                 tay                  TOS is now length of string
4336:000 | DONE wsp | em 16 16 |        |             |
4337:000 | DONE ins | em 16 16 | 005c84 | 60          |                 rts                  
4338:000 | DONE wsp | em 16 16 |        |             |
4339:000 | DONE cmt | em 16 16 |        |             | ; -------------------------------------------------------------------
4340:000 | DONE cmt | em 16 16 |        |             | ; SM/REM ( d n1 -- n2 n3) X bytes / X cycles
4341:000 | DONE cmt | em 16 16 |        |             | ; Symmetic signed division. Compare FM/MOD. Code from Gforth, see
4342:000 | DONE cmt | em 16 16 |        |             | ; https://groups.google.com/forum/#!topic/comp.lang.forth/_bx4dJFb9R0
4343:000 | DONE cmt | em 16 16 |        |             | ; and http://git.savannah.gnu.org/cgit/gforth.git/tree/prim ; see
4344:000 | DONE cmt | em 16 16 |        |             | ; http://www.figuk.plus.com/build/arith.htm for variants. Forth is
4345:000 | DONE cmt | em 16 16 |        |             | ; SM/REM OVER >R DUP >R ABS -ROT DABS ROT UM/MOD R>
4346:000 | DONE cmt | em 16 16 |        |             | ; R@ XOR 0< IF NEGATE THEN R> 0< IF SWAP NEGATE SWAP THEN ;
4347:000 | DONE cmt | em 16 16 |        |             | ; TODO optimize in assembler
4348:000 | DONE lbl | em 16 16 | 005c85 |             | xt_smrem                             
4349:000 | DONE dir | em 16 16 |        |             |         .!a16                        
4350:000 | DONE ins | em 16 16 | 005c85 | 20 a4 5a    |                 jsr 005aa4           
4351:000 | DONE wsp | em 16 16 |        |             |
4352:000 | DONE ins | em 16 16 | 005c88 | 5a          |                 phy                  >R
4353:000 | DONE ins | em 16 16 | 005c89 | b4 00       |                 ldy.dx 00            
4354:000 | DONE ins | em 16 16 | 005c8b | e8          |                 inx                  
4355:000 | DONE ins | em 16 16 | 005c8c | e8          |                 inx                  
4356:000 | DONE wsp | em 16 16 |        |             |
4357:000 | DONE ins | em 16 16 | 005c8d | ca          |                 dex                  DUP
4358:000 | DONE ins | em 16 16 | 005c8e | ca          |                 dex                  
4359:000 | DONE ins | em 16 16 | 005c8f | 94 00       |                 sty.dx 00            
4360:000 | DONE wsp | em 16 16 |        |             |
4361:000 | DONE ins | em 16 16 | 005c91 | 5a          |                 phy                  >R
4362:000 | DONE ins | em 16 16 | 005c92 | b4 00       |                 ldy.dx 00            
4363:000 | DONE ins | em 16 16 | 005c94 | e8          |                 inx                  
4364:000 | DONE ins | em 16 16 | 005c95 | e8          |                 inx                  
4365:000 | DONE wsp | em 16 16 |        |             |
4366:000 | DONE ins | em 16 16 | 005c96 | 20 3a 54    |                 jsr 00543a           ABS
4367:000 | DONE ins | em 16 16 | 005c99 | 20 f5 52    |                 jsr 0052f5           -ROT
4368:000 | DONE ins | em 16 16 | 005c9c | 20 2b 57    |                 jsr 00572b           DABS
4369:000 | DONE ins | em 16 16 | 005c9f | 20 b3 5b    |                 jsr 005bb3           ROT
4370:000 | DONE ins | em 16 16 | 005ca2 | 20 d2 5d    |                 jsr 005dd2           UM/MOD
4371:000 | DONE wsp | em 16 16 |        |             |
4372:000 | DONE ins | em 16 16 | 005ca5 | ca          |                 dex                  R>
4373:000 | DONE ins | em 16 16 | 005ca6 | ca          |                 dex                  
4374:000 | DONE ins | em 16 16 | 005ca7 | 94 00       |                 sty.dx 00            
4375:000 | DONE ins | em 16 16 | 005ca9 | 7a          |                 ply                  
4376:000 | DONE wsp | em 16 16 |        |             |
4377:000 | DONE ins | em 16 16 | 005caa | ca          |                 dex                  R@
4378:000 | DONE ins | em 16 16 | 005cab | ca          |                 dex                  
4379:000 | DONE ins | em 16 16 | 005cac | 94 00       |                 sty.dx 00            
4380:000 | DONE ins | em 16 16 | 005cae | 7a          |                 ply                  
4381:000 | DONE ins | em 16 16 | 005caf | 5a          |                 phy                  
4382:000 | DONE wsp | em 16 16 |        |             |
4383:000 | DONE ins | em 16 16 | 005cb0 | 20 95 5e    |                 jsr 005e95           XOR
4384:000 | DONE wsp | em 16 16 |        |             |
4385:000 | DONE ins | em 16 16 | 005cb3 | 98          |                 tya                  0< IF
4386:000 | DONE ins | em 16 16 | 005cb4 | 10 09       |                 bpl 005cbf           
4387:000 | DONE wsp | em 16 16 |        |             |
4388:000 | DONE ins | em 16 16 | 005cb6 | b4 00       |                 ldy.dx 00            from IF
4389:000 | DONE ins | em 16 16 | 005cb8 | e8          |                 inx                  
4390:000 | DONE ins | em 16 16 | 005cb9 | e8          |                 inx                  
4391:000 | DONE wsp | em 16 16 |        |             |
4392:000 | DONE ins | em 16 16 | 005cba | 20 07 5a    |                 jsr 005a07           NEGATE
4393:000 | DONE ins | em 16 16 | 005cbd | 80 04       |                 bra 005cc3           
4394:000 | DONE lbl | em 16 16 | 005cbf |             | smrem_1                              
4395:000 | DONE ins | em 16 16 | 005cbf | b4 00       |                 ldy.dx 00            from IF
4396:000 | DONE ins | em 16 16 | 005cc1 | e8          |                 inx                  
4397:000 | DONE ins | em 16 16 | 005cc2 | e8          |                 inx                  
4398:000 | DONE wsp | em 16 16 |        |             |
4399:000 | DONE lbl | em 16 16 | 005cc3 |             | smrem_1_1                            
4400:000 | DONE ins | em 16 16 | 005cc3 | ca          |                 dex                  R>
4401:000 | DONE ins | em 16 16 | 005cc4 | ca          |                 dex                  
4402:000 | DONE ins | em 16 16 | 005cc5 | 94 00       |                 sty.dx 00            
4403:000 | DONE ins | em 16 16 | 005cc7 | 7a          |                 ply                  
4404:000 | DONE wsp | em 16 16 |        |             |
4405:000 | DONE ins | em 16 16 | 005cc8 | 98          |                 tya                  0< IF
4406:000 | DONE ins | em 16 16 | 005cc9 | 10 0f       |                 bpl 005cda           
4407:000 | DONE wsp | em 16 16 |        |             |
4408:000 | DONE ins | em 16 16 | 005ccb | b4 00       |                 ldy.dx 00            from IF
4409:000 | DONE ins | em 16 16 | 005ccd | e8          |                 inx                  
4410:000 | DONE ins | em 16 16 | 005cce | e8          |                 inx                  
4411:000 | DONE wsp | em 16 16 |        |             |
4412:000 | DONE ins | em 16 16 | 005ccf | 20 16 5d    |                 jsr 005d16           
4413:000 | DONE ins | em 16 16 | 005cd2 | 20 07 5a    |                 jsr 005a07           
4414:000 | DONE ins | em 16 16 | 005cd5 | 20 16 5d    |                 jsr 005d16           
4415:000 | DONE ins | em 16 16 | 005cd8 | 80 04       |                 bra 005cde           
4416:000 | DONE wsp | em 16 16 |        |             |
4417:000 | DONE lbl | em 16 16 | 005cda |             | smrem_2                              
4418:000 | DONE ins | em 16 16 | 005cda | b4 00       |                 ldy.dx 00            
4419:000 | DONE ins | em 16 16 | 005cdc | e8          |                 inx                  
4420:000 | DONE ins | em 16 16 | 005cdd | e8          |                 inx                  
4421:000 | DONE wsp | em 16 16 |        |             |
4422:000 | DONE wsp | em 16 16 |        |             |
4423:000 | DONE lbl | em 16 16 | 005cde |             | smrem_2_1                            
4424:000 | DONE wsp | em 16 16 |        |             |
4425:000 | DONE lbl | em 16 16 | 005cde |             | z_smrem                              
4425:001 | DONE ins | em 16 16 | 005cde | 60          |                 rts                  
4426:000 | DONE wsp | em 16 16 |        |             |
4427:000 | DONE wsp | em 16 16 |        |             |
4428:000 | DONE cmt | em 16 16 |        |             | ; -------------------------------------------------------------------
4429:000 | DONE cmt | em 16 16 |        |             | ; SOURCE ( -- addr u ) 12 bytes / X cycles
4430:000 | DONE cmt | em 16 16 |        |             | ; Return the address and size of current input buffer. Replaces TIB and #TIB in
4431:000 | DONE cmt | em 16 16 |        |             | ; ANSI Forth
4432:000 | DONE wsp | em 16 16 |        |             |
4433:000 | DONE lbl | em 16 16 | 005cdf |             | xt_source                            
4434:000 | DONE ins | em 16 16 | 005cdf | ca          |                 dex                  make room on Data Stack
4435:000 | DONE ins | em 16 16 | 005ce0 | ca          |                 dex                  
4436:000 | DONE ins | em 16 16 | 005ce1 | ca          |                 dex                  
4437:000 | DONE ins | em 16 16 | 005ce2 | ca          |                 dex                  
4438:000 | DONE ins | em 16 16 | 005ce3 | 94 02       |                 sty.dx 02            
4439:000 | DONE wsp | em 16 16 |        |             |
4440:000 | DONE ins | em 16 16 | 005ce5 | a5 08       |                 lda.d 000008         address of current input buffer as NOS
4441:000 | DONE ins | em 16 16 | 005ce7 | 95 00       |                 sta.dx 00            
4442:000 | DONE wsp | em 16 16 |        |             |
4443:000 | DONE ins | em 16 16 | 005ce9 | a4 0a       |                 ldy.d 00000a         length of current input buffer as TOS
4444:000 | DONE wsp | em 16 16 |        |             |
4445:000 | DONE lbl | em 16 16 | 005ceb |             | z_source                             
4445:001 | DONE ins | em 16 16 | 005ceb | 60          |                 rts                  
4446:000 | DONE wsp | em 16 16 |        |             |
4447:000 | DONE cmt | em 16 16 |        |             | ; -------------------------------------------------------------------
4448:000 | DONE cmt | em 16 16 |        |             | ; SOURCE-ID ( -- n ) 6 bytes / 13 cycles
4449:000 | DONE cmt | em 16 16 |        |             | ; Identify the input source unless it is a block (s. Conklin & Rather p. 156).
4450:000 | DONE cmt | em 16 16 |        |             | ; Since we don't have blocks (yet), this will give the input source: 0 is
4451:000 | DONE cmt | em 16 16 |        |             | ; keyboard, -1 (0ffff) is character string, and a text file gives the fileid.
4452:000 | DONE lbl | em 16 16 | 005cec |             | xt_source-id                         
4453:000 | DONE dir | em 16 16 |        |             |         .!xy16                       
4454:000 | DONE ins | em 16 16 | 005cec | ca          |                 dex                  
4455:000 | DONE ins | em 16 16 | 005ced | ca          |                 dex                  
4456:000 | DONE ins | em 16 16 | 005cee | 94 00       |                 sty.dx 00            
4457:000 | DONE ins | em 16 16 | 005cf0 | a4 06       |                 ldy.d 000006         
4458:000 | DONE wsp | em 16 16 |        |             |
4459:000 | DONE lbl | em 16 16 | 005cf2 |             | z_source-id                          
4459:001 | DONE ins | em 16 16 | 005cf2 | 60          |                 rts                  
4460:000 | DONE wsp | em 16 16 |        |             |
4461:000 | DONE cmt | em 16 16 |        |             | ; -------------------------------------------------------------------
4462:000 | DONE cmt | em 16 16 |        |             | ; SPACE ( -- ) X bytes / X cycles
4463:000 | DONE cmt | em 16 16 |        |             | ; Print one ASCII space character
4464:000 | DONE cmt | em 16 16 |        |             | ; TODO change to call EMIT
4465:000 | DONE lbl | em 16 16 | 005cf3 |             | xt_space                             
4466:000 | DONE ins | em 16 16 | 005cf3 | a9 20 00    |                 lda.# AscSP          
4467:000 | DONE ins | em 16 16 | 005cf6 | 6c 0e 00    |                 jmp.i 00000e         JSR/RTS
4468:000 | DONE wsp | em 16 16 |        |             |
4469:000 | DONE lbl | em 16 16 | 005cf9 |             | z_space                              ; never reached
4470:000 | DONE wsp | em 16 16 |        |             |
4471:000 | DONE wsp | em 16 16 |        |             |
4472:000 | DONE cmt | em 16 16 |        |             | ; -------------------------------------------------------------------
4473:000 | DONE cmt | em 16 16 |        |             | ; SPACES ( u -- ) 12 bytes / X cycles
4474:000 | DONE cmt | em 16 16 |        |             | ; Print u spaces. Calls SPACE, because this is probably interactive and humans
4475:000 | DONE cmt | em 16 16 |        |             | ; are slow enough we don't have to care about speed.
4476:000 | DONE lbl | em 16 16 | 005cf9 |             | xt_spaces                            
4477:000 | DONE dir | em 16 16 |        |             |         .!a16                        
4478:000 | DONE dir | em 16 16 |        |             |         .!xy16                       
4479:000 | DONE lbl | em 16 16 | 005cf9 |             | @                                    
4480:000 | DONE ins | em 16 16 | 005cf9 | 88          |                 dey                  this also handles case u=0
4481:000 | DONE ins | em 16 16 | 005cfa | 30 05       |                 bmi 005d01           
4482:000 | DONE wsp | em 16 16 |        |             |
4483:000 | DONE ins | em 16 16 | 005cfc | 20 f3 5c    |                 jsr 005cf3           
4484:000 | DONE ins | em 16 16 | 005cff | 80 f8       |                 bra 005cf9           
4485:000 | DONE wsp | em 16 16 |        |             |
4486:000 | DONE lbl | em 16 16 | 005d01 |             | spaces_done                          
4487:000 | DONE ins | em 16 16 | 005d01 | b4 00       |                 ldy.dx 00            DROP
4488:000 | DONE ins | em 16 16 | 005d03 | e8          |                 inx                  
4489:000 | DONE ins | em 16 16 | 005d04 | e8          |                 inx                  
4490:000 | DONE wsp | em 16 16 |        |             |
4491:000 | DONE lbl | em 16 16 | 005d05 |             | z_spaces                             
4491:001 | DONE ins | em 16 16 | 005d05 | 60          |                 rts                  
4492:000 | DONE wsp | em 16 16 |        |             |
4493:000 | DONE cmt | em 16 16 |        |             | ; -------------------------------------------------------------------
4494:000 | DONE cmt | em 16 16 |        |             | ; STAR ( n n -- n ) 16*16 -> 16  X bytes / X cycles
4495:000 | DONE cmt | em 16 16 |        |             | ; Multiply two signed 16 bit numbers, returning a 16 bit result. This is nothing
4496:000 | DONE cmt | em 16 16 |        |             | ; more than UM* DROP
4497:000 | DONE lbl | em 16 16 | 005d06 |             | xt_star                              
4498:000 | DONE ins | em 16 16 | 005d06 | 20 73 5d    |                 jsr 005d73           
4499:000 | DONE ins | em 16 16 | 005d09 | b4 00       |                 ldy.dx 00            DROP
4500:000 | DONE ins | em 16 16 | 005d0b | e8          |                 inx                  
4501:000 | DONE ins | em 16 16 | 005d0c | e8          |                 inx                  
4502:000 | DONE wsp | em 16 16 |        |             |
4503:000 | DONE lbl | em 16 16 | 005d0d |             | z_star                               
4503:001 | DONE ins | em 16 16 | 005d0d | 60          |                 rts                  
4504:000 | DONE wsp | em 16 16 |        |             |
4505:000 | DONE wsp | em 16 16 |        |             |
4506:000 | DONE cmt | em 16 16 |        |             | ; -------------------------------------------------------------------
4507:000 | DONE cmt | em 16 16 |        |             | ; STATE ( -- addr ) 7 bytes / 12 cycles
4508:000 | DONE cmt | em 16 16 |        |             | ; Return the address of a cell containing the compilation-state flag. STATE
4509:000 | DONE cmt | em 16 16 |        |             | ; is true when in compilation state, false otherwise. STATE should not be
4510:000 | DONE cmt | em 16 16 |        |             | ; changed directly by the user; see
4511:000 | DONE cmt | em 16 16 |        |             | ; http://forth.sourceforge.net/standard/dpans/dpans6.htm#6.1.2250
4512:000 | DONE lbl | em 16 16 | 005d0e |             | xt_state                             
4513:000 | DONE dir | em 16 16 |        |             |         .!xy16                       
4514:000 | DONE ins | em 16 16 | 005d0e | ca          |                 dex                  
4515:000 | DONE ins | em 16 16 | 005d0f | ca          |                 dex                  
4516:000 | DONE ins | em 16 16 | 005d10 | 94 00       |                 sty.dx 00            
4517:000 | DONE ins | em 16 16 | 005d12 | a0 14 00    |                 ldy.# 000014         
4518:000 | DONE wsp | em 16 16 |        |             |
4519:000 | DONE lbl | em 16 16 | 005d15 |             | z_state                              
4519:001 | DONE ins | em 16 16 | 005d15 | 60          |                 rts                  
4520:000 | DONE wsp | em 16 16 |        |             |
4521:000 | DONE wsp | em 16 16 |        |             |
4522:000 | DONE cmt | em 16 16 |        |             | ; -------------------------------------------------------------------
4523:000 | DONE cmt | em 16 16 |        |             | ; SWAP ( n m -- m n ) 5 bytes / 12 cycles
4524:000 | DONE cmt | em 16 16 |        |             | ; Exchange TOS with NOS. We don't check if there are enough elements on the Data
4525:000 | DONE cmt | em 16 16 |        |             | ; Stack; underflow errors will go undetected and return garbage.
4526:000 | DONE lbl | em 16 16 | 005d16 |             | xt_swap                              
4527:000 | DONE dir | em 16 16 |        |             |         .!a16                        
4528:000 | DONE dir | em 16 16 |        |             |         .!xy16                       
4529:000 | DONE ins | em 16 16 | 005d16 | b5 00       |                 lda.dx 00            
4530:000 | DONE ins | em 16 16 | 005d18 | 94 00       |                 sty.dx 00            
4531:000 | DONE ins | em 16 16 | 005d1a | a8          |                 tay                  
4532:000 | DONE wsp | em 16 16 |        |             |
4533:000 | DONE lbl | em 16 16 | 005d1b |             | z_swap                               
4533:001 | DONE ins | em 16 16 | 005d1b | 60          |                 rts                  
4534:000 | DONE wsp | em 16 16 |        |             |
4535:000 | DONE wsp | em 16 16 |        |             |
4536:000 | DONE cmt | em 16 16 |        |             | ; -------------------------------------------------------------------
4537:000 | DONE cmt | em 16 16 |        |             | ; TO ( n "name" -- ) X bytes / X cycles
4538:000 | DONE cmt | em 16 16 |        |             | ; Change the value of a VALUE. Note that in theory this would work with CONSTANT
4539:000 | DONE cmt | em 16 16 |        |             | ; as well, but we frown on this behavior. Note that while it is in violation of
4540:000 | DONE cmt | em 16 16 |        |             | ; ANS Forth, we can change the number in a VALUE with <number> ' <value> >BODY
4541:000 | DONE cmt | em 16 16 |        |             | ; +!  just as you can with Gforth
4542:000 | DONE cmt | em 16 16 |        |             | ; TODO unroll this to assembler
4543:000 | DONE lbl | em 16 16 | 005d1c |             | xt_to                                
4544:000 | DONE ins | em 16 16 | 005d1c | 20 01 54    |                 jsr 005401           '
4545:000 | DONE ins | em 16 16 | 005d1f | 20 2f 51    |                 jsr 00512f           >BODY
4546:000 | DONE ins | em 16 16 | 005d22 | 20 b6 52    |                 jsr 0052b6           !
4547:000 | DONE wsp | em 16 16 |        |             |
4548:000 | DONE lbl | em 16 16 | 005d25 |             | z_to                                 
4548:001 | DONE ins | em 16 16 | 005d25 | 60          |                 rts                  
4549:000 | DONE wsp | em 16 16 |        |             |
4550:000 | DONE wsp | em 16 16 |        |             |
4551:000 | DONE cmt | em 16 16 |        |             | ; -------------------------------------------------------------------
4552:000 | DONE cmt | em 16 16 |        |             | ; TRUE ( -- f ) 7 bytes / 12 cycles
4553:000 | DONE cmt | em 16 16 |        |             | ; Pushes value $FFFF for Forth true on Data Stack
4554:000 | DONE lbl | em 16 16 | 005d26 |             | xt_true                              
4555:000 | DONE dir | em 16 16 |        |             |         .!a16                        
4556:000 | DONE dir | em 16 16 |        |             |         .!xy16                       
4557:000 | DONE ins | em 16 16 | 005d26 | ca          |                 dex                  
4558:000 | DONE ins | em 16 16 | 005d27 | ca          |                 dex                  
4559:000 | DONE ins | em 16 16 | 005d28 | 94 00       |                 sty.dx 00            
4560:000 | DONE ins | em 16 16 | 005d2a | a0 ff ff    |                 ldy.# 0ffff          
4561:000 | DONE wsp | em 16 16 |        |             |
4562:000 | DONE lbl | em 16 16 | 005d2d |             | z_true                               
4562:001 | DONE ins | em 16 16 | 005d2d | 60          |                 rts                  
4563:000 | DONE wsp | em 16 16 |        |             |
4564:000 | DONE cmt | em 16 16 |        |             | ; -------------------------------------------------------------------
4565:000 | DONE cmt | em 16 16 |        |             | ; TUCK ( n m -- m n m ) 8 bytes / 19 cycles
4566:000 | DONE cmt | em 16 16 |        |             | ; Insert TOS below NOS. We do not check if there are enough elements on the Data
4567:000 | DONE cmt | em 16 16 |        |             | ; Stack, underflow will go undetected and return garbage.
4568:000 | DONE lbl | em 16 16 | 005d2e |             | xt_tuck                              
4569:000 | DONE dir | em 16 16 |        |             |         .!a16                        
4570:000 | DONE dir | em 16 16 |        |             |         .!xy16                       
4571:000 | DONE ins | em 16 16 | 005d2e | ca          |                 dex                  
4572:000 | DONE ins | em 16 16 | 005d2f | ca          |                 dex                  
4573:000 | DONE ins | em 16 16 | 005d30 | b5 02       |                 lda.dx 2             
4574:000 | DONE ins | em 16 16 | 005d32 | 95 00       |                 sta.dx 0             
4575:000 | DONE ins | em 16 16 | 005d34 | 94 02       |                 sty.dx 2             
4576:000 | DONE wsp | em 16 16 |        |             |
4577:000 | DONE lbl | em 16 16 | 005d36 |             | z_tuck                               
4577:001 | DONE ins | em 16 16 | 005d36 | 60          |                 rts                  
4578:000 | DONE wsp | em 16 16 |        |             |
4579:000 | DONE cmt | em 16 16 |        |             | ; -------------------------------------------------------------------
4580:000 | DONE cmt | em 16 16 |        |             | ; TYPE  ( addr u -- ) 23+ bytes / X cycles
4581:000 | DONE cmt | em 16 16 |        |             | ; Print character string if u is not 0. Works though EMIT and is affect by the
4582:000 | DONE cmt | em 16 16 |        |             | ; OUTPUT revectoring
4583:000 | DONE lbl | em 16 16 | 005d37 |             | xt_type                              
4584:000 | DONE dir | em 16 16 |        |             |         .!a16                        
4585:000 | DONE dir | em 16 16 |        |             |         .!xy16                       
4586:000 | DONE cmt | em 16 16 |        |             |                 ; just leave if u is zero (empty string)
4587:000 | DONE ins | em 16 16 | 005d37 | 98          |                 tya                  force flag check of TOS
4588:000 | DONE ins | em 16 16 | 005d38 | f0 17       |                 beq 005d51           
4589:000 | DONE wsp | em 16 16 |        |             |
4590:000 | DONE ins | em 16 16 | 005d3a | b5 00       |                 lda.dx 00            get address from NOS
4591:000 | DONE ins | em 16 16 | 005d3c | 85 1c       |                 sta.d 00001c         
4592:000 | DONE ins | em 16 16 | 005d3e | 84 1e       |                 sty.d 00001e         number of chars is TOS
4593:000 | DONE ins | em 16 16 | 005d40 | a0 00 00    |                 ldy.# 0000           
4594:000 | DONE ins | em 16 16 | 005d43 | e2 20       |                 sep 20               
4594:001 | DONE ctl | em  8 16 |        |             |         .!a8
4595:000 | DONE lbl | em  8 16 | 005d45 |             | type_loop                            
4596:000 | DONE ins | em  8 16 | 005d45 | b1 1c       |                 lda.diy 00001c       LDA (TMP1),Y
4597:000 | DONE ins | em  8 16 | 005d47 | 20 b4 57    |                 jsr 0057b4           
4598:000 | DONE ins | em  8 16 | 005d4a | c8          |                 iny                  
4599:000 | DONE ins | em  8 16 | 005d4b | c4 1e       |                 cpy.d 00001e         
4600:000 | DONE ins | em  8 16 | 005d4d | d0 f6       |                 bne 005d45           
4601:000 | DONE wsp | em  8 16 |        |             |
4602:000 | DONE ins | em  8 16 | 005d4f | c2 20       |                 rep 20               
4602:001 | DONE ctl | em 16 16 |        |             |         .!a16
4603:000 | DONE lbl | em 16 16 | 005d51 |             | type_done                            
4604:000 | DONE cmt | em 16 16 |        |             |                 ; clear stack
4605:000 | DONE ins | em 16 16 | 005d51 | b4 02       |                 ldy.dx 02            
4606:000 | DONE ins | em 16 16 | 005d53 | e8          |                 inx                  
4607:000 | DONE ins | em 16 16 | 005d54 | e8          |                 inx                  
4608:000 | DONE ins | em 16 16 | 005d55 | e8          |                 inx                  
4609:000 | DONE ins | em 16 16 | 005d56 | e8          |                 inx                  
4610:000 | DONE wsp | em 16 16 |        |             |
4611:000 | DONE cmt | em 16 16 |        |             |                 ; TODO LATER add PAUSE here for multitasking
4612:000 | DONE wsp | em 16 16 |        |             |
4613:000 | DONE lbl | em 16 16 | 005d57 |             | z_type                               
4613:001 | DONE ins | em 16 16 | 005d57 | 60          |                 rts                  
4614:000 | DONE wsp | em 16 16 |        |             |
4615:000 | DONE wsp | em 16 16 |        |             |
4616:000 | DONE cmt | em 16 16 |        |             | ; -------------------------------------------------------------------
4617:000 | DONE cmt | em 16 16 |        |             | ; UDMOD ( ud u -- u ud ) 32/16 --> 32  X bytes / X cycles
4618:000 | DONE cmt | em 16 16 |        |             | ; Devide double-cell number by single-cell number, producing a double-cell
4619:000 | DONE cmt | em 16 16 |        |             | ; result and a single-cell remainder. Based on
4620:000 | DONE cmt | em 16 16 |        |             | ; Gforth  : UD/MOD  >R 0 R@ UM/MOD R> SWAP >R UM/MOD R> ;
4621:000 | DONE cmt | em 16 16 |        |             | ; pForth  : UD/MOD  >R 0 R@ UM/MOD ROT ROT R> UM/MOD ROT ;
4622:000 | DONE cmt | em 16 16 |        |             | ; This doesn't seem to be used anywhere else but for # (HASH) in coverting
4623:000 | DONE cmt | em 16 16 |        |             | ; pictured numerical output, though pForth claims it uses UM/MOD for that
4624:000 | DONE cmt | em 16 16 |        |             | ; At some point, we need to get back to UM/MOD because it's optimized
4625:000 | DONE lbl | em 16 16 | 005d58 |             | xt_udmod                             
4626:000 | DONE ins | em 16 16 | 005d58 | 20 98 51    |                 jsr 005198           
4627:000 | DONE ins | em 16 16 | 005d5b | 20 21 53    |                 jsr 005321           
4628:000 | DONE ins | em 16 16 | 005d5e | 20 7a 5b    |                 jsr 005b7a           
4629:000 | DONE ins | em 16 16 | 005d61 | 20 d2 5d    |                 jsr 005dd2           
4630:000 | DONE ins | em 16 16 | 005d64 | 20 b3 5b    |                 jsr 005bb3           
4631:000 | DONE ins | em 16 16 | 005d67 | 20 b3 5b    |                 jsr 005bb3           
4632:000 | DONE ins | em 16 16 | 005d6a | 20 83 5b    |                 jsr 005b83           
4633:000 | DONE ins | em 16 16 | 005d6d | 20 d2 5d    |                 jsr 005dd2           
4634:000 | DONE ins | em 16 16 | 005d70 | 4c b3 5b    |                 jmp 005bb3           JSR/RTS
4635:000 | DONE lbl | em 16 16 | 005d73 |             | z_udmod                              
4636:000 | DONE wsp | em 16 16 |        |             |
4637:000 | DONE wsp | em 16 16 |        |             |
4638:000 | DONE cmt | em 16 16 |        |             | ; -------------------------------------------------------------------
4639:000 | DONE cmt | em 16 16 |        |             | ; UM* "UMSTAR" ( u u -- ud ) 16*16 -> 32  X bytes / X cycles
4640:000 | DONE cmt | em 16 16 |        |             | ; Multiply two unsigned 16 bit numbers, producing a 32 bit result.This is based
4641:000 | DONE cmt | em 16 16 |        |             | ; on modified FIG Forth code by Dr. Jefyll, see
4642:000 | DONE cmt | em 16 16 |        |             | ; http://forum.6502.org/viewtopic.php?f=9&t=689 for a detailed discussion. We
4643:000 | DONE cmt | em 16 16 |        |             | ; use the system scratch pad (SYSPAD) for temp storage (N in the original code)
4644:000 | DONE cmt | em 16 16 |        |             | ; FIG Forth is in the public domain. Note old Forth versions such as FIG Forth
4645:000 | DONE cmt | em 16 16 |        |             | ; call this "U*"
4646:000 | DONE wsp | em 16 16 |        |             |
4647:000 | DONE cmt | em 16 16 |        |             | ; This is currently a brute-force loop based on the 8-bit variant in "6502
4648:000 | DONE cmt | em 16 16 |        |             | ; Assembly Language Programming" by Leventhal. Once everything is working,
4649:000 | DONE cmt | em 16 16 |        |             | ; consider switching to a table-supported version based on
4650:000 | DONE cmt | em 16 16 |        |             | ; http://codebase64.org/doku.php?id=base:seriously_fast_multiplication
4651:000 | DONE cmt | em 16 16 |        |             | ; http://codebase64.org/doku.php?id=magazines:chacking16#d_graphics_for_the_masseslib3d_and_cool_world
4652:000 | DONE cmt | em 16 16 |        |             | ; http://forum.6502.org/viewtopic.php?p=205#p205
4653:000 | DONE cmt | em 16 16 |        |             | ; http://forum.6502.org/viewtopic.php?f=9&t=689 We use tmp1, tmp2, tmp3 for
4654:000 | DONE cmt | em 16 16 |        |             | ; this, with the assumption that tmp3 immediately follows tmp2
4655:000 | DONE lbl | em 16 16 | 005d73 |             | xt_umstar                            
4656:000 | DONE dir | em 16 16 |        |             |         .!a16                        
4657:000 | DONE cmt | em 16 16 |        |             |                 ; SPECIAL CASE 1: multiplication by zero
4658:000 | DONE ins | em 16 16 | 005d73 | 98          |                 tya                  
4659:000 | DONE ins | em 16 16 | 005d74 | f0 3d       |                 beq 005db3           
4660:000 | DONE ins | em 16 16 | 005d76 | b5 00       |                 lda.dx 00            
4661:000 | DONE ins | em 16 16 | 005d78 | f0 39       |                 beq 005db3           
4662:000 | DONE wsp | em 16 16 |        |             |
4663:000 | DONE cmt | em 16 16 |        |             |                 ; SPECIAL CASE 2: multiplication by one
4664:000 | DONE cmt | em 16 16 |        |             |                 ; This is a different routine than 2* because that instruction
4665:000 | DONE cmt | em 16 16 |        |             |                 ; stays inside one cell, whereas UM* produces a Double Cell
4666:000 | DONE cmt | em 16 16 |        |             |                 ; answer
4667:000 | DONE ins | em 16 16 | 005d7a | c0 01 00    |                 cpy.# 0001           non-distructively
4668:000 | DONE ins | em 16 16 | 005d7d | f0 3b       |                 beq 005dba           
4669:000 | DONE ins | em 16 16 | 005d7f | b5 00       |                 lda.dx 00            
4670:000 | DONE ins | em 16 16 | 005d81 | 3a          |                 dec.a                don't care about distruction
4671:000 | DONE ins | em 16 16 | 005d82 | f0 39       |                 beq 005dbd           
4672:000 | DONE wsp | em 16 16 |        |             |
4673:000 | DONE cmt | em 16 16 |        |             |                 ; SPECIAL CASE 3: multiplication by two
4674:000 | DONE ins | em 16 16 | 005d84 | c0 02 00    |                 cpy.# 0002           
4675:000 | DONE ins | em 16 16 | 005d87 | f0 3b       |                 beq 005dc4           
4676:000 | DONE wsp | em 16 16 |        |             |
4677:000 | DONE ins | em 16 16 | 005d89 | b5 00       |                 lda.dx 00            
4678:000 | DONE ins | em 16 16 | 005d8b | c9 02 00    |                 cmp.# 0002           
4679:000 | DONE ins | em 16 16 | 005d8e | f0 38       |                 beq 005dc8           
4680:000 | DONE wsp | em 16 16 |        |             |
4681:000 | DONE cmt | em 16 16 |        |             |                 ; NO SPECIAL CASE ("The Hard Way")
4682:000 | DONE ins | em 16 16 | 005d90 | 84 1c       |                 sty.d 00001c         TOS number  "40"
4683:000 | DONE ins | em 16 16 | 005d92 | 85 1e       |                 sta.d 00001e         NOS number  "41"
4684:000 | DONE ins | em 16 16 | 005d94 | a0 10 00    |                 ldy.# &16            loop counter
4685:000 | DONE wsp | em 16 16 |        |             |
4686:000 | DONE ins | em 16 16 | 005d97 | a9 00 00    |                 lda.# 0000           
4687:000 | DONE ins | em 16 16 | 005d9a | 85 20       |                 sta.d 000020         Most Significat Word (MSW) of result
4688:000 | DONE wsp | em 16 16 |        |             |
4689:000 | DONE lbl | em 16 16 | 005d9c |             | umstar_loop                          
4690:000 | DONE ins | em 16 16 | 005d9c | 0a          |                 asl.a                useless for first iteration
4691:000 | DONE ins | em 16 16 | 005d9d | 26 20       |                 rol.d 000020         move carry into MSB, useless first iteration
4692:000 | DONE ins | em 16 16 | 005d9f | 06 1e       |                 asl.d 00001e         move bit of NOS number into carry
4693:000 | DONE wsp | em 16 16 |        |             |
4694:000 | DONE cmt | em 16 16 |        |             |                 ; if there is no carry bit, we don't have to add and can go to
4695:000 | DONE cmt | em 16 16 |        |             |                 ; the next bit
4696:000 | DONE ins | em 16 16 | 005da1 | 90 07       |                 bcc 005daa           
4697:000 | DONE wsp | em 16 16 |        |             |
4698:000 | DONE ins | em 16 16 | 005da3 | 18          |                 clc                  
4699:000 | DONE ins | em 16 16 | 005da4 | 65 1c       |                 adc.d 00001c         we have a set bit, so add TOS
4700:000 | DONE wsp | em 16 16 |        |             |
4701:000 | DONE cmt | em 16 16 |        |             |                 ; if we have a carry, increase the MSW of result
4702:000 | DONE ins | em 16 16 | 005da6 | 90 02       |                 bcc 005daa           
4703:000 | DONE ins | em 16 16 | 005da8 | e6 20       |                 inc.d 000020         
4704:000 | DONE wsp | em 16 16 |        |             |
4705:000 | DONE lbl | em 16 16 | 005daa |             | umstar_counter                       
4706:000 | DONE ins | em 16 16 | 005daa | 88          |                 dey                  
4707:000 | DONE ins | em 16 16 | 005dab | d0 ef       |                 bne 005d9c           
4708:000 | DONE wsp | em 16 16 |        |             |
4709:000 | DONE cmt | em 16 16 |        |             |                 ; We're all done, clean up and leave
4710:000 | DONE ins | em 16 16 | 005dad | 95 00       |                 sta.dx 00            store lower cell of number in NOS
4711:000 | DONE ins | em 16 16 | 005daf | a4 20       |                 ldy.d 000020         store MSB in TOS as double cell
4712:000 | DONE wsp | em 16 16 |        |             |
4713:000 | DONE ins | em 16 16 | 005db1 | 80 1e       |                 bra 005dd1           don't use RTS so we can natively compile
4714:000 | DONE wsp | em 16 16 |        |             |
4715:000 | DONE lbl | em 16 16 | 005db3 |             | umstar_zero                          
4716:000 | DONE cmt | em 16 16 |        |             |                 ; one or both of the numbers is zero, so we got off light
4717:000 | DONE ins | em 16 16 | 005db3 | a0 00 00    |                 ldy.# 0000           
4718:000 | DONE ins | em 16 16 | 005db6 | 94 00       |                 sty.dx 00            
4719:000 | DONE ins | em 16 16 | 005db8 | 80 17       |                 bra 005dd1           
4720:000 | DONE wsp | em 16 16 |        |             |
4721:000 | DONE lbl | em 16 16 | 005dba |             | umstar_one_tos                       
4722:000 | DONE cmt | em 16 16 |        |             |                 ; TOS is one, life is easy
4723:000 | DONE ins | em 16 16 | 005dba | 88          |                 dey                  NOS is LSW, TOS becomes zero
4724:000 | DONE ins | em 16 16 | 005dbb | 80 14       |                 bra 005dd1           
4725:000 | DONE lbl | em 16 16 | 005dbd |             | umstar_one_nos                       
4726:000 | DONE cmt | em 16 16 |        |             |                 ; NOS is one, life is easy
4727:000 | DONE ins | em 16 16 | 005dbd | 94 00       |                 sty.dx 00            
4728:000 | DONE ins | em 16 16 | 005dbf | a0 00 00    |                 ldy.# 0000           
4729:000 | DONE ins | em 16 16 | 005dc2 | 80 0d       |                 bra 005dd1           
4730:000 | DONE wsp | em 16 16 |        |             |
4731:000 | DONE lbl | em 16 16 | 005dc4 |             | umstar_two_tos                       
4732:000 | DONE cmt | em 16 16 |        |             |                 ; TOS is two, life is easy
4733:000 | DONE ins | em 16 16 | 005dc4 | b5 00       |                 lda.dx 00            
4734:000 | DONE ins | em 16 16 | 005dc6 | 80 01       |                 bra 005dc9           
4735:000 | DONE lbl | em 16 16 | 005dc8 |             | umstar_two_nos                       
4736:000 | DONE cmt | em 16 16 |        |             |                 ; NOS is two, life is still easy
4737:000 | DONE ins | em 16 16 | 005dc8 | 98          |                 tya                  
4738:000 | DONE lbl | em 16 16 | 005dc9 |             | umstar_two_common                    
4739:000 | DONE ins | em 16 16 | 005dc9 | 0a          |                 asl.a                multiply by two, top bit in Carry Flag
4740:000 | DONE ins | em 16 16 | 005dca | 95 00       |                 sta.dx 00            Double Cell LSW is NOS
4741:000 | DONE wsp | em 16 16 |        |             |
4742:000 | DONE ins | em 16 16 | 005dcc | a9 00 00    |                 lda.# 0000           
4743:000 | DONE ins | em 16 16 | 005dcf | 2a          |                 rol.a                Rotate any Carry Flag into MSW
4744:000 | DONE ins | em 16 16 | 005dd0 | a8          |                 tay                  
4745:000 | DONE wsp | em 16 16 |        |             |
4746:000 | DONE lbl | em 16 16 | 005dd1 |             | z_umstar                             
4746:001 | DONE ins | em 16 16 | 005dd1 | 60          |                 rts                  
4747:000 | DONE wsp | em 16 16 |        |             |
4748:000 | DONE cmt | em 16 16 |        |             | ; -------------------------------------------------------------------
4749:000 | DONE cmt | em 16 16 |        |             | ; UM/MOD ( ud u -- u u ) 32/16 -> 16  X bytes / X cycles
4750:000 | DONE cmt | em 16 16 |        |             | ; Divide double cell number by single cell number, returning the quotient as TOS
4751:000 | DONE cmt | em 16 16 |        |             | ; and any remainder as NOS. All numbers are unsigned. This is the basic division
4752:000 | DONE cmt | em 16 16 |        |             | ; operation all others use. Based on Garth Wilson's code at
4753:000 | DONE cmt | em 16 16 |        |             | ; http://6502.org/source/integers/ummodfix/ummodfix.htm We use "scratch" for N
4754:000 | DONE cmt | em 16 16 |        |             | ; and include a separate detection of division by zero to force an error code
4755:000 | DONE lbl | em 16 16 | 005dd2 |             | xt_ummod                             
4756:000 | DONE dir | em 16 16 |        |             |         .!a16                        
4757:000 | DONE dir | em 16 16 |        |             |         .!xy16                       
4758:000 | DONE cmt | em 16 16 |        |             |                 ; Move the inputs to the scratchpad to avoid having to fool
4759:000 | DONE cmt | em 16 16 |        |             |                 ; around with the Data Stack and for speed. Garth's original
4760:000 | DONE cmt | em 16 16 |        |             |                 ; code uses the MVN instruction for this, but our TOS is Y which
4761:000 | DONE cmt | em 16 16 |        |             |                 ; makes that harder. When we're done, the setup will look likes
4762:000 | DONE cmt | em 16 16 |        |             |                 ; this: (S is start of the scratchpad in Direct Page)
4763:000 | DONE cmt | em 16 16 |        |             |                 ;
4764:000 | DONE cmt | em 16 16 |        |             |                 ;     +-----+-----+-----+-----+-----+-----+-----+-----+
4765:000 | DONE cmt | em 16 16 |        |             |                 ;     |  DIVISOR  |        DIVIDEND       | TEMP AREA |
4766:000 | DONE cmt | em 16 16 |        |             |                 ;     |           |  hi cell     lo cell  | carry bit |
4767:000 | DONE cmt | em 16 16 |        |             |                 ;     |  S    S+1 | S+2   S+3 | S+4   S+5 | S+6   S+7 |
4768:000 | DONE cmt | em 16 16 |        |             |                 ;     +-----+-----+-----+-----+-----+-----+-----+-----+
4769:000 | DONE cmt | em 16 16 |        |             |                 ;
4770:000 | DONE cmt | em 16 16 |        |             |                 ; The divisor is TOS (in Y), high cell of the dividend in NOS,
4771:000 | DONE cmt | em 16 16 |        |             |                 ; and low cell in 3OS
4772:000 | DONE wsp | em 16 16 |        |             |
4773:000 | DONE cmt | em 16 16 |        |             |                 ; Catch division by zero. We could include this in the code as
4774:000 | DONE cmt | em 16 16 |        |             |                 ; part of overflow detection (see below), but we want an error
4775:000 | DONE cmt | em 16 16 |        |             |                 ; to appear like in Gforth
4776:000 | DONE ins | em 16 16 | 005dd2 | 98          |                 tya                  force flag test
4777:000 | DONE ins | em 16 16 | 005dd3 | d0 06       |                 bne 005ddb           
4778:000 | DONE wsp | em 16 16 |        |             |
4779:000 | DONE ins | em 16 16 | 005dd5 | a9 6c 6e    |                 lda.# 006e6c         
4780:000 | DONE ins | em 16 16 | 005dd8 | 4c 8c 67    |                 jmp 00678c           
4781:000 | DONE wsp | em 16 16 |        |             |
4782:000 | DONE lbl | em 16 16 | 005ddb |             | ummod_notzero                        
4783:000 | DONE ins | em 16 16 | 005ddb | 84 26       |                 sty.d 000026         Y is now free
4784:000 | DONE ins | em 16 16 | 005ddd | b5 00       |                 lda.dx 00            high cell of dividend
4785:000 | DONE ins | em 16 16 | 005ddf | 85 28       |                 sta.d 000028         
4786:000 | DONE ins | em 16 16 | 005de1 | b5 02       |                 lda.dx 02            low cell of dividend
4787:000 | DONE ins | em 16 16 | 005de3 | 85 2a       |                 sta.d 00002a         
4788:000 | DONE wsp | em 16 16 |        |             |
4789:000 | DONE cmt | em 16 16 |        |             |                 ; Drop one entry off of the stack and save the new Data Stack
4790:000 | DONE cmt | em 16 16 |        |             |                 ; Pointer, freeing X for index duty
4791:000 | DONE ins | em 16 16 | 005de5 | e8          |                 inx                  
4792:000 | DONE ins | em 16 16 | 005de6 | e8          |                 inx                  
4793:000 | DONE ins | em 16 16 | 005de7 | 86 22       |                 stx.d 000022         
4794:000 | DONE wsp | em 16 16 |        |             |
4795:000 | DONE cmt | em 16 16 |        |             |                 ; Detect overflow. Subtract divisor from high cell of dividend.
4796:000 | DONE cmt | em 16 16 |        |             |                 ; If carry flag remains set, divisor was not large enough to
4797:000 | DONE cmt | em 16 16 |        |             |                 ; avoid overflow. This also would detect division by zero, but
4798:000 | DONE cmt | em 16 16 |        |             |                 ; we did that already in a separate step
4799:000 | DONE ins | em 16 16 | 005de9 | 38          |                 sec                  
4800:000 | DONE ins | em 16 16 | 005dea | a5 28       |                 lda.d 000028         
4801:000 | DONE ins | em 16 16 | 005dec | e5 26       |                 sbc.d 000026         
4802:000 | DONE ins | em 16 16 | 005dee | b0 21       |                 bcs 005e11           
4803:000 | DONE wsp | em 16 16 |        |             |
4804:000 | DONE cmt | em 16 16 |        |             |                 ; If there is no overflow, the carry flag remains clear for
4805:000 | DONE cmt | em 16 16 |        |             |                 ; first roll. We loop 16 times, but since we shift the dividend
4806:000 | DONE cmt | em 16 16 |        |             |                 ; over at the same time as shifting the answer in, the operation
4807:000 | DONE cmt | em 16 16 |        |             |                 ; must start and (!) finish with a shift of the low cell of the
4808:000 | DONE cmt | em 16 16 |        |             |                 ; dividend (which ends up holding the quotient), so we start
4809:000 | DONE cmt | em 16 16 |        |             |                 ; with 17 times in X. Y is used for temporary storage
4810:000 | DONE ins | em 16 16 | 005df0 | a2 11 00    |                 ldx.# &17            
4811:000 | DONE wsp | em 16 16 |        |             |
4812:000 | DONE lbl | em 16 16 | 005df3 |             | ummod_shift                          
4813:000 | DONE cmt | em 16 16 |        |             |                 ; Move low cell of dividend left one bit, also shifting answer
4814:000 | DONE cmt | em 16 16 |        |             |                 ; in. The first rotation brings in a zero, which later gets
4815:000 | DONE cmt | em 16 16 |        |             |                 ; pushed off the other end in the last rotation
4816:000 | DONE ins | em 16 16 | 005df3 | 26 2a       |                 rol.d 00002a         
4817:000 | DONE wsp | em 16 16 |        |             |
4818:000 | DONE cmt | em 16 16 |        |             |                 ; loop control
4819:000 | DONE ins | em 16 16 | 005df5 | ca          |                 dex                  
4820:000 | DONE ins | em 16 16 | 005df6 | f0 22       |                 beq 005e1a           
4821:000 | DONE wsp | em 16 16 |        |             |
4822:000 | DONE cmt | em 16 16 |        |             |                 ; Shift high cell of divident left one bit, also shifting the
4823:000 | DONE cmt | em 16 16 |        |             |                 ; next bit in from high bit of low cell
4824:000 | DONE ins | em 16 16 | 005df8 | 26 28       |                 rol.d 000028         
4825:000 | DONE ins | em 16 16 | 005dfa | a9 00 00    |                 lda.# 0000           
4826:000 | DONE ins | em 16 16 | 005dfd | 2a          |                 rol.a                
4827:000 | DONE ins | em 16 16 | 005dfe | 85 2c       |                 sta.d 00002c         store old high bit of dividend
4828:000 | DONE wsp | em 16 16 |        |             |
4829:000 | DONE cmt | em 16 16 |        |             |                 ; See if divisor will fit into high 17 bits of dividend by
4830:000 | DONE cmt | em 16 16 |        |             |                 ; subtracting and then looking at the carry flag. If carry was
4831:000 | DONE cmt | em 16 16 |        |             |                 ; cleared, divisor did not fit
4832:000 | DONE ins | em 16 16 | 005e00 | 38          |                 sec                  
4833:000 | DONE ins | em 16 16 | 005e01 | a5 28       |                 lda.d 000028         
4834:000 | DONE ins | em 16 16 | 005e03 | e5 26       |                 sbc.d 000026         
4835:000 | DONE ins | em 16 16 | 005e05 | a8          |                 tay                  save difference in Y until we know if we need it
4836:000 | DONE wsp | em 16 16 |        |             |
4837:000 | DONE cmt | em 16 16 |        |             |                 ; Bit 0 of S+6 serves as the 17th bit. Complete the subtraction
4838:000 | DONE cmt | em 16 16 |        |             |                 ; by doing the 17th bit before determining if the divisor fits
4839:000 | DONE cmt | em 16 16 |        |             |                 ; into the high 17 bits of the dividend. If so, the carry flag
4840:000 | DONE cmt | em 16 16 |        |             |                 ; remains set
4841:000 | DONE ins | em 16 16 | 005e06 | a5 2c       |                 lda.d 00002c         
4842:000 | DONE ins | em 16 16 | 005e08 | e9 00 00    |                 sbc.# 0000           
4843:000 | DONE ins | em 16 16 | 005e0b | 90 e6       |                 bcc 005df3           
4844:000 | DONE wsp | em 16 16 |        |             |
4845:000 | DONE cmt | em 16 16 |        |             |                 ; Since the divisor fit into high 17 bits, update dividend high
4846:000 | DONE cmt | em 16 16 |        |             |                 ; cell to what it would be after subtraction
4847:000 | DONE ins | em 16 16 | 005e0d | 84 28       |                 sty.d 000028         
4848:000 | DONE ins | em 16 16 | 005e0f | 80 e2       |                 bra 005df3           
4849:000 | DONE wsp | em 16 16 |        |             |
4850:000 | DONE lbl | em 16 16 | 005e11 |             | ummod_overflow                       
4851:000 | DONE cmt | em 16 16 |        |             |                 ; If an overflow condition occurs, put 0ffff
4852:000 | DONE cmt | em 16 16 |        |             |                 ; in both the quotient and remainder
4853:000 | DONE ins | em 16 16 | 005e11 | a6 22       |                 ldx.d 000022         restore DSP
4854:000 | DONE ins | em 16 16 | 005e13 | a0 ff ff    |                 ldy.# 0ffff          
4855:000 | DONE ins | em 16 16 | 005e16 | 94 00       |                 sty.dx 00            
4856:000 | DONE ins | em 16 16 | 005e18 | 80 08       |                 bra 005e22           go to end to enable native coding
4857:000 | DONE wsp | em 16 16 |        |             |
4858:000 | DONE lbl | em 16 16 | 005e1a |             | ummod_complete                       
4859:000 | DONE ins | em 16 16 | 005e1a | a6 22       |                 ldx.d 000022         restore DSP
4860:000 | DONE ins | em 16 16 | 005e1c | a4 2a       |                 ldy.d 00002a         quotient is TOS
4861:000 | DONE ins | em 16 16 | 005e1e | a5 28       |                 lda.d 000028         remainder is NOS
4862:000 | DONE ins | em 16 16 | 005e20 | 95 00       |                 sta.dx 00            
4863:000 | DONE wsp | em 16 16 |        |             |
4864:000 | DONE lbl | em 16 16 | 005e22 |             | z_ummod                              
4864:001 | DONE ins | em 16 16 | 005e22 | 60          |                 rts                  
4865:000 | DONE wsp | em 16 16 |        |             |
4866:000 | DONE wsp | em 16 16 |        |             |
4867:000 | DONE cmt | em 16 16 |        |             | ; -------------------------------------------------------------------
4868:000 | DONE cmt | em 16 16 |        |             | ; UNUSED ( -- u ) 11 bytes / X cycles
4869:000 | DONE cmt | em 16 16 |        |             | ; Return amount of memory available for the Dictionary. Does not exclude the
4870:000 | DONE cmt | em 16 16 |        |             | ; space for PAD.
4871:000 | DONE lbl | em 16 16 | 005e23 |             | xt_unused                            
4872:000 | DONE dir | em 16 16 |        |             |         .!a16                        
4873:000 | DONE ins | em 16 16 | 005e23 | a9 ff 4f    |                 lda.# 004fff         
4874:000 | DONE ins | em 16 16 | 005e26 | 38          |                 sec                  
4875:000 | DONE ins | em 16 16 | 005e27 | e5 00       |                 sbc.d 000000         current compile pointer
4876:000 | DONE wsp | em 16 16 |        |             |
4877:000 | DONE ins | em 16 16 | 005e29 | ca          |                 dex                  
4878:000 | DONE ins | em 16 16 | 005e2a | ca          |                 dex                  
4879:000 | DONE ins | em 16 16 | 005e2b | 94 00       |                 sty.dx 00            
4880:000 | DONE wsp | em 16 16 |        |             |
4881:000 | DONE ins | em 16 16 | 005e2d | a8          |                 tay                  
4882:000 | DONE wsp | em 16 16 |        |             |
4883:000 | DONE lbl | em 16 16 | 005e2e |             | z_unused                             
4883:001 | DONE ins | em 16 16 | 005e2e | 60          |                 rts                  
4884:000 | DONE wsp | em 16 16 |        |             |
4885:000 | DONE wsp | em 16 16 |        |             |
4886:000 | DONE cmt | em 16 16 |        |             | ; -------------------------------------------------------------------
4887:000 | DONE cmt | em 16 16 |        |             | ; VALUE ( n "name" -- ) X bytes / X cycles
4888:000 | DONE cmt | em 16 16 |        |             | ; Associate a name with a value (like a constant) that can be changed (like
4889:000 | DONE cmt | em 16 16 |        |             | ; a variable) with TO. We use the routines as CONSTANT, see there.
4890:000 | DONE wsp | em 16 16 |        |             |
4891:000 | DONE wsp | em 16 16 |        |             |
4892:000 | DONE cmt | em 16 16 |        |             | ; -------------------------------------------------------------------
4893:000 | DONE cmt | em 16 16 |        |             | ; VARIABLE ( "name" -- ) X bytes / X cycles
4894:000 | DONE cmt | em 16 16 |        |             | ; Define a word that returns the address for a variable. There are various Forth
4895:000 | DONE cmt | em 16 16 |        |             | ; definitions for this word, such as  CREATE 1 CELLS ALLOT  or CREATE 0 ,
4896:000 | DONE cmt | em 16 16 |        |             | ; We use a variant of the second one so the variable is initialized to zero
4897:000 | DONE lbl | em 16 16 | 005e2f |             | xt_variable                          
4898:000 | DONE cmt | em 16 16 |        |             |                 ; We let CREATE do the heavy lifting
4899:000 | DONE ins | em 16 16 | 005e2f | 20 39 56    |                 jsr 005639           
4900:000 | DONE wsp | em 16 16 |        |             |
4901:000 | DONE cmt | em 16 16 |        |             |                 ; There is no "stz.di cp" so we have to do this the
4902:000 | DONE cmt | em 16 16 |        |             |                 ; old way, which is still faster than a subroutine jump to ZERO
4903:000 | DONE ins | em 16 16 | 005e32 | a9 00 00    |                 lda.# 0000           
4904:000 | DONE ins | em 16 16 | 005e35 | 92 00       |                 sta.di 000000        STA (CP)
4905:000 | DONE wsp | em 16 16 |        |             |
4906:000 | DONE ins | em 16 16 | 005e37 | e6 00       |                 inc.d 000000         direct COMMA
4907:000 | DONE ins | em 16 16 | 005e39 | e6 00       |                 inc.d 000000         
4908:000 | DONE wsp | em 16 16 |        |             |
4909:000 | DONE ins | em 16 16 | 005e3b | 4c 0e 56    |                 jmp 00560e           adjust the z_ value by adding 2 bytes
4910:000 | DONE wsp | em 16 16 |        |             |
4911:000 | DONE lbl | em 16 16 | 005e3e |             | z_variable                           ; never reached
4912:000 | DONE wsp | em 16 16 |        |             |
4913:000 | DONE wsp | em 16 16 |        |             |
4914:000 | DONE cmt | em 16 16 |        |             | ; -------------------------------------------------------------------
4915:000 | DONE cmt | em 16 16 |        |             | ; WORDS&SIZES ( -- ) X bytes / X cycles
4916:000 | DONE cmt | em 16 16 |        |             | ; Prints all words in the dictionary with the sizes of their code as returned by
4917:000 | DONE cmt | em 16 16 |        |             | ; WORDSIZE. Used to test different optimizations of the compiling routines,
4918:000 | DONE cmt | em 16 16 |        |             | ; specific to Liara Forth. Uses tmp3
4919:000 | DONE lbl | em 16 16 | 005e3e |             | xt_wordsnsizes                       
4920:000 | DONE dir | em 16 16 |        |             |         .!a16                        
4921:000 | DONE ins | em 16 16 | 005e3e | a9 ff ff    |                 lda.# 0ffff          
4922:000 | DONE ins | em 16 16 | 005e41 | 85 20       |                 sta.d 000020         set flag that we want sizes, too
4923:000 | DONE wsp | em 16 16 |        |             |
4924:000 | DONE cmt | em 16 16 |        |             |                 ; continue with WORDS
4925:000 | DONE ins | em 16 16 | 005e43 | 80 02       |                 bra 005e47           
4926:000 | DONE wsp | em 16 16 |        |             |
4927:000 | DONE cmt | em 16 16 |        |             | ; -------------------------------------------------------------------
4928:000 | DONE cmt | em 16 16 |        |             | ; WORDS ( -- ) X bytes / X cycles
4929:000 | DONE cmt | em 16 16 |        |             | ; Print list of all Forth words available. This only really makes sense in an
4930:000 | DONE cmt | em 16 16 |        |             | ; interactive setting, so we don't have to worry about speed. WORDS&SIZES falls
4931:000 | DONE cmt | em 16 16 |        |             | ; through to here. Uses tmp3. Both WORDS and WORDS&SIZES might be better off as
4932:000 | DONE cmt | em 16 16 |        |             | ; high-level Forth words, but these routines are left over from early testing
4933:000 | DONE lbl | em 16 16 | 005e45 |             | xt_words                             
4934:000 | DONE ins | em 16 16 | 005e45 | 64 20       |                 stz.d 000020         store flag that we don't want to print sizes
4935:000 | DONE wsp | em 16 16 |        |             |
4936:000 | DONE lbl | em 16 16 | 005e47 |             | words_common                         
4937:000 | DONE cmt | em 16 16 |        |             |                 ; common routine for WORDS and WORDS&SIZES
4938:000 | DONE ins | em 16 16 | 005e47 | 20 33 56    |                 jsr 005633           start on next line, this is a style choice
4939:000 | DONE wsp | em 16 16 |        |             |
4940:000 | DONE ins | em 16 16 | 005e4a | a5 02       |                 lda.d 000002         nt of first entry in Dictionary (last added)
4941:000 | DONE ins | em 16 16 | 005e4c | 48          |                 pha                  
4942:000 | DONE wsp | em 16 16 |        |             |
4943:000 | DONE ins | em 16 16 | 005e4d | ca          |                 dex                  create room on TOS
4944:000 | DONE ins | em 16 16 | 005e4e | ca          |                 dex                  
4945:000 | DONE ins | em 16 16 | 005e4f | 94 00       |                 sty.dx 00            
4946:000 | DONE wsp | em 16 16 |        |             |
4947:000 | DONE lbl | em 16 16 | 005e51 |             | words_loop                           
4948:000 | DONE ins | em 16 16 | 005e51 | a8          |                 tay                  ( nt )
4949:000 | DONE ins | em 16 16 | 005e52 | 20 ed 59    |                 jsr 0059ed           ( nt -- addr u )
4950:000 | DONE ins | em 16 16 | 005e55 | 20 37 5d    |                 jsr 005d37           
4951:000 | DONE ins | em 16 16 | 005e58 | 20 f3 5c    |                 jsr 005cf3           
4952:000 | DONE wsp | em 16 16 |        |             |
4953:000 | DONE cmt | em 16 16 |        |             |                 ; If the user wants sizes as well, print them
4954:000 | DONE ins | em 16 16 | 005e5b | a5 20       |                 lda.d 000020         
4955:000 | DONE ins | em 16 16 | 005e5d | f0 0f       |                 beq 005e6e           
4956:000 | DONE wsp | em 16 16 |        |             |
4957:000 | DONE cmt | em 16 16 |        |             |                 ; For the moment, just print the size in bytes after the word's
4958:000 | DONE cmt | em 16 16 |        |             |                 ; name string. We can decide if we want to get all fancy later
4959:000 | DONE ins | em 16 16 | 005e5f | ca          |                 dex                  
4960:000 | DONE ins | em 16 16 | 005e60 | ca          |                 dex                  
4961:000 | DONE ins | em 16 16 | 005e61 | 94 00       |                 sty.dx 00            
4962:000 | DONE wsp | em 16 16 |        |             |
4963:000 | DONE ins | em 16 16 | 005e63 | 7a          |                 ply                  get nt back again
4964:000 | DONE ins | em 16 16 | 005e64 | 5a          |                 phy                  
4965:000 | DONE ins | em 16 16 | 005e65 | 20 82 5e    |                 jsr 005e82           ( u )
4966:000 | DONE ins | em 16 16 | 005e68 | 20 b2 51    |                 jsr 0051b2           
4967:000 | DONE ins | em 16 16 | 005e6b | 20 f3 5c    |                 jsr 005cf3           
4968:000 | DONE wsp | em 16 16 |        |             |
4969:000 | DONE lbl | em 16 16 | 005e6e |             | words_nosizes                        
4970:000 | DONE ins | em 16 16 | 005e6e | 68          |                 pla                  get back first entry in Dictionary
4971:000 | DONE wsp | em 16 16 |        |             |
4972:000 | DONE cmt | em 16 16 |        |             |                 ; The next nt is two bytes below the nt of the current one in
4973:000 | DONE cmt | em 16 16 |        |             |                 ; the Dictionary header
4974:000 | DONE ins | em 16 16 | 005e6f | 1a          |                 inc.a                
4975:000 | DONE ins | em 16 16 | 005e70 | 1a          |                 inc.a                
4976:000 | DONE wsp | em 16 16 |        |             |
4977:000 | DONE ins | em 16 16 | 005e71 | ca          |                 dex                  
4978:000 | DONE ins | em 16 16 | 005e72 | ca          |                 dex                  
4979:000 | DONE ins | em 16 16 | 005e73 | 94 00       |                 sty.dx 00            
4980:000 | DONE wsp | em 16 16 |        |             |
4981:000 | DONE ins | em 16 16 | 005e75 | a8          |                 tay                  
4982:000 | DONE ins | em 16 16 | 005e76 | b9 00 00    |                 lda.y 0000           LDA $0000,Y
4983:000 | DONE ins | em 16 16 | 005e79 | 48          |                 pha                  
4984:000 | DONE ins | em 16 16 | 005e7a | d0 d5       |                 bne 005e51           zero entry signals end of Dictionary
4985:000 | DONE wsp | em 16 16 |        |             |
4986:000 | DONE cmt | em 16 16 |        |             |                 ; all done, clean up
4987:000 | DONE ins | em 16 16 | 005e7c | 68          |                 pla                  balance MPU stack, value discarded
4988:000 | DONE wsp | em 16 16 |        |             |
4989:000 | DONE ins | em 16 16 | 005e7d | b4 00       |                 ldy.dx 00            
4990:000 | DONE ins | em 16 16 | 005e7f | e8          |                 inx                  
4991:000 | DONE ins | em 16 16 | 005e80 | e8          |                 inx                  
4992:000 | DONE wsp | em 16 16 |        |             |
4993:000 | DONE lbl | em 16 16 | 005e81 |             | z_words                              
4994:000 | DONE lbl | em 16 16 | 005e81 |             | z_wordsnsizes                        
4994:001 | DONE ins | em 16 16 | 005e81 | 60          |                 rts                  
4995:000 | DONE wsp | em 16 16 |        |             |
4996:000 | DONE cmt | em 16 16 |        |             | ; -------------------------------------------------------------------
4997:000 | DONE cmt | em 16 16 |        |             | ; WORDSIZE ( nt -- u ) X bytes / X cycles
4998:000 | DONE cmt | em 16 16 |        |             | ; Given an word's name token (nt), return the size of the word's payload (CFA
4999:000 | DONE cmt | em 16 16 |        |             | ; plus PFA) in bytes. Does not count the final RTS. Specific to Liara Forth.
5000:000 | DONE cmt | em 16 16 |        |             | ; Uses tmp2, note WORDS and WORDS&SIZES use tmp3
5001:000 | DONE lbl | em 16 16 | 005e82 |             | xt_wordsize                          
5002:000 | DONE cmt | em 16 16 |        |             |                 ; We get the beginning address of the code from the word's
5003:000 | DONE cmt | em 16 16 |        |             |                 ; header entry for the execution token (xt, 4 bytes down) and
5004:000 | DONE cmt | em 16 16 |        |             |                 ; the pointer to the end of the code (z_word, six bytes down).
5005:000 | DONE ins | em 16 16 | 005e82 | c8          |                 iny                  
5006:000 | DONE ins | em 16 16 | 005e83 | c8          |                 iny                  
5007:000 | DONE ins | em 16 16 | 005e84 | c8          |                 iny                  
5008:000 | DONE ins | em 16 16 | 005e85 | c8          |                 iny                  nt+4, location of xt
5009:000 | DONE ins | em 16 16 | 005e86 | b9 00 00    |                 lda.y 0000           get xt
5010:000 | DONE ins | em 16 16 | 005e89 | 85 1e       |                 sta.d 00001e         
5011:000 | DONE wsp | em 16 16 |        |             |
5012:000 | DONE ins | em 16 16 | 005e8b | c8          |                 iny                  
5013:000 | DONE ins | em 16 16 | 005e8c | c8          |                 iny                  nt+6, location of z_word
5014:000 | DONE ins | em 16 16 | 005e8d | b9 00 00    |                 lda.y 0000           
5015:000 | DONE wsp | em 16 16 |        |             |
5016:000 | DONE ins | em 16 16 | 005e90 | 38          |                 sec                  (z_word - xt_word)
5017:000 | DONE ins | em 16 16 | 005e91 | e5 1e       |                 sbc.d 00001e         
5018:000 | DONE ins | em 16 16 | 005e93 | a8          |                 tay                  
5019:000 | DONE wsp | em 16 16 |        |             |
5020:000 | DONE lbl | em 16 16 | 005e94 |             | z_wordsize                           
5020:001 | DONE ins | em 16 16 | 005e94 | 60          |                 rts                  
5021:000 | DONE wsp | em 16 16 |        |             |
5022:000 | DONE wsp | em 16 16 |        |             |
5023:000 | DONE cmt | em 16 16 |        |             | ; -------------------------------------------------------------------
5024:000 | DONE cmt | em 16 16 |        |             | ; XOR ( n m -- n ) 6 bytes / X cycles
5025:000 | DONE cmt | em 16 16 |        |             | ; Logical XOR
5026:000 | DONE lbl | em 16 16 | 005e95 |             | xt_xor                               
5027:000 | DONE ins | em 16 16 | 005e95 | 98          |                 tya                  
5028:000 | DONE ins | em 16 16 | 005e96 | 55 00       |                 eor.dx 00            
5029:000 | DONE ins | em 16 16 | 005e98 | a8          |                 tay                  
5030:000 | DONE wsp | em 16 16 |        |             |
5031:000 | DONE ins | em 16 16 | 005e99 | e8          |                 inx                  
5032:000 | DONE ins | em 16 16 | 005e9a | e8          |                 inx                  
5033:000 | DONE wsp | em 16 16 |        |             |
5034:000 | DONE lbl | em 16 16 | 005e9b |             | z_xor                                
5034:001 | DONE ins | em 16 16 | 005e9b | 60          |                 rts                  
5035:000 | DONE wsp | em 16 16 |        |             |
5036:000 | DONE wsp | em 16 16 |        |             |
5037:000 | DONE cmt | em 16 16 |        |             | ; ===================================================================
5038:000 | DONE cmt | em 16 16 |        |             | ; MIDDLE INCLUDES
5039:000 | DONE wsp | em 16 16 |        |             |
5040:000 | DONE cmt | em 16 16 |        |             | ; Dictionary Headers for Liara Forth for the W65C265SXB
5040:001 | DONE cmt | em 16 16 |        |             | ; Scot W. Stevenson <scot.stevenson@gmail.com>
5040:002 | DONE cmt | em 16 16 |        |             | ; First version: 05. Dec 2016
5040:003 | DONE cmt | em 16 16 |        |             | ; This version: 04. Mar 2017
5040:004 | DONE wsp | em 16 16 |        |             |
5040:005 | DONE cmt | em 16 16 |        |             | ; Dictionary headers are kept separately from the code, which allows various
5040:006 | DONE cmt | em 16 16 |        |             | ; tricks in the code. We roughly follow the Gforth terminology: The Execution
5040:007 | DONE cmt | em 16 16 |        |             | ; Token (xt) is the address of the first byte of a word's code that can be,
5040:008 | DONE cmt | em 16 16 |        |             | ; well, executed; the Name Token (nt) is a pointer to the beginning of the
5040:009 | DONE cmt | em 16 16 |        |             | ; word's header in the Dictionary. There, the link to the next word in the
5040:010 | DONE cmt | em 16 16 |        |             | ; Dictionary is always one cell down from the current word's own nt. In the code
5040:011 | DONE cmt | em 16 16 |        |             | ; itself, we use "nt_<WORD>" ("header") for the nt and "xt_<WORD>" ("A" as the
5040:012 | DONE cmt | em 16 16 |        |             | ; beginning) for the xt.
5040:013 | DONE cmt | em 16 16 |        |             | ;
5040:014 | DONE cmt | em 16 16 |        |             | ; This gives us the following header structure:
5040:015 | DONE cmt | em 16 16 |        |             | ;
5040:016 | DONE cmt | em 16 16 |        |             | ;              8 bit     8 bit
5040:017 | DONE cmt | em 16 16 |        |             | ;               LSB       MSB
5040:018 | DONE cmt | em 16 16 |        |             | ; nt_word ->  +--------+--------+
5040:019 | DONE cmt | em 16 16 |        |             | ;             | Length | Status |
5040:020 | DONE cmt | em 16 16 |        |             | ;          +2 +--------+--------+
5040:021 | DONE cmt | em 16 16 |        |             | ;             | Next Header     | -> nt_next_word
5040:022 | DONE cmt | em 16 16 |        |             | ;          +4 +-----------------+
5040:023 | DONE cmt | em 16 16 |        |             | ;             | Start of Code   | -> xt_word
5040:024 | DONE cmt | em 16 16 |        |             | ;          +6 +-----------------+
5040:025 | DONE cmt | em 16 16 |        |             | ;             | End of Code     | -> z_word
5040:026 | DONE cmt | em 16 16 |        |             | ;          +8 +--------+--------+
5040:027 | DONE cmt | em 16 16 |        |             | ;             | Name   |        |
5040:028 | DONE cmt | em 16 16 |        |             | ;             +--------+--------+
5040:029 | DONE cmt | em 16 16 |        |             | ;             |        |        |
5040:030 | DONE cmt | em 16 16 |        |             | ;             +--------+--------+
5040:031 | DONE cmt | em 16 16 |        |             | ;             |        |  ...   | (name string does not end with a zero)
5040:032 | DONE cmt | em 16 16 |        |             | ;          +n +--------+--------+
5040:033 | DONE cmt | em 16 16 |        |             | ;
5040:034 | DONE cmt | em 16 16 |        |             | ; The Status Byte is created by adding the flags defined in
5040:035 | DONE cmt | em 16 16 |        |             | ; definitions.tasm:
5040:036 | DONE cmt | em 16 16 |        |             | ;
5040:037 | DONE cmt | em 16 16 |        |             | ;       CO - Compile Only
5040:038 | DONE cmt | em 16 16 |        |             | ;       IM - Immediate Word
5040:039 | DONE cmt | em 16 16 |        |             | ;       NC - Native Compile allowed (inline compile)
5040:040 | DONE wsp | em 16 16 |        |             |
5040:041 | DONE cmt | em 16 16 |        |             | ; Note there are currently five bits unused. The last word (top word in code)
5040:042 | DONE cmt | em 16 16 |        |             | ; is always BYE. It is marked as the last word by its value of 0000 in its Next
5040:043 | DONE cmt | em 16 16 |        |             | ; Header field. The words are sorted with the more common ones first (further
5040:044 | DONE cmt | em 16 16 |        |             | ; down in code) so they are found earlier.  Anythiing to do with output comes
5040:045 | DONE cmt | em 16 16 |        |             | ; later (further up) because things will always be slow if there is a human
5040:046 | DONE cmt | em 16 16 |        |             | ; involved.
5040:047 | DONE wsp | em 16 16 |        |             |
5040:048 | DONE lbl | em 16 16 | 005e9c |             | nt_bye                               
5040:049 | DONE dir | em 16 16 | 005e9c | (1 bytes)   |         .byte 03                     length of word string
5040:049 | DONE dir | em 16 16 |        |             |                 03                       --  .
5040:050 | DONE dir | em 16 16 | 005e9d | (1 bytes)   |         .byte { NC }                 status byte
5040:050 | DONE dir | em 16 16 |        |             |                 01                       --  .
5040:051 | DONE dir | em 16 16 | 005e9e | (2 bytes)   |         .word 0000                   next word in dictionary, 0000 signals end
5040:051 | DONE dir | em 16 16 |        |             |                 00 00                    --  . .
5040:052 | DONE dir | em 16 16 | 005ea0 | (2 bytes)   |         .word 00554c                 start of code, the xt of this word
5040:052 | DONE dir | em 16 16 |        |             |                 4c 55                    --  L U
5040:053 | DONE dir | em 16 16 | 005ea2 | (2 bytes)   |         .word 005553                 end of code (points to RTS)
5040:053 | DONE dir | em 16 16 |        |             |                 53 55                    --  S U
5040:054 | DONE dir | em 16 16 | 005ea4 | (3 bytes)   |         .byte 62, 79, 65             word name, always lower case
5040:054 | DONE dir | em 16 16 |        |             |                 62 79 65                 --  b y e
5040:055 | DONE wsp | em 16 16 |        |             |
5040:056 | DONE lbl | em 16 16 | 005ea7 |             | nt_cold                              
5040:057 | DONE dir | em 16 16 | 005ea7 | (2 bytes)   |         .byte 4, 00                  
5040:057 | DONE dir | em 16 16 |        |             |                 04 00                    --  . .
5040:058 | DONE dir | em 16 16 | 005ea9 | (6 bytes)   |         .word nt_bye, xt_cold, 0050f1 
5040:058 | DONE dir | em 16 16 |        |             |                 9c 5e 61 50 f1 50        --  . ^ a P . P
5040:059 | DONE dir | em 16 16 | 005eaf | (4 bytes)   |         .byte 63, 6f, 6c, 64         
5040:059 | DONE dir | em 16 16 |        |             |                 63 6f 6c 64              --  c o l d
5040:060 | DONE wsp | em 16 16 |        |             |
5040:061 | DONE lbl | em 16 16 | 005eb3 |             | nt_aligned                           
5040:062 | DONE dir | em 16 16 | 005eb3 | (2 bytes)   |         .byte 7, { NC }              
5040:062 | DONE dir | em 16 16 |        |             |                 07 01                    --  . .
5040:063 | DONE dir | em 16 16 | 005eb5 | (6 bytes)   |         .word nt_cold, xt_aligned, 0054e0 
5040:063 | DONE dir | em 16 16 |        |             |                 a7 5e df 54 e0 54        --  . ^ . T . T
5040:064 | DONE dir | em 16 16 | 005ebb | (7 bytes)   |         .byte 61, 6c, 69, 67, 6e, 65, 64 
5040:064 | DONE dir | em 16 16 |        |             |                 61 6c 69 67 6e 65 64     --  a l i g n e d
5040:065 | DONE wsp | em 16 16 |        |             |
5040:066 | DONE lbl | em 16 16 | 005ec2 |             | nt_align                             
5040:067 | DONE dir | em 16 16 | 005ec2 | (2 bytes)   |         .byte 5, { NC }              
5040:067 | DONE dir | em 16 16 |        |             |                 05 01                    --  . .
5040:068 | DONE dir | em 16 16 | 005ec4 | (6 bytes)   |         .word nt_aligned, xt_align, 0054de 
5040:068 | DONE dir | em 16 16 |        |             |                 b3 5e dd 54 de 54        --  . ^ . T . T
5040:069 | DONE dir | em 16 16 | 005eca | (5 bytes)   |         .byte 61, 6c, 69, 67, 6e     
5040:069 | DONE dir | em 16 16 |        |             |                 61 6c 69 67 6e           --  a l i g n
5040:070 | DONE wsp | em 16 16 |        |             |
5040:071 | DONE lbl | em 16 16 | 005ecf |             | nt_wordsnsizes                       
5040:072 | DONE dir | em 16 16 | 005ecf | (2 bytes)   |         .byte 0b, { NC }             
5040:072 | DONE dir | em 16 16 |        |             |                 0b 01                    --   .
5040:073 | DONE dir | em 16 16 | 005ed1 | (6 bytes)   |         .word nt_align, xt_wordsnsizes, 005e81 
5040:073 | DONE dir | em 16 16 |        |             |                 c2 5e 3e 5e 81 5e        --  . ^ > ^ . ^
5040:074 | DONE dir | em 16 16 | 005ed7 | (11 bytes)  |         .byte 77, 6f, 72, 64, 73, 26, 73, 69, 7a, 65, 73 
5040:074 | DONE dir | em 16 16 |        |             |                 77 6f 72 64 73 26 73 69  --  w o r d s & s i
5040:074 | DONE dir | em 16 16 |        |             |                 7a 65 73                 --  z e s
5040:075 | DONE wsp | em 16 16 |        |             |
5040:076 | DONE lbl | em 16 16 | 005ee2 |             | nt_words                             
5040:077 | DONE dir | em 16 16 | 005ee2 | (2 bytes)   |         .byte 5, { NC }              
5040:077 | DONE dir | em 16 16 |        |             |                 05 01                    --  . .
5040:078 | DONE dir | em 16 16 | 005ee4 | (6 bytes)   |         .word nt_wordsnsizes, xt_words, 005e81 
5040:078 | DONE dir | em 16 16 |        |             |                 cf 5e 45 5e 81 5e        --  . ^ E ^ . ^
5040:079 | DONE dir | em 16 16 | 005eea | (5 bytes)   |         .byte 77, 6f, 72, 64, 73     
5040:079 | DONE dir | em 16 16 |        |             |                 77 6f 72 64 73           --  w o r d s
5040:080 | DONE wsp | em 16 16 |        |             |
5040:081 | DONE lbl | em 16 16 | 005eef |             | nt_dump                              
5040:082 | DONE dir | em 16 16 | 005eef | (2 bytes)   |         .byte 4, { NC }              
5040:082 | DONE dir | em 16 16 |        |             |                 04 01                    --  . .
5040:083 | DONE dir | em 16 16 | 005ef1 | (6 bytes)   |         .word nt_words, xt_dump, 0057a9 
5040:083 | DONE dir | em 16 16 |        |             |                 e2 5e 83 57 a9 57        --  . ^ . W . W
5040:084 | DONE dir | em 16 16 | 005ef7 | (4 bytes)   |         .byte 64, 75, 6d, 70         
5040:084 | DONE dir | em 16 16 |        |             |                 64 75 6d 70              --  d u m p
5040:085 | DONE wsp | em 16 16 |        |             |
5040:086 | DONE lbl | em 16 16 | 005efb |             | nt_marker                            
5040:087 | DONE dir | em 16 16 | 005efb | (2 bytes)   |         .byte 6, { IM + NC }         
5040:087 | DONE dir | em 16 16 |        |             |                 06 03                    --  . .
5040:088 | DONE dir | em 16 16 | 005efd | (6 bytes)   |         .word nt_dump, xt_marker, 0059ac 
5040:088 | DONE dir | em 16 16 |        |             |                 ef 5e 83 59 ac 59        --  . ^ . Y . Y
5040:089 | DONE dir | em 16 16 | 005f03 | (6 bytes)   |         .byte 6d, 61, 72, 6b, 65, 72 
5040:089 | DONE dir | em 16 16 |        |             |                 6d 61 72 6b 65 72        --  m a r k e r
5040:090 | DONE wsp | em 16 16 |        |             |
5040:091 | DONE lbl | em 16 16 | 005f09 |             | nt_wordsize                          
5040:092 | DONE dir | em 16 16 | 005f09 | (2 bytes)   |         .byte 8, { NC }              
5040:092 | DONE dir | em 16 16 |        |             |                 08 01                    --  . .
5040:093 | DONE dir | em 16 16 | 005f0b | (6 bytes)   |         .word nt_marker, xt_wordsize, 005e94 
5040:093 | DONE dir | em 16 16 |        |             |                 fb 5e 82 5e 94 5e        --  . ^ . ^ . ^
5040:094 | DONE dir | em 16 16 | 005f11 | (8 bytes)   |         .byte 77, 6f, 72, 64, 73, 69, 7a, 65 
5040:094 | DONE dir | em 16 16 |        |             |                 77 6f 72 64 73 69 7a 65  --  w o r d s i z e
5040:094 | DONE dir | em 16 16 |        |             |                                          -- 
5040:095 | DONE wsp | em 16 16 |        |             |
5040:096 | DONE lbl | em 16 16 | 005f19 |             | nt_pick                              
5040:097 | DONE dir | em 16 16 | 005f19 | (2 bytes)   |         .byte 4, { NC }              
5040:097 | DONE dir | em 16 16 |        |             |                 04 01                    --  . .
5040:098 | DONE dir | em 16 16 | 005f1b | (6 bytes)   |         .word nt_wordsize, xt_pick, 005b36 
5040:098 | DONE dir | em 16 16 |        |             |                 09 5f 29 5b 36 5b        --  	 _ ) [ 6 [
5040:099 | DONE dir | em 16 16 | 005f21 | (4 bytes)   |         .byte 70, 69, 63, 6b         
5040:099 | DONE dir | em 16 16 |        |             |                 70 69 63 6b              --  p i c k
5040:100 | DONE wsp | em 16 16 |        |             |
5040:101 | DONE lbl | em 16 16 | 005f25 |             | nt_bell                              
5040:102 | DONE dir | em 16 16 | 005f25 | (2 bytes)   |         .byte 4, { NC }              
5040:102 | DONE dir | em 16 16 |        |             |                 04 01                    --  . .
5040:103 | DONE dir | em 16 16 | 005f27 | (6 bytes)   |         .word nt_pick, xt_bell, 00551f 
5040:103 | DONE dir | em 16 16 |        |             |                 19 5f 19 55 1f 55        --  . _ . U . U
5040:104 | DONE dir | em 16 16 | 005f2d | (4 bytes)   |         .byte 62, 65, 6c, 6c         
5040:104 | DONE dir | em 16 16 |        |             |                 62 65 6c 6c              --  b e l l
5040:105 | DONE wsp | em 16 16 |        |             |
5040:106 | DONE lbl | em 16 16 | 005f31 |             | nt_chars                             
5040:107 | DONE dir | em 16 16 | 005f31 | (2 bytes)   |         .byte 5, { NC }              
5040:107 | DONE dir | em 16 16 |        |             |                 05 01                    --  . .
5040:108 | DONE dir | em 16 16 | 005f33 | (6 bytes)   |         .word nt_bell, xt_chars, 005599 
5040:108 | DONE dir | em 16 16 |        |             |                 25 5f 98 55 99 55        --  % _ . U . U
5040:109 | DONE dir | em 16 16 | 005f39 | (5 bytes)   |         .byte 63, 68, 61, 72, 73     
5040:109 | DONE dir | em 16 16 |        |             |                 63 68 61 72 73           --  c h a r s
5040:110 | DONE wsp | em 16 16 |        |             |
5040:111 | DONE lbl | em 16 16 | 005f3e |             | nt_cellplus                          
5040:112 | DONE dir | em 16 16 | 005f3e | (2 bytes)   |         .byte 5, { NC }              
5040:112 | DONE dir | em 16 16 |        |             |                 05 01                    --  . .
5040:113 | DONE dir | em 16 16 | 005f40 | (6 bytes)   |         .word nt_chars, xt_cellplus, 00557f 
5040:113 | DONE dir | em 16 16 |        |             |                 31 5f 7d 55 7f 55        --  1 _ } U . U
5040:114 | DONE dir | em 16 16 | 005f46 | (5 bytes)   |         .byte 63, 65, 6c, 6c, 2b     
5040:114 | DONE dir | em 16 16 |        |             |                 63 65 6c 6c 2b           --  c e l l +
5040:115 | DONE wsp | em 16 16 |        |             |
5040:116 | DONE lbl | em 16 16 | 005f4b |             | nt_charplus                          
5040:117 | DONE dir | em 16 16 | 005f4b | (2 bytes)   |         .byte 5, { NC }              uses code of 1+
5040:117 | DONE dir | em 16 16 |        |             |                 05 01                    --  . .
5040:118 | DONE dir | em 16 16 | 005f4d | (6 bytes)   |         .word nt_cellplus, xt_one-plus, 005381 
5040:118 | DONE dir | em 16 16 |        |             |                 3e 5f 80 53 81 53        --  > _ . S . S
5040:119 | DONE dir | em 16 16 | 005f53 | (5 bytes)   |         .byte 63, 68, 61, 72, 2b     
5040:119 | DONE dir | em 16 16 |        |             |                 63 68 61 72 2b           --  c h a r +
5040:120 | DONE wsp | em 16 16 |        |             |
5040:121 | DONE lbl | em 16 16 | 005f58 |             | nt_decimal                           
5040:122 | DONE dir | em 16 16 | 005f58 | (2 bytes)   |         .byte 7, { NC }              
5040:122 | DONE dir | em 16 16 |        |             |                 07 01                    --  . .
5040:123 | DONE dir | em 16 16 | 005f5a | (6 bytes)   |         .word nt_charplus, xt_decimal, 005737 
5040:123 | DONE dir | em 16 16 |        |             |                 4b 5f 32 57 37 57        --  K _ 2 W 7 W
5040:124 | DONE dir | em 16 16 | 005f60 | (7 bytes)   |         .byte 64, 65, 63, 69, 6d, 61, 6c 
5040:124 | DONE dir | em 16 16 |        |             |                 64 65 63 69 6d 61 6c     --  d e c i m a l
5040:125 | DONE wsp | em 16 16 |        |             |
5040:126 | DONE lbl | em 16 16 | 005f67 |             | nt_hex                               
5040:127 | DONE dir | em 16 16 | 005f67 | (2 bytes)   |         .byte 3, { NC }              
5040:127 | DONE dir | em 16 16 |        |             |                 03 01                    --  . .
5040:128 | DONE dir | em 16 16 | 005f69 | (6 bytes)   |         .word nt_decimal, xt_hex, 005909 
5040:128 | DONE dir | em 16 16 |        |             |                 58 5f 04 59 09 59        --  X _ . Y 	 Y
5040:129 | DONE dir | em 16 16 | 005f6f | (3 bytes)   |         .byte 68, 65, 78             
5040:129 | DONE dir | em 16 16 |        |             |                 68 65 78                 --  h e x
5040:130 | DONE wsp | em 16 16 |        |             |
5040:131 | DONE lbl | em 16 16 | 005f72 |             | nt_unused                            
5040:132 | DONE dir | em 16 16 | 005f72 | (2 bytes)   |         .byte 6, { NC }              
5040:132 | DONE dir | em 16 16 |        |             |                 06 01                    --  . .
5040:133 | DONE dir | em 16 16 | 005f74 | (6 bytes)   |         .word nt_hex, xt_unused, 005e2e 
5040:133 | DONE dir | em 16 16 |        |             |                 67 5f 23 5e 2e 5e        --  g _ # ^ . ^
5040:134 | DONE dir | em 16 16 | 005f7a | (6 bytes)   |         .byte 75, 6e, 75, 73, 65, 64 
5040:134 | DONE dir | em 16 16 |        |             |                 75 6e 75 73 65 64        --  u n u s e d
5040:135 | DONE wsp | em 16 16 |        |             |
5040:136 | DONE lbl | em 16 16 | 005f80 |             | nt_page                              
5040:137 | DONE dir | em 16 16 | 005f80 | (2 bytes)   |         .byte 4, { NC }              
5040:137 | DONE dir | em 16 16 |        |             |                 04 01                    --  . .
5040:138 | DONE dir | em 16 16 | 005f82 | (6 bytes)   |         .word nt_unused, xt_page, 005ac3 
5040:138 | DONE dir | em 16 16 |        |             |                 72 5f b7 5a c3 5a        --  r _ . Z . Z
5040:139 | DONE dir | em 16 16 | 005f88 | (4 bytes)   |         .byte 70, 61, 67, 65         
5040:139 | DONE dir | em 16 16 |        |             |                 70 61 67 65              --  p a g e
5040:140 | DONE wsp | em 16 16 |        |             |
5040:141 | DONE lbl | em 16 16 | 005f8c |             | nt_tworfetch                         
5040:142 | DONE dir | em 16 16 | 005f8c | (2 bytes)   |         .byte 3, 00                  not natively compiled
5040:142 | DONE dir | em 16 16 |        |             |                 03 00                    --  . .
5040:143 | DONE dir | em 16 16 | 005f8e | (6 bytes)   |         .word nt_page, xt_tworfetch, 0053dc 
5040:143 | DONE dir | em 16 16 |        |             |                 80 5f cf 53 dc 53        --  . _ . S . S
5040:144 | DONE dir | em 16 16 | 005f94 | (3 bytes)   |         .byte 32, 72, 40             
5040:144 | DONE dir | em 16 16 |        |             |                 32 72 40                 --  2 r @
5040:145 | DONE wsp | em 16 16 |        |             |
5040:146 | DONE lbl | em 16 16 | 005f97 |             | nt_2variable                         
5040:147 | DONE dir | em 16 16 | 005f97 | (2 bytes)   |         .byte 9, { NC }              
5040:147 | DONE dir | em 16 16 |        |             |                 09 01                    --  	 .
5040:148 | DONE dir | em 16 16 | 005f99 | (6 bytes)   |         .word nt_tworfetch, xt_2variable, 005400 
5040:148 | DONE dir | em 16 16 |        |             |                 8c 5f ee 53 00 54        --  . _ . S . T
5040:149 | DONE dir | em 16 16 | 005f9f | (9 bytes)   |         .byte 32, 76, 61, 72, 69, 61, 62, 6c, 65 
5040:149 | DONE dir | em 16 16 |        |             |                 32 76 61 72 69 61 62 6c  --  2 v a r i a b l
5040:149 | DONE dir | em 16 16 |        |             |                 65                       --  e
5040:150 | DONE wsp | em 16 16 |        |             |
5040:151 | DONE lbl | em 16 16 | 005fa8 |             | nt_dabs                              
5040:152 | DONE dir | em 16 16 | 005fa8 | (2 bytes)   |         .byte 4, { NC }              
5040:152 | DONE dir | em 16 16 |        |             |                 04 01                    --  . .
5040:153 | DONE dir | em 16 16 | 005faa | (6 bytes)   |         .word nt_2variable, xt_dabs, 005731 
5040:153 | DONE dir | em 16 16 |        |             |                 97 5f 2b 57 31 57        --  . _ + W 1 W
5040:154 | DONE dir | em 16 16 | 005fb0 | (4 bytes)   |         .byte 64, 61, 62, 73         
5040:154 | DONE dir | em 16 16 |        |             |                 64 61 62 73              --  d a b s
5040:155 | DONE wsp | em 16 16 |        |             |
5040:156 | DONE lbl | em 16 16 | 005fb4 |             | nt_dnegate                           
5040:157 | DONE dir | em 16 16 | 005fb4 | (2 bytes)   |         .byte 7, { NC }              
5040:157 | DONE dir | em 16 16 |        |             |                 07 01                    --  . .
5040:158 | DONE dir | em 16 16 | 005fb6 | (6 bytes)   |         .word nt_dabs, xt_dnegate, 00575a 
5040:158 | DONE dir | em 16 16 |        |             |                 a8 5f 47 57 5a 57        --  . _ G W Z W
5040:159 | DONE dir | em 16 16 | 005fbc | (7 bytes)   |         .byte 64, 6e, 65, 67, 61, 74, 65 
5040:159 | DONE dir | em 16 16 |        |             |                 64 6e 65 67 61 74 65     --  d n e g a t e
5040:160 | DONE wsp | em 16 16 |        |             |
5040:161 | DONE lbl | em 16 16 | 005fc3 |             | nt_dtos                              
5040:162 | DONE dir | em 16 16 | 005fc3 | (2 bytes)   |         .byte 3, { NC }              
5040:162 | DONE dir | em 16 16 |        |             |                 03 01                    --  . .
5040:163 | DONE dir | em 16 16 | 005fc5 | (6 bytes)   |         .word nt_dnegate, xt_dtos, 00572a 
5040:163 | DONE dir | em 16 16 |        |             |                 b4 5f 26 57 2a 57        --  . _ & W * W
5040:164 | DONE dir | em 16 16 | 005fcb | (3 bytes)   |         .byte 64, 3e, 73             
5040:164 | DONE dir | em 16 16 |        |             |                 64 3e 73                 --  d > s
5040:165 | DONE wsp | em 16 16 |        |             |
5040:166 | DONE lbl | em 16 16 | 005fce |             | nt_stod                              
5040:167 | DONE dir | em 16 16 | 005fce | (2 bytes)   |         .byte 3, { NC }              
5040:167 | DONE dir | em 16 16 |        |             |                 03 01                    --  . .
5040:168 | DONE dir | em 16 16 | 005fd0 | (6 bytes)   |         .word nt_dtos, xt_stod, 005c15 
5040:168 | DONE dir | em 16 16 |        |             |                 c3 5f 06 5c 15 5c        --  . _ . \ . \
5040:169 | DONE dir | em 16 16 | 005fd6 | (3 bytes)   |         .byte 73, 3e, 64             
5040:169 | DONE dir | em 16 16 |        |             |                 73 3e 64                 --  s > d
5040:170 | DONE wsp | em 16 16 |        |             |
5040:171 | DONE lbl | em 16 16 | 005fd9 |             | nt_twofromr                          
5040:172 | DONE dir | em 16 16 | 005fd9 | (2 bytes)   |         .byte 3, { CO }              
5040:172 | DONE dir | em 16 16 |        |             |                 03 04                    --  . .
5040:173 | DONE dir | em 16 16 | 005fdb | (6 bytes)   |         .word nt_stod, xt_twofromr, 0053ce 
5040:173 | DONE dir | em 16 16 |        |             |                 ce 5f be 53 ce 53        --  . _ . S . S
5040:174 | DONE dir | em 16 16 | 005fe1 | (3 bytes)   |         .byte 32, 72, 3e             
5040:174 | DONE dir | em 16 16 |        |             |                 32 72 3e                 --  2 r >
5040:175 | DONE wsp | em 16 16 |        |             |
5040:176 | DONE lbl | em 16 16 | 005fe4 |             | nt_twotor                            
5040:177 | DONE dir | em 16 16 | 005fe4 | (2 bytes)   |         .byte 3, { CO }              
5040:177 | DONE dir | em 16 16 |        |             |                 03 04                    --  . .
5040:178 | DONE dir | em 16 16 | 005fe6 | (6 bytes)   |         .word nt_twofromr, xt_twotor, 00539e 
5040:178 | DONE dir | em 16 16 |        |             |                 d9 5f 8e 53 9e 53        --  . _ . S . S
5040:179 | DONE dir | em 16 16 | 005fec | (3 bytes)   |         .byte 32, 3e, 72             
5040:179 | DONE dir | em 16 16 |        |             |                 32 3e 72                 --  2 > r
5040:180 | DONE wsp | em 16 16 |        |             |
5040:181 | DONE lbl | em 16 16 | 005fef |             | nt_dminus                            
5040:182 | DONE dir | em 16 16 | 005fef | (2 bytes)   |         .byte 2, { NC }              
5040:182 | DONE dir | em 16 16 |        |             |                 02 01                    --  . .
5040:183 | DONE dir | em 16 16 | 005ff1 | (6 bytes)   |         .word nt_twotor, xt_dminus, 005725 
5040:183 | DONE dir | em 16 16 |        |             |                 e4 5f 11 57 25 57        --  . _ . W % W
5040:184 | DONE dir | em 16 16 | 005ff7 | (2 bytes)   |         .byte 64, 2d                 
5040:184 | DONE dir | em 16 16 |        |             |                 64 2d                    --  d -
5040:185 | DONE wsp | em 16 16 |        |             |
5040:186 | DONE lbl | em 16 16 | 005ff9 |             | nt_dplus                             
5040:187 | DONE dir | em 16 16 | 005ff9 | (2 bytes)   |         .byte 2, { NC }              
5040:187 | DONE dir | em 16 16 |        |             |                 02 01                    --  . .
5040:188 | DONE dir | em 16 16 | 005ffb | (6 bytes)   |         .word nt_dminus, xt_dplus, 005710 
5040:188 | DONE dir | em 16 16 |        |             |                 ef 5f ff 56 10 57        --  . _ . V . W
5040:189 | DONE dir | em 16 16 | 006001 | (2 bytes)   |         .byte 64, 2b                 
5040:189 | DONE dir | em 16 16 |        |             |                 64 2b                    --  d +
5040:190 | DONE wsp | em 16 16 |        |             |
5040:191 | DONE lbl | em 16 16 | 006003 |             | nt_fmmod                             
5040:192 | DONE dir | em 16 16 | 006003 | (2 bytes)   |         .byte 6, { NC }              
5040:192 | DONE dir | em 16 16 |        |             |                 06 01                    --  . .
5040:193 | DONE dir | em 16 16 | 006005 | (6 bytes)   |         .word nt_dplus, xt_fmmod, 0058c1 
5040:193 | DONE dir | em 16 16 |        |             |                 f9 5f 6e 58 c1 58        --  . _ n X . X
5040:194 | DONE dir | em 16 16 | 00600b | (6 bytes)   |         .byte 66, 6d, 2f, 6d, 6f, 64 
5040:194 | DONE dir | em 16 16 |        |             |                 66 6d 2f 6d 6f 64        --  f m / m o d
5040:195 | DONE wsp | em 16 16 |        |             |
5040:196 | DONE lbl | em 16 16 | 006011 |             | nt_smrem                             
5040:197 | DONE dir | em 16 16 | 006011 | (2 bytes)   |         .byte 6, { NC }              
5040:197 | DONE dir | em 16 16 |        |             |                 06 01                    --  . .
5040:198 | DONE dir | em 16 16 | 006013 | (6 bytes)   |         .word nt_fmmod, xt_smrem, 005cde 
5040:198 | DONE dir | em 16 16 |        |             |                 03 60 85 5c de 5c        --  . ` . \ . \
5040:199 | DONE dir | em 16 16 | 006019 | (6 bytes)   |         .byte 73, 6d, 2f, 72, 65, 6d 
5040:199 | DONE dir | em 16 16 |        |             |                 73 6d 2f 72 65 6d        --  s m / r e m
5040:200 | DONE wsp | em 16 16 |        |             |
5040:201 | DONE lbl | em 16 16 | 00601f |             | nt_udmod                             
5040:202 | DONE dir | em 16 16 | 00601f | (2 bytes)   |         .byte 6, { NC }              
5040:202 | DONE dir | em 16 16 |        |             |                 06 01                    --  . .
5040:203 | DONE dir | em 16 16 | 006021 | (6 bytes)   |         .word nt_smrem, xt_udmod, 005d73 
5040:203 | DONE dir | em 16 16 |        |             |                 11 60 58 5d 73 5d        --  . ` X ] s ]
5040:204 | DONE dir | em 16 16 | 006027 | (6 bytes)   |         .byte 75, 64, 2f, 6d, 6f, 64 
5040:204 | DONE dir | em 16 16 |        |             |                 75 64 2f 6d 6f 64        --  u d / m o d
5040:205 | DONE wsp | em 16 16 |        |             |
5040:206 | DONE lbl | em 16 16 | 00602d |             | nt_ummod                             
5040:207 | DONE dir | em 16 16 | 00602d | (2 bytes)   |         .byte 6, { NC }              
5040:207 | DONE dir | em 16 16 |        |             |                 06 01                    --  . .
5040:208 | DONE dir | em 16 16 | 00602f | (6 bytes)   |         .word nt_udmod, xt_ummod, 005e22 
5040:208 | DONE dir | em 16 16 |        |             |                 1f 60 d2 5d 22 5e        --  . ` . ] " ^
5040:209 | DONE dir | em 16 16 | 006035 | (6 bytes)   |         .byte 75, 6d, 2f, 6d, 6f, 64 
5040:209 | DONE dir | em 16 16 |        |             |                 75 6d 2f 6d 6f 64        --  u m / m o d
5040:210 | DONE wsp | em 16 16 |        |             |
5040:211 | DONE lbl | em 16 16 | 00603b |             | nt_star                              
5040:212 | DONE dir | em 16 16 | 00603b | (2 bytes)   |         .byte 1, { NC }              
5040:212 | DONE dir | em 16 16 |        |             |                 01 01                    --  . .
5040:213 | DONE dir | em 16 16 | 00603d | (6 bytes)   |         .word nt_ummod, xt_star, 005d0d 
5040:213 | DONE dir | em 16 16 |        |             |                 2d 60 06 5d 0d 5d        --  - ` . ]  ]
5040:214 | DONE dir | em 16 16 | 006043 | (1 bytes)   |         .byte 2a                     
5040:214 | DONE dir | em 16 16 |        |             |                 2a                       --  *
5040:215 | DONE wsp | em 16 16 |        |             |
5040:216 | DONE lbl | em 16 16 | 006044 |             | nt_mstar                             
5040:217 | DONE dir | em 16 16 | 006044 | (2 bytes)   |         .byte 2, { NC }              
5040:217 | DONE dir | em 16 16 |        |             |                 02 01                    --  . .
5040:218 | DONE dir | em 16 16 | 006046 | (6 bytes)   |         .word nt_star, xt_mstar, 005982 
5040:218 | DONE dir | em 16 16 |        |             |                 3b 60 63 59 82 59        --  ; ` c Y . Y
5040:219 | DONE dir | em 16 16 | 00604c | (2 bytes)   |         .byte 6d, 2a                 
5040:219 | DONE dir | em 16 16 |        |             |                 6d 2a                    --  m *
5040:220 | DONE wsp | em 16 16 |        |             |
5040:221 | DONE lbl | em 16 16 | 00604e |             | nt_umstar                            
5040:222 | DONE dir | em 16 16 | 00604e | (2 bytes)   |         .byte 3, { NC }              
5040:222 | DONE dir | em 16 16 |        |             |                 03 01                    --  . .
5040:223 | DONE dir | em 16 16 | 006050 | (6 bytes)   |         .word nt_mstar, xt_umstar, 005dd1 
5040:223 | DONE dir | em 16 16 |        |             |                 44 60 73 5d d1 5d        --  D ` s ] . ]
5040:224 | DONE dir | em 16 16 | 006056 | (3 bytes)   |         .byte 75, 6d, 2a             
5040:224 | DONE dir | em 16 16 |        |             |                 75 6d 2a                 --  u m *
5040:225 | DONE wsp | em 16 16 |        |             |
5040:226 | DONE lbl | em 16 16 | 006059 |             | nt_cmoveup                           
5040:227 | DONE dir | em 16 16 | 006059 | (2 bytes)   |         .byte 6, { NC }              
5040:227 | DONE dir | em 16 16 |        |             |                 06 01                    --  . .
5040:228 | DONE dir | em 16 16 | 00605b | (6 bytes)   |         .word nt_umstar, xt_cmoveup, 0055d5 
5040:228 | DONE dir | em 16 16 |        |             |                 4e 60 bd 55 d5 55        --  N ` . U . U
5040:229 | DONE dir | em 16 16 | 006061 | (6 bytes)   |         .byte 63, 6d, 6f, 76, 65, 3e 
5040:229 | DONE dir | em 16 16 |        |             |                 63 6d 6f 76 65 3e        --  c m o v e >
5040:230 | DONE wsp | em 16 16 |        |             |
5040:231 | DONE lbl | em 16 16 | 006067 |             | nt_cmove                             
5040:232 | DONE dir | em 16 16 | 006067 | (2 bytes)   |         .byte 5, { NC }              
5040:232 | DONE dir | em 16 16 |        |             |                 05 01                    --  . .
5040:233 | DONE dir | em 16 16 | 006069 | (6 bytes)   |         .word nt_cmoveup, xt_cmove, 0055bc 
5040:233 | DONE dir | em 16 16 |        |             |                 59 60 9a 55 bc 55        --  Y ` . U . U
5040:234 | DONE dir | em 16 16 | 00606f | (5 bytes)   |         .byte 63, 6d, 6f, 76, 65     
5040:234 | DONE dir | em 16 16 |        |             |                 63 6d 6f 76 65           --  c m o v e
5040:235 | DONE wsp | em 16 16 |        |             |
5040:236 | DONE lbl | em 16 16 | 006074 |             | nt_count                             
5040:237 | DONE dir | em 16 16 | 006074 | (2 bytes)   |         .byte 5, { NC }              
5040:237 | DONE dir | em 16 16 |        |             |                 05 01                    --  . .
5040:238 | DONE dir | em 16 16 | 006076 | (6 bytes)   |         .word nt_cmove, xt_count, 005632 
5040:238 | DONE dir | em 16 16 |        |             |                 67 60 24 56 32 56        --  g ` $ V 2 V
5040:239 | DONE dir | em 16 16 | 00607c | (5 bytes)   |         .byte 63, 6f, 75, 6e, 74     
5040:239 | DONE dir | em 16 16 |        |             |                 63 6f 75 6e 74           --  c o u n t
5040:240 | DONE wsp | em 16 16 |        |             |
5040:241 | DONE lbl | em 16 16 | 006081 |             | nt_abortq                            
5040:242 | DONE dir | em 16 16 | 006081 | (2 bytes)   |         .byte 6, { CO + IM }         
5040:242 | DONE dir | em 16 16 |        |             |                 06 06                    --  . .
5040:243 | DONE dir | em 16 16 | 006083 | (6 bytes)   |         .word nt_count, xt_abortq, 005439 
5040:243 | DONE dir | em 16 16 |        |             |                 74 60 1d 54 39 54        --  t ` . T 9 T
5040:244 | DONE dir | em 16 16 | 006089 | (6 bytes)   |         .byte 61, 62, 6f, 72, 74, &34 ABORT"
5040:244 | DONE dir | em 16 16 |        |             |                 61 62 6f 72 74 22        --  a b o r t "
5040:245 | DONE wsp | em 16 16 |        |             |
5040:246 | DONE lbl | em 16 16 | 00608f |             | nt_abort                             
5040:247 | DONE dir | em 16 16 | 00608f | (2 bytes)   |         .byte 5, 00                  TODO check flags - NC possible?
5040:247 | DONE dir | em 16 16 |        |             |                 05 00                    --  . .
5040:248 | DONE dir | em 16 16 | 006091 | (6 bytes)   |         .word nt_abortq, xt_abort, 0050f1 
5040:248 | DONE dir | em 16 16 |        |             |                 81 60 aa 50 f1 50        --  . ` . P . P
5040:249 | DONE dir | em 16 16 | 006097 | (5 bytes)   |         .byte 61, 62, 6f, 72, 74     
5040:249 | DONE dir | em 16 16 |        |             |                 61 62 6f 72 74           --  a b o r t
5040:250 | DONE wsp | em 16 16 |        |             |
5040:251 | DONE lbl | em 16 16 | 00609c |             | nt_parse                             
5040:252 | DONE dir | em 16 16 | 00609c | (2 bytes)   |         .byte 5, 00                  
5040:252 | DONE dir | em 16 16 |        |             |                 05 00                    --  . .
5040:253 | DONE dir | em 16 16 | 00609e | (6 bytes)   |         .word nt_abort, xt_parse, 005b28 
5040:253 | DONE dir | em 16 16 |        |             |                 8f 60 f6 5a 28 5b        --  . ` . Z ( [
5040:254 | DONE dir | em 16 16 | 0060a4 | (5 bytes)   |         .byte 70, 61, 72, 73, 65     
5040:254 | DONE dir | em 16 16 |        |             |                 70 61 72 73 65           --  p a r s e
5040:255 | DONE wsp | em 16 16 |        |             |
5040:256 | DONE lbl | em 16 16 | 0060a9 |             | nt_quit                              
5040:257 | DONE dir | em 16 16 | 0060a9 | (2 bytes)   |         .byte 4, 00                  
5040:257 | DONE dir | em 16 16 |        |             |                 04 00                    --  . .
5040:258 | DONE dir | em 16 16 | 0060ab | (6 bytes)   |         .word nt_parse, xt_quit, 0050f1 
5040:258 | DONE dir | em 16 16 |        |             |                 9c 60 b2 50 f1 50        --  . ` . P . P
5040:259 | DONE dir | em 16 16 | 0060b1 | (4 bytes)   |         .byte 71, 75, 69, 74         
5040:259 | DONE dir | em 16 16 |        |             |                 71 75 69 74              --  q u i t
5040:260 | DONE wsp | em 16 16 |        |             |
5040:261 | DONE lbl | em 16 16 | 0060b5 |             | nt_question                          
5040:262 | DONE dir | em 16 16 | 0060b5 | (2 bytes)   |         .byte 1, { NC }              
5040:262 | DONE dir | em 16 16 |        |             |                 01 01                    --  . .
5040:263 | DONE dir | em 16 16 | 0060b7 | (6 bytes)   |         .word nt_quit, xt_question, 0052ad 
5040:263 | DONE dir | em 16 16 |        |             |                 a9 60 a7 52 ad 52        --  . ` . R . R
5040:264 | DONE dir | em 16 16 | 0060bd | (1 bytes)   |         .byte 3f                     
5040:264 | DONE dir | em 16 16 |        |             |                 3f                       --  ?
5040:265 | DONE wsp | em 16 16 |        |             |
5040:266 | DONE lbl | em 16 16 | 0060be |             | nt_int-name                          
5040:267 | DONE dir | em 16 16 | 0060be | (2 bytes)   |         .byte 8, { NC }              
5040:267 | DONE dir | em 16 16 |        |             |                 08 01                    --  . .
5040:268 | DONE dir | em 16 16 | 0060c0 | (6 bytes)   |         .word nt_question, xt_int-name, 0058f6 
5040:268 | DONE dir | em 16 16 |        |             |                 b5 60 d3 58 f6 58        --  . ` . X . X
5040:269 | DONE dir | em 16 16 | 0060c6 | (8 bytes)   |         .byte 69, 6e, 74, 3e, 6e, 61, 6d, 65 
5040:269 | DONE dir | em 16 16 |        |             |                 69 6e 74 3e 6e 61 6d 65  --  i n t > n a m e
5040:269 | DONE dir | em 16 16 |        |             |                                          -- 
5040:270 | DONE wsp | em 16 16 |        |             |
5040:271 | DONE lbl | em 16 16 | 0060ce |             | nt_name-int                          
5040:272 | DONE dir | em 16 16 | 0060ce | (2 bytes)   |         .byte 8, { NC }              
5040:272 | DONE dir | em 16 16 |        |             |                 08 01                    --  . .
5040:273 | DONE dir | em 16 16 | 0060d0 | (6 bytes)   |         .word nt_int-name, xt_name-int, 0059ec 
5040:273 | DONE dir | em 16 16 |        |             |                 be 60 e4 59 ec 59        --  . ` . Y . Y
5040:274 | DONE dir | em 16 16 | 0060d6 | (8 bytes)   |         .byte 6e, 61, 6d, 65, 3e, 69, 6e, 74 
5040:274 | DONE dir | em 16 16 |        |             |                 6e 61 6d 65 3e 69 6e 74  --  n a m e > i n t
5040:274 | DONE dir | em 16 16 |        |             |                                          -- 
5040:275 | DONE wsp | em 16 16 |        |             |
5040:276 | DONE lbl | em 16 16 | 0060de |             | nt_cr                                
5040:277 | DONE dir | em 16 16 | 0060de | (2 bytes)   |         .byte 2, { NC }              
5040:277 | DONE dir | em 16 16 |        |             |                 02 01                    --  . .
5040:278 | DONE dir | em 16 16 | 0060e0 | (6 bytes)   |         .word nt_name-int, xt_cr, 005639 
5040:278 | DONE dir | em 16 16 |        |             |                 ce 60 33 56 39 56        --  . ` 3 V 9 V
5040:279 | DONE dir | em 16 16 | 0060e6 | (2 bytes)   |         .byte 63, 72                 
5040:279 | DONE dir | em 16 16 |        |             |                 63 72                    --  c r
5040:280 | DONE wsp | em 16 16 |        |             |
5040:281 | DONE lbl | em 16 16 | 0060e8 |             | nt_fill                              
5040:282 | DONE dir | em 16 16 | 0060e8 | (2 bytes)   |         .byte 4, { NC }              
5040:282 | DONE dir | em 16 16 |        |             |                 04 01                    --  . .
5040:283 | DONE dir | em 16 16 | 0060ea | (6 bytes)   |         .word nt_cr, xt_fill, 0057da 
5040:283 | DONE dir | em 16 16 |        |             |                 de 60 c0 57 da 57        --  . ` . W . W
5040:284 | DONE dir | em 16 16 | 0060f0 | (4 bytes)   |         .byte 66, 69, 6c, 6c         
5040:284 | DONE dir | em 16 16 |        |             |                 66 69 6c 6c              --  f i l l
5040:285 | DONE wsp | em 16 16 |        |             |
5040:286 | DONE lbl | em 16 16 | 0060f4 |             | nt_erase                             
5040:287 | DONE dir | em 16 16 | 0060f4 | (2 bytes)   |         .byte 5, { NC }              
5040:287 | DONE dir | em 16 16 |        |             |                 05 01                    --  . .
5040:288 | DONE dir | em 16 16 | 0060f6 | (6 bytes)   |         .word nt_fill, xt_erase, 0057da 
5040:288 | DONE dir | em 16 16 |        |             |                 e8 60 b9 57 da 57        --  . ` . W . W
5040:289 | DONE dir | em 16 16 | 0060fc | (5 bytes)   |         .byte 65, 72, 61, 73, 65     
5040:289 | DONE dir | em 16 16 |        |             |                 65 72 61 73 65           --  e r a s e
5040:290 | DONE wsp | em 16 16 |        |             |
5040:291 | DONE lbl | em 16 16 | 006101 |             | nt_numbermore                        
5040:292 | DONE dir | em 16 16 | 006101 | (2 bytes)   |         .byte 2, { NC }              "quoth the rumben"
5040:292 | DONE dir | em 16 16 |        |             |                 02 01                    --  . .
5040:293 | DONE dir | em 16 16 | 006103 | (6 bytes)   |         .word nt_erase, xt_numbermore, 00529d 
5040:293 | DONE dir | em 16 16 |        |             |                 f4 60 8f 52 9d 52        --  . ` . R . R
5040:294 | DONE dir | em 16 16 | 006109 | (2 bytes)   |         .byte 23, 3e                 
5040:294 | DONE dir | em 16 16 |        |             |                 23 3e                    --  # >
5040:295 | DONE wsp | em 16 16 |        |             |
5040:296 | DONE lbl | em 16 16 | 00610b |             | nt_hold                              
5040:297 | DONE dir | em 16 16 | 00610b | (2 bytes)   |         .byte 4, { NC }              
5040:297 | DONE dir | em 16 16 |        |             |                 04 01                    --  . .
5040:298 | DONE dir | em 16 16 | 00610d | (6 bytes)   |         .word nt_numbermore, xt_hold, 005917 
5040:298 | DONE dir | em 16 16 |        |             |                 01 61 0a 59 17 59        --  . a 
 Y . Y
5040:299 | DONE dir | em 16 16 | 006113 | (4 bytes)   |         .byte 68, 6f, 6c, 64         
5040:299 | DONE dir | em 16 16 |        |             |                 68 6f 6c 64              --  h o l d
5040:300 | DONE wsp | em 16 16 |        |             |
5040:301 | DONE lbl | em 16 16 | 006117 |             | nt_hashs                             
5040:302 | DONE dir | em 16 16 | 006117 | (2 bytes)   |         .byte 2, { NC }              also known as "number-s"
5040:302 | DONE dir | em 16 16 |        |             |                 02 01                    --  . .
5040:303 | DONE dir | em 16 16 | 006119 | (6 bytes)   |         .word nt_hold, xt_hashs, 0052a6 
5040:303 | DONE dir | em 16 16 |        |             |                 0b 61 9e 52 a6 52        --   a . R . R
5040:304 | DONE dir | em 16 16 | 00611f | (2 bytes)   |         .byte 23, 73                 
5040:304 | DONE dir | em 16 16 |        |             |                 23 73                    --  # s
5040:305 | DONE wsp | em 16 16 |        |             |
5040:306 | DONE lbl | em 16 16 | 006121 |             | nt_sign                              
5040:307 | DONE dir | em 16 16 | 006121 | (2 bytes)   |         .byte 4, { NC }              
5040:307 | DONE dir | em 16 16 |        |             |                 04 01                    --  . .
5040:308 | DONE dir | em 16 16 | 006123 | (6 bytes)   |         .word nt_hashs, xt_sign, 005c23 
5040:308 | DONE dir | em 16 16 |        |             |                 17 61 16 5c 23 5c        --  . a . \ # \
5040:309 | DONE dir | em 16 16 | 006129 | (4 bytes)   |         .byte 73, 69, 67, 6e         
5040:309 | DONE dir | em 16 16 |        |             |                 73 69 67 6e              --  s i g n
5040:310 | DONE wsp | em 16 16 |        |             |
5040:311 | DONE lbl | em 16 16 | 00612d |             | nt_hash                              
5040:312 | DONE dir | em 16 16 | 00612d | (2 bytes)   |         .byte 1, { NC }              also known as "number-sign"
5040:312 | DONE dir | em 16 16 |        |             |                 01 01                    --  . .
5040:313 | DONE dir | em 16 16 | 00612f | (6 bytes)   |         .word nt_sign, xt_hash, 00528e 
5040:313 | DONE dir | em 16 16 |        |             |                 21 61 74 52 8e 52        --  ! a t R . R
5040:314 | DONE dir | em 16 16 | 006135 | (1 bytes)   |         .byte 23                     
5040:314 | DONE dir | em 16 16 |        |             |                 23                       --  #
5040:315 | DONE wsp | em 16 16 |        |             |
5040:316 | DONE lbl | em 16 16 | 006136 |             | nt_lessnumber                        
5040:317 | DONE dir | em 16 16 | 006136 | (2 bytes)   |         .byte 2, { NC }              
5040:317 | DONE dir | em 16 16 |        |             |                 02 01                    --  . .
5040:318 | DONE dir | em 16 16 | 006138 | (6 bytes)   |         .word nt_hash, xt_lessnumber, 00511a 
5040:318 | DONE dir | em 16 16 |        |             |                 2d 61 11 51 1a 51        --  - a . Q . Q
5040:319 | DONE dir | em 16 16 | 00613e | (2 bytes)   |         .byte 3c, 23                 
5040:319 | DONE dir | em 16 16 |        |             |                 3c 23                    --  < #
5040:320 | DONE wsp | em 16 16 |        |             |
5040:321 | DONE lbl | em 16 16 | 006140 |             | nt_bl                                
5040:322 | DONE dir | em 16 16 | 006140 | (2 bytes)   |         .byte 2, { NC }              
5040:322 | DONE dir | em 16 16 |        |             |                 02 01                    --  . .
5040:323 | DONE dir | em 16 16 | 006142 | (6 bytes)   |         .word nt_lessnumber, xt_bl, 00552d 
5040:323 | DONE dir | em 16 16 |        |             |                 36 61 26 55 2d 55        --  6 a & U - U
5040:324 | DONE dir | em 16 16 | 006148 | (2 bytes)   |         .byte 62, 6c                 
5040:324 | DONE dir | em 16 16 |        |             |                 62 6c                    --  b l
5040:325 | DONE wsp | em 16 16 |        |             |
5040:326 | DONE lbl | em 16 16 | 00614a |             | nt_spaces                            
5040:327 | DONE dir | em 16 16 | 00614a | (2 bytes)   |         .byte 6, { NC }              
5040:327 | DONE dir | em 16 16 |        |             |                 06 01                    --  . .
5040:328 | DONE dir | em 16 16 | 00614c | (6 bytes)   |         .word nt_bl, xt_spaces, 005d05 
5040:328 | DONE dir | em 16 16 |        |             |                 40 61 f9 5c 05 5d        --  @ a . \ . ]
5040:329 | DONE dir | em 16 16 | 006152 | (6 bytes)   |         .byte 73, 70, 61, 63, 65, 73 
5040:329 | DONE dir | em 16 16 |        |             |                 73 70 61 63 65 73        --  s p a c e s
5040:330 | DONE wsp | em 16 16 |        |             |
5040:331 | DONE lbl | em 16 16 | 006158 |             | nt_space                             
5040:332 | DONE dir | em 16 16 | 006158 | (2 bytes)   |         .byte 5, { NC }              
5040:332 | DONE dir | em 16 16 |        |             |                 05 01                    --  . .
5040:333 | DONE dir | em 16 16 | 00615a | (6 bytes)   |         .word nt_spaces, xt_space, 005cf9 
5040:333 | DONE dir | em 16 16 |        |             |                 4a 61 f3 5c f9 5c        --  J a . \ . \
5040:334 | DONE dir | em 16 16 | 006160 | (5 bytes)   |         .byte 73, 70, 61, 63, 65     
5040:334 | DONE dir | em 16 16 |        |             |                 73 70 61 63 65           --  s p a c e
5040:335 | DONE wsp | em 16 16 |        |             |
5040:336 | DONE lbl | em 16 16 | 006165 |             | nt_dots                              
5040:337 | DONE dir | em 16 16 | 006165 | (2 bytes)   |         .byte 2, { NC }              
5040:337 | DONE dir | em 16 16 |        |             |                 02 01                    --  . .
5040:338 | DONE dir | em 16 16 | 006167 | (6 bytes)   |         .word nt_space, xt_dots, 00522c 
5040:338 | DONE dir | em 16 16 |        |             |                 58 61 e5 51 2c 52        --  X a . Q , R
5040:339 | DONE dir | em 16 16 | 00616d | (2 bytes)   |         .byte 2e, 73                 
5040:339 | DONE dir | em 16 16 |        |             |                 2e 73                    --  . s
5040:340 | DONE wsp | em 16 16 |        |             |
5040:341 | DONE lbl | em 16 16 | 00616f |             | nt_type                              
5040:342 | DONE dir | em 16 16 | 00616f | (2 bytes)   |         .byte 4, { NC }              
5040:342 | DONE dir | em 16 16 |        |             |                 04 01                    --  . .
5040:343 | DONE dir | em 16 16 | 006171 | (6 bytes)   |         .word nt_dots, xt_type, 005d57 
5040:343 | DONE dir | em 16 16 |        |             |                 65 61 37 5d 57 5d        --  e a 7 ] W ]
5040:344 | DONE dir | em 16 16 | 006177 | (4 bytes)   |         .byte 74, 79, 70, 65         
5040:344 | DONE dir | em 16 16 |        |             |                 74 79 70 65              --  t y p e
5040:345 | DONE wsp | em 16 16 |        |             |
5040:346 | DONE lbl | em 16 16 | 00617b |             | nt_emit                              
5040:347 | DONE dir | em 16 16 | 00617b | (2 bytes)   |         .byte 4, { NC }              
5040:347 | DONE dir | em 16 16 |        |             |                 04 01                    --  . .
5040:348 | DONE dir | em 16 16 | 00617d | (6 bytes)   |         .word nt_type, xt_emit, 0057b9 
5040:348 | DONE dir | em 16 16 |        |             |                 6f 61 af 57 b9 57        --  o a . W . W
5040:349 | DONE dir | em 16 16 | 006183 | (4 bytes)   |         .byte 65, 6d, 69, 74         
5040:349 | DONE dir | em 16 16 |        |             |                 65 6d 69 74              --  e m i t
5040:350 | DONE wsp | em 16 16 |        |             |
5040:351 | DONE lbl | em 16 16 | 006187 |             | nt_dot                               
5040:352 | DONE dir | em 16 16 | 006187 | (2 bytes)   |         .byte 1, { NC }              
5040:352 | DONE dir | em 16 16 |        |             |                 01 01                    --  . .
5040:353 | DONE dir | em 16 16 | 006189 | (6 bytes)   |         .word nt_emit, xt_dot, 0051d0 
5040:353 | DONE dir | em 16 16 |        |             |                 7b 61 b2 51 d0 51        --  { a . Q . Q
5040:354 | DONE dir | em 16 16 | 00618f | (1 bytes)   |         .byte 2e                     
5040:354 | DONE dir | em 16 16 |        |             |                 2e                       --  .
5040:355 | DONE wsp | em 16 16 |        |             |
5040:356 | DONE lbl | em 16 16 | 006190 |             | nt_pad                               
5040:357 | DONE dir | em 16 16 | 006190 | (2 bytes)   |         .byte 3, { NC }              
5040:357 | DONE dir | em 16 16 |        |             |                 03 01                    --  . .
5040:358 | DONE dir | em 16 16 | 006192 | (6 bytes)   |         .word nt_dot, xt_pad, 005ab6 
5040:358 | DONE dir | em 16 16 |        |             |                 87 61 ab 5a b6 5a        --  . a . Z . Z
5040:359 | DONE dir | em 16 16 | 006198 | (3 bytes)   |         .byte 70, 61, 64             
5040:359 | DONE dir | em 16 16 |        |             |                 70 61 64                 --  p a d
5040:360 | DONE wsp | em 16 16 |        |             |
5040:361 | DONE lbl | em 16 16 | 00619b |             | nt_base                              
5040:362 | DONE dir | em 16 16 | 00619b | (2 bytes)   |         .byte 4, { NC }              
5040:362 | DONE dir | em 16 16 |        |             |                 04 01                    --  . .
5040:363 | DONE dir | em 16 16 | 00619d | (6 bytes)   |         .word nt_pad, xt_base, 005518 
5040:363 | DONE dir | em 16 16 |        |             |                 90 61 11 55 18 55        --  . a . U . U
5040:364 | DONE dir | em 16 16 | 0061a3 | (4 bytes)   |         .byte 62, 61, 73, 65         
5040:364 | DONE dir | em 16 16 |        |             |                 62 61 73 65              --  b a s e
5040:365 | DONE wsp | em 16 16 |        |             |
5040:366 | DONE lbl | em 16 16 | 0061a7 |             | nt_input                             
5040:367 | DONE dir | em 16 16 | 0061a7 | (2 bytes)   |         .byte 5, { NC }              
5040:367 | DONE dir | em 16 16 |        |             |                 05 01                    --  . .
5040:368 | DONE dir | em 16 16 | 0061a9 | (6 bytes)   |         .word nt_base, xt_input, 0058d2 
5040:368 | DONE dir | em 16 16 |        |             |                 9b 61 cb 58 d2 58        --  . a . X . X
5040:369 | DONE dir | em 16 16 | 0061af | (5 bytes)   |         .byte 69, 6e, 70, 75, 74     
5040:369 | DONE dir | em 16 16 |        |             |                 69 6e 70 75 74           --  i n p u t
5040:370 | DONE wsp | em 16 16 |        |             |
5040:371 | DONE lbl | em 16 16 | 0061b4 |             | nt_output                            
5040:372 | DONE dir | em 16 16 | 0061b4 | (2 bytes)   |         .byte 6, { NC }              
5040:372 | DONE dir | em 16 16 |        |             |                 06 01                    --  . .
5040:373 | DONE dir | em 16 16 | 0061b6 | (6 bytes)   |         .word nt_input, xt_output, 005aa3 
5040:373 | DONE dir | em 16 16 |        |             |                 a7 61 9c 5a a3 5a        --  . a . Z . Z
5040:374 | DONE dir | em 16 16 | 0061bc | (6 bytes)   |         .byte 6f, 75, 74, 70, 75, 74 
5040:374 | DONE dir | em 16 16 |        |             |                 6f 75 74 70 75 74        --  o u t p u t
5040:375 | DONE wsp | em 16 16 |        |             |
5040:376 | DONE lbl | em 16 16 | 0061c2 |             | nt_evaluate                          
5040:377 | DONE dir | em 16 16 | 0061c2 | (2 bytes)   |         .byte 8, { NC }              
5040:377 | DONE dir | em 16 16 |        |             |                 08 01                    --  . .
5040:378 | DONE dir | em 16 16 | 0061c4 | (6 bytes)   |         .word nt_output, xt_evaluate, 005809 
5040:378 | DONE dir | em 16 16 |        |             |                 b4 61 db 57 09 58        --  . a . W 	 X
5040:379 | DONE dir | em 16 16 | 0061ca | (8 bytes)   |         .byte 65, 76, 61, 6c, 75, 61, 74, 65 
5040:379 | DONE dir | em 16 16 |        |             |                 65 76 61 6c 75 61 74 65  --  e v a l u a t e
5040:379 | DONE dir | em 16 16 |        |             |                                          -- 
5040:380 | DONE wsp | em 16 16 |        |             |
5040:381 | DONE lbl | em 16 16 | 0061d2 |             | nt_cells                             
5040:382 | DONE dir | em 16 16 | 0061d2 | (2 bytes)   |         .byte 5, { NC }              2* because we have 16 bit stack
5040:382 | DONE dir | em 16 16 |        |             |                 05 01                    --  . .
5040:383 | DONE dir | em 16 16 | 0061d4 | (6 bytes)   |         .word nt_evaluate, xt_two-star, 00538d 
5040:383 | DONE dir | em 16 16 |        |             |                 c2 61 8a 53 8d 53        --  . a . S . S
5040:384 | DONE dir | em 16 16 | 0061da | (5 bytes)   |         .byte 63, 65, 6c, 6c, 73     
5040:384 | DONE dir | em 16 16 |        |             |                 63 65 6c 6c 73           --  c e l l s
5040:385 | DONE wsp | em 16 16 |        |             |
5040:386 | DONE lbl | em 16 16 | 0061df |             | nt_dotquote                          
5040:387 | DONE dir | em 16 16 | 0061df | (2 bytes)   |         .byte 2, { CO + NC + IM }    
5040:387 | DONE dir | em 16 16 |        |             |                 02 07                    --  . .
5040:388 | DONE dir | em 16 16 | 0061e1 | (6 bytes)   |         .word nt_cells, xt_dotquote, 0051e5 
5040:388 | DONE dir | em 16 16 |        |             |                 d2 61 d1 51 e5 51        --  . a . Q . Q
5040:389 | DONE dir | em 16 16 | 0061e7 | (2 bytes)   |         .byte 2e, &34                
5040:389 | DONE dir | em 16 16 |        |             |                 2e 22                    --  . "
5040:390 | DONE wsp | em 16 16 |        |             |
5040:391 | DONE lbl | em 16 16 | 0061e9 |             | nt_squote                            
5040:392 | DONE dir | em 16 16 | 0061e9 | (2 bytes)   |         .byte 2, { IM + NC }         not CO, see source code
5040:392 | DONE dir | em 16 16 |        |             |                 02 03                    --  . .
5040:393 | DONE dir | em 16 16 | 0061eb | (6 bytes)   |         .word nt_dotquote, xt_squote, 005c05 
5040:393 | DONE dir | em 16 16 |        |             |                 df 61 d0 5b 05 5c        --  . a . [ . \
5040:394 | DONE dir | em 16 16 | 0061f1 | (2 bytes)   |         .byte 73, &34                
5040:394 | DONE dir | em 16 16 |        |             |                 73 22                    --  s "
5040:395 | DONE wsp | em 16 16 |        |             |
5040:396 | DONE lbl | em 16 16 | 0061f3 |             | nt_sliteral                          
5040:397 | DONE dir | em 16 16 | 0061f3 | (2 bytes)   |         .byte 8, { IM + CO }         
5040:397 | DONE dir | em 16 16 |        |             |                 08 06                    --  . .
5040:398 | DONE dir | em 16 16 | 0061f5 | (6 bytes)   |         .word nt_squote, xt_sliteral, 005c6e 
5040:398 | DONE dir | em 16 16 |        |             |                 e9 61 24 5c 6e 5c        --  . a $ \ n \
5040:399 | DONE dir | em 16 16 | 0061fb | (8 bytes)   |         .byte 73, 6c, 69, 74, 65, 72, 61, 6c 
5040:399 | DONE dir | em 16 16 |        |             |                 73 6c 69 74 65 72 61 6c  --  s l i t e r a l
5040:399 | DONE dir | em 16 16 |        |             |                                          -- 
5040:400 | DONE wsp | em 16 16 |        |             |
5040:401 | DONE lbl | em 16 16 | 006203 |             | nt_brackettick                       
5040:402 | DONE dir | em 16 16 | 006203 | (2 bytes)   |         .byte 3, { IM + CO }         
5040:402 | DONE dir | em 16 16 |        |             |                 03 06                    --  . .
5040:403 | DONE dir | em 16 16 | 006205 | (6 bytes)   |         .word nt_sliteral, xt_brackettick, 0052cd 
5040:403 | DONE dir | em 16 16 |        |             |                 f3 61 c7 52 cd 52        --  . a . R . R
5040:404 | DONE dir | em 16 16 | 00620b | (3 bytes)   |         .byte 5b, 27, 5d             
5040:404 | DONE dir | em 16 16 |        |             |                 5b 27 5d                 --  [ ' ]
5040:405 | DONE wsp | em 16 16 |        |             |
5040:406 | DONE lbl | em 16 16 | 00620e |             | nt_bracketchar                       
5040:407 | DONE dir | em 16 16 | 00620e | (2 bytes)   |         .byte 6, { IM + CO }         
5040:407 | DONE dir | em 16 16 |        |             |                 06 06                    --  . .
5040:408 | DONE dir | em 16 16 | 006210 | (6 bytes)   |         .word nt_brackettick, xt_bracketchar, 0052dc 
5040:408 | DONE dir | em 16 16 |        |             |                 03 62 d6 52 dc 52        --  . b . R . R
5040:409 | DONE dir | em 16 16 | 006216 | (6 bytes)   |         .byte 5b, 63, 68, 61, 72, 5d 
5040:409 | DONE dir | em 16 16 |        |             |                 5b 63 68 61 72 5d        --  [ c h a r ]
5040:410 | DONE wsp | em 16 16 |        |             |
5040:411 | DONE lbl | em 16 16 | 00621c |             | nt_literal                           
5040:412 | DONE dir | em 16 16 | 00621c | (2 bytes)   |         .byte 7, { IM + CO }         
5040:412 | DONE dir | em 16 16 |        |             |                 07 06                    --  . .
5040:413 | DONE dir | em 16 16 | 00621e | (6 bytes)   |         .word nt_bracketchar, xt_literal, 005941 
5040:413 | DONE dir | em 16 16 |        |             |                 0e 62 30 59 41 59        --  . b 0 Y A Y
5040:414 | DONE dir | em 16 16 | 006224 | (7 bytes)   |         .byte 6c, 69, 74, 65, 72, 61, 6c 
5040:414 | DONE dir | em 16 16 |        |             |                 6c 69 74 65 72 61 6c     --  l i t e r a l
5040:415 | DONE wsp | em 16 16 |        |             |
5040:416 | DONE lbl | em 16 16 | 00622b |             | nt_native-compile                    
5040:417 | DONE dir | em 16 16 | 00622b | (2 bytes)   |         .byte 0e, { NC }             
5040:417 | DONE dir | em 16 16 |        |             |                 0e 01                    --  . .
5040:418 | DONE dir | em 16 16 | 00622d | (6 bytes)   |         .word nt_literal, xt_native-compile, 005a06 
5040:418 | DONE dir | em 16 16 |        |             |                 1c 62 fe 59 06 5a        --  . b . Y . Z
5040:419 | DONE dir | em 16 16 | 006233 | (14 bytes)  |         .byte 6e, 61, 74, 69, 76, 65, 2d, 63, 6f, 6d, 70, 69, 6c, 65 
5040:419 | DONE dir | em 16 16 |        |             |                 6e 61 74 69 76 65 2d 63  --  n a t i v e - c
5040:419 | DONE dir | em 16 16 |        |             |                 6f 6d 70 69 6c 65        --  o m p i l e
5040:420 | DONE wsp | em 16 16 |        |             |
5040:421 | DONE lbl | em 16 16 | 006241 |             | nt_compile-only                      
5040:422 | DONE dir | em 16 16 | 006241 | (2 bytes)   |         .byte 0c, { NC }             
5040:422 | DONE dir | em 16 16 |        |             |                 0c 01                    --   .
5040:423 | DONE dir | em 16 16 | 006243 | (6 bytes)   |         .word nt_native-compile, xt_compile-only, 0055de 
5040:423 | DONE dir | em 16 16 |        |             |                 2b 62 d6 55 de 55        --  + b . U . U
5040:424 | DONE dir | em 16 16 | 006249 | (12 bytes)  |         .byte 63, 6f, 6d, 70, 69, 6c, 65, 2d, 6f, 6e, 6c, 79 
5040:424 | DONE dir | em 16 16 |        |             |                 63 6f 6d 70 69 6c 65 2d  --  c o m p i l e -
5040:424 | DONE dir | em 16 16 |        |             |                 6f 6e 6c 79              --  o n l y
5040:425 | DONE wsp | em 16 16 |        |             |
5040:426 | DONE lbl | em 16 16 | 006255 |             | nt_immediate                         
5040:427 | DONE dir | em 16 16 | 006255 | (2 bytes)   |         .byte 9, { NC }              
5040:427 | DONE dir | em 16 16 |        |             |                 09 01                    --  	 .
5040:428 | DONE dir | em 16 16 | 006257 | (6 bytes)   |         .word nt_compile-only, xt_immediate, 0058ca 
5040:428 | DONE dir | em 16 16 |        |             |                 41 62 c2 58 ca 58        --  A b . X . X
5040:429 | DONE dir | em 16 16 | 00625d | (9 bytes)   |         .byte 69, 6d, 6d, 65, 64, 69, 61, 74, 65 
5040:429 | DONE dir | em 16 16 |        |             |                 69 6d 6d 65 64 69 61 74  --  i m m e d i a t
5040:429 | DONE dir | em 16 16 |        |             |                 65                       --  e
5040:430 | DONE wsp | em 16 16 |        |             |
5040:431 | DONE lbl | em 16 16 | 006266 |             | nt_postpone                          
5040:432 | DONE dir | em 16 16 | 006266 | (2 bytes)   |         .byte 8, { IM + CO }         
5040:432 | DONE dir | em 16 16 |        |             |                 08 06                    --  . .
5040:433 | DONE dir | em 16 16 | 006268 | (6 bytes)   |         .word nt_immediate, xt_postpone, 005b79 
5040:433 | DONE dir | em 16 16 |        |             |                 55 62 47 5b 79 5b        --  U b G [ y [
5040:434 | DONE dir | em 16 16 | 00626e | (8 bytes)   |         .byte 70, 6f, 73, 74, 70, 6f, 6e, 65 
5040:434 | DONE dir | em 16 16 |        |             |                 70 6f 73 74 70 6f 6e 65  --  p o s t p o n e
5040:434 | DONE dir | em 16 16 |        |             |                                          -- 
5040:435 | DONE wsp | em 16 16 |        |             |
5040:436 | DONE lbl | em 16 16 | 006276 |             | nt_rightbracket                      
5040:437 | DONE dir | em 16 16 | 006276 | (2 bytes)   |         .byte 1, { NC }              
5040:437 | DONE dir | em 16 16 |        |             |                 01 01                    --  . .
5040:438 | DONE dir | em 16 16 | 006278 | (6 bytes)   |         .word nt_postpone, xt_rightbracket, 0052d5 
5040:438 | DONE dir | em 16 16 |        |             |                 66 62 d0 52 d5 52        --  f b . R . R
5040:439 | DONE dir | em 16 16 | 00627e | (1 bytes)   |         .byte 5d                     
5040:439 | DONE dir | em 16 16 |        |             |                 5d                       --  ]
5040:440 | DONE wsp | em 16 16 |        |             |
5040:441 | DONE lbl | em 16 16 | 00627f |             | nt_leftbracket                       
5040:442 | DONE dir | em 16 16 | 00627f | (2 bytes)   |         .byte 1, { IM + CO }         
5040:442 | DONE dir | em 16 16 |        |             |                 01 06                    --  . .
5040:443 | DONE dir | em 16 16 | 006281 | (6 bytes)   |         .word nt_rightbracket, xt_leftbracket, 0052cf 
5040:443 | DONE dir | em 16 16 |        |             |                 76 62 cd 52 cf 52        --  v b . R . R
5040:444 | DONE dir | em 16 16 | 006287 | (1 bytes)   |         .byte 5b                     
5040:444 | DONE dir | em 16 16 |        |             |                 5b                       --  [
5040:445 | DONE wsp | em 16 16 |        |             |
5040:446 | DONE lbl | em 16 16 | 006288 |             | nt_latestnt                          
5040:447 | DONE dir | em 16 16 | 006288 | (2 bytes)   |         .byte 8, { NC }              
5040:447 | DONE dir | em 16 16 |        |             |                 08 01                    --  . .
5040:448 | DONE dir | em 16 16 | 00628a | (6 bytes)   |         .word nt_leftbracket, xt_latestnt, 00591f 
5040:448 | DONE dir | em 16 16 |        |             |                 7f 62 18 59 1f 59        --  . b . Y . Y
5040:449 | DONE dir | em 16 16 | 006290 | (8 bytes)   |         .byte 6c, 61, 74, 65, 73, 74, 6e, 74 
5040:449 | DONE dir | em 16 16 |        |             |                 6c 61 74 65 73 74 6e 74  --  l a t e s t n t
5040:449 | DONE dir | em 16 16 |        |             |                                          -- 
5040:450 | DONE wsp | em 16 16 |        |             |
5040:451 | DONE lbl | em 16 16 | 006298 |             | nt_latestxt                          
5040:452 | DONE dir | em 16 16 | 006298 | (2 bytes)   |         .byte 8, { NC }              
5040:452 | DONE dir | em 16 16 |        |             |                 08 01                    --  . .
5040:453 | DONE dir | em 16 16 | 00629a | (6 bytes)   |         .word nt_latestnt, xt_latestxt, 00592f 
5040:453 | DONE dir | em 16 16 |        |             |                 88 62 20 59 2f 59        --  . b   Y / Y
5040:454 | DONE dir | em 16 16 | 0062a0 | (8 bytes)   |         .byte 6c, 61, 74, 65, 73, 74, 78, 74 
5040:454 | DONE dir | em 16 16 |        |             |                 6c 61 74 65 73 74 78 74  --  l a t e s t x t
5040:454 | DONE dir | em 16 16 |        |             |                                          -- 
5040:455 | DONE wsp | em 16 16 |        |             |
5040:456 | DONE lbl | em 16 16 | 0062a8 |             | nt_dtrailing                         
5040:457 | DONE dir | em 16 16 | 0062a8 | (2 bytes)   |         .byte 9, { NC }              
5040:457 | DONE dir | em 16 16 |        |             |                 09 01                    --  	 .
5040:458 | DONE dir | em 16 16 | 0062aa | (6 bytes)   |         .word nt_latestxt, xt_dtrailing, 005314 
5040:458 | DONE dir | em 16 16 |        |             |                 98 62 fe 52 14 53        --  . b . R . S
5040:459 | DONE dir | em 16 16 | 0062b0 | (9 bytes)   |         .byte 2d, 74, 72, 61, 69, 6c, 69, 6e, 67 
5040:459 | DONE dir | em 16 16 |        |             |                 2d 74 72 61 69 6c 69 6e  --  - t r a i l i n
5040:459 | DONE dir | em 16 16 |        |             |                 67                       --  g
5040:460 | DONE wsp | em 16 16 |        |             |
5040:461 | DONE lbl | em 16 16 | 0062b9 |             | nt_slashstring                       
5040:462 | DONE dir | em 16 16 | 0062b9 | (2 bytes)   |         .byte 7, { NC }              
5040:462 | DONE dir | em 16 16 |        |             |                 07 01                    --  . .
5040:463 | DONE dir | em 16 16 | 0062bb | (6 bytes)   |         .word nt_dtrailing, xt_slashstring, 0051b1 
5040:463 | DONE dir | em 16 16 |        |             |                 a8 62 a0 51 b1 51        --  . b . Q . Q
5040:464 | DONE dir | em 16 16 | 0062c1 | (7 bytes)   |         .byte 2f, 73, 74, 72, 69, 6e, 67 
5040:464 | DONE dir | em 16 16 |        |             |                 2f 73 74 72 69 6e 67     --  / s t r i n g
5040:465 | DONE wsp | em 16 16 |        |             |
5040:466 | DONE lbl | em 16 16 | 0062c8 |             | nt_zbranch                           
5040:467 | DONE dir | em 16 16 | 0062c8 | (2 bytes)   |         .byte 7, { IM + CO }         
5040:467 | DONE dir | em 16 16 |        |             |                 07 06                    --  . .
5040:468 | DONE dir | em 16 16 | 0062ca | (6 bytes)   |         .word nt_slashstring, xt_zbranch, 00535e 
5040:468 | DONE dir | em 16 16 |        |             |                 b9 62 58 53 5e 53        --  . b X S ^ S
5040:469 | DONE dir | em 16 16 | 0062d0 | (7 bytes)   |         .byte 30, 62, 72, 61, 6e, 63, 68 
5040:469 | DONE dir | em 16 16 |        |             |                 30 62 72 61 6e 63 68     --  0 b r a n c h
5040:470 | DONE wsp | em 16 16 |        |             |
5040:471 | DONE lbl | em 16 16 | 0062d7 |             | nt_branch                            
5040:472 | DONE dir | em 16 16 | 0062d7 | (2 bytes)   |         .byte 6, { IM + CO }         
5040:472 | DONE dir | em 16 16 |        |             |                 06 06                    --  . .
5040:473 | DONE dir | em 16 16 | 0062d9 | (6 bytes)   |         .word nt_zbranch, xt_branch, 00553e 
5040:473 | DONE dir | em 16 16 |        |             |                 c8 62 38 55 3e 55        --  . b 8 U > U
5040:474 | DONE dir | em 16 16 | 0062df | (6 bytes)   |         .byte 62, 72, 61, 6e, 63, 68 
5040:474 | DONE dir | em 16 16 |        |             |                 62 72 61 6e 63 68        --  b r a n c h
5040:475 | DONE wsp | em 16 16 |        |             |
5040:476 | DONE lbl | em 16 16 | 0062e5 |             | nt_again                             
5040:477 | DONE dir | em 16 16 | 0062e5 | (2 bytes)   |         .byte 5, { IM + NC + CO }    
5040:477 | DONE dir | em 16 16 |        |             |                 05 07                    --  . .
5040:478 | DONE dir | em 16 16 | 0062e7 | (6 bytes)   |         .word nt_branch, xt_again, 0054dc 
5040:478 | DONE dir | em 16 16 |        |             |                 d7 62 c7 54 dc 54        --  . b . T . T
5040:479 | DONE dir | em 16 16 | 0062ed | (5 bytes)   |         .byte 61, 67, 61, 69, 6e     
5040:479 | DONE dir | em 16 16 |        |             |                 61 67 61 69 6e           --  a g a i n
5040:480 | DONE wsp | em 16 16 |        |             |
5040:481 | DONE lbl | em 16 16 | 0062f2 |             | nt_begin                             
5040:482 | DONE dir | em 16 16 | 0062f2 | (2 bytes)   |         .byte 5, { IM + NC + CO }    
5040:482 | DONE dir | em 16 16 |        |             |                 05 07                    --  . .
5040:483 | DONE dir | em 16 16 | 0062f4 | (6 bytes)   |         .word nt_again, xt_begin, 005525 
5040:483 | DONE dir | em 16 16 |        |             |                 e5 62 1f 55 25 55        --  . b . U % U
5040:484 | DONE dir | em 16 16 | 0062fa | (5 bytes)   |         .byte 62, 65, 67, 69, 6e     
5040:484 | DONE dir | em 16 16 |        |             |                 62 65 67 69 6e           --  b e g i n
5040:485 | DONE wsp | em 16 16 |        |             |
5040:486 | DONE lbl | em 16 16 | 0062ff |             | nt_compilecomma                      
5040:487 | DONE dir | em 16 16 | 0062ff | (2 bytes)   |         .byte 08, { CO }             
5040:487 | DONE dir | em 16 16 |        |             |                 08 04                    --  . .
5040:488 | DONE dir | em 16 16 | 006301 | (6 bytes)   |         .word nt_begin, xt_compilecomma, 0055f4 
5040:488 | DONE dir | em 16 16 |        |             |                 f2 62 df 55 f4 55        --  . b . U . U
5040:489 | DONE dir | em 16 16 | 006307 | (8 bytes)   |         .byte 63, 6f, 6d, 70, 69, 6c, 65, 2c 
5040:489 | DONE dir | em 16 16 |        |             |                 63 6f 6d 70 69 6c 65 2c  --  c o m p i l e ,
5040:489 | DONE dir | em 16 16 |        |             |                                          -- 
5040:490 | DONE wsp | em 16 16 |        |             |
5040:491 | DONE lbl | em 16 16 | 00630f |             | nt_semicolon                         
5040:492 | DONE dir | em 16 16 | 00630f | (2 bytes)   |         .byte 1, { CO + IM }         
5040:492 | DONE dir | em 16 16 |        |             |                 01 06                    --  . .
5040:493 | DONE dir | em 16 16 | 006311 | (6 bytes)   |         .word nt_compilecomma, xt_semicolon, 005273 
5040:493 | DONE dir | em 16 16 |        |             |                 ff 62 5b 52 73 52        --  . b [ R s R
5040:494 | DONE dir | em 16 16 | 006317 | (1 bytes)   |         .byte 3b                     
5040:494 | DONE dir | em 16 16 |        |             |                 3b                       --  ;
5040:495 | DONE wsp | em 16 16 |        |             |
5040:496 | DONE lbl | em 16 16 | 006318 |             | nt_colon                             
5040:497 | DONE dir | em 16 16 | 006318 | (2 bytes)   |         .byte 1, { NC }              
5040:497 | DONE dir | em 16 16 |        |             |                 01 01                    --  . .
5040:498 | DONE dir | em 16 16 | 00631a | (6 bytes)   |         .word nt_semicolon, xt_colon, 00525a 
5040:498 | DONE dir | em 16 16 |        |             |                 0f 63 39 52 5a 52        --  . c 9 R Z R
5040:499 | DONE dir | em 16 16 | 006320 | (1 bytes)   |         .byte 3a                     
5040:499 | DONE dir | em 16 16 |        |             |                 3a                       --  :
5040:500 | DONE wsp | em 16 16 |        |             |
5040:501 | DONE lbl | em 16 16 | 006321 |             | nt_allot                             
5040:502 | DONE dir | em 16 16 | 006321 | (2 bytes)   |         .byte 5, { NC }              
5040:502 | DONE dir | em 16 16 |        |             |                 05 01                    --  . .
5040:503 | DONE dir | em 16 16 | 006323 | (6 bytes)   |         .word nt_colon, xt_allot, 005509 
5040:503 | DONE dir | em 16 16 |        |             |                 18 63 e1 54 09 55        --  . c . T 	 U
5040:504 | DONE dir | em 16 16 | 006329 | (5 bytes)   |         .byte 61, 6c, 6c, 6f, 74     
5040:504 | DONE dir | em 16 16 |        |             |                 61 6c 6c 6f 74           --  a l l o t
5040:505 | DONE wsp | em 16 16 |        |             |
5040:506 | DONE lbl | em 16 16 | 00632e |             | nt_defer                             
5040:507 | DONE dir | em 16 16 | 00632e | (2 bytes)   |         .byte 5, { NC }              
5040:507 | DONE dir | em 16 16 |        |             |                 05 01                    --  . .
5040:508 | DONE dir | em 16 16 | 006330 | (6 bytes)   |         .word nt_allot, xt_defer, 0056c3 
5040:508 | DONE dir | em 16 16 |        |             |                 21 63 a9 56 c3 56        --  ! c . V . V
5040:509 | DONE dir | em 16 16 | 006336 | (5 bytes)   |         .byte 64, 65, 66, 65, 72     
5040:509 | DONE dir | em 16 16 |        |             |                 64 65 66 65 72           --  d e f e r
5040:510 | DONE wsp | em 16 16 |        |             |
5040:511 | DONE lbl | em 16 16 | 00633b |             | nt_tobody                            
5040:512 | DONE dir | em 16 16 | 00633b | (2 bytes)   |         .byte 5, { NC }              
5040:512 | DONE dir | em 16 16 |        |             |                 05 01                    --  . .
5040:513 | DONE dir | em 16 16 | 00633d | (6 bytes)   |         .word nt_defer, xt_tobody, 005132 
5040:513 | DONE dir | em 16 16 |        |             |                 2e 63 2f 51 32 51        --  . c / Q 2 Q
5040:514 | DONE dir | em 16 16 | 006343 | (5 bytes)   |         .byte 3e, 62, 6f, 64, 79     
5040:514 | DONE dir | em 16 16 |        |             |                 3e 62 6f 64 79           --  > b o d y
5040:515 | DONE wsp | em 16 16 |        |             |
5040:516 | DONE lbl | em 16 16 | 006348 |             | nt_does                              
5040:517 | DONE dir | em 16 16 | 006348 | (2 bytes)   |         .byte 5, { IM + CO }         
5040:517 | DONE dir | em 16 16 |        |             |                 05 06                    --  . .
5040:518 | DONE dir | em 16 16 | 00634a | (6 bytes)   |         .word nt_tobody, xt_does, 005767 
5040:518 | DONE dir | em 16 16 |        |             |                 3b 63 5b 57 67 57        --  ; c [ W g W
5040:519 | DONE dir | em 16 16 | 006350 | (5 bytes)   |         .byte 64, 6f, 65, 73, 3e     
5040:519 | DONE dir | em 16 16 |        |             |                 64 6f 65 73 3e           --  d o e s >
5040:520 | DONE wsp | em 16 16 |        |             |
5040:521 | DONE lbl | em 16 16 | 006355 |             | nt_create                            
5040:522 | DONE dir | em 16 16 | 006355 | (2 bytes)   |         .byte 6, { NC }              
5040:522 | DONE dir | em 16 16 |        |             |                 06 01                    --  . .
5040:523 | DONE dir | em 16 16 | 006357 | (6 bytes)   |         .word nt_does, xt_create, 0056a8 
5040:523 | DONE dir | em 16 16 |        |             |                 48 63 39 56 a8 56        --  H c 9 V . V
5040:524 | DONE dir | em 16 16 | 00635d | (6 bytes)   |         .byte 63, 72, 65, 61, 74, 65 
5040:524 | DONE dir | em 16 16 |        |             |                 63 72 65 61 74 65        --  c r e a t e
5040:525 | DONE wsp | em 16 16 |        |             |
5040:526 | DONE lbl | em 16 16 | 006363 |             | nt_name-string                       
5040:527 | DONE dir | em 16 16 | 006363 | (2 bytes)   |         .byte 0b, { NC }             
5040:527 | DONE dir | em 16 16 |        |             |                 0b 01                    --   .
5040:528 | DONE dir | em 16 16 | 006365 | (6 bytes)   |         .word nt_create, xt_name-string, 0059fd 
5040:528 | DONE dir | em 16 16 |        |             |                 55 63 ed 59 fd 59        --  U c . Y . Y
5040:529 | DONE dir | em 16 16 | 00636b | (11 bytes)  |         .byte 6e, 61, 6d, 65, 3e, 73, 74, 72, 69, 6e, 67 
5040:529 | DONE dir | em 16 16 |        |             |                 6e 61 6d 65 3e 73 74 72  --  n a m e > s t r
5040:529 | DONE dir | em 16 16 |        |             |                 69 6e 67                 --  i n g
5040:530 | DONE wsp | em 16 16 |        |             |
5040:531 | DONE lbl | em 16 16 | 006376 |             | nt_2dup                              
5040:532 | DONE dir | em 16 16 | 006376 | (2 bytes)   |         .byte 4, { NC }              
5040:532 | DONE dir | em 16 16 |        |             |                 04 01                    --  . .
5040:533 | DONE dir | em 16 16 | 006378 | (6 bytes)   |         .word nt_name-string, xt_2dup, 0053b0 
5040:533 | DONE dir | em 16 16 |        |             |                 63 63 a6 53 b0 53        --  c c . S . S
5040:534 | DONE dir | em 16 16 | 00637e | (4 bytes)   |         .byte 32, 64, 75, 70         
5040:534 | DONE dir | em 16 16 |        |             |                 32 64 75 70              --  2 d u p
5040:535 | DONE wsp | em 16 16 |        |             |
5040:536 | DONE lbl | em 16 16 | 006382 |             | nt_abs                               
5040:537 | DONE dir | em 16 16 | 006382 | (2 bytes)   |         .byte 3, { NC }              
5040:537 | DONE dir | em 16 16 |        |             |                 03 01                    --  . .
5040:538 | DONE dir | em 16 16 | 006384 | (6 bytes)   |         .word nt_2dup, xt_abs, 005442 
5040:538 | DONE dir | em 16 16 |        |             |                 76 63 3a 54 42 54        --  v c : T B T
5040:539 | DONE dir | em 16 16 | 00638a | (3 bytes)   |         .byte 61, 62, 73             
5040:539 | DONE dir | em 16 16 |        |             |                 61 62 73                 --  a b s
5040:540 | DONE wsp | em 16 16 |        |             |
5040:541 | DONE lbl | em 16 16 | 00638d |             | nt_state                             
5040:542 | DONE dir | em 16 16 | 00638d | (2 bytes)   |         .byte 5, { NC }              
5040:542 | DONE dir | em 16 16 |        |             |                 05 01                    --  . .
5040:543 | DONE dir | em 16 16 | 00638f | (6 bytes)   |         .word nt_abs, xt_state, 005d15 
5040:543 | DONE dir | em 16 16 |        |             |                 82 63 0e 5d 15 5d        --  . c . ] . ]
5040:544 | DONE dir | em 16 16 | 006395 | (5 bytes)   |         .byte 73, 74, 61, 74, 65     
5040:544 | DONE dir | em 16 16 |        |             |                 73 74 61 74 65           --  s t a t e
5040:545 | DONE wsp | em 16 16 |        |             |
5040:546 | DONE lbl | em 16 16 | 00639a |             | nt_to-in                             
5040:547 | DONE dir | em 16 16 | 00639a | (2 bytes)   |         .byte 3, { NC }              
5040:547 | DONE dir | em 16 16 |        |             |                 03 01                    --  . .
5040:548 | DONE dir | em 16 16 | 00639c | (6 bytes)   |         .word nt_state, xt_to-in, 00513a 
5040:548 | DONE dir | em 16 16 |        |             |                 8d 63 33 51 3a 51        --  . c 3 Q : Q
5040:549 | DONE dir | em 16 16 | 0063a2 | (3 bytes)   |         .byte 3e, 69, 6e             
5040:549 | DONE dir | em 16 16 |        |             |                 3e 69 6e                 --  > i n
5040:550 | DONE wsp | em 16 16 |        |             |
5040:551 | DONE lbl | em 16 16 | 0063a5 |             | nt_source                            
5040:552 | DONE dir | em 16 16 | 0063a5 | (2 bytes)   |         .byte 6, { NC }              
5040:552 | DONE dir | em 16 16 |        |             |                 06 01                    --  . .
5040:553 | DONE dir | em 16 16 | 0063a7 | (6 bytes)   |         .word nt_to-in, xt_source, 005ceb 
5040:553 | DONE dir | em 16 16 |        |             |                 9a 63 df 5c eb 5c        --  . c . \ . \
5040:554 | DONE dir | em 16 16 | 0063ad | (6 bytes)   |         .byte 73, 6f, 75, 72, 63, 65 
5040:554 | DONE dir | em 16 16 |        |             |                 73 6f 75 72 63 65        --  s o u r c e
5040:555 | DONE wsp | em 16 16 |        |             |
5040:556 | DONE lbl | em 16 16 | 0063b3 |             | nt_depth                             
5040:557 | DONE dir | em 16 16 | 0063b3 | (2 bytes)   |         .byte 5, { NC }              
5040:557 | DONE dir | em 16 16 |        |             |                 05 01                    --  . .
5040:558 | DONE dir | em 16 16 | 0063b5 | (6 bytes)   |         .word nt_source, xt_depth, 005746 
5040:558 | DONE dir | em 16 16 |        |             |                 a5 63 38 57 46 57        --  . c 8 W F W
5040:559 | DONE dir | em 16 16 | 0063bb | (5 bytes)   |         .byte 64, 65, 70, 74, 68     
5040:559 | DONE dir | em 16 16 |        |             |                 64 65 70 74 68           --  d e p t h
5040:560 | DONE wsp | em 16 16 |        |             |
5040:561 | DONE lbl | em 16 16 | 0063c0 |             | nt_to                                
5040:562 | DONE dir | em 16 16 | 0063c0 | (2 bytes)   |         .byte 2, { NC }              
5040:562 | DONE dir | em 16 16 |        |             |                 02 01                    --  . .
5040:563 | DONE dir | em 16 16 | 0063c2 | (6 bytes)   |         .word nt_depth, xt_to, 005d25 
5040:563 | DONE dir | em 16 16 |        |             |                 b3 63 1c 5d 25 5d        --  . c . ] % ]
5040:564 | DONE dir | em 16 16 | 0063c8 | (2 bytes)   |         .byte 74, 6f                 
5040:564 | DONE dir | em 16 16 |        |             |                 74 6f                    --  t o
5040:565 | DONE wsp | em 16 16 |        |             |
5040:566 | DONE lbl | em 16 16 | 0063ca |             | nt_value                             
5040:567 | DONE dir | em 16 16 | 0063ca | (2 bytes)   |         .byte 5, { NC }              uses routines of CONSTANT
5040:567 | DONE dir | em 16 16 |        |             |                 05 01                    --  . .
5040:568 | DONE dir | em 16 16 | 0063cc | (6 bytes)   |         .word nt_to, xt_constant, 005623 
5040:568 | DONE dir | em 16 16 |        |             |                 c0 63 f5 55 23 56        --  . c . U # V
5040:569 | DONE dir | em 16 16 | 0063d2 | (5 bytes)   |         .byte 76, 61, 6c, 75, 65     
5040:569 | DONE dir | em 16 16 |        |             |                 76 61 6c 75 65           --  v a l u e
5040:570 | DONE wsp | em 16 16 |        |             |
5040:571 | DONE lbl | em 16 16 | 0063d7 |             | nt_constant                          
5040:572 | DONE dir | em 16 16 | 0063d7 | (2 bytes)   |         .byte 8, { NC }              
5040:572 | DONE dir | em 16 16 |        |             |                 08 01                    --  . .
5040:573 | DONE dir | em 16 16 | 0063d9 | (6 bytes)   |         .word nt_value, xt_constant, 005623 
5040:573 | DONE dir | em 16 16 |        |             |                 ca 63 f5 55 23 56        --  . c . U # V
5040:574 | DONE dir | em 16 16 | 0063df | (8 bytes)   |         .byte 63, 6f, 6e, 73, 74, 61, 6e, 74 
5040:574 | DONE dir | em 16 16 |        |             |                 63 6f 6e 73 74 61 6e 74  --  c o n s t a n t
5040:574 | DONE dir | em 16 16 |        |             |                                          -- 
5040:575 | DONE wsp | em 16 16 |        |             |
5040:576 | DONE lbl | em 16 16 | 0063e7 |             | nt_variable                          
5040:577 | DONE dir | em 16 16 | 0063e7 | (2 bytes)   |         .byte 8, { NC }              
5040:577 | DONE dir | em 16 16 |        |             |                 08 01                    --  . .
5040:578 | DONE dir | em 16 16 | 0063e9 | (6 bytes)   |         .word nt_constant, xt_variable, 005e3e 
5040:578 | DONE dir | em 16 16 |        |             |                 d7 63 2f 5e 3e 5e        --  . c / ^ > ^
5040:579 | DONE dir | em 16 16 | 0063ef | (8 bytes)   |         .byte 76, 61, 72, 69, 61, 62, 6c, 65 
5040:579 | DONE dir | em 16 16 |        |             |                 76 61 72 69 61 62 6c 65  --  v a r i a b l e
5040:579 | DONE dir | em 16 16 |        |             |                                          -- 
5040:580 | DONE wsp | em 16 16 |        |             |
5040:581 | DONE lbl | em 16 16 | 0063f7 |             | nt_tick                              
5040:582 | DONE dir | em 16 16 | 0063f7 | (2 bytes)   |         .byte 1, { NC }              
5040:582 | DONE dir | em 16 16 |        |             |                 01 01                    --  . .
5040:583 | DONE dir | em 16 16 | 0063f9 | (6 bytes)   |         .word nt_variable, xt_tick, 00541c 
5040:583 | DONE dir | em 16 16 |        |             |                 e7 63 01 54 1c 54        --  . c . T . T
5040:584 | DONE dir | em 16 16 | 0063ff | (1 bytes)   |         .byte 27                     hex for "'"
5040:584 | DONE dir | em 16 16 |        |             |                 27                       --  '
5040:585 | DONE wsp | em 16 16 |        |             |
5040:586 | DONE lbl | em 16 16 | 006400 |             | nt_move                              
5040:587 | DONE dir | em 16 16 | 006400 | (2 bytes)   |         .byte 4, { NC }              
5040:587 | DONE dir | em 16 16 |        |             |                 04 01                    --  . .
5040:588 | DONE dir | em 16 16 | 006402 | (6 bytes)   |         .word nt_tick, xt_move, 0059e4 
5040:588 | DONE dir | em 16 16 |        |             |                 f7 63 d3 59 e4 59        --  . c . Y . Y
5040:589 | DONE dir | em 16 16 | 006408 | (4 bytes)   |         .byte 6d, 6f, 76, 65         
5040:589 | DONE dir | em 16 16 |        |             |                 6d 6f 76 65              --  m o v e
5040:590 | DONE wsp | em 16 16 |        |             |
5040:591 | DONE lbl | em 16 16 | 00640c |             | nt_min                               
5040:592 | DONE dir | em 16 16 | 00640c | (2 bytes)   |         .byte 3, { NC }              
5040:592 | DONE dir | em 16 16 |        |             |                 03 01                    --  . .
5040:593 | DONE dir | em 16 16 | 00640e | (6 bytes)   |         .word nt_move, xt_min, 0059d2 
5040:593 | DONE dir | em 16 16 |        |             |                 00 64 c0 59 d2 59        --  . d . Y . Y
5040:594 | DONE dir | em 16 16 | 006414 | (3 bytes)   |         .byte 6d, 69, 6e             
5040:594 | DONE dir | em 16 16 |        |             |                 6d 69 6e                 --  m i n
5040:595 | DONE wsp | em 16 16 |        |             |
5040:596 | DONE lbl | em 16 16 | 006417 |             | nt_max                               
5040:597 | DONE dir | em 16 16 | 006417 | (2 bytes)   |         .byte 3, { NC }              
5040:597 | DONE dir | em 16 16 |        |             |                 03 01                    --  . .
5040:598 | DONE dir | em 16 16 | 006419 | (6 bytes)   |         .word nt_min, xt_max, 0059bf 
5040:598 | DONE dir | em 16 16 |        |             |                 0c 64 ad 59 bf 59        --   d . Y . Y
5040:599 | DONE dir | em 16 16 | 00641f | (3 bytes)   |         .byte 6d, 61, 78             
5040:599 | DONE dir | em 16 16 |        |             |                 6d 61 78                 --  m a x
5040:600 | DONE wsp | em 16 16 |        |             |
5040:601 | DONE lbl | em 16 16 | 006422 |             | nt_negate                            
5040:602 | DONE dir | em 16 16 | 006422 | (2 bytes)   |         .byte 6, { NC }              
5040:602 | DONE dir | em 16 16 |        |             |                 06 01                    --  . .
5040:603 | DONE dir | em 16 16 | 006424 | (6 bytes)   |         .word nt_max, xt_negate, 005a0d 
5040:603 | DONE dir | em 16 16 |        |             |                 17 64 07 5a 0d 5a        --  . d . Z  Z
5040:604 | DONE dir | em 16 16 | 00642a | (6 bytes)   |         .byte 6e, 65, 67, 61, 74, 65 
5040:604 | DONE dir | em 16 16 |        |             |                 6e 65 67 61 74 65        --  n e g a t e
5040:605 | DONE wsp | em 16 16 |        |             |
5040:606 | DONE lbl | em 16 16 | 006430 |             | nt_invert                            
5040:607 | DONE dir | em 16 16 | 006430 | (2 bytes)   |         .byte 6, { NC }              
5040:607 | DONE dir | em 16 16 |        |             |                 06 01                    --  . .
5040:608 | DONE dir | em 16 16 | 006432 | (6 bytes)   |         .word nt_negate, xt_invert, 0058fc 
5040:608 | DONE dir | em 16 16 |        |             |                 22 64 f7 58 fc 58        --  " d . X . X
5040:609 | DONE dir | em 16 16 | 006438 | (6 bytes)   |         .byte 69, 6e, 76, 65, 72, 74 
5040:609 | DONE dir | em 16 16 |        |             |                 69 6e 76 65 72 74        --  i n v e r t
5040:610 | DONE wsp | em 16 16 |        |             |
5040:611 | DONE lbl | em 16 16 | 00643e |             | nt_char                              
5040:612 | DONE dir | em 16 16 | 00643e | (2 bytes)   |         .byte 4, { NC }              
5040:612 | DONE dir | em 16 16 |        |             |                 04 01                    --  . .
5040:613 | DONE dir | em 16 16 | 006440 | (6 bytes)   |         .word nt_invert, xt_char, 005597 
5040:613 | DONE dir | em 16 16 |        |             |                 30 64 80 55 97 55        --  0 d . U . U
5040:614 | DONE dir | em 16 16 | 006446 | (4 bytes)   |         .byte 63, 68, 61, 72         
5040:614 | DONE dir | em 16 16 |        |             |                 63 68 61 72              --  c h a r
5040:615 | DONE wsp | em 16 16 |        |             |
5040:616 | DONE lbl | em 16 16 | 00644a |             | nt_rshift                            
5040:617 | DONE dir | em 16 16 | 00644a | (2 bytes)   |         .byte 6, { NC }              
5040:617 | DONE dir | em 16 16 |        |             |                 06 01                    --  . .
5040:618 | DONE dir | em 16 16 | 00644c | (6 bytes)   |         .word nt_char, xt_rshift, 005bcf 
5040:618 | DONE dir | em 16 16 |        |             |                 3e 64 bc 5b cf 5b        --  > d . [ . [
5040:619 | DONE dir | em 16 16 | 006452 | (6 bytes)   |         .byte 72, 73, 68, 69, 66, 74 
5040:619 | DONE dir | em 16 16 |        |             |                 72 73 68 69 66 74        --  r s h i f t
5040:620 | DONE wsp | em 16 16 |        |             |
5040:621 | DONE lbl | em 16 16 | 006458 |             | nt_xor                               
5040:622 | DONE dir | em 16 16 | 006458 | (2 bytes)   |         .byte 3, { NC }              
5040:622 | DONE dir | em 16 16 |        |             |                 03 01                    --  . .
5040:623 | DONE dir | em 16 16 | 00645a | (6 bytes)   |         .word nt_rshift, xt_xor, 005e9b 
5040:623 | DONE dir | em 16 16 |        |             |                 4a 64 95 5e 9b 5e        --  J d . ^ . ^
5040:624 | DONE dir | em 16 16 | 006460 | (3 bytes)   |         .byte 78, 6f, 72             
5040:624 | DONE dir | em 16 16 |        |             |                 78 6f 72                 --  x o r
5040:625 | DONE wsp | em 16 16 |        |             |
5040:626 | DONE lbl | em 16 16 | 006463 |             | nt_or                                
5040:627 | DONE dir | em 16 16 | 006463 | (2 bytes)   |         .byte 2, { NC }              
5040:627 | DONE dir | em 16 16 |        |             |                 02 01                    --  . .
5040:628 | DONE dir | em 16 16 | 006465 | (6 bytes)   |         .word nt_xor, xt_or, 005a9b  
5040:628 | DONE dir | em 16 16 |        |             |                 58 64 95 5a 9b 5a        --  X d . Z . Z
5040:629 | DONE dir | em 16 16 | 00646b | (2 bytes)   |         .byte 6f, 72                 
5040:629 | DONE dir | em 16 16 |        |             |                 6f 72                    --  o r
5040:630 | DONE wsp | em 16 16 |        |             |
5040:631 | DONE lbl | em 16 16 | 00646d |             | nt_and                               
5040:632 | DONE dir | em 16 16 | 00646d | (2 bytes)   |         .byte 3, { NC }              
5040:632 | DONE dir | em 16 16 |        |             |                 03 01                    --  . .
5040:633 | DONE dir | em 16 16 | 00646f | (6 bytes)   |         .word nt_or, xt_and, 005510  
5040:633 | DONE dir | em 16 16 |        |             |                 63 64 0a 55 10 55        --  c d 
 U . U
5040:634 | DONE dir | em 16 16 | 006475 | (3 bytes)   |         .byte 61, 6e, 64             
5040:634 | DONE dir | em 16 16 |        |             |                 61 6e 64                 --  a n d
5040:635 | DONE wsp | em 16 16 |        |             |
5040:636 | DONE lbl | em 16 16 | 006478 |             | nt_lshift                            
5040:637 | DONE dir | em 16 16 | 006478 | (2 bytes)   |         .byte 6, { NC }              
5040:637 | DONE dir | em 16 16 |        |             |                 06 01                    --  . .
5040:638 | DONE dir | em 16 16 | 00647a | (6 bytes)   |         .word nt_and, xt_lshift, 005962 
5040:638 | DONE dir | em 16 16 |        |             |                 6d 64 4f 59 62 59        --  m d O Y b Y
5040:639 | DONE dir | em 16 16 | 006480 | (6 bytes)   |         .byte 6c, 73, 68, 69, 66, 74 
5040:639 | DONE dir | em 16 16 |        |             |                 6c 73 68 69 66 74        --  l s h i f t
5040:640 | DONE wsp | em 16 16 |        |             |
5040:641 | DONE lbl | em 16 16 | 006486 |             | nt_plusstore                         
5040:642 | DONE dir | em 16 16 | 006486 | (2 bytes)   |         .byte 2, { NC }              
5040:642 | DONE dir | em 16 16 |        |             |                 02 01                    --  . .
5040:643 | DONE dir | em 16 16 | 006488 | (6 bytes)   |         .word nt_lshift, xt_plusstore, 005b46 
5040:643 | DONE dir | em 16 16 |        |             |                 78 64 37 5b 46 5b        --  x d 7 [ F [
5040:644 | DONE dir | em 16 16 | 00648e | (2 bytes)   |         .byte 2b, 21                 
5040:644 | DONE dir | em 16 16 |        |             |                 2b 21                    --  + !
5040:645 | DONE wsp | em 16 16 |        |             |
5040:646 | DONE lbl | em 16 16 | 006490 |             | nt_c-comma                           
5040:647 | DONE dir | em 16 16 | 006490 | (2 bytes)   |         .byte 2, { NC }              
5040:647 | DONE dir | em 16 16 |        |             |                 02 01                    --  . .
5040:648 | DONE dir | em 16 16 | 006492 | (6 bytes)   |         .word nt_plusstore, xt_c-comma, 005560 
5040:648 | DONE dir | em 16 16 |        |             |                 86 64 53 55 60 55        --  . d S U ` U
5040:649 | DONE dir | em 16 16 | 006498 | (2 bytes)   |         .byte 63, 2c                 
5040:649 | DONE dir | em 16 16 |        |             |                 63 2c                    --  c ,
5040:650 | DONE wsp | em 16 16 |        |             |
5040:651 | DONE lbl | em 16 16 | 00649a |             | nt_c-fetch                           
5040:652 | DONE dir | em 16 16 | 00649a | (2 bytes)   |         .byte 2, { NC }              
5040:652 | DONE dir | em 16 16 |        |             |                 02 01                    --  . .
5040:653 | DONE dir | em 16 16 | 00649c | (6 bytes)   |         .word nt_c-comma, xt_c-fetch, 00556c 
5040:653 | DONE dir | em 16 16 |        |             |                 90 64 61 55 6c 55        --  . d a U l U
5040:654 | DONE dir | em 16 16 | 0064a2 | (2 bytes)   |         .byte 63, 40                 
5040:654 | DONE dir | em 16 16 |        |             |                 63 40                    --  c @
5040:655 | DONE wsp | em 16 16 |        |             |
5040:656 | DONE lbl | em 16 16 | 0064a4 |             | nt_c-store                           
5040:657 | DONE dir | em 16 16 | 0064a4 | (2 bytes)   |         .byte 2, { NC }              
5040:657 | DONE dir | em 16 16 |        |             |                 02 01                    --  . .
5040:658 | DONE dir | em 16 16 | 0064a6 | (6 bytes)   |         .word nt_c-fetch, xt_c-store, 00557c 
5040:658 | DONE dir | em 16 16 |        |             |                 9a 64 6d 55 7c 55        --  . d m U | U
5040:659 | DONE dir | em 16 16 | 0064ac | (2 bytes)   |         .byte 63, 21                 
5040:659 | DONE dir | em 16 16 |        |             |                 63 21                    --  c !
5040:660 | DONE wsp | em 16 16 |        |             |
5040:661 | DONE lbl | em 16 16 | 0064ae |             | nt_two-star                          
5040:662 | DONE dir | em 16 16 | 0064ae | (2 bytes)   |         .byte 2, { NC }              
5040:662 | DONE dir | em 16 16 |        |             |                 02 01                    --  . .
5040:663 | DONE dir | em 16 16 | 0064b0 | (6 bytes)   |         .word nt_c-store, xt_two-star, 00538d 
5040:663 | DONE dir | em 16 16 |        |             |                 a4 64 8a 53 8d 53        --  . d . S . S
5040:664 | DONE dir | em 16 16 | 0064b6 | (2 bytes)   |         .byte 32, 2a                 
5040:664 | DONE dir | em 16 16 |        |             |                 32 2a                    --  2 *
5040:665 | DONE wsp | em 16 16 |        |             |
5040:666 | DONE lbl | em 16 16 | 0064b8 |             | nt_minus                             
5040:667 | DONE dir | em 16 16 | 0064b8 | (2 bytes)   |         .byte 1, { NC }              
5040:667 | DONE dir | em 16 16 |        |             |                 01 01                    --  . .
5040:668 | DONE dir | em 16 16 | 0064ba | (6 bytes)   |         .word nt_two-star, xt_minus, 0052f4 
5040:668 | DONE dir | em 16 16 |        |             |                 ae 64 ea 52 f4 52        --  . d . R . R
5040:669 | DONE dir | em 16 16 | 0064c0 | (1 bytes)   |         .byte 2d                     
5040:669 | DONE dir | em 16 16 |        |             |                 2d                       --  -
5040:670 | DONE wsp | em 16 16 |        |             |
5040:671 | DONE lbl | em 16 16 | 0064c1 |             | nt_plus                              
5040:672 | DONE dir | em 16 16 | 0064c1 | (2 bytes)   |         .byte 1, { NC }              
5040:672 | DONE dir | em 16 16 |        |             |                 01 01                    --  . .
5040:673 | DONE dir | em 16 16 | 0064c3 | (6 bytes)   |         .word nt_minus, xt_plus, 0052e9 
5040:673 | DONE dir | em 16 16 |        |             |                 b8 64 e2 52 e9 52        --  . d . R . R
5040:674 | DONE dir | em 16 16 | 0064c9 | (1 bytes)   |         .byte 2b                     
5040:674 | DONE dir | em 16 16 |        |             |                 2b                       --  +
5040:675 | DONE wsp | em 16 16 |        |             |
5040:676 | DONE lbl | em 16 16 | 0064ca |             | nt_one-minus                         
5040:677 | DONE dir | em 16 16 | 0064ca | (2 bytes)   |         .byte 2, { NC }              
5040:677 | DONE dir | em 16 16 |        |             |                 02 01                    --  . .
5040:678 | DONE dir | em 16 16 | 0064cc | (6 bytes)   |         .word nt_plus, xt_one-minus, 00537f 
5040:678 | DONE dir | em 16 16 |        |             |                 c1 64 7e 53 7f 53        --  . d ~ S . S
5040:679 | DONE dir | em 16 16 | 0064d2 | (2 bytes)   |         .byte 31, 2d                 
5040:679 | DONE dir | em 16 16 |        |             |                 31 2d                    --  1 -
5040:680 | DONE wsp | em 16 16 |        |             |
5040:681 | DONE lbl | em 16 16 | 0064d4 |             | nt_one-plus                          
5040:682 | DONE dir | em 16 16 | 0064d4 | (2 bytes)   |         .byte 2, { NC }              
5040:682 | DONE dir | em 16 16 |        |             |                 02 01                    --  . .
5040:683 | DONE dir | em 16 16 | 0064d6 | (6 bytes)   |         .word nt_one-minus, xt_one-plus, 005381 
5040:683 | DONE dir | em 16 16 |        |             |                 ca 64 80 53 81 53        --  . d . S . S
5040:684 | DONE dir | em 16 16 | 0064dc | (2 bytes)   |         .byte 31, 2b                 
5040:684 | DONE dir | em 16 16 |        |             |                 31 2b                    --  1 +
5040:685 | DONE wsp | em 16 16 |        |             |
5040:686 | DONE lbl | em 16 16 | 0064de |             | nt_zero-notequal                     
5040:687 | DONE dir | em 16 16 | 0064de | (2 bytes)   |         .byte 3, { NC }              
5040:687 | DONE dir | em 16 16 |        |             |                 03 01                    --  . .
5040:688 | DONE dir | em 16 16 | 0064e0 | (6 bytes)   |         .word nt_one-plus, xt_zero-notequal, 00534c 
5040:688 | DONE dir | em 16 16 |        |             |                 d4 64 41 53 4c 53        --  . d A S L S
5040:689 | DONE dir | em 16 16 | 0064e6 | (3 bytes)   |         .byte 30, 3c, 3e             
5040:689 | DONE dir | em 16 16 |        |             |                 30 3c 3e                 --  0 < >
5040:690 | DONE wsp | em 16 16 |        |             |
5040:691 | DONE lbl | em 16 16 | 0064e9 |             | nt_zero-more                         
5040:692 | DONE dir | em 16 16 | 0064e9 | (2 bytes)   |         .byte 2, { NC }              
5040:692 | DONE dir | em 16 16 |        |             |                 02 01                    --  . .
5040:693 | DONE dir | em 16 16 | 0064eb | (6 bytes)   |         .word nt_zero-notequal, xt_zero-more, 005357 
5040:693 | DONE dir | em 16 16 |        |             |                 de 64 4d 53 57 53        --  . d M S W S
5040:694 | DONE dir | em 16 16 | 0064f1 | (2 bytes)   |         .byte 30, 3e                 
5040:694 | DONE dir | em 16 16 |        |             |                 30 3e                    --  0 >
5040:695 | DONE wsp | em 16 16 |        |             |
5040:696 | DONE lbl | em 16 16 | 0064f3 |             | nt_zero-less                         
5040:697 | DONE dir | em 16 16 | 0064f3 | (2 bytes)   |         .byte 2, { NC }              
5040:697 | DONE dir | em 16 16 |        |             |                 02 01                    --  . .
5040:698 | DONE dir | em 16 16 | 0064f5 | (6 bytes)   |         .word nt_zero-more, xt_zero-less, 005340 
5040:698 | DONE dir | em 16 16 |        |             |                 e9 64 35 53 40 53        --  . d 5 S @ S
5040:699 | DONE dir | em 16 16 | 0064fb | (2 bytes)   |         .byte 30, 3c                 
5040:699 | DONE dir | em 16 16 |        |             |                 30 3c                    --  0 <
5040:700 | DONE wsp | em 16 16 |        |             |
5040:701 | DONE lbl | em 16 16 | 0064fd |             | nt_greater                           
5040:702 | DONE dir | em 16 16 | 0064fd | (2 bytes)   |         .byte 1, { NC }              
5040:702 | DONE dir | em 16 16 |        |             |                 01 01                    --  . .
5040:703 | DONE dir | em 16 16 | 0064ff | (6 bytes)   |         .word nt_zero-less, xt_greater, 00512e 
5040:703 | DONE dir | em 16 16 |        |             |                 f3 64 1b 51 2e 51        --  . d . Q . Q
5040:704 | DONE dir | em 16 16 | 006505 | (1 bytes)   |         .byte 3e                     
5040:704 | DONE dir | em 16 16 |        |             |                 3e                       --  >
5040:705 | DONE wsp | em 16 16 |        |             |
5040:706 | DONE lbl | em 16 16 | 006506 |             | nt_less                              
5040:707 | DONE dir | em 16 16 | 006506 | (2 bytes)   |         .byte 1, { NC }              
5040:707 | DONE dir | em 16 16 |        |             |                 01 01                    --  . .
5040:708 | DONE dir | em 16 16 | 006508 | (6 bytes)   |         .word nt_greater, xt_less, 005104 
5040:708 | DONE dir | em 16 16 |        |             |                 fd 64 f1 50 04 51        --  . d . P . Q
5040:709 | DONE dir | em 16 16 | 00650e | (1 bytes)   |         .byte 3c                     
5040:709 | DONE dir | em 16 16 |        |             |                 3c                       --  <
5040:710 | DONE wsp | em 16 16 |        |             |
5040:711 | DONE lbl | em 16 16 | 00650f |             | nt_zero-equal                        
5040:712 | DONE dir | em 16 16 | 00650f | (2 bytes)   |         .byte 2, { NC }              
5040:712 | DONE dir | em 16 16 |        |             |                 02 01                    --  . .
5040:713 | DONE dir | em 16 16 | 006511 | (6 bytes)   |         .word nt_less, xt_zero-equal, 005334 
5040:713 | DONE dir | em 16 16 |        |             |                 06 65 29 53 34 53        --  . e ) S 4 S
5040:714 | DONE dir | em 16 16 | 006517 | (2 bytes)   |         .byte 30, 3d                 
5040:714 | DONE dir | em 16 16 |        |             |                 30 3d                    --  0 =
5040:715 | DONE wsp | em 16 16 |        |             |
5040:716 | DONE lbl | em 16 16 | 006519 |             | nt_not-equal                         
5040:717 | DONE dir | em 16 16 | 006519 | (2 bytes)   |         .byte 2, { NC }              
5040:717 | DONE dir | em 16 16 |        |             |                 02 01                    --  . .
5040:718 | DONE dir | em 16 16 | 00651b | (6 bytes)   |         .word nt_zero-equal, xt_not-equal, 005110 
5040:718 | DONE dir | em 16 16 |        |             |                 0f 65 05 51 10 51        --  . e . Q . Q
5040:719 | DONE dir | em 16 16 | 006521 | (2 bytes)   |         .byte 3c, 3e                 
5040:719 | DONE dir | em 16 16 |        |             |                 3c 3e                    --  < >
5040:720 | DONE wsp | em 16 16 |        |             |
5040:721 | DONE lbl | em 16 16 | 006523 |             | nt_equal                             
5040:722 | DONE dir | em 16 16 | 006523 | (2 bytes)   |         .byte 1, { NC }              
5040:722 | DONE dir | em 16 16 |        |             |                 01 01                    --  . .
5040:723 | DONE dir | em 16 16 | 006525 | (6 bytes)   |         .word nt_not-equal, xt_equal, 005320 
5040:723 | DONE dir | em 16 16 |        |             |                 19 65 15 53 20 53        --  . e . S   S
5040:724 | DONE dir | em 16 16 | 00652b | (1 bytes)   |         .byte 3d                     
5040:724 | DONE dir | em 16 16 |        |             |                 3d                       --  =
5040:725 | DONE wsp | em 16 16 |        |             |
5040:726 | DONE lbl | em 16 16 | 00652c |             | nt_false                             
5040:727 | DONE dir | em 16 16 | 00652c | (2 bytes)   |         .byte 5, { NC }              
5040:727 | DONE dir | em 16 16 |        |             |                 05 01                    --  . .
5040:728 | DONE dir | em 16 16 | 00652e | (6 bytes)   |         .word nt_equal, xt_zero, 005328 
5040:728 | DONE dir | em 16 16 |        |             |                 23 65 21 53 28 53        --  # e ! S ( S
5040:729 | DONE dir | em 16 16 | 006534 | (5 bytes)   |         .byte 66, 61, 6c, 73, 65     
5040:729 | DONE dir | em 16 16 |        |             |                 66 61 6c 73 65           --  f a l s e
5040:730 | DONE wsp | em 16 16 |        |             |
5040:731 | DONE lbl | em 16 16 | 006539 |             | nt_true                              
5040:732 | DONE dir | em 16 16 | 006539 | (2 bytes)   |         .byte 4, { NC }              
5040:732 | DONE dir | em 16 16 |        |             |                 04 01                    --  . .
5040:733 | DONE dir | em 16 16 | 00653b | (6 bytes)   |         .word nt_false, xt_true, 005d2d 
5040:733 | DONE dir | em 16 16 |        |             |                 2c 65 26 5d 2d 5d        --  , e & ] - ]
5040:734 | DONE dir | em 16 16 | 006541 | (4 bytes)   |         .byte 74, 72, 75, 65         
5040:734 | DONE dir | em 16 16 |        |             |                 74 72 75 65              --  t r u e
5040:735 | DONE wsp | em 16 16 |        |             |
5040:736 | DONE lbl | em 16 16 | 006545 |             | nt_tonumber                          
5040:737 | DONE dir | em 16 16 | 006545 | (2 bytes)   |         .byte 7, { NC }              see if actually NC
5040:737 | DONE dir | em 16 16 |        |             |                 07 01                    --  . .
5040:738 | DONE dir | em 16 16 | 006547 | (6 bytes)   |         .word nt_true, xt_tonumber, 005197 
5040:738 | DONE dir | em 16 16 |        |             |                 39 65 3b 51 97 51        --  9 e ; Q . Q
5040:739 | DONE dir | em 16 16 | 00654d | (7 bytes)   |         .byte 3e, 6e, 75, 6d, 62, 65, 72 
5040:739 | DONE dir | em 16 16 |        |             |                 3e 6e 75 6d 62 65 72     --  > n u m b e r
5040:740 | DONE wsp | em 16 16 |        |             |
5040:741 | DONE lbl | em 16 16 | 006554 |             | nt_number                            
5040:742 | DONE dir | em 16 16 | 006554 | (2 bytes)   |         .byte 6, { NC }              see if actually NC
5040:742 | DONE dir | em 16 16 |        |             |                 06 01                    --  . .
5040:743 | DONE dir | em 16 16 | 006556 | (6 bytes)   |         .word nt_tonumber, xt_number, 005a94 
5040:743 | DONE dir | em 16 16 |        |             |                 45 65 11 5a 94 5a        --  E e . Z . Z
5040:744 | DONE dir | em 16 16 | 00655c | (6 bytes)   |         .byte 6e, 75, 6d, 62, 65, 72 
5040:744 | DONE dir | em 16 16 |        |             |                 6e 75 6d 62 65 72        --  n u m b e r
5040:745 | DONE wsp | em 16 16 |        |             |
5040:746 | DONE lbl | em 16 16 | 006562 |             | nt_two                               
5040:747 | DONE dir | em 16 16 | 006562 | (2 bytes)   |         .byte 1, { NC }              
5040:747 | DONE dir | em 16 16 |        |             |                 01 01                    --  . .
5040:748 | DONE dir | em 16 16 | 006564 | (6 bytes)   |         .word nt_number, xt_two, 005389 
5040:748 | DONE dir | em 16 16 |        |             |                 54 65 82 53 89 53        --  T e . S . S
5040:749 | DONE dir | em 16 16 | 00656a | (1 bytes)   |         .byte 32                     
5040:749 | DONE dir | em 16 16 |        |             |                 32                       --  2
5040:750 | DONE wsp | em 16 16 |        |             |
5040:751 | DONE lbl | em 16 16 | 00656b |             | nt_one                               
5040:752 | DONE dir | em 16 16 | 00656b | (2 bytes)   |         .byte 1, { NC }              
5040:752 | DONE dir | em 16 16 |        |             |                 01 01                    --  . .
5040:753 | DONE dir | em 16 16 | 00656d | (6 bytes)   |         .word nt_two, xt_one, 00537d 
5040:753 | DONE dir | em 16 16 |        |             |                 62 65 76 53 7d 53        --  b e v S } S
5040:754 | DONE dir | em 16 16 | 006573 | (1 bytes)   |         .byte 31                     
5040:754 | DONE dir | em 16 16 |        |             |                 31                       --  1
5040:755 | DONE wsp | em 16 16 |        |             |
5040:756 | DONE lbl | em 16 16 | 006574 |             | nt_zero                              
5040:757 | DONE dir | em 16 16 | 006574 | (2 bytes)   |         .byte 1, { NC }              
5040:757 | DONE dir | em 16 16 |        |             |                 01 01                    --  . .
5040:758 | DONE dir | em 16 16 | 006576 | (6 bytes)   |         .word nt_one, xt_zero, 005328 
5040:758 | DONE dir | em 16 16 |        |             |                 6b 65 21 53 28 53        --  k e ! S ( S
5040:759 | DONE dir | em 16 16 | 00657c | (1 bytes)   |         .byte 30                     
5040:759 | DONE dir | em 16 16 |        |             |                 30                       --  0
5040:760 | DONE wsp | em 16 16 |        |             |
5040:761 | DONE lbl | em 16 16 | 00657d |             | nt_find-name                         
5040:762 | DONE dir | em 16 16 | 00657d | (2 bytes)   |         .byte 9, 0                   
5040:762 | DONE dir | em 16 16 |        |             |                 09 00                    --  	 .
5040:763 | DONE dir | em 16 16 | 00657f | (6 bytes)   |         .word nt_zero, xt_find-name, 00586d 
5040:763 | DONE dir | em 16 16 |        |             |                 74 65 17 58 6d 58        --  t e . X m X
5040:764 | DONE dir | em 16 16 | 006585 | (9 bytes)   |         .byte 66, 69, 6e, 64, 2d, 6e, 61, 6d, 65 
5040:764 | DONE dir | em 16 16 |        |             |                 66 69 6e 64 2d 6e 61 6d  --  f i n d - n a m
5040:764 | DONE dir | em 16 16 |        |             |                 65                       --  e
5040:765 | DONE wsp | em 16 16 |        |             |
5040:766 | DONE lbl | em 16 16 | 00658e |             | nt_refill                            
5040:767 | DONE dir | em 16 16 | 00658e | (2 bytes)   |         .byte 6, 0                   TODO check flags
5040:767 | DONE dir | em 16 16 |        |             |                 06 00                    --  . .
5040:768 | DONE dir | em 16 16 | 006590 | (6 bytes)   |         .word nt_find-name, xt_refill, 005bb2 
5040:768 | DONE dir | em 16 16 |        |             |                 7d 65 8b 5b b2 5b        --  } e . [ . [
5040:769 | DONE dir | em 16 16 | 006596 | (6 bytes)   |         .byte 72, 65, 66, 69, 6c, 6c 
5040:769 | DONE dir | em 16 16 |        |             |                 72 65 66 69 6c 6c        --  r e f i l l
5040:770 | DONE wsp | em 16 16 |        |             |
5040:771 | DONE lbl | em 16 16 | 00659c |             | nt_parse-name                        
5040:772 | DONE dir | em 16 16 | 00659c | (2 bytes)   |         .byte &10, 0                 
5040:772 | DONE dir | em 16 16 |        |             |                 0a 00                    --  
 .
5040:773 | DONE dir | em 16 16 | 00659e | (6 bytes)   |         .word nt_refill, xt_parse-name, 005b28 
5040:773 | DONE dir | em 16 16 |        |             |                 8e 65 c4 5a 28 5b        --  . e . Z ( [
5040:774 | DONE dir | em 16 16 | 0065a4 | (10 bytes)  |         .byte 70, 61, 72, 73, 65, 2d, 6e, 61, 6d, 65 
5040:774 | DONE dir | em 16 16 |        |             |                 70 61 72 73 65 2d 6e 61  --  p a r s e - n a
5040:774 | DONE dir | em 16 16 |        |             |                 6d 65                    --  m e
5040:775 | DONE wsp | em 16 16 |        |             |
5040:776 | DONE lbl | em 16 16 | 0065ae |             | nt_source-id                         
5040:777 | DONE dir | em 16 16 | 0065ae | (2 bytes)   |         .byte 9, { NC }              
5040:777 | DONE dir | em 16 16 |        |             |                 09 01                    --  	 .
5040:778 | DONE dir | em 16 16 | 0065b0 | (6 bytes)   |         .word nt_parse-name, xt_source-id, 005cf2 
5040:778 | DONE dir | em 16 16 |        |             |                 9c 65 ec 5c f2 5c        --  . e . \ . \
5040:779 | DONE dir | em 16 16 | 0065b6 | (9 bytes)   |         .byte 73, 6f, 75, 72, 63, 65, 2d, 69, 64 
5040:779 | DONE dir | em 16 16 |        |             |                 73 6f 75 72 63 65 2d 69  --  s o u r c e - i
5040:779 | DONE dir | em 16 16 |        |             |                 64                       --  d
5040:780 | DONE wsp | em 16 16 |        |             |
5040:781 | DONE lbl | em 16 16 | 0065bf |             | nt_comma                             
5040:782 | DONE dir | em 16 16 | 0065bf | (2 bytes)   |         .byte 1, { NC }              
5040:782 | DONE dir | em 16 16 |        |             |                 01 01                    --  . .
5040:783 | DONE dir | em 16 16 | 0065c1 | (6 bytes)   |         .word nt_source-id, xt_comma, 005238 
5040:783 | DONE dir | em 16 16 |        |             |                 ae 65 2d 52 38 52        --  . e - R 8 R
5040:784 | DONE dir | em 16 16 | 0065c7 | (1 bytes)   |         .byte 2c                     
5040:784 | DONE dir | em 16 16 |        |             |                 2c                       --  ,
5040:785 | DONE wsp | em 16 16 |        |             |
5040:786 | DONE lbl | em 16 16 | 0065c8 |             | nt_accept                            
5040:787 | DONE dir | em 16 16 | 0065c8 | (2 bytes)   |         .byte 6, 00                  TODO check flags
5040:787 | DONE dir | em 16 16 |        |             |                 06 00                    --  . .
5040:788 | DONE dir | em 16 16 | 0065ca | (6 bytes)   |         .word nt_comma, xt_accept, 0054c6 
5040:788 | DONE dir | em 16 16 |        |             |                 bf 65 43 54 c6 54        --  . e C T . T
5040:789 | DONE dir | em 16 16 | 0065d0 | (6 bytes)   |         .byte 61, 63, 63, 65, 70, 74 
5040:789 | DONE dir | em 16 16 |        |             |                 61 63 63 65 70 74        --  a c c e p t
5040:790 | DONE wsp | em 16 16 |        |             |
5040:791 | DONE lbl | em 16 16 | 0065d6 |             | nt_backslash                         
5040:792 | DONE dir | em 16 16 | 0065d6 | (2 bytes)   |         .byte 1, { NC }              
5040:792 | DONE dir | em 16 16 |        |             |                 01 01                    --  . .
5040:793 | DONE dir | em 16 16 | 0065d8 | (6 bytes)   |         .word nt_accept, xt_backslash, 0052e1 
5040:793 | DONE dir | em 16 16 |        |             |                 c8 65 dd 52 e1 52        --  . e . R . R
5040:794 | DONE dir | em 16 16 | 0065de | (1 bytes)   |         .byte 5c                     
5040:794 | DONE dir | em 16 16 |        |             |                 5c                       --  \
5040:795 | DONE wsp | em 16 16 |        |             |
5040:796 | DONE lbl | em 16 16 | 0065df |             | nt_qdup                              
5040:797 | DONE dir | em 16 16 | 0065df | (2 bytes)   |         .byte 4, { NC }              
5040:797 | DONE dir | em 16 16 |        |             |                 04 01                    --  . .
5040:798 | DONE dir | em 16 16 | 0065e1 | (6 bytes)   |         .word nt_backslash, xt_qdup, 0052b5 
5040:798 | DONE dir | em 16 16 |        |             |                 d6 65 ae 52 b5 52        --  . e . R . R
5040:799 | DONE dir | em 16 16 | 0065e7 | (4 bytes)   |         .byte 3f, 64, 75, 70         
5040:799 | DONE dir | em 16 16 |        |             |                 3f 64 75 70              --  ? d u p
5040:800 | DONE wsp | em 16 16 |        |             |
5040:801 | DONE lbl | em 16 16 | 0065eb |             | nt_tuck                              
5040:802 | DONE dir | em 16 16 | 0065eb | (2 bytes)   |         .byte 4, { NC }              
5040:802 | DONE dir | em 16 16 |        |             |                 04 01                    --  . .
5040:803 | DONE dir | em 16 16 | 0065ed | (6 bytes)   |         .word nt_qdup, xt_tuck, 005d36 
5040:803 | DONE dir | em 16 16 |        |             |                 df 65 2e 5d 36 5d        --  . e . ] 6 ]
5040:804 | DONE dir | em 16 16 | 0065f3 | (4 bytes)   |         .byte 74, 75, 63, 6b         
5040:804 | DONE dir | em 16 16 |        |             |                 74 75 63 6b              --  t u c k
5040:805 | DONE wsp | em 16 16 |        |             |
5040:806 | DONE lbl | em 16 16 | 0065f7 |             | nt_nip                               
5040:807 | DONE dir | em 16 16 | 0065f7 | (2 bytes)   |         .byte 3, { NC }              
5040:807 | DONE dir | em 16 16 |        |             |                 03 01                    --  . .
5040:808 | DONE dir | em 16 16 | 0065f9 | (6 bytes)   |         .word nt_tuck, xt_nip, 005a10 
5040:808 | DONE dir | em 16 16 |        |             |                 eb 65 0e 5a 10 5a        --  . e . Z . Z
5040:809 | DONE dir | em 16 16 | 0065ff | (3 bytes)   |         .byte 6e, 69, 70             
5040:809 | DONE dir | em 16 16 |        |             |                 6e 69 70                 --  n i p
5040:810 | DONE wsp | em 16 16 |        |             |
5040:811 | DONE lbl | em 16 16 | 006602 |             | nt_mrot                              
5040:812 | DONE dir | em 16 16 | 006602 | (2 bytes)   |         .byte 4, { NC }              
5040:812 | DONE dir | em 16 16 |        |             |                 04 01                    --  . .
5040:813 | DONE dir | em 16 16 | 006604 | (6 bytes)   |         .word nt_nip, xt_mrot, 0052fd 
5040:813 | DONE dir | em 16 16 |        |             |                 f7 65 f5 52 fd 52        --  . e . R . R
5040:814 | DONE dir | em 16 16 | 00660a | (4 bytes)   |         .byte 2d, 72, 6f, 74         
5040:814 | DONE dir | em 16 16 |        |             |                 2d 72 6f 74              --  - r o t
5040:815 | DONE wsp | em 16 16 |        |             |
5040:816 | DONE lbl | em 16 16 | 00660e |             | nt_rot                               
5040:817 | DONE dir | em 16 16 | 00660e | (2 bytes)   |         .byte 3, { NC }              
5040:817 | DONE dir | em 16 16 |        |             |                 03 01                    --  . .
5040:818 | DONE dir | em 16 16 | 006610 | (6 bytes)   |         .word nt_mrot, xt_rot, 005bbb 
5040:818 | DONE dir | em 16 16 |        |             |                 02 66 b3 5b bb 5b        --  . f . [ . [
5040:819 | DONE dir | em 16 16 | 006616 | (3 bytes)   |         .byte 72, 6f, 74             
5040:819 | DONE dir | em 16 16 |        |             |                 72 6f 74                 --  r o t
5040:820 | DONE wsp | em 16 16 |        |             |
5040:821 | DONE lbl | em 16 16 | 006619 |             | nt_2over                             
5040:822 | DONE dir | em 16 16 | 006619 | (2 bytes)   |         .byte 5, { NC }              
5040:822 | DONE dir | em 16 16 |        |             |                 05 01                    --  . .
5040:823 | DONE dir | em 16 16 | 00661b | (6 bytes)   |         .word nt_rot, xt_2over, 0053bd 
5040:823 | DONE dir | em 16 16 |        |             |                 0e 66 b1 53 bd 53        --  . f . S . S
5040:824 | DONE dir | em 16 16 | 006621 | (5 bytes)   |         .byte 32, 6f, 76, 65, 72     
5040:824 | DONE dir | em 16 16 |        |             |                 32 6f 76 65 72           --  2 o v e r
5040:825 | DONE wsp | em 16 16 |        |             |
5040:826 | DONE lbl | em 16 16 | 006626 |             | nt_2swap                             
5040:827 | DONE dir | em 16 16 | 006626 | (2 bytes)   |         .byte 5, { NC }              
5040:827 | DONE dir | em 16 16 |        |             |                 05 01                    --  . .
5040:828 | DONE dir | em 16 16 | 006628 | (6 bytes)   |         .word nt_2over, xt_2swap, 0053ed 
5040:828 | DONE dir | em 16 16 |        |             |                 19 66 dd 53 ed 53        --  . f . S . S
5040:829 | DONE dir | em 16 16 | 00662e | (5 bytes)   |         .byte 32, 73, 77, 61, 70     
5040:829 | DONE dir | em 16 16 |        |             |                 32 73 77 61 70           --  2 s w a p
5040:830 | DONE wsp | em 16 16 |        |             |
5040:831 | DONE lbl | em 16 16 | 006633 |             | nt_execute                           
5040:832 | DONE dir | em 16 16 | 006633 | (2 bytes)   |         .byte 7, { NC }              
5040:832 | DONE dir | em 16 16 |        |             |                 07 01                    --  . .
5040:833 | DONE dir | em 16 16 | 006635 | (6 bytes)   |         .word nt_2swap, xt_execute, 005817 
5040:833 | DONE dir | em 16 16 |        |             |                 26 66 0d 58 17 58        --  & f  X . X
5040:834 | DONE dir | em 16 16 | 00663b | (7 bytes)   |         .byte 65, 78, 65, 63, 75, 74, 65 
5040:834 | DONE dir | em 16 16 |        |             |                 65 78 65 63 75 74 65     --  e x e c u t e
5040:835 | DONE wsp | em 16 16 |        |             |
5040:836 | DONE lbl | em 16 16 | 006642 |             | nt_here                              
5040:837 | DONE dir | em 16 16 | 006642 | (2 bytes)   |         .byte 4, { NC }              
5040:837 | DONE dir | em 16 16 |        |             |                 04 01                    --  . .
5040:838 | DONE dir | em 16 16 | 006644 | (6 bytes)   |         .word nt_execute, xt_here, 005903 
5040:838 | DONE dir | em 16 16 |        |             |                 33 66 fd 58 03 59        --  3 f . X . Y
5040:839 | DONE dir | em 16 16 | 00664a | (4 bytes)   |         .byte 68, 65, 72, 65         
5040:839 | DONE dir | em 16 16 |        |             |                 68 65 72 65              --  h e r e
5040:840 | DONE wsp | em 16 16 |        |             |
5040:841 | DONE lbl | em 16 16 | 00664e |             | nt_2drop                             
5040:842 | DONE dir | em 16 16 | 00664e | (2 bytes)   |         .byte 5, { NC }              
5040:842 | DONE dir | em 16 16 |        |             |                 05 01                    --  . .
5040:843 | DONE dir | em 16 16 | 006650 | (6 bytes)   |         .word nt_here, xt_2drop, 0053a5 
5040:843 | DONE dir | em 16 16 |        |             |                 42 66 9f 53 a5 53        --  B f . S . S
5040:844 | DONE dir | em 16 16 | 006656 | (5 bytes)   |         .byte 32, 64, 72, 6f, 70     
5040:844 | DONE dir | em 16 16 |        |             |                 32 64 72 6f 70           --  2 d r o p
5040:845 | DONE wsp | em 16 16 |        |             |
5040:846 | DONE lbl | em 16 16 | 00665b |             | nt_rfetch                            
5040:847 | DONE dir | em 16 16 | 00665b | (2 bytes)   |         .byte 2, 0                   we follow Gforth in making this not CO
5040:847 | DONE dir | em 16 16 |        |             |                 02 00                    --  . .
5040:848 | DONE dir | em 16 16 | 00665d | (6 bytes)   |         .word nt_2drop, xt_rfetch, 005b82 
5040:848 | DONE dir | em 16 16 |        |             |                 4e 66 7a 5b 82 5b        --  N f z [ . [
5040:849 | DONE dir | em 16 16 | 006663 | (2 bytes)   |         .byte 72, 40                 
5040:849 | DONE dir | em 16 16 |        |             |                 72 40                    --  r @
5040:850 | DONE wsp | em 16 16 |        |             |
5040:851 | DONE lbl | em 16 16 | 006665 |             | nt_fromr                             
5040:852 | DONE dir | em 16 16 | 006665 | (2 bytes)   |         .byte 2, { CO }              
5040:852 | DONE dir | em 16 16 |        |             |                 02 04                    --  . .
5040:853 | DONE dir | em 16 16 | 006667 | (6 bytes)   |         .word nt_rfetch, xt_fromr, 005b8a 
5040:853 | DONE dir | em 16 16 |        |             |                 5b 66 83 5b 8a 5b        --  [ f . [ . [
5040:854 | DONE dir | em 16 16 | 00666d | (2 bytes)   |         .byte 72, 3e                 
5040:854 | DONE dir | em 16 16 |        |             |                 72 3e                    --  r >
5040:855 | DONE wsp | em 16 16 |        |             |
5040:856 | DONE lbl | em 16 16 | 00666f |             | nt_tor                               
5040:857 | DONE dir | em 16 16 | 00666f | (2 bytes)   |         .byte 2, { CO }              
5040:857 | DONE dir | em 16 16 |        |             |                 02 04                    --  . .
5040:858 | DONE dir | em 16 16 | 006671 | (6 bytes)   |         .word nt_fromr, xt_tor, 00519f 
5040:858 | DONE dir | em 16 16 |        |             |                 65 66 98 51 9f 51        --  e f . Q . Q
5040:859 | DONE dir | em 16 16 | 006677 | (2 bytes)   |         .byte 3e, 72                 
5040:859 | DONE dir | em 16 16 |        |             |                 3e 72                    --  > r
5040:860 | DONE wsp | em 16 16 |        |             |
5040:861 | DONE lbl | em 16 16 | 006679 |             | nt_digitq                            
5040:862 | DONE dir | em 16 16 | 006679 | (2 bytes)   |         .byte 6, { NC }              
5040:862 | DONE dir | em 16 16 |        |             |                 06 01                    --  . .
5040:863 | DONE dir | em 16 16 | 00667b | (6 bytes)   |         .word nt_tor, xt_digitq, 0056fe 
5040:863 | DONE dir | em 16 16 |        |             |                 6f 66 c3 56 fe 56        --  o f . V . V
5040:864 | DONE dir | em 16 16 | 006681 | (6 bytes)   |         .byte 64, 69, 67, 69, 74, 3f 
5040:864 | DONE dir | em 16 16 |        |             |                 64 69 67 69 74 3f        --  d i g i t ?
5040:865 | DONE wsp | em 16 16 |        |             |
5040:866 | DONE lbl | em 16 16 | 006687 |             | nt_bounds                            
5040:867 | DONE dir | em 16 16 | 006687 | (2 bytes)   |         .byte 6, { NC }              
5040:867 | DONE dir | em 16 16 |        |             |                 06 01                    --  . .
5040:868 | DONE dir | em 16 16 | 006689 | (6 bytes)   |         .word nt_digitq, xt_bounds, 005537 
5040:868 | DONE dir | em 16 16 |        |             |                 79 66 2e 55 37 55        --  y f . U 7 U
5040:869 | DONE dir | em 16 16 | 00668f | (6 bytes)   |         .byte 62, 6f, 75, 6e, 64, 73 
5040:869 | DONE dir | em 16 16 |        |             |                 62 6f 75 6e 64 73        --  b o u n d s
5040:870 | DONE wsp | em 16 16 |        |             |
5040:871 | DONE lbl | em 16 16 | 006695 |             | nt_over                              
5040:872 | DONE dir | em 16 16 | 006695 | (2 bytes)   |         .byte 4, { NC }              
5040:872 | DONE dir | em 16 16 |        |             |                 04 01                    --  . .
5040:873 | DONE dir | em 16 16 | 006697 | (6 bytes)   |         .word nt_bounds, xt_over, 005aaa 
5040:873 | DONE dir | em 16 16 |        |             |                 87 66 a4 5a aa 5a        --  . f . Z . Z
5040:874 | DONE dir | em 16 16 | 00669d | (4 bytes)   |         .byte 6f, 76, 65, 72         
5040:874 | DONE dir | em 16 16 |        |             |                 6f 76 65 72              --  o v e r
5040:875 | DONE wsp | em 16 16 |        |             |
5040:876 | DONE lbl | em 16 16 | 0066a1 |             | nt_fetch                             
5040:877 | DONE dir | em 16 16 | 0066a1 | (2 bytes)   |         .byte 1, { NC }              
5040:877 | DONE dir | em 16 16 |        |             |                 01 01                    --  . .
5040:878 | DONE dir | em 16 16 | 0066a3 | (6 bytes)   |         .word nt_over, xt_fetch, 0052c6 
5040:878 | DONE dir | em 16 16 |        |             |                 95 66 c2 52 c6 52        --  . f . R . R
5040:879 | DONE dir | em 16 16 | 0066a9 | (1 bytes)   |         .byte 40                     
5040:879 | DONE dir | em 16 16 |        |             |                 40                       --  @
5040:880 | DONE wsp | em 16 16 |        |             |
5040:881 | DONE lbl | em 16 16 | 0066aa |             | nt_store                             
5040:882 | DONE dir | em 16 16 | 0066aa | (2 bytes)   |         .byte 1, { NC }              
5040:882 | DONE dir | em 16 16 |        |             |                 01 01                    --  . .
5040:883 | DONE dir | em 16 16 | 0066ac | (6 bytes)   |         .word nt_fetch, xt_store, 0052c1 
5040:883 | DONE dir | em 16 16 |        |             |                 a1 66 b6 52 c1 52        --  . f . R . R
5040:884 | DONE dir | em 16 16 | 0066b2 | (1 bytes)   |         .byte 21                     
5040:884 | DONE dir | em 16 16 |        |             |                 21                       --  !
5040:885 | DONE wsp | em 16 16 |        |             |
5040:886 | DONE lbl | em 16 16 | 0066b3 |             | nt_swap                              
5040:887 | DONE dir | em 16 16 | 0066b3 | (2 bytes)   |         .byte 4, { NC }              
5040:887 | DONE dir | em 16 16 |        |             |                 04 01                    --  . .
5040:888 | DONE dir | em 16 16 | 0066b5 | (6 bytes)   |         .word nt_store, xt_swap, 005d1b 
5040:888 | DONE dir | em 16 16 |        |             |                 aa 66 16 5d 1b 5d        --  . f . ] . ]
5040:889 | DONE dir | em 16 16 | 0066bb | (4 bytes)   |         .byte 73, 77, 61, 70         
5040:889 | DONE dir | em 16 16 |        |             |                 73 77 61 70              --  s w a p
5040:890 | DONE wsp | em 16 16 |        |             |
5040:891 | DONE lbl | em 16 16 | 0066bf |             | nt_dup                               
5040:892 | DONE dir | em 16 16 | 0066bf | (2 bytes)   |         .byte 3, { NC }              
5040:892 | DONE dir | em 16 16 |        |             |                 03 01                    --  . .
5040:893 | DONE dir | em 16 16 | 0066c1 | (6 bytes)   |         .word nt_swap, xt_dup, 0057ae 
5040:893 | DONE dir | em 16 16 |        |             |                 b3 66 aa 57 ae 57        --  . f . W . W
5040:894 | DONE dir | em 16 16 | 0066c7 | (3 bytes)   |         .byte 64, 75, 70             
5040:894 | DONE dir | em 16 16 |        |             |                 64 75 70                 --  d u p
5040:895 | DONE wsp | em 16 16 |        |             |
5040:896 | DONE cmt | em 16 16 |        |             | ; DROP is always the first entry in dictionary
5040:897 | DONE lbl | em 16 16 | 0066ca |             | nt_drop                              
5040:898 | DONE dir | em 16 16 | 0066ca | (2 bytes)   |         .byte 4, { NC }              
5040:898 | DONE dir | em 16 16 |        |             |                 04 01                    --  . .
5040:899 | DONE dir | em 16 16 | 0066cc | (6 bytes)   |         .word nt_dup, xt_drop, 005782 
5040:899 | DONE dir | em 16 16 |        |             |                 bf 66 7e 57 82 57        --  . f ~ W . W
5040:900 | DONE dir | em 16 16 | 0066d2 | (4 bytes)   |         .byte 64, 72, 6f, 70         
5040:900 | DONE dir | em 16 16 |        |             |                 64 72 6f 70              --  d r o p
5040:901 | DONE wsp | em 16 16 |        |             |
5040:902 | DONE cmt | em 16 16 |        |             | ; END
5041:000 | DONE wsp | em 16 16 |        |             |
5042:000 | DONE cmt | em 16 16 |        |             | ; ===================================================================
5043:000 | DONE cmt | em 16 16 |        |             | ; CODE FIELD ROUTINES
5044:000 | DONE wsp | em 16 16 |        |             |
5045:000 | DONE cmt | em 16 16 |        |             | ; -------------------------------------------------------------------
5046:000 | DONE cmt | em 16 16 |        |             | ; DOCONST
5047:000 | DONE cmt | em 16 16 |        |             | ; Execute a constant: Push the data in the first two byte of the Data Field onto
5048:000 | DONE cmt | em 16 16 |        |             | ; the stack
5049:000 | DONE lbl | em 16 16 | 0066d6 |             | doconst                              
5050:000 | DONE dir | em 16 16 |        |             |         .!a16                        
5051:000 | DONE dir | em 16 16 |        |             |         .!xy16                       
5052:000 | DONE ins | em 16 16 | 0066d6 | ca          |                 dex                  make room on Data Stack
5053:000 | DONE ins | em 16 16 | 0066d7 | ca          |                 dex                  
5054:000 | DONE ins | em 16 16 | 0066d8 | 94 00       |                 sty.dx 00            
5055:000 | DONE wsp | em 16 16 |        |             |
5056:000 | DONE cmt | em 16 16 |        |             |                 ; The value we need is stored two bytes after the JSR return
5057:000 | DONE cmt | em 16 16 |        |             |                 ; address, which in turn is what is on top of the Return Stack
5058:000 | DONE ins | em 16 16 | 0066da | 68          |                 pla                  get the return address
5059:000 | DONE ins | em 16 16 | 0066db | 85 1c       |                 sta.d 00001c         
5060:000 | DONE wsp | em 16 16 |        |             |
5061:000 | DONE cmt | em 16 16 |        |             |                 ; start Y as index off with 1 instead of zero because of 65816's
5062:000 | DONE cmt | em 16 16 |        |             |                 ; address handling
5063:000 | DONE ins | em 16 16 | 0066dd | a0 01 00    |                 ldy.# 0001           
5064:000 | DONE ins | em 16 16 | 0066e0 | b1 1c       |                 lda.diy 00001c       LDA (TMP1),Y
5065:000 | DONE ins | em 16 16 | 0066e2 | a8          |                 tay                  
5066:000 | DONE wsp | em 16 16 |        |             |
5067:000 | DONE ins | em 16 16 | 0066e3 | 60          |                 rts                  takes us to original caller
5068:000 | DONE wsp | em 16 16 |        |             |
5069:000 | DONE wsp | em 16 16 |        |             |
5070:000 | DONE cmt | em 16 16 |        |             | ; -------------------------------------------------------------------
5071:000 | DONE cmt | em 16 16 |        |             | ; DODEFER
5072:000 | DONE cmt | em 16 16 |        |             | ; Execute a DEFER statement at runtime: Execute the address we find after the
5073:000 | DONE cmt | em 16 16 |        |             | ; caller in the Data Field
5074:000 | DONE lbl | em 16 16 | 0066e4 |             | dodefer                              
5075:000 | DONE cmt | em 16 16 |        |             |                 ; the xt we need is stored in the two bytes after the JSR return
5076:000 | DONE cmt | em 16 16 |        |             |                 ; address, which is what is on top of the Retun Stack. So all we
5077:000 | DONE cmt | em 16 16 |        |             |                 ; have to do is replace our return jump with what we find there
5078:000 | DONE ins | em 16 16 | 0066e4 | 68          |                 pla                  this is the address where we find the xt ...
5079:000 | DONE ins | em 16 16 | 0066e5 | 1a          |                 inc.a                ... except one byte later
5080:000 | DONE ins | em 16 16 | 0066e6 | 85 1c       |                 sta.d 00001c         
5081:000 | DONE ins | em 16 16 | 0066e8 | b2 1c       |                 lda.di 00001c        LDA (TMP1)
5082:000 | DONE ins | em 16 16 | 0066ea | 3a          |                 dec.a                Now we need to move one byte back
5083:000 | DONE ins | em 16 16 | 0066eb | 48          |                 pha                  Return new address
5084:000 | DONE wsp | em 16 16 |        |             |
5085:000 | DONE ins | em 16 16 | 0066ec | 60          |                 rts                  This is actually a jump to the new target
5086:000 | DONE wsp | em 16 16 |        |             |
5087:000 | DONE lbl | em 16 16 | 0066ed |             | defer_error                          
5088:000 | DONE cmt | em 16 16 |        |             |                 ; if the defer has not been defined with an IS word, we land
5089:000 | DONE cmt | em 16 16 |        |             |                 ; here by default
5090:000 | DONE ins | em 16 16 | 0066ed | a9 4f 6e    |                 lda.# 006e4f         
5091:000 | DONE ins | em 16 16 | 0066f0 | 4c 8c 67    |                 jmp 00678c           
5092:000 | DONE wsp | em 16 16 |        |             |
5093:000 | DONE wsp | em 16 16 |        |             |
5094:000 | DONE cmt | em 16 16 |        |             | ; -------------------------------------------------------------------
5095:000 | DONE cmt | em 16 16 |        |             | ; DODOES
5096:000 | DONE cmt | em 16 16 |        |             | ; Used in combination with DOES>'s runtime portion to actually do the work of
5097:000 | DONE cmt | em 16 16 |        |             | ; the new word. See DOES> and docs/create-does.txt for details. Uses tmp3
5098:000 | DONE lbl | em 16 16 | 0066f3 |             | dodoes                               
5099:000 | DONE cmt | em 16 16 |        |             |                 ; Assumes the address of the CFA of the original defining word
5100:000 | DONE cmt | em 16 16 |        |             |                 ; (say, CONSTANT) is on the top of the Return Stack. Save it for
5101:000 | DONE cmt | em 16 16 |        |             |                 ; a later jump, adding one byte because of the way the 65816
5102:000 | DONE cmt | em 16 16 |        |             |                 ; works
5103:000 | DONE ins | em 16 16 | 0066f3 | 68          |                 pla                  
5104:000 | DONE ins | em 16 16 | 0066f4 | 1a          |                 inc.a                
5105:000 | DONE ins | em 16 16 | 0066f5 | 85 20       |                 sta.d 000020         
5106:000 | DONE wsp | em 16 16 |        |             |
5107:000 | DONE cmt | em 16 16 |        |             |                 ; Next on the Return Stack should be the address of the PFA of
5108:000 | DONE cmt | em 16 16 |        |             |                 ; the calling defined word (say, the name of whatever constant we
5109:000 | DONE cmt | em 16 16 |        |             |                 ; just defined). Move this to the Data Stack, again adding one.
5110:000 | DONE ins | em 16 16 | 0066f7 | ca          |                 dex                  
5111:000 | DONE ins | em 16 16 | 0066f8 | ca          |                 dex                  
5112:000 | DONE ins | em 16 16 | 0066f9 | 94 00       |                 sty.dx 00            
5113:000 | DONE wsp | em 16 16 |        |             |
5114:000 | DONE ins | em 16 16 | 0066fb | 7a          |                 ply                  
5115:000 | DONE ins | em 16 16 | 0066fc | c8          |                 iny                  
5116:000 | DONE wsp | em 16 16 |        |             |
5117:000 | DONE cmt | em 16 16 |        |             |                 ; This leaves the return address from the original main routine
5118:000 | DONE cmt | em 16 16 |        |             |                 ; on top of the Return Stack. We leave that untouched and jump
5119:000 | DONE cmt | em 16 16 |        |             |                 ; to the special code of the defining word. It's RTS instruction
5120:000 | DONE cmt | em 16 16 |        |             |                 ; will take us back to the main routine
5121:000 | DONE ins | em 16 16 | 0066fd | 6c 20 00    |                 jmp.i 000020         JMP (TMP3)
5122:000 | DONE wsp | em 16 16 |        |             |
5123:000 | DONE wsp | em 16 16 |        |             |
5124:000 | DONE cmt | em 16 16 |        |             | ; -------------------------------------------------------------------
5125:000 | DONE cmt | em 16 16 |        |             | ; DOVAR
5126:000 | DONE cmt | em 16 16 |        |             | ; Execute a variable: Push the address of the first bytes of the Data Field onto
5127:000 | DONE cmt | em 16 16 |        |             | ; the stack. This is called with JSR so we can pick up the address of the
5128:000 | DONE cmt | em 16 16 |        |             | ; calling variable off the 65816's Return Stack. The final RTS takes us to the
5129:000 | DONE cmt | em 16 16 |        |             | ; original caller of the routine that in turn called DOVAR. This is the default
5130:000 | DONE cmt | em 16 16 |        |             | ; routine installed with CREATE
5131:000 | DONE lbl | em 16 16 | 006700 |             | dovar                                
5132:000 | DONE dir | em 16 16 |        |             |         .!a16                        
5133:000 | DONE dir | em 16 16 |        |             |         .!xy16                       
5134:000 | DONE ins | em 16 16 | 006700 | ca          |                 dex                  make room on Data Stack
5135:000 | DONE ins | em 16 16 | 006701 | ca          |                 dex                  
5136:000 | DONE ins | em 16 16 | 006702 | 94 00       |                 sty.dx 00            
5137:000 | DONE wsp | em 16 16 |        |             |
5138:000 | DONE cmt | em 16 16 |        |             |                 ; The address we need is stored in the two bytes after the JSR
5139:000 | DONE cmt | em 16 16 |        |             |                 ; return address, which in turn is what is on top of the Return
5140:000 | DONE cmt | em 16 16 |        |             |                 ; Stack
5141:000 | DONE ins | em 16 16 | 006704 | 7a          |                 ply                  value is now TOS
5142:000 | DONE ins | em 16 16 | 006705 | c8          |                 iny                  add one because of 65816's address handling
5143:000 | DONE wsp | em 16 16 |        |             |
5144:000 | DONE ins | em 16 16 | 006706 | 60          |                 rts                  takes us to original caller
5145:000 | DONE wsp | em 16 16 |        |             |
5146:000 | DONE wsp | em 16 16 |        |             |
5147:000 | DONE cmt | em 16 16 |        |             | ; ===================================================================
5148:000 | DONE cmt | em 16 16 |        |             | ; LOW LEVEL HELPER FUNCTIONS
5149:000 | DONE wsp | em 16 16 |        |             |
5150:000 | DONE wsp | em 16 16 |        |             |
5151:000 | DONE cmt | em 16 16 |        |             | ; -------------------------------------------------------------------
5152:000 | DONE cmt | em 16 16 |        |             | ; INTERPRET
5153:000 | DONE cmt | em 16 16 |        |             | ; Core routine for interpreter called by EVALUATE and QUIT. We process one line
5154:000 | DONE cmt | em 16 16 |        |             | ; only. Assumes that address of name is in cib and length of whole input
5155:000 | DONE cmt | em 16 16 |        |             | ; string is in ciblen
5156:000 | DONE lbl | em 16 16 | 006707 |             | interpret                            
5157:000 | DONE lbl | em 16 16 | 006707 |             | interpret_loop                       
5158:000 | DONE dir | em 16 16 |        |             |         .!a16                        
5159:000 | DONE dir | em 16 16 |        |             |         .!xy16                       
5160:000 | DONE cmt | em 16 16 |        |             |                 ; Normally we would use PARSE here with the SPACE character as
5161:000 | DONE cmt | em 16 16 |        |             |                 ; a parameter (PARSE replaces WORD in modern Forths). However,
5162:000 | DONE cmt | em 16 16 |        |             |                 ; Gforth's PARSE-NAME makes more sense as it uses spaces as
5163:000 | DONE cmt | em 16 16 |        |             |                 ; delimiters per default and skips any leading spaces, which
5164:000 | DONE cmt | em 16 16 |        |             |                 ; PARSE doesn't
5165:000 | DONE ins | em 16 16 | 006707 | 20 c4 5a    |                 jsr 005ac4           ( "string" -- addr u )
5166:000 | DONE wsp | em 16 16 |        |             |
5167:000 | DONE cmt | em 16 16 |        |             |                 ; If PARSE-NAME returns 0 (empty line), no characters were left
5168:000 | DONE cmt | em 16 16 |        |             |                 ; in the line and we need to go get a new line
5169:000 | DONE ins | em 16 16 | 00670a | 98          |                 tya                  force flag check
5170:000 | DONE ins | em 16 16 | 00670b | f0 52       |                 beq 00675f           
5171:000 | DONE wsp | em 16 16 |        |             |
5172:000 | DONE cmt | em 16 16 |        |             |                 ; Go to FIND-NAME to see if this is a word we know. We have to
5173:000 | DONE cmt | em 16 16 |        |             |                 ; make a copy of the address in case it isn't a word we know and
5174:000 | DONE cmt | em 16 16 |        |             |                 ; we have to go see if it is a number
5175:000 | DONE ins | em 16 16 | 00670d | 20 a6 53    |                 jsr 0053a6           TODO convert this to assembler
5176:000 | DONE ins | em 16 16 | 006710 | 20 17 58    |                 jsr 005817           ( addr u -- nt | 0 )
5177:000 | DONE wsp | em 16 16 |        |             |
5178:000 | DONE cmt | em 16 16 |        |             |                 ; a zero signals that we didn't find a word in the Dictionary
5179:000 | DONE ins | em 16 16 | 006713 | 98          |                 tya                  
5180:000 | DONE ins | em 16 16 | 006714 | d0 15       |                 bne 00672b           
5181:000 | DONE wsp | em 16 16 |        |             |
5182:000 | DONE cmt | em 16 16 |        |             |                 ; We didn't get any nt we know of, so let's see if this is
5183:000 | DONE cmt | em 16 16 |        |             |                 ; a number.
5184:000 | DONE ins | em 16 16 | 006716 | 20 7e 57    |                 jsr 00577e           TODO convert this to assembler
5185:000 | DONE wsp | em 16 16 |        |             |
5186:000 | DONE wsp | em 16 16 |        |             |
5187:000 | DONE cmt | em 16 16 |        |             |                 ; If the number conversion doesn't work, NUMBER will do the
5188:000 | DONE cmt | em 16 16 |        |             |                 ; complaining for us
5189:000 | DONE ins | em 16 16 | 006719 | 20 11 5a    |                 jsr 005a11           ( addr u -- u | d )
5190:000 | DONE wsp | em 16 16 |        |             |
5191:000 | DONE cmt | em 16 16 |        |             |                 ; If we're interpreting, we're done
5192:000 | DONE ins | em 16 16 | 00671c | a5 14       |                 lda.d 000014         
5193:000 | DONE ins | em 16 16 | 00671e | f0 e7       |                 beq 006707           
5194:000 | DONE wsp | em 16 16 |        |             |
5195:000 | DONE cmt | em 16 16 |        |             |                 ; We're compiling, so there is a bit more work. Note this
5196:000 | DONE cmt | em 16 16 |        |             |                 ; doesn't work with double-cell numbers, only single-cell
5197:000 | DONE ins | em 16 16 | 006720 | f4 42 59    |                 phe.# 005942         LITERAL runtime
5198:000 | DONE ins | em 16 16 | 006723 | 20 6b 67    |                 jsr 00676b           
5199:000 | DONE wsp | em 16 16 |        |             |
5200:000 | DONE cmt | em 16 16 |        |             |                 ; compile our number
5201:000 | DONE cmt | em 16 16 |        |             |                 ; TODO convert this to assembler
5202:000 | DONE ins | em 16 16 | 006726 | 20 2d 52    |                 jsr 00522d           
5203:000 | DONE wsp | em 16 16 |        |             |
5204:000 | DONE cmt | em 16 16 |        |             |                 ; That was so much fun, let's do it again!
5205:000 | DONE ins | em 16 16 | 006729 | 80 dc       |                 bra 006707           
5206:000 | DONE wsp | em 16 16 |        |             |
5207:000 | DONE lbl | em 16 16 | 00672b |             | interpret_got_name_token             
5208:000 | DONE cmt | em 16 16 |        |             |                 ; We have a known word's nt as TOS. We're going to need its xt
5209:000 | DONE cmt | em 16 16 |        |             |                 ; though, which is four bytes father down.
5210:000 | DONE wsp | em 16 16 |        |             |
5211:000 | DONE cmt | em 16 16 |        |             |                 ; Arrive here with ( addr u nt ), so we NIP twice, which is
5212:000 | DONE cmt | em 16 16 |        |             |                 ; really fast if Y is TOS
5213:000 | DONE ins | em 16 16 | 00672b | e8          |                 inx                  
5214:000 | DONE ins | em 16 16 | 00672c | e8          |                 inx                  
5215:000 | DONE ins | em 16 16 | 00672d | e8          |                 inx                  
5216:000 | DONE ins | em 16 16 | 00672e | e8          |                 inx                  
5217:000 | DONE wsp | em 16 16 |        |             |
5218:000 | DONE cmt | em 16 16 |        |             |                 ; This is a quicker
5219:000 | DONE cmt | em 16 16 |        |             |                 ; version of NAME>INT. But first, save a version of nt for
5220:000 | DONE cmt | em 16 16 |        |             |                 ; error handling and compilation stuff.
5221:000 | DONE ins | em 16 16 | 00672f | 84 1a       |                 sty.d 00001a         
5222:000 | DONE ins | em 16 16 | 006731 | c8          |                 iny                  
5223:000 | DONE ins | em 16 16 | 006732 | c8          |                 iny                  
5224:000 | DONE ins | em 16 16 | 006733 | c8          |                 iny                  
5225:000 | DONE ins | em 16 16 | 006734 | c8          |                 iny                  
5226:000 | DONE ins | em 16 16 | 006735 | b9 00 00    |                 lda.y 0000           LDA $0000,Y
5227:000 | DONE ins | em 16 16 | 006738 | a8          |                 tay                  xt is TOS
5228:000 | DONE wsp | em 16 16 |        |             |
5229:000 | DONE cmt | em 16 16 |        |             |                 ; See if we are in interpret or compile mode
5230:000 | DONE ins | em 16 16 | 006739 | a5 14       |                 lda.d 000014         
5231:000 | DONE ins | em 16 16 | 00673b | d0 14       |                 bne 006751           
5232:000 | DONE wsp | em 16 16 |        |             |
5233:000 | DONE cmt | em 16 16 |        |             |                 ; We are interpreting, so EXECUTE the xt that is TOS. First,
5234:000 | DONE cmt | em 16 16 |        |             |                 ; though, see if this isn't a compile-only word, which would be
5235:000 | DONE cmt | em 16 16 |        |             |                 ; illegal.
5236:000 | DONE ins | em 16 16 | 00673d | b2 1a       |                 lda.di 00001a        
5237:000 | DONE ins | em 16 16 | 00673f | eb          |                 xba                  flags are MSB
5238:000 | DONE ins | em 16 16 | 006740 | 29 04 00    |                 and.# CO             mask everything but Compile Only bit
5239:000 | DONE ins | em 16 16 | 006743 | f0 06       |                 beq 00674b           
5240:000 | DONE wsp | em 16 16 |        |             |
5241:000 | DONE cmt | em 16 16 |        |             |                 ; TODO see if we can print offending word first
5242:000 | DONE ins | em 16 16 | 006745 | a9 2e 6e    |                 lda.# 006e2e         
5243:000 | DONE ins | em 16 16 | 006748 | 4c 8c 67    |                 jmp 00678c           
5244:000 | DONE wsp | em 16 16 |        |             |
5245:000 | DONE lbl | em 16 16 | 00674b |             | interpret_interpret                  
5246:000 | DONE cmt | em 16 16 |        |             |                 ; We JSR to EXECUTE instead of calling the xt directly because
5247:000 | DONE cmt | em 16 16 |        |             |                 ; the RTS of the word we're executing will bring us back here,
5248:000 | DONE cmt | em 16 16 |        |             |                 ; skipping EXECUTE completely during RTS. If we were to execute
5249:000 | DONE cmt | em 16 16 |        |             |                 ; xt directly, we have to fool around with the Return Stack
5250:000 | DONE cmt | em 16 16 |        |             |                 ; instead, which is actually slightly slower
5251:000 | DONE ins | em 16 16 | 00674b | 20 0d 58    |                 jsr 00580d           
5252:000 | DONE wsp | em 16 16 |        |             |
5253:000 | DONE cmt | em 16 16 |        |             |                 ; That's quite enough for this word, let's get the next one
5254:000 | DONE ins | em 16 16 | 00674e | 4c 07 67    |                 jmp 006707           
5255:000 | DONE wsp | em 16 16 |        |             |
5256:000 | DONE lbl | em 16 16 | 006751 |             | interpret_compile                    
5257:000 | DONE cmt | em 16 16 |        |             |                 ; We're compiling. However, we need to see if this is an
5258:000 | DONE cmt | em 16 16 |        |             |                 ; IMMEDIATE word, which would mean we execute it right now even
5259:000 | DONE cmt | em 16 16 |        |             |                 ; during compilation mode. Fortunately, we saved the nt so life
5260:000 | DONE cmt | em 16 16 |        |             |                 ; is easier
5261:000 | DONE ins | em 16 16 | 006751 | b2 1a       |                 lda.di 00001a        
5262:000 | DONE ins | em 16 16 | 006753 | eb          |                 xba                  flags are MSB
5263:000 | DONE ins | em 16 16 | 006754 | 29 02 00    |                 and.# IM             Mask all but IM bit
5264:000 | DONE ins | em 16 16 | 006757 | d0 f2       |                 bne 00674b           IMMEDIATE word, execute right now
5265:000 | DONE wsp | em 16 16 |        |             |
5266:000 | DONE cmt | em 16 16 |        |             |                 ; Compile the xt into the Dictionary with COMPILE,
5267:000 | DONE ins | em 16 16 | 006759 | 20 df 55    |                 jsr 0055df           
5268:000 | DONE ins | em 16 16 | 00675c | 4c 07 67    |                 jmp 006707           
5269:000 | DONE wsp | em 16 16 |        |             |
5270:000 | DONE lbl | em 16 16 | 00675f |             | interpret_line_done                  
5271:000 | DONE cmt | em 16 16 |        |             |                 ; drop stuff from PARSE_NAME
5272:000 | DONE ins | em 16 16 | 00675f | b4 02       |                 ldy.dx 02            
5273:000 | DONE ins | em 16 16 | 006761 | e8          |                 inx                  
5274:000 | DONE ins | em 16 16 | 006762 | e8          |                 inx                  
5275:000 | DONE ins | em 16 16 | 006763 | e8          |                 inx                  
5276:000 | DONE ins | em 16 16 | 006764 | e8          |                 inx                  
5277:000 | DONE wsp | em 16 16 |        |             |
5278:000 | DONE ins | em 16 16 | 006765 | 60          |                 rts                  
5279:000 | DONE wsp | em 16 16 |        |             |
5280:000 | DONE cmt | em 16 16 |        |             | ; -------------------------------------------------------------------
5281:000 | DONE cmt | em 16 16 |        |             | ; COMPILE WORDS, JUMPS AND SUBROUTINE JUMPS INTO CODE
5282:000 | DONE cmt | em 16 16 |        |             | ; These three routines compile instructions such as "jsr xt_words" into a word
5283:000 | DONE cmt | em 16 16 |        |             | ; at compile time so they are available at run time. Use by pushing the word or
5284:000 | DONE cmt | em 16 16 |        |             | ; address to be compiled on the Return Stack with
5285:000 | DONE cmt | em 16 16 |        |             | ;
5286:000 | DONE cmt | em 16 16 |        |             | ;       phe.# <WORD>    ; PEA <WORD>
5287:000 | DONE cmt | em 16 16 |        |             | ;
5288:000 | DONE cmt | em 16 16 |        |             | ; Followed by a jump to which ever versions we need. Words that use this routine
5289:000 | DONE cmt | em 16 16 |        |             | ; may not be natively compiled. We use "cmpl" as not to confuse these routines
5290:000 | DONE cmt | em 16 16 |        |             | ; with the COMPILE, word. This routine uses tmptos. Always call this with
5291:000 | DONE cmt | em 16 16 |        |             | ; a subroutine jump, which means no combining JSR/RTS to JMP.
5292:000 | DONE cmt | em 16 16 |        |             | ; TODO see if we need to add a JSR.L variant at some point
5293:000 | DONE wsp | em 16 16 |        |             |
5294:000 | DONE dir | em 16 16 |        |             |         .!a16                        paranoid
5295:000 | DONE lbl | em 16 16 | 006766 |             | cmpl_word                            
5296:000 | DONE ins | em 16 16 | 006766 | a9 00 00    |                 lda.# 0000           zero value as a flag, compile word only
5297:000 | DONE ins | em 16 16 | 006769 | 80 08       |                 bra 006773           
5298:000 | DONE lbl | em 16 16 | 00676b |             | cmpl_subroutine                      
5299:000 | DONE ins | em 16 16 | 00676b | a9 20 00    |                 lda.# 0020           compile "JSR" opcode first
5300:000 | DONE ins | em 16 16 | 00676e | 80 03       |                 bra 006773           
5301:000 | DONE lbl | em 16 16 | 006770 |             | cmpl_jump                            
5302:000 | DONE ins | em 16 16 | 006770 | a9 4c 00    |                 lda.# 004c           compile "JMP", fall through to cmpl_common
5303:000 | DONE lbl | em 16 16 | 006773 |             | cmpl_common                          
5304:000 | DONE cmt | em 16 16 |        |             |                 ; we're going to need the Y register to get anything done
5305:000 | DONE ins | em 16 16 | 006773 | 84 24       |                 sty.d 000024         
5306:000 | DONE wsp | em 16 16 |        |             |
5307:000 | DONE ins | em 16 16 | 006775 | a8          |                 tay                  force flag check
5308:000 | DONE ins | em 16 16 | 006776 | f0 08       |                 beq 006780           came in through cmpl_word, just compile body
5309:000 | DONE wsp | em 16 16 |        |             |
5310:000 | DONE cmt | em 16 16 |        |             |                 ; A contains an opcode that must be compiled first. This is an
5311:000 | DONE cmt | em 16 16 |        |             |                 ; optimized version of C, ("c-comma")
5312:000 | DONE ins | em 16 16 | 006778 | e2 20       |                 sep 20               
5312:001 | DONE ctl | em  8 16 |        |             |         .!a8
5313:000 | DONE ins | em  8 16 | 00677a | 92 00       |                 sta.di 000000        STA (CP)
5314:000 | DONE ins | em  8 16 | 00677c | c2 20       |                 rep 20               
5314:001 | DONE ctl | em 16 16 |        |             |         .!a16
5315:000 | DONE ins | em 16 16 | 00677e | e6 00       |                 inc.d 000000         fall through to cmpl_body
5316:000 | DONE lbl | em 16 16 | 006780 |             | cmpl_body                            
5317:000 | DONE ins | em 16 16 | 006780 | 7a          |                 ply                  the return address we'll need later
5318:000 | DONE wsp | em 16 16 |        |             |
5319:000 | DONE ins | em 16 16 | 006781 | 68          |                 pla                  next value on stack is the word to compile
5320:000 | DONE ins | em 16 16 | 006782 | 92 00       |                 sta.di 000000        this is a quicker version of , ("comma")
5321:000 | DONE ins | em 16 16 | 006784 | e6 00       |                 inc.d 000000         
5322:000 | DONE ins | em 16 16 | 006786 | e6 00       |                 inc.d 000000         
5323:000 | DONE wsp | em 16 16 |        |             |
5324:000 | DONE ins | em 16 16 | 006788 | 5a          |                 phy                  make sure we can get back home
5325:000 | DONE wsp | em 16 16 |        |             |
5326:000 | DONE ins | em 16 16 | 006789 | a4 24       |                 ldy.d 000024         restore Data Stack
5327:000 | DONE wsp | em 16 16 |        |             |
5328:000 | DONE ins | em 16 16 | 00678b | 60          |                 rts                  
5329:000 | DONE wsp | em 16 16 |        |             |
5330:000 | DONE wsp | em 16 16 |        |             |
5331:000 | DONE cmt | em 16 16 |        |             | ; -------------------------------------------------------------------
5332:000 | DONE cmt | em 16 16 |        |             | ; FATAL ERROR
5333:000 | DONE cmt | em 16 16 |        |             | ; Take address of error string from A, print it and then call abort
5334:000 | DONE lbl | em 16 16 | 00678c |             | error                                
5335:000 | DONE ins | em 16 16 | 00678c | 20 92 67    |                 jsr 006792           
5336:000 | DONE ins | em 16 16 | 00678f | 4c aa 50    |                 jmp 0050aa           
5337:000 | DONE wsp | em 16 16 |        |             |
5338:000 | DONE cmt | em 16 16 |        |             | ; -------------------------------------------------------------------
5339:000 | DONE cmt | em 16 16 |        |             | ; Print a zero terminated string to the console, adding a CR character. Takes
5340:000 | DONE cmt | em 16 16 |        |             | ; the address of the string in 16-bit A register, calls put_chr.  A is
5341:000 | DONE cmt | em 16 16 |        |             | ; destroyed. We could probably figure out some way to use TYPE instead, but zero
5342:000 | DONE cmt | em 16 16 |        |             | ; terminated strings are easier for the 65816 to use.
5343:000 | DONE lbl | em 16 16 | 006792 |             | print_string                         
5344:000 | DONE dir | em 16 16 |        |             |         .!a16                        
5345:000 | DONE dir | em 16 16 |        |             |         .!xy16                       
5346:000 | DONE cmt | em 16 16 |        |             |                 ; don't use tmpdsp for X because we don't know if the user has
5347:000 | DONE cmt | em 16 16 |        |             |                 ; used it for something already
5348:000 | DONE ins | em 16 16 | 006792 | da          |                 phx                  
5349:000 | DONE ins | em 16 16 | 006793 | aa          |                 tax                  x16 contains address of string
5350:000 | DONE lbl | em 16 16 | 006794 |             | @                                    
5351:000 | DONE ins | em 16 16 | 006794 | e2 20       |                 sep 20               
5351:001 | DONE ctl | em  8 16 |        |             |         .!a8
5352:000 | DONE ins | em  8 16 | 006796 | bd 00 00    |                 lda.x 0000           LDA $0000,X
5353:000 | DONE ins | em  8 16 | 006799 | f0 06       |                 beq 0067a1           
5354:000 | DONE ins | em  8 16 | 00679b | 20 b4 57    |                 jsr 0057b4           
5355:000 | DONE ins | em  8 16 | 00679e | e8          |                 inx                  
5356:000 | DONE ins | em  8 16 | 00679f | 80 f3       |                 bra 006794           
5357:000 | DONE wsp | em  8 16 |        |             |
5358:000 | DONE lbl | em  8 16 | 0067a1 |             | print_string_done                    
5359:000 | DONE ins | em  8 16 | 0067a1 | a9 0a       |                 lda.# AscLF          should be CR on some systems
5360:000 | DONE ins | em  8 16 | 0067a3 | 20 b4 57    |                 jsr 0057b4           
5361:000 | DONE ins | em  8 16 | 0067a6 | c2 20       |                 rep 20               
5361:001 | DONE ctl | em 16 16 |        |             |         .!a16
5362:000 | DONE ins | em 16 16 | 0067a8 | fa          |                 plx                  
5363:000 | DONE ins | em 16 16 | 0067a9 | 60          |                 rts                  
5364:000 | DONE wsp | em 16 16 |        |             |
5365:000 | DONE cmt | em 16 16 |        |             | ; -------------------------------------------------------------------
5366:000 | DONE cmt | em 16 16 |        |             | ; CONVERT BYTE TO ASCII
5367:000 | DONE cmt | em 16 16 |        |             | ; Convert byte in A to two ASCII hex digits and print them. Calls
5368:000 | DONE cmt | em 16 16 |        |             | ; nibble_to_ascii. Assumes A is 8 bit.
5369:000 | DONE lbl | em 16 16 | 0067aa |             | byte_to_ascii                        
5370:000 | DONE dir | em 16 16 |        |             |         .!a16                        
5371:000 | DONE ins | em 16 16 | 0067aa | 48          |                 pha                  
5372:000 | DONE cmt | em 16 16 |        |             |                 ; convert high nibble first
5373:000 | DONE ins | em 16 16 | 0067ab | 4a          |                 lsr.a                
5374:000 | DONE ins | em 16 16 | 0067ac | 4a          |                 lsr.a                
5375:000 | DONE ins | em 16 16 | 0067ad | 4a          |                 lsr.a                
5376:000 | DONE ins | em 16 16 | 0067ae | 4a          |                 lsr.a                
5377:000 | DONE ins | em 16 16 | 0067af | 20 b3 67    |                 jsr 0067b3           
5378:000 | DONE wsp | em 16 16 |        |             |
5379:000 | DONE ins | em 16 16 | 0067b2 | 68          |                 pla                  
5380:000 | DONE wsp | em 16 16 |        |             |
5381:000 | DONE cmt | em 16 16 |        |             |                 ; fall thru to nibble_to_ascii
5382:000 | DONE wsp | em 16 16 |        |             |
5383:000 | DONE wsp | em 16 16 |        |             |
5384:000 | DONE cmt | em 16 16 |        |             | ; -------------------------------------------------------------------
5385:000 | DONE cmt | em 16 16 |        |             | ; CONVERT NIBBLE TO ASCII
5386:000 | DONE cmt | em 16 16 |        |             | ; Converts the lower nibble of a number in A and returns the ASCII character
5387:000 | DONE cmt | em 16 16 |        |             | ; number, then prints it. Assumes A is 8 bit
5388:000 | DONE lbl | em 16 16 | 0067b3 |             | nibble_to_ascii                      
5389:000 | DONE dir | em 16 16 |        |             |         .!a16                        
5390:000 | DONE ins | em 16 16 | 0067b3 | 29 0f 00    |                 and.# 000f           
5391:000 | DONE ins | em 16 16 | 0067b6 | 09 30 00    |                 ora.# 30             
5392:000 | DONE ins | em 16 16 | 0067b9 | c9 3a 00    |                 cmp.# 003a           '9' + 1
5393:000 | DONE ins | em 16 16 | 0067bc | 90 03       |                 bcc 0067c1           
5394:000 | DONE ins | em 16 16 | 0067be | 69 06 00    |                 adc.# 0006           
5395:000 | DONE lbl | em 16 16 | 0067c1 |             | @                                    
5396:000 | DONE ins | em 16 16 | 0067c1 | 20 34 50    |                 jsr 005034           
5397:000 | DONE wsp | em 16 16 |        |             |
5398:000 | DONE ins | em 16 16 | 0067c4 | 60          |                 rts                  
5399:000 | DONE wsp | em 16 16 |        |             |
5400:000 | DONE cmt | em 16 16 |        |             | ; ===================================================================
5401:000 | DONE cmt | em 16 16 |        |             | ; HIGH-LEVEL WORDS
5402:000 | DONE wsp | em 16 16 |        |             |
5403:000 | DONE cmt | em 16 16 |        |             | ; These are executed during start up. Remember that we have to put a space at
5404:000 | DONE cmt | em 16 16 |        |             | ; the end of the line if there is another line with code following it. No zero
5405:000 | DONE cmt | em 16 16 |        |             | ; or CR/LF is required
5406:000 | DONE lbl | em 16 16 | 0067c5 |             | hi-start                             
5407:000 | DONE cmt | em 16 16 |        |             |         ; High flow control. Some of these could be realized with CS-ROLL and
5408:000 | DONE cmt | em 16 16 |        |             |         ; CS-PICK instead
5409:000 | DONE dir | em 16 16 | 0067c5 | (56 bytes)  |         .byte 3a, 20, 69, 66, 20, 70, 6f, 73, 74, 70, 6f, 6e, 65, (...) 
5409:000 | DONE dir | em 16 16 |        |             |                 3a 20 69 66 20 70 6f 73  --  :   i f   p o s
5409:000 | DONE dir | em 16 16 |        |             |                 74 70 6f 6e 65 20 30 62  --  t p o n e   0 b
5409:000 | DONE dir | em 16 16 |        |             |                 72 61 6e 63 68 20 68 65  --  r a n c h   h e
5409:000 | DONE dir | em 16 16 |        |             |                 72 65 20 30 20 2c 20 3b  --  r e   0   ,   ;
5409:000 | DONE dir | em 16 16 |        |             |                 20 69 6d 6d 65 64 69 61  --    i m m e d i a
5409:000 | DONE dir | em 16 16 |        |             |                 74 65 20 63 6f 6d 70 69  --  t e   c o m p i
5409:000 | DONE dir | em 16 16 |        |             |                 6c 65 2d 6f 6e 6c 79 20  --  l e - o n l y  
5409:000 | DONE dir | em 16 16 |        |             |                                          -- 
5410:000 | DONE dir | em 16 16 | 0067fd | (44 bytes)  |         .byte 3a, 20, 74, 68, 65, 6e, 20, 68, 65, 72, 65, 20, 73, (...) 
5410:000 | DONE dir | em 16 16 |        |             |                 3a 20 74 68 65 6e 20 68  --  :   t h e n   h
5410:000 | DONE dir | em 16 16 |        |             |                 65 72 65 20 73 77 61 70  --  e r e   s w a p
5410:000 | DONE dir | em 16 16 |        |             |                 20 21 20 3b 20 69 6d 6d  --    !   ;   i m m
5410:000 | DONE dir | em 16 16 |        |             |                 65 64 69 61 74 65 20 63  --  e d i a t e   c
5410:000 | DONE dir | em 16 16 |        |             |                 6f 6d 70 69 6c 65 2d 6f  --  o m p i l e - o
5410:000 | DONE dir | em 16 16 |        |             |                 6e 6c 79 20              --  n l y  
5411:000 | DONE dir | em 16 16 | 006829 | (68 bytes)  |         .byte 3a, 20, 65, 6c, 73, 65, 20, 70, 6f, 73, 74, 70, 6f, (...) 
5411:000 | DONE dir | em 16 16 |        |             |                 3a 20 65 6c 73 65 20 70  --  :   e l s e   p
5411:000 | DONE dir | em 16 16 |        |             |                 6f 73 74 70 6f 6e 65 20  --  o s t p o n e  
5411:000 | DONE dir | em 16 16 |        |             |                 62 72 61 6e 63 68 20 68  --  b r a n c h   h
5411:000 | DONE dir | em 16 16 |        |             |                 65 72 65 20 30 20 2c 20  --  e r e   0   ,  
5411:000 | DONE dir | em 16 16 |        |             |                 68 65 72 65 20 72 6f 74  --  h e r e   r o t
5411:000 | DONE dir | em 16 16 |        |             |                 20 21 20 3b 20 69 6d 6d  --    !   ;   i m m
5411:000 | DONE dir | em 16 16 |        |             |                 65 64 69 61 74 65 20 63  --  e d i a t e   c
5411:000 | DONE dir | em 16 16 |        |             |                 6f 6d 70 69 6c 65 2d 6f  --  o m p i l e - o
5411:000 | DONE dir | em 16 16 |        |             |                 6e 6c 79 20              --  n l y  
5412:000 | DONE dir | em 16 16 | 00686d | (61 bytes)  |         .byte 3a, 20, 72, 65, 70, 65, 61, 74, 20, 70, 6f, 73, 74, (...) 
5412:000 | DONE dir | em 16 16 |        |             |                 3a 20 72 65 70 65 61 74  --  :   r e p e a t
5412:000 | DONE dir | em 16 16 |        |             |                 20 70 6f 73 74 70 6f 6e  --    p o s t p o n
5412:000 | DONE dir | em 16 16 |        |             |                 65 20 61 67 61 69 6e 20  --  e   a g a i n  
5412:000 | DONE dir | em 16 16 |        |             |                 68 65 72 65 20 73 77 61  --  h e r e   s w a
5412:000 | DONE dir | em 16 16 |        |             |                 70 20 21 20 3b 20 69 6d  --  p   !   ;   i m
5412:000 | DONE dir | em 16 16 |        |             |                 6d 65 64 69 61 74 65 20  --  m e d i a t e  
5412:000 | DONE dir | em 16 16 |        |             |                 63 6f 6d 70 69 6c 65 2d  --  c o m p i l e -
5412:000 | DONE dir | em 16 16 |        |             |                 6f 6e 6c 79 20           --  o n l y  
5413:000 | DONE dir | em 16 16 | 0068aa | (52 bytes)  |         .byte 3a, 20, 75, 6e, 74, 69, 6c, 20, 70, 6f, 73, 74, 70, (...) 
5413:000 | DONE dir | em 16 16 |        |             |                 3a 20 75 6e 74 69 6c 20  --  :   u n t i l  
5413:000 | DONE dir | em 16 16 |        |             |                 70 6f 73 74 70 6f 6e 65  --  p o s t p o n e
5413:000 | DONE dir | em 16 16 |        |             |                 20 30 62 72 61 6e 63 68  --    0 b r a n c h
5413:000 | DONE dir | em 16 16 |        |             |                 20 2c 20 3b 20 69 6d 6d  --    ,   ;   i m m
5413:000 | DONE dir | em 16 16 |        |             |                 65 64 69 61 74 65 20 63  --  e d i a t e   c
5413:000 | DONE dir | em 16 16 |        |             |                 6f 6d 70 69 6c 65 2d 6f  --  o m p i l e - o
5413:000 | DONE dir | em 16 16 |        |             |                 6e 6c 79 20              --  n l y  
5414:000 | DONE dir | em 16 16 | 0068de | (64 bytes)  |         .byte 3a, 20, 77, 68, 69, 6c, 65, 20, 70, 6f, 73, 74, 70, (...) 
5414:000 | DONE dir | em 16 16 |        |             |                 3a 20 77 68 69 6c 65 20  --  :   w h i l e  
5414:000 | DONE dir | em 16 16 |        |             |                 70 6f 73 74 70 6f 6e 65  --  p o s t p o n e
5414:000 | DONE dir | em 16 16 |        |             |                 20 30 62 72 61 6e 63 68  --    0 b r a n c h
5414:000 | DONE dir | em 16 16 |        |             |                 20 68 65 72 65 20 30 20  --    h e r e   0  
5414:000 | DONE dir | em 16 16 |        |             |                 2c 20 73 77 61 70 20 3b  --  ,   s w a p   ;
5414:000 | DONE dir | em 16 16 |        |             |                 20 69 6d 6d 65 64 69 61  --    i m m e d i a
5414:000 | DONE dir | em 16 16 |        |             |                 74 65 20 63 6f 6d 70 69  --  t e   c o m p i
5414:000 | DONE dir | em 16 16 |        |             |                 6c 65 2d 6f 6e 6c 79 20  --  l e - o n l y  
5414:000 | DONE dir | em 16 16 |        |             |                                          -- 
5415:000 | DONE wsp | em 16 16 |        |             |
5416:000 | DONE cmt | em 16 16 |        |             |         ; DEFER's friends. Code taken from ANSI Forth specifications. Many of
5417:000 | DONE cmt | em 16 16 |        |             |         ; these will be moved to assembler code in due course
5418:000 | DONE dir | em 16 16 | 00691e | (19 bytes)  |         .byte 3a, 20, 64, 65, 66, 65, 72, 21, 20, 3e, 62, 6f, 64, (...) 
5418:000 | DONE dir | em 16 16 |        |             |                 3a 20 64 65 66 65 72 21  --  :   d e f e r !
5418:000 | DONE dir | em 16 16 |        |             |                 20 3e 62 6f 64 79 20 21  --    > b o d y   !
5418:000 | DONE dir | em 16 16 |        |             |                 20 3b 20                 --    ;  
5419:000 | DONE dir | em 16 16 | 006931 | (19 bytes)  |         .byte 3a, 20, 64, 65, 66, 65, 72, 40, 20, 3e, 62, 6f, 64, (...) 
5419:000 | DONE dir | em 16 16 |        |             |                 3a 20 64 65 66 65 72 40  --  :   d e f e r @
5419:000 | DONE dir | em 16 16 |        |             |                 20 3e 62 6f 64 79 20 40  --    > b o d y   @
5419:000 | DONE dir | em 16 16 |        |             |                 20 3b 20                 --    ;  
5420:000 | DONE dir | em 16 16 | 006944 | (76 bytes)  |         .byte 3a, 20, 69, 73, 20, 73, 74, 61, 74, 65, 20, 40, 20, (...) 
5420:000 | DONE dir | em 16 16 |        |             |                 3a 20 69 73 20 73 74 61  --  :   i s   s t a
5420:000 | DONE dir | em 16 16 |        |             |                 74 65 20 40 20 69 66 20  --  t e   @   i f  
5420:000 | DONE dir | em 16 16 |        |             |                 70 6f 73 74 70 6f 6e 65  --  p o s t p o n e
5420:000 | DONE dir | em 16 16 |        |             |                 20 5b 27 5d 20 70 6f 73  --    [ ' ]   p o s
5420:000 | DONE dir | em 16 16 |        |             |                 74 70 6f 6e 65 20 64 65  --  t p o n e   d e
5420:000 | DONE dir | em 16 16 |        |             |                 66 65 72 21 20 65 6c 73  --  f e r !   e l s
5420:000 | DONE dir | em 16 16 |        |             |                 65 20 27 20 64 65 66 65  --  e   '   d e f e
5420:000 | DONE dir | em 16 16 |        |             |                 72 21 20 74 68 65 6e 20  --  r !   t h e n  
5420:000 | DONE dir | em 16 16 |        |             |                 3b 20 69 6d 6d 65 64 69  --  ;   i m m e d i
5420:000 | DONE dir | em 16 16 |        |             |                 61 74 65 20              --  a t e  
5421:000 | DONE dir | em 16 16 | 006990 | (83 bytes)  |         .byte 3a, 20, 61, 63, 74, 69, 6f, 6e, 2d, 6f, 66, 20, 73, (...) 
5421:000 | DONE dir | em 16 16 |        |             |                 3a 20 61 63 74 69 6f 6e  --  :   a c t i o n
5421:000 | DONE dir | em 16 16 |        |             |                 2d 6f 66 20 73 74 61 74  --  - o f   s t a t
5421:000 | DONE dir | em 16 16 |        |             |                 65 20 40 20 69 66 20 70  --  e   @   i f   p
5421:000 | DONE dir | em 16 16 |        |             |                 6f 73 74 70 6f 6e 65 20  --  o s t p o n e  
5421:000 | DONE dir | em 16 16 |        |             |                 5b 27 5d 20 70 6f 73 74  --  [ ' ]   p o s t
5421:000 | DONE dir | em 16 16 |        |             |                 70 6f 6e 65 20 64 65 66  --  p o n e   d e f
5421:000 | DONE dir | em 16 16 |        |             |                 65 72 40 20 65 6c 73 65  --  e r @   e l s e
5421:000 | DONE dir | em 16 16 |        |             |                 20 27 20 64 65 66 65 72  --    '   d e f e r
5421:000 | DONE dir | em 16 16 |        |             |                 40 20 74 68 65 6e 20 3b  --  @   t h e n   ;
5421:000 | DONE dir | em 16 16 |        |             |                 20 69 6d 6d 65 64 69 61  --    i m m e d i a
5421:000 | DONE dir | em 16 16 |        |             |                 74 65 20                 --  t e  
5422:000 | DONE wsp | em 16 16 |        |             |
5423:000 | DONE cmt | em 16 16 |        |             |         ; Output and comment words
5424:000 | DONE dir | em 16 16 | 0069e3 | (37 bytes)  |         .byte 3a, 20, 28, 20, 5b, 63, 68, 61, 72, 5d, 20, 29, 20, (...) 
5424:000 | DONE dir | em 16 16 |        |             |                 3a 20 28 20 5b 63 68 61  --  :   (   [ c h a
5424:000 | DONE dir | em 16 16 |        |             |                 72 5d 20 29 20 70 61 72  --  r ]   )   p a r
5424:000 | DONE dir | em 16 16 |        |             |                 73 65 20 32 64 72 6f 70  --  s e   2 d r o p
5424:000 | DONE dir | em 16 16 |        |             |                 20 3b 20 69 6d 6d 65 64  --    ;   i m m e d
5424:000 | DONE dir | em 16 16 |        |             |                 69 61 74 65 20           --  i a t e  
5425:000 | DONE dir | em 16 16 | 006a08 | (37 bytes)  |         .byte 3a, 20, 2e, 28, 20, 5b, 63, 68, 61, 72, 5d, 20, 29, (...) 
5425:000 | DONE dir | em 16 16 |        |             |                 3a 20 2e 28 20 5b 63 68  --  :   . (   [ c h
5425:000 | DONE dir | em 16 16 |        |             |                 61 72 5d 20 29 20 70 61  --  a r ]   )   p a
5425:000 | DONE dir | em 16 16 |        |             |                 72 73 65 20 74 79 70 65  --  r s e   t y p e
5425:000 | DONE dir | em 16 16 |        |             |                 20 3b 20 69 6d 6d 65 64  --    ;   i m m e d
5425:000 | DONE dir | em 16 16 |        |             |                 69 61 74 65 20           --  i a t e  
5426:000 | DONE wsp | em 16 16 |        |             |
5427:000 | DONE cmt | em 16 16 |        |             |         ; High level math definitions. The should be moved to actual 65816 code
5428:000 | DONE cmt | em 16 16 |        |             |         ; for speed at some point. Note we use SM/REM instead of FM/MOD for most
5429:000 | DONE cmt | em 16 16 |        |             |         ; stuff
5430:000 | DONE dir | em 16 16 | 006a2d | (33 bytes)  |         .byte 3a, 20, 2f, 20, 3e, 72, 20, 73, 3e, 64, 20, 72, 3e, (...) 
5430:000 | DONE dir | em 16 16 |        |             |                 3a 20 2f 20 3e 72 20 73  --  :   /   > r   s
5430:000 | DONE dir | em 16 16 |        |             |                 3e 64 20 72 3e 20 73 6d  --  > d   r >   s m
5430:000 | DONE dir | em 16 16 |        |             |                 2f 72 65 6d 20 73 77 61  --  / r e m   s w a
5430:000 | DONE dir | em 16 16 |        |             |                 70 20 64 72 6f 70 20 3b  --  p   d r o p   ;
5430:000 | DONE dir | em 16 16 |        |             |                 20                       --   
5431:000 | DONE dir | em 16 16 | 006a4e | (26 bytes)  |         .byte 3a, 20, 2f, 6d, 6f, 64, 20, 3e, 72, 20, 73, 3e, 64, (...) 
5431:000 | DONE dir | em 16 16 |        |             |                 3a 20 2f 6d 6f 64 20 3e  --  :   / m o d   >
5431:000 | DONE dir | em 16 16 |        |             |                 72 20 73 3e 64 20 72 3e  --  r   s > d   r >
5431:000 | DONE dir | em 16 16 |        |             |                 20 73 6d 2f 72 65 6d 20  --    s m / r e m  
5431:000 | DONE dir | em 16 16 |        |             |                 3b 20                    --  ;  
5432:000 | DONE dir | em 16 16 | 006a68 | (33 bytes)  |         .byte 3a, 20, 2a, 2f, 20, 3e, 72, 20, 6d, 2a, 20, 72, 3e, (...) 
5432:000 | DONE dir | em 16 16 |        |             |                 3a 20 2a 2f 20 3e 72 20  --  :   * /   > r  
5432:000 | DONE dir | em 16 16 |        |             |                 6d 2a 20 72 3e 20 73 6d  --  m *   r >   s m
5432:000 | DONE dir | em 16 16 |        |             |                 2f 72 65 6d 20 73 77 61  --  / r e m   s w a
5432:000 | DONE dir | em 16 16 |        |             |                 70 20 64 72 6f 70 20 3b  --  p   d r o p   ;
5432:000 | DONE dir | em 16 16 |        |             |                 20                       --   
5433:000 | DONE dir | em 16 16 | 006a89 | (26 bytes)  |         .byte 3a, 20, 2a, 2f, 6d, 6f, 64, 20, 3e, 72, 20, 6d, 2a, (...) 
5433:000 | DONE dir | em 16 16 |        |             |                 3a 20 2a 2f 6d 6f 64 20  --  :   * / m o d  
5433:000 | DONE dir | em 16 16 |        |             |                 3e 72 20 6d 2a 20 72 3e  --  > r   m *   r >
5433:000 | DONE dir | em 16 16 |        |             |                 20 73 6d 2f 72 65 6d 20  --    s m / r e m  
5433:000 | DONE dir | em 16 16 |        |             |                 3b 20                    --  ;  
5434:000 | DONE wsp | em 16 16 |        |             |
5435:000 | DONE cmt | em 16 16 |        |             |         ; Output definitions. Since these usually involve the user, and humans
5436:000 | DONE cmt | em 16 16 |        |             |         ; are slow, these can stay high-level for the moment. Based on
5437:000 | DONE cmt | em 16 16 |        |             |         ; https://github.com/philburk/pforth/blob/master/fth/numberio.fth
5438:000 | DONE wsp | em 16 16 |        |             |
5439:000 | DONE cmt | em 16 16 |        |             |         ; TODO becaues of Tinker bug, ".byte" is recognized as the directive
5440:000 | DONE cmt | em 16 16 |        |             |         ; even though it is in a string. Until that is fixed, we start with the
5441:000 | DONE cmt | em 16 16 |        |             |         ; ASCII code for a dot
5442:000 | DONE dir | em 16 16 | 006aa3 | (34 bytes)  |         .byte 3a, 20, &46, 62, 79, 74, 65, 20, 30, 20, 3c, 23, 20 (...) 
5442:000 | DONE dir | em 16 16 |        |             |                 3a 20 2e 62 79 74 65 20  --  :   . b y t e  
5442:000 | DONE dir | em 16 16 |        |             |                 30 20 3c 23 20 23 20 23  --  0   < #   #   #
5442:000 | DONE dir | em 16 16 |        |             |                 73 20 23 3e 20 74 79 70  --  s   # >   t y p
5442:000 | DONE dir | em 16 16 |        |             |                 65 20 73 70 61 63 65 20  --  e   s p a c e  
5442:000 | DONE dir | em 16 16 |        |             |                 3b 20                    --  ;  
5443:000 | DONE dir | em 16 16 | 006ac5 | (29 bytes)  |         .byte 3a, 20, 75, 2e, 20, 30, 20, 3c, 23, 20, 23, 73, 20, (...) 
5443:000 | DONE dir | em 16 16 |        |             |                 3a 20 75 2e 20 30 20 3c  --  :   u .   0   <
5443:000 | DONE dir | em 16 16 |        |             |                 23 20 23 73 20 23 3e 20  --  #   # s   # >  
5443:000 | DONE dir | em 16 16 |        |             |                 74 79 70 65 20 73 70 61  --  t y p e   s p a
5443:000 | DONE dir | em 16 16 |        |             |                 63 65 20 3b 20           --  c e   ;  
5444:000 | DONE dir | em 16 16 | 006ae2 | (44 bytes)  |         .byte 3a, 20, 75, 2e, 72, 20, 3e, 72, 20, 30, 20, 3c, 23, (...) 
5444:000 | DONE dir | em 16 16 |        |             |                 3a 20 75 2e 72 20 3e 72  --  :   u . r   > r
5444:000 | DONE dir | em 16 16 |        |             |                 20 30 20 3c 23 20 23 73  --    0   < #   # s
5444:000 | DONE dir | em 16 16 |        |             |                 20 23 3e 20 72 3e 20 6f  --    # >   r >   o
5444:000 | DONE dir | em 16 16 |        |             |                 76 65 72 20 2d 20 73 70  --  v e r   -   s p
5444:000 | DONE dir | em 16 16 |        |             |                 61 63 65 73 20 74 79 70  --  a c e s   t y p
5444:000 | DONE dir | em 16 16 |        |             |                 65 20 3b 20              --  e   ;  
5445:000 | DONE dir | em 16 16 | 006b0e | (60 bytes)  |         .byte 3a, 20, 2e, 72, 20, 3e, 72, 20, 64, 75, 70, 20, 61, (...) 
5445:000 | DONE dir | em 16 16 |        |             |                 3a 20 2e 72 20 3e 72 20  --  :   . r   > r  
5445:000 | DONE dir | em 16 16 |        |             |                 64 75 70 20 61 62 73 20  --  d u p   a b s  
5445:000 | DONE dir | em 16 16 |        |             |                 30 20 3c 23 20 23 73 20  --  0   < #   # s  
5445:000 | DONE dir | em 16 16 |        |             |                 72 6f 74 20 73 69 67 6e  --  r o t   s i g n
5445:000 | DONE dir | em 16 16 |        |             |                 20 23 3e 20 72 3e 20 6f  --    # >   r >   o
5445:000 | DONE dir | em 16 16 |        |             |                 76 65 72 20 2d 20 73 70  --  v e r   -   s p
5445:000 | DONE dir | em 16 16 |        |             |                 61 63 65 73 20 74 79 70  --  a c e s   t y p
5445:000 | DONE dir | em 16 16 |        |             |                 65 20 3b 20              --  e   ;  
5446:000 | DONE dir | em 16 16 | 006b4a | (28 bytes)  |         .byte 3a, 20, 75, 64, 2e, 20, 3c, 23, 20, 23, 73, 20, 23, (...) 
5446:000 | DONE dir | em 16 16 |        |             |                 3a 20 75 64 2e 20 3c 23  --  :   u d .   < #
5446:000 | DONE dir | em 16 16 |        |             |                 20 23 73 20 23 3e 20 74  --    # s   # >   t
5446:000 | DONE dir | em 16 16 |        |             |                 79 70 65 20 73 70 61 63  --  y p e   s p a c
5446:000 | DONE dir | em 16 16 |        |             |                 65 20 3b 20              --  e   ;  
5447:000 | DONE dir | em 16 16 | 006b66 | (43 bytes)  |         .byte 3a, 20, 75, 64, 2e, 72, 20, 3e, 72, 20, 3c, 23, 20, (...) 
5447:000 | DONE dir | em 16 16 |        |             |                 3a 20 75 64 2e 72 20 3e  --  :   u d . r   >
5447:000 | DONE dir | em 16 16 |        |             |                 72 20 3c 23 20 23 73 20  --  r   < #   # s  
5447:000 | DONE dir | em 16 16 |        |             |                 23 3e 20 72 3e 20 6f 76  --  # >   r >   o v
5447:000 | DONE dir | em 16 16 |        |             |                 65 72 20 2d 20 73 70 61  --  e r   -   s p a
5447:000 | DONE dir | em 16 16 |        |             |                 63 65 73 20 74 79 70 65  --  c e s   t y p e
5447:000 | DONE dir | em 16 16 |        |             |                 20 3b 20                 --    ;  
5448:000 | DONE dir | em 16 16 | 006b91 | (46 bytes)  |         .byte 3a, 20, 64, 2e, 20, 74, 75, 63, 6b, 20, 64, 61, 62, (...) 
5448:000 | DONE dir | em 16 16 |        |             |                 3a 20 64 2e 20 74 75 63  --  :   d .   t u c
5448:000 | DONE dir | em 16 16 |        |             |                 6b 20 64 61 62 73 20 3c  --  k   d a b s   <
5448:000 | DONE dir | em 16 16 |        |             |                 23 20 23 73 20 72 6f 74  --  #   # s   r o t
5448:000 | DONE dir | em 16 16 |        |             |                 20 73 69 67 6e 20 23 3e  --    s i g n   # >
5448:000 | DONE dir | em 16 16 |        |             |                 20 74 79 70 65 20 73 70  --    t y p e   s p
5448:000 | DONE dir | em 16 16 |        |             |                 61 63 65 20 3b 20        --  a c e   ;  
5449:000 | DONE dir | em 16 16 | 006bbf | (61 bytes)  |         .byte 3a, 20, 64, 2e, 72, 20, 3e, 72, 20, 74, 75, 63, 6b, (...) 
5449:000 | DONE dir | em 16 16 |        |             |                 3a 20 64 2e 72 20 3e 72  --  :   d . r   > r
5449:000 | DONE dir | em 16 16 |        |             |                 20 74 75 63 6b 20 64 61  --    t u c k   d a
5449:000 | DONE dir | em 16 16 |        |             |                 62 73 20 3c 23 20 23 73  --  b s   < #   # s
5449:000 | DONE dir | em 16 16 |        |             |                 20 72 6f 74 20 73 69 67  --    r o t   s i g
5449:000 | DONE dir | em 16 16 |        |             |                 6e 20 23 3e 20 72 3e 20  --  n   # >   r >  
5449:000 | DONE dir | em 16 16 |        |             |                 6f 76 65 72 20 2d 20 73  --  o v e r   -   s
5449:000 | DONE dir | em 16 16 |        |             |                 70 61 63 65 73 20 74 79  --  p a c e s   t y
5449:000 | DONE dir | em 16 16 |        |             |                 70 65 20 3b 20           --  p e   ;  
5450:000 | DONE cmt | em 16 16 |        |             | ;       .byte ": . dup abs 0 <# #s rot sign #> type space ; "
5451:000 | DONE wsp | em 16 16 |        |             |
5452:000 | DONE cmt | em 16 16 |        |             |         ; LOOP constructs. See discussion at
5453:000 | DONE cmt | em 16 16 |        |             | 	; https://blogs.msdn.microsoft.com/ashleyf/2011/02/06/loopty-do-i-loop/
5454:000 | DONE cmt | em 16 16 |        |             | 	; .byte ": do postpone (do) here ; immediate compile-only "
5455:000 | DONE cmt | em 16 16 |        |             | 	; .byte ": +loop postpone (+loop) , postpone unloop ; immediate compile-only "
5456:000 | DONE cmt | em 16 16 |        |             | 	; .byte ": loop postpone 1 postpone (+loop) , postpone unloop ; immediate compile-only "
5457:000 | DONE cmt | em 16 16 |        |             |         ; .byte ": leave postpone branch here swap 0 , ; immediate compile-only "
5458:000 | DONE wsp | em 16 16 |        |             |
5459:000 | DONE cmt | em 16 16 |        |             |         ; .S was realized in assembler form during construction but is replaced
5460:000 | DONE cmt | em 16 16 |        |             |         ; by a high-level word because it is easier to modify
5461:000 | DONE cmt | em 16 16 |        |             |         ; TODO finish coding or put
5462:000 | DONE cmt | em 16 16 |        |             |         ; .byte ": .s .", &34, " <", &34, " depth u. .", &34, " >", &34, ' '
5463:000 | DONE cmt | em 16 16 |        |             |         ; .byte " 0 <# # #s #> type ; "
5464:000 | DONE wsp | em 16 16 |        |             |
5465:000 | DONE cmt | em 16 16 |        |             |         ; SEE is a longish word we'll want to modify for a while until we are
5466:000 | DONE cmt | em 16 16 |        |             |         ; happy with the format
5467:000 | DONE dir | em 16 16 | 006bfc | (55 bytes)  |         .byte 3a, 20, 73, 65, 65, 20, 70, 61, 72, 73, 65, 2d, 6e, (...) 
5467:000 | DONE dir | em 16 16 |        |             |                 3a 20 73 65 65 20 70 61  --  :   s e e   p a
5467:000 | DONE dir | em 16 16 |        |             |                 72 73 65 2d 6e 61 6d 65  --  r s e - n a m e
5467:000 | DONE dir | em 16 16 |        |             |                 20 66 69 6e 64 2d 6e 61  --    f i n d - n a
5467:000 | DONE dir | em 16 16 |        |             |                 6d 65 20 64 75 70 20 30  --  m e   d u p   0
5467:000 | DONE dir | em 16 16 |        |             |                 3d 20 61 62 6f 72 74 22  --  =   a b o r t "
5467:000 | DONE dir | em 16 16 |        |             |                 20 4e 6f 20 73 75 63 68  --    N o   s u c h
5467:000 | DONE dir | em 16 16 |        |             |                 20 6e 61 6d 65 22 20     --    n a m e "  
5468:000 | DONE dir | em 16 16 | 006c33 | (38 bytes)  |         .byte 62, 61, 73, 65, 20, 40, 20, 3e, 72, 20, 68, 65, 78, (...) 
5468:000 | DONE dir | em 16 16 |        |             |                 62 61 73 65 20 40 20 3e  --  b a s e   @   >
5468:000 | DONE dir | em 16 16 |        |             |                 72 20 68 65 78 20 64 75  --  r   h e x   d u
5468:000 | DONE dir | em 16 16 |        |             |                 70 20 63 72 20 73 70 61  --  p   c r   s p a
5468:000 | DONE dir | em 16 16 |        |             |                 63 65 20 2e 22 20 6e 74  --  c e   . "   n t
5468:000 | DONE dir | em 16 16 |        |             |                 3a 20 22 20 2e 20        --  :   "   .  
5469:000 | DONE dir | em 16 16 | 006c59 | (27 bytes)  |         .byte 64, 75, 70, 20, 34, 20, 2b, 20, 40, 20, 73, 70, 61, (...) 
5469:000 | DONE dir | em 16 16 |        |             |                 64 75 70 20 34 20 2b 20  --  d u p   4   +  
5469:000 | DONE dir | em 16 16 |        |             |                 40 20 73 70 61 63 65 20  --  @   s p a c e  
5469:000 | DONE dir | em 16 16 |        |             |                 2e 22 20 78 74 3a 20 22  --  . "   x t :   "
5469:000 | DONE dir | em 16 16 |        |             |                 20 2e 20                 --    .  
5470:000 | DONE dir | em 16 16 | 006c74 | (37 bytes)  |         .byte 64, 75, 70, 20, 31, 2b, 20, 63, 40, 20, 31, 20, 61, (...) 
5470:000 | DONE dir | em 16 16 |        |             |                 64 75 70 20 31 2b 20 63  --  d u p   1 +   c
5470:000 | DONE dir | em 16 16 |        |             |                 40 20 31 20 61 6e 64 20  --  @   1   a n d  
5470:000 | DONE dir | em 16 16 |        |             |                 69 66 20 73 70 61 63 65  --  i f   s p a c e
5470:000 | DONE dir | em 16 16 |        |             |                 20 2e 22 20 4e 43 22 20  --    . "   N C "  
5470:000 | DONE dir | em 16 16 |        |             |                 74 68 65 6e 20           --  t h e n  
5471:000 | DONE dir | em 16 16 | 006c99 | (37 bytes)  |         .byte 64, 75, 70, 20, 31, 2b, 20, 63, 40, 20, 32, 20, 61, (...) 
5471:000 | DONE dir | em 16 16 |        |             |                 64 75 70 20 31 2b 20 63  --  d u p   1 +   c
5471:000 | DONE dir | em 16 16 |        |             |                 40 20 32 20 61 6e 64 20  --  @   2   a n d  
5471:000 | DONE dir | em 16 16 |        |             |                 69 66 20 73 70 61 63 65  --  i f   s p a c e
5471:000 | DONE dir | em 16 16 |        |             |                 20 2e 22 20 49 4d 22 20  --    . "   I M "  
5471:000 | DONE dir | em 16 16 |        |             |                 74 68 65 6e 20           --  t h e n  
5472:000 | DONE dir | em 16 16 | 006cbe | (37 bytes)  |         .byte 64, 75, 70, 20, 31, 2b, 20, 63, 40, 20, 34, 20, 61, (...) 
5472:000 | DONE dir | em 16 16 |        |             |                 64 75 70 20 31 2b 20 63  --  d u p   1 +   c
5472:000 | DONE dir | em 16 16 |        |             |                 40 20 34 20 61 6e 64 20  --  @   4   a n d  
5472:000 | DONE dir | em 16 16 |        |             |                 69 66 20 73 70 61 63 65  --  i f   s p a c e
5472:000 | DONE dir | em 16 16 |        |             |                 20 2e 22 20 43 4f 22 20  --    . "   C O "  
5472:000 | DONE dir | em 16 16 |        |             |                 74 68 65 6e 20           --  t h e n  
5473:000 | DONE dir | em 16 16 | 006ce3 | (57 bytes)  |         .byte 64, 75, 70, 20, 63, 72, 20, 73, 70, 61, 63, 65, 20, (...) 
5473:000 | DONE dir | em 16 16 |        |             |                 64 75 70 20 63 72 20 73  --  d u p   c r   s
5473:000 | DONE dir | em 16 16 |        |             |                 70 61 63 65 20 2e 22 20  --  p a c e   . "  
5473:000 | DONE dir | em 16 16 |        |             |                 73 69 7a 65 20 28 64 65  --  s i z e   ( d e
5473:000 | DONE dir | em 16 16 |        |             |                 63 69 6d 61 6c 29 3a 20  --  c i m a l ) :  
5473:000 | DONE dir | em 16 16 |        |             |                 22 20 64 65 63 69 6d 61  --  "   d e c i m a
5473:000 | DONE dir | em 16 16 |        |             |                 6c 20 77 6f 72 64 73 69  --  l   w o r d s i
5473:000 | DONE dir | em 16 16 |        |             |                 7a 65 20 64 75 70 20 2e  --  z e   d u p   .
5473:000 | DONE dir | em 16 16 |        |             |                 20                       --   
5474:000 | DONE dir | em 16 16 | 006d1c | (36 bytes)  |         .byte 73, 77, 61, 70, 20, 6e, 61, 6d, 65, 3e, 69, 6e, 74, (...) 
5474:000 | DONE dir | em 16 16 |        |             |                 73 77 61 70 20 6e 61 6d  --  s w a p   n a m
5474:000 | DONE dir | em 16 16 |        |             |                 65 3e 69 6e 74 20 73 77  --  e > i n t   s w
5474:000 | DONE dir | em 16 16 |        |             |                 61 70 20 64 75 6d 70 20  --  a p   d u m p  
5474:000 | DONE dir | em 16 16 |        |             |                 72 3e 20 62 61 73 65 20  --  r >   b a s e  
5474:000 | DONE dir | em 16 16 |        |             |                 21 20 3b 20              --  !   ;  
5475:000 | DONE wsp | em 16 16 |        |             |
5476:000 | DONE cmt | em 16 16 |        |             |         ; Splash strings. We leave these as high-level words because they are
5477:000 | DONE cmt | em 16 16 |        |             |         ; generated at the end of the boot process and signal that the other
5478:000 | DONE cmt | em 16 16 |        |             |         ; high-level definitions worked (or at least didn't crash)
5479:000 | DONE dir | em 16 16 | 006d40 | (35 bytes)  |         .byte 2e, 28, 20, 4c, 69, 61, 72, 61, 20, 46, 6f, 72, 74, (...) 
5479:000 | DONE dir | em 16 16 |        |             |                 2e 28 20 4c 69 61 72 61  --  . (   L i a r a
5479:000 | DONE dir | em 16 16 |        |             |                 20 46 6f 72 74 68 20 66  --    F o r t h   f
5479:000 | DONE dir | em 16 16 |        |             |                 6f 72 20 74 68 65 20 57  --  o r   t h e   W
5479:000 | DONE dir | em 16 16 |        |             |                 36 35 43 32 36 35 53 58  --  6 5 C 2 6 5 S X
5479:000 | DONE dir | em 16 16 |        |             |                 42 20 29                 --  B   )
5480:000 | DONE dir | em 16 16 | 006d63 | (38 bytes)  |         .byte 63, 72, 20, 2e, 28, 20, 56, 65, 72, 73, 69, 6f, 6e, (...) 
5480:000 | DONE dir | em 16 16 |        |             |                 63 72 20 2e 28 20 56 65  --  c r   . (   V e
5480:000 | DONE dir | em 16 16 |        |             |                 72 73 69 6f 6e 20 50 52  --  r s i o n   P R
5480:000 | DONE dir | em 16 16 |        |             |                 45 2d 41 4c 50 48 41 20  --  E - A L P H A  
5480:000 | DONE dir | em 16 16 |        |             |                 35 2e 20 4d 61 72 63 68  --  5 .   M a r c h
5480:000 | DONE dir | em 16 16 |        |             |                 20 32 30 31 37 29        --    2 0 1 7 )
5481:000 | DONE dir | em 16 16 | 006d89 | (51 bytes)  |         .byte 63, 72, 20, 2e, 28, 20, 53, 63, 6f, 74, 20, 57, 2e, (...) 
5481:000 | DONE dir | em 16 16 |        |             |                 63 72 20 2e 28 20 53 63  --  c r   . (   S c
5481:000 | DONE dir | em 16 16 |        |             |                 6f 74 20 57 2e 20 53 74  --  o t   W .   S t
5481:000 | DONE dir | em 16 16 |        |             |                 65 76 65 6e 73 6f 6e 20  --  e v e n s o n  
5481:000 | DONE dir | em 16 16 |        |             |                 3c 73 63 6f 74 2e 73 74  --  < s c o t . s t
5481:000 | DONE dir | em 16 16 |        |             |                 65 76 65 6e 73 6f 6e 40  --  e v e n s o n @
5481:000 | DONE dir | em 16 16 |        |             |                 67 6d 61 69 6c 2e 63 6f  --  g m a i l . c o
5481:000 | DONE dir | em 16 16 |        |             |                 6d 3e 29                 --  m > )
5482:000 | DONE dir | em 16 16 | 006dbc | (52 bytes)  |         .byte 63, 72, 20, 2e, 28, 20, 4c, 69, 61, 72, 61, 20, 46, (...) 
5482:000 | DONE dir | em 16 16 |        |             |                 63 72 20 2e 28 20 4c 69  --  c r   . (   L i
5482:000 | DONE dir | em 16 16 |        |             |                 61 72 61 20 46 6f 72 74  --  a r a   F o r t
5482:000 | DONE dir | em 16 16 |        |             |                 68 20 63 6f 6d 65 73 20  --  h   c o m e s  
5482:000 | DONE dir | em 16 16 |        |             |                 77 69 74 68 20 61 62 73  --  w i t h   a b s
5482:000 | DONE dir | em 16 16 |        |             |                 6f 6c 75 74 65 6c 79 20  --  o l u t e l y  
5482:000 | DONE dir | em 16 16 |        |             |                 4e 4f 20 57 41 52 52 41  --  N O   W A R R A
5482:000 | DONE dir | em 16 16 |        |             |                 4e 54 59 29              --  N T Y )
5483:000 | DONE dir | em 16 16 | 006df0 | (28 bytes)  |         .byte 63, 72, 20, 2e, 28, 20, 54, 79, 70, 65, 20, 27, 62, (...) 
5483:000 | DONE dir | em 16 16 |        |             |                 63 72 20 2e 28 20 54 79  --  c r   . (   T y
5483:000 | DONE dir | em 16 16 |        |             |                 70 65 20 27 62 79 65 27  --  p e   ' b y e '
5483:000 | DONE dir | em 16 16 |        |             |                 20 74 6f 20 65 78 69 74  --    t o   e x i t
5483:000 | DONE dir | em 16 16 |        |             |                 29 20 63 72              --  )   c r
5484:000 | DONE lbl | em 16 16 | 006e0c |             | hi-end                               
5485:000 | DONE wsp | em 16 16 |        |             |
5486:000 | DONE wsp | em 16 16 |        |             |
5487:000 | DONE wsp | em 16 16 |        |             |
5488:000 | DONE cmt | em 16 16 |        |             | ; ===================================================================
5489:000 | DONE cmt | em 16 16 |        |             | ; BOTTOM INCLUDES
5490:000 | DONE wsp | em 16 16 |        |             |
5491:000 | DONE cmt | em 16 16 |        |             | ; List of Strings for Liara Forth for the W65C265SXB
5491:001 | DONE cmt | em 16 16 |        |             | ; Scot W. Stevenson <scot.stevenson@gmail.com>
5491:002 | DONE cmt | em 16 16 |        |             | ; First version: 01. Apr 2016
5491:003 | DONE cmt | em 16 16 |        |             | ; This version:  04. Mar 2017
5491:004 | DONE wsp | em 16 16 |        |             |
5491:005 | DONE cmt | em 16 16 |        |             | ; This file is included by liaraforth.tasm
5491:006 | DONE wsp | em 16 16 |        |             |
5491:007 | DONE cmt | em 16 16 |        |             | ; ===================================================================
5491:008 | DONE cmt | em 16 16 |        |             | ; GENERAL
5491:009 | DONE wsp | em 16 16 |        |             |
5491:010 | DONE cmt | em 16 16 |        |             | ; All general strings must be zero-terminated, names start with "s_"
5491:011 | DONE cmt | em 16 16 |        |             | ; TODO see if "ok" needs trailing space. The printstring routine adds the EOL
5491:012 | DONE cmt | em 16 16 |        |             | ; character
5491:013 | DONE wsp | em 16 16 |        |             |
5491:014 | DONE lbl | em 16 16 | 006e0c |             | s_ok                                 
5491:015 | DONE dir | em 16 16 | 006e0c | (4 bytes)   |         .byte 20, 6f, 6b, 0          note space at beginning
5491:015 | DONE dir | em 16 16 |        |             |                 20 6f 6b 00              --    o k .
5491:016 | DONE lbl | em 16 16 | 006e10 |             | s_compiled                           
5491:017 | DONE dir | em 16 16 | 006e10 | (10 bytes)  |         .byte 20, 63, 6f, 6d, 70, 69, 6c, 65, 64, 0 
5491:017 | DONE dir | em 16 16 |        |             |                 20 63 6f 6d 70 69 6c 65  --    c o m p i l e
5491:017 | DONE dir | em 16 16 |        |             |                 64 00                    --  d .
5491:018 | DONE wsp | em 16 16 |        |             |
5491:019 | DONE wsp | em 16 16 |        |             |
5491:020 | DONE cmt | em 16 16 |        |             | ; ===================================================================
5491:021 | DONE cmt | em 16 16 |        |             | ; ERROR STRINGS
5491:022 | DONE wsp | em 16 16 |        |             |
5491:023 | DONE cmt | em 16 16 |        |             | ; All error strings must be zero-terminated, names start with "es_"
5491:024 | DONE wsp | em 16 16 |        |             |
5491:025 | DONE lbl | em 16 16 | 006e1a |             | es_allot                             
5491:026 | DONE dir | em 16 16 | 006e1a | (20 bytes)  |         .byte 41, 4c, 4c, 4f, 54, 20, 6f, 75, 74, 20, 6f, 66, 20, (...) 
5491:026 | DONE dir | em 16 16 |        |             |                 41 4c 4c 4f 54 20 6f 75  --  A L L O T   o u
5491:026 | DONE dir | em 16 16 |        |             |                 74 20 6f 66 20 62 6f 75  --  t   o f   b o u
5491:026 | DONE dir | em 16 16 |        |             |                 6e 64 73 00              --  n d s .
5491:027 | DONE lbl | em 16 16 | 006e2e |             | es_componly                          
5491:028 | DONE dir | em 16 16 | 006e2e | (33 bytes)  |         .byte 49, 6e, 74, 65, 72, 70, 72, 65, 74, 69, 6e, 67, 20, (...) 
5491:028 | DONE dir | em 16 16 |        |             |                 49 6e 74 65 72 70 72 65  --  I n t e r p r e
5491:028 | DONE dir | em 16 16 |        |             |                 74 69 6e 67 20 61 20 63  --  t i n g   a   c
5491:028 | DONE dir | em 16 16 |        |             |                 6f 6d 70 69 6c 65 2d 6f  --  o m p i l e - o
5491:028 | DONE dir | em 16 16 |        |             |                 6e 6c 79 20 77 6f 72 64  --  n l y   w o r d
5491:028 | DONE dir | em 16 16 |        |             |                 00                       --  .
5491:029 | DONE lbl | em 16 16 | 006e4f |             | es_defer                             
5491:030 | DONE dir | em 16 16 | 006e4f | (29 bytes)  |         .byte 44, 45, 46, 45, 52, 65, 64, 20, 77, 6f, 72, 64, 20, (...) 
5491:030 | DONE dir | em 16 16 |        |             |                 44 45 46 45 52 65 64 20  --  D E F E R e d  
5491:030 | DONE dir | em 16 16 |        |             |                 77 6f 72 64 20 6e 6f 74  --  w o r d   n o t
5491:030 | DONE dir | em 16 16 |        |             |                 20 64 65 66 69 6e 65 64  --    d e f i n e d
5491:030 | DONE dir | em 16 16 |        |             |                 20 79 65 74 00           --    y e t .
5491:031 | DONE lbl | em 16 16 | 006e6c |             | es_divzero                           
5491:032 | DONE dir | em 16 16 | 006e6c | (17 bytes)  |         .byte 44, 69, 76, 69, 73, 69, 6f, 6e, 20, 62, 79, 20, 7a, (...) 
5491:032 | DONE dir | em 16 16 |        |             |                 44 69 76 69 73 69 6f 6e  --  D i v i s i o n
5491:032 | DONE dir | em 16 16 |        |             |                 20 62 79 20 7a 65 72 6f  --    b y   z e r o
5491:032 | DONE dir | em 16 16 |        |             |                 00                       --  .
5491:033 | DONE lbl | em 16 16 | 006e7d |             | es_error                             
5491:034 | DONE dir | em 16 16 | 006e7d | (12 bytes)  |         .byte 3e, 3e, 3e, 45, 72, 72, 6f, 72, 3c, 3c, 3c, 0 
5491:034 | DONE dir | em 16 16 |        |             |                 3e 3e 3e 45 72 72 6f 72  --  > > > E r r o r
5491:034 | DONE dir | em 16 16 |        |             |                 3c 3c 3c 00              --  < < < .
5491:035 | DONE lbl | em 16 16 | 006e89 |             | es_intonly                           
5491:036 | DONE dir | em 16 16 | 006e89 | (22 bytes)  |         .byte 4e, 6f, 74, 20, 69, 6e, 20, 69, 6e, 74, 65, 72, 70, (...) 
5491:036 | DONE dir | em 16 16 |        |             |                 4e 6f 74 20 69 6e 20 69  --  N o t   i n   i
5491:036 | DONE dir | em 16 16 |        |             |                 6e 74 65 72 70 72 65 74  --  n t e r p r e t
5491:036 | DONE dir | em 16 16 |        |             |                 20 6d 6f 64 65 00        --    m o d e .
5491:037 | DONE lbl | em 16 16 | 006e9f |             | es_noname                            
5491:038 | DONE dir | em 16 16 | 006e9f | (16 bytes)  |         .byte 50, 61, 72, 73, 69, 6e, 67, 20, 66, 61, 69, 6c, 75, (...) 
5491:038 | DONE dir | em 16 16 |        |             |                 50 61 72 73 69 6e 67 20  --  P a r s i n g  
5491:038 | DONE dir | em 16 16 |        |             |                 66 61 69 6c 75 72 65 00  --  f a i l u r e .
5491:038 | DONE dir | em 16 16 |        |             |                                          -- 
5491:039 | DONE lbl | em 16 16 | 006eaf |             | es_radix                             
5491:040 | DONE dir | em 16 16 | 006eaf | (23 bytes)  |         .byte 44, 69, 67, 69, 74, 20, 6c, 61, 72, 67, 65, 72, 20, (...) 
5491:040 | DONE dir | em 16 16 |        |             |                 44 69 67 69 74 20 6c 61  --  D i g i t   l a
5491:040 | DONE dir | em 16 16 |        |             |                 72 67 65 72 20 74 68 61  --  r g e r   t h a
5491:040 | DONE dir | em 16 16 |        |             |                 6e 20 62 61 73 65 00     --  n   b a s e .
5491:041 | DONE lbl | em 16 16 | 006ec6 |             | es_refill1                           
5491:042 | DONE dir | em 16 16 | 006ec6 | (46 bytes)  |         .byte 51, 55, 49, 54, 20, 63, 6f, 75, 6c, 64, 20, 6e, 6f, (...) 
5491:042 | DONE dir | em 16 16 |        |             |                 51 55 49 54 20 63 6f 75  --  Q U I T   c o u
5491:042 | DONE dir | em 16 16 |        |             |                 6c 64 20 6e 6f 74 20 67  --  l d   n o t   g
5491:042 | DONE dir | em 16 16 |        |             |                 65 74 20 69 6e 70 75 74  --  e t   i n p u t
5491:042 | DONE dir | em 16 16 |        |             |                 20 28 52 45 46 49 4c 4c  --    ( R E F I L L
5491:042 | DONE dir | em 16 16 |        |             |                 20 72 65 74 75 72 6e 65  --    r e t u r n e
5491:042 | DONE dir | em 16 16 |        |             |                 64 20 2d 31 29 00        --  d   - 1 ) .
5491:043 | DONE lbl | em 16 16 | 006ef4 |             | es_refill2                           
5491:044 | DONE dir | em 16 16 | 006ef4 | (32 bytes)  |         .byte 49, 6c, 6c, 65, 67, 61, 6c, 20, 53, 4f, 55, 52, 43, (...) 
5491:044 | DONE dir | em 16 16 |        |             |                 49 6c 6c 65 67 61 6c 20  --  I l l e g a l  
5491:044 | DONE dir | em 16 16 |        |             |                 53 4f 55 52 43 45 2d 49  --  S O U R C E - I
5491:044 | DONE dir | em 16 16 |        |             |                 44 20 64 75 72 69 6e 67  --  D   d u r i n g
5491:044 | DONE dir | em 16 16 |        |             |                 20 52 45 46 49 4c 4c 00  --    R E F I L L .
5491:044 | DONE dir | em 16 16 |        |             |                                          -- 
5491:045 | DONE lbl | em 16 16 | 006f14 |             | es_state                             
5491:046 | DONE dir | em 16 16 | 006f14 | (24 bytes)  |         .byte 41, 6c, 72, 65, 61, 64, 79, 20, 69, 6e, 20, 63, 6f, (...) 
5491:046 | DONE dir | em 16 16 |        |             |                 41 6c 72 65 61 64 79 20  --  A l r e a d y  
5491:046 | DONE dir | em 16 16 |        |             |                 69 6e 20 63 6f 6d 70 69  --  i n   c o m p i
5491:046 | DONE dir | em 16 16 |        |             |                 6c 65 20 6d 6f 64 65 00  --  l e   m o d e .
5491:046 | DONE dir | em 16 16 |        |             |                                          -- 
5491:047 | DONE lbl | em 16 16 | 006f2c |             | es_underflow                         
5491:048 | DONE dir | em 16 16 | 006f2c | (16 bytes)  |         .byte 53, 74, 61, 63, 6b, 20, 75, 6e, 64, 65, 72, 66, 6c, (...) 
5491:048 | DONE dir | em 16 16 |        |             |                 53 74 61 63 6b 20 75 6e  --  S t a c k   u n
5491:048 | DONE dir | em 16 16 |        |             |                 64 65 72 66 6c 6f 77 00  --  d e r f l o w .
5491:048 | DONE dir | em 16 16 |        |             |                                          -- 
5491:049 | DONE lbl | em 16 16 | 006f3c |             | es_syntax                            
5491:050 | DONE dir | em 16 16 | 006f3c | (15 bytes)  |         .byte 55, 6e, 64, 65, 66, 69, 6e, 65, 64, 20, 77, 6f, 72, (...) 
5491:050 | DONE dir | em 16 16 |        |             |                 55 6e 64 65 66 69 6e 65  --  U n d e f i n e
5491:050 | DONE dir | em 16 16 |        |             |                 64 20 77 6f 72 64 00     --  d   w o r d .
5491:051 | DONE wsp | em 16 16 |        |             |
5491:052 | DONE wsp | em 16 16 |        |             |
5491:053 | DONE cmt | em 16 16 |        |             | ; ===================================================================
5491:054 | DONE cmt | em 16 16 |        |             | ; ANSI VT-100 SEQUENCES
5491:055 | DONE wsp | em 16 16 |        |             |
5491:056 | DONE lbl | em 16 16 | 006f4b |             | vt100_page                           
5491:057 | DONE dir | em 16 16 | 006f4b | (5 bytes)   |         .byte AscESC, 5b, 32, 4a, 0  clear screen
5491:057 | DONE dir | em 16 16 |        |             |                 1b 5b 32 4a 00           --  . [ 2 J .
5491:058 | DONE lbl | em 16 16 | 006f50 |             | vt100_home                           
5491:059 | DONE dir | em 16 16 | 006f50 | (4 bytes)   |         .byte AscESC, 5b, 48, 0      cursor home
5491:059 | DONE dir | em 16 16 |        |             |                 1b 5b 48 00              --  . [ H .
5491:060 | DONE wsp | em 16 16 |        |             |
5491:061 | DONE wsp | em 16 16 |        |             |
5491:062 | DONE cmt | em 16 16 |        |             | ; ===================================================================
5491:063 | DONE cmt | em 16 16 |        |             | ; TESTING STRINGS
5491:064 | DONE wsp | em 16 16 |        |             |
5491:065 | DONE cmt | em 16 16 |        |             | ; These strings are only used during testing and are removed as Liara Forth is
5491:066 | DONE cmt | em 16 16 |        |             | ; developed. All start with "tests_"
5491:067 | DONE wsp | em 16 16 |        |             |
5491:068 | DONE lbl | em 16 16 | 006f54 |             | tests_prev_cmd                       
5491:069 | DONE dir | em 16 16 | 006f54 | (19 bytes)  |         .byte 28, 70, 72, 65, 76, 69, 6f, 75, 73, 20, 63, 6f, 6d, (...) 
5491:069 | DONE dir | em 16 16 |        |             |                 28 70 72 65 76 69 6f 75  --  ( p r e v i o u
5491:069 | DONE dir | em 16 16 |        |             |                 73 20 63 6f 6d 6d 61 6e  --  s   c o m m a n
5491:069 | DONE dir | em 16 16 |        |             |                 64 29 00                 --  d ) .
5491:070 | DONE lbl | em 16 16 | 006f67 |             | tests_next_cmd                       
5491:071 | DONE dir | em 16 16 | 006f67 | (15 bytes)  |         .byte 28, 6e, 65, 78, 74, 20, 63, 6f, 6d, 6d, 61, 6e, 64, (...) 
5491:071 | DONE dir | em 16 16 |        |             |                 28 6e 65 78 74 20 63 6f  --  ( n e x t   c o
5491:071 | DONE dir | em 16 16 |        |             |                 6d 6d 61 6e 64 29 00     --  m m a n d ) .
5491:072 | DONE wsp | em 16 16 |        |             |
5491:073 | DONE wsp | em 16 16 |        |             |
5491:074 | DONE cmt | em 16 16 |        |             | ; ===================================================================
5491:075 | DONE cmt | em 16 16 |        |             | ; ALPHABET STRINGS
5491:076 | DONE wsp | em 16 16 |        |             |
5491:077 | DONE cmt | em 16 16 |        |             | ; Leave alphastr as the last entry in the source code to make it easier to
5491:078 | DONE cmt | em 16 16 |        |             | ; see where this section ends. This cannot be a zero-terminated string
5491:079 | DONE wsp | em 16 16 |        |             |
5491:080 | DONE lbl | em 16 16 | 006f76 |             | alphastring                          
5491:081 | DONE dir | em 16 16 | 006f76 | (35 bytes)  |         .byte 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 61, 62, 63, (...) 
5491:081 | DONE dir | em 16 16 |        |             |                 30 31 32 33 34 35 36 37  --  0 1 2 3 4 5 6 7
5491:081 | DONE dir | em 16 16 |        |             |                 38 39 61 62 63 64 65 66  --  8 9 a b c d e f
5491:081 | DONE dir | em 16 16 |        |             |                 67 68 69 6a 6b 6c 6d 6e  --  g h i j k l m n
5491:081 | DONE dir | em 16 16 |        |             |                 6f 70 71 72 73 74 75 76  --  o p q r s t u v
5491:081 | DONE dir | em 16 16 |        |             |                 77 79 7a                 --  w y z
5492:000 | DONE wsp | em 16 16 |        |             |
5493:000 | DONE wsp | em 16 16 |        |             |
5494:000 | DONE cmt | em 16 16 |        |             | ; ===================================================================
5495:000 | DONE cmt | em 16 16 |        |             | ; END
5496:000 | DONE dir | em 16 16 |        |             |         .end                         

MACROS:
        (none)

SYMBOL TABLE:
- abortq_done                 : 005431
- abortq_rt                   : 005427
- accept_bs                   : 0054a9
- accept_eol                  : 0054a1
- accept_loop                 : 005456
- accept_nonzero              : 005449
- adjust_z                    : 00560e
- allot_done                  : 005503
- allot_error                 : 0054f2
- allot_minus                 : 0054f8
- allot_real_gone             : 005505
- alphastring                 : 006f76
- ascbell                     : 000007
- ascbs                       : 000008
- asccc                       : 000003
- asccn                       : 00000e
- asccp                       : 000010
- asccr                       : 00000d
- ascdel                      : 00007f
- ascesc                      : 00001b
- asclf                       : 00000a
- ascsp                       : 000020
- base                        : 000016
- branch_rt                   : 00553f
- brg_value                   : 00000b
- bsize                       : 000080
- buffer                      : 000200
- byte_to_ascii               : 0067aa
- char_got_char               : 00558c
- cib                         : 000008
- ciblen                      : 00000a
- cmpl_body                   : 006780
- cmpl_common                 : 006773
- cmpl_jump                   : 006770
- cmpl_subroutine             : 00676b
- cmpl_word                   : 006766
- co                          : 000004
- code0                       : 005000
- compile_as_code             : 0055df
- compile_as_jump             : 0055df
- cp                          : 000000
- cp-end                      : 004fff
- cp0                         : 000300
- create_got_name             : 005644
- defer_error                 : 0066ed
- doconst                     : 0066d6
- dodefer                     : 0066e4
- dodoes                      : 0066f3
- does_rt                     : 005768
- dots_done                   : 005229
- dots_loop                   : 00520f
- dots_not_empty              : 005209
- dovar                       : 006700
- dp                          : 000002
- dpage                       : 000000
- dq_case_done                : 0056e0
- dq_checkbase                : 0056e3
- dq_notdigit                 : 0056ea
- dq_success                  : 0056f5
- dsp0                        : 0000ff
- dtrailing_done              : 005311
- dtrailing_loop              : 005308
- dump_byte_loop              : 00578b
- dump_done                   : 0057a0
- dump_line_loop              : 005785
- emit_a                      : 0057b4
- equal_not                   : 00531e
- erase_done                  : 0057d0
- erase_loop                  : 0057c9
- error                       : 00678c
- es_allot                    : 006e1a
- es_componly                 : 006e2e
- es_defer                    : 006e4f
- es_divzero                  : 006e6c
- es_error                    : 006e7d
- es_intonly                  : 006e89
- es_noname                   : 006e9f
- es_radix                    : 006eaf
- es_refill1                  : 006ec6
- es_refill2                  : 006ef4
- es_state                    : 006f14
- es_syntax                   : 006f3c
- es_underflow                : 006f2c
- execute_ip                  : 00580a
- find-name_all_chars         : 005845
- find-name_char_nomatcnt_8   : 005841
- find-name_chars             : 005836
- find-name_done              : 00586b
- find-name_failure_16        : 005868
- find-name_loop              : 005821
- find-name_next_entry        : 00582a
- find-name_success           : 005862
- fmmod_1                     : 00588c
- fmmod_1_1                   : 005890
- fmmod_2                     : 0058bd
- fmmod_2_1                   : 0058c1
- get_chr                     : 005045
- get_chr_wait                : 00504a
- hashs_loop                  : 00529e
- have_chr                    : 005054
- havekey                     : 000012
- hi-end                      : 006e0c
- hi-start                    : 0067c5
- hw_acsr0                    : 00df70
- hw_acsr1                    : 00df72
- hw_acsr2                    : 00df74
- hw_acsr3                    : 00df76
- hw_artd0                    : 00df71
- hw_artd1                    : 00df73
- hw_artd2                    : 00df75
- hw_artd3                    : 00df77
- hw_bcr                      : 00df40
- hw_eier                     : 00df47
- hw_eifr                     : 00df45
- hw_pcs7                     : 00df27
- hw_pd0                      : 00df00
- hw_pd1                      : 00df01
- hw_pd2                      : 00df02
- hw_pd3                      : 00df03
- hw_pd4                      : 00df20
- hw_pd5                      : 00df21
- hw_pd6                      : 00df22
- hw_pd7                      : 00df23
- hw_pdd0                     : 00df04
- hw_pdd1                     : 00df05
- hw_pdd2                     : 00df06
- hw_pdd3                     : 00df07
- hw_pdd4                     : 00df24
- hw_pdd5                     : 00df25
- hw_pdd6                     : 00df26
- hw_sscr                     : 00df41
- hw_t0ch                     : 00df61
- hw_t0cl                     : 00df60
- hw_t1ch                     : 00df63
- hw_t1cl                     : 00df62
- hw_t2ch                     : 00df65
- hw_t2cl                     : 00df64
- hw_t3ch                     : 00df67
- hw_t3cl                     : 00df66
- hw_t4ch                     : 00df69
- hw_t4cl                     : 00df68
- hw_t5ch                     : 00df6b
- hw_t5cl                     : 00df6a
- hw_t6ch                     : 00df6d
- hw_t6cl                     : 00df6c
- hw_t7ch                     : 00df6f
- hw_t7cl                     : 00df6e
- hw_tcr                      : 00df42
- hw_ter                      : 00df43
- hw_tier                     : 00df46
- hw_tifr                     : 00df44
- hw_uier                     : 00df49
- hw_uifr                     : 00df48
- im                          : 000002
- input                       : 000010
- insrc                       : 000006
- interpret                   : 006707
- interpret_compile           : 006751
- interpret_got_name_token    : 00672b
- interpret_interpret         : 00674b
- interpret_line_done         : 00675f
- interpret_loop              : 006707
- literal_rt                  : 005942
- lshift_done                 : 00595e
- lshift_loop                 : 005958
- max_drop                    : 0059bb
- max_nip                     : 0059bd
- max_no_ov                   : 0059b9
- min_drop                    : 0059ce
- min_nip                     : 0059d0
- min_no_ov                   : 0059cc
- move_cmoveup                : 0059e1
- mstar_abs_nos               : 00596f
- mstar_umstar                : 005979
- nc                          : 000001
- nc_limit                    : 000000
- nibble_to_ascii             : 0067b3
- not-equal_equal             : 00510e
- nt_2drop                    : 00664e
- nt_2dup                     : 006376
- nt_2over                    : 006619
- nt_2swap                    : 006626
- nt_2variable                : 005f97
- nt_abort                    : 00608f
- nt_abortq                   : 006081
- nt_abs                      : 006382
- nt_accept                   : 0065c8
- nt_again                    : 0062e5
- nt_align                    : 005ec2
- nt_aligned                  : 005eb3
- nt_allot                    : 006321
- nt_and                      : 00646d
- nt_backslash                : 0065d6
- nt_base                     : 00619b
- nt_begin                    : 0062f2
- nt_bell                     : 005f25
- nt_bl                       : 006140
- nt_bounds                   : 006687
- nt_bracketchar              : 00620e
- nt_brackettick              : 006203
- nt_branch                   : 0062d7
- nt_bye                      : 005e9c
- nt_c-comma                  : 006490
- nt_c-fetch                  : 00649a
- nt_c-store                  : 0064a4
- nt_cellplus                 : 005f3e
- nt_cells                    : 0061d2
- nt_char                     : 00643e
- nt_charplus                 : 005f4b
- nt_chars                    : 005f31
- nt_cmove                    : 006067
- nt_cmoveup                  : 006059
- nt_cold                     : 005ea7
- nt_colon                    : 006318
- nt_comma                    : 0065bf
- nt_compile-only             : 006241
- nt_compilecomma             : 0062ff
- nt_constant                 : 0063d7
- nt_count                    : 006074
- nt_cr                       : 0060de
- nt_create                   : 006355
- nt_dabs                     : 005fa8
- nt_decimal                  : 005f58
- nt_defer                    : 00632e
- nt_depth                    : 0063b3
- nt_digitq                   : 006679
- nt_dminus                   : 005fef
- nt_dnegate                  : 005fb4
- nt_does                     : 006348
- nt_dot                      : 006187
- nt_dotquote                 : 0061df
- nt_dots                     : 006165
- nt_dplus                    : 005ff9
- nt_drop                     : 0066ca
- nt_dtos                     : 005fc3
- nt_dtrailing                : 0062a8
- nt_dump                     : 005eef
- nt_dup                      : 0066bf
- nt_emit                     : 00617b
- nt_equal                    : 006523
- nt_erase                    : 0060f4
- nt_evaluate                 : 0061c2
- nt_execute                  : 006633
- nt_false                    : 00652c
- nt_fetch                    : 0066a1
- nt_fill                     : 0060e8
- nt_find-name                : 00657d
- nt_fmmod                    : 006003
- nt_fromr                    : 006665
- nt_greater                  : 0064fd
- nt_hash                     : 00612d
- nt_hashs                    : 006117
- nt_here                     : 006642
- nt_hex                      : 005f67
- nt_hold                     : 00610b
- nt_immediate                : 006255
- nt_input                    : 0061a7
- nt_int-name                 : 0060be
- nt_invert                   : 006430
- nt_latestnt                 : 006288
- nt_latestxt                 : 006298
- nt_leftbracket              : 00627f
- nt_less                     : 006506
- nt_lessnumber               : 006136
- nt_literal                  : 00621c
- nt_lshift                   : 006478
- nt_marker                   : 005efb
- nt_max                      : 006417
- nt_min                      : 00640c
- nt_minus                    : 0064b8
- nt_move                     : 006400
- nt_mrot                     : 006602
- nt_mstar                    : 006044
- nt_name-int                 : 0060ce
- nt_name-string              : 006363
- nt_native-compile           : 00622b
- nt_negate                   : 006422
- nt_nip                      : 0065f7
- nt_not-equal                : 006519
- nt_number                   : 006554
- nt_numbermore               : 006101
- nt_one                      : 00656b
- nt_one-minus                : 0064ca
- nt_one-plus                 : 0064d4
- nt_or                       : 006463
- nt_output                   : 0061b4
- nt_over                     : 006695
- nt_pad                      : 006190
- nt_page                     : 005f80
- nt_parse                    : 00609c
- nt_parse-name               : 00659c
- nt_pick                     : 005f19
- nt_plus                     : 0064c1
- nt_plusstore                : 006486
- nt_postpone                 : 006266
- nt_qdup                     : 0065df
- nt_question                 : 0060b5
- nt_quit                     : 0060a9
- nt_refill                   : 00658e
- nt_rfetch                   : 00665b
- nt_rightbracket             : 006276
- nt_rot                      : 00660e
- nt_rshift                   : 00644a
- nt_semicolon                : 00630f
- nt_sign                     : 006121
- nt_slashstring              : 0062b9
- nt_sliteral                 : 0061f3
- nt_smrem                    : 006011
- nt_source                   : 0063a5
- nt_source-id                : 0065ae
- nt_space                    : 006158
- nt_spaces                   : 00614a
- nt_squote                   : 0061e9
- nt_star                     : 00603b
- nt_state                    : 00638d
- nt_stod                     : 005fce
- nt_store                    : 0066aa
- nt_swap                     : 0066b3
- nt_tick                     : 0063f7
- nt_to                       : 0063c0
- nt_to-in                    : 00639a
- nt_tobody                   : 00633b
- nt_tonumber                 : 006545
- nt_tor                      : 00666f
- nt_true                     : 006539
- nt_tuck                     : 0065eb
- nt_two                      : 006562
- nt_two-star                 : 0064ae
- nt_twofromr                 : 005fd9
- nt_tworfetch                : 005f8c
- nt_twotor                   : 005fe4
- nt_type                     : 00616f
- nt_udmod                    : 00601f
- nt_ummod                    : 00602d
- nt_umstar                   : 00604e
- nt_unused                   : 005f72
- nt_value                    : 0063ca
- nt_variable                 : 0063e7
- nt_words                    : 005ee2
- nt_wordsize                 : 005f09
- nt_wordsnsizes              : 005ecf
- nt_xor                      : 006458
- nt_zbranch                  : 0062c8
- nt_zero                     : 006574
- nt_zero-equal               : 00650f
- nt_zero-less                : 0064f3
- nt_zero-more                : 0064e9
- nt_zero-notequal            : 0064de
- number_dot                  : 005a29
- number_loop                 : 005a50
- number_main                 : 005a42
- number_ok                   : 005a5c
- number_single               : 005a84
- output                      : 00000e
- padoffset                   : 0000ff
- parse-name_empty_line       : 005ad6
- parse-name_found            : 005aea
- parse-name_loop             : 005ac9
- parse_found_delimiter       : 005b16
- parse_loop                  : 005b09
- parse_reached_eol           : 005b1a
- pp_got_nt                   : 005b5a
- pp_got_word                 : 005b52
- pp_not_immediate            : 005b6a
- print_string                : 006792
- print_string_done           : 0067a1
- put_chr                     : 005034
- put_chr_wait                : 00503a
- quit_compiled               : 0050e8
- quit_get_line               : 0050bd
- quit_ok                     : 0050df
- quit_print                  : 0050eb
- quit_refill_successful      : 0050cb
- ram-end                     : 007fff
- ram-start                   : 000000
- refill_source_is_not_string : 005bac
- refill_src_not_kbd          : 005ba3
- reset_hardware              : 005000
- rshift_done                 : 005bcb
- rshift_loop                 : 005bc5
- s_compiled                  : 006e10
- s_ok                        : 006e0c
- scratch                     : 000026
- sign_plus                   : 005c1f
- sl_loop                     : 005c44
- sliteral_rt                 : 005c6f
- smrem_1                     : 005cbf
- smrem_1_1                   : 005cc3
- smrem_2                     : 005cda
- smrem_2_1                   : 005cde
- spaces_done                 : 005d01
- squote_compile              : 005c02
- stack                       : 000100
- stack0                      : 0001ff
- start                       : 005064
- state                       : 000014
- stod_pos                    : 005c12
- tests_next_cmd              : 006f67
- tests_prev_cmd              : 006f54
- tick_have_nt                : 005419
- tick_have_word              : 00540d
- tmp1                        : 00001c
- tmp2                        : 00001e
- tmp3                        : 000020
- tmpbranch                   : 00001a
- tmpdsp                      : 000022
- tmptos                      : 000024
- tohold                      : 000018
- toin                        : 00000c
- tonumber_done               : 00518b
- tonumber_loop               : 005147
- tonumber_ok                 : 005156
- type_done                   : 005d51
- type_loop                   : 005d45
- ummod_complete              : 005e1a
- ummod_notzero               : 005ddb
- ummod_overflow              : 005e11
- ummod_shift                 : 005df3
- umstar_counter              : 005daa
- umstar_loop                 : 005d9c
- umstar_one_nos              : 005dbd
- umstar_one_tos              : 005dba
- umstar_two_common           : 005dc9
- umstar_two_nos              : 005dc8
- umstar_two_tos              : 005dc4
- umstar_zero                 : 005db3
- unused                      : 000280
- user0                       : 000000
- vt100_home                  : 006f50
- vt100_page                  : 006f4b
- words_common                : 005e47
- words_loop                  : 005e51
- words_nosizes               : 005e6e
- workword                    : 000004
- xt_2drop                    : 00539f
- xt_2dup                     : 0053a6
- xt_2over                    : 0053b1
- xt_2swap                    : 0053dd
- xt_2variable                : 0053ee
- xt_abort                    : 0050aa
- xt_abortq                   : 00541d
- xt_abs                      : 00543a
- xt_accept                   : 005443
- xt_again                    : 0054c7
- xt_align                    : 0054dd
- xt_aligned                  : 0054df
- xt_allot                    : 0054e1
- xt_and                      : 00550a
- xt_backslash                : 0052dd
- xt_base                     : 005511
- xt_begin                    : 00551f
- xt_bell                     : 005519
- xt_bl                       : 005526
- xt_bounds                   : 00552e
- xt_bracketchar              : 0052d6
- xt_brackettick              : 0052c7
- xt_branch                   : 005538
- xt_bye                      : 00554c
- xt_c-comma                  : 005553
- xt_c-fetch                  : 005561
- xt_c-store                  : 00556d
- xt_cellplus                 : 00557d
- xt_char                     : 005580
- xt_chars                    : 005598
- xt_cmove                    : 00559a
- xt_cmoveup                  : 0055bd
- xt_cold                     : 005061
- xt_colon                    : 005239
- xt_comma                    : 00522d
- xt_compile-only             : 0055d6
- xt_compilecomma             : 0055df
- xt_constant                 : 0055f5
- xt_count                    : 005624
- xt_cr                       : 005633
- xt_create                   : 005639
- xt_dabs                     : 00572b
- xt_decimal                  : 005732
- xt_defer                    : 0056a9
- xt_depth                    : 005738
- xt_digitq                   : 0056c3
- xt_dminus                   : 005711
- xt_dnegate                  : 005747
- xt_does                     : 00575b
- xt_dot                      : 0051b2
- xt_dotquote                 : 0051d1
- xt_dots                     : 0051e5
- xt_dplus                    : 0056ff
- xt_drop                     : 00577e
- xt_dtos                     : 005726
- xt_dtrailing                : 0052fe
- xt_dump                     : 005783
- xt_dup                      : 0057aa
- xt_emit                     : 0057af
- xt_equal                    : 005315
- xt_erase                    : 0057b9
- xt_evaluate                 : 0057db
- xt_execute                  : 00580d
- xt_fetch                    : 0052c2
- xt_fill                     : 0057c0
- xt_find-name                : 005817
- xt_fmmod                    : 00586e
- xt_fromr                    : 005b83
- xt_greater                  : 00511b
- xt_greater_nip              : 00512c
- xt_greater_no_ov            : 005129
- xt_hash                     : 005274
- xt_hashs                    : 00529e
- xt_here                     : 0058fd
- xt_hex                      : 005904
- xt_hold                     : 00590a
- xt_immediate                : 0058c2
- xt_in_found                 : 0058f4
- xt_in_loop                  : 0058dc
- xt_in_notfound              : 0058ee
- xt_input                    : 0058cb
- xt_int-name                 : 0058d3
- xt_invert                   : 0058f7
- xt_latestnt                 : 005918
- xt_latestxt                 : 005920
- xt_leftbracket              : 0052cd
- xt_less                     : 0050f1
- xt_less_nip                 : 005102
- xt_less_no_ov               : 0050ff
- xt_lessnumber               : 005111
- xt_literal                  : 005930
- xt_lshift                   : 00594f
- xt_marker                   : 005983
- xt_max                      : 0059ad
- xt_min                      : 0059c0
- xt_minus                    : 0052ea
- xt_move                     : 0059d3
- xt_mrot                     : 0052f5
- xt_mstar                    : 005963
- xt_name-int                 : 0059e4
- xt_name-string              : 0059ed
- xt_native-compile           : 0059fe
- xt_negate                   : 005a07
- xt_nip                      : 005a0e
- xt_not-equal                : 005105
- xt_number                   : 005a11
- xt_numbermore               : 00528f
- xt_one                      : 005376
- xt_one-minus                : 00537e
- xt_one-plus                 : 005380
- xt_or                       : 005a95
- xt_output                   : 005a9c
- xt_over                     : 005aa4
- xt_pad                      : 005aab
- xt_page                     : 005ab7
- xt_parse                    : 005af6
- xt_parse-name               : 005ac4
- xt_pick                     : 005b29
- xt_plus                     : 0052e2
- xt_plusstore                : 005b37
- xt_postpone                 : 005b47
- xt_qdup                     : 0052ae
- xt_question                 : 0052a7
- xt_quit                     : 0050b2
- xt_refill                   : 005b8b
- xt_rfetch                   : 005b7a
- xt_rightbracket             : 0052d0
- xt_rot                      : 005bb3
- xt_rshift                   : 005bbc
- xt_semicolon                : 00525b
- xt_sign                     : 005c16
- xt_slashstring              : 0051a0
- xt_sliteral                 : 005c24
- xt_smrem                    : 005c85
- xt_source                   : 005cdf
- xt_source-id                : 005cec
- xt_space                    : 005cf3
- xt_spaces                   : 005cf9
- xt_squote                   : 005bd0
- xt_star                     : 005d06
- xt_state                    : 005d0e
- xt_stod                     : 005c06
- xt_store                    : 0052b6
- xt_swap                     : 005d16
- xt_tick                     : 005401
- xt_to                       : 005d1c
- xt_to-in                    : 005133
- xt_tobody                   : 00512f
- xt_tonumber                 : 00513b
- xt_tor                      : 005198
- xt_true                     : 005d26
- xt_tuck                     : 005d2e
- xt_two                      : 005382
- xt_two-star                 : 00538a
- xt_twofromr                 : 0053be
- xt_tworfetch                : 0053cf
- xt_twotor                   : 00538e
- xt_type                     : 005d37
- xt_udmod                    : 005d58
- xt_ummod                    : 005dd2
- xt_umstar                   : 005d73
- xt_unused                   : 005e23
- xt_variable                 : 005e2f
- xt_words                    : 005e45
- xt_wordsize                 : 005e82
- xt_wordsnsizes              : 005e3e
- xt_xor                      : 005e95
- xt_zbranch                  : 005358
- xt_zero                     : 005321
- xt_zero-equal               : 005329
- xt_zero-less                : 005335
- xt_zero-more                : 00534d
- xt_zero-notequal            : 005341
- z_2drop                     : 0053a5
- z_2dup                      : 0053b0
- z_2over                     : 0053bd
- z_2swap                     : 0053ed
- z_2variable                 : 005400
- z_abort                     : 0050f1
- z_abortq                    : 005439
- z_abs                       : 005442
- z_accept                    : 0054c6
- z_again                     : 0054dc
- z_align                     : 0054de
- z_aligned                   : 0054e0
- z_allot                     : 005509
- z_and                       : 005510
- z_backslash                 : 0052e1
- z_base                      : 005518
- z_begin                     : 005525
- z_bell                      : 00551f
- z_bl                        : 00552d
- z_bounds                    : 005537
- z_bracketchar               : 0052dc
- z_brackettick               : 0052cd
- z_branch                    : 00553e
- z_bye                       : 005553
- z_c-comma                   : 005560
- z_c-fetch                   : 00556c
- z_c-store                   : 00557c
- z_cellplus                  : 00557f
- z_char                      : 005597
- z_chars                     : 005599
- z_cmove                     : 0055bc
- z_cmoveup                   : 0055d5
- z_cold                      : 0050f1
- z_colon                     : 00525a
- z_comma                     : 005238
- z_compile-only              : 0055de
- z_compilecomma              : 0055f4
- z_constant                  : 005623
- z_count                     : 005632
- z_cr                        : 005639
- z_create                    : 0056a8
- z_dabs                      : 005731
- z_decimal                   : 005737
- z_defer                     : 0056c3
- z_depth                     : 005746
- z_digitq                    : 0056fe
- z_dminus                    : 005725
- z_dnegate                   : 00575a
- z_does                      : 005767
- z_dot                       : 0051d0
- z_dotquote                  : 0051e5
- z_dots                      : 00522c
- z_dplus                     : 005710
- z_drop                      : 005782
- z_dtos                      : 00572a
- z_dtrailing                 : 005314
- z_dump                      : 0057a9
- z_dup                       : 0057ae
- z_emit                      : 0057b9
- z_equal                     : 005320
- z_erase                     : 0057da
- z_evaluate                  : 005809
- z_execute                   : 005817
- z_fetch                     : 0052c6
- z_fill                      : 0057da
- z_find-name                 : 00586d
- z_fmmod                     : 0058c1
- z_fromr                     : 005b8a
- z_greater                   : 00512e
- z_hash                      : 00528e
- z_hashs                     : 0052a6
- z_here                      : 005903
- z_hex                       : 005909
- z_hold                      : 005917
- z_immediate                 : 0058ca
- z_input                     : 0058d2
- z_int-name                  : 0058f6
- z_invert                    : 0058fc
- z_latestnt                  : 00591f
- z_latestxt                  : 00592f
- z_leftbracket               : 0052cf
- z_less                      : 005104
- z_lessnumber                : 00511a
- z_literal                   : 005941
- z_lshift                    : 005962
- z_marker                    : 0059ac
- z_max                       : 0059bf
- z_min                       : 0059d2
- z_minus                     : 0052f4
- z_move                      : 0059e4
- z_mrot                      : 0052fd
- z_mstar                     : 005982
- z_name-int                  : 0059ec
- z_name-string               : 0059fd
- z_native-compile            : 005a06
- z_negate                    : 005a0d
- z_nip                       : 005a10
- z_not-equal                 : 005110
- z_number                    : 005a94
- z_numbermore                : 00529d
- z_one                       : 00537d
- z_one-minus                 : 00537f
- z_one-plus                  : 005381
- z_or                        : 005a9b
- z_output                    : 005aa3
- z_over                      : 005aaa
- z_pad                       : 005ab6
- z_page                      : 005ac3
- z_parse                     : 005b28
- z_parse-name                : 005b28
- z_pick                      : 005b36
- z_plus                      : 0052e9
- z_plusstore                 : 005b46
- z_postpone                  : 005b79
- z_qdup                      : 0052b5
- z_question                  : 0052ad
- z_quit                      : 0050f1
- z_refill                    : 005bb2
- z_rfetch                    : 005b82
- z_rightbracket              : 0052d5
- z_rot                       : 005bbb
- z_rshift                    : 005bcf
- z_semicolon                 : 005273
- z_sign                      : 005c23
- z_slashstring               : 0051b1
- z_sliteral                  : 005c6e
- z_smrem                     : 005cde
- z_source                    : 005ceb
- z_source-id                 : 005cf2
- z_space                     : 005cf9
- z_spaces                    : 005d05
- z_squote                    : 005c05
- z_star                      : 005d0d
- z_state                     : 005d15
- z_stod                      : 005c15
- z_store                     : 0052c1
- z_swap                      : 005d1b
- z_tick                      : 00541c
- z_to                        : 005d25
- z_to-in                     : 00513a
- z_tobody                    : 005132
- z_tonumber                  : 005197
- z_tor                       : 00519f
- z_true                      : 005d2d
- z_tuck                      : 005d36
- z_two                       : 005389
- z_two-star                  : 00538d
- z_twofromr                  : 0053ce
- z_tworfetch                 : 0053dc
- z_twotor                    : 00539e
- z_type                      : 005d57
- z_udmod                     : 005d73
- z_ummod                     : 005e22
- z_umstar                    : 005dd1
- z_unused                    : 005e2e
- z_variable                  : 005e3e
- z_words                     : 005e81
- z_wordsize                  : 005e94
- z_wordsnsizes               : 005e81
- z_xor                       : 005e9b
- z_zbranch                   : 00535e
- z_zero                      : 005328
- z_zero-equal                : 005334
- z_zero-less                 : 005340
- z_zero-more                 : 005357
- z_zero-notequal             : 00534c
- zb_done                     : 005370
- zb_zero                     : 005367
- zbranch_rt                  : 00535f
- ze_not_zero                 : 005331
- zero-less-is-less           : 00533d
- zero-more_done              : 005356
- zero-more_true              : 005355
- zne_is_zero                 : 005349
