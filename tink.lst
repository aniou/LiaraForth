A Tinkerer's Assembler for the 6502/65c02/65816
Version BETA 17. Feb 2017
Copyright 2015-2017 Scot W. Stevenson <scot.stevenson@gmail.com>
This program comes with ABSOLUTELY NO WARRANTY

Code listing for file liaraforth.tasm
Generated on Sun Mar 12 09:35:57 2017
Target MPU: 65816
External files loaded: 5
Number of passes executed: 35
Number of steps executed: 10
Assembly time: 0.20353 seconds
Code origin: 005000
Bytes of machine code: 8559

LISTING:
   Line  Status/Type State/Width Address     Bytes     Instruction
   1:000 | DONE cmt | em  8  8 |        |             | ; Liara Forth for the W65C265SXB
   2:000 | DONE cmt | em  8  8 |        |             | ; Scot W. Stevenson <scot.stevenson@gmail.com>
   3:000 | DONE cmt | em  8  8 |        |             | ; First version: 01. Apr 2016
   4:000 | DONE cmt | em  8  8 |        |             | ; This version: 12. Mar 2017
   5:000 | DONE wsp | em  8  8 |        |             |
   6:000 | DONE cmt | em  8  8 |        |             | ; This code is written in Typist's Assembler Notation for the 65c02/65816
   7:000 | DONE cmt | em  8  8 |        |             | ; See docs/MANUAL.md for more information
   8:000 | DONE wsp | em  8  8 |        |             |
   9:000 | DONE dir | em  8  8 |        |             |         .mpu 65816                   
  10:000 | DONE dir | em  8  8 |        |             |         .origin 5000                 start of code to save to built-in RAM
  11:000 | DONE cmt | em  8  8 |        |             | ;       .origin 8000    ; start of code to save to Flash memory
  12:000 | DONE lbl | em  8  8 | 005000 |             | code0                                ; used to calculate UNUSED
  13:000 | DONE wsp | em  8  8 |        |             |
  14:000 | DONE cmt | em  8  8 |        |             | ; ===================================================================
  15:000 | DONE cmt | em  8  8 |        |             | ; TOP INCLUDES
  16:000 | DONE wsp | em  8  8 |        |             |
  17:000 | DONE cmt | em  8  8 |        |             | ; Definitions for Liara Forth for the W65C265SXB
  17:001 | DONE cmt | em  8  8 |        |             | ; Scot W. Stevenson <scot.stevenson@gmail.com>
  17:002 | DONE cmt | em  8  8 |        |             | ; First version: 01. Apr 2016
  17:003 | DONE cmt | em  8  8 |        |             | ; This version: 11. Mar 2017
  17:004 | DONE wsp | em  8  8 |        |             |
  17:005 | DONE cmt | em  8  8 |        |             | ; This file is included by liaraforth.tasm
  17:006 | DONE wsp | em  8  8 |        |             |
  17:007 | DONE cmt | em  8  8 |        |             | ; Note that Typist's Assembler Notation does not distinguish between
  17:008 | DONE cmt | em  8  8 |        |             | ; upper andlower case. Variations in case are for human readers only.
  17:009 | DONE wsp | em  8  8 |        |             |
  17:010 | DONE cmt | em  8  8 |        |             | ; I/O facilities are handled in the separate kernel files. The definitions for
  17:011 | DONE cmt | em  8  8 |        |             | ; multitasking are preliminary and will probably change
  17:012 | DONE wsp | em  8  8 |        |             |
  17:013 | DONE wsp | em  8  8 |        |             |
  17:014 | DONE cmt | em  8  8 |        |             | ; ===================================================================
  17:015 | DONE cmt | em  8  8 |        |             | ; MEMORY MAP
  17:016 | DONE cmt | em  8  8 |        |             | ; We reuse the memory that the Mensch Monitor had been using
  17:017 | DONE wsp | em  8  8 |        |             |
  17:018 | DONE cmt | em  8  8 |        |             |         ; TODO add any extra RAM in other banks
  17:019 | DONE cmt | em  8  8 |        |             |         ; TODO add stuff for multitasking
  17:020 | DONE wsp | em  8  8 |        |             |
  17:021 | DONE cmt | em  8  8 |        |             |         ;  00:0000  +-------------------+  ram-start, dpage, user0
  17:022 | DONE cmt | em  8  8 |        |             |         ;           |                   |
  17:023 | DONE cmt | em  8  8 |        |             |         ;           |  ^  Data Stack    |  <-- dsp
  17:024 | DONE cmt | em  8  8 |        |             |         ;           |  |                |
  17:025 | DONE cmt | em  8  8 |        |             |         ;  00:0100  +-------------------+  dsp0, stack
  17:026 | DONE cmt | em  8  8 |        |             |         ;           |                   |
  17:027 | DONE cmt | em  8  8 |        |             |         ;           |  ^  Return Stack  |  <-- rsp
  17:028 | DONE cmt | em  8  8 |        |             |         ;           |  |                |
  17:029 | DONE cmt | em  8  8 |        |             |         ;  00:0200  +-------------------+  rsp0, buffer, buffer0
  17:030 | DONE cmt | em  8  8 |        |             |         ;           |  |                |
  17:031 | DONE cmt | em  8  8 |        |             |         ;           |  v  Input Buffer  |
  17:032 | DONE cmt | em  8  8 |        |             |         ;           |                   |
  17:033 | DONE cmt | em  8  8 |        |             |         ;  00:0300  +-------------------+  cp0
  17:034 | DONE cmt | em  8  8 |        |             |         ;           |  |                |
  17:035 | DONE cmt | em  8  8 |        |             |         ;           |  v  Dictionary    |  <-- cp
  17:036 | DONE cmt | em  8  8 |        |             |         ;           |                   |
  17:037 | DONE cmt | em  8  8 |        |             |         ;   (...)   ~~~~~~~~~~~~~~~~~~~~~
  17:038 | DONE cmt | em  8  8 |        |             |         ;           |                   |
  17:039 | DONE cmt | em  8  8 |        |             |         ;           |                   |
  17:040 | DONE cmt | em  8  8 |        |             |         ;  00:7fff  +-------------------+  ram-end
  17:041 | DONE wsp | em  8  8 |        |             |
  17:042 | DONE cmt | em  8  8 |        |             |         ; Hard physical addresses
  17:043 | DONE dir | em  8  8 |        |             |         .equ ram-start  0000         start of installed RAM
  17:044 | DONE dir | em  8  8 |        |             |         .equ ram-end { 8000 - 1 }    end of 32k installed RAM
  17:045 | DONE wsp | em  8  8 |        |             |
  17:046 | DONE cmt | em  8  8 |        |             |         ; Soft physical addresses
  17:047 | DONE dir | em  8  8 |        |             |         .equ dpage      ram-start    direct page:       0000 - 00ff
  17:048 | DONE dir | em  8  8 |        |             |         .equ stack { 000000 + 0100 } return stack area: 0100 - 01ff
  17:049 | DONE dir | em  8  8 |        |             |         .equ buffer0 { stack + 0100 } buffer areas:      0200 - 02ff
  17:050 | DONE wsp | em  8  8 |        |             |
  17:051 | DONE cmt | em  8  8 |        |             |         ; Defined locations
  17:052 | DONE dir | em  8  8 |        |             |         .equ user0      dpage        user and system variables
  17:053 | DONE dir | em  8  8 |        |             |         .equ dsp0 { stack - 1 }      initial Data Stack Pointer:   00ff
  17:054 | DONE dir | em  8  8 |        |             |         .equ stack0 { buffer0 - 1 }  initial Return Stack Pointer: 01ff
  17:055 | DONE wsp | em  8  8 |        |             |
  17:056 | DONE cmt | em  8  8 |        |             |         ; Buffers
  17:057 | DONE dir | em  8  8 |        |             |         .equ bsize      0080         size of input/output buffers
  17:058 | DONE dir | em  8  8 |        |             |         .equ buffer1 { buffer0 + 000080 } output buffer 0280 (UNUSED)
  17:059 | DONE wsp | em  8  8 |        |             |
  17:060 | DONE cmt | em  8  8 |        |             |         ; Dictionary RAM
  17:061 | DONE dir | em  8  8 |        |             |         .equ cp0 { buffer1 + 000080 } Dictionary starts after last buffer
  17:062 | DONE dir | em  8  8 |        |             |         .equ cp-end { code0 - 1 }    Last RAM byte available
  17:063 | DONE wsp | em  8  8 |        |             |
  17:064 | DONE cmt | em  8  8 |        |             |         ; Other locations
  17:065 | DONE dir | em  8  8 |        |             |         .equ padoffset  0ff          offset from CP to PAD (holds number strings)
  17:066 | DONE wsp | em  8  8 |        |             |
  17:067 | DONE wsp | em  8  8 |        |             |
  17:068 | DONE cmt | em  8  8 |        |             | ; ===================================================================
  17:069 | DONE cmt | em  8  8 |        |             | ; DIRECT PAGE ADDRESSES
  17:070 | DONE wsp | em  8  8 |        |             |
  17:071 | DONE cmt | em  8  8 |        |             | ; All are one cell (two bytes) long to prevent weird errors
  17:072 | DONE cmt | em  8  8 |        |             | ; TODO rewrite with USER variables
  17:073 | DONE dir | em  8  8 |        |             |         .equ cp { 000000 + &00 }     Compiler Pointer, 2 bytes
  17:074 | DONE dir | em  8  8 |        |             |         .equ dp { 000000 + &02 }     Dictionary Pointer, 2 bytes
  17:075 | DONE dir | em  8  8 |        |             |         .equ workword { 000000 + &04 } Currently compiliing word
  17:076 | DONE dir | em  8  8 |        |             |         .equ insrc { 000000 + &06 }  Input Source for SOURCE-ID
  17:077 | DONE dir | em  8  8 |        |             |         .equ cib { 000000 + &08 }    Address of current input buffer
  17:078 | DONE dir | em  8  8 |        |             |         .equ ciblen { 000000 + &10 } Length of current input buffer
  17:079 | DONE dir | em  8  8 |        |             |         .equ toin { 000000 + &12 }   Pointer to CIB (>IN in Forth)
  17:080 | DONE dir | em  8  8 |        |             |         .equ output { 000000 + &14 } Jump target for EMIT
  17:081 | DONE dir | em  8  8 |        |             |         .equ input { 000000 + &16 }  Jump target for KEY
  17:082 | DONE dir | em  8  8 |        |             |         .equ havekey { 000000 + &18 } Jump target for KEY?
  17:083 | DONE dir | em  8  8 |        |             |         .equ state { 000000 + &20 }  STATE: -1 compile, 0 interpret
  17:084 | DONE dir | em  8  8 |        |             |         .equ base { 000000 + &22 }   Radix for number conversion
  17:085 | DONE dir | em  8  8 |        |             |         .equ tohold { 000000 + &24 } Pointer for formatted output
  17:086 | DONE dir | em  8  8 |        |             |         .equ tmpbranch { 000000 + &26 } temp storage for 0BRANCH, BRANCH only
  17:087 | DONE dir | em  8  8 |        |             |         .equ tmp1 { 000000 + &28 }   Temporary storage
  17:088 | DONE dir | em  8  8 |        |             |         .equ tmp2 { 000000 + &30 }   Temporary storage
  17:089 | DONE dir | em  8  8 |        |             |         .equ tmp3 { 000000 + &32 }   Temporary storage
  17:090 | DONE dir | em  8  8 |        |             |         .equ tmpdsp { 000000 + &34 } Temporary DSP (X) storage, 2 bytes
  17:091 | DONE dir | em  8  8 |        |             |         .equ tmptos { 000000 + &36 } Temporary TOS (Y) storage, 2 bytes
  17:092 | DONE dir | em  8  8 |        |             |         .equ nc_limit { 000000 + &38 } Holds limit for Native Compile size
  17:093 | DONE dir | em  8  8 |        |             |         .equ scratch { 000000 + &40 } 8 byte scratchpad (see UM/MOD)
  17:094 | DONE wsp | em  8  8 |        |             |
  17:095 | DONE wsp | em  8  8 |        |             |
  17:096 | DONE cmt | em  8  8 |        |             | ; ===================================================================
  17:097 | DONE cmt | em  8  8 |        |             | ; HELPER DEFINITIONS
  17:098 | DONE wsp | em  8  8 |        |             |
  17:099 | DONE cmt | em  8  8 |        |             | ; ASCII characters
  17:100 | DONE dir | em  8  8 |        |             |         .equ AscCC   03              break (Control-C) ASCII character
  17:101 | DONE dir | em  8  8 |        |             |         .equ AscBELL 07              ACSCII bell sound
  17:102 | DONE dir | em  8  8 |        |             |         .equ AscBS   08              backspace ASCII character
  17:103 | DONE dir | em  8  8 |        |             |         .equ AscLF   0a              line feed ASCII character
  17:104 | DONE dir | em  8  8 |        |             |         .equ AscCR   0d              carriage return ASCII character
  17:105 | DONE dir | em  8  8 |        |             |         .equ AscCN   0e              ASCII CNTR-n (for next command)
  17:106 | DONE dir | em  8  8 |        |             |         .equ AscCP   10              ASCII CNTR-p (for previous command)
  17:107 | DONE dir | em  8  8 |        |             |         .equ AscESC  1b              Escape ASCII character
  17:108 | DONE dir | em  8  8 |        |             |         .equ AscSP   20              space ASCII character
  17:109 | DONE dir | em  8  8 |        |             |         .equ AscDEL  7f              DEL ASCII character
  17:110 | DONE wsp | em  8  8 |        |             |
  17:111 | DONE cmt | em  8  8 |        |             | ; Dictionary flags. The first four bits are currently unused
  17:112 | DONE dir | em  8  8 |        |             |         .equ FN 0008                 Force Native compile
  17:113 | DONE dir | em  8  8 |        |             |         .equ CO 0004                 Compile Only
  17:114 | DONE dir | em  8  8 |        |             |         .equ IM 0002                 Immediate Word
  17:115 | DONE dir | em  8  8 |        |             |         .equ NC 0001                 Native Compile allowed
  17:116 | DONE wsp | em  8  8 |        |             |
  18:000 | DONE wsp | em  8  8 |        |             |
  19:000 | DONE cmt | em  8  8 |        |             | ; Hardware dependencies are isolated to a large degree in kernel files. Liara
  20:000 | DONE cmt | em  8  8 |        |             | ; Forth ships with two such files: One (very ALPHA) for the crude65816 emulator,
  21:000 | DONE cmt | em  8  8 |        |             | ; and one for the 265sxb board. Only use one. Which ever kernel file is used, it
  22:000 | DONE cmt | em  8  8 |        |             | ; must contain at least the routines put_chr, get_chr and have_chr, which work
  23:000 | DONE cmt | em  8  8 |        |             | ; on the A register
  24:000 | DONE wsp | em  8  8 |        |             |
  25:000 | DONE cmt | em  8  8 |        |             | ; Basic hardware routines for Liara Forth: 265SXB version
  25:001 | DONE cmt | em  8  8 |        |             | ; Scot W. Stevenson <scot.stevenson@gmail.com>
  25:002 | DONE cmt | em  8  8 |        |             | ; First version: 04. Jan 2017
  25:003 | DONE cmt | em  8  8 |        |             | ; This version: 05. Mar 2017
  25:004 | DONE wsp | em  8  8 |        |             |
  25:005 | DONE cmt | em  8  8 |        |             | ; This section provides basic hardware interface to the 265SXB, providing at the
  25:006 | DONE cmt | em  8  8 |        |             | ; very least the the PUT_CHR, GET_CHR and HAVE_CHR routines that Liara Forth
  25:007 | DONE cmt | em  8  8 |        |             | ; uses. These MUST BE PRESENT. It is in its own section to make porting Forth
  25:008 | DONE cmt | em  8  8 |        |             | ; to other machines easier.
  25:009 | DONE wsp | em  8  8 |        |             |
  25:010 | DONE cmt | em  8  8 |        |             | ; The code here is based on Andrew Jacobs' Basic Vector Handling for the
  25:011 | DONE cmt | em  8  8 |        |             | ; W65C265SXB Development Board as part of the w65c265sxb-hacker project
  25:012 | DONE cmt | em  8  8 |        |             | ; (https://github.com/andrew-jacobs/w65c265sxb-hacker). It is released under the
  25:013 | DONE cmt | em  8  8 |        |             | ; following license:
  25:014 | DONE cmt | em  8  8 |        |             | ;
  25:015 | DONE cmt | em  8  8 |        |             | ;     This work is made available under the terms of the Creative Commons
  25:016 | DONE cmt | em  8  8 |        |             | ;     Attribution-NonCommercial-ShareAlike 4.0 International license. Open the
  25:017 | DONE cmt | em  8  8 |        |             | ;     following URL to see the details.
  25:018 | DONE cmt | em  8  8 |        |             | ;     http://creativecommons.org/licenses/by-nc-sa/4.0/
  25:019 | DONE wsp | em  8  8 |        |             |
  25:020 | DONE cmt | em  8  8 |        |             | ; Original variable names from w65c256.inc are included in comments to make
  25:021 | DONE cmt | em  8  8 |        |             | ; updates and changes easier
  25:022 | DONE wsp | em  8  8 |        |             |
  25:023 | DONE cmt | em  8  8 |        |             | ; ===================================================================
  25:024 | DONE cmt | em  8  8 |        |             | ; HARDWARE DEFINITIONS
  25:025 | DONE cmt | em  8  8 |        |             | ; These follow Andrew Jacobs' names, but lower case and with "hw_" prefixed.
  25:026 | DONE cmt | em  8  8 |        |             | ; This is the only file where symbols with the hw_ prefix may be defined or used
  25:027 | DONE wsp | em  8  8 |        |             |
  25:028 | DONE cmt | em  8  8 |        |             | ; Baud rates are calculated by the formula { osc_freq/(16*baud_rate)-1 } which we
  25:029 | DONE cmt | em  8  8 |        |             | ; can do on the fly at every assembly with the following parameters, or just calculate
  25:030 | DONE cmt | em  8  8 |        |             | ; once and then define brg_value with:
  25:031 | DONE cmt | em  8  8 |        |             | ;
  25:032 | DONE cmt | em  8  8 |        |             | ; - For  9600 baud, use &23
  25:033 | DONE cmt | em  8  8 |        |             | ; - For 19200 baud, use &11
  25:034 | DONE wsp | em  8  8 |        |             |
  25:035 | DONE cmt | em  8  8 |        |             | ;       .equ osc_freq  3686400          ; SXB runs at 3.6864MHz
  25:036 | DONE cmt | em  8  8 |        |             | ;       .equ baud_rate 19200            ; ACIA baud rate
  25:037 | DONE cmt | em  8  8 |        |             | ;	.equ baud_rate 9600             ; ACIA baud rate
  25:038 | DONE wsp | em  8  8 |        |             |
  25:039 | DONE dir | em  8  8 |        |             |         .equ brg_value &11           19200 baud
  25:040 | DONE cmt | em  8  8 |        |             | ;       .equ brg_value &23              ; 9600 baud
  25:041 | DONE wsp | em  8  8 |        |             |
  25:042 | DONE dir | em  8  8 |        |             |         .equ hw_pd0  0df00           Port 0 Data Register
  25:043 | DONE dir | em  8  8 |        |             |         .equ hw_pd1  0df01           Port 1 Data Register
  25:044 | DONE dir | em  8  8 |        |             |         .equ hw_pd2  0df02           Port 2 Data Register
  25:045 | DONE dir | em  8  8 |        |             |         .equ hw_pd3  0df03           Port 3 Data Register
  25:046 | DONE dir | em  8  8 |        |             |         .equ hw_pdd0 0df04           Port 0 Data Direction Register
  25:047 | DONE dir | em  8  8 |        |             |         .equ hw_pdd1 0df05           Port 1 Data Direction Register
  25:048 | DONE dir | em  8  8 |        |             |         .equ hw_pdd2 0df06           Port 2 Data Direction Register
  25:049 | DONE dir | em  8  8 |        |             |         .equ hw_pdd3 0df07           Port 3 Data Direction Register
  25:050 | DONE wsp | em  8  8 |        |             |
  25:051 | DONE dir | em  8  8 |        |             |         .equ hw_pd4  0df20           Port 4 Data Register
  25:052 | DONE dir | em  8  8 |        |             |         .equ hw_pd5  0df21           Port 5 Data Register
  25:053 | DONE dir | em  8  8 |        |             |         .equ hw_pd6  0df22           Port 6 Data Register
  25:054 | DONE dir | em  8  8 |        |             |         .equ hw_pd7  0df23           Port 7 Data Register
  25:055 | DONE dir | em  8  8 |        |             |         .equ hw_pdd4 0df24           Port 4 Data Direction Register
  25:056 | DONE dir | em  8  8 |        |             |         .equ hw_pdd5 0df25           Port 5 Data Direction Register
  25:057 | DONE dir | em  8  8 |        |             |         .equ hw_pdd6 0df26           Port 6 Data Direction Register
  25:058 | DONE dir | em  8  8 |        |             |         .equ hw_pcs7 0df27           Port 7 Chip Select
  25:059 | DONE wsp | em  8  8 |        |             |
  25:060 | DONE dir | em  8  8 |        |             |         .equ hw_bcr  0df40           Bus Control Register
  25:061 | DONE dir | em  8  8 |        |             |         .equ hw_sscr 0df41           System Speed Control Register
  25:062 | DONE dir | em  8  8 |        |             |         .equ hw_tcr  0df42           Timer Control Register
  25:063 | DONE dir | em  8  8 |        |             |         .equ hw_ter  0df43           Timer Enable Register
  25:064 | DONE dir | em  8  8 |        |             |         .equ hw_tifr 0df44           Timer Interrupt Flag Register
  25:065 | DONE dir | em  8  8 |        |             |         .equ hw_eifr 0df45           Edge Interrupt Flag Register
  25:066 | DONE dir | em  8  8 |        |             |         .equ hw_tier 0df46           Timer Interrupt Enable Register
  25:067 | DONE dir | em  8  8 |        |             |         .equ hw_eier 0df47           Edge Interrupt Enable Register
  25:068 | DONE dir | em  8  8 |        |             |         .equ hw_uifr 0df48           UART Interrupt Flag Register
  25:069 | DONE dir | em  8  8 |        |             |         .equ hw_uier 0df49           UART Interrupt Enable Register
  25:070 | DONE wsp | em  8  8 |        |             |
  25:071 | DONE dir | em  8  8 |        |             |         .equ hw_t0cl 0df60           Timer 0 Counter Low
  25:072 | DONE dir | em  8  8 |        |             |         .equ hw_t0ch 0df61           Timer 0 Counter High
  25:073 | DONE dir | em  8  8 |        |             |         .equ hw_t1cl 0df62           Timer 1 Counter Low
  25:074 | DONE dir | em  8  8 |        |             |         .equ hw_t1ch 0df63           Timer 1 Counter High
  25:075 | DONE dir | em  8  8 |        |             |         .equ hw_t2cl 0df64           Timer 2 Counter Low
  25:076 | DONE dir | em  8  8 |        |             |         .equ hw_t2ch 0df65           Timer 2 Counter High
  25:077 | DONE dir | em  8  8 |        |             |         .equ hw_t3cl 0df66           Timer 3 Counter Low
  25:078 | DONE dir | em  8  8 |        |             |         .equ hw_t3ch 0df67           Timer 3 Counter High
  25:079 | DONE dir | em  8  8 |        |             |         .equ hw_t4cl 0df68           Timer 4 Counter Low
  25:080 | DONE dir | em  8  8 |        |             |         .equ hw_t4ch 0df69           Timer 4 Counter High
  25:081 | DONE dir | em  8  8 |        |             |         .equ hw_t5cl 0df6a           Timer 5 Counter Low
  25:082 | DONE dir | em  8  8 |        |             |         .equ hw_t5ch 0df6b           Timer 5 Counter High
  25:083 | DONE dir | em  8  8 |        |             |         .equ hw_t6cl 0df6c           Timer 6 Counter Low
  25:084 | DONE dir | em  8  8 |        |             |         .equ hw_t6ch 0df6d           Timer 6 Counter High
  25:085 | DONE dir | em  8  8 |        |             |         .equ hw_t7cl 0df6e           Timer 7 Counter Low
  25:086 | DONE dir | em  8  8 |        |             |         .equ hw_t7ch 0df6f           Timer 7 Counter High
  25:087 | DONE wsp | em  8  8 |        |             |
  25:088 | DONE dir | em  8  8 |        |             |         .equ hw_acsr0 0df70          UART 0 Control/Status Register
  25:089 | DONE dir | em  8  8 |        |             |         .equ hw_artd0 0df71          UART 0 Data Register
  25:090 | DONE dir | em  8  8 |        |             |         .equ hw_acsr1 0df72          UART 1 Control/Status Register
  25:091 | DONE dir | em  8  8 |        |             |         .equ hw_artd1 0df73          UART 1 Data Register
  25:092 | DONE dir | em  8  8 |        |             |         .equ hw_acsr2 0df74          UART 2 Control/Status Register
  25:093 | DONE dir | em  8  8 |        |             |         .equ hw_artd2 0df75          UART 2 Data Register
  25:094 | DONE dir | em  8  8 |        |             |         .equ hw_acsr3 0df76          UART 3 Control/Status Register
  25:095 | DONE dir | em  8  8 |        |             |         .equ hw_artd3 0df77          UART 3 Data Register
  25:096 | DONE wsp | em  8  8 |        |             |
  25:097 | DONE wsp | em  8  8 |        |             |
  25:098 | DONE cmt | em  8  8 |        |             | ; ===================================================================
  25:099 | DONE cmt | em  8  8 |        |             | ; RESET HARDWARE
  25:100 | DONE cmt | em  8  8 |        |             | ; Call this during boot. Uses Port 0 for communication in the default setting.
  25:101 | DONE cmt | em  8  8 |        |             | ; Note this does not reset the MPU, which is done by the main Forth code
  25:102 | DONE lbl | em  8  8 | 005000 |             | reset_hardware                       
  25:103 | DONE ins | em  8  8 | 005000 | 78          |                 sei                  
  25:104 | DONE ins | em  8  8 | 005001 | 18          |                 clc                  
  25:105 | DONE ins | em  8  8 | 005002 | fb          |                 xce                  
  25:106 | DONE ctl | na  8  8 |        |             |         .!native
  25:107 | DONE ins | na  8  8 | 005003 | c2 10       |                 rep 10               
  25:108 | DONE ctl | na  8 16 |        |             |         .!xy16
  25:109 | DONE ins | na  8 16 | 005005 | e2 20       |                 sep 20               
  25:110 | DONE ctl | na  8 16 |        |             |         .!a8
  25:111 | DONE cmt | na  8 16 |        |             |                 ; temporarily reset the stack
  25:112 | DONE ins | na  8 16 | 005007 | a2 ff 01    |                 ldx.# 01ff           
  25:113 | DONE ins | na  8 16 | 00500a | 9a          |                 txs                  
  25:114 | DONE wsp | na  8 16 |        |             |
  25:115 | DONE ins | na  8 16 | 00500b | 9c 49 df    |                 stz 00df49           UART Interrupt Enable Register (UIER)
  25:116 | DONE wsp | na  8 16 |        |             |
  25:117 | DONE ins | na  8 16 | 00500e | a9 c0       |                 lda.# 0c0            Ensure A15/AMS are output
  25:118 | DONE ins | na  8 16 | 005010 | 8d 24 df    |                 sta 00df24           Port 4 Data Direction Register (PDD4)
  25:119 | DONE ins | na  8 16 | 005013 | 9c 20 df    |                 stz 00df20           Select bank 0 (Port 4 Data Register, PD4)
  25:120 | DONE wsp | na  8 16 |        |             |
  25:121 | DONE ins | na  8 16 | 005016 | a9 10       |                 lda.# %00010000      Set UART0 to use timer 3
  25:122 | DONE ins | na  8 16 | 005018 | 1c 42 df    |                 trb 00df42           Timer Control Register (TCR)
  25:123 | DONE ins | na  8 16 | 00501b | a9 0b       |                 lda.# .lsb 00000b    And set baud rate
  25:124 | DONE ins | na  8 16 | 00501d | 8d 66 df    |                 sta 00df66           Timer 3 Counter Low (T3CL)
  25:125 | DONE ins | na  8 16 | 005020 | a9 00       |                 lda.# .msb 00000b    
  25:126 | DONE ins | na  8 16 | 005022 | 8d 67 df    |                 sta 00df67           Timer 3 Counter High (T3CH)
  25:127 | DONE ins | na  8 16 | 005025 | a9 08       |                 lda.# 08             Enable timer 3 (1<<3)
  25:128 | DONE ins | na  8 16 | 005027 | 0c 43 df    |                 tsb 00df43           Timer Enable Register (TER)
  25:129 | DONE wsp | na  8 16 |        |             |
  25:130 | DONE ins | na  8 16 | 00502a | a9 25       |                 lda.# %00100101      Set UART0 for 8-N-1
  25:131 | DONE ins | na  8 16 | 00502c | 8d 70 df    |                 sta 00df70           UART 0 Control/Status Register (ACSR0)
  25:132 | DONE wsp | na  8 16 |        |             |
  25:133 | DONE ins | na  8 16 | 00502f | c2 20       |                 rep 20               
  25:134 | DONE ctl | na 16 16 |        |             |         .!a16
  25:135 | DONE ins | na 16 16 | 005031 | 4c 67 50    |                 jmp 005067           we return with A as 8 bits
  25:136 | DONE wsp | na 16 16 |        |             |
  25:137 | DONE wsp | na 16 16 |        |             |
  25:138 | DONE cmt | na 16 16 |        |             | ; ===================================================================
  25:139 | DONE cmt | na 16 16 |        |             | ; PUT_CHR
  25:140 | DONE cmt | na 16 16 |        |             | ; Wait until the last transmission has been completed then send the character
  25:141 | DONE cmt | na 16 16 |        |             | ; in A. Destroys A. This handles all the register size stuff, and does not need to be
  25:142 | DONE cmt | na 16 16 |        |             | ; called with a 8-bit Y register as TOS. This is only called directly by EMIT
  25:143 | DONE cmt | na 16 16 |        |             | ; through the OUTPUT variable. In Forth, this is refered to as UART0
  25:144 | DONE lbl | na 16 16 | 005034 |             | put_chr                              
  25:145 | DONE ins | na 16 16 | 005034 | e2 20       |                 sep 20               
  25:146 | DONE ctl | na  8 16 |        |             |         .!a8
  25:147 | DONE ins | na  8 16 | 005036 | 48          |                 pha                  
  25:148 | DONE ins | na  8 16 | 005037 | a9 02       |                 lda.# 02             (1<<1)
  25:149 | DONE wsp | na  8 16 |        |             |
  25:150 | DONE lbl | na  8 16 | 005039 |             | put_chr_wait                         
  25:151 | DONE ins | na  8 16 | 005039 | 2c 48 df    |                 bit 00df48           timer finished?
  25:152 | DONE ins | na  8 16 | 00503c | f0 fb       |                 beq 005039           
  25:153 | DONE wsp | na  8 16 |        |             |
  25:154 | DONE ins | na  8 16 | 00503e | 68          |                 pla                  
  25:155 | DONE ins | na  8 16 | 00503f | 8d 71 df    |                 sta 00df71           transmit char
  25:156 | DONE ins | na  8 16 | 005042 | c2 20       |                 rep 20               
  25:157 | DONE ctl | na 16 16 |        |             |         .!a16
  25:158 | DONE wsp | na 16 16 |        |             |
  25:159 | DONE ins | na 16 16 | 005044 | 60          |                 rts                  
  25:160 | DONE wsp | na 16 16 |        |             |
  25:161 | DONE cmt | na 16 16 |        |             | ; ===================================================================
  25:162 | DONE cmt | na 16 16 |        |             | ; GET_CHR
  25:163 | DONE cmt | na 16 16 |        |             | ; Fetch the next character from the receive buffer waiting for some to arrive
  25:164 | DONE cmt | na 16 16 |        |             | ; if the buffer is empty. This is handled by KEY through the INPUT variable
  25:165 | DONE cmt | na 16 16 |        |             | ; Note the routine returns its value through A - getting it TOS is the caller's
  25:166 | DONE cmt | na 16 16 |        |             | ; problem
  25:167 | DONE lbl | na 16 16 | 005045 |             | get_chr                              
  25:168 | DONE ins | na 16 16 | 005045 | e2 20       |                 sep 20               
  25:169 | DONE ctl | na  8 16 |        |             |         .!a8
  25:170 | DONE ins | na  8 16 | 005047 | a9 01       |                 lda.# 01             (1<<0)
  25:171 | DONE wsp | na  8 16 |        |             |
  25:172 | DONE lbl | na  8 16 | 005049 |             | get_chr_wait                         
  25:173 | DONE ins | na  8 16 | 005049 | 2c 48 df    |                 bit 00df48           Any data in RX buffer?
  25:174 | DONE ins | na  8 16 | 00504c | f0 fb       |                 beq 005049           No, keep waiting
  25:175 | DONE ins | na  8 16 | 00504e | ad 71 df    |                 lda 00df71           Yes, read it
  25:176 | DONE ins | na  8 16 | 005051 | c2 20       |                 rep 20               
  25:177 | DONE ctl | na 16 16 |        |             |         .!a16
  25:178 | DONE ins | na 16 16 | 005053 | 29 ff 00    |                 and.# 00ff           paranoid
  25:179 | DONE wsp | na 16 16 |        |             |
  25:180 | DONE ins | na 16 16 | 005056 | 60          |                 rts                  
  25:181 | DONE wsp | na 16 16 |        |             |
  25:182 | DONE cmt | na 16 16 |        |             | ; ===================================================================
  25:183 | DONE cmt | na 16 16 |        |             | ; HAVE_CHR
  25:184 | DONE cmt | na 16 16 |        |             | ; Check if the receive buffer contains any data and return C=1 if there is
  25:185 | DONE cmt | na 16 16 |        |             | ; some. This should be handled by KEY? through the HAVEKEY variable
  25:186 | DONE cmt | na 16 16 |        |             | ; TODO Test this
  25:187 | DONE wsp | na 16 16 |        |             |
  25:188 | DONE lbl | na 16 16 | 005057 |             | have_chr                             
  25:189 | DONE ins | na 16 16 | 005057 | 48          |                 pha                  save caller's A
  25:190 | DONE ins | na 16 16 | 005058 | 08          |                 php                  
  25:191 | DONE ins | na 16 16 | 005059 | e2 20       |                 sep 20               
  25:192 | DONE ctl | na  8 16 |        |             |         .!a8
  25:193 | DONE ins | na  8 16 | 00505b | ad 48 df    |                 lda 00df48           read the status register
  25:194 | DONE ins | na  8 16 | 00505e | 28          |                 plp                  
  25:195 | DONE ins | na  8 16 | 00505f | 6a          |                 ror.a                shift hw_uart0r bit into carry
  25:196 | DONE ins | na  8 16 | 005060 | c2 20       |                 rep 20               
  25:197 | DONE ctl | na 16 16 |        |             |         .!a16
  25:198 | DONE ins | na 16 16 | 005062 | 68          |                 pla                  restore A
  25:199 | DONE ins | na 16 16 | 005063 | 60          |                 rts                  
  25:200 | DONE wsp | na 16 16 |        |             |
  25:201 | DONE cmt | na 16 16 |        |             | ; END
  26:000 | DONE cmt | na 16 16 |        |             | ;       .include kernel_emu.tasm        ; routines for crude65815 emulator
  27:000 | DONE wsp | na 16 16 |        |             |
  28:000 | DONE wsp | na 16 16 |        |             |
  29:000 | DONE cmt | na 16 16 |        |             | ; ===================================================================
  30:000 | DONE cmt | na 16 16 |        |             | ; DICTIONARY ROUTINES
  31:000 | DONE wsp | na 16 16 |        |             |
  32:000 | DONE cmt | na 16 16 |        |             | ; Word code routines are sorted alphabetically, except for the first three
  33:000 | DONE cmt | na 16 16 |        |             | ; - COLD, ABORT, and QUIT - and a few others that flow into each other. The
  34:000 | DONE cmt | na 16 16 |        |             | ; byte and cycle values are calculated without the RTS instruction.
  35:000 | DONE wsp | na 16 16 |        |             |
  36:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
  37:000 | DONE cmt | na 16 16 |        |             | ; COLD ( -- ) X bytes / X Cycles
  38:000 | DONE cmt | na 16 16 |        |             | ; Reset the Forth system. Use BYE to return to the Mensch Monitor.
  39:000 | DONE lbl | na 16 16 | 005064 |             | xt_cold                              
  40:000 | DONE wsp | na 16 16 |        |             |
  41:000 | DONE ins | na 16 16 | 005064 | 4c 00 50    |                 jmp 005000           don't use JSR, jump back to start
  42:000 | DONE lbl | na 16 16 | 005067 |             | start                                
  43:000 | DONE dir | na 16 16 |        |             |         .!native                     these should have been handled by hardware reset
  44:000 | DONE dir | na 16 16 |        |             |         .!a16                        
  45:000 | DONE dir | na 16 16 |        |             |         .!xy16                       
  46:000 | DONE ins | na 16 16 | 005067 | 78          |                 sei                  
  47:000 | DONE wsp | na 16 16 |        |             |
  48:000 | DONE cmt | na 16 16 |        |             |                 ; Initialize the Return Stack (65816 stack)
  49:000 | DONE ins | na 16 16 | 005068 | a2 ff 01    |                 ldx.# 0001ff         01ff
  50:000 | DONE ins | na 16 16 | 00506b | 9a          |                 txs                  
  51:000 | DONE wsp | na 16 16 |        |             |
  52:000 | DONE cmt | na 16 16 |        |             |                 ; Clear Data Stack. This is repeated in ABORT, but we have no
  53:000 | DONE cmt | na 16 16 |        |             |                 ; choice if we want to load high-level words via EVALUATE
  54:000 | DONE ins | na 16 16 | 00506c | a0 00 00    |                 ldy.# 0000           
  55:000 | DONE ins | na 16 16 | 00506f | a2 ff 00    |                 ldx.# 0000ff         
  56:000 | DONE wsp | na 16 16 |        |             |
  57:000 | DONE cmt | na 16 16 |        |             |                 ; We start out in decimal mode
  58:000 | DONE ins | na 16 16 | 005072 | a9 0a 00    |                 lda.# 000a           
  59:000 | DONE ins | na 16 16 | 005075 | 85 16       |                 sta.d 000016         
  60:000 | DONE wsp | na 16 16 |        |             |
  61:000 | DONE cmt | na 16 16 |        |             |                 ; We start out with smaller words with less than 20 bytes being
  62:000 | DONE cmt | na 16 16 |        |             |                 ; natively compiled, because this includes words like LSHIFT and MAX.
  63:000 | DONE ins | na 16 16 | 005077 | a9 14 00    |                 lda.# &0020          
  64:000 | DONE ins | na 16 16 | 00507a | 85 26       |                 sta.d 000026         
  65:000 | DONE wsp | na 16 16 |        |             |
  66:000 | DONE cmt | na 16 16 |        |             |                 ; set the OUTPUT vector to the default, which is always put_chr,
  67:000 | DONE cmt | na 16 16 |        |             |                 ; but may have synonyms such as uart0
  68:000 | DONE ins | na 16 16 | 00507c | a9 34 50    |                 lda.# 005034         
  69:000 | DONE ins | na 16 16 | 00507f | 85 0e       |                 sta.d 00000e         
  70:000 | DONE wsp | na 16 16 |        |             |
  71:000 | DONE cmt | na 16 16 |        |             |                 ; set the INPUT vector to the default, which is always get_chr,
  72:000 | DONE cmt | na 16 16 |        |             |                 ; but may have synonyms such as uart0
  73:000 | DONE ins | na 16 16 | 005081 | a9 45 50    |                 lda.# 005045         
  74:000 | DONE ins | na 16 16 | 005084 | 85 10       |                 sta.d 000010         
  75:000 | DONE wsp | na 16 16 |        |             |
  76:000 | DONE cmt | na 16 16 |        |             |                 ; set the HAVE_KEY vector to the default, which is always
  77:000 | DONE cmt | na 16 16 |        |             |                 ; have_chr, but may have synonyms such as uart0
  78:000 | DONE ins | na 16 16 | 005086 | a9 57 50    |                 lda.# 005057         
  79:000 | DONE ins | na 16 16 | 005089 | 85 12       |                 sta.d 000012         
  80:000 | DONE wsp | na 16 16 |        |             |
  81:000 | DONE cmt | na 16 16 |        |             |                 ; The compiler pointer (CP) points to the first free byte
  82:000 | DONE cmt | na 16 16 |        |             |                 ; in the Dictionary
  83:000 | DONE ins | na 16 16 | 00508b | a9 00 03    |                 lda.# 000300         
  84:000 | DONE ins | na 16 16 | 00508e | 85 00       |                 sta.d 000000         
  85:000 | DONE wsp | na 16 16 |        |             |
  86:000 | DONE ins | na 16 16 | 005090 | a9 00 02    |                 lda.# 000200         
  87:000 | DONE ins | na 16 16 | 005093 | 85 08       |                 sta.d 000008         input buffer
  88:000 | DONE ins | na 16 16 | 005095 | 64 0a       |                 stz.d 00000a         input buffer starts empty
  89:000 | DONE ins | na 16 16 | 005097 | 64 06       |                 stz.d 000006         SOURCE-ID is zero
  90:000 | DONE ins | na 16 16 | 005099 | 64 14       |                 stz.d 000014         STATE is zero (interpret)
  91:000 | DONE wsp | na 16 16 |        |             |
  92:000 | DONE cmt | na 16 16 |        |             |                 ; The name token (nt) of DROP is always the first one in the
  93:000 | DONE cmt | na 16 16 |        |             |                 ; new Dictionary, so we start off the Dictionary Pointer (DP)
  94:000 | DONE cmt | na 16 16 |        |             |                 ; there. Anything that comes after that (with WORDS, before
  95:000 | DONE cmt | na 16 16 |        |             |                 ; that) is high-level
  96:000 | DONE ins | na 16 16 | 00509b | a9 9e 68    |                 lda.# 00689e         
  97:000 | DONE ins | na 16 16 | 00509e | 85 02       |                 sta.d 000002         
  98:000 | DONE wsp | na 16 16 |        |             |
  99:000 | DONE cmt | na 16 16 |        |             |                 ; Clean the screen, assumes vt100 terminal
 100:000 | DONE ins | na 16 16 | 0050a0 | 20 e2 5b    |                 jsr 005be2           
 101:000 | DONE wsp | na 16 16 |        |             |
 102:000 | DONE cmt | na 16 16 |        |             |                 ; Define high-level words via EVALUATE. At this point, whatever
 103:000 | DONE cmt | na 16 16 |        |             |                 ; is in Y (TOS) is garbage, so we don't have to push it to the
 104:000 | DONE cmt | na 16 16 |        |             |                 ; stack first
 105:000 | DONE ins | na 16 16 | 0050a3 | ca          |                 dex                  
 106:000 | DONE ins | na 16 16 | 0050a4 | ca          |                 dex                  
 107:000 | DONE ins | na 16 16 | 0050a5 | ca          |                 dex                  
 108:000 | DONE ins | na 16 16 | 0050a6 | ca          |                 dex                  
 109:000 | DONE ins | na 16 16 | 0050a7 | a9 b2 69    |                 lda.# 0069b2         
 110:000 | DONE ins | na 16 16 | 0050aa | 95 00       |                 sta.dx 00            Start address goes in NOS
 111:000 | DONE ins | na 16 16 | 0050ac | a0 0d 06    |                 ldy.# 00060d         length goes in TOS
 112:000 | DONE wsp | na 16 16 |        |             |
 113:000 | DONE ins | na 16 16 | 0050af | 20 be 58    |                 jsr 0058be           
 114:000 | DONE wsp | na 16 16 |        |             |
 115:000 | DONE cmt | na 16 16 |        |             |                 ; fall through to ABORT
 116:000 | DONE wsp | na 16 16 |        |             |
 117:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 118:000 | DONE cmt | na 16 16 |        |             | ; ABORT ( -- ) 8+ bytes / X cycles
 119:000 | DONE cmt | na 16 16 |        |             | ; Reset the parameter (data) stack pointer and continue as QUIT
 120:000 | DONE cmt | na 16 16 |        |             | ; We can jump here via subroutine because we reset the stack pointer
 121:000 | DONE cmt | na 16 16 |        |             | ; anyway. Flows into QUIT.
 122:000 | DONE lbl | na 16 16 | 0050b2 |             | xt_abort                             
 123:000 | DONE ins | na 16 16 | 0050b2 | c2 20       |                 rep 20               
 123:001 | DONE ctl | na 16 16 |        |             |         .!a16
 124:000 | DONE cmt | na 16 16 |        |             |                 ; clear Data Stack
 125:000 | DONE ins | na 16 16 | 0050b4 | a0 00 00    |                 ldy.# 0000           
 126:000 | DONE ins | na 16 16 | 0050b7 | a2 ff 00    |                 ldx.# 0000ff         
 127:000 | DONE wsp | na 16 16 |        |             |
 128:000 | DONE wsp | na 16 16 |        |             |
 129:000 | DONE cmt | na 16 16 |        |             | ; drops through to QUIT, z_abort is the same as z_quit.
 130:000 | DONE wsp | na 16 16 |        |             |
 131:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 132:000 | DONE cmt | na 16 16 |        |             | ; QUIT ( -- ) X bytes / X cycles
 133:000 | DONE cmt | na 16 16 |        |             | ; Reset the input, clearning Return Stack. Jumps to QUIT do not have to be
 134:000 | DONE cmt | na 16 16 |        |             | ; subroutine jumps as the Return Stack is cleared anyway. Liara Forth follows
 135:000 | DONE cmt | na 16 16 |        |             | ; the ANSI Forth recommendation to use REFILL. Note we don't display the "ok"
 136:000 | DONE cmt | na 16 16 |        |             | ; system prompt until after the first output. This follows Gforth.
 137:000 | DONE lbl | na 16 16 | 0050ba |             | xt_quit                              
 138:000 | DONE cmt | na 16 16 |        |             |                 ; clear Return Stack
 139:000 | DONE ins | na 16 16 | 0050ba | a9 ff 01    |                 lda.# 0001ff         
 140:000 | DONE ins | na 16 16 | 0050bd | 1b          |                 tcs                  
 141:000 | DONE wsp | na 16 16 |        |             |
 142:000 | DONE cmt | na 16 16 |        |             |                 ; make sure Instruction Pointer is empty
 143:000 | DONE cmt | na 16 16 |        |             |                 ; TODO move this someplace else or else it will end up in ROM
 144:000 | DONE ins | na 16 16 | 0050be | 9c ed 58    |                 stz 0058ed           
 145:000 | DONE wsp | na 16 16 |        |             |
 146:000 | DONE cmt | na 16 16 |        |             |                 ; switch SOURCE-ID to zero (keyboard input)
 147:000 | DONE ins | na 16 16 | 0050c1 | 64 06       |                 stz.d 000006         
 148:000 | DONE wsp | na 16 16 |        |             |
 149:000 | DONE cmt | na 16 16 |        |             |                 ; switch to interpret state (STATE is zero)
 150:000 | DONE ins | na 16 16 | 0050c3 | 64 14       |                 stz.d 000014         
 151:000 | DONE wsp | na 16 16 |        |             |
 152:000 | DONE lbl | na 16 16 | 0050c5 |             | quit_get_line                        
 153:000 | DONE cmt | na 16 16 |        |             |                 ; Empty current input buffer
 154:000 | DONE ins | na 16 16 | 0050c5 | 64 0a       |                 stz.d 00000a         
 155:000 | DONE wsp | na 16 16 |        |             |
 156:000 | DONE cmt | na 16 16 |        |             |                 ; Accept a line from the current input source
 157:000 | DONE ins | na 16 16 | 0050c7 | 20 b6 5c    |                 jsr 005cb6           ( -- f )
 158:000 | DONE wsp | na 16 16 |        |             |
 159:000 | DONE ins | na 16 16 | 0050ca | 98          |                 tya                  force flag test
 160:000 | DONE ins | na 16 16 | 0050cb | d0 06       |                 bne 0050d3           
 161:000 | DONE wsp | na 16 16 |        |             |
 162:000 | DONE cmt | na 16 16 |        |             |                 ; If REFILL returned a FALSE flag, something went wrong and we
 163:000 | DONE cmt | na 16 16 |        |             |                 ; need to print an error message and reset the machine. We don't
 164:000 | DONE cmt | na 16 16 |        |             |                 ; need to save TOS because we're going to clobber it anyway when we
 165:000 | DONE cmt | na 16 16 |        |             |                 ; go back to ABORT.
 166:000 | DONE ins | na 16 16 | 0050cd | a9 79 70    |                 lda.# 007079         
 167:000 | DONE ins | na 16 16 | 0050d0 | 4c 60 69    |                 jmp 006960           
 168:000 | DONE wsp | na 16 16 |        |             |
 169:000 | DONE wsp | na 16 16 |        |             |
 170:000 | DONE lbl | na 16 16 | 0050d3 |             | quit_refill_successful               
 171:000 | DONE cmt | na 16 16 |        |             |                 ; Assume we have successfully accepted a string of input from
 172:000 | DONE cmt | na 16 16 |        |             |                 ; a source, with address cib and length of input in ciblen. We
 173:000 | DONE cmt | na 16 16 |        |             |                 ; arrive here still with the TRUE flag from REFILL as TOS (in Y)
 174:000 | DONE ins | na 16 16 | 0050d3 | b4 00       |                 ldy.dx 00            drop TOS
 175:000 | DONE ins | na 16 16 | 0050d5 | e8          |                 inx                  
 176:000 | DONE ins | na 16 16 | 0050d6 | e8          |                 inx                  
 177:000 | DONE wsp | na 16 16 |        |             |
 178:000 | DONE cmt | na 16 16 |        |             |                 ; make >IN point to begining of buffer
 179:000 | DONE ins | na 16 16 | 0050d7 | 64 0c       |                 stz.d 00000c         
 180:000 | DONE wsp | na 16 16 |        |             |
 181:000 | DONE cmt | na 16 16 |        |             |                 ; Main compile/execute routine. Consider moving this inside QUIT
 182:000 | DONE cmt | na 16 16 |        |             |                 ; once we know everything works
 183:000 | DONE ins | na 16 16 | 0050d9 | 20 db 68    |                 jsr 0068db           
 184:000 | DONE wsp | na 16 16 |        |             |
 185:000 | DONE cmt | na 16 16 |        |             |                 ; Test for Data Stack underflow. Our stack is so large in single
 186:000 | DONE cmt | na 16 16 |        |             |                 ; user mode that we don't bother checking for overflow - if that
 187:000 | DONE cmt | na 16 16 |        |             |                 ; happens, we're screwed anyway
 188:000 | DONE ins | na 16 16 | 0050dc | e0 00 01    |                 cpx.# 000100         
 189:000 | DONE ins | na 16 16 | 0050df | 90 06       |                 bcc 0050e7           DSP must always be smaller (!) than DSP0
 190:000 | DONE wsp | na 16 16 |        |             |
 191:000 | DONE ins | na 16 16 | 0050e1 | a9 df 70    |                 lda.# 0070df         
 192:000 | DONE ins | na 16 16 | 0050e4 | 4c 60 69    |                 jmp 006960           
 193:000 | DONE wsp | na 16 16 |        |             |
 194:000 | DONE lbl | na 16 16 | 0050e7 |             | quit_ok                              
 195:000 | DONE cmt | na 16 16 |        |             |                 ; Display system prompt if all went well. If we're interpreting,
 196:000 | DONE cmt | na 16 16 |        |             |                 ; this is " ok", if we're compiling, it's " compiled"
 197:000 | DONE ins | na 16 16 | 0050e7 | a5 14       |                 lda.d 000014         
 198:000 | DONE ins | na 16 16 | 0050e9 | d0 05       |                 bne 0050f0           
 199:000 | DONE wsp | na 16 16 |        |             |
 200:000 | DONE ins | na 16 16 | 0050eb | a9 bf 6f    |                 lda.# 006fbf         
 201:000 | DONE ins | na 16 16 | 0050ee | 80 03       |                 bra 0050f3           
 202:000 | DONE lbl | na 16 16 | 0050f0 |             | quit_compiled                        
 203:000 | DONE ins | na 16 16 | 0050f0 | a9 c3 6f    |                 lda.# 006fc3         fall through to quit_print
 204:000 | DONE lbl | na 16 16 | 0050f3 |             | quit_print                           
 205:000 | DONE ins | na 16 16 | 0050f3 | 20 66 69    |                 jsr 006966           
 206:000 | DONE wsp | na 16 16 |        |             |
 207:000 | DONE cmt | na 16 16 |        |             |                 ; Awesome line, everybody. Now get the next one
 208:000 | DONE ins | na 16 16 | 0050f6 | 4c c5 50    |                 jmp 0050c5           
 209:000 | DONE wsp | na 16 16 |        |             |
 210:000 | DONE lbl | na 16 16 | 0050f9 |             | z_cold                               
 211:000 | DONE lbl | na 16 16 | 0050f9 |             | z_abort                              
 212:000 | DONE lbl | na 16 16 | 0050f9 |             | z_quit                               ; empty, no RTS required
 213:000 | DONE wsp | na 16 16 |        |             |
 214:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 215:000 | DONE cmt | na 16 16 |        |             | ; < "LESS" ( n m -- f ) X bytes / X cycles
 216:000 | DONE cmt | na 16 16 |        |             | ; Return true flag if NOS < TOS. See
 217:000 | DONE cmt | na 16 16 |        |             | ; http://www.6502.org/tutorials/compare_beyond.html for details on the
 218:000 | DONE cmt | na 16 16 |        |             | ; comparisons
 219:000 | DONE lbl | na 16 16 | 0050f9 |             | xt_less                              
 220:000 | DONE ins | na 16 16 | 0050f9 | 98          |                 tya                  
 221:000 | DONE ins | na 16 16 | 0050fa | a0 00 00    |                 ldy.# 0000           default is false
 222:000 | DONE wsp | na 16 16 |        |             |
 223:000 | DONE ins | na 16 16 | 0050fd | 38          |                 sec                  
 224:000 | DONE ins | na 16 16 | 0050fe | f5 00       |                 sbc.dx 00            
 225:000 | DONE ins | na 16 16 | 005100 | f0 08       |                 beq 00510a           the same is not greater
 226:000 | DONE ins | na 16 16 | 005102 | 50 03       |                 bvc 005107           no overflow, skip ahead
 227:000 | DONE wsp | na 16 16 |        |             |
 228:000 | DONE cmt | na 16 16 |        |             |                 ; Deal with oveflow because we use signed numbers
 229:000 | DONE ins | na 16 16 | 005104 | 49 00 80    |                 eor.# 8000           compliment negative flag
 230:000 | DONE wsp | na 16 16 |        |             |
 231:000 | DONE lbl | na 16 16 | 005107 |             | less_no_ov                           
 232:000 | DONE cmt | na 16 16 |        |             |                 ; if we're negative TOS > NOS
 233:000 | DONE ins | na 16 16 | 005107 | 30 01       |                 bmi 00510a           
 234:000 | DONE ins | na 16 16 | 005109 | 88          |                 dey                  
 235:000 | DONE lbl | na 16 16 | 00510a |             | less_nip                             
 236:000 | DONE ins | na 16 16 | 00510a | e8          |                 inx                  
 237:000 | DONE ins | na 16 16 | 00510b | e8          |                 inx                  
 238:000 | DONE wsp | na 16 16 |        |             |
 239:000 | DONE lbl | na 16 16 | 00510c |             | z_less                               
 239:001 | DONE ins | na 16 16 | 00510c | 60          |                 rts                  
 240:000 | DONE wsp | na 16 16 |        |             |
 241:000 | DONE wsp | na 16 16 |        |             |
 242:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 243:000 | DONE cmt | na 16 16 |        |             | ; <> "NOT-EQUAL" ( n m -- f ) X bytes / X cycles
 244:000 | DONE cmt | na 16 16 |        |             | ; Return true flag if TOS and NOS are not the same. This is just a different
 245:000 | DONE cmt | na 16 16 |        |             | ; version of EQUAL, we repeat the code for speed reasons
 246:000 | DONE lbl | na 16 16 | 00510d |             | xt_not-equal                         
 247:000 | DONE ins | na 16 16 | 00510d | 98          |                 tya                  
 248:000 | DONE ins | na 16 16 | 00510e | a0 00 00    |                 ldy.# 0000           default value is false
 249:000 | DONE wsp | na 16 16 |        |             |
 250:000 | DONE ins | na 16 16 | 005111 | d5 00       |                 cmp.dx 00            
 251:000 | DONE ins | na 16 16 | 005113 | f0 01       |                 beq 005116           
 252:000 | DONE ins | na 16 16 | 005115 | 88          |                 dey                  wraps to 0FFFF (true)
 253:000 | DONE wsp | na 16 16 |        |             |
 254:000 | DONE lbl | na 16 16 | 005116 |             | not-equal_equal                      ; yes, this is a silly name
 255:000 | DONE ins | na 16 16 | 005116 | e8          |                 inx                  
 256:000 | DONE ins | na 16 16 | 005117 | e8          |                 inx                  
 257:000 | DONE wsp | na 16 16 |        |             |
 258:000 | DONE lbl | na 16 16 | 005118 |             | z_not-equal                          
 258:001 | DONE ins | na 16 16 | 005118 | 60          |                 rts                  
 259:000 | DONE wsp | na 16 16 |        |             |
 260:000 | DONE wsp | na 16 16 |        |             |
 261:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 262:000 | DONE cmt | na 16 16 |        |             | ; <# "LESSNUMBER" ( -- ) 8 bytes / X cycles
 263:000 | DONE cmt | na 16 16 |        |             | ; Start the process to create pictured numeric output. The new string is
 264:000 | DONE cmt | na 16 16 |        |             | ; constructed from back to front, saving the new character at the beginning of
 265:000 | DONE cmt | na 16 16 |        |             | ; the output string. Since we use PAD as a starting address and work backward
 266:000 | DONE cmt | na 16 16 |        |             | ; (!), the string is constructed in the space between the end of the dictionary
 267:000 | DONE cmt | na 16 16 |        |             | ; (as defined by CP) and the PAD. This allows us to satisfy the ANS Forth
 268:000 | DONE cmt | na 16 16 |        |             | ; condition that programs don't fool around with the PAD but still use its
 269:000 | DONE cmt | na 16 16 |        |             | ; address. Code based on pForth, see
 270:000 | DONE cmt | na 16 16 |        |             | ; http://pforth.googlecode.com/svn/trunk/fth/numberio.fth pForth is in the pubic
 271:000 | DONE cmt | na 16 16 |        |             | ; domain. Forth is : <# PAD HLD ! ; we use the internal variable tohold instead
 272:000 | DONE cmt | na 16 16 |        |             | ; of HLD.
 273:000 | DONE cmt | na 16 16 |        |             | ; TODO consider using OUTPUT buffer as a location instead
 274:000 | DONE lbl | na 16 16 | 005119 |             | xt_lessnumber                        
 275:000 | DONE ins | na 16 16 | 005119 | 20 d6 5b    |                 jsr 005bd6           
 276:000 | DONE ins | na 16 16 | 00511c | 84 18       |                 sty.d 000018         
 277:000 | DONE wsp | na 16 16 |        |             |
 278:000 | DONE ins | na 16 16 | 00511e | b4 00       |                 ldy.dx 00            
 279:000 | DONE ins | na 16 16 | 005120 | e8          |                 inx                  
 280:000 | DONE ins | na 16 16 | 005121 | e8          |                 inx                  
 281:000 | DONE wsp | na 16 16 |        |             |
 282:000 | DONE lbl | na 16 16 | 005122 |             | z_lessnumber                         
 282:001 | DONE ins | na 16 16 | 005122 | 60          |                 rts                  
 283:000 | DONE wsp | na 16 16 |        |             |
 284:000 | DONE wsp | na 16 16 |        |             |
 285:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 286:000 | DONE cmt | na 16 16 |        |             | ; > "GREATER" ( n m -- f ) X bytes / X cycles
 287:000 | DONE cmt | na 16 16 |        |             | ; Return true flag if NOS > TOS. See
 288:000 | DONE cmt | na 16 16 |        |             | ; http://www.6502.org/tutorials/compare_beyond.html for details on the
 289:000 | DONE cmt | na 16 16 |        |             | ; comparisons
 290:000 | DONE lbl | na 16 16 | 005123 |             | xt_greater                           
 291:000 | DONE ins | na 16 16 | 005123 | 98          |                 tya                  
 292:000 | DONE ins | na 16 16 | 005124 | a0 00 00    |                 ldy.# 0000           default is false
 293:000 | DONE wsp | na 16 16 |        |             |
 294:000 | DONE ins | na 16 16 | 005127 | 38          |                 sec                  
 295:000 | DONE ins | na 16 16 | 005128 | f5 00       |                 sbc.dx 00            
 296:000 | DONE ins | na 16 16 | 00512a | f0 08       |                 beq 005134           the same is not greater
 297:000 | DONE ins | na 16 16 | 00512c | 50 03       |                 bvc 005131           no overflow, skip ahead
 298:000 | DONE wsp | na 16 16 |        |             |
 299:000 | DONE cmt | na 16 16 |        |             |                 ; Deal with oveflow because we use signed numbers
 300:000 | DONE ins | na 16 16 | 00512e | 49 00 80    |                 eor.# 8000           compliment negative flag
 301:000 | DONE wsp | na 16 16 |        |             |
 302:000 | DONE lbl | na 16 16 | 005131 |             | greater_no_ov                        
 303:000 | DONE cmt | na 16 16 |        |             |                 ; if we're still positiv, TOS < NOS
 304:000 | DONE ins | na 16 16 | 005131 | 10 01       |                 bpl 005134           
 305:000 | DONE ins | na 16 16 | 005133 | 88          |                 dey                  
 306:000 | DONE lbl | na 16 16 | 005134 |             | greater_nip                          
 307:000 | DONE ins | na 16 16 | 005134 | e8          |                 inx                  
 308:000 | DONE ins | na 16 16 | 005135 | e8          |                 inx                  
 309:000 | DONE wsp | na 16 16 |        |             |
 310:000 | DONE lbl | na 16 16 | 005136 |             | z_greater                            
 310:001 | DONE ins | na 16 16 | 005136 | 60          |                 rts                  
 311:000 | DONE wsp | na 16 16 |        |             |
 312:000 | DONE wsp | na 16 16 |        |             |
 313:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 314:000 | DONE cmt | na 16 16 |        |             | ; >BODY "TOBODY" ( xt -- addr ) 3 bytes / 6 cycles
 315:000 | DONE cmt | na 16 16 |        |             | ; Given a word's execution token (xt), return the address of the start of that
 316:000 | DONE cmt | na 16 16 |        |             | ; word's parameter field (PFA). This is the address that HERE would return right
 317:000 | DONE cmt | na 16 16 |        |             | ; after CREATE. This is a difficult word for STC Forths, because most words
 318:000 | DONE cmt | na 16 16 |        |             | ; don't have a Code Field Area (CFA) to skip. We solve this by testing if the
 319:000 | DONE cmt | na 16 16 |        |             | ; first three bytes of the body (that starts at xt) are subroutine jumps to
 320:000 | DONE cmt | na 16 16 |        |             | ; DOVAR, DOCONST or DODOES
 321:000 | DONE lbl | na 16 16 | 005137 |             | xt_tobody                            
 322:000 | DONE cmt | na 16 16 |        |             |                 ; In the header, xt already points to the CFA, which CREATE by
 323:000 | DONE cmt | na 16 16 |        |             |                 ; default fills with a JSR to DOVAR
 324:000 | DONE ins | na 16 16 | 005137 | e2 20       |                 sep 20               
 324:001 | DONE ctl | na  8 16 |        |             |         .!a8
 325:000 | DONE ins | na  8 16 | 005139 | b9 00 00    |                 lda.y 0000           see if we have a JSR instruction
 326:000 | DONE ins | na  8 16 | 00513c | c9 20       |                 cmp.# 20             
 327:000 | DONE ins | na  8 16 | 00513e | c2 20       |                 rep 20               
 327:001 | DONE ctl | na 16 16 |        |             |         .!a16
 328:000 | DONE ins | na 16 16 | 005140 | d0 18       |                 bne 00515a           
 329:000 | DONE wsp | na 16 16 |        |             |
 330:000 | DONE cmt | na 16 16 |        |             |                 ; Okay, so we found a JSR instruction. But is it one of the
 331:000 | DONE cmt | na 16 16 |        |             |                 ; right ones?
 332:000 | DONE ins | na 16 16 | 005142 | c8          |                 iny                  
 333:000 | DONE ins | na 16 16 | 005143 | b9 00 00    |                 lda.y 0000           
 334:000 | DONE wsp | na 16 16 |        |             |
 335:000 | DONE ins | na 16 16 | 005146 | c9 d4 68    |                 cmp.# 0068d4         
 336:000 | DONE ins | na 16 16 | 005149 | f0 0d       |                 beq 005158           
 337:000 | DONE ins | na 16 16 | 00514b | c9 aa 68    |                 cmp.# 0068aa         
 338:000 | DONE ins | na 16 16 | 00514e | f0 08       |                 beq 005158           
 339:000 | DONE ins | na 16 16 | 005150 | c9 c7 68    |                 cmp.# 0068c7         
 340:000 | DONE ins | na 16 16 | 005153 | f0 03       |                 beq 005158           
 341:000 | DONE wsp | na 16 16 |        |             |
 342:000 | DONE cmt | na 16 16 |        |             |                 ; This is some other jump, so we go back to beginning of word
 343:000 | DONE ins | na 16 16 | 005155 | 88          |                 dey                  restor original xt
 344:000 | DONE ins | na 16 16 | 005156 | 80 02       |                 bra 00515a           
 345:000 | DONE wsp | na 16 16 |        |             |
 346:000 | DONE lbl | na 16 16 | 005158 |             | tobody_have_cfa                      
 347:000 | DONE cmt | na 16 16 |        |             |                 ; Got the right kind of jump. We've already increased the index
 348:000 | DONE cmt | na 16 16 |        |             |                 ; by one, so we just have to add two
 349:000 | DONE ins | na 16 16 | 005158 | c8          |                 iny                  
 350:000 | DONE ins | na 16 16 | 005159 | c8          |                 iny                  drops through to end
 351:000 | DONE wsp | na 16 16 |        |             |
 352:000 | DONE lbl | na 16 16 | 00515a |             | tobody_nojsr                         
 353:000 | DONE cmt | na 16 16 |        |             |                 ; If we don't have a jump instruction, the xt already points to
 354:000 | DONE cmt | na 16 16 |        |             |                 ; the PFA, because there is no CFA
 355:000 | DONE cmt | na 16 16 |        |             |                 ; body
 356:000 | DONE wsp | na 16 16 |        |             |
 357:000 | DONE lbl | na 16 16 | 00515a |             | z_tobody                             
 357:001 | DONE ins | na 16 16 | 00515a | 60          |                 rts                  
 358:000 | DONE wsp | na 16 16 |        |             |
 359:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 360:000 | DONE cmt | na 16 16 |        |             | ; >IN "TOIN" ( -- addr ) 6 bytes / 12 cycles
 361:000 | DONE cmt | na 16 16 |        |             | ; Return address where pointer to current char in input buffer lives (>IN)
 362:000 | DONE lbl | na 16 16 | 00515b |             | xt_to-in                             
 363:000 | DONE ins | na 16 16 | 00515b | ca          |                 dex                  
 364:000 | DONE ins | na 16 16 | 00515c | ca          |                 dex                  
 365:000 | DONE ins | na 16 16 | 00515d | 94 00       |                 sty.dx 00            
 366:000 | DONE wsp | na 16 16 |        |             |
 367:000 | DONE ins | na 16 16 | 00515f | a0 0c 00    |                 ldy.# 00000c         >IN
 368:000 | DONE lbl | na 16 16 | 005162 |             | z_to-in                              
 368:001 | DONE ins | na 16 16 | 005162 | 60          |                 rts                  
 369:000 | DONE wsp | na 16 16 |        |             |
 370:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 371:000 | DONE cmt | na 16 16 |        |             | ; >NUMBER ( ud addr u -- ud addr u ) X bytes / X cycles
 372:000 | DONE cmt | na 16 16 |        |             | ; Convert a string to a double number. Logic here is based on the routine by
 373:000 | DONE cmt | na 16 16 |        |             | ; Phil Burk of the same name in pForth; see
 374:000 | DONE cmt | na 16 16 |        |             | ; https://github.com/philburk/pforth/blob/master/fth/numberio.fth the original
 375:000 | DONE cmt | na 16 16 |        |             | ; Forth code. We arrive here from NUMBER which has made sure that we don't have
 376:000 | DONE cmt | na 16 16 |        |             | ; to deal with a sign and we don't have to deal with a dot as a last character
 377:000 | DONE cmt | na 16 16 |        |             | ; that signalizes double - this should be a pure number string.
 378:000 | DONE cmt | na 16 16 |        |             | ; This routine calles UM*, which uses tmp1, tmp2 and tmp3, so we cannot access
 379:000 | DONE cmt | na 16 16 |        |             | ; any of those.
 380:000 | DONE lbl | na 16 16 | 005163 |             | xt_tonumber                          
 381:000 | DONE dir | na 16 16 |        |             |         .!a16                        
 382:000 | DONE cmt | na 16 16 |        |             |                 ; For the math routine, we move the inputs to the scratchpad to
 383:000 | DONE cmt | na 16 16 |        |             |                 ; avoid having to fool around with the Data Stack.
 384:000 | DONE cmt | na 16 16 |        |             |                 ;
 385:000 | DONE cmt | na 16 16 |        |             |                 ;     +-----+-----+-----+-----+-----+-----+-----+-----+
 386:000 | DONE cmt | na 16 16 |        |             |                 ;     |   UD-LO   |   UD-HI   |     N     | UD-HI-LO  |
 387:000 | DONE cmt | na 16 16 |        |             |                 ;     |           |           |           |           |
 388:000 | DONE cmt | na 16 16 |        |             |                 ;     |  S    S+1 | S+2   S+3 | S+4   S+5 | S+6   S+7 |
 389:000 | DONE cmt | na 16 16 |        |             |                 ;     +-----+-----+-----+-----+-----+-----+-----+-----+
 390:000 | DONE wsp | na 16 16 |        |             |
 391:000 | DONE cmt | na 16 16 |        |             |                 ; The math routine works by converting one character to its
 392:000 | DONE cmt | na 16 16 |        |             |                 ; numerical value (N) via DIGIT? and storing it in S+4 for
 393:000 | DONE cmt | na 16 16 |        |             |                 ; the moment. We then multiply the UD-HI value with the radix
 394:000 | DONE cmt | na 16 16 |        |             |                 ; (from BASE) using UM*, which returns a double-cell result. We
 395:000 | DONE cmt | na 16 16 |        |             |                 ; discard the high cell of that result (UD-HI-HI) and store the
 396:000 | DONE cmt | na 16 16 |        |             |                 ; low cell (UD-HI-LO) in S+6 for now. -- The second part is
 397:000 | DONE cmt | na 16 16 |        |             |                 ; multiplying UD-LO with the radix. The high cell (UD-LO-HI)
 398:000 | DONE cmt | na 16 16 |        |             |                 ; gets put in S+2, the low cell (HD-LO-LO) in S. We then use
 399:000 | DONE cmt | na 16 16 |        |             |                 ; a version of D+ to add ( S S+2 ) and ( S+4 S+6) together,
 400:000 | DONE cmt | na 16 16 |        |             |                 ; storing the result back in S and S+2, before we start another
 401:000 | DONE cmt | na 16 16 |        |             |                 ; round with it as the new UD-LO and UD-HI.
 402:000 | DONE wsp | na 16 16 |        |             |
 403:000 | DONE cmt | na 16 16 |        |             |                 ; Fill the scratchpad. We arrive with ( ud-lo ud-hi addr u ).
 404:000 | DONE cmt | na 16 16 |        |             |                 ; After this step, the original ud-lo and ud-hi will still be on
 405:000 | DONE cmt | na 16 16 |        |             |                 ; the Data Stack, but will be ignored and later overwritten
 406:000 | DONE ins | na 16 16 | 005163 | b5 04       |                 lda.dx 04            ud-lo
 407:000 | DONE ins | na 16 16 | 005165 | 85 28       |                 sta.d 000028         
 408:000 | DONE ins | na 16 16 | 005167 | b5 02       |                 lda.dx 02            ud-hi
 409:000 | DONE ins | na 16 16 | 005169 | 85 2a       |                 sta.d 00002a         
 410:000 | DONE wsp | na 16 16 |        |             |
 411:000 | DONE cmt | na 16 16 |        |             |                 ; We push down one on the Data Stack to use TOS for character
 412:000 | DONE cmt | na 16 16 |        |             |                 ; conversion - now ( ud-lo ud-hi addr u u )
 413:000 | DONE ins | na 16 16 | 00516b | ca          |                 dex                  
 414:000 | DONE ins | na 16 16 | 00516c | ca          |                 dex                  
 415:000 | DONE ins | na 16 16 | 00516d | 94 00       |                 sty.dx 00            
 416:000 | DONE wsp | na 16 16 |        |             |
 417:000 | DONE lbl | na 16 16 | 00516f |             | tonumber_loop                        
 418:000 | DONE cmt | na 16 16 |        |             |                 ; Get one character
 419:000 | DONE ins | na 16 16 | 00516f | a1 02       |                 lda.dxi 02           
 420:000 | DONE ins | na 16 16 | 005171 | a8          |                 tay                  ( ud-lo ud-hi addr u char )
 421:000 | DONE wsp | na 16 16 |        |             |
 422:000 | DONE cmt | na 16 16 |        |             |                 ; Convert one character. DIGIT? takes care of the correct
 423:000 | DONE cmt | na 16 16 |        |             |                 ; register size for A and does a paranoid AND to make sure that
 424:000 | DONE cmt | na 16 16 |        |             |                 ; B is zero, so we don't have to do any of that here.
 425:000 | DONE ins | na 16 16 | 005172 | 20 b1 57    |                 jsr 0057b1           ( char -- n -1 | char 0 )
 426:000 | DONE wsp | na 16 16 |        |             |
 427:000 | DONE cmt | na 16 16 |        |             |                 ; This gives us (ud-lo ud-hi addr u char f | n f ), so check the
 428:000 | DONE cmt | na 16 16 |        |             |                 ; flag. If it is zero, we return what we have and let the caller
 429:000 | DONE cmt | na 16 16 |        |             |                 ; (usually NUMBER) complain to the user
 430:000 | DONE ins | na 16 16 | 005175 | 98          |                 tya                  
 431:000 | DONE ins | na 16 16 | 005176 | d0 06       |                 bne 00517e           
 432:000 | DONE wsp | na 16 16 |        |             |
 433:000 | DONE ins | na 16 16 | 005178 | b4 00       |                 ldy.dx 00            
 434:000 | DONE ins | na 16 16 | 00517a | e8          |                 inx                  
 435:000 | DONE ins | na 16 16 | 00517b | e8          |                 inx                  
 436:000 | DONE ins | na 16 16 | 00517c | 80 35       |                 bra 0051b3           
 437:000 | DONE wsp | na 16 16 |        |             |
 438:000 | DONE lbl | na 16 16 | 00517e |             | tonumber_ok                          
 439:000 | DONE cmt | na 16 16 |        |             |                 ; Conversion was successful, so we're here with
 440:000 | DONE cmt | na 16 16 |        |             |                 ; ( ud-lo ud-hi addr u n -1 ) and can start the math routine.
 441:000 | DONE wsp | na 16 16 |        |             |
 442:000 | DONE cmt | na 16 16 |        |             |                 ; Save N so we don't have to fool around with the Data Stack
 443:000 | DONE ins | na 16 16 | 00517e | b5 00       |                 lda.dx 00            
 444:000 | DONE ins | na 16 16 | 005180 | 85 2c       |                 sta.d 00002c         
 445:000 | DONE wsp | na 16 16 |        |             |
 446:000 | DONE cmt | na 16 16 |        |             |                 ; Now multiply ud-hi (the one in the scratchpad, not the
 447:000 | DONE cmt | na 16 16 |        |             |                 ; original one in the Data Stack) by the radix from BASE. We can
 448:000 | DONE cmt | na 16 16 |        |             |                 ; clobber TOS and NOS
 449:000 | DONE ins | na 16 16 | 005182 | a5 2a       |                 lda.d 00002a         
 450:000 | DONE ins | na 16 16 | 005184 | 95 00       |                 sta.dx 00            
 451:000 | DONE ins | na 16 16 | 005186 | a4 16       |                 ldy.d 000016         ( ud-lo ud-hi addr u ud-hi base )
 452:000 | DONE wsp | na 16 16 |        |             |
 453:000 | DONE cmt | na 16 16 |        |             |                 ; UM* returns a double celled number
 454:000 | DONE ins | na 16 16 | 005188 | 20 a7 5e    |                 jsr 005ea7           ( ud-lo ud-hi addr u ud-hi-lo ud-hi-hi )
 455:000 | DONE wsp | na 16 16 |        |             |
 456:000 | DONE cmt | na 16 16 |        |             |                 ; Move ud-hi-lo to safety
 457:000 | DONE ins | na 16 16 | 00518b | b5 00       |                 lda.dx 00            ud-hi-lo
 458:000 | DONE ins | na 16 16 | 00518d | 85 2e       |                 sta.d 00002e         
 459:000 | DONE wsp | na 16 16 |        |             |
 460:000 | DONE cmt | na 16 16 |        |             |                 ; Now we multiply ud-lo, overwriting the stack entries
 461:000 | DONE ins | na 16 16 | 00518f | a5 28       |                 lda.d 000028         
 462:000 | DONE ins | na 16 16 | 005191 | 95 00       |                 sta.dx 00            ( ud-lo ud-hi addr u ud-lo ud-hi-hi )
 463:000 | DONE ins | na 16 16 | 005193 | a4 16       |                 ldy.d 000016         ( ud-lo ud-hi addr u ud-lo base )
 464:000 | DONE wsp | na 16 16 |        |             |
 465:000 | DONE ins | na 16 16 | 005195 | 20 a7 5e    |                 jsr 005ea7           ( ud-lo ud-hi addr u ud-lo-lo ud-lo-hi )
 466:000 | DONE ins | na 16 16 | 005198 | 84 2a       |                 sty.d 00002a         
 467:000 | DONE ins | na 16 16 | 00519a | b5 00       |                 lda.dx 00            
 468:000 | DONE ins | na 16 16 | 00519c | 85 28       |                 sta.d 000028         
 469:000 | DONE wsp | na 16 16 |        |             |
 470:000 | DONE cmt | na 16 16 |        |             |                 ; This is a faster version of D+
 471:000 | DONE ins | na 16 16 | 00519e | a5 28       |                 lda.d 000028         
 472:000 | DONE ins | na 16 16 | 0051a0 | 18          |                 clc                  
 473:000 | DONE ins | na 16 16 | 0051a1 | 65 2c       |                 adc.d 00002c         
 474:000 | DONE ins | na 16 16 | 0051a3 | 85 28       |                 sta.d 000028         this is the new ud-lo
 475:000 | DONE ins | na 16 16 | 0051a5 | a5 2a       |                 lda.d 00002a         
 476:000 | DONE ins | na 16 16 | 0051a7 | 65 2e       |                 adc.d 00002e         
 477:000 | DONE ins | na 16 16 | 0051a9 | 85 2a       |                 sta.d 00002a         this is the new ud-hi
 478:000 | DONE wsp | na 16 16 |        |             |
 479:000 | DONE cmt | na 16 16 |        |             |                 ; Clean up: Get rid of one of the two top elements on the Data
 480:000 | DONE cmt | na 16 16 |        |             |                 ; Stack. NIP is faster if Y is TOS
 481:000 | DONE ins | na 16 16 | 0051ab | e8          |                 inx                  
 482:000 | DONE ins | na 16 16 | 0051ac | e8          |                 inx                  ( ud-lo ud-hi addr u ud-lo-hi )
 483:000 | DONE wsp | na 16 16 |        |             |
 484:000 | DONE cmt | na 16 16 |        |             |                 ; One character down
 485:000 | DONE ins | na 16 16 | 0051ad | f6 02       |                 inc.dx 02            increase address
 486:000 | DONE ins | na 16 16 | 0051af | d6 00       |                 dec.dx 00            decrease length
 487:000 | DONE wsp | na 16 16 |        |             |
 488:000 | DONE ins | na 16 16 | 0051b1 | d0 bc       |                 bne 00516f           
 489:000 | DONE wsp | na 16 16 |        |             |
 490:000 | DONE lbl | na 16 16 | 0051b3 |             | tonumber_done                        
 491:000 | DONE cmt | na 16 16 |        |             |                 ; Counter has reached zero or we have an error. In both cases,
 492:000 | DONE cmt | na 16 16 |        |             |                 ; we clean up the Data Stack and return. We arrive here with
 493:000 | DONE cmt | na 16 16 |        |             |                 ; ( ud-lo ud-hi addr u char ) if there was an error
 494:000 | DONE cmt | na 16 16 |        |             |                 ; and ( ud-lo ud-hi addr u ud-lo ) if not
 495:000 | DONE ins | na 16 16 | 0051b3 | b4 00       |                 ldy.dx 00            
 496:000 | DONE ins | na 16 16 | 0051b5 | e8          |                 inx                  
 497:000 | DONE ins | na 16 16 | 0051b6 | e8          |                 inx                  ( ud-lo ud-hi addr u )
 498:000 | DONE wsp | na 16 16 |        |             |
 499:000 | DONE cmt | na 16 16 |        |             |                 ; The new ud-lo and ud-hi are still on the scratch pad
 500:000 | DONE ins | na 16 16 | 0051b7 | a5 28       |                 lda.d 000028         new ud-lo
 501:000 | DONE ins | na 16 16 | 0051b9 | 95 04       |                 sta.dx 04            
 502:000 | DONE ins | na 16 16 | 0051bb | a5 2a       |                 lda.d 00002a         
 503:000 | DONE ins | na 16 16 | 0051bd | 95 02       |                 sta.dx 02            new ud-hi
 504:000 | DONE wsp | na 16 16 |        |             |
 505:000 | DONE lbl | na 16 16 | 0051bf |             | z_tonumber                           
 505:001 | DONE ins | na 16 16 | 0051bf | 60          |                 rts                  
 506:000 | DONE wsp | na 16 16 |        |             |
 507:000 | DONE wsp | na 16 16 |        |             |
 508:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 509:000 | DONE cmt | na 16 16 |        |             | ; >R "TOR" ( n -- ) (R: -- n )  7 bytes / 22 cycles
 510:000 | DONE cmt | na 16 16 |        |             | ; Move Top of Data Stack to Top of Return Stack
 511:000 | DONE cmt | na 16 16 |        |             | ; TODO consider stripping PHA/PLA if natively compiled (see COMPILE,)
 512:000 | DONE lbl | na 16 16 | 0051c0 |             | xt_tor                               
 513:000 | DONE dir | na 16 16 |        |             |         .!a16                        
 514:000 | DONE cmt | na 16 16 |        |             |                 ; Save the return address. If this word is natively coded, this
 515:000 | DONE cmt | na 16 16 |        |             |                 ; is a complete waste of nine cycles, but required for
 516:000 | DONE cmt | na 16 16 |        |             |                 ; subroutine coding
 517:000 | DONE ins | na 16 16 | 0051c0 | 68          |                 pla                  
 518:000 | DONE cmt | na 16 16 |        |             |                 ; --- cut for native coding ---
 519:000 | DONE wsp | na 16 16 |        |             |
 520:000 | DONE ins | na 16 16 | 0051c1 | 5a          |                 phy                  the actual work
 521:000 | DONE wsp | na 16 16 |        |             |
 522:000 | DONE ins | na 16 16 | 0051c2 | b4 00       |                 ldy.dx 00            DROP
 523:000 | DONE ins | na 16 16 | 0051c4 | e8          |                 inx                  
 524:000 | DONE ins | na 16 16 | 0051c5 | e8          |                 inx                  
 525:000 | DONE wsp | na 16 16 |        |             |
 526:000 | DONE cmt | na 16 16 |        |             |                 ; --- cut for native coding ---
 527:000 | DONE ins | na 16 16 | 0051c6 | 48          |                 pha                  put return address back in place
 528:000 | DONE wsp | na 16 16 |        |             |
 529:000 | DONE lbl | na 16 16 | 0051c7 |             | z_tor                                
 529:001 | DONE ins | na 16 16 | 0051c7 | 60          |                 rts                  
 530:000 | DONE wsp | na 16 16 |        |             |
 531:000 | DONE wsp | na 16 16 |        |             |
 532:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 533:000 | DONE cmt | na 16 16 |        |             | ; /STRING ( addr u n -- ) X bytes / X cycles
 534:000 | DONE cmt | na 16 16 |        |             | ; Remove characters from front of string. Uses tmp1
 535:000 | DONE cmt | na 16 16 |        |             | ; Forth version: ROT OVER + ROT ROT - ;
 536:000 | DONE cmt | na 16 16 |        |             | ; TODO check for negative strings so 1 /STRING TYPE won't try to print the whole
 537:000 | DONE cmt | na 16 16 |        |             | ; address space; follow Gforth in failing gracefully
 538:000 | DONE lbl | na 16 16 | 0051c8 |             | xt_slashstring                       
 539:000 | DONE ins | na 16 16 | 0051c8 | 84 1c       |                 sty.d 00001c         
 540:000 | DONE wsp | na 16 16 |        |             |
 541:000 | DONE ins | na 16 16 | 0051ca | b5 00       |                 lda.dx 00            length
 542:000 | DONE ins | na 16 16 | 0051cc | 38          |                 sec                  
 543:000 | DONE ins | na 16 16 | 0051cd | e5 1c       |                 sbc.d 00001c         
 544:000 | DONE ins | na 16 16 | 0051cf | a8          |                 tay                  
 545:000 | DONE wsp | na 16 16 |        |             |
 546:000 | DONE ins | na 16 16 | 0051d0 | b5 02       |                 lda.dx 02            address
 547:000 | DONE ins | na 16 16 | 0051d2 | 18          |                 clc                  
 548:000 | DONE ins | na 16 16 | 0051d3 | 65 1c       |                 adc.d 00001c         
 549:000 | DONE ins | na 16 16 | 0051d5 | 95 02       |                 sta.dx 02            
 550:000 | DONE wsp | na 16 16 |        |             |
 551:000 | DONE ins | na 16 16 | 0051d7 | e8          |                 inx                  
 552:000 | DONE ins | na 16 16 | 0051d8 | e8          |                 inx                  
 553:000 | DONE wsp | na 16 16 |        |             |
 554:000 | DONE lbl | na 16 16 | 0051d9 |             | z_slashstring                        
 554:001 | DONE ins | na 16 16 | 0051d9 | 60          |                 rts                  
 555:000 | DONE wsp | na 16 16 |        |             |
 556:000 | DONE wsp | na 16 16 |        |             |
 557:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 558:000 | DONE cmt | na 16 16 |        |             | ; . "DOT" ( n -- ) X bytes / X cycles
 559:000 | DONE cmt | na 16 16 |        |             | ; Print value that is TOS followed by a single space. Forth code is
 560:000 | DONE cmt | na 16 16 |        |             | ; DUP ABS 0 <# #S ROT SIGN #> TYPE SPACE   Based on
 561:000 | DONE cmt | na 16 16 |        |             | ; https://github.com/philburk/pforth/blob/master/fth/numberio.fth Since this is
 562:000 | DONE cmt | na 16 16 |        |             | ; used interactively, and humans are slow (just ask GlaDOS), we focus on size.
 563:000 | DONE lbl | na 16 16 | 0051da |             | xt_dot                               
 564:000 | DONE ins | na 16 16 | 0051da | 20 8f 58    |                 jsr 00588f           ( n n )
 565:000 | DONE ins | na 16 16 | 0051dd | 20 81 54    |                 jsr 005481           ( n n )
 566:000 | DONE ins | na 16 16 | 0051e0 | 20 68 53    |                 jsr 005368           ( n n 0 )
 567:000 | DONE ins | na 16 16 | 0051e3 | 20 19 51    |                 jsr 005119           ( n n 0 )
 568:000 | DONE ins | na 16 16 | 0051e6 | 20 b6 52    |                 jsr 0052b6           ( n ud )
 569:000 | DONE ins | na 16 16 | 0051e9 | 20 de 5c    |                 jsr 005cde           ( ud n )
 570:000 | DONE ins | na 16 16 | 0051ec | 20 41 5d    |                 jsr 005d41           ( ud )
 571:000 | DONE ins | na 16 16 | 0051ef | 20 a7 52    |                 jsr 0052a7           
 572:000 | DONE ins | na 16 16 | 0051f2 | 20 62 5e    |                 jsr 005e62           
 573:000 | DONE ins | na 16 16 | 0051f5 | 20 1e 5e    |                 jsr 005e1e           
 574:000 | DONE wsp | na 16 16 |        |             |
 575:000 | DONE lbl | na 16 16 | 0051f8 |             | z_dot                                
 575:001 | DONE ins | na 16 16 | 0051f8 | 60          |                 rts                  
 576:000 | DONE wsp | na 16 16 |        |             |
 577:000 | DONE wsp | na 16 16 |        |             |
 578:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 579:000 | DONE cmt | na 16 16 |        |             | ; ." "DOTQUOTE" ( -- ) X bytes / X cycles
 580:000 | DONE cmt | na 16 16 |        |             | ; Compile string that is printed during run time. ANSI Forth wants this to be
 581:000 | DONE cmt | na 16 16 |        |             | ; compile-only, even though everybody and their friend uses it for everything.
 582:000 | DONE cmt | na 16 16 |        |             | ; We follow the book here, and recommend .( for general printing.
 583:000 | DONE lbl | na 16 16 | 0051f9 |             | xt_dotquote                          
 584:000 | DONE ins | na 16 16 | 0051f9 | ca          |                 dex                  
 585:000 | DONE ins | na 16 16 | 0051fa | ca          |                 dex                  
 586:000 | DONE ins | na 16 16 | 0051fb | 94 00       |                 sty.dx 00            
 587:000 | DONE ins | na 16 16 | 0051fd | a0 22 00    |                 ldy.# 0022           ASCII for "
 588:000 | DONE wsp | na 16 16 |        |             |
 589:000 | DONE ins | na 16 16 | 005200 | 20 21 5c    |                 jsr 005c21           
 590:000 | DONE ins | na 16 16 | 005203 | 20 4f 5d    |                 jsr 005d4f           
 591:000 | DONE wsp | na 16 16 |        |             |
 592:000 | DONE ins | na 16 16 | 005206 | f4 62 5e    |                 phe.# 005e62         
 593:000 | DONE ins | na 16 16 | 005209 | 20 3f 69    |                 jsr 00693f           
 594:000 | DONE wsp | na 16 16 |        |             |
 595:000 | DONE ins | na 16 16 | 00520c | 60          |                 rts                  
 596:000 | DONE lbl | na 16 16 | 00520d |             | z_dotquote                           
 597:000 | DONE wsp | na 16 16 |        |             |
 598:000 | DONE wsp | na 16 16 |        |             |
 599:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 600:000 | DONE cmt | na 16 16 |        |             | ; .S "DOTS" ( -- ) X bytes / X cycles
 601:000 | DONE cmt | na 16 16 |        |             | ; Print content of Data Stack non-distructively. Since this is for humans, we
 602:000 | DONE cmt | na 16 16 |        |             | ; don't have to worry about speed. We follow the format of Gforth
 603:000 | DONE cmt | na 16 16 |        |             | ; and print the number of elements first in brackets, followed by the Data Stack
 604:000 | DONE cmt | na 16 16 |        |             | ; content (if present). Uses tmp3
 605:000 | DONE lbl | na 16 16 | 00520d |             | xt_dots                              
 606:000 | DONE dir | na 16 16 |        |             |         .!a16                        
 607:000 | DONE dir | na 16 16 |        |             |         .!xy16                       
 608:000 | DONE ins | na 16 16 | 00520d | 20 26 58    |                 jsr 005826           ( -- u)
 609:000 | DONE wsp | na 16 16 |        |             |
 610:000 | DONE cmt | na 16 16 |        |             |                 ; Print stack depth in brackets
 611:000 | DONE ins | na 16 16 | 005210 | a9 3c 00    |                 lda.# 3c             
 612:000 | DONE ins | na 16 16 | 005213 | 20 99 58    |                 jsr 005899           
 613:000 | DONE wsp | na 16 16 |        |             |
 614:000 | DONE cmt | na 16 16 |        |             |                 ; We keep a copy of the number of things on the stack to use as
 615:000 | DONE cmt | na 16 16 |        |             |                 ; a counter further down
 616:000 | DONE ins | na 16 16 | 005216 | ca          |                 dex                  DUP
 617:000 | DONE ins | na 16 16 | 005217 | ca          |                 dex                  
 618:000 | DONE ins | na 16 16 | 005218 | 94 00       |                 sty.dx 00            
 619:000 | DONE wsp | na 16 16 |        |             |
 620:000 | DONE ins | na 16 16 | 00521a | 20 7e 69    |                 jsr 00697e           print unsigned number
 621:000 | DONE wsp | na 16 16 |        |             |
 622:000 | DONE ins | na 16 16 | 00521d | a9 3e 00    |                 lda.# 3e             
 623:000 | DONE ins | na 16 16 | 005220 | 20 99 58    |                 jsr 005899           
 624:000 | DONE ins | na 16 16 | 005223 | 20 1e 5e    |                 jsr 005e1e           
 625:000 | DONE wsp | na 16 16 |        |             |
 626:000 | DONE cmt | na 16 16 |        |             |                 ; There will be a lot of cases where .S is used when the stack
 627:000 | DONE cmt | na 16 16 |        |             |                 ; is empty. Get them first and exit quickly
 628:000 | DONE ins | na 16 16 | 005226 | 98          |                 tya                  force flag test
 629:000 | DONE ins | na 16 16 | 005227 | f0 18       |                 beq 005241           
 630:000 | DONE wsp | na 16 16 |        |             |
 631:000 | DONE lbl | na 16 16 | 005229 |             | dots_not_empty                       
 632:000 | DONE cmt | na 16 16 |        |             |                 ; We have at least one element on the stack, which used to be in
 633:000 | DONE cmt | na 16 16 |        |             |                 ; Y as TOS, but is now NOS and therefore accessable by X. The
 634:000 | DONE cmt | na 16 16 |        |             |                 ; depth of the Data Stack is in Y waiting to be used as
 635:000 | DONE cmt | na 16 16 |        |             |                 ; a counter. We use this to our advantage.
 636:000 | DONE ins | na 16 16 | 005229 | a9 fb 00    |                 lda.# 0000fb         skip two garbage entries on stack
 637:000 | DONE ins | na 16 16 | 00522c | 85 20       |                 sta.d 000020         use as pointer
 638:000 | DONE wsp | na 16 16 |        |             |
 639:000 | DONE lbl | na 16 16 | 00522e |             | dots_loop                            
 640:000 | DONE ins | na 16 16 | 00522e | b2 20       |                 lda.di 000020        LDA (TMP1)
 641:000 | DONE ins | na 16 16 | 005230 | 5a          |                 phy                  save our counter
 642:000 | DONE ins | na 16 16 | 005231 | a8          |                 tay                  
 643:000 | DONE ins | na 16 16 | 005232 | 20 da 51    |                 jsr 0051da           print one number, drops TOS
 644:000 | DONE wsp | na 16 16 |        |             |
 645:000 | DONE ins | na 16 16 | 005235 | ca          |                 dex                  restore counter
 646:000 | DONE ins | na 16 16 | 005236 | ca          |                 dex                  
 647:000 | DONE ins | na 16 16 | 005237 | 94 00       |                 sty.dx 00            
 648:000 | DONE ins | na 16 16 | 005239 | 7a          |                 ply                  
 649:000 | DONE wsp | na 16 16 |        |             |
 650:000 | DONE ins | na 16 16 | 00523a | c6 20       |                 dec.d 000020         next stack entry
 651:000 | DONE ins | na 16 16 | 00523c | c6 20       |                 dec.d 000020         
 652:000 | DONE wsp | na 16 16 |        |             |
 653:000 | DONE ins | na 16 16 | 00523e | 88          |                 dey                  
 654:000 | DONE ins | na 16 16 | 00523f | d0 ed       |                 bne 00522e           
 655:000 | DONE wsp | na 16 16 |        |             |
 656:000 | DONE lbl | na 16 16 | 005241 |             | dots_done                            
 657:000 | DONE cmt | na 16 16 |        |             |                 ; Clean up. We don't care about speed in this
 658:000 | DONE cmt | na 16 16 |        |             |                 ; word so we save one byte by doing DROP the slow way
 659:000 | DONE ins | na 16 16 | 005241 | 20 6c 58    |                 jsr 00586c           
 660:000 | DONE wsp | na 16 16 |        |             |
 661:000 | DONE lbl | na 16 16 | 005244 |             | z_dots                               
 661:001 | DONE ins | na 16 16 | 005244 | 60          |                 rts                  
 662:000 | DONE wsp | na 16 16 |        |             |
 663:000 | DONE wsp | na 16 16 |        |             |
 664:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 665:000 | DONE cmt | na 16 16 |        |             | ; , "COMMA" ( n -- ) 11 bytes / 29 cycles
 666:000 | DONE cmt | na 16 16 |        |             | ; Allot one cell and store TOS in memory. We ignore alignment issues, though
 667:000 | DONE cmt | na 16 16 |        |             | ; satisfy the ANSI requirement that an aligned compiler pointer will remain
 668:000 | DONE cmt | na 16 16 |        |             | ; aligned
 669:000 | DONE cmt | na 16 16 |        |             | ; There is another variant possible:
 670:000 | DONE cmt | na 16 16 |        |             | ;               tya
 671:000 | DONE cmt | na 16 16 |        |             | ;               ldy.d cp
 672:000 | DONE cmt | na 16 16 |        |             | ;               sta.y 0000
 673:000 | DONE cmt | na 16 16 |        |             | ;               iny
 674:000 | DONE cmt | na 16 16 |        |             | ;               iny
 675:000 | DONE cmt | na 16 16 |        |             | ;               sty.d cp
 676:000 | DONE cmt | na 16 16 |        |             | ;               ldy.dx 00
 677:000 | DONE cmt | na 16 16 |        |             | ;               inx
 678:000 | DONE cmt | na 16 16 |        |             | ;               inx
 679:000 | DONE cmt | na 16 16 |        |             | ; This is as fast as the variant below, but three bytes longer
 680:000 | DONE lbl | na 16 16 | 005245 |             | xt_comma                             
 681:000 | DONE dir | na 16 16 |        |             |         .!a16                        
 682:000 | DONE ins | na 16 16 | 005245 | 98          |                 tya                  
 683:000 | DONE ins | na 16 16 | 005246 | 92 00       |                 sta.di 000000        STA (CP)
 684:000 | DONE ins | na 16 16 | 005248 | e6 00       |                 inc.d 000000         
 685:000 | DONE ins | na 16 16 | 00524a | e6 00       |                 inc.d 000000         
 686:000 | DONE wsp | na 16 16 |        |             |
 687:000 | DONE ins | na 16 16 | 00524c | b4 00       |                 ldy.dx 00            
 688:000 | DONE ins | na 16 16 | 00524e | e8          |                 inx                  
 689:000 | DONE ins | na 16 16 | 00524f | e8          |                 inx                  
 690:000 | DONE wsp | na 16 16 |        |             |
 691:000 | DONE lbl | na 16 16 | 005250 |             | z_comma                              
 691:001 | DONE ins | na 16 16 | 005250 | 60          |                 rts                  
 692:000 | DONE wsp | na 16 16 |        |             |
 693:000 | DONE wsp | na 16 16 |        |             |
 694:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 695:000 | DONE cmt | na 16 16 |        |             | ; : "COLON" ( "name" -- ) X bytes / X cycles
 696:000 | DONE cmt | na 16 16 |        |             | ; Start compilation of new word into the Dictionary. Use the CREATE routine
 697:000 | DONE cmt | na 16 16 |        |             | ; and fill in the rest by hand.
 698:000 | DONE lbl | na 16 16 | 005251 |             | xt_colon                             
 699:000 | DONE dir | na 16 16 |        |             |         .!a16                        
 700:000 | DONE cmt | na 16 16 |        |             |                 ; if we are already in compile mode, complain and abort
 701:000 | DONE ins | na 16 16 | 005251 | a5 14       |                 lda.d 000014         
 702:000 | DONE ins | na 16 16 | 005253 | f0 06       |                 beq 00525b           
 703:000 | DONE wsp | na 16 16 |        |             |
 704:000 | DONE ins | na 16 16 | 005255 | a9 c7 70    |                 lda.# 0070c7         
 705:000 | DONE ins | na 16 16 | 005258 | 4c 60 69    |                 jmp 006960           
 706:000 | DONE lbl | na 16 16 | 00525b |             | @                                    
 707:000 | DONE cmt | na 16 16 |        |             |                 ; Switch to compile state. From now on, everything goes in the
 708:000 | DONE cmt | na 16 16 |        |             |                 ; Dictionary
 709:000 | DONE ins | na 16 16 | 00525b | e6 14       |                 inc.d 000014         
 710:000 | DONE wsp | na 16 16 |        |             |
 711:000 | DONE cmt | na 16 16 |        |             |                 ; CREATE is going to change DP to point to the new word's
 712:000 | DONE cmt | na 16 16 |        |             |                 ; header. While this is fine for (say) variables, it would mean
 713:000 | DONE cmt | na 16 16 |        |             |                 ; that FIND-NAME etc would find a half-finished word when
 714:000 | DONE cmt | na 16 16 |        |             |                 ; looking in the Dictionary. To prevent this, we save the old
 715:000 | DONE cmt | na 16 16 |        |             |                 ; version of DP and restore it later. The new DP is placed in
 716:000 | DONE cmt | na 16 16 |        |             |                 ; the variable WORKWORD until we're finished with a SEMICOLON.
 717:000 | DONE ins | na 16 16 | 00525d | a5 02       |                 lda.d 000002         
 718:000 | DONE ins | na 16 16 | 00525f | 48          |                 pha                  CREATE uses tmp1, tmp2 and tmp3
 719:000 | DONE wsp | na 16 16 |        |             |
 720:000 | DONE ins | na 16 16 | 005260 | 20 27 57    |                 jsr 005727           
 721:000 | DONE wsp | na 16 16 |        |             |
 722:000 | DONE cmt | na 16 16 |        |             |                 ; Get the nt of the new word as described above. Only COLON,
 723:000 | DONE cmt | na 16 16 |        |             |                 ; SEMICOLON and RECURSE access WORKWORD
 724:000 | DONE ins | na 16 16 | 005263 | a5 02       |                 lda.d 000002         
 725:000 | DONE ins | na 16 16 | 005265 | 85 04       |                 sta.d 000004         
 726:000 | DONE ins | na 16 16 | 005267 | 68          |                 pla                  
 727:000 | DONE ins | na 16 16 | 005268 | 85 02       |                 sta.d 000002         
 728:000 | DONE wsp | na 16 16 |        |             |
 729:000 | DONE cmt | na 16 16 |        |             |                 ; CREATE includes a subroutine jump to DOVAR by default. We back
 730:000 | DONE cmt | na 16 16 |        |             |                 ; up three bytes and overwrite that. Note that 3 x DEC.D would
 731:000 | DONE cmt | na 16 16 |        |             |                 ; use 3 bytes and 18 cycles; this version uses 8 bytes but
 732:000 | DONE cmt | na 16 16 |        |             |                 ; only 13 cycles
 733:000 | DONE ins | na 16 16 | 00526a | a5 00       |                 lda.d 000000         
 734:000 | DONE ins | na 16 16 | 00526c | 38          |                 sec                  
 735:000 | DONE ins | na 16 16 | 00526d | e9 03 00    |                 sbc.# 0003           
 736:000 | DONE ins | na 16 16 | 005270 | 85 00       |                 sta.d 000000         
 737:000 | DONE wsp | na 16 16 |        |             |
 738:000 | DONE lbl | na 16 16 | 005272 |             | z_colon                              
 738:001 | DONE ins | na 16 16 | 005272 | 60          |                 rts                  
 739:000 | DONE wsp | na 16 16 |        |             |
 740:000 | DONE wsp | na 16 16 |        |             |
 741:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 742:000 | DONE cmt | na 16 16 |        |             | ; ; "SEMICOLON" ( -- ) X bytes / X cycles
 743:000 | DONE cmt | na 16 16 |        |             | ; End the compilation of a new word into the Dictionary. When we enter this,
 744:000 | DONE cmt | na 16 16 |        |             | ; WORKWORD is pointing to the nt_ of this word in the Dictionary, DP to the
 745:000 | DONE cmt | na 16 16 |        |             | ; previous word, and CP to the next free byte.  A Forth definition would be
 746:000 | DONE cmt | na 16 16 |        |             | ; (see "Starting Forth"):
 747:000 | DONE cmt | na 16 16 |        |             | ;  : ;  POSTPONE EXIT  REVEAL POSTPONE ; [ ; IMMEDIATE
 748:000 | DONE lbl | na 16 16 | 005273 |             | xt_semicolon                         
 749:000 | DONE dir | na 16 16 |        |             |         .!a16                        
 750:000 | DONE ins | na 16 16 | 005273 | 84 24       |                 sty.d 000024         
 751:000 | DONE wsp | na 16 16 |        |             |
 752:000 | DONE cmt | na 16 16 |        |             |                 ; CP is the byte that will be the address we use in the header for
 753:000 | DONE cmt | na 16 16 |        |             |                 ; the end-of-compile address (z_word). This is six bytes down in
 754:000 | DONE cmt | na 16 16 |        |             |                 ; the header
 755:000 | DONE ins | na 16 16 | 005275 | a0 06 00    |                 ldy.# 0006           
 756:000 | DONE ins | na 16 16 | 005278 | a5 00       |                 lda.d 000000         
 757:000 | DONE ins | na 16 16 | 00527a | 91 04       |                 sta.diy 000004       STA (WORKWORD),Y
 758:000 | DONE wsp | na 16 16 |        |             |
 759:000 | DONE cmt | na 16 16 |        |             |                 ; Add the RTS instruction to the end of the current word. We
 760:000 | DONE cmt | na 16 16 |        |             |                 ; don't have to switch the size of the A register because we
 761:000 | DONE cmt | na 16 16 |        |             |                 ; only move up the CP by one and the MSB will be overwritten.
 762:000 | DONE cmt | na 16 16 |        |             |                 ; Little endian MPUs for the win!
 763:000 | DONE ins | na 16 16 | 00527c | a9 60 00    |                 lda.# 60             opcode for RTS
 764:000 | DONE ins | na 16 16 | 00527f | 92 00       |                 sta.di 000000        STA (CP)
 765:000 | DONE ins | na 16 16 | 005281 | e6 00       |                 inc.d 000000         MSB will be overwritten
 766:000 | DONE wsp | na 16 16 |        |             |
 767:000 | DONE cmt | na 16 16 |        |             |                 ; Word definition is complete. Make the new word the last one in
 768:000 | DONE cmt | na 16 16 |        |             |                 ; the Dictionary
 769:000 | DONE ins | na 16 16 | 005283 | a5 04       |                 lda.d 000004         
 770:000 | DONE ins | na 16 16 | 005285 | 85 02       |                 sta.d 000002         
 771:000 | DONE wsp | na 16 16 |        |             |
 772:000 | DONE cmt | na 16 16 |        |             |                 ; Get our TOS back
 773:000 | DONE ins | na 16 16 | 005287 | a4 24       |                 ldy.d 000024         
 774:000 | DONE wsp | na 16 16 |        |             |
 775:000 | DONE cmt | na 16 16 |        |             |                 ; Set compile flag back to zero so we're back in interpret mode
 776:000 | DONE ins | na 16 16 | 005289 | 64 14       |                 stz.d 000014         
 777:000 | DONE wsp | na 16 16 |        |             |
 778:000 | DONE lbl | na 16 16 | 00528b |             | z_semicolon                          
 778:001 | DONE ins | na 16 16 | 00528b | 60          |                 rts                  
 779:000 | DONE wsp | na 16 16 |        |             |
 780:000 | DONE wsp | na 16 16 |        |             |
 781:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 782:000 | DONE cmt | na 16 16 |        |             | ; # "HASH" / "NUMBER-SIGN" ( ud -- ud )  X bytes / X cycles
 783:000 | DONE cmt | na 16 16 |        |             | ; Add one character to the beginning of the pictured output string.
 784:000 | DONE cmt | na 16 16 |        |             | ; Code based on https://github.com/philburk/pforth/blob/master/fth/numberio.fth
 785:000 | DONE cmt | na 16 16 |        |             | ; Forth code is  BASE @ UD/MOD ROT 9 OVER < IF 7 + THEN [CHAR] 0 + HOLD ;
 786:000 | DONE cmt | na 16 16 |        |             | ; TODO convert more parts to assembler
 787:000 | DONE lbl | na 16 16 | 00528c |             | xt_hash                              
 788:000 | DONE dir | na 16 16 |        |             |         .!a16                        
 789:000 | DONE ins | na 16 16 | 00528c | 20 88 55    |                 jsr 005588           ( ud addr )
 790:000 | DONE ins | na 16 16 | 00528f | 20 da 52    |                 jsr 0052da           ( ud u )
 791:000 | DONE ins | na 16 16 | 005292 | 20 8c 5e    |                 jsr 005e8c           ( rem ud )
 792:000 | DONE ins | na 16 16 | 005295 | 20 de 5c    |                 jsr 005cde           ( ud rem )
 793:000 | DONE wsp | na 16 16 |        |             |
 794:000 | DONE cmt | na 16 16 |        |             |                 ; Convert the number that is left over to an ASCII character. We
 795:000 | DONE cmt | na 16 16 |        |             |                 ; use a string lookup for speed. Use either abc_str_lower for
 796:000 | DONE cmt | na 16 16 |        |             |                 ; lower case or abc_str_upper for upper case (prefered)
 797:000 | DONE ins | na 16 16 | 005298 | e2 20       |                 sep 20               
 797:001 | DONE ctl | na  8 16 |        |             |         .!a8
 798:000 | DONE ins | na  8 16 | 00529a | b9 4c 71    |                 lda.y 00714c         
 799:000 | DONE ins | na  8 16 | 00529d | c2 20       |                 rep 20               
 799:001 | DONE ctl | na 16 16 |        |             |         .!a16
 800:000 | DONE cmt | na 16 16 |        |             |                 ; overwrite remainder with ASCII value
 801:000 | DONE ins | na 16 16 | 00529f | 29 ff 00    |                 and.# 00ff           
 802:000 | DONE ins | na 16 16 | 0052a2 | a8          |                 tay                  ( ud char )
 803:000 | DONE wsp | na 16 16 |        |             |
 804:000 | DONE ins | na 16 16 | 0052a3 | 20 2d 5a    |                 jsr 005a2d           JSR/RTS
 805:000 | DONE wsp | na 16 16 |        |             |
 806:000 | DONE lbl | na 16 16 | 0052a6 |             | z_hash                               
 806:001 | DONE ins | na 16 16 | 0052a6 | 60          |                 rts                  
 807:000 | DONE wsp | na 16 16 |        |             |
 808:000 | DONE wsp | na 16 16 |        |             |
 809:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 810:000 | DONE cmt | na 16 16 |        |             | ; #> "NUMBERMORE" / "NUMBER-GREATER" ( d -- addr u ) X bytes / X cycles
 811:000 | DONE cmt | na 16 16 |        |             | ; Finish conversion of pictured number string, putting address and length on the
 812:000 | DONE cmt | na 16 16 |        |             | ; Data Stack. Original Fort is  2DROP HLD @ PAD OVER -  Based on
 813:000 | DONE cmt | na 16 16 |        |             | ; https://github.com/philburk/pforth/blob/master/fth/numberio.fth
 814:000 | DONE lbl | na 16 16 | 0052a7 |             | xt_numbermore                        
 815:000 | DONE dir | na 16 16 |        |             |         .!a16                        
 816:000 | DONE cmt | na 16 16 |        |             |                 ; We simply overwrite the double cell number, saving us a lot of
 817:000 | DONE cmt | na 16 16 |        |             |                 ; stack thrashing. First, put the address of the string's head in
 818:000 | DONE cmt | na 16 16 |        |             |                 ; TOS and NOS
 819:000 | DONE ins | na 16 16 | 0052a7 | a4 18       |                 ldy.d 000018         
 820:000 | DONE ins | na 16 16 | 0052a9 | 94 00       |                 sty.dx 00            ( addr addr )
 821:000 | DONE wsp | na 16 16 |        |             |
 822:000 | DONE cmt | na 16 16 |        |             |                 ; add the address of the string's end, which is PAD
 823:000 | DONE ins | na 16 16 | 0052ab | 20 d6 5b    |                 jsr 005bd6           ( addr addr pad )
 824:000 | DONE wsp | na 16 16 |        |             |
 825:000 | DONE ins | na 16 16 | 0052ae | 38          |                 sec                  
 826:000 | DONE ins | na 16 16 | 0052af | 98          |                 tya                  
 827:000 | DONE ins | na 16 16 | 0052b0 | f5 00       |                 sbc.dx 00            pad - addr is the length of the string
 828:000 | DONE ins | na 16 16 | 0052b2 | a8          |                 tay                  ( addr addr n )
 829:000 | DONE wsp | na 16 16 |        |             |
 830:000 | DONE ins | na 16 16 | 0052b3 | e8          |                 inx                  NIP
 831:000 | DONE ins | na 16 16 | 0052b4 | e8          |                 inx                  
 832:000 | DONE wsp | na 16 16 |        |             |
 833:000 | DONE lbl | na 16 16 | 0052b5 |             | z_numbermore                         
 833:001 | DONE ins | na 16 16 | 0052b5 | 60          |                 rts                  
 834:000 | DONE wsp | na 16 16 |        |             |
 835:000 | DONE wsp | na 16 16 |        |             |
 836:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 837:000 | DONE cmt | na 16 16 |        |             | ; #S "HASHS" / "NUMBER SIGN" ( ud -- ud ) X bytes / X cycles
 838:000 | DONE cmt | na 16 16 |        |             | ; Completely convert number for pictured numerical output. Based on
 839:000 | DONE cmt | na 16 16 |        |             | ; https://github.com/philburk/pforth/blob/master/fth/system.fth
 840:000 | DONE cmt | na 16 16 |        |             | ; Original Forth code  BEGIN # 2DUP OR 0= UNTIL
 841:000 | DONE lbl | na 16 16 | 0052b6 |             | xt_hashs                             
 842:000 | DONE dir | na 16 16 |        |             |         .!a16                        
 843:000 | DONE lbl | na 16 16 | 0052b6 |             | hashs_loop                           
 844:000 | DONE cmt | na 16 16 |        |             |                 ; covert a single number ("#")
 845:000 | DONE ins | na 16 16 | 0052b6 | 20 8c 52    |                 jsr 00528c           ( ud -- ud )
 846:000 | DONE wsp | na 16 16 |        |             |
 847:000 | DONE cmt | na 16 16 |        |             |                 ; stop when the double-celled number on the TOS is zero
 848:000 | DONE ins | na 16 16 | 0052b9 | 98          |                 tya                  
 849:000 | DONE ins | na 16 16 | 0052ba | 15 00       |                 ora.dx 00            
 850:000 | DONE ins | na 16 16 | 0052bc | d0 f8       |                 bne 0052b6           
 851:000 | DONE wsp | na 16 16 |        |             |
 852:000 | DONE lbl | na 16 16 | 0052be |             | z_hashs                              
 852:001 | DONE ins | na 16 16 | 0052be | 60          |                 rts                  
 853:000 | DONE wsp | na 16 16 |        |             |
 854:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 855:000 | DONE cmt | na 16 16 |        |             | ; ? "QUESTION" ( addr -- ) X bytes / X cycles
 856:000 | DONE cmt | na 16 16 |        |             | ; Print content of a variable. This is used interactively and humans are
 857:000 | DONE cmt | na 16 16 |        |             | ; slow, so we just go for the subroutine jumps to keep it short
 858:000 | DONE lbl | na 16 16 | 0052bf |             | xt_question                          
 859:000 | DONE ins | na 16 16 | 0052bf | 20 da 52    |                 jsr 0052da           
 860:000 | DONE ins | na 16 16 | 0052c2 | 20 da 51    |                 jsr 0051da           
 861:000 | DONE wsp | na 16 16 |        |             |
 862:000 | DONE lbl | na 16 16 | 0052c5 |             | z_question                           
 862:001 | DONE ins | na 16 16 | 0052c5 | 60          |                 rts                  
 863:000 | DONE wsp | na 16 16 |        |             |
 864:000 | DONE wsp | na 16 16 |        |             |
 865:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 866:000 | DONE cmt | na 16 16 |        |             | ; QDUP ( n -- 0 | n n ) X bytes / X cycles
 867:000 | DONE cmt | na 16 16 |        |             | ; If top element on Data Stack is not zero, duplicate it
 868:000 | DONE lbl | na 16 16 | 0052c6 |             | xt_qdup                              
 869:000 | DONE ins | na 16 16 | 0052c6 | 98          |                 tya                  
 870:000 | DONE ins | na 16 16 | 0052c7 | f0 04       |                 beq 0052cd           
 871:000 | DONE wsp | na 16 16 |        |             |
 872:000 | DONE ins | na 16 16 | 0052c9 | ca          |                 dex                  
 873:000 | DONE ins | na 16 16 | 0052ca | ca          |                 dex                  
 874:000 | DONE ins | na 16 16 | 0052cb | 94 00       |                 sty.dx 00            
 875:000 | DONE wsp | na 16 16 |        |             |
 876:000 | DONE lbl | na 16 16 | 0052cd |             | z_qdup                               
 876:001 | DONE ins | na 16 16 | 0052cd | 60          |                 rts                  
 877:000 | DONE wsp | na 16 16 |        |             |
 878:000 | DONE wsp | na 16 16 |        |             |
 879:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 880:000 | DONE cmt | na 16 16 |        |             | ; ! "STORE" ( n addr -- ) 9 bytes / X cycles
 881:000 | DONE cmt | na 16 16 |        |             | ; Save value at designated memory location
 882:000 | DONE lbl | na 16 16 | 0052ce |             | xt_store                             
 883:000 | DONE dir | na 16 16 |        |             |         .!a16                        
 884:000 | DONE ins | na 16 16 | 0052ce | b5 00       |                 lda.dx 00            NOS has value
 885:000 | DONE ins | na 16 16 | 0052d0 | 99 00 00    |                 sta.y 0000           
 886:000 | DONE wsp | na 16 16 |        |             |
 887:000 | DONE ins | na 16 16 | 0052d3 | b4 02       |                 ldy.dx 02            
 888:000 | DONE ins | na 16 16 | 0052d5 | e8          |                 inx                  
 889:000 | DONE ins | na 16 16 | 0052d6 | e8          |                 inx                  
 890:000 | DONE ins | na 16 16 | 0052d7 | e8          |                 inx                  
 891:000 | DONE ins | na 16 16 | 0052d8 | e8          |                 inx                  
 892:000 | DONE wsp | na 16 16 |        |             |
 893:000 | DONE lbl | na 16 16 | 0052d9 |             | z_store                              
 893:001 | DONE ins | na 16 16 | 0052d9 | 60          |                 rts                  
 894:000 | DONE wsp | na 16 16 |        |             |
 895:000 | DONE wsp | na 16 16 |        |             |
 896:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 897:000 | DONE cmt | na 16 16 |        |             | ; @ "FETCH" ( addr -- n ) 4 bytes / 7-8 cycles
 898:000 | DONE cmt | na 16 16 |        |             | ; Get one cell (16 bit) value from given address
 899:000 | DONE lbl | na 16 16 | 0052da |             | xt_fetch                             
 900:000 | DONE ins | na 16 16 | 0052da | b9 00 00    |                 lda.y 0000           
 901:000 | DONE ins | na 16 16 | 0052dd | a8          |                 tay                  
 902:000 | DONE wsp | na 16 16 |        |             |
 903:000 | DONE lbl | na 16 16 | 0052de |             | z_fetch                              
 903:001 | DONE ins | na 16 16 | 0052de | 60          |                 rts                  
 904:000 | DONE wsp | na 16 16 |        |             |
 905:000 | DONE wsp | na 16 16 |        |             |
 906:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 907:000 | DONE cmt | na 16 16 |        |             | ; (+LOOP) "PARENS-PLUSLOOP" ( n -- ) X bytes / X cycles
 908:000 | DONE cmt | na 16 16 |        |             | ; Runtime compile for counted loop control. This is used for both +LOOP and
 909:000 | DONE cmt | na 16 16 |        |             | ; LOOP which are defined at high level. Note we use a fudge factor for loop
 910:000 | DONE cmt | na 16 16 |        |             | ; control so we can test with the Overflow Flag. See (DO) for details. This is
 911:000 | DONE cmt | na 16 16 |        |             | ; Native Compile. The step value is TOS in the loop
 912:000 | DONE lbl | na 16 16 | 0052df |             | xt_pploop                            
 913:000 | DONE dir | na 16 16 |        |             |         .!a16                        
 914:000 | DONE cmt | na 16 16 |        |             |                 ; add step to index
 915:000 | DONE ins | na 16 16 | 0052df | 98          |                 tya                  step
 916:000 | DONE ins | na 16 16 | 0052e0 | b8          |                 clv                  this is used for loop control
 917:000 | DONE ins | na 16 16 | 0052e1 | 18          |                 clc                  
 918:000 | DONE ins | na 16 16 | 0052e2 | 63 03       |                 adc.s 03             add index from top of R
 919:000 | DONE ins | na 16 16 | 0052e4 | 83 03       |                 sta.s 03             store it back on top of R
 920:000 | DONE wsp | na 16 16 |        |             |
 921:000 | DONE cmt | na 16 16 |        |             |                 ; dump step from TOS
 922:000 | DONE ins | na 16 16 | 0052e6 | b4 00       |                 ldy.dx 00            
 923:000 | DONE ins | na 16 16 | 0052e8 | e8          |                 inx                  
 924:000 | DONE ins | na 16 16 | 0052e9 | e8          |                 inx                  
 925:000 | DONE wsp | na 16 16 |        |             |
 926:000 | DONE cmt | na 16 16 |        |             |                 ; if the V flag is set, we're done looping and continue after
 927:000 | DONE cmt | na 16 16 |        |             |                 ; the +LOOP instruction
 928:000 | DONE ins | na 16 16 | 0052ea | 70 03       |                 bvs 0052ef           
 929:000 | DONE wsp | na 16 16 |        |             |
 930:000 | DONE lbl | na 16 16 | 0052ec |             | pploop_jmp                           
 931:000 | DONE cmt | na 16 16 |        |             |                 ; This is why this routine must be natively compiled: We compile
 932:000 | DONE cmt | na 16 16 |        |             |                 ; the opcode for jump here without an address to go to, which is
 933:000 | DONE cmt | na 16 16 |        |             |                 ; added by the next instruction of LOOP (or +LOOP) during
 934:000 | DONE cmt | na 16 16 |        |             |                 ; compile time
 935:000 | DONE dir | na 16 16 | 0052ec | (1 bytes)   |         .byte 20                     
 935:000 | DONE dir | na 16 16 |        |             |                 20                       --   
 936:000 | DONE wsp | na 16 16 |        |             |
 937:000 | DONE lbl | na 16 16 | 0052ed |             | z_pploop                             
 937:001 | DONE ins | na 16 16 | 0052ed | 60          |                 rts                  
 938:000 | DONE wsp | na 16 16 |        |             |
 939:000 | DONE wsp | na 16 16 |        |             |
 940:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 941:000 | DONE cmt | na 16 16 |        |             | ; (?DO) "PARENS-QUESTION-DO" ( -- ) X bytes / X cycles
 942:000 | DONE cmt | na 16 16 |        |             | ; Runtime routine for ?DO. This contains the parts required for the question
 943:000 | DONE cmt | na 16 16 |        |             | ; mark and then drops through to (DO). This must be native compile
 944:000 | DONE lbl | na 16 16 | 0052ee |             | xt_pqdo                              
 945:000 | DONE cmt | na 16 16 |        |             |                 ; See if TOS and NOS are equal
 946:000 | DONE cmt | na 16 16 |        |             |                 ; TODO move this to assembler for speed
 947:000 | DONE ins | na 16 16 | 0052ee | 20 ed 53    |                 jsr 0053ed           
 948:000 | DONE ins | na 16 16 | 0052f1 | 20 5c 53    |                 jsr 00535c           now ( n1 n2 f )
 949:000 | DONE wsp | na 16 16 |        |             |
 950:000 | DONE ins | na 16 16 | 0052f4 | a8          |                 tay                  force flag check
 951:000 | DONE ins | na 16 16 | 0052f5 | f0 00       |                 beq 0052f7           
 952:000 | DONE wsp | na 16 16 |        |             |
 953:000 | DONE lbl | na 16 16 | 0052f7 |             | pqdo_done                            
 954:000 | DONE cmt | na 16 16 |        |             |                 ; get ready to drop to (DO)
 955:000 | DONE ins | na 16 16 | 0052f7 | b4 00       |                 ldy.dx 00            drop flag from EQUAL
 956:000 | DONE ins | na 16 16 | 0052f9 | e8          |                 inx                  
 957:000 | DONE ins | na 16 16 | 0052fa | e8          |                 inx                  drop through to (DO)
 958:000 | DONE wsp | na 16 16 |        |             |
 959:000 | DONE wsp | na 16 16 |        |             |
 960:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 961:000 | DONE cmt | na 16 16 |        |             | ; (DO) "PARENS-DO" ( limit start -- ; R: -- limit start ) X bytes / X cycles
 962:000 | DONE cmt | na 16 16 |        |             | ; Runtime routine for DO loop. Note that ANSI loops quit when the boundry of
 963:000 | DONE cmt | na 16 16 |        |             | ; limit-1 and limit is reached, a different mechanism than the FIG Forth loop
 964:000 | DONE cmt | na 16 16 |        |             | ; (you can see which version you have by running a loop with start and limit as
 965:000 | DONE cmt | na 16 16 |        |             | ; the same value, for instance 0 0 DO -- these will walk through the complete
 966:000 | DONE cmt | na 16 16 |        |             | ; number space). This is why there is ?DO, which you should use. We use a "fudge
 967:000 | DONE cmt | na 16 16 |        |             | ; factor" for the limit that makes the Overflow Flag trip when it is reached;
 968:000 | DONE cmt | na 16 16 |        |             | ; see http://forum.6502.org/viewtopic.php?f=9&t=2> for further discussion of
 969:000 | DONE cmt | na 16 16 |        |             | ; this. The source given there for this idea is Laxen & Perry F83. This routine
 970:000 | DONE cmt | na 16 16 |        |             | ; must be native compile (and should be anyway for speed).
 971:000 | DONE lbl | na 16 16 | 0052fb |             | xt_pdo                               
 972:000 | DONE dir | na 16 16 |        |             |         .!a16                        
 973:000 | DONE cmt | na 16 16 |        |             |                 ; Create fudge factor (fufa) by subtracting the limit from
 974:000 | DONE cmt | na 16 16 |        |             |                 ; $8000, the number that will trip the overflow flag
 975:000 | DONE ins | na 16 16 | 0052fb | 38          |                 sec                  
 976:000 | DONE ins | na 16 16 | 0052fc | a9 00 80    |                 lda.# 8000           
 977:000 | DONE ins | na 16 16 | 0052ff | f5 00       |                 sbc.dx 00            limit is NOS
 978:000 | DONE ins | na 16 16 | 005301 | 95 00       |                 sta.dx 00            save fufa for later use as NOS
 979:000 | DONE ins | na 16 16 | 005303 | 48          |                 pha                  we use fufa instead of limit on R
 980:000 | DONE wsp | na 16 16 |        |             |
 981:000 | DONE cmt | na 16 16 |        |             |                 ; Index is fufa plus original index
 982:000 | DONE ins | na 16 16 | 005304 | 18          |                 clc                  
 983:000 | DONE ins | na 16 16 | 005305 | 98          |                 tya                  index is TOS
 984:000 | DONE ins | na 16 16 | 005306 | 75 00       |                 adc.dx 00            add fufa
 985:000 | DONE ins | na 16 16 | 005308 | 48          |                 pha                  
 986:000 | DONE wsp | na 16 16 |        |             |
 987:000 | DONE cmt | na 16 16 |        |             |                 ; clean up
 988:000 | DONE ins | na 16 16 | 005309 | e8          |                 inx                  
 989:000 | DONE ins | na 16 16 | 00530a | e8          |                 inx                  
 990:000 | DONE ins | na 16 16 | 00530b | e8          |                 inx                  
 991:000 | DONE ins | na 16 16 | 00530c | e8          |                 inx                  
 992:000 | DONE wsp | na 16 16 |        |             |
 993:000 | DONE lbl | na 16 16 | 00530d |             | z_pqdo                               
 994:000 | DONE lbl | na 16 16 | 00530d |             | z_pdo                                
 994:001 | DONE ins | na 16 16 | 00530d | 60          |                 rts                  
 995:000 | DONE wsp | na 16 16 |        |             |
 996:000 | DONE wsp | na 16 16 |        |             |
 997:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 998:000 | DONE cmt | na 16 16 |        |             | ; ['] "BRACKET-TICK" ( -- ) X bytes / X cycles
 999:000 | DONE cmt | na 16 16 |        |             | ; Store xt of following word during compilation
1000:000 | DONE lbl | na 16 16 | 00530e |             | xt_brackettick                       
1001:000 | DONE ins | na 16 16 | 00530e | 20 48 54    |                 jsr 005448           
1002:000 | DONE ins | na 16 16 | 005311 | 4c 53 5a    |                 jmp 005a53           JSR/RTS
1003:000 | DONE lbl | na 16 16 | 005314 |             | z_brackettick                        
1004:000 | DONE wsp | na 16 16 |        |             |
1005:000 | DONE wsp | na 16 16 |        |             |
1006:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1007:000 | DONE cmt | na 16 16 |        |             | ; [ "LEFTBRACKET" ( -- ) X bytes / X cycles
1008:000 | DONE cmt | na 16 16 |        |             | ; Enter the interpretation state. This is an immediate, compile-only word
1009:000 | DONE lbl | na 16 16 | 005314 |             | xt_leftbracket                       
1010:000 | DONE ins | na 16 16 | 005314 | 64 14       |                 stz.d 000014         
1011:000 | DONE lbl | na 16 16 | 005316 |             | z_leftbracket                        
1011:001 | DONE ins | na 16 16 | 005316 | 60          |                 rts                  
1012:000 | DONE wsp | na 16 16 |        |             |
1013:000 | DONE wsp | na 16 16 |        |             |
1014:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1015:000 | DONE cmt | na 16 16 |        |             | ; ] "RIGHTBRACKET" ( -- ) X bytes / X cycles
1016:000 | DONE cmt | na 16 16 |        |             | ; Enter the compile state. In theory, we should be able to get away with
1017:000 | DONE cmt | na 16 16 |        |             | ; a simple INC.A, but this is more error tolerant. For obvious reasons, this
1018:000 | DONE cmt | na 16 16 |        |             | ; cannot be COMPILE-ONLY, and native compile doesn't make much sense either
1019:000 | DONE lbl | na 16 16 | 005317 |             | xt_rightbracket                      
1020:000 | DONE ins | na 16 16 | 005317 | a9 01 00    |                 lda.# 0001           
1021:000 | DONE ins | na 16 16 | 00531a | 85 14       |                 sta.d 000014         
1022:000 | DONE wsp | na 16 16 |        |             |
1023:000 | DONE lbl | na 16 16 | 00531c |             | z_rightbracket                       
1023:001 | DONE ins | na 16 16 | 00531c | 60          |                 rts                  
1024:000 | DONE wsp | na 16 16 |        |             |
1025:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1026:000 | DONE cmt | na 16 16 |        |             | ; [CHAR] "BRACKET-CHAR" ( "c" -- ) X bytes / X cycles
1027:000 | DONE cmt | na 16 16 |        |             | ; At compile time, compile the ASCII value of a character as a literal
1028:000 | DONE cmt | na 16 16 |        |             | ; This is an immediate, compile-only word. A definition given in
1029:000 | DONE cmt | na 16 16 |        |             | ; http://forth-standard.org/standard/implement is
1030:000 | DONE cmt | na 16 16 |        |             | ; : [CHAR] CHAR POSTPONE LITERAL ; IMMEDIATE
1031:000 | DONE cmt | na 16 16 |        |             | ; TODO decide if this is worth unrolling
1032:000 | DONE lbl | na 16 16 | 00531d |             | xt_bracketchar                       
1033:000 | DONE ins | na 16 16 | 00531d | 20 f7 55    |                 jsr 0055f7           
1034:000 | DONE ins | na 16 16 | 005320 | 20 53 5a    |                 jsr 005a53           
1035:000 | DONE wsp | na 16 16 |        |             |
1036:000 | DONE lbl | na 16 16 | 005323 |             | z_bracketchar                        
1036:001 | DONE ins | na 16 16 | 005323 | 60          |                 rts                  
1037:000 | DONE wsp | na 16 16 |        |             |
1038:000 | DONE wsp | na 16 16 |        |             |
1039:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1040:000 | DONE cmt | na 16 16 |        |             | ; \ "BACKSLASH" ( -- ) 4 bytes / X cycles
1041:000 | DONE cmt | na 16 16 |        |             | ; Ignore rest of line as comment
1042:000 | DONE lbl | na 16 16 | 005324 |             | xt_backslash                         
1043:000 | DONE dir | na 16 16 |        |             |         .!a16                        
1044:000 | DONE cmt | na 16 16 |        |             |                 ; Advance >IN to end of the line
1045:000 | DONE ins | na 16 16 | 005324 | a5 0a       |                 lda.d 00000a         
1046:000 | DONE ins | na 16 16 | 005326 | 85 0c       |                 sta.d 00000c         
1047:000 | DONE wsp | na 16 16 |        |             |
1048:000 | DONE lbl | na 16 16 | 005328 |             | z_backslash                          
1048:001 | DONE ins | na 16 16 | 005328 | 60          |                 rts                  
1049:000 | DONE wsp | na 16 16 |        |             |
1050:000 | DONE wsp | na 16 16 |        |             |
1051:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1052:000 | DONE cmt | na 16 16 |        |             | ; + "PLUS" ( n m -- n+m ) 7 bytes / X cycles
1053:000 | DONE cmt | na 16 16 |        |             | ; Add TOS and NOS
1054:000 | DONE lbl | na 16 16 | 005329 |             | xt_plus                              
1055:000 | DONE dir | na 16 16 |        |             |         .!a16                        
1056:000 | DONE ins | na 16 16 | 005329 | 98          |                 tya                  
1057:000 | DONE ins | na 16 16 | 00532a | 18          |                 clc                  
1058:000 | DONE ins | na 16 16 | 00532b | 75 00       |                 adc.dx 00            
1059:000 | DONE ins | na 16 16 | 00532d | a8          |                 tay                  
1060:000 | DONE ins | na 16 16 | 00532e | e8          |                 inx                  
1061:000 | DONE ins | na 16 16 | 00532f | e8          |                 inx                  
1062:000 | DONE wsp | na 16 16 |        |             |
1063:000 | DONE lbl | na 16 16 | 005330 |             | z_plus                               
1063:001 | DONE ins | na 16 16 | 005330 | 60          |                 rts                  
1064:000 | DONE wsp | na 16 16 |        |             |
1065:000 | DONE wsp | na 16 16 |        |             |
1066:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1067:000 | DONE cmt | na 16 16 |        |             | ; - "MINUS" ( n m -- n-m ) 10 bytes / X cycles
1068:000 | DONE cmt | na 16 16 |        |             | ; Subtract NOS from TOS
1069:000 | DONE lbl | na 16 16 | 005331 |             | xt_minus                             
1070:000 | DONE dir | na 16 16 |        |             |         .!a16                        
1071:000 | DONE ins | na 16 16 | 005331 | 98          |                 tya                  
1072:000 | DONE ins | na 16 16 | 005332 | 49 ff ff    |                 eor.# 0ffff          
1073:000 | DONE wsp | na 16 16 |        |             |
1074:000 | DONE ins | na 16 16 | 005335 | 38          |                 sec                  not CLC
1075:000 | DONE ins | na 16 16 | 005336 | 75 00       |                 adc.dx 00            
1076:000 | DONE wsp | na 16 16 |        |             |
1077:000 | DONE ins | na 16 16 | 005338 | a8          |                 tay                  
1078:000 | DONE ins | na 16 16 | 005339 | e8          |                 inx                  
1079:000 | DONE ins | na 16 16 | 00533a | e8          |                 inx                  
1080:000 | DONE wsp | na 16 16 |        |             |
1081:000 | DONE lbl | na 16 16 | 00533b |             | z_minus                              
1081:001 | DONE ins | na 16 16 | 00533b | 60          |                 rts                  
1082:000 | DONE wsp | na 16 16 |        |             |
1083:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1084:000 | DONE cmt | na 16 16 |        |             | ; -ROT ( a b c -- c a b )  X bytes / X cycles
1085:000 | DONE cmt | na 16 16 |        |             | ; Rotate top three entries of Data Stack upwards
1086:000 | DONE lbl | na 16 16 | 00533c |             | xt_mrot                              
1087:000 | DONE dir | na 16 16 |        |             |         .!a16                        
1088:000 | DONE dir | na 16 16 |        |             |         .!xy16                       
1089:000 | DONE ins | na 16 16 | 00533c | b5 02       |                 lda.dx 02            save a
1090:000 | DONE ins | na 16 16 | 00533e | 94 02       |                 sty.dx 02            move c to 3OS
1091:000 | DONE ins | na 16 16 | 005340 | b4 00       |                 ldy.dx 00            move b to TOS
1092:000 | DONE ins | na 16 16 | 005342 | 95 00       |                 sta.dx 00            save a as NOS
1093:000 | DONE wsp | na 16 16 |        |             |
1094:000 | DONE lbl | na 16 16 | 005344 |             | z_mrot                               
1094:001 | DONE ins | na 16 16 | 005344 | 60          |                 rts                  
1095:000 | DONE wsp | na 16 16 |        |             |
1096:000 | DONE wsp | na 16 16 |        |             |
1097:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1098:000 | DONE cmt | na 16 16 |        |             | ; -TRAILING ( addr u -- addr u ) X bytes / X cycles
1099:000 | DONE cmt | na 16 16 |        |             | ; Remove any trailing blanks. Uses tmp3
1100:000 | DONE lbl | na 16 16 | 005345 |             | xt_dtrailing                         
1101:000 | DONE cmt | na 16 16 |        |             |                 ; if u is zero, just return string
1102:000 | DONE ins | na 16 16 | 005345 | 98          |                 tya                  force flag check
1103:000 | DONE ins | na 16 16 | 005346 | f0 13       |                 beq 00535b           
1104:000 | DONE wsp | na 16 16 |        |             |
1105:000 | DONE ins | na 16 16 | 005348 | b5 00       |                 lda.dx 00            
1106:000 | DONE ins | na 16 16 | 00534a | 85 20       |                 sta.d 000020         
1107:000 | DONE ins | na 16 16 | 00534c | 88          |                 dey                  convert length to index
1108:000 | DONE ins | na 16 16 | 00534d | e2 20       |                 sep 20               
1108:001 | DONE ctl | na  8 16 |        |             |         .!a8
1109:000 | DONE wsp | na  8 16 |        |             |
1110:000 | DONE lbl | na  8 16 | 00534f |             | dtrailing_loop                       
1111:000 | DONE ins | na  8 16 | 00534f | b1 20       |                 lda.diy 000020       
1112:000 | DONE ins | na  8 16 | 005351 | c9 20       |                 cmp.# 20             
1113:000 | DONE ins | na  8 16 | 005353 | d0 03       |                 bne 005358           
1114:000 | DONE ins | na  8 16 | 005355 | 88          |                 dey                  
1115:000 | DONE ins | na  8 16 | 005356 | 10 f7       |                 bpl 00534f           fall through when done
1116:000 | DONE wsp | na  8 16 |        |             |
1117:000 | DONE lbl | na  8 16 | 005358 |             | dtrailing_done                       
1118:000 | DONE ins | na  8 16 | 005358 | c2 20       |                 rep 20               
1118:001 | DONE ctl | na 16 16 |        |             |         .!a16
1119:000 | DONE ins | na 16 16 | 00535a | c8          |                 iny                  convert index to length
1120:000 | DONE wsp | na 16 16 |        |             |
1121:000 | DONE lbl | na 16 16 | 00535b |             | z_dtrailing                          
1121:001 | DONE ins | na 16 16 | 00535b | 60          |                 rts                  
1122:000 | DONE wsp | na 16 16 |        |             |
1123:000 | DONE wsp | na 16 16 |        |             |
1124:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1125:000 | DONE cmt | na 16 16 |        |             | ; = "EQUAL" ( n m -- f ) 11 bytes / 18-20 cycles
1126:000 | DONE cmt | na 16 16 |        |             | ; See if TOS and NOS are the same
1127:000 | DONE lbl | na 16 16 | 00535c |             | xt_equal                             
1128:000 | DONE ins | na 16 16 | 00535c | 98          |                 tya                  
1129:000 | DONE ins | na 16 16 | 00535d | a0 00 00    |                 ldy.# 0000           default value is false
1130:000 | DONE wsp | na 16 16 |        |             |
1131:000 | DONE ins | na 16 16 | 005360 | d5 00       |                 cmp.dx 00            
1132:000 | DONE ins | na 16 16 | 005362 | d0 01       |                 bne 005365           
1133:000 | DONE ins | na 16 16 | 005364 | 88          |                 dey                  wraps to 0FFFF (true)
1134:000 | DONE wsp | na 16 16 |        |             |
1135:000 | DONE lbl | na 16 16 | 005365 |             | equal_not                            
1136:000 | DONE ins | na 16 16 | 005365 | e8          |                 inx                  
1137:000 | DONE ins | na 16 16 | 005366 | e8          |                 inx                  
1138:000 | DONE wsp | na 16 16 |        |             |
1139:000 | DONE lbl | na 16 16 | 005367 |             | z_equal                              
1139:001 | DONE ins | na 16 16 | 005367 | 60          |                 rts                  
1140:000 | DONE wsp | na 16 16 |        |             |
1141:000 | DONE wsp | na 16 16 |        |             |
1142:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1143:000 | DONE cmt | na 16 16 |        |             | ; 0 "ZERO" ( -- 0 ) 7 bytes / 12 cycles
1144:000 | DONE cmt | na 16 16 |        |             | ; Pushes the number 0000 on the Data Stack
1145:000 | DONE lbl | na 16 16 | 005368 |             | xt_zero                              
1146:000 | DONE dir | na 16 16 |        |             |         .!xy16                       
1147:000 | DONE ins | na 16 16 | 005368 | ca          |                 dex                  
1148:000 | DONE ins | na 16 16 | 005369 | ca          |                 dex                  
1149:000 | DONE ins | na 16 16 | 00536a | 94 00       |                 sty.dx 00            
1150:000 | DONE ins | na 16 16 | 00536c | a0 00 00    |                 ldy.# 0000           
1151:000 | DONE wsp | na 16 16 |        |             |
1152:000 | DONE lbl | na 16 16 | 00536f |             | z_zero                               
1152:001 | DONE ins | na 16 16 | 00536f | 60          |                 rts                  
1153:000 | DONE wsp | na 16 16 |        |             |
1154:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1155:000 | DONE cmt | na 16 16 |        |             | ; 0= "ZERO-EQUAL" ( n -- f ) X bytes / X cycles
1156:000 | DONE cmt | na 16 16 |        |             | ; Return the true flag if TOS is zero
1157:000 | DONE lbl | na 16 16 | 005370 |             | xt_zero-equal                        
1158:000 | DONE dir | na 16 16 |        |             |         .!a16                        
1159:000 | DONE ins | na 16 16 | 005370 | 98          |                 tya                  force flag check
1160:000 | DONE ins | na 16 16 | 005371 | d0 05       |                 bne 005378           
1161:000 | DONE wsp | na 16 16 |        |             |
1162:000 | DONE ins | na 16 16 | 005373 | a0 ff ff    |                 ldy.# 0ffff          
1163:000 | DONE ins | na 16 16 | 005376 | 80 03       |                 bra 00537b           
1164:000 | DONE lbl | na 16 16 | 005378 |             | ze_not_zero                          
1165:000 | DONE ins | na 16 16 | 005378 | a0 00 00    |                 ldy.# 0000           
1166:000 | DONE wsp | na 16 16 |        |             |
1167:000 | DONE lbl | na 16 16 | 00537b |             | z_zero-equal                         
1167:001 | DONE ins | na 16 16 | 00537b | 60          |                 rts                  
1168:000 | DONE wsp | na 16 16 |        |             |
1169:000 | DONE wsp | na 16 16 |        |             |
1170:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1171:000 | DONE cmt | na 16 16 |        |             | ; 0< "ZERO-LESS" ( n -- f ) 11 bytes / X cycles
1172:000 | DONE cmt | na 16 16 |        |             | ; Return the true flag if TOS is less than zero
1173:000 | DONE lbl | na 16 16 | 00537c |             | xt_zero-less                         
1174:000 | DONE dir | na 16 16 |        |             |         .!a16                        
1175:000 | DONE ins | na 16 16 | 00537c | 98          |                 tya                  force flag check
1176:000 | DONE ins | na 16 16 | 00537d | 30 05       |                 bmi 005384           
1177:000 | DONE wsp | na 16 16 |        |             |
1178:000 | DONE ins | na 16 16 | 00537f | a0 00 00    |                 ldy.# 0000           
1179:000 | DONE ins | na 16 16 | 005382 | 80 03       |                 bra 005387           
1180:000 | DONE wsp | na 16 16 |        |             |
1181:000 | DONE lbl | na 16 16 | 005384 |             | zero-less-is-less                    
1182:000 | DONE ins | na 16 16 | 005384 | a0 ff ff    |                 ldy.# 0ffff          
1183:000 | DONE wsp | na 16 16 |        |             |
1184:000 | DONE lbl | na 16 16 | 005387 |             | z_zero-less                          
1184:001 | DONE ins | na 16 16 | 005387 | 60          |                 rts                  
1185:000 | DONE wsp | na 16 16 |        |             |
1186:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1187:000 | DONE cmt | na 16 16 |        |             | ; 0<> "ZERO-NOTEQUAL" ( n -- f ) 11 bytes / X cycles
1188:000 | DONE cmt | na 16 16 |        |             | ; Return the true flag if TOS is not zero
1189:000 | DONE lbl | na 16 16 | 005388 |             | xt_zero-notequal                     
1190:000 | DONE dir | na 16 16 |        |             |         .!a16                        
1191:000 | DONE ins | na 16 16 | 005388 | 98          |                 tya                  force flag check
1192:000 | DONE ins | na 16 16 | 005389 | f0 05       |                 beq 005390           
1193:000 | DONE ins | na 16 16 | 00538b | a0 ff ff    |                 ldy.# 0ffff          
1194:000 | DONE ins | na 16 16 | 00538e | 80 03       |                 bra 005393           
1195:000 | DONE lbl | na 16 16 | 005390 |             | zne_is_zero                          
1196:000 | DONE ins | na 16 16 | 005390 | a0 00 00    |                 ldy.# 0000           
1197:000 | DONE lbl | na 16 16 | 005393 |             | z_zero-notequal                      
1198:000 | DONE ins | na 16 16 | 005393 | 60          |                 rts                  
1199:000 | DONE wsp | na 16 16 |        |             |
1200:000 | DONE wsp | na 16 16 |        |             |
1201:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1202:000 | DONE cmt | na 16 16 |        |             | ; 0> "ZERO-MORE" ( n -- f ) X bytes / X cycles
1203:000 | DONE cmt | na 16 16 |        |             | ; Return the true flag if TOS is more than zero
1204:000 | DONE lbl | na 16 16 | 005394 |             | xt_zero-more                         
1205:000 | DONE dir | na 16 16 |        |             |         .!a16                        
1206:000 | DONE ins | na 16 16 | 005394 | a9 00 00    |                 lda.# 0000           default is false
1207:000 | DONE wsp | na 16 16 |        |             |
1208:000 | DONE ins | na 16 16 | 005397 | 88          |                 dey                  
1209:000 | DONE ins | na 16 16 | 005398 | 10 02       |                 bpl 00539c           was at least 1
1210:000 | DONE wsp | na 16 16 |        |             |
1211:000 | DONE ins | na 16 16 | 00539a | 80 01       |                 bra 00539d           nope, stays false
1212:000 | DONE wsp | na 16 16 |        |             |
1213:000 | DONE lbl | na 16 16 | 00539c |             | zero-more_true                       
1214:000 | DONE ins | na 16 16 | 00539c | 3a          |                 dec.a                wraps to 0ffff, true
1215:000 | DONE lbl | na 16 16 | 00539d |             | zero-more_done                       
1216:000 | DONE ins | na 16 16 | 00539d | a8          |                 tay                  
1217:000 | DONE wsp | na 16 16 |        |             |
1218:000 | DONE lbl | na 16 16 | 00539e |             | z_zero-more                          
1218:001 | DONE ins | na 16 16 | 00539e | 60          |                 rts                  
1219:000 | DONE wsp | na 16 16 |        |             |
1220:000 | DONE wsp | na 16 16 |        |             |
1221:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1222:000 | DONE cmt | na 16 16 |        |             | ; 0BRANCH ( 0 | f -- ) X bytes / X cycles
1223:000 | DONE cmt | na 16 16 |        |             | ; Branch if TOS is zero. This exects the next two bytes to be the address of
1224:000 | DONE cmt | na 16 16 |        |             | ; where to branch to if the test fails. The code may not be natively compiled
1225:000 | DONE cmt | na 16 16 |        |             | ; because we need the return address provided by JSR's push to the Return Stack
1226:000 | DONE cmt | na 16 16 |        |             | ; This routine uses tmpbranch
1227:000 | DONE lbl | na 16 16 | 00539f |             | xt_zbranch                           
1228:000 | DONE dir | na 16 16 |        |             |         .!a16                        
1229:000 | DONE cmt | na 16 16 |        |             |                 ; encode subroutine jump to run time code
1230:000 | DONE ins | na 16 16 | 00539f | f4 a6 53    |                 phe.# 0053a6         
1231:000 | DONE ins | na 16 16 | 0053a2 | 20 3f 69    |                 jsr 00693f           
1232:000 | DONE wsp | na 16 16 |        |             |
1233:000 | DONE lbl | na 16 16 | 0053a5 |             | z_zbranch                            
1233:001 | DONE ins | na 16 16 | 0053a5 | 60          |                 rts                  
1234:000 | DONE wsp | na 16 16 |        |             |
1235:000 | DONE lbl | na 16 16 | 0053a6 |             | zbranch_rt                           
1236:000 | DONE cmt | na 16 16 |        |             |                 ; See if the flag is zero, which is the whole purpose of this
1237:000 | DONE cmt | na 16 16 |        |             |                 ; operation after all
1238:000 | DONE ins | na 16 16 | 0053a6 | 98          |                 tya                  force flag check
1239:000 | DONE ins | na 16 16 | 0053a7 | f0 05       |                 beq 0053ae           flag is false (zero), so we branch
1240:000 | DONE wsp | na 16 16 |        |             |
1241:000 | DONE cmt | na 16 16 |        |             |                 ; Flag is TRUE, so we skip over the next two bytes. Put
1242:000 | DONE cmt | na 16 16 |        |             |                 ; differently, this is the part between IF and THEN
1243:000 | DONE ins | na 16 16 | 0053a9 | 68          |                 pla                  
1244:000 | DONE ins | na 16 16 | 0053aa | 1a          |                 inc.a                
1245:000 | DONE ins | na 16 16 | 0053ab | 1a          |                 inc.a                
1246:000 | DONE wsp | na 16 16 |        |             |
1247:000 | DONE ins | na 16 16 | 0053ac | 80 09       |                 bra 0053b7           
1248:000 | DONE wsp | na 16 16 |        |             |
1249:000 | DONE lbl | na 16 16 | 0053ae |             | zb_zero                              
1250:000 | DONE cmt | na 16 16 |        |             |                 ; Flag is FALSE, so we take the dump to the address given in the
1251:000 | DONE cmt | na 16 16 |        |             |                 ; next two bytes. We don't need Y anymore, so we can use it for
1252:000 | DONE cmt | na 16 16 |        |             |                 ; indexing
1253:000 | DONE ins | na 16 16 | 0053ae | 68          |                 pla                  
1254:000 | DONE ins | na 16 16 | 0053af | 85 1a       |                 sta.d 00001a         
1255:000 | DONE ins | na 16 16 | 0053b1 | a0 01 00    |                 ldy.# 0001           
1256:000 | DONE ins | na 16 16 | 0053b4 | b1 1a       |                 lda.diy 00001a       
1257:000 | DONE wsp | na 16 16 |        |             |
1258:000 | DONE cmt | na 16 16 |        |             |                 ; Subtract one from the address given becasue of the RTS
1259:000 | DONE cmt | na 16 16 |        |             |                 ; mechanics
1260:000 | DONE ins | na 16 16 | 0053b6 | 3a          |                 dec.a                
1261:000 | DONE wsp | na 16 16 |        |             |
1262:000 | DONE lbl | na 16 16 | 0053b7 |             | zb_done                              
1263:000 | DONE cmt | na 16 16 |        |             |                 ; One we or another, this is where we're going to jump to
1264:000 | DONE ins | na 16 16 | 0053b7 | 48          |                 pha                  
1265:000 | DONE wsp | na 16 16 |        |             |
1266:000 | DONE cmt | na 16 16 |        |             |                 ; Clean up the Data Stack and jump
1267:000 | DONE ins | na 16 16 | 0053b8 | b4 00       |                 ldy.dx 00            
1268:000 | DONE ins | na 16 16 | 0053ba | e8          |                 inx                  
1269:000 | DONE ins | na 16 16 | 0053bb | e8          |                 inx                  
1270:000 | DONE wsp | na 16 16 |        |             |
1271:000 | DONE ins | na 16 16 | 0053bc | 60          |                 rts                  
1272:000 | DONE wsp | na 16 16 |        |             |
1273:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1274:000 | DONE cmt | na 16 16 |        |             | ; 1 "ONE" ( -- 1 ) 7 bytes / 12 cycles
1275:000 | DONE cmt | na 16 16 |        |             | ; Pushes the number 1 on the Data Stack
1276:000 | DONE lbl | na 16 16 | 0053bd |             | xt_one                               
1277:000 | DONE dir | na 16 16 |        |             |         .!xy16                       
1278:000 | DONE ins | na 16 16 | 0053bd | ca          |                 dex                  
1279:000 | DONE ins | na 16 16 | 0053be | ca          |                 dex                  
1280:000 | DONE ins | na 16 16 | 0053bf | 94 00       |                 sty.dx 00            
1281:000 | DONE ins | na 16 16 | 0053c1 | a0 01 00    |                 ldy.# 0001           
1282:000 | DONE wsp | na 16 16 |        |             |
1283:000 | DONE lbl | na 16 16 | 0053c4 |             | z_one                                
1283:001 | DONE ins | na 16 16 | 0053c4 | 60          |                 rts                  
1284:000 | DONE wsp | na 16 16 |        |             |
1285:000 | DONE wsp | na 16 16 |        |             |
1286:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1287:000 | DONE cmt | na 16 16 |        |             | ; 1- "ONE-MINUS" ( n -- n-1 ) 1 byte / 2 cycles
1288:000 | DONE cmt | na 16 16 |        |             | ; Subtract 1 from Top of Stack (TOS). Because there is no checking if there is
1289:000 | DONE cmt | na 16 16 |        |             | ; actually anything on the Data Stack, this routine will fail silently if the
1290:000 | DONE cmt | na 16 16 |        |             | ; stack is empty
1291:000 | DONE lbl | na 16 16 | 0053c5 |             | xt_one-minus                         
1292:000 | DONE dir | na 16 16 |        |             |         .!xy16                       
1293:000 | DONE ins | na 16 16 | 0053c5 | 88          |                 dey                  
1294:000 | DONE lbl | na 16 16 | 0053c6 |             | z_one-minus                          
1294:001 | DONE ins | na 16 16 | 0053c6 | 60          |                 rts                  
1295:000 | DONE wsp | na 16 16 |        |             |
1296:000 | DONE wsp | na 16 16 |        |             |
1297:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1298:000 | DONE cmt | na 16 16 |        |             | ; 1+ "ONE-PLUS" ( n -- n+1 ) 1 byte / 2 cycles
1299:000 | DONE cmt | na 16 16 |        |             | ; Add 1 to TOS. Because there is no checking if there is actually anything on
1300:000 | DONE cmt | na 16 16 |        |             | ; the Data Stack, this routine will fail silently if the stack is empty
1301:000 | DONE lbl | na 16 16 | 0053c7 |             | xt_one-plus                          
1302:000 | DONE dir | na 16 16 |        |             |         .!xy16                       
1303:000 | DONE ins | na 16 16 | 0053c7 | c8          |                 iny                  
1304:000 | DONE lbl | na 16 16 | 0053c8 |             | z_one-plus                           
1304:001 | DONE ins | na 16 16 | 0053c8 | 60          |                 rts                  
1305:000 | DONE wsp | na 16 16 |        |             |
1306:000 | DONE wsp | na 16 16 |        |             |
1307:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1308:000 | DONE cmt | na 16 16 |        |             | ; 2 "TWO" ( -- 2 ) 7 bytes / 12 cycles
1309:000 | DONE cmt | na 16 16 |        |             | ; Pushes the number 2 on the Data Stack
1310:000 | DONE lbl | na 16 16 | 0053c9 |             | xt_two                               
1311:000 | DONE dir | na 16 16 |        |             |         .!xy16                       
1312:000 | DONE ins | na 16 16 | 0053c9 | ca          |                 dex                  
1313:000 | DONE ins | na 16 16 | 0053ca | ca          |                 dex                  
1314:000 | DONE ins | na 16 16 | 0053cb | 94 00       |                 sty.dx 00            
1315:000 | DONE ins | na 16 16 | 0053cd | a0 02 00    |                 ldy.# 0002           
1316:000 | DONE wsp | na 16 16 |        |             |
1317:000 | DONE lbl | na 16 16 | 0053d0 |             | z_two                                
1317:001 | DONE ins | na 16 16 | 0053d0 | 60          |                 rts                  
1318:000 | DONE wsp | na 16 16 |        |             |
1319:000 | DONE wsp | na 16 16 |        |             |
1320:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1321:000 | DONE cmt | na 16 16 |        |             | ; 2* "TWO-STAR" ( n -- 2*n ) 3 bytes / 6 cycles
1322:000 | DONE cmt | na 16 16 |        |             | ; Multiply Top of Stack (TOS) by 2. This is also used by CELLS
1323:000 | DONE lbl | na 16 16 | 0053d1 |             | xt_two-star                          
1324:000 | DONE dir | na 16 16 |        |             |         .!a16                        
1325:000 | DONE dir | na 16 16 |        |             |         .!xy16                       
1326:000 | DONE ins | na 16 16 | 0053d1 | 98          |                 tya                  
1327:000 | DONE ins | na 16 16 | 0053d2 | 0a          |                 asl.a                
1328:000 | DONE ins | na 16 16 | 0053d3 | a8          |                 tay                  
1329:000 | DONE wsp | na 16 16 |        |             |
1330:000 | DONE lbl | na 16 16 | 0053d4 |             | z_two-star                           
1330:001 | DONE ins | na 16 16 | 0053d4 | 60          |                 rts                  
1331:000 | DONE wsp | na 16 16 |        |             |
1332:000 | DONE wsp | na 16 16 |        |             |
1333:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1334:000 | DONE cmt | na 16 16 |        |             | ; 2>R "TWOTOR" ( n1 n2 -- )(R: -- n1 n2)  X bytes / X cycles
1335:000 | DONE cmt | na 16 16 |        |             | ; Push top two entries to Return Stack. The same as SWAP >R >R except that if we
1336:000 | DONE cmt | na 16 16 |        |             | ; jumped here, the return address will be in the way. May not be natively
1337:000 | DONE cmt | na 16 16 |        |             | ; compiled
1338:000 | DONE cmt | na 16 16 |        |             | ; TODO not coded
1339:000 | DONE lbl | na 16 16 | 0053d5 |             | xt_twotor                            
1340:000 | DONE cmt | na 16 16 |        |             |                 ; get the return address out of the way
1341:000 | DONE ins | na 16 16 | 0053d5 | 68          |                 pla                  
1342:000 | DONE ins | na 16 16 | 0053d6 | 85 20       |                 sta.d 000020         
1343:000 | DONE cmt | na 16 16 |        |             |                 ; --- CUT HERE for native compile ---
1344:000 | DONE wsp | na 16 16 |        |             |
1345:000 | DONE ins | na 16 16 | 0053d8 | b5 00       |                 lda.dx 00            NOS stays next on Return Stack
1346:000 | DONE ins | na 16 16 | 0053da | 48          |                 pha                  
1347:000 | DONE ins | na 16 16 | 0053db | 5a          |                 phy                  TOS stays on top
1348:000 | DONE wsp | na 16 16 |        |             |
1349:000 | DONE ins | na 16 16 | 0053dc | b4 02       |                 ldy.dx 02            clean up data stack
1350:000 | DONE ins | na 16 16 | 0053de | e8          |                 inx                  
1351:000 | DONE ins | na 16 16 | 0053df | e8          |                 inx                  
1352:000 | DONE ins | na 16 16 | 0053e0 | e8          |                 inx                  
1353:000 | DONE ins | na 16 16 | 0053e1 | e8          |                 inx                  
1354:000 | DONE wsp | na 16 16 |        |             |
1355:000 | DONE cmt | na 16 16 |        |             |                 ; --- CUT HERE for native compile ---
1356:000 | DONE ins | na 16 16 | 0053e2 | a5 20       |                 lda.d 000020         
1357:000 | DONE ins | na 16 16 | 0053e4 | 48          |                 pha                  
1358:000 | DONE wsp | na 16 16 |        |             |
1359:000 | DONE lbl | na 16 16 | 0053e5 |             | z_twotor                             
1359:001 | DONE ins | na 16 16 | 0053e5 | 60          |                 rts                  
1360:000 | DONE wsp | na 16 16 |        |             |
1361:000 | DONE wsp | na 16 16 |        |             |
1362:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1363:000 | DONE cmt | na 16 16 |        |             | ; 2DROP ( n m -- ) 6 bytes / 13 cycles
1364:000 | DONE cmt | na 16 16 |        |             | ; Drop first two entries of Data Stack
1365:000 | DONE lbl | na 16 16 | 0053e6 |             | xt_2drop                             
1366:000 | DONE ins | na 16 16 | 0053e6 | b4 02       |                 ldy.dx 02            
1367:000 | DONE ins | na 16 16 | 0053e8 | e8          |                 inx                  
1368:000 | DONE ins | na 16 16 | 0053e9 | e8          |                 inx                  
1369:000 | DONE ins | na 16 16 | 0053ea | e8          |                 inx                  
1370:000 | DONE ins | na 16 16 | 0053eb | e8          |                 inx                  
1371:000 | DONE wsp | na 16 16 |        |             |
1372:000 | DONE lbl | na 16 16 | 0053ec |             | z_2drop                              
1372:001 | DONE ins | na 16 16 | 0053ec | 60          |                 rts                  
1373:000 | DONE wsp | na 16 16 |        |             |
1374:000 | DONE wsp | na 16 16 |        |             |
1375:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1376:000 | DONE cmt | na 16 16 |        |             | ; 2DUP ( n m -- n m n m ) 10 bytes / 23 cycles
1377:000 | DONE cmt | na 16 16 |        |             | ; Duplicated the top two data stack entries
1378:000 | DONE wsp | na 16 16 |        |             |
1379:000 | DONE lbl | na 16 16 | 0053ed |             | xt_2dup                              
1380:000 | DONE dir | na 16 16 |        |             |         .!xy16                       
1381:000 | DONE ins | na 16 16 | 0053ed | ca          |                 dex                  
1382:000 | DONE ins | na 16 16 | 0053ee | ca          |                 dex                  
1383:000 | DONE ins | na 16 16 | 0053ef | ca          |                 dex                  
1384:000 | DONE ins | na 16 16 | 0053f0 | ca          |                 dex                  
1385:000 | DONE ins | na 16 16 | 0053f1 | 94 02       |                 sty.dx 02            
1386:000 | DONE ins | na 16 16 | 0053f3 | b5 04       |                 lda.dx 04            
1387:000 | DONE ins | na 16 16 | 0053f5 | 95 00       |                 sta.dx 00            
1388:000 | DONE wsp | na 16 16 |        |             |
1389:000 | DONE lbl | na 16 16 | 0053f7 |             | z_2dup                               
1389:001 | DONE ins | na 16 16 | 0053f7 | 60          |                 rts                  
1390:000 | DONE wsp | na 16 16 |        |             |
1391:000 | DONE wsp | na 16 16 |        |             |
1392:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1393:000 | DONE cmt | na 16 16 |        |             | ; 2OVER ( d1 d2 -- d1 d2 d1 ) X bytes / X cycles
1394:000 | DONE cmt | na 16 16 |        |             | ; Copy cell pair that is NOS to TOS
1395:000 | DONE lbl | na 16 16 | 0053f8 |             | xt_2over                             
1396:000 | DONE ins | na 16 16 | 0053f8 | ca          |                 dex                  
1397:000 | DONE ins | na 16 16 | 0053f9 | ca          |                 dex                  
1398:000 | DONE ins | na 16 16 | 0053fa | ca          |                 dex                  
1399:000 | DONE ins | na 16 16 | 0053fb | ca          |                 dex                  
1400:000 | DONE ins | na 16 16 | 0053fc | 94 02       |                 sty.dx 02            
1401:000 | DONE ins | na 16 16 | 0053fe | b4 06       |                 ldy.dx 06            
1402:000 | DONE ins | na 16 16 | 005400 | b5 08       |                 lda.dx 08            
1403:000 | DONE ins | na 16 16 | 005402 | 95 00       |                 sta.dx 00            
1404:000 | DONE wsp | na 16 16 |        |             |
1405:000 | DONE lbl | na 16 16 | 005404 |             | z_2over                              
1405:001 | DONE ins | na 16 16 | 005404 | 60          |                 rts                  
1406:000 | DONE wsp | na 16 16 |        |             |
1407:000 | DONE wsp | na 16 16 |        |             |
1408:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1409:000 | DONE cmt | na 16 16 |        |             | ; 2R> "TWOFROMR" ( -- n1 n2 ) ( R: n1 n2 ) X bytes / X cycles
1410:000 | DONE cmt | na 16 16 |        |             | ; Pull top two entries from Return Stack. Is the same as R> R> SWAP
1411:000 | DONE cmt | na 16 16 |        |             | ; As with R>, the problem with the is word is that the top value on the Return
1412:000 | DONE cmt | na 16 16 |        |             | ; Stack for a STC Forth is the return address, which we need to get out of the
1413:000 | DONE cmt | na 16 16 |        |             | ; way first. Uses tmp3
1414:000 | DONE lbl | na 16 16 | 005405 |             | xt_twofromr                          
1415:000 | DONE cmt | na 16 16 |        |             |                 ; get the return address out of the way
1416:000 | DONE ins | na 16 16 | 005405 | 68          |                 pla                  
1417:000 | DONE ins | na 16 16 | 005406 | 85 20       |                 sta.d 000020         
1418:000 | DONE cmt | na 16 16 |        |             |                 ; --- CUT HERE for native compile ---
1419:000 | DONE wsp | na 16 16 |        |             |
1420:000 | DONE ins | na 16 16 | 005408 | ca          |                 dex                  make room on Data Stack
1421:000 | DONE ins | na 16 16 | 005409 | ca          |                 dex                  
1422:000 | DONE ins | na 16 16 | 00540a | ca          |                 dex                  
1423:000 | DONE ins | na 16 16 | 00540b | ca          |                 dex                  
1424:000 | DONE ins | na 16 16 | 00540c | 94 02       |                 sty.dx 02            
1425:000 | DONE wsp | na 16 16 |        |             |
1426:000 | DONE ins | na 16 16 | 00540e | 7a          |                 ply                  top element stays on top
1427:000 | DONE ins | na 16 16 | 00540f | 68          |                 pla                  next element stays below
1428:000 | DONE ins | na 16 16 | 005410 | 95 00       |                 sta.dx 00            
1429:000 | DONE wsp | na 16 16 |        |             |
1430:000 | DONE cmt | na 16 16 |        |             |                 ; --- CUT HERE for native compile ---
1431:000 | DONE cmt | na 16 16 |        |             |                 ; restore return address
1432:000 | DONE ins | na 16 16 | 005412 | a5 20       |                 lda.d 000020         
1433:000 | DONE ins | na 16 16 | 005414 | 48          |                 pha                  
1434:000 | DONE wsp | na 16 16 |        |             |
1435:000 | DONE lbl | na 16 16 | 005415 |             | z_twofromr                           
1435:001 | DONE ins | na 16 16 | 005415 | 60          |                 rts                  
1436:000 | DONE wsp | na 16 16 |        |             |
1437:000 | DONE wsp | na 16 16 |        |             |
1438:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1439:000 | DONE cmt | na 16 16 |        |             | ; 2R@ ( -- n1 n2 )(R: n1 n2 -- n1 n2 )  X bytes / X cycles
1440:000 | DONE cmt | na 16 16 |        |             | ; Copy two words off the Return Stack.  This is R> R> 2DUP >R >R SWAP but we
1441:000 | DONE cmt | na 16 16 |        |             | ; can do this a lot faster in assembler This routine may not be natively
1442:000 | DONE cmt | na 16 16 |        |             | ; compiled; because it accessed by a JSR, the first element on the Return Stack
1443:000 | DONE cmt | na 16 16 |        |             | ; (LDA.S 01) is the return address.
1444:000 | DONE lbl | na 16 16 | 005416 |             | xt_tworfetch                         
1445:000 | DONE cmt | na 16 16 |        |             |                 ; make room on the Data Stack
1446:000 | DONE ins | na 16 16 | 005416 | ca          |                 dex                  
1447:000 | DONE ins | na 16 16 | 005417 | ca          |                 dex                  
1448:000 | DONE ins | na 16 16 | 005418 | ca          |                 dex                  
1449:000 | DONE ins | na 16 16 | 005419 | ca          |                 dex                  
1450:000 | DONE ins | na 16 16 | 00541a | 94 02       |                 sty.dx 02            
1451:000 | DONE wsp | na 16 16 |        |             |
1452:000 | DONE ins | na 16 16 | 00541c | a3 03       |                 lda.s 03             get top of Return Stack
1453:000 | DONE ins | na 16 16 | 00541e | a8          |                 tay                  
1454:000 | DONE ins | na 16 16 | 00541f | a3 05       |                 lda.s 05             get next on Return Stack
1455:000 | DONE ins | na 16 16 | 005421 | 95 00       |                 sta.dx 00            
1456:000 | DONE wsp | na 16 16 |        |             |
1457:000 | DONE lbl | na 16 16 | 005423 |             | z_tworfetch                          
1457:001 | DONE ins | na 16 16 | 005423 | 60          |                 rts                  
1458:000 | DONE wsp | na 16 16 |        |             |
1459:000 | DONE wsp | na 16 16 |        |             |
1460:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1461:000 | DONE cmt | na 16 16 |        |             | ; 2SWAP ( d1 d2 -- d2 d1 ) X bytes / X cycles
1462:000 | DONE cmt | na 16 16 |        |             | ; Swap two double cell numbers on the Data Stack.
1463:000 | DONE lbl | na 16 16 | 005424 |             | xt_2swap                             
1464:000 | DONE ins | na 16 16 | 005424 | 5a          |                 phy                  hi word of TOS
1465:000 | DONE ins | na 16 16 | 005425 | b4 02       |                 ldy.dx 02            hi word of NOS
1466:000 | DONE ins | na 16 16 | 005427 | 68          |                 pla                  
1467:000 | DONE ins | na 16 16 | 005428 | 95 02       |                 sta.dx 02            
1468:000 | DONE wsp | na 16 16 |        |             |
1469:000 | DONE ins | na 16 16 | 00542a | b5 00       |                 lda.dx 00            lo word of TOS
1470:000 | DONE ins | na 16 16 | 00542c | 48          |                 pha                  
1471:000 | DONE ins | na 16 16 | 00542d | b5 04       |                 lda.dx 04            lo word of NOS
1472:000 | DONE ins | na 16 16 | 00542f | 95 00       |                 sta.dx 00            
1473:000 | DONE ins | na 16 16 | 005431 | 68          |                 pla                  
1474:000 | DONE ins | na 16 16 | 005432 | 95 04       |                 sta.dx 04            
1475:000 | DONE wsp | na 16 16 |        |             |
1476:000 | DONE lbl | na 16 16 | 005434 |             | z_2swap                              
1476:001 | DONE ins | na 16 16 | 005434 | 60          |                 rts                  
1477:000 | DONE wsp | na 16 16 |        |             |
1478:000 | DONE wsp | na 16 16 |        |             |
1479:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1480:000 | DONE cmt | na 16 16 |        |             | ; 2VARIABLE ( "name" -- ) X bytes / X cycles
1481:000 | DONE cmt | na 16 16 |        |             | ; Create a variable with space for a double celled word. This can be realized in
1482:000 | DONE cmt | na 16 16 |        |             | ; Forth as either CREATE 2 CELLS ALLOT or just CREATE 0 , 0 ,
1483:000 | DONE cmt | na 16 16 |        |             | ; We use the second variant, letting CREATE do the hard work
1484:000 | DONE cmt | na 16 16 |        |             | ; TODO see if it is faster to use Y as an index and increase by four
1485:000 | DONE lbl | na 16 16 | 005435 |             | xt_2variable                         
1486:000 | DONE dir | na 16 16 |        |             |         .!a16                        
1487:000 | DONE ins | na 16 16 | 005435 | 20 27 57    |                 jsr 005727           
1488:000 | DONE wsp | na 16 16 |        |             |
1489:000 | DONE ins | na 16 16 | 005438 | a9 00 00    |                 lda.# 0000           
1490:000 | DONE ins | na 16 16 | 00543b | 92 00       |                 sta.di 000000        
1491:000 | DONE ins | na 16 16 | 00543d | e6 00       |                 inc.d 000000         
1492:000 | DONE ins | na 16 16 | 00543f | e6 00       |                 inc.d 000000         
1493:000 | DONE ins | na 16 16 | 005441 | 92 00       |                 sta.di 000000        
1494:000 | DONE ins | na 16 16 | 005443 | e6 00       |                 inc.d 000000         
1495:000 | DONE ins | na 16 16 | 005445 | e6 00       |                 inc.d 000000         
1496:000 | DONE wsp | na 16 16 |        |             |
1497:000 | DONE lbl | na 16 16 | 005447 |             | z_2variable                          
1497:001 | DONE ins | na 16 16 | 005447 | 60          |                 rts                  
1498:000 | DONE wsp | na 16 16 |        |             |
1499:000 | DONE wsp | na 16 16 |        |             |
1500:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1501:000 | DONE cmt | na 16 16 |        |             | ; ' "TICK" ( "string" -- xt ) X bytes / X cycles
1502:000 | DONE cmt | na 16 16 |        |             | ; Given a string with the name of a word, return the word's execution token (xt)
1503:000 | DONE cmt | na 16 16 |        |             | ; Abort if not found
1504:000 | DONE lbl | na 16 16 | 005448 |             | xt_tick                              
1505:000 | DONE ins | na 16 16 | 005448 | 20 ef 5b    |                 jsr 005bef           ( -- addr u )
1506:000 | DONE wsp | na 16 16 |        |             |
1507:000 | DONE cmt | na 16 16 |        |             |                 ; if we got a zero, complain and abort
1508:000 | DONE ins | na 16 16 | 00544b | 98          |                 tya                  force flag check
1509:000 | DONE ins | na 16 16 | 00544c | d0 06       |                 bne 005454           
1510:000 | DONE wsp | na 16 16 |        |             |
1511:000 | DONE ins | na 16 16 | 00544e | a9 52 70    |                 lda.# 007052         
1512:000 | DONE ins | na 16 16 | 005451 | 4c 60 69    |                 jmp 006960           
1513:000 | DONE wsp | na 16 16 |        |             |
1514:000 | DONE lbl | na 16 16 | 005454 |             | tick_have_word                       
1515:000 | DONE ins | na 16 16 | 005454 | 20 2b 59    |                 jsr 00592b           ( addr u -- nt)
1516:000 | DONE ins | na 16 16 | 005457 | 98          |                 tya                  force flag check
1517:000 | DONE wsp | na 16 16 |        |             |
1518:000 | DONE cmt | na 16 16 |        |             |                 ; if we didn't find string in the dictionary, complain and abort
1519:000 | DONE ins | na 16 16 | 005458 | d0 06       |                 bne 005460           
1520:000 | DONE wsp | na 16 16 |        |             |
1521:000 | DONE ins | na 16 16 | 00545a | a9 ef 70    |                 lda.# 0070ef         
1522:000 | DONE ins | na 16 16 | 00545d | 4c 60 69    |                 jmp 006960           
1523:000 | DONE wsp | na 16 16 |        |             |
1524:000 | DONE lbl | na 16 16 | 005460 |             | tick_have_nt                         
1525:000 | DONE ins | na 16 16 | 005460 | 20 07 5b    |                 jsr 005b07           ( nt -- xt )
1526:000 | DONE wsp | na 16 16 |        |             |
1527:000 | DONE lbl | na 16 16 | 005463 |             | z_tick                               
1527:001 | DONE ins | na 16 16 | 005463 | 60          |                 rts                  
1528:000 | DONE wsp | na 16 16 |        |             |
1529:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1530:000 | DONE cmt | na 16 16 |        |             | ; ABORT" "ABORTQ" ( "string" -- ) X bytes / X cycles
1531:000 | DONE cmt | na 16 16 |        |             | ; If flag on TOS is not false, print error message and abort. This a compile-only word
1532:000 | DONE lbl | na 16 16 | 005464 |             | xt_abortq                            
1533:000 | DONE dir | na 16 16 |        |             |         .!a16                        
1534:000 | DONE ins | na 16 16 | 005464 | 20 fb 5c    |                 jsr 005cfb           save string
1535:000 | DONE wsp | na 16 16 |        |             |
1536:000 | DONE ins | na 16 16 | 005467 | f4 6e 54    |                 phe.# 00546e         compile run-time aspect
1537:000 | DONE ins | na 16 16 | 00546a | 20 3f 69    |                 jsr 00693f           
1538:000 | DONE wsp | na 16 16 |        |             |
1539:000 | DONE ins | na 16 16 | 00546d | 60          |                 rts                  
1540:000 | DONE wsp | na 16 16 |        |             |
1541:000 | DONE lbl | na 16 16 | 00546e |             | abortq_rt                            
1542:000 | DONE cmt | na 16 16 |        |             |                 ; we land here with ( f addr u )
1543:000 | DONE ins | na 16 16 | 00546e | b5 02       |                 lda.dx 02            get flag as 3OS
1544:000 | DONE ins | na 16 16 | 005470 | f0 06       |                 beq 005478           if FALSE, we're done
1545:000 | DONE wsp | na 16 16 |        |             |
1546:000 | DONE cmt | na 16 16 |        |             |                 ; if TRUE, we print string and ABORT
1547:000 | DONE cmt | na 16 16 |        |             |                 ; TODO see if we want to inform user we're aborting
1548:000 | DONE ins | na 16 16 | 005472 | 20 62 5e    |                 jsr 005e62           
1549:000 | DONE ins | na 16 16 | 005475 | 4c b2 50    |                 jmp 0050b2           not JSR because we never come back
1550:000 | DONE wsp | na 16 16 |        |             |
1551:000 | DONE lbl | na 16 16 | 005478 |             | abortq_done                          
1552:000 | DONE cmt | na 16 16 |        |             |                 ; drop the three entries from the Data Stack
1553:000 | DONE ins | na 16 16 | 005478 | b4 04       |                 ldy.dx 04            fourth on the stack
1554:000 | DONE wsp | na 16 16 |        |             |
1555:000 | DONE cmt | na 16 16 |        |             |                 ; this is the same size, but three cycles faster than six INX
1556:000 | DONE cmt | na 16 16 |        |             |                 ; instructions
1557:000 | DONE ins | na 16 16 | 00547a | 8a          |                 txa                  
1558:000 | DONE ins | na 16 16 | 00547b | 18          |                 clc                  
1559:000 | DONE ins | na 16 16 | 00547c | 69 06 00    |                 adc.# 0006           
1560:000 | DONE ins | na 16 16 | 00547f | aa          |                 tax                  
1561:000 | DONE wsp | na 16 16 |        |             |
1562:000 | DONE lbl | na 16 16 | 005480 |             | z_abortq                             
1562:001 | DONE ins | na 16 16 | 005480 | 60          |                 rts                  
1563:000 | DONE wsp | na 16 16 |        |             |
1564:000 | DONE wsp | na 16 16 |        |             |
1565:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1566:000 | DONE cmt | na 16 16 |        |             | ; ABS ( n -- u ) 8 bytes / X cycles
1567:000 | DONE cmt | na 16 16 |        |             | ; Return the absolute value of a single number
1568:000 | DONE lbl | na 16 16 | 005481 |             | xt_abs                               
1569:000 | DONE dir | na 16 16 |        |             |         .!a16                        
1570:000 | DONE dir | na 16 16 |        |             |         .!xy16                       
1571:000 | DONE ins | na 16 16 | 005481 | 98          |                 tya                  force flag test
1572:000 | DONE ins | na 16 16 | 005482 | 10 05       |                 bpl 005489           positive number is easy
1573:000 | DONE wsp | na 16 16 |        |             |
1574:000 | DONE cmt | na 16 16 |        |             |                 ; negative: Calculate 0-n
1575:000 | DONE ins | na 16 16 | 005484 | 49 ff ff    |                 eor.# 0ffff          
1576:000 | DONE ins | na 16 16 | 005487 | 1a          |                 inc.a                
1577:000 | DONE ins | na 16 16 | 005488 | a8          |                 tay                  
1578:000 | DONE wsp | na 16 16 |        |             |
1579:000 | DONE lbl | na 16 16 | 005489 |             | z_abs                                
1579:001 | DONE ins | na 16 16 | 005489 | 60          |                 rts                  
1580:000 | DONE wsp | na 16 16 |        |             |
1581:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1582:000 | DONE cmt | na 16 16 |        |             | ; ACCEPT ( addr n1 -- n2 ) X bytes / X cycles
1583:000 | DONE cmt | na 16 16 |        |             | ; Receive a string of at most n1 characters, placing them at addr. Return the
1584:000 | DONE cmt | na 16 16 |        |             | ; actual number of characters as n2. Characters are echoed as they are received.
1585:000 | DONE cmt | na 16 16 |        |             | ; ACCEPT is called by REFILL these days.
1586:000 | DONE wsp | na 16 16 |        |             |
1587:000 | DONE cmt | na 16 16 |        |             | ; Though we're dealing with individual characters, all these actions are
1588:000 | DONE cmt | na 16 16 |        |             | ; performed with a 16 bit A register. The only place we switch is in the kernel
1589:000 | DONE cmt | na 16 16 |        |             | ; routines themselves
1590:000 | DONE lbl | na 16 16 | 00548a |             | xt_accept                            
1591:000 | DONE dir | na 16 16 |        |             |         .!a16                        
1592:000 | DONE cmt | na 16 16 |        |             |                 ; Set up loop
1593:000 | DONE ins | na 16 16 | 00548a | 98          |                 tya                  force flag test
1594:000 | DONE ins | na 16 16 | 00548b | d0 03       |                 bne 005490           
1595:000 | DONE wsp | na 16 16 |        |             |
1596:000 | DONE cmt | na 16 16 |        |             |                 ; if we were told to get zero chars, just quit
1597:000 | DONE ins | na 16 16 | 00548d | e8          |                 inx                  NIP, TOS is zero which is also FALSE
1598:000 | DONE ins | na 16 16 | 00548e | e8          |                 inx                  
1599:000 | DONE wsp | na 16 16 |        |             |
1600:000 | DONE ins | na 16 16 | 00548f | 60          |                 rts                  
1601:000 | DONE wsp | na 16 16 |        |             |
1602:000 | DONE lbl | na 16 16 | 005490 |             | accept_nonzero                       
1603:000 | DONE ins | na 16 16 | 005490 | b5 00       |                 lda.dx 00            address of buffer is NOS
1604:000 | DONE ins | na 16 16 | 005492 | 85 1c       |                 sta.d 00001c         
1605:000 | DONE ins | na 16 16 | 005494 | e8          |                 inx                  NIP
1606:000 | DONE ins | na 16 16 | 005495 | e8          |                 inx                  
1607:000 | DONE wsp | na 16 16 |        |             |
1608:000 | DONE ins | na 16 16 | 005496 | 84 1e       |                 sty.d 00001e         Save max number of chars in tmp2
1609:000 | DONE ins | na 16 16 | 005498 | a0 00 00    |                 ldy.# 0000           Use Y as counter
1610:000 | DONE wsp | na 16 16 |        |             |
1611:000 | DONE lbl | na 16 16 | 00549b |             | accept_loop                          
1612:000 | DONE cmt | na 16 16 |        |             |                 ; We don't need to check for CTRL-l, because a vt100 terminal
1613:000 | DONE cmt | na 16 16 |        |             |                 ; clears the screen automatically
1614:000 | DONE wsp | na 16 16 |        |             |
1615:000 | DONE cmt | na 16 16 |        |             |                 ; This is a rolled-out version of KEY so we don't spend time
1616:000 | DONE cmt | na 16 16 |        |             |                 ; fooling around wit the stack
1617:000 | DONE ins | na 16 16 | 00549b | 8e 22 00    |                 stx 000022           
1618:000 | DONE ins | na 16 16 | 00549e | a2 00 00    |                 ldx.# 0000           
1619:000 | DONE ins | na 16 16 | 0054a1 | fc 10 00    |                 jsr.xi 000010        JSR (INPUT,X)
1620:000 | DONE ins | na 16 16 | 0054a4 | a6 22       |                 ldx.d 000022         
1621:000 | DONE wsp | na 16 16 |        |             |
1622:000 | DONE cmt | na 16 16 |        |             |                 ; we quit on both line feed and carriage return
1623:000 | DONE ins | na 16 16 | 0054a6 | c9 0a 00    |                 cmp.# AscLF          
1624:000 | DONE ins | na 16 16 | 0054a9 | f0 43       |                 beq 0054ee           
1625:000 | DONE ins | na 16 16 | 0054ab | c9 0d 00    |                 cmp.# AscCR          
1626:000 | DONE ins | na 16 16 | 0054ae | f0 3e       |                 beq 0054ee           
1627:000 | DONE wsp | na 16 16 |        |             |
1628:000 | DONE cmt | na 16 16 |        |             |                 ; BS and DEL do the same thing for the moment
1629:000 | DONE ins | na 16 16 | 0054b0 | c9 08 00    |                 cmp.# AscBS          
1630:000 | DONE ins | na 16 16 | 0054b3 | f0 3f       |                 beq 0054f4           
1631:000 | DONE ins | na 16 16 | 0054b5 | c9 7f 00    |                 cmp.# AscDEL         
1632:000 | DONE ins | na 16 16 | 0054b8 | f0 3a       |                 beq 0054f4           
1633:000 | DONE wsp | na 16 16 |        |             |
1634:000 | DONE cmt | na 16 16 |        |             |                 ; CTRL-c and ESC abort (see if this is too harsh)
1635:000 | DONE ins | na 16 16 | 0054ba | c9 03 00    |                 cmp.# AscCC          
1636:000 | DONE ins | na 16 16 | 0054bd | d0 03       |                 bne 0054c2           
1637:000 | DONE ins | na 16 16 | 0054bf | 4c b2 50    |                 jmp 0050b2           
1638:000 | DONE lbl | na 16 16 | 0054c2 |             | @                                    
1639:000 | DONE ins | na 16 16 | 0054c2 | c9 1b 00    |                 cmp.# AscESC         
1640:000 | DONE ins | na 16 16 | 0054c5 | d0 03       |                 bne 0054ca           
1641:000 | DONE ins | na 16 16 | 0054c7 | 4c b2 50    |                 jmp 0050b2           
1642:000 | DONE lbl | na 16 16 | 0054ca |             | @                                    
1643:000 | DONE cmt | na 16 16 |        |             |                 ; CTRL-p will be used for "previous cmd", TODO
1644:000 | DONE ins | na 16 16 | 0054ca | c9 10 00    |                 cmp.# AscCP          
1645:000 | DONE ins | na 16 16 | 0054cd | d0 08       |                 bne 0054d7           
1646:000 | DONE wsp | na 16 16 |        |             |
1647:000 | DONE ins | na 16 16 | 0054cf | a9 07 71    |                 lda.# 007107         
1648:000 | DONE ins | na 16 16 | 0054d2 | 20 66 69    |                 jsr 006966           
1649:000 | DONE wsp | na 16 16 |        |             |
1650:000 | DONE ins | na 16 16 | 0054d5 | 80 c4       |                 bra 00549b           
1651:000 | DONE lbl | na 16 16 | 0054d7 |             | @                                    
1652:000 | DONE cmt | na 16 16 |        |             |                 ; CTRL-n will be used for "next cmd", TODO
1653:000 | DONE ins | na 16 16 | 0054d7 | c9 0e 00    |                 cmp.# AscCN          
1654:000 | DONE ins | na 16 16 | 0054da | d0 08       |                 bne 0054e4           
1655:000 | DONE wsp | na 16 16 |        |             |
1656:000 | DONE ins | na 16 16 | 0054dc | a9 1a 71    |                 lda.# 00711a         
1657:000 | DONE ins | na 16 16 | 0054df | 20 66 69    |                 jsr 006966           
1658:000 | DONE wsp | na 16 16 |        |             |
1659:000 | DONE ins | na 16 16 | 0054e2 | 80 b7       |                 bra 00549b           
1660:000 | DONE wsp | na 16 16 |        |             |
1661:000 | DONE lbl | na 16 16 | 0054e4 |             | @                                    
1662:000 | DONE cmt | na 16 16 |        |             |                 ; That's quite enough, echo character. EMIT_A sidesteps all the
1663:000 | DONE cmt | na 16 16 |        |             |                 ; fooling around with the Data Stack
1664:000 | DONE ins | na 16 16 | 0054e4 | 20 99 58    |                 jsr 005899           
1665:000 | DONE wsp | na 16 16 |        |             |
1666:000 | DONE ins | na 16 16 | 0054e7 | 91 08       |                 sta.diy 000008       STA (CIB),Y
1667:000 | DONE wsp | na 16 16 |        |             |
1668:000 | DONE ins | na 16 16 | 0054e9 | c8          |                 iny                  
1669:000 | DONE ins | na 16 16 | 0054ea | c4 1e       |                 cpy.d 00001e         reached character limit?
1670:000 | DONE ins | na 16 16 | 0054ec | d0 ad       |                 bne 00549b           fall thru if buffer limit reached
1671:000 | DONE wsp | na 16 16 |        |             |
1672:000 | DONE lbl | na 16 16 | 0054ee |             | accept_eol                           
1673:000 | DONE ins | na 16 16 | 0054ee | 84 0a       |                 sty.d 00000a         Y contains number of chars accepted already
1674:000 | DONE wsp | na 16 16 |        |             |
1675:000 | DONE ins | na 16 16 | 0054f0 | 20 1e 5e    |                 jsr 005e1e           print final space
1676:000 | DONE ins | na 16 16 | 0054f3 | 60          |                 rts                  this is the actual return of the routine
1677:000 | DONE wsp | na 16 16 |        |             |
1678:000 | DONE lbl | na 16 16 | 0054f4 |             | accept_bs                            
1679:000 | DONE ins | na 16 16 | 0054f4 | c0 00 00    |                 cpy.# 0000           buffer empty?
1680:000 | DONE ins | na 16 16 | 0054f7 | d0 07       |                 bne 005500           
1681:000 | DONE wsp | na 16 16 |        |             |
1682:000 | DONE ins | na 16 16 | 0054f9 | a9 07 00    |                 lda.# AscBELL        complain and don't delete beyond the start of line
1683:000 | DONE ins | na 16 16 | 0054fc | 20 99 58    |                 jsr 005899           
1684:000 | DONE ins | na 16 16 | 0054ff | c8          |                 iny                  
1685:000 | DONE lbl | na 16 16 | 005500 |             | @                                    
1686:000 | DONE ins | na 16 16 | 005500 | 88          |                 dey                  
1687:000 | DONE ins | na 16 16 | 005501 | a9 08 00    |                 lda.# AscBS          move back one
1688:000 | DONE ins | na 16 16 | 005504 | 20 99 58    |                 jsr 005899           
1689:000 | DONE ins | na 16 16 | 005507 | a9 20 00    |                 lda.# AscSP          print a space (rubout)
1690:000 | DONE ins | na 16 16 | 00550a | 20 99 58    |                 jsr 005899           
1691:000 | DONE ins | na 16 16 | 00550d | a9 08 00    |                 lda.# AscBS          move back over space
1692:000 | DONE ins | na 16 16 | 005510 | 20 99 58    |                 jsr 005899           
1693:000 | DONE wsp | na 16 16 |        |             |
1694:000 | DONE ins | na 16 16 | 005513 | 80 86       |                 bra 00549b           
1695:000 | DONE wsp | na 16 16 |        |             |
1696:000 | DONE lbl | na 16 16 | 005515 |             | z_accept                             
1696:001 | DONE ins | na 16 16 | 005515 | 60          |                 rts                  
1697:000 | DONE wsp | na 16 16 |        |             |
1698:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1699:000 | DONE cmt | na 16 16 |        |             | ; AGAIN ( addr -- ) 22 bytes / 50 cycles
1700:000 | DONE cmt | na 16 16 |        |             | ; Code a backwards branch to an address usually left by BEGIN. We use JMP
1701:000 | DONE cmt | na 16 16 |        |             | ; instead of BRA to make sure we have the range.
1702:000 | DONE cmt | na 16 16 |        |             | ; TODO see if we should insert a KEY? to make sure we can abort and/or a PAUSE
1703:000 | DONE lbl | na 16 16 | 005516 |             | xt_again                             
1704:000 | DONE wsp | na 16 16 |        |             |
1705:000 | DONE cmt | na 16 16 |        |             |                 ; Add the opcode for a JMP
1706:000 | DONE ins | na 16 16 | 005516 | e2 20       |                 sep 20               
1706:001 | DONE ctl | na  8 16 |        |             |         .!a8
1707:000 | DONE ins | na  8 16 | 005518 | a9 4c       |                 lda.# 4c             
1708:000 | DONE ins | na  8 16 | 00551a | 92 00       |                 sta.di 000000        STA (CP)
1709:000 | DONE ins | na  8 16 | 00551c | c2 20       |                 rep 20               
1709:001 | DONE ctl | na 16 16 |        |             |         .!a16
1710:000 | DONE ins | na 16 16 | 00551e | e6 00       |                 inc.d 000000         
1711:000 | DONE wsp | na 16 16 |        |             |
1712:000 | DONE cmt | na 16 16 |        |             |                 ; Add the address which should be TOS
1713:000 | DONE ins | na 16 16 | 005520 | 98          |                 tya                  
1714:000 | DONE ins | na 16 16 | 005521 | 92 00       |                 sta.di 000000        
1715:000 | DONE ins | na 16 16 | 005523 | e6 00       |                 inc.d 000000         
1716:000 | DONE ins | na 16 16 | 005525 | e6 00       |                 inc.d 000000         
1717:000 | DONE wsp | na 16 16 |        |             |
1718:000 | DONE cmt | na 16 16 |        |             |                 ; drop the address
1719:000 | DONE ins | na 16 16 | 005527 | b4 00       |                 ldy.dx 00            
1720:000 | DONE ins | na 16 16 | 005529 | e8          |                 inx                  
1721:000 | DONE ins | na 16 16 | 00552a | e8          |                 inx                  
1722:000 | DONE wsp | na 16 16 |        |             |
1723:000 | DONE lbl | na 16 16 | 00552b |             | z_again                              
1723:001 | DONE ins | na 16 16 | 00552b | 60          |                 rts                  
1724:000 | DONE wsp | na 16 16 |        |             |
1725:000 | DONE wsp | na 16 16 |        |             |
1726:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1727:000 | DONE cmt | na 16 16 |        |             | ; ALIGN ( -- ) 1 bytes / X cycles
1728:000 | DONE cmt | na 16 16 |        |             | ; Make sure CP is aligned. This does nothing on the 65816
1729:000 | DONE lbl | na 16 16 | 00552c |             | xt_align                             
1730:000 | DONE ins | na 16 16 | 00552c | ea          |                 nop                  removed during native compile
1731:000 | DONE lbl | na 16 16 | 00552d |             | z_align                              
1731:001 | DONE ins | na 16 16 | 00552d | 60          |                 rts                  
1732:000 | DONE wsp | na 16 16 |        |             |
1733:000 | DONE wsp | na 16 16 |        |             |
1734:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1735:000 | DONE cmt | na 16 16 |        |             | ; ALIGNED ( addr -- a-addr ) X bytes / X cycles
1736:000 | DONE cmt | na 16 16 |        |             | ; Return the next aligned address. With the 65816, this does nothing
1737:000 | DONE lbl | na 16 16 | 00552e |             | xt_aligned                           
1738:000 | DONE ins | na 16 16 | 00552e | ea          |                 nop                  removed during native compile
1739:000 | DONE lbl | na 16 16 | 00552f |             | z_aligned                            
1739:001 | DONE ins | na 16 16 | 00552f | 60          |                 rts                  
1740:000 | DONE wsp | na 16 16 |        |             |
1741:000 | DONE wsp | na 16 16 |        |             |
1742:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1743:000 | DONE cmt | na 16 16 |        |             | ; ALLOT ( n -- ) X bytes / X cycles
1744:000 | DONE cmt | na 16 16 |        |             | ; Reserve a certain number of bytes (not cells) or release them. If n = 0, do
1745:000 | DONE cmt | na 16 16 |        |             | ; nothing. If n is negative, release n bytes, but only to the beginning of the
1746:000 | DONE cmt | na 16 16 |        |             | ; Dictionary. If n is positive (the most common case), reserve n bytes, but not
1747:000 | DONE cmt | na 16 16 |        |             | ; past the Dictionary.
1748:000 | DONE cmt | na 16 16 |        |             | ; See http://forth-standard.org/standard/core/ALLOT
1749:000 | DONE cmt | na 16 16 |        |             | ; TODO test negative values
1750:000 | DONE lbl | na 16 16 | 005530 |             | xt_allot                             
1751:000 | DONE dir | na 16 16 |        |             |         .!a16                        
1752:000 | DONE ins | na 16 16 | 005530 | 98          |                 tya                  force flag check
1753:000 | DONE ins | na 16 16 | 005531 | f0 21       |                 beq 005554           zero bytes, don't do anything
1754:000 | DONE ins | na 16 16 | 005533 | 30 12       |                 bmi 005547           free memory instead of reserving it
1755:000 | DONE wsp | na 16 16 |        |             |
1756:000 | DONE cmt | na 16 16 |        |             |                 ; most common case: reserve n bytes. We've already transfered
1757:000 | DONE cmt | na 16 16 |        |             |                 ; TOS to A, so we just have to add the current compile pointer
1758:000 | DONE ins | na 16 16 | 005535 | 18          |                 clc                  
1759:000 | DONE ins | na 16 16 | 005536 | 65 00       |                 adc.d 000000         create new CP
1760:000 | DONE ins | na 16 16 | 005538 | b0 07       |                 bcs 005541           oops, we've wrapped
1761:000 | DONE wsp | na 16 16 |        |             |
1762:000 | DONE ins | na 16 16 | 00553a | a8          |                 tay                  save copy of new CP
1763:000 | DONE wsp | na 16 16 |        |             |
1764:000 | DONE ins | na 16 16 | 00553b | 38          |                 sec                  
1765:000 | DONE ins | na 16 16 | 00553c | e9 ff 4f    |                 sbc.# 004fff         
1766:000 | DONE ins | na 16 16 | 00553f | 30 11       |                 bmi 005552           oops, fall thru if beyond max RAM
1767:000 | DONE wsp | na 16 16 |        |             |
1768:000 | DONE lbl | na 16 16 | 005541 |             | allot_error                          
1769:000 | DONE ins | na 16 16 | 005541 | a9 cd 6f    |                 lda.# 006fcd         
1770:000 | DONE ins | na 16 16 | 005544 | 4c 60 69    |                 jmp 006960           
1771:000 | DONE wsp | na 16 16 |        |             |
1772:000 | DONE lbl | na 16 16 | 005547 |             | allot_minus                          
1773:000 | DONE cmt | na 16 16 |        |             |                 ; negative value means we're freeing memory
1774:000 | DONE ins | na 16 16 | 005547 | 38          |                 sec                  
1775:000 | DONE ins | na 16 16 | 005548 | e5 00       |                 sbc.d 000000         
1776:000 | DONE ins | na 16 16 | 00554a | 90 f5       |                 bcc 005541           oops, we've wrapped
1777:000 | DONE wsp | na 16 16 |        |             |
1778:000 | DONE ins | na 16 16 | 00554c | a8          |                 tay                  
1779:000 | DONE wsp | na 16 16 |        |             |
1780:000 | DONE ins | na 16 16 | 00554d | e9 00 03    |                 sbc.# 000300         Carry Flag must still be set
1781:000 | DONE ins | na 16 16 | 005550 | 30 ef       |                 bmi 005541           oops, gone too far back
1782:000 | DONE wsp | na 16 16 |        |             |
1783:000 | DONE cmt | na 16 16 |        |             |                 ; fall through to allot_done
1784:000 | DONE lbl | na 16 16 | 005552 |             | allot_done                           
1785:000 | DONE ins | na 16 16 | 005552 | 84 00       |                 sty.d 000000         new compiler pointer
1786:000 | DONE lbl | na 16 16 | 005554 |             | allot_real_gone                      
1787:000 | DONE ins | na 16 16 | 005554 | b4 00       |                 ldy.dx 00            DROP
1788:000 | DONE ins | na 16 16 | 005556 | e8          |                 inx                  
1789:000 | DONE ins | na 16 16 | 005557 | e8          |                 inx                  
1790:000 | DONE wsp | na 16 16 |        |             |
1791:000 | DONE lbl | na 16 16 | 005558 |             | z_allot                              
1791:001 | DONE ins | na 16 16 | 005558 | 60          |                 rts                  
1792:000 | DONE wsp | na 16 16 |        |             |
1793:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1794:000 | DONE cmt | na 16 16 |        |             | ; AND ( n m -- n ) 6 bytes / X cycles
1795:000 | DONE cmt | na 16 16 |        |             | ; Logical AND
1796:000 | DONE lbl | na 16 16 | 005559 |             | xt_and                               
1797:000 | DONE ins | na 16 16 | 005559 | 98          |                 tya                  
1798:000 | DONE ins | na 16 16 | 00555a | 35 00       |                 and.dx 00            
1799:000 | DONE ins | na 16 16 | 00555c | a8          |                 tay                  
1800:000 | DONE wsp | na 16 16 |        |             |
1801:000 | DONE ins | na 16 16 | 00555d | e8          |                 inx                  NIP
1802:000 | DONE ins | na 16 16 | 00555e | e8          |                 inx                  
1803:000 | DONE wsp | na 16 16 |        |             |
1804:000 | DONE lbl | na 16 16 | 00555f |             | z_and                                
1804:001 | DONE ins | na 16 16 | 00555f | 60          |                 rts                  
1805:000 | DONE wsp | na 16 16 |        |             |
1806:000 | DONE wsp | na 16 16 |        |             |
1807:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1808:000 | DONE cmt | na 16 16 |        |             | ; AT-XY ( nx ny -- ) X bytes / X cycles
1809:000 | DONE cmt | na 16 16 |        |             | ; Move cursor to coordinates given. ESC[<n>;<m>H Do not use U. to print the
1810:000 | DONE cmt | na 16 16 |        |             | ; numbers because the trailing space will not work with xterm (works fine with
1811:000 | DONE cmt | na 16 16 |        |             | ; Mac OS X Terminals, though)
1812:000 | DONE cmt | na 16 16 |        |             | ; TODO doesn't like hex values, need to get rid of byte_to_ascii
1813:000 | DONE cmt | na 16 16 |        |             | ; or call as word with 0 u.r and decimal
1814:000 | DONE lbl | na 16 16 | 005560 |             | xt_at-xy                             
1815:000 | DONE dir | na 16 16 |        |             |         .!a16                        
1816:000 | DONE ins | na 16 16 | 005560 | a9 1b 00    |                 lda.# AscESC         ESC
1817:000 | DONE ins | na 16 16 | 005563 | 20 99 58    |                 jsr 005899           
1818:000 | DONE ins | na 16 16 | 005566 | a9 5b 00    |                 lda.# 5b             [
1819:000 | DONE ins | na 16 16 | 005569 | 20 99 58    |                 jsr 005899           
1820:000 | DONE ins | na 16 16 | 00556c | b5 00       |                 lda.dx 00            x
1821:000 | DONE ins | na 16 16 | 00556e | 20 97 69    |                 jsr 006997           
1822:000 | DONE ins | na 16 16 | 005571 | a9 3b 00    |                 lda.# 3b             semicolon
1823:000 | DONE ins | na 16 16 | 005574 | 20 99 58    |                 jsr 005899           
1824:000 | DONE ins | na 16 16 | 005577 | 98          |                 tya                  y
1825:000 | DONE ins | na 16 16 | 005578 | 20 97 69    |                 jsr 006997           
1826:000 | DONE ins | na 16 16 | 00557b | a9 48 00    |                 lda.# 48             H
1827:000 | DONE ins | na 16 16 | 00557e | 20 99 58    |                 jsr 005899           
1828:000 | DONE wsp | na 16 16 |        |             |
1829:000 | DONE ins | na 16 16 | 005581 | b4 02       |                 ldy.dx 02            
1830:000 | DONE ins | na 16 16 | 005583 | e8          |                 inx                  
1831:000 | DONE ins | na 16 16 | 005584 | e8          |                 inx                  
1832:000 | DONE ins | na 16 16 | 005585 | e8          |                 inx                  
1833:000 | DONE ins | na 16 16 | 005586 | e8          |                 inx                  
1834:000 | DONE wsp | na 16 16 |        |             |
1835:000 | DONE lbl | na 16 16 | 005587 |             | z_at-xy                              
1835:001 | DONE ins | na 16 16 | 005587 | 60          |                 rts                  
1836:000 | DONE wsp | na 16 16 |        |             |
1837:000 | DONE wsp | na 16 16 |        |             |
1838:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1839:000 | DONE cmt | na 16 16 |        |             | ; BASE ( -- addr ) X bytes / X cycles
1840:000 | DONE cmt | na 16 16 |        |             | ; Get the address of where the radix for number conversion is stored
1841:000 | DONE lbl | na 16 16 | 005588 |             | xt_base                              
1842:000 | DONE ins | na 16 16 | 005588 | ca          |                 dex                  
1843:000 | DONE ins | na 16 16 | 005589 | ca          |                 dex                  
1844:000 | DONE ins | na 16 16 | 00558a | 94 00       |                 sty.dx 00            
1845:000 | DONE wsp | na 16 16 |        |             |
1846:000 | DONE ins | na 16 16 | 00558c | a0 16 00    |                 ldy.# 000016         
1847:000 | DONE wsp | na 16 16 |        |             |
1848:000 | DONE lbl | na 16 16 | 00558f |             | z_base                               
1848:001 | DONE ins | na 16 16 | 00558f | 60          |                 rts                  
1849:000 | DONE wsp | na 16 16 |        |             |
1850:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1851:000 | DONE cmt | na 16 16 |        |             | ; BELL ( -- ) X bytes / X cycles
1852:000 | DONE cmt | na 16 16 |        |             | ; Trigger terminal bell on vt100 terminals
1853:000 | DONE cmt | na 16 16 |        |             | ; TODO replace with EMIT
1854:000 | DONE lbl | na 16 16 | 005590 |             | xt_bell                              
1855:000 | DONE dir | na 16 16 |        |             |         .!a16                        
1856:000 | DONE ins | na 16 16 | 005590 | a9 07 00    |                 lda.# AscBELL        
1857:000 | DONE ins | na 16 16 | 005593 | 6c 0e 00    |                 jmp.i 00000e         JSR/RTS
1858:000 | DONE wsp | na 16 16 |        |             |
1859:000 | DONE lbl | na 16 16 | 005596 |             | z_bell                               ; never reached
1860:000 | DONE wsp | na 16 16 |        |             |
1861:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1862:000 | DONE cmt | na 16 16 |        |             | ; BEGIN ( -- addr ) 6 bytes / 13 cycles
1863:000 | DONE cmt | na 16 16 |        |             | ; Mark entry point for a loop. This is just an immediate version of here which
1864:000 | DONE cmt | na 16 16 |        |             | ; could just as welle be coded as  : BEGIN HERE ; IMMEDIATE  but we code it here
1865:000 | DONE cmt | na 16 16 |        |             | ; differently for speed
1866:000 | DONE lbl | na 16 16 | 005596 |             | xt_begin                             
1867:000 | DONE cmt | na 16 16 |        |             |                 ; really just the same code as HERE
1868:000 | DONE ins | na 16 16 | 005596 | ca          |                 dex                  
1869:000 | DONE ins | na 16 16 | 005597 | ca          |                 dex                  
1870:000 | DONE ins | na 16 16 | 005598 | 94 00       |                 sty.dx 00            
1871:000 | DONE wsp | na 16 16 |        |             |
1872:000 | DONE ins | na 16 16 | 00559a | a4 00       |                 ldy.d 000000         
1873:000 | DONE wsp | na 16 16 |        |             |
1874:000 | DONE lbl | na 16 16 | 00559c |             | z_begin                              
1874:001 | DONE ins | na 16 16 | 00559c | 60          |                 rts                  
1875:000 | DONE wsp | na 16 16 |        |             |
1876:000 | DONE wsp | na 16 16 |        |             |
1877:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1878:000 | DONE cmt | na 16 16 |        |             | ; BL ( -- u ) 7 bytes / 12 cycles
1879:000 | DONE cmt | na 16 16 |        |             | ; Put ASCII char for SPACE on Data Stack
1880:000 | DONE lbl | na 16 16 | 00559d |             | xt_bl                                
1881:000 | DONE dir | na 16 16 |        |             |         .!xy16                       
1882:000 | DONE ins | na 16 16 | 00559d | ca          |                 dex                  
1883:000 | DONE ins | na 16 16 | 00559e | ca          |                 dex                  
1884:000 | DONE ins | na 16 16 | 00559f | 94 00       |                 sty.dx 00            
1885:000 | DONE ins | na 16 16 | 0055a1 | a0 20 00    |                 ldy.# AscSP          
1886:000 | DONE wsp | na 16 16 |        |             |
1887:000 | DONE lbl | na 16 16 | 0055a4 |             | z_bl                                 
1887:001 | DONE ins | na 16 16 | 0055a4 | 60          |                 rts                  
1888:000 | DONE wsp | na 16 16 |        |             |
1889:000 | DONE wsp | na 16 16 |        |             |
1890:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1891:000 | DONE cmt | na 16 16 |        |             | ; BOUNDS ( addr u -- addr+u addr ) 9 bytes / X cycles
1892:000 | DONE cmt | na 16 16 |        |             | ; Given a string, return the correct Data Stack parameters for a DO/LOOP loop
1893:000 | DONE cmt | na 16 16 |        |             | ; over its characters. This is realized as OVER + SWAP in Forth, but we do it
1894:000 | DONE cmt | na 16 16 |        |             | ; a lot faster in assembler. Uses tmptos
1895:000 | DONE lbl | na 16 16 | 0055a5 |             | xt_bounds                            
1896:000 | DONE dir | na 16 16 |        |             |         .!a16                        
1897:000 | DONE ins | na 16 16 | 0055a5 | 84 24       |                 sty.d 000024         
1898:000 | DONE ins | na 16 16 | 0055a7 | b4 00       |                 ldy.dx 00            addr now TOS
1899:000 | DONE wsp | na 16 16 |        |             |
1900:000 | DONE ins | na 16 16 | 0055a9 | 18          |                 clc                  
1901:000 | DONE ins | na 16 16 | 0055aa | 65 24       |                 adc.d 000024         
1902:000 | DONE ins | na 16 16 | 0055ac | 95 00       |                 sta.dx 00            addr+u now NOS
1903:000 | DONE wsp | na 16 16 |        |             |
1904:000 | DONE lbl | na 16 16 | 0055ae |             | z_bounds                             
1904:001 | DONE ins | na 16 16 | 0055ae | 60          |                 rts                  
1905:000 | DONE wsp | na 16 16 |        |             |
1906:000 | DONE wsp | na 16 16 |        |             |
1907:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1908:000 | DONE cmt | na 16 16 |        |             | ; BRANCH ( -- ) X bytes / X cycles
1909:000 | DONE cmt | na 16 16 |        |             | ; Transfer control to given address. This word was adapted from Tali Forth. It
1910:000 | DONE cmt | na 16 16 |        |             | ; uses tmpbranch
1911:000 | DONE lbl | na 16 16 | 0055af |             | xt_branch                            
1912:000 | DONE dir | na 16 16 |        |             |         .!a16                        
1913:000 | DONE cmt | na 16 16 |        |             |                 ; encode subroutine branch to runtime portion
1914:000 | DONE ins | na 16 16 | 0055af | f4 b6 55    |                 phe.# 0055b6         
1915:000 | DONE ins | na 16 16 | 0055b2 | 20 3f 69    |                 jsr 00693f           
1916:000 | DONE wsp | na 16 16 |        |             |
1917:000 | DONE lbl | na 16 16 | 0055b5 |             | z_branch                             
1917:001 | DONE ins | na 16 16 | 0055b5 | 60          |                 rts                  
1918:000 | DONE wsp | na 16 16 |        |             |
1919:000 | DONE lbl | na 16 16 | 0055b6 |             | branch_rt                            
1920:000 | DONE cmt | na 16 16 |        |             |                 ; The value on the Return Stack determines where we go to
1921:000 | DONE ins | na 16 16 | 0055b6 | 68          |                 pla                  
1922:000 | DONE ins | na 16 16 | 0055b7 | 85 1a       |                 sta.d 00001a         
1923:000 | DONE wsp | na 16 16 |        |             |
1924:000 | DONE ins | na 16 16 | 0055b9 | 5a          |                 phy                  avoid using temp variables
1925:000 | DONE ins | na 16 16 | 0055ba | a0 01 00    |                 ldy.# 0001           
1926:000 | DONE ins | na 16 16 | 0055bd | b1 1a       |                 lda.diy 00001a       LDA (TMPBRANCH),Y
1927:000 | DONE ins | na 16 16 | 0055bf | 7a          |                 ply                  
1928:000 | DONE wsp | na 16 16 |        |             |
1929:000 | DONE ins | na 16 16 | 0055c0 | 3a          |                 dec.a                
1930:000 | DONE ins | na 16 16 | 0055c1 | 48          |                 pha                  put target address back on Return Stack
1931:000 | DONE wsp | na 16 16 |        |             |
1932:000 | DONE ins | na 16 16 | 0055c2 | 60          |                 rts                  
1933:000 | DONE wsp | na 16 16 |        |             |
1934:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1935:000 | DONE cmt | na 16 16 |        |             | ; BYE ( -- ) 2 bytes / 7-8 cycles
1936:000 | DONE cmt | na 16 16 |        |             | ; Leave Liara Forth, returning to Mensch Monitor
1937:000 | DONE lbl | na 16 16 | 0055c3 |             | xt_bye                               
1938:000 | DONE ins | na 16 16 | 0055c3 | 78          |                 sei                  
1939:000 | DONE ins | na 16 16 | 0055c4 | d8          |                 cld                  
1940:000 | DONE ins | na 16 16 | 0055c5 | 38          |                 sec                  
1940:001 | DONE ins | na 16 16 | 0055c6 | fb          |                 xce                  
1940:002 | DONE ctl | em  8  8 |        |             |         .!emulated
1940:003 | DONE ctl | em  8  8 |        |             |         .!a8
1940:004 | DONE ctl | em  8  8 |        |             |         .!xy8
1941:000 | DONE ins | em  8  8 | 0055c7 | 6c fc ff    |                 jmp.i 0fffc          
1942:000 | DONE wsp | em  8  8 |        |             |
1943:000 | DONE lbl | em  8  8 | 0055ca |             | z_bye                                ; never reached
1944:000 | DONE wsp | em  8  8 |        |             |
1945:000 | DONE wsp | em  8  8 |        |             |
1946:000 | DONE cmt | em  8  8 |        |             | ; -------------------------------------------------------------------
1947:000 | DONE cmt | em  8  8 |        |             | ; C, "C-COMMA" ( char -- ) 13 bytes / 28 cycles
1948:000 | DONE cmt | em  8  8 |        |             | ; Store one character in the Dictionary
1949:000 | DONE lbl | em  8  8 | 0055ca |             | xt_c-comma                           
1950:000 | DONE ins | em  8  8 | 0055ca | 98          |                 tya                  
1951:000 | DONE ins | em  8  8 | 0055cb | e2 20       |                 sep 20               
1951:001 | DONE ctl | em  8  8 |        |             |         .!a8
1952:000 | DONE ins | em  8  8 | 0055cd | 92 00       |                 sta.di 000000        STA (CP)
1953:000 | DONE ins | em  8  8 | 0055cf | c2 20       |                 rep 20               
1953:001 | DONE ctl | em 16  8 |        |             |         .!a16
1954:000 | DONE ins | em 16  8 | 0055d1 | e6 00       |                 inc.d 000000         quick version of 1 ALLOT
1955:000 | DONE wsp | em 16  8 |        |             |
1956:000 | DONE ins | em 16  8 | 0055d3 | b4 00       |                 ldy.dx 00            
1957:000 | DONE ins | em 16  8 | 0055d5 | e8          |                 inx                  
1958:000 | DONE ins | em 16  8 | 0055d6 | e8          |                 inx                  
1959:000 | DONE wsp | em 16  8 |        |             |
1960:000 | DONE lbl | em 16  8 | 0055d7 |             | z_c-comma                            
1960:001 | DONE ins | em 16  8 | 0055d7 | 60          |                 rts                  
1961:000 | DONE wsp | em 16  8 |        |             |
1962:000 | DONE wsp | em 16  8 |        |             |
1963:000 | DONE cmt | em 16  8 |        |             | ; -------------------------------------------------------------------
1964:000 | DONE cmt | em 16  8 |        |             | ; C@ "C-FETCH" ( addr -- n ) 11 bytes / 16 cycles
1965:000 | DONE cmt | em 16  8 |        |             | ; Get a single byte from the given address
1966:000 | DONE lbl | em 16  8 | 0055d8 |             | xt_c-fetch                           
1967:000 | DONE ins | em 16  8 | 0055d8 | e2 20       |                 sep 20               
1967:001 | DONE ctl | em  8  8 |        |             |         .!a8
1968:000 | DONE ins | em  8  8 | 0055da | b9 00 00    |                 lda.y 0000           
1969:000 | DONE ins | em  8  8 | 0055dd | c2 20       |                 rep 20               
1969:001 | DONE ctl | em 16  8 |        |             |         .!a16
1970:000 | DONE ins | em 16  8 | 0055df | 29 ff 00    |                 and.# 00ff           
1971:000 | DONE ins | em 16  8 | 0055e2 | a8          |                 tay                  
1972:000 | DONE wsp | em 16  8 |        |             |
1973:000 | DONE lbl | em 16  8 | 0055e3 |             | z_c-fetch                            
1973:001 | DONE ins | em 16  8 | 0055e3 | 60          |                 rts                  
1974:000 | DONE wsp | em 16  8 |        |             |
1975:000 | DONE wsp | em 16  8 |        |             |
1976:000 | DONE cmt | em 16  8 |        |             | ; -------------------------------------------------------------------
1977:000 | DONE cmt | em 16  8 |        |             | ; C! "C-STORE" ( n addr -- ) 15 bytes / 29 cycles
1978:000 | DONE cmt | em 16  8 |        |             | ; Store LSB of NOS at location given as TOS
1979:000 | DONE lbl | em 16  8 | 0055e4 |             | xt_c-store                           
1980:000 | DONE ins | em 16  8 | 0055e4 | b5 00       |                 lda.dx 00            
1981:000 | DONE ins | em 16  8 | 0055e6 | e2 20       |                 sep 20               
1981:001 | DONE ctl | em  8  8 |        |             |         .!a8
1982:000 | DONE ins | em  8  8 | 0055e8 | 99 00 00    |                 sta.y 0000           
1983:000 | DONE ins | em  8  8 | 0055eb | c2 20       |                 rep 20               
1983:001 | DONE ctl | em 16  8 |        |             |         .!a16
1984:000 | DONE ins | em 16  8 | 0055ed | b4 02       |                 ldy.dx 02            
1985:000 | DONE ins | em 16  8 | 0055ef | e8          |                 inx                  
1986:000 | DONE ins | em 16  8 | 0055f0 | e8          |                 inx                  
1987:000 | DONE ins | em 16  8 | 0055f1 | e8          |                 inx                  
1988:000 | DONE ins | em 16  8 | 0055f2 | e8          |                 inx                  
1989:000 | DONE wsp | em 16  8 |        |             |
1990:000 | DONE lbl | em 16  8 | 0055f3 |             | z_c-store                            
1990:001 | DONE ins | em 16  8 | 0055f3 | 60          |                 rts                  
1991:000 | DONE wsp | em 16  8 |        |             |
1992:000 | DONE wsp | em 16  8 |        |             |
1993:000 | DONE cmt | em 16  8 |        |             | ; -------------------------------------------------------------------
1994:000 | DONE cmt | em 16  8 |        |             | ; CELL+ ( u -- u+2 ) X bytes / X cycles
1995:000 | DONE cmt | em 16  8 |        |             | ; Add the size of one cell to the value on top of the stack. Since this is
1996:000 | DONE cmt | em 16  8 |        |             | ; a 16-bit cell size, we add two
1997:000 | DONE lbl | em 16  8 | 0055f4 |             | xt_cellplus                          
1998:000 | DONE ins | em 16  8 | 0055f4 | c8          |                 iny                  
1999:000 | DONE ins | em 16  8 | 0055f5 | c8          |                 iny                  
2000:000 | DONE lbl | em 16  8 | 0055f6 |             | z_cellplus                           
2000:001 | DONE ins | em 16  8 | 0055f6 | 60          |                 rts                  
2001:000 | DONE wsp | em 16  8 |        |             |
2002:000 | DONE wsp | em 16  8 |        |             |
2003:000 | DONE cmt | em 16  8 |        |             | ; -------------------------------------------------------------------
2004:000 | DONE cmt | em 16  8 |        |             | ; CELLS ( n -- n ) X bytes / X cycles
2005:000 | DONE cmt | em 16  8 |        |             | ; Given a number of cells, return the number of bytes that they will require.
2006:000 | DONE cmt | em 16  8 |        |             | ; This is 16 bit cell Forth, so the value returned by this word is the same as
2007:000 | DONE cmt | em 16  8 |        |             | ; returned by 2*, see there.
2008:000 | DONE wsp | em 16  8 |        |             |
2009:000 | DONE cmt | em 16  8 |        |             | ; -------------------------------------------------------------------
2010:000 | DONE cmt | em 16  8 |        |             | ; CHAR ( "c" -- u ) 23 bytes / X cycles
2011:000 | DONE cmt | em 16  8 |        |             | ; Convert a character to its ASCII value
2012:000 | DONE lbl | em 16  8 | 0055f7 |             | xt_char                              
2013:000 | DONE dir | em 16  8 |        |             |         .!a16                        
2014:000 | DONE ins | em 16  8 | 0055f7 | 20 ef 5b    |                 jsr 005bef           ( -- addr u )
2015:000 | DONE wsp | em 16  8 |        |             |
2016:000 | DONE cmt | em 16  8 |        |             |                 ; if we got back a zero, we have a problem
2017:000 | DONE ins | em 16  8 | 0055fa | 98          |                 tya                  force flag check
2018:000 | DONE ins | em 16  8 | 0055fb | d0 06       |                 bne 005603           
2019:000 | DONE wsp | em 16  8 |        |             |
2020:000 | DONE ins | em 16  8 | 0055fd | a9 52 70    |                 lda.# 007052         
2021:000 | DONE ins | em 16  8 | 005600 | 4c 60 69    |                 jmp 006960           
2022:000 | DONE wsp | em 16  8 |        |             |
2023:000 | DONE lbl | em 16  8 | 005603 |             | char_got_char                        
2024:000 | DONE ins | em 16  8 | 005603 | b4 00       |                 ldy.dx 00            get addr from NOS
2025:000 | DONE ins | em 16  8 | 005605 | b9 00 00    |                 lda.y 0000           LDA 0000,Y - could be C@
2026:000 | DONE ins | em 16  8 | 005608 | 29 ff 00    |                 and.# 00ff           
2027:000 | DONE ins | em 16  8 | 00560b | a8          |                 tay                  
2028:000 | DONE wsp | em 16  8 |        |             |
2029:000 | DONE ins | em 16  8 | 00560c | e8          |                 inx                  
2030:000 | DONE ins | em 16  8 | 00560d | e8          |                 inx                  
2031:000 | DONE wsp | em 16  8 |        |             |
2032:000 | DONE lbl | em 16  8 | 00560e |             | z_char                               
2032:001 | DONE ins | em 16  8 | 00560e | 60          |                 rts                  
2033:000 | DONE wsp | em 16  8 |        |             |
2034:000 | DONE wsp | em 16  8 |        |             |
2035:000 | DONE cmt | em 16  8 |        |             | ; -------------------------------------------------------------------
2036:000 | DONE cmt | em 16  8 |        |             | ; CHARPLUS ( u -- u+1 ) X bytes / X cycles
2037:000 | DONE cmt | em 16  8 |        |             | ; Adds the size of a character to the value on top of the stack. Since our
2038:000 | DONE cmt | em 16  8 |        |             | ; character size is one, this is the same code as 1+, see there
2039:000 | DONE wsp | em 16  8 |        |             |
2040:000 | DONE wsp | em 16  8 |        |             |
2041:000 | DONE cmt | em 16  8 |        |             | ; -------------------------------------------------------------------
2042:000 | DONE cmt | em 16  8 |        |             | ; CHARS ( u -- u ) X bytes / X cycles
2043:000 | DONE cmt | em 16  8 |        |             | ; Return the size in bytes of the number of characters on the top of the stack.
2044:000 | DONE cmt | em 16  8 |        |             | ; In this case, does nothing
2045:000 | DONE lbl | em 16  8 | 00560f |             | xt_chars                             
2046:000 | DONE wsp | em 16  8 |        |             |
2047:000 | DONE ins | em 16  8 | 00560f | ea          |                 nop                  will be removed during native compile
2048:000 | DONE lbl | em 16  8 | 005610 |             | z_chars                              
2048:001 | DONE ins | em 16  8 | 005610 | 60          |                 rts                  
2049:000 | DONE wsp | em 16  8 |        |             |
2050:000 | DONE cmt | em 16  8 |        |             | ; -------------------------------------------------------------------
2051:000 | DONE cmt | em 16  8 |        |             | ; CMOVE ( addr1 addr2 u -- ) X bytes / X cycles
2052:000 | DONE cmt | em 16  8 |        |             | ; Move characters from a lower to a higher address. Because of the danger of
2053:000 | DONE cmt | em 16  8 |        |             | ; overlap, we must start at the end of the source string (addr1+u) and copy
2054:000 | DONE cmt | em 16  8 |        |             | ; byte-by-byte to the end of the destination address (addr2+u). This is what the
2055:000 | DONE cmt | em 16  8 |        |             | ; MVP instruction is for. Use MOVE if you are not sure what to do.
2056:000 | DONE cmt | em 16  8 |        |             | ;       =====* source
2057:000 | DONE cmt | em 16  8 |        |             | ;          ====* destination
2058:000 | DONE lbl | em 16  8 | 005611 |             | xt_cmove                             
2059:000 | DONE cmt | em 16  8 |        |             |                 ; We start at the end of the blocks, so we have to increase both
2060:000 | DONE cmt | em 16  8 |        |             |                 ; addr1 and addr2 by u
2061:000 | DONE ins | em 16  8 | 005611 | 98          |                 tya                  
2062:000 | DONE ins | em 16  8 | 005612 | 18          |                 clc                  
2063:000 | DONE ins | em 16  8 | 005613 | 75 02       |                 adc.dx 02            source, goes in X
2064:000 | DONE ins | em 16  8 | 005615 | 3a          |                 dec.a                convert length to index
2065:000 | DONE ins | em 16  8 | 005616 | 95 02       |                 sta.dx 02            
2066:000 | DONE wsp | em 16  8 |        |             |
2067:000 | DONE ins | em 16  8 | 005618 | 98          |                 tya                  
2068:000 | DONE ins | em 16  8 | 005619 | 18          |                 clc                  
2069:000 | DONE ins | em 16  8 | 00561a | 75 00       |                 adc.dx 00            destination, goes in Y
2070:000 | DONE ins | em 16  8 | 00561c | 3a          |                 dec.a                convert length to index
2071:000 | DONE wsp | em 16  8 |        |             |
2072:000 | DONE ins | em 16  8 | 00561d | 86 22       |                 stx.d 000022         keep DSP safe
2073:000 | DONE wsp | em 16  8 |        |             |
2074:000 | DONE ins | em 16  8 | 00561f | 88          |                 dey                  
2075:000 | DONE ins | em 16  8 | 005620 | 5a          |                 phy                  save number of bytes to transfer
2076:000 | DONE wsp | em 16  8 |        |             |
2077:000 | DONE ins | em 16  8 | 005621 | a8          |                 tay                  destination now in Y
2078:000 | DONE wsp | em 16  8 |        |             |
2079:000 | DONE ins | em 16  8 | 005622 | b5 02       |                 lda.dx 02            get source address
2080:000 | DONE ins | em 16  8 | 005624 | aa          |                 tax                  
2081:000 | DONE wsp | em 16  8 |        |             |
2082:000 | DONE ins | em 16  8 | 005625 | 68          |                 pla                  retrieve number of bytes to transfer
2083:000 | DONE ins | em 16  8 | 005626 | 44 00 00    |                 mvp 0                
2083:001 | DONE ctl | em 16  8 |        |             |            
2084:000 | DONE wsp | em 16  8 |        |             |
2085:000 | DONE ins | em 16  8 | 005629 | a6 22       |                 ldx.d 000022         
2086:000 | DONE ins | em 16  8 | 00562b | b4 04       |                 ldy.dx 04            
2087:000 | DONE wsp | em 16  8 |        |             |
2088:000 | DONE ins | em 16  8 | 00562d | 8a          |                 txa                  It's worth addition for three cells dropped
2089:000 | DONE ins | em 16  8 | 00562e | 18          |                 clc                  
2090:000 | DONE ins | em 16  8 | 00562f | 69 06 00    |                 adc.# 0006           
2091:000 | DONE ins | em 16  8 | 005632 | aa          |                 tax                  
2092:000 | DONE wsp | em 16  8 |        |             |
2093:000 | DONE lbl | em 16  8 | 005633 |             | z_cmove                              
2093:001 | DONE ins | em 16  8 | 005633 | 60          |                 rts                  
2094:000 | DONE wsp | em 16  8 |        |             |
2095:000 | DONE cmt | em 16  8 |        |             | ; -------------------------------------------------------------------
2096:000 | DONE cmt | em 16  8 |        |             | ; CMOVE> ( addr1 addr 2 u -- ) X bytes / X cycles
2097:000 | DONE cmt | em 16  8 |        |             | ; Move characters from a higher to a lower address. Because of the danger of
2098:000 | DONE cmt | em 16  8 |        |             | ; overlap, we must start at the beginning of the source (addr1) to copy it
2099:000 | DONE cmt | em 16  8 |        |             | ; byte-by-byte to the beginning of the destination (addr2). This is what the MVN
2100:000 | DONE cmt | em 16  8 |        |             | ; instruction is for. Use MOVE if you are not sure what to do.
2101:000 | DONE cmt | em 16  8 |        |             | ;          *==== source
2102:000 | DONE cmt | em 16  8 |        |             | ;       *===== destination
2103:000 | DONE lbl | em 16  8 | 005634 |             | xt_cmoveup                           
2104:000 | DONE ins | em 16  8 | 005634 | 86 22       |                 stx.d 000022         keep DSP safe
2105:000 | DONE wsp | em 16  8 |        |             |
2106:000 | DONE ins | em 16  8 | 005636 | 88          |                 dey                  
2107:000 | DONE ins | em 16  8 | 005637 | 5a          |                 phy                  save number of bytes to transfer
2108:000 | DONE wsp | em 16  8 |        |             |
2109:000 | DONE ins | em 16  8 | 005638 | b5 00       |                 lda.dx 00            get destination address
2110:000 | DONE ins | em 16  8 | 00563a | a8          |                 tay                  
2111:000 | DONE wsp | em 16  8 |        |             |
2112:000 | DONE ins | em 16  8 | 00563b | b5 02       |                 lda.dx 02            get source address
2113:000 | DONE ins | em 16  8 | 00563d | aa          |                 tax                  
2114:000 | DONE wsp | em 16  8 |        |             |
2115:000 | DONE ins | em 16  8 | 00563e | 68          |                 pla                  retrieve number of bytes to transfer
2116:000 | DONE ins | em 16  8 | 00563f | 54 00 00    |                 mvn 0                
2116:001 | DONE ctl | em 16  8 |        |             |            
2117:000 | DONE wsp | em 16  8 |        |             |
2118:000 | DONE ins | em 16  8 | 005642 | a6 22       |                 ldx.d 000022         
2119:000 | DONE ins | em 16  8 | 005644 | b4 04       |                 ldy.dx 04            
2120:000 | DONE wsp | em 16  8 |        |             |
2121:000 | DONE ins | em 16  8 | 005646 | 8a          |                 txa                  It's worth addition for three cells dropped
2122:000 | DONE ins | em 16  8 | 005647 | 18          |                 clc                  
2123:000 | DONE ins | em 16  8 | 005648 | 69 06 00    |                 adc.# 0006           
2124:000 | DONE ins | em 16  8 | 00564b | aa          |                 tax                  
2125:000 | DONE wsp | em 16  8 |        |             |
2126:000 | DONE lbl | em 16  8 | 00564c |             | z_cmoveup                            
2126:001 | DONE ins | em 16  8 | 00564c | 60          |                 rts                  
2127:000 | DONE wsp | em 16  8 |        |             |
2128:000 | DONE wsp | em 16  8 |        |             |
2129:000 | DONE cmt | em 16  8 |        |             | ; -------------------------------------------------------------------
2130:000 | DONE cmt | em 16  8 |        |             | ; COMPILE-ONLY ( -- ) 8 bytes / X cycles
2131:000 | DONE cmt | em 16  8 |        |             | ; Mark the most recently defined word as COMPILE-ONLY. The alternative (and
2132:000 | DONE cmt | em 16  8 |        |             | ; traditional) way to do this is to include a word ?COMPILE that makes sure
2133:000 | DONE cmt | em 16  8 |        |             | ; we're in compile mode
2134:000 | DONE lbl | em 16  8 | 00564d |             | xt_compile-only                      
2135:000 | DONE dir | em 16  8 |        |             |         .!a16                        
2136:000 | DONE ins | em 16  8 | 00564d | a9 04 00    |                 lda.# CO             
2137:000 | DONE ins | em 16  8 | 005650 | eb          |                 xba                  flags are MSB
2138:000 | DONE ins | em 16  8 | 005651 | 12 02       |                 ora.di 000002        ORA (DP)
2139:000 | DONE ins | em 16  8 | 005653 | 92 02       |                 sta.di 000002        
2140:000 | DONE wsp | em 16  8 |        |             |
2141:000 | DONE lbl | em 16  8 | 005655 |             | z_compile-only                       
2141:001 | DONE ins | em 16  8 | 005655 | 60          |                 rts                  
2142:000 | DONE wsp | em 16  8 |        |             |
2143:000 | DONE wsp | em 16  8 |        |             |
2144:000 | DONE cmt | em 16  8 |        |             | ; -------------------------------------------------------------------
2145:000 | DONE cmt | em 16  8 |        |             | ; COMPILE, ( xt -- ) X bytes / X cycles
2146:000 | DONE wsp | em 16  8 |        |             |
2147:000 | DONE cmt | em 16  8 |        |             | ; Compile a given xt in the current word definition. It is an error if we are
2148:000 | DONE cmt | em 16  8 |        |             | ; not in the compile state. Because we are using subroutine threading, we can't
2149:000 | DONE cmt | em 16  8 |        |             | ; use , (COMMA) to compile new words the traditional way. We use the NC (Native
2150:000 | DONE cmt | em 16  8 |        |             | ; Compile) flag to decide if native compilation is allowed. If yes, we use the
2151:000 | DONE cmt | em 16  8 |        |             | ; value NC_LIMIT (in definitions.tasm) to decide if the code is too large to be
2152:000 | DONE cmt | em 16  8 |        |             | ; natively coded: If the size is larger than NC_LIMIT, we silently use
2153:000 | DONE cmt | em 16  8 |        |             | ; subroutine coding. If the FN (Force Native) flag is set, the word is always
2154:000 | DONE cmt | em 16  8 |        |             | ; natively compiled
2155:000 | DONE cmt | em 16  8 |        |             | ; TODO currently just compiles subroutine jumps
2156:000 | DONE lbl | em 16  8 | 005656 |             | xt_compilecomma                      
2157:000 | DONE dir | em 16  8 |        |             |         .!a16                        
2158:000 | DONE cmt | em 16  8 |        |             |                 ; First, see if this is Force Native compile word by checking
2159:000 | DONE cmt | em 16  8 |        |             |                 ; the FN flag. We need the nt for this
2160:000 | DONE ins | em 16  8 | 005656 | 5a          |                 phy                  save copy of xt
2161:000 | DONE wsp | em 16  8 |        |             |
2162:000 | DONE ins | em 16  8 | 005657 | 20 f6 59    |                 jsr 0059f6           ( xt -- nt )
2163:000 | DONE wsp | em 16  8 |        |             |
2164:000 | DONE ins | em 16  8 | 00565a | b9 00 00    |                 lda.y 0000           Get content of nt
2165:000 | DONE ins | em 16  8 | 00565d | eb          |                 xba                  flags are MSB
2166:000 | DONE ins | em 16  8 | 00565e | 29 08 00    |                 and.# FN             mask everything but Compile Only bit
2167:000 | DONE ins | em 16  8 | 005661 | d0 11       |                 bne 005674           
2168:000 | DONE wsp | em 16  8 |        |             |
2169:000 | DONE cmt | em 16  8 |        |             |                 ; Now see if native compile is even allowed by checking the NC
2170:000 | DONE cmt | em 16  8 |        |             |                 ; flag
2171:000 | DONE ins | em 16  8 | 005663 | b9 00 00    |                 lda.y 0000           
2172:000 | DONE ins | em 16  8 | 005666 | eb          |                 xba                  
2173:000 | DONE ins | em 16  8 | 005667 | 29 01 00    |                 and.# NC             
2174:000 | DONE ins | em 16  8 | 00566a | f0 61       |                 beq 0056cd           
2175:000 | DONE wsp | em 16  8 |        |             |
2176:000 | DONE cmt | em 16  8 |        |             |                 ; Native compile is legal, but we have to see what limit the
2177:000 | DONE cmt | em 16  8 |        |             |                 ; user set. WORDSIZE takes nt
2178:000 | DONE ins | em 16  8 | 00566c | 20 d6 5f    |                 jsr 005fd6           ( nt -- u )
2179:000 | DONE ins | em 16  8 | 00566f | 98          |                 tya                  
2180:000 | DONE ins | em 16  8 | 005670 | c5 26       |                 cmp.d 000026         
2181:000 | DONE ins | em 16  8 | 005672 | b0 59       |                 bcs 0056cd           if too large, compile as a jump
2182:000 | DONE wsp | em 16  8 |        |             |
2183:000 | DONE lbl | em 16  8 | 005674 |             | compile_as_code                      
2184:000 | DONE cmt | em 16  8 |        |             |                 ; We arrive here with the length of the word TOS and xt on top
2185:000 | DONE cmt | em 16  8 |        |             |                 ; of the return stack. MOVE will need ( xt cp u ) on the Data
2186:000 | DONE cmt | em 16  8 |        |             |                 ; Stack
2187:000 | DONE ins | em 16  8 | 005674 | ca          |                 dex                  
2188:000 | DONE ins | em 16  8 | 005675 | ca          |                 dex                  
2189:000 | DONE ins | em 16  8 | 005676 | 68          |                 pla                  
2190:000 | DONE ins | em 16  8 | 005677 | 95 00       |                 sta.dx 00            ( xt u )
2191:000 | DONE wsp | em 16  8 |        |             |
2192:000 | DONE ins | em 16  8 | 005679 | ca          |                 dex                  
2193:000 | DONE ins | em 16  8 | 00567a | ca          |                 dex                  
2194:000 | DONE ins | em 16  8 | 00567b | a5 00       |                 lda.d 000000         
2195:000 | DONE ins | em 16  8 | 00567d | 95 00       |                 sta.dx 00            ( xt cp u )
2196:000 | DONE wsp | em 16  8 |        |             |
2197:000 | DONE wsp | em 16  8 |        |             |
2198:000 | DONE cmt | em 16  8 |        |             |                 ; --- SPECIAL CASES ---
2199:000 | DONE wsp | em 16  8 |        |             |
2200:000 | DONE cmt | em 16  8 |        |             |                 ; 1. Don't compile NOP instructions: Length of code is 1, and
2201:000 | DONE cmt | em 16  8 |        |             |                 ; the instruction is $EA
2202:000 | DONE ins | em 16  8 | 00567f | 98          |                 tya                  
2203:000 | DONE ins | em 16  8 | 005680 | 3a          |                 dec.a                
2204:000 | DONE ins | em 16  8 | 005681 | d0 14       |                 bne 005697           
2205:000 | DONE wsp | em 16  8 |        |             |
2206:000 | DONE ins | em 16  8 | 005683 | a1 02       |                 lda.dxi 02           
2207:000 | DONE ins | em 16  8 | 005685 | 29 ff 00    |                 and.# 00ff           
2208:000 | DONE ins | em 16  8 | 005688 | c9 ea 00    |                 cmp.# 00ea           opcode for NOP
2209:000 | DONE ins | em 16  8 | 00568b | d0 0a       |                 bne 005697           
2210:000 | DONE wsp | em 16  8 |        |             |
2211:000 | DONE cmt | em 16  8 |        |             |                 ; It's a single NOP. Clear the data stack and return
2212:000 | DONE ins | em 16  8 | 00568d | b4 04       |                 ldy.dx 04            
2213:000 | DONE ins | em 16  8 | 00568f | 8a          |                 txa                  
2214:000 | DONE ins | em 16  8 | 005690 | 18          |                 clc                  
2215:000 | DONE ins | em 16  8 | 005691 | 69 06 00    |                 adc.# 0006           
2216:000 | DONE ins | em 16  8 | 005694 | aa          |                 tax                  
2217:000 | DONE wsp | em 16  8 |        |             |
2218:000 | DONE ins | em 16  8 | 005695 | 80 4c       |                 bra 0056e3           
2219:000 | DONE wsp | em 16  8 |        |             |
2220:000 | DONE lbl | em 16  8 | 005697 |             | compile_not_nop                      
2221:000 | DONE wsp | em 16  8 |        |             |
2222:000 | DONE cmt | em 16  8 |        |             |                 ; 2. Strip PLA/PHA off >R and R>
2223:000 | DONE ins | em 16  8 | 005697 | b5 02       |                 lda.dx 02            get xt
2224:000 | DONE ins | em 16  8 | 005699 | c9 c0 51    |                 cmp.# 0051c0         
2225:000 | DONE ins | em 16  8 | 00569c | f0 11       |                 beq 0056af           
2226:000 | DONE ins | em 16  8 | 00569e | c9 ae 5c    |                 cmp.# 005cae         
2227:000 | DONE ins | em 16  8 | 0056a1 | f0 0c       |                 beq 0056af           
2228:000 | DONE wsp | em 16  8 |        |             |
2229:000 | DONE cmt | em 16  8 |        |             |                 ; 3. Strip off stuff from 2>R and 2R>
2230:000 | DONE ins | em 16  8 | 0056a3 | c9 d5 53    |                 cmp.# 0053d5         
2231:000 | DONE ins | em 16  8 | 0056a6 | f0 0d       |                 beq 0056b5           
2232:000 | DONE ins | em 16  8 | 0056a8 | c9 05 54    |                 cmp.# 005405         
2233:000 | DONE ins | em 16  8 | 0056ab | f0 08       |                 beq 0056b5           
2234:000 | DONE wsp | em 16  8 |        |             |
2235:000 | DONE ins | em 16  8 | 0056ad | 80 12       |                 bra 0056c1           not a special case
2236:000 | DONE wsp | em 16  8 |        |             |
2237:000 | DONE lbl | em 16  8 | 0056af |             | compile_r                            
2238:000 | DONE cmt | em 16  8 |        |             |                 ; We have either >R or R>. To simplify, drop the first and last
2239:000 | DONE cmt | em 16  8 |        |             |                 ; instruction (one byte).
2240:000 | DONE ins | em 16  8 | 0056af | f6 02       |                 inc.dx 02            start one byte later
2241:000 | DONE ins | em 16  8 | 0056b1 | 88          |                 dey                  transfer two bytes less
2242:000 | DONE ins | em 16  8 | 0056b2 | 88          |                 dey                  
2243:000 | DONE ins | em 16  8 | 0056b3 | 80 0c       |                 bra 0056c1           
2244:000 | DONE wsp | em 16  8 |        |             |
2245:000 | DONE lbl | em 16  8 | 0056b5 |             | compile_2r                           
2246:000 | DONE cmt | em 16  8 |        |             |                 ; We have either 2>R or 2R>. To simplify, drop the first and
2247:000 | DONE cmt | em 16  8 |        |             |                 ; last three bytes
2248:000 | DONE ins | em 16  8 | 0056b5 | f6 02       |                 inc.dx 02            
2249:000 | DONE ins | em 16  8 | 0056b7 | f6 02       |                 inc.dx 02            
2250:000 | DONE ins | em 16  8 | 0056b9 | f6 02       |                 inc.dx 02            
2251:000 | DONE ins | em 16  8 | 0056bb | 98          |                 tya                  
2252:000 | DONE ins | em 16  8 | 0056bc | 38          |                 sec                  
2253:000 | DONE ins | em 16  8 | 0056bd | e9 06 00    |                 sbc.# 0006           
2254:000 | DONE ins | em 16  8 | 0056c0 | a8          |                 tay                  fall through to compile_move
2255:000 | DONE wsp | em 16  8 |        |             |
2256:000 | DONE lbl | em 16  8 | 0056c1 |             | compile_move                         
2257:000 | DONE cmt | em 16  8 |        |             |                 ; Enough of this, compile the word already
2258:000 | DONE wsp | em 16  8 |        |             |
2259:000 | DONE ins | em 16  8 | 0056c1 | 5a          |                 phy                  we need a copy of length for the CP
2260:000 | DONE wsp | em 16  8 |        |             |
2261:000 | DONE ins | em 16  8 | 0056c2 | 20 f6 5a    |                 jsr 005af6           ( xt cp u -- )
2262:000 | DONE wsp | em 16  8 |        |             |
2263:000 | DONE ins | em 16  8 | 0056c5 | 68          |                 pla                  
2264:000 | DONE ins | em 16  8 | 0056c6 | 18          |                 clc                  update CP
2265:000 | DONE ins | em 16  8 | 0056c7 | 65 00       |                 adc.d 000000         
2266:000 | DONE ins | em 16  8 | 0056c9 | 85 00       |                 sta.d 000000         
2267:000 | DONE wsp | em 16  8 |        |             |
2268:000 | DONE ins | em 16  8 | 0056cb | 80 16       |                 bra 0056e3           
2269:000 | DONE wsp | em 16  8 |        |             |
2270:000 | DONE lbl | em 16  8 | 0056cd |             | compile_as_jump                      
2271:000 | DONE cmt | em 16  8 |        |             |                 ; Compile xt as a subroutine jump.
2272:000 | DONE ins | em 16  8 | 0056cd | 7a          |                 ply                  get xt back
2273:000 | DONE ins | em 16  8 | 0056ce | e2 20       |                 sep 20               
2273:001 | DONE ctl | em  8  8 |        |             |         .!a8
2274:000 | DONE ins | em  8  8 | 0056d0 | a9 20       |                 lda.# 20             opcode for JSR
2275:000 | DONE ins | em  8  8 | 0056d2 | 92 00       |                 sta.di 000000        STA (CP)
2276:000 | DONE ins | em  8  8 | 0056d4 | c2 20       |                 rep 20               
2276:001 | DONE ctl | em 16  8 |        |             |         .!a16
2277:000 | DONE ins | em 16  8 | 0056d6 | e6 00       |                 inc.d 000000         
2278:000 | DONE wsp | em 16  8 |        |             |
2279:000 | DONE cmt | em 16  8 |        |             |                 ; There is no "sty.di" instruction, so we have to do this the
2280:000 | DONE cmt | em 16  8 |        |             |                 ; hard way
2281:000 | DONE ins | em 16  8 | 0056d8 | 98          |                 tya                  
2282:000 | DONE ins | em 16  8 | 0056d9 | 92 00       |                 sta.di 000000        
2283:000 | DONE ins | em 16  8 | 0056db | e6 00       |                 inc.d 000000         
2284:000 | DONE ins | em 16  8 | 0056dd | e6 00       |                 inc.d 000000         
2285:000 | DONE wsp | em 16  8 |        |             |
2286:000 | DONE ins | em 16  8 | 0056df | b4 00       |                 ldy.dx 00            
2287:000 | DONE ins | em 16  8 | 0056e1 | e8          |                 inx                  
2288:000 | DONE ins | em 16  8 | 0056e2 | e8          |                 inx                  
2289:000 | DONE wsp | em 16  8 |        |             |
2290:000 | DONE lbl | em 16  8 | 0056e3 |             | z_compilecomma                       
2290:001 | DONE ins | em 16  8 | 0056e3 | 60          |                 rts                  
2291:000 | DONE wsp | em 16  8 |        |             |
2292:000 | DONE wsp | em 16  8 |        |             |
2293:000 | DONE cmt | em 16  8 |        |             | ; -------------------------------------------------------------------
2294:000 | DONE cmt | em 16  8 |        |             | ; CONSTANT ( "name" n -- ) X bytes / X cycles
2295:000 | DONE cmt | em 16  8 |        |             | ; Associate a fixed value with a word. This could be realized as
2296:000 | DONE cmt | em 16  8 |        |             | ; CREATE , DOES> @  as well. We do more in assembler but let CREATE do the heavy
2297:000 | DONE cmt | em 16  8 |        |             | ; lifting.
2298:000 | DONE cmt | em 16  8 |        |             | ; See http://www.bradrodriguez.com/papers/moving3.htm for a primer on how
2299:000 | DONE cmt | em 16  8 |        |             | ; this works in various Forths.
2300:000 | DONE lbl | em 16  8 | 0056e4 |             | xt_constant                          
2301:000 | DONE ins | em 16  8 | 0056e4 | 20 27 57    |                 jsr 005727           
2302:000 | DONE wsp | em 16  8 |        |             |
2303:000 | DONE cmt | em 16  8 |        |             |                 ; CREATE by default installs a subroutine jump to DOVAR, but we
2304:000 | DONE cmt | em 16  8 |        |             |                 ; actually want DOCONST this time. Go back two bytes and repace
2305:000 | DONE cmt | em 16  8 |        |             |                 ; the subroutine jump target
2306:000 | DONE ins | em 16  8 | 0056e7 | a5 00       |                 lda.d 000000         
2307:000 | DONE ins | em 16  8 | 0056e9 | 3a          |                 dec.a                
2308:000 | DONE ins | em 16  8 | 0056ea | 3a          |                 dec.a                
2309:000 | DONE ins | em 16  8 | 0056eb | 85 1c       |                 sta.d 00001c         
2310:000 | DONE wsp | em 16  8 |        |             |
2311:000 | DONE ins | em 16  8 | 0056ed | a9 aa 68    |                 lda.# 0068aa         
2312:000 | DONE ins | em 16  8 | 0056f0 | 92 1c       |                 sta.di 00001c        STA (TMP1)
2313:000 | DONE wsp | em 16  8 |        |             |
2314:000 | DONE cmt | em 16  8 |        |             |                 ; Save TOS in next cell. This is a direct version of COMMA
2315:000 | DONE ins | em 16  8 | 0056f2 | 98          |                 tya                  there is no "sty.di cp"
2316:000 | DONE ins | em 16  8 | 0056f3 | 92 00       |                 sta.di 000000        
2317:000 | DONE ins | em 16  8 | 0056f5 | e6 00       |                 inc.d 000000         
2318:000 | DONE ins | em 16  8 | 0056f7 | e6 00       |                 inc.d 000000         
2319:000 | DONE wsp | em 16  8 |        |             |
2320:000 | DONE ins | em 16  8 | 0056f9 | b4 00       |                 ldy.dx 00            DROP
2321:000 | DONE ins | em 16  8 | 0056fb | e8          |                 inx                  
2322:000 | DONE ins | em 16  8 | 0056fc | e8          |                 inx                  drop through to adjust_z
2323:000 | DONE wsp | em 16  8 |        |             |
2324:000 | DONE cmt | em 16  8 |        |             |                 ; Now the length of the complete word (z_word) has increased by
2325:000 | DONE cmt | em 16  8 |        |             |                 ; two. We need to update that number or else words such as SEE
2326:000 | DONE cmt | em 16  8 |        |             |                 ; will ignore the PFA. We use this same routine for VARIABLE,
2327:000 | DONE cmt | em 16  8 |        |             |                 ; VALUE and DEFER
2328:000 | DONE lbl | em 16  8 | 0056fd |             | adjust_z                             
2329:000 | DONE ins | em 16  8 | 0056fd | 20 3b 5a    |                 jsr 005a3b           gives us ( nt )
2330:000 | DONE wsp | em 16  8 |        |             |
2331:000 | DONE cmt | em 16  8 |        |             |                 ; z_word is kept six bytes further down
2332:000 | DONE ins | em 16  8 | 005700 | 98          |                 tya                  
2333:000 | DONE ins | em 16  8 | 005701 | 18          |                 clc                  
2334:000 | DONE ins | em 16  8 | 005702 | 69 06 00    |                 adc.# 0006           
2335:000 | DONE ins | em 16  8 | 005705 | a8          |                 tay                  
2336:000 | DONE wsp | em 16  8 |        |             |
2337:000 | DONE ins | em 16  8 | 005706 | b9 00 00    |                 lda.y 0000           LDA 0000,Y
2338:000 | DONE ins | em 16  8 | 005709 | 1a          |                 inc.a                
2339:000 | DONE ins | em 16  8 | 00570a | 1a          |                 inc.a                
2340:000 | DONE ins | em 16  8 | 00570b | 99 00 00    |                 sta.y 0000           
2341:000 | DONE wsp | em 16  8 |        |             |
2342:000 | DONE ins | em 16  8 | 00570e | b4 00       |                 ldy.dx 00            get rid of nt
2343:000 | DONE ins | em 16  8 | 005710 | e8          |                 inx                  
2344:000 | DONE ins | em 16  8 | 005711 | e8          |                 inx                  
2345:000 | DONE wsp | em 16  8 |        |             |
2346:000 | DONE lbl | em 16  8 | 005712 |             | z_constant                           
2346:001 | DONE ins | em 16  8 | 005712 | 60          |                 rts                  
2347:000 | DONE wsp | em 16  8 |        |             |
2348:000 | DONE wsp | em 16  8 |        |             |
2349:000 | DONE cmt | em 16  8 |        |             | ; -------------------------------------------------------------------
2350:000 | DONE cmt | em 16  8 |        |             | ; COUNT ( c-addr -- addr u ) 14 bytes / X cycles
2351:000 | DONE cmt | em 16  8 |        |             | ; Convert old-style character string to address-length pair. Note that the
2352:000 | DONE cmt | em 16  8 |        |             | ; length of the string c-addr ist stored in character length (8 bit), not cell
2353:000 | DONE cmt | em 16  8 |        |             | ; length (16 bit). This is rarely used these days, though COUNT can also be used
2354:000 | DONE cmt | em 16  8 |        |             | ; to step through a string character by character.
2355:000 | DONE lbl | em 16  8 | 005713 |             | xt_count                             
2356:000 | DONE dir | em 16  8 |        |             |         .!a16                        
2357:000 | DONE dir | em 16 16 |        |             |         .!xy16                       
2358:000 | DONE ins | em 16 16 | 005713 | 98          |                 tya                  
2359:000 | DONE ins | em 16 16 | 005714 | 1a          |                 inc.a                String address starts one char later
2360:000 | DONE wsp | em 16 16 |        |             |
2361:000 | DONE ins | em 16 16 | 005715 | ca          |                 dex                  
2362:000 | DONE ins | em 16 16 | 005716 | ca          |                 dex                  
2363:000 | DONE ins | em 16 16 | 005717 | 95 00       |                 sta.dx 00            NOS
2364:000 | DONE wsp | em 16 16 |        |             |
2365:000 | DONE ins | em 16 16 | 005719 | b9 00 00    |                 lda.y 0000           LDA $0000,Y  first byte is length
2366:000 | DONE ins | em 16 16 | 00571c | 29 ff 00    |                 and.# 00ff           get rid of whatever was MSB
2367:000 | DONE ins | em 16 16 | 00571f | a8          |                 tay                  TOS
2368:000 | DONE wsp | em 16 16 |        |             |
2369:000 | DONE lbl | em 16 16 | 005720 |             | z_count                              
2369:001 | DONE ins | em 16 16 | 005720 | 60          |                 rts                  
2370:000 | DONE wsp | em 16 16 |        |             |
2371:000 | DONE wsp | em 16 16 |        |             |
2372:000 | DONE cmt | em 16 16 |        |             | ; -------------------------------------------------------------------
2373:000 | DONE cmt | em 16 16 |        |             | ; CR ( -- ) X bytes / X cycles
2374:000 | DONE cmt | em 16 16 |        |             | ; Cause following output to appear at beginning of next line
2375:000 | DONE lbl | em 16 16 | 005721 |             | xt_cr                                
2376:000 | DONE ins | em 16 16 | 005721 | a9 0a 00    |                 lda.# AscLF          test with AscCR for emulators
2377:000 | DONE ins | em 16 16 | 005724 | 6c 0e 00    |                 jmp.i 00000e         JSR/RTS
2378:000 | DONE wsp | em 16 16 |        |             |
2379:000 | DONE lbl | em 16 16 | 005727 |             | z_cr                                 ; never reached
2380:000 | DONE wsp | em 16 16 |        |             |
2381:000 | DONE cmt | em 16 16 |        |             | ; -------------------------------------------------------------------
2382:000 | DONE cmt | em 16 16 |        |             | ; CREATE ( "name" -- ) X bytes / X cycles
2383:000 | DONE cmt | em 16 16 |        |             | ; Create a Dictionary entry associated with "name", used for various words,
2384:000 | DONE cmt | em 16 16 |        |             | ; especially for VARIABLE. When called, this new word will return the associated
2385:000 | DONE cmt | em 16 16 |        |             | ; address.
2386:000 | DONE lbl | em 16 16 | 005727 |             | xt_create                            
2387:000 | DONE dir | em 16 16 |        |             |         .!a16                        
2388:000 | DONE ins | em 16 16 | 005727 | 20 ef 5b    |                 jsr 005bef           ( -- addr u )
2389:000 | DONE ins | em 16 16 | 00572a | d0 06       |                 bne 005732           
2390:000 | DONE wsp | em 16 16 |        |             |
2391:000 | DONE cmt | em 16 16 |        |             |                 ; if we got a zero-length name string, complain and abort
2392:000 | DONE ins | em 16 16 | 00572c | a9 52 70    |                 lda.# 007052         
2393:000 | DONE ins | em 16 16 | 00572f | 4c 60 69    |                 jmp 006960           
2394:000 | DONE wsp | em 16 16 |        |             |
2395:000 | DONE lbl | em 16 16 | 005732 |             | create_got_name                      
2396:000 | DONE cmt | em 16 16 |        |             |                 ; Remember the first free byte of memory as the start of the new
2397:000 | DONE cmt | em 16 16 |        |             |                 ; word
2398:000 | DONE ins | em 16 16 | 005732 | a5 00       |                 lda.d 000000         
2399:000 | DONE ins | em 16 16 | 005734 | 85 1c       |                 sta.d 00001c         save start of new word
2400:000 | DONE wsp | em 16 16 |        |             |
2401:000 | DONE cmt | em 16 16 |        |             |                 ; Enforce limit on 255 char length names by masking the MSB
2402:000 | DONE cmt | em 16 16 |        |             |                 ; of the length of the given string. We arrive here with
2403:000 | DONE cmt | em 16 16 |        |             |                 ; ( addr u )
2404:000 | DONE ins | em 16 16 | 005736 | 98          |                 tya                  
2405:000 | DONE ins | em 16 16 | 005737 | 29 ff 00    |                 and.# 00ff           
2406:000 | DONE ins | em 16 16 | 00573a | 85 1e       |                 sta.d 00001e         save length of name string
2407:000 | DONE wsp | em 16 16 |        |             |
2408:000 | DONE cmt | em 16 16 |        |             |                 ; We need 8 bytes + the length of the name string for our new
2409:000 | DONE cmt | em 16 16 |        |             |                 ; header. This is also the offset for the start of the code
2410:000 | DONE cmt | em 16 16 |        |             |                 ; field (the xt_ label) so we need to remember it. Otherwise, we
2411:000 | DONE cmt | em 16 16 |        |             |                 ; could just allot the space afterwards.
2412:000 | DONE ins | em 16 16 | 00573c | 18          |                 clc                  
2413:000 | DONE ins | em 16 16 | 00573d | 69 08 00    |                 adc.# 0008           
2414:000 | DONE ins | em 16 16 | 005740 | 85 20       |                 sta.d 000020         total bytes required for header
2415:000 | DONE wsp | em 16 16 |        |             |
2416:000 | DONE cmt | em 16 16 |        |             |                 ; We need to allocate three more bytes for the hardcoded
2417:000 | DONE cmt | em 16 16 |        |             |                 ; code field area (CFA), the "payload" of the word which by
2418:000 | DONE cmt | em 16 16 |        |             |                 ; default will be a subroutine jump to DOVAR
2419:000 | DONE ins | em 16 16 | 005742 | 1a          |                 inc.a                
2420:000 | DONE ins | em 16 16 | 005743 | 1a          |                 inc.a                
2421:000 | DONE ins | em 16 16 | 005744 | 1a          |                 inc.a                
2422:000 | DONE wsp | em 16 16 |        |             |
2423:000 | DONE cmt | em 16 16 |        |             |                 ; Instead of jumping to ALLOT, we do things by hand for speed
2424:000 | DONE cmt | em 16 16 |        |             |                 ; and so we don't have to fool around with the stack
2425:000 | DONE ins | em 16 16 | 005745 | 18          |                 clc                  
2426:000 | DONE ins | em 16 16 | 005746 | 65 00       |                 adc.d 000000         
2427:000 | DONE ins | em 16 16 | 005748 | 85 00       |                 sta.d 000000         
2428:000 | DONE wsp | em 16 16 |        |             |
2429:000 | DONE cmt | em 16 16 |        |             |                 ; Now we walk through the header, using Y as the index. See
2430:000 | DONE cmt | em 16 16 |        |             |                 ; drawing of header in headers.tasm file for reference. We
2431:000 | DONE cmt | em 16 16 |        |             |                 ; arrive here with ( addr u ) still from PARSE-NAME. We need
2432:000 | DONE cmt | em 16 16 |        |             |                 ; that addr later for the name string, so we push it to the
2433:000 | DONE cmt | em 16 16 |        |             |                 ; Return Stack. We'll clean up the Data Stack later
2434:000 | DONE ins | em 16 16 | 00574a | b5 00       |                 lda.dx 00            
2435:000 | DONE ins | em 16 16 | 00574c | 48          |                 pha                  
2436:000 | DONE wsp | em 16 16 |        |             |
2437:000 | DONE cmt | em 16 16 |        |             |                 ; HEADER BYTES 0,1: Length byte and flags
2438:000 | DONE ins | em 16 16 | 00574d | a0 00 00    |                 ldy.# 0000           Y is now an index, not TOS
2439:000 | DONE ins | em 16 16 | 005750 | a5 1e       |                 lda.d 00001e         get length byte
2440:000 | DONE ins | em 16 16 | 005752 | 91 1c       |                 sta.diy 00001c       STA (TMP1),Y
2441:000 | DONE ins | em 16 16 | 005754 | c8          |                 iny                  
2442:000 | DONE ins | em 16 16 | 005755 | c8          |                 iny                  
2443:000 | DONE wsp | em 16 16 |        |             |
2444:000 | DONE cmt | em 16 16 |        |             |                 ; BYTES 2,3: Next word in the dictionary (its nt). This is the
2445:000 | DONE cmt | em 16 16 |        |             |                 ; current Dictionary Pointer
2446:000 | DONE ins | em 16 16 | 005756 | a5 02       |                 lda.d 000002         
2447:000 | DONE ins | em 16 16 | 005758 | 91 1c       |                 sta.diy 00001c       
2448:000 | DONE ins | em 16 16 | 00575a | c8          |                 iny                  
2449:000 | DONE ins | em 16 16 | 00575b | c8          |                 iny                  
2450:000 | DONE wsp | em 16 16 |        |             |
2451:000 | DONE cmt | em 16 16 |        |             |                 ; BYTES 4,5: Start of code field (xt of this word, "xt_" link)
2452:000 | DONE cmt | em 16 16 |        |             |                 ; This begins after the header, so we take the length of the
2453:000 | DONE cmt | em 16 16 |        |             |                 ; header, which we saved in tmp3, and use it as an offset to
2454:000 | DONE cmt | em 16 16 |        |             |                 ; the address of the start of the word
2455:000 | DONE ins | em 16 16 | 00575c | a5 1c       |                 lda.d 00001c         can't use CP, because we've allotted space
2456:000 | DONE ins | em 16 16 | 00575e | 85 02       |                 sta.d 000002         while we've got it, make old CP the new DP
2457:000 | DONE wsp | em 16 16 |        |             |
2458:000 | DONE ins | em 16 16 | 005760 | 18          |                 clc                  
2459:000 | DONE ins | em 16 16 | 005761 | 65 20       |                 adc.d 000020         total header length
2460:000 | DONE ins | em 16 16 | 005763 | 91 1c       |                 sta.diy 00001c       
2461:000 | DONE ins | em 16 16 | 005765 | c8          |                 iny                  
2462:000 | DONE ins | em 16 16 | 005766 | c8          |                 iny                  
2463:000 | DONE wsp | em 16 16 |        |             |
2464:000 | DONE cmt | em 16 16 |        |             |                 ; BYTES 6,7: End of code ("z_" link)
2465:000 | DONE cmt | em 16 16 |        |             |                 ; By default, we execute a jump to the DOVAR routine, so we need
2466:000 | DONE cmt | em 16 16 |        |             |                 ; to move three bytes down, and then one more byte so the z_
2467:000 | DONE cmt | em 16 16 |        |             |                 ; label points to the (fictional) RTS instruction for correct
2468:000 | DONE cmt | em 16 16 |        |             |                 ; compilation. The start of the code field is still in A
2469:000 | DONE ins | em 16 16 | 005767 | 1a          |                 inc.a                
2470:000 | DONE ins | em 16 16 | 005768 | 1a          |                 inc.a                
2471:000 | DONE ins | em 16 16 | 005769 | 1a          |                 inc.a                
2472:000 | DONE ins | em 16 16 | 00576a | 91 1c       |                 sta.diy 00001c       
2473:000 | DONE ins | em 16 16 | 00576c | c8          |                 iny                  
2474:000 | DONE ins | em 16 16 | 00576d | c8          |                 iny                  
2475:000 | DONE wsp | em 16 16 |        |             |
2476:000 | DONE cmt | em 16 16 |        |             |                 ; BYTE 8: Start of name string
2477:000 | DONE cmt | em 16 16 |        |             |                 ; The addr of the string is on the Return Stack, the length of
2478:000 | DONE cmt | em 16 16 |        |             |                 ; the name string is in tmp2. We subtract eight from the address
2479:000 | DONE cmt | em 16 16 |        |             |                 ; so we can use the same loop index
2480:000 | DONE ins | em 16 16 | 00576e | 68          |                 pla                  get back string address
2481:000 | DONE ins | em 16 16 | 00576f | 38          |                 sec                  
2482:000 | DONE ins | em 16 16 | 005770 | e9 08 00    |                 sbc.# 0008           
2483:000 | DONE ins | em 16 16 | 005773 | 85 20       |                 sta.d 000020         
2484:000 | DONE ins | em 16 16 | 005775 | e2 20       |                 sep 20               
2484:001 | DONE ctl | em  8 16 |        |             |         .!a8
2485:000 | DONE lbl | em  8 16 | 005777 |             | @                                    
2486:000 | DONE ins | em  8 16 | 005777 | b1 20       |                 lda.diy 000020       
2487:000 | DONE ins | em  8 16 | 005779 | 91 1c       |                 sta.diy 00001c       
2488:000 | DONE ins | em  8 16 | 00577b | c8          |                 iny                  
2489:000 | DONE ins | em  8 16 | 00577c | c6 1e       |                 dec.d 00001e         
2490:000 | DONE ins | em  8 16 | 00577e | d0 f7       |                 bne 005777           
2491:000 | DONE wsp | em  8 16 |        |             |
2492:000 | DONE cmt | em  8 16 |        |             |                 ; After the name string, comes the Code Field (start at xt, that
2493:000 | DONE cmt | em  8 16 |        |             |                 ; is, the xt_ label of the word) which is initially a jump to the
2494:000 | DONE cmt | em  8 16 |        |             |                 ; subroutine to DOVAR. We're still in 8-bit A-register, which is
2495:000 | DONE cmt | em  8 16 |        |             |                 ; good
2496:000 | DONE ins | em  8 16 | 005780 | a9 20       |                 lda.# 20             opcode of JSR
2497:000 | DONE ins | em  8 16 | 005782 | 91 1c       |                 sta.diy 00001c       
2498:000 | DONE ins | em  8 16 | 005784 | c8          |                 iny                  single increase only because we have 8-bit A
2499:000 | DONE wsp | em  8 16 |        |             |
2500:000 | DONE ins | em  8 16 | 005785 | a9 d4       |                 lda.# .lsb 0068d4    
2501:000 | DONE ins | em  8 16 | 005787 | 91 1c       |                 sta.diy 00001c       
2502:000 | DONE ins | em  8 16 | 005789 | c8          |                 iny                  
2503:000 | DONE wsp | em  8 16 |        |             |
2504:000 | DONE ins | em  8 16 | 00578a | a9 68       |                 lda.# .msb 0068d4    
2505:000 | DONE ins | em  8 16 | 00578c | 91 1c       |                 sta.diy 00001c       
2506:000 | DONE wsp | em  8 16 |        |             |
2507:000 | DONE ins | em  8 16 | 00578e | c2 20       |                 rep 20               
2507:001 | DONE ctl | em 16 16 |        |             |         .!a16
2508:000 | DONE cmt | em 16 16 |        |             |                 ; We're done. Restore Data Stack (2DROP)
2509:000 | DONE ins | em 16 16 | 005790 | b4 02       |                 ldy.dx 02            
2510:000 | DONE ins | em 16 16 | 005792 | e8          |                 inx                  
2511:000 | DONE ins | em 16 16 | 005793 | e8          |                 inx                  
2512:000 | DONE ins | em 16 16 | 005794 | e8          |                 inx                  
2513:000 | DONE ins | em 16 16 | 005795 | e8          |                 inx                  
2514:000 | DONE wsp | em 16 16 |        |             |
2515:000 | DONE lbl | em 16 16 | 005796 |             | z_create                             
2515:001 | DONE ins | em 16 16 | 005796 | 60          |                 rts                  
2516:000 | DONE wsp | em 16 16 |        |             |
2517:000 | DONE wsp | em 16 16 |        |             |
2518:000 | DONE cmt | em 16 16 |        |             | ; -------------------------------------------------------------------
2519:000 | DONE cmt | em 16 16 |        |             | ; DEFER ( "name" -- ) X bytes / X cycles
2520:000 | DONE cmt | em 16 16 |        |             | ; Reserve an name that can be linked to various xt by IS. The ANSI reference
2521:000 | DONE cmt | em 16 16 |        |             | ; implementation is CREATE ['] ABORT , DOES> @ EXECUTE ; but we use this as
2522:000 | DONE cmt | em 16 16 |        |             | ; a low-level word so we can set stuff up earlier and faster
2523:000 | DONE lbl | em 16 16 | 005797 |             | xt_defer                             
2524:000 | DONE ins | em 16 16 | 005797 | 20 27 57    |                 jsr 005727           
2525:000 | DONE wsp | em 16 16 |        |             |
2526:000 | DONE cmt | em 16 16 |        |             |                 ; CREATE by default installs a subroutine jump to DOVAR, but we
2527:000 | DONE cmt | em 16 16 |        |             |                 ; actually want DODEFER this time. Go back two bytes and repace
2528:000 | DONE cmt | em 16 16 |        |             |                 ; the subroutine jump target
2529:000 | DONE ins | em 16 16 | 00579a | a5 00       |                 lda.d 000000         
2530:000 | DONE ins | em 16 16 | 00579c | 3a          |                 dec.a                
2531:000 | DONE ins | em 16 16 | 00579d | 3a          |                 dec.a                
2532:000 | DONE ins | em 16 16 | 00579e | 85 1c       |                 sta.d 00001c         
2533:000 | DONE wsp | em 16 16 |        |             |
2534:000 | DONE ins | em 16 16 | 0057a0 | a9 b8 68    |                 lda.# 0068b8         
2535:000 | DONE ins | em 16 16 | 0057a3 | 92 1c       |                 sta.di 00001c        STA (TMP1)
2536:000 | DONE wsp | em 16 16 |        |             |
2537:000 | DONE cmt | em 16 16 |        |             |                 ; DODEFER executes the next address it finds after its call. As
2538:000 | DONE cmt | em 16 16 |        |             |                 ; a default, we include the error "Defer not defined"
2539:000 | DONE ins | em 16 16 | 0057a5 | a9 c1 68    |                 lda.# 0068c1         
2540:000 | DONE ins | em 16 16 | 0057a8 | 92 00       |                 sta.di 000000        
2541:000 | DONE ins | em 16 16 | 0057aa | e6 00       |                 inc.d 000000         
2542:000 | DONE ins | em 16 16 | 0057ac | e6 00       |                 inc.d 000000         
2543:000 | DONE wsp | em 16 16 |        |             |
2544:000 | DONE ins | em 16 16 | 0057ae | 4c fd 56    |                 jmp 0056fd           adjust the header to the correct length
2545:000 | DONE wsp | em 16 16 |        |             |
2546:000 | DONE lbl | em 16 16 | 0057b1 |             | z_defer                              ; never reached
2547:000 | DONE wsp | em 16 16 |        |             |
2548:000 | DONE wsp | em 16 16 |        |             |
2549:000 | DONE cmt | em 16 16 |        |             | ; -------------------------------------------------------------------
2550:000 | DONE cmt | em 16 16 |        |             | ; DIGIT? ( char -- u f | char f )  X bytes / X cycles
2551:000 | DONE cmt | em 16 16 |        |             | ; Convert a single ASCII character to a number in the current radix. Inspired by
2552:000 | DONE cmt | em 16 16 |        |             | ; the pForth instruction DIGIT in pForth, see
2553:000 | DONE cmt | em 16 16 |        |             | ; https://github.com/philburk/pforth/blob/master/fth/numberio.fth
2554:000 | DONE cmt | em 16 16 |        |             | ; Rewritten from DIGIT>NUMBER in Tali Forth. Note in contrast to pForth, we get
2555:000 | DONE cmt | em 16 16 |        |             | ; the base (radix) ourselves instead of having the user provide it. There is no
2556:000 | DONE cmt | em 16 16 |        |             | ; standard name for this routine, which itself is not ANSI; we use DIGIT?
2557:000 | DONE cmt | em 16 16 |        |             | ; following pForth and Gforth.
2558:000 | DONE lbl | em 16 16 | 0057b1 |             | xt_digitq                            
2559:000 | DONE dir | em 16 16 |        |             |         .!a16                        
2560:000 | DONE ins | em 16 16 | 0057b1 | 98          |                 tya                  
2561:000 | DONE ins | em 16 16 | 0057b2 | 29 ff 00    |                 and.# 00ff           paranoid
2562:000 | DONE wsp | em 16 16 |        |             |
2563:000 | DONE ins | em 16 16 | 0057b5 | e2 20       |                 sep 20               
2563:001 | DONE ctl | em  8 16 |        |             |         .!a8
2564:000 | DONE cmt | em  8 16 |        |             |                 ; Make sure we're not below the ASCII code for '0'
2565:000 | DONE ins | em  8 16 | 0057b7 | c9 30       |                 cmp.# 30             
2566:000 | DONE ins | em  8 16 | 0057b9 | 90 1d       |                 bcc 0057d8           
2567:000 | DONE wsp | em  8 16 |        |             |
2568:000 | DONE cmt | em  8 16 |        |             |                 ; Then see if we are below '9', because that would make this
2569:000 | DONE cmt | em  8 16 |        |             |                 ; a normal number
2570:000 | DONE ins | em  8 16 | 0057bb | c9 3a       |                 cmp.# 00003a         This is ':'
2571:000 | DONE ins | em  8 16 | 0057bd | 90 12       |                 bcc 0057d1           
2572:000 | DONE wsp | em  8 16 |        |             |
2573:000 | DONE cmt | em  8 16 |        |             |                 ; Well, then let's see if this is the gap between '9' and 'A' so
2574:000 | DONE cmt | em  8 16 |        |             |                 ; we can treat the whole range as a number
2575:000 | DONE ins | em  8 16 | 0057bf | c9 40       |                 cmp.# 000040         This is '@'
2576:000 | DONE ins | em  8 16 | 0057c1 | 90 15       |                 bcc 0057d8           
2577:000 | DONE wsp | em  8 16 |        |             |
2578:000 | DONE cmt | em  8 16 |        |             |                 ; Probably a letter, so we make sure it is uppercase
2579:000 | DONE ins | em  8 16 | 0057c3 | c9 61       |                 cmp.# 61             
2580:000 | DONE ins | em  8 16 | 0057c5 | 90 07       |                 bcc 0057ce           not lower case, too low
2581:000 | DONE ins | em  8 16 | 0057c7 | c9 7b       |                 cmp.# 00007b         
2582:000 | DONE ins | em  8 16 | 0057c9 | b0 03       |                 bcs 0057ce           not lower case, too high
2583:000 | DONE wsp | em  8 16 |        |             |
2584:000 | DONE ins | em  8 16 | 0057cb | 18          |                 clc                  just right
2585:000 | DONE ins | em  8 16 | 0057cc | 69 e0       |                 adc.# e0             offset to uppercase (wraps)
2586:000 | DONE wsp | em  8 16 |        |             |
2587:000 | DONE lbl | em  8 16 | 0057ce |             | dq_case_done                         
2588:000 | DONE cmt | em  8 16 |        |             |                 ; Get rid of the gap between '9' and 'A' so we can treat the
2589:000 | DONE cmt | em  8 16 |        |             |                 ; whole range as one number
2590:000 | DONE ins | em  8 16 | 0057ce | 38          |                 sec                  
2591:000 | DONE ins | em  8 16 | 0057cf | e9 07       |                 sbc.# 07             fall through to dq_checkbase
2592:000 | DONE wsp | em  8 16 |        |             |
2593:000 | DONE lbl | em  8 16 | 0057d1 |             | dq_checkbase                         
2594:000 | DONE cmt | em  8 16 |        |             |                 ; We have a number, now see if it inside the range given by BASE
2595:000 | DONE ins | em  8 16 | 0057d1 | 38          |                 sec                  
2596:000 | DONE ins | em  8 16 | 0057d2 | e9 30       |                 sbc.# 30             This is also the actual conversion step
2597:000 | DONE ins | em  8 16 | 0057d4 | c5 16       |                 cmp.d 000016         
2598:000 | DONE ins | em  8 16 | 0057d6 | 90 0b       |                 bcc 0057e3           
2599:000 | DONE wsp | em  8 16 |        |             |
2600:000 | DONE lbl | em  8 16 | 0057d8 |             | dq_notdigit                          
2601:000 | DONE cmt | em  8 16 |        |             |                 ; not a digit, add a false flag
2602:000 | DONE ins | em  8 16 | 0057d8 | ca          |                 dex                  
2603:000 | DONE ins | em  8 16 | 0057d9 | ca          |                 dex                  
2604:000 | DONE ins | em  8 16 | 0057da | 94 00       |                 sty.dx 00            keep the offending character in NOS
2605:000 | DONE ins | em  8 16 | 0057dc | a0 00 00    |                 ldy.# 0000           
2606:000 | DONE ins | em  8 16 | 0057df | c2 20       |                 rep 20               
2606:001 | DONE ctl | em 16 16 |        |             |         .!a16
2607:000 | DONE ins | em 16 16 | 0057e1 | 80 09       |                 bra 0057ec           
2608:000 | DONE wsp | em 16 16 |        |             |
2609:000 | DONE lbl | em 16 16 | 0057e3 |             | dq_success                           
2610:000 | DONE ins | em 16 16 | 0057e3 | ca          |                 dex                  
2611:000 | DONE ins | em 16 16 | 0057e4 | ca          |                 dex                  
2612:000 | DONE ins | em 16 16 | 0057e5 | c2 20       |                 rep 20               
2612:001 | DONE ctl | em 16 16 |        |             |         .!a16
2613:000 | DONE ins | em 16 16 | 0057e7 | 95 00       |                 sta.dx 00            put the number in NOS
2614:000 | DONE ins | em 16 16 | 0057e9 | a0 ff ff    |                 ldy.# 0ffff          
2615:000 | DONE wsp | em 16 16 |        |             |
2616:000 | DONE lbl | em 16 16 | 0057ec |             | z_digitq                             
2616:001 | DONE ins | em 16 16 | 0057ec | 60          |                 rts                  
2617:000 | DONE wsp | em 16 16 |        |             |
2618:000 | DONE wsp | em 16 16 |        |             |
2619:000 | DONE cmt | em 16 16 |        |             | ; -------------------------------------------------------------------
2620:000 | DONE cmt | em 16 16 |        |             | ; DPLUS ( d d -- d ) X bytes / X cycles
2621:000 | DONE cmt | em 16 16 |        |             | ; Add two double cell numbers
2622:000 | DONE lbl | em 16 16 | 0057ed |             | xt_dplus                             
2623:000 | DONE dir | em 16 16 |        |             |         .!a16                        
2624:000 | DONE ins | em 16 16 | 0057ed | 5a          |                 phy                  save hi word of first number, frees Y
2625:000 | DONE ins | em 16 16 | 0057ee | b5 00       |                 lda.dx 00            lo word of first number
2626:000 | DONE ins | em 16 16 | 0057f0 | 18          |                 clc                  
2627:000 | DONE ins | em 16 16 | 0057f1 | 75 04       |                 adc.dx 04            add lo word of second number
2628:000 | DONE ins | em 16 16 | 0057f3 | a8          |                 tay                  
2629:000 | DONE wsp | em 16 16 |        |             |
2630:000 | DONE ins | em 16 16 | 0057f4 | 68          |                 pla                  get hi word of first number
2631:000 | DONE ins | em 16 16 | 0057f5 | 75 02       |                 adc.dx 02            add hi word of second number
2632:000 | DONE wsp | em 16 16 |        |             |
2633:000 | DONE ins | em 16 16 | 0057f7 | e8          |                 inx                  
2634:000 | DONE ins | em 16 16 | 0057f8 | e8          |                 inx                  
2635:000 | DONE ins | em 16 16 | 0057f9 | e8          |                 inx                  
2636:000 | DONE ins | em 16 16 | 0057fa | e8          |                 inx                  
2637:000 | DONE wsp | em 16 16 |        |             |
2638:000 | DONE ins | em 16 16 | 0057fb | 94 00       |                 sty.dx 00            lo result goes NOS
2639:000 | DONE ins | em 16 16 | 0057fd | a8          |                 tay                  to result goes TOS
2640:000 | DONE wsp | em 16 16 |        |             |
2641:000 | DONE lbl | em 16 16 | 0057fe |             | z_dplus                              
2641:001 | DONE ins | em 16 16 | 0057fe | 60          |                 rts                  
2642:000 | DONE wsp | em 16 16 |        |             |
2643:000 | DONE cmt | em 16 16 |        |             | ; -------------------------------------------------------------------
2644:000 | DONE cmt | em 16 16 |        |             | ; DMINUS ( d d -- d ) X bytes / X cycles
2645:000 | DONE cmt | em 16 16 |        |             | ; Subtract two double cell numbers
2646:000 | DONE lbl | em 16 16 | 0057ff |             | xt_dminus                            
2647:000 | DONE dir | em 16 16 |        |             |         .!a16                        
2648:000 | DONE ins | em 16 16 | 0057ff | b5 04       |                 lda.dx 04            lo word NOS
2649:000 | DONE ins | em 16 16 | 005801 | 38          |                 sec                  
2650:000 | DONE ins | em 16 16 | 005802 | f5 00       |                 sbc.dx 00            lo word TOS
2651:000 | DONE ins | em 16 16 | 005804 | 48          |                 pha                  
2652:000 | DONE wsp | em 16 16 |        |             |
2653:000 | DONE ins | em 16 16 | 005805 | 94 00       |                 sty.dx 00            use as temp storage for hi word TOS
2654:000 | DONE ins | em 16 16 | 005807 | b5 02       |                 lda.dx 02            hi word, NOS
2655:000 | DONE ins | em 16 16 | 005809 | f5 00       |                 sbc.dx 00            hi word, TOS
2656:000 | DONE ins | em 16 16 | 00580b | a8          |                 tay                  result hi word now TOS
2657:000 | DONE wsp | em 16 16 |        |             |
2658:000 | DONE ins | em 16 16 | 00580c | e8          |                 inx                  
2659:000 | DONE ins | em 16 16 | 00580d | e8          |                 inx                  
2660:000 | DONE ins | em 16 16 | 00580e | e8          |                 inx                  
2661:000 | DONE ins | em 16 16 | 00580f | e8          |                 inx                  
2662:000 | DONE wsp | em 16 16 |        |             |
2663:000 | DONE ins | em 16 16 | 005810 | 68          |                 pla                  
2664:000 | DONE ins | em 16 16 | 005811 | 95 00       |                 sta.dx 00            result lo word now NOS
2665:000 | DONE wsp | em 16 16 |        |             |
2666:000 | DONE lbl | em 16 16 | 005813 |             | z_dminus                             
2666:001 | DONE ins | em 16 16 | 005813 | 60          |                 rts                  
2667:000 | DONE wsp | em 16 16 |        |             |
2668:000 | DONE wsp | em 16 16 |        |             |
2669:000 | DONE cmt | em 16 16 |        |             | ; -------------------------------------------------------------------
2670:000 | DONE cmt | em 16 16 |        |             | ; D>S ( ud -- u ) X bytes / X cycles
2671:000 | DONE cmt | em 16 16 |        |             | ; Convert double cell number to single cell. Note this currently does not
2672:000 | DONE cmt | em 16 16 |        |             | ; respect the sign, in constrast to Gforth - this is simply DROP
2673:000 | DONE cmt | em 16 16 |        |             | ; TODO make this work the way Gforth's does
2674:000 | DONE lbl | em 16 16 | 005814 |             | xt_dtos                              
2675:000 | DONE dir | em 16 16 |        |             |         .!a16                        
2676:000 | DONE ins | em 16 16 | 005814 | b4 00       |                 ldy.dx 00            
2677:000 | DONE ins | em 16 16 | 005816 | e8          |                 inx                  
2678:000 | DONE ins | em 16 16 | 005817 | e8          |                 inx                  
2679:000 | DONE wsp | em 16 16 |        |             |
2680:000 | DONE lbl | em 16 16 | 005818 |             | z_dtos                               
2680:001 | DONE ins | em 16 16 | 005818 | 60          |                 rts                  
2681:000 | DONE wsp | em 16 16 |        |             |
2682:000 | DONE wsp | em 16 16 |        |             |
2683:000 | DONE cmt | em 16 16 |        |             | ; -------------------------------------------------------------------
2684:000 | DONE cmt | em 16 16 |        |             | ; DABS ( d -- ud ) X bytes / X cycles
2685:000 | DONE cmt | em 16 16 |        |             | ; Return the absolute value of a double number
2686:000 | DONE cmt | em 16 16 |        |             | ; TODO recode in assembler
2687:000 | DONE lbl | em 16 16 | 005819 |             | xt_dabs                              
2688:000 | DONE cmt | em 16 16 |        |             |                 ; double cell is TOS
2689:000 | DONE ins | em 16 16 | 005819 | 98          |                 tya                  force flag test
2690:000 | DONE ins | em 16 16 | 00581a | f0 03       |                 beq 00581f           already positive, life is good
2691:000 | DONE wsp | em 16 16 |        |             |
2692:000 | DONE ins | em 16 16 | 00581c | 20 35 58    |                 jsr 005835           
2693:000 | DONE wsp | em 16 16 |        |             |
2694:000 | DONE lbl | em 16 16 | 00581f |             | z_dabs                               
2694:001 | DONE ins | em 16 16 | 00581f | 60          |                 rts                  
2695:000 | DONE wsp | em 16 16 |        |             |
2696:000 | DONE wsp | em 16 16 |        |             |
2697:000 | DONE cmt | em 16 16 |        |             | ; -------------------------------------------------------------------
2698:000 | DONE cmt | em 16 16 |        |             | ; DECIMAL ( -- ) 7 bytes / X cycles
2699:000 | DONE cmt | em 16 16 |        |             | ; Change radix for number conversion to 10
2700:000 | DONE lbl | em 16 16 | 005820 |             | xt_decimal                           
2701:000 | DONE dir | em 16 16 |        |             |         .!a16                        
2702:000 | DONE ins | em 16 16 | 005820 | a9 0a 00    |                 lda.# 000a           
2703:000 | DONE ins | em 16 16 | 005823 | 85 16       |                 sta.d 000016         
2704:000 | DONE wsp | em 16 16 |        |             |
2705:000 | DONE lbl | em 16 16 | 005825 |             | z_decimal                            
2705:001 | DONE ins | em 16 16 | 005825 | 60          |                 rts                  
2706:000 | DONE wsp | em 16 16 |        |             |
2707:000 | DONE wsp | em 16 16 |        |             |
2708:000 | DONE cmt | em 16 16 |        |             | ; -------------------------------------------------------------------
2709:000 | DONE cmt | em 16 16 |        |             | ; DEPTH ( -- u ) 14 bytes / X cycles
2710:000 | DONE cmt | em 16 16 |        |             | ; Push the number of entries in cells (not bytes) on the parameter stack.
2711:000 | DONE cmt | em 16 16 |        |             | ; Assumes X is valid as the DSP.
2712:000 | DONE lbl | em 16 16 | 005826 |             | xt_depth                             
2713:000 | DONE dir | em 16 16 |        |             |         .!a16                        
2714:000 | DONE cmt | em 16 16 |        |             |                 ; We've got zero entries when X is dsp0
2715:000 | DONE ins | em 16 16 | 005826 | 86 22       |                 stx.d 000022         
2716:000 | DONE ins | em 16 16 | 005828 | a9 ff 00    |                 lda.# 0000ff         
2717:000 | DONE ins | em 16 16 | 00582b | 38          |                 sec                  
2718:000 | DONE ins | em 16 16 | 00582c | e5 22       |                 sbc.d 000022         
2719:000 | DONE wsp | em 16 16 |        |             |
2720:000 | DONE cmt | em 16 16 |        |             |                 ; now divide by two because each cells is to bytes long
2721:000 | DONE ins | em 16 16 | 00582e | 4a          |                 lsr.a                
2722:000 | DONE wsp | em 16 16 |        |             |
2723:000 | DONE ins | em 16 16 | 00582f | ca          |                 dex                  
2724:000 | DONE ins | em 16 16 | 005830 | ca          |                 dex                  
2725:000 | DONE ins | em 16 16 | 005831 | 94 00       |                 sty.dx 00            
2726:000 | DONE wsp | em 16 16 |        |             |
2727:000 | DONE cmt | em 16 16 |        |             |                 ; push result to stack
2728:000 | DONE ins | em 16 16 | 005833 | a8          |                 tay                  
2729:000 | DONE wsp | em 16 16 |        |             |
2730:000 | DONE lbl | em 16 16 | 005834 |             | z_depth                              
2730:001 | DONE ins | em 16 16 | 005834 | 60          |                 rts                  
2731:000 | DONE wsp | em 16 16 |        |             |
2732:000 | DONE cmt | em 16 16 |        |             | ; -------------------------------------------------------------------
2733:000 | DONE cmt | em 16 16 |        |             | ; DNEGATE ( d -- d ) 19 bytes / X cycles
2734:000 | DONE cmt | em 16 16 |        |             | ; Change the sign of a double number. This is the double equivalent of NEGATE
2735:000 | DONE lbl | em 16 16 | 005835 |             | xt_dnegate                           
2736:000 | DONE dir | em 16 16 |        |             |         .!a16                        
2737:000 | DONE cmt | em 16 16 |        |             |                 ; start off with LSW (in NOS)
2738:000 | DONE ins | em 16 16 | 005835 | b5 00       |                 lda.dx 00            
2739:000 | DONE ins | em 16 16 | 005837 | 49 ff ff    |                 eor.# 0ffff          
2740:000 | DONE wsp | em 16 16 |        |             |
2741:000 | DONE cmt | em 16 16 |        |             |                 ; INC doesn't affect the carry flag, so we have to do this the
2742:000 | DONE cmt | em 16 16 |        |             |                 ; hard way
2743:000 | DONE ins | em 16 16 | 00583a | 18          |                 clc                  
2744:000 | DONE ins | em 16 16 | 00583b | 69 01 00    |                 adc.# 0001           
2745:000 | DONE ins | em 16 16 | 00583e | 95 00       |                 sta.dx 00            
2746:000 | DONE wsp | em 16 16 |        |             |
2747:000 | DONE cmt | em 16 16 |        |             |                 ; now MSW (in TOS)
2748:000 | DONE ins | em 16 16 | 005840 | 98          |                 tya                  
2749:000 | DONE ins | em 16 16 | 005841 | 49 ff ff    |                 eor.# 0ffff          
2750:000 | DONE ins | em 16 16 | 005844 | 69 00 00    |                 adc.# 0000           we are only interested in the carry
2751:000 | DONE ins | em 16 16 | 005847 | a8          |                 tay                  
2752:000 | DONE wsp | em 16 16 |        |             |
2753:000 | DONE lbl | em 16 16 | 005848 |             | z_dnegate                            
2753:001 | DONE ins | em 16 16 | 005848 | 60          |                 rts                  
2754:000 | DONE wsp | em 16 16 |        |             |
2755:000 | DONE wsp | em 16 16 |        |             |
2756:000 | DONE cmt | em 16 16 |        |             | ; -------------------------------------------------------------------
2757:000 | DONE cmt | em 16 16 |        |             | ; DOES> ( -- ) X bytes / X cycles
2758:000 | DONE cmt | em 16 16 |        |             | ; Create the payload for defining new defining words. See the file
2759:000 | DONE cmt | em 16 16 |        |             | ; docs/create-does.txt and
2760:000 | DONE cmt | em 16 16 |        |             | ; http://www.bradrodriguez.com/papers/moving3.htm for a discussion of
2761:000 | DONE cmt | em 16 16 |        |             | ; DOES>'s internal workings. This uses tmp1 and tmp2
2762:000 | DONE cmt | em 16 16 |        |             | ; TODO see if this creates a correct z_word address
2763:000 | DONE lbl | em 16 16 | 005849 |             | xt_does                              
2764:000 | DONE cmt | em 16 16 |        |             |                 ; compile a subroutine jump to the runtime of DOES>
2765:000 | DONE ins | em 16 16 | 005849 | f4 56 58    |                 phe.# 005856         
2766:000 | DONE ins | em 16 16 | 00584c | 20 3f 69    |                 jsr 00693f           
2767:000 | DONE wsp | em 16 16 |        |             |
2768:000 | DONE cmt | em 16 16 |        |             |                 ; compile a subroutine jump to DODOES. In traditional terms,
2769:000 | DONE cmt | em 16 16 |        |             |                 ; this is the Code Field Area (CFA) of the new word
2770:000 | DONE ins | em 16 16 | 00584f | f4 c7 68    |                 phe.# 0068c7         
2771:000 | DONE ins | em 16 16 | 005852 | 20 3f 69    |                 jsr 00693f           
2772:000 | DONE wsp | em 16 16 |        |             |
2773:000 | DONE lbl | em 16 16 | 005855 |             | z_does                               
2773:001 | DONE ins | em 16 16 | 005855 | 60          |                 rts                  
2774:000 | DONE wsp | em 16 16 |        |             |
2775:000 | DONE lbl | em 16 16 | 005856 |             | does_rt                              
2776:000 | DONE cmt | em 16 16 |        |             |                 ; Runtime portion of DOES>. This replaces the subroutine jump to
2777:000 | DONE cmt | em 16 16 |        |             |                 ; DOVAR that CREATE automatically encodes by a jump to the
2778:000 | DONE cmt | em 16 16 |        |             |                 ; address that contains a subroutine jump to DODOES. We don't
2779:000 | DONE cmt | em 16 16 |        |             |                 ; jump to DODOES directly because we need to work our magic with
2780:000 | DONE cmt | em 16 16 |        |             |                 ; the return addresses
2781:000 | DONE ins | em 16 16 | 005856 | 68          |                 pla                  
2782:000 | DONE ins | em 16 16 | 005857 | 1a          |                 inc.a                increase by one because of RTS mechanics
2783:000 | DONE ins | em 16 16 | 005858 | 85 1c       |                 sta.d 00001c         
2784:000 | DONE wsp | em 16 16 |        |             |
2785:000 | DONE cmt | em 16 16 |        |             |                 ; CREATE has also already modified the DP to point to the new
2786:000 | DONE cmt | em 16 16 |        |             |                 ; word. We have no idea which instructions followed the CREATE
2787:000 | DONE cmt | em 16 16 |        |             |                 ; command if there is a DOES> so the CP could point anywhere by
2788:000 | DONE cmt | em 16 16 |        |             |                 ; now.
2789:000 | DONE ins | em 16 16 | 00585a | a5 02       |                 lda.d 000002         
2790:000 | DONE wsp | em 16 16 |        |             |
2791:000 | DONE cmt | em 16 16 |        |             |                 ; The address of the word's xt is four bytes down (see
2792:000 | DONE cmt | em 16 16 |        |             |                 ; header.tasm for details).
2793:000 | DONE ins | em 16 16 | 00585c | 18          |                 clc                  
2794:000 | DONE ins | em 16 16 | 00585d | 69 04 00    |                 adc.# 0004           
2795:000 | DONE ins | em 16 16 | 005860 | 85 1e       |                 sta.d 00001e         
2796:000 | DONE wsp | em 16 16 |        |             |
2797:000 | DONE cmt | em 16 16 |        |             |                 ; Now we get that address and add one byte to skip over the JSR
2798:000 | DONE cmt | em 16 16 |        |             |                 ; opcode
2799:000 | DONE ins | em 16 16 | 005862 | b2 1e       |                 lda.di 00001e        LDA (TMP2)
2800:000 | DONE ins | em 16 16 | 005864 | 1a          |                 inc.a                
2801:000 | DONE ins | em 16 16 | 005865 | 85 1e       |                 sta.d 00001e         Points to address to be replaced
2802:000 | DONE wsp | em 16 16 |        |             |
2803:000 | DONE cmt | em 16 16 |        |             |                 ; Replace the DOVAR address
2804:000 | DONE ins | em 16 16 | 005867 | a5 1c       |                 lda.d 00001c         
2805:000 | DONE ins | em 16 16 | 005869 | 92 1e       |                 sta.di 00001e        STA (TMP2)
2806:000 | DONE wsp | em 16 16 |        |             |
2807:000 | DONE cmt | em 16 16 |        |             |                 ; Since we removed the return address that brought us here, we
2808:000 | DONE cmt | em 16 16 |        |             |                 ; go back to whatever the main routine was. Otherwise, we we
2809:000 | DONE cmt | em 16 16 |        |             |                 ; smash into the subroutine jump to DODOES.
2810:000 | DONE ins | em 16 16 | 00586b | 60          |                 rts                  
2811:000 | DONE wsp | em 16 16 |        |             |
2812:000 | DONE wsp | em 16 16 |        |             |
2813:000 | DONE cmt | em 16 16 |        |             | ; -------------------------------------------------------------------
2814:000 | DONE cmt | em 16 16 |        |             | ; DROP ( n -- ) 4 bytes / 9 cycles
2815:000 | DONE cmt | em 16 16 |        |             | ; Drop first entry on Data Stack
2816:000 | DONE wsp | em 16 16 |        |             |
2817:000 | DONE lbl | em 16 16 | 00586c |             | xt_drop                              
2818:000 | DONE ins | em 16 16 | 00586c | b4 00       |                 ldy.dx 00            
2819:000 | DONE ins | em 16 16 | 00586e | e8          |                 inx                  
2820:000 | DONE ins | em 16 16 | 00586f | e8          |                 inx                  
2821:000 | DONE wsp | em 16 16 |        |             |
2822:000 | DONE lbl | em 16 16 | 005870 |             | z_drop                               
2822:001 | DONE ins | em 16 16 | 005870 | 60          |                 rts                  
2823:000 | DONE wsp | em 16 16 |        |             |
2824:000 | DONE wsp | em 16 16 |        |             |
2825:000 | DONE cmt | em 16 16 |        |             | ; -------------------------------------------------------------------
2826:000 | DONE cmt | em 16 16 |        |             | ; DUMP ( addr u -- ) X bytes / X cycles
2827:000 | DONE cmt | em 16 16 |        |             | ; Print a region of memory in a pretty way. This is used interactively, so we
2828:000 | DONE cmt | em 16 16 |        |             | ; don't care about speed (humans are slow) and concentrate on size instead,
2829:000 | DONE cmt | em 16 16 |        |             | ; using JSR where we can. This is a primtive version until we get loops ready
2830:000 | DONE lbl | em 16 16 | 005871 |             | xt_dump                              
2831:000 | DONE ins | em 16 16 | 005871 | 98          |                 tya                  force flag test
2832:000 | DONE lbl | em 16 16 | 005872 |             | dump_loop                            
2833:000 | DONE ins | em 16 16 | 005872 | f0 14       |                 beq 005888           
2834:000 | DONE wsp | em 16 16 |        |             |
2835:000 | DONE ins | em 16 16 | 005874 | 5a          |                 phy                  save counter
2836:000 | DONE ins | em 16 16 | 005875 | a1 00       |                 lda.dxi 00           get byte from address
2837:000 | DONE ins | em 16 16 | 005877 | 29 ff 00    |                 and.# 00ff           
2838:000 | DONE ins | em 16 16 | 00587a | a8          |                 tay                  
2839:000 | DONE ins | em 16 16 | 00587b | f6 00       |                 inc.dx 00            address modified in place
2840:000 | DONE wsp | em 16 16 |        |             |
2841:000 | DONE ins | em 16 16 | 00587d | 20 83 5e    |                 jsr 005e83           U.
2842:000 | DONE wsp | em 16 16 |        |             |
2843:000 | DONE ins | em 16 16 | 005880 | ca          |                 dex                  
2844:000 | DONE ins | em 16 16 | 005881 | ca          |                 dex                  
2845:000 | DONE ins | em 16 16 | 005882 | 94 00       |                 sty.dx 00            
2846:000 | DONE ins | em 16 16 | 005884 | 7a          |                 ply                  get counter back
2847:000 | DONE wsp | em 16 16 |        |             |
2848:000 | DONE ins | em 16 16 | 005885 | 88          |                 dey                  
2849:000 | DONE ins | em 16 16 | 005886 | 80 ea       |                 bra 005872           
2850:000 | DONE wsp | em 16 16 |        |             |
2851:000 | DONE lbl | em 16 16 | 005888 |             | dump_done                            
2852:000 | DONE ins | em 16 16 | 005888 | 20 21 57    |                 jsr 005721           
2853:000 | DONE ins | em 16 16 | 00588b | 20 e6 53    |                 jsr 0053e6           
2854:000 | DONE wsp | em 16 16 |        |             |
2855:000 | DONE lbl | em 16 16 | 00588e |             | z_dump                               
2855:001 | DONE ins | em 16 16 | 00588e | 60          |                 rts                  
2856:000 | DONE wsp | em 16 16 |        |             |
2857:000 | DONE wsp | em 16 16 |        |             |
2858:000 | DONE cmt | em 16 16 |        |             | ; -------------------------------------------------------------------
2859:000 | DONE cmt | em 16 16 |        |             | ; DUP  ( n -- n n ) 4 bytes / 9 cycles
2860:000 | DONE cmt | em 16 16 |        |             | ; Duplicate first entry on Data Stack
2861:000 | DONE lbl | em 16 16 | 00588f |             | xt_dup                               
2862:000 | DONE dir | em 16 16 |        |             |         .!xy16                       
2863:000 | DONE ins | em 16 16 | 00588f | ca          |                 dex                  
2864:000 | DONE ins | em 16 16 | 005890 | ca          |                 dex                  
2865:000 | DONE ins | em 16 16 | 005891 | 94 00       |                 sty.dx 00            
2866:000 | DONE wsp | em 16 16 |        |             |
2867:000 | DONE lbl | em 16 16 | 005893 |             | z_dup                                
2867:001 | DONE ins | em 16 16 | 005893 | 60          |                 rts                  
2868:000 | DONE wsp | em 16 16 |        |             |
2869:000 | DONE cmt | em 16 16 |        |             | ; -------------------------------------------------------------------
2870:000 | DONE cmt | em 16 16 |        |             | ; EMIT ( char -- ) X bytes / X cycles
2871:000 | DONE cmt | em 16 16 |        |             | ; Run-time default for EMIT. The user can revector this by changing the value of
2872:000 | DONE cmt | em 16 16 |        |             | ; the OUTPUT variable. We ignore the MSB completely, and do not check to see if
2873:000 | DONE cmt | em 16 16 |        |             | ; we have been given a valid ASCII character. Note that we keep the A register
2874:000 | DONE cmt | em 16 16 |        |             | ; in 16 bit mode all the time - it is up to the kernel routine stored at OUTPUT
2875:000 | DONE cmt | em 16 16 |        |             | ; to deal with that.
2876:000 | DONE lbl | em 16 16 | 005894 |             | xt_emit                              
2877:000 | DONE dir | em 16 16 |        |             |         .!a16                        
2878:000 | DONE cmt | em 16 16 |        |             |                 ; we put the value in A so we don't have to switch the XY
2879:000 | DONE cmt | em 16 16 |        |             |                 ; register size
2880:000 | DONE ins | em 16 16 | 005894 | 98          |                 tya                  
2881:000 | DONE wsp | em 16 16 |        |             |
2882:000 | DONE cmt | em 16 16 |        |             |                 ; we DROP immediately so we can JMP.I to the output routine and
2883:000 | DONE cmt | em 16 16 |        |             |                 ; can use its RTS to take us back to the caller
2884:000 | DONE ins | em 16 16 | 005895 | b4 00       |                 ldy.dx 00            
2885:000 | DONE ins | em 16 16 | 005897 | e8          |                 inx                  
2886:000 | DONE ins | em 16 16 | 005898 | e8          |                 inx                  
2887:000 | DONE lbl | em 16 16 | 005899 |             | emit_a                               
2888:000 | DONE cmt | em 16 16 |        |             |                 ; Lots of times we want to print the character in A without
2889:000 | DONE cmt | em 16 16 |        |             |                 ; fooling around with the Data Stack. EMIT_A assumes a 16 bit
2890:000 | DONE cmt | em 16 16 |        |             |                 ; wide A register with the character in LSB and does not touch
2891:000 | DONE cmt | em 16 16 |        |             |                 ; the Data Stack, but can still be vectored via OUTPUT. Call it
2892:000 | DONE cmt | em 16 16 |        |             |                 ; with JSR as you would XT_EMIT
2893:000 | DONE ins | em 16 16 | 005899 | 6c 0e 00    |                 jmp.i 00000e         call to kernel, JSR/RTS
2894:000 | DONE wsp | em 16 16 |        |             |
2895:000 | DONE lbl | em 16 16 | 00589c |             | z_emit                               ; never reached
2896:000 | DONE wsp | em 16 16 |        |             |
2897:000 | DONE wsp | em 16 16 |        |             |
2898:000 | DONE cmt | em 16 16 |        |             | ; -------------------------------------------------------------------
2899:000 | DONE cmt | em 16 16 |        |             | ; ERASE ( addr u -- ) X bytes / X cycles
2900:000 | DONE cmt | em 16 16 |        |             | ; Set a region of memory to zero. Uses tmp2
2901:000 | DONE lbl | em 16 16 | 00589c |             | xt_erase                             
2902:000 | DONE dir | em 16 16 |        |             |         .!a16                        
2903:000 | DONE ins | em 16 16 | 00589c | ca          |                 dex                  
2904:000 | DONE ins | em 16 16 | 00589d | ca          |                 dex                  
2905:000 | DONE ins | em 16 16 | 00589e | 94 00       |                 sty.dx 00            
2906:000 | DONE wsp | em 16 16 |        |             |
2907:000 | DONE ins | em 16 16 | 0058a0 | a0 00 00    |                 ldy.# 0000           falls through to FILL
2908:000 | DONE wsp | em 16 16 |        |             |
2909:000 | DONE cmt | em 16 16 |        |             | ; -------------------------------------------------------------------
2910:000 | DONE cmt | em 16 16 |        |             | ; FILL ( addr u b -- ) X bytes / X cycles
2911:000 | DONE cmt | em 16 16 |        |             | ; Fill the given region of memory with the LSB of the TOS. Shares code with
2912:000 | DONE cmt | em 16 16 |        |             | ; ERASE
2913:000 | DONE lbl | em 16 16 | 0058a3 |             | xt_fill                              
2914:000 | DONE ins | em 16 16 | 0058a3 | b5 02       |                 lda.dx 02            address is 3OS
2915:000 | DONE ins | em 16 16 | 0058a5 | 85 1e       |                 sta.d 00001e         
2916:000 | DONE wsp | em 16 16 |        |             |
2917:000 | DONE ins | em 16 16 | 0058a7 | 98          |                 tya                  
2918:000 | DONE ins | em 16 16 | 0058a8 | b4 00       |                 ldy.dx 00            don't bother with drop, to it later
2919:000 | DONE ins | em 16 16 | 0058aa | e2 20       |                 sep 20               
2919:001 | DONE ctl | em  8 16 |        |             |         .!a8
2920:000 | DONE lbl | em  8 16 | 0058ac |             | erase_loop                           
2921:000 | DONE ins | em  8 16 | 0058ac | 88          |                 dey                  
2922:000 | DONE ins | em  8 16 | 0058ad | 30 04       |                 bmi 0058b3           
2923:000 | DONE wsp | em  8 16 |        |             |
2924:000 | DONE ins | em  8 16 | 0058af | 91 1e       |                 sta.diy 00001e       
2925:000 | DONE ins | em  8 16 | 0058b1 | 80 f9       |                 bra 0058ac           
2926:000 | DONE wsp | em  8 16 |        |             |
2927:000 | DONE lbl | em  8 16 | 0058b3 |             | erase_done                           
2928:000 | DONE ins | em  8 16 | 0058b3 | c2 20       |                 rep 20               
2928:001 | DONE ctl | em 16 16 |        |             |         .!a16
2929:000 | DONE ins | em 16 16 | 0058b5 | b4 02       |                 ldy.dx 02            dump three elements off the sack
2930:000 | DONE ins | em 16 16 | 0058b7 | 8a          |                 txa                  
2931:000 | DONE ins | em 16 16 | 0058b8 | 18          |                 clc                  
2932:000 | DONE ins | em 16 16 | 0058b9 | 69 06 00    |                 adc.# 0006           
2933:000 | DONE ins | em 16 16 | 0058bc | aa          |                 tax                  
2934:000 | DONE lbl | em 16 16 | 0058bd |             | z_fill                               
2935:000 | DONE lbl | em 16 16 | 0058bd |             | z_erase                              
2935:001 | DONE ins | em 16 16 | 0058bd | 60          |                 rts                  
2936:000 | DONE wsp | em 16 16 |        |             |
2937:000 | DONE wsp | em 16 16 |        |             |
2938:000 | DONE cmt | em 16 16 |        |             | ; -------------------------------------------------------------------
2939:000 | DONE cmt | em 16 16 |        |             | ; EVALUATE ( addr u -- ) X bytes / X cycles
2940:000 | DONE cmt | em 16 16 |        |             | ; Execute string. Set SOURCE-ID to -1, make addr u the input source,
2941:000 | DONE cmt | em 16 16 |        |             | ; set >IN to zero. After processing the line, revert to old input source.
2942:000 | DONE lbl | em 16 16 | 0058be |             | xt_evaluate                          
2943:000 | DONE cmt | em 16 16 |        |             |                 ; We follow pforth's procedure of pushing SOURCE, SOURCE-ID, and
2944:000 | DONE cmt | em 16 16 |        |             |                 ; >IN to the Return Stack
2945:000 | DONE ins | em 16 16 | 0058be | a5 0c       |                 lda.d 00000c         >IN
2946:000 | DONE ins | em 16 16 | 0058c0 | 48          |                 pha                  
2947:000 | DONE ins | em 16 16 | 0058c1 | a5 06       |                 lda.d 000006         Input Source (SOURCE-ID)
2948:000 | DONE ins | em 16 16 | 0058c3 | 48          |                 pha                  
2949:000 | DONE ins | em 16 16 | 0058c4 | a5 08       |                 lda.d 000008         
2950:000 | DONE ins | em 16 16 | 0058c6 | 48          |                 pha                  
2951:000 | DONE ins | em 16 16 | 0058c7 | a5 0a       |                 lda.d 00000a         
2952:000 | DONE ins | em 16 16 | 0058c9 | 48          |                 pha                  
2953:000 | DONE wsp | em 16 16 |        |             |
2954:000 | DONE cmt | em 16 16 |        |             |                 ; set SOURCE-ID to -1
2955:000 | DONE ins | em 16 16 | 0058ca | a9 ff ff    |                 lda.# 0ffff          
2956:000 | DONE ins | em 16 16 | 0058cd | 85 06       |                 sta.d 000006         
2957:000 | DONE wsp | em 16 16 |        |             |
2958:000 | DONE cmt | em 16 16 |        |             |                 ; set >IN to zero
2959:000 | DONE ins | em 16 16 | 0058cf | 64 0c       |                 stz.d 00000c         
2960:000 | DONE wsp | em 16 16 |        |             |
2961:000 | DONE cmt | em 16 16 |        |             |                 ; move TOS and NOS to input buffers
2962:000 | DONE ins | em 16 16 | 0058d1 | 84 0a       |                 sty.d 00000a         
2963:000 | DONE ins | em 16 16 | 0058d3 | b5 00       |                 lda.dx 00            
2964:000 | DONE ins | em 16 16 | 0058d5 | 85 08       |                 sta.d 000008         
2965:000 | DONE wsp | em 16 16 |        |             |
2966:000 | DONE cmt | em 16 16 |        |             |                 ; dump address string from stack
2967:000 | DONE ins | em 16 16 | 0058d7 | b4 02       |                 ldy.dx 02            
2968:000 | DONE ins | em 16 16 | 0058d9 | e8          |                 inx                  
2969:000 | DONE ins | em 16 16 | 0058da | e8          |                 inx                  
2970:000 | DONE ins | em 16 16 | 0058db | e8          |                 inx                  
2971:000 | DONE ins | em 16 16 | 0058dc | e8          |                 inx                  
2972:000 | DONE wsp | em 16 16 |        |             |
2973:000 | DONE ins | em 16 16 | 0058dd | 20 db 68    |                 jsr 0068db           
2974:000 | DONE wsp | em 16 16 |        |             |
2975:000 | DONE cmt | em 16 16 |        |             |                 ; restore state from before evaluate
2976:000 | DONE ins | em 16 16 | 0058e0 | 68          |                 pla                  
2977:000 | DONE ins | em 16 16 | 0058e1 | 85 0a       |                 sta.d 00000a         
2978:000 | DONE ins | em 16 16 | 0058e3 | 68          |                 pla                  
2979:000 | DONE ins | em 16 16 | 0058e4 | 85 08       |                 sta.d 000008         
2980:000 | DONE ins | em 16 16 | 0058e6 | 68          |                 pla                  
2981:000 | DONE ins | em 16 16 | 0058e7 | 85 06       |                 sta.d 000006         
2982:000 | DONE ins | em 16 16 | 0058e9 | 68          |                 pla                  
2983:000 | DONE ins | em 16 16 | 0058ea | 85 0c       |                 sta.d 00000c         
2984:000 | DONE wsp | em 16 16 |        |             |
2985:000 | DONE lbl | em 16 16 | 0058ec |             | z_evaluate                           
2985:001 | DONE ins | em 16 16 | 0058ec | 60          |                 rts                  
2986:000 | DONE wsp | em 16 16 |        |             |
2987:000 | DONE wsp | em 16 16 |        |             |
2988:000 | DONE cmt | em 16 16 |        |             | ; -------------------------------------------------------------------
2989:000 | DONE cmt | em 16 16 |        |             | ; EXECUTE ( xt -- ) X bytes / X cycles
2990:000 | DONE cmt | em 16 16 |        |             | ; Run a word with help of its xt on the TOS
2991:000 | DONE wsp | em 16 16 |        |             |
2992:000 | DONE cmt | em 16 16 |        |             | ; Reserve three bytes for the jump - three in case we want to expand to the full
2993:000 | DONE cmt | em 16 16 |        |             | ; range
2994:000 | DONE cmt | em 16 16 |        |             | ; TODO move this to someplace that is assured to be RAM, not possibly ROM
2995:000 | DONE lbl | em 16 16 | 0058ed |             | execute_ip                           
2995:001 | DONE dir | em 16 16 | 0058ed | (3 bytes)   |         .byte 00, 00, 00             
2995:001 | DONE dir | em 16 16 |        |             |                 00 00 00                 --  . . .
2996:000 | DONE wsp | em 16 16 |        |             |
2997:000 | DONE lbl | em 16 16 | 0058f0 |             | xt_execute                           
2998:000 | DONE dir | em 16 16 |        |             |         .!a16                        
2999:000 | DONE dir | em 16 16 |        |             |         .!xy16                       
3000:000 | DONE cmt | em 16 16 |        |             |                 ; Store the xt for later use and then drop it off the stack
3001:000 | DONE ins | em 16 16 | 0058f0 | 8c ed 58    |                 sty 0058ed           
3002:000 | DONE ins | em 16 16 | 0058f3 | b4 00       |                 ldy.dx 00            
3003:000 | DONE ins | em 16 16 | 0058f5 | e8          |                 inx                  
3004:000 | DONE ins | em 16 16 | 0058f6 | e8          |                 inx                  
3005:000 | DONE wsp | em 16 16 |        |             |
3006:000 | DONE cmt | em 16 16 |        |             |                 ; Only JMP has the addressing mode we need. All our Forth
3007:000 | DONE cmt | em 16 16 |        |             |                 ; words end with a RTS instruction, so they will take us back to
3008:000 | DONE cmt | em 16 16 |        |             |                 ; the original caller of this routine without us having to muck
3009:000 | DONE cmt | em 16 16 |        |             |                 ; about with the Return Stack.
3010:000 | DONE ins | em 16 16 | 0058f7 | 6c ed 58    |                 jmp.i 0058ed         JMP (EXECUTE_IP)
3011:000 | DONE wsp | em 16 16 |        |             |
3012:000 | DONE lbl | em 16 16 | 0058fa |             | z_execute                            ; empty, no RTS required
3013:000 | DONE wsp | em 16 16 |        |             |
3014:000 | DONE wsp | em 16 16 |        |             |
3015:000 | DONE cmt | em 16 16 |        |             | ; -------------------------------------------------------------------
3016:000 | DONE cmt | em 16 16 |        |             | ; FALSE ( -- f ) 7 bytes / 12 cycles
3017:000 | DONE cmt | em 16 16 |        |             | ; Pushes value $0000 for Forth true on Data Stack. This is the same code as for
3018:000 | DONE cmt | em 16 16 |        |             | ; ZERO, see there. Dictionary entry should have xt_zero/z_zero instead of
3019:000 | DONE cmt | em 16 16 |        |             | ; xt_false/z_false
3020:000 | DONE wsp | em 16 16 |        |             |
3021:000 | DONE wsp | em 16 16 |        |             |
3022:000 | DONE cmt | em 16 16 |        |             | ; -------------------------------------------------------------------
3023:000 | DONE cmt | em 16 16 |        |             | ; FIND ( cs-addr -- addr 0 | xt 1 | xt -1 ) X bytes / X cycles
3024:000 | DONE cmt | em 16 16 |        |             | ; Find word in Dictionary. Included for backwards compatibility, Liara Forth
3025:000 | DONE cmt | em 16 16 |        |             | ; follows Gforth by replacing this with FIND-NAME. Counted string either returns
3026:000 | DONE cmt | em 16 16 |        |             | ; address with a fail flag if not found in the Dictionary, or the xt with a flag
3027:000 | DONE cmt | em 16 16 |        |             | ; to indicate if this is immediate or not. FIND is a wrapper around FIND-NAME.
3028:000 | DONE cmt | em 16 16 |        |             | ; See https://www.complang.tuwien.ac.at/forth/gforth/Docs-html/Word-Lists.html
3029:000 | DONE cmt | em 16 16 |        |             | ; and https://www.complang.tuwien.ac.at/forth/gforth/Docs-html/Name-token.html
3030:000 | DONE cmt | em 16 16 |        |             | ; for better solutions.
3031:000 | DONE lbl | em 16 16 | 0058fa |             | xt_find                              
3032:000 | DONE cmt | em 16 16 |        |             |                 ; Convert counted string address to modern format
3033:000 | DONE ins | em 16 16 | 0058fa | 20 13 57    |                 jsr 005713           ( addr u )
3034:000 | DONE wsp | em 16 16 |        |             |
3035:000 | DONE cmt | em 16 16 |        |             |                 ; Save address in case the conversion fails
3036:000 | DONE ins | em 16 16 | 0058fd | b5 00       |                 lda.dx 00            
3037:000 | DONE ins | em 16 16 | 0058ff | 48          |                 pha                  
3038:000 | DONE wsp | em 16 16 |        |             |
3039:000 | DONE ins | em 16 16 | 005900 | 20 2b 59    |                 jsr 00592b           ( nt | 0 )
3040:000 | DONE wsp | em 16 16 |        |             |
3041:000 | DONE ins | em 16 16 | 005903 | 98          |                 tya                  force flag check
3042:000 | DONE ins | em 16 16 | 005904 | d0 0a       |                 bne 005910           
3043:000 | DONE wsp | em 16 16 |        |             |
3044:000 | DONE cmt | em 16 16 |        |             |                 ; No word found. Return the address of the string, leaving 0 as
3045:000 | DONE cmt | em 16 16 |        |             |                 ; a false flag TOS
3046:000 | DONE ins | em 16 16 | 005906 | ca          |                 dex                  ( <?> 0 )
3047:000 | DONE ins | em 16 16 | 005907 | ca          |                 dex                  
3048:000 | DONE ins | em 16 16 | 005908 | a0 00 00    |                 ldy.# 0000           
3049:000 | DONE ins | em 16 16 | 00590b | 68          |                 pla                  
3050:000 | DONE ins | em 16 16 | 00590c | 95 00       |                 sta.dx 00            ( addr 0 )
3051:000 | DONE ins | em 16 16 | 00590e | 80 1a       |                 bra 00592a           
3052:000 | DONE wsp | em 16 16 |        |             |
3053:000 | DONE lbl | em 16 16 | 005910 |             | find_found                           
3054:000 | DONE cmt | em 16 16 |        |             |                 ; We have a nt. Now we have to convert it to the format that
3055:000 | DONE cmt | em 16 16 |        |             |                 ; FIND wants to return Arrive here with ( nt )
3056:000 | DONE ins | em 16 16 | 005910 | 68          |                 pla                  we won't need the address after all
3057:000 | DONE wsp | em 16 16 |        |             |
3058:000 | DONE cmt | em 16 16 |        |             |                 ; We will need the nt later
3059:000 | DONE ins | em 16 16 | 005911 | 5a          |                 phy                  
3060:000 | DONE wsp | em 16 16 |        |             |
3061:000 | DONE ins | em 16 16 | 005912 | 20 07 5b    |                 jsr 005b07           ( nt -- xt )
3062:000 | DONE ins | em 16 16 | 005915 | ca          |                 dex                  
3063:000 | DONE ins | em 16 16 | 005916 | ca          |                 dex                  
3064:000 | DONE ins | em 16 16 | 005917 | 94 00       |                 sty.dx 00            ( xt <?> )
3065:000 | DONE wsp | em 16 16 |        |             |
3066:000 | DONE cmt | em 16 16 |        |             |                 ; If immediate, return 1 (not: zero), else return -1
3067:000 | DONE ins | em 16 16 | 005919 | 7a          |                 ply                  get nt back
3068:000 | DONE ins | em 16 16 | 00591a | b9 00 00    |                 lda.y 0000           
3069:000 | DONE ins | em 16 16 | 00591d | a0 00 00    |                 ldy.# 0000           prepare flag
3070:000 | DONE wsp | em 16 16 |        |             |
3071:000 | DONE ins | em 16 16 | 005920 | eb          |                 xba                  flags are MSB
3072:000 | DONE ins | em 16 16 | 005921 | 29 02 00    |                 and.# IM             Mask all but IM bit
3073:000 | DONE wsp | em 16 16 |        |             |
3074:000 | DONE ins | em 16 16 | 005924 | d0 03       |                 bne 005929           IMMEDIATE word, return 1
3075:000 | DONE ins | em 16 16 | 005926 | 88          |                 dey                  not emmediate, return -1
3076:000 | DONE ins | em 16 16 | 005927 | 80 01       |                 bra 00592a           
3077:000 | DONE wsp | em 16 16 |        |             |
3078:000 | DONE lbl | em 16 16 | 005929 |             | find_imm                             
3079:000 | DONE ins | em 16 16 | 005929 | c8          |                 iny                  
3080:000 | DONE wsp | em 16 16 |        |             |
3081:000 | DONE lbl | em 16 16 | 00592a |             | z_find                               
3081:001 | DONE ins | em 16 16 | 00592a | 60          |                 rts                  
3082:000 | DONE wsp | em 16 16 |        |             |
3083:000 | DONE cmt | em 16 16 |        |             | ; -------------------------------------------------------------------
3084:000 | DONE cmt | em 16 16 |        |             | ; FIND-NAME ( addr u -- nt | 0 ) 91 bytes / X cycles
3085:000 | DONE cmt | em 16 16 |        |             | ; Given a string, find the Name Token (nt) of a word or return zero if the word
3086:000 | DONE cmt | em 16 16 |        |             | ; is not in the dictionary. We use this instead of ancient FIND to look up words
3087:000 | DONE cmt | em 16 16 |        |             | ; in the Dictionary passed by PARSE-NAME. Note this returns the nt, not the xt
3088:000 | DONE cmt | em 16 16 |        |             | ; of a word like FIND. To convert, use NAME>INT. This is a Gforth word. See
3089:000 | DONE cmt | em 16 16 |        |             | ; https://www.complang.tuwien.ac.at/forth/gforth/Docs-html/Name-token.html
3090:000 | DONE cmt | em 16 16 |        |             | ; FIND calls this word for the hard word
3091:000 | DONE lbl | em 16 16 | 00592b |             | xt_find-name                         
3092:000 | DONE cmt | em 16 16 |        |             |                 ; We abort when we get an empty string, that is, one with
3093:000 | DONE cmt | em 16 16 |        |             |                 ; a length of zero TOS. We could test for this, but it will
3094:000 | DONE cmt | em 16 16 |        |             |                 ; happen so rarely that the speed penalty is higher if we run
3095:000 | DONE cmt | em 16 16 |        |             |                 ; the test for every single call. Looking for an empty string
3096:000 | DONE cmt | em 16 16 |        |             |                 ; does force us to check the whole dictionary, though. The test
3097:000 | DONE cmt | em 16 16 |        |             |                 ; would be 3 bytes and 4 to 6 cycles longer:
3098:000 | DONE cmt | em 16 16 |        |             |                 ;       tya                     ; force flag check
3099:000 | DONE cmt | em 16 16 |        |             |                 ;       beq find-name_failure
3100:000 | DONE dir | em 16 16 |        |             |         .!a16                        
3101:000 | DONE dir | em 16 16 |        |             |         .!xy16                       
3102:000 | DONE cmt | em 16 16 |        |             |                 ; set up loop for the first time
3103:000 | DONE ins | em 16 16 | 00592b | 84 24       |                 sty.d 000024         length of mystery string in tmptos, Y now free
3104:000 | DONE wsp | em 16 16 |        |             |
3105:000 | DONE ins | em 16 16 | 00592d | a4 02       |                 ldy.d 000002         
3106:000 | DONE ins | em 16 16 | 00592f | 84 1c       |                 sty.d 00001c         nt of first Dictionary word
3107:000 | DONE wsp | em 16 16 |        |             |
3108:000 | DONE ins | em 16 16 | 005931 | b4 00       |                 ldy.dx 00            
3109:000 | DONE ins | em 16 16 | 005933 | 84 1e       |                 sty.d 00001e         address of mystery string, was NOS
3110:000 | DONE wsp | em 16 16 |        |             |
3111:000 | DONE lbl | em 16 16 | 005935 |             | find-name_loop                       
3112:000 | DONE cmt | em 16 16 |        |             |                 ; First quick test: Are strings the same length?
3113:000 | DONE ins | em 16 16 | 005935 | b2 1c       |                 lda.di 00001c        LSB in first header word is length
3114:000 | DONE ins | em 16 16 | 005937 | 29 ff 00    |                 and.# 00ff           
3115:000 | DONE ins | em 16 16 | 00593a | c5 24       |                 cmp.d 000024         we test LSB
3116:000 | DONE cmt | em 16 16 |        |             |                 ; Most of the time, it will not be the same, so we save one
3117:000 | DONE cmt | em 16 16 |        |             |                 ; cycle pro loop if we only take the branch when they are the
3118:000 | DONE cmt | em 16 16 |        |             |                 ; same
3119:000 | DONE ins | em 16 16 | 00593c | f0 0c       |                 beq 00594a           
3120:000 | DONE wsp | em 16 16 |        |             |
3121:000 | DONE lbl | em 16 16 | 00593e |             | find-name_next_entry                 
3122:000 | DONE cmt | em 16 16 |        |             |                 ; next header address is two bytes down
3123:000 | DONE ins | em 16 16 | 00593e | e6 1c       |                 inc.d 00001c         
3124:000 | DONE ins | em 16 16 | 005940 | e6 1c       |                 inc.d 00001c         
3125:000 | DONE ins | em 16 16 | 005942 | b2 1c       |                 lda.di 00001c        LDA (TMP1)
3126:000 | DONE wsp | em 16 16 |        |             |
3127:000 | DONE cmt | em 16 16 |        |             |                 ; a zero entry marks the end of the Dictionary
3128:000 | DONE ins | em 16 16 | 005944 | f0 36       |                 beq 00597c           
3129:000 | DONE wsp | em 16 16 |        |             |
3130:000 | DONE ins | em 16 16 | 005946 | 85 1c       |                 sta.d 00001c         new header
3131:000 | DONE ins | em 16 16 | 005948 | 80 eb       |                 bra 005935           
3132:000 | DONE wsp | em 16 16 |        |             |
3133:000 | DONE lbl | em 16 16 | 00594a |             | find-name_chars                      
3134:000 | DONE cmt | em 16 16 |        |             |                 ; Yes, same length, so we compare characters
3135:000 | DONE wsp | em 16 16 |        |             |
3136:000 | DONE cmt | em 16 16 |        |             |                 ; Switch A to 8 bit for this
3137:000 | DONE ins | em 16 16 | 00594a | e2 20       |                 sep 20               
3137:001 | DONE ctl | em  8 16 |        |             |         .!a8
3138:000 | DONE cmt | em  8 16 |        |             |                 ; Second quick test: Check first char, which is 8 bytes into the
3139:000 | DONE cmt | em  8 16 |        |             |                 ; header
3140:000 | DONE ins | em  8 16 | 00594c | a0 08 00    |                 ldy.# 0008           
3141:000 | DONE ins | em  8 16 | 00594f | b1 1c       |                 lda.diy 00001c       LDA (TMP1),Y - first char of entry
3142:000 | DONE ins | em  8 16 | 005951 | d2 1e       |                 cmp.di 00001e        CMP (TMP2) - first char of mystery string
3143:000 | DONE ins | em  8 16 | 005953 | f0 04       |                 beq 005959           
3144:000 | DONE wsp | em  8 16 |        |             |
3145:000 | DONE lbl | em  8 16 | 005955 |             | find-name_char_nomatcnt_8            
3146:000 | DONE cmt | em  8 16 |        |             |                 ; First char is not the same, next entry
3147:000 | DONE ins | em  8 16 | 005955 | c2 20       |                 rep 20               
3147:001 | DONE ctl | em 16 16 |        |             |         .!a16
3148:000 | DONE ins | em 16 16 | 005957 | 80 e5       |                 bra 00593e           
3149:000 | DONE wsp | em 16 16 |        |             |
3150:000 | DONE lbl | em 16 16 | 005959 |             | find-name_all_chars                  
3151:000 | DONE dir | em  8 16 |        |             |         .!a8                         
3152:000 | DONE cmt | em  8 16 |        |             |                 ; String length is the same, and the first character is the
3153:000 | DONE cmt | em  8 16 |        |             |                 ; same. If the word is only one character long, we're done
3154:000 | DONE ins | em  8 16 | 005959 | a4 24       |                 ldy.d 000024         
3155:000 | DONE ins | em  8 16 | 00595b | 88          |                 dey                  faster and shorter than CPY.# 01
3156:000 | DONE ins | em  8 16 | 00595c | f0 18       |                 beq 005976           
3157:000 | DONE wsp | em  8 16 |        |             |
3158:000 | DONE cmt | em  8 16 |        |             |                 ; No such luck: The strings are the same length and the first
3159:000 | DONE cmt | em  8 16 |        |             |                 ; char is the same, but the word is more than one char long. So
3160:000 | DONE cmt | em  8 16 |        |             |                 ; we suck it up and compare every single character. We go from
3161:000 | DONE cmt | em  8 16 |        |             |                 ; back to front, because words like CELLS and CELL+ would take
3162:000 | DONE cmt | em  8 16 |        |             |                 ; longer otherwise. We can also shorten the loop by one because
3163:000 | DONE cmt | em  8 16 |        |             |                 ; we've already compared the first char.
3164:000 | DONE wsp | em  8 16 |        |             |
3165:000 | DONE cmt | em  8 16 |        |             |                 ; Even worse, we have to add 8 bytes to address of Dictionary
3166:000 | DONE cmt | em  8 16 |        |             |                 ; string to allow testing with one loop. We need this like
3167:000 | DONE cmt | em  8 16 |        |             |                 ; a hole in the head because we just switched A to 8 bit.
3168:000 | DONE cmt | em  8 16 |        |             |                 ; However, staying with an 8-bit A is even slower.
3169:000 | DONE ins | em  8 16 | 00595e | c2 20       |                 rep 20               
3169:001 | DONE ctl | em 16 16 |        |             |         .!a16
3170:000 | DONE ins | em 16 16 | 005960 | a5 1c       |                 lda.d 00001c         address of Dictionary string
3171:000 | DONE ins | em 16 16 | 005962 | 18          |                 clc                  
3172:000 | DONE ins | em 16 16 | 005963 | 69 08 00    |                 adc.# 0008           
3173:000 | DONE ins | em 16 16 | 005966 | 85 20       |                 sta.d 000020         
3174:000 | DONE ins | em 16 16 | 005968 | e2 20       |                 sep 20               
3174:001 | DONE ctl | em  8 16 |        |             |         .!a8
3175:000 | DONE ins | em  8 16 | 00596a | a4 24       |                 ldy.d 000024         get length of strings as loop index
3176:000 | DONE ins | em  8 16 | 00596c | 88          |                 dey                  first index is length minus 1
3177:000 | DONE wsp | em  8 16 |        |             |
3178:000 | DONE lbl | em  8 16 | 00596d |             | @                                    
3179:000 | DONE ins | em  8 16 | 00596d | b1 1e       |                 lda.diy 00001e       LDA (TMP2),Y - last char of mystery string
3180:000 | DONE ins | em  8 16 | 00596f | d1 20       |                 cmp.diy 000020       CMP (TMP1),Y - last char of DP string
3181:000 | DONE ins | em  8 16 | 005971 | d0 e2       |                 bne 005955           
3182:000 | DONE ins | em  8 16 | 005973 | 88          |                 dey                  start of string (Y=0) was already tested
3183:000 | DONE ins | em  8 16 | 005974 | d0 f7       |                 bne 00596d           
3184:000 | DONE wsp | em  8 16 |        |             |
3185:000 | DONE lbl | em  8 16 | 005976 |             | find-name_success                    
3186:000 | DONE cmt | em  8 16 |        |             |                 ; If we reach here, the strings are the same and we have a match
3187:000 | DONE cmt | em  8 16 |        |             |                 ; We get here with an 8 bit A
3188:000 | DONE ins | em  8 16 | 005976 | c2 20       |                 rep 20               
3188:001 | DONE ctl | em 16 16 |        |             |         .!a16
3189:000 | DONE ins | em 16 16 | 005978 | a4 1c       |                 ldy.d 00001c         get the correct DP
3190:000 | DONE ins | em 16 16 | 00597a | 80 03       |                 bra 00597f           
3191:000 | DONE wsp | em 16 16 |        |             |
3192:000 | DONE wsp | em 16 16 |        |             |
3193:000 | DONE lbl | em 16 16 | 00597c |             | find-name_failure_16                 
3194:000 | DONE cmt | em 16 16 |        |             |                 ; Word not found in Dictionary, return zero. Assumes A is 16
3195:000 | DONE cmt | em 16 16 |        |             |                 ; bit
3196:000 | DONE ins | em 16 16 | 00597c | a0 00 00    |                 ldy.# 0000           fall thru
3197:000 | DONE wsp | em 16 16 |        |             |
3198:000 | DONE lbl | em 16 16 | 00597f |             | find-name_done                       
3199:000 | DONE ins | em 16 16 | 00597f | e8          |                 inx                  drop old address (NIP)
3200:000 | DONE ins | em 16 16 | 005980 | e8          |                 inx                  
3201:000 | DONE wsp | em 16 16 |        |             |
3202:000 | DONE lbl | em 16 16 | 005981 |             | z_find-name                          
3202:001 | DONE ins | em 16 16 | 005981 | 60          |                 rts                  
3203:000 | DONE wsp | em 16 16 |        |             |
3204:000 | DONE wsp | em 16 16 |        |             |
3205:000 | DONE cmt | em 16 16 |        |             | ; -------------------------------------------------------------------
3206:000 | DONE cmt | em 16 16 |        |             | ; FM/MOD ( d n1 -- n2 n3 ) X bytes / X cycles
3207:000 | DONE cmt | em 16 16 |        |             | ; Floored division, compare with SM/REM. We define FM/MOD in terms of UM/MOD,
3208:000 | DONE cmt | em 16 16 |        |             | ; see http://git.savannah.gnu.org/cgit/gforth.git/tree/prim We prefer to use
3209:000 | DONE cmt | em 16 16 |        |             | ; SM/REM for further words. You could also define FM/MOD in Terms of SM/REM,
3210:000 | DONE cmt | em 16 16 |        |             | ; see http://www.figuk.plus.com/build/arith.htm
3211:000 | DONE cmt | em 16 16 |        |             | ; Original Forth: DUP >R DUP 0< IF NEGATE >R DNEGATE R> THEN >R DUP 0< R@ AND +
3212:000 | DONE cmt | em 16 16 |        |             | ; R> UM/MOD R> 0< IF SWAP NEGATE SWAP THEN ;
3213:000 | DONE cmt | em 16 16 |        |             | ; TODO this is just a 1:1 list of jumps, optimize once it is working
3214:000 | DONE lbl | em 16 16 | 005982 |             | xt_fmmod                             
3215:000 | DONE ins | em 16 16 | 005982 | 20 8f 58    |                 jsr 00588f           
3216:000 | DONE ins | em 16 16 | 005985 | 20 c0 51    |                 jsr 0051c0           
3217:000 | DONE ins | em 16 16 | 005988 | 20 8f 58    |                 jsr 00588f           
3218:000 | DONE wsp | em 16 16 |        |             |
3219:000 | DONE ins | em 16 16 | 00598b | 98          |                 tya                  0< IF
3220:000 | DONE ins | em 16 16 | 00598c | 10 12       |                 bpl 0059a0           
3221:000 | DONE wsp | em 16 16 |        |             |
3222:000 | DONE ins | em 16 16 | 00598e | b4 00       |                 ldy.dx 00            
3223:000 | DONE ins | em 16 16 | 005990 | e8          |                 inx                  
3224:000 | DONE ins | em 16 16 | 005991 | e8          |                 inx                  
3225:000 | DONE wsp | em 16 16 |        |             |
3226:000 | DONE ins | em 16 16 | 005992 | 20 32 5b    |                 jsr 005b32           
3227:000 | DONE ins | em 16 16 | 005995 | 20 c0 51    |                 jsr 0051c0           
3228:000 | DONE ins | em 16 16 | 005998 | 20 35 58    |                 jsr 005835           
3229:000 | DONE ins | em 16 16 | 00599b | 20 ae 5c    |                 jsr 005cae           
3230:000 | DONE wsp | em 16 16 |        |             |
3231:000 | DONE ins | em 16 16 | 00599e | 80 04       |                 bra 0059a4           
3232:000 | DONE lbl | em 16 16 | 0059a0 |             | fmmod_1                              
3233:000 | DONE ins | em 16 16 | 0059a0 | b4 00       |                 ldy.dx 00            
3234:000 | DONE ins | em 16 16 | 0059a2 | e8          |                 inx                  
3235:000 | DONE ins | em 16 16 | 0059a3 | e8          |                 inx                  
3236:000 | DONE lbl | em 16 16 | 0059a4 |             | fmmod_1_1                            
3237:000 | DONE ins | em 16 16 | 0059a4 | 20 c0 51    |                 jsr 0051c0           
3238:000 | DONE ins | em 16 16 | 0059a7 | 20 8f 58    |                 jsr 00588f           
3239:000 | DONE ins | em 16 16 | 0059aa | 20 7c 53    |                 jsr 00537c           
3240:000 | DONE ins | em 16 16 | 0059ad | 20 a5 5c    |                 jsr 005ca5           
3241:000 | DONE ins | em 16 16 | 0059b0 | 20 59 55    |                 jsr 005559           
3242:000 | DONE ins | em 16 16 | 0059b3 | 20 29 53    |                 jsr 005329           
3243:000 | DONE ins | em 16 16 | 0059b6 | 20 ae 5c    |                 jsr 005cae           
3244:000 | DONE ins | em 16 16 | 0059b9 | 20 06 5f    |                 jsr 005f06           
3245:000 | DONE ins | em 16 16 | 0059bc | 20 ae 5c    |                 jsr 005cae           
3246:000 | DONE wsp | em 16 16 |        |             |
3247:000 | DONE ins | em 16 16 | 0059bf | 98          |                 tya                  
3248:000 | DONE ins | em 16 16 | 0059c0 | 10 0f       |                 bpl 0059d1           
3249:000 | DONE wsp | em 16 16 |        |             |
3250:000 | DONE ins | em 16 16 | 0059c2 | b4 00       |                 ldy.dx 00            
3251:000 | DONE ins | em 16 16 | 0059c4 | e8          |                 inx                  
3252:000 | DONE ins | em 16 16 | 0059c5 | e8          |                 inx                  
3253:000 | DONE wsp | em 16 16 |        |             |
3254:000 | DONE ins | em 16 16 | 0059c6 | 20 41 5e    |                 jsr 005e41           
3255:000 | DONE ins | em 16 16 | 0059c9 | 20 32 5b    |                 jsr 005b32           
3256:000 | DONE ins | em 16 16 | 0059cc | 20 41 5e    |                 jsr 005e41           
3257:000 | DONE wsp | em 16 16 |        |             |
3258:000 | DONE ins | em 16 16 | 0059cf | 80 04       |                 bra 0059d5           
3259:000 | DONE lbl | em 16 16 | 0059d1 |             | fmmod_2                              
3260:000 | DONE wsp | em 16 16 |        |             |
3261:000 | DONE ins | em 16 16 | 0059d1 | b4 00       |                 ldy.dx 00            
3262:000 | DONE ins | em 16 16 | 0059d3 | e8          |                 inx                  
3263:000 | DONE ins | em 16 16 | 0059d4 | e8          |                 inx                  
3264:000 | DONE wsp | em 16 16 |        |             |
3265:000 | DONE lbl | em 16 16 | 0059d5 |             | fmmod_2_1                            
3266:000 | DONE wsp | em 16 16 |        |             |
3267:000 | DONE lbl | em 16 16 | 0059d5 |             | z_fmmod                              
3267:001 | DONE ins | em 16 16 | 0059d5 | 60          |                 rts                  
3268:000 | DONE wsp | em 16 16 |        |             |
3269:000 | DONE wsp | em 16 16 |        |             |
3270:000 | DONE cmt | em 16 16 |        |             | ; -------------------------------------------------------------------
3271:000 | DONE cmt | em 16 16 |        |             | ; KEY ( -- char ) X bytes / X cycles
3272:000 | DONE cmt | em 16 16 |        |             | ; Get one character from the input, without echoing.
3273:000 | DONE lbl | em 16 16 | 0059d6 |             | xt_key                               
3274:000 | DONE dir | em 16 16 |        |             |         .!a16                        
3275:000 | DONE wsp | em 16 16 |        |             |
3276:000 | DONE ins | em 16 16 | 0059d6 | ca          |                 dex                  make room on Data Stack
3277:000 | DONE ins | em 16 16 | 0059d7 | ca          |                 dex                  
3278:000 | DONE ins | em 16 16 | 0059d8 | b4 00       |                 ldy.dx 00            
3279:000 | DONE wsp | em 16 16 |        |             |
3280:000 | DONE cmt | em 16 16 |        |             |                 ; There is no "jsr.i" instruction, so we have to do this the
3281:000 | DONE cmt | em 16 16 |        |             |                 ; hard way
3282:000 | DONE ins | em 16 16 | 0059da | 86 22       |                 stx.d 000022         
3283:000 | DONE ins | em 16 16 | 0059dc | a2 00 00    |                 ldx.# 0000           
3284:000 | DONE ins | em 16 16 | 0059df | fc 10 00    |                 jsr.xi 000010        JSR (INPUT,X) - returns char in A
3285:000 | DONE ins | em 16 16 | 0059e2 | a6 22       |                 ldx.d 000022         
3286:000 | DONE wsp | em 16 16 |        |             |
3287:000 | DONE ins | em 16 16 | 0059e4 | a8          |                 tay                  
3288:000 | DONE wsp | em 16 16 |        |             |
3289:000 | DONE lbl | em 16 16 | 0059e5 |             | z_key                                ; never reached
3290:000 | DONE wsp | em 16 16 |        |             |
3291:000 | DONE wsp | em 16 16 |        |             |
3292:000 | DONE cmt | em 16 16 |        |             | ; -------------------------------------------------------------------
3293:000 | DONE cmt | em 16 16 |        |             | ; IMMEDIATE ( -- ) X bytes / X cycles
3294:000 | DONE cmt | em 16 16 |        |             | ; Mark the most recently defined word as IMMEDIATE. Will only affect the last
3295:000 | DONE cmt | em 16 16 |        |             | ; word in the Dictionary. If the words is still in ROM for some reason, this
3296:000 | DONE cmt | em 16 16 |        |             | ; will have no effect and will fail without an error message
3297:000 | DONE lbl | em 16 16 | 0059e5 |             | xt_immediate                         
3298:000 | DONE dir | em 16 16 |        |             |         .!a16                        
3299:000 | DONE ins | em 16 16 | 0059e5 | a9 02 00    |                 lda.# IM             Immediate flag
3300:000 | DONE ins | em 16 16 | 0059e8 | eb          |                 xba                  flags are MSB
3301:000 | DONE ins | em 16 16 | 0059e9 | 12 02       |                 ora.di 000002        ORA (DP)
3302:000 | DONE ins | em 16 16 | 0059eb | 92 02       |                 sta.di 000002        
3303:000 | DONE wsp | em 16 16 |        |             |
3304:000 | DONE lbl | em 16 16 | 0059ed |             | z_immediate                          
3304:001 | DONE ins | em 16 16 | 0059ed | 60          |                 rts                  
3305:000 | DONE wsp | em 16 16 |        |             |
3306:000 | DONE wsp | em 16 16 |        |             |
3307:000 | DONE cmt | em 16 16 |        |             | ; -------------------------------------------------------------------
3308:000 | DONE cmt | em 16 16 |        |             | ; INPUT ( -- addr ) X bytes / X cycles
3309:000 | DONE cmt | em 16 16 |        |             | ; Return the address where the jump targeet for KEY is stored
3310:000 | DONE lbl | em 16 16 | 0059ee |             | xt_input                             
3311:000 | DONE ins | em 16 16 | 0059ee | ca          |                 dex                  
3312:000 | DONE ins | em 16 16 | 0059ef | ca          |                 dex                  
3313:000 | DONE ins | em 16 16 | 0059f0 | 94 00       |                 sty.dx 00            
3314:000 | DONE wsp | em 16 16 |        |             |
3315:000 | DONE ins | em 16 16 | 0059f2 | a0 10 00    |                 ldy.# 000010         
3316:000 | DONE wsp | em 16 16 |        |             |
3317:000 | DONE lbl | em 16 16 | 0059f5 |             | z_input                              
3317:001 | DONE ins | em 16 16 | 0059f5 | 60          |                 rts                  
3318:000 | DONE wsp | em 16 16 |        |             |
3319:000 | DONE wsp | em 16 16 |        |             |
3320:000 | DONE cmt | em 16 16 |        |             | ; -------------------------------------------------------------------
3321:000 | DONE cmt | em 16 16 |        |             | ; INT>NAME ( xt -- nt ) X bytes / X cycles
3322:000 | DONE cmt | em 16 16 |        |             | ; Given an execution token (xt), return the name token (nt). This is called
3323:000 | DONE cmt | em 16 16 |        |             | ; >NAME in Gforth, but changed to INT>NAME for Liara to fit better with
3324:000 | DONE cmt | em 16 16 |        |             | ; NAME>INT.
3325:000 | DONE lbl | em 16 16 | 0059f6 |             | xt_int-name                          
3326:000 | DONE cmt | em 16 16 |        |             |                 ; Unfortunately, to find the header, we have to walk through the
3327:000 | DONE cmt | em 16 16 |        |             |                 ; dictionary
3328:000 | DONE ins | em 16 16 | 0059f6 | a5 02       |                 lda.d 000002         nt of first Dictionary word
3329:000 | DONE ins | em 16 16 | 0059f8 | 85 1c       |                 sta.d 00001c         
3330:000 | DONE wsp | em 16 16 |        |             |
3331:000 | DONE ins | em 16 16 | 0059fa | 84 24       |                 sty.d 000024         xt of mystery word
3332:000 | DONE ins | em 16 16 | 0059fc | a0 04 00    |                 ldy.# 0004           xt in header is two bytes down
3333:000 | DONE wsp | em 16 16 |        |             |
3334:000 | DONE lbl | em 16 16 | 0059ff |             | in_loop                              
3335:000 | DONE ins | em 16 16 | 0059ff | b1 1c       |                 lda.diy 00001c       LDA (TMP1),Y - get xt of current nt
3336:000 | DONE ins | em 16 16 | 005a01 | c5 24       |                 cmp.d 000024         
3337:000 | DONE ins | em 16 16 | 005a03 | f0 12       |                 beq 005a17           
3338:000 | DONE wsp | em 16 16 |        |             |
3339:000 | DONE cmt | em 16 16 |        |             |                 ; no joy, next header address is two bytes down
3340:000 | DONE ins | em 16 16 | 005a05 | e6 1c       |                 inc.d 00001c         
3341:000 | DONE ins | em 16 16 | 005a07 | e6 1c       |                 inc.d 00001c         
3342:000 | DONE ins | em 16 16 | 005a09 | b2 1c       |                 lda.di 00001c        LDA (TMP1)
3343:000 | DONE wsp | em 16 16 |        |             |
3344:000 | DONE cmt | em 16 16 |        |             |                 ; a zero entry marks the end of the Dictionary
3345:000 | DONE ins | em 16 16 | 005a0b | f0 04       |                 beq 005a11           
3346:000 | DONE wsp | em 16 16 |        |             |
3347:000 | DONE ins | em 16 16 | 005a0d | 85 1c       |                 sta.d 00001c         new header
3348:000 | DONE ins | em 16 16 | 005a0f | 80 ee       |                 bra 0059ff           
3349:000 | DONE wsp | em 16 16 |        |             |
3350:000 | DONE lbl | em 16 16 | 005a11 |             | in_notfound                          
3351:000 | DONE ins | em 16 16 | 005a11 | a9 ef 70    |                 lda.# 0070ef         
3352:000 | DONE ins | em 16 16 | 005a14 | 4c 60 69    |                 jmp 006960           
3353:000 | DONE wsp | em 16 16 |        |             |
3354:000 | DONE lbl | em 16 16 | 005a17 |             | in_found                             
3355:000 | DONE ins | em 16 16 | 005a17 | a4 1c       |                 ldy.d 00001c         replace xt by nt
3356:000 | DONE lbl | em 16 16 | 005a19 |             | z_int-name                           
3356:001 | DONE ins | em 16 16 | 005a19 | 60          |                 rts                  
3357:000 | DONE wsp | em 16 16 |        |             |
3358:000 | DONE wsp | em 16 16 |        |             |
3359:000 | DONE cmt | em 16 16 |        |             | ; -------------------------------------------------------------------
3360:000 | DONE cmt | em 16 16 |        |             | ; INVERT ( n -- n ) 5 bytes / X cycles
3361:000 | DONE cmt | em 16 16 |        |             | ; Complement of TOS
3362:000 | DONE lbl | em 16 16 | 005a1a |             | xt_invert                            
3363:000 | DONE dir | em 16 16 |        |             |         .!a16                        
3364:000 | DONE ins | em 16 16 | 005a1a | 98          |                 tya                  
3365:000 | DONE ins | em 16 16 | 005a1b | 49 ff ff    |                 eor.# 0ffff          
3366:000 | DONE ins | em 16 16 | 005a1e | a8          |                 tay                  
3367:000 | DONE wsp | em 16 16 |        |             |
3368:000 | DONE lbl | em 16 16 | 005a1f |             | z_invert                             
3368:001 | DONE ins | em 16 16 | 005a1f | 60          |                 rts                  
3369:000 | DONE wsp | em 16 16 |        |             |
3370:000 | DONE wsp | em 16 16 |        |             |
3371:000 | DONE cmt | em 16 16 |        |             | ; -------------------------------------------------------------------
3372:000 | DONE cmt | em 16 16 |        |             | ; HERE ( -- u ) 6 bytes / 13 cycles
3373:000 | DONE cmt | em 16 16 |        |             | ; Push Compiler Pointer address on the Data Stack
3374:000 | DONE lbl | em 16 16 | 005a20 |             | xt_here                              
3375:000 | DONE dir | em 16 16 |        |             |         .!xy16                       
3376:000 | DONE ins | em 16 16 | 005a20 | ca          |                 dex                  
3377:000 | DONE ins | em 16 16 | 005a21 | ca          |                 dex                  
3378:000 | DONE ins | em 16 16 | 005a22 | 94 00       |                 sty.dx 00            
3379:000 | DONE wsp | em 16 16 |        |             |
3380:000 | DONE ins | em 16 16 | 005a24 | a4 00       |                 ldy.d 000000         
3381:000 | DONE wsp | em 16 16 |        |             |
3382:000 | DONE lbl | em 16 16 | 005a26 |             | z_here                               
3382:001 | DONE ins | em 16 16 | 005a26 | 60          |                 rts                  
3383:000 | DONE wsp | em 16 16 |        |             |
3384:000 | DONE cmt | em 16 16 |        |             | ; -------------------------------------------------------------------
3385:000 | DONE cmt | em 16 16 |        |             | ; HEX ( -- ) X bytes / X cycles
3386:000 | DONE cmt | em 16 16 |        |             | ; Change radix for number conversion to 16
3387:000 | DONE lbl | em 16 16 | 005a27 |             | xt_hex                               
3388:000 | DONE dir | em 16 16 |        |             |         .!a16                        
3389:000 | DONE ins | em 16 16 | 005a27 | a9 10 00    |                 lda.# 0010           
3390:000 | DONE ins | em 16 16 | 005a2a | 85 16       |                 sta.d 000016         
3391:000 | DONE wsp | em 16 16 |        |             |
3392:000 | DONE lbl | em 16 16 | 005a2c |             | z_hex                                
3392:001 | DONE ins | em 16 16 | 005a2c | 60          |                 rts                  
3393:000 | DONE wsp | em 16 16 |        |             |
3394:000 | DONE cmt | em 16 16 |        |             | ; -------------------------------------------------------------------
3395:000 | DONE cmt | em 16 16 |        |             | ; HOLD ( char -- ) X bytes / X cycles
3396:000 | DONE cmt | em 16 16 |        |             | ; Insert a character at the current position of a pictured numeric output string
3397:000 | DONE cmt | em 16 16 |        |             | ; Code based on https://github.com/philburk/pforth/blob/master/fth/numberio.fth
3398:000 | DONE cmt | em 16 16 |        |             | ; Forth code is : HOLD  -1 HLD +!  HLD @ C! ;  We use the the internal variable
3399:000 | DONE cmt | em 16 16 |        |             | ; tohold instead of HLD.
3400:000 | DONE lbl | em 16 16 | 005a2d |             | xt_hold                              
3401:000 | DONE dir | em 16 16 |        |             |         .!a16                        
3402:000 | DONE ins | em 16 16 | 005a2d | c6 18       |                 dec.d 000018         -1 HLD +!
3403:000 | DONE wsp | em 16 16 |        |             |
3404:000 | DONE ins | em 16 16 | 005a2f | 98          |                 tya                  
3405:000 | DONE ins | em 16 16 | 005a30 | e2 20       |                 sep 20               
3405:001 | DONE ctl | em  8 16 |        |             |         .!a8
3406:000 | DONE ins | em  8 16 | 005a32 | 92 18       |                 sta.di 000018        STA (TOHOLD)
3407:000 | DONE ins | em  8 16 | 005a34 | c2 20       |                 rep 20               
3407:001 | DONE ctl | em 16 16 |        |             |         .!a16
3408:000 | DONE ins | em 16 16 | 005a36 | b4 00       |                 ldy.dx 00            
3409:000 | DONE ins | em 16 16 | 005a38 | e8          |                 inx                  
3410:000 | DONE ins | em 16 16 | 005a39 | e8          |                 inx                  
3411:000 | DONE wsp | em 16 16 |        |             |
3412:000 | DONE lbl | em 16 16 | 005a3a |             | z_hold                               
3412:001 | DONE ins | em 16 16 | 005a3a | 60          |                 rts                  
3413:000 | DONE wsp | em 16 16 |        |             |
3414:000 | DONE cmt | em 16 16 |        |             | ; -------------------------------------------------------------------
3415:000 | DONE cmt | em 16 16 |        |             | ; LATESTNT ( -- nt ) 7 bytes / X cycles
3416:000 | DONE cmt | em 16 16 |        |             | ; Return the name token (nt) of the last word in the Dictionary. The Gforth
3417:000 | DONE cmt | em 16 16 |        |             | ; version of this word is called LATEST.
3418:000 | DONE lbl | em 16 16 | 005a3b |             | xt_latestnt                          
3419:000 | DONE dir | em 16 16 |        |             |         .!a16                        
3420:000 | DONE ins | em 16 16 | 005a3b | ca          |                 dex                  make room on Data Stack
3421:000 | DONE ins | em 16 16 | 005a3c | ca          |                 dex                  
3422:000 | DONE ins | em 16 16 | 005a3d | 94 00       |                 sty.dx 00            
3423:000 | DONE wsp | em 16 16 |        |             |
3424:000 | DONE ins | em 16 16 | 005a3f | a5 02       |                 lda.d 000002         
3425:000 | DONE ins | em 16 16 | 005a41 | a8          |                 tay                  
3426:000 | DONE wsp | em 16 16 |        |             |
3427:000 | DONE lbl | em 16 16 | 005a42 |             | z_latestnt                           
3427:001 | DONE ins | em 16 16 | 005a42 | 60          |                 rts                  
3428:000 | DONE wsp | em 16 16 |        |             |
3429:000 | DONE wsp | em 16 16 |        |             |
3430:000 | DONE cmt | em 16 16 |        |             | ; -------------------------------------------------------------------
3431:000 | DONE cmt | em 16 16 |        |             | ; LATESTXT ( -- xt ) 11 bytes / X cycles
3432:000 | DONE cmt | em 16 16 |        |             | ; Return the name token (xt) of the last word in the Dictionary. This is simply
3433:000 | DONE cmt | em 16 16 |        |             | ; LATESTNT but four bytes down and with a FETCH
3434:000 | DONE lbl | em 16 16 | 005a43 |             | xt_latestxt                          
3435:000 | DONE dir | em 16 16 |        |             |         .!a16                        
3436:000 | DONE ins | em 16 16 | 005a43 | ca          |                 dex                  make room on Data Stack
3437:000 | DONE ins | em 16 16 | 005a44 | ca          |                 dex                  
3438:000 | DONE ins | em 16 16 | 005a45 | 94 00       |                 sty.dx 00            
3439:000 | DONE wsp | em 16 16 |        |             |
3440:000 | DONE ins | em 16 16 | 005a47 | a5 02       |                 lda.d 000002         
3441:000 | DONE wsp | em 16 16 |        |             |
3442:000 | DONE ins | em 16 16 | 005a49 | 18          |                 clc                  xt is stored four bytes below nt in header
3443:000 | DONE ins | em 16 16 | 005a4a | 69 04 00    |                 adc.# 0004           
3444:000 | DONE ins | em 16 16 | 005a4d | a8          |                 tay                  
3445:000 | DONE wsp | em 16 16 |        |             |
3446:000 | DONE ins | em 16 16 | 005a4e | b9 00 00    |                 lda.y 0000           FETCH
3447:000 | DONE ins | em 16 16 | 005a51 | a8          |                 tay                  
3448:000 | DONE wsp | em 16 16 |        |             |
3449:000 | DONE lbl | em 16 16 | 005a52 |             | z_latestxt                           
3449:001 | DONE ins | em 16 16 | 005a52 | 60          |                 rts                  
3450:000 | DONE wsp | em 16 16 |        |             |
3451:000 | DONE wsp | em 16 16 |        |             |
3452:000 | DONE cmt | em 16 16 |        |             | ; -------------------------------------------------------------------
3453:000 | DONE cmt | em 16 16 |        |             | ; LITERAL ( n -- ) X bytes / X cycles
3454:000 | DONE cmt | em 16 16 |        |             | ; Compile-only word to store TOS so that it is pushed on stack during runtime.
3455:000 | DONE cmt | em 16 16 |        |             | ; This is a immediate, compile-only word. Test it with  : AAA [ 1 ] LITERAL ;
3456:000 | DONE cmt | em 16 16 |        |             | ; for instance
3457:000 | DONE lbl | em 16 16 | 005a53 |             | xt_literal                           
3458:000 | DONE cmt | em 16 16 |        |             |                 ; During runtime, we call the routine at the bottom by compiling
3459:000 | DONE cmt | em 16 16 |        |             |                 ; JSR LITERAL_RT. Note the cmpl_ routines use tmptos
3460:000 | DONE ins | em 16 16 | 005a53 | f4 65 5a    |                 phe.# 005a65         PEA LITERAL_RT
3461:000 | DONE ins | em 16 16 | 005a56 | 20 3f 69    |                 jsr 00693f           
3462:000 | DONE wsp | em 16 16 |        |             |
3463:000 | DONE cmt | em 16 16 |        |             |                 ; compile the value that is to be pushed to the Data Stack at
3464:000 | DONE cmt | em 16 16 |        |             |                 ; runtime. There is no "sty.di", so we have to do this the hard
3465:000 | DONE cmt | em 16 16 |        |             |                 ; way. This is basically , ("comma")
3466:000 | DONE ins | em 16 16 | 005a59 | 98          |                 tya                  
3467:000 | DONE ins | em 16 16 | 005a5a | 92 00       |                 sta.di 000000        
3468:000 | DONE ins | em 16 16 | 005a5c | e6 00       |                 inc.d 000000         
3469:000 | DONE ins | em 16 16 | 005a5e | e6 00       |                 inc.d 000000         
3470:000 | DONE wsp | em 16 16 |        |             |
3471:000 | DONE ins | em 16 16 | 005a60 | b4 00       |                 ldy.dx 00            DROP
3472:000 | DONE ins | em 16 16 | 005a62 | e8          |                 inx                  
3473:000 | DONE ins | em 16 16 | 005a63 | e8          |                 inx                  
3474:000 | DONE wsp | em 16 16 |        |             |
3475:000 | DONE lbl | em 16 16 | 005a64 |             | z_literal                            
3475:001 | DONE ins | em 16 16 | 005a64 | 60          |                 rts                  
3476:000 | DONE wsp | em 16 16 |        |             |
3477:000 | DONE lbl | em 16 16 | 005a65 |             | literal_rt                           
3478:000 | DONE cmt | em 16 16 |        |             |                 ; During runtime, we push the value following this word
3479:000 | DONE cmt | em 16 16 |        |             |                 ; back on the Data Stack. The subroutine jump that brought us
3480:000 | DONE cmt | em 16 16 |        |             |                 ; here put the address to return to on the Return Stack - this
3481:000 | DONE cmt | em 16 16 |        |             |                 ; points to the data we need to get
3482:000 | DONE wsp | em 16 16 |        |             |
3483:000 | DONE cmt | em 16 16 |        |             |                 ; Make room on Data Stack, Y now free to use
3484:000 | DONE ins | em 16 16 | 005a65 | ca          |                 dex                  
3485:000 | DONE ins | em 16 16 | 005a66 | ca          |                 dex                  
3486:000 | DONE ins | em 16 16 | 005a67 | 94 00       |                 sty.dx 00            
3487:000 | DONE wsp | em 16 16 |        |             |
3488:000 | DONE cmt | em 16 16 |        |             |                 ; The 65816 stores (<RETURN-ADDRESS> - 1) on the Return Stack
3489:000 | DONE cmt | em 16 16 |        |             |                 ; so we have to manipulate the address
3490:000 | DONE ins | em 16 16 | 005a69 | 7a          |                 ply                  
3491:000 | DONE ins | em 16 16 | 005a6a | c8          |                 iny                  
3492:000 | DONE ins | em 16 16 | 005a6b | b9 00 00    |                 lda.y 0000           LDA $0000,Y - get value after jump
3493:000 | DONE wsp | em 16 16 |        |             |
3494:000 | DONE ins | em 16 16 | 005a6e | c8          |                 iny                  move return address past data and restore
3495:000 | DONE ins | em 16 16 | 005a6f | 5a          |                 phy                  so we can get back home
3496:000 | DONE wsp | em 16 16 |        |             |
3497:000 | DONE ins | em 16 16 | 005a70 | a8          |                 tay                  Value is now on the Data Stack ( -- n )
3498:000 | DONE wsp | em 16 16 |        |             |
3499:000 | DONE ins | em 16 16 | 005a71 | 60          |                 rts                  
3500:000 | DONE wsp | em 16 16 |        |             |
3501:000 | DONE wsp | em 16 16 |        |             |
3502:000 | DONE cmt | em 16 16 |        |             | ; -------------------------------------------------------------------
3503:000 | DONE cmt | em 16 16 |        |             | ; LSHIFT ( n u -- n ) X bytes / X cycles
3504:000 | DONE cmt | em 16 16 |        |             | ; Logically shift TOS u times to the left, adding zeros to the right
3505:000 | DONE lbl | em 16 16 | 005a72 |             | xt_lshift                            
3506:000 | DONE cmt | em 16 16 |        |             |                 ; We shift at most 16 bits, because anything above that will be
3507:000 | DONE cmt | em 16 16 |        |             |                 ; zeros anyway
3508:000 | DONE ins | em 16 16 | 005a72 | 98          |                 tya                  
3509:000 | DONE ins | em 16 16 | 005a73 | 29 0f 00    |                 and.# 000f           
3510:000 | DONE ins | em 16 16 | 005a76 | f0 09       |                 beq 005a81           if zero shifts, we're done
3511:000 | DONE wsp | em 16 16 |        |             |
3512:000 | DONE ins | em 16 16 | 005a78 | a8          |                 tay                  number of shifts is TOS
3513:000 | DONE ins | em 16 16 | 005a79 | b5 00       |                 lda.dx 00            number is in NOS
3514:000 | DONE lbl | em 16 16 | 005a7b |             | lshift_loop                          
3515:000 | DONE ins | em 16 16 | 005a7b | 0a          |                 asl.a                
3516:000 | DONE ins | em 16 16 | 005a7c | 88          |                 dey                  
3517:000 | DONE ins | em 16 16 | 005a7d | d0 fc       |                 bne 005a7b           
3518:000 | DONE wsp | em 16 16 |        |             |
3519:000 | DONE ins | em 16 16 | 005a7f | 95 00       |                 sta.dx 00            put NOS, which last step will pull up
3520:000 | DONE wsp | em 16 16 |        |             |
3521:000 | DONE lbl | em 16 16 | 005a81 |             | lshift_done                          
3522:000 | DONE ins | em 16 16 | 005a81 | b4 00       |                 ldy.dx 00            
3523:000 | DONE ins | em 16 16 | 005a83 | e8          |                 inx                  
3524:000 | DONE ins | em 16 16 | 005a84 | e8          |                 inx                  
3525:000 | DONE wsp | em 16 16 |        |             |
3526:000 | DONE lbl | em 16 16 | 005a85 |             | z_lshift                             
3526:001 | DONE ins | em 16 16 | 005a85 | 60          |                 rts                  
3527:000 | DONE wsp | em 16 16 |        |             |
3528:000 | DONE wsp | em 16 16 |        |             |
3529:000 | DONE cmt | em 16 16 |        |             | ; -------------------------------------------------------------------
3530:000 | DONE cmt | em 16 16 |        |             | ; M* "MSTAR" ( n n -- d ) 16*16 -> 32  X bytes / X cycles
3531:000 | DONE cmt | em 16 16 |        |             | ; Multiply two 16 bit numbers, producing a 32 bit result. All values are signed.
3532:000 | DONE cmt | em 16 16 |        |             | ; This was originally adapted from FIG Forth for Tali Forth. The original Forth
3533:000 | DONE cmt | em 16 16 |        |             | ; code is : M* OVER OVER XOR >R ABS SWAP ABS UM* R> D+- ;  with
3534:000 | DONE cmt | em 16 16 |        |             | ; : D+- O< IF DNEGATE THEN ;
3535:000 | DONE cmt | em 16 16 |        |             | ; TODO Test this more once we have the Double words etc all working
3536:000 | DONE lbl | em 16 16 | 005a86 |             | xt_mstar                             
3537:000 | DONE dir | em 16 16 |        |             |         .!a16                        
3538:000 | DONE cmt | em 16 16 |        |             |                 ; figure out the sign
3539:000 | DONE ins | em 16 16 | 005a86 | 98          |                 tya                  
3540:000 | DONE ins | em 16 16 | 005a87 | 55 00       |                 eor.dx 00            
3541:000 | DONE wsp | em 16 16 |        |             |
3542:000 | DONE cmt | em 16 16 |        |             |                 ; um* uses all kinds of tmp stuff so we don't risk a conflict
3543:000 | DONE cmt | em 16 16 |        |             |                 ; and just take the cycle hit by pushing this to the stack
3544:000 | DONE ins | em 16 16 | 005a89 | 48          |                 pha                  
3545:000 | DONE wsp | em 16 16 |        |             |
3546:000 | DONE cmt | em 16 16 |        |             |                 ; get the absolute value of both numbers so we can feed them to
3547:000 | DONE cmt | em 16 16 |        |             |                 ; UM*, which does the real work
3548:000 | DONE ins | em 16 16 | 005a8a | 98          |                 tya                  
3549:000 | DONE ins | em 16 16 | 005a8b | 10 05       |                 bpl 005a92           
3550:000 | DONE wsp | em 16 16 |        |             |
3551:000 | DONE cmt | em 16 16 |        |             |                 ; TOS is negative so we have to ABS it
3552:000 | DONE ins | em 16 16 | 005a8d | 49 ff ff    |                 eor.# 0ffff          
3553:000 | DONE ins | em 16 16 | 005a90 | 1a          |                 inc.a                
3554:000 | DONE ins | em 16 16 | 005a91 | a8          |                 tay                  
3555:000 | DONE wsp | em 16 16 |        |             |
3556:000 | DONE lbl | em 16 16 | 005a92 |             | mstar_abs_nos                        
3557:000 | DONE ins | em 16 16 | 005a92 | b5 00       |                 lda.dx 00            
3558:000 | DONE ins | em 16 16 | 005a94 | 10 06       |                 bpl 005a9c           
3559:000 | DONE wsp | em 16 16 |        |             |
3560:000 | DONE cmt | em 16 16 |        |             |                 ; NOS is negative so we have to ABS it
3561:000 | DONE ins | em 16 16 | 005a96 | 49 ff ff    |                 eor.# 0ffff          
3562:000 | DONE ins | em 16 16 | 005a99 | 1a          |                 inc.a                
3563:000 | DONE ins | em 16 16 | 005a9a | 95 00       |                 sta.dx 00            
3564:000 | DONE wsp | em 16 16 |        |             |
3565:000 | DONE lbl | em 16 16 | 005a9c |             | mstar_umstar                         
3566:000 | DONE ins | em 16 16 | 005a9c | 20 a7 5e    |                 jsr 005ea7           now ( d ) on stack
3567:000 | DONE wsp | em 16 16 |        |             |
3568:000 | DONE cmt | em 16 16 |        |             |                 ; handle the sign
3569:000 | DONE ins | em 16 16 | 005a9f | 68          |                 pla                  
3570:000 | DONE wsp | em 16 16 |        |             |
3571:000 | DONE cmt | em 16 16 |        |             |                 ; postive, we don't have to care
3572:000 | DONE ins | em 16 16 | 005aa0 | 10 03       |                 bpl 005aa5           
3573:000 | DONE wsp | em 16 16 |        |             |
3574:000 | DONE ins | em 16 16 | 005aa2 | 20 35 58    |                 jsr 005835           
3575:000 | DONE wsp | em 16 16 |        |             |
3576:000 | DONE lbl | em 16 16 | 005aa5 |             | z_mstar                              
3576:001 | DONE ins | em 16 16 | 005aa5 | 60          |                 rts                  
3577:000 | DONE wsp | em 16 16 |        |             |
3578:000 | DONE wsp | em 16 16 |        |             |
3579:000 | DONE cmt | em 16 16 |        |             | ; -------------------------------------------------------------------
3580:000 | DONE cmt | em 16 16 |        |             | ; MARKER ( "name" -- ) X bytes / X cycles
3581:000 | DONE cmt | em 16 16 |        |             | ; Create a deletion boundry, restoring the Dictionary to an earlier state. This
3582:000 | DONE cmt | em 16 16 |        |             | ; replaces FORGET in earlier Forths. Old entries are not actually deleted, but
3583:000 | DONE cmt | em 16 16 |        |             | ; merely overwritten by restoring CP and DP.
3584:000 | DONE lbl | em 16 16 | 005aa6 |             | xt_marker                            
3585:000 | DONE cmt | em 16 16 |        |             |                 ; This is a defining word
3586:000 | DONE ins | em 16 16 | 005aa6 | 20 27 57    |                 jsr 005727           
3587:000 | DONE wsp | em 16 16 |        |             |
3588:000 | DONE cmt | em 16 16 |        |             |                 ; Add the current DP as a payload - the DP of the marker itself
3589:000 | DONE cmt | em 16 16 |        |             |                 ; TODO see if it doesn't make more sense to add nt_ of the previous
3590:000 | DONE cmt | em 16 16 |        |             |                 ; word
3591:000 | DONE ins | em 16 16 | 005aa9 | a5 02       |                 lda.d 000002         
3592:000 | DONE ins | em 16 16 | 005aab | 92 00       |                 sta.di 000000        STA (CP)
3593:000 | DONE ins | em 16 16 | 005aad | e6 00       |                 inc.d 000000         
3594:000 | DONE ins | em 16 16 | 005aaf | e6 00       |                 inc.d 000000         
3595:000 | DONE wsp | em 16 16 |        |             |
3596:000 | DONE cmt | em 16 16 |        |             |                 ; DOES> by hand: Add runtime behavior and DODOES routine
3597:000 | DONE ins | em 16 16 | 005ab1 | 20 56 58    |                 jsr 005856           
3598:000 | DONE ins | em 16 16 | 005ab4 | 20 c7 68    |                 jsr 0068c7           
3599:000 | DONE wsp | em 16 16 |        |             |
3600:000 | DONE cmt | em 16 16 |        |             |                 ; DOES> payload
3601:000 | DONE ins | em 16 16 | 005ab7 | 20 da 52    |                 jsr 0052da           ( nt )
3602:000 | DONE wsp | em 16 16 |        |             |
3603:000 | DONE cmt | em 16 16 |        |             |                 ; We now have the DP of the marker itself on the stack, but we
3604:000 | DONE cmt | em 16 16 |        |             |                 ; need the DP of the previous word. That is two bytes down
3605:000 | DONE ins | em 16 16 | 005aba | 84 20       |                 sty.d 000020         
3606:000 | DONE ins | em 16 16 | 005abc | a0 02 00    |                 ldy.# 0002           overwrite TOS, won't be needing it
3607:000 | DONE ins | em 16 16 | 005abf | b1 20       |                 lda.diy 000020       LDA (TMP3),Y
3608:000 | DONE ins | em 16 16 | 005ac1 | 85 02       |                 sta.d 000002         
3609:000 | DONE wsp | em 16 16 |        |             |
3610:000 | DONE cmt | em 16 16 |        |             |                 ; Adjust the CP, which is one byte after the z_ address of the
3611:000 | DONE cmt | em 16 16 |        |             |                 ; word we just restored. That address is six bytes down
3612:000 | DONE ins | em 16 16 | 005ac3 | a0 06 00    |                 ldy.# 0006           
3613:000 | DONE ins | em 16 16 | 005ac6 | b1 02       |                 lda.diy 000002       LDA (DP),Y
3614:000 | DONE ins | em 16 16 | 005ac8 | 1a          |                 inc.a                first free byte is one byte further down
3615:000 | DONE ins | em 16 16 | 005ac9 | 85 00       |                 sta.d 000000         
3616:000 | DONE wsp | em 16 16 |        |             |
3617:000 | DONE cmt | em 16 16 |        |             |                 ; clean up stack
3618:000 | DONE ins | em 16 16 | 005acb | b4 00       |                 ldy.dx 00            
3619:000 | DONE ins | em 16 16 | 005acd | e8          |                 inx                  
3620:000 | DONE ins | em 16 16 | 005ace | e8          |                 inx                  
3621:000 | DONE wsp | em 16 16 |        |             |
3622:000 | DONE lbl | em 16 16 | 005acf |             | z_marker                             
3622:001 | DONE ins | em 16 16 | 005acf | 60          |                 rts                  
3623:000 | DONE wsp | em 16 16 |        |             |
3624:000 | DONE wsp | em 16 16 |        |             |
3625:000 | DONE cmt | em 16 16 |        |             | ; -------------------------------------------------------------------
3626:000 | DONE cmt | em 16 16 |        |             | ; MAX ( n m -- n ) 18 bytes / X cycles
3627:000 | DONE cmt | em 16 16 |        |             | ; Compare TOS and NOS and keep which one is larger. Adapted from Lance A.
3628:000 | DONE cmt | em 16 16 |        |             | ; Leventhal "6502 Assembly Language Subroutines". Negative Flag indicates which
3629:000 | DONE cmt | em 16 16 |        |             | ; number is larger. See also http://6502.org/tutorials/compare_instructions.html
3630:000 | DONE cmt | em 16 16 |        |             | ; and http://www.righto.com/2012/12/the-6502-overflow-flag-explained.html
3631:000 | DONE lbl | em 16 16 | 005ad0 |             | xt_max                               
3632:000 | DONE ins | em 16 16 | 005ad0 | 98          |                 tya                  
3633:000 | DONE ins | em 16 16 | 005ad1 | d5 00       |                 cmp.dx 00            
3634:000 | DONE wsp | em 16 16 |        |             |
3635:000 | DONE cmt | em 16 16 |        |             |                 ; If they are the same, life is good. This step also sets the
3636:000 | DONE cmt | em 16 16 |        |             |                 ; Carry flag
3637:000 | DONE ins | em 16 16 | 005ad3 | f0 0b       |                 beq 005ae0           Faster than DROP because TOS is in Y
3638:000 | DONE wsp | em 16 16 |        |             |
3639:000 | DONE ins | em 16 16 | 005ad5 | f5 00       |                 sbc.dx 00            
3640:000 | DONE ins | em 16 16 | 005ad7 | 50 03       |                 bvc 005adc           no overflow, skip ahead
3641:000 | DONE wsp | em 16 16 |        |             |
3642:000 | DONE cmt | em 16 16 |        |             |                 ; Deal with oveflow because we use signed numbers
3643:000 | DONE ins | em 16 16 | 005ad9 | 49 00 80    |                 eor.# 8000           compliment negative flag
3644:000 | DONE wsp | em 16 16 |        |             |
3645:000 | DONE lbl | em 16 16 | 005adc |             | max_no_ov                            
3646:000 | DONE ins | em 16 16 | 005adc | 10 02       |                 bpl 005ae0           keep TOS
3647:000 | DONE lbl | em 16 16 | 005ade |             | max_drop                             
3648:000 | DONE ins | em 16 16 | 005ade | b4 00       |                 ldy.dx 00            DROP so NOS is result
3649:000 | DONE lbl | em 16 16 | 005ae0 |             | max_nip                              
3650:000 | DONE ins | em 16 16 | 005ae0 | e8          |                 inx                  
3651:000 | DONE ins | em 16 16 | 005ae1 | e8          |                 inx                  
3652:000 | DONE wsp | em 16 16 |        |             |
3653:000 | DONE lbl | em 16 16 | 005ae2 |             | z_max                                
3653:001 | DONE ins | em 16 16 | 005ae2 | 60          |                 rts                  
3654:000 | DONE wsp | em 16 16 |        |             |
3655:000 | DONE wsp | em 16 16 |        |             |
3656:000 | DONE cmt | em 16 16 |        |             | ; -------------------------------------------------------------------
3657:000 | DONE cmt | em 16 16 |        |             | ; MIN ( n m -- n ) 18 bytes / X cycles
3658:000 | DONE cmt | em 16 16 |        |             | ; Compare TOS and NOS and keep which one is smaller Adapted from Lance A.
3659:000 | DONE cmt | em 16 16 |        |             | ; Leventhal "6502 Assembly Language Subroutines". Negative Flag indicates which
3660:000 | DONE cmt | em 16 16 |        |             | ; number is larger. See also http://6502.org/tutorials/compare_instructions.html
3661:000 | DONE cmt | em 16 16 |        |             | ; and http://www.righto.com/2012/12/the-6502-overflow-flag-explained.html
3662:000 | DONE lbl | em 16 16 | 005ae3 |             | xt_min                               
3663:000 | DONE ins | em 16 16 | 005ae3 | 98          |                 tya                  
3664:000 | DONE ins | em 16 16 | 005ae4 | d5 00       |                 cmp.dx 00            
3665:000 | DONE wsp | em 16 16 |        |             |
3666:000 | DONE cmt | em 16 16 |        |             |                 ; If they are the same, life is good. This step also sets the
3667:000 | DONE cmt | em 16 16 |        |             |                 ; Carry flag
3668:000 | DONE ins | em 16 16 | 005ae6 | f0 0b       |                 beq 005af3           Faster than DROP because TOS is in Y
3669:000 | DONE wsp | em 16 16 |        |             |
3670:000 | DONE ins | em 16 16 | 005ae8 | f5 00       |                 sbc.dx 00            
3671:000 | DONE ins | em 16 16 | 005aea | 50 03       |                 bvc 005aef           no overflow, skip ahead
3672:000 | DONE wsp | em 16 16 |        |             |
3673:000 | DONE cmt | em 16 16 |        |             |                 ; Deal with oveflow because we use signed numbers
3674:000 | DONE ins | em 16 16 | 005aec | 49 00 80    |                 eor.# 8000           compliment negative flag
3675:000 | DONE wsp | em 16 16 |        |             |
3676:000 | DONE lbl | em 16 16 | 005aef |             | min_no_ov                            
3677:000 | DONE ins | em 16 16 | 005aef | 30 02       |                 bmi 005af3           keep TOS
3678:000 | DONE lbl | em 16 16 | 005af1 |             | min_drop                             
3679:000 | DONE ins | em 16 16 | 005af1 | b4 00       |                 ldy.dx 00            DROP so NOS is result
3680:000 | DONE lbl | em 16 16 | 005af3 |             | min_nip                              
3681:000 | DONE ins | em 16 16 | 005af3 | e8          |                 inx                  
3682:000 | DONE ins | em 16 16 | 005af4 | e8          |                 inx                  
3683:000 | DONE wsp | em 16 16 |        |             |
3684:000 | DONE lbl | em 16 16 | 005af5 |             | z_min                                
3684:001 | DONE ins | em 16 16 | 005af5 | 60          |                 rts                  
3685:000 | DONE wsp | em 16 16 |        |             |
3686:000 | DONE cmt | em 16 16 |        |             | ; -------------------------------------------------------------------
3687:000 | DONE cmt | em 16 16 |        |             | ; MOVE ( addr1 addr2 u -- ) X bytes / X cycles
3688:000 | DONE cmt | em 16 16 |        |             | ; Move u bytes from addr1 to addr2, so that in the end, addr2 contains exactly
3689:000 | DONE cmt | em 16 16 |        |             | ; what was in addr1. This routine calls CMOVE or CMOVE>. Forth verison is
3690:000 | DONE cmt | em 16 16 |        |             | ; >R 2DUP U< IF R> CMOVE> ELSE  R> CMOVE THEN ; see
3691:000 | DONE cmt | em 16 16 |        |             | ; https://groups.google.com/forum/#!topic/comp.lang.forth/-l2WlE7pEE0
3692:000 | DONE cmt | em 16 16 |        |             | ; Also see CMOVE> and CMOVE and http://forum.6502.org/viewtopic.php?f=2&t=1685
3693:000 | DONE lbl | em 16 16 | 005af6 |             | xt_move                              
3694:000 | DONE dir | em 16 16 |        |             |         .!a16                        
3695:000 | DONE cmt | em 16 16 |        |             |                 ; if u is zero, we just skip all of this
3696:000 | DONE ins | em 16 16 | 005af6 | 98          |                 tya                  
3697:000 | DONE ins | em 16 16 | 005af7 | f0 0e       |                 beq 005b07           
3698:000 | DONE wsp | em 16 16 |        |             |
3699:000 | DONE cmt | em 16 16 |        |             |                 ; if source and destination are the same, that would be silly as
3700:000 | DONE cmt | em 16 16 |        |             |                 ; well
3701:000 | DONE ins | em 16 16 | 005af9 | b5 00       |                 lda.dx 00            addr2 (destination)
3702:000 | DONE ins | em 16 16 | 005afb | d5 04       |                 cmp.dx 04            addr1 (source)
3703:000 | DONE ins | em 16 16 | 005afd | f0 08       |                 beq 005b07           
3704:000 | DONE wsp | em 16 16 |        |             |
3705:000 | DONE cmt | em 16 16 |        |             |                 ; The destination is higher than the source, so use CMOVE, which
3706:000 | DONE cmt | em 16 16 |        |             |                 ; calls MVP
3707:000 | DONE ins | em 16 16 | 005aff | 10 03       |                 bpl 005b04           
3708:000 | DONE wsp | em 16 16 |        |             |
3709:000 | DONE ins | em 16 16 | 005b01 | 4c 11 56    |                 jmp 005611           JSR/RTS
3710:000 | DONE wsp | em 16 16 |        |             |
3711:000 | DONE cmt | em 16 16 |        |             |                 ; The source is higher than the destination, use CMOVE>,
3712:000 | DONE cmt | em 16 16 |        |             |                 ; which calls MVN
3713:000 | DONE lbl | em 16 16 | 005b04 |             | move_cmoveup                         
3714:000 | DONE ins | em 16 16 | 005b04 | 4c 34 56    |                 jmp 005634           
3715:000 | DONE wsp | em 16 16 |        |             |
3716:000 | DONE lbl | em 16 16 | 005b07 |             | z_move                               ; never reached
3717:000 | DONE wsp | em 16 16 |        |             |
3718:000 | DONE wsp | em 16 16 |        |             |
3719:000 | DONE cmt | em 16 16 |        |             | ; -------------------------------------------------------------------
3720:000 | DONE cmt | em 16 16 |        |             | ; NAME>INT ( nt -- xt ) 4 bytes / 8 cycles
3721:000 | DONE cmt | em 16 16 |        |             | ; Given the Name Token (nt) of a word, return its Execute Token (xt)
3722:000 | DONE cmt | em 16 16 |        |             | ; TODO deal with compile-only words, see
3723:000 | DONE cmt | em 16 16 |        |             | ; https://www.complang.tuwien.ac.at/forth/gforth/Docs-html/Name-token.html
3724:000 | DONE lbl | em 16 16 | 005b07 |             | xt_name-int                          
3725:000 | DONE dir | em 16 16 |        |             |         .!a16                        
3726:000 | DONE dir | em 16 16 |        |             |         .!xy16                       
3727:000 | DONE cmt | em 16 16 |        |             |                 ; The xt of a word beginns four bytes down from its nt
3728:000 | DONE ins | em 16 16 | 005b07 | c8          |                 iny                  
3729:000 | DONE ins | em 16 16 | 005b08 | c8          |                 iny                  
3730:000 | DONE ins | em 16 16 | 005b09 | c8          |                 iny                  
3731:000 | DONE ins | em 16 16 | 005b0a | c8          |                 iny                  
3732:000 | DONE ins | em 16 16 | 005b0b | b9 00 00    |                 lda.y 0000           
3733:000 | DONE ins | em 16 16 | 005b0e | a8          |                 tay                  
3734:000 | DONE wsp | em 16 16 |        |             |
3735:000 | DONE lbl | em 16 16 | 005b0f |             | z_name-int                           
3735:001 | DONE ins | em 16 16 | 005b0f | 60          |                 rts                  
3736:000 | DONE wsp | em 16 16 |        |             |
3737:000 | DONE cmt | em 16 16 |        |             | ; -------------------------------------------------------------------
3738:000 | DONE cmt | em 16 16 |        |             | ; NAME>STRING ( nt -- addr u ) 16 bytes / X cycles
3739:000 | DONE cmt | em 16 16 |        |             | ; Given a name token (nt) of a word, return its string. This is a Gforth word
3740:000 | DONE cmt | em 16 16 |        |             | ; that works with the Dictionary header entries. It is not checked if nt is
3741:000 | DONE cmt | em 16 16 |        |             | ; a valid name token. There is no "STRING>NAME" - this is handled by the
3742:000 | DONE cmt | em 16 16 |        |             | ; combination of PARSE-NAME and FIND-NAME
3743:000 | DONE lbl | em 16 16 | 005b10 |             | xt_name-string                       
3744:000 | DONE dir | em 16 16 |        |             |         .!a16                        
3745:000 | DONE dir | em 16 16 |        |             |         .!xy16                       
3746:000 | DONE ins | em 16 16 | 005b10 | ca          |                 dex                  move NOS down one
3747:000 | DONE ins | em 16 16 | 005b11 | ca          |                 dex                  
3748:000 | DONE wsp | em 16 16 |        |             |
3749:000 | DONE cmt | em 16 16 |        |             |                 ; the name string of a word begins 8 bytes down from its nt,
3750:000 | DONE cmt | em 16 16 |        |             |                 ; which we have as TOS
3751:000 | DONE ins | em 16 16 | 005b12 | 98          |                 tya                  
3752:000 | DONE ins | em 16 16 | 005b13 | 18          |                 clc                  
3753:000 | DONE ins | em 16 16 | 005b14 | 69 08 00    |                 adc.# 0008           
3754:000 | DONE ins | em 16 16 | 005b17 | 95 00       |                 sta.dx 00            NOS
3755:000 | DONE wsp | em 16 16 |        |             |
3756:000 | DONE cmt | em 16 16 |        |             |                 ; the length of the name string is in the LSB of the first word
3757:000 | DONE cmt | em 16 16 |        |             |                 ; of the dictionary entry header (the name token)
3758:000 | DONE ins | em 16 16 | 005b19 | b9 00 00    |                 lda.y 0000           LDA $0000,Y
3759:000 | DONE ins | em 16 16 | 005b1c | 29 ff 00    |                 and.# 00ff           mask all but length byte
3760:000 | DONE ins | em 16 16 | 005b1f | a8          |                 tay                  
3761:000 | DONE wsp | em 16 16 |        |             |
3762:000 | DONE lbl | em 16 16 | 005b20 |             | z_name-string                        
3762:001 | DONE ins | em 16 16 | 005b20 | 60          |                 rts                  
3763:000 | DONE wsp | em 16 16 |        |             |
3764:000 | DONE wsp | em 16 16 |        |             |
3765:000 | DONE cmt | em 16 16 |        |             | ; -------------------------------------------------------------------
3766:000 | DONE cmt | em 16 16 |        |             | ; NATIVE-COMPILE ( -- ) X bytes / X cycles
3767:000 | DONE cmt | em 16 16 |        |             | ; Enable native compilation for last word in Dictionary
3768:000 | DONE lbl | em 16 16 | 005b21 |             | xt_native-compile                    
3769:000 | DONE dir | em 16 16 |        |             |         .!a16                        
3770:000 | DONE ins | em 16 16 | 005b21 | a9 01 00    |                 lda.# NC             
3771:000 | DONE ins | em 16 16 | 005b24 | eb          |                 xba                  flags are MSB
3772:000 | DONE ins | em 16 16 | 005b25 | 12 02       |                 ora.di 000002        ORA (DP)
3773:000 | DONE ins | em 16 16 | 005b27 | 92 02       |                 sta.di 000002        
3774:000 | DONE wsp | em 16 16 |        |             |
3775:000 | DONE lbl | em 16 16 | 005b29 |             | z_native-compile                     
3776:000 | DONE ins | em 16 16 | 005b29 | 60          |                 rts                  
3777:000 | DONE wsp | em 16 16 |        |             |
3778:000 | DONE cmt | em 16 16 |        |             | ; -------------------------------------------------------------------
3779:000 | DONE cmt | em 16 16 |        |             | ; NC-LIMIT ( -- addr ) X bytes / X cycles
3780:000 | DONE cmt | em 16 16 |        |             | ; Address where the value of the Native Compile size limit is kept
3781:000 | DONE lbl | em 16 16 | 005b2a |             | xt_nc-limit                          
3782:000 | DONE ins | em 16 16 | 005b2a | ca          |                 dex                  
3783:000 | DONE ins | em 16 16 | 005b2b | ca          |                 dex                  
3784:000 | DONE ins | em 16 16 | 005b2c | 94 00       |                 sty.dx 00            
3785:000 | DONE ins | em 16 16 | 005b2e | a0 26 00    |                 ldy.# 000026         
3786:000 | DONE wsp | em 16 16 |        |             |
3787:000 | DONE lbl | em 16 16 | 005b31 |             | z_nc-limit                           
3787:001 | DONE ins | em 16 16 | 005b31 | 60          |                 rts                  
3788:000 | DONE wsp | em 16 16 |        |             |
3789:000 | DONE wsp | em 16 16 |        |             |
3790:000 | DONE cmt | em 16 16 |        |             | ; -------------------------------------------------------------------
3791:000 | DONE cmt | em 16 16 |        |             | ; NEGATE ( n -- n ) 6 bytes / X cycles
3792:000 | DONE cmt | em 16 16 |        |             | ; Two's complement of TOS
3793:000 | DONE lbl | em 16 16 | 005b32 |             | xt_negate                            
3794:000 | DONE ins | em 16 16 | 005b32 | 98          |                 tya                  
3795:000 | DONE ins | em 16 16 | 005b33 | 49 ff ff    |                 eor.# 0ffff          
3796:000 | DONE ins | em 16 16 | 005b36 | 1a          |                 inc.a                
3797:000 | DONE ins | em 16 16 | 005b37 | a8          |                 tay                  
3798:000 | DONE wsp | em 16 16 |        |             |
3799:000 | DONE lbl | em 16 16 | 005b38 |             | z_negate                             
3799:001 | DONE ins | em 16 16 | 005b38 | 60          |                 rts                  
3800:000 | DONE wsp | em 16 16 |        |             |
3801:000 | DONE wsp | em 16 16 |        |             |
3802:000 | DONE cmt | em 16 16 |        |             | ; -------------------------------------------------------------------
3803:000 | DONE cmt | em 16 16 |        |             | ; NIP ( n m -- m ) 2 bytes / 4 cycles
3804:000 | DONE cmt | em 16 16 |        |             | ; Delete entry that is NOS
3805:000 | DONE lbl | em 16 16 | 005b39 |             | xt_nip                               
3806:000 | DONE dir | em 16 16 |        |             |         .!xy16                       
3807:000 | DONE ins | em 16 16 | 005b39 | e8          |                 inx                  
3808:000 | DONE ins | em 16 16 | 005b3a | e8          |                 inx                  
3809:000 | DONE lbl | em 16 16 | 005b3b |             | z_nip                                
3809:001 | DONE ins | em 16 16 | 005b3b | 60          |                 rts                  
3810:000 | DONE wsp | em 16 16 |        |             |
3811:000 | DONE wsp | em 16 16 |        |             |
3812:000 | DONE cmt | em 16 16 |        |             | ; -------------------------------------------------------------------
3813:000 | DONE cmt | em 16 16 |        |             | ; NUMBER ( addr u -- u | d ) X bytes / X cycles
3814:000 | DONE cmt | em 16 16 |        |             | ; Convert a number string to a double or single cell number. This is a wrapper
3815:000 | DONE cmt | em 16 16 |        |             | ; for >NUMBER and follows the convention set out in the "Forth Programmer's
3816:000 | DONE cmt | em 16 16 |        |             | ; Handbook" (Conklin & Rather) 3rd edition p. 87. Based in part on the "Starting
3817:000 | DONE cmt | em 16 16 |        |             | ; Forth" code https://www.forth.com/starting-forth/10-input-output-operators/
3818:000 | DONE cmt | em 16 16 |        |             | ; Gforth uses S>NUMBER? and S>UNUMBER? which return the numbers and a flag, see
3819:000 | DONE cmt | em 16 16 |        |             | ; https://www.complang.tuwien.ac.at/forth/gforth/Docs-html/Number-Conversion.html
3820:000 | DONE cmt | em 16 16 |        |             | ; Another difference to Gforth is that we follow ANSI Forth that the dot to
3821:000 | DONE cmt | em 16 16 |        |             | ; signal a double cell number is required to be the last character of the
3822:000 | DONE cmt | em 16 16 |        |             | ; string. Number calls >NUMBER which in turn calls UM*, which uses tmp1, tmp2,
3823:000 | DONE cmt | em 16 16 |        |             | ; and tmp3, so we can't use them here, which is pain.
3824:000 | DONE lbl | em 16 16 | 005b3c |             | xt_number                            
3825:000 | DONE dir | em 16 16 |        |             |         .!a16                        
3826:000 | DONE cmt | em 16 16 |        |             |                 ; The flags for sign and double are kept on the stack because
3827:000 | DONE cmt | em 16 16 |        |             |                 ; we've run out of temporary variables. MSB is for minus, LSB is
3828:000 | DONE cmt | em 16 16 |        |             |                 ; for double
3829:000 | DONE ins | em 16 16 | 005b3c | f4 00 00    |                 phe.# 0000           
3830:000 | DONE wsp | em 16 16 |        |             |
3831:000 | DONE ins | em 16 16 | 005b3f | 84 24       |                 sty.d 000024         save length of string, freeing Y
3832:000 | DONE wsp | em 16 16 |        |             |
3833:000 | DONE cmt | em 16 16 |        |             |                 ; if the first character is a minus, strip it off and set
3834:000 | DONE cmt | em 16 16 |        |             |                 ; a flag
3835:000 | DONE ins | em 16 16 | 005b41 | e2 20       |                 sep 20               
3835:001 | DONE ctl | em  8 16 |        |             |         .!a8
3836:000 | DONE ins | em  8 16 | 005b43 | a1 00       |                 lda.dxi 00           get first character
3837:000 | DONE ins | em  8 16 | 005b45 | c9 2d       |                 cmp.# 2d             
3838:000 | DONE ins | em  8 16 | 005b47 | c2 20       |                 rep 20               
3838:001 | DONE ctl | em 16 16 |        |             |         .!a16
3839:000 | DONE ins | em 16 16 | 005b49 | d0 09       |                 bne 005b54           
3840:000 | DONE wsp | em 16 16 |        |             |
3841:000 | DONE cmt | em 16 16 |        |             |                 ; We have a minus.
3842:000 | DONE ins | em 16 16 | 005b4b | 68          |                 pla                  
3843:000 | DONE ins | em 16 16 | 005b4c | 09 00 ff    |                 ora.# 0ff00          MSB is minus
3844:000 | DONE ins | em 16 16 | 005b4f | 48          |                 pha                  
3845:000 | DONE wsp | em 16 16 |        |             |
3846:000 | DONE ins | em 16 16 | 005b50 | f6 00       |                 inc.dx 00            start one character later
3847:000 | DONE ins | em 16 16 | 005b52 | c6 24       |                 dec.d 000024         reduce string length by one
3848:000 | DONE wsp | em 16 16 |        |             |
3849:000 | DONE lbl | em 16 16 | 005b54 |             | number_dot                           
3850:000 | DONE cmt | em 16 16 |        |             |                 ; if the last character is a dot, strip it off and set a flag
3851:000 | DONE ins | em 16 16 | 005b54 | a5 24       |                 lda.d 000024         get the string length
3852:000 | DONE ins | em 16 16 | 005b56 | 3a          |                 dec.a                subtract one to convert length to index
3853:000 | DONE ins | em 16 16 | 005b57 | 18          |                 clc                  
3854:000 | DONE ins | em 16 16 | 005b58 | 75 00       |                 adc.dx 00            add length of string
3855:000 | DONE ins | em 16 16 | 005b5a | a8          |                 tay                  
3856:000 | DONE ins | em 16 16 | 005b5b | e2 20       |                 sep 20               
3856:001 | DONE ctl | em  8 16 |        |             |         .!a8
3857:000 | DONE ins | em  8 16 | 005b5d | b9 00 00    |                 lda.y 0000           get last character
3858:000 | DONE ins | em  8 16 | 005b60 | c9 2e       |                 cmp.# 2e             
3859:000 | DONE ins | em  8 16 | 005b62 | c2 20       |                 rep 20               
3859:001 | DONE ctl | em 16 16 |        |             |         .!a16
3860:000 | DONE ins | em 16 16 | 005b64 | d0 07       |                 bne 005b6d           
3861:000 | DONE wsp | em 16 16 |        |             |
3862:000 | DONE cmt | em 16 16 |        |             |                 ; we have a dot
3863:000 | DONE ins | em 16 16 | 005b66 | 68          |                 pla                  get the flag back
3864:000 | DONE ins | em 16 16 | 005b67 | 09 ff 00    |                 ora.# 00ff           LSB is double
3865:000 | DONE ins | em 16 16 | 005b6a | 48          |                 pha                  
3866:000 | DONE wsp | em 16 16 |        |             |
3867:000 | DONE ins | em 16 16 | 005b6b | c6 24       |                 dec.d 000024         reduce string length by one
3868:000 | DONE wsp | em 16 16 |        |             |
3869:000 | DONE lbl | em 16 16 | 005b6d |             | number_main                          
3870:000 | DONE cmt | em 16 16 |        |             |                 ; set up stack for subroutine jump to >NUMBER
3871:000 | DONE ins | em 16 16 | 005b6d | b5 00       |                 lda.dx 00            get the string address to safety
3872:000 | DONE ins | em 16 16 | 005b6f | 74 00       |                 stz.dx 00            NOS is now zero
3873:000 | DONE ins | em 16 16 | 005b71 | ca          |                 dex                  
3874:000 | DONE ins | em 16 16 | 005b72 | ca          |                 dex                  
3875:000 | DONE ins | em 16 16 | 005b73 | 74 00       |                 stz.dx 00            3OS and NOS are now zero
3876:000 | DONE ins | em 16 16 | 005b75 | ca          |                 dex                  
3877:000 | DONE ins | em 16 16 | 005b76 | ca          |                 dex                  
3878:000 | DONE wsp | em 16 16 |        |             |
3879:000 | DONE ins | em 16 16 | 005b77 | 95 00       |                 sta.dx 00            address is back as NOS
3880:000 | DONE ins | em 16 16 | 005b79 | a4 24       |                 ldy.d 000024         length is back as TOS
3881:000 | DONE wsp | em 16 16 |        |             |
3882:000 | DONE lbl | em 16 16 | 005b7b |             | number_loop                          
3883:000 | DONE ins | em 16 16 | 005b7b | 20 63 51    |                 jsr 005163           ( ud addr u -- ud addr u )
3884:000 | DONE wsp | em 16 16 |        |             |
3885:000 | DONE ins | em 16 16 | 005b7e | 98          |                 tya                  test length of returned string, should be 0
3886:000 | DONE ins | em 16 16 | 005b7f | f0 06       |                 beq 005b87           
3887:000 | DONE wsp | em 16 16 |        |             |
3888:000 | DONE cmt | em 16 16 |        |             |                 ; Something went wrong during conversion, we still have stuff
3889:000 | DONE cmt | em 16 16 |        |             |                 ; left over. Print error string and abort. If number was called
3890:000 | DONE cmt | em 16 16 |        |             |                 ; by INTERPRET, we've already checked for words, so we're in
3891:000 | DONE cmt | em 16 16 |        |             |                 ; trouble one way or another
3892:000 | DONE cmt | em 16 16 |        |             |                 ; TODO print offending string
3893:000 | DONE ins | em 16 16 | 005b81 | a9 ef 70    |                 lda.# 0070ef         
3894:000 | DONE ins | em 16 16 | 005b84 | 4c 60 69    |                 jmp 006960           
3895:000 | DONE wsp | em 16 16 |        |             |
3896:000 | DONE lbl | em 16 16 | 005b87 |             | number_ok                            
3897:000 | DONE cmt | em 16 16 |        |             |                 ; All characters successfully converted. Drop the string info
3898:000 | DONE ins | em 16 16 | 005b87 | b4 02       |                 ldy.dx 02            
3899:000 | DONE ins | em 16 16 | 005b89 | e8          |                 inx                  
3900:000 | DONE ins | em 16 16 | 005b8a | e8          |                 inx                  
3901:000 | DONE ins | em 16 16 | 005b8b | e8          |                 inx                  
3902:000 | DONE ins | em 16 16 | 005b8c | e8          |                 inx                  
3903:000 | DONE wsp | em 16 16 |        |             |
3904:000 | DONE cmt | em 16 16 |        |             |                 ; We have a double-cell number on the Data Stack that might have
3905:000 | DONE cmt | em 16 16 |        |             |                 ; a minus and might actually be single-cell
3906:000 | DONE ins | em 16 16 | 005b8d | 68          |                 pla                  get copy of the flags
3907:000 | DONE ins | em 16 16 | 005b8e | 48          |                 pha                  
3908:000 | DONE ins | em 16 16 | 005b8f | 29 ff 00    |                 and.# 00ff           only keep the part with the number size (LSB)
3909:000 | DONE ins | em 16 16 | 005b92 | f0 1b       |                 beq 005baf           
3910:000 | DONE wsp | em 16 16 |        |             |
3911:000 | DONE cmt | em 16 16 |        |             |                 ; This is a double-cell number. If it had a minus, we'll have to
3912:000 | DONE cmt | em 16 16 |        |             |                 ; negate it
3913:000 | DONE ins | em 16 16 | 005b94 | 68          |                 pla                  
3914:000 | DONE ins | em 16 16 | 005b95 | 29 00 ff    |                 and.# 0ff00          only keep part with the sing (MSB)
3915:000 | DONE ins | em 16 16 | 005b98 | f0 25       |                 beq 005bbf           no minus, all done
3916:000 | DONE wsp | em 16 16 |        |             |
3917:000 | DONE ins | em 16 16 | 005b9a | b5 00       |                 lda.dx 00            DNEGATE, starts with LSW
3918:000 | DONE ins | em 16 16 | 005b9c | 49 ff ff    |                 eor.# 0ffff          
3919:000 | DONE wsp | em 16 16 |        |             |
3920:000 | DONE cmt | em 16 16 |        |             |                 ; INC won't affect the carry flag, so we have to do this the
3921:000 | DONE cmt | em 16 16 |        |             |                 ; hard way
3922:000 | DONE ins | em 16 16 | 005b9f | 18          |                 clc                  
3923:000 | DONE ins | em 16 16 | 005ba0 | 69 01 00    |                 adc.# 0001           
3924:000 | DONE ins | em 16 16 | 005ba3 | 95 00       |                 sta.dx 00            
3925:000 | DONE wsp | em 16 16 |        |             |
3926:000 | DONE cmt | em 16 16 |        |             |                 ; now MSW (in TOS)
3927:000 | DONE ins | em 16 16 | 005ba5 | 98          |                 tya                  
3928:000 | DONE ins | em 16 16 | 005ba6 | 49 ff ff    |                 eor.# 0ffff          
3929:000 | DONE ins | em 16 16 | 005ba9 | 69 00 00    |                 adc.# 0000           we are only interested in the carry
3930:000 | DONE ins | em 16 16 | 005bac | a8          |                 tay                  
3931:000 | DONE wsp | em 16 16 |        |             |
3932:000 | DONE ins | em 16 16 | 005bad | 80 10       |                 bra 005bbf           
3933:000 | DONE wsp | em 16 16 |        |             |
3934:000 | DONE lbl | em 16 16 | 005baf |             | number_single                        
3935:000 | DONE cmt | em 16 16 |        |             |                 ; This is a single cell number, so we just drop the top cell
3936:000 | DONE ins | em 16 16 | 005baf | b4 00       |                 ldy.dx 00            
3937:000 | DONE ins | em 16 16 | 005bb1 | e8          |                 inx                  
3938:000 | DONE ins | em 16 16 | 005bb2 | e8          |                 inx                  
3939:000 | DONE wsp | em 16 16 |        |             |
3940:000 | DONE cmt | em 16 16 |        |             |                 ; If we have a minus, we'll have to negate it. Note this code is
3941:000 | DONE cmt | em 16 16 |        |             |                 ; doubled for speed
3942:000 | DONE ins | em 16 16 | 005bb3 | 68          |                 pla                  
3943:000 | DONE ins | em 16 16 | 005bb4 | 29 00 ff    |                 and.# 0ff00          
3944:000 | DONE ins | em 16 16 | 005bb7 | f0 06       |                 beq 005bbf           no minus, all done
3945:000 | DONE wsp | em 16 16 |        |             |
3946:000 | DONE ins | em 16 16 | 005bb9 | 98          |                 tya                  NEGATE
3947:000 | DONE ins | em 16 16 | 005bba | 49 ff ff    |                 eor.# 0ffff          
3948:000 | DONE ins | em 16 16 | 005bbd | 1a          |                 inc.a                
3949:000 | DONE ins | em 16 16 | 005bbe | a8          |                 tay                  fall through to end
3950:000 | DONE wsp | em 16 16 |        |             |
3951:000 | DONE lbl | em 16 16 | 005bbf |             | z_number                             
3951:001 | DONE ins | em 16 16 | 005bbf | 60          |                 rts                  
3952:000 | DONE wsp | em 16 16 |        |             |
3953:000 | DONE wsp | em 16 16 |        |             |
3954:000 | DONE cmt | em 16 16 |        |             | ; -------------------------------------------------------------------
3955:000 | DONE cmt | em 16 16 |        |             | ; OR ( n m -- n ) 6 bytes / X cycles
3956:000 | DONE cmt | em 16 16 |        |             | ; Logical OR
3957:000 | DONE lbl | em 16 16 | 005bc0 |             | xt_or                                
3958:000 | DONE ins | em 16 16 | 005bc0 | 98          |                 tya                  
3959:000 | DONE ins | em 16 16 | 005bc1 | 15 00       |                 ora.dx 00            
3960:000 | DONE ins | em 16 16 | 005bc3 | a8          |                 tay                  
3961:000 | DONE wsp | em 16 16 |        |             |
3962:000 | DONE ins | em 16 16 | 005bc4 | e8          |                 inx                  
3963:000 | DONE ins | em 16 16 | 005bc5 | e8          |                 inx                  
3964:000 | DONE wsp | em 16 16 |        |             |
3965:000 | DONE lbl | em 16 16 | 005bc6 |             | z_or                                 
3965:001 | DONE ins | em 16 16 | 005bc6 | 60          |                 rts                  
3966:000 | DONE wsp | em 16 16 |        |             |
3967:000 | DONE wsp | em 16 16 |        |             |
3968:000 | DONE cmt | em 16 16 |        |             | ; -------------------------------------------------------------------
3969:000 | DONE cmt | em 16 16 |        |             | ; OUTPUT ( -- addr ) X bytes / X cycles
3970:000 | DONE cmt | em 16 16 |        |             | ; Return the address where the jump target for EMIT is stored. By default, this
3971:000 | DONE cmt | em 16 16 |        |             | ; will hold the value of put_chr from the kernel routine, but this can be
3972:000 | DONE cmt | em 16 16 |        |             | ; changed by the user
3973:000 | DONE lbl | em 16 16 | 005bc7 |             | xt_output                            
3974:000 | DONE ins | em 16 16 | 005bc7 | ca          |                 dex                  
3975:000 | DONE ins | em 16 16 | 005bc8 | ca          |                 dex                  
3976:000 | DONE ins | em 16 16 | 005bc9 | 94 00       |                 sty.dx 00            
3977:000 | DONE wsp | em 16 16 |        |             |
3978:000 | DONE ins | em 16 16 | 005bcb | a0 0e 00    |                 ldy.# 00000e         
3979:000 | DONE wsp | em 16 16 |        |             |
3980:000 | DONE lbl | em 16 16 | 005bce |             | z_output                             
3980:001 | DONE ins | em 16 16 | 005bce | 60          |                 rts                  
3981:000 | DONE wsp | em 16 16 |        |             |
3982:000 | DONE wsp | em 16 16 |        |             |
3983:000 | DONE cmt | em 16 16 |        |             | ; -------------------------------------------------------------------
3984:000 | DONE cmt | em 16 16 |        |             | ; OVER ( n m -- n m n )  6 bytes / 14 cycles
3985:000 | DONE cmt | em 16 16 |        |             | ; Push NOS on Data Stack
3986:000 | DONE lbl | em 16 16 | 005bcf |             | xt_over                              
3987:000 | DONE ins | em 16 16 | 005bcf | ca          |                 dex                  
3988:000 | DONE ins | em 16 16 | 005bd0 | ca          |                 dex                  
3989:000 | DONE ins | em 16 16 | 005bd1 | 94 00       |                 sty.dx 00            
3990:000 | DONE ins | em 16 16 | 005bd3 | b4 02       |                 ldy.dx 02            
3991:000 | DONE wsp | em 16 16 |        |             |
3992:000 | DONE lbl | em 16 16 | 005bd5 |             | z_over                               
3992:001 | DONE ins | em 16 16 | 005bd5 | 60          |                 rts                  
3993:000 | DONE wsp | em 16 16 |        |             |
3994:000 | DONE wsp | em 16 16 |        |             |
3995:000 | DONE cmt | em 16 16 |        |             | ; -------------------------------------------------------------------
3996:000 | DONE cmt | em 16 16 |        |             | ; PAD ( -- addr ) 11 bytes / X cycles
3997:000 | DONE cmt | em 16 16 |        |             | ; Return address to a temporary area in free memory for user. Must be at least
3998:000 | DONE cmt | em 16 16 |        |             | ; 84 bytes in size (says ANSI). It is located relative to the compile area
3999:000 | DONE cmt | em 16 16 |        |             | ; pointer (CP) and therefore varies in position. This area is reserved for the
4000:000 | DONE cmt | em 16 16 |        |             | ; user and not used by the system
4001:000 | DONE lbl | em 16 16 | 005bd6 |             | xt_pad                               
4002:000 | DONE dir | em 16 16 |        |             |         .!a16                        
4003:000 | DONE ins | em 16 16 | 005bd6 | ca          |                 dex                  
4004:000 | DONE ins | em 16 16 | 005bd7 | ca          |                 dex                  
4005:000 | DONE ins | em 16 16 | 005bd8 | 94 00       |                 sty.dx 00            
4006:000 | DONE wsp | em 16 16 |        |             |
4007:000 | DONE ins | em 16 16 | 005bda | a5 00       |                 lda.d 000000         
4008:000 | DONE ins | em 16 16 | 005bdc | 18          |                 clc                  
4009:000 | DONE ins | em 16 16 | 005bdd | 69 ff 00    |                 adc.# 0000ff         
4010:000 | DONE ins | em 16 16 | 005be0 | a8          |                 tay                  
4011:000 | DONE wsp | em 16 16 |        |             |
4012:000 | DONE lbl | em 16 16 | 005be1 |             | z_pad                                
4012:001 | DONE ins | em 16 16 | 005be1 | 60          |                 rts                  
4013:000 | DONE wsp | em 16 16 |        |             |
4014:000 | DONE wsp | em 16 16 |        |             |
4015:000 | DONE cmt | em 16 16 |        |             | ; -------------------------------------------------------------------
4016:000 | DONE cmt | em 16 16 |        |             | ; PAGE ( -- ) X bytes / X cycles
4017:000 | DONE cmt | em 16 16 |        |             | ; Clear the screen on vt-100 terminals by sending the code "ESC[2J". This is
4018:000 | DONE cmt | em 16 16 |        |             | ; only useful in interactive scenarios so we don't worry about speed
4019:000 | DONE cmt | em 16 16 |        |             | ; TODO rewrite with EMIT
4020:000 | DONE lbl | em 16 16 | 005be2 |             | xt_page                              
4021:000 | DONE ins | em 16 16 | 005be2 | a9 fe 70    |                 lda.# 0070fe         
4022:000 | DONE ins | em 16 16 | 005be5 | 20 66 69    |                 jsr 006966           
4023:000 | DONE wsp | em 16 16 |        |             |
4024:000 | DONE cmt | em 16 16 |        |             |                 ; In theory, this should have moved the cursor to the top left
4025:000 | DONE cmt | em 16 16 |        |             |                 ; corner ("home"), but this doesn't seem to work in practice.
4026:000 | DONE cmt | em 16 16 |        |             |                 ; So we send "ESC[H" as well.
4027:000 | DONE ins | em 16 16 | 005be8 | a9 03 71    |                 lda.# 007103         
4028:000 | DONE ins | em 16 16 | 005beb | 20 66 69    |                 jsr 006966           
4029:000 | DONE wsp | em 16 16 |        |             |
4030:000 | DONE lbl | em 16 16 | 005bee |             | z_page                               
4030:001 | DONE ins | em 16 16 | 005bee | 60          |                 rts                  
4031:000 | DONE wsp | em 16 16 |        |             |
4032:000 | DONE cmt | em 16 16 |        |             | ; -------------------------------------------------------------------
4033:000 | DONE cmt | em 16 16 |        |             | ; PARSE-NAME ( "name" -- addr u ) 41+ bytes / X cycles
4034:000 | DONE cmt | em 16 16 |        |             | ; Find next word in input string, skipping leading spaces. This is a special
4035:000 | DONE cmt | em 16 16 |        |             | ; form of PARSE and drops through to that word. See PARSE for more detail. We
4036:000 | DONE cmt | em 16 16 |        |             | ; use this word internally for the interpreter because it is a lot easier to use
4037:000 | DONE cmt | em 16 16 |        |             | ; http://forth-standard.org/standard/core/PARSE-NAME has a Forth implementation
4038:000 | DONE cmt | em 16 16 |        |             | ; Roughly, the word is comparable to  BL WORD COUNT in old terms.
4039:000 | DONE lbl | em 16 16 | 005bef |             | xt_parse-name                        
4040:000 | DONE dir | em 16 16 |        |             |         .!a16                        
4041:000 | DONE dir | em 16 16 |        |             |         .!xy16                       
4042:000 | DONE cmt | em 16 16 |        |             |                 ; skip leading spaces, changing >IN, then place SPACE
4043:000 | DONE cmt | em 16 16 |        |             |                 ; character on data stack for PARSE
4044:000 | DONE ins | em 16 16 | 005bef | 5a          |                 phy                  save TOS for later use
4045:000 | DONE ins | em 16 16 | 005bf0 | a4 0c       |                 ldy.d 00000c         >IN
4046:000 | DONE ins | em 16 16 | 005bf2 | e2 20       |                 sep 20               
4046:001 | DONE ctl | em  8 16 |        |             |         .!a8
4047:000 | DONE lbl | em  8 16 | 005bf4 |             | parse-name_loop                      
4048:000 | DONE ins | em  8 16 | 005bf4 | c4 0a       |                 cpy.d 00000a         end of line?
4049:000 | DONE ins | em  8 16 | 005bf6 | f0 09       |                 beq 005c01           
4050:000 | DONE wsp | em  8 16 |        |             |
4051:000 | DONE ins | em  8 16 | 005bf8 | b1 08       |                 lda.diy 000008       LDA (CIB),Y
4052:000 | DONE ins | em  8 16 | 005bfa | c9 20       |                 cmp.# AscSP          
4053:000 | DONE ins | em  8 16 | 005bfc | d0 17       |                 bne 005c15           
4054:000 | DONE ins | em  8 16 | 005bfe | c8          |                 iny                  
4055:000 | DONE ins | em  8 16 | 005bff | 80 f3       |                 bra 005bf4           
4056:000 | DONE wsp | em  8 16 |        |             |
4057:000 | DONE lbl | em  8 16 | 005c01 |             | parse-name_empty_line                
4058:000 | DONE ins | em  8 16 | 005c01 | c2 20       |                 rep 20               
4058:001 | DONE ctl | em 16 16 |        |             |         .!a16
4059:000 | DONE cmt | em 16 16 |        |             |                 ; The Gforth documentation does not say what address is returned
4060:000 | DONE cmt | em 16 16 |        |             |                 ; if a string with only spaces is returned. Experiments with
4061:000 | DONE cmt | em 16 16 |        |             |                 ; the word  : PNT ( "name" -- ) PARSE-NAME SWAP U. U. TYPE ;
4062:000 | DONE cmt | em 16 16 |        |             |                 ; show that it returns the address of the last space in the
4063:000 | DONE cmt | em 16 16 |        |             |                 ; input, which is cib+ciblen. So we do that as well.
4064:000 | DONE ins | em 16 16 | 005c03 | ca          |                 dex                  
4065:000 | DONE ins | em 16 16 | 005c04 | ca          |                 dex                  
4066:000 | DONE ins | em 16 16 | 005c05 | ca          |                 dex                  
4067:000 | DONE ins | em 16 16 | 005c06 | ca          |                 dex                  
4068:000 | DONE wsp | em 16 16 |        |             |
4069:000 | DONE ins | em 16 16 | 005c07 | 7a          |                 ply                  restore old TOS as 3OS
4070:000 | DONE ins | em 16 16 | 005c08 | 94 02       |                 sty.dx 02            
4071:000 | DONE wsp | em 16 16 |        |             |
4072:000 | DONE ins | em 16 16 | 005c0a | a5 08       |                 lda.d 000008         
4073:000 | DONE ins | em 16 16 | 005c0c | 18          |                 clc                  
4074:000 | DONE ins | em 16 16 | 005c0d | 65 0a       |                 adc.d 00000a         
4075:000 | DONE ins | em 16 16 | 005c0f | 95 00       |                 sta.dx 00            Address as NOS
4076:000 | DONE wsp | em 16 16 |        |             |
4077:000 | DONE ins | em 16 16 | 005c11 | a0 00 00    |                 ldy.# 0000           TOS
4078:000 | DONE wsp | em 16 16 |        |             |
4079:000 | DONE ins | em 16 16 | 005c14 | 60          |                 rts                  don't have to go through PARSE
4080:000 | DONE wsp | em 16 16 |        |             |
4081:000 | DONE lbl | em 16 16 | 005c15 |             | parse-name_found                     
4082:000 | DONE dir | em 16 16 |        |             |         .!xy16                       
4083:000 | DONE ins | em 16 16 | 005c15 | c2 20       |                 rep 20               
4083:001 | DONE ctl | em 16 16 |        |             |         .!a16
4084:000 | DONE ins | em 16 16 | 005c17 | 84 0c       |                 sty.d 00000c         new >IN
4085:000 | DONE wsp | em 16 16 |        |             |
4086:000 | DONE ins | em 16 16 | 005c19 | 7a          |                 ply                  recover TOS
4087:000 | DONE ins | em 16 16 | 005c1a | ca          |                 dex                  
4088:000 | DONE ins | em 16 16 | 005c1b | ca          |                 dex                  
4089:000 | DONE ins | em 16 16 | 005c1c | 94 00       |                 sty.dx 00            
4090:000 | DONE wsp | em 16 16 |        |             |
4091:000 | DONE ins | em 16 16 | 005c1e | a0 20 00    |                 ldy.# AscSP          put space on TOS for PARSE
4092:000 | DONE wsp | em 16 16 |        |             |
4093:000 | DONE cmt | em 16 16 |        |             |                 ; fall thru to PARSE
4094:000 | DONE wsp | em 16 16 |        |             |
4095:000 | DONE cmt | em 16 16 |        |             | ; -------------------------------------------------------------------
4096:000 | DONE cmt | em 16 16 |        |             | ; PARSE ( c "name" -- addr u ) 45 bytes / X+ cycles
4097:000 | DONE cmt | em 16 16 |        |             | ; Find word in input string delimited by character given Do not skip leading
4098:000 | DONE cmt | em 16 16 |        |             | ; delimiters, this is an important difference to PARSE-NAME. PARSE and
4099:000 | DONE cmt | em 16 16 |        |             | ; PARSE-NAME replace WORD in modern systems. See the ANSI documentation at
4100:000 | DONE cmt | em 16 16 |        |             | ; http://www.forth200x.org/documents/html3/rationale.html#rat:core:PARSE
4101:000 | DONE cmt | em 16 16 |        |             | ; PARSE-NAME drops through to here
4102:000 | DONE cmt | em 16 16 |        |             | ;
4103:000 | DONE cmt | em 16 16 |        |             | ;    cib   cib+toin    cib+ciblen
4104:000 | DONE cmt | em 16 16 |        |             | ;     v       v             v
4105:000 | DONE cmt | em 16 16 |        |             | ;     |#####################|              Length of found string:
4106:000 | DONE cmt | em 16 16 |        |             | ;                                          ciblen - toin
4107:000 | DONE cmt | em 16 16 |        |             | ;     +------>|  toin (>IN)
4108:000 | DONE cmt | em 16 16 |        |             | ;     +-------------------->|  ciblen
4109:000 | DONE cmt | em 16 16 |        |             | ;
4110:000 | DONE cmt | em 16 16 |        |             | ; The input string is stored starting at the address in the Current Input Buffer
4111:000 | DONE cmt | em 16 16 |        |             | ; (CIB), the length of which is in CIBLEN. While searching for the delimiter,
4112:000 | DONE cmt | em 16 16 |        |             | ; TOIN (>IN) points to the where we currently are. Since PARSE does not skip
4113:000 | DONE cmt | em 16 16 |        |             | ; leading delimiters, we assume we are on a useful string.
4114:000 | DONE lbl | em 16 16 | 005c21 |             | xt_parse                             
4115:000 | DONE dir | em 16 16 |        |             |         .!a16                        
4116:000 | DONE dir | em 16 16 |        |             |         .!xy16                       
4117:000 | DONE ins | em 16 16 | 005c21 | 84 1c       |                 sty.d 00001c         save delimiter, char is LSB
4118:000 | DONE wsp | em 16 16 |        |             |
4119:000 | DONE cmt | em 16 16 |        |             |                 ; save beginning of new word (cib+toin) to NOS. Don't need to
4120:000 | DONE cmt | em 16 16 |        |             |                 ; worry about TOS because Y gets clobbered anyway before we
4121:000 | DONE cmt | em 16 16 |        |             |                 ; return
4122:000 | DONE ins | em 16 16 | 005c23 | a5 0c       |                 lda.d 00000c         
4123:000 | DONE ins | em 16 16 | 005c25 | 85 20       |                 sta.d 000020         save >IN for later length calculation
4124:000 | DONE ins | em 16 16 | 005c27 | 18          |                 clc                  
4125:000 | DONE ins | em 16 16 | 005c28 | 65 08       |                 adc.d 000008         
4126:000 | DONE wsp | em 16 16 |        |             |
4127:000 | DONE ins | em 16 16 | 005c2a | ca          |                 dex                  save addr as NOS
4128:000 | DONE ins | em 16 16 | 005c2b | ca          |                 dex                  
4129:000 | DONE ins | em 16 16 | 005c2c | 95 00       |                 sta.dx 00            
4130:000 | DONE wsp | em 16 16 |        |             |
4131:000 | DONE ins | em 16 16 | 005c2e | 64 1e       |                 stz.d 00001e         offset for EOL/char found adjustment of >IN
4132:000 | DONE wsp | em 16 16 |        |             |
4133:000 | DONE cmt | em 16 16 |        |             |                 ; prepare loop using Y as index
4134:000 | DONE ins | em 16 16 | 005c30 | a4 0c       |                 ldy.d 00000c         
4135:000 | DONE ins | em 16 16 | 005c32 | e2 20       |                 sep 20               
4135:001 | DONE ctl | em  8 16 |        |             |         .!a8
4136:000 | DONE wsp | em  8 16 |        |             |
4137:000 | DONE lbl | em  8 16 | 005c34 |             | parse_loop                           
4138:000 | DONE ins | em  8 16 | 005c34 | c4 0a       |                 cpy.d 00000a         check for EOL first
4139:000 | DONE ins | em  8 16 | 005c36 | f0 0d       |                 beq 005c45           
4140:000 | DONE wsp | em  8 16 |        |             |
4141:000 | DONE ins | em  8 16 | 005c38 | b1 08       |                 lda.diy 000008       LDA (CIB),Y
4142:000 | DONE ins | em  8 16 | 005c3a | c5 1c       |                 cmp.d 00001c         found delimiter?
4143:000 | DONE ins | em  8 16 | 005c3c | f0 03       |                 beq 005c41           
4144:000 | DONE ins | em  8 16 | 005c3e | c8          |                 iny                  
4145:000 | DONE ins | em  8 16 | 005c3f | 80 f3       |                 bra 005c34           
4146:000 | DONE wsp | em  8 16 |        |             |
4147:000 | DONE lbl | em  8 16 | 005c41 |             | parse_found_delimiter                
4148:000 | DONE cmt | em  8 16 |        |             |                 ; If we haven't reached the end of the line, but found
4149:000 | DONE cmt | em  8 16 |        |             |                 ; a delimiter, we want >IN to point to the next character after
4150:000 | DONE cmt | em  8 16 |        |             |                 ; the delimiter, not the delimiter itself. This is what the
4151:000 | DONE cmt | em  8 16 |        |             |                 ; offset is for
4152:000 | DONE ins | em  8 16 | 005c41 | c2 20       |                 rep 20               
4152:001 | DONE ctl | em 16 16 |        |             |         .!a16
4153:000 | DONE ins | em 16 16 | 005c43 | e6 1e       |                 inc.d 00001e         
4154:000 | DONE wsp | em 16 16 |        |             |
4155:000 | DONE lbl | em 16 16 | 005c45 |             | parse_reached_eol                    
4156:000 | DONE cmt | em 16 16 |        |             |                 ; calculate length of string found (see ascii drawing)
4157:000 | DONE dir | em 16 16 |        |             |         .!xy16                       
4158:000 | DONE ins | em 16 16 | 005c45 | c2 20       |                 rep 20               
4158:001 | DONE ctl | em 16 16 |        |             |         .!a16
4159:000 | DONE ins | em 16 16 | 005c47 | 98          |                 tya                  
4160:000 | DONE ins | em 16 16 | 005c48 | 38          |                 sec                  
4161:000 | DONE ins | em 16 16 | 005c49 | e5 20       |                 sbc.d 000020         original value for >IN / index of first char
4162:000 | DONE ins | em 16 16 | 005c4b | 48          |                 pha                  save so we can manipulate Y
4163:000 | DONE wsp | em 16 16 |        |             |
4164:000 | DONE cmt | em 16 16 |        |             |                 ; calculate new >IN
4165:000 | DONE ins | em 16 16 | 005c4c | 98          |                 tya                  
4166:000 | DONE ins | em 16 16 | 005c4d | 18          |                 clc                  
4167:000 | DONE ins | em 16 16 | 005c4e | 65 1e       |                 adc.d 00001e         offset for EOL vs found delimiter
4168:000 | DONE ins | em 16 16 | 005c50 | 85 0c       |                 sta.d 00000c         
4169:000 | DONE wsp | em 16 16 |        |             |
4170:000 | DONE ins | em 16 16 | 005c52 | 7a          |                 ply                  length of string in TOS
4171:000 | DONE wsp | em 16 16 |        |             |
4172:000 | DONE lbl | em 16 16 | 005c53 |             | z_parse-name                         
4173:000 | DONE lbl | em 16 16 | 005c53 |             | z_parse                              
4173:001 | DONE ins | em 16 16 | 005c53 | 60          |                 rts                  
4174:000 | DONE wsp | em 16 16 |        |             |
4175:000 | DONE wsp | em 16 16 |        |             |
4176:000 | DONE cmt | em 16 16 |        |             | ; -------------------------------------------------------------------
4177:000 | DONE cmt | em 16 16 |        |             | ; PICK ( n n u -- n n n ) X bytes / X cycles
4178:000 | DONE cmt | em 16 16 |        |             | ; Take the u-th element out of the stack and put it on TOS, overwriting the
4179:000 | DONE cmt | em 16 16 |        |             | ; current TOS. 0 PICK is equivalent to DUP, 1 PICK to OVER. Note that using PICK
4180:000 | DONE cmt | em 16 16 |        |             | ; is considered poor coding form. Also note that FIG Forth has a different
4181:000 | DONE cmt | em 16 16 |        |             | ; behavior for PICK than ANS Forth.
4182:000 | DONE cmt | em 16 16 |        |             | ; TODO use DEPTH to check for underflow
4183:000 | DONE lbl | em 16 16 | 005c54 |             | xt_pick                              
4184:000 | DONE ins | em 16 16 | 005c54 | 86 22       |                 stx.d 000022         
4185:000 | DONE wsp | em 16 16 |        |             |
4186:000 | DONE ins | em 16 16 | 005c56 | 98          |                 tya                  Y is just an offset to the DSP
4187:000 | DONE ins | em 16 16 | 005c57 | 0a          |                 asl.a                double because of cell size two bytes
4188:000 | DONE wsp | em 16 16 |        |             |
4189:000 | DONE ins | em 16 16 | 005c58 | 18          |                 clc                  
4190:000 | DONE ins | em 16 16 | 005c59 | 65 22       |                 adc.d 000022         
4191:000 | DONE wsp | em 16 16 |        |             |
4192:000 | DONE ins | em 16 16 | 005c5b | aa          |                 tax                  
4193:000 | DONE ins | em 16 16 | 005c5c | b5 00       |                 lda.dx 00            LDA $00,X
4194:000 | DONE ins | em 16 16 | 005c5e | a8          |                 tay                  Is now TOS
4195:000 | DONE wsp | em 16 16 |        |             |
4196:000 | DONE ins | em 16 16 | 005c5f | a6 22       |                 ldx.d 000022         
4197:000 | DONE wsp | em 16 16 |        |             |
4198:000 | DONE lbl | em 16 16 | 005c61 |             | z_pick                               
4198:001 | DONE ins | em 16 16 | 005c61 | 60          |                 rts                  
4199:000 | DONE wsp | em 16 16 |        |             |
4200:000 | DONE wsp | em 16 16 |        |             |
4201:000 | DONE cmt | em 16 16 |        |             | ; -------------------------------------------------------------------
4202:000 | DONE cmt | em 16 16 |        |             | ; +! "PLUSSTORE" ( n addr -- ) 15 bytes / X cycles
4203:000 | DONE cmt | em 16 16 |        |             | ; Add NOS to address in TOS
4204:000 | DONE lbl | em 16 16 | 005c62 |             | xt_plusstore                         
4205:000 | DONE dir | em 16 16 |        |             |         .!a16                        
4206:000 | DONE ins | em 16 16 | 005c62 | b9 00 00    |                 lda.y 0000           
4207:000 | DONE ins | em 16 16 | 005c65 | 18          |                 clc                  
4208:000 | DONE ins | em 16 16 | 005c66 | 75 00       |                 adc.dx 00            
4209:000 | DONE ins | em 16 16 | 005c68 | 99 00 00    |                 sta.y 0000           
4210:000 | DONE wsp | em 16 16 |        |             |
4211:000 | DONE ins | em 16 16 | 005c6b | b4 02       |                 ldy.dx 02            
4212:000 | DONE ins | em 16 16 | 005c6d | e8          |                 inx                  
4213:000 | DONE ins | em 16 16 | 005c6e | e8          |                 inx                  
4214:000 | DONE ins | em 16 16 | 005c6f | e8          |                 inx                  
4215:000 | DONE ins | em 16 16 | 005c70 | e8          |                 inx                  
4216:000 | DONE wsp | em 16 16 |        |             |
4217:000 | DONE lbl | em 16 16 | 005c71 |             | z_plusstore                          
4217:001 | DONE ins | em 16 16 | 005c71 | 60          |                 rts                  
4218:000 | DONE wsp | em 16 16 |        |             |
4219:000 | DONE wsp | em 16 16 |        |             |
4220:000 | DONE cmt | em 16 16 |        |             | ; -------------------------------------------------------------------
4221:000 | DONE cmt | em 16 16 |        |             | ; POSTPONE ( -- ) X bytes / X cycles
4222:000 | DONE cmt | em 16 16 |        |             | ; Add the compilation behavior of a word to a new word at compile time. If the
4223:000 | DONE cmt | em 16 16 |        |             | ; word that follows it is immediate, include it so that it will be compiled when
4224:000 | DONE cmt | em 16 16 |        |             | ; the word being defined is itself used for a new word. Tricky, but very useful.
4225:000 | DONE cmt | em 16 16 |        |             | ; Because POSTPONE expects a word (not an xt) in the input stream (not on the
4226:000 | DONE cmt | em 16 16 |        |             | ; Data Stack). This means we cannot build words with "jsr xt_postpone, jsr
4227:000 | DONE cmt | em 16 16 |        |             | ; <word>" directly. This word uses tmp1
4228:000 | DONE lbl | em 16 16 | 005c72 |             | xt_postpone                          
4229:000 | DONE cmt | em 16 16 |        |             |                 ; get name from string
4230:000 | DONE ins | em 16 16 | 005c72 | 20 ef 5b    |                 jsr 005bef           ( addr n )
4231:000 | DONE wsp | em 16 16 |        |             |
4232:000 | DONE cmt | em 16 16 |        |             |                 ; if there is no word in stream, complain and abort
4233:000 | DONE ins | em 16 16 | 005c75 | d0 06       |                 bne 005c7d           
4234:000 | DONE ins | em 16 16 | 005c77 | a9 52 70    |                 lda.# 007052         
4235:000 | DONE ins | em 16 16 | 005c7a | 4c 60 69    |                 jmp 006960           
4236:000 | DONE wsp | em 16 16 |        |             |
4237:000 | DONE lbl | em 16 16 | 005c7d |             | pp_got_word                          
4238:000 | DONE ins | em 16 16 | 005c7d | 20 2b 59    |                 jsr 00592b           ( nt | 0 )
4239:000 | DONE wsp | em 16 16 |        |             |
4240:000 | DONE cmt | em 16 16 |        |             |                 ; if word is not in Dictionary, complain and abort
4241:000 | DONE ins | em 16 16 | 005c80 | d0 03       |                 bne 005c85           
4242:000 | DONE ins | em 16 16 | 005c82 | a9 ef 70    |                 lda.# 0070ef         
4243:000 | DONE wsp | em 16 16 |        |             |
4244:000 | DONE lbl | em 16 16 | 005c85 |             | pp_got_nt                            
4245:000 | DONE cmt | em 16 16 |        |             |                 ; Keep nt safe for later use
4246:000 | DONE ins | em 16 16 | 005c85 | 84 1c       |                 sty.d 00001c         
4247:000 | DONE wsp | em 16 16 |        |             |
4248:000 | DONE cmt | em 16 16 |        |             |                 ; We need the xt instead of the nt for the actual compiling
4249:000 | DONE ins | em 16 16 | 005c87 | 20 07 5b    |                 jsr 005b07           NAME>INT ( nt -- xt )
4250:000 | DONE wsp | em 16 16 |        |             |
4251:000 | DONE cmt | em 16 16 |        |             |                 ; See if this is an immediate word. This is easier with nt than
4252:000 | DONE cmt | em 16 16 |        |             |                 ; with xt
4253:000 | DONE ins | em 16 16 | 005c8a | b2 1c       |                 lda.di 00001c        LDA (TMP1) - get status byte of word
4254:000 | DONE ins | em 16 16 | 005c8c | eb          |                 xba                  flags are MSB
4255:000 | DONE ins | em 16 16 | 005c8d | 29 02 00    |                 and.# IM             mask everything but Immediate bit
4256:000 | DONE ins | em 16 16 | 005c90 | f0 03       |                 beq 005c95           
4257:000 | DONE wsp | em 16 16 |        |             |
4258:000 | DONE cmt | em 16 16 |        |             |                 ; The word is immediate, so instead of executing it right now,
4259:000 | DONE cmt | em 16 16 |        |             |                 ; we compile it. xt is on the stack, so this is simple. The RTS
4260:000 | DONE cmt | em 16 16 |        |             |                 ; of COMPILE, takes us back to the original caller
4261:000 | DONE ins | em 16 16 | 005c92 | 4c 56 56    |                 jmp 005656           JSR/RTS
4262:000 | DONE wsp | em 16 16 |        |             |
4263:000 | DONE lbl | em 16 16 | 005c95 |             | pp_not_immediate                     
4264:000 | DONE cmt | em 16 16 |        |             |                 ; This is not an immediate word, so we enact "deferred
4265:000 | DONE cmt | em 16 16 |        |             |                 ; compilation" by including ' <NAME> COMPILE, which we do by
4266:000 | DONE cmt | em 16 16 |        |             |                 ; compiling the run-time routine of LITERAL, the xt itself, and
4267:000 | DONE cmt | em 16 16 |        |             |                 ; a subroutine jump to COMPILE,
4268:000 | DONE ins | em 16 16 | 005c95 | f4 65 5a    |                 phe.# 005a65         PEA LITERAL_RT
4269:000 | DONE ins | em 16 16 | 005c98 | 20 3f 69    |                 jsr 00693f           
4270:000 | DONE wsp | em 16 16 |        |             |
4271:000 | DONE cmt | em 16 16 |        |             |                 ; The xt is TOS. We can't use COMPILE, here because it might
4272:000 | DONE cmt | em 16 16 |        |             |                 ; decided to do something silly like compile it as a native word
4273:000 | DONE cmt | em 16 16 |        |             |                 ; and ruin everything
4274:000 | DONE ins | em 16 16 | 005c9b | 20 45 52    |                 jsr 005245           
4275:000 | DONE wsp | em 16 16 |        |             |
4276:000 | DONE cmt | em 16 16 |        |             |                 ; compile COMPILE, - it's RTS takes us back to original caller
4277:000 | DONE ins | em 16 16 | 005c9e | f4 56 56    |                 phe.# 005656         
4278:000 | DONE ins | em 16 16 | 005ca1 | 20 3f 69    |                 jsr 00693f           JSR/RTS
4279:000 | DONE wsp | em 16 16 |        |             |
4280:000 | DONE lbl | em 16 16 | 005ca4 |             | z_postpone                           
4280:001 | DONE ins | em 16 16 | 005ca4 | 60          |                 rts                  
4281:000 | DONE wsp | em 16 16 |        |             |
4282:000 | DONE wsp | em 16 16 |        |             |
4283:000 | DONE cmt | em 16 16 |        |             | ; -------------------------------------------------------------------
4284:000 | DONE cmt | em 16 16 |        |             | ; R@ "RFETCH" ( -- n ) (R: n -- n )  X bytes / X cycles
4285:000 | DONE cmt | em 16 16 |        |             | ; Get (not pull) Top of Return Stack. We follow Gforth in that this word is not
4286:000 | DONE cmt | em 16 16 |        |             | ; compiled only, because it can be interesting to know what the top of R is in
4287:000 | DONE cmt | em 16 16 |        |             | ; an interactive setting. However, this causes all kinds of problems if we try
4288:000 | DONE cmt | em 16 16 |        |             | ; to natively compile the word, so it does not get the NC flag even though it is
4289:000 | DONE cmt | em 16 16 |        |             | ; actually short enough to make that reasonable
4290:000 | DONE cmt | em 16 16 |        |             | ; TODO consider special case in COMPILE, see there
4291:000 | DONE lbl | em 16 16 | 005ca5 |             | xt_rfetch                            
4292:000 | DONE cmt | em 16 16 |        |             |                 ; get return address that is on top of the return stack
4293:000 | DONE ins | em 16 16 | 005ca5 | 68          |                 pla                  
4294:000 | DONE wsp | em 16 16 |        |             |
4295:000 | DONE ins | em 16 16 | 005ca6 | ca          |                 dex                  
4296:000 | DONE ins | em 16 16 | 005ca7 | ca          |                 dex                  
4297:000 | DONE ins | em 16 16 | 005ca8 | 94 00       |                 sty.dx 00            
4298:000 | DONE wsp | em 16 16 |        |             |
4299:000 | DONE ins | em 16 16 | 005caa | 7a          |                 ply                  get top of return stack and push copy back again
4300:000 | DONE ins | em 16 16 | 005cab | 5a          |                 phy                  
4301:000 | DONE wsp | em 16 16 |        |             |
4302:000 | DONE ins | em 16 16 | 005cac | 48          |                 pha                  restore the return address
4303:000 | DONE wsp | em 16 16 |        |             |
4304:000 | DONE lbl | em 16 16 | 005cad |             | z_rfetch                             
4304:001 | DONE ins | em 16 16 | 005cad | 60          |                 rts                  
4305:000 | DONE wsp | em 16 16 |        |             |
4306:000 | DONE wsp | em 16 16 |        |             |
4307:000 | DONE cmt | em 16 16 |        |             | ; -------------------------------------------------------------------
4308:000 | DONE cmt | em 16 16 |        |             | ; R> "FROMR" ( -- n ) (R: n -- )  7 bytes / 23 cycles
4309:000 | DONE cmt | em 16 16 |        |             | ; Move Top of Return Stack to Top of Data Stack. Remember we have to move the
4310:000 | DONE cmt | em 16 16 |        |             | ; jump address out of the way first.
4311:000 | DONE cmt | em 16 16 |        |             | ; TODO consider stripping PHA/PLA if natively compiled (see COMPILE,)
4312:000 | DONE lbl | em 16 16 | 005cae |             | xt_fromr                             
4313:000 | DONE cmt | em 16 16 |        |             |                 ; Rescue the address of the return jump that is currently top of
4314:000 | DONE cmt | em 16 16 |        |             |                 ; the Return Stack. If this word is natively compiled, this is
4315:000 | DONE cmt | em 16 16 |        |             |                 ; a waste of nine cycles
4316:000 | DONE ins | em 16 16 | 005cae | 68          |                 pla                  
4317:000 | DONE cmt | em 16 16 |        |             |                 ; --- cut for native coding ---
4318:000 | DONE wsp | em 16 16 |        |             |
4319:000 | DONE ins | em 16 16 | 005caf | ca          |                 dex                  
4320:000 | DONE ins | em 16 16 | 005cb0 | ca          |                 dex                  
4321:000 | DONE ins | em 16 16 | 005cb1 | 94 00       |                 sty.dx 00            
4322:000 | DONE wsp | em 16 16 |        |             |
4323:000 | DONE ins | em 16 16 | 005cb3 | 7a          |                 ply                  the actual work
4324:000 | DONE wsp | em 16 16 |        |             |
4325:000 | DONE cmt | em 16 16 |        |             |                 ; --- cut for native coding ---
4326:000 | DONE ins | em 16 16 | 005cb4 | 48          |                 pha                  get return address back
4327:000 | DONE wsp | em 16 16 |        |             |
4328:000 | DONE lbl | em 16 16 | 005cb5 |             | z_fromr                              
4328:001 | DONE ins | em 16 16 | 005cb5 | 60          |                 rts                  
4329:000 | DONE wsp | em 16 16 |        |             |
4330:000 | DONE wsp | em 16 16 |        |             |
4331:000 | DONE cmt | em 16 16 |        |             | ; -------------------------------------------------------------------
4332:000 | DONE cmt | em 16 16 |        |             | ; REFILL ( -- f ) X bytes / X cycles
4333:000 | DONE cmt | em 16 16 |        |             | ; "Attempt to fill the input buffer from the input source, returning a true flag
4334:000 | DONE cmt | em 16 16 |        |             | ; if successful. When the input source is the user input device, attempt to
4335:000 | DONE cmt | em 16 16 |        |             | ; receive input into the terminal input buffer. If successful, make the result
4336:000 | DONE cmt | em 16 16 |        |             | ; the input buffer, set >IN to zero, and return true. Receipt of a line
4337:000 | DONE cmt | em 16 16 |        |             | ; containing no characters is considered successful. If there is no input
4338:000 | DONE cmt | em 16 16 |        |             | ; available from the current input source, return false. When the input source
4339:000 | DONE cmt | em 16 16 |        |             | ; is a string from EVALUATE, return false and perform no other action."
4340:000 | DONE cmt | em 16 16 |        |             | ; See https://www.complang.tuwien.ac.at/forth/gforth/Docs-html/The-Input-Stream.html
4341:000 | DONE cmt | em 16 16 |        |             | ; and Conklin & Rather p. 156
4342:000 | DONE lbl | em 16 16 | 005cb6 |             | xt_refill                            
4343:000 | DONE dir | em 16 16 |        |             |         .!a16                        
4344:000 | DONE dir | em 16 16 |        |             |         .!xy16                       
4345:000 | DONE cmt | em 16 16 |        |             |                 ; Get input source from SOURCE-ID. We don't have blocks in this
4346:000 | DONE cmt | em 16 16 |        |             |                 ; version, or else we would have to check BLK first. This is an
4347:000 | DONE cmt | em 16 16 |        |             |                 ; optimized version of a subroutine jump to SOURCE-ID
4348:000 | DONE ins | em 16 16 | 005cb6 | a5 06       |                 lda.d 000006         
4349:000 | DONE ins | em 16 16 | 005cb8 | d0 14       |                 bne 005cce           
4350:000 | DONE wsp | em 16 16 |        |             |
4351:000 | DONE cmt | em 16 16 |        |             |                 ; SOURCE-ID of zero means we're getting stuff from the keyboard
4352:000 | DONE cmt | em 16 16 |        |             |                 ; with ACCEPT.
4353:000 | DONE ins | em 16 16 | 005cba | ca          |                 dex                  
4354:000 | DONE ins | em 16 16 | 005cbb | ca          |                 dex                  
4355:000 | DONE ins | em 16 16 | 005cbc | ca          |                 dex                  
4356:000 | DONE ins | em 16 16 | 005cbd | ca          |                 dex                  
4357:000 | DONE ins | em 16 16 | 005cbe | 94 02       |                 sty.dx 02            
4358:000 | DONE wsp | em 16 16 |        |             |
4359:000 | DONE ins | em 16 16 | 005cc0 | a5 08       |                 lda.d 000008         address of current input buffer NOS
4360:000 | DONE ins | em 16 16 | 005cc2 | 95 00       |                 sta.dx 00            
4361:000 | DONE ins | em 16 16 | 005cc4 | a0 80 00    |                 ldy.# 000080         max number of chars to accept TOS
4362:000 | DONE wsp | em 16 16 |        |             |
4363:000 | DONE ins | em 16 16 | 005cc7 | 20 8a 54    |                 jsr 00548a           ( addr n1 -- n2)
4364:000 | DONE wsp | em 16 16 |        |             |
4365:000 | DONE cmt | em 16 16 |        |             |                 ; ACCEPT returns the number of characters accepted, but we don't
4366:000 | DONE cmt | em 16 16 |        |             |                 ; need them. We just overwrite TOS this with the flag
4367:000 | DONE ins | em 16 16 | 005cca | a0 ff ff    |                 ldy.# 0ffff          
4368:000 | DONE wsp | em 16 16 |        |             |
4369:000 | DONE ins | em 16 16 | 005ccd | 60          |                 rts                  
4370:000 | DONE wsp | em 16 16 |        |             |
4371:000 | DONE lbl | em 16 16 | 005cce |             | refill_src_not_kbd                   
4372:000 | DONE cmt | em 16 16 |        |             |                 ; If SOURCE-ID doesn't return a zero, it must be a string in
4373:000 | DONE cmt | em 16 16 |        |             |                 ; memory or a file (remember, no blocks in this version)
4374:000 | DONE ins | em 16 16 | 005cce | 1a          |                 inc.a                
4375:000 | DONE ins | em 16 16 | 005ccf | d0 06       |                 bne 005cd7           
4376:000 | DONE wsp | em 16 16 |        |             |
4377:000 | DONE cmt | em 16 16 |        |             |                 ; Simply return FALSE flag as per specification
4378:000 | DONE ins | em 16 16 | 005cd1 | ca          |                 dex                  
4379:000 | DONE ins | em 16 16 | 005cd2 | ca          |                 dex                  
4380:000 | DONE ins | em 16 16 | 005cd3 | 94 00       |                 sty.dx 00            
4381:000 | DONE ins | em 16 16 | 005cd5 | a8          |                 tay                  
4382:000 | DONE wsp | em 16 16 |        |             |
4383:000 | DONE ins | em 16 16 | 005cd6 | 60          |                 rts                  
4384:000 | DONE wsp | em 16 16 |        |             |
4385:000 | DONE lbl | em 16 16 | 005cd7 |             | refill_source_is_not_string          
4386:000 | DONE cmt | em 16 16 |        |             |                 ; Since we don't have blocks, this must mean that we are trying
4387:000 | DONE cmt | em 16 16 |        |             |                 ; to read from a file. However, we don't have files yet, so we
4388:000 | DONE cmt | em 16 16 |        |             |                 ; report an error and jump to ABORT.
4389:000 | DONE ins | em 16 16 | 005cd7 | a9 a7 70    |                 lda.# 0070a7         
4390:000 | DONE ins | em 16 16 | 005cda | 4c 60 69    |                 jmp 006960           
4391:000 | DONE wsp | em 16 16 |        |             |
4392:000 | DONE lbl | em 16 16 | 005cdd |             | z_refill                             
4392:001 | DONE ins | em 16 16 | 005cdd | 60          |                 rts                  dummy for compiling
4393:000 | DONE wsp | em 16 16 |        |             |
4394:000 | DONE wsp | em 16 16 |        |             |
4395:000 | DONE cmt | em 16 16 |        |             | ; -------------------------------------------------------------------
4396:000 | DONE cmt | em 16 16 |        |             | ; ROT ( a b c -- b c a ) X bytes / X cycles
4397:000 | DONE cmt | em 16 16 |        |             | ; Rotate the top three entries downwards (third entry becomes first)
4398:000 | DONE cmt | em 16 16 |        |             | ; Remember this with the "R" for "revolution": The bottom entry becomes the top.
4399:000 | DONE lbl | em 16 16 | 005cde |             | xt_rot                               
4400:000 | DONE dir | em 16 16 |        |             |         .!a16                        
4401:000 | DONE dir | em 16 16 |        |             |         .!xy16                       
4402:000 | DONE ins | em 16 16 | 005cde | b5 00       |                 lda.dx 00            save b
4403:000 | DONE ins | em 16 16 | 005ce0 | 94 00       |                 sty.dx 00            move c to NOS
4404:000 | DONE ins | em 16 16 | 005ce2 | b4 02       |                 ldy.dx 02            move a to TOS
4405:000 | DONE ins | em 16 16 | 005ce4 | 95 02       |                 sta.dx 02            save b as 3OS
4406:000 | DONE wsp | em 16 16 |        |             |
4407:000 | DONE lbl | em 16 16 | 005ce6 |             | z_rot                                
4407:001 | DONE ins | em 16 16 | 005ce6 | 60          |                 rts                  
4408:000 | DONE wsp | em 16 16 |        |             |
4409:000 | DONE wsp | em 16 16 |        |             |
4410:000 | DONE cmt | em 16 16 |        |             | ; -------------------------------------------------------------------
4411:000 | DONE cmt | em 16 16 |        |             | ; RSHIFT ( n u -- u ) X bytes / X cycles
4412:000 | DONE cmt | em 16 16 |        |             | ; Shift TOS right, filling vacant bits with zero
4413:000 | DONE lbl | em 16 16 | 005ce7 |             | xt_rshift                            
4414:000 | DONE cmt | em 16 16 |        |             |                 ; We shift at most 16 bits, because anything above that will be
4415:000 | DONE cmt | em 16 16 |        |             |                 ; zeros anyway
4416:000 | DONE ins | em 16 16 | 005ce7 | 98          |                 tya                  
4417:000 | DONE ins | em 16 16 | 005ce8 | 29 0f 00    |                 and.# 000f           
4418:000 | DONE ins | em 16 16 | 005ceb | f0 09       |                 beq 005cf6           if zero shifts, we're done
4419:000 | DONE wsp | em 16 16 |        |             |
4420:000 | DONE ins | em 16 16 | 005ced | a8          |                 tay                  number of shifts is TOS
4421:000 | DONE ins | em 16 16 | 005cee | b5 00       |                 lda.dx 00            number is in NOS
4422:000 | DONE lbl | em 16 16 | 005cf0 |             | rshift_loop                          
4423:000 | DONE ins | em 16 16 | 005cf0 | 4a          |                 lsr.a                
4424:000 | DONE ins | em 16 16 | 005cf1 | 88          |                 dey                  
4425:000 | DONE ins | em 16 16 | 005cf2 | d0 fc       |                 bne 005cf0           
4426:000 | DONE wsp | em 16 16 |        |             |
4427:000 | DONE ins | em 16 16 | 005cf4 | 95 00       |                 sta.dx 00            put NOS, which last step will pull up
4428:000 | DONE wsp | em 16 16 |        |             |
4429:000 | DONE lbl | em 16 16 | 005cf6 |             | rshift_done                          
4430:000 | DONE ins | em 16 16 | 005cf6 | b4 00       |                 ldy.dx 00            
4431:000 | DONE ins | em 16 16 | 005cf8 | e8          |                 inx                  
4432:000 | DONE ins | em 16 16 | 005cf9 | e8          |                 inx                  
4433:000 | DONE wsp | em 16 16 |        |             |
4434:000 | DONE lbl | em 16 16 | 005cfa |             | z_rshift                             
4434:001 | DONE ins | em 16 16 | 005cfa | 60          |                 rts                  
4435:000 | DONE wsp | em 16 16 |        |             |
4436:000 | DONE wsp | em 16 16 |        |             |
4437:000 | DONE cmt | em 16 16 |        |             | ; -------------------------------------------------------------------
4438:000 | DONE cmt | em 16 16 |        |             | ; S" "SQUOTE" ( "string" -- addr u ) X bytes / X cycles
4439:000 | DONE cmt | em 16 16 |        |             | ; Store address and length of string given, returning ( addr u ). ANSI core
4440:000 | DONE cmt | em 16 16 |        |             | ; claims this is compile-only, but the file set expands it to be interpreted, so
4441:000 | DONE cmt | em 16 16 |        |             | ; it is a state-sensitive word, which are evil. This can also be realized as
4442:000 | DONE cmt | em 16 16 |        |             | ; : S" [CHAR] " PARSE POSTPONE SLITERAL ; IMMEDIATE  but it is used so much we
4443:000 | DONE cmt | em 16 16 |        |             | ; want it in code
4444:000 | DONE lbl | em 16 16 | 005cfb |             | xt_squote                            
4445:000 | DONE cmt | em 16 16 |        |             |                 ; we use PARSE to find the end of the sting. If the string is
4446:000 | DONE cmt | em 16 16 |        |             |                 ; empty, we don't complain, following Gforth's behavior
4447:000 | DONE ins | em 16 16 | 005cfb | ca          |                 dex                  
4448:000 | DONE ins | em 16 16 | 005cfc | ca          |                 dex                  
4449:000 | DONE ins | em 16 16 | 005cfd | 94 00       |                 sty.dx 00            
4450:000 | DONE wsp | em 16 16 |        |             |
4451:000 | DONE ins | em 16 16 | 005cff | a0 22 00    |                 ldy.# 0022           ASCII for " in hex
4452:000 | DONE ins | em 16 16 | 005d02 | 20 21 5c    |                 jsr 005c21           Returns ( addr u ) of string
4453:000 | DONE wsp | em 16 16 |        |             |
4454:000 | DONE cmt | em 16 16 |        |             |                 ; What happens now depends on the state. If we are compiling, we
4455:000 | DONE cmt | em 16 16 |        |             |                 ; include a subroutine jump to SLITERAL to save the string. If
4456:000 | DONE cmt | em 16 16 |        |             |                 ; we are interpreting, we're done
4457:000 | DONE ins | em 16 16 | 005d05 | a5 14       |                 lda.d 000014         
4458:000 | DONE ins | em 16 16 | 005d07 | d0 24       |                 bne 005d2d           
4459:000 | DONE wsp | em 16 16 |        |             |
4460:000 | DONE cmt | em 16 16 |        |             | 		; We copy our string to someplace safe because it lives
4461:000 | DONE cmt | em 16 16 |        |             |                 ; dangerously if we leave it in the input buffer. This might
4462:000 | DONE cmt | em 16 16 |        |             |                 ; seem like a lot of effort for a few bytes, but MVN is so fast
4463:000 | DONE cmt | em 16 16 |        |             |                 ; - 7 cycles per byte - that it is worth it. See
4464:000 | DONE cmt | em 16 16 |        |             |                 ; http://forum.6502.org/viewtopic.php?f=2&t=1685&p=50975#p50975
4465:000 | DONE cmt | em 16 16 |        |             |                 ; and http://6502.org/tutorials/65c816opcodes.html#6.6
4466:000 | DONE ins | em 16 16 | 005d09 | ca          |                 dex                  
4467:000 | DONE ins | em 16 16 | 005d0a | ca          |                 dex                  
4468:000 | DONE ins | em 16 16 | 005d0b | 94 00       |                 sty.dx 00            
4469:000 | DONE ins | em 16 16 | 005d0d | a4 00       |                 ldy.d 000000         HERE  ( addr-s u addr-d )
4470:000 | DONE wsp | em 16 16 |        |             |
4471:000 | DONE ins | em 16 16 | 005d0f | b5 00       |                 lda.dx 00            SWAP ( addr-s addr-d u )
4472:000 | DONE ins | em 16 16 | 005d11 | 94 00       |                 sty.dx 00            
4473:000 | DONE ins | em 16 16 | 005d13 | a8          |                 tay                  
4474:000 | DONE wsp | em 16 16 |        |             |
4475:000 | DONE ins | em 16 16 | 005d14 | 5a          |                 phy                  save copy of u
4476:000 | DONE ins | em 16 16 | 005d15 | b5 00       |                 lda.dx 00            save copy of addr-d
4477:000 | DONE ins | em 16 16 | 005d17 | 48          |                 pha                  
4478:000 | DONE wsp | em 16 16 |        |             |
4479:000 | DONE ins | em 16 16 | 005d18 | 20 f6 5a    |                 jsr 005af6           
4480:000 | DONE wsp | em 16 16 |        |             |
4481:000 | DONE ins | em 16 16 | 005d1b | ca          |                 dex                  
4482:000 | DONE ins | em 16 16 | 005d1c | ca          |                 dex                  
4483:000 | DONE ins | em 16 16 | 005d1d | ca          |                 dex                  
4484:000 | DONE ins | em 16 16 | 005d1e | ca          |                 dex                  
4485:000 | DONE ins | em 16 16 | 005d1f | 94 02       |                 sty.dx 02            
4486:000 | DONE wsp | em 16 16 |        |             |
4487:000 | DONE ins | em 16 16 | 005d21 | 68          |                 pla                  get addr-d back
4488:000 | DONE ins | em 16 16 | 005d22 | 95 00       |                 sta.dx 00            put NOS
4489:000 | DONE ins | em 16 16 | 005d24 | 68          |                 pla                  get u back, put TOS
4490:000 | DONE ins | em 16 16 | 005d25 | a8          |                 tay                  
4491:000 | DONE wsp | em 16 16 |        |             |
4492:000 | DONE cmt | em 16 16 |        |             |                 ; update CP
4493:000 | DONE ins | em 16 16 | 005d26 | 18          |                 clc                  
4494:000 | DONE ins | em 16 16 | 005d27 | 65 00       |                 adc.d 000000         
4495:000 | DONE ins | em 16 16 | 005d29 | 85 00       |                 sta.d 000000         
4496:000 | DONE wsp | em 16 16 |        |             |
4497:000 | DONE ins | em 16 16 | 005d2b | 80 03       |                 bra 005d30           
4498:000 | DONE wsp | em 16 16 |        |             |
4499:000 | DONE lbl | em 16 16 | 005d2d |             | squote_compile                       
4500:000 | DONE cmt | em 16 16 |        |             |                 ; We're compiling, so we need SLITERAL. We use it's RTS while
4501:000 | DONE cmt | em 16 16 |        |             |                 ; we're at it
4502:000 | DONE ins | em 16 16 | 005d2d | 4c 4f 5d    |                 jmp 005d4f           JSR/RTS
4503:000 | DONE wsp | em 16 16 |        |             |
4504:000 | DONE lbl | em 16 16 | 005d30 |             | z_squote                             
4504:001 | DONE ins | em 16 16 | 005d30 | 60          |                 rts                  
4505:000 | DONE wsp | em 16 16 |        |             |
4506:000 | DONE wsp | em 16 16 |        |             |
4507:000 | DONE cmt | em 16 16 |        |             | ; -------------------------------------------------------------------
4508:000 | DONE cmt | em 16 16 |        |             | ; S>D ( n -- d ) 15 bytes / X cycles
4509:000 | DONE cmt | em 16 16 |        |             | ; Convert a single cell number to double cells, conserving the sign
4510:000 | DONE lbl | em 16 16 | 005d31 |             | xt_stod                              
4511:000 | DONE ins | em 16 16 | 005d31 | ca          |                 dex                  make room on stack
4512:000 | DONE ins | em 16 16 | 005d32 | ca          |                 dex                  
4513:000 | DONE ins | em 16 16 | 005d33 | 94 00       |                 sty.dx 00            
4514:000 | DONE wsp | em 16 16 |        |             |
4515:000 | DONE ins | em 16 16 | 005d35 | 98          |                 tya                  force flag check
4516:000 | DONE ins | em 16 16 | 005d36 | 10 05       |                 bpl 005d3d           
4517:000 | DONE wsp | em 16 16 |        |             |
4518:000 | DONE cmt | em 16 16 |        |             |                 ; negative number, extend sign
4519:000 | DONE ins | em 16 16 | 005d38 | a0 ff ff    |                 ldy.# 0ffff          
4520:000 | DONE ins | em 16 16 | 005d3b | 80 03       |                 bra 005d40           
4521:000 | DONE wsp | em 16 16 |        |             |
4522:000 | DONE lbl | em 16 16 | 005d3d |             | stod_pos                             
4523:000 | DONE cmt | em 16 16 |        |             |                 ; positive number
4524:000 | DONE ins | em 16 16 | 005d3d | a0 00 00    |                 ldy.# 0000           fall through
4525:000 | DONE wsp | em 16 16 |        |             |
4526:000 | DONE lbl | em 16 16 | 005d40 |             | z_stod                               
4526:001 | DONE ins | em 16 16 | 005d40 | 60          |                 rts                  
4527:000 | DONE wsp | em 16 16 |        |             |
4528:000 | DONE cmt | em 16 16 |        |             | ; -------------------------------------------------------------------
4529:000 | DONE cmt | em 16 16 |        |             | ; SIGN ( n -- ) 13 bytes / X cycles
4530:000 | DONE cmt | em 16 16 |        |             | ; If TOS is negative, add a minus sign to the pictured output. Code based on
4531:000 | DONE cmt | em 16 16 |        |             | ; https://github.com/philburk/pforth/blob/master/fth/system.fth
4532:000 | DONE cmt | em 16 16 |        |             | ; Origin Forth code is  0< IF [CHAR] - HOLD THEN
4533:000 | DONE lbl | em 16 16 | 005d41 |             | xt_sign                              
4534:000 | DONE dir | em 16 16 |        |             |         .!a16                        
4535:000 | DONE cmt | em 16 16 |        |             |                 ; See if number is negative
4536:000 | DONE ins | em 16 16 | 005d41 | 98          |                 tya                  force flag check
4537:000 | DONE ins | em 16 16 | 005d42 | 10 06       |                 bpl 005d4a           
4538:000 | DONE wsp | em 16 16 |        |             |
4539:000 | DONE cmt | em 16 16 |        |             |                 ; We're negative, overwrite number TOS
4540:000 | DONE ins | em 16 16 | 005d44 | a0 2d 00    |                 ldy.# 002d           ASCII for '-'
4541:000 | DONE wsp | em 16 16 |        |             |
4542:000 | DONE ins | em 16 16 | 005d47 | 4c 2d 5a    |                 jmp 005a2d           JSR/RTS, does not fall through
4543:000 | DONE wsp | em 16 16 |        |             |
4544:000 | DONE lbl | em 16 16 | 005d4a |             | sign_plus                            
4545:000 | DONE ins | em 16 16 | 005d4a | b4 00       |                 ldy.dx 00            get rid of number and leave
4546:000 | DONE ins | em 16 16 | 005d4c | e8          |                 inx                  
4547:000 | DONE ins | em 16 16 | 005d4d | e8          |                 inx                  
4548:000 | DONE wsp | em 16 16 |        |             |
4549:000 | DONE lbl | em 16 16 | 005d4e |             | z_sign                               
4549:001 | DONE ins | em 16 16 | 005d4e | 60          |                 rts                  
4550:000 | DONE wsp | em 16 16 |        |             |
4551:000 | DONE wsp | em 16 16 |        |             |
4552:000 | DONE cmt | em 16 16 |        |             | ; -------------------------------------------------------------------
4553:000 | DONE cmt | em 16 16 |        |             | ; SLITERAL ( addr u -- ) ( -- addr u ) X bytes / X cycles
4554:000 | DONE cmt | em 16 16 |        |             | ; At compile time, store string, at runtime, return address and length of string
4555:000 | DONE cmt | em 16 16 |        |             | ; on the Data Stack. Used for S" among other things. This routine uses tmp1,
4556:000 | DONE cmt | em 16 16 |        |             | ; tmp2
4557:000 | DONE lbl | em 16 16 | 005d4f |             | xt_sliteral                          
4558:000 | DONE dir | em 16 16 |        |             |         .!a16                        
4559:000 | DONE cmt | em 16 16 |        |             |                 ; We can't assume that ( addr u ) of the current string is in
4560:000 | DONE cmt | em 16 16 |        |             |                 ; a stable area, so we first have to move them to safety. Since
4561:000 | DONE cmt | em 16 16 |        |             |                 ; CP points to where the interpreter expects to be able to
4562:000 | DONE cmt | em 16 16 |        |             |                 ; continue in the code, we have to jump over the string. We use
4563:000 | DONE cmt | em 16 16 |        |             |                 ; JMP instead of BRA so we can use longer strings
4564:000 | DONE ins | em 16 16 | 005d4f | b5 00       |                 lda.dx 00            Address of string is NOS
4565:000 | DONE ins | em 16 16 | 005d51 | 85 1c       |                 sta.d 00001c         
4566:000 | DONE ins | em 16 16 | 005d53 | 84 1e       |                 sty.d 00001e         keep copy of string length
4567:000 | DONE wsp | em 16 16 |        |             |
4568:000 | DONE ins | em 16 16 | 005d55 | e2 20       |                 sep 20               
4568:001 | DONE ctl | em  8 16 |        |             |         .!a8
4569:000 | DONE ins | em  8 16 | 005d57 | a9 4c       |                 lda.# 04c            opcode for JMP
4570:000 | DONE ins | em  8 16 | 005d59 | 92 00       |                 sta.di 000000        STA (CP)
4571:000 | DONE ins | em  8 16 | 005d5b | c2 20       |                 rep 20               
4571:001 | DONE ctl | em 16 16 |        |             |         .!a16
4572:000 | DONE ins | em 16 16 | 005d5d | e6 00       |                 inc.d 000000         
4573:000 | DONE wsp | em 16 16 |        |             |
4574:000 | DONE cmt | em 16 16 |        |             |                 ; Our jump target is CP + 2 (for the length of the jump
4575:000 | DONE cmt | em 16 16 |        |             |                 ; instruction itself ) + the length of the string
4576:000 | DONE ins | em 16 16 | 005d5f | a5 1e       |                 lda.d 00001e         string length
4577:000 | DONE ins | em 16 16 | 005d61 | 1a          |                 inc.a                
4578:000 | DONE ins | em 16 16 | 005d62 | 1a          |                 inc.a                
4579:000 | DONE wsp | em 16 16 |        |             |
4580:000 | DONE ins | em 16 16 | 005d63 | 18          |                 clc                  
4581:000 | DONE ins | em 16 16 | 005d64 | 65 00       |                 adc.d 000000         current address
4582:000 | DONE ins | em 16 16 | 005d66 | 92 00       |                 sta.di 000000        store jump target
4583:000 | DONE wsp | em 16 16 |        |             |
4584:000 | DONE cmt | em 16 16 |        |             |                 ; update CP to move past JMP instruction
4585:000 | DONE ins | em 16 16 | 005d68 | e6 00       |                 inc.d 000000         
4586:000 | DONE ins | em 16 16 | 005d6a | e6 00       |                 inc.d 000000         
4587:000 | DONE wsp | em 16 16 |        |             |
4588:000 | DONE cmt | em 16 16 |        |             |                 ; now we can safely copy the code
4589:000 | DONE ins | em 16 16 | 005d6c | 88          |                 dey                  last offset is one less than length
4590:000 | DONE ins | em 16 16 | 005d6d | e2 20       |                 sep 20               
4590:001 | DONE ctl | em  8 16 |        |             |         .!a8
4591:000 | DONE lbl | em  8 16 | 005d6f |             | sl_loop                              
4592:000 | DONE ins | em  8 16 | 005d6f | b1 1c       |                 lda.diy 00001c       LDA (TMP1),Y
4593:000 | DONE ins | em  8 16 | 005d71 | 91 00       |                 sta.diy 000000       STA (CP),Y
4594:000 | DONE ins | em  8 16 | 005d73 | 88          |                 dey                  
4595:000 | DONE ins | em  8 16 | 005d74 | 10 f9       |                 bpl 005d6f           
4596:000 | DONE wsp | em  8 16 |        |             |
4597:000 | DONE ins | em  8 16 | 005d76 | c2 20       |                 rep 20               
4597:001 | DONE ctl | em 16 16 |        |             |         .!a16
4598:000 | DONE cmt | em 16 16 |        |             |                 ; keep old CP as new address of string
4599:000 | DONE ins | em 16 16 | 005d78 | a5 00       |                 lda.d 000000         
4600:000 | DONE ins | em 16 16 | 005d7a | 85 1c       |                 sta.d 00001c         overwrites original address
4601:000 | DONE wsp | em 16 16 |        |             |
4602:000 | DONE cmt | em 16 16 |        |             |                 ; update CP
4603:000 | DONE ins | em 16 16 | 005d7c | 18          |                 clc                  
4604:000 | DONE ins | em 16 16 | 005d7d | 65 1e       |                 adc.d 00001e         length of string
4605:000 | DONE ins | em 16 16 | 005d7f | 85 00       |                 sta.d 000000         
4606:000 | DONE wsp | em 16 16 |        |             |
4607:000 | DONE cmt | em 16 16 |        |             |                 ; Compile a subroutine jump to the runtime of SLITERAL that
4608:000 | DONE cmt | em 16 16 |        |             |                 ; pushes the new ( addr u ) pair to the Data Stack. When we're
4609:000 | DONE cmt | em 16 16 |        |             |                 ; done, the code will look like this:
4610:000 | DONE cmt | em 16 16 |        |             |                 ;
4611:000 | DONE cmt | em 16 16 |        |             |                 ; xt -->    jmp a
4612:000 | DONE cmt | em 16 16 |        |             |                 ;           <string data bytes>
4613:000 | DONE cmt | em 16 16 |        |             |                 ;  a -->    jsr sliteral_rt
4614:000 | DONE cmt | em 16 16 |        |             |                 ;           <string address>
4615:000 | DONE cmt | em 16 16 |        |             |                 ;           <string length>
4616:000 | DONE cmt | em 16 16 |        |             |                 ; rts -->
4617:000 | DONE cmt | em 16 16 |        |             |                 ;
4618:000 | DONE cmt | em 16 16 |        |             |                 ; This means we'll have to adjust the return address for two
4619:000 | DONE cmt | em 16 16 |        |             |                 ; cells, not just one
4620:000 | DONE ins | em 16 16 | 005d81 | f4 9a 5d    |                 phe.# 005d9a         
4621:000 | DONE ins | em 16 16 | 005d84 | 20 3f 69    |                 jsr 00693f           
4622:000 | DONE wsp | em 16 16 |        |             |
4623:000 | DONE cmt | em 16 16 |        |             |                 ; We want to have the addr end up as NOS and the length as TOS,
4624:000 | DONE cmt | em 16 16 |        |             |                 ; so we store the address first
4625:000 | DONE ins | em 16 16 | 005d87 | a5 1c       |                 lda.d 00001c         new address of string
4626:000 | DONE ins | em 16 16 | 005d89 | 48          |                 pha                  
4627:000 | DONE ins | em 16 16 | 005d8a | 20 3a 69    |                 jsr 00693a           
4628:000 | DONE wsp | em 16 16 |        |             |
4629:000 | DONE ins | em 16 16 | 005d8d | a5 1e       |                 lda.d 00001e         
4630:000 | DONE ins | em 16 16 | 005d8f | 48          |                 pha                  
4631:000 | DONE ins | em 16 16 | 005d90 | 20 3a 69    |                 jsr 00693a           
4632:000 | DONE wsp | em 16 16 |        |             |
4633:000 | DONE cmt | em 16 16 |        |             |                 ; all done, clean up and leave
4634:000 | DONE ins | em 16 16 | 005d93 | b4 02       |                 ldy.dx 02            2DROP
4635:000 | DONE ins | em 16 16 | 005d95 | e8          |                 inx                  
4636:000 | DONE ins | em 16 16 | 005d96 | e8          |                 inx                  
4637:000 | DONE ins | em 16 16 | 005d97 | e8          |                 inx                  
4638:000 | DONE ins | em 16 16 | 005d98 | e8          |                 inx                  
4639:000 | DONE wsp | em 16 16 |        |             |
4640:000 | DONE lbl | em 16 16 | 005d99 |             | z_sliteral                           
4640:001 | DONE ins | em 16 16 | 005d99 | 60          |                 rts                  
4641:000 | DONE wsp | em 16 16 |        |             |
4642:000 | DONE lbl | em 16 16 | 005d9a |             | sliteral_rt                          
4643:000 | DONE cmt | em 16 16 |        |             |                 ; Run time behaviour of SLITERAL: Push ( addr u ) of string to
4644:000 | DONE cmt | em 16 16 |        |             |                 ; the Data Stack. We arrive here with the return address as the
4645:000 | DONE cmt | em 16 16 |        |             |                 ; top of Return Stack, which points to the address of the string
4646:000 | DONE wsp | em 16 16 |        |             |
4647:000 | DONE cmt | em 16 16 |        |             |                 ; Make room on stack, which also frees Y for other use
4648:000 | DONE ins | em 16 16 | 005d9a | ca          |                 dex                  
4649:000 | DONE ins | em 16 16 | 005d9b | ca          |                 dex                  
4650:000 | DONE ins | em 16 16 | 005d9c | ca          |                 dex                  
4651:000 | DONE ins | em 16 16 | 005d9d | ca          |                 dex                  
4652:000 | DONE ins | em 16 16 | 005d9e | 94 02       |                 sty.dx 02            
4653:000 | DONE wsp | em 16 16 |        |             |
4654:000 | DONE cmt | em 16 16 |        |             |                 ; Get the address of the string address off the stack and
4655:000 | DONE cmt | em 16 16 |        |             |                 ; increase by one because of the RTS mechanics
4656:000 | DONE ins | em 16 16 | 005da0 | 7a          |                 ply                  
4657:000 | DONE ins | em 16 16 | 005da1 | c8          |                 iny                  
4658:000 | DONE wsp | em 16 16 |        |             |
4659:000 | DONE ins | em 16 16 | 005da2 | b9 00 00    |                 lda.y 0000           LDA $0000,Y
4660:000 | DONE ins | em 16 16 | 005da5 | 95 00       |                 sta.dx 00            save string address as NOS
4661:000 | DONE ins | em 16 16 | 005da7 | c8          |                 iny                  
4662:000 | DONE ins | em 16 16 | 005da8 | c8          |                 iny                  
4663:000 | DONE ins | em 16 16 | 005da9 | b9 00 00    |                 lda.y 0000           get length of string, will be TOS ...
4664:000 | DONE wsp | em 16 16 |        |             |
4665:000 | DONE ins | em 16 16 | 005dac | c8          |                 iny                  ... first, though, repair return jump
4666:000 | DONE ins | em 16 16 | 005dad | 5a          |                 phy                  
4667:000 | DONE wsp | em 16 16 |        |             |
4668:000 | DONE ins | em 16 16 | 005dae | a8          |                 tay                  TOS is now length of string
4669:000 | DONE wsp | em 16 16 |        |             |
4670:000 | DONE ins | em 16 16 | 005daf | 60          |                 rts                  
4671:000 | DONE wsp | em 16 16 |        |             |
4672:000 | DONE cmt | em 16 16 |        |             | ; -------------------------------------------------------------------
4673:000 | DONE cmt | em 16 16 |        |             | ; SM/REM ( d n1 -- n2 n3) X bytes / X cycles
4674:000 | DONE cmt | em 16 16 |        |             | ; Symmetic signed division. Compare FM/MOD. Code from Gforth, see
4675:000 | DONE cmt | em 16 16 |        |             | ; https://groups.google.com/forum/#!topic/comp.lang.forth/_bx4dJFb9R0
4676:000 | DONE cmt | em 16 16 |        |             | ; and http://git.savannah.gnu.org/cgit/gforth.git/tree/prim ; see
4677:000 | DONE cmt | em 16 16 |        |             | ; http://www.figuk.plus.com/build/arith.htm for variants. Forth is
4678:000 | DONE cmt | em 16 16 |        |             | ; SM/REM OVER >R DUP >R ABS -ROT DABS ROT UM/MOD R>
4679:000 | DONE cmt | em 16 16 |        |             | ; R@ XOR 0< IF NEGATE THEN R> 0< IF SWAP NEGATE SWAP THEN ;
4680:000 | DONE cmt | em 16 16 |        |             | ; TODO optimize in assembler
4681:000 | DONE lbl | em 16 16 | 005db0 |             | xt_smrem                             
4682:000 | DONE dir | em 16 16 |        |             |         .!a16                        
4683:000 | DONE ins | em 16 16 | 005db0 | 20 cf 5b    |                 jsr 005bcf           
4684:000 | DONE wsp | em 16 16 |        |             |
4685:000 | DONE ins | em 16 16 | 005db3 | 5a          |                 phy                  >R
4686:000 | DONE ins | em 16 16 | 005db4 | b4 00       |                 ldy.dx 00            
4687:000 | DONE ins | em 16 16 | 005db6 | e8          |                 inx                  
4688:000 | DONE ins | em 16 16 | 005db7 | e8          |                 inx                  
4689:000 | DONE wsp | em 16 16 |        |             |
4690:000 | DONE ins | em 16 16 | 005db8 | ca          |                 dex                  DUP
4691:000 | DONE ins | em 16 16 | 005db9 | ca          |                 dex                  
4692:000 | DONE ins | em 16 16 | 005dba | 94 00       |                 sty.dx 00            
4693:000 | DONE wsp | em 16 16 |        |             |
4694:000 | DONE ins | em 16 16 | 005dbc | 5a          |                 phy                  >R
4695:000 | DONE ins | em 16 16 | 005dbd | b4 00       |                 ldy.dx 00            
4696:000 | DONE ins | em 16 16 | 005dbf | e8          |                 inx                  
4697:000 | DONE ins | em 16 16 | 005dc0 | e8          |                 inx                  
4698:000 | DONE wsp | em 16 16 |        |             |
4699:000 | DONE ins | em 16 16 | 005dc1 | 20 81 54    |                 jsr 005481           ABS
4700:000 | DONE ins | em 16 16 | 005dc4 | 20 3c 53    |                 jsr 00533c           -ROT
4701:000 | DONE ins | em 16 16 | 005dc7 | 20 19 58    |                 jsr 005819           DABS
4702:000 | DONE ins | em 16 16 | 005dca | 20 de 5c    |                 jsr 005cde           ROT
4703:000 | DONE ins | em 16 16 | 005dcd | 20 06 5f    |                 jsr 005f06           UM/MOD
4704:000 | DONE wsp | em 16 16 |        |             |
4705:000 | DONE ins | em 16 16 | 005dd0 | ca          |                 dex                  R>
4706:000 | DONE ins | em 16 16 | 005dd1 | ca          |                 dex                  
4707:000 | DONE ins | em 16 16 | 005dd2 | 94 00       |                 sty.dx 00            
4708:000 | DONE ins | em 16 16 | 005dd4 | 7a          |                 ply                  
4709:000 | DONE wsp | em 16 16 |        |             |
4710:000 | DONE ins | em 16 16 | 005dd5 | ca          |                 dex                  R@
4711:000 | DONE ins | em 16 16 | 005dd6 | ca          |                 dex                  
4712:000 | DONE ins | em 16 16 | 005dd7 | 94 00       |                 sty.dx 00            
4713:000 | DONE ins | em 16 16 | 005dd9 | 7a          |                 ply                  
4714:000 | DONE ins | em 16 16 | 005dda | 5a          |                 phy                  
4715:000 | DONE wsp | em 16 16 |        |             |
4716:000 | DONE ins | em 16 16 | 005ddb | 20 e9 5f    |                 jsr 005fe9           XOR
4717:000 | DONE wsp | em 16 16 |        |             |
4718:000 | DONE ins | em 16 16 | 005dde | 98          |                 tya                  0< IF
4719:000 | DONE ins | em 16 16 | 005ddf | 10 09       |                 bpl 005dea           
4720:000 | DONE wsp | em 16 16 |        |             |
4721:000 | DONE ins | em 16 16 | 005de1 | b4 00       |                 ldy.dx 00            from IF
4722:000 | DONE ins | em 16 16 | 005de3 | e8          |                 inx                  
4723:000 | DONE ins | em 16 16 | 005de4 | e8          |                 inx                  
4724:000 | DONE wsp | em 16 16 |        |             |
4725:000 | DONE ins | em 16 16 | 005de5 | 20 32 5b    |                 jsr 005b32           NEGATE
4726:000 | DONE ins | em 16 16 | 005de8 | 80 04       |                 bra 005dee           
4727:000 | DONE lbl | em 16 16 | 005dea |             | smrem_1                              
4728:000 | DONE ins | em 16 16 | 005dea | b4 00       |                 ldy.dx 00            from IF
4729:000 | DONE ins | em 16 16 | 005dec | e8          |                 inx                  
4730:000 | DONE ins | em 16 16 | 005ded | e8          |                 inx                  
4731:000 | DONE wsp | em 16 16 |        |             |
4732:000 | DONE lbl | em 16 16 | 005dee |             | smrem_1_1                            
4733:000 | DONE ins | em 16 16 | 005dee | ca          |                 dex                  R>
4734:000 | DONE ins | em 16 16 | 005def | ca          |                 dex                  
4735:000 | DONE ins | em 16 16 | 005df0 | 94 00       |                 sty.dx 00            
4736:000 | DONE ins | em 16 16 | 005df2 | 7a          |                 ply                  
4737:000 | DONE wsp | em 16 16 |        |             |
4738:000 | DONE ins | em 16 16 | 005df3 | 98          |                 tya                  0< IF
4739:000 | DONE ins | em 16 16 | 005df4 | 10 0f       |                 bpl 005e05           
4740:000 | DONE wsp | em 16 16 |        |             |
4741:000 | DONE ins | em 16 16 | 005df6 | b4 00       |                 ldy.dx 00            from IF
4742:000 | DONE ins | em 16 16 | 005df8 | e8          |                 inx                  
4743:000 | DONE ins | em 16 16 | 005df9 | e8          |                 inx                  
4744:000 | DONE wsp | em 16 16 |        |             |
4745:000 | DONE ins | em 16 16 | 005dfa | 20 41 5e    |                 jsr 005e41           
4746:000 | DONE ins | em 16 16 | 005dfd | 20 32 5b    |                 jsr 005b32           
4747:000 | DONE ins | em 16 16 | 005e00 | 20 41 5e    |                 jsr 005e41           
4748:000 | DONE ins | em 16 16 | 005e03 | 80 04       |                 bra 005e09           
4749:000 | DONE wsp | em 16 16 |        |             |
4750:000 | DONE lbl | em 16 16 | 005e05 |             | smrem_2                              
4751:000 | DONE ins | em 16 16 | 005e05 | b4 00       |                 ldy.dx 00            
4752:000 | DONE ins | em 16 16 | 005e07 | e8          |                 inx                  
4753:000 | DONE ins | em 16 16 | 005e08 | e8          |                 inx                  
4754:000 | DONE wsp | em 16 16 |        |             |
4755:000 | DONE wsp | em 16 16 |        |             |
4756:000 | DONE lbl | em 16 16 | 005e09 |             | smrem_2_1                            
4757:000 | DONE wsp | em 16 16 |        |             |
4758:000 | DONE lbl | em 16 16 | 005e09 |             | z_smrem                              
4758:001 | DONE ins | em 16 16 | 005e09 | 60          |                 rts                  
4759:000 | DONE wsp | em 16 16 |        |             |
4760:000 | DONE wsp | em 16 16 |        |             |
4761:000 | DONE cmt | em 16 16 |        |             | ; -------------------------------------------------------------------
4762:000 | DONE cmt | em 16 16 |        |             | ; SOURCE ( -- addr u ) 12 bytes / X cycles
4763:000 | DONE cmt | em 16 16 |        |             | ; Return the address and size of current input buffer. Replaces TIB and #TIB in
4764:000 | DONE cmt | em 16 16 |        |             | ; ANSI Forth
4765:000 | DONE wsp | em 16 16 |        |             |
4766:000 | DONE lbl | em 16 16 | 005e0a |             | xt_source                            
4767:000 | DONE ins | em 16 16 | 005e0a | ca          |                 dex                  make room on Data Stack
4768:000 | DONE ins | em 16 16 | 005e0b | ca          |                 dex                  
4769:000 | DONE ins | em 16 16 | 005e0c | ca          |                 dex                  
4770:000 | DONE ins | em 16 16 | 005e0d | ca          |                 dex                  
4771:000 | DONE ins | em 16 16 | 005e0e | 94 02       |                 sty.dx 02            
4772:000 | DONE wsp | em 16 16 |        |             |
4773:000 | DONE ins | em 16 16 | 005e10 | a5 08       |                 lda.d 000008         address of current input buffer as NOS
4774:000 | DONE ins | em 16 16 | 005e12 | 95 00       |                 sta.dx 00            
4775:000 | DONE wsp | em 16 16 |        |             |
4776:000 | DONE ins | em 16 16 | 005e14 | a4 0a       |                 ldy.d 00000a         length of current input buffer as TOS
4777:000 | DONE wsp | em 16 16 |        |             |
4778:000 | DONE lbl | em 16 16 | 005e16 |             | z_source                             
4778:001 | DONE ins | em 16 16 | 005e16 | 60          |                 rts                  
4779:000 | DONE wsp | em 16 16 |        |             |
4780:000 | DONE cmt | em 16 16 |        |             | ; -------------------------------------------------------------------
4781:000 | DONE cmt | em 16 16 |        |             | ; SOURCE-ID ( -- n ) 6 bytes / 13 cycles
4782:000 | DONE cmt | em 16 16 |        |             | ; Identify the input source unless it is a block (s. Conklin & Rather p. 156).
4783:000 | DONE cmt | em 16 16 |        |             | ; Since we don't have blocks (yet), this will give the input source: 0 is
4784:000 | DONE cmt | em 16 16 |        |             | ; keyboard, -1 (0ffff) is character string, and a text file gives the fileid.
4785:000 | DONE lbl | em 16 16 | 005e17 |             | xt_source-id                         
4786:000 | DONE dir | em 16 16 |        |             |         .!xy16                       
4787:000 | DONE ins | em 16 16 | 005e17 | ca          |                 dex                  
4788:000 | DONE ins | em 16 16 | 005e18 | ca          |                 dex                  
4789:000 | DONE ins | em 16 16 | 005e19 | 94 00       |                 sty.dx 00            
4790:000 | DONE ins | em 16 16 | 005e1b | a4 06       |                 ldy.d 000006         
4791:000 | DONE wsp | em 16 16 |        |             |
4792:000 | DONE lbl | em 16 16 | 005e1d |             | z_source-id                          
4792:001 | DONE ins | em 16 16 | 005e1d | 60          |                 rts                  
4793:000 | DONE wsp | em 16 16 |        |             |
4794:000 | DONE cmt | em 16 16 |        |             | ; -------------------------------------------------------------------
4795:000 | DONE cmt | em 16 16 |        |             | ; SPACE ( -- ) X bytes / X cycles
4796:000 | DONE cmt | em 16 16 |        |             | ; Print one ASCII space character
4797:000 | DONE cmt | em 16 16 |        |             | ; TODO change to call EMIT
4798:000 | DONE lbl | em 16 16 | 005e1e |             | xt_space                             
4799:000 | DONE ins | em 16 16 | 005e1e | a9 20 00    |                 lda.# AscSP          
4800:000 | DONE ins | em 16 16 | 005e21 | 6c 0e 00    |                 jmp.i 00000e         JSR/RTS
4801:000 | DONE wsp | em 16 16 |        |             |
4802:000 | DONE lbl | em 16 16 | 005e24 |             | z_space                              ; never reached
4803:000 | DONE wsp | em 16 16 |        |             |
4804:000 | DONE wsp | em 16 16 |        |             |
4805:000 | DONE cmt | em 16 16 |        |             | ; -------------------------------------------------------------------
4806:000 | DONE cmt | em 16 16 |        |             | ; SPACES ( u -- ) 12 bytes / X cycles
4807:000 | DONE cmt | em 16 16 |        |             | ; Print u spaces. Calls SPACE, because this is probably interactive and humans
4808:000 | DONE cmt | em 16 16 |        |             | ; are slow enough we don't have to care about speed.
4809:000 | DONE lbl | em 16 16 | 005e24 |             | xt_spaces                            
4810:000 | DONE dir | em 16 16 |        |             |         .!a16                        
4811:000 | DONE dir | em 16 16 |        |             |         .!xy16                       
4812:000 | DONE lbl | em 16 16 | 005e24 |             | @                                    
4813:000 | DONE ins | em 16 16 | 005e24 | 88          |                 dey                  this also handles case u=0
4814:000 | DONE ins | em 16 16 | 005e25 | 30 05       |                 bmi 005e2c           
4815:000 | DONE wsp | em 16 16 |        |             |
4816:000 | DONE ins | em 16 16 | 005e27 | 20 1e 5e    |                 jsr 005e1e           
4817:000 | DONE ins | em 16 16 | 005e2a | 80 f8       |                 bra 005e24           
4818:000 | DONE wsp | em 16 16 |        |             |
4819:000 | DONE lbl | em 16 16 | 005e2c |             | spaces_done                          
4820:000 | DONE ins | em 16 16 | 005e2c | b4 00       |                 ldy.dx 00            DROP
4821:000 | DONE ins | em 16 16 | 005e2e | e8          |                 inx                  
4822:000 | DONE ins | em 16 16 | 005e2f | e8          |                 inx                  
4823:000 | DONE wsp | em 16 16 |        |             |
4824:000 | DONE lbl | em 16 16 | 005e30 |             | z_spaces                             
4824:001 | DONE ins | em 16 16 | 005e30 | 60          |                 rts                  
4825:000 | DONE wsp | em 16 16 |        |             |
4826:000 | DONE cmt | em 16 16 |        |             | ; -------------------------------------------------------------------
4827:000 | DONE cmt | em 16 16 |        |             | ; STAR ( n n -- n ) 16*16 -> 16  X bytes / X cycles
4828:000 | DONE cmt | em 16 16 |        |             | ; Multiply two signed 16 bit numbers, returning a 16 bit result. This is nothing
4829:000 | DONE cmt | em 16 16 |        |             | ; more than UM* DROP
4830:000 | DONE lbl | em 16 16 | 005e31 |             | xt_star                              
4831:000 | DONE ins | em 16 16 | 005e31 | 20 a7 5e    |                 jsr 005ea7           
4832:000 | DONE ins | em 16 16 | 005e34 | b4 00       |                 ldy.dx 00            DROP
4833:000 | DONE ins | em 16 16 | 005e36 | e8          |                 inx                  
4834:000 | DONE ins | em 16 16 | 005e37 | e8          |                 inx                  
4835:000 | DONE wsp | em 16 16 |        |             |
4836:000 | DONE lbl | em 16 16 | 005e38 |             | z_star                               
4836:001 | DONE ins | em 16 16 | 005e38 | 60          |                 rts                  
4837:000 | DONE wsp | em 16 16 |        |             |
4838:000 | DONE wsp | em 16 16 |        |             |
4839:000 | DONE cmt | em 16 16 |        |             | ; -------------------------------------------------------------------
4840:000 | DONE cmt | em 16 16 |        |             | ; STATE ( -- addr ) 7 bytes / 12 cycles
4841:000 | DONE cmt | em 16 16 |        |             | ; Return the address of a cell containing the compilation-state flag. STATE
4842:000 | DONE cmt | em 16 16 |        |             | ; is true when in compilation state, false otherwise. STATE should not be
4843:000 | DONE cmt | em 16 16 |        |             | ; changed directly by the user; see
4844:000 | DONE cmt | em 16 16 |        |             | ; http://forth.sourceforge.net/standard/dpans/dpans6.htm#6.1.2250
4845:000 | DONE lbl | em 16 16 | 005e39 |             | xt_state                             
4846:000 | DONE dir | em 16 16 |        |             |         .!xy16                       
4847:000 | DONE ins | em 16 16 | 005e39 | ca          |                 dex                  
4848:000 | DONE ins | em 16 16 | 005e3a | ca          |                 dex                  
4849:000 | DONE ins | em 16 16 | 005e3b | 94 00       |                 sty.dx 00            
4850:000 | DONE ins | em 16 16 | 005e3d | a0 14 00    |                 ldy.# 000014         
4851:000 | DONE wsp | em 16 16 |        |             |
4852:000 | DONE lbl | em 16 16 | 005e40 |             | z_state                              
4852:001 | DONE ins | em 16 16 | 005e40 | 60          |                 rts                  
4853:000 | DONE wsp | em 16 16 |        |             |
4854:000 | DONE wsp | em 16 16 |        |             |
4855:000 | DONE cmt | em 16 16 |        |             | ; -------------------------------------------------------------------
4856:000 | DONE cmt | em 16 16 |        |             | ; SWAP ( n m -- m n ) 5 bytes / 12 cycles
4857:000 | DONE cmt | em 16 16 |        |             | ; Exchange TOS with NOS. We don't check if there are enough elements on the Data
4858:000 | DONE cmt | em 16 16 |        |             | ; Stack; underflow errors will go undetected and return garbage.
4859:000 | DONE lbl | em 16 16 | 005e41 |             | xt_swap                              
4860:000 | DONE dir | em 16 16 |        |             |         .!a16                        
4861:000 | DONE dir | em 16 16 |        |             |         .!xy16                       
4862:000 | DONE ins | em 16 16 | 005e41 | b5 00       |                 lda.dx 00            
4863:000 | DONE ins | em 16 16 | 005e43 | 94 00       |                 sty.dx 00            
4864:000 | DONE ins | em 16 16 | 005e45 | a8          |                 tay                  
4865:000 | DONE wsp | em 16 16 |        |             |
4866:000 | DONE lbl | em 16 16 | 005e46 |             | z_swap                               
4866:001 | DONE ins | em 16 16 | 005e46 | 60          |                 rts                  
4867:000 | DONE wsp | em 16 16 |        |             |
4868:000 | DONE wsp | em 16 16 |        |             |
4869:000 | DONE cmt | em 16 16 |        |             | ; -------------------------------------------------------------------
4870:000 | DONE cmt | em 16 16 |        |             | ; TO ( n "name" -- ) X bytes / X cycles
4871:000 | DONE cmt | em 16 16 |        |             | ; Change the value of a VALUE. Note that in theory this would work with CONSTANT
4872:000 | DONE cmt | em 16 16 |        |             | ; as well, but we frown on this behavior. Note that while it is in violation of
4873:000 | DONE cmt | em 16 16 |        |             | ; ANS Forth, we can change the number in a VALUE with <number> ' <value> >BODY
4874:000 | DONE cmt | em 16 16 |        |             | ; +!  just as you can with Gforth
4875:000 | DONE cmt | em 16 16 |        |             | ; TODO unroll this to assembler
4876:000 | DONE lbl | em 16 16 | 005e47 |             | xt_to                                
4877:000 | DONE ins | em 16 16 | 005e47 | 20 48 54    |                 jsr 005448           '
4878:000 | DONE ins | em 16 16 | 005e4a | 20 37 51    |                 jsr 005137           >BODY
4879:000 | DONE ins | em 16 16 | 005e4d | 20 ce 52    |                 jsr 0052ce           !
4880:000 | DONE wsp | em 16 16 |        |             |
4881:000 | DONE lbl | em 16 16 | 005e50 |             | z_to                                 
4881:001 | DONE ins | em 16 16 | 005e50 | 60          |                 rts                  
4882:000 | DONE wsp | em 16 16 |        |             |
4883:000 | DONE wsp | em 16 16 |        |             |
4884:000 | DONE cmt | em 16 16 |        |             | ; -------------------------------------------------------------------
4885:000 | DONE cmt | em 16 16 |        |             | ; TRUE ( -- f ) 7 bytes / 12 cycles
4886:000 | DONE cmt | em 16 16 |        |             | ; Pushes value $FFFF for Forth true on Data Stack
4887:000 | DONE lbl | em 16 16 | 005e51 |             | xt_true                              
4888:000 | DONE dir | em 16 16 |        |             |         .!a16                        
4889:000 | DONE dir | em 16 16 |        |             |         .!xy16                       
4890:000 | DONE ins | em 16 16 | 005e51 | ca          |                 dex                  
4891:000 | DONE ins | em 16 16 | 005e52 | ca          |                 dex                  
4892:000 | DONE ins | em 16 16 | 005e53 | 94 00       |                 sty.dx 00            
4893:000 | DONE ins | em 16 16 | 005e55 | a0 ff ff    |                 ldy.# 0ffff          
4894:000 | DONE wsp | em 16 16 |        |             |
4895:000 | DONE lbl | em 16 16 | 005e58 |             | z_true                               
4895:001 | DONE ins | em 16 16 | 005e58 | 60          |                 rts                  
4896:000 | DONE wsp | em 16 16 |        |             |
4897:000 | DONE cmt | em 16 16 |        |             | ; -------------------------------------------------------------------
4898:000 | DONE cmt | em 16 16 |        |             | ; TUCK ( n m -- m n m ) 8 bytes / 19 cycles
4899:000 | DONE cmt | em 16 16 |        |             | ; Insert TOS below NOS. We do not check if there are enough elements on the Data
4900:000 | DONE cmt | em 16 16 |        |             | ; Stack, underflow will go undetected and return garbage.
4901:000 | DONE lbl | em 16 16 | 005e59 |             | xt_tuck                              
4902:000 | DONE dir | em 16 16 |        |             |         .!a16                        
4903:000 | DONE dir | em 16 16 |        |             |         .!xy16                       
4904:000 | DONE ins | em 16 16 | 005e59 | ca          |                 dex                  
4905:000 | DONE ins | em 16 16 | 005e5a | ca          |                 dex                  
4906:000 | DONE ins | em 16 16 | 005e5b | b5 02       |                 lda.dx 2             
4907:000 | DONE ins | em 16 16 | 005e5d | 95 00       |                 sta.dx 0             
4908:000 | DONE ins | em 16 16 | 005e5f | 94 02       |                 sty.dx 2             
4909:000 | DONE wsp | em 16 16 |        |             |
4910:000 | DONE lbl | em 16 16 | 005e61 |             | z_tuck                               
4910:001 | DONE ins | em 16 16 | 005e61 | 60          |                 rts                  
4911:000 | DONE wsp | em 16 16 |        |             |
4912:000 | DONE cmt | em 16 16 |        |             | ; -------------------------------------------------------------------
4913:000 | DONE cmt | em 16 16 |        |             | ; TYPE  ( addr u -- ) 23+ bytes / X cycles
4914:000 | DONE cmt | em 16 16 |        |             | ; Print character string if u is not 0. Works though EMIT and is affect by the
4915:000 | DONE cmt | em 16 16 |        |             | ; OUTPUT revectoring
4916:000 | DONE cmt | em 16 16 |        |             | ; TODO LATER add PAUSE here for multitasking
4917:000 | DONE lbl | em 16 16 | 005e62 |             | xt_type                              
4918:000 | DONE dir | em 16 16 |        |             |         .!a16                        
4919:000 | DONE dir | em 16 16 |        |             |         .!xy16                       
4920:000 | DONE cmt | em 16 16 |        |             |                 ; just leave if u is zero (empty string)
4921:000 | DONE ins | em 16 16 | 005e62 | 98          |                 tya                  force flag check of TOS
4922:000 | DONE ins | em 16 16 | 005e63 | f0 17       |                 beq 005e7c           
4923:000 | DONE wsp | em 16 16 |        |             |
4924:000 | DONE ins | em 16 16 | 005e65 | b5 00       |                 lda.dx 00            get address from NOS
4925:000 | DONE ins | em 16 16 | 005e67 | 85 1c       |                 sta.d 00001c         
4926:000 | DONE ins | em 16 16 | 005e69 | 84 1e       |                 sty.d 00001e         number of chars is TOS
4927:000 | DONE ins | em 16 16 | 005e6b | a0 00 00    |                 ldy.# 0000           
4928:000 | DONE ins | em 16 16 | 005e6e | e2 20       |                 sep 20               
4928:001 | DONE ctl | em  8 16 |        |             |         .!a8
4929:000 | DONE lbl | em  8 16 | 005e70 |             | type_loop                            
4930:000 | DONE ins | em  8 16 | 005e70 | b1 1c       |                 lda.diy 00001c       LDA (TMP1),Y
4931:000 | DONE ins | em  8 16 | 005e72 | 20 99 58    |                 jsr 005899           
4932:000 | DONE ins | em  8 16 | 005e75 | c8          |                 iny                  
4933:000 | DONE ins | em  8 16 | 005e76 | c4 1e       |                 cpy.d 00001e         
4934:000 | DONE ins | em  8 16 | 005e78 | d0 f6       |                 bne 005e70           
4935:000 | DONE wsp | em  8 16 |        |             |
4936:000 | DONE ins | em  8 16 | 005e7a | c2 20       |                 rep 20               
4936:001 | DONE ctl | em 16 16 |        |             |         .!a16
4937:000 | DONE lbl | em 16 16 | 005e7c |             | type_done                            
4938:000 | DONE cmt | em 16 16 |        |             |                 ; clear stack
4939:000 | DONE ins | em 16 16 | 005e7c | b4 02       |                 ldy.dx 02            
4940:000 | DONE ins | em 16 16 | 005e7e | e8          |                 inx                  
4941:000 | DONE ins | em 16 16 | 005e7f | e8          |                 inx                  
4942:000 | DONE ins | em 16 16 | 005e80 | e8          |                 inx                  
4943:000 | DONE ins | em 16 16 | 005e81 | e8          |                 inx                  
4944:000 | DONE wsp | em 16 16 |        |             |
4945:000 | DONE wsp | em 16 16 |        |             |
4946:000 | DONE lbl | em 16 16 | 005e82 |             | z_type                               
4946:001 | DONE ins | em 16 16 | 005e82 | 60          |                 rts                  
4947:000 | DONE wsp | em 16 16 |        |             |
4948:000 | DONE wsp | em 16 16 |        |             |
4949:000 | DONE cmt | em 16 16 |        |             | ; -------------------------------------------------------------------
4950:000 | DONE cmt | em 16 16 |        |             | ; UDOT ( n -- ) X bytes / X cycles
4951:000 | DONE cmt | em 16 16 |        |             | ; Print unsigned number. This is based on the Forth word
4952:000 | DONE cmt | em 16 16 |        |             | ; 0 <# #S #> TYPE SPACE but uses the general print_u routine
4953:000 | DONE cmt | em 16 16 |        |             | ; that .S and DUMP use as well.
4954:000 | DONE lbl | em 16 16 | 005e83 |             | xt_udot                              
4955:000 | DONE ins | em 16 16 | 005e83 | 20 7e 69    |                 jsr 00697e           ( n -- )
4956:000 | DONE wsp | em 16 16 |        |             |
4957:000 | DONE ins | em 16 16 | 005e86 | a9 20 00    |                 lda.# 0020           SPACE
4958:000 | DONE ins | em 16 16 | 005e89 | 4c 99 58    |                 jmp 005899           JSR/RTS
4959:000 | DONE wsp | em 16 16 |        |             |
4960:000 | DONE lbl | em 16 16 | 005e8c |             | z_udot                               ; not reached
4961:000 | DONE wsp | em 16 16 |        |             |
4962:000 | DONE wsp | em 16 16 |        |             |
4963:000 | DONE wsp | em 16 16 |        |             |
4964:000 | DONE cmt | em 16 16 |        |             | ; -------------------------------------------------------------------
4965:000 | DONE cmt | em 16 16 |        |             | ; UDMOD ( ud u -- u ud ) 32/16 --> 32  X bytes / X cycles
4966:000 | DONE cmt | em 16 16 |        |             | ; Devide double-cell number by single-cell number, producing a double-cell
4967:000 | DONE cmt | em 16 16 |        |             | ; result and a single-cell remainder. Based on
4968:000 | DONE cmt | em 16 16 |        |             | ; Gforth  : UD/MOD  >R 0 R@ UM/MOD R> SWAP >R UM/MOD R> ;
4969:000 | DONE cmt | em 16 16 |        |             | ; pForth  : UD/MOD  >R 0 R@ UM/MOD ROT ROT R> UM/MOD ROT ;
4970:000 | DONE cmt | em 16 16 |        |             | ; This doesn't seem to be used anywhere else but for # (HASH) in coverting
4971:000 | DONE cmt | em 16 16 |        |             | ; pictured numerical output, though pForth claims it uses UM/MOD for that
4972:000 | DONE cmt | em 16 16 |        |             | ; At some point, we need to get back to UM/MOD because it's optimized
4973:000 | DONE lbl | em 16 16 | 005e8c |             | xt_udmod                             
4974:000 | DONE ins | em 16 16 | 005e8c | 20 c0 51    |                 jsr 0051c0           
4975:000 | DONE ins | em 16 16 | 005e8f | 20 68 53    |                 jsr 005368           
4976:000 | DONE ins | em 16 16 | 005e92 | 20 a5 5c    |                 jsr 005ca5           
4977:000 | DONE ins | em 16 16 | 005e95 | 20 06 5f    |                 jsr 005f06           
4978:000 | DONE ins | em 16 16 | 005e98 | 20 de 5c    |                 jsr 005cde           
4979:000 | DONE ins | em 16 16 | 005e9b | 20 de 5c    |                 jsr 005cde           
4980:000 | DONE ins | em 16 16 | 005e9e | 20 ae 5c    |                 jsr 005cae           
4981:000 | DONE ins | em 16 16 | 005ea1 | 20 06 5f    |                 jsr 005f06           
4982:000 | DONE ins | em 16 16 | 005ea4 | 4c de 5c    |                 jmp 005cde           JSR/RTS
4983:000 | DONE lbl | em 16 16 | 005ea7 |             | z_udmod                              
4984:000 | DONE wsp | em 16 16 |        |             |
4985:000 | DONE wsp | em 16 16 |        |             |
4986:000 | DONE cmt | em 16 16 |        |             | ; -------------------------------------------------------------------
4987:000 | DONE cmt | em 16 16 |        |             | ; UM* "UMSTAR" ( u u -- ud ) 16*16 -> 32  X bytes / X cycles
4988:000 | DONE cmt | em 16 16 |        |             | ; Multiply two unsigned 16 bit numbers, producing a 32 bit result.This is based
4989:000 | DONE cmt | em 16 16 |        |             | ; on modified FIG Forth code by Dr. Jefyll, see
4990:000 | DONE cmt | em 16 16 |        |             | ; http://forum.6502.org/viewtopic.php?f=9&t=689 for a detailed discussion. We
4991:000 | DONE cmt | em 16 16 |        |             | ; use the system scratch pad (SYSPAD) for temp storage (N in the original code)
4992:000 | DONE cmt | em 16 16 |        |             | ; FIG Forth is in the public domain. Note old Forth versions such as FIG Forth
4993:000 | DONE cmt | em 16 16 |        |             | ; call this "U*"
4994:000 | DONE wsp | em 16 16 |        |             |
4995:000 | DONE cmt | em 16 16 |        |             | ; This is currently a brute-force loop based on the 8-bit variant in "6502
4996:000 | DONE cmt | em 16 16 |        |             | ; Assembly Language Programming" by Leventhal. Once everything is working,
4997:000 | DONE cmt | em 16 16 |        |             | ; consider switching to a table-supported version based on
4998:000 | DONE cmt | em 16 16 |        |             | ; http://codebase64.org/doku.php?id=base:seriously_fast_multiplication
4999:000 | DONE cmt | em 16 16 |        |             | ; http://codebase64.org/doku.php?id=magazines:chacking16#d_graphics_for_the_masseslib3d_and_cool_world
5000:000 | DONE cmt | em 16 16 |        |             | ; http://forum.6502.org/viewtopic.php?p=205#p205
5001:000 | DONE cmt | em 16 16 |        |             | ; http://forum.6502.org/viewtopic.php?f=9&t=689 We use tmp1, tmp2, tmp3 for
5002:000 | DONE cmt | em 16 16 |        |             | ; this, with the assumption that tmp3 immediately follows tmp2
5003:000 | DONE lbl | em 16 16 | 005ea7 |             | xt_umstar                            
5004:000 | DONE dir | em 16 16 |        |             |         .!a16                        
5005:000 | DONE cmt | em 16 16 |        |             |                 ; SPECIAL CASE 1: multiplication by zero
5006:000 | DONE ins | em 16 16 | 005ea7 | 98          |                 tya                  
5007:000 | DONE ins | em 16 16 | 005ea8 | f0 3d       |                 beq 005ee7           
5008:000 | DONE ins | em 16 16 | 005eaa | b5 00       |                 lda.dx 00            
5009:000 | DONE ins | em 16 16 | 005eac | f0 39       |                 beq 005ee7           
5010:000 | DONE wsp | em 16 16 |        |             |
5011:000 | DONE cmt | em 16 16 |        |             |                 ; SPECIAL CASE 2: multiplication by one
5012:000 | DONE cmt | em 16 16 |        |             |                 ; This is a different routine than 2* because that instruction
5013:000 | DONE cmt | em 16 16 |        |             |                 ; stays inside one cell, whereas UM* produces a Double Cell
5014:000 | DONE cmt | em 16 16 |        |             |                 ; answer
5015:000 | DONE ins | em 16 16 | 005eae | c0 01 00    |                 cpy.# 0001           non-distructively
5016:000 | DONE ins | em 16 16 | 005eb1 | f0 3b       |                 beq 005eee           
5017:000 | DONE ins | em 16 16 | 005eb3 | b5 00       |                 lda.dx 00            
5018:000 | DONE ins | em 16 16 | 005eb5 | 3a          |                 dec.a                don't care about distruction
5019:000 | DONE ins | em 16 16 | 005eb6 | f0 39       |                 beq 005ef1           
5020:000 | DONE wsp | em 16 16 |        |             |
5021:000 | DONE cmt | em 16 16 |        |             |                 ; SPECIAL CASE 3: multiplication by two
5022:000 | DONE ins | em 16 16 | 005eb8 | c0 02 00    |                 cpy.# 0002           
5023:000 | DONE ins | em 16 16 | 005ebb | f0 3b       |                 beq 005ef8           
5024:000 | DONE wsp | em 16 16 |        |             |
5025:000 | DONE ins | em 16 16 | 005ebd | b5 00       |                 lda.dx 00            
5026:000 | DONE ins | em 16 16 | 005ebf | c9 02 00    |                 cmp.# 0002           
5027:000 | DONE ins | em 16 16 | 005ec2 | f0 38       |                 beq 005efc           
5028:000 | DONE wsp | em 16 16 |        |             |
5029:000 | DONE cmt | em 16 16 |        |             |                 ; NO SPECIAL CASE ("The Hard Way")
5030:000 | DONE ins | em 16 16 | 005ec4 | 84 1c       |                 sty.d 00001c         TOS number  "40"
5031:000 | DONE ins | em 16 16 | 005ec6 | 85 1e       |                 sta.d 00001e         NOS number  "41"
5032:000 | DONE ins | em 16 16 | 005ec8 | a0 10 00    |                 ldy.# &16            loop counter
5033:000 | DONE wsp | em 16 16 |        |             |
5034:000 | DONE ins | em 16 16 | 005ecb | a9 00 00    |                 lda.# 0000           
5035:000 | DONE ins | em 16 16 | 005ece | 85 20       |                 sta.d 000020         Most Significat Word (MSW) of result
5036:000 | DONE wsp | em 16 16 |        |             |
5037:000 | DONE lbl | em 16 16 | 005ed0 |             | umstar_loop                          
5038:000 | DONE ins | em 16 16 | 005ed0 | 0a          |                 asl.a                useless for first iteration
5039:000 | DONE ins | em 16 16 | 005ed1 | 26 20       |                 rol.d 000020         move carry into MSB, useless first iteration
5040:000 | DONE ins | em 16 16 | 005ed3 | 06 1e       |                 asl.d 00001e         move bit of NOS number into carry
5041:000 | DONE wsp | em 16 16 |        |             |
5042:000 | DONE cmt | em 16 16 |        |             |                 ; if there is no carry bit, we don't have to add and can go to
5043:000 | DONE cmt | em 16 16 |        |             |                 ; the next bit
5044:000 | DONE ins | em 16 16 | 005ed5 | 90 07       |                 bcc 005ede           
5045:000 | DONE wsp | em 16 16 |        |             |
5046:000 | DONE ins | em 16 16 | 005ed7 | 18          |                 clc                  
5047:000 | DONE ins | em 16 16 | 005ed8 | 65 1c       |                 adc.d 00001c         we have a set bit, so add TOS
5048:000 | DONE wsp | em 16 16 |        |             |
5049:000 | DONE cmt | em 16 16 |        |             |                 ; if we have a carry, increase the MSW of result
5050:000 | DONE ins | em 16 16 | 005eda | 90 02       |                 bcc 005ede           
5051:000 | DONE ins | em 16 16 | 005edc | e6 20       |                 inc.d 000020         
5052:000 | DONE wsp | em 16 16 |        |             |
5053:000 | DONE lbl | em 16 16 | 005ede |             | umstar_counter                       
5054:000 | DONE ins | em 16 16 | 005ede | 88          |                 dey                  
5055:000 | DONE ins | em 16 16 | 005edf | d0 ef       |                 bne 005ed0           
5056:000 | DONE wsp | em 16 16 |        |             |
5057:000 | DONE cmt | em 16 16 |        |             |                 ; We're all done, clean up and leave
5058:000 | DONE ins | em 16 16 | 005ee1 | 95 00       |                 sta.dx 00            store lower cell of number in NOS
5059:000 | DONE ins | em 16 16 | 005ee3 | a4 20       |                 ldy.d 000020         store MSB in TOS as double cell
5060:000 | DONE wsp | em 16 16 |        |             |
5061:000 | DONE ins | em 16 16 | 005ee5 | 80 1e       |                 bra 005f05           don't use RTS so we can natively compile
5062:000 | DONE wsp | em 16 16 |        |             |
5063:000 | DONE lbl | em 16 16 | 005ee7 |             | umstar_zero                          
5064:000 | DONE cmt | em 16 16 |        |             |                 ; one or both of the numbers is zero, so we got off light
5065:000 | DONE ins | em 16 16 | 005ee7 | a0 00 00    |                 ldy.# 0000           
5066:000 | DONE ins | em 16 16 | 005eea | 94 00       |                 sty.dx 00            
5067:000 | DONE ins | em 16 16 | 005eec | 80 17       |                 bra 005f05           
5068:000 | DONE wsp | em 16 16 |        |             |
5069:000 | DONE lbl | em 16 16 | 005eee |             | umstar_one_tos                       
5070:000 | DONE cmt | em 16 16 |        |             |                 ; TOS is one, life is easy
5071:000 | DONE ins | em 16 16 | 005eee | 88          |                 dey                  NOS is LSW, TOS becomes zero
5072:000 | DONE ins | em 16 16 | 005eef | 80 14       |                 bra 005f05           
5073:000 | DONE lbl | em 16 16 | 005ef1 |             | umstar_one_nos                       
5074:000 | DONE cmt | em 16 16 |        |             |                 ; NOS is one, life is easy
5075:000 | DONE ins | em 16 16 | 005ef1 | 94 00       |                 sty.dx 00            
5076:000 | DONE ins | em 16 16 | 005ef3 | a0 00 00    |                 ldy.# 0000           
5077:000 | DONE ins | em 16 16 | 005ef6 | 80 0d       |                 bra 005f05           
5078:000 | DONE wsp | em 16 16 |        |             |
5079:000 | DONE lbl | em 16 16 | 005ef8 |             | umstar_two_tos                       
5080:000 | DONE cmt | em 16 16 |        |             |                 ; TOS is two, life is easy
5081:000 | DONE ins | em 16 16 | 005ef8 | b5 00       |                 lda.dx 00            
5082:000 | DONE ins | em 16 16 | 005efa | 80 01       |                 bra 005efd           
5083:000 | DONE lbl | em 16 16 | 005efc |             | umstar_two_nos                       
5084:000 | DONE cmt | em 16 16 |        |             |                 ; NOS is two, life is still easy
5085:000 | DONE ins | em 16 16 | 005efc | 98          |                 tya                  
5086:000 | DONE lbl | em 16 16 | 005efd |             | umstar_two_common                    
5087:000 | DONE ins | em 16 16 | 005efd | 0a          |                 asl.a                multiply by two, top bit in Carry Flag
5088:000 | DONE ins | em 16 16 | 005efe | 95 00       |                 sta.dx 00            Double Cell LSW is NOS
5089:000 | DONE wsp | em 16 16 |        |             |
5090:000 | DONE ins | em 16 16 | 005f00 | a9 00 00    |                 lda.# 0000           
5091:000 | DONE ins | em 16 16 | 005f03 | 2a          |                 rol.a                Rotate any Carry Flag into MSW
5092:000 | DONE ins | em 16 16 | 005f04 | a8          |                 tay                  
5093:000 | DONE wsp | em 16 16 |        |             |
5094:000 | DONE lbl | em 16 16 | 005f05 |             | z_umstar                             
5094:001 | DONE ins | em 16 16 | 005f05 | 60          |                 rts                  
5095:000 | DONE wsp | em 16 16 |        |             |
5096:000 | DONE cmt | em 16 16 |        |             | ; -------------------------------------------------------------------
5097:000 | DONE cmt | em 16 16 |        |             | ; UM/MOD ( ud u -- u u ) 32/16 -> 16  X bytes / X cycles
5098:000 | DONE cmt | em 16 16 |        |             | ; Divide double cell number by single cell number, returning the quotient as TOS
5099:000 | DONE cmt | em 16 16 |        |             | ; and any remainder as NOS. All numbers are unsigned. This is the basic division
5100:000 | DONE cmt | em 16 16 |        |             | ; operation all others use. Based on Garth Wilson's code at
5101:000 | DONE cmt | em 16 16 |        |             | ; http://6502.org/source/integers/ummodfix/ummodfix.htm We use "scratch" for N
5102:000 | DONE cmt | em 16 16 |        |             | ; and include a separate detection of division by zero to force an error code
5103:000 | DONE lbl | em 16 16 | 005f06 |             | xt_ummod                             
5104:000 | DONE dir | em 16 16 |        |             |         .!a16                        
5105:000 | DONE dir | em 16 16 |        |             |         .!xy16                       
5106:000 | DONE cmt | em 16 16 |        |             |                 ; Move the inputs to the scratchpad to avoid having to fool
5107:000 | DONE cmt | em 16 16 |        |             |                 ; around with the Data Stack and for speed. Garth's original
5108:000 | DONE cmt | em 16 16 |        |             |                 ; code uses the MVN instruction for this, but our TOS is Y which
5109:000 | DONE cmt | em 16 16 |        |             |                 ; makes that harder. When we're done, the setup will look likes
5110:000 | DONE cmt | em 16 16 |        |             |                 ; this: (S is start of the scratchpad in Direct Page)
5111:000 | DONE cmt | em 16 16 |        |             |                 ;
5112:000 | DONE cmt | em 16 16 |        |             |                 ;     +-----+-----+-----+-----+-----+-----+-----+-----+
5113:000 | DONE cmt | em 16 16 |        |             |                 ;     |  DIVISOR  |        DIVIDEND       | TEMP AREA |
5114:000 | DONE cmt | em 16 16 |        |             |                 ;     |           |  hi cell     lo cell  | carry bit |
5115:000 | DONE cmt | em 16 16 |        |             |                 ;     |  S    S+1 | S+2   S+3 | S+4   S+5 | S+6   S+7 |
5116:000 | DONE cmt | em 16 16 |        |             |                 ;     +-----+-----+-----+-----+-----+-----+-----+-----+
5117:000 | DONE cmt | em 16 16 |        |             |                 ;
5118:000 | DONE cmt | em 16 16 |        |             |                 ; The divisor is TOS (in Y), high cell of the dividend in NOS,
5119:000 | DONE cmt | em 16 16 |        |             |                 ; and low cell in 3OS
5120:000 | DONE wsp | em 16 16 |        |             |
5121:000 | DONE cmt | em 16 16 |        |             |                 ; Catch division by zero. We could include this in the code as
5122:000 | DONE cmt | em 16 16 |        |             |                 ; part of overflow detection (see below), but we want an error
5123:000 | DONE cmt | em 16 16 |        |             |                 ; to appear like in Gforth
5124:000 | DONE ins | em 16 16 | 005f06 | 98          |                 tya                  force flag test
5125:000 | DONE ins | em 16 16 | 005f07 | d0 06       |                 bne 005f0f           
5126:000 | DONE wsp | em 16 16 |        |             |
5127:000 | DONE ins | em 16 16 | 005f09 | a9 1f 70    |                 lda.# 00701f         
5128:000 | DONE ins | em 16 16 | 005f0c | 4c 60 69    |                 jmp 006960           
5129:000 | DONE wsp | em 16 16 |        |             |
5130:000 | DONE lbl | em 16 16 | 005f0f |             | ummod_notzero                        
5131:000 | DONE ins | em 16 16 | 005f0f | 84 28       |                 sty.d 000028         Y is now free
5132:000 | DONE ins | em 16 16 | 005f11 | b5 00       |                 lda.dx 00            high cell of dividend
5133:000 | DONE ins | em 16 16 | 005f13 | 85 2a       |                 sta.d 00002a         
5134:000 | DONE ins | em 16 16 | 005f15 | b5 02       |                 lda.dx 02            low cell of dividend
5135:000 | DONE ins | em 16 16 | 005f17 | 85 2c       |                 sta.d 00002c         
5136:000 | DONE wsp | em 16 16 |        |             |
5137:000 | DONE cmt | em 16 16 |        |             |                 ; Drop one entry off of the stack and save the new Data Stack
5138:000 | DONE cmt | em 16 16 |        |             |                 ; Pointer, freeing X for index duty
5139:000 | DONE ins | em 16 16 | 005f19 | e8          |                 inx                  
5140:000 | DONE ins | em 16 16 | 005f1a | e8          |                 inx                  
5141:000 | DONE ins | em 16 16 | 005f1b | 86 22       |                 stx.d 000022         
5142:000 | DONE wsp | em 16 16 |        |             |
5143:000 | DONE cmt | em 16 16 |        |             |                 ; Detect overflow. Subtract divisor from high cell of dividend.
5144:000 | DONE cmt | em 16 16 |        |             |                 ; If carry flag remains set, divisor was not large enough to
5145:000 | DONE cmt | em 16 16 |        |             |                 ; avoid overflow. This also would detect division by zero, but
5146:000 | DONE cmt | em 16 16 |        |             |                 ; we did that already in a separate step
5147:000 | DONE ins | em 16 16 | 005f1d | 38          |                 sec                  
5148:000 | DONE ins | em 16 16 | 005f1e | a5 2a       |                 lda.d 00002a         
5149:000 | DONE ins | em 16 16 | 005f20 | e5 28       |                 sbc.d 000028         
5150:000 | DONE ins | em 16 16 | 005f22 | b0 21       |                 bcs 005f45           
5151:000 | DONE wsp | em 16 16 |        |             |
5152:000 | DONE cmt | em 16 16 |        |             |                 ; If there is no overflow, the carry flag remains clear for
5153:000 | DONE cmt | em 16 16 |        |             |                 ; first roll. We loop 16 times, but since we shift the dividend
5154:000 | DONE cmt | em 16 16 |        |             |                 ; over at the same time as shifting the answer in, the operation
5155:000 | DONE cmt | em 16 16 |        |             |                 ; must start and (!) finish with a shift of the low cell of the
5156:000 | DONE cmt | em 16 16 |        |             |                 ; dividend (which ends up holding the quotient), so we start
5157:000 | DONE cmt | em 16 16 |        |             |                 ; with 17 times in X. Y is used for temporary storage
5158:000 | DONE ins | em 16 16 | 005f24 | a2 11 00    |                 ldx.# &17            
5159:000 | DONE wsp | em 16 16 |        |             |
5160:000 | DONE lbl | em 16 16 | 005f27 |             | ummod_shift                          
5161:000 | DONE cmt | em 16 16 |        |             |                 ; Move low cell of dividend left one bit, also shifting answer
5162:000 | DONE cmt | em 16 16 |        |             |                 ; in. The first rotation brings in a zero, which later gets
5163:000 | DONE cmt | em 16 16 |        |             |                 ; pushed off the other end in the last rotation
5164:000 | DONE ins | em 16 16 | 005f27 | 26 2c       |                 rol.d 00002c         
5165:000 | DONE wsp | em 16 16 |        |             |
5166:000 | DONE cmt | em 16 16 |        |             |                 ; loop control
5167:000 | DONE ins | em 16 16 | 005f29 | ca          |                 dex                  
5168:000 | DONE ins | em 16 16 | 005f2a | f0 22       |                 beq 005f4e           
5169:000 | DONE wsp | em 16 16 |        |             |
5170:000 | DONE cmt | em 16 16 |        |             |                 ; Shift high cell of divident left one bit, also shifting the
5171:000 | DONE cmt | em 16 16 |        |             |                 ; next bit in from high bit of low cell
5172:000 | DONE ins | em 16 16 | 005f2c | 26 2a       |                 rol.d 00002a         
5173:000 | DONE ins | em 16 16 | 005f2e | a9 00 00    |                 lda.# 0000           
5174:000 | DONE ins | em 16 16 | 005f31 | 2a          |                 rol.a                
5175:000 | DONE ins | em 16 16 | 005f32 | 85 2e       |                 sta.d 00002e         store old high bit of dividend
5176:000 | DONE wsp | em 16 16 |        |             |
5177:000 | DONE cmt | em 16 16 |        |             |                 ; See if divisor will fit into high 17 bits of dividend by
5178:000 | DONE cmt | em 16 16 |        |             |                 ; subtracting and then looking at the carry flag. If carry was
5179:000 | DONE cmt | em 16 16 |        |             |                 ; cleared, divisor did not fit
5180:000 | DONE ins | em 16 16 | 005f34 | 38          |                 sec                  
5181:000 | DONE ins | em 16 16 | 005f35 | a5 2a       |                 lda.d 00002a         
5182:000 | DONE ins | em 16 16 | 005f37 | e5 28       |                 sbc.d 000028         
5183:000 | DONE ins | em 16 16 | 005f39 | a8          |                 tay                  save difference in Y until we know if we need it
5184:000 | DONE wsp | em 16 16 |        |             |
5185:000 | DONE cmt | em 16 16 |        |             |                 ; Bit 0 of S+6 serves as the 17th bit. Complete the subtraction
5186:000 | DONE cmt | em 16 16 |        |             |                 ; by doing the 17th bit before determining if the divisor fits
5187:000 | DONE cmt | em 16 16 |        |             |                 ; into the high 17 bits of the dividend. If so, the carry flag
5188:000 | DONE cmt | em 16 16 |        |             |                 ; remains set
5189:000 | DONE ins | em 16 16 | 005f3a | a5 2e       |                 lda.d 00002e         
5190:000 | DONE ins | em 16 16 | 005f3c | e9 00 00    |                 sbc.# 0000           
5191:000 | DONE ins | em 16 16 | 005f3f | 90 e6       |                 bcc 005f27           
5192:000 | DONE wsp | em 16 16 |        |             |
5193:000 | DONE cmt | em 16 16 |        |             |                 ; Since the divisor fit into high 17 bits, update dividend high
5194:000 | DONE cmt | em 16 16 |        |             |                 ; cell to what it would be after subtraction
5195:000 | DONE ins | em 16 16 | 005f41 | 84 2a       |                 sty.d 00002a         
5196:000 | DONE ins | em 16 16 | 005f43 | 80 e2       |                 bra 005f27           
5197:000 | DONE wsp | em 16 16 |        |             |
5198:000 | DONE lbl | em 16 16 | 005f45 |             | ummod_overflow                       
5199:000 | DONE cmt | em 16 16 |        |             |                 ; If an overflow condition occurs, put 0ffff
5200:000 | DONE cmt | em 16 16 |        |             |                 ; in both the quotient and remainder
5201:000 | DONE ins | em 16 16 | 005f45 | a6 22       |                 ldx.d 000022         restore DSP
5202:000 | DONE ins | em 16 16 | 005f47 | a0 ff ff    |                 ldy.# 0ffff          
5203:000 | DONE ins | em 16 16 | 005f4a | 94 00       |                 sty.dx 00            
5204:000 | DONE ins | em 16 16 | 005f4c | 80 08       |                 bra 005f56           go to end to enable native coding
5205:000 | DONE wsp | em 16 16 |        |             |
5206:000 | DONE lbl | em 16 16 | 005f4e |             | ummod_complete                       
5207:000 | DONE ins | em 16 16 | 005f4e | a6 22       |                 ldx.d 000022         restore DSP
5208:000 | DONE ins | em 16 16 | 005f50 | a4 2c       |                 ldy.d 00002c         quotient is TOS
5209:000 | DONE ins | em 16 16 | 005f52 | a5 2a       |                 lda.d 00002a         remainder is NOS
5210:000 | DONE ins | em 16 16 | 005f54 | 95 00       |                 sta.dx 00            
5211:000 | DONE wsp | em 16 16 |        |             |
5212:000 | DONE lbl | em 16 16 | 005f56 |             | z_ummod                              
5212:001 | DONE ins | em 16 16 | 005f56 | 60          |                 rts                  
5213:000 | DONE wsp | em 16 16 |        |             |
5214:000 | DONE wsp | em 16 16 |        |             |
5215:000 | DONE cmt | em 16 16 |        |             | ; -------------------------------------------------------------------
5216:000 | DONE cmt | em 16 16 |        |             | ; UNLOOP ( -- ; R: n n n -- ) X bytes / X cycles
5217:000 | DONE cmt | em 16 16 |        |             | ; Drop loop control stuff from Return Stack.
5218:000 | DONE cmt | em 16 16 |        |             | ; TODO make this faster
5219:000 | DONE lbl | em 16 16 | 005f57 |             | xt_unloop                            
5220:000 | DONE cmt | em 16 16 |        |             |                 ; drop fudge number (limit/start) from DO/?DO off the Return
5221:000 | DONE cmt | em 16 16 |        |             |                 ; Stack
5222:000 | DONE ins | em 16 16 | 005f57 | 68          |                 pla                  
5223:000 | DONE ins | em 16 16 | 005f58 | 68          |                 pla                  
5224:000 | DONE ins | em 16 16 | 005f59 | 68          |                 pla                  
5225:000 | DONE ins | em 16 16 | 005f5a | 68          |                 pla                  
5226:000 | DONE wsp | em 16 16 |        |             |
5227:000 | DONE cmt | em 16 16 |        |             |                 ; Drop the LEAVE address that was below them as well
5228:000 | DONE ins | em 16 16 | 005f5b | 68          |                 pla                  
5229:000 | DONE ins | em 16 16 | 005f5c | 68          |                 pla                  
5230:000 | DONE wsp | em 16 16 |        |             |
5231:000 | DONE lbl | em 16 16 | 005f5d |             | z_unloop                             
5231:001 | DONE ins | em 16 16 | 005f5d | 60          |                 rts                  
5232:000 | DONE wsp | em 16 16 |        |             |
5233:000 | DONE wsp | em 16 16 |        |             |
5234:000 | DONE cmt | em 16 16 |        |             | ; -------------------------------------------------------------------
5235:000 | DONE cmt | em 16 16 |        |             | ; UNUSED ( -- u ) 11 bytes / X cycles
5236:000 | DONE cmt | em 16 16 |        |             | ; Return amount of memory available for the Dictionary. Does not exclude the
5237:000 | DONE cmt | em 16 16 |        |             | ; space for PAD.
5238:000 | DONE lbl | em 16 16 | 005f5e |             | xt_unused                            
5239:000 | DONE dir | em 16 16 |        |             |         .!a16                        
5240:000 | DONE ins | em 16 16 | 005f5e | a9 ff 4f    |                 lda.# 004fff         
5241:000 | DONE ins | em 16 16 | 005f61 | 38          |                 sec                  
5242:000 | DONE ins | em 16 16 | 005f62 | e5 00       |                 sbc.d 000000         current compile pointer
5243:000 | DONE wsp | em 16 16 |        |             |
5244:000 | DONE ins | em 16 16 | 005f64 | ca          |                 dex                  
5245:000 | DONE ins | em 16 16 | 005f65 | ca          |                 dex                  
5246:000 | DONE ins | em 16 16 | 005f66 | 94 00       |                 sty.dx 00            
5247:000 | DONE wsp | em 16 16 |        |             |
5248:000 | DONE ins | em 16 16 | 005f68 | a8          |                 tay                  
5249:000 | DONE wsp | em 16 16 |        |             |
5250:000 | DONE lbl | em 16 16 | 005f69 |             | z_unused                             
5250:001 | DONE ins | em 16 16 | 005f69 | 60          |                 rts                  
5251:000 | DONE wsp | em 16 16 |        |             |
5252:000 | DONE wsp | em 16 16 |        |             |
5253:000 | DONE cmt | em 16 16 |        |             | ; -------------------------------------------------------------------
5254:000 | DONE cmt | em 16 16 |        |             | ; VALUE ( n "name" -- ) X bytes / X cycles
5255:000 | DONE cmt | em 16 16 |        |             | ; Associate a name with a value (like a constant) that can be changed (like
5256:000 | DONE cmt | em 16 16 |        |             | ; a variable) with TO. We use the routines as CONSTANT, see there.
5257:000 | DONE wsp | em 16 16 |        |             |
5258:000 | DONE wsp | em 16 16 |        |             |
5259:000 | DONE cmt | em 16 16 |        |             | ; -------------------------------------------------------------------
5260:000 | DONE cmt | em 16 16 |        |             | ; VARIABLE ( "name" -- ) X bytes / X cycles
5261:000 | DONE cmt | em 16 16 |        |             | ; Define a word that returns the address for a variable. There are various Forth
5262:000 | DONE cmt | em 16 16 |        |             | ; definitions for this word, such as  CREATE 1 CELLS ALLOT  or CREATE 0 ,
5263:000 | DONE cmt | em 16 16 |        |             | ; We use a variant of the second one so the variable is initialized to zero
5264:000 | DONE lbl | em 16 16 | 005f6a |             | xt_variable                          
5265:000 | DONE cmt | em 16 16 |        |             |                 ; We let CREATE do the heavy lifting
5266:000 | DONE ins | em 16 16 | 005f6a | 20 27 57    |                 jsr 005727           
5267:000 | DONE wsp | em 16 16 |        |             |
5268:000 | DONE cmt | em 16 16 |        |             |                 ; There is no "stz.di cp" so we have to do this the
5269:000 | DONE cmt | em 16 16 |        |             |                 ; old way, which is still faster than a subroutine jump to ZERO
5270:000 | DONE ins | em 16 16 | 005f6d | a9 00 00    |                 lda.# 0000           
5271:000 | DONE ins | em 16 16 | 005f70 | 92 00       |                 sta.di 000000        STA (CP)
5272:000 | DONE wsp | em 16 16 |        |             |
5273:000 | DONE ins | em 16 16 | 005f72 | e6 00       |                 inc.d 000000         direct COMMA
5274:000 | DONE ins | em 16 16 | 005f74 | e6 00       |                 inc.d 000000         
5275:000 | DONE wsp | em 16 16 |        |             |
5276:000 | DONE ins | em 16 16 | 005f76 | 4c fd 56    |                 jmp 0056fd           adjust the z_ value by adding 2 bytes
5277:000 | DONE wsp | em 16 16 |        |             |
5278:000 | DONE lbl | em 16 16 | 005f79 |             | z_variable                           ; never reached
5279:000 | DONE wsp | em 16 16 |        |             |
5280:000 | DONE wsp | em 16 16 |        |             |
5281:000 | DONE cmt | em 16 16 |        |             | ; -------------------------------------------------------------------
5282:000 | DONE cmt | em 16 16 |        |             | ; WORD ( char "name" -- c-addr ) X bytes / X cycles
5283:000 | DONE cmt | em 16 16 |        |             | ; Obsolete parsing word included for backwards compatibility. Do note use this,
5284:000 | DONE cmt | em 16 16 |        |             | ; use PARSE or PARSE-NAME. Skips leading delimiters and copies word to storage
5285:000 | DONE cmt | em 16 16 |        |             | ; area for a maximum size of 255 bytes. Returns the result as a counted string
5286:000 | DONE cmt | em 16 16 |        |             | ; (requires COUNT to convert to modern format), and inserts a space after the
5287:000 | DONE cmt | em 16 16 |        |             | ; string. See "Forth Programmer's Handbook" 3rd edition p.159 and
5288:000 | DONE cmt | em 16 16 |        |             | ; http://www.forth200x.org/documents/html/rationale.html#rat:core:PARSE
5289:000 | DONE cmt | em 16 16 |        |             | ; for discussions of why you shouldn't be using WORD anymore. Forth would be
5290:000 | DONE cmt | em 16 16 |        |             | ; PARSE DUP BUFFER1 C! OUTPUT 1+ SWAP MOVE BUFFER1
5291:000 | DONE cmt | em 16 16 |        |             | ; TODO What about the space?
5292:000 | DONE lbl | em 16 16 | 005f79 |             | xt_word                              
5293:000 | DONE cmt | em 16 16 |        |             |                 ; The real work is done by PARSE
5294:000 | DONE ins | em 16 16 | 005f79 | 20 21 5c    |                 jsr 005c21           ( addr u )
5295:000 | DONE wsp | em 16 16 |        |             |
5296:000 | DONE cmt | em 16 16 |        |             |                 ; Now we have to convert the modern address to the old form
5297:000 | DONE ins | em 16 16 | 005f7c | 8c 80 02    |                 sty 000280           overwrite MSB
5298:000 | DONE wsp | em 16 16 |        |             |
5299:000 | DONE ins | em 16 16 | 005f7f | ca          |                 dex                  
5300:000 | DONE ins | em 16 16 | 005f80 | ca          |                 dex                  ( addr <?> u )
5301:000 | DONE ins | em 16 16 | 005f81 | a9 80 02    |                 lda.# 000280         
5302:000 | DONE ins | em 16 16 | 005f84 | 1a          |                 inc.a                
5303:000 | DONE ins | em 16 16 | 005f85 | 95 00       |                 sta.dx 00            ( addr buffer1+1 u )
5304:000 | DONE wsp | em 16 16 |        |             |
5305:000 | DONE ins | em 16 16 | 005f87 | 20 f6 5a    |                 jsr 005af6           
5306:000 | DONE wsp | em 16 16 |        |             |
5307:000 | DONE ins | em 16 16 | 005f8a | ca          |                 dex                  
5308:000 | DONE ins | em 16 16 | 005f8b | ca          |                 dex                  
5309:000 | DONE ins | em 16 16 | 005f8c | 94 00       |                 sty.dx 00            
5310:000 | DONE wsp | em 16 16 |        |             |
5311:000 | DONE ins | em 16 16 | 005f8e | a0 80 02    |                 ldy.# 000280         
5312:000 | DONE wsp | em 16 16 |        |             |
5313:000 | DONE lbl | em 16 16 | 005f91 |             | z_word                               
5313:001 | DONE ins | em 16 16 | 005f91 | 60          |                 rts                  
5314:000 | DONE wsp | em 16 16 |        |             |
5315:000 | DONE wsp | em 16 16 |        |             |
5316:000 | DONE cmt | em 16 16 |        |             | ; -------------------------------------------------------------------
5317:000 | DONE cmt | em 16 16 |        |             | ; WORDS&SIZES ( -- ) X bytes / X cycles
5318:000 | DONE cmt | em 16 16 |        |             | ; Prints all words in the dictionary with the sizes of their code as returned by
5319:000 | DONE cmt | em 16 16 |        |             | ; WORDSIZE. Used to test different optimizations of the compiling routines,
5320:000 | DONE cmt | em 16 16 |        |             | ; specific to Liara Forth. Uses tmp3
5321:000 | DONE lbl | em 16 16 | 005f92 |             | xt_wordsnsizes                       
5322:000 | DONE dir | em 16 16 |        |             |         .!a16                        
5323:000 | DONE ins | em 16 16 | 005f92 | a9 ff ff    |                 lda.# 0ffff          
5324:000 | DONE ins | em 16 16 | 005f95 | 85 20       |                 sta.d 000020         set flag that we want sizes, too
5325:000 | DONE wsp | em 16 16 |        |             |
5326:000 | DONE cmt | em 16 16 |        |             |                 ; continue with WORDS
5327:000 | DONE ins | em 16 16 | 005f97 | 80 02       |                 bra 005f9b           
5328:000 | DONE wsp | em 16 16 |        |             |
5329:000 | DONE cmt | em 16 16 |        |             | ; -------------------------------------------------------------------
5330:000 | DONE cmt | em 16 16 |        |             | ; WORDS ( -- ) X bytes / X cycles
5331:000 | DONE cmt | em 16 16 |        |             | ; Print list of all Forth words available. This only really makes sense in an
5332:000 | DONE cmt | em 16 16 |        |             | ; interactive setting, so we don't have to worry about speed. WORDS&SIZES falls
5333:000 | DONE cmt | em 16 16 |        |             | ; through to here. Uses tmp3. Both WORDS and WORDS&SIZES might be better off as
5334:000 | DONE cmt | em 16 16 |        |             | ; high-level Forth words, but these routines are left over from early testing
5335:000 | DONE lbl | em 16 16 | 005f99 |             | xt_words                             
5336:000 | DONE ins | em 16 16 | 005f99 | 64 20       |                 stz.d 000020         store flag that we don't want to print sizes
5337:000 | DONE wsp | em 16 16 |        |             |
5338:000 | DONE lbl | em 16 16 | 005f9b |             | words_common                         
5339:000 | DONE cmt | em 16 16 |        |             |                 ; common routine for WORDS and WORDS&SIZES
5340:000 | DONE ins | em 16 16 | 005f9b | 20 21 57    |                 jsr 005721           start on next line, this is a style choice
5341:000 | DONE wsp | em 16 16 |        |             |
5342:000 | DONE ins | em 16 16 | 005f9e | a5 02       |                 lda.d 000002         nt of first entry in Dictionary (last added)
5343:000 | DONE ins | em 16 16 | 005fa0 | 48          |                 pha                  
5344:000 | DONE wsp | em 16 16 |        |             |
5345:000 | DONE ins | em 16 16 | 005fa1 | ca          |                 dex                  create room on TOS
5346:000 | DONE ins | em 16 16 | 005fa2 | ca          |                 dex                  
5347:000 | DONE ins | em 16 16 | 005fa3 | 94 00       |                 sty.dx 00            
5348:000 | DONE wsp | em 16 16 |        |             |
5349:000 | DONE lbl | em 16 16 | 005fa5 |             | words_loop                           
5350:000 | DONE ins | em 16 16 | 005fa5 | a8          |                 tay                  ( nt )
5351:000 | DONE ins | em 16 16 | 005fa6 | 20 10 5b    |                 jsr 005b10           ( nt -- addr u )
5352:000 | DONE ins | em 16 16 | 005fa9 | 20 62 5e    |                 jsr 005e62           
5353:000 | DONE ins | em 16 16 | 005fac | 20 1e 5e    |                 jsr 005e1e           
5354:000 | DONE wsp | em 16 16 |        |             |
5355:000 | DONE cmt | em 16 16 |        |             |                 ; If the user wants sizes as well, print them
5356:000 | DONE ins | em 16 16 | 005faf | a5 20       |                 lda.d 000020         
5357:000 | DONE ins | em 16 16 | 005fb1 | f0 0f       |                 beq 005fc2           
5358:000 | DONE wsp | em 16 16 |        |             |
5359:000 | DONE cmt | em 16 16 |        |             |                 ; For the moment, just print the size in bytes after the word's
5360:000 | DONE cmt | em 16 16 |        |             |                 ; name string. We can decide if we want to get all fancy later
5361:000 | DONE ins | em 16 16 | 005fb3 | ca          |                 dex                  
5362:000 | DONE ins | em 16 16 | 005fb4 | ca          |                 dex                  
5363:000 | DONE ins | em 16 16 | 005fb5 | 94 00       |                 sty.dx 00            
5364:000 | DONE wsp | em 16 16 |        |             |
5365:000 | DONE ins | em 16 16 | 005fb7 | 7a          |                 ply                  get nt back again
5366:000 | DONE ins | em 16 16 | 005fb8 | 5a          |                 phy                  
5367:000 | DONE ins | em 16 16 | 005fb9 | 20 d6 5f    |                 jsr 005fd6           ( u )
5368:000 | DONE ins | em 16 16 | 005fbc | 20 da 51    |                 jsr 0051da           
5369:000 | DONE ins | em 16 16 | 005fbf | 20 1e 5e    |                 jsr 005e1e           
5370:000 | DONE wsp | em 16 16 |        |             |
5371:000 | DONE lbl | em 16 16 | 005fc2 |             | words_nosizes                        
5372:000 | DONE ins | em 16 16 | 005fc2 | 68          |                 pla                  get back first entry in Dictionary
5373:000 | DONE wsp | em 16 16 |        |             |
5374:000 | DONE cmt | em 16 16 |        |             |                 ; The next nt is two bytes below the nt of the current one in
5375:000 | DONE cmt | em 16 16 |        |             |                 ; the Dictionary header
5376:000 | DONE ins | em 16 16 | 005fc3 | 1a          |                 inc.a                
5377:000 | DONE ins | em 16 16 | 005fc4 | 1a          |                 inc.a                
5378:000 | DONE wsp | em 16 16 |        |             |
5379:000 | DONE ins | em 16 16 | 005fc5 | ca          |                 dex                  
5380:000 | DONE ins | em 16 16 | 005fc6 | ca          |                 dex                  
5381:000 | DONE ins | em 16 16 | 005fc7 | 94 00       |                 sty.dx 00            
5382:000 | DONE wsp | em 16 16 |        |             |
5383:000 | DONE ins | em 16 16 | 005fc9 | a8          |                 tay                  
5384:000 | DONE ins | em 16 16 | 005fca | b9 00 00    |                 lda.y 0000           LDA $0000,Y
5385:000 | DONE ins | em 16 16 | 005fcd | 48          |                 pha                  
5386:000 | DONE ins | em 16 16 | 005fce | d0 d5       |                 bne 005fa5           zero entry signals end of Dictionary
5387:000 | DONE wsp | em 16 16 |        |             |
5388:000 | DONE cmt | em 16 16 |        |             |                 ; all done, clean up
5389:000 | DONE ins | em 16 16 | 005fd0 | 68          |                 pla                  balance MPU stack, value discarded
5390:000 | DONE wsp | em 16 16 |        |             |
5391:000 | DONE ins | em 16 16 | 005fd1 | b4 00       |                 ldy.dx 00            
5392:000 | DONE ins | em 16 16 | 005fd3 | e8          |                 inx                  
5393:000 | DONE ins | em 16 16 | 005fd4 | e8          |                 inx                  
5394:000 | DONE wsp | em 16 16 |        |             |
5395:000 | DONE lbl | em 16 16 | 005fd5 |             | z_words                              
5396:000 | DONE lbl | em 16 16 | 005fd5 |             | z_wordsnsizes                        
5396:001 | DONE ins | em 16 16 | 005fd5 | 60          |                 rts                  
5397:000 | DONE wsp | em 16 16 |        |             |
5398:000 | DONE cmt | em 16 16 |        |             | ; -------------------------------------------------------------------
5399:000 | DONE cmt | em 16 16 |        |             | ; WORDSIZE ( nt -- u ) X bytes / X cycles
5400:000 | DONE cmt | em 16 16 |        |             | ; Given an word's name token (nt), return the size of the word's payload (CFA
5401:000 | DONE cmt | em 16 16 |        |             | ; plus PFA) in bytes. Does not count the final RTS. Specific to Liara Forth.
5402:000 | DONE cmt | em 16 16 |        |             | ; Uses tmp2, note WORDS and WORDS&SIZES use tmp3
5403:000 | DONE cmt | em 16 16 |        |             | ; TODO rewrite so it takes xt and not nt
5404:000 | DONE lbl | em 16 16 | 005fd6 |             | xt_wordsize                          
5405:000 | DONE cmt | em 16 16 |        |             |                 ; We get the beginning address of the code from the word's
5406:000 | DONE cmt | em 16 16 |        |             |                 ; header entry for the execution token (xt, 4 bytes down) and
5407:000 | DONE cmt | em 16 16 |        |             |                 ; the pointer to the end of the code (z_word, six bytes down).
5408:000 | DONE ins | em 16 16 | 005fd6 | c8          |                 iny                  
5409:000 | DONE ins | em 16 16 | 005fd7 | c8          |                 iny                  
5410:000 | DONE ins | em 16 16 | 005fd8 | c8          |                 iny                  
5411:000 | DONE ins | em 16 16 | 005fd9 | c8          |                 iny                  nt+4, location of xt
5412:000 | DONE ins | em 16 16 | 005fda | b9 00 00    |                 lda.y 0000           get xt
5413:000 | DONE ins | em 16 16 | 005fdd | 85 1e       |                 sta.d 00001e         
5414:000 | DONE wsp | em 16 16 |        |             |
5415:000 | DONE ins | em 16 16 | 005fdf | c8          |                 iny                  
5416:000 | DONE ins | em 16 16 | 005fe0 | c8          |                 iny                  nt+6, location of z_word
5417:000 | DONE ins | em 16 16 | 005fe1 | b9 00 00    |                 lda.y 0000           
5418:000 | DONE wsp | em 16 16 |        |             |
5419:000 | DONE ins | em 16 16 | 005fe4 | 38          |                 sec                  (z_word - xt_word)
5420:000 | DONE ins | em 16 16 | 005fe5 | e5 1e       |                 sbc.d 00001e         
5421:000 | DONE ins | em 16 16 | 005fe7 | a8          |                 tay                  
5422:000 | DONE wsp | em 16 16 |        |             |
5423:000 | DONE lbl | em 16 16 | 005fe8 |             | z_wordsize                           
5423:001 | DONE ins | em 16 16 | 005fe8 | 60          |                 rts                  
5424:000 | DONE wsp | em 16 16 |        |             |
5425:000 | DONE wsp | em 16 16 |        |             |
5426:000 | DONE cmt | em 16 16 |        |             | ; -------------------------------------------------------------------
5427:000 | DONE cmt | em 16 16 |        |             | ; XOR ( n m -- n ) 6 bytes / X cycles
5428:000 | DONE cmt | em 16 16 |        |             | ; Logical XOR
5429:000 | DONE lbl | em 16 16 | 005fe9 |             | xt_xor                               
5430:000 | DONE ins | em 16 16 | 005fe9 | 98          |                 tya                  
5431:000 | DONE ins | em 16 16 | 005fea | 55 00       |                 eor.dx 00            
5432:000 | DONE ins | em 16 16 | 005fec | a8          |                 tay                  
5433:000 | DONE wsp | em 16 16 |        |             |
5434:000 | DONE ins | em 16 16 | 005fed | e8          |                 inx                  
5435:000 | DONE ins | em 16 16 | 005fee | e8          |                 inx                  
5436:000 | DONE wsp | em 16 16 |        |             |
5437:000 | DONE lbl | em 16 16 | 005fef |             | z_xor                                
5437:001 | DONE ins | em 16 16 | 005fef | 60          |                 rts                  
5438:000 | DONE wsp | em 16 16 |        |             |
5439:000 | DONE wsp | em 16 16 |        |             |
5440:000 | DONE cmt | em 16 16 |        |             | ; ===================================================================
5441:000 | DONE cmt | em 16 16 |        |             | ; MIDDLE INCLUDES
5442:000 | DONE wsp | em 16 16 |        |             |
5443:000 | DONE cmt | em 16 16 |        |             | ; Dictionary Headers for Liara Forth for the W65C265SXB
5443:001 | DONE cmt | em 16 16 |        |             | ; Scot W. Stevenson <scot.stevenson@gmail.com>
5443:002 | DONE cmt | em 16 16 |        |             | ; First version: 05. Dec 2016
5443:003 | DONE cmt | em 16 16 |        |             | ; This version: 12. Mar 2017
5443:004 | DONE wsp | em 16 16 |        |             |
5443:005 | DONE cmt | em 16 16 |        |             | ; Dictionary headers are kept separately from the code, which allows various
5443:006 | DONE cmt | em 16 16 |        |             | ; tricks in the code. We roughly follow the Gforth terminology: The Execution
5443:007 | DONE cmt | em 16 16 |        |             | ; Token (xt) is the address of the first byte of a word's code that can be,
5443:008 | DONE cmt | em 16 16 |        |             | ; well, executed; the Name Token (nt) is a pointer to the beginning of the
5443:009 | DONE cmt | em 16 16 |        |             | ; word's header in the Dictionary. There, the link to the next word in the
5443:010 | DONE cmt | em 16 16 |        |             | ; Dictionary is always one cell down from the current word's own nt. In the code
5443:011 | DONE cmt | em 16 16 |        |             | ; itself, we use "nt_<WORD>" ("header") for the nt and "xt_<WORD>" ("A" as the
5443:012 | DONE cmt | em 16 16 |        |             | ; beginning) for the xt.
5443:013 | DONE cmt | em 16 16 |        |             | ;
5443:014 | DONE cmt | em 16 16 |        |             | ; This gives us the following header structure:
5443:015 | DONE cmt | em 16 16 |        |             | ;
5443:016 | DONE cmt | em 16 16 |        |             | ;              8 bit     8 bit
5443:017 | DONE cmt | em 16 16 |        |             | ;               LSB       MSB
5443:018 | DONE cmt | em 16 16 |        |             | ; nt_word ->  +--------+--------+
5443:019 | DONE cmt | em 16 16 |        |             | ;             | Length | Status |
5443:020 | DONE cmt | em 16 16 |        |             | ;          +2 +--------+--------+
5443:021 | DONE cmt | em 16 16 |        |             | ;             | Next Header     | -> nt_next_word
5443:022 | DONE cmt | em 16 16 |        |             | ;          +4 +-----------------+
5443:023 | DONE cmt | em 16 16 |        |             | ;             | Start of Code   | -> xt_word
5443:024 | DONE cmt | em 16 16 |        |             | ;          +6 +-----------------+
5443:025 | DONE cmt | em 16 16 |        |             | ;             | End of Code     | -> z_word
5443:026 | DONE cmt | em 16 16 |        |             | ;          +8 +--------+--------+
5443:027 | DONE cmt | em 16 16 |        |             | ;             | Name   |        |
5443:028 | DONE cmt | em 16 16 |        |             | ;             +--------+--------+
5443:029 | DONE cmt | em 16 16 |        |             | ;             |        |        |
5443:030 | DONE cmt | em 16 16 |        |             | ;             +--------+--------+
5443:031 | DONE cmt | em 16 16 |        |             | ;             |        |  ...   | (name string does not end with a zero)
5443:032 | DONE cmt | em 16 16 |        |             | ;          +n +--------+--------+
5443:033 | DONE cmt | em 16 16 |        |             | ;
5443:034 | DONE cmt | em 16 16 |        |             | ; The Status Byte is created by adding the flags defined in
5443:035 | DONE cmt | em 16 16 |        |             | ; definitions.tasm:
5443:036 | DONE cmt | em 16 16 |        |             | ;
5443:037 | DONE cmt | em 16 16 |        |             | ;       CO - Compile Only
5443:038 | DONE cmt | em 16 16 |        |             | ;       IM - Immediate Word
5443:039 | DONE cmt | em 16 16 |        |             | ;       NC - Native Compile allowed (inline compile)
5443:040 | DONE cmt | em 16 16 |        |             | ;       FN - Force Native Compile (may not be called by JSR)
5443:041 | DONE wsp | em 16 16 |        |             |
5443:042 | DONE cmt | em 16 16 |        |             | ; Note there are currently five bits unused. The last word (top word in code)
5443:043 | DONE cmt | em 16 16 |        |             | ; is always BYE. It is marked as the last word by its value of 0000 in its Next
5443:044 | DONE cmt | em 16 16 |        |             | ; Header field. The words are sorted with the more common ones first (further
5443:045 | DONE cmt | em 16 16 |        |             | ; down in code) so they are found earlier.  Anythiing to do with output comes
5443:046 | DONE cmt | em 16 16 |        |             | ; later (further up) because things will always be slow if there is a human
5443:047 | DONE cmt | em 16 16 |        |             | ; involved.
5443:048 | DONE wsp | em 16 16 |        |             |
5443:049 | DONE lbl | em 16 16 | 005ff0 |             | nt_bye                               
5443:050 | DONE dir | em 16 16 | 005ff0 | (1 bytes)   |         .byte 03                     length of word string
5443:050 | DONE dir | em 16 16 |        |             |                 03                       --  .
5443:051 | DONE dir | em 16 16 | 005ff1 | (1 bytes)   |         .byte { NC }                 status byte
5443:051 | DONE dir | em 16 16 |        |             |                 01                       --  .
5443:052 | DONE dir | em 16 16 | 005ff2 | (2 bytes)   |         .word 0000                   next word in dictionary, 0000 signals end
5443:052 | DONE dir | em 16 16 |        |             |                 00 00                    --  . .
5443:053 | DONE dir | em 16 16 | 005ff4 | (2 bytes)   |         .word 0055c3                 start of code, the xt of this word
5443:053 | DONE dir | em 16 16 |        |             |                 c3 55                    --  . U
5443:054 | DONE dir | em 16 16 | 005ff6 | (2 bytes)   |         .word 0055ca                 end of code (points to RTS)
5443:054 | DONE dir | em 16 16 |        |             |                 ca 55                    --  . U
5443:055 | DONE dir | em 16 16 | 005ff8 | (3 bytes)   |         .byte 62, 79, 65             word name, always lower case
5443:055 | DONE dir | em 16 16 |        |             |                 62 79 65                 --  b y e
5443:056 | DONE wsp | em 16 16 |        |             |
5443:057 | DONE lbl | em 16 16 | 005ffb |             | nt_cold                              
5443:058 | DONE dir | em 16 16 | 005ffb | (2 bytes)   |         .byte 4, 00                  
5443:058 | DONE dir | em 16 16 |        |             |                 04 00                    --  . .
5443:059 | DONE dir | em 16 16 | 005ffd | (6 bytes)   |         .word nt_bye, xt_cold, 0050f9 
5443:059 | DONE dir | em 16 16 |        |             |                 f0 5f 64 50 f9 50        --  . _ d P . P
5443:060 | DONE dir | em 16 16 | 006003 | (4 bytes)   |         .byte 63, 6f, 6c, 64         
5443:060 | DONE dir | em 16 16 |        |             |                 63 6f 6c 64              --  c o l d
5443:061 | DONE wsp | em 16 16 |        |             |
5443:062 | DONE lbl | em 16 16 | 006007 |             | nt_word                              
5443:063 | DONE dir | em 16 16 | 006007 | (2 bytes)   |         .byte 4, { NC }              
5443:063 | DONE dir | em 16 16 |        |             |                 04 01                    --  . .
5443:064 | DONE dir | em 16 16 | 006009 | (6 bytes)   |         .word nt_cold, xt_word, 005f91 
5443:064 | DONE dir | em 16 16 |        |             |                 fb 5f 79 5f 91 5f        --  . _ y _ . _
5443:065 | DONE dir | em 16 16 | 00600f | (4 bytes)   |         .byte 77, 6f, 72, 64         
5443:065 | DONE dir | em 16 16 |        |             |                 77 6f 72 64              --  w o r d
5443:066 | DONE wsp | em 16 16 |        |             |
5443:067 | DONE lbl | em 16 16 | 006013 |             | nt_find                              
5443:068 | DONE dir | em 16 16 | 006013 | (2 bytes)   |         .byte 4, { NC }              
5443:068 | DONE dir | em 16 16 |        |             |                 04 01                    --  . .
5443:069 | DONE dir | em 16 16 | 006015 | (6 bytes)   |         .word nt_word, xt_find, 00592a 
5443:069 | DONE dir | em 16 16 |        |             |                 07 60 fa 58 2a 59        --  . ` . X * Y
5443:070 | DONE dir | em 16 16 | 00601b | (4 bytes)   |         .byte 66, 69, 6e, 64         
5443:070 | DONE dir | em 16 16 |        |             |                 66 69 6e 64              --  f i n d
5443:071 | DONE wsp | em 16 16 |        |             |
5443:072 | DONE lbl | em 16 16 | 00601f |             | nt_aligned                           
5443:073 | DONE dir | em 16 16 | 00601f | (2 bytes)   |         .byte 7, { NC }              
5443:073 | DONE dir | em 16 16 |        |             |                 07 01                    --  . .
5443:074 | DONE dir | em 16 16 | 006021 | (6 bytes)   |         .word nt_find, xt_aligned, 00552f 
5443:074 | DONE dir | em 16 16 |        |             |                 13 60 2e 55 2f 55        --  . ` . U / U
5443:075 | DONE dir | em 16 16 | 006027 | (7 bytes)   |         .byte 61, 6c, 69, 67, 6e, 65, 64 
5443:075 | DONE dir | em 16 16 |        |             |                 61 6c 69 67 6e 65 64     --  a l i g n e d
5443:076 | DONE wsp | em 16 16 |        |             |
5443:077 | DONE lbl | em 16 16 | 00602e |             | nt_align                             
5443:078 | DONE dir | em 16 16 | 00602e | (2 bytes)   |         .byte 5, { NC }              
5443:078 | DONE dir | em 16 16 |        |             |                 05 01                    --  . .
5443:079 | DONE dir | em 16 16 | 006030 | (6 bytes)   |         .word nt_aligned, xt_align, 00552d 
5443:079 | DONE dir | em 16 16 |        |             |                 1f 60 2c 55 2d 55        --  . ` , U - U
5443:080 | DONE dir | em 16 16 | 006036 | (5 bytes)   |         .byte 61, 6c, 69, 67, 6e     
5443:080 | DONE dir | em 16 16 |        |             |                 61 6c 69 67 6e           --  a l i g n
5443:081 | DONE wsp | em 16 16 |        |             |
5443:082 | DONE lbl | em 16 16 | 00603b |             | nt_wordsnsizes                       
5443:083 | DONE dir | em 16 16 | 00603b | (2 bytes)   |         .byte 0b, { NC }             
5443:083 | DONE dir | em 16 16 |        |             |                 0b 01                    --   .
5443:084 | DONE dir | em 16 16 | 00603d | (6 bytes)   |         .word nt_align, xt_wordsnsizes, 005fd5 
5443:084 | DONE dir | em 16 16 |        |             |                 2e 60 92 5f d5 5f        --  . ` . _ . _
5443:085 | DONE dir | em 16 16 | 006043 | (11 bytes)  |         .byte 77, 6f, 72, 64, 73, 26, 73, 69, 7a, 65, 73 
5443:085 | DONE dir | em 16 16 |        |             |                 77 6f 72 64 73 26 73 69  --  w o r d s & s i
5443:085 | DONE dir | em 16 16 |        |             |                 7a 65 73                 --  z e s
5443:086 | DONE wsp | em 16 16 |        |             |
5443:087 | DONE lbl | em 16 16 | 00604e |             | nt_words                             
5443:088 | DONE dir | em 16 16 | 00604e | (2 bytes)   |         .byte 5, { NC }              
5443:088 | DONE dir | em 16 16 |        |             |                 05 01                    --  . .
5443:089 | DONE dir | em 16 16 | 006050 | (6 bytes)   |         .word nt_wordsnsizes, xt_words, 005fd5 
5443:089 | DONE dir | em 16 16 |        |             |                 3b 60 99 5f d5 5f        --  ; ` . _ . _
5443:090 | DONE dir | em 16 16 | 006056 | (5 bytes)   |         .byte 77, 6f, 72, 64, 73     
5443:090 | DONE dir | em 16 16 |        |             |                 77 6f 72 64 73           --  w o r d s
5443:091 | DONE wsp | em 16 16 |        |             |
5443:092 | DONE lbl | em 16 16 | 00605b |             | nt_dump                              
5443:093 | DONE dir | em 16 16 | 00605b | (2 bytes)   |         .byte 4, { NC }              
5443:093 | DONE dir | em 16 16 |        |             |                 04 01                    --  . .
5443:094 | DONE dir | em 16 16 | 00605d | (6 bytes)   |         .word nt_words, xt_dump, 00588e 
5443:094 | DONE dir | em 16 16 |        |             |                 4e 60 71 58 8e 58        --  N ` q X . X
5443:095 | DONE dir | em 16 16 | 006063 | (4 bytes)   |         .byte 64, 75, 6d, 70         
5443:095 | DONE dir | em 16 16 |        |             |                 64 75 6d 70              --  d u m p
5443:096 | DONE wsp | em 16 16 |        |             |
5443:097 | DONE lbl | em 16 16 | 006067 |             | nt_unloop                            
5443:098 | DONE dir | em 16 16 | 006067 | (2 bytes)   |         .byte 6, { NC + CO }         
5443:098 | DONE dir | em 16 16 |        |             |                 06 05                    --  . .
5443:099 | DONE dir | em 16 16 | 006069 | (6 bytes)   |         .word nt_dump, xt_unloop, 005f5d 
5443:099 | DONE dir | em 16 16 |        |             |                 5b 60 57 5f 5d 5f        --  [ ` W _ ] _
5443:100 | DONE dir | em 16 16 | 00606f | (6 bytes)   |         .byte 75, 6e, 6c, 6f, 6f, 70 
5443:100 | DONE dir | em 16 16 |        |             |                 75 6e 6c 6f 6f 70        --  u n l o o p
5443:101 | DONE wsp | em 16 16 |        |             |
5443:102 | DONE lbl | em 16 16 | 006075 |             | nt_pploop                            
5443:103 | DONE dir | em 16 16 | 006075 | (2 bytes)   |         .byte 7, { NC + CO }         
5443:103 | DONE dir | em 16 16 |        |             |                 07 05                    --  . .
5443:104 | DONE dir | em 16 16 | 006077 | (6 bytes)   |         .word nt_unloop, xt_pploop, 0052ed 
5443:104 | DONE dir | em 16 16 |        |             |                 67 60 df 52 ed 52        --  g ` . R . R
5443:105 | DONE dir | em 16 16 | 00607d | (7 bytes)   |         .byte 28, 2b, 6c, 6f, 6f, 70, 29 
5443:105 | DONE dir | em 16 16 |        |             |                 28 2b 6c 6f 6f 70 29     --  ( + l o o p )
5443:106 | DONE wsp | em 16 16 |        |             |
5443:107 | DONE lbl | em 16 16 | 006084 |             | nt_pqdo                              
5443:108 | DONE dir | em 16 16 | 006084 | (2 bytes)   |         .byte 5, { NC + CO }         
5443:108 | DONE dir | em 16 16 |        |             |                 05 05                    --  . .
5443:109 | DONE dir | em 16 16 | 006086 | (6 bytes)   |         .word nt_pploop, xt_pqdo, 00530d 
5443:109 | DONE dir | em 16 16 |        |             |                 75 60 ee 52 0d 53        --  u ` . R  S
5443:110 | DONE dir | em 16 16 | 00608c | (5 bytes)   |         .byte 28, 3f, 64, 6f, 29     
5443:110 | DONE dir | em 16 16 |        |             |                 28 3f 64 6f 29           --  ( ? d o )
5443:111 | DONE wsp | em 16 16 |        |             |
5443:112 | DONE lbl | em 16 16 | 006091 |             | nt_pdo                               
5443:113 | DONE dir | em 16 16 | 006091 | (2 bytes)   |         .byte 4, { NC + CO }         
5443:113 | DONE dir | em 16 16 |        |             |                 04 05                    --  . .
5443:114 | DONE dir | em 16 16 | 006093 | (6 bytes)   |         .word nt_pqdo, xt_pdo, 00530d 
5443:114 | DONE dir | em 16 16 |        |             |                 84 60 fb 52 0d 53        --  . ` . R  S
5443:115 | DONE dir | em 16 16 | 006099 | (4 bytes)   |         .byte 28, 64, 6f, 29         
5443:115 | DONE dir | em 16 16 |        |             |                 28 64 6f 29              --  ( d o )
5443:116 | DONE wsp | em 16 16 |        |             |
5443:117 | DONE lbl | em 16 16 | 00609d |             | nt_marker                            
5443:118 | DONE dir | em 16 16 | 00609d | (2 bytes)   |         .byte 6, { IM + NC }         
5443:118 | DONE dir | em 16 16 |        |             |                 06 03                    --  . .
5443:119 | DONE dir | em 16 16 | 00609f | (6 bytes)   |         .word nt_pdo, xt_marker, 005acf 
5443:119 | DONE dir | em 16 16 |        |             |                 91 60 a6 5a cf 5a        --  . ` . Z . Z
5443:120 | DONE dir | em 16 16 | 0060a5 | (6 bytes)   |         .byte 6d, 61, 72, 6b, 65, 72 
5443:120 | DONE dir | em 16 16 |        |             |                 6d 61 72 6b 65 72        --  m a r k e r
5443:121 | DONE wsp | em 16 16 |        |             |
5443:122 | DONE lbl | em 16 16 | 0060ab |             | nt_wordsize                          
5443:123 | DONE dir | em 16 16 | 0060ab | (2 bytes)   |         .byte 8, { NC }              
5443:123 | DONE dir | em 16 16 |        |             |                 08 01                    --  . .
5443:124 | DONE dir | em 16 16 | 0060ad | (6 bytes)   |         .word nt_marker, xt_wordsize, 005fe8 
5443:124 | DONE dir | em 16 16 |        |             |                 9d 60 d6 5f e8 5f        --  . ` . _ . _
5443:125 | DONE dir | em 16 16 | 0060b3 | (8 bytes)   |         .byte 77, 6f, 72, 64, 73, 69, 7a, 65 
5443:125 | DONE dir | em 16 16 |        |             |                 77 6f 72 64 73 69 7a 65  --  w o r d s i z e
5443:125 | DONE dir | em 16 16 |        |             |                                          -- 
5443:126 | DONE wsp | em 16 16 |        |             |
5443:127 | DONE lbl | em 16 16 | 0060bb |             | nt_pick                              
5443:128 | DONE dir | em 16 16 | 0060bb | (2 bytes)   |         .byte 4, { NC }              
5443:128 | DONE dir | em 16 16 |        |             |                 04 01                    --  . .
5443:129 | DONE dir | em 16 16 | 0060bd | (6 bytes)   |         .word nt_wordsize, xt_pick, 005c61 
5443:129 | DONE dir | em 16 16 |        |             |                 ab 60 54 5c 61 5c        --  . ` T \ a \
5443:130 | DONE dir | em 16 16 | 0060c3 | (4 bytes)   |         .byte 70, 69, 63, 6b         
5443:130 | DONE dir | em 16 16 |        |             |                 70 69 63 6b              --  p i c k
5443:131 | DONE wsp | em 16 16 |        |             |
5443:132 | DONE lbl | em 16 16 | 0060c7 |             | nt_bell                              
5443:133 | DONE dir | em 16 16 | 0060c7 | (2 bytes)   |         .byte 4, { NC }              
5443:133 | DONE dir | em 16 16 |        |             |                 04 01                    --  . .
5443:134 | DONE dir | em 16 16 | 0060c9 | (6 bytes)   |         .word nt_pick, xt_bell, 005596 
5443:134 | DONE dir | em 16 16 |        |             |                 bb 60 90 55 96 55        --  . ` . U . U
5443:135 | DONE dir | em 16 16 | 0060cf | (4 bytes)   |         .byte 62, 65, 6c, 6c         
5443:135 | DONE dir | em 16 16 |        |             |                 62 65 6c 6c              --  b e l l
5443:136 | DONE wsp | em 16 16 |        |             |
5443:137 | DONE lbl | em 16 16 | 0060d3 |             | nt_chars                             
5443:138 | DONE dir | em 16 16 | 0060d3 | (2 bytes)   |         .byte 5, { NC }              
5443:138 | DONE dir | em 16 16 |        |             |                 05 01                    --  . .
5443:139 | DONE dir | em 16 16 | 0060d5 | (6 bytes)   |         .word nt_bell, xt_chars, 005610 
5443:139 | DONE dir | em 16 16 |        |             |                 c7 60 0f 56 10 56        --  . ` . V . V
5443:140 | DONE dir | em 16 16 | 0060db | (5 bytes)   |         .byte 63, 68, 61, 72, 73     
5443:140 | DONE dir | em 16 16 |        |             |                 63 68 61 72 73           --  c h a r s
5443:141 | DONE wsp | em 16 16 |        |             |
5443:142 | DONE lbl | em 16 16 | 0060e0 |             | nt_cellplus                          
5443:143 | DONE dir | em 16 16 | 0060e0 | (2 bytes)   |         .byte 5, { NC }              
5443:143 | DONE dir | em 16 16 |        |             |                 05 01                    --  . .
5443:144 | DONE dir | em 16 16 | 0060e2 | (6 bytes)   |         .word nt_chars, xt_cellplus, 0055f6 
5443:144 | DONE dir | em 16 16 |        |             |                 d3 60 f4 55 f6 55        --  . ` . U . U
5443:145 | DONE dir | em 16 16 | 0060e8 | (5 bytes)   |         .byte 63, 65, 6c, 6c, 2b     
5443:145 | DONE dir | em 16 16 |        |             |                 63 65 6c 6c 2b           --  c e l l +
5443:146 | DONE wsp | em 16 16 |        |             |
5443:147 | DONE lbl | em 16 16 | 0060ed |             | nt_charplus                          
5443:148 | DONE dir | em 16 16 | 0060ed | (2 bytes)   |         .byte 5, { NC }              uses code of 1+
5443:148 | DONE dir | em 16 16 |        |             |                 05 01                    --  . .
5443:149 | DONE dir | em 16 16 | 0060ef | (6 bytes)   |         .word nt_cellplus, xt_one-plus, 0053c8 
5443:149 | DONE dir | em 16 16 |        |             |                 e0 60 c7 53 c8 53        --  . ` . S . S
5443:150 | DONE dir | em 16 16 | 0060f5 | (5 bytes)   |         .byte 63, 68, 61, 72, 2b     
5443:150 | DONE dir | em 16 16 |        |             |                 63 68 61 72 2b           --  c h a r +
5443:151 | DONE wsp | em 16 16 |        |             |
5443:152 | DONE lbl | em 16 16 | 0060fa |             | nt_decimal                           
5443:153 | DONE dir | em 16 16 | 0060fa | (2 bytes)   |         .byte 7, { NC }              
5443:153 | DONE dir | em 16 16 |        |             |                 07 01                    --  . .
5443:154 | DONE dir | em 16 16 | 0060fc | (6 bytes)   |         .word nt_charplus, xt_decimal, 005825 
5443:154 | DONE dir | em 16 16 |        |             |                 ed 60 20 58 25 58        --  . `   X % X
5443:155 | DONE dir | em 16 16 | 006102 | (7 bytes)   |         .byte 64, 65, 63, 69, 6d, 61, 6c 
5443:155 | DONE dir | em 16 16 |        |             |                 64 65 63 69 6d 61 6c     --  d e c i m a l
5443:156 | DONE wsp | em 16 16 |        |             |
5443:157 | DONE lbl | em 16 16 | 006109 |             | nt_hex                               
5443:158 | DONE dir | em 16 16 | 006109 | (2 bytes)   |         .byte 3, { NC }              
5443:158 | DONE dir | em 16 16 |        |             |                 03 01                    --  . .
5443:159 | DONE dir | em 16 16 | 00610b | (6 bytes)   |         .word nt_decimal, xt_hex, 005a2c 
5443:159 | DONE dir | em 16 16 |        |             |                 fa 60 27 5a 2c 5a        --  . ` ' Z , Z
5443:160 | DONE dir | em 16 16 | 006111 | (3 bytes)   |         .byte 68, 65, 78             
5443:160 | DONE dir | em 16 16 |        |             |                 68 65 78                 --  h e x
5443:161 | DONE wsp | em 16 16 |        |             |
5443:162 | DONE lbl | em 16 16 | 006114 |             | nt_unused                            
5443:163 | DONE dir | em 16 16 | 006114 | (2 bytes)   |         .byte 6, { NC }              
5443:163 | DONE dir | em 16 16 |        |             |                 06 01                    --  . .
5443:164 | DONE dir | em 16 16 | 006116 | (6 bytes)   |         .word nt_hex, xt_unused, 005f69 
5443:164 | DONE dir | em 16 16 |        |             |                 09 61 5e 5f 69 5f        --  	 a ^ _ i _
5443:165 | DONE dir | em 16 16 | 00611c | (6 bytes)   |         .byte 75, 6e, 75, 73, 65, 64 
5443:165 | DONE dir | em 16 16 |        |             |                 75 6e 75 73 65 64        --  u n u s e d
5443:166 | DONE wsp | em 16 16 |        |             |
5443:167 | DONE lbl | em 16 16 | 006122 |             | nt_page                              
5443:168 | DONE dir | em 16 16 | 006122 | (2 bytes)   |         .byte 4, { NC }              
5443:168 | DONE dir | em 16 16 |        |             |                 04 01                    --  . .
5443:169 | DONE dir | em 16 16 | 006124 | (6 bytes)   |         .word nt_unused, xt_page, 005bee 
5443:169 | DONE dir | em 16 16 |        |             |                 14 61 e2 5b ee 5b        --  . a . [ . [
5443:170 | DONE dir | em 16 16 | 00612a | (4 bytes)   |         .byte 70, 61, 67, 65         
5443:170 | DONE dir | em 16 16 |        |             |                 70 61 67 65              --  p a g e
5443:171 | DONE wsp | em 16 16 |        |             |
5443:172 | DONE lbl | em 16 16 | 00612e |             | nt_at-xy                             
5443:173 | DONE dir | em 16 16 | 00612e | (2 bytes)   |         .byte 5, { NC }              
5443:173 | DONE dir | em 16 16 |        |             |                 05 01                    --  . .
5443:174 | DONE dir | em 16 16 | 006130 | (6 bytes)   |         .word nt_page, xt_at-xy, 005587 
5443:174 | DONE dir | em 16 16 |        |             |                 22 61 60 55 87 55        --  " a ` U . U
5443:175 | DONE dir | em 16 16 | 006136 | (5 bytes)   |         .byte 61, 74, 2d, 78, 79     
5443:175 | DONE dir | em 16 16 |        |             |                 61 74 2d 78 79           --  a t - x y
5443:176 | DONE wsp | em 16 16 |        |             |
5443:177 | DONE lbl | em 16 16 | 00613b |             | nt_tworfetch                         
5443:178 | DONE dir | em 16 16 | 00613b | (2 bytes)   |         .byte 3, 00                  not natively compiled (yet)
5443:178 | DONE dir | em 16 16 |        |             |                 03 00                    --  . .
5443:179 | DONE dir | em 16 16 | 00613d | (6 bytes)   |         .word nt_at-xy, xt_tworfetch, 005423 
5443:179 | DONE dir | em 16 16 |        |             |                 2e 61 16 54 23 54        --  . a . T # T
5443:180 | DONE dir | em 16 16 | 006143 | (3 bytes)   |         .byte 32, 72, 40             
5443:180 | DONE dir | em 16 16 |        |             |                 32 72 40                 --  2 r @
5443:181 | DONE wsp | em 16 16 |        |             |
5443:182 | DONE lbl | em 16 16 | 006146 |             | nt_2variable                         
5443:183 | DONE dir | em 16 16 | 006146 | (2 bytes)   |         .byte 9, { NC }              
5443:183 | DONE dir | em 16 16 |        |             |                 09 01                    --  	 .
5443:184 | DONE dir | em 16 16 | 006148 | (6 bytes)   |         .word nt_tworfetch, xt_2variable, 005447 
5443:184 | DONE dir | em 16 16 |        |             |                 3b 61 35 54 47 54        --  ; a 5 T G T
5443:185 | DONE dir | em 16 16 | 00614e | (9 bytes)   |         .byte 32, 76, 61, 72, 69, 61, 62, 6c, 65 
5443:185 | DONE dir | em 16 16 |        |             |                 32 76 61 72 69 61 62 6c  --  2 v a r i a b l
5443:185 | DONE dir | em 16 16 |        |             |                 65                       --  e
5443:186 | DONE wsp | em 16 16 |        |             |
5443:187 | DONE lbl | em 16 16 | 006157 |             | nt_dabs                              
5443:188 | DONE dir | em 16 16 | 006157 | (2 bytes)   |         .byte 4, { NC }              
5443:188 | DONE dir | em 16 16 |        |             |                 04 01                    --  . .
5443:189 | DONE dir | em 16 16 | 006159 | (6 bytes)   |         .word nt_2variable, xt_dabs, 00581f 
5443:189 | DONE dir | em 16 16 |        |             |                 46 61 19 58 1f 58        --  F a . X . X
5443:190 | DONE dir | em 16 16 | 00615f | (4 bytes)   |         .byte 64, 61, 62, 73         
5443:190 | DONE dir | em 16 16 |        |             |                 64 61 62 73              --  d a b s
5443:191 | DONE wsp | em 16 16 |        |             |
5443:192 | DONE lbl | em 16 16 | 006163 |             | nt_dnegate                           
5443:193 | DONE dir | em 16 16 | 006163 | (2 bytes)   |         .byte 7, { NC }              
5443:193 | DONE dir | em 16 16 |        |             |                 07 01                    --  . .
5443:194 | DONE dir | em 16 16 | 006165 | (6 bytes)   |         .word nt_dabs, xt_dnegate, 005848 
5443:194 | DONE dir | em 16 16 |        |             |                 57 61 35 58 48 58        --  W a 5 X H X
5443:195 | DONE dir | em 16 16 | 00616b | (7 bytes)   |         .byte 64, 6e, 65, 67, 61, 74, 65 
5443:195 | DONE dir | em 16 16 |        |             |                 64 6e 65 67 61 74 65     --  d n e g a t e
5443:196 | DONE wsp | em 16 16 |        |             |
5443:197 | DONE lbl | em 16 16 | 006172 |             | nt_dtos                              
5443:198 | DONE dir | em 16 16 | 006172 | (2 bytes)   |         .byte 3, { NC }              
5443:198 | DONE dir | em 16 16 |        |             |                 03 01                    --  . .
5443:199 | DONE dir | em 16 16 | 006174 | (6 bytes)   |         .word nt_dnegate, xt_dtos, 005818 
5443:199 | DONE dir | em 16 16 |        |             |                 63 61 14 58 18 58        --  c a . X . X
5443:200 | DONE dir | em 16 16 | 00617a | (3 bytes)   |         .byte 64, 3e, 73             
5443:200 | DONE dir | em 16 16 |        |             |                 64 3e 73                 --  d > s
5443:201 | DONE wsp | em 16 16 |        |             |
5443:202 | DONE lbl | em 16 16 | 00617d |             | nt_stod                              
5443:203 | DONE dir | em 16 16 | 00617d | (2 bytes)   |         .byte 3, { NC }              
5443:203 | DONE dir | em 16 16 |        |             |                 03 01                    --  . .
5443:204 | DONE dir | em 16 16 | 00617f | (6 bytes)   |         .word nt_dtos, xt_stod, 005d40 
5443:204 | DONE dir | em 16 16 |        |             |                 72 61 31 5d 40 5d        --  r a 1 ] @ ]
5443:205 | DONE dir | em 16 16 | 006185 | (3 bytes)   |         .byte 73, 3e, 64             
5443:205 | DONE dir | em 16 16 |        |             |                 73 3e 64                 --  s > d
5443:206 | DONE wsp | em 16 16 |        |             |
5443:207 | DONE lbl | em 16 16 | 006188 |             | nt_twofromr                          
5443:208 | DONE dir | em 16 16 | 006188 | (2 bytes)   |         .byte 3, { CO + NC }         NC is special case
5443:208 | DONE dir | em 16 16 |        |             |                 03 05                    --  . .
5443:209 | DONE dir | em 16 16 | 00618a | (6 bytes)   |         .word nt_stod, xt_twofromr, 005415 
5443:209 | DONE dir | em 16 16 |        |             |                 7d 61 05 54 15 54        --  } a . T . T
5443:210 | DONE dir | em 16 16 | 006190 | (3 bytes)   |         .byte 32, 72, 3e             
5443:210 | DONE dir | em 16 16 |        |             |                 32 72 3e                 --  2 r >
5443:211 | DONE wsp | em 16 16 |        |             |
5443:212 | DONE lbl | em 16 16 | 006193 |             | nt_twotor                            
5443:213 | DONE dir | em 16 16 | 006193 | (2 bytes)   |         .byte 3, { CO + NC }         NC is special case
5443:213 | DONE dir | em 16 16 |        |             |                 03 05                    --  . .
5443:214 | DONE dir | em 16 16 | 006195 | (6 bytes)   |         .word nt_twofromr, xt_twotor, 0053e5 
5443:214 | DONE dir | em 16 16 |        |             |                 88 61 d5 53 e5 53        --  . a . S . S
5443:215 | DONE dir | em 16 16 | 00619b | (3 bytes)   |         .byte 32, 3e, 72             
5443:215 | DONE dir | em 16 16 |        |             |                 32 3e 72                 --  2 > r
5443:216 | DONE wsp | em 16 16 |        |             |
5443:217 | DONE lbl | em 16 16 | 00619e |             | nt_dminus                            
5443:218 | DONE dir | em 16 16 | 00619e | (2 bytes)   |         .byte 2, { NC }              
5443:218 | DONE dir | em 16 16 |        |             |                 02 01                    --  . .
5443:219 | DONE dir | em 16 16 | 0061a0 | (6 bytes)   |         .word nt_twotor, xt_dminus, 005813 
5443:219 | DONE dir | em 16 16 |        |             |                 93 61 ff 57 13 58        --  . a . W . X
5443:220 | DONE dir | em 16 16 | 0061a6 | (2 bytes)   |         .byte 64, 2d                 
5443:220 | DONE dir | em 16 16 |        |             |                 64 2d                    --  d -
5443:221 | DONE wsp | em 16 16 |        |             |
5443:222 | DONE lbl | em 16 16 | 0061a8 |             | nt_dplus                             
5443:223 | DONE dir | em 16 16 | 0061a8 | (2 bytes)   |         .byte 2, { NC }              
5443:223 | DONE dir | em 16 16 |        |             |                 02 01                    --  . .
5443:224 | DONE dir | em 16 16 | 0061aa | (6 bytes)   |         .word nt_dminus, xt_dplus, 0057fe 
5443:224 | DONE dir | em 16 16 |        |             |                 9e 61 ed 57 fe 57        --  . a . W . W
5443:225 | DONE dir | em 16 16 | 0061b0 | (2 bytes)   |         .byte 64, 2b                 
5443:225 | DONE dir | em 16 16 |        |             |                 64 2b                    --  d +
5443:226 | DONE wsp | em 16 16 |        |             |
5443:227 | DONE lbl | em 16 16 | 0061b2 |             | nt_fmmod                             
5443:228 | DONE dir | em 16 16 | 0061b2 | (2 bytes)   |         .byte 6, { NC }              
5443:228 | DONE dir | em 16 16 |        |             |                 06 01                    --  . .
5443:229 | DONE dir | em 16 16 | 0061b4 | (6 bytes)   |         .word nt_dplus, xt_fmmod, 0059d5 
5443:229 | DONE dir | em 16 16 |        |             |                 a8 61 82 59 d5 59        --  . a . Y . Y
5443:230 | DONE dir | em 16 16 | 0061ba | (6 bytes)   |         .byte 66, 6d, 2f, 6d, 6f, 64 
5443:230 | DONE dir | em 16 16 |        |             |                 66 6d 2f 6d 6f 64        --  f m / m o d
5443:231 | DONE wsp | em 16 16 |        |             |
5443:232 | DONE lbl | em 16 16 | 0061c0 |             | nt_smrem                             
5443:233 | DONE dir | em 16 16 | 0061c0 | (2 bytes)   |         .byte 6, { NC }              
5443:233 | DONE dir | em 16 16 |        |             |                 06 01                    --  . .
5443:234 | DONE dir | em 16 16 | 0061c2 | (6 bytes)   |         .word nt_fmmod, xt_smrem, 005e09 
5443:234 | DONE dir | em 16 16 |        |             |                 b2 61 b0 5d 09 5e        --  . a . ] 	 ^
5443:235 | DONE dir | em 16 16 | 0061c8 | (6 bytes)   |         .byte 73, 6d, 2f, 72, 65, 6d 
5443:235 | DONE dir | em 16 16 |        |             |                 73 6d 2f 72 65 6d        --  s m / r e m
5443:236 | DONE wsp | em 16 16 |        |             |
5443:237 | DONE lbl | em 16 16 | 0061ce |             | nt_udmod                             
5443:238 | DONE dir | em 16 16 | 0061ce | (2 bytes)   |         .byte 6, { NC }              
5443:238 | DONE dir | em 16 16 |        |             |                 06 01                    --  . .
5443:239 | DONE dir | em 16 16 | 0061d0 | (6 bytes)   |         .word nt_smrem, xt_udmod, 005ea7 
5443:239 | DONE dir | em 16 16 |        |             |                 c0 61 8c 5e a7 5e        --  . a . ^ . ^
5443:240 | DONE dir | em 16 16 | 0061d6 | (6 bytes)   |         .byte 75, 64, 2f, 6d, 6f, 64 
5443:240 | DONE dir | em 16 16 |        |             |                 75 64 2f 6d 6f 64        --  u d / m o d
5443:241 | DONE wsp | em 16 16 |        |             |
5443:242 | DONE lbl | em 16 16 | 0061dc |             | nt_ummod                             
5443:243 | DONE dir | em 16 16 | 0061dc | (2 bytes)   |         .byte 6, { NC }              
5443:243 | DONE dir | em 16 16 |        |             |                 06 01                    --  . .
5443:244 | DONE dir | em 16 16 | 0061de | (6 bytes)   |         .word nt_udmod, xt_ummod, 005f56 
5443:244 | DONE dir | em 16 16 |        |             |                 ce 61 06 5f 56 5f        --  . a . _ V _
5443:245 | DONE dir | em 16 16 | 0061e4 | (6 bytes)   |         .byte 75, 6d, 2f, 6d, 6f, 64 
5443:245 | DONE dir | em 16 16 |        |             |                 75 6d 2f 6d 6f 64        --  u m / m o d
5443:246 | DONE wsp | em 16 16 |        |             |
5443:247 | DONE lbl | em 16 16 | 0061ea |             | nt_star                              
5443:248 | DONE dir | em 16 16 | 0061ea | (2 bytes)   |         .byte 1, { NC }              
5443:248 | DONE dir | em 16 16 |        |             |                 01 01                    --  . .
5443:249 | DONE dir | em 16 16 | 0061ec | (6 bytes)   |         .word nt_ummod, xt_star, 005e38 
5443:249 | DONE dir | em 16 16 |        |             |                 dc 61 31 5e 38 5e        --  . a 1 ^ 8 ^
5443:250 | DONE dir | em 16 16 | 0061f2 | (1 bytes)   |         .byte 2a                     
5443:250 | DONE dir | em 16 16 |        |             |                 2a                       --  *
5443:251 | DONE wsp | em 16 16 |        |             |
5443:252 | DONE lbl | em 16 16 | 0061f3 |             | nt_mstar                             
5443:253 | DONE dir | em 16 16 | 0061f3 | (2 bytes)   |         .byte 2, { NC }              
5443:253 | DONE dir | em 16 16 |        |             |                 02 01                    --  . .
5443:254 | DONE dir | em 16 16 | 0061f5 | (6 bytes)   |         .word nt_star, xt_mstar, 005aa5 
5443:254 | DONE dir | em 16 16 |        |             |                 ea 61 86 5a a5 5a        --  . a . Z . Z
5443:255 | DONE dir | em 16 16 | 0061fb | (2 bytes)   |         .byte 6d, 2a                 
5443:255 | DONE dir | em 16 16 |        |             |                 6d 2a                    --  m *
5443:256 | DONE wsp | em 16 16 |        |             |
5443:257 | DONE lbl | em 16 16 | 0061fd |             | nt_umstar                            
5443:258 | DONE dir | em 16 16 | 0061fd | (2 bytes)   |         .byte 3, { NC }              
5443:258 | DONE dir | em 16 16 |        |             |                 03 01                    --  . .
5443:259 | DONE dir | em 16 16 | 0061ff | (6 bytes)   |         .word nt_mstar, xt_umstar, 005f05 
5443:259 | DONE dir | em 16 16 |        |             |                 f3 61 a7 5e 05 5f        --  . a . ^ . _
5443:260 | DONE dir | em 16 16 | 006205 | (3 bytes)   |         .byte 75, 6d, 2a             
5443:260 | DONE dir | em 16 16 |        |             |                 75 6d 2a                 --  u m *
5443:261 | DONE wsp | em 16 16 |        |             |
5443:262 | DONE lbl | em 16 16 | 006208 |             | nt_cmoveup                           
5443:263 | DONE dir | em 16 16 | 006208 | (2 bytes)   |         .byte 6, { NC }              
5443:263 | DONE dir | em 16 16 |        |             |                 06 01                    --  . .
5443:264 | DONE dir | em 16 16 | 00620a | (6 bytes)   |         .word nt_umstar, xt_cmoveup, 00564c 
5443:264 | DONE dir | em 16 16 |        |             |                 fd 61 34 56 4c 56        --  . a 4 V L V
5443:265 | DONE dir | em 16 16 | 006210 | (6 bytes)   |         .byte 63, 6d, 6f, 76, 65, 3e 
5443:265 | DONE dir | em 16 16 |        |             |                 63 6d 6f 76 65 3e        --  c m o v e >
5443:266 | DONE wsp | em 16 16 |        |             |
5443:267 | DONE lbl | em 16 16 | 006216 |             | nt_cmove                             
5443:268 | DONE dir | em 16 16 | 006216 | (2 bytes)   |         .byte 5, { NC }              
5443:268 | DONE dir | em 16 16 |        |             |                 05 01                    --  . .
5443:269 | DONE dir | em 16 16 | 006218 | (6 bytes)   |         .word nt_cmoveup, xt_cmove, 005633 
5443:269 | DONE dir | em 16 16 |        |             |                 08 62 11 56 33 56        --  . b . V 3 V
5443:270 | DONE dir | em 16 16 | 00621e | (5 bytes)   |         .byte 63, 6d, 6f, 76, 65     
5443:270 | DONE dir | em 16 16 |        |             |                 63 6d 6f 76 65           --  c m o v e
5443:271 | DONE wsp | em 16 16 |        |             |
5443:272 | DONE lbl | em 16 16 | 006223 |             | nt_count                             
5443:273 | DONE dir | em 16 16 | 006223 | (2 bytes)   |         .byte 5, { NC }              
5443:273 | DONE dir | em 16 16 |        |             |                 05 01                    --  . .
5443:274 | DONE dir | em 16 16 | 006225 | (6 bytes)   |         .word nt_cmove, xt_count, 005720 
5443:274 | DONE dir | em 16 16 |        |             |                 16 62 13 57 20 57        --  . b . W   W
5443:275 | DONE dir | em 16 16 | 00622b | (5 bytes)   |         .byte 63, 6f, 75, 6e, 74     
5443:275 | DONE dir | em 16 16 |        |             |                 63 6f 75 6e 74           --  c o u n t
5443:276 | DONE wsp | em 16 16 |        |             |
5443:277 | DONE lbl | em 16 16 | 006230 |             | nt_abortq                            
5443:278 | DONE dir | em 16 16 | 006230 | (2 bytes)   |         .byte 6, { CO + IM }         
5443:278 | DONE dir | em 16 16 |        |             |                 06 06                    --  . .
5443:279 | DONE dir | em 16 16 | 006232 | (6 bytes)   |         .word nt_count, xt_abortq, 005480 
5443:279 | DONE dir | em 16 16 |        |             |                 23 62 64 54 80 54        --  # b d T . T
5443:280 | DONE dir | em 16 16 | 006238 | (6 bytes)   |         .byte 61, 62, 6f, 72, 74, &34 ABORT"
5443:280 | DONE dir | em 16 16 |        |             |                 61 62 6f 72 74 22        --  a b o r t "
5443:281 | DONE wsp | em 16 16 |        |             |
5443:282 | DONE lbl | em 16 16 | 00623e |             | nt_abort                             
5443:283 | DONE dir | em 16 16 | 00623e | (2 bytes)   |         .byte 5, 00                  TODO check flags - NC possible?
5443:283 | DONE dir | em 16 16 |        |             |                 05 00                    --  . .
5443:284 | DONE dir | em 16 16 | 006240 | (6 bytes)   |         .word nt_abortq, xt_abort, 0050f9 
5443:284 | DONE dir | em 16 16 |        |             |                 30 62 b2 50 f9 50        --  0 b . P . P
5443:285 | DONE dir | em 16 16 | 006246 | (5 bytes)   |         .byte 61, 62, 6f, 72, 74     
5443:285 | DONE dir | em 16 16 |        |             |                 61 62 6f 72 74           --  a b o r t
5443:286 | DONE wsp | em 16 16 |        |             |
5443:287 | DONE lbl | em 16 16 | 00624b |             | nt_parse                             
5443:288 | DONE dir | em 16 16 | 00624b | (2 bytes)   |         .byte 5, 00                  
5443:288 | DONE dir | em 16 16 |        |             |                 05 00                    --  . .
5443:289 | DONE dir | em 16 16 | 00624d | (6 bytes)   |         .word nt_abort, xt_parse, 005c53 
5443:289 | DONE dir | em 16 16 |        |             |                 3e 62 21 5c 53 5c        --  > b ! \ S \
5443:290 | DONE dir | em 16 16 | 006253 | (5 bytes)   |         .byte 70, 61, 72, 73, 65     
5443:290 | DONE dir | em 16 16 |        |             |                 70 61 72 73 65           --  p a r s e
5443:291 | DONE wsp | em 16 16 |        |             |
5443:292 | DONE lbl | em 16 16 | 006258 |             | nt_quit                              
5443:293 | DONE dir | em 16 16 | 006258 | (2 bytes)   |         .byte 4, 00                  
5443:293 | DONE dir | em 16 16 |        |             |                 04 00                    --  . .
5443:294 | DONE dir | em 16 16 | 00625a | (6 bytes)   |         .word nt_parse, xt_quit, 0050f9 
5443:294 | DONE dir | em 16 16 |        |             |                 4b 62 ba 50 f9 50        --  K b . P . P
5443:295 | DONE dir | em 16 16 | 006260 | (4 bytes)   |         .byte 71, 75, 69, 74         
5443:295 | DONE dir | em 16 16 |        |             |                 71 75 69 74              --  q u i t
5443:296 | DONE wsp | em 16 16 |        |             |
5443:297 | DONE lbl | em 16 16 | 006264 |             | nt_question                          
5443:298 | DONE dir | em 16 16 | 006264 | (2 bytes)   |         .byte 1, { NC }              
5443:298 | DONE dir | em 16 16 |        |             |                 01 01                    --  . .
5443:299 | DONE dir | em 16 16 | 006266 | (6 bytes)   |         .word nt_quit, xt_question, 0052c5 
5443:299 | DONE dir | em 16 16 |        |             |                 58 62 bf 52 c5 52        --  X b . R . R
5443:300 | DONE dir | em 16 16 | 00626c | (1 bytes)   |         .byte 3f                     
5443:300 | DONE dir | em 16 16 |        |             |                 3f                       --  ?
5443:301 | DONE wsp | em 16 16 |        |             |
5443:302 | DONE lbl | em 16 16 | 00626d |             | nt_int-name                          
5443:303 | DONE dir | em 16 16 | 00626d | (2 bytes)   |         .byte 8, { NC }              
5443:303 | DONE dir | em 16 16 |        |             |                 08 01                    --  . .
5443:304 | DONE dir | em 16 16 | 00626f | (6 bytes)   |         .word nt_question, xt_int-name, 005a19 
5443:304 | DONE dir | em 16 16 |        |             |                 64 62 f6 59 19 5a        --  d b . Y . Z
5443:305 | DONE dir | em 16 16 | 006275 | (8 bytes)   |         .byte 69, 6e, 74, 3e, 6e, 61, 6d, 65 
5443:305 | DONE dir | em 16 16 |        |             |                 69 6e 74 3e 6e 61 6d 65  --  i n t > n a m e
5443:305 | DONE dir | em 16 16 |        |             |                                          -- 
5443:306 | DONE wsp | em 16 16 |        |             |
5443:307 | DONE lbl | em 16 16 | 00627d |             | nt_name-int                          
5443:308 | DONE dir | em 16 16 | 00627d | (2 bytes)   |         .byte 8, { NC }              
5443:308 | DONE dir | em 16 16 |        |             |                 08 01                    --  . .
5443:309 | DONE dir | em 16 16 | 00627f | (6 bytes)   |         .word nt_int-name, xt_name-int, 005b0f 
5443:309 | DONE dir | em 16 16 |        |             |                 6d 62 07 5b 0f 5b        --  m b . [ . [
5443:310 | DONE dir | em 16 16 | 006285 | (8 bytes)   |         .byte 6e, 61, 6d, 65, 3e, 69, 6e, 74 
5443:310 | DONE dir | em 16 16 |        |             |                 6e 61 6d 65 3e 69 6e 74  --  n a m e > i n t
5443:310 | DONE dir | em 16 16 |        |             |                                          -- 
5443:311 | DONE wsp | em 16 16 |        |             |
5443:312 | DONE lbl | em 16 16 | 00628d |             | nt_cr                                
5443:313 | DONE dir | em 16 16 | 00628d | (2 bytes)   |         .byte 2, { NC }              
5443:313 | DONE dir | em 16 16 |        |             |                 02 01                    --  . .
5443:314 | DONE dir | em 16 16 | 00628f | (6 bytes)   |         .word nt_name-int, xt_cr, 005727 
5443:314 | DONE dir | em 16 16 |        |             |                 7d 62 21 57 27 57        --  } b ! W ' W
5443:315 | DONE dir | em 16 16 | 006295 | (2 bytes)   |         .byte 63, 72                 
5443:315 | DONE dir | em 16 16 |        |             |                 63 72                    --  c r
5443:316 | DONE wsp | em 16 16 |        |             |
5443:317 | DONE lbl | em 16 16 | 006297 |             | nt_fill                              
5443:318 | DONE dir | em 16 16 | 006297 | (2 bytes)   |         .byte 4, { NC }              
5443:318 | DONE dir | em 16 16 |        |             |                 04 01                    --  . .
5443:319 | DONE dir | em 16 16 | 006299 | (6 bytes)   |         .word nt_cr, xt_fill, 0058bd 
5443:319 | DONE dir | em 16 16 |        |             |                 8d 62 a3 58 bd 58        --  . b . X . X
5443:320 | DONE dir | em 16 16 | 00629f | (4 bytes)   |         .byte 66, 69, 6c, 6c         
5443:320 | DONE dir | em 16 16 |        |             |                 66 69 6c 6c              --  f i l l
5443:321 | DONE wsp | em 16 16 |        |             |
5443:322 | DONE lbl | em 16 16 | 0062a3 |             | nt_erase                             
5443:323 | DONE dir | em 16 16 | 0062a3 | (2 bytes)   |         .byte 5, { NC }              
5443:323 | DONE dir | em 16 16 |        |             |                 05 01                    --  . .
5443:324 | DONE dir | em 16 16 | 0062a5 | (6 bytes)   |         .word nt_fill, xt_erase, 0058bd 
5443:324 | DONE dir | em 16 16 |        |             |                 97 62 9c 58 bd 58        --  . b . X . X
5443:325 | DONE dir | em 16 16 | 0062ab | (5 bytes)   |         .byte 65, 72, 61, 73, 65     
5443:325 | DONE dir | em 16 16 |        |             |                 65 72 61 73 65           --  e r a s e
5443:326 | DONE wsp | em 16 16 |        |             |
5443:327 | DONE lbl | em 16 16 | 0062b0 |             | nt_numbermore                        
5443:328 | DONE dir | em 16 16 | 0062b0 | (2 bytes)   |         .byte 2, { NC }              "quoth the rumben"
5443:328 | DONE dir | em 16 16 |        |             |                 02 01                    --  . .
5443:329 | DONE dir | em 16 16 | 0062b2 | (6 bytes)   |         .word nt_erase, xt_numbermore, 0052b5 
5443:329 | DONE dir | em 16 16 |        |             |                 a3 62 a7 52 b5 52        --  . b . R . R
5443:330 | DONE dir | em 16 16 | 0062b8 | (2 bytes)   |         .byte 23, 3e                 
5443:330 | DONE dir | em 16 16 |        |             |                 23 3e                    --  # >
5443:331 | DONE wsp | em 16 16 |        |             |
5443:332 | DONE lbl | em 16 16 | 0062ba |             | nt_hold                              
5443:333 | DONE dir | em 16 16 | 0062ba | (2 bytes)   |         .byte 4, { NC }              
5443:333 | DONE dir | em 16 16 |        |             |                 04 01                    --  . .
5443:334 | DONE dir | em 16 16 | 0062bc | (6 bytes)   |         .word nt_numbermore, xt_hold, 005a3a 
5443:334 | DONE dir | em 16 16 |        |             |                 b0 62 2d 5a 3a 5a        --  . b - Z : Z
5443:335 | DONE dir | em 16 16 | 0062c2 | (4 bytes)   |         .byte 68, 6f, 6c, 64         
5443:335 | DONE dir | em 16 16 |        |             |                 68 6f 6c 64              --  h o l d
5443:336 | DONE wsp | em 16 16 |        |             |
5443:337 | DONE lbl | em 16 16 | 0062c6 |             | nt_hashs                             
5443:338 | DONE dir | em 16 16 | 0062c6 | (2 bytes)   |         .byte 2, { NC }              also known as "number-s"
5443:338 | DONE dir | em 16 16 |        |             |                 02 01                    --  . .
5443:339 | DONE dir | em 16 16 | 0062c8 | (6 bytes)   |         .word nt_hold, xt_hashs, 0052be 
5443:339 | DONE dir | em 16 16 |        |             |                 ba 62 b6 52 be 52        --  . b . R . R
5443:340 | DONE dir | em 16 16 | 0062ce | (2 bytes)   |         .byte 23, 73                 
5443:340 | DONE dir | em 16 16 |        |             |                 23 73                    --  # s
5443:341 | DONE wsp | em 16 16 |        |             |
5443:342 | DONE lbl | em 16 16 | 0062d0 |             | nt_sign                              
5443:343 | DONE dir | em 16 16 | 0062d0 | (2 bytes)   |         .byte 4, { NC }              
5443:343 | DONE dir | em 16 16 |        |             |                 04 01                    --  . .
5443:344 | DONE dir | em 16 16 | 0062d2 | (6 bytes)   |         .word nt_hashs, xt_sign, 005d4e 
5443:344 | DONE dir | em 16 16 |        |             |                 c6 62 41 5d 4e 5d        --  . b A ] N ]
5443:345 | DONE dir | em 16 16 | 0062d8 | (4 bytes)   |         .byte 73, 69, 67, 6e         
5443:345 | DONE dir | em 16 16 |        |             |                 73 69 67 6e              --  s i g n
5443:346 | DONE wsp | em 16 16 |        |             |
5443:347 | DONE lbl | em 16 16 | 0062dc |             | nt_hash                              
5443:348 | DONE dir | em 16 16 | 0062dc | (2 bytes)   |         .byte 1, { NC }              also known as "number-sign"
5443:348 | DONE dir | em 16 16 |        |             |                 01 01                    --  . .
5443:349 | DONE dir | em 16 16 | 0062de | (6 bytes)   |         .word nt_sign, xt_hash, 0052a6 
5443:349 | DONE dir | em 16 16 |        |             |                 d0 62 8c 52 a6 52        --  . b . R . R
5443:350 | DONE dir | em 16 16 | 0062e4 | (1 bytes)   |         .byte 23                     
5443:350 | DONE dir | em 16 16 |        |             |                 23                       --  #
5443:351 | DONE wsp | em 16 16 |        |             |
5443:352 | DONE lbl | em 16 16 | 0062e5 |             | nt_lessnumber                        
5443:353 | DONE dir | em 16 16 | 0062e5 | (2 bytes)   |         .byte 2, { NC }              
5443:353 | DONE dir | em 16 16 |        |             |                 02 01                    --  . .
5443:354 | DONE dir | em 16 16 | 0062e7 | (6 bytes)   |         .word nt_hash, xt_lessnumber, 005122 
5443:354 | DONE dir | em 16 16 |        |             |                 dc 62 19 51 22 51        --  . b . Q " Q
5443:355 | DONE dir | em 16 16 | 0062ed | (2 bytes)   |         .byte 3c, 23                 
5443:355 | DONE dir | em 16 16 |        |             |                 3c 23                    --  < #
5443:356 | DONE wsp | em 16 16 |        |             |
5443:357 | DONE lbl | em 16 16 | 0062ef |             | nt_bl                                
5443:358 | DONE dir | em 16 16 | 0062ef | (2 bytes)   |         .byte 2, { NC }              
5443:358 | DONE dir | em 16 16 |        |             |                 02 01                    --  . .
5443:359 | DONE dir | em 16 16 | 0062f1 | (6 bytes)   |         .word nt_lessnumber, xt_bl, 0055a4 
5443:359 | DONE dir | em 16 16 |        |             |                 e5 62 9d 55 a4 55        --  . b . U . U
5443:360 | DONE dir | em 16 16 | 0062f7 | (2 bytes)   |         .byte 62, 6c                 
5443:360 | DONE dir | em 16 16 |        |             |                 62 6c                    --  b l
5443:361 | DONE wsp | em 16 16 |        |             |
5443:362 | DONE lbl | em 16 16 | 0062f9 |             | nt_spaces                            
5443:363 | DONE dir | em 16 16 | 0062f9 | (2 bytes)   |         .byte 6, { NC }              
5443:363 | DONE dir | em 16 16 |        |             |                 06 01                    --  . .
5443:364 | DONE dir | em 16 16 | 0062fb | (6 bytes)   |         .word nt_bl, xt_spaces, 005e30 
5443:364 | DONE dir | em 16 16 |        |             |                 ef 62 24 5e 30 5e        --  . b $ ^ 0 ^
5443:365 | DONE dir | em 16 16 | 006301 | (6 bytes)   |         .byte 73, 70, 61, 63, 65, 73 
5443:365 | DONE dir | em 16 16 |        |             |                 73 70 61 63 65 73        --  s p a c e s
5443:366 | DONE wsp | em 16 16 |        |             |
5443:367 | DONE lbl | em 16 16 | 006307 |             | nt_space                             
5443:368 | DONE dir | em 16 16 | 006307 | (2 bytes)   |         .byte 5, { NC }              
5443:368 | DONE dir | em 16 16 |        |             |                 05 01                    --  . .
5443:369 | DONE dir | em 16 16 | 006309 | (6 bytes)   |         .word nt_spaces, xt_space, 005e24 
5443:369 | DONE dir | em 16 16 |        |             |                 f9 62 1e 5e 24 5e        --  . b . ^ $ ^
5443:370 | DONE dir | em 16 16 | 00630f | (5 bytes)   |         .byte 73, 70, 61, 63, 65     
5443:370 | DONE dir | em 16 16 |        |             |                 73 70 61 63 65           --  s p a c e
5443:371 | DONE wsp | em 16 16 |        |             |
5443:372 | DONE lbl | em 16 16 | 006314 |             | nt_dots                              
5443:373 | DONE dir | em 16 16 | 006314 | (2 bytes)   |         .byte 2, { NC }              
5443:373 | DONE dir | em 16 16 |        |             |                 02 01                    --  . .
5443:374 | DONE dir | em 16 16 | 006316 | (6 bytes)   |         .word nt_space, xt_dots, 005244 
5443:374 | DONE dir | em 16 16 |        |             |                 07 63 0d 52 44 52        --  . c  R D R
5443:375 | DONE dir | em 16 16 | 00631c | (2 bytes)   |         .byte 2e, 73                 
5443:375 | DONE dir | em 16 16 |        |             |                 2e 73                    --  . s
5443:376 | DONE wsp | em 16 16 |        |             |
5443:377 | DONE lbl | em 16 16 | 00631e |             | nt_type                              
5443:378 | DONE dir | em 16 16 | 00631e | (2 bytes)   |         .byte 4, { NC }              
5443:378 | DONE dir | em 16 16 |        |             |                 04 01                    --  . .
5443:379 | DONE dir | em 16 16 | 006320 | (6 bytes)   |         .word nt_dots, xt_type, 005e82 
5443:379 | DONE dir | em 16 16 |        |             |                 14 63 62 5e 82 5e        --  . c b ^ . ^
5443:380 | DONE dir | em 16 16 | 006326 | (4 bytes)   |         .byte 74, 79, 70, 65         
5443:380 | DONE dir | em 16 16 |        |             |                 74 79 70 65              --  t y p e
5443:381 | DONE wsp | em 16 16 |        |             |
5443:382 | DONE lbl | em 16 16 | 00632a |             | nt_udot                              
5443:383 | DONE dir | em 16 16 | 00632a | (2 bytes)   |         .byte 2, { NC }              
5443:383 | DONE dir | em 16 16 |        |             |                 02 01                    --  . .
5443:384 | DONE dir | em 16 16 | 00632c | (6 bytes)   |         .word nt_type, xt_udot, 005e8c 
5443:384 | DONE dir | em 16 16 |        |             |                 1e 63 83 5e 8c 5e        --  . c . ^ . ^
5443:385 | DONE dir | em 16 16 | 006332 | (2 bytes)   |         .byte 75, 2e                 
5443:385 | DONE dir | em 16 16 |        |             |                 75 2e                    --  u .
5443:386 | DONE wsp | em 16 16 |        |             |
5443:387 | DONE lbl | em 16 16 | 006334 |             | nt_emit                              
5443:388 | DONE dir | em 16 16 | 006334 | (2 bytes)   |         .byte 4, { NC }              
5443:388 | DONE dir | em 16 16 |        |             |                 04 01                    --  . .
5443:389 | DONE dir | em 16 16 | 006336 | (6 bytes)   |         .word nt_udot, xt_emit, 00589c 
5443:389 | DONE dir | em 16 16 |        |             |                 2a 63 94 58 9c 58        --  * c . X . X
5443:390 | DONE dir | em 16 16 | 00633c | (4 bytes)   |         .byte 65, 6d, 69, 74         
5443:390 | DONE dir | em 16 16 |        |             |                 65 6d 69 74              --  e m i t
5443:391 | DONE wsp | em 16 16 |        |             |
5443:392 | DONE lbl | em 16 16 | 006340 |             | nt_dot                               
5443:393 | DONE dir | em 16 16 | 006340 | (2 bytes)   |         .byte 1, { NC }              
5443:393 | DONE dir | em 16 16 |        |             |                 01 01                    --  . .
5443:394 | DONE dir | em 16 16 | 006342 | (6 bytes)   |         .word nt_emit, xt_dot, 0051f8 
5443:394 | DONE dir | em 16 16 |        |             |                 34 63 da 51 f8 51        --  4 c . Q . Q
5443:395 | DONE dir | em 16 16 | 006348 | (1 bytes)   |         .byte 2e                     
5443:395 | DONE dir | em 16 16 |        |             |                 2e                       --  .
5443:396 | DONE wsp | em 16 16 |        |             |
5443:397 | DONE lbl | em 16 16 | 006349 |             | nt_pad                               
5443:398 | DONE dir | em 16 16 | 006349 | (2 bytes)   |         .byte 3, { NC }              
5443:398 | DONE dir | em 16 16 |        |             |                 03 01                    --  . .
5443:399 | DONE dir | em 16 16 | 00634b | (6 bytes)   |         .word nt_dot, xt_pad, 005be1 
5443:399 | DONE dir | em 16 16 |        |             |                 40 63 d6 5b e1 5b        --  @ c . [ . [
5443:400 | DONE dir | em 16 16 | 006351 | (3 bytes)   |         .byte 70, 61, 64             
5443:400 | DONE dir | em 16 16 |        |             |                 70 61 64                 --  p a d
5443:401 | DONE wsp | em 16 16 |        |             |
5443:402 | DONE lbl | em 16 16 | 006354 |             | nt_base                              
5443:403 | DONE dir | em 16 16 | 006354 | (2 bytes)   |         .byte 4, { NC }              
5443:403 | DONE dir | em 16 16 |        |             |                 04 01                    --  . .
5443:404 | DONE dir | em 16 16 | 006356 | (6 bytes)   |         .word nt_pad, xt_base, 00558f 
5443:404 | DONE dir | em 16 16 |        |             |                 49 63 88 55 8f 55        --  I c . U . U
5443:405 | DONE dir | em 16 16 | 00635c | (4 bytes)   |         .byte 62, 61, 73, 65         
5443:405 | DONE dir | em 16 16 |        |             |                 62 61 73 65              --  b a s e
5443:406 | DONE wsp | em 16 16 |        |             |
5443:407 | DONE lbl | em 16 16 | 006360 |             | nt_nc-limit                          
5443:408 | DONE dir | em 16 16 | 006360 | (2 bytes)   |         .byte 8, { NC }              
5443:408 | DONE dir | em 16 16 |        |             |                 08 01                    --  . .
5443:409 | DONE dir | em 16 16 | 006362 | (6 bytes)   |         .word nt_base, xt_nc-limit, 005b31 
5443:409 | DONE dir | em 16 16 |        |             |                 54 63 2a 5b 31 5b        --  T c * [ 1 [
5443:410 | DONE dir | em 16 16 | 006368 | (8 bytes)   |         .byte 6e, 63, 2d, 6c, 69, 6d, 69, 74 
5443:410 | DONE dir | em 16 16 |        |             |                 6e 63 2d 6c 69 6d 69 74  --  n c - l i m i t
5443:410 | DONE dir | em 16 16 |        |             |                                          -- 
5443:411 | DONE wsp | em 16 16 |        |             |
5443:412 | DONE lbl | em 16 16 | 006370 |             | nt_input                             
5443:413 | DONE dir | em 16 16 | 006370 | (2 bytes)   |         .byte 5, { NC }              
5443:413 | DONE dir | em 16 16 |        |             |                 05 01                    --  . .
5443:414 | DONE dir | em 16 16 | 006372 | (6 bytes)   |         .word nt_nc-limit, xt_input, 0059f5 
5443:414 | DONE dir | em 16 16 |        |             |                 60 63 ee 59 f5 59        --  ` c . Y . Y
5443:415 | DONE dir | em 16 16 | 006378 | (5 bytes)   |         .byte 69, 6e, 70, 75, 74     
5443:415 | DONE dir | em 16 16 |        |             |                 69 6e 70 75 74           --  i n p u t
5443:416 | DONE wsp | em 16 16 |        |             |
5443:417 | DONE lbl | em 16 16 | 00637d |             | nt_output                            
5443:418 | DONE dir | em 16 16 | 00637d | (2 bytes)   |         .byte 6, { NC }              
5443:418 | DONE dir | em 16 16 |        |             |                 06 01                    --  . .
5443:419 | DONE dir | em 16 16 | 00637f | (6 bytes)   |         .word nt_input, xt_output, 005bce 
5443:419 | DONE dir | em 16 16 |        |             |                 70 63 c7 5b ce 5b        --  p c . [ . [
5443:420 | DONE dir | em 16 16 | 006385 | (6 bytes)   |         .byte 6f, 75, 74, 70, 75, 74 
5443:420 | DONE dir | em 16 16 |        |             |                 6f 75 74 70 75 74        --  o u t p u t
5443:421 | DONE wsp | em 16 16 |        |             |
5443:422 | DONE lbl | em 16 16 | 00638b |             | nt_evaluate                          
5443:423 | DONE dir | em 16 16 | 00638b | (2 bytes)   |         .byte 8, { NC }              
5443:423 | DONE dir | em 16 16 |        |             |                 08 01                    --  . .
5443:424 | DONE dir | em 16 16 | 00638d | (6 bytes)   |         .word nt_output, xt_evaluate, 0058ec 
5443:424 | DONE dir | em 16 16 |        |             |                 7d 63 be 58 ec 58        --  } c . X . X
5443:425 | DONE dir | em 16 16 | 006393 | (8 bytes)   |         .byte 65, 76, 61, 6c, 75, 61, 74, 65 
5443:425 | DONE dir | em 16 16 |        |             |                 65 76 61 6c 75 61 74 65  --  e v a l u a t e
5443:425 | DONE dir | em 16 16 |        |             |                                          -- 
5443:426 | DONE wsp | em 16 16 |        |             |
5443:427 | DONE lbl | em 16 16 | 00639b |             | nt_cells                             
5443:428 | DONE dir | em 16 16 | 00639b | (2 bytes)   |         .byte 5, { NC }              2* because we have 16 bit stack
5443:428 | DONE dir | em 16 16 |        |             |                 05 01                    --  . .
5443:429 | DONE dir | em 16 16 | 00639d | (6 bytes)   |         .word nt_evaluate, xt_two-star, 0053d4 
5443:429 | DONE dir | em 16 16 |        |             |                 8b 63 d1 53 d4 53        --  . c . S . S
5443:430 | DONE dir | em 16 16 | 0063a3 | (5 bytes)   |         .byte 63, 65, 6c, 6c, 73     
5443:430 | DONE dir | em 16 16 |        |             |                 63 65 6c 6c 73           --  c e l l s
5443:431 | DONE wsp | em 16 16 |        |             |
5443:432 | DONE lbl | em 16 16 | 0063a8 |             | nt_dotquote                          
5443:433 | DONE dir | em 16 16 | 0063a8 | (2 bytes)   |         .byte 2, { CO + NC + IM }    
5443:433 | DONE dir | em 16 16 |        |             |                 02 07                    --  . .
5443:434 | DONE dir | em 16 16 | 0063aa | (6 bytes)   |         .word nt_cells, xt_dotquote, 00520d 
5443:434 | DONE dir | em 16 16 |        |             |                 9b 63 f9 51 0d 52        --  . c . Q  R
5443:435 | DONE dir | em 16 16 | 0063b0 | (2 bytes)   |         .byte 2e, &34                
5443:435 | DONE dir | em 16 16 |        |             |                 2e 22                    --  . "
5443:436 | DONE wsp | em 16 16 |        |             |
5443:437 | DONE lbl | em 16 16 | 0063b2 |             | nt_squote                            
5443:438 | DONE dir | em 16 16 | 0063b2 | (2 bytes)   |         .byte 2, { IM + NC }         not CO, see source code
5443:438 | DONE dir | em 16 16 |        |             |                 02 03                    --  . .
5443:439 | DONE dir | em 16 16 | 0063b4 | (6 bytes)   |         .word nt_dotquote, xt_squote, 005d30 
5443:439 | DONE dir | em 16 16 |        |             |                 a8 63 fb 5c 30 5d        --  . c . \ 0 ]
5443:440 | DONE dir | em 16 16 | 0063ba | (2 bytes)   |         .byte 73, &34                
5443:440 | DONE dir | em 16 16 |        |             |                 73 22                    --  s "
5443:441 | DONE wsp | em 16 16 |        |             |
5443:442 | DONE lbl | em 16 16 | 0063bc |             | nt_sliteral                          
5443:443 | DONE dir | em 16 16 | 0063bc | (2 bytes)   |         .byte 8, { IM + CO }         
5443:443 | DONE dir | em 16 16 |        |             |                 08 06                    --  . .
5443:444 | DONE dir | em 16 16 | 0063be | (6 bytes)   |         .word nt_squote, xt_sliteral, 005d99 
5443:444 | DONE dir | em 16 16 |        |             |                 b2 63 4f 5d 99 5d        --  . c O ] . ]
5443:445 | DONE dir | em 16 16 | 0063c4 | (8 bytes)   |         .byte 73, 6c, 69, 74, 65, 72, 61, 6c 
5443:445 | DONE dir | em 16 16 |        |             |                 73 6c 69 74 65 72 61 6c  --  s l i t e r a l
5443:445 | DONE dir | em 16 16 |        |             |                                          -- 
5443:446 | DONE wsp | em 16 16 |        |             |
5443:447 | DONE lbl | em 16 16 | 0063cc |             | nt_brackettick                       
5443:448 | DONE dir | em 16 16 | 0063cc | (2 bytes)   |         .byte 3, { IM + CO }         
5443:448 | DONE dir | em 16 16 |        |             |                 03 06                    --  . .
5443:449 | DONE dir | em 16 16 | 0063ce | (6 bytes)   |         .word nt_sliteral, xt_brackettick, 005314 
5443:449 | DONE dir | em 16 16 |        |             |                 bc 63 0e 53 14 53        --  . c . S . S
5443:450 | DONE dir | em 16 16 | 0063d4 | (3 bytes)   |         .byte 5b, 27, 5d             
5443:450 | DONE dir | em 16 16 |        |             |                 5b 27 5d                 --  [ ' ]
5443:451 | DONE wsp | em 16 16 |        |             |
5443:452 | DONE lbl | em 16 16 | 0063d7 |             | nt_bracketchar                       
5443:453 | DONE dir | em 16 16 | 0063d7 | (2 bytes)   |         .byte 6, { IM + CO }         
5443:453 | DONE dir | em 16 16 |        |             |                 06 06                    --  . .
5443:454 | DONE dir | em 16 16 | 0063d9 | (6 bytes)   |         .word nt_brackettick, xt_bracketchar, 005323 
5443:454 | DONE dir | em 16 16 |        |             |                 cc 63 1d 53 23 53        --  . c . S # S
5443:455 | DONE dir | em 16 16 | 0063df | (6 bytes)   |         .byte 5b, 63, 68, 61, 72, 5d 
5443:455 | DONE dir | em 16 16 |        |             |                 5b 63 68 61 72 5d        --  [ c h a r ]
5443:456 | DONE wsp | em 16 16 |        |             |
5443:457 | DONE lbl | em 16 16 | 0063e5 |             | nt_literal                           
5443:458 | DONE dir | em 16 16 | 0063e5 | (2 bytes)   |         .byte 7, { IM + CO }         
5443:458 | DONE dir | em 16 16 |        |             |                 07 06                    --  . .
5443:459 | DONE dir | em 16 16 | 0063e7 | (6 bytes)   |         .word nt_bracketchar, xt_literal, 005a64 
5443:459 | DONE dir | em 16 16 |        |             |                 d7 63 53 5a 64 5a        --  . c S Z d Z
5443:460 | DONE dir | em 16 16 | 0063ed | (7 bytes)   |         .byte 6c, 69, 74, 65, 72, 61, 6c 
5443:460 | DONE dir | em 16 16 |        |             |                 6c 69 74 65 72 61 6c     --  l i t e r a l
5443:461 | DONE wsp | em 16 16 |        |             |
5443:462 | DONE lbl | em 16 16 | 0063f4 |             | nt_native-compile                    
5443:463 | DONE dir | em 16 16 | 0063f4 | (2 bytes)   |         .byte 0e, { NC }             
5443:463 | DONE dir | em 16 16 |        |             |                 0e 01                    --  . .
5443:464 | DONE dir | em 16 16 | 0063f6 | (6 bytes)   |         .word nt_literal, xt_native-compile, 005b29 
5443:464 | DONE dir | em 16 16 |        |             |                 e5 63 21 5b 29 5b        --  . c ! [ ) [
5443:465 | DONE dir | em 16 16 | 0063fc | (14 bytes)  |         .byte 6e, 61, 74, 69, 76, 65, 2d, 63, 6f, 6d, 70, 69, 6c, 65 
5443:465 | DONE dir | em 16 16 |        |             |                 6e 61 74 69 76 65 2d 63  --  n a t i v e - c
5443:465 | DONE dir | em 16 16 |        |             |                 6f 6d 70 69 6c 65        --  o m p i l e
5443:466 | DONE wsp | em 16 16 |        |             |
5443:467 | DONE lbl | em 16 16 | 00640a |             | nt_compile-only                      
5443:468 | DONE dir | em 16 16 | 00640a | (2 bytes)   |         .byte 0c, { NC }             
5443:468 | DONE dir | em 16 16 |        |             |                 0c 01                    --   .
5443:469 | DONE dir | em 16 16 | 00640c | (6 bytes)   |         .word nt_native-compile, xt_compile-only, 005655 
5443:469 | DONE dir | em 16 16 |        |             |                 f4 63 4d 56 55 56        --  . c M V U V
5443:470 | DONE dir | em 16 16 | 006412 | (12 bytes)  |         .byte 63, 6f, 6d, 70, 69, 6c, 65, 2d, 6f, 6e, 6c, 79 
5443:470 | DONE dir | em 16 16 |        |             |                 63 6f 6d 70 69 6c 65 2d  --  c o m p i l e -
5443:470 | DONE dir | em 16 16 |        |             |                 6f 6e 6c 79              --  o n l y
5443:471 | DONE wsp | em 16 16 |        |             |
5443:472 | DONE lbl | em 16 16 | 00641e |             | nt_immediate                         
5443:473 | DONE dir | em 16 16 | 00641e | (2 bytes)   |         .byte 9, { NC }              
5443:473 | DONE dir | em 16 16 |        |             |                 09 01                    --  	 .
5443:474 | DONE dir | em 16 16 | 006420 | (6 bytes)   |         .word nt_compile-only, xt_immediate, 0059ed 
5443:474 | DONE dir | em 16 16 |        |             |                 0a 64 e5 59 ed 59        --  
 d . Y . Y
5443:475 | DONE dir | em 16 16 | 006426 | (9 bytes)   |         .byte 69, 6d, 6d, 65, 64, 69, 61, 74, 65 
5443:475 | DONE dir | em 16 16 |        |             |                 69 6d 6d 65 64 69 61 74  --  i m m e d i a t
5443:475 | DONE dir | em 16 16 |        |             |                 65                       --  e
5443:476 | DONE wsp | em 16 16 |        |             |
5443:477 | DONE lbl | em 16 16 | 00642f |             | nt_postpone                          
5443:478 | DONE dir | em 16 16 | 00642f | (2 bytes)   |         .byte 8, { IM + CO }         
5443:478 | DONE dir | em 16 16 |        |             |                 08 06                    --  . .
5443:479 | DONE dir | em 16 16 | 006431 | (6 bytes)   |         .word nt_immediate, xt_postpone, 005ca4 
5443:479 | DONE dir | em 16 16 |        |             |                 1e 64 72 5c a4 5c        --  . d r \ . \
5443:480 | DONE dir | em 16 16 | 006437 | (8 bytes)   |         .byte 70, 6f, 73, 74, 70, 6f, 6e, 65 
5443:480 | DONE dir | em 16 16 |        |             |                 70 6f 73 74 70 6f 6e 65  --  p o s t p o n e
5443:480 | DONE dir | em 16 16 |        |             |                                          -- 
5443:481 | DONE wsp | em 16 16 |        |             |
5443:482 | DONE lbl | em 16 16 | 00643f |             | nt_rightbracket                      
5443:483 | DONE dir | em 16 16 | 00643f | (2 bytes)   |         .byte 1, { NC }              
5443:483 | DONE dir | em 16 16 |        |             |                 01 01                    --  . .
5443:484 | DONE dir | em 16 16 | 006441 | (6 bytes)   |         .word nt_postpone, xt_rightbracket, 00531c 
5443:484 | DONE dir | em 16 16 |        |             |                 2f 64 17 53 1c 53        --  / d . S . S
5443:485 | DONE dir | em 16 16 | 006447 | (1 bytes)   |         .byte 5d                     
5443:485 | DONE dir | em 16 16 |        |             |                 5d                       --  ]
5443:486 | DONE wsp | em 16 16 |        |             |
5443:487 | DONE lbl | em 16 16 | 006448 |             | nt_leftbracket                       
5443:488 | DONE dir | em 16 16 | 006448 | (2 bytes)   |         .byte 1, { IM + CO }         
5443:488 | DONE dir | em 16 16 |        |             |                 01 06                    --  . .
5443:489 | DONE dir | em 16 16 | 00644a | (6 bytes)   |         .word nt_rightbracket, xt_leftbracket, 005316 
5443:489 | DONE dir | em 16 16 |        |             |                 3f 64 14 53 16 53        --  ? d . S . S
5443:490 | DONE dir | em 16 16 | 006450 | (1 bytes)   |         .byte 5b                     
5443:490 | DONE dir | em 16 16 |        |             |                 5b                       --  [
5443:491 | DONE wsp | em 16 16 |        |             |
5443:492 | DONE lbl | em 16 16 | 006451 |             | nt_latestnt                          
5443:493 | DONE dir | em 16 16 | 006451 | (2 bytes)   |         .byte 8, { NC }              
5443:493 | DONE dir | em 16 16 |        |             |                 08 01                    --  . .
5443:494 | DONE dir | em 16 16 | 006453 | (6 bytes)   |         .word nt_leftbracket, xt_latestnt, 005a42 
5443:494 | DONE dir | em 16 16 |        |             |                 48 64 3b 5a 42 5a        --  H d ; Z B Z
5443:495 | DONE dir | em 16 16 | 006459 | (8 bytes)   |         .byte 6c, 61, 74, 65, 73, 74, 6e, 74 
5443:495 | DONE dir | em 16 16 |        |             |                 6c 61 74 65 73 74 6e 74  --  l a t e s t n t
5443:495 | DONE dir | em 16 16 |        |             |                                          -- 
5443:496 | DONE wsp | em 16 16 |        |             |
5443:497 | DONE lbl | em 16 16 | 006461 |             | nt_latestxt                          
5443:498 | DONE dir | em 16 16 | 006461 | (2 bytes)   |         .byte 8, { NC }              
5443:498 | DONE dir | em 16 16 |        |             |                 08 01                    --  . .
5443:499 | DONE dir | em 16 16 | 006463 | (6 bytes)   |         .word nt_latestnt, xt_latestxt, 005a52 
5443:499 | DONE dir | em 16 16 |        |             |                 51 64 43 5a 52 5a        --  Q d C Z R Z
5443:500 | DONE dir | em 16 16 | 006469 | (8 bytes)   |         .byte 6c, 61, 74, 65, 73, 74, 78, 74 
5443:500 | DONE dir | em 16 16 |        |             |                 6c 61 74 65 73 74 78 74  --  l a t e s t x t
5443:500 | DONE dir | em 16 16 |        |             |                                          -- 
5443:501 | DONE wsp | em 16 16 |        |             |
5443:502 | DONE lbl | em 16 16 | 006471 |             | nt_dtrailing                         
5443:503 | DONE dir | em 16 16 | 006471 | (2 bytes)   |         .byte 9, { NC }              
5443:503 | DONE dir | em 16 16 |        |             |                 09 01                    --  	 .
5443:504 | DONE dir | em 16 16 | 006473 | (6 bytes)   |         .word nt_latestxt, xt_dtrailing, 00535b 
5443:504 | DONE dir | em 16 16 |        |             |                 61 64 45 53 5b 53        --  a d E S [ S
5443:505 | DONE dir | em 16 16 | 006479 | (9 bytes)   |         .byte 2d, 74, 72, 61, 69, 6c, 69, 6e, 67 
5443:505 | DONE dir | em 16 16 |        |             |                 2d 74 72 61 69 6c 69 6e  --  - t r a i l i n
5443:505 | DONE dir | em 16 16 |        |             |                 67                       --  g
5443:506 | DONE wsp | em 16 16 |        |             |
5443:507 | DONE lbl | em 16 16 | 006482 |             | nt_slashstring                       
5443:508 | DONE dir | em 16 16 | 006482 | (2 bytes)   |         .byte 7, { NC }              
5443:508 | DONE dir | em 16 16 |        |             |                 07 01                    --  . .
5443:509 | DONE dir | em 16 16 | 006484 | (6 bytes)   |         .word nt_dtrailing, xt_slashstring, 0051d9 
5443:509 | DONE dir | em 16 16 |        |             |                 71 64 c8 51 d9 51        --  q d . Q . Q
5443:510 | DONE dir | em 16 16 | 00648a | (7 bytes)   |         .byte 2f, 73, 74, 72, 69, 6e, 67 
5443:510 | DONE dir | em 16 16 |        |             |                 2f 73 74 72 69 6e 67     --  / s t r i n g
5443:511 | DONE wsp | em 16 16 |        |             |
5443:512 | DONE lbl | em 16 16 | 006491 |             | nt_zbranch                           
5443:513 | DONE dir | em 16 16 | 006491 | (2 bytes)   |         .byte 7, { IM + CO }         
5443:513 | DONE dir | em 16 16 |        |             |                 07 06                    --  . .
5443:514 | DONE dir | em 16 16 | 006493 | (6 bytes)   |         .word nt_slashstring, xt_zbranch, 0053a5 
5443:514 | DONE dir | em 16 16 |        |             |                 82 64 9f 53 a5 53        --  . d . S . S
5443:515 | DONE dir | em 16 16 | 006499 | (7 bytes)   |         .byte 30, 62, 72, 61, 6e, 63, 68 
5443:515 | DONE dir | em 16 16 |        |             |                 30 62 72 61 6e 63 68     --  0 b r a n c h
5443:516 | DONE wsp | em 16 16 |        |             |
5443:517 | DONE lbl | em 16 16 | 0064a0 |             | nt_branch                            
5443:518 | DONE dir | em 16 16 | 0064a0 | (2 bytes)   |         .byte 6, { IM + CO }         
5443:518 | DONE dir | em 16 16 |        |             |                 06 06                    --  . .
5443:519 | DONE dir | em 16 16 | 0064a2 | (6 bytes)   |         .word nt_zbranch, xt_branch, 0055b5 
5443:519 | DONE dir | em 16 16 |        |             |                 91 64 af 55 b5 55        --  . d . U . U
5443:520 | DONE dir | em 16 16 | 0064a8 | (6 bytes)   |         .byte 62, 72, 61, 6e, 63, 68 
5443:520 | DONE dir | em 16 16 |        |             |                 62 72 61 6e 63 68        --  b r a n c h
5443:521 | DONE wsp | em 16 16 |        |             |
5443:522 | DONE lbl | em 16 16 | 0064ae |             | nt_again                             
5443:523 | DONE dir | em 16 16 | 0064ae | (2 bytes)   |         .byte 5, { IM + NC + CO }    
5443:523 | DONE dir | em 16 16 |        |             |                 05 07                    --  . .
5443:524 | DONE dir | em 16 16 | 0064b0 | (6 bytes)   |         .word nt_branch, xt_again, 00552b 
5443:524 | DONE dir | em 16 16 |        |             |                 a0 64 16 55 2b 55        --  . d . U + U
5443:525 | DONE dir | em 16 16 | 0064b6 | (5 bytes)   |         .byte 61, 67, 61, 69, 6e     
5443:525 | DONE dir | em 16 16 |        |             |                 61 67 61 69 6e           --  a g a i n
5443:526 | DONE wsp | em 16 16 |        |             |
5443:527 | DONE lbl | em 16 16 | 0064bb |             | nt_begin                             
5443:528 | DONE dir | em 16 16 | 0064bb | (2 bytes)   |         .byte 5, { IM + NC + CO }    
5443:528 | DONE dir | em 16 16 |        |             |                 05 07                    --  . .
5443:529 | DONE dir | em 16 16 | 0064bd | (6 bytes)   |         .word nt_again, xt_begin, 00559c 
5443:529 | DONE dir | em 16 16 |        |             |                 ae 64 96 55 9c 55        --  . d . U . U
5443:530 | DONE dir | em 16 16 | 0064c3 | (5 bytes)   |         .byte 62, 65, 67, 69, 6e     
5443:530 | DONE dir | em 16 16 |        |             |                 62 65 67 69 6e           --  b e g i n
5443:531 | DONE wsp | em 16 16 |        |             |
5443:532 | DONE lbl | em 16 16 | 0064c8 |             | nt_compilecomma                      
5443:533 | DONE dir | em 16 16 | 0064c8 | (2 bytes)   |         .byte 08, { CO }             
5443:533 | DONE dir | em 16 16 |        |             |                 08 04                    --  . .
5443:534 | DONE dir | em 16 16 | 0064ca | (6 bytes)   |         .word nt_begin, xt_compilecomma, 0056e3 
5443:534 | DONE dir | em 16 16 |        |             |                 bb 64 56 56 e3 56        --  . d V V . V
5443:535 | DONE dir | em 16 16 | 0064d0 | (8 bytes)   |         .byte 63, 6f, 6d, 70, 69, 6c, 65, 2c 
5443:535 | DONE dir | em 16 16 |        |             |                 63 6f 6d 70 69 6c 65 2c  --  c o m p i l e ,
5443:535 | DONE dir | em 16 16 |        |             |                                          -- 
5443:536 | DONE wsp | em 16 16 |        |             |
5443:537 | DONE lbl | em 16 16 | 0064d8 |             | nt_semicolon                         
5443:538 | DONE dir | em 16 16 | 0064d8 | (2 bytes)   |         .byte 1, { CO + IM }         
5443:538 | DONE dir | em 16 16 |        |             |                 01 06                    --  . .
5443:539 | DONE dir | em 16 16 | 0064da | (6 bytes)   |         .word nt_compilecomma, xt_semicolon, 00528b 
5443:539 | DONE dir | em 16 16 |        |             |                 c8 64 73 52 8b 52        --  . d s R . R
5443:540 | DONE dir | em 16 16 | 0064e0 | (1 bytes)   |         .byte 3b                     
5443:540 | DONE dir | em 16 16 |        |             |                 3b                       --  ;
5443:541 | DONE wsp | em 16 16 |        |             |
5443:542 | DONE lbl | em 16 16 | 0064e1 |             | nt_colon                             
5443:543 | DONE dir | em 16 16 | 0064e1 | (2 bytes)   |         .byte 1, { NC }              
5443:543 | DONE dir | em 16 16 |        |             |                 01 01                    --  . .
5443:544 | DONE dir | em 16 16 | 0064e3 | (6 bytes)   |         .word nt_semicolon, xt_colon, 005272 
5443:544 | DONE dir | em 16 16 |        |             |                 d8 64 51 52 72 52        --  . d Q R r R
5443:545 | DONE dir | em 16 16 | 0064e9 | (1 bytes)   |         .byte 3a                     
5443:545 | DONE dir | em 16 16 |        |             |                 3a                       --  :
5443:546 | DONE wsp | em 16 16 |        |             |
5443:547 | DONE lbl | em 16 16 | 0064ea |             | nt_allot                             
5443:548 | DONE dir | em 16 16 | 0064ea | (2 bytes)   |         .byte 5, { NC }              
5443:548 | DONE dir | em 16 16 |        |             |                 05 01                    --  . .
5443:549 | DONE dir | em 16 16 | 0064ec | (6 bytes)   |         .word nt_colon, xt_allot, 005558 
5443:549 | DONE dir | em 16 16 |        |             |                 e1 64 30 55 58 55        --  . d 0 U X U
5443:550 | DONE dir | em 16 16 | 0064f2 | (5 bytes)   |         .byte 61, 6c, 6c, 6f, 74     
5443:550 | DONE dir | em 16 16 |        |             |                 61 6c 6c 6f 74           --  a l l o t
5443:551 | DONE wsp | em 16 16 |        |             |
5443:552 | DONE lbl | em 16 16 | 0064f7 |             | nt_defer                             
5443:553 | DONE dir | em 16 16 | 0064f7 | (2 bytes)   |         .byte 5, { NC }              
5443:553 | DONE dir | em 16 16 |        |             |                 05 01                    --  . .
5443:554 | DONE dir | em 16 16 | 0064f9 | (6 bytes)   |         .word nt_allot, xt_defer, 0057b1 
5443:554 | DONE dir | em 16 16 |        |             |                 ea 64 97 57 b1 57        --  . d . W . W
5443:555 | DONE dir | em 16 16 | 0064ff | (5 bytes)   |         .byte 64, 65, 66, 65, 72     
5443:555 | DONE dir | em 16 16 |        |             |                 64 65 66 65 72           --  d e f e r
5443:556 | DONE wsp | em 16 16 |        |             |
5443:557 | DONE lbl | em 16 16 | 006504 |             | nt_tobody                            
5443:558 | DONE dir | em 16 16 | 006504 | (2 bytes)   |         .byte 5, { NC }              
5443:558 | DONE dir | em 16 16 |        |             |                 05 01                    --  . .
5443:559 | DONE dir | em 16 16 | 006506 | (6 bytes)   |         .word nt_defer, xt_tobody, 00515a 
5443:559 | DONE dir | em 16 16 |        |             |                 f7 64 37 51 5a 51        --  . d 7 Q Z Q
5443:560 | DONE dir | em 16 16 | 00650c | (5 bytes)   |         .byte 3e, 62, 6f, 64, 79     
5443:560 | DONE dir | em 16 16 |        |             |                 3e 62 6f 64 79           --  > b o d y
5443:561 | DONE wsp | em 16 16 |        |             |
5443:562 | DONE lbl | em 16 16 | 006511 |             | nt_does                              
5443:563 | DONE dir | em 16 16 | 006511 | (2 bytes)   |         .byte 5, { IM + CO }         
5443:563 | DONE dir | em 16 16 |        |             |                 05 06                    --  . .
5443:564 | DONE dir | em 16 16 | 006513 | (6 bytes)   |         .word nt_tobody, xt_does, 005855 
5443:564 | DONE dir | em 16 16 |        |             |                 04 65 49 58 55 58        --  . e I X U X
5443:565 | DONE dir | em 16 16 | 006519 | (5 bytes)   |         .byte 64, 6f, 65, 73, 3e     
5443:565 | DONE dir | em 16 16 |        |             |                 64 6f 65 73 3e           --  d o e s >
5443:566 | DONE wsp | em 16 16 |        |             |
5443:567 | DONE lbl | em 16 16 | 00651e |             | nt_create                            
5443:568 | DONE dir | em 16 16 | 00651e | (2 bytes)   |         .byte 6, { NC }              
5443:568 | DONE dir | em 16 16 |        |             |                 06 01                    --  . .
5443:569 | DONE dir | em 16 16 | 006520 | (6 bytes)   |         .word nt_does, xt_create, 005796 
5443:569 | DONE dir | em 16 16 |        |             |                 11 65 27 57 96 57        --  . e ' W . W
5443:570 | DONE dir | em 16 16 | 006526 | (6 bytes)   |         .byte 63, 72, 65, 61, 74, 65 
5443:570 | DONE dir | em 16 16 |        |             |                 63 72 65 61 74 65        --  c r e a t e
5443:571 | DONE wsp | em 16 16 |        |             |
5443:572 | DONE lbl | em 16 16 | 00652c |             | nt_name-string                       
5443:573 | DONE dir | em 16 16 | 00652c | (2 bytes)   |         .byte 0b, { NC }             
5443:573 | DONE dir | em 16 16 |        |             |                 0b 01                    --   .
5443:574 | DONE dir | em 16 16 | 00652e | (6 bytes)   |         .word nt_create, xt_name-string, 005b20 
5443:574 | DONE dir | em 16 16 |        |             |                 1e 65 10 5b 20 5b        --  . e . [   [
5443:575 | DONE dir | em 16 16 | 006534 | (11 bytes)  |         .byte 6e, 61, 6d, 65, 3e, 73, 74, 72, 69, 6e, 67 
5443:575 | DONE dir | em 16 16 |        |             |                 6e 61 6d 65 3e 73 74 72  --  n a m e > s t r
5443:575 | DONE dir | em 16 16 |        |             |                 69 6e 67                 --  i n g
5443:576 | DONE wsp | em 16 16 |        |             |
5443:577 | DONE lbl | em 16 16 | 00653f |             | nt_2dup                              
5443:578 | DONE dir | em 16 16 | 00653f | (2 bytes)   |         .byte 4, { NC }              
5443:578 | DONE dir | em 16 16 |        |             |                 04 01                    --  . .
5443:579 | DONE dir | em 16 16 | 006541 | (6 bytes)   |         .word nt_name-string, xt_2dup, 0053f7 
5443:579 | DONE dir | em 16 16 |        |             |                 2c 65 ed 53 f7 53        --  , e . S . S
5443:580 | DONE dir | em 16 16 | 006547 | (4 bytes)   |         .byte 32, 64, 75, 70         
5443:580 | DONE dir | em 16 16 |        |             |                 32 64 75 70              --  2 d u p
5443:581 | DONE wsp | em 16 16 |        |             |
5443:582 | DONE lbl | em 16 16 | 00654b |             | nt_abs                               
5443:583 | DONE dir | em 16 16 | 00654b | (2 bytes)   |         .byte 3, { NC }              
5443:583 | DONE dir | em 16 16 |        |             |                 03 01                    --  . .
5443:584 | DONE dir | em 16 16 | 00654d | (6 bytes)   |         .word nt_2dup, xt_abs, 005489 
5443:584 | DONE dir | em 16 16 |        |             |                 3f 65 81 54 89 54        --  ? e . T . T
5443:585 | DONE dir | em 16 16 | 006553 | (3 bytes)   |         .byte 61, 62, 73             
5443:585 | DONE dir | em 16 16 |        |             |                 61 62 73                 --  a b s
5443:586 | DONE wsp | em 16 16 |        |             |
5443:587 | DONE lbl | em 16 16 | 006556 |             | nt_state                             
5443:588 | DONE dir | em 16 16 | 006556 | (2 bytes)   |         .byte 5, { NC }              
5443:588 | DONE dir | em 16 16 |        |             |                 05 01                    --  . .
5443:589 | DONE dir | em 16 16 | 006558 | (6 bytes)   |         .word nt_abs, xt_state, 005e40 
5443:589 | DONE dir | em 16 16 |        |             |                 4b 65 39 5e 40 5e        --  K e 9 ^ @ ^
5443:590 | DONE dir | em 16 16 | 00655e | (5 bytes)   |         .byte 73, 74, 61, 74, 65     
5443:590 | DONE dir | em 16 16 |        |             |                 73 74 61 74 65           --  s t a t e
5443:591 | DONE wsp | em 16 16 |        |             |
5443:592 | DONE lbl | em 16 16 | 006563 |             | nt_to-in                             
5443:593 | DONE dir | em 16 16 | 006563 | (2 bytes)   |         .byte 3, { NC }              
5443:593 | DONE dir | em 16 16 |        |             |                 03 01                    --  . .
5443:594 | DONE dir | em 16 16 | 006565 | (6 bytes)   |         .word nt_state, xt_to-in, 005162 
5443:594 | DONE dir | em 16 16 |        |             |                 56 65 5b 51 62 51        --  V e [ Q b Q
5443:595 | DONE dir | em 16 16 | 00656b | (3 bytes)   |         .byte 3e, 69, 6e             
5443:595 | DONE dir | em 16 16 |        |             |                 3e 69 6e                 --  > i n
5443:596 | DONE wsp | em 16 16 |        |             |
5443:597 | DONE lbl | em 16 16 | 00656e |             | nt_source                            
5443:598 | DONE dir | em 16 16 | 00656e | (2 bytes)   |         .byte 6, { NC }              
5443:598 | DONE dir | em 16 16 |        |             |                 06 01                    --  . .
5443:599 | DONE dir | em 16 16 | 006570 | (6 bytes)   |         .word nt_to-in, xt_source, 005e16 
5443:599 | DONE dir | em 16 16 |        |             |                 63 65 0a 5e 16 5e        --  c e 
 ^ . ^
5443:600 | DONE dir | em 16 16 | 006576 | (6 bytes)   |         .byte 73, 6f, 75, 72, 63, 65 
5443:600 | DONE dir | em 16 16 |        |             |                 73 6f 75 72 63 65        --  s o u r c e
5443:601 | DONE wsp | em 16 16 |        |             |
5443:602 | DONE lbl | em 16 16 | 00657c |             | nt_depth                             
5443:603 | DONE dir | em 16 16 | 00657c | (2 bytes)   |         .byte 5, { NC }              
5443:603 | DONE dir | em 16 16 |        |             |                 05 01                    --  . .
5443:604 | DONE dir | em 16 16 | 00657e | (6 bytes)   |         .word nt_source, xt_depth, 005834 
5443:604 | DONE dir | em 16 16 |        |             |                 6e 65 26 58 34 58        --  n e & X 4 X
5443:605 | DONE dir | em 16 16 | 006584 | (5 bytes)   |         .byte 64, 65, 70, 74, 68     
5443:605 | DONE dir | em 16 16 |        |             |                 64 65 70 74 68           --  d e p t h
5443:606 | DONE wsp | em 16 16 |        |             |
5443:607 | DONE lbl | em 16 16 | 006589 |             | nt_to                                
5443:608 | DONE dir | em 16 16 | 006589 | (2 bytes)   |         .byte 2, { NC }              
5443:608 | DONE dir | em 16 16 |        |             |                 02 01                    --  . .
5443:609 | DONE dir | em 16 16 | 00658b | (6 bytes)   |         .word nt_depth, xt_to, 005e50 
5443:609 | DONE dir | em 16 16 |        |             |                 7c 65 47 5e 50 5e        --  | e G ^ P ^
5443:610 | DONE dir | em 16 16 | 006591 | (2 bytes)   |         .byte 74, 6f                 
5443:610 | DONE dir | em 16 16 |        |             |                 74 6f                    --  t o
5443:611 | DONE wsp | em 16 16 |        |             |
5443:612 | DONE lbl | em 16 16 | 006593 |             | nt_value                             
5443:613 | DONE dir | em 16 16 | 006593 | (2 bytes)   |         .byte 5, { NC }              uses routines of CONSTANT
5443:613 | DONE dir | em 16 16 |        |             |                 05 01                    --  . .
5443:614 | DONE dir | em 16 16 | 006595 | (6 bytes)   |         .word nt_to, xt_constant, 005712 
5443:614 | DONE dir | em 16 16 |        |             |                 89 65 e4 56 12 57        --  . e . V . W
5443:615 | DONE dir | em 16 16 | 00659b | (5 bytes)   |         .byte 76, 61, 6c, 75, 65     
5443:615 | DONE dir | em 16 16 |        |             |                 76 61 6c 75 65           --  v a l u e
5443:616 | DONE wsp | em 16 16 |        |             |
5443:617 | DONE lbl | em 16 16 | 0065a0 |             | nt_constant                          
5443:618 | DONE dir | em 16 16 | 0065a0 | (2 bytes)   |         .byte 8, { NC }              
5443:618 | DONE dir | em 16 16 |        |             |                 08 01                    --  . .
5443:619 | DONE dir | em 16 16 | 0065a2 | (6 bytes)   |         .word nt_value, xt_constant, 005712 
5443:619 | DONE dir | em 16 16 |        |             |                 93 65 e4 56 12 57        --  . e . V . W
5443:620 | DONE dir | em 16 16 | 0065a8 | (8 bytes)   |         .byte 63, 6f, 6e, 73, 74, 61, 6e, 74 
5443:620 | DONE dir | em 16 16 |        |             |                 63 6f 6e 73 74 61 6e 74  --  c o n s t a n t
5443:620 | DONE dir | em 16 16 |        |             |                                          -- 
5443:621 | DONE wsp | em 16 16 |        |             |
5443:622 | DONE lbl | em 16 16 | 0065b0 |             | nt_variable                          
5443:623 | DONE dir | em 16 16 | 0065b0 | (2 bytes)   |         .byte 8, { NC }              
5443:623 | DONE dir | em 16 16 |        |             |                 08 01                    --  . .
5443:624 | DONE dir | em 16 16 | 0065b2 | (6 bytes)   |         .word nt_constant, xt_variable, 005f79 
5443:624 | DONE dir | em 16 16 |        |             |                 a0 65 6a 5f 79 5f        --  . e j _ y _
5443:625 | DONE dir | em 16 16 | 0065b8 | (8 bytes)   |         .byte 76, 61, 72, 69, 61, 62, 6c, 65 
5443:625 | DONE dir | em 16 16 |        |             |                 76 61 72 69 61 62 6c 65  --  v a r i a b l e
5443:625 | DONE dir | em 16 16 |        |             |                                          -- 
5443:626 | DONE wsp | em 16 16 |        |             |
5443:627 | DONE lbl | em 16 16 | 0065c0 |             | nt_tick                              
5443:628 | DONE dir | em 16 16 | 0065c0 | (2 bytes)   |         .byte 1, { NC }              
5443:628 | DONE dir | em 16 16 |        |             |                 01 01                    --  . .
5443:629 | DONE dir | em 16 16 | 0065c2 | (6 bytes)   |         .word nt_variable, xt_tick, 005463 
5443:629 | DONE dir | em 16 16 |        |             |                 b0 65 48 54 63 54        --  . e H T c T
5443:630 | DONE dir | em 16 16 | 0065c8 | (1 bytes)   |         .byte 27                     hex for "'"
5443:630 | DONE dir | em 16 16 |        |             |                 27                       --  '
5443:631 | DONE wsp | em 16 16 |        |             |
5443:632 | DONE lbl | em 16 16 | 0065c9 |             | nt_move                              
5443:633 | DONE dir | em 16 16 | 0065c9 | (2 bytes)   |         .byte 4, { NC }              
5443:633 | DONE dir | em 16 16 |        |             |                 04 01                    --  . .
5443:634 | DONE dir | em 16 16 | 0065cb | (6 bytes)   |         .word nt_tick, xt_move, 005b07 
5443:634 | DONE dir | em 16 16 |        |             |                 c0 65 f6 5a 07 5b        --  . e . Z . [
5443:635 | DONE dir | em 16 16 | 0065d1 | (4 bytes)   |         .byte 6d, 6f, 76, 65         
5443:635 | DONE dir | em 16 16 |        |             |                 6d 6f 76 65              --  m o v e
5443:636 | DONE wsp | em 16 16 |        |             |
5443:637 | DONE lbl | em 16 16 | 0065d5 |             | nt_min                               
5443:638 | DONE dir | em 16 16 | 0065d5 | (2 bytes)   |         .byte 3, { NC }              
5443:638 | DONE dir | em 16 16 |        |             |                 03 01                    --  . .
5443:639 | DONE dir | em 16 16 | 0065d7 | (6 bytes)   |         .word nt_move, xt_min, 005af5 
5443:639 | DONE dir | em 16 16 |        |             |                 c9 65 e3 5a f5 5a        --  . e . Z . Z
5443:640 | DONE dir | em 16 16 | 0065dd | (3 bytes)   |         .byte 6d, 69, 6e             
5443:640 | DONE dir | em 16 16 |        |             |                 6d 69 6e                 --  m i n
5443:641 | DONE wsp | em 16 16 |        |             |
5443:642 | DONE lbl | em 16 16 | 0065e0 |             | nt_max                               
5443:643 | DONE dir | em 16 16 | 0065e0 | (2 bytes)   |         .byte 3, { NC }              
5443:643 | DONE dir | em 16 16 |        |             |                 03 01                    --  . .
5443:644 | DONE dir | em 16 16 | 0065e2 | (6 bytes)   |         .word nt_min, xt_max, 005ae2 
5443:644 | DONE dir | em 16 16 |        |             |                 d5 65 d0 5a e2 5a        --  . e . Z . Z
5443:645 | DONE dir | em 16 16 | 0065e8 | (3 bytes)   |         .byte 6d, 61, 78             
5443:645 | DONE dir | em 16 16 |        |             |                 6d 61 78                 --  m a x
5443:646 | DONE wsp | em 16 16 |        |             |
5443:647 | DONE lbl | em 16 16 | 0065eb |             | nt_negate                            
5443:648 | DONE dir | em 16 16 | 0065eb | (2 bytes)   |         .byte 6, { NC }              
5443:648 | DONE dir | em 16 16 |        |             |                 06 01                    --  . .
5443:649 | DONE dir | em 16 16 | 0065ed | (6 bytes)   |         .word nt_max, xt_negate, 005b38 
5443:649 | DONE dir | em 16 16 |        |             |                 e0 65 32 5b 38 5b        --  . e 2 [ 8 [
5443:650 | DONE dir | em 16 16 | 0065f3 | (6 bytes)   |         .byte 6e, 65, 67, 61, 74, 65 
5443:650 | DONE dir | em 16 16 |        |             |                 6e 65 67 61 74 65        --  n e g a t e
5443:651 | DONE wsp | em 16 16 |        |             |
5443:652 | DONE lbl | em 16 16 | 0065f9 |             | nt_invert                            
5443:653 | DONE dir | em 16 16 | 0065f9 | (2 bytes)   |         .byte 6, { NC }              
5443:653 | DONE dir | em 16 16 |        |             |                 06 01                    --  . .
5443:654 | DONE dir | em 16 16 | 0065fb | (6 bytes)   |         .word nt_negate, xt_invert, 005a1f 
5443:654 | DONE dir | em 16 16 |        |             |                 eb 65 1a 5a 1f 5a        --  . e . Z . Z
5443:655 | DONE dir | em 16 16 | 006601 | (6 bytes)   |         .byte 69, 6e, 76, 65, 72, 74 
5443:655 | DONE dir | em 16 16 |        |             |                 69 6e 76 65 72 74        --  i n v e r t
5443:656 | DONE wsp | em 16 16 |        |             |
5443:657 | DONE lbl | em 16 16 | 006607 |             | nt_char                              
5443:658 | DONE dir | em 16 16 | 006607 | (2 bytes)   |         .byte 4, { NC }              
5443:658 | DONE dir | em 16 16 |        |             |                 04 01                    --  . .
5443:659 | DONE dir | em 16 16 | 006609 | (6 bytes)   |         .word nt_invert, xt_char, 00560e 
5443:659 | DONE dir | em 16 16 |        |             |                 f9 65 f7 55 0e 56        --  . e . U . V
5443:660 | DONE dir | em 16 16 | 00660f | (4 bytes)   |         .byte 63, 68, 61, 72         
5443:660 | DONE dir | em 16 16 |        |             |                 63 68 61 72              --  c h a r
5443:661 | DONE wsp | em 16 16 |        |             |
5443:662 | DONE lbl | em 16 16 | 006613 |             | nt_rshift                            
5443:663 | DONE dir | em 16 16 | 006613 | (2 bytes)   |         .byte 6, { NC }              
5443:663 | DONE dir | em 16 16 |        |             |                 06 01                    --  . .
5443:664 | DONE dir | em 16 16 | 006615 | (6 bytes)   |         .word nt_char, xt_rshift, 005cfa 
5443:664 | DONE dir | em 16 16 |        |             |                 07 66 e7 5c fa 5c        --  . f . \ . \
5443:665 | DONE dir | em 16 16 | 00661b | (6 bytes)   |         .byte 72, 73, 68, 69, 66, 74 
5443:665 | DONE dir | em 16 16 |        |             |                 72 73 68 69 66 74        --  r s h i f t
5443:666 | DONE wsp | em 16 16 |        |             |
5443:667 | DONE lbl | em 16 16 | 006621 |             | nt_xor                               
5443:668 | DONE dir | em 16 16 | 006621 | (2 bytes)   |         .byte 3, { NC }              
5443:668 | DONE dir | em 16 16 |        |             |                 03 01                    --  . .
5443:669 | DONE dir | em 16 16 | 006623 | (6 bytes)   |         .word nt_rshift, xt_xor, 005fef 
5443:669 | DONE dir | em 16 16 |        |             |                 13 66 e9 5f ef 5f        --  . f . _ . _
5443:670 | DONE dir | em 16 16 | 006629 | (3 bytes)   |         .byte 78, 6f, 72             
5443:670 | DONE dir | em 16 16 |        |             |                 78 6f 72                 --  x o r
5443:671 | DONE wsp | em 16 16 |        |             |
5443:672 | DONE lbl | em 16 16 | 00662c |             | nt_or                                
5443:673 | DONE dir | em 16 16 | 00662c | (2 bytes)   |         .byte 2, { NC }              
5443:673 | DONE dir | em 16 16 |        |             |                 02 01                    --  . .
5443:674 | DONE dir | em 16 16 | 00662e | (6 bytes)   |         .word nt_xor, xt_or, 005bc6  
5443:674 | DONE dir | em 16 16 |        |             |                 21 66 c0 5b c6 5b        --  ! f . [ . [
5443:675 | DONE dir | em 16 16 | 006634 | (2 bytes)   |         .byte 6f, 72                 
5443:675 | DONE dir | em 16 16 |        |             |                 6f 72                    --  o r
5443:676 | DONE wsp | em 16 16 |        |             |
5443:677 | DONE lbl | em 16 16 | 006636 |             | nt_and                               
5443:678 | DONE dir | em 16 16 | 006636 | (2 bytes)   |         .byte 3, { NC }              
5443:678 | DONE dir | em 16 16 |        |             |                 03 01                    --  . .
5443:679 | DONE dir | em 16 16 | 006638 | (6 bytes)   |         .word nt_or, xt_and, 00555f  
5443:679 | DONE dir | em 16 16 |        |             |                 2c 66 59 55 5f 55        --  , f Y U _ U
5443:680 | DONE dir | em 16 16 | 00663e | (3 bytes)   |         .byte 61, 6e, 64             
5443:680 | DONE dir | em 16 16 |        |             |                 61 6e 64                 --  a n d
5443:681 | DONE wsp | em 16 16 |        |             |
5443:682 | DONE lbl | em 16 16 | 006641 |             | nt_lshift                            
5443:683 | DONE dir | em 16 16 | 006641 | (2 bytes)   |         .byte 6, { NC }              
5443:683 | DONE dir | em 16 16 |        |             |                 06 01                    --  . .
5443:684 | DONE dir | em 16 16 | 006643 | (6 bytes)   |         .word nt_and, xt_lshift, 005a85 
5443:684 | DONE dir | em 16 16 |        |             |                 36 66 72 5a 85 5a        --  6 f r Z . Z
5443:685 | DONE dir | em 16 16 | 006649 | (6 bytes)   |         .byte 6c, 73, 68, 69, 66, 74 
5443:685 | DONE dir | em 16 16 |        |             |                 6c 73 68 69 66 74        --  l s h i f t
5443:686 | DONE wsp | em 16 16 |        |             |
5443:687 | DONE lbl | em 16 16 | 00664f |             | nt_plusstore                         
5443:688 | DONE dir | em 16 16 | 00664f | (2 bytes)   |         .byte 2, { NC }              
5443:688 | DONE dir | em 16 16 |        |             |                 02 01                    --  . .
5443:689 | DONE dir | em 16 16 | 006651 | (6 bytes)   |         .word nt_lshift, xt_plusstore, 005c71 
5443:689 | DONE dir | em 16 16 |        |             |                 41 66 62 5c 71 5c        --  A f b \ q \
5443:690 | DONE dir | em 16 16 | 006657 | (2 bytes)   |         .byte 2b, 21                 
5443:690 | DONE dir | em 16 16 |        |             |                 2b 21                    --  + !
5443:691 | DONE wsp | em 16 16 |        |             |
5443:692 | DONE lbl | em 16 16 | 006659 |             | nt_c-comma                           
5443:693 | DONE dir | em 16 16 | 006659 | (2 bytes)   |         .byte 2, { NC }              
5443:693 | DONE dir | em 16 16 |        |             |                 02 01                    --  . .
5443:694 | DONE dir | em 16 16 | 00665b | (6 bytes)   |         .word nt_plusstore, xt_c-comma, 0055d7 
5443:694 | DONE dir | em 16 16 |        |             |                 4f 66 ca 55 d7 55        --  O f . U . U
5443:695 | DONE dir | em 16 16 | 006661 | (2 bytes)   |         .byte 63, 2c                 
5443:695 | DONE dir | em 16 16 |        |             |                 63 2c                    --  c ,
5443:696 | DONE wsp | em 16 16 |        |             |
5443:697 | DONE lbl | em 16 16 | 006663 |             | nt_c-fetch                           
5443:698 | DONE dir | em 16 16 | 006663 | (2 bytes)   |         .byte 2, { NC }              
5443:698 | DONE dir | em 16 16 |        |             |                 02 01                    --  . .
5443:699 | DONE dir | em 16 16 | 006665 | (6 bytes)   |         .word nt_c-comma, xt_c-fetch, 0055e3 
5443:699 | DONE dir | em 16 16 |        |             |                 59 66 d8 55 e3 55        --  Y f . U . U
5443:700 | DONE dir | em 16 16 | 00666b | (2 bytes)   |         .byte 63, 40                 
5443:700 | DONE dir | em 16 16 |        |             |                 63 40                    --  c @
5443:701 | DONE wsp | em 16 16 |        |             |
5443:702 | DONE lbl | em 16 16 | 00666d |             | nt_c-store                           
5443:703 | DONE dir | em 16 16 | 00666d | (2 bytes)   |         .byte 2, { NC }              
5443:703 | DONE dir | em 16 16 |        |             |                 02 01                    --  . .
5443:704 | DONE dir | em 16 16 | 00666f | (6 bytes)   |         .word nt_c-fetch, xt_c-store, 0055f3 
5443:704 | DONE dir | em 16 16 |        |             |                 63 66 e4 55 f3 55        --  c f . U . U
5443:705 | DONE dir | em 16 16 | 006675 | (2 bytes)   |         .byte 63, 21                 
5443:705 | DONE dir | em 16 16 |        |             |                 63 21                    --  c !
5443:706 | DONE wsp | em 16 16 |        |             |
5443:707 | DONE lbl | em 16 16 | 006677 |             | nt_two-star                          
5443:708 | DONE dir | em 16 16 | 006677 | (2 bytes)   |         .byte 2, { NC }              
5443:708 | DONE dir | em 16 16 |        |             |                 02 01                    --  . .
5443:709 | DONE dir | em 16 16 | 006679 | (6 bytes)   |         .word nt_c-store, xt_two-star, 0053d4 
5443:709 | DONE dir | em 16 16 |        |             |                 6d 66 d1 53 d4 53        --  m f . S . S
5443:710 | DONE dir | em 16 16 | 00667f | (2 bytes)   |         .byte 32, 2a                 
5443:710 | DONE dir | em 16 16 |        |             |                 32 2a                    --  2 *
5443:711 | DONE wsp | em 16 16 |        |             |
5443:712 | DONE lbl | em 16 16 | 006681 |             | nt_minus                             
5443:713 | DONE dir | em 16 16 | 006681 | (2 bytes)   |         .byte 1, { NC }              
5443:713 | DONE dir | em 16 16 |        |             |                 01 01                    --  . .
5443:714 | DONE dir | em 16 16 | 006683 | (6 bytes)   |         .word nt_two-star, xt_minus, 00533b 
5443:714 | DONE dir | em 16 16 |        |             |                 77 66 31 53 3b 53        --  w f 1 S ; S
5443:715 | DONE dir | em 16 16 | 006689 | (1 bytes)   |         .byte 2d                     
5443:715 | DONE dir | em 16 16 |        |             |                 2d                       --  -
5443:716 | DONE wsp | em 16 16 |        |             |
5443:717 | DONE lbl | em 16 16 | 00668a |             | nt_plus                              
5443:718 | DONE dir | em 16 16 | 00668a | (2 bytes)   |         .byte 1, { NC }              
5443:718 | DONE dir | em 16 16 |        |             |                 01 01                    --  . .
5443:719 | DONE dir | em 16 16 | 00668c | (6 bytes)   |         .word nt_minus, xt_plus, 005330 
5443:719 | DONE dir | em 16 16 |        |             |                 81 66 29 53 30 53        --  . f ) S 0 S
5443:720 | DONE dir | em 16 16 | 006692 | (1 bytes)   |         .byte 2b                     
5443:720 | DONE dir | em 16 16 |        |             |                 2b                       --  +
5443:721 | DONE wsp | em 16 16 |        |             |
5443:722 | DONE lbl | em 16 16 | 006693 |             | nt_one-minus                         
5443:723 | DONE dir | em 16 16 | 006693 | (2 bytes)   |         .byte 2, { NC }              
5443:723 | DONE dir | em 16 16 |        |             |                 02 01                    --  . .
5443:724 | DONE dir | em 16 16 | 006695 | (6 bytes)   |         .word nt_plus, xt_one-minus, 0053c6 
5443:724 | DONE dir | em 16 16 |        |             |                 8a 66 c5 53 c6 53        --  . f . S . S
5443:725 | DONE dir | em 16 16 | 00669b | (2 bytes)   |         .byte 31, 2d                 
5443:725 | DONE dir | em 16 16 |        |             |                 31 2d                    --  1 -
5443:726 | DONE wsp | em 16 16 |        |             |
5443:727 | DONE lbl | em 16 16 | 00669d |             | nt_one-plus                          
5443:728 | DONE dir | em 16 16 | 00669d | (2 bytes)   |         .byte 2, { NC }              
5443:728 | DONE dir | em 16 16 |        |             |                 02 01                    --  . .
5443:729 | DONE dir | em 16 16 | 00669f | (6 bytes)   |         .word nt_one-minus, xt_one-plus, 0053c8 
5443:729 | DONE dir | em 16 16 |        |             |                 93 66 c7 53 c8 53        --  . f . S . S
5443:730 | DONE dir | em 16 16 | 0066a5 | (2 bytes)   |         .byte 31, 2b                 
5443:730 | DONE dir | em 16 16 |        |             |                 31 2b                    --  1 +
5443:731 | DONE wsp | em 16 16 |        |             |
5443:732 | DONE lbl | em 16 16 | 0066a7 |             | nt_zero-notequal                     
5443:733 | DONE dir | em 16 16 | 0066a7 | (2 bytes)   |         .byte 3, { NC }              
5443:733 | DONE dir | em 16 16 |        |             |                 03 01                    --  . .
5443:734 | DONE dir | em 16 16 | 0066a9 | (6 bytes)   |         .word nt_one-plus, xt_zero-notequal, 005393 
5443:734 | DONE dir | em 16 16 |        |             |                 9d 66 88 53 93 53        --  . f . S . S
5443:735 | DONE dir | em 16 16 | 0066af | (3 bytes)   |         .byte 30, 3c, 3e             
5443:735 | DONE dir | em 16 16 |        |             |                 30 3c 3e                 --  0 < >
5443:736 | DONE wsp | em 16 16 |        |             |
5443:737 | DONE lbl | em 16 16 | 0066b2 |             | nt_zero-more                         
5443:738 | DONE dir | em 16 16 | 0066b2 | (2 bytes)   |         .byte 2, { NC }              
5443:738 | DONE dir | em 16 16 |        |             |                 02 01                    --  . .
5443:739 | DONE dir | em 16 16 | 0066b4 | (6 bytes)   |         .word nt_zero-notequal, xt_zero-more, 00539e 
5443:739 | DONE dir | em 16 16 |        |             |                 a7 66 94 53 9e 53        --  . f . S . S
5443:740 | DONE dir | em 16 16 | 0066ba | (2 bytes)   |         .byte 30, 3e                 
5443:740 | DONE dir | em 16 16 |        |             |                 30 3e                    --  0 >
5443:741 | DONE wsp | em 16 16 |        |             |
5443:742 | DONE lbl | em 16 16 | 0066bc |             | nt_zero-less                         
5443:743 | DONE dir | em 16 16 | 0066bc | (2 bytes)   |         .byte 2, { NC }              
5443:743 | DONE dir | em 16 16 |        |             |                 02 01                    --  . .
5443:744 | DONE dir | em 16 16 | 0066be | (6 bytes)   |         .word nt_zero-more, xt_zero-less, 005387 
5443:744 | DONE dir | em 16 16 |        |             |                 b2 66 7c 53 87 53        --  . f | S . S
5443:745 | DONE dir | em 16 16 | 0066c4 | (2 bytes)   |         .byte 30, 3c                 
5443:745 | DONE dir | em 16 16 |        |             |                 30 3c                    --  0 <
5443:746 | DONE wsp | em 16 16 |        |             |
5443:747 | DONE lbl | em 16 16 | 0066c6 |             | nt_greater                           
5443:748 | DONE dir | em 16 16 | 0066c6 | (2 bytes)   |         .byte 1, { NC }              
5443:748 | DONE dir | em 16 16 |        |             |                 01 01                    --  . .
5443:749 | DONE dir | em 16 16 | 0066c8 | (6 bytes)   |         .word nt_zero-less, xt_greater, 005136 
5443:749 | DONE dir | em 16 16 |        |             |                 bc 66 23 51 36 51        --  . f # Q 6 Q
5443:750 | DONE dir | em 16 16 | 0066ce | (1 bytes)   |         .byte 3e                     
5443:750 | DONE dir | em 16 16 |        |             |                 3e                       --  >
5443:751 | DONE wsp | em 16 16 |        |             |
5443:752 | DONE lbl | em 16 16 | 0066cf |             | nt_less                              
5443:753 | DONE dir | em 16 16 | 0066cf | (2 bytes)   |         .byte 1, { NC }              
5443:753 | DONE dir | em 16 16 |        |             |                 01 01                    --  . .
5443:754 | DONE dir | em 16 16 | 0066d1 | (6 bytes)   |         .word nt_greater, xt_less, 00510c 
5443:754 | DONE dir | em 16 16 |        |             |                 c6 66 f9 50 0c 51        --  . f . P  Q
5443:755 | DONE dir | em 16 16 | 0066d7 | (1 bytes)   |         .byte 3c                     
5443:755 | DONE dir | em 16 16 |        |             |                 3c                       --  <
5443:756 | DONE wsp | em 16 16 |        |             |
5443:757 | DONE lbl | em 16 16 | 0066d8 |             | nt_zero-equal                        
5443:758 | DONE dir | em 16 16 | 0066d8 | (2 bytes)   |         .byte 2, { NC }              
5443:758 | DONE dir | em 16 16 |        |             |                 02 01                    --  . .
5443:759 | DONE dir | em 16 16 | 0066da | (6 bytes)   |         .word nt_less, xt_zero-equal, 00537b 
5443:759 | DONE dir | em 16 16 |        |             |                 cf 66 70 53 7b 53        --  . f p S { S
5443:760 | DONE dir | em 16 16 | 0066e0 | (2 bytes)   |         .byte 30, 3d                 
5443:760 | DONE dir | em 16 16 |        |             |                 30 3d                    --  0 =
5443:761 | DONE wsp | em 16 16 |        |             |
5443:762 | DONE lbl | em 16 16 | 0066e2 |             | nt_not-equal                         
5443:763 | DONE dir | em 16 16 | 0066e2 | (2 bytes)   |         .byte 2, { NC }              
5443:763 | DONE dir | em 16 16 |        |             |                 02 01                    --  . .
5443:764 | DONE dir | em 16 16 | 0066e4 | (6 bytes)   |         .word nt_zero-equal, xt_not-equal, 005118 
5443:764 | DONE dir | em 16 16 |        |             |                 d8 66 0d 51 18 51        --  . f  Q . Q
5443:765 | DONE dir | em 16 16 | 0066ea | (2 bytes)   |         .byte 3c, 3e                 
5443:765 | DONE dir | em 16 16 |        |             |                 3c 3e                    --  < >
5443:766 | DONE wsp | em 16 16 |        |             |
5443:767 | DONE lbl | em 16 16 | 0066ec |             | nt_equal                             
5443:768 | DONE dir | em 16 16 | 0066ec | (2 bytes)   |         .byte 1, { NC }              
5443:768 | DONE dir | em 16 16 |        |             |                 01 01                    --  . .
5443:769 | DONE dir | em 16 16 | 0066ee | (6 bytes)   |         .word nt_not-equal, xt_equal, 005367 
5443:769 | DONE dir | em 16 16 |        |             |                 e2 66 5c 53 67 53        --  . f \ S g S
5443:770 | DONE dir | em 16 16 | 0066f4 | (1 bytes)   |         .byte 3d                     
5443:770 | DONE dir | em 16 16 |        |             |                 3d                       --  =
5443:771 | DONE wsp | em 16 16 |        |             |
5443:772 | DONE lbl | em 16 16 | 0066f5 |             | nt_false                             
5443:773 | DONE dir | em 16 16 | 0066f5 | (2 bytes)   |         .byte 5, { NC }              
5443:773 | DONE dir | em 16 16 |        |             |                 05 01                    --  . .
5443:774 | DONE dir | em 16 16 | 0066f7 | (6 bytes)   |         .word nt_equal, xt_zero, 00536f 
5443:774 | DONE dir | em 16 16 |        |             |                 ec 66 68 53 6f 53        --  . f h S o S
5443:775 | DONE dir | em 16 16 | 0066fd | (5 bytes)   |         .byte 66, 61, 6c, 73, 65     
5443:775 | DONE dir | em 16 16 |        |             |                 66 61 6c 73 65           --  f a l s e
5443:776 | DONE wsp | em 16 16 |        |             |
5443:777 | DONE lbl | em 16 16 | 006702 |             | nt_true                              
5443:778 | DONE dir | em 16 16 | 006702 | (2 bytes)   |         .byte 4, { NC }              
5443:778 | DONE dir | em 16 16 |        |             |                 04 01                    --  . .
5443:779 | DONE dir | em 16 16 | 006704 | (6 bytes)   |         .word nt_false, xt_true, 005e58 
5443:779 | DONE dir | em 16 16 |        |             |                 f5 66 51 5e 58 5e        --  . f Q ^ X ^
5443:780 | DONE dir | em 16 16 | 00670a | (4 bytes)   |         .byte 74, 72, 75, 65         
5443:780 | DONE dir | em 16 16 |        |             |                 74 72 75 65              --  t r u e
5443:781 | DONE wsp | em 16 16 |        |             |
5443:782 | DONE lbl | em 16 16 | 00670e |             | nt_tonumber                          
5443:783 | DONE dir | em 16 16 | 00670e | (2 bytes)   |         .byte 7, { NC }              see if actually NC
5443:783 | DONE dir | em 16 16 |        |             |                 07 01                    --  . .
5443:784 | DONE dir | em 16 16 | 006710 | (6 bytes)   |         .word nt_true, xt_tonumber, 0051bf 
5443:784 | DONE dir | em 16 16 |        |             |                 02 67 63 51 bf 51        --  . g c Q . Q
5443:785 | DONE dir | em 16 16 | 006716 | (7 bytes)   |         .byte 3e, 6e, 75, 6d, 62, 65, 72 
5443:785 | DONE dir | em 16 16 |        |             |                 3e 6e 75 6d 62 65 72     --  > n u m b e r
5443:786 | DONE wsp | em 16 16 |        |             |
5443:787 | DONE lbl | em 16 16 | 00671d |             | nt_number                            
5443:788 | DONE dir | em 16 16 | 00671d | (2 bytes)   |         .byte 6, { NC }              see if actually NC
5443:788 | DONE dir | em 16 16 |        |             |                 06 01                    --  . .
5443:789 | DONE dir | em 16 16 | 00671f | (6 bytes)   |         .word nt_tonumber, xt_number, 005bbf 
5443:789 | DONE dir | em 16 16 |        |             |                 0e 67 3c 5b bf 5b        --  . g < [ . [
5443:790 | DONE dir | em 16 16 | 006725 | (6 bytes)   |         .byte 6e, 75, 6d, 62, 65, 72 
5443:790 | DONE dir | em 16 16 |        |             |                 6e 75 6d 62 65 72        --  n u m b e r
5443:791 | DONE wsp | em 16 16 |        |             |
5443:792 | DONE lbl | em 16 16 | 00672b |             | nt_two                               
5443:793 | DONE dir | em 16 16 | 00672b | (2 bytes)   |         .byte 1, { NC }              
5443:793 | DONE dir | em 16 16 |        |             |                 01 01                    --  . .
5443:794 | DONE dir | em 16 16 | 00672d | (6 bytes)   |         .word nt_number, xt_two, 0053d0 
5443:794 | DONE dir | em 16 16 |        |             |                 1d 67 c9 53 d0 53        --  . g . S . S
5443:795 | DONE dir | em 16 16 | 006733 | (1 bytes)   |         .byte 32                     
5443:795 | DONE dir | em 16 16 |        |             |                 32                       --  2
5443:796 | DONE wsp | em 16 16 |        |             |
5443:797 | DONE lbl | em 16 16 | 006734 |             | nt_one                               
5443:798 | DONE dir | em 16 16 | 006734 | (2 bytes)   |         .byte 1, { NC }              
5443:798 | DONE dir | em 16 16 |        |             |                 01 01                    --  . .
5443:799 | DONE dir | em 16 16 | 006736 | (6 bytes)   |         .word nt_two, xt_one, 0053c4 
5443:799 | DONE dir | em 16 16 |        |             |                 2b 67 bd 53 c4 53        --  + g . S . S
5443:800 | DONE dir | em 16 16 | 00673c | (1 bytes)   |         .byte 31                     
5443:800 | DONE dir | em 16 16 |        |             |                 31                       --  1
5443:801 | DONE wsp | em 16 16 |        |             |
5443:802 | DONE lbl | em 16 16 | 00673d |             | nt_zero                              
5443:803 | DONE dir | em 16 16 | 00673d | (2 bytes)   |         .byte 1, { NC }              
5443:803 | DONE dir | em 16 16 |        |             |                 01 01                    --  . .
5443:804 | DONE dir | em 16 16 | 00673f | (6 bytes)   |         .word nt_one, xt_zero, 00536f 
5443:804 | DONE dir | em 16 16 |        |             |                 34 67 68 53 6f 53        --  4 g h S o S
5443:805 | DONE dir | em 16 16 | 006745 | (1 bytes)   |         .byte 30                     
5443:805 | DONE dir | em 16 16 |        |             |                 30                       --  0
5443:806 | DONE wsp | em 16 16 |        |             |
5443:807 | DONE lbl | em 16 16 | 006746 |             | nt_find-name                         
5443:808 | DONE dir | em 16 16 | 006746 | (2 bytes)   |         .byte 9, 0                   
5443:808 | DONE dir | em 16 16 |        |             |                 09 00                    --  	 .
5443:809 | DONE dir | em 16 16 | 006748 | (6 bytes)   |         .word nt_zero, xt_find-name, 005981 
5443:809 | DONE dir | em 16 16 |        |             |                 3d 67 2b 59 81 59        --  = g + Y . Y
5443:810 | DONE dir | em 16 16 | 00674e | (9 bytes)   |         .byte 66, 69, 6e, 64, 2d, 6e, 61, 6d, 65 
5443:810 | DONE dir | em 16 16 |        |             |                 66 69 6e 64 2d 6e 61 6d  --  f i n d - n a m
5443:810 | DONE dir | em 16 16 |        |             |                 65                       --  e
5443:811 | DONE wsp | em 16 16 |        |             |
5443:812 | DONE lbl | em 16 16 | 006757 |             | nt_refill                            
5443:813 | DONE dir | em 16 16 | 006757 | (2 bytes)   |         .byte 6, 0                   TODO check flags
5443:813 | DONE dir | em 16 16 |        |             |                 06 00                    --  . .
5443:814 | DONE dir | em 16 16 | 006759 | (6 bytes)   |         .word nt_find-name, xt_refill, 005cdd 
5443:814 | DONE dir | em 16 16 |        |             |                 46 67 b6 5c dd 5c        --  F g . \ . \
5443:815 | DONE dir | em 16 16 | 00675f | (6 bytes)   |         .byte 72, 65, 66, 69, 6c, 6c 
5443:815 | DONE dir | em 16 16 |        |             |                 72 65 66 69 6c 6c        --  r e f i l l
5443:816 | DONE wsp | em 16 16 |        |             |
5443:817 | DONE lbl | em 16 16 | 006765 |             | nt_parse-name                        
5443:818 | DONE dir | em 16 16 | 006765 | (2 bytes)   |         .byte &10, 0                 
5443:818 | DONE dir | em 16 16 |        |             |                 0a 00                    --  
 .
5443:819 | DONE dir | em 16 16 | 006767 | (6 bytes)   |         .word nt_refill, xt_parse-name, 005c53 
5443:819 | DONE dir | em 16 16 |        |             |                 57 67 ef 5b 53 5c        --  W g . [ S \
5443:820 | DONE dir | em 16 16 | 00676d | (10 bytes)  |         .byte 70, 61, 72, 73, 65, 2d, 6e, 61, 6d, 65 
5443:820 | DONE dir | em 16 16 |        |             |                 70 61 72 73 65 2d 6e 61  --  p a r s e - n a
5443:820 | DONE dir | em 16 16 |        |             |                 6d 65                    --  m e
5443:821 | DONE wsp | em 16 16 |        |             |
5443:822 | DONE lbl | em 16 16 | 006777 |             | nt_source-id                         
5443:823 | DONE dir | em 16 16 | 006777 | (2 bytes)   |         .byte 9, { NC }              
5443:823 | DONE dir | em 16 16 |        |             |                 09 01                    --  	 .
5443:824 | DONE dir | em 16 16 | 006779 | (6 bytes)   |         .word nt_parse-name, xt_source-id, 005e1d 
5443:824 | DONE dir | em 16 16 |        |             |                 65 67 17 5e 1d 5e        --  e g . ^ . ^
5443:825 | DONE dir | em 16 16 | 00677f | (9 bytes)   |         .byte 73, 6f, 75, 72, 63, 65, 2d, 69, 64 
5443:825 | DONE dir | em 16 16 |        |             |                 73 6f 75 72 63 65 2d 69  --  s o u r c e - i
5443:825 | DONE dir | em 16 16 |        |             |                 64                       --  d
5443:826 | DONE wsp | em 16 16 |        |             |
5443:827 | DONE lbl | em 16 16 | 006788 |             | nt_comma                             
5443:828 | DONE dir | em 16 16 | 006788 | (2 bytes)   |         .byte 1, { NC }              
5443:828 | DONE dir | em 16 16 |        |             |                 01 01                    --  . .
5443:829 | DONE dir | em 16 16 | 00678a | (6 bytes)   |         .word nt_source-id, xt_comma, 005250 
5443:829 | DONE dir | em 16 16 |        |             |                 77 67 45 52 50 52        --  w g E R P R
5443:830 | DONE dir | em 16 16 | 006790 | (1 bytes)   |         .byte 2c                     
5443:830 | DONE dir | em 16 16 |        |             |                 2c                       --  ,
5443:831 | DONE wsp | em 16 16 |        |             |
5443:832 | DONE lbl | em 16 16 | 006791 |             | nt_accept                            
5443:833 | DONE dir | em 16 16 | 006791 | (2 bytes)   |         .byte 6, 00                  TODO check flags
5443:833 | DONE dir | em 16 16 |        |             |                 06 00                    --  . .
5443:834 | DONE dir | em 16 16 | 006793 | (6 bytes)   |         .word nt_comma, xt_accept, 005515 
5443:834 | DONE dir | em 16 16 |        |             |                 88 67 8a 54 15 55        --  . g . T . U
5443:835 | DONE dir | em 16 16 | 006799 | (6 bytes)   |         .byte 61, 63, 63, 65, 70, 74 
5443:835 | DONE dir | em 16 16 |        |             |                 61 63 63 65 70 74        --  a c c e p t
5443:836 | DONE wsp | em 16 16 |        |             |
5443:837 | DONE lbl | em 16 16 | 00679f |             | nt_key                               
5443:838 | DONE dir | em 16 16 | 00679f | (2 bytes)   |         .byte 3, { NC }              
5443:838 | DONE dir | em 16 16 |        |             |                 03 01                    --  . .
5443:839 | DONE dir | em 16 16 | 0067a1 | (6 bytes)   |         .word nt_accept, xt_key, 0059e5 
5443:839 | DONE dir | em 16 16 |        |             |                 91 67 d6 59 e5 59        --  . g . Y . Y
5443:840 | DONE dir | em 16 16 | 0067a7 | (3 bytes)   |         .byte 6b, 65, 79             
5443:840 | DONE dir | em 16 16 |        |             |                 6b 65 79                 --  k e y
5443:841 | DONE wsp | em 16 16 |        |             |
5443:842 | DONE lbl | em 16 16 | 0067aa |             | nt_backslash                         
5443:843 | DONE dir | em 16 16 | 0067aa | (2 bytes)   |         .byte 1, { NC }              
5443:843 | DONE dir | em 16 16 |        |             |                 01 01                    --  . .
5443:844 | DONE dir | em 16 16 | 0067ac | (6 bytes)   |         .word nt_key, xt_backslash, 005328 
5443:844 | DONE dir | em 16 16 |        |             |                 9f 67 24 53 28 53        --  . g $ S ( S
5443:845 | DONE dir | em 16 16 | 0067b2 | (1 bytes)   |         .byte 5c                     
5443:845 | DONE dir | em 16 16 |        |             |                 5c                       --  \
5443:846 | DONE wsp | em 16 16 |        |             |
5443:847 | DONE lbl | em 16 16 | 0067b3 |             | nt_qdup                              
5443:848 | DONE dir | em 16 16 | 0067b3 | (2 bytes)   |         .byte 4, { NC }              
5443:848 | DONE dir | em 16 16 |        |             |                 04 01                    --  . .
5443:849 | DONE dir | em 16 16 | 0067b5 | (6 bytes)   |         .word nt_backslash, xt_qdup, 0052cd 
5443:849 | DONE dir | em 16 16 |        |             |                 aa 67 c6 52 cd 52        --  . g . R . R
5443:850 | DONE dir | em 16 16 | 0067bb | (4 bytes)   |         .byte 3f, 64, 75, 70         
5443:850 | DONE dir | em 16 16 |        |             |                 3f 64 75 70              --  ? d u p
5443:851 | DONE wsp | em 16 16 |        |             |
5443:852 | DONE lbl | em 16 16 | 0067bf |             | nt_tuck                              
5443:853 | DONE dir | em 16 16 | 0067bf | (2 bytes)   |         .byte 4, { NC }              
5443:853 | DONE dir | em 16 16 |        |             |                 04 01                    --  . .
5443:854 | DONE dir | em 16 16 | 0067c1 | (6 bytes)   |         .word nt_qdup, xt_tuck, 005e61 
5443:854 | DONE dir | em 16 16 |        |             |                 b3 67 59 5e 61 5e        --  . g Y ^ a ^
5443:855 | DONE dir | em 16 16 | 0067c7 | (4 bytes)   |         .byte 74, 75, 63, 6b         
5443:855 | DONE dir | em 16 16 |        |             |                 74 75 63 6b              --  t u c k
5443:856 | DONE wsp | em 16 16 |        |             |
5443:857 | DONE lbl | em 16 16 | 0067cb |             | nt_nip                               
5443:858 | DONE dir | em 16 16 | 0067cb | (2 bytes)   |         .byte 3, { NC }              
5443:858 | DONE dir | em 16 16 |        |             |                 03 01                    --  . .
5443:859 | DONE dir | em 16 16 | 0067cd | (6 bytes)   |         .word nt_tuck, xt_nip, 005b3b 
5443:859 | DONE dir | em 16 16 |        |             |                 bf 67 39 5b 3b 5b        --  . g 9 [ ; [
5443:860 | DONE dir | em 16 16 | 0067d3 | (3 bytes)   |         .byte 6e, 69, 70             
5443:860 | DONE dir | em 16 16 |        |             |                 6e 69 70                 --  n i p
5443:861 | DONE wsp | em 16 16 |        |             |
5443:862 | DONE lbl | em 16 16 | 0067d6 |             | nt_mrot                              
5443:863 | DONE dir | em 16 16 | 0067d6 | (2 bytes)   |         .byte 4, { NC }              
5443:863 | DONE dir | em 16 16 |        |             |                 04 01                    --  . .
5443:864 | DONE dir | em 16 16 | 0067d8 | (6 bytes)   |         .word nt_nip, xt_mrot, 005344 
5443:864 | DONE dir | em 16 16 |        |             |                 cb 67 3c 53 44 53        --  . g < S D S
5443:865 | DONE dir | em 16 16 | 0067de | (4 bytes)   |         .byte 2d, 72, 6f, 74         
5443:865 | DONE dir | em 16 16 |        |             |                 2d 72 6f 74              --  - r o t
5443:866 | DONE wsp | em 16 16 |        |             |
5443:867 | DONE lbl | em 16 16 | 0067e2 |             | nt_rot                               
5443:868 | DONE dir | em 16 16 | 0067e2 | (2 bytes)   |         .byte 3, { NC }              
5443:868 | DONE dir | em 16 16 |        |             |                 03 01                    --  . .
5443:869 | DONE dir | em 16 16 | 0067e4 | (6 bytes)   |         .word nt_mrot, xt_rot, 005ce6 
5443:869 | DONE dir | em 16 16 |        |             |                 d6 67 de 5c e6 5c        --  . g . \ . \
5443:870 | DONE dir | em 16 16 | 0067ea | (3 bytes)   |         .byte 72, 6f, 74             
5443:870 | DONE dir | em 16 16 |        |             |                 72 6f 74                 --  r o t
5443:871 | DONE wsp | em 16 16 |        |             |
5443:872 | DONE lbl | em 16 16 | 0067ed |             | nt_2over                             
5443:873 | DONE dir | em 16 16 | 0067ed | (2 bytes)   |         .byte 5, { NC }              
5443:873 | DONE dir | em 16 16 |        |             |                 05 01                    --  . .
5443:874 | DONE dir | em 16 16 | 0067ef | (6 bytes)   |         .word nt_rot, xt_2over, 005404 
5443:874 | DONE dir | em 16 16 |        |             |                 e2 67 f8 53 04 54        --  . g . S . T
5443:875 | DONE dir | em 16 16 | 0067f5 | (5 bytes)   |         .byte 32, 6f, 76, 65, 72     
5443:875 | DONE dir | em 16 16 |        |             |                 32 6f 76 65 72           --  2 o v e r
5443:876 | DONE wsp | em 16 16 |        |             |
5443:877 | DONE lbl | em 16 16 | 0067fa |             | nt_2swap                             
5443:878 | DONE dir | em 16 16 | 0067fa | (2 bytes)   |         .byte 5, { NC }              
5443:878 | DONE dir | em 16 16 |        |             |                 05 01                    --  . .
5443:879 | DONE dir | em 16 16 | 0067fc | (6 bytes)   |         .word nt_2over, xt_2swap, 005434 
5443:879 | DONE dir | em 16 16 |        |             |                 ed 67 24 54 34 54        --  . g $ T 4 T
5443:880 | DONE dir | em 16 16 | 006802 | (5 bytes)   |         .byte 32, 73, 77, 61, 70     
5443:880 | DONE dir | em 16 16 |        |             |                 32 73 77 61 70           --  2 s w a p
5443:881 | DONE wsp | em 16 16 |        |             |
5443:882 | DONE lbl | em 16 16 | 006807 |             | nt_execute                           
5443:883 | DONE dir | em 16 16 | 006807 | (2 bytes)   |         .byte 7, { NC }              
5443:883 | DONE dir | em 16 16 |        |             |                 07 01                    --  . .
5443:884 | DONE dir | em 16 16 | 006809 | (6 bytes)   |         .word nt_2swap, xt_execute, 0058fa 
5443:884 | DONE dir | em 16 16 |        |             |                 fa 67 f0 58 fa 58        --  . g . X . X
5443:885 | DONE dir | em 16 16 | 00680f | (7 bytes)   |         .byte 65, 78, 65, 63, 75, 74, 65 
5443:885 | DONE dir | em 16 16 |        |             |                 65 78 65 63 75 74 65     --  e x e c u t e
5443:886 | DONE wsp | em 16 16 |        |             |
5443:887 | DONE lbl | em 16 16 | 006816 |             | nt_here                              
5443:888 | DONE dir | em 16 16 | 006816 | (2 bytes)   |         .byte 4, { NC }              
5443:888 | DONE dir | em 16 16 |        |             |                 04 01                    --  . .
5443:889 | DONE dir | em 16 16 | 006818 | (6 bytes)   |         .word nt_execute, xt_here, 005a26 
5443:889 | DONE dir | em 16 16 |        |             |                 07 68 20 5a 26 5a        --  . h   Z & Z
5443:890 | DONE dir | em 16 16 | 00681e | (4 bytes)   |         .byte 68, 65, 72, 65         
5443:890 | DONE dir | em 16 16 |        |             |                 68 65 72 65              --  h e r e
5443:891 | DONE wsp | em 16 16 |        |             |
5443:892 | DONE lbl | em 16 16 | 006822 |             | nt_2drop                             
5443:893 | DONE dir | em 16 16 | 006822 | (2 bytes)   |         .byte 5, { NC }              
5443:893 | DONE dir | em 16 16 |        |             |                 05 01                    --  . .
5443:894 | DONE dir | em 16 16 | 006824 | (6 bytes)   |         .word nt_here, xt_2drop, 0053ec 
5443:894 | DONE dir | em 16 16 |        |             |                 16 68 e6 53 ec 53        --  . h . S . S
5443:895 | DONE dir | em 16 16 | 00682a | (5 bytes)   |         .byte 32, 64, 72, 6f, 70     
5443:895 | DONE dir | em 16 16 |        |             |                 32 64 72 6f 70           --  2 d r o p
5443:896 | DONE wsp | em 16 16 |        |             |
5443:897 | DONE lbl | em 16 16 | 00682f |             | nt_rfetch                            
5443:898 | DONE dir | em 16 16 | 00682f | (2 bytes)   |         .byte 2, 0                   we follow Gforth in making this not CO
5443:898 | DONE dir | em 16 16 |        |             |                 02 00                    --  . .
5443:899 | DONE dir | em 16 16 | 006831 | (6 bytes)   |         .word nt_2drop, xt_rfetch, 005cad 
5443:899 | DONE dir | em 16 16 |        |             |                 22 68 a5 5c ad 5c        --  " h . \ . \
5443:900 | DONE dir | em 16 16 | 006837 | (2 bytes)   |         .byte 72, 40                 
5443:900 | DONE dir | em 16 16 |        |             |                 72 40                    --  r @
5443:901 | DONE wsp | em 16 16 |        |             |
5443:902 | DONE lbl | em 16 16 | 006839 |             | nt_fromr                             
5443:903 | DONE dir | em 16 16 | 006839 | (2 bytes)   |         .byte 2, { CO + NC }         NC is special case
5443:903 | DONE dir | em 16 16 |        |             |                 02 05                    --  . .
5443:904 | DONE dir | em 16 16 | 00683b | (6 bytes)   |         .word nt_rfetch, xt_fromr, 005cb5 
5443:904 | DONE dir | em 16 16 |        |             |                 2f 68 ae 5c b5 5c        --  / h . \ . \
5443:905 | DONE dir | em 16 16 | 006841 | (2 bytes)   |         .byte 72, 3e                 
5443:905 | DONE dir | em 16 16 |        |             |                 72 3e                    --  r >
5443:906 | DONE wsp | em 16 16 |        |             |
5443:907 | DONE lbl | em 16 16 | 006843 |             | nt_tor                               
5443:908 | DONE dir | em 16 16 | 006843 | (2 bytes)   |         .byte 2, { CO + NC }         NC is special case
5443:908 | DONE dir | em 16 16 |        |             |                 02 05                    --  . .
5443:909 | DONE dir | em 16 16 | 006845 | (6 bytes)   |         .word nt_fromr, xt_tor, 0051c7 
5443:909 | DONE dir | em 16 16 |        |             |                 39 68 c0 51 c7 51        --  9 h . Q . Q
5443:910 | DONE dir | em 16 16 | 00684b | (2 bytes)   |         .byte 3e, 72                 
5443:910 | DONE dir | em 16 16 |        |             |                 3e 72                    --  > r
5443:911 | DONE wsp | em 16 16 |        |             |
5443:912 | DONE lbl | em 16 16 | 00684d |             | nt_digitq                            
5443:913 | DONE dir | em 16 16 | 00684d | (2 bytes)   |         .byte 6, { NC }              
5443:913 | DONE dir | em 16 16 |        |             |                 06 01                    --  . .
5443:914 | DONE dir | em 16 16 | 00684f | (6 bytes)   |         .word nt_tor, xt_digitq, 0057ec 
5443:914 | DONE dir | em 16 16 |        |             |                 43 68 b1 57 ec 57        --  C h . W . W
5443:915 | DONE dir | em 16 16 | 006855 | (6 bytes)   |         .byte 64, 69, 67, 69, 74, 3f 
5443:915 | DONE dir | em 16 16 |        |             |                 64 69 67 69 74 3f        --  d i g i t ?
5443:916 | DONE wsp | em 16 16 |        |             |
5443:917 | DONE lbl | em 16 16 | 00685b |             | nt_bounds                            
5443:918 | DONE dir | em 16 16 | 00685b | (2 bytes)   |         .byte 6, { NC }              
5443:918 | DONE dir | em 16 16 |        |             |                 06 01                    --  . .
5443:919 | DONE dir | em 16 16 | 00685d | (6 bytes)   |         .word nt_digitq, xt_bounds, 0055ae 
5443:919 | DONE dir | em 16 16 |        |             |                 4d 68 a5 55 ae 55        --  M h . U . U
5443:920 | DONE dir | em 16 16 | 006863 | (6 bytes)   |         .byte 62, 6f, 75, 6e, 64, 73 
5443:920 | DONE dir | em 16 16 |        |             |                 62 6f 75 6e 64 73        --  b o u n d s
5443:921 | DONE wsp | em 16 16 |        |             |
5443:922 | DONE lbl | em 16 16 | 006869 |             | nt_over                              
5443:923 | DONE dir | em 16 16 | 006869 | (2 bytes)   |         .byte 4, { NC }              
5443:923 | DONE dir | em 16 16 |        |             |                 04 01                    --  . .
5443:924 | DONE dir | em 16 16 | 00686b | (6 bytes)   |         .word nt_bounds, xt_over, 005bd5 
5443:924 | DONE dir | em 16 16 |        |             |                 5b 68 cf 5b d5 5b        --  [ h . [ . [
5443:925 | DONE dir | em 16 16 | 006871 | (4 bytes)   |         .byte 6f, 76, 65, 72         
5443:925 | DONE dir | em 16 16 |        |             |                 6f 76 65 72              --  o v e r
5443:926 | DONE wsp | em 16 16 |        |             |
5443:927 | DONE lbl | em 16 16 | 006875 |             | nt_fetch                             
5443:928 | DONE dir | em 16 16 | 006875 | (2 bytes)   |         .byte 1, { NC }              
5443:928 | DONE dir | em 16 16 |        |             |                 01 01                    --  . .
5443:929 | DONE dir | em 16 16 | 006877 | (6 bytes)   |         .word nt_over, xt_fetch, 0052de 
5443:929 | DONE dir | em 16 16 |        |             |                 69 68 da 52 de 52        --  i h . R . R
5443:930 | DONE dir | em 16 16 | 00687d | (1 bytes)   |         .byte 40                     
5443:930 | DONE dir | em 16 16 |        |             |                 40                       --  @
5443:931 | DONE wsp | em 16 16 |        |             |
5443:932 | DONE lbl | em 16 16 | 00687e |             | nt_store                             
5443:933 | DONE dir | em 16 16 | 00687e | (2 bytes)   |         .byte 1, { NC }              
5443:933 | DONE dir | em 16 16 |        |             |                 01 01                    --  . .
5443:934 | DONE dir | em 16 16 | 006880 | (6 bytes)   |         .word nt_fetch, xt_store, 0052d9 
5443:934 | DONE dir | em 16 16 |        |             |                 75 68 ce 52 d9 52        --  u h . R . R
5443:935 | DONE dir | em 16 16 | 006886 | (1 bytes)   |         .byte 21                     
5443:935 | DONE dir | em 16 16 |        |             |                 21                       --  !
5443:936 | DONE wsp | em 16 16 |        |             |
5443:937 | DONE lbl | em 16 16 | 006887 |             | nt_swap                              
5443:938 | DONE dir | em 16 16 | 006887 | (2 bytes)   |         .byte 4, { NC }              
5443:938 | DONE dir | em 16 16 |        |             |                 04 01                    --  . .
5443:939 | DONE dir | em 16 16 | 006889 | (6 bytes)   |         .word nt_store, xt_swap, 005e46 
5443:939 | DONE dir | em 16 16 |        |             |                 7e 68 41 5e 46 5e        --  ~ h A ^ F ^
5443:940 | DONE dir | em 16 16 | 00688f | (4 bytes)   |         .byte 73, 77, 61, 70         
5443:940 | DONE dir | em 16 16 |        |             |                 73 77 61 70              --  s w a p
5443:941 | DONE wsp | em 16 16 |        |             |
5443:942 | DONE lbl | em 16 16 | 006893 |             | nt_dup                               
5443:943 | DONE dir | em 16 16 | 006893 | (2 bytes)   |         .byte 3, { NC }              
5443:943 | DONE dir | em 16 16 |        |             |                 03 01                    --  . .
5443:944 | DONE dir | em 16 16 | 006895 | (6 bytes)   |         .word nt_swap, xt_dup, 005893 
5443:944 | DONE dir | em 16 16 |        |             |                 87 68 8f 58 93 58        --  . h . X . X
5443:945 | DONE dir | em 16 16 | 00689b | (3 bytes)   |         .byte 64, 75, 70             
5443:945 | DONE dir | em 16 16 |        |             |                 64 75 70                 --  d u p
5443:946 | DONE wsp | em 16 16 |        |             |
5443:947 | DONE cmt | em 16 16 |        |             | ; DROP is always the first entry in dictionary
5443:948 | DONE lbl | em 16 16 | 00689e |             | nt_drop                              
5443:949 | DONE dir | em 16 16 | 00689e | (2 bytes)   |         .byte 4, { NC }              
5443:949 | DONE dir | em 16 16 |        |             |                 04 01                    --  . .
5443:950 | DONE dir | em 16 16 | 0068a0 | (6 bytes)   |         .word nt_dup, xt_drop, 005870 
5443:950 | DONE dir | em 16 16 |        |             |                 93 68 6c 58 70 58        --  . h l X p X
5443:951 | DONE dir | em 16 16 | 0068a6 | (4 bytes)   |         .byte 64, 72, 6f, 70         
5443:951 | DONE dir | em 16 16 |        |             |                 64 72 6f 70              --  d r o p
5443:952 | DONE wsp | em 16 16 |        |             |
5443:953 | DONE cmt | em 16 16 |        |             | ; END
5444:000 | DONE wsp | em 16 16 |        |             |
5445:000 | DONE cmt | em 16 16 |        |             | ; ===================================================================
5446:000 | DONE cmt | em 16 16 |        |             | ; CODE FIELD ROUTINES
5447:000 | DONE wsp | em 16 16 |        |             |
5448:000 | DONE cmt | em 16 16 |        |             | ; -------------------------------------------------------------------
5449:000 | DONE cmt | em 16 16 |        |             | ; DOCONST
5450:000 | DONE cmt | em 16 16 |        |             | ; Execute a constant: Push the data in the first two byte of the Data Field onto
5451:000 | DONE cmt | em 16 16 |        |             | ; the stack
5452:000 | DONE lbl | em 16 16 | 0068aa |             | doconst                              
5453:000 | DONE dir | em 16 16 |        |             |         .!a16                        
5454:000 | DONE dir | em 16 16 |        |             |         .!xy16                       
5455:000 | DONE ins | em 16 16 | 0068aa | ca          |                 dex                  make room on Data Stack
5456:000 | DONE ins | em 16 16 | 0068ab | ca          |                 dex                  
5457:000 | DONE ins | em 16 16 | 0068ac | 94 00       |                 sty.dx 00            
5458:000 | DONE wsp | em 16 16 |        |             |
5459:000 | DONE cmt | em 16 16 |        |             |                 ; The value we need is stored two bytes after the JSR return
5460:000 | DONE cmt | em 16 16 |        |             |                 ; address, which in turn is what is on top of the Return Stack
5461:000 | DONE ins | em 16 16 | 0068ae | 68          |                 pla                  get the return address
5462:000 | DONE ins | em 16 16 | 0068af | 85 1c       |                 sta.d 00001c         
5463:000 | DONE wsp | em 16 16 |        |             |
5464:000 | DONE cmt | em 16 16 |        |             |                 ; start Y as index off with 1 instead of zero because of 65816's
5465:000 | DONE cmt | em 16 16 |        |             |                 ; address handling
5466:000 | DONE ins | em 16 16 | 0068b1 | a0 01 00    |                 ldy.# 0001           
5467:000 | DONE ins | em 16 16 | 0068b4 | b1 1c       |                 lda.diy 00001c       LDA (TMP1),Y
5468:000 | DONE ins | em 16 16 | 0068b6 | a8          |                 tay                  
5469:000 | DONE wsp | em 16 16 |        |             |
5470:000 | DONE ins | em 16 16 | 0068b7 | 60          |                 rts                  takes us to original caller
5471:000 | DONE wsp | em 16 16 |        |             |
5472:000 | DONE wsp | em 16 16 |        |             |
5473:000 | DONE cmt | em 16 16 |        |             | ; -------------------------------------------------------------------
5474:000 | DONE cmt | em 16 16 |        |             | ; DODEFER
5475:000 | DONE cmt | em 16 16 |        |             | ; Execute a DEFER statement at runtime: Execute the address we find after the
5476:000 | DONE cmt | em 16 16 |        |             | ; caller in the Data Field
5477:000 | DONE lbl | em 16 16 | 0068b8 |             | dodefer                              
5478:000 | DONE cmt | em 16 16 |        |             |                 ; the xt we need is stored in the two bytes after the JSR return
5479:000 | DONE cmt | em 16 16 |        |             |                 ; address, which is what is on top of the Retun Stack. So all we
5480:000 | DONE cmt | em 16 16 |        |             |                 ; have to do is replace our return jump with what we find there
5481:000 | DONE ins | em 16 16 | 0068b8 | 68          |                 pla                  this is the address where we find the xt ...
5482:000 | DONE ins | em 16 16 | 0068b9 | 1a          |                 inc.a                ... except one byte later
5483:000 | DONE ins | em 16 16 | 0068ba | 85 1c       |                 sta.d 00001c         
5484:000 | DONE ins | em 16 16 | 0068bc | b2 1c       |                 lda.di 00001c        LDA (TMP1)
5485:000 | DONE ins | em 16 16 | 0068be | 3a          |                 dec.a                Now we need to move one byte back
5486:000 | DONE ins | em 16 16 | 0068bf | 48          |                 pha                  Return new address
5487:000 | DONE wsp | em 16 16 |        |             |
5488:000 | DONE ins | em 16 16 | 0068c0 | 60          |                 rts                  This is actually a jump to the new target
5489:000 | DONE wsp | em 16 16 |        |             |
5490:000 | DONE lbl | em 16 16 | 0068c1 |             | defer_error                          
5491:000 | DONE cmt | em 16 16 |        |             |                 ; if the defer has not been defined with an IS word, we land
5492:000 | DONE cmt | em 16 16 |        |             |                 ; here by default
5493:000 | DONE ins | em 16 16 | 0068c1 | a9 02 70    |                 lda.# 007002         
5494:000 | DONE ins | em 16 16 | 0068c4 | 4c 60 69    |                 jmp 006960           
5495:000 | DONE wsp | em 16 16 |        |             |
5496:000 | DONE wsp | em 16 16 |        |             |
5497:000 | DONE cmt | em 16 16 |        |             | ; -------------------------------------------------------------------
5498:000 | DONE cmt | em 16 16 |        |             | ; DODOES
5499:000 | DONE cmt | em 16 16 |        |             | ; Used in combination with DOES>'s runtime portion to actually do the work of
5500:000 | DONE cmt | em 16 16 |        |             | ; the new word. See DOES> and docs/create-does.txt for details. Uses tmp3
5501:000 | DONE lbl | em 16 16 | 0068c7 |             | dodoes                               
5502:000 | DONE cmt | em 16 16 |        |             |                 ; Assumes the address of the CFA of the original defining word
5503:000 | DONE cmt | em 16 16 |        |             |                 ; (say, CONSTANT) is on the top of the Return Stack. Save it for
5504:000 | DONE cmt | em 16 16 |        |             |                 ; a later jump, adding one byte because of the way the 65816
5505:000 | DONE cmt | em 16 16 |        |             |                 ; works
5506:000 | DONE ins | em 16 16 | 0068c7 | 68          |                 pla                  
5507:000 | DONE ins | em 16 16 | 0068c8 | 1a          |                 inc.a                
5508:000 | DONE ins | em 16 16 | 0068c9 | 85 20       |                 sta.d 000020         
5509:000 | DONE wsp | em 16 16 |        |             |
5510:000 | DONE cmt | em 16 16 |        |             |                 ; Next on the Return Stack should be the address of the PFA of
5511:000 | DONE cmt | em 16 16 |        |             |                 ; the calling defined word (say, the name of whatever constant we
5512:000 | DONE cmt | em 16 16 |        |             |                 ; just defined). Move this to the Data Stack, again adding one.
5513:000 | DONE ins | em 16 16 | 0068cb | ca          |                 dex                  
5514:000 | DONE ins | em 16 16 | 0068cc | ca          |                 dex                  
5515:000 | DONE ins | em 16 16 | 0068cd | 94 00       |                 sty.dx 00            
5516:000 | DONE wsp | em 16 16 |        |             |
5517:000 | DONE ins | em 16 16 | 0068cf | 7a          |                 ply                  
5518:000 | DONE ins | em 16 16 | 0068d0 | c8          |                 iny                  
5519:000 | DONE wsp | em 16 16 |        |             |
5520:000 | DONE cmt | em 16 16 |        |             |                 ; This leaves the return address from the original main routine
5521:000 | DONE cmt | em 16 16 |        |             |                 ; on top of the Return Stack. We leave that untouched and jump
5522:000 | DONE cmt | em 16 16 |        |             |                 ; to the special code of the defining word. It's RTS instruction
5523:000 | DONE cmt | em 16 16 |        |             |                 ; will take us back to the main routine
5524:000 | DONE ins | em 16 16 | 0068d1 | 6c 20 00    |                 jmp.i 000020         JMP (TMP3)
5525:000 | DONE wsp | em 16 16 |        |             |
5526:000 | DONE wsp | em 16 16 |        |             |
5527:000 | DONE cmt | em 16 16 |        |             | ; -------------------------------------------------------------------
5528:000 | DONE cmt | em 16 16 |        |             | ; DOVAR
5529:000 | DONE cmt | em 16 16 |        |             | ; Execute a variable: Push the address of the first bytes of the Data Field onto
5530:000 | DONE cmt | em 16 16 |        |             | ; the stack. This is called with JSR so we can pick up the address of the
5531:000 | DONE cmt | em 16 16 |        |             | ; calling variable off the 65816's Return Stack. The final RTS takes us to the
5532:000 | DONE cmt | em 16 16 |        |             | ; original caller of the routine that in turn called DOVAR. This is the default
5533:000 | DONE cmt | em 16 16 |        |             | ; routine installed with CREATE
5534:000 | DONE lbl | em 16 16 | 0068d4 |             | dovar                                
5535:000 | DONE dir | em 16 16 |        |             |         .!a16                        
5536:000 | DONE dir | em 16 16 |        |             |         .!xy16                       
5537:000 | DONE ins | em 16 16 | 0068d4 | ca          |                 dex                  make room on Data Stack
5538:000 | DONE ins | em 16 16 | 0068d5 | ca          |                 dex                  
5539:000 | DONE ins | em 16 16 | 0068d6 | 94 00       |                 sty.dx 00            
5540:000 | DONE wsp | em 16 16 |        |             |
5541:000 | DONE cmt | em 16 16 |        |             |                 ; The address we need is stored in the two bytes after the JSR
5542:000 | DONE cmt | em 16 16 |        |             |                 ; return address, which in turn is what is on top of the Return
5543:000 | DONE cmt | em 16 16 |        |             |                 ; Stack
5544:000 | DONE ins | em 16 16 | 0068d8 | 7a          |                 ply                  value is now TOS
5545:000 | DONE ins | em 16 16 | 0068d9 | c8          |                 iny                  add one because of 65816's address handling
5546:000 | DONE wsp | em 16 16 |        |             |
5547:000 | DONE ins | em 16 16 | 0068da | 60          |                 rts                  takes us to original caller
5548:000 | DONE wsp | em 16 16 |        |             |
5549:000 | DONE wsp | em 16 16 |        |             |
5550:000 | DONE cmt | em 16 16 |        |             | ; ===================================================================
5551:000 | DONE cmt | em 16 16 |        |             | ; LOW LEVEL HELPER FUNCTIONS
5552:000 | DONE wsp | em 16 16 |        |             |
5553:000 | DONE wsp | em 16 16 |        |             |
5554:000 | DONE cmt | em 16 16 |        |             | ; -------------------------------------------------------------------
5555:000 | DONE cmt | em 16 16 |        |             | ; INTERPRET
5556:000 | DONE cmt | em 16 16 |        |             | ; Core routine for interpreter called by EVALUATE and QUIT. We process one line
5557:000 | DONE cmt | em 16 16 |        |             | ; only. Assumes that address of name is in cib and length of whole input
5558:000 | DONE cmt | em 16 16 |        |             | ; string is in ciblen
5559:000 | DONE lbl | em 16 16 | 0068db |             | interpret                            
5560:000 | DONE lbl | em 16 16 | 0068db |             | interpret_loop                       
5561:000 | DONE dir | em 16 16 |        |             |         .!a16                        
5562:000 | DONE dir | em 16 16 |        |             |         .!xy16                       
5563:000 | DONE cmt | em 16 16 |        |             |                 ; Normally we would use PARSE here with the SPACE character as
5564:000 | DONE cmt | em 16 16 |        |             |                 ; a parameter (PARSE replaces WORD in modern Forths). However,
5565:000 | DONE cmt | em 16 16 |        |             |                 ; Gforth's PARSE-NAME makes more sense as it uses spaces as
5566:000 | DONE cmt | em 16 16 |        |             |                 ; delimiters per default and skips any leading spaces, which
5567:000 | DONE cmt | em 16 16 |        |             |                 ; PARSE doesn't
5568:000 | DONE ins | em 16 16 | 0068db | 20 ef 5b    |                 jsr 005bef           ( "string" -- addr u )
5569:000 | DONE wsp | em 16 16 |        |             |
5570:000 | DONE cmt | em 16 16 |        |             |                 ; If PARSE-NAME returns 0 (empty line), no characters were left
5571:000 | DONE cmt | em 16 16 |        |             |                 ; in the line and we need to go get a new line
5572:000 | DONE ins | em 16 16 | 0068de | 98          |                 tya                  force flag check
5573:000 | DONE ins | em 16 16 | 0068df | f0 52       |                 beq 006933           
5574:000 | DONE wsp | em 16 16 |        |             |
5575:000 | DONE cmt | em 16 16 |        |             |                 ; Go to FIND-NAME to see if this is a word we know. We have to
5576:000 | DONE cmt | em 16 16 |        |             |                 ; make a copy of the address in case it isn't a word we know and
5577:000 | DONE cmt | em 16 16 |        |             |                 ; we have to go see if it is a number
5578:000 | DONE ins | em 16 16 | 0068e1 | 20 ed 53    |                 jsr 0053ed           TODO convert this to assembler
5579:000 | DONE ins | em 16 16 | 0068e4 | 20 2b 59    |                 jsr 00592b           ( addr u -- nt | 0 )
5580:000 | DONE wsp | em 16 16 |        |             |
5581:000 | DONE cmt | em 16 16 |        |             |                 ; a zero signals that we didn't find a word in the Dictionary
5582:000 | DONE ins | em 16 16 | 0068e7 | 98          |                 tya                  
5583:000 | DONE ins | em 16 16 | 0068e8 | d0 15       |                 bne 0068ff           
5584:000 | DONE wsp | em 16 16 |        |             |
5585:000 | DONE cmt | em 16 16 |        |             |                 ; We didn't get any nt we know of, so let's see if this is
5586:000 | DONE cmt | em 16 16 |        |             |                 ; a number.
5587:000 | DONE ins | em 16 16 | 0068ea | 20 6c 58    |                 jsr 00586c           TODO convert this to assembler
5588:000 | DONE wsp | em 16 16 |        |             |
5589:000 | DONE wsp | em 16 16 |        |             |
5590:000 | DONE cmt | em 16 16 |        |             |                 ; If the number conversion doesn't work, NUMBER will do the
5591:000 | DONE cmt | em 16 16 |        |             |                 ; complaining for us
5592:000 | DONE ins | em 16 16 | 0068ed | 20 3c 5b    |                 jsr 005b3c           ( addr u -- u | d )
5593:000 | DONE wsp | em 16 16 |        |             |
5594:000 | DONE cmt | em 16 16 |        |             |                 ; If we're interpreting, we're done
5595:000 | DONE ins | em 16 16 | 0068f0 | a5 14       |                 lda.d 000014         
5596:000 | DONE ins | em 16 16 | 0068f2 | f0 e7       |                 beq 0068db           
5597:000 | DONE wsp | em 16 16 |        |             |
5598:000 | DONE cmt | em 16 16 |        |             |                 ; We're compiling, so there is a bit more work. Note this
5599:000 | DONE cmt | em 16 16 |        |             |                 ; doesn't work with double-cell numbers, only single-cell
5600:000 | DONE ins | em 16 16 | 0068f4 | f4 65 5a    |                 phe.# 005a65         LITERAL runtime
5601:000 | DONE ins | em 16 16 | 0068f7 | 20 3f 69    |                 jsr 00693f           
5602:000 | DONE wsp | em 16 16 |        |             |
5603:000 | DONE cmt | em 16 16 |        |             |                 ; compile our number
5604:000 | DONE cmt | em 16 16 |        |             |                 ; TODO convert this to assembler
5605:000 | DONE ins | em 16 16 | 0068fa | 20 45 52    |                 jsr 005245           
5606:000 | DONE wsp | em 16 16 |        |             |
5607:000 | DONE cmt | em 16 16 |        |             |                 ; That was so much fun, let's do it again!
5608:000 | DONE ins | em 16 16 | 0068fd | 80 dc       |                 bra 0068db           
5609:000 | DONE wsp | em 16 16 |        |             |
5610:000 | DONE lbl | em 16 16 | 0068ff |             | interpret_got_name_token             
5611:000 | DONE cmt | em 16 16 |        |             |                 ; We have a known word's nt as TOS. We're going to need its xt
5612:000 | DONE cmt | em 16 16 |        |             |                 ; though, which is four bytes father down.
5613:000 | DONE wsp | em 16 16 |        |             |
5614:000 | DONE cmt | em 16 16 |        |             |                 ; Arrive here with ( addr u nt ), so we NIP twice, which is
5615:000 | DONE cmt | em 16 16 |        |             |                 ; really fast if Y is TOS
5616:000 | DONE ins | em 16 16 | 0068ff | e8          |                 inx                  
5617:000 | DONE ins | em 16 16 | 006900 | e8          |                 inx                  
5618:000 | DONE ins | em 16 16 | 006901 | e8          |                 inx                  
5619:000 | DONE ins | em 16 16 | 006902 | e8          |                 inx                  
5620:000 | DONE wsp | em 16 16 |        |             |
5621:000 | DONE cmt | em 16 16 |        |             |                 ; This is a quicker
5622:000 | DONE cmt | em 16 16 |        |             |                 ; version of NAME>INT. But first, save a version of nt for
5623:000 | DONE cmt | em 16 16 |        |             |                 ; error handling and compilation stuff.
5624:000 | DONE ins | em 16 16 | 006903 | 84 1a       |                 sty.d 00001a         
5625:000 | DONE ins | em 16 16 | 006905 | c8          |                 iny                  
5626:000 | DONE ins | em 16 16 | 006906 | c8          |                 iny                  
5627:000 | DONE ins | em 16 16 | 006907 | c8          |                 iny                  
5628:000 | DONE ins | em 16 16 | 006908 | c8          |                 iny                  
5629:000 | DONE ins | em 16 16 | 006909 | b9 00 00    |                 lda.y 0000           LDA $0000,Y
5630:000 | DONE ins | em 16 16 | 00690c | a8          |                 tay                  xt is TOS
5631:000 | DONE wsp | em 16 16 |        |             |
5632:000 | DONE cmt | em 16 16 |        |             |                 ; See if we are in interpret or compile mode
5633:000 | DONE ins | em 16 16 | 00690d | a5 14       |                 lda.d 000014         
5634:000 | DONE ins | em 16 16 | 00690f | d0 14       |                 bne 006925           
5635:000 | DONE wsp | em 16 16 |        |             |
5636:000 | DONE cmt | em 16 16 |        |             |                 ; We are interpreting, so EXECUTE the xt that is TOS. First,
5637:000 | DONE cmt | em 16 16 |        |             |                 ; though, see if this isn't a compile-only word, which would be
5638:000 | DONE cmt | em 16 16 |        |             |                 ; illegal.
5639:000 | DONE ins | em 16 16 | 006911 | b2 1a       |                 lda.di 00001a        
5640:000 | DONE ins | em 16 16 | 006913 | eb          |                 xba                  flags are MSB
5641:000 | DONE ins | em 16 16 | 006914 | 29 04 00    |                 and.# CO             mask everything but Compile Only bit
5642:000 | DONE ins | em 16 16 | 006917 | f0 06       |                 beq 00691f           
5643:000 | DONE wsp | em 16 16 |        |             |
5644:000 | DONE cmt | em 16 16 |        |             |                 ; TODO see if we can print offending word first
5645:000 | DONE ins | em 16 16 | 006919 | a9 e1 6f    |                 lda.# 006fe1         
5646:000 | DONE ins | em 16 16 | 00691c | 4c 60 69    |                 jmp 006960           
5647:000 | DONE wsp | em 16 16 |        |             |
5648:000 | DONE lbl | em 16 16 | 00691f |             | interpret_interpret                  
5649:000 | DONE cmt | em 16 16 |        |             |                 ; We JSR to EXECUTE instead of calling the xt directly because
5650:000 | DONE cmt | em 16 16 |        |             |                 ; the RTS of the word we're executing will bring us back here,
5651:000 | DONE cmt | em 16 16 |        |             |                 ; skipping EXECUTE completely during RTS. If we were to execute
5652:000 | DONE cmt | em 16 16 |        |             |                 ; xt directly, we have to fool around with the Return Stack
5653:000 | DONE cmt | em 16 16 |        |             |                 ; instead, which is actually slightly slower
5654:000 | DONE ins | em 16 16 | 00691f | 20 f0 58    |                 jsr 0058f0           
5655:000 | DONE wsp | em 16 16 |        |             |
5656:000 | DONE cmt | em 16 16 |        |             |                 ; That's quite enough for this word, let's get the next one
5657:000 | DONE ins | em 16 16 | 006922 | 4c db 68    |                 jmp 0068db           
5658:000 | DONE wsp | em 16 16 |        |             |
5659:000 | DONE lbl | em 16 16 | 006925 |             | interpret_compile                    
5660:000 | DONE cmt | em 16 16 |        |             |                 ; We're compiling. However, we need to see if this is an
5661:000 | DONE cmt | em 16 16 |        |             |                 ; IMMEDIATE word, which would mean we execute it right now even
5662:000 | DONE cmt | em 16 16 |        |             |                 ; during compilation mode. Fortunately, we saved the nt so life
5663:000 | DONE cmt | em 16 16 |        |             |                 ; is easier
5664:000 | DONE ins | em 16 16 | 006925 | b2 1a       |                 lda.di 00001a        
5665:000 | DONE ins | em 16 16 | 006927 | eb          |                 xba                  flags are MSB
5666:000 | DONE ins | em 16 16 | 006928 | 29 02 00    |                 and.# IM             Mask all but IM bit
5667:000 | DONE ins | em 16 16 | 00692b | d0 f2       |                 bne 00691f           IMMEDIATE word, execute right now
5668:000 | DONE wsp | em 16 16 |        |             |
5669:000 | DONE cmt | em 16 16 |        |             |                 ; Compile the xt into the Dictionary with COMPILE,
5670:000 | DONE ins | em 16 16 | 00692d | 20 56 56    |                 jsr 005656           
5671:000 | DONE ins | em 16 16 | 006930 | 4c db 68    |                 jmp 0068db           
5672:000 | DONE wsp | em 16 16 |        |             |
5673:000 | DONE lbl | em 16 16 | 006933 |             | interpret_line_done                  
5674:000 | DONE cmt | em 16 16 |        |             |                 ; drop stuff from PARSE_NAME
5675:000 | DONE ins | em 16 16 | 006933 | b4 02       |                 ldy.dx 02            
5676:000 | DONE ins | em 16 16 | 006935 | e8          |                 inx                  
5677:000 | DONE ins | em 16 16 | 006936 | e8          |                 inx                  
5678:000 | DONE ins | em 16 16 | 006937 | e8          |                 inx                  
5679:000 | DONE ins | em 16 16 | 006938 | e8          |                 inx                  
5680:000 | DONE wsp | em 16 16 |        |             |
5681:000 | DONE ins | em 16 16 | 006939 | 60          |                 rts                  
5682:000 | DONE wsp | em 16 16 |        |             |
5683:000 | DONE cmt | em 16 16 |        |             | ; -------------------------------------------------------------------
5684:000 | DONE cmt | em 16 16 |        |             | ; COMPILE WORDS, JUMPS AND SUBROUTINE JUMPS INTO CODE
5685:000 | DONE cmt | em 16 16 |        |             | ; These three routines compile instructions such as "jsr xt_words" into a word
5686:000 | DONE cmt | em 16 16 |        |             | ; at compile time so they are available at run time. Use by pushing the word or
5687:000 | DONE cmt | em 16 16 |        |             | ; address to be compiled on the Return Stack with
5688:000 | DONE cmt | em 16 16 |        |             | ;
5689:000 | DONE cmt | em 16 16 |        |             | ;       phe.# <WORD>    ; PEA <WORD>
5690:000 | DONE cmt | em 16 16 |        |             | ;
5691:000 | DONE cmt | em 16 16 |        |             | ; Followed by a jump to which ever versions we need. Words that use this routine
5692:000 | DONE cmt | em 16 16 |        |             | ; may not be natively compiled. We use "cmpl" as not to confuse these routines
5693:000 | DONE cmt | em 16 16 |        |             | ; with the COMPILE, word. This routine uses tmptos. Always call this with
5694:000 | DONE cmt | em 16 16 |        |             | ; a subroutine jump, which means no combining JSR/RTS to JMP.
5695:000 | DONE cmt | em 16 16 |        |             | ; TODO see if we need to add a JSR.L variant at some point
5696:000 | DONE wsp | em 16 16 |        |             |
5697:000 | DONE dir | em 16 16 |        |             |         .!a16                        paranoid
5698:000 | DONE lbl | em 16 16 | 00693a |             | cmpl_word                            
5699:000 | DONE ins | em 16 16 | 00693a | a9 00 00    |                 lda.# 0000           zero value as a flag, compile word only
5700:000 | DONE ins | em 16 16 | 00693d | 80 08       |                 bra 006947           
5701:000 | DONE lbl | em 16 16 | 00693f |             | cmpl_subroutine                      
5702:000 | DONE ins | em 16 16 | 00693f | a9 20 00    |                 lda.# 0020           compile "JSR" opcode first
5703:000 | DONE ins | em 16 16 | 006942 | 80 03       |                 bra 006947           
5704:000 | DONE lbl | em 16 16 | 006944 |             | cmpl_jump                            
5705:000 | DONE ins | em 16 16 | 006944 | a9 4c 00    |                 lda.# 004c           compile "JMP", fall through to cmpl_common
5706:000 | DONE lbl | em 16 16 | 006947 |             | cmpl_common                          
5707:000 | DONE cmt | em 16 16 |        |             |                 ; we're going to need the Y register to get anything done
5708:000 | DONE ins | em 16 16 | 006947 | 84 24       |                 sty.d 000024         
5709:000 | DONE wsp | em 16 16 |        |             |
5710:000 | DONE ins | em 16 16 | 006949 | a8          |                 tay                  force flag check
5711:000 | DONE ins | em 16 16 | 00694a | f0 08       |                 beq 006954           came in through cmpl_word, just compile body
5712:000 | DONE wsp | em 16 16 |        |             |
5713:000 | DONE cmt | em 16 16 |        |             |                 ; A contains an opcode that must be compiled first. This is an
5714:000 | DONE cmt | em 16 16 |        |             |                 ; optimized version of C, ("c-comma")
5715:000 | DONE ins | em 16 16 | 00694c | e2 20       |                 sep 20               
5715:001 | DONE ctl | em  8 16 |        |             |         .!a8
5716:000 | DONE ins | em  8 16 | 00694e | 92 00       |                 sta.di 000000        STA (CP)
5717:000 | DONE ins | em  8 16 | 006950 | c2 20       |                 rep 20               
5717:001 | DONE ctl | em 16 16 |        |             |         .!a16
5718:000 | DONE ins | em 16 16 | 006952 | e6 00       |                 inc.d 000000         fall through to cmpl_body
5719:000 | DONE lbl | em 16 16 | 006954 |             | cmpl_body                            
5720:000 | DONE ins | em 16 16 | 006954 | 7a          |                 ply                  the return address we'll need later
5721:000 | DONE wsp | em 16 16 |        |             |
5722:000 | DONE ins | em 16 16 | 006955 | 68          |                 pla                  next value on stack is the word to compile
5723:000 | DONE ins | em 16 16 | 006956 | 92 00       |                 sta.di 000000        this is a quicker version of , ("comma")
5724:000 | DONE ins | em 16 16 | 006958 | e6 00       |                 inc.d 000000         
5725:000 | DONE ins | em 16 16 | 00695a | e6 00       |                 inc.d 000000         
5726:000 | DONE wsp | em 16 16 |        |             |
5727:000 | DONE ins | em 16 16 | 00695c | 5a          |                 phy                  make sure we can get back home
5728:000 | DONE wsp | em 16 16 |        |             |
5729:000 | DONE ins | em 16 16 | 00695d | a4 24       |                 ldy.d 000024         restore Data Stack
5730:000 | DONE wsp | em 16 16 |        |             |
5731:000 | DONE ins | em 16 16 | 00695f | 60          |                 rts                  
5732:000 | DONE wsp | em 16 16 |        |             |
5733:000 | DONE wsp | em 16 16 |        |             |
5734:000 | DONE cmt | em 16 16 |        |             | ; -------------------------------------------------------------------
5735:000 | DONE cmt | em 16 16 |        |             | ; FATAL ERROR
5736:000 | DONE cmt | em 16 16 |        |             | ; Take address of error string from A, print it and then call abort
5737:000 | DONE lbl | em 16 16 | 006960 |             | error                                
5738:000 | DONE ins | em 16 16 | 006960 | 20 66 69    |                 jsr 006966           
5739:000 | DONE ins | em 16 16 | 006963 | 4c b2 50    |                 jmp 0050b2           
5740:000 | DONE wsp | em 16 16 |        |             |
5741:000 | DONE cmt | em 16 16 |        |             | ; -------------------------------------------------------------------
5742:000 | DONE cmt | em 16 16 |        |             | ; Print a zero terminated string to the console, adding a CR character. Takes
5743:000 | DONE cmt | em 16 16 |        |             | ; the address of the string in 16-bit A register, calls put_chr.  A is
5744:000 | DONE cmt | em 16 16 |        |             | ; destroyed. We could probably figure out some way to use TYPE instead, but zero
5745:000 | DONE cmt | em 16 16 |        |             | ; terminated strings are easier for the 65816 to use.
5746:000 | DONE lbl | em 16 16 | 006966 |             | print_string                         
5747:000 | DONE dir | em 16 16 |        |             |         .!a16                        
5748:000 | DONE dir | em 16 16 |        |             |         .!xy16                       
5749:000 | DONE cmt | em 16 16 |        |             |                 ; don't use tmpdsp for X because we don't know if the user has
5750:000 | DONE cmt | em 16 16 |        |             |                 ; used it for something already
5751:000 | DONE ins | em 16 16 | 006966 | da          |                 phx                  
5752:000 | DONE ins | em 16 16 | 006967 | aa          |                 tax                  x16 contains address of string
5753:000 | DONE lbl | em 16 16 | 006968 |             | @                                    
5754:000 | DONE ins | em 16 16 | 006968 | e2 20       |                 sep 20               
5754:001 | DONE ctl | em  8 16 |        |             |         .!a8
5755:000 | DONE ins | em  8 16 | 00696a | bd 00 00    |                 lda.x 0000           LDA $0000,X
5756:000 | DONE ins | em  8 16 | 00696d | f0 06       |                 beq 006975           
5757:000 | DONE ins | em  8 16 | 00696f | 20 99 58    |                 jsr 005899           
5758:000 | DONE ins | em  8 16 | 006972 | e8          |                 inx                  
5759:000 | DONE ins | em  8 16 | 006973 | 80 f3       |                 bra 006968           
5760:000 | DONE wsp | em  8 16 |        |             |
5761:000 | DONE lbl | em  8 16 | 006975 |             | print_string_done                    
5762:000 | DONE ins | em  8 16 | 006975 | a9 0a       |                 lda.# AscLF          should be CR on some systems
5763:000 | DONE ins | em  8 16 | 006977 | 20 99 58    |                 jsr 005899           
5764:000 | DONE ins | em  8 16 | 00697a | c2 20       |                 rep 20               
5764:001 | DONE ctl | em 16 16 |        |             |         .!a16
5765:000 | DONE ins | em 16 16 | 00697c | fa          |                 plx                  
5766:000 | DONE ins | em 16 16 | 00697d | 60          |                 rts                  
5767:000 | DONE wsp | em 16 16 |        |             |
5768:000 | DONE wsp | em 16 16 |        |             |
5769:000 | DONE cmt | em 16 16 |        |             | ; -------------------------------------------------------------------
5770:000 | DONE cmt | em 16 16 |        |             | ; PRINT UNSIGNED NUMBER
5771:000 | DONE cmt | em 16 16 |        |             | ; Is the equivalent to Forth's 0 <# S# #> TYPE or U. without the SPACE at the
5772:000 | DONE cmt | em 16 16 |        |             | ; end. TODO convert this to more assembler for speed
5773:000 | DONE lbl | em 16 16 | 00697e |             | print_u                              
5774:000 | DONE ins | em 16 16 | 00697e | ca          |                 dex                  0
5775:000 | DONE ins | em 16 16 | 00697f | ca          |                 dex                  
5776:000 | DONE ins | em 16 16 | 006980 | 94 00       |                 sty.dx 00            
5777:000 | DONE ins | em 16 16 | 006982 | a0 00 00    |                 ldy.# 0000           
5778:000 | DONE wsp | em 16 16 |        |             |
5779:000 | DONE ins | em 16 16 | 006985 | 20 d6 5b    |                 jsr 005bd6           <#
5780:000 | DONE ins | em 16 16 | 006988 | 84 18       |                 sty.d 000018         
5781:000 | DONE ins | em 16 16 | 00698a | b4 00       |                 ldy.dx 00            
5782:000 | DONE ins | em 16 16 | 00698c | e8          |                 inx                  
5783:000 | DONE ins | em 16 16 | 00698d | e8          |                 inx                  
5784:000 | DONE wsp | em 16 16 |        |             |
5785:000 | DONE ins | em 16 16 | 00698e | 20 b6 52    |                 jsr 0052b6           #S
5786:000 | DONE ins | em 16 16 | 006991 | 20 a7 52    |                 jsr 0052a7           #>
5787:000 | DONE ins | em 16 16 | 006994 | 4c 62 5e    |                 jmp 005e62           TYPE - JSR/RTS
5788:000 | DONE wsp | em 16 16 |        |             |
5789:000 | DONE wsp | em 16 16 |        |             |
5790:000 | DONE cmt | em 16 16 |        |             | ; -------------------------------------------------------------------
5791:000 | DONE cmt | em 16 16 |        |             | ; CONVERT BYTE TO ASCII
5792:000 | DONE cmt | em 16 16 |        |             | ; Convert byte in A to two ASCII hex digits and print them. Calls
5793:000 | DONE cmt | em 16 16 |        |             | ; nibble_to_ascii. Assumes A is 8 bit.
5794:000 | DONE lbl | em 16 16 | 006997 |             | byte_to_ascii                        
5795:000 | DONE dir | em 16 16 |        |             |         .!a16                        
5796:000 | DONE ins | em 16 16 | 006997 | 48          |                 pha                  
5797:000 | DONE cmt | em 16 16 |        |             |                 ; convert high nibble first
5798:000 | DONE ins | em 16 16 | 006998 | 4a          |                 lsr.a                
5799:000 | DONE ins | em 16 16 | 006999 | 4a          |                 lsr.a                
5800:000 | DONE ins | em 16 16 | 00699a | 4a          |                 lsr.a                
5801:000 | DONE ins | em 16 16 | 00699b | 4a          |                 lsr.a                
5802:000 | DONE ins | em 16 16 | 00699c | 20 a0 69    |                 jsr 0069a0           
5803:000 | DONE wsp | em 16 16 |        |             |
5804:000 | DONE ins | em 16 16 | 00699f | 68          |                 pla                  
5805:000 | DONE wsp | em 16 16 |        |             |
5806:000 | DONE cmt | em 16 16 |        |             |                 ; fall thru to nibble_to_ascii
5807:000 | DONE wsp | em 16 16 |        |             |
5808:000 | DONE wsp | em 16 16 |        |             |
5809:000 | DONE cmt | em 16 16 |        |             | ; -------------------------------------------------------------------
5810:000 | DONE cmt | em 16 16 |        |             | ; CONVERT NIBBLE TO ASCII
5811:000 | DONE cmt | em 16 16 |        |             | ; Converts the lower nibble of a number in A and returns the ASCII character
5812:000 | DONE cmt | em 16 16 |        |             | ; number, then prints it. Assumes A is 8 bit
5813:000 | DONE lbl | em 16 16 | 0069a0 |             | nibble_to_ascii                      
5814:000 | DONE dir | em 16 16 |        |             |         .!a16                        
5815:000 | DONE ins | em 16 16 | 0069a0 | 29 0f 00    |                 and.# 000f           
5816:000 | DONE ins | em 16 16 | 0069a3 | 09 30 00    |                 ora.# 30             
5817:000 | DONE ins | em 16 16 | 0069a6 | c9 3a 00    |                 cmp.# 003a           '9' + 1
5818:000 | DONE ins | em 16 16 | 0069a9 | 90 03       |                 bcc 0069ae           
5819:000 | DONE ins | em 16 16 | 0069ab | 69 06 00    |                 adc.# 0006           
5820:000 | DONE lbl | em 16 16 | 0069ae |             | @                                    
5821:000 | DONE ins | em 16 16 | 0069ae | 20 99 58    |                 jsr 005899           
5822:000 | DONE wsp | em 16 16 |        |             |
5823:000 | DONE ins | em 16 16 | 0069b1 | 60          |                 rts                  
5824:000 | DONE wsp | em 16 16 |        |             |
5825:000 | DONE cmt | em 16 16 |        |             | ; ===================================================================
5826:000 | DONE cmt | em 16 16 |        |             | ; HIGH-LEVEL WORDS
5827:000 | DONE wsp | em 16 16 |        |             |
5828:000 | DONE cmt | em 16 16 |        |             | ; These are executed during start up. Remember that we have to put a space at
5829:000 | DONE cmt | em 16 16 |        |             | ; the end of the line if there is another line with code following it. No zero
5830:000 | DONE cmt | em 16 16 |        |             | ; or CR/LF is required
5831:000 | DONE lbl | em 16 16 | 0069b2 |             | hi-start                             
5832:000 | DONE cmt | em 16 16 |        |             |         ; Output and comment words
5833:000 | DONE dir | em 16 16 | 0069b2 | (37 bytes)  |         .byte 3a, 20, 28, 20, 5b, 63, 68, 61, 72, 5d, 20, 29, 20, (...) 
5833:000 | DONE dir | em 16 16 |        |             |                 3a 20 28 20 5b 63 68 61  --  :   (   [ c h a
5833:000 | DONE dir | em 16 16 |        |             |                 72 5d 20 29 20 70 61 72  --  r ]   )   p a r
5833:000 | DONE dir | em 16 16 |        |             |                 73 65 20 32 64 72 6f 70  --  s e   2 d r o p
5833:000 | DONE dir | em 16 16 |        |             |                 20 3b 20 69 6d 6d 65 64  --    ;   i m m e d
5833:000 | DONE dir | em 16 16 |        |             |                 69 61 74 65 20           --  i a t e  
5834:000 | DONE dir | em 16 16 | 0069d7 | (37 bytes)  |         .byte 3a, 20, 2e, 28, 20, 5b, 63, 68, 61, 72, 5d, 20, 29, (...) 
5834:000 | DONE dir | em 16 16 |        |             |                 3a 20 2e 28 20 5b 63 68  --  :   . (   [ c h
5834:000 | DONE dir | em 16 16 |        |             |                 61 72 5d 20 29 20 70 61  --  a r ]   )   p a
5834:000 | DONE dir | em 16 16 |        |             |                 72 73 65 20 74 79 70 65  --  r s e   t y p e
5834:000 | DONE dir | em 16 16 |        |             |                 20 3b 20 69 6d 6d 65 64  --    ;   i m m e d
5834:000 | DONE dir | em 16 16 |        |             |                 69 61 74 65 20           --  i a t e  
5835:000 | DONE wsp | em 16 16 |        |             |
5836:000 | DONE cmt | em 16 16 |        |             |         ; High flow control. Some of these could be realized with CS-ROLL and
5837:000 | DONE cmt | em 16 16 |        |             |         ; CS-PICK instead
5838:000 | DONE dir | em 16 16 | 0069fc | (56 bytes)  |         .byte 3a, 20, 69, 66, 20, 70, 6f, 73, 74, 70, 6f, 6e, 65, (...) 
5838:000 | DONE dir | em 16 16 |        |             |                 3a 20 69 66 20 70 6f 73  --  :   i f   p o s
5838:000 | DONE dir | em 16 16 |        |             |                 74 70 6f 6e 65 20 30 62  --  t p o n e   0 b
5838:000 | DONE dir | em 16 16 |        |             |                 72 61 6e 63 68 20 68 65  --  r a n c h   h e
5838:000 | DONE dir | em 16 16 |        |             |                 72 65 20 30 20 2c 20 3b  --  r e   0   ,   ;
5838:000 | DONE dir | em 16 16 |        |             |                 20 69 6d 6d 65 64 69 61  --    i m m e d i a
5838:000 | DONE dir | em 16 16 |        |             |                 74 65 20 63 6f 6d 70 69  --  t e   c o m p i
5838:000 | DONE dir | em 16 16 |        |             |                 6c 65 2d 6f 6e 6c 79 20  --  l e - o n l y  
5838:000 | DONE dir | em 16 16 |        |             |                                          -- 
5839:000 | DONE dir | em 16 16 | 006a34 | (44 bytes)  |         .byte 3a, 20, 74, 68, 65, 6e, 20, 68, 65, 72, 65, 20, 73, (...) 
5839:000 | DONE dir | em 16 16 |        |             |                 3a 20 74 68 65 6e 20 68  --  :   t h e n   h
5839:000 | DONE dir | em 16 16 |        |             |                 65 72 65 20 73 77 61 70  --  e r e   s w a p
5839:000 | DONE dir | em 16 16 |        |             |                 20 21 20 3b 20 69 6d 6d  --    !   ;   i m m
5839:000 | DONE dir | em 16 16 |        |             |                 65 64 69 61 74 65 20 63  --  e d i a t e   c
5839:000 | DONE dir | em 16 16 |        |             |                 6f 6d 70 69 6c 65 2d 6f  --  o m p i l e - o
5839:000 | DONE dir | em 16 16 |        |             |                 6e 6c 79 20              --  n l y  
5840:000 | DONE dir | em 16 16 | 006a60 | (68 bytes)  |         .byte 3a, 20, 65, 6c, 73, 65, 20, 70, 6f, 73, 74, 70, 6f, (...) 
5840:000 | DONE dir | em 16 16 |        |             |                 3a 20 65 6c 73 65 20 70  --  :   e l s e   p
5840:000 | DONE dir | em 16 16 |        |             |                 6f 73 74 70 6f 6e 65 20  --  o s t p o n e  
5840:000 | DONE dir | em 16 16 |        |             |                 62 72 61 6e 63 68 20 68  --  b r a n c h   h
5840:000 | DONE dir | em 16 16 |        |             |                 65 72 65 20 30 20 2c 20  --  e r e   0   ,  
5840:000 | DONE dir | em 16 16 |        |             |                 68 65 72 65 20 72 6f 74  --  h e r e   r o t
5840:000 | DONE dir | em 16 16 |        |             |                 20 21 20 3b 20 69 6d 6d  --    !   ;   i m m
5840:000 | DONE dir | em 16 16 |        |             |                 65 64 69 61 74 65 20 63  --  e d i a t e   c
5840:000 | DONE dir | em 16 16 |        |             |                 6f 6d 70 69 6c 65 2d 6f  --  o m p i l e - o
5840:000 | DONE dir | em 16 16 |        |             |                 6e 6c 79 20              --  n l y  
5841:000 | DONE dir | em 16 16 | 006aa4 | (61 bytes)  |         .byte 3a, 20, 72, 65, 70, 65, 61, 74, 20, 70, 6f, 73, 74, (...) 
5841:000 | DONE dir | em 16 16 |        |             |                 3a 20 72 65 70 65 61 74  --  :   r e p e a t
5841:000 | DONE dir | em 16 16 |        |             |                 20 70 6f 73 74 70 6f 6e  --    p o s t p o n
5841:000 | DONE dir | em 16 16 |        |             |                 65 20 61 67 61 69 6e 20  --  e   a g a i n  
5841:000 | DONE dir | em 16 16 |        |             |                 68 65 72 65 20 73 77 61  --  h e r e   s w a
5841:000 | DONE dir | em 16 16 |        |             |                 70 20 21 20 3b 20 69 6d  --  p   !   ;   i m
5841:000 | DONE dir | em 16 16 |        |             |                 6d 65 64 69 61 74 65 20  --  m e d i a t e  
5841:000 | DONE dir | em 16 16 |        |             |                 63 6f 6d 70 69 6c 65 2d  --  c o m p i l e -
5841:000 | DONE dir | em 16 16 |        |             |                 6f 6e 6c 79 20           --  o n l y  
5842:000 | DONE dir | em 16 16 | 006ae1 | (52 bytes)  |         .byte 3a, 20, 75, 6e, 74, 69, 6c, 20, 70, 6f, 73, 74, 70, (...) 
5842:000 | DONE dir | em 16 16 |        |             |                 3a 20 75 6e 74 69 6c 20  --  :   u n t i l  
5842:000 | DONE dir | em 16 16 |        |             |                 70 6f 73 74 70 6f 6e 65  --  p o s t p o n e
5842:000 | DONE dir | em 16 16 |        |             |                 20 30 62 72 61 6e 63 68  --    0 b r a n c h
5842:000 | DONE dir | em 16 16 |        |             |                 20 2c 20 3b 20 69 6d 6d  --    ,   ;   i m m
5842:000 | DONE dir | em 16 16 |        |             |                 65 64 69 61 74 65 20 63  --  e d i a t e   c
5842:000 | DONE dir | em 16 16 |        |             |                 6f 6d 70 69 6c 65 2d 6f  --  o m p i l e - o
5842:000 | DONE dir | em 16 16 |        |             |                 6e 6c 79 20              --  n l y  
5843:000 | DONE dir | em 16 16 | 006b15 | (64 bytes)  |         .byte 3a, 20, 77, 68, 69, 6c, 65, 20, 70, 6f, 73, 74, 70, (...) 
5843:000 | DONE dir | em 16 16 |        |             |                 3a 20 77 68 69 6c 65 20  --  :   w h i l e  
5843:000 | DONE dir | em 16 16 |        |             |                 70 6f 73 74 70 6f 6e 65  --  p o s t p o n e
5843:000 | DONE dir | em 16 16 |        |             |                 20 30 62 72 61 6e 63 68  --    0 b r a n c h
5843:000 | DONE dir | em 16 16 |        |             |                 20 68 65 72 65 20 30 20  --    h e r e   0  
5843:000 | DONE dir | em 16 16 |        |             |                 2c 20 73 77 61 70 20 3b  --  ,   s w a p   ;
5843:000 | DONE dir | em 16 16 |        |             |                 20 69 6d 6d 65 64 69 61  --    i m m e d i a
5843:000 | DONE dir | em 16 16 |        |             |                 74 65 20 63 6f 6d 70 69  --  t e   c o m p i
5843:000 | DONE dir | em 16 16 |        |             |                 6c 65 2d 6f 6e 6c 79 20  --  l e - o n l y  
5843:000 | DONE dir | em 16 16 |        |             |                                          -- 
5844:000 | DONE wsp | em 16 16 |        |             |
5845:000 | DONE cmt | em 16 16 |        |             |         ; DEFER's friends. Code taken from ANSI Forth specifications. Many of
5846:000 | DONE cmt | em 16 16 |        |             |         ; these will be moved to assembler code in due course
5847:000 | DONE dir | em 16 16 | 006b55 | (19 bytes)  |         .byte 3a, 20, 64, 65, 66, 65, 72, 21, 20, 3e, 62, 6f, 64, (...) 
5847:000 | DONE dir | em 16 16 |        |             |                 3a 20 64 65 66 65 72 21  --  :   d e f e r !
5847:000 | DONE dir | em 16 16 |        |             |                 20 3e 62 6f 64 79 20 21  --    > b o d y   !
5847:000 | DONE dir | em 16 16 |        |             |                 20 3b 20                 --    ;  
5848:000 | DONE dir | em 16 16 | 006b68 | (19 bytes)  |         .byte 3a, 20, 64, 65, 66, 65, 72, 40, 20, 3e, 62, 6f, 64, (...) 
5848:000 | DONE dir | em 16 16 |        |             |                 3a 20 64 65 66 65 72 40  --  :   d e f e r @
5848:000 | DONE dir | em 16 16 |        |             |                 20 3e 62 6f 64 79 20 40  --    > b o d y   @
5848:000 | DONE dir | em 16 16 |        |             |                 20 3b 20                 --    ;  
5849:000 | DONE dir | em 16 16 | 006b7b | (76 bytes)  |         .byte 3a, 20, 69, 73, 20, 73, 74, 61, 74, 65, 20, 40, 20, (...) 
5849:000 | DONE dir | em 16 16 |        |             |                 3a 20 69 73 20 73 74 61  --  :   i s   s t a
5849:000 | DONE dir | em 16 16 |        |             |                 74 65 20 40 20 69 66 20  --  t e   @   i f  
5849:000 | DONE dir | em 16 16 |        |             |                 70 6f 73 74 70 6f 6e 65  --  p o s t p o n e
5849:000 | DONE dir | em 16 16 |        |             |                 20 5b 27 5d 20 70 6f 73  --    [ ' ]   p o s
5849:000 | DONE dir | em 16 16 |        |             |                 74 70 6f 6e 65 20 64 65  --  t p o n e   d e
5849:000 | DONE dir | em 16 16 |        |             |                 66 65 72 21 20 65 6c 73  --  f e r !   e l s
5849:000 | DONE dir | em 16 16 |        |             |                 65 20 27 20 64 65 66 65  --  e   '   d e f e
5849:000 | DONE dir | em 16 16 |        |             |                 72 21 20 74 68 65 6e 20  --  r !   t h e n  
5849:000 | DONE dir | em 16 16 |        |             |                 3b 20 69 6d 6d 65 64 69  --  ;   i m m e d i
5849:000 | DONE dir | em 16 16 |        |             |                 61 74 65 20              --  a t e  
5850:000 | DONE dir | em 16 16 | 006bc7 | (83 bytes)  |         .byte 3a, 20, 61, 63, 74, 69, 6f, 6e, 2d, 6f, 66, 20, 73, (...) 
5850:000 | DONE dir | em 16 16 |        |             |                 3a 20 61 63 74 69 6f 6e  --  :   a c t i o n
5850:000 | DONE dir | em 16 16 |        |             |                 2d 6f 66 20 73 74 61 74  --  - o f   s t a t
5850:000 | DONE dir | em 16 16 |        |             |                 65 20 40 20 69 66 20 70  --  e   @   i f   p
5850:000 | DONE dir | em 16 16 |        |             |                 6f 73 74 70 6f 6e 65 20  --  o s t p o n e  
5850:000 | DONE dir | em 16 16 |        |             |                 5b 27 5d 20 70 6f 73 74  --  [ ' ]   p o s t
5850:000 | DONE dir | em 16 16 |        |             |                 70 6f 6e 65 20 64 65 66  --  p o n e   d e f
5850:000 | DONE dir | em 16 16 |        |             |                 65 72 40 20 65 6c 73 65  --  e r @   e l s e
5850:000 | DONE dir | em 16 16 |        |             |                 20 27 20 64 65 66 65 72  --    '   d e f e r
5850:000 | DONE dir | em 16 16 |        |             |                 40 20 74 68 65 6e 20 3b  --  @   t h e n   ;
5850:000 | DONE dir | em 16 16 |        |             |                 20 69 6d 6d 65 64 69 61  --    i m m e d i a
5850:000 | DONE dir | em 16 16 |        |             |                 74 65 20                 --  t e  
5851:000 | DONE wsp | em 16 16 |        |             |
5852:000 | DONE cmt | em 16 16 |        |             |         ; High level math definitions. The should be moved to actual 65816 code
5853:000 | DONE cmt | em 16 16 |        |             |         ; for speed at some point. Note we use SM/REM instead of FM/MOD for most
5854:000 | DONE cmt | em 16 16 |        |             |         ; stuff
5855:000 | DONE dir | em 16 16 | 006c1a | (33 bytes)  |         .byte 3a, 20, 2f, 20, 3e, 72, 20, 73, 3e, 64, 20, 72, 3e, (...) 
5855:000 | DONE dir | em 16 16 |        |             |                 3a 20 2f 20 3e 72 20 73  --  :   /   > r   s
5855:000 | DONE dir | em 16 16 |        |             |                 3e 64 20 72 3e 20 73 6d  --  > d   r >   s m
5855:000 | DONE dir | em 16 16 |        |             |                 2f 72 65 6d 20 73 77 61  --  / r e m   s w a
5855:000 | DONE dir | em 16 16 |        |             |                 70 20 64 72 6f 70 20 3b  --  p   d r o p   ;
5855:000 | DONE dir | em 16 16 |        |             |                 20                       --   
5856:000 | DONE dir | em 16 16 | 006c3b | (26 bytes)  |         .byte 3a, 20, 2f, 6d, 6f, 64, 20, 3e, 72, 20, 73, 3e, 64, (...) 
5856:000 | DONE dir | em 16 16 |        |             |                 3a 20 2f 6d 6f 64 20 3e  --  :   / m o d   >
5856:000 | DONE dir | em 16 16 |        |             |                 72 20 73 3e 64 20 72 3e  --  r   s > d   r >
5856:000 | DONE dir | em 16 16 |        |             |                 20 73 6d 2f 72 65 6d 20  --    s m / r e m  
5856:000 | DONE dir | em 16 16 |        |             |                 3b 20                    --  ;  
5857:000 | DONE dir | em 16 16 | 006c55 | (33 bytes)  |         .byte 3a, 20, 2a, 2f, 20, 3e, 72, 20, 6d, 2a, 20, 72, 3e, (...) 
5857:000 | DONE dir | em 16 16 |        |             |                 3a 20 2a 2f 20 3e 72 20  --  :   * /   > r  
5857:000 | DONE dir | em 16 16 |        |             |                 6d 2a 20 72 3e 20 73 6d  --  m *   r >   s m
5857:000 | DONE dir | em 16 16 |        |             |                 2f 72 65 6d 20 73 77 61  --  / r e m   s w a
5857:000 | DONE dir | em 16 16 |        |             |                 70 20 64 72 6f 70 20 3b  --  p   d r o p   ;
5857:000 | DONE dir | em 16 16 |        |             |                 20                       --   
5858:000 | DONE dir | em 16 16 | 006c76 | (26 bytes)  |         .byte 3a, 20, 2a, 2f, 6d, 6f, 64, 20, 3e, 72, 20, 6d, 2a, (...) 
5858:000 | DONE dir | em 16 16 |        |             |                 3a 20 2a 2f 6d 6f 64 20  --  :   * / m o d  
5858:000 | DONE dir | em 16 16 |        |             |                 3e 72 20 6d 2a 20 72 3e  --  > r   m *   r >
5858:000 | DONE dir | em 16 16 |        |             |                 20 73 6d 2f 72 65 6d 20  --    s m / r e m  
5858:000 | DONE dir | em 16 16 |        |             |                 3b 20                    --  ;  
5859:000 | DONE wsp | em 16 16 |        |             |
5860:000 | DONE cmt | em 16 16 |        |             |         ; Output definitions. Since these usually involve the user, and humans
5861:000 | DONE cmt | em 16 16 |        |             |         ; are slow, these can stay high-level for the moment. Based on
5862:000 | DONE cmt | em 16 16 |        |             |         ; https://github.com/philburk/pforth/blob/master/fth/numberio.fth
5863:000 | DONE cmt | em 16 16 |        |             |         ; . (DOT) and U. are hard-coded because there are used by other words
5864:000 | DONE dir | em 16 16 | 006c90 | (44 bytes)  |         .byte 3a, 20, 75, 2e, 72, 20, 3e, 72, 20, 30, 20, 3c, 23, (...) 
5864:000 | DONE dir | em 16 16 |        |             |                 3a 20 75 2e 72 20 3e 72  --  :   u . r   > r
5864:000 | DONE dir | em 16 16 |        |             |                 20 30 20 3c 23 20 23 73  --    0   < #   # s
5864:000 | DONE dir | em 16 16 |        |             |                 20 23 3e 20 72 3e 20 6f  --    # >   r >   o
5864:000 | DONE dir | em 16 16 |        |             |                 76 65 72 20 2d 20 73 70  --  v e r   -   s p
5864:000 | DONE dir | em 16 16 |        |             |                 61 63 65 73 20 74 79 70  --  a c e s   t y p
5864:000 | DONE dir | em 16 16 |        |             |                 65 20 3b 20              --  e   ;  
5865:000 | DONE dir | em 16 16 | 006cbc | (60 bytes)  |         .byte 3a, 20, 2e, 72, 20, 3e, 72, 20, 64, 75, 70, 20, 61, (...) 
5865:000 | DONE dir | em 16 16 |        |             |                 3a 20 2e 72 20 3e 72 20  --  :   . r   > r  
5865:000 | DONE dir | em 16 16 |        |             |                 64 75 70 20 61 62 73 20  --  d u p   a b s  
5865:000 | DONE dir | em 16 16 |        |             |                 30 20 3c 23 20 23 73 20  --  0   < #   # s  
5865:000 | DONE dir | em 16 16 |        |             |                 72 6f 74 20 73 69 67 6e  --  r o t   s i g n
5865:000 | DONE dir | em 16 16 |        |             |                 20 23 3e 20 72 3e 20 6f  --    # >   r >   o
5865:000 | DONE dir | em 16 16 |        |             |                 76 65 72 20 2d 20 73 70  --  v e r   -   s p
5865:000 | DONE dir | em 16 16 |        |             |                 61 63 65 73 20 74 79 70  --  a c e s   t y p
5865:000 | DONE dir | em 16 16 |        |             |                 65 20 3b 20              --  e   ;  
5866:000 | DONE dir | em 16 16 | 006cf8 | (28 bytes)  |         .byte 3a, 20, 75, 64, 2e, 20, 3c, 23, 20, 23, 73, 20, 23, (...) 
5866:000 | DONE dir | em 16 16 |        |             |                 3a 20 75 64 2e 20 3c 23  --  :   u d .   < #
5866:000 | DONE dir | em 16 16 |        |             |                 20 23 73 20 23 3e 20 74  --    # s   # >   t
5866:000 | DONE dir | em 16 16 |        |             |                 79 70 65 20 73 70 61 63  --  y p e   s p a c
5866:000 | DONE dir | em 16 16 |        |             |                 65 20 3b 20              --  e   ;  
5867:000 | DONE dir | em 16 16 | 006d14 | (43 bytes)  |         .byte 3a, 20, 75, 64, 2e, 72, 20, 3e, 72, 20, 3c, 23, 20, (...) 
5867:000 | DONE dir | em 16 16 |        |             |                 3a 20 75 64 2e 72 20 3e  --  :   u d . r   >
5867:000 | DONE dir | em 16 16 |        |             |                 72 20 3c 23 20 23 73 20  --  r   < #   # s  
5867:000 | DONE dir | em 16 16 |        |             |                 23 3e 20 72 3e 20 6f 76  --  # >   r >   o v
5867:000 | DONE dir | em 16 16 |        |             |                 65 72 20 2d 20 73 70 61  --  e r   -   s p a
5867:000 | DONE dir | em 16 16 |        |             |                 63 65 73 20 74 79 70 65  --  c e s   t y p e
5867:000 | DONE dir | em 16 16 |        |             |                 20 3b 20                 --    ;  
5868:000 | DONE dir | em 16 16 | 006d3f | (46 bytes)  |         .byte 3a, 20, 64, 2e, 20, 74, 75, 63, 6b, 20, 64, 61, 62, (...) 
5868:000 | DONE dir | em 16 16 |        |             |                 3a 20 64 2e 20 74 75 63  --  :   d .   t u c
5868:000 | DONE dir | em 16 16 |        |             |                 6b 20 64 61 62 73 20 3c  --  k   d a b s   <
5868:000 | DONE dir | em 16 16 |        |             |                 23 20 23 73 20 72 6f 74  --  #   # s   r o t
5868:000 | DONE dir | em 16 16 |        |             |                 20 73 69 67 6e 20 23 3e  --    s i g n   # >
5868:000 | DONE dir | em 16 16 |        |             |                 20 74 79 70 65 20 73 70  --    t y p e   s p
5868:000 | DONE dir | em 16 16 |        |             |                 61 63 65 20 3b 20        --  a c e   ;  
5869:000 | DONE dir | em 16 16 | 006d6d | (61 bytes)  |         .byte 3a, 20, 64, 2e, 72, 20, 3e, 72, 20, 74, 75, 63, 6b, (...) 
5869:000 | DONE dir | em 16 16 |        |             |                 3a 20 64 2e 72 20 3e 72  --  :   d . r   > r
5869:000 | DONE dir | em 16 16 |        |             |                 20 74 75 63 6b 20 64 61  --    t u c k   d a
5869:000 | DONE dir | em 16 16 |        |             |                 62 73 20 3c 23 20 23 73  --  b s   < #   # s
5869:000 | DONE dir | em 16 16 |        |             |                 20 72 6f 74 20 73 69 67  --    r o t   s i g
5869:000 | DONE dir | em 16 16 |        |             |                 6e 20 23 3e 20 72 3e 20  --  n   # >   r >  
5869:000 | DONE dir | em 16 16 |        |             |                 6f 76 65 72 20 2d 20 73  --  o v e r   -   s
5869:000 | DONE dir | em 16 16 |        |             |                 70 61 63 65 73 20 74 79  --  p a c e s   t y
5869:000 | DONE dir | em 16 16 |        |             |                 70 65 20 3b 20           --  p e   ;  
5870:000 | DONE wsp | em 16 16 |        |             |
5871:000 | DONE cmt | em 16 16 |        |             |         ; LOOP constructs. See discussion at
5872:000 | DONE cmt | em 16 16 |        |             | 	; https://blogs.msdn.microsoft.com/ashleyf/2011/02/06/loopty-do-i-loop/
5873:000 | DONE cmt | em 16 16 |        |             | 	; .byte ": do postpone (do) here ; immediate compile-only "
5874:000 | DONE cmt | em 16 16 |        |             | 	; .byte ": +loop postpone (+loop) , postpone unloop ; immediate compile-only "
5875:000 | DONE cmt | em 16 16 |        |             | 	; .byte ": loop postpone 1 postpone (+loop) , postpone unloop ; immediate compile-only "
5876:000 | DONE cmt | em 16 16 |        |             |         ; .byte ": leave postpone branch here swap 0 , ; immediate compile-only "
5877:000 | DONE wsp | em 16 16 |        |             |
5878:000 | DONE cmt | em 16 16 |        |             |         ; DUMP is a longish word we'll want to modify for a while until we are
5879:000 | DONE cmt | em 16 16 |        |             |         ; happy with the format
5880:000 | DONE cmt | em 16 16 |        |             |         ; .byte ": dump bounds ?do cr i 4 u.r space"
5881:000 | DONE cmt | em 16 16 |        |             | 	; .byte "16 0 do i j + c@ 0 <# # #s #> type space loop 16 +loop ;"
5882:000 | DONE wsp | em 16 16 |        |             |
5883:000 | DONE cmt | em 16 16 |        |             |         ; SEE is a longish word we'll want to modify for a while until we are
5884:000 | DONE cmt | em 16 16 |        |             |         ; happy with the format
5885:000 | DONE dir | em 16 16 | 006daa | (55 bytes)  |         .byte 3a, 20, 73, 65, 65, 20, 70, 61, 72, 73, 65, 2d, 6e, (...) 
5885:000 | DONE dir | em 16 16 |        |             |                 3a 20 73 65 65 20 70 61  --  :   s e e   p a
5885:000 | DONE dir | em 16 16 |        |             |                 72 73 65 2d 6e 61 6d 65  --  r s e - n a m e
5885:000 | DONE dir | em 16 16 |        |             |                 20 66 69 6e 64 2d 6e 61  --    f i n d - n a
5885:000 | DONE dir | em 16 16 |        |             |                 6d 65 20 64 75 70 20 30  --  m e   d u p   0
5885:000 | DONE dir | em 16 16 |        |             |                 3d 20 61 62 6f 72 74 22  --  =   a b o r t "
5885:000 | DONE dir | em 16 16 |        |             |                 20 4e 6f 20 73 75 63 68  --    N o   s u c h
5885:000 | DONE dir | em 16 16 |        |             |                 20 6e 61 6d 65 22 20     --    n a m e "  
5886:000 | DONE dir | em 16 16 | 006de1 | (38 bytes)  |         .byte 62, 61, 73, 65, 20, 40, 20, 3e, 72, 20, 68, 65, 78, (...) 
5886:000 | DONE dir | em 16 16 |        |             |                 62 61 73 65 20 40 20 3e  --  b a s e   @   >
5886:000 | DONE dir | em 16 16 |        |             |                 72 20 68 65 78 20 64 75  --  r   h e x   d u
5886:000 | DONE dir | em 16 16 |        |             |                 70 20 63 72 20 73 70 61  --  p   c r   s p a
5886:000 | DONE dir | em 16 16 |        |             |                 63 65 20 2e 22 20 6e 74  --  c e   . "   n t
5886:000 | DONE dir | em 16 16 |        |             |                 3a 20 22 20 2e 20        --  :   "   .  
5887:000 | DONE dir | em 16 16 | 006e07 | (27 bytes)  |         .byte 64, 75, 70, 20, 34, 20, 2b, 20, 40, 20, 73, 70, 61, (...) 
5887:000 | DONE dir | em 16 16 |        |             |                 64 75 70 20 34 20 2b 20  --  d u p   4   +  
5887:000 | DONE dir | em 16 16 |        |             |                 40 20 73 70 61 63 65 20  --  @   s p a c e  
5887:000 | DONE dir | em 16 16 |        |             |                 2e 22 20 78 74 3a 20 22  --  . "   x t :   "
5887:000 | DONE dir | em 16 16 |        |             |                 20 2e 20                 --    .  
5888:000 | DONE dir | em 16 16 | 006e22 | (37 bytes)  |         .byte 64, 75, 70, 20, 31, 2b, 20, 63, 40, 20, 31, 20, 61, (...) 
5888:000 | DONE dir | em 16 16 |        |             |                 64 75 70 20 31 2b 20 63  --  d u p   1 +   c
5888:000 | DONE dir | em 16 16 |        |             |                 40 20 31 20 61 6e 64 20  --  @   1   a n d  
5888:000 | DONE dir | em 16 16 |        |             |                 69 66 20 73 70 61 63 65  --  i f   s p a c e
5888:000 | DONE dir | em 16 16 |        |             |                 20 2e 22 20 4e 43 22 20  --    . "   N C "  
5888:000 | DONE dir | em 16 16 |        |             |                 74 68 65 6e 20           --  t h e n  
5889:000 | DONE dir | em 16 16 | 006e47 | (37 bytes)  |         .byte 64, 75, 70, 20, 31, 2b, 20, 63, 40, 20, 32, 20, 61, (...) 
5889:000 | DONE dir | em 16 16 |        |             |                 64 75 70 20 31 2b 20 63  --  d u p   1 +   c
5889:000 | DONE dir | em 16 16 |        |             |                 40 20 32 20 61 6e 64 20  --  @   2   a n d  
5889:000 | DONE dir | em 16 16 |        |             |                 69 66 20 73 70 61 63 65  --  i f   s p a c e
5889:000 | DONE dir | em 16 16 |        |             |                 20 2e 22 20 49 4d 22 20  --    . "   I M "  
5889:000 | DONE dir | em 16 16 |        |             |                 74 68 65 6e 20           --  t h e n  
5890:000 | DONE dir | em 16 16 | 006e6c | (37 bytes)  |         .byte 64, 75, 70, 20, 31, 2b, 20, 63, 40, 20, 34, 20, 61, (...) 
5890:000 | DONE dir | em 16 16 |        |             |                 64 75 70 20 31 2b 20 63  --  d u p   1 +   c
5890:000 | DONE dir | em 16 16 |        |             |                 40 20 34 20 61 6e 64 20  --  @   4   a n d  
5890:000 | DONE dir | em 16 16 |        |             |                 69 66 20 73 70 61 63 65  --  i f   s p a c e
5890:000 | DONE dir | em 16 16 |        |             |                 20 2e 22 20 43 4f 22 20  --    . "   C O "  
5890:000 | DONE dir | em 16 16 |        |             |                 74 68 65 6e 20           --  t h e n  
5891:000 | DONE dir | em 16 16 | 006e91 | (57 bytes)  |         .byte 64, 75, 70, 20, 63, 72, 20, 73, 70, 61, 63, 65, 20, (...) 
5891:000 | DONE dir | em 16 16 |        |             |                 64 75 70 20 63 72 20 73  --  d u p   c r   s
5891:000 | DONE dir | em 16 16 |        |             |                 70 61 63 65 20 2e 22 20  --  p a c e   . "  
5891:000 | DONE dir | em 16 16 |        |             |                 73 69 7a 65 20 28 64 65  --  s i z e   ( d e
5891:000 | DONE dir | em 16 16 |        |             |                 63 69 6d 61 6c 29 3a 20  --  c i m a l ) :  
5891:000 | DONE dir | em 16 16 |        |             |                 22 20 64 65 63 69 6d 61  --  "   d e c i m a
5891:000 | DONE dir | em 16 16 |        |             |                 6c 20 77 6f 72 64 73 69  --  l   w o r d s i
5891:000 | DONE dir | em 16 16 |        |             |                 7a 65 20 64 75 70 20 2e  --  z e   d u p   .
5891:000 | DONE dir | em 16 16 |        |             |                 20                       --   
5892:000 | DONE dir | em 16 16 | 006eca | (40 bytes)  |         .byte 73, 77, 61, 70, 20, 6e, 61, 6d, 65, 3e, 69, 6e, 74, (...) 
5892:000 | DONE dir | em 16 16 |        |             |                 73 77 61 70 20 6e 61 6d  --  s w a p   n a m
5892:000 | DONE dir | em 16 16 |        |             |                 65 3e 69 6e 74 20 73 77  --  e > i n t   s w
5892:000 | DONE dir | em 16 16 |        |             |                 61 70 20 68 65 78 20 64  --  a p   h e x   d
5892:000 | DONE dir | em 16 16 |        |             |                 75 6d 70 20 72 3e 20 62  --  u m p   r >   b
5892:000 | DONE dir | em 16 16 |        |             |                 61 73 65 20 21 20 3b 20  --  a s e   !   ;  
5892:000 | DONE dir | em 16 16 |        |             |                                          -- 
5893:000 | DONE wsp | em 16 16 |        |             |
5894:000 | DONE cmt | em 16 16 |        |             | ; ===================================================================
5895:000 | DONE cmt | em 16 16 |        |             | ; USER INCLUDES
5896:000 | DONE wsp | em 16 16 |        |             |
5897:000 | DONE cmt | em 16 16 |        |             | ; Include any Forth words defined by the user in USER.TASM
5898:000 | DONE wsp | em 16 16 |        |             |
5900:000 | DONE wsp | em 16 16 |        |             |
5901:000 | DONE cmt | em 16 16 |        |             | ; ===================================================================
5902:000 | DONE wsp | em 16 16 |        |             |
5903:000 | DONE cmt | em 16 16 |        |             |         ; Splash strings. We leave these as high-level words because they are
5904:000 | DONE cmt | em 16 16 |        |             |         ; generated at the end of the boot process and signal that the other
5905:000 | DONE cmt | em 16 16 |        |             |         ; high-level definitions worked (or at least didn't crash)
5906:000 | DONE dir | em 16 16 | 006ef2 | (35 bytes)  |         .byte 2e, 28, 20, 4c, 69, 61, 72, 61, 20, 46, 6f, 72, 74, (...) 
5906:000 | DONE dir | em 16 16 |        |             |                 2e 28 20 4c 69 61 72 61  --  . (   L i a r a
5906:000 | DONE dir | em 16 16 |        |             |                 20 46 6f 72 74 68 20 66  --    F o r t h   f
5906:000 | DONE dir | em 16 16 |        |             |                 6f 72 20 74 68 65 20 57  --  o r   t h e   W
5906:000 | DONE dir | em 16 16 |        |             |                 36 35 43 32 36 35 53 58  --  6 5 C 2 6 5 S X
5906:000 | DONE dir | em 16 16 |        |             |                 42 20 29                 --  B   )
5907:000 | DONE dir | em 16 16 | 006f15 | (39 bytes)  |         .byte 63, 72, 20, 2e, 28, 20, 56, 65, 72, 73, 69, 6f, 6e, (...) 
5907:000 | DONE dir | em 16 16 |        |             |                 63 72 20 2e 28 20 56 65  --  c r   . (   V e
5907:000 | DONE dir | em 16 16 |        |             |                 72 73 69 6f 6e 20 50 52  --  r s i o n   P R
5907:000 | DONE dir | em 16 16 |        |             |                 45 2d 41 4c 50 48 41 20  --  E - A L P H A  
5907:000 | DONE dir | em 16 16 |        |             |                 31 32 2e 20 4d 61 72 63  --  1 2 .   M a r c
5907:000 | DONE dir | em 16 16 |        |             |                 68 20 32 30 31 37 29     --  h   2 0 1 7 )
5908:000 | DONE dir | em 16 16 | 006f3c | (51 bytes)  |         .byte 63, 72, 20, 2e, 28, 20, 53, 63, 6f, 74, 20, 57, 2e, (...) 
5908:000 | DONE dir | em 16 16 |        |             |                 63 72 20 2e 28 20 53 63  --  c r   . (   S c
5908:000 | DONE dir | em 16 16 |        |             |                 6f 74 20 57 2e 20 53 74  --  o t   W .   S t
5908:000 | DONE dir | em 16 16 |        |             |                 65 76 65 6e 73 6f 6e 20  --  e v e n s o n  
5908:000 | DONE dir | em 16 16 |        |             |                 3c 73 63 6f 74 2e 73 74  --  < s c o t . s t
5908:000 | DONE dir | em 16 16 |        |             |                 65 76 65 6e 73 6f 6e 40  --  e v e n s o n @
5908:000 | DONE dir | em 16 16 |        |             |                 67 6d 61 69 6c 2e 63 6f  --  g m a i l . c o
5908:000 | DONE dir | em 16 16 |        |             |                 6d 3e 29                 --  m > )
5909:000 | DONE dir | em 16 16 | 006f6f | (52 bytes)  |         .byte 63, 72, 20, 2e, 28, 20, 4c, 69, 61, 72, 61, 20, 46, (...) 
5909:000 | DONE dir | em 16 16 |        |             |                 63 72 20 2e 28 20 4c 69  --  c r   . (   L i
5909:000 | DONE dir | em 16 16 |        |             |                 61 72 61 20 46 6f 72 74  --  a r a   F o r t
5909:000 | DONE dir | em 16 16 |        |             |                 68 20 63 6f 6d 65 73 20  --  h   c o m e s  
5909:000 | DONE dir | em 16 16 |        |             |                 77 69 74 68 20 61 62 73  --  w i t h   a b s
5909:000 | DONE dir | em 16 16 |        |             |                 6f 6c 75 74 65 6c 79 20  --  o l u t e l y  
5909:000 | DONE dir | em 16 16 |        |             |                 4e 4f 20 57 41 52 52 41  --  N O   W A R R A
5909:000 | DONE dir | em 16 16 |        |             |                 4e 54 59 29              --  N T Y )
5910:000 | DONE dir | em 16 16 | 006fa3 | (28 bytes)  |         .byte 63, 72, 20, 2e, 28, 20, 54, 79, 70, 65, 20, 27, 62, (...) 
5910:000 | DONE dir | em 16 16 |        |             |                 63 72 20 2e 28 20 54 79  --  c r   . (   T y
5910:000 | DONE dir | em 16 16 |        |             |                 70 65 20 27 62 79 65 27  --  p e   ' b y e '
5910:000 | DONE dir | em 16 16 |        |             |                 20 74 6f 20 65 78 69 74  --    t o   e x i t
5910:000 | DONE dir | em 16 16 |        |             |                 29 20 63 72              --  )   c r
5911:000 | DONE lbl | em 16 16 | 006fbf |             | hi-end                               
5912:000 | DONE wsp | em 16 16 |        |             |
5913:000 | DONE wsp | em 16 16 |        |             |
5914:000 | DONE cmt | em 16 16 |        |             | ; ===================================================================
5915:000 | DONE cmt | em 16 16 |        |             | ; BOTTOM INCLUDES
5916:000 | DONE wsp | em 16 16 |        |             |
5917:000 | DONE cmt | em 16 16 |        |             | ; List of Strings for Liara Forth for the W65C265SXB
5917:001 | DONE cmt | em 16 16 |        |             | ; Scot W. Stevenson <scot.stevenson@gmail.com>
5917:002 | DONE cmt | em 16 16 |        |             | ; First version: 01. Apr 2016
5917:003 | DONE cmt | em 16 16 |        |             | ; This version:  11. Mar 2017
5917:004 | DONE wsp | em 16 16 |        |             |
5917:005 | DONE cmt | em 16 16 |        |             | ; This file is included by liaraforth.tasm
5917:006 | DONE wsp | em 16 16 |        |             |
5917:007 | DONE cmt | em 16 16 |        |             | ; ===================================================================
5917:008 | DONE cmt | em 16 16 |        |             | ; GENERAL
5917:009 | DONE wsp | em 16 16 |        |             |
5917:010 | DONE cmt | em 16 16 |        |             | ; All general strings must be zero-terminated, names start with "s_"
5917:011 | DONE wsp | em 16 16 |        |             |
5917:012 | DONE lbl | em 16 16 | 006fbf |             | s_ok                                 
5917:013 | DONE dir | em 16 16 | 006fbf | (4 bytes)   |         .byte 20, 6f, 6b, 0          note space at beginning
5917:013 | DONE dir | em 16 16 |        |             |                 20 6f 6b 00              --    o k .
5917:014 | DONE lbl | em 16 16 | 006fc3 |             | s_compiled                           
5917:015 | DONE dir | em 16 16 | 006fc3 | (10 bytes)  |         .byte 20, 63, 6f, 6d, 70, 69, 6c, 65, 64, 0 
5917:015 | DONE dir | em 16 16 |        |             |                 20 63 6f 6d 70 69 6c 65  --    c o m p i l e
5917:015 | DONE dir | em 16 16 |        |             |                 64 00                    --  d .
5917:016 | DONE wsp | em 16 16 |        |             |
5917:017 | DONE wsp | em 16 16 |        |             |
5917:018 | DONE cmt | em 16 16 |        |             | ; ===================================================================
5917:019 | DONE cmt | em 16 16 |        |             | ; ERROR STRINGS
5917:020 | DONE wsp | em 16 16 |        |             |
5917:021 | DONE cmt | em 16 16 |        |             | ; All error strings must be zero-terminated, names start with "es_"
5917:022 | DONE wsp | em 16 16 |        |             |
5917:023 | DONE lbl | em 16 16 | 006fcd |             | es_allot                             
5917:024 | DONE dir | em 16 16 | 006fcd | (20 bytes)  |         .byte 41, 4c, 4c, 4f, 54, 20, 6f, 75, 74, 20, 6f, 66, 20, (...) 
5917:024 | DONE dir | em 16 16 |        |             |                 41 4c 4c 4f 54 20 6f 75  --  A L L O T   o u
5917:024 | DONE dir | em 16 16 |        |             |                 74 20 6f 66 20 62 6f 75  --  t   o f   b o u
5917:024 | DONE dir | em 16 16 |        |             |                 6e 64 73 00              --  n d s .
5917:025 | DONE lbl | em 16 16 | 006fe1 |             | es_componly                          
5917:026 | DONE dir | em 16 16 | 006fe1 | (33 bytes)  |         .byte 49, 6e, 74, 65, 72, 70, 72, 65, 74, 69, 6e, 67, 20, (...) 
5917:026 | DONE dir | em 16 16 |        |             |                 49 6e 74 65 72 70 72 65  --  I n t e r p r e
5917:026 | DONE dir | em 16 16 |        |             |                 74 69 6e 67 20 61 20 63  --  t i n g   a   c
5917:026 | DONE dir | em 16 16 |        |             |                 6f 6d 70 69 6c 65 2d 6f  --  o m p i l e - o
5917:026 | DONE dir | em 16 16 |        |             |                 6e 6c 79 20 77 6f 72 64  --  n l y   w o r d
5917:026 | DONE dir | em 16 16 |        |             |                 00                       --  .
5917:027 | DONE lbl | em 16 16 | 007002 |             | es_defer                             
5917:028 | DONE dir | em 16 16 | 007002 | (29 bytes)  |         .byte 44, 45, 46, 45, 52, 65, 64, 20, 77, 6f, 72, 64, 20, (...) 
5917:028 | DONE dir | em 16 16 |        |             |                 44 45 46 45 52 65 64 20  --  D E F E R e d  
5917:028 | DONE dir | em 16 16 |        |             |                 77 6f 72 64 20 6e 6f 74  --  w o r d   n o t
5917:028 | DONE dir | em 16 16 |        |             |                 20 64 65 66 69 6e 65 64  --    d e f i n e d
5917:028 | DONE dir | em 16 16 |        |             |                 20 79 65 74 00           --    y e t .
5917:029 | DONE lbl | em 16 16 | 00701f |             | es_divzero                           
5917:030 | DONE dir | em 16 16 | 00701f | (17 bytes)  |         .byte 44, 69, 76, 69, 73, 69, 6f, 6e, 20, 62, 79, 20, 7a, (...) 
5917:030 | DONE dir | em 16 16 |        |             |                 44 69 76 69 73 69 6f 6e  --  D i v i s i o n
5917:030 | DONE dir | em 16 16 |        |             |                 20 62 79 20 7a 65 72 6f  --    b y   z e r o
5917:030 | DONE dir | em 16 16 |        |             |                 00                       --  .
5917:031 | DONE lbl | em 16 16 | 007030 |             | es_error                             
5917:032 | DONE dir | em 16 16 | 007030 | (12 bytes)  |         .byte 3e, 3e, 3e, 45, 72, 72, 6f, 72, 3c, 3c, 3c, 0 
5917:032 | DONE dir | em 16 16 |        |             |                 3e 3e 3e 45 72 72 6f 72  --  > > > E r r o r
5917:032 | DONE dir | em 16 16 |        |             |                 3c 3c 3c 00              --  < < < .
5917:033 | DONE lbl | em 16 16 | 00703c |             | es_intonly                           
5917:034 | DONE dir | em 16 16 | 00703c | (22 bytes)  |         .byte 4e, 6f, 74, 20, 69, 6e, 20, 69, 6e, 74, 65, 72, 70, (...) 
5917:034 | DONE dir | em 16 16 |        |             |                 4e 6f 74 20 69 6e 20 69  --  N o t   i n   i
5917:034 | DONE dir | em 16 16 |        |             |                 6e 74 65 72 70 72 65 74  --  n t e r p r e t
5917:034 | DONE dir | em 16 16 |        |             |                 20 6d 6f 64 65 00        --    m o d e .
5917:035 | DONE lbl | em 16 16 | 007052 |             | es_noname                            
5917:036 | DONE dir | em 16 16 | 007052 | (16 bytes)  |         .byte 50, 61, 72, 73, 69, 6e, 67, 20, 66, 61, 69, 6c, 75, (...) 
5917:036 | DONE dir | em 16 16 |        |             |                 50 61 72 73 69 6e 67 20  --  P a r s i n g  
5917:036 | DONE dir | em 16 16 |        |             |                 66 61 69 6c 75 72 65 00  --  f a i l u r e .
5917:036 | DONE dir | em 16 16 |        |             |                                          -- 
5917:037 | DONE lbl | em 16 16 | 007062 |             | es_radix                             
5917:038 | DONE dir | em 16 16 | 007062 | (23 bytes)  |         .byte 44, 69, 67, 69, 74, 20, 6c, 61, 72, 67, 65, 72, 20, (...) 
5917:038 | DONE dir | em 16 16 |        |             |                 44 69 67 69 74 20 6c 61  --  D i g i t   l a
5917:038 | DONE dir | em 16 16 |        |             |                 72 67 65 72 20 74 68 61  --  r g e r   t h a
5917:038 | DONE dir | em 16 16 |        |             |                 6e 20 62 61 73 65 00     --  n   b a s e .
5917:039 | DONE lbl | em 16 16 | 007079 |             | es_refill1                           
5917:040 | DONE dir | em 16 16 | 007079 | (46 bytes)  |         .byte 51, 55, 49, 54, 20, 63, 6f, 75, 6c, 64, 20, 6e, 6f, (...) 
5917:040 | DONE dir | em 16 16 |        |             |                 51 55 49 54 20 63 6f 75  --  Q U I T   c o u
5917:040 | DONE dir | em 16 16 |        |             |                 6c 64 20 6e 6f 74 20 67  --  l d   n o t   g
5917:040 | DONE dir | em 16 16 |        |             |                 65 74 20 69 6e 70 75 74  --  e t   i n p u t
5917:040 | DONE dir | em 16 16 |        |             |                 20 28 52 45 46 49 4c 4c  --    ( R E F I L L
5917:040 | DONE dir | em 16 16 |        |             |                 20 72 65 74 75 72 6e 65  --    r e t u r n e
5917:040 | DONE dir | em 16 16 |        |             |                 64 20 2d 31 29 00        --  d   - 1 ) .
5917:041 | DONE lbl | em 16 16 | 0070a7 |             | es_refill2                           
5917:042 | DONE dir | em 16 16 | 0070a7 | (32 bytes)  |         .byte 49, 6c, 6c, 65, 67, 61, 6c, 20, 53, 4f, 55, 52, 43, (...) 
5917:042 | DONE dir | em 16 16 |        |             |                 49 6c 6c 65 67 61 6c 20  --  I l l e g a l  
5917:042 | DONE dir | em 16 16 |        |             |                 53 4f 55 52 43 45 2d 49  --  S O U R C E - I
5917:042 | DONE dir | em 16 16 |        |             |                 44 20 64 75 72 69 6e 67  --  D   d u r i n g
5917:042 | DONE dir | em 16 16 |        |             |                 20 52 45 46 49 4c 4c 00  --    R E F I L L .
5917:042 | DONE dir | em 16 16 |        |             |                                          -- 
5917:043 | DONE lbl | em 16 16 | 0070c7 |             | es_state                             
5917:044 | DONE dir | em 16 16 | 0070c7 | (24 bytes)  |         .byte 41, 6c, 72, 65, 61, 64, 79, 20, 69, 6e, 20, 63, 6f, (...) 
5917:044 | DONE dir | em 16 16 |        |             |                 41 6c 72 65 61 64 79 20  --  A l r e a d y  
5917:044 | DONE dir | em 16 16 |        |             |                 69 6e 20 63 6f 6d 70 69  --  i n   c o m p i
5917:044 | DONE dir | em 16 16 |        |             |                 6c 65 20 6d 6f 64 65 00  --  l e   m o d e .
5917:044 | DONE dir | em 16 16 |        |             |                                          -- 
5917:045 | DONE lbl | em 16 16 | 0070df |             | es_underflow                         
5917:046 | DONE dir | em 16 16 | 0070df | (16 bytes)  |         .byte 53, 74, 61, 63, 6b, 20, 75, 6e, 64, 65, 72, 66, 6c, (...) 
5917:046 | DONE dir | em 16 16 |        |             |                 53 74 61 63 6b 20 75 6e  --  S t a c k   u n
5917:046 | DONE dir | em 16 16 |        |             |                 64 65 72 66 6c 6f 77 00  --  d e r f l o w .
5917:046 | DONE dir | em 16 16 |        |             |                                          -- 
5917:047 | DONE lbl | em 16 16 | 0070ef |             | es_syntax                            
5917:048 | DONE dir | em 16 16 | 0070ef | (15 bytes)  |         .byte 55, 6e, 64, 65, 66, 69, 6e, 65, 64, 20, 77, 6f, 72, (...) 
5917:048 | DONE dir | em 16 16 |        |             |                 55 6e 64 65 66 69 6e 65  --  U n d e f i n e
5917:048 | DONE dir | em 16 16 |        |             |                 64 20 77 6f 72 64 00     --  d   w o r d .
5917:049 | DONE wsp | em 16 16 |        |             |
5917:050 | DONE wsp | em 16 16 |        |             |
5917:051 | DONE cmt | em 16 16 |        |             | ; ===================================================================
5917:052 | DONE cmt | em 16 16 |        |             | ; ANSI VT-100 SEQUENCES
5917:053 | DONE wsp | em 16 16 |        |             |
5917:054 | DONE lbl | em 16 16 | 0070fe |             | vt100_page                           
5917:055 | DONE dir | em 16 16 | 0070fe | (5 bytes)   |         .byte AscESC, 5b, 32, 4a, 0  clear screen
5917:055 | DONE dir | em 16 16 |        |             |                 1b 5b 32 4a 00           --  . [ 2 J .
5917:056 | DONE lbl | em 16 16 | 007103 |             | vt100_home                           
5917:057 | DONE dir | em 16 16 | 007103 | (4 bytes)   |         .byte AscESC, 5b, 48, 0      cursor home
5917:057 | DONE dir | em 16 16 |        |             |                 1b 5b 48 00              --  . [ H .
5917:058 | DONE wsp | em 16 16 |        |             |
5917:059 | DONE wsp | em 16 16 |        |             |
5917:060 | DONE cmt | em 16 16 |        |             | ; ===================================================================
5917:061 | DONE cmt | em 16 16 |        |             | ; TESTING STRINGS
5917:062 | DONE wsp | em 16 16 |        |             |
5917:063 | DONE cmt | em 16 16 |        |             | ; These strings are only used during testing and are removed as Liara Forth is
5917:064 | DONE cmt | em 16 16 |        |             | ; developed. All start with "tests_"
5917:065 | DONE wsp | em 16 16 |        |             |
5917:066 | DONE lbl | em 16 16 | 007107 |             | tests_prev_cmd                       
5917:067 | DONE dir | em 16 16 | 007107 | (19 bytes)  |         .byte 28, 70, 72, 65, 76, 69, 6f, 75, 73, 20, 63, 6f, 6d, (...) 
5917:067 | DONE dir | em 16 16 |        |             |                 28 70 72 65 76 69 6f 75  --  ( p r e v i o u
5917:067 | DONE dir | em 16 16 |        |             |                 73 20 63 6f 6d 6d 61 6e  --  s   c o m m a n
5917:067 | DONE dir | em 16 16 |        |             |                 64 29 00                 --  d ) .
5917:068 | DONE lbl | em 16 16 | 00711a |             | tests_next_cmd                       
5917:069 | DONE dir | em 16 16 | 00711a | (15 bytes)  |         .byte 28, 6e, 65, 78, 74, 20, 63, 6f, 6d, 6d, 61, 6e, 64, (...) 
5917:069 | DONE dir | em 16 16 |        |             |                 28 6e 65 78 74 20 63 6f  --  ( n e x t   c o
5917:069 | DONE dir | em 16 16 |        |             |                 6d 6d 61 6e 64 29 00     --  m m a n d ) .
5917:070 | DONE wsp | em 16 16 |        |             |
5917:071 | DONE wsp | em 16 16 |        |             |
5917:072 | DONE cmt | em 16 16 |        |             | ; ===================================================================
5917:073 | DONE cmt | em 16 16 |        |             | ; ALPHABET STRINGS
5917:074 | DONE wsp | em 16 16 |        |             |
5917:075 | DONE cmt | em 16 16 |        |             | ; Leave alphastr as the last entry in the source code to make it easier to
5917:076 | DONE cmt | em 16 16 |        |             | ; see where this section ends. This cannot be a zero-terminated string
5917:077 | DONE cmt | em 16 16 |        |             | ; TODO see if we need lower
5917:078 | DONE wsp | em 16 16 |        |             |
5917:079 | DONE lbl | em 16 16 | 007129 |             | abc_str_lower                        
5917:080 | DONE dir | em 16 16 | 007129 | (35 bytes)  |         .byte 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 61, 62, 63, (...) 
5917:080 | DONE dir | em 16 16 |        |             |                 30 31 32 33 34 35 36 37  --  0 1 2 3 4 5 6 7
5917:080 | DONE dir | em 16 16 |        |             |                 38 39 61 62 63 64 65 66  --  8 9 a b c d e f
5917:080 | DONE dir | em 16 16 |        |             |                 67 68 69 6a 6b 6c 6d 6e  --  g h i j k l m n
5917:080 | DONE dir | em 16 16 |        |             |                 6f 70 71 72 73 74 75 76  --  o p q r s t u v
5917:080 | DONE dir | em 16 16 |        |             |                 77 79 7a                 --  w y z
5917:081 | DONE lbl | em 16 16 | 00714c |             | abc_str_upper                        
5917:082 | DONE dir | em 16 16 | 00714c | (35 bytes)  |         .byte 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 41, 42, 43, (...) 
5917:082 | DONE dir | em 16 16 |        |             |                 30 31 32 33 34 35 36 37  --  0 1 2 3 4 5 6 7
5917:082 | DONE dir | em 16 16 |        |             |                 38 39 41 42 43 44 45 46  --  8 9 A B C D E F
5917:082 | DONE dir | em 16 16 |        |             |                 47 48 49 4a 4b 4c 4d 4e  --  G H I J K L M N
5917:082 | DONE dir | em 16 16 |        |             |                 4f 50 51 52 53 54 55 56  --  O P Q R S T U V
5917:082 | DONE dir | em 16 16 |        |             |                 57 59 5a                 --  W Y Z
5917:083 | DONE wsp | em 16 16 |        |             |
5918:000 | DONE wsp | em 16 16 |        |             |
5919:000 | DONE wsp | em 16 16 |        |             |
5920:000 | DONE cmt | em 16 16 |        |             | ; ===================================================================
5921:000 | DONE cmt | em 16 16 |        |             | ; END
5922:000 | DONE dir | em 16 16 |        |             |         .end                         

MACROS:
        (none)

SYMBOL TABLE:
- abc_str_lower               : 007129
- abc_str_upper               : 00714c
- abortq_done                 : 005478
- abortq_rt                   : 00546e
- accept_bs                   : 0054f4
- accept_eol                  : 0054ee
- accept_loop                 : 00549b
- accept_nonzero              : 005490
- adjust_z                    : 0056fd
- allot_done                  : 005552
- allot_error                 : 005541
- allot_minus                 : 005547
- allot_real_gone             : 005554
- ascbell                     : 000007
- ascbs                       : 000008
- asccc                       : 000003
- asccn                       : 00000e
- asccp                       : 000010
- asccr                       : 00000d
- ascdel                      : 00007f
- ascesc                      : 00001b
- asclf                       : 00000a
- ascsp                       : 000020
- base                        : 000016
- branch_rt                   : 0055b6
- brg_value                   : 00000b
- bsize                       : 000080
- buffer0                     : 000200
- buffer1                     : 000280
- byte_to_ascii               : 006997
- char_got_char               : 005603
- cib                         : 000008
- ciblen                      : 00000a
- cmpl_body                   : 006954
- cmpl_common                 : 006947
- cmpl_jump                   : 006944
- cmpl_subroutine             : 00693f
- cmpl_word                   : 00693a
- co                          : 000004
- code0                       : 005000
- compile_2r                  : 0056b5
- compile_as_code             : 005674
- compile_as_jump             : 0056cd
- compile_move                : 0056c1
- compile_not_nop             : 005697
- compile_r                   : 0056af
- cp                          : 000000
- cp-end                      : 004fff
- cp0                         : 000300
- create_got_name             : 005732
- defer_error                 : 0068c1
- doconst                     : 0068aa
- dodefer                     : 0068b8
- dodoes                      : 0068c7
- does_rt                     : 005856
- dots_done                   : 005241
- dots_loop                   : 00522e
- dots_not_empty              : 005229
- dovar                       : 0068d4
- dp                          : 000002
- dpage                       : 000000
- dq_case_done                : 0057ce
- dq_checkbase                : 0057d1
- dq_notdigit                 : 0057d8
- dq_success                  : 0057e3
- dsp0                        : 0000ff
- dtrailing_done              : 005358
- dtrailing_loop              : 00534f
- dump_done                   : 005888
- dump_loop                   : 005872
- emit_a                      : 005899
- equal_not                   : 005365
- erase_done                  : 0058b3
- erase_loop                  : 0058ac
- error                       : 006960
- es_allot                    : 006fcd
- es_componly                 : 006fe1
- es_defer                    : 007002
- es_divzero                  : 00701f
- es_error                    : 007030
- es_intonly                  : 00703c
- es_noname                   : 007052
- es_radix                    : 007062
- es_refill1                  : 007079
- es_refill2                  : 0070a7
- es_state                    : 0070c7
- es_syntax                   : 0070ef
- es_underflow                : 0070df
- execute_ip                  : 0058ed
- find-name_all_chars         : 005959
- find-name_char_nomatcnt_8   : 005955
- find-name_chars             : 00594a
- find-name_done              : 00597f
- find-name_failure_16        : 00597c
- find-name_loop              : 005935
- find-name_next_entry        : 00593e
- find-name_success           : 005976
- find_found                  : 005910
- find_imm                    : 005929
- fmmod_1                     : 0059a0
- fmmod_1_1                   : 0059a4
- fmmod_2                     : 0059d1
- fmmod_2_1                   : 0059d5
- fn                          : 000008
- get_chr                     : 005045
- get_chr_wait                : 005049
- greater_nip                 : 005134
- greater_no_ov               : 005131
- hashs_loop                  : 0052b6
- have_chr                    : 005057
- havekey                     : 000012
- hi-end                      : 006fbf
- hi-start                    : 0069b2
- hw_acsr0                    : 00df70
- hw_acsr1                    : 00df72
- hw_acsr2                    : 00df74
- hw_acsr3                    : 00df76
- hw_artd0                    : 00df71
- hw_artd1                    : 00df73
- hw_artd2                    : 00df75
- hw_artd3                    : 00df77
- hw_bcr                      : 00df40
- hw_eier                     : 00df47
- hw_eifr                     : 00df45
- hw_pcs7                     : 00df27
- hw_pd0                      : 00df00
- hw_pd1                      : 00df01
- hw_pd2                      : 00df02
- hw_pd3                      : 00df03
- hw_pd4                      : 00df20
- hw_pd5                      : 00df21
- hw_pd6                      : 00df22
- hw_pd7                      : 00df23
- hw_pdd0                     : 00df04
- hw_pdd1                     : 00df05
- hw_pdd2                     : 00df06
- hw_pdd3                     : 00df07
- hw_pdd4                     : 00df24
- hw_pdd5                     : 00df25
- hw_pdd6                     : 00df26
- hw_sscr                     : 00df41
- hw_t0ch                     : 00df61
- hw_t0cl                     : 00df60
- hw_t1ch                     : 00df63
- hw_t1cl                     : 00df62
- hw_t2ch                     : 00df65
- hw_t2cl                     : 00df64
- hw_t3ch                     : 00df67
- hw_t3cl                     : 00df66
- hw_t4ch                     : 00df69
- hw_t4cl                     : 00df68
- hw_t5ch                     : 00df6b
- hw_t5cl                     : 00df6a
- hw_t6ch                     : 00df6d
- hw_t6cl                     : 00df6c
- hw_t7ch                     : 00df6f
- hw_t7cl                     : 00df6e
- hw_tcr                      : 00df42
- hw_ter                      : 00df43
- hw_tier                     : 00df46
- hw_tifr                     : 00df44
- hw_uier                     : 00df49
- hw_uifr                     : 00df48
- im                          : 000002
- in_found                    : 005a17
- in_loop                     : 0059ff
- in_notfound                 : 005a11
- input                       : 000010
- insrc                       : 000006
- interpret                   : 0068db
- interpret_compile           : 006925
- interpret_got_name_token    : 0068ff
- interpret_interpret         : 00691f
- interpret_line_done         : 006933
- interpret_loop              : 0068db
- less_nip                    : 00510a
- less_no_ov                  : 005107
- literal_rt                  : 005a65
- lshift_done                 : 005a81
- lshift_loop                 : 005a7b
- max_drop                    : 005ade
- max_nip                     : 005ae0
- max_no_ov                   : 005adc
- min_drop                    : 005af1
- min_nip                     : 005af3
- min_no_ov                   : 005aef
- move_cmoveup                : 005b04
- mstar_abs_nos               : 005a92
- mstar_umstar                : 005a9c
- nc                          : 000001
- nc_limit                    : 000026
- nibble_to_ascii             : 0069a0
- not-equal_equal             : 005116
- nt_2drop                    : 006822
- nt_2dup                     : 00653f
- nt_2over                    : 0067ed
- nt_2swap                    : 0067fa
- nt_2variable                : 006146
- nt_abort                    : 00623e
- nt_abortq                   : 006230
- nt_abs                      : 00654b
- nt_accept                   : 006791
- nt_again                    : 0064ae
- nt_align                    : 00602e
- nt_aligned                  : 00601f
- nt_allot                    : 0064ea
- nt_and                      : 006636
- nt_at-xy                    : 00612e
- nt_backslash                : 0067aa
- nt_base                     : 006354
- nt_begin                    : 0064bb
- nt_bell                     : 0060c7
- nt_bl                       : 0062ef
- nt_bounds                   : 00685b
- nt_bracketchar              : 0063d7
- nt_brackettick              : 0063cc
- nt_branch                   : 0064a0
- nt_bye                      : 005ff0
- nt_c-comma                  : 006659
- nt_c-fetch                  : 006663
- nt_c-store                  : 00666d
- nt_cellplus                 : 0060e0
- nt_cells                    : 00639b
- nt_char                     : 006607
- nt_charplus                 : 0060ed
- nt_chars                    : 0060d3
- nt_cmove                    : 006216
- nt_cmoveup                  : 006208
- nt_cold                     : 005ffb
- nt_colon                    : 0064e1
- nt_comma                    : 006788
- nt_compile-only             : 00640a
- nt_compilecomma             : 0064c8
- nt_constant                 : 0065a0
- nt_count                    : 006223
- nt_cr                       : 00628d
- nt_create                   : 00651e
- nt_dabs                     : 006157
- nt_decimal                  : 0060fa
- nt_defer                    : 0064f7
- nt_depth                    : 00657c
- nt_digitq                   : 00684d
- nt_dminus                   : 00619e
- nt_dnegate                  : 006163
- nt_does                     : 006511
- nt_dot                      : 006340
- nt_dotquote                 : 0063a8
- nt_dots                     : 006314
- nt_dplus                    : 0061a8
- nt_drop                     : 00689e
- nt_dtos                     : 006172
- nt_dtrailing                : 006471
- nt_dump                     : 00605b
- nt_dup                      : 006893
- nt_emit                     : 006334
- nt_equal                    : 0066ec
- nt_erase                    : 0062a3
- nt_evaluate                 : 00638b
- nt_execute                  : 006807
- nt_false                    : 0066f5
- nt_fetch                    : 006875
- nt_fill                     : 006297
- nt_find                     : 006013
- nt_find-name                : 006746
- nt_fmmod                    : 0061b2
- nt_fromr                    : 006839
- nt_greater                  : 0066c6
- nt_hash                     : 0062dc
- nt_hashs                    : 0062c6
- nt_here                     : 006816
- nt_hex                      : 006109
- nt_hold                     : 0062ba
- nt_immediate                : 00641e
- nt_input                    : 006370
- nt_int-name                 : 00626d
- nt_invert                   : 0065f9
- nt_key                      : 00679f
- nt_latestnt                 : 006451
- nt_latestxt                 : 006461
- nt_leftbracket              : 006448
- nt_less                     : 0066cf
- nt_lessnumber               : 0062e5
- nt_literal                  : 0063e5
- nt_lshift                   : 006641
- nt_marker                   : 00609d
- nt_max                      : 0065e0
- nt_min                      : 0065d5
- nt_minus                    : 006681
- nt_move                     : 0065c9
- nt_mrot                     : 0067d6
- nt_mstar                    : 0061f3
- nt_name-int                 : 00627d
- nt_name-string              : 00652c
- nt_native-compile           : 0063f4
- nt_nc-limit                 : 006360
- nt_negate                   : 0065eb
- nt_nip                      : 0067cb
- nt_not-equal                : 0066e2
- nt_number                   : 00671d
- nt_numbermore               : 0062b0
- nt_one                      : 006734
- nt_one-minus                : 006693
- nt_one-plus                 : 00669d
- nt_or                       : 00662c
- nt_output                   : 00637d
- nt_over                     : 006869
- nt_pad                      : 006349
- nt_page                     : 006122
- nt_parse                    : 00624b
- nt_parse-name               : 006765
- nt_pdo                      : 006091
- nt_pick                     : 0060bb
- nt_plus                     : 00668a
- nt_plusstore                : 00664f
- nt_postpone                 : 00642f
- nt_pploop                   : 006075
- nt_pqdo                     : 006084
- nt_qdup                     : 0067b3
- nt_question                 : 006264
- nt_quit                     : 006258
- nt_refill                   : 006757
- nt_rfetch                   : 00682f
- nt_rightbracket             : 00643f
- nt_rot                      : 0067e2
- nt_rshift                   : 006613
- nt_semicolon                : 0064d8
- nt_sign                     : 0062d0
- nt_slashstring              : 006482
- nt_sliteral                 : 0063bc
- nt_smrem                    : 0061c0
- nt_source                   : 00656e
- nt_source-id                : 006777
- nt_space                    : 006307
- nt_spaces                   : 0062f9
- nt_squote                   : 0063b2
- nt_star                     : 0061ea
- nt_state                    : 006556
- nt_stod                     : 00617d
- nt_store                    : 00687e
- nt_swap                     : 006887
- nt_tick                     : 0065c0
- nt_to                       : 006589
- nt_to-in                    : 006563
- nt_tobody                   : 006504
- nt_tonumber                 : 00670e
- nt_tor                      : 006843
- nt_true                     : 006702
- nt_tuck                     : 0067bf
- nt_two                      : 00672b
- nt_two-star                 : 006677
- nt_twofromr                 : 006188
- nt_tworfetch                : 00613b
- nt_twotor                   : 006193
- nt_type                     : 00631e
- nt_udmod                    : 0061ce
- nt_udot                     : 00632a
- nt_ummod                    : 0061dc
- nt_umstar                   : 0061fd
- nt_unloop                   : 006067
- nt_unused                   : 006114
- nt_value                    : 006593
- nt_variable                 : 0065b0
- nt_word                     : 006007
- nt_words                    : 00604e
- nt_wordsize                 : 0060ab
- nt_wordsnsizes              : 00603b
- nt_xor                      : 006621
- nt_zbranch                  : 006491
- nt_zero                     : 00673d
- nt_zero-equal               : 0066d8
- nt_zero-less                : 0066bc
- nt_zero-more                : 0066b2
- nt_zero-notequal            : 0066a7
- number_dot                  : 005b54
- number_loop                 : 005b7b
- number_main                 : 005b6d
- number_ok                   : 005b87
- number_single               : 005baf
- output                      : 00000e
- padoffset                   : 0000ff
- parse-name_empty_line       : 005c01
- parse-name_found            : 005c15
- parse-name_loop             : 005bf4
- parse_found_delimiter       : 005c41
- parse_loop                  : 005c34
- parse_reached_eol           : 005c45
- pp_got_nt                   : 005c85
- pp_got_word                 : 005c7d
- pp_not_immediate            : 005c95
- pploop_jmp                  : 0052ec
- pqdo_done                   : 0052f7
- print_string                : 006966
- print_string_done           : 006975
- print_u                     : 00697e
- put_chr                     : 005034
- put_chr_wait                : 005039
- quit_compiled               : 0050f0
- quit_get_line               : 0050c5
- quit_ok                     : 0050e7
- quit_print                  : 0050f3
- quit_refill_successful      : 0050d3
- ram-end                     : 007fff
- ram-start                   : 000000
- refill_source_is_not_string : 005cd7
- refill_src_not_kbd          : 005cce
- reset_hardware              : 005000
- rshift_done                 : 005cf6
- rshift_loop                 : 005cf0
- s_compiled                  : 006fc3
- s_ok                        : 006fbf
- scratch                     : 000028
- sign_plus                   : 005d4a
- sl_loop                     : 005d6f
- sliteral_rt                 : 005d9a
- smrem_1                     : 005dea
- smrem_1_1                   : 005dee
- smrem_2                     : 005e05
- smrem_2_1                   : 005e09
- spaces_done                 : 005e2c
- squote_compile              : 005d2d
- stack                       : 000100
- stack0                      : 0001ff
- start                       : 005067
- state                       : 000014
- stod_pos                    : 005d3d
- tests_next_cmd              : 00711a
- tests_prev_cmd              : 007107
- tick_have_nt                : 005460
- tick_have_word              : 005454
- tmp1                        : 00001c
- tmp2                        : 00001e
- tmp3                        : 000020
- tmpbranch                   : 00001a
- tmpdsp                      : 000022
- tmptos                      : 000024
- tobody_have_cfa             : 005158
- tobody_nojsr                : 00515a
- tohold                      : 000018
- toin                        : 00000c
- tonumber_done               : 0051b3
- tonumber_loop               : 00516f
- tonumber_ok                 : 00517e
- type_done                   : 005e7c
- type_loop                   : 005e70
- ummod_complete              : 005f4e
- ummod_notzero               : 005f0f
- ummod_overflow              : 005f45
- ummod_shift                 : 005f27
- umstar_counter              : 005ede
- umstar_loop                 : 005ed0
- umstar_one_nos              : 005ef1
- umstar_one_tos              : 005eee
- umstar_two_common           : 005efd
- umstar_two_nos              : 005efc
- umstar_two_tos              : 005ef8
- umstar_zero                 : 005ee7
- user0                       : 000000
- vt100_home                  : 007103
- vt100_page                  : 0070fe
- words_common                : 005f9b
- words_loop                  : 005fa5
- words_nosizes               : 005fc2
- workword                    : 000004
- xt_2drop                    : 0053e6
- xt_2dup                     : 0053ed
- xt_2over                    : 0053f8
- xt_2swap                    : 005424
- xt_2variable                : 005435
- xt_abort                    : 0050b2
- xt_abortq                   : 005464
- xt_abs                      : 005481
- xt_accept                   : 00548a
- xt_again                    : 005516
- xt_align                    : 00552c
- xt_aligned                  : 00552e
- xt_allot                    : 005530
- xt_and                      : 005559
- xt_at-xy                    : 005560
- xt_backslash                : 005324
- xt_base                     : 005588
- xt_begin                    : 005596
- xt_bell                     : 005590
- xt_bl                       : 00559d
- xt_bounds                   : 0055a5
- xt_bracketchar              : 00531d
- xt_brackettick              : 00530e
- xt_branch                   : 0055af
- xt_bye                      : 0055c3
- xt_c-comma                  : 0055ca
- xt_c-fetch                  : 0055d8
- xt_c-store                  : 0055e4
- xt_cellplus                 : 0055f4
- xt_char                     : 0055f7
- xt_chars                    : 00560f
- xt_cmove                    : 005611
- xt_cmoveup                  : 005634
- xt_cold                     : 005064
- xt_colon                    : 005251
- xt_comma                    : 005245
- xt_compile-only             : 00564d
- xt_compilecomma             : 005656
- xt_constant                 : 0056e4
- xt_count                    : 005713
- xt_cr                       : 005721
- xt_create                   : 005727
- xt_dabs                     : 005819
- xt_decimal                  : 005820
- xt_defer                    : 005797
- xt_depth                    : 005826
- xt_digitq                   : 0057b1
- xt_dminus                   : 0057ff
- xt_dnegate                  : 005835
- xt_does                     : 005849
- xt_dot                      : 0051da
- xt_dotquote                 : 0051f9
- xt_dots                     : 00520d
- xt_dplus                    : 0057ed
- xt_drop                     : 00586c
- xt_dtos                     : 005814
- xt_dtrailing                : 005345
- xt_dump                     : 005871
- xt_dup                      : 00588f
- xt_emit                     : 005894
- xt_equal                    : 00535c
- xt_erase                    : 00589c
- xt_evaluate                 : 0058be
- xt_execute                  : 0058f0
- xt_fetch                    : 0052da
- xt_fill                     : 0058a3
- xt_find                     : 0058fa
- xt_find-name                : 00592b
- xt_fmmod                    : 005982
- xt_fromr                    : 005cae
- xt_greater                  : 005123
- xt_hash                     : 00528c
- xt_hashs                    : 0052b6
- xt_here                     : 005a20
- xt_hex                      : 005a27
- xt_hold                     : 005a2d
- xt_immediate                : 0059e5
- xt_input                    : 0059ee
- xt_int-name                 : 0059f6
- xt_invert                   : 005a1a
- xt_key                      : 0059d6
- xt_latestnt                 : 005a3b
- xt_latestxt                 : 005a43
- xt_leftbracket              : 005314
- xt_less                     : 0050f9
- xt_lessnumber               : 005119
- xt_literal                  : 005a53
- xt_lshift                   : 005a72
- xt_marker                   : 005aa6
- xt_max                      : 005ad0
- xt_min                      : 005ae3
- xt_minus                    : 005331
- xt_move                     : 005af6
- xt_mrot                     : 00533c
- xt_mstar                    : 005a86
- xt_name-int                 : 005b07
- xt_name-string              : 005b10
- xt_native-compile           : 005b21
- xt_nc-limit                 : 005b2a
- xt_negate                   : 005b32
- xt_nip                      : 005b39
- xt_not-equal                : 00510d
- xt_number                   : 005b3c
- xt_numbermore               : 0052a7
- xt_one                      : 0053bd
- xt_one-minus                : 0053c5
- xt_one-plus                 : 0053c7
- xt_or                       : 005bc0
- xt_output                   : 005bc7
- xt_over                     : 005bcf
- xt_pad                      : 005bd6
- xt_page                     : 005be2
- xt_parse                    : 005c21
- xt_parse-name               : 005bef
- xt_pdo                      : 0052fb
- xt_pick                     : 005c54
- xt_plus                     : 005329
- xt_plusstore                : 005c62
- xt_postpone                 : 005c72
- xt_pploop                   : 0052df
- xt_pqdo                     : 0052ee
- xt_qdup                     : 0052c6
- xt_question                 : 0052bf
- xt_quit                     : 0050ba
- xt_refill                   : 005cb6
- xt_rfetch                   : 005ca5
- xt_rightbracket             : 005317
- xt_rot                      : 005cde
- xt_rshift                   : 005ce7
- xt_semicolon                : 005273
- xt_sign                     : 005d41
- xt_slashstring              : 0051c8
- xt_sliteral                 : 005d4f
- xt_smrem                    : 005db0
- xt_source                   : 005e0a
- xt_source-id                : 005e17
- xt_space                    : 005e1e
- xt_spaces                   : 005e24
- xt_squote                   : 005cfb
- xt_star                     : 005e31
- xt_state                    : 005e39
- xt_stod                     : 005d31
- xt_store                    : 0052ce
- xt_swap                     : 005e41
- xt_tick                     : 005448
- xt_to                       : 005e47
- xt_to-in                    : 00515b
- xt_tobody                   : 005137
- xt_tonumber                 : 005163
- xt_tor                      : 0051c0
- xt_true                     : 005e51
- xt_tuck                     : 005e59
- xt_two                      : 0053c9
- xt_two-star                 : 0053d1
- xt_twofromr                 : 005405
- xt_tworfetch                : 005416
- xt_twotor                   : 0053d5
- xt_type                     : 005e62
- xt_udmod                    : 005e8c
- xt_udot                     : 005e83
- xt_ummod                    : 005f06
- xt_umstar                   : 005ea7
- xt_unloop                   : 005f57
- xt_unused                   : 005f5e
- xt_variable                 : 005f6a
- xt_word                     : 005f79
- xt_words                    : 005f99
- xt_wordsize                 : 005fd6
- xt_wordsnsizes              : 005f92
- xt_xor                      : 005fe9
- xt_zbranch                  : 00539f
- xt_zero                     : 005368
- xt_zero-equal               : 005370
- xt_zero-less                : 00537c
- xt_zero-more                : 005394
- xt_zero-notequal            : 005388
- z_2drop                     : 0053ec
- z_2dup                      : 0053f7
- z_2over                     : 005404
- z_2swap                     : 005434
- z_2variable                 : 005447
- z_abort                     : 0050f9
- z_abortq                    : 005480
- z_abs                       : 005489
- z_accept                    : 005515
- z_again                     : 00552b
- z_align                     : 00552d
- z_aligned                   : 00552f
- z_allot                     : 005558
- z_and                       : 00555f
- z_at-xy                     : 005587
- z_backslash                 : 005328
- z_base                      : 00558f
- z_begin                     : 00559c
- z_bell                      : 005596
- z_bl                        : 0055a4
- z_bounds                    : 0055ae
- z_bracketchar               : 005323
- z_brackettick               : 005314
- z_branch                    : 0055b5
- z_bye                       : 0055ca
- z_c-comma                   : 0055d7
- z_c-fetch                   : 0055e3
- z_c-store                   : 0055f3
- z_cellplus                  : 0055f6
- z_char                      : 00560e
- z_chars                     : 005610
- z_cmove                     : 005633
- z_cmoveup                   : 00564c
- z_cold                      : 0050f9
- z_colon                     : 005272
- z_comma                     : 005250
- z_compile-only              : 005655
- z_compilecomma              : 0056e3
- z_constant                  : 005712
- z_count                     : 005720
- z_cr                        : 005727
- z_create                    : 005796
- z_dabs                      : 00581f
- z_decimal                   : 005825
- z_defer                     : 0057b1
- z_depth                     : 005834
- z_digitq                    : 0057ec
- z_dminus                    : 005813
- z_dnegate                   : 005848
- z_does                      : 005855
- z_dot                       : 0051f8
- z_dotquote                  : 00520d
- z_dots                      : 005244
- z_dplus                     : 0057fe
- z_drop                      : 005870
- z_dtos                      : 005818
- z_dtrailing                 : 00535b
- z_dump                      : 00588e
- z_dup                       : 005893
- z_emit                      : 00589c
- z_equal                     : 005367
- z_erase                     : 0058bd
- z_evaluate                  : 0058ec
- z_execute                   : 0058fa
- z_fetch                     : 0052de
- z_fill                      : 0058bd
- z_find                      : 00592a
- z_find-name                 : 005981
- z_fmmod                     : 0059d5
- z_fromr                     : 005cb5
- z_greater                   : 005136
- z_hash                      : 0052a6
- z_hashs                     : 0052be
- z_here                      : 005a26
- z_hex                       : 005a2c
- z_hold                      : 005a3a
- z_immediate                 : 0059ed
- z_input                     : 0059f5
- z_int-name                  : 005a19
- z_invert                    : 005a1f
- z_key                       : 0059e5
- z_latestnt                  : 005a42
- z_latestxt                  : 005a52
- z_leftbracket               : 005316
- z_less                      : 00510c
- z_lessnumber                : 005122
- z_literal                   : 005a64
- z_lshift                    : 005a85
- z_marker                    : 005acf
- z_max                       : 005ae2
- z_min                       : 005af5
- z_minus                     : 00533b
- z_move                      : 005b07
- z_mrot                      : 005344
- z_mstar                     : 005aa5
- z_name-int                  : 005b0f
- z_name-string               : 005b20
- z_native-compile            : 005b29
- z_nc-limit                  : 005b31
- z_negate                    : 005b38
- z_nip                       : 005b3b
- z_not-equal                 : 005118
- z_number                    : 005bbf
- z_numbermore                : 0052b5
- z_one                       : 0053c4
- z_one-minus                 : 0053c6
- z_one-plus                  : 0053c8
- z_or                        : 005bc6
- z_output                    : 005bce
- z_over                      : 005bd5
- z_pad                       : 005be1
- z_page                      : 005bee
- z_parse                     : 005c53
- z_parse-name                : 005c53
- z_pdo                       : 00530d
- z_pick                      : 005c61
- z_plus                      : 005330
- z_plusstore                 : 005c71
- z_postpone                  : 005ca4
- z_pploop                    : 0052ed
- z_pqdo                      : 00530d
- z_qdup                      : 0052cd
- z_question                  : 0052c5
- z_quit                      : 0050f9
- z_refill                    : 005cdd
- z_rfetch                    : 005cad
- z_rightbracket              : 00531c
- z_rot                       : 005ce6
- z_rshift                    : 005cfa
- z_semicolon                 : 00528b
- z_sign                      : 005d4e
- z_slashstring               : 0051d9
- z_sliteral                  : 005d99
- z_smrem                     : 005e09
- z_source                    : 005e16
- z_source-id                 : 005e1d
- z_space                     : 005e24
- z_spaces                    : 005e30
- z_squote                    : 005d30
- z_star                      : 005e38
- z_state                     : 005e40
- z_stod                      : 005d40
- z_store                     : 0052d9
- z_swap                      : 005e46
- z_tick                      : 005463
- z_to                        : 005e50
- z_to-in                     : 005162
- z_tobody                    : 00515a
- z_tonumber                  : 0051bf
- z_tor                       : 0051c7
- z_true                      : 005e58
- z_tuck                      : 005e61
- z_two                       : 0053d0
- z_two-star                  : 0053d4
- z_twofromr                  : 005415
- z_tworfetch                 : 005423
- z_twotor                    : 0053e5
- z_type                      : 005e82
- z_udmod                     : 005ea7
- z_udot                      : 005e8c
- z_ummod                     : 005f56
- z_umstar                    : 005f05
- z_unloop                    : 005f5d
- z_unused                    : 005f69
- z_variable                  : 005f79
- z_word                      : 005f91
- z_words                     : 005fd5
- z_wordsize                  : 005fe8
- z_wordsnsizes               : 005fd5
- z_xor                       : 005fef
- z_zbranch                   : 0053a5
- z_zero                      : 00536f
- z_zero-equal                : 00537b
- z_zero-less                 : 005387
- z_zero-more                 : 00539e
- z_zero-notequal             : 005393
- zb_done                     : 0053b7
- zb_zero                     : 0053ae
- zbranch_rt                  : 0053a6
- ze_not_zero                 : 005378
- zero-less-is-less           : 005384
- zero-more_done              : 00539d
- zero-more_true              : 00539c
- zne_is_zero                 : 005390
