A Tinkerer's Assembler for the 6502/65c02/65816
Version BETA 17. Feb 2017
Copyright 2015-2017 Scot W. Stevenson <scot.stevenson@gmail.com>
This program comes with ABSOLUTELY NO WARRANTY

Code listing for file liaraforth.tasm
Generated on Tue Feb 21 01:36:08 2017
Target MPU: 65816
External files loaded: 4
Number of passes executed: 35
Number of steps executed: 10
Assembly time: 0.16061 seconds
Code origin: 006000
Bytes of machine code: 6076

LISTING:
   Line  Status/Type State/Width Address     Bytes     Instruction
   1:000 | DONE cmt | em  8  8 |        |             | ; Liara Forth for the W65C265SXB
   2:000 | DONE cmt | em  8  8 |        |             | ; Scot W. Stevenson <scot.stevenson@gmail.com>
   3:000 | DONE cmt | em  8  8 |        |             | ; First version: 01. Apr 2016
   4:000 | DONE cmt | em  8  8 |        |             | ; This version: 20. Feb 2017
   5:000 | DONE wsp | em  8  8 |        |             |
   6:000 | DONE cmt | em  8  8 |        |             | ; This code is written in Typist's Assembler Notation for the 65c02/65816
   7:000 | DONE cmt | em  8  8 |        |             | ; See docs/MANUAL.md for more information
   8:000 | DONE wsp | em  8  8 |        |             |
   9:000 | DONE dir | em  8  8 |        |             |         .mpu 65816                   
  10:000 | DONE cmt | em  8  8 |        |             | ;       .origin 8000    ; start of code to save to Flash memory
  11:000 | DONE dir | em  8  8 |        |             |         .origin 6000                 start of code to save to built-in RAM
  12:000 | DONE wsp | em  8  8 |        |             |
  13:000 | DONE cmt | em  8  8 |        |             | ; ===================================================================
  14:000 | DONE cmt | em  8  8 |        |             | ; TOP INCLUDES
  15:000 | DONE wsp | em  8  8 |        |             |
  16:000 | DONE cmt | em  8  8 |        |             | ; Definitions for Liara Forth for the W65C265SXB
  16:001 | DONE cmt | em  8  8 |        |             | ; Scot W. Stevenson <scot.stevenson@gmail.com>
  16:002 | DONE cmt | em  8  8 |        |             | ; First version: 01. Apr 2016
  16:003 | DONE cmt | em  8  8 |        |             | ; This version: 19. Feb 2017
  16:004 | DONE wsp | em  8  8 |        |             |
  16:005 | DONE cmt | em  8  8 |        |             | ; This file is included by liaraforth.tasm
  16:006 | DONE wsp | em  8  8 |        |             |
  16:007 | DONE cmt | em  8  8 |        |             | ; Note that Typist's Assembler Notation does not distinguish between
  16:008 | DONE cmt | em  8  8 |        |             | ; upper andlower case. Variations in case are for human readers only.
  16:009 | DONE wsp | em  8  8 |        |             |
  16:010 | DONE cmt | em  8  8 |        |             | ; I/O facilities are handled in the separate kernel files. The definitions for
  16:011 | DONE cmt | em  8  8 |        |             | ; multitasking are preliminary and will probably change
  16:012 | DONE wsp | em  8  8 |        |             |
  16:013 | DONE cmt | em  8  8 |        |             | ; ===================================================================
  16:014 | DONE cmt | em  8  8 |        |             | ; CONTROL VALUES
  16:015 | DONE wsp | em  8  8 |        |             |
  16:016 | DONE cmt | em  8  8 |        |             |         ; NC_LIMIT gives the number of maximum bytes the code of a word may be
  16:017 | DONE cmt | em  8  8 |        |             |         ; long and still be compiled natively - see COMPILE, for details.
  16:018 | DONE cmt | em  8  8 |        |             |         ; A value of zero means a word is always compiled as a subroutine.
  16:019 | DONE cmt | em  8  8 |        |             |         ; TODO Decide if we want to expose this value to the user
  16:020 | DONE dir | em  8  8 |        |             |         .equ nc_limit 0              
  16:021 | DONE wsp | em  8  8 |        |             |
  16:022 | DONE cmt | em  8  8 |        |             | ; ===================================================================
  16:023 | DONE cmt | em  8  8 |        |             | ; MEMORY MAP (consider moving parts of these to kernel.tasm)
  16:024 | DONE wsp | em  8  8 |        |             |
  16:025 | DONE dir | em  8  8 |        |             |         .equ cp0              0300   start of available RAM for Dictionary
  16:026 | DONE dir | em  8  8 |        |             |         .equ physicalram     07fff   end of installed RAM
  16:027 | DONE dir | em  8  8 |        |             |         .equ maxram-single   07bff   end of available RAM (single task mode)
  16:028 | DONE dir | em  8  8 |        |             |         .equ maxram-multiple 06fff   end of available RAM (multitask mode)
  16:029 | DONE dir | em  8  8 |        |             |         .equ buffers  7c00           buffer area start
  16:030 | DONE wsp | em  8  8 |        |             |
  16:031 | DONE cmt | em  8  8 |        |             | ; The two input buffers are currently switched in REFILL by bit flipping. If you
  16:032 | DONE cmt | em  8  8 |        |             | ; change their addresses, you'll probably have to rewrite the code there
  16:033 | DONE wsp | em  8  8 |        |             |
  16:034 | DONE dir | em  8  8 |        |             |         .equ buffersize  0ff         maximum size for input buffers
  16:035 | DONE dir | em  8  8 |        |             |         .equ ibuffer1   7c00         start of 256 byte input buffer 1
  16:036 | DONE dir | em  8  8 |        |             |         .equ ibuffer2   7d00         start of 256 byte input buffer 2
  16:037 | DONE dir | em  8  8 |        |             |         .equ padsize     0ff         size of PAD, must be > &84
  16:038 | DONE dir | em  8  8 |        |             |         .equ padoffset   07f         distance from CP to PAD (holds number strings)
  16:039 | DONE wsp | em  8  8 |        |             |
  16:040 | DONE cmt | em  8  8 |        |             | ; RAM from 0000 to 01ff is left for the Mensch Monitor to use
  16:041 | DONE wsp | em  8  8 |        |             |
  16:042 | DONE dir | em  8  8 |        |             |         .equ directpage          0200 single task Direct Page (DP) start
  16:043 | DONE dir | em  8  8 |        |             |         .equ stack-multiple      7000 multitask Stack (S) area start
  16:044 | DONE dir | em  8  8 |        |             |         .equ directpage-multiple 7400 multitask Direct Page (DP) area start
  16:045 | DONE wsp | em  8  8 |        |             |
  16:046 | DONE cmt | em  8  8 |        |             | ; Initial values
  16:047 | DONE wsp | em  8  8 |        |             |
  16:048 | DONE dir | em  8  8 |        |             |         .equ stack0 7fff             single task Stack (S) start (bottom)
  16:049 | DONE dir | em  8  8 |        |             |         .equ dsp0   02f8             initial Data Stack Pointer (X)
  16:050 | DONE wsp | em  8  8 |        |             |
  16:051 | DONE cmt | em  8  8 |        |             | ; ===================================================================
  16:052 | DONE cmt | em  8  8 |        |             | ; DIRECT PAGE ADDRESSES
  16:053 | DONE wsp | em  8  8 |        |             |
  16:054 | DONE cmt | em  8  8 |        |             | ; All are one cell (two bytes) long to prevent weird errors
  16:055 | DONE cmt | em  8  8 |        |             | ; TODO move these to USER variables for multitasking
  16:056 | DONE wsp | em  8  8 |        |             |
  16:057 | DONE dir | em  8  8 |        |             |         .equ cp { 000200 + &0 }      Compiler Pointer, 2 bytes
  16:058 | DONE dir | em  8  8 |        |             |         .equ dp { 000200 + &2 }      Dictionary Pointer, 2 bytes
  16:059 | DONE dir | em  8  8 |        |             |         .equ tmpdsp { 000200 + &4 }  Temporary DSP (X) storage, 2 bytes
  16:060 | DONE dir | em  8  8 |        |             |         .equ tmptos { 000200 + &6 }  Temporary TOS (Y) storage, 2 bytes
  16:061 | DONE dir | em  8  8 |        |             |         .equ output { 000200 + &8 }  Address where output is constructed
  16:062 | DONE dir | em  8  8 |        |             |         .equ insrc { 000200 + &10 }  Input Source for SOURCE-ID
  16:063 | DONE dir | em  8  8 |        |             |         .equ cib { 000200 + &12 }    Current Input Buffer, 7c00 or 7d00
  16:064 | DONE dir | em  8  8 |        |             |         .equ ciblen { 000200 + &14 } Length of current input buffer
  16:065 | DONE dir | em  8  8 |        |             |         .equ piblen { 000200 + &16 } Length of previous input buffer
  16:066 | DONE dir | em  8  8 |        |             |         .equ toin { 000200 + &18 }   Pointer to CIB (>IN in Forth)
  16:067 | DONE dir | em  8  8 |        |             |         .equ state { 000200 + &20 }  STATE: -1 compile, 0 interpret
  16:068 | DONE dir | em  8  8 |        |             |         .equ tmp1 { 000200 + &22 }   Temporary storage
  16:069 | DONE dir | em  8  8 |        |             |         .equ tmp2 { 000200 + &24 }   Temporary storage
  16:070 | DONE dir | em  8  8 |        |             |         .equ tmp3 { 000200 + &26 }   Temporary storage
  16:071 | DONE dir | em  8  8 |        |             |         .equ base { 000200 + &28 }   Radix for number conversion
  16:072 | DONE dir | em  8  8 |        |             |         .equ workword { 000200 + &30 } Currently compiliing word
  16:073 | DONE dir | em  8  8 |        |             |         .equ scratch { 000200 + &32 } 8 byte scratchpad (see UM/MOD)
  16:074 | DONE dir | em  8  8 |        |             |         .equ tohold { 000200 + &40 } Pointer for formatted output
  16:075 | DONE wsp | em  8  8 |        |             |
  16:076 | DONE wsp | em  8  8 |        |             |
  16:077 | DONE cmt | em  8  8 |        |             | ; ===================================================================
  16:078 | DONE cmt | em  8  8 |        |             | ; HELPER DEFINITIONS
  16:079 | DONE wsp | em  8  8 |        |             |
  16:080 | DONE cmt | em  8  8 |        |             | ; ASCII characters
  16:081 | DONE dir | em  8  8 |        |             |         .equ AscCC   03              break (Control-C) ASCII character
  16:082 | DONE dir | em  8  8 |        |             |         .equ AscBELL 07              ACSCII bell sound
  16:083 | DONE dir | em  8  8 |        |             |         .equ AscBS   08              backspace ASCII character
  16:084 | DONE dir | em  8  8 |        |             |         .equ AscLF   0a              line feed ASCII character
  16:085 | DONE dir | em  8  8 |        |             |         .equ AscCR   0d              carriage return ASCII character
  16:086 | DONE dir | em  8  8 |        |             |         .equ AscCN   0e              ASCII CNTR-n (for next command)
  16:087 | DONE dir | em  8  8 |        |             |         .equ AscCP   10              ASCII CNTR-p (for previous command)
  16:088 | DONE dir | em  8  8 |        |             |         .equ AscESC  1b              Escape ASCII character
  16:089 | DONE dir | em  8  8 |        |             |         .equ AscSP   20              space ASCII character
  16:090 | DONE dir | em  8  8 |        |             |         .equ AscDEL  7f              DEL ASCII character
  16:091 | DONE wsp | em  8  8 |        |             |
  16:092 | DONE cmt | em  8  8 |        |             | ; Dictionary flags. The first four are currently unused
  16:093 | DONE dir | em  8  8 |        |             |         .equ CO 0004                 Compile Only
  16:094 | DONE dir | em  8  8 |        |             |         .equ IM 0002                 Immediate Word
  16:095 | DONE dir | em  8  8 |        |             |         .equ NC 0001                 Native Compile allowed
  16:096 | DONE wsp | em  8  8 |        |             |
  17:000 | DONE wsp | em  8  8 |        |             |
  18:000 | DONE cmt | em  8  8 |        |             | ; Hardware dependencies are isolated to a large degree in kernel files. Liara
  19:000 | DONE cmt | em  8  8 |        |             | ; Forth ships with two such files: One for the crude65816 emulator, and one for
  20:000 | DONE cmt | em  8  8 |        |             | ; the 265sxb board. Only use one.
  21:000 | DONE wsp | em  8  8 |        |             |
  22:000 | DONE cmt | em  8  8 |        |             | ;       .include kernel_emu.tasm        ; routines for crude65815 emulator
  23:000 | DONE cmt | em  8  8 |        |             | ; Basic hardware routines for Liara Forth: 265SXB version
  23:001 | DONE cmt | em  8  8 |        |             | ; Scot W. Stevenson <scot.stevenson@gmail.com>
  23:002 | DONE cmt | em  8  8 |        |             | ; First version: 04. Jan 2017
  23:003 | DONE cmt | em  8  8 |        |             | ; This version: 15. Feb 2017
  23:004 | DONE wsp | em  8  8 |        |             |
  23:005 | DONE cmt | em  8  8 |        |             | ; This section provides basic hardware interface to the 265SXB, providing the
  23:006 | DONE cmt | em  8  8 |        |             | ; PUT_CHR and GET_CHR routines that Liara Forth uses. It is in its own section
  23:007 | DONE cmt | em  8  8 |        |             | ; to make porting Forth to other machines easier.
  23:008 | DONE wsp | em  8  8 |        |             |
  23:009 | DONE cmt | em  8  8 |        |             | ; The code here is based on Andrew Jacobs' Basic Vector Handling for the
  23:010 | DONE cmt | em  8  8 |        |             | ; W65C265SXB Development Board as part of the w65c265sxb-hacker project
  23:011 | DONE cmt | em  8  8 |        |             | ; (https://github.com/andrew-jacobs/w65c265sxb-hacker). It is released under the
  23:012 | DONE cmt | em  8  8 |        |             | ; following license:
  23:013 | DONE cmt | em  8  8 |        |             | ;
  23:014 | DONE cmt | em  8  8 |        |             | ; This work is made available under the terms of the Creative Commons
  23:015 | DONE cmt | em  8  8 |        |             | ; Attribution-NonCommercial-ShareAlike 4.0 International license. Open the
  23:016 | DONE cmt | em  8  8 |        |             | ; following URL to see the details.
  23:017 | DONE cmt | em  8  8 |        |             | ;
  23:018 | DONE cmt | em  8  8 |        |             | ; http://creativecommons.org/licenses/by-nc-sa/4.0/
  23:019 | DONE wsp | em  8  8 |        |             |
  23:020 | DONE cmt | em  8  8 |        |             | ; Original variable names from w65c256.inc are included in comments to make
  23:021 | DONE cmt | em  8  8 |        |             | ; updates and changes easier
  23:022 | DONE wsp | em  8  8 |        |             |
  23:023 | DONE cmt | em  8  8 |        |             | ; ===================================================================
  23:024 | DONE cmt | em  8  8 |        |             | ; HARDWARE DEFINITIONS
  23:025 | DONE cmt | em  8  8 |        |             | ; These follow Andrew Jacobs' names, but lower case and with "hw_" prefixed.
  23:026 | DONE cmt | em  8  8 |        |             | ; This is the only file where symbols with the hw_ prefix may be defined or used
  23:027 | DONE wsp | em  8  8 |        |             |
  23:028 | DONE cmt | em  8  8 |        |             | ; Baud rates are calculated by the formula { osc_freq/(16*baud_rate)-1 } which we
  23:029 | DONE cmt | em  8  8 |        |             | ; can do on the fly at every assembly with the following parameters, or just calculate
  23:030 | DONE cmt | em  8  8 |        |             | ; once and then define brg_value with:
  23:031 | DONE cmt | em  8  8 |        |             | ;
  23:032 | DONE cmt | em  8  8 |        |             | ; - For  9600 baud, use &23
  23:033 | DONE cmt | em  8  8 |        |             | ; - For 19200 baud, use &11
  23:034 | DONE wsp | em  8  8 |        |             |
  23:035 | DONE cmt | em  8  8 |        |             | ;       .equ osc_freq  3686400          ; SXB runs at 3.6864MHz
  23:036 | DONE cmt | em  8  8 |        |             | ;       .equ baud_rate 19200            ; ACIA baud rate
  23:037 | DONE cmt | em  8  8 |        |             | ;	.equ baud_rate 9600             ; ACIA baud rate
  23:038 | DONE wsp | em  8  8 |        |             |
  23:039 | DONE dir | em  8  8 |        |             |         .equ brg_value &11           19200 baud
  23:040 | DONE cmt | em  8  8 |        |             | ;       .equ brg_value &23              ; 9600 baud
  23:041 | DONE wsp | em  8  8 |        |             |
  23:042 | DONE dir | em  8  8 |        |             |         .equ hw_pd0  0df00           Port 0 Data Register
  23:043 | DONE dir | em  8  8 |        |             |         .equ hw_pd1  0df01           Port 1 Data Register
  23:044 | DONE dir | em  8  8 |        |             |         .equ hw_pd2  0df02           Port 2 Data Register
  23:045 | DONE dir | em  8  8 |        |             |         .equ hw_pd3  0df03           Port 3 Data Register
  23:046 | DONE dir | em  8  8 |        |             |         .equ hw_pdd0 0df04           Port 0 Data Direction Register
  23:047 | DONE dir | em  8  8 |        |             |         .equ hw_pdd1 0df05           Port 1 Data Direction Register
  23:048 | DONE dir | em  8  8 |        |             |         .equ hw_pdd2 0df06           Port 2 Data Direction Register
  23:049 | DONE dir | em  8  8 |        |             |         .equ hw_pdd3 0df07           Port 3 Data Direction Register
  23:050 | DONE wsp | em  8  8 |        |             |
  23:051 | DONE dir | em  8  8 |        |             |         .equ hw_pd4  0df20           Port 4 Data Register
  23:052 | DONE dir | em  8  8 |        |             |         .equ hw_pd5  0df21           Port 5 Data Register
  23:053 | DONE dir | em  8  8 |        |             |         .equ hw_pd6  0df22           Port 6 Data Register
  23:054 | DONE dir | em  8  8 |        |             |         .equ hw_pd7  0df23           Port 7 Data Register
  23:055 | DONE dir | em  8  8 |        |             |         .equ hw_pdd4 0df24           Port 4 Data Direction Register
  23:056 | DONE dir | em  8  8 |        |             |         .equ hw_pdd5 0df25           Port 5 Data Direction Register
  23:057 | DONE dir | em  8  8 |        |             |         .equ hw_pdd6 0df26           Port 6 Data Direction Register
  23:058 | DONE dir | em  8  8 |        |             |         .equ hw_pcs7 0df27           Port 7 Chip Select
  23:059 | DONE wsp | em  8  8 |        |             |
  23:060 | DONE dir | em  8  8 |        |             |         .equ hw_bcr  0df40           Bus Control Register
  23:061 | DONE dir | em  8  8 |        |             |         .equ hw_sscr 0df41           System Speed Control Register
  23:062 | DONE dir | em  8  8 |        |             |         .equ hw_tcr  0df42           Timer Control Register
  23:063 | DONE dir | em  8  8 |        |             |         .equ hw_ter  0df43           Timer Enable Register
  23:064 | DONE dir | em  8  8 |        |             |         .equ hw_tifr 0df44           Timer Interrupt Flag Register
  23:065 | DONE dir | em  8  8 |        |             |         .equ hw_eifr 0df45           Edge Interrupt Flag Register
  23:066 | DONE dir | em  8  8 |        |             |         .equ hw_tier 0df46           Timer Interrupt Enable Register
  23:067 | DONE dir | em  8  8 |        |             |         .equ hw_eier 0df47           Edge Interrupt Enable Register
  23:068 | DONE dir | em  8  8 |        |             |         .equ hw_uifr 0df48           UART Interrupt Flag Register
  23:069 | DONE dir | em  8  8 |        |             |         .equ hw_uier 0df49           UART Interrupt Enable Register
  23:070 | DONE wsp | em  8  8 |        |             |
  23:071 | DONE dir | em  8  8 |        |             |         .equ hw_t0cl 0df60           Timer 0 Counter Low
  23:072 | DONE dir | em  8  8 |        |             |         .equ hw_t0ch 0df61           Timer 0 Counter High
  23:073 | DONE dir | em  8  8 |        |             |         .equ hw_t1cl 0df62           Timer 1 Counter Low
  23:074 | DONE dir | em  8  8 |        |             |         .equ hw_t1ch 0df63           Timer 1 Counter High
  23:075 | DONE dir | em  8  8 |        |             |         .equ hw_t2cl 0df64           Timer 2 Counter Low
  23:076 | DONE dir | em  8  8 |        |             |         .equ hw_t2ch 0df65           Timer 2 Counter High
  23:077 | DONE dir | em  8  8 |        |             |         .equ hw_t3cl 0df66           Timer 3 Counter Low
  23:078 | DONE dir | em  8  8 |        |             |         .equ hw_t3ch 0df67           Timer 3 Counter High
  23:079 | DONE dir | em  8  8 |        |             |         .equ hw_t4cl 0df68           Timer 4 Counter Low
  23:080 | DONE dir | em  8  8 |        |             |         .equ hw_t4ch 0df69           Timer 4 Counter High
  23:081 | DONE dir | em  8  8 |        |             |         .equ hw_t5cl 0df6a           Timer 5 Counter Low
  23:082 | DONE dir | em  8  8 |        |             |         .equ hw_t5ch 0df6b           Timer 5 Counter High
  23:083 | DONE dir | em  8  8 |        |             |         .equ hw_t6cl 0df6c           Timer 6 Counter Low
  23:084 | DONE dir | em  8  8 |        |             |         .equ hw_t6ch 0df6d           Timer 6 Counter High
  23:085 | DONE dir | em  8  8 |        |             |         .equ hw_t7cl 0df6e           Timer 7 Counter Low
  23:086 | DONE dir | em  8  8 |        |             |         .equ hw_t7ch 0df6f           Timer 7 Counter High
  23:087 | DONE wsp | em  8  8 |        |             |
  23:088 | DONE dir | em  8  8 |        |             |         .equ hw_acsr0 0df70          UART 0 Control/Status Register
  23:089 | DONE dir | em  8  8 |        |             |         .equ hw_artd0 0df71          UART 0 Data Register
  23:090 | DONE dir | em  8  8 |        |             |         .equ hw_acsr1 0df72          UART 1 Control/Status Register
  23:091 | DONE dir | em  8  8 |        |             |         .equ hw_artd1 0df73          UART 1 Data Register
  23:092 | DONE dir | em  8  8 |        |             |         .equ hw_acsr2 0df74          UART 2 Control/Status Register
  23:093 | DONE dir | em  8  8 |        |             |         .equ hw_artd2 0df75          UART 2 Data Register
  23:094 | DONE dir | em  8  8 |        |             |         .equ hw_acsr3 0df76          UART 3 Control/Status Register
  23:095 | DONE dir | em  8  8 |        |             |         .equ hw_artd3 0df77          UART 3 Data Register
  23:096 | DONE wsp | em  8  8 |        |             |
  23:097 | DONE wsp | em  8  8 |        |             |
  23:098 | DONE cmt | em  8  8 |        |             | ; ===================================================================
  23:099 | DONE cmt | em  8  8 |        |             | ; RESET HARDWARE
  23:100 | DONE cmt | em  8  8 |        |             | ; Call this during boot. Uses Port 0 for communication in the default setting
  23:101 | DONE lbl | em  8  8 | 006000 |             | reset_hardware                       
  23:102 | DONE ins | em  8  8 | 006000 | 78          |                 sei                  
  23:103 | DONE ins | em  8  8 | 006001 | 18          |                 clc                  
  23:104 | DONE ins | em  8  8 | 006002 | fb          |                 xce                  
  23:105 | DONE ctl | na  8  8 |        |             |         .!native
  23:106 | DONE ins | na  8  8 | 006003 | c2 10       |                 rep 10               
  23:107 | DONE ctl | na  8 16 |        |             |         .!xy16
  23:108 | DONE dir | na  8 16 |        |             |         .!a8                         
  23:109 | DONE cmt | na  8 16 |        |             |                 ; temporarily reset the stack
  23:110 | DONE ins | na  8 16 | 006005 | a2 ff 01    |                 ldx.# 01ff           
  23:111 | DONE ins | na  8 16 | 006008 | 9a          |                 txs                  
  23:112 | DONE wsp | na  8 16 |        |             |
  23:113 | DONE ins | na  8 16 | 006009 | 9c 49 df    |                 stz 00df49           UART Interrupt Enable Register (UIER)
  23:114 | DONE wsp | na  8 16 |        |             |
  23:115 | DONE ins | na  8 16 | 00600c | a9 c0       |                 lda.# 0c0            Ensure A15/AMS are output
  23:116 | DONE ins | na  8 16 | 00600e | 8d 24 df    |                 sta 00df24           Port 4 Data Direction Register (PDD4)
  23:117 | DONE ins | na  8 16 | 006011 | 9c 20 df    |                 stz 00df20           Select bank 0 (Port 4 Data Register, PD4)
  23:118 | DONE wsp | na  8 16 |        |             |
  23:119 | DONE ins | na  8 16 | 006014 | a9 10       |                 lda.# %00010000      Set UART0 to use timer 3
  23:120 | DONE ins | na  8 16 | 006016 | 1c 42 df    |                 trb 00df42           Timer Control Register (TCR)
  23:121 | DONE ins | na  8 16 | 006019 | a9 0b       |                 lda.# .lsb 00000b    And set baud rate
  23:122 | DONE ins | na  8 16 | 00601b | 8d 66 df    |                 sta 00df66           Timer 3 Counter Low (T3CL)
  23:123 | DONE ins | na  8 16 | 00601e | a9 00       |                 lda.# .msb 00000b    
  23:124 | DONE ins | na  8 16 | 006020 | 8d 67 df    |                 sta 00df67           Timer 3 Counter High (T3CH)
  23:125 | DONE ins | na  8 16 | 006023 | a9 08       |                 lda.# 08             Enable timer 3 (1<<3)
  23:126 | DONE ins | na  8 16 | 006025 | 0c 43 df    |                 tsb 00df43           Timer Enable Register (TER)
  23:127 | DONE wsp | na  8 16 |        |             |
  23:128 | DONE ins | na  8 16 | 006028 | a9 25       |                 lda.# %00100101      Set UART0 for 8-N-1
  23:129 | DONE ins | na  8 16 | 00602a | 8d 70 df    |                 sta 00df70           UART 0 Control/Status Register (ACSR0)
  23:130 | DONE wsp | na  8 16 |        |             |
  23:131 | DONE cmt | na  8 16 |        |             |                 ; set up direct page
  23:132 | DONE ins | na  8 16 | 00602d | c2 20       |                 rep 20               
  23:133 | DONE ctl | na 16 16 |        |             |         .!a16
  23:134 | DONE ins | na 16 16 | 00602f | a9 00 02    |                 lda.# 000200         
  23:135 | DONE ins | na 16 16 | 006032 | 5b          |                 tcd                  
  23:136 | DONE wsp | na 16 16 |        |             |
  23:137 | DONE ins | na 16 16 | 006033 | 4c 66 60    |                 jmp 006066           we return with A as 8 bits
  23:138 | DONE wsp | na 16 16 |        |             |
  23:139 | DONE wsp | na 16 16 |        |             |
  23:140 | DONE cmt | na 16 16 |        |             | ; ===================================================================
  23:141 | DONE cmt | na 16 16 |        |             | ; PUT_CHR
  23:142 | DONE cmt | na 16 16 |        |             | ; Wait until the last transmission has been completed then send the character
  23:143 | DONE cmt | na 16 16 |        |             | ; in A. Destroys A. Does not have to be called with A8.
  23:144 | DONE lbl | na 16 16 | 006036 |             | put_chr                              
  23:145 | DONE ins | na 16 16 | 006036 | 08          |                 php                  save register sizes
  23:146 | DONE ins | na 16 16 | 006037 | e2 20       |                 sep 20               
  23:147 | DONE ctl | na  8 16 |        |             |         .!a8
  23:148 | DONE ins | na  8 16 | 006039 | 48          |                 pha                  
  23:149 | DONE ins | na  8 16 | 00603a | a9 02       |                 lda.# 02             (1<<1)
  23:150 | DONE wsp | na  8 16 |        |             |
  23:151 | DONE lbl | na  8 16 | 00603c |             | put_chr_wait                         
  23:152 | DONE ins | na  8 16 | 00603c | 2c 48 df    |                 bit 00df48           timer finished?
  23:153 | DONE ins | na  8 16 | 00603f | f0 fb       |                 beq 00603c           
  23:154 | DONE wsp | na  8 16 |        |             |
  23:155 | DONE ins | na  8 16 | 006041 | 68          |                 pla                  
  23:156 | DONE ins | na  8 16 | 006042 | 8d 71 df    |                 sta 00df71           transmit char
  23:157 | DONE ins | na  8 16 | 006045 | 28          |                 plp                  
  23:158 | DONE wsp | na  8 16 |        |             |
  23:159 | DONE ins | na  8 16 | 006046 | 60          |                 rts                  
  23:160 | DONE wsp | na  8 16 |        |             |
  23:161 | DONE cmt | na  8 16 |        |             | ; ===================================================================
  23:162 | DONE cmt | na  8 16 |        |             | ; GET_CHR
  23:163 | DONE cmt | na  8 16 |        |             | ; Fetch the next character from the receive buffer waiting for some to arrive
  23:164 | DONE cmt | na  8 16 |        |             | ; if the buffer is empty.
  23:165 | DONE lbl | na  8 16 | 006047 |             | get_chr                              
  23:166 | DONE ins | na  8 16 | 006047 | 08          |                 php                  Save register sizes
  23:167 | DONE ins | na  8 16 | 006048 | e2 20       |                 sep 20               
  23:168 | DONE ctl | na  8 16 |        |             |         .!a8
  23:169 | DONE ins | na  8 16 | 00604a | a9 01       |                 lda.# 01             (1<<0)
  23:170 | DONE wsp | na  8 16 |        |             |
  23:171 | DONE lbl | na  8 16 | 00604c |             | get_chr_wait                         
  23:172 | DONE ins | na  8 16 | 00604c | 2c 48 df    |                 bit 00df48           Any data in RX buffer?
  23:173 | DONE ins | na  8 16 | 00604f | f0 fb       |                 beq 00604c           No, keep waiting
  23:174 | DONE ins | na  8 16 | 006051 | ad 71 df    |                 lda 00df71           Yes, read it
  23:175 | DONE ins | na  8 16 | 006054 | 28          |                 plp                  
  23:176 | DONE wsp | na  8 16 |        |             |
  23:177 | DONE ins | na  8 16 | 006055 | 60          |                 rts                  
  23:178 | DONE wsp | na  8 16 |        |             |
  23:179 | DONE cmt | na  8 16 |        |             | ; ===================================================================
  23:180 | DONE cmt | na  8 16 |        |             | ; HAVE_CHR?
  23:181 | DONE cmt | na  8 16 |        |             | ; Check if the receive buffer contains any data and return C=1 if there is
  23:182 | DONE cmt | na  8 16 |        |             | ; some.
  23:183 | DONE cmt | na  8 16 |        |             | ; TODO Test this
  23:184 | DONE wsp | na  8 16 |        |             |
  23:185 | DONE lbl | na  8 16 | 006056 |             | have_chr?                            
  23:186 | DONE ins | na  8 16 | 006056 | 48          |                 pha                  save caller's A
  23:187 | DONE ins | na  8 16 | 006057 | 08          |                 php                  
  23:188 | DONE ins | na  8 16 | 006058 | e2 20       |                 sep 20               
  23:189 | DONE ctl | na  8 16 |        |             |         .!a8
  23:190 | DONE ins | na  8 16 | 00605a | ad 48 df    |                 lda 00df48           read the status register
  23:191 | DONE ins | na  8 16 | 00605d | 28          |                 plp                  
  23:192 | DONE ins | na  8 16 | 00605e | 6a          |                 ror.a                shift hw_uart0r bit into carry
  23:193 | DONE ins | na  8 16 | 00605f | c2 20       |                 rep 20               
  23:194 | DONE ctl | na 16 16 |        |             |         .!a16
  23:195 | DONE ins | na 16 16 | 006061 | 68          |                 pla                  restore A
  23:196 | DONE ins | na 16 16 | 006062 | 60          |                 rts                  
  23:197 | DONE wsp | na 16 16 |        |             |
  23:198 | DONE cmt | na 16 16 |        |             | ; END
  24:000 | DONE wsp | na 16 16 |        |             |
  25:000 | DONE wsp | na 16 16 |        |             |
  26:000 | DONE cmt | na 16 16 |        |             | ; ===================================================================
  27:000 | DONE cmt | na 16 16 |        |             | ; DICTIONARY ROUTINES
  28:000 | DONE wsp | na 16 16 |        |             |
  29:000 | DONE cmt | na 16 16 |        |             | ; Word code routines are sorted alphabetically, except for the first three
  30:000 | DONE cmt | na 16 16 |        |             | ; - COLD, ABORT, and QUIT - and a few others that flow into each other. The
  31:000 | DONE cmt | na 16 16 |        |             | ; byte and cycle values are calculated without the RTS instruction.
  32:000 | DONE wsp | na 16 16 |        |             |
  33:000 | DONE wsp | na 16 16 |        |             |
  34:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
  35:000 | DONE cmt | na 16 16 |        |             | ; COLD ( -- ) X bytes / X Cycles
  36:000 | DONE cmt | na 16 16 |        |             | ; Reboot the system
  37:000 | DONE lbl | na 16 16 | 006063 |             | xt_cold                              
  38:000 | DONE wsp | na 16 16 |        |             |
  39:000 | DONE ins | na 16 16 | 006063 | 4c 00 60    |                 jmp 006000           don't use JSR, jump back to start
  40:000 | DONE lbl | na 16 16 | 006066 |             | start                                
  41:000 | DONE dir | na 16 16 |        |             |         .!native                     these should be handled by hardware reset
  42:000 | DONE dir | na 16 16 |        |             |         .!a16                        
  43:000 | DONE dir | na 16 16 |        |             |         .!xy16                       
  44:000 | DONE ins | na 16 16 | 006066 | 78          |                 sei                  
  45:000 | DONE wsp | na 16 16 |        |             |
  46:000 | DONE cmt | na 16 16 |        |             |                 ; TODO switch to Single Task mode
  47:000 | DONE cmt | na 16 16 |        |             |                 ; TODO set up Direct Page stuff
  48:000 | DONE cmt | na 16 16 |        |             |                 ; TODO initiate User variables
  49:000 | DONE wsp | na 16 16 |        |             |
  50:000 | DONE wsp | na 16 16 |        |             |
  51:000 | DONE cmt | na 16 16 |        |             |                 ; We start out in decimal mode
  52:000 | DONE ins | na 16 16 | 006067 | 20 76 65    |                 jsr 006576           
  53:000 | DONE wsp | na 16 16 |        |             |
  54:000 | DONE cmt | na 16 16 |        |             |                 ; The name token (nt) of DROP is always the first one in the
  55:000 | DONE cmt | na 16 16 |        |             |                 ; virgin Dictionary, so we start off the Dictionary Pointer (DP)
  56:000 | DONE cmt | na 16 16 |        |             |                 ; there. Anything that comes after that (with WORDS, before
  57:000 | DONE cmt | na 16 16 |        |             |                 ; that) is high-level
  58:000 | DONE ins | na 16 16 | 00606a | a9 39 70    |                 lda.# 007039         
  59:000 | DONE ins | na 16 16 | 00606d | 85 02       |                 sta.d 000202         
  60:000 | DONE wsp | na 16 16 |        |             |
  61:000 | DONE cmt | na 16 16 |        |             |                 ; The compiler pointer (CP) points to the first free cell
  62:000 | DONE cmt | na 16 16 |        |             |                 ; in RAM
  63:000 | DONE ins | na 16 16 | 00606f | a9 00 03    |                 lda.# 000300         
  64:000 | DONE ins | na 16 16 | 006072 | 85 00       |                 sta.d 000200         
  65:000 | DONE wsp | na 16 16 |        |             |
  66:000 | DONE cmt | na 16 16 |        |             |                 ; Prepare input buffers
  67:000 | DONE ins | na 16 16 | 006074 | a9 00 7c    |                 lda.# 007c00         start with first input buffer
  68:000 | DONE ins | na 16 16 | 006077 | 85 0c       |                 sta.d 00020c         
  69:000 | DONE ins | na 16 16 | 006079 | 64 10       |                 stz.d 000210         previous input buffer is empty
  70:000 | DONE ins | na 16 16 | 00607b | 64 0a       |                 stz.d 00020a         SOURCE-ID is zero
  71:000 | DONE ins | na 16 16 | 00607d | 64 14       |                 stz.d 000214         STATE is zero (interpret)
  72:000 | DONE wsp | na 16 16 |        |             |
  73:000 | DONE cmt | na 16 16 |        |             |                 ; Clear Data Stack
  74:000 | DONE ins | na 16 16 | 00607f | a0 00 00    |                 ldy.# 0000           
  75:000 | DONE ins | na 16 16 | 006082 | a2 f8 02    |                 ldx.# 0002f8         
  76:000 | DONE wsp | na 16 16 |        |             |
  77:000 | DONE cmt | na 16 16 |        |             |                 ; Clean the screen, assumes vt100 terminal
  78:000 | DONE ins | na 16 16 | 006085 | 20 54 67    |                 jsr 006754           
  79:000 | DONE wsp | na 16 16 |        |             |
  80:000 | DONE cmt | na 16 16 |        |             |                 ; Define high-level words via EVALUATE. At this point, whatever
  81:000 | DONE cmt | na 16 16 |        |             |                 ; is in Y (TOS) is garbage, so we don't have to push it to the
  82:000 | DONE cmt | na 16 16 |        |             |                 ; stack first
  83:000 | DONE ins | na 16 16 | 006088 | ca          |                 dex                  
  84:000 | DONE ins | na 16 16 | 006089 | ca          |                 dex                  
  85:000 | DONE ins | na 16 16 | 00608a | ca          |                 dex                  
  86:000 | DONE ins | na 16 16 | 00608b | ca          |                 dex                  
  87:000 | DONE ins | na 16 16 | 00608c | a9 13 71    |                 lda.# 007113         
  88:000 | DONE ins | na 16 16 | 00608f | 95 00       |                 sta.dx 00            Start address goes in NOS
  89:000 | DONE ins | na 16 16 | 006091 | a0 01 05    |                 ldy.# 000501         length goes in TOS
  90:000 | DONE wsp | na 16 16 |        |             |
  91:000 | DONE ins | na 16 16 | 006094 | 20 f3 65    |                 jsr 0065f3           
  92:000 | DONE wsp | na 16 16 |        |             |
  93:000 | DONE cmt | na 16 16 |        |             |                 ; fall through to ABORT
  94:000 | DONE wsp | na 16 16 |        |             |
  95:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
  96:000 | DONE cmt | na 16 16 |        |             | ; ABORT ( -- ) 8+ bytes / X cycles
  97:000 | DONE cmt | na 16 16 |        |             | ; Reset the parameter (data) stack pointer and continue as QUIT
  98:000 | DONE cmt | na 16 16 |        |             | ; We can jump here via subroutine because we reset the stack pointer
  99:000 | DONE cmt | na 16 16 |        |             | ; anyway. Flows into QUIT.
 100:000 | DONE cmt | na 16 16 |        |             | ; TODO see which parts of COLD we should integrate here
 101:000 | DONE lbl | na 16 16 | 006097 |             | xt_abort                             
 102:000 | DONE ins | na 16 16 | 006097 | c2 20       |                 rep 20               
 102:001 | DONE ctl | na 16 16 |        |             |         .!a16
 103:000 | DONE cmt | na 16 16 |        |             |                 ; clear Data Stack
 104:000 | DONE ins | na 16 16 | 006099 | a0 00 00    |                 ldy.# 0000           
 105:000 | DONE ins | na 16 16 | 00609c | a2 f8 02    |                 ldx.# 0002f8         
 106:000 | DONE wsp | na 16 16 |        |             |
 107:000 | DONE wsp | na 16 16 |        |             |
 108:000 | DONE cmt | na 16 16 |        |             | ; drops through to QUIT, z_abort is the same as z_quit.
 109:000 | DONE wsp | na 16 16 |        |             |
 110:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 111:000 | DONE cmt | na 16 16 |        |             | ; QUIT ( -- ) X bytes / X cycles
 112:000 | DONE cmt | na 16 16 |        |             | ; Reset the input, clearning Return Stack. Jumps to QUIT do not have to be
 113:000 | DONE cmt | na 16 16 |        |             | ; subroutine jumps as the Return Stack is cleared anyway. Liara Forth follows
 114:000 | DONE cmt | na 16 16 |        |             | ; the ANSI Forth recommendation to use REFILL. Note we don't display the "ok"
 115:000 | DONE cmt | na 16 16 |        |             | ; system prompt until after the first output. This follows Gforth.
 116:000 | DONE lbl | na 16 16 | 00609f |             | xt_quit                              
 117:000 | DONE cmt | na 16 16 |        |             |                 ; clear Return Stack
 118:000 | DONE ins | na 16 16 | 00609f | a9 ff 7f    |                 lda.# 007fff         
 119:000 | DONE ins | na 16 16 | 0060a2 | 1b          |                 tcs                  
 120:000 | DONE wsp | na 16 16 |        |             |
 121:000 | DONE cmt | na 16 16 |        |             |                 ; make sure Instruction Pointer is empty
 122:000 | DONE cmt | na 16 16 |        |             |                 ; TODO move this someplace else or else it will end up in ROM
 123:000 | DONE ins | na 16 16 | 0060a3 | 9c 22 66    |                 stz 006622           
 124:000 | DONE wsp | na 16 16 |        |             |
 125:000 | DONE cmt | na 16 16 |        |             |                 ; switch SOURCE-ID to zero (keyboard input)
 126:000 | DONE ins | na 16 16 | 0060a6 | 64 0a       |                 stz.d 00020a         
 127:000 | DONE wsp | na 16 16 |        |             |
 128:000 | DONE cmt | na 16 16 |        |             |                 ; switch to interpret state (STATE is zero)
 129:000 | DONE ins | na 16 16 | 0060a8 | 64 14       |                 stz.d 000214         
 130:000 | DONE wsp | na 16 16 |        |             |
 131:000 | DONE lbl | na 16 16 | 0060aa |             | quit_get_line                        
 132:000 | DONE cmt | na 16 16 |        |             |                 ; Empty current input buffer. Note the previous input line is
 133:000 | DONE cmt | na 16 16 |        |             |                 ; conserved even if we came here from an abort
 134:000 | DONE ins | na 16 16 | 0060aa | 64 0e       |                 stz.d 00020e         
 135:000 | DONE wsp | na 16 16 |        |             |
 136:000 | DONE cmt | na 16 16 |        |             |                 ; Accept a line from the current input source
 137:000 | DONE ins | na 16 16 | 0060ac | 20 1c 68    |                 jsr 00681c           ( -- f )
 138:000 | DONE wsp | na 16 16 |        |             |
 139:000 | DONE ins | na 16 16 | 0060af | 98          |                 tya                  force flag test
 140:000 | DONE ins | na 16 16 | 0060b0 | d0 06       |                 bne 0060b8           
 141:000 | DONE wsp | na 16 16 |        |             |
 142:000 | DONE cmt | na 16 16 |        |             |                 ; If REFILL returned a FALSE flag, something went wrong and we
 143:000 | DONE cmt | na 16 16 |        |             |                 ; need to print an error message and reset the machine. We don't
 144:000 | DONE cmt | na 16 16 |        |             |                 ; need to save TOS because we're going to clobber it anyway when we
 145:000 | DONE cmt | na 16 16 |        |             |                 ; go back to ABORT.
 146:000 | DONE ins | na 16 16 | 0060b2 | a9 e8 76    |                 lda.# 0076e8         
 147:000 | DONE ins | na 16 16 | 0060b5 | 4c d9 70    |                 jmp 0070d9           
 148:000 | DONE wsp | na 16 16 |        |             |
 149:000 | DONE wsp | na 16 16 |        |             |
 150:000 | DONE lbl | na 16 16 | 0060b8 |             | quit_refill_successful               
 151:000 | DONE cmt | na 16 16 |        |             |                 ; Assume we have successfully accepted a string of input from
 152:000 | DONE cmt | na 16 16 |        |             |                 ; a source, with address of buffer in cib and length of input in
 153:000 | DONE cmt | na 16 16 |        |             |                 ; ciblen. We arrive here still with the TRUE flag from REFILL as
 154:000 | DONE cmt | na 16 16 |        |             |                 ; TOS (in Y)
 155:000 | DONE ins | na 16 16 | 0060b8 | b4 00       |                 ldy.dx 00            drop TOS
 156:000 | DONE ins | na 16 16 | 0060ba | e8          |                 inx                  
 157:000 | DONE ins | na 16 16 | 0060bb | e8          |                 inx                  
 158:000 | DONE wsp | na 16 16 |        |             |
 159:000 | DONE cmt | na 16 16 |        |             |                 ; make >IN point to begining of buffer
 160:000 | DONE ins | na 16 16 | 0060bc | 64 12       |                 stz.d 000212         
 161:000 | DONE wsp | na 16 16 |        |             |
 162:000 | DONE cmt | na 16 16 |        |             |                 ; Main compile/execute routine. Consider moving this inside QUIT
 163:000 | DONE cmt | na 16 16 |        |             |                 ; once we know everything works
 164:000 | DONE ins | na 16 16 | 0060be | 20 67 70    |                 jsr 007067           
 165:000 | DONE wsp | na 16 16 |        |             |
 166:000 | DONE cmt | na 16 16 |        |             |                 ; Test for Data Stack underflow. Our stack is so large in single
 167:000 | DONE cmt | na 16 16 |        |             |                 ; user mode that we don't bother checking for overflow - if that
 168:000 | DONE cmt | na 16 16 |        |             |                 ; happens, we're screwed anyway
 169:000 | DONE ins | na 16 16 | 0060c1 | e0 f9 02    |                 cpx.# 0002f9         
 170:000 | DONE ins | na 16 16 | 0060c4 | 90 06       |                 bcc 0060cc           DSP must always be smaller (!) than DSP0
 171:000 | DONE wsp | na 16 16 |        |             |
 172:000 | DONE ins | na 16 16 | 0060c6 | a9 4e 77    |                 lda.# 00774e         
 173:000 | DONE ins | na 16 16 | 0060c9 | 4c d9 70    |                 jmp 0070d9           
 174:000 | DONE wsp | na 16 16 |        |             |
 175:000 | DONE lbl | na 16 16 | 0060cc |             | quit_ok                              
 176:000 | DONE cmt | na 16 16 |        |             |                 ; Display system prompt if all went well. If we're interpreting,
 177:000 | DONE cmt | na 16 16 |        |             |                 ; this is " ok", if we're compiling, it's " compiled"
 178:000 | DONE ins | na 16 16 | 0060cc | a5 14       |                 lda.d 000214         
 179:000 | DONE ins | na 16 16 | 0060ce | d0 05       |                 bne 0060d5           
 180:000 | DONE wsp | na 16 16 |        |             |
 181:000 | DONE ins | na 16 16 | 0060d0 | a9 14 76    |                 lda.# 007614         
 182:000 | DONE ins | na 16 16 | 0060d3 | 80 03       |                 bra 0060d8           
 183:000 | DONE lbl | na 16 16 | 0060d5 |             | quit_compiled                        
 184:000 | DONE ins | na 16 16 | 0060d5 | a9 18 76    |                 lda.# 007618         fall through to quit_print
 185:000 | DONE lbl | na 16 16 | 0060d8 |             | quit_print                           
 186:000 | DONE ins | na 16 16 | 0060d8 | 20 df 70    |                 jsr 0070df           
 187:000 | DONE wsp | na 16 16 |        |             |
 188:000 | DONE cmt | na 16 16 |        |             |                 ; Awesome line, everybody. Now get the next one
 189:000 | DONE ins | na 16 16 | 0060db | 4c aa 60    |                 jmp 0060aa           
 190:000 | DONE wsp | na 16 16 |        |             |
 191:000 | DONE lbl | na 16 16 | 0060de |             | z_cold                               
 192:000 | DONE lbl | na 16 16 | 0060de |             | z_abort                              
 193:000 | DONE lbl | na 16 16 | 0060de |             | z_quit                               
 193:001 | DONE ins | na 16 16 | 0060de | ea          |                 nop                  dummy for compilation, TODO test if required
 194:000 | DONE wsp | na 16 16 |        |             |
 195:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 196:000 | DONE cmt | na 16 16 |        |             | ; < "LESS" ( n m -- f ) X bytes / X cycles
 197:000 | DONE cmt | na 16 16 |        |             | ; Return true flag if NOS < TOS. See
 198:000 | DONE cmt | na 16 16 |        |             | ; http://www.6502.org/tutorials/compare_beyond.html for details on the
 199:000 | DONE cmt | na 16 16 |        |             | ; comparisons
 200:000 | DONE lbl | na 16 16 | 0060df |             | xt_less                              
 201:000 | DONE ins | na 16 16 | 0060df | 98          |                 tya                  
 202:000 | DONE ins | na 16 16 | 0060e0 | a0 00 00    |                 ldy.# 0000           default is false
 203:000 | DONE wsp | na 16 16 |        |             |
 204:000 | DONE ins | na 16 16 | 0060e3 | 38          |                 sec                  
 205:000 | DONE ins | na 16 16 | 0060e4 | f5 00       |                 sbc.dx 00            
 206:000 | DONE ins | na 16 16 | 0060e6 | f0 08       |                 beq 0060f0           the same is not greater
 207:000 | DONE ins | na 16 16 | 0060e8 | 50 03       |                 bvc 0060ed           no overflow, skip ahead
 208:000 | DONE wsp | na 16 16 |        |             |
 209:000 | DONE cmt | na 16 16 |        |             |                 ; Deal with oveflow because we use signed numbers
 210:000 | DONE ins | na 16 16 | 0060ea | 49 00 80    |                 eor.# 8000           compliment negative flag
 211:000 | DONE wsp | na 16 16 |        |             |
 212:000 | DONE lbl | na 16 16 | 0060ed |             | xt_less_no_ov                        
 213:000 | DONE cmt | na 16 16 |        |             |                 ; if we're negative TOS > NOS
 214:000 | DONE ins | na 16 16 | 0060ed | 30 01       |                 bmi 0060f0           
 215:000 | DONE ins | na 16 16 | 0060ef | 88          |                 dey                  
 216:000 | DONE lbl | na 16 16 | 0060f0 |             | xt_less_nip                          
 217:000 | DONE ins | na 16 16 | 0060f0 | e8          |                 inx                  
 218:000 | DONE ins | na 16 16 | 0060f1 | e8          |                 inx                  
 219:000 | DONE wsp | na 16 16 |        |             |
 220:000 | DONE lbl | na 16 16 | 0060f2 |             | z_less                               
 220:001 | DONE ins | na 16 16 | 0060f2 | 60          |                 rts                  
 221:000 | DONE wsp | na 16 16 |        |             |
 222:000 | DONE wsp | na 16 16 |        |             |
 223:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 224:000 | DONE cmt | na 16 16 |        |             | ; <> "NOT-EQUAL" ( n m -- f ) X bytes / X cycles
 225:000 | DONE cmt | na 16 16 |        |             | ; Return true flag if TOS and NOS are not the same. This is just a different
 226:000 | DONE cmt | na 16 16 |        |             | ; version of EQUAL, we repeat the code for speed reasons
 227:000 | DONE lbl | na 16 16 | 0060f3 |             | xt_not-equal                         
 228:000 | DONE ins | na 16 16 | 0060f3 | 98          |                 tya                  
 229:000 | DONE ins | na 16 16 | 0060f4 | a0 00 00    |                 ldy.# 0000           default value is false
 230:000 | DONE wsp | na 16 16 |        |             |
 231:000 | DONE ins | na 16 16 | 0060f7 | d5 00       |                 cmp.dx 00            
 232:000 | DONE ins | na 16 16 | 0060f9 | f0 01       |                 beq 0060fc           
 233:000 | DONE ins | na 16 16 | 0060fb | 88          |                 dey                  wraps to 0FFFF (true)
 234:000 | DONE wsp | na 16 16 |        |             |
 235:000 | DONE lbl | na 16 16 | 0060fc |             | not-equal_equal                      ; yes, this is a silly name
 236:000 | DONE ins | na 16 16 | 0060fc | e8          |                 inx                  
 237:000 | DONE ins | na 16 16 | 0060fd | e8          |                 inx                  
 238:000 | DONE wsp | na 16 16 |        |             |
 239:000 | DONE lbl | na 16 16 | 0060fe |             | z_not-equal                          
 239:001 | DONE ins | na 16 16 | 0060fe | 60          |                 rts                  
 240:000 | DONE wsp | na 16 16 |        |             |
 241:000 | DONE wsp | na 16 16 |        |             |
 242:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 243:000 | DONE cmt | na 16 16 |        |             | ; <# "LESSNUMBER" ( -- ) 8 bytes / X cycles
 244:000 | DONE cmt | na 16 16 |        |             | ; Start the process to create pictured numeric output. The new string is
 245:000 | DONE cmt | na 16 16 |        |             | ; constructed from back to front, saving the new character at the beginning of
 246:000 | DONE cmt | na 16 16 |        |             | ; the output string. Since we use PAD as a starting address and work backward
 247:000 | DONE cmt | na 16 16 |        |             | ; (!), the string is constructed in the space between the end of the dictionary
 248:000 | DONE cmt | na 16 16 |        |             | ; (as defined by CP) and the PAD. This allows us to satisfy the ANS Forth
 249:000 | DONE cmt | na 16 16 |        |             | ; condition that programs don't fool around with the PAD but still use its
 250:000 | DONE cmt | na 16 16 |        |             | ; address. Code based on pForth, see
 251:000 | DONE cmt | na 16 16 |        |             | ; http://pforth.googlecode.com/svn/trunk/fth/numberio.fth pForth is in the pubic
 252:000 | DONE cmt | na 16 16 |        |             | ; domain. Forth is : <# PAD HLD ! ; we use the internal variable tohold instead
 253:000 | DONE cmt | na 16 16 |        |             | ; of HLD.
 254:000 | DONE lbl | na 16 16 | 0060ff |             | xt_lessnumber                        
 255:000 | DONE ins | na 16 16 | 0060ff | 20 48 67    |                 jsr 006748           
 256:000 | DONE ins | na 16 16 | 006102 | 84 28       |                 sty.d 000228         
 257:000 | DONE ins | na 16 16 | 006104 | b4 00       |                 ldy.dx 00            
 258:000 | DONE ins | na 16 16 | 006106 | e8          |                 inx                  
 259:000 | DONE ins | na 16 16 | 006107 | e8          |                 inx                  
 260:000 | DONE wsp | na 16 16 |        |             |
 261:000 | DONE lbl | na 16 16 | 006108 |             | z_lessnumber                         
 261:001 | DONE ins | na 16 16 | 006108 | 60          |                 rts                  
 262:000 | DONE wsp | na 16 16 |        |             |
 263:000 | DONE wsp | na 16 16 |        |             |
 264:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 265:000 | DONE cmt | na 16 16 |        |             | ; > "GREATER" ( n m -- f ) X bytes / X cycles
 266:000 | DONE cmt | na 16 16 |        |             | ; Return true flag if NOS > TOS. See
 267:000 | DONE cmt | na 16 16 |        |             | ; http://www.6502.org/tutorials/compare_beyond.html for details on the
 268:000 | DONE cmt | na 16 16 |        |             | ; comparisons
 269:000 | DONE lbl | na 16 16 | 006109 |             | xt_greater                           
 270:000 | DONE ins | na 16 16 | 006109 | 98          |                 tya                  
 271:000 | DONE ins | na 16 16 | 00610a | a0 00 00    |                 ldy.# 0000           default is false
 272:000 | DONE wsp | na 16 16 |        |             |
 273:000 | DONE ins | na 16 16 | 00610d | 38          |                 sec                  
 274:000 | DONE ins | na 16 16 | 00610e | f5 00       |                 sbc.dx 00            
 275:000 | DONE ins | na 16 16 | 006110 | f0 08       |                 beq 00611a           the same is not greater
 276:000 | DONE ins | na 16 16 | 006112 | 50 03       |                 bvc 006117           no overflow, skip ahead
 277:000 | DONE wsp | na 16 16 |        |             |
 278:000 | DONE cmt | na 16 16 |        |             |                 ; Deal with oveflow because we use signed numbers
 279:000 | DONE ins | na 16 16 | 006114 | 49 00 80    |                 eor.# 8000           compliment negative flag
 280:000 | DONE wsp | na 16 16 |        |             |
 281:000 | DONE lbl | na 16 16 | 006117 |             | xt_greater_no_ov                     
 282:000 | DONE cmt | na 16 16 |        |             |                 ; if we're still positiv, TOS < NOS
 283:000 | DONE ins | na 16 16 | 006117 | 10 01       |                 bpl 00611a           
 284:000 | DONE ins | na 16 16 | 006119 | 88          |                 dey                  
 285:000 | DONE lbl | na 16 16 | 00611a |             | xt_greater_nip                       
 286:000 | DONE ins | na 16 16 | 00611a | e8          |                 inx                  
 287:000 | DONE ins | na 16 16 | 00611b | e8          |                 inx                  
 288:000 | DONE wsp | na 16 16 |        |             |
 289:000 | DONE lbl | na 16 16 | 00611c |             | z_greater                            
 289:001 | DONE ins | na 16 16 | 00611c | 60          |                 rts                  
 290:000 | DONE wsp | na 16 16 |        |             |
 291:000 | DONE wsp | na 16 16 |        |             |
 292:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 293:000 | DONE cmt | na 16 16 |        |             | ; >IN "TO-IN" ( -- addr ) 6 bytes / 12 cycles
 294:000 | DONE cmt | na 16 16 |        |             | ; Return address where pointer to current char in input buffer lives (>IN)
 295:000 | DONE lbl | na 16 16 | 00611d |             | xt_to-in                             
 296:000 | DONE ins | na 16 16 | 00611d | ca          |                 dex                  
 297:000 | DONE ins | na 16 16 | 00611e | ca          |                 dex                  
 298:000 | DONE ins | na 16 16 | 00611f | 94 00       |                 sty.dx 00            
 299:000 | DONE wsp | na 16 16 |        |             |
 300:000 | DONE ins | na 16 16 | 006121 | a0 12 02    |                 ldy.# 000212         >IN
 301:000 | DONE lbl | na 16 16 | 006124 |             | z_to-in                              
 301:001 | DONE ins | na 16 16 | 006124 | 60          |                 rts                  
 302:000 | DONE wsp | na 16 16 |        |             |
 303:000 | DONE wsp | na 16 16 |        |             |
 304:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 305:000 | DONE cmt | na 16 16 |        |             | ; >R "TOR" ( n -- ) (R: -- n )  7 bytes / 22 cycles
 306:000 | DONE cmt | na 16 16 |        |             | ; Move Top of Data Stack to Top of Return Stack
 307:000 | DONE cmt | na 16 16 |        |             | ; TODO consider stripping PHA/PLA if natively compiled (see COMPILE,)
 308:000 | DONE lbl | na 16 16 | 006125 |             | xt_tor                               
 309:000 | DONE dir | na 16 16 |        |             |         .!a16                        
 310:000 | DONE cmt | na 16 16 |        |             |                 ; Save the return address. If this word is natively coded, this
 311:000 | DONE cmt | na 16 16 |        |             |                 ; is a complete waste of nine cycles, but required for
 312:000 | DONE cmt | na 16 16 |        |             |                 ; subroutine coding
 313:000 | DONE ins | na 16 16 | 006125 | 68          |                 pla                  
 314:000 | DONE wsp | na 16 16 |        |             |
 315:000 | DONE ins | na 16 16 | 006126 | 5a          |                 phy                  the actual work
 316:000 | DONE wsp | na 16 16 |        |             |
 317:000 | DONE ins | na 16 16 | 006127 | b4 00       |                 ldy.dx 00            DROP
 318:000 | DONE ins | na 16 16 | 006129 | e8          |                 inx                  
 319:000 | DONE ins | na 16 16 | 00612a | e8          |                 inx                  
 320:000 | DONE wsp | na 16 16 |        |             |
 321:000 | DONE ins | na 16 16 | 00612b | 48          |                 pha                  put return address back in place
 322:000 | DONE wsp | na 16 16 |        |             |
 323:000 | DONE lbl | na 16 16 | 00612c |             | z_tor                                
 323:001 | DONE ins | na 16 16 | 00612c | 60          |                 rts                  
 324:000 | DONE wsp | na 16 16 |        |             |
 325:000 | DONE wsp | na 16 16 |        |             |
 326:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 327:000 | DONE cmt | na 16 16 |        |             | ; . "DOT" ( n -- ) X bytes / X cycles
 328:000 | DONE cmt | na 16 16 |        |             | ; Print value that is TOS followed by a single space. Forth code is
 329:000 | DONE cmt | na 16 16 |        |             | ; DUP ABS 0 <# #S ROT SIGN #> TYPE SPACE  Based on
 330:000 | DONE cmt | na 16 16 |        |             | ; https://github.com/philburk/pforth/blob/master/fth/numberio.fth
 331:000 | DONE cmt | na 16 16 |        |             | ; Since this is used interactively, and humans are slow (just ask GlaDOS), we
 332:000 | DONE cmt | na 16 16 |        |             | ; focus on size.
 333:000 | DONE cmt | na 16 16 |        |             | ; TODO Once we know this works, move to assembler
 334:000 | DONE lbl | na 16 16 | 00612d |             | xt_dot                               
 335:000 | DONE ins | na 16 16 | 00612d | 20 ee 65    |                 jsr 0065ee           ( n n )
 336:000 | DONE ins | na 16 16 | 006130 | 20 27 63    |                 jsr 006327           ( n n )
 337:000 | DONE ins | na 16 16 | 006133 | 20 8b 62    |                 jsr 00628b           ( n n 0 )
 338:000 | DONE ins | na 16 16 | 006136 | 20 ff 60    |                 jsr 0060ff           ( n n 0 )
 339:000 | DONE ins | na 16 16 | 006139 | 20 27 62    |                 jsr 006227           ( n ud )
 340:000 | DONE ins | na 16 16 | 00613c | 20 4f 68    |                 jsr 00684f           ( ud n )
 341:000 | DONE ins | na 16 16 | 00613f | 20 7a 68    |                 jsr 00687a           ( ud )
 342:000 | DONE ins | na 16 16 | 006142 | 20 18 62    |                 jsr 006218           
 343:000 | DONE ins | na 16 16 | 006145 | 20 38 69    |                 jsr 006938           
 344:000 | DONE ins | na 16 16 | 006148 | 20 fd 68    |                 jsr 0068fd           
 345:000 | DONE wsp | na 16 16 |        |             |
 346:000 | DONE lbl | na 16 16 | 00614b |             | z_dot                                
 346:001 | DONE ins | na 16 16 | 00614b | 60          |                 rts                  
 347:000 | DONE wsp | na 16 16 |        |             |
 348:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 349:000 | DONE cmt | na 16 16 |        |             | ; .( "DOTPAREN" ( "string" -- ) 13 bytes / X cycles
 350:000 | DONE cmt | na 16 16 |        |             | ; Display string delimited by ")" immediately, regardless if word is compiled or
 351:000 | DONE cmt | na 16 16 |        |             | ; interpreted. Forth definition is  .( [CHAR] ) PARSE TYPE ; IMMEDIATE
 352:000 | DONE cmt | na 16 16 |        |             | ; TODO Decide if this should be a high-level word
 353:000 | DONE lbl | na 16 16 | 00614c |             | xt_dotparen                          
 354:000 | DONE cmt | na 16 16 |        |             |                ; use PARSE to find the end of the string
 355:000 | DONE ins | na 16 16 | 00614c | ca          |                 dex                  
 356:000 | DONE ins | na 16 16 | 00614d | ca          |                 dex                  
 357:000 | DONE ins | na 16 16 | 00614e | 94 00       |                 sty.dx 00            
 358:000 | DONE ins | na 16 16 | 006150 | a0 29 00    |                 ldy.# 29             
 359:000 | DONE wsp | na 16 16 |        |             |
 360:000 | DONE ins | na 16 16 | 006153 | 20 93 67    |                 jsr 006793           ( -- addr u)
 361:000 | DONE ins | na 16 16 | 006156 | 20 38 69    |                 jsr 006938           
 362:000 | DONE wsp | na 16 16 |        |             |
 363:000 | DONE lbl | na 16 16 | 006159 |             | z_dotparen                           
 363:001 | DONE ins | na 16 16 | 006159 | 60          |                 rts                  
 364:000 | DONE wsp | na 16 16 |        |             |
 365:000 | DONE wsp | na 16 16 |        |             |
 366:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 367:000 | DONE cmt | na 16 16 |        |             | ; ." "DOTQUOTE" ( -- ) X bytes / X cycles
 368:000 | DONE cmt | na 16 16 |        |             | ; Compile string that is printed during run time. ANSI Forth wants this to be
 369:000 | DONE cmt | na 16 16 |        |             | ; compile-only, even though everybody and their friend uses it for everything.
 370:000 | DONE cmt | na 16 16 |        |             | ; We follow the book here, and recommend .( for general printing.
 371:000 | DONE lbl | na 16 16 | 00615a |             | xt_dotquote                          
 372:000 | DONE ins | na 16 16 | 00615a | ca          |                 dex                  
 373:000 | DONE ins | na 16 16 | 00615b | ca          |                 dex                  
 374:000 | DONE ins | na 16 16 | 00615c | 94 00       |                 sty.dx 00            
 375:000 | DONE ins | na 16 16 | 00615e | a0 22 00    |                 ldy.# 0022           ASCII for "
 376:000 | DONE wsp | na 16 16 |        |             |
 377:000 | DONE ins | na 16 16 | 006161 | 20 93 67    |                 jsr 006793           
 378:000 | DONE ins | na 16 16 | 006164 | 20 88 68    |                 jsr 006888           
 379:000 | DONE wsp | na 16 16 |        |             |
 380:000 | DONE ins | na 16 16 | 006167 | f4 38 69    |                 phe.# 006938         
 381:000 | DONE ins | na 16 16 | 00616a | 20 b8 70    |                 jsr 0070b8           
 382:000 | DONE wsp | na 16 16 |        |             |
 383:000 | DONE ins | na 16 16 | 00616d | 60          |                 rts                  
 384:000 | DONE lbl | na 16 16 | 00616e |             | z_dotquote                           
 385:000 | DONE wsp | na 16 16 |        |             |
 386:000 | DONE wsp | na 16 16 |        |             |
 387:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 388:000 | DONE cmt | na 16 16 |        |             | ; .S "DOTS" ( -- ) X bytes / X cycles
 389:000 | DONE cmt | na 16 16 |        |             | ; Print content of Data Stack non-distructively. Since this is for humans, we
 390:000 | DONE cmt | na 16 16 |        |             | ; don't have to worry about speed. We follow the format of Gforth
 391:000 | DONE cmt | na 16 16 |        |             | ; and print the number of elements first in brackets, followed by the Data Stack
 392:000 | DONE cmt | na 16 16 |        |             | ; content (if present).
 393:000 | DONE lbl | na 16 16 | 00616e |             | xt_dots                              
 394:000 | DONE dir | na 16 16 |        |             |         .!a16                        
 395:000 | DONE dir | na 16 16 |        |             |         .!xy16                       
 396:000 | DONE ins | na 16 16 | 00616e | 20 7c 65    |                 jsr 00657c           ( -- u)
 397:000 | DONE wsp | na 16 16 |        |             |
 398:000 | DONE cmt | na 16 16 |        |             |                 ; Print stack depth in brackets
 399:000 | DONE cmt | na 16 16 |        |             |                 ; TODO rewrite this to use EMIT
 400:000 | DONE ins | na 16 16 | 006171 | a9 3c 00    |                 lda.# 3c             
 401:000 | DONE ins | na 16 16 | 006174 | 20 36 60    |                 jsr 006036           
 402:000 | DONE wsp | na 16 16 |        |             |
 403:000 | DONE cmt | na 16 16 |        |             |                 ; --- TEMP print routine ---
 404:000 | DONE ins | na 16 16 | 006177 | 98          |                 tya                  
 405:000 | DONE ins | na 16 16 | 006178 | 29 00 ff    |                 and.# 0ff00          
 406:000 | DONE ins | na 16 16 | 00617b | eb          |                 xba                  
 407:000 | DONE ins | na 16 16 | 00617c | 20 f7 70    |                 jsr 0070f7           
 408:000 | DONE ins | na 16 16 | 00617f | 98          |                 tya                  
 409:000 | DONE ins | na 16 16 | 006180 | 29 ff 00    |                 and.# 00ff           
 410:000 | DONE ins | na 16 16 | 006183 | 20 f7 70    |                 jsr 0070f7           
 411:000 | DONE cmt | na 16 16 |        |             |                 ; --- TEMP print routine ---
 412:000 | DONE wsp | na 16 16 |        |             |
 413:000 | DONE cmt | na 16 16 |        |             |                 ; TODO rewrite this to use EMIT
 414:000 | DONE ins | na 16 16 | 006186 | a9 3e 00    |                 lda.# 3e             
 415:000 | DONE ins | na 16 16 | 006189 | 20 36 60    |                 jsr 006036           
 416:000 | DONE ins | na 16 16 | 00618c | 20 fd 68    |                 jsr 0068fd           
 417:000 | DONE wsp | na 16 16 |        |             |
 418:000 | DONE wsp | na 16 16 |        |             |
 419:000 | DONE cmt | na 16 16 |        |             |                 ; There will be a lot of cases where .S is used when the stack
 420:000 | DONE cmt | na 16 16 |        |             |                 ; is empty. Get them first and exit quickly
 421:000 | DONE ins | na 16 16 | 00618f | 98          |                 tya                  force flag test
 422:000 | DONE ins | na 16 16 | 006190 | f0 20       |                 beq 0061b2           
 423:000 | DONE wsp | na 16 16 |        |             |
 424:000 | DONE lbl | na 16 16 | 006192 |             | dots_not_empty                       
 425:000 | DONE cmt | na 16 16 |        |             |                 ; We have at least one element on the stack, which used to be in
 426:000 | DONE cmt | na 16 16 |        |             |                 ; Y as TOS, but is now NOS and therefore accessable by X. Also,
 427:000 | DONE cmt | na 16 16 |        |             |                 ; the depth of the Data Stack is already in Y waiting to be used
 428:000 | DONE cmt | na 16 16 |        |             |                 ; as a counter. We use this to our advantage.
 429:000 | DONE wsp | na 16 16 |        |             |
 430:000 | DONE cmt | na 16 16 |        |             |                 ; Normally we would go with STX.D tmptos / LDX.D tmptos with
 431:000 | DONE cmt | na 16 16 |        |             |                 ; 4 bytes and 8 cycles because we value speed over size.
 432:000 | DONE cmt | na 16 16 |        |             |                 ; However, .S is used interactively, and humans
 433:000 | DONE cmt | na 16 16 |        |             |                 ; won't notice the one cycle more of PHX/PLX (2 bytes,
 434:000 | DONE cmt | na 16 16 |        |             |                 ; 9 cycles), and we save the two bytes.
 435:000 | DONE ins | na 16 16 | 006192 | da          |                 phx                  
 436:000 | DONE wsp | na 16 16 |        |             |
 437:000 | DONE cmt | na 16 16 |        |             |                 ; We print from the bottom up. Note that the Data Stack locations
 438:000 | DONE cmt | na 16 16 |        |             |                 ; dsp0 and dsp0+2 always contain garbage so they can be skipped.
 439:000 | DONE cmt | na 16 16 |        |             |                 ; See docs/INTERNALS.md for details
 440:000 | DONE ins | na 16 16 | 006193 | a2 f8 02    |                 ldx.# 0002f8         points to dsp0, which is garbage
 441:000 | DONE ins | na 16 16 | 006196 | ca          |                 dex                  
 442:000 | DONE ins | na 16 16 | 006197 | ca          |                 dex                  points to dsp0-2, which is also garbage
 443:000 | DONE wsp | na 16 16 |        |             |
 444:000 | DONE lbl | na 16 16 | 006198 |             | dots_loop                            
 445:000 | DONE ins | na 16 16 | 006198 | ca          |                 dex                  get next element on DS, initially dsp0-4
 446:000 | DONE ins | na 16 16 | 006199 | ca          |                 dex                  
 447:000 | DONE wsp | na 16 16 |        |             |
 448:000 | DONE cmt | na 16 16 |        |             |                 ; --- TEMP print routine ---
 449:000 | DONE cmt | na 16 16 |        |             |                 ; TODO call EMIT
 450:000 | DONE ins | na 16 16 | 00619a | b5 00       |                 lda.dx 00            
 451:000 | DONE ins | na 16 16 | 00619c | 29 00 ff    |                 and.# 0ff00          
 452:000 | DONE ins | na 16 16 | 00619f | eb          |                 xba                  
 453:000 | DONE ins | na 16 16 | 0061a0 | 20 f7 70    |                 jsr 0070f7           
 454:000 | DONE ins | na 16 16 | 0061a3 | b5 00       |                 lda.dx 00            
 455:000 | DONE ins | na 16 16 | 0061a5 | 29 ff 00    |                 and.# 00ff           
 456:000 | DONE ins | na 16 16 | 0061a8 | 20 f7 70    |                 jsr 0070f7           
 457:000 | DONE ins | na 16 16 | 0061ab | 20 fd 68    |                 jsr 0068fd           
 458:000 | DONE cmt | na 16 16 |        |             |                 ; --- TEMP print routine ---
 459:000 | DONE wsp | na 16 16 |        |             |
 460:000 | DONE ins | na 16 16 | 0061ae | 88          |                 dey                  
 461:000 | DONE ins | na 16 16 | 0061af | d0 e7       |                 bne 006198           
 462:000 | DONE wsp | na 16 16 |        |             |
 463:000 | DONE ins | na 16 16 | 0061b1 | fa          |                 plx                  restore original DSP
 464:000 | DONE wsp | na 16 16 |        |             |
 465:000 | DONE lbl | na 16 16 | 0061b2 |             | dots_done                            
 466:000 | DONE cmt | na 16 16 |        |             |                 ; Clean up. Again, we don't care about speed in this
 467:000 | DONE cmt | na 16 16 |        |             |                 ; word so we save one byte by doing DROP the slow way
 468:000 | DONE ins | na 16 16 | 0061b2 | 20 c2 65    |                 jsr 0065c2           
 469:000 | DONE wsp | na 16 16 |        |             |
 470:000 | DONE lbl | na 16 16 | 0061b5 |             | z_dots                               
 470:001 | DONE ins | na 16 16 | 0061b5 | 60          |                 rts                  
 471:000 | DONE wsp | na 16 16 |        |             |
 472:000 | DONE wsp | na 16 16 |        |             |
 473:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 474:000 | DONE cmt | na 16 16 |        |             | ; , "COMMA" ( n -- ) 11 bytes / 29 cycles
 475:000 | DONE cmt | na 16 16 |        |             | ; Allot one cell and store TOS in memory. We ignore alignment issues, though
 476:000 | DONE cmt | na 16 16 |        |             | ; satisfy the ANSI requirement that an aligned compiler pointer will remain
 477:000 | DONE cmt | na 16 16 |        |             | ; aligned
 478:000 | DONE cmt | na 16 16 |        |             | ; There is another variant possible:
 479:000 | DONE cmt | na 16 16 |        |             | ;               tya
 480:000 | DONE cmt | na 16 16 |        |             | ;               ldy.d cp
 481:000 | DONE cmt | na 16 16 |        |             | ;               sta.y 0000
 482:000 | DONE cmt | na 16 16 |        |             | ;               iny
 483:000 | DONE cmt | na 16 16 |        |             | ;               iny
 484:000 | DONE cmt | na 16 16 |        |             | ;               sty.d cp
 485:000 | DONE cmt | na 16 16 |        |             | ;               ldy.dx 00
 486:000 | DONE cmt | na 16 16 |        |             | ;               inx
 487:000 | DONE cmt | na 16 16 |        |             | ;               inx
 488:000 | DONE cmt | na 16 16 |        |             | ; This is as fast as the variant below, but three bytes longer
 489:000 | DONE lbl | na 16 16 | 0061b6 |             | xt_comma                             
 490:000 | DONE dir | na 16 16 |        |             |         .!a16                        
 491:000 | DONE ins | na 16 16 | 0061b6 | 98          |                 tya                  
 492:000 | DONE ins | na 16 16 | 0061b7 | 92 00       |                 sta.di 000200        STA (CP)
 493:000 | DONE ins | na 16 16 | 0061b9 | e6 00       |                 inc.d 000200         
 494:000 | DONE ins | na 16 16 | 0061bb | e6 00       |                 inc.d 000200         
 495:000 | DONE wsp | na 16 16 |        |             |
 496:000 | DONE ins | na 16 16 | 0061bd | b4 00       |                 ldy.dx 00            
 497:000 | DONE ins | na 16 16 | 0061bf | e8          |                 inx                  
 498:000 | DONE ins | na 16 16 | 0061c0 | e8          |                 inx                  
 499:000 | DONE wsp | na 16 16 |        |             |
 500:000 | DONE lbl | na 16 16 | 0061c1 |             | z_comma                              
 500:001 | DONE ins | na 16 16 | 0061c1 | 60          |                 rts                  
 501:000 | DONE wsp | na 16 16 |        |             |
 502:000 | DONE wsp | na 16 16 |        |             |
 503:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 504:000 | DONE cmt | na 16 16 |        |             | ; : "COLON" ( "name" -- ) X bytes / X cycles
 505:000 | DONE cmt | na 16 16 |        |             | ; Start compilation of new word into the Dictionary. Use the CREATE routine
 506:000 | DONE cmt | na 16 16 |        |             | ; and fill in the rest by hand.
 507:000 | DONE lbl | na 16 16 | 0061c2 |             | xt_colon                             
 508:000 | DONE dir | na 16 16 |        |             |         .!a16                        
 509:000 | DONE cmt | na 16 16 |        |             |                 ; if we are already in compile mode, complain and abort
 510:000 | DONE ins | na 16 16 | 0061c2 | a5 14       |                 lda.d 000214         
 511:000 | DONE ins | na 16 16 | 0061c4 | f0 06       |                 beq 0061cc           
 512:000 | DONE wsp | na 16 16 |        |             |
 513:000 | DONE ins | na 16 16 | 0061c6 | a9 36 77    |                 lda.# 007736         
 514:000 | DONE ins | na 16 16 | 0061c9 | 4c d9 70    |                 jmp 0070d9           
 515:000 | DONE lbl | na 16 16 | 0061cc |             | @                                    
 516:000 | DONE cmt | na 16 16 |        |             |                 ; Switch to compile state. From now on, everything goes in the
 517:000 | DONE cmt | na 16 16 |        |             |                 ; Dictionary
 518:000 | DONE ins | na 16 16 | 0061cc | e6 14       |                 inc.d 000214         
 519:000 | DONE wsp | na 16 16 |        |             |
 520:000 | DONE cmt | na 16 16 |        |             |                 ; CREATE is going to change DP to point to the new word's
 521:000 | DONE cmt | na 16 16 |        |             |                 ; header. While this is fine for (say) variables, it would mean
 522:000 | DONE cmt | na 16 16 |        |             |                 ; that FIND-NAME etc would find a half-finished word when
 523:000 | DONE cmt | na 16 16 |        |             |                 ; looking in the Dictionary. To prevent this, we save the old
 524:000 | DONE cmt | na 16 16 |        |             |                 ; version of DP and restore it later. The new DP is placed in
 525:000 | DONE cmt | na 16 16 |        |             |                 ; the variable WORKWORD until we're finished with a SEMICOLON.
 526:000 | DONE ins | na 16 16 | 0061ce | a5 02       |                 lda.d 000202         
 527:000 | DONE ins | na 16 16 | 0061d0 | 48          |                 pha                  CREATE uses tmp1, tmp2 and tmp3
 528:000 | DONE wsp | na 16 16 |        |             |
 529:000 | DONE ins | na 16 16 | 0061d1 | 20 fc 64    |                 jsr 0064fc           
 530:000 | DONE wsp | na 16 16 |        |             |
 531:000 | DONE cmt | na 16 16 |        |             |                 ; Get the nt of the new word as described above. Only COLON,
 532:000 | DONE cmt | na 16 16 |        |             |                 ; SEMICOLON and RECURSE access WORKWORD
 533:000 | DONE ins | na 16 16 | 0061d4 | a5 02       |                 lda.d 000202         
 534:000 | DONE ins | na 16 16 | 0061d6 | 85 1e       |                 sta.d 00021e         
 535:000 | DONE ins | na 16 16 | 0061d8 | 68          |                 pla                  
 536:000 | DONE ins | na 16 16 | 0061d9 | 85 02       |                 sta.d 000202         
 537:000 | DONE wsp | na 16 16 |        |             |
 538:000 | DONE cmt | na 16 16 |        |             |                 ; CREATE includes a subroutine jump to DOVAR by default. We back
 539:000 | DONE cmt | na 16 16 |        |             |                 ; up three bytes and overwrite that. Note that 3 x DEC.D would
 540:000 | DONE cmt | na 16 16 |        |             |                 ; use 3 bytes and 18 cycles; this version uses 8 bytes but
 541:000 | DONE cmt | na 16 16 |        |             |                 ; only 13 cycles
 542:000 | DONE ins | na 16 16 | 0061db | a5 00       |                 lda.d 000200         
 543:000 | DONE ins | na 16 16 | 0061dd | 38          |                 sec                  
 544:000 | DONE ins | na 16 16 | 0061de | e9 03 00    |                 sbc.# 0003           
 545:000 | DONE ins | na 16 16 | 0061e1 | 85 00       |                 sta.d 000200         
 546:000 | DONE wsp | na 16 16 |        |             |
 547:000 | DONE lbl | na 16 16 | 0061e3 |             | z_colon                              
 547:001 | DONE ins | na 16 16 | 0061e3 | 60          |                 rts                  
 548:000 | DONE wsp | na 16 16 |        |             |
 549:000 | DONE wsp | na 16 16 |        |             |
 550:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 551:000 | DONE cmt | na 16 16 |        |             | ; ; "SEMICOLON" ( -- ) X bytes / X cycles
 552:000 | DONE cmt | na 16 16 |        |             | ; End the compilation of a new word into the Dictionary. When we enter this,
 553:000 | DONE cmt | na 16 16 |        |             | ; WORKWORD is pointing to the nt_ of this word in the Dictionary, DP to the
 554:000 | DONE cmt | na 16 16 |        |             | ; previous word, and CP to the next free byte.  A Forth definition would be
 555:000 | DONE cmt | na 16 16 |        |             | ; (see "Starting Forth"):
 556:000 | DONE cmt | na 16 16 |        |             | ;  : ;  POSTPONE EXIT  REVEAL POSTPONE ; [ ; IMMEDIATE
 557:000 | DONE lbl | na 16 16 | 0061e4 |             | xt_semicolon                         
 558:000 | DONE dir | na 16 16 |        |             |         .!a16                        
 559:000 | DONE ins | na 16 16 | 0061e4 | 84 06       |                 sty.d 000206         
 560:000 | DONE wsp | na 16 16 |        |             |
 561:000 | DONE cmt | na 16 16 |        |             |                 ; CP is the byte that will be the address we use in the header for
 562:000 | DONE cmt | na 16 16 |        |             |                 ; the end-of-compile address (z_word). This is six bytes down in
 563:000 | DONE cmt | na 16 16 |        |             |                 ; the header
 564:000 | DONE ins | na 16 16 | 0061e6 | a0 06 00    |                 ldy.# 0006           
 565:000 | DONE ins | na 16 16 | 0061e9 | a5 00       |                 lda.d 000200         
 566:000 | DONE ins | na 16 16 | 0061eb | 91 1e       |                 sta.diy 00021e       STA (WORKWORD),Y
 567:000 | DONE wsp | na 16 16 |        |             |
 568:000 | DONE cmt | na 16 16 |        |             |                 ; Add the RTS instruction to the end of the current word. We
 569:000 | DONE cmt | na 16 16 |        |             |                 ; don't have to switch the size of the A register because we
 570:000 | DONE cmt | na 16 16 |        |             |                 ; only move up the CP by one and the MSB will be overwritten.
 571:000 | DONE cmt | na 16 16 |        |             |                 ; Little endian MPUs for the win!
 572:000 | DONE ins | na 16 16 | 0061ed | a9 60 00    |                 lda.# 60             opcode for RTS
 573:000 | DONE ins | na 16 16 | 0061f0 | 92 00       |                 sta.di 000200        STA (CP)
 574:000 | DONE ins | na 16 16 | 0061f2 | e6 00       |                 inc.d 000200         MSB will be overwritten
 575:000 | DONE wsp | na 16 16 |        |             |
 576:000 | DONE cmt | na 16 16 |        |             |                 ; Word definition is complete. Make the new word the last one in
 577:000 | DONE cmt | na 16 16 |        |             |                 ; the Dictionary
 578:000 | DONE ins | na 16 16 | 0061f4 | a5 1e       |                 lda.d 00021e         
 579:000 | DONE ins | na 16 16 | 0061f6 | 85 02       |                 sta.d 000202         
 580:000 | DONE wsp | na 16 16 |        |             |
 581:000 | DONE cmt | na 16 16 |        |             |                 ; Get our TOS back
 582:000 | DONE ins | na 16 16 | 0061f8 | a4 06       |                 ldy.d 000206         
 583:000 | DONE wsp | na 16 16 |        |             |
 584:000 | DONE cmt | na 16 16 |        |             |                 ; Set compile flag back to zero so we're back in interpret mode
 585:000 | DONE ins | na 16 16 | 0061fa | 64 14       |                 stz.d 000214         
 586:000 | DONE wsp | na 16 16 |        |             |
 587:000 | DONE lbl | na 16 16 | 0061fc |             | z_semicolon                          
 587:001 | DONE ins | na 16 16 | 0061fc | 60          |                 rts                  
 588:000 | DONE wsp | na 16 16 |        |             |
 589:000 | DONE wsp | na 16 16 |        |             |
 590:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 591:000 | DONE cmt | na 16 16 |        |             | ; # "HASH" / "NUMBER-SIGN" ( ud -- ud )  X bytes / X cycles
 592:000 | DONE cmt | na 16 16 |        |             | ; Add one character to the beginning of the pictured output string.
 593:000 | DONE cmt | na 16 16 |        |             | ; Code based on https://github.com/philburk/pforth/blob/master/fth/numberio.fth
 594:000 | DONE cmt | na 16 16 |        |             | ; Forth code is  BASE @ UD/MOD ROT 9 OVER < IF 7 + THEN [CHAR] 0 + HOLD ;
 595:000 | DONE cmt | na 16 16 |        |             | ; TODO convert more parts to assembler
 596:000 | DONE lbl | na 16 16 | 0061fd |             | xt_hash                              
 597:000 | DONE dir | na 16 16 |        |             |         .!a16                        
 598:000 | DONE ins | na 16 16 | 0061fd | 20 fa 63    |                 jsr 0063fa           ( ud addr )
 599:000 | DONE ins | na 16 16 | 006200 | 20 43 62    |                 jsr 006243           ( ud u )
 600:000 | DONE ins | na 16 16 | 006203 | 20 59 69    |                 jsr 006959           ( rem ud )
 601:000 | DONE ins | na 16 16 | 006206 | 20 4f 68    |                 jsr 00684f           ( ud rem )
 602:000 | DONE wsp | na 16 16 |        |             |
 603:000 | DONE cmt | na 16 16 |        |             |                 ; Convert the number that is left over to an ASCII character. We
 604:000 | DONE cmt | na 16 16 |        |             |                 ; use a string lookup for speed
 605:000 | DONE ins | na 16 16 | 006209 | e2 20       |                 sep 20               
 605:001 | DONE ctl | na  8 16 |        |             |         .!a8
 606:000 | DONE ins | na  8 16 | 00620b | b9 99 77    |                 lda.y 007799         
 607:000 | DONE ins | na  8 16 | 00620e | c2 20       |                 rep 20               
 607:001 | DONE ctl | na 16 16 |        |             |         .!a16
 608:000 | DONE cmt | na 16 16 |        |             |                 ; overwrite remainder with ASCII value
 609:000 | DONE ins | na 16 16 | 006210 | 29 ff 00    |                 and.# 00ff           
 610:000 | DONE ins | na 16 16 | 006213 | a8          |                 tay                  ( ud char )
 611:000 | DONE wsp | na 16 16 |        |             |
 612:000 | DONE ins | na 16 16 | 006214 | 20 a3 66    |                 jsr 0066a3           JSR/RTS
 613:000 | DONE wsp | na 16 16 |        |             |
 614:000 | DONE lbl | na 16 16 | 006217 |             | z_hash                               
 614:001 | DONE ins | na 16 16 | 006217 | 60          |                 rts                  
 615:000 | DONE wsp | na 16 16 |        |             |
 616:000 | DONE wsp | na 16 16 |        |             |
 617:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 618:000 | DONE cmt | na 16 16 |        |             | ; #> "NUMBERMORE" / "NUMBER-GREATER" ( d -- addr u ) X bytes / X cycles
 619:000 | DONE cmt | na 16 16 |        |             | ; Finish conversion of pictured number string, putting address and length on the
 620:000 | DONE cmt | na 16 16 |        |             | ; Data Stack. Original Fort is  2DROP HLD @ PAD OVER -  Based on
 621:000 | DONE cmt | na 16 16 |        |             | ; https://github.com/philburk/pforth/blob/master/fth/numberio.fth
 622:000 | DONE lbl | na 16 16 | 006218 |             | xt_numbermore                        
 623:000 | DONE dir | na 16 16 |        |             |         .!a16                        
 624:000 | DONE cmt | na 16 16 |        |             |                 ; We simply overwrite the double cell number, saving us a lot of
 625:000 | DONE cmt | na 16 16 |        |             |                 ; stack thrashing. First, put the address of the string's head in
 626:000 | DONE cmt | na 16 16 |        |             |                 ; TOS and NOS
 627:000 | DONE ins | na 16 16 | 006218 | a4 28       |                 ldy.d 000228         
 628:000 | DONE ins | na 16 16 | 00621a | 94 00       |                 sty.dx 00            ( addr addr )
 629:000 | DONE wsp | na 16 16 |        |             |
 630:000 | DONE cmt | na 16 16 |        |             |                 ; add the address of the string's end, which is PAD
 631:000 | DONE ins | na 16 16 | 00621c | 20 48 67    |                 jsr 006748           ( addr addr pad )
 632:000 | DONE wsp | na 16 16 |        |             |
 633:000 | DONE ins | na 16 16 | 00621f | 38          |                 sec                  
 634:000 | DONE ins | na 16 16 | 006220 | 98          |                 tya                  
 635:000 | DONE ins | na 16 16 | 006221 | f5 00       |                 sbc.dx 00            pad - addr is the length of the string
 636:000 | DONE ins | na 16 16 | 006223 | a8          |                 tay                  ( addr addr n )
 637:000 | DONE wsp | na 16 16 |        |             |
 638:000 | DONE ins | na 16 16 | 006224 | e8          |                 inx                  NIP
 639:000 | DONE ins | na 16 16 | 006225 | e8          |                 inx                  
 640:000 | DONE wsp | na 16 16 |        |             |
 641:000 | DONE lbl | na 16 16 | 006226 |             | z_numbermore                         
 641:001 | DONE ins | na 16 16 | 006226 | 60          |                 rts                  
 642:000 | DONE wsp | na 16 16 |        |             |
 643:000 | DONE wsp | na 16 16 |        |             |
 644:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 645:000 | DONE cmt | na 16 16 |        |             | ; #S "HASHS" / "NUMBER SIGN" ( ud -- ud ) X bytes / X cycles
 646:000 | DONE cmt | na 16 16 |        |             | ; Completely convert number for pictured numerical output. Based on
 647:000 | DONE cmt | na 16 16 |        |             | ; https://github.com/philburk/pforth/blob/master/fth/system.fth
 648:000 | DONE cmt | na 16 16 |        |             | ; Original Forth code  BEGIN # 2DUP OR 0= UNTIL
 649:000 | DONE lbl | na 16 16 | 006227 |             | xt_hashs                             
 650:000 | DONE dir | na 16 16 |        |             |         .!a16                        
 651:000 | DONE lbl | na 16 16 | 006227 |             | hashs_loop                           
 652:000 | DONE cmt | na 16 16 |        |             |                 ; covert a single number ("#")
 653:000 | DONE ins | na 16 16 | 006227 | 20 fd 61    |                 jsr 0061fd           ( ud -- ud )
 654:000 | DONE wsp | na 16 16 |        |             |
 655:000 | DONE cmt | na 16 16 |        |             |                 ; stop when the double-celled number on the TOS is zero
 656:000 | DONE ins | na 16 16 | 00622a | 98          |                 tya                  
 657:000 | DONE ins | na 16 16 | 00622b | 15 00       |                 ora.dx 00            
 658:000 | DONE ins | na 16 16 | 00622d | d0 f8       |                 bne 006227           
 659:000 | DONE wsp | na 16 16 |        |             |
 660:000 | DONE lbl | na 16 16 | 00622f |             | z_hashs                              
 660:001 | DONE ins | na 16 16 | 00622f | 60          |                 rts                  
 661:000 | DONE wsp | na 16 16 |        |             |
 662:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 663:000 | DONE cmt | na 16 16 |        |             | ; ? "QUESTION" ( addr -- ) X bytes / X cycles
 664:000 | DONE cmt | na 16 16 |        |             | ; Print content of a variable. This is used interactively and humans are
 665:000 | DONE cmt | na 16 16 |        |             | ; slow, so we just go for the subroutine jumps to keep it short
 666:000 | DONE lbl | na 16 16 | 006230 |             | xt_question                          
 667:000 | DONE ins | na 16 16 | 006230 | 20 43 62    |                 jsr 006243           
 668:000 | DONE ins | na 16 16 | 006233 | 20 2d 61    |                 jsr 00612d           
 669:000 | DONE wsp | na 16 16 |        |             |
 670:000 | DONE lbl | na 16 16 | 006236 |             | z_question                           
 670:001 | DONE ins | na 16 16 | 006236 | 60          |                 rts                  
 671:000 | DONE wsp | na 16 16 |        |             |
 672:000 | DONE wsp | na 16 16 |        |             |
 673:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 674:000 | DONE cmt | na 16 16 |        |             | ; ! "STORE" ( n addr -- ) 9 bytes / X cycles
 675:000 | DONE cmt | na 16 16 |        |             | ; Save value at designated memory location
 676:000 | DONE lbl | na 16 16 | 006237 |             | xt_store                             
 677:000 | DONE dir | na 16 16 |        |             |         .!a16                        
 678:000 | DONE ins | na 16 16 | 006237 | b5 00       |                 lda.dx 00            NOS has value
 679:000 | DONE ins | na 16 16 | 006239 | 99 00 00    |                 sta.y 0000           
 680:000 | DONE wsp | na 16 16 |        |             |
 681:000 | DONE ins | na 16 16 | 00623c | b4 02       |                 ldy.dx 02            
 682:000 | DONE ins | na 16 16 | 00623e | e8          |                 inx                  
 683:000 | DONE ins | na 16 16 | 00623f | e8          |                 inx                  
 684:000 | DONE ins | na 16 16 | 006240 | e8          |                 inx                  
 685:000 | DONE ins | na 16 16 | 006241 | e8          |                 inx                  
 686:000 | DONE wsp | na 16 16 |        |             |
 687:000 | DONE lbl | na 16 16 | 006242 |             | z_store                              
 687:001 | DONE ins | na 16 16 | 006242 | 60          |                 rts                  
 688:000 | DONE wsp | na 16 16 |        |             |
 689:000 | DONE wsp | na 16 16 |        |             |
 690:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 691:000 | DONE cmt | na 16 16 |        |             | ; @ "FETCH" ( addr -- n ) 4 bytes / 7-8 cycles
 692:000 | DONE cmt | na 16 16 |        |             | ; Get one cell (16 bit) value from given address
 693:000 | DONE lbl | na 16 16 | 006243 |             | xt_fetch                             
 694:000 | DONE ins | na 16 16 | 006243 | b9 00 00    |                 lda.y 0000           
 695:000 | DONE ins | na 16 16 | 006246 | a8          |                 tay                  
 696:000 | DONE wsp | na 16 16 |        |             |
 697:000 | DONE lbl | na 16 16 | 006247 |             | z_fetch                              
 697:001 | DONE ins | na 16 16 | 006247 | 60          |                 rts                  
 698:000 | DONE wsp | na 16 16 |        |             |
 699:000 | DONE wsp | na 16 16 |        |             |
 700:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 701:000 | DONE cmt | na 16 16 |        |             | ; ['] "BRACKET-TICK" ( -- ) X bytes / X cycles
 702:000 | DONE cmt | na 16 16 |        |             | ; Store xt of following word during compilation
 703:000 | DONE lbl | na 16 16 | 006248 |             | xt_brackettick                       
 704:000 | DONE ins | na 16 16 | 006248 | 20 0b 63    |                 jsr 00630b           
 705:000 | DONE ins | na 16 16 | 00624b | 4c b1 66    |                 jmp 0066b1           JSR/RTS
 706:000 | DONE lbl | na 16 16 | 00624e |             | z_brackettick                        
 707:000 | DONE wsp | na 16 16 |        |             |
 708:000 | DONE wsp | na 16 16 |        |             |
 709:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 710:000 | DONE cmt | na 16 16 |        |             | ; [ "LEFTBRACKET" ( -- ) X bytes / X cycles
 711:000 | DONE cmt | na 16 16 |        |             | ; Enter the interpretation state. This is an immediate, compile-only word
 712:000 | DONE lbl | na 16 16 | 00624e |             | xt_leftbracket                       
 713:000 | DONE ins | na 16 16 | 00624e | 64 14       |                 stz.d 000214         
 714:000 | DONE lbl | na 16 16 | 006250 |             | z_leftbracket                        
 714:001 | DONE ins | na 16 16 | 006250 | 60          |                 rts                  
 715:000 | DONE wsp | na 16 16 |        |             |
 716:000 | DONE wsp | na 16 16 |        |             |
 717:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 718:000 | DONE cmt | na 16 16 |        |             | ; ] "RIGHTBRACKET" ( -- ) X bytes / X cycles
 719:000 | DONE cmt | na 16 16 |        |             | ; Enter the compile state. In theory, we should be able to get away with
 720:000 | DONE cmt | na 16 16 |        |             | ; a simple INC.A, but this is more error tolerant. For obvious reasons, this
 721:000 | DONE cmt | na 16 16 |        |             | ; cannot be COMPILE-ONLY, and native compile doesn't make much sense either
 722:000 | DONE lbl | na 16 16 | 006251 |             | xt_rightbracket                      
 723:000 | DONE ins | na 16 16 | 006251 | a9 01 00    |                 lda.# 0001           
 724:000 | DONE ins | na 16 16 | 006254 | 85 14       |                 sta.d 000214         
 725:000 | DONE wsp | na 16 16 |        |             |
 726:000 | DONE lbl | na 16 16 | 006256 |             | z_rightbracket                       
 726:001 | DONE ins | na 16 16 | 006256 | 60          |                 rts                  
 727:000 | DONE wsp | na 16 16 |        |             |
 728:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 729:000 | DONE cmt | na 16 16 |        |             | ; [CHAR] "BRACKET-CHAR" ( "c" -- ) X bytes / X cycles
 730:000 | DONE cmt | na 16 16 |        |             | ; At compile time, compile the ASCII value of a character as a literal
 731:000 | DONE cmt | na 16 16 |        |             | ; This is an immediate, compile-only word
 732:000 | DONE cmt | na 16 16 |        |             | ; TODO decide if this is worth unrolling
 733:000 | DONE lbl | na 16 16 | 006257 |             | xt_bracketchar                       
 734:000 | DONE ins | na 16 16 | 006257 | 20 5c 64    |                 jsr 00645c           
 735:000 | DONE ins | na 16 16 | 00625a | 20 b1 66    |                 jsr 0066b1           
 736:000 | DONE wsp | na 16 16 |        |             |
 737:000 | DONE lbl | na 16 16 | 00625d |             | z_bracketchar                        
 737:001 | DONE ins | na 16 16 | 00625d | 60          |                 rts                  
 738:000 | DONE wsp | na 16 16 |        |             |
 739:000 | DONE wsp | na 16 16 |        |             |
 740:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 741:000 | DONE cmt | na 16 16 |        |             | ; \ "BACKSLASH" ( -- ) 4 bytes / X cycles
 742:000 | DONE cmt | na 16 16 |        |             | ; Ignore rest of line as comment
 743:000 | DONE lbl | na 16 16 | 00625e |             | xt_backslash                         
 744:000 | DONE dir | na 16 16 |        |             |         .!a16                        
 745:000 | DONE cmt | na 16 16 |        |             |                 ; Advance >IN to end of the line
 746:000 | DONE ins | na 16 16 | 00625e | a5 0e       |                 lda.d 00020e         
 747:000 | DONE ins | na 16 16 | 006260 | 85 12       |                 sta.d 000212         
 748:000 | DONE wsp | na 16 16 |        |             |
 749:000 | DONE lbl | na 16 16 | 006262 |             | z_backslash                          
 749:001 | DONE ins | na 16 16 | 006262 | 60          |                 rts                  
 750:000 | DONE wsp | na 16 16 |        |             |
 751:000 | DONE wsp | na 16 16 |        |             |
 752:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 753:000 | DONE cmt | na 16 16 |        |             | ; + "PLUS" ( n m -- n+m ) 7 bytes / X cycles
 754:000 | DONE cmt | na 16 16 |        |             | ; Add TOS and NOS
 755:000 | DONE lbl | na 16 16 | 006263 |             | xt_plus                              
 756:000 | DONE dir | na 16 16 |        |             |         .!a16                        
 757:000 | DONE ins | na 16 16 | 006263 | 98          |                 tya                  
 758:000 | DONE ins | na 16 16 | 006264 | 18          |                 clc                  
 759:000 | DONE ins | na 16 16 | 006265 | 75 00       |                 adc.dx 00            
 760:000 | DONE ins | na 16 16 | 006267 | a8          |                 tay                  
 761:000 | DONE ins | na 16 16 | 006268 | e8          |                 inx                  
 762:000 | DONE ins | na 16 16 | 006269 | e8          |                 inx                  
 763:000 | DONE wsp | na 16 16 |        |             |
 764:000 | DONE lbl | na 16 16 | 00626a |             | z_plus                               
 764:001 | DONE ins | na 16 16 | 00626a | 60          |                 rts                  
 765:000 | DONE wsp | na 16 16 |        |             |
 766:000 | DONE wsp | na 16 16 |        |             |
 767:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 768:000 | DONE cmt | na 16 16 |        |             | ; - "MINUS" ( n m -- n-m ) 10 bytes / X cycles
 769:000 | DONE cmt | na 16 16 |        |             | ; Subtract NOS from TOS
 770:000 | DONE lbl | na 16 16 | 00626b |             | xt_minus                             
 771:000 | DONE dir | na 16 16 |        |             |         .!a16                        
 772:000 | DONE ins | na 16 16 | 00626b | 98          |                 tya                  
 773:000 | DONE ins | na 16 16 | 00626c | 49 ff ff    |                 eor.# 0ffff          
 774:000 | DONE wsp | na 16 16 |        |             |
 775:000 | DONE ins | na 16 16 | 00626f | 38          |                 sec                  not CLC
 776:000 | DONE ins | na 16 16 | 006270 | 75 00       |                 adc.dx 00            
 777:000 | DONE wsp | na 16 16 |        |             |
 778:000 | DONE ins | na 16 16 | 006272 | a8          |                 tay                  
 779:000 | DONE ins | na 16 16 | 006273 | e8          |                 inx                  
 780:000 | DONE ins | na 16 16 | 006274 | e8          |                 inx                  
 781:000 | DONE wsp | na 16 16 |        |             |
 782:000 | DONE lbl | na 16 16 | 006275 |             | z_minus                              
 782:001 | DONE ins | na 16 16 | 006275 | 60          |                 rts                  
 783:000 | DONE wsp | na 16 16 |        |             |
 784:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 785:000 | DONE cmt | na 16 16 |        |             | ; -ROT ( a b c -- c a b )  X bytes / X cycles
 786:000 | DONE cmt | na 16 16 |        |             | ; Rotate top three entries of Data Stack upwards
 787:000 | DONE lbl | na 16 16 | 006276 |             | xt_mrot                              
 788:000 | DONE dir | na 16 16 |        |             |         .!a16                        
 789:000 | DONE dir | na 16 16 |        |             |         .!xy16                       
 790:000 | DONE ins | na 16 16 | 006276 | b5 02       |                 lda.dx 02            save a
 791:000 | DONE ins | na 16 16 | 006278 | 94 02       |                 sty.dx 02            move c to 3OS
 792:000 | DONE ins | na 16 16 | 00627a | b4 00       |                 ldy.dx 00            move b to TOS
 793:000 | DONE ins | na 16 16 | 00627c | 95 00       |                 sta.dx 00            save a as NOS
 794:000 | DONE wsp | na 16 16 |        |             |
 795:000 | DONE lbl | na 16 16 | 00627e |             | z_mrot                               
 795:001 | DONE ins | na 16 16 | 00627e | 60          |                 rts                  
 796:000 | DONE wsp | na 16 16 |        |             |
 797:000 | DONE wsp | na 16 16 |        |             |
 798:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 799:000 | DONE cmt | na 16 16 |        |             | ; = "EQUAL" ( n m -- f ) 11 bytes / 18-20 cycles
 800:000 | DONE cmt | na 16 16 |        |             | ; See if TOS and NOS are the same
 801:000 | DONE lbl | na 16 16 | 00627f |             | xt_equal                             
 802:000 | DONE ins | na 16 16 | 00627f | 98          |                 tya                  
 803:000 | DONE ins | na 16 16 | 006280 | a0 00 00    |                 ldy.# 0000           default value is false
 804:000 | DONE wsp | na 16 16 |        |             |
 805:000 | DONE ins | na 16 16 | 006283 | d5 00       |                 cmp.dx 00            
 806:000 | DONE ins | na 16 16 | 006285 | d0 01       |                 bne 006288           
 807:000 | DONE ins | na 16 16 | 006287 | 88          |                 dey                  wraps to 0FFFF (true)
 808:000 | DONE wsp | na 16 16 |        |             |
 809:000 | DONE lbl | na 16 16 | 006288 |             | equal_not                            
 810:000 | DONE ins | na 16 16 | 006288 | e8          |                 inx                  
 811:000 | DONE ins | na 16 16 | 006289 | e8          |                 inx                  
 812:000 | DONE wsp | na 16 16 |        |             |
 813:000 | DONE lbl | na 16 16 | 00628a |             | z_equal                              
 813:001 | DONE ins | na 16 16 | 00628a | 60          |                 rts                  
 814:000 | DONE wsp | na 16 16 |        |             |
 815:000 | DONE wsp | na 16 16 |        |             |
 816:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 817:000 | DONE cmt | na 16 16 |        |             | ; 0 "ZERO" ( -- 0 ) 7 bytes / 12 cycles
 818:000 | DONE cmt | na 16 16 |        |             | ; Pushes the number 0000 on the Data Stack
 819:000 | DONE lbl | na 16 16 | 00628b |             | xt_zero                              
 820:000 | DONE dir | na 16 16 |        |             |         .!xy16                       
 821:000 | DONE ins | na 16 16 | 00628b | ca          |                 dex                  
 822:000 | DONE ins | na 16 16 | 00628c | ca          |                 dex                  
 823:000 | DONE ins | na 16 16 | 00628d | 94 00       |                 sty.dx 00            
 824:000 | DONE ins | na 16 16 | 00628f | a0 00 00    |                 ldy.# 0000           
 825:000 | DONE wsp | na 16 16 |        |             |
 826:000 | DONE lbl | na 16 16 | 006292 |             | z_zero                               
 826:001 | DONE ins | na 16 16 | 006292 | 60          |                 rts                  
 827:000 | DONE wsp | na 16 16 |        |             |
 828:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 829:000 | DONE cmt | na 16 16 |        |             | ; 0= "ZERO-EQUAL" ( n -- f ) X bytes / X cycles
 830:000 | DONE cmt | na 16 16 |        |             | ; Return the true flag if TOS is zero
 831:000 | DONE lbl | na 16 16 | 006293 |             | xt_zero-equal                        
 832:000 | DONE dir | na 16 16 |        |             |         .!a16                        
 833:000 | DONE ins | na 16 16 | 006293 | 98          |                 tya                  force flag check
 834:000 | DONE ins | na 16 16 | 006294 | d0 05       |                 bne 00629b           
 835:000 | DONE wsp | na 16 16 |        |             |
 836:000 | DONE ins | na 16 16 | 006296 | a0 ff 0f    |                 ldy.# 0fff           
 837:000 | DONE ins | na 16 16 | 006299 | 80 03       |                 bra 00629e           
 838:000 | DONE lbl | na 16 16 | 00629b |             | ze_not_zero                          
 839:000 | DONE ins | na 16 16 | 00629b | a0 00 00    |                 ldy.# 0000           
 840:000 | DONE wsp | na 16 16 |        |             |
 841:000 | DONE lbl | na 16 16 | 00629e |             | z_zero-equal                         
 841:001 | DONE ins | na 16 16 | 00629e | 60          |                 rts                  
 842:000 | DONE wsp | na 16 16 |        |             |
 843:000 | DONE wsp | na 16 16 |        |             |
 844:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 845:000 | DONE cmt | na 16 16 |        |             | ; 0< "ZERO-LESS" ( n -- f ) 11 bytes / X cycles
 846:000 | DONE cmt | na 16 16 |        |             | ; Return the true flag if TOS is less than zero
 847:000 | DONE lbl | na 16 16 | 00629f |             | xt_zero-less                         
 848:000 | DONE dir | na 16 16 |        |             |         .!a16                        
 849:000 | DONE ins | na 16 16 | 00629f | 98          |                 tya                  force flag check
 850:000 | DONE ins | na 16 16 | 0062a0 | 30 05       |                 bmi 0062a7           
 851:000 | DONE wsp | na 16 16 |        |             |
 852:000 | DONE ins | na 16 16 | 0062a2 | a0 00 00    |                 ldy.# 0000           
 853:000 | DONE ins | na 16 16 | 0062a5 | 80 03       |                 bra 0062aa           
 854:000 | DONE wsp | na 16 16 |        |             |
 855:000 | DONE lbl | na 16 16 | 0062a7 |             | zero-less-is-less                    
 856:000 | DONE ins | na 16 16 | 0062a7 | a0 ff ff    |                 ldy.# 0ffff          
 857:000 | DONE wsp | na 16 16 |        |             |
 858:000 | DONE lbl | na 16 16 | 0062aa |             | z_zero-less                          
 858:001 | DONE ins | na 16 16 | 0062aa | 60          |                 rts                  
 859:000 | DONE wsp | na 16 16 |        |             |
 860:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 861:000 | DONE cmt | na 16 16 |        |             | ; 0<> "ZERO-NOTEQUAL" ( n -- f ) 11 bytes / X cycles
 862:000 | DONE cmt | na 16 16 |        |             | ; Return the true flag if TOS is not zero
 863:000 | DONE lbl | na 16 16 | 0062ab |             | xt_zero-notequal                     
 864:000 | DONE dir | na 16 16 |        |             |         .!a16                        
 865:000 | DONE ins | na 16 16 | 0062ab | 98          |                 tya                  force flag check
 866:000 | DONE ins | na 16 16 | 0062ac | f0 05       |                 beq 0062b3           
 867:000 | DONE ins | na 16 16 | 0062ae | a0 ff ff    |                 ldy.# 0ffff          
 868:000 | DONE ins | na 16 16 | 0062b1 | 80 03       |                 bra 0062b6           
 869:000 | DONE lbl | na 16 16 | 0062b3 |             | zne_is_zero                          
 870:000 | DONE ins | na 16 16 | 0062b3 | a0 00 00    |                 ldy.# 0000           
 871:000 | DONE lbl | na 16 16 | 0062b6 |             | z_zero-notequal                      
 872:000 | DONE ins | na 16 16 | 0062b6 | 60          |                 rts                  
 873:000 | DONE wsp | na 16 16 |        |             |
 874:000 | DONE wsp | na 16 16 |        |             |
 875:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 876:000 | DONE cmt | na 16 16 |        |             | ; 0> "ZERO-MORE" ( n -- f ) X bytes / X cycles
 877:000 | DONE cmt | na 16 16 |        |             | ; Return the true flag if TOS is more than zero
 878:000 | DONE lbl | na 16 16 | 0062b7 |             | xt_zero-more                         
 879:000 | DONE dir | na 16 16 |        |             |         .!a16                        
 880:000 | DONE ins | na 16 16 | 0062b7 | a9 00 00    |                 lda.# 0000           default is false
 881:000 | DONE wsp | na 16 16 |        |             |
 882:000 | DONE ins | na 16 16 | 0062ba | 88          |                 dey                  
 883:000 | DONE ins | na 16 16 | 0062bb | 10 02       |                 bpl 0062bf           was at least 1
 884:000 | DONE wsp | na 16 16 |        |             |
 885:000 | DONE ins | na 16 16 | 0062bd | 80 01       |                 bra 0062c0           nope, stays false
 886:000 | DONE wsp | na 16 16 |        |             |
 887:000 | DONE lbl | na 16 16 | 0062bf |             | zero-more_true                       
 888:000 | DONE ins | na 16 16 | 0062bf | 3a          |                 dec.a                wraps to 0ffff, true
 889:000 | DONE lbl | na 16 16 | 0062c0 |             | zero-more_done                       
 890:000 | DONE ins | na 16 16 | 0062c0 | a8          |                 tay                  
 891:000 | DONE wsp | na 16 16 |        |             |
 892:000 | DONE lbl | na 16 16 | 0062c1 |             | z_zero-more                          
 892:001 | DONE ins | na 16 16 | 0062c1 | 60          |                 rts                  
 893:000 | DONE wsp | na 16 16 |        |             |
 894:000 | DONE wsp | na 16 16 |        |             |
 895:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 896:000 | DONE cmt | na 16 16 |        |             | ; 0BRANCH ( 0 | f -- ) X bytes / X cycles
 897:000 | DONE cmt | na 16 16 |        |             | ; Branch if TOS is zero. This exects the next two bytes to be the address of
 898:000 | DONE cmt | na 16 16 |        |             | ; where to branch to if the test fails. The code may not be natively compiled
 899:000 | DONE cmt | na 16 16 |        |             | ; because we need the return address provided by JSR's push to the Return Stack
 900:000 | DONE cmt | na 16 16 |        |             | ; This routine uses tmp1
 901:000 | DONE lbl | na 16 16 | 0062c2 |             | xt_zbranch                           
 902:000 | DONE dir | na 16 16 |        |             |         .!a16                        
 903:000 | DONE cmt | na 16 16 |        |             |                 ; encode subroutine jump to run time code
 904:000 | DONE ins | na 16 16 | 0062c2 | f4 c9 62    |                 phe.# 0062c9         
 905:000 | DONE ins | na 16 16 | 0062c5 | 20 b8 70    |                 jsr 0070b8           
 906:000 | DONE wsp | na 16 16 |        |             |
 907:000 | DONE lbl | na 16 16 | 0062c8 |             | z_zbranch                            
 907:001 | DONE ins | na 16 16 | 0062c8 | 60          |                 rts                  
 908:000 | DONE wsp | na 16 16 |        |             |
 909:000 | DONE lbl | na 16 16 | 0062c9 |             | zbranch_rt                           
 910:000 | DONE cmt | na 16 16 |        |             |                 ; Compiled component. Use the address on the Return Stack to
 911:000 | DONE cmt | na 16 16 |        |             |                 ; decide where we want to return to
 912:000 | DONE ins | na 16 16 | 0062c9 | 68          |                 pla                  
 913:000 | DONE ins | na 16 16 | 0062ca | 85 16       |                 sta.d 000216         
 914:000 | DONE wsp | na 16 16 |        |             |
 915:000 | DONE cmt | na 16 16 |        |             |                 ; See if the flag is zero, which is the whole purpose of this
 916:000 | DONE cmt | na 16 16 |        |             |                 ; operation after all
 917:000 | DONE ins | na 16 16 | 0062cc | 98          |                 tya                  force flag check
 918:000 | DONE ins | na 16 16 | 0062cd | f0 06       |                 beq 0062d5           flag is false (zero), so we branch
 919:000 | DONE wsp | na 16 16 |        |             |
 920:000 | DONE cmt | na 16 16 |        |             |                 ; Flag is TRUE, so we skip over the next two bytes. Put
 921:000 | DONE cmt | na 16 16 |        |             |                 ; differently, this is the part between IF and THEN
 922:000 | DONE ins | na 16 16 | 0062cf | a5 16       |                 lda.d 000216         
 923:000 | DONE ins | na 16 16 | 0062d1 | 1a          |                 inc.a                
 924:000 | DONE ins | na 16 16 | 0062d2 | 1a          |                 inc.a                
 925:000 | DONE wsp | na 16 16 |        |             |
 926:000 | DONE ins | na 16 16 | 0062d3 | 80 06       |                 bra 0062db           
 927:000 | DONE wsp | na 16 16 |        |             |
 928:000 | DONE lbl | na 16 16 | 0062d5 |             | zb_zero                              
 929:000 | DONE cmt | na 16 16 |        |             |                 ; Flag is FALSE, so we take the dump to the address given in the
 930:000 | DONE cmt | na 16 16 |        |             |                 ; next two bytes. We don't need Y anymore, so we can use it for
 931:000 | DONE cmt | na 16 16 |        |             |                 ; indexing
 932:000 | DONE ins | na 16 16 | 0062d5 | a0 01 00    |                 ldy.# 0001           
 933:000 | DONE ins | na 16 16 | 0062d8 | b1 16       |                 lda.diy 000216       
 934:000 | DONE wsp | na 16 16 |        |             |
 935:000 | DONE cmt | na 16 16 |        |             |                 ; Subtract one from the address given becasue of the RTS
 936:000 | DONE cmt | na 16 16 |        |             |                 ; mechanics
 937:000 | DONE ins | na 16 16 | 0062da | 3a          |                 dec.a                
 938:000 | DONE wsp | na 16 16 |        |             |
 939:000 | DONE lbl | na 16 16 | 0062db |             | zb_done                              
 940:000 | DONE cmt | na 16 16 |        |             |                 ; One we or another, this is where we're going to jump to
 941:000 | DONE ins | na 16 16 | 0062db | 48          |                 pha                  
 942:000 | DONE wsp | na 16 16 |        |             |
 943:000 | DONE cmt | na 16 16 |        |             |                 ; Clean up the Data Stack and jump
 944:000 | DONE ins | na 16 16 | 0062dc | b4 00       |                 ldy.dx 00            
 945:000 | DONE ins | na 16 16 | 0062de | e8          |                 inx                  
 946:000 | DONE ins | na 16 16 | 0062df | e8          |                 inx                  
 947:000 | DONE wsp | na 16 16 |        |             |
 948:000 | DONE ins | na 16 16 | 0062e0 | 60          |                 rts                  
 949:000 | DONE wsp | na 16 16 |        |             |
 950:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 951:000 | DONE cmt | na 16 16 |        |             | ; 1 "ONE" ( -- 1 ) 7 bytes / 12 cycles
 952:000 | DONE cmt | na 16 16 |        |             | ; Pushes the number 1 on the Data Stack
 953:000 | DONE lbl | na 16 16 | 0062e1 |             | xt_one                               
 954:000 | DONE dir | na 16 16 |        |             |         .!xy16                       
 955:000 | DONE ins | na 16 16 | 0062e1 | ca          |                 dex                  
 956:000 | DONE ins | na 16 16 | 0062e2 | ca          |                 dex                  
 957:000 | DONE ins | na 16 16 | 0062e3 | 94 00       |                 sty.dx 00            
 958:000 | DONE ins | na 16 16 | 0062e5 | a0 01 00    |                 ldy.# 0001           
 959:000 | DONE wsp | na 16 16 |        |             |
 960:000 | DONE lbl | na 16 16 | 0062e8 |             | z_one                                
 960:001 | DONE ins | na 16 16 | 0062e8 | 60          |                 rts                  
 961:000 | DONE wsp | na 16 16 |        |             |
 962:000 | DONE wsp | na 16 16 |        |             |
 963:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 964:000 | DONE cmt | na 16 16 |        |             | ; 1- "ONE-MINUS" ( n -- n-1 ) 1 byte / 2 cycles
 965:000 | DONE cmt | na 16 16 |        |             | ; Subtract 1 from Top of Stack (TOS). Because there is no checking if there is
 966:000 | DONE cmt | na 16 16 |        |             | ; actually anything on the Data Stack, this routine will fail silently if the
 967:000 | DONE cmt | na 16 16 |        |             | ; stack is empty
 968:000 | DONE lbl | na 16 16 | 0062e9 |             | xt_one-minus                         
 969:000 | DONE dir | na 16 16 |        |             |         .!xy16                       
 970:000 | DONE ins | na 16 16 | 0062e9 | 88          |                 dey                  
 971:000 | DONE lbl | na 16 16 | 0062ea |             | z_one-minus                          
 971:001 | DONE ins | na 16 16 | 0062ea | 60          |                 rts                  
 972:000 | DONE wsp | na 16 16 |        |             |
 973:000 | DONE wsp | na 16 16 |        |             |
 974:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 975:000 | DONE cmt | na 16 16 |        |             | ; 1+ "ONE-PLUS" ( n -- n+1 ) 1 byte / 2 cycles
 976:000 | DONE cmt | na 16 16 |        |             | ; Add 1 to TOS. Because there is no checking if there is actually anything on
 977:000 | DONE cmt | na 16 16 |        |             | ; the Data Stack, this routine will fail silently if the stack is empty
 978:000 | DONE lbl | na 16 16 | 0062eb |             | xt_one-plus                          
 979:000 | DONE dir | na 16 16 |        |             |         .!xy16                       
 980:000 | DONE ins | na 16 16 | 0062eb | c8          |                 iny                  
 981:000 | DONE lbl | na 16 16 | 0062ec |             | z_one-plus                           
 981:001 | DONE ins | na 16 16 | 0062ec | 60          |                 rts                  
 982:000 | DONE wsp | na 16 16 |        |             |
 983:000 | DONE wsp | na 16 16 |        |             |
 984:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 985:000 | DONE cmt | na 16 16 |        |             | ; 2 "TWO" ( -- 2 ) 7 bytes / 12 cycles
 986:000 | DONE cmt | na 16 16 |        |             | ; Pushes the number 2 on the Data Stack
 987:000 | DONE lbl | na 16 16 | 0062ed |             | xt_two                               
 988:000 | DONE dir | na 16 16 |        |             |         .!xy16                       
 989:000 | DONE ins | na 16 16 | 0062ed | ca          |                 dex                  
 990:000 | DONE ins | na 16 16 | 0062ee | ca          |                 dex                  
 991:000 | DONE ins | na 16 16 | 0062ef | 94 00       |                 sty.dx 00            
 992:000 | DONE ins | na 16 16 | 0062f1 | a0 02 00    |                 ldy.# 0002           
 993:000 | DONE wsp | na 16 16 |        |             |
 994:000 | DONE lbl | na 16 16 | 0062f4 |             | z_two                                
 994:001 | DONE ins | na 16 16 | 0062f4 | 60          |                 rts                  
 995:000 | DONE wsp | na 16 16 |        |             |
 996:000 | DONE wsp | na 16 16 |        |             |
 997:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 998:000 | DONE cmt | na 16 16 |        |             | ; 2* "TWO-STAR" ( n -- 2*n ) 3 bytes / 6 cycles
 999:000 | DONE cmt | na 16 16 |        |             | ; Multiply Top of Stack (TOS) by 2. This is also used by CELLS
1000:000 | DONE lbl | na 16 16 | 0062f5 |             | xt_two-star                          
1001:000 | DONE dir | na 16 16 |        |             |         .!a16                        
1002:000 | DONE dir | na 16 16 |        |             |         .!xy16                       
1003:000 | DONE ins | na 16 16 | 0062f5 | 98          |                 tya                  
1004:000 | DONE ins | na 16 16 | 0062f6 | 0a          |                 asl.a                
1005:000 | DONE ins | na 16 16 | 0062f7 | a8          |                 tay                  
1006:000 | DONE wsp | na 16 16 |        |             |
1007:000 | DONE lbl | na 16 16 | 0062f8 |             | z_two-star                           
1007:001 | DONE ins | na 16 16 | 0062f8 | 60          |                 rts                  
1008:000 | DONE wsp | na 16 16 |        |             |
1009:000 | DONE wsp | na 16 16 |        |             |
1010:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1011:000 | DONE cmt | na 16 16 |        |             | ; 2DROP ( n m -- ) 6 bytes / 13 cycles
1012:000 | DONE cmt | na 16 16 |        |             | ; Drop first two entries of Data Stack
1013:000 | DONE lbl | na 16 16 | 0062f9 |             | xt_2drop                             
1014:000 | DONE ins | na 16 16 | 0062f9 | b4 02       |                 ldy.dx 02            
1015:000 | DONE ins | na 16 16 | 0062fb | e8          |                 inx                  
1016:000 | DONE ins | na 16 16 | 0062fc | e8          |                 inx                  
1017:000 | DONE ins | na 16 16 | 0062fd | e8          |                 inx                  
1018:000 | DONE ins | na 16 16 | 0062fe | e8          |                 inx                  
1019:000 | DONE wsp | na 16 16 |        |             |
1020:000 | DONE lbl | na 16 16 | 0062ff |             | z_2drop                              
1020:001 | DONE ins | na 16 16 | 0062ff | 60          |                 rts                  
1021:000 | DONE wsp | na 16 16 |        |             |
1022:000 | DONE wsp | na 16 16 |        |             |
1023:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1024:000 | DONE cmt | na 16 16 |        |             | ; 2DUP ( n m -- n m n m ) 10 bytes / 23 cycles
1025:000 | DONE cmt | na 16 16 |        |             | ; Duplicated the top two data stack entries
1026:000 | DONE wsp | na 16 16 |        |             |
1027:000 | DONE lbl | na 16 16 | 006300 |             | xt_2dup                              
1028:000 | DONE dir | na 16 16 |        |             |         .!xy16                       
1029:000 | DONE ins | na 16 16 | 006300 | ca          |                 dex                  
1030:000 | DONE ins | na 16 16 | 006301 | ca          |                 dex                  
1031:000 | DONE ins | na 16 16 | 006302 | ca          |                 dex                  
1032:000 | DONE ins | na 16 16 | 006303 | ca          |                 dex                  
1033:000 | DONE ins | na 16 16 | 006304 | 94 02       |                 sty.dx 02            
1034:000 | DONE ins | na 16 16 | 006306 | b5 04       |                 lda.dx 04            
1035:000 | DONE ins | na 16 16 | 006308 | 95 00       |                 sta.dx 00            
1036:000 | DONE wsp | na 16 16 |        |             |
1037:000 | DONE lbl | na 16 16 | 00630a |             | z_2dup                               
1037:001 | DONE ins | na 16 16 | 00630a | 60          |                 rts                  
1038:000 | DONE wsp | na 16 16 |        |             |
1039:000 | DONE wsp | na 16 16 |        |             |
1040:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1041:000 | DONE cmt | na 16 16 |        |             | ; ' "TICK" ( "string" -- xt ) X bytes / X cycles
1042:000 | DONE cmt | na 16 16 |        |             | ; Given a string with the name of a word, return the word's execution token (xt)
1043:000 | DONE cmt | na 16 16 |        |             | ; Abort if not found
1044:000 | DONE lbl | na 16 16 | 00630b |             | xt_tick                              
1045:000 | DONE ins | na 16 16 | 00630b | 20 61 67    |                 jsr 006761           ( -- addr u )
1046:000 | DONE wsp | na 16 16 |        |             |
1047:000 | DONE cmt | na 16 16 |        |             |                 ; if we got a zero, complain and abort
1048:000 | DONE ins | na 16 16 | 00630e | 98          |                 tya                  force flag check
1049:000 | DONE ins | na 16 16 | 00630f | d0 06       |                 bne 006317           
1050:000 | DONE wsp | na 16 16 |        |             |
1051:000 | DONE ins | na 16 16 | 006311 | a9 c1 76    |                 lda.# 0076c1         
1052:000 | DONE ins | na 16 16 | 006314 | 4c d9 70    |                 jmp 0070d9           
1053:000 | DONE wsp | na 16 16 |        |             |
1054:000 | DONE lbl | na 16 16 | 006317 |             | tick_have_word                       
1055:000 | DONE ins | na 16 16 | 006317 | 20 30 66    |                 jsr 006630           ( addr u -- nt)
1056:000 | DONE ins | na 16 16 | 00631a | 98          |                 tya                  force flag check
1057:000 | DONE wsp | na 16 16 |        |             |
1058:000 | DONE cmt | na 16 16 |        |             |                 ; if we didn't find string in the dictionary, complain and abort
1059:000 | DONE ins | na 16 16 | 00631b | d0 06       |                 bne 006323           
1060:000 | DONE wsp | na 16 16 |        |             |
1061:000 | DONE ins | na 16 16 | 00631d | a9 5e 77    |                 lda.# 00775e         
1062:000 | DONE ins | na 16 16 | 006320 | 4c d9 70    |                 jmp 0070d9           
1063:000 | DONE wsp | na 16 16 |        |             |
1064:000 | DONE lbl | na 16 16 | 006323 |             | tick_have_nt                         
1065:000 | DONE ins | na 16 16 | 006323 | 20 16 67    |                 jsr 006716           ( nt -- xt )
1066:000 | DONE wsp | na 16 16 |        |             |
1067:000 | DONE lbl | na 16 16 | 006326 |             | z_tick                               
1067:001 | DONE ins | na 16 16 | 006326 | 60          |                 rts                  
1068:000 | DONE wsp | na 16 16 |        |             |
1069:000 | DONE wsp | na 16 16 |        |             |
1070:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1071:000 | DONE cmt | na 16 16 |        |             | ; ABS ( n -- u ) 8 bytes / X cycles
1072:000 | DONE cmt | na 16 16 |        |             | ; Return the absolute value of a single number
1073:000 | DONE lbl | na 16 16 | 006327 |             | xt_abs                               
1074:000 | DONE dir | na 16 16 |        |             |         .!a16                        
1075:000 | DONE dir | na 16 16 |        |             |         .!xy16                       
1076:000 | DONE ins | na 16 16 | 006327 | 98          |                 tya                  force flag test
1077:000 | DONE ins | na 16 16 | 006328 | 10 05       |                 bpl 00632f           positive number is easy
1078:000 | DONE wsp | na 16 16 |        |             |
1079:000 | DONE cmt | na 16 16 |        |             |                 ; negative: Calculate 0-n
1080:000 | DONE ins | na 16 16 | 00632a | 49 ff ff    |                 eor.# 0ffff          
1081:000 | DONE ins | na 16 16 | 00632d | 1a          |                 inc.a                
1082:000 | DONE ins | na 16 16 | 00632e | a8          |                 tay                  
1083:000 | DONE wsp | na 16 16 |        |             |
1084:000 | DONE lbl | na 16 16 | 00632f |             | z_abs                                
1084:001 | DONE ins | na 16 16 | 00632f | 60          |                 rts                  
1085:000 | DONE wsp | na 16 16 |        |             |
1086:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1087:000 | DONE cmt | na 16 16 |        |             | ; ACCEPT ( addr n1 -- n2 ) X bytes / X cycles
1088:000 | DONE cmt | na 16 16 |        |             | ; Receive a string of at most n1 characters, placing them at addr. Return the
1089:000 | DONE cmt | na 16 16 |        |             | ; actual number of characters as n2. Characters are echoed as they are received.
1090:000 | DONE cmt | na 16 16 |        |             | ; ACCEPT is called by REFILL these days.
1091:000 | DONE lbl | na 16 16 | 006330 |             | xt_accept                            
1092:000 | DONE cmt | na 16 16 |        |             |                 ; Set up loop
1093:000 | DONE ins | na 16 16 | 006330 | 98          |                 tya                  force flag test
1094:000 | DONE ins | na 16 16 | 006331 | d0 03       |                 bne 006336           
1095:000 | DONE wsp | na 16 16 |        |             |
1096:000 | DONE cmt | na 16 16 |        |             |                 ; if we were told to get zero chars, just quit
1097:000 | DONE ins | na 16 16 | 006333 | e8          |                 inx                  NIP, TOS is zero which is also FALSE
1098:000 | DONE ins | na 16 16 | 006334 | e8          |                 inx                  
1099:000 | DONE wsp | na 16 16 |        |             |
1100:000 | DONE ins | na 16 16 | 006335 | 60          |                 rts                  
1101:000 | DONE wsp | na 16 16 |        |             |
1102:000 | DONE lbl | na 16 16 | 006336 |             | accept_nonzero                       
1103:000 | DONE ins | na 16 16 | 006336 | b5 00       |                 lda.dx 00            address of buffer is NOS
1104:000 | DONE ins | na 16 16 | 006338 | 85 16       |                 sta.d 000216         
1105:000 | DONE ins | na 16 16 | 00633a | e8          |                 inx                  NIP
1106:000 | DONE ins | na 16 16 | 00633b | e8          |                 inx                  
1107:000 | DONE wsp | na 16 16 |        |             |
1108:000 | DONE ins | na 16 16 | 00633c | 84 18       |                 sty.d 000218         Save max number of chars in tmp2
1109:000 | DONE ins | na 16 16 | 00633e | a0 00 00    |                 ldy.# 0000           Use Y as counter
1110:000 | DONE ins | na 16 16 | 006341 | e2 20       |                 sep 20               
1110:001 | DONE ctl | na  8 16 |        |             |         .!a8
1111:000 | DONE wsp | na  8 16 |        |             |
1112:000 | DONE lbl | na  8 16 | 006343 |             | accept_loop                          
1113:000 | DONE cmt | na  8 16 |        |             |                 ; TODO rewrite with KEY so we can revector it
1114:000 | DONE cmt | na  8 16 |        |             |                 ; We don't need to check for CTRL-l, because a vt100 terminal
1115:000 | DONE cmt | na  8 16 |        |             |                 ; clears the screen automatically
1116:000 | DONE ins | na  8 16 | 006343 | 20 47 60    |                 jsr 006047           
1117:000 | DONE dir | na  8 16 |        |             |         .!a8                         
1118:000 | DONE cmt | na  8 16 |        |             |                 ; we quit on both line feed and carriage return
1119:000 | DONE ins | na  8 16 | 006346 | c9 0a       |                 cmp.# AscLF          
1120:000 | DONE ins | na  8 16 | 006348 | f0 44       |                 beq 00638e           
1121:000 | DONE ins | na  8 16 | 00634a | c9 0d       |                 cmp.# AscCR          
1122:000 | DONE ins | na  8 16 | 00634c | f0 40       |                 beq 00638e           
1123:000 | DONE wsp | na  8 16 |        |             |
1124:000 | DONE cmt | na  8 16 |        |             |                 ; BS and DEL do the same thing for the moment
1125:000 | DONE ins | na  8 16 | 00634e | c9 08       |                 cmp.# AscBS          
1126:000 | DONE ins | na  8 16 | 006350 | f0 44       |                 beq 006396           
1127:000 | DONE ins | na  8 16 | 006352 | c9 7f       |                 cmp.# AscDEL         
1128:000 | DONE ins | na  8 16 | 006354 | f0 40       |                 beq 006396           
1129:000 | DONE wsp | na  8 16 |        |             |
1130:000 | DONE cmt | na  8 16 |        |             |                 ; CTRL-c and ESC abort (see if this is too harsh)
1131:000 | DONE ins | na  8 16 | 006356 | c9 03       |                 cmp.# AscCC          
1132:000 | DONE ins | na  8 16 | 006358 | d0 03       |                 bne 00635d           
1133:000 | DONE ins | na  8 16 | 00635a | 4c 97 60    |                 jmp 006097           
1134:000 | DONE lbl | na  8 16 | 00635d |             | @                                    
1135:000 | DONE ins | na  8 16 | 00635d | c9 1b       |                 cmp.# AscESC         
1136:000 | DONE ins | na  8 16 | 00635f | d0 03       |                 bne 006364           
1137:000 | DONE ins | na  8 16 | 006361 | 4c 97 60    |                 jmp 006097           
1138:000 | DONE lbl | na  8 16 | 006364 |             | @                                    
1139:000 | DONE cmt | na  8 16 |        |             |                 ; CTRL-p will be used for "previous cmd", TODO
1140:000 | DONE ins | na  8 16 | 006364 | c9 10       |                 cmp.# AscCP          
1141:000 | DONE ins | na  8 16 | 006366 | d0 0c       |                 bne 006374           
1142:000 | DONE ins | na  8 16 | 006368 | c2 20       |                 rep 20               
1142:001 | DONE ctl | na 16 16 |        |             |         .!a16
1143:000 | DONE ins | na 16 16 | 00636a | a9 77 77    |                 lda.# 007777         
1144:000 | DONE ins | na 16 16 | 00636d | 20 df 70    |                 jsr 0070df           
1145:000 | DONE ins | na 16 16 | 006370 | e2 20       |                 sep 20               
1145:001 | DONE ctl | na  8 16 |        |             |         .!a8
1146:000 | DONE ins | na  8 16 | 006372 | 80 cf       |                 bra 006343           
1147:000 | DONE lbl | na  8 16 | 006374 |             | @                                    
1148:000 | DONE cmt | na  8 16 |        |             |                 ; CTRL-n will be used for "next cmd", TODO
1149:000 | DONE ins | na  8 16 | 006374 | c9 0e       |                 cmp.# AscCN          
1150:000 | DONE ins | na  8 16 | 006376 | d0 0c       |                 bne 006384           
1151:000 | DONE ins | na  8 16 | 006378 | c2 20       |                 rep 20               
1151:001 | DONE ctl | na 16 16 |        |             |         .!a16
1152:000 | DONE ins | na 16 16 | 00637a | a9 8a 77    |                 lda.# 00778a         
1153:000 | DONE ins | na 16 16 | 00637d | 20 df 70    |                 jsr 0070df           
1154:000 | DONE ins | na 16 16 | 006380 | e2 20       |                 sep 20               
1154:001 | DONE ctl | na  8 16 |        |             |         .!a8
1155:000 | DONE ins | na  8 16 | 006382 | 80 bf       |                 bra 006343           
1156:000 | DONE wsp | na  8 16 |        |             |
1157:000 | DONE lbl | na  8 16 | 006384 |             | @                                    
1158:000 | DONE cmt | na  8 16 |        |             |                 ; That's quite enough, echo character
1159:000 | DONE cmt | na  8 16 |        |             |                 ; TODO change to EMIT
1160:000 | DONE ins | na  8 16 | 006384 | 20 36 60    |                 jsr 006036           echo character
1161:000 | DONE dir | na  8 16 |        |             |         .!a8                         
1162:000 | DONE cmt | na  8 16 |        |             |                 ; TODO multitasking: Add PAUSE here (or in EMIT)
1163:000 | DONE wsp | na  8 16 |        |             |
1164:000 | DONE ins | na  8 16 | 006387 | 91 0c       |                 sta.diy 00020c       STA (CIB),Y
1165:000 | DONE ins | na  8 16 | 006389 | c8          |                 iny                  
1166:000 | DONE ins | na  8 16 | 00638a | c4 18       |                 cpy.d 000218         reached character limit?
1167:000 | DONE ins | na  8 16 | 00638c | d0 b5       |                 bne 006343           fall thru if buffer limit reached
1168:000 | DONE wsp | na  8 16 |        |             |
1169:000 | DONE lbl | na  8 16 | 00638e |             | accept_eol                           
1170:000 | DONE ins | na  8 16 | 00638e | 84 0e       |                 sty.d 00020e         Y contains number of chars accepted already
1171:000 | DONE ins | na  8 16 | 006390 | c2 20       |                 rep 20               
1171:001 | DONE ctl | na 16 16 |        |             |         .!a16
1172:000 | DONE ins | na 16 16 | 006392 | 20 fd 68    |                 jsr 0068fd           print final space
1173:000 | DONE ins | na 16 16 | 006395 | 60          |                 rts                  this is the actual return of the routine
1174:000 | DONE wsp | na 16 16 |        |             |
1175:000 | DONE lbl | na 16 16 | 006396 |             | accept_bs                            
1176:000 | DONE dir | na  8 16 |        |             |         .!a8                         
1177:000 | DONE ins | na  8 16 | 006396 | c0 00 00    |                 cpy.# 0000           buffer empty?
1178:000 | DONE ins | na  8 16 | 006399 | d0 06       |                 bne 0063a1           
1179:000 | DONE wsp | na  8 16 |        |             |
1180:000 | DONE ins | na  8 16 | 00639b | a9 07       |                 lda.# AscBELL        complain and don't delete beyond the start of line
1181:000 | DONE ins | na  8 16 | 00639d | 20 36 60    |                 jsr 006036           
1182:000 | DONE ins | na  8 16 | 0063a0 | c8          |                 iny                  
1183:000 | DONE lbl | na  8 16 | 0063a1 |             | @                                    
1184:000 | DONE ins | na  8 16 | 0063a1 | 88          |                 dey                  
1185:000 | DONE ins | na  8 16 | 0063a2 | a9 08       |                 lda.# AscBS          move back one
1186:000 | DONE ins | na  8 16 | 0063a4 | 20 36 60    |                 jsr 006036           
1187:000 | DONE ins | na  8 16 | 0063a7 | a9 20       |                 lda.# AscSP          print a space (rubout)
1188:000 | DONE ins | na  8 16 | 0063a9 | 20 36 60    |                 jsr 006036           
1189:000 | DONE ins | na  8 16 | 0063ac | a9 08       |                 lda.# AscBS          move back over space
1190:000 | DONE ins | na  8 16 | 0063ae | 20 36 60    |                 jsr 006036           
1191:000 | DONE wsp | na  8 16 |        |             |
1192:000 | DONE ins | na  8 16 | 0063b1 | 80 90       |                 bra 006343           
1193:000 | DONE wsp | na  8 16 |        |             |
1194:000 | DONE lbl | na  8 16 | 0063b3 |             | z_accept                             
1194:001 | DONE ins | na  8 16 | 0063b3 | 60          |                 rts                  
1195:000 | DONE wsp | na  8 16 |        |             |
1196:000 | DONE cmt | na  8 16 |        |             | ; -------------------------------------------------------------------
1197:000 | DONE cmt | na  8 16 |        |             | ; AGAIN ( addr -- ) 22 bytes / 50 cycles
1198:000 | DONE cmt | na  8 16 |        |             | ; Code a backwards branch to an address usually left by BEGIN. We use JMP
1199:000 | DONE cmt | na  8 16 |        |             | ; instead of BRA to make sure we have the range.
1200:000 | DONE cmt | na  8 16 |        |             | ; TODO see if we should insert a KEY? to make sure we can abort and/or a PAUSE
1201:000 | DONE lbl | na  8 16 | 0063b4 |             | xt_again                             
1202:000 | DONE wsp | na  8 16 |        |             |
1203:000 | DONE cmt | na  8 16 |        |             |                 ; Add the opcode for a JMP
1204:000 | DONE ins | na  8 16 | 0063b4 | e2 20       |                 sep 20               
1204:001 | DONE ctl | na  8 16 |        |             |         .!a8
1205:000 | DONE ins | na  8 16 | 0063b6 | a9 4c       |                 lda.# 4c             
1206:000 | DONE ins | na  8 16 | 0063b8 | 92 00       |                 sta.di 000200        STA (CP)
1207:000 | DONE ins | na  8 16 | 0063ba | c2 20       |                 rep 20               
1207:001 | DONE ctl | na 16 16 |        |             |         .!a16
1208:000 | DONE ins | na 16 16 | 0063bc | e6 00       |                 inc.d 000200         
1209:000 | DONE wsp | na 16 16 |        |             |
1210:000 | DONE cmt | na 16 16 |        |             |                 ; Add the address which should be TOS
1211:000 | DONE ins | na 16 16 | 0063be | 98          |                 tya                  
1212:000 | DONE ins | na 16 16 | 0063bf | 92 00       |                 sta.di 000200        
1213:000 | DONE ins | na 16 16 | 0063c1 | e6 00       |                 inc.d 000200         
1214:000 | DONE ins | na 16 16 | 0063c3 | e6 00       |                 inc.d 000200         
1215:000 | DONE wsp | na 16 16 |        |             |
1216:000 | DONE cmt | na 16 16 |        |             |                 ; drop the address
1217:000 | DONE ins | na 16 16 | 0063c5 | b4 00       |                 ldy.dx 00            
1218:000 | DONE ins | na 16 16 | 0063c7 | e8          |                 inx                  
1219:000 | DONE ins | na 16 16 | 0063c8 | e8          |                 inx                  
1220:000 | DONE wsp | na 16 16 |        |             |
1221:000 | DONE lbl | na 16 16 | 0063c9 |             | z_again                              
1221:001 | DONE ins | na 16 16 | 0063c9 | 60          |                 rts                  
1222:000 | DONE wsp | na 16 16 |        |             |
1223:000 | DONE wsp | na 16 16 |        |             |
1224:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1225:000 | DONE cmt | na 16 16 |        |             | ; ALLOT ( n -- ) X bytes / X cycles
1226:000 | DONE cmt | na 16 16 |        |             | ; Reserve a certain number of bytes (not cells) or release them. If n = 0, do
1227:000 | DONE cmt | na 16 16 |        |             | ; nothing. If n is negative, release n bytes, but only to the beginning of the
1228:000 | DONE cmt | na 16 16 |        |             | ; Dictionary. If n is positive (the most common case), reserve n bytes, but not
1229:000 | DONE cmt | na 16 16 |        |             | ; past the Dictionary.
1230:000 | DONE cmt | na 16 16 |        |             | ; See http://forth-standard.org/standard/core/ALLOT
1231:000 | DONE cmt | na 16 16 |        |             | ; TODO test negative values
1232:000 | DONE lbl | na 16 16 | 0063ca |             | xt_allot                             
1233:000 | DONE dir | na 16 16 |        |             |         .!a16                        
1234:000 | DONE ins | na 16 16 | 0063ca | 98          |                 tya                  force flag check
1235:000 | DONE ins | na 16 16 | 0063cb | f0 21       |                 beq 0063ee           zero bytes, don't do anything
1236:000 | DONE ins | na 16 16 | 0063cd | 30 12       |                 bmi 0063e1           free memory instead of reserving it
1237:000 | DONE wsp | na 16 16 |        |             |
1238:000 | DONE cmt | na 16 16 |        |             |                 ; most common case: reserve n bytes. We've already transfered
1239:000 | DONE cmt | na 16 16 |        |             |                 ; TOS to A, so we just have to add the current compile pointer
1240:000 | DONE ins | na 16 16 | 0063cf | 18          |                 clc                  
1241:000 | DONE ins | na 16 16 | 0063d0 | 65 00       |                 adc.d 000200         create new CP
1242:000 | DONE ins | na 16 16 | 0063d2 | b0 07       |                 bcs 0063db           oops, we've wrapped
1243:000 | DONE wsp | na 16 16 |        |             |
1244:000 | DONE ins | na 16 16 | 0063d4 | a8          |                 tay                  save copy of new CP
1245:000 | DONE wsp | na 16 16 |        |             |
1246:000 | DONE ins | na 16 16 | 0063d5 | 38          |                 sec                  
1247:000 | DONE ins | na 16 16 | 0063d6 | e9 ff 7b    |                 sbc.# 007bff         
1248:000 | DONE ins | na 16 16 | 0063d9 | 30 11       |                 bmi 0063ec           oops, fall thru if beyond max RAM
1249:000 | DONE wsp | na 16 16 |        |             |
1250:000 | DONE lbl | na 16 16 | 0063db |             | allot_error                          
1251:000 | DONE ins | na 16 16 | 0063db | a9 22 76    |                 lda.# 007622         
1252:000 | DONE ins | na 16 16 | 0063de | 4c d9 70    |                 jmp 0070d9           
1253:000 | DONE wsp | na 16 16 |        |             |
1254:000 | DONE lbl | na 16 16 | 0063e1 |             | allot_minus                          
1255:000 | DONE cmt | na 16 16 |        |             |                 ; negative value means we're freeing memory
1256:000 | DONE ins | na 16 16 | 0063e1 | 38          |                 sec                  
1257:000 | DONE ins | na 16 16 | 0063e2 | e5 00       |                 sbc.d 000200         
1258:000 | DONE ins | na 16 16 | 0063e4 | 90 f5       |                 bcc 0063db           oops, we've wrapped
1259:000 | DONE wsp | na 16 16 |        |             |
1260:000 | DONE ins | na 16 16 | 0063e6 | a8          |                 tay                  
1261:000 | DONE wsp | na 16 16 |        |             |
1262:000 | DONE ins | na 16 16 | 0063e7 | e9 00 03    |                 sbc.# 000300         Carry Flag must still be set
1263:000 | DONE ins | na 16 16 | 0063ea | 30 ef       |                 bmi 0063db           oops, gone too far back
1264:000 | DONE wsp | na 16 16 |        |             |
1265:000 | DONE cmt | na 16 16 |        |             |                 ; fall through to allot_done
1266:000 | DONE lbl | na 16 16 | 0063ec |             | allot_done                           
1267:000 | DONE ins | na 16 16 | 0063ec | 84 00       |                 sty.d 000200         new compiler pointer
1268:000 | DONE lbl | na 16 16 | 0063ee |             | allot_real_gone                      
1269:000 | DONE ins | na 16 16 | 0063ee | b4 00       |                 ldy.dx 00            DROP
1270:000 | DONE ins | na 16 16 | 0063f0 | e8          |                 inx                  
1271:000 | DONE ins | na 16 16 | 0063f1 | e8          |                 inx                  
1272:000 | DONE wsp | na 16 16 |        |             |
1273:000 | DONE lbl | na 16 16 | 0063f2 |             | z_allot                              
1273:001 | DONE ins | na 16 16 | 0063f2 | 60          |                 rts                  
1274:000 | DONE wsp | na 16 16 |        |             |
1275:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1276:000 | DONE cmt | na 16 16 |        |             | ; AND ( n m -- n ) 6 bytes / X cycles
1277:000 | DONE cmt | na 16 16 |        |             | ; Logical AND
1278:000 | DONE lbl | na 16 16 | 0063f3 |             | xt_and                               
1279:000 | DONE ins | na 16 16 | 0063f3 | 98          |                 tya                  
1280:000 | DONE ins | na 16 16 | 0063f4 | 35 00       |                 and.dx 00            
1281:000 | DONE ins | na 16 16 | 0063f6 | a8          |                 tay                  
1282:000 | DONE wsp | na 16 16 |        |             |
1283:000 | DONE ins | na 16 16 | 0063f7 | e8          |                 inx                  NIP
1284:000 | DONE ins | na 16 16 | 0063f8 | e8          |                 inx                  
1285:000 | DONE wsp | na 16 16 |        |             |
1286:000 | DONE lbl | na 16 16 | 0063f9 |             | z_and                                
1286:001 | DONE ins | na 16 16 | 0063f9 | 60          |                 rts                  
1287:000 | DONE wsp | na 16 16 |        |             |
1288:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1289:000 | DONE cmt | na 16 16 |        |             | ; BASE ( -- addr ) X bytes / X cycles
1290:000 | DONE cmt | na 16 16 |        |             | ; Get the address of where the radix for number conversion is stored
1291:000 | DONE lbl | na 16 16 | 0063fa |             | xt_base                              
1292:000 | DONE ins | na 16 16 | 0063fa | ca          |                 dex                  
1293:000 | DONE ins | na 16 16 | 0063fb | ca          |                 dex                  
1294:000 | DONE ins | na 16 16 | 0063fc | 94 00       |                 sty.dx 00            
1295:000 | DONE wsp | na 16 16 |        |             |
1296:000 | DONE ins | na 16 16 | 0063fe | a0 1c 02    |                 ldy.# 00021c         
1297:000 | DONE wsp | na 16 16 |        |             |
1298:000 | DONE lbl | na 16 16 | 006401 |             | z_base                               
1298:001 | DONE ins | na 16 16 | 006401 | 60          |                 rts                  
1299:000 | DONE wsp | na 16 16 |        |             |
1300:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1301:000 | DONE cmt | na 16 16 |        |             | ; BELL ( -- ) X bytes / X cycles
1302:000 | DONE cmt | na 16 16 |        |             | ; Trigger terminal bell on vt100 terminals
1303:000 | DONE cmt | na 16 16 |        |             | ; TODO replace with EMIT
1304:000 | DONE lbl | na 16 16 | 006402 |             | xt_bell                              
1305:000 | DONE dir | na 16 16 |        |             |         .!a16                        
1306:000 | DONE ins | na 16 16 | 006402 | a9 07 00    |                 lda.# AscBELL        
1307:000 | DONE ins | na 16 16 | 006405 | 20 36 60    |                 jsr 006036           
1308:000 | DONE wsp | na 16 16 |        |             |
1309:000 | DONE lbl | na 16 16 | 006408 |             | z_bell                               
1309:001 | DONE ins | na 16 16 | 006408 | 60          |                 rts                  
1310:000 | DONE wsp | na 16 16 |        |             |
1311:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1312:000 | DONE cmt | na 16 16 |        |             | ; BEGIN ( -- addr ) 6 bytes / 13 cycles
1313:000 | DONE cmt | na 16 16 |        |             | ; Mark entry point for a loop. This is just an immediate version of here which
1314:000 | DONE cmt | na 16 16 |        |             | ; could just as welle be coded as  : BEGIN HERE ; IMMEDIATE  but we code it here
1315:000 | DONE cmt | na 16 16 |        |             | ; differently for speed
1316:000 | DONE lbl | na 16 16 | 006409 |             | xt_begin                             
1317:000 | DONE cmt | na 16 16 |        |             |                 ; really just the same code as HERE
1318:000 | DONE ins | na 16 16 | 006409 | ca          |                 dex                  
1319:000 | DONE ins | na 16 16 | 00640a | ca          |                 dex                  
1320:000 | DONE ins | na 16 16 | 00640b | 94 00       |                 sty.dx 00            
1321:000 | DONE wsp | na 16 16 |        |             |
1322:000 | DONE ins | na 16 16 | 00640d | a4 00       |                 ldy.d 000200         
1323:000 | DONE wsp | na 16 16 |        |             |
1324:000 | DONE lbl | na 16 16 | 00640f |             | z_begin                              
1324:001 | DONE ins | na 16 16 | 00640f | 60          |                 rts                  
1325:000 | DONE wsp | na 16 16 |        |             |
1326:000 | DONE wsp | na 16 16 |        |             |
1327:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1328:000 | DONE cmt | na 16 16 |        |             | ; BL ( -- u ) 7 bytes / 12 cycles
1329:000 | DONE cmt | na 16 16 |        |             | ; Put ASCII char for SPACE on Data Stack
1330:000 | DONE lbl | na 16 16 | 006410 |             | xt_bl                                
1331:000 | DONE dir | na 16 16 |        |             |         .!xy16                       
1332:000 | DONE ins | na 16 16 | 006410 | ca          |                 dex                  
1333:000 | DONE ins | na 16 16 | 006411 | ca          |                 dex                  
1334:000 | DONE ins | na 16 16 | 006412 | 94 00       |                 sty.dx 00            
1335:000 | DONE ins | na 16 16 | 006414 | a0 20 00    |                 ldy.# AscSP          
1336:000 | DONE wsp | na 16 16 |        |             |
1337:000 | DONE lbl | na 16 16 | 006417 |             | z_bl                                 
1337:001 | DONE ins | na 16 16 | 006417 | 60          |                 rts                  
1338:000 | DONE wsp | na 16 16 |        |             |
1339:000 | DONE wsp | na 16 16 |        |             |
1340:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1341:000 | DONE cmt | na 16 16 |        |             | ; BRANCH ( -- ) X bytes / X cycles
1342:000 | DONE cmt | na 16 16 |        |             | ; Transfer control to given address. Uses tmp3 and tmptos
1343:000 | DONE lbl | na 16 16 | 006418 |             | xt_branch                            
1344:000 | DONE dir | na 16 16 |        |             |         .!a16                        
1345:000 | DONE cmt | na 16 16 |        |             |                 ; encode subroutine branch to runtime portion
1346:000 | DONE ins | na 16 16 | 006418 | f4 1f 64    |                 phe.# 00641f         
1347:000 | DONE ins | na 16 16 | 00641b | 20 b8 70    |                 jsr 0070b8           
1348:000 | DONE wsp | na 16 16 |        |             |
1349:000 | DONE lbl | na 16 16 | 00641e |             | z_branch                             
1349:001 | DONE ins | na 16 16 | 00641e | 60          |                 rts                  
1350:000 | DONE wsp | na 16 16 |        |             |
1351:000 | DONE lbl | na 16 16 | 00641f |             | branch_rt                            
1352:000 | DONE ins | na 16 16 | 00641f | 84 06       |                 sty.d 000206         
1353:000 | DONE wsp | na 16 16 |        |             |
1354:000 | DONE cmt | na 16 16 |        |             |                 ; The value on the Return Stack determines where we go to
1355:000 | DONE ins | na 16 16 | 006421 | 68          |                 pla                  
1356:000 | DONE ins | na 16 16 | 006422 | 85 1a       |                 sta.d 00021a         
1357:000 | DONE ins | na 16 16 | 006424 | a0 01 00    |                 ldy.# 0001           
1358:000 | DONE ins | na 16 16 | 006427 | b1 1a       |                 lda.diy 00021a       LDA (TMP1),Y ; get address we're pointing to
1359:000 | DONE ins | na 16 16 | 006429 | 3a          |                 dec.a                
1360:000 | DONE ins | na 16 16 | 00642a | 48          |                 pha                  put target address back on Return Stack
1361:000 | DONE wsp | na 16 16 |        |             |
1362:000 | DONE ins | na 16 16 | 00642b | a4 06       |                 ldy.d 000206         
1363:000 | DONE wsp | na 16 16 |        |             |
1364:000 | DONE ins | na 16 16 | 00642d | 60          |                 rts                  
1365:000 | DONE wsp | na 16 16 |        |             |
1366:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1367:000 | DONE cmt | na 16 16 |        |             | ; BYE ( -- ) 2 bytes / 7-8 cycles
1368:000 | DONE cmt | na 16 16 |        |             | ; Leave Liara Forth, returning to Mensch Monitor
1369:000 | DONE cmt | na 16 16 |        |             | ; TODO make sure this actually calls the MM
1370:000 | DONE lbl | na 16 16 | 00642e |             | xt_bye                               
1371:000 | DONE ins | na 16 16 | 00642e | 58          |                 cli                  
1372:000 | DONE ins | na 16 16 | 00642f | 00 00       |                 brk 00               status byte 00 required for assembler
1373:000 | DONE wsp | na 16 16 |        |             |
1374:000 | DONE lbl | na 16 16 | 006431 |             | z_bye                                
1374:001 | DONE ins | na 16 16 | 006431 | 60          |                 rts                  dummy for compiling, never reached
1375:000 | DONE wsp | na 16 16 |        |             |
1376:000 | DONE wsp | na 16 16 |        |             |
1377:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1378:000 | DONE cmt | na 16 16 |        |             | ; C, "C-COMMA" ( char -- ) 13 bytes / 28 cycles
1379:000 | DONE cmt | na 16 16 |        |             | ; Store one character in the Dictionary
1380:000 | DONE lbl | na 16 16 | 006432 |             | xt_c-comma                           
1381:000 | DONE ins | na 16 16 | 006432 | 98          |                 tya                  
1382:000 | DONE ins | na 16 16 | 006433 | e2 20       |                 sep 20               
1382:001 | DONE ctl | na  8 16 |        |             |         .!a8
1383:000 | DONE ins | na  8 16 | 006435 | 92 00       |                 sta.di 000200        STA (CP)
1384:000 | DONE ins | na  8 16 | 006437 | c2 20       |                 rep 20               
1384:001 | DONE ctl | na 16 16 |        |             |         .!a16
1385:000 | DONE ins | na 16 16 | 006439 | e6 00       |                 inc.d 000200         quick version of 1 ALLOT
1386:000 | DONE wsp | na 16 16 |        |             |
1387:000 | DONE ins | na 16 16 | 00643b | b4 00       |                 ldy.dx 00            
1388:000 | DONE ins | na 16 16 | 00643d | e8          |                 inx                  
1389:000 | DONE ins | na 16 16 | 00643e | e8          |                 inx                  
1390:000 | DONE wsp | na 16 16 |        |             |
1391:000 | DONE lbl | na 16 16 | 00643f |             | z_c-comma                            
1391:001 | DONE ins | na 16 16 | 00643f | 60          |                 rts                  
1392:000 | DONE wsp | na 16 16 |        |             |
1393:000 | DONE wsp | na 16 16 |        |             |
1394:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1395:000 | DONE cmt | na 16 16 |        |             | ; C@ "C-FETCH" ( addr -- n ) 11 bytes / 16 cycles
1396:000 | DONE cmt | na 16 16 |        |             | ; Get a single byte from the given address
1397:000 | DONE lbl | na 16 16 | 006440 |             | xt_c-fetch                           
1398:000 | DONE ins | na 16 16 | 006440 | e2 20       |                 sep 20               
1398:001 | DONE ctl | na  8 16 |        |             |         .!a8
1399:000 | DONE ins | na  8 16 | 006442 | b9 00 00    |                 lda.y 0000           
1400:000 | DONE ins | na  8 16 | 006445 | c2 20       |                 rep 20               
1400:001 | DONE ctl | na 16 16 |        |             |         .!a16
1401:000 | DONE ins | na 16 16 | 006447 | 29 ff 00    |                 and.# 00ff           
1402:000 | DONE ins | na 16 16 | 00644a | a8          |                 tay                  
1403:000 | DONE wsp | na 16 16 |        |             |
1404:000 | DONE lbl | na 16 16 | 00644b |             | z_c-fetch                            
1404:001 | DONE ins | na 16 16 | 00644b | 60          |                 rts                  
1405:000 | DONE wsp | na 16 16 |        |             |
1406:000 | DONE wsp | na 16 16 |        |             |
1407:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1408:000 | DONE cmt | na 16 16 |        |             | ; C! "C-STORE" ( n addr -- ) 15 bytes / 29 cycles
1409:000 | DONE cmt | na 16 16 |        |             | ; Store LSB of NOS at location given as TOS
1410:000 | DONE lbl | na 16 16 | 00644c |             | xt_c-store                           
1411:000 | DONE ins | na 16 16 | 00644c | b5 00       |                 lda.dx 00            
1412:000 | DONE ins | na 16 16 | 00644e | e2 20       |                 sep 20               
1412:001 | DONE ctl | na  8 16 |        |             |         .!a8
1413:000 | DONE ins | na  8 16 | 006450 | 99 00 00    |                 sta.y 0000           
1414:000 | DONE ins | na  8 16 | 006453 | c2 20       |                 rep 20               
1414:001 | DONE ctl | na 16 16 |        |             |         .!a16
1415:000 | DONE ins | na 16 16 | 006455 | b4 02       |                 ldy.dx 02            
1416:000 | DONE ins | na 16 16 | 006457 | e8          |                 inx                  
1417:000 | DONE ins | na 16 16 | 006458 | e8          |                 inx                  
1418:000 | DONE ins | na 16 16 | 006459 | e8          |                 inx                  
1419:000 | DONE ins | na 16 16 | 00645a | e8          |                 inx                  
1420:000 | DONE wsp | na 16 16 |        |             |
1421:000 | DONE lbl | na 16 16 | 00645b |             | z_c-store                            
1421:001 | DONE ins | na 16 16 | 00645b | 60          |                 rts                  
1422:000 | DONE wsp | na 16 16 |        |             |
1423:000 | DONE wsp | na 16 16 |        |             |
1424:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1425:000 | DONE cmt | na 16 16 |        |             | ; CELLS ( n -- n ) X bytes / X cycles
1426:000 | DONE cmt | na 16 16 |        |             | ; Given a number of cells, return the number of bytes that they will require.
1427:000 | DONE cmt | na 16 16 |        |             | ; This is 16 bit cell Forth, so the value returned by this word is the same as
1428:000 | DONE cmt | na 16 16 |        |             | ; returned by 2*, see there.
1429:000 | DONE wsp | na 16 16 |        |             |
1430:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1431:000 | DONE cmt | na 16 16 |        |             | ; CHAR ( "c" -- u ) 23 bytes / X cycles
1432:000 | DONE cmt | na 16 16 |        |             | ; Convert a character to its ASCII value
1433:000 | DONE lbl | na 16 16 | 00645c |             | xt_char                              
1434:000 | DONE dir | na 16 16 |        |             |         .!a16                        
1435:000 | DONE ins | na 16 16 | 00645c | 20 61 67    |                 jsr 006761           ( -- addr u )
1436:000 | DONE wsp | na 16 16 |        |             |
1437:000 | DONE cmt | na 16 16 |        |             |                 ; if we got back a zero, we have a problem
1438:000 | DONE ins | na 16 16 | 00645f | 98          |                 tya                  force flag check
1439:000 | DONE ins | na 16 16 | 006460 | d0 06       |                 bne 006468           
1440:000 | DONE wsp | na 16 16 |        |             |
1441:000 | DONE ins | na 16 16 | 006462 | a9 c1 76    |                 lda.# 0076c1         
1442:000 | DONE ins | na 16 16 | 006465 | 4c d9 70    |                 jmp 0070d9           
1443:000 | DONE wsp | na 16 16 |        |             |
1444:000 | DONE lbl | na 16 16 | 006468 |             | char_got_char                        
1445:000 | DONE ins | na 16 16 | 006468 | b4 00       |                 ldy.dx 00            get addr from NOS
1446:000 | DONE ins | na 16 16 | 00646a | b9 00 00    |                 lda.y 0000           LDA 0000,Y - could be C@
1447:000 | DONE ins | na 16 16 | 00646d | 29 ff 00    |                 and.# 00ff           
1448:000 | DONE ins | na 16 16 | 006470 | a8          |                 tay                  
1449:000 | DONE wsp | na 16 16 |        |             |
1450:000 | DONE ins | na 16 16 | 006471 | e8          |                 inx                  
1451:000 | DONE ins | na 16 16 | 006472 | e8          |                 inx                  
1452:000 | DONE wsp | na 16 16 |        |             |
1453:000 | DONE lbl | na 16 16 | 006473 |             | z_char                               
1453:001 | DONE ins | na 16 16 | 006473 | 60          |                 rts                  
1454:000 | DONE wsp | na 16 16 |        |             |
1455:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1456:000 | DONE cmt | na 16 16 |        |             | ; CHAR>NUMBER ( char -- u f | char f )  X bytes / X cycles
1457:000 | DONE cmt | na 16 16 |        |             | ; Convert a single ASCII character to a number in the current radix. Inspired by
1458:000 | DONE cmt | na 16 16 |        |             | ; the pForth instruction DIGIT by Phil Burk, rewritten from DIGIT>NUMBER in Tali
1459:000 | DONE cmt | na 16 16 |        |             | ; Forth.
1460:000 | DONE lbl | na 16 16 | 006474 |             | xt_char-num                          
1461:000 | DONE dir | na 16 16 |        |             |         .!a16                        
1462:000 | DONE ins | na 16 16 | 006474 | 98          |                 tya                  
1463:000 | DONE ins | na 16 16 | 006475 | 29 ff 00    |                 and.# 00ff           
1464:000 | DONE wsp | na 16 16 |        |             |
1465:000 | DONE ins | na 16 16 | 006478 | e2 20       |                 sep 20               
1465:001 | DONE ctl | na  8 16 |        |             |         .!a8
1466:000 | DONE cmt | na  8 16 |        |             |                 ; Make sure we're not below the ASCII code for '0'
1467:000 | DONE ins | na  8 16 | 00647a | c9 30       |                 cmp.# 30             
1468:000 | DONE ins | na  8 16 | 00647c | 90 1d       |                 bcc 00649b           
1469:000 | DONE wsp | na  8 16 |        |             |
1470:000 | DONE cmt | na  8 16 |        |             |                 ; Then see if we are below '9', because that would make this
1471:000 | DONE cmt | na  8 16 |        |             |                 ; a normal number
1472:000 | DONE ins | na  8 16 | 00647e | c9 3a       |                 cmp.# 00003a         This is ':'
1473:000 | DONE ins | na  8 16 | 006480 | 90 12       |                 bcc 006494           
1474:000 | DONE wsp | na  8 16 |        |             |
1475:000 | DONE cmt | na  8 16 |        |             |                 ; Well, then let's see if this is the gap between '9' and 'A' so
1476:000 | DONE cmt | na  8 16 |        |             |                 ; we can treat the whole range as a number
1477:000 | DONE ins | na  8 16 | 006482 | c9 40       |                 cmp.# 000040         This is '@'
1478:000 | DONE ins | na  8 16 | 006484 | 90 15       |                 bcc 00649b           
1479:000 | DONE wsp | na  8 16 |        |             |
1480:000 | DONE cmt | na  8 16 |        |             |                 ; Probably a letter, so we make sure it is uppercase
1481:000 | DONE ins | na  8 16 | 006486 | c9 61       |                 cmp.# 61             
1482:000 | DONE ins | na  8 16 | 006488 | 90 07       |                 bcc 006491           not lower case, too low
1483:000 | DONE ins | na  8 16 | 00648a | c9 7b       |                 cmp.# 00007b         
1484:000 | DONE ins | na  8 16 | 00648c | b0 03       |                 bcs 006491           not lower case, too high
1485:000 | DONE wsp | na  8 16 |        |             |
1486:000 | DONE ins | na  8 16 | 00648e | 18          |                 clc                  just right
1487:000 | DONE ins | na  8 16 | 00648f | 69 e0       |                 adc.# e0             offset to uppercase (wraps)
1488:000 | DONE wsp | na  8 16 |        |             |
1489:000 | DONE lbl | na  8 16 | 006491 |             | cn_case_done                         
1490:000 | DONE cmt | na  8 16 |        |             |                 ; Get rid of the gap between '9' and 'A' so we can treat the
1491:000 | DONE cmt | na  8 16 |        |             |                 ; whole range as one number
1492:000 | DONE ins | na  8 16 | 006491 | 38          |                 sec                  
1493:000 | DONE ins | na  8 16 | 006492 | e9 07       |                 sbc.# 07             fall through to cn_checkbase
1494:000 | DONE wsp | na  8 16 |        |             |
1495:000 | DONE lbl | na  8 16 | 006494 |             | cn_checkbase                         
1496:000 | DONE cmt | na  8 16 |        |             |                 ; We have a number, now see if it inside the range given by BASE
1497:000 | DONE ins | na  8 16 | 006494 | 38          |                 sec                  
1498:000 | DONE ins | na  8 16 | 006495 | e9 30       |                 sbc.# 30             This is also the actual conversion step
1499:000 | DONE ins | na  8 16 | 006497 | c5 1c       |                 cmp.d 00021c         
1500:000 | DONE ins | na  8 16 | 006499 | 90 0b       |                 bcc 0064a6           
1501:000 | DONE wsp | na  8 16 |        |             |
1502:000 | DONE lbl | na  8 16 | 00649b |             | cn_notdigit                          
1503:000 | DONE cmt | na  8 16 |        |             |                 ; not a digit, add a false flag
1504:000 | DONE ins | na  8 16 | 00649b | ca          |                 dex                  
1505:000 | DONE ins | na  8 16 | 00649c | ca          |                 dex                  
1506:000 | DONE ins | na  8 16 | 00649d | 94 00       |                 sty.dx 00            keep the offending character in NOS
1507:000 | DONE ins | na  8 16 | 00649f | a0 00 00    |                 ldy.# 0000           
1508:000 | DONE ins | na  8 16 | 0064a2 | c2 20       |                 rep 20               
1508:001 | DONE ctl | na 16 16 |        |             |         .!a16
1509:000 | DONE ins | na 16 16 | 0064a4 | 80 09       |                 bra 0064af           
1510:000 | DONE wsp | na 16 16 |        |             |
1511:000 | DONE lbl | na 16 16 | 0064a6 |             | cn_success                           
1512:000 | DONE ins | na 16 16 | 0064a6 | ca          |                 dex                  
1513:000 | DONE ins | na 16 16 | 0064a7 | ca          |                 dex                  
1514:000 | DONE ins | na 16 16 | 0064a8 | c2 20       |                 rep 20               
1514:001 | DONE ctl | na 16 16 |        |             |         .!a16
1515:000 | DONE ins | na 16 16 | 0064aa | 95 00       |                 sta.dx 00            put the number in NOS
1516:000 | DONE ins | na 16 16 | 0064ac | a0 ff ff    |                 ldy.# 0ffff          
1517:000 | DONE wsp | na 16 16 |        |             |
1518:000 | DONE lbl | na 16 16 | 0064af |             | z_char-num                           
1518:001 | DONE ins | na 16 16 | 0064af | 60          |                 rts                  
1519:000 | DONE wsp | na 16 16 |        |             |
1520:000 | DONE wsp | na 16 16 |        |             |
1521:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1522:000 | DONE cmt | na 16 16 |        |             | ; COMPILE-ONLY ( -- ) 8 bytes / X cycles
1523:000 | DONE cmt | na 16 16 |        |             | ; Mark the most recently defined word as COMPILE-ONLY. The alternative (and
1524:000 | DONE cmt | na 16 16 |        |             | ; traditional) way to do this is to include a word ?COMPILE that makes sure
1525:000 | DONE cmt | na 16 16 |        |             | ; we're in compile mode
1526:000 | DONE lbl | na 16 16 | 0064b0 |             | xt_compile-only                      
1527:000 | DONE dir | na 16 16 |        |             |         .!a16                        
1528:000 | DONE ins | na 16 16 | 0064b0 | a9 04 00    |                 lda.# CO             
1529:000 | DONE ins | na 16 16 | 0064b3 | eb          |                 xba                  flags are MSB
1530:000 | DONE ins | na 16 16 | 0064b4 | 12 02       |                 ora.di 000202        ORA (DP)
1531:000 | DONE ins | na 16 16 | 0064b6 | 92 02       |                 sta.di 000202        
1532:000 | DONE wsp | na 16 16 |        |             |
1533:000 | DONE lbl | na 16 16 | 0064b8 |             | z_compile-only                       
1533:001 | DONE ins | na 16 16 | 0064b8 | 60          |                 rts                  
1534:000 | DONE wsp | na 16 16 |        |             |
1535:000 | DONE wsp | na 16 16 |        |             |
1536:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1537:000 | DONE cmt | na 16 16 |        |             | ; COMPILE, ( xt -- ) X bytes / X cycles
1538:000 | DONE cmt | na 16 16 |        |             | ; Compile a given xt in the current word definition. It is an error if we are
1539:000 | DONE cmt | na 16 16 |        |             | ; not in the compile state. Because we are using subroutine threading, we can't
1540:000 | DONE cmt | na 16 16 |        |             | ; use , (COMMA) to compile new words the traditional way. We use the NC (Native
1541:000 | DONE cmt | na 16 16 |        |             | ; Compile) flag to decide if native compilation is allowed. If yes, we use the
1542:000 | DONE cmt | na 16 16 |        |             | ; value NC_LIMIT (in definitions.tasm) to decide if the code is too large to be
1543:000 | DONE cmt | na 16 16 |        |             | ; natively coded: If the size is smaller than NC_LIMIT, we silently use
1544:000 | DONE cmt | na 16 16 |        |             | ; subroutine coding.
1545:000 | DONE cmt | na 16 16 |        |             | ; TODO currently just compiles subroutine jumps
1546:000 | DONE lbl | na 16 16 | 0064b9 |             | xt_compilecomma                      
1547:000 | DONE wsp | na 16 16 |        |             |
1548:000 | DONE lbl | na 16 16 | 0064b9 |             | compile_as_code                      
1549:000 | DONE cmt | na 16 16 |        |             |                 ; Compile xt as native code
1550:000 | DONE cmt | na 16 16 |        |             |                 ; use nc_limit to decide if we want native compile
1551:000 | DONE cmt | na 16 16 |        |             |                 ; TODO consider special cases:
1552:000 | DONE cmt | na 16 16 |        |             |                 ;  - >R R> R@ should strip PLA/PHA if native compiled
1553:000 | DONE cmt | na 16 16 |        |             |                 ;  - Don't compile comments
1554:000 | DONE wsp | na 16 16 |        |             |
1555:000 | DONE lbl | na 16 16 | 0064b9 |             | compile_as_jump                      
1556:000 | DONE cmt | na 16 16 |        |             |                 ; Compile xt as a subroutine jump. We don't have to switch A to
1557:000 | DONE cmt | na 16 16 |        |             |                 ; 8-bit register size because we only advance CP by one byte, so
1558:000 | DONE cmt | na 16 16 |        |             |                 ; the MSB of A is overwritten. Little endian machines for the
1559:000 | DONE cmt | na 16 16 |        |             |                 ; win!
1560:000 | DONE ins | na 16 16 | 0064b9 | a9 20 00    |                 lda.# 20             opcode for JSR
1561:000 | DONE ins | na 16 16 | 0064bc | 92 00       |                 sta.di 000200        STA (CP)
1562:000 | DONE ins | na 16 16 | 0064be | e6 00       |                 inc.d 000200         
1563:000 | DONE wsp | na 16 16 |        |             |
1564:000 | DONE cmt | na 16 16 |        |             |                 ; There is no "sty.di" instruction, so we have to do this the
1565:000 | DONE cmt | na 16 16 |        |             |                 ; hard way
1566:000 | DONE ins | na 16 16 | 0064c0 | 98          |                 tya                  
1567:000 | DONE ins | na 16 16 | 0064c1 | 92 00       |                 sta.di 000200        
1568:000 | DONE ins | na 16 16 | 0064c3 | e6 00       |                 inc.d 000200         
1569:000 | DONE ins | na 16 16 | 0064c5 | e6 00       |                 inc.d 000200         
1570:000 | DONE wsp | na 16 16 |        |             |
1571:000 | DONE ins | na 16 16 | 0064c7 | b4 00       |                 ldy.dx 00            
1572:000 | DONE ins | na 16 16 | 0064c9 | e8          |                 inx                  
1573:000 | DONE ins | na 16 16 | 0064ca | e8          |                 inx                  
1574:000 | DONE wsp | na 16 16 |        |             |
1575:000 | DONE lbl | na 16 16 | 0064cb |             | z_compilecomma                       
1575:001 | DONE ins | na 16 16 | 0064cb | 60          |                 rts                  
1576:000 | DONE wsp | na 16 16 |        |             |
1577:000 | DONE wsp | na 16 16 |        |             |
1578:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1579:000 | DONE cmt | na 16 16 |        |             | ; CONSTANT ( "name" n -- ) X bytes / X cycles
1580:000 | DONE cmt | na 16 16 |        |             | ; Associate a fixed value with a word. This could be realized as
1581:000 | DONE cmt | na 16 16 |        |             | ; CREATE , DOES> @  as well. We do more in assembler but let CREATE do the heavy
1582:000 | DONE cmt | na 16 16 |        |             | ; lifting.
1583:000 | DONE cmt | na 16 16 |        |             | ; See http://www.bradrodriguez.com/papers/moving3.htm for a primer on how
1584:000 | DONE cmt | na 16 16 |        |             | ; this works in various Forths.
1585:000 | DONE lbl | na 16 16 | 0064cc |             | xt_constant                          
1586:000 | DONE ins | na 16 16 | 0064cc | 20 fc 64    |                 jsr 0064fc           
1587:000 | DONE wsp | na 16 16 |        |             |
1588:000 | DONE cmt | na 16 16 |        |             |                 ; CREATE by default installs a subroutine jump to DOVAR, but we
1589:000 | DONE cmt | na 16 16 |        |             |                 ; actually want DOCONST this time. Go back two bytes and repace
1590:000 | DONE cmt | na 16 16 |        |             |                 ; the subroutine jump target
1591:000 | DONE ins | na 16 16 | 0064cf | a5 00       |                 lda.d 000200         
1592:000 | DONE ins | na 16 16 | 0064d1 | 3a          |                 dec.a                
1593:000 | DONE ins | na 16 16 | 0064d2 | 3a          |                 dec.a                
1594:000 | DONE ins | na 16 16 | 0064d3 | 85 16       |                 sta.d 000216         
1595:000 | DONE wsp | na 16 16 |        |             |
1596:000 | DONE ins | na 16 16 | 0064d5 | a9 45 70    |                 lda.# 007045         
1597:000 | DONE ins | na 16 16 | 0064d8 | 92 16       |                 sta.di 000216        STA (TMP1)
1598:000 | DONE wsp | na 16 16 |        |             |
1599:000 | DONE cmt | na 16 16 |        |             |                 ; Save TOS in next cell. This is a direct version of COMMA
1600:000 | DONE ins | na 16 16 | 0064da | 98          |                 tya                  there is no "sty.di cp"
1601:000 | DONE ins | na 16 16 | 0064db | 92 00       |                 sta.di 000200        
1602:000 | DONE ins | na 16 16 | 0064dd | e6 00       |                 inc.d 000200         
1603:000 | DONE ins | na 16 16 | 0064df | e6 00       |                 inc.d 000200         
1604:000 | DONE wsp | na 16 16 |        |             |
1605:000 | DONE ins | na 16 16 | 0064e1 | b4 00       |                 ldy.dx 00            DROP
1606:000 | DONE ins | na 16 16 | 0064e3 | e8          |                 inx                  
1607:000 | DONE ins | na 16 16 | 0064e4 | e8          |                 inx                  
1608:000 | DONE wsp | na 16 16 |        |             |
1609:000 | DONE lbl | na 16 16 | 0064e5 |             | z_constant                           
1609:001 | DONE ins | na 16 16 | 0064e5 | 60          |                 rts                  
1610:000 | DONE wsp | na 16 16 |        |             |
1611:000 | DONE wsp | na 16 16 |        |             |
1612:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1613:000 | DONE cmt | na 16 16 |        |             | ; COUNT ( c-addr -- addr u ) 14 bytes / X cycles
1614:000 | DONE cmt | na 16 16 |        |             | ; Convert old-style character string to address-length pair. Note that the
1615:000 | DONE cmt | na 16 16 |        |             | ; length of the string c-addr ist stored in character length (8 bit), not cell
1616:000 | DONE cmt | na 16 16 |        |             | ; length (16 bit). This is rarely used these days, though COUNT can also be used
1617:000 | DONE cmt | na 16 16 |        |             | ; to step through a string character by character.
1618:000 | DONE lbl | na 16 16 | 0064e6 |             | xt_count                             
1619:000 | DONE dir | na 16 16 |        |             |         .!a16                        
1620:000 | DONE dir | na 16 16 |        |             |         .!xy16                       
1621:000 | DONE ins | na 16 16 | 0064e6 | 98          |                 tya                  
1622:000 | DONE ins | na 16 16 | 0064e7 | 1a          |                 inc.a                String address starts one char later
1623:000 | DONE wsp | na 16 16 |        |             |
1624:000 | DONE ins | na 16 16 | 0064e8 | ca          |                 dex                  
1625:000 | DONE ins | na 16 16 | 0064e9 | ca          |                 dex                  
1626:000 | DONE ins | na 16 16 | 0064ea | 95 00       |                 sta.dx 00            NOS
1627:000 | DONE wsp | na 16 16 |        |             |
1628:000 | DONE ins | na 16 16 | 0064ec | b9 00 00    |                 lda.y 0000           LDA $0000,Y  first byte is length
1629:000 | DONE ins | na 16 16 | 0064ef | eb          |                 xba                  move length to LSB
1630:000 | DONE ins | na 16 16 | 0064f0 | 29 ff 00    |                 and.# 00ff           get rid of whatever was MSB
1631:000 | DONE ins | na 16 16 | 0064f3 | a8          |                 tay                  TOS
1632:000 | DONE wsp | na 16 16 |        |             |
1633:000 | DONE lbl | na 16 16 | 0064f4 |             | z_count                              
1633:001 | DONE ins | na 16 16 | 0064f4 | 60          |                 rts                  
1634:000 | DONE wsp | na 16 16 |        |             |
1635:000 | DONE wsp | na 16 16 |        |             |
1636:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1637:000 | DONE cmt | na 16 16 |        |             | ; CR ( -- ) X bytes / X cycles
1638:000 | DONE cmt | na 16 16 |        |             | ; Cause following output to appear at beginning of next line
1639:000 | DONE cmt | na 16 16 |        |             | ; TODO replace with EMIT
1640:000 | DONE lbl | na 16 16 | 0064f5 |             | xt_cr                                
1641:000 | DONE ins | na 16 16 | 0064f5 | a9 0a 00    |                 lda.# AscLF          test with AscCR for emulators
1642:000 | DONE ins | na 16 16 | 0064f8 | 20 36 60    |                 jsr 006036           
1643:000 | DONE wsp | na 16 16 |        |             |
1644:000 | DONE lbl | na 16 16 | 0064fb |             | z_cr                                 
1644:001 | DONE ins | na 16 16 | 0064fb | 60          |                 rts                  
1645:000 | DONE wsp | na 16 16 |        |             |
1646:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1647:000 | DONE cmt | na 16 16 |        |             | ; CREATE ( "name" -- ) X bytes / X cycles
1648:000 | DONE cmt | na 16 16 |        |             | ; Create a Dictionary entry associated with "name", used for various words,
1649:000 | DONE cmt | na 16 16 |        |             | ; especially for VARIABLE. When called, this new word will return the associated
1650:000 | DONE cmt | na 16 16 |        |             | ; address.
1651:000 | DONE lbl | na 16 16 | 0064fc |             | xt_create                            
1652:000 | DONE dir | na 16 16 |        |             |         .!a16                        
1653:000 | DONE ins | na 16 16 | 0064fc | 20 61 67    |                 jsr 006761           ( -- addr u )
1654:000 | DONE ins | na 16 16 | 0064ff | d0 06       |                 bne 006507           
1655:000 | DONE wsp | na 16 16 |        |             |
1656:000 | DONE cmt | na 16 16 |        |             |                 ; if we got a zero-length name string, complain and abort
1657:000 | DONE ins | na 16 16 | 006501 | a9 c1 76    |                 lda.# 0076c1         
1658:000 | DONE ins | na 16 16 | 006504 | 4c d9 70    |                 jmp 0070d9           
1659:000 | DONE wsp | na 16 16 |        |             |
1660:000 | DONE lbl | na 16 16 | 006507 |             | create_got_name                      
1661:000 | DONE cmt | na 16 16 |        |             |                 ; all Dictionary entries are lowercase
1662:000 | DONE ins | na 16 16 | 006507 | 20 12 71    |                 jsr 007112           
1663:000 | DONE wsp | na 16 16 |        |             |
1664:000 | DONE cmt | na 16 16 |        |             |                 ; Remember the first free byte of memory as the start of the new
1665:000 | DONE cmt | na 16 16 |        |             |                 ; word
1666:000 | DONE ins | na 16 16 | 00650a | a5 00       |                 lda.d 000200         
1667:000 | DONE ins | na 16 16 | 00650c | 85 16       |                 sta.d 000216         save start of new word
1668:000 | DONE wsp | na 16 16 |        |             |
1669:000 | DONE cmt | na 16 16 |        |             |                 ; Enforce limit on 255 char length names by masking the MSB
1670:000 | DONE cmt | na 16 16 |        |             |                 ; of the length of the given string. We arrive here with
1671:000 | DONE cmt | na 16 16 |        |             |                 ; ( addr u )
1672:000 | DONE ins | na 16 16 | 00650e | 98          |                 tya                  
1673:000 | DONE ins | na 16 16 | 00650f | 29 ff 00    |                 and.# 00ff           
1674:000 | DONE ins | na 16 16 | 006512 | 85 18       |                 sta.d 000218         save length of name string
1675:000 | DONE wsp | na 16 16 |        |             |
1676:000 | DONE cmt | na 16 16 |        |             |                 ; We need 8 bytes + the length of the name string for our new
1677:000 | DONE cmt | na 16 16 |        |             |                 ; header. This is also the offset for the start of the code
1678:000 | DONE cmt | na 16 16 |        |             |                 ; field (the xt_ label) so we need to remember it. Otherwise, we
1679:000 | DONE cmt | na 16 16 |        |             |                 ; could just allot the space afterwards.
1680:000 | DONE ins | na 16 16 | 006514 | 18          |                 clc                  
1681:000 | DONE ins | na 16 16 | 006515 | 69 08 00    |                 adc.# 0008           
1682:000 | DONE ins | na 16 16 | 006518 | 85 1a       |                 sta.d 00021a         total bytes required for header
1683:000 | DONE wsp | na 16 16 |        |             |
1684:000 | DONE cmt | na 16 16 |        |             |                 ; We need to allocate three more bytes for the hardcoded
1685:000 | DONE cmt | na 16 16 |        |             |                 ; code field area (CFA), the "payload" of the word which by
1686:000 | DONE cmt | na 16 16 |        |             |                 ; default will be a subroutine jump to DOVAR
1687:000 | DONE ins | na 16 16 | 00651a | 1a          |                 inc.a                
1688:000 | DONE ins | na 16 16 | 00651b | 1a          |                 inc.a                
1689:000 | DONE ins | na 16 16 | 00651c | 1a          |                 inc.a                
1690:000 | DONE wsp | na 16 16 |        |             |
1691:000 | DONE cmt | na 16 16 |        |             |                 ; Instead of jumping to ALLOT, we do things by hand for speed
1692:000 | DONE cmt | na 16 16 |        |             |                 ; and so we don't have to fool around with the stack
1693:000 | DONE ins | na 16 16 | 00651d | 18          |                 clc                  
1694:000 | DONE ins | na 16 16 | 00651e | 65 00       |                 adc.d 000200         
1695:000 | DONE ins | na 16 16 | 006520 | 85 00       |                 sta.d 000200         
1696:000 | DONE wsp | na 16 16 |        |             |
1697:000 | DONE cmt | na 16 16 |        |             |                 ; Now we walk through the header, using Y as the index. See
1698:000 | DONE cmt | na 16 16 |        |             |                 ; drawing of header in headers.tasm file for reference. We
1699:000 | DONE cmt | na 16 16 |        |             |                 ; arrive here with ( addr u ) still from PARSE-NAME. We need
1700:000 | DONE cmt | na 16 16 |        |             |                 ; that addr later for the name string, so we push it to the
1701:000 | DONE cmt | na 16 16 |        |             |                 ; Return Stack. We'll clean up the Data Stack later
1702:000 | DONE ins | na 16 16 | 006522 | b5 00       |                 lda.dx 00            
1703:000 | DONE ins | na 16 16 | 006524 | 48          |                 pha                  
1704:000 | DONE wsp | na 16 16 |        |             |
1705:000 | DONE cmt | na 16 16 |        |             |                 ; HEADER BYTES 0,1: Length byte and flags
1706:000 | DONE ins | na 16 16 | 006525 | a0 00 00    |                 ldy.# 0000           Y is now an index, not TOS
1707:000 | DONE ins | na 16 16 | 006528 | a5 18       |                 lda.d 000218         get length byte
1708:000 | DONE ins | na 16 16 | 00652a | 91 16       |                 sta.diy 000216       STA (TMP1),Y
1709:000 | DONE ins | na 16 16 | 00652c | c8          |                 iny                  
1710:000 | DONE ins | na 16 16 | 00652d | c8          |                 iny                  
1711:000 | DONE wsp | na 16 16 |        |             |
1712:000 | DONE cmt | na 16 16 |        |             |                 ; BYTES 2,3: Next word in the dictionary (its nt). This is the
1713:000 | DONE cmt | na 16 16 |        |             |                 ; current Dictionary Pointer
1714:000 | DONE ins | na 16 16 | 00652e | a5 02       |                 lda.d 000202         
1715:000 | DONE ins | na 16 16 | 006530 | 91 16       |                 sta.diy 000216       
1716:000 | DONE ins | na 16 16 | 006532 | c8          |                 iny                  
1717:000 | DONE ins | na 16 16 | 006533 | c8          |                 iny                  
1718:000 | DONE wsp | na 16 16 |        |             |
1719:000 | DONE cmt | na 16 16 |        |             |                 ; BYTES 4,5: Start of code field (xt of this word, "xt_" link)
1720:000 | DONE cmt | na 16 16 |        |             |                 ; This begins after the header, so we take the length of the
1721:000 | DONE cmt | na 16 16 |        |             |                 ; header, which we saved in tmp3, and use it as an offset to
1722:000 | DONE cmt | na 16 16 |        |             |                 ; the address of the start of the word
1723:000 | DONE ins | na 16 16 | 006534 | a5 16       |                 lda.d 000216         can't use CP, because we've allotted space
1724:000 | DONE ins | na 16 16 | 006536 | 85 02       |                 sta.d 000202         while we've got it, make old CP the new DP
1725:000 | DONE wsp | na 16 16 |        |             |
1726:000 | DONE ins | na 16 16 | 006538 | 18          |                 clc                  
1727:000 | DONE ins | na 16 16 | 006539 | 65 1a       |                 adc.d 00021a         total header length
1728:000 | DONE ins | na 16 16 | 00653b | 91 16       |                 sta.diy 000216       
1729:000 | DONE ins | na 16 16 | 00653d | c8          |                 iny                  
1730:000 | DONE ins | na 16 16 | 00653e | c8          |                 iny                  
1731:000 | DONE wsp | na 16 16 |        |             |
1732:000 | DONE cmt | na 16 16 |        |             |                 ; BYTES 6,7: End of code ("z_" link)
1733:000 | DONE cmt | na 16 16 |        |             |                 ; By default, we execute a jump to the DOVAR routine, so we need
1734:000 | DONE cmt | na 16 16 |        |             |                 ; to move three bytes down, and then one more byte so the z_
1735:000 | DONE cmt | na 16 16 |        |             |                 ; label points to the (fictional) RTS instruction for correct
1736:000 | DONE cmt | na 16 16 |        |             |                 ; compilation. The start of the code field is still in A
1737:000 | DONE ins | na 16 16 | 00653f | 1a          |                 inc.a                
1738:000 | DONE ins | na 16 16 | 006540 | 1a          |                 inc.a                
1739:000 | DONE ins | na 16 16 | 006541 | 1a          |                 inc.a                
1740:000 | DONE ins | na 16 16 | 006542 | 91 16       |                 sta.diy 000216       
1741:000 | DONE ins | na 16 16 | 006544 | c8          |                 iny                  
1742:000 | DONE ins | na 16 16 | 006545 | c8          |                 iny                  
1743:000 | DONE wsp | na 16 16 |        |             |
1744:000 | DONE cmt | na 16 16 |        |             |                 ; BYTE 8: Start of name string
1745:000 | DONE cmt | na 16 16 |        |             |                 ; The addr of the string is on the Return Stack, the length of
1746:000 | DONE cmt | na 16 16 |        |             |                 ; the name string is in tmp2. We subtract eight from the address
1747:000 | DONE cmt | na 16 16 |        |             |                 ; so we can use the same loop index
1748:000 | DONE ins | na 16 16 | 006546 | 68          |                 pla                  get back string address
1749:000 | DONE ins | na 16 16 | 006547 | 38          |                 sec                  
1750:000 | DONE ins | na 16 16 | 006548 | e9 08 00    |                 sbc.# 0008           
1751:000 | DONE ins | na 16 16 | 00654b | 85 1a       |                 sta.d 00021a         
1752:000 | DONE ins | na 16 16 | 00654d | e2 20       |                 sep 20               
1752:001 | DONE ctl | na  8 16 |        |             |         .!a8
1753:000 | DONE lbl | na  8 16 | 00654f |             | @                                    
1754:000 | DONE ins | na  8 16 | 00654f | b1 1a       |                 lda.diy 00021a       
1755:000 | DONE ins | na  8 16 | 006551 | 91 16       |                 sta.diy 000216       
1756:000 | DONE ins | na  8 16 | 006553 | c8          |                 iny                  
1757:000 | DONE ins | na  8 16 | 006554 | c6 18       |                 dec.d 000218         
1758:000 | DONE ins | na  8 16 | 006556 | d0 f7       |                 bne 00654f           
1759:000 | DONE wsp | na  8 16 |        |             |
1760:000 | DONE cmt | na  8 16 |        |             |                 ; After the name string, comes the Code Field (start at xt, that
1761:000 | DONE cmt | na  8 16 |        |             |                 ; is, the xt_ label of the word) which is initially a jump to the
1762:000 | DONE cmt | na  8 16 |        |             |                 ; subroutine to DOVAR. We're still in 8-bit A-register, which is
1763:000 | DONE cmt | na  8 16 |        |             |                 ; good
1764:000 | DONE ins | na  8 16 | 006558 | a9 20       |                 lda.# 20             opcode of JSR
1765:000 | DONE ins | na  8 16 | 00655a | 91 16       |                 sta.diy 000216       
1766:000 | DONE ins | na  8 16 | 00655c | c8          |                 iny                  single increase only because we have 8-bit A
1767:000 | DONE wsp | na  8 16 |        |             |
1768:000 | DONE ins | na  8 16 | 00655d | a9 60       |                 lda.# .lsb 007060    
1769:000 | DONE ins | na  8 16 | 00655f | 91 16       |                 sta.diy 000216       
1770:000 | DONE ins | na  8 16 | 006561 | c8          |                 iny                  
1771:000 | DONE wsp | na  8 16 |        |             |
1772:000 | DONE ins | na  8 16 | 006562 | a9 70       |                 lda.# .msb 007060    
1773:000 | DONE ins | na  8 16 | 006564 | 91 16       |                 sta.diy 000216       
1774:000 | DONE wsp | na  8 16 |        |             |
1775:000 | DONE ins | na  8 16 | 006566 | c2 20       |                 rep 20               
1775:001 | DONE ctl | na 16 16 |        |             |         .!a16
1776:000 | DONE cmt | na 16 16 |        |             |                 ; We're done. Restore Data Stack (2DROP)
1777:000 | DONE ins | na 16 16 | 006568 | b4 02       |                 ldy.dx 02            
1778:000 | DONE ins | na 16 16 | 00656a | e8          |                 inx                  
1779:000 | DONE ins | na 16 16 | 00656b | e8          |                 inx                  
1780:000 | DONE ins | na 16 16 | 00656c | e8          |                 inx                  
1781:000 | DONE ins | na 16 16 | 00656d | e8          |                 inx                  
1782:000 | DONE wsp | na 16 16 |        |             |
1783:000 | DONE lbl | na 16 16 | 00656e |             | z_create                             
1783:001 | DONE ins | na 16 16 | 00656e | 60          |                 rts                  
1784:000 | DONE wsp | na 16 16 |        |             |
1785:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1786:000 | DONE cmt | na 16 16 |        |             | ; DABS ( d -- ud ) X bytes / X cycles
1787:000 | DONE cmt | na 16 16 |        |             | ; Return the absolute value of a double number
1788:000 | DONE cmt | na 16 16 |        |             | ; TODO recode in assembler
1789:000 | DONE lbl | na 16 16 | 00656f |             | xt_dabs                              
1790:000 | DONE cmt | na 16 16 |        |             |                 ; double cell is TOS
1791:000 | DONE ins | na 16 16 | 00656f | 98          |                 tya                  force flag test
1792:000 | DONE ins | na 16 16 | 006570 | f0 03       |                 beq 006575           already positive, life is good
1793:000 | DONE wsp | na 16 16 |        |             |
1794:000 | DONE ins | na 16 16 | 006572 | 20 8b 65    |                 jsr 00658b           
1795:000 | DONE wsp | na 16 16 |        |             |
1796:000 | DONE lbl | na 16 16 | 006575 |             | z_dabs                               
1796:001 | DONE ins | na 16 16 | 006575 | 60          |                 rts                  
1797:000 | DONE wsp | na 16 16 |        |             |
1798:000 | DONE wsp | na 16 16 |        |             |
1799:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1800:000 | DONE cmt | na 16 16 |        |             | ; DECIMAL ( -- ) 7 bytes / X cycles
1801:000 | DONE cmt | na 16 16 |        |             | ; Change radix for number conversion to 10
1802:000 | DONE lbl | na 16 16 | 006576 |             | xt_decimal                           
1803:000 | DONE dir | na 16 16 |        |             |         .!a16                        
1804:000 | DONE ins | na 16 16 | 006576 | a9 0a 00    |                 lda.# 000a           
1805:000 | DONE ins | na 16 16 | 006579 | 85 1c       |                 sta.d 00021c         
1806:000 | DONE wsp | na 16 16 |        |             |
1807:000 | DONE lbl | na 16 16 | 00657b |             | z_decimal                            
1807:001 | DONE ins | na 16 16 | 00657b | 60          |                 rts                  
1808:000 | DONE wsp | na 16 16 |        |             |
1809:000 | DONE wsp | na 16 16 |        |             |
1810:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1811:000 | DONE cmt | na 16 16 |        |             | ; DEPTH ( -- u ) 14 bytes / X cycles
1812:000 | DONE cmt | na 16 16 |        |             | ; Push the number of entries in cells (not bytes) on the parameter stack.
1813:000 | DONE cmt | na 16 16 |        |             | ; Assumes X is valid as the DSP.
1814:000 | DONE lbl | na 16 16 | 00657c |             | xt_depth                             
1815:000 | DONE dir | na 16 16 |        |             |         .!a16                        
1816:000 | DONE cmt | na 16 16 |        |             |                 ; We've got zero entries when X is dsp0
1817:000 | DONE ins | na 16 16 | 00657c | 86 04       |                 stx.d 000204         
1818:000 | DONE ins | na 16 16 | 00657e | a9 f8 02    |                 lda.# 0002f8         
1819:000 | DONE ins | na 16 16 | 006581 | 38          |                 sec                  
1820:000 | DONE ins | na 16 16 | 006582 | e5 04       |                 sbc.d 000204         
1821:000 | DONE wsp | na 16 16 |        |             |
1822:000 | DONE cmt | na 16 16 |        |             |                 ; now divide by two because each cells is to bytes long
1823:000 | DONE ins | na 16 16 | 006584 | 4a          |                 lsr.a                
1824:000 | DONE wsp | na 16 16 |        |             |
1825:000 | DONE ins | na 16 16 | 006585 | ca          |                 dex                  
1826:000 | DONE ins | na 16 16 | 006586 | ca          |                 dex                  
1827:000 | DONE ins | na 16 16 | 006587 | 94 00       |                 sty.dx 00            
1828:000 | DONE wsp | na 16 16 |        |             |
1829:000 | DONE cmt | na 16 16 |        |             |                 ; push result to stack
1830:000 | DONE ins | na 16 16 | 006589 | a8          |                 tay                  
1831:000 | DONE wsp | na 16 16 |        |             |
1832:000 | DONE lbl | na 16 16 | 00658a |             | z_depth                              
1832:001 | DONE ins | na 16 16 | 00658a | 60          |                 rts                  
1833:000 | DONE wsp | na 16 16 |        |             |
1834:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1835:000 | DONE cmt | na 16 16 |        |             | ; DNEGATE ( d -- d ) 19 bytes / X cycles
1836:000 | DONE cmt | na 16 16 |        |             | ; Change the sign of a double number. This is the double equivalent of NEGATE
1837:000 | DONE lbl | na 16 16 | 00658b |             | xt_dnegate                           
1838:000 | DONE dir | na 16 16 |        |             |         .!a16                        
1839:000 | DONE cmt | na 16 16 |        |             |                 ; start off with LSW (in NOS)
1840:000 | DONE ins | na 16 16 | 00658b | b5 00       |                 lda.dx 00            
1841:000 | DONE ins | na 16 16 | 00658d | 49 ff ff    |                 eor.# 0ffff          
1842:000 | DONE wsp | na 16 16 |        |             |
1843:000 | DONE cmt | na 16 16 |        |             |                 ; INC doesn't affect the carry flag, so we have to do this the
1844:000 | DONE cmt | na 16 16 |        |             |                 ; hard way
1845:000 | DONE ins | na 16 16 | 006590 | 18          |                 clc                  
1846:000 | DONE ins | na 16 16 | 006591 | 69 01 00    |                 adc.# 0001           
1847:000 | DONE ins | na 16 16 | 006594 | 95 00       |                 sta.dx 00            
1848:000 | DONE wsp | na 16 16 |        |             |
1849:000 | DONE cmt | na 16 16 |        |             |                 ; now MSW (in TOS)
1850:000 | DONE ins | na 16 16 | 006596 | 98          |                 tya                  
1851:000 | DONE ins | na 16 16 | 006597 | 49 ff ff    |                 eor.# 0ffff          
1852:000 | DONE ins | na 16 16 | 00659a | 69 00 00    |                 adc.# 0000           we are only interested in the carry
1853:000 | DONE ins | na 16 16 | 00659d | a8          |                 tay                  
1854:000 | DONE wsp | na 16 16 |        |             |
1855:000 | DONE lbl | na 16 16 | 00659e |             | z_dnegate                            
1855:001 | DONE ins | na 16 16 | 00659e | 60          |                 rts                  
1856:000 | DONE wsp | na 16 16 |        |             |
1857:000 | DONE wsp | na 16 16 |        |             |
1858:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1859:000 | DONE cmt | na 16 16 |        |             | ; DOES> ( -- ) X bytes / X cycles
1860:000 | DONE cmt | na 16 16 |        |             | ; Create the payload for defining new defining words. See the file
1861:000 | DONE cmt | na 16 16 |        |             | ; docs/create-does.txt and
1862:000 | DONE cmt | na 16 16 |        |             | ; http://www.bradrodriguez.com/papers/moving3.htm for a discussion of
1863:000 | DONE cmt | na 16 16 |        |             | ; DOES>'s internal workings. This uses tmp1 and tmp2
1864:000 | DONE lbl | na 16 16 | 00659f |             | xt_does                              
1865:000 | DONE cmt | na 16 16 |        |             |                 ; compile a subroutine jump to the runtime of DOES>
1866:000 | DONE ins | na 16 16 | 00659f | f4 ac 65    |                 phe.# 0065ac         
1867:000 | DONE ins | na 16 16 | 0065a2 | 20 b8 70    |                 jsr 0070b8           
1868:000 | DONE wsp | na 16 16 |        |             |
1869:000 | DONE cmt | na 16 16 |        |             |                 ; compile a subroutine jump to DODOES. In traditional terms,
1870:000 | DONE cmt | na 16 16 |        |             |                 ; this is the Code Field Area (CFA) of the new word
1871:000 | DONE ins | na 16 16 | 0065a5 | f4 53 70    |                 phe.# 007053         
1872:000 | DONE ins | na 16 16 | 0065a8 | 20 b8 70    |                 jsr 0070b8           
1873:000 | DONE wsp | na 16 16 |        |             |
1874:000 | DONE lbl | na 16 16 | 0065ab |             | z_does                               
1874:001 | DONE ins | na 16 16 | 0065ab | 60          |                 rts                  
1875:000 | DONE wsp | na 16 16 |        |             |
1876:000 | DONE lbl | na 16 16 | 0065ac |             | does_rt                              
1877:000 | DONE cmt | na 16 16 |        |             |                 ; Runtime portion of DOES>. This replaces the subroutine jump to
1878:000 | DONE cmt | na 16 16 |        |             |                 ; DOVAR that CREATE automatically encodes by a jump to the
1879:000 | DONE cmt | na 16 16 |        |             |                 ; address that contains a subroutine jump to DODOES. We don't
1880:000 | DONE cmt | na 16 16 |        |             |                 ; jump to DODOES directly because we need to work our magic with
1881:000 | DONE cmt | na 16 16 |        |             |                 ; the return addresses
1882:000 | DONE ins | na 16 16 | 0065ac | 68          |                 pla                  
1883:000 | DONE ins | na 16 16 | 0065ad | 1a          |                 inc.a                increase by one because of RTS mechanics
1884:000 | DONE ins | na 16 16 | 0065ae | 85 16       |                 sta.d 000216         
1885:000 | DONE wsp | na 16 16 |        |             |
1886:000 | DONE cmt | na 16 16 |        |             |                 ; CREATE has also already modified the DP to point to the new
1887:000 | DONE cmt | na 16 16 |        |             |                 ; word. We have no idea which instructions followed the CREATE
1888:000 | DONE cmt | na 16 16 |        |             |                 ; command if there is a DOES> so the CP could point anywhere by
1889:000 | DONE cmt | na 16 16 |        |             |                 ; now.
1890:000 | DONE ins | na 16 16 | 0065b0 | a5 02       |                 lda.d 000202         
1891:000 | DONE wsp | na 16 16 |        |             |
1892:000 | DONE cmt | na 16 16 |        |             |                 ; The address of the word's xt is four bytes down (see
1893:000 | DONE cmt | na 16 16 |        |             |                 ; header.tasm for details).
1894:000 | DONE ins | na 16 16 | 0065b2 | 18          |                 clc                  
1895:000 | DONE ins | na 16 16 | 0065b3 | 69 04 00    |                 adc.# 0004           
1896:000 | DONE ins | na 16 16 | 0065b6 | 85 18       |                 sta.d 000218         
1897:000 | DONE wsp | na 16 16 |        |             |
1898:000 | DONE cmt | na 16 16 |        |             |                 ; Now we get that address and add one byte to skip over the JSR
1899:000 | DONE cmt | na 16 16 |        |             |                 ; opcode
1900:000 | DONE ins | na 16 16 | 0065b8 | b2 18       |                 lda.di 000218        LDA (TMP2)
1901:000 | DONE ins | na 16 16 | 0065ba | 1a          |                 inc.a                
1902:000 | DONE ins | na 16 16 | 0065bb | 85 18       |                 sta.d 000218         Points to address to be replaced
1903:000 | DONE wsp | na 16 16 |        |             |
1904:000 | DONE cmt | na 16 16 |        |             |                 ; Replace the DOVAR address
1905:000 | DONE ins | na 16 16 | 0065bd | a5 16       |                 lda.d 000216         
1906:000 | DONE ins | na 16 16 | 0065bf | 92 18       |                 sta.di 000218        STA (TMP2)
1907:000 | DONE wsp | na 16 16 |        |             |
1908:000 | DONE cmt | na 16 16 |        |             |                 ; Since we removed the return address that brought us here, we
1909:000 | DONE cmt | na 16 16 |        |             |                 ; go back to whatever the main routine was. Otherwise, we we
1910:000 | DONE cmt | na 16 16 |        |             |                 ; smash into the subroutine jump to DODOES.
1911:000 | DONE ins | na 16 16 | 0065c1 | 60          |                 rts                  
1912:000 | DONE wsp | na 16 16 |        |             |
1913:000 | DONE wsp | na 16 16 |        |             |
1914:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1915:000 | DONE cmt | na 16 16 |        |             | ; DROP ( n -- ) 4 bytes / 9 cycles
1916:000 | DONE cmt | na 16 16 |        |             | ; Drop first entry on Data Stack
1917:000 | DONE wsp | na 16 16 |        |             |
1918:000 | DONE lbl | na 16 16 | 0065c2 |             | xt_drop                              
1919:000 | DONE dir | na 16 16 |        |             |         .!xy16                       
1920:000 | DONE ins | na 16 16 | 0065c2 | b4 00       |                 ldy.dx 00            
1921:000 | DONE ins | na 16 16 | 0065c4 | e8          |                 inx                  
1922:000 | DONE ins | na 16 16 | 0065c5 | e8          |                 inx                  
1923:000 | DONE wsp | na 16 16 |        |             |
1924:000 | DONE lbl | na 16 16 | 0065c6 |             | z_drop                               
1924:001 | DONE ins | na 16 16 | 0065c6 | 60          |                 rts                  
1925:000 | DONE wsp | na 16 16 |        |             |
1926:000 | DONE wsp | na 16 16 |        |             |
1927:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1928:000 | DONE cmt | na 16 16 |        |             | ; DUMP ( addr u -- ) X bytes / X cycles
1929:000 | DONE cmt | na 16 16 |        |             | ; Print region of memory in a pretty way.
1930:000 | DONE cmt | na 16 16 |        |             | ; TODO This is a crude, temporary version for testing. Rewrite ASAP
1931:000 | DONE lbl | na 16 16 | 0065c7 |             | xt_dump                              
1932:000 | DONE cmt | na 16 16 |        |             |                 ; we use tmp1 as a counter because we need Y for other
1933:000 | DONE cmt | na 16 16 |        |             |                 ; stuff
1934:000 | DONE ins | na 16 16 | 0065c7 | 84 16       |                 sty.d 000216         
1935:000 | DONE wsp | na 16 16 |        |             |
1936:000 | DONE lbl | na 16 16 | 0065c9 |             | dump_line_loop                       
1937:000 | DONE ins | na 16 16 | 0065c9 | 20 f5 64    |                 jsr 0064f5           
1938:000 | DONE wsp | na 16 16 |        |             |
1939:000 | DONE cmt | na 16 16 |        |             |                 ; start internal counter for 16 numbers per row
1940:000 | DONE ins | na 16 16 | 0065cc | a0 10 00    |                 ldy.# 0010           
1941:000 | DONE lbl | na 16 16 | 0065cf |             | dump_byte_loop                       
1942:000 | DONE cmt | na 16 16 |        |             |                 ; if there are zero bytes left to display, we're done
1943:000 | DONE ins | na 16 16 | 0065cf | a5 16       |                 lda.d 000216         
1944:000 | DONE ins | na 16 16 | 0065d1 | f0 11       |                 beq 0065e4           
1945:000 | DONE wsp | na 16 16 |        |             |
1946:000 | DONE cmt | na 16 16 |        |             |                 ; otherwise, print contents pointed to by address in NOS
1947:000 | DONE ins | na 16 16 | 0065d3 | a1 00       |                 lda.dxi 00           
1948:000 | DONE ins | na 16 16 | 0065d5 | 20 f7 70    |                 jsr 0070f7           TODO replace by EMIT
1949:000 | DONE ins | na 16 16 | 0065d8 | 20 fd 68    |                 jsr 0068fd           
1950:000 | DONE wsp | na 16 16 |        |             |
1951:000 | DONE cmt | na 16 16 |        |             |                 ; next character
1952:000 | DONE ins | na 16 16 | 0065db | f6 00       |                 inc.dx 00            
1953:000 | DONE wsp | na 16 16 |        |             |
1954:000 | DONE cmt | na 16 16 |        |             |                 ; loop counter
1955:000 | DONE ins | na 16 16 | 0065dd | c6 16       |                 dec.d 000216         
1956:000 | DONE ins | na 16 16 | 0065df | 88          |                 dey                  
1957:000 | DONE ins | na 16 16 | 0065e0 | d0 ed       |                 bne 0065cf           
1958:000 | DONE ins | na 16 16 | 0065e2 | 80 e5       |                 bra 0065c9           
1959:000 | DONE wsp | na 16 16 |        |             |
1960:000 | DONE lbl | na 16 16 | 0065e4 |             | dump_done                            
1961:000 | DONE ins | na 16 16 | 0065e4 | 20 f5 64    |                 jsr 0064f5           
1962:000 | DONE wsp | na 16 16 |        |             |
1963:000 | DONE cmt | na 16 16 |        |             |                 ; drop everything and return
1964:000 | DONE cmt | na 16 16 |        |             |                 ; TODO replace by call of 2DROP
1965:000 | DONE ins | na 16 16 | 0065e7 | b4 02       |                 ldy.dx 02            
1966:000 | DONE ins | na 16 16 | 0065e9 | e8          |                 inx                  
1967:000 | DONE ins | na 16 16 | 0065ea | e8          |                 inx                  
1968:000 | DONE ins | na 16 16 | 0065eb | e8          |                 inx                  
1969:000 | DONE ins | na 16 16 | 0065ec | e8          |                 inx                  
1970:000 | DONE wsp | na 16 16 |        |             |
1971:000 | DONE lbl | na 16 16 | 0065ed |             | z_dump                               
1971:001 | DONE ins | na 16 16 | 0065ed | 60          |                 rts                  
1972:000 | DONE wsp | na 16 16 |        |             |
1973:000 | DONE wsp | na 16 16 |        |             |
1974:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1975:000 | DONE cmt | na 16 16 |        |             | ; DUP  ( n -- n n ) 4 bytes / 9 cycles
1976:000 | DONE cmt | na 16 16 |        |             | ; Duplicate first entry on Data Stack
1977:000 | DONE wsp | na 16 16 |        |             |
1978:000 | DONE lbl | na 16 16 | 0065ee |             | xt_dup                               
1979:000 | DONE dir | na 16 16 |        |             |         .!xy16                       
1980:000 | DONE ins | na 16 16 | 0065ee | ca          |                 dex                  
1981:000 | DONE ins | na 16 16 | 0065ef | ca          |                 dex                  
1982:000 | DONE ins | na 16 16 | 0065f0 | 94 00       |                 sty.dx 00            
1983:000 | DONE wsp | na 16 16 |        |             |
1984:000 | DONE lbl | na 16 16 | 0065f2 |             | z_dup                                
1984:001 | DONE ins | na 16 16 | 0065f2 | 60          |                 rts                  
1985:000 | DONE wsp | na 16 16 |        |             |
1986:000 | DONE wsp | na 16 16 |        |             |
1987:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1988:000 | DONE cmt | na 16 16 |        |             | ; EVALUATE ( addr u -- ) X bytes / X cycles
1989:000 | DONE cmt | na 16 16 |        |             | ; Execute string. Set SOURCE-ID to -1, make addr u the input source,
1990:000 | DONE cmt | na 16 16 |        |             | ; set >IN to zero. After processing the line, revert to old input source.
1991:000 | DONE lbl | na 16 16 | 0065f3 |             | xt_evaluate                          
1992:000 | DONE cmt | na 16 16 |        |             |                 ; We follow pforth's procedure of pushing SOURCE, SOURCE-ID, and
1993:000 | DONE cmt | na 16 16 |        |             |                 ; >IN to the Return Stack
1994:000 | DONE ins | na 16 16 | 0065f3 | a5 12       |                 lda.d 000212         >IN
1995:000 | DONE ins | na 16 16 | 0065f5 | 48          |                 pha                  
1996:000 | DONE ins | na 16 16 | 0065f6 | a5 0a       |                 lda.d 00020a         Input Source (SOURCE-ID)
1997:000 | DONE ins | na 16 16 | 0065f8 | 48          |                 pha                  
1998:000 | DONE ins | na 16 16 | 0065f9 | a5 0c       |                 lda.d 00020c         
1999:000 | DONE ins | na 16 16 | 0065fb | 48          |                 pha                  
2000:000 | DONE ins | na 16 16 | 0065fc | a5 0e       |                 lda.d 00020e         
2001:000 | DONE ins | na 16 16 | 0065fe | 48          |                 pha                  
2002:000 | DONE wsp | na 16 16 |        |             |
2003:000 | DONE cmt | na 16 16 |        |             |                 ; set SOURCE-ID to -1
2004:000 | DONE ins | na 16 16 | 0065ff | a9 ff ff    |                 lda.# 0ffff          
2005:000 | DONE ins | na 16 16 | 006602 | 85 0a       |                 sta.d 00020a         
2006:000 | DONE wsp | na 16 16 |        |             |
2007:000 | DONE cmt | na 16 16 |        |             |                 ; set >IN to zero
2008:000 | DONE ins | na 16 16 | 006604 | 64 12       |                 stz.d 000212         
2009:000 | DONE wsp | na 16 16 |        |             |
2010:000 | DONE cmt | na 16 16 |        |             |                 ; move TOS and NOS to input buffers
2011:000 | DONE ins | na 16 16 | 006606 | 84 0e       |                 sty.d 00020e         
2012:000 | DONE ins | na 16 16 | 006608 | b5 00       |                 lda.dx 00            
2013:000 | DONE ins | na 16 16 | 00660a | 85 0c       |                 sta.d 00020c         
2014:000 | DONE wsp | na 16 16 |        |             |
2015:000 | DONE cmt | na 16 16 |        |             |                 ; dump address string from stack
2016:000 | DONE ins | na 16 16 | 00660c | b4 02       |                 ldy.dx 02            
2017:000 | DONE ins | na 16 16 | 00660e | e8          |                 inx                  
2018:000 | DONE ins | na 16 16 | 00660f | e8          |                 inx                  
2019:000 | DONE ins | na 16 16 | 006610 | e8          |                 inx                  
2020:000 | DONE ins | na 16 16 | 006611 | e8          |                 inx                  
2021:000 | DONE wsp | na 16 16 |        |             |
2022:000 | DONE ins | na 16 16 | 006612 | 20 67 70    |                 jsr 007067           
2023:000 | DONE wsp | na 16 16 |        |             |
2024:000 | DONE cmt | na 16 16 |        |             |                 ; restore state from before evaluate
2025:000 | DONE ins | na 16 16 | 006615 | 68          |                 pla                  
2026:000 | DONE ins | na 16 16 | 006616 | 85 0e       |                 sta.d 00020e         
2027:000 | DONE ins | na 16 16 | 006618 | 68          |                 pla                  
2028:000 | DONE ins | na 16 16 | 006619 | 85 0c       |                 sta.d 00020c         
2029:000 | DONE ins | na 16 16 | 00661b | 68          |                 pla                  
2030:000 | DONE ins | na 16 16 | 00661c | 85 0a       |                 sta.d 00020a         
2031:000 | DONE ins | na 16 16 | 00661e | 68          |                 pla                  
2032:000 | DONE ins | na 16 16 | 00661f | 85 12       |                 sta.d 000212         
2033:000 | DONE wsp | na 16 16 |        |             |
2034:000 | DONE lbl | na 16 16 | 006621 |             | z_evaluate                           
2034:001 | DONE ins | na 16 16 | 006621 | 60          |                 rts                  
2035:000 | DONE wsp | na 16 16 |        |             |
2036:000 | DONE wsp | na 16 16 |        |             |
2037:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
2038:000 | DONE cmt | na 16 16 |        |             | ; EXECUTE ( xt -- ) X bytes / X cycles
2039:000 | DONE cmt | na 16 16 |        |             | ; Run a word with help of its xt on the TOS
2040:000 | DONE wsp | na 16 16 |        |             |
2041:000 | DONE cmt | na 16 16 |        |             | ; Reserve three bytes for the jump - three in case we want to expand to the full
2042:000 | DONE cmt | na 16 16 |        |             | ; range
2043:000 | DONE cmt | na 16 16 |        |             | ; TODO move this to someplace that is assured to be RAM, not possibly ROM
2044:000 | DONE lbl | na 16 16 | 006622 |             | execute_ip                           
2044:001 | DONE dir | na 16 16 | 006622 | (3 bytes)   |         .byte 00, 00, 00             
2044:001 | DONE dir | na 16 16 |        |             |                 00 00 00                 --  . . .
2045:000 | DONE wsp | na 16 16 |        |             |
2046:000 | DONE lbl | na 16 16 | 006625 |             | xt_execute                           
2047:000 | DONE dir | na 16 16 |        |             |         .!a16                        
2048:000 | DONE dir | na 16 16 |        |             |         .!xy16                       
2049:000 | DONE cmt | na 16 16 |        |             |                 ; Store the xt for later use and then drop it off the stack
2050:000 | DONE ins | na 16 16 | 006625 | 8c 22 66    |                 sty 006622           
2051:000 | DONE ins | na 16 16 | 006628 | b4 00       |                 ldy.dx 00            
2052:000 | DONE ins | na 16 16 | 00662a | e8          |                 inx                  
2053:000 | DONE ins | na 16 16 | 00662b | e8          |                 inx                  
2054:000 | DONE wsp | na 16 16 |        |             |
2055:000 | DONE cmt | na 16 16 |        |             |                 ; Only JMP has the addressing mode we need. All our Forth
2056:000 | DONE cmt | na 16 16 |        |             |                 ; words end with a RTS instruction, so they will take us back to
2057:000 | DONE cmt | na 16 16 |        |             |                 ; the original caller of this routine without us having to muck
2058:000 | DONE cmt | na 16 16 |        |             |                 ; about with the Return Stack.
2059:000 | DONE ins | na 16 16 | 00662c | 6c 22 66    |                 jmp.i 006622         JMP (EXECUTE_IP)
2060:000 | DONE wsp | na 16 16 |        |             |
2061:000 | DONE lbl | na 16 16 | 00662f |             | z_execute                            
2061:001 | DONE ins | na 16 16 | 00662f | ea          |                 nop                  Never reached, see if we need the NOP
2062:000 | DONE wsp | na 16 16 |        |             |
2063:000 | DONE wsp | na 16 16 |        |             |
2064:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
2065:000 | DONE cmt | na 16 16 |        |             | ; FALSE ( -- f ) 7 bytes / 12 cycles
2066:000 | DONE cmt | na 16 16 |        |             | ; Pushes value $0000 for Forth true on Data Stack. This is the same code as for
2067:000 | DONE cmt | na 16 16 |        |             | ; ZERO, see there. Dictionary entry should have xt_zero/z_zero instead of
2068:000 | DONE cmt | na 16 16 |        |             | ; xt_false/z_false
2069:000 | DONE wsp | na 16 16 |        |             |
2070:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
2071:000 | DONE cmt | na 16 16 |        |             | ; FIND-NAME ( addr u -- nt | 0 ) 91 bytes / X cycles
2072:000 | DONE cmt | na 16 16 |        |             | ; Given a string, find the Name Token (nt) of a word or return zero if the word
2073:000 | DONE cmt | na 16 16 |        |             | ; is not in the dictionary. We use this instead of ancient FIND to look up words
2074:000 | DONE cmt | na 16 16 |        |             | ; in the Dictionary passed by PARSE-NAME. Note this returns the nt, not the xt
2075:000 | DONE cmt | na 16 16 |        |             | ; of a word like FIND. To convert, use NAME>INT. This is a Gforth word. See
2076:000 | DONE cmt | na 16 16 |        |             | ; https://www.complang.tuwien.ac.at/forth/gforth/Docs-html/Name-token.html
2077:000 | DONE cmt | na 16 16 |        |             | ; FIND calls this word for the hard word
2078:000 | DONE lbl | na 16 16 | 006630 |             | xt_find-name                         
2079:000 | DONE cmt | na 16 16 |        |             |                 ; We abort when we get an empty string, that is, one with
2080:000 | DONE cmt | na 16 16 |        |             |                 ; a length of zero TOS. We could test for this, but it will
2081:000 | DONE cmt | na 16 16 |        |             |                 ; happen so rarely that the speed penalty is higher if we run
2082:000 | DONE cmt | na 16 16 |        |             |                 ; the test for every single call. Looking for an empty string
2083:000 | DONE cmt | na 16 16 |        |             |                 ; does force us to check the whole dictionary, though. The test
2084:000 | DONE cmt | na 16 16 |        |             |                 ; would be 3 bytes and 4 to 6 cycles longer:
2085:000 | DONE cmt | na 16 16 |        |             |                 ;       tya                     ; force flag check
2086:000 | DONE cmt | na 16 16 |        |             |                 ;       beq find-name_failure
2087:000 | DONE dir | na 16 16 |        |             |         .!a16                        
2088:000 | DONE dir | na 16 16 |        |             |         .!xy16                       
2089:000 | DONE cmt | na 16 16 |        |             |                 ; set up loop for the first time
2090:000 | DONE ins | na 16 16 | 006630 | 84 06       |                 sty.d 000206         length of mystery string in tmptos, Y now free
2091:000 | DONE wsp | na 16 16 |        |             |
2092:000 | DONE ins | na 16 16 | 006632 | a4 02       |                 ldy.d 000202         
2093:000 | DONE ins | na 16 16 | 006634 | 84 16       |                 sty.d 000216         nt of first Dictionary word
2094:000 | DONE wsp | na 16 16 |        |             |
2095:000 | DONE ins | na 16 16 | 006636 | b4 00       |                 ldy.dx 00            
2096:000 | DONE ins | na 16 16 | 006638 | 84 18       |                 sty.d 000218         address of mystery string, was NOS
2097:000 | DONE wsp | na 16 16 |        |             |
2098:000 | DONE lbl | na 16 16 | 00663a |             | find-name_loop                       
2099:000 | DONE cmt | na 16 16 |        |             |                 ; First quick test: Are strings the same length?
2100:000 | DONE ins | na 16 16 | 00663a | b2 16       |                 lda.di 000216        LSB in first header word is length
2101:000 | DONE ins | na 16 16 | 00663c | 29 ff 00    |                 and.# 00ff           
2102:000 | DONE ins | na 16 16 | 00663f | c5 06       |                 cmp.d 000206         we test LSB
2103:000 | DONE cmt | na 16 16 |        |             |                 ; Most of the time, it will not be the same, so we save one
2104:000 | DONE cmt | na 16 16 |        |             |                 ; cycle pro loop if we only take the branch when they are the
2105:000 | DONE cmt | na 16 16 |        |             |                 ; same
2106:000 | DONE ins | na 16 16 | 006641 | f0 0c       |                 beq 00664f           
2107:000 | DONE wsp | na 16 16 |        |             |
2108:000 | DONE lbl | na 16 16 | 006643 |             | find-name_next_entry                 
2109:000 | DONE cmt | na 16 16 |        |             |                 ; next header address is two bytes down
2110:000 | DONE ins | na 16 16 | 006643 | e6 16       |                 inc.d 000216         
2111:000 | DONE ins | na 16 16 | 006645 | e6 16       |                 inc.d 000216         
2112:000 | DONE ins | na 16 16 | 006647 | b2 16       |                 lda.di 000216        LDA (TMP1)
2113:000 | DONE wsp | na 16 16 |        |             |
2114:000 | DONE cmt | na 16 16 |        |             |                 ; a zero entry marks the end of the Dictionary
2115:000 | DONE ins | na 16 16 | 006649 | f0 36       |                 beq 006681           
2116:000 | DONE wsp | na 16 16 |        |             |
2117:000 | DONE ins | na 16 16 | 00664b | 85 16       |                 sta.d 000216         new header
2118:000 | DONE ins | na 16 16 | 00664d | 80 eb       |                 bra 00663a           
2119:000 | DONE wsp | na 16 16 |        |             |
2120:000 | DONE lbl | na 16 16 | 00664f |             | find-name_chars                      
2121:000 | DONE cmt | na 16 16 |        |             |                 ; Yes, same length, so we compare characters
2122:000 | DONE wsp | na 16 16 |        |             |
2123:000 | DONE cmt | na 16 16 |        |             |                 ; Switch A to 8 bit for this
2124:000 | DONE ins | na 16 16 | 00664f | e2 20       |                 sep 20               
2124:001 | DONE ctl | na  8 16 |        |             |         .!a8
2125:000 | DONE cmt | na  8 16 |        |             |                 ; Second quick test: Check first char, which is 8 bytes into the
2126:000 | DONE cmt | na  8 16 |        |             |                 ; header
2127:000 | DONE ins | na  8 16 | 006651 | a0 08 00    |                 ldy.# 0008           
2128:000 | DONE ins | na  8 16 | 006654 | b1 16       |                 lda.diy 000216       LDA (TMP1),Y - first char of entry
2129:000 | DONE ins | na  8 16 | 006656 | d2 18       |                 cmp.di 000218        CMP (TMP2) - first char of mystery string
2130:000 | DONE ins | na  8 16 | 006658 | f0 04       |                 beq 00665e           
2131:000 | DONE wsp | na  8 16 |        |             |
2132:000 | DONE lbl | na  8 16 | 00665a |             | find-name_char_nomatcnt_8            
2133:000 | DONE cmt | na  8 16 |        |             |                 ; First char is not the same, next entry
2134:000 | DONE ins | na  8 16 | 00665a | c2 20       |                 rep 20               
2134:001 | DONE ctl | na 16 16 |        |             |         .!a16
2135:000 | DONE ins | na 16 16 | 00665c | 80 e5       |                 bra 006643           
2136:000 | DONE wsp | na 16 16 |        |             |
2137:000 | DONE lbl | na 16 16 | 00665e |             | find-name_all_chars                  
2138:000 | DONE dir | na  8 16 |        |             |         .!a8                         
2139:000 | DONE cmt | na  8 16 |        |             |                 ; String length is the same, and the first character is the
2140:000 | DONE cmt | na  8 16 |        |             |                 ; same. If the word is only one character long, we're done
2141:000 | DONE ins | na  8 16 | 00665e | a4 06       |                 ldy.d 000206         
2142:000 | DONE ins | na  8 16 | 006660 | 88          |                 dey                  faster and shorter than CPY.# 01
2143:000 | DONE ins | na  8 16 | 006661 | f0 18       |                 beq 00667b           
2144:000 | DONE wsp | na  8 16 |        |             |
2145:000 | DONE cmt | na  8 16 |        |             |                 ; No such luck: The strings are the same length and the first
2146:000 | DONE cmt | na  8 16 |        |             |                 ; char is the same, but the word is more than one char long. So
2147:000 | DONE cmt | na  8 16 |        |             |                 ; we suck it up and compare every single character. We go from
2148:000 | DONE cmt | na  8 16 |        |             |                 ; back to front, because words like CELLS and CELL+ would take
2149:000 | DONE cmt | na  8 16 |        |             |                 ; longer otherwise. We can also shorten the loop by one because
2150:000 | DONE cmt | na  8 16 |        |             |                 ; we've already compared the first char.
2151:000 | DONE wsp | na  8 16 |        |             |
2152:000 | DONE cmt | na  8 16 |        |             |                 ; Even worse, we have to add 8 bytes to address of Dictionary
2153:000 | DONE cmt | na  8 16 |        |             |                 ; string to allow testing with one loop. We need this like
2154:000 | DONE cmt | na  8 16 |        |             |                 ; a hole in the head because we just switched A to 8 bit.
2155:000 | DONE cmt | na  8 16 |        |             |                 ; However, staying with an 8-bit A is even slower.
2156:000 | DONE ins | na  8 16 | 006663 | c2 20       |                 rep 20               
2156:001 | DONE ctl | na 16 16 |        |             |         .!a16
2157:000 | DONE ins | na 16 16 | 006665 | a5 16       |                 lda.d 000216         address of Dictionary string
2158:000 | DONE ins | na 16 16 | 006667 | 18          |                 clc                  
2159:000 | DONE ins | na 16 16 | 006668 | 69 08 00    |                 adc.# 0008           
2160:000 | DONE ins | na 16 16 | 00666b | 85 1a       |                 sta.d 00021a         
2161:000 | DONE ins | na 16 16 | 00666d | e2 20       |                 sep 20               
2161:001 | DONE ctl | na  8 16 |        |             |         .!a8
2162:000 | DONE ins | na  8 16 | 00666f | a4 06       |                 ldy.d 000206         get length of strings as loop index
2163:000 | DONE ins | na  8 16 | 006671 | 88          |                 dey                  first index is length minus 1
2164:000 | DONE wsp | na  8 16 |        |             |
2165:000 | DONE lbl | na  8 16 | 006672 |             | @                                    
2166:000 | DONE ins | na  8 16 | 006672 | b1 18       |                 lda.diy 000218       LDA (TMP2),Y - last char of mystery string
2167:000 | DONE ins | na  8 16 | 006674 | d1 1a       |                 cmp.diy 00021a       CMP (TMP1),Y - last char of DP string
2168:000 | DONE ins | na  8 16 | 006676 | d0 e2       |                 bne 00665a           
2169:000 | DONE ins | na  8 16 | 006678 | 88          |                 dey                  start of string (Y=0) was already tested
2170:000 | DONE ins | na  8 16 | 006679 | d0 f7       |                 bne 006672           
2171:000 | DONE wsp | na  8 16 |        |             |
2172:000 | DONE lbl | na  8 16 | 00667b |             | find-name_success                    
2173:000 | DONE cmt | na  8 16 |        |             |                 ; If we reach here, the strings are the same and we have a match
2174:000 | DONE cmt | na  8 16 |        |             |                 ; We get here with an 8 bit A
2175:000 | DONE ins | na  8 16 | 00667b | c2 20       |                 rep 20               
2175:001 | DONE ctl | na 16 16 |        |             |         .!a16
2176:000 | DONE ins | na 16 16 | 00667d | a4 16       |                 ldy.d 000216         get the correct DP
2177:000 | DONE ins | na 16 16 | 00667f | 80 03       |                 bra 006684           
2178:000 | DONE wsp | na 16 16 |        |             |
2179:000 | DONE wsp | na 16 16 |        |             |
2180:000 | DONE lbl | na 16 16 | 006681 |             | find-name_failure_16                 
2181:000 | DONE cmt | na 16 16 |        |             |                 ; Word not found in Dictionary, return zero. Assumes A is 16
2182:000 | DONE cmt | na 16 16 |        |             |                 ; bit
2183:000 | DONE ins | na 16 16 | 006681 | a0 00 00    |                 ldy.# 0000           fall thru
2184:000 | DONE wsp | na 16 16 |        |             |
2185:000 | DONE lbl | na 16 16 | 006684 |             | find-name_done                       
2186:000 | DONE ins | na 16 16 | 006684 | e8          |                 inx                  drop old address (NIP)
2187:000 | DONE ins | na 16 16 | 006685 | e8          |                 inx                  
2188:000 | DONE wsp | na 16 16 |        |             |
2189:000 | DONE lbl | na 16 16 | 006686 |             | z_find-name                          
2189:001 | DONE ins | na 16 16 | 006686 | 60          |                 rts                  
2190:000 | DONE wsp | na 16 16 |        |             |
2191:000 | DONE wsp | na 16 16 |        |             |
2192:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
2193:000 | DONE cmt | na 16 16 |        |             | ; IMMEDIATE ( -- ) X bytes / X cycles
2194:000 | DONE cmt | na 16 16 |        |             | ; Mark the most recently defined word as IMMEDIATE. Will only affect the last
2195:000 | DONE cmt | na 16 16 |        |             | ; word in the Dictionary. If the words is still in ROM for some reason, this
2196:000 | DONE cmt | na 16 16 |        |             | ; will have no effect and will fail without an error message
2197:000 | DONE lbl | na 16 16 | 006687 |             | xt_immediate                         
2198:000 | DONE dir | na 16 16 |        |             |         .!a16                        
2199:000 | DONE ins | na 16 16 | 006687 | a9 02 00    |                 lda.# IM             Immediate flag
2200:000 | DONE ins | na 16 16 | 00668a | eb          |                 xba                  flags are MSB
2201:000 | DONE ins | na 16 16 | 00668b | 12 02       |                 ora.di 000202        ORA (DP)
2202:000 | DONE ins | na 16 16 | 00668d | 92 02       |                 sta.di 000202        
2203:000 | DONE wsp | na 16 16 |        |             |
2204:000 | DONE lbl | na 16 16 | 00668f |             | z_immediate                          
2204:001 | DONE ins | na 16 16 | 00668f | 60          |                 rts                  
2205:000 | DONE wsp | na 16 16 |        |             |
2206:000 | DONE wsp | na 16 16 |        |             |
2207:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
2208:000 | DONE cmt | na 16 16 |        |             | ; INVERT ( n -- n ) 5 bytes / X cycles
2209:000 | DONE cmt | na 16 16 |        |             | ; Complement of TOS
2210:000 | DONE lbl | na 16 16 | 006690 |             | xt_invert                            
2211:000 | DONE dir | na 16 16 |        |             |         .!a16                        
2212:000 | DONE ins | na 16 16 | 006690 | 98          |                 tya                  
2213:000 | DONE ins | na 16 16 | 006691 | 49 ff ff    |                 eor.# 0ffff          
2214:000 | DONE ins | na 16 16 | 006694 | a8          |                 tay                  
2215:000 | DONE wsp | na 16 16 |        |             |
2216:000 | DONE lbl | na 16 16 | 006695 |             | z_invert                             
2216:001 | DONE ins | na 16 16 | 006695 | 60          |                 rts                  
2217:000 | DONE wsp | na 16 16 |        |             |
2218:000 | DONE wsp | na 16 16 |        |             |
2219:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
2220:000 | DONE cmt | na 16 16 |        |             | ; HERE ( -- u ) 6 bytes / 13 cycles
2221:000 | DONE cmt | na 16 16 |        |             | ; Push Compiler Pointer address on the Data Stack
2222:000 | DONE lbl | na 16 16 | 006696 |             | xt_here                              
2223:000 | DONE dir | na 16 16 |        |             |         .!xy16                       
2224:000 | DONE ins | na 16 16 | 006696 | ca          |                 dex                  
2225:000 | DONE ins | na 16 16 | 006697 | ca          |                 dex                  
2226:000 | DONE ins | na 16 16 | 006698 | 94 00       |                 sty.dx 00            
2227:000 | DONE wsp | na 16 16 |        |             |
2228:000 | DONE ins | na 16 16 | 00669a | a4 00       |                 ldy.d 000200         
2229:000 | DONE wsp | na 16 16 |        |             |
2230:000 | DONE lbl | na 16 16 | 00669c |             | z_here                               
2230:001 | DONE ins | na 16 16 | 00669c | 60          |                 rts                  
2231:000 | DONE wsp | na 16 16 |        |             |
2232:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
2233:000 | DONE cmt | na 16 16 |        |             | ; HEX ( -- ) X bytes / X cycles
2234:000 | DONE cmt | na 16 16 |        |             | ; Change radix for number conversion to 16
2235:000 | DONE lbl | na 16 16 | 00669d |             | xt_hex                               
2236:000 | DONE dir | na 16 16 |        |             |         .!a16                        
2237:000 | DONE ins | na 16 16 | 00669d | a9 10 00    |                 lda.# 0010           
2238:000 | DONE ins | na 16 16 | 0066a0 | 85 1c       |                 sta.d 00021c         
2239:000 | DONE wsp | na 16 16 |        |             |
2240:000 | DONE lbl | na 16 16 | 0066a2 |             | z_hex                                
2240:001 | DONE ins | na 16 16 | 0066a2 | 60          |                 rts                  
2241:000 | DONE wsp | na 16 16 |        |             |
2242:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
2243:000 | DONE cmt | na 16 16 |        |             | ; HOLD ( char -- ) X bytes / X cycles
2244:000 | DONE cmt | na 16 16 |        |             | ; Insert a character at the current position of a pictured numeric output string
2245:000 | DONE cmt | na 16 16 |        |             | ; Code based on https://github.com/philburk/pforth/blob/master/fth/numberio.fth
2246:000 | DONE cmt | na 16 16 |        |             | ; Forth code is : HOLD  -1 HLD +!  HLD @ C! ;  We use the the internal variable
2247:000 | DONE cmt | na 16 16 |        |             | ; tohold instead of HLD.
2248:000 | DONE lbl | na 16 16 | 0066a3 |             | xt_hold                              
2249:000 | DONE dir | na 16 16 |        |             |         .!a16                        
2250:000 | DONE ins | na 16 16 | 0066a3 | c6 28       |                 dec.d 000228         -1 HLD +!
2251:000 | DONE wsp | na 16 16 |        |             |
2252:000 | DONE ins | na 16 16 | 0066a5 | 98          |                 tya                  
2253:000 | DONE ins | na 16 16 | 0066a6 | e2 20       |                 sep 20               
2253:001 | DONE ctl | na  8 16 |        |             |         .!a8
2254:000 | DONE ins | na  8 16 | 0066a8 | 92 28       |                 sta.di 000228        STA (TOHOLD)
2255:000 | DONE ins | na  8 16 | 0066aa | c2 20       |                 rep 20               
2255:001 | DONE ctl | na 16 16 |        |             |         .!a16
2256:000 | DONE ins | na 16 16 | 0066ac | b4 00       |                 ldy.dx 00            
2257:000 | DONE ins | na 16 16 | 0066ae | e8          |                 inx                  
2258:000 | DONE ins | na 16 16 | 0066af | e8          |                 inx                  
2259:000 | DONE wsp | na 16 16 |        |             |
2260:000 | DONE lbl | na 16 16 | 0066b0 |             | z_hold                               
2260:001 | DONE ins | na 16 16 | 0066b0 | 60          |                 rts                  
2261:000 | DONE wsp | na 16 16 |        |             |
2262:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
2263:000 | DONE cmt | na 16 16 |        |             | ; LITERAL ( n -- ) X bytes / X cycles
2264:000 | DONE cmt | na 16 16 |        |             | ; Compile-only word to store TOS so that it is pushed on stack during runtime.
2265:000 | DONE cmt | na 16 16 |        |             | ; This is a immediate, compile-only word. Test it with  : AAA [ 1 ] LITERAL ;
2266:000 | DONE cmt | na 16 16 |        |             | ; for instance
2267:000 | DONE lbl | na 16 16 | 0066b1 |             | xt_literal                           
2268:000 | DONE cmt | na 16 16 |        |             |                 ; During runtime, we call the routine at the bottom by compiling
2269:000 | DONE cmt | na 16 16 |        |             |                 ; JSR LITERAL_RT. Note the cmpl_ routines use tmptos
2270:000 | DONE ins | na 16 16 | 0066b1 | f4 c3 66    |                 phe.# 0066c3         PEA LITERAL_RT
2271:000 | DONE ins | na 16 16 | 0066b4 | 20 b8 70    |                 jsr 0070b8           
2272:000 | DONE wsp | na 16 16 |        |             |
2273:000 | DONE cmt | na 16 16 |        |             |                 ; compile the value that is to be pushed to the Data Stack at
2274:000 | DONE cmt | na 16 16 |        |             |                 ; runtime. There is no "sty.di", so we have to do this the hard
2275:000 | DONE cmt | na 16 16 |        |             |                 ; way. This is basically , ("comma")
2276:000 | DONE ins | na 16 16 | 0066b7 | 98          |                 tya                  
2277:000 | DONE ins | na 16 16 | 0066b8 | 92 00       |                 sta.di 000200        
2278:000 | DONE ins | na 16 16 | 0066ba | e6 00       |                 inc.d 000200         
2279:000 | DONE ins | na 16 16 | 0066bc | e6 00       |                 inc.d 000200         
2280:000 | DONE wsp | na 16 16 |        |             |
2281:000 | DONE ins | na 16 16 | 0066be | b4 00       |                 ldy.dx 00            DROP
2282:000 | DONE ins | na 16 16 | 0066c0 | e8          |                 inx                  
2283:000 | DONE ins | na 16 16 | 0066c1 | e8          |                 inx                  
2284:000 | DONE wsp | na 16 16 |        |             |
2285:000 | DONE lbl | na 16 16 | 0066c2 |             | z_literal                            
2285:001 | DONE ins | na 16 16 | 0066c2 | 60          |                 rts                  
2286:000 | DONE wsp | na 16 16 |        |             |
2287:000 | DONE lbl | na 16 16 | 0066c3 |             | literal_rt                           
2288:000 | DONE cmt | na 16 16 |        |             |                 ; During runtime, we push the value following this word
2289:000 | DONE cmt | na 16 16 |        |             |                 ; back on the Data Stack. The subroutine jump that brought us
2290:000 | DONE cmt | na 16 16 |        |             |                 ; here put the address to return to on the Return Stack - this
2291:000 | DONE cmt | na 16 16 |        |             |                 ; points to the data we need to get
2292:000 | DONE wsp | na 16 16 |        |             |
2293:000 | DONE cmt | na 16 16 |        |             |                 ; Make room on Data Stack, Y now free to use
2294:000 | DONE ins | na 16 16 | 0066c3 | ca          |                 dex                  
2295:000 | DONE ins | na 16 16 | 0066c4 | ca          |                 dex                  
2296:000 | DONE ins | na 16 16 | 0066c5 | 94 00       |                 sty.dx 00            
2297:000 | DONE wsp | na 16 16 |        |             |
2298:000 | DONE cmt | na 16 16 |        |             |                 ; The 65816 stores (<RETURN-ADDRESS> - 1) on the Return Stack
2299:000 | DONE cmt | na 16 16 |        |             |                 ; so we have to manipulate the address
2300:000 | DONE ins | na 16 16 | 0066c7 | 7a          |                 ply                  
2301:000 | DONE ins | na 16 16 | 0066c8 | c8          |                 iny                  
2302:000 | DONE ins | na 16 16 | 0066c9 | b9 00 00    |                 lda.y 0000           LDA $0000,Y - get value after jump
2303:000 | DONE wsp | na 16 16 |        |             |
2304:000 | DONE ins | na 16 16 | 0066cc | c8          |                 iny                  move return address past data and restore
2305:000 | DONE ins | na 16 16 | 0066cd | 5a          |                 phy                  so we can get back home
2306:000 | DONE wsp | na 16 16 |        |             |
2307:000 | DONE ins | na 16 16 | 0066ce | a8          |                 tay                  Value is now on the Data Stack ( -- n )
2308:000 | DONE wsp | na 16 16 |        |             |
2309:000 | DONE ins | na 16 16 | 0066cf | 60          |                 rts                  
2310:000 | DONE wsp | na 16 16 |        |             |
2311:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
2312:000 | DONE cmt | na 16 16 |        |             | ; M* "MSTAR" ( n n -- d ) 16*16 -> 32  X bytes / X cycles
2313:000 | DONE cmt | na 16 16 |        |             | ; Multiply two 16 bit numbers, producing a 32 bit result. All values are signed.
2314:000 | DONE cmt | na 16 16 |        |             | ; This was originally adapted from FIG Forth for Tali Forth. The original Forth
2315:000 | DONE cmt | na 16 16 |        |             | ; code is : M* OVER OVER XOR >R ABS SWAP ABS UM* R> D+- ;  with
2316:000 | DONE cmt | na 16 16 |        |             | ; : D+- O< IF DNEGATE THEN ;
2317:000 | DONE cmt | na 16 16 |        |             | ; TODO Test this more once we have the Double words etc all working
2318:000 | DONE lbl | na 16 16 | 0066d0 |             | xt_mstar                             
2319:000 | DONE dir | na 16 16 |        |             |         .!a16                        
2320:000 | DONE cmt | na 16 16 |        |             |                 ; figure out the sign
2321:000 | DONE ins | na 16 16 | 0066d0 | 98          |                 tya                  
2322:000 | DONE ins | na 16 16 | 0066d1 | 55 00       |                 eor.dx 00            
2323:000 | DONE wsp | na 16 16 |        |             |
2324:000 | DONE cmt | na 16 16 |        |             |                 ; um* uses all kinds of tmp stuff so we don't risk a conflict
2325:000 | DONE cmt | na 16 16 |        |             |                 ; and just take the cycle hit by pushing this to the stack
2326:000 | DONE ins | na 16 16 | 0066d3 | 48          |                 pha                  
2327:000 | DONE wsp | na 16 16 |        |             |
2328:000 | DONE cmt | na 16 16 |        |             |                 ; get the absolute value of both numbers so we can feed them to
2329:000 | DONE cmt | na 16 16 |        |             |                 ; UM*, which does the real work
2330:000 | DONE ins | na 16 16 | 0066d4 | 98          |                 tya                  
2331:000 | DONE ins | na 16 16 | 0066d5 | 10 05       |                 bpl 0066dc           
2332:000 | DONE wsp | na 16 16 |        |             |
2333:000 | DONE cmt | na 16 16 |        |             |                 ; TOS is negative so we have to ABS it
2334:000 | DONE ins | na 16 16 | 0066d7 | 49 ff ff    |                 eor.# 0ffff          
2335:000 | DONE ins | na 16 16 | 0066da | 1a          |                 inc.a                
2336:000 | DONE ins | na 16 16 | 0066db | a8          |                 tay                  
2337:000 | DONE wsp | na 16 16 |        |             |
2338:000 | DONE lbl | na 16 16 | 0066dc |             | mstar_abs_nos                        
2339:000 | DONE ins | na 16 16 | 0066dc | b5 00       |                 lda.dx 00            
2340:000 | DONE ins | na 16 16 | 0066de | 10 06       |                 bpl 0066e6           
2341:000 | DONE wsp | na 16 16 |        |             |
2342:000 | DONE cmt | na 16 16 |        |             |                 ; NOS is negative so we have to ABS it
2343:000 | DONE ins | na 16 16 | 0066e0 | 49 ff ff    |                 eor.# 0ffff          
2344:000 | DONE ins | na 16 16 | 0066e3 | 1a          |                 inc.a                
2345:000 | DONE ins | na 16 16 | 0066e4 | 95 00       |                 sta.dx 00            
2346:000 | DONE wsp | na 16 16 |        |             |
2347:000 | DONE lbl | na 16 16 | 0066e6 |             | mstar_umstar                         
2348:000 | DONE ins | na 16 16 | 0066e6 | 20 74 69    |                 jsr 006974           now ( d ) on stack
2349:000 | DONE wsp | na 16 16 |        |             |
2350:000 | DONE cmt | na 16 16 |        |             |                 ; handle the sign
2351:000 | DONE ins | na 16 16 | 0066e9 | 68          |                 pla                  
2352:000 | DONE wsp | na 16 16 |        |             |
2353:000 | DONE cmt | na 16 16 |        |             |                 ; postive, we don't have to care
2354:000 | DONE ins | na 16 16 | 0066ea | 10 03       |                 bpl 0066ef           
2355:000 | DONE wsp | na 16 16 |        |             |
2356:000 | DONE ins | na 16 16 | 0066ec | 20 8b 65    |                 jsr 00658b           
2357:000 | DONE wsp | na 16 16 |        |             |
2358:000 | DONE lbl | na 16 16 | 0066ef |             | z_mstar                              
2358:001 | DONE ins | na 16 16 | 0066ef | 60          |                 rts                  
2359:000 | DONE wsp | na 16 16 |        |             |
2360:000 | DONE wsp | na 16 16 |        |             |
2361:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
2362:000 | DONE cmt | na 16 16 |        |             | ; MAX ( n m -- n ) 18 bytes / X cycles
2363:000 | DONE cmt | na 16 16 |        |             | ; Compare TOS and NOS and keep which one is larger. Adapted from Lance A.
2364:000 | DONE cmt | na 16 16 |        |             | ; Leventhal "6502 Assembly Language Subroutines". Negative Flag indicates which
2365:000 | DONE cmt | na 16 16 |        |             | ; number is larger. See also http://6502.org/tutorials/compare_instructions.html
2366:000 | DONE cmt | na 16 16 |        |             | ; and http://www.righto.com/2012/12/the-6502-overflow-flag-explained.html
2367:000 | DONE lbl | na 16 16 | 0066f0 |             | xt_max                               
2368:000 | DONE ins | na 16 16 | 0066f0 | 98          |                 tya                  
2369:000 | DONE ins | na 16 16 | 0066f1 | d5 00       |                 cmp.dx 00            
2370:000 | DONE wsp | na 16 16 |        |             |
2371:000 | DONE cmt | na 16 16 |        |             |                 ; If they are the same, life is good. This step also sets the
2372:000 | DONE cmt | na 16 16 |        |             |                 ; Carry flag
2373:000 | DONE ins | na 16 16 | 0066f3 | f0 0b       |                 beq 006700           Faster than DROP because TOS is in Y
2374:000 | DONE wsp | na 16 16 |        |             |
2375:000 | DONE ins | na 16 16 | 0066f5 | f5 00       |                 sbc.dx 00            
2376:000 | DONE ins | na 16 16 | 0066f7 | 50 03       |                 bvc 0066fc           no overflow, skip ahead
2377:000 | DONE wsp | na 16 16 |        |             |
2378:000 | DONE cmt | na 16 16 |        |             |                 ; Deal with oveflow because we use signed numbers
2379:000 | DONE ins | na 16 16 | 0066f9 | 49 00 80    |                 eor.# 8000           compliment negative flag
2380:000 | DONE wsp | na 16 16 |        |             |
2381:000 | DONE lbl | na 16 16 | 0066fc |             | max_no_ov                            
2382:000 | DONE ins | na 16 16 | 0066fc | 10 02       |                 bpl 006700           keep TOS
2383:000 | DONE lbl | na 16 16 | 0066fe |             | max_drop                             
2384:000 | DONE ins | na 16 16 | 0066fe | b4 00       |                 ldy.dx 00            DROP so NOS is result
2385:000 | DONE lbl | na 16 16 | 006700 |             | max_nip                              
2386:000 | DONE ins | na 16 16 | 006700 | e8          |                 inx                  
2387:000 | DONE ins | na 16 16 | 006701 | e8          |                 inx                  
2388:000 | DONE wsp | na 16 16 |        |             |
2389:000 | DONE lbl | na 16 16 | 006702 |             | z_max                                
2389:001 | DONE ins | na 16 16 | 006702 | 60          |                 rts                  
2390:000 | DONE wsp | na 16 16 |        |             |
2391:000 | DONE wsp | na 16 16 |        |             |
2392:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
2393:000 | DONE cmt | na 16 16 |        |             | ; MIN ( n m -- n ) 18 bytes / X cycles
2394:000 | DONE cmt | na 16 16 |        |             | ; Compare TOS and NOS and keep which one is smaller Adapted from Lance A.
2395:000 | DONE cmt | na 16 16 |        |             | ; Leventhal "6502 Assembly Language Subroutines". Negative Flag indicates which
2396:000 | DONE cmt | na 16 16 |        |             | ; number is larger. See also http://6502.org/tutorials/compare_instructions.html
2397:000 | DONE cmt | na 16 16 |        |             | ; and http://www.righto.com/2012/12/the-6502-overflow-flag-explained.html
2398:000 | DONE lbl | na 16 16 | 006703 |             | xt_min                               
2399:000 | DONE ins | na 16 16 | 006703 | 98          |                 tya                  
2400:000 | DONE ins | na 16 16 | 006704 | d5 00       |                 cmp.dx 00            
2401:000 | DONE wsp | na 16 16 |        |             |
2402:000 | DONE cmt | na 16 16 |        |             |                 ; If they are the same, life is good. This step also sets the
2403:000 | DONE cmt | na 16 16 |        |             |                 ; Carry flag
2404:000 | DONE ins | na 16 16 | 006706 | f0 0b       |                 beq 006713           Faster than DROP because TOS is in Y
2405:000 | DONE wsp | na 16 16 |        |             |
2406:000 | DONE ins | na 16 16 | 006708 | f5 00       |                 sbc.dx 00            
2407:000 | DONE ins | na 16 16 | 00670a | 50 03       |                 bvc 00670f           no overflow, skip ahead
2408:000 | DONE wsp | na 16 16 |        |             |
2409:000 | DONE cmt | na 16 16 |        |             |                 ; Deal with oveflow because we use signed numbers
2410:000 | DONE ins | na 16 16 | 00670c | 49 00 80    |                 eor.# 8000           compliment negative flag
2411:000 | DONE wsp | na 16 16 |        |             |
2412:000 | DONE lbl | na 16 16 | 00670f |             | min_no_ov                            
2413:000 | DONE ins | na 16 16 | 00670f | 30 02       |                 bmi 006713           keep TOS
2414:000 | DONE lbl | na 16 16 | 006711 |             | min_drop                             
2415:000 | DONE ins | na 16 16 | 006711 | b4 00       |                 ldy.dx 00            DROP so NOS is result
2416:000 | DONE lbl | na 16 16 | 006713 |             | min_nip                              
2417:000 | DONE ins | na 16 16 | 006713 | e8          |                 inx                  
2418:000 | DONE ins | na 16 16 | 006714 | e8          |                 inx                  
2419:000 | DONE wsp | na 16 16 |        |             |
2420:000 | DONE lbl | na 16 16 | 006715 |             | z_min                                
2420:001 | DONE ins | na 16 16 | 006715 | 60          |                 rts                  
2421:000 | DONE wsp | na 16 16 |        |             |
2422:000 | DONE wsp | na 16 16 |        |             |
2423:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
2424:000 | DONE cmt | na 16 16 |        |             | ; NAME>INT ( nt -- xt ) 4 bytes / 8 cycles
2425:000 | DONE cmt | na 16 16 |        |             | ; Given the Name Token (nt) of a word, return its Execute Token (xt)
2426:000 | DONE lbl | na 16 16 | 006716 |             | xt_name-int                          
2427:000 | DONE dir | na 16 16 |        |             |         .!a16                        
2428:000 | DONE dir | na 16 16 |        |             |         .!xy16                       
2429:000 | DONE cmt | na 16 16 |        |             |                 ; The xt of a word beginns four bytes down from its nt
2430:000 | DONE ins | na 16 16 | 006716 | c8          |                 iny                  
2431:000 | DONE ins | na 16 16 | 006717 | c8          |                 iny                  
2432:000 | DONE ins | na 16 16 | 006718 | c8          |                 iny                  
2433:000 | DONE ins | na 16 16 | 006719 | c8          |                 iny                  
2434:000 | DONE ins | na 16 16 | 00671a | b9 00 00    |                 lda.y 0000           
2435:000 | DONE ins | na 16 16 | 00671d | a8          |                 tay                  
2436:000 | DONE wsp | na 16 16 |        |             |
2437:000 | DONE lbl | na 16 16 | 00671e |             | z_name-int                           
2437:001 | DONE ins | na 16 16 | 00671e | 60          |                 rts                  
2438:000 | DONE wsp | na 16 16 |        |             |
2439:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
2440:000 | DONE cmt | na 16 16 |        |             | ; NAME>STRING ( nt -- addr u ) 16 bytes / X cycles
2441:000 | DONE cmt | na 16 16 |        |             | ; Given a name token (nt) of a word, return its string. This is a Gforth word
2442:000 | DONE cmt | na 16 16 |        |             | ; that works with the Dictionary header entries. It is not checked if nt is
2443:000 | DONE cmt | na 16 16 |        |             | ; a valid name token.
2444:000 | DONE lbl | na 16 16 | 00671f |             | xt_name-string                       
2445:000 | DONE dir | na 16 16 |        |             |         .!a16                        
2446:000 | DONE dir | na 16 16 |        |             |         .!xy16                       
2447:000 | DONE ins | na 16 16 | 00671f | ca          |                 dex                  move NOS down one
2448:000 | DONE ins | na 16 16 | 006720 | ca          |                 dex                  
2449:000 | DONE wsp | na 16 16 |        |             |
2450:000 | DONE cmt | na 16 16 |        |             |                 ; the name string of a word begins 8 bytes down from its nt,
2451:000 | DONE cmt | na 16 16 |        |             |                 ; which we have as TOS
2452:000 | DONE ins | na 16 16 | 006721 | 98          |                 tya                  
2453:000 | DONE ins | na 16 16 | 006722 | 18          |                 clc                  
2454:000 | DONE ins | na 16 16 | 006723 | 69 08 00    |                 adc.# 0008           
2455:000 | DONE ins | na 16 16 | 006726 | 95 00       |                 sta.dx 00            NOS
2456:000 | DONE wsp | na 16 16 |        |             |
2457:000 | DONE cmt | na 16 16 |        |             |                 ; the length of the name string is in the LSB of the first word
2458:000 | DONE cmt | na 16 16 |        |             |                 ; of the dictionary entry header (the name token)
2459:000 | DONE ins | na 16 16 | 006728 | b9 00 00    |                 lda.y 0000           LDA $0000,Y
2460:000 | DONE ins | na 16 16 | 00672b | 29 ff 00    |                 and.# 00ff           mask all but length byte
2461:000 | DONE ins | na 16 16 | 00672e | a8          |                 tay                  
2462:000 | DONE wsp | na 16 16 |        |             |
2463:000 | DONE lbl | na 16 16 | 00672f |             | z_name-string                        
2463:001 | DONE ins | na 16 16 | 00672f | 60          |                 rts                  
2464:000 | DONE wsp | na 16 16 |        |             |
2465:000 | DONE wsp | na 16 16 |        |             |
2466:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
2467:000 | DONE cmt | na 16 16 |        |             | ; NEGATE ( n -- n ) 6 bytes / X cycles
2468:000 | DONE cmt | na 16 16 |        |             | ; Two's complement of TOS
2469:000 | DONE lbl | na 16 16 | 006730 |             | xt_negate                            
2470:000 | DONE ins | na 16 16 | 006730 | 98          |                 tya                  
2471:000 | DONE ins | na 16 16 | 006731 | 49 ff ff    |                 eor.# 0ffff          
2472:000 | DONE ins | na 16 16 | 006734 | 1a          |                 inc.a                
2473:000 | DONE ins | na 16 16 | 006735 | a8          |                 tay                  
2474:000 | DONE wsp | na 16 16 |        |             |
2475:000 | DONE lbl | na 16 16 | 006736 |             | z_negate                             
2475:001 | DONE ins | na 16 16 | 006736 | 60          |                 rts                  
2476:000 | DONE wsp | na 16 16 |        |             |
2477:000 | DONE wsp | na 16 16 |        |             |
2478:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
2479:000 | DONE cmt | na 16 16 |        |             | ; NIP ( n m -- m ) 2 bytes / 4 cycles
2480:000 | DONE cmt | na 16 16 |        |             | ; Delete entry that is NOS
2481:000 | DONE lbl | na 16 16 | 006737 |             | xt_nip                               
2482:000 | DONE dir | na 16 16 |        |             |         .!xy16                       
2483:000 | DONE ins | na 16 16 | 006737 | e8          |                 inx                  
2484:000 | DONE ins | na 16 16 | 006738 | e8          |                 inx                  
2485:000 | DONE lbl | na 16 16 | 006739 |             | z_nip                                
2485:001 | DONE ins | na 16 16 | 006739 | 60          |                 rts                  
2486:000 | DONE wsp | na 16 16 |        |             |
2487:000 | DONE wsp | na 16 16 |        |             |
2488:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
2489:000 | DONE cmt | na 16 16 |        |             | ; OR ( n m -- n ) 6 bytes / X cycles
2490:000 | DONE cmt | na 16 16 |        |             | ; Logical OR
2491:000 | DONE lbl | na 16 16 | 00673a |             | xt_or                                
2492:000 | DONE ins | na 16 16 | 00673a | 98          |                 tya                  
2493:000 | DONE ins | na 16 16 | 00673b | 15 00       |                 ora.dx 00            
2494:000 | DONE ins | na 16 16 | 00673d | a8          |                 tay                  
2495:000 | DONE wsp | na 16 16 |        |             |
2496:000 | DONE ins | na 16 16 | 00673e | e8          |                 inx                  
2497:000 | DONE ins | na 16 16 | 00673f | e8          |                 inx                  
2498:000 | DONE wsp | na 16 16 |        |             |
2499:000 | DONE lbl | na 16 16 | 006740 |             | z_or                                 
2499:001 | DONE ins | na 16 16 | 006740 | 60          |                 rts                  
2500:000 | DONE wsp | na 16 16 |        |             |
2501:000 | DONE wsp | na 16 16 |        |             |
2502:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
2503:000 | DONE cmt | na 16 16 |        |             | ; OVER ( n m -- n m n )  6 bytes / 14 cycles
2504:000 | DONE cmt | na 16 16 |        |             | ; Push NOS on Data Stack
2505:000 | DONE lbl | na 16 16 | 006741 |             | xt_over                              
2506:000 | DONE ins | na 16 16 | 006741 | ca          |                 dex                  
2507:000 | DONE ins | na 16 16 | 006742 | ca          |                 dex                  
2508:000 | DONE ins | na 16 16 | 006743 | 94 00       |                 sty.dx 00            
2509:000 | DONE ins | na 16 16 | 006745 | b4 02       |                 ldy.dx 02            
2510:000 | DONE wsp | na 16 16 |        |             |
2511:000 | DONE lbl | na 16 16 | 006747 |             | z_over                               
2511:001 | DONE ins | na 16 16 | 006747 | 60          |                 rts                  
2512:000 | DONE wsp | na 16 16 |        |             |
2513:000 | DONE wsp | na 16 16 |        |             |
2514:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
2515:000 | DONE cmt | na 16 16 |        |             | ; PAD ( -- addr ) 11 bytes / X cycles
2516:000 | DONE cmt | na 16 16 |        |             | ; Return address to a temporary area in free memory for user. Must be at least
2517:000 | DONE cmt | na 16 16 |        |             | ; 84 bytes in size (says ANSI). It is located relative to the compile area
2518:000 | DONE cmt | na 16 16 |        |             | ; pointer (CP) and therefore varies in position. This area is reserved for the
2519:000 | DONE cmt | na 16 16 |        |             | ; user and not used by the system
2520:000 | DONE lbl | na 16 16 | 006748 |             | xt_pad                               
2521:000 | DONE dir | na 16 16 |        |             |         .!a16                        
2522:000 | DONE ins | na 16 16 | 006748 | ca          |                 dex                  
2523:000 | DONE ins | na 16 16 | 006749 | ca          |                 dex                  
2524:000 | DONE ins | na 16 16 | 00674a | 94 00       |                 sty.dx 00            
2525:000 | DONE wsp | na 16 16 |        |             |
2526:000 | DONE ins | na 16 16 | 00674c | a5 00       |                 lda.d 000200         
2527:000 | DONE ins | na 16 16 | 00674e | 18          |                 clc                  
2528:000 | DONE ins | na 16 16 | 00674f | 69 7f 00    |                 adc.# 00007f         
2529:000 | DONE ins | na 16 16 | 006752 | a8          |                 tay                  
2530:000 | DONE wsp | na 16 16 |        |             |
2531:000 | DONE lbl | na 16 16 | 006753 |             | z_pad                                
2531:001 | DONE ins | na 16 16 | 006753 | 60          |                 rts                  
2532:000 | DONE wsp | na 16 16 |        |             |
2533:000 | DONE wsp | na 16 16 |        |             |
2534:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
2535:000 | DONE cmt | na 16 16 |        |             | ; PAGE ( -- ) X bytes / X cycles
2536:000 | DONE cmt | na 16 16 |        |             | ; Clear the screen on vt-100 terminals by sending the code "ESC[2J". This is
2537:000 | DONE cmt | na 16 16 |        |             | ; only useful in interactive scenarios so we don't worry about speed
2538:000 | DONE cmt | na 16 16 |        |             | ; TODO rewrite with EMIT
2539:000 | DONE lbl | na 16 16 | 006754 |             | xt_page                              
2540:000 | DONE ins | na 16 16 | 006754 | a9 6e 77    |                 lda.# 00776e         
2541:000 | DONE ins | na 16 16 | 006757 | 20 df 70    |                 jsr 0070df           
2542:000 | DONE wsp | na 16 16 |        |             |
2543:000 | DONE cmt | na 16 16 |        |             |                 ; In theory, this should have moved the cursor to the top left
2544:000 | DONE cmt | na 16 16 |        |             |                 ; corner ("home"), but this doesn't seem to work in practice.
2545:000 | DONE cmt | na 16 16 |        |             |                 ; So we send "ESC[H" as well.
2546:000 | DONE ins | na 16 16 | 00675a | a9 73 77    |                 lda.# 007773         
2547:000 | DONE ins | na 16 16 | 00675d | 20 df 70    |                 jsr 0070df           
2548:000 | DONE wsp | na 16 16 |        |             |
2549:000 | DONE lbl | na 16 16 | 006760 |             | z_page                               
2549:001 | DONE ins | na 16 16 | 006760 | 60          |                 rts                  
2550:000 | DONE wsp | na 16 16 |        |             |
2551:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
2552:000 | DONE cmt | na 16 16 |        |             | ; PARSE-NAME ( "name" -- addr u ) 41+ bytes / X cycles
2553:000 | DONE cmt | na 16 16 |        |             | ; Find next word in input string, skipping leading spaces. This is a special
2554:000 | DONE cmt | na 16 16 |        |             | ; form of PARSE and drops through to that word. See PARSE for more detail. We
2555:000 | DONE cmt | na 16 16 |        |             | ; use this word internally for the interpreter because it is a lot easier to use
2556:000 | DONE cmt | na 16 16 |        |             | ; http://forth-standard.org/standard/core/PARSE-NAME has a Forth implementation
2557:000 | DONE lbl | na 16 16 | 006761 |             | xt_parse-name                        
2558:000 | DONE dir | na 16 16 |        |             |         .!a16                        
2559:000 | DONE dir | na 16 16 |        |             |         .!xy16                       
2560:000 | DONE cmt | na 16 16 |        |             |                 ; skip leading spaces, changing >IN, then place SPACE
2561:000 | DONE cmt | na 16 16 |        |             |                 ; character on data stack for PARSE
2562:000 | DONE ins | na 16 16 | 006761 | 5a          |                 phy                  save TOS for later use
2563:000 | DONE ins | na 16 16 | 006762 | a4 12       |                 ldy.d 000212         >IN
2564:000 | DONE ins | na 16 16 | 006764 | e2 20       |                 sep 20               
2564:001 | DONE ctl | na  8 16 |        |             |         .!a8
2565:000 | DONE lbl | na  8 16 | 006766 |             | parse-name_loop                      
2566:000 | DONE ins | na  8 16 | 006766 | c4 0e       |                 cpy.d 00020e         end of line?
2567:000 | DONE ins | na  8 16 | 006768 | f0 09       |                 beq 006773           
2568:000 | DONE wsp | na  8 16 |        |             |
2569:000 | DONE ins | na  8 16 | 00676a | b1 0c       |                 lda.diy 00020c       LDA (CIB),Y
2570:000 | DONE ins | na  8 16 | 00676c | c9 20       |                 cmp.# AscSP          
2571:000 | DONE ins | na  8 16 | 00676e | d0 17       |                 bne 006787           
2572:000 | DONE ins | na  8 16 | 006770 | c8          |                 iny                  
2573:000 | DONE ins | na  8 16 | 006771 | 80 f3       |                 bra 006766           
2574:000 | DONE wsp | na  8 16 |        |             |
2575:000 | DONE lbl | na  8 16 | 006773 |             | parse-name_empty_line                
2576:000 | DONE ins | na  8 16 | 006773 | c2 20       |                 rep 20               
2576:001 | DONE ctl | na 16 16 |        |             |         .!a16
2577:000 | DONE cmt | na 16 16 |        |             |                 ; The Gforth documentation does not say what address is returned
2578:000 | DONE cmt | na 16 16 |        |             |                 ; if a string with only spaces is returned. Experiments with
2579:000 | DONE cmt | na 16 16 |        |             |                 ; the word  : PNT ( "name" -- ) PARSE-NAME SWAP U. U. TYPE ;
2580:000 | DONE cmt | na 16 16 |        |             |                 ; show that it returns the address of the last space in the
2581:000 | DONE cmt | na 16 16 |        |             |                 ; input, which is cib+ciblen. So we do that as well.
2582:000 | DONE ins | na 16 16 | 006775 | ca          |                 dex                  
2583:000 | DONE ins | na 16 16 | 006776 | ca          |                 dex                  
2584:000 | DONE ins | na 16 16 | 006777 | ca          |                 dex                  
2585:000 | DONE ins | na 16 16 | 006778 | ca          |                 dex                  
2586:000 | DONE wsp | na 16 16 |        |             |
2587:000 | DONE ins | na 16 16 | 006779 | 7a          |                 ply                  restore old TOS as 3OS
2588:000 | DONE ins | na 16 16 | 00677a | 94 02       |                 sty.dx 02            
2589:000 | DONE wsp | na 16 16 |        |             |
2590:000 | DONE ins | na 16 16 | 00677c | a5 0c       |                 lda.d 00020c         
2591:000 | DONE ins | na 16 16 | 00677e | 18          |                 clc                  
2592:000 | DONE ins | na 16 16 | 00677f | 65 0e       |                 adc.d 00020e         
2593:000 | DONE ins | na 16 16 | 006781 | 95 00       |                 sta.dx 00            Address as NOS
2594:000 | DONE wsp | na 16 16 |        |             |
2595:000 | DONE ins | na 16 16 | 006783 | a0 00 00    |                 ldy.# 0000           TOS
2596:000 | DONE wsp | na 16 16 |        |             |
2597:000 | DONE ins | na 16 16 | 006786 | 60          |                 rts                  don't have to go through PARSE
2598:000 | DONE wsp | na 16 16 |        |             |
2599:000 | DONE lbl | na 16 16 | 006787 |             | parse-name_found                     
2600:000 | DONE dir | na 16 16 |        |             |         .!xy16                       
2601:000 | DONE ins | na 16 16 | 006787 | c2 20       |                 rep 20               
2601:001 | DONE ctl | na 16 16 |        |             |         .!a16
2602:000 | DONE ins | na 16 16 | 006789 | 84 12       |                 sty.d 000212         new >IN
2603:000 | DONE wsp | na 16 16 |        |             |
2604:000 | DONE ins | na 16 16 | 00678b | 7a          |                 ply                  recover TOS
2605:000 | DONE ins | na 16 16 | 00678c | ca          |                 dex                  
2606:000 | DONE ins | na 16 16 | 00678d | ca          |                 dex                  
2607:000 | DONE ins | na 16 16 | 00678e | 94 00       |                 sty.dx 00            
2608:000 | DONE wsp | na 16 16 |        |             |
2609:000 | DONE ins | na 16 16 | 006790 | a0 20 00    |                 ldy.# AscSP          put space on TOS for PARSE
2610:000 | DONE wsp | na 16 16 |        |             |
2611:000 | DONE cmt | na 16 16 |        |             |                 ; fall thru to PARSE
2612:000 | DONE wsp | na 16 16 |        |             |
2613:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
2614:000 | DONE cmt | na 16 16 |        |             | ; PARSE ( c "name" -- addr u ) 45 bytes / X+ cycles
2615:000 | DONE cmt | na 16 16 |        |             | ; Find word in input string delimited by character given Do not skip leading
2616:000 | DONE cmt | na 16 16 |        |             | ; delimiters, this is an important difference to PARSE-NAME. PARSE and
2617:000 | DONE cmt | na 16 16 |        |             | ; PARSE-NAME replace WORD in modern systems. See the ANSI documentation at
2618:000 | DONE cmt | na 16 16 |        |             | ; http://www.forth200x.org/documents/html3/rationale.html#rat:core:PARSE
2619:000 | DONE cmt | na 16 16 |        |             | ; PARSE-NAME drops through to here
2620:000 | DONE cmt | na 16 16 |        |             | ;
2621:000 | DONE cmt | na 16 16 |        |             | ;    cib   cib+toin    cib+ciblen
2622:000 | DONE cmt | na 16 16 |        |             | ;     v       v             v
2623:000 | DONE cmt | na 16 16 |        |             | ;     |#####################|              Length of found string:
2624:000 | DONE cmt | na 16 16 |        |             | ;                                          ciblen - toin
2625:000 | DONE cmt | na 16 16 |        |             | ;     +------>|  toin (>IN)
2626:000 | DONE cmt | na 16 16 |        |             | ;     +-------------------->|  ciblen
2627:000 | DONE cmt | na 16 16 |        |             | ;
2628:000 | DONE cmt | na 16 16 |        |             | ; The input string is stored starting at the address in the Current Input Buffer
2629:000 | DONE cmt | na 16 16 |        |             | ; (CIB), the length of which is in CIBLEN. While searching for the delimiter,
2630:000 | DONE cmt | na 16 16 |        |             | ; TOIN (>IN) points to the where we currently are. Since PARSE does not skip
2631:000 | DONE cmt | na 16 16 |        |             | ; leading delimiters, we assume we are on a useful string.
2632:000 | DONE lbl | na 16 16 | 006793 |             | xt_parse                             
2633:000 | DONE dir | na 16 16 |        |             |         .!a16                        
2634:000 | DONE dir | na 16 16 |        |             |         .!xy16                       
2635:000 | DONE ins | na 16 16 | 006793 | 84 16       |                 sty.d 000216         save delimiter, char is LSB
2636:000 | DONE wsp | na 16 16 |        |             |
2637:000 | DONE cmt | na 16 16 |        |             |                 ; save beginning of new word (cib+toin) to NOS. Don't need to
2638:000 | DONE cmt | na 16 16 |        |             |                 ; worry about TOS because Y gets clobbered anyway before we
2639:000 | DONE cmt | na 16 16 |        |             |                 ; return
2640:000 | DONE ins | na 16 16 | 006795 | a5 12       |                 lda.d 000212         
2641:000 | DONE ins | na 16 16 | 006797 | 85 1a       |                 sta.d 00021a         save >IN for later length calculation
2642:000 | DONE ins | na 16 16 | 006799 | 18          |                 clc                  
2643:000 | DONE ins | na 16 16 | 00679a | 65 0c       |                 adc.d 00020c         
2644:000 | DONE wsp | na 16 16 |        |             |
2645:000 | DONE ins | na 16 16 | 00679c | ca          |                 dex                  save addr as NOS
2646:000 | DONE ins | na 16 16 | 00679d | ca          |                 dex                  
2647:000 | DONE ins | na 16 16 | 00679e | 95 00       |                 sta.dx 00            
2648:000 | DONE wsp | na 16 16 |        |             |
2649:000 | DONE ins | na 16 16 | 0067a0 | 64 18       |                 stz.d 000218         offset for EOL/char found adjustment of >IN
2650:000 | DONE wsp | na 16 16 |        |             |
2651:000 | DONE cmt | na 16 16 |        |             |                 ; prepare loop using Y as index
2652:000 | DONE ins | na 16 16 | 0067a2 | a4 12       |                 ldy.d 000212         
2653:000 | DONE ins | na 16 16 | 0067a4 | e2 20       |                 sep 20               
2653:001 | DONE ctl | na  8 16 |        |             |         .!a8
2654:000 | DONE wsp | na  8 16 |        |             |
2655:000 | DONE lbl | na  8 16 | 0067a6 |             | parse_loop                           
2656:000 | DONE ins | na  8 16 | 0067a6 | c4 0e       |                 cpy.d 00020e         check for EOL first
2657:000 | DONE ins | na  8 16 | 0067a8 | f0 0d       |                 beq 0067b7           
2658:000 | DONE wsp | na  8 16 |        |             |
2659:000 | DONE ins | na  8 16 | 0067aa | b1 0c       |                 lda.diy 00020c       LDA (CIB),Y
2660:000 | DONE ins | na  8 16 | 0067ac | c5 16       |                 cmp.d 000216         found delimiter?
2661:000 | DONE ins | na  8 16 | 0067ae | f0 03       |                 beq 0067b3           
2662:000 | DONE ins | na  8 16 | 0067b0 | c8          |                 iny                  
2663:000 | DONE ins | na  8 16 | 0067b1 | 80 f3       |                 bra 0067a6           
2664:000 | DONE wsp | na  8 16 |        |             |
2665:000 | DONE lbl | na  8 16 | 0067b3 |             | parse_found_delimiter                
2666:000 | DONE cmt | na  8 16 |        |             |                 ; If we haven't reached the end of the line, but found
2667:000 | DONE cmt | na  8 16 |        |             |                 ; a delimiter, we want >IN to point to the next character after
2668:000 | DONE cmt | na  8 16 |        |             |                 ; the delimiter, not the delimiter itself. This is what the
2669:000 | DONE cmt | na  8 16 |        |             |                 ; offset is for
2670:000 | DONE ins | na  8 16 | 0067b3 | c2 20       |                 rep 20               
2670:001 | DONE ctl | na 16 16 |        |             |         .!a16
2671:000 | DONE ins | na 16 16 | 0067b5 | e6 18       |                 inc.d 000218         
2672:000 | DONE wsp | na 16 16 |        |             |
2673:000 | DONE lbl | na 16 16 | 0067b7 |             | parse_reached_eol                    
2674:000 | DONE cmt | na 16 16 |        |             |                 ; calculate length of string found (see ascii drawing)
2675:000 | DONE dir | na 16 16 |        |             |         .!xy16                       
2676:000 | DONE ins | na 16 16 | 0067b7 | c2 20       |                 rep 20               
2676:001 | DONE ctl | na 16 16 |        |             |         .!a16
2677:000 | DONE ins | na 16 16 | 0067b9 | 98          |                 tya                  
2678:000 | DONE ins | na 16 16 | 0067ba | 38          |                 sec                  
2679:000 | DONE ins | na 16 16 | 0067bb | e5 1a       |                 sbc.d 00021a         original value for >IN / index of first char
2680:000 | DONE ins | na 16 16 | 0067bd | 48          |                 pha                  save so we can manipulate Y
2681:000 | DONE wsp | na 16 16 |        |             |
2682:000 | DONE cmt | na 16 16 |        |             |                 ; calculate new >IN
2683:000 | DONE ins | na 16 16 | 0067be | 98          |                 tya                  
2684:000 | DONE ins | na 16 16 | 0067bf | 18          |                 clc                  
2685:000 | DONE ins | na 16 16 | 0067c0 | 65 18       |                 adc.d 000218         offset for EOL vs found delimiter
2686:000 | DONE ins | na 16 16 | 0067c2 | 85 12       |                 sta.d 000212         
2687:000 | DONE wsp | na 16 16 |        |             |
2688:000 | DONE ins | na 16 16 | 0067c4 | 7a          |                 ply                  length of string in TOS
2689:000 | DONE wsp | na 16 16 |        |             |
2690:000 | DONE lbl | na 16 16 | 0067c5 |             | z_parse-name                         
2691:000 | DONE lbl | na 16 16 | 0067c5 |             | z_parse                              
2691:001 | DONE ins | na 16 16 | 0067c5 | 60          |                 rts                  
2692:000 | DONE wsp | na 16 16 |        |             |
2693:000 | DONE wsp | na 16 16 |        |             |
2694:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
2695:000 | DONE cmt | na 16 16 |        |             | ; +! "PLUSSTORE" ( n addr -- ) 15 bytes / X cycles
2696:000 | DONE cmt | na 16 16 |        |             | ; Add NOS to address in TOS
2697:000 | DONE lbl | na 16 16 | 0067c6 |             | xt_plusstore                         
2698:000 | DONE dir | na 16 16 |        |             |         .!a16                        
2699:000 | DONE ins | na 16 16 | 0067c6 | b9 00 00    |                 lda.y 0000           
2700:000 | DONE ins | na 16 16 | 0067c9 | 18          |                 clc                  
2701:000 | DONE ins | na 16 16 | 0067ca | 75 00       |                 adc.dx 00            
2702:000 | DONE ins | na 16 16 | 0067cc | 99 00 00    |                 sta.y 0000           
2703:000 | DONE wsp | na 16 16 |        |             |
2704:000 | DONE ins | na 16 16 | 0067cf | b4 02       |                 ldy.dx 02            
2705:000 | DONE ins | na 16 16 | 0067d1 | e8          |                 inx                  
2706:000 | DONE ins | na 16 16 | 0067d2 | e8          |                 inx                  
2707:000 | DONE ins | na 16 16 | 0067d3 | e8          |                 inx                  
2708:000 | DONE ins | na 16 16 | 0067d4 | e8          |                 inx                  
2709:000 | DONE wsp | na 16 16 |        |             |
2710:000 | DONE lbl | na 16 16 | 0067d5 |             | z_plusstore                          
2710:001 | DONE ins | na 16 16 | 0067d5 | 60          |                 rts                  
2711:000 | DONE wsp | na 16 16 |        |             |
2712:000 | DONE wsp | na 16 16 |        |             |
2713:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
2714:000 | DONE cmt | na 16 16 |        |             | ; POSTPONE ( -- ) X bytes / X cycles
2715:000 | DONE cmt | na 16 16 |        |             | ; Add the compilation behavior of a word to a new word at compile time. If the
2716:000 | DONE cmt | na 16 16 |        |             | ; word that follows it is immediate, include it so that it will be compiled when
2717:000 | DONE cmt | na 16 16 |        |             | ; the word being defined is itself used for a new word. Tricky, but very useful.
2718:000 | DONE cmt | na 16 16 |        |             | ; Because POSTPONE expects a word (not an xt) in the input stream (not on the
2719:000 | DONE cmt | na 16 16 |        |             | ; Data Stack). This means we cannot build words with "jsr xt_postpone, jsr
2720:000 | DONE cmt | na 16 16 |        |             | ; <word>" directly. This word uses tmp1
2721:000 | DONE lbl | na 16 16 | 0067d6 |             | xt_postpone                          
2722:000 | DONE cmt | na 16 16 |        |             |                 ; get name from string
2723:000 | DONE ins | na 16 16 | 0067d6 | 20 61 67    |                 jsr 006761           ( addr n )
2724:000 | DONE wsp | na 16 16 |        |             |
2725:000 | DONE cmt | na 16 16 |        |             |                 ; if there is no word in stream, complain and abort
2726:000 | DONE ins | na 16 16 | 0067d9 | d0 06       |                 bne 0067e1           
2727:000 | DONE ins | na 16 16 | 0067db | a9 c1 76    |                 lda.# 0076c1         
2728:000 | DONE ins | na 16 16 | 0067de | 4c d9 70    |                 jmp 0070d9           
2729:000 | DONE wsp | na 16 16 |        |             |
2730:000 | DONE lbl | na 16 16 | 0067e1 |             | pp_got_word                          
2731:000 | DONE cmt | na 16 16 |        |             |                 ; convert to lower
2732:000 | DONE cmt | na 16 16 |        |             |                 ; TODO move this to FIND-NAME
2733:000 | DONE ins | na 16 16 | 0067e1 | 20 12 71    |                 jsr 007112           
2734:000 | DONE wsp | na 16 16 |        |             |
2735:000 | DONE ins | na 16 16 | 0067e4 | 20 30 66    |                 jsr 006630           ( nt | 0 )
2736:000 | DONE wsp | na 16 16 |        |             |
2737:000 | DONE cmt | na 16 16 |        |             |                 ; if word is not in Dictionary, complain and abort
2738:000 | DONE ins | na 16 16 | 0067e7 | d0 03       |                 bne 0067ec           
2739:000 | DONE ins | na 16 16 | 0067e9 | a9 5e 77    |                 lda.# 00775e         
2740:000 | DONE wsp | na 16 16 |        |             |
2741:000 | DONE lbl | na 16 16 | 0067ec |             | pp_got_nt                            
2742:000 | DONE cmt | na 16 16 |        |             |                 ; Keep nt safe for later use
2743:000 | DONE ins | na 16 16 | 0067ec | 84 16       |                 sty.d 000216         
2744:000 | DONE wsp | na 16 16 |        |             |
2745:000 | DONE cmt | na 16 16 |        |             |                 ; We need the xt instead of the nt for the actual compiling
2746:000 | DONE ins | na 16 16 | 0067ee | 20 16 67    |                 jsr 006716           ( xt )
2747:000 | DONE wsp | na 16 16 |        |             |
2748:000 | DONE cmt | na 16 16 |        |             |                 ; See if this is an immediate word. This is easier with nt than
2749:000 | DONE cmt | na 16 16 |        |             |                 ; with xt
2750:000 | DONE ins | na 16 16 | 0067f1 | b2 16       |                 lda.di 000216        LDA (TMP1) - get status byte of word
2751:000 | DONE ins | na 16 16 | 0067f3 | eb          |                 xba                  flags are MSB
2752:000 | DONE ins | na 16 16 | 0067f4 | 29 02 00    |                 and.# IM             mask everything but Immediate bit
2753:000 | DONE ins | na 16 16 | 0067f7 | f0 03       |                 beq 0067fc           
2754:000 | DONE wsp | na 16 16 |        |             |
2755:000 | DONE cmt | na 16 16 |        |             |                 ; The word is immediate, so instead of executing it right now,
2756:000 | DONE cmt | na 16 16 |        |             |                 ; we compile it. xt is on the stack, so this is simple. The RTS
2757:000 | DONE cmt | na 16 16 |        |             |                 ; of COMPILE, takes us back to the original caller
2758:000 | DONE ins | na 16 16 | 0067f9 | 4c b9 64    |                 jmp 0064b9           JSR/RTS
2759:000 | DONE wsp | na 16 16 |        |             |
2760:000 | DONE lbl | na 16 16 | 0067fc |             | pp_not_immediate                     
2761:000 | DONE cmt | na 16 16 |        |             |                 ; This is not an immediate word, so we enact "deffered
2762:000 | DONE cmt | na 16 16 |        |             |                 ; compilation" by including ' <NAME> COMPILE, which we do by
2763:000 | DONE cmt | na 16 16 |        |             |                 ; compiling the run-time routine of LITERAL, the xt itself, and
2764:000 | DONE cmt | na 16 16 |        |             |                 ; a subroutine jump to COMPILE,
2765:000 | DONE ins | na 16 16 | 0067fc | f4 c3 66    |                 phe.# 0066c3         PEA LITERAL_RT
2766:000 | DONE ins | na 16 16 | 0067ff | 20 b8 70    |                 jsr 0070b8           
2767:000 | DONE wsp | na 16 16 |        |             |
2768:000 | DONE cmt | na 16 16 |        |             |                 ; The xt is TOS. We can't use COMPILE, here because it might
2769:000 | DONE cmt | na 16 16 |        |             |                 ; decided to do something silly like compile it as a native word
2770:000 | DONE cmt | na 16 16 |        |             |                 ; and ruin everything
2771:000 | DONE ins | na 16 16 | 006802 | 20 b6 61    |                 jsr 0061b6           
2772:000 | DONE wsp | na 16 16 |        |             |
2773:000 | DONE cmt | na 16 16 |        |             |                 ; compile COMPILE, - it's RTS takes us back to original caller
2774:000 | DONE ins | na 16 16 | 006805 | f4 b9 64    |                 phe.# 0064b9         
2775:000 | DONE ins | na 16 16 | 006808 | 4c b8 70    |                 jmp 0070b8           JSR/RTS
2776:000 | DONE wsp | na 16 16 |        |             |
2777:000 | DONE lbl | na 16 16 | 00680b |             | z_postpone                           ; never reached
2778:000 | DONE wsp | na 16 16 |        |             |
2779:000 | DONE wsp | na 16 16 |        |             |
2780:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
2781:000 | DONE cmt | na 16 16 |        |             | ; R@ "RFETCH" ( -- n ) (R: n -- n )  X bytes / X cycles
2782:000 | DONE cmt | na 16 16 |        |             | ; Get (not pull) Top of Return Stack. We follow Gforth in that this word is not
2783:000 | DONE cmt | na 16 16 |        |             | ; compiled only, because it can be interesting to know what the top of R is in
2784:000 | DONE cmt | na 16 16 |        |             | ; an interactive setting. However, this causes all kinds of problems if we try
2785:000 | DONE cmt | na 16 16 |        |             | ; to natively compile the word, so it does not get the NC flag even though it is
2786:000 | DONE cmt | na 16 16 |        |             | ; actually short enough to make that reasonable
2787:000 | DONE cmt | na 16 16 |        |             | ; TODO consider special case in COMPILE, see there
2788:000 | DONE lbl | na 16 16 | 00680b |             | xt_rfetch                            
2789:000 | DONE cmt | na 16 16 |        |             |                 ; get return address that is on top of the return stack
2790:000 | DONE ins | na 16 16 | 00680b | 68          |                 pla                  
2791:000 | DONE wsp | na 16 16 |        |             |
2792:000 | DONE ins | na 16 16 | 00680c | ca          |                 dex                  
2793:000 | DONE ins | na 16 16 | 00680d | ca          |                 dex                  
2794:000 | DONE ins | na 16 16 | 00680e | 94 00       |                 sty.dx 00            
2795:000 | DONE wsp | na 16 16 |        |             |
2796:000 | DONE ins | na 16 16 | 006810 | 7a          |                 ply                  get top of return stack and push copy back again
2797:000 | DONE ins | na 16 16 | 006811 | 5a          |                 phy                  
2798:000 | DONE wsp | na 16 16 |        |             |
2799:000 | DONE ins | na 16 16 | 006812 | 48          |                 pha                  restore the return address
2800:000 | DONE wsp | na 16 16 |        |             |
2801:000 | DONE lbl | na 16 16 | 006813 |             | z_rfetch                             
2801:001 | DONE ins | na 16 16 | 006813 | 60          |                 rts                  
2802:000 | DONE wsp | na 16 16 |        |             |
2803:000 | DONE wsp | na 16 16 |        |             |
2804:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
2805:000 | DONE cmt | na 16 16 |        |             | ; R> "FROMR" ( -- n ) (R: n -- )  7 bytes / 23 cycles
2806:000 | DONE cmt | na 16 16 |        |             | ; Move Top of Return Stack to Top of Data Stack. Remember we have to move the
2807:000 | DONE cmt | na 16 16 |        |             | ; jump address out of the way first.
2808:000 | DONE cmt | na 16 16 |        |             | ; TODO consider stripping PHA/PLA if natively compiled (see COMPILE,)
2809:000 | DONE lbl | na 16 16 | 006814 |             | xt_fromr                             
2810:000 | DONE cmt | na 16 16 |        |             |                 ; Rescue the address of the return jump that is currently top of
2811:000 | DONE cmt | na 16 16 |        |             |                 ; the Return Stack. If this word is natively compiled, this is
2812:000 | DONE cmt | na 16 16 |        |             |                 ; a waste of nine cycles
2813:000 | DONE ins | na 16 16 | 006814 | 68          |                 pla                  
2814:000 | DONE wsp | na 16 16 |        |             |
2815:000 | DONE ins | na 16 16 | 006815 | ca          |                 dex                  
2816:000 | DONE ins | na 16 16 | 006816 | ca          |                 dex                  
2817:000 | DONE ins | na 16 16 | 006817 | 94 00       |                 sty.dx 00            
2818:000 | DONE wsp | na 16 16 |        |             |
2819:000 | DONE ins | na 16 16 | 006819 | 7a          |                 ply                  the actual work
2820:000 | DONE wsp | na 16 16 |        |             |
2821:000 | DONE ins | na 16 16 | 00681a | 48          |                 pha                  get return address back
2822:000 | DONE wsp | na 16 16 |        |             |
2823:000 | DONE lbl | na 16 16 | 00681b |             | z_fromr                              
2823:001 | DONE ins | na 16 16 | 00681b | 60          |                 rts                  
2824:000 | DONE wsp | na 16 16 |        |             |
2825:000 | DONE wsp | na 16 16 |        |             |
2826:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
2827:000 | DONE cmt | na 16 16 |        |             | ; REFILL ( -- f ) X bytes / X cycles
2828:000 | DONE cmt | na 16 16 |        |             | ; "Attempt to fill the input buffer from the input source, returning a true flag
2829:000 | DONE cmt | na 16 16 |        |             | ; if successful. When the input source is the user input device, attempt to
2830:000 | DONE cmt | na 16 16 |        |             | ; receive input into the terminal input buffer. If successful, make the result
2831:000 | DONE cmt | na 16 16 |        |             | ; the input buffer, set >IN to zero, and return true. Receipt of a line
2832:000 | DONE cmt | na 16 16 |        |             | ; containing no characters is considered successful. If there is no input
2833:000 | DONE cmt | na 16 16 |        |             | ; available from the current input source, return false. When the input source
2834:000 | DONE cmt | na 16 16 |        |             | ; is a string from EVALUATE, return false and perform no other action."
2835:000 | DONE cmt | na 16 16 |        |             | ; See https://www.complang.tuwien.ac.at/forth/gforth/Docs-html/The-Input-Stream.html
2836:000 | DONE cmt | na 16 16 |        |             | ; and Conklin & Rather p. 156
2837:000 | DONE lbl | na 16 16 | 00681c |             | xt_refill                            
2838:000 | DONE dir | na 16 16 |        |             |         .!a16                        
2839:000 | DONE dir | na 16 16 |        |             |         .!xy16                       
2840:000 | DONE cmt | na 16 16 |        |             |                 ; We handle buffer switches here so that regardless of input
2841:000 | DONE cmt | na 16 16 |        |             |                 ; source, we have access to the previous input. This is not in
2842:000 | DONE cmt | na 16 16 |        |             |                 ; the ANSI specification in any way.
2843:000 | DONE ins | na 16 16 | 00681c | a5 0c       |                 lda.d 00020c         
2844:000 | DONE ins | na 16 16 | 00681e | 49 00 01    |                 eor.# 0100           flip 07d00 / 07c00
2845:000 | DONE ins | na 16 16 | 006821 | 85 0c       |                 sta.d 00020c         
2846:000 | DONE wsp | na 16 16 |        |             |
2847:000 | DONE ins | na 16 16 | 006823 | a5 0e       |                 lda.d 00020e         current length is now previous length
2848:000 | DONE ins | na 16 16 | 006825 | 85 10       |                 sta.d 000210         
2849:000 | DONE wsp | na 16 16 |        |             |
2850:000 | DONE cmt | na 16 16 |        |             |                 ; Get input source from SOURCE-ID. We don't have blocks in this
2851:000 | DONE cmt | na 16 16 |        |             |                 ; version, or else we would have to check BLK first. This is an
2852:000 | DONE cmt | na 16 16 |        |             |                 ; optimized version of a subroutine jump to SOURCE-ID
2853:000 | DONE ins | na 16 16 | 006827 | a5 0a       |                 lda.d 00020a         
2854:000 | DONE ins | na 16 16 | 006829 | d0 14       |                 bne 00683f           
2855:000 | DONE wsp | na 16 16 |        |             |
2856:000 | DONE cmt | na 16 16 |        |             |                 ; SOURCE-ID of zero means we're getting stuff from the keyboard
2857:000 | DONE cmt | na 16 16 |        |             |                 ; with ACCEPT.
2858:000 | DONE ins | na 16 16 | 00682b | ca          |                 dex                  push Data Stack down twice
2859:000 | DONE ins | na 16 16 | 00682c | ca          |                 dex                  
2860:000 | DONE ins | na 16 16 | 00682d | 94 00       |                 sty.dx 00            
2861:000 | DONE wsp | na 16 16 |        |             |
2862:000 | DONE ins | na 16 16 | 00682f | a5 0c       |                 lda.d 00020c         address of current input buffer NOS
2863:000 | DONE ins | na 16 16 | 006831 | ca          |                 dex                  
2864:000 | DONE ins | na 16 16 | 006832 | ca          |                 dex                  
2865:000 | DONE ins | na 16 16 | 006833 | 95 00       |                 sta.dx 00            
2866:000 | DONE wsp | na 16 16 |        |             |
2867:000 | DONE ins | na 16 16 | 006835 | a0 ff 00    |                 ldy.# 0000ff         
2868:000 | DONE wsp | na 16 16 |        |             |
2869:000 | DONE ins | na 16 16 | 006838 | 20 30 63    |                 jsr 006330           ( addr n1 -- n2)
2870:000 | DONE wsp | na 16 16 |        |             |
2871:000 | DONE cmt | na 16 16 |        |             |                 ; ACCEPT returns the number of characters accepted, but we don't
2872:000 | DONE cmt | na 16 16 |        |             |                 ; need them. We just overwrite TOS this with the flag
2873:000 | DONE ins | na 16 16 | 00683b | a0 ff ff    |                 ldy.# 0ffff          
2874:000 | DONE wsp | na 16 16 |        |             |
2875:000 | DONE ins | na 16 16 | 00683e | 60          |                 rts                  
2876:000 | DONE wsp | na 16 16 |        |             |
2877:000 | DONE lbl | na 16 16 | 00683f |             | refill_src_not_kbd                   
2878:000 | DONE cmt | na 16 16 |        |             |                 ; If SOURCE-ID doesn't return a zero, it must be a string in
2879:000 | DONE cmt | na 16 16 |        |             |                 ; memory or a file (remember, no blocks in this version)
2880:000 | DONE ins | na 16 16 | 00683f | 1a          |                 inc.a                
2881:000 | DONE ins | na 16 16 | 006840 | d0 06       |                 bne 006848           
2882:000 | DONE wsp | na 16 16 |        |             |
2883:000 | DONE cmt | na 16 16 |        |             |                 ; Simply return FALSE flag as per specification
2884:000 | DONE ins | na 16 16 | 006842 | ca          |                 dex                  
2885:000 | DONE ins | na 16 16 | 006843 | ca          |                 dex                  
2886:000 | DONE ins | na 16 16 | 006844 | 94 00       |                 sty.dx 00            
2887:000 | DONE ins | na 16 16 | 006846 | a8          |                 tay                  
2888:000 | DONE wsp | na 16 16 |        |             |
2889:000 | DONE ins | na 16 16 | 006847 | 60          |                 rts                  
2890:000 | DONE wsp | na 16 16 |        |             |
2891:000 | DONE lbl | na 16 16 | 006848 |             | refill_source_is_not_string          
2892:000 | DONE cmt | na 16 16 |        |             |                 ; Since we don't have blocks, this must mean that we are trying
2893:000 | DONE cmt | na 16 16 |        |             |                 ; to read from a file. However, we don't have files yet, so we
2894:000 | DONE cmt | na 16 16 |        |             |                 ; report an error and jump to ABORT.
2895:000 | DONE ins | na 16 16 | 006848 | a9 16 77    |                 lda.# 007716         
2896:000 | DONE ins | na 16 16 | 00684b | 4c d9 70    |                 jmp 0070d9           
2897:000 | DONE wsp | na 16 16 |        |             |
2898:000 | DONE lbl | na 16 16 | 00684e |             | z_refill                             
2898:001 | DONE ins | na 16 16 | 00684e | 60          |                 rts                  dummy for compiling
2899:000 | DONE wsp | na 16 16 |        |             |
2900:000 | DONE wsp | na 16 16 |        |             |
2901:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
2902:000 | DONE cmt | na 16 16 |        |             | ; ROT ( a b c -- b c a ) X bytes / X cycles
2903:000 | DONE cmt | na 16 16 |        |             | ; Rotate the top three entries downwards (third entry becomes first)
2904:000 | DONE cmt | na 16 16 |        |             | ; Remember this with the "R" for "revolution": The bottom entry becomes the top.
2905:000 | DONE lbl | na 16 16 | 00684f |             | xt_rot                               
2906:000 | DONE dir | na 16 16 |        |             |         .!a16                        
2907:000 | DONE dir | na 16 16 |        |             |         .!xy16                       
2908:000 | DONE ins | na 16 16 | 00684f | b5 00       |                 lda.dx 00            save b
2909:000 | DONE ins | na 16 16 | 006851 | 94 00       |                 sty.dx 00            move c to NOS
2910:000 | DONE ins | na 16 16 | 006853 | b4 02       |                 ldy.dx 02            move a to TOS
2911:000 | DONE ins | na 16 16 | 006855 | 95 02       |                 sta.dx 02            save b as 3OS
2912:000 | DONE wsp | na 16 16 |        |             |
2913:000 | DONE lbl | na 16 16 | 006857 |             | z_rot                                
2913:001 | DONE ins | na 16 16 | 006857 | 60          |                 rts                  
2914:000 | DONE wsp | na 16 16 |        |             |
2915:000 | DONE wsp | na 16 16 |        |             |
2916:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
2917:000 | DONE cmt | na 16 16 |        |             | ; S" "SQUOTE" ( "string" -- addr u ) X bytes / X cycles
2918:000 | DONE cmt | na 16 16 |        |             | ; Store address and length of string given, returning ( addr u ). ANSI core
2919:000 | DONE cmt | na 16 16 |        |             | ; claims this is compile-only, but the file set expands it to be interpreted, so
2920:000 | DONE cmt | na 16 16 |        |             | ; it is a state-sensitive word, which are evil. This can also be realized as
2921:000 | DONE cmt | na 16 16 |        |             | ; : S" [CHAR] " PARSE POSTPONE SLITERAL ; IMMEDIATE  but it is used so much we
2922:000 | DONE cmt | na 16 16 |        |             | ; want it in code
2923:000 | DONE lbl | na 16 16 | 006858 |             | xt_squote                            
2924:000 | DONE cmt | na 16 16 |        |             |                 ; we use PARSE to find the end of the sting. If the string is
2925:000 | DONE cmt | na 16 16 |        |             |                 ; empty, we don't complain, following Gforth's behavior
2926:000 | DONE ins | na 16 16 | 006858 | ca          |                 dex                  
2927:000 | DONE ins | na 16 16 | 006859 | ca          |                 dex                  
2928:000 | DONE ins | na 16 16 | 00685a | 94 00       |                 sty.dx 00            
2929:000 | DONE wsp | na 16 16 |        |             |
2930:000 | DONE ins | na 16 16 | 00685c | a0 22 00    |                 ldy.# 0022           ASCII for " in hex
2931:000 | DONE ins | na 16 16 | 00685f | 20 93 67    |                 jsr 006793           Returns ( addr u ) of string
2932:000 | DONE wsp | na 16 16 |        |             |
2933:000 | DONE cmt | na 16 16 |        |             |                 ; What happens now depends on the state. If we are compiling, we
2934:000 | DONE cmt | na 16 16 |        |             |                 ; include a subroutine jump to SLITERAL to save the string. If
2935:000 | DONE cmt | na 16 16 |        |             |                 ; we are interpreting, we're done
2936:000 | DONE ins | na 16 16 | 006862 | a5 14       |                 lda.d 000214         
2937:000 | DONE ins | na 16 16 | 006864 | f0 03       |                 beq 006869           if we're interpreting, we're done
2938:000 | DONE wsp | na 16 16 |        |             |
2939:000 | DONE cmt | na 16 16 |        |             |                 ; We're compiling, so we need SLITERAL. We use it's RTS while
2940:000 | DONE cmt | na 16 16 |        |             |                 ; we're at it
2941:000 | DONE ins | na 16 16 | 006866 | 4c 88 68    |                 jmp 006888           JSR/RTS
2942:000 | DONE wsp | na 16 16 |        |             |
2943:000 | DONE lbl | na 16 16 | 006869 |             | z_squote                             
2943:001 | DONE ins | na 16 16 | 006869 | 60          |                 rts                  
2944:000 | DONE wsp | na 16 16 |        |             |
2945:000 | DONE wsp | na 16 16 |        |             |
2946:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
2947:000 | DONE cmt | na 16 16 |        |             | ; S>D ( n -- d ) 15 bytes / X cycles
2948:000 | DONE cmt | na 16 16 |        |             | ; Convert a single cell number to double cells, conserving the sign
2949:000 | DONE lbl | na 16 16 | 00686a |             | xt_stod                              
2950:000 | DONE ins | na 16 16 | 00686a | ca          |                 dex                  make room on stack
2951:000 | DONE ins | na 16 16 | 00686b | ca          |                 dex                  
2952:000 | DONE ins | na 16 16 | 00686c | 94 00       |                 sty.dx 00            
2953:000 | DONE wsp | na 16 16 |        |             |
2954:000 | DONE ins | na 16 16 | 00686e | 98          |                 tya                  force flag check
2955:000 | DONE ins | na 16 16 | 00686f | 10 05       |                 bpl 006876           
2956:000 | DONE wsp | na 16 16 |        |             |
2957:000 | DONE cmt | na 16 16 |        |             |                 ; negative number, extend sign
2958:000 | DONE ins | na 16 16 | 006871 | a0 ff ff    |                 ldy.# 0ffff          
2959:000 | DONE ins | na 16 16 | 006874 | 80 03       |                 bra 006879           
2960:000 | DONE wsp | na 16 16 |        |             |
2961:000 | DONE lbl | na 16 16 | 006876 |             | stod_pos                             
2962:000 | DONE cmt | na 16 16 |        |             |                 ; positive number
2963:000 | DONE ins | na 16 16 | 006876 | a0 00 00    |                 ldy.# 0000           fall through
2964:000 | DONE wsp | na 16 16 |        |             |
2965:000 | DONE lbl | na 16 16 | 006879 |             | z_stod                               
2965:001 | DONE ins | na 16 16 | 006879 | 60          |                 rts                  
2966:000 | DONE wsp | na 16 16 |        |             |
2967:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
2968:000 | DONE cmt | na 16 16 |        |             | ; SIGN ( n -- ) 13 bytes / X cycles
2969:000 | DONE cmt | na 16 16 |        |             | ; If TOS is negative, add a minus sign to the pictured output. Code based on
2970:000 | DONE cmt | na 16 16 |        |             | ; https://github.com/philburk/pforth/blob/master/fth/system.fth
2971:000 | DONE cmt | na 16 16 |        |             | ; Origin Forth code is  0< IF [CHAR] - HOLD THEN
2972:000 | DONE lbl | na 16 16 | 00687a |             | xt_sign                              
2973:000 | DONE dir | na 16 16 |        |             |         .!a16                        
2974:000 | DONE cmt | na 16 16 |        |             |                 ; See if number is negative
2975:000 | DONE ins | na 16 16 | 00687a | 98          |                 tya                  force flag check
2976:000 | DONE ins | na 16 16 | 00687b | 10 06       |                 bpl 006883           
2977:000 | DONE wsp | na 16 16 |        |             |
2978:000 | DONE cmt | na 16 16 |        |             |                 ; We're negative, overwrite number TOS
2979:000 | DONE ins | na 16 16 | 00687d | a0 2d 00    |                 ldy.# 002d           ASCII for '-'
2980:000 | DONE wsp | na 16 16 |        |             |
2981:000 | DONE ins | na 16 16 | 006880 | 4c a3 66    |                 jmp 0066a3           JSR/RTS, does not fall through
2982:000 | DONE wsp | na 16 16 |        |             |
2983:000 | DONE lbl | na 16 16 | 006883 |             | sign_plus                            
2984:000 | DONE ins | na 16 16 | 006883 | b4 00       |                 ldy.dx 00            get rid of number and leave
2985:000 | DONE ins | na 16 16 | 006885 | e8          |                 inx                  
2986:000 | DONE ins | na 16 16 | 006886 | e8          |                 inx                  
2987:000 | DONE wsp | na 16 16 |        |             |
2988:000 | DONE lbl | na 16 16 | 006887 |             | z_sign                               
2988:001 | DONE ins | na 16 16 | 006887 | 60          |                 rts                  
2989:000 | DONE wsp | na 16 16 |        |             |
2990:000 | DONE wsp | na 16 16 |        |             |
2991:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
2992:000 | DONE cmt | na 16 16 |        |             | ; SLITERAL ( addr u -- ) ( -- addr u ) X bytes / X cycles
2993:000 | DONE cmt | na 16 16 |        |             | ; At compile time, store string, at runtime, return address and length of string
2994:000 | DONE cmt | na 16 16 |        |             | ; on the Data Stack. Used for S" among other things. This routine uses tmp1,
2995:000 | DONE cmt | na 16 16 |        |             | ; tmp2
2996:000 | DONE lbl | na 16 16 | 006888 |             | xt_sliteral                          
2997:000 | DONE dir | na 16 16 |        |             |         .!a16                        
2998:000 | DONE cmt | na 16 16 |        |             |                 ; We can't assume that ( addr u ) of the current string is in
2999:000 | DONE cmt | na 16 16 |        |             |                 ; a stable area, so we first have to move them to safety. Since
3000:000 | DONE cmt | na 16 16 |        |             |                 ; CP points to where the interpreter expects to be able to
3001:000 | DONE cmt | na 16 16 |        |             |                 ; continue in the code, we have to jump over the string. We use
3002:000 | DONE cmt | na 16 16 |        |             |                 ; JMP instead of BRA so we can use longer strings
3003:000 | DONE ins | na 16 16 | 006888 | b5 00       |                 lda.dx 00            Address of string is NOS
3004:000 | DONE ins | na 16 16 | 00688a | 85 16       |                 sta.d 000216         
3005:000 | DONE ins | na 16 16 | 00688c | 84 18       |                 sty.d 000218         keep copy of string length
3006:000 | DONE wsp | na 16 16 |        |             |
3007:000 | DONE ins | na 16 16 | 00688e | e2 20       |                 sep 20               
3007:001 | DONE ctl | na  8 16 |        |             |         .!a8
3008:000 | DONE ins | na  8 16 | 006890 | a9 4c       |                 lda.# 04c            opcode for JMP
3009:000 | DONE ins | na  8 16 | 006892 | 92 00       |                 sta.di 000200        STA (CP)
3010:000 | DONE ins | na  8 16 | 006894 | c2 20       |                 rep 20               
3010:001 | DONE ctl | na 16 16 |        |             |         .!a16
3011:000 | DONE ins | na 16 16 | 006896 | e6 00       |                 inc.d 000200         
3012:000 | DONE wsp | na 16 16 |        |             |
3013:000 | DONE cmt | na 16 16 |        |             |                 ; Our jump target is CP + 2 (for the length of the jump
3014:000 | DONE cmt | na 16 16 |        |             |                 ; instruction itself ) + the length of the string
3015:000 | DONE ins | na 16 16 | 006898 | a5 18       |                 lda.d 000218         string length
3016:000 | DONE ins | na 16 16 | 00689a | 1a          |                 inc.a                
3017:000 | DONE ins | na 16 16 | 00689b | 1a          |                 inc.a                
3018:000 | DONE wsp | na 16 16 |        |             |
3019:000 | DONE ins | na 16 16 | 00689c | 18          |                 clc                  
3020:000 | DONE ins | na 16 16 | 00689d | 65 00       |                 adc.d 000200         current address
3021:000 | DONE ins | na 16 16 | 00689f | 92 00       |                 sta.di 000200        store jump target
3022:000 | DONE wsp | na 16 16 |        |             |
3023:000 | DONE cmt | na 16 16 |        |             |                 ; update CP to move past JMP instruction
3024:000 | DONE ins | na 16 16 | 0068a1 | e6 00       |                 inc.d 000200         
3025:000 | DONE ins | na 16 16 | 0068a3 | e6 00       |                 inc.d 000200         
3026:000 | DONE wsp | na 16 16 |        |             |
3027:000 | DONE cmt | na 16 16 |        |             |                 ; now we can safely copy the code
3028:000 | DONE ins | na 16 16 | 0068a5 | 88          |                 dey                  last offset is one less than length
3029:000 | DONE ins | na 16 16 | 0068a6 | e2 20       |                 sep 20               
3029:001 | DONE ctl | na  8 16 |        |             |         .!a8
3030:000 | DONE lbl | na  8 16 | 0068a8 |             | sl_loop                              
3031:000 | DONE ins | na  8 16 | 0068a8 | b1 16       |                 lda.diy 000216       LDA (TMP1),Y
3032:000 | DONE ins | na  8 16 | 0068aa | 91 00       |                 sta.diy 000200       STA (CP),Y
3033:000 | DONE ins | na  8 16 | 0068ac | 88          |                 dey                  
3034:000 | DONE ins | na  8 16 | 0068ad | 10 f9       |                 bpl 0068a8           
3035:000 | DONE wsp | na  8 16 |        |             |
3036:000 | DONE ins | na  8 16 | 0068af | c2 20       |                 rep 20               
3036:001 | DONE ctl | na 16 16 |        |             |         .!a16
3037:000 | DONE cmt | na 16 16 |        |             |                 ; keep old CP as new address of string
3038:000 | DONE ins | na 16 16 | 0068b1 | a5 00       |                 lda.d 000200         
3039:000 | DONE ins | na 16 16 | 0068b3 | 85 16       |                 sta.d 000216         overwrites original address
3040:000 | DONE wsp | na 16 16 |        |             |
3041:000 | DONE cmt | na 16 16 |        |             |                 ; update CP
3042:000 | DONE ins | na 16 16 | 0068b5 | 18          |                 clc                  
3043:000 | DONE ins | na 16 16 | 0068b6 | 65 18       |                 adc.d 000218         length of string
3044:000 | DONE ins | na 16 16 | 0068b8 | 85 00       |                 sta.d 000200         
3045:000 | DONE wsp | na 16 16 |        |             |
3046:000 | DONE cmt | na 16 16 |        |             |                 ; Compile a subroutine jump to the runtime of SLITERAL that
3047:000 | DONE cmt | na 16 16 |        |             |                 ; pushes the new ( addr u ) pair to the Data Stack. When we're
3048:000 | DONE cmt | na 16 16 |        |             |                 ; done, the code will look like this:
3049:000 | DONE cmt | na 16 16 |        |             |                 ;
3050:000 | DONE cmt | na 16 16 |        |             |                 ; xt -->    jmp a
3051:000 | DONE cmt | na 16 16 |        |             |                 ;           <string data bytes>
3052:000 | DONE cmt | na 16 16 |        |             |                 ;  a -->    jsr sliteral_rt
3053:000 | DONE cmt | na 16 16 |        |             |                 ;           <string address>
3054:000 | DONE cmt | na 16 16 |        |             |                 ;           <string length>
3055:000 | DONE cmt | na 16 16 |        |             |                 ; rts -->
3056:000 | DONE cmt | na 16 16 |        |             |                 ;
3057:000 | DONE cmt | na 16 16 |        |             |                 ; This means we'll have to adjust the return address for two
3058:000 | DONE cmt | na 16 16 |        |             |                 ; cells, not just one
3059:000 | DONE ins | na 16 16 | 0068ba | f4 d3 68    |                 phe.# 0068d3         
3060:000 | DONE ins | na 16 16 | 0068bd | 20 b8 70    |                 jsr 0070b8           
3061:000 | DONE wsp | na 16 16 |        |             |
3062:000 | DONE cmt | na 16 16 |        |             |                 ; We want to have the addr end up as NOS and the length as TOS,
3063:000 | DONE cmt | na 16 16 |        |             |                 ; so we store the address first
3064:000 | DONE ins | na 16 16 | 0068c0 | a5 16       |                 lda.d 000216         new address of string
3065:000 | DONE ins | na 16 16 | 0068c2 | 48          |                 pha                  
3066:000 | DONE ins | na 16 16 | 0068c3 | 20 b3 70    |                 jsr 0070b3           
3067:000 | DONE wsp | na 16 16 |        |             |
3068:000 | DONE ins | na 16 16 | 0068c6 | a5 18       |                 lda.d 000218         
3069:000 | DONE ins | na 16 16 | 0068c8 | 48          |                 pha                  
3070:000 | DONE ins | na 16 16 | 0068c9 | 20 b3 70    |                 jsr 0070b3           
3071:000 | DONE wsp | na 16 16 |        |             |
3072:000 | DONE cmt | na 16 16 |        |             |                 ; all done, clean up and leave
3073:000 | DONE ins | na 16 16 | 0068cc | b4 02       |                 ldy.dx 02            2DROP
3074:000 | DONE ins | na 16 16 | 0068ce | e8          |                 inx                  
3075:000 | DONE ins | na 16 16 | 0068cf | e8          |                 inx                  
3076:000 | DONE ins | na 16 16 | 0068d0 | e8          |                 inx                  
3077:000 | DONE ins | na 16 16 | 0068d1 | e8          |                 inx                  
3078:000 | DONE wsp | na 16 16 |        |             |
3079:000 | DONE lbl | na 16 16 | 0068d2 |             | z_sliteral                           
3079:001 | DONE ins | na 16 16 | 0068d2 | 60          |                 rts                  
3080:000 | DONE wsp | na 16 16 |        |             |
3081:000 | DONE lbl | na 16 16 | 0068d3 |             | sliteral_rt                          
3082:000 | DONE cmt | na 16 16 |        |             |                 ; Run time behaviour of SLITERAL: Push ( addr u ) of string to
3083:000 | DONE cmt | na 16 16 |        |             |                 ; the Data Stack. We arrive here with the return address as the
3084:000 | DONE cmt | na 16 16 |        |             |                 ; top of Return Stack, which points to the address of the string
3085:000 | DONE wsp | na 16 16 |        |             |
3086:000 | DONE cmt | na 16 16 |        |             |                 ; Make room on stack, which also frees Y for other use
3087:000 | DONE ins | na 16 16 | 0068d3 | ca          |                 dex                  
3088:000 | DONE ins | na 16 16 | 0068d4 | ca          |                 dex                  
3089:000 | DONE ins | na 16 16 | 0068d5 | ca          |                 dex                  
3090:000 | DONE ins | na 16 16 | 0068d6 | ca          |                 dex                  
3091:000 | DONE ins | na 16 16 | 0068d7 | 94 02       |                 sty.dx 02            
3092:000 | DONE wsp | na 16 16 |        |             |
3093:000 | DONE cmt | na 16 16 |        |             |                 ; Get the address of the string address off the stack and
3094:000 | DONE cmt | na 16 16 |        |             |                 ; increase by one because of the RTS mechanics
3095:000 | DONE ins | na 16 16 | 0068d9 | 7a          |                 ply                  
3096:000 | DONE ins | na 16 16 | 0068da | c8          |                 iny                  
3097:000 | DONE wsp | na 16 16 |        |             |
3098:000 | DONE ins | na 16 16 | 0068db | b9 00 00    |                 lda.y 0000           LDA $0000,Y
3099:000 | DONE ins | na 16 16 | 0068de | 95 00       |                 sta.dx 00            save string address as NOS
3100:000 | DONE ins | na 16 16 | 0068e0 | c8          |                 iny                  
3101:000 | DONE ins | na 16 16 | 0068e1 | c8          |                 iny                  
3102:000 | DONE ins | na 16 16 | 0068e2 | b9 00 00    |                 lda.y 0000           get length of string, will be TOS ...
3103:000 | DONE wsp | na 16 16 |        |             |
3104:000 | DONE ins | na 16 16 | 0068e5 | c8          |                 iny                  ... first, though, repair return jump
3105:000 | DONE ins | na 16 16 | 0068e6 | 5a          |                 phy                  
3106:000 | DONE wsp | na 16 16 |        |             |
3107:000 | DONE ins | na 16 16 | 0068e7 | a8          |                 tay                  TOS is now length of string
3108:000 | DONE wsp | na 16 16 |        |             |
3109:000 | DONE ins | na 16 16 | 0068e8 | 60          |                 rts                  
3110:000 | DONE wsp | na 16 16 |        |             |
3111:000 | DONE wsp | na 16 16 |        |             |
3112:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
3113:000 | DONE cmt | na 16 16 |        |             | ; SOURCE ( -- addr u ) 12 bytes / X cycles
3114:000 | DONE cmt | na 16 16 |        |             | ; Return the address and size of current input buffer. Replaces TIB and #TIB in
3115:000 | DONE cmt | na 16 16 |        |             | ; ANSI Forth
3116:000 | DONE wsp | na 16 16 |        |             |
3117:000 | DONE lbl | na 16 16 | 0068e9 |             | xt_source                            
3118:000 | DONE ins | na 16 16 | 0068e9 | ca          |                 dex                  make room on Data Stack
3119:000 | DONE ins | na 16 16 | 0068ea | ca          |                 dex                  
3120:000 | DONE ins | na 16 16 | 0068eb | ca          |                 dex                  
3121:000 | DONE ins | na 16 16 | 0068ec | ca          |                 dex                  
3122:000 | DONE ins | na 16 16 | 0068ed | 94 02       |                 sty.dx 02            
3123:000 | DONE wsp | na 16 16 |        |             |
3124:000 | DONE ins | na 16 16 | 0068ef | a5 0c       |                 lda.d 00020c         address of current input buffer as NOS
3125:000 | DONE ins | na 16 16 | 0068f1 | 95 00       |                 sta.dx 00            
3126:000 | DONE wsp | na 16 16 |        |             |
3127:000 | DONE ins | na 16 16 | 0068f3 | a4 0e       |                 ldy.d 00020e         length of current input buffer as TOS
3128:000 | DONE wsp | na 16 16 |        |             |
3129:000 | DONE lbl | na 16 16 | 0068f5 |             | z_source                             
3129:001 | DONE ins | na 16 16 | 0068f5 | 60          |                 rts                  
3130:000 | DONE wsp | na 16 16 |        |             |
3131:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
3132:000 | DONE cmt | na 16 16 |        |             | ; SOURCE-ID ( -- n ) 6 bytes / 13 cycles
3133:000 | DONE cmt | na 16 16 |        |             | ; Identify the input source unless it is a block (s. Conklin & Rather p. 156).
3134:000 | DONE cmt | na 16 16 |        |             | ; Since we don't have blocks (yet), this will give the input source: 0 is
3135:000 | DONE cmt | na 16 16 |        |             | ; keyboard, -1 (0ffff) is character string, and a text file gives the fileid.
3136:000 | DONE lbl | na 16 16 | 0068f6 |             | xt_source-id                         
3137:000 | DONE dir | na 16 16 |        |             |         .!xy16                       
3138:000 | DONE ins | na 16 16 | 0068f6 | ca          |                 dex                  
3139:000 | DONE ins | na 16 16 | 0068f7 | ca          |                 dex                  
3140:000 | DONE ins | na 16 16 | 0068f8 | 94 00       |                 sty.dx 00            
3141:000 | DONE ins | na 16 16 | 0068fa | a4 0a       |                 ldy.d 00020a         
3142:000 | DONE wsp | na 16 16 |        |             |
3143:000 | DONE lbl | na 16 16 | 0068fc |             | z_source-id                          
3143:001 | DONE ins | na 16 16 | 0068fc | 60          |                 rts                  
3144:000 | DONE wsp | na 16 16 |        |             |
3145:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
3146:000 | DONE cmt | na 16 16 |        |             | ; SPACE ( -- ) X bytes / X cycles
3147:000 | DONE cmt | na 16 16 |        |             | ; Print one ASCII space character
3148:000 | DONE cmt | na 16 16 |        |             | ; TODO change to call EMIT
3149:000 | DONE lbl | na 16 16 | 0068fd |             | xt_space                             
3150:000 | DONE ins | na 16 16 | 0068fd | a9 20 00    |                 lda.# AscSP          
3151:000 | DONE ins | na 16 16 | 006900 | 20 36 60    |                 jsr 006036           
3152:000 | DONE dir | na 16 16 |        |             |         .!a16                        
3153:000 | DONE wsp | na 16 16 |        |             |
3154:000 | DONE lbl | na 16 16 | 006903 |             | z_space                              
3154:001 | DONE ins | na 16 16 | 006903 | 60          |                 rts                  
3155:000 | DONE wsp | na 16 16 |        |             |
3156:000 | DONE wsp | na 16 16 |        |             |
3157:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
3158:000 | DONE cmt | na 16 16 |        |             | ; SPACES ( u -- ) 12 bytes / X cycles
3159:000 | DONE cmt | na 16 16 |        |             | ; Print u spaces. Calls SPACE, because this is probably interactive and humans
3160:000 | DONE cmt | na 16 16 |        |             | ; are slow enough we don't have to care about speed.
3161:000 | DONE lbl | na 16 16 | 006904 |             | xt_spaces                            
3162:000 | DONE dir | na 16 16 |        |             |         .!a16                        
3163:000 | DONE dir | na 16 16 |        |             |         .!xy16                       
3164:000 | DONE lbl | na 16 16 | 006904 |             | @                                    
3165:000 | DONE ins | na 16 16 | 006904 | 88          |                 dey                  this also handles case u=0
3166:000 | DONE ins | na 16 16 | 006905 | 30 05       |                 bmi 00690c           
3167:000 | DONE wsp | na 16 16 |        |             |
3168:000 | DONE ins | na 16 16 | 006907 | 20 fd 68    |                 jsr 0068fd           
3169:000 | DONE ins | na 16 16 | 00690a | 80 f8       |                 bra 006904           
3170:000 | DONE wsp | na 16 16 |        |             |
3171:000 | DONE lbl | na 16 16 | 00690c |             | spaces_done                          
3172:000 | DONE ins | na 16 16 | 00690c | b4 00       |                 ldy.dx 00            DROP
3173:000 | DONE ins | na 16 16 | 00690e | e8          |                 inx                  
3174:000 | DONE ins | na 16 16 | 00690f | e8          |                 inx                  
3175:000 | DONE wsp | na 16 16 |        |             |
3176:000 | DONE lbl | na 16 16 | 006910 |             | z_spaces                             
3176:001 | DONE ins | na 16 16 | 006910 | 60          |                 rts                  
3177:000 | DONE wsp | na 16 16 |        |             |
3178:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
3179:000 | DONE cmt | na 16 16 |        |             | ; STAR ( n n -- n ) 16*16 -> 16  X bytes / X cycles
3180:000 | DONE cmt | na 16 16 |        |             | ; Multiply two signed 16 bit numbers, returning a 16 bit result. This is nothing
3181:000 | DONE cmt | na 16 16 |        |             | ; more than UM* DROP
3182:000 | DONE lbl | na 16 16 | 006911 |             | xt_star                              
3183:000 | DONE ins | na 16 16 | 006911 | 20 74 69    |                 jsr 006974           
3184:000 | DONE ins | na 16 16 | 006914 | b4 00       |                 ldy.dx 00            DROP
3185:000 | DONE ins | na 16 16 | 006916 | e8          |                 inx                  
3186:000 | DONE ins | na 16 16 | 006917 | e8          |                 inx                  
3187:000 | DONE wsp | na 16 16 |        |             |
3188:000 | DONE lbl | na 16 16 | 006918 |             | z_star                               
3188:001 | DONE ins | na 16 16 | 006918 | 60          |                 rts                  
3189:000 | DONE wsp | na 16 16 |        |             |
3190:000 | DONE wsp | na 16 16 |        |             |
3191:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
3192:000 | DONE cmt | na 16 16 |        |             | ; STATE ( -- addr ) 7 bytes / 12 cycles
3193:000 | DONE cmt | na 16 16 |        |             | ; Return the address of a cell containing the compilation-state flag. STATE
3194:000 | DONE cmt | na 16 16 |        |             | ; is true when in compilation state, false otherwise. STATE should not be
3195:000 | DONE cmt | na 16 16 |        |             | ; changed directly by the user; see
3196:000 | DONE cmt | na 16 16 |        |             | ; http://forth.sourceforge.net/standard/dpans/dpans6.htm#6.1.2250
3197:000 | DONE lbl | na 16 16 | 006919 |             | xt_state                             
3198:000 | DONE dir | na 16 16 |        |             |         .!xy16                       
3199:000 | DONE ins | na 16 16 | 006919 | ca          |                 dex                  
3200:000 | DONE ins | na 16 16 | 00691a | ca          |                 dex                  
3201:000 | DONE ins | na 16 16 | 00691b | 94 00       |                 sty.dx 00            
3202:000 | DONE ins | na 16 16 | 00691d | a0 14 02    |                 ldy.# 000214         
3203:000 | DONE wsp | na 16 16 |        |             |
3204:000 | DONE lbl | na 16 16 | 006920 |             | z_state                              
3204:001 | DONE ins | na 16 16 | 006920 | 60          |                 rts                  
3205:000 | DONE wsp | na 16 16 |        |             |
3206:000 | DONE wsp | na 16 16 |        |             |
3207:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
3208:000 | DONE cmt | na 16 16 |        |             | ; SWAP ( n m -- m n ) 5 bytes / 12 cycles
3209:000 | DONE cmt | na 16 16 |        |             | ; Exchange TOS with NOS. We don't check if there are enough elements on the Data
3210:000 | DONE cmt | na 16 16 |        |             | ; Stack; underflow errors will go undetected and return garbage.
3211:000 | DONE lbl | na 16 16 | 006921 |             | xt_swap                              
3212:000 | DONE dir | na 16 16 |        |             |         .!a16                        
3213:000 | DONE dir | na 16 16 |        |             |         .!xy16                       
3214:000 | DONE ins | na 16 16 | 006921 | b5 00       |                 lda.dx 00            
3215:000 | DONE ins | na 16 16 | 006923 | 94 00       |                 sty.dx 00            
3216:000 | DONE ins | na 16 16 | 006925 | a8          |                 tay                  
3217:000 | DONE wsp | na 16 16 |        |             |
3218:000 | DONE lbl | na 16 16 | 006926 |             | z_swap                               
3218:001 | DONE ins | na 16 16 | 006926 | 60          |                 rts                  
3219:000 | DONE wsp | na 16 16 |        |             |
3220:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
3221:000 | DONE cmt | na 16 16 |        |             | ; TRUE ( -- f ) 7 bytes / 12 cycles
3222:000 | DONE cmt | na 16 16 |        |             | ; Pushes value $FFFF for Forth true on Data Stack
3223:000 | DONE lbl | na 16 16 | 006927 |             | xt_true                              
3224:000 | DONE dir | na 16 16 |        |             |         .!a16                        
3225:000 | DONE dir | na 16 16 |        |             |         .!xy16                       
3226:000 | DONE ins | na 16 16 | 006927 | ca          |                 dex                  
3227:000 | DONE ins | na 16 16 | 006928 | ca          |                 dex                  
3228:000 | DONE ins | na 16 16 | 006929 | 94 00       |                 sty.dx 00            
3229:000 | DONE ins | na 16 16 | 00692b | a0 ff ff    |                 ldy.# 0ffff          
3230:000 | DONE wsp | na 16 16 |        |             |
3231:000 | DONE lbl | na 16 16 | 00692e |             | z_true                               
3231:001 | DONE ins | na 16 16 | 00692e | 60          |                 rts                  
3232:000 | DONE wsp | na 16 16 |        |             |
3233:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
3234:000 | DONE cmt | na 16 16 |        |             | ; TUCK ( n m -- m n m ) 8 bytes / 19 cycles
3235:000 | DONE cmt | na 16 16 |        |             | ; Insert TOS below NOS. We do not check if there are enough elements on the Data
3236:000 | DONE cmt | na 16 16 |        |             | ; Stack, underflow will go undetected and return garbage.
3237:000 | DONE lbl | na 16 16 | 00692f |             | xt_tuck                              
3238:000 | DONE dir | na 16 16 |        |             |         .!a16                        
3239:000 | DONE dir | na 16 16 |        |             |         .!xy16                       
3240:000 | DONE ins | na 16 16 | 00692f | ca          |                 dex                  
3241:000 | DONE ins | na 16 16 | 006930 | ca          |                 dex                  
3242:000 | DONE ins | na 16 16 | 006931 | b5 02       |                 lda.dx 2             
3243:000 | DONE ins | na 16 16 | 006933 | 95 00       |                 sta.dx 0             
3244:000 | DONE ins | na 16 16 | 006935 | 94 02       |                 sty.dx 2             
3245:000 | DONE wsp | na 16 16 |        |             |
3246:000 | DONE lbl | na 16 16 | 006937 |             | z_tuck                               
3246:001 | DONE ins | na 16 16 | 006937 | 60          |                 rts                  
3247:000 | DONE wsp | na 16 16 |        |             |
3248:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
3249:000 | DONE cmt | na 16 16 |        |             | ; TYPE ( addr u -- ) 23+ bytes / X cycles
3250:000 | DONE cmt | na 16 16 |        |             | ; Print character string if u is not 0. We restrict all calls to put_chr and
3251:000 | DONE cmt | na 16 16 |        |             | ; get_chr to make porting easier.  We call put_chr here directly instead of
3252:000 | DONE cmt | na 16 16 |        |             | ; going through EMIT because EMIT will later have a PAUSE statement for
3253:000 | DONE cmt | na 16 16 |        |             | ; multitasking and we probably don't want to PAUSE after every character.
3254:000 | DONE cmt | na 16 16 |        |             | ; However, we'll make a final decision about that when multitasking is up and
3255:000 | DONE cmt | na 16 16 |        |             | ; running.
3256:000 | DONE lbl | na 16 16 | 006938 |             | xt_type                              
3257:000 | DONE dir | na 16 16 |        |             |         .!a16                        
3258:000 | DONE dir | na 16 16 |        |             |         .!xy16                       
3259:000 | DONE cmt | na 16 16 |        |             |                 ; just leave if u is zero (empty string)
3260:000 | DONE ins | na 16 16 | 006938 | 98          |                 tya                  force flag check of TOS
3261:000 | DONE ins | na 16 16 | 006939 | f0 17       |                 beq 006952           
3262:000 | DONE wsp | na 16 16 |        |             |
3263:000 | DONE ins | na 16 16 | 00693b | b5 00       |                 lda.dx 00            get address from NOS
3264:000 | DONE ins | na 16 16 | 00693d | 85 16       |                 sta.d 000216         
3265:000 | DONE ins | na 16 16 | 00693f | 84 18       |                 sty.d 000218         number of chars is TOS
3266:000 | DONE ins | na 16 16 | 006941 | a0 00 00    |                 ldy.# 0000           
3267:000 | DONE ins | na 16 16 | 006944 | e2 20       |                 sep 20               
3267:001 | DONE ctl | na  8 16 |        |             |         .!a8
3268:000 | DONE lbl | na  8 16 | 006946 |             | type_loop                            
3269:000 | DONE ins | na  8 16 | 006946 | b1 16       |                 lda.diy 000216       LDA (TMP1),Y
3270:000 | DONE ins | na  8 16 | 006948 | 20 36 60    |                 jsr 006036           
3271:000 | DONE ins | na  8 16 | 00694b | c8          |                 iny                  
3272:000 | DONE ins | na  8 16 | 00694c | c4 18       |                 cpy.d 000218         
3273:000 | DONE ins | na  8 16 | 00694e | d0 f6       |                 bne 006946           
3274:000 | DONE wsp | na  8 16 |        |             |
3275:000 | DONE ins | na  8 16 | 006950 | c2 20       |                 rep 20               
3275:001 | DONE ctl | na 16 16 |        |             |         .!a16
3276:000 | DONE lbl | na 16 16 | 006952 |             | type_done                            
3277:000 | DONE cmt | na 16 16 |        |             |                 ; clear stack
3278:000 | DONE ins | na 16 16 | 006952 | b4 02       |                 ldy.dx 02            
3279:000 | DONE ins | na 16 16 | 006954 | e8          |                 inx                  
3280:000 | DONE ins | na 16 16 | 006955 | e8          |                 inx                  
3281:000 | DONE ins | na 16 16 | 006956 | e8          |                 inx                  
3282:000 | DONE ins | na 16 16 | 006957 | e8          |                 inx                  
3283:000 | DONE wsp | na 16 16 |        |             |
3284:000 | DONE cmt | na 16 16 |        |             |                 ; TODO LATER add PAUSE here for multitasking
3285:000 | DONE wsp | na 16 16 |        |             |
3286:000 | DONE lbl | na 16 16 | 006958 |             | z_type                               
3286:001 | DONE ins | na 16 16 | 006958 | 60          |                 rts                  
3287:000 | DONE wsp | na 16 16 |        |             |
3288:000 | DONE wsp | na 16 16 |        |             |
3289:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
3290:000 | DONE cmt | na 16 16 |        |             | ; UDMOD ( ud u -- u ud ) 32/16 --> 32  X bytes / X cycles
3291:000 | DONE cmt | na 16 16 |        |             | ; Devide double-cell number by single-cell number, producing a double-cell
3292:000 | DONE cmt | na 16 16 |        |             | ; result and a single-cell remainder. Based on
3293:000 | DONE cmt | na 16 16 |        |             | ; Gforth  : UD/MOD  >R 0 R@ UM/MOD R> SWAP >R UM/MOD R> ;
3294:000 | DONE cmt | na 16 16 |        |             | ; pForth  : UD/MOD  >R 0 R@ UM/MOD ROT ROT R> UM/MOD ROT ;
3295:000 | DONE cmt | na 16 16 |        |             | ; This doesn't seem to be used anywhere else but for # (HASH) in coverting
3296:000 | DONE cmt | na 16 16 |        |             | ; pictured numerical output, though pForth claims it uses UM/MOD for that
3297:000 | DONE cmt | na 16 16 |        |             | ; At some point, we need to get back to UM/MOD because it's optimized
3298:000 | DONE lbl | na 16 16 | 006959 |             | xt_udmod                             
3299:000 | DONE ins | na 16 16 | 006959 | 20 25 61    |                 jsr 006125           
3300:000 | DONE ins | na 16 16 | 00695c | 20 8b 62    |                 jsr 00628b           
3301:000 | DONE ins | na 16 16 | 00695f | 20 0b 68    |                 jsr 00680b           
3302:000 | DONE ins | na 16 16 | 006962 | 20 d3 69    |                 jsr 0069d3           
3303:000 | DONE ins | na 16 16 | 006965 | 20 4f 68    |                 jsr 00684f           
3304:000 | DONE ins | na 16 16 | 006968 | 20 4f 68    |                 jsr 00684f           
3305:000 | DONE ins | na 16 16 | 00696b | 20 14 68    |                 jsr 006814           
3306:000 | DONE ins | na 16 16 | 00696e | 20 d3 69    |                 jsr 0069d3           
3307:000 | DONE ins | na 16 16 | 006971 | 4c 4f 68    |                 jmp 00684f           JSR/RTS
3308:000 | DONE lbl | na 16 16 | 006974 |             | z_udmod                              
3309:000 | DONE wsp | na 16 16 |        |             |
3310:000 | DONE wsp | na 16 16 |        |             |
3311:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
3312:000 | DONE cmt | na 16 16 |        |             | ; UM* "UMSTAR" ( u u -- ud ) 16*16 -> 32  X bytes / X cycles
3313:000 | DONE cmt | na 16 16 |        |             | ; Multiply two unsigned 16 bit numbers, producing a 32 bit result.This is based
3314:000 | DONE cmt | na 16 16 |        |             | ; on modified FIG Forth code by Dr. Jefyll, see
3315:000 | DONE cmt | na 16 16 |        |             | ; http://forum.6502.org/viewtopic.php?f=9&t=689 for a detailed discussion. We
3316:000 | DONE cmt | na 16 16 |        |             | ; use the system scratch pad (SYSPAD) for temp storage (N in the original code)
3317:000 | DONE cmt | na 16 16 |        |             | ; FIG Forth is in the public domain. Note old Forth versions such as FIG Forth
3318:000 | DONE cmt | na 16 16 |        |             | ; call this "U*"
3319:000 | DONE wsp | na 16 16 |        |             |
3320:000 | DONE cmt | na 16 16 |        |             | ; This is currently a brute-force loop based on the 8-bit variant in "6502
3321:000 | DONE cmt | na 16 16 |        |             | ; Assembly Language Programming" by Leventhal. Once everything is working,
3322:000 | DONE cmt | na 16 16 |        |             | ; consider switching to a table-supported version based on
3323:000 | DONE cmt | na 16 16 |        |             | ; http://codebase64.org/doku.php?id=base:seriously_fast_multiplication
3324:000 | DONE cmt | na 16 16 |        |             | ; http://codebase64.org/doku.php?id=magazines:chacking16#d_graphics_for_the_masseslib3d_and_cool_world
3325:000 | DONE cmt | na 16 16 |        |             | ; http://forum.6502.org/viewtopic.php?p=205#p205
3326:000 | DONE cmt | na 16 16 |        |             | ; http://forum.6502.org/viewtopic.php?f=9&t=689 We use tmp1, tmp2, tmp3 for
3327:000 | DONE cmt | na 16 16 |        |             | ; this, with the assumption that tmp3 immediately follows tmp2
3328:000 | DONE wsp | na 16 16 |        |             |
3329:000 | DONE lbl | na 16 16 | 006974 |             | xt_umstar                            
3330:000 | DONE dir | na 16 16 |        |             |         .!a16                        
3331:000 | DONE cmt | na 16 16 |        |             |                 ; SPECIAL CASE 1: multiplication by zero
3332:000 | DONE ins | na 16 16 | 006974 | 98          |                 tya                  
3333:000 | DONE ins | na 16 16 | 006975 | f0 3d       |                 beq 0069b4           
3334:000 | DONE ins | na 16 16 | 006977 | b5 00       |                 lda.dx 00            
3335:000 | DONE ins | na 16 16 | 006979 | f0 39       |                 beq 0069b4           
3336:000 | DONE wsp | na 16 16 |        |             |
3337:000 | DONE cmt | na 16 16 |        |             |                 ; SPECIAL CASE 2: multiplication by one
3338:000 | DONE cmt | na 16 16 |        |             |                 ; This is a different routine than 2* because that instruction
3339:000 | DONE cmt | na 16 16 |        |             |                 ; stays inside one cell, whereas UM* produces a Double Cell
3340:000 | DONE cmt | na 16 16 |        |             |                 ; answer
3341:000 | DONE ins | na 16 16 | 00697b | c0 01 00    |                 cpy.# 0001           non-distructively
3342:000 | DONE ins | na 16 16 | 00697e | f0 3b       |                 beq 0069bb           
3343:000 | DONE ins | na 16 16 | 006980 | b5 00       |                 lda.dx 00            
3344:000 | DONE ins | na 16 16 | 006982 | 3a          |                 dec.a                don't care about distruction
3345:000 | DONE ins | na 16 16 | 006983 | f0 39       |                 beq 0069be           
3346:000 | DONE wsp | na 16 16 |        |             |
3347:000 | DONE cmt | na 16 16 |        |             |                 ; SPECIAL CASE 3: multiplication by two
3348:000 | DONE ins | na 16 16 | 006985 | c0 02 00    |                 cpy.# 0002           
3349:000 | DONE ins | na 16 16 | 006988 | f0 3b       |                 beq 0069c5           
3350:000 | DONE wsp | na 16 16 |        |             |
3351:000 | DONE ins | na 16 16 | 00698a | b5 00       |                 lda.dx 00            
3352:000 | DONE ins | na 16 16 | 00698c | c9 02 00    |                 cmp.# 0002           
3353:000 | DONE ins | na 16 16 | 00698f | f0 38       |                 beq 0069c9           
3354:000 | DONE wsp | na 16 16 |        |             |
3355:000 | DONE cmt | na 16 16 |        |             |                 ; NO SPECIAL CASE ("THE HARD WAY")
3356:000 | DONE ins | na 16 16 | 006991 | 84 16       |                 sty.d 000216         TOS number  "40"
3357:000 | DONE ins | na 16 16 | 006993 | 85 18       |                 sta.d 000218         NOS number  "41"
3358:000 | DONE ins | na 16 16 | 006995 | a0 10 00    |                 ldy.# &16            loop counter
3359:000 | DONE wsp | na 16 16 |        |             |
3360:000 | DONE ins | na 16 16 | 006998 | a9 00 00    |                 lda.# 0000           
3361:000 | DONE ins | na 16 16 | 00699b | 85 1a       |                 sta.d 00021a         Most Significat Word (MSW) of result
3362:000 | DONE wsp | na 16 16 |        |             |
3363:000 | DONE lbl | na 16 16 | 00699d |             | umstar_loop                          
3364:000 | DONE ins | na 16 16 | 00699d | 0a          |                 asl.a                useless for first iteration
3365:000 | DONE ins | na 16 16 | 00699e | 26 1a       |                 rol.d 00021a         move carry into MSB, useless first iteration
3366:000 | DONE ins | na 16 16 | 0069a0 | 06 18       |                 asl.d 000218         move bit of NOS number into carry
3367:000 | DONE wsp | na 16 16 |        |             |
3368:000 | DONE cmt | na 16 16 |        |             |                 ; if there is no carry bit, we don't have to add and can go to
3369:000 | DONE cmt | na 16 16 |        |             |                 ; the next bit
3370:000 | DONE ins | na 16 16 | 0069a2 | 90 07       |                 bcc 0069ab           
3371:000 | DONE wsp | na 16 16 |        |             |
3372:000 | DONE ins | na 16 16 | 0069a4 | 18          |                 clc                  
3373:000 | DONE ins | na 16 16 | 0069a5 | 65 16       |                 adc.d 000216         we have a set bit, so add TOS
3374:000 | DONE wsp | na 16 16 |        |             |
3375:000 | DONE cmt | na 16 16 |        |             |                 ; if we have a carry, increase the MSW of result
3376:000 | DONE ins | na 16 16 | 0069a7 | 90 02       |                 bcc 0069ab           
3377:000 | DONE ins | na 16 16 | 0069a9 | e6 1a       |                 inc.d 00021a         
3378:000 | DONE wsp | na 16 16 |        |             |
3379:000 | DONE lbl | na 16 16 | 0069ab |             | umstar_counter                       
3380:000 | DONE ins | na 16 16 | 0069ab | 88          |                 dey                  
3381:000 | DONE ins | na 16 16 | 0069ac | d0 ef       |                 bne 00699d           
3382:000 | DONE wsp | na 16 16 |        |             |
3383:000 | DONE cmt | na 16 16 |        |             |                 ; We're all done, clean up and leave
3384:000 | DONE ins | na 16 16 | 0069ae | 95 00       |                 sta.dx 00            store lower cell of number in NOS
3385:000 | DONE ins | na 16 16 | 0069b0 | a4 1a       |                 ldy.d 00021a         store MSB in TOS as double cell
3386:000 | DONE wsp | na 16 16 |        |             |
3387:000 | DONE ins | na 16 16 | 0069b2 | 80 1e       |                 bra 0069d2           don't use RTS so we can natively compile
3388:000 | DONE wsp | na 16 16 |        |             |
3389:000 | DONE lbl | na 16 16 | 0069b4 |             | umstar_zero                          
3390:000 | DONE cmt | na 16 16 |        |             |                 ; one or both of the numbers is zero, so we got off light
3391:000 | DONE ins | na 16 16 | 0069b4 | a0 00 00    |                 ldy.# 0000           
3392:000 | DONE ins | na 16 16 | 0069b7 | 94 00       |                 sty.dx 00            
3393:000 | DONE ins | na 16 16 | 0069b9 | 80 17       |                 bra 0069d2           
3394:000 | DONE wsp | na 16 16 |        |             |
3395:000 | DONE lbl | na 16 16 | 0069bb |             | umstar_one_tos                       
3396:000 | DONE cmt | na 16 16 |        |             |                 ; TOS is one, life is easy
3397:000 | DONE ins | na 16 16 | 0069bb | 88          |                 dey                  NOS is LSW, TOS becomes zero
3398:000 | DONE ins | na 16 16 | 0069bc | 80 14       |                 bra 0069d2           
3399:000 | DONE lbl | na 16 16 | 0069be |             | umstar_one_nos                       
3400:000 | DONE cmt | na 16 16 |        |             |                 ; NOS is one, life is easy
3401:000 | DONE ins | na 16 16 | 0069be | 94 00       |                 sty.dx 00            
3402:000 | DONE ins | na 16 16 | 0069c0 | a0 00 00    |                 ldy.# 0000           
3403:000 | DONE ins | na 16 16 | 0069c3 | 80 0d       |                 bra 0069d2           
3404:000 | DONE wsp | na 16 16 |        |             |
3405:000 | DONE lbl | na 16 16 | 0069c5 |             | umstar_two_tos                       
3406:000 | DONE cmt | na 16 16 |        |             |                 ; TOS is two, life is easy
3407:000 | DONE ins | na 16 16 | 0069c5 | b5 00       |                 lda.dx 00            
3408:000 | DONE ins | na 16 16 | 0069c7 | 80 01       |                 bra 0069ca           
3409:000 | DONE lbl | na 16 16 | 0069c9 |             | umstar_two_nos                       
3410:000 | DONE cmt | na 16 16 |        |             |                 ; NOS is two, life is still easy
3411:000 | DONE ins | na 16 16 | 0069c9 | 98          |                 tya                  
3412:000 | DONE lbl | na 16 16 | 0069ca |             | umstar_two_common                    
3413:000 | DONE ins | na 16 16 | 0069ca | 0a          |                 asl.a                multiply by two, top bit in Carry Flag
3414:000 | DONE ins | na 16 16 | 0069cb | 95 00       |                 sta.dx 00            Double Cell LSW is NOS
3415:000 | DONE wsp | na 16 16 |        |             |
3416:000 | DONE ins | na 16 16 | 0069cd | a9 00 00    |                 lda.# 0000           
3417:000 | DONE ins | na 16 16 | 0069d0 | 2a          |                 rol.a                Rotate any Carry Flag into MSW
3418:000 | DONE ins | na 16 16 | 0069d1 | a8          |                 tay                  
3419:000 | DONE wsp | na 16 16 |        |             |
3420:000 | DONE lbl | na 16 16 | 0069d2 |             | z_umstar                             
3420:001 | DONE ins | na 16 16 | 0069d2 | 60          |                 rts                  
3421:000 | DONE wsp | na 16 16 |        |             |
3422:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
3423:000 | DONE cmt | na 16 16 |        |             | ; UM/MOD ( ud u -- u u ) 32/16 -> 16  X bytes / X cycles
3424:000 | DONE cmt | na 16 16 |        |             | ; Divide double cell number by single cell number, returning the quotient as TOS
3425:000 | DONE cmt | na 16 16 |        |             | ; and any remainder as NOS. All numbers are unsigned. This is the basic division
3426:000 | DONE cmt | na 16 16 |        |             | ; operation all others use. Based on Garth Wilson's code at
3427:000 | DONE cmt | na 16 16 |        |             | ; http://6502.org/source/integers/ummodfix/ummodfix.htm We use "scratch" for N
3428:000 | DONE cmt | na 16 16 |        |             | ; and include a separate detection of division by zero to force an error code
3429:000 | DONE lbl | na 16 16 | 0069d3 |             | xt_ummod                             
3430:000 | DONE dir | na 16 16 |        |             |         .!a16                        
3431:000 | DONE dir | na 16 16 |        |             |         .!xy16                       
3432:000 | DONE cmt | na 16 16 |        |             |                 ; Move the inputs to the scratchpad to avoid having to fool
3433:000 | DONE cmt | na 16 16 |        |             |                 ; around with the Data Stack and for speed. Garth's original
3434:000 | DONE cmt | na 16 16 |        |             |                 ; code uses the MVN instruction for this, but our TOS is Y which
3435:000 | DONE cmt | na 16 16 |        |             |                 ; makes that harder. When we're done, the setup will look likes
3436:000 | DONE cmt | na 16 16 |        |             |                 ; this: (S is start of the scratchpad in Direct Page)
3437:000 | DONE cmt | na 16 16 |        |             |                 ;
3438:000 | DONE cmt | na 16 16 |        |             |                 ;     +-----+-----+-----+-----+-----+-----+-----+-----+
3439:000 | DONE cmt | na 16 16 |        |             |                 ;     |  DIVISOR  |        DIVIDEND       | TEMP AREA |
3440:000 | DONE cmt | na 16 16 |        |             |                 ;     |           |  hi cell     lo cell  | carry bit |
3441:000 | DONE cmt | na 16 16 |        |             |                 ;     |  S    S+1 | S+2   S+3 | S+4   S+5 | S+6   S+7 |
3442:000 | DONE cmt | na 16 16 |        |             |                 ;     +-----+-----+-----+-----+-----+-----+-----+-----+
3443:000 | DONE cmt | na 16 16 |        |             |                 ;
3444:000 | DONE cmt | na 16 16 |        |             |                 ; The divisor is TOS (in Y), high cell of the dividend in NOS,
3445:000 | DONE cmt | na 16 16 |        |             |                 ; and low cell in 3OS
3446:000 | DONE wsp | na 16 16 |        |             |
3447:000 | DONE cmt | na 16 16 |        |             |                 ; Catch division by zero. We could include this in the code as
3448:000 | DONE cmt | na 16 16 |        |             |                 ; part of overflow detection (see below), but we want an error
3449:000 | DONE cmt | na 16 16 |        |             |                 ; to appear like in Gforth
3450:000 | DONE ins | na 16 16 | 0069d3 | 98          |                 tya                  force flag test
3451:000 | DONE ins | na 16 16 | 0069d4 | d0 06       |                 bne 0069dc           
3452:000 | DONE wsp | na 16 16 |        |             |
3453:000 | DONE ins | na 16 16 | 0069d6 | a9 8e 76    |                 lda.# 00768e         
3454:000 | DONE ins | na 16 16 | 0069d9 | 4c d9 70    |                 jmp 0070d9           
3455:000 | DONE wsp | na 16 16 |        |             |
3456:000 | DONE lbl | na 16 16 | 0069dc |             | ummod_notzero                        
3457:000 | DONE ins | na 16 16 | 0069dc | 84 20       |                 sty.d 000220         Y is now free
3458:000 | DONE ins | na 16 16 | 0069de | b5 00       |                 lda.dx 00            high cell of dividend
3459:000 | DONE ins | na 16 16 | 0069e0 | 85 22       |                 sta.d 000222         
3460:000 | DONE ins | na 16 16 | 0069e2 | b5 02       |                 lda.dx 02            low cell of dividend
3461:000 | DONE ins | na 16 16 | 0069e4 | 85 24       |                 sta.d 000224         
3462:000 | DONE wsp | na 16 16 |        |             |
3463:000 | DONE cmt | na 16 16 |        |             |                 ; Drop one entry off of the stack and save the new Data Stack
3464:000 | DONE cmt | na 16 16 |        |             |                 ; Pointer, freeing X for index duty
3465:000 | DONE ins | na 16 16 | 0069e6 | e8          |                 inx                  
3466:000 | DONE ins | na 16 16 | 0069e7 | e8          |                 inx                  
3467:000 | DONE ins | na 16 16 | 0069e8 | 86 04       |                 stx.d 000204         
3468:000 | DONE wsp | na 16 16 |        |             |
3469:000 | DONE cmt | na 16 16 |        |             |                 ; Detect overflow. Subtract divisor from high cell of dividend.
3470:000 | DONE cmt | na 16 16 |        |             |                 ; If carry flag remains set, divisor was not large enough to
3471:000 | DONE cmt | na 16 16 |        |             |                 ; avoid overflow. This also would detect division by zero, but
3472:000 | DONE cmt | na 16 16 |        |             |                 ; we did that already in a separate step
3473:000 | DONE ins | na 16 16 | 0069ea | 38          |                 sec                  
3474:000 | DONE ins | na 16 16 | 0069eb | a5 22       |                 lda.d 000222         
3475:000 | DONE ins | na 16 16 | 0069ed | e5 20       |                 sbc.d 000220         
3476:000 | DONE ins | na 16 16 | 0069ef | b0 21       |                 bcs 006a12           
3477:000 | DONE wsp | na 16 16 |        |             |
3478:000 | DONE cmt | na 16 16 |        |             |                 ; If there is no overflow, the carry flag remains clear for
3479:000 | DONE cmt | na 16 16 |        |             |                 ; first roll. We loop 16 times, but since we shift the dividend
3480:000 | DONE cmt | na 16 16 |        |             |                 ; over at the same time as shifting the answer in, the operation
3481:000 | DONE cmt | na 16 16 |        |             |                 ; must start and (!) finish with a shift of the low cell of the
3482:000 | DONE cmt | na 16 16 |        |             |                 ; dividend (which ends up holding the quotient), so we start
3483:000 | DONE cmt | na 16 16 |        |             |                 ; with 17 times in X. Y is used for temporary storage
3484:000 | DONE ins | na 16 16 | 0069f1 | a2 11 00    |                 ldx.# &17            
3485:000 | DONE wsp | na 16 16 |        |             |
3486:000 | DONE lbl | na 16 16 | 0069f4 |             | ummod_shift                          
3487:000 | DONE cmt | na 16 16 |        |             |                 ; Move low cell of dividend left one bit, also shifting answer
3488:000 | DONE cmt | na 16 16 |        |             |                 ; in. The first rotation brings in a zero, which later gets
3489:000 | DONE cmt | na 16 16 |        |             |                 ; pushed off the other end in the last rotation
3490:000 | DONE ins | na 16 16 | 0069f4 | 26 24       |                 rol.d 000224         
3491:000 | DONE wsp | na 16 16 |        |             |
3492:000 | DONE cmt | na 16 16 |        |             |                 ; loop control
3493:000 | DONE ins | na 16 16 | 0069f6 | ca          |                 dex                  
3494:000 | DONE ins | na 16 16 | 0069f7 | f0 22       |                 beq 006a1b           
3495:000 | DONE wsp | na 16 16 |        |             |
3496:000 | DONE cmt | na 16 16 |        |             |                 ; Shift high cell of divident left one bit, also shifting the
3497:000 | DONE cmt | na 16 16 |        |             |                 ; next bit in from high bit of low cell
3498:000 | DONE ins | na 16 16 | 0069f9 | 26 22       |                 rol.d 000222         
3499:000 | DONE ins | na 16 16 | 0069fb | a9 00 00    |                 lda.# 0000           
3500:000 | DONE ins | na 16 16 | 0069fe | 2a          |                 rol.a                
3501:000 | DONE ins | na 16 16 | 0069ff | 85 26       |                 sta.d 000226         store old high bit of dividend
3502:000 | DONE wsp | na 16 16 |        |             |
3503:000 | DONE cmt | na 16 16 |        |             |                 ; See if divisor will fit into high 17 bits of dividend by
3504:000 | DONE cmt | na 16 16 |        |             |                 ; subtracting and then looking at the carry flag. If carry was
3505:000 | DONE cmt | na 16 16 |        |             |                 ; cleared, divisor did not fit
3506:000 | DONE ins | na 16 16 | 006a01 | 38          |                 sec                  
3507:000 | DONE ins | na 16 16 | 006a02 | a5 22       |                 lda.d 000222         
3508:000 | DONE ins | na 16 16 | 006a04 | e5 20       |                 sbc.d 000220         
3509:000 | DONE ins | na 16 16 | 006a06 | a8          |                 tay                  save difference in Y until we know if we need it
3510:000 | DONE wsp | na 16 16 |        |             |
3511:000 | DONE cmt | na 16 16 |        |             |                 ; Bit 0 of S+6 serves as the 17th bit. Complete the subtraction
3512:000 | DONE cmt | na 16 16 |        |             |                 ; by doing the 17th bit before determining if the divisor fits
3513:000 | DONE cmt | na 16 16 |        |             |                 ; into the high 17 bits of the dividend. If so, the carry flag
3514:000 | DONE cmt | na 16 16 |        |             |                 ; remains set
3515:000 | DONE ins | na 16 16 | 006a07 | a5 26       |                 lda.d 000226         
3516:000 | DONE ins | na 16 16 | 006a09 | e9 00 00    |                 sbc.# 0000           
3517:000 | DONE ins | na 16 16 | 006a0c | 90 e6       |                 bcc 0069f4           
3518:000 | DONE wsp | na 16 16 |        |             |
3519:000 | DONE cmt | na 16 16 |        |             |                 ; Since the divisor fit into high 17 bits, update dividend high
3520:000 | DONE cmt | na 16 16 |        |             |                 ; cell to what it would be after subtraction
3521:000 | DONE ins | na 16 16 | 006a0e | 84 22       |                 sty.d 000222         
3522:000 | DONE ins | na 16 16 | 006a10 | 80 e2       |                 bra 0069f4           
3523:000 | DONE wsp | na 16 16 |        |             |
3524:000 | DONE lbl | na 16 16 | 006a12 |             | ummod_overflow                       
3525:000 | DONE cmt | na 16 16 |        |             |                 ; If an overflow condition occurs, put 0ffff
3526:000 | DONE cmt | na 16 16 |        |             |                 ; in both the quotient and remainder
3527:000 | DONE ins | na 16 16 | 006a12 | a6 04       |                 ldx.d 000204         restore DSP
3528:000 | DONE ins | na 16 16 | 006a14 | a0 ff ff    |                 ldy.# 0ffff          
3529:000 | DONE ins | na 16 16 | 006a17 | 94 00       |                 sty.dx 00            
3530:000 | DONE ins | na 16 16 | 006a19 | 80 08       |                 bra 006a23           go to end to enable native coding
3531:000 | DONE wsp | na 16 16 |        |             |
3532:000 | DONE lbl | na 16 16 | 006a1b |             | ummod_complete                       
3533:000 | DONE ins | na 16 16 | 006a1b | a6 04       |                 ldx.d 000204         restore DSP
3534:000 | DONE ins | na 16 16 | 006a1d | a4 24       |                 ldy.d 000224         quotient is TOS
3535:000 | DONE ins | na 16 16 | 006a1f | a5 22       |                 lda.d 000222         remainder is NOS
3536:000 | DONE ins | na 16 16 | 006a21 | 95 00       |                 sta.dx 00            
3537:000 | DONE wsp | na 16 16 |        |             |
3538:000 | DONE lbl | na 16 16 | 006a23 |             | z_ummod                              
3538:001 | DONE ins | na 16 16 | 006a23 | 60          |                 rts                  
3539:000 | DONE wsp | na 16 16 |        |             |
3540:000 | DONE wsp | na 16 16 |        |             |
3541:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
3542:000 | DONE cmt | na 16 16 |        |             | ; UNUSED ( -- u ) 11 bytes / X cycles
3543:000 | DONE cmt | na 16 16 |        |             | ; Return amount of memory available for the Dictionary. Does not include
3544:000 | DONE cmt | na 16 16 |        |             | ; memory for buffers, stacks etc. Does not exclude the space used by PAD
3545:000 | DONE cmt | na 16 16 |        |             | ; TODO rewrite for multitasking
3546:000 | DONE lbl | na 16 16 | 006a24 |             | xt_unused                            
3547:000 | DONE dir | na 16 16 |        |             |         .!a16                        
3548:000 | DONE ins | na 16 16 | 006a24 | a9 ff 7b    |                 lda.# 007bff         
3549:000 | DONE ins | na 16 16 | 006a27 | 38          |                 sec                  
3550:000 | DONE ins | na 16 16 | 006a28 | e5 00       |                 sbc.d 000200         current compile pointer
3551:000 | DONE wsp | na 16 16 |        |             |
3552:000 | DONE ins | na 16 16 | 006a2a | ca          |                 dex                  
3553:000 | DONE ins | na 16 16 | 006a2b | ca          |                 dex                  
3554:000 | DONE ins | na 16 16 | 006a2c | 94 00       |                 sty.dx 00            
3555:000 | DONE wsp | na 16 16 |        |             |
3556:000 | DONE ins | na 16 16 | 006a2e | a8          |                 tay                  
3557:000 | DONE wsp | na 16 16 |        |             |
3558:000 | DONE lbl | na 16 16 | 006a2f |             | z_unused                             
3558:001 | DONE ins | na 16 16 | 006a2f | 60          |                 rts                  
3559:000 | DONE wsp | na 16 16 |        |             |
3560:000 | DONE wsp | na 16 16 |        |             |
3561:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
3562:000 | DONE cmt | na 16 16 |        |             | ; VARIABLE ( "name" -- ) X bytes / X cycles
3563:000 | DONE cmt | na 16 16 |        |             | ; Define a word that returns the address for a variable. There are various Forth
3564:000 | DONE cmt | na 16 16 |        |             | ; definitions for this word, such as  CREATE 1 CELLS ALLOT  or CREATE 0 ,
3565:000 | DONE cmt | na 16 16 |        |             | ; We use a variant of the second one so the variable is initialized to zero
3566:000 | DONE lbl | na 16 16 | 006a30 |             | xt_variable                          
3567:000 | DONE cmt | na 16 16 |        |             |                 ; We let CREATE do the heavy lifting
3568:000 | DONE ins | na 16 16 | 006a30 | 20 fc 64    |                 jsr 0064fc           
3569:000 | DONE wsp | na 16 16 |        |             |
3570:000 | DONE cmt | na 16 16 |        |             |                 ; There is no "stz.di cp" so we have to do this the
3571:000 | DONE cmt | na 16 16 |        |             |                 ; old way, which is still faster than a subroutine jump to ZERO
3572:000 | DONE ins | na 16 16 | 006a33 | a9 00 00    |                 lda.# 0000           
3573:000 | DONE ins | na 16 16 | 006a36 | 92 00       |                 sta.di 000200        STA (CP)
3574:000 | DONE wsp | na 16 16 |        |             |
3575:000 | DONE ins | na 16 16 | 006a38 | e6 00       |                 inc.d 000200         direct COMMA
3576:000 | DONE ins | na 16 16 | 006a3a | e6 00       |                 inc.d 000200         
3577:000 | DONE wsp | na 16 16 |        |             |
3578:000 | DONE lbl | na 16 16 | 006a3c |             | z_variable                           
3578:001 | DONE ins | na 16 16 | 006a3c | 60          |                 rts                  
3579:000 | DONE wsp | na 16 16 |        |             |
3580:000 | DONE wsp | na 16 16 |        |             |
3581:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
3582:000 | DONE cmt | na 16 16 |        |             | ; WORDS ( -- ) X bytes / X cycles
3583:000 | DONE cmt | na 16 16 |        |             | ; Print list of all Forth words available. This only really makes sense in an
3584:000 | DONE cmt | na 16 16 |        |             | ; interactive setting, so we don't have to worry about speed.
3585:000 | DONE lbl | na 16 16 | 006a3d |             | xt_words                             
3586:000 | DONE dir | na 16 16 |        |             |         .!a16                        
3587:000 | DONE dir | na 16 16 |        |             |         .!xy16                       
3588:000 | DONE ins | na 16 16 | 006a3d | 20 f5 64    |                 jsr 0064f5           start on next line, this is a style choice
3589:000 | DONE wsp | na 16 16 |        |             |
3590:000 | DONE ins | na 16 16 | 006a40 | a5 02       |                 lda.d 000202         nt of first entry in Dictionary (last added)
3591:000 | DONE ins | na 16 16 | 006a42 | 48          |                 pha                  
3592:000 | DONE wsp | na 16 16 |        |             |
3593:000 | DONE ins | na 16 16 | 006a43 | ca          |                 dex                  create room on TOS
3594:000 | DONE ins | na 16 16 | 006a44 | ca          |                 dex                  
3595:000 | DONE ins | na 16 16 | 006a45 | 94 00       |                 sty.dx 00            
3596:000 | DONE wsp | na 16 16 |        |             |
3597:000 | DONE lbl | na 16 16 | 006a47 |             | words_loop                           
3598:000 | DONE ins | na 16 16 | 006a47 | a8          |                 tay                  ( nt )
3599:000 | DONE ins | na 16 16 | 006a48 | 20 1f 67    |                 jsr 00671f           ( nt -- addr u )
3600:000 | DONE ins | na 16 16 | 006a4b | 20 38 69    |                 jsr 006938           ( addr u -- )
3601:000 | DONE ins | na 16 16 | 006a4e | 20 fd 68    |                 jsr 0068fd           
3602:000 | DONE wsp | na 16 16 |        |             |
3603:000 | DONE ins | na 16 16 | 006a51 | 68          |                 pla                  get back first entry in Dictionary
3604:000 | DONE wsp | na 16 16 |        |             |
3605:000 | DONE cmt | na 16 16 |        |             |                 ; The next nt is two bytes below the nt of the current one in
3606:000 | DONE cmt | na 16 16 |        |             |                 ; the Dictionary header
3607:000 | DONE ins | na 16 16 | 006a52 | 1a          |                 inc.a                
3608:000 | DONE ins | na 16 16 | 006a53 | 1a          |                 inc.a                
3609:000 | DONE wsp | na 16 16 |        |             |
3610:000 | DONE ins | na 16 16 | 006a54 | ca          |                 dex                  
3611:000 | DONE ins | na 16 16 | 006a55 | ca          |                 dex                  
3612:000 | DONE ins | na 16 16 | 006a56 | 94 00       |                 sty.dx 00            
3613:000 | DONE wsp | na 16 16 |        |             |
3614:000 | DONE ins | na 16 16 | 006a58 | a8          |                 tay                  
3615:000 | DONE ins | na 16 16 | 006a59 | b9 00 00    |                 lda.y 0000           LDA $0000,Y
3616:000 | DONE ins | na 16 16 | 006a5c | 48          |                 pha                  
3617:000 | DONE ins | na 16 16 | 006a5d | d0 e8       |                 bne 006a47           zero entry signals end of Dictionary
3618:000 | DONE wsp | na 16 16 |        |             |
3619:000 | DONE cmt | na 16 16 |        |             |                 ; all done, clean up
3620:000 | DONE ins | na 16 16 | 006a5f | 68          |                 pla                  balance MPU stack, value discarded
3621:000 | DONE wsp | na 16 16 |        |             |
3622:000 | DONE ins | na 16 16 | 006a60 | b4 00       |                 ldy.dx 00            
3623:000 | DONE ins | na 16 16 | 006a62 | e8          |                 inx                  
3624:000 | DONE ins | na 16 16 | 006a63 | e8          |                 inx                  
3625:000 | DONE wsp | na 16 16 |        |             |
3626:000 | DONE lbl | na 16 16 | 006a64 |             | z_words                              
3626:001 | DONE ins | na 16 16 | 006a64 | 60          |                 rts                  
3627:000 | DONE wsp | na 16 16 |        |             |
3628:000 | DONE wsp | na 16 16 |        |             |
3629:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
3630:000 | DONE cmt | na 16 16 |        |             | ; XOR ( n m -- n ) 6 bytes / X cycles
3631:000 | DONE cmt | na 16 16 |        |             | ; Logical XOR
3632:000 | DONE lbl | na 16 16 | 006a65 |             | xt_xor                               
3633:000 | DONE ins | na 16 16 | 006a65 | 98          |                 tya                  
3634:000 | DONE ins | na 16 16 | 006a66 | 55 00       |                 eor.dx 00            
3635:000 | DONE ins | na 16 16 | 006a68 | a8          |                 tay                  
3636:000 | DONE wsp | na 16 16 |        |             |
3637:000 | DONE ins | na 16 16 | 006a69 | e8          |                 inx                  
3638:000 | DONE ins | na 16 16 | 006a6a | e8          |                 inx                  
3639:000 | DONE wsp | na 16 16 |        |             |
3640:000 | DONE lbl | na 16 16 | 006a6b |             | z_xor                                
3640:001 | DONE ins | na 16 16 | 006a6b | 60          |                 rts                  
3641:000 | DONE wsp | na 16 16 |        |             |
3642:000 | DONE wsp | na 16 16 |        |             |
3643:000 | DONE cmt | na 16 16 |        |             | ; ===================================================================
3644:000 | DONE cmt | na 16 16 |        |             | ; MIDDLE INCLUDES
3645:000 | DONE wsp | na 16 16 |        |             |
3646:000 | DONE cmt | na 16 16 |        |             | ; Dictionary Headers for Liara Forth for the W65C265SXB
3646:001 | DONE cmt | na 16 16 |        |             | ; Scot W. Stevenson <scot.stevenson@gmail.com>
3646:002 | DONE cmt | na 16 16 |        |             | ; First version: 05. Dec 2016
3646:003 | DONE cmt | na 16 16 |        |             | ; This version: 19. Feb 2017
3646:004 | DONE wsp | na 16 16 |        |             |
3646:005 | DONE cmt | na 16 16 |        |             | ; Dictionary headers are kept separately from the code, which allows various
3646:006 | DONE cmt | na 16 16 |        |             | ; tricks in the code. We roughly follow the Gforth terminology: The Execution
3646:007 | DONE cmt | na 16 16 |        |             | ; Token (xt) is the address of the first byte of a word's code that can be,
3646:008 | DONE cmt | na 16 16 |        |             | ; well, executed; the Name Token (nt) is a pointer to the beginning of the
3646:009 | DONE cmt | na 16 16 |        |             | ; word's header in the Dictionary. There, the link to the next word in the
3646:010 | DONE cmt | na 16 16 |        |             | ; Dictionary is always one cell down from the current word's own nt. In the code
3646:011 | DONE cmt | na 16 16 |        |             | ; itself, we use "nt_<WORD>" ("header") for the nt and "xt_<WORD>" ("A" as the
3646:012 | DONE cmt | na 16 16 |        |             | ; beginning) for the xt.
3646:013 | DONE cmt | na 16 16 |        |             | ;
3646:014 | DONE cmt | na 16 16 |        |             | ; This gives us the following header structure:
3646:015 | DONE cmt | na 16 16 |        |             | ;
3646:016 | DONE cmt | na 16 16 |        |             | ;              8 bit     8 bit
3646:017 | DONE cmt | na 16 16 |        |             | ;               LSB       MSB
3646:018 | DONE cmt | na 16 16 |        |             | ; nt_word ->  +--------+--------+
3646:019 | DONE cmt | na 16 16 |        |             | ;             | Length | Status |
3646:020 | DONE cmt | na 16 16 |        |             | ;          +2 +--------+--------+
3646:021 | DONE cmt | na 16 16 |        |             | ;             | Next Header     | -> nt_next_word
3646:022 | DONE cmt | na 16 16 |        |             | ;          +4 +-----------------+
3646:023 | DONE cmt | na 16 16 |        |             | ;             | Start of Code   | -> xt_word
3646:024 | DONE cmt | na 16 16 |        |             | ;          +6 +-----------------+
3646:025 | DONE cmt | na 16 16 |        |             | ;             | End of Code     | -> z_word
3646:026 | DONE cmt | na 16 16 |        |             | ;          +8 +--------+--------+
3646:027 | DONE cmt | na 16 16 |        |             | ;             | Name   |        |
3646:028 | DONE cmt | na 16 16 |        |             | ;             +--------+--------+
3646:029 | DONE cmt | na 16 16 |        |             | ;             |        |        |
3646:030 | DONE cmt | na 16 16 |        |             | ;             +--------+--------+
3646:031 | DONE cmt | na 16 16 |        |             | ;             |        |  ...   | (name string does not end with a zero)
3646:032 | DONE cmt | na 16 16 |        |             | ;          +n +--------+--------+
3646:033 | DONE cmt | na 16 16 |        |             | ;
3646:034 | DONE cmt | na 16 16 |        |             | ; The Status Byte is created by adding the flags defined in
3646:035 | DONE cmt | na 16 16 |        |             | ; definitions.tasm:
3646:036 | DONE cmt | na 16 16 |        |             | ;
3646:037 | DONE cmt | na 16 16 |        |             | ;       CO - Compile Only
3646:038 | DONE cmt | na 16 16 |        |             | ;       IM - Immediate Word
3646:039 | DONE cmt | na 16 16 |        |             | ;       NC - Native Compile allowed (inline compile)
3646:040 | DONE wsp | na 16 16 |        |             |
3646:041 | DONE cmt | na 16 16 |        |             | ; Note there are currently five bits unused. The last word (top word in code)
3646:042 | DONE cmt | na 16 16 |        |             | ; is always BYE. It is marked as the last word by its value of 0000 in its Next
3646:043 | DONE cmt | na 16 16 |        |             | ; Header field. The words are sorted with the more common ones first (further
3646:044 | DONE cmt | na 16 16 |        |             | ; down in code) so they are found earlier.  Anythiing to do with output comes
3646:045 | DONE cmt | na 16 16 |        |             | ; later (further up) because things will always be slow if there is a human
3646:046 | DONE cmt | na 16 16 |        |             | ; involved.
3646:047 | DONE wsp | na 16 16 |        |             |
3646:048 | DONE lbl | na 16 16 | 006a6c |             | nt_bye                               
3646:049 | DONE dir | na 16 16 | 006a6c | (1 bytes)   |         .byte 03                     length of word string
3646:049 | DONE dir | na 16 16 |        |             |                 03                       --  .
3646:050 | DONE dir | na 16 16 | 006a6d | (1 bytes)   |         .byte { NC }                 status byte
3646:050 | DONE dir | na 16 16 |        |             |                 01                       --  .
3646:051 | DONE dir | na 16 16 | 006a6e | (2 bytes)   |         .word 0000                   next word in dictionary, 0000 signals end
3646:051 | DONE dir | na 16 16 |        |             |                 00 00                    --  . .
3646:052 | DONE dir | na 16 16 | 006a70 | (2 bytes)   |         .word 00642e                 start of code, the xt of this word
3646:052 | DONE dir | na 16 16 |        |             |                 2e 64                    --  . d
3646:053 | DONE dir | na 16 16 | 006a72 | (2 bytes)   |         .word 006431                 end of code (points to RTS)
3646:053 | DONE dir | na 16 16 |        |             |                 31 64                    --  1 d
3646:054 | DONE dir | na 16 16 | 006a74 | (3 bytes)   |         .byte 62, 79, 65             word name, always lower case
3646:054 | DONE dir | na 16 16 |        |             |                 62 79 65                 --  b y e
3646:055 | DONE wsp | na 16 16 |        |             |
3646:056 | DONE lbl | na 16 16 | 006a77 |             | nt_cold                              
3646:057 | DONE dir | na 16 16 | 006a77 | (2 bytes)   |         .byte 4, 00                  
3646:057 | DONE dir | na 16 16 |        |             |                 04 00                    --  . .
3646:058 | DONE dir | na 16 16 | 006a79 | (6 bytes)   |         .word nt_bye, xt_cold, 0060de 
3646:058 | DONE dir | na 16 16 |        |             |                 6c 6a 63 60 de 60        --  l j c ` . `
3646:059 | DONE dir | na 16 16 | 006a7f | (4 bytes)   |         .byte 63, 6f, 6c, 64         
3646:059 | DONE dir | na 16 16 |        |             |                 63 6f 6c 64              --  c o l d
3646:060 | DONE wsp | na 16 16 |        |             |
3646:061 | DONE lbl | na 16 16 | 006a83 |             | nt_words                             
3646:062 | DONE dir | na 16 16 | 006a83 | (2 bytes)   |         .byte 5, { NC }              
3646:062 | DONE dir | na 16 16 |        |             |                 05 01                    --  . .
3646:063 | DONE dir | na 16 16 | 006a85 | (6 bytes)   |         .word nt_cold, xt_words, 006a64 
3646:063 | DONE dir | na 16 16 |        |             |                 77 6a 3d 6a 64 6a        --  w j = j d j
3646:064 | DONE dir | na 16 16 | 006a8b | (5 bytes)   |         .byte 77, 6f, 72, 64, 73     
3646:064 | DONE dir | na 16 16 |        |             |                 77 6f 72 64 73           --  w o r d s
3646:065 | DONE wsp | na 16 16 |        |             |
3646:066 | DONE lbl | na 16 16 | 006a90 |             | nt_dump                              
3646:067 | DONE dir | na 16 16 | 006a90 | (2 bytes)   |         .byte 4, { NC }              
3646:067 | DONE dir | na 16 16 |        |             |                 04 01                    --  . .
3646:068 | DONE dir | na 16 16 | 006a92 | (6 bytes)   |         .word nt_words, xt_dump, 0065ed 
3646:068 | DONE dir | na 16 16 |        |             |                 83 6a c7 65 ed 65        --  . j . e . e
3646:069 | DONE dir | na 16 16 | 006a98 | (4 bytes)   |         .byte 64, 75, 6d, 70         
3646:069 | DONE dir | na 16 16 |        |             |                 64 75 6d 70              --  d u m p
3646:070 | DONE wsp | na 16 16 |        |             |
3646:071 | DONE lbl | na 16 16 | 006a9c |             | nt_bell                              
3646:072 | DONE dir | na 16 16 | 006a9c | (2 bytes)   |         .byte 4, { NC }              
3646:072 | DONE dir | na 16 16 |        |             |                 04 01                    --  . .
3646:073 | DONE dir | na 16 16 | 006a9e | (6 bytes)   |         .word nt_dump, xt_bell, 006408 
3646:073 | DONE dir | na 16 16 |        |             |                 90 6a 02 64 08 64        --  . j . d . d
3646:074 | DONE dir | na 16 16 | 006aa4 | (4 bytes)   |         .byte 62, 65, 6c, 6c         
3646:074 | DONE dir | na 16 16 |        |             |                 62 65 6c 6c              --  b e l l
3646:075 | DONE wsp | na 16 16 |        |             |
3646:076 | DONE lbl | na 16 16 | 006aa8 |             | nt_decimal                           
3646:077 | DONE dir | na 16 16 | 006aa8 | (2 bytes)   |         .byte 7, { NC }              
3646:077 | DONE dir | na 16 16 |        |             |                 07 01                    --  . .
3646:078 | DONE dir | na 16 16 | 006aaa | (6 bytes)   |         .word nt_bell, xt_decimal, 00657b 
3646:078 | DONE dir | na 16 16 |        |             |                 9c 6a 76 65 7b 65        --  . j v e { e
3646:079 | DONE dir | na 16 16 | 006ab0 | (7 bytes)   |         .byte 64, 65, 63, 69, 6d, 61, 6c 
3646:079 | DONE dir | na 16 16 |        |             |                 64 65 63 69 6d 61 6c     --  d e c i m a l
3646:080 | DONE wsp | na 16 16 |        |             |
3646:081 | DONE lbl | na 16 16 | 006ab7 |             | nt_hex                               
3646:082 | DONE dir | na 16 16 | 006ab7 | (2 bytes)   |         .byte 3, { NC }              
3646:082 | DONE dir | na 16 16 |        |             |                 03 01                    --  . .
3646:083 | DONE dir | na 16 16 | 006ab9 | (6 bytes)   |         .word nt_decimal, xt_hex, 0066a2 
3646:083 | DONE dir | na 16 16 |        |             |                 a8 6a 9d 66 a2 66        --  . j . f . f
3646:084 | DONE dir | na 16 16 | 006abf | (3 bytes)   |         .byte 68, 65, 78             
3646:084 | DONE dir | na 16 16 |        |             |                 68 65 78                 --  h e x
3646:085 | DONE wsp | na 16 16 |        |             |
3646:086 | DONE lbl | na 16 16 | 006ac2 |             | nt_unused                            
3646:087 | DONE dir | na 16 16 | 006ac2 | (2 bytes)   |         .byte 6, { NC }              
3646:087 | DONE dir | na 16 16 |        |             |                 06 01                    --  . .
3646:088 | DONE dir | na 16 16 | 006ac4 | (6 bytes)   |         .word nt_hex, xt_unused, 006a2f 
3646:088 | DONE dir | na 16 16 |        |             |                 b7 6a 24 6a 2f 6a        --  . j $ j / j
3646:089 | DONE dir | na 16 16 | 006aca | (6 bytes)   |         .byte 75, 6e, 75, 73, 65, 64 
3646:089 | DONE dir | na 16 16 |        |             |                 75 6e 75 73 65 64        --  u n u s e d
3646:090 | DONE wsp | na 16 16 |        |             |
3646:091 | DONE lbl | na 16 16 | 006ad0 |             | nt_page                              
3646:092 | DONE dir | na 16 16 | 006ad0 | (2 bytes)   |         .byte 4, { NC }              
3646:092 | DONE dir | na 16 16 |        |             |                 04 01                    --  . .
3646:093 | DONE dir | na 16 16 | 006ad2 | (6 bytes)   |         .word nt_unused, xt_page, 006760 
3646:093 | DONE dir | na 16 16 |        |             |                 c2 6a 54 67 60 67        --  . j T g ` g
3646:094 | DONE dir | na 16 16 | 006ad8 | (4 bytes)   |         .byte 70, 61, 67, 65         
3646:094 | DONE dir | na 16 16 |        |             |                 70 61 67 65              --  p a g e
3646:095 | DONE wsp | na 16 16 |        |             |
3646:096 | DONE lbl | na 16 16 | 006adc |             | nt_dabs                              
3646:097 | DONE dir | na 16 16 | 006adc | (2 bytes)   |         .byte 4, { NC }              
3646:097 | DONE dir | na 16 16 |        |             |                 04 01                    --  . .
3646:098 | DONE dir | na 16 16 | 006ade | (6 bytes)   |         .word nt_page, xt_dabs, 006575 
3646:098 | DONE dir | na 16 16 |        |             |                 d0 6a 6f 65 75 65        --  . j o e u e
3646:099 | DONE dir | na 16 16 | 006ae4 | (4 bytes)   |         .byte 64, 61, 62, 73         
3646:099 | DONE dir | na 16 16 |        |             |                 64 61 62 73              --  d a b s
3646:100 | DONE wsp | na 16 16 |        |             |
3646:101 | DONE lbl | na 16 16 | 006ae8 |             | nt_dnegate                           
3646:102 | DONE dir | na 16 16 | 006ae8 | (2 bytes)   |         .byte 7, { NC }              
3646:102 | DONE dir | na 16 16 |        |             |                 07 01                    --  . .
3646:103 | DONE dir | na 16 16 | 006aea | (6 bytes)   |         .word nt_dabs, xt_dnegate, 00659e 
3646:103 | DONE dir | na 16 16 |        |             |                 dc 6a 8b 65 9e 65        --  . j . e . e
3646:104 | DONE dir | na 16 16 | 006af0 | (7 bytes)   |         .byte 64, 6e, 65, 67, 61, 74, 65 
3646:104 | DONE dir | na 16 16 |        |             |                 64 6e 65 67 61 74 65     --  d n e g a t e
3646:105 | DONE wsp | na 16 16 |        |             |
3646:106 | DONE lbl | na 16 16 | 006af7 |             | nt_stod                              
3646:107 | DONE dir | na 16 16 | 006af7 | (2 bytes)   |         .byte 3, { NC }              
3646:107 | DONE dir | na 16 16 |        |             |                 03 01                    --  . .
3646:108 | DONE dir | na 16 16 | 006af9 | (6 bytes)   |         .word nt_dnegate, xt_stod, 006879 
3646:108 | DONE dir | na 16 16 |        |             |                 e8 6a 6a 68 79 68        --  . j j h y h
3646:109 | DONE dir | na 16 16 | 006aff | (3 bytes)   |         .byte 73, 3e, 64             
3646:109 | DONE dir | na 16 16 |        |             |                 73 3e 64                 --  s > d
3646:110 | DONE wsp | na 16 16 |        |             |
3646:111 | DONE lbl | na 16 16 | 006b02 |             | nt_udmod                             
3646:112 | DONE dir | na 16 16 | 006b02 | (2 bytes)   |         .byte 6, { NC }              
3646:112 | DONE dir | na 16 16 |        |             |                 06 01                    --  . .
3646:113 | DONE dir | na 16 16 | 006b04 | (6 bytes)   |         .word nt_stod, xt_udmod, 006974 
3646:113 | DONE dir | na 16 16 |        |             |                 f7 6a 59 69 74 69        --  . j Y i t i
3646:114 | DONE dir | na 16 16 | 006b0a | (6 bytes)   |         .byte 75, 64, 2f, 6d, 6f, 64 
3646:114 | DONE dir | na 16 16 |        |             |                 75 64 2f 6d 6f 64        --  u d / m o d
3646:115 | DONE wsp | na 16 16 |        |             |
3646:116 | DONE lbl | na 16 16 | 006b10 |             | nt_ummod                             
3646:117 | DONE dir | na 16 16 | 006b10 | (2 bytes)   |         .byte 6, { NC }              
3646:117 | DONE dir | na 16 16 |        |             |                 06 01                    --  . .
3646:118 | DONE dir | na 16 16 | 006b12 | (6 bytes)   |         .word nt_udmod, xt_ummod, 006a23 
3646:118 | DONE dir | na 16 16 |        |             |                 02 6b d3 69 23 6a        --  . k . i # j
3646:119 | DONE dir | na 16 16 | 006b18 | (6 bytes)   |         .byte 75, 6d, 2f, 6d, 6f, 64 
3646:119 | DONE dir | na 16 16 |        |             |                 75 6d 2f 6d 6f 64        --  u m / m o d
3646:120 | DONE wsp | na 16 16 |        |             |
3646:121 | DONE lbl | na 16 16 | 006b1e |             | nt_star                              
3646:122 | DONE dir | na 16 16 | 006b1e | (2 bytes)   |         .byte 1, { NC }              
3646:122 | DONE dir | na 16 16 |        |             |                 01 01                    --  . .
3646:123 | DONE dir | na 16 16 | 006b20 | (6 bytes)   |         .word nt_ummod, xt_star, 006918 
3646:123 | DONE dir | na 16 16 |        |             |                 10 6b 11 69 18 69        --  . k . i . i
3646:124 | DONE dir | na 16 16 | 006b26 | (1 bytes)   |         .byte 2a                     
3646:124 | DONE dir | na 16 16 |        |             |                 2a                       --  *
3646:125 | DONE wsp | na 16 16 |        |             |
3646:126 | DONE lbl | na 16 16 | 006b27 |             | nt_mstar                             
3646:127 | DONE dir | na 16 16 | 006b27 | (2 bytes)   |         .byte 2, { NC }              
3646:127 | DONE dir | na 16 16 |        |             |                 02 01                    --  . .
3646:128 | DONE dir | na 16 16 | 006b29 | (6 bytes)   |         .word nt_star, xt_mstar, 0066ef 
3646:128 | DONE dir | na 16 16 |        |             |                 1e 6b d0 66 ef 66        --  . k . f . f
3646:129 | DONE dir | na 16 16 | 006b2f | (2 bytes)   |         .byte 6d, 2a                 
3646:129 | DONE dir | na 16 16 |        |             |                 6d 2a                    --  m *
3646:130 | DONE wsp | na 16 16 |        |             |
3646:131 | DONE lbl | na 16 16 | 006b31 |             | nt_umstar                            
3646:132 | DONE dir | na 16 16 | 006b31 | (2 bytes)   |         .byte 3, { NC }              
3646:132 | DONE dir | na 16 16 |        |             |                 03 01                    --  . .
3646:133 | DONE dir | na 16 16 | 006b33 | (6 bytes)   |         .word nt_mstar, xt_umstar, 0069d2 
3646:133 | DONE dir | na 16 16 |        |             |                 27 6b 74 69 d2 69        --  ' k t i . i
3646:134 | DONE dir | na 16 16 | 006b39 | (3 bytes)   |         .byte 75, 6d, 2a             
3646:134 | DONE dir | na 16 16 |        |             |                 75 6d 2a                 --  u m *
3646:135 | DONE wsp | na 16 16 |        |             |
3646:136 | DONE lbl | na 16 16 | 006b3c |             | nt_count                             
3646:137 | DONE dir | na 16 16 | 006b3c | (2 bytes)   |         .byte 5, { NC }              
3646:137 | DONE dir | na 16 16 |        |             |                 05 01                    --  . .
3646:138 | DONE dir | na 16 16 | 006b3e | (6 bytes)   |         .word nt_umstar, xt_count, 0064f4 
3646:138 | DONE dir | na 16 16 |        |             |                 31 6b e6 64 f4 64        --  1 k . d . d
3646:139 | DONE dir | na 16 16 | 006b44 | (5 bytes)   |         .byte 63, 6f, 75, 6e, 74     
3646:139 | DONE dir | na 16 16 |        |             |                 63 6f 75 6e 74           --  c o u n t
3646:140 | DONE wsp | na 16 16 |        |             |
3646:141 | DONE lbl | na 16 16 | 006b49 |             | nt_abort                             
3646:142 | DONE dir | na 16 16 | 006b49 | (2 bytes)   |         .byte 5, 00                  TODO check flags - NC possible?
3646:142 | DONE dir | na 16 16 |        |             |                 05 00                    --  . .
3646:143 | DONE dir | na 16 16 | 006b4b | (6 bytes)   |         .word nt_count, xt_abort, 0060de 
3646:143 | DONE dir | na 16 16 |        |             |                 3c 6b 97 60 de 60        --  < k . ` . `
3646:144 | DONE dir | na 16 16 | 006b51 | (5 bytes)   |         .byte 61, 62, 6f, 72, 74     
3646:144 | DONE dir | na 16 16 |        |             |                 61 62 6f 72 74           --  a b o r t
3646:145 | DONE wsp | na 16 16 |        |             |
3646:146 | DONE lbl | na 16 16 | 006b56 |             | nt_parse                             
3646:147 | DONE dir | na 16 16 | 006b56 | (2 bytes)   |         .byte 5, 00                  
3646:147 | DONE dir | na 16 16 |        |             |                 05 00                    --  . .
3646:148 | DONE dir | na 16 16 | 006b58 | (6 bytes)   |         .word nt_abort, xt_parse, 0067c5 
3646:148 | DONE dir | na 16 16 |        |             |                 49 6b 93 67 c5 67        --  I k . g . g
3646:149 | DONE dir | na 16 16 | 006b5e | (5 bytes)   |         .byte 70, 61, 72, 73, 65     
3646:149 | DONE dir | na 16 16 |        |             |                 70 61 72 73 65           --  p a r s e
3646:150 | DONE wsp | na 16 16 |        |             |
3646:151 | DONE lbl | na 16 16 | 006b63 |             | nt_quit                              
3646:152 | DONE dir | na 16 16 | 006b63 | (2 bytes)   |         .byte 4, 00                  
3646:152 | DONE dir | na 16 16 |        |             |                 04 00                    --  . .
3646:153 | DONE dir | na 16 16 | 006b65 | (6 bytes)   |         .word nt_parse, xt_quit, 0060de 
3646:153 | DONE dir | na 16 16 |        |             |                 56 6b 9f 60 de 60        --  V k . ` . `
3646:154 | DONE dir | na 16 16 | 006b6b | (4 bytes)   |         .byte 71, 75, 69, 74         
3646:154 | DONE dir | na 16 16 |        |             |                 71 75 69 74              --  q u i t
3646:155 | DONE wsp | na 16 16 |        |             |
3646:156 | DONE lbl | na 16 16 | 006b6f |             | nt_question                          
3646:157 | DONE dir | na 16 16 | 006b6f | (2 bytes)   |         .byte 1, { NC }              
3646:157 | DONE dir | na 16 16 |        |             |                 01 01                    --  . .
3646:158 | DONE dir | na 16 16 | 006b71 | (6 bytes)   |         .word nt_quit, xt_question, 006236 
3646:158 | DONE dir | na 16 16 |        |             |                 63 6b 30 62 36 62        --  c k 0 b 6 b
3646:159 | DONE dir | na 16 16 | 006b77 | (1 bytes)   |         .byte 3f                     
3646:159 | DONE dir | na 16 16 |        |             |                 3f                       --  ?
3646:160 | DONE wsp | na 16 16 |        |             |
3646:161 | DONE lbl | na 16 16 | 006b78 |             | nt_name-int                          
3646:162 | DONE dir | na 16 16 | 006b78 | (2 bytes)   |         .byte 8, { NC }              
3646:162 | DONE dir | na 16 16 |        |             |                 08 01                    --  . .
3646:163 | DONE dir | na 16 16 | 006b7a | (6 bytes)   |         .word nt_question, xt_name-int, 00671e 
3646:163 | DONE dir | na 16 16 |        |             |                 6f 6b 16 67 1e 67        --  o k . g . g
3646:164 | DONE dir | na 16 16 | 006b80 | (8 bytes)   |         .byte 6e, 61, 6d, 65, 3e, 69, 6e, 74 
3646:164 | DONE dir | na 16 16 |        |             |                 6e 61 6d 65 3e 69 6e 74  --  n a m e > i n t
3646:164 | DONE dir | na 16 16 |        |             |                                          -- 
3646:165 | DONE wsp | na 16 16 |        |             |
3646:166 | DONE lbl | na 16 16 | 006b88 |             | nt_cr                                
3646:167 | DONE dir | na 16 16 | 006b88 | (2 bytes)   |         .byte 2, { NC }              
3646:167 | DONE dir | na 16 16 |        |             |                 02 01                    --  . .
3646:168 | DONE dir | na 16 16 | 006b8a | (6 bytes)   |         .word nt_name-int, xt_cr, 0064fb 
3646:168 | DONE dir | na 16 16 |        |             |                 78 6b f5 64 fb 64        --  x k . d . d
3646:169 | DONE dir | na 16 16 | 006b90 | (2 bytes)   |         .byte 63, 72                 
3646:169 | DONE dir | na 16 16 |        |             |                 63 72                    --  c r
3646:170 | DONE wsp | na 16 16 |        |             |
3646:171 | DONE lbl | na 16 16 | 006b92 |             | nt_numbermore                        
3646:172 | DONE dir | na 16 16 | 006b92 | (2 bytes)   |         .byte 2, { NC }              "quoth the rumben"
3646:172 | DONE dir | na 16 16 |        |             |                 02 01                    --  . .
3646:173 | DONE dir | na 16 16 | 006b94 | (6 bytes)   |         .word nt_cr, xt_numbermore, 006226 
3646:173 | DONE dir | na 16 16 |        |             |                 88 6b 18 62 26 62        --  . k . b & b
3646:174 | DONE dir | na 16 16 | 006b9a | (2 bytes)   |         .byte 23, 3e                 
3646:174 | DONE dir | na 16 16 |        |             |                 23 3e                    --  # >
3646:175 | DONE wsp | na 16 16 |        |             |
3646:176 | DONE lbl | na 16 16 | 006b9c |             | nt_hold                              
3646:177 | DONE dir | na 16 16 | 006b9c | (2 bytes)   |         .byte 4, { NC }              
3646:177 | DONE dir | na 16 16 |        |             |                 04 01                    --  . .
3646:178 | DONE dir | na 16 16 | 006b9e | (6 bytes)   |         .word nt_numbermore, xt_hold, 0066b0 
3646:178 | DONE dir | na 16 16 |        |             |                 92 6b a3 66 b0 66        --  . k . f . f
3646:179 | DONE dir | na 16 16 | 006ba4 | (4 bytes)   |         .byte 68, 6f, 6c, 64         
3646:179 | DONE dir | na 16 16 |        |             |                 68 6f 6c 64              --  h o l d
3646:180 | DONE wsp | na 16 16 |        |             |
3646:181 | DONE lbl | na 16 16 | 006ba8 |             | nt_hashs                             
3646:182 | DONE dir | na 16 16 | 006ba8 | (2 bytes)   |         .byte 2, { NC }              also known as "number-s"
3646:182 | DONE dir | na 16 16 |        |             |                 02 01                    --  . .
3646:183 | DONE dir | na 16 16 | 006baa | (6 bytes)   |         .word nt_hold, xt_hashs, 00622f 
3646:183 | DONE dir | na 16 16 |        |             |                 9c 6b 27 62 2f 62        --  . k ' b / b
3646:184 | DONE dir | na 16 16 | 006bb0 | (2 bytes)   |         .byte 23, 73                 
3646:184 | DONE dir | na 16 16 |        |             |                 23 73                    --  # s
3646:185 | DONE wsp | na 16 16 |        |             |
3646:186 | DONE lbl | na 16 16 | 006bb2 |             | nt_sign                              
3646:187 | DONE dir | na 16 16 | 006bb2 | (2 bytes)   |         .byte 4, { NC }              
3646:187 | DONE dir | na 16 16 |        |             |                 04 01                    --  . .
3646:188 | DONE dir | na 16 16 | 006bb4 | (6 bytes)   |         .word nt_hashs, xt_sign, 006887 
3646:188 | DONE dir | na 16 16 |        |             |                 a8 6b 7a 68 87 68        --  . k z h . h
3646:189 | DONE dir | na 16 16 | 006bba | (4 bytes)   |         .byte 73, 69, 67, 6e         
3646:189 | DONE dir | na 16 16 |        |             |                 73 69 67 6e              --  s i g n
3646:190 | DONE wsp | na 16 16 |        |             |
3646:191 | DONE lbl | na 16 16 | 006bbe |             | nt_hash                              
3646:192 | DONE dir | na 16 16 | 006bbe | (2 bytes)   |         .byte 1, { NC }              also known as "number-sign"
3646:192 | DONE dir | na 16 16 |        |             |                 01 01                    --  . .
3646:193 | DONE dir | na 16 16 | 006bc0 | (6 bytes)   |         .word nt_sign, xt_hash, 006217 
3646:193 | DONE dir | na 16 16 |        |             |                 b2 6b fd 61 17 62        --  . k . a . b
3646:194 | DONE dir | na 16 16 | 006bc6 | (1 bytes)   |         .byte 23                     
3646:194 | DONE dir | na 16 16 |        |             |                 23                       --  #
3646:195 | DONE wsp | na 16 16 |        |             |
3646:196 | DONE lbl | na 16 16 | 006bc7 |             | nt_lessnumber                        
3646:197 | DONE dir | na 16 16 | 006bc7 | (2 bytes)   |         .byte 2, { NC }              
3646:197 | DONE dir | na 16 16 |        |             |                 02 01                    --  . .
3646:198 | DONE dir | na 16 16 | 006bc9 | (6 bytes)   |         .word nt_hash, xt_lessnumber, 006108 
3646:198 | DONE dir | na 16 16 |        |             |                 be 6b ff 60 08 61        --  . k . ` . a
3646:199 | DONE dir | na 16 16 | 006bcf | (2 bytes)   |         .byte 3c, 23                 
3646:199 | DONE dir | na 16 16 |        |             |                 3c 23                    --  < #
3646:200 | DONE wsp | na 16 16 |        |             |
3646:201 | DONE lbl | na 16 16 | 006bd1 |             | nt_bl                                
3646:202 | DONE dir | na 16 16 | 006bd1 | (2 bytes)   |         .byte 2, { NC }              
3646:202 | DONE dir | na 16 16 |        |             |                 02 01                    --  . .
3646:203 | DONE dir | na 16 16 | 006bd3 | (6 bytes)   |         .word nt_lessnumber, xt_bl, 006417 
3646:203 | DONE dir | na 16 16 |        |             |                 c7 6b 10 64 17 64        --  . k . d . d
3646:204 | DONE dir | na 16 16 | 006bd9 | (2 bytes)   |         .byte 62, 6c                 
3646:204 | DONE dir | na 16 16 |        |             |                 62 6c                    --  b l
3646:205 | DONE wsp | na 16 16 |        |             |
3646:206 | DONE lbl | na 16 16 | 006bdb |             | nt_spaces                            
3646:207 | DONE dir | na 16 16 | 006bdb | (2 bytes)   |         .byte 6, { NC }              
3646:207 | DONE dir | na 16 16 |        |             |                 06 01                    --  . .
3646:208 | DONE dir | na 16 16 | 006bdd | (6 bytes)   |         .word nt_bl, xt_spaces, 006910 
3646:208 | DONE dir | na 16 16 |        |             |                 d1 6b 04 69 10 69        --  . k . i . i
3646:209 | DONE dir | na 16 16 | 006be3 | (6 bytes)   |         .byte 73, 70, 61, 63, 65, 73 
3646:209 | DONE dir | na 16 16 |        |             |                 73 70 61 63 65 73        --  s p a c e s
3646:210 | DONE wsp | na 16 16 |        |             |
3646:211 | DONE lbl | na 16 16 | 006be9 |             | nt_space                             
3646:212 | DONE dir | na 16 16 | 006be9 | (2 bytes)   |         .byte 5, { NC }              
3646:212 | DONE dir | na 16 16 |        |             |                 05 01                    --  . .
3646:213 | DONE dir | na 16 16 | 006beb | (6 bytes)   |         .word nt_spaces, xt_space, 006903 
3646:213 | DONE dir | na 16 16 |        |             |                 db 6b fd 68 03 69        --  . k . h . i
3646:214 | DONE dir | na 16 16 | 006bf1 | (5 bytes)   |         .byte 73, 70, 61, 63, 65     
3646:214 | DONE dir | na 16 16 |        |             |                 73 70 61 63 65           --  s p a c e
3646:215 | DONE wsp | na 16 16 |        |             |
3646:216 | DONE lbl | na 16 16 | 006bf6 |             | nt_dots                              
3646:217 | DONE dir | na 16 16 | 006bf6 | (2 bytes)   |         .byte 2, { NC }              
3646:217 | DONE dir | na 16 16 |        |             |                 02 01                    --  . .
3646:218 | DONE dir | na 16 16 | 006bf8 | (6 bytes)   |         .word nt_space, xt_dots, 0061b5 
3646:218 | DONE dir | na 16 16 |        |             |                 e9 6b 6e 61 b5 61        --  . k n a . a
3646:219 | DONE dir | na 16 16 | 006bfe | (2 bytes)   |         .byte 2e, 73                 
3646:219 | DONE dir | na 16 16 |        |             |                 2e 73                    --  . s
3646:220 | DONE wsp | na 16 16 |        |             |
3646:221 | DONE lbl | na 16 16 | 006c00 |             | nt_type                              
3646:222 | DONE dir | na 16 16 | 006c00 | (2 bytes)   |         .byte 4, 0                   
3646:222 | DONE dir | na 16 16 |        |             |                 04 00                    --  . .
3646:223 | DONE dir | na 16 16 | 006c02 | (6 bytes)   |         .word nt_dots, xt_type, 006958 
3646:223 | DONE dir | na 16 16 |        |             |                 f6 6b 38 69 58 69        --  . k 8 i X i
3646:224 | DONE dir | na 16 16 | 006c08 | (4 bytes)   |         .byte 74, 79, 70, 65         
3646:224 | DONE dir | na 16 16 |        |             |                 74 79 70 65              --  t y p e
3646:225 | DONE wsp | na 16 16 |        |             |
3646:226 | DONE lbl | na 16 16 | 006c0c |             | nt_dot                               
3646:227 | DONE dir | na 16 16 | 006c0c | (2 bytes)   |         .byte 1, { NC }              
3646:227 | DONE dir | na 16 16 |        |             |                 01 01                    --  . .
3646:228 | DONE dir | na 16 16 | 006c0e | (6 bytes)   |         .word nt_type, xt_dot, 00614b 
3646:228 | DONE dir | na 16 16 |        |             |                 00 6c 2d 61 4b 61        --  . l - a K a
3646:229 | DONE dir | na 16 16 | 006c14 | (1 bytes)   |         .byte 2e                     
3646:229 | DONE dir | na 16 16 |        |             |                 2e                       --  .
3646:230 | DONE wsp | na 16 16 |        |             |
3646:231 | DONE lbl | na 16 16 | 006c15 |             | nt_pad                               
3646:232 | DONE dir | na 16 16 | 006c15 | (2 bytes)   |         .byte 3, { NC }              
3646:232 | DONE dir | na 16 16 |        |             |                 03 01                    --  . .
3646:233 | DONE dir | na 16 16 | 006c17 | (6 bytes)   |         .word nt_dot, xt_pad, 006753 
3646:233 | DONE dir | na 16 16 |        |             |                 0c 6c 48 67 53 67        --   l H g S g
3646:234 | DONE dir | na 16 16 | 006c1d | (3 bytes)   |         .byte 70, 61, 64             
3646:234 | DONE dir | na 16 16 |        |             |                 70 61 64                 --  p a d
3646:235 | DONE wsp | na 16 16 |        |             |
3646:236 | DONE lbl | na 16 16 | 006c20 |             | nt_base                              
3646:237 | DONE dir | na 16 16 | 006c20 | (2 bytes)   |         .byte 4, { NC }              
3646:237 | DONE dir | na 16 16 |        |             |                 04 01                    --  . .
3646:238 | DONE dir | na 16 16 | 006c22 | (6 bytes)   |         .word nt_pad, xt_base, 006401 
3646:238 | DONE dir | na 16 16 |        |             |                 15 6c fa 63 01 64        --  . l . c . d
3646:239 | DONE dir | na 16 16 | 006c28 | (4 bytes)   |         .byte 62, 61, 73, 65         
3646:239 | DONE dir | na 16 16 |        |             |                 62 61 73 65              --  b a s e
3646:240 | DONE wsp | na 16 16 |        |             |
3646:241 | DONE lbl | na 16 16 | 006c2c |             | nt_evaluate                          
3646:242 | DONE dir | na 16 16 | 006c2c | (2 bytes)   |         .byte 8, { NC }              
3646:242 | DONE dir | na 16 16 |        |             |                 08 01                    --  . .
3646:243 | DONE dir | na 16 16 | 006c2e | (6 bytes)   |         .word nt_base, xt_evaluate, 006621 
3646:243 | DONE dir | na 16 16 |        |             |                 20 6c f3 65 21 66        --    l . e ! f
3646:244 | DONE dir | na 16 16 | 006c34 | (8 bytes)   |         .byte 65, 76, 61, 6c, 75, 61, 74, 65 
3646:244 | DONE dir | na 16 16 |        |             |                 65 76 61 6c 75 61 74 65  --  e v a l u a t e
3646:244 | DONE dir | na 16 16 |        |             |                                          -- 
3646:245 | DONE wsp | na 16 16 |        |             |
3646:246 | DONE lbl | na 16 16 | 006c3c |             | nt_cells                             
3646:247 | DONE dir | na 16 16 | 006c3c | (2 bytes)   |         .byte 5, { NC }              2* because we have 16 bit stack
3646:247 | DONE dir | na 16 16 |        |             |                 05 01                    --  . .
3646:248 | DONE dir | na 16 16 | 006c3e | (6 bytes)   |         .word nt_evaluate, xt_two-star, 0062f8 
3646:248 | DONE dir | na 16 16 |        |             |                 2c 6c f5 62 f8 62        --  , l . b . b
3646:249 | DONE dir | na 16 16 | 006c44 | (5 bytes)   |         .byte 63, 65, 6c, 6c, 73     
3646:249 | DONE dir | na 16 16 |        |             |                 63 65 6c 6c 73           --  c e l l s
3646:250 | DONE wsp | na 16 16 |        |             |
3646:251 | DONE lbl | na 16 16 | 006c49 |             | nt_dotquote                          
3646:252 | DONE dir | na 16 16 | 006c49 | (2 bytes)   |         .byte 2, { CO + NC + IM }    
3646:252 | DONE dir | na 16 16 |        |             |                 02 07                    --  . .
3646:253 | DONE dir | na 16 16 | 006c4b | (6 bytes)   |         .word nt_cells, xt_dotquote, 00616e 
3646:253 | DONE dir | na 16 16 |        |             |                 3c 6c 5a 61 6e 61        --  < l Z a n a
3646:254 | DONE dir | na 16 16 | 006c51 | (2 bytes)   |         .byte 2e, &34                
3646:254 | DONE dir | na 16 16 |        |             |                 2e 22                    --  . "
3646:255 | DONE wsp | na 16 16 |        |             |
3646:256 | DONE lbl | na 16 16 | 006c53 |             | nt_squote                            
3646:257 | DONE dir | na 16 16 | 006c53 | (2 bytes)   |         .byte 2, { IM + NC }         not CO, see source code
3646:257 | DONE dir | na 16 16 |        |             |                 02 03                    --  . .
3646:258 | DONE dir | na 16 16 | 006c55 | (6 bytes)   |         .word nt_dotquote, xt_squote, 006869 
3646:258 | DONE dir | na 16 16 |        |             |                 49 6c 58 68 69 68        --  I l X h i h
3646:259 | DONE dir | na 16 16 | 006c5b | (2 bytes)   |         .byte 73, &34                
3646:259 | DONE dir | na 16 16 |        |             |                 73 22                    --  s "
3646:260 | DONE wsp | na 16 16 |        |             |
3646:261 | DONE lbl | na 16 16 | 006c5d |             | nt_sliteral                          
3646:262 | DONE dir | na 16 16 | 006c5d | (2 bytes)   |         .byte 8, { IM + CO }         
3646:262 | DONE dir | na 16 16 |        |             |                 08 06                    --  . .
3646:263 | DONE dir | na 16 16 | 006c5f | (6 bytes)   |         .word nt_squote, xt_sliteral, 0068d2 
3646:263 | DONE dir | na 16 16 |        |             |                 53 6c 88 68 d2 68        --  S l . h . h
3646:264 | DONE dir | na 16 16 | 006c65 | (8 bytes)   |         .byte 73, 6c, 69, 74, 65, 72, 61, 6c 
3646:264 | DONE dir | na 16 16 |        |             |                 73 6c 69 74 65 72 61 6c  --  s l i t e r a l
3646:264 | DONE dir | na 16 16 |        |             |                                          -- 
3646:265 | DONE wsp | na 16 16 |        |             |
3646:266 | DONE lbl | na 16 16 | 006c6d |             | nt_brackettick                       
3646:267 | DONE dir | na 16 16 | 006c6d | (2 bytes)   |         .byte 3, { IM + CO }         
3646:267 | DONE dir | na 16 16 |        |             |                 03 06                    --  . .
3646:268 | DONE dir | na 16 16 | 006c6f | (6 bytes)   |         .word nt_sliteral, xt_brackettick, 00624e 
3646:268 | DONE dir | na 16 16 |        |             |                 5d 6c 48 62 4e 62        --  ] l H b N b
3646:269 | DONE dir | na 16 16 | 006c75 | (3 bytes)   |         .byte 5b, 27, 5d             
3646:269 | DONE dir | na 16 16 |        |             |                 5b 27 5d                 --  [ ' ]
3646:270 | DONE wsp | na 16 16 |        |             |
3646:271 | DONE lbl | na 16 16 | 006c78 |             | nt_bracketchar                       
3646:272 | DONE dir | na 16 16 | 006c78 | (2 bytes)   |         .byte 6, { IM + CO }         
3646:272 | DONE dir | na 16 16 |        |             |                 06 06                    --  . .
3646:273 | DONE dir | na 16 16 | 006c7a | (6 bytes)   |         .word nt_brackettick, xt_bracketchar, 00625d 
3646:273 | DONE dir | na 16 16 |        |             |                 6d 6c 57 62 5d 62        --  m l W b ] b
3646:274 | DONE dir | na 16 16 | 006c80 | (6 bytes)   |         .byte 5b, 63, 68, 61, 72, 5d 
3646:274 | DONE dir | na 16 16 |        |             |                 5b 63 68 61 72 5d        --  [ c h a r ]
3646:275 | DONE wsp | na 16 16 |        |             |
3646:276 | DONE lbl | na 16 16 | 006c86 |             | nt_literal                           
3646:277 | DONE dir | na 16 16 | 006c86 | (2 bytes)   |         .byte 7, { IM + CO }         
3646:277 | DONE dir | na 16 16 |        |             |                 07 06                    --  . .
3646:278 | DONE dir | na 16 16 | 006c88 | (6 bytes)   |         .word nt_bracketchar, xt_literal, 0066c2 
3646:278 | DONE dir | na 16 16 |        |             |                 78 6c b1 66 c2 66        --  x l . f . f
3646:279 | DONE dir | na 16 16 | 006c8e | (7 bytes)   |         .byte 6c, 69, 74, 65, 72, 61, 6c 
3646:279 | DONE dir | na 16 16 |        |             |                 6c 69 74 65 72 61 6c     --  l i t e r a l
3646:280 | DONE wsp | na 16 16 |        |             |
3646:281 | DONE lbl | na 16 16 | 006c95 |             | nt_compile-only                      
3646:282 | DONE dir | na 16 16 | 006c95 | (2 bytes)   |         .byte 0c, { NC }             
3646:282 | DONE dir | na 16 16 |        |             |                 0c 01                    --   .
3646:283 | DONE dir | na 16 16 | 006c97 | (6 bytes)   |         .word nt_literal, xt_compile-only, 0064b8 
3646:283 | DONE dir | na 16 16 |        |             |                 86 6c b0 64 b8 64        --  . l . d . d
3646:284 | DONE dir | na 16 16 | 006c9d | (12 bytes)  |         .byte 63, 6f, 6d, 70, 69, 6c, 65, 2d, 6f, 6e, 6c, 79 
3646:284 | DONE dir | na 16 16 |        |             |                 63 6f 6d 70 69 6c 65 2d  --  c o m p i l e -
3646:284 | DONE dir | na 16 16 |        |             |                 6f 6e 6c 79              --  o n l y
3646:285 | DONE wsp | na 16 16 |        |             |
3646:286 | DONE lbl | na 16 16 | 006ca9 |             | nt_immediate                         
3646:287 | DONE dir | na 16 16 | 006ca9 | (2 bytes)   |         .byte 9, { NC }              
3646:287 | DONE dir | na 16 16 |        |             |                 09 01                    --  	 .
3646:288 | DONE dir | na 16 16 | 006cab | (6 bytes)   |         .word nt_compile-only, xt_immediate, 00668f 
3646:288 | DONE dir | na 16 16 |        |             |                 95 6c 87 66 8f 66        --  . l . f . f
3646:289 | DONE dir | na 16 16 | 006cb1 | (9 bytes)   |         .byte 69, 6d, 6d, 65, 64, 69, 61, 74, 65 
3646:289 | DONE dir | na 16 16 |        |             |                 69 6d 6d 65 64 69 61 74  --  i m m e d i a t
3646:289 | DONE dir | na 16 16 |        |             |                 65                       --  e
3646:290 | DONE wsp | na 16 16 |        |             |
3646:291 | DONE lbl | na 16 16 | 006cba |             | nt_postpone                          
3646:292 | DONE dir | na 16 16 | 006cba | (2 bytes)   |         .byte 8, { IM + CO }         
3646:292 | DONE dir | na 16 16 |        |             |                 08 06                    --  . .
3646:293 | DONE dir | na 16 16 | 006cbc | (6 bytes)   |         .word nt_immediate, xt_postpone, 00680b 
3646:293 | DONE dir | na 16 16 |        |             |                 a9 6c d6 67 0b 68        --  . l . g  h
3646:294 | DONE dir | na 16 16 | 006cc2 | (8 bytes)   |         .byte 70, 6f, 73, 74, 70, 6f, 6e, 65 
3646:294 | DONE dir | na 16 16 |        |             |                 70 6f 73 74 70 6f 6e 65  --  p o s t p o n e
3646:294 | DONE dir | na 16 16 |        |             |                                          -- 
3646:295 | DONE wsp | na 16 16 |        |             |
3646:296 | DONE lbl | na 16 16 | 006cca |             | nt_rightbracket                      
3646:297 | DONE dir | na 16 16 | 006cca | (2 bytes)   |         .byte 1, { NC }              
3646:297 | DONE dir | na 16 16 |        |             |                 01 01                    --  . .
3646:298 | DONE dir | na 16 16 | 006ccc | (6 bytes)   |         .word nt_postpone, xt_rightbracket, 006256 
3646:298 | DONE dir | na 16 16 |        |             |                 ba 6c 51 62 56 62        --  . l Q b V b
3646:299 | DONE dir | na 16 16 | 006cd2 | (1 bytes)   |         .byte 5d                     
3646:299 | DONE dir | na 16 16 |        |             |                 5d                       --  ]
3646:300 | DONE wsp | na 16 16 |        |             |
3646:301 | DONE lbl | na 16 16 | 006cd3 |             | nt_leftbracket                       
3646:302 | DONE dir | na 16 16 | 006cd3 | (2 bytes)   |         .byte 1, { IM + CO }         
3646:302 | DONE dir | na 16 16 |        |             |                 01 06                    --  . .
3646:303 | DONE dir | na 16 16 | 006cd5 | (6 bytes)   |         .word nt_rightbracket, xt_leftbracket, 006250 
3646:303 | DONE dir | na 16 16 |        |             |                 ca 6c 4e 62 50 62        --  . l N b P b
3646:304 | DONE dir | na 16 16 | 006cdb | (1 bytes)   |         .byte 5b                     
3646:304 | DONE dir | na 16 16 |        |             |                 5b                       --  [
3646:305 | DONE wsp | na 16 16 |        |             |
3646:306 | DONE lbl | na 16 16 | 006cdc |             | nt_zbranch                           
3646:307 | DONE dir | na 16 16 | 006cdc | (2 bytes)   |         .byte 7, { IM + CO }         
3646:307 | DONE dir | na 16 16 |        |             |                 07 06                    --  . .
3646:308 | DONE dir | na 16 16 | 006cde | (6 bytes)   |         .word nt_leftbracket, xt_zbranch, 0062c8 
3646:308 | DONE dir | na 16 16 |        |             |                 d3 6c c2 62 c8 62        --  . l . b . b
3646:309 | DONE dir | na 16 16 | 006ce4 | (7 bytes)   |         .byte 30, 62, 72, 61, 6e, 63, 68 
3646:309 | DONE dir | na 16 16 |        |             |                 30 62 72 61 6e 63 68     --  0 b r a n c h
3646:310 | DONE wsp | na 16 16 |        |             |
3646:311 | DONE lbl | na 16 16 | 006ceb |             | nt_branch                            
3646:312 | DONE dir | na 16 16 | 006ceb | (2 bytes)   |         .byte 6, { IM + CO }         
3646:312 | DONE dir | na 16 16 |        |             |                 06 06                    --  . .
3646:313 | DONE dir | na 16 16 | 006ced | (6 bytes)   |         .word nt_zbranch, xt_branch, 00641e 
3646:313 | DONE dir | na 16 16 |        |             |                 dc 6c 18 64 1e 64        --  . l . d . d
3646:314 | DONE dir | na 16 16 | 006cf3 | (6 bytes)   |         .byte 62, 72, 61, 6e, 63, 68 
3646:314 | DONE dir | na 16 16 |        |             |                 62 72 61 6e 63 68        --  b r a n c h
3646:315 | DONE wsp | na 16 16 |        |             |
3646:316 | DONE lbl | na 16 16 | 006cf9 |             | nt_again                             
3646:317 | DONE dir | na 16 16 | 006cf9 | (2 bytes)   |         .byte 5, { IM + NC + CO }    
3646:317 | DONE dir | na 16 16 |        |             |                 05 07                    --  . .
3646:318 | DONE dir | na 16 16 | 006cfb | (6 bytes)   |         .word nt_branch, xt_again, 0063c9 
3646:318 | DONE dir | na 16 16 |        |             |                 eb 6c b4 63 c9 63        --  . l . c . c
3646:319 | DONE dir | na 16 16 | 006d01 | (5 bytes)   |         .byte 61, 67, 61, 69, 6e     
3646:319 | DONE dir | na 16 16 |        |             |                 61 67 61 69 6e           --  a g a i n
3646:320 | DONE wsp | na 16 16 |        |             |
3646:321 | DONE lbl | na 16 16 | 006d06 |             | nt_begin                             
3646:322 | DONE dir | na 16 16 | 006d06 | (2 bytes)   |         .byte 5, { IM + NC + CO }    
3646:322 | DONE dir | na 16 16 |        |             |                 05 07                    --  . .
3646:323 | DONE dir | na 16 16 | 006d08 | (6 bytes)   |         .word nt_again, xt_begin, 00640f 
3646:323 | DONE dir | na 16 16 |        |             |                 f9 6c 09 64 0f 64        --  . l 	 d . d
3646:324 | DONE dir | na 16 16 | 006d0e | (5 bytes)   |         .byte 62, 65, 67, 69, 6e     
3646:324 | DONE dir | na 16 16 |        |             |                 62 65 67 69 6e           --  b e g i n
3646:325 | DONE wsp | na 16 16 |        |             |
3646:326 | DONE lbl | na 16 16 | 006d13 |             | nt_compilecomma                      
3646:327 | DONE dir | na 16 16 | 006d13 | (2 bytes)   |         .byte 08, { CO }             
3646:327 | DONE dir | na 16 16 |        |             |                 08 04                    --  . .
3646:328 | DONE dir | na 16 16 | 006d15 | (6 bytes)   |         .word nt_begin, xt_compilecomma, 0064cb 
3646:328 | DONE dir | na 16 16 |        |             |                 06 6d b9 64 cb 64        --  . m . d . d
3646:329 | DONE dir | na 16 16 | 006d1b | (8 bytes)   |         .byte 63, 6f, 6d, 70, 69, 6c, 65, 2c 
3646:329 | DONE dir | na 16 16 |        |             |                 63 6f 6d 70 69 6c 65 2c  --  c o m p i l e ,
3646:329 | DONE dir | na 16 16 |        |             |                                          -- 
3646:330 | DONE wsp | na 16 16 |        |             |
3646:331 | DONE lbl | na 16 16 | 006d23 |             | nt_semicolon                         
3646:332 | DONE dir | na 16 16 | 006d23 | (2 bytes)   |         .byte 1, { CO + IM }         
3646:332 | DONE dir | na 16 16 |        |             |                 01 06                    --  . .
3646:333 | DONE dir | na 16 16 | 006d25 | (6 bytes)   |         .word nt_compilecomma, xt_semicolon, 0061fc 
3646:333 | DONE dir | na 16 16 |        |             |                 13 6d e4 61 fc 61        --  . m . a . a
3646:334 | DONE dir | na 16 16 | 006d2b | (1 bytes)   |         .byte 3b                     
3646:334 | DONE dir | na 16 16 |        |             |                 3b                       --  ;
3646:335 | DONE wsp | na 16 16 |        |             |
3646:336 | DONE lbl | na 16 16 | 006d2c |             | nt_colon                             
3646:337 | DONE dir | na 16 16 | 006d2c | (2 bytes)   |         .byte 1, { NC }              
3646:337 | DONE dir | na 16 16 |        |             |                 01 01                    --  . .
3646:338 | DONE dir | na 16 16 | 006d2e | (6 bytes)   |         .word nt_semicolon, xt_colon, 0061e3 
3646:338 | DONE dir | na 16 16 |        |             |                 23 6d c2 61 e3 61        --  # m . a . a
3646:339 | DONE dir | na 16 16 | 006d34 | (1 bytes)   |         .byte 3a                     
3646:339 | DONE dir | na 16 16 |        |             |                 3a                       --  :
3646:340 | DONE wsp | na 16 16 |        |             |
3646:341 | DONE lbl | na 16 16 | 006d35 |             | nt_allot                             
3646:342 | DONE dir | na 16 16 | 006d35 | (2 bytes)   |         .byte 5, { NC }              
3646:342 | DONE dir | na 16 16 |        |             |                 05 01                    --  . .
3646:343 | DONE dir | na 16 16 | 006d37 | (6 bytes)   |         .word nt_colon, xt_allot, 0063f2 
3646:343 | DONE dir | na 16 16 |        |             |                 2c 6d ca 63 f2 63        --  , m . c . c
3646:344 | DONE dir | na 16 16 | 006d3d | (5 bytes)   |         .byte 61, 6c, 6c, 6f, 74     
3646:344 | DONE dir | na 16 16 |        |             |                 61 6c 6c 6f 74           --  a l l o t
3646:345 | DONE wsp | na 16 16 |        |             |
3646:346 | DONE lbl | na 16 16 | 006d42 |             | nt_does                              
3646:347 | DONE dir | na 16 16 | 006d42 | (2 bytes)   |         .byte 5, { IM + CO }         
3646:347 | DONE dir | na 16 16 |        |             |                 05 06                    --  . .
3646:348 | DONE dir | na 16 16 | 006d44 | (6 bytes)   |         .word nt_allot, xt_does, 0065ab 
3646:348 | DONE dir | na 16 16 |        |             |                 35 6d 9f 65 ab 65        --  5 m . e . e
3646:349 | DONE dir | na 16 16 | 006d4a | (5 bytes)   |         .byte 64, 6f, 65, 73, 3e     
3646:349 | DONE dir | na 16 16 |        |             |                 64 6f 65 73 3e           --  d o e s >
3646:350 | DONE wsp | na 16 16 |        |             |
3646:351 | DONE lbl | na 16 16 | 006d4f |             | nt_create                            
3646:352 | DONE dir | na 16 16 | 006d4f | (2 bytes)   |         .byte 6, { NC }              
3646:352 | DONE dir | na 16 16 |        |             |                 06 01                    --  . .
3646:353 | DONE dir | na 16 16 | 006d51 | (6 bytes)   |         .word nt_does, xt_create, 00656e 
3646:353 | DONE dir | na 16 16 |        |             |                 42 6d fc 64 6e 65        --  B m . d n e
3646:354 | DONE dir | na 16 16 | 006d57 | (6 bytes)   |         .byte 63, 72, 65, 61, 74, 65 
3646:354 | DONE dir | na 16 16 |        |             |                 63 72 65 61 74 65        --  c r e a t e
3646:355 | DONE wsp | na 16 16 |        |             |
3646:356 | DONE lbl | na 16 16 | 006d5d |             | nt_name-string                       
3646:357 | DONE dir | na 16 16 | 006d5d | (2 bytes)   |         .byte 0b, { NC }             
3646:357 | DONE dir | na 16 16 |        |             |                 0b 01                    --   .
3646:358 | DONE dir | na 16 16 | 006d5f | (6 bytes)   |         .word nt_create, xt_name-string, 00672f 
3646:358 | DONE dir | na 16 16 |        |             |                 4f 6d 1f 67 2f 67        --  O m . g / g
3646:359 | DONE dir | na 16 16 | 006d65 | (11 bytes)  |         .byte 6e, 61, 6d, 65, 3e, 73, 74, 72, 69, 6e, 67 
3646:359 | DONE dir | na 16 16 |        |             |                 6e 61 6d 65 3e 73 74 72  --  n a m e > s t r
3646:359 | DONE dir | na 16 16 |        |             |                 69 6e 67                 --  i n g
3646:360 | DONE wsp | na 16 16 |        |             |
3646:361 | DONE lbl | na 16 16 | 006d70 |             | nt_2dup                              
3646:362 | DONE dir | na 16 16 | 006d70 | (2 bytes)   |         .byte 4, { NC }              
3646:362 | DONE dir | na 16 16 |        |             |                 04 01                    --  . .
3646:363 | DONE dir | na 16 16 | 006d72 | (6 bytes)   |         .word nt_name-string, xt_2dup, 00630a 
3646:363 | DONE dir | na 16 16 |        |             |                 5d 6d 00 63 0a 63        --  ] m . c 
 c
3646:364 | DONE dir | na 16 16 | 006d78 | (4 bytes)   |         .byte 32, 64, 75, 70         
3646:364 | DONE dir | na 16 16 |        |             |                 32 64 75 70              --  2 d u p
3646:365 | DONE wsp | na 16 16 |        |             |
3646:366 | DONE lbl | na 16 16 | 006d7c |             | nt_abs                               
3646:367 | DONE dir | na 16 16 | 006d7c | (2 bytes)   |         .byte 3, { NC }              
3646:367 | DONE dir | na 16 16 |        |             |                 03 01                    --  . .
3646:368 | DONE dir | na 16 16 | 006d7e | (6 bytes)   |         .word nt_2dup, xt_abs, 00632f 
3646:368 | DONE dir | na 16 16 |        |             |                 70 6d 27 63 2f 63        --  p m ' c / c
3646:369 | DONE dir | na 16 16 | 006d84 | (3 bytes)   |         .byte 61, 62, 73             
3646:369 | DONE dir | na 16 16 |        |             |                 61 62 73                 --  a b s
3646:370 | DONE wsp | na 16 16 |        |             |
3646:371 | DONE lbl | na 16 16 | 006d87 |             | nt_state                             
3646:372 | DONE dir | na 16 16 | 006d87 | (2 bytes)   |         .byte 5, { NC }              
3646:372 | DONE dir | na 16 16 |        |             |                 05 01                    --  . .
3646:373 | DONE dir | na 16 16 | 006d89 | (6 bytes)   |         .word nt_abs, xt_state, 006920 
3646:373 | DONE dir | na 16 16 |        |             |                 7c 6d 19 69 20 69        --  | m . i   i
3646:374 | DONE dir | na 16 16 | 006d8f | (5 bytes)   |         .byte 73, 74, 61, 74, 65     
3646:374 | DONE dir | na 16 16 |        |             |                 73 74 61 74 65           --  s t a t e
3646:375 | DONE wsp | na 16 16 |        |             |
3646:376 | DONE lbl | na 16 16 | 006d94 |             | nt_to-in                             
3646:377 | DONE dir | na 16 16 | 006d94 | (2 bytes)   |         .byte 3, { NC }              
3646:377 | DONE dir | na 16 16 |        |             |                 03 01                    --  . .
3646:378 | DONE dir | na 16 16 | 006d96 | (6 bytes)   |         .word nt_state, xt_to-in, 006124 
3646:378 | DONE dir | na 16 16 |        |             |                 87 6d 1d 61 24 61        --  . m . a $ a
3646:379 | DONE dir | na 16 16 | 006d9c | (3 bytes)   |         .byte 3e, 69, 6e             
3646:379 | DONE dir | na 16 16 |        |             |                 3e 69 6e                 --  > i n
3646:380 | DONE wsp | na 16 16 |        |             |
3646:381 | DONE lbl | na 16 16 | 006d9f |             | nt_source                            
3646:382 | DONE dir | na 16 16 | 006d9f | (2 bytes)   |         .byte 6, { NC }              
3646:382 | DONE dir | na 16 16 |        |             |                 06 01                    --  . .
3646:383 | DONE dir | na 16 16 | 006da1 | (6 bytes)   |         .word nt_to-in, xt_source, 0068f5 
3646:383 | DONE dir | na 16 16 |        |             |                 94 6d e9 68 f5 68        --  . m . h . h
3646:384 | DONE dir | na 16 16 | 006da7 | (6 bytes)   |         .byte 73, 6f, 75, 72, 63, 65 
3646:384 | DONE dir | na 16 16 |        |             |                 73 6f 75 72 63 65        --  s o u r c e
3646:385 | DONE wsp | na 16 16 |        |             |
3646:386 | DONE lbl | na 16 16 | 006dad |             | nt_depth                             
3646:387 | DONE dir | na 16 16 | 006dad | (2 bytes)   |         .byte 5, { NC }              
3646:387 | DONE dir | na 16 16 |        |             |                 05 01                    --  . .
3646:388 | DONE dir | na 16 16 | 006daf | (6 bytes)   |         .word nt_source, xt_depth, 00658a 
3646:388 | DONE dir | na 16 16 |        |             |                 9f 6d 7c 65 8a 65        --  . m | e . e
3646:389 | DONE dir | na 16 16 | 006db5 | (5 bytes)   |         .byte 64, 65, 70, 74, 68     
3646:389 | DONE dir | na 16 16 |        |             |                 64 65 70 74 68           --  d e p t h
3646:390 | DONE wsp | na 16 16 |        |             |
3646:391 | DONE lbl | na 16 16 | 006dba |             | nt_constant                          
3646:392 | DONE dir | na 16 16 | 006dba | (2 bytes)   |         .byte 8, { NC }              
3646:392 | DONE dir | na 16 16 |        |             |                 08 01                    --  . .
3646:393 | DONE dir | na 16 16 | 006dbc | (6 bytes)   |         .word nt_depth, xt_constant, 0064e5 
3646:393 | DONE dir | na 16 16 |        |             |                 ad 6d cc 64 e5 64        --  . m . d . d
3646:394 | DONE dir | na 16 16 | 006dc2 | (8 bytes)   |         .byte 63, 6f, 6e, 73, 74, 61, 6e, 74 
3646:394 | DONE dir | na 16 16 |        |             |                 63 6f 6e 73 74 61 6e 74  --  c o n s t a n t
3646:394 | DONE dir | na 16 16 |        |             |                                          -- 
3646:395 | DONE wsp | na 16 16 |        |             |
3646:396 | DONE lbl | na 16 16 | 006dca |             | nt_variable                          
3646:397 | DONE dir | na 16 16 | 006dca | (2 bytes)   |         .byte 8, { NC }              
3646:397 | DONE dir | na 16 16 |        |             |                 08 01                    --  . .
3646:398 | DONE dir | na 16 16 | 006dcc | (6 bytes)   |         .word nt_constant, xt_variable, 006a3c 
3646:398 | DONE dir | na 16 16 |        |             |                 ba 6d 30 6a 3c 6a        --  . m 0 j < j
3646:399 | DONE dir | na 16 16 | 006dd2 | (8 bytes)   |         .byte 76, 61, 72, 69, 61, 62, 6c, 65 
3646:399 | DONE dir | na 16 16 |        |             |                 76 61 72 69 61 62 6c 65  --  v a r i a b l e
3646:399 | DONE dir | na 16 16 |        |             |                                          -- 
3646:400 | DONE wsp | na 16 16 |        |             |
3646:401 | DONE lbl | na 16 16 | 006dda |             | nt_tick                              
3646:402 | DONE dir | na 16 16 | 006dda | (2 bytes)   |         .byte 1, { NC }              
3646:402 | DONE dir | na 16 16 |        |             |                 01 01                    --  . .
3646:403 | DONE dir | na 16 16 | 006ddc | (6 bytes)   |         .word nt_variable, xt_tick, 006326 
3646:403 | DONE dir | na 16 16 |        |             |                 ca 6d 0b 63 26 63        --  . m  c & c
3646:404 | DONE dir | na 16 16 | 006de2 | (1 bytes)   |         .byte 27                     hex for "'"
3646:404 | DONE dir | na 16 16 |        |             |                 27                       --  '
3646:405 | DONE wsp | na 16 16 |        |             |
3646:406 | DONE lbl | na 16 16 | 006de3 |             | nt_min                               
3646:407 | DONE dir | na 16 16 | 006de3 | (2 bytes)   |         .byte 3, { NC }              
3646:407 | DONE dir | na 16 16 |        |             |                 03 01                    --  . .
3646:408 | DONE dir | na 16 16 | 006de5 | (6 bytes)   |         .word nt_tick, xt_min, 006715 
3646:408 | DONE dir | na 16 16 |        |             |                 da 6d 03 67 15 67        --  . m . g . g
3646:409 | DONE dir | na 16 16 | 006deb | (3 bytes)   |         .byte 6d, 69, 6e             
3646:409 | DONE dir | na 16 16 |        |             |                 6d 69 6e                 --  m i n
3646:410 | DONE wsp | na 16 16 |        |             |
3646:411 | DONE lbl | na 16 16 | 006dee |             | nt_max                               
3646:412 | DONE dir | na 16 16 | 006dee | (2 bytes)   |         .byte 3, { NC }              
3646:412 | DONE dir | na 16 16 |        |             |                 03 01                    --  . .
3646:413 | DONE dir | na 16 16 | 006df0 | (6 bytes)   |         .word nt_min, xt_max, 006702 
3646:413 | DONE dir | na 16 16 |        |             |                 e3 6d f0 66 02 67        --  . m . f . g
3646:414 | DONE dir | na 16 16 | 006df6 | (3 bytes)   |         .byte 6d, 61, 78             
3646:414 | DONE dir | na 16 16 |        |             |                 6d 61 78                 --  m a x
3646:415 | DONE wsp | na 16 16 |        |             |
3646:416 | DONE lbl | na 16 16 | 006df9 |             | nt_negate                            
3646:417 | DONE dir | na 16 16 | 006df9 | (2 bytes)   |         .byte 6, { NC }              
3646:417 | DONE dir | na 16 16 |        |             |                 06 01                    --  . .
3646:418 | DONE dir | na 16 16 | 006dfb | (6 bytes)   |         .word nt_max, xt_negate, 006736 
3646:418 | DONE dir | na 16 16 |        |             |                 ee 6d 30 67 36 67        --  . m 0 g 6 g
3646:419 | DONE dir | na 16 16 | 006e01 | (6 bytes)   |         .byte 6e, 65, 67, 61, 74, 65 
3646:419 | DONE dir | na 16 16 |        |             |                 6e 65 67 61 74 65        --  n e g a t e
3646:420 | DONE wsp | na 16 16 |        |             |
3646:421 | DONE lbl | na 16 16 | 006e07 |             | nt_invert                            
3646:422 | DONE dir | na 16 16 | 006e07 | (2 bytes)   |         .byte 6, { NC }              
3646:422 | DONE dir | na 16 16 |        |             |                 06 01                    --  . .
3646:423 | DONE dir | na 16 16 | 006e09 | (6 bytes)   |         .word nt_negate, xt_invert, 006695 
3646:423 | DONE dir | na 16 16 |        |             |                 f9 6d 90 66 95 66        --  . m . f . f
3646:424 | DONE dir | na 16 16 | 006e0f | (6 bytes)   |         .byte 69, 6e, 76, 65, 72, 74 
3646:424 | DONE dir | na 16 16 |        |             |                 69 6e 76 65 72 74        --  i n v e r t
3646:425 | DONE wsp | na 16 16 |        |             |
3646:426 | DONE lbl | na 16 16 | 006e15 |             | nt_char                              
3646:427 | DONE dir | na 16 16 | 006e15 | (2 bytes)   |         .byte 4, { NC }              
3646:427 | DONE dir | na 16 16 |        |             |                 04 01                    --  . .
3646:428 | DONE dir | na 16 16 | 006e17 | (6 bytes)   |         .word nt_invert, xt_char, 006473 
3646:428 | DONE dir | na 16 16 |        |             |                 07 6e 5c 64 73 64        --  . n \ d s d
3646:429 | DONE dir | na 16 16 | 006e1d | (4 bytes)   |         .byte 63, 68, 61, 72         
3646:429 | DONE dir | na 16 16 |        |             |                 63 68 61 72              --  c h a r
3646:430 | DONE wsp | na 16 16 |        |             |
3646:431 | DONE lbl | na 16 16 | 006e21 |             | nt_xor                               
3646:432 | DONE dir | na 16 16 | 006e21 | (2 bytes)   |         .byte 3, { NC }              
3646:432 | DONE dir | na 16 16 |        |             |                 03 01                    --  . .
3646:433 | DONE dir | na 16 16 | 006e23 | (6 bytes)   |         .word nt_char, xt_xor, 006a6b 
3646:433 | DONE dir | na 16 16 |        |             |                 15 6e 65 6a 6b 6a        --  . n e j k j
3646:434 | DONE dir | na 16 16 | 006e29 | (3 bytes)   |         .byte 78, 6f, 72             
3646:434 | DONE dir | na 16 16 |        |             |                 78 6f 72                 --  x o r
3646:435 | DONE wsp | na 16 16 |        |             |
3646:436 | DONE lbl | na 16 16 | 006e2c |             | nt_or                                
3646:437 | DONE dir | na 16 16 | 006e2c | (2 bytes)   |         .byte 2, { NC }              
3646:437 | DONE dir | na 16 16 |        |             |                 02 01                    --  . .
3646:438 | DONE dir | na 16 16 | 006e2e | (6 bytes)   |         .word nt_xor, xt_or, 006740  
3646:438 | DONE dir | na 16 16 |        |             |                 21 6e 3a 67 40 67        --  ! n : g @ g
3646:439 | DONE dir | na 16 16 | 006e34 | (2 bytes)   |         .byte 6f, 72                 
3646:439 | DONE dir | na 16 16 |        |             |                 6f 72                    --  o r
3646:440 | DONE wsp | na 16 16 |        |             |
3646:441 | DONE lbl | na 16 16 | 006e36 |             | nt_and                               
3646:442 | DONE dir | na 16 16 | 006e36 | (2 bytes)   |         .byte 3, { NC }              
3646:442 | DONE dir | na 16 16 |        |             |                 03 01                    --  . .
3646:443 | DONE dir | na 16 16 | 006e38 | (6 bytes)   |         .word nt_or, xt_and, 0063f9  
3646:443 | DONE dir | na 16 16 |        |             |                 2c 6e f3 63 f9 63        --  , n . c . c
3646:444 | DONE dir | na 16 16 | 006e3e | (3 bytes)   |         .byte 61, 6e, 64             
3646:444 | DONE dir | na 16 16 |        |             |                 61 6e 64                 --  a n d
3646:445 | DONE wsp | na 16 16 |        |             |
3646:446 | DONE lbl | na 16 16 | 006e41 |             | nt_plusstore                         
3646:447 | DONE dir | na 16 16 | 006e41 | (2 bytes)   |         .byte 2, { NC }              
3646:447 | DONE dir | na 16 16 |        |             |                 02 01                    --  . .
3646:448 | DONE dir | na 16 16 | 006e43 | (6 bytes)   |         .word nt_and, xt_plusstore, 0067d5 
3646:448 | DONE dir | na 16 16 |        |             |                 36 6e c6 67 d5 67        --  6 n . g . g
3646:449 | DONE dir | na 16 16 | 006e49 | (2 bytes)   |         .byte 2b, 21                 
3646:449 | DONE dir | na 16 16 |        |             |                 2b 21                    --  + !
3646:450 | DONE wsp | na 16 16 |        |             |
3646:451 | DONE lbl | na 16 16 | 006e4b |             | nt_c-comma                           
3646:452 | DONE dir | na 16 16 | 006e4b | (2 bytes)   |         .byte 2, { NC }              
3646:452 | DONE dir | na 16 16 |        |             |                 02 01                    --  . .
3646:453 | DONE dir | na 16 16 | 006e4d | (6 bytes)   |         .word nt_plusstore, xt_c-comma, 00643f 
3646:453 | DONE dir | na 16 16 |        |             |                 41 6e 32 64 3f 64        --  A n 2 d ? d
3646:454 | DONE dir | na 16 16 | 006e53 | (2 bytes)   |         .byte 63, 2c                 
3646:454 | DONE dir | na 16 16 |        |             |                 63 2c                    --  c ,
3646:455 | DONE wsp | na 16 16 |        |             |
3646:456 | DONE lbl | na 16 16 | 006e55 |             | nt_c-fetch                           
3646:457 | DONE dir | na 16 16 | 006e55 | (2 bytes)   |         .byte 2, { NC }              
3646:457 | DONE dir | na 16 16 |        |             |                 02 01                    --  . .
3646:458 | DONE dir | na 16 16 | 006e57 | (6 bytes)   |         .word nt_c-comma, xt_c-fetch, 00644b 
3646:458 | DONE dir | na 16 16 |        |             |                 4b 6e 40 64 4b 64        --  K n @ d K d
3646:459 | DONE dir | na 16 16 | 006e5d | (2 bytes)   |         .byte 63, 40                 
3646:459 | DONE dir | na 16 16 |        |             |                 63 40                    --  c @
3646:460 | DONE wsp | na 16 16 |        |             |
3646:461 | DONE lbl | na 16 16 | 006e5f |             | nt_c-store                           
3646:462 | DONE dir | na 16 16 | 006e5f | (2 bytes)   |         .byte 2, { NC }              
3646:462 | DONE dir | na 16 16 |        |             |                 02 01                    --  . .
3646:463 | DONE dir | na 16 16 | 006e61 | (6 bytes)   |         .word nt_c-fetch, xt_c-store, 00645b 
3646:463 | DONE dir | na 16 16 |        |             |                 55 6e 4c 64 5b 64        --  U n L d [ d
3646:464 | DONE dir | na 16 16 | 006e67 | (2 bytes)   |         .byte 63, 21                 
3646:464 | DONE dir | na 16 16 |        |             |                 63 21                    --  c !
3646:465 | DONE wsp | na 16 16 |        |             |
3646:466 | DONE lbl | na 16 16 | 006e69 |             | nt_two-star                          
3646:467 | DONE dir | na 16 16 | 006e69 | (2 bytes)   |         .byte 2, { NC }              
3646:467 | DONE dir | na 16 16 |        |             |                 02 01                    --  . .
3646:468 | DONE dir | na 16 16 | 006e6b | (6 bytes)   |         .word nt_c-store, xt_two-star, 0062f8 
3646:468 | DONE dir | na 16 16 |        |             |                 5f 6e f5 62 f8 62        --  _ n . b . b
3646:469 | DONE dir | na 16 16 | 006e71 | (2 bytes)   |         .byte 32, 2a                 
3646:469 | DONE dir | na 16 16 |        |             |                 32 2a                    --  2 *
3646:470 | DONE wsp | na 16 16 |        |             |
3646:471 | DONE lbl | na 16 16 | 006e73 |             | nt_minus                             
3646:472 | DONE dir | na 16 16 | 006e73 | (2 bytes)   |         .byte 1, { NC }              
3646:472 | DONE dir | na 16 16 |        |             |                 01 01                    --  . .
3646:473 | DONE dir | na 16 16 | 006e75 | (6 bytes)   |         .word nt_two-star, xt_minus, 006275 
3646:473 | DONE dir | na 16 16 |        |             |                 69 6e 6b 62 75 62        --  i n k b u b
3646:474 | DONE dir | na 16 16 | 006e7b | (1 bytes)   |         .byte 2d                     
3646:474 | DONE dir | na 16 16 |        |             |                 2d                       --  -
3646:475 | DONE wsp | na 16 16 |        |             |
3646:476 | DONE lbl | na 16 16 | 006e7c |             | nt_plus                              
3646:477 | DONE dir | na 16 16 | 006e7c | (2 bytes)   |         .byte 1, { NC }              
3646:477 | DONE dir | na 16 16 |        |             |                 01 01                    --  . .
3646:478 | DONE dir | na 16 16 | 006e7e | (6 bytes)   |         .word nt_minus, xt_plus, 00626a 
3646:478 | DONE dir | na 16 16 |        |             |                 73 6e 63 62 6a 62        --  s n c b j b
3646:479 | DONE dir | na 16 16 | 006e84 | (1 bytes)   |         .byte 2b                     
3646:479 | DONE dir | na 16 16 |        |             |                 2b                       --  +
3646:480 | DONE wsp | na 16 16 |        |             |
3646:481 | DONE lbl | na 16 16 | 006e85 |             | nt_one-minus                         
3646:482 | DONE dir | na 16 16 | 006e85 | (2 bytes)   |         .byte 2, { NC }              
3646:482 | DONE dir | na 16 16 |        |             |                 02 01                    --  . .
3646:483 | DONE dir | na 16 16 | 006e87 | (6 bytes)   |         .word nt_plus, xt_one-minus, 0062ea 
3646:483 | DONE dir | na 16 16 |        |             |                 7c 6e e9 62 ea 62        --  | n . b . b
3646:484 | DONE dir | na 16 16 | 006e8d | (2 bytes)   |         .byte 31, 2d                 
3646:484 | DONE dir | na 16 16 |        |             |                 31 2d                    --  1 -
3646:485 | DONE wsp | na 16 16 |        |             |
3646:486 | DONE lbl | na 16 16 | 006e8f |             | nt_one-plus                          
3646:487 | DONE dir | na 16 16 | 006e8f | (2 bytes)   |         .byte 2, { NC }              
3646:487 | DONE dir | na 16 16 |        |             |                 02 01                    --  . .
3646:488 | DONE dir | na 16 16 | 006e91 | (6 bytes)   |         .word nt_one-minus, xt_one-plus, 0062ec 
3646:488 | DONE dir | na 16 16 |        |             |                 85 6e eb 62 ec 62        --  . n . b . b
3646:489 | DONE dir | na 16 16 | 006e97 | (2 bytes)   |         .byte 31, 2b                 
3646:489 | DONE dir | na 16 16 |        |             |                 31 2b                    --  1 +
3646:490 | DONE wsp | na 16 16 |        |             |
3646:491 | DONE lbl | na 16 16 | 006e99 |             | nt_zero-notequal                     
3646:492 | DONE dir | na 16 16 | 006e99 | (2 bytes)   |         .byte 3, { NC }              
3646:492 | DONE dir | na 16 16 |        |             |                 03 01                    --  . .
3646:493 | DONE dir | na 16 16 | 006e9b | (6 bytes)   |         .word nt_one-plus, xt_zero-notequal, 0062b6 
3646:493 | DONE dir | na 16 16 |        |             |                 8f 6e ab 62 b6 62        --  . n . b . b
3646:494 | DONE dir | na 16 16 | 006ea1 | (3 bytes)   |         .byte 30, 3c, 3e             
3646:494 | DONE dir | na 16 16 |        |             |                 30 3c 3e                 --  0 < >
3646:495 | DONE wsp | na 16 16 |        |             |
3646:496 | DONE lbl | na 16 16 | 006ea4 |             | nt_zero-more                         
3646:497 | DONE dir | na 16 16 | 006ea4 | (2 bytes)   |         .byte 2, { NC }              
3646:497 | DONE dir | na 16 16 |        |             |                 02 01                    --  . .
3646:498 | DONE dir | na 16 16 | 006ea6 | (6 bytes)   |         .word nt_zero-notequal, xt_zero-more, 0062c1 
3646:498 | DONE dir | na 16 16 |        |             |                 99 6e b7 62 c1 62        --  . n . b . b
3646:499 | DONE dir | na 16 16 | 006eac | (2 bytes)   |         .byte 30, 3e                 
3646:499 | DONE dir | na 16 16 |        |             |                 30 3e                    --  0 >
3646:500 | DONE wsp | na 16 16 |        |             |
3646:501 | DONE lbl | na 16 16 | 006eae |             | nt_zero-less                         
3646:502 | DONE dir | na 16 16 | 006eae | (2 bytes)   |         .byte 2, { NC }              
3646:502 | DONE dir | na 16 16 |        |             |                 02 01                    --  . .
3646:503 | DONE dir | na 16 16 | 006eb0 | (6 bytes)   |         .word nt_zero-more, xt_zero-less, 0062aa 
3646:503 | DONE dir | na 16 16 |        |             |                 a4 6e 9f 62 aa 62        --  . n . b . b
3646:504 | DONE dir | na 16 16 | 006eb6 | (2 bytes)   |         .byte 30, 3c                 
3646:504 | DONE dir | na 16 16 |        |             |                 30 3c                    --  0 <
3646:505 | DONE wsp | na 16 16 |        |             |
3646:506 | DONE lbl | na 16 16 | 006eb8 |             | nt_greater                           
3646:507 | DONE dir | na 16 16 | 006eb8 | (2 bytes)   |         .byte 1, { NC }              
3646:507 | DONE dir | na 16 16 |        |             |                 01 01                    --  . .
3646:508 | DONE dir | na 16 16 | 006eba | (6 bytes)   |         .word nt_zero-less, xt_greater, 00611c 
3646:508 | DONE dir | na 16 16 |        |             |                 ae 6e 09 61 1c 61        --  . n 	 a . a
3646:509 | DONE dir | na 16 16 | 006ec0 | (1 bytes)   |         .byte 3e                     
3646:509 | DONE dir | na 16 16 |        |             |                 3e                       --  >
3646:510 | DONE wsp | na 16 16 |        |             |
3646:511 | DONE lbl | na 16 16 | 006ec1 |             | nt_less                              
3646:512 | DONE dir | na 16 16 | 006ec1 | (2 bytes)   |         .byte 1, { NC }              
3646:512 | DONE dir | na 16 16 |        |             |                 01 01                    --  . .
3646:513 | DONE dir | na 16 16 | 006ec3 | (6 bytes)   |         .word nt_greater, xt_less, 0060f2 
3646:513 | DONE dir | na 16 16 |        |             |                 b8 6e df 60 f2 60        --  . n . ` . `
3646:514 | DONE dir | na 16 16 | 006ec9 | (1 bytes)   |         .byte 3c                     
3646:514 | DONE dir | na 16 16 |        |             |                 3c                       --  <
3646:515 | DONE wsp | na 16 16 |        |             |
3646:516 | DONE lbl | na 16 16 | 006eca |             | nt_zero-equal                        
3646:517 | DONE dir | na 16 16 | 006eca | (2 bytes)   |         .byte 2, { NC }              
3646:517 | DONE dir | na 16 16 |        |             |                 02 01                    --  . .
3646:518 | DONE dir | na 16 16 | 006ecc | (6 bytes)   |         .word nt_less, xt_zero-equal, 00629e 
3646:518 | DONE dir | na 16 16 |        |             |                 c1 6e 93 62 9e 62        --  . n . b . b
3646:519 | DONE dir | na 16 16 | 006ed2 | (2 bytes)   |         .byte 30, 3d                 
3646:519 | DONE dir | na 16 16 |        |             |                 30 3d                    --  0 =
3646:520 | DONE wsp | na 16 16 |        |             |
3646:521 | DONE lbl | na 16 16 | 006ed4 |             | nt_not-equal                         
3646:522 | DONE dir | na 16 16 | 006ed4 | (2 bytes)   |         .byte 2, { NC }              
3646:522 | DONE dir | na 16 16 |        |             |                 02 01                    --  . .
3646:523 | DONE dir | na 16 16 | 006ed6 | (6 bytes)   |         .word nt_zero-equal, xt_not-equal, 0060fe 
3646:523 | DONE dir | na 16 16 |        |             |                 ca 6e f3 60 fe 60        --  . n . ` . `
3646:524 | DONE dir | na 16 16 | 006edc | (2 bytes)   |         .byte 3c, 3e                 
3646:524 | DONE dir | na 16 16 |        |             |                 3c 3e                    --  < >
3646:525 | DONE wsp | na 16 16 |        |             |
3646:526 | DONE lbl | na 16 16 | 006ede |             | nt_equal                             
3646:527 | DONE dir | na 16 16 | 006ede | (2 bytes)   |         .byte 1, { NC }              
3646:527 | DONE dir | na 16 16 |        |             |                 01 01                    --  . .
3646:528 | DONE dir | na 16 16 | 006ee0 | (6 bytes)   |         .word nt_not-equal, xt_equal, 00628a 
3646:528 | DONE dir | na 16 16 |        |             |                 d4 6e 7f 62 8a 62        --  . n . b . b
3646:529 | DONE dir | na 16 16 | 006ee6 | (1 bytes)   |         .byte 3d                     
3646:529 | DONE dir | na 16 16 |        |             |                 3d                       --  =
3646:530 | DONE wsp | na 16 16 |        |             |
3646:531 | DONE lbl | na 16 16 | 006ee7 |             | nt_false                             
3646:532 | DONE dir | na 16 16 | 006ee7 | (2 bytes)   |         .byte 5, { NC }              
3646:532 | DONE dir | na 16 16 |        |             |                 05 01                    --  . .
3646:533 | DONE dir | na 16 16 | 006ee9 | (6 bytes)   |         .word nt_equal, xt_zero, 006292 
3646:533 | DONE dir | na 16 16 |        |             |                 de 6e 8b 62 92 62        --  . n . b . b
3646:534 | DONE dir | na 16 16 | 006eef | (5 bytes)   |         .byte 66, 61, 6c, 73, 65     
3646:534 | DONE dir | na 16 16 |        |             |                 66 61 6c 73 65           --  f a l s e
3646:535 | DONE wsp | na 16 16 |        |             |
3646:536 | DONE lbl | na 16 16 | 006ef4 |             | nt_true                              
3646:537 | DONE dir | na 16 16 | 006ef4 | (2 bytes)   |         .byte 4, { NC }              
3646:537 | DONE dir | na 16 16 |        |             |                 04 01                    --  . .
3646:538 | DONE dir | na 16 16 | 006ef6 | (6 bytes)   |         .word nt_false, xt_true, 00692e 
3646:538 | DONE dir | na 16 16 |        |             |                 e7 6e 27 69 2e 69        --  . n ' i . i
3646:539 | DONE dir | na 16 16 | 006efc | (4 bytes)   |         .byte 74, 72, 75, 65         
3646:539 | DONE dir | na 16 16 |        |             |                 74 72 75 65              --  t r u e
3646:540 | DONE wsp | na 16 16 |        |             |
3646:541 | DONE lbl | na 16 16 | 006f00 |             | nt_two                               
3646:542 | DONE dir | na 16 16 | 006f00 | (2 bytes)   |         .byte 1, { NC }              
3646:542 | DONE dir | na 16 16 |        |             |                 01 01                    --  . .
3646:543 | DONE dir | na 16 16 | 006f02 | (6 bytes)   |         .word nt_true, xt_two, 0062f4 
3646:543 | DONE dir | na 16 16 |        |             |                 f4 6e ed 62 f4 62        --  . n . b . b
3646:544 | DONE dir | na 16 16 | 006f08 | (1 bytes)   |         .byte 32                     
3646:544 | DONE dir | na 16 16 |        |             |                 32                       --  2
3646:545 | DONE wsp | na 16 16 |        |             |
3646:546 | DONE lbl | na 16 16 | 006f09 |             | nt_one                               
3646:547 | DONE dir | na 16 16 | 006f09 | (2 bytes)   |         .byte 1, { NC }              
3646:547 | DONE dir | na 16 16 |        |             |                 01 01                    --  . .
3646:548 | DONE dir | na 16 16 | 006f0b | (6 bytes)   |         .word nt_two, xt_one, 0062e8 
3646:548 | DONE dir | na 16 16 |        |             |                 00 6f e1 62 e8 62        --  . o . b . b
3646:549 | DONE dir | na 16 16 | 006f11 | (1 bytes)   |         .byte 31                     
3646:549 | DONE dir | na 16 16 |        |             |                 31                       --  1
3646:550 | DONE wsp | na 16 16 |        |             |
3646:551 | DONE lbl | na 16 16 | 006f12 |             | nt_zero                              
3646:552 | DONE dir | na 16 16 | 006f12 | (2 bytes)   |         .byte 1, { NC }              
3646:552 | DONE dir | na 16 16 |        |             |                 01 01                    --  . .
3646:553 | DONE dir | na 16 16 | 006f14 | (6 bytes)   |         .word nt_one, xt_zero, 006292 
3646:553 | DONE dir | na 16 16 |        |             |                 09 6f 8b 62 92 62        --  	 o . b . b
3646:554 | DONE dir | na 16 16 | 006f1a | (1 bytes)   |         .byte 30                     
3646:554 | DONE dir | na 16 16 |        |             |                 30                       --  0
3646:555 | DONE wsp | na 16 16 |        |             |
3646:556 | DONE lbl | na 16 16 | 006f1b |             | nt_find-name                         
3646:557 | DONE dir | na 16 16 | 006f1b | (2 bytes)   |         .byte 9, 0                   
3646:557 | DONE dir | na 16 16 |        |             |                 09 00                    --  	 .
3646:558 | DONE dir | na 16 16 | 006f1d | (6 bytes)   |         .word nt_zero, xt_find-name, 006686 
3646:558 | DONE dir | na 16 16 |        |             |                 12 6f 30 66 86 66        --  . o 0 f . f
3646:559 | DONE dir | na 16 16 | 006f23 | (9 bytes)   |         .byte 66, 69, 6e, 64, 2d, 6e, 61, 6d, 65 
3646:559 | DONE dir | na 16 16 |        |             |                 66 69 6e 64 2d 6e 61 6d  --  f i n d - n a m
3646:559 | DONE dir | na 16 16 |        |             |                 65                       --  e
3646:560 | DONE wsp | na 16 16 |        |             |
3646:561 | DONE lbl | na 16 16 | 006f2c |             | nt_refill                            
3646:562 | DONE dir | na 16 16 | 006f2c | (2 bytes)   |         .byte 6, 0                   TODO check flags
3646:562 | DONE dir | na 16 16 |        |             |                 06 00                    --  . .
3646:563 | DONE dir | na 16 16 | 006f2e | (6 bytes)   |         .word nt_find-name, xt_refill, 00684e 
3646:563 | DONE dir | na 16 16 |        |             |                 1b 6f 1c 68 4e 68        --  . o . h N h
3646:564 | DONE dir | na 16 16 | 006f34 | (6 bytes)   |         .byte 72, 65, 66, 69, 6c, 6c 
3646:564 | DONE dir | na 16 16 |        |             |                 72 65 66 69 6c 6c        --  r e f i l l
3646:565 | DONE wsp | na 16 16 |        |             |
3646:566 | DONE lbl | na 16 16 | 006f3a |             | nt_parse-name                        
3646:567 | DONE dir | na 16 16 | 006f3a | (2 bytes)   |         .byte &10, 0                 
3646:567 | DONE dir | na 16 16 |        |             |                 0a 00                    --  
 .
3646:568 | DONE dir | na 16 16 | 006f3c | (6 bytes)   |         .word nt_refill, xt_parse-name, 0067c5 
3646:568 | DONE dir | na 16 16 |        |             |                 2c 6f 61 67 c5 67        --  , o a g . g
3646:569 | DONE dir | na 16 16 | 006f42 | (10 bytes)  |         .byte 70, 61, 72, 73, 65, 2d, 6e, 61, 6d, 65 
3646:569 | DONE dir | na 16 16 |        |             |                 70 61 72 73 65 2d 6e 61  --  p a r s e - n a
3646:569 | DONE dir | na 16 16 |        |             |                 6d 65                    --  m e
3646:570 | DONE wsp | na 16 16 |        |             |
3646:571 | DONE lbl | na 16 16 | 006f4c |             | nt_source-id                         
3646:572 | DONE dir | na 16 16 | 006f4c | (2 bytes)   |         .byte 9, { NC }              
3646:572 | DONE dir | na 16 16 |        |             |                 09 01                    --  	 .
3646:573 | DONE dir | na 16 16 | 006f4e | (6 bytes)   |         .word nt_parse-name, xt_source-id, 0068fc 
3646:573 | DONE dir | na 16 16 |        |             |                 3a 6f f6 68 fc 68        --  : o . h . h
3646:574 | DONE dir | na 16 16 | 006f54 | (9 bytes)   |         .byte 73, 6f, 75, 72, 63, 65, 2d, 69, 64 
3646:574 | DONE dir | na 16 16 |        |             |                 73 6f 75 72 63 65 2d 69  --  s o u r c e - i
3646:574 | DONE dir | na 16 16 |        |             |                 64                       --  d
3646:575 | DONE wsp | na 16 16 |        |             |
3646:576 | DONE lbl | na 16 16 | 006f5d |             | nt_comma                             
3646:577 | DONE dir | na 16 16 | 006f5d | (2 bytes)   |         .byte 1, { NC }              
3646:577 | DONE dir | na 16 16 |        |             |                 01 01                    --  . .
3646:578 | DONE dir | na 16 16 | 006f5f | (6 bytes)   |         .word nt_source-id, xt_comma, 0061c1 
3646:578 | DONE dir | na 16 16 |        |             |                 4c 6f b6 61 c1 61        --  L o . a . a
3646:579 | DONE dir | na 16 16 | 006f65 | (1 bytes)   |         .byte 2c                     
3646:579 | DONE dir | na 16 16 |        |             |                 2c                       --  ,
3646:580 | DONE wsp | na 16 16 |        |             |
3646:581 | DONE lbl | na 16 16 | 006f66 |             | nt_accept                            
3646:582 | DONE dir | na 16 16 | 006f66 | (2 bytes)   |         .byte 6, 00                  TODO check flags
3646:582 | DONE dir | na 16 16 |        |             |                 06 00                    --  . .
3646:583 | DONE dir | na 16 16 | 006f68 | (6 bytes)   |         .word nt_comma, xt_accept, 0063b3 
3646:583 | DONE dir | na 16 16 |        |             |                 5d 6f 30 63 b3 63        --  ] o 0 c . c
3646:584 | DONE dir | na 16 16 | 006f6e | (6 bytes)   |         .byte 61, 63, 63, 65, 70, 74 
3646:584 | DONE dir | na 16 16 |        |             |                 61 63 63 65 70 74        --  a c c e p t
3646:585 | DONE wsp | na 16 16 |        |             |
3646:586 | DONE lbl | na 16 16 | 006f74 |             | nt_backslash                         
3646:587 | DONE dir | na 16 16 | 006f74 | (2 bytes)   |         .byte 1, { NC }              
3646:587 | DONE dir | na 16 16 |        |             |                 01 01                    --  . .
3646:588 | DONE dir | na 16 16 | 006f76 | (6 bytes)   |         .word nt_accept, xt_backslash, 006262 
3646:588 | DONE dir | na 16 16 |        |             |                 66 6f 5e 62 62 62        --  f o ^ b b b
3646:589 | DONE dir | na 16 16 | 006f7c | (1 bytes)   |         .byte 5c                     
3646:589 | DONE dir | na 16 16 |        |             |                 5c                       --  \
3646:590 | DONE wsp | na 16 16 |        |             |
3646:591 | DONE lbl | na 16 16 | 006f7d |             | nt_tuck                              
3646:592 | DONE dir | na 16 16 | 006f7d | (2 bytes)   |         .byte 4, { NC }              
3646:592 | DONE dir | na 16 16 |        |             |                 04 01                    --  . .
3646:593 | DONE dir | na 16 16 | 006f7f | (6 bytes)   |         .word nt_backslash, xt_tuck, 006937 
3646:593 | DONE dir | na 16 16 |        |             |                 74 6f 2f 69 37 69        --  t o / i 7 i
3646:594 | DONE dir | na 16 16 | 006f85 | (4 bytes)   |         .byte 74, 75, 63, 6b         
3646:594 | DONE dir | na 16 16 |        |             |                 74 75 63 6b              --  t u c k
3646:595 | DONE wsp | na 16 16 |        |             |
3646:596 | DONE lbl | na 16 16 | 006f89 |             | nt_nip                               
3646:597 | DONE dir | na 16 16 | 006f89 | (2 bytes)   |         .byte 3, { NC }              
3646:597 | DONE dir | na 16 16 |        |             |                 03 01                    --  . .
3646:598 | DONE dir | na 16 16 | 006f8b | (6 bytes)   |         .word nt_tuck, xt_nip, 006739 
3646:598 | DONE dir | na 16 16 |        |             |                 7d 6f 37 67 39 67        --  } o 7 g 9 g
3646:599 | DONE dir | na 16 16 | 006f91 | (3 bytes)   |         .byte 6e, 69, 70             
3646:599 | DONE dir | na 16 16 |        |             |                 6e 69 70                 --  n i p
3646:600 | DONE wsp | na 16 16 |        |             |
3646:601 | DONE lbl | na 16 16 | 006f94 |             | nt_mrot                              
3646:602 | DONE dir | na 16 16 | 006f94 | (2 bytes)   |         .byte 4, { NC }              
3646:602 | DONE dir | na 16 16 |        |             |                 04 01                    --  . .
3646:603 | DONE dir | na 16 16 | 006f96 | (6 bytes)   |         .word nt_nip, xt_mrot, 00627e 
3646:603 | DONE dir | na 16 16 |        |             |                 89 6f 76 62 7e 62        --  . o v b ~ b
3646:604 | DONE dir | na 16 16 | 006f9c | (4 bytes)   |         .byte 2d, 72, 6f, 74         
3646:604 | DONE dir | na 16 16 |        |             |                 2d 72 6f 74              --  - r o t
3646:605 | DONE wsp | na 16 16 |        |             |
3646:606 | DONE lbl | na 16 16 | 006fa0 |             | nt_rot                               
3646:607 | DONE dir | na 16 16 | 006fa0 | (2 bytes)   |         .byte 3, { NC }              
3646:607 | DONE dir | na 16 16 |        |             |                 03 01                    --  . .
3646:608 | DONE dir | na 16 16 | 006fa2 | (6 bytes)   |         .word nt_mrot, xt_rot, 006857 
3646:608 | DONE dir | na 16 16 |        |             |                 94 6f 4f 68 57 68        --  . o O h W h
3646:609 | DONE dir | na 16 16 | 006fa8 | (3 bytes)   |         .byte 72, 6f, 74             
3646:609 | DONE dir | na 16 16 |        |             |                 72 6f 74                 --  r o t
3646:610 | DONE wsp | na 16 16 |        |             |
3646:611 | DONE lbl | na 16 16 | 006fab |             | nt_execute                           
3646:612 | DONE dir | na 16 16 | 006fab | (2 bytes)   |         .byte 7, { NC }              
3646:612 | DONE dir | na 16 16 |        |             |                 07 01                    --  . .
3646:613 | DONE dir | na 16 16 | 006fad | (6 bytes)   |         .word nt_rot, xt_execute, 00662f 
3646:613 | DONE dir | na 16 16 |        |             |                 a0 6f 25 66 2f 66        --  . o % f / f
3646:614 | DONE dir | na 16 16 | 006fb3 | (7 bytes)   |         .byte 65, 78, 65, 63, 75, 74, 65 
3646:614 | DONE dir | na 16 16 |        |             |                 65 78 65 63 75 74 65     --  e x e c u t e
3646:615 | DONE wsp | na 16 16 |        |             |
3646:616 | DONE lbl | na 16 16 | 006fba |             | nt_here                              
3646:617 | DONE dir | na 16 16 | 006fba | (2 bytes)   |         .byte 4, { NC }              
3646:617 | DONE dir | na 16 16 |        |             |                 04 01                    --  . .
3646:618 | DONE dir | na 16 16 | 006fbc | (6 bytes)   |         .word nt_execute, xt_here, 00669c 
3646:618 | DONE dir | na 16 16 |        |             |                 ab 6f 96 66 9c 66        --  . o . f . f
3646:619 | DONE dir | na 16 16 | 006fc2 | (4 bytes)   |         .byte 68, 65, 72, 65         
3646:619 | DONE dir | na 16 16 |        |             |                 68 65 72 65              --  h e r e
3646:620 | DONE wsp | na 16 16 |        |             |
3646:621 | DONE lbl | na 16 16 | 006fc6 |             | nt_2drop                             
3646:622 | DONE dir | na 16 16 | 006fc6 | (2 bytes)   |         .byte 5, { NC }              
3646:622 | DONE dir | na 16 16 |        |             |                 05 01                    --  . .
3646:623 | DONE dir | na 16 16 | 006fc8 | (6 bytes)   |         .word nt_here, xt_2drop, 0062ff 
3646:623 | DONE dir | na 16 16 |        |             |                 ba 6f f9 62 ff 62        --  . o . b . b
3646:624 | DONE dir | na 16 16 | 006fce | (5 bytes)   |         .byte 32, 64, 72, 6f, 70     
3646:624 | DONE dir | na 16 16 |        |             |                 32 64 72 6f 70           --  2 d r o p
3646:625 | DONE wsp | na 16 16 |        |             |
3646:626 | DONE lbl | na 16 16 | 006fd3 |             | nt_rfetch                            
3646:627 | DONE dir | na 16 16 | 006fd3 | (2 bytes)   |         .byte 2, 0                   we follow Gforth in making this not CO
3646:627 | DONE dir | na 16 16 |        |             |                 02 00                    --  . .
3646:628 | DONE dir | na 16 16 | 006fd5 | (6 bytes)   |         .word nt_2drop, xt_rfetch, 006813 
3646:628 | DONE dir | na 16 16 |        |             |                 c6 6f 0b 68 13 68        --  . o  h . h
3646:629 | DONE dir | na 16 16 | 006fdb | (2 bytes)   |         .byte 72, 40                 
3646:629 | DONE dir | na 16 16 |        |             |                 72 40                    --  r @
3646:630 | DONE wsp | na 16 16 |        |             |
3646:631 | DONE lbl | na 16 16 | 006fdd |             | nt_fromr                             
3646:632 | DONE dir | na 16 16 | 006fdd | (2 bytes)   |         .byte 2, { CO }              
3646:632 | DONE dir | na 16 16 |        |             |                 02 04                    --  . .
3646:633 | DONE dir | na 16 16 | 006fdf | (6 bytes)   |         .word nt_rfetch, xt_fromr, 00681b 
3646:633 | DONE dir | na 16 16 |        |             |                 d3 6f 14 68 1b 68        --  . o . h . h
3646:634 | DONE dir | na 16 16 | 006fe5 | (2 bytes)   |         .byte 72, 3e                 
3646:634 | DONE dir | na 16 16 |        |             |                 72 3e                    --  r >
3646:635 | DONE wsp | na 16 16 |        |             |
3646:636 | DONE lbl | na 16 16 | 006fe7 |             | nt_tor                               
3646:637 | DONE dir | na 16 16 | 006fe7 | (2 bytes)   |         .byte 2, { CO }              
3646:637 | DONE dir | na 16 16 |        |             |                 02 04                    --  . .
3646:638 | DONE dir | na 16 16 | 006fe9 | (6 bytes)   |         .word nt_fromr, xt_tor, 00612c 
3646:638 | DONE dir | na 16 16 |        |             |                 dd 6f 25 61 2c 61        --  . o % a , a
3646:639 | DONE dir | na 16 16 | 006fef | (2 bytes)   |         .byte 3e, 72                 
3646:639 | DONE dir | na 16 16 |        |             |                 3e 72                    --  > r
3646:640 | DONE wsp | na 16 16 |        |             |
3646:641 | DONE lbl | na 16 16 | 006ff1 |             | nt_char-num                          
3646:642 | DONE dir | na 16 16 | 006ff1 | (2 bytes)   |         .byte &11, { NC }            
3646:642 | DONE dir | na 16 16 |        |             |                 0b 01                    --   .
3646:643 | DONE dir | na 16 16 | 006ff3 | (6 bytes)   |         .word nt_tor, xt_char-num, 0064af 
3646:643 | DONE dir | na 16 16 |        |             |                 e7 6f 74 64 af 64        --  . o t d . d
3646:644 | DONE dir | na 16 16 | 006ff9 | (11 bytes)  |         .byte 63, 68, 61, 72, 3e, 6e, 75, 6d, 62, 65, 72 
3646:644 | DONE dir | na 16 16 |        |             |                 63 68 61 72 3e 6e 75 6d  --  c h a r > n u m
3646:644 | DONE dir | na 16 16 |        |             |                 62 65 72                 --  b e r
3646:645 | DONE wsp | na 16 16 |        |             |
3646:646 | DONE lbl | na 16 16 | 007004 |             | nt_over                              
3646:647 | DONE dir | na 16 16 | 007004 | (2 bytes)   |         .byte 4, { NC }              
3646:647 | DONE dir | na 16 16 |        |             |                 04 01                    --  . .
3646:648 | DONE dir | na 16 16 | 007006 | (6 bytes)   |         .word nt_char-num, xt_over, 006747 
3646:648 | DONE dir | na 16 16 |        |             |                 f1 6f 41 67 47 67        --  . o A g G g
3646:649 | DONE dir | na 16 16 | 00700c | (4 bytes)   |         .byte 6f, 76, 65, 72         
3646:649 | DONE dir | na 16 16 |        |             |                 6f 76 65 72              --  o v e r
3646:650 | DONE wsp | na 16 16 |        |             |
3646:651 | DONE lbl | na 16 16 | 007010 |             | nt_fetch                             
3646:652 | DONE dir | na 16 16 | 007010 | (2 bytes)   |         .byte 1, { NC }              
3646:652 | DONE dir | na 16 16 |        |             |                 01 01                    --  . .
3646:653 | DONE dir | na 16 16 | 007012 | (6 bytes)   |         .word nt_over, xt_fetch, 006247 
3646:653 | DONE dir | na 16 16 |        |             |                 04 70 43 62 47 62        --  . p C b G b
3646:654 | DONE dir | na 16 16 | 007018 | (1 bytes)   |         .byte 40                     
3646:654 | DONE dir | na 16 16 |        |             |                 40                       --  @
3646:655 | DONE wsp | na 16 16 |        |             |
3646:656 | DONE lbl | na 16 16 | 007019 |             | nt_store                             
3646:657 | DONE dir | na 16 16 | 007019 | (2 bytes)   |         .byte 1, { NC }              
3646:657 | DONE dir | na 16 16 |        |             |                 01 01                    --  . .
3646:658 | DONE dir | na 16 16 | 00701b | (6 bytes)   |         .word nt_fetch, xt_store, 006242 
3646:658 | DONE dir | na 16 16 |        |             |                 10 70 37 62 42 62        --  . p 7 b B b
3646:659 | DONE dir | na 16 16 | 007021 | (1 bytes)   |         .byte 21                     
3646:659 | DONE dir | na 16 16 |        |             |                 21                       --  !
3646:660 | DONE wsp | na 16 16 |        |             |
3646:661 | DONE lbl | na 16 16 | 007022 |             | nt_swap                              
3646:662 | DONE dir | na 16 16 | 007022 | (2 bytes)   |         .byte 4, { NC }              
3646:662 | DONE dir | na 16 16 |        |             |                 04 01                    --  . .
3646:663 | DONE dir | na 16 16 | 007024 | (6 bytes)   |         .word nt_store, xt_swap, 006926 
3646:663 | DONE dir | na 16 16 |        |             |                 19 70 21 69 26 69        --  . p ! i & i
3646:664 | DONE dir | na 16 16 | 00702a | (4 bytes)   |         .byte 73, 77, 61, 70         
3646:664 | DONE dir | na 16 16 |        |             |                 73 77 61 70              --  s w a p
3646:665 | DONE wsp | na 16 16 |        |             |
3646:666 | DONE lbl | na 16 16 | 00702e |             | nt_dup                               
3646:667 | DONE dir | na 16 16 | 00702e | (2 bytes)   |         .byte 3, { NC }              
3646:667 | DONE dir | na 16 16 |        |             |                 03 01                    --  . .
3646:668 | DONE dir | na 16 16 | 007030 | (6 bytes)   |         .word nt_swap, xt_dup, 0065f2 
3646:668 | DONE dir | na 16 16 |        |             |                 22 70 ee 65 f2 65        --  " p . e . e
3646:669 | DONE dir | na 16 16 | 007036 | (3 bytes)   |         .byte 64, 75, 70             
3646:669 | DONE dir | na 16 16 |        |             |                 64 75 70                 --  d u p
3646:670 | DONE wsp | na 16 16 |        |             |
3646:671 | DONE cmt | na 16 16 |        |             | ; DROP is always the first entry in dictionary
3646:672 | DONE lbl | na 16 16 | 007039 |             | nt_drop                              
3646:673 | DONE dir | na 16 16 | 007039 | (2 bytes)   |         .byte 4, { NC }              
3646:673 | DONE dir | na 16 16 |        |             |                 04 01                    --  . .
3646:674 | DONE dir | na 16 16 | 00703b | (6 bytes)   |         .word nt_dup, xt_drop, 0065c6 
3646:674 | DONE dir | na 16 16 |        |             |                 2e 70 c2 65 c6 65        --  . p . e . e
3646:675 | DONE dir | na 16 16 | 007041 | (4 bytes)   |         .byte 64, 72, 6f, 70         
3646:675 | DONE dir | na 16 16 |        |             |                 64 72 6f 70              --  d r o p
3646:676 | DONE wsp | na 16 16 |        |             |
3646:677 | DONE cmt | na 16 16 |        |             | ; END
3647:000 | DONE wsp | na 16 16 |        |             |
3648:000 | DONE cmt | na 16 16 |        |             | ; ===================================================================
3649:000 | DONE cmt | na 16 16 |        |             | ; CODE FIELD ROUTINES
3650:000 | DONE wsp | na 16 16 |        |             |
3651:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
3652:000 | DONE cmt | na 16 16 |        |             | ; DOCONST
3653:000 | DONE cmt | na 16 16 |        |             | ; Execute a constant: Push the data in the first two byte of the Data Field onto
3654:000 | DONE cmt | na 16 16 |        |             | ; the stack
3655:000 | DONE lbl | na 16 16 | 007045 |             | doconst                              
3656:000 | DONE dir | na 16 16 |        |             |         .!a16                        
3657:000 | DONE dir | na 16 16 |        |             |         .!xy16                       
3658:000 | DONE ins | na 16 16 | 007045 | ca          |                 dex                  make room on Data Stack
3659:000 | DONE ins | na 16 16 | 007046 | ca          |                 dex                  
3660:000 | DONE ins | na 16 16 | 007047 | 94 00       |                 sty.dx 00            
3661:000 | DONE wsp | na 16 16 |        |             |
3662:000 | DONE cmt | na 16 16 |        |             |                 ; The value we need is stored two bytes after the JSR return
3663:000 | DONE cmt | na 16 16 |        |             |                 ; address, which in turn is what is on top of the Return Stack
3664:000 | DONE ins | na 16 16 | 007049 | 68          |                 pla                  get the return address
3665:000 | DONE ins | na 16 16 | 00704a | 85 16       |                 sta.d 000216         
3666:000 | DONE wsp | na 16 16 |        |             |
3667:000 | DONE cmt | na 16 16 |        |             |                 ; start Y as index off with 1 instead of zero because of 65816's
3668:000 | DONE cmt | na 16 16 |        |             |                 ; address handling
3669:000 | DONE ins | na 16 16 | 00704c | a0 01 00    |                 ldy.# 0001           
3670:000 | DONE ins | na 16 16 | 00704f | b1 16       |                 lda.diy 000216       LDA (TMP1),Y
3671:000 | DONE ins | na 16 16 | 007051 | a8          |                 tay                  
3672:000 | DONE wsp | na 16 16 |        |             |
3673:000 | DONE ins | na 16 16 | 007052 | 60          |                 rts                  takes us to original caller
3674:000 | DONE wsp | na 16 16 |        |             |
3675:000 | DONE wsp | na 16 16 |        |             |
3676:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
3677:000 | DONE cmt | na 16 16 |        |             | ; DODOES
3678:000 | DONE cmt | na 16 16 |        |             | ; Used in combination with DOES>'s runtime portion to actually do the work of
3679:000 | DONE cmt | na 16 16 |        |             | ; the new word. See DOES> and docs/create-does.txt for details. Uses tmp3
3680:000 | DONE lbl | na 16 16 | 007053 |             | dodoes                               
3681:000 | DONE cmt | na 16 16 |        |             |                 ; Assumes the address of the CFA of the original defining word
3682:000 | DONE cmt | na 16 16 |        |             |                 ; (say, CONSTANT) is on the top of the Return Stack. Save it for
3683:000 | DONE cmt | na 16 16 |        |             |                 ; a later jump, adding one byte because of the way the 65816
3684:000 | DONE cmt | na 16 16 |        |             |                 ; works
3685:000 | DONE ins | na 16 16 | 007053 | 68          |                 pla                  
3686:000 | DONE ins | na 16 16 | 007054 | 1a          |                 inc.a                
3687:000 | DONE ins | na 16 16 | 007055 | 85 1a       |                 sta.d 00021a         
3688:000 | DONE wsp | na 16 16 |        |             |
3689:000 | DONE cmt | na 16 16 |        |             |                 ; Next on the Return Stack should be the address of the PFA of
3690:000 | DONE cmt | na 16 16 |        |             |                 ; the calling defined word (say, the name of whatever constant we
3691:000 | DONE cmt | na 16 16 |        |             |                 ; just defined). Move this to the Data Stack, again adding one.
3692:000 | DONE ins | na 16 16 | 007057 | ca          |                 dex                  
3693:000 | DONE ins | na 16 16 | 007058 | ca          |                 dex                  
3694:000 | DONE ins | na 16 16 | 007059 | 94 00       |                 sty.dx 00            
3695:000 | DONE wsp | na 16 16 |        |             |
3696:000 | DONE ins | na 16 16 | 00705b | 7a          |                 ply                  
3697:000 | DONE ins | na 16 16 | 00705c | c8          |                 iny                  
3698:000 | DONE wsp | na 16 16 |        |             |
3699:000 | DONE cmt | na 16 16 |        |             |                 ; This leaves the return address from the original main routine
3700:000 | DONE cmt | na 16 16 |        |             |                 ; on top of the Return Stack. We leave that untouched and jump
3701:000 | DONE cmt | na 16 16 |        |             |                 ; to the special code of the defining word. It's RTS instruction
3702:000 | DONE cmt | na 16 16 |        |             |                 ; will take us back to the main routine
3703:000 | DONE ins | na 16 16 | 00705d | 6c 1a 02    |                 jmp.i 00021a         JMP (TMP3)
3704:000 | DONE wsp | na 16 16 |        |             |
3705:000 | DONE wsp | na 16 16 |        |             |
3706:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
3707:000 | DONE cmt | na 16 16 |        |             | ; DOVAR
3708:000 | DONE cmt | na 16 16 |        |             | ; Execute a variable: Push the address of the first bytes of the Data Field onto
3709:000 | DONE cmt | na 16 16 |        |             | ; the stack. This is called with JSR so we can pick up the address of the
3710:000 | DONE cmt | na 16 16 |        |             | ; calling variable off the 65816's Return Stack. The final RTS takes us to the
3711:000 | DONE cmt | na 16 16 |        |             | ; original caller of the routine that in turn called DOVAR. This is the default
3712:000 | DONE cmt | na 16 16 |        |             | ; routine installed with CREATE
3713:000 | DONE lbl | na 16 16 | 007060 |             | dovar                                
3714:000 | DONE dir | na 16 16 |        |             |         .!a16                        
3715:000 | DONE dir | na 16 16 |        |             |         .!xy16                       
3716:000 | DONE ins | na 16 16 | 007060 | ca          |                 dex                  make room on Data Stack
3717:000 | DONE ins | na 16 16 | 007061 | ca          |                 dex                  
3718:000 | DONE ins | na 16 16 | 007062 | 94 00       |                 sty.dx 00            
3719:000 | DONE wsp | na 16 16 |        |             |
3720:000 | DONE cmt | na 16 16 |        |             |                 ; The address we need is stored in the two bytes after the JSR
3721:000 | DONE cmt | na 16 16 |        |             |                 ; return address, which in turn is what is on top of the Return
3722:000 | DONE cmt | na 16 16 |        |             |                 ; Stack
3723:000 | DONE ins | na 16 16 | 007064 | 7a          |                 ply                  value is now TOS
3724:000 | DONE ins | na 16 16 | 007065 | c8          |                 iny                  add one because of 65816's address handling
3725:000 | DONE wsp | na 16 16 |        |             |
3726:000 | DONE ins | na 16 16 | 007066 | 60          |                 rts                  takes us to original caller
3727:000 | DONE wsp | na 16 16 |        |             |
3728:000 | DONE wsp | na 16 16 |        |             |
3729:000 | DONE cmt | na 16 16 |        |             | ; ===================================================================
3730:000 | DONE cmt | na 16 16 |        |             | ; LOW LEVEL HELPER FUNCTIONS
3731:000 | DONE wsp | na 16 16 |        |             |
3732:000 | DONE wsp | na 16 16 |        |             |
3733:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
3734:000 | DONE cmt | na 16 16 |        |             | ; COMPILE OR EXECUTE (AKA INTERPRET)
3735:000 | DONE cmt | na 16 16 |        |             | ; Core routine for interpreter called by EVALUATE and QUIT. We process one line
3736:000 | DONE cmt | na 16 16 |        |             | ; only. Assumes that address of name is in cib and length of whole input
3737:000 | DONE cmt | na 16 16 |        |             | ; string is in ciblen
3738:000 | DONE lbl | na 16 16 | 007067 |             | compex                               
3739:000 | DONE lbl | na 16 16 | 007067 |             | compex_loop                          
3740:000 | DONE dir | na 16 16 |        |             |         .!a16                        
3741:000 | DONE dir | na 16 16 |        |             |         .!xy16                       
3742:000 | DONE cmt | na 16 16 |        |             |                 ; Normally we would use PARSE here with the SPACE character as
3743:000 | DONE cmt | na 16 16 |        |             |                 ; a parameter (PARSE replaces WORD in modern Forths). However,
3744:000 | DONE cmt | na 16 16 |        |             |                 ; Gforth's PARSE-NAME makes more sense as it uses spaces as
3745:000 | DONE cmt | na 16 16 |        |             |                 ; delimiters per default and skips any leading spaces, which
3746:000 | DONE cmt | na 16 16 |        |             |                 ; PARSE doesn't
3747:000 | DONE ins | na 16 16 | 007067 | 20 61 67    |                 jsr 006761           ( "string" -- addr u )
3748:000 | DONE wsp | na 16 16 |        |             |
3749:000 | DONE cmt | na 16 16 |        |             |                 ; TODO decide if we want to make a copy of the string here so
3750:000 | DONE cmt | na 16 16 |        |             |                 ; that we can provide a better error message
3751:000 | DONE wsp | na 16 16 |        |             |
3752:000 | DONE cmt | na 16 16 |        |             |                 ; If PARSE-NAME returns 0 (empty line), no characters were left
3753:000 | DONE cmt | na 16 16 |        |             |                 ; in the line and we need to go get a new line
3754:000 | DONE ins | na 16 16 | 00706a | 98          |                 tya                  force flag check
3755:000 | DONE ins | na 16 16 | 00706b | f0 3f       |                 beq 0070ac           
3756:000 | DONE wsp | na 16 16 |        |             |
3757:000 | DONE cmt | na 16 16 |        |             |                 ; We let the user input words in any case, but use lower case
3758:000 | DONE cmt | na 16 16 |        |             |                 ; internally (sorry, Garth).
3759:000 | DONE ins | na 16 16 | 00706d | 20 12 71    |                 jsr 007112           
3760:000 | DONE wsp | na 16 16 |        |             |
3761:000 | DONE cmt | na 16 16 |        |             |                 ; Go to FIND-NAME to see if this is a word we know
3762:000 | DONE ins | na 16 16 | 007070 | 20 30 66    |                 jsr 006630           ( addr u -- nt | 0 )
3763:000 | DONE wsp | na 16 16 |        |             |
3764:000 | DONE cmt | na 16 16 |        |             |                 ; a zero signals that we didn't find a word in the Dictionary
3765:000 | DONE ins | na 16 16 | 007073 | 98          |                 tya                  
3766:000 | DONE ins | na 16 16 | 007074 | d0 06       |                 bne 00707c           
3767:000 | DONE wsp | na 16 16 |        |             |
3768:000 | DONE cmt | na 16 16 |        |             |                 ; TODO No name token, try NUMBER CONVERSION
3769:000 | DONE wsp | na 16 16 |        |             |
3770:000 | DONE cmt | na 16 16 |        |             |                 ; Number conversion has failed, which means the user screwed up,
3771:000 | DONE cmt | na 16 16 |        |             |                 ; so complain and abort
3772:000 | DONE cmt | na 16 16 |        |             |                 ; TODO see if we can print the offending string first
3773:000 | DONE ins | na 16 16 | 007076 | a9 5e 77    |                 lda.# 00775e         "Unknown word"
3774:000 | DONE ins | na 16 16 | 007079 | 4c d9 70    |                 jmp 0070d9           
3775:000 | DONE wsp | na 16 16 |        |             |
3776:000 | DONE lbl | na 16 16 | 00707c |             | compex_got_name_token                
3777:000 | DONE cmt | na 16 16 |        |             |                 ; We have a known word's nt as TOS. We're going to need its xt
3778:000 | DONE cmt | na 16 16 |        |             |                 ; though, which is four byte father down. This is a quicker
3779:000 | DONE cmt | na 16 16 |        |             |                 ; version of NAME>INT. But first, save a version of nt for
3780:000 | DONE cmt | na 16 16 |        |             |                 ; error handling and compilation stuff.
3781:000 | DONE ins | na 16 16 | 00707c | 84 16       |                 sty.d 000216         
3782:000 | DONE ins | na 16 16 | 00707e | c8          |                 iny                  
3783:000 | DONE ins | na 16 16 | 00707f | c8          |                 iny                  
3784:000 | DONE ins | na 16 16 | 007080 | c8          |                 iny                  
3785:000 | DONE ins | na 16 16 | 007081 | c8          |                 iny                  
3786:000 | DONE ins | na 16 16 | 007082 | b9 00 00    |                 lda.y 0000           LDA $0000,Y
3787:000 | DONE ins | na 16 16 | 007085 | a8          |                 tay                  xt is TOS
3788:000 | DONE wsp | na 16 16 |        |             |
3789:000 | DONE cmt | na 16 16 |        |             |                 ; See if we are in interpret or compile mode
3790:000 | DONE ins | na 16 16 | 007086 | a5 14       |                 lda.d 000214         
3791:000 | DONE ins | na 16 16 | 007088 | d0 14       |                 bne 00709e           
3792:000 | DONE wsp | na 16 16 |        |             |
3793:000 | DONE cmt | na 16 16 |        |             |                 ; We are interpreting, so EXECUTE the xt that is TOS. First,
3794:000 | DONE cmt | na 16 16 |        |             |                 ; though, see if this isn't a compile-only word, which would be
3795:000 | DONE cmt | na 16 16 |        |             |                 ; illegal.
3796:000 | DONE ins | na 16 16 | 00708a | b2 16       |                 lda.di 000216        
3797:000 | DONE ins | na 16 16 | 00708c | eb          |                 xba                  flags are MSB
3798:000 | DONE ins | na 16 16 | 00708d | 29 04 00    |                 and.# CO             mask everything but Compile Only bit
3799:000 | DONE ins | na 16 16 | 007090 | f0 06       |                 beq 007098           
3800:000 | DONE wsp | na 16 16 |        |             |
3801:000 | DONE cmt | na 16 16 |        |             |                 ; TODO see if we can print offending word first
3802:000 | DONE ins | na 16 16 | 007092 | a9 50 76    |                 lda.# 007650         
3803:000 | DONE ins | na 16 16 | 007095 | 4c d9 70    |                 jmp 0070d9           
3804:000 | DONE wsp | na 16 16 |        |             |
3805:000 | DONE lbl | na 16 16 | 007098 |             | compex_interpret                     
3806:000 | DONE cmt | na 16 16 |        |             |                 ; We JSR to EXECUTE instead of calling the xt directly because
3807:000 | DONE cmt | na 16 16 |        |             |                 ; the RTS of the word we're executing will bring us back here,
3808:000 | DONE cmt | na 16 16 |        |             |                 ; skipping EXECUTE completely during RTS. If we were to execute
3809:000 | DONE cmt | na 16 16 |        |             |                 ; xt directly, we have to fool around with the Return Stack
3810:000 | DONE cmt | na 16 16 |        |             |                 ; instead, which is actually slightly slower
3811:000 | DONE ins | na 16 16 | 007098 | 20 25 66    |                 jsr 006625           
3812:000 | DONE wsp | na 16 16 |        |             |
3813:000 | DONE cmt | na 16 16 |        |             |                 ; That's quite enough for this word, let's get the next one
3814:000 | DONE ins | na 16 16 | 00709b | 4c 67 70    |                 jmp 007067           
3815:000 | DONE wsp | na 16 16 |        |             |
3816:000 | DONE lbl | na 16 16 | 00709e |             | compex_compile                       
3817:000 | DONE cmt | na 16 16 |        |             |                 ; We're compiling. However, we need to see if this is an
3818:000 | DONE cmt | na 16 16 |        |             |                 ; IMMEDIATE word, which would mean we execute it right now even
3819:000 | DONE cmt | na 16 16 |        |             |                 ; during compilation mode. Fortunately, we saved the nt so life
3820:000 | DONE cmt | na 16 16 |        |             |                 ; is easier
3821:000 | DONE ins | na 16 16 | 00709e | b2 16       |                 lda.di 000216        
3822:000 | DONE ins | na 16 16 | 0070a0 | eb          |                 xba                  flags are MSB
3823:000 | DONE ins | na 16 16 | 0070a1 | 29 02 00    |                 and.# IM             Mask all but IM bit
3824:000 | DONE ins | na 16 16 | 0070a4 | d0 f2       |                 bne 007098           IMMEDIATE word, execute right now
3825:000 | DONE wsp | na 16 16 |        |             |
3826:000 | DONE cmt | na 16 16 |        |             |                 ; Compile the xt into the Dictionary with COMPILE,
3827:000 | DONE ins | na 16 16 | 0070a6 | 20 b9 64    |                 jsr 0064b9           
3828:000 | DONE wsp | na 16 16 |        |             |
3829:000 | DONE ins | na 16 16 | 0070a9 | 4c 67 70    |                 jmp 007067           
3830:000 | DONE wsp | na 16 16 |        |             |
3831:000 | DONE lbl | na 16 16 | 0070ac |             | compex_line_done                     
3832:000 | DONE cmt | na 16 16 |        |             |                 ; drop stuff from PARSE_NAME
3833:000 | DONE ins | na 16 16 | 0070ac | b4 02       |                 ldy.dx 02            
3834:000 | DONE ins | na 16 16 | 0070ae | e8          |                 inx                  
3835:000 | DONE ins | na 16 16 | 0070af | e8          |                 inx                  
3836:000 | DONE ins | na 16 16 | 0070b0 | e8          |                 inx                  
3837:000 | DONE ins | na 16 16 | 0070b1 | e8          |                 inx                  
3838:000 | DONE wsp | na 16 16 |        |             |
3839:000 | DONE ins | na 16 16 | 0070b2 | 60          |                 rts                  
3840:000 | DONE wsp | na 16 16 |        |             |
3841:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
3842:000 | DONE cmt | na 16 16 |        |             | ; COMPILE WORDS, JUMPS AND SUBROUTINE JUMPS INTO CODE
3843:000 | DONE cmt | na 16 16 |        |             | ; These three routines compile instructions such as "jsr xt_words" into a word
3844:000 | DONE cmt | na 16 16 |        |             | ; at compile time so they are available at run time. Use by pushing the word or
3845:000 | DONE cmt | na 16 16 |        |             | ; address to be compiled on the Return Stack with
3846:000 | DONE cmt | na 16 16 |        |             | ;
3847:000 | DONE cmt | na 16 16 |        |             | ;       phe.# <WORD>    ; PEA <WORD>
3848:000 | DONE cmt | na 16 16 |        |             | ;
3849:000 | DONE cmt | na 16 16 |        |             | ; Followed by a jump to which ever versions we need. Words that use this routine
3850:000 | DONE cmt | na 16 16 |        |             | ; may not be natively compiled. We use "cmpl" as not to confuse these routines
3851:000 | DONE cmt | na 16 16 |        |             | ; with the COMPILE, word. This routine uses tmptos. Always call this with
3852:000 | DONE cmt | na 16 16 |        |             | ; a subroutine jump, which means no combining JSR/RTS to JMP.
3853:000 | DONE cmt | na 16 16 |        |             | ; TODO see if we need to add a JSR.L variant at some point
3854:000 | DONE wsp | na 16 16 |        |             |
3855:000 | DONE dir | na 16 16 |        |             |         .!a16                        paranoid
3856:000 | DONE lbl | na 16 16 | 0070b3 |             | cmpl_word                            
3857:000 | DONE ins | na 16 16 | 0070b3 | a9 00 00    |                 lda.# 0000           zero value as a flag, compile word only
3858:000 | DONE ins | na 16 16 | 0070b6 | 80 08       |                 bra 0070c0           
3859:000 | DONE lbl | na 16 16 | 0070b8 |             | cmpl_subroutine                      
3860:000 | DONE ins | na 16 16 | 0070b8 | a9 20 00    |                 lda.# 0020           compile "JSR" opcode first
3861:000 | DONE ins | na 16 16 | 0070bb | 80 03       |                 bra 0070c0           
3862:000 | DONE lbl | na 16 16 | 0070bd |             | cmpl_jump                            
3863:000 | DONE ins | na 16 16 | 0070bd | a9 4c 00    |                 lda.# 004c           compile "JMP", fall through to cmpl_common
3864:000 | DONE lbl | na 16 16 | 0070c0 |             | cmpl_common                          
3865:000 | DONE cmt | na 16 16 |        |             |                 ; we're going to need the Y register to get anything done
3866:000 | DONE ins | na 16 16 | 0070c0 | 84 06       |                 sty.d 000206         
3867:000 | DONE wsp | na 16 16 |        |             |
3868:000 | DONE ins | na 16 16 | 0070c2 | a8          |                 tay                  force flag check
3869:000 | DONE ins | na 16 16 | 0070c3 | f0 08       |                 beq 0070cd           came in through cmpl_word, just compile body
3870:000 | DONE wsp | na 16 16 |        |             |
3871:000 | DONE cmt | na 16 16 |        |             |                 ; A contains an opcode that must be compiled first. This is an
3872:000 | DONE cmt | na 16 16 |        |             |                 ; optimized version of C, ("c-comma")
3873:000 | DONE ins | na 16 16 | 0070c5 | e2 20       |                 sep 20               
3873:001 | DONE ctl | na  8 16 |        |             |         .!a8
3874:000 | DONE ins | na  8 16 | 0070c7 | 92 00       |                 sta.di 000200        STA (CP)
3875:000 | DONE ins | na  8 16 | 0070c9 | c2 20       |                 rep 20               
3875:001 | DONE ctl | na 16 16 |        |             |         .!a16
3876:000 | DONE ins | na 16 16 | 0070cb | e6 00       |                 inc.d 000200         fall through to cmpl_body
3877:000 | DONE lbl | na 16 16 | 0070cd |             | cmpl_body                            
3878:000 | DONE ins | na 16 16 | 0070cd | 7a          |                 ply                  the return address we'll need later
3879:000 | DONE wsp | na 16 16 |        |             |
3880:000 | DONE ins | na 16 16 | 0070ce | 68          |                 pla                  next value on stack is the word to compile
3881:000 | DONE ins | na 16 16 | 0070cf | 92 00       |                 sta.di 000200        this is a quicker version of , ("comma")
3882:000 | DONE ins | na 16 16 | 0070d1 | e6 00       |                 inc.d 000200         
3883:000 | DONE ins | na 16 16 | 0070d3 | e6 00       |                 inc.d 000200         
3884:000 | DONE wsp | na 16 16 |        |             |
3885:000 | DONE ins | na 16 16 | 0070d5 | 5a          |                 phy                  make sure we can get back home
3886:000 | DONE wsp | na 16 16 |        |             |
3887:000 | DONE ins | na 16 16 | 0070d6 | a4 06       |                 ldy.d 000206         restore Data Stack
3888:000 | DONE wsp | na 16 16 |        |             |
3889:000 | DONE ins | na 16 16 | 0070d8 | 60          |                 rts                  
3890:000 | DONE wsp | na 16 16 |        |             |
3891:000 | DONE wsp | na 16 16 |        |             |
3892:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
3893:000 | DONE cmt | na 16 16 |        |             | ; FATAL ERROR
3894:000 | DONE cmt | na 16 16 |        |             | ; Take address of error string from A, print it and then call abort
3895:000 | DONE lbl | na 16 16 | 0070d9 |             | error                                
3896:000 | DONE ins | na 16 16 | 0070d9 | 20 df 70    |                 jsr 0070df           
3897:000 | DONE ins | na 16 16 | 0070dc | 4c 97 60    |                 jmp 006097           
3898:000 | DONE wsp | na 16 16 |        |             |
3899:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
3900:000 | DONE cmt | na 16 16 |        |             | ; Print a zero terminated string to the console, adding a CR character. Takes
3901:000 | DONE cmt | na 16 16 |        |             | ; the address of the string in 16-bit A register, calls put_chr.  A is
3902:000 | DONE cmt | na 16 16 |        |             | ; destroyed. We could probably figure out some way to use TYPE instead, but zero
3903:000 | DONE cmt | na 16 16 |        |             | ; terminated strings are easier for the 65816 to use.
3904:000 | DONE cmt | na 16 16 |        |             | ; TODO add version without final line feed
3905:000 | DONE lbl | na 16 16 | 0070df |             | print_string                         
3906:000 | DONE dir | na 16 16 |        |             |         .!a16                        
3907:000 | DONE dir | na 16 16 |        |             |         .!xy16                       
3908:000 | DONE cmt | na 16 16 |        |             |                 ; don't use tmpdsp for X because we don't know if the user has
3909:000 | DONE cmt | na 16 16 |        |             |                 ; used it for something already
3910:000 | DONE ins | na 16 16 | 0070df | da          |                 phx                  
3911:000 | DONE ins | na 16 16 | 0070e0 | aa          |                 tax                  x16 contains address of string
3912:000 | DONE lbl | na 16 16 | 0070e1 |             | @                                    
3913:000 | DONE ins | na 16 16 | 0070e1 | e2 20       |                 sep 20               
3913:001 | DONE ctl | na  8 16 |        |             |         .!a8
3914:000 | DONE ins | na  8 16 | 0070e3 | bd 00 00    |                 lda.x 0000           LDA $0000,X
3915:000 | DONE ins | na  8 16 | 0070e6 | f0 06       |                 beq 0070ee           
3916:000 | DONE ins | na  8 16 | 0070e8 | 20 36 60    |                 jsr 006036           
3917:000 | DONE ins | na  8 16 | 0070eb | e8          |                 inx                  
3918:000 | DONE ins | na  8 16 | 0070ec | 80 f3       |                 bra 0070e1           
3919:000 | DONE wsp | na  8 16 |        |             |
3920:000 | DONE lbl | na  8 16 | 0070ee |             | print_string_done                    
3921:000 | DONE ins | na  8 16 | 0070ee | a9 0a       |                 lda.# AscLF          should be CR on some systems
3922:000 | DONE ins | na  8 16 | 0070f0 | 20 36 60    |                 jsr 006036           
3923:000 | DONE ins | na  8 16 | 0070f3 | c2 20       |                 rep 20               
3923:001 | DONE ctl | na 16 16 |        |             |         .!a16
3924:000 | DONE ins | na 16 16 | 0070f5 | fa          |                 plx                  
3925:000 | DONE ins | na 16 16 | 0070f6 | 60          |                 rts                  
3926:000 | DONE wsp | na 16 16 |        |             |
3927:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
3928:000 | DONE cmt | na 16 16 |        |             | ; CONVERT BYTE TO ASCII
3929:000 | DONE cmt | na 16 16 |        |             | ; Convert byte in A to two ASCII hex digits and print them. Calls
3930:000 | DONE cmt | na 16 16 |        |             | ; nibble_to_ascii. Assumes A is 8 bit.
3931:000 | DONE lbl | na 16 16 | 0070f7 |             | byte_to_ascii                        
3932:000 | DONE ins | na 16 16 | 0070f7 | 48          |                 pha                  
3933:000 | DONE cmt | na 16 16 |        |             |                 ; convert high nibble first
3934:000 | DONE ins | na 16 16 | 0070f8 | 4a          |                 lsr.a                
3935:000 | DONE ins | na 16 16 | 0070f9 | 4a          |                 lsr.a                
3936:000 | DONE ins | na 16 16 | 0070fa | 4a          |                 lsr.a                
3937:000 | DONE ins | na 16 16 | 0070fb | 4a          |                 lsr.a                
3938:000 | DONE ins | na 16 16 | 0070fc | 20 00 71    |                 jsr 007100           
3939:000 | DONE wsp | na 16 16 |        |             |
3940:000 | DONE ins | na 16 16 | 0070ff | 68          |                 pla                  
3941:000 | DONE wsp | na 16 16 |        |             |
3942:000 | DONE cmt | na 16 16 |        |             |                 ; fall thru to nibble_to_ascii
3943:000 | DONE wsp | na 16 16 |        |             |
3944:000 | DONE wsp | na 16 16 |        |             |
3945:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
3946:000 | DONE cmt | na 16 16 |        |             | ; CONVERT NIBBLE TO ASCII
3947:000 | DONE cmt | na 16 16 |        |             | ; Converts the lower nibble of a number in A and returns the ASCII character
3948:000 | DONE cmt | na 16 16 |        |             | ; number, then prints it. Assumes A is 8 bit
3949:000 | DONE lbl | na 16 16 | 007100 |             | nibble_to_ascii                      
3950:000 | DONE ins | na 16 16 | 007100 | 29 0f 00    |                 and.# 000f           
3951:000 | DONE ins | na 16 16 | 007103 | 09 30 00    |                 ora.# 30             
3952:000 | DONE ins | na 16 16 | 007106 | c9 3a 00    |                 cmp.# 003a           '9' + 1
3953:000 | DONE ins | na 16 16 | 007109 | 90 03       |                 bcc 00710e           
3954:000 | DONE ins | na 16 16 | 00710b | 69 06 00    |                 adc.# 0006           
3955:000 | DONE lbl | na 16 16 | 00710e |             | @                                    
3956:000 | DONE ins | na 16 16 | 00710e | 20 36 60    |                 jsr 006036           
3957:000 | DONE dir | na 16 16 |        |             |         .!a16                        
3958:000 | DONE ins | na 16 16 | 007111 | 60          |                 rts                  
3959:000 | DONE wsp | na 16 16 |        |             |
3960:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
3961:000 | DONE cmt | na 16 16 |        |             | ; Convert a string given by ( addr u ) to lowercase in place. Since we have to
3962:000 | DONE cmt | na 16 16 |        |             | ; treat the input buffer as read-only by ANS rules, we have to put the converted
3963:000 | DONE cmt | na 16 16 |        |             | ; string somewhere and then return the new address and length
3964:000 | DONE lbl | na 16 16 | 007112 |             | string_to_lowercase                  
3965:000 | DONE cmt | na 16 16 |        |             |                 ; TODO CODE THIS
3966:000 | DONE ins | na 16 16 | 007112 | 60          |                 rts                  
3967:000 | DONE wsp | na 16 16 |        |             |
3968:000 | DONE wsp | na 16 16 |        |             |
3969:000 | DONE cmt | na 16 16 |        |             | ; ===================================================================
3970:000 | DONE cmt | na 16 16 |        |             | ; HIGH-LEVEL WORDS
3971:000 | DONE wsp | na 16 16 |        |             |
3972:000 | DONE cmt | na 16 16 |        |             | ; These are executed during start up. Remember that we have to put a space at
3973:000 | DONE cmt | na 16 16 |        |             | ; the end of the line if there is another line with code following it. No zero
3974:000 | DONE cmt | na 16 16 |        |             | ; or CR/LF is required
3975:000 | DONE lbl | na 16 16 | 007113 |             | hi-start                             
3976:000 | DONE cmt | na 16 16 |        |             |         ; High level definitions
3977:000 | DONE dir | na 16 16 | 007113 | (37 bytes)  |         .byte 3a, 20, 28, 20, 5b, 63, 68, 61, 72, 5d, 20, 29, 20, (...) ( "parens"
3977:000 | DONE dir | na 16 16 |        |             |                 3a 20 28 20 5b 63 68 61  --  :   (   [ c h a
3977:000 | DONE dir | na 16 16 |        |             |                 72 5d 20 29 20 70 61 72  --  r ]   )   p a r
3977:000 | DONE dir | na 16 16 |        |             |                 73 65 20 32 64 72 6f 70  --  s e   2 d r o p
3977:000 | DONE dir | na 16 16 |        |             |                 20 3b 20 69 6d 6d 65 64  --    ;   i m m e d
3977:000 | DONE dir | na 16 16 |        |             |                 69 61 74 65 20           --  i a t e  
3978:000 | DONE dir | na 16 16 | 007138 | (37 bytes)  |         .byte 3a, 20, 2e, 28, 20, 5b, 63, 68, 61, 72, 5d, 20, 29, (...) .( "dotparens"
3978:000 | DONE dir | na 16 16 |        |             |                 3a 20 2e 28 20 5b 63 68  --  :   . (   [ c h
3978:000 | DONE dir | na 16 16 |        |             |                 61 72 5d 20 29 20 70 61  --  a r ]   )   p a
3978:000 | DONE dir | na 16 16 |        |             |                 72 73 65 20 74 79 70 65  --  r s e   t y p e
3978:000 | DONE dir | na 16 16 |        |             |                 20 3b 20 69 6d 6d 65 64  --    ;   i m m e d
3978:000 | DONE dir | na 16 16 |        |             |                 69 61 74 65 20           --  i a t e  
3979:000 | DONE dir | na 16 16 | 00715d | (56 bytes)  |         .byte 3a, 20, 69, 66, 20, 70, 6f, 73, 74, 70, 6f, 6e, 65, (...) IF
3979:000 | DONE dir | na 16 16 |        |             |                 3a 20 69 66 20 70 6f 73  --  :   i f   p o s
3979:000 | DONE dir | na 16 16 |        |             |                 74 70 6f 6e 65 20 30 62  --  t p o n e   0 b
3979:000 | DONE dir | na 16 16 |        |             |                 72 61 6e 63 68 20 68 65  --  r a n c h   h e
3979:000 | DONE dir | na 16 16 |        |             |                 72 65 20 30 20 2c 20 3b  --  r e   0   ,   ;
3979:000 | DONE dir | na 16 16 |        |             |                 20 69 6d 6d 65 64 69 61  --    i m m e d i a
3979:000 | DONE dir | na 16 16 |        |             |                 74 65 20 63 6f 6d 70 69  --  t e   c o m p i
3979:000 | DONE dir | na 16 16 |        |             |                 6c 65 2d 6f 6e 6c 79 20  --  l e - o n l y  
3979:000 | DONE dir | na 16 16 |        |             |                                          -- 
3980:000 | DONE dir | na 16 16 | 007195 | (44 bytes)  |         .byte 3a, 20, 74, 68, 65, 6e, 20, 68, 65, 72, 65, 20, 73, (...) THEN
3980:000 | DONE dir | na 16 16 |        |             |                 3a 20 74 68 65 6e 20 68  --  :   t h e n   h
3980:000 | DONE dir | na 16 16 |        |             |                 65 72 65 20 73 77 61 70  --  e r e   s w a p
3980:000 | DONE dir | na 16 16 |        |             |                 20 21 20 3b 20 69 6d 6d  --    !   ;   i m m
3980:000 | DONE dir | na 16 16 |        |             |                 65 64 69 61 74 65 20 63  --  e d i a t e   c
3980:000 | DONE dir | na 16 16 |        |             |                 6f 6d 70 69 6c 65 2d 6f  --  o m p i l e - o
3980:000 | DONE dir | na 16 16 |        |             |                 6e 6c 79 20              --  n l y  
3981:000 | DONE dir | na 16 16 | 0071c1 | (68 bytes)  |         .byte 3a, 20, 65, 6c, 73, 65, 20, 70, 6f, 73, 74, 70, 6f, (...) ELSE
3981:000 | DONE dir | na 16 16 |        |             |                 3a 20 65 6c 73 65 20 70  --  :   e l s e   p
3981:000 | DONE dir | na 16 16 |        |             |                 6f 73 74 70 6f 6e 65 20  --  o s t p o n e  
3981:000 | DONE dir | na 16 16 |        |             |                 62 72 61 6e 63 68 20 68  --  b r a n c h   h
3981:000 | DONE dir | na 16 16 |        |             |                 65 72 65 20 30 20 2c 20  --  e r e   0   ,  
3981:000 | DONE dir | na 16 16 |        |             |                 68 65 72 65 20 72 6f 74  --  h e r e   r o t
3981:000 | DONE dir | na 16 16 |        |             |                 20 21 20 3b 20 69 6d 6d  --    !   ;   i m m
3981:000 | DONE dir | na 16 16 |        |             |                 65 64 69 61 74 65 20 63  --  e d i a t e   c
3981:000 | DONE dir | na 16 16 |        |             |                 6f 6d 70 69 6c 65 2d 6f  --  o m p i l e - o
3981:000 | DONE dir | na 16 16 |        |             |                 6e 6c 79 20              --  n l y  
3982:000 | DONE dir | na 16 16 | 007205 | (61 bytes)  |         .byte 3a, 20, 72, 65, 70, 65, 61, 74, 20, 70, 6f, 73, 74, (...) REPEAT
3982:000 | DONE dir | na 16 16 |        |             |                 3a 20 72 65 70 65 61 74  --  :   r e p e a t
3982:000 | DONE dir | na 16 16 |        |             |                 20 70 6f 73 74 70 6f 6e  --    p o s t p o n
3982:000 | DONE dir | na 16 16 |        |             |                 65 20 61 67 61 69 6e 20  --  e   a g a i n  
3982:000 | DONE dir | na 16 16 |        |             |                 68 65 72 65 20 73 77 61  --  h e r e   s w a
3982:000 | DONE dir | na 16 16 |        |             |                 70 20 21 20 3b 20 69 6d  --  p   !   ;   i m
3982:000 | DONE dir | na 16 16 |        |             |                 6d 65 64 69 61 74 65 20  --  m e d i a t e  
3982:000 | DONE dir | na 16 16 |        |             |                 63 6f 6d 70 69 6c 65 2d  --  c o m p i l e -
3982:000 | DONE dir | na 16 16 |        |             |                 6f 6e 6c 79 20           --  o n l y  
3983:000 | DONE dir | na 16 16 | 007242 | (52 bytes)  |         .byte 3a, 20, 75, 6e, 74, 69, 6c, 20, 70, 6f, 73, 74, 70, (...) UNTIL
3983:000 | DONE dir | na 16 16 |        |             |                 3a 20 75 6e 74 69 6c 20  --  :   u n t i l  
3983:000 | DONE dir | na 16 16 |        |             |                 70 6f 73 74 70 6f 6e 65  --  p o s t p o n e
3983:000 | DONE dir | na 16 16 |        |             |                 20 30 62 72 61 6e 63 68  --    0 b r a n c h
3983:000 | DONE dir | na 16 16 |        |             |                 20 2c 20 3b 20 69 6d 6d  --    ,   ;   i m m
3983:000 | DONE dir | na 16 16 |        |             |                 65 64 69 61 74 65 20 63  --  e d i a t e   c
3983:000 | DONE dir | na 16 16 |        |             |                 6f 6d 70 69 6c 65 2d 6f  --  o m p i l e - o
3983:000 | DONE dir | na 16 16 |        |             |                 6e 6c 79 20              --  n l y  
3984:000 | DONE dir | na 16 16 | 007276 | (64 bytes)  |         .byte 3a, 20, 77, 68, 69, 6c, 65, 20, 70, 6f, 73, 74, 70, (...) WHILE
3984:000 | DONE dir | na 16 16 |        |             |                 3a 20 77 68 69 6c 65 20  --  :   w h i l e  
3984:000 | DONE dir | na 16 16 |        |             |                 70 6f 73 74 70 6f 6e 65  --  p o s t p o n e
3984:000 | DONE dir | na 16 16 |        |             |                 20 30 62 72 61 6e 63 68  --    0 b r a n c h
3984:000 | DONE dir | na 16 16 |        |             |                 20 68 65 72 65 20 30 20  --    h e r e   0  
3984:000 | DONE dir | na 16 16 |        |             |                 2c 20 73 77 61 70 20 3b  --  ,   s w a p   ;
3984:000 | DONE dir | na 16 16 |        |             |                 20 69 6d 6d 65 64 69 61  --    i m m e d i a
3984:000 | DONE dir | na 16 16 |        |             |                 74 65 20 63 6f 6d 70 69  --  t e   c o m p i
3984:000 | DONE dir | na 16 16 |        |             |                 6c 65 2d 6f 6e 6c 79 20  --  l e - o n l y  
3984:000 | DONE dir | na 16 16 |        |             |                                          -- 
3985:000 | DONE wsp | na 16 16 |        |             |
3986:000 | DONE cmt | na 16 16 |        |             |         ; High level math definitions. The should be moved to actual 65816 code
3987:000 | DONE cmt | na 16 16 |        |             |         ; for speed at some point. Note we use SM/REM instead of FM/MOD for most
3988:000 | DONE cmt | na 16 16 |        |             |         ; stuff anyway. Definitions for SM/REM and FM/MOD taken von Gforth
3989:000 | DONE cmt | na 16 16 |        |             |         ; sources, see
3990:000 | DONE cmt | na 16 16 |        |             |         ; https://groups.google.com/forum/#!topic/comp.lang.forth/_bx4dJFb9R0
3991:000 | DONE dir | na 16 16 | 0072b6 | (59 bytes)  |         .byte 3a, 20, 73, 6d, 2f, 72, 65, 6d, 20, 6f, 76, 65, 72, (...) 
3991:000 | DONE dir | na 16 16 |        |             |                 3a 20 73 6d 2f 72 65 6d  --  :   s m / r e m
3991:000 | DONE dir | na 16 16 |        |             |                 20 6f 76 65 72 20 3e 72  --    o v e r   > r
3991:000 | DONE dir | na 16 16 |        |             |                 20 64 75 70 20 3e 72 20  --    d u p   > r  
3991:000 | DONE dir | na 16 16 |        |             |                 61 62 73 20 2d 72 6f 74  --  a b s   - r o t
3991:000 | DONE dir | na 16 16 |        |             |                 20 64 61 62 73 20 72 6f  --    d a b s   r o
3991:000 | DONE dir | na 16 16 |        |             |                 74 20 75 6d 2f 6d 6f 64  --  t   u m / m o d
3991:000 | DONE dir | na 16 16 |        |             |                 20 72 3e 20 72 40 20 78  --    r >   r @   x
3991:000 | DONE dir | na 16 16 |        |             |                 6f 72 20                 --  o r  
3992:000 | DONE dir | na 16 16 | 0072f1 | (51 bytes)  |         .byte 30, 3c, 20, 69, 66, 20, 6e, 65, 67, 61, 74, 65, 20, (...) 
3992:000 | DONE dir | na 16 16 |        |             |                 30 3c 20 69 66 20 6e 65  --  0 <   i f   n e
3992:000 | DONE dir | na 16 16 |        |             |                 67 61 74 65 20 74 68 65  --  g a t e   t h e
3992:000 | DONE dir | na 16 16 |        |             |                 6e 20 72 3e 20 30 3c 20  --  n   r >   0 <  
3992:000 | DONE dir | na 16 16 |        |             |                 69 66 20 73 77 61 70 20  --  i f   s w a p  
3992:000 | DONE dir | na 16 16 |        |             |                 6e 65 67 61 74 65 20 73  --  n e g a t e   s
3992:000 | DONE dir | na 16 16 |        |             |                 77 61 70 20 74 68 65 6e  --  w a p   t h e n
3992:000 | DONE dir | na 16 16 |        |             |                 20 3b 20                 --    ;  
3993:000 | DONE dir | na 16 16 | 007324 | (57 bytes)  |         .byte 3a, 20, 66, 6d, 2f, 6d, 6f, 64, 20, 64, 75, 70, 20, (...) 
3993:000 | DONE dir | na 16 16 |        |             |                 3a 20 66 6d 2f 6d 6f 64  --  :   f m / m o d
3993:000 | DONE dir | na 16 16 |        |             |                 20 64 75 70 20 3e 72 20  --    d u p   > r  
3993:000 | DONE dir | na 16 16 |        |             |                 64 75 70 20 30 3c 20 69  --  d u p   0 <   i
3993:000 | DONE dir | na 16 16 |        |             |                 66 20 6e 65 67 61 74 65  --  f   n e g a t e
3993:000 | DONE dir | na 16 16 |        |             |                 20 3e 72 20 64 6e 65 67  --    > r   d n e g
3993:000 | DONE dir | na 16 16 |        |             |                 61 74 65 20 72 3e 20 74  --  a t e   r >   t
3993:000 | DONE dir | na 16 16 |        |             |                 68 65 6e 20 6f 76 65 72  --  h e n   o v e r
3993:000 | DONE dir | na 16 16 |        |             |                 20                       --   
3994:000 | DONE dir | na 16 16 | 00735d | (63 bytes)  |         .byte 30, 3c, 20, 69, 66, 20, 74, 75, 63, 6b, 20, 2b, 20, (...) 
3994:000 | DONE dir | na 16 16 |        |             |                 30 3c 20 69 66 20 74 75  --  0 <   i f   t u
3994:000 | DONE dir | na 16 16 |        |             |                 63 6b 20 2b 20 73 77 61  --  c k   +   s w a
3994:000 | DONE dir | na 16 16 |        |             |                 70 20 74 68 65 6e 20 75  --  p   t h e n   u
3994:000 | DONE dir | na 16 16 |        |             |                 6d 2f 6d 6f 64 20 72 3e  --  m / m o d   r >
3994:000 | DONE dir | na 16 16 |        |             |                 20 30 3c 20 69 66 20 73  --    0 <   i f   s
3994:000 | DONE dir | na 16 16 |        |             |                 77 61 70 20 6e 65 67 61  --  w a p   n e g a
3994:000 | DONE dir | na 16 16 |        |             |                 74 65 20 73 77 61 70 20  --  t e   s w a p  
3994:000 | DONE dir | na 16 16 |        |             |                 74 68 65 6e 20 3b 20     --  t h e n   ;  
3995:000 | DONE dir | na 16 16 | 00739c | (33 bytes)  |         .byte 3a, 20, 2f, 20, 3e, 72, 20, 73, 3e, 64, 20, 72, 3e, (...) 
3995:000 | DONE dir | na 16 16 |        |             |                 3a 20 2f 20 3e 72 20 73  --  :   /   > r   s
3995:000 | DONE dir | na 16 16 |        |             |                 3e 64 20 72 3e 20 73 6d  --  > d   r >   s m
3995:000 | DONE dir | na 16 16 |        |             |                 2f 72 65 6d 20 73 77 61  --  / r e m   s w a
3995:000 | DONE dir | na 16 16 |        |             |                 70 20 64 72 6f 70 20 3b  --  p   d r o p   ;
3995:000 | DONE dir | na 16 16 |        |             |                 20                       --   
3996:000 | DONE dir | na 16 16 | 0073bd | (26 bytes)  |         .byte 3a, 20, 2f, 6d, 6f, 64, 20, 3e, 72, 20, 73, 3e, 64, (...) 
3996:000 | DONE dir | na 16 16 |        |             |                 3a 20 2f 6d 6f 64 20 3e  --  :   / m o d   >
3996:000 | DONE dir | na 16 16 |        |             |                 72 20 73 3e 64 20 72 3e  --  r   s > d   r >
3996:000 | DONE dir | na 16 16 |        |             |                 20 73 6d 2f 72 65 6d 20  --    s m / r e m  
3996:000 | DONE dir | na 16 16 |        |             |                 3b 20                    --  ;  
3997:000 | DONE dir | na 16 16 | 0073d7 | (33 bytes)  |         .byte 3a, 20, 2a, 2f, 20, 3e, 72, 20, 6d, 2a, 20, 72, 3e, (...) 
3997:000 | DONE dir | na 16 16 |        |             |                 3a 20 2a 2f 20 3e 72 20  --  :   * /   > r  
3997:000 | DONE dir | na 16 16 |        |             |                 6d 2a 20 72 3e 20 73 6d  --  m *   r >   s m
3997:000 | DONE dir | na 16 16 |        |             |                 2f 72 65 6d 20 73 77 61  --  / r e m   s w a
3997:000 | DONE dir | na 16 16 |        |             |                 70 20 64 72 6f 70 20 3b  --  p   d r o p   ;
3997:000 | DONE dir | na 16 16 |        |             |                 20                       --   
3998:000 | DONE dir | na 16 16 | 0073f8 | (26 bytes)  |         .byte 3a, 20, 2a, 2f, 6d, 6f, 64, 20, 3e, 72, 20, 6d, 2a, (...) 
3998:000 | DONE dir | na 16 16 |        |             |                 3a 20 2a 2f 6d 6f 64 20  --  :   * / m o d  
3998:000 | DONE dir | na 16 16 |        |             |                 3e 72 20 6d 2a 20 72 3e  --  > r   m *   r >
3998:000 | DONE dir | na 16 16 |        |             |                 20 73 6d 2f 72 65 6d 20  --    s m / r e m  
3998:000 | DONE dir | na 16 16 |        |             |                 3b 20                    --  ;  
3999:000 | DONE wsp | na 16 16 |        |             |
4000:000 | DONE cmt | na 16 16 |        |             |         ; Output definitions. Since these usually involve the user, and humans
4001:000 | DONE cmt | na 16 16 |        |             |         ; are slow, these can stay high-level for the moment. Based on
4002:000 | DONE cmt | na 16 16 |        |             |         ; https://github.com/philburk/pforth/blob/master/fth/numberio.fth
4003:000 | DONE dir | na 16 16 | 007412 | (29 bytes)  |         .byte 3a, 20, 75, 2e, 20, 30, 20, 3c, 23, 20, 23, 73, 20, (...) 
4003:000 | DONE dir | na 16 16 |        |             |                 3a 20 75 2e 20 30 20 3c  --  :   u .   0   <
4003:000 | DONE dir | na 16 16 |        |             |                 23 20 23 73 20 23 3e 20  --  #   # s   # >  
4003:000 | DONE dir | na 16 16 |        |             |                 74 79 70 65 20 73 70 61  --  t y p e   s p a
4003:000 | DONE dir | na 16 16 |        |             |                 63 65 20 3b 20           --  c e   ;  
4004:000 | DONE dir | na 16 16 | 00742f | (44 bytes)  |         .byte 3a, 20, 75, 2e, 72, 20, 3e, 72, 20, 30, 20, 3c, 23, (...) 
4004:000 | DONE dir | na 16 16 |        |             |                 3a 20 75 2e 72 20 3e 72  --  :   u . r   > r
4004:000 | DONE dir | na 16 16 |        |             |                 20 30 20 3c 23 20 23 73  --    0   < #   # s
4004:000 | DONE dir | na 16 16 |        |             |                 20 23 3e 20 72 3e 20 6f  --    # >   r >   o
4004:000 | DONE dir | na 16 16 |        |             |                 76 65 72 20 2d 20 73 70  --  v e r   -   s p
4004:000 | DONE dir | na 16 16 |        |             |                 61 63 65 73 20 74 79 70  --  a c e s   t y p
4004:000 | DONE dir | na 16 16 |        |             |                 65 20 3b 20              --  e   ;  
4005:000 | DONE dir | na 16 16 | 00745b | (60 bytes)  |         .byte 3a, 20, 2e, 72, 20, 3e, 72, 20, 64, 75, 70, 20, 61, (...) 
4005:000 | DONE dir | na 16 16 |        |             |                 3a 20 2e 72 20 3e 72 20  --  :   . r   > r  
4005:000 | DONE dir | na 16 16 |        |             |                 64 75 70 20 61 62 73 20  --  d u p   a b s  
4005:000 | DONE dir | na 16 16 |        |             |                 30 20 3c 23 20 23 73 20  --  0   < #   # s  
4005:000 | DONE dir | na 16 16 |        |             |                 72 6f 74 20 73 69 67 6e  --  r o t   s i g n
4005:000 | DONE dir | na 16 16 |        |             |                 20 23 3e 20 72 3e 20 6f  --    # >   r >   o
4005:000 | DONE dir | na 16 16 |        |             |                 76 65 72 20 2d 20 73 70  --  v e r   -   s p
4005:000 | DONE dir | na 16 16 |        |             |                 61 63 65 73 20 74 79 70  --  a c e s   t y p
4005:000 | DONE dir | na 16 16 |        |             |                 65 20 3b 20              --  e   ;  
4006:000 | DONE dir | na 16 16 | 007497 | (28 bytes)  |         .byte 3a, 20, 75, 64, 2e, 20, 3c, 23, 20, 23, 73, 20, 23, (...) 
4006:000 | DONE dir | na 16 16 |        |             |                 3a 20 75 64 2e 20 3c 23  --  :   u d .   < #
4006:000 | DONE dir | na 16 16 |        |             |                 20 23 73 20 23 3e 20 74  --    # s   # >   t
4006:000 | DONE dir | na 16 16 |        |             |                 79 70 65 20 73 70 61 63  --  y p e   s p a c
4006:000 | DONE dir | na 16 16 |        |             |                 65 20 3b 20              --  e   ;  
4007:000 | DONE dir | na 16 16 | 0074b3 | (43 bytes)  |         .byte 3a, 20, 75, 64, 2e, 72, 20, 3e, 72, 20, 3c, 23, 20, (...) 
4007:000 | DONE dir | na 16 16 |        |             |                 3a 20 75 64 2e 72 20 3e  --  :   u d . r   >
4007:000 | DONE dir | na 16 16 |        |             |                 72 20 3c 23 20 23 73 20  --  r   < #   # s  
4007:000 | DONE dir | na 16 16 |        |             |                 23 3e 20 72 3e 20 6f 76  --  # >   r >   o v
4007:000 | DONE dir | na 16 16 |        |             |                 65 72 20 2d 20 73 70 61  --  e r   -   s p a
4007:000 | DONE dir | na 16 16 |        |             |                 63 65 73 20 74 79 70 65  --  c e s   t y p e
4007:000 | DONE dir | na 16 16 |        |             |                 20 3b 20                 --    ;  
4008:000 | DONE dir | na 16 16 | 0074de | (46 bytes)  |         .byte 3a, 20, 64, 2e, 20, 74, 75, 63, 6b, 20, 64, 61, 62, (...) 
4008:000 | DONE dir | na 16 16 |        |             |                 3a 20 64 2e 20 74 75 63  --  :   d .   t u c
4008:000 | DONE dir | na 16 16 |        |             |                 6b 20 64 61 62 73 20 3c  --  k   d a b s   <
4008:000 | DONE dir | na 16 16 |        |             |                 23 20 23 73 20 72 6f 74  --  #   # s   r o t
4008:000 | DONE dir | na 16 16 |        |             |                 20 73 69 67 6e 20 23 3e  --    s i g n   # >
4008:000 | DONE dir | na 16 16 |        |             |                 20 74 79 70 65 20 73 70  --    t y p e   s p
4008:000 | DONE dir | na 16 16 |        |             |                 61 63 65 20 3b 20        --  a c e   ;  
4009:000 | DONE dir | na 16 16 | 00750c | (61 bytes)  |         .byte 3a, 20, 64, 2e, 72, 20, 3e, 72, 20, 74, 75, 63, 6b, (...) 
4009:000 | DONE dir | na 16 16 |        |             |                 3a 20 64 2e 72 20 3e 72  --  :   d . r   > r
4009:000 | DONE dir | na 16 16 |        |             |                 20 74 75 63 6b 20 64 61  --    t u c k   d a
4009:000 | DONE dir | na 16 16 |        |             |                 62 73 20 3c 23 20 23 73  --  b s   < #   # s
4009:000 | DONE dir | na 16 16 |        |             |                 20 72 6f 74 20 73 69 67  --    r o t   s i g
4009:000 | DONE dir | na 16 16 |        |             |                 6e 20 23 3e 20 72 3e 20  --  n   # >   r >  
4009:000 | DONE dir | na 16 16 |        |             |                 6f 76 65 72 20 2d 20 73  --  o v e r   -   s
4009:000 | DONE dir | na 16 16 |        |             |                 70 61 63 65 73 20 74 79  --  p a c e s   t y
4009:000 | DONE dir | na 16 16 |        |             |                 70 65 20 3b 20           --  p e   ;  
4010:000 | DONE cmt | na 16 16 |        |             | ;       .byte ": . dup abs 0 <# #s rot sign #> type space ; "
4011:000 | DONE wsp | na 16 16 |        |             |
4012:000 | DONE cmt | na 16 16 |        |             |         ; Splash strings. We leave these as high-level words because they are
4013:000 | DONE cmt | na 16 16 |        |             |         ; generated at the end of the boot process and signal that the other
4014:000 | DONE cmt | na 16 16 |        |             |         ; high-level definitions worked (or at least didn't crash)
4015:000 | DONE dir | na 16 16 | 007549 | (35 bytes)  |         .byte 2e, 28, 20, 4c, 69, 61, 72, 61, 20, 46, 6f, 72, 74, (...) 
4015:000 | DONE dir | na 16 16 |        |             |                 2e 28 20 4c 69 61 72 61  --  . (   L i a r a
4015:000 | DONE dir | na 16 16 |        |             |                 20 46 6f 72 74 68 20 66  --    F o r t h   f
4015:000 | DONE dir | na 16 16 |        |             |                 6f 72 20 74 68 65 20 57  --  o r   t h e   W
4015:000 | DONE dir | na 16 16 |        |             |                 36 35 43 32 36 35 53 58  --  6 5 C 2 6 5 S X
4015:000 | DONE dir | na 16 16 |        |             |                 42 20 29                 --  B   )
4016:000 | DONE dir | na 16 16 | 00756c | (37 bytes)  |         .byte 63, 72, 20, 2e, 28, 20, 56, 65, 72, 73, 69, 6f, 6e, (...) 
4016:000 | DONE dir | na 16 16 |        |             |                 63 72 20 2e 28 20 56 65  --  c r   . (   V e
4016:000 | DONE dir | na 16 16 |        |             |                 72 73 69 6f 6e 20 50 52  --  r s i o n   P R
4016:000 | DONE dir | na 16 16 |        |             |                 45 2d 41 4c 50 48 41 20  --  E - A L P H A  
4016:000 | DONE dir | na 16 16 |        |             |                 32 31 2e 20 46 65 62 20  --  2 1 .   F e b  
4016:000 | DONE dir | na 16 16 |        |             |                 32 30 31 37 29           --  2 0 1 7 )
4017:000 | DONE dir | na 16 16 | 007591 | (51 bytes)  |         .byte 63, 72, 20, 2e, 28, 20, 53, 63, 6f, 74, 20, 57, 2e, (...) 
4017:000 | DONE dir | na 16 16 |        |             |                 63 72 20 2e 28 20 53 63  --  c r   . (   S c
4017:000 | DONE dir | na 16 16 |        |             |                 6f 74 20 57 2e 20 53 74  --  o t   W .   S t
4017:000 | DONE dir | na 16 16 |        |             |                 65 76 65 6e 73 6f 6e 20  --  e v e n s o n  
4017:000 | DONE dir | na 16 16 |        |             |                 3c 73 63 6f 74 2e 73 74  --  < s c o t . s t
4017:000 | DONE dir | na 16 16 |        |             |                 65 76 65 6e 73 6f 6e 40  --  e v e n s o n @
4017:000 | DONE dir | na 16 16 |        |             |                 67 6d 61 69 6c 2e 63 6f  --  g m a i l . c o
4017:000 | DONE dir | na 16 16 |        |             |                 6d 3e 29                 --  m > )
4018:000 | DONE dir | na 16 16 | 0075c4 | (52 bytes)  |         .byte 63, 72, 20, 2e, 28, 20, 4c, 69, 61, 72, 61, 20, 46, (...) 
4018:000 | DONE dir | na 16 16 |        |             |                 63 72 20 2e 28 20 4c 69  --  c r   . (   L i
4018:000 | DONE dir | na 16 16 |        |             |                 61 72 61 20 46 6f 72 74  --  a r a   F o r t
4018:000 | DONE dir | na 16 16 |        |             |                 68 20 63 6f 6d 65 73 20  --  h   c o m e s  
4018:000 | DONE dir | na 16 16 |        |             |                 77 69 74 68 20 61 62 73  --  w i t h   a b s
4018:000 | DONE dir | na 16 16 |        |             |                 6f 6c 75 74 65 6c 79 20  --  o l u t e l y  
4018:000 | DONE dir | na 16 16 |        |             |                 4e 4f 20 57 41 52 52 41  --  N O   W A R R A
4018:000 | DONE dir | na 16 16 |        |             |                 4e 54 59 29              --  N T Y )
4019:000 | DONE dir | na 16 16 | 0075f8 | (28 bytes)  |         .byte 63, 72, 20, 2e, 28, 20, 54, 79, 70, 65, 20, 27, 62, (...) 
4019:000 | DONE dir | na 16 16 |        |             |                 63 72 20 2e 28 20 54 79  --  c r   . (   T y
4019:000 | DONE dir | na 16 16 |        |             |                 70 65 20 27 62 79 65 27  --  p e   ' b y e '
4019:000 | DONE dir | na 16 16 |        |             |                 20 74 6f 20 65 78 69 74  --    t o   e x i t
4019:000 | DONE dir | na 16 16 |        |             |                 29 20 63 72              --  )   c r
4020:000 | DONE lbl | na 16 16 | 007614 |             | hi-end                               
4021:000 | DONE wsp | na 16 16 |        |             |
4022:000 | DONE wsp | na 16 16 |        |             |
4023:000 | DONE cmt | na 16 16 |        |             | ; ===================================================================
4024:000 | DONE cmt | na 16 16 |        |             | ; BOTTOM INCLUDES
4025:000 | DONE wsp | na 16 16 |        |             |
4026:000 | DONE cmt | na 16 16 |        |             | ; List of Strings for Liara Forth for the W65C265SXB
4026:001 | DONE cmt | na 16 16 |        |             | ; Scot W. Stevenson <scot.stevenson@gmail.com>
4026:002 | DONE cmt | na 16 16 |        |             | ; First version: 01. Apr 2016
4026:003 | DONE cmt | na 16 16 |        |             | ; This version:  19. Feb 2017
4026:004 | DONE wsp | na 16 16 |        |             |
4026:005 | DONE cmt | na 16 16 |        |             | ; This file is included by liaraforth.tasm
4026:006 | DONE wsp | na 16 16 |        |             |
4026:007 | DONE cmt | na 16 16 |        |             | ; ===================================================================
4026:008 | DONE cmt | na 16 16 |        |             | ; GENERAL
4026:009 | DONE wsp | na 16 16 |        |             |
4026:010 | DONE cmt | na 16 16 |        |             | ; All general strings must be zero-terminated, names start with "s_"
4026:011 | DONE cmt | na 16 16 |        |             | ; TODO see if "ok" needs trailing space. The printstring routine adds the EOL
4026:012 | DONE cmt | na 16 16 |        |             | ; character
4026:013 | DONE wsp | na 16 16 |        |             |
4026:014 | DONE lbl | na 16 16 | 007614 |             | s_ok                                 
4026:015 | DONE dir | na 16 16 | 007614 | (4 bytes)   |         .byte 20, 6f, 6b, 0          note space at beginning
4026:015 | DONE dir | na 16 16 |        |             |                 20 6f 6b 00              --    o k .
4026:016 | DONE lbl | na 16 16 | 007618 |             | s_compiled                           
4026:017 | DONE dir | na 16 16 | 007618 | (10 bytes)  |         .byte 20, 63, 6f, 6d, 70, 69, 6c, 65, 64, 0 
4026:017 | DONE dir | na 16 16 |        |             |                 20 63 6f 6d 70 69 6c 65  --    c o m p i l e
4026:017 | DONE dir | na 16 16 |        |             |                 64 00                    --  d .
4026:018 | DONE wsp | na 16 16 |        |             |
4026:019 | DONE wsp | na 16 16 |        |             |
4026:020 | DONE cmt | na 16 16 |        |             | ; ===================================================================
4026:021 | DONE cmt | na 16 16 |        |             | ; ERROR STRINGS
4026:022 | DONE wsp | na 16 16 |        |             |
4026:023 | DONE cmt | na 16 16 |        |             | ; All error strings must be zero-terminated, names start with "es_"
4026:024 | DONE wsp | na 16 16 |        |             |
4026:025 | DONE lbl | na 16 16 | 007622 |             | es_allot                             
4026:026 | DONE dir | na 16 16 | 007622 | (20 bytes)  |         .byte 41, 4c, 4c, 4f, 54, 20, 6f, 75, 74, 20, 6f, 66, 20, (...) 
4026:026 | DONE dir | na 16 16 |        |             |                 41 4c 4c 4f 54 20 6f 75  --  A L L O T   o u
4026:026 | DONE dir | na 16 16 |        |             |                 74 20 6f 66 20 62 6f 75  --  t   o f   b o u
4026:026 | DONE dir | na 16 16 |        |             |                 6e 64 73 00              --  n d s .
4026:027 | DONE lbl | na 16 16 | 007636 |             | es_channel                           
4026:028 | DONE dir | na 16 16 | 007636 | (26 bytes)  |         .byte 41, 63, 63, 65, 73, 73, 69, 6e, 67, 20, 75, 6e, 6b, (...) 
4026:028 | DONE dir | na 16 16 |        |             |                 41 63 63 65 73 73 69 6e  --  A c c e s s i n
4026:028 | DONE dir | na 16 16 |        |             |                 67 20 75 6e 6b 6e 6f 77  --  g   u n k n o w
4026:028 | DONE dir | na 16 16 |        |             |                 6e 20 63 68 61 6e 6e 65  --  n   c h a n n e
4026:028 | DONE dir | na 16 16 |        |             |                 6c 00                    --  l .
4026:029 | DONE lbl | na 16 16 | 007650 |             | es_componly                          
4026:030 | DONE dir | na 16 16 | 007650 | (33 bytes)  |         .byte 49, 6e, 74, 65, 72, 70, 72, 65, 74, 69, 6e, 67, 20, (...) 
4026:030 | DONE dir | na 16 16 |        |             |                 49 6e 74 65 72 70 72 65  --  I n t e r p r e
4026:030 | DONE dir | na 16 16 |        |             |                 74 69 6e 67 20 61 20 63  --  t i n g   a   c
4026:030 | DONE dir | na 16 16 |        |             |                 6f 6d 70 69 6c 65 2d 6f  --  o m p i l e - o
4026:030 | DONE dir | na 16 16 |        |             |                 6e 6c 79 20 77 6f 72 64  --  n l y   w o r d
4026:030 | DONE dir | na 16 16 |        |             |                 00                       --  .
4026:031 | DONE lbl | na 16 16 | 007671 |             | es_defer                             
4026:032 | DONE dir | na 16 16 | 007671 | (29 bytes)  |         .byte 44, 45, 46, 45, 52, 65, 64, 20, 77, 6f, 72, 64, 20, (...) 
4026:032 | DONE dir | na 16 16 |        |             |                 44 45 46 45 52 65 64 20  --  D E F E R e d  
4026:032 | DONE dir | na 16 16 |        |             |                 77 6f 72 64 20 6e 6f 74  --  w o r d   n o t
4026:032 | DONE dir | na 16 16 |        |             |                 20 64 65 66 69 6e 65 64  --    d e f i n e d
4026:032 | DONE dir | na 16 16 |        |             |                 20 79 65 74 00           --    y e t .
4026:033 | DONE lbl | na 16 16 | 00768e |             | es_divzero                           
4026:034 | DONE dir | na 16 16 | 00768e | (17 bytes)  |         .byte 44, 69, 76, 69, 73, 69, 6f, 6e, 20, 62, 79, 20, 7a, (...) 
4026:034 | DONE dir | na 16 16 |        |             |                 44 69 76 69 73 69 6f 6e  --  D i v i s i o n
4026:034 | DONE dir | na 16 16 |        |             |                 20 62 79 20 7a 65 72 6f  --    b y   z e r o
4026:034 | DONE dir | na 16 16 |        |             |                 00                       --  .
4026:035 | DONE lbl | na 16 16 | 00769f |             | es_error                             
4026:036 | DONE dir | na 16 16 | 00769f | (12 bytes)  |         .byte 3e, 3e, 3e, 45, 72, 72, 6f, 72, 3c, 3c, 3c, 0 
4026:036 | DONE dir | na 16 16 |        |             |                 3e 3e 3e 45 72 72 6f 72  --  > > > E r r o r
4026:036 | DONE dir | na 16 16 |        |             |                 3c 3c 3c 00              --  < < < .
4026:037 | DONE lbl | na 16 16 | 0076ab |             | es_intonly                           
4026:038 | DONE dir | na 16 16 | 0076ab | (22 bytes)  |         .byte 4e, 6f, 74, 20, 69, 6e, 20, 69, 6e, 74, 65, 72, 70, (...) 
4026:038 | DONE dir | na 16 16 |        |             |                 4e 6f 74 20 69 6e 20 69  --  N o t   i n   i
4026:038 | DONE dir | na 16 16 |        |             |                 6e 74 65 72 70 72 65 74  --  n t e r p r e t
4026:038 | DONE dir | na 16 16 |        |             |                 20 6d 6f 64 65 00        --    m o d e .
4026:039 | DONE lbl | na 16 16 | 0076c1 |             | es_noname                            
4026:040 | DONE dir | na 16 16 | 0076c1 | (16 bytes)  |         .byte 50, 61, 72, 73, 69, 6e, 67, 20, 66, 61, 69, 6c, 75, (...) 
4026:040 | DONE dir | na 16 16 |        |             |                 50 61 72 73 69 6e 67 20  --  P a r s i n g  
4026:040 | DONE dir | na 16 16 |        |             |                 66 61 69 6c 75 72 65 00  --  f a i l u r e .
4026:040 | DONE dir | na 16 16 |        |             |                                          -- 
4026:041 | DONE lbl | na 16 16 | 0076d1 |             | es_radix                             
4026:042 | DONE dir | na 16 16 | 0076d1 | (23 bytes)  |         .byte 44, 69, 67, 69, 74, 20, 6c, 61, 72, 67, 65, 72, 20, (...) 
4026:042 | DONE dir | na 16 16 |        |             |                 44 69 67 69 74 20 6c 61  --  D i g i t   l a
4026:042 | DONE dir | na 16 16 |        |             |                 72 67 65 72 20 74 68 61  --  r g e r   t h a
4026:042 | DONE dir | na 16 16 |        |             |                 6e 20 62 61 73 65 00     --  n   b a s e .
4026:043 | DONE lbl | na 16 16 | 0076e8 |             | es_refill1                           
4026:044 | DONE dir | na 16 16 | 0076e8 | (46 bytes)  |         .byte 51, 55, 49, 54, 20, 63, 6f, 75, 6c, 64, 20, 6e, 6f, (...) 
4026:044 | DONE dir | na 16 16 |        |             |                 51 55 49 54 20 63 6f 75  --  Q U I T   c o u
4026:044 | DONE dir | na 16 16 |        |             |                 6c 64 20 6e 6f 74 20 67  --  l d   n o t   g
4026:044 | DONE dir | na 16 16 |        |             |                 65 74 20 69 6e 70 75 74  --  e t   i n p u t
4026:044 | DONE dir | na 16 16 |        |             |                 20 28 52 45 46 49 4c 4c  --    ( R E F I L L
4026:044 | DONE dir | na 16 16 |        |             |                 20 72 65 74 75 72 6e 65  --    r e t u r n e
4026:044 | DONE dir | na 16 16 |        |             |                 64 20 2d 31 29 00        --  d   - 1 ) .
4026:045 | DONE lbl | na 16 16 | 007716 |             | es_refill2                           
4026:046 | DONE dir | na 16 16 | 007716 | (32 bytes)  |         .byte 49, 6c, 6c, 65, 67, 61, 6c, 20, 53, 4f, 55, 52, 43, (...) 
4026:046 | DONE dir | na 16 16 |        |             |                 49 6c 6c 65 67 61 6c 20  --  I l l e g a l  
4026:046 | DONE dir | na 16 16 |        |             |                 53 4f 55 52 43 45 2d 49  --  S O U R C E - I
4026:046 | DONE dir | na 16 16 |        |             |                 44 20 64 75 72 69 6e 67  --  D   d u r i n g
4026:046 | DONE dir | na 16 16 |        |             |                 20 52 45 46 49 4c 4c 00  --    R E F I L L .
4026:046 | DONE dir | na 16 16 |        |             |                                          -- 
4026:047 | DONE lbl | na 16 16 | 007736 |             | es_state                             
4026:048 | DONE dir | na 16 16 | 007736 | (24 bytes)  |         .byte 41, 6c, 72, 65, 61, 64, 79, 20, 69, 6e, 20, 63, 6f, (...) 
4026:048 | DONE dir | na 16 16 |        |             |                 41 6c 72 65 61 64 79 20  --  A l r e a d y  
4026:048 | DONE dir | na 16 16 |        |             |                 69 6e 20 63 6f 6d 70 69  --  i n   c o m p i
4026:048 | DONE dir | na 16 16 |        |             |                 6c 65 20 6d 6f 64 65 00  --  l e   m o d e .
4026:048 | DONE dir | na 16 16 |        |             |                                          -- 
4026:049 | DONE lbl | na 16 16 | 00774e |             | es_underflow                         
4026:050 | DONE dir | na 16 16 | 00774e | (16 bytes)  |         .byte 53, 74, 61, 63, 6b, 20, 75, 6e, 64, 65, 72, 66, 6c, (...) 
4026:050 | DONE dir | na 16 16 |        |             |                 53 74 61 63 6b 20 75 6e  --  S t a c k   u n
4026:050 | DONE dir | na 16 16 |        |             |                 64 65 72 66 6c 6f 77 00  --  d e r f l o w .
4026:050 | DONE dir | na 16 16 |        |             |                                          -- 
4026:051 | DONE lbl | na 16 16 | 00775e |             | es_syntax                            
4026:052 | DONE dir | na 16 16 | 00775e | (16 bytes)  |         .byte 20, 55, 6e, 64, 65, 66, 69, 6e, 65, 64, 20, 77, 6f, (...) 
4026:052 | DONE dir | na 16 16 |        |             |                 20 55 6e 64 65 66 69 6e  --    U n d e f i n
4026:052 | DONE dir | na 16 16 |        |             |                 65 64 20 77 6f 72 64 00  --  e d   w o r d .
4026:052 | DONE dir | na 16 16 |        |             |                                          -- 
4026:053 | DONE wsp | na 16 16 |        |             |
4026:054 | DONE wsp | na 16 16 |        |             |
4026:055 | DONE cmt | na 16 16 |        |             | ; ===================================================================
4026:056 | DONE cmt | na 16 16 |        |             | ; ANSI VT-100 SEQUENCES
4026:057 | DONE wsp | na 16 16 |        |             |
4026:058 | DONE lbl | na 16 16 | 00776e |             | vt100_page                           
4026:059 | DONE dir | na 16 16 | 00776e | (5 bytes)   |         .byte AscESC, 5b, 32, 4a, 0  clear screen
4026:059 | DONE dir | na 16 16 |        |             |                 1b 5b 32 4a 00           --  . [ 2 J .
4026:060 | DONE lbl | na 16 16 | 007773 |             | vt100_home                           
4026:061 | DONE dir | na 16 16 | 007773 | (4 bytes)   |         .byte AscESC, 5b, 48, 0      cursor home
4026:061 | DONE dir | na 16 16 |        |             |                 1b 5b 48 00              --  . [ H .
4026:062 | DONE wsp | na 16 16 |        |             |
4026:063 | DONE wsp | na 16 16 |        |             |
4026:064 | DONE cmt | na 16 16 |        |             | ; ===================================================================
4026:065 | DONE cmt | na 16 16 |        |             | ; TESTING STRINGS
4026:066 | DONE wsp | na 16 16 |        |             |
4026:067 | DONE cmt | na 16 16 |        |             | ; These strings are only used during testing and are removed as Liara Forth is
4026:068 | DONE cmt | na 16 16 |        |             | ; developed. All start with "tests_"
4026:069 | DONE wsp | na 16 16 |        |             |
4026:070 | DONE lbl | na 16 16 | 007777 |             | tests_prev_cmd                       
4026:071 | DONE dir | na 16 16 | 007777 | (19 bytes)  |         .byte 28, 70, 72, 65, 76, 69, 6f, 75, 73, 20, 63, 6f, 6d, (...) 
4026:071 | DONE dir | na 16 16 |        |             |                 28 70 72 65 76 69 6f 75  --  ( p r e v i o u
4026:071 | DONE dir | na 16 16 |        |             |                 73 20 63 6f 6d 6d 61 6e  --  s   c o m m a n
4026:071 | DONE dir | na 16 16 |        |             |                 64 29 00                 --  d ) .
4026:072 | DONE lbl | na 16 16 | 00778a |             | tests_next_cmd                       
4026:073 | DONE dir | na 16 16 | 00778a | (15 bytes)  |         .byte 28, 6e, 65, 78, 74, 20, 63, 6f, 6d, 6d, 61, 6e, 64, (...) 
4026:073 | DONE dir | na 16 16 |        |             |                 28 6e 65 78 74 20 63 6f  --  ( n e x t   c o
4026:073 | DONE dir | na 16 16 |        |             |                 6d 6d 61 6e 64 29 00     --  m m a n d ) .
4026:074 | DONE wsp | na 16 16 |        |             |
4026:075 | DONE wsp | na 16 16 |        |             |
4026:076 | DONE cmt | na 16 16 |        |             | ; ===================================================================
4026:077 | DONE cmt | na 16 16 |        |             | ; ALPHABET STRINGS
4026:078 | DONE wsp | na 16 16 |        |             |
4026:079 | DONE cmt | na 16 16 |        |             | ; Leave alphastr as the last entry in the source code to make it easier to
4026:080 | DONE cmt | na 16 16 |        |             | ; see where this section ends. This cannot be a zero-terminated string
4026:081 | DONE wsp | na 16 16 |        |             |
4026:082 | DONE lbl | na 16 16 | 007799 |             | alphastring                          
4026:083 | DONE dir | na 16 16 | 007799 | (35 bytes)  |         .byte 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 61, 62, 63, (...) 
4026:083 | DONE dir | na 16 16 |        |             |                 30 31 32 33 34 35 36 37  --  0 1 2 3 4 5 6 7
4026:083 | DONE dir | na 16 16 |        |             |                 38 39 61 62 63 64 65 66  --  8 9 a b c d e f
4026:083 | DONE dir | na 16 16 |        |             |                 67 68 69 6a 6b 6c 6d 6e  --  g h i j k l m n
4026:083 | DONE dir | na 16 16 |        |             |                 6f 70 71 72 73 74 75 76  --  o p q r s t u v
4026:083 | DONE dir | na 16 16 |        |             |                 77 79 7a                 --  w y z
4027:000 | DONE wsp | na 16 16 |        |             |
4028:000 | DONE cmt | na 16 16 |        |             | ; ===================================================================
4029:000 | DONE cmt | na 16 16 |        |             | ; TESTING ROUTINES (UNCOMMENT FOR USE)
4030:000 | DONE wsp | na 16 16 |        |             |
4031:000 | DONE cmt | na 16 16 |        |             |                 ; --- TODO TESTING (PRINT ONE "A") ---
4032:000 | DONE cmt | na 16 16 |        |             |                 ; lda.# 61
4033:000 | DONE cmt | na 16 16 |        |             |                 ; jsr put_chr
4034:000 | DONE cmt | na 16 16 |        |             |                 ; .!a16
4035:000 | DONE cmt | na 16 16 |        |             |                 ; brk 00
4036:000 | DONE cmt | na 16 16 |        |             |                 ; --- TODO TESTING ---
4037:000 | DONE wsp | na 16 16 |        |             |
4038:000 | DONE cmt | na 16 16 |        |             |                 ; --- TESTING SHOW WHAT IS TOS ---
4039:000 | DONE cmt | na 16 16 |        |             |                 ; tya
4040:000 | DONE cmt | na 16 16 |        |             |                 ; and.# 0ff00
4041:000 | DONE cmt | na 16 16 |        |             |                 ; xba
4042:000 | DONE cmt | na 16 16 |        |             |                 ; jsr byte_to_ascii
4043:000 | DONE cmt | na 16 16 |        |             |                 ; tya
4044:000 | DONE cmt | na 16 16 |        |             |                 ; and.# 00ff
4045:000 | DONE cmt | na 16 16 |        |             |                 ; jsr byte_to_ascii
4046:000 | DONE cmt | na 16 16 |        |             |                 ; jsr xt_cr
4047:000 | DONE cmt | na 16 16 |        |             |                 ; --------------------------------
4048:000 | DONE wsp | na 16 16 |        |             |
4049:000 | DONE cmt | na 16 16 |        |             |                 ; --- TODO TESTING (HALT CPU) ---
4050:000 | DONE cmt | na 16 16 |        |             |                 ; brk 00 ; BRK for 265sxb tests (drops back to Mensch Monitor)
4051:000 | DONE cmt | na 16 16 |        |             |                 ; stp    ; STP for crude65816 emulator tests
4052:000 | DONE cmt | na 16 16 |        |             |                 ; --- TODO TESTING ---
4053:000 | DONE wsp | na 16 16 |        |             |
4054:000 | DONE wsp | na 16 16 |        |             |
4055:000 | DONE cmt | na 16 16 |        |             | ; ===================================================================
4056:000 | DONE cmt | na 16 16 |        |             | ; END
4057:000 | DONE dir | na 16 16 |        |             |         .end                         

MACROS:
        (none)

SYMBOL TABLE:
- accept_bs                   : 006396
- accept_eol                  : 00638e
- accept_loop                 : 006343
- accept_nonzero              : 006336
- allot_done                  : 0063ec
- allot_error                 : 0063db
- allot_minus                 : 0063e1
- allot_real_gone             : 0063ee
- alphastring                 : 007799
- ascbell                     : 000007
- ascbs                       : 000008
- asccc                       : 000003
- asccn                       : 00000e
- asccp                       : 000010
- asccr                       : 00000d
- ascdel                      : 00007f
- ascesc                      : 00001b
- asclf                       : 00000a
- ascsp                       : 000020
- base                        : 00021c
- branch_rt                   : 00641f
- brg_value                   : 00000b
- buffers                     : 007c00
- buffersize                  : 0000ff
- byte_to_ascii               : 0070f7
- char_got_char               : 006468
- cib                         : 00020c
- ciblen                      : 00020e
- cmpl_body                   : 0070cd
- cmpl_common                 : 0070c0
- cmpl_jump                   : 0070bd
- cmpl_subroutine             : 0070b8
- cmpl_word                   : 0070b3
- cn_case_done                : 006491
- cn_checkbase                : 006494
- cn_notdigit                 : 00649b
- cn_success                  : 0064a6
- co                          : 000004
- compex                      : 007067
- compex_compile              : 00709e
- compex_got_name_token       : 00707c
- compex_interpret            : 007098
- compex_line_done            : 0070ac
- compex_loop                 : 007067
- compile_as_code             : 0064b9
- compile_as_jump             : 0064b9
- cp                          : 000200
- cp0                         : 000300
- create_got_name             : 006507
- directpage                  : 000200
- directpage-multiple         : 007400
- doconst                     : 007045
- dodoes                      : 007053
- does_rt                     : 0065ac
- dots_done                   : 0061b2
- dots_loop                   : 006198
- dots_not_empty              : 006192
- dovar                       : 007060
- dp                          : 000202
- dsp0                        : 0002f8
- dump_byte_loop              : 0065cf
- dump_done                   : 0065e4
- dump_line_loop              : 0065c9
- equal_not                   : 006288
- error                       : 0070d9
- es_allot                    : 007622
- es_channel                  : 007636
- es_componly                 : 007650
- es_defer                    : 007671
- es_divzero                  : 00768e
- es_error                    : 00769f
- es_intonly                  : 0076ab
- es_noname                   : 0076c1
- es_radix                    : 0076d1
- es_refill1                  : 0076e8
- es_refill2                  : 007716
- es_state                    : 007736
- es_syntax                   : 00775e
- es_underflow                : 00774e
- execute_ip                  : 006622
- find-name_all_chars         : 00665e
- find-name_char_nomatcnt_8   : 00665a
- find-name_chars             : 00664f
- find-name_done              : 006684
- find-name_failure_16        : 006681
- find-name_loop              : 00663a
- find-name_next_entry        : 006643
- find-name_success           : 00667b
- get_chr                     : 006047
- get_chr_wait                : 00604c
- hashs_loop                  : 006227
- have_chr?                   : 006056
- hi-end                      : 007614
- hi-start                    : 007113
- hw_acsr0                    : 00df70
- hw_acsr1                    : 00df72
- hw_acsr2                    : 00df74
- hw_acsr3                    : 00df76
- hw_artd0                    : 00df71
- hw_artd1                    : 00df73
- hw_artd2                    : 00df75
- hw_artd3                    : 00df77
- hw_bcr                      : 00df40
- hw_eier                     : 00df47
- hw_eifr                     : 00df45
- hw_pcs7                     : 00df27
- hw_pd0                      : 00df00
- hw_pd1                      : 00df01
- hw_pd2                      : 00df02
- hw_pd3                      : 00df03
- hw_pd4                      : 00df20
- hw_pd5                      : 00df21
- hw_pd6                      : 00df22
- hw_pd7                      : 00df23
- hw_pdd0                     : 00df04
- hw_pdd1                     : 00df05
- hw_pdd2                     : 00df06
- hw_pdd3                     : 00df07
- hw_pdd4                     : 00df24
- hw_pdd5                     : 00df25
- hw_pdd6                     : 00df26
- hw_sscr                     : 00df41
- hw_t0ch                     : 00df61
- hw_t0cl                     : 00df60
- hw_t1ch                     : 00df63
- hw_t1cl                     : 00df62
- hw_t2ch                     : 00df65
- hw_t2cl                     : 00df64
- hw_t3ch                     : 00df67
- hw_t3cl                     : 00df66
- hw_t4ch                     : 00df69
- hw_t4cl                     : 00df68
- hw_t5ch                     : 00df6b
- hw_t5cl                     : 00df6a
- hw_t6ch                     : 00df6d
- hw_t6cl                     : 00df6c
- hw_t7ch                     : 00df6f
- hw_t7cl                     : 00df6e
- hw_tcr                      : 00df42
- hw_ter                      : 00df43
- hw_tier                     : 00df46
- hw_tifr                     : 00df44
- hw_uier                     : 00df49
- hw_uifr                     : 00df48
- ibuffer1                    : 007c00
- ibuffer2                    : 007d00
- im                          : 000002
- insrc                       : 00020a
- literal_rt                  : 0066c3
- max_drop                    : 0066fe
- max_nip                     : 006700
- max_no_ov                   : 0066fc
- maxram-multiple             : 006fff
- maxram-single               : 007bff
- min_drop                    : 006711
- min_nip                     : 006713
- min_no_ov                   : 00670f
- mstar_abs_nos               : 0066dc
- mstar_umstar                : 0066e6
- nc                          : 000001
- nc_limit                    : 000000
- nibble_to_ascii             : 007100
- not-equal_equal             : 0060fc
- nt_2drop                    : 006fc6
- nt_2dup                     : 006d70
- nt_abort                    : 006b49
- nt_abs                      : 006d7c
- nt_accept                   : 006f66
- nt_again                    : 006cf9
- nt_allot                    : 006d35
- nt_and                      : 006e36
- nt_backslash                : 006f74
- nt_base                     : 006c20
- nt_begin                    : 006d06
- nt_bell                     : 006a9c
- nt_bl                       : 006bd1
- nt_bracketchar              : 006c78
- nt_brackettick              : 006c6d
- nt_branch                   : 006ceb
- nt_bye                      : 006a6c
- nt_c-comma                  : 006e4b
- nt_c-fetch                  : 006e55
- nt_c-store                  : 006e5f
- nt_cells                    : 006c3c
- nt_char                     : 006e15
- nt_char-num                 : 006ff1
- nt_cold                     : 006a77
- nt_colon                    : 006d2c
- nt_comma                    : 006f5d
- nt_compile-only             : 006c95
- nt_compilecomma             : 006d13
- nt_constant                 : 006dba
- nt_count                    : 006b3c
- nt_cr                       : 006b88
- nt_create                   : 006d4f
- nt_dabs                     : 006adc
- nt_decimal                  : 006aa8
- nt_depth                    : 006dad
- nt_dnegate                  : 006ae8
- nt_does                     : 006d42
- nt_dot                      : 006c0c
- nt_dotquote                 : 006c49
- nt_dots                     : 006bf6
- nt_drop                     : 007039
- nt_dump                     : 006a90
- nt_dup                      : 00702e
- nt_equal                    : 006ede
- nt_evaluate                 : 006c2c
- nt_execute                  : 006fab
- nt_false                    : 006ee7
- nt_fetch                    : 007010
- nt_find-name                : 006f1b
- nt_fromr                    : 006fdd
- nt_greater                  : 006eb8
- nt_hash                     : 006bbe
- nt_hashs                    : 006ba8
- nt_here                     : 006fba
- nt_hex                      : 006ab7
- nt_hold                     : 006b9c
- nt_immediate                : 006ca9
- nt_invert                   : 006e07
- nt_leftbracket              : 006cd3
- nt_less                     : 006ec1
- nt_lessnumber               : 006bc7
- nt_literal                  : 006c86
- nt_max                      : 006dee
- nt_min                      : 006de3
- nt_minus                    : 006e73
- nt_mrot                     : 006f94
- nt_mstar                    : 006b27
- nt_name-int                 : 006b78
- nt_name-string              : 006d5d
- nt_negate                   : 006df9
- nt_nip                      : 006f89
- nt_not-equal                : 006ed4
- nt_numbermore               : 006b92
- nt_one                      : 006f09
- nt_one-minus                : 006e85
- nt_one-plus                 : 006e8f
- nt_or                       : 006e2c
- nt_over                     : 007004
- nt_pad                      : 006c15
- nt_page                     : 006ad0
- nt_parse                    : 006b56
- nt_parse-name               : 006f3a
- nt_plus                     : 006e7c
- nt_plusstore                : 006e41
- nt_postpone                 : 006cba
- nt_question                 : 006b6f
- nt_quit                     : 006b63
- nt_refill                   : 006f2c
- nt_rfetch                   : 006fd3
- nt_rightbracket             : 006cca
- nt_rot                      : 006fa0
- nt_semicolon                : 006d23
- nt_sign                     : 006bb2
- nt_sliteral                 : 006c5d
- nt_source                   : 006d9f
- nt_source-id                : 006f4c
- nt_space                    : 006be9
- nt_spaces                   : 006bdb
- nt_squote                   : 006c53
- nt_star                     : 006b1e
- nt_state                    : 006d87
- nt_stod                     : 006af7
- nt_store                    : 007019
- nt_swap                     : 007022
- nt_tick                     : 006dda
- nt_to-in                    : 006d94
- nt_tor                      : 006fe7
- nt_true                     : 006ef4
- nt_tuck                     : 006f7d
- nt_two                      : 006f00
- nt_two-star                 : 006e69
- nt_type                     : 006c00
- nt_udmod                    : 006b02
- nt_ummod                    : 006b10
- nt_umstar                   : 006b31
- nt_unused                   : 006ac2
- nt_variable                 : 006dca
- nt_words                    : 006a83
- nt_xor                      : 006e21
- nt_zbranch                  : 006cdc
- nt_zero                     : 006f12
- nt_zero-equal               : 006eca
- nt_zero-less                : 006eae
- nt_zero-more                : 006ea4
- nt_zero-notequal            : 006e99
- output                      : 000208
- padoffset                   : 00007f
- padsize                     : 0000ff
- parse-name_empty_line       : 006773
- parse-name_found            : 006787
- parse-name_loop             : 006766
- parse_found_delimiter       : 0067b3
- parse_loop                  : 0067a6
- parse_reached_eol           : 0067b7
- physicalram                 : 007fff
- piblen                      : 000210
- pp_got_nt                   : 0067ec
- pp_got_word                 : 0067e1
- pp_not_immediate            : 0067fc
- print_string                : 0070df
- print_string_done           : 0070ee
- put_chr                     : 006036
- put_chr_wait                : 00603c
- quit_compiled               : 0060d5
- quit_get_line               : 0060aa
- quit_ok                     : 0060cc
- quit_print                  : 0060d8
- quit_refill_successful      : 0060b8
- refill_source_is_not_string : 006848
- refill_src_not_kbd          : 00683f
- reset_hardware              : 006000
- s_compiled                  : 007618
- s_ok                        : 007614
- scratch                     : 000220
- sign_plus                   : 006883
- sl_loop                     : 0068a8
- sliteral_rt                 : 0068d3
- spaces_done                 : 00690c
- stack-multiple              : 007000
- stack0                      : 007fff
- start                       : 006066
- state                       : 000214
- stod_pos                    : 006876
- string_to_lowercase         : 007112
- tests_next_cmd              : 00778a
- tests_prev_cmd              : 007777
- tick_have_nt                : 006323
- tick_have_word              : 006317
- tmp1                        : 000216
- tmp2                        : 000218
- tmp3                        : 00021a
- tmpdsp                      : 000204
- tmptos                      : 000206
- tohold                      : 000228
- toin                        : 000212
- type_done                   : 006952
- type_loop                   : 006946
- ummod_complete              : 006a1b
- ummod_notzero               : 0069dc
- ummod_overflow              : 006a12
- ummod_shift                 : 0069f4
- umstar_counter              : 0069ab
- umstar_loop                 : 00699d
- umstar_one_nos              : 0069be
- umstar_one_tos              : 0069bb
- umstar_two_common           : 0069ca
- umstar_two_nos              : 0069c9
- umstar_two_tos              : 0069c5
- umstar_zero                 : 0069b4
- vt100_home                  : 007773
- vt100_page                  : 00776e
- words_loop                  : 006a47
- workword                    : 00021e
- xt_2drop                    : 0062f9
- xt_2dup                     : 006300
- xt_abort                    : 006097
- xt_abs                      : 006327
- xt_accept                   : 006330
- xt_again                    : 0063b4
- xt_allot                    : 0063ca
- xt_and                      : 0063f3
- xt_backslash                : 00625e
- xt_base                     : 0063fa
- xt_begin                    : 006409
- xt_bell                     : 006402
- xt_bl                       : 006410
- xt_bracketchar              : 006257
- xt_brackettick              : 006248
- xt_branch                   : 006418
- xt_bye                      : 00642e
- xt_c-comma                  : 006432
- xt_c-fetch                  : 006440
- xt_c-store                  : 00644c
- xt_char                     : 00645c
- xt_char-num                 : 006474
- xt_cold                     : 006063
- xt_colon                    : 0061c2
- xt_comma                    : 0061b6
- xt_compile-only             : 0064b0
- xt_compilecomma             : 0064b9
- xt_constant                 : 0064cc
- xt_count                    : 0064e6
- xt_cr                       : 0064f5
- xt_create                   : 0064fc
- xt_dabs                     : 00656f
- xt_decimal                  : 006576
- xt_depth                    : 00657c
- xt_dnegate                  : 00658b
- xt_does                     : 00659f
- xt_dot                      : 00612d
- xt_dotparen                 : 00614c
- xt_dotquote                 : 00615a
- xt_dots                     : 00616e
- xt_drop                     : 0065c2
- xt_dump                     : 0065c7
- xt_dup                      : 0065ee
- xt_equal                    : 00627f
- xt_evaluate                 : 0065f3
- xt_execute                  : 006625
- xt_fetch                    : 006243
- xt_find-name                : 006630
- xt_fromr                    : 006814
- xt_greater                  : 006109
- xt_greater_nip              : 00611a
- xt_greater_no_ov            : 006117
- xt_hash                     : 0061fd
- xt_hashs                    : 006227
- xt_here                     : 006696
- xt_hex                      : 00669d
- xt_hold                     : 0066a3
- xt_immediate                : 006687
- xt_invert                   : 006690
- xt_leftbracket              : 00624e
- xt_less                     : 0060df
- xt_less_nip                 : 0060f0
- xt_less_no_ov               : 0060ed
- xt_lessnumber               : 0060ff
- xt_literal                  : 0066b1
- xt_max                      : 0066f0
- xt_min                      : 006703
- xt_minus                    : 00626b
- xt_mrot                     : 006276
- xt_mstar                    : 0066d0
- xt_name-int                 : 006716
- xt_name-string              : 00671f
- xt_negate                   : 006730
- xt_nip                      : 006737
- xt_not-equal                : 0060f3
- xt_numbermore               : 006218
- xt_one                      : 0062e1
- xt_one-minus                : 0062e9
- xt_one-plus                 : 0062eb
- xt_or                       : 00673a
- xt_over                     : 006741
- xt_pad                      : 006748
- xt_page                     : 006754
- xt_parse                    : 006793
- xt_parse-name               : 006761
- xt_plus                     : 006263
- xt_plusstore                : 0067c6
- xt_postpone                 : 0067d6
- xt_question                 : 006230
- xt_quit                     : 00609f
- xt_refill                   : 00681c
- xt_rfetch                   : 00680b
- xt_rightbracket             : 006251
- xt_rot                      : 00684f
- xt_semicolon                : 0061e4
- xt_sign                     : 00687a
- xt_sliteral                 : 006888
- xt_source                   : 0068e9
- xt_source-id                : 0068f6
- xt_space                    : 0068fd
- xt_spaces                   : 006904
- xt_squote                   : 006858
- xt_star                     : 006911
- xt_state                    : 006919
- xt_stod                     : 00686a
- xt_store                    : 006237
- xt_swap                     : 006921
- xt_tick                     : 00630b
- xt_to-in                    : 00611d
- xt_tor                      : 006125
- xt_true                     : 006927
- xt_tuck                     : 00692f
- xt_two                      : 0062ed
- xt_two-star                 : 0062f5
- xt_type                     : 006938
- xt_udmod                    : 006959
- xt_ummod                    : 0069d3
- xt_umstar                   : 006974
- xt_unused                   : 006a24
- xt_variable                 : 006a30
- xt_words                    : 006a3d
- xt_xor                      : 006a65
- xt_zbranch                  : 0062c2
- xt_zero                     : 00628b
- xt_zero-equal               : 006293
- xt_zero-less                : 00629f
- xt_zero-more                : 0062b7
- xt_zero-notequal            : 0062ab
- z_2drop                     : 0062ff
- z_2dup                      : 00630a
- z_abort                     : 0060de
- z_abs                       : 00632f
- z_accept                    : 0063b3
- z_again                     : 0063c9
- z_allot                     : 0063f2
- z_and                       : 0063f9
- z_backslash                 : 006262
- z_base                      : 006401
- z_begin                     : 00640f
- z_bell                      : 006408
- z_bl                        : 006417
- z_bracketchar               : 00625d
- z_brackettick               : 00624e
- z_branch                    : 00641e
- z_bye                       : 006431
- z_c-comma                   : 00643f
- z_c-fetch                   : 00644b
- z_c-store                   : 00645b
- z_char                      : 006473
- z_char-num                  : 0064af
- z_cold                      : 0060de
- z_colon                     : 0061e3
- z_comma                     : 0061c1
- z_compile-only              : 0064b8
- z_compilecomma              : 0064cb
- z_constant                  : 0064e5
- z_count                     : 0064f4
- z_cr                        : 0064fb
- z_create                    : 00656e
- z_dabs                      : 006575
- z_decimal                   : 00657b
- z_depth                     : 00658a
- z_dnegate                   : 00659e
- z_does                      : 0065ab
- z_dot                       : 00614b
- z_dotparen                  : 006159
- z_dotquote                  : 00616e
- z_dots                      : 0061b5
- z_drop                      : 0065c6
- z_dump                      : 0065ed
- z_dup                       : 0065f2
- z_equal                     : 00628a
- z_evaluate                  : 006621
- z_execute                   : 00662f
- z_fetch                     : 006247
- z_find-name                 : 006686
- z_fromr                     : 00681b
- z_greater                   : 00611c
- z_hash                      : 006217
- z_hashs                     : 00622f
- z_here                      : 00669c
- z_hex                       : 0066a2
- z_hold                      : 0066b0
- z_immediate                 : 00668f
- z_invert                    : 006695
- z_leftbracket               : 006250
- z_less                      : 0060f2
- z_lessnumber                : 006108
- z_literal                   : 0066c2
- z_max                       : 006702
- z_min                       : 006715
- z_minus                     : 006275
- z_mrot                      : 00627e
- z_mstar                     : 0066ef
- z_name-int                  : 00671e
- z_name-string               : 00672f
- z_negate                    : 006736
- z_nip                       : 006739
- z_not-equal                 : 0060fe
- z_numbermore                : 006226
- z_one                       : 0062e8
- z_one-minus                 : 0062ea
- z_one-plus                  : 0062ec
- z_or                        : 006740
- z_over                      : 006747
- z_pad                       : 006753
- z_page                      : 006760
- z_parse                     : 0067c5
- z_parse-name                : 0067c5
- z_plus                      : 00626a
- z_plusstore                 : 0067d5
- z_postpone                  : 00680b
- z_question                  : 006236
- z_quit                      : 0060de
- z_refill                    : 00684e
- z_rfetch                    : 006813
- z_rightbracket              : 006256
- z_rot                       : 006857
- z_semicolon                 : 0061fc
- z_sign                      : 006887
- z_sliteral                  : 0068d2
- z_source                    : 0068f5
- z_source-id                 : 0068fc
- z_space                     : 006903
- z_spaces                    : 006910
- z_squote                    : 006869
- z_star                      : 006918
- z_state                     : 006920
- z_stod                      : 006879
- z_store                     : 006242
- z_swap                      : 006926
- z_tick                      : 006326
- z_to-in                     : 006124
- z_tor                       : 00612c
- z_true                      : 00692e
- z_tuck                      : 006937
- z_two                       : 0062f4
- z_two-star                  : 0062f8
- z_type                      : 006958
- z_udmod                     : 006974
- z_ummod                     : 006a23
- z_umstar                    : 0069d2
- z_unused                    : 006a2f
- z_variable                  : 006a3c
- z_words                     : 006a64
- z_xor                       : 006a6b
- z_zbranch                   : 0062c8
- z_zero                      : 006292
- z_zero-equal                : 00629e
- z_zero-less                 : 0062aa
- z_zero-more                 : 0062c1
- z_zero-notequal             : 0062b6
- zb_done                     : 0062db
- zb_zero                     : 0062d5
- zbranch_rt                  : 0062c9
- ze_not_zero                 : 00629b
- zero-less-is-less           : 0062a7
- zero-more_done              : 0062c0
- zero-more_true              : 0062bf
- zne_is_zero                 : 0062b3
