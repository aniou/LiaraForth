A Tinkerer's Assembler for the 6502/65c02/65816
Version BETA 17. Feb 2017
Copyright 2015-2017 Scot W. Stevenson <scot.stevenson@gmail.com>
This program comes with ABSOLUTELY NO WARRANTY

Code listing for file liaraforth.tasm
Generated on Fri Feb 17 19:43:51 2017
Target MPU: 65816
External files loaded: 4
Number of passes executed: 35
Number of steps executed: 10
Assembly time: 0.16062 seconds
Code origin: 006000
Bytes of machine code: 3976

LISTING:
   Line  Status/Type State/Width Address     Bytes     Instruction
   1:000 | DONE cmt | em  8  8 |        |             | ; Liara Forth for the W65C265SXB
   2:000 | DONE cmt | em  8  8 |        |             | ; Scot W. Stevenson <scot.stevenson@gmail.com>
   3:000 | DONE cmt | em  8  8 |        |             | ; First version: 01. Apr 2016
   4:000 | DONE cmt | em  8  8 |        |             | ; This version: 17. Feb 2017
   5:000 | DONE wsp | em  8  8 |        |             |
   6:000 | DONE cmt | em  8  8 |        |             | ; This code is written in Typist's Assembler Notation for the 65c02/65816
   7:000 | DONE cmt | em  8  8 |        |             | ; See docs/MANUAL.md for more information
   8:000 | DONE wsp | em  8  8 |        |             |
   9:000 | DONE dir | em  8  8 |        |             |         .mpu 65816                   
  10:000 | DONE cmt | em  8  8 |        |             | ;       .origin 8000    ; start of code to save to Flash memory
  11:000 | DONE dir | em  8  8 |        |             |         .origin 6000                 start of code to save to built-in RAM
  12:000 | DONE wsp | em  8  8 |        |             |
  13:000 | DONE cmt | em  8  8 |        |             | ; ===================================================================
  14:000 | DONE cmt | em  8  8 |        |             | ; TOP INCLUDES
  15:000 | DONE wsp | em  8  8 |        |             |
  16:000 | DONE cmt | em  8  8 |        |             | ; Definitions for Liara Forth for the W65C265SXB
  16:001 | DONE cmt | em  8  8 |        |             | ; Scot W. Stevenson <scot.stevenson@gmail.com>
  16:002 | DONE cmt | em  8  8 |        |             | ; First version: 01. Apr 2016
  16:003 | DONE cmt | em  8  8 |        |             | ; This version: 15. Feb 2017
  16:004 | DONE wsp | em  8  8 |        |             |
  16:005 | DONE cmt | em  8  8 |        |             | ; This file is included by liaraforth.tasm
  16:006 | DONE wsp | em  8  8 |        |             |
  16:007 | DONE cmt | em  8  8 |        |             | ; Note that Typist's Assembler Notation does not distinguish between
  16:008 | DONE cmt | em  8  8 |        |             | ; upper andlower case. Variations in case are for human readers only.
  16:009 | DONE wsp | em  8  8 |        |             |
  16:010 | DONE cmt | em  8  8 |        |             | ; I/O facilities are handled in the separate kernel files. The definitions for
  16:011 | DONE cmt | em  8  8 |        |             | ; multitasking are preliminary and will probably change
  16:012 | DONE wsp | em  8  8 |        |             |
  16:013 | DONE cmt | em  8  8 |        |             | ; ===================================================================
  16:014 | DONE cmt | em  8  8 |        |             | ; CONTROL VALUES
  16:015 | DONE wsp | em  8  8 |        |             |
  16:016 | DONE cmt | em  8  8 |        |             |         ; NC_LIMIT gives the number of maximum bytes the code of a word may be
  16:017 | DONE cmt | em  8  8 |        |             |         ; long and still be compiled natively - see COMPILE, for details.
  16:018 | DONE cmt | em  8  8 |        |             |         ; A value of zero means a word is always compiled as a subroutine.
  16:019 | DONE cmt | em  8  8 |        |             |         ; TODO Decide if we want to expose this value to the user
  16:020 | DONE dir | em  8  8 |        |             |         .equ nc_limit 0              
  16:021 | DONE wsp | em  8  8 |        |             |
  16:022 | DONE cmt | em  8  8 |        |             | ; ===================================================================
  16:023 | DONE cmt | em  8  8 |        |             | ; MEMORY MAP (consider moving parts of these to kernel.tasm)
  16:024 | DONE wsp | em  8  8 |        |             |
  16:025 | DONE dir | em  8  8 |        |             |         .equ cp0              0300   start of available RAM for Dictionary
  16:026 | DONE dir | em  8  8 |        |             |         .equ physicalram     07fff   end of installed RAM
  16:027 | DONE dir | em  8  8 |        |             |         .equ maxram-single   07bff   end of available RAM (single task mode)
  16:028 | DONE dir | em  8  8 |        |             |         .equ maxram-multiple 06fff   end of available RAM (multitask mode)
  16:029 | DONE dir | em  8  8 |        |             |         .equ buffers  7c00           buffer area start
  16:030 | DONE wsp | em  8  8 |        |             |
  16:031 | DONE cmt | em  8  8 |        |             | ; The two input buffers are currently switched in REFILL by bit flipping. If you
  16:032 | DONE cmt | em  8  8 |        |             | ; change their addresses, you'll probably have to rewrite the code there
  16:033 | DONE wsp | em  8  8 |        |             |
  16:034 | DONE dir | em  8  8 |        |             |         .equ buffersize  0ff         maximum size for input buffers
  16:035 | DONE dir | em  8  8 |        |             |         .equ ibuffer1   7c00         start of 256 byte input buffer 1
  16:036 | DONE dir | em  8  8 |        |             |         .equ ibuffer2   7d00         start of 256 byte input buffer 2
  16:037 | DONE dir | em  8  8 |        |             |         .equ padsize     0ff         size of PAD, must be > &84
  16:038 | DONE dir | em  8  8 |        |             |         .equ padoffset   07f         distance from CP to PAD (holds number strings)
  16:039 | DONE wsp | em  8  8 |        |             |
  16:040 | DONE cmt | em  8  8 |        |             | ; RAM from 0000 to 01ff is left for the Mensch Monitor to use
  16:041 | DONE wsp | em  8  8 |        |             |
  16:042 | DONE dir | em  8  8 |        |             |         .equ directpage          0200 single task Direct Page (DP) start
  16:043 | DONE dir | em  8  8 |        |             |         .equ stack-multiple      7000 multitask Stack (S) area start
  16:044 | DONE dir | em  8  8 |        |             |         .equ directpage-multiple 7400 multitask Direct Page (DP) area start
  16:045 | DONE wsp | em  8  8 |        |             |
  16:046 | DONE cmt | em  8  8 |        |             | ; Initial values
  16:047 | DONE wsp | em  8  8 |        |             |
  16:048 | DONE dir | em  8  8 |        |             |         .equ stack0 7fff             single task Stack (S) start (bottom)
  16:049 | DONE dir | em  8  8 |        |             |         .equ dsp0   02f8             initial Data Stack Pointer (X)
  16:050 | DONE wsp | em  8  8 |        |             |
  16:051 | DONE cmt | em  8  8 |        |             | ; ===================================================================
  16:052 | DONE cmt | em  8  8 |        |             | ; DIRECT PAGE ADDRESSES
  16:053 | DONE wsp | em  8  8 |        |             |
  16:054 | DONE cmt | em  8  8 |        |             | ; All are one cell (two bytes) long to prevent weird errors
  16:055 | DONE cmt | em  8  8 |        |             | ; TODO move these to USER variables for multitasking
  16:056 | DONE wsp | em  8  8 |        |             |
  16:057 | DONE dir | em  8  8 |        |             |         .equ cp { 000200 + &0 }      Compiler Pointer, 2 bytes
  16:058 | DONE dir | em  8  8 |        |             |         .equ dp { 000200 + &2 }      Dictionary Pointer, 2 bytes
  16:059 | DONE dir | em  8  8 |        |             |         .equ tmpdsp { 000200 + &4 }  Temporary DSP (X) storage, 2 bytes
  16:060 | DONE dir | em  8  8 |        |             |         .equ tmptos { 000200 + &6 }  Temporary TOS (Y) storage, 2 bytes
  16:061 | DONE dir | em  8  8 |        |             |         .equ output { 000200 + &8 }  Address where output is constructed
  16:062 | DONE dir | em  8  8 |        |             |         .equ insrc { 000200 + &10 }  Input Source for SOURCE-ID
  16:063 | DONE dir | em  8  8 |        |             |         .equ cib { 000200 + &12 }    Current Input Buffer, 7c00 or 7d00
  16:064 | DONE dir | em  8  8 |        |             |         .equ ciblen { 000200 + &14 } Length of current input buffer
  16:065 | DONE dir | em  8  8 |        |             |         .equ piblen { 000200 + &16 } Length of previous input buffer
  16:066 | DONE dir | em  8  8 |        |             |         .equ toin { 000200 + &18 }   Pointer to CIB (>IN in Forth)
  16:067 | DONE dir | em  8  8 |        |             |         .equ state { 000200 + &20 }  STATE: 1 compile, 0 interpret
  16:068 | DONE dir | em  8  8 |        |             |         .equ tmp1 { 000200 + &22 }   Temporary storage
  16:069 | DONE dir | em  8  8 |        |             |         .equ tmp2 { 000200 + &24 }   Temporary storage
  16:070 | DONE dir | em  8  8 |        |             |         .equ tmp3 { 000200 + &26 }   Temporary storage
  16:071 | DONE dir | em  8  8 |        |             |         .equ base { 000200 + &28 }   Radix for number conversion
  16:072 | DONE dir | em  8  8 |        |             |         .equ workword { 000200 + &30 } Currently compiliing word
  16:073 | DONE wsp | em  8  8 |        |             |
  16:074 | DONE wsp | em  8  8 |        |             |
  16:075 | DONE cmt | em  8  8 |        |             | ; ===================================================================
  16:076 | DONE cmt | em  8  8 |        |             | ; HELPER DEFINITIONS
  16:077 | DONE wsp | em  8  8 |        |             |
  16:078 | DONE cmt | em  8  8 |        |             | ; ASCII characters
  16:079 | DONE dir | em  8  8 |        |             |         .equ AscCC   03              break (Control-C) ASCII character
  16:080 | DONE dir | em  8  8 |        |             |         .equ AscBELL 07              ACSCII bell sound
  16:081 | DONE dir | em  8  8 |        |             |         .equ AscBS   08              backspace ASCII character
  16:082 | DONE dir | em  8  8 |        |             |         .equ AscLF   0a              line feed ASCII character
  16:083 | DONE dir | em  8  8 |        |             |         .equ AscCR   0d              carriage return ASCII character
  16:084 | DONE dir | em  8  8 |        |             |         .equ AscCN   0e              ASCII CNTR-n (for next command)
  16:085 | DONE dir | em  8  8 |        |             |         .equ AscCP   10              ASCII CNTR-p (for previous command)
  16:086 | DONE dir | em  8  8 |        |             |         .equ AscESC  1b              Escape ASCII character
  16:087 | DONE dir | em  8  8 |        |             |         .equ AscSP   20              space ASCII character
  16:088 | DONE dir | em  8  8 |        |             |         .equ AscDEL  7f              DEL ASCII character
  16:089 | DONE wsp | em  8  8 |        |             |
  16:090 | DONE cmt | em  8  8 |        |             | ; Dictionary flags. The first four are currently unused
  16:091 | DONE dir | em  8  8 |        |             |         .equ PW 0008                 Primitive (Native) Word
  16:092 | DONE dir | em  8  8 |        |             |         .equ CO 0004                 Compile Only
  16:093 | DONE dir | em  8  8 |        |             |         .equ IM 0002                 Immediate Word
  16:094 | DONE dir | em  8  8 |        |             |         .equ NC 0001                 Native (inline) Compile
  16:095 | DONE wsp | em  8  8 |        |             |
  17:000 | DONE wsp | em  8  8 |        |             |
  18:000 | DONE cmt | em  8  8 |        |             | ; Hardware dependencies are isolated to a large degree in kernel files. Liara
  19:000 | DONE cmt | em  8  8 |        |             | ; Forth ships with two such files: One for the crude65816 emulator, and one for
  20:000 | DONE cmt | em  8  8 |        |             | ; the 265sxb board. Only use one.
  21:000 | DONE wsp | em  8  8 |        |             |
  22:000 | DONE cmt | em  8  8 |        |             | ;       .include kernel_emu.tasm        ; routines for crude65815 emulator
  23:000 | DONE cmt | em  8  8 |        |             | ; Basic hardware routines for Liara Forth: 265SXB version
  23:001 | DONE cmt | em  8  8 |        |             | ; Scot W. Stevenson <scot.stevenson@gmail.com>
  23:002 | DONE cmt | em  8  8 |        |             | ; First version: 04. Jan 2017
  23:003 | DONE cmt | em  8  8 |        |             | ; This version: 15. Feb 2017
  23:004 | DONE wsp | em  8  8 |        |             |
  23:005 | DONE cmt | em  8  8 |        |             | ; This section provides basic hardware interface to the 265SXB, providing the
  23:006 | DONE cmt | em  8  8 |        |             | ; PUT_CHR and GET_CHR routines that Liara Forth uses. It is in its own section
  23:007 | DONE cmt | em  8  8 |        |             | ; to make porting Forth to other machines easier.
  23:008 | DONE wsp | em  8  8 |        |             |
  23:009 | DONE cmt | em  8  8 |        |             | ; The code here is based on Andrew Jacobs' Basic Vector Handling for the
  23:010 | DONE cmt | em  8  8 |        |             | ; W65C265SXB Development Board as part of the w65c265sxb-hacker project
  23:011 | DONE cmt | em  8  8 |        |             | ; (https://github.com/andrew-jacobs/w65c265sxb-hacker). It is released under the
  23:012 | DONE cmt | em  8  8 |        |             | ; following license:
  23:013 | DONE cmt | em  8  8 |        |             | ;
  23:014 | DONE cmt | em  8  8 |        |             | ; This work is made available under the terms of the Creative Commons
  23:015 | DONE cmt | em  8  8 |        |             | ; Attribution-NonCommercial-ShareAlike 4.0 International license. Open the
  23:016 | DONE cmt | em  8  8 |        |             | ; following URL to see the details.
  23:017 | DONE cmt | em  8  8 |        |             | ;
  23:018 | DONE cmt | em  8  8 |        |             | ; http://creativecommons.org/licenses/by-nc-sa/4.0/
  23:019 | DONE wsp | em  8  8 |        |             |
  23:020 | DONE cmt | em  8  8 |        |             | ; Original variable names from w65c256.inc are included in comments to make
  23:021 | DONE cmt | em  8  8 |        |             | ; updates and changes easier
  23:022 | DONE wsp | em  8  8 |        |             |
  23:023 | DONE cmt | em  8  8 |        |             | ; ===================================================================
  23:024 | DONE cmt | em  8  8 |        |             | ; HARDWARE DEFINITIONS
  23:025 | DONE cmt | em  8  8 |        |             | ; These follow Andrew Jacobs' names, but lower case and with "hw_" prefixed.
  23:026 | DONE cmt | em  8  8 |        |             | ; This is the only file where symbols with the hw_ prefix may be defined or used
  23:027 | DONE wsp | em  8  8 |        |             |
  23:028 | DONE cmt | em  8  8 |        |             | ; Baud rates are calculated by the formula { osc_freq/(16*baud_rate)-1 } which we
  23:029 | DONE cmt | em  8  8 |        |             | ; can do on the fly at every assembly with the following parameters, or just calculate
  23:030 | DONE cmt | em  8  8 |        |             | ; once and then define brg_value with:
  23:031 | DONE cmt | em  8  8 |        |             | ;
  23:032 | DONE cmt | em  8  8 |        |             | ; - For  9600 baud, use &23
  23:033 | DONE cmt | em  8  8 |        |             | ; - For 19200 baud, use &11
  23:034 | DONE wsp | em  8  8 |        |             |
  23:035 | DONE cmt | em  8  8 |        |             | ;       .equ osc_freq  3686400          ; SXB runs at 3.6864MHz
  23:036 | DONE cmt | em  8  8 |        |             | ;       .equ baud_rate 19200            ; ACIA baud rate
  23:037 | DONE cmt | em  8  8 |        |             | ;	.equ baud_rate 9600             ; ACIA baud rate
  23:038 | DONE wsp | em  8  8 |        |             |
  23:039 | DONE dir | em  8  8 |        |             |         .equ brg_value &11           19200 baud
  23:040 | DONE cmt | em  8  8 |        |             | ;       .equ brg_value &23              ; 9600 baud
  23:041 | DONE wsp | em  8  8 |        |             |
  23:042 | DONE dir | em  8  8 |        |             |         .equ hw_pd0  0df00           Port 0 Data Register
  23:043 | DONE dir | em  8  8 |        |             |         .equ hw_pd1  0df01           Port 1 Data Register
  23:044 | DONE dir | em  8  8 |        |             |         .equ hw_pd2  0df02           Port 2 Data Register
  23:045 | DONE dir | em  8  8 |        |             |         .equ hw_pd3  0df03           Port 3 Data Register
  23:046 | DONE dir | em  8  8 |        |             |         .equ hw_pdd0 0df04           Port 0 Data Direction Register
  23:047 | DONE dir | em  8  8 |        |             |         .equ hw_pdd1 0df05           Port 1 Data Direction Register
  23:048 | DONE dir | em  8  8 |        |             |         .equ hw_pdd2 0df06           Port 2 Data Direction Register
  23:049 | DONE dir | em  8  8 |        |             |         .equ hw_pdd3 0df07           Port 3 Data Direction Register
  23:050 | DONE wsp | em  8  8 |        |             |
  23:051 | DONE dir | em  8  8 |        |             |         .equ hw_pd4  0df20           Port 4 Data Register
  23:052 | DONE dir | em  8  8 |        |             |         .equ hw_pd5  0df21           Port 5 Data Register
  23:053 | DONE dir | em  8  8 |        |             |         .equ hw_pd6  0df22           Port 6 Data Register
  23:054 | DONE dir | em  8  8 |        |             |         .equ hw_pd7  0df23           Port 7 Data Register
  23:055 | DONE dir | em  8  8 |        |             |         .equ hw_pdd4 0df24           Port 4 Data Direction Register
  23:056 | DONE dir | em  8  8 |        |             |         .equ hw_pdd5 0df25           Port 5 Data Direction Register
  23:057 | DONE dir | em  8  8 |        |             |         .equ hw_pdd6 0df26           Port 6 Data Direction Register
  23:058 | DONE dir | em  8  8 |        |             |         .equ hw_pcs7 0df27           Port 7 Chip Select
  23:059 | DONE wsp | em  8  8 |        |             |
  23:060 | DONE dir | em  8  8 |        |             |         .equ hw_bcr  0df40           Bus Control Register
  23:061 | DONE dir | em  8  8 |        |             |         .equ hw_sscr 0df41           System Speed Control Register
  23:062 | DONE dir | em  8  8 |        |             |         .equ hw_tcr  0df42           Timer Control Register
  23:063 | DONE dir | em  8  8 |        |             |         .equ hw_ter  0df43           Timer Enable Register
  23:064 | DONE dir | em  8  8 |        |             |         .equ hw_tifr 0df44           Timer Interrupt Flag Register
  23:065 | DONE dir | em  8  8 |        |             |         .equ hw_eifr 0df45           Edge Interrupt Flag Register
  23:066 | DONE dir | em  8  8 |        |             |         .equ hw_tier 0df46           Timer Interrupt Enable Register
  23:067 | DONE dir | em  8  8 |        |             |         .equ hw_eier 0df47           Edge Interrupt Enable Register
  23:068 | DONE dir | em  8  8 |        |             |         .equ hw_uifr 0df48           UART Interrupt Flag Register
  23:069 | DONE dir | em  8  8 |        |             |         .equ hw_uier 0df49           UART Interrupt Enable Register
  23:070 | DONE wsp | em  8  8 |        |             |
  23:071 | DONE dir | em  8  8 |        |             |         .equ hw_t0cl 0df60           Timer 0 Counter Low
  23:072 | DONE dir | em  8  8 |        |             |         .equ hw_t0ch 0df61           Timer 0 Counter High
  23:073 | DONE dir | em  8  8 |        |             |         .equ hw_t1cl 0df62           Timer 1 Counter Low
  23:074 | DONE dir | em  8  8 |        |             |         .equ hw_t1ch 0df63           Timer 1 Counter High
  23:075 | DONE dir | em  8  8 |        |             |         .equ hw_t2cl 0df64           Timer 2 Counter Low
  23:076 | DONE dir | em  8  8 |        |             |         .equ hw_t2ch 0df65           Timer 2 Counter High
  23:077 | DONE dir | em  8  8 |        |             |         .equ hw_t3cl 0df66           Timer 3 Counter Low
  23:078 | DONE dir | em  8  8 |        |             |         .equ hw_t3ch 0df67           Timer 3 Counter High
  23:079 | DONE dir | em  8  8 |        |             |         .equ hw_t4cl 0df68           Timer 4 Counter Low
  23:080 | DONE dir | em  8  8 |        |             |         .equ hw_t4ch 0df69           Timer 4 Counter High
  23:081 | DONE dir | em  8  8 |        |             |         .equ hw_t5cl 0df6a           Timer 5 Counter Low
  23:082 | DONE dir | em  8  8 |        |             |         .equ hw_t5ch 0df6b           Timer 5 Counter High
  23:083 | DONE dir | em  8  8 |        |             |         .equ hw_t6cl 0df6c           Timer 6 Counter Low
  23:084 | DONE dir | em  8  8 |        |             |         .equ hw_t6ch 0df6d           Timer 6 Counter High
  23:085 | DONE dir | em  8  8 |        |             |         .equ hw_t7cl 0df6e           Timer 7 Counter Low
  23:086 | DONE dir | em  8  8 |        |             |         .equ hw_t7ch 0df6f           Timer 7 Counter High
  23:087 | DONE wsp | em  8  8 |        |             |
  23:088 | DONE dir | em  8  8 |        |             |         .equ hw_acsr0 0df70          UART 0 Control/Status Register
  23:089 | DONE dir | em  8  8 |        |             |         .equ hw_artd0 0df71          UART 0 Data Register
  23:090 | DONE dir | em  8  8 |        |             |         .equ hw_acsr1 0df72          UART 1 Control/Status Register
  23:091 | DONE dir | em  8  8 |        |             |         .equ hw_artd1 0df73          UART 1 Data Register
  23:092 | DONE dir | em  8  8 |        |             |         .equ hw_acsr2 0df74          UART 2 Control/Status Register
  23:093 | DONE dir | em  8  8 |        |             |         .equ hw_artd2 0df75          UART 2 Data Register
  23:094 | DONE dir | em  8  8 |        |             |         .equ hw_acsr3 0df76          UART 3 Control/Status Register
  23:095 | DONE dir | em  8  8 |        |             |         .equ hw_artd3 0df77          UART 3 Data Register
  23:096 | DONE wsp | em  8  8 |        |             |
  23:097 | DONE wsp | em  8  8 |        |             |
  23:098 | DONE cmt | em  8  8 |        |             | ; ===================================================================
  23:099 | DONE cmt | em  8  8 |        |             | ; RESET HARDWARE
  23:100 | DONE cmt | em  8  8 |        |             | ; Call this during boot. Uses Port 0 for communication in the default setting
  23:101 | DONE lbl | em  8  8 | 006000 |             | reset_hardware                       
  23:102 | DONE ins | em  8  8 | 006000 | 78          |                 sei                  
  23:103 | DONE ins | em  8  8 | 006001 | 18          |                 clc                  
  23:104 | DONE ins | em  8  8 | 006002 | fb          |                 xce                  
  23:105 | DONE ctl | na  8  8 |        |             |         .!native
  23:106 | DONE ins | na  8  8 | 006003 | c2 10       |                 rep 10               
  23:107 | DONE ctl | na  8 16 |        |             |         .!xy16
  23:108 | DONE dir | na  8 16 |        |             |         .!a8                         
  23:109 | DONE cmt | na  8 16 |        |             |                 ; temporarily reset the stack
  23:110 | DONE ins | na  8 16 | 006005 | a2 ff 01    |                 ldx.# 01ff           
  23:111 | DONE ins | na  8 16 | 006008 | 9a          |                 txs                  
  23:112 | DONE wsp | na  8 16 |        |             |
  23:113 | DONE ins | na  8 16 | 006009 | 9c 49 df    |                 stz 00df49           UART Interrupt Enable Register (UIER)
  23:114 | DONE wsp | na  8 16 |        |             |
  23:115 | DONE ins | na  8 16 | 00600c | a9 c0       |                 lda.# 0c0            Ensure A15/AMS are output
  23:116 | DONE ins | na  8 16 | 00600e | 8d 24 df    |                 sta 00df24           Port 4 Data Direction Register (PDD4)
  23:117 | DONE ins | na  8 16 | 006011 | 9c 20 df    |                 stz 00df20           Select bank 0 (Port 4 Data Register, PD4)
  23:118 | DONE wsp | na  8 16 |        |             |
  23:119 | DONE ins | na  8 16 | 006014 | a9 10       |                 lda.# %00010000      Set UART0 to use timer 3
  23:120 | DONE ins | na  8 16 | 006016 | 1c 42 df    |                 trb 00df42           Timer Control Register (TCR)
  23:121 | DONE ins | na  8 16 | 006019 | a9 0b       |                 lda.# .lsb 00000b    And set baud rate
  23:122 | DONE ins | na  8 16 | 00601b | 8d 66 df    |                 sta 00df66           Timer 3 Counter Low (T3CL)
  23:123 | DONE ins | na  8 16 | 00601e | a9 00       |                 lda.# .msb 00000b    
  23:124 | DONE ins | na  8 16 | 006020 | 8d 67 df    |                 sta 00df67           Timer 3 Counter High (T3CH)
  23:125 | DONE ins | na  8 16 | 006023 | a9 08       |                 lda.# 08             Enable timer 3 (1<<3)
  23:126 | DONE ins | na  8 16 | 006025 | 0c 43 df    |                 tsb 00df43           Timer Enable Register (TER)
  23:127 | DONE wsp | na  8 16 |        |             |
  23:128 | DONE ins | na  8 16 | 006028 | a9 25       |                 lda.# %00100101      Set UART0 for 8-N-1
  23:129 | DONE ins | na  8 16 | 00602a | 8d 70 df    |                 sta 00df70           UART 0 Control/Status Register (ACSR0)
  23:130 | DONE wsp | na  8 16 |        |             |
  23:131 | DONE cmt | na  8 16 |        |             |                 ; set up direct page
  23:132 | DONE ins | na  8 16 | 00602d | c2 20       |                 rep 20               
  23:133 | DONE ctl | na 16 16 |        |             |         .!a16
  23:134 | DONE ins | na 16 16 | 00602f | a9 00 02    |                 lda.# 000200         
  23:135 | DONE ins | na 16 16 | 006032 | 5b          |                 tcd                  
  23:136 | DONE wsp | na 16 16 |        |             |
  23:137 | DONE ins | na 16 16 | 006033 | 4c 66 60    |                 jmp 006066           we return with A as 8 bits
  23:138 | DONE wsp | na 16 16 |        |             |
  23:139 | DONE wsp | na 16 16 |        |             |
  23:140 | DONE cmt | na 16 16 |        |             | ; ===================================================================
  23:141 | DONE cmt | na 16 16 |        |             | ; PUT_CHR
  23:142 | DONE cmt | na 16 16 |        |             | ; Wait until the last transmission has been completed then send the character
  23:143 | DONE cmt | na 16 16 |        |             | ; in A. Destroys A. Does not have to be called with A8.
  23:144 | DONE lbl | na 16 16 | 006036 |             | put_chr                              
  23:145 | DONE ins | na 16 16 | 006036 | 08          |                 php                  save register sizes
  23:146 | DONE ins | na 16 16 | 006037 | e2 20       |                 sep 20               
  23:147 | DONE ctl | na  8 16 |        |             |         .!a8
  23:148 | DONE ins | na  8 16 | 006039 | 48          |                 pha                  
  23:149 | DONE ins | na  8 16 | 00603a | a9 02       |                 lda.# 02             (1<<1)
  23:150 | DONE wsp | na  8 16 |        |             |
  23:151 | DONE lbl | na  8 16 | 00603c |             | put_chr_wait                         
  23:152 | DONE ins | na  8 16 | 00603c | 2c 48 df    |                 bit 00df48           timer finished?
  23:153 | DONE ins | na  8 16 | 00603f | f0 fb       |                 beq 00603c           
  23:154 | DONE wsp | na  8 16 |        |             |
  23:155 | DONE ins | na  8 16 | 006041 | 68          |                 pla                  
  23:156 | DONE ins | na  8 16 | 006042 | 8d 71 df    |                 sta 00df71           transmit char
  23:157 | DONE ins | na  8 16 | 006045 | 28          |                 plp                  
  23:158 | DONE wsp | na  8 16 |        |             |
  23:159 | DONE ins | na  8 16 | 006046 | 60          |                 rts                  
  23:160 | DONE wsp | na  8 16 |        |             |
  23:161 | DONE cmt | na  8 16 |        |             | ; ===================================================================
  23:162 | DONE cmt | na  8 16 |        |             | ; GET_CHR
  23:163 | DONE cmt | na  8 16 |        |             | ; Fetch the next character from the receive buffer waiting for some to arrive
  23:164 | DONE cmt | na  8 16 |        |             | ; if the buffer is empty.
  23:165 | DONE lbl | na  8 16 | 006047 |             | get_chr                              
  23:166 | DONE ins | na  8 16 | 006047 | 08          |                 php                  Save register sizes
  23:167 | DONE ins | na  8 16 | 006048 | e2 20       |                 sep 20               
  23:168 | DONE ctl | na  8 16 |        |             |         .!a8
  23:169 | DONE ins | na  8 16 | 00604a | a9 01       |                 lda.# 01             (1<<0)
  23:170 | DONE wsp | na  8 16 |        |             |
  23:171 | DONE lbl | na  8 16 | 00604c |             | get_chr_wait                         
  23:172 | DONE ins | na  8 16 | 00604c | 2c 48 df    |                 bit 00df48           Any data in RX buffer?
  23:173 | DONE ins | na  8 16 | 00604f | f0 fb       |                 beq 00604c           No, keep waiting
  23:174 | DONE ins | na  8 16 | 006051 | ad 71 df    |                 lda 00df71           Yes, read it
  23:175 | DONE ins | na  8 16 | 006054 | 28          |                 plp                  
  23:176 | DONE wsp | na  8 16 |        |             |
  23:177 | DONE ins | na  8 16 | 006055 | 60          |                 rts                  
  23:178 | DONE wsp | na  8 16 |        |             |
  23:179 | DONE cmt | na  8 16 |        |             | ; ===================================================================
  23:180 | DONE cmt | na  8 16 |        |             | ; HAVE_CHR?
  23:181 | DONE cmt | na  8 16 |        |             | ; Check if the receive buffer contains any data and return C=1 if there is
  23:182 | DONE cmt | na  8 16 |        |             | ; some.
  23:183 | DONE cmt | na  8 16 |        |             | ; TODO Test this
  23:184 | DONE wsp | na  8 16 |        |             |
  23:185 | DONE lbl | na  8 16 | 006056 |             | have_chr?                            
  23:186 | DONE ins | na  8 16 | 006056 | 48          |                 pha                  save caller's A
  23:187 | DONE ins | na  8 16 | 006057 | 08          |                 php                  
  23:188 | DONE ins | na  8 16 | 006058 | e2 20       |                 sep 20               
  23:189 | DONE ctl | na  8 16 |        |             |         .!a8
  23:190 | DONE ins | na  8 16 | 00605a | ad 48 df    |                 lda 00df48           read the status register
  23:191 | DONE ins | na  8 16 | 00605d | 28          |                 plp                  
  23:192 | DONE ins | na  8 16 | 00605e | 6a          |                 ror.a                shift hw_uart0r bit into carry
  23:193 | DONE ins | na  8 16 | 00605f | c2 20       |                 rep 20               
  23:194 | DONE ctl | na 16 16 |        |             |         .!a16
  23:195 | DONE ins | na 16 16 | 006061 | 68          |                 pla                  restore A
  23:196 | DONE ins | na 16 16 | 006062 | 60          |                 rts                  
  23:197 | DONE wsp | na 16 16 |        |             |
  23:198 | DONE cmt | na 16 16 |        |             | ; END
  24:000 | DONE wsp | na 16 16 |        |             |
  25:000 | DONE wsp | na 16 16 |        |             |
  26:000 | DONE cmt | na 16 16 |        |             | ; ===================================================================
  27:000 | DONE cmt | na 16 16 |        |             | ; DICTIONARY ROUTINES
  28:000 | DONE wsp | na 16 16 |        |             |
  29:000 | DONE cmt | na 16 16 |        |             | ; Word code routines are sorted alphabetically, except for the first three
  30:000 | DONE cmt | na 16 16 |        |             | ; - COLD, ABORT, and QUIT - and a few others that flow into each other. The
  31:000 | DONE cmt | na 16 16 |        |             | ; byte and cycle values are calculated without the RTS instruction.
  32:000 | DONE wsp | na 16 16 |        |             |
  33:000 | DONE wsp | na 16 16 |        |             |
  34:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
  35:000 | DONE cmt | na 16 16 |        |             | ; COLD ( -- ) X bytes / X Cycles
  36:000 | DONE cmt | na 16 16 |        |             | ; Reboot the system
  37:000 | DONE lbl | na 16 16 | 006063 |             | xt_cold                              
  38:000 | DONE wsp | na 16 16 |        |             |
  39:000 | DONE ins | na 16 16 | 006063 | 4c 00 60    |                 jmp 006000           don't use JSR, jump back to start
  40:000 | DONE lbl | na 16 16 | 006066 |             | start                                
  41:000 | DONE dir | na 16 16 |        |             |         .!native                     these should be handled by hardware reset
  42:000 | DONE dir | na 16 16 |        |             |         .!a16                        
  43:000 | DONE dir | na 16 16 |        |             |         .!xy16                       
  44:000 | DONE ins | na 16 16 | 006066 | 78          |                 sei                  
  45:000 | DONE wsp | na 16 16 |        |             |
  46:000 | DONE cmt | na 16 16 |        |             |                 ; TODO switch to Single Task mode
  47:000 | DONE cmt | na 16 16 |        |             |                 ; TODO set up Direct Page stuff
  48:000 | DONE cmt | na 16 16 |        |             |                 ; TODO initiate User variables
  49:000 | DONE wsp | na 16 16 |        |             |
  50:000 | DONE wsp | na 16 16 |        |             |
  51:000 | DONE cmt | na 16 16 |        |             | 		; We start out in decimal mode
  52:000 | DONE ins | na 16 16 | 006067 | 20 00 64    |                 jsr 006400           
  53:000 | DONE wsp | na 16 16 |        |             |
  54:000 | DONE cmt | na 16 16 |        |             |                 ; The name token (nt) of DROP is always the first one in the
  55:000 | DONE cmt | na 16 16 |        |             |                 ; virgin Dictionary, so we start off the Dictionary Pointer (DP)
  56:000 | DONE cmt | na 16 16 |        |             |                 ; there. Adding high-level words will change this before the
  57:000 | DONE cmt | na 16 16 |        |             |                 ; user has a chance to call WORDS
  58:000 | DONE ins | na 16 16 | 00606a | a9 f1 6b    |                 lda.# 006bf1         
  59:000 | DONE ins | na 16 16 | 00606d | 85 02       |                 sta.d 000202         
  60:000 | DONE wsp | na 16 16 |        |             |
  61:000 | DONE cmt | na 16 16 |        |             |                 ; The compiler pointer (CP) points to the first free cell
  62:000 | DONE cmt | na 16 16 |        |             |                 ; in RAM
  63:000 | DONE ins | na 16 16 | 00606f | a9 00 03    |                 lda.# 000300         
  64:000 | DONE ins | na 16 16 | 006072 | 85 00       |                 sta.d 000200         
  65:000 | DONE wsp | na 16 16 |        |             |
  66:000 | DONE cmt | na 16 16 |        |             |                 ; Prepare input buffers
  67:000 | DONE ins | na 16 16 | 006074 | a9 00 7c    |                 lda.# 007c00         start with first input buffer
  68:000 | DONE ins | na 16 16 | 006077 | 85 0c       |                 sta.d 00020c         
  69:000 | DONE wsp | na 16 16 |        |             |
  70:000 | DONE ins | na 16 16 | 006079 | 64 10       |                 stz.d 000210         previous input buffer is empty
  71:000 | DONE ins | na 16 16 | 00607b | 64 0a       |                 stz.d 00020a         SOURCE-ID is zero
  72:000 | DONE ins | na 16 16 | 00607d | 64 14       |                 stz.d 000214         STATE is zero (interpret)
  73:000 | DONE wsp | na 16 16 |        |             |
  74:000 | DONE cmt | na 16 16 |        |             |                 ; Clear Data Stack
  75:000 | DONE ins | na 16 16 | 00607f | a0 00 00    |                 ldy.# 0000           
  76:000 | DONE ins | na 16 16 | 006082 | a2 f8 02    |                 ldx.# 0002f8         
  77:000 | DONE wsp | na 16 16 |        |             |
  78:000 | DONE cmt | na 16 16 |        |             |                 ; Clean the screen, assumes vt100 terminal
  79:000 | DONE ins | na 16 16 | 006085 | 20 9c 65    |                 jsr 00659c           
  80:000 | DONE wsp | na 16 16 |        |             |
  81:000 | DONE cmt | na 16 16 |        |             |                 ; Define high-level words via EVALUATE. At this point, whatever
  82:000 | DONE cmt | na 16 16 |        |             |                 ; is in Y (TOS) is rubbish, so we don't have to push it to the
  83:000 | DONE cmt | na 16 16 |        |             |                 ; stack first
  84:000 | DONE ins | na 16 16 | 006088 | ca          |                 dex                  
  85:000 | DONE ins | na 16 16 | 006089 | ca          |                 dex                  
  86:000 | DONE ins | na 16 16 | 00608a | ca          |                 dex                  
  87:000 | DONE ins | na 16 16 | 00608b | ca          |                 dex                  
  88:000 | DONE ins | na 16 16 | 00608c | a9 cb 6c    |                 lda.# 006ccb         
  89:000 | DONE ins | na 16 16 | 00608f | 95 00       |                 sta.dx 00            Start address goes in NOS
  90:000 | DONE ins | na 16 16 | 006091 | a0 15 01    |                 ldy.# 000115         length goes in TOS
  91:000 | DONE wsp | na 16 16 |        |             |
  92:000 | DONE ins | na 16 16 | 006094 | 20 69 64    |                 jsr 006469           
  93:000 | DONE wsp | na 16 16 |        |             |
  94:000 | DONE cmt | na 16 16 |        |             |                 ; drop through to ABORT
  95:000 | DONE wsp | na 16 16 |        |             |
  96:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
  97:000 | DONE cmt | na 16 16 |        |             | ; ABORT ( -- ) 8+ bytes / X cycles
  98:000 | DONE cmt | na 16 16 |        |             | ; Reset the parameter (data) stack pointer and continue as QUIT
  99:000 | DONE cmt | na 16 16 |        |             | ; We can jump here via subroutine because we reset the stack pointer
 100:000 | DONE cmt | na 16 16 |        |             | ; anyway. Flows into QUIT.
 101:000 | DONE cmt | na 16 16 |        |             | ; TODO see which parts of COLD we should integrate here
 102:000 | DONE lbl | na 16 16 | 006097 |             | xt_abort                             
 103:000 | DONE ins | na 16 16 | 006097 | c2 20       |                 rep 20               
 103:001 | DONE ctl | na 16 16 |        |             |         .!a16
 104:000 | DONE cmt | na 16 16 |        |             |                 ; clear Data Stack
 105:000 | DONE ins | na 16 16 | 006099 | a0 00 00    |                 ldy.# 0000           
 106:000 | DONE ins | na 16 16 | 00609c | a2 f8 02    |                 ldx.# 0002f8         
 107:000 | DONE wsp | na 16 16 |        |             |
 108:000 | DONE wsp | na 16 16 |        |             |
 109:000 | DONE cmt | na 16 16 |        |             | ; drops through to QUIT, z_abort is the same as z_quit.
 110:000 | DONE wsp | na 16 16 |        |             |
 111:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 112:000 | DONE cmt | na 16 16 |        |             | ; QUIT ( -- ) X bytes / X cycles
 113:000 | DONE cmt | na 16 16 |        |             | ; Reset the input, clearning Return Stack. Jumps to QUIT do not have to be
 114:000 | DONE cmt | na 16 16 |        |             | ; subroutine jumps as the Return Stack is cleared anyway. Liara Forth follows
 115:000 | DONE cmt | na 16 16 |        |             | ; the ANSI Forth recommendation to use REFILL. Note we don't display the "ok"
 116:000 | DONE cmt | na 16 16 |        |             | ; system prompt until after the first output. This follows Gforth.
 117:000 | DONE lbl | na 16 16 | 00609f |             | xt_quit                              
 118:000 | DONE cmt | na 16 16 |        |             |                 ; clear Return Stack
 119:000 | DONE ins | na 16 16 | 00609f | a9 ff 7f    |                 lda.# 007fff         
 120:000 | DONE ins | na 16 16 | 0060a2 | 1b          |                 tcs                  
 121:000 | DONE wsp | na 16 16 |        |             |
 122:000 | DONE cmt | na 16 16 |        |             |                 ; make sure Instruction Pointer is empty
 123:000 | DONE cmt | na 16 16 |        |             |                 ; TODO move this someplace else or else it will end up in ROM
 124:000 | DONE ins | na 16 16 | 0060a3 | 9c 98 64    |                 stz 006498           
 125:000 | DONE wsp | na 16 16 |        |             |
 126:000 | DONE cmt | na 16 16 |        |             |                 ; switch SOURCE-ID to zero (keyboard input)
 127:000 | DONE ins | na 16 16 | 0060a6 | 64 0a       |                 stz.d 00020a         
 128:000 | DONE wsp | na 16 16 |        |             |
 129:000 | DONE cmt | na 16 16 |        |             |                 ; switch to interpret state (STATE is zero)
 130:000 | DONE ins | na 16 16 | 0060a8 | 64 14       |                 stz.d 000214         
 131:000 | DONE wsp | na 16 16 |        |             |
 132:000 | DONE lbl | na 16 16 | 0060aa |             | quit_get_line                        
 133:000 | DONE cmt | na 16 16 |        |             |                 ; Empty current input buffer. Note the previous input line is
 134:000 | DONE cmt | na 16 16 |        |             |                 ; conserved even if we came here from an abort
 135:000 | DONE ins | na 16 16 | 0060aa | 64 0e       |                 stz.d 00020e         
 136:000 | DONE wsp | na 16 16 |        |             |
 137:000 | DONE cmt | na 16 16 |        |             |                 ; Accept a line from the current input source
 138:000 | DONE ins | na 16 16 | 0060ac | 20 43 66    |                 jsr 006643           ( -- f )
 139:000 | DONE wsp | na 16 16 |        |             |
 140:000 | DONE ins | na 16 16 | 0060af | 98          |                 tya                  force flag test
 141:000 | DONE ins | na 16 16 | 0060b0 | d0 06       |                 bne 0060b8           
 142:000 | DONE wsp | na 16 16 |        |             |
 143:000 | DONE cmt | na 16 16 |        |             |                 ; If REFILL returned a FALSE flag, something went wrong and we
 144:000 | DONE cmt | na 16 16 |        |             |                 ; need to print an error message and reset the machine. We don't
 145:000 | DONE cmt | na 16 16 |        |             |                 ; need to save TOS because we're going to clobber it anyway when we
 146:000 | DONE cmt | na 16 16 |        |             |                 ; go back to ABORT.
 147:000 | DONE ins | na 16 16 | 0060b2 | a9 b4 6e    |                 lda.# 006eb4         
 148:000 | DONE ins | na 16 16 | 0060b5 | 4c 91 6c    |                 jmp 006c91           
 149:000 | DONE wsp | na 16 16 |        |             |
 150:000 | DONE wsp | na 16 16 |        |             |
 151:000 | DONE lbl | na 16 16 | 0060b8 |             | quit_refill_successful               
 152:000 | DONE cmt | na 16 16 |        |             |                 ; Assume we have successfully accepted a string of input from
 153:000 | DONE cmt | na 16 16 |        |             |                 ; a source, with address of buffer in cib and length of input in
 154:000 | DONE cmt | na 16 16 |        |             |                 ; ciblen. We arrive here still with the TRUE flag from REFILL as
 155:000 | DONE cmt | na 16 16 |        |             |                 ; TOS (in Y)
 156:000 | DONE ins | na 16 16 | 0060b8 | b4 00       |                 ldy.dx 00            drop TOS
 157:000 | DONE ins | na 16 16 | 0060ba | e8          |                 inx                  
 158:000 | DONE ins | na 16 16 | 0060bb | e8          |                 inx                  
 159:000 | DONE wsp | na 16 16 |        |             |
 160:000 | DONE cmt | na 16 16 |        |             |                 ; make >IN point to begining of buffer
 161:000 | DONE ins | na 16 16 | 0060bc | 64 12       |                 stz.d 000212         
 162:000 | DONE wsp | na 16 16 |        |             |
 163:000 | DONE cmt | na 16 16 |        |             |                 ; Main compile/execute routine. Consider moving this inside QUIT
 164:000 | DONE cmt | na 16 16 |        |             |                 ; once we know everything works
 165:000 | DONE ins | na 16 16 | 0060be | 20 1f 6c    |                 jsr 006c1f           
 166:000 | DONE wsp | na 16 16 |        |             |
 167:000 | DONE cmt | na 16 16 |        |             |                 ; Test for Data Stack underflow. Our stack is so large in single
 168:000 | DONE cmt | na 16 16 |        |             |                 ; user mode that we don't bother checking for overflow - if that
 169:000 | DONE cmt | na 16 16 |        |             |                 ; happens, we're screwed anyway
 170:000 | DONE ins | na 16 16 | 0060c1 | e0 f9 02    |                 cpx.# 0002f9         
 171:000 | DONE ins | na 16 16 | 0060c4 | 90 06       |                 bcc 0060cc           DSP must always be smaller (!) than DSP0
 172:000 | DONE wsp | na 16 16 |        |             |
 173:000 | DONE ins | na 16 16 | 0060c6 | a9 1a 6f    |                 lda.# 006f1a         
 174:000 | DONE ins | na 16 16 | 0060c9 | 4c 91 6c    |                 jmp 006c91           
 175:000 | DONE wsp | na 16 16 |        |             |
 176:000 | DONE lbl | na 16 16 | 0060cc |             | quit_ok                              
 177:000 | DONE cmt | na 16 16 |        |             |                 ; Display system prompt if all went well. If we're interpreting,
 178:000 | DONE cmt | na 16 16 |        |             |                 ; this is " ok", if we're compiling, it's " compiled"
 179:000 | DONE ins | na 16 16 | 0060cc | a5 14       |                 lda.d 000214         
 180:000 | DONE ins | na 16 16 | 0060ce | d0 05       |                 bne 0060d5           
 181:000 | DONE wsp | na 16 16 |        |             |
 182:000 | DONE ins | na 16 16 | 0060d0 | a9 e0 6d    |                 lda.# 006de0         
 183:000 | DONE ins | na 16 16 | 0060d3 | 80 03       |                 bra 0060d8           
 184:000 | DONE lbl | na 16 16 | 0060d5 |             | quit_compiled                        
 185:000 | DONE ins | na 16 16 | 0060d5 | a9 e4 6d    |                 lda.# 006de4         fall through to quit_print
 186:000 | DONE lbl | na 16 16 | 0060d8 |             | quit_print                           
 187:000 | DONE ins | na 16 16 | 0060d8 | 20 97 6c    |                 jsr 006c97           
 188:000 | DONE wsp | na 16 16 |        |             |
 189:000 | DONE cmt | na 16 16 |        |             |                 ; Awesome line, guys. Now get the next one
 190:000 | DONE ins | na 16 16 | 0060db | 4c aa 60    |                 jmp 0060aa           
 191:000 | DONE wsp | na 16 16 |        |             |
 192:000 | DONE lbl | na 16 16 | 0060de |             | z_cold                               
 193:000 | DONE lbl | na 16 16 | 0060de |             | z_abort                              
 194:000 | DONE lbl | na 16 16 | 0060de |             | z_quit                               
 194:001 | DONE ins | na 16 16 | 0060de | ea          |                 nop                  dummy for compilation, TODO test if required
 195:000 | DONE wsp | na 16 16 |        |             |
 196:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 197:000 | DONE cmt | na 16 16 |        |             | ; >IN "TO-IN" ( -- addr ) 6 bytes / 12 cycles
 198:000 | DONE cmt | na 16 16 |        |             | ; Return address where pointer to current char in input buffer lives (>IN)
 199:000 | DONE lbl | na 16 16 | 0060df |             | xt_to-in                             
 200:000 | DONE ins | na 16 16 | 0060df | ca          |                 dex                  
 201:000 | DONE ins | na 16 16 | 0060e0 | ca          |                 dex                  
 202:000 | DONE ins | na 16 16 | 0060e1 | 94 00       |                 sty.dx 00            
 203:000 | DONE wsp | na 16 16 |        |             |
 204:000 | DONE ins | na 16 16 | 0060e3 | a0 12 02    |                 ldy.# 000212         >IN
 205:000 | DONE lbl | na 16 16 | 0060e6 |             | z_to-in                              
 205:001 | DONE ins | na 16 16 | 0060e6 | 60          |                 rts                  
 206:000 | DONE wsp | na 16 16 |        |             |
 207:000 | DONE wsp | na 16 16 |        |             |
 208:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 209:000 | DONE cmt | na 16 16 |        |             | ; . "DOT" ( n -- ) X bytes / X cycles
 210:000 | DONE cmt | na 16 16 |        |             | ; Print value that is TOS followed by a single space
 211:000 | DONE cmt | na 16 16 |        |             | ; Forth code is  DUP ABS 0 <# #S ROT SIGN #> TYPE SPACE
 212:000 | DONE cmt | na 16 16 |        |             | ; Since this is used interactively, and humans are slow (just ask GlaDOS), we
 213:000 | DONE cmt | na 16 16 |        |             | ; focus on size
 214:000 | DONE cmt | na 16 16 |        |             | ; TODO this is a temporary version
 215:000 | DONE lbl | na 16 16 | 0060e7 |             | xt_dot                               
 216:000 | DONE cmt | na 16 16 |        |             |                 ; --- TEMP print routine ---
 217:000 | DONE ins | na 16 16 | 0060e7 | 98          |                 tya                  
 218:000 | DONE ins | na 16 16 | 0060e8 | 29 00 ff    |                 and.# 0ff00          
 219:000 | DONE ins | na 16 16 | 0060eb | eb          |                 xba                  
 220:000 | DONE ins | na 16 16 | 0060ec | 20 af 6c    |                 jsr 006caf           
 221:000 | DONE ins | na 16 16 | 0060ef | 98          |                 tya                  
 222:000 | DONE ins | na 16 16 | 0060f0 | 29 ff 00    |                 and.# 00ff           
 223:000 | DONE ins | na 16 16 | 0060f3 | 20 af 6c    |                 jsr 006caf           
 224:000 | DONE ins | na 16 16 | 0060f6 | 20 06 67    |                 jsr 006706           
 225:000 | DONE cmt | na 16 16 |        |             |                 ; --- TEMP print routine ---
 226:000 | DONE wsp | na 16 16 |        |             |
 227:000 | DONE cmt | na 16 16 |        |             |                 ; Since we don't care about speed in this word, we save one byte
 228:000 | DONE cmt | na 16 16 |        |             |                 ; by doing DROP the slow way and save one byte
 229:000 | DONE ins | na 16 16 | 0060f9 | 20 38 64    |                 jsr 006438           
 230:000 | DONE wsp | na 16 16 |        |             |
 231:000 | DONE lbl | na 16 16 | 0060fc |             | z_dot                                
 231:001 | DONE ins | na 16 16 | 0060fc | 60          |                 rts                  
 232:000 | DONE wsp | na 16 16 |        |             |
 233:000 | DONE wsp | na 16 16 |        |             |
 234:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 235:000 | DONE cmt | na 16 16 |        |             | ; .( "DOTPAREN" ( "string" -- ) 13 bytes / X cycles
 236:000 | DONE cmt | na 16 16 |        |             | ; Display string delimited by ")" immediately, regardless if word is compiled or
 237:000 | DONE cmt | na 16 16 |        |             | ; interpreted. Forth definition is  .( [CHAR] ) PARSE TYPE ; IMMEDIATE
 238:000 | DONE cmt | na 16 16 |        |             | ; TODO Decide if this should be a high-level word
 239:000 | DONE lbl | na 16 16 | 0060fd |             | xt_dotparen                          
 240:000 | DONE cmt | na 16 16 |        |             |                ; use PARSE to find the end of the string
 241:000 | DONE ins | na 16 16 | 0060fd | ca          |                 dex                  
 242:000 | DONE ins | na 16 16 | 0060fe | ca          |                 dex                  
 243:000 | DONE ins | na 16 16 | 0060ff | 94 00       |                 sty.dx 00            
 244:000 | DONE ins | na 16 16 | 006101 | a0 29 00    |                 ldy.# 29             
 245:000 | DONE wsp | na 16 16 |        |             |
 246:000 | DONE ins | na 16 16 | 006104 | 20 db 65    |                 jsr 0065db           ( -- addr u)
 247:000 | DONE ins | na 16 16 | 006107 | 20 39 67    |                 jsr 006739           
 248:000 | DONE wsp | na 16 16 |        |             |
 249:000 | DONE lbl | na 16 16 | 00610a |             | z_dotparen                           
 249:001 | DONE ins | na 16 16 | 00610a | 60          |                 rts                  
 250:000 | DONE wsp | na 16 16 |        |             |
 251:000 | DONE wsp | na 16 16 |        |             |
 252:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 253:000 | DONE cmt | na 16 16 |        |             | ; .S "DOTS" ( -- ) X bytes / X cycles
 254:000 | DONE cmt | na 16 16 |        |             | ; Print content of Data Stack non-distructively. Since this is for humans, we
 255:000 | DONE cmt | na 16 16 |        |             | ; don't have to worry about speed. We follow the format of Gforth
 256:000 | DONE cmt | na 16 16 |        |             | ; and print the number of elements first in brackets, followed by the Data Stack
 257:000 | DONE cmt | na 16 16 |        |             | ; content (if present).
 258:000 | DONE lbl | na 16 16 | 00610b |             | xt_dots                              
 259:000 | DONE dir | na 16 16 |        |             |         .!a16                        
 260:000 | DONE dir | na 16 16 |        |             |         .!xy16                       
 261:000 | DONE ins | na 16 16 | 00610b | 20 06 64    |                 jsr 006406           ( -- u)
 262:000 | DONE wsp | na 16 16 |        |             |
 263:000 | DONE cmt | na 16 16 |        |             |                 ; Print stack depth in brackets
 264:000 | DONE cmt | na 16 16 |        |             |                 ; TODO rewrite this to use EMIT
 265:000 | DONE ins | na 16 16 | 00610e | a9 3c 00    |                 lda.# 3c             
 266:000 | DONE ins | na 16 16 | 006111 | 20 36 60    |                 jsr 006036           
 267:000 | DONE wsp | na 16 16 |        |             |
 268:000 | DONE cmt | na 16 16 |        |             |                 ; --- TEMP print routine ---
 269:000 | DONE ins | na 16 16 | 006114 | 98          |                 tya                  
 270:000 | DONE ins | na 16 16 | 006115 | 29 00 ff    |                 and.# 0ff00          
 271:000 | DONE ins | na 16 16 | 006118 | eb          |                 xba                  
 272:000 | DONE ins | na 16 16 | 006119 | 20 af 6c    |                 jsr 006caf           
 273:000 | DONE ins | na 16 16 | 00611c | 98          |                 tya                  
 274:000 | DONE ins | na 16 16 | 00611d | 29 ff 00    |                 and.# 00ff           
 275:000 | DONE ins | na 16 16 | 006120 | 20 af 6c    |                 jsr 006caf           
 276:000 | DONE cmt | na 16 16 |        |             |                 ; --- TEMP print routine ---
 277:000 | DONE wsp | na 16 16 |        |             |
 278:000 | DONE cmt | na 16 16 |        |             |                 ; TODO rewrite this to use EMIT
 279:000 | DONE ins | na 16 16 | 006123 | a9 3e 00    |                 lda.# 3e             
 280:000 | DONE ins | na 16 16 | 006126 | 20 36 60    |                 jsr 006036           
 281:000 | DONE ins | na 16 16 | 006129 | 20 06 67    |                 jsr 006706           
 282:000 | DONE wsp | na 16 16 |        |             |
 283:000 | DONE wsp | na 16 16 |        |             |
 284:000 | DONE cmt | na 16 16 |        |             |                 ; There will be a lot of cases where .S is used when the stack
 285:000 | DONE cmt | na 16 16 |        |             |                 ; is empty. Get them first and exit quickly
 286:000 | DONE ins | na 16 16 | 00612c | 98          |                 tya                  force flag test
 287:000 | DONE ins | na 16 16 | 00612d | f0 20       |                 beq 00614f           
 288:000 | DONE wsp | na 16 16 |        |             |
 289:000 | DONE lbl | na 16 16 | 00612f |             | dots_not_empty                       
 290:000 | DONE cmt | na 16 16 |        |             |                 ; We have at least one element on the stack, which used to be in
 291:000 | DONE cmt | na 16 16 |        |             |                 ; Y as TOS, but is now NOS and therefore accessable by X. Also,
 292:000 | DONE cmt | na 16 16 |        |             |                 ; the depth of the Data Stack is already in Y waiting to be used
 293:000 | DONE cmt | na 16 16 |        |             |                 ; as a counter. We use this to our advantage.
 294:000 | DONE wsp | na 16 16 |        |             |
 295:000 | DONE cmt | na 16 16 |        |             |                 ; Normally we would go with STX.D tmptos / LDX.D tmptos with
 296:000 | DONE cmt | na 16 16 |        |             |                 ; 4 bytes and 8 cycles because we value speed over size.
 297:000 | DONE cmt | na 16 16 |        |             |                 ; However, .S is used interactively, and humans
 298:000 | DONE cmt | na 16 16 |        |             |                 ; won't notice the one cycle more of PHX/PLX (2 bytes,
 299:000 | DONE cmt | na 16 16 |        |             |                 ; 9 cycles). We save the two bytes.
 300:000 | DONE ins | na 16 16 | 00612f | da          |                 phx                  
 301:000 | DONE wsp | na 16 16 |        |             |
 302:000 | DONE cmt | na 16 16 |        |             |                 ; We print from the bottom up. Note that the Data Stack locations
 303:000 | DONE cmt | na 16 16 |        |             |                 ; dsp0 and dsp0+2 always contain garbage so they can be skipped,
 304:000 | DONE cmt | na 16 16 |        |             |                 ; see docs/INTERNALS.md for more details
 305:000 | DONE ins | na 16 16 | 006130 | a2 f8 02    |                 ldx.# 0002f8         points to dsp0, which is garbage
 306:000 | DONE ins | na 16 16 | 006133 | ca          |                 dex                  
 307:000 | DONE ins | na 16 16 | 006134 | ca          |                 dex                  points to dsp0-2, which is more garbage
 308:000 | DONE wsp | na 16 16 |        |             |
 309:000 | DONE lbl | na 16 16 | 006135 |             | dots_loop                            
 310:000 | DONE ins | na 16 16 | 006135 | ca          |                 dex                  get next element on DS, initially dsp0-4
 311:000 | DONE ins | na 16 16 | 006136 | ca          |                 dex                  
 312:000 | DONE wsp | na 16 16 |        |             |
 313:000 | DONE cmt | na 16 16 |        |             |                 ; --- TEMP print routine ---
 314:000 | DONE cmt | na 16 16 |        |             |                 ; TODO call EMIT
 315:000 | DONE ins | na 16 16 | 006137 | b5 00       |                 lda.dx 00            
 316:000 | DONE ins | na 16 16 | 006139 | 29 00 ff    |                 and.# 0ff00          
 317:000 | DONE ins | na 16 16 | 00613c | eb          |                 xba                  
 318:000 | DONE ins | na 16 16 | 00613d | 20 af 6c    |                 jsr 006caf           
 319:000 | DONE ins | na 16 16 | 006140 | b5 00       |                 lda.dx 00            
 320:000 | DONE ins | na 16 16 | 006142 | 29 ff 00    |                 and.# 00ff           
 321:000 | DONE ins | na 16 16 | 006145 | 20 af 6c    |                 jsr 006caf           
 322:000 | DONE ins | na 16 16 | 006148 | 20 06 67    |                 jsr 006706           
 323:000 | DONE cmt | na 16 16 |        |             |                 ; --- TEMP print routine ---
 324:000 | DONE wsp | na 16 16 |        |             |
 325:000 | DONE ins | na 16 16 | 00614b | 88          |                 dey                  
 326:000 | DONE ins | na 16 16 | 00614c | d0 e7       |                 bne 006135           
 327:000 | DONE wsp | na 16 16 |        |             |
 328:000 | DONE ins | na 16 16 | 00614e | fa          |                 plx                  restore original DSP
 329:000 | DONE wsp | na 16 16 |        |             |
 330:000 | DONE lbl | na 16 16 | 00614f |             | dots_done                            
 331:000 | DONE cmt | na 16 16 |        |             |                 ; Clean up. Again, we don't care about speed in this
 332:000 | DONE cmt | na 16 16 |        |             |                 ; word so we save one byte by doing DROP the slow way
 333:000 | DONE ins | na 16 16 | 00614f | 20 38 64    |                 jsr 006438           
 334:000 | DONE wsp | na 16 16 |        |             |
 335:000 | DONE lbl | na 16 16 | 006152 |             | z_dots                               
 335:001 | DONE ins | na 16 16 | 006152 | 60          |                 rts                  
 336:000 | DONE wsp | na 16 16 |        |             |
 337:000 | DONE wsp | na 16 16 |        |             |
 338:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 339:000 | DONE cmt | na 16 16 |        |             | ; , "COMMA" ( n -- ) 11 bytes / 29 cycles
 340:000 | DONE cmt | na 16 16 |        |             | ; Allot one cell and store TOS in memory. We ignore alignment issues, though
 341:000 | DONE cmt | na 16 16 |        |             | ; satisfy the ANSI requirement that an aligned compiler pointer will remain
 342:000 | DONE cmt | na 16 16 |        |             | ; aligned
 343:000 | DONE cmt | na 16 16 |        |             | ; There is another variant possible:
 344:000 | DONE cmt | na 16 16 |        |             | ;               tya
 345:000 | DONE cmt | na 16 16 |        |             | ;               ldy.d cp
 346:000 | DONE cmt | na 16 16 |        |             | ;               sta.y 0000
 347:000 | DONE cmt | na 16 16 |        |             | ;               iny
 348:000 | DONE cmt | na 16 16 |        |             | ;               iny
 349:000 | DONE cmt | na 16 16 |        |             | ;               sty.d cp
 350:000 | DONE cmt | na 16 16 |        |             | ;               ldy.dx 00
 351:000 | DONE cmt | na 16 16 |        |             | ;               inx
 352:000 | DONE cmt | na 16 16 |        |             | ;               inx
 353:000 | DONE cmt | na 16 16 |        |             | ; This is as fast as the variant below, but three bytes longer
 354:000 | DONE lbl | na 16 16 | 006153 |             | xt_comma                             
 355:000 | DONE ins | na 16 16 | 006153 | 98          |                 tya                  
 356:000 | DONE ins | na 16 16 | 006154 | 92 00       |                 sta.di 000200        STA (CP)
 357:000 | DONE ins | na 16 16 | 006156 | e6 00       |                 inc.d 000200         
 358:000 | DONE ins | na 16 16 | 006158 | e6 00       |                 inc.d 000200         
 359:000 | DONE wsp | na 16 16 |        |             |
 360:000 | DONE ins | na 16 16 | 00615a | b4 00       |                 ldy.dx 00            
 361:000 | DONE ins | na 16 16 | 00615c | e8          |                 inx                  
 362:000 | DONE ins | na 16 16 | 00615d | e8          |                 inx                  
 363:000 | DONE wsp | na 16 16 |        |             |
 364:000 | DONE lbl | na 16 16 | 00615e |             | z_comma                              
 364:001 | DONE ins | na 16 16 | 00615e | 60          |                 rts                  
 365:000 | DONE wsp | na 16 16 |        |             |
 366:000 | DONE wsp | na 16 16 |        |             |
 367:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 368:000 | DONE cmt | na 16 16 |        |             | ; : "COLON" ( "name" -- ) X bytes / X cycles
 369:000 | DONE cmt | na 16 16 |        |             | ; Start compilation of new word into the Dictionary. Use the CREATE routine
 370:000 | DONE cmt | na 16 16 |        |             | ; and fill in the rest by hand.
 371:000 | DONE lbl | na 16 16 | 00615f |             | xt_colon                             
 372:000 | DONE dir | na 16 16 |        |             |         .!a16                        
 373:000 | DONE cmt | na 16 16 |        |             |                 ; if we are already in compile mode, complain and abort
 374:000 | DONE ins | na 16 16 | 00615f | a5 14       |                 lda.d 000214         
 375:000 | DONE ins | na 16 16 | 006161 | f0 06       |                 beq 006169           
 376:000 | DONE wsp | na 16 16 |        |             |
 377:000 | DONE ins | na 16 16 | 006163 | a9 02 6f    |                 lda.# 006f02         
 378:000 | DONE ins | na 16 16 | 006166 | 4c 91 6c    |                 jmp 006c91           
 379:000 | DONE lbl | na 16 16 | 006169 |             | @                                    
 380:000 | DONE cmt | na 16 16 |        |             |                 ; Switch to compile state. From now on, everything goes in the
 381:000 | DONE cmt | na 16 16 |        |             |                 ; Dictionary
 382:000 | DONE ins | na 16 16 | 006169 | e6 14       |                 inc.d 000214         
 383:000 | DONE wsp | na 16 16 |        |             |
 384:000 | DONE cmt | na 16 16 |        |             |                 ; CREATE is going to change DP to point to the new word's
 385:000 | DONE cmt | na 16 16 |        |             |                 ; header. While this is fine for (say) variables, it would mean
 386:000 | DONE cmt | na 16 16 |        |             |                 ; that FIND-NAME etc would find a half-finished word when
 387:000 | DONE cmt | na 16 16 |        |             |                 ; looking in the Dictionary. To prevent this, we save the old
 388:000 | DONE cmt | na 16 16 |        |             |                 ; version of DP and restore it later. The new DP is placed in
 389:000 | DONE cmt | na 16 16 |        |             |                 ; the variable WORKWORD until we're finished with a SEMICOLON.
 390:000 | DONE ins | na 16 16 | 00616b | a5 02       |                 lda.d 000202         
 391:000 | DONE ins | na 16 16 | 00616d | 48          |                 pha                  CREATE uses tmp1, tmp2 and tmp3
 392:000 | DONE wsp | na 16 16 |        |             |
 393:000 | DONE ins | na 16 16 | 00616e | 20 8d 63    |                 jsr 00638d           
 394:000 | DONE wsp | na 16 16 |        |             |
 395:000 | DONE cmt | na 16 16 |        |             |                 ; Get the nt of the new word as described above. Only COLON,
 396:000 | DONE cmt | na 16 16 |        |             |                 ; SEMICOLON and RECURSE access WORKWORD
 397:000 | DONE ins | na 16 16 | 006171 | a5 02       |                 lda.d 000202         
 398:000 | DONE ins | na 16 16 | 006173 | 85 1e       |                 sta.d 00021e         
 399:000 | DONE ins | na 16 16 | 006175 | 68          |                 pla                  
 400:000 | DONE ins | na 16 16 | 006176 | 85 02       |                 sta.d 000202         
 401:000 | DONE wsp | na 16 16 |        |             |
 402:000 | DONE cmt | na 16 16 |        |             |                 ; CREATE includes a subroutine jump to DOVAR by default. We back
 403:000 | DONE cmt | na 16 16 |        |             |                 ; up three bytes and overwrite that. Note that 3 x DEC.D would
 404:000 | DONE cmt | na 16 16 |        |             |                 ; use 3 bytes and 18 cycles; this version uses 8 bytes but
 405:000 | DONE cmt | na 16 16 |        |             |                 ; only 13 cycles
 406:000 | DONE ins | na 16 16 | 006178 | a5 00       |                 lda.d 000200         
 407:000 | DONE ins | na 16 16 | 00617a | 38          |                 sec                  
 408:000 | DONE ins | na 16 16 | 00617b | e9 03 00    |                 sbc.# 0003           
 409:000 | DONE ins | na 16 16 | 00617e | 85 00       |                 sta.d 000200         
 410:000 | DONE wsp | na 16 16 |        |             |
 411:000 | DONE lbl | na 16 16 | 006180 |             | z_colon                              
 411:001 | DONE ins | na 16 16 | 006180 | 60          |                 rts                  
 412:000 | DONE wsp | na 16 16 |        |             |
 413:000 | DONE wsp | na 16 16 |        |             |
 414:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 415:000 | DONE cmt | na 16 16 |        |             | ; ; "SEMICOLON" ( -- ) X bytes / X cycles
 416:000 | DONE cmt | na 16 16 |        |             | ; End the compilation of a new word into the Dictionary. When we enter this,
 417:000 | DONE cmt | na 16 16 |        |             | ; WORKWORD is pointing to the nt_ of this word in the Dictionary, DP to the
 418:000 | DONE cmt | na 16 16 |        |             | ; previous word, and CP to the next free byte.  A Forth definition would be
 419:000 | DONE cmt | na 16 16 |        |             | ; (see "Starting Forth"):
 420:000 | DONE cmt | na 16 16 |        |             | ;  : ;  POSTPONE EXIT  REVEAL POSTPONE ; [ ; IMMEDIATE
 421:000 | DONE lbl | na 16 16 | 006181 |             | xt_semicolon                         
 422:000 | DONE dir | na 16 16 |        |             |         .!a16                        
 423:000 | DONE ins | na 16 16 | 006181 | 84 06       |                 sty.d 000206         
 424:000 | DONE wsp | na 16 16 |        |             |
 425:000 | DONE cmt | na 16 16 |        |             |                 ; CP is the byte that will be the address we use in the header for
 426:000 | DONE cmt | na 16 16 |        |             |                 ; the end-of-compile address (z_word). This is six bytes down in
 427:000 | DONE cmt | na 16 16 |        |             |                 ; the header
 428:000 | DONE ins | na 16 16 | 006183 | a0 06 00    |                 ldy.# 0006           
 429:000 | DONE ins | na 16 16 | 006186 | a5 00       |                 lda.d 000200         
 430:000 | DONE ins | na 16 16 | 006188 | 91 1e       |                 sta.diy 00021e       STA (WORKWORD),Y
 431:000 | DONE wsp | na 16 16 |        |             |
 432:000 | DONE cmt | na 16 16 |        |             |                 ; Add the RTS instruction to the end of the current word. We
 433:000 | DONE cmt | na 16 16 |        |             |                 ; don't have to switch the size of the A register because we
 434:000 | DONE cmt | na 16 16 |        |             |                 ; only move up the CP by one and the MSB will be overwritten.
 435:000 | DONE cmt | na 16 16 |        |             |                 ; Little endian MPUs for the win!
 436:000 | DONE ins | na 16 16 | 00618a | a9 60 00    |                 lda.# 60             opcode for RTS
 437:000 | DONE ins | na 16 16 | 00618d | 92 00       |                 sta.di 000200        STA (CP)
 438:000 | DONE ins | na 16 16 | 00618f | e6 00       |                 inc.d 000200         MSB will be overwritten
 439:000 | DONE wsp | na 16 16 |        |             |
 440:000 | DONE cmt | na 16 16 |        |             |                 ; Word definition is complete. Make the new word the last one in
 441:000 | DONE cmt | na 16 16 |        |             |                 ; the Dictionary
 442:000 | DONE ins | na 16 16 | 006191 | a5 1e       |                 lda.d 00021e         
 443:000 | DONE ins | na 16 16 | 006193 | 85 02       |                 sta.d 000202         
 444:000 | DONE wsp | na 16 16 |        |             |
 445:000 | DONE cmt | na 16 16 |        |             |                 ; Get our TOS back
 446:000 | DONE ins | na 16 16 | 006195 | a4 06       |                 ldy.d 000206         
 447:000 | DONE wsp | na 16 16 |        |             |
 448:000 | DONE cmt | na 16 16 |        |             |                 ; Set compile flag back to zero so we're back in interpret mode
 449:000 | DONE ins | na 16 16 | 006197 | 64 14       |                 stz.d 000214         
 450:000 | DONE wsp | na 16 16 |        |             |
 451:000 | DONE lbl | na 16 16 | 006199 |             | z_semicolon                          
 451:001 | DONE ins | na 16 16 | 006199 | 60          |                 rts                  
 452:000 | DONE wsp | na 16 16 |        |             |
 453:000 | DONE wsp | na 16 16 |        |             |
 454:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 455:000 | DONE cmt | na 16 16 |        |             | ; ? "QUESTION" ( addr -- ) X bytes / X cycles
 456:000 | DONE cmt | na 16 16 |        |             | ; Print content of a variable. This is used interactively and so can be pretty
 457:000 | DONE cmt | na 16 16 |        |             | ; slow, so we just go for the subroutine jumps to keep it short
 458:000 | DONE lbl | na 16 16 | 00619a |             | xt_question                          
 459:000 | DONE ins | na 16 16 | 00619a | 20 ab 61    |                 jsr 0061ab           
 460:000 | DONE ins | na 16 16 | 00619d | 20 e7 60    |                 jsr 0060e7           
 461:000 | DONE wsp | na 16 16 |        |             |
 462:000 | DONE lbl | na 16 16 | 0061a0 |             | z_question                           
 462:001 | DONE ins | na 16 16 | 0061a0 | 60          |                 rts                  
 463:000 | DONE wsp | na 16 16 |        |             |
 464:000 | DONE wsp | na 16 16 |        |             |
 465:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 466:000 | DONE cmt | na 16 16 |        |             | ; ! "STORE" ( n addr -- ) 9 bytes / X cycles
 467:000 | DONE cmt | na 16 16 |        |             | ; Save value at designated memory location
 468:000 | DONE lbl | na 16 16 | 0061a1 |             | xt_store                             
 469:000 | DONE ins | na 16 16 | 0061a1 | b5 00       |                 lda.dx 00            NOS has value
 470:000 | DONE ins | na 16 16 | 0061a3 | 99 00 00    |                 sta.y 0000           
 471:000 | DONE ins | na 16 16 | 0061a6 | e8          |                 inx                  
 472:000 | DONE ins | na 16 16 | 0061a7 | e8          |                 inx                  
 473:000 | DONE ins | na 16 16 | 0061a8 | e8          |                 inx                  
 474:000 | DONE ins | na 16 16 | 0061a9 | e8          |                 inx                  
 475:000 | DONE wsp | na 16 16 |        |             |
 476:000 | DONE lbl | na 16 16 | 0061aa |             | z_store                              
 476:001 | DONE ins | na 16 16 | 0061aa | 60          |                 rts                  
 477:000 | DONE wsp | na 16 16 |        |             |
 478:000 | DONE wsp | na 16 16 |        |             |
 479:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 480:000 | DONE cmt | na 16 16 |        |             | ; @ "FETCH" ( addr -- n ) 4 bytes / 7-8 cycles
 481:000 | DONE cmt | na 16 16 |        |             | ; Get one cell (16 bit) value from given address
 482:000 | DONE lbl | na 16 16 | 0061ab |             | xt_fetch                             
 483:000 | DONE ins | na 16 16 | 0061ab | b9 00 00    |                 lda.y 0000           
 484:000 | DONE ins | na 16 16 | 0061ae | a8          |                 tay                  
 485:000 | DONE wsp | na 16 16 |        |             |
 486:000 | DONE lbl | na 16 16 | 0061af |             | z_fetch                              
 486:001 | DONE ins | na 16 16 | 0061af | 60          |                 rts                  
 487:000 | DONE wsp | na 16 16 |        |             |
 488:000 | DONE wsp | na 16 16 |        |             |
 489:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 490:000 | DONE cmt | na 16 16 |        |             | ; ['] "BRACKET-TICK" ( -- ) X bytes / X cycles
 491:000 | DONE cmt | na 16 16 |        |             | ; Store xt of following word during compilation
 492:000 | DONE lbl | na 16 16 | 0061b0 |             | xt_brackettick                       
 493:000 | DONE ins | na 16 16 | 0061b0 | 20 0b 62    |                 jsr 00620b           
 494:000 | DONE ins | na 16 16 | 0061b3 | 4c 19 65    |                 jmp 006519           JSR/RTS
 495:000 | DONE lbl | na 16 16 | 0061b6 |             | z_brackettick                        
 496:000 | DONE wsp | na 16 16 |        |             |
 497:000 | DONE wsp | na 16 16 |        |             |
 498:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 499:000 | DONE cmt | na 16 16 |        |             | ; [ "LEFTBRACKET" ( -- ) X bytes / X cycles
 500:000 | DONE cmt | na 16 16 |        |             | ; Enter the interpretation state. This is an immediate, compile-only word
 501:000 | DONE lbl | na 16 16 | 0061b6 |             | xt_leftbracket                       
 502:000 | DONE ins | na 16 16 | 0061b6 | 64 14       |                 stz.d 000214         
 503:000 | DONE lbl | na 16 16 | 0061b8 |             | z_leftbracket                        
 503:001 | DONE ins | na 16 16 | 0061b8 | 60          |                 rts                  
 504:000 | DONE wsp | na 16 16 |        |             |
 505:000 | DONE wsp | na 16 16 |        |             |
 506:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 507:000 | DONE cmt | na 16 16 |        |             | ; ] "RIGHTBRACKET" ( -- ) X bytes / X cycles
 508:000 | DONE cmt | na 16 16 |        |             | ; Enter the compile state. In theory, we should be able to get away with
 509:000 | DONE cmt | na 16 16 |        |             | ; a simple INC.A, but this is more error tolerant. For obvious reasons, this
 510:000 | DONE cmt | na 16 16 |        |             | ; cannot be COMPILE-ONLY, and native compile doesn't make much sense either
 511:000 | DONE lbl | na 16 16 | 0061b9 |             | xt_rightbracket                      
 512:000 | DONE ins | na 16 16 | 0061b9 | a9 01 00    |                 lda.# 0001           
 513:000 | DONE ins | na 16 16 | 0061bc | 85 14       |                 sta.d 000214         
 514:000 | DONE wsp | na 16 16 |        |             |
 515:000 | DONE lbl | na 16 16 | 0061be |             | z_rightbracket                       
 515:001 | DONE ins | na 16 16 | 0061be | 60          |                 rts                  
 516:000 | DONE wsp | na 16 16 |        |             |
 517:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 518:000 | DONE cmt | na 16 16 |        |             | ; [CHAR] "BRACKET-CHAR" ( -- ) X bytes / X cycles
 519:000 | DONE cmt | na 16 16 |        |             | ; At compile time, compile the ASCII value of a character as a literal
 520:000 | DONE cmt | na 16 16 |        |             | ; This is an immediate, compile-only word
 521:000 | DONE cmt | na 16 16 |        |             | ; TODO decide if this is worth unrolling
 522:000 | DONE lbl | na 16 16 | 0061bf |             | xt_bracketchar                       
 523:000 | DONE ins | na 16 16 | 0061bf | 20 29 63    |                 jsr 006329           
 524:000 | DONE ins | na 16 16 | 0061c2 | 20 19 65    |                 jsr 006519           
 525:000 | DONE wsp | na 16 16 |        |             |
 526:000 | DONE lbl | na 16 16 | 0061c5 |             | z_bracketchar                        
 526:001 | DONE ins | na 16 16 | 0061c5 | 60          |                 rts                  
 527:000 | DONE wsp | na 16 16 |        |             |
 528:000 | DONE wsp | na 16 16 |        |             |
 529:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 530:000 | DONE cmt | na 16 16 |        |             | ; + "PLUS" ( n m -- n+m ) 7 bytes / X cycles
 531:000 | DONE cmt | na 16 16 |        |             | ; Add TOS and NOS
 532:000 | DONE lbl | na 16 16 | 0061c6 |             | xt_plus                              
 533:000 | DONE dir | na 16 16 |        |             |         .!a16                        
 534:000 | DONE ins | na 16 16 | 0061c6 | 98          |                 tya                  
 535:000 | DONE ins | na 16 16 | 0061c7 | 18          |                 clc                  
 536:000 | DONE ins | na 16 16 | 0061c8 | 75 00       |                 adc.dx 00            
 537:000 | DONE ins | na 16 16 | 0061ca | a8          |                 tay                  
 538:000 | DONE ins | na 16 16 | 0061cb | e8          |                 inx                  
 539:000 | DONE ins | na 16 16 | 0061cc | e8          |                 inx                  
 540:000 | DONE wsp | na 16 16 |        |             |
 541:000 | DONE lbl | na 16 16 | 0061cd |             | z_plus                               
 541:001 | DONE ins | na 16 16 | 0061cd | 60          |                 rts                  
 542:000 | DONE wsp | na 16 16 |        |             |
 543:000 | DONE wsp | na 16 16 |        |             |
 544:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 545:000 | DONE cmt | na 16 16 |        |             | ; - "MINUS" ( n m -- n-m ) 10 bytes / X cycles
 546:000 | DONE cmt | na 16 16 |        |             | ; Subtract NOS from TOS
 547:000 | DONE lbl | na 16 16 | 0061ce |             | xt_minus                             
 548:000 | DONE dir | na 16 16 |        |             |         .!a16                        
 549:000 | DONE ins | na 16 16 | 0061ce | 98          |                 tya                  
 550:000 | DONE ins | na 16 16 | 0061cf | 49 ff ff    |                 eor.# 0ffff          
 551:000 | DONE wsp | na 16 16 |        |             |
 552:000 | DONE ins | na 16 16 | 0061d2 | 38          |                 sec                  not CLC
 553:000 | DONE ins | na 16 16 | 0061d3 | 75 00       |                 adc.dx 00            
 554:000 | DONE wsp | na 16 16 |        |             |
 555:000 | DONE ins | na 16 16 | 0061d5 | a8          |                 tay                  
 556:000 | DONE ins | na 16 16 | 0061d6 | e8          |                 inx                  
 557:000 | DONE ins | na 16 16 | 0061d7 | e8          |                 inx                  
 558:000 | DONE wsp | na 16 16 |        |             |
 559:000 | DONE lbl | na 16 16 | 0061d8 |             | z_minus                              
 559:001 | DONE ins | na 16 16 | 0061d8 | 60          |                 rts                  
 560:000 | DONE wsp | na 16 16 |        |             |
 561:000 | DONE wsp | na 16 16 |        |             |
 562:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 563:000 | DONE cmt | na 16 16 |        |             | ; 0 "ZERO" ( -- 0 ) 7 bytes / 12 cycles
 564:000 | DONE cmt | na 16 16 |        |             | ; Pushes the number 0000 on the Data Stack
 565:000 | DONE lbl | na 16 16 | 0061d9 |             | xt_zero                              
 566:000 | DONE dir | na 16 16 |        |             |         .!xy16                       
 567:000 | DONE ins | na 16 16 | 0061d9 | ca          |                 dex                  
 568:000 | DONE ins | na 16 16 | 0061da | ca          |                 dex                  
 569:000 | DONE ins | na 16 16 | 0061db | 94 00       |                 sty.dx 00            
 570:000 | DONE ins | na 16 16 | 0061dd | a0 00 00    |                 ldy.# 0000           
 571:000 | DONE wsp | na 16 16 |        |             |
 572:000 | DONE lbl | na 16 16 | 0061e0 |             | z_zero                               
 572:001 | DONE ins | na 16 16 | 0061e0 | 60          |                 rts                  
 573:000 | DONE wsp | na 16 16 |        |             |
 574:000 | DONE wsp | na 16 16 |        |             |
 575:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 576:000 | DONE cmt | na 16 16 |        |             | ; 1 "ONE" ( -- 1 ) 7 bytes / 12 cycles
 577:000 | DONE cmt | na 16 16 |        |             | ; Pushes the number 1 on the Data Stack
 578:000 | DONE lbl | na 16 16 | 0061e1 |             | xt_one                               
 579:000 | DONE dir | na 16 16 |        |             |         .!xy16                       
 580:000 | DONE ins | na 16 16 | 0061e1 | ca          |                 dex                  
 581:000 | DONE ins | na 16 16 | 0061e2 | ca          |                 dex                  
 582:000 | DONE ins | na 16 16 | 0061e3 | 94 00       |                 sty.dx 00            
 583:000 | DONE ins | na 16 16 | 0061e5 | a0 01 00    |                 ldy.# 0001           
 584:000 | DONE wsp | na 16 16 |        |             |
 585:000 | DONE lbl | na 16 16 | 0061e8 |             | z_one                                
 585:001 | DONE ins | na 16 16 | 0061e8 | 60          |                 rts                  
 586:000 | DONE wsp | na 16 16 |        |             |
 587:000 | DONE wsp | na 16 16 |        |             |
 588:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 589:000 | DONE cmt | na 16 16 |        |             | ; 1- "ONE-MINUS" ( n -- n-1 ) 1 byte / 2 cycles
 590:000 | DONE cmt | na 16 16 |        |             | ; Subtract 1 from Top of Stack (TOS). Because there is no checking if there is
 591:000 | DONE cmt | na 16 16 |        |             | ; actually anything on the Data Stack, this routine will fail silently if the
 592:000 | DONE cmt | na 16 16 |        |             | ; stack is empty
 593:000 | DONE lbl | na 16 16 | 0061e9 |             | xt_one-minus                         
 594:000 | DONE dir | na 16 16 |        |             |         .!xy16                       
 595:000 | DONE ins | na 16 16 | 0061e9 | 88          |                 dey                  
 596:000 | DONE lbl | na 16 16 | 0061ea |             | z_one-minus                          
 596:001 | DONE ins | na 16 16 | 0061ea | 60          |                 rts                  
 597:000 | DONE wsp | na 16 16 |        |             |
 598:000 | DONE wsp | na 16 16 |        |             |
 599:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 600:000 | DONE cmt | na 16 16 |        |             | ; 1+ "ONE-PLUS" ( n -- n+1 ) 1 byte / 2 cycles
 601:000 | DONE cmt | na 16 16 |        |             | ; Add 1 to TOS. Because there is no checking if there is actually anything on
 602:000 | DONE cmt | na 16 16 |        |             | ; the Data Stack, this routine will fail silently if the stack is empty
 603:000 | DONE lbl | na 16 16 | 0061eb |             | xt_one-plus                          
 604:000 | DONE dir | na 16 16 |        |             |         .!xy16                       
 605:000 | DONE ins | na 16 16 | 0061eb | c8          |                 iny                  
 606:000 | DONE lbl | na 16 16 | 0061ec |             | z_one-plus                           
 606:001 | DONE ins | na 16 16 | 0061ec | 60          |                 rts                  
 607:000 | DONE wsp | na 16 16 |        |             |
 608:000 | DONE wsp | na 16 16 |        |             |
 609:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 610:000 | DONE cmt | na 16 16 |        |             | ; 2 "TWO" ( -- 2 ) 7 bytes / 12 cycles
 611:000 | DONE cmt | na 16 16 |        |             | ; Pushes the number 2 on the Data Stack
 612:000 | DONE lbl | na 16 16 | 0061ed |             | xt_two                               
 613:000 | DONE dir | na 16 16 |        |             |         .!xy16                       
 614:000 | DONE ins | na 16 16 | 0061ed | ca          |                 dex                  
 615:000 | DONE ins | na 16 16 | 0061ee | ca          |                 dex                  
 616:000 | DONE ins | na 16 16 | 0061ef | 94 00       |                 sty.dx 00            
 617:000 | DONE ins | na 16 16 | 0061f1 | a0 02 00    |                 ldy.# 0002           
 618:000 | DONE wsp | na 16 16 |        |             |
 619:000 | DONE lbl | na 16 16 | 0061f4 |             | z_two                                
 619:001 | DONE ins | na 16 16 | 0061f4 | 60          |                 rts                  
 620:000 | DONE wsp | na 16 16 |        |             |
 621:000 | DONE wsp | na 16 16 |        |             |
 622:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 623:000 | DONE cmt | na 16 16 |        |             | ; 2* "TWO-STAR" ( n -- 2*n ) 3 bytes / 6 cycles
 624:000 | DONE cmt | na 16 16 |        |             | ; Multiply Top of Stack (TOS) by 2. This is also used by CELLS
 625:000 | DONE lbl | na 16 16 | 0061f5 |             | xt_two-star                          
 626:000 | DONE dir | na 16 16 |        |             |         .!a16                        
 627:000 | DONE dir | na 16 16 |        |             |         .!xy16                       
 628:000 | DONE ins | na 16 16 | 0061f5 | 98          |                 tya                  
 629:000 | DONE ins | na 16 16 | 0061f6 | 0a          |                 asl.a                
 630:000 | DONE ins | na 16 16 | 0061f7 | a8          |                 tay                  
 631:000 | DONE wsp | na 16 16 |        |             |
 632:000 | DONE lbl | na 16 16 | 0061f8 |             | z_two-star                           
 632:001 | DONE ins | na 16 16 | 0061f8 | 60          |                 rts                  
 633:000 | DONE wsp | na 16 16 |        |             |
 634:000 | DONE wsp | na 16 16 |        |             |
 635:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 636:000 | DONE cmt | na 16 16 |        |             | ; 2DROP ( n m -- ) 6 bytes / 13 cycles
 637:000 | DONE cmt | na 16 16 |        |             | ; Drop first two entries of Data Stack
 638:000 | DONE lbl | na 16 16 | 0061f9 |             | xt_2drop                             
 639:000 | DONE ins | na 16 16 | 0061f9 | b4 02       |                 ldy.dx 02            
 640:000 | DONE ins | na 16 16 | 0061fb | e8          |                 inx                  
 641:000 | DONE ins | na 16 16 | 0061fc | e8          |                 inx                  
 642:000 | DONE ins | na 16 16 | 0061fd | e8          |                 inx                  
 643:000 | DONE ins | na 16 16 | 0061fe | e8          |                 inx                  
 644:000 | DONE wsp | na 16 16 |        |             |
 645:000 | DONE lbl | na 16 16 | 0061ff |             | z_2drop                              
 645:001 | DONE ins | na 16 16 | 0061ff | 60          |                 rts                  
 646:000 | DONE wsp | na 16 16 |        |             |
 647:000 | DONE wsp | na 16 16 |        |             |
 648:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 649:000 | DONE cmt | na 16 16 |        |             | ; 2DUP ( n m -- n m n m ) 10 bytes / 23 cycles
 650:000 | DONE cmt | na 16 16 |        |             | ; Duplicated the top two data stack entries
 651:000 | DONE wsp | na 16 16 |        |             |
 652:000 | DONE lbl | na 16 16 | 006200 |             | xt_2dup                              
 653:000 | DONE dir | na 16 16 |        |             |         .!xy16                       
 654:000 | DONE ins | na 16 16 | 006200 | ca          |                 dex                  
 655:000 | DONE ins | na 16 16 | 006201 | ca          |                 dex                  
 656:000 | DONE ins | na 16 16 | 006202 | ca          |                 dex                  
 657:000 | DONE ins | na 16 16 | 006203 | ca          |                 dex                  
 658:000 | DONE ins | na 16 16 | 006204 | 94 02       |                 sty.dx 02            
 659:000 | DONE ins | na 16 16 | 006206 | b5 04       |                 lda.dx 04            
 660:000 | DONE ins | na 16 16 | 006208 | 95 00       |                 sta.dx 00            
 661:000 | DONE wsp | na 16 16 |        |             |
 662:000 | DONE lbl | na 16 16 | 00620a |             | z_2dup                               
 662:001 | DONE ins | na 16 16 | 00620a | 60          |                 rts                  
 663:000 | DONE wsp | na 16 16 |        |             |
 664:000 | DONE wsp | na 16 16 |        |             |
 665:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 666:000 | DONE cmt | na 16 16 |        |             | ; ' "TICK" ( "string" -- xt ) X bytes / X cycles
 667:000 | DONE cmt | na 16 16 |        |             | ; Given a string with the name of a word, return the word's execution token (xt)
 668:000 | DONE cmt | na 16 16 |        |             | ; Abort if not found
 669:000 | DONE lbl | na 16 16 | 00620b |             | xt_tick                              
 670:000 | DONE ins | na 16 16 | 00620b | 20 a9 65    |                 jsr 0065a9           ( -- addr u )
 671:000 | DONE wsp | na 16 16 |        |             |
 672:000 | DONE cmt | na 16 16 |        |             | 		; if we got a zero, complain and abort
 673:000 | DONE ins | na 16 16 | 00620e | 98          |                 tya                  force flag check
 674:000 | DONE ins | na 16 16 | 00620f | d0 06       |                 bne 006217           
 675:000 | DONE wsp | na 16 16 |        |             |
 676:000 | DONE ins | na 16 16 | 006211 | a9 8d 6e    |                 lda.# 006e8d         
 677:000 | DONE ins | na 16 16 | 006214 | 4c 91 6c    |                 jmp 006c91           
 678:000 | DONE wsp | na 16 16 |        |             |
 679:000 | DONE lbl | na 16 16 | 006217 |             | tick_have_word                       
 680:000 | DONE ins | na 16 16 | 006217 | 20 a6 64    |                 jsr 0064a6           ( addr u -- nt)
 681:000 | DONE ins | na 16 16 | 00621a | 98          |                 tya                  force flag check
 682:000 | DONE wsp | na 16 16 |        |             |
 683:000 | DONE cmt | na 16 16 |        |             |                 ; if we didn't find string in the dictionary, complain and abort
 684:000 | DONE ins | na 16 16 | 00621b | d0 06       |                 bne 006223           
 685:000 | DONE wsp | na 16 16 |        |             |
 686:000 | DONE ins | na 16 16 | 00621d | a9 2a 6f    |                 lda.# 006f2a         
 687:000 | DONE ins | na 16 16 | 006220 | 4c 91 6c    |                 jmp 006c91           
 688:000 | DONE wsp | na 16 16 |        |             |
 689:000 | DONE lbl | na 16 16 | 006223 |             | tick_have_nt                         
 690:000 | DONE ins | na 16 16 | 006223 | 20 5e 65    |                 jsr 00655e           ( nt -- xt )
 691:000 | DONE wsp | na 16 16 |        |             |
 692:000 | DONE lbl | na 16 16 | 006226 |             | z_tick                               
 692:001 | DONE ins | na 16 16 | 006226 | 60          |                 rts                  
 693:000 | DONE wsp | na 16 16 |        |             |
 694:000 | DONE wsp | na 16 16 |        |             |
 695:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 696:000 | DONE cmt | na 16 16 |        |             | ; ABS ( n -- u ) 8 bytes / X cycles
 697:000 | DONE cmt | na 16 16 |        |             | ; Return the absolute value of a single number
 698:000 | DONE lbl | na 16 16 | 006227 |             | xt_abs                               
 699:000 | DONE dir | na 16 16 |        |             |         .!a16                        
 700:000 | DONE dir | na 16 16 |        |             |         .!xy16                       
 701:000 | DONE ins | na 16 16 | 006227 | 98          |                 tya                  force flag test
 702:000 | DONE ins | na 16 16 | 006228 | 10 05       |                 bpl 00622f           positive number is easy
 703:000 | DONE wsp | na 16 16 |        |             |
 704:000 | DONE cmt | na 16 16 |        |             |                 ; negative: Calculate 0-n
 705:000 | DONE ins | na 16 16 | 00622a | 49 ff ff    |                 eor.# 0ffff          
 706:000 | DONE ins | na 16 16 | 00622d | 1a          |                 inc.a                
 707:000 | DONE ins | na 16 16 | 00622e | a8          |                 tay                  
 708:000 | DONE wsp | na 16 16 |        |             |
 709:000 | DONE lbl | na 16 16 | 00622f |             | z_abs                                
 709:001 | DONE ins | na 16 16 | 00622f | 60          |                 rts                  
 710:000 | DONE wsp | na 16 16 |        |             |
 711:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 712:000 | DONE cmt | na 16 16 |        |             | ; ACCEPT ( addr n1 -- n2 ) X bytes / X cycles
 713:000 | DONE cmt | na 16 16 |        |             | ; Receive a string of at most n1 characters, placing them at addr. Return the
 714:000 | DONE cmt | na 16 16 |        |             | ; actual number of characters as n2. Characters are echoed as they are received.
 715:000 | DONE cmt | na 16 16 |        |             | ; ACCEPT is called by REFILL these days.
 716:000 | DONE lbl | na 16 16 | 006230 |             | xt_accept                            
 717:000 | DONE cmt | na 16 16 |        |             |                 ; Set up loop
 718:000 | DONE ins | na 16 16 | 006230 | 98          |                 tya                  force flag test
 719:000 | DONE ins | na 16 16 | 006231 | d0 03       |                 bne 006236           
 720:000 | DONE wsp | na 16 16 |        |             |
 721:000 | DONE cmt | na 16 16 |        |             |                 ; if we were told to get zero chars, just quit
 722:000 | DONE ins | na 16 16 | 006233 | e8          |                 inx                  NIP, TOS is zero which is also FALSE
 723:000 | DONE ins | na 16 16 | 006234 | e8          |                 inx                  
 724:000 | DONE wsp | na 16 16 |        |             |
 725:000 | DONE ins | na 16 16 | 006235 | 60          |                 rts                  
 726:000 | DONE wsp | na 16 16 |        |             |
 727:000 | DONE lbl | na 16 16 | 006236 |             | accept_nonzero                       
 728:000 | DONE ins | na 16 16 | 006236 | b5 00       |                 lda.dx 00            address of buffer is NOS
 729:000 | DONE ins | na 16 16 | 006238 | 85 16       |                 sta.d 000216         
 730:000 | DONE ins | na 16 16 | 00623a | e8          |                 inx                  NIP
 731:000 | DONE ins | na 16 16 | 00623b | e8          |                 inx                  
 732:000 | DONE wsp | na 16 16 |        |             |
 733:000 | DONE ins | na 16 16 | 00623c | 84 18       |                 sty.d 000218         Save max number of chars in tmp2
 734:000 | DONE ins | na 16 16 | 00623e | a0 00 00    |                 ldy.# 0000           Use Y as counter
 735:000 | DONE ins | na 16 16 | 006241 | e2 20       |                 sep 20               
 735:001 | DONE ctl | na  8 16 |        |             |         .!a8
 736:000 | DONE wsp | na  8 16 |        |             |
 737:000 | DONE lbl | na  8 16 | 006243 |             | accept_loop                          
 738:000 | DONE cmt | na  8 16 |        |             |                 ; TODO rewrite with KEY so we can revector it
 739:000 | DONE cmt | na  8 16 |        |             |                 ; We don't need to check for CTRL-l, because a vt100 terminal
 740:000 | DONE cmt | na  8 16 |        |             |                 ; clears the screen automatically
 741:000 | DONE ins | na  8 16 | 006243 | 20 47 60    |                 jsr 006047           
 742:000 | DONE dir | na  8 16 |        |             |         .!a8                         
 743:000 | DONE cmt | na  8 16 |        |             |                 ; we quit on both line feed and carriage return
 744:000 | DONE ins | na  8 16 | 006246 | c9 0a       |                 cmp.# AscLF          
 745:000 | DONE ins | na  8 16 | 006248 | f0 44       |                 beq 00628e           
 746:000 | DONE ins | na  8 16 | 00624a | c9 0d       |                 cmp.# AscCR          
 747:000 | DONE ins | na  8 16 | 00624c | f0 40       |                 beq 00628e           
 748:000 | DONE wsp | na  8 16 |        |             |
 749:000 | DONE cmt | na  8 16 |        |             |                 ; BS and DEL do the same thing for the moment
 750:000 | DONE ins | na  8 16 | 00624e | c9 08       |                 cmp.# AscBS          
 751:000 | DONE ins | na  8 16 | 006250 | f0 44       |                 beq 006296           
 752:000 | DONE ins | na  8 16 | 006252 | c9 7f       |                 cmp.# AscDEL         
 753:000 | DONE ins | na  8 16 | 006254 | f0 40       |                 beq 006296           
 754:000 | DONE wsp | na  8 16 |        |             |
 755:000 | DONE cmt | na  8 16 |        |             |                 ; CTRL-c and ESC abort (see if this is too harsh)
 756:000 | DONE ins | na  8 16 | 006256 | c9 03       |                 cmp.# AscCC          
 757:000 | DONE ins | na  8 16 | 006258 | d0 03       |                 bne 00625d           
 758:000 | DONE ins | na  8 16 | 00625a | 4c 97 60    |                 jmp 006097           
 759:000 | DONE lbl | na  8 16 | 00625d |             | @                                    
 760:000 | DONE ins | na  8 16 | 00625d | c9 1b       |                 cmp.# AscESC         
 761:000 | DONE ins | na  8 16 | 00625f | d0 03       |                 bne 006264           
 762:000 | DONE ins | na  8 16 | 006261 | 4c 97 60    |                 jmp 006097           
 763:000 | DONE lbl | na  8 16 | 006264 |             | @                                    
 764:000 | DONE cmt | na  8 16 |        |             |                 ; CTRL-p will be used for "previous cmd", TODO
 765:000 | DONE ins | na  8 16 | 006264 | c9 10       |                 cmp.# AscCP          
 766:000 | DONE ins | na  8 16 | 006266 | d0 0c       |                 bne 006274           
 767:000 | DONE ins | na  8 16 | 006268 | c2 20       |                 rep 20               
 767:001 | DONE ctl | na 16 16 |        |             |         .!a16
 768:000 | DONE ins | na 16 16 | 00626a | a9 43 6f    |                 lda.# 006f43         
 769:000 | DONE ins | na 16 16 | 00626d | 20 97 6c    |                 jsr 006c97           
 770:000 | DONE ins | na 16 16 | 006270 | e2 20       |                 sep 20               
 770:001 | DONE ctl | na  8 16 |        |             |         .!a8
 771:000 | DONE ins | na  8 16 | 006272 | 80 cf       |                 bra 006243           
 772:000 | DONE lbl | na  8 16 | 006274 |             | @                                    
 773:000 | DONE cmt | na  8 16 |        |             |                 ; CTRL-n will be used for "next cmd", TODO
 774:000 | DONE ins | na  8 16 | 006274 | c9 0e       |                 cmp.# AscCN          
 775:000 | DONE ins | na  8 16 | 006276 | d0 0c       |                 bne 006284           
 776:000 | DONE ins | na  8 16 | 006278 | c2 20       |                 rep 20               
 776:001 | DONE ctl | na 16 16 |        |             |         .!a16
 777:000 | DONE ins | na 16 16 | 00627a | a9 56 6f    |                 lda.# 006f56         
 778:000 | DONE ins | na 16 16 | 00627d | 20 97 6c    |                 jsr 006c97           
 779:000 | DONE ins | na 16 16 | 006280 | e2 20       |                 sep 20               
 779:001 | DONE ctl | na  8 16 |        |             |         .!a8
 780:000 | DONE ins | na  8 16 | 006282 | 80 bf       |                 bra 006243           
 781:000 | DONE wsp | na  8 16 |        |             |
 782:000 | DONE lbl | na  8 16 | 006284 |             | @                                    
 783:000 | DONE cmt | na  8 16 |        |             |                 ; That's quite enough, echo character
 784:000 | DONE cmt | na  8 16 |        |             |                 ; TODO change to EMIT
 785:000 | DONE ins | na  8 16 | 006284 | 20 36 60    |                 jsr 006036           echo character
 786:000 | DONE dir | na  8 16 |        |             |         .!a8                         
 787:000 | DONE cmt | na  8 16 |        |             |                 ; TODO multitasking: Add PAUSE here (or in EMIT)
 788:000 | DONE wsp | na  8 16 |        |             |
 789:000 | DONE ins | na  8 16 | 006287 | 91 0c       |                 sta.diy 00020c       STA (CIB),Y
 790:000 | DONE ins | na  8 16 | 006289 | c8          |                 iny                  
 791:000 | DONE ins | na  8 16 | 00628a | c4 18       |                 cpy.d 000218         reached character limit?
 792:000 | DONE ins | na  8 16 | 00628c | d0 b5       |                 bne 006243           fall thru if buffer limit reached
 793:000 | DONE wsp | na  8 16 |        |             |
 794:000 | DONE lbl | na  8 16 | 00628e |             | accept_eol                           
 795:000 | DONE ins | na  8 16 | 00628e | 84 0e       |                 sty.d 00020e         Y contains number of chars accepted already
 796:000 | DONE ins | na  8 16 | 006290 | c2 20       |                 rep 20               
 796:001 | DONE ctl | na 16 16 |        |             |         .!a16
 797:000 | DONE ins | na 16 16 | 006292 | 20 06 67    |                 jsr 006706           print final space
 798:000 | DONE ins | na 16 16 | 006295 | 60          |                 rts                  this is the actual return of the routine
 799:000 | DONE wsp | na 16 16 |        |             |
 800:000 | DONE lbl | na 16 16 | 006296 |             | accept_bs                            
 801:000 | DONE dir | na  8 16 |        |             |         .!a8                         
 802:000 | DONE ins | na  8 16 | 006296 | c0 00 00    |                 cpy.# 0000           buffer empty?
 803:000 | DONE ins | na  8 16 | 006299 | d0 06       |                 bne 0062a1           
 804:000 | DONE wsp | na  8 16 |        |             |
 805:000 | DONE ins | na  8 16 | 00629b | a9 07       |                 lda.# AscBELL        complain and don't delete beyond the start of line
 806:000 | DONE ins | na  8 16 | 00629d | 20 36 60    |                 jsr 006036           
 807:000 | DONE ins | na  8 16 | 0062a0 | c8          |                 iny                  
 808:000 | DONE lbl | na  8 16 | 0062a1 |             | @                                    
 809:000 | DONE ins | na  8 16 | 0062a1 | 88          |                 dey                  
 810:000 | DONE ins | na  8 16 | 0062a2 | a9 08       |                 lda.# AscBS          move back one
 811:000 | DONE ins | na  8 16 | 0062a4 | 20 36 60    |                 jsr 006036           
 812:000 | DONE ins | na  8 16 | 0062a7 | a9 20       |                 lda.# AscSP          print a space (rubout)
 813:000 | DONE ins | na  8 16 | 0062a9 | 20 36 60    |                 jsr 006036           
 814:000 | DONE ins | na  8 16 | 0062ac | a9 08       |                 lda.# AscBS          move back over space
 815:000 | DONE ins | na  8 16 | 0062ae | 20 36 60    |                 jsr 006036           
 816:000 | DONE wsp | na  8 16 |        |             |
 817:000 | DONE ins | na  8 16 | 0062b1 | 80 90       |                 bra 006243           
 818:000 | DONE wsp | na  8 16 |        |             |
 819:000 | DONE lbl | na  8 16 | 0062b3 |             | z_accept                             
 819:001 | DONE ins | na  8 16 | 0062b3 | 60          |                 rts                  
 820:000 | DONE wsp | na  8 16 |        |             |
 821:000 | DONE cmt | na  8 16 |        |             | ; -------------------------------------------------------------------
 822:000 | DONE cmt | na  8 16 |        |             | ; ALLOT ( n -- ) X bytes / X cycles
 823:000 | DONE cmt | na  8 16 |        |             | ; Reserve a certain number of bytes (not cells) or release them. If n = 0, do
 824:000 | DONE cmt | na  8 16 |        |             | ; nothing. If n is negative, release n bytes, but only to the beginning of the
 825:000 | DONE cmt | na  8 16 |        |             | ; Dictionary. If n is positive (the most common case), reserve n bytes, but not
 826:000 | DONE cmt | na  8 16 |        |             | ; past the Dictionary.
 827:000 | DONE cmt | na  8 16 |        |             | ; See http://forth-standard.org/standard/core/ALLOT
 828:000 | DONE cmt | na  8 16 |        |             | ; TODO test negative values
 829:000 | DONE lbl | na  8 16 | 0062b4 |             | xt_allot                             
 830:000 | DONE dir | na 16 16 |        |             |         .!a16                        
 831:000 | DONE ins | na 16 16 | 0062b4 | 98          |                 tya                  force flag check
 832:000 | DONE ins | na 16 16 | 0062b5 | f0 21       |                 beq 0062d8           zero bytes, don't do anything
 833:000 | DONE ins | na 16 16 | 0062b7 | 30 12       |                 bmi 0062cb           free memory instead of reserving it
 834:000 | DONE wsp | na 16 16 |        |             |
 835:000 | DONE cmt | na 16 16 |        |             |                 ; most common case: reserve n bytes. We've already transfered
 836:000 | DONE cmt | na 16 16 |        |             |                 ; TOS to A, so we just have to add the current compile pointer
 837:000 | DONE ins | na 16 16 | 0062b9 | 18          |                 clc                  
 838:000 | DONE ins | na 16 16 | 0062ba | 65 00       |                 adc.d 000200         create new CP
 839:000 | DONE ins | na 16 16 | 0062bc | b0 07       |                 bcs 0062c5           oops, we've wrapped
 840:000 | DONE wsp | na 16 16 |        |             |
 841:000 | DONE ins | na 16 16 | 0062be | a8          |                 tay                  save copy of new CP
 842:000 | DONE wsp | na 16 16 |        |             |
 843:000 | DONE ins | na 16 16 | 0062bf | 38          |                 sec                  
 844:000 | DONE ins | na 16 16 | 0062c0 | e9 ff 7b    |                 sbc.# 007bff         
 845:000 | DONE ins | na 16 16 | 0062c3 | 30 11       |                 bmi 0062d6           oops, fall thru if beyond max RAM
 846:000 | DONE wsp | na 16 16 |        |             |
 847:000 | DONE lbl | na 16 16 | 0062c5 |             | allot_error                          
 848:000 | DONE ins | na 16 16 | 0062c5 | a9 ee 6d    |                 lda.# 006dee         
 849:000 | DONE ins | na 16 16 | 0062c8 | 4c 91 6c    |                 jmp 006c91           
 850:000 | DONE wsp | na 16 16 |        |             |
 851:000 | DONE lbl | na 16 16 | 0062cb |             | allot_minus                          
 852:000 | DONE cmt | na 16 16 |        |             |                 ; negative value means we're freeing memory
 853:000 | DONE ins | na 16 16 | 0062cb | 38          |                 sec                  
 854:000 | DONE ins | na 16 16 | 0062cc | e5 00       |                 sbc.d 000200         
 855:000 | DONE ins | na 16 16 | 0062ce | 90 f5       |                 bcc 0062c5           oops, we've wrapped
 856:000 | DONE wsp | na 16 16 |        |             |
 857:000 | DONE ins | na 16 16 | 0062d0 | a8          |                 tay                  
 858:000 | DONE wsp | na 16 16 |        |             |
 859:000 | DONE ins | na 16 16 | 0062d1 | e9 00 03    |                 sbc.# 000300         Carry Flag must still be set
 860:000 | DONE ins | na 16 16 | 0062d4 | 30 ef       |                 bmi 0062c5           oops, gone too far back
 861:000 | DONE wsp | na 16 16 |        |             |
 862:000 | DONE cmt | na 16 16 |        |             |                 ; fall through to allot_done
 863:000 | DONE lbl | na 16 16 | 0062d6 |             | allot_done                           
 864:000 | DONE ins | na 16 16 | 0062d6 | 84 00       |                 sty.d 000200         new compiler pointer
 865:000 | DONE lbl | na 16 16 | 0062d8 |             | allot_real_gone                      
 866:000 | DONE ins | na 16 16 | 0062d8 | b4 00       |                 ldy.dx 00            DROP
 867:000 | DONE ins | na 16 16 | 0062da | e8          |                 inx                  
 868:000 | DONE ins | na 16 16 | 0062db | e8          |                 inx                  
 869:000 | DONE wsp | na 16 16 |        |             |
 870:000 | DONE lbl | na 16 16 | 0062dc |             | z_allot                              
 870:001 | DONE ins | na 16 16 | 0062dc | 60          |                 rts                  
 871:000 | DONE wsp | na 16 16 |        |             |
 872:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 873:000 | DONE cmt | na 16 16 |        |             | ; AND ( n m -- n ) 6 bytes / X cycles
 874:000 | DONE cmt | na 16 16 |        |             | ; Logical AND
 875:000 | DONE lbl | na 16 16 | 0062dd |             | xt_and                               
 876:000 | DONE ins | na 16 16 | 0062dd | 98          |                 tya                  
 877:000 | DONE ins | na 16 16 | 0062de | 35 00       |                 and.dx 00            
 878:000 | DONE ins | na 16 16 | 0062e0 | a8          |                 tay                  
 879:000 | DONE wsp | na 16 16 |        |             |
 880:000 | DONE ins | na 16 16 | 0062e1 | e8          |                 inx                  NIP
 881:000 | DONE ins | na 16 16 | 0062e2 | e8          |                 inx                  
 882:000 | DONE wsp | na 16 16 |        |             |
 883:000 | DONE lbl | na 16 16 | 0062e3 |             | z_and                                
 883:001 | DONE ins | na 16 16 | 0062e3 | 60          |                 rts                  
 884:000 | DONE wsp | na 16 16 |        |             |
 885:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 886:000 | DONE cmt | na 16 16 |        |             | ; BASE ( -- addr ) X bytes / X cycles
 887:000 | DONE cmt | na 16 16 |        |             | ; Get the address of where the radix for number conversion is stored
 888:000 | DONE lbl | na 16 16 | 0062e4 |             | xt_base                              
 889:000 | DONE ins | na 16 16 | 0062e4 | ca          |                 dex                  
 890:000 | DONE ins | na 16 16 | 0062e5 | ca          |                 dex                  
 891:000 | DONE ins | na 16 16 | 0062e6 | 94 00       |                 sty.dx 00            
 892:000 | DONE wsp | na 16 16 |        |             |
 893:000 | DONE ins | na 16 16 | 0062e8 | a0 1c 02    |                 ldy.# 00021c         
 894:000 | DONE wsp | na 16 16 |        |             |
 895:000 | DONE lbl | na 16 16 | 0062eb |             | z_base                               
 895:001 | DONE ins | na 16 16 | 0062eb | 60          |                 rts                  
 896:000 | DONE wsp | na 16 16 |        |             |
 897:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 898:000 | DONE cmt | na 16 16 |        |             | ; BELL ( -- ) X bytes / X cycles
 899:000 | DONE cmt | na 16 16 |        |             | ; Trigger terminal bell on vt100 terminals
 900:000 | DONE cmt | na 16 16 |        |             | ; TODO replace with EMIT
 901:000 | DONE lbl | na 16 16 | 0062ec |             | xt_bell                              
 902:000 | DONE dir | na 16 16 |        |             |         .!a16                        
 903:000 | DONE ins | na 16 16 | 0062ec | a9 07 00    |                 lda.# AscBELL        
 904:000 | DONE ins | na 16 16 | 0062ef | 20 36 60    |                 jsr 006036           
 905:000 | DONE wsp | na 16 16 |        |             |
 906:000 | DONE lbl | na 16 16 | 0062f2 |             | z_bell                               
 906:001 | DONE ins | na 16 16 | 0062f2 | 60          |                 rts                  
 907:000 | DONE wsp | na 16 16 |        |             |
 908:000 | DONE wsp | na 16 16 |        |             |
 909:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 910:000 | DONE cmt | na 16 16 |        |             | ; BL ( -- u ) 7 bytes / 12 cycles
 911:000 | DONE cmt | na 16 16 |        |             | ; Put ASCII char for SPACE on Data Stack
 912:000 | DONE lbl | na 16 16 | 0062f3 |             | xt_bl                                
 913:000 | DONE dir | na 16 16 |        |             |         .!xy16                       
 914:000 | DONE ins | na 16 16 | 0062f3 | ca          |                 dex                  
 915:000 | DONE ins | na 16 16 | 0062f4 | ca          |                 dex                  
 916:000 | DONE ins | na 16 16 | 0062f5 | 94 00       |                 sty.dx 00            
 917:000 | DONE ins | na 16 16 | 0062f7 | a0 20 00    |                 ldy.# AscSP          
 918:000 | DONE wsp | na 16 16 |        |             |
 919:000 | DONE lbl | na 16 16 | 0062fa |             | z_bl                                 
 919:001 | DONE ins | na 16 16 | 0062fa | 60          |                 rts                  
 920:000 | DONE wsp | na 16 16 |        |             |
 921:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 922:000 | DONE cmt | na 16 16 |        |             | ; BYE ( -- ) 2 bytes / 7-8 cycles
 923:000 | DONE cmt | na 16 16 |        |             | ; Leave Liara Forth, returning to Mensch Monitor
 924:000 | DONE cmt | na 16 16 |        |             | ; TODO make sure this actually calls the MM
 925:000 | DONE lbl | na 16 16 | 0062fb |             | xt_bye                               
 926:000 | DONE ins | na 16 16 | 0062fb | 58          |                 cli                  
 927:000 | DONE ins | na 16 16 | 0062fc | 00 00       |                 brk 00               status byte 00 required for assembler
 928:000 | DONE wsp | na 16 16 |        |             |
 929:000 | DONE lbl | na 16 16 | 0062fe |             | z_bye                                
 929:001 | DONE ins | na 16 16 | 0062fe | 60          |                 rts                  dummy for compiling, never reached
 930:000 | DONE wsp | na 16 16 |        |             |
 931:000 | DONE wsp | na 16 16 |        |             |
 932:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 933:000 | DONE cmt | na 16 16 |        |             | ; C, "C-COMMA" ( char -- ) 13 bytes / 28 cycles
 934:000 | DONE cmt | na 16 16 |        |             | ; Store one character in the Dictionary
 935:000 | DONE lbl | na 16 16 | 0062ff |             | xt_c-comma                           
 936:000 | DONE ins | na 16 16 | 0062ff | 98          |                 tya                  
 937:000 | DONE ins | na 16 16 | 006300 | e2 20       |                 sep 20               
 937:001 | DONE ctl | na  8 16 |        |             |         .!a8
 938:000 | DONE ins | na  8 16 | 006302 | 92 00       |                 sta.di 000200        STA (CP)
 939:000 | DONE ins | na  8 16 | 006304 | c2 20       |                 rep 20               
 939:001 | DONE ctl | na 16 16 |        |             |         .!a16
 940:000 | DONE ins | na 16 16 | 006306 | e6 00       |                 inc.d 000200         quick version of 1 ALLOT
 941:000 | DONE wsp | na 16 16 |        |             |
 942:000 | DONE ins | na 16 16 | 006308 | b4 00       |                 ldy.dx 00            
 943:000 | DONE ins | na 16 16 | 00630a | e8          |                 inx                  
 944:000 | DONE ins | na 16 16 | 00630b | e8          |                 inx                  
 945:000 | DONE wsp | na 16 16 |        |             |
 946:000 | DONE lbl | na 16 16 | 00630c |             | z_c-comma                            
 946:001 | DONE ins | na 16 16 | 00630c | 60          |                 rts                  
 947:000 | DONE wsp | na 16 16 |        |             |
 948:000 | DONE wsp | na 16 16 |        |             |
 949:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 950:000 | DONE cmt | na 16 16 |        |             | ; C@ "C-FETCH" ( addr -- n ) 11 bytes / 16 cycles
 951:000 | DONE cmt | na 16 16 |        |             | ; Get a single byte from the given address
 952:000 | DONE lbl | na 16 16 | 00630d |             | xt_c-fetch                           
 953:000 | DONE ins | na 16 16 | 00630d | e2 20       |                 sep 20               
 953:001 | DONE ctl | na  8 16 |        |             |         .!a8
 954:000 | DONE ins | na  8 16 | 00630f | b9 00 00    |                 lda.y 0000           
 955:000 | DONE ins | na  8 16 | 006312 | c2 20       |                 rep 20               
 955:001 | DONE ctl | na 16 16 |        |             |         .!a16
 956:000 | DONE ins | na 16 16 | 006314 | 29 ff 00    |                 and.# 00ff           
 957:000 | DONE ins | na 16 16 | 006317 | a8          |                 tay                  
 958:000 | DONE wsp | na 16 16 |        |             |
 959:000 | DONE lbl | na 16 16 | 006318 |             | z_c-fetch                            
 959:001 | DONE ins | na 16 16 | 006318 | 60          |                 rts                  
 960:000 | DONE wsp | na 16 16 |        |             |
 961:000 | DONE wsp | na 16 16 |        |             |
 962:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 963:000 | DONE cmt | na 16 16 |        |             | ; C! "C-STORE" ( n addr -- ) 15 bytes / 29 cycles
 964:000 | DONE cmt | na 16 16 |        |             | ; Store LSB of NOS at location given as TOS
 965:000 | DONE lbl | na 16 16 | 006319 |             | xt_c-store                           
 966:000 | DONE ins | na 16 16 | 006319 | b5 00       |                 lda.dx 00            
 967:000 | DONE ins | na 16 16 | 00631b | e2 20       |                 sep 20               
 967:001 | DONE ctl | na  8 16 |        |             |         .!a8
 968:000 | DONE ins | na  8 16 | 00631d | 99 00 00    |                 sta.y 0000           
 969:000 | DONE ins | na  8 16 | 006320 | c2 20       |                 rep 20               
 969:001 | DONE ctl | na 16 16 |        |             |         .!a16
 970:000 | DONE ins | na 16 16 | 006322 | b4 02       |                 ldy.dx 02            
 971:000 | DONE ins | na 16 16 | 006324 | e8          |                 inx                  
 972:000 | DONE ins | na 16 16 | 006325 | e8          |                 inx                  
 973:000 | DONE ins | na 16 16 | 006326 | e8          |                 inx                  
 974:000 | DONE ins | na 16 16 | 006327 | e8          |                 inx                  
 975:000 | DONE wsp | na 16 16 |        |             |
 976:000 | DONE lbl | na 16 16 | 006328 |             | z_c-store                            
 976:001 | DONE ins | na 16 16 | 006328 | 60          |                 rts                  
 977:000 | DONE wsp | na 16 16 |        |             |
 978:000 | DONE wsp | na 16 16 |        |             |
 979:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 980:000 | DONE cmt | na 16 16 |        |             | ; CELLS ( n -- n ) X bytes / X cycles
 981:000 | DONE cmt | na 16 16 |        |             | ; Given a number of cells, return the number of bytes that they will require.
 982:000 | DONE cmt | na 16 16 |        |             | ; This is 16 bit cell Forth, so the value returned by this word is the same as
 983:000 | DONE cmt | na 16 16 |        |             | ; returned by 2*, see there.
 984:000 | DONE wsp | na 16 16 |        |             |
 985:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 986:000 | DONE cmt | na 16 16 |        |             | ; CHAR ( "c" -- u ) 23 bytes / X cycles
 987:000 | DONE cmt | na 16 16 |        |             | ; Convert a character to its ASCII value
 988:000 | DONE lbl | na 16 16 | 006329 |             | xt_char                              
 989:000 | DONE dir | na 16 16 |        |             |         .!a16                        
 990:000 | DONE ins | na 16 16 | 006329 | 20 a9 65    |                 jsr 0065a9           ( -- addr u )
 991:000 | DONE wsp | na 16 16 |        |             |
 992:000 | DONE cmt | na 16 16 |        |             |                 ; if we got back a zero, we have a problem
 993:000 | DONE ins | na 16 16 | 00632c | 98          |                 tya                  force flag check
 994:000 | DONE ins | na 16 16 | 00632d | d0 06       |                 bne 006335           
 995:000 | DONE wsp | na 16 16 |        |             |
 996:000 | DONE ins | na 16 16 | 00632f | a9 8d 6e    |                 lda.# 006e8d         
 997:000 | DONE ins | na 16 16 | 006332 | 4c 91 6c    |                 jmp 006c91           
 998:000 | DONE wsp | na 16 16 |        |             |
 999:000 | DONE lbl | na 16 16 | 006335 |             | char_got_char                        
1000:000 | DONE ins | na 16 16 | 006335 | b4 00       |                 ldy.dx 00            get addr from NOS
1001:000 | DONE ins | na 16 16 | 006337 | b9 00 00    |                 lda.y 0000           LDA 0000,Y - could be C@
1002:000 | DONE ins | na 16 16 | 00633a | 29 ff 00    |                 and.# 00ff           
1003:000 | DONE ins | na 16 16 | 00633d | a8          |                 tay                  
1004:000 | DONE wsp | na 16 16 |        |             |
1005:000 | DONE ins | na 16 16 | 00633e | e8          |                 inx                  
1006:000 | DONE ins | na 16 16 | 00633f | e8          |                 inx                  
1007:000 | DONE wsp | na 16 16 |        |             |
1008:000 | DONE lbl | na 16 16 | 006340 |             | z_char                               
1008:001 | DONE ins | na 16 16 | 006340 | 60          |                 rts                  
1009:000 | DONE wsp | na 16 16 |        |             |
1010:000 | DONE wsp | na 16 16 |        |             |
1011:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1012:000 | DONE cmt | na 16 16 |        |             | ; COMPILE-ONLY ( -- ) 8 bytes / X cycles
1013:000 | DONE cmt | na 16 16 |        |             | ; Mark the most recently defined word as COMPILE-ONLY. The alternative (and
1014:000 | DONE cmt | na 16 16 |        |             | ; traditional) way to do this is to include a word ?COMPILE that makes sure
1015:000 | DONE cmt | na 16 16 |        |             | ; we're in compile mode
1016:000 | DONE lbl | na 16 16 | 006341 |             | xt_compile-only                      
1017:000 | DONE dir | na 16 16 |        |             |         .!a16                        
1018:000 | DONE ins | na 16 16 | 006341 | a9 04 00    |                 lda.# CO             
1019:000 | DONE ins | na 16 16 | 006344 | eb          |                 xba                  flags are MSB
1020:000 | DONE ins | na 16 16 | 006345 | 12 02       |                 ora.di 000202        ORA (DP)
1021:000 | DONE ins | na 16 16 | 006347 | 92 02       |                 sta.di 000202        
1022:000 | DONE wsp | na 16 16 |        |             |
1023:000 | DONE lbl | na 16 16 | 006349 |             | z_compile-only                       
1023:001 | DONE ins | na 16 16 | 006349 | 60          |                 rts                  
1024:000 | DONE wsp | na 16 16 |        |             |
1025:000 | DONE wsp | na 16 16 |        |             |
1026:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1027:000 | DONE cmt | na 16 16 |        |             | ; COMPILE, ( xt -- ) X bytes / X cycles
1028:000 | DONE cmt | na 16 16 |        |             | ; Compile a given xt in the current word definition. It is an error if we are
1029:000 | DONE cmt | na 16 16 |        |             | ; not in the compile state. Because we are using subroutine threading, we can't
1030:000 | DONE cmt | na 16 16 |        |             | ; use , (COMMA) to compile new words the traditional way. We use the NC (Native
1031:000 | DONE cmt | na 16 16 |        |             | ; Compile) flag to decide if native compilation is allowed. If yes, we use the
1032:000 | DONE cmt | na 16 16 |        |             | ; value NC_LIMIT (in definitions.tasm) to decide if the code is too large to be
1033:000 | DONE cmt | na 16 16 |        |             | ; natively coded: If the size is smaller than NC_LIMIT, we silently use
1034:000 | DONE cmt | na 16 16 |        |             | ; subroutine coding.
1035:000 | DONE lbl | na 16 16 | 00634a |             | xt_compilecomma                      
1036:000 | DONE wsp | na 16 16 |        |             |
1037:000 | DONE lbl | na 16 16 | 00634a |             | compile_as_code                      
1038:000 | DONE cmt | na 16 16 |        |             |                 ; Compile xt as native code
1039:000 | DONE cmt | na 16 16 |        |             |                 ; use nc_limit to decide if we want native compile
1040:000 | DONE cmt | na 16 16 |        |             |                 ; TODO currently just compiles subroutine jumps
1041:000 | DONE wsp | na 16 16 |        |             |
1042:000 | DONE lbl | na 16 16 | 00634a |             | compile_as_jump                      
1043:000 | DONE cmt | na 16 16 |        |             |                 ; Compile xt as a subroutine jump. We don't have to switch A to
1044:000 | DONE cmt | na 16 16 |        |             |                 ; 8-bit register size because we only advance CP by one byte, so
1045:000 | DONE cmt | na 16 16 |        |             |                 ; the MSB of A is overwritten. Little endian machines for the
1046:000 | DONE cmt | na 16 16 |        |             |                 ; win!
1047:000 | DONE ins | na 16 16 | 00634a | a9 20 00    |                 lda.# 20             opcode for JSR
1048:000 | DONE ins | na 16 16 | 00634d | 92 00       |                 sta.di 000200        STA (CP)
1049:000 | DONE ins | na 16 16 | 00634f | e6 00       |                 inc.d 000200         
1050:000 | DONE wsp | na 16 16 |        |             |
1051:000 | DONE cmt | na 16 16 |        |             |                 ; There is no "sty.di" instruction, so we have to do this the
1052:000 | DONE cmt | na 16 16 |        |             |                 ; hard way
1053:000 | DONE ins | na 16 16 | 006351 | 98          |                 tya                  
1054:000 | DONE ins | na 16 16 | 006352 | 92 00       |                 sta.di 000200        
1055:000 | DONE ins | na 16 16 | 006354 | e6 00       |                 inc.d 000200         
1056:000 | DONE ins | na 16 16 | 006356 | e6 00       |                 inc.d 000200         
1057:000 | DONE wsp | na 16 16 |        |             |
1058:000 | DONE ins | na 16 16 | 006358 | b4 00       |                 ldy.dx 00            
1059:000 | DONE ins | na 16 16 | 00635a | e8          |                 inx                  
1060:000 | DONE ins | na 16 16 | 00635b | e8          |                 inx                  
1061:000 | DONE wsp | na 16 16 |        |             |
1062:000 | DONE lbl | na 16 16 | 00635c |             | z_compilecomma                       
1062:001 | DONE ins | na 16 16 | 00635c | 60          |                 rts                  
1063:000 | DONE wsp | na 16 16 |        |             |
1064:000 | DONE wsp | na 16 16 |        |             |
1065:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1066:000 | DONE cmt | na 16 16 |        |             | ; CONSTANT ( "name" n -- ) X bytes / X cycles
1067:000 | DONE cmt | na 16 16 |        |             | ; Associate a fixed value with a word. This could be realized as
1068:000 | DONE cmt | na 16 16 |        |             | ; CREATE , DOES> @  as well. We do more in assembler but let CREATE do the heavy
1069:000 | DONE cmt | na 16 16 |        |             | ; lifting.
1070:000 | DONE cmt | na 16 16 |        |             | ; See http://www.bradrodriguez.com/papers/moving3.htm for a primer on how
1071:000 | DONE cmt | na 16 16 |        |             | ; this works in various Forths.
1072:000 | DONE lbl | na 16 16 | 00635d |             | xt_constant                          
1073:000 | DONE ins | na 16 16 | 00635d | 20 8d 63    |                 jsr 00638d           
1074:000 | DONE wsp | na 16 16 |        |             |
1075:000 | DONE cmt | na 16 16 |        |             |                 ; CREATE by default installs a subroutine jump to DOVAR, but we
1076:000 | DONE cmt | na 16 16 |        |             |                 ; actually want DOCONST this time. Go back two bytes and repace
1077:000 | DONE cmt | na 16 16 |        |             |                 ; the subroutine jump target
1078:000 | DONE ins | na 16 16 | 006360 | a5 00       |                 lda.d 000200         
1079:000 | DONE ins | na 16 16 | 006362 | 3a          |                 dec.a                
1080:000 | DONE ins | na 16 16 | 006363 | 3a          |                 dec.a                
1081:000 | DONE ins | na 16 16 | 006364 | 85 16       |                 sta.d 000216         
1082:000 | DONE wsp | na 16 16 |        |             |
1083:000 | DONE ins | na 16 16 | 006366 | a9 fd 6b    |                 lda.# 006bfd         
1084:000 | DONE ins | na 16 16 | 006369 | 92 16       |                 sta.di 000216        STA (TMP1)
1085:000 | DONE wsp | na 16 16 |        |             |
1086:000 | DONE cmt | na 16 16 |        |             |                 ; Save TOS in next cell. This is a direct version of COMMA
1087:000 | DONE ins | na 16 16 | 00636b | 98          |                 tya                  there is no "sty.di cp"
1088:000 | DONE ins | na 16 16 | 00636c | 92 00       |                 sta.di 000200        
1089:000 | DONE ins | na 16 16 | 00636e | e6 00       |                 inc.d 000200         
1090:000 | DONE ins | na 16 16 | 006370 | e6 00       |                 inc.d 000200         
1091:000 | DONE wsp | na 16 16 |        |             |
1092:000 | DONE ins | na 16 16 | 006372 | b4 00       |                 ldy.dx 00            DROP
1093:000 | DONE ins | na 16 16 | 006374 | e8          |                 inx                  
1094:000 | DONE ins | na 16 16 | 006375 | e8          |                 inx                  
1095:000 | DONE wsp | na 16 16 |        |             |
1096:000 | DONE lbl | na 16 16 | 006376 |             | z_constant                           
1096:001 | DONE ins | na 16 16 | 006376 | 60          |                 rts                  
1097:000 | DONE wsp | na 16 16 |        |             |
1098:000 | DONE wsp | na 16 16 |        |             |
1099:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1100:000 | DONE cmt | na 16 16 |        |             | ; COUNT ( c-addr -- addr u ) 14 bytes / X cycles
1101:000 | DONE cmt | na 16 16 |        |             | ; Convert old-style character string to address-length pair. Note that the
1102:000 | DONE cmt | na 16 16 |        |             | ; length of the string c-addr ist stored in character length (8 bit), not cell
1103:000 | DONE cmt | na 16 16 |        |             | ; length (16 bit). This is rarely used these days, though COUNT can also be used
1104:000 | DONE cmt | na 16 16 |        |             | ; to step through a string character by character.
1105:000 | DONE lbl | na 16 16 | 006377 |             | xt_count                             
1106:000 | DONE dir | na 16 16 |        |             |         .!a16                        
1107:000 | DONE dir | na 16 16 |        |             |         .!xy16                       
1108:000 | DONE ins | na 16 16 | 006377 | 98          |                 tya                  
1109:000 | DONE ins | na 16 16 | 006378 | 1a          |                 inc.a                String address starts one char later
1110:000 | DONE wsp | na 16 16 |        |             |
1111:000 | DONE ins | na 16 16 | 006379 | ca          |                 dex                  
1112:000 | DONE ins | na 16 16 | 00637a | ca          |                 dex                  
1113:000 | DONE ins | na 16 16 | 00637b | 95 00       |                 sta.dx 00            NOS
1114:000 | DONE wsp | na 16 16 |        |             |
1115:000 | DONE ins | na 16 16 | 00637d | b9 00 00    |                 lda.y 0000           LDA $0000,Y  first byte is length
1116:000 | DONE ins | na 16 16 | 006380 | eb          |                 xba                  move length to LSB
1117:000 | DONE ins | na 16 16 | 006381 | 29 ff 00    |                 and.# 00ff           get rid of whatever was MSB
1118:000 | DONE ins | na 16 16 | 006384 | a8          |                 tay                  TOS
1119:000 | DONE wsp | na 16 16 |        |             |
1120:000 | DONE lbl | na 16 16 | 006385 |             | z_count                              
1120:001 | DONE ins | na 16 16 | 006385 | 60          |                 rts                  
1121:000 | DONE wsp | na 16 16 |        |             |
1122:000 | DONE wsp | na 16 16 |        |             |
1123:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1124:000 | DONE cmt | na 16 16 |        |             | ; CR ( -- ) X bytes / X cycles
1125:000 | DONE cmt | na 16 16 |        |             | ; Cause following output to appear at beginning of next line
1126:000 | DONE cmt | na 16 16 |        |             | ; TODO replace with EMIT
1127:000 | DONE lbl | na 16 16 | 006386 |             | xt_cr                                
1128:000 | DONE ins | na 16 16 | 006386 | a9 0a 00    |                 lda.# AscLF          test with AscCR for emulators
1129:000 | DONE ins | na 16 16 | 006389 | 20 36 60    |                 jsr 006036           
1130:000 | DONE wsp | na 16 16 |        |             |
1131:000 | DONE lbl | na 16 16 | 00638c |             | z_cr                                 
1131:001 | DONE ins | na 16 16 | 00638c | 60          |                 rts                  
1132:000 | DONE wsp | na 16 16 |        |             |
1133:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1134:000 | DONE cmt | na 16 16 |        |             | ; CREATE ( "name" -- ) X bytes / X cycles
1135:000 | DONE cmt | na 16 16 |        |             | ; Create a Dictionary entry associated with "name", used for various words,
1136:000 | DONE cmt | na 16 16 |        |             | ; especially for VARIABLE. When called, this new word will return the associated
1137:000 | DONE cmt | na 16 16 |        |             | ; address.
1138:000 | DONE lbl | na 16 16 | 00638d |             | xt_create                            
1139:000 | DONE dir | na 16 16 |        |             |         .!a16                        
1140:000 | DONE ins | na 16 16 | 00638d | 20 a9 65    |                 jsr 0065a9           ( -- addr u )
1141:000 | DONE ins | na 16 16 | 006390 | d0 06       |                 bne 006398           
1142:000 | DONE wsp | na 16 16 |        |             |
1143:000 | DONE cmt | na 16 16 |        |             |                 ; if we got a zero-length name string, complain and abort
1144:000 | DONE ins | na 16 16 | 006392 | a9 8d 6e    |                 lda.# 006e8d         
1145:000 | DONE ins | na 16 16 | 006395 | 4c 91 6c    |                 jmp 006c91           
1146:000 | DONE wsp | na 16 16 |        |             |
1147:000 | DONE lbl | na 16 16 | 006398 |             | create_got_name                      
1148:000 | DONE cmt | na 16 16 |        |             |                 ; all Dictionary entries are lowercase
1149:000 | DONE ins | na 16 16 | 006398 | 20 ca 6c    |                 jsr 006cca           
1150:000 | DONE wsp | na 16 16 |        |             |
1151:000 | DONE cmt | na 16 16 |        |             |                 ; Remember the first free byte of memory as the start of the new
1152:000 | DONE cmt | na 16 16 |        |             |                 ; word
1153:000 | DONE ins | na 16 16 | 00639b | a5 00       |                 lda.d 000200         
1154:000 | DONE ins | na 16 16 | 00639d | 85 16       |                 sta.d 000216         save start of new word
1155:000 | DONE wsp | na 16 16 |        |             |
1156:000 | DONE cmt | na 16 16 |        |             |                 ; Enforce limit on 255 char length names by masking the MSB
1157:000 | DONE cmt | na 16 16 |        |             |                 ; of the length of the given string. We arrive here with
1158:000 | DONE cmt | na 16 16 |        |             |                 ; ( addr u )
1159:000 | DONE ins | na 16 16 | 00639f | 98          |                 tya                  
1160:000 | DONE ins | na 16 16 | 0063a0 | 29 ff 00    |                 and.# 00ff           
1161:000 | DONE ins | na 16 16 | 0063a3 | 85 18       |                 sta.d 000218         save length of name string
1162:000 | DONE wsp | na 16 16 |        |             |
1163:000 | DONE cmt | na 16 16 |        |             |                 ; We need 8 bytes + the length of the name string for our new
1164:000 | DONE cmt | na 16 16 |        |             |                 ; header. This is also the offset for the start of the code
1165:000 | DONE cmt | na 16 16 |        |             |                 ; field (the xt_ label) so we need to remember it. Otherwise, we
1166:000 | DONE cmt | na 16 16 |        |             |                 ; could just allot the space afterwards.
1167:000 | DONE ins | na 16 16 | 0063a5 | 18          |                 clc                  
1168:000 | DONE ins | na 16 16 | 0063a6 | 69 08 00    |                 adc.# 0008           
1169:000 | DONE ins | na 16 16 | 0063a9 | 85 1a       |                 sta.d 00021a         total bytes required for header
1170:000 | DONE wsp | na 16 16 |        |             |
1171:000 | DONE cmt | na 16 16 |        |             |                 ; We need to allocate three more bytes for the hardcoded
1172:000 | DONE cmt | na 16 16 |        |             |                 ; code field area (CFA), the "payload" of the word which by
1173:000 | DONE cmt | na 16 16 |        |             |                 ; default will be a subroutine jump to DOVAR
1174:000 | DONE ins | na 16 16 | 0063ab | 1a          |                 inc.a                
1175:000 | DONE ins | na 16 16 | 0063ac | 1a          |                 inc.a                
1176:000 | DONE ins | na 16 16 | 0063ad | 1a          |                 inc.a                
1177:000 | DONE wsp | na 16 16 |        |             |
1178:000 | DONE cmt | na 16 16 |        |             |                 ; Instead of jumping to ALLOT, we do things by hand for speed
1179:000 | DONE cmt | na 16 16 |        |             |                 ; and so we don't have to fool around with the stack
1180:000 | DONE ins | na 16 16 | 0063ae | 18          |                 clc                  
1181:000 | DONE ins | na 16 16 | 0063af | 65 00       |                 adc.d 000200         
1182:000 | DONE ins | na 16 16 | 0063b1 | 85 00       |                 sta.d 000200         
1183:000 | DONE wsp | na 16 16 |        |             |
1184:000 | DONE cmt | na 16 16 |        |             |                 ; Now we walk through the header, using Y as the index. See
1185:000 | DONE cmt | na 16 16 |        |             |                 ; drawing of header in headers.tasm file for reference. We
1186:000 | DONE cmt | na 16 16 |        |             |                 ; arrive here with ( addr u ) still from PARSE-NAME. We need
1187:000 | DONE cmt | na 16 16 |        |             |                 ; that addr later for the name string, so we push it to the
1188:000 | DONE cmt | na 16 16 |        |             |                 ; Return Stack. We'll clean up the Data Stack later
1189:000 | DONE ins | na 16 16 | 0063b3 | b5 00       |                 lda.dx 00            
1190:000 | DONE ins | na 16 16 | 0063b5 | 48          |                 pha                  
1191:000 | DONE wsp | na 16 16 |        |             |
1192:000 | DONE cmt | na 16 16 |        |             |                 ; HEADER BYTES 0,1: Length byte and flags
1193:000 | DONE ins | na 16 16 | 0063b6 | a0 00 00    |                 ldy.# 0000           Y is now an index, not TOS
1194:000 | DONE ins | na 16 16 | 0063b9 | a5 18       |                 lda.d 000218         get length byte
1195:000 | DONE ins | na 16 16 | 0063bb | 91 16       |                 sta.diy 000216       STA (TMP1),Y
1196:000 | DONE ins | na 16 16 | 0063bd | c8          |                 iny                  
1197:000 | DONE ins | na 16 16 | 0063be | c8          |                 iny                  
1198:000 | DONE wsp | na 16 16 |        |             |
1199:000 | DONE cmt | na 16 16 |        |             |                 ; BYTES 2,3: Next word in the dictionary (its nt). This is the
1200:000 | DONE cmt | na 16 16 |        |             |                 ; current Dictionary Pointer
1201:000 | DONE ins | na 16 16 | 0063bf | a5 02       |                 lda.d 000202         
1202:000 | DONE ins | na 16 16 | 0063c1 | 91 16       |                 sta.diy 000216       
1203:000 | DONE ins | na 16 16 | 0063c3 | c8          |                 iny                  
1204:000 | DONE ins | na 16 16 | 0063c4 | c8          |                 iny                  
1205:000 | DONE wsp | na 16 16 |        |             |
1206:000 | DONE cmt | na 16 16 |        |             |                 ; BYTES 4,5: Start of code field (xt of this word, "xt_" link)
1207:000 | DONE cmt | na 16 16 |        |             |                 ; This begins after the header, so we take the length of the
1208:000 | DONE cmt | na 16 16 |        |             |                 ; header, which we saved in tmp3, and use it as an offset to
1209:000 | DONE cmt | na 16 16 |        |             |                 ; the address of the start of the word
1210:000 | DONE ins | na 16 16 | 0063c5 | a5 16       |                 lda.d 000216         can't use CP, because we've allotted space
1211:000 | DONE ins | na 16 16 | 0063c7 | 85 02       |                 sta.d 000202         while we've got it, make old CP the new DP
1212:000 | DONE wsp | na 16 16 |        |             |
1213:000 | DONE ins | na 16 16 | 0063c9 | 18          |                 clc                  
1214:000 | DONE ins | na 16 16 | 0063ca | 65 1a       |                 adc.d 00021a         total header length
1215:000 | DONE ins | na 16 16 | 0063cc | 91 16       |                 sta.diy 000216       
1216:000 | DONE ins | na 16 16 | 0063ce | c8          |                 iny                  
1217:000 | DONE ins | na 16 16 | 0063cf | c8          |                 iny                  
1218:000 | DONE wsp | na 16 16 |        |             |
1219:000 | DONE cmt | na 16 16 |        |             |                 ; BYTES 6,7: End of code ("z_" link)
1220:000 | DONE cmt | na 16 16 |        |             |                 ; By default, we execute a jump to the DOVAR routine, so we need
1221:000 | DONE cmt | na 16 16 |        |             |                 ; to move three bytes down, and then one more byte so the z_
1222:000 | DONE cmt | na 16 16 |        |             |                 ; label points to the (fictional) RTS instruction for correct
1223:000 | DONE cmt | na 16 16 |        |             |                 ; compilation. The start of the code field is still in A
1224:000 | DONE ins | na 16 16 | 0063d0 | 1a          |                 inc.a                
1225:000 | DONE ins | na 16 16 | 0063d1 | 1a          |                 inc.a                
1226:000 | DONE ins | na 16 16 | 0063d2 | 1a          |                 inc.a                
1227:000 | DONE ins | na 16 16 | 0063d3 | 91 16       |                 sta.diy 000216       
1228:000 | DONE ins | na 16 16 | 0063d5 | c8          |                 iny                  
1229:000 | DONE ins | na 16 16 | 0063d6 | c8          |                 iny                  
1230:000 | DONE wsp | na 16 16 |        |             |
1231:000 | DONE cmt | na 16 16 |        |             |                 ; BYTE 8: Start of name string
1232:000 | DONE cmt | na 16 16 |        |             |                 ; The addr of the string is on the Return Stack, the length of
1233:000 | DONE cmt | na 16 16 |        |             |                 ; the name string is in tmp2. We subtract eight from the address
1234:000 | DONE cmt | na 16 16 |        |             |                 ; so we can use the same loop index
1235:000 | DONE ins | na 16 16 | 0063d7 | 68          |                 pla                  get back string address
1236:000 | DONE ins | na 16 16 | 0063d8 | 38          |                 sec                  
1237:000 | DONE ins | na 16 16 | 0063d9 | e9 08 00    |                 sbc.# 0008           
1238:000 | DONE ins | na 16 16 | 0063dc | 85 1a       |                 sta.d 00021a         
1239:000 | DONE ins | na 16 16 | 0063de | e2 20       |                 sep 20               
1239:001 | DONE ctl | na  8 16 |        |             |         .!a8
1240:000 | DONE lbl | na  8 16 | 0063e0 |             | @                                    
1241:000 | DONE ins | na  8 16 | 0063e0 | b1 1a       |                 lda.diy 00021a       
1242:000 | DONE ins | na  8 16 | 0063e2 | 91 16       |                 sta.diy 000216       
1243:000 | DONE ins | na  8 16 | 0063e4 | c8          |                 iny                  
1244:000 | DONE ins | na  8 16 | 0063e5 | c6 18       |                 dec.d 000218         
1245:000 | DONE ins | na  8 16 | 0063e7 | d0 f7       |                 bne 0063e0           
1246:000 | DONE wsp | na  8 16 |        |             |
1247:000 | DONE cmt | na  8 16 |        |             |                 ; After the name string, comes the Code Field (start at xt, that
1248:000 | DONE cmt | na  8 16 |        |             |                 ; is, the xt_ label of the word) which is initially a jump to the
1249:000 | DONE cmt | na  8 16 |        |             |                 ; subroutine to DOVAR. We're still in 8-bit A-register, which is
1250:000 | DONE cmt | na  8 16 |        |             |                 ; good
1251:000 | DONE ins | na  8 16 | 0063e9 | a9 20       |                 lda.# 20             opcode of JSR
1252:000 | DONE ins | na  8 16 | 0063eb | 91 16       |                 sta.diy 000216       
1253:000 | DONE ins | na  8 16 | 0063ed | c8          |                 iny                  single increase only because we have 8-bit A
1254:000 | DONE wsp | na  8 16 |        |             |
1255:000 | DONE ins | na  8 16 | 0063ee | a9 18       |                 lda.# .lsb 006c18    
1256:000 | DONE ins | na  8 16 | 0063f0 | 91 16       |                 sta.diy 000216       
1257:000 | DONE ins | na  8 16 | 0063f2 | c8          |                 iny                  
1258:000 | DONE wsp | na  8 16 |        |             |
1259:000 | DONE ins | na  8 16 | 0063f3 | a9 6c       |                 lda.# .msb 006c18    
1260:000 | DONE ins | na  8 16 | 0063f5 | 91 16       |                 sta.diy 000216       
1261:000 | DONE wsp | na  8 16 |        |             |
1262:000 | DONE ins | na  8 16 | 0063f7 | c2 20       |                 rep 20               
1262:001 | DONE ctl | na 16 16 |        |             |         .!a16
1263:000 | DONE cmt | na 16 16 |        |             |                 ; We're done. Restore Data Stack (2DROP)
1264:000 | DONE ins | na 16 16 | 0063f9 | b4 02       |                 ldy.dx 02            
1265:000 | DONE ins | na 16 16 | 0063fb | e8          |                 inx                  
1266:000 | DONE ins | na 16 16 | 0063fc | e8          |                 inx                  
1267:000 | DONE ins | na 16 16 | 0063fd | e8          |                 inx                  
1268:000 | DONE ins | na 16 16 | 0063fe | e8          |                 inx                  
1269:000 | DONE wsp | na 16 16 |        |             |
1270:000 | DONE lbl | na 16 16 | 0063ff |             | z_create                             
1270:001 | DONE ins | na 16 16 | 0063ff | 60          |                 rts                  
1271:000 | DONE wsp | na 16 16 |        |             |
1272:000 | DONE wsp | na 16 16 |        |             |
1273:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1274:000 | DONE cmt | na 16 16 |        |             | ; DECIMAL ( -- ) 7 bytes / X cycles
1275:000 | DONE cmt | na 16 16 |        |             | ; Change radix for number conversion to 10
1276:000 | DONE lbl | na 16 16 | 006400 |             | xt_decimal                           
1277:000 | DONE dir | na 16 16 |        |             |         .!a16                        
1278:000 | DONE ins | na 16 16 | 006400 | a9 0a 00    |                 lda.# 000a           
1279:000 | DONE ins | na 16 16 | 006403 | 85 1c       |                 sta.d 00021c         
1280:000 | DONE wsp | na 16 16 |        |             |
1281:000 | DONE lbl | na 16 16 | 006405 |             | z_decimal                            
1281:001 | DONE ins | na 16 16 | 006405 | 60          |                 rts                  
1282:000 | DONE wsp | na 16 16 |        |             |
1283:000 | DONE wsp | na 16 16 |        |             |
1284:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1285:000 | DONE cmt | na 16 16 |        |             | ; DEPTH ( -- u ) 14 bytes / X cycles
1286:000 | DONE cmt | na 16 16 |        |             | ; Push the number of entries in cells (not bytes) on the parameter stack.
1287:000 | DONE cmt | na 16 16 |        |             | ; Assumes X is valid as the DSP.
1288:000 | DONE lbl | na 16 16 | 006406 |             | xt_depth                             
1289:000 | DONE dir | na 16 16 |        |             |         .!a16                        
1290:000 | DONE cmt | na 16 16 |        |             | 		; We've got zero entries when X is dsp0
1291:000 | DONE ins | na 16 16 | 006406 | 86 04       |                 stx.d 000204         
1292:000 | DONE ins | na 16 16 | 006408 | a9 f8 02    |                 lda.# 0002f8         
1293:000 | DONE ins | na 16 16 | 00640b | 38          |                 sec                  
1294:000 | DONE ins | na 16 16 | 00640c | e5 04       |                 sbc.d 000204         
1295:000 | DONE wsp | na 16 16 |        |             |
1296:000 | DONE cmt | na 16 16 |        |             |                 ; now divide by two because each cells is to bytes long
1297:000 | DONE ins | na 16 16 | 00640e | 4a          |                 lsr.a                
1298:000 | DONE wsp | na 16 16 |        |             |
1299:000 | DONE ins | na 16 16 | 00640f | ca          |                 dex                  
1300:000 | DONE ins | na 16 16 | 006410 | ca          |                 dex                  
1301:000 | DONE ins | na 16 16 | 006411 | 94 00       |                 sty.dx 00            
1302:000 | DONE wsp | na 16 16 |        |             |
1303:000 | DONE cmt | na 16 16 |        |             |                 ; push result to stack
1304:000 | DONE ins | na 16 16 | 006413 | a8          |                 tay                  
1305:000 | DONE wsp | na 16 16 |        |             |
1306:000 | DONE lbl | na 16 16 | 006414 |             | z_depth                              
1306:001 | DONE ins | na 16 16 | 006414 | 60          |                 rts                  
1307:000 | DONE wsp | na 16 16 |        |             |
1308:000 | DONE wsp | na 16 16 |        |             |
1309:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1310:000 | DONE cmt | na 16 16 |        |             | ; DOES> ( -- ) X bytes / X cycles
1311:000 | DONE cmt | na 16 16 |        |             | ; Create the payload for defining new defining words. See the file
1312:000 | DONE cmt | na 16 16 |        |             | ; docs/create-does.txt and
1313:000 | DONE cmt | na 16 16 |        |             | ; http://www.bradrodriguez.com/papers/moving3.htm for a discussion of
1314:000 | DONE cmt | na 16 16 |        |             | ; DOES>'s internal workings. This uses tmp1 and tmp2
1315:000 | DONE lbl | na 16 16 | 006415 |             | xt_does                              
1316:000 | DONE cmt | na 16 16 |        |             | 		; compile a subroutine jump to the runtime of DOES>
1317:000 | DONE ins | na 16 16 | 006415 | f4 22 64    |                 phe.# 006422         
1318:000 | DONE ins | na 16 16 | 006418 | 20 70 6c    |                 jsr 006c70           
1319:000 | DONE wsp | na 16 16 |        |             |
1320:000 | DONE cmt | na 16 16 |        |             |                 ; compile a subroutine jump to DODOES. In traditional terms,
1321:000 | DONE cmt | na 16 16 |        |             |                 ; this is the Code Field Area (CFA) of the new word
1322:000 | DONE ins | na 16 16 | 00641b | f4 0b 6c    |                 phe.# 006c0b         
1323:000 | DONE ins | na 16 16 | 00641e | 20 70 6c    |                 jsr 006c70           
1324:000 | DONE wsp | na 16 16 |        |             |
1325:000 | DONE lbl | na 16 16 | 006421 |             | z_does                               
1325:001 | DONE ins | na 16 16 | 006421 | 60          |                 rts                  
1326:000 | DONE wsp | na 16 16 |        |             |
1327:000 | DONE lbl | na 16 16 | 006422 |             | does_rt                              
1328:000 | DONE cmt | na 16 16 |        |             |                 ; Runtime portion of DOES>. This replaces the subroutine jump to
1329:000 | DONE cmt | na 16 16 |        |             |                 ; DOVAR that CREATE automatically encodes by a jump to the
1330:000 | DONE cmt | na 16 16 |        |             |                 ; address that contains a subroutine jump to DODOES. We don't
1331:000 | DONE cmt | na 16 16 |        |             |                 ; jump to DODOES directly because we need to work our magic with
1332:000 | DONE cmt | na 16 16 |        |             |                 ; the return addresses
1333:000 | DONE ins | na 16 16 | 006422 | 68          |                 pla                  
1334:000 | DONE ins | na 16 16 | 006423 | 1a          |                 inc.a                increase by one because of RTS mechanics
1335:000 | DONE ins | na 16 16 | 006424 | 85 16       |                 sta.d 000216         
1336:000 | DONE wsp | na 16 16 |        |             |
1337:000 | DONE cmt | na 16 16 |        |             |                 ; CREATE has also already modified the DP to point to the new
1338:000 | DONE cmt | na 16 16 |        |             |                 ; word. We have no idea which instructions followed the CREATE
1339:000 | DONE cmt | na 16 16 |        |             |                 ; command if there is a DOES> so the CP could point anywhere by
1340:000 | DONE cmt | na 16 16 |        |             |                 ; now.
1341:000 | DONE ins | na 16 16 | 006426 | a5 02       |                 lda.d 000202         
1342:000 | DONE wsp | na 16 16 |        |             |
1343:000 | DONE cmt | na 16 16 |        |             |                 ; The address of the word's xt is four bytes down (see
1344:000 | DONE cmt | na 16 16 |        |             |                 ; header.tasm for details).
1345:000 | DONE ins | na 16 16 | 006428 | 18          |                 clc                  
1346:000 | DONE ins | na 16 16 | 006429 | 69 04 00    |                 adc.# 0004           
1347:000 | DONE ins | na 16 16 | 00642c | 85 18       |                 sta.d 000218         
1348:000 | DONE wsp | na 16 16 |        |             |
1349:000 | DONE cmt | na 16 16 |        |             |                 ; Now we get that address and add one byte to skip over the JSR
1350:000 | DONE cmt | na 16 16 |        |             |                 ; opcode
1351:000 | DONE ins | na 16 16 | 00642e | b2 18       |                 lda.di 000218        LDA (TMP2)
1352:000 | DONE ins | na 16 16 | 006430 | 1a          |                 inc.a                
1353:000 | DONE ins | na 16 16 | 006431 | 85 18       |                 sta.d 000218         Points to address to be replaced
1354:000 | DONE wsp | na 16 16 |        |             |
1355:000 | DONE cmt | na 16 16 |        |             |                 ; Replace the DOVAR address
1356:000 | DONE ins | na 16 16 | 006433 | a5 16       |                 lda.d 000216         
1357:000 | DONE ins | na 16 16 | 006435 | 92 18       |                 sta.di 000218        STA (TMP2)
1358:000 | DONE wsp | na 16 16 |        |             |
1359:000 | DONE cmt | na 16 16 |        |             |                 ; Since we removed the return address that brought us here, we
1360:000 | DONE cmt | na 16 16 |        |             |                 ; go back to whatever the main routine was. Otherwise, we we
1361:000 | DONE cmt | na 16 16 |        |             |                 ; smash into the subroutine jump to DODOES.
1362:000 | DONE ins | na 16 16 | 006437 | 60          |                 rts                  
1363:000 | DONE wsp | na 16 16 |        |             |
1364:000 | DONE wsp | na 16 16 |        |             |
1365:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1366:000 | DONE cmt | na 16 16 |        |             | ; DROP ( n -- ) 4 bytes / 9 cycles
1367:000 | DONE cmt | na 16 16 |        |             | ; Drop first entry on Data Stack
1368:000 | DONE wsp | na 16 16 |        |             |
1369:000 | DONE lbl | na 16 16 | 006438 |             | xt_drop                              
1370:000 | DONE dir | na 16 16 |        |             |         .!xy16                       
1371:000 | DONE ins | na 16 16 | 006438 | b4 00       |                 ldy.dx 00            
1372:000 | DONE ins | na 16 16 | 00643a | e8          |                 inx                  
1373:000 | DONE ins | na 16 16 | 00643b | e8          |                 inx                  
1374:000 | DONE wsp | na 16 16 |        |             |
1375:000 | DONE lbl | na 16 16 | 00643c |             | z_drop                               
1375:001 | DONE ins | na 16 16 | 00643c | 60          |                 rts                  
1376:000 | DONE wsp | na 16 16 |        |             |
1377:000 | DONE wsp | na 16 16 |        |             |
1378:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1379:000 | DONE cmt | na 16 16 |        |             | ; DUMP ( addr u -- ) X bytes / X cycles
1380:000 | DONE cmt | na 16 16 |        |             | ; Print region of memory in a pretty way.
1381:000 | DONE cmt | na 16 16 |        |             | ; TODO This is a crude, temporary version for testing. Rewrite ASAP
1382:000 | DONE lbl | na 16 16 | 00643d |             | xt_dump                              
1383:000 | DONE cmt | na 16 16 |        |             |                 ; we use tmp1 as a counter because we need Y for other
1384:000 | DONE cmt | na 16 16 |        |             |                 ; stuff
1385:000 | DONE ins | na 16 16 | 00643d | 84 16       |                 sty.d 000216         
1386:000 | DONE wsp | na 16 16 |        |             |
1387:000 | DONE lbl | na 16 16 | 00643f |             | dump_line_loop                       
1388:000 | DONE ins | na 16 16 | 00643f | 20 86 63    |                 jsr 006386           
1389:000 | DONE wsp | na 16 16 |        |             |
1390:000 | DONE cmt | na 16 16 |        |             |                 ; start internal counter for 16 numbers per row
1391:000 | DONE ins | na 16 16 | 006442 | a0 10 00    |                 ldy.# 0010           
1392:000 | DONE lbl | na 16 16 | 006445 |             | dump_byte_loop                       
1393:000 | DONE cmt | na 16 16 |        |             |                 ; if there are zero bytes left to display, we're done
1394:000 | DONE ins | na 16 16 | 006445 | a5 16       |                 lda.d 000216         
1395:000 | DONE ins | na 16 16 | 006447 | f0 11       |                 beq 00645a           
1396:000 | DONE wsp | na 16 16 |        |             |
1397:000 | DONE cmt | na 16 16 |        |             |                 ; otherwise, print contents pointed to by address in NOS
1398:000 | DONE ins | na 16 16 | 006449 | a1 00       |                 lda.dxi 00           
1399:000 | DONE ins | na 16 16 | 00644b | 20 af 6c    |                 jsr 006caf           TODO replace by EMIT
1400:000 | DONE ins | na 16 16 | 00644e | 20 06 67    |                 jsr 006706           
1401:000 | DONE wsp | na 16 16 |        |             |
1402:000 | DONE cmt | na 16 16 |        |             |                 ; next character
1403:000 | DONE ins | na 16 16 | 006451 | f6 00       |                 inc.dx 00            
1404:000 | DONE wsp | na 16 16 |        |             |
1405:000 | DONE cmt | na 16 16 |        |             |                 ; loop counter
1406:000 | DONE ins | na 16 16 | 006453 | c6 16       |                 dec.d 000216         
1407:000 | DONE ins | na 16 16 | 006455 | 88          |                 dey                  
1408:000 | DONE ins | na 16 16 | 006456 | d0 ed       |                 bne 006445           
1409:000 | DONE ins | na 16 16 | 006458 | 80 e5       |                 bra 00643f           
1410:000 | DONE wsp | na 16 16 |        |             |
1411:000 | DONE lbl | na 16 16 | 00645a |             | dump_done                            
1412:000 | DONE ins | na 16 16 | 00645a | 20 86 63    |                 jsr 006386           
1413:000 | DONE wsp | na 16 16 |        |             |
1414:000 | DONE cmt | na 16 16 |        |             |                 ; drop everything and return
1415:000 | DONE cmt | na 16 16 |        |             |                 ; TODO replace by call of 2DROP
1416:000 | DONE ins | na 16 16 | 00645d | b4 02       |                 ldy.dx 02            
1417:000 | DONE ins | na 16 16 | 00645f | e8          |                 inx                  
1418:000 | DONE ins | na 16 16 | 006460 | e8          |                 inx                  
1419:000 | DONE ins | na 16 16 | 006461 | e8          |                 inx                  
1420:000 | DONE ins | na 16 16 | 006462 | e8          |                 inx                  
1421:000 | DONE wsp | na 16 16 |        |             |
1422:000 | DONE lbl | na 16 16 | 006463 |             | z_dump                               
1422:001 | DONE ins | na 16 16 | 006463 | 60          |                 rts                  
1423:000 | DONE wsp | na 16 16 |        |             |
1424:000 | DONE wsp | na 16 16 |        |             |
1425:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1426:000 | DONE cmt | na 16 16 |        |             | ; DUP  ( n -- n n ) 4 bytes / 9 cycles
1427:000 | DONE cmt | na 16 16 |        |             | ; Duplicate first entry on Data Stack
1428:000 | DONE wsp | na 16 16 |        |             |
1429:000 | DONE lbl | na 16 16 | 006464 |             | xt_dup                               
1430:000 | DONE dir | na 16 16 |        |             |         .!xy16                       
1431:000 | DONE ins | na 16 16 | 006464 | ca          |                 dex                  
1432:000 | DONE ins | na 16 16 | 006465 | ca          |                 dex                  
1433:000 | DONE ins | na 16 16 | 006466 | 94 00       |                 sty.dx 00            
1434:000 | DONE wsp | na 16 16 |        |             |
1435:000 | DONE lbl | na 16 16 | 006468 |             | z_dup                                
1435:001 | DONE ins | na 16 16 | 006468 | 60          |                 rts                  
1436:000 | DONE wsp | na 16 16 |        |             |
1437:000 | DONE wsp | na 16 16 |        |             |
1438:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1439:000 | DONE cmt | na 16 16 |        |             | ; EVALUATE ( addr u -- ) X bytes / X cycles
1440:000 | DONE cmt | na 16 16 |        |             | ; Execute string. Set SOURCE-ID to -1, make addr u the input source,
1441:000 | DONE cmt | na 16 16 |        |             | ; set >IN to zero. After processing the line, revert to old input source.
1442:000 | DONE lbl | na 16 16 | 006469 |             | xt_evaluate                          
1443:000 | DONE cmt | na 16 16 |        |             |                 ; We follow pforth's procedure of pushing SOURCE, SOURCE-ID, and
1444:000 | DONE cmt | na 16 16 |        |             |                 ; >IN to the Return Stack
1445:000 | DONE ins | na 16 16 | 006469 | a5 12       |                 lda.d 000212         >IN
1446:000 | DONE ins | na 16 16 | 00646b | 48          |                 pha                  
1447:000 | DONE ins | na 16 16 | 00646c | a5 0a       |                 lda.d 00020a         Input Source (SOURCE-ID)
1448:000 | DONE ins | na 16 16 | 00646e | 48          |                 pha                  
1449:000 | DONE ins | na 16 16 | 00646f | a5 0c       |                 lda.d 00020c         
1450:000 | DONE ins | na 16 16 | 006471 | 48          |                 pha                  
1451:000 | DONE ins | na 16 16 | 006472 | a5 0e       |                 lda.d 00020e         
1452:000 | DONE ins | na 16 16 | 006474 | 48          |                 pha                  
1453:000 | DONE wsp | na 16 16 |        |             |
1454:000 | DONE cmt | na 16 16 |        |             |                 ; set SOURCE-ID to -1
1455:000 | DONE ins | na 16 16 | 006475 | a9 ff ff    |                 lda.# 0ffff          
1456:000 | DONE ins | na 16 16 | 006478 | 85 0a       |                 sta.d 00020a         
1457:000 | DONE wsp | na 16 16 |        |             |
1458:000 | DONE cmt | na 16 16 |        |             |                 ; set >IN to zero
1459:000 | DONE ins | na 16 16 | 00647a | 64 12       |                 stz.d 000212         
1460:000 | DONE wsp | na 16 16 |        |             |
1461:000 | DONE cmt | na 16 16 |        |             |                 ; move TOS and NOS to input buffers
1462:000 | DONE ins | na 16 16 | 00647c | 84 0e       |                 sty.d 00020e         
1463:000 | DONE ins | na 16 16 | 00647e | b5 00       |                 lda.dx 00            
1464:000 | DONE ins | na 16 16 | 006480 | 85 0c       |                 sta.d 00020c         
1465:000 | DONE wsp | na 16 16 |        |             |
1466:000 | DONE cmt | na 16 16 |        |             |                 ; dump address string from stack
1467:000 | DONE ins | na 16 16 | 006482 | b4 02       |                 ldy.dx 02            
1468:000 | DONE ins | na 16 16 | 006484 | e8          |                 inx                  
1469:000 | DONE ins | na 16 16 | 006485 | e8          |                 inx                  
1470:000 | DONE ins | na 16 16 | 006486 | e8          |                 inx                  
1471:000 | DONE ins | na 16 16 | 006487 | e8          |                 inx                  
1472:000 | DONE wsp | na 16 16 |        |             |
1473:000 | DONE ins | na 16 16 | 006488 | 20 1f 6c    |                 jsr 006c1f           
1474:000 | DONE wsp | na 16 16 |        |             |
1475:000 | DONE cmt | na 16 16 |        |             |                 ; restore state from before evaluate
1476:000 | DONE ins | na 16 16 | 00648b | 68          |                 pla                  
1477:000 | DONE ins | na 16 16 | 00648c | 85 0e       |                 sta.d 00020e         
1478:000 | DONE ins | na 16 16 | 00648e | 68          |                 pla                  
1479:000 | DONE ins | na 16 16 | 00648f | 85 0c       |                 sta.d 00020c         
1480:000 | DONE ins | na 16 16 | 006491 | 68          |                 pla                  
1481:000 | DONE ins | na 16 16 | 006492 | 85 0a       |                 sta.d 00020a         
1482:000 | DONE ins | na 16 16 | 006494 | 68          |                 pla                  
1483:000 | DONE ins | na 16 16 | 006495 | 85 12       |                 sta.d 000212         
1484:000 | DONE wsp | na 16 16 |        |             |
1485:000 | DONE lbl | na 16 16 | 006497 |             | z_evaluate                           
1485:001 | DONE ins | na 16 16 | 006497 | 60          |                 rts                  
1486:000 | DONE wsp | na 16 16 |        |             |
1487:000 | DONE wsp | na 16 16 |        |             |
1488:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1489:000 | DONE cmt | na 16 16 |        |             | ; EXECUTE ( xt -- ) X bytes / X cycles
1490:000 | DONE cmt | na 16 16 |        |             | ; Run a word with help of its xt on the TOS
1491:000 | DONE wsp | na 16 16 |        |             |
1492:000 | DONE cmt | na 16 16 |        |             | ; Reserve three bytes for the jump - three in case we want to expand to the full
1493:000 | DONE cmt | na 16 16 |        |             | ; range
1494:000 | DONE cmt | na 16 16 |        |             | ; TODO move this to someplace that is assured to be RAM, not possibly ROM
1495:000 | DONE lbl | na 16 16 | 006498 |             | execute_ip                           
1495:001 | DONE dir | na 16 16 | 006498 | (3 bytes)   |         .byte 00, 00, 00             
1495:001 | DONE dir | na 16 16 |        |             |                 00 00 00                 --  . . .
1496:000 | DONE wsp | na 16 16 |        |             |
1497:000 | DONE lbl | na 16 16 | 00649b |             | xt_execute                           
1498:000 | DONE dir | na 16 16 |        |             |         .!a16                        
1499:000 | DONE dir | na 16 16 |        |             |         .!xy16                       
1500:000 | DONE cmt | na 16 16 |        |             | 		; Store the xt for later use and then drop it off the stack
1501:000 | DONE ins | na 16 16 | 00649b | 8c 98 64    |                 sty 006498           
1502:000 | DONE ins | na 16 16 | 00649e | b4 00       |                 ldy.dx 00            
1503:000 | DONE ins | na 16 16 | 0064a0 | e8          |                 inx                  
1504:000 | DONE ins | na 16 16 | 0064a1 | e8          |                 inx                  
1505:000 | DONE wsp | na 16 16 |        |             |
1506:000 | DONE cmt | na 16 16 |        |             |                 ; Only JMP has the addressing mode we need. All our Forth
1507:000 | DONE cmt | na 16 16 |        |             |                 ; words end with a RTS instruction, so they will take us back to
1508:000 | DONE cmt | na 16 16 |        |             |                 ; the original caller of this routine without us having to muck
1509:000 | DONE cmt | na 16 16 |        |             |                 ; about with the Return Stack.
1510:000 | DONE ins | na 16 16 | 0064a2 | 6c 98 64    |                 jmp.i 006498         JMP (EXECUTE_IP)
1511:000 | DONE wsp | na 16 16 |        |             |
1512:000 | DONE lbl | na 16 16 | 0064a5 |             | z_execute                            
1512:001 | DONE ins | na 16 16 | 0064a5 | ea          |                 nop                  Never reached, see if we need the NOP
1513:000 | DONE wsp | na 16 16 |        |             |
1514:000 | DONE wsp | na 16 16 |        |             |
1515:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1516:000 | DONE cmt | na 16 16 |        |             | ; FALSE ( -- f ) 7 bytes / 12 cycles
1517:000 | DONE cmt | na 16 16 |        |             | ; Pushes value $0000 for Forth true on Data Stack. This is the same code as for
1518:000 | DONE cmt | na 16 16 |        |             | ; ZERO, see there. Dictionary entry should have xt_zero/z_zero instead of
1519:000 | DONE cmt | na 16 16 |        |             | ; xt_false/z_false
1520:000 | DONE wsp | na 16 16 |        |             |
1521:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1522:000 | DONE cmt | na 16 16 |        |             | ; FIND-NAME ( addr u -- nt | 0 ) 91 bytes / X cycles
1523:000 | DONE cmt | na 16 16 |        |             | ; Given a string, find the Name Token (nt) of a word or return zero if the word
1524:000 | DONE cmt | na 16 16 |        |             | ; is not in the dictionary. We use this instead of ancient FIND to look up words
1525:000 | DONE cmt | na 16 16 |        |             | ; in the Dictionary passed by PARSE-NAME. Note this returns the nt, not the xt
1526:000 | DONE cmt | na 16 16 |        |             | ; of a word like FIND. To convert, use NAME>INT. This is a Gforth word. See
1527:000 | DONE cmt | na 16 16 |        |             | ; https://www.complang.tuwien.ac.at/forth/gforth/Docs-html/Name-token.html
1528:000 | DONE cmt | na 16 16 |        |             | ; FIND calls this word for the hard word
1529:000 | DONE lbl | na 16 16 | 0064a6 |             | xt_find-name                         
1530:000 | DONE cmt | na 16 16 |        |             |                 ; We abort when we get an empty string, that is, one with
1531:000 | DONE cmt | na 16 16 |        |             |                 ; a length of zero TOS. We could test for this, but it will
1532:000 | DONE cmt | na 16 16 |        |             |                 ; happen so rarely that the speed penalty is higher if we run
1533:000 | DONE cmt | na 16 16 |        |             |                 ; the test for every single call. Looking for an empty string
1534:000 | DONE cmt | na 16 16 |        |             |                 ; does force us to check the whole dictionary, though. The test
1535:000 | DONE cmt | na 16 16 |        |             |                 ; would be 3 bytes and 4 to 6 cycles longer:
1536:000 | DONE cmt | na 16 16 |        |             |                 ;       tya                     ; force flag check
1537:000 | DONE cmt | na 16 16 |        |             |                 ;       beq find-name_failure
1538:000 | DONE dir | na 16 16 |        |             |         .!a16                        
1539:000 | DONE dir | na 16 16 |        |             |         .!xy16                       
1540:000 | DONE cmt | na 16 16 |        |             |                 ; set up loop for the first time
1541:000 | DONE ins | na 16 16 | 0064a6 | 84 06       |                 sty.d 000206         length of mystery string in tmptos, Y now free
1542:000 | DONE wsp | na 16 16 |        |             |
1543:000 | DONE ins | na 16 16 | 0064a8 | a4 02       |                 ldy.d 000202         
1544:000 | DONE ins | na 16 16 | 0064aa | 84 16       |                 sty.d 000216         nt of first Dictionary word
1545:000 | DONE wsp | na 16 16 |        |             |
1546:000 | DONE ins | na 16 16 | 0064ac | b4 00       |                 ldy.dx 00            
1547:000 | DONE ins | na 16 16 | 0064ae | 84 18       |                 sty.d 000218         address of mystery string, was NOS
1548:000 | DONE wsp | na 16 16 |        |             |
1549:000 | DONE lbl | na 16 16 | 0064b0 |             | find-name_loop                       
1550:000 | DONE cmt | na 16 16 |        |             |                 ; First quick test: Are strings the same length?
1551:000 | DONE ins | na 16 16 | 0064b0 | b2 16       |                 lda.di 000216        LSB in first header word is length
1552:000 | DONE ins | na 16 16 | 0064b2 | 29 ff 00    |                 and.# 00ff           
1553:000 | DONE ins | na 16 16 | 0064b5 | c5 06       |                 cmp.d 000206         we test LSB
1554:000 | DONE cmt | na 16 16 |        |             |                 ; Most of the time, it will not be the same, so we save one
1555:000 | DONE cmt | na 16 16 |        |             |                 ; cycle pro loop if we only take the branch when they are the
1556:000 | DONE cmt | na 16 16 |        |             |                 ; same
1557:000 | DONE ins | na 16 16 | 0064b7 | f0 0c       |                 beq 0064c5           
1558:000 | DONE wsp | na 16 16 |        |             |
1559:000 | DONE lbl | na 16 16 | 0064b9 |             | find-name_next_entry                 
1560:000 | DONE cmt | na 16 16 |        |             |                 ; next header address is two bytes down
1561:000 | DONE ins | na 16 16 | 0064b9 | e6 16       |                 inc.d 000216         
1562:000 | DONE ins | na 16 16 | 0064bb | e6 16       |                 inc.d 000216         
1563:000 | DONE ins | na 16 16 | 0064bd | b2 16       |                 lda.di 000216        LDA (TMP1)
1564:000 | DONE wsp | na 16 16 |        |             |
1565:000 | DONE cmt | na 16 16 |        |             |                 ; a zero entry marks the end of the Dictionary
1566:000 | DONE ins | na 16 16 | 0064bf | f0 36       |                 beq 0064f7           
1567:000 | DONE wsp | na 16 16 |        |             |
1568:000 | DONE ins | na 16 16 | 0064c1 | 85 16       |                 sta.d 000216         new header
1569:000 | DONE ins | na 16 16 | 0064c3 | 80 eb       |                 bra 0064b0           
1570:000 | DONE wsp | na 16 16 |        |             |
1571:000 | DONE lbl | na 16 16 | 0064c5 |             | find-name_chars                      
1572:000 | DONE cmt | na 16 16 |        |             |                 ; Yes, same length, so we compare characters
1573:000 | DONE wsp | na 16 16 |        |             |
1574:000 | DONE cmt | na 16 16 |        |             |                 ; Switch A to 8 bit for this
1575:000 | DONE ins | na 16 16 | 0064c5 | e2 20       |                 sep 20               
1575:001 | DONE ctl | na  8 16 |        |             |         .!a8
1576:000 | DONE cmt | na  8 16 |        |             |                 ; Second quick test: Check first char, which is 8 bytes into the
1577:000 | DONE cmt | na  8 16 |        |             |                 ; header
1578:000 | DONE ins | na  8 16 | 0064c7 | a0 08 00    |                 ldy.# 0008           
1579:000 | DONE ins | na  8 16 | 0064ca | b1 16       |                 lda.diy 000216       LDA (TMP1),Y - first char of entry
1580:000 | DONE ins | na  8 16 | 0064cc | d2 18       |                 cmp.di 000218        CMP (TMP2) - first char of mystery string
1581:000 | DONE ins | na  8 16 | 0064ce | f0 04       |                 beq 0064d4           
1582:000 | DONE wsp | na  8 16 |        |             |
1583:000 | DONE lbl | na  8 16 | 0064d0 |             | find-name_char_nomatcnt_8            
1584:000 | DONE cmt | na  8 16 |        |             |                 ; First char is not the same, next entry
1585:000 | DONE ins | na  8 16 | 0064d0 | c2 20       |                 rep 20               
1585:001 | DONE ctl | na 16 16 |        |             |         .!a16
1586:000 | DONE ins | na 16 16 | 0064d2 | 80 e5       |                 bra 0064b9           
1587:000 | DONE wsp | na 16 16 |        |             |
1588:000 | DONE lbl | na 16 16 | 0064d4 |             | find-name_all_chars                  
1589:000 | DONE dir | na  8 16 |        |             |         .!a8                         
1590:000 | DONE cmt | na  8 16 |        |             |                 ; String length is the same, and the first character is the
1591:000 | DONE cmt | na  8 16 |        |             |                 ; same. If the word is only one character long, we're done
1592:000 | DONE ins | na  8 16 | 0064d4 | a4 06       |                 ldy.d 000206         
1593:000 | DONE ins | na  8 16 | 0064d6 | 88          |                 dey                  faster and shorter than CPY.# 01
1594:000 | DONE ins | na  8 16 | 0064d7 | f0 18       |                 beq 0064f1           
1595:000 | DONE wsp | na  8 16 |        |             |
1596:000 | DONE cmt | na  8 16 |        |             |                 ; No such luck: The strings are the same length and the first
1597:000 | DONE cmt | na  8 16 |        |             |                 ; char is the same, but the word is more than one char long. So
1598:000 | DONE cmt | na  8 16 |        |             |                 ; we suck it up and compare every single character. We go from
1599:000 | DONE cmt | na  8 16 |        |             |                 ; back to front, because words like CELLS and CELL+ would take
1600:000 | DONE cmt | na  8 16 |        |             |                 ; longer otherwise. We can also shorten the loop by one because
1601:000 | DONE cmt | na  8 16 |        |             |                 ; we've already compared the first char.
1602:000 | DONE wsp | na  8 16 |        |             |
1603:000 | DONE cmt | na  8 16 |        |             |                 ; Even worse, we have to add 8 bytes to address of Dictionary
1604:000 | DONE cmt | na  8 16 |        |             |                 ; string to allow testing with one loop. We need this like
1605:000 | DONE cmt | na  8 16 |        |             |                 ; a hole in the head because we just switched A to 8 bit.
1606:000 | DONE cmt | na  8 16 |        |             |                 ; However, staying with an 8-bit A is even slower.
1607:000 | DONE ins | na  8 16 | 0064d9 | c2 20       |                 rep 20               
1607:001 | DONE ctl | na 16 16 |        |             |         .!a16
1608:000 | DONE ins | na 16 16 | 0064db | a5 16       |                 lda.d 000216         address of Dictionary string
1609:000 | DONE ins | na 16 16 | 0064dd | 18          |                 clc                  
1610:000 | DONE ins | na 16 16 | 0064de | 69 08 00    |                 adc.# 0008           
1611:000 | DONE ins | na 16 16 | 0064e1 | 85 1a       |                 sta.d 00021a         
1612:000 | DONE ins | na 16 16 | 0064e3 | e2 20       |                 sep 20               
1612:001 | DONE ctl | na  8 16 |        |             |         .!a8
1613:000 | DONE ins | na  8 16 | 0064e5 | a4 06       |                 ldy.d 000206         get length of strings as loop index
1614:000 | DONE ins | na  8 16 | 0064e7 | 88          |                 dey                  first index is length minus 1
1615:000 | DONE wsp | na  8 16 |        |             |
1616:000 | DONE lbl | na  8 16 | 0064e8 |             | @                                    
1617:000 | DONE ins | na  8 16 | 0064e8 | b1 18       |                 lda.diy 000218       LDA (TMP2),Y - last char of mystery string
1618:000 | DONE ins | na  8 16 | 0064ea | d1 1a       |                 cmp.diy 00021a       CMP (TMP1),Y - last char of DP string
1619:000 | DONE ins | na  8 16 | 0064ec | d0 e2       |                 bne 0064d0           
1620:000 | DONE ins | na  8 16 | 0064ee | 88          |                 dey                  start of string (Y=0) was already tested
1621:000 | DONE ins | na  8 16 | 0064ef | d0 f7       |                 bne 0064e8           
1622:000 | DONE wsp | na  8 16 |        |             |
1623:000 | DONE lbl | na  8 16 | 0064f1 |             | find-name_success                    
1624:000 | DONE cmt | na  8 16 |        |             |                 ; If we reach here, the strings are the same and we have a match
1625:000 | DONE cmt | na  8 16 |        |             |                 ; We get here with an 8 bit A
1626:000 | DONE ins | na  8 16 | 0064f1 | c2 20       |                 rep 20               
1626:001 | DONE ctl | na 16 16 |        |             |         .!a16
1627:000 | DONE ins | na 16 16 | 0064f3 | a4 16       |                 ldy.d 000216         get the correct DP
1628:000 | DONE ins | na 16 16 | 0064f5 | 80 03       |                 bra 0064fa           
1629:000 | DONE wsp | na 16 16 |        |             |
1630:000 | DONE wsp | na 16 16 |        |             |
1631:000 | DONE lbl | na 16 16 | 0064f7 |             | find-name_failure_16                 
1632:000 | DONE cmt | na 16 16 |        |             |                 ; Word not found in Dictionary, return zero. Assumes A is 16
1633:000 | DONE cmt | na 16 16 |        |             |                 ; bit
1634:000 | DONE ins | na 16 16 | 0064f7 | a0 00 00    |                 ldy.# 0000           fall thru
1635:000 | DONE wsp | na 16 16 |        |             |
1636:000 | DONE lbl | na 16 16 | 0064fa |             | find-name_done                       
1637:000 | DONE ins | na 16 16 | 0064fa | e8          |                 inx                  drop old address (NIP)
1638:000 | DONE ins | na 16 16 | 0064fb | e8          |                 inx                  
1639:000 | DONE wsp | na 16 16 |        |             |
1640:000 | DONE lbl | na 16 16 | 0064fc |             | z_find-name                          
1640:001 | DONE ins | na 16 16 | 0064fc | 60          |                 rts                  
1641:000 | DONE wsp | na 16 16 |        |             |
1642:000 | DONE wsp | na 16 16 |        |             |
1643:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1644:000 | DONE cmt | na 16 16 |        |             | ; IMMEDIATE ( -- ) X bytes / X cycles
1645:000 | DONE cmt | na 16 16 |        |             | ; Mark the most recently defined word as IMMEDIATE. Will only affect the last
1646:000 | DONE cmt | na 16 16 |        |             | ; word in the Dictionary. If the words is still in ROM for some reason, this
1647:000 | DONE cmt | na 16 16 |        |             | ; will have no effect and will fail without an error message
1648:000 | DONE lbl | na 16 16 | 0064fd |             | xt_immediate                         
1649:000 | DONE dir | na 16 16 |        |             |         .!a16                        
1650:000 | DONE ins | na 16 16 | 0064fd | a9 02 00    |                 lda.# IM             Immediate flag
1651:000 | DONE ins | na 16 16 | 006500 | eb          |                 xba                  flags are MSB
1652:000 | DONE ins | na 16 16 | 006501 | 12 02       |                 ora.di 000202        ORA (DP)
1653:000 | DONE ins | na 16 16 | 006503 | 92 02       |                 sta.di 000202        
1654:000 | DONE wsp | na 16 16 |        |             |
1655:000 | DONE lbl | na 16 16 | 006505 |             | z_immediate                          
1655:001 | DONE ins | na 16 16 | 006505 | 60          |                 rts                  
1656:000 | DONE wsp | na 16 16 |        |             |
1657:000 | DONE wsp | na 16 16 |        |             |
1658:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1659:000 | DONE cmt | na 16 16 |        |             | ; INVERT ( n -- n ) 5 bytes / X cycles
1660:000 | DONE cmt | na 16 16 |        |             | ; Complement of TOS
1661:000 | DONE lbl | na 16 16 | 006506 |             | xt_invert                            
1662:000 | DONE dir | na 16 16 |        |             |         .!a16                        
1663:000 | DONE ins | na 16 16 | 006506 | 98          |                 tya                  
1664:000 | DONE ins | na 16 16 | 006507 | 49 ff ff    |                 eor.# 0ffff          
1665:000 | DONE ins | na 16 16 | 00650a | a8          |                 tay                  
1666:000 | DONE wsp | na 16 16 |        |             |
1667:000 | DONE lbl | na 16 16 | 00650b |             | z_invert                             
1667:001 | DONE ins | na 16 16 | 00650b | 60          |                 rts                  
1668:000 | DONE wsp | na 16 16 |        |             |
1669:000 | DONE wsp | na 16 16 |        |             |
1670:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1671:000 | DONE cmt | na 16 16 |        |             | ; HERE ( -- u ) 6 bytes / 13 cycles
1672:000 | DONE cmt | na 16 16 |        |             | ; Push Compiler Pointer address on the Data Stack
1673:000 | DONE lbl | na 16 16 | 00650c |             | xt_here                              
1674:000 | DONE dir | na 16 16 |        |             |         .!xy16                       
1675:000 | DONE ins | na 16 16 | 00650c | ca          |                 dex                  
1676:000 | DONE ins | na 16 16 | 00650d | ca          |                 dex                  
1677:000 | DONE ins | na 16 16 | 00650e | 94 00       |                 sty.dx 00            
1678:000 | DONE wsp | na 16 16 |        |             |
1679:000 | DONE ins | na 16 16 | 006510 | a4 00       |                 ldy.d 000200         
1680:000 | DONE wsp | na 16 16 |        |             |
1681:000 | DONE lbl | na 16 16 | 006512 |             | z_here                               
1681:001 | DONE ins | na 16 16 | 006512 | 60          |                 rts                  
1682:000 | DONE wsp | na 16 16 |        |             |
1683:000 | DONE wsp | na 16 16 |        |             |
1684:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1685:000 | DONE cmt | na 16 16 |        |             | ; HEX ( -- ) X bytes / X cycles
1686:000 | DONE cmt | na 16 16 |        |             | ; Change radix for number conversion to 16
1687:000 | DONE lbl | na 16 16 | 006513 |             | xt_hex                               
1688:000 | DONE dir | na 16 16 |        |             |         .!a16                        
1689:000 | DONE ins | na 16 16 | 006513 | a9 10 00    |                 lda.# 0010           
1690:000 | DONE ins | na 16 16 | 006516 | 85 1c       |                 sta.d 00021c         
1691:000 | DONE wsp | na 16 16 |        |             |
1692:000 | DONE lbl | na 16 16 | 006518 |             | z_hex                                
1692:001 | DONE ins | na 16 16 | 006518 | 60          |                 rts                  
1693:000 | DONE wsp | na 16 16 |        |             |
1694:000 | DONE wsp | na 16 16 |        |             |
1695:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1696:000 | DONE cmt | na 16 16 |        |             | ; LITERAL ( n -- ) X bytes / X cycles
1697:000 | DONE cmt | na 16 16 |        |             | ; Compile-only word to store TOS so that it is pushed on stack during runtime.
1698:000 | DONE cmt | na 16 16 |        |             | ; This is a immediate, compile-only word. Test it with  : AAA [ 1 ] LITERAL ;
1699:000 | DONE cmt | na 16 16 |        |             | ; for instance
1700:000 | DONE lbl | na 16 16 | 006519 |             | xt_literal                           
1701:000 | DONE cmt | na 16 16 |        |             |                 ; During runtime, we call the routine at the bottom by compiling
1702:000 | DONE cmt | na 16 16 |        |             |                 ; JSR LITERAL_RT. Note the cmpl_ routines use tmptos
1703:000 | DONE ins | na 16 16 | 006519 | f4 2b 65    |                 phe.# 00652b         PEA LITERAL_RT
1704:000 | DONE ins | na 16 16 | 00651c | 20 70 6c    |                 jsr 006c70           
1705:000 | DONE wsp | na 16 16 |        |             |
1706:000 | DONE cmt | na 16 16 |        |             |                 ; compile the value that is to be pushed to the Data Stack at
1707:000 | DONE cmt | na 16 16 |        |             |                 ; runtime. There is no "sty.di", so we have to do this the hard
1708:000 | DONE cmt | na 16 16 |        |             |                 ; way. This is basically , ("comma")
1709:000 | DONE ins | na 16 16 | 00651f | 98          |                 tya                  
1710:000 | DONE ins | na 16 16 | 006520 | 92 00       |                 sta.di 000200        
1711:000 | DONE ins | na 16 16 | 006522 | e6 00       |                 inc.d 000200         
1712:000 | DONE ins | na 16 16 | 006524 | e6 00       |                 inc.d 000200         
1713:000 | DONE wsp | na 16 16 |        |             |
1714:000 | DONE ins | na 16 16 | 006526 | b4 00       |                 ldy.dx 00            DROP
1715:000 | DONE ins | na 16 16 | 006528 | e8          |                 inx                  
1716:000 | DONE ins | na 16 16 | 006529 | e8          |                 inx                  
1717:000 | DONE wsp | na 16 16 |        |             |
1718:000 | DONE lbl | na 16 16 | 00652a |             | z_literal                            
1718:001 | DONE ins | na 16 16 | 00652a | 60          |                 rts                  
1719:000 | DONE wsp | na 16 16 |        |             |
1720:000 | DONE lbl | na 16 16 | 00652b |             | literal_rt                           
1721:000 | DONE cmt | na 16 16 |        |             |                 ; During runtime, we push the value following this word
1722:000 | DONE cmt | na 16 16 |        |             |                 ; back on the Data Stack. The subroutine jump that brought us
1723:000 | DONE cmt | na 16 16 |        |             |                 ; here put the address to return to on the Return Stack - this
1724:000 | DONE cmt | na 16 16 |        |             |                 ; points to the data we need to get
1725:000 | DONE wsp | na 16 16 |        |             |
1726:000 | DONE cmt | na 16 16 |        |             |                 ; Make room on Data Stack, Y now free to use
1727:000 | DONE ins | na 16 16 | 00652b | ca          |                 dex                  
1728:000 | DONE ins | na 16 16 | 00652c | ca          |                 dex                  
1729:000 | DONE ins | na 16 16 | 00652d | 94 00       |                 sty.dx 00            
1730:000 | DONE wsp | na 16 16 |        |             |
1731:000 | DONE cmt | na 16 16 |        |             |                 ; The 65816 stores (<RETURN-ADDRESS> - 1) on the Return Stack
1732:000 | DONE cmt | na 16 16 |        |             |                 ; so we have to manipulate the address
1733:000 | DONE ins | na 16 16 | 00652f | 7a          |                 ply                  
1734:000 | DONE ins | na 16 16 | 006530 | c8          |                 iny                  
1735:000 | DONE ins | na 16 16 | 006531 | b9 00 00    |                 lda.y 0000           LDA $0000,Y - get value after jump
1736:000 | DONE wsp | na 16 16 |        |             |
1737:000 | DONE ins | na 16 16 | 006534 | c8          |                 iny                  move return address past data and restore
1738:000 | DONE ins | na 16 16 | 006535 | 5a          |                 phy                  so we can get back home
1739:000 | DONE wsp | na 16 16 |        |             |
1740:000 | DONE ins | na 16 16 | 006536 | a8          |                 tay                  Value is now on the Data Stack ( -- n )
1741:000 | DONE wsp | na 16 16 |        |             |
1742:000 | DONE ins | na 16 16 | 006537 | 60          |                 rts                  
1743:000 | DONE wsp | na 16 16 |        |             |
1744:000 | DONE wsp | na 16 16 |        |             |
1745:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1746:000 | DONE cmt | na 16 16 |        |             | ; MAX ( n m -- n ) 18 bytes / X cycles
1747:000 | DONE cmt | na 16 16 |        |             | ; Compare TOS and NOS and keep which one is larger. Adapted from Lance A.
1748:000 | DONE cmt | na 16 16 |        |             | ; Leventhal "6502 Assembly Language Subroutines". Negative Flag indicates which
1749:000 | DONE cmt | na 16 16 |        |             | ; number is larger. See also http://6502.org/tutorials/compare_instructions.html
1750:000 | DONE cmt | na 16 16 |        |             | ; and http://www.righto.com/2012/12/the-6502-overflow-flag-explained.html
1751:000 | DONE lbl | na 16 16 | 006538 |             | xt_max                               
1752:000 | DONE ins | na 16 16 | 006538 | 98          |                 tya                  
1753:000 | DONE ins | na 16 16 | 006539 | d5 00       |                 cmp.dx 00            
1754:000 | DONE wsp | na 16 16 |        |             |
1755:000 | DONE cmt | na 16 16 |        |             |                 ; If they are the same, life is good. This step also sets the
1756:000 | DONE cmt | na 16 16 |        |             |                 ; Carry flag
1757:000 | DONE ins | na 16 16 | 00653b | f0 0b       |                 beq 006548           Faster than DROP because TOS is in Y
1758:000 | DONE wsp | na 16 16 |        |             |
1759:000 | DONE ins | na 16 16 | 00653d | f5 00       |                 sbc.dx 00            
1760:000 | DONE ins | na 16 16 | 00653f | 50 03       |                 bvc 006544           no overflow, skip ahead
1761:000 | DONE wsp | na 16 16 |        |             |
1762:000 | DONE cmt | na 16 16 |        |             |                 ; Deal with oveflow because we use signed numbers
1763:000 | DONE ins | na 16 16 | 006541 | 49 00 80    |                 eor.# 8000           compliment negative flag
1764:000 | DONE wsp | na 16 16 |        |             |
1765:000 | DONE lbl | na 16 16 | 006544 |             | max_no_ov                            
1766:000 | DONE ins | na 16 16 | 006544 | 10 02       |                 bpl 006548           keep TOS
1767:000 | DONE lbl | na 16 16 | 006546 |             | max_drop                             
1768:000 | DONE ins | na 16 16 | 006546 | b4 00       |                 ldy.dx 00            DROP so NOS is result
1769:000 | DONE lbl | na 16 16 | 006548 |             | max_nip                              
1770:000 | DONE ins | na 16 16 | 006548 | e8          |                 inx                  
1771:000 | DONE ins | na 16 16 | 006549 | e8          |                 inx                  
1772:000 | DONE wsp | na 16 16 |        |             |
1773:000 | DONE lbl | na 16 16 | 00654a |             | z_max                                
1773:001 | DONE ins | na 16 16 | 00654a | 60          |                 rts                  
1774:000 | DONE wsp | na 16 16 |        |             |
1775:000 | DONE wsp | na 16 16 |        |             |
1776:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1777:000 | DONE cmt | na 16 16 |        |             | ; MIN ( n m -- n ) 18 bytes / X cycles
1778:000 | DONE cmt | na 16 16 |        |             | ; Compare TOS and NOS and keep which one is smaller Adapted from Lance A.
1779:000 | DONE cmt | na 16 16 |        |             | ; Leventhal "6502 Assembly Language Subroutines". Negative Flag indicates which
1780:000 | DONE cmt | na 16 16 |        |             | ; number is larger. See also http://6502.org/tutorials/compare_instructions.html
1781:000 | DONE cmt | na 16 16 |        |             | ; and http://www.righto.com/2012/12/the-6502-overflow-flag-explained.html
1782:000 | DONE lbl | na 16 16 | 00654b |             | xt_min                               
1783:000 | DONE ins | na 16 16 | 00654b | 98          |                 tya                  
1784:000 | DONE ins | na 16 16 | 00654c | d5 00       |                 cmp.dx 00            
1785:000 | DONE wsp | na 16 16 |        |             |
1786:000 | DONE cmt | na 16 16 |        |             |                 ; If they are the same, life is good. This step also sets the
1787:000 | DONE cmt | na 16 16 |        |             |                 ; Carry flag
1788:000 | DONE ins | na 16 16 | 00654e | f0 0b       |                 beq 00655b           Faster than DROP because TOS is in Y
1789:000 | DONE wsp | na 16 16 |        |             |
1790:000 | DONE ins | na 16 16 | 006550 | f5 00       |                 sbc.dx 00            
1791:000 | DONE ins | na 16 16 | 006552 | 50 03       |                 bvc 006557           no overflow, skip ahead
1792:000 | DONE wsp | na 16 16 |        |             |
1793:000 | DONE cmt | na 16 16 |        |             |                 ; Deal with oveflow because we use signed numbers
1794:000 | DONE ins | na 16 16 | 006554 | 49 00 80    |                 eor.# 8000           compliment negative flag
1795:000 | DONE wsp | na 16 16 |        |             |
1796:000 | DONE lbl | na 16 16 | 006557 |             | min_no_ov                            
1797:000 | DONE ins | na 16 16 | 006557 | 30 02       |                 bmi 00655b           keep TOS
1798:000 | DONE lbl | na 16 16 | 006559 |             | min_drop                             
1799:000 | DONE ins | na 16 16 | 006559 | b4 00       |                 ldy.dx 00            DROP so NOS is result
1800:000 | DONE lbl | na 16 16 | 00655b |             | min_nip                              
1801:000 | DONE ins | na 16 16 | 00655b | e8          |                 inx                  
1802:000 | DONE ins | na 16 16 | 00655c | e8          |                 inx                  
1803:000 | DONE wsp | na 16 16 |        |             |
1804:000 | DONE lbl | na 16 16 | 00655d |             | z_min                                
1804:001 | DONE ins | na 16 16 | 00655d | 60          |                 rts                  
1805:000 | DONE wsp | na 16 16 |        |             |
1806:000 | DONE wsp | na 16 16 |        |             |
1807:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1808:000 | DONE cmt | na 16 16 |        |             | ; NAME>INT ( nt -- xt ) 4 bytes / 8 cycles
1809:000 | DONE cmt | na 16 16 |        |             | ; Given the Name Token (nt) of a word, return its Execute Token (xt)
1810:000 | DONE lbl | na 16 16 | 00655e |             | xt_name-int                          
1811:000 | DONE dir | na 16 16 |        |             |         .!a16                        
1812:000 | DONE dir | na 16 16 |        |             |         .!xy16                       
1813:000 | DONE cmt | na 16 16 |        |             | 		; The xt of a word beginns four bytes down from its nt
1814:000 | DONE ins | na 16 16 | 00655e | c8          |                 iny                  
1815:000 | DONE ins | na 16 16 | 00655f | c8          |                 iny                  
1816:000 | DONE ins | na 16 16 | 006560 | c8          |                 iny                  
1817:000 | DONE ins | na 16 16 | 006561 | c8          |                 iny                  
1818:000 | DONE ins | na 16 16 | 006562 | b9 00 00    |                 lda.y 0000           
1819:000 | DONE ins | na 16 16 | 006565 | a8          |                 tay                  
1820:000 | DONE wsp | na 16 16 |        |             |
1821:000 | DONE lbl | na 16 16 | 006566 |             | z_name-int                           
1821:001 | DONE ins | na 16 16 | 006566 | 60          |                 rts                  
1822:000 | DONE wsp | na 16 16 |        |             |
1823:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1824:000 | DONE cmt | na 16 16 |        |             | ; NAME>STRING ( nt -- addr u ) 16 bytes / X cycles
1825:000 | DONE cmt | na 16 16 |        |             | ; Given a name token (nt) of a word, return its string. This is a Gforth word
1826:000 | DONE cmt | na 16 16 |        |             | ; that works with the Dictionary header entries. It is not checked if nt is
1827:000 | DONE cmt | na 16 16 |        |             | ; a valid name token.
1828:000 | DONE lbl | na 16 16 | 006567 |             | xt_name-string                       
1829:000 | DONE dir | na 16 16 |        |             |         .!a16                        
1830:000 | DONE dir | na 16 16 |        |             |         .!xy16                       
1831:000 | DONE ins | na 16 16 | 006567 | ca          |                 dex                  move NOS down one
1832:000 | DONE ins | na 16 16 | 006568 | ca          |                 dex                  
1833:000 | DONE wsp | na 16 16 |        |             |
1834:000 | DONE cmt | na 16 16 |        |             |                 ; the name string of a word begins 8 bytes down from its nt,
1835:000 | DONE cmt | na 16 16 |        |             |                 ; which we have as TOS
1836:000 | DONE ins | na 16 16 | 006569 | 98          |                 tya                  
1837:000 | DONE ins | na 16 16 | 00656a | 18          |                 clc                  
1838:000 | DONE ins | na 16 16 | 00656b | 69 08 00    |                 adc.# 0008           
1839:000 | DONE ins | na 16 16 | 00656e | 95 00       |                 sta.dx 00            NOS
1840:000 | DONE wsp | na 16 16 |        |             |
1841:000 | DONE cmt | na 16 16 |        |             |                 ; the length of the name string is in the LSB of the first word
1842:000 | DONE cmt | na 16 16 |        |             |                 ; of the dictionary entry header (the name token)
1843:000 | DONE ins | na 16 16 | 006570 | b9 00 00    |                 lda.y 0000           LDA $0000,Y
1844:000 | DONE ins | na 16 16 | 006573 | 29 ff 00    |                 and.# 00ff           mask all but length byte
1845:000 | DONE ins | na 16 16 | 006576 | a8          |                 tay                  
1846:000 | DONE wsp | na 16 16 |        |             |
1847:000 | DONE lbl | na 16 16 | 006577 |             | z_name-string                        
1847:001 | DONE ins | na 16 16 | 006577 | 60          |                 rts                  
1848:000 | DONE wsp | na 16 16 |        |             |
1849:000 | DONE wsp | na 16 16 |        |             |
1850:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1851:000 | DONE cmt | na 16 16 |        |             | ; NEGATE ( n -- n ) 6 bytes / X cycles
1852:000 | DONE cmt | na 16 16 |        |             | ; Two's complement of TOS
1853:000 | DONE lbl | na 16 16 | 006578 |             | xt_negate                            
1854:000 | DONE ins | na 16 16 | 006578 | 98          |                 tya                  
1855:000 | DONE ins | na 16 16 | 006579 | 49 ff ff    |                 eor.# 0ffff          
1856:000 | DONE ins | na 16 16 | 00657c | 1a          |                 inc.a                
1857:000 | DONE ins | na 16 16 | 00657d | a8          |                 tay                  
1858:000 | DONE wsp | na 16 16 |        |             |
1859:000 | DONE lbl | na 16 16 | 00657e |             | z_negate                             
1859:001 | DONE ins | na 16 16 | 00657e | 60          |                 rts                  
1860:000 | DONE wsp | na 16 16 |        |             |
1861:000 | DONE wsp | na 16 16 |        |             |
1862:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1863:000 | DONE cmt | na 16 16 |        |             | ; NIP ( n m -- m ) 2 bytes / 4 cycles
1864:000 | DONE cmt | na 16 16 |        |             | ; Delete entry that is NOS
1865:000 | DONE lbl | na 16 16 | 00657f |             | xt_nip                               
1866:000 | DONE dir | na 16 16 |        |             |         .!xy16                       
1867:000 | DONE ins | na 16 16 | 00657f | e8          |                 inx                  
1868:000 | DONE ins | na 16 16 | 006580 | e8          |                 inx                  
1869:000 | DONE lbl | na 16 16 | 006581 |             | z_nip                                
1869:001 | DONE ins | na 16 16 | 006581 | 60          |                 rts                  
1870:000 | DONE wsp | na 16 16 |        |             |
1871:000 | DONE wsp | na 16 16 |        |             |
1872:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1873:000 | DONE cmt | na 16 16 |        |             | ; OR ( n m -- n ) 6 bytes / X cycles
1874:000 | DONE cmt | na 16 16 |        |             | ; Logical OR
1875:000 | DONE lbl | na 16 16 | 006582 |             | xt_or                                
1876:000 | DONE ins | na 16 16 | 006582 | 98          |                 tya                  
1877:000 | DONE ins | na 16 16 | 006583 | 15 00       |                 ora.dx 00            
1878:000 | DONE ins | na 16 16 | 006585 | a8          |                 tay                  
1879:000 | DONE wsp | na 16 16 |        |             |
1880:000 | DONE ins | na 16 16 | 006586 | e8          |                 inx                  
1881:000 | DONE ins | na 16 16 | 006587 | e8          |                 inx                  
1882:000 | DONE wsp | na 16 16 |        |             |
1883:000 | DONE lbl | na 16 16 | 006588 |             | z_or                                 
1883:001 | DONE ins | na 16 16 | 006588 | 60          |                 rts                  
1884:000 | DONE wsp | na 16 16 |        |             |
1885:000 | DONE wsp | na 16 16 |        |             |
1886:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1887:000 | DONE cmt | na 16 16 |        |             | ; OVER ( n m -- n m n )  6 bytes / 14 cycles
1888:000 | DONE cmt | na 16 16 |        |             | ; Push NOS on Data Stack
1889:000 | DONE lbl | na 16 16 | 006589 |             | xt_over                              
1890:000 | DONE ins | na 16 16 | 006589 | ca          |                 dex                  
1891:000 | DONE ins | na 16 16 | 00658a | ca          |                 dex                  
1892:000 | DONE ins | na 16 16 | 00658b | 94 00       |                 sty.dx 00            
1893:000 | DONE ins | na 16 16 | 00658d | b4 02       |                 ldy.dx 02            
1894:000 | DONE wsp | na 16 16 |        |             |
1895:000 | DONE lbl | na 16 16 | 00658f |             | z_over                               
1895:001 | DONE ins | na 16 16 | 00658f | 60          |                 rts                  
1896:000 | DONE wsp | na 16 16 |        |             |
1897:000 | DONE wsp | na 16 16 |        |             |
1898:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1899:000 | DONE cmt | na 16 16 |        |             | ; PAD ( -- addr ) 11 bytes / X cycles
1900:000 | DONE cmt | na 16 16 |        |             | ; Return address to a temporary area in free memory for user. Must be at least
1901:000 | DONE cmt | na 16 16 |        |             | ; 84 bytes in size (says ANSI). It is located relative to the compile area
1902:000 | DONE cmt | na 16 16 |        |             | ; pointer (CP) and therefore varies in position. This area is reserved for the
1903:000 | DONE cmt | na 16 16 |        |             | ; user and not used by the system
1904:000 | DONE lbl | na 16 16 | 006590 |             | xt_pad                               
1905:000 | DONE dir | na 16 16 |        |             |         .!a16                        
1906:000 | DONE ins | na 16 16 | 006590 | ca          |                 dex                  
1907:000 | DONE ins | na 16 16 | 006591 | ca          |                 dex                  
1908:000 | DONE ins | na 16 16 | 006592 | 94 00       |                 sty.dx 00            
1909:000 | DONE wsp | na 16 16 |        |             |
1910:000 | DONE ins | na 16 16 | 006594 | a5 00       |                 lda.d 000200         
1911:000 | DONE ins | na 16 16 | 006596 | 18          |                 clc                  
1912:000 | DONE ins | na 16 16 | 006597 | 69 7f 00    |                 adc.# 00007f         
1913:000 | DONE ins | na 16 16 | 00659a | a8          |                 tay                  
1914:000 | DONE wsp | na 16 16 |        |             |
1915:000 | DONE lbl | na 16 16 | 00659b |             | z_pad                                
1915:001 | DONE ins | na 16 16 | 00659b | 60          |                 rts                  
1916:000 | DONE wsp | na 16 16 |        |             |
1917:000 | DONE wsp | na 16 16 |        |             |
1918:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1919:000 | DONE cmt | na 16 16 |        |             | ; PAGE ( -- ) X bytes / X cycles
1920:000 | DONE cmt | na 16 16 |        |             | ; Clear the screen on vt-100 terminals by sending the code "ESC[2J". This is
1921:000 | DONE cmt | na 16 16 |        |             | ; only useful in interactive scenarios so we don't worry about speed
1922:000 | DONE cmt | na 16 16 |        |             | ; TODO rewrite with EMIT
1923:000 | DONE lbl | na 16 16 | 00659c |             | xt_page                              
1924:000 | DONE ins | na 16 16 | 00659c | a9 3a 6f    |                 lda.# 006f3a         
1925:000 | DONE ins | na 16 16 | 00659f | 20 97 6c    |                 jsr 006c97           
1926:000 | DONE wsp | na 16 16 |        |             |
1927:000 | DONE cmt | na 16 16 |        |             |                 ; In theory, this should have moved the cursor to the top left
1928:000 | DONE cmt | na 16 16 |        |             |                 ; corner ("home"), but this doesn't seem to work in practice.
1929:000 | DONE cmt | na 16 16 |        |             |                 ; So we send "ESC[H" as well.
1930:000 | DONE ins | na 16 16 | 0065a2 | a9 3f 6f    |                 lda.# 006f3f         
1931:000 | DONE ins | na 16 16 | 0065a5 | 20 97 6c    |                 jsr 006c97           
1932:000 | DONE wsp | na 16 16 |        |             |
1933:000 | DONE lbl | na 16 16 | 0065a8 |             | z_page                               
1933:001 | DONE ins | na 16 16 | 0065a8 | 60          |                 rts                  
1934:000 | DONE wsp | na 16 16 |        |             |
1935:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1936:000 | DONE cmt | na 16 16 |        |             | ; PARSE-NAME ( "name" -- addr u ) 41+ bytes / X cycles
1937:000 | DONE cmt | na 16 16 |        |             | ; Find next word in input string, skipping leading spaces. This is a special
1938:000 | DONE cmt | na 16 16 |        |             | ; form of PARSE and drops through to that word. See PARSE for more detail. We
1939:000 | DONE cmt | na 16 16 |        |             | ; use this word internally for the interpreter because it is a lot easier to use
1940:000 | DONE cmt | na 16 16 |        |             | ; http://forth-standard.org/standard/core/PARSE-NAME has a Forth implementation
1941:000 | DONE lbl | na 16 16 | 0065a9 |             | xt_parse-name                        
1942:000 | DONE dir | na 16 16 |        |             |         .!a16                        
1943:000 | DONE dir | na 16 16 |        |             |         .!xy16                       
1944:000 | DONE cmt | na 16 16 |        |             |                 ; skip leading spaces, changing >IN, then place SPACE
1945:000 | DONE cmt | na 16 16 |        |             |                 ; character on data stack for PARSE
1946:000 | DONE ins | na 16 16 | 0065a9 | 5a          |                 phy                  save TOS for later use
1947:000 | DONE ins | na 16 16 | 0065aa | a4 12       |                 ldy.d 000212         >IN
1948:000 | DONE ins | na 16 16 | 0065ac | e2 20       |                 sep 20               
1948:001 | DONE ctl | na  8 16 |        |             |         .!a8
1949:000 | DONE lbl | na  8 16 | 0065ae |             | parse-name_loop                      
1950:000 | DONE ins | na  8 16 | 0065ae | c4 0e       |                 cpy.d 00020e         end of line?
1951:000 | DONE ins | na  8 16 | 0065b0 | f0 09       |                 beq 0065bb           
1952:000 | DONE wsp | na  8 16 |        |             |
1953:000 | DONE ins | na  8 16 | 0065b2 | b1 0c       |                 lda.diy 00020c       LDA (CIB),Y
1954:000 | DONE ins | na  8 16 | 0065b4 | c9 20       |                 cmp.# AscSP          
1955:000 | DONE ins | na  8 16 | 0065b6 | d0 17       |                 bne 0065cf           
1956:000 | DONE ins | na  8 16 | 0065b8 | c8          |                 iny                  
1957:000 | DONE ins | na  8 16 | 0065b9 | 80 f3       |                 bra 0065ae           
1958:000 | DONE wsp | na  8 16 |        |             |
1959:000 | DONE lbl | na  8 16 | 0065bb |             | parse-name_empty_line                
1960:000 | DONE ins | na  8 16 | 0065bb | c2 20       |                 rep 20               
1960:001 | DONE ctl | na 16 16 |        |             |         .!a16
1961:000 | DONE cmt | na 16 16 |        |             |                 ; The Gforth documentation does not say what address is returned
1962:000 | DONE cmt | na 16 16 |        |             |                 ; if a string with only spaces is returned. Experiments with
1963:000 | DONE cmt | na 16 16 |        |             |                 ; the word  : PNT ( "name" -- ) PARSE-NAME SWAP U. U. TYPE ;
1964:000 | DONE cmt | na 16 16 |        |             |                 ; show that it returns the address of the last space in the
1965:000 | DONE cmt | na 16 16 |        |             |                 ; input, which is cib+ciblen. So we do that as well.
1966:000 | DONE ins | na 16 16 | 0065bd | ca          |                 dex                  
1967:000 | DONE ins | na 16 16 | 0065be | ca          |                 dex                  
1968:000 | DONE ins | na 16 16 | 0065bf | ca          |                 dex                  
1969:000 | DONE ins | na 16 16 | 0065c0 | ca          |                 dex                  
1970:000 | DONE wsp | na 16 16 |        |             |
1971:000 | DONE ins | na 16 16 | 0065c1 | 7a          |                 ply                  restore old TOS as 3OS
1972:000 | DONE ins | na 16 16 | 0065c2 | 94 02       |                 sty.dx 02            
1973:000 | DONE wsp | na 16 16 |        |             |
1974:000 | DONE ins | na 16 16 | 0065c4 | a5 0c       |                 lda.d 00020c         
1975:000 | DONE ins | na 16 16 | 0065c6 | 18          |                 clc                  
1976:000 | DONE ins | na 16 16 | 0065c7 | 65 0e       |                 adc.d 00020e         
1977:000 | DONE ins | na 16 16 | 0065c9 | 95 00       |                 sta.dx 00            Address as NOS
1978:000 | DONE wsp | na 16 16 |        |             |
1979:000 | DONE ins | na 16 16 | 0065cb | a0 00 00    |                 ldy.# 0000           TOS
1980:000 | DONE wsp | na 16 16 |        |             |
1981:000 | DONE ins | na 16 16 | 0065ce | 60          |                 rts                  don't have to go through PARSE
1982:000 | DONE wsp | na 16 16 |        |             |
1983:000 | DONE lbl | na 16 16 | 0065cf |             | parse-name_found                     
1984:000 | DONE dir | na 16 16 |        |             |         .!xy16                       
1985:000 | DONE ins | na 16 16 | 0065cf | c2 20       |                 rep 20               
1985:001 | DONE ctl | na 16 16 |        |             |         .!a16
1986:000 | DONE ins | na 16 16 | 0065d1 | 84 12       |                 sty.d 000212         new >IN
1987:000 | DONE wsp | na 16 16 |        |             |
1988:000 | DONE ins | na 16 16 | 0065d3 | 7a          |                 ply                  recover TOS
1989:000 | DONE ins | na 16 16 | 0065d4 | ca          |                 dex                  
1990:000 | DONE ins | na 16 16 | 0065d5 | ca          |                 dex                  
1991:000 | DONE ins | na 16 16 | 0065d6 | 94 00       |                 sty.dx 00            
1992:000 | DONE wsp | na 16 16 |        |             |
1993:000 | DONE ins | na 16 16 | 0065d8 | a0 20 00    |                 ldy.# AscSP          put space on TOS for PARSE
1994:000 | DONE wsp | na 16 16 |        |             |
1995:000 | DONE cmt | na 16 16 |        |             |                 ; fall thru to PARSE
1996:000 | DONE wsp | na 16 16 |        |             |
1997:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1998:000 | DONE cmt | na 16 16 |        |             | ; PARSE ( c "name" -- addr u ) 45 bytes / X+ cycles
1999:000 | DONE cmt | na 16 16 |        |             | ; Find word in input string delimited by character given Do not skip leading
2000:000 | DONE cmt | na 16 16 |        |             | ; delimiters, this is an important difference to PARSE-NAME. PARSE and
2001:000 | DONE cmt | na 16 16 |        |             | ; PARSE-NAME replace WORD in modern systems. See the ANSI documentation at
2002:000 | DONE cmt | na 16 16 |        |             | ; http://www.forth200x.org/documents/html3/rationale.html#rat:core:PARSE
2003:000 | DONE cmt | na 16 16 |        |             | ; PARSE-NAME drops through to here
2004:000 | DONE cmt | na 16 16 |        |             | ;
2005:000 | DONE cmt | na 16 16 |        |             | ;    cib   cib+toin    cib+ciblen
2006:000 | DONE cmt | na 16 16 |        |             | ;     v       v             v
2007:000 | DONE cmt | na 16 16 |        |             | ;     |#####################|              Length of found string:
2008:000 | DONE cmt | na 16 16 |        |             | ;                                          ciblen - toin
2009:000 | DONE cmt | na 16 16 |        |             | ;     +------>|  toin (>IN)
2010:000 | DONE cmt | na 16 16 |        |             | ;     +-------------------->|  ciblen
2011:000 | DONE cmt | na 16 16 |        |             | ;
2012:000 | DONE cmt | na 16 16 |        |             | ; The input string is stored starting at the address in the Current Input Buffer
2013:000 | DONE cmt | na 16 16 |        |             | ; (CIB), the length of which is in CIBLEN. While searching for the delimiter,
2014:000 | DONE cmt | na 16 16 |        |             | ; TOIN (>IN) points to the where we currently are. Since PARSE does not skip
2015:000 | DONE cmt | na 16 16 |        |             | ; leading delimiters, we assume we are on a useful string.
2016:000 | DONE lbl | na 16 16 | 0065db |             | xt_parse                             
2017:000 | DONE dir | na 16 16 |        |             |         .!a16                        
2018:000 | DONE dir | na 16 16 |        |             |         .!xy16                       
2019:000 | DONE ins | na 16 16 | 0065db | 84 16       |                 sty.d 000216         save delimiter, char is LSB
2020:000 | DONE wsp | na 16 16 |        |             |
2021:000 | DONE cmt | na 16 16 |        |             |                 ; save beginning of new word (cib+toin) to NOS. Don't need to
2022:000 | DONE cmt | na 16 16 |        |             |                 ; worry about TOS because Y gets clobbered anyway before we
2023:000 | DONE cmt | na 16 16 |        |             |                 ; return
2024:000 | DONE ins | na 16 16 | 0065dd | a5 12       |                 lda.d 000212         
2025:000 | DONE ins | na 16 16 | 0065df | 85 1a       |                 sta.d 00021a         save >IN for later length calculation
2026:000 | DONE ins | na 16 16 | 0065e1 | 18          |                 clc                  
2027:000 | DONE ins | na 16 16 | 0065e2 | 65 0c       |                 adc.d 00020c         
2028:000 | DONE wsp | na 16 16 |        |             |
2029:000 | DONE ins | na 16 16 | 0065e4 | ca          |                 dex                  save addr as NOS
2030:000 | DONE ins | na 16 16 | 0065e5 | ca          |                 dex                  
2031:000 | DONE ins | na 16 16 | 0065e6 | 95 00       |                 sta.dx 00            
2032:000 | DONE wsp | na 16 16 |        |             |
2033:000 | DONE ins | na 16 16 | 0065e8 | 64 18       |                 stz.d 000218         offset for EOL/char found adjustment of >IN
2034:000 | DONE wsp | na 16 16 |        |             |
2035:000 | DONE cmt | na 16 16 |        |             |                 ; prepare loop using Y as index
2036:000 | DONE ins | na 16 16 | 0065ea | a4 12       |                 ldy.d 000212         
2037:000 | DONE ins | na 16 16 | 0065ec | e2 20       |                 sep 20               
2037:001 | DONE ctl | na  8 16 |        |             |         .!a8
2038:000 | DONE wsp | na  8 16 |        |             |
2039:000 | DONE lbl | na  8 16 | 0065ee |             | parse_loop                           
2040:000 | DONE ins | na  8 16 | 0065ee | c4 0e       |                 cpy.d 00020e         check for EOL first
2041:000 | DONE ins | na  8 16 | 0065f0 | f0 0d       |                 beq 0065ff           
2042:000 | DONE wsp | na  8 16 |        |             |
2043:000 | DONE ins | na  8 16 | 0065f2 | b1 0c       |                 lda.diy 00020c       LDA (CIB),Y
2044:000 | DONE ins | na  8 16 | 0065f4 | c5 16       |                 cmp.d 000216         found delimiter?
2045:000 | DONE ins | na  8 16 | 0065f6 | f0 03       |                 beq 0065fb           
2046:000 | DONE ins | na  8 16 | 0065f8 | c8          |                 iny                  
2047:000 | DONE ins | na  8 16 | 0065f9 | 80 f3       |                 bra 0065ee           
2048:000 | DONE wsp | na  8 16 |        |             |
2049:000 | DONE lbl | na  8 16 | 0065fb |             | parse_found_delimiter                
2050:000 | DONE cmt | na  8 16 |        |             |                 ; If we haven't reached the end of the line, but found
2051:000 | DONE cmt | na  8 16 |        |             |                 ; a delimiter, we want >IN to point to the next character after
2052:000 | DONE cmt | na  8 16 |        |             |                 ; the delimiter, not the delimiter itself. This is what the
2053:000 | DONE cmt | na  8 16 |        |             |                 ; offset is for
2054:000 | DONE ins | na  8 16 | 0065fb | c2 20       |                 rep 20               
2054:001 | DONE ctl | na 16 16 |        |             |         .!a16
2055:000 | DONE ins | na 16 16 | 0065fd | e6 18       |                 inc.d 000218         
2056:000 | DONE wsp | na 16 16 |        |             |
2057:000 | DONE lbl | na 16 16 | 0065ff |             | parse_reached_eol                    
2058:000 | DONE cmt | na 16 16 |        |             |                 ; calculate length of string found (see ascii drawing)
2059:000 | DONE dir | na 16 16 |        |             |         .!xy16                       
2060:000 | DONE ins | na 16 16 | 0065ff | c2 20       |                 rep 20               
2060:001 | DONE ctl | na 16 16 |        |             |         .!a16
2061:000 | DONE ins | na 16 16 | 006601 | 98          |                 tya                  
2062:000 | DONE ins | na 16 16 | 006602 | 38          |                 sec                  
2063:000 | DONE ins | na 16 16 | 006603 | e5 1a       |                 sbc.d 00021a         original value for >IN / index of first char
2064:000 | DONE ins | na 16 16 | 006605 | 48          |                 pha                  save so we can manipulate Y
2065:000 | DONE wsp | na 16 16 |        |             |
2066:000 | DONE cmt | na 16 16 |        |             |                 ; calculate new >IN
2067:000 | DONE ins | na 16 16 | 006606 | 98          |                 tya                  
2068:000 | DONE ins | na 16 16 | 006607 | 18          |                 clc                  
2069:000 | DONE ins | na 16 16 | 006608 | 65 18       |                 adc.d 000218         offset for EOL vs found delimiter
2070:000 | DONE ins | na 16 16 | 00660a | 85 12       |                 sta.d 000212         
2071:000 | DONE wsp | na 16 16 |        |             |
2072:000 | DONE ins | na 16 16 | 00660c | 7a          |                 ply                  length of string in TOS
2073:000 | DONE wsp | na 16 16 |        |             |
2074:000 | DONE lbl | na 16 16 | 00660d |             | z_parse-name                         
2075:000 | DONE lbl | na 16 16 | 00660d |             | z_parse                              
2075:001 | DONE ins | na 16 16 | 00660d | 60          |                 rts                  
2076:000 | DONE wsp | na 16 16 |        |             |
2077:000 | DONE wsp | na 16 16 |        |             |
2078:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
2079:000 | DONE cmt | na 16 16 |        |             | ; POSTPONE ( -- ) X bytes / X cycles
2080:000 | DONE cmt | na 16 16 |        |             | ; Add the compilation behavior of a word to a new word at compile time. If the
2081:000 | DONE cmt | na 16 16 |        |             | ; word that follows it is immediate, include it so that it will be compiled when
2082:000 | DONE cmt | na 16 16 |        |             | ; the word being defined is itself used for a new word. Tricky, but very useful.
2083:000 | DONE cmt | na 16 16 |        |             | ; Because POSTPONE expects a word (not an xt) in the input stream (not on the
2084:000 | DONE cmt | na 16 16 |        |             | ; Data Stack). This means we cannot build words with "jsr xt_postpone, jsr
2085:000 | DONE cmt | na 16 16 |        |             | ; <word>" directly. This word uses tmp1
2086:000 | DONE lbl | na 16 16 | 00660e |             | xt_postpone                          
2087:000 | DONE cmt | na 16 16 |        |             |                 ; get name from string
2088:000 | DONE ins | na 16 16 | 00660e | 20 a9 65    |                 jsr 0065a9           ( addr n )
2089:000 | DONE wsp | na 16 16 |        |             |
2090:000 | DONE cmt | na 16 16 |        |             |                 ; if there is no word in stream, complain and abort
2091:000 | DONE ins | na 16 16 | 006611 | d0 06       |                 bne 006619           
2092:000 | DONE ins | na 16 16 | 006613 | a9 8d 6e    |                 lda.# 006e8d         
2093:000 | DONE ins | na 16 16 | 006616 | 4c 91 6c    |                 jmp 006c91           
2094:000 | DONE wsp | na 16 16 |        |             |
2095:000 | DONE lbl | na 16 16 | 006619 |             | pp_got_word                          
2096:000 | DONE cmt | na 16 16 |        |             |                 ; convert to lower
2097:000 | DONE cmt | na 16 16 |        |             |                 ; TODO move this to FIND-NAME
2098:000 | DONE ins | na 16 16 | 006619 | 20 ca 6c    |                 jsr 006cca           
2099:000 | DONE wsp | na 16 16 |        |             |
2100:000 | DONE ins | na 16 16 | 00661c | 20 a6 64    |                 jsr 0064a6           ( nt | 0 )
2101:000 | DONE wsp | na 16 16 |        |             |
2102:000 | DONE cmt | na 16 16 |        |             |                 ; if word is not in Dictionary, complain and abort
2103:000 | DONE ins | na 16 16 | 00661f | d0 03       |                 bne 006624           
2104:000 | DONE ins | na 16 16 | 006621 | a9 2a 6f    |                 lda.# 006f2a         
2105:000 | DONE wsp | na 16 16 |        |             |
2106:000 | DONE lbl | na 16 16 | 006624 |             | pp_got_nt                            
2107:000 | DONE cmt | na 16 16 |        |             |                 ; Keep nt safe for later use
2108:000 | DONE ins | na 16 16 | 006624 | 84 16       |                 sty.d 000216         
2109:000 | DONE wsp | na 16 16 |        |             |
2110:000 | DONE cmt | na 16 16 |        |             |                 ; We need the xt instead of the nt for the actual compiling
2111:000 | DONE ins | na 16 16 | 006626 | 20 5e 65    |                 jsr 00655e           ( xt )
2112:000 | DONE wsp | na 16 16 |        |             |
2113:000 | DONE cmt | na 16 16 |        |             |                 ; See if this is an immediate word. This is easier with nt than
2114:000 | DONE cmt | na 16 16 |        |             |                 ; with xt
2115:000 | DONE ins | na 16 16 | 006629 | b2 16       |                 lda.di 000216        LDA (TMP1) - get status byte of word
2116:000 | DONE ins | na 16 16 | 00662b | eb          |                 xba                  flags are MSB
2117:000 | DONE ins | na 16 16 | 00662c | 29 02 00    |                 and.# IM             mask everything but Immediate bit
2118:000 | DONE ins | na 16 16 | 00662f | f0 03       |                 beq 006634           
2119:000 | DONE wsp | na 16 16 |        |             |
2120:000 | DONE cmt | na 16 16 |        |             |                 ; The word is immediate, so instead of executing it right now,
2121:000 | DONE cmt | na 16 16 |        |             |                 ; we compile it. xt is on the stack, so this is simple. The RTS
2122:000 | DONE cmt | na 16 16 |        |             |                 ; of COMPILE, takes us back to the original caller
2123:000 | DONE ins | na 16 16 | 006631 | 4c 4a 63    |                 jmp 00634a           JSR/RTS
2124:000 | DONE wsp | na 16 16 |        |             |
2125:000 | DONE lbl | na 16 16 | 006634 |             | pp_not_immediate                     
2126:000 | DONE cmt | na 16 16 |        |             |                 ; This is not an immediate word, so we enact "deffered
2127:000 | DONE cmt | na 16 16 |        |             |                 ; compilation" by including ' <NAME> COMPILE, which we do by
2128:000 | DONE cmt | na 16 16 |        |             |                 ; compiling the run-time routine of LITERAL, the xt itself, and
2129:000 | DONE cmt | na 16 16 |        |             |                 ; a subroutine jump to COMPILE,
2130:000 | DONE ins | na 16 16 | 006634 | f4 2b 65    |                 phe.# 00652b         PEA LITERAL_RT
2131:000 | DONE ins | na 16 16 | 006637 | 20 70 6c    |                 jsr 006c70           
2132:000 | DONE wsp | na 16 16 |        |             |
2133:000 | DONE cmt | na 16 16 |        |             |                 ; The xt is TOS. We can't use COMPILE, here because it might
2134:000 | DONE cmt | na 16 16 |        |             |                 ; decided to do something silly like compile it as a native word
2135:000 | DONE cmt | na 16 16 |        |             |                 ; and ruin everything
2136:000 | DONE ins | na 16 16 | 00663a | 20 53 61    |                 jsr 006153           
2137:000 | DONE wsp | na 16 16 |        |             |
2138:000 | DONE cmt | na 16 16 |        |             |                 ; compile COMPILE, - it's RTS takes us back to original caller
2139:000 | DONE ins | na 16 16 | 00663d | f4 4a 63    |                 phe.# 00634a         
2140:000 | DONE ins | na 16 16 | 006640 | 4c 70 6c    |                 jmp 006c70           JSR/RTS
2141:000 | DONE wsp | na 16 16 |        |             |
2142:000 | DONE lbl | na 16 16 | 006643 |             | z_postpone                           ; never reached
2143:000 | DONE wsp | na 16 16 |        |             |
2144:000 | DONE wsp | na 16 16 |        |             |
2145:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
2146:000 | DONE cmt | na 16 16 |        |             | ; REFILL ( -- f ) X bytes / X cycles
2147:000 | DONE cmt | na 16 16 |        |             | ; "Attempt to fill the input buffer from the input source, returning a true flag
2148:000 | DONE cmt | na 16 16 |        |             | ; if successful. When the input source is the user input device, attempt to
2149:000 | DONE cmt | na 16 16 |        |             | ; receive input into the terminal input buffer. If successful, make the result
2150:000 | DONE cmt | na 16 16 |        |             | ; the input buffer, set >IN to zero, and return true. Receipt of a line
2151:000 | DONE cmt | na 16 16 |        |             | ; containing no characters is considered successful. If there is no input
2152:000 | DONE cmt | na 16 16 |        |             | ; available from the current input source, return false. When the input source
2153:000 | DONE cmt | na 16 16 |        |             | ; is a string from EVALUATE, return false and perform no other action."
2154:000 | DONE cmt | na 16 16 |        |             | ; See https://www.complang.tuwien.ac.at/forth/gforth/Docs-html/The-Input-Stream.html
2155:000 | DONE cmt | na 16 16 |        |             | ; and Conklin & Rather p. 156
2156:000 | DONE lbl | na 16 16 | 006643 |             | xt_refill                            
2157:000 | DONE dir | na 16 16 |        |             |         .!a16                        
2158:000 | DONE dir | na 16 16 |        |             |         .!xy16                       
2159:000 | DONE cmt | na 16 16 |        |             |                 ; We handle buffer switches here so that regardless of input
2160:000 | DONE cmt | na 16 16 |        |             |                 ; source, we have access to the previous input. This is not in
2161:000 | DONE cmt | na 16 16 |        |             |                 ; the ANSI specification in any way.
2162:000 | DONE ins | na 16 16 | 006643 | a5 0c       |                 lda.d 00020c         
2163:000 | DONE ins | na 16 16 | 006645 | 49 00 01    |                 eor.# 0100           flip 07d00 / 07c00
2164:000 | DONE ins | na 16 16 | 006648 | 85 0c       |                 sta.d 00020c         
2165:000 | DONE wsp | na 16 16 |        |             |
2166:000 | DONE ins | na 16 16 | 00664a | a5 0e       |                 lda.d 00020e         current length is now previous length
2167:000 | DONE ins | na 16 16 | 00664c | 85 10       |                 sta.d 000210         
2168:000 | DONE wsp | na 16 16 |        |             |
2169:000 | DONE cmt | na 16 16 |        |             |                 ; Get input source from SOURCE-ID. We don't have blocks in this
2170:000 | DONE cmt | na 16 16 |        |             |                 ; version, or else we would have to check BLK first. This is an
2171:000 | DONE cmt | na 16 16 |        |             |                 ; optimized version of a subroutine jump to SOURCE-ID
2172:000 | DONE ins | na 16 16 | 00664e | a5 0a       |                 lda.d 00020a         
2173:000 | DONE ins | na 16 16 | 006650 | d0 14       |                 bne 006666           
2174:000 | DONE wsp | na 16 16 |        |             |
2175:000 | DONE cmt | na 16 16 |        |             |                 ; SOURCE-ID of zero means we're getting stuff from the keyboard
2176:000 | DONE cmt | na 16 16 |        |             |                 ; with ACCEPT.
2177:000 | DONE ins | na 16 16 | 006652 | ca          |                 dex                  push Data Stack down twice
2178:000 | DONE ins | na 16 16 | 006653 | ca          |                 dex                  
2179:000 | DONE ins | na 16 16 | 006654 | 94 00       |                 sty.dx 00            
2180:000 | DONE wsp | na 16 16 |        |             |
2181:000 | DONE ins | na 16 16 | 006656 | a5 0c       |                 lda.d 00020c         address of current input buffer NOS
2182:000 | DONE ins | na 16 16 | 006658 | ca          |                 dex                  
2183:000 | DONE ins | na 16 16 | 006659 | ca          |                 dex                  
2184:000 | DONE ins | na 16 16 | 00665a | 95 00       |                 sta.dx 00            
2185:000 | DONE wsp | na 16 16 |        |             |
2186:000 | DONE ins | na 16 16 | 00665c | a0 ff 00    |                 ldy.# 0000ff         
2187:000 | DONE wsp | na 16 16 |        |             |
2188:000 | DONE ins | na 16 16 | 00665f | 20 30 62    |                 jsr 006230           ( addr n1 -- n2)
2189:000 | DONE wsp | na 16 16 |        |             |
2190:000 | DONE cmt | na 16 16 |        |             |                 ; ACCEPT returns the number of characters accepted, but we don't
2191:000 | DONE cmt | na 16 16 |        |             |                 ; need them. We just overwrite TOS this with the flag
2192:000 | DONE ins | na 16 16 | 006662 | a0 ff ff    |                 ldy.# 0ffff          
2193:000 | DONE wsp | na 16 16 |        |             |
2194:000 | DONE ins | na 16 16 | 006665 | 60          |                 rts                  
2195:000 | DONE wsp | na 16 16 |        |             |
2196:000 | DONE lbl | na 16 16 | 006666 |             | refill_src_not_kbd                   
2197:000 | DONE cmt | na 16 16 |        |             |                 ; If SOURCE-ID doesn't return a zero, it must be a string in
2198:000 | DONE cmt | na 16 16 |        |             |                 ; memory or a file (remember, no blocks in this version)
2199:000 | DONE ins | na 16 16 | 006666 | 1a          |                 inc.a                
2200:000 | DONE ins | na 16 16 | 006667 | d0 06       |                 bne 00666f           
2201:000 | DONE wsp | na 16 16 |        |             |
2202:000 | DONE cmt | na 16 16 |        |             |                 ; Simply return FALSE flag as per specification
2203:000 | DONE ins | na 16 16 | 006669 | ca          |                 dex                  
2204:000 | DONE ins | na 16 16 | 00666a | ca          |                 dex                  
2205:000 | DONE ins | na 16 16 | 00666b | 94 00       |                 sty.dx 00            
2206:000 | DONE ins | na 16 16 | 00666d | a8          |                 tay                  
2207:000 | DONE wsp | na 16 16 |        |             |
2208:000 | DONE ins | na 16 16 | 00666e | 60          |                 rts                  
2209:000 | DONE wsp | na 16 16 |        |             |
2210:000 | DONE lbl | na 16 16 | 00666f |             | refill_source_is_not_string          
2211:000 | DONE cmt | na 16 16 |        |             |                 ; Since we don't have blocks, this must mean that we are trying
2212:000 | DONE cmt | na 16 16 |        |             |                 ; to read from a file. However, we don't have files yet, so we
2213:000 | DONE cmt | na 16 16 |        |             |                 ; report an error and jump to ABORT.
2214:000 | DONE ins | na 16 16 | 00666f | a9 e2 6e    |                 lda.# 006ee2         
2215:000 | DONE ins | na 16 16 | 006672 | 4c 91 6c    |                 jmp 006c91           
2216:000 | DONE wsp | na 16 16 |        |             |
2217:000 | DONE lbl | na 16 16 | 006675 |             | z_refill                             
2217:001 | DONE ins | na 16 16 | 006675 | 60          |                 rts                  dummy for compiling
2218:000 | DONE wsp | na 16 16 |        |             |
2219:000 | DONE wsp | na 16 16 |        |             |
2220:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
2221:000 | DONE cmt | na 16 16 |        |             | ; ROT ( a b c -- b c a ) X bytes / X cycles
2222:000 | DONE cmt | na 16 16 |        |             | ; Rotate the top three entries downwards (third entry becomes first)
2223:000 | DONE cmt | na 16 16 |        |             | ; Remember this with the "R" for "revolution": The bottom entry becomes the top.
2224:000 | DONE lbl | na 16 16 | 006676 |             | xt_rot                               
2225:000 | DONE dir | na 16 16 |        |             |         .!a16                        
2226:000 | DONE dir | na 16 16 |        |             |         .!xy16                       
2227:000 | DONE ins | na 16 16 | 006676 | b5 00       |                 lda.dx 00            save b
2228:000 | DONE ins | na 16 16 | 006678 | 94 00       |                 sty.dx 00            move c to NOS
2229:000 | DONE ins | na 16 16 | 00667a | b4 02       |                 ldy.dx 02            move a to TOS
2230:000 | DONE ins | na 16 16 | 00667c | 95 02       |                 sta.dx 02            save b as 3OS
2231:000 | DONE wsp | na 16 16 |        |             |
2232:000 | DONE lbl | na 16 16 | 00667e |             | z_rot                                
2232:001 | DONE ins | na 16 16 | 00667e | 60          |                 rts                  
2233:000 | DONE wsp | na 16 16 |        |             |
2234:000 | DONE wsp | na 16 16 |        |             |
2235:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
2236:000 | DONE cmt | na 16 16 |        |             | ; S" "SQUOTE" ( "string" -- addr u ) X bytes / X cycles
2237:000 | DONE cmt | na 16 16 |        |             | ; Store address and length of string given, returning ( addr u ). ANSI core
2238:000 | DONE cmt | na 16 16 |        |             | ; claims this is compile-only, but the file set expands it to be interpreted, so
2239:000 | DONE cmt | na 16 16 |        |             | ; it is a state-sensitive word, which are evil. This can also be realized as
2240:000 | DONE cmt | na 16 16 |        |             | ; : S" [CHAR] " PARSE POSTPONE SLITERAL ; IMMEDIATE  but it is used so much we
2241:000 | DONE cmt | na 16 16 |        |             | ; want it in code
2242:000 | DONE lbl | na 16 16 | 00667f |             | xt_squote                            
2243:000 | DONE cmt | na 16 16 |        |             |                 ; we use PARSE to find the end of the sting. If the string is
2244:000 | DONE cmt | na 16 16 |        |             |                 ; empty, we don't complain, following Gforth's behavior
2245:000 | DONE ins | na 16 16 | 00667f | ca          |                 dex                  
2246:000 | DONE ins | na 16 16 | 006680 | ca          |                 dex                  
2247:000 | DONE ins | na 16 16 | 006681 | 94 00       |                 sty.dx 00            
2248:000 | DONE wsp | na 16 16 |        |             |
2249:000 | DONE ins | na 16 16 | 006683 | a0 22 00    |                 ldy.# 0022           ASCII for " in hex
2250:000 | DONE ins | na 16 16 | 006686 | 20 db 65    |                 jsr 0065db           Returns ( addr u ) of string
2251:000 | DONE wsp | na 16 16 |        |             |
2252:000 | DONE cmt | na 16 16 |        |             |                 ; What happens now depends on the state. If we are compiling, we
2253:000 | DONE cmt | na 16 16 |        |             |                 ; include a subroutine jump to SLITERAL to save the string. If
2254:000 | DONE cmt | na 16 16 |        |             |                 ; we are interpreting, we're done
2255:000 | DONE ins | na 16 16 | 006689 | a5 14       |                 lda.d 000214         
2256:000 | DONE ins | na 16 16 | 00668b | f0 03       |                 beq 006690           if we're interpreting, we're done
2257:000 | DONE wsp | na 16 16 |        |             |
2258:000 | DONE cmt | na 16 16 |        |             |                 ; We're compiling, so we need SLITERAL. We use it's RTS while
2259:000 | DONE cmt | na 16 16 |        |             |                 ; we're at it
2260:000 | DONE ins | na 16 16 | 00668d | 4c 91 66    |                 jmp 006691           JSR/RTS
2261:000 | DONE wsp | na 16 16 |        |             |
2262:000 | DONE lbl | na 16 16 | 006690 |             | z_squote                             
2262:001 | DONE ins | na 16 16 | 006690 | 60          |                 rts                  
2263:000 | DONE wsp | na 16 16 |        |             |
2264:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
2265:000 | DONE cmt | na 16 16 |        |             | ; SLITERAL ( addr u -- ) ( -- addr u ) X bytes / X cycles
2266:000 | DONE cmt | na 16 16 |        |             | ; At compile time, store string, at runtime, return address and length of string
2267:000 | DONE cmt | na 16 16 |        |             | ; on the Data Stack. Used for S" among other things. This routine uses tmp1,
2268:000 | DONE cmt | na 16 16 |        |             | ; tmp2
2269:000 | DONE lbl | na 16 16 | 006691 |             | xt_sliteral                          
2270:000 | DONE dir | na 16 16 |        |             |         .!a16                        
2271:000 | DONE cmt | na 16 16 |        |             |                 ; We can't assume that ( addr u ) of the current string is in
2272:000 | DONE cmt | na 16 16 |        |             |                 ; a stable area, so we first have to move them to safety. Since
2273:000 | DONE cmt | na 16 16 |        |             |                 ; CP points to where the interpreter expects to be able to
2274:000 | DONE cmt | na 16 16 |        |             |                 ; continue in the code, we have to jump over the string. We use
2275:000 | DONE cmt | na 16 16 |        |             |                 ; JMP instead of BRA so we can use longer strings
2276:000 | DONE ins | na 16 16 | 006691 | b5 00       |                 lda.dx 00            Address of string is NOS
2277:000 | DONE ins | na 16 16 | 006693 | 85 16       |                 sta.d 000216         
2278:000 | DONE ins | na 16 16 | 006695 | 84 18       |                 sty.d 000218         keep copy of string length
2279:000 | DONE wsp | na 16 16 |        |             |
2280:000 | DONE ins | na 16 16 | 006697 | e2 20       |                 sep 20               
2280:001 | DONE ctl | na  8 16 |        |             |         .!a8
2281:000 | DONE ins | na  8 16 | 006699 | a9 4c       |                 lda.# 04c            opcode for JMP
2282:000 | DONE ins | na  8 16 | 00669b | 92 00       |                 sta.di 000200        STA (CP)
2283:000 | DONE ins | na  8 16 | 00669d | c2 20       |                 rep 20               
2283:001 | DONE ctl | na 16 16 |        |             |         .!a16
2284:000 | DONE ins | na 16 16 | 00669f | e6 00       |                 inc.d 000200         
2285:000 | DONE wsp | na 16 16 |        |             |
2286:000 | DONE cmt | na 16 16 |        |             |                 ; Our jump target is CP + 2 (for the length of the jump
2287:000 | DONE cmt | na 16 16 |        |             |                 ; instruction itself ) + the length of the string
2288:000 | DONE ins | na 16 16 | 0066a1 | a5 18       |                 lda.d 000218         string length
2289:000 | DONE ins | na 16 16 | 0066a3 | 1a          |                 inc.a                
2290:000 | DONE ins | na 16 16 | 0066a4 | 1a          |                 inc.a                
2291:000 | DONE wsp | na 16 16 |        |             |
2292:000 | DONE ins | na 16 16 | 0066a5 | 18          |                 clc                  
2293:000 | DONE ins | na 16 16 | 0066a6 | 65 00       |                 adc.d 000200         current address
2294:000 | DONE ins | na 16 16 | 0066a8 | 92 00       |                 sta.di 000200        store jump target
2295:000 | DONE wsp | na 16 16 |        |             |
2296:000 | DONE cmt | na 16 16 |        |             |                 ; update CP to move past JMP instruction
2297:000 | DONE ins | na 16 16 | 0066aa | e6 00       |                 inc.d 000200         
2298:000 | DONE ins | na 16 16 | 0066ac | e6 00       |                 inc.d 000200         
2299:000 | DONE wsp | na 16 16 |        |             |
2300:000 | DONE cmt | na 16 16 |        |             |                 ; now we can safely copy the code
2301:000 | DONE ins | na 16 16 | 0066ae | 88          |                 dey                  last offset is one less than length
2302:000 | DONE ins | na 16 16 | 0066af | e2 20       |                 sep 20               
2302:001 | DONE ctl | na  8 16 |        |             |         .!a8
2303:000 | DONE lbl | na  8 16 | 0066b1 |             | sl_loop                              
2304:000 | DONE ins | na  8 16 | 0066b1 | b1 16       |                 lda.diy 000216       LDA (TMP1),Y
2305:000 | DONE ins | na  8 16 | 0066b3 | 91 00       |                 sta.diy 000200       STA (CP),Y
2306:000 | DONE ins | na  8 16 | 0066b5 | 88          |                 dey                  
2307:000 | DONE ins | na  8 16 | 0066b6 | 10 f9       |                 bpl 0066b1           
2308:000 | DONE wsp | na  8 16 |        |             |
2309:000 | DONE ins | na  8 16 | 0066b8 | c2 20       |                 rep 20               
2309:001 | DONE ctl | na 16 16 |        |             |         .!a16
2310:000 | DONE cmt | na 16 16 |        |             |                 ; keep old CP as new address of string
2311:000 | DONE ins | na 16 16 | 0066ba | a5 00       |                 lda.d 000200         
2312:000 | DONE ins | na 16 16 | 0066bc | 85 16       |                 sta.d 000216         overwrites original address
2313:000 | DONE wsp | na 16 16 |        |             |
2314:000 | DONE cmt | na 16 16 |        |             |                 ; update CP
2315:000 | DONE ins | na 16 16 | 0066be | 18          |                 clc                  
2316:000 | DONE ins | na 16 16 | 0066bf | 65 18       |                 adc.d 000218         length of string
2317:000 | DONE ins | na 16 16 | 0066c1 | 85 00       |                 sta.d 000200         
2318:000 | DONE wsp | na 16 16 |        |             |
2319:000 | DONE cmt | na 16 16 |        |             |                 ; Compile a subroutine jump to the runtime of SLITERAL that
2320:000 | DONE cmt | na 16 16 |        |             |                 ; pushes the new ( addr u ) pair to the Data Stack. When we're
2321:000 | DONE cmt | na 16 16 |        |             |                 ; done, the code will look like this:
2322:000 | DONE cmt | na 16 16 |        |             |                 ;
2323:000 | DONE cmt | na 16 16 |        |             |                 ;       jsr sliteral_rt
2324:000 | DONE cmt | na 16 16 |        |             |                 ;       <string address>
2325:000 | DONE cmt | na 16 16 |        |             |                 ;       <string length>
2326:000 | DONE cmt | na 16 16 |        |             |                 ;
2327:000 | DONE cmt | na 16 16 |        |             |                 ; This means we'll have to adjust the return address for two
2328:000 | DONE cmt | na 16 16 |        |             |                 ; cells, not just one
2329:000 | DONE ins | na 16 16 | 0066c3 | f4 dc 66    |                 phe.# 0066dc         
2330:000 | DONE ins | na 16 16 | 0066c6 | 20 70 6c    |                 jsr 006c70           
2331:000 | DONE wsp | na 16 16 |        |             |
2332:000 | DONE cmt | na 16 16 |        |             |                 ; We want to have the addr end up as NOS and the length as TOS,
2333:000 | DONE cmt | na 16 16 |        |             |                 ; so we store the address first
2334:000 | DONE ins | na 16 16 | 0066c9 | a5 16       |                 lda.d 000216         new address of string
2335:000 | DONE ins | na 16 16 | 0066cb | 48          |                 pha                  
2336:000 | DONE ins | na 16 16 | 0066cc | 20 6b 6c    |                 jsr 006c6b           
2337:000 | DONE wsp | na 16 16 |        |             |
2338:000 | DONE ins | na 16 16 | 0066cf | a5 18       |                 lda.d 000218         
2339:000 | DONE ins | na 16 16 | 0066d1 | 48          |                 pha                  
2340:000 | DONE ins | na 16 16 | 0066d2 | 20 6b 6c    |                 jsr 006c6b           
2341:000 | DONE wsp | na 16 16 |        |             |
2342:000 | DONE cmt | na 16 16 |        |             |                 ; all done, clean up and leave
2343:000 | DONE ins | na 16 16 | 0066d5 | b4 02       |                 ldy.dx 02            2DROP
2344:000 | DONE ins | na 16 16 | 0066d7 | e8          |                 inx                  
2345:000 | DONE ins | na 16 16 | 0066d8 | e8          |                 inx                  
2346:000 | DONE ins | na 16 16 | 0066d9 | e8          |                 inx                  
2347:000 | DONE ins | na 16 16 | 0066da | e8          |                 inx                  
2348:000 | DONE wsp | na 16 16 |        |             |
2349:000 | DONE lbl | na 16 16 | 0066db |             | z_sliteral                           
2349:001 | DONE ins | na 16 16 | 0066db | 60          |                 rts                  
2350:000 | DONE wsp | na 16 16 |        |             |
2351:000 | DONE lbl | na 16 16 | 0066dc |             | sliteral_rt                          
2352:000 | DONE cmt | na 16 16 |        |             |                 ; Run time behaviour of SLITERAL: Push ( addr u ) of string to
2353:000 | DONE cmt | na 16 16 |        |             |                 ; the Data Stack. We arrive here with the return address as the
2354:000 | DONE cmt | na 16 16 |        |             |                 ; top of Return Stack, which points to the address of the string
2355:000 | DONE wsp | na 16 16 |        |             |
2356:000 | DONE cmt | na 16 16 |        |             |                 ; Make room on stack, which also frees Y for other use
2357:000 | DONE ins | na 16 16 | 0066dc | ca          |                 dex                  
2358:000 | DONE ins | na 16 16 | 0066dd | ca          |                 dex                  
2359:000 | DONE ins | na 16 16 | 0066de | ca          |                 dex                  
2360:000 | DONE ins | na 16 16 | 0066df | ca          |                 dex                  
2361:000 | DONE ins | na 16 16 | 0066e0 | 94 02       |                 sty.dx 02            
2362:000 | DONE wsp | na 16 16 |        |             |
2363:000 | DONE cmt | na 16 16 |        |             |                 ; Get the address of the string address off the stack and
2364:000 | DONE cmt | na 16 16 |        |             |                 ; increase by one because of the RTS mechanics
2365:000 | DONE ins | na 16 16 | 0066e2 | 7a          |                 ply                  
2366:000 | DONE ins | na 16 16 | 0066e3 | c8          |                 iny                  
2367:000 | DONE wsp | na 16 16 |        |             |
2368:000 | DONE ins | na 16 16 | 0066e4 | b9 00 00    |                 lda.y 0000           LDA $0000,Y
2369:000 | DONE ins | na 16 16 | 0066e7 | 95 00       |                 sta.dx 00            save string address as NOS
2370:000 | DONE ins | na 16 16 | 0066e9 | c8          |                 iny                  
2371:000 | DONE ins | na 16 16 | 0066ea | c8          |                 iny                  
2372:000 | DONE ins | na 16 16 | 0066eb | b9 00 00    |                 lda.y 0000           get length of string, will be TOS ...
2373:000 | DONE wsp | na 16 16 |        |             |
2374:000 | DONE ins | na 16 16 | 0066ee | c8          |                 iny                  ... first, though, repair return jump
2375:000 | DONE ins | na 16 16 | 0066ef | 5a          |                 phy                  
2376:000 | DONE wsp | na 16 16 |        |             |
2377:000 | DONE ins | na 16 16 | 0066f0 | a8          |                 tay                  TOS is now length of string
2378:000 | DONE wsp | na 16 16 |        |             |
2379:000 | DONE ins | na 16 16 | 0066f1 | 60          |                 rts                  
2380:000 | DONE wsp | na 16 16 |        |             |
2381:000 | DONE wsp | na 16 16 |        |             |
2382:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
2383:000 | DONE cmt | na 16 16 |        |             | ; SOURCE ( -- addr u ) 12 bytes / X cycles
2384:000 | DONE cmt | na 16 16 |        |             | ; Return the address and size of current input buffer. Replaces TIB and #TIB in
2385:000 | DONE cmt | na 16 16 |        |             | ; ANSI Forth
2386:000 | DONE wsp | na 16 16 |        |             |
2387:000 | DONE lbl | na 16 16 | 0066f2 |             | xt_source                            
2388:000 | DONE ins | na 16 16 | 0066f2 | ca          |                 dex                  make room on Data Stack
2389:000 | DONE ins | na 16 16 | 0066f3 | ca          |                 dex                  
2390:000 | DONE ins | na 16 16 | 0066f4 | ca          |                 dex                  
2391:000 | DONE ins | na 16 16 | 0066f5 | ca          |                 dex                  
2392:000 | DONE ins | na 16 16 | 0066f6 | 94 02       |                 sty.dx 02            
2393:000 | DONE wsp | na 16 16 |        |             |
2394:000 | DONE ins | na 16 16 | 0066f8 | a5 0c       |                 lda.d 00020c         address of current input buffer as NOS
2395:000 | DONE ins | na 16 16 | 0066fa | 95 00       |                 sta.dx 00            
2396:000 | DONE wsp | na 16 16 |        |             |
2397:000 | DONE ins | na 16 16 | 0066fc | a4 0e       |                 ldy.d 00020e         length of current input buffer as TOS
2398:000 | DONE wsp | na 16 16 |        |             |
2399:000 | DONE lbl | na 16 16 | 0066fe |             | z_source                             
2399:001 | DONE ins | na 16 16 | 0066fe | 60          |                 rts                  
2400:000 | DONE wsp | na 16 16 |        |             |
2401:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
2402:000 | DONE cmt | na 16 16 |        |             | ; SOURCE-ID ( -- n ) 6 bytes / 13 cycles
2403:000 | DONE cmt | na 16 16 |        |             | ; Identify the input source unless it is a block (s. Conklin & Rather p. 156).
2404:000 | DONE cmt | na 16 16 |        |             | ; Since we don't have blocks (yet), this will give the input source: 0 is
2405:000 | DONE cmt | na 16 16 |        |             | ; keyboard, -1 (0ffff) is character string, and a text file gives the fileid.
2406:000 | DONE lbl | na 16 16 | 0066ff |             | xt_source-id                         
2407:000 | DONE dir | na 16 16 |        |             |         .!xy16                       
2408:000 | DONE ins | na 16 16 | 0066ff | ca          |                 dex                  
2409:000 | DONE ins | na 16 16 | 006700 | ca          |                 dex                  
2410:000 | DONE ins | na 16 16 | 006701 | 94 00       |                 sty.dx 00            
2411:000 | DONE ins | na 16 16 | 006703 | a4 0a       |                 ldy.d 00020a         
2412:000 | DONE wsp | na 16 16 |        |             |
2413:000 | DONE lbl | na 16 16 | 006705 |             | z_source-id                          
2413:001 | DONE ins | na 16 16 | 006705 | 60          |                 rts                  
2414:000 | DONE wsp | na 16 16 |        |             |
2415:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
2416:000 | DONE cmt | na 16 16 |        |             | ; SPACE ( -- ) X bytes / X cycles
2417:000 | DONE cmt | na 16 16 |        |             | ; Print one ASCII space character
2418:000 | DONE cmt | na 16 16 |        |             | ; TODO change to call EMIT
2419:000 | DONE lbl | na 16 16 | 006706 |             | xt_space                             
2420:000 | DONE ins | na 16 16 | 006706 | a9 20 00    |                 lda.# AscSP          
2421:000 | DONE ins | na 16 16 | 006709 | 20 36 60    |                 jsr 006036           
2422:000 | DONE dir | na 16 16 |        |             |         .!a16                        
2423:000 | DONE wsp | na 16 16 |        |             |
2424:000 | DONE lbl | na 16 16 | 00670c |             | z_space                              
2424:001 | DONE ins | na 16 16 | 00670c | 60          |                 rts                  
2425:000 | DONE wsp | na 16 16 |        |             |
2426:000 | DONE wsp | na 16 16 |        |             |
2427:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
2428:000 | DONE cmt | na 16 16 |        |             | ; SPACES ( u -- ) 12 bytes / X cycles
2429:000 | DONE cmt | na 16 16 |        |             | ; Print u spaces. Calls SPACE, because this is probably interactive and humans
2430:000 | DONE cmt | na 16 16 |        |             | ; are slow enough we don't have to care about speed.
2431:000 | DONE lbl | na 16 16 | 00670d |             | xt_spaces                            
2432:000 | DONE dir | na 16 16 |        |             |         .!a16                        
2433:000 | DONE dir | na 16 16 |        |             |         .!xy16                       
2434:000 | DONE lbl | na 16 16 | 00670d |             | @                                    
2435:000 | DONE ins | na 16 16 | 00670d | 88          |                 dey                  this also handles case u=0
2436:000 | DONE ins | na 16 16 | 00670e | 30 05       |                 bmi 006715           
2437:000 | DONE wsp | na 16 16 |        |             |
2438:000 | DONE ins | na 16 16 | 006710 | 20 06 67    |                 jsr 006706           
2439:000 | DONE ins | na 16 16 | 006713 | 80 f8       |                 bra 00670d           
2440:000 | DONE wsp | na 16 16 |        |             |
2441:000 | DONE lbl | na 16 16 | 006715 |             | spaces_done                          
2442:000 | DONE ins | na 16 16 | 006715 | b4 00       |                 ldy.dx 00            DROP
2443:000 | DONE ins | na 16 16 | 006717 | e8          |                 inx                  
2444:000 | DONE ins | na 16 16 | 006718 | e8          |                 inx                  
2445:000 | DONE wsp | na 16 16 |        |             |
2446:000 | DONE lbl | na 16 16 | 006719 |             | z_spaces                             
2446:001 | DONE ins | na 16 16 | 006719 | 60          |                 rts                  
2447:000 | DONE wsp | na 16 16 |        |             |
2448:000 | DONE wsp | na 16 16 |        |             |
2449:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
2450:000 | DONE cmt | na 16 16 |        |             | ; STATE ( -- addr ) 7 bytes / 12 cycles
2451:000 | DONE cmt | na 16 16 |        |             | ; Return the address of a cell containing the compilation-state flag. STATE
2452:000 | DONE cmt | na 16 16 |        |             | ; is true when in compilation state, false otherwise. STATE should not be
2453:000 | DONE cmt | na 16 16 |        |             | ; changed directly by the user; see
2454:000 | DONE cmt | na 16 16 |        |             | ; http://forth.sourceforge.net/standard/dpans/dpans6.htm#6.1.2250
2455:000 | DONE lbl | na 16 16 | 00671a |             | xt_state                             
2456:000 | DONE dir | na 16 16 |        |             |         .!xy16                       
2457:000 | DONE ins | na 16 16 | 00671a | ca          |                 dex                  
2458:000 | DONE ins | na 16 16 | 00671b | ca          |                 dex                  
2459:000 | DONE ins | na 16 16 | 00671c | 94 00       |                 sty.dx 00            
2460:000 | DONE ins | na 16 16 | 00671e | a0 14 02    |                 ldy.# 000214         
2461:000 | DONE wsp | na 16 16 |        |             |
2462:000 | DONE lbl | na 16 16 | 006721 |             | z_state                              
2462:001 | DONE ins | na 16 16 | 006721 | 60          |                 rts                  
2463:000 | DONE wsp | na 16 16 |        |             |
2464:000 | DONE wsp | na 16 16 |        |             |
2465:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
2466:000 | DONE cmt | na 16 16 |        |             | ; SWAP ( n m -- m n ) 5 bytes / 12 cycles
2467:000 | DONE cmt | na 16 16 |        |             | ; Exchange TOS with NOS. We don't check if there are enough elements on the Data
2468:000 | DONE cmt | na 16 16 |        |             | ; Stack; underflow errors will go undetected and return garbage.
2469:000 | DONE lbl | na 16 16 | 006722 |             | xt_swap                              
2470:000 | DONE dir | na 16 16 |        |             |         .!a16                        
2471:000 | DONE dir | na 16 16 |        |             |         .!xy16                       
2472:000 | DONE ins | na 16 16 | 006722 | b5 00       |                 lda.dx 00            
2473:000 | DONE ins | na 16 16 | 006724 | 94 00       |                 sty.dx 00            
2474:000 | DONE ins | na 16 16 | 006726 | a8          |                 tay                  
2475:000 | DONE wsp | na 16 16 |        |             |
2476:000 | DONE lbl | na 16 16 | 006727 |             | z_swap                               
2476:001 | DONE ins | na 16 16 | 006727 | 60          |                 rts                  
2477:000 | DONE wsp | na 16 16 |        |             |
2478:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
2479:000 | DONE cmt | na 16 16 |        |             | ; TRUE ( -- f ) 7 bytes / 12 cycles
2480:000 | DONE cmt | na 16 16 |        |             | ; Pushes value $FFFF for Forth true on Data Stack
2481:000 | DONE lbl | na 16 16 | 006728 |             | xt_true                              
2482:000 | DONE dir | na 16 16 |        |             |         .!a16                        
2483:000 | DONE dir | na 16 16 |        |             |         .!xy16                       
2484:000 | DONE ins | na 16 16 | 006728 | ca          |                 dex                  
2485:000 | DONE ins | na 16 16 | 006729 | ca          |                 dex                  
2486:000 | DONE ins | na 16 16 | 00672a | 94 00       |                 sty.dx 00            
2487:000 | DONE ins | na 16 16 | 00672c | a0 ff ff    |                 ldy.# 0ffff          
2488:000 | DONE wsp | na 16 16 |        |             |
2489:000 | DONE lbl | na 16 16 | 00672f |             | z_true                               
2489:001 | DONE ins | na 16 16 | 00672f | 60          |                 rts                  
2490:000 | DONE wsp | na 16 16 |        |             |
2491:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
2492:000 | DONE cmt | na 16 16 |        |             | ; TUCK ( n m -- m n m ) 8 bytes / 19 cycles
2493:000 | DONE cmt | na 16 16 |        |             | ; Insert TOS below NOS. We do not check if there are enough elements on the Data
2494:000 | DONE cmt | na 16 16 |        |             | ; Stack, underflow will go undetected and return garbage.
2495:000 | DONE lbl | na 16 16 | 006730 |             | xt_tuck                              
2496:000 | DONE dir | na 16 16 |        |             |         .!a16                        
2497:000 | DONE dir | na 16 16 |        |             |         .!xy16                       
2498:000 | DONE ins | na 16 16 | 006730 | ca          |                 dex                  
2499:000 | DONE ins | na 16 16 | 006731 | ca          |                 dex                  
2500:000 | DONE ins | na 16 16 | 006732 | b5 02       |                 lda.dx 2             
2501:000 | DONE ins | na 16 16 | 006734 | 95 00       |                 sta.dx 0             
2502:000 | DONE ins | na 16 16 | 006736 | 94 02       |                 sty.dx 2             
2503:000 | DONE wsp | na 16 16 |        |             |
2504:000 | DONE lbl | na 16 16 | 006738 |             | z_tuck                               
2504:001 | DONE ins | na 16 16 | 006738 | 60          |                 rts                  
2505:000 | DONE wsp | na 16 16 |        |             |
2506:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
2507:000 | DONE cmt | na 16 16 |        |             | ; TYPE ( addr u -- ) 23+ bytes / X cycles
2508:000 | DONE cmt | na 16 16 |        |             | ; Print character string if u is not 0. We restrict all calls to put_chr and
2509:000 | DONE cmt | na 16 16 |        |             | ; get_chr to make porting easier.  We call put_chr here directly instead of
2510:000 | DONE cmt | na 16 16 |        |             | ; going through EMIT because EMIT will later have a PAUSE statement for
2511:000 | DONE cmt | na 16 16 |        |             | ; multitasking and we probably don't want to PAUSE after every character.
2512:000 | DONE cmt | na 16 16 |        |             | ; However, we'll make a final decision about that when multitasking is up and
2513:000 | DONE cmt | na 16 16 |        |             | ; running.
2514:000 | DONE lbl | na 16 16 | 006739 |             | xt_type                              
2515:000 | DONE dir | na 16 16 |        |             |         .!a16                        
2516:000 | DONE dir | na 16 16 |        |             |         .!xy16                       
2517:000 | DONE cmt | na 16 16 |        |             |                 ; just leave if u is zero (empty string)
2518:000 | DONE ins | na 16 16 | 006739 | 98          |                 tya                  force flag check of TOS
2519:000 | DONE ins | na 16 16 | 00673a | f0 17       |                 beq 006753           
2520:000 | DONE wsp | na 16 16 |        |             |
2521:000 | DONE ins | na 16 16 | 00673c | b5 00       |                 lda.dx 00            get address from NOS
2522:000 | DONE ins | na 16 16 | 00673e | 85 16       |                 sta.d 000216         
2523:000 | DONE ins | na 16 16 | 006740 | 84 18       |                 sty.d 000218         number of chars is TOS
2524:000 | DONE ins | na 16 16 | 006742 | a0 00 00    |                 ldy.# 0000           
2525:000 | DONE ins | na 16 16 | 006745 | e2 20       |                 sep 20               
2525:001 | DONE ctl | na  8 16 |        |             |         .!a8
2526:000 | DONE lbl | na  8 16 | 006747 |             | type_loop                            
2527:000 | DONE ins | na  8 16 | 006747 | b1 16       |                 lda.diy 000216       LDA (TMP1),Y
2528:000 | DONE ins | na  8 16 | 006749 | 20 36 60    |                 jsr 006036           
2529:000 | DONE ins | na  8 16 | 00674c | c8          |                 iny                  
2530:000 | DONE ins | na  8 16 | 00674d | c4 18       |                 cpy.d 000218         
2531:000 | DONE ins | na  8 16 | 00674f | d0 f6       |                 bne 006747           
2532:000 | DONE wsp | na  8 16 |        |             |
2533:000 | DONE ins | na  8 16 | 006751 | c2 20       |                 rep 20               
2533:001 | DONE ctl | na 16 16 |        |             |         .!a16
2534:000 | DONE lbl | na 16 16 | 006753 |             | type_done                            
2535:000 | DONE cmt | na 16 16 |        |             |                 ; clear stack
2536:000 | DONE ins | na 16 16 | 006753 | b4 02       |                 ldy.dx 02            
2537:000 | DONE ins | na 16 16 | 006755 | e8          |                 inx                  
2538:000 | DONE ins | na 16 16 | 006756 | e8          |                 inx                  
2539:000 | DONE ins | na 16 16 | 006757 | e8          |                 inx                  
2540:000 | DONE ins | na 16 16 | 006758 | e8          |                 inx                  
2541:000 | DONE wsp | na 16 16 |        |             |
2542:000 | DONE cmt | na 16 16 |        |             |                 ; TODO LATER add PAUSE here for multitasking
2543:000 | DONE wsp | na 16 16 |        |             |
2544:000 | DONE lbl | na 16 16 | 006759 |             | z_type                               
2544:001 | DONE ins | na 16 16 | 006759 | 60          |                 rts                  
2545:000 | DONE wsp | na 16 16 |        |             |
2546:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
2547:000 | DONE cmt | na 16 16 |        |             | ; UNUSED ( -- u ) 11 bytes / X cycles
2548:000 | DONE cmt | na 16 16 |        |             | ; Return amount of memory available for the Dictionary. Does not include
2549:000 | DONE cmt | na 16 16 |        |             | ; memory for buffers, stacks etc. Does not exclude the space used by PAD
2550:000 | DONE cmt | na 16 16 |        |             | ; TODO rewrite for multitasking
2551:000 | DONE lbl | na 16 16 | 00675a |             | xt_unused                            
2552:000 | DONE dir | na 16 16 |        |             |         .!a16                        
2553:000 | DONE ins | na 16 16 | 00675a | a9 ff 7b    |                 lda.# 007bff         
2554:000 | DONE ins | na 16 16 | 00675d | 38          |                 sec                  
2555:000 | DONE ins | na 16 16 | 00675e | e5 00       |                 sbc.d 000200         current compile pointer
2556:000 | DONE wsp | na 16 16 |        |             |
2557:000 | DONE ins | na 16 16 | 006760 | ca          |                 dex                  
2558:000 | DONE ins | na 16 16 | 006761 | ca          |                 dex                  
2559:000 | DONE ins | na 16 16 | 006762 | 94 00       |                 sty.dx 00            
2560:000 | DONE wsp | na 16 16 |        |             |
2561:000 | DONE ins | na 16 16 | 006764 | a8          |                 tay                  
2562:000 | DONE wsp | na 16 16 |        |             |
2563:000 | DONE lbl | na 16 16 | 006765 |             | z_unused                             
2563:001 | DONE ins | na 16 16 | 006765 | 60          |                 rts                  
2564:000 | DONE wsp | na 16 16 |        |             |
2565:000 | DONE wsp | na 16 16 |        |             |
2566:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
2567:000 | DONE cmt | na 16 16 |        |             | ; VARIABLE ( "name" -- ) X bytes / X cycles
2568:000 | DONE cmt | na 16 16 |        |             | ; Define a word that returns the address for a variable. There are various Forth
2569:000 | DONE cmt | na 16 16 |        |             | ; definitions for this word, such as  CREATE 1 CELLS ALLOT  or CREATE 0 ,
2570:000 | DONE cmt | na 16 16 |        |             | ; We use a variant of the second one so the variable is initialized to zero
2571:000 | DONE lbl | na 16 16 | 006766 |             | xt_variable                          
2572:000 | DONE cmt | na 16 16 |        |             |                 ; We let CREATE do the heavy lifting
2573:000 | DONE ins | na 16 16 | 006766 | 20 8d 63    |                 jsr 00638d           
2574:000 | DONE wsp | na 16 16 |        |             |
2575:000 | DONE cmt | na 16 16 |        |             |                 ; There is no "stz.di cp" so we have to do this the
2576:000 | DONE cmt | na 16 16 |        |             |                 ; old way, which is still faster than a subroutine jump to ZERO
2577:000 | DONE ins | na 16 16 | 006769 | a9 00 00    |                 lda.# 0000           
2578:000 | DONE ins | na 16 16 | 00676c | 92 00       |                 sta.di 000200        STA (CP)
2579:000 | DONE wsp | na 16 16 |        |             |
2580:000 | DONE ins | na 16 16 | 00676e | e6 00       |                 inc.d 000200         direct COMMA
2581:000 | DONE ins | na 16 16 | 006770 | e6 00       |                 inc.d 000200         
2582:000 | DONE wsp | na 16 16 |        |             |
2583:000 | DONE lbl | na 16 16 | 006772 |             | z_variable                           
2583:001 | DONE ins | na 16 16 | 006772 | 60          |                 rts                  
2584:000 | DONE wsp | na 16 16 |        |             |
2585:000 | DONE wsp | na 16 16 |        |             |
2586:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
2587:000 | DONE cmt | na 16 16 |        |             | ; WORDS ( -- ) X bytes / X cycles
2588:000 | DONE cmt | na 16 16 |        |             | ; Print list of all Forth words available. This only really makes sense in an
2589:000 | DONE cmt | na 16 16 |        |             | ; interactive setting, so we don't have to worry about speed.
2590:000 | DONE lbl | na 16 16 | 006773 |             | xt_words                             
2591:000 | DONE dir | na 16 16 |        |             |         .!a16                        
2592:000 | DONE dir | na 16 16 |        |             |         .!xy16                       
2593:000 | DONE ins | na 16 16 | 006773 | 20 86 63    |                 jsr 006386           start on next line, this is a style choice
2594:000 | DONE wsp | na 16 16 |        |             |
2595:000 | DONE ins | na 16 16 | 006776 | a5 02       |                 lda.d 000202         nt of first entry in Dictionary (last added)
2596:000 | DONE ins | na 16 16 | 006778 | 48          |                 pha                  
2597:000 | DONE wsp | na 16 16 |        |             |
2598:000 | DONE ins | na 16 16 | 006779 | ca          |                 dex                  create room on TOS
2599:000 | DONE ins | na 16 16 | 00677a | ca          |                 dex                  
2600:000 | DONE ins | na 16 16 | 00677b | 94 00       |                 sty.dx 00            
2601:000 | DONE wsp | na 16 16 |        |             |
2602:000 | DONE lbl | na 16 16 | 00677d |             | words_loop                           
2603:000 | DONE ins | na 16 16 | 00677d | a8          |                 tay                  ( nt )
2604:000 | DONE ins | na 16 16 | 00677e | 20 67 65    |                 jsr 006567           ( nt -- addr u )
2605:000 | DONE ins | na 16 16 | 006781 | 20 39 67    |                 jsr 006739           ( addr u -- )
2606:000 | DONE ins | na 16 16 | 006784 | 20 06 67    |                 jsr 006706           
2607:000 | DONE wsp | na 16 16 |        |             |
2608:000 | DONE ins | na 16 16 | 006787 | 68          |                 pla                  get back first entry in Dictionary
2609:000 | DONE wsp | na 16 16 |        |             |
2610:000 | DONE cmt | na 16 16 |        |             |                 ; The next nt is two bytes below the nt of the current one in
2611:000 | DONE cmt | na 16 16 |        |             |                 ; the Dictionary header
2612:000 | DONE ins | na 16 16 | 006788 | 1a          |                 inc.a                
2613:000 | DONE ins | na 16 16 | 006789 | 1a          |                 inc.a                
2614:000 | DONE wsp | na 16 16 |        |             |
2615:000 | DONE ins | na 16 16 | 00678a | ca          |                 dex                  
2616:000 | DONE ins | na 16 16 | 00678b | ca          |                 dex                  
2617:000 | DONE ins | na 16 16 | 00678c | 94 00       |                 sty.dx 00            
2618:000 | DONE wsp | na 16 16 |        |             |
2619:000 | DONE ins | na 16 16 | 00678e | a8          |                 tay                  
2620:000 | DONE ins | na 16 16 | 00678f | b9 00 00    |                 lda.y 0000           LDA $0000,Y
2621:000 | DONE ins | na 16 16 | 006792 | 48          |                 pha                  
2622:000 | DONE ins | na 16 16 | 006793 | d0 e8       |                 bne 00677d           zero entry signals end of Dictionary
2623:000 | DONE wsp | na 16 16 |        |             |
2624:000 | DONE cmt | na 16 16 |        |             |                 ; all done, clean up
2625:000 | DONE ins | na 16 16 | 006795 | 68          |                 pla                  balance MPU stack, value discarded
2626:000 | DONE wsp | na 16 16 |        |             |
2627:000 | DONE ins | na 16 16 | 006796 | b4 00       |                 ldy.dx 00            
2628:000 | DONE ins | na 16 16 | 006798 | e8          |                 inx                  
2629:000 | DONE ins | na 16 16 | 006799 | e8          |                 inx                  
2630:000 | DONE wsp | na 16 16 |        |             |
2631:000 | DONE lbl | na 16 16 | 00679a |             | z_words                              
2631:001 | DONE ins | na 16 16 | 00679a | 60          |                 rts                  
2632:000 | DONE wsp | na 16 16 |        |             |
2633:000 | DONE wsp | na 16 16 |        |             |
2634:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
2635:000 | DONE cmt | na 16 16 |        |             | ; XOR ( n m -- n ) 6 bytes / X cycles
2636:000 | DONE cmt | na 16 16 |        |             | ; Logical XOR
2637:000 | DONE lbl | na 16 16 | 00679b |             | xt_xor                               
2638:000 | DONE ins | na 16 16 | 00679b | 98          |                 tya                  
2639:000 | DONE ins | na 16 16 | 00679c | 55 00       |                 eor.dx 00            
2640:000 | DONE ins | na 16 16 | 00679e | a8          |                 tay                  
2641:000 | DONE wsp | na 16 16 |        |             |
2642:000 | DONE ins | na 16 16 | 00679f | e8          |                 inx                  
2643:000 | DONE ins | na 16 16 | 0067a0 | e8          |                 inx                  
2644:000 | DONE wsp | na 16 16 |        |             |
2645:000 | DONE lbl | na 16 16 | 0067a1 |             | z_xor                                
2645:001 | DONE ins | na 16 16 | 0067a1 | 60          |                 rts                  
2646:000 | DONE wsp | na 16 16 |        |             |
2647:000 | DONE wsp | na 16 16 |        |             |
2648:000 | DONE cmt | na 16 16 |        |             | ; ===================================================================
2649:000 | DONE cmt | na 16 16 |        |             | ; MIDDLE INCLUDES
2650:000 | DONE wsp | na 16 16 |        |             |
2651:000 | DONE cmt | na 16 16 |        |             | ; Dictionary Headers for Liara Forth for the W65C265SXB
2651:001 | DONE cmt | na 16 16 |        |             | ; Scot W. Stevenson <scot.stevenson@gmail.com>
2651:002 | DONE cmt | na 16 16 |        |             | ; First version: 05. Dec 2016
2651:003 | DONE cmt | na 16 16 |        |             | ; This version: 17. Feb 2017
2651:004 | DONE wsp | na 16 16 |        |             |
2651:005 | DONE cmt | na 16 16 |        |             | ; Dictionary headers are kept separately from the code, which allows various
2651:006 | DONE cmt | na 16 16 |        |             | ; tricks in the code. We roughly follow the Gforth terminology: The Execution
2651:007 | DONE cmt | na 16 16 |        |             | ; Token (xt) is the address of the first byte of a word's code that can be,
2651:008 | DONE cmt | na 16 16 |        |             | ; well, executed; the Name Token (nt) is a pointer to the beginning of the
2651:009 | DONE cmt | na 16 16 |        |             | ; word's header in the Dictionary. There, the link to the next word in the
2651:010 | DONE cmt | na 16 16 |        |             | ; Dictionary is always one cell down from the current word's own nt. In the code
2651:011 | DONE cmt | na 16 16 |        |             | ; itself, we use "nt_<WORD>" ("header") for the nt and "xt_<WORD>" ("A" as the
2651:012 | DONE cmt | na 16 16 |        |             | ; beginning) for the xt.
2651:013 | DONE cmt | na 16 16 |        |             | ;
2651:014 | DONE cmt | na 16 16 |        |             | ; This gives us the following header structure:
2651:015 | DONE cmt | na 16 16 |        |             | ;
2651:016 | DONE cmt | na 16 16 |        |             | ;              8 bit     8 bit
2651:017 | DONE cmt | na 16 16 |        |             | ;               LSB       MSB
2651:018 | DONE cmt | na 16 16 |        |             | ; nt_word ->  +--------+--------+
2651:019 | DONE cmt | na 16 16 |        |             | ;             | Length | Status |
2651:020 | DONE cmt | na 16 16 |        |             | ;          +2 +--------+--------+
2651:021 | DONE cmt | na 16 16 |        |             | ;             | Next Header     | -> nt_next_word
2651:022 | DONE cmt | na 16 16 |        |             | ;          +4 +-----------------+
2651:023 | DONE cmt | na 16 16 |        |             | ;             | Start of Code   | -> xt_word
2651:024 | DONE cmt | na 16 16 |        |             | ;          +6 +-----------------+
2651:025 | DONE cmt | na 16 16 |        |             | ;             | End of Code     | -> z_word
2651:026 | DONE cmt | na 16 16 |        |             | ;          +8 +--------+--------+
2651:027 | DONE cmt | na 16 16 |        |             | ;             | Name   |        |
2651:028 | DONE cmt | na 16 16 |        |             | ;             +--------+--------+
2651:029 | DONE cmt | na 16 16 |        |             | ;             |        |        |
2651:030 | DONE cmt | na 16 16 |        |             | ;             +--------+--------+
2651:031 | DONE cmt | na 16 16 |        |             | ;             |        |  ...   | (name string does not end with a zero)
2651:032 | DONE cmt | na 16 16 |        |             | ;          +n +--------+--------+
2651:033 | DONE wsp | na 16 16 |        |             |
2651:034 | DONE cmt | na 16 16 |        |             | ; Status bytes are created by adding dictionary flags defined in
2651:035 | DONE cmt | na 16 16 |        |             | ; definitions.tasm:
2651:036 | DONE cmt | na 16 16 |        |             | ;
2651:037 | DONE cmt | na 16 16 |        |             | ;       PW - Primitive Word (natively coded)
2651:038 | DONE cmt | na 16 16 |        |             | ;       CO - Compile Only
2651:039 | DONE cmt | na 16 16 |        |             | ;       IM - Immediate Word
2651:040 | DONE cmt | na 16 16 |        |             | ;       NC - Native Compile (inline compile)
2651:041 | DONE wsp | na 16 16 |        |             |
2651:042 | DONE cmt | na 16 16 |        |             | ; The last word (top word in code) is always BYE, signaled to FIND by a 0000 in
2651:043 | DONE cmt | na 16 16 |        |             | ; the link to the Next Word field. The words are sorted with the more common
2651:044 | DONE cmt | na 16 16 |        |             | ; ones first (further down in code) and the output words later (further up)
2651:045 | DONE cmt | na 16 16 |        |             | ; because things will always be slow if there is a human involved.
2651:046 | DONE wsp | na 16 16 |        |             |
2651:047 | DONE lbl | na 16 16 | 0067a2 |             | nt_bye                               
2651:048 | DONE dir | na 16 16 | 0067a2 | (1 bytes)   |         .byte 03                     length of word string
2651:048 | DONE dir | na 16 16 |        |             |                 03                       --  .
2651:049 | DONE dir | na 16 16 | 0067a3 | (1 bytes)   |         .byte { PW + NC }            status byte
2651:049 | DONE dir | na 16 16 |        |             |                 09                       --  	
2651:050 | DONE dir | na 16 16 | 0067a4 | (2 bytes)   |         .word 0000                   next word in dictionary, 0000 signals end
2651:050 | DONE dir | na 16 16 |        |             |                 00 00                    --  . .
2651:051 | DONE dir | na 16 16 | 0067a6 | (2 bytes)   |         .word 0062fb                 start of code, the xt of this word
2651:051 | DONE dir | na 16 16 |        |             |                 fb 62                    --  . b
2651:052 | DONE dir | na 16 16 | 0067a8 | (2 bytes)   |         .word 0062fe                 end of code (points to RTS)
2651:052 | DONE dir | na 16 16 |        |             |                 fe 62                    --  . b
2651:053 | DONE dir | na 16 16 | 0067aa | (3 bytes)   |         .byte 62, 79, 65             word name, always lower case
2651:053 | DONE dir | na 16 16 |        |             |                 62 79 65                 --  b y e
2651:054 | DONE wsp | na 16 16 |        |             |
2651:055 | DONE lbl | na 16 16 | 0067ad |             | nt_cold                              
2651:056 | DONE dir | na 16 16 | 0067ad | (2 bytes)   |         .byte 4, 00                  
2651:056 | DONE dir | na 16 16 |        |             |                 04 00                    --  . .
2651:057 | DONE dir | na 16 16 | 0067af | (6 bytes)   |         .word nt_bye, xt_cold, 0060de 
2651:057 | DONE dir | na 16 16 |        |             |                 a2 67 63 60 de 60        --  . g c ` . `
2651:058 | DONE dir | na 16 16 | 0067b5 | (4 bytes)   |         .byte 63, 6f, 6c, 64         
2651:058 | DONE dir | na 16 16 |        |             |                 63 6f 6c 64              --  c o l d
2651:059 | DONE wsp | na 16 16 |        |             |
2651:060 | DONE lbl | na 16 16 | 0067b9 |             | nt_words                             
2651:061 | DONE dir | na 16 16 | 0067b9 | (2 bytes)   |         .byte 5, { PW + NC }         
2651:061 | DONE dir | na 16 16 |        |             |                 05 09                    --  . 	
2651:062 | DONE dir | na 16 16 | 0067bb | (6 bytes)   |         .word nt_cold, xt_words, 00679a 
2651:062 | DONE dir | na 16 16 |        |             |                 ad 67 73 67 9a 67        --  . g s g . g
2651:063 | DONE dir | na 16 16 | 0067c1 | (5 bytes)   |         .byte 77, 6f, 72, 64, 73     
2651:063 | DONE dir | na 16 16 |        |             |                 77 6f 72 64 73           --  w o r d s
2651:064 | DONE wsp | na 16 16 |        |             |
2651:065 | DONE lbl | na 16 16 | 0067c6 |             | nt_dump                              
2651:066 | DONE dir | na 16 16 | 0067c6 | (2 bytes)   |         .byte 4, { PW + NC }         
2651:066 | DONE dir | na 16 16 |        |             |                 04 09                    --  . 	
2651:067 | DONE dir | na 16 16 | 0067c8 | (6 bytes)   |         .word nt_words, xt_dump, 006463 
2651:067 | DONE dir | na 16 16 |        |             |                 b9 67 3d 64 63 64        --  . g = d c d
2651:068 | DONE dir | na 16 16 | 0067ce | (4 bytes)   |         .byte 64, 75, 6d, 70         
2651:068 | DONE dir | na 16 16 |        |             |                 64 75 6d 70              --  d u m p
2651:069 | DONE wsp | na 16 16 |        |             |
2651:070 | DONE lbl | na 16 16 | 0067d2 |             | nt_bell                              
2651:071 | DONE dir | na 16 16 | 0067d2 | (2 bytes)   |         .byte 4, { PW + NC }         
2651:071 | DONE dir | na 16 16 |        |             |                 04 09                    --  . 	
2651:072 | DONE dir | na 16 16 | 0067d4 | (6 bytes)   |         .word nt_dump, xt_bell, 0062f2 
2651:072 | DONE dir | na 16 16 |        |             |                 c6 67 ec 62 f2 62        --  . g . b . b
2651:073 | DONE dir | na 16 16 | 0067da | (4 bytes)   |         .byte 62, 65, 6c, 6c         
2651:073 | DONE dir | na 16 16 |        |             |                 62 65 6c 6c              --  b e l l
2651:074 | DONE wsp | na 16 16 |        |             |
2651:075 | DONE lbl | na 16 16 | 0067de |             | nt_decimal                           
2651:076 | DONE dir | na 16 16 | 0067de | (2 bytes)   |         .byte 7, { PW + NC }         
2651:076 | DONE dir | na 16 16 |        |             |                 07 09                    --  . 	
2651:077 | DONE dir | na 16 16 | 0067e0 | (6 bytes)   |         .word nt_bell, xt_decimal, 006405 
2651:077 | DONE dir | na 16 16 |        |             |                 d2 67 00 64 05 64        --  . g . d . d
2651:078 | DONE dir | na 16 16 | 0067e6 | (7 bytes)   |         .byte 64, 65, 63, 69, 6d, 61, 6c 
2651:078 | DONE dir | na 16 16 |        |             |                 64 65 63 69 6d 61 6c     --  d e c i m a l
2651:079 | DONE wsp | na 16 16 |        |             |
2651:080 | DONE lbl | na 16 16 | 0067ed |             | nt_hex                               
2651:081 | DONE dir | na 16 16 | 0067ed | (2 bytes)   |         .byte 3, { PW + NC }         
2651:081 | DONE dir | na 16 16 |        |             |                 03 09                    --  . 	
2651:082 | DONE dir | na 16 16 | 0067ef | (6 bytes)   |         .word nt_decimal, xt_hex, 006518 
2651:082 | DONE dir | na 16 16 |        |             |                 de 67 13 65 18 65        --  . g . e . e
2651:083 | DONE dir | na 16 16 | 0067f5 | (3 bytes)   |         .byte 68, 65, 78             
2651:083 | DONE dir | na 16 16 |        |             |                 68 65 78                 --  h e x
2651:084 | DONE wsp | na 16 16 |        |             |
2651:085 | DONE lbl | na 16 16 | 0067f8 |             | nt_unused                            
2651:086 | DONE dir | na 16 16 | 0067f8 | (2 bytes)   |         .byte 6, { PW + NC }         
2651:086 | DONE dir | na 16 16 |        |             |                 06 09                    --  . 	
2651:087 | DONE dir | na 16 16 | 0067fa | (6 bytes)   |         .word nt_hex, xt_unused, 006765 
2651:087 | DONE dir | na 16 16 |        |             |                 ed 67 5a 67 65 67        --  . g Z g e g
2651:088 | DONE dir | na 16 16 | 006800 | (6 bytes)   |         .byte 75, 6e, 75, 73, 65, 64 
2651:088 | DONE dir | na 16 16 |        |             |                 75 6e 75 73 65 64        --  u n u s e d
2651:089 | DONE wsp | na 16 16 |        |             |
2651:090 | DONE lbl | na 16 16 | 006806 |             | nt_page                              
2651:091 | DONE dir | na 16 16 | 006806 | (2 bytes)   |         .byte 4, { PW + NC }         
2651:091 | DONE dir | na 16 16 |        |             |                 04 09                    --  . 	
2651:092 | DONE dir | na 16 16 | 006808 | (6 bytes)   |         .word nt_unused, xt_page, 0065a8 
2651:092 | DONE dir | na 16 16 |        |             |                 f8 67 9c 65 a8 65        --  . g . e . e
2651:093 | DONE dir | na 16 16 | 00680e | (4 bytes)   |         .byte 70, 61, 67, 65         
2651:093 | DONE dir | na 16 16 |        |             |                 70 61 67 65              --  p a g e
2651:094 | DONE wsp | na 16 16 |        |             |
2651:095 | DONE lbl | na 16 16 | 006812 |             | nt_count                             
2651:096 | DONE dir | na 16 16 | 006812 | (2 bytes)   |         .byte 5, { NC + PW }         
2651:096 | DONE dir | na 16 16 |        |             |                 05 09                    --  . 	
2651:097 | DONE dir | na 16 16 | 006814 | (6 bytes)   |         .word nt_page, xt_count, 006385 
2651:097 | DONE dir | na 16 16 |        |             |                 06 68 77 63 85 63        --  . h w c . c
2651:098 | DONE dir | na 16 16 | 00681a | (5 bytes)   |         .byte 63, 6f, 75, 6e, 74     
2651:098 | DONE dir | na 16 16 |        |             |                 63 6f 75 6e 74           --  c o u n t
2651:099 | DONE wsp | na 16 16 |        |             |
2651:100 | DONE lbl | na 16 16 | 00681f |             | nt_abort                             
2651:101 | DONE dir | na 16 16 | 00681f | (2 bytes)   |         .byte 5, 00                  TODO check flags
2651:101 | DONE dir | na 16 16 |        |             |                 05 00                    --  . .
2651:102 | DONE dir | na 16 16 | 006821 | (6 bytes)   |         .word nt_count, xt_abort, 0060de 
2651:102 | DONE dir | na 16 16 |        |             |                 12 68 97 60 de 60        --  . h . ` . `
2651:103 | DONE dir | na 16 16 | 006827 | (5 bytes)   |         .byte 61, 62, 6f, 72, 74     
2651:103 | DONE dir | na 16 16 |        |             |                 61 62 6f 72 74           --  a b o r t
2651:104 | DONE wsp | na 16 16 |        |             |
2651:105 | DONE lbl | na 16 16 | 00682c |             | nt_parse                             
2651:106 | DONE dir | na 16 16 | 00682c | (2 bytes)   |         .byte 5, 00                  
2651:106 | DONE dir | na 16 16 |        |             |                 05 00                    --  . .
2651:107 | DONE dir | na 16 16 | 00682e | (6 bytes)   |         .word nt_abort, xt_parse, 00660d 
2651:107 | DONE dir | na 16 16 |        |             |                 1f 68 db 65 0d 66        --  . h . e  f
2651:108 | DONE dir | na 16 16 | 006834 | (5 bytes)   |         .byte 70, 61, 72, 73, 65     
2651:108 | DONE dir | na 16 16 |        |             |                 70 61 72 73 65           --  p a r s e
2651:109 | DONE wsp | na 16 16 |        |             |
2651:110 | DONE lbl | na 16 16 | 006839 |             | nt_quit                              
2651:111 | DONE dir | na 16 16 | 006839 | (2 bytes)   |         .byte 4, 00                  
2651:111 | DONE dir | na 16 16 |        |             |                 04 00                    --  . .
2651:112 | DONE dir | na 16 16 | 00683b | (6 bytes)   |         .word nt_parse, xt_quit, 0060de 
2651:112 | DONE dir | na 16 16 |        |             |                 2c 68 9f 60 de 60        --  , h . ` . `
2651:113 | DONE dir | na 16 16 | 006841 | (4 bytes)   |         .byte 71, 75, 69, 74         
2651:113 | DONE dir | na 16 16 |        |             |                 71 75 69 74              --  q u i t
2651:114 | DONE wsp | na 16 16 |        |             |
2651:115 | DONE lbl | na 16 16 | 006845 |             | nt_question                          
2651:116 | DONE dir | na 16 16 | 006845 | (2 bytes)   |         .byte 1, { PW + NC }         
2651:116 | DONE dir | na 16 16 |        |             |                 01 09                    --  . 	
2651:117 | DONE dir | na 16 16 | 006847 | (6 bytes)   |         .word nt_quit, xt_question, 0061a0 
2651:117 | DONE dir | na 16 16 |        |             |                 39 68 9a 61 a0 61        --  9 h . a . a
2651:118 | DONE dir | na 16 16 | 00684d | (1 bytes)   |         .byte 3f                     
2651:118 | DONE dir | na 16 16 |        |             |                 3f                       --  ?
2651:119 | DONE wsp | na 16 16 |        |             |
2651:120 | DONE lbl | na 16 16 | 00684e |             | nt_name-int                          
2651:121 | DONE dir | na 16 16 | 00684e | (2 bytes)   |         .byte 8, { PW + NC }         
2651:121 | DONE dir | na 16 16 |        |             |                 08 09                    --  . 	
2651:122 | DONE dir | na 16 16 | 006850 | (6 bytes)   |         .word nt_question, xt_name-int, 006566 
2651:122 | DONE dir | na 16 16 |        |             |                 45 68 5e 65 66 65        --  E h ^ e f e
2651:123 | DONE dir | na 16 16 | 006856 | (8 bytes)   |         .byte 6e, 61, 6d, 65, 3e, 69, 6e, 74 
2651:123 | DONE dir | na 16 16 |        |             |                 6e 61 6d 65 3e 69 6e 74  --  n a m e > i n t
2651:123 | DONE dir | na 16 16 |        |             |                                          -- 
2651:124 | DONE wsp | na 16 16 |        |             |
2651:125 | DONE lbl | na 16 16 | 00685e |             | nt_cr                                
2651:126 | DONE dir | na 16 16 | 00685e | (2 bytes)   |         .byte 2, { PW + NC }         
2651:126 | DONE dir | na 16 16 |        |             |                 02 09                    --  . 	
2651:127 | DONE dir | na 16 16 | 006860 | (6 bytes)   |         .word nt_name-int, xt_cr, 00638c 
2651:127 | DONE dir | na 16 16 |        |             |                 4e 68 86 63 8c 63        --  N h . c . c
2651:128 | DONE dir | na 16 16 | 006866 | (2 bytes)   |         .byte 63, 72                 
2651:128 | DONE dir | na 16 16 |        |             |                 63 72                    --  c r
2651:129 | DONE wsp | na 16 16 |        |             |
2651:130 | DONE lbl | na 16 16 | 006868 |             | nt_bl                                
2651:131 | DONE dir | na 16 16 | 006868 | (2 bytes)   |         .byte 2, { PW + NC }         
2651:131 | DONE dir | na 16 16 |        |             |                 02 09                    --  . 	
2651:132 | DONE dir | na 16 16 | 00686a | (6 bytes)   |         .word nt_cr, xt_bl, 0062fa   
2651:132 | DONE dir | na 16 16 |        |             |                 5e 68 f3 62 fa 62        --  ^ h . b . b
2651:133 | DONE dir | na 16 16 | 006870 | (2 bytes)   |         .byte 62, 6c                 
2651:133 | DONE dir | na 16 16 |        |             |                 62 6c                    --  b l
2651:134 | DONE wsp | na 16 16 |        |             |
2651:135 | DONE lbl | na 16 16 | 006872 |             | nt_spaces                            
2651:136 | DONE dir | na 16 16 | 006872 | (2 bytes)   |         .byte 6, { PW + NC }         
2651:136 | DONE dir | na 16 16 |        |             |                 06 09                    --  . 	
2651:137 | DONE dir | na 16 16 | 006874 | (6 bytes)   |         .word nt_bl, xt_spaces, 006719 
2651:137 | DONE dir | na 16 16 |        |             |                 68 68 0d 67 19 67        --  h h  g . g
2651:138 | DONE dir | na 16 16 | 00687a | (6 bytes)   |         .byte 73, 70, 61, 63, 65, 73 
2651:138 | DONE dir | na 16 16 |        |             |                 73 70 61 63 65 73        --  s p a c e s
2651:139 | DONE wsp | na 16 16 |        |             |
2651:140 | DONE lbl | na 16 16 | 006880 |             | nt_space                             
2651:141 | DONE dir | na 16 16 | 006880 | (2 bytes)   |         .byte 5, { PW + NC }         
2651:141 | DONE dir | na 16 16 |        |             |                 05 09                    --  . 	
2651:142 | DONE dir | na 16 16 | 006882 | (6 bytes)   |         .word nt_spaces, xt_space, 00670c 
2651:142 | DONE dir | na 16 16 |        |             |                 72 68 06 67 0c 67        --  r h . g  g
2651:143 | DONE dir | na 16 16 | 006888 | (5 bytes)   |         .byte 73, 70, 61, 63, 65     
2651:143 | DONE dir | na 16 16 |        |             |                 73 70 61 63 65           --  s p a c e
2651:144 | DONE wsp | na 16 16 |        |             |
2651:145 | DONE lbl | na 16 16 | 00688d |             | nt_dots                              
2651:146 | DONE dir | na 16 16 | 00688d | (2 bytes)   |         .byte 2, { PW + NC }         
2651:146 | DONE dir | na 16 16 |        |             |                 02 09                    --  . 	
2651:147 | DONE dir | na 16 16 | 00688f | (6 bytes)   |         .word nt_space, xt_dots, 006152 
2651:147 | DONE dir | na 16 16 |        |             |                 80 68 0b 61 52 61        --  . h  a R a
2651:148 | DONE dir | na 16 16 | 006895 | (2 bytes)   |         .byte 2e, 73                 
2651:148 | DONE dir | na 16 16 |        |             |                 2e 73                    --  . s
2651:149 | DONE wsp | na 16 16 |        |             |
2651:150 | DONE lbl | na 16 16 | 006897 |             | nt_type                              
2651:151 | DONE dir | na 16 16 | 006897 | (2 bytes)   |         .byte 4, 0                   
2651:151 | DONE dir | na 16 16 |        |             |                 04 00                    --  . .
2651:152 | DONE dir | na 16 16 | 006899 | (6 bytes)   |         .word nt_dots, xt_type, 006759 
2651:152 | DONE dir | na 16 16 |        |             |                 8d 68 39 67 59 67        --  . h 9 g Y g
2651:153 | DONE dir | na 16 16 | 00689f | (4 bytes)   |         .byte 74, 79, 70, 65         
2651:153 | DONE dir | na 16 16 |        |             |                 74 79 70 65              --  t y p e
2651:154 | DONE wsp | na 16 16 |        |             |
2651:155 | DONE lbl | na 16 16 | 0068a3 |             | nt_dot                               
2651:156 | DONE dir | na 16 16 | 0068a3 | (2 bytes)   |         .byte 1, { PW + NC }         
2651:156 | DONE dir | na 16 16 |        |             |                 01 09                    --  . 	
2651:157 | DONE dir | na 16 16 | 0068a5 | (6 bytes)   |         .word nt_type, xt_dot, 0060fc 
2651:157 | DONE dir | na 16 16 |        |             |                 97 68 e7 60 fc 60        --  . h . ` . `
2651:158 | DONE dir | na 16 16 | 0068ab | (1 bytes)   |         .byte 2e                     
2651:158 | DONE dir | na 16 16 |        |             |                 2e                       --  .
2651:159 | DONE wsp | na 16 16 |        |             |
2651:160 | DONE lbl | na 16 16 | 0068ac |             | nt_pad                               
2651:161 | DONE dir | na 16 16 | 0068ac | (2 bytes)   |         .byte 3, { PW + NC }         
2651:161 | DONE dir | na 16 16 |        |             |                 03 09                    --  . 	
2651:162 | DONE dir | na 16 16 | 0068ae | (6 bytes)   |         .word nt_dot, xt_pad, 00659b 
2651:162 | DONE dir | na 16 16 |        |             |                 a3 68 90 65 9b 65        --  . h . e . e
2651:163 | DONE dir | na 16 16 | 0068b4 | (3 bytes)   |         .byte 70, 61, 64             
2651:163 | DONE dir | na 16 16 |        |             |                 70 61 64                 --  p a d
2651:164 | DONE wsp | na 16 16 |        |             |
2651:165 | DONE lbl | na 16 16 | 0068b7 |             | nt_base                              
2651:166 | DONE dir | na 16 16 | 0068b7 | (2 bytes)   |         .byte 4, { PW + NC }         
2651:166 | DONE dir | na 16 16 |        |             |                 04 09                    --  . 	
2651:167 | DONE dir | na 16 16 | 0068b9 | (6 bytes)   |         .word nt_pad, xt_base, 0062eb 
2651:167 | DONE dir | na 16 16 |        |             |                 ac 68 e4 62 eb 62        --  . h . b . b
2651:168 | DONE dir | na 16 16 | 0068bf | (4 bytes)   |         .byte 62, 61, 73, 65         
2651:168 | DONE dir | na 16 16 |        |             |                 62 61 73 65              --  b a s e
2651:169 | DONE wsp | na 16 16 |        |             |
2651:170 | DONE lbl | na 16 16 | 0068c3 |             | nt_evaluate                          
2651:171 | DONE dir | na 16 16 | 0068c3 | (2 bytes)   |         .byte 8, { PW + NC }         
2651:171 | DONE dir | na 16 16 |        |             |                 08 09                    --  . 	
2651:172 | DONE dir | na 16 16 | 0068c5 | (6 bytes)   |         .word nt_base, xt_evaluate, 006497 
2651:172 | DONE dir | na 16 16 |        |             |                 b7 68 69 64 97 64        --  . h i d . d
2651:173 | DONE dir | na 16 16 | 0068cb | (8 bytes)   |         .byte 65, 76, 61, 6c, 75, 61, 74, 65 
2651:173 | DONE dir | na 16 16 |        |             |                 65 76 61 6c 75 61 74 65  --  e v a l u a t e
2651:173 | DONE dir | na 16 16 |        |             |                                          -- 
2651:174 | DONE wsp | na 16 16 |        |             |
2651:175 | DONE lbl | na 16 16 | 0068d3 |             | nt_cells                             
2651:176 | DONE dir | na 16 16 | 0068d3 | (2 bytes)   |         .byte 5, { PW + NC }         2* because we have 16 bit stack
2651:176 | DONE dir | na 16 16 |        |             |                 05 09                    --  . 	
2651:177 | DONE dir | na 16 16 | 0068d5 | (6 bytes)   |         .word nt_evaluate, xt_two-star, 0061f8 
2651:177 | DONE dir | na 16 16 |        |             |                 c3 68 f5 61 f8 61        --  . h . a . a
2651:178 | DONE dir | na 16 16 | 0068db | (5 bytes)   |         .byte 63, 65, 6c, 6c, 73     
2651:178 | DONE dir | na 16 16 |        |             |                 63 65 6c 6c 73           --  c e l l s
2651:179 | DONE wsp | na 16 16 |        |             |
2651:180 | DONE lbl | na 16 16 | 0068e0 |             | nt_squote                            
2651:181 | DONE dir | na 16 16 | 0068e0 | (2 bytes)   |         .byte 2, { IM + NC }         not CO, see source code
2651:181 | DONE dir | na 16 16 |        |             |                 02 03                    --  . .
2651:182 | DONE dir | na 16 16 | 0068e2 | (6 bytes)   |         .word nt_cells, xt_squote, 006690 
2651:182 | DONE dir | na 16 16 |        |             |                 d3 68 7f 66 90 66        --  . h . f . f
2651:183 | DONE dir | na 16 16 | 0068e8 | (2 bytes)   |         .byte 73, &34                
2651:183 | DONE dir | na 16 16 |        |             |                 73 22                    --  s "
2651:184 | DONE wsp | na 16 16 |        |             |
2651:185 | DONE lbl | na 16 16 | 0068ea |             | nt_sliteral                          
2651:186 | DONE dir | na 16 16 | 0068ea | (2 bytes)   |         .byte 8, { IM + CO }         
2651:186 | DONE dir | na 16 16 |        |             |                 08 06                    --  . .
2651:187 | DONE dir | na 16 16 | 0068ec | (6 bytes)   |         .word nt_squote, xt_sliteral, 0066db 
2651:187 | DONE dir | na 16 16 |        |             |                 e0 68 91 66 db 66        --  . h . f . f
2651:188 | DONE dir | na 16 16 | 0068f2 | (8 bytes)   |         .byte 73, 6c, 69, 74, 65, 72, 61, 6c 
2651:188 | DONE dir | na 16 16 |        |             |                 73 6c 69 74 65 72 61 6c  --  s l i t e r a l
2651:188 | DONE dir | na 16 16 |        |             |                                          -- 
2651:189 | DONE wsp | na 16 16 |        |             |
2651:190 | DONE lbl | na 16 16 | 0068fa |             | nt_brackettick                       
2651:191 | DONE dir | na 16 16 | 0068fa | (2 bytes)   |         .byte 3, { IM + CO }         
2651:191 | DONE dir | na 16 16 |        |             |                 03 06                    --  . .
2651:192 | DONE dir | na 16 16 | 0068fc | (6 bytes)   |         .word nt_sliteral, xt_brackettick, 0061b6 
2651:192 | DONE dir | na 16 16 |        |             |                 ea 68 b0 61 b6 61        --  . h . a . a
2651:193 | DONE dir | na 16 16 | 006902 | (3 bytes)   |         .byte 5b, 27, 5d             
2651:193 | DONE dir | na 16 16 |        |             |                 5b 27 5d                 --  [ ' ]
2651:194 | DONE wsp | na 16 16 |        |             |
2651:195 | DONE lbl | na 16 16 | 006905 |             | nt_bracketchar                       
2651:196 | DONE dir | na 16 16 | 006905 | (2 bytes)   |         .byte 6, { IM + CO }         
2651:196 | DONE dir | na 16 16 |        |             |                 06 06                    --  . .
2651:197 | DONE dir | na 16 16 | 006907 | (6 bytes)   |         .word nt_brackettick, xt_bracketchar, 0061c5 
2651:197 | DONE dir | na 16 16 |        |             |                 fa 68 bf 61 c5 61        --  . h . a . a
2651:198 | DONE dir | na 16 16 | 00690d | (6 bytes)   |         .byte 5b, 63, 68, 61, 72, 5d 
2651:198 | DONE dir | na 16 16 |        |             |                 5b 63 68 61 72 5d        --  [ c h a r ]
2651:199 | DONE wsp | na 16 16 |        |             |
2651:200 | DONE lbl | na 16 16 | 006913 |             | nt_literal                           
2651:201 | DONE dir | na 16 16 | 006913 | (2 bytes)   |         .byte 7, { IM + CO }         
2651:201 | DONE dir | na 16 16 |        |             |                 07 06                    --  . .
2651:202 | DONE dir | na 16 16 | 006915 | (6 bytes)   |         .word nt_bracketchar, xt_literal, 00652a 
2651:202 | DONE dir | na 16 16 |        |             |                 05 69 19 65 2a 65        --  . i . e * e
2651:203 | DONE dir | na 16 16 | 00691b | (7 bytes)   |         .byte 6c, 69, 74, 65, 72, 61, 6c 
2651:203 | DONE dir | na 16 16 |        |             |                 6c 69 74 65 72 61 6c     --  l i t e r a l
2651:204 | DONE wsp | na 16 16 |        |             |
2651:205 | DONE lbl | na 16 16 | 006922 |             | nt_compile-only                      
2651:206 | DONE dir | na 16 16 | 006922 | (2 bytes)   |         .byte 0c, { PW + NC }        
2651:206 | DONE dir | na 16 16 |        |             |                 0c 09                    --   	
2651:207 | DONE dir | na 16 16 | 006924 | (6 bytes)   |         .word nt_literal, xt_compile-only, 006349 
2651:207 | DONE dir | na 16 16 |        |             |                 13 69 41 63 49 63        --  . i A c I c
2651:208 | DONE dir | na 16 16 | 00692a | (12 bytes)  |         .byte 63, 6f, 6d, 70, 69, 6c, 65, 2d, 6f, 6e, 6c, 79 
2651:208 | DONE dir | na 16 16 |        |             |                 63 6f 6d 70 69 6c 65 2d  --  c o m p i l e -
2651:208 | DONE dir | na 16 16 |        |             |                 6f 6e 6c 79              --  o n l y
2651:209 | DONE wsp | na 16 16 |        |             |
2651:210 | DONE lbl | na 16 16 | 006936 |             | nt_immediate                         
2651:211 | DONE dir | na 16 16 | 006936 | (2 bytes)   |         .byte 9, { PW + NC }         
2651:211 | DONE dir | na 16 16 |        |             |                 09 09                    --  	 	
2651:212 | DONE dir | na 16 16 | 006938 | (6 bytes)   |         .word nt_compile-only, xt_immediate, 006505 
2651:212 | DONE dir | na 16 16 |        |             |                 22 69 fd 64 05 65        --  " i . d . e
2651:213 | DONE dir | na 16 16 | 00693e | (9 bytes)   |         .byte 69, 6d, 6d, 65, 64, 69, 61, 74, 65 
2651:213 | DONE dir | na 16 16 |        |             |                 69 6d 6d 65 64 69 61 74  --  i m m e d i a t
2651:213 | DONE dir | na 16 16 |        |             |                 65                       --  e
2651:214 | DONE wsp | na 16 16 |        |             |
2651:215 | DONE lbl | na 16 16 | 006947 |             | nt_postpone                          
2651:216 | DONE dir | na 16 16 | 006947 | (2 bytes)   |         .byte 8, { IM + CO }         
2651:216 | DONE dir | na 16 16 |        |             |                 08 06                    --  . .
2651:217 | DONE dir | na 16 16 | 006949 | (6 bytes)   |         .word nt_immediate, xt_postpone, 006643 
2651:217 | DONE dir | na 16 16 |        |             |                 36 69 0e 66 43 66        --  6 i . f C f
2651:218 | DONE dir | na 16 16 | 00694f | (8 bytes)   |         .byte 70, 6f, 73, 74, 70, 6f, 6e, 65 
2651:218 | DONE dir | na 16 16 |        |             |                 70 6f 73 74 70 6f 6e 65  --  p o s t p o n e
2651:218 | DONE dir | na 16 16 |        |             |                                          -- 
2651:219 | DONE wsp | na 16 16 |        |             |
2651:220 | DONE lbl | na 16 16 | 006957 |             | nt_rightbracket                      
2651:221 | DONE dir | na 16 16 | 006957 | (2 bytes)   |         .byte 1, { PW + NC }         
2651:221 | DONE dir | na 16 16 |        |             |                 01 09                    --  . 	
2651:222 | DONE dir | na 16 16 | 006959 | (6 bytes)   |         .word nt_postpone, xt_rightbracket, 0061be 
2651:222 | DONE dir | na 16 16 |        |             |                 47 69 b9 61 be 61        --  G i . a . a
2651:223 | DONE dir | na 16 16 | 00695f | (1 bytes)   |         .byte 5d                     
2651:223 | DONE dir | na 16 16 |        |             |                 5d                       --  ]
2651:224 | DONE wsp | na 16 16 |        |             |
2651:225 | DONE lbl | na 16 16 | 006960 |             | nt_leftbracket                       
2651:226 | DONE dir | na 16 16 | 006960 | (2 bytes)   |         .byte 1, { IM + CO }         
2651:226 | DONE dir | na 16 16 |        |             |                 01 06                    --  . .
2651:227 | DONE dir | na 16 16 | 006962 | (6 bytes)   |         .word nt_rightbracket, xt_leftbracket, 0061b8 
2651:227 | DONE dir | na 16 16 |        |             |                 57 69 b6 61 b8 61        --  W i . a . a
2651:228 | DONE dir | na 16 16 | 006968 | (1 bytes)   |         .byte 5b                     
2651:228 | DONE dir | na 16 16 |        |             |                 5b                       --  [
2651:229 | DONE wsp | na 16 16 |        |             |
2651:230 | DONE lbl | na 16 16 | 006969 |             | nt_compilecomma                      
2651:231 | DONE dir | na 16 16 | 006969 | (2 bytes)   |         .byte 08, { CO }             
2651:231 | DONE dir | na 16 16 |        |             |                 08 04                    --  . .
2651:232 | DONE dir | na 16 16 | 00696b | (6 bytes)   |         .word nt_leftbracket, xt_compilecomma, 00635c 
2651:232 | DONE dir | na 16 16 |        |             |                 60 69 4a 63 5c 63        --  ` i J c \ c
2651:233 | DONE dir | na 16 16 | 006971 | (8 bytes)   |         .byte 63, 6f, 6d, 70, 69, 6c, 65, 2c 
2651:233 | DONE dir | na 16 16 |        |             |                 63 6f 6d 70 69 6c 65 2c  --  c o m p i l e ,
2651:233 | DONE dir | na 16 16 |        |             |                                          -- 
2651:234 | DONE wsp | na 16 16 |        |             |
2651:235 | DONE lbl | na 16 16 | 006979 |             | nt_semicolon                         
2651:236 | DONE dir | na 16 16 | 006979 | (2 bytes)   |         .byte 1, { CO + IM }         
2651:236 | DONE dir | na 16 16 |        |             |                 01 06                    --  . .
2651:237 | DONE dir | na 16 16 | 00697b | (6 bytes)   |         .word nt_compilecomma, xt_semicolon, 006199 
2651:237 | DONE dir | na 16 16 |        |             |                 69 69 81 61 99 61        --  i i . a . a
2651:238 | DONE dir | na 16 16 | 006981 | (1 bytes)   |         .byte 3b                     
2651:238 | DONE dir | na 16 16 |        |             |                 3b                       --  ;
2651:239 | DONE wsp | na 16 16 |        |             |
2651:240 | DONE lbl | na 16 16 | 006982 |             | nt_colon                             
2651:241 | DONE dir | na 16 16 | 006982 | (2 bytes)   |         .byte 1, { NC }              
2651:241 | DONE dir | na 16 16 |        |             |                 01 01                    --  . .
2651:242 | DONE dir | na 16 16 | 006984 | (6 bytes)   |         .word nt_semicolon, xt_colon, 006180 
2651:242 | DONE dir | na 16 16 |        |             |                 79 69 5f 61 80 61        --  y i _ a . a
2651:243 | DONE dir | na 16 16 | 00698a | (1 bytes)   |         .byte 3a                     
2651:243 | DONE dir | na 16 16 |        |             |                 3a                       --  :
2651:244 | DONE wsp | na 16 16 |        |             |
2651:245 | DONE lbl | na 16 16 | 00698b |             | nt_allot                             
2651:246 | DONE dir | na 16 16 | 00698b | (2 bytes)   |         .byte 5, { PW + NC }         
2651:246 | DONE dir | na 16 16 |        |             |                 05 09                    --  . 	
2651:247 | DONE dir | na 16 16 | 00698d | (6 bytes)   |         .word nt_colon, xt_allot, 0062dc 
2651:247 | DONE dir | na 16 16 |        |             |                 82 69 b4 62 dc 62        --  . i . b . b
2651:248 | DONE dir | na 16 16 | 006993 | (5 bytes)   |         .byte 61, 6c, 6c, 6f, 74     
2651:248 | DONE dir | na 16 16 |        |             |                 61 6c 6c 6f 74           --  a l l o t
2651:249 | DONE wsp | na 16 16 |        |             |
2651:250 | DONE lbl | na 16 16 | 006998 |             | nt_does                              
2651:251 | DONE dir | na 16 16 | 006998 | (2 bytes)   |         .byte 5, { IM + CO }         
2651:251 | DONE dir | na 16 16 |        |             |                 05 06                    --  . .
2651:252 | DONE dir | na 16 16 | 00699a | (6 bytes)   |         .word nt_allot, xt_does, 006421 
2651:252 | DONE dir | na 16 16 |        |             |                 8b 69 15 64 21 64        --  . i . d ! d
2651:253 | DONE dir | na 16 16 | 0069a0 | (5 bytes)   |         .byte 64, 6f, 65, 73, 3e     
2651:253 | DONE dir | na 16 16 |        |             |                 64 6f 65 73 3e           --  d o e s >
2651:254 | DONE wsp | na 16 16 |        |             |
2651:255 | DONE lbl | na 16 16 | 0069a5 |             | nt_create                            
2651:256 | DONE dir | na 16 16 | 0069a5 | (2 bytes)   |         .byte 6, { PW + NC }         
2651:256 | DONE dir | na 16 16 |        |             |                 06 09                    --  . 	
2651:257 | DONE dir | na 16 16 | 0069a7 | (6 bytes)   |         .word nt_does, xt_create, 0063ff 
2651:257 | DONE dir | na 16 16 |        |             |                 98 69 8d 63 ff 63        --  . i . c . c
2651:258 | DONE dir | na 16 16 | 0069ad | (6 bytes)   |         .byte 63, 72, 65, 61, 74, 65 
2651:258 | DONE dir | na 16 16 |        |             |                 63 72 65 61 74 65        --  c r e a t e
2651:259 | DONE wsp | na 16 16 |        |             |
2651:260 | DONE lbl | na 16 16 | 0069b3 |             | nt_name-string                       
2651:261 | DONE dir | na 16 16 | 0069b3 | (2 bytes)   |         .byte 0b, { PW + NC }        
2651:261 | DONE dir | na 16 16 |        |             |                 0b 09                    --   	
2651:262 | DONE dir | na 16 16 | 0069b5 | (6 bytes)   |         .word nt_create, xt_name-string, 006577 
2651:262 | DONE dir | na 16 16 |        |             |                 a5 69 67 65 77 65        --  . i g e w e
2651:263 | DONE dir | na 16 16 | 0069bb | (11 bytes)  |         .byte 6e, 61, 6d, 65, 3e, 73, 74, 72, 69, 6e, 67 
2651:263 | DONE dir | na 16 16 |        |             |                 6e 61 6d 65 3e 73 74 72  --  n a m e > s t r
2651:263 | DONE dir | na 16 16 |        |             |                 69 6e 67                 --  i n g
2651:264 | DONE wsp | na 16 16 |        |             |
2651:265 | DONE lbl | na 16 16 | 0069c6 |             | nt_2dup                              
2651:266 | DONE dir | na 16 16 | 0069c6 | (2 bytes)   |         .byte 4, { PW + NC }         
2651:266 | DONE dir | na 16 16 |        |             |                 04 09                    --  . 	
2651:267 | DONE dir | na 16 16 | 0069c8 | (6 bytes)   |         .word nt_name-string, xt_2dup, 00620a 
2651:267 | DONE dir | na 16 16 |        |             |                 b3 69 00 62 0a 62        --  . i . b 
 b
2651:268 | DONE dir | na 16 16 | 0069ce | (4 bytes)   |         .byte 32, 64, 75, 70         
2651:268 | DONE dir | na 16 16 |        |             |                 32 64 75 70              --  2 d u p
2651:269 | DONE wsp | na 16 16 |        |             |
2651:270 | DONE lbl | na 16 16 | 0069d2 |             | nt_abs                               
2651:271 | DONE dir | na 16 16 | 0069d2 | (2 bytes)   |         .byte 3, { PW + NC }         
2651:271 | DONE dir | na 16 16 |        |             |                 03 09                    --  . 	
2651:272 | DONE dir | na 16 16 | 0069d4 | (6 bytes)   |         .word nt_2dup, xt_abs, 00622f 
2651:272 | DONE dir | na 16 16 |        |             |                 c6 69 27 62 2f 62        --  . i ' b / b
2651:273 | DONE dir | na 16 16 | 0069da | (3 bytes)   |         .byte 61, 62, 73             
2651:273 | DONE dir | na 16 16 |        |             |                 61 62 73                 --  a b s
2651:274 | DONE wsp | na 16 16 |        |             |
2651:275 | DONE lbl | na 16 16 | 0069dd |             | nt_state                             
2651:276 | DONE dir | na 16 16 | 0069dd | (2 bytes)   |         .byte 5, { PW + NC }         
2651:276 | DONE dir | na 16 16 |        |             |                 05 09                    --  . 	
2651:277 | DONE dir | na 16 16 | 0069df | (6 bytes)   |         .word nt_abs, xt_state, 006721 
2651:277 | DONE dir | na 16 16 |        |             |                 d2 69 1a 67 21 67        --  . i . g ! g
2651:278 | DONE dir | na 16 16 | 0069e5 | (5 bytes)   |         .byte 73, 74, 61, 74, 65     
2651:278 | DONE dir | na 16 16 |        |             |                 73 74 61 74 65           --  s t a t e
2651:279 | DONE wsp | na 16 16 |        |             |
2651:280 | DONE lbl | na 16 16 | 0069ea |             | nt_to-in                             
2651:281 | DONE dir | na 16 16 | 0069ea | (2 bytes)   |         .byte 3, { PW + NC }         
2651:281 | DONE dir | na 16 16 |        |             |                 03 09                    --  . 	
2651:282 | DONE dir | na 16 16 | 0069ec | (6 bytes)   |         .word nt_state, xt_to-in, 0060e6 
2651:282 | DONE dir | na 16 16 |        |             |                 dd 69 df 60 e6 60        --  . i . ` . `
2651:283 | DONE dir | na 16 16 | 0069f2 | (3 bytes)   |         .byte 3e, 69, 6e             
2651:283 | DONE dir | na 16 16 |        |             |                 3e 69 6e                 --  > i n
2651:284 | DONE wsp | na 16 16 |        |             |
2651:285 | DONE lbl | na 16 16 | 0069f5 |             | nt_source                            
2651:286 | DONE dir | na 16 16 | 0069f5 | (2 bytes)   |         .byte 6, { PW + NC }         
2651:286 | DONE dir | na 16 16 |        |             |                 06 09                    --  . 	
2651:287 | DONE dir | na 16 16 | 0069f7 | (6 bytes)   |         .word nt_to-in, xt_source, 0066fe 
2651:287 | DONE dir | na 16 16 |        |             |                 ea 69 f2 66 fe 66        --  . i . f . f
2651:288 | DONE dir | na 16 16 | 0069fd | (6 bytes)   |         .byte 73, 6f, 75, 72, 63, 65 
2651:288 | DONE dir | na 16 16 |        |             |                 73 6f 75 72 63 65        --  s o u r c e
2651:289 | DONE wsp | na 16 16 |        |             |
2651:290 | DONE lbl | na 16 16 | 006a03 |             | nt_depth                             
2651:291 | DONE dir | na 16 16 | 006a03 | (2 bytes)   |         .byte 5, { PW + NC }         
2651:291 | DONE dir | na 16 16 |        |             |                 05 09                    --  . 	
2651:292 | DONE dir | na 16 16 | 006a05 | (6 bytes)   |         .word nt_source, xt_depth, 006414 
2651:292 | DONE dir | na 16 16 |        |             |                 f5 69 06 64 14 64        --  . i . d . d
2651:293 | DONE dir | na 16 16 | 006a0b | (5 bytes)   |         .byte 64, 65, 70, 74, 68     
2651:293 | DONE dir | na 16 16 |        |             |                 64 65 70 74 68           --  d e p t h
2651:294 | DONE wsp | na 16 16 |        |             |
2651:295 | DONE lbl | na 16 16 | 006a10 |             | nt_constant                          
2651:296 | DONE dir | na 16 16 | 006a10 | (2 bytes)   |         .byte 8, { PW + NC }         
2651:296 | DONE dir | na 16 16 |        |             |                 08 09                    --  . 	
2651:297 | DONE dir | na 16 16 | 006a12 | (6 bytes)   |         .word nt_depth, xt_constant, 006376 
2651:297 | DONE dir | na 16 16 |        |             |                 03 6a 5d 63 76 63        --  . j ] c v c
2651:298 | DONE dir | na 16 16 | 006a18 | (8 bytes)   |         .byte 63, 6f, 6e, 73, 74, 61, 6e, 74 
2651:298 | DONE dir | na 16 16 |        |             |                 63 6f 6e 73 74 61 6e 74  --  c o n s t a n t
2651:298 | DONE dir | na 16 16 |        |             |                                          -- 
2651:299 | DONE wsp | na 16 16 |        |             |
2651:300 | DONE lbl | na 16 16 | 006a20 |             | nt_variable                          
2651:301 | DONE dir | na 16 16 | 006a20 | (2 bytes)   |         .byte 8, { PW + NC }         
2651:301 | DONE dir | na 16 16 |        |             |                 08 09                    --  . 	
2651:302 | DONE dir | na 16 16 | 006a22 | (6 bytes)   |         .word nt_constant, xt_variable, 006772 
2651:302 | DONE dir | na 16 16 |        |             |                 10 6a 66 67 72 67        --  . j f g r g
2651:303 | DONE dir | na 16 16 | 006a28 | (8 bytes)   |         .byte 76, 61, 72, 69, 61, 62, 6c, 65 
2651:303 | DONE dir | na 16 16 |        |             |                 76 61 72 69 61 62 6c 65  --  v a r i a b l e
2651:303 | DONE dir | na 16 16 |        |             |                                          -- 
2651:304 | DONE wsp | na 16 16 |        |             |
2651:305 | DONE lbl | na 16 16 | 006a30 |             | nt_tick                              
2651:306 | DONE dir | na 16 16 | 006a30 | (2 bytes)   |         .byte 1, { PW + NC }         
2651:306 | DONE dir | na 16 16 |        |             |                 01 09                    --  . 	
2651:307 | DONE dir | na 16 16 | 006a32 | (6 bytes)   |         .word nt_variable, xt_tick, 006226 
2651:307 | DONE dir | na 16 16 |        |             |                 20 6a 0b 62 26 62        --    j  b & b
2651:308 | DONE dir | na 16 16 | 006a38 | (1 bytes)   |         .byte 27                     hex for "'"
2651:308 | DONE dir | na 16 16 |        |             |                 27                       --  '
2651:309 | DONE wsp | na 16 16 |        |             |
2651:310 | DONE lbl | na 16 16 | 006a39 |             | nt_min                               
2651:311 | DONE dir | na 16 16 | 006a39 | (2 bytes)   |         .byte 3, { PW + NC }         
2651:311 | DONE dir | na 16 16 |        |             |                 03 09                    --  . 	
2651:312 | DONE dir | na 16 16 | 006a3b | (6 bytes)   |         .word nt_tick, xt_min, 00655d 
2651:312 | DONE dir | na 16 16 |        |             |                 30 6a 4b 65 5d 65        --  0 j K e ] e
2651:313 | DONE dir | na 16 16 | 006a41 | (3 bytes)   |         .byte 6d, 69, 6e             
2651:313 | DONE dir | na 16 16 |        |             |                 6d 69 6e                 --  m i n
2651:314 | DONE wsp | na 16 16 |        |             |
2651:315 | DONE lbl | na 16 16 | 006a44 |             | nt_max                               
2651:316 | DONE dir | na 16 16 | 006a44 | (2 bytes)   |         .byte 3, { PW + NC }         
2651:316 | DONE dir | na 16 16 |        |             |                 03 09                    --  . 	
2651:317 | DONE dir | na 16 16 | 006a46 | (6 bytes)   |         .word nt_min, xt_max, 00654a 
2651:317 | DONE dir | na 16 16 |        |             |                 39 6a 38 65 4a 65        --  9 j 8 e J e
2651:318 | DONE dir | na 16 16 | 006a4c | (3 bytes)   |         .byte 6d, 61, 78             
2651:318 | DONE dir | na 16 16 |        |             |                 6d 61 78                 --  m a x
2651:319 | DONE wsp | na 16 16 |        |             |
2651:320 | DONE lbl | na 16 16 | 006a4f |             | nt_negate                            
2651:321 | DONE dir | na 16 16 | 006a4f | (2 bytes)   |         .byte 6, { PW + NC }         
2651:321 | DONE dir | na 16 16 |        |             |                 06 09                    --  . 	
2651:322 | DONE dir | na 16 16 | 006a51 | (6 bytes)   |         .word nt_max, xt_negate, 00657e 
2651:322 | DONE dir | na 16 16 |        |             |                 44 6a 78 65 7e 65        --  D j x e ~ e
2651:323 | DONE dir | na 16 16 | 006a57 | (6 bytes)   |         .byte 6e, 65, 67, 61, 74, 65 
2651:323 | DONE dir | na 16 16 |        |             |                 6e 65 67 61 74 65        --  n e g a t e
2651:324 | DONE wsp | na 16 16 |        |             |
2651:325 | DONE lbl | na 16 16 | 006a5d |             | nt_invert                            
2651:326 | DONE dir | na 16 16 | 006a5d | (2 bytes)   |         .byte 6, { PW + NC }         
2651:326 | DONE dir | na 16 16 |        |             |                 06 09                    --  . 	
2651:327 | DONE dir | na 16 16 | 006a5f | (6 bytes)   |         .word nt_negate, xt_invert, 00650b 
2651:327 | DONE dir | na 16 16 |        |             |                 4f 6a 06 65 0b 65        --  O j . e  e
2651:328 | DONE dir | na 16 16 | 006a65 | (6 bytes)   |         .byte 69, 6e, 76, 65, 72, 74 
2651:328 | DONE dir | na 16 16 |        |             |                 69 6e 76 65 72 74        --  i n v e r t
2651:329 | DONE wsp | na 16 16 |        |             |
2651:330 | DONE lbl | na 16 16 | 006a6b |             | nt_char                              
2651:331 | DONE dir | na 16 16 | 006a6b | (2 bytes)   |         .byte 4, { PW + NC }         
2651:331 | DONE dir | na 16 16 |        |             |                 04 09                    --  . 	
2651:332 | DONE dir | na 16 16 | 006a6d | (6 bytes)   |         .word nt_invert, xt_char, 006340 
2651:332 | DONE dir | na 16 16 |        |             |                 5d 6a 29 63 40 63        --  ] j ) c @ c
2651:333 | DONE dir | na 16 16 | 006a73 | (4 bytes)   |         .byte 63, 68, 61, 72         
2651:333 | DONE dir | na 16 16 |        |             |                 63 68 61 72              --  c h a r
2651:334 | DONE wsp | na 16 16 |        |             |
2651:335 | DONE lbl | na 16 16 | 006a77 |             | nt_xor                               
2651:336 | DONE dir | na 16 16 | 006a77 | (2 bytes)   |         .byte 3, { PW + NC }         
2651:336 | DONE dir | na 16 16 |        |             |                 03 09                    --  . 	
2651:337 | DONE dir | na 16 16 | 006a79 | (6 bytes)   |         .word nt_char, xt_xor, 0067a1 
2651:337 | DONE dir | na 16 16 |        |             |                 6b 6a 9b 67 a1 67        --  k j . g . g
2651:338 | DONE dir | na 16 16 | 006a7f | (3 bytes)   |         .byte 78, 6f, 72             
2651:338 | DONE dir | na 16 16 |        |             |                 78 6f 72                 --  x o r
2651:339 | DONE wsp | na 16 16 |        |             |
2651:340 | DONE lbl | na 16 16 | 006a82 |             | nt_or                                
2651:341 | DONE dir | na 16 16 | 006a82 | (2 bytes)   |         .byte 2, { PW + NC }         
2651:341 | DONE dir | na 16 16 |        |             |                 02 09                    --  . 	
2651:342 | DONE dir | na 16 16 | 006a84 | (6 bytes)   |         .word nt_xor, xt_or, 006588  
2651:342 | DONE dir | na 16 16 |        |             |                 77 6a 82 65 88 65        --  w j . e . e
2651:343 | DONE dir | na 16 16 | 006a8a | (2 bytes)   |         .byte 6f, 72                 
2651:343 | DONE dir | na 16 16 |        |             |                 6f 72                    --  o r
2651:344 | DONE wsp | na 16 16 |        |             |
2651:345 | DONE lbl | na 16 16 | 006a8c |             | nt_and                               
2651:346 | DONE dir | na 16 16 | 006a8c | (2 bytes)   |         .byte 3, { PW + NC }         
2651:346 | DONE dir | na 16 16 |        |             |                 03 09                    --  . 	
2651:347 | DONE dir | na 16 16 | 006a8e | (6 bytes)   |         .word nt_or, xt_and, 0062e3  
2651:347 | DONE dir | na 16 16 |        |             |                 82 6a dd 62 e3 62        --  . j . b . b
2651:348 | DONE dir | na 16 16 | 006a94 | (3 bytes)   |         .byte 61, 6e, 64             
2651:348 | DONE dir | na 16 16 |        |             |                 61 6e 64                 --  a n d
2651:349 | DONE wsp | na 16 16 |        |             |
2651:350 | DONE lbl | na 16 16 | 006a97 |             | nt_c-comma                           
2651:351 | DONE dir | na 16 16 | 006a97 | (2 bytes)   |         .byte 2, { PW + NC }         
2651:351 | DONE dir | na 16 16 |        |             |                 02 09                    --  . 	
2651:352 | DONE dir | na 16 16 | 006a99 | (6 bytes)   |         .word nt_and, xt_c-comma, 00630c 
2651:352 | DONE dir | na 16 16 |        |             |                 8c 6a ff 62 0c 63        --  . j . b  c
2651:353 | DONE dir | na 16 16 | 006a9f | (2 bytes)   |         .byte 63, 2c                 
2651:353 | DONE dir | na 16 16 |        |             |                 63 2c                    --  c ,
2651:354 | DONE wsp | na 16 16 |        |             |
2651:355 | DONE lbl | na 16 16 | 006aa1 |             | nt_c-fetch                           
2651:356 | DONE dir | na 16 16 | 006aa1 | (2 bytes)   |         .byte 2, { PW + NC }         
2651:356 | DONE dir | na 16 16 |        |             |                 02 09                    --  . 	
2651:357 | DONE dir | na 16 16 | 006aa3 | (6 bytes)   |         .word nt_c-comma, xt_c-fetch, 006318 
2651:357 | DONE dir | na 16 16 |        |             |                 97 6a 0d 63 18 63        --  . j  c . c
2651:358 | DONE dir | na 16 16 | 006aa9 | (2 bytes)   |         .byte 63, 40                 
2651:358 | DONE dir | na 16 16 |        |             |                 63 40                    --  c @
2651:359 | DONE wsp | na 16 16 |        |             |
2651:360 | DONE lbl | na 16 16 | 006aab |             | nt_c-store                           
2651:361 | DONE dir | na 16 16 | 006aab | (2 bytes)   |         .byte 2, { PW + NC }         
2651:361 | DONE dir | na 16 16 |        |             |                 02 09                    --  . 	
2651:362 | DONE dir | na 16 16 | 006aad | (6 bytes)   |         .word nt_c-fetch, xt_c-store, 006328 
2651:362 | DONE dir | na 16 16 |        |             |                 a1 6a 19 63 28 63        --  . j . c ( c
2651:363 | DONE dir | na 16 16 | 006ab3 | (2 bytes)   |         .byte 63, 21                 
2651:363 | DONE dir | na 16 16 |        |             |                 63 21                    --  c !
2651:364 | DONE wsp | na 16 16 |        |             |
2651:365 | DONE lbl | na 16 16 | 006ab5 |             | nt_two-star                          
2651:366 | DONE dir | na 16 16 | 006ab5 | (2 bytes)   |         .byte 2, { PW + NC }         
2651:366 | DONE dir | na 16 16 |        |             |                 02 09                    --  . 	
2651:367 | DONE dir | na 16 16 | 006ab7 | (6 bytes)   |         .word nt_c-store, xt_two-star, 0061f8 
2651:367 | DONE dir | na 16 16 |        |             |                 ab 6a f5 61 f8 61        --  . j . a . a
2651:368 | DONE dir | na 16 16 | 006abd | (2 bytes)   |         .byte 32, 2a                 
2651:368 | DONE dir | na 16 16 |        |             |                 32 2a                    --  2 *
2651:369 | DONE wsp | na 16 16 |        |             |
2651:370 | DONE lbl | na 16 16 | 006abf |             | nt_minus                             
2651:371 | DONE dir | na 16 16 | 006abf | (2 bytes)   |         .byte 1, { PW + NC }         
2651:371 | DONE dir | na 16 16 |        |             |                 01 09                    --  . 	
2651:372 | DONE dir | na 16 16 | 006ac1 | (6 bytes)   |         .word nt_two-star, xt_minus, 0061d8 
2651:372 | DONE dir | na 16 16 |        |             |                 b5 6a ce 61 d8 61        --  . j . a . a
2651:373 | DONE dir | na 16 16 | 006ac7 | (1 bytes)   |         .byte 2d                     
2651:373 | DONE dir | na 16 16 |        |             |                 2d                       --  -
2651:374 | DONE wsp | na 16 16 |        |             |
2651:375 | DONE lbl | na 16 16 | 006ac8 |             | nt_plus                              
2651:376 | DONE dir | na 16 16 | 006ac8 | (2 bytes)   |         .byte 1, { PW + NC }         
2651:376 | DONE dir | na 16 16 |        |             |                 01 09                    --  . 	
2651:377 | DONE dir | na 16 16 | 006aca | (6 bytes)   |         .word nt_minus, xt_plus, 0061cd 
2651:377 | DONE dir | na 16 16 |        |             |                 bf 6a c6 61 cd 61        --  . j . a . a
2651:378 | DONE dir | na 16 16 | 006ad0 | (1 bytes)   |         .byte 2b                     
2651:378 | DONE dir | na 16 16 |        |             |                 2b                       --  +
2651:379 | DONE wsp | na 16 16 |        |             |
2651:380 | DONE lbl | na 16 16 | 006ad1 |             | nt_one-minus                         
2651:381 | DONE dir | na 16 16 | 006ad1 | (2 bytes)   |         .byte 2, { PW + NC }         
2651:381 | DONE dir | na 16 16 |        |             |                 02 09                    --  . 	
2651:382 | DONE dir | na 16 16 | 006ad3 | (6 bytes)   |         .word nt_plus, xt_one-minus, 0061ea 
2651:382 | DONE dir | na 16 16 |        |             |                 c8 6a e9 61 ea 61        --  . j . a . a
2651:383 | DONE dir | na 16 16 | 006ad9 | (2 bytes)   |         .byte 31, 2d                 
2651:383 | DONE dir | na 16 16 |        |             |                 31 2d                    --  1 -
2651:384 | DONE wsp | na 16 16 |        |             |
2651:385 | DONE lbl | na 16 16 | 006adb |             | nt_one-plus                          
2651:386 | DONE dir | na 16 16 | 006adb | (2 bytes)   |         .byte 2, { PW + NC }         
2651:386 | DONE dir | na 16 16 |        |             |                 02 09                    --  . 	
2651:387 | DONE dir | na 16 16 | 006add | (6 bytes)   |         .word nt_one-minus, xt_one-plus, 0061ec 
2651:387 | DONE dir | na 16 16 |        |             |                 d1 6a eb 61 ec 61        --  . j . a . a
2651:388 | DONE dir | na 16 16 | 006ae3 | (2 bytes)   |         .byte 31, 2b                 
2651:388 | DONE dir | na 16 16 |        |             |                 31 2b                    --  1 +
2651:389 | DONE wsp | na 16 16 |        |             |
2651:390 | DONE lbl | na 16 16 | 006ae5 |             | nt_false                             
2651:391 | DONE dir | na 16 16 | 006ae5 | (2 bytes)   |         .byte 5, { PW + NC }         
2651:391 | DONE dir | na 16 16 |        |             |                 05 09                    --  . 	
2651:392 | DONE dir | na 16 16 | 006ae7 | (6 bytes)   |         .word nt_one-plus, xt_zero, 0061e0 
2651:392 | DONE dir | na 16 16 |        |             |                 db 6a d9 61 e0 61        --  . j . a . a
2651:393 | DONE dir | na 16 16 | 006aed | (5 bytes)   |         .byte 66, 61, 6c, 73, 65     
2651:393 | DONE dir | na 16 16 |        |             |                 66 61 6c 73 65           --  f a l s e
2651:394 | DONE wsp | na 16 16 |        |             |
2651:395 | DONE lbl | na 16 16 | 006af2 |             | nt_true                              
2651:396 | DONE dir | na 16 16 | 006af2 | (2 bytes)   |         .byte 4, { PW + NC }         
2651:396 | DONE dir | na 16 16 |        |             |                 04 09                    --  . 	
2651:397 | DONE dir | na 16 16 | 006af4 | (6 bytes)   |         .word nt_false, xt_true, 00672f 
2651:397 | DONE dir | na 16 16 |        |             |                 e5 6a 28 67 2f 67        --  . j ( g / g
2651:398 | DONE dir | na 16 16 | 006afa | (4 bytes)   |         .byte 74, 72, 75, 65         
2651:398 | DONE dir | na 16 16 |        |             |                 74 72 75 65              --  t r u e
2651:399 | DONE wsp | na 16 16 |        |             |
2651:400 | DONE lbl | na 16 16 | 006afe |             | nt_two                               
2651:401 | DONE dir | na 16 16 | 006afe | (2 bytes)   |         .byte 1, { PW + NC }         
2651:401 | DONE dir | na 16 16 |        |             |                 01 09                    --  . 	
2651:402 | DONE dir | na 16 16 | 006b00 | (6 bytes)   |         .word nt_true, xt_two, 0061f4 
2651:402 | DONE dir | na 16 16 |        |             |                 f2 6a ed 61 f4 61        --  . j . a . a
2651:403 | DONE dir | na 16 16 | 006b06 | (1 bytes)   |         .byte 32                     
2651:403 | DONE dir | na 16 16 |        |             |                 32                       --  2
2651:404 | DONE wsp | na 16 16 |        |             |
2651:405 | DONE lbl | na 16 16 | 006b07 |             | nt_one                               
2651:406 | DONE dir | na 16 16 | 006b07 | (2 bytes)   |         .byte 1, { PW + NC }         
2651:406 | DONE dir | na 16 16 |        |             |                 01 09                    --  . 	
2651:407 | DONE dir | na 16 16 | 006b09 | (6 bytes)   |         .word nt_two, xt_one, 0061e8 
2651:407 | DONE dir | na 16 16 |        |             |                 fe 6a e1 61 e8 61        --  . j . a . a
2651:408 | DONE dir | na 16 16 | 006b0f | (1 bytes)   |         .byte 31                     
2651:408 | DONE dir | na 16 16 |        |             |                 31                       --  1
2651:409 | DONE wsp | na 16 16 |        |             |
2651:410 | DONE lbl | na 16 16 | 006b10 |             | nt_zero                              
2651:411 | DONE dir | na 16 16 | 006b10 | (2 bytes)   |         .byte 1, { PW + NC }         
2651:411 | DONE dir | na 16 16 |        |             |                 01 09                    --  . 	
2651:412 | DONE dir | na 16 16 | 006b12 | (6 bytes)   |         .word nt_one, xt_zero, 0061e0 
2651:412 | DONE dir | na 16 16 |        |             |                 07 6b d9 61 e0 61        --  . k . a . a
2651:413 | DONE dir | na 16 16 | 006b18 | (1 bytes)   |         .byte 30                     
2651:413 | DONE dir | na 16 16 |        |             |                 30                       --  0
2651:414 | DONE wsp | na 16 16 |        |             |
2651:415 | DONE lbl | na 16 16 | 006b19 |             | nt_find-name                         
2651:416 | DONE dir | na 16 16 | 006b19 | (2 bytes)   |         .byte 9, 0                   
2651:416 | DONE dir | na 16 16 |        |             |                 09 00                    --  	 .
2651:417 | DONE dir | na 16 16 | 006b1b | (6 bytes)   |         .word nt_zero, xt_find-name, 0064fc 
2651:417 | DONE dir | na 16 16 |        |             |                 10 6b a6 64 fc 64        --  . k . d . d
2651:418 | DONE dir | na 16 16 | 006b21 | (9 bytes)   |         .byte 66, 69, 6e, 64, 2d, 6e, 61, 6d, 65 
2651:418 | DONE dir | na 16 16 |        |             |                 66 69 6e 64 2d 6e 61 6d  --  f i n d - n a m
2651:418 | DONE dir | na 16 16 |        |             |                 65                       --  e
2651:419 | DONE wsp | na 16 16 |        |             |
2651:420 | DONE lbl | na 16 16 | 006b2a |             | nt_refill                            
2651:421 | DONE dir | na 16 16 | 006b2a | (2 bytes)   |         .byte 6, { PW }              TODO check flags
2651:421 | DONE dir | na 16 16 |        |             |                 06 08                    --  . .
2651:422 | DONE dir | na 16 16 | 006b2c | (6 bytes)   |         .word nt_find-name, xt_refill, 006675 
2651:422 | DONE dir | na 16 16 |        |             |                 19 6b 43 66 75 66        --  . k C f u f
2651:423 | DONE dir | na 16 16 | 006b32 | (6 bytes)   |         .byte 72, 65, 66, 69, 6c, 6c 
2651:423 | DONE dir | na 16 16 |        |             |                 72 65 66 69 6c 6c        --  r e f i l l
2651:424 | DONE wsp | na 16 16 |        |             |
2651:425 | DONE lbl | na 16 16 | 006b38 |             | nt_parse-name                        
2651:426 | DONE dir | na 16 16 | 006b38 | (2 bytes)   |         .byte &10, 0                 
2651:426 | DONE dir | na 16 16 |        |             |                 0a 00                    --  
 .
2651:427 | DONE dir | na 16 16 | 006b3a | (6 bytes)   |         .word nt_refill, xt_parse-name, 00660d 
2651:427 | DONE dir | na 16 16 |        |             |                 2a 6b a9 65 0d 66        --  * k . e  f
2651:428 | DONE dir | na 16 16 | 006b40 | (10 bytes)  |         .byte 70, 61, 72, 73, 65, 2d, 6e, 61, 6d, 65 
2651:428 | DONE dir | na 16 16 |        |             |                 70 61 72 73 65 2d 6e 61  --  p a r s e - n a
2651:428 | DONE dir | na 16 16 |        |             |                 6d 65                    --  m e
2651:429 | DONE wsp | na 16 16 |        |             |
2651:430 | DONE lbl | na 16 16 | 006b4a |             | nt_source-id                         
2651:431 | DONE dir | na 16 16 | 006b4a | (2 bytes)   |         .byte 9, { PW + NC }         
2651:431 | DONE dir | na 16 16 |        |             |                 09 09                    --  	 	
2651:432 | DONE dir | na 16 16 | 006b4c | (6 bytes)   |         .word nt_parse-name, xt_source-id, 006705 
2651:432 | DONE dir | na 16 16 |        |             |                 38 6b ff 66 05 67        --  8 k . f . g
2651:433 | DONE dir | na 16 16 | 006b52 | (9 bytes)   |         .byte 73, 6f, 75, 72, 63, 65, 2d, 69, 64 
2651:433 | DONE dir | na 16 16 |        |             |                 73 6f 75 72 63 65 2d 69  --  s o u r c e - i
2651:433 | DONE dir | na 16 16 |        |             |                 64                       --  d
2651:434 | DONE wsp | na 16 16 |        |             |
2651:435 | DONE lbl | na 16 16 | 006b5b |             | nt_comma                             
2651:436 | DONE dir | na 16 16 | 006b5b | (2 bytes)   |         .byte 1, { PW + NC }         
2651:436 | DONE dir | na 16 16 |        |             |                 01 09                    --  . 	
2651:437 | DONE dir | na 16 16 | 006b5d | (6 bytes)   |         .word nt_source-id, xt_comma, 00615e 
2651:437 | DONE dir | na 16 16 |        |             |                 4a 6b 53 61 5e 61        --  J k S a ^ a
2651:438 | DONE dir | na 16 16 | 006b63 | (1 bytes)   |         .byte 2c                     
2651:438 | DONE dir | na 16 16 |        |             |                 2c                       --  ,
2651:439 | DONE wsp | na 16 16 |        |             |
2651:440 | DONE lbl | na 16 16 | 006b64 |             | nt_accept                            
2651:441 | DONE dir | na 16 16 | 006b64 | (2 bytes)   |         .byte 6, 00                  TODO check flags
2651:441 | DONE dir | na 16 16 |        |             |                 06 00                    --  . .
2651:442 | DONE dir | na 16 16 | 006b66 | (6 bytes)   |         .word nt_comma, xt_accept, 0062b3 
2651:442 | DONE dir | na 16 16 |        |             |                 5b 6b 30 62 b3 62        --  [ k 0 b . b
2651:443 | DONE dir | na 16 16 | 006b6c | (6 bytes)   |         .byte 61, 63, 63, 65, 70, 74 
2651:443 | DONE dir | na 16 16 |        |             |                 61 63 63 65 70 74        --  a c c e p t
2651:444 | DONE wsp | na 16 16 |        |             |
2651:445 | DONE lbl | na 16 16 | 006b72 |             | nt_tuck                              
2651:446 | DONE dir | na 16 16 | 006b72 | (2 bytes)   |         .byte 4, { PW + NC }         
2651:446 | DONE dir | na 16 16 |        |             |                 04 09                    --  . 	
2651:447 | DONE dir | na 16 16 | 006b74 | (6 bytes)   |         .word nt_accept, xt_tuck, 006738 
2651:447 | DONE dir | na 16 16 |        |             |                 64 6b 30 67 38 67        --  d k 0 g 8 g
2651:448 | DONE dir | na 16 16 | 006b7a | (4 bytes)   |         .byte 74, 75, 63, 6b         
2651:448 | DONE dir | na 16 16 |        |             |                 74 75 63 6b              --  t u c k
2651:449 | DONE wsp | na 16 16 |        |             |
2651:450 | DONE lbl | na 16 16 | 006b7e |             | nt_nip                               
2651:451 | DONE dir | na 16 16 | 006b7e | (2 bytes)   |         .byte 3, { PW + NC }         
2651:451 | DONE dir | na 16 16 |        |             |                 03 09                    --  . 	
2651:452 | DONE dir | na 16 16 | 006b80 | (6 bytes)   |         .word nt_tuck, xt_nip, 006581 
2651:452 | DONE dir | na 16 16 |        |             |                 72 6b 7f 65 81 65        --  r k . e . e
2651:453 | DONE dir | na 16 16 | 006b86 | (3 bytes)   |         .byte 6e, 69, 70             
2651:453 | DONE dir | na 16 16 |        |             |                 6e 69 70                 --  n i p
2651:454 | DONE wsp | na 16 16 |        |             |
2651:455 | DONE lbl | na 16 16 | 006b89 |             | nt_rot                               
2651:456 | DONE dir | na 16 16 | 006b89 | (2 bytes)   |         .byte 3, { PW + NC }         
2651:456 | DONE dir | na 16 16 |        |             |                 03 09                    --  . 	
2651:457 | DONE dir | na 16 16 | 006b8b | (6 bytes)   |         .word nt_nip, xt_rot, 00667e 
2651:457 | DONE dir | na 16 16 |        |             |                 7e 6b 76 66 7e 66        --  ~ k v f ~ f
2651:458 | DONE dir | na 16 16 | 006b91 | (3 bytes)   |         .byte 72, 6f, 74             
2651:458 | DONE dir | na 16 16 |        |             |                 72 6f 74                 --  r o t
2651:459 | DONE wsp | na 16 16 |        |             |
2651:460 | DONE lbl | na 16 16 | 006b94 |             | nt_execute                           
2651:461 | DONE dir | na 16 16 | 006b94 | (2 bytes)   |         .byte 7, { PW + NC }         
2651:461 | DONE dir | na 16 16 |        |             |                 07 09                    --  . 	
2651:462 | DONE dir | na 16 16 | 006b96 | (6 bytes)   |         .word nt_rot, xt_execute, 0064a5 
2651:462 | DONE dir | na 16 16 |        |             |                 89 6b 9b 64 a5 64        --  . k . d . d
2651:463 | DONE dir | na 16 16 | 006b9c | (7 bytes)   |         .byte 65, 78, 65, 63, 75, 74, 65 
2651:463 | DONE dir | na 16 16 |        |             |                 65 78 65 63 75 74 65     --  e x e c u t e
2651:464 | DONE wsp | na 16 16 |        |             |
2651:465 | DONE lbl | na 16 16 | 006ba3 |             | nt_here                              
2651:466 | DONE dir | na 16 16 | 006ba3 | (2 bytes)   |         .byte 4, { PW + NC }         
2651:466 | DONE dir | na 16 16 |        |             |                 04 09                    --  . 	
2651:467 | DONE dir | na 16 16 | 006ba5 | (6 bytes)   |         .word nt_execute, xt_here, 006512 
2651:467 | DONE dir | na 16 16 |        |             |                 94 6b 0c 65 12 65        --  . k  e . e
2651:468 | DONE dir | na 16 16 | 006bab | (4 bytes)   |         .byte 68, 65, 72, 65         
2651:468 | DONE dir | na 16 16 |        |             |                 68 65 72 65              --  h e r e
2651:469 | DONE wsp | na 16 16 |        |             |
2651:470 | DONE lbl | na 16 16 | 006baf |             | nt_2drop                             
2651:471 | DONE dir | na 16 16 | 006baf | (2 bytes)   |         .byte 5, { PW + NC }         
2651:471 | DONE dir | na 16 16 |        |             |                 05 09                    --  . 	
2651:472 | DONE dir | na 16 16 | 006bb1 | (6 bytes)   |         .word nt_here, xt_2drop, 0061ff 
2651:472 | DONE dir | na 16 16 |        |             |                 a3 6b f9 61 ff 61        --  . k . a . a
2651:473 | DONE dir | na 16 16 | 006bb7 | (5 bytes)   |         .byte 32, 64, 72, 6f, 70     
2651:473 | DONE dir | na 16 16 |        |             |                 32 64 72 6f 70           --  2 d r o p
2651:474 | DONE wsp | na 16 16 |        |             |
2651:475 | DONE lbl | na 16 16 | 006bbc |             | nt_over                              
2651:476 | DONE dir | na 16 16 | 006bbc | (2 bytes)   |         .byte 4, { PW + NC }         
2651:476 | DONE dir | na 16 16 |        |             |                 04 09                    --  . 	
2651:477 | DONE dir | na 16 16 | 006bbe | (6 bytes)   |         .word nt_2drop, xt_over, 00658f 
2651:477 | DONE dir | na 16 16 |        |             |                 af 6b 89 65 8f 65        --  . k . e . e
2651:478 | DONE dir | na 16 16 | 006bc4 | (4 bytes)   |         .byte 6f, 76, 65, 72         
2651:478 | DONE dir | na 16 16 |        |             |                 6f 76 65 72              --  o v e r
2651:479 | DONE wsp | na 16 16 |        |             |
2651:480 | DONE lbl | na 16 16 | 006bc8 |             | nt_fetch                             
2651:481 | DONE dir | na 16 16 | 006bc8 | (2 bytes)   |         .byte 1, { PW + NC }         
2651:481 | DONE dir | na 16 16 |        |             |                 01 09                    --  . 	
2651:482 | DONE dir | na 16 16 | 006bca | (6 bytes)   |         .word nt_over, xt_fetch, 0061af 
2651:482 | DONE dir | na 16 16 |        |             |                 bc 6b ab 61 af 61        --  . k . a . a
2651:483 | DONE dir | na 16 16 | 006bd0 | (1 bytes)   |         .byte 40                     
2651:483 | DONE dir | na 16 16 |        |             |                 40                       --  @
2651:484 | DONE wsp | na 16 16 |        |             |
2651:485 | DONE lbl | na 16 16 | 006bd1 |             | nt_store                             
2651:486 | DONE dir | na 16 16 | 006bd1 | (2 bytes)   |         .byte 1, { PW + NC }         
2651:486 | DONE dir | na 16 16 |        |             |                 01 09                    --  . 	
2651:487 | DONE dir | na 16 16 | 006bd3 | (6 bytes)   |         .word nt_fetch, xt_store, 0061aa 
2651:487 | DONE dir | na 16 16 |        |             |                 c8 6b a1 61 aa 61        --  . k . a . a
2651:488 | DONE dir | na 16 16 | 006bd9 | (1 bytes)   |         .byte 21                     
2651:488 | DONE dir | na 16 16 |        |             |                 21                       --  !
2651:489 | DONE wsp | na 16 16 |        |             |
2651:490 | DONE lbl | na 16 16 | 006bda |             | nt_swap                              
2651:491 | DONE dir | na 16 16 | 006bda | (2 bytes)   |         .byte 4, { PW + NC }         
2651:491 | DONE dir | na 16 16 |        |             |                 04 09                    --  . 	
2651:492 | DONE dir | na 16 16 | 006bdc | (6 bytes)   |         .word nt_store, xt_swap, 006727 
2651:492 | DONE dir | na 16 16 |        |             |                 d1 6b 22 67 27 67        --  . k " g ' g
2651:493 | DONE dir | na 16 16 | 006be2 | (4 bytes)   |         .byte 73, 77, 61, 70         
2651:493 | DONE dir | na 16 16 |        |             |                 73 77 61 70              --  s w a p
2651:494 | DONE wsp | na 16 16 |        |             |
2651:495 | DONE lbl | na 16 16 | 006be6 |             | nt_dup                               
2651:496 | DONE dir | na 16 16 | 006be6 | (2 bytes)   |         .byte 3, { PW + NC }         
2651:496 | DONE dir | na 16 16 |        |             |                 03 09                    --  . 	
2651:497 | DONE dir | na 16 16 | 006be8 | (6 bytes)   |         .word nt_swap, xt_dup, 006468 
2651:497 | DONE dir | na 16 16 |        |             |                 da 6b 64 64 68 64        --  . k d d h d
2651:498 | DONE dir | na 16 16 | 006bee | (3 bytes)   |         .byte 64, 75, 70             
2651:498 | DONE dir | na 16 16 |        |             |                 64 75 70                 --  d u p
2651:499 | DONE wsp | na 16 16 |        |             |
2651:500 | DONE cmt | na 16 16 |        |             | ; DROP is always the first entry in dictionary
2651:501 | DONE lbl | na 16 16 | 006bf1 |             | nt_drop                              
2651:502 | DONE dir | na 16 16 | 006bf1 | (2 bytes)   |         .byte 4, { PW + NC }         
2651:502 | DONE dir | na 16 16 |        |             |                 04 09                    --  . 	
2651:503 | DONE dir | na 16 16 | 006bf3 | (6 bytes)   |         .word nt_dup, xt_drop, 00643c 
2651:503 | DONE dir | na 16 16 |        |             |                 e6 6b 38 64 3c 64        --  . k 8 d < d
2651:504 | DONE dir | na 16 16 | 006bf9 | (4 bytes)   |         .byte 64, 72, 6f, 70         
2651:504 | DONE dir | na 16 16 |        |             |                 64 72 6f 70              --  d r o p
2651:505 | DONE wsp | na 16 16 |        |             |
2651:506 | DONE cmt | na 16 16 |        |             | ; END
2652:000 | DONE wsp | na 16 16 |        |             |
2653:000 | DONE cmt | na 16 16 |        |             | ; ===================================================================
2654:000 | DONE cmt | na 16 16 |        |             | ; CODE FIELD ROUTINES
2655:000 | DONE wsp | na 16 16 |        |             |
2656:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
2657:000 | DONE cmt | na 16 16 |        |             | ; DOCONST
2658:000 | DONE cmt | na 16 16 |        |             | ; Execute a constant: Push the data in the first two byte of the Data Field onto
2659:000 | DONE cmt | na 16 16 |        |             | ; the stack
2660:000 | DONE lbl | na 16 16 | 006bfd |             | doconst                              
2661:000 | DONE dir | na 16 16 |        |             |         .!a16                        
2662:000 | DONE dir | na 16 16 |        |             |         .!xy16                       
2663:000 | DONE ins | na 16 16 | 006bfd | ca          |                 dex                  make room on Data Stack
2664:000 | DONE ins | na 16 16 | 006bfe | ca          |                 dex                  
2665:000 | DONE ins | na 16 16 | 006bff | 94 00       |                 sty.dx 00            
2666:000 | DONE wsp | na 16 16 |        |             |
2667:000 | DONE cmt | na 16 16 |        |             |                 ; The value we need is stored two bytes after the JSR return
2668:000 | DONE cmt | na 16 16 |        |             |                 ; address, which in turn is what is on top of the Return Stack
2669:000 | DONE ins | na 16 16 | 006c01 | 68          |                 pla                  get the return address
2670:000 | DONE ins | na 16 16 | 006c02 | 85 16       |                 sta.d 000216         
2671:000 | DONE wsp | na 16 16 |        |             |
2672:000 | DONE cmt | na 16 16 |        |             |                 ; start Y as index off with 1 instead of zero because of 65816's
2673:000 | DONE cmt | na 16 16 |        |             |                 ; address handling
2674:000 | DONE ins | na 16 16 | 006c04 | a0 01 00    |                 ldy.# 0001           
2675:000 | DONE ins | na 16 16 | 006c07 | b1 16       |                 lda.diy 000216       LDA (TMP1),Y
2676:000 | DONE ins | na 16 16 | 006c09 | a8          |                 tay                  
2677:000 | DONE wsp | na 16 16 |        |             |
2678:000 | DONE ins | na 16 16 | 006c0a | 60          |                 rts                  takes us to original caller
2679:000 | DONE wsp | na 16 16 |        |             |
2680:000 | DONE wsp | na 16 16 |        |             |
2681:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
2682:000 | DONE cmt | na 16 16 |        |             | ; DODOES
2683:000 | DONE cmt | na 16 16 |        |             | ; Used in combination with DOES>'s runtime portion to actually do the work of
2684:000 | DONE cmt | na 16 16 |        |             | ; the new word. See DOES> and docs/create-does.txt for details. Uses tmp3
2685:000 | DONE lbl | na 16 16 | 006c0b |             | dodoes                               
2686:000 | DONE cmt | na 16 16 |        |             |                 ; Assumes the address of the CFA of the original defining word
2687:000 | DONE cmt | na 16 16 |        |             |                 ; (say, CONSTANT) is on the top of the Return Stack. Save it for
2688:000 | DONE cmt | na 16 16 |        |             |                 ; a later jump, adding one byte because of the way the 65816
2689:000 | DONE cmt | na 16 16 |        |             |                 ; works
2690:000 | DONE ins | na 16 16 | 006c0b | 68          |                 pla                  
2691:000 | DONE ins | na 16 16 | 006c0c | 1a          |                 inc.a                
2692:000 | DONE ins | na 16 16 | 006c0d | 85 1a       |                 sta.d 00021a         
2693:000 | DONE wsp | na 16 16 |        |             |
2694:000 | DONE cmt | na 16 16 |        |             |                 ; Next on the Return Stack should be the address of the PFA of
2695:000 | DONE cmt | na 16 16 |        |             |                 ; the calling defined word (say, the name of whatever constant we
2696:000 | DONE cmt | na 16 16 |        |             |                 ; just defined). Move this to the Data Stack, again adding one.
2697:000 | DONE ins | na 16 16 | 006c0f | ca          |                 dex                  
2698:000 | DONE ins | na 16 16 | 006c10 | ca          |                 dex                  
2699:000 | DONE ins | na 16 16 | 006c11 | 94 00       |                 sty.dx 00            
2700:000 | DONE wsp | na 16 16 |        |             |
2701:000 | DONE ins | na 16 16 | 006c13 | 7a          |                 ply                  
2702:000 | DONE ins | na 16 16 | 006c14 | c8          |                 iny                  
2703:000 | DONE wsp | na 16 16 |        |             |
2704:000 | DONE cmt | na 16 16 |        |             |                 ; This leaves the return address from the original main routine
2705:000 | DONE cmt | na 16 16 |        |             |                 ; on top of the Return Stack. We leave that untouched and jump
2706:000 | DONE cmt | na 16 16 |        |             |                 ; to the special code of the defining word. It's RTS instruction
2707:000 | DONE cmt | na 16 16 |        |             |                 ; will take us back to the main routine
2708:000 | DONE ins | na 16 16 | 006c15 | 6c 1a 02    |                 jmp.i 00021a         JMP (TMP3)
2709:000 | DONE wsp | na 16 16 |        |             |
2710:000 | DONE wsp | na 16 16 |        |             |
2711:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
2712:000 | DONE cmt | na 16 16 |        |             | ; DOVAR
2713:000 | DONE cmt | na 16 16 |        |             | ; Execute a variable: Push the address of the first bytes of the Data Field onto
2714:000 | DONE cmt | na 16 16 |        |             | ; the stack. This is called with JSR so we can pick up the address of the
2715:000 | DONE cmt | na 16 16 |        |             | ; calling variable off the 65816's Return Stack. The final RTS takes us to the
2716:000 | DONE cmt | na 16 16 |        |             | ; original caller of the routine that in turn called DOVAR. This is the default
2717:000 | DONE cmt | na 16 16 |        |             | ; routine installed with CREATE
2718:000 | DONE lbl | na 16 16 | 006c18 |             | dovar                                
2719:000 | DONE dir | na 16 16 |        |             |         .!a16                        
2720:000 | DONE dir | na 16 16 |        |             |         .!xy16                       
2721:000 | DONE ins | na 16 16 | 006c18 | ca          |                 dex                  make room on Data Stack
2722:000 | DONE ins | na 16 16 | 006c19 | ca          |                 dex                  
2723:000 | DONE ins | na 16 16 | 006c1a | 94 00       |                 sty.dx 00            
2724:000 | DONE wsp | na 16 16 |        |             |
2725:000 | DONE cmt | na 16 16 |        |             |                 ; The address we need is stored in the two bytes after the JSR
2726:000 | DONE cmt | na 16 16 |        |             |                 ; return address, which in turn is what is on top of the Return
2727:000 | DONE cmt | na 16 16 |        |             |                 ; Stack
2728:000 | DONE ins | na 16 16 | 006c1c | 7a          |                 ply                  value is now TOS
2729:000 | DONE ins | na 16 16 | 006c1d | c8          |                 iny                  add one because of 65816's address handling
2730:000 | DONE wsp | na 16 16 |        |             |
2731:000 | DONE ins | na 16 16 | 006c1e | 60          |                 rts                  takes us to original caller
2732:000 | DONE wsp | na 16 16 |        |             |
2733:000 | DONE wsp | na 16 16 |        |             |
2734:000 | DONE cmt | na 16 16 |        |             | ; ===================================================================
2735:000 | DONE cmt | na 16 16 |        |             | ; LOW LEVEL HELPER FUNCTIONS
2736:000 | DONE wsp | na 16 16 |        |             |
2737:000 | DONE wsp | na 16 16 |        |             |
2738:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
2739:000 | DONE cmt | na 16 16 |        |             | ; COMPILE OR EXECUTE (AKA INTERPRET)
2740:000 | DONE cmt | na 16 16 |        |             | ; Core routine for interpreter called by EVALUATE and QUIT. We process one line
2741:000 | DONE cmt | na 16 16 |        |             | ; only. Assumes that address of name is in cib and length of whole input
2742:000 | DONE cmt | na 16 16 |        |             | ; string is in ciblen
2743:000 | DONE lbl | na 16 16 | 006c1f |             | compex                               
2744:000 | DONE lbl | na 16 16 | 006c1f |             | compex_loop                          
2745:000 | DONE dir | na 16 16 |        |             |         .!a16                        
2746:000 | DONE dir | na 16 16 |        |             |         .!xy16                       
2747:000 | DONE cmt | na 16 16 |        |             |                 ; Normally we would use PARSE here with the SPACE character as
2748:000 | DONE cmt | na 16 16 |        |             |                 ; a parameter (PARSE replaces WORD in modern Forths). However,
2749:000 | DONE cmt | na 16 16 |        |             |                 ; Gforth's PARSE-NAME makes more sense as it uses spaces as
2750:000 | DONE cmt | na 16 16 |        |             |                 ; delimiters per default and skips any leading spaces, which
2751:000 | DONE cmt | na 16 16 |        |             |                 ; PARSE doesn't
2752:000 | DONE ins | na 16 16 | 006c1f | 20 a9 65    |                 jsr 0065a9           ( "string" -- addr u )
2753:000 | DONE wsp | na 16 16 |        |             |
2754:000 | DONE cmt | na 16 16 |        |             |                 ; TODO decide if we want to make a copy of the string here so
2755:000 | DONE cmt | na 16 16 |        |             |                 ; that we can provide a better error message
2756:000 | DONE wsp | na 16 16 |        |             |
2757:000 | DONE cmt | na 16 16 |        |             |                 ; If PARSE-NAME returns 0 (empty line), no characters were left
2758:000 | DONE cmt | na 16 16 |        |             |                 ; in the line and we need to go get a new line
2759:000 | DONE ins | na 16 16 | 006c22 | 98          |                 tya                  force flag check
2760:000 | DONE ins | na 16 16 | 006c23 | f0 3f       |                 beq 006c64           
2761:000 | DONE wsp | na 16 16 |        |             |
2762:000 | DONE cmt | na 16 16 |        |             |                 ; We let the user input words in any case, but use lower case
2763:000 | DONE cmt | na 16 16 |        |             |                 ; internally (sorry, Garth).
2764:000 | DONE ins | na 16 16 | 006c25 | 20 ca 6c    |                 jsr 006cca           
2765:000 | DONE wsp | na 16 16 |        |             |
2766:000 | DONE cmt | na 16 16 |        |             |                 ; Go to FIND-NAME to see if this is a word we know
2767:000 | DONE ins | na 16 16 | 006c28 | 20 a6 64    |                 jsr 0064a6           ( addr u -- nt | 0 )
2768:000 | DONE wsp | na 16 16 |        |             |
2769:000 | DONE cmt | na 16 16 |        |             |                 ; a zero signals that we didn't find a word in the Dictionary
2770:000 | DONE ins | na 16 16 | 006c2b | 98          |                 tya                  
2771:000 | DONE ins | na 16 16 | 006c2c | d0 06       |                 bne 006c34           
2772:000 | DONE wsp | na 16 16 |        |             |
2773:000 | DONE cmt | na 16 16 |        |             |                 ; TODO No name token, try NUMBER CONVERSION
2774:000 | DONE wsp | na 16 16 |        |             |
2775:000 | DONE cmt | na 16 16 |        |             |                 ; Number conversion has failed, which means the user screwed up,
2776:000 | DONE cmt | na 16 16 |        |             |                 ; so complain and abort
2777:000 | DONE cmt | na 16 16 |        |             |                 ; TODO see if we can print the offending string first
2778:000 | DONE ins | na 16 16 | 006c2e | a9 2a 6f    |                 lda.# 006f2a         "Unknown word"
2779:000 | DONE ins | na 16 16 | 006c31 | 4c 91 6c    |                 jmp 006c91           
2780:000 | DONE wsp | na 16 16 |        |             |
2781:000 | DONE lbl | na 16 16 | 006c34 |             | compex_got_name_token                
2782:000 | DONE cmt | na 16 16 |        |             |                 ; We have a known word's nt as TOS. We're going to need its xt
2783:000 | DONE cmt | na 16 16 |        |             |                 ; though, which is four byte father down. This is a quicker
2784:000 | DONE cmt | na 16 16 |        |             |                 ; version of NAME>INT. But first, save a version of nt for
2785:000 | DONE cmt | na 16 16 |        |             |                 ; error handling and compilation stuff.
2786:000 | DONE ins | na 16 16 | 006c34 | 84 16       |                 sty.d 000216         
2787:000 | DONE ins | na 16 16 | 006c36 | c8          |                 iny                  
2788:000 | DONE ins | na 16 16 | 006c37 | c8          |                 iny                  
2789:000 | DONE ins | na 16 16 | 006c38 | c8          |                 iny                  
2790:000 | DONE ins | na 16 16 | 006c39 | c8          |                 iny                  
2791:000 | DONE ins | na 16 16 | 006c3a | b9 00 00    |                 lda.y 0000           LDA $0000,Y
2792:000 | DONE ins | na 16 16 | 006c3d | a8          |                 tay                  xt is TOS
2793:000 | DONE wsp | na 16 16 |        |             |
2794:000 | DONE cmt | na 16 16 |        |             |                 ; See if we are in interpret or compile mode
2795:000 | DONE ins | na 16 16 | 006c3e | a5 14       |                 lda.d 000214         
2796:000 | DONE ins | na 16 16 | 006c40 | d0 14       |                 bne 006c56           
2797:000 | DONE wsp | na 16 16 |        |             |
2798:000 | DONE cmt | na 16 16 |        |             |                 ; We are interpreting, so EXECUTE the xt that is TOS. First,
2799:000 | DONE cmt | na 16 16 |        |             |                 ; though, see if this isn't a compile-only word, which would be
2800:000 | DONE cmt | na 16 16 |        |             |                 ; illegal.
2801:000 | DONE ins | na 16 16 | 006c42 | b2 16       |                 lda.di 000216        
2802:000 | DONE ins | na 16 16 | 006c44 | eb          |                 xba                  flags are MSB
2803:000 | DONE ins | na 16 16 | 006c45 | 29 04 00    |                 and.# CO             mask everything but Compile Only bit
2804:000 | DONE ins | na 16 16 | 006c48 | f0 06       |                 beq 006c50           
2805:000 | DONE wsp | na 16 16 |        |             |
2806:000 | DONE cmt | na 16 16 |        |             |                 ; TODO see if we can print offending word first
2807:000 | DONE ins | na 16 16 | 006c4a | a9 1c 6e    |                 lda.# 006e1c         
2808:000 | DONE ins | na 16 16 | 006c4d | 4c 91 6c    |                 jmp 006c91           
2809:000 | DONE wsp | na 16 16 |        |             |
2810:000 | DONE lbl | na 16 16 | 006c50 |             | compex_interpret                     
2811:000 | DONE cmt | na 16 16 |        |             |                 ; We JSR to EXECUTE instead of calling the xt directly because
2812:000 | DONE cmt | na 16 16 |        |             |                 ; the RTS of the word we're executing will bring us back here,
2813:000 | DONE cmt | na 16 16 |        |             |                 ; skipping EXECUTE completely during RTS. If we were to execute
2814:000 | DONE cmt | na 16 16 |        |             |                 ; xt directly, we have to fool around with the Return Stack
2815:000 | DONE cmt | na 16 16 |        |             |                 ; instead, which is actually slightly slower
2816:000 | DONE ins | na 16 16 | 006c50 | 20 9b 64    |                 jsr 00649b           
2817:000 | DONE wsp | na 16 16 |        |             |
2818:000 | DONE cmt | na 16 16 |        |             |                 ; That's quite enough for this word, let's get the next one
2819:000 | DONE ins | na 16 16 | 006c53 | 4c 1f 6c    |                 jmp 006c1f           
2820:000 | DONE wsp | na 16 16 |        |             |
2821:000 | DONE lbl | na 16 16 | 006c56 |             | compex_compile                       
2822:000 | DONE cmt | na 16 16 |        |             |                 ; We're compiling. However, we need to see if this is an
2823:000 | DONE cmt | na 16 16 |        |             |                 ; IMMEDIATE word, which would mean we execute it right now even
2824:000 | DONE cmt | na 16 16 |        |             |                 ; during compilation mode. Fortunately, we saved the nt so life
2825:000 | DONE cmt | na 16 16 |        |             |                 ; is easier
2826:000 | DONE ins | na 16 16 | 006c56 | b2 16       |                 lda.di 000216        
2827:000 | DONE ins | na 16 16 | 006c58 | eb          |                 xba                  flags are MSB
2828:000 | DONE ins | na 16 16 | 006c59 | 29 02 00    |                 and.# IM             Mask all but IM bit
2829:000 | DONE ins | na 16 16 | 006c5c | d0 f2       |                 bne 006c50           IMMEDIATE word, execute right now
2830:000 | DONE wsp | na 16 16 |        |             |
2831:000 | DONE cmt | na 16 16 |        |             |                 ; Compile the xt into the Dictionary with COMPILE,
2832:000 | DONE ins | na 16 16 | 006c5e | 20 4a 63    |                 jsr 00634a           
2833:000 | DONE wsp | na 16 16 |        |             |
2834:000 | DONE ins | na 16 16 | 006c61 | 4c 1f 6c    |                 jmp 006c1f           
2835:000 | DONE wsp | na 16 16 |        |             |
2836:000 | DONE lbl | na 16 16 | 006c64 |             | compex_line_done                     
2837:000 | DONE cmt | na 16 16 |        |             |                 ; drop stuff from PARSE_NAME
2838:000 | DONE ins | na 16 16 | 006c64 | b4 02       |                 ldy.dx 02            
2839:000 | DONE ins | na 16 16 | 006c66 | e8          |                 inx                  
2840:000 | DONE ins | na 16 16 | 006c67 | e8          |                 inx                  
2841:000 | DONE ins | na 16 16 | 006c68 | e8          |                 inx                  
2842:000 | DONE ins | na 16 16 | 006c69 | e8          |                 inx                  
2843:000 | DONE wsp | na 16 16 |        |             |
2844:000 | DONE ins | na 16 16 | 006c6a | 60          |                 rts                  
2845:000 | DONE wsp | na 16 16 |        |             |
2846:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
2847:000 | DONE cmt | na 16 16 |        |             | ; COMPILE WORDS, JUMPS AND SUBROUTINE JUMPS INTO CODE
2848:000 | DONE cmt | na 16 16 |        |             | ; These three routines compile instructions such as "jsr xt_words" into a word
2849:000 | DONE cmt | na 16 16 |        |             | ; at compile time so they are available at run time. Use by pushing the word or
2850:000 | DONE cmt | na 16 16 |        |             | ; address to be compiled on the Return Stack with
2851:000 | DONE cmt | na 16 16 |        |             | ;
2852:000 | DONE cmt | na 16 16 |        |             | ;       phe.# <WORD>    ; PEA <WORD>
2853:000 | DONE cmt | na 16 16 |        |             | ;
2854:000 | DONE cmt | na 16 16 |        |             | ; Followed by a jump to which ever versions we need. Words that use this routine
2855:000 | DONE cmt | na 16 16 |        |             | ; may not be natively compiled. We use "cmpl" as not to confuse these routines
2856:000 | DONE cmt | na 16 16 |        |             | ; with the COMPILE, word. This routine uses tmptos
2857:000 | DONE cmt | na 16 16 |        |             | ; TODO see if we need to add a JSR.L variant at some point
2858:000 | DONE wsp | na 16 16 |        |             |
2859:000 | DONE dir | na 16 16 |        |             |         .!a16                        paranoid
2860:000 | DONE lbl | na 16 16 | 006c6b |             | cmpl_word                            
2861:000 | DONE ins | na 16 16 | 006c6b | a9 00 00    |                 lda.# 0000           zero value as a flag, compile word only
2862:000 | DONE ins | na 16 16 | 006c6e | 80 08       |                 bra 006c78           
2863:000 | DONE lbl | na 16 16 | 006c70 |             | cmpl_subroutine                      
2864:000 | DONE ins | na 16 16 | 006c70 | a9 20 00    |                 lda.# 0020           compile "JSR" opcode first
2865:000 | DONE ins | na 16 16 | 006c73 | 80 03       |                 bra 006c78           
2866:000 | DONE lbl | na 16 16 | 006c75 |             | cmpl_jump                            
2867:000 | DONE ins | na 16 16 | 006c75 | a9 4c 00    |                 lda.# 004c           compile "JMP", fall through to cmpl_common
2868:000 | DONE lbl | na 16 16 | 006c78 |             | cmpl_common                          
2869:000 | DONE cmt | na 16 16 |        |             |                 ; we're going to need the Y register to get anything done
2870:000 | DONE ins | na 16 16 | 006c78 | 84 06       |                 sty.d 000206         
2871:000 | DONE wsp | na 16 16 |        |             |
2872:000 | DONE ins | na 16 16 | 006c7a | a8          |                 tay                  force flag check
2873:000 | DONE ins | na 16 16 | 006c7b | f0 08       |                 beq 006c85           came in through cmpl_word, just compile body
2874:000 | DONE wsp | na 16 16 |        |             |
2875:000 | DONE cmt | na 16 16 |        |             |                 ; A contains an opcode that must be compiled first. This is an
2876:000 | DONE cmt | na 16 16 |        |             |                 ; optimized version of C, ("c-comma")
2877:000 | DONE ins | na 16 16 | 006c7d | e2 20       |                 sep 20               
2877:001 | DONE ctl | na  8 16 |        |             |         .!a8
2878:000 | DONE ins | na  8 16 | 006c7f | 92 00       |                 sta.di 000200        STA (CP)
2879:000 | DONE ins | na  8 16 | 006c81 | c2 20       |                 rep 20               
2879:001 | DONE ctl | na 16 16 |        |             |         .!a16
2880:000 | DONE ins | na 16 16 | 006c83 | e6 00       |                 inc.d 000200         fall through to cmpl_body
2881:000 | DONE lbl | na 16 16 | 006c85 |             | cmpl_body                            
2882:000 | DONE ins | na 16 16 | 006c85 | 7a          |                 ply                  the return address we'll need later
2883:000 | DONE wsp | na 16 16 |        |             |
2884:000 | DONE ins | na 16 16 | 006c86 | 68          |                 pla                  next value on stack is the word to compile
2885:000 | DONE ins | na 16 16 | 006c87 | 92 00       |                 sta.di 000200        this is a quicker version of , ("comma")
2886:000 | DONE ins | na 16 16 | 006c89 | e6 00       |                 inc.d 000200         
2887:000 | DONE ins | na 16 16 | 006c8b | e6 00       |                 inc.d 000200         
2888:000 | DONE wsp | na 16 16 |        |             |
2889:000 | DONE ins | na 16 16 | 006c8d | 5a          |                 phy                  make sure we can get back home
2890:000 | DONE wsp | na 16 16 |        |             |
2891:000 | DONE ins | na 16 16 | 006c8e | a4 06       |                 ldy.d 000206         restore Data Stack
2892:000 | DONE wsp | na 16 16 |        |             |
2893:000 | DONE ins | na 16 16 | 006c90 | 60          |                 rts                  
2894:000 | DONE wsp | na 16 16 |        |             |
2895:000 | DONE wsp | na 16 16 |        |             |
2896:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
2897:000 | DONE cmt | na 16 16 |        |             | ; FATAL ERROR
2898:000 | DONE cmt | na 16 16 |        |             | ; Take address of error string from A, print it and then call abort
2899:000 | DONE lbl | na 16 16 | 006c91 |             | error                                
2900:000 | DONE ins | na 16 16 | 006c91 | 20 97 6c    |                 jsr 006c97           
2901:000 | DONE ins | na 16 16 | 006c94 | 4c 97 60    |                 jmp 006097           
2902:000 | DONE wsp | na 16 16 |        |             |
2903:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
2904:000 | DONE cmt | na 16 16 |        |             | ; Print a zero terminated string to the console, adding a CR character. Takes
2905:000 | DONE cmt | na 16 16 |        |             | ; the address of the string in 16-bit A register, calls put_chr.  A is
2906:000 | DONE cmt | na 16 16 |        |             | ; destroyed. We could probably figure out some way to use TYPE instead, but zero
2907:000 | DONE cmt | na 16 16 |        |             | ; terminated strings are easier for the 65816 to use.
2908:000 | DONE cmt | na 16 16 |        |             | ; TODO add version without final line feed
2909:000 | DONE lbl | na 16 16 | 006c97 |             | print_string                         
2910:000 | DONE dir | na 16 16 |        |             |         .!a16                        
2911:000 | DONE dir | na 16 16 |        |             |         .!xy16                       
2912:000 | DONE cmt | na 16 16 |        |             |                 ; don't use tmpdsp for X because we don't know if the user has
2913:000 | DONE cmt | na 16 16 |        |             |                 ; used it for something already
2914:000 | DONE ins | na 16 16 | 006c97 | da          |                 phx                  
2915:000 | DONE ins | na 16 16 | 006c98 | aa          |                 tax                  x16 contains address of string
2916:000 | DONE lbl | na 16 16 | 006c99 |             | @                                    
2917:000 | DONE ins | na 16 16 | 006c99 | e2 20       |                 sep 20               
2917:001 | DONE ctl | na  8 16 |        |             |         .!a8
2918:000 | DONE ins | na  8 16 | 006c9b | bd 00 00    |                 lda.x 0000           LDA $0000,X
2919:000 | DONE ins | na  8 16 | 006c9e | f0 06       |                 beq 006ca6           
2920:000 | DONE ins | na  8 16 | 006ca0 | 20 36 60    |                 jsr 006036           
2921:000 | DONE ins | na  8 16 | 006ca3 | e8          |                 inx                  
2922:000 | DONE ins | na  8 16 | 006ca4 | 80 f3       |                 bra 006c99           
2923:000 | DONE wsp | na  8 16 |        |             |
2924:000 | DONE lbl | na  8 16 | 006ca6 |             | print_string_done                    
2925:000 | DONE ins | na  8 16 | 006ca6 | a9 0a       |                 lda.# AscLF          should be CR on some systems
2926:000 | DONE ins | na  8 16 | 006ca8 | 20 36 60    |                 jsr 006036           
2927:000 | DONE ins | na  8 16 | 006cab | c2 20       |                 rep 20               
2927:001 | DONE ctl | na 16 16 |        |             |         .!a16
2928:000 | DONE ins | na 16 16 | 006cad | fa          |                 plx                  
2929:000 | DONE ins | na 16 16 | 006cae | 60          |                 rts                  
2930:000 | DONE wsp | na 16 16 |        |             |
2931:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
2932:000 | DONE cmt | na 16 16 |        |             | ; CONVERT BYTE TO ASCII
2933:000 | DONE cmt | na 16 16 |        |             | ; Convert byte in A to two ASCII hex digits and print them. Calls
2934:000 | DONE cmt | na 16 16 |        |             | ; nibble_to_ascii. Assumes A is 8 bit.
2935:000 | DONE lbl | na 16 16 | 006caf |             | byte_to_ascii                        
2936:000 | DONE ins | na 16 16 | 006caf | 48          |                 pha                  
2937:000 | DONE cmt | na 16 16 |        |             |                 ; convert high nibble first
2938:000 | DONE ins | na 16 16 | 006cb0 | 4a          |                 lsr.a                
2939:000 | DONE ins | na 16 16 | 006cb1 | 4a          |                 lsr.a                
2940:000 | DONE ins | na 16 16 | 006cb2 | 4a          |                 lsr.a                
2941:000 | DONE ins | na 16 16 | 006cb3 | 4a          |                 lsr.a                
2942:000 | DONE ins | na 16 16 | 006cb4 | 20 b8 6c    |                 jsr 006cb8           
2943:000 | DONE wsp | na 16 16 |        |             |
2944:000 | DONE ins | na 16 16 | 006cb7 | 68          |                 pla                  
2945:000 | DONE wsp | na 16 16 |        |             |
2946:000 | DONE cmt | na 16 16 |        |             |                 ; fall thru to nibble_to_ascii
2947:000 | DONE wsp | na 16 16 |        |             |
2948:000 | DONE wsp | na 16 16 |        |             |
2949:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
2950:000 | DONE cmt | na 16 16 |        |             | ; CONVERT NIBBLE TO ASCII
2951:000 | DONE cmt | na 16 16 |        |             | ; Converts the lower nibble of a number in A and returns the ASCII character
2952:000 | DONE cmt | na 16 16 |        |             | ; number, then prints it. Assumes A is 8 bit
2953:000 | DONE lbl | na 16 16 | 006cb8 |             | nibble_to_ascii                      
2954:000 | DONE ins | na 16 16 | 006cb8 | 29 0f 00    |                 and.# 000f           
2955:000 | DONE ins | na 16 16 | 006cbb | 09 30 00    |                 ora.# 30             
2956:000 | DONE ins | na 16 16 | 006cbe | c9 3a 00    |                 cmp.# 003a           '9' + 1
2957:000 | DONE ins | na 16 16 | 006cc1 | 90 03       |                 bcc 006cc6           
2958:000 | DONE ins | na 16 16 | 006cc3 | 69 06 00    |                 adc.# 0006           
2959:000 | DONE lbl | na 16 16 | 006cc6 |             | @                                    
2960:000 | DONE ins | na 16 16 | 006cc6 | 20 36 60    |                 jsr 006036           
2961:000 | DONE dir | na 16 16 |        |             |         .!a16                        
2962:000 | DONE ins | na 16 16 | 006cc9 | 60          |                 rts                  
2963:000 | DONE wsp | na 16 16 |        |             |
2964:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
2965:000 | DONE cmt | na 16 16 |        |             | ; Convert a string given by ( addr u ) to lowercase in place. Since we have to
2966:000 | DONE cmt | na 16 16 |        |             | ; treat the input buffer as read-only by ANS rules, we have to put the converted
2967:000 | DONE cmt | na 16 16 |        |             | ; string somewhere and then return the new address and length
2968:000 | DONE lbl | na 16 16 | 006cca |             | string_to_lowercase                  
2969:000 | DONE cmt | na 16 16 |        |             |                 ; TODO CODE THIS
2970:000 | DONE ins | na 16 16 | 006cca | 60          |                 rts                  
2971:000 | DONE wsp | na 16 16 |        |             |
2972:000 | DONE wsp | na 16 16 |        |             |
2973:000 | DONE cmt | na 16 16 |        |             | ; ===================================================================
2974:000 | DONE cmt | na 16 16 |        |             | ; HIGH-LEVEL WORDS
2975:000 | DONE wsp | na 16 16 |        |             |
2976:000 | DONE cmt | na 16 16 |        |             | ; These are executed during start up. Remember that we have to put a space at
2977:000 | DONE cmt | na 16 16 |        |             | ; the end of the line if there is another line with code following it. No zero
2978:000 | DONE cmt | na 16 16 |        |             | ; or CR/LF is required
2979:000 | DONE lbl | na 16 16 | 006ccb |             | hi-start                             
2980:000 | DONE cmt | na 16 16 |        |             |         ; High level definitions
2981:000 | DONE dir | na 16 16 | 006ccb | (37 bytes)  |         .byte 3a, 20, 28, 20, 5b, 63, 68, 61, 72, 5d, 20, 29, 20, (...) ( "parens"
2981:000 | DONE dir | na 16 16 |        |             |                 3a 20 28 20 5b 63 68 61  --  :   (   [ c h a
2981:000 | DONE dir | na 16 16 |        |             |                 72 5d 20 29 20 70 61 72  --  r ]   )   p a r
2981:000 | DONE dir | na 16 16 |        |             |                 73 65 20 32 64 72 6f 70  --  s e   2 d r o p
2981:000 | DONE dir | na 16 16 |        |             |                 20 3b 20 69 6d 6d 65 64  --    ;   i m m e d
2981:000 | DONE dir | na 16 16 |        |             |                 69 61 74 65 20           --  i a t e  
2982:000 | DONE dir | na 16 16 | 006cf0 | (37 bytes)  |         .byte 3a, 20, 2e, 28, 20, 5b, 63, 68, 61, 72, 5d, 20, 29, (...) .( "dotparens"
2982:000 | DONE dir | na 16 16 |        |             |                 3a 20 2e 28 20 5b 63 68  --  :   . (   [ c h
2982:000 | DONE dir | na 16 16 |        |             |                 61 72 5d 20 29 20 70 61  --  a r ]   )   p a
2982:000 | DONE dir | na 16 16 |        |             |                 72 73 65 20 74 79 70 65  --  r s e   t y p e
2982:000 | DONE dir | na 16 16 |        |             |                 20 3b 20 69 6d 6d 65 64  --    ;   i m m e d
2982:000 | DONE dir | na 16 16 |        |             |                 69 61 74 65 20           --  i a t e  
2983:000 | DONE cmt | na 16 16 |        |             | ;       .byte ": s", &34, " [char] ", &34, " parse postpone sliteral ; immediate "
2984:000 | DONE wsp | na 16 16 |        |             |
2985:000 | DONE cmt | na 16 16 |        |             |         ; Splash strings
2986:000 | DONE dir | na 16 16 | 006d15 | (35 bytes)  |         .byte 2e, 28, 20, 4c, 69, 61, 72, 61, 20, 46, 6f, 72, 74, (...) 
2986:000 | DONE dir | na 16 16 |        |             |                 2e 28 20 4c 69 61 72 61  --  . (   L i a r a
2986:000 | DONE dir | na 16 16 |        |             |                 20 46 6f 72 74 68 20 66  --    F o r t h   f
2986:000 | DONE dir | na 16 16 |        |             |                 6f 72 20 74 68 65 20 57  --  o r   t h e   W
2986:000 | DONE dir | na 16 16 |        |             |                 36 35 43 32 36 35 53 58  --  6 5 C 2 6 5 S X
2986:000 | DONE dir | na 16 16 |        |             |                 42 20 29                 --  B   )
2987:000 | DONE dir | na 16 16 | 006d38 | (37 bytes)  |         .byte 63, 72, 20, 2e, 28, 20, 56, 65, 72, 73, 69, 6f, 6e, (...) 
2987:000 | DONE dir | na 16 16 |        |             |                 63 72 20 2e 28 20 56 65  --  c r   . (   V e
2987:000 | DONE dir | na 16 16 |        |             |                 72 73 69 6f 6e 20 50 52  --  r s i o n   P R
2987:000 | DONE dir | na 16 16 |        |             |                 45 2d 41 4c 50 48 41 20  --  E - A L P H A  
2987:000 | DONE dir | na 16 16 |        |             |                 31 37 2e 20 46 65 62 20  --  1 7 .   F e b  
2987:000 | DONE dir | na 16 16 |        |             |                 32 30 31 37 29           --  2 0 1 7 )
2988:000 | DONE dir | na 16 16 | 006d5d | (51 bytes)  |         .byte 63, 72, 20, 2e, 28, 20, 53, 63, 6f, 74, 20, 57, 2e, (...) 
2988:000 | DONE dir | na 16 16 |        |             |                 63 72 20 2e 28 20 53 63  --  c r   . (   S c
2988:000 | DONE dir | na 16 16 |        |             |                 6f 74 20 57 2e 20 53 74  --  o t   W .   S t
2988:000 | DONE dir | na 16 16 |        |             |                 65 76 65 6e 73 6f 6e 20  --  e v e n s o n  
2988:000 | DONE dir | na 16 16 |        |             |                 3c 73 63 6f 74 2e 73 74  --  < s c o t . s t
2988:000 | DONE dir | na 16 16 |        |             |                 65 76 65 6e 73 6f 6e 40  --  e v e n s o n @
2988:000 | DONE dir | na 16 16 |        |             |                 67 6d 61 69 6c 2e 63 6f  --  g m a i l . c o
2988:000 | DONE dir | na 16 16 |        |             |                 6d 3e 29                 --  m > )
2989:000 | DONE dir | na 16 16 | 006d90 | (52 bytes)  |         .byte 63, 72, 20, 2e, 28, 20, 4c, 69, 61, 72, 61, 20, 46, (...) 
2989:000 | DONE dir | na 16 16 |        |             |                 63 72 20 2e 28 20 4c 69  --  c r   . (   L i
2989:000 | DONE dir | na 16 16 |        |             |                 61 72 61 20 46 6f 72 74  --  a r a   F o r t
2989:000 | DONE dir | na 16 16 |        |             |                 68 20 63 6f 6d 65 73 20  --  h   c o m e s  
2989:000 | DONE dir | na 16 16 |        |             |                 77 69 74 68 20 61 62 73  --  w i t h   a b s
2989:000 | DONE dir | na 16 16 |        |             |                 6f 6c 75 74 65 6c 79 20  --  o l u t e l y  
2989:000 | DONE dir | na 16 16 |        |             |                 4e 4f 20 57 41 52 52 41  --  N O   W A R R A
2989:000 | DONE dir | na 16 16 |        |             |                 4e 54 59 29              --  N T Y )
2990:000 | DONE dir | na 16 16 | 006dc4 | (28 bytes)  |         .byte 63, 72, 20, 2e, 28, 20, 54, 79, 70, 65, 20, 27, 62, (...) 
2990:000 | DONE dir | na 16 16 |        |             |                 63 72 20 2e 28 20 54 79  --  c r   . (   T y
2990:000 | DONE dir | na 16 16 |        |             |                 70 65 20 27 62 79 65 27  --  p e   ' b y e '
2990:000 | DONE dir | na 16 16 |        |             |                 20 74 6f 20 65 78 69 74  --    t o   e x i t
2990:000 | DONE dir | na 16 16 |        |             |                 29 20 63 72              --  )   c r
2991:000 | DONE lbl | na 16 16 | 006de0 |             | hi-end                               
2992:000 | DONE wsp | na 16 16 |        |             |
2993:000 | DONE wsp | na 16 16 |        |             |
2994:000 | DONE cmt | na 16 16 |        |             | ; ===================================================================
2995:000 | DONE cmt | na 16 16 |        |             | ; BOTTOM INCLUDES
2996:000 | DONE wsp | na 16 16 |        |             |
2997:000 | DONE cmt | na 16 16 |        |             | ; List of Strings for Liara Forth for the W65C265SXB
2997:001 | DONE cmt | na 16 16 |        |             | ; Scot W. Stevenson <scot.stevenson@gmail.com>
2997:002 | DONE cmt | na 16 16 |        |             | ; First version: 01. Apr 2016
2997:003 | DONE cmt | na 16 16 |        |             | ; This version:  15. Feb 2017
2997:004 | DONE wsp | na 16 16 |        |             |
2997:005 | DONE cmt | na 16 16 |        |             | ; This file is included by liaraforth.tasm
2997:006 | DONE wsp | na 16 16 |        |             |
2997:007 | DONE cmt | na 16 16 |        |             | ; ===================================================================
2997:008 | DONE cmt | na 16 16 |        |             | ; GENERAL
2997:009 | DONE wsp | na 16 16 |        |             |
2997:010 | DONE cmt | na 16 16 |        |             | ; All general strings must be zero-terminated, names start with "s_"
2997:011 | DONE cmt | na 16 16 |        |             | ; TODO see if "ok" needs trailing space. The printstring routine adds the EOL
2997:012 | DONE cmt | na 16 16 |        |             | ; character
2997:013 | DONE wsp | na 16 16 |        |             |
2997:014 | DONE lbl | na 16 16 | 006de0 |             | s_ok                                 
2997:015 | DONE dir | na 16 16 | 006de0 | (4 bytes)   |         .byte 20, 6f, 6b, 0          note space at beginning
2997:015 | DONE dir | na 16 16 |        |             |                 20 6f 6b 00              --    o k .
2997:016 | DONE lbl | na 16 16 | 006de4 |             | s_compiled                           
2997:017 | DONE dir | na 16 16 | 006de4 | (10 bytes)  |         .byte 20, 63, 6f, 6d, 70, 69, 6c, 65, 64, 0 
2997:017 | DONE dir | na 16 16 |        |             |                 20 63 6f 6d 70 69 6c 65  --    c o m p i l e
2997:017 | DONE dir | na 16 16 |        |             |                 64 00                    --  d .
2997:018 | DONE wsp | na 16 16 |        |             |
2997:019 | DONE wsp | na 16 16 |        |             |
2997:020 | DONE cmt | na 16 16 |        |             | ; ===================================================================
2997:021 | DONE cmt | na 16 16 |        |             | ; ERROR STRINGS
2997:022 | DONE wsp | na 16 16 |        |             |
2997:023 | DONE cmt | na 16 16 |        |             | ; All error strings must be zero-terminated, names start with "es_"
2997:024 | DONE wsp | na 16 16 |        |             |
2997:025 | DONE lbl | na 16 16 | 006dee |             | es_allot                             
2997:026 | DONE dir | na 16 16 | 006dee | (20 bytes)  |         .byte 41, 4c, 4c, 4f, 54, 20, 6f, 75, 74, 20, 6f, 66, 20, (...) 
2997:026 | DONE dir | na 16 16 |        |             |                 41 4c 4c 4f 54 20 6f 75  --  A L L O T   o u
2997:026 | DONE dir | na 16 16 |        |             |                 74 20 6f 66 20 62 6f 75  --  t   o f   b o u
2997:026 | DONE dir | na 16 16 |        |             |                 6e 64 73 00              --  n d s .
2997:027 | DONE lbl | na 16 16 | 006e02 |             | es_channel                           
2997:028 | DONE dir | na 16 16 | 006e02 | (26 bytes)  |         .byte 41, 63, 63, 65, 73, 73, 69, 6e, 67, 20, 75, 6e, 6b, (...) 
2997:028 | DONE dir | na 16 16 |        |             |                 41 63 63 65 73 73 69 6e  --  A c c e s s i n
2997:028 | DONE dir | na 16 16 |        |             |                 67 20 75 6e 6b 6e 6f 77  --  g   u n k n o w
2997:028 | DONE dir | na 16 16 |        |             |                 6e 20 63 68 61 6e 6e 65  --  n   c h a n n e
2997:028 | DONE dir | na 16 16 |        |             |                 6c 00                    --  l .
2997:029 | DONE lbl | na 16 16 | 006e1c |             | es_componly                          
2997:030 | DONE dir | na 16 16 | 006e1c | (33 bytes)  |         .byte 49, 6e, 74, 65, 72, 70, 72, 65, 74, 69, 6e, 67, 20, (...) 
2997:030 | DONE dir | na 16 16 |        |             |                 49 6e 74 65 72 70 72 65  --  I n t e r p r e
2997:030 | DONE dir | na 16 16 |        |             |                 74 69 6e 67 20 61 20 63  --  t i n g   a   c
2997:030 | DONE dir | na 16 16 |        |             |                 6f 6d 70 69 6c 65 2d 6f  --  o m p i l e - o
2997:030 | DONE dir | na 16 16 |        |             |                 6e 6c 79 20 77 6f 72 64  --  n l y   w o r d
2997:030 | DONE dir | na 16 16 |        |             |                 00                       --  .
2997:031 | DONE lbl | na 16 16 | 006e3d |             | es_defer                             
2997:032 | DONE dir | na 16 16 | 006e3d | (29 bytes)  |         .byte 44, 45, 46, 45, 52, 65, 64, 20, 77, 6f, 72, 64, 20, (...) 
2997:032 | DONE dir | na 16 16 |        |             |                 44 45 46 45 52 65 64 20  --  D E F E R e d  
2997:032 | DONE dir | na 16 16 |        |             |                 77 6f 72 64 20 6e 6f 74  --  w o r d   n o t
2997:032 | DONE dir | na 16 16 |        |             |                 20 64 65 66 69 6e 65 64  --    d e f i n e d
2997:032 | DONE dir | na 16 16 |        |             |                 20 79 65 74 00           --    y e t .
2997:033 | DONE lbl | na 16 16 | 006e5a |             | es_divzero                           
2997:034 | DONE dir | na 16 16 | 006e5a | (17 bytes)  |         .byte 44, 69, 76, 69, 73, 69, 6f, 6e, 20, 62, 79, 20, 7a, (...) 
2997:034 | DONE dir | na 16 16 |        |             |                 44 69 76 69 73 69 6f 6e  --  D i v i s i o n
2997:034 | DONE dir | na 16 16 |        |             |                 20 62 79 20 7a 65 72 6f  --    b y   z e r o
2997:034 | DONE dir | na 16 16 |        |             |                 00                       --  .
2997:035 | DONE lbl | na 16 16 | 006e6b |             | es_error                             
2997:036 | DONE dir | na 16 16 | 006e6b | (12 bytes)  |         .byte 3e, 3e, 3e, 45, 72, 72, 6f, 72, 3c, 3c, 3c, 0 
2997:036 | DONE dir | na 16 16 |        |             |                 3e 3e 3e 45 72 72 6f 72  --  > > > E r r o r
2997:036 | DONE dir | na 16 16 |        |             |                 3c 3c 3c 00              --  < < < .
2997:037 | DONE lbl | na 16 16 | 006e77 |             | es_intonly                           
2997:038 | DONE dir | na 16 16 | 006e77 | (22 bytes)  |         .byte 4e, 6f, 74, 20, 69, 6e, 20, 69, 6e, 74, 65, 72, 70, (...) 
2997:038 | DONE dir | na 16 16 |        |             |                 4e 6f 74 20 69 6e 20 69  --  N o t   i n   i
2997:038 | DONE dir | na 16 16 |        |             |                 6e 74 65 72 70 72 65 74  --  n t e r p r e t
2997:038 | DONE dir | na 16 16 |        |             |                 20 6d 6f 64 65 00        --    m o d e .
2997:039 | DONE lbl | na 16 16 | 006e8d |             | es_noname                            
2997:040 | DONE dir | na 16 16 | 006e8d | (16 bytes)  |         .byte 50, 61, 72, 73, 69, 6e, 67, 20, 66, 61, 69, 6c, 75, (...) 
2997:040 | DONE dir | na 16 16 |        |             |                 50 61 72 73 69 6e 67 20  --  P a r s i n g  
2997:040 | DONE dir | na 16 16 |        |             |                 66 61 69 6c 75 72 65 00  --  f a i l u r e .
2997:040 | DONE dir | na 16 16 |        |             |                                          -- 
2997:041 | DONE lbl | na 16 16 | 006e9d |             | es_radix                             
2997:042 | DONE dir | na 16 16 | 006e9d | (23 bytes)  |         .byte 44, 69, 67, 69, 74, 20, 6c, 61, 72, 67, 65, 72, 20, (...) 
2997:042 | DONE dir | na 16 16 |        |             |                 44 69 67 69 74 20 6c 61  --  D i g i t   l a
2997:042 | DONE dir | na 16 16 |        |             |                 72 67 65 72 20 74 68 61  --  r g e r   t h a
2997:042 | DONE dir | na 16 16 |        |             |                 6e 20 62 61 73 65 00     --  n   b a s e .
2997:043 | DONE lbl | na 16 16 | 006eb4 |             | es_refill1                           
2997:044 | DONE dir | na 16 16 | 006eb4 | (46 bytes)  |         .byte 51, 55, 49, 54, 20, 63, 6f, 75, 6c, 64, 20, 6e, 6f, (...) 
2997:044 | DONE dir | na 16 16 |        |             |                 51 55 49 54 20 63 6f 75  --  Q U I T   c o u
2997:044 | DONE dir | na 16 16 |        |             |                 6c 64 20 6e 6f 74 20 67  --  l d   n o t   g
2997:044 | DONE dir | na 16 16 |        |             |                 65 74 20 69 6e 70 75 74  --  e t   i n p u t
2997:044 | DONE dir | na 16 16 |        |             |                 20 28 52 45 46 49 4c 4c  --    ( R E F I L L
2997:044 | DONE dir | na 16 16 |        |             |                 20 72 65 74 75 72 6e 65  --    r e t u r n e
2997:044 | DONE dir | na 16 16 |        |             |                 64 20 2d 31 29 00        --  d   - 1 ) .
2997:045 | DONE lbl | na 16 16 | 006ee2 |             | es_refill2                           
2997:046 | DONE dir | na 16 16 | 006ee2 | (32 bytes)  |         .byte 49, 6c, 6c, 65, 67, 61, 6c, 20, 53, 4f, 55, 52, 43, (...) 
2997:046 | DONE dir | na 16 16 |        |             |                 49 6c 6c 65 67 61 6c 20  --  I l l e g a l  
2997:046 | DONE dir | na 16 16 |        |             |                 53 4f 55 52 43 45 2d 49  --  S O U R C E - I
2997:046 | DONE dir | na 16 16 |        |             |                 44 20 64 75 72 69 6e 67  --  D   d u r i n g
2997:046 | DONE dir | na 16 16 |        |             |                 20 52 45 46 49 4c 4c 00  --    R E F I L L .
2997:046 | DONE dir | na 16 16 |        |             |                                          -- 
2997:047 | DONE lbl | na 16 16 | 006f02 |             | es_state                             
2997:048 | DONE dir | na 16 16 | 006f02 | (24 bytes)  |         .byte 41, 6c, 72, 65, 61, 64, 79, 20, 69, 6e, 20, 63, 6f, (...) 
2997:048 | DONE dir | na 16 16 |        |             |                 41 6c 72 65 61 64 79 20  --  A l r e a d y  
2997:048 | DONE dir | na 16 16 |        |             |                 69 6e 20 63 6f 6d 70 69  --  i n   c o m p i
2997:048 | DONE dir | na 16 16 |        |             |                 6c 65 20 6d 6f 64 65 00  --  l e   m o d e .
2997:048 | DONE dir | na 16 16 |        |             |                                          -- 
2997:049 | DONE lbl | na 16 16 | 006f1a |             | es_underflow                         
2997:050 | DONE dir | na 16 16 | 006f1a | (16 bytes)  |         .byte 53, 74, 61, 63, 6b, 20, 75, 6e, 64, 65, 72, 66, 6c, (...) 
2997:050 | DONE dir | na 16 16 |        |             |                 53 74 61 63 6b 20 75 6e  --  S t a c k   u n
2997:050 | DONE dir | na 16 16 |        |             |                 64 65 72 66 6c 6f 77 00  --  d e r f l o w .
2997:050 | DONE dir | na 16 16 |        |             |                                          -- 
2997:051 | DONE lbl | na 16 16 | 006f2a |             | es_syntax                            
2997:052 | DONE dir | na 16 16 | 006f2a | (16 bytes)  |         .byte 20, 55, 6e, 64, 65, 66, 69, 6e, 65, 64, 20, 77, 6f, (...) 
2997:052 | DONE dir | na 16 16 |        |             |                 20 55 6e 64 65 66 69 6e  --    U n d e f i n
2997:052 | DONE dir | na 16 16 |        |             |                 65 64 20 77 6f 72 64 00  --  e d   w o r d .
2997:052 | DONE dir | na 16 16 |        |             |                                          -- 
2997:053 | DONE wsp | na 16 16 |        |             |
2997:054 | DONE wsp | na 16 16 |        |             |
2997:055 | DONE cmt | na 16 16 |        |             | ; ===================================================================
2997:056 | DONE cmt | na 16 16 |        |             | ; ANSI VT-100 SEQUENCES
2997:057 | DONE wsp | na 16 16 |        |             |
2997:058 | DONE lbl | na 16 16 | 006f3a |             | vt100_page                           
2997:059 | DONE dir | na 16 16 | 006f3a | (5 bytes)   |         .byte AscESC, 5b, 32, 4a, 0  clear screen
2997:059 | DONE dir | na 16 16 |        |             |                 1b 5b 32 4a 00           --  . [ 2 J .
2997:060 | DONE lbl | na 16 16 | 006f3f |             | vt100_home                           
2997:061 | DONE dir | na 16 16 | 006f3f | (4 bytes)   |         .byte AscESC, 5b, 48, 0      cursor home
2997:061 | DONE dir | na 16 16 |        |             |                 1b 5b 48 00              --  . [ H .
2997:062 | DONE wsp | na 16 16 |        |             |
2997:063 | DONE wsp | na 16 16 |        |             |
2997:064 | DONE cmt | na 16 16 |        |             | ; ===================================================================
2997:065 | DONE cmt | na 16 16 |        |             | ; TESTING STRINGS
2997:066 | DONE wsp | na 16 16 |        |             |
2997:067 | DONE cmt | na 16 16 |        |             | ; These strings are only used during testing and are removed as Liara Forth is
2997:068 | DONE cmt | na 16 16 |        |             | ; developed. All start with "tests_"
2997:069 | DONE wsp | na 16 16 |        |             |
2997:070 | DONE lbl | na 16 16 | 006f43 |             | tests_prev_cmd                       
2997:071 | DONE dir | na 16 16 | 006f43 | (19 bytes)  |         .byte 28, 70, 72, 65, 76, 69, 6f, 75, 73, 20, 63, 6f, 6d, (...) 
2997:071 | DONE dir | na 16 16 |        |             |                 28 70 72 65 76 69 6f 75  --  ( p r e v i o u
2997:071 | DONE dir | na 16 16 |        |             |                 73 20 63 6f 6d 6d 61 6e  --  s   c o m m a n
2997:071 | DONE dir | na 16 16 |        |             |                 64 29 00                 --  d ) .
2997:072 | DONE lbl | na 16 16 | 006f56 |             | tests_next_cmd                       
2997:073 | DONE dir | na 16 16 | 006f56 | (15 bytes)  |         .byte 28, 6e, 65, 78, 74, 20, 63, 6f, 6d, 6d, 61, 6e, 64, (...) 
2997:073 | DONE dir | na 16 16 |        |             |                 28 6e 65 78 74 20 63 6f  --  ( n e x t   c o
2997:073 | DONE dir | na 16 16 |        |             |                 6d 6d 61 6e 64 29 00     --  m m a n d ) .
2997:074 | DONE wsp | na 16 16 |        |             |
2997:075 | DONE wsp | na 16 16 |        |             |
2997:076 | DONE cmt | na 16 16 |        |             | ; ===================================================================
2997:077 | DONE cmt | na 16 16 |        |             | ; ALPHABET STRINGS
2997:078 | DONE wsp | na 16 16 |        |             |
2997:079 | DONE cmt | na 16 16 |        |             | ; Leave alphastr as the last entry in the source code to make it easier to
2997:080 | DONE cmt | na 16 16 |        |             | ; see where this section ends. This cannot be a zero-terminated string
2997:081 | DONE wsp | na 16 16 |        |             |
2997:082 | DONE lbl | na 16 16 | 006f65 |             | alphastr                             
2997:083 | DONE dir | na 16 16 | 006f65 | (35 bytes)  |         .byte 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 61, 62, 63, (...) 
2997:083 | DONE dir | na 16 16 |        |             |                 30 31 32 33 34 35 36 37  --  0 1 2 3 4 5 6 7
2997:083 | DONE dir | na 16 16 |        |             |                 38 39 61 62 63 64 65 66  --  8 9 a b c d e f
2997:083 | DONE dir | na 16 16 |        |             |                 67 68 69 6a 6b 6c 6d 6e  --  g h i j k l m n
2997:083 | DONE dir | na 16 16 |        |             |                 6f 70 71 72 73 74 75 76  --  o p q r s t u v
2997:083 | DONE dir | na 16 16 |        |             |                 77 79 7a                 --  w y z
2998:000 | DONE wsp | na 16 16 |        |             |
2999:000 | DONE cmt | na 16 16 |        |             | ; ===================================================================
3000:000 | DONE cmt | na 16 16 |        |             | ; TESTING ROUTINES (UNCOMMENT FOR USE)
3001:000 | DONE wsp | na 16 16 |        |             |
3002:000 | DONE cmt | na 16 16 |        |             |                 ; --- TODO TESTING (PRINT ONE "A") ---
3003:000 | DONE cmt | na 16 16 |        |             |                 ; lda.# 61
3004:000 | DONE cmt | na 16 16 |        |             |                 ; jsr put_chr
3005:000 | DONE cmt | na 16 16 |        |             |                 ; .!a16
3006:000 | DONE cmt | na 16 16 |        |             |                 ; brk 00
3007:000 | DONE cmt | na 16 16 |        |             |                 ; --- TODO TESTING ---
3008:000 | DONE wsp | na 16 16 |        |             |
3009:000 | DONE cmt | na 16 16 |        |             |                 ; --- TESTING SHOW WHAT IS TOS ---
3010:000 | DONE cmt | na 16 16 |        |             |                 ; tya
3011:000 | DONE cmt | na 16 16 |        |             |                 ; and.# 0ff00
3012:000 | DONE cmt | na 16 16 |        |             |                 ; xba
3013:000 | DONE cmt | na 16 16 |        |             |                 ; jsr byte_to_ascii
3014:000 | DONE cmt | na 16 16 |        |             |                 ; tya
3015:000 | DONE cmt | na 16 16 |        |             |                 ; and.# 00ff
3016:000 | DONE cmt | na 16 16 |        |             |                 ; jsr byte_to_ascii
3017:000 | DONE cmt | na 16 16 |        |             |                 ; jsr xt_cr
3018:000 | DONE cmt | na 16 16 |        |             |                 ; --------------------------------
3019:000 | DONE wsp | na 16 16 |        |             |
3020:000 | DONE cmt | na 16 16 |        |             |                 ; --- TODO TESTING (HALT CPU) ---
3021:000 | DONE cmt | na 16 16 |        |             |                 ; brk 00 ; BRK for 265sxb tests (drops back to Mensch Monitor)
3022:000 | DONE cmt | na 16 16 |        |             |                 ; stp    ; STP for crude65816 emulator tests
3023:000 | DONE cmt | na 16 16 |        |             |                 ; --- TODO TESTING ---
3024:000 | DONE wsp | na 16 16 |        |             |
3025:000 | DONE wsp | na 16 16 |        |             |
3026:000 | DONE cmt | na 16 16 |        |             | ; ===================================================================
3027:000 | DONE cmt | na 16 16 |        |             | ; END
3028:000 | DONE dir | na 16 16 |        |             |         .end                         

MACROS:
        (none)

SYMBOL TABLE:
- accept_bs                   : 006296
- accept_eol                  : 00628e
- accept_loop                 : 006243
- accept_nonzero              : 006236
- allot_done                  : 0062d6
- allot_error                 : 0062c5
- allot_minus                 : 0062cb
- allot_real_gone             : 0062d8
- alphastr                    : 006f65
- ascbell                     : 000007
- ascbs                       : 000008
- asccc                       : 000003
- asccn                       : 00000e
- asccp                       : 000010
- asccr                       : 00000d
- ascdel                      : 00007f
- ascesc                      : 00001b
- asclf                       : 00000a
- ascsp                       : 000020
- base                        : 00021c
- brg_value                   : 00000b
- buffers                     : 007c00
- buffersize                  : 0000ff
- byte_to_ascii               : 006caf
- char_got_char               : 006335
- cib                         : 00020c
- ciblen                      : 00020e
- cmpl_body                   : 006c85
- cmpl_common                 : 006c78
- cmpl_jump                   : 006c75
- cmpl_subroutine             : 006c70
- cmpl_word                   : 006c6b
- co                          : 000004
- compex                      : 006c1f
- compex_compile              : 006c56
- compex_got_name_token       : 006c34
- compex_interpret            : 006c50
- compex_line_done            : 006c64
- compex_loop                 : 006c1f
- compile_as_code             : 00634a
- compile_as_jump             : 00634a
- cp                          : 000200
- cp0                         : 000300
- create_got_name             : 006398
- directpage                  : 000200
- directpage-multiple         : 007400
- doconst                     : 006bfd
- dodoes                      : 006c0b
- does_rt                     : 006422
- dots_done                   : 00614f
- dots_loop                   : 006135
- dots_not_empty              : 00612f
- dovar                       : 006c18
- dp                          : 000202
- dsp0                        : 0002f8
- dump_byte_loop              : 006445
- dump_done                   : 00645a
- dump_line_loop              : 00643f
- error                       : 006c91
- es_allot                    : 006dee
- es_channel                  : 006e02
- es_componly                 : 006e1c
- es_defer                    : 006e3d
- es_divzero                  : 006e5a
- es_error                    : 006e6b
- es_intonly                  : 006e77
- es_noname                   : 006e8d
- es_radix                    : 006e9d
- es_refill1                  : 006eb4
- es_refill2                  : 006ee2
- es_state                    : 006f02
- es_syntax                   : 006f2a
- es_underflow                : 006f1a
- execute_ip                  : 006498
- find-name_all_chars         : 0064d4
- find-name_char_nomatcnt_8   : 0064d0
- find-name_chars             : 0064c5
- find-name_done              : 0064fa
- find-name_failure_16        : 0064f7
- find-name_loop              : 0064b0
- find-name_next_entry        : 0064b9
- find-name_success           : 0064f1
- get_chr                     : 006047
- get_chr_wait                : 00604c
- have_chr?                   : 006056
- hi-end                      : 006de0
- hi-start                    : 006ccb
- hw_acsr0                    : 00df70
- hw_acsr1                    : 00df72
- hw_acsr2                    : 00df74
- hw_acsr3                    : 00df76
- hw_artd0                    : 00df71
- hw_artd1                    : 00df73
- hw_artd2                    : 00df75
- hw_artd3                    : 00df77
- hw_bcr                      : 00df40
- hw_eier                     : 00df47
- hw_eifr                     : 00df45
- hw_pcs7                     : 00df27
- hw_pd0                      : 00df00
- hw_pd1                      : 00df01
- hw_pd2                      : 00df02
- hw_pd3                      : 00df03
- hw_pd4                      : 00df20
- hw_pd5                      : 00df21
- hw_pd6                      : 00df22
- hw_pd7                      : 00df23
- hw_pdd0                     : 00df04
- hw_pdd1                     : 00df05
- hw_pdd2                     : 00df06
- hw_pdd3                     : 00df07
- hw_pdd4                     : 00df24
- hw_pdd5                     : 00df25
- hw_pdd6                     : 00df26
- hw_sscr                     : 00df41
- hw_t0ch                     : 00df61
- hw_t0cl                     : 00df60
- hw_t1ch                     : 00df63
- hw_t1cl                     : 00df62
- hw_t2ch                     : 00df65
- hw_t2cl                     : 00df64
- hw_t3ch                     : 00df67
- hw_t3cl                     : 00df66
- hw_t4ch                     : 00df69
- hw_t4cl                     : 00df68
- hw_t5ch                     : 00df6b
- hw_t5cl                     : 00df6a
- hw_t6ch                     : 00df6d
- hw_t6cl                     : 00df6c
- hw_t7ch                     : 00df6f
- hw_t7cl                     : 00df6e
- hw_tcr                      : 00df42
- hw_ter                      : 00df43
- hw_tier                     : 00df46
- hw_tifr                     : 00df44
- hw_uier                     : 00df49
- hw_uifr                     : 00df48
- ibuffer1                    : 007c00
- ibuffer2                    : 007d00
- im                          : 000002
- insrc                       : 00020a
- literal_rt                  : 00652b
- max_drop                    : 006546
- max_nip                     : 006548
- max_no_ov                   : 006544
- maxram-multiple             : 006fff
- maxram-single               : 007bff
- min_drop                    : 006559
- min_nip                     : 00655b
- min_no_ov                   : 006557
- nc                          : 000001
- nc_limit                    : 000000
- nibble_to_ascii             : 006cb8
- nt_2drop                    : 006baf
- nt_2dup                     : 0069c6
- nt_abort                    : 00681f
- nt_abs                      : 0069d2
- nt_accept                   : 006b64
- nt_allot                    : 00698b
- nt_and                      : 006a8c
- nt_base                     : 0068b7
- nt_bell                     : 0067d2
- nt_bl                       : 006868
- nt_bracketchar              : 006905
- nt_brackettick              : 0068fa
- nt_bye                      : 0067a2
- nt_c-comma                  : 006a97
- nt_c-fetch                  : 006aa1
- nt_c-store                  : 006aab
- nt_cells                    : 0068d3
- nt_char                     : 006a6b
- nt_cold                     : 0067ad
- nt_colon                    : 006982
- nt_comma                    : 006b5b
- nt_compile-only             : 006922
- nt_compilecomma             : 006969
- nt_constant                 : 006a10
- nt_count                    : 006812
- nt_cr                       : 00685e
- nt_create                   : 0069a5
- nt_decimal                  : 0067de
- nt_depth                    : 006a03
- nt_does                     : 006998
- nt_dot                      : 0068a3
- nt_dots                     : 00688d
- nt_drop                     : 006bf1
- nt_dump                     : 0067c6
- nt_dup                      : 006be6
- nt_evaluate                 : 0068c3
- nt_execute                  : 006b94
- nt_false                    : 006ae5
- nt_fetch                    : 006bc8
- nt_find-name                : 006b19
- nt_here                     : 006ba3
- nt_hex                      : 0067ed
- nt_immediate                : 006936
- nt_invert                   : 006a5d
- nt_leftbracket              : 006960
- nt_literal                  : 006913
- nt_max                      : 006a44
- nt_min                      : 006a39
- nt_minus                    : 006abf
- nt_name-int                 : 00684e
- nt_name-string              : 0069b3
- nt_negate                   : 006a4f
- nt_nip                      : 006b7e
- nt_one                      : 006b07
- nt_one-minus                : 006ad1
- nt_one-plus                 : 006adb
- nt_or                       : 006a82
- nt_over                     : 006bbc
- nt_pad                      : 0068ac
- nt_page                     : 006806
- nt_parse                    : 00682c
- nt_parse-name               : 006b38
- nt_plus                     : 006ac8
- nt_postpone                 : 006947
- nt_question                 : 006845
- nt_quit                     : 006839
- nt_refill                   : 006b2a
- nt_rightbracket             : 006957
- nt_rot                      : 006b89
- nt_semicolon                : 006979
- nt_sliteral                 : 0068ea
- nt_source                   : 0069f5
- nt_source-id                : 006b4a
- nt_space                    : 006880
- nt_spaces                   : 006872
- nt_squote                   : 0068e0
- nt_state                    : 0069dd
- nt_store                    : 006bd1
- nt_swap                     : 006bda
- nt_tick                     : 006a30
- nt_to-in                    : 0069ea
- nt_true                     : 006af2
- nt_tuck                     : 006b72
- nt_two                      : 006afe
- nt_two-star                 : 006ab5
- nt_type                     : 006897
- nt_unused                   : 0067f8
- nt_variable                 : 006a20
- nt_words                    : 0067b9
- nt_xor                      : 006a77
- nt_zero                     : 006b10
- output                      : 000208
- padoffset                   : 00007f
- padsize                     : 0000ff
- parse-name_empty_line       : 0065bb
- parse-name_found            : 0065cf
- parse-name_loop             : 0065ae
- parse_found_delimiter       : 0065fb
- parse_loop                  : 0065ee
- parse_reached_eol           : 0065ff
- physicalram                 : 007fff
- piblen                      : 000210
- pp_got_nt                   : 006624
- pp_got_word                 : 006619
- pp_not_immediate            : 006634
- print_string                : 006c97
- print_string_done           : 006ca6
- put_chr                     : 006036
- put_chr_wait                : 00603c
- pw                          : 000008
- quit_compiled               : 0060d5
- quit_get_line               : 0060aa
- quit_ok                     : 0060cc
- quit_print                  : 0060d8
- quit_refill_successful      : 0060b8
- refill_source_is_not_string : 00666f
- refill_src_not_kbd          : 006666
- reset_hardware              : 006000
- s_compiled                  : 006de4
- s_ok                        : 006de0
- sl_loop                     : 0066b1
- sliteral_rt                 : 0066dc
- spaces_done                 : 006715
- stack-multiple              : 007000
- stack0                      : 007fff
- start                       : 006066
- state                       : 000214
- string_to_lowercase         : 006cca
- tests_next_cmd              : 006f56
- tests_prev_cmd              : 006f43
- tick_have_nt                : 006223
- tick_have_word              : 006217
- tmp1                        : 000216
- tmp2                        : 000218
- tmp3                        : 00021a
- tmpdsp                      : 000204
- tmptos                      : 000206
- toin                        : 000212
- type_done                   : 006753
- type_loop                   : 006747
- vt100_home                  : 006f3f
- vt100_page                  : 006f3a
- words_loop                  : 00677d
- workword                    : 00021e
- xt_2drop                    : 0061f9
- xt_2dup                     : 006200
- xt_abort                    : 006097
- xt_abs                      : 006227
- xt_accept                   : 006230
- xt_allot                    : 0062b4
- xt_and                      : 0062dd
- xt_base                     : 0062e4
- xt_bell                     : 0062ec
- xt_bl                       : 0062f3
- xt_bracketchar              : 0061bf
- xt_brackettick              : 0061b0
- xt_bye                      : 0062fb
- xt_c-comma                  : 0062ff
- xt_c-fetch                  : 00630d
- xt_c-store                  : 006319
- xt_char                     : 006329
- xt_cold                     : 006063
- xt_colon                    : 00615f
- xt_comma                    : 006153
- xt_compile-only             : 006341
- xt_compilecomma             : 00634a
- xt_constant                 : 00635d
- xt_count                    : 006377
- xt_cr                       : 006386
- xt_create                   : 00638d
- xt_decimal                  : 006400
- xt_depth                    : 006406
- xt_does                     : 006415
- xt_dot                      : 0060e7
- xt_dotparen                 : 0060fd
- xt_dots                     : 00610b
- xt_drop                     : 006438
- xt_dump                     : 00643d
- xt_dup                      : 006464
- xt_evaluate                 : 006469
- xt_execute                  : 00649b
- xt_fetch                    : 0061ab
- xt_find-name                : 0064a6
- xt_here                     : 00650c
- xt_hex                      : 006513
- xt_immediate                : 0064fd
- xt_invert                   : 006506
- xt_leftbracket              : 0061b6
- xt_literal                  : 006519
- xt_max                      : 006538
- xt_min                      : 00654b
- xt_minus                    : 0061ce
- xt_name-int                 : 00655e
- xt_name-string              : 006567
- xt_negate                   : 006578
- xt_nip                      : 00657f
- xt_one                      : 0061e1
- xt_one-minus                : 0061e9
- xt_one-plus                 : 0061eb
- xt_or                       : 006582
- xt_over                     : 006589
- xt_pad                      : 006590
- xt_page                     : 00659c
- xt_parse                    : 0065db
- xt_parse-name               : 0065a9
- xt_plus                     : 0061c6
- xt_postpone                 : 00660e
- xt_question                 : 00619a
- xt_quit                     : 00609f
- xt_refill                   : 006643
- xt_rightbracket             : 0061b9
- xt_rot                      : 006676
- xt_semicolon                : 006181
- xt_sliteral                 : 006691
- xt_source                   : 0066f2
- xt_source-id                : 0066ff
- xt_space                    : 006706
- xt_spaces                   : 00670d
- xt_squote                   : 00667f
- xt_state                    : 00671a
- xt_store                    : 0061a1
- xt_swap                     : 006722
- xt_tick                     : 00620b
- xt_to-in                    : 0060df
- xt_true                     : 006728
- xt_tuck                     : 006730
- xt_two                      : 0061ed
- xt_two-star                 : 0061f5
- xt_type                     : 006739
- xt_unused                   : 00675a
- xt_variable                 : 006766
- xt_words                    : 006773
- xt_xor                      : 00679b
- xt_zero                     : 0061d9
- z_2drop                     : 0061ff
- z_2dup                      : 00620a
- z_abort                     : 0060de
- z_abs                       : 00622f
- z_accept                    : 0062b3
- z_allot                     : 0062dc
- z_and                       : 0062e3
- z_base                      : 0062eb
- z_bell                      : 0062f2
- z_bl                        : 0062fa
- z_bracketchar               : 0061c5
- z_brackettick               : 0061b6
- z_bye                       : 0062fe
- z_c-comma                   : 00630c
- z_c-fetch                   : 006318
- z_c-store                   : 006328
- z_char                      : 006340
- z_cold                      : 0060de
- z_colon                     : 006180
- z_comma                     : 00615e
- z_compile-only              : 006349
- z_compilecomma              : 00635c
- z_constant                  : 006376
- z_count                     : 006385
- z_cr                        : 00638c
- z_create                    : 0063ff
- z_decimal                   : 006405
- z_depth                     : 006414
- z_does                      : 006421
- z_dot                       : 0060fc
- z_dotparen                  : 00610a
- z_dots                      : 006152
- z_drop                      : 00643c
- z_dump                      : 006463
- z_dup                       : 006468
- z_evaluate                  : 006497
- z_execute                   : 0064a5
- z_fetch                     : 0061af
- z_find-name                 : 0064fc
- z_here                      : 006512
- z_hex                       : 006518
- z_immediate                 : 006505
- z_invert                    : 00650b
- z_leftbracket               : 0061b8
- z_literal                   : 00652a
- z_max                       : 00654a
- z_min                       : 00655d
- z_minus                     : 0061d8
- z_name-int                  : 006566
- z_name-string               : 006577
- z_negate                    : 00657e
- z_nip                       : 006581
- z_one                       : 0061e8
- z_one-minus                 : 0061ea
- z_one-plus                  : 0061ec
- z_or                        : 006588
- z_over                      : 00658f
- z_pad                       : 00659b
- z_page                      : 0065a8
- z_parse                     : 00660d
- z_parse-name                : 00660d
- z_plus                      : 0061cd
- z_postpone                  : 006643
- z_question                  : 0061a0
- z_quit                      : 0060de
- z_refill                    : 006675
- z_rightbracket              : 0061be
- z_rot                       : 00667e
- z_semicolon                 : 006199
- z_sliteral                  : 0066db
- z_source                    : 0066fe
- z_source-id                 : 006705
- z_space                     : 00670c
- z_spaces                    : 006719
- z_squote                    : 006690
- z_state                     : 006721
- z_store                     : 0061aa
- z_swap                      : 006727
- z_tick                      : 006226
- z_to-in                     : 0060e6
- z_true                      : 00672f
- z_tuck                      : 006738
- z_two                       : 0061f4
- z_two-star                  : 0061f8
- z_type                      : 006759
- z_unused                    : 006765
- z_variable                  : 006772
- z_words                     : 00679a
- z_xor                       : 0067a1
- z_zero                      : 0061e0
