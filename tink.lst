A Tinkerer's Assembler for the 6502/65c02/65816
Version BETA 17. Feb 2017
Copyright 2015-2017 Scot W. Stevenson <scot.stevenson@gmail.com>
This program comes with ABSOLUTELY NO WARRANTY

Code listing for file liaraforth.tasm
Generated on Sun Feb 26 16:53:28 2017
Target MPU: 65816
External files loaded: 4
Number of passes executed: 35
Number of steps executed: 10
Assembly time: 0.16519 seconds
Code origin: 006000
Bytes of machine code: 6599

LISTING:
   Line  Status/Type State/Width Address     Bytes     Instruction
   1:000 | DONE cmt | em  8  8 |        |             | ; Liara Forth for the W65C265SXB
   2:000 | DONE cmt | em  8  8 |        |             | ; Scot W. Stevenson <scot.stevenson@gmail.com>
   3:000 | DONE cmt | em  8  8 |        |             | ; First version: 01. Apr 2016
   4:000 | DONE cmt | em  8  8 |        |             | ; This version: 26. Feb 2017
   5:000 | DONE wsp | em  8  8 |        |             |
   6:000 | DONE cmt | em  8  8 |        |             | ; This code is written in Typist's Assembler Notation for the 65c02/65816
   7:000 | DONE cmt | em  8  8 |        |             | ; See docs/MANUAL.md for more information
   8:000 | DONE wsp | em  8  8 |        |             |
   9:000 | DONE dir | em  8  8 |        |             |         .mpu 65816                   
  10:000 | DONE cmt | em  8  8 |        |             | ;       .origin 8000    ; start of code to save to Flash memory
  11:000 | DONE dir | em  8  8 |        |             |         .origin 6000                 start of code to save to built-in RAM
  12:000 | DONE wsp | em  8  8 |        |             |
  13:000 | DONE cmt | em  8  8 |        |             | ; ===================================================================
  14:000 | DONE cmt | em  8  8 |        |             | ; TOP INCLUDES
  15:000 | DONE wsp | em  8  8 |        |             |
  16:000 | DONE cmt | em  8  8 |        |             | ; Definitions for Liara Forth for the W65C265SXB
  16:001 | DONE cmt | em  8  8 |        |             | ; Scot W. Stevenson <scot.stevenson@gmail.com>
  16:002 | DONE cmt | em  8  8 |        |             | ; First version: 01. Apr 2016
  16:003 | DONE cmt | em  8  8 |        |             | ; This version: 19. Feb 2017
  16:004 | DONE wsp | em  8  8 |        |             |
  16:005 | DONE cmt | em  8  8 |        |             | ; This file is included by liaraforth.tasm
  16:006 | DONE wsp | em  8  8 |        |             |
  16:007 | DONE cmt | em  8  8 |        |             | ; Note that Typist's Assembler Notation does not distinguish between
  16:008 | DONE cmt | em  8  8 |        |             | ; upper andlower case. Variations in case are for human readers only.
  16:009 | DONE wsp | em  8  8 |        |             |
  16:010 | DONE cmt | em  8  8 |        |             | ; I/O facilities are handled in the separate kernel files. The definitions for
  16:011 | DONE cmt | em  8  8 |        |             | ; multitasking are preliminary and will probably change
  16:012 | DONE wsp | em  8  8 |        |             |
  16:013 | DONE cmt | em  8  8 |        |             | ; ===================================================================
  16:014 | DONE cmt | em  8  8 |        |             | ; CONTROL VALUES
  16:015 | DONE wsp | em  8  8 |        |             |
  16:016 | DONE cmt | em  8  8 |        |             |         ; NC_LIMIT gives the number of maximum bytes the code of a word may be
  16:017 | DONE cmt | em  8  8 |        |             |         ; long and still be compiled natively - see COMPILE, for details.
  16:018 | DONE cmt | em  8  8 |        |             |         ; A value of zero means a word is always compiled as a subroutine.
  16:019 | DONE cmt | em  8  8 |        |             |         ; TODO Decide if we want to expose this value to the user
  16:020 | DONE dir | em  8  8 |        |             |         .equ nc_limit 0              
  16:021 | DONE wsp | em  8  8 |        |             |
  16:022 | DONE cmt | em  8  8 |        |             | ; ===================================================================
  16:023 | DONE cmt | em  8  8 |        |             | ; MEMORY MAP (consider moving parts of these to kernel.tasm)
  16:024 | DONE wsp | em  8  8 |        |             |
  16:025 | DONE dir | em  8  8 |        |             |         .equ cp0              0300   start of available RAM for Dictionary
  16:026 | DONE dir | em  8  8 |        |             |         .equ physicalram     07fff   end of installed RAM
  16:027 | DONE dir | em  8  8 |        |             |         .equ maxram-single   07bff   end of available RAM (single task mode)
  16:028 | DONE dir | em  8  8 |        |             |         .equ maxram-multiple 06fff   end of available RAM (multitask mode)
  16:029 | DONE dir | em  8  8 |        |             |         .equ buffers  7c00           buffer area start
  16:030 | DONE wsp | em  8  8 |        |             |
  16:031 | DONE cmt | em  8  8 |        |             | ; The two input buffers are currently switched in REFILL by bit flipping. If you
  16:032 | DONE cmt | em  8  8 |        |             | ; change their addresses, you'll probably have to rewrite the code there
  16:033 | DONE wsp | em  8  8 |        |             |
  16:034 | DONE dir | em  8  8 |        |             |         .equ buffersize  0ff         maximum size for input buffers
  16:035 | DONE dir | em  8  8 |        |             |         .equ ibuffer1   7c00         start of 256 byte input buffer 1
  16:036 | DONE dir | em  8  8 |        |             |         .equ ibuffer2   7d00         start of 256 byte input buffer 2
  16:037 | DONE dir | em  8  8 |        |             |         .equ padsize     0ff         size of PAD, must be > &84
  16:038 | DONE dir | em  8  8 |        |             |         .equ padoffset   07f         distance from CP to PAD (holds number strings)
  16:039 | DONE wsp | em  8  8 |        |             |
  16:040 | DONE cmt | em  8  8 |        |             | ; RAM from 0000 to 01ff is left for the Mensch Monitor to use
  16:041 | DONE wsp | em  8  8 |        |             |
  16:042 | DONE dir | em  8  8 |        |             |         .equ directpage          0200 single task Direct Page (DP) start
  16:043 | DONE dir | em  8  8 |        |             |         .equ stack-multiple      7000 multitask Stack (S) area start
  16:044 | DONE dir | em  8  8 |        |             |         .equ directpage-multiple 7400 multitask Direct Page (DP) area start
  16:045 | DONE wsp | em  8  8 |        |             |
  16:046 | DONE cmt | em  8  8 |        |             | ; Initial values
  16:047 | DONE wsp | em  8  8 |        |             |
  16:048 | DONE dir | em  8  8 |        |             |         .equ stack0 7fff             single task Stack (S) start (bottom)
  16:049 | DONE dir | em  8  8 |        |             |         .equ dsp0   02f8             initial Data Stack Pointer (X)
  16:050 | DONE wsp | em  8  8 |        |             |
  16:051 | DONE cmt | em  8  8 |        |             | ; ===================================================================
  16:052 | DONE cmt | em  8  8 |        |             | ; DIRECT PAGE ADDRESSES
  16:053 | DONE wsp | em  8  8 |        |             |
  16:054 | DONE cmt | em  8  8 |        |             | ; All are one cell (two bytes) long to prevent weird errors
  16:055 | DONE cmt | em  8  8 |        |             | ; TODO move these to USER variables for multitasking
  16:056 | DONE wsp | em  8  8 |        |             |
  16:057 | DONE dir | em  8  8 |        |             |         .equ cp { 000200 + &0 }      Compiler Pointer, 2 bytes
  16:058 | DONE dir | em  8  8 |        |             |         .equ dp { 000200 + &2 }      Dictionary Pointer, 2 bytes
  16:059 | DONE dir | em  8  8 |        |             |         .equ tmpdsp { 000200 + &4 }  Temporary DSP (X) storage, 2 bytes
  16:060 | DONE dir | em  8  8 |        |             |         .equ tmptos { 000200 + &6 }  Temporary TOS (Y) storage, 2 bytes
  16:061 | DONE dir | em  8  8 |        |             |         .equ output { 000200 + &8 }  Address where output is constructed
  16:062 | DONE dir | em  8  8 |        |             |         .equ insrc { 000200 + &10 }  Input Source for SOURCE-ID
  16:063 | DONE dir | em  8  8 |        |             |         .equ cib { 000200 + &12 }    Current Input Buffer, 7c00 or 7d00
  16:064 | DONE dir | em  8  8 |        |             |         .equ ciblen { 000200 + &14 } Length of current input buffer
  16:065 | DONE dir | em  8  8 |        |             |         .equ piblen { 000200 + &16 } Length of previous input buffer
  16:066 | DONE dir | em  8  8 |        |             |         .equ toin { 000200 + &18 }   Pointer to CIB (>IN in Forth)
  16:067 | DONE dir | em  8  8 |        |             |         .equ state { 000200 + &20 }  STATE: -1 compile, 0 interpret
  16:068 | DONE dir | em  8  8 |        |             |         .equ tmp1 { 000200 + &22 }   Temporary storage
  16:069 | DONE dir | em  8  8 |        |             |         .equ tmp2 { 000200 + &24 }   Temporary storage
  16:070 | DONE dir | em  8  8 |        |             |         .equ tmp3 { 000200 + &26 }   Temporary storage
  16:071 | DONE dir | em  8  8 |        |             |         .equ base { 000200 + &28 }   Radix for number conversion
  16:072 | DONE dir | em  8  8 |        |             |         .equ workword { 000200 + &30 } Currently compiliing word
  16:073 | DONE dir | em  8  8 |        |             |         .equ scratch { 000200 + &32 } 8 byte scratchpad (see UM/MOD)
  16:074 | DONE dir | em  8  8 |        |             |         .equ tohold { 000200 + &40 } Pointer for formatted output
  16:075 | DONE wsp | em  8  8 |        |             |
  16:076 | DONE wsp | em  8  8 |        |             |
  16:077 | DONE cmt | em  8  8 |        |             | ; ===================================================================
  16:078 | DONE cmt | em  8  8 |        |             | ; HELPER DEFINITIONS
  16:079 | DONE wsp | em  8  8 |        |             |
  16:080 | DONE cmt | em  8  8 |        |             | ; ASCII characters
  16:081 | DONE dir | em  8  8 |        |             |         .equ AscCC   03              break (Control-C) ASCII character
  16:082 | DONE dir | em  8  8 |        |             |         .equ AscBELL 07              ACSCII bell sound
  16:083 | DONE dir | em  8  8 |        |             |         .equ AscBS   08              backspace ASCII character
  16:084 | DONE dir | em  8  8 |        |             |         .equ AscLF   0a              line feed ASCII character
  16:085 | DONE dir | em  8  8 |        |             |         .equ AscCR   0d              carriage return ASCII character
  16:086 | DONE dir | em  8  8 |        |             |         .equ AscCN   0e              ASCII CNTR-n (for next command)
  16:087 | DONE dir | em  8  8 |        |             |         .equ AscCP   10              ASCII CNTR-p (for previous command)
  16:088 | DONE dir | em  8  8 |        |             |         .equ AscESC  1b              Escape ASCII character
  16:089 | DONE dir | em  8  8 |        |             |         .equ AscSP   20              space ASCII character
  16:090 | DONE dir | em  8  8 |        |             |         .equ AscDEL  7f              DEL ASCII character
  16:091 | DONE wsp | em  8  8 |        |             |
  16:092 | DONE cmt | em  8  8 |        |             | ; Dictionary flags. The first four are currently unused
  16:093 | DONE dir | em  8  8 |        |             |         .equ CO 0004                 Compile Only
  16:094 | DONE dir | em  8  8 |        |             |         .equ IM 0002                 Immediate Word
  16:095 | DONE dir | em  8  8 |        |             |         .equ NC 0001                 Native Compile allowed
  16:096 | DONE wsp | em  8  8 |        |             |
  17:000 | DONE wsp | em  8  8 |        |             |
  18:000 | DONE cmt | em  8  8 |        |             | ; Hardware dependencies are isolated to a large degree in kernel files. Liara
  19:000 | DONE cmt | em  8  8 |        |             | ; Forth ships with two such files: One for the crude65816 emulator, and one for
  20:000 | DONE cmt | em  8  8 |        |             | ; the 265sxb board. Only use one.
  21:000 | DONE wsp | em  8  8 |        |             |
  22:000 | DONE cmt | em  8  8 |        |             | ;       .include kernel_emu.tasm        ; routines for crude65815 emulator
  23:000 | DONE cmt | em  8  8 |        |             | ; Basic hardware routines for Liara Forth: 265SXB version
  23:001 | DONE cmt | em  8  8 |        |             | ; Scot W. Stevenson <scot.stevenson@gmail.com>
  23:002 | DONE cmt | em  8  8 |        |             | ; First version: 04. Jan 2017
  23:003 | DONE cmt | em  8  8 |        |             | ; This version: 15. Feb 2017
  23:004 | DONE wsp | em  8  8 |        |             |
  23:005 | DONE cmt | em  8  8 |        |             | ; This section provides basic hardware interface to the 265SXB, providing the
  23:006 | DONE cmt | em  8  8 |        |             | ; PUT_CHR and GET_CHR routines that Liara Forth uses. It is in its own section
  23:007 | DONE cmt | em  8  8 |        |             | ; to make porting Forth to other machines easier.
  23:008 | DONE wsp | em  8  8 |        |             |
  23:009 | DONE cmt | em  8  8 |        |             | ; The code here is based on Andrew Jacobs' Basic Vector Handling for the
  23:010 | DONE cmt | em  8  8 |        |             | ; W65C265SXB Development Board as part of the w65c265sxb-hacker project
  23:011 | DONE cmt | em  8  8 |        |             | ; (https://github.com/andrew-jacobs/w65c265sxb-hacker). It is released under the
  23:012 | DONE cmt | em  8  8 |        |             | ; following license:
  23:013 | DONE cmt | em  8  8 |        |             | ;
  23:014 | DONE cmt | em  8  8 |        |             | ; This work is made available under the terms of the Creative Commons
  23:015 | DONE cmt | em  8  8 |        |             | ; Attribution-NonCommercial-ShareAlike 4.0 International license. Open the
  23:016 | DONE cmt | em  8  8 |        |             | ; following URL to see the details.
  23:017 | DONE cmt | em  8  8 |        |             | ;
  23:018 | DONE cmt | em  8  8 |        |             | ; http://creativecommons.org/licenses/by-nc-sa/4.0/
  23:019 | DONE wsp | em  8  8 |        |             |
  23:020 | DONE cmt | em  8  8 |        |             | ; Original variable names from w65c256.inc are included in comments to make
  23:021 | DONE cmt | em  8  8 |        |             | ; updates and changes easier
  23:022 | DONE wsp | em  8  8 |        |             |
  23:023 | DONE cmt | em  8  8 |        |             | ; ===================================================================
  23:024 | DONE cmt | em  8  8 |        |             | ; HARDWARE DEFINITIONS
  23:025 | DONE cmt | em  8  8 |        |             | ; These follow Andrew Jacobs' names, but lower case and with "hw_" prefixed.
  23:026 | DONE cmt | em  8  8 |        |             | ; This is the only file where symbols with the hw_ prefix may be defined or used
  23:027 | DONE wsp | em  8  8 |        |             |
  23:028 | DONE cmt | em  8  8 |        |             | ; Baud rates are calculated by the formula { osc_freq/(16*baud_rate)-1 } which we
  23:029 | DONE cmt | em  8  8 |        |             | ; can do on the fly at every assembly with the following parameters, or just calculate
  23:030 | DONE cmt | em  8  8 |        |             | ; once and then define brg_value with:
  23:031 | DONE cmt | em  8  8 |        |             | ;
  23:032 | DONE cmt | em  8  8 |        |             | ; - For  9600 baud, use &23
  23:033 | DONE cmt | em  8  8 |        |             | ; - For 19200 baud, use &11
  23:034 | DONE wsp | em  8  8 |        |             |
  23:035 | DONE cmt | em  8  8 |        |             | ;       .equ osc_freq  3686400          ; SXB runs at 3.6864MHz
  23:036 | DONE cmt | em  8  8 |        |             | ;       .equ baud_rate 19200            ; ACIA baud rate
  23:037 | DONE cmt | em  8  8 |        |             | ;	.equ baud_rate 9600             ; ACIA baud rate
  23:038 | DONE wsp | em  8  8 |        |             |
  23:039 | DONE dir | em  8  8 |        |             |         .equ brg_value &11           19200 baud
  23:040 | DONE cmt | em  8  8 |        |             | ;       .equ brg_value &23              ; 9600 baud
  23:041 | DONE wsp | em  8  8 |        |             |
  23:042 | DONE dir | em  8  8 |        |             |         .equ hw_pd0  0df00           Port 0 Data Register
  23:043 | DONE dir | em  8  8 |        |             |         .equ hw_pd1  0df01           Port 1 Data Register
  23:044 | DONE dir | em  8  8 |        |             |         .equ hw_pd2  0df02           Port 2 Data Register
  23:045 | DONE dir | em  8  8 |        |             |         .equ hw_pd3  0df03           Port 3 Data Register
  23:046 | DONE dir | em  8  8 |        |             |         .equ hw_pdd0 0df04           Port 0 Data Direction Register
  23:047 | DONE dir | em  8  8 |        |             |         .equ hw_pdd1 0df05           Port 1 Data Direction Register
  23:048 | DONE dir | em  8  8 |        |             |         .equ hw_pdd2 0df06           Port 2 Data Direction Register
  23:049 | DONE dir | em  8  8 |        |             |         .equ hw_pdd3 0df07           Port 3 Data Direction Register
  23:050 | DONE wsp | em  8  8 |        |             |
  23:051 | DONE dir | em  8  8 |        |             |         .equ hw_pd4  0df20           Port 4 Data Register
  23:052 | DONE dir | em  8  8 |        |             |         .equ hw_pd5  0df21           Port 5 Data Register
  23:053 | DONE dir | em  8  8 |        |             |         .equ hw_pd6  0df22           Port 6 Data Register
  23:054 | DONE dir | em  8  8 |        |             |         .equ hw_pd7  0df23           Port 7 Data Register
  23:055 | DONE dir | em  8  8 |        |             |         .equ hw_pdd4 0df24           Port 4 Data Direction Register
  23:056 | DONE dir | em  8  8 |        |             |         .equ hw_pdd5 0df25           Port 5 Data Direction Register
  23:057 | DONE dir | em  8  8 |        |             |         .equ hw_pdd6 0df26           Port 6 Data Direction Register
  23:058 | DONE dir | em  8  8 |        |             |         .equ hw_pcs7 0df27           Port 7 Chip Select
  23:059 | DONE wsp | em  8  8 |        |             |
  23:060 | DONE dir | em  8  8 |        |             |         .equ hw_bcr  0df40           Bus Control Register
  23:061 | DONE dir | em  8  8 |        |             |         .equ hw_sscr 0df41           System Speed Control Register
  23:062 | DONE dir | em  8  8 |        |             |         .equ hw_tcr  0df42           Timer Control Register
  23:063 | DONE dir | em  8  8 |        |             |         .equ hw_ter  0df43           Timer Enable Register
  23:064 | DONE dir | em  8  8 |        |             |         .equ hw_tifr 0df44           Timer Interrupt Flag Register
  23:065 | DONE dir | em  8  8 |        |             |         .equ hw_eifr 0df45           Edge Interrupt Flag Register
  23:066 | DONE dir | em  8  8 |        |             |         .equ hw_tier 0df46           Timer Interrupt Enable Register
  23:067 | DONE dir | em  8  8 |        |             |         .equ hw_eier 0df47           Edge Interrupt Enable Register
  23:068 | DONE dir | em  8  8 |        |             |         .equ hw_uifr 0df48           UART Interrupt Flag Register
  23:069 | DONE dir | em  8  8 |        |             |         .equ hw_uier 0df49           UART Interrupt Enable Register
  23:070 | DONE wsp | em  8  8 |        |             |
  23:071 | DONE dir | em  8  8 |        |             |         .equ hw_t0cl 0df60           Timer 0 Counter Low
  23:072 | DONE dir | em  8  8 |        |             |         .equ hw_t0ch 0df61           Timer 0 Counter High
  23:073 | DONE dir | em  8  8 |        |             |         .equ hw_t1cl 0df62           Timer 1 Counter Low
  23:074 | DONE dir | em  8  8 |        |             |         .equ hw_t1ch 0df63           Timer 1 Counter High
  23:075 | DONE dir | em  8  8 |        |             |         .equ hw_t2cl 0df64           Timer 2 Counter Low
  23:076 | DONE dir | em  8  8 |        |             |         .equ hw_t2ch 0df65           Timer 2 Counter High
  23:077 | DONE dir | em  8  8 |        |             |         .equ hw_t3cl 0df66           Timer 3 Counter Low
  23:078 | DONE dir | em  8  8 |        |             |         .equ hw_t3ch 0df67           Timer 3 Counter High
  23:079 | DONE dir | em  8  8 |        |             |         .equ hw_t4cl 0df68           Timer 4 Counter Low
  23:080 | DONE dir | em  8  8 |        |             |         .equ hw_t4ch 0df69           Timer 4 Counter High
  23:081 | DONE dir | em  8  8 |        |             |         .equ hw_t5cl 0df6a           Timer 5 Counter Low
  23:082 | DONE dir | em  8  8 |        |             |         .equ hw_t5ch 0df6b           Timer 5 Counter High
  23:083 | DONE dir | em  8  8 |        |             |         .equ hw_t6cl 0df6c           Timer 6 Counter Low
  23:084 | DONE dir | em  8  8 |        |             |         .equ hw_t6ch 0df6d           Timer 6 Counter High
  23:085 | DONE dir | em  8  8 |        |             |         .equ hw_t7cl 0df6e           Timer 7 Counter Low
  23:086 | DONE dir | em  8  8 |        |             |         .equ hw_t7ch 0df6f           Timer 7 Counter High
  23:087 | DONE wsp | em  8  8 |        |             |
  23:088 | DONE dir | em  8  8 |        |             |         .equ hw_acsr0 0df70          UART 0 Control/Status Register
  23:089 | DONE dir | em  8  8 |        |             |         .equ hw_artd0 0df71          UART 0 Data Register
  23:090 | DONE dir | em  8  8 |        |             |         .equ hw_acsr1 0df72          UART 1 Control/Status Register
  23:091 | DONE dir | em  8  8 |        |             |         .equ hw_artd1 0df73          UART 1 Data Register
  23:092 | DONE dir | em  8  8 |        |             |         .equ hw_acsr2 0df74          UART 2 Control/Status Register
  23:093 | DONE dir | em  8  8 |        |             |         .equ hw_artd2 0df75          UART 2 Data Register
  23:094 | DONE dir | em  8  8 |        |             |         .equ hw_acsr3 0df76          UART 3 Control/Status Register
  23:095 | DONE dir | em  8  8 |        |             |         .equ hw_artd3 0df77          UART 3 Data Register
  23:096 | DONE wsp | em  8  8 |        |             |
  23:097 | DONE wsp | em  8  8 |        |             |
  23:098 | DONE cmt | em  8  8 |        |             | ; ===================================================================
  23:099 | DONE cmt | em  8  8 |        |             | ; RESET HARDWARE
  23:100 | DONE cmt | em  8  8 |        |             | ; Call this during boot. Uses Port 0 for communication in the default setting
  23:101 | DONE lbl | em  8  8 | 006000 |             | reset_hardware                       
  23:102 | DONE ins | em  8  8 | 006000 | 78          |                 sei                  
  23:103 | DONE ins | em  8  8 | 006001 | 18          |                 clc                  
  23:104 | DONE ins | em  8  8 | 006002 | fb          |                 xce                  
  23:105 | DONE ctl | na  8  8 |        |             |         .!native
  23:106 | DONE ins | na  8  8 | 006003 | c2 10       |                 rep 10               
  23:107 | DONE ctl | na  8 16 |        |             |         .!xy16
  23:108 | DONE dir | na  8 16 |        |             |         .!a8                         
  23:109 | DONE cmt | na  8 16 |        |             |                 ; temporarily reset the stack
  23:110 | DONE ins | na  8 16 | 006005 | a2 ff 01    |                 ldx.# 01ff           
  23:111 | DONE ins | na  8 16 | 006008 | 9a          |                 txs                  
  23:112 | DONE wsp | na  8 16 |        |             |
  23:113 | DONE ins | na  8 16 | 006009 | 9c 49 df    |                 stz 00df49           UART Interrupt Enable Register (UIER)
  23:114 | DONE wsp | na  8 16 |        |             |
  23:115 | DONE ins | na  8 16 | 00600c | a9 c0       |                 lda.# 0c0            Ensure A15/AMS are output
  23:116 | DONE ins | na  8 16 | 00600e | 8d 24 df    |                 sta 00df24           Port 4 Data Direction Register (PDD4)
  23:117 | DONE ins | na  8 16 | 006011 | 9c 20 df    |                 stz 00df20           Select bank 0 (Port 4 Data Register, PD4)
  23:118 | DONE wsp | na  8 16 |        |             |
  23:119 | DONE ins | na  8 16 | 006014 | a9 10       |                 lda.# %00010000      Set UART0 to use timer 3
  23:120 | DONE ins | na  8 16 | 006016 | 1c 42 df    |                 trb 00df42           Timer Control Register (TCR)
  23:121 | DONE ins | na  8 16 | 006019 | a9 0b       |                 lda.# .lsb 00000b    And set baud rate
  23:122 | DONE ins | na  8 16 | 00601b | 8d 66 df    |                 sta 00df66           Timer 3 Counter Low (T3CL)
  23:123 | DONE ins | na  8 16 | 00601e | a9 00       |                 lda.# .msb 00000b    
  23:124 | DONE ins | na  8 16 | 006020 | 8d 67 df    |                 sta 00df67           Timer 3 Counter High (T3CH)
  23:125 | DONE ins | na  8 16 | 006023 | a9 08       |                 lda.# 08             Enable timer 3 (1<<3)
  23:126 | DONE ins | na  8 16 | 006025 | 0c 43 df    |                 tsb 00df43           Timer Enable Register (TER)
  23:127 | DONE wsp | na  8 16 |        |             |
  23:128 | DONE ins | na  8 16 | 006028 | a9 25       |                 lda.# %00100101      Set UART0 for 8-N-1
  23:129 | DONE ins | na  8 16 | 00602a | 8d 70 df    |                 sta 00df70           UART 0 Control/Status Register (ACSR0)
  23:130 | DONE wsp | na  8 16 |        |             |
  23:131 | DONE cmt | na  8 16 |        |             |                 ; set up direct page
  23:132 | DONE ins | na  8 16 | 00602d | c2 20       |                 rep 20               
  23:133 | DONE ctl | na 16 16 |        |             |         .!a16
  23:134 | DONE ins | na 16 16 | 00602f | a9 00 02    |                 lda.# 000200         
  23:135 | DONE ins | na 16 16 | 006032 | 5b          |                 tcd                  
  23:136 | DONE wsp | na 16 16 |        |             |
  23:137 | DONE ins | na 16 16 | 006033 | 4c 66 60    |                 jmp 006066           we return with A as 8 bits
  23:138 | DONE wsp | na 16 16 |        |             |
  23:139 | DONE wsp | na 16 16 |        |             |
  23:140 | DONE cmt | na 16 16 |        |             | ; ===================================================================
  23:141 | DONE cmt | na 16 16 |        |             | ; PUT_CHR
  23:142 | DONE cmt | na 16 16 |        |             | ; Wait until the last transmission has been completed then send the character
  23:143 | DONE cmt | na 16 16 |        |             | ; in A. Destroys A. Does not have to be called with A8.
  23:144 | DONE lbl | na 16 16 | 006036 |             | put_chr                              
  23:145 | DONE ins | na 16 16 | 006036 | 08          |                 php                  save register sizes
  23:146 | DONE ins | na 16 16 | 006037 | e2 20       |                 sep 20               
  23:147 | DONE ctl | na  8 16 |        |             |         .!a8
  23:148 | DONE ins | na  8 16 | 006039 | 48          |                 pha                  
  23:149 | DONE ins | na  8 16 | 00603a | a9 02       |                 lda.# 02             (1<<1)
  23:150 | DONE wsp | na  8 16 |        |             |
  23:151 | DONE lbl | na  8 16 | 00603c |             | put_chr_wait                         
  23:152 | DONE ins | na  8 16 | 00603c | 2c 48 df    |                 bit 00df48           timer finished?
  23:153 | DONE ins | na  8 16 | 00603f | f0 fb       |                 beq 00603c           
  23:154 | DONE wsp | na  8 16 |        |             |
  23:155 | DONE ins | na  8 16 | 006041 | 68          |                 pla                  
  23:156 | DONE ins | na  8 16 | 006042 | 8d 71 df    |                 sta 00df71           transmit char
  23:157 | DONE ins | na  8 16 | 006045 | 28          |                 plp                  
  23:158 | DONE wsp | na  8 16 |        |             |
  23:159 | DONE ins | na  8 16 | 006046 | 60          |                 rts                  
  23:160 | DONE wsp | na  8 16 |        |             |
  23:161 | DONE cmt | na  8 16 |        |             | ; ===================================================================
  23:162 | DONE cmt | na  8 16 |        |             | ; GET_CHR
  23:163 | DONE cmt | na  8 16 |        |             | ; Fetch the next character from the receive buffer waiting for some to arrive
  23:164 | DONE cmt | na  8 16 |        |             | ; if the buffer is empty.
  23:165 | DONE lbl | na  8 16 | 006047 |             | get_chr                              
  23:166 | DONE ins | na  8 16 | 006047 | 08          |                 php                  Save register sizes
  23:167 | DONE ins | na  8 16 | 006048 | e2 20       |                 sep 20               
  23:168 | DONE ctl | na  8 16 |        |             |         .!a8
  23:169 | DONE ins | na  8 16 | 00604a | a9 01       |                 lda.# 01             (1<<0)
  23:170 | DONE wsp | na  8 16 |        |             |
  23:171 | DONE lbl | na  8 16 | 00604c |             | get_chr_wait                         
  23:172 | DONE ins | na  8 16 | 00604c | 2c 48 df    |                 bit 00df48           Any data in RX buffer?
  23:173 | DONE ins | na  8 16 | 00604f | f0 fb       |                 beq 00604c           No, keep waiting
  23:174 | DONE ins | na  8 16 | 006051 | ad 71 df    |                 lda 00df71           Yes, read it
  23:175 | DONE ins | na  8 16 | 006054 | 28          |                 plp                  
  23:176 | DONE wsp | na  8 16 |        |             |
  23:177 | DONE ins | na  8 16 | 006055 | 60          |                 rts                  
  23:178 | DONE wsp | na  8 16 |        |             |
  23:179 | DONE cmt | na  8 16 |        |             | ; ===================================================================
  23:180 | DONE cmt | na  8 16 |        |             | ; HAVE_CHR?
  23:181 | DONE cmt | na  8 16 |        |             | ; Check if the receive buffer contains any data and return C=1 if there is
  23:182 | DONE cmt | na  8 16 |        |             | ; some.
  23:183 | DONE cmt | na  8 16 |        |             | ; TODO Test this
  23:184 | DONE wsp | na  8 16 |        |             |
  23:185 | DONE lbl | na  8 16 | 006056 |             | have_chr?                            
  23:186 | DONE ins | na  8 16 | 006056 | 48          |                 pha                  save caller's A
  23:187 | DONE ins | na  8 16 | 006057 | 08          |                 php                  
  23:188 | DONE ins | na  8 16 | 006058 | e2 20       |                 sep 20               
  23:189 | DONE ctl | na  8 16 |        |             |         .!a8
  23:190 | DONE ins | na  8 16 | 00605a | ad 48 df    |                 lda 00df48           read the status register
  23:191 | DONE ins | na  8 16 | 00605d | 28          |                 plp                  
  23:192 | DONE ins | na  8 16 | 00605e | 6a          |                 ror.a                shift hw_uart0r bit into carry
  23:193 | DONE ins | na  8 16 | 00605f | c2 20       |                 rep 20               
  23:194 | DONE ctl | na 16 16 |        |             |         .!a16
  23:195 | DONE ins | na 16 16 | 006061 | 68          |                 pla                  restore A
  23:196 | DONE ins | na 16 16 | 006062 | 60          |                 rts                  
  23:197 | DONE wsp | na 16 16 |        |             |
  23:198 | DONE cmt | na 16 16 |        |             | ; END
  24:000 | DONE wsp | na 16 16 |        |             |
  25:000 | DONE wsp | na 16 16 |        |             |
  26:000 | DONE cmt | na 16 16 |        |             | ; ===================================================================
  27:000 | DONE cmt | na 16 16 |        |             | ; DICTIONARY ROUTINES
  28:000 | DONE wsp | na 16 16 |        |             |
  29:000 | DONE cmt | na 16 16 |        |             | ; Word code routines are sorted alphabetically, except for the first three
  30:000 | DONE cmt | na 16 16 |        |             | ; - COLD, ABORT, and QUIT - and a few others that flow into each other. The
  31:000 | DONE cmt | na 16 16 |        |             | ; byte and cycle values are calculated without the RTS instruction.
  32:000 | DONE wsp | na 16 16 |        |             |
  33:000 | DONE wsp | na 16 16 |        |             |
  34:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
  35:000 | DONE cmt | na 16 16 |        |             | ; COLD ( -- ) X bytes / X Cycles
  36:000 | DONE cmt | na 16 16 |        |             | ; Reboot the system
  37:000 | DONE lbl | na 16 16 | 006063 |             | xt_cold                              
  38:000 | DONE wsp | na 16 16 |        |             |
  39:000 | DONE ins | na 16 16 | 006063 | 4c 00 60    |                 jmp 006000           don't use JSR, jump back to start
  40:000 | DONE lbl | na 16 16 | 006066 |             | start                                
  41:000 | DONE dir | na 16 16 |        |             |         .!native                     these should be handled by hardware reset
  42:000 | DONE dir | na 16 16 |        |             |         .!a16                        
  43:000 | DONE dir | na 16 16 |        |             |         .!xy16                       
  44:000 | DONE ins | na 16 16 | 006066 | 78          |                 sei                  
  45:000 | DONE wsp | na 16 16 |        |             |
  46:000 | DONE cmt | na 16 16 |        |             |                 ; TODO switch to Single Task mode
  47:000 | DONE cmt | na 16 16 |        |             |                 ; TODO set up Direct Page stuff
  48:000 | DONE cmt | na 16 16 |        |             |                 ; TODO initiate User variables
  49:000 | DONE wsp | na 16 16 |        |             |
  50:000 | DONE wsp | na 16 16 |        |             |
  51:000 | DONE cmt | na 16 16 |        |             |                 ; We start out in decimal mode
  52:000 | DONE ins | na 16 16 | 006067 | 20 15 66    |                 jsr 006615           
  53:000 | DONE wsp | na 16 16 |        |             |
  54:000 | DONE cmt | na 16 16 |        |             |                 ; The name token (nt) of DROP is always the first one in the
  55:000 | DONE cmt | na 16 16 |        |             |                 ; virgin Dictionary, so we start off the Dictionary Pointer (DP)
  56:000 | DONE cmt | na 16 16 |        |             |                 ; there. Anything that comes after that (with WORDS, before
  57:000 | DONE cmt | na 16 16 |        |             |                 ; that) is high-level
  58:000 | DONE ins | na 16 16 | 00606a | a9 3c 72    |                 lda.# 00723c         
  59:000 | DONE ins | na 16 16 | 00606d | 85 02       |                 sta.d 000202         
  60:000 | DONE wsp | na 16 16 |        |             |
  61:000 | DONE cmt | na 16 16 |        |             |                 ; The compiler pointer (CP) points to the first free cell
  62:000 | DONE cmt | na 16 16 |        |             |                 ; in RAM
  63:000 | DONE ins | na 16 16 | 00606f | a9 00 03    |                 lda.# 000300         
  64:000 | DONE ins | na 16 16 | 006072 | 85 00       |                 sta.d 000200         
  65:000 | DONE wsp | na 16 16 |        |             |
  66:000 | DONE cmt | na 16 16 |        |             |                 ; Prepare input buffers
  67:000 | DONE ins | na 16 16 | 006074 | a9 00 7c    |                 lda.# 007c00         start with first input buffer
  68:000 | DONE ins | na 16 16 | 006077 | 85 0c       |                 sta.d 00020c         
  69:000 | DONE ins | na 16 16 | 006079 | 64 10       |                 stz.d 000210         previous input buffer is empty
  70:000 | DONE ins | na 16 16 | 00607b | 64 0a       |                 stz.d 00020a         SOURCE-ID is zero
  71:000 | DONE ins | na 16 16 | 00607d | 64 14       |                 stz.d 000214         STATE is zero (interpret)
  72:000 | DONE wsp | na 16 16 |        |             |
  73:000 | DONE cmt | na 16 16 |        |             |                 ; Clear Data Stack
  74:000 | DONE ins | na 16 16 | 00607f | a0 00 00    |                 ldy.# 0000           
  75:000 | DONE ins | na 16 16 | 006082 | a2 f8 02    |                 ldx.# 0002f8         
  76:000 | DONE wsp | na 16 16 |        |             |
  77:000 | DONE cmt | na 16 16 |        |             |                 ; Clean the screen, assumes vt100 terminal
  78:000 | DONE ins | na 16 16 | 006085 | 20 8f 68    |                 jsr 00688f           
  79:000 | DONE wsp | na 16 16 |        |             |
  80:000 | DONE cmt | na 16 16 |        |             |                 ; Define high-level words via EVALUATE. At this point, whatever
  81:000 | DONE cmt | na 16 16 |        |             |                 ; is in Y (TOS) is garbage, so we don't have to push it to the
  82:000 | DONE cmt | na 16 16 |        |             |                 ; stack first
  83:000 | DONE ins | na 16 16 | 006088 | ca          |                 dex                  
  84:000 | DONE ins | na 16 16 | 006089 | ca          |                 dex                  
  85:000 | DONE ins | na 16 16 | 00608a | ca          |                 dex                  
  86:000 | DONE ins | na 16 16 | 00608b | ca          |                 dex                  
  87:000 | DONE ins | na 16 16 | 00608c | a9 1f 73    |                 lda.# 00731f         
  88:000 | DONE ins | na 16 16 | 00608f | 95 00       |                 sta.dx 00            Start address goes in NOS
  89:000 | DONE ins | na 16 16 | 006091 | a0 01 05    |                 ldy.# 000501         length goes in TOS
  90:000 | DONE wsp | na 16 16 |        |             |
  91:000 | DONE ins | na 16 16 | 006094 | 20 92 66    |                 jsr 006692           
  92:000 | DONE wsp | na 16 16 |        |             |
  93:000 | DONE cmt | na 16 16 |        |             |                 ; fall through to ABORT
  94:000 | DONE wsp | na 16 16 |        |             |
  95:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
  96:000 | DONE cmt | na 16 16 |        |             | ; ABORT ( -- ) 8+ bytes / X cycles
  97:000 | DONE cmt | na 16 16 |        |             | ; Reset the parameter (data) stack pointer and continue as QUIT
  98:000 | DONE cmt | na 16 16 |        |             | ; We can jump here via subroutine because we reset the stack pointer
  99:000 | DONE cmt | na 16 16 |        |             | ; anyway. Flows into QUIT.
 100:000 | DONE cmt | na 16 16 |        |             | ; TODO see which parts of COLD we should integrate here
 101:000 | DONE lbl | na 16 16 | 006097 |             | xt_abort                             
 102:000 | DONE ins | na 16 16 | 006097 | c2 20       |                 rep 20               
 102:001 | DONE ctl | na 16 16 |        |             |         .!a16
 103:000 | DONE cmt | na 16 16 |        |             |                 ; clear Data Stack
 104:000 | DONE ins | na 16 16 | 006099 | a0 00 00    |                 ldy.# 0000           
 105:000 | DONE ins | na 16 16 | 00609c | a2 f8 02    |                 ldx.# 0002f8         
 106:000 | DONE wsp | na 16 16 |        |             |
 107:000 | DONE wsp | na 16 16 |        |             |
 108:000 | DONE cmt | na 16 16 |        |             | ; drops through to QUIT, z_abort is the same as z_quit.
 109:000 | DONE wsp | na 16 16 |        |             |
 110:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 111:000 | DONE cmt | na 16 16 |        |             | ; QUIT ( -- ) X bytes / X cycles
 112:000 | DONE cmt | na 16 16 |        |             | ; Reset the input, clearning Return Stack. Jumps to QUIT do not have to be
 113:000 | DONE cmt | na 16 16 |        |             | ; subroutine jumps as the Return Stack is cleared anyway. Liara Forth follows
 114:000 | DONE cmt | na 16 16 |        |             | ; the ANSI Forth recommendation to use REFILL. Note we don't display the "ok"
 115:000 | DONE cmt | na 16 16 |        |             | ; system prompt until after the first output. This follows Gforth.
 116:000 | DONE lbl | na 16 16 | 00609f |             | xt_quit                              
 117:000 | DONE cmt | na 16 16 |        |             |                 ; clear Return Stack
 118:000 | DONE ins | na 16 16 | 00609f | a9 ff 7f    |                 lda.# 007fff         
 119:000 | DONE ins | na 16 16 | 0060a2 | 1b          |                 tcs                  
 120:000 | DONE wsp | na 16 16 |        |             |
 121:000 | DONE cmt | na 16 16 |        |             |                 ; make sure Instruction Pointer is empty
 122:000 | DONE cmt | na 16 16 |        |             |                 ; TODO move this someplace else or else it will end up in ROM
 123:000 | DONE ins | na 16 16 | 0060a3 | 9c c1 66    |                 stz 0066c1           
 124:000 | DONE wsp | na 16 16 |        |             |
 125:000 | DONE cmt | na 16 16 |        |             |                 ; switch SOURCE-ID to zero (keyboard input)
 126:000 | DONE ins | na 16 16 | 0060a6 | 64 0a       |                 stz.d 00020a         
 127:000 | DONE wsp | na 16 16 |        |             |
 128:000 | DONE cmt | na 16 16 |        |             |                 ; switch to interpret state (STATE is zero)
 129:000 | DONE ins | na 16 16 | 0060a8 | 64 14       |                 stz.d 000214         
 130:000 | DONE wsp | na 16 16 |        |             |
 131:000 | DONE lbl | na 16 16 | 0060aa |             | quit_get_line                        
 132:000 | DONE cmt | na 16 16 |        |             |                 ; Empty current input buffer. Note the previous input line is
 133:000 | DONE cmt | na 16 16 |        |             |                 ; conserved even if we came here from an abort
 134:000 | DONE ins | na 16 16 | 0060aa | 64 0e       |                 stz.d 00020e         
 135:000 | DONE wsp | na 16 16 |        |             |
 136:000 | DONE cmt | na 16 16 |        |             |                 ; Accept a line from the current input source
 137:000 | DONE ins | na 16 16 | 0060ac | 20 57 69    |                 jsr 006957           ( -- f )
 138:000 | DONE wsp | na 16 16 |        |             |
 139:000 | DONE ins | na 16 16 | 0060af | 98          |                 tya                  force flag test
 140:000 | DONE ins | na 16 16 | 0060b0 | d0 06       |                 bne 0060b8           
 141:000 | DONE wsp | na 16 16 |        |             |
 142:000 | DONE cmt | na 16 16 |        |             |                 ; If REFILL returned a FALSE flag, something went wrong and we
 143:000 | DONE cmt | na 16 16 |        |             |                 ; need to print an error message and reset the machine. We don't
 144:000 | DONE cmt | na 16 16 |        |             |                 ; need to save TOS because we're going to clobber it anyway when we
 145:000 | DONE cmt | na 16 16 |        |             |                 ; go back to ABORT.
 146:000 | DONE ins | na 16 16 | 0060b2 | a9 f4 78    |                 lda.# 0078f4         
 147:000 | DONE ins | na 16 16 | 0060b5 | 4c e5 72    |                 jmp 0072e5           
 148:000 | DONE wsp | na 16 16 |        |             |
 149:000 | DONE wsp | na 16 16 |        |             |
 150:000 | DONE lbl | na 16 16 | 0060b8 |             | quit_refill_successful               
 151:000 | DONE cmt | na 16 16 |        |             |                 ; Assume we have successfully accepted a string of input from
 152:000 | DONE cmt | na 16 16 |        |             |                 ; a source, with address of buffer in cib and length of input in
 153:000 | DONE cmt | na 16 16 |        |             |                 ; ciblen. We arrive here still with the TRUE flag from REFILL as
 154:000 | DONE cmt | na 16 16 |        |             |                 ; TOS (in Y)
 155:000 | DONE ins | na 16 16 | 0060b8 | b4 00       |                 ldy.dx 00            drop TOS
 156:000 | DONE ins | na 16 16 | 0060ba | e8          |                 inx                  
 157:000 | DONE ins | na 16 16 | 0060bb | e8          |                 inx                  
 158:000 | DONE wsp | na 16 16 |        |             |
 159:000 | DONE cmt | na 16 16 |        |             |                 ; make >IN point to begining of buffer
 160:000 | DONE ins | na 16 16 | 0060bc | 64 12       |                 stz.d 000212         
 161:000 | DONE wsp | na 16 16 |        |             |
 162:000 | DONE cmt | na 16 16 |        |             |                 ; Main compile/execute routine. Consider moving this inside QUIT
 163:000 | DONE cmt | na 16 16 |        |             |                 ; once we know everything works
 164:000 | DONE ins | na 16 16 | 0060be | 20 6a 72    |                 jsr 00726a           
 165:000 | DONE wsp | na 16 16 |        |             |
 166:000 | DONE cmt | na 16 16 |        |             |                 ; Test for Data Stack underflow. Our stack is so large in single
 167:000 | DONE cmt | na 16 16 |        |             |                 ; user mode that we don't bother checking for overflow - if that
 168:000 | DONE cmt | na 16 16 |        |             |                 ; happens, we're screwed anyway
 169:000 | DONE ins | na 16 16 | 0060c1 | e0 f9 02    |                 cpx.# 0002f9         
 170:000 | DONE ins | na 16 16 | 0060c4 | 90 06       |                 bcc 0060cc           DSP must always be smaller (!) than DSP0
 171:000 | DONE wsp | na 16 16 |        |             |
 172:000 | DONE ins | na 16 16 | 0060c6 | a9 5a 79    |                 lda.# 00795a         
 173:000 | DONE ins | na 16 16 | 0060c9 | 4c e5 72    |                 jmp 0072e5           
 174:000 | DONE wsp | na 16 16 |        |             |
 175:000 | DONE lbl | na 16 16 | 0060cc |             | quit_ok                              
 176:000 | DONE cmt | na 16 16 |        |             |                 ; Display system prompt if all went well. If we're interpreting,
 177:000 | DONE cmt | na 16 16 |        |             |                 ; this is " ok", if we're compiling, it's " compiled"
 178:000 | DONE ins | na 16 16 | 0060cc | a5 14       |                 lda.d 000214         
 179:000 | DONE ins | na 16 16 | 0060ce | d0 05       |                 bne 0060d5           
 180:000 | DONE wsp | na 16 16 |        |             |
 181:000 | DONE ins | na 16 16 | 0060d0 | a9 20 78    |                 lda.# 007820         
 182:000 | DONE ins | na 16 16 | 0060d3 | 80 03       |                 bra 0060d8           
 183:000 | DONE lbl | na 16 16 | 0060d5 |             | quit_compiled                        
 184:000 | DONE ins | na 16 16 | 0060d5 | a9 24 78    |                 lda.# 007824         fall through to quit_print
 185:000 | DONE lbl | na 16 16 | 0060d8 |             | quit_print                           
 186:000 | DONE ins | na 16 16 | 0060d8 | 20 eb 72    |                 jsr 0072eb           
 187:000 | DONE wsp | na 16 16 |        |             |
 188:000 | DONE cmt | na 16 16 |        |             |                 ; Awesome line, everybody. Now get the next one
 189:000 | DONE ins | na 16 16 | 0060db | 4c aa 60    |                 jmp 0060aa           
 190:000 | DONE wsp | na 16 16 |        |             |
 191:000 | DONE lbl | na 16 16 | 0060de |             | z_cold                               
 192:000 | DONE lbl | na 16 16 | 0060de |             | z_abort                              
 193:000 | DONE lbl | na 16 16 | 0060de |             | z_quit                               
 193:001 | DONE ins | na 16 16 | 0060de | ea          |                 nop                  dummy for compilation, TODO test if required
 194:000 | DONE wsp | na 16 16 |        |             |
 195:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 196:000 | DONE cmt | na 16 16 |        |             | ; < "LESS" ( n m -- f ) X bytes / X cycles
 197:000 | DONE cmt | na 16 16 |        |             | ; Return true flag if NOS < TOS. See
 198:000 | DONE cmt | na 16 16 |        |             | ; http://www.6502.org/tutorials/compare_beyond.html for details on the
 199:000 | DONE cmt | na 16 16 |        |             | ; comparisons
 200:000 | DONE lbl | na 16 16 | 0060df |             | xt_less                              
 201:000 | DONE ins | na 16 16 | 0060df | 98          |                 tya                  
 202:000 | DONE ins | na 16 16 | 0060e0 | a0 00 00    |                 ldy.# 0000           default is false
 203:000 | DONE wsp | na 16 16 |        |             |
 204:000 | DONE ins | na 16 16 | 0060e3 | 38          |                 sec                  
 205:000 | DONE ins | na 16 16 | 0060e4 | f5 00       |                 sbc.dx 00            
 206:000 | DONE ins | na 16 16 | 0060e6 | f0 08       |                 beq 0060f0           the same is not greater
 207:000 | DONE ins | na 16 16 | 0060e8 | 50 03       |                 bvc 0060ed           no overflow, skip ahead
 208:000 | DONE wsp | na 16 16 |        |             |
 209:000 | DONE cmt | na 16 16 |        |             |                 ; Deal with oveflow because we use signed numbers
 210:000 | DONE ins | na 16 16 | 0060ea | 49 00 80    |                 eor.# 8000           compliment negative flag
 211:000 | DONE wsp | na 16 16 |        |             |
 212:000 | DONE lbl | na 16 16 | 0060ed |             | xt_less_no_ov                        
 213:000 | DONE cmt | na 16 16 |        |             |                 ; if we're negative TOS > NOS
 214:000 | DONE ins | na 16 16 | 0060ed | 30 01       |                 bmi 0060f0           
 215:000 | DONE ins | na 16 16 | 0060ef | 88          |                 dey                  
 216:000 | DONE lbl | na 16 16 | 0060f0 |             | xt_less_nip                          
 217:000 | DONE ins | na 16 16 | 0060f0 | e8          |                 inx                  
 218:000 | DONE ins | na 16 16 | 0060f1 | e8          |                 inx                  
 219:000 | DONE wsp | na 16 16 |        |             |
 220:000 | DONE lbl | na 16 16 | 0060f2 |             | z_less                               
 220:001 | DONE ins | na 16 16 | 0060f2 | 60          |                 rts                  
 221:000 | DONE wsp | na 16 16 |        |             |
 222:000 | DONE wsp | na 16 16 |        |             |
 223:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 224:000 | DONE cmt | na 16 16 |        |             | ; <> "NOT-EQUAL" ( n m -- f ) X bytes / X cycles
 225:000 | DONE cmt | na 16 16 |        |             | ; Return true flag if TOS and NOS are not the same. This is just a different
 226:000 | DONE cmt | na 16 16 |        |             | ; version of EQUAL, we repeat the code for speed reasons
 227:000 | DONE lbl | na 16 16 | 0060f3 |             | xt_not-equal                         
 228:000 | DONE ins | na 16 16 | 0060f3 | 98          |                 tya                  
 229:000 | DONE ins | na 16 16 | 0060f4 | a0 00 00    |                 ldy.# 0000           default value is false
 230:000 | DONE wsp | na 16 16 |        |             |
 231:000 | DONE ins | na 16 16 | 0060f7 | d5 00       |                 cmp.dx 00            
 232:000 | DONE ins | na 16 16 | 0060f9 | f0 01       |                 beq 0060fc           
 233:000 | DONE ins | na 16 16 | 0060fb | 88          |                 dey                  wraps to 0FFFF (true)
 234:000 | DONE wsp | na 16 16 |        |             |
 235:000 | DONE lbl | na 16 16 | 0060fc |             | not-equal_equal                      ; yes, this is a silly name
 236:000 | DONE ins | na 16 16 | 0060fc | e8          |                 inx                  
 237:000 | DONE ins | na 16 16 | 0060fd | e8          |                 inx                  
 238:000 | DONE wsp | na 16 16 |        |             |
 239:000 | DONE lbl | na 16 16 | 0060fe |             | z_not-equal                          
 239:001 | DONE ins | na 16 16 | 0060fe | 60          |                 rts                  
 240:000 | DONE wsp | na 16 16 |        |             |
 241:000 | DONE wsp | na 16 16 |        |             |
 242:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 243:000 | DONE cmt | na 16 16 |        |             | ; <# "LESSNUMBER" ( -- ) 8 bytes / X cycles
 244:000 | DONE cmt | na 16 16 |        |             | ; Start the process to create pictured numeric output. The new string is
 245:000 | DONE cmt | na 16 16 |        |             | ; constructed from back to front, saving the new character at the beginning of
 246:000 | DONE cmt | na 16 16 |        |             | ; the output string. Since we use PAD as a starting address and work backward
 247:000 | DONE cmt | na 16 16 |        |             | ; (!), the string is constructed in the space between the end of the dictionary
 248:000 | DONE cmt | na 16 16 |        |             | ; (as defined by CP) and the PAD. This allows us to satisfy the ANS Forth
 249:000 | DONE cmt | na 16 16 |        |             | ; condition that programs don't fool around with the PAD but still use its
 250:000 | DONE cmt | na 16 16 |        |             | ; address. Code based on pForth, see
 251:000 | DONE cmt | na 16 16 |        |             | ; http://pforth.googlecode.com/svn/trunk/fth/numberio.fth pForth is in the pubic
 252:000 | DONE cmt | na 16 16 |        |             | ; domain. Forth is : <# PAD HLD ! ; we use the internal variable tohold instead
 253:000 | DONE cmt | na 16 16 |        |             | ; of HLD.
 254:000 | DONE lbl | na 16 16 | 0060ff |             | xt_lessnumber                        
 255:000 | DONE ins | na 16 16 | 0060ff | 20 83 68    |                 jsr 006883           
 256:000 | DONE ins | na 16 16 | 006102 | 84 28       |                 sty.d 000228         
 257:000 | DONE ins | na 16 16 | 006104 | b4 00       |                 ldy.dx 00            
 258:000 | DONE ins | na 16 16 | 006106 | e8          |                 inx                  
 259:000 | DONE ins | na 16 16 | 006107 | e8          |                 inx                  
 260:000 | DONE wsp | na 16 16 |        |             |
 261:000 | DONE lbl | na 16 16 | 006108 |             | z_lessnumber                         
 261:001 | DONE ins | na 16 16 | 006108 | 60          |                 rts                  
 262:000 | DONE wsp | na 16 16 |        |             |
 263:000 | DONE wsp | na 16 16 |        |             |
 264:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 265:000 | DONE cmt | na 16 16 |        |             | ; > "GREATER" ( n m -- f ) X bytes / X cycles
 266:000 | DONE cmt | na 16 16 |        |             | ; Return true flag if NOS > TOS. See
 267:000 | DONE cmt | na 16 16 |        |             | ; http://www.6502.org/tutorials/compare_beyond.html for details on the
 268:000 | DONE cmt | na 16 16 |        |             | ; comparisons
 269:000 | DONE lbl | na 16 16 | 006109 |             | xt_greater                           
 270:000 | DONE ins | na 16 16 | 006109 | 98          |                 tya                  
 271:000 | DONE ins | na 16 16 | 00610a | a0 00 00    |                 ldy.# 0000           default is false
 272:000 | DONE wsp | na 16 16 |        |             |
 273:000 | DONE ins | na 16 16 | 00610d | 38          |                 sec                  
 274:000 | DONE ins | na 16 16 | 00610e | f5 00       |                 sbc.dx 00            
 275:000 | DONE ins | na 16 16 | 006110 | f0 08       |                 beq 00611a           the same is not greater
 276:000 | DONE ins | na 16 16 | 006112 | 50 03       |                 bvc 006117           no overflow, skip ahead
 277:000 | DONE wsp | na 16 16 |        |             |
 278:000 | DONE cmt | na 16 16 |        |             |                 ; Deal with oveflow because we use signed numbers
 279:000 | DONE ins | na 16 16 | 006114 | 49 00 80    |                 eor.# 8000           compliment negative flag
 280:000 | DONE wsp | na 16 16 |        |             |
 281:000 | DONE lbl | na 16 16 | 006117 |             | xt_greater_no_ov                     
 282:000 | DONE cmt | na 16 16 |        |             |                 ; if we're still positiv, TOS < NOS
 283:000 | DONE ins | na 16 16 | 006117 | 10 01       |                 bpl 00611a           
 284:000 | DONE ins | na 16 16 | 006119 | 88          |                 dey                  
 285:000 | DONE lbl | na 16 16 | 00611a |             | xt_greater_nip                       
 286:000 | DONE ins | na 16 16 | 00611a | e8          |                 inx                  
 287:000 | DONE ins | na 16 16 | 00611b | e8          |                 inx                  
 288:000 | DONE wsp | na 16 16 |        |             |
 289:000 | DONE lbl | na 16 16 | 00611c |             | z_greater                            
 289:001 | DONE ins | na 16 16 | 00611c | 60          |                 rts                  
 290:000 | DONE wsp | na 16 16 |        |             |
 291:000 | DONE wsp | na 16 16 |        |             |
 292:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 293:000 | DONE cmt | na 16 16 |        |             | ; >BODY "TOBODY" ( xt -- addr ) 3 bytes / 6 cycles
 294:000 | DONE cmt | na 16 16 |        |             | ; Given a word's execution token (xt), return the address of the start of that
 295:000 | DONE cmt | na 16 16 |        |             | ; word's parameter field (PFA). This is the address that HERE would return right
 296:000 | DONE cmt | na 16 16 |        |             | ; after CREATE
 297:000 | DONE lbl | na 16 16 | 00611d |             | xt_tobody                            
 298:000 | DONE cmt | na 16 16 |        |             |                 ; In the header, xt already points to the CFA, which CREATE by
 299:000 | DONE cmt | na 16 16 |        |             |                 ; default fills with a JSR to DOVAR. We just need to move xt
 300:000 | DONE cmt | na 16 16 |        |             |                 ; down by three bytes
 301:000 | DONE ins | na 16 16 | 00611d | c8          |                 iny                  
 302:000 | DONE ins | na 16 16 | 00611e | c8          |                 iny                  
 303:000 | DONE ins | na 16 16 | 00611f | c8          |                 iny                  
 304:000 | DONE wsp | na 16 16 |        |             |
 305:000 | DONE lbl | na 16 16 | 006120 |             | z_tobody                             
 305:001 | DONE ins | na 16 16 | 006120 | 60          |                 rts                  
 306:000 | DONE wsp | na 16 16 |        |             |
 307:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 308:000 | DONE cmt | na 16 16 |        |             | ; >IN "TOIN" ( -- addr ) 6 bytes / 12 cycles
 309:000 | DONE cmt | na 16 16 |        |             | ; Return address where pointer to current char in input buffer lives (>IN)
 310:000 | DONE lbl | na 16 16 | 006121 |             | xt_to-in                             
 311:000 | DONE ins | na 16 16 | 006121 | ca          |                 dex                  
 312:000 | DONE ins | na 16 16 | 006122 | ca          |                 dex                  
 313:000 | DONE ins | na 16 16 | 006123 | 94 00       |                 sty.dx 00            
 314:000 | DONE wsp | na 16 16 |        |             |
 315:000 | DONE ins | na 16 16 | 006125 | a0 12 02    |                 ldy.# 000212         >IN
 316:000 | DONE lbl | na 16 16 | 006128 |             | z_to-in                              
 316:001 | DONE ins | na 16 16 | 006128 | 60          |                 rts                  
 317:000 | DONE wsp | na 16 16 |        |             |
 318:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 319:000 | DONE cmt | na 16 16 |        |             | ; >NUMBER ( ud addr u -- ud addr u ) X bytes / X cycles
 320:000 | DONE cmt | na 16 16 |        |             | ; Convert a string to a double number. Logic here is based on the routine by
 321:000 | DONE cmt | na 16 16 |        |             | ; Phil Burk of the same name in pForth; see
 322:000 | DONE cmt | na 16 16 |        |             | ; https://github.com/philburk/pforth/blob/master/fth/numberio.fth the origional
 323:000 | DONE cmt | na 16 16 |        |             | ; Forth code. We arrive here from NUMBER which has made sure that we don't have
 324:000 | DONE cmt | na 16 16 |        |             | ; to deal with a sign and we don't have to deal with a dot as a last character
 325:000 | DONE cmt | na 16 16 |        |             | ; that signalizes double - this should be a pure number string.
 326:000 | DONE cmt | na 16 16 |        |             | ; This routine calles UM*, which uses tmp1, tmp2 and tmp3, so we cannot access
 327:000 | DONE cmt | na 16 16 |        |             | ; any of those.
 328:000 | DONE lbl | na 16 16 | 006129 |             | xt_tonumber                          
 329:000 | DONE dir | na 16 16 |        |             |         .!a16                        
 330:000 | DONE cmt | na 16 16 |        |             |                 ; For the math routine, we move the inputs to the scratchpad to
 331:000 | DONE cmt | na 16 16 |        |             |                 ; avoid having to fool around with the Data Stack.
 332:000 | DONE cmt | na 16 16 |        |             |                 ;
 333:000 | DONE cmt | na 16 16 |        |             |                 ;     +-----+-----+-----+-----+-----+-----+-----+-----+
 334:000 | DONE cmt | na 16 16 |        |             |                 ;     |   UD-LO   |   UD-HI   |     N     | UD-HI-LO  |
 335:000 | DONE cmt | na 16 16 |        |             |                 ;     |           |           |           |           |
 336:000 | DONE cmt | na 16 16 |        |             |                 ;     |  S    S+1 | S+2   S+3 | S+4   S+5 | S+6   S+7 |
 337:000 | DONE cmt | na 16 16 |        |             |                 ;     +-----+-----+-----+-----+-----+-----+-----+-----+
 338:000 | DONE wsp | na 16 16 |        |             |
 339:000 | DONE cmt | na 16 16 |        |             |                 ; The math routine works by converting one character to its
 340:000 | DONE cmt | na 16 16 |        |             |                 ; numerical value (N) via DIGIT? and storing it in S+4 for
 341:000 | DONE cmt | na 16 16 |        |             |                 ; the moment. We then multiply the UD-HI value with the radix
 342:000 | DONE cmt | na 16 16 |        |             |                 ; (from BASE) using UM*, which returns a double-cell result. We
 343:000 | DONE cmt | na 16 16 |        |             |                 ; discard the high cell of that result (UD-HI-HI) and store the
 344:000 | DONE cmt | na 16 16 |        |             |                 ; low cell (UD-HI-LO) in S+6 for now. -- The second part is
 345:000 | DONE cmt | na 16 16 |        |             |                 ; multiplying UD-LO with the radix. The high cell (UD-LO-HI)
 346:000 | DONE cmt | na 16 16 |        |             |                 ; gets put in S+2, the low cell (HD-LO-LO) in S. We then use
 347:000 | DONE cmt | na 16 16 |        |             |                 ; a version of D+ to add ( S S+2 ) and ( S+4 S+6) together,
 348:000 | DONE cmt | na 16 16 |        |             |                 ; storing the result back in S and S+2, before we start another
 349:000 | DONE cmt | na 16 16 |        |             |                 ; round with it as the new UD-LO and UD-HI.
 350:000 | DONE wsp | na 16 16 |        |             |
 351:000 | DONE cmt | na 16 16 |        |             |                 ; Fill the scratchpad. We arrive with ( ud-lo ud-hi addr u ).
 352:000 | DONE cmt | na 16 16 |        |             |                 ; After this step, the original ud-lo and ud-hi will still be on
 353:000 | DONE cmt | na 16 16 |        |             |                 ; the Data Stack, but will be ignored and later overwritten
 354:000 | DONE ins | na 16 16 | 006129 | b5 04       |                 lda.dx 04            ud-lo
 355:000 | DONE ins | na 16 16 | 00612b | 85 20       |                 sta.d 000220         
 356:000 | DONE ins | na 16 16 | 00612d | b5 02       |                 lda.dx 02            ud-hi
 357:000 | DONE ins | na 16 16 | 00612f | 85 22       |                 sta.d 000222         
 358:000 | DONE wsp | na 16 16 |        |             |
 359:000 | DONE cmt | na 16 16 |        |             |                 ; We push down one on the Data Stack to use TOS for character
 360:000 | DONE cmt | na 16 16 |        |             |                 ; conversion - now ( ud-lo ud-hi addr u u )
 361:000 | DONE ins | na 16 16 | 006131 | ca          |                 dex                  
 362:000 | DONE ins | na 16 16 | 006132 | ca          |                 dex                  
 363:000 | DONE ins | na 16 16 | 006133 | 94 00       |                 sty.dx 00            
 364:000 | DONE wsp | na 16 16 |        |             |
 365:000 | DONE lbl | na 16 16 | 006135 |             | tonumber_loop                        
 366:000 | DONE cmt | na 16 16 |        |             |                 ; Get one character
 367:000 | DONE ins | na 16 16 | 006135 | a1 02       |                 lda.dxi 02           
 368:000 | DONE ins | na 16 16 | 006137 | a8          |                 tay                  ( ud-lo ud-hi addr u char )
 369:000 | DONE wsp | na 16 16 |        |             |
 370:000 | DONE cmt | na 16 16 |        |             |                 ; Convert one character. DIGIT? takes care of the correct
 371:000 | DONE cmt | na 16 16 |        |             |                 ; register size for A and does a paranoid AND to make sure that
 372:000 | DONE cmt | na 16 16 |        |             |                 ; B is zero, so we don't have to do any of that here.
 373:000 | DONE ins | na 16 16 | 006138 | 20 bb 65    |                 jsr 0065bb           ( char -- n -1 | char 0 )
 374:000 | DONE wsp | na 16 16 |        |             |
 375:000 | DONE cmt | na 16 16 |        |             |                 ; This gives us (ud-lo ud-hi addr u char f | n f ), so check the
 376:000 | DONE cmt | na 16 16 |        |             |                 ; flag. If it is zero, we return what we have and let the caller
 377:000 | DONE cmt | na 16 16 |        |             |                 ; (usually NUMBER) complain to the user
 378:000 | DONE ins | na 16 16 | 00613b | 98          |                 tya                  
 379:000 | DONE ins | na 16 16 | 00613c | d0 06       |                 bne 006144           
 380:000 | DONE wsp | na 16 16 |        |             |
 381:000 | DONE ins | na 16 16 | 00613e | b4 00       |                 ldy.dx 00            
 382:000 | DONE ins | na 16 16 | 006140 | e8          |                 inx                  
 383:000 | DONE ins | na 16 16 | 006141 | e8          |                 inx                  
 384:000 | DONE ins | na 16 16 | 006142 | 80 35       |                 bra 006179           
 385:000 | DONE wsp | na 16 16 |        |             |
 386:000 | DONE lbl | na 16 16 | 006144 |             | tonumber_ok                          
 387:000 | DONE cmt | na 16 16 |        |             |                 ; Conversion was successful, so we're here with
 388:000 | DONE cmt | na 16 16 |        |             |                 ; ( ud-lo ud-hi addr u n -1 ) and can start the math routine.
 389:000 | DONE wsp | na 16 16 |        |             |
 390:000 | DONE cmt | na 16 16 |        |             |                 ; Save N so we don't have to fool around with the Data Stack
 391:000 | DONE ins | na 16 16 | 006144 | b5 00       |                 lda.dx 00            
 392:000 | DONE ins | na 16 16 | 006146 | 85 24       |                 sta.d 000224         
 393:000 | DONE wsp | na 16 16 |        |             |
 394:000 | DONE cmt | na 16 16 |        |             |                 ; Now multiply ud-hi (the one in the scratchpad, not the
 395:000 | DONE cmt | na 16 16 |        |             |                 ; original one in the Data Stack) by the radix from BASE. We can
 396:000 | DONE cmt | na 16 16 |        |             |                 ; clobber TOS and NOS
 397:000 | DONE ins | na 16 16 | 006148 | a5 22       |                 lda.d 000222         
 398:000 | DONE ins | na 16 16 | 00614a | 95 00       |                 sta.dx 00            
 399:000 | DONE ins | na 16 16 | 00614c | a4 1c       |                 ldy.d 00021c         ( ud-lo ud-hi addr u ud-hi base )
 400:000 | DONE wsp | na 16 16 |        |             |
 401:000 | DONE cmt | na 16 16 |        |             |                 ; UM* returns a double celled number
 402:000 | DONE ins | na 16 16 | 00614e | 20 af 6a    |                 jsr 006aaf           ( ud-lo ud-hi addr u ud-hi-lo ud-hi-hi )
 403:000 | DONE wsp | na 16 16 |        |             |
 404:000 | DONE cmt | na 16 16 |        |             |                 ; Move ud-hi-lo to safety
 405:000 | DONE ins | na 16 16 | 006151 | b5 00       |                 lda.dx 00            ud-hi-lo
 406:000 | DONE ins | na 16 16 | 006153 | 85 26       |                 sta.d 000226         
 407:000 | DONE wsp | na 16 16 |        |             |
 408:000 | DONE cmt | na 16 16 |        |             |                 ; Now we multiply ud-lo, overwriting the stack entries
 409:000 | DONE ins | na 16 16 | 006155 | a5 20       |                 lda.d 000220         
 410:000 | DONE ins | na 16 16 | 006157 | 95 00       |                 sta.dx 00            ( ud-lo ud-hi addr u ud-lo ud-hi-hi )
 411:000 | DONE ins | na 16 16 | 006159 | a4 1c       |                 ldy.d 00021c         ( ud-lo ud-hi addr u ud-lo base )
 412:000 | DONE wsp | na 16 16 |        |             |
 413:000 | DONE ins | na 16 16 | 00615b | 20 af 6a    |                 jsr 006aaf           ( ud-lo ud-hi addr u ud-lo-lo ud-lo-hi )
 414:000 | DONE ins | na 16 16 | 00615e | 84 22       |                 sty.d 000222         
 415:000 | DONE ins | na 16 16 | 006160 | b5 00       |                 lda.dx 00            
 416:000 | DONE ins | na 16 16 | 006162 | 85 20       |                 sta.d 000220         
 417:000 | DONE wsp | na 16 16 |        |             |
 418:000 | DONE cmt | na 16 16 |        |             |                 ; This is a faster version of D+
 419:000 | DONE ins | na 16 16 | 006164 | a5 20       |                 lda.d 000220         
 420:000 | DONE ins | na 16 16 | 006166 | 18          |                 clc                  
 421:000 | DONE ins | na 16 16 | 006167 | 65 24       |                 adc.d 000224         
 422:000 | DONE ins | na 16 16 | 006169 | 85 20       |                 sta.d 000220         this is the new ud-lo
 423:000 | DONE ins | na 16 16 | 00616b | a5 22       |                 lda.d 000222         
 424:000 | DONE ins | na 16 16 | 00616d | 65 26       |                 adc.d 000226         
 425:000 | DONE ins | na 16 16 | 00616f | 85 22       |                 sta.d 000222         this is the new ud-hi
 426:000 | DONE wsp | na 16 16 |        |             |
 427:000 | DONE cmt | na 16 16 |        |             |                 ; Clean up: Get rid of one of the two top elements on the Data
 428:000 | DONE cmt | na 16 16 |        |             |                 ; Stack. NIP is faster if Y is TOS
 429:000 | DONE ins | na 16 16 | 006171 | e8          |                 inx                  
 430:000 | DONE ins | na 16 16 | 006172 | e8          |                 inx                  ( ud-lo ud-hi addr u ud-lo-hi )
 431:000 | DONE wsp | na 16 16 |        |             |
 432:000 | DONE cmt | na 16 16 |        |             |                 ; One character down
 433:000 | DONE ins | na 16 16 | 006173 | f6 02       |                 inc.dx 02            increase address
 434:000 | DONE ins | na 16 16 | 006175 | d6 00       |                 dec.dx 00            decrease length
 435:000 | DONE wsp | na 16 16 |        |             |
 436:000 | DONE ins | na 16 16 | 006177 | d0 bc       |                 bne 006135           
 437:000 | DONE wsp | na 16 16 |        |             |
 438:000 | DONE lbl | na 16 16 | 006179 |             | tonumber_done                        
 439:000 | DONE cmt | na 16 16 |        |             |                 ; Counter has reached zero or we have an error. In both cases,
 440:000 | DONE cmt | na 16 16 |        |             |                 ; we clean up the Data Stack and return. We arrive here with
 441:000 | DONE cmt | na 16 16 |        |             |                 ; ( ud-lo ud-hi addr u char ) if there was an error
 442:000 | DONE cmt | na 16 16 |        |             |                 ; and ( ud-lo ud-hi addr u ud-lo ) if not
 443:000 | DONE ins | na 16 16 | 006179 | b4 00       |                 ldy.dx 00            
 444:000 | DONE ins | na 16 16 | 00617b | e8          |                 inx                  
 445:000 | DONE ins | na 16 16 | 00617c | e8          |                 inx                  ( ud-lo ud-hi addr u )
 446:000 | DONE wsp | na 16 16 |        |             |
 447:000 | DONE cmt | na 16 16 |        |             |                 ; The new ud-lo and ud-hi are still on the scratch pad
 448:000 | DONE ins | na 16 16 | 00617d | a5 20       |                 lda.d 000220         new ud-lo
 449:000 | DONE ins | na 16 16 | 00617f | 95 04       |                 sta.dx 04            
 450:000 | DONE ins | na 16 16 | 006181 | a5 22       |                 lda.d 000222         
 451:000 | DONE ins | na 16 16 | 006183 | 95 02       |                 sta.dx 02            new ud-hi
 452:000 | DONE wsp | na 16 16 |        |             |
 453:000 | DONE lbl | na 16 16 | 006185 |             | z_tonumber                           
 453:001 | DONE ins | na 16 16 | 006185 | 60          |                 rts                  
 454:000 | DONE wsp | na 16 16 |        |             |
 455:000 | DONE wsp | na 16 16 |        |             |
 456:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 457:000 | DONE cmt | na 16 16 |        |             | ; >R "TOR" ( n -- ) (R: -- n )  7 bytes / 22 cycles
 458:000 | DONE cmt | na 16 16 |        |             | ; Move Top of Data Stack to Top of Return Stack
 459:000 | DONE cmt | na 16 16 |        |             | ; TODO consider stripping PHA/PLA if natively compiled (see COMPILE,)
 460:000 | DONE lbl | na 16 16 | 006186 |             | xt_tor                               
 461:000 | DONE dir | na 16 16 |        |             |         .!a16                        
 462:000 | DONE cmt | na 16 16 |        |             |                 ; Save the return address. If this word is natively coded, this
 463:000 | DONE cmt | na 16 16 |        |             |                 ; is a complete waste of nine cycles, but required for
 464:000 | DONE cmt | na 16 16 |        |             |                 ; subroutine coding
 465:000 | DONE ins | na 16 16 | 006186 | 68          |                 pla                  
 466:000 | DONE wsp | na 16 16 |        |             |
 467:000 | DONE ins | na 16 16 | 006187 | 5a          |                 phy                  the actual work
 468:000 | DONE wsp | na 16 16 |        |             |
 469:000 | DONE ins | na 16 16 | 006188 | b4 00       |                 ldy.dx 00            DROP
 470:000 | DONE ins | na 16 16 | 00618a | e8          |                 inx                  
 471:000 | DONE ins | na 16 16 | 00618b | e8          |                 inx                  
 472:000 | DONE wsp | na 16 16 |        |             |
 473:000 | DONE ins | na 16 16 | 00618c | 48          |                 pha                  put return address back in place
 474:000 | DONE wsp | na 16 16 |        |             |
 475:000 | DONE lbl | na 16 16 | 00618d |             | z_tor                                
 475:001 | DONE ins | na 16 16 | 00618d | 60          |                 rts                  
 476:000 | DONE wsp | na 16 16 |        |             |
 477:000 | DONE wsp | na 16 16 |        |             |
 478:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 479:000 | DONE cmt | na 16 16 |        |             | ; . "DOT" ( n -- ) X bytes / X cycles
 480:000 | DONE cmt | na 16 16 |        |             | ; Print value that is TOS followed by a single space. Forth code is
 481:000 | DONE cmt | na 16 16 |        |             | ; DUP ABS 0 <# #S ROT SIGN #> TYPE SPACE  Based on
 482:000 | DONE cmt | na 16 16 |        |             | ; https://github.com/philburk/pforth/blob/master/fth/numberio.fth
 483:000 | DONE cmt | na 16 16 |        |             | ; Since this is used interactively, and humans are slow (just ask GlaDOS), we
 484:000 | DONE cmt | na 16 16 |        |             | ; focus on size.
 485:000 | DONE cmt | na 16 16 |        |             | ; TODO Once we know this works, move to assembler
 486:000 | DONE lbl | na 16 16 | 00618e |             | xt_dot                               
 487:000 | DONE ins | na 16 16 | 00618e | 20 8d 66    |                 jsr 00668d           ( n n )
 488:000 | DONE ins | na 16 16 | 006191 | 20 a5 63    |                 jsr 0063a5           ( n n )
 489:000 | DONE ins | na 16 16 | 006194 | 20 ec 62    |                 jsr 0062ec           ( n n 0 )
 490:000 | DONE ins | na 16 16 | 006197 | 20 ff 60    |                 jsr 0060ff           ( n n 0 )
 491:000 | DONE ins | na 16 16 | 00619a | 20 88 62    |                 jsr 006288           ( n ud )
 492:000 | DONE ins | na 16 16 | 00619d | 20 8a 69    |                 jsr 00698a           ( ud n )
 493:000 | DONE ins | na 16 16 | 0061a0 | 20 b5 69    |                 jsr 0069b5           ( ud )
 494:000 | DONE ins | na 16 16 | 0061a3 | 20 79 62    |                 jsr 006279           
 495:000 | DONE ins | na 16 16 | 0061a6 | 20 73 6a    |                 jsr 006a73           
 496:000 | DONE ins | na 16 16 | 0061a9 | 20 38 6a    |                 jsr 006a38           
 497:000 | DONE wsp | na 16 16 |        |             |
 498:000 | DONE lbl | na 16 16 | 0061ac |             | z_dot                                
 498:001 | DONE ins | na 16 16 | 0061ac | 60          |                 rts                  
 499:000 | DONE wsp | na 16 16 |        |             |
 500:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 501:000 | DONE cmt | na 16 16 |        |             | ; .( "DOTPAREN" ( "string" -- ) 13 bytes / X cycles
 502:000 | DONE cmt | na 16 16 |        |             | ; Display string delimited by ")" immediately, regardless if word is compiled or
 503:000 | DONE cmt | na 16 16 |        |             | ; interpreted. Forth definition is  .( [CHAR] ) PARSE TYPE ; IMMEDIATE
 504:000 | DONE cmt | na 16 16 |        |             | ; TODO Decide if this should be a high-level word
 505:000 | DONE lbl | na 16 16 | 0061ad |             | xt_dotparen                          
 506:000 | DONE cmt | na 16 16 |        |             |                ; use PARSE to find the end of the string
 507:000 | DONE ins | na 16 16 | 0061ad | ca          |                 dex                  
 508:000 | DONE ins | na 16 16 | 0061ae | ca          |                 dex                  
 509:000 | DONE ins | na 16 16 | 0061af | 94 00       |                 sty.dx 00            
 510:000 | DONE ins | na 16 16 | 0061b1 | a0 29 00    |                 ldy.# 29             
 511:000 | DONE wsp | na 16 16 |        |             |
 512:000 | DONE ins | na 16 16 | 0061b4 | 20 ce 68    |                 jsr 0068ce           ( -- addr u)
 513:000 | DONE ins | na 16 16 | 0061b7 | 20 73 6a    |                 jsr 006a73           
 514:000 | DONE wsp | na 16 16 |        |             |
 515:000 | DONE lbl | na 16 16 | 0061ba |             | z_dotparen                           
 515:001 | DONE ins | na 16 16 | 0061ba | 60          |                 rts                  
 516:000 | DONE wsp | na 16 16 |        |             |
 517:000 | DONE wsp | na 16 16 |        |             |
 518:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 519:000 | DONE cmt | na 16 16 |        |             | ; ." "DOTQUOTE" ( -- ) X bytes / X cycles
 520:000 | DONE cmt | na 16 16 |        |             | ; Compile string that is printed during run time. ANSI Forth wants this to be
 521:000 | DONE cmt | na 16 16 |        |             | ; compile-only, even though everybody and their friend uses it for everything.
 522:000 | DONE cmt | na 16 16 |        |             | ; We follow the book here, and recommend .( for general printing.
 523:000 | DONE lbl | na 16 16 | 0061bb |             | xt_dotquote                          
 524:000 | DONE ins | na 16 16 | 0061bb | ca          |                 dex                  
 525:000 | DONE ins | na 16 16 | 0061bc | ca          |                 dex                  
 526:000 | DONE ins | na 16 16 | 0061bd | 94 00       |                 sty.dx 00            
 527:000 | DONE ins | na 16 16 | 0061bf | a0 22 00    |                 ldy.# 0022           ASCII for "
 528:000 | DONE wsp | na 16 16 |        |             |
 529:000 | DONE ins | na 16 16 | 0061c2 | 20 ce 68    |                 jsr 0068ce           
 530:000 | DONE ins | na 16 16 | 0061c5 | 20 c3 69    |                 jsr 0069c3           
 531:000 | DONE wsp | na 16 16 |        |             |
 532:000 | DONE ins | na 16 16 | 0061c8 | f4 73 6a    |                 phe.# 006a73         
 533:000 | DONE ins | na 16 16 | 0061cb | 20 c4 72    |                 jsr 0072c4           
 534:000 | DONE wsp | na 16 16 |        |             |
 535:000 | DONE ins | na 16 16 | 0061ce | 60          |                 rts                  
 536:000 | DONE lbl | na 16 16 | 0061cf |             | z_dotquote                           
 537:000 | DONE wsp | na 16 16 |        |             |
 538:000 | DONE wsp | na 16 16 |        |             |
 539:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 540:000 | DONE cmt | na 16 16 |        |             | ; .S "DOTS" ( -- ) X bytes / X cycles
 541:000 | DONE cmt | na 16 16 |        |             | ; Print content of Data Stack non-distructively. Since this is for humans, we
 542:000 | DONE cmt | na 16 16 |        |             | ; don't have to worry about speed. We follow the format of Gforth
 543:000 | DONE cmt | na 16 16 |        |             | ; and print the number of elements first in brackets, followed by the Data Stack
 544:000 | DONE cmt | na 16 16 |        |             | ; content (if present).
 545:000 | DONE lbl | na 16 16 | 0061cf |             | xt_dots                              
 546:000 | DONE dir | na 16 16 |        |             |         .!a16                        
 547:000 | DONE dir | na 16 16 |        |             |         .!xy16                       
 548:000 | DONE ins | na 16 16 | 0061cf | 20 1b 66    |                 jsr 00661b           ( -- u)
 549:000 | DONE wsp | na 16 16 |        |             |
 550:000 | DONE cmt | na 16 16 |        |             |                 ; Print stack depth in brackets
 551:000 | DONE cmt | na 16 16 |        |             |                 ; TODO rewrite this to use EMIT
 552:000 | DONE ins | na 16 16 | 0061d2 | a9 3c 00    |                 lda.# 3c             
 553:000 | DONE ins | na 16 16 | 0061d5 | 20 36 60    |                 jsr 006036           
 554:000 | DONE wsp | na 16 16 |        |             |
 555:000 | DONE cmt | na 16 16 |        |             |                 ; --- TEMP print routine ---
 556:000 | DONE ins | na 16 16 | 0061d8 | 98          |                 tya                  
 557:000 | DONE ins | na 16 16 | 0061d9 | 29 00 ff    |                 and.# 0ff00          
 558:000 | DONE ins | na 16 16 | 0061dc | eb          |                 xba                  
 559:000 | DONE ins | na 16 16 | 0061dd | 20 03 73    |                 jsr 007303           
 560:000 | DONE ins | na 16 16 | 0061e0 | 98          |                 tya                  
 561:000 | DONE ins | na 16 16 | 0061e1 | 29 ff 00    |                 and.# 00ff           
 562:000 | DONE ins | na 16 16 | 0061e4 | 20 03 73    |                 jsr 007303           
 563:000 | DONE cmt | na 16 16 |        |             |                 ; --- TEMP print routine ---
 564:000 | DONE wsp | na 16 16 |        |             |
 565:000 | DONE cmt | na 16 16 |        |             |                 ; TODO rewrite this to use EMIT
 566:000 | DONE ins | na 16 16 | 0061e7 | a9 3e 00    |                 lda.# 3e             
 567:000 | DONE ins | na 16 16 | 0061ea | 20 36 60    |                 jsr 006036           
 568:000 | DONE ins | na 16 16 | 0061ed | 20 38 6a    |                 jsr 006a38           
 569:000 | DONE wsp | na 16 16 |        |             |
 570:000 | DONE wsp | na 16 16 |        |             |
 571:000 | DONE cmt | na 16 16 |        |             |                 ; There will be a lot of cases where .S is used when the stack
 572:000 | DONE cmt | na 16 16 |        |             |                 ; is empty. Get them first and exit quickly
 573:000 | DONE ins | na 16 16 | 0061f0 | 98          |                 tya                  force flag test
 574:000 | DONE ins | na 16 16 | 0061f1 | f0 20       |                 beq 006213           
 575:000 | DONE wsp | na 16 16 |        |             |
 576:000 | DONE lbl | na 16 16 | 0061f3 |             | dots_not_empty                       
 577:000 | DONE cmt | na 16 16 |        |             |                 ; We have at least one element on the stack, which used to be in
 578:000 | DONE cmt | na 16 16 |        |             |                 ; Y as TOS, but is now NOS and therefore accessable by X. Also,
 579:000 | DONE cmt | na 16 16 |        |             |                 ; the depth of the Data Stack is already in Y waiting to be used
 580:000 | DONE cmt | na 16 16 |        |             |                 ; as a counter. We use this to our advantage.
 581:000 | DONE wsp | na 16 16 |        |             |
 582:000 | DONE cmt | na 16 16 |        |             |                 ; Normally we would go with STX.D tmptos / LDX.D tmptos with
 583:000 | DONE cmt | na 16 16 |        |             |                 ; 4 bytes and 8 cycles because we value speed over size.
 584:000 | DONE cmt | na 16 16 |        |             |                 ; However, .S is used interactively, and humans
 585:000 | DONE cmt | na 16 16 |        |             |                 ; won't notice the one cycle more of PHX/PLX (2 bytes,
 586:000 | DONE cmt | na 16 16 |        |             |                 ; 9 cycles), and we save the two bytes.
 587:000 | DONE ins | na 16 16 | 0061f3 | da          |                 phx                  
 588:000 | DONE wsp | na 16 16 |        |             |
 589:000 | DONE cmt | na 16 16 |        |             |                 ; We print from the bottom up. Note that the Data Stack locations
 590:000 | DONE cmt | na 16 16 |        |             |                 ; dsp0 and dsp0+2 always contain garbage so they can be skipped.
 591:000 | DONE cmt | na 16 16 |        |             |                 ; See docs/INTERNALS.md for details
 592:000 | DONE ins | na 16 16 | 0061f4 | a2 f8 02    |                 ldx.# 0002f8         points to dsp0, which is garbage
 593:000 | DONE ins | na 16 16 | 0061f7 | ca          |                 dex                  
 594:000 | DONE ins | na 16 16 | 0061f8 | ca          |                 dex                  points to dsp0-2, which is also garbage
 595:000 | DONE wsp | na 16 16 |        |             |
 596:000 | DONE lbl | na 16 16 | 0061f9 |             | dots_loop                            
 597:000 | DONE ins | na 16 16 | 0061f9 | ca          |                 dex                  get next element on DS, initially dsp0-4
 598:000 | DONE ins | na 16 16 | 0061fa | ca          |                 dex                  
 599:000 | DONE wsp | na 16 16 |        |             |
 600:000 | DONE cmt | na 16 16 |        |             |                 ; --- TEMP print routine ---
 601:000 | DONE cmt | na 16 16 |        |             |                 ; TODO call EMIT
 602:000 | DONE ins | na 16 16 | 0061fb | b5 00       |                 lda.dx 00            
 603:000 | DONE ins | na 16 16 | 0061fd | 29 00 ff    |                 and.# 0ff00          
 604:000 | DONE ins | na 16 16 | 006200 | eb          |                 xba                  
 605:000 | DONE ins | na 16 16 | 006201 | 20 03 73    |                 jsr 007303           
 606:000 | DONE ins | na 16 16 | 006204 | b5 00       |                 lda.dx 00            
 607:000 | DONE ins | na 16 16 | 006206 | 29 ff 00    |                 and.# 00ff           
 608:000 | DONE ins | na 16 16 | 006209 | 20 03 73    |                 jsr 007303           
 609:000 | DONE ins | na 16 16 | 00620c | 20 38 6a    |                 jsr 006a38           
 610:000 | DONE cmt | na 16 16 |        |             |                 ; --- TEMP print routine ---
 611:000 | DONE wsp | na 16 16 |        |             |
 612:000 | DONE ins | na 16 16 | 00620f | 88          |                 dey                  
 613:000 | DONE ins | na 16 16 | 006210 | d0 e7       |                 bne 0061f9           
 614:000 | DONE wsp | na 16 16 |        |             |
 615:000 | DONE ins | na 16 16 | 006212 | fa          |                 plx                  restore original DSP
 616:000 | DONE wsp | na 16 16 |        |             |
 617:000 | DONE lbl | na 16 16 | 006213 |             | dots_done                            
 618:000 | DONE cmt | na 16 16 |        |             |                 ; Clean up. Again, we don't care about speed in this
 619:000 | DONE cmt | na 16 16 |        |             |                 ; word so we save one byte by doing DROP the slow way
 620:000 | DONE ins | na 16 16 | 006213 | 20 61 66    |                 jsr 006661           
 621:000 | DONE wsp | na 16 16 |        |             |
 622:000 | DONE lbl | na 16 16 | 006216 |             | z_dots                               
 622:001 | DONE ins | na 16 16 | 006216 | 60          |                 rts                  
 623:000 | DONE wsp | na 16 16 |        |             |
 624:000 | DONE wsp | na 16 16 |        |             |
 625:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 626:000 | DONE cmt | na 16 16 |        |             | ; , "COMMA" ( n -- ) 11 bytes / 29 cycles
 627:000 | DONE cmt | na 16 16 |        |             | ; Allot one cell and store TOS in memory. We ignore alignment issues, though
 628:000 | DONE cmt | na 16 16 |        |             | ; satisfy the ANSI requirement that an aligned compiler pointer will remain
 629:000 | DONE cmt | na 16 16 |        |             | ; aligned
 630:000 | DONE cmt | na 16 16 |        |             | ; There is another variant possible:
 631:000 | DONE cmt | na 16 16 |        |             | ;               tya
 632:000 | DONE cmt | na 16 16 |        |             | ;               ldy.d cp
 633:000 | DONE cmt | na 16 16 |        |             | ;               sta.y 0000
 634:000 | DONE cmt | na 16 16 |        |             | ;               iny
 635:000 | DONE cmt | na 16 16 |        |             | ;               iny
 636:000 | DONE cmt | na 16 16 |        |             | ;               sty.d cp
 637:000 | DONE cmt | na 16 16 |        |             | ;               ldy.dx 00
 638:000 | DONE cmt | na 16 16 |        |             | ;               inx
 639:000 | DONE cmt | na 16 16 |        |             | ;               inx
 640:000 | DONE cmt | na 16 16 |        |             | ; This is as fast as the variant below, but three bytes longer
 641:000 | DONE lbl | na 16 16 | 006217 |             | xt_comma                             
 642:000 | DONE dir | na 16 16 |        |             |         .!a16                        
 643:000 | DONE ins | na 16 16 | 006217 | 98          |                 tya                  
 644:000 | DONE ins | na 16 16 | 006218 | 92 00       |                 sta.di 000200        STA (CP)
 645:000 | DONE ins | na 16 16 | 00621a | e6 00       |                 inc.d 000200         
 646:000 | DONE ins | na 16 16 | 00621c | e6 00       |                 inc.d 000200         
 647:000 | DONE wsp | na 16 16 |        |             |
 648:000 | DONE ins | na 16 16 | 00621e | b4 00       |                 ldy.dx 00            
 649:000 | DONE ins | na 16 16 | 006220 | e8          |                 inx                  
 650:000 | DONE ins | na 16 16 | 006221 | e8          |                 inx                  
 651:000 | DONE wsp | na 16 16 |        |             |
 652:000 | DONE lbl | na 16 16 | 006222 |             | z_comma                              
 652:001 | DONE ins | na 16 16 | 006222 | 60          |                 rts                  
 653:000 | DONE wsp | na 16 16 |        |             |
 654:000 | DONE wsp | na 16 16 |        |             |
 655:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 656:000 | DONE cmt | na 16 16 |        |             | ; : "COLON" ( "name" -- ) X bytes / X cycles
 657:000 | DONE cmt | na 16 16 |        |             | ; Start compilation of new word into the Dictionary. Use the CREATE routine
 658:000 | DONE cmt | na 16 16 |        |             | ; and fill in the rest by hand.
 659:000 | DONE lbl | na 16 16 | 006223 |             | xt_colon                             
 660:000 | DONE dir | na 16 16 |        |             |         .!a16                        
 661:000 | DONE cmt | na 16 16 |        |             |                 ; if we are already in compile mode, complain and abort
 662:000 | DONE ins | na 16 16 | 006223 | a5 14       |                 lda.d 000214         
 663:000 | DONE ins | na 16 16 | 006225 | f0 06       |                 beq 00622d           
 664:000 | DONE wsp | na 16 16 |        |             |
 665:000 | DONE ins | na 16 16 | 006227 | a9 42 79    |                 lda.# 007942         
 666:000 | DONE ins | na 16 16 | 00622a | 4c e5 72    |                 jmp 0072e5           
 667:000 | DONE lbl | na 16 16 | 00622d |             | @                                    
 668:000 | DONE cmt | na 16 16 |        |             |                 ; Switch to compile state. From now on, everything goes in the
 669:000 | DONE cmt | na 16 16 |        |             |                 ; Dictionary
 670:000 | DONE ins | na 16 16 | 00622d | e6 14       |                 inc.d 000214         
 671:000 | DONE wsp | na 16 16 |        |             |
 672:000 | DONE cmt | na 16 16 |        |             |                 ; CREATE is going to change DP to point to the new word's
 673:000 | DONE cmt | na 16 16 |        |             |                 ; header. While this is fine for (say) variables, it would mean
 674:000 | DONE cmt | na 16 16 |        |             |                 ; that FIND-NAME etc would find a half-finished word when
 675:000 | DONE cmt | na 16 16 |        |             |                 ; looking in the Dictionary. To prevent this, we save the old
 676:000 | DONE cmt | na 16 16 |        |             |                 ; version of DP and restore it later. The new DP is placed in
 677:000 | DONE cmt | na 16 16 |        |             |                 ; the variable WORKWORD until we're finished with a SEMICOLON.
 678:000 | DONE ins | na 16 16 | 00622f | a5 02       |                 lda.d 000202         
 679:000 | DONE ins | na 16 16 | 006231 | 48          |                 pha                  CREATE uses tmp1, tmp2 and tmp3
 680:000 | DONE wsp | na 16 16 |        |             |
 681:000 | DONE ins | na 16 16 | 006232 | 20 48 65    |                 jsr 006548           
 682:000 | DONE wsp | na 16 16 |        |             |
 683:000 | DONE cmt | na 16 16 |        |             |                 ; Get the nt of the new word as described above. Only COLON,
 684:000 | DONE cmt | na 16 16 |        |             |                 ; SEMICOLON and RECURSE access WORKWORD
 685:000 | DONE ins | na 16 16 | 006235 | a5 02       |                 lda.d 000202         
 686:000 | DONE ins | na 16 16 | 006237 | 85 1e       |                 sta.d 00021e         
 687:000 | DONE ins | na 16 16 | 006239 | 68          |                 pla                  
 688:000 | DONE ins | na 16 16 | 00623a | 85 02       |                 sta.d 000202         
 689:000 | DONE wsp | na 16 16 |        |             |
 690:000 | DONE cmt | na 16 16 |        |             |                 ; CREATE includes a subroutine jump to DOVAR by default. We back
 691:000 | DONE cmt | na 16 16 |        |             |                 ; up three bytes and overwrite that. Note that 3 x DEC.D would
 692:000 | DONE cmt | na 16 16 |        |             |                 ; use 3 bytes and 18 cycles; this version uses 8 bytes but
 693:000 | DONE cmt | na 16 16 |        |             |                 ; only 13 cycles
 694:000 | DONE ins | na 16 16 | 00623c | a5 00       |                 lda.d 000200         
 695:000 | DONE ins | na 16 16 | 00623e | 38          |                 sec                  
 696:000 | DONE ins | na 16 16 | 00623f | e9 03 00    |                 sbc.# 0003           
 697:000 | DONE ins | na 16 16 | 006242 | 85 00       |                 sta.d 000200         
 698:000 | DONE wsp | na 16 16 |        |             |
 699:000 | DONE lbl | na 16 16 | 006244 |             | z_colon                              
 699:001 | DONE ins | na 16 16 | 006244 | 60          |                 rts                  
 700:000 | DONE wsp | na 16 16 |        |             |
 701:000 | DONE wsp | na 16 16 |        |             |
 702:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 703:000 | DONE cmt | na 16 16 |        |             | ; ; "SEMICOLON" ( -- ) X bytes / X cycles
 704:000 | DONE cmt | na 16 16 |        |             | ; End the compilation of a new word into the Dictionary. When we enter this,
 705:000 | DONE cmt | na 16 16 |        |             | ; WORKWORD is pointing to the nt_ of this word in the Dictionary, DP to the
 706:000 | DONE cmt | na 16 16 |        |             | ; previous word, and CP to the next free byte.  A Forth definition would be
 707:000 | DONE cmt | na 16 16 |        |             | ; (see "Starting Forth"):
 708:000 | DONE cmt | na 16 16 |        |             | ;  : ;  POSTPONE EXIT  REVEAL POSTPONE ; [ ; IMMEDIATE
 709:000 | DONE lbl | na 16 16 | 006245 |             | xt_semicolon                         
 710:000 | DONE dir | na 16 16 |        |             |         .!a16                        
 711:000 | DONE ins | na 16 16 | 006245 | 84 06       |                 sty.d 000206         
 712:000 | DONE wsp | na 16 16 |        |             |
 713:000 | DONE cmt | na 16 16 |        |             |                 ; CP is the byte that will be the address we use in the header for
 714:000 | DONE cmt | na 16 16 |        |             |                 ; the end-of-compile address (z_word). This is six bytes down in
 715:000 | DONE cmt | na 16 16 |        |             |                 ; the header
 716:000 | DONE ins | na 16 16 | 006247 | a0 06 00    |                 ldy.# 0006           
 717:000 | DONE ins | na 16 16 | 00624a | a5 00       |                 lda.d 000200         
 718:000 | DONE ins | na 16 16 | 00624c | 91 1e       |                 sta.diy 00021e       STA (WORKWORD),Y
 719:000 | DONE wsp | na 16 16 |        |             |
 720:000 | DONE cmt | na 16 16 |        |             |                 ; Add the RTS instruction to the end of the current word. We
 721:000 | DONE cmt | na 16 16 |        |             |                 ; don't have to switch the size of the A register because we
 722:000 | DONE cmt | na 16 16 |        |             |                 ; only move up the CP by one and the MSB will be overwritten.
 723:000 | DONE cmt | na 16 16 |        |             |                 ; Little endian MPUs for the win!
 724:000 | DONE ins | na 16 16 | 00624e | a9 60 00    |                 lda.# 60             opcode for RTS
 725:000 | DONE ins | na 16 16 | 006251 | 92 00       |                 sta.di 000200        STA (CP)
 726:000 | DONE ins | na 16 16 | 006253 | e6 00       |                 inc.d 000200         MSB will be overwritten
 727:000 | DONE wsp | na 16 16 |        |             |
 728:000 | DONE cmt | na 16 16 |        |             |                 ; Word definition is complete. Make the new word the last one in
 729:000 | DONE cmt | na 16 16 |        |             |                 ; the Dictionary
 730:000 | DONE ins | na 16 16 | 006255 | a5 1e       |                 lda.d 00021e         
 731:000 | DONE ins | na 16 16 | 006257 | 85 02       |                 sta.d 000202         
 732:000 | DONE wsp | na 16 16 |        |             |
 733:000 | DONE cmt | na 16 16 |        |             |                 ; Get our TOS back
 734:000 | DONE ins | na 16 16 | 006259 | a4 06       |                 ldy.d 000206         
 735:000 | DONE wsp | na 16 16 |        |             |
 736:000 | DONE cmt | na 16 16 |        |             |                 ; Set compile flag back to zero so we're back in interpret mode
 737:000 | DONE ins | na 16 16 | 00625b | 64 14       |                 stz.d 000214         
 738:000 | DONE wsp | na 16 16 |        |             |
 739:000 | DONE lbl | na 16 16 | 00625d |             | z_semicolon                          
 739:001 | DONE ins | na 16 16 | 00625d | 60          |                 rts                  
 740:000 | DONE wsp | na 16 16 |        |             |
 741:000 | DONE wsp | na 16 16 |        |             |
 742:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 743:000 | DONE cmt | na 16 16 |        |             | ; # "HASH" / "NUMBER-SIGN" ( ud -- ud )  X bytes / X cycles
 744:000 | DONE cmt | na 16 16 |        |             | ; Add one character to the beginning of the pictured output string.
 745:000 | DONE cmt | na 16 16 |        |             | ; Code based on https://github.com/philburk/pforth/blob/master/fth/numberio.fth
 746:000 | DONE cmt | na 16 16 |        |             | ; Forth code is  BASE @ UD/MOD ROT 9 OVER < IF 7 + THEN [CHAR] 0 + HOLD ;
 747:000 | DONE cmt | na 16 16 |        |             | ; TODO convert more parts to assembler
 748:000 | DONE lbl | na 16 16 | 00625e |             | xt_hash                              
 749:000 | DONE dir | na 16 16 |        |             |         .!a16                        
 750:000 | DONE ins | na 16 16 | 00625e | 20 78 64    |                 jsr 006478           ( ud addr )
 751:000 | DONE ins | na 16 16 | 006261 | 20 a4 62    |                 jsr 0062a4           ( ud u )
 752:000 | DONE ins | na 16 16 | 006264 | 20 94 6a    |                 jsr 006a94           ( rem ud )
 753:000 | DONE ins | na 16 16 | 006267 | 20 8a 69    |                 jsr 00698a           ( ud rem )
 754:000 | DONE wsp | na 16 16 |        |             |
 755:000 | DONE cmt | na 16 16 |        |             |                 ; Convert the number that is left over to an ASCII character. We
 756:000 | DONE cmt | na 16 16 |        |             |                 ; use a string lookup for speed
 757:000 | DONE ins | na 16 16 | 00626a | e2 20       |                 sep 20               
 757:001 | DONE ctl | na  8 16 |        |             |         .!a8
 758:000 | DONE ins | na  8 16 | 00626c | b9 a4 79    |                 lda.y 0079a4         
 759:000 | DONE ins | na  8 16 | 00626f | c2 20       |                 rep 20               
 759:001 | DONE ctl | na 16 16 |        |             |         .!a16
 760:000 | DONE cmt | na 16 16 |        |             |                 ; overwrite remainder with ASCII value
 761:000 | DONE ins | na 16 16 | 006271 | 29 ff 00    |                 and.# 00ff           
 762:000 | DONE ins | na 16 16 | 006274 | a8          |                 tay                  ( ud char )
 763:000 | DONE wsp | na 16 16 |        |             |
 764:000 | DONE ins | na 16 16 | 006275 | 20 42 67    |                 jsr 006742           JSR/RTS
 765:000 | DONE wsp | na 16 16 |        |             |
 766:000 | DONE lbl | na 16 16 | 006278 |             | z_hash                               
 766:001 | DONE ins | na 16 16 | 006278 | 60          |                 rts                  
 767:000 | DONE wsp | na 16 16 |        |             |
 768:000 | DONE wsp | na 16 16 |        |             |
 769:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 770:000 | DONE cmt | na 16 16 |        |             | ; #> "NUMBERMORE" / "NUMBER-GREATER" ( d -- addr u ) X bytes / X cycles
 771:000 | DONE cmt | na 16 16 |        |             | ; Finish conversion of pictured number string, putting address and length on the
 772:000 | DONE cmt | na 16 16 |        |             | ; Data Stack. Original Fort is  2DROP HLD @ PAD OVER -  Based on
 773:000 | DONE cmt | na 16 16 |        |             | ; https://github.com/philburk/pforth/blob/master/fth/numberio.fth
 774:000 | DONE lbl | na 16 16 | 006279 |             | xt_numbermore                        
 775:000 | DONE dir | na 16 16 |        |             |         .!a16                        
 776:000 | DONE cmt | na 16 16 |        |             |                 ; We simply overwrite the double cell number, saving us a lot of
 777:000 | DONE cmt | na 16 16 |        |             |                 ; stack thrashing. First, put the address of the string's head in
 778:000 | DONE cmt | na 16 16 |        |             |                 ; TOS and NOS
 779:000 | DONE ins | na 16 16 | 006279 | a4 28       |                 ldy.d 000228         
 780:000 | DONE ins | na 16 16 | 00627b | 94 00       |                 sty.dx 00            ( addr addr )
 781:000 | DONE wsp | na 16 16 |        |             |
 782:000 | DONE cmt | na 16 16 |        |             |                 ; add the address of the string's end, which is PAD
 783:000 | DONE ins | na 16 16 | 00627d | 20 83 68    |                 jsr 006883           ( addr addr pad )
 784:000 | DONE wsp | na 16 16 |        |             |
 785:000 | DONE ins | na 16 16 | 006280 | 38          |                 sec                  
 786:000 | DONE ins | na 16 16 | 006281 | 98          |                 tya                  
 787:000 | DONE ins | na 16 16 | 006282 | f5 00       |                 sbc.dx 00            pad - addr is the length of the string
 788:000 | DONE ins | na 16 16 | 006284 | a8          |                 tay                  ( addr addr n )
 789:000 | DONE wsp | na 16 16 |        |             |
 790:000 | DONE ins | na 16 16 | 006285 | e8          |                 inx                  NIP
 791:000 | DONE ins | na 16 16 | 006286 | e8          |                 inx                  
 792:000 | DONE wsp | na 16 16 |        |             |
 793:000 | DONE lbl | na 16 16 | 006287 |             | z_numbermore                         
 793:001 | DONE ins | na 16 16 | 006287 | 60          |                 rts                  
 794:000 | DONE wsp | na 16 16 |        |             |
 795:000 | DONE wsp | na 16 16 |        |             |
 796:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 797:000 | DONE cmt | na 16 16 |        |             | ; #S "HASHS" / "NUMBER SIGN" ( ud -- ud ) X bytes / X cycles
 798:000 | DONE cmt | na 16 16 |        |             | ; Completely convert number for pictured numerical output. Based on
 799:000 | DONE cmt | na 16 16 |        |             | ; https://github.com/philburk/pforth/blob/master/fth/system.fth
 800:000 | DONE cmt | na 16 16 |        |             | ; Original Forth code  BEGIN # 2DUP OR 0= UNTIL
 801:000 | DONE lbl | na 16 16 | 006288 |             | xt_hashs                             
 802:000 | DONE dir | na 16 16 |        |             |         .!a16                        
 803:000 | DONE lbl | na 16 16 | 006288 |             | hashs_loop                           
 804:000 | DONE cmt | na 16 16 |        |             |                 ; covert a single number ("#")
 805:000 | DONE ins | na 16 16 | 006288 | 20 5e 62    |                 jsr 00625e           ( ud -- ud )
 806:000 | DONE wsp | na 16 16 |        |             |
 807:000 | DONE cmt | na 16 16 |        |             |                 ; stop when the double-celled number on the TOS is zero
 808:000 | DONE ins | na 16 16 | 00628b | 98          |                 tya                  
 809:000 | DONE ins | na 16 16 | 00628c | 15 00       |                 ora.dx 00            
 810:000 | DONE ins | na 16 16 | 00628e | d0 f8       |                 bne 006288           
 811:000 | DONE wsp | na 16 16 |        |             |
 812:000 | DONE lbl | na 16 16 | 006290 |             | z_hashs                              
 812:001 | DONE ins | na 16 16 | 006290 | 60          |                 rts                  
 813:000 | DONE wsp | na 16 16 |        |             |
 814:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 815:000 | DONE cmt | na 16 16 |        |             | ; ? "QUESTION" ( addr -- ) X bytes / X cycles
 816:000 | DONE cmt | na 16 16 |        |             | ; Print content of a variable. This is used interactively and humans are
 817:000 | DONE cmt | na 16 16 |        |             | ; slow, so we just go for the subroutine jumps to keep it short
 818:000 | DONE lbl | na 16 16 | 006291 |             | xt_question                          
 819:000 | DONE ins | na 16 16 | 006291 | 20 a4 62    |                 jsr 0062a4           
 820:000 | DONE ins | na 16 16 | 006294 | 20 8e 61    |                 jsr 00618e           
 821:000 | DONE wsp | na 16 16 |        |             |
 822:000 | DONE lbl | na 16 16 | 006297 |             | z_question                           
 822:001 | DONE ins | na 16 16 | 006297 | 60          |                 rts                  
 823:000 | DONE wsp | na 16 16 |        |             |
 824:000 | DONE wsp | na 16 16 |        |             |
 825:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 826:000 | DONE cmt | na 16 16 |        |             | ; ! "STORE" ( n addr -- ) 9 bytes / X cycles
 827:000 | DONE cmt | na 16 16 |        |             | ; Save value at designated memory location
 828:000 | DONE lbl | na 16 16 | 006298 |             | xt_store                             
 829:000 | DONE dir | na 16 16 |        |             |         .!a16                        
 830:000 | DONE ins | na 16 16 | 006298 | b5 00       |                 lda.dx 00            NOS has value
 831:000 | DONE ins | na 16 16 | 00629a | 99 00 00    |                 sta.y 0000           
 832:000 | DONE wsp | na 16 16 |        |             |
 833:000 | DONE ins | na 16 16 | 00629d | b4 02       |                 ldy.dx 02            
 834:000 | DONE ins | na 16 16 | 00629f | e8          |                 inx                  
 835:000 | DONE ins | na 16 16 | 0062a0 | e8          |                 inx                  
 836:000 | DONE ins | na 16 16 | 0062a1 | e8          |                 inx                  
 837:000 | DONE ins | na 16 16 | 0062a2 | e8          |                 inx                  
 838:000 | DONE wsp | na 16 16 |        |             |
 839:000 | DONE lbl | na 16 16 | 0062a3 |             | z_store                              
 839:001 | DONE ins | na 16 16 | 0062a3 | 60          |                 rts                  
 840:000 | DONE wsp | na 16 16 |        |             |
 841:000 | DONE wsp | na 16 16 |        |             |
 842:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 843:000 | DONE cmt | na 16 16 |        |             | ; @ "FETCH" ( addr -- n ) 4 bytes / 7-8 cycles
 844:000 | DONE cmt | na 16 16 |        |             | ; Get one cell (16 bit) value from given address
 845:000 | DONE lbl | na 16 16 | 0062a4 |             | xt_fetch                             
 846:000 | DONE ins | na 16 16 | 0062a4 | b9 00 00    |                 lda.y 0000           
 847:000 | DONE ins | na 16 16 | 0062a7 | a8          |                 tay                  
 848:000 | DONE wsp | na 16 16 |        |             |
 849:000 | DONE lbl | na 16 16 | 0062a8 |             | z_fetch                              
 849:001 | DONE ins | na 16 16 | 0062a8 | 60          |                 rts                  
 850:000 | DONE wsp | na 16 16 |        |             |
 851:000 | DONE wsp | na 16 16 |        |             |
 852:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 853:000 | DONE cmt | na 16 16 |        |             | ; ['] "BRACKET-TICK" ( -- ) X bytes / X cycles
 854:000 | DONE cmt | na 16 16 |        |             | ; Store xt of following word during compilation
 855:000 | DONE lbl | na 16 16 | 0062a9 |             | xt_brackettick                       
 856:000 | DONE ins | na 16 16 | 0062a9 | 20 6c 63    |                 jsr 00636c           
 857:000 | DONE ins | na 16 16 | 0062ac | 4c 68 67    |                 jmp 006768           JSR/RTS
 858:000 | DONE lbl | na 16 16 | 0062af |             | z_brackettick                        
 859:000 | DONE wsp | na 16 16 |        |             |
 860:000 | DONE wsp | na 16 16 |        |             |
 861:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 862:000 | DONE cmt | na 16 16 |        |             | ; [ "LEFTBRACKET" ( -- ) X bytes / X cycles
 863:000 | DONE cmt | na 16 16 |        |             | ; Enter the interpretation state. This is an immediate, compile-only word
 864:000 | DONE lbl | na 16 16 | 0062af |             | xt_leftbracket                       
 865:000 | DONE ins | na 16 16 | 0062af | 64 14       |                 stz.d 000214         
 866:000 | DONE lbl | na 16 16 | 0062b1 |             | z_leftbracket                        
 866:001 | DONE ins | na 16 16 | 0062b1 | 60          |                 rts                  
 867:000 | DONE wsp | na 16 16 |        |             |
 868:000 | DONE wsp | na 16 16 |        |             |
 869:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 870:000 | DONE cmt | na 16 16 |        |             | ; ] "RIGHTBRACKET" ( -- ) X bytes / X cycles
 871:000 | DONE cmt | na 16 16 |        |             | ; Enter the compile state. In theory, we should be able to get away with
 872:000 | DONE cmt | na 16 16 |        |             | ; a simple INC.A, but this is more error tolerant. For obvious reasons, this
 873:000 | DONE cmt | na 16 16 |        |             | ; cannot be COMPILE-ONLY, and native compile doesn't make much sense either
 874:000 | DONE lbl | na 16 16 | 0062b2 |             | xt_rightbracket                      
 875:000 | DONE ins | na 16 16 | 0062b2 | a9 01 00    |                 lda.# 0001           
 876:000 | DONE ins | na 16 16 | 0062b5 | 85 14       |                 sta.d 000214         
 877:000 | DONE wsp | na 16 16 |        |             |
 878:000 | DONE lbl | na 16 16 | 0062b7 |             | z_rightbracket                       
 878:001 | DONE ins | na 16 16 | 0062b7 | 60          |                 rts                  
 879:000 | DONE wsp | na 16 16 |        |             |
 880:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 881:000 | DONE cmt | na 16 16 |        |             | ; [CHAR] "BRACKET-CHAR" ( "c" -- ) X bytes / X cycles
 882:000 | DONE cmt | na 16 16 |        |             | ; At compile time, compile the ASCII value of a character as a literal
 883:000 | DONE cmt | na 16 16 |        |             | ; This is an immediate, compile-only word. A definition given in
 884:000 | DONE cmt | na 16 16 |        |             | ; http://forth-standard.org/standard/implement is
 885:000 | DONE cmt | na 16 16 |        |             | ; : [CHAR] CHAR POSTPONE LITERAL ; IMMEDIATE
 886:000 | DONE cmt | na 16 16 |        |             | ; TODO decide if this is worth unrolling
 887:000 | DONE lbl | na 16 16 | 0062b8 |             | xt_bracketchar                       
 888:000 | DONE ins | na 16 16 | 0062b8 | 20 e4 64    |                 jsr 0064e4           
 889:000 | DONE ins | na 16 16 | 0062bb | 20 68 67    |                 jsr 006768           
 890:000 | DONE wsp | na 16 16 |        |             |
 891:000 | DONE lbl | na 16 16 | 0062be |             | z_bracketchar                        
 891:001 | DONE ins | na 16 16 | 0062be | 60          |                 rts                  
 892:000 | DONE wsp | na 16 16 |        |             |
 893:000 | DONE wsp | na 16 16 |        |             |
 894:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 895:000 | DONE cmt | na 16 16 |        |             | ; \ "BACKSLASH" ( -- ) 4 bytes / X cycles
 896:000 | DONE cmt | na 16 16 |        |             | ; Ignore rest of line as comment
 897:000 | DONE lbl | na 16 16 | 0062bf |             | xt_backslash                         
 898:000 | DONE dir | na 16 16 |        |             |         .!a16                        
 899:000 | DONE cmt | na 16 16 |        |             |                 ; Advance >IN to end of the line
 900:000 | DONE ins | na 16 16 | 0062bf | a5 0e       |                 lda.d 00020e         
 901:000 | DONE ins | na 16 16 | 0062c1 | 85 12       |                 sta.d 000212         
 902:000 | DONE wsp | na 16 16 |        |             |
 903:000 | DONE lbl | na 16 16 | 0062c3 |             | z_backslash                          
 903:001 | DONE ins | na 16 16 | 0062c3 | 60          |                 rts                  
 904:000 | DONE wsp | na 16 16 |        |             |
 905:000 | DONE wsp | na 16 16 |        |             |
 906:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 907:000 | DONE cmt | na 16 16 |        |             | ; + "PLUS" ( n m -- n+m ) 7 bytes / X cycles
 908:000 | DONE cmt | na 16 16 |        |             | ; Add TOS and NOS
 909:000 | DONE lbl | na 16 16 | 0062c4 |             | xt_plus                              
 910:000 | DONE dir | na 16 16 |        |             |         .!a16                        
 911:000 | DONE ins | na 16 16 | 0062c4 | 98          |                 tya                  
 912:000 | DONE ins | na 16 16 | 0062c5 | 18          |                 clc                  
 913:000 | DONE ins | na 16 16 | 0062c6 | 75 00       |                 adc.dx 00            
 914:000 | DONE ins | na 16 16 | 0062c8 | a8          |                 tay                  
 915:000 | DONE ins | na 16 16 | 0062c9 | e8          |                 inx                  
 916:000 | DONE ins | na 16 16 | 0062ca | e8          |                 inx                  
 917:000 | DONE wsp | na 16 16 |        |             |
 918:000 | DONE lbl | na 16 16 | 0062cb |             | z_plus                               
 918:001 | DONE ins | na 16 16 | 0062cb | 60          |                 rts                  
 919:000 | DONE wsp | na 16 16 |        |             |
 920:000 | DONE wsp | na 16 16 |        |             |
 921:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 922:000 | DONE cmt | na 16 16 |        |             | ; - "MINUS" ( n m -- n-m ) 10 bytes / X cycles
 923:000 | DONE cmt | na 16 16 |        |             | ; Subtract NOS from TOS
 924:000 | DONE lbl | na 16 16 | 0062cc |             | xt_minus                             
 925:000 | DONE dir | na 16 16 |        |             |         .!a16                        
 926:000 | DONE ins | na 16 16 | 0062cc | 98          |                 tya                  
 927:000 | DONE ins | na 16 16 | 0062cd | 49 ff ff    |                 eor.# 0ffff          
 928:000 | DONE wsp | na 16 16 |        |             |
 929:000 | DONE ins | na 16 16 | 0062d0 | 38          |                 sec                  not CLC
 930:000 | DONE ins | na 16 16 | 0062d1 | 75 00       |                 adc.dx 00            
 931:000 | DONE wsp | na 16 16 |        |             |
 932:000 | DONE ins | na 16 16 | 0062d3 | a8          |                 tay                  
 933:000 | DONE ins | na 16 16 | 0062d4 | e8          |                 inx                  
 934:000 | DONE ins | na 16 16 | 0062d5 | e8          |                 inx                  
 935:000 | DONE wsp | na 16 16 |        |             |
 936:000 | DONE lbl | na 16 16 | 0062d6 |             | z_minus                              
 936:001 | DONE ins | na 16 16 | 0062d6 | 60          |                 rts                  
 937:000 | DONE wsp | na 16 16 |        |             |
 938:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 939:000 | DONE cmt | na 16 16 |        |             | ; -ROT ( a b c -- c a b )  X bytes / X cycles
 940:000 | DONE cmt | na 16 16 |        |             | ; Rotate top three entries of Data Stack upwards
 941:000 | DONE lbl | na 16 16 | 0062d7 |             | xt_mrot                              
 942:000 | DONE dir | na 16 16 |        |             |         .!a16                        
 943:000 | DONE dir | na 16 16 |        |             |         .!xy16                       
 944:000 | DONE ins | na 16 16 | 0062d7 | b5 02       |                 lda.dx 02            save a
 945:000 | DONE ins | na 16 16 | 0062d9 | 94 02       |                 sty.dx 02            move c to 3OS
 946:000 | DONE ins | na 16 16 | 0062db | b4 00       |                 ldy.dx 00            move b to TOS
 947:000 | DONE ins | na 16 16 | 0062dd | 95 00       |                 sta.dx 00            save a as NOS
 948:000 | DONE wsp | na 16 16 |        |             |
 949:000 | DONE lbl | na 16 16 | 0062df |             | z_mrot                               
 949:001 | DONE ins | na 16 16 | 0062df | 60          |                 rts                  
 950:000 | DONE wsp | na 16 16 |        |             |
 951:000 | DONE wsp | na 16 16 |        |             |
 952:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 953:000 | DONE cmt | na 16 16 |        |             | ; = "EQUAL" ( n m -- f ) 11 bytes / 18-20 cycles
 954:000 | DONE cmt | na 16 16 |        |             | ; See if TOS and NOS are the same
 955:000 | DONE lbl | na 16 16 | 0062e0 |             | xt_equal                             
 956:000 | DONE ins | na 16 16 | 0062e0 | 98          |                 tya                  
 957:000 | DONE ins | na 16 16 | 0062e1 | a0 00 00    |                 ldy.# 0000           default value is false
 958:000 | DONE wsp | na 16 16 |        |             |
 959:000 | DONE ins | na 16 16 | 0062e4 | d5 00       |                 cmp.dx 00            
 960:000 | DONE ins | na 16 16 | 0062e6 | d0 01       |                 bne 0062e9           
 961:000 | DONE ins | na 16 16 | 0062e8 | 88          |                 dey                  wraps to 0FFFF (true)
 962:000 | DONE wsp | na 16 16 |        |             |
 963:000 | DONE lbl | na 16 16 | 0062e9 |             | equal_not                            
 964:000 | DONE ins | na 16 16 | 0062e9 | e8          |                 inx                  
 965:000 | DONE ins | na 16 16 | 0062ea | e8          |                 inx                  
 966:000 | DONE wsp | na 16 16 |        |             |
 967:000 | DONE lbl | na 16 16 | 0062eb |             | z_equal                              
 967:001 | DONE ins | na 16 16 | 0062eb | 60          |                 rts                  
 968:000 | DONE wsp | na 16 16 |        |             |
 969:000 | DONE wsp | na 16 16 |        |             |
 970:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 971:000 | DONE cmt | na 16 16 |        |             | ; 0 "ZERO" ( -- 0 ) 7 bytes / 12 cycles
 972:000 | DONE cmt | na 16 16 |        |             | ; Pushes the number 0000 on the Data Stack
 973:000 | DONE lbl | na 16 16 | 0062ec |             | xt_zero                              
 974:000 | DONE dir | na 16 16 |        |             |         .!xy16                       
 975:000 | DONE ins | na 16 16 | 0062ec | ca          |                 dex                  
 976:000 | DONE ins | na 16 16 | 0062ed | ca          |                 dex                  
 977:000 | DONE ins | na 16 16 | 0062ee | 94 00       |                 sty.dx 00            
 978:000 | DONE ins | na 16 16 | 0062f0 | a0 00 00    |                 ldy.# 0000           
 979:000 | DONE wsp | na 16 16 |        |             |
 980:000 | DONE lbl | na 16 16 | 0062f3 |             | z_zero                               
 980:001 | DONE ins | na 16 16 | 0062f3 | 60          |                 rts                  
 981:000 | DONE wsp | na 16 16 |        |             |
 982:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 983:000 | DONE cmt | na 16 16 |        |             | ; 0= "ZERO-EQUAL" ( n -- f ) X bytes / X cycles
 984:000 | DONE cmt | na 16 16 |        |             | ; Return the true flag if TOS is zero
 985:000 | DONE lbl | na 16 16 | 0062f4 |             | xt_zero-equal                        
 986:000 | DONE dir | na 16 16 |        |             |         .!a16                        
 987:000 | DONE ins | na 16 16 | 0062f4 | 98          |                 tya                  force flag check
 988:000 | DONE ins | na 16 16 | 0062f5 | d0 05       |                 bne 0062fc           
 989:000 | DONE wsp | na 16 16 |        |             |
 990:000 | DONE ins | na 16 16 | 0062f7 | a0 ff 0f    |                 ldy.# 0fff           
 991:000 | DONE ins | na 16 16 | 0062fa | 80 03       |                 bra 0062ff           
 992:000 | DONE lbl | na 16 16 | 0062fc |             | ze_not_zero                          
 993:000 | DONE ins | na 16 16 | 0062fc | a0 00 00    |                 ldy.# 0000           
 994:000 | DONE wsp | na 16 16 |        |             |
 995:000 | DONE lbl | na 16 16 | 0062ff |             | z_zero-equal                         
 995:001 | DONE ins | na 16 16 | 0062ff | 60          |                 rts                  
 996:000 | DONE wsp | na 16 16 |        |             |
 997:000 | DONE wsp | na 16 16 |        |             |
 998:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 999:000 | DONE cmt | na 16 16 |        |             | ; 0< "ZERO-LESS" ( n -- f ) 11 bytes / X cycles
1000:000 | DONE cmt | na 16 16 |        |             | ; Return the true flag if TOS is less than zero
1001:000 | DONE lbl | na 16 16 | 006300 |             | xt_zero-less                         
1002:000 | DONE dir | na 16 16 |        |             |         .!a16                        
1003:000 | DONE ins | na 16 16 | 006300 | 98          |                 tya                  force flag check
1004:000 | DONE ins | na 16 16 | 006301 | 30 05       |                 bmi 006308           
1005:000 | DONE wsp | na 16 16 |        |             |
1006:000 | DONE ins | na 16 16 | 006303 | a0 00 00    |                 ldy.# 0000           
1007:000 | DONE ins | na 16 16 | 006306 | 80 03       |                 bra 00630b           
1008:000 | DONE wsp | na 16 16 |        |             |
1009:000 | DONE lbl | na 16 16 | 006308 |             | zero-less-is-less                    
1010:000 | DONE ins | na 16 16 | 006308 | a0 ff ff    |                 ldy.# 0ffff          
1011:000 | DONE wsp | na 16 16 |        |             |
1012:000 | DONE lbl | na 16 16 | 00630b |             | z_zero-less                          
1012:001 | DONE ins | na 16 16 | 00630b | 60          |                 rts                  
1013:000 | DONE wsp | na 16 16 |        |             |
1014:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1015:000 | DONE cmt | na 16 16 |        |             | ; 0<> "ZERO-NOTEQUAL" ( n -- f ) 11 bytes / X cycles
1016:000 | DONE cmt | na 16 16 |        |             | ; Return the true flag if TOS is not zero
1017:000 | DONE lbl | na 16 16 | 00630c |             | xt_zero-notequal                     
1018:000 | DONE dir | na 16 16 |        |             |         .!a16                        
1019:000 | DONE ins | na 16 16 | 00630c | 98          |                 tya                  force flag check
1020:000 | DONE ins | na 16 16 | 00630d | f0 05       |                 beq 006314           
1021:000 | DONE ins | na 16 16 | 00630f | a0 ff ff    |                 ldy.# 0ffff          
1022:000 | DONE ins | na 16 16 | 006312 | 80 03       |                 bra 006317           
1023:000 | DONE lbl | na 16 16 | 006314 |             | zne_is_zero                          
1024:000 | DONE ins | na 16 16 | 006314 | a0 00 00    |                 ldy.# 0000           
1025:000 | DONE lbl | na 16 16 | 006317 |             | z_zero-notequal                      
1026:000 | DONE ins | na 16 16 | 006317 | 60          |                 rts                  
1027:000 | DONE wsp | na 16 16 |        |             |
1028:000 | DONE wsp | na 16 16 |        |             |
1029:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1030:000 | DONE cmt | na 16 16 |        |             | ; 0> "ZERO-MORE" ( n -- f ) X bytes / X cycles
1031:000 | DONE cmt | na 16 16 |        |             | ; Return the true flag if TOS is more than zero
1032:000 | DONE lbl | na 16 16 | 006318 |             | xt_zero-more                         
1033:000 | DONE dir | na 16 16 |        |             |         .!a16                        
1034:000 | DONE ins | na 16 16 | 006318 | a9 00 00    |                 lda.# 0000           default is false
1035:000 | DONE wsp | na 16 16 |        |             |
1036:000 | DONE ins | na 16 16 | 00631b | 88          |                 dey                  
1037:000 | DONE ins | na 16 16 | 00631c | 10 02       |                 bpl 006320           was at least 1
1038:000 | DONE wsp | na 16 16 |        |             |
1039:000 | DONE ins | na 16 16 | 00631e | 80 01       |                 bra 006321           nope, stays false
1040:000 | DONE wsp | na 16 16 |        |             |
1041:000 | DONE lbl | na 16 16 | 006320 |             | zero-more_true                       
1042:000 | DONE ins | na 16 16 | 006320 | 3a          |                 dec.a                wraps to 0ffff, true
1043:000 | DONE lbl | na 16 16 | 006321 |             | zero-more_done                       
1044:000 | DONE ins | na 16 16 | 006321 | a8          |                 tay                  
1045:000 | DONE wsp | na 16 16 |        |             |
1046:000 | DONE lbl | na 16 16 | 006322 |             | z_zero-more                          
1046:001 | DONE ins | na 16 16 | 006322 | 60          |                 rts                  
1047:000 | DONE wsp | na 16 16 |        |             |
1048:000 | DONE wsp | na 16 16 |        |             |
1049:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1050:000 | DONE cmt | na 16 16 |        |             | ; 0BRANCH ( 0 | f -- ) X bytes / X cycles
1051:000 | DONE cmt | na 16 16 |        |             | ; Branch if TOS is zero. This exects the next two bytes to be the address of
1052:000 | DONE cmt | na 16 16 |        |             | ; where to branch to if the test fails. The code may not be natively compiled
1053:000 | DONE cmt | na 16 16 |        |             | ; because we need the return address provided by JSR's push to the Return Stack
1054:000 | DONE cmt | na 16 16 |        |             | ; This routine uses tmp1
1055:000 | DONE lbl | na 16 16 | 006323 |             | xt_zbranch                           
1056:000 | DONE dir | na 16 16 |        |             |         .!a16                        
1057:000 | DONE cmt | na 16 16 |        |             |                 ; encode subroutine jump to run time code
1058:000 | DONE ins | na 16 16 | 006323 | f4 2a 63    |                 phe.# 00632a         
1059:000 | DONE ins | na 16 16 | 006326 | 20 c4 72    |                 jsr 0072c4           
1060:000 | DONE wsp | na 16 16 |        |             |
1061:000 | DONE lbl | na 16 16 | 006329 |             | z_zbranch                            
1061:001 | DONE ins | na 16 16 | 006329 | 60          |                 rts                  
1062:000 | DONE wsp | na 16 16 |        |             |
1063:000 | DONE lbl | na 16 16 | 00632a |             | zbranch_rt                           
1064:000 | DONE cmt | na 16 16 |        |             |                 ; Compiled component. Use the address on the Return Stack to
1065:000 | DONE cmt | na 16 16 |        |             |                 ; decide where we want to return to
1066:000 | DONE ins | na 16 16 | 00632a | 68          |                 pla                  
1067:000 | DONE ins | na 16 16 | 00632b | 85 16       |                 sta.d 000216         
1068:000 | DONE wsp | na 16 16 |        |             |
1069:000 | DONE cmt | na 16 16 |        |             |                 ; See if the flag is zero, which is the whole purpose of this
1070:000 | DONE cmt | na 16 16 |        |             |                 ; operation after all
1071:000 | DONE ins | na 16 16 | 00632d | 98          |                 tya                  force flag check
1072:000 | DONE ins | na 16 16 | 00632e | f0 06       |                 beq 006336           flag is false (zero), so we branch
1073:000 | DONE wsp | na 16 16 |        |             |
1074:000 | DONE cmt | na 16 16 |        |             |                 ; Flag is TRUE, so we skip over the next two bytes. Put
1075:000 | DONE cmt | na 16 16 |        |             |                 ; differently, this is the part between IF and THEN
1076:000 | DONE ins | na 16 16 | 006330 | a5 16       |                 lda.d 000216         
1077:000 | DONE ins | na 16 16 | 006332 | 1a          |                 inc.a                
1078:000 | DONE ins | na 16 16 | 006333 | 1a          |                 inc.a                
1079:000 | DONE wsp | na 16 16 |        |             |
1080:000 | DONE ins | na 16 16 | 006334 | 80 06       |                 bra 00633c           
1081:000 | DONE wsp | na 16 16 |        |             |
1082:000 | DONE lbl | na 16 16 | 006336 |             | zb_zero                              
1083:000 | DONE cmt | na 16 16 |        |             |                 ; Flag is FALSE, so we take the dump to the address given in the
1084:000 | DONE cmt | na 16 16 |        |             |                 ; next two bytes. We don't need Y anymore, so we can use it for
1085:000 | DONE cmt | na 16 16 |        |             |                 ; indexing
1086:000 | DONE ins | na 16 16 | 006336 | a0 01 00    |                 ldy.# 0001           
1087:000 | DONE ins | na 16 16 | 006339 | b1 16       |                 lda.diy 000216       
1088:000 | DONE wsp | na 16 16 |        |             |
1089:000 | DONE cmt | na 16 16 |        |             |                 ; Subtract one from the address given becasue of the RTS
1090:000 | DONE cmt | na 16 16 |        |             |                 ; mechanics
1091:000 | DONE ins | na 16 16 | 00633b | 3a          |                 dec.a                
1092:000 | DONE wsp | na 16 16 |        |             |
1093:000 | DONE lbl | na 16 16 | 00633c |             | zb_done                              
1094:000 | DONE cmt | na 16 16 |        |             |                 ; One we or another, this is where we're going to jump to
1095:000 | DONE ins | na 16 16 | 00633c | 48          |                 pha                  
1096:000 | DONE wsp | na 16 16 |        |             |
1097:000 | DONE cmt | na 16 16 |        |             |                 ; Clean up the Data Stack and jump
1098:000 | DONE ins | na 16 16 | 00633d | b4 00       |                 ldy.dx 00            
1099:000 | DONE ins | na 16 16 | 00633f | e8          |                 inx                  
1100:000 | DONE ins | na 16 16 | 006340 | e8          |                 inx                  
1101:000 | DONE wsp | na 16 16 |        |             |
1102:000 | DONE ins | na 16 16 | 006341 | 60          |                 rts                  
1103:000 | DONE wsp | na 16 16 |        |             |
1104:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1105:000 | DONE cmt | na 16 16 |        |             | ; 1 "ONE" ( -- 1 ) 7 bytes / 12 cycles
1106:000 | DONE cmt | na 16 16 |        |             | ; Pushes the number 1 on the Data Stack
1107:000 | DONE lbl | na 16 16 | 006342 |             | xt_one                               
1108:000 | DONE dir | na 16 16 |        |             |         .!xy16                       
1109:000 | DONE ins | na 16 16 | 006342 | ca          |                 dex                  
1110:000 | DONE ins | na 16 16 | 006343 | ca          |                 dex                  
1111:000 | DONE ins | na 16 16 | 006344 | 94 00       |                 sty.dx 00            
1112:000 | DONE ins | na 16 16 | 006346 | a0 01 00    |                 ldy.# 0001           
1113:000 | DONE wsp | na 16 16 |        |             |
1114:000 | DONE lbl | na 16 16 | 006349 |             | z_one                                
1114:001 | DONE ins | na 16 16 | 006349 | 60          |                 rts                  
1115:000 | DONE wsp | na 16 16 |        |             |
1116:000 | DONE wsp | na 16 16 |        |             |
1117:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1118:000 | DONE cmt | na 16 16 |        |             | ; 1- "ONE-MINUS" ( n -- n-1 ) 1 byte / 2 cycles
1119:000 | DONE cmt | na 16 16 |        |             | ; Subtract 1 from Top of Stack (TOS). Because there is no checking if there is
1120:000 | DONE cmt | na 16 16 |        |             | ; actually anything on the Data Stack, this routine will fail silently if the
1121:000 | DONE cmt | na 16 16 |        |             | ; stack is empty
1122:000 | DONE lbl | na 16 16 | 00634a |             | xt_one-minus                         
1123:000 | DONE dir | na 16 16 |        |             |         .!xy16                       
1124:000 | DONE ins | na 16 16 | 00634a | 88          |                 dey                  
1125:000 | DONE lbl | na 16 16 | 00634b |             | z_one-minus                          
1125:001 | DONE ins | na 16 16 | 00634b | 60          |                 rts                  
1126:000 | DONE wsp | na 16 16 |        |             |
1127:000 | DONE wsp | na 16 16 |        |             |
1128:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1129:000 | DONE cmt | na 16 16 |        |             | ; 1+ "ONE-PLUS" ( n -- n+1 ) 1 byte / 2 cycles
1130:000 | DONE cmt | na 16 16 |        |             | ; Add 1 to TOS. Because there is no checking if there is actually anything on
1131:000 | DONE cmt | na 16 16 |        |             | ; the Data Stack, this routine will fail silently if the stack is empty
1132:000 | DONE lbl | na 16 16 | 00634c |             | xt_one-plus                          
1133:000 | DONE dir | na 16 16 |        |             |         .!xy16                       
1134:000 | DONE ins | na 16 16 | 00634c | c8          |                 iny                  
1135:000 | DONE lbl | na 16 16 | 00634d |             | z_one-plus                           
1135:001 | DONE ins | na 16 16 | 00634d | 60          |                 rts                  
1136:000 | DONE wsp | na 16 16 |        |             |
1137:000 | DONE wsp | na 16 16 |        |             |
1138:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1139:000 | DONE cmt | na 16 16 |        |             | ; 2 "TWO" ( -- 2 ) 7 bytes / 12 cycles
1140:000 | DONE cmt | na 16 16 |        |             | ; Pushes the number 2 on the Data Stack
1141:000 | DONE lbl | na 16 16 | 00634e |             | xt_two                               
1142:000 | DONE dir | na 16 16 |        |             |         .!xy16                       
1143:000 | DONE ins | na 16 16 | 00634e | ca          |                 dex                  
1144:000 | DONE ins | na 16 16 | 00634f | ca          |                 dex                  
1145:000 | DONE ins | na 16 16 | 006350 | 94 00       |                 sty.dx 00            
1146:000 | DONE ins | na 16 16 | 006352 | a0 02 00    |                 ldy.# 0002           
1147:000 | DONE wsp | na 16 16 |        |             |
1148:000 | DONE lbl | na 16 16 | 006355 |             | z_two                                
1148:001 | DONE ins | na 16 16 | 006355 | 60          |                 rts                  
1149:000 | DONE wsp | na 16 16 |        |             |
1150:000 | DONE wsp | na 16 16 |        |             |
1151:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1152:000 | DONE cmt | na 16 16 |        |             | ; 2* "TWO-STAR" ( n -- 2*n ) 3 bytes / 6 cycles
1153:000 | DONE cmt | na 16 16 |        |             | ; Multiply Top of Stack (TOS) by 2. This is also used by CELLS
1154:000 | DONE lbl | na 16 16 | 006356 |             | xt_two-star                          
1155:000 | DONE dir | na 16 16 |        |             |         .!a16                        
1156:000 | DONE dir | na 16 16 |        |             |         .!xy16                       
1157:000 | DONE ins | na 16 16 | 006356 | 98          |                 tya                  
1158:000 | DONE ins | na 16 16 | 006357 | 0a          |                 asl.a                
1159:000 | DONE ins | na 16 16 | 006358 | a8          |                 tay                  
1160:000 | DONE wsp | na 16 16 |        |             |
1161:000 | DONE lbl | na 16 16 | 006359 |             | z_two-star                           
1161:001 | DONE ins | na 16 16 | 006359 | 60          |                 rts                  
1162:000 | DONE wsp | na 16 16 |        |             |
1163:000 | DONE wsp | na 16 16 |        |             |
1164:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1165:000 | DONE cmt | na 16 16 |        |             | ; 2DROP ( n m -- ) 6 bytes / 13 cycles
1166:000 | DONE cmt | na 16 16 |        |             | ; Drop first two entries of Data Stack
1167:000 | DONE lbl | na 16 16 | 00635a |             | xt_2drop                             
1168:000 | DONE ins | na 16 16 | 00635a | b4 02       |                 ldy.dx 02            
1169:000 | DONE ins | na 16 16 | 00635c | e8          |                 inx                  
1170:000 | DONE ins | na 16 16 | 00635d | e8          |                 inx                  
1171:000 | DONE ins | na 16 16 | 00635e | e8          |                 inx                  
1172:000 | DONE ins | na 16 16 | 00635f | e8          |                 inx                  
1173:000 | DONE wsp | na 16 16 |        |             |
1174:000 | DONE lbl | na 16 16 | 006360 |             | z_2drop                              
1174:001 | DONE ins | na 16 16 | 006360 | 60          |                 rts                  
1175:000 | DONE wsp | na 16 16 |        |             |
1176:000 | DONE wsp | na 16 16 |        |             |
1177:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1178:000 | DONE cmt | na 16 16 |        |             | ; 2DUP ( n m -- n m n m ) 10 bytes / 23 cycles
1179:000 | DONE cmt | na 16 16 |        |             | ; Duplicated the top two data stack entries
1180:000 | DONE wsp | na 16 16 |        |             |
1181:000 | DONE lbl | na 16 16 | 006361 |             | xt_2dup                              
1182:000 | DONE dir | na 16 16 |        |             |         .!xy16                       
1183:000 | DONE ins | na 16 16 | 006361 | ca          |                 dex                  
1184:000 | DONE ins | na 16 16 | 006362 | ca          |                 dex                  
1185:000 | DONE ins | na 16 16 | 006363 | ca          |                 dex                  
1186:000 | DONE ins | na 16 16 | 006364 | ca          |                 dex                  
1187:000 | DONE ins | na 16 16 | 006365 | 94 02       |                 sty.dx 02            
1188:000 | DONE ins | na 16 16 | 006367 | b5 04       |                 lda.dx 04            
1189:000 | DONE ins | na 16 16 | 006369 | 95 00       |                 sta.dx 00            
1190:000 | DONE wsp | na 16 16 |        |             |
1191:000 | DONE lbl | na 16 16 | 00636b |             | z_2dup                               
1191:001 | DONE ins | na 16 16 | 00636b | 60          |                 rts                  
1192:000 | DONE wsp | na 16 16 |        |             |
1193:000 | DONE wsp | na 16 16 |        |             |
1194:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1195:000 | DONE cmt | na 16 16 |        |             | ; ' "TICK" ( "string" -- xt ) X bytes / X cycles
1196:000 | DONE cmt | na 16 16 |        |             | ; Given a string with the name of a word, return the word's execution token (xt)
1197:000 | DONE cmt | na 16 16 |        |             | ; Abort if not found
1198:000 | DONE lbl | na 16 16 | 00636c |             | xt_tick                              
1199:000 | DONE ins | na 16 16 | 00636c | 20 9c 68    |                 jsr 00689c           ( -- addr u )
1200:000 | DONE wsp | na 16 16 |        |             |
1201:000 | DONE cmt | na 16 16 |        |             |                 ; if we got a zero, complain and abort
1202:000 | DONE ins | na 16 16 | 00636f | 98          |                 tya                  force flag check
1203:000 | DONE ins | na 16 16 | 006370 | d0 06       |                 bne 006378           
1204:000 | DONE wsp | na 16 16 |        |             |
1205:000 | DONE ins | na 16 16 | 006372 | a9 cd 78    |                 lda.# 0078cd         
1206:000 | DONE ins | na 16 16 | 006375 | 4c e5 72    |                 jmp 0072e5           
1207:000 | DONE wsp | na 16 16 |        |             |
1208:000 | DONE lbl | na 16 16 | 006378 |             | tick_have_word                       
1209:000 | DONE ins | na 16 16 | 006378 | 20 cf 66    |                 jsr 0066cf           ( addr u -- nt)
1210:000 | DONE ins | na 16 16 | 00637b | 98          |                 tya                  force flag check
1211:000 | DONE wsp | na 16 16 |        |             |
1212:000 | DONE cmt | na 16 16 |        |             |                 ; if we didn't find string in the dictionary, complain and abort
1213:000 | DONE ins | na 16 16 | 00637c | d0 06       |                 bne 006384           
1214:000 | DONE wsp | na 16 16 |        |             |
1215:000 | DONE ins | na 16 16 | 00637e | a9 6a 79    |                 lda.# 00796a         
1216:000 | DONE ins | na 16 16 | 006381 | 4c e5 72    |                 jmp 0072e5           
1217:000 | DONE wsp | na 16 16 |        |             |
1218:000 | DONE lbl | na 16 16 | 006384 |             | tick_have_nt                         
1219:000 | DONE ins | na 16 16 | 006384 | 20 cd 67    |                 jsr 0067cd           ( nt -- xt )
1220:000 | DONE wsp | na 16 16 |        |             |
1221:000 | DONE lbl | na 16 16 | 006387 |             | z_tick                               
1221:001 | DONE ins | na 16 16 | 006387 | 60          |                 rts                  
1222:000 | DONE wsp | na 16 16 |        |             |
1223:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1224:000 | DONE cmt | na 16 16 |        |             | ; ABORT" "ABORTQ" ( "string" -- ) X bytes / X cycles
1225:000 | DONE cmt | na 16 16 |        |             | ; If flag on TOS is not false, print error message and abort. This a compile-only word
1226:000 | DONE lbl | na 16 16 | 006388 |             | xt_abortq                            
1227:000 | DONE ins | na 16 16 | 006388 | 20 93 69    |                 jsr 006993           save string
1228:000 | DONE wsp | na 16 16 |        |             |
1229:000 | DONE ins | na 16 16 | 00638b | f4 92 63    |                 phe.# 006392         compile run-time aspect
1230:000 | DONE ins | na 16 16 | 00638e | 20 c4 72    |                 jsr 0072c4           
1231:000 | DONE wsp | na 16 16 |        |             |
1232:000 | DONE ins | na 16 16 | 006391 | 60          |                 rts                  
1233:000 | DONE wsp | na 16 16 |        |             |
1234:000 | DONE lbl | na 16 16 | 006392 |             | abortq_rt                            
1235:000 | DONE cmt | na 16 16 |        |             |                 ; we land here with ( f addr u )
1236:000 | DONE ins | na 16 16 | 006392 | b5 02       |                 lda.dx 02            get 3OS
1237:000 | DONE ins | na 16 16 | 006394 | f0 06       |                 beq 00639c           if FALSE, we're done
1238:000 | DONE wsp | na 16 16 |        |             |
1239:000 | DONE cmt | na 16 16 |        |             |                 ; nope, we print string and ABORT
1240:000 | DONE ins | na 16 16 | 006396 | 20 73 6a    |                 jsr 006a73           
1241:000 | DONE ins | na 16 16 | 006399 | 4c 97 60    |                 jmp 006097           not JSR because we never come back
1242:000 | DONE wsp | na 16 16 |        |             |
1243:000 | DONE lbl | na 16 16 | 00639c |             | abortq_done                          
1244:000 | DONE cmt | na 16 16 |        |             |                 ; drop the three entries from the Data Stack
1245:000 | DONE ins | na 16 16 | 00639c | b4 04       |                 ldy.dx 04            fourth on the stack
1246:000 | DONE wsp | na 16 16 |        |             |
1247:000 | DONE cmt | na 16 16 |        |             |                 ; this is the same size, but three cycles faster than six INX
1248:000 | DONE cmt | na 16 16 |        |             |                 ; instructions
1249:000 | DONE ins | na 16 16 | 00639e | 8a          |                 txa                  
1250:000 | DONE ins | na 16 16 | 00639f | 38          |                 sec                  
1251:000 | DONE ins | na 16 16 | 0063a0 | e9 06 00    |                 sbc.# 0006           
1252:000 | DONE ins | na 16 16 | 0063a3 | aa          |                 tax                  
1253:000 | DONE wsp | na 16 16 |        |             |
1254:000 | DONE lbl | na 16 16 | 0063a4 |             | z_abortq                             
1254:001 | DONE ins | na 16 16 | 0063a4 | 60          |                 rts                  
1255:000 | DONE wsp | na 16 16 |        |             |
1256:000 | DONE wsp | na 16 16 |        |             |
1257:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1258:000 | DONE cmt | na 16 16 |        |             | ; ABS ( n -- u ) 8 bytes / X cycles
1259:000 | DONE cmt | na 16 16 |        |             | ; Return the absolute value of a single number
1260:000 | DONE lbl | na 16 16 | 0063a5 |             | xt_abs                               
1261:000 | DONE dir | na 16 16 |        |             |         .!a16                        
1262:000 | DONE dir | na 16 16 |        |             |         .!xy16                       
1263:000 | DONE ins | na 16 16 | 0063a5 | 98          |                 tya                  force flag test
1264:000 | DONE ins | na 16 16 | 0063a6 | 10 05       |                 bpl 0063ad           positive number is easy
1265:000 | DONE wsp | na 16 16 |        |             |
1266:000 | DONE cmt | na 16 16 |        |             |                 ; negative: Calculate 0-n
1267:000 | DONE ins | na 16 16 | 0063a8 | 49 ff ff    |                 eor.# 0ffff          
1268:000 | DONE ins | na 16 16 | 0063ab | 1a          |                 inc.a                
1269:000 | DONE ins | na 16 16 | 0063ac | a8          |                 tay                  
1270:000 | DONE wsp | na 16 16 |        |             |
1271:000 | DONE lbl | na 16 16 | 0063ad |             | z_abs                                
1271:001 | DONE ins | na 16 16 | 0063ad | 60          |                 rts                  
1272:000 | DONE wsp | na 16 16 |        |             |
1273:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1274:000 | DONE cmt | na 16 16 |        |             | ; ACCEPT ( addr n1 -- n2 ) X bytes / X cycles
1275:000 | DONE cmt | na 16 16 |        |             | ; Receive a string of at most n1 characters, placing them at addr. Return the
1276:000 | DONE cmt | na 16 16 |        |             | ; actual number of characters as n2. Characters are echoed as they are received.
1277:000 | DONE cmt | na 16 16 |        |             | ; ACCEPT is called by REFILL these days.
1278:000 | DONE lbl | na 16 16 | 0063ae |             | xt_accept                            
1279:000 | DONE cmt | na 16 16 |        |             |                 ; Set up loop
1280:000 | DONE ins | na 16 16 | 0063ae | 98          |                 tya                  force flag test
1281:000 | DONE ins | na 16 16 | 0063af | d0 03       |                 bne 0063b4           
1282:000 | DONE wsp | na 16 16 |        |             |
1283:000 | DONE cmt | na 16 16 |        |             |                 ; if we were told to get zero chars, just quit
1284:000 | DONE ins | na 16 16 | 0063b1 | e8          |                 inx                  NIP, TOS is zero which is also FALSE
1285:000 | DONE ins | na 16 16 | 0063b2 | e8          |                 inx                  
1286:000 | DONE wsp | na 16 16 |        |             |
1287:000 | DONE ins | na 16 16 | 0063b3 | 60          |                 rts                  
1288:000 | DONE wsp | na 16 16 |        |             |
1289:000 | DONE lbl | na 16 16 | 0063b4 |             | accept_nonzero                       
1290:000 | DONE ins | na 16 16 | 0063b4 | b5 00       |                 lda.dx 00            address of buffer is NOS
1291:000 | DONE ins | na 16 16 | 0063b6 | 85 16       |                 sta.d 000216         
1292:000 | DONE ins | na 16 16 | 0063b8 | e8          |                 inx                  NIP
1293:000 | DONE ins | na 16 16 | 0063b9 | e8          |                 inx                  
1294:000 | DONE wsp | na 16 16 |        |             |
1295:000 | DONE ins | na 16 16 | 0063ba | 84 18       |                 sty.d 000218         Save max number of chars in tmp2
1296:000 | DONE ins | na 16 16 | 0063bc | a0 00 00    |                 ldy.# 0000           Use Y as counter
1297:000 | DONE ins | na 16 16 | 0063bf | e2 20       |                 sep 20               
1297:001 | DONE ctl | na  8 16 |        |             |         .!a8
1298:000 | DONE wsp | na  8 16 |        |             |
1299:000 | DONE lbl | na  8 16 | 0063c1 |             | accept_loop                          
1300:000 | DONE cmt | na  8 16 |        |             |                 ; TODO rewrite with KEY so we can revector it
1301:000 | DONE cmt | na  8 16 |        |             |                 ; We don't need to check for CTRL-l, because a vt100 terminal
1302:000 | DONE cmt | na  8 16 |        |             |                 ; clears the screen automatically
1303:000 | DONE ins | na  8 16 | 0063c1 | 20 47 60    |                 jsr 006047           
1304:000 | DONE dir | na  8 16 |        |             |         .!a8                         
1305:000 | DONE cmt | na  8 16 |        |             |                 ; we quit on both line feed and carriage return
1306:000 | DONE ins | na  8 16 | 0063c4 | c9 0a       |                 cmp.# AscLF          
1307:000 | DONE ins | na  8 16 | 0063c6 | f0 44       |                 beq 00640c           
1308:000 | DONE ins | na  8 16 | 0063c8 | c9 0d       |                 cmp.# AscCR          
1309:000 | DONE ins | na  8 16 | 0063ca | f0 40       |                 beq 00640c           
1310:000 | DONE wsp | na  8 16 |        |             |
1311:000 | DONE cmt | na  8 16 |        |             |                 ; BS and DEL do the same thing for the moment
1312:000 | DONE ins | na  8 16 | 0063cc | c9 08       |                 cmp.# AscBS          
1313:000 | DONE ins | na  8 16 | 0063ce | f0 44       |                 beq 006414           
1314:000 | DONE ins | na  8 16 | 0063d0 | c9 7f       |                 cmp.# AscDEL         
1315:000 | DONE ins | na  8 16 | 0063d2 | f0 40       |                 beq 006414           
1316:000 | DONE wsp | na  8 16 |        |             |
1317:000 | DONE cmt | na  8 16 |        |             |                 ; CTRL-c and ESC abort (see if this is too harsh)
1318:000 | DONE ins | na  8 16 | 0063d4 | c9 03       |                 cmp.# AscCC          
1319:000 | DONE ins | na  8 16 | 0063d6 | d0 03       |                 bne 0063db           
1320:000 | DONE ins | na  8 16 | 0063d8 | 4c 97 60    |                 jmp 006097           
1321:000 | DONE lbl | na  8 16 | 0063db |             | @                                    
1322:000 | DONE ins | na  8 16 | 0063db | c9 1b       |                 cmp.# AscESC         
1323:000 | DONE ins | na  8 16 | 0063dd | d0 03       |                 bne 0063e2           
1324:000 | DONE ins | na  8 16 | 0063df | 4c 97 60    |                 jmp 006097           
1325:000 | DONE lbl | na  8 16 | 0063e2 |             | @                                    
1326:000 | DONE cmt | na  8 16 |        |             |                 ; CTRL-p will be used for "previous cmd", TODO
1327:000 | DONE ins | na  8 16 | 0063e2 | c9 10       |                 cmp.# AscCP          
1328:000 | DONE ins | na  8 16 | 0063e4 | d0 0c       |                 bne 0063f2           
1329:000 | DONE ins | na  8 16 | 0063e6 | c2 20       |                 rep 20               
1329:001 | DONE ctl | na 16 16 |        |             |         .!a16
1330:000 | DONE ins | na 16 16 | 0063e8 | a9 82 79    |                 lda.# 007982         
1331:000 | DONE ins | na 16 16 | 0063eb | 20 eb 72    |                 jsr 0072eb           
1332:000 | DONE ins | na 16 16 | 0063ee | e2 20       |                 sep 20               
1332:001 | DONE ctl | na  8 16 |        |             |         .!a8
1333:000 | DONE ins | na  8 16 | 0063f0 | 80 cf       |                 bra 0063c1           
1334:000 | DONE lbl | na  8 16 | 0063f2 |             | @                                    
1335:000 | DONE cmt | na  8 16 |        |             |                 ; CTRL-n will be used for "next cmd", TODO
1336:000 | DONE ins | na  8 16 | 0063f2 | c9 0e       |                 cmp.# AscCN          
1337:000 | DONE ins | na  8 16 | 0063f4 | d0 0c       |                 bne 006402           
1338:000 | DONE ins | na  8 16 | 0063f6 | c2 20       |                 rep 20               
1338:001 | DONE ctl | na 16 16 |        |             |         .!a16
1339:000 | DONE ins | na 16 16 | 0063f8 | a9 95 79    |                 lda.# 007995         
1340:000 | DONE ins | na 16 16 | 0063fb | 20 eb 72    |                 jsr 0072eb           
1341:000 | DONE ins | na 16 16 | 0063fe | e2 20       |                 sep 20               
1341:001 | DONE ctl | na  8 16 |        |             |         .!a8
1342:000 | DONE ins | na  8 16 | 006400 | 80 bf       |                 bra 0063c1           
1343:000 | DONE wsp | na  8 16 |        |             |
1344:000 | DONE lbl | na  8 16 | 006402 |             | @                                    
1345:000 | DONE cmt | na  8 16 |        |             |                 ; That's quite enough, echo character
1346:000 | DONE cmt | na  8 16 |        |             |                 ; TODO change to EMIT
1347:000 | DONE ins | na  8 16 | 006402 | 20 36 60    |                 jsr 006036           echo character
1348:000 | DONE dir | na  8 16 |        |             |         .!a8                         
1349:000 | DONE cmt | na  8 16 |        |             |                 ; TODO multitasking: Add PAUSE here (or in EMIT)
1350:000 | DONE wsp | na  8 16 |        |             |
1351:000 | DONE ins | na  8 16 | 006405 | 91 0c       |                 sta.diy 00020c       STA (CIB),Y
1352:000 | DONE ins | na  8 16 | 006407 | c8          |                 iny                  
1353:000 | DONE ins | na  8 16 | 006408 | c4 18       |                 cpy.d 000218         reached character limit?
1354:000 | DONE ins | na  8 16 | 00640a | d0 b5       |                 bne 0063c1           fall thru if buffer limit reached
1355:000 | DONE wsp | na  8 16 |        |             |
1356:000 | DONE lbl | na  8 16 | 00640c |             | accept_eol                           
1357:000 | DONE ins | na  8 16 | 00640c | 84 0e       |                 sty.d 00020e         Y contains number of chars accepted already
1358:000 | DONE ins | na  8 16 | 00640e | c2 20       |                 rep 20               
1358:001 | DONE ctl | na 16 16 |        |             |         .!a16
1359:000 | DONE ins | na 16 16 | 006410 | 20 38 6a    |                 jsr 006a38           print final space
1360:000 | DONE ins | na 16 16 | 006413 | 60          |                 rts                  this is the actual return of the routine
1361:000 | DONE wsp | na 16 16 |        |             |
1362:000 | DONE lbl | na 16 16 | 006414 |             | accept_bs                            
1363:000 | DONE dir | na  8 16 |        |             |         .!a8                         
1364:000 | DONE ins | na  8 16 | 006414 | c0 00 00    |                 cpy.# 0000           buffer empty?
1365:000 | DONE ins | na  8 16 | 006417 | d0 06       |                 bne 00641f           
1366:000 | DONE wsp | na  8 16 |        |             |
1367:000 | DONE ins | na  8 16 | 006419 | a9 07       |                 lda.# AscBELL        complain and don't delete beyond the start of line
1368:000 | DONE ins | na  8 16 | 00641b | 20 36 60    |                 jsr 006036           
1369:000 | DONE ins | na  8 16 | 00641e | c8          |                 iny                  
1370:000 | DONE lbl | na  8 16 | 00641f |             | @                                    
1371:000 | DONE ins | na  8 16 | 00641f | 88          |                 dey                  
1372:000 | DONE ins | na  8 16 | 006420 | a9 08       |                 lda.# AscBS          move back one
1373:000 | DONE ins | na  8 16 | 006422 | 20 36 60    |                 jsr 006036           
1374:000 | DONE ins | na  8 16 | 006425 | a9 20       |                 lda.# AscSP          print a space (rubout)
1375:000 | DONE ins | na  8 16 | 006427 | 20 36 60    |                 jsr 006036           
1376:000 | DONE ins | na  8 16 | 00642a | a9 08       |                 lda.# AscBS          move back over space
1377:000 | DONE ins | na  8 16 | 00642c | 20 36 60    |                 jsr 006036           
1378:000 | DONE wsp | na  8 16 |        |             |
1379:000 | DONE ins | na  8 16 | 00642f | 80 90       |                 bra 0063c1           
1380:000 | DONE wsp | na  8 16 |        |             |
1381:000 | DONE lbl | na  8 16 | 006431 |             | z_accept                             
1381:001 | DONE ins | na  8 16 | 006431 | 60          |                 rts                  
1382:000 | DONE wsp | na  8 16 |        |             |
1383:000 | DONE cmt | na  8 16 |        |             | ; -------------------------------------------------------------------
1384:000 | DONE cmt | na  8 16 |        |             | ; AGAIN ( addr -- ) 22 bytes / 50 cycles
1385:000 | DONE cmt | na  8 16 |        |             | ; Code a backwards branch to an address usually left by BEGIN. We use JMP
1386:000 | DONE cmt | na  8 16 |        |             | ; instead of BRA to make sure we have the range.
1387:000 | DONE cmt | na  8 16 |        |             | ; TODO see if we should insert a KEY? to make sure we can abort and/or a PAUSE
1388:000 | DONE lbl | na  8 16 | 006432 |             | xt_again                             
1389:000 | DONE wsp | na  8 16 |        |             |
1390:000 | DONE cmt | na  8 16 |        |             |                 ; Add the opcode for a JMP
1391:000 | DONE ins | na  8 16 | 006432 | e2 20       |                 sep 20               
1391:001 | DONE ctl | na  8 16 |        |             |         .!a8
1392:000 | DONE ins | na  8 16 | 006434 | a9 4c       |                 lda.# 4c             
1393:000 | DONE ins | na  8 16 | 006436 | 92 00       |                 sta.di 000200        STA (CP)
1394:000 | DONE ins | na  8 16 | 006438 | c2 20       |                 rep 20               
1394:001 | DONE ctl | na 16 16 |        |             |         .!a16
1395:000 | DONE ins | na 16 16 | 00643a | e6 00       |                 inc.d 000200         
1396:000 | DONE wsp | na 16 16 |        |             |
1397:000 | DONE cmt | na 16 16 |        |             |                 ; Add the address which should be TOS
1398:000 | DONE ins | na 16 16 | 00643c | 98          |                 tya                  
1399:000 | DONE ins | na 16 16 | 00643d | 92 00       |                 sta.di 000200        
1400:000 | DONE ins | na 16 16 | 00643f | e6 00       |                 inc.d 000200         
1401:000 | DONE ins | na 16 16 | 006441 | e6 00       |                 inc.d 000200         
1402:000 | DONE wsp | na 16 16 |        |             |
1403:000 | DONE cmt | na 16 16 |        |             |                 ; drop the address
1404:000 | DONE ins | na 16 16 | 006443 | b4 00       |                 ldy.dx 00            
1405:000 | DONE ins | na 16 16 | 006445 | e8          |                 inx                  
1406:000 | DONE ins | na 16 16 | 006446 | e8          |                 inx                  
1407:000 | DONE wsp | na 16 16 |        |             |
1408:000 | DONE lbl | na 16 16 | 006447 |             | z_again                              
1408:001 | DONE ins | na 16 16 | 006447 | 60          |                 rts                  
1409:000 | DONE wsp | na 16 16 |        |             |
1410:000 | DONE wsp | na 16 16 |        |             |
1411:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1412:000 | DONE cmt | na 16 16 |        |             | ; ALLOT ( n -- ) X bytes / X cycles
1413:000 | DONE cmt | na 16 16 |        |             | ; Reserve a certain number of bytes (not cells) or release them. If n = 0, do
1414:000 | DONE cmt | na 16 16 |        |             | ; nothing. If n is negative, release n bytes, but only to the beginning of the
1415:000 | DONE cmt | na 16 16 |        |             | ; Dictionary. If n is positive (the most common case), reserve n bytes, but not
1416:000 | DONE cmt | na 16 16 |        |             | ; past the Dictionary.
1417:000 | DONE cmt | na 16 16 |        |             | ; See http://forth-standard.org/standard/core/ALLOT
1418:000 | DONE cmt | na 16 16 |        |             | ; TODO test negative values
1419:000 | DONE lbl | na 16 16 | 006448 |             | xt_allot                             
1420:000 | DONE dir | na 16 16 |        |             |         .!a16                        
1421:000 | DONE ins | na 16 16 | 006448 | 98          |                 tya                  force flag check
1422:000 | DONE ins | na 16 16 | 006449 | f0 21       |                 beq 00646c           zero bytes, don't do anything
1423:000 | DONE ins | na 16 16 | 00644b | 30 12       |                 bmi 00645f           free memory instead of reserving it
1424:000 | DONE wsp | na 16 16 |        |             |
1425:000 | DONE cmt | na 16 16 |        |             |                 ; most common case: reserve n bytes. We've already transfered
1426:000 | DONE cmt | na 16 16 |        |             |                 ; TOS to A, so we just have to add the current compile pointer
1427:000 | DONE ins | na 16 16 | 00644d | 18          |                 clc                  
1428:000 | DONE ins | na 16 16 | 00644e | 65 00       |                 adc.d 000200         create new CP
1429:000 | DONE ins | na 16 16 | 006450 | b0 07       |                 bcs 006459           oops, we've wrapped
1430:000 | DONE wsp | na 16 16 |        |             |
1431:000 | DONE ins | na 16 16 | 006452 | a8          |                 tay                  save copy of new CP
1432:000 | DONE wsp | na 16 16 |        |             |
1433:000 | DONE ins | na 16 16 | 006453 | 38          |                 sec                  
1434:000 | DONE ins | na 16 16 | 006454 | e9 ff 7b    |                 sbc.# 007bff         
1435:000 | DONE ins | na 16 16 | 006457 | 30 11       |                 bmi 00646a           oops, fall thru if beyond max RAM
1436:000 | DONE wsp | na 16 16 |        |             |
1437:000 | DONE lbl | na 16 16 | 006459 |             | allot_error                          
1438:000 | DONE ins | na 16 16 | 006459 | a9 2e 78    |                 lda.# 00782e         
1439:000 | DONE ins | na 16 16 | 00645c | 4c e5 72    |                 jmp 0072e5           
1440:000 | DONE wsp | na 16 16 |        |             |
1441:000 | DONE lbl | na 16 16 | 00645f |             | allot_minus                          
1442:000 | DONE cmt | na 16 16 |        |             |                 ; negative value means we're freeing memory
1443:000 | DONE ins | na 16 16 | 00645f | 38          |                 sec                  
1444:000 | DONE ins | na 16 16 | 006460 | e5 00       |                 sbc.d 000200         
1445:000 | DONE ins | na 16 16 | 006462 | 90 f5       |                 bcc 006459           oops, we've wrapped
1446:000 | DONE wsp | na 16 16 |        |             |
1447:000 | DONE ins | na 16 16 | 006464 | a8          |                 tay                  
1448:000 | DONE wsp | na 16 16 |        |             |
1449:000 | DONE ins | na 16 16 | 006465 | e9 00 03    |                 sbc.# 000300         Carry Flag must still be set
1450:000 | DONE ins | na 16 16 | 006468 | 30 ef       |                 bmi 006459           oops, gone too far back
1451:000 | DONE wsp | na 16 16 |        |             |
1452:000 | DONE cmt | na 16 16 |        |             |                 ; fall through to allot_done
1453:000 | DONE lbl | na 16 16 | 00646a |             | allot_done                           
1454:000 | DONE ins | na 16 16 | 00646a | 84 00       |                 sty.d 000200         new compiler pointer
1455:000 | DONE lbl | na 16 16 | 00646c |             | allot_real_gone                      
1456:000 | DONE ins | na 16 16 | 00646c | b4 00       |                 ldy.dx 00            DROP
1457:000 | DONE ins | na 16 16 | 00646e | e8          |                 inx                  
1458:000 | DONE ins | na 16 16 | 00646f | e8          |                 inx                  
1459:000 | DONE wsp | na 16 16 |        |             |
1460:000 | DONE lbl | na 16 16 | 006470 |             | z_allot                              
1460:001 | DONE ins | na 16 16 | 006470 | 60          |                 rts                  
1461:000 | DONE wsp | na 16 16 |        |             |
1462:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1463:000 | DONE cmt | na 16 16 |        |             | ; AND ( n m -- n ) 6 bytes / X cycles
1464:000 | DONE cmt | na 16 16 |        |             | ; Logical AND
1465:000 | DONE lbl | na 16 16 | 006471 |             | xt_and                               
1466:000 | DONE ins | na 16 16 | 006471 | 98          |                 tya                  
1467:000 | DONE ins | na 16 16 | 006472 | 35 00       |                 and.dx 00            
1468:000 | DONE ins | na 16 16 | 006474 | a8          |                 tay                  
1469:000 | DONE wsp | na 16 16 |        |             |
1470:000 | DONE ins | na 16 16 | 006475 | e8          |                 inx                  NIP
1471:000 | DONE ins | na 16 16 | 006476 | e8          |                 inx                  
1472:000 | DONE wsp | na 16 16 |        |             |
1473:000 | DONE lbl | na 16 16 | 006477 |             | z_and                                
1473:001 | DONE ins | na 16 16 | 006477 | 60          |                 rts                  
1474:000 | DONE wsp | na 16 16 |        |             |
1475:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1476:000 | DONE cmt | na 16 16 |        |             | ; BASE ( -- addr ) X bytes / X cycles
1477:000 | DONE cmt | na 16 16 |        |             | ; Get the address of where the radix for number conversion is stored
1478:000 | DONE lbl | na 16 16 | 006478 |             | xt_base                              
1479:000 | DONE ins | na 16 16 | 006478 | ca          |                 dex                  
1480:000 | DONE ins | na 16 16 | 006479 | ca          |                 dex                  
1481:000 | DONE ins | na 16 16 | 00647a | 94 00       |                 sty.dx 00            
1482:000 | DONE wsp | na 16 16 |        |             |
1483:000 | DONE ins | na 16 16 | 00647c | a0 1c 02    |                 ldy.# 00021c         
1484:000 | DONE wsp | na 16 16 |        |             |
1485:000 | DONE lbl | na 16 16 | 00647f |             | z_base                               
1485:001 | DONE ins | na 16 16 | 00647f | 60          |                 rts                  
1486:000 | DONE wsp | na 16 16 |        |             |
1487:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1488:000 | DONE cmt | na 16 16 |        |             | ; BELL ( -- ) X bytes / X cycles
1489:000 | DONE cmt | na 16 16 |        |             | ; Trigger terminal bell on vt100 terminals
1490:000 | DONE cmt | na 16 16 |        |             | ; TODO replace with EMIT
1491:000 | DONE lbl | na 16 16 | 006480 |             | xt_bell                              
1492:000 | DONE dir | na 16 16 |        |             |         .!a16                        
1493:000 | DONE ins | na 16 16 | 006480 | a9 07 00    |                 lda.# AscBELL        
1494:000 | DONE ins | na 16 16 | 006483 | 20 36 60    |                 jsr 006036           
1495:000 | DONE wsp | na 16 16 |        |             |
1496:000 | DONE lbl | na 16 16 | 006486 |             | z_bell                               
1496:001 | DONE ins | na 16 16 | 006486 | 60          |                 rts                  
1497:000 | DONE wsp | na 16 16 |        |             |
1498:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1499:000 | DONE cmt | na 16 16 |        |             | ; BEGIN ( -- addr ) 6 bytes / 13 cycles
1500:000 | DONE cmt | na 16 16 |        |             | ; Mark entry point for a loop. This is just an immediate version of here which
1501:000 | DONE cmt | na 16 16 |        |             | ; could just as welle be coded as  : BEGIN HERE ; IMMEDIATE  but we code it here
1502:000 | DONE cmt | na 16 16 |        |             | ; differently for speed
1503:000 | DONE lbl | na 16 16 | 006487 |             | xt_begin                             
1504:000 | DONE cmt | na 16 16 |        |             |                 ; really just the same code as HERE
1505:000 | DONE ins | na 16 16 | 006487 | ca          |                 dex                  
1506:000 | DONE ins | na 16 16 | 006488 | ca          |                 dex                  
1507:000 | DONE ins | na 16 16 | 006489 | 94 00       |                 sty.dx 00            
1508:000 | DONE wsp | na 16 16 |        |             |
1509:000 | DONE ins | na 16 16 | 00648b | a4 00       |                 ldy.d 000200         
1510:000 | DONE wsp | na 16 16 |        |             |
1511:000 | DONE lbl | na 16 16 | 00648d |             | z_begin                              
1511:001 | DONE ins | na 16 16 | 00648d | 60          |                 rts                  
1512:000 | DONE wsp | na 16 16 |        |             |
1513:000 | DONE wsp | na 16 16 |        |             |
1514:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1515:000 | DONE cmt | na 16 16 |        |             | ; BL ( -- u ) 7 bytes / 12 cycles
1516:000 | DONE cmt | na 16 16 |        |             | ; Put ASCII char for SPACE on Data Stack
1517:000 | DONE lbl | na 16 16 | 00648e |             | xt_bl                                
1518:000 | DONE dir | na 16 16 |        |             |         .!xy16                       
1519:000 | DONE ins | na 16 16 | 00648e | ca          |                 dex                  
1520:000 | DONE ins | na 16 16 | 00648f | ca          |                 dex                  
1521:000 | DONE ins | na 16 16 | 006490 | 94 00       |                 sty.dx 00            
1522:000 | DONE ins | na 16 16 | 006492 | a0 20 00    |                 ldy.# AscSP          
1523:000 | DONE wsp | na 16 16 |        |             |
1524:000 | DONE lbl | na 16 16 | 006495 |             | z_bl                                 
1524:001 | DONE ins | na 16 16 | 006495 | 60          |                 rts                  
1525:000 | DONE wsp | na 16 16 |        |             |
1526:000 | DONE wsp | na 16 16 |        |             |
1527:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1528:000 | DONE cmt | na 16 16 |        |             | ; BOUNDS ( addr u -- addr+u addr ) 9 bytes / X cycles
1529:000 | DONE cmt | na 16 16 |        |             | ; Given a string, return the correct Data Stack parameters for a DO/LOOP loop
1530:000 | DONE cmt | na 16 16 |        |             | ; over its characters. This is realized as OVER + SWAP in Forth, but we do it
1531:000 | DONE cmt | na 16 16 |        |             | ; a lot faster in assembler. Uses tmptos
1532:000 | DONE lbl | na 16 16 | 006496 |             | xt_bounds                            
1533:000 | DONE dir | na 16 16 |        |             |         .!a16                        
1534:000 | DONE ins | na 16 16 | 006496 | 84 06       |                 sty.d 000206         
1535:000 | DONE ins | na 16 16 | 006498 | b4 00       |                 ldy.dx 00            addr now TOS
1536:000 | DONE wsp | na 16 16 |        |             |
1537:000 | DONE ins | na 16 16 | 00649a | 18          |                 clc                  
1538:000 | DONE ins | na 16 16 | 00649b | 65 06       |                 adc.d 000206         
1539:000 | DONE ins | na 16 16 | 00649d | 95 00       |                 sta.dx 00            addr+u now NOS
1540:000 | DONE wsp | na 16 16 |        |             |
1541:000 | DONE lbl | na 16 16 | 00649f |             | z_bounds                             
1541:001 | DONE ins | na 16 16 | 00649f | 60          |                 rts                  
1542:000 | DONE wsp | na 16 16 |        |             |
1543:000 | DONE wsp | na 16 16 |        |             |
1544:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1545:000 | DONE cmt | na 16 16 |        |             | ; BRANCH ( -- ) X bytes / X cycles
1546:000 | DONE cmt | na 16 16 |        |             | ; Transfer control to given address. Uses tmp3 and tmptos. This word was adapted
1547:000 | DONE cmt | na 16 16 |        |             | ; from Tali Forth and will be replaced by ANSI-conform words CS-PICK and CS-ROLL
1548:000 | DONE cmt | na 16 16 |        |             | ; in the future
1549:000 | DONE lbl | na 16 16 | 0064a0 |             | xt_branch                            
1550:000 | DONE dir | na 16 16 |        |             |         .!a16                        
1551:000 | DONE cmt | na 16 16 |        |             |                 ; encode subroutine branch to runtime portion
1552:000 | DONE ins | na 16 16 | 0064a0 | f4 a7 64    |                 phe.# 0064a7         
1553:000 | DONE ins | na 16 16 | 0064a3 | 20 c4 72    |                 jsr 0072c4           
1554:000 | DONE wsp | na 16 16 |        |             |
1555:000 | DONE lbl | na 16 16 | 0064a6 |             | z_branch                             
1555:001 | DONE ins | na 16 16 | 0064a6 | 60          |                 rts                  
1556:000 | DONE wsp | na 16 16 |        |             |
1557:000 | DONE lbl | na 16 16 | 0064a7 |             | branch_rt                            
1558:000 | DONE ins | na 16 16 | 0064a7 | 84 06       |                 sty.d 000206         
1559:000 | DONE wsp | na 16 16 |        |             |
1560:000 | DONE cmt | na 16 16 |        |             |                 ; The value on the Return Stack determines where we go to
1561:000 | DONE ins | na 16 16 | 0064a9 | 68          |                 pla                  
1562:000 | DONE ins | na 16 16 | 0064aa | 85 1a       |                 sta.d 00021a         
1563:000 | DONE ins | na 16 16 | 0064ac | a0 01 00    |                 ldy.# 0001           
1564:000 | DONE ins | na 16 16 | 0064af | b1 1a       |                 lda.diy 00021a       LDA (TMP1),Y ; get address we're pointing to
1565:000 | DONE ins | na 16 16 | 0064b1 | 3a          |                 dec.a                
1566:000 | DONE ins | na 16 16 | 0064b2 | 48          |                 pha                  put target address back on Return Stack
1567:000 | DONE wsp | na 16 16 |        |             |
1568:000 | DONE ins | na 16 16 | 0064b3 | a4 06       |                 ldy.d 000206         
1569:000 | DONE wsp | na 16 16 |        |             |
1570:000 | DONE ins | na 16 16 | 0064b5 | 60          |                 rts                  
1571:000 | DONE wsp | na 16 16 |        |             |
1572:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1573:000 | DONE cmt | na 16 16 |        |             | ; BYE ( -- ) 2 bytes / 7-8 cycles
1574:000 | DONE cmt | na 16 16 |        |             | ; Leave Liara Forth, returning to Mensch Monitor
1575:000 | DONE cmt | na 16 16 |        |             | ; TODO make sure this actually calls the MM
1576:000 | DONE lbl | na 16 16 | 0064b6 |             | xt_bye                               
1577:000 | DONE ins | na 16 16 | 0064b6 | 58          |                 cli                  
1578:000 | DONE ins | na 16 16 | 0064b7 | 00 00       |                 brk 00               status byte 00 required for assembler
1579:000 | DONE wsp | na 16 16 |        |             |
1580:000 | DONE lbl | na 16 16 | 0064b9 |             | z_bye                                
1580:001 | DONE ins | na 16 16 | 0064b9 | 60          |                 rts                  dummy for compiling, never reached
1581:000 | DONE wsp | na 16 16 |        |             |
1582:000 | DONE wsp | na 16 16 |        |             |
1583:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1584:000 | DONE cmt | na 16 16 |        |             | ; C, "C-COMMA" ( char -- ) 13 bytes / 28 cycles
1585:000 | DONE cmt | na 16 16 |        |             | ; Store one character in the Dictionary
1586:000 | DONE lbl | na 16 16 | 0064ba |             | xt_c-comma                           
1587:000 | DONE ins | na 16 16 | 0064ba | 98          |                 tya                  
1588:000 | DONE ins | na 16 16 | 0064bb | e2 20       |                 sep 20               
1588:001 | DONE ctl | na  8 16 |        |             |         .!a8
1589:000 | DONE ins | na  8 16 | 0064bd | 92 00       |                 sta.di 000200        STA (CP)
1590:000 | DONE ins | na  8 16 | 0064bf | c2 20       |                 rep 20               
1590:001 | DONE ctl | na 16 16 |        |             |         .!a16
1591:000 | DONE ins | na 16 16 | 0064c1 | e6 00       |                 inc.d 000200         quick version of 1 ALLOT
1592:000 | DONE wsp | na 16 16 |        |             |
1593:000 | DONE ins | na 16 16 | 0064c3 | b4 00       |                 ldy.dx 00            
1594:000 | DONE ins | na 16 16 | 0064c5 | e8          |                 inx                  
1595:000 | DONE ins | na 16 16 | 0064c6 | e8          |                 inx                  
1596:000 | DONE wsp | na 16 16 |        |             |
1597:000 | DONE lbl | na 16 16 | 0064c7 |             | z_c-comma                            
1597:001 | DONE ins | na 16 16 | 0064c7 | 60          |                 rts                  
1598:000 | DONE wsp | na 16 16 |        |             |
1599:000 | DONE wsp | na 16 16 |        |             |
1600:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1601:000 | DONE cmt | na 16 16 |        |             | ; C@ "C-FETCH" ( addr -- n ) 11 bytes / 16 cycles
1602:000 | DONE cmt | na 16 16 |        |             | ; Get a single byte from the given address
1603:000 | DONE lbl | na 16 16 | 0064c8 |             | xt_c-fetch                           
1604:000 | DONE ins | na 16 16 | 0064c8 | e2 20       |                 sep 20               
1604:001 | DONE ctl | na  8 16 |        |             |         .!a8
1605:000 | DONE ins | na  8 16 | 0064ca | b9 00 00    |                 lda.y 0000           
1606:000 | DONE ins | na  8 16 | 0064cd | c2 20       |                 rep 20               
1606:001 | DONE ctl | na 16 16 |        |             |         .!a16
1607:000 | DONE ins | na 16 16 | 0064cf | 29 ff 00    |                 and.# 00ff           
1608:000 | DONE ins | na 16 16 | 0064d2 | a8          |                 tay                  
1609:000 | DONE wsp | na 16 16 |        |             |
1610:000 | DONE lbl | na 16 16 | 0064d3 |             | z_c-fetch                            
1610:001 | DONE ins | na 16 16 | 0064d3 | 60          |                 rts                  
1611:000 | DONE wsp | na 16 16 |        |             |
1612:000 | DONE wsp | na 16 16 |        |             |
1613:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1614:000 | DONE cmt | na 16 16 |        |             | ; C! "C-STORE" ( n addr -- ) 15 bytes / 29 cycles
1615:000 | DONE cmt | na 16 16 |        |             | ; Store LSB of NOS at location given as TOS
1616:000 | DONE lbl | na 16 16 | 0064d4 |             | xt_c-store                           
1617:000 | DONE ins | na 16 16 | 0064d4 | b5 00       |                 lda.dx 00            
1618:000 | DONE ins | na 16 16 | 0064d6 | e2 20       |                 sep 20               
1618:001 | DONE ctl | na  8 16 |        |             |         .!a8
1619:000 | DONE ins | na  8 16 | 0064d8 | 99 00 00    |                 sta.y 0000           
1620:000 | DONE ins | na  8 16 | 0064db | c2 20       |                 rep 20               
1620:001 | DONE ctl | na 16 16 |        |             |         .!a16
1621:000 | DONE ins | na 16 16 | 0064dd | b4 02       |                 ldy.dx 02            
1622:000 | DONE ins | na 16 16 | 0064df | e8          |                 inx                  
1623:000 | DONE ins | na 16 16 | 0064e0 | e8          |                 inx                  
1624:000 | DONE ins | na 16 16 | 0064e1 | e8          |                 inx                  
1625:000 | DONE ins | na 16 16 | 0064e2 | e8          |                 inx                  
1626:000 | DONE wsp | na 16 16 |        |             |
1627:000 | DONE lbl | na 16 16 | 0064e3 |             | z_c-store                            
1627:001 | DONE ins | na 16 16 | 0064e3 | 60          |                 rts                  
1628:000 | DONE wsp | na 16 16 |        |             |
1629:000 | DONE wsp | na 16 16 |        |             |
1630:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1631:000 | DONE cmt | na 16 16 |        |             | ; CELLS ( n -- n ) X bytes / X cycles
1632:000 | DONE cmt | na 16 16 |        |             | ; Given a number of cells, return the number of bytes that they will require.
1633:000 | DONE cmt | na 16 16 |        |             | ; This is 16 bit cell Forth, so the value returned by this word is the same as
1634:000 | DONE cmt | na 16 16 |        |             | ; returned by 2*, see there.
1635:000 | DONE wsp | na 16 16 |        |             |
1636:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1637:000 | DONE cmt | na 16 16 |        |             | ; CHAR ( "c" -- u ) 23 bytes / X cycles
1638:000 | DONE cmt | na 16 16 |        |             | ; Convert a character to its ASCII value
1639:000 | DONE lbl | na 16 16 | 0064e4 |             | xt_char                              
1640:000 | DONE dir | na 16 16 |        |             |         .!a16                        
1641:000 | DONE ins | na 16 16 | 0064e4 | 20 9c 68    |                 jsr 00689c           ( -- addr u )
1642:000 | DONE wsp | na 16 16 |        |             |
1643:000 | DONE cmt | na 16 16 |        |             |                 ; if we got back a zero, we have a problem
1644:000 | DONE ins | na 16 16 | 0064e7 | 98          |                 tya                  force flag check
1645:000 | DONE ins | na 16 16 | 0064e8 | d0 06       |                 bne 0064f0           
1646:000 | DONE wsp | na 16 16 |        |             |
1647:000 | DONE ins | na 16 16 | 0064ea | a9 cd 78    |                 lda.# 0078cd         
1648:000 | DONE ins | na 16 16 | 0064ed | 4c e5 72    |                 jmp 0072e5           
1649:000 | DONE wsp | na 16 16 |        |             |
1650:000 | DONE lbl | na 16 16 | 0064f0 |             | char_got_char                        
1651:000 | DONE ins | na 16 16 | 0064f0 | b4 00       |                 ldy.dx 00            get addr from NOS
1652:000 | DONE ins | na 16 16 | 0064f2 | b9 00 00    |                 lda.y 0000           LDA 0000,Y - could be C@
1653:000 | DONE ins | na 16 16 | 0064f5 | 29 ff 00    |                 and.# 00ff           
1654:000 | DONE ins | na 16 16 | 0064f8 | a8          |                 tay                  
1655:000 | DONE wsp | na 16 16 |        |             |
1656:000 | DONE ins | na 16 16 | 0064f9 | e8          |                 inx                  
1657:000 | DONE ins | na 16 16 | 0064fa | e8          |                 inx                  
1658:000 | DONE wsp | na 16 16 |        |             |
1659:000 | DONE lbl | na 16 16 | 0064fb |             | z_char                               
1659:001 | DONE ins | na 16 16 | 0064fb | 60          |                 rts                  
1660:000 | DONE wsp | na 16 16 |        |             |
1661:000 | DONE wsp | na 16 16 |        |             |
1662:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1663:000 | DONE cmt | na 16 16 |        |             | ; COMPILE-ONLY ( -- ) 8 bytes / X cycles
1664:000 | DONE cmt | na 16 16 |        |             | ; Mark the most recently defined word as COMPILE-ONLY. The alternative (and
1665:000 | DONE cmt | na 16 16 |        |             | ; traditional) way to do this is to include a word ?COMPILE that makes sure
1666:000 | DONE cmt | na 16 16 |        |             | ; we're in compile mode
1667:000 | DONE lbl | na 16 16 | 0064fc |             | xt_compile-only                      
1668:000 | DONE dir | na 16 16 |        |             |         .!a16                        
1669:000 | DONE ins | na 16 16 | 0064fc | a9 04 00    |                 lda.# CO             
1670:000 | DONE ins | na 16 16 | 0064ff | eb          |                 xba                  flags are MSB
1671:000 | DONE ins | na 16 16 | 006500 | 12 02       |                 ora.di 000202        ORA (DP)
1672:000 | DONE ins | na 16 16 | 006502 | 92 02       |                 sta.di 000202        
1673:000 | DONE wsp | na 16 16 |        |             |
1674:000 | DONE lbl | na 16 16 | 006504 |             | z_compile-only                       
1674:001 | DONE ins | na 16 16 | 006504 | 60          |                 rts                  
1675:000 | DONE wsp | na 16 16 |        |             |
1676:000 | DONE wsp | na 16 16 |        |             |
1677:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1678:000 | DONE cmt | na 16 16 |        |             | ; COMPILE, ( xt -- ) X bytes / X cycles
1679:000 | DONE cmt | na 16 16 |        |             | ; Compile a given xt in the current word definition. It is an error if we are
1680:000 | DONE cmt | na 16 16 |        |             | ; not in the compile state. Because we are using subroutine threading, we can't
1681:000 | DONE cmt | na 16 16 |        |             | ; use , (COMMA) to compile new words the traditional way. We use the NC (Native
1682:000 | DONE cmt | na 16 16 |        |             | ; Compile) flag to decide if native compilation is allowed. If yes, we use the
1683:000 | DONE cmt | na 16 16 |        |             | ; value NC_LIMIT (in definitions.tasm) to decide if the code is too large to be
1684:000 | DONE cmt | na 16 16 |        |             | ; natively coded: If the size is smaller than NC_LIMIT, we silently use
1685:000 | DONE cmt | na 16 16 |        |             | ; subroutine coding.
1686:000 | DONE cmt | na 16 16 |        |             | ; TODO currently just compiles subroutine jumps
1687:000 | DONE lbl | na 16 16 | 006505 |             | xt_compilecomma                      
1688:000 | DONE wsp | na 16 16 |        |             |
1689:000 | DONE lbl | na 16 16 | 006505 |             | compile_as_code                      
1690:000 | DONE cmt | na 16 16 |        |             |                 ; Compile xt as native code
1691:000 | DONE cmt | na 16 16 |        |             |                 ; use nc_limit to decide if we want native compile
1692:000 | DONE cmt | na 16 16 |        |             |                 ; TODO consider special cases:
1693:000 | DONE cmt | na 16 16 |        |             |                 ;  - >R R> R@ should strip PLA/PHA if native compiled
1694:000 | DONE cmt | na 16 16 |        |             |                 ;  - Don't compile comments
1695:000 | DONE wsp | na 16 16 |        |             |
1696:000 | DONE lbl | na 16 16 | 006505 |             | compile_as_jump                      
1697:000 | DONE cmt | na 16 16 |        |             |                 ; Compile xt as a subroutine jump. We don't have to switch A to
1698:000 | DONE cmt | na 16 16 |        |             |                 ; 8-bit register size because we only advance CP by one byte, so
1699:000 | DONE cmt | na 16 16 |        |             |                 ; the MSB of A is overwritten. Little endian machines for the
1700:000 | DONE cmt | na 16 16 |        |             |                 ; win!
1701:000 | DONE ins | na 16 16 | 006505 | a9 20 00    |                 lda.# 20             opcode for JSR
1702:000 | DONE ins | na 16 16 | 006508 | 92 00       |                 sta.di 000200        STA (CP)
1703:000 | DONE ins | na 16 16 | 00650a | e6 00       |                 inc.d 000200         
1704:000 | DONE wsp | na 16 16 |        |             |
1705:000 | DONE cmt | na 16 16 |        |             |                 ; There is no "sty.di" instruction, so we have to do this the
1706:000 | DONE cmt | na 16 16 |        |             |                 ; hard way
1707:000 | DONE ins | na 16 16 | 00650c | 98          |                 tya                  
1708:000 | DONE ins | na 16 16 | 00650d | 92 00       |                 sta.di 000200        
1709:000 | DONE ins | na 16 16 | 00650f | e6 00       |                 inc.d 000200         
1710:000 | DONE ins | na 16 16 | 006511 | e6 00       |                 inc.d 000200         
1711:000 | DONE wsp | na 16 16 |        |             |
1712:000 | DONE ins | na 16 16 | 006513 | b4 00       |                 ldy.dx 00            
1713:000 | DONE ins | na 16 16 | 006515 | e8          |                 inx                  
1714:000 | DONE ins | na 16 16 | 006516 | e8          |                 inx                  
1715:000 | DONE wsp | na 16 16 |        |             |
1716:000 | DONE lbl | na 16 16 | 006517 |             | z_compilecomma                       
1716:001 | DONE ins | na 16 16 | 006517 | 60          |                 rts                  
1717:000 | DONE wsp | na 16 16 |        |             |
1718:000 | DONE wsp | na 16 16 |        |             |
1719:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1720:000 | DONE cmt | na 16 16 |        |             | ; CONSTANT ( "name" n -- ) X bytes / X cycles
1721:000 | DONE cmt | na 16 16 |        |             | ; Associate a fixed value with a word. This could be realized as
1722:000 | DONE cmt | na 16 16 |        |             | ; CREATE , DOES> @  as well. We do more in assembler but let CREATE do the heavy
1723:000 | DONE cmt | na 16 16 |        |             | ; lifting.
1724:000 | DONE cmt | na 16 16 |        |             | ; See http://www.bradrodriguez.com/papers/moving3.htm for a primer on how
1725:000 | DONE cmt | na 16 16 |        |             | ; this works in various Forths.
1726:000 | DONE lbl | na 16 16 | 006518 |             | xt_constant                          
1727:000 | DONE ins | na 16 16 | 006518 | 20 48 65    |                 jsr 006548           
1728:000 | DONE wsp | na 16 16 |        |             |
1729:000 | DONE cmt | na 16 16 |        |             |                 ; CREATE by default installs a subroutine jump to DOVAR, but we
1730:000 | DONE cmt | na 16 16 |        |             |                 ; actually want DOCONST this time. Go back two bytes and repace
1731:000 | DONE cmt | na 16 16 |        |             |                 ; the subroutine jump target
1732:000 | DONE ins | na 16 16 | 00651b | a5 00       |                 lda.d 000200         
1733:000 | DONE ins | na 16 16 | 00651d | 3a          |                 dec.a                
1734:000 | DONE ins | na 16 16 | 00651e | 3a          |                 dec.a                
1735:000 | DONE ins | na 16 16 | 00651f | 85 16       |                 sta.d 000216         
1736:000 | DONE wsp | na 16 16 |        |             |
1737:000 | DONE ins | na 16 16 | 006521 | a9 48 72    |                 lda.# 007248         
1738:000 | DONE ins | na 16 16 | 006524 | 92 16       |                 sta.di 000216        STA (TMP1)
1739:000 | DONE wsp | na 16 16 |        |             |
1740:000 | DONE cmt | na 16 16 |        |             |                 ; Save TOS in next cell. This is a direct version of COMMA
1741:000 | DONE ins | na 16 16 | 006526 | 98          |                 tya                  there is no "sty.di cp"
1742:000 | DONE ins | na 16 16 | 006527 | 92 00       |                 sta.di 000200        
1743:000 | DONE ins | na 16 16 | 006529 | e6 00       |                 inc.d 000200         
1744:000 | DONE ins | na 16 16 | 00652b | e6 00       |                 inc.d 000200         
1745:000 | DONE wsp | na 16 16 |        |             |
1746:000 | DONE ins | na 16 16 | 00652d | b4 00       |                 ldy.dx 00            DROP
1747:000 | DONE ins | na 16 16 | 00652f | e8          |                 inx                  
1748:000 | DONE ins | na 16 16 | 006530 | e8          |                 inx                  
1749:000 | DONE wsp | na 16 16 |        |             |
1750:000 | DONE lbl | na 16 16 | 006531 |             | z_constant                           
1750:001 | DONE ins | na 16 16 | 006531 | 60          |                 rts                  
1751:000 | DONE wsp | na 16 16 |        |             |
1752:000 | DONE wsp | na 16 16 |        |             |
1753:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1754:000 | DONE cmt | na 16 16 |        |             | ; COUNT ( c-addr -- addr u ) 14 bytes / X cycles
1755:000 | DONE cmt | na 16 16 |        |             | ; Convert old-style character string to address-length pair. Note that the
1756:000 | DONE cmt | na 16 16 |        |             | ; length of the string c-addr ist stored in character length (8 bit), not cell
1757:000 | DONE cmt | na 16 16 |        |             | ; length (16 bit). This is rarely used these days, though COUNT can also be used
1758:000 | DONE cmt | na 16 16 |        |             | ; to step through a string character by character.
1759:000 | DONE lbl | na 16 16 | 006532 |             | xt_count                             
1760:000 | DONE dir | na 16 16 |        |             |         .!a16                        
1761:000 | DONE dir | na 16 16 |        |             |         .!xy16                       
1762:000 | DONE ins | na 16 16 | 006532 | 98          |                 tya                  
1763:000 | DONE ins | na 16 16 | 006533 | 1a          |                 inc.a                String address starts one char later
1764:000 | DONE wsp | na 16 16 |        |             |
1765:000 | DONE ins | na 16 16 | 006534 | ca          |                 dex                  
1766:000 | DONE ins | na 16 16 | 006535 | ca          |                 dex                  
1767:000 | DONE ins | na 16 16 | 006536 | 95 00       |                 sta.dx 00            NOS
1768:000 | DONE wsp | na 16 16 |        |             |
1769:000 | DONE ins | na 16 16 | 006538 | b9 00 00    |                 lda.y 0000           LDA $0000,Y  first byte is length
1770:000 | DONE ins | na 16 16 | 00653b | eb          |                 xba                  move length to LSB
1771:000 | DONE ins | na 16 16 | 00653c | 29 ff 00    |                 and.# 00ff           get rid of whatever was MSB
1772:000 | DONE ins | na 16 16 | 00653f | a8          |                 tay                  TOS
1773:000 | DONE wsp | na 16 16 |        |             |
1774:000 | DONE lbl | na 16 16 | 006540 |             | z_count                              
1774:001 | DONE ins | na 16 16 | 006540 | 60          |                 rts                  
1775:000 | DONE wsp | na 16 16 |        |             |
1776:000 | DONE wsp | na 16 16 |        |             |
1777:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1778:000 | DONE cmt | na 16 16 |        |             | ; CR ( -- ) X bytes / X cycles
1779:000 | DONE cmt | na 16 16 |        |             | ; Cause following output to appear at beginning of next line
1780:000 | DONE cmt | na 16 16 |        |             | ; TODO replace with EMIT
1781:000 | DONE lbl | na 16 16 | 006541 |             | xt_cr                                
1782:000 | DONE ins | na 16 16 | 006541 | a9 0a 00    |                 lda.# AscLF          test with AscCR for emulators
1783:000 | DONE ins | na 16 16 | 006544 | 20 36 60    |                 jsr 006036           
1784:000 | DONE wsp | na 16 16 |        |             |
1785:000 | DONE lbl | na 16 16 | 006547 |             | z_cr                                 
1785:001 | DONE ins | na 16 16 | 006547 | 60          |                 rts                  
1786:000 | DONE wsp | na 16 16 |        |             |
1787:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1788:000 | DONE cmt | na 16 16 |        |             | ; CREATE ( "name" -- ) X bytes / X cycles
1789:000 | DONE cmt | na 16 16 |        |             | ; Create a Dictionary entry associated with "name", used for various words,
1790:000 | DONE cmt | na 16 16 |        |             | ; especially for VARIABLE. When called, this new word will return the associated
1791:000 | DONE cmt | na 16 16 |        |             | ; address.
1792:000 | DONE lbl | na 16 16 | 006548 |             | xt_create                            
1793:000 | DONE dir | na 16 16 |        |             |         .!a16                        
1794:000 | DONE ins | na 16 16 | 006548 | 20 9c 68    |                 jsr 00689c           ( -- addr u )
1795:000 | DONE ins | na 16 16 | 00654b | d0 06       |                 bne 006553           
1796:000 | DONE wsp | na 16 16 |        |             |
1797:000 | DONE cmt | na 16 16 |        |             |                 ; if we got a zero-length name string, complain and abort
1798:000 | DONE ins | na 16 16 | 00654d | a9 cd 78    |                 lda.# 0078cd         
1799:000 | DONE ins | na 16 16 | 006550 | 4c e5 72    |                 jmp 0072e5           
1800:000 | DONE wsp | na 16 16 |        |             |
1801:000 | DONE lbl | na 16 16 | 006553 |             | create_got_name                      
1802:000 | DONE cmt | na 16 16 |        |             |                 ; all Dictionary entries are lowercase
1803:000 | DONE ins | na 16 16 | 006553 | 20 1e 73    |                 jsr 00731e           
1804:000 | DONE wsp | na 16 16 |        |             |
1805:000 | DONE cmt | na 16 16 |        |             |                 ; Remember the first free byte of memory as the start of the new
1806:000 | DONE cmt | na 16 16 |        |             |                 ; word
1807:000 | DONE ins | na 16 16 | 006556 | a5 00       |                 lda.d 000200         
1808:000 | DONE ins | na 16 16 | 006558 | 85 16       |                 sta.d 000216         save start of new word
1809:000 | DONE wsp | na 16 16 |        |             |
1810:000 | DONE cmt | na 16 16 |        |             |                 ; Enforce limit on 255 char length names by masking the MSB
1811:000 | DONE cmt | na 16 16 |        |             |                 ; of the length of the given string. We arrive here with
1812:000 | DONE cmt | na 16 16 |        |             |                 ; ( addr u )
1813:000 | DONE ins | na 16 16 | 00655a | 98          |                 tya                  
1814:000 | DONE ins | na 16 16 | 00655b | 29 ff 00    |                 and.# 00ff           
1815:000 | DONE ins | na 16 16 | 00655e | 85 18       |                 sta.d 000218         save length of name string
1816:000 | DONE wsp | na 16 16 |        |             |
1817:000 | DONE cmt | na 16 16 |        |             |                 ; We need 8 bytes + the length of the name string for our new
1818:000 | DONE cmt | na 16 16 |        |             |                 ; header. This is also the offset for the start of the code
1819:000 | DONE cmt | na 16 16 |        |             |                 ; field (the xt_ label) so we need to remember it. Otherwise, we
1820:000 | DONE cmt | na 16 16 |        |             |                 ; could just allot the space afterwards.
1821:000 | DONE ins | na 16 16 | 006560 | 18          |                 clc                  
1822:000 | DONE ins | na 16 16 | 006561 | 69 08 00    |                 adc.# 0008           
1823:000 | DONE ins | na 16 16 | 006564 | 85 1a       |                 sta.d 00021a         total bytes required for header
1824:000 | DONE wsp | na 16 16 |        |             |
1825:000 | DONE cmt | na 16 16 |        |             |                 ; We need to allocate three more bytes for the hardcoded
1826:000 | DONE cmt | na 16 16 |        |             |                 ; code field area (CFA), the "payload" of the word which by
1827:000 | DONE cmt | na 16 16 |        |             |                 ; default will be a subroutine jump to DOVAR
1828:000 | DONE ins | na 16 16 | 006566 | 1a          |                 inc.a                
1829:000 | DONE ins | na 16 16 | 006567 | 1a          |                 inc.a                
1830:000 | DONE ins | na 16 16 | 006568 | 1a          |                 inc.a                
1831:000 | DONE wsp | na 16 16 |        |             |
1832:000 | DONE cmt | na 16 16 |        |             |                 ; Instead of jumping to ALLOT, we do things by hand for speed
1833:000 | DONE cmt | na 16 16 |        |             |                 ; and so we don't have to fool around with the stack
1834:000 | DONE ins | na 16 16 | 006569 | 18          |                 clc                  
1835:000 | DONE ins | na 16 16 | 00656a | 65 00       |                 adc.d 000200         
1836:000 | DONE ins | na 16 16 | 00656c | 85 00       |                 sta.d 000200         
1837:000 | DONE wsp | na 16 16 |        |             |
1838:000 | DONE cmt | na 16 16 |        |             |                 ; Now we walk through the header, using Y as the index. See
1839:000 | DONE cmt | na 16 16 |        |             |                 ; drawing of header in headers.tasm file for reference. We
1840:000 | DONE cmt | na 16 16 |        |             |                 ; arrive here with ( addr u ) still from PARSE-NAME. We need
1841:000 | DONE cmt | na 16 16 |        |             |                 ; that addr later for the name string, so we push it to the
1842:000 | DONE cmt | na 16 16 |        |             |                 ; Return Stack. We'll clean up the Data Stack later
1843:000 | DONE ins | na 16 16 | 00656e | b5 00       |                 lda.dx 00            
1844:000 | DONE ins | na 16 16 | 006570 | 48          |                 pha                  
1845:000 | DONE wsp | na 16 16 |        |             |
1846:000 | DONE cmt | na 16 16 |        |             |                 ; HEADER BYTES 0,1: Length byte and flags
1847:000 | DONE ins | na 16 16 | 006571 | a0 00 00    |                 ldy.# 0000           Y is now an index, not TOS
1848:000 | DONE ins | na 16 16 | 006574 | a5 18       |                 lda.d 000218         get length byte
1849:000 | DONE ins | na 16 16 | 006576 | 91 16       |                 sta.diy 000216       STA (TMP1),Y
1850:000 | DONE ins | na 16 16 | 006578 | c8          |                 iny                  
1851:000 | DONE ins | na 16 16 | 006579 | c8          |                 iny                  
1852:000 | DONE wsp | na 16 16 |        |             |
1853:000 | DONE cmt | na 16 16 |        |             |                 ; BYTES 2,3: Next word in the dictionary (its nt). This is the
1854:000 | DONE cmt | na 16 16 |        |             |                 ; current Dictionary Pointer
1855:000 | DONE ins | na 16 16 | 00657a | a5 02       |                 lda.d 000202         
1856:000 | DONE ins | na 16 16 | 00657c | 91 16       |                 sta.diy 000216       
1857:000 | DONE ins | na 16 16 | 00657e | c8          |                 iny                  
1858:000 | DONE ins | na 16 16 | 00657f | c8          |                 iny                  
1859:000 | DONE wsp | na 16 16 |        |             |
1860:000 | DONE cmt | na 16 16 |        |             |                 ; BYTES 4,5: Start of code field (xt of this word, "xt_" link)
1861:000 | DONE cmt | na 16 16 |        |             |                 ; This begins after the header, so we take the length of the
1862:000 | DONE cmt | na 16 16 |        |             |                 ; header, which we saved in tmp3, and use it as an offset to
1863:000 | DONE cmt | na 16 16 |        |             |                 ; the address of the start of the word
1864:000 | DONE ins | na 16 16 | 006580 | a5 16       |                 lda.d 000216         can't use CP, because we've allotted space
1865:000 | DONE ins | na 16 16 | 006582 | 85 02       |                 sta.d 000202         while we've got it, make old CP the new DP
1866:000 | DONE wsp | na 16 16 |        |             |
1867:000 | DONE ins | na 16 16 | 006584 | 18          |                 clc                  
1868:000 | DONE ins | na 16 16 | 006585 | 65 1a       |                 adc.d 00021a         total header length
1869:000 | DONE ins | na 16 16 | 006587 | 91 16       |                 sta.diy 000216       
1870:000 | DONE ins | na 16 16 | 006589 | c8          |                 iny                  
1871:000 | DONE ins | na 16 16 | 00658a | c8          |                 iny                  
1872:000 | DONE wsp | na 16 16 |        |             |
1873:000 | DONE cmt | na 16 16 |        |             |                 ; BYTES 6,7: End of code ("z_" link)
1874:000 | DONE cmt | na 16 16 |        |             |                 ; By default, we execute a jump to the DOVAR routine, so we need
1875:000 | DONE cmt | na 16 16 |        |             |                 ; to move three bytes down, and then one more byte so the z_
1876:000 | DONE cmt | na 16 16 |        |             |                 ; label points to the (fictional) RTS instruction for correct
1877:000 | DONE cmt | na 16 16 |        |             |                 ; compilation. The start of the code field is still in A
1878:000 | DONE ins | na 16 16 | 00658b | 1a          |                 inc.a                
1879:000 | DONE ins | na 16 16 | 00658c | 1a          |                 inc.a                
1880:000 | DONE ins | na 16 16 | 00658d | 1a          |                 inc.a                
1881:000 | DONE ins | na 16 16 | 00658e | 91 16       |                 sta.diy 000216       
1882:000 | DONE ins | na 16 16 | 006590 | c8          |                 iny                  
1883:000 | DONE ins | na 16 16 | 006591 | c8          |                 iny                  
1884:000 | DONE wsp | na 16 16 |        |             |
1885:000 | DONE cmt | na 16 16 |        |             |                 ; BYTE 8: Start of name string
1886:000 | DONE cmt | na 16 16 |        |             |                 ; The addr of the string is on the Return Stack, the length of
1887:000 | DONE cmt | na 16 16 |        |             |                 ; the name string is in tmp2. We subtract eight from the address
1888:000 | DONE cmt | na 16 16 |        |             |                 ; so we can use the same loop index
1889:000 | DONE ins | na 16 16 | 006592 | 68          |                 pla                  get back string address
1890:000 | DONE ins | na 16 16 | 006593 | 38          |                 sec                  
1891:000 | DONE ins | na 16 16 | 006594 | e9 08 00    |                 sbc.# 0008           
1892:000 | DONE ins | na 16 16 | 006597 | 85 1a       |                 sta.d 00021a         
1893:000 | DONE ins | na 16 16 | 006599 | e2 20       |                 sep 20               
1893:001 | DONE ctl | na  8 16 |        |             |         .!a8
1894:000 | DONE lbl | na  8 16 | 00659b |             | @                                    
1895:000 | DONE ins | na  8 16 | 00659b | b1 1a       |                 lda.diy 00021a       
1896:000 | DONE ins | na  8 16 | 00659d | 91 16       |                 sta.diy 000216       
1897:000 | DONE ins | na  8 16 | 00659f | c8          |                 iny                  
1898:000 | DONE ins | na  8 16 | 0065a0 | c6 18       |                 dec.d 000218         
1899:000 | DONE ins | na  8 16 | 0065a2 | d0 f7       |                 bne 00659b           
1900:000 | DONE wsp | na  8 16 |        |             |
1901:000 | DONE cmt | na  8 16 |        |             |                 ; After the name string, comes the Code Field (start at xt, that
1902:000 | DONE cmt | na  8 16 |        |             |                 ; is, the xt_ label of the word) which is initially a jump to the
1903:000 | DONE cmt | na  8 16 |        |             |                 ; subroutine to DOVAR. We're still in 8-bit A-register, which is
1904:000 | DONE cmt | na  8 16 |        |             |                 ; good
1905:000 | DONE ins | na  8 16 | 0065a4 | a9 20       |                 lda.# 20             opcode of JSR
1906:000 | DONE ins | na  8 16 | 0065a6 | 91 16       |                 sta.diy 000216       
1907:000 | DONE ins | na  8 16 | 0065a8 | c8          |                 iny                  single increase only because we have 8-bit A
1908:000 | DONE wsp | na  8 16 |        |             |
1909:000 | DONE ins | na  8 16 | 0065a9 | a9 63       |                 lda.# .lsb 007263    
1910:000 | DONE ins | na  8 16 | 0065ab | 91 16       |                 sta.diy 000216       
1911:000 | DONE ins | na  8 16 | 0065ad | c8          |                 iny                  
1912:000 | DONE wsp | na  8 16 |        |             |
1913:000 | DONE ins | na  8 16 | 0065ae | a9 72       |                 lda.# .msb 007263    
1914:000 | DONE ins | na  8 16 | 0065b0 | 91 16       |                 sta.diy 000216       
1915:000 | DONE wsp | na  8 16 |        |             |
1916:000 | DONE ins | na  8 16 | 0065b2 | c2 20       |                 rep 20               
1916:001 | DONE ctl | na 16 16 |        |             |         .!a16
1917:000 | DONE cmt | na 16 16 |        |             |                 ; We're done. Restore Data Stack (2DROP)
1918:000 | DONE ins | na 16 16 | 0065b4 | b4 02       |                 ldy.dx 02            
1919:000 | DONE ins | na 16 16 | 0065b6 | e8          |                 inx                  
1920:000 | DONE ins | na 16 16 | 0065b7 | e8          |                 inx                  
1921:000 | DONE ins | na 16 16 | 0065b8 | e8          |                 inx                  
1922:000 | DONE ins | na 16 16 | 0065b9 | e8          |                 inx                  
1923:000 | DONE wsp | na 16 16 |        |             |
1924:000 | DONE lbl | na 16 16 | 0065ba |             | z_create                             
1924:001 | DONE ins | na 16 16 | 0065ba | 60          |                 rts                  
1925:000 | DONE wsp | na 16 16 |        |             |
1926:000 | DONE wsp | na 16 16 |        |             |
1927:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1928:000 | DONE cmt | na 16 16 |        |             | ; DIGIT? ( char -- u f | char f )  X bytes / X cycles
1929:000 | DONE cmt | na 16 16 |        |             | ; Convert a single ASCII character to a number in the current radix. Inspired by
1930:000 | DONE cmt | na 16 16 |        |             | ; the pForth instruction DIGIT in pForth, see
1931:000 | DONE cmt | na 16 16 |        |             | ; https://github.com/philburk/pforth/blob/master/fth/numberio.fth
1932:000 | DONE cmt | na 16 16 |        |             | ; Rewritten from DIGIT>NUMBER in Tali Forth. Note in contrast to pForth, we get
1933:000 | DONE cmt | na 16 16 |        |             | ; the base (radix) ourselves instead of having the user provide it. There is no
1934:000 | DONE cmt | na 16 16 |        |             | ; standard name for this routine, which itself is not ANSI; we use DIGIT?
1935:000 | DONE cmt | na 16 16 |        |             | ; following pForth and Gforth.
1936:000 | DONE lbl | na 16 16 | 0065bb |             | xt_digitq                            
1937:000 | DONE dir | na 16 16 |        |             |         .!a16                        
1938:000 | DONE ins | na 16 16 | 0065bb | 98          |                 tya                  
1939:000 | DONE ins | na 16 16 | 0065bc | 29 ff 00    |                 and.# 00ff           paranoid
1940:000 | DONE wsp | na 16 16 |        |             |
1941:000 | DONE ins | na 16 16 | 0065bf | e2 20       |                 sep 20               
1941:001 | DONE ctl | na  8 16 |        |             |         .!a8
1942:000 | DONE cmt | na  8 16 |        |             |                 ; Make sure we're not below the ASCII code for '0'
1943:000 | DONE ins | na  8 16 | 0065c1 | c9 30       |                 cmp.# 30             
1944:000 | DONE ins | na  8 16 | 0065c3 | 90 1d       |                 bcc 0065e2           
1945:000 | DONE wsp | na  8 16 |        |             |
1946:000 | DONE cmt | na  8 16 |        |             |                 ; Then see if we are below '9', because that would make this
1947:000 | DONE cmt | na  8 16 |        |             |                 ; a normal number
1948:000 | DONE ins | na  8 16 | 0065c5 | c9 3a       |                 cmp.# 00003a         This is ':'
1949:000 | DONE ins | na  8 16 | 0065c7 | 90 12       |                 bcc 0065db           
1950:000 | DONE wsp | na  8 16 |        |             |
1951:000 | DONE cmt | na  8 16 |        |             |                 ; Well, then let's see if this is the gap between '9' and 'A' so
1952:000 | DONE cmt | na  8 16 |        |             |                 ; we can treat the whole range as a number
1953:000 | DONE ins | na  8 16 | 0065c9 | c9 40       |                 cmp.# 000040         This is '@'
1954:000 | DONE ins | na  8 16 | 0065cb | 90 15       |                 bcc 0065e2           
1955:000 | DONE wsp | na  8 16 |        |             |
1956:000 | DONE cmt | na  8 16 |        |             |                 ; Probably a letter, so we make sure it is uppercase
1957:000 | DONE ins | na  8 16 | 0065cd | c9 61       |                 cmp.# 61             
1958:000 | DONE ins | na  8 16 | 0065cf | 90 07       |                 bcc 0065d8           not lower case, too low
1959:000 | DONE ins | na  8 16 | 0065d1 | c9 7b       |                 cmp.# 00007b         
1960:000 | DONE ins | na  8 16 | 0065d3 | b0 03       |                 bcs 0065d8           not lower case, too high
1961:000 | DONE wsp | na  8 16 |        |             |
1962:000 | DONE ins | na  8 16 | 0065d5 | 18          |                 clc                  just right
1963:000 | DONE ins | na  8 16 | 0065d6 | 69 e0       |                 adc.# e0             offset to uppercase (wraps)
1964:000 | DONE wsp | na  8 16 |        |             |
1965:000 | DONE lbl | na  8 16 | 0065d8 |             | dq_case_done                         
1966:000 | DONE cmt | na  8 16 |        |             |                 ; Get rid of the gap between '9' and 'A' so we can treat the
1967:000 | DONE cmt | na  8 16 |        |             |                 ; whole range as one number
1968:000 | DONE ins | na  8 16 | 0065d8 | 38          |                 sec                  
1969:000 | DONE ins | na  8 16 | 0065d9 | e9 07       |                 sbc.# 07             fall through to dq_checkbase
1970:000 | DONE wsp | na  8 16 |        |             |
1971:000 | DONE lbl | na  8 16 | 0065db |             | dq_checkbase                         
1972:000 | DONE cmt | na  8 16 |        |             |                 ; We have a number, now see if it inside the range given by BASE
1973:000 | DONE ins | na  8 16 | 0065db | 38          |                 sec                  
1974:000 | DONE ins | na  8 16 | 0065dc | e9 30       |                 sbc.# 30             This is also the actual conversion step
1975:000 | DONE ins | na  8 16 | 0065de | c5 1c       |                 cmp.d 00021c         
1976:000 | DONE ins | na  8 16 | 0065e0 | 90 0b       |                 bcc 0065ed           
1977:000 | DONE wsp | na  8 16 |        |             |
1978:000 | DONE lbl | na  8 16 | 0065e2 |             | dq_notdigit                          
1979:000 | DONE cmt | na  8 16 |        |             |                 ; not a digit, add a false flag
1980:000 | DONE ins | na  8 16 | 0065e2 | ca          |                 dex                  
1981:000 | DONE ins | na  8 16 | 0065e3 | ca          |                 dex                  
1982:000 | DONE ins | na  8 16 | 0065e4 | 94 00       |                 sty.dx 00            keep the offending character in NOS
1983:000 | DONE ins | na  8 16 | 0065e6 | a0 00 00    |                 ldy.# 0000           
1984:000 | DONE ins | na  8 16 | 0065e9 | c2 20       |                 rep 20               
1984:001 | DONE ctl | na 16 16 |        |             |         .!a16
1985:000 | DONE ins | na 16 16 | 0065eb | 80 09       |                 bra 0065f6           
1986:000 | DONE wsp | na 16 16 |        |             |
1987:000 | DONE lbl | na 16 16 | 0065ed |             | dq_success                           
1988:000 | DONE ins | na 16 16 | 0065ed | ca          |                 dex                  
1989:000 | DONE ins | na 16 16 | 0065ee | ca          |                 dex                  
1990:000 | DONE ins | na 16 16 | 0065ef | c2 20       |                 rep 20               
1990:001 | DONE ctl | na 16 16 |        |             |         .!a16
1991:000 | DONE ins | na 16 16 | 0065f1 | 95 00       |                 sta.dx 00            put the number in NOS
1992:000 | DONE ins | na 16 16 | 0065f3 | a0 ff ff    |                 ldy.# 0ffff          
1993:000 | DONE wsp | na 16 16 |        |             |
1994:000 | DONE lbl | na 16 16 | 0065f6 |             | z_digitq                             
1994:001 | DONE ins | na 16 16 | 0065f6 | 60          |                 rts                  
1995:000 | DONE wsp | na 16 16 |        |             |
1996:000 | DONE wsp | na 16 16 |        |             |
1997:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1998:000 | DONE cmt | na 16 16 |        |             | ; DPLUS ( d d -- d ) X bytes / X cycles
1999:000 | DONE cmt | na 16 16 |        |             | ; Add two double cell numbers.
2000:000 | DONE lbl | na 16 16 | 0065f7 |             | xt_dplus                             
2001:000 | DONE dir | na 16 16 |        |             |         .!a16                        
2002:000 | DONE ins | na 16 16 | 0065f7 | 5a          |                 phy                  save hi word of first number, frees Y
2003:000 | DONE ins | na 16 16 | 0065f8 | b5 00       |                 lda.dx 00            lo word of first number
2004:000 | DONE ins | na 16 16 | 0065fa | 18          |                 clc                  
2005:000 | DONE ins | na 16 16 | 0065fb | 75 04       |                 adc.dx 04            add lo word of second number
2006:000 | DONE ins | na 16 16 | 0065fd | a8          |                 tay                  
2007:000 | DONE wsp | na 16 16 |        |             |
2008:000 | DONE ins | na 16 16 | 0065fe | 68          |                 pla                  get hi word of first number
2009:000 | DONE ins | na 16 16 | 0065ff | 75 02       |                 adc.dx 02            add hi word of second number
2010:000 | DONE wsp | na 16 16 |        |             |
2011:000 | DONE ins | na 16 16 | 006601 | e8          |                 inx                  
2012:000 | DONE ins | na 16 16 | 006602 | e8          |                 inx                  
2013:000 | DONE ins | na 16 16 | 006603 | e8          |                 inx                  
2014:000 | DONE ins | na 16 16 | 006604 | e8          |                 inx                  
2015:000 | DONE wsp | na 16 16 |        |             |
2016:000 | DONE ins | na 16 16 | 006605 | 94 00       |                 sty.dx 00            lo result goes NOS
2017:000 | DONE ins | na 16 16 | 006607 | a8          |                 tay                  to result goes TOS
2018:000 | DONE wsp | na 16 16 |        |             |
2019:000 | DONE lbl | na 16 16 | 006608 |             | z_dplus                              
2019:001 | DONE ins | na 16 16 | 006608 | 60          |                 rts                  
2020:000 | DONE wsp | na 16 16 |        |             |
2021:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
2022:000 | DONE cmt | na 16 16 |        |             | ; D>S ( ud -- u ) X bytes / X cycles
2023:000 | DONE cmt | na 16 16 |        |             | ; Convert double cell number to single cell. Note this currently does not
2024:000 | DONE cmt | na 16 16 |        |             | ; respect the sign, in constrast to Gforth - this is simply DROP
2025:000 | DONE cmt | na 16 16 |        |             | ; TODO make this work the way Gforth's does
2026:000 | DONE lbl | na 16 16 | 006609 |             | xt_dtos                              
2027:000 | DONE dir | na 16 16 |        |             |         .!a16                        
2028:000 | DONE ins | na 16 16 | 006609 | b4 00       |                 ldy.dx 00            
2029:000 | DONE ins | na 16 16 | 00660b | e8          |                 inx                  
2030:000 | DONE ins | na 16 16 | 00660c | e8          |                 inx                  
2031:000 | DONE wsp | na 16 16 |        |             |
2032:000 | DONE lbl | na 16 16 | 00660d |             | z_dtos                               
2032:001 | DONE ins | na 16 16 | 00660d | 60          |                 rts                  
2033:000 | DONE wsp | na 16 16 |        |             |
2034:000 | DONE wsp | na 16 16 |        |             |
2035:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
2036:000 | DONE cmt | na 16 16 |        |             | ; DABS ( d -- ud ) X bytes / X cycles
2037:000 | DONE cmt | na 16 16 |        |             | ; Return the absolute value of a double number
2038:000 | DONE cmt | na 16 16 |        |             | ; TODO recode in assembler
2039:000 | DONE lbl | na 16 16 | 00660e |             | xt_dabs                              
2040:000 | DONE cmt | na 16 16 |        |             |                 ; double cell is TOS
2041:000 | DONE ins | na 16 16 | 00660e | 98          |                 tya                  force flag test
2042:000 | DONE ins | na 16 16 | 00660f | f0 03       |                 beq 006614           already positive, life is good
2043:000 | DONE wsp | na 16 16 |        |             |
2044:000 | DONE ins | na 16 16 | 006611 | 20 2a 66    |                 jsr 00662a           
2045:000 | DONE wsp | na 16 16 |        |             |
2046:000 | DONE lbl | na 16 16 | 006614 |             | z_dabs                               
2046:001 | DONE ins | na 16 16 | 006614 | 60          |                 rts                  
2047:000 | DONE wsp | na 16 16 |        |             |
2048:000 | DONE wsp | na 16 16 |        |             |
2049:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
2050:000 | DONE cmt | na 16 16 |        |             | ; DECIMAL ( -- ) 7 bytes / X cycles
2051:000 | DONE cmt | na 16 16 |        |             | ; Change radix for number conversion to 10
2052:000 | DONE lbl | na 16 16 | 006615 |             | xt_decimal                           
2053:000 | DONE dir | na 16 16 |        |             |         .!a16                        
2054:000 | DONE ins | na 16 16 | 006615 | a9 0a 00    |                 lda.# 000a           
2055:000 | DONE ins | na 16 16 | 006618 | 85 1c       |                 sta.d 00021c         
2056:000 | DONE wsp | na 16 16 |        |             |
2057:000 | DONE lbl | na 16 16 | 00661a |             | z_decimal                            
2057:001 | DONE ins | na 16 16 | 00661a | 60          |                 rts                  
2058:000 | DONE wsp | na 16 16 |        |             |
2059:000 | DONE wsp | na 16 16 |        |             |
2060:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
2061:000 | DONE cmt | na 16 16 |        |             | ; DEPTH ( -- u ) 14 bytes / X cycles
2062:000 | DONE cmt | na 16 16 |        |             | ; Push the number of entries in cells (not bytes) on the parameter stack.
2063:000 | DONE cmt | na 16 16 |        |             | ; Assumes X is valid as the DSP.
2064:000 | DONE lbl | na 16 16 | 00661b |             | xt_depth                             
2065:000 | DONE dir | na 16 16 |        |             |         .!a16                        
2066:000 | DONE cmt | na 16 16 |        |             |                 ; We've got zero entries when X is dsp0
2067:000 | DONE ins | na 16 16 | 00661b | 86 04       |                 stx.d 000204         
2068:000 | DONE ins | na 16 16 | 00661d | a9 f8 02    |                 lda.# 0002f8         
2069:000 | DONE ins | na 16 16 | 006620 | 38          |                 sec                  
2070:000 | DONE ins | na 16 16 | 006621 | e5 04       |                 sbc.d 000204         
2071:000 | DONE wsp | na 16 16 |        |             |
2072:000 | DONE cmt | na 16 16 |        |             |                 ; now divide by two because each cells is to bytes long
2073:000 | DONE ins | na 16 16 | 006623 | 4a          |                 lsr.a                
2074:000 | DONE wsp | na 16 16 |        |             |
2075:000 | DONE ins | na 16 16 | 006624 | ca          |                 dex                  
2076:000 | DONE ins | na 16 16 | 006625 | ca          |                 dex                  
2077:000 | DONE ins | na 16 16 | 006626 | 94 00       |                 sty.dx 00            
2078:000 | DONE wsp | na 16 16 |        |             |
2079:000 | DONE cmt | na 16 16 |        |             |                 ; push result to stack
2080:000 | DONE ins | na 16 16 | 006628 | a8          |                 tay                  
2081:000 | DONE wsp | na 16 16 |        |             |
2082:000 | DONE lbl | na 16 16 | 006629 |             | z_depth                              
2082:001 | DONE ins | na 16 16 | 006629 | 60          |                 rts                  
2083:000 | DONE wsp | na 16 16 |        |             |
2084:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
2085:000 | DONE cmt | na 16 16 |        |             | ; DNEGATE ( d -- d ) 19 bytes / X cycles
2086:000 | DONE cmt | na 16 16 |        |             | ; Change the sign of a double number. This is the double equivalent of NEGATE
2087:000 | DONE lbl | na 16 16 | 00662a |             | xt_dnegate                           
2088:000 | DONE dir | na 16 16 |        |             |         .!a16                        
2089:000 | DONE cmt | na 16 16 |        |             |                 ; start off with LSW (in NOS)
2090:000 | DONE ins | na 16 16 | 00662a | b5 00       |                 lda.dx 00            
2091:000 | DONE ins | na 16 16 | 00662c | 49 ff ff    |                 eor.# 0ffff          
2092:000 | DONE wsp | na 16 16 |        |             |
2093:000 | DONE cmt | na 16 16 |        |             |                 ; INC doesn't affect the carry flag, so we have to do this the
2094:000 | DONE cmt | na 16 16 |        |             |                 ; hard way
2095:000 | DONE ins | na 16 16 | 00662f | 18          |                 clc                  
2096:000 | DONE ins | na 16 16 | 006630 | 69 01 00    |                 adc.# 0001           
2097:000 | DONE ins | na 16 16 | 006633 | 95 00       |                 sta.dx 00            
2098:000 | DONE wsp | na 16 16 |        |             |
2099:000 | DONE cmt | na 16 16 |        |             |                 ; now MSW (in TOS)
2100:000 | DONE ins | na 16 16 | 006635 | 98          |                 tya                  
2101:000 | DONE ins | na 16 16 | 006636 | 49 ff ff    |                 eor.# 0ffff          
2102:000 | DONE ins | na 16 16 | 006639 | 69 00 00    |                 adc.# 0000           we are only interested in the carry
2103:000 | DONE ins | na 16 16 | 00663c | a8          |                 tay                  
2104:000 | DONE wsp | na 16 16 |        |             |
2105:000 | DONE lbl | na 16 16 | 00663d |             | z_dnegate                            
2105:001 | DONE ins | na 16 16 | 00663d | 60          |                 rts                  
2106:000 | DONE wsp | na 16 16 |        |             |
2107:000 | DONE wsp | na 16 16 |        |             |
2108:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
2109:000 | DONE cmt | na 16 16 |        |             | ; DOES> ( -- ) X bytes / X cycles
2110:000 | DONE cmt | na 16 16 |        |             | ; Create the payload for defining new defining words. See the file
2111:000 | DONE cmt | na 16 16 |        |             | ; docs/create-does.txt and
2112:000 | DONE cmt | na 16 16 |        |             | ; http://www.bradrodriguez.com/papers/moving3.htm for a discussion of
2113:000 | DONE cmt | na 16 16 |        |             | ; DOES>'s internal workings. This uses tmp1 and tmp2
2114:000 | DONE lbl | na 16 16 | 00663e |             | xt_does                              
2115:000 | DONE cmt | na 16 16 |        |             |                 ; compile a subroutine jump to the runtime of DOES>
2116:000 | DONE ins | na 16 16 | 00663e | f4 4b 66    |                 phe.# 00664b         
2117:000 | DONE ins | na 16 16 | 006641 | 20 c4 72    |                 jsr 0072c4           
2118:000 | DONE wsp | na 16 16 |        |             |
2119:000 | DONE cmt | na 16 16 |        |             |                 ; compile a subroutine jump to DODOES. In traditional terms,
2120:000 | DONE cmt | na 16 16 |        |             |                 ; this is the Code Field Area (CFA) of the new word
2121:000 | DONE ins | na 16 16 | 006644 | f4 56 72    |                 phe.# 007256         
2122:000 | DONE ins | na 16 16 | 006647 | 20 c4 72    |                 jsr 0072c4           
2123:000 | DONE wsp | na 16 16 |        |             |
2124:000 | DONE lbl | na 16 16 | 00664a |             | z_does                               
2124:001 | DONE ins | na 16 16 | 00664a | 60          |                 rts                  
2125:000 | DONE wsp | na 16 16 |        |             |
2126:000 | DONE lbl | na 16 16 | 00664b |             | does_rt                              
2127:000 | DONE cmt | na 16 16 |        |             |                 ; Runtime portion of DOES>. This replaces the subroutine jump to
2128:000 | DONE cmt | na 16 16 |        |             |                 ; DOVAR that CREATE automatically encodes by a jump to the
2129:000 | DONE cmt | na 16 16 |        |             |                 ; address that contains a subroutine jump to DODOES. We don't
2130:000 | DONE cmt | na 16 16 |        |             |                 ; jump to DODOES directly because we need to work our magic with
2131:000 | DONE cmt | na 16 16 |        |             |                 ; the return addresses
2132:000 | DONE ins | na 16 16 | 00664b | 68          |                 pla                  
2133:000 | DONE ins | na 16 16 | 00664c | 1a          |                 inc.a                increase by one because of RTS mechanics
2134:000 | DONE ins | na 16 16 | 00664d | 85 16       |                 sta.d 000216         
2135:000 | DONE wsp | na 16 16 |        |             |
2136:000 | DONE cmt | na 16 16 |        |             |                 ; CREATE has also already modified the DP to point to the new
2137:000 | DONE cmt | na 16 16 |        |             |                 ; word. We have no idea which instructions followed the CREATE
2138:000 | DONE cmt | na 16 16 |        |             |                 ; command if there is a DOES> so the CP could point anywhere by
2139:000 | DONE cmt | na 16 16 |        |             |                 ; now.
2140:000 | DONE ins | na 16 16 | 00664f | a5 02       |                 lda.d 000202         
2141:000 | DONE wsp | na 16 16 |        |             |
2142:000 | DONE cmt | na 16 16 |        |             |                 ; The address of the word's xt is four bytes down (see
2143:000 | DONE cmt | na 16 16 |        |             |                 ; header.tasm for details).
2144:000 | DONE ins | na 16 16 | 006651 | 18          |                 clc                  
2145:000 | DONE ins | na 16 16 | 006652 | 69 04 00    |                 adc.# 0004           
2146:000 | DONE ins | na 16 16 | 006655 | 85 18       |                 sta.d 000218         
2147:000 | DONE wsp | na 16 16 |        |             |
2148:000 | DONE cmt | na 16 16 |        |             |                 ; Now we get that address and add one byte to skip over the JSR
2149:000 | DONE cmt | na 16 16 |        |             |                 ; opcode
2150:000 | DONE ins | na 16 16 | 006657 | b2 18       |                 lda.di 000218        LDA (TMP2)
2151:000 | DONE ins | na 16 16 | 006659 | 1a          |                 inc.a                
2152:000 | DONE ins | na 16 16 | 00665a | 85 18       |                 sta.d 000218         Points to address to be replaced
2153:000 | DONE wsp | na 16 16 |        |             |
2154:000 | DONE cmt | na 16 16 |        |             |                 ; Replace the DOVAR address
2155:000 | DONE ins | na 16 16 | 00665c | a5 16       |                 lda.d 000216         
2156:000 | DONE ins | na 16 16 | 00665e | 92 18       |                 sta.di 000218        STA (TMP2)
2157:000 | DONE wsp | na 16 16 |        |             |
2158:000 | DONE cmt | na 16 16 |        |             |                 ; Since we removed the return address that brought us here, we
2159:000 | DONE cmt | na 16 16 |        |             |                 ; go back to whatever the main routine was. Otherwise, we we
2160:000 | DONE cmt | na 16 16 |        |             |                 ; smash into the subroutine jump to DODOES.
2161:000 | DONE ins | na 16 16 | 006660 | 60          |                 rts                  
2162:000 | DONE wsp | na 16 16 |        |             |
2163:000 | DONE wsp | na 16 16 |        |             |
2164:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
2165:000 | DONE cmt | na 16 16 |        |             | ; DROP ( n -- ) 4 bytes / 9 cycles
2166:000 | DONE cmt | na 16 16 |        |             | ; Drop first entry on Data Stack
2167:000 | DONE wsp | na 16 16 |        |             |
2168:000 | DONE lbl | na 16 16 | 006661 |             | xt_drop                              
2169:000 | DONE dir | na 16 16 |        |             |         .!xy16                       
2170:000 | DONE ins | na 16 16 | 006661 | b4 00       |                 ldy.dx 00            
2171:000 | DONE ins | na 16 16 | 006663 | e8          |                 inx                  
2172:000 | DONE ins | na 16 16 | 006664 | e8          |                 inx                  
2173:000 | DONE wsp | na 16 16 |        |             |
2174:000 | DONE lbl | na 16 16 | 006665 |             | z_drop                               
2174:001 | DONE ins | na 16 16 | 006665 | 60          |                 rts                  
2175:000 | DONE wsp | na 16 16 |        |             |
2176:000 | DONE wsp | na 16 16 |        |             |
2177:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
2178:000 | DONE cmt | na 16 16 |        |             | ; DUMP ( addr u -- ) X bytes / X cycles
2179:000 | DONE cmt | na 16 16 |        |             | ; Print region of memory in a pretty way.
2180:000 | DONE cmt | na 16 16 |        |             | ; TODO This is a crude, temporary version for testing. Rewrite ASAP
2181:000 | DONE lbl | na 16 16 | 006666 |             | xt_dump                              
2182:000 | DONE cmt | na 16 16 |        |             |                 ; we use tmp1 as a counter because we need Y for other
2183:000 | DONE cmt | na 16 16 |        |             |                 ; stuff
2184:000 | DONE ins | na 16 16 | 006666 | 84 16       |                 sty.d 000216         
2185:000 | DONE wsp | na 16 16 |        |             |
2186:000 | DONE lbl | na 16 16 | 006668 |             | dump_line_loop                       
2187:000 | DONE ins | na 16 16 | 006668 | 20 41 65    |                 jsr 006541           
2188:000 | DONE wsp | na 16 16 |        |             |
2189:000 | DONE cmt | na 16 16 |        |             |                 ; start internal counter for 16 numbers per row
2190:000 | DONE ins | na 16 16 | 00666b | a0 10 00    |                 ldy.# 0010           
2191:000 | DONE lbl | na 16 16 | 00666e |             | dump_byte_loop                       
2192:000 | DONE cmt | na 16 16 |        |             |                 ; if there are zero bytes left to display, we're done
2193:000 | DONE ins | na 16 16 | 00666e | a5 16       |                 lda.d 000216         
2194:000 | DONE ins | na 16 16 | 006670 | f0 11       |                 beq 006683           
2195:000 | DONE wsp | na 16 16 |        |             |
2196:000 | DONE cmt | na 16 16 |        |             |                 ; otherwise, print contents pointed to by address in NOS
2197:000 | DONE ins | na 16 16 | 006672 | a1 00       |                 lda.dxi 00           
2198:000 | DONE ins | na 16 16 | 006674 | 20 03 73    |                 jsr 007303           TODO replace by EMIT
2199:000 | DONE ins | na 16 16 | 006677 | 20 38 6a    |                 jsr 006a38           
2200:000 | DONE wsp | na 16 16 |        |             |
2201:000 | DONE cmt | na 16 16 |        |             |                 ; next character
2202:000 | DONE ins | na 16 16 | 00667a | f6 00       |                 inc.dx 00            
2203:000 | DONE wsp | na 16 16 |        |             |
2204:000 | DONE cmt | na 16 16 |        |             |                 ; loop counter
2205:000 | DONE ins | na 16 16 | 00667c | c6 16       |                 dec.d 000216         
2206:000 | DONE ins | na 16 16 | 00667e | 88          |                 dey                  
2207:000 | DONE ins | na 16 16 | 00667f | d0 ed       |                 bne 00666e           
2208:000 | DONE ins | na 16 16 | 006681 | 80 e5       |                 bra 006668           
2209:000 | DONE wsp | na 16 16 |        |             |
2210:000 | DONE lbl | na 16 16 | 006683 |             | dump_done                            
2211:000 | DONE ins | na 16 16 | 006683 | 20 41 65    |                 jsr 006541           
2212:000 | DONE wsp | na 16 16 |        |             |
2213:000 | DONE cmt | na 16 16 |        |             |                 ; drop everything and return
2214:000 | DONE cmt | na 16 16 |        |             |                 ; TODO replace by call of 2DROP
2215:000 | DONE ins | na 16 16 | 006686 | b4 02       |                 ldy.dx 02            
2216:000 | DONE ins | na 16 16 | 006688 | e8          |                 inx                  
2217:000 | DONE ins | na 16 16 | 006689 | e8          |                 inx                  
2218:000 | DONE ins | na 16 16 | 00668a | e8          |                 inx                  
2219:000 | DONE ins | na 16 16 | 00668b | e8          |                 inx                  
2220:000 | DONE wsp | na 16 16 |        |             |
2221:000 | DONE lbl | na 16 16 | 00668c |             | z_dump                               
2221:001 | DONE ins | na 16 16 | 00668c | 60          |                 rts                  
2222:000 | DONE wsp | na 16 16 |        |             |
2223:000 | DONE wsp | na 16 16 |        |             |
2224:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
2225:000 | DONE cmt | na 16 16 |        |             | ; DUP  ( n -- n n ) 4 bytes / 9 cycles
2226:000 | DONE cmt | na 16 16 |        |             | ; Duplicate first entry on Data Stack
2227:000 | DONE wsp | na 16 16 |        |             |
2228:000 | DONE lbl | na 16 16 | 00668d |             | xt_dup                               
2229:000 | DONE dir | na 16 16 |        |             |         .!xy16                       
2230:000 | DONE ins | na 16 16 | 00668d | ca          |                 dex                  
2231:000 | DONE ins | na 16 16 | 00668e | ca          |                 dex                  
2232:000 | DONE ins | na 16 16 | 00668f | 94 00       |                 sty.dx 00            
2233:000 | DONE wsp | na 16 16 |        |             |
2234:000 | DONE lbl | na 16 16 | 006691 |             | z_dup                                
2234:001 | DONE ins | na 16 16 | 006691 | 60          |                 rts                  
2235:000 | DONE wsp | na 16 16 |        |             |
2236:000 | DONE wsp | na 16 16 |        |             |
2237:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
2238:000 | DONE cmt | na 16 16 |        |             | ; EVALUATE ( addr u -- ) X bytes / X cycles
2239:000 | DONE cmt | na 16 16 |        |             | ; Execute string. Set SOURCE-ID to -1, make addr u the input source,
2240:000 | DONE cmt | na 16 16 |        |             | ; set >IN to zero. After processing the line, revert to old input source.
2241:000 | DONE lbl | na 16 16 | 006692 |             | xt_evaluate                          
2242:000 | DONE cmt | na 16 16 |        |             |                 ; We follow pforth's procedure of pushing SOURCE, SOURCE-ID, and
2243:000 | DONE cmt | na 16 16 |        |             |                 ; >IN to the Return Stack
2244:000 | DONE ins | na 16 16 | 006692 | a5 12       |                 lda.d 000212         >IN
2245:000 | DONE ins | na 16 16 | 006694 | 48          |                 pha                  
2246:000 | DONE ins | na 16 16 | 006695 | a5 0a       |                 lda.d 00020a         Input Source (SOURCE-ID)
2247:000 | DONE ins | na 16 16 | 006697 | 48          |                 pha                  
2248:000 | DONE ins | na 16 16 | 006698 | a5 0c       |                 lda.d 00020c         
2249:000 | DONE ins | na 16 16 | 00669a | 48          |                 pha                  
2250:000 | DONE ins | na 16 16 | 00669b | a5 0e       |                 lda.d 00020e         
2251:000 | DONE ins | na 16 16 | 00669d | 48          |                 pha                  
2252:000 | DONE wsp | na 16 16 |        |             |
2253:000 | DONE cmt | na 16 16 |        |             |                 ; set SOURCE-ID to -1
2254:000 | DONE ins | na 16 16 | 00669e | a9 ff ff    |                 lda.# 0ffff          
2255:000 | DONE ins | na 16 16 | 0066a1 | 85 0a       |                 sta.d 00020a         
2256:000 | DONE wsp | na 16 16 |        |             |
2257:000 | DONE cmt | na 16 16 |        |             |                 ; set >IN to zero
2258:000 | DONE ins | na 16 16 | 0066a3 | 64 12       |                 stz.d 000212         
2259:000 | DONE wsp | na 16 16 |        |             |
2260:000 | DONE cmt | na 16 16 |        |             |                 ; move TOS and NOS to input buffers
2261:000 | DONE ins | na 16 16 | 0066a5 | 84 0e       |                 sty.d 00020e         
2262:000 | DONE ins | na 16 16 | 0066a7 | b5 00       |                 lda.dx 00            
2263:000 | DONE ins | na 16 16 | 0066a9 | 85 0c       |                 sta.d 00020c         
2264:000 | DONE wsp | na 16 16 |        |             |
2265:000 | DONE cmt | na 16 16 |        |             |                 ; dump address string from stack
2266:000 | DONE ins | na 16 16 | 0066ab | b4 02       |                 ldy.dx 02            
2267:000 | DONE ins | na 16 16 | 0066ad | e8          |                 inx                  
2268:000 | DONE ins | na 16 16 | 0066ae | e8          |                 inx                  
2269:000 | DONE ins | na 16 16 | 0066af | e8          |                 inx                  
2270:000 | DONE ins | na 16 16 | 0066b0 | e8          |                 inx                  
2271:000 | DONE wsp | na 16 16 |        |             |
2272:000 | DONE ins | na 16 16 | 0066b1 | 20 6a 72    |                 jsr 00726a           
2273:000 | DONE wsp | na 16 16 |        |             |
2274:000 | DONE cmt | na 16 16 |        |             |                 ; restore state from before evaluate
2275:000 | DONE ins | na 16 16 | 0066b4 | 68          |                 pla                  
2276:000 | DONE ins | na 16 16 | 0066b5 | 85 0e       |                 sta.d 00020e         
2277:000 | DONE ins | na 16 16 | 0066b7 | 68          |                 pla                  
2278:000 | DONE ins | na 16 16 | 0066b8 | 85 0c       |                 sta.d 00020c         
2279:000 | DONE ins | na 16 16 | 0066ba | 68          |                 pla                  
2280:000 | DONE ins | na 16 16 | 0066bb | 85 0a       |                 sta.d 00020a         
2281:000 | DONE ins | na 16 16 | 0066bd | 68          |                 pla                  
2282:000 | DONE ins | na 16 16 | 0066be | 85 12       |                 sta.d 000212         
2283:000 | DONE wsp | na 16 16 |        |             |
2284:000 | DONE lbl | na 16 16 | 0066c0 |             | z_evaluate                           
2284:001 | DONE ins | na 16 16 | 0066c0 | 60          |                 rts                  
2285:000 | DONE wsp | na 16 16 |        |             |
2286:000 | DONE wsp | na 16 16 |        |             |
2287:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
2288:000 | DONE cmt | na 16 16 |        |             | ; EXECUTE ( xt -- ) X bytes / X cycles
2289:000 | DONE cmt | na 16 16 |        |             | ; Run a word with help of its xt on the TOS
2290:000 | DONE wsp | na 16 16 |        |             |
2291:000 | DONE cmt | na 16 16 |        |             | ; Reserve three bytes for the jump - three in case we want to expand to the full
2292:000 | DONE cmt | na 16 16 |        |             | ; range
2293:000 | DONE cmt | na 16 16 |        |             | ; TODO move this to someplace that is assured to be RAM, not possibly ROM
2294:000 | DONE lbl | na 16 16 | 0066c1 |             | execute_ip                           
2294:001 | DONE dir | na 16 16 | 0066c1 | (3 bytes)   |         .byte 00, 00, 00             
2294:001 | DONE dir | na 16 16 |        |             |                 00 00 00                 --  . . .
2295:000 | DONE wsp | na 16 16 |        |             |
2296:000 | DONE lbl | na 16 16 | 0066c4 |             | xt_execute                           
2297:000 | DONE dir | na 16 16 |        |             |         .!a16                        
2298:000 | DONE dir | na 16 16 |        |             |         .!xy16                       
2299:000 | DONE cmt | na 16 16 |        |             |                 ; Store the xt for later use and then drop it off the stack
2300:000 | DONE ins | na 16 16 | 0066c4 | 8c c1 66    |                 sty 0066c1           
2301:000 | DONE ins | na 16 16 | 0066c7 | b4 00       |                 ldy.dx 00            
2302:000 | DONE ins | na 16 16 | 0066c9 | e8          |                 inx                  
2303:000 | DONE ins | na 16 16 | 0066ca | e8          |                 inx                  
2304:000 | DONE wsp | na 16 16 |        |             |
2305:000 | DONE cmt | na 16 16 |        |             |                 ; Only JMP has the addressing mode we need. All our Forth
2306:000 | DONE cmt | na 16 16 |        |             |                 ; words end with a RTS instruction, so they will take us back to
2307:000 | DONE cmt | na 16 16 |        |             |                 ; the original caller of this routine without us having to muck
2308:000 | DONE cmt | na 16 16 |        |             |                 ; about with the Return Stack.
2309:000 | DONE ins | na 16 16 | 0066cb | 6c c1 66    |                 jmp.i 0066c1         JMP (EXECUTE_IP)
2310:000 | DONE wsp | na 16 16 |        |             |
2311:000 | DONE lbl | na 16 16 | 0066ce |             | z_execute                            
2311:001 | DONE ins | na 16 16 | 0066ce | ea          |                 nop                  Never reached, see if we need the NOP
2312:000 | DONE wsp | na 16 16 |        |             |
2313:000 | DONE wsp | na 16 16 |        |             |
2314:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
2315:000 | DONE cmt | na 16 16 |        |             | ; FALSE ( -- f ) 7 bytes / 12 cycles
2316:000 | DONE cmt | na 16 16 |        |             | ; Pushes value $0000 for Forth true on Data Stack. This is the same code as for
2317:000 | DONE cmt | na 16 16 |        |             | ; ZERO, see there. Dictionary entry should have xt_zero/z_zero instead of
2318:000 | DONE cmt | na 16 16 |        |             | ; xt_false/z_false
2319:000 | DONE wsp | na 16 16 |        |             |
2320:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
2321:000 | DONE cmt | na 16 16 |        |             | ; FIND-NAME ( addr u -- nt | 0 ) 91 bytes / X cycles
2322:000 | DONE cmt | na 16 16 |        |             | ; Given a string, find the Name Token (nt) of a word or return zero if the word
2323:000 | DONE cmt | na 16 16 |        |             | ; is not in the dictionary. We use this instead of ancient FIND to look up words
2324:000 | DONE cmt | na 16 16 |        |             | ; in the Dictionary passed by PARSE-NAME. Note this returns the nt, not the xt
2325:000 | DONE cmt | na 16 16 |        |             | ; of a word like FIND. To convert, use NAME>INT. This is a Gforth word. See
2326:000 | DONE cmt | na 16 16 |        |             | ; https://www.complang.tuwien.ac.at/forth/gforth/Docs-html/Name-token.html
2327:000 | DONE cmt | na 16 16 |        |             | ; FIND calls this word for the hard word
2328:000 | DONE lbl | na 16 16 | 0066cf |             | xt_find-name                         
2329:000 | DONE cmt | na 16 16 |        |             |                 ; We abort when we get an empty string, that is, one with
2330:000 | DONE cmt | na 16 16 |        |             |                 ; a length of zero TOS. We could test for this, but it will
2331:000 | DONE cmt | na 16 16 |        |             |                 ; happen so rarely that the speed penalty is higher if we run
2332:000 | DONE cmt | na 16 16 |        |             |                 ; the test for every single call. Looking for an empty string
2333:000 | DONE cmt | na 16 16 |        |             |                 ; does force us to check the whole dictionary, though. The test
2334:000 | DONE cmt | na 16 16 |        |             |                 ; would be 3 bytes and 4 to 6 cycles longer:
2335:000 | DONE cmt | na 16 16 |        |             |                 ;       tya                     ; force flag check
2336:000 | DONE cmt | na 16 16 |        |             |                 ;       beq find-name_failure
2337:000 | DONE dir | na 16 16 |        |             |         .!a16                        
2338:000 | DONE dir | na 16 16 |        |             |         .!xy16                       
2339:000 | DONE cmt | na 16 16 |        |             |                 ; set up loop for the first time
2340:000 | DONE ins | na 16 16 | 0066cf | 84 06       |                 sty.d 000206         length of mystery string in tmptos, Y now free
2341:000 | DONE wsp | na 16 16 |        |             |
2342:000 | DONE ins | na 16 16 | 0066d1 | a4 02       |                 ldy.d 000202         
2343:000 | DONE ins | na 16 16 | 0066d3 | 84 16       |                 sty.d 000216         nt of first Dictionary word
2344:000 | DONE wsp | na 16 16 |        |             |
2345:000 | DONE ins | na 16 16 | 0066d5 | b4 00       |                 ldy.dx 00            
2346:000 | DONE ins | na 16 16 | 0066d7 | 84 18       |                 sty.d 000218         address of mystery string, was NOS
2347:000 | DONE wsp | na 16 16 |        |             |
2348:000 | DONE lbl | na 16 16 | 0066d9 |             | find-name_loop                       
2349:000 | DONE cmt | na 16 16 |        |             |                 ; First quick test: Are strings the same length?
2350:000 | DONE ins | na 16 16 | 0066d9 | b2 16       |                 lda.di 000216        LSB in first header word is length
2351:000 | DONE ins | na 16 16 | 0066db | 29 ff 00    |                 and.# 00ff           
2352:000 | DONE ins | na 16 16 | 0066de | c5 06       |                 cmp.d 000206         we test LSB
2353:000 | DONE cmt | na 16 16 |        |             |                 ; Most of the time, it will not be the same, so we save one
2354:000 | DONE cmt | na 16 16 |        |             |                 ; cycle pro loop if we only take the branch when they are the
2355:000 | DONE cmt | na 16 16 |        |             |                 ; same
2356:000 | DONE ins | na 16 16 | 0066e0 | f0 0c       |                 beq 0066ee           
2357:000 | DONE wsp | na 16 16 |        |             |
2358:000 | DONE lbl | na 16 16 | 0066e2 |             | find-name_next_entry                 
2359:000 | DONE cmt | na 16 16 |        |             |                 ; next header address is two bytes down
2360:000 | DONE ins | na 16 16 | 0066e2 | e6 16       |                 inc.d 000216         
2361:000 | DONE ins | na 16 16 | 0066e4 | e6 16       |                 inc.d 000216         
2362:000 | DONE ins | na 16 16 | 0066e6 | b2 16       |                 lda.di 000216        LDA (TMP1)
2363:000 | DONE wsp | na 16 16 |        |             |
2364:000 | DONE cmt | na 16 16 |        |             |                 ; a zero entry marks the end of the Dictionary
2365:000 | DONE ins | na 16 16 | 0066e8 | f0 36       |                 beq 006720           
2366:000 | DONE wsp | na 16 16 |        |             |
2367:000 | DONE ins | na 16 16 | 0066ea | 85 16       |                 sta.d 000216         new header
2368:000 | DONE ins | na 16 16 | 0066ec | 80 eb       |                 bra 0066d9           
2369:000 | DONE wsp | na 16 16 |        |             |
2370:000 | DONE lbl | na 16 16 | 0066ee |             | find-name_chars                      
2371:000 | DONE cmt | na 16 16 |        |             |                 ; Yes, same length, so we compare characters
2372:000 | DONE wsp | na 16 16 |        |             |
2373:000 | DONE cmt | na 16 16 |        |             |                 ; Switch A to 8 bit for this
2374:000 | DONE ins | na 16 16 | 0066ee | e2 20       |                 sep 20               
2374:001 | DONE ctl | na  8 16 |        |             |         .!a8
2375:000 | DONE cmt | na  8 16 |        |             |                 ; Second quick test: Check first char, which is 8 bytes into the
2376:000 | DONE cmt | na  8 16 |        |             |                 ; header
2377:000 | DONE ins | na  8 16 | 0066f0 | a0 08 00    |                 ldy.# 0008           
2378:000 | DONE ins | na  8 16 | 0066f3 | b1 16       |                 lda.diy 000216       LDA (TMP1),Y - first char of entry
2379:000 | DONE ins | na  8 16 | 0066f5 | d2 18       |                 cmp.di 000218        CMP (TMP2) - first char of mystery string
2380:000 | DONE ins | na  8 16 | 0066f7 | f0 04       |                 beq 0066fd           
2381:000 | DONE wsp | na  8 16 |        |             |
2382:000 | DONE lbl | na  8 16 | 0066f9 |             | find-name_char_nomatcnt_8            
2383:000 | DONE cmt | na  8 16 |        |             |                 ; First char is not the same, next entry
2384:000 | DONE ins | na  8 16 | 0066f9 | c2 20       |                 rep 20               
2384:001 | DONE ctl | na 16 16 |        |             |         .!a16
2385:000 | DONE ins | na 16 16 | 0066fb | 80 e5       |                 bra 0066e2           
2386:000 | DONE wsp | na 16 16 |        |             |
2387:000 | DONE lbl | na 16 16 | 0066fd |             | find-name_all_chars                  
2388:000 | DONE dir | na  8 16 |        |             |         .!a8                         
2389:000 | DONE cmt | na  8 16 |        |             |                 ; String length is the same, and the first character is the
2390:000 | DONE cmt | na  8 16 |        |             |                 ; same. If the word is only one character long, we're done
2391:000 | DONE ins | na  8 16 | 0066fd | a4 06       |                 ldy.d 000206         
2392:000 | DONE ins | na  8 16 | 0066ff | 88          |                 dey                  faster and shorter than CPY.# 01
2393:000 | DONE ins | na  8 16 | 006700 | f0 18       |                 beq 00671a           
2394:000 | DONE wsp | na  8 16 |        |             |
2395:000 | DONE cmt | na  8 16 |        |             |                 ; No such luck: The strings are the same length and the first
2396:000 | DONE cmt | na  8 16 |        |             |                 ; char is the same, but the word is more than one char long. So
2397:000 | DONE cmt | na  8 16 |        |             |                 ; we suck it up and compare every single character. We go from
2398:000 | DONE cmt | na  8 16 |        |             |                 ; back to front, because words like CELLS and CELL+ would take
2399:000 | DONE cmt | na  8 16 |        |             |                 ; longer otherwise. We can also shorten the loop by one because
2400:000 | DONE cmt | na  8 16 |        |             |                 ; we've already compared the first char.
2401:000 | DONE wsp | na  8 16 |        |             |
2402:000 | DONE cmt | na  8 16 |        |             |                 ; Even worse, we have to add 8 bytes to address of Dictionary
2403:000 | DONE cmt | na  8 16 |        |             |                 ; string to allow testing with one loop. We need this like
2404:000 | DONE cmt | na  8 16 |        |             |                 ; a hole in the head because we just switched A to 8 bit.
2405:000 | DONE cmt | na  8 16 |        |             |                 ; However, staying with an 8-bit A is even slower.
2406:000 | DONE ins | na  8 16 | 006702 | c2 20       |                 rep 20               
2406:001 | DONE ctl | na 16 16 |        |             |         .!a16
2407:000 | DONE ins | na 16 16 | 006704 | a5 16       |                 lda.d 000216         address of Dictionary string
2408:000 | DONE ins | na 16 16 | 006706 | 18          |                 clc                  
2409:000 | DONE ins | na 16 16 | 006707 | 69 08 00    |                 adc.# 0008           
2410:000 | DONE ins | na 16 16 | 00670a | 85 1a       |                 sta.d 00021a         
2411:000 | DONE ins | na 16 16 | 00670c | e2 20       |                 sep 20               
2411:001 | DONE ctl | na  8 16 |        |             |         .!a8
2412:000 | DONE ins | na  8 16 | 00670e | a4 06       |                 ldy.d 000206         get length of strings as loop index
2413:000 | DONE ins | na  8 16 | 006710 | 88          |                 dey                  first index is length minus 1
2414:000 | DONE wsp | na  8 16 |        |             |
2415:000 | DONE lbl | na  8 16 | 006711 |             | @                                    
2416:000 | DONE ins | na  8 16 | 006711 | b1 18       |                 lda.diy 000218       LDA (TMP2),Y - last char of mystery string
2417:000 | DONE ins | na  8 16 | 006713 | d1 1a       |                 cmp.diy 00021a       CMP (TMP1),Y - last char of DP string
2418:000 | DONE ins | na  8 16 | 006715 | d0 e2       |                 bne 0066f9           
2419:000 | DONE ins | na  8 16 | 006717 | 88          |                 dey                  start of string (Y=0) was already tested
2420:000 | DONE ins | na  8 16 | 006718 | d0 f7       |                 bne 006711           
2421:000 | DONE wsp | na  8 16 |        |             |
2422:000 | DONE lbl | na  8 16 | 00671a |             | find-name_success                    
2423:000 | DONE cmt | na  8 16 |        |             |                 ; If we reach here, the strings are the same and we have a match
2424:000 | DONE cmt | na  8 16 |        |             |                 ; We get here with an 8 bit A
2425:000 | DONE ins | na  8 16 | 00671a | c2 20       |                 rep 20               
2425:001 | DONE ctl | na 16 16 |        |             |         .!a16
2426:000 | DONE ins | na 16 16 | 00671c | a4 16       |                 ldy.d 000216         get the correct DP
2427:000 | DONE ins | na 16 16 | 00671e | 80 03       |                 bra 006723           
2428:000 | DONE wsp | na 16 16 |        |             |
2429:000 | DONE wsp | na 16 16 |        |             |
2430:000 | DONE lbl | na 16 16 | 006720 |             | find-name_failure_16                 
2431:000 | DONE cmt | na 16 16 |        |             |                 ; Word not found in Dictionary, return zero. Assumes A is 16
2432:000 | DONE cmt | na 16 16 |        |             |                 ; bit
2433:000 | DONE ins | na 16 16 | 006720 | a0 00 00    |                 ldy.# 0000           fall thru
2434:000 | DONE wsp | na 16 16 |        |             |
2435:000 | DONE lbl | na 16 16 | 006723 |             | find-name_done                       
2436:000 | DONE ins | na 16 16 | 006723 | e8          |                 inx                  drop old address (NIP)
2437:000 | DONE ins | na 16 16 | 006724 | e8          |                 inx                  
2438:000 | DONE wsp | na 16 16 |        |             |
2439:000 | DONE lbl | na 16 16 | 006725 |             | z_find-name                          
2439:001 | DONE ins | na 16 16 | 006725 | 60          |                 rts                  
2440:000 | DONE wsp | na 16 16 |        |             |
2441:000 | DONE wsp | na 16 16 |        |             |
2442:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
2443:000 | DONE cmt | na 16 16 |        |             | ; IMMEDIATE ( -- ) X bytes / X cycles
2444:000 | DONE cmt | na 16 16 |        |             | ; Mark the most recently defined word as IMMEDIATE. Will only affect the last
2445:000 | DONE cmt | na 16 16 |        |             | ; word in the Dictionary. If the words is still in ROM for some reason, this
2446:000 | DONE cmt | na 16 16 |        |             | ; will have no effect and will fail without an error message
2447:000 | DONE lbl | na 16 16 | 006726 |             | xt_immediate                         
2448:000 | DONE dir | na 16 16 |        |             |         .!a16                        
2449:000 | DONE ins | na 16 16 | 006726 | a9 02 00    |                 lda.# IM             Immediate flag
2450:000 | DONE ins | na 16 16 | 006729 | eb          |                 xba                  flags are MSB
2451:000 | DONE ins | na 16 16 | 00672a | 12 02       |                 ora.di 000202        ORA (DP)
2452:000 | DONE ins | na 16 16 | 00672c | 92 02       |                 sta.di 000202        
2453:000 | DONE wsp | na 16 16 |        |             |
2454:000 | DONE lbl | na 16 16 | 00672e |             | z_immediate                          
2454:001 | DONE ins | na 16 16 | 00672e | 60          |                 rts                  
2455:000 | DONE wsp | na 16 16 |        |             |
2456:000 | DONE wsp | na 16 16 |        |             |
2457:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
2458:000 | DONE cmt | na 16 16 |        |             | ; INVERT ( n -- n ) 5 bytes / X cycles
2459:000 | DONE cmt | na 16 16 |        |             | ; Complement of TOS
2460:000 | DONE lbl | na 16 16 | 00672f |             | xt_invert                            
2461:000 | DONE dir | na 16 16 |        |             |         .!a16                        
2462:000 | DONE ins | na 16 16 | 00672f | 98          |                 tya                  
2463:000 | DONE ins | na 16 16 | 006730 | 49 ff ff    |                 eor.# 0ffff          
2464:000 | DONE ins | na 16 16 | 006733 | a8          |                 tay                  
2465:000 | DONE wsp | na 16 16 |        |             |
2466:000 | DONE lbl | na 16 16 | 006734 |             | z_invert                             
2466:001 | DONE ins | na 16 16 | 006734 | 60          |                 rts                  
2467:000 | DONE wsp | na 16 16 |        |             |
2468:000 | DONE wsp | na 16 16 |        |             |
2469:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
2470:000 | DONE cmt | na 16 16 |        |             | ; HERE ( -- u ) 6 bytes / 13 cycles
2471:000 | DONE cmt | na 16 16 |        |             | ; Push Compiler Pointer address on the Data Stack
2472:000 | DONE lbl | na 16 16 | 006735 |             | xt_here                              
2473:000 | DONE dir | na 16 16 |        |             |         .!xy16                       
2474:000 | DONE ins | na 16 16 | 006735 | ca          |                 dex                  
2475:000 | DONE ins | na 16 16 | 006736 | ca          |                 dex                  
2476:000 | DONE ins | na 16 16 | 006737 | 94 00       |                 sty.dx 00            
2477:000 | DONE wsp | na 16 16 |        |             |
2478:000 | DONE ins | na 16 16 | 006739 | a4 00       |                 ldy.d 000200         
2479:000 | DONE wsp | na 16 16 |        |             |
2480:000 | DONE lbl | na 16 16 | 00673b |             | z_here                               
2480:001 | DONE ins | na 16 16 | 00673b | 60          |                 rts                  
2481:000 | DONE wsp | na 16 16 |        |             |
2482:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
2483:000 | DONE cmt | na 16 16 |        |             | ; HEX ( -- ) X bytes / X cycles
2484:000 | DONE cmt | na 16 16 |        |             | ; Change radix for number conversion to 16
2485:000 | DONE lbl | na 16 16 | 00673c |             | xt_hex                               
2486:000 | DONE dir | na 16 16 |        |             |         .!a16                        
2487:000 | DONE ins | na 16 16 | 00673c | a9 10 00    |                 lda.# 0010           
2488:000 | DONE ins | na 16 16 | 00673f | 85 1c       |                 sta.d 00021c         
2489:000 | DONE wsp | na 16 16 |        |             |
2490:000 | DONE lbl | na 16 16 | 006741 |             | z_hex                                
2490:001 | DONE ins | na 16 16 | 006741 | 60          |                 rts                  
2491:000 | DONE wsp | na 16 16 |        |             |
2492:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
2493:000 | DONE cmt | na 16 16 |        |             | ; HOLD ( char -- ) X bytes / X cycles
2494:000 | DONE cmt | na 16 16 |        |             | ; Insert a character at the current position of a pictured numeric output string
2495:000 | DONE cmt | na 16 16 |        |             | ; Code based on https://github.com/philburk/pforth/blob/master/fth/numberio.fth
2496:000 | DONE cmt | na 16 16 |        |             | ; Forth code is : HOLD  -1 HLD +!  HLD @ C! ;  We use the the internal variable
2497:000 | DONE cmt | na 16 16 |        |             | ; tohold instead of HLD.
2498:000 | DONE lbl | na 16 16 | 006742 |             | xt_hold                              
2499:000 | DONE dir | na 16 16 |        |             |         .!a16                        
2500:000 | DONE ins | na 16 16 | 006742 | c6 28       |                 dec.d 000228         -1 HLD +!
2501:000 | DONE wsp | na 16 16 |        |             |
2502:000 | DONE ins | na 16 16 | 006744 | 98          |                 tya                  
2503:000 | DONE ins | na 16 16 | 006745 | e2 20       |                 sep 20               
2503:001 | DONE ctl | na  8 16 |        |             |         .!a8
2504:000 | DONE ins | na  8 16 | 006747 | 92 28       |                 sta.di 000228        STA (TOHOLD)
2505:000 | DONE ins | na  8 16 | 006749 | c2 20       |                 rep 20               
2505:001 | DONE ctl | na 16 16 |        |             |         .!a16
2506:000 | DONE ins | na 16 16 | 00674b | b4 00       |                 ldy.dx 00            
2507:000 | DONE ins | na 16 16 | 00674d | e8          |                 inx                  
2508:000 | DONE ins | na 16 16 | 00674e | e8          |                 inx                  
2509:000 | DONE wsp | na 16 16 |        |             |
2510:000 | DONE lbl | na 16 16 | 00674f |             | z_hold                               
2510:001 | DONE ins | na 16 16 | 00674f | 60          |                 rts                  
2511:000 | DONE wsp | na 16 16 |        |             |
2512:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
2513:000 | DONE cmt | na 16 16 |        |             | ; LATESTNT ( -- nt ) 7 bytes / X cycles
2514:000 | DONE cmt | na 16 16 |        |             | ; Return the name token (nt) of the last word in the Dictionary. The Gforth
2515:000 | DONE cmt | na 16 16 |        |             | ; version of this word is called LATEST.
2516:000 | DONE lbl | na 16 16 | 006750 |             | xt_latestnt                          
2517:000 | DONE dir | na 16 16 |        |             |         .!a16                        
2518:000 | DONE ins | na 16 16 | 006750 | ca          |                 dex                  make room on Data Stack
2519:000 | DONE ins | na 16 16 | 006751 | ca          |                 dex                  
2520:000 | DONE ins | na 16 16 | 006752 | 94 00       |                 sty.dx 00            
2521:000 | DONE wsp | na 16 16 |        |             |
2522:000 | DONE ins | na 16 16 | 006754 | a5 02       |                 lda.d 000202         
2523:000 | DONE ins | na 16 16 | 006756 | a8          |                 tay                  
2524:000 | DONE wsp | na 16 16 |        |             |
2525:000 | DONE lbl | na 16 16 | 006757 |             | z_latestnt                           
2525:001 | DONE ins | na 16 16 | 006757 | 60          |                 rts                  
2526:000 | DONE wsp | na 16 16 |        |             |
2527:000 | DONE wsp | na 16 16 |        |             |
2528:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
2529:000 | DONE cmt | na 16 16 |        |             | ; LATESTXT ( -- xt ) 11 bytes / X cycles
2530:000 | DONE cmt | na 16 16 |        |             | ; Return the name token (xt) of the last word in the Dictionary. This is simply
2531:000 | DONE cmt | na 16 16 |        |             | ; LATESTNT but four bytes down and with a FETCH
2532:000 | DONE lbl | na 16 16 | 006758 |             | xt_latestxt                          
2533:000 | DONE dir | na 16 16 |        |             |         .!a16                        
2534:000 | DONE ins | na 16 16 | 006758 | ca          |                 dex                  make room on Data Stack
2535:000 | DONE ins | na 16 16 | 006759 | ca          |                 dex                  
2536:000 | DONE ins | na 16 16 | 00675a | 94 00       |                 sty.dx 00            
2537:000 | DONE wsp | na 16 16 |        |             |
2538:000 | DONE ins | na 16 16 | 00675c | a5 02       |                 lda.d 000202         
2539:000 | DONE wsp | na 16 16 |        |             |
2540:000 | DONE ins | na 16 16 | 00675e | 18          |                 clc                  xt is stored four bytes below nt in header
2541:000 | DONE ins | na 16 16 | 00675f | 69 04 00    |                 adc.# 0004           
2542:000 | DONE ins | na 16 16 | 006762 | a8          |                 tay                  
2543:000 | DONE wsp | na 16 16 |        |             |
2544:000 | DONE ins | na 16 16 | 006763 | b9 00 00    |                 lda.y 0000           FETCH
2545:000 | DONE ins | na 16 16 | 006766 | a8          |                 tay                  
2546:000 | DONE wsp | na 16 16 |        |             |
2547:000 | DONE lbl | na 16 16 | 006767 |             | z_latestxt                           
2547:001 | DONE ins | na 16 16 | 006767 | 60          |                 rts                  
2548:000 | DONE wsp | na 16 16 |        |             |
2549:000 | DONE wsp | na 16 16 |        |             |
2550:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
2551:000 | DONE cmt | na 16 16 |        |             | ; LITERAL ( n -- ) X bytes / X cycles
2552:000 | DONE cmt | na 16 16 |        |             | ; Compile-only word to store TOS so that it is pushed on stack during runtime.
2553:000 | DONE cmt | na 16 16 |        |             | ; This is a immediate, compile-only word. Test it with  : AAA [ 1 ] LITERAL ;
2554:000 | DONE cmt | na 16 16 |        |             | ; for instance
2555:000 | DONE lbl | na 16 16 | 006768 |             | xt_literal                           
2556:000 | DONE cmt | na 16 16 |        |             |                 ; During runtime, we call the routine at the bottom by compiling
2557:000 | DONE cmt | na 16 16 |        |             |                 ; JSR LITERAL_RT. Note the cmpl_ routines use tmptos
2558:000 | DONE ins | na 16 16 | 006768 | f4 7a 67    |                 phe.# 00677a         PEA LITERAL_RT
2559:000 | DONE ins | na 16 16 | 00676b | 20 c4 72    |                 jsr 0072c4           
2560:000 | DONE wsp | na 16 16 |        |             |
2561:000 | DONE cmt | na 16 16 |        |             |                 ; compile the value that is to be pushed to the Data Stack at
2562:000 | DONE cmt | na 16 16 |        |             |                 ; runtime. There is no "sty.di", so we have to do this the hard
2563:000 | DONE cmt | na 16 16 |        |             |                 ; way. This is basically , ("comma")
2564:000 | DONE ins | na 16 16 | 00676e | 98          |                 tya                  
2565:000 | DONE ins | na 16 16 | 00676f | 92 00       |                 sta.di 000200        
2566:000 | DONE ins | na 16 16 | 006771 | e6 00       |                 inc.d 000200         
2567:000 | DONE ins | na 16 16 | 006773 | e6 00       |                 inc.d 000200         
2568:000 | DONE wsp | na 16 16 |        |             |
2569:000 | DONE ins | na 16 16 | 006775 | b4 00       |                 ldy.dx 00            DROP
2570:000 | DONE ins | na 16 16 | 006777 | e8          |                 inx                  
2571:000 | DONE ins | na 16 16 | 006778 | e8          |                 inx                  
2572:000 | DONE wsp | na 16 16 |        |             |
2573:000 | DONE lbl | na 16 16 | 006779 |             | z_literal                            
2573:001 | DONE ins | na 16 16 | 006779 | 60          |                 rts                  
2574:000 | DONE wsp | na 16 16 |        |             |
2575:000 | DONE lbl | na 16 16 | 00677a |             | literal_rt                           
2576:000 | DONE cmt | na 16 16 |        |             |                 ; During runtime, we push the value following this word
2577:000 | DONE cmt | na 16 16 |        |             |                 ; back on the Data Stack. The subroutine jump that brought us
2578:000 | DONE cmt | na 16 16 |        |             |                 ; here put the address to return to on the Return Stack - this
2579:000 | DONE cmt | na 16 16 |        |             |                 ; points to the data we need to get
2580:000 | DONE wsp | na 16 16 |        |             |
2581:000 | DONE cmt | na 16 16 |        |             |                 ; Make room on Data Stack, Y now free to use
2582:000 | DONE ins | na 16 16 | 00677a | ca          |                 dex                  
2583:000 | DONE ins | na 16 16 | 00677b | ca          |                 dex                  
2584:000 | DONE ins | na 16 16 | 00677c | 94 00       |                 sty.dx 00            
2585:000 | DONE wsp | na 16 16 |        |             |
2586:000 | DONE cmt | na 16 16 |        |             |                 ; The 65816 stores (<RETURN-ADDRESS> - 1) on the Return Stack
2587:000 | DONE cmt | na 16 16 |        |             |                 ; so we have to manipulate the address
2588:000 | DONE ins | na 16 16 | 00677e | 7a          |                 ply                  
2589:000 | DONE ins | na 16 16 | 00677f | c8          |                 iny                  
2590:000 | DONE ins | na 16 16 | 006780 | b9 00 00    |                 lda.y 0000           LDA $0000,Y - get value after jump
2591:000 | DONE wsp | na 16 16 |        |             |
2592:000 | DONE ins | na 16 16 | 006783 | c8          |                 iny                  move return address past data and restore
2593:000 | DONE ins | na 16 16 | 006784 | 5a          |                 phy                  so we can get back home
2594:000 | DONE wsp | na 16 16 |        |             |
2595:000 | DONE ins | na 16 16 | 006785 | a8          |                 tay                  Value is now on the Data Stack ( -- n )
2596:000 | DONE wsp | na 16 16 |        |             |
2597:000 | DONE ins | na 16 16 | 006786 | 60          |                 rts                  
2598:000 | DONE wsp | na 16 16 |        |             |
2599:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
2600:000 | DONE cmt | na 16 16 |        |             | ; M* "MSTAR" ( n n -- d ) 16*16 -> 32  X bytes / X cycles
2601:000 | DONE cmt | na 16 16 |        |             | ; Multiply two 16 bit numbers, producing a 32 bit result. All values are signed.
2602:000 | DONE cmt | na 16 16 |        |             | ; This was originally adapted from FIG Forth for Tali Forth. The original Forth
2603:000 | DONE cmt | na 16 16 |        |             | ; code is : M* OVER OVER XOR >R ABS SWAP ABS UM* R> D+- ;  with
2604:000 | DONE cmt | na 16 16 |        |             | ; : D+- O< IF DNEGATE THEN ;
2605:000 | DONE cmt | na 16 16 |        |             | ; TODO Test this more once we have the Double words etc all working
2606:000 | DONE lbl | na 16 16 | 006787 |             | xt_mstar                             
2607:000 | DONE dir | na 16 16 |        |             |         .!a16                        
2608:000 | DONE cmt | na 16 16 |        |             |                 ; figure out the sign
2609:000 | DONE ins | na 16 16 | 006787 | 98          |                 tya                  
2610:000 | DONE ins | na 16 16 | 006788 | 55 00       |                 eor.dx 00            
2611:000 | DONE wsp | na 16 16 |        |             |
2612:000 | DONE cmt | na 16 16 |        |             |                 ; um* uses all kinds of tmp stuff so we don't risk a conflict
2613:000 | DONE cmt | na 16 16 |        |             |                 ; and just take the cycle hit by pushing this to the stack
2614:000 | DONE ins | na 16 16 | 00678a | 48          |                 pha                  
2615:000 | DONE wsp | na 16 16 |        |             |
2616:000 | DONE cmt | na 16 16 |        |             |                 ; get the absolute value of both numbers so we can feed them to
2617:000 | DONE cmt | na 16 16 |        |             |                 ; UM*, which does the real work
2618:000 | DONE ins | na 16 16 | 00678b | 98          |                 tya                  
2619:000 | DONE ins | na 16 16 | 00678c | 10 05       |                 bpl 006793           
2620:000 | DONE wsp | na 16 16 |        |             |
2621:000 | DONE cmt | na 16 16 |        |             |                 ; TOS is negative so we have to ABS it
2622:000 | DONE ins | na 16 16 | 00678e | 49 ff ff    |                 eor.# 0ffff          
2623:000 | DONE ins | na 16 16 | 006791 | 1a          |                 inc.a                
2624:000 | DONE ins | na 16 16 | 006792 | a8          |                 tay                  
2625:000 | DONE wsp | na 16 16 |        |             |
2626:000 | DONE lbl | na 16 16 | 006793 |             | mstar_abs_nos                        
2627:000 | DONE ins | na 16 16 | 006793 | b5 00       |                 lda.dx 00            
2628:000 | DONE ins | na 16 16 | 006795 | 10 06       |                 bpl 00679d           
2629:000 | DONE wsp | na 16 16 |        |             |
2630:000 | DONE cmt | na 16 16 |        |             |                 ; NOS is negative so we have to ABS it
2631:000 | DONE ins | na 16 16 | 006797 | 49 ff ff    |                 eor.# 0ffff          
2632:000 | DONE ins | na 16 16 | 00679a | 1a          |                 inc.a                
2633:000 | DONE ins | na 16 16 | 00679b | 95 00       |                 sta.dx 00            
2634:000 | DONE wsp | na 16 16 |        |             |
2635:000 | DONE lbl | na 16 16 | 00679d |             | mstar_umstar                         
2636:000 | DONE ins | na 16 16 | 00679d | 20 af 6a    |                 jsr 006aaf           now ( d ) on stack
2637:000 | DONE wsp | na 16 16 |        |             |
2638:000 | DONE cmt | na 16 16 |        |             |                 ; handle the sign
2639:000 | DONE ins | na 16 16 | 0067a0 | 68          |                 pla                  
2640:000 | DONE wsp | na 16 16 |        |             |
2641:000 | DONE cmt | na 16 16 |        |             |                 ; postive, we don't have to care
2642:000 | DONE ins | na 16 16 | 0067a1 | 10 03       |                 bpl 0067a6           
2643:000 | DONE wsp | na 16 16 |        |             |
2644:000 | DONE ins | na 16 16 | 0067a3 | 20 2a 66    |                 jsr 00662a           
2645:000 | DONE wsp | na 16 16 |        |             |
2646:000 | DONE lbl | na 16 16 | 0067a6 |             | z_mstar                              
2646:001 | DONE ins | na 16 16 | 0067a6 | 60          |                 rts                  
2647:000 | DONE wsp | na 16 16 |        |             |
2648:000 | DONE wsp | na 16 16 |        |             |
2649:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
2650:000 | DONE cmt | na 16 16 |        |             | ; MAX ( n m -- n ) 18 bytes / X cycles
2651:000 | DONE cmt | na 16 16 |        |             | ; Compare TOS and NOS and keep which one is larger. Adapted from Lance A.
2652:000 | DONE cmt | na 16 16 |        |             | ; Leventhal "6502 Assembly Language Subroutines". Negative Flag indicates which
2653:000 | DONE cmt | na 16 16 |        |             | ; number is larger. See also http://6502.org/tutorials/compare_instructions.html
2654:000 | DONE cmt | na 16 16 |        |             | ; and http://www.righto.com/2012/12/the-6502-overflow-flag-explained.html
2655:000 | DONE lbl | na 16 16 | 0067a7 |             | xt_max                               
2656:000 | DONE ins | na 16 16 | 0067a7 | 98          |                 tya                  
2657:000 | DONE ins | na 16 16 | 0067a8 | d5 00       |                 cmp.dx 00            
2658:000 | DONE wsp | na 16 16 |        |             |
2659:000 | DONE cmt | na 16 16 |        |             |                 ; If they are the same, life is good. This step also sets the
2660:000 | DONE cmt | na 16 16 |        |             |                 ; Carry flag
2661:000 | DONE ins | na 16 16 | 0067aa | f0 0b       |                 beq 0067b7           Faster than DROP because TOS is in Y
2662:000 | DONE wsp | na 16 16 |        |             |
2663:000 | DONE ins | na 16 16 | 0067ac | f5 00       |                 sbc.dx 00            
2664:000 | DONE ins | na 16 16 | 0067ae | 50 03       |                 bvc 0067b3           no overflow, skip ahead
2665:000 | DONE wsp | na 16 16 |        |             |
2666:000 | DONE cmt | na 16 16 |        |             |                 ; Deal with oveflow because we use signed numbers
2667:000 | DONE ins | na 16 16 | 0067b0 | 49 00 80    |                 eor.# 8000           compliment negative flag
2668:000 | DONE wsp | na 16 16 |        |             |
2669:000 | DONE lbl | na 16 16 | 0067b3 |             | max_no_ov                            
2670:000 | DONE ins | na 16 16 | 0067b3 | 10 02       |                 bpl 0067b7           keep TOS
2671:000 | DONE lbl | na 16 16 | 0067b5 |             | max_drop                             
2672:000 | DONE ins | na 16 16 | 0067b5 | b4 00       |                 ldy.dx 00            DROP so NOS is result
2673:000 | DONE lbl | na 16 16 | 0067b7 |             | max_nip                              
2674:000 | DONE ins | na 16 16 | 0067b7 | e8          |                 inx                  
2675:000 | DONE ins | na 16 16 | 0067b8 | e8          |                 inx                  
2676:000 | DONE wsp | na 16 16 |        |             |
2677:000 | DONE lbl | na 16 16 | 0067b9 |             | z_max                                
2677:001 | DONE ins | na 16 16 | 0067b9 | 60          |                 rts                  
2678:000 | DONE wsp | na 16 16 |        |             |
2679:000 | DONE wsp | na 16 16 |        |             |
2680:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
2681:000 | DONE cmt | na 16 16 |        |             | ; MIN ( n m -- n ) 18 bytes / X cycles
2682:000 | DONE cmt | na 16 16 |        |             | ; Compare TOS and NOS and keep which one is smaller Adapted from Lance A.
2683:000 | DONE cmt | na 16 16 |        |             | ; Leventhal "6502 Assembly Language Subroutines". Negative Flag indicates which
2684:000 | DONE cmt | na 16 16 |        |             | ; number is larger. See also http://6502.org/tutorials/compare_instructions.html
2685:000 | DONE cmt | na 16 16 |        |             | ; and http://www.righto.com/2012/12/the-6502-overflow-flag-explained.html
2686:000 | DONE lbl | na 16 16 | 0067ba |             | xt_min                               
2687:000 | DONE ins | na 16 16 | 0067ba | 98          |                 tya                  
2688:000 | DONE ins | na 16 16 | 0067bb | d5 00       |                 cmp.dx 00            
2689:000 | DONE wsp | na 16 16 |        |             |
2690:000 | DONE cmt | na 16 16 |        |             |                 ; If they are the same, life is good. This step also sets the
2691:000 | DONE cmt | na 16 16 |        |             |                 ; Carry flag
2692:000 | DONE ins | na 16 16 | 0067bd | f0 0b       |                 beq 0067ca           Faster than DROP because TOS is in Y
2693:000 | DONE wsp | na 16 16 |        |             |
2694:000 | DONE ins | na 16 16 | 0067bf | f5 00       |                 sbc.dx 00            
2695:000 | DONE ins | na 16 16 | 0067c1 | 50 03       |                 bvc 0067c6           no overflow, skip ahead
2696:000 | DONE wsp | na 16 16 |        |             |
2697:000 | DONE cmt | na 16 16 |        |             |                 ; Deal with oveflow because we use signed numbers
2698:000 | DONE ins | na 16 16 | 0067c3 | 49 00 80    |                 eor.# 8000           compliment negative flag
2699:000 | DONE wsp | na 16 16 |        |             |
2700:000 | DONE lbl | na 16 16 | 0067c6 |             | min_no_ov                            
2701:000 | DONE ins | na 16 16 | 0067c6 | 30 02       |                 bmi 0067ca           keep TOS
2702:000 | DONE lbl | na 16 16 | 0067c8 |             | min_drop                             
2703:000 | DONE ins | na 16 16 | 0067c8 | b4 00       |                 ldy.dx 00            DROP so NOS is result
2704:000 | DONE lbl | na 16 16 | 0067ca |             | min_nip                              
2705:000 | DONE ins | na 16 16 | 0067ca | e8          |                 inx                  
2706:000 | DONE ins | na 16 16 | 0067cb | e8          |                 inx                  
2707:000 | DONE wsp | na 16 16 |        |             |
2708:000 | DONE lbl | na 16 16 | 0067cc |             | z_min                                
2708:001 | DONE ins | na 16 16 | 0067cc | 60          |                 rts                  
2709:000 | DONE wsp | na 16 16 |        |             |
2710:000 | DONE wsp | na 16 16 |        |             |
2711:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
2712:000 | DONE cmt | na 16 16 |        |             | ; NAME>INT ( nt -- xt ) 4 bytes / 8 cycles
2713:000 | DONE cmt | na 16 16 |        |             | ; Given the Name Token (nt) of a word, return its Execute Token (xt)
2714:000 | DONE lbl | na 16 16 | 0067cd |             | xt_name-int                          
2715:000 | DONE dir | na 16 16 |        |             |         .!a16                        
2716:000 | DONE dir | na 16 16 |        |             |         .!xy16                       
2717:000 | DONE cmt | na 16 16 |        |             |                 ; The xt of a word beginns four bytes down from its nt
2718:000 | DONE ins | na 16 16 | 0067cd | c8          |                 iny                  
2719:000 | DONE ins | na 16 16 | 0067ce | c8          |                 iny                  
2720:000 | DONE ins | na 16 16 | 0067cf | c8          |                 iny                  
2721:000 | DONE ins | na 16 16 | 0067d0 | c8          |                 iny                  
2722:000 | DONE ins | na 16 16 | 0067d1 | b9 00 00    |                 lda.y 0000           
2723:000 | DONE ins | na 16 16 | 0067d4 | a8          |                 tay                  
2724:000 | DONE wsp | na 16 16 |        |             |
2725:000 | DONE lbl | na 16 16 | 0067d5 |             | z_name-int                           
2725:001 | DONE ins | na 16 16 | 0067d5 | 60          |                 rts                  
2726:000 | DONE wsp | na 16 16 |        |             |
2727:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
2728:000 | DONE cmt | na 16 16 |        |             | ; NAME>STRING ( nt -- addr u ) 16 bytes / X cycles
2729:000 | DONE cmt | na 16 16 |        |             | ; Given a name token (nt) of a word, return its string. This is a Gforth word
2730:000 | DONE cmt | na 16 16 |        |             | ; that works with the Dictionary header entries. It is not checked if nt is
2731:000 | DONE cmt | na 16 16 |        |             | ; a valid name token.
2732:000 | DONE lbl | na 16 16 | 0067d6 |             | xt_name-string                       
2733:000 | DONE dir | na 16 16 |        |             |         .!a16                        
2734:000 | DONE dir | na 16 16 |        |             |         .!xy16                       
2735:000 | DONE ins | na 16 16 | 0067d6 | ca          |                 dex                  move NOS down one
2736:000 | DONE ins | na 16 16 | 0067d7 | ca          |                 dex                  
2737:000 | DONE wsp | na 16 16 |        |             |
2738:000 | DONE cmt | na 16 16 |        |             |                 ; the name string of a word begins 8 bytes down from its nt,
2739:000 | DONE cmt | na 16 16 |        |             |                 ; which we have as TOS
2740:000 | DONE ins | na 16 16 | 0067d8 | 98          |                 tya                  
2741:000 | DONE ins | na 16 16 | 0067d9 | 18          |                 clc                  
2742:000 | DONE ins | na 16 16 | 0067da | 69 08 00    |                 adc.# 0008           
2743:000 | DONE ins | na 16 16 | 0067dd | 95 00       |                 sta.dx 00            NOS
2744:000 | DONE wsp | na 16 16 |        |             |
2745:000 | DONE cmt | na 16 16 |        |             |                 ; the length of the name string is in the LSB of the first word
2746:000 | DONE cmt | na 16 16 |        |             |                 ; of the dictionary entry header (the name token)
2747:000 | DONE ins | na 16 16 | 0067df | b9 00 00    |                 lda.y 0000           LDA $0000,Y
2748:000 | DONE ins | na 16 16 | 0067e2 | 29 ff 00    |                 and.# 00ff           mask all but length byte
2749:000 | DONE ins | na 16 16 | 0067e5 | a8          |                 tay                  
2750:000 | DONE wsp | na 16 16 |        |             |
2751:000 | DONE lbl | na 16 16 | 0067e6 |             | z_name-string                        
2751:001 | DONE ins | na 16 16 | 0067e6 | 60          |                 rts                  
2752:000 | DONE wsp | na 16 16 |        |             |
2753:000 | DONE wsp | na 16 16 |        |             |
2754:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
2755:000 | DONE cmt | na 16 16 |        |             | ; NEGATE ( n -- n ) 6 bytes / X cycles
2756:000 | DONE cmt | na 16 16 |        |             | ; Two's complement of TOS
2757:000 | DONE lbl | na 16 16 | 0067e7 |             | xt_negate                            
2758:000 | DONE ins | na 16 16 | 0067e7 | 98          |                 tya                  
2759:000 | DONE ins | na 16 16 | 0067e8 | 49 ff ff    |                 eor.# 0ffff          
2760:000 | DONE ins | na 16 16 | 0067eb | 1a          |                 inc.a                
2761:000 | DONE ins | na 16 16 | 0067ec | a8          |                 tay                  
2762:000 | DONE wsp | na 16 16 |        |             |
2763:000 | DONE lbl | na 16 16 | 0067ed |             | z_negate                             
2763:001 | DONE ins | na 16 16 | 0067ed | 60          |                 rts                  
2764:000 | DONE wsp | na 16 16 |        |             |
2765:000 | DONE wsp | na 16 16 |        |             |
2766:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
2767:000 | DONE cmt | na 16 16 |        |             | ; NIP ( n m -- m ) 2 bytes / 4 cycles
2768:000 | DONE cmt | na 16 16 |        |             | ; Delete entry that is NOS
2769:000 | DONE lbl | na 16 16 | 0067ee |             | xt_nip                               
2770:000 | DONE dir | na 16 16 |        |             |         .!xy16                       
2771:000 | DONE ins | na 16 16 | 0067ee | e8          |                 inx                  
2772:000 | DONE ins | na 16 16 | 0067ef | e8          |                 inx                  
2773:000 | DONE lbl | na 16 16 | 0067f0 |             | z_nip                                
2773:001 | DONE ins | na 16 16 | 0067f0 | 60          |                 rts                  
2774:000 | DONE wsp | na 16 16 |        |             |
2775:000 | DONE wsp | na 16 16 |        |             |
2776:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
2777:000 | DONE cmt | na 16 16 |        |             | ; NUMBER ( addr u -- u | d ) X bytes / X cycles
2778:000 | DONE cmt | na 16 16 |        |             | ; Convert a number string to a double or single cell number. This is a wrapper
2779:000 | DONE cmt | na 16 16 |        |             | ; for >NUMBER and follows the convention set out in the "Forth Programmer's
2780:000 | DONE cmt | na 16 16 |        |             | ; Handbook" (Conklin & Rather) 3rd edition p. 87. Based in part on the "Starting
2781:000 | DONE cmt | na 16 16 |        |             | ; Forth" code https://www.forth.com/starting-forth/10-input-output-operators/
2782:000 | DONE cmt | na 16 16 |        |             | ; Gforth uses S>NUMBER? and S>UNUMBER? which return the numbers and a flag, see
2783:000 | DONE cmt | na 16 16 |        |             | ; https://www.complang.tuwien.ac.at/forth/gforth/Docs-html/Number-Conversion.html
2784:000 | DONE cmt | na 16 16 |        |             | ; Another difference to Gforth is that we follow ANSI Forth that the dot to
2785:000 | DONE cmt | na 16 16 |        |             | ; signal a double cell number is required to be the last character of the
2786:000 | DONE cmt | na 16 16 |        |             | ; string. Number calls >NUMBER which in turn calls UM*, which uses tmp1, tmp2,
2787:000 | DONE cmt | na 16 16 |        |             | ; and tmp3, so we can't use them here, which is pain.
2788:000 | DONE lbl | na 16 16 | 0067f1 |             | xt_number                            
2789:000 | DONE dir | na 16 16 |        |             |         .!a16                        
2790:000 | DONE cmt | na 16 16 |        |             |                 ; The flags for sign and double are kept on the stack because
2791:000 | DONE cmt | na 16 16 |        |             |                 ; we've run out of temporary variables. MSB is for minus, LSB is
2792:000 | DONE cmt | na 16 16 |        |             |                 ; for double
2793:000 | DONE ins | na 16 16 | 0067f1 | f4 00 00    |                 phe.# 0000           
2794:000 | DONE wsp | na 16 16 |        |             |
2795:000 | DONE ins | na 16 16 | 0067f4 | 84 06       |                 sty.d 000206         save length of string, freeing Y
2796:000 | DONE wsp | na 16 16 |        |             |
2797:000 | DONE cmt | na 16 16 |        |             |                 ; if the first character is a minus, strip it off and set
2798:000 | DONE cmt | na 16 16 |        |             |                 ; a flag
2799:000 | DONE ins | na 16 16 | 0067f6 | e2 20       |                 sep 20               
2799:001 | DONE ctl | na  8 16 |        |             |         .!a8
2800:000 | DONE ins | na  8 16 | 0067f8 | a1 00       |                 lda.dxi 00           get first character
2801:000 | DONE ins | na  8 16 | 0067fa | c9 2d       |                 cmp.# 2d             
2802:000 | DONE ins | na  8 16 | 0067fc | c2 20       |                 rep 20               
2802:001 | DONE ctl | na 16 16 |        |             |         .!a16
2803:000 | DONE ins | na 16 16 | 0067fe | d0 09       |                 bne 006809           
2804:000 | DONE wsp | na 16 16 |        |             |
2805:000 | DONE cmt | na 16 16 |        |             |                 ; We have a minus.
2806:000 | DONE ins | na 16 16 | 006800 | 68          |                 pla                  
2807:000 | DONE ins | na 16 16 | 006801 | 09 00 ff    |                 ora.# 0ff00          MSB is minus
2808:000 | DONE ins | na 16 16 | 006804 | 48          |                 pha                  
2809:000 | DONE wsp | na 16 16 |        |             |
2810:000 | DONE ins | na 16 16 | 006805 | f6 00       |                 inc.dx 00            start one character later
2811:000 | DONE ins | na 16 16 | 006807 | c6 06       |                 dec.d 000206         reduce string length by one
2812:000 | DONE wsp | na 16 16 |        |             |
2813:000 | DONE lbl | na 16 16 | 006809 |             | number_dot                           
2814:000 | DONE cmt | na 16 16 |        |             |                 ; if the last character is a dot, strip it off and set a flag
2815:000 | DONE ins | na 16 16 | 006809 | a5 06       |                 lda.d 000206         get the string length
2816:000 | DONE ins | na 16 16 | 00680b | 3a          |                 dec.a                subtract one to convert length to index
2817:000 | DONE ins | na 16 16 | 00680c | 18          |                 clc                  
2818:000 | DONE ins | na 16 16 | 00680d | 75 00       |                 adc.dx 00            add length of string
2819:000 | DONE ins | na 16 16 | 00680f | a8          |                 tay                  
2820:000 | DONE ins | na 16 16 | 006810 | e2 20       |                 sep 20               
2820:001 | DONE ctl | na  8 16 |        |             |         .!a8
2821:000 | DONE ins | na  8 16 | 006812 | b9 00 00    |                 lda.y 0000           get last character
2822:000 | DONE ins | na  8 16 | 006815 | c9 2e       |                 cmp.# 2e             
2823:000 | DONE ins | na  8 16 | 006817 | c2 20       |                 rep 20               
2823:001 | DONE ctl | na 16 16 |        |             |         .!a16
2824:000 | DONE ins | na 16 16 | 006819 | d0 07       |                 bne 006822           
2825:000 | DONE wsp | na 16 16 |        |             |
2826:000 | DONE cmt | na 16 16 |        |             |                 ; we have a dot
2827:000 | DONE ins | na 16 16 | 00681b | 68          |                 pla                  get the flag back
2828:000 | DONE ins | na 16 16 | 00681c | 09 ff 00    |                 ora.# 00ff           LSB is double
2829:000 | DONE ins | na 16 16 | 00681f | 48          |                 pha                  
2830:000 | DONE wsp | na 16 16 |        |             |
2831:000 | DONE ins | na 16 16 | 006820 | c6 06       |                 dec.d 000206         reduce string length by one
2832:000 | DONE wsp | na 16 16 |        |             |
2833:000 | DONE lbl | na 16 16 | 006822 |             | number_main                          
2834:000 | DONE cmt | na 16 16 |        |             |                 ; set up stack for subroutine jump to >NUMBER
2835:000 | DONE ins | na 16 16 | 006822 | b5 00       |                 lda.dx 00            get the string address to safety
2836:000 | DONE ins | na 16 16 | 006824 | 74 00       |                 stz.dx 00            NOS is now zero
2837:000 | DONE ins | na 16 16 | 006826 | ca          |                 dex                  
2838:000 | DONE ins | na 16 16 | 006827 | ca          |                 dex                  
2839:000 | DONE ins | na 16 16 | 006828 | 74 00       |                 stz.dx 00            3OS and NOS are now zero
2840:000 | DONE ins | na 16 16 | 00682a | ca          |                 dex                  
2841:000 | DONE ins | na 16 16 | 00682b | ca          |                 dex                  
2842:000 | DONE wsp | na 16 16 |        |             |
2843:000 | DONE ins | na 16 16 | 00682c | 95 00       |                 sta.dx 00            address is back as NOS
2844:000 | DONE ins | na 16 16 | 00682e | a4 06       |                 ldy.d 000206         length is back as TOS
2845:000 | DONE wsp | na 16 16 |        |             |
2846:000 | DONE lbl | na 16 16 | 006830 |             | number_loop                          
2847:000 | DONE ins | na 16 16 | 006830 | 20 29 61    |                 jsr 006129           ( ud addr u -- ud addr u )
2848:000 | DONE wsp | na 16 16 |        |             |
2849:000 | DONE ins | na 16 16 | 006833 | 98          |                 tya                  test length of returned string, should be 0
2850:000 | DONE ins | na 16 16 | 006834 | f0 06       |                 beq 00683c           
2851:000 | DONE wsp | na 16 16 |        |             |
2852:000 | DONE cmt | na 16 16 |        |             |                 ; Something went wrong during conversion, we still have stuff
2853:000 | DONE cmt | na 16 16 |        |             |                 ; left over. Print error string and abort. If number was called
2854:000 | DONE cmt | na 16 16 |        |             |                 ; by INTERPRET, we've already checked for words, so we're in
2855:000 | DONE cmt | na 16 16 |        |             |                 ; trouble one way or another
2856:000 | DONE cmt | na 16 16 |        |             |                 ; TODO print offending string
2857:000 | DONE ins | na 16 16 | 006836 | a9 6a 79    |                 lda.# 00796a         
2858:000 | DONE ins | na 16 16 | 006839 | 4c e5 72    |                 jmp 0072e5           
2859:000 | DONE wsp | na 16 16 |        |             |
2860:000 | DONE lbl | na 16 16 | 00683c |             | number_ok                            
2861:000 | DONE cmt | na 16 16 |        |             |                 ; All characters successfully converted. Drop the string info
2862:000 | DONE ins | na 16 16 | 00683c | b4 02       |                 ldy.dx 02            
2863:000 | DONE ins | na 16 16 | 00683e | e8          |                 inx                  
2864:000 | DONE ins | na 16 16 | 00683f | e8          |                 inx                  
2865:000 | DONE ins | na 16 16 | 006840 | e8          |                 inx                  
2866:000 | DONE ins | na 16 16 | 006841 | e8          |                 inx                  
2867:000 | DONE wsp | na 16 16 |        |             |
2868:000 | DONE cmt | na 16 16 |        |             |                 ; We have a double-cell number on the Data Stack that might have
2869:000 | DONE cmt | na 16 16 |        |             |                 ; a minus and might actually be single-cell
2870:000 | DONE ins | na 16 16 | 006842 | 68          |                 pla                  get copy of the flags
2871:000 | DONE ins | na 16 16 | 006843 | 48          |                 pha                  
2872:000 | DONE ins | na 16 16 | 006844 | 29 ff 00    |                 and.# 00ff           only keep the part with the number size (LSB)
2873:000 | DONE ins | na 16 16 | 006847 | f0 1b       |                 beq 006864           
2874:000 | DONE wsp | na 16 16 |        |             |
2875:000 | DONE cmt | na 16 16 |        |             |                 ; This is a double-cell number. If it had a minus, we'll have to
2876:000 | DONE cmt | na 16 16 |        |             |                 ; negate it
2877:000 | DONE ins | na 16 16 | 006849 | 68          |                 pla                  
2878:000 | DONE ins | na 16 16 | 00684a | 29 00 ff    |                 and.# 0ff00          only keep part with the sing (MSB)
2879:000 | DONE ins | na 16 16 | 00684d | f0 25       |                 beq 006874           no minus, all done
2880:000 | DONE wsp | na 16 16 |        |             |
2881:000 | DONE ins | na 16 16 | 00684f | b5 00       |                 lda.dx 00            DNEGATE, starts with LSW
2882:000 | DONE ins | na 16 16 | 006851 | 49 ff ff    |                 eor.# 0ffff          
2883:000 | DONE wsp | na 16 16 |        |             |
2884:000 | DONE cmt | na 16 16 |        |             |                 ; INC won't affect the carry flag, so we have to do this the
2885:000 | DONE cmt | na 16 16 |        |             |                 ; hard way
2886:000 | DONE ins | na 16 16 | 006854 | 18          |                 clc                  
2887:000 | DONE ins | na 16 16 | 006855 | 69 01 00    |                 adc.# 0001           
2888:000 | DONE ins | na 16 16 | 006858 | 95 00       |                 sta.dx 00            
2889:000 | DONE wsp | na 16 16 |        |             |
2890:000 | DONE cmt | na 16 16 |        |             |                 ; now MSW (in TOS)
2891:000 | DONE ins | na 16 16 | 00685a | 98          |                 tya                  
2892:000 | DONE ins | na 16 16 | 00685b | 49 ff ff    |                 eor.# 0ffff          
2893:000 | DONE ins | na 16 16 | 00685e | 69 00 00    |                 adc.# 0000           we are only interested in the carry
2894:000 | DONE ins | na 16 16 | 006861 | a8          |                 tay                  
2895:000 | DONE wsp | na 16 16 |        |             |
2896:000 | DONE ins | na 16 16 | 006862 | 80 10       |                 bra 006874           
2897:000 | DONE wsp | na 16 16 |        |             |
2898:000 | DONE lbl | na 16 16 | 006864 |             | number_single                        
2899:000 | DONE cmt | na 16 16 |        |             |                 ; This is a single cell number, so we just drop the top cell
2900:000 | DONE ins | na 16 16 | 006864 | b4 00       |                 ldy.dx 00            
2901:000 | DONE ins | na 16 16 | 006866 | e8          |                 inx                  
2902:000 | DONE ins | na 16 16 | 006867 | e8          |                 inx                  
2903:000 | DONE wsp | na 16 16 |        |             |
2904:000 | DONE cmt | na 16 16 |        |             |                 ; If we have a minus, we'll have to negate it. Note this code is
2905:000 | DONE cmt | na 16 16 |        |             |                 ; doubled for speed
2906:000 | DONE ins | na 16 16 | 006868 | 68          |                 pla                  
2907:000 | DONE ins | na 16 16 | 006869 | 29 00 ff    |                 and.# 0ff00          
2908:000 | DONE ins | na 16 16 | 00686c | f0 06       |                 beq 006874           no minus, all done
2909:000 | DONE wsp | na 16 16 |        |             |
2910:000 | DONE ins | na 16 16 | 00686e | 98          |                 tya                  NEGATE
2911:000 | DONE ins | na 16 16 | 00686f | 49 ff ff    |                 eor.# 0ffff          
2912:000 | DONE ins | na 16 16 | 006872 | 1a          |                 inc.a                
2913:000 | DONE ins | na 16 16 | 006873 | a8          |                 tay                  fall through to end
2914:000 | DONE wsp | na 16 16 |        |             |
2915:000 | DONE lbl | na 16 16 | 006874 |             | z_number                             
2915:001 | DONE ins | na 16 16 | 006874 | 60          |                 rts                  
2916:000 | DONE wsp | na 16 16 |        |             |
2917:000 | DONE wsp | na 16 16 |        |             |
2918:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
2919:000 | DONE cmt | na 16 16 |        |             | ; OR ( n m -- n ) 6 bytes / X cycles
2920:000 | DONE cmt | na 16 16 |        |             | ; Logical OR
2921:000 | DONE lbl | na 16 16 | 006875 |             | xt_or                                
2922:000 | DONE ins | na 16 16 | 006875 | 98          |                 tya                  
2923:000 | DONE ins | na 16 16 | 006876 | 15 00       |                 ora.dx 00            
2924:000 | DONE ins | na 16 16 | 006878 | a8          |                 tay                  
2925:000 | DONE wsp | na 16 16 |        |             |
2926:000 | DONE ins | na 16 16 | 006879 | e8          |                 inx                  
2927:000 | DONE ins | na 16 16 | 00687a | e8          |                 inx                  
2928:000 | DONE wsp | na 16 16 |        |             |
2929:000 | DONE lbl | na 16 16 | 00687b |             | z_or                                 
2929:001 | DONE ins | na 16 16 | 00687b | 60          |                 rts                  
2930:000 | DONE wsp | na 16 16 |        |             |
2931:000 | DONE wsp | na 16 16 |        |             |
2932:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
2933:000 | DONE cmt | na 16 16 |        |             | ; OVER ( n m -- n m n )  6 bytes / 14 cycles
2934:000 | DONE cmt | na 16 16 |        |             | ; Push NOS on Data Stack
2935:000 | DONE lbl | na 16 16 | 00687c |             | xt_over                              
2936:000 | DONE ins | na 16 16 | 00687c | ca          |                 dex                  
2937:000 | DONE ins | na 16 16 | 00687d | ca          |                 dex                  
2938:000 | DONE ins | na 16 16 | 00687e | 94 00       |                 sty.dx 00            
2939:000 | DONE ins | na 16 16 | 006880 | b4 02       |                 ldy.dx 02            
2940:000 | DONE wsp | na 16 16 |        |             |
2941:000 | DONE lbl | na 16 16 | 006882 |             | z_over                               
2941:001 | DONE ins | na 16 16 | 006882 | 60          |                 rts                  
2942:000 | DONE wsp | na 16 16 |        |             |
2943:000 | DONE wsp | na 16 16 |        |             |
2944:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
2945:000 | DONE cmt | na 16 16 |        |             | ; PAD ( -- addr ) 11 bytes / X cycles
2946:000 | DONE cmt | na 16 16 |        |             | ; Return address to a temporary area in free memory for user. Must be at least
2947:000 | DONE cmt | na 16 16 |        |             | ; 84 bytes in size (says ANSI). It is located relative to the compile area
2948:000 | DONE cmt | na 16 16 |        |             | ; pointer (CP) and therefore varies in position. This area is reserved for the
2949:000 | DONE cmt | na 16 16 |        |             | ; user and not used by the system
2950:000 | DONE lbl | na 16 16 | 006883 |             | xt_pad                               
2951:000 | DONE dir | na 16 16 |        |             |         .!a16                        
2952:000 | DONE ins | na 16 16 | 006883 | ca          |                 dex                  
2953:000 | DONE ins | na 16 16 | 006884 | ca          |                 dex                  
2954:000 | DONE ins | na 16 16 | 006885 | 94 00       |                 sty.dx 00            
2955:000 | DONE wsp | na 16 16 |        |             |
2956:000 | DONE ins | na 16 16 | 006887 | a5 00       |                 lda.d 000200         
2957:000 | DONE ins | na 16 16 | 006889 | 18          |                 clc                  
2958:000 | DONE ins | na 16 16 | 00688a | 69 7f 00    |                 adc.# 00007f         
2959:000 | DONE ins | na 16 16 | 00688d | a8          |                 tay                  
2960:000 | DONE wsp | na 16 16 |        |             |
2961:000 | DONE lbl | na 16 16 | 00688e |             | z_pad                                
2961:001 | DONE ins | na 16 16 | 00688e | 60          |                 rts                  
2962:000 | DONE wsp | na 16 16 |        |             |
2963:000 | DONE wsp | na 16 16 |        |             |
2964:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
2965:000 | DONE cmt | na 16 16 |        |             | ; PAGE ( -- ) X bytes / X cycles
2966:000 | DONE cmt | na 16 16 |        |             | ; Clear the screen on vt-100 terminals by sending the code "ESC[2J". This is
2967:000 | DONE cmt | na 16 16 |        |             | ; only useful in interactive scenarios so we don't worry about speed
2968:000 | DONE cmt | na 16 16 |        |             | ; TODO rewrite with EMIT
2969:000 | DONE lbl | na 16 16 | 00688f |             | xt_page                              
2970:000 | DONE ins | na 16 16 | 00688f | a9 79 79    |                 lda.# 007979         
2971:000 | DONE ins | na 16 16 | 006892 | 20 eb 72    |                 jsr 0072eb           
2972:000 | DONE wsp | na 16 16 |        |             |
2973:000 | DONE cmt | na 16 16 |        |             |                 ; In theory, this should have moved the cursor to the top left
2974:000 | DONE cmt | na 16 16 |        |             |                 ; corner ("home"), but this doesn't seem to work in practice.
2975:000 | DONE cmt | na 16 16 |        |             |                 ; So we send "ESC[H" as well.
2976:000 | DONE ins | na 16 16 | 006895 | a9 7e 79    |                 lda.# 00797e         
2977:000 | DONE ins | na 16 16 | 006898 | 20 eb 72    |                 jsr 0072eb           
2978:000 | DONE wsp | na 16 16 |        |             |
2979:000 | DONE lbl | na 16 16 | 00689b |             | z_page                               
2979:001 | DONE ins | na 16 16 | 00689b | 60          |                 rts                  
2980:000 | DONE wsp | na 16 16 |        |             |
2981:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
2982:000 | DONE cmt | na 16 16 |        |             | ; PARSE-NAME ( "name" -- addr u ) 41+ bytes / X cycles
2983:000 | DONE cmt | na 16 16 |        |             | ; Find next word in input string, skipping leading spaces. This is a special
2984:000 | DONE cmt | na 16 16 |        |             | ; form of PARSE and drops through to that word. See PARSE for more detail. We
2985:000 | DONE cmt | na 16 16 |        |             | ; use this word internally for the interpreter because it is a lot easier to use
2986:000 | DONE cmt | na 16 16 |        |             | ; http://forth-standard.org/standard/core/PARSE-NAME has a Forth implementation
2987:000 | DONE cmt | na 16 16 |        |             | ; Roughly, the word is comparable to  BL WORD COUNT in old terms.
2988:000 | DONE lbl | na 16 16 | 00689c |             | xt_parse-name                        
2989:000 | DONE dir | na 16 16 |        |             |         .!a16                        
2990:000 | DONE dir | na 16 16 |        |             |         .!xy16                       
2991:000 | DONE cmt | na 16 16 |        |             |                 ; skip leading spaces, changing >IN, then place SPACE
2992:000 | DONE cmt | na 16 16 |        |             |                 ; character on data stack for PARSE
2993:000 | DONE ins | na 16 16 | 00689c | 5a          |                 phy                  save TOS for later use
2994:000 | DONE ins | na 16 16 | 00689d | a4 12       |                 ldy.d 000212         >IN
2995:000 | DONE ins | na 16 16 | 00689f | e2 20       |                 sep 20               
2995:001 | DONE ctl | na  8 16 |        |             |         .!a8
2996:000 | DONE lbl | na  8 16 | 0068a1 |             | parse-name_loop                      
2997:000 | DONE ins | na  8 16 | 0068a1 | c4 0e       |                 cpy.d 00020e         end of line?
2998:000 | DONE ins | na  8 16 | 0068a3 | f0 09       |                 beq 0068ae           
2999:000 | DONE wsp | na  8 16 |        |             |
3000:000 | DONE ins | na  8 16 | 0068a5 | b1 0c       |                 lda.diy 00020c       LDA (CIB),Y
3001:000 | DONE ins | na  8 16 | 0068a7 | c9 20       |                 cmp.# AscSP          
3002:000 | DONE ins | na  8 16 | 0068a9 | d0 17       |                 bne 0068c2           
3003:000 | DONE ins | na  8 16 | 0068ab | c8          |                 iny                  
3004:000 | DONE ins | na  8 16 | 0068ac | 80 f3       |                 bra 0068a1           
3005:000 | DONE wsp | na  8 16 |        |             |
3006:000 | DONE lbl | na  8 16 | 0068ae |             | parse-name_empty_line                
3007:000 | DONE ins | na  8 16 | 0068ae | c2 20       |                 rep 20               
3007:001 | DONE ctl | na 16 16 |        |             |         .!a16
3008:000 | DONE cmt | na 16 16 |        |             |                 ; The Gforth documentation does not say what address is returned
3009:000 | DONE cmt | na 16 16 |        |             |                 ; if a string with only spaces is returned. Experiments with
3010:000 | DONE cmt | na 16 16 |        |             |                 ; the word  : PNT ( "name" -- ) PARSE-NAME SWAP U. U. TYPE ;
3011:000 | DONE cmt | na 16 16 |        |             |                 ; show that it returns the address of the last space in the
3012:000 | DONE cmt | na 16 16 |        |             |                 ; input, which is cib+ciblen. So we do that as well.
3013:000 | DONE ins | na 16 16 | 0068b0 | ca          |                 dex                  
3014:000 | DONE ins | na 16 16 | 0068b1 | ca          |                 dex                  
3015:000 | DONE ins | na 16 16 | 0068b2 | ca          |                 dex                  
3016:000 | DONE ins | na 16 16 | 0068b3 | ca          |                 dex                  
3017:000 | DONE wsp | na 16 16 |        |             |
3018:000 | DONE ins | na 16 16 | 0068b4 | 7a          |                 ply                  restore old TOS as 3OS
3019:000 | DONE ins | na 16 16 | 0068b5 | 94 02       |                 sty.dx 02            
3020:000 | DONE wsp | na 16 16 |        |             |
3021:000 | DONE ins | na 16 16 | 0068b7 | a5 0c       |                 lda.d 00020c         
3022:000 | DONE ins | na 16 16 | 0068b9 | 18          |                 clc                  
3023:000 | DONE ins | na 16 16 | 0068ba | 65 0e       |                 adc.d 00020e         
3024:000 | DONE ins | na 16 16 | 0068bc | 95 00       |                 sta.dx 00            Address as NOS
3025:000 | DONE wsp | na 16 16 |        |             |
3026:000 | DONE ins | na 16 16 | 0068be | a0 00 00    |                 ldy.# 0000           TOS
3027:000 | DONE wsp | na 16 16 |        |             |
3028:000 | DONE ins | na 16 16 | 0068c1 | 60          |                 rts                  don't have to go through PARSE
3029:000 | DONE wsp | na 16 16 |        |             |
3030:000 | DONE lbl | na 16 16 | 0068c2 |             | parse-name_found                     
3031:000 | DONE dir | na 16 16 |        |             |         .!xy16                       
3032:000 | DONE ins | na 16 16 | 0068c2 | c2 20       |                 rep 20               
3032:001 | DONE ctl | na 16 16 |        |             |         .!a16
3033:000 | DONE ins | na 16 16 | 0068c4 | 84 12       |                 sty.d 000212         new >IN
3034:000 | DONE wsp | na 16 16 |        |             |
3035:000 | DONE ins | na 16 16 | 0068c6 | 7a          |                 ply                  recover TOS
3036:000 | DONE ins | na 16 16 | 0068c7 | ca          |                 dex                  
3037:000 | DONE ins | na 16 16 | 0068c8 | ca          |                 dex                  
3038:000 | DONE ins | na 16 16 | 0068c9 | 94 00       |                 sty.dx 00            
3039:000 | DONE wsp | na 16 16 |        |             |
3040:000 | DONE ins | na 16 16 | 0068cb | a0 20 00    |                 ldy.# AscSP          put space on TOS for PARSE
3041:000 | DONE wsp | na 16 16 |        |             |
3042:000 | DONE cmt | na 16 16 |        |             |                 ; fall thru to PARSE
3043:000 | DONE wsp | na 16 16 |        |             |
3044:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
3045:000 | DONE cmt | na 16 16 |        |             | ; PARSE ( c "name" -- addr u ) 45 bytes / X+ cycles
3046:000 | DONE cmt | na 16 16 |        |             | ; Find word in input string delimited by character given Do not skip leading
3047:000 | DONE cmt | na 16 16 |        |             | ; delimiters, this is an important difference to PARSE-NAME. PARSE and
3048:000 | DONE cmt | na 16 16 |        |             | ; PARSE-NAME replace WORD in modern systems. See the ANSI documentation at
3049:000 | DONE cmt | na 16 16 |        |             | ; http://www.forth200x.org/documents/html3/rationale.html#rat:core:PARSE
3050:000 | DONE cmt | na 16 16 |        |             | ; PARSE-NAME drops through to here
3051:000 | DONE cmt | na 16 16 |        |             | ;
3052:000 | DONE cmt | na 16 16 |        |             | ;    cib   cib+toin    cib+ciblen
3053:000 | DONE cmt | na 16 16 |        |             | ;     v       v             v
3054:000 | DONE cmt | na 16 16 |        |             | ;     |#####################|              Length of found string:
3055:000 | DONE cmt | na 16 16 |        |             | ;                                          ciblen - toin
3056:000 | DONE cmt | na 16 16 |        |             | ;     +------>|  toin (>IN)
3057:000 | DONE cmt | na 16 16 |        |             | ;     +-------------------->|  ciblen
3058:000 | DONE cmt | na 16 16 |        |             | ;
3059:000 | DONE cmt | na 16 16 |        |             | ; The input string is stored starting at the address in the Current Input Buffer
3060:000 | DONE cmt | na 16 16 |        |             | ; (CIB), the length of which is in CIBLEN. While searching for the delimiter,
3061:000 | DONE cmt | na 16 16 |        |             | ; TOIN (>IN) points to the where we currently are. Since PARSE does not skip
3062:000 | DONE cmt | na 16 16 |        |             | ; leading delimiters, we assume we are on a useful string.
3063:000 | DONE lbl | na 16 16 | 0068ce |             | xt_parse                             
3064:000 | DONE dir | na 16 16 |        |             |         .!a16                        
3065:000 | DONE dir | na 16 16 |        |             |         .!xy16                       
3066:000 | DONE ins | na 16 16 | 0068ce | 84 16       |                 sty.d 000216         save delimiter, char is LSB
3067:000 | DONE wsp | na 16 16 |        |             |
3068:000 | DONE cmt | na 16 16 |        |             |                 ; save beginning of new word (cib+toin) to NOS. Don't need to
3069:000 | DONE cmt | na 16 16 |        |             |                 ; worry about TOS because Y gets clobbered anyway before we
3070:000 | DONE cmt | na 16 16 |        |             |                 ; return
3071:000 | DONE ins | na 16 16 | 0068d0 | a5 12       |                 lda.d 000212         
3072:000 | DONE ins | na 16 16 | 0068d2 | 85 1a       |                 sta.d 00021a         save >IN for later length calculation
3073:000 | DONE ins | na 16 16 | 0068d4 | 18          |                 clc                  
3074:000 | DONE ins | na 16 16 | 0068d5 | 65 0c       |                 adc.d 00020c         
3075:000 | DONE wsp | na 16 16 |        |             |
3076:000 | DONE ins | na 16 16 | 0068d7 | ca          |                 dex                  save addr as NOS
3077:000 | DONE ins | na 16 16 | 0068d8 | ca          |                 dex                  
3078:000 | DONE ins | na 16 16 | 0068d9 | 95 00       |                 sta.dx 00            
3079:000 | DONE wsp | na 16 16 |        |             |
3080:000 | DONE ins | na 16 16 | 0068db | 64 18       |                 stz.d 000218         offset for EOL/char found adjustment of >IN
3081:000 | DONE wsp | na 16 16 |        |             |
3082:000 | DONE cmt | na 16 16 |        |             |                 ; prepare loop using Y as index
3083:000 | DONE ins | na 16 16 | 0068dd | a4 12       |                 ldy.d 000212         
3084:000 | DONE ins | na 16 16 | 0068df | e2 20       |                 sep 20               
3084:001 | DONE ctl | na  8 16 |        |             |         .!a8
3085:000 | DONE wsp | na  8 16 |        |             |
3086:000 | DONE lbl | na  8 16 | 0068e1 |             | parse_loop                           
3087:000 | DONE ins | na  8 16 | 0068e1 | c4 0e       |                 cpy.d 00020e         check for EOL first
3088:000 | DONE ins | na  8 16 | 0068e3 | f0 0d       |                 beq 0068f2           
3089:000 | DONE wsp | na  8 16 |        |             |
3090:000 | DONE ins | na  8 16 | 0068e5 | b1 0c       |                 lda.diy 00020c       LDA (CIB),Y
3091:000 | DONE ins | na  8 16 | 0068e7 | c5 16       |                 cmp.d 000216         found delimiter?
3092:000 | DONE ins | na  8 16 | 0068e9 | f0 03       |                 beq 0068ee           
3093:000 | DONE ins | na  8 16 | 0068eb | c8          |                 iny                  
3094:000 | DONE ins | na  8 16 | 0068ec | 80 f3       |                 bra 0068e1           
3095:000 | DONE wsp | na  8 16 |        |             |
3096:000 | DONE lbl | na  8 16 | 0068ee |             | parse_found_delimiter                
3097:000 | DONE cmt | na  8 16 |        |             |                 ; If we haven't reached the end of the line, but found
3098:000 | DONE cmt | na  8 16 |        |             |                 ; a delimiter, we want >IN to point to the next character after
3099:000 | DONE cmt | na  8 16 |        |             |                 ; the delimiter, not the delimiter itself. This is what the
3100:000 | DONE cmt | na  8 16 |        |             |                 ; offset is for
3101:000 | DONE ins | na  8 16 | 0068ee | c2 20       |                 rep 20               
3101:001 | DONE ctl | na 16 16 |        |             |         .!a16
3102:000 | DONE ins | na 16 16 | 0068f0 | e6 18       |                 inc.d 000218         
3103:000 | DONE wsp | na 16 16 |        |             |
3104:000 | DONE lbl | na 16 16 | 0068f2 |             | parse_reached_eol                    
3105:000 | DONE cmt | na 16 16 |        |             |                 ; calculate length of string found (see ascii drawing)
3106:000 | DONE dir | na 16 16 |        |             |         .!xy16                       
3107:000 | DONE ins | na 16 16 | 0068f2 | c2 20       |                 rep 20               
3107:001 | DONE ctl | na 16 16 |        |             |         .!a16
3108:000 | DONE ins | na 16 16 | 0068f4 | 98          |                 tya                  
3109:000 | DONE ins | na 16 16 | 0068f5 | 38          |                 sec                  
3110:000 | DONE ins | na 16 16 | 0068f6 | e5 1a       |                 sbc.d 00021a         original value for >IN / index of first char
3111:000 | DONE ins | na 16 16 | 0068f8 | 48          |                 pha                  save so we can manipulate Y
3112:000 | DONE wsp | na 16 16 |        |             |
3113:000 | DONE cmt | na 16 16 |        |             |                 ; calculate new >IN
3114:000 | DONE ins | na 16 16 | 0068f9 | 98          |                 tya                  
3115:000 | DONE ins | na 16 16 | 0068fa | 18          |                 clc                  
3116:000 | DONE ins | na 16 16 | 0068fb | 65 18       |                 adc.d 000218         offset for EOL vs found delimiter
3117:000 | DONE ins | na 16 16 | 0068fd | 85 12       |                 sta.d 000212         
3118:000 | DONE wsp | na 16 16 |        |             |
3119:000 | DONE ins | na 16 16 | 0068ff | 7a          |                 ply                  length of string in TOS
3120:000 | DONE wsp | na 16 16 |        |             |
3121:000 | DONE lbl | na 16 16 | 006900 |             | z_parse-name                         
3122:000 | DONE lbl | na 16 16 | 006900 |             | z_parse                              
3122:001 | DONE ins | na 16 16 | 006900 | 60          |                 rts                  
3123:000 | DONE wsp | na 16 16 |        |             |
3124:000 | DONE wsp | na 16 16 |        |             |
3125:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
3126:000 | DONE cmt | na 16 16 |        |             | ; +! "PLUSSTORE" ( n addr -- ) 15 bytes / X cycles
3127:000 | DONE cmt | na 16 16 |        |             | ; Add NOS to address in TOS
3128:000 | DONE lbl | na 16 16 | 006901 |             | xt_plusstore                         
3129:000 | DONE dir | na 16 16 |        |             |         .!a16                        
3130:000 | DONE ins | na 16 16 | 006901 | b9 00 00    |                 lda.y 0000           
3131:000 | DONE ins | na 16 16 | 006904 | 18          |                 clc                  
3132:000 | DONE ins | na 16 16 | 006905 | 75 00       |                 adc.dx 00            
3133:000 | DONE ins | na 16 16 | 006907 | 99 00 00    |                 sta.y 0000           
3134:000 | DONE wsp | na 16 16 |        |             |
3135:000 | DONE ins | na 16 16 | 00690a | b4 02       |                 ldy.dx 02            
3136:000 | DONE ins | na 16 16 | 00690c | e8          |                 inx                  
3137:000 | DONE ins | na 16 16 | 00690d | e8          |                 inx                  
3138:000 | DONE ins | na 16 16 | 00690e | e8          |                 inx                  
3139:000 | DONE ins | na 16 16 | 00690f | e8          |                 inx                  
3140:000 | DONE wsp | na 16 16 |        |             |
3141:000 | DONE lbl | na 16 16 | 006910 |             | z_plusstore                          
3141:001 | DONE ins | na 16 16 | 006910 | 60          |                 rts                  
3142:000 | DONE wsp | na 16 16 |        |             |
3143:000 | DONE wsp | na 16 16 |        |             |
3144:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
3145:000 | DONE cmt | na 16 16 |        |             | ; POSTPONE ( -- ) X bytes / X cycles
3146:000 | DONE cmt | na 16 16 |        |             | ; Add the compilation behavior of a word to a new word at compile time. If the
3147:000 | DONE cmt | na 16 16 |        |             | ; word that follows it is immediate, include it so that it will be compiled when
3148:000 | DONE cmt | na 16 16 |        |             | ; the word being defined is itself used for a new word. Tricky, but very useful.
3149:000 | DONE cmt | na 16 16 |        |             | ; Because POSTPONE expects a word (not an xt) in the input stream (not on the
3150:000 | DONE cmt | na 16 16 |        |             | ; Data Stack). This means we cannot build words with "jsr xt_postpone, jsr
3151:000 | DONE cmt | na 16 16 |        |             | ; <word>" directly. This word uses tmp1
3152:000 | DONE lbl | na 16 16 | 006911 |             | xt_postpone                          
3153:000 | DONE cmt | na 16 16 |        |             |                 ; get name from string
3154:000 | DONE ins | na 16 16 | 006911 | 20 9c 68    |                 jsr 00689c           ( addr n )
3155:000 | DONE wsp | na 16 16 |        |             |
3156:000 | DONE cmt | na 16 16 |        |             |                 ; if there is no word in stream, complain and abort
3157:000 | DONE ins | na 16 16 | 006914 | d0 06       |                 bne 00691c           
3158:000 | DONE ins | na 16 16 | 006916 | a9 cd 78    |                 lda.# 0078cd         
3159:000 | DONE ins | na 16 16 | 006919 | 4c e5 72    |                 jmp 0072e5           
3160:000 | DONE wsp | na 16 16 |        |             |
3161:000 | DONE lbl | na 16 16 | 00691c |             | pp_got_word                          
3162:000 | DONE cmt | na 16 16 |        |             |                 ; convert to lower
3163:000 | DONE cmt | na 16 16 |        |             |                 ; TODO move this to FIND-NAME
3164:000 | DONE ins | na 16 16 | 00691c | 20 1e 73    |                 jsr 00731e           
3165:000 | DONE wsp | na 16 16 |        |             |
3166:000 | DONE ins | na 16 16 | 00691f | 20 cf 66    |                 jsr 0066cf           ( nt | 0 )
3167:000 | DONE wsp | na 16 16 |        |             |
3168:000 | DONE cmt | na 16 16 |        |             |                 ; if word is not in Dictionary, complain and abort
3169:000 | DONE ins | na 16 16 | 006922 | d0 03       |                 bne 006927           
3170:000 | DONE ins | na 16 16 | 006924 | a9 6a 79    |                 lda.# 00796a         
3171:000 | DONE wsp | na 16 16 |        |             |
3172:000 | DONE lbl | na 16 16 | 006927 |             | pp_got_nt                            
3173:000 | DONE cmt | na 16 16 |        |             |                 ; Keep nt safe for later use
3174:000 | DONE ins | na 16 16 | 006927 | 84 16       |                 sty.d 000216         
3175:000 | DONE wsp | na 16 16 |        |             |
3176:000 | DONE cmt | na 16 16 |        |             |                 ; We need the xt instead of the nt for the actual compiling
3177:000 | DONE ins | na 16 16 | 006929 | 20 cd 67    |                 jsr 0067cd           ( xt )
3178:000 | DONE wsp | na 16 16 |        |             |
3179:000 | DONE cmt | na 16 16 |        |             |                 ; See if this is an immediate word. This is easier with nt than
3180:000 | DONE cmt | na 16 16 |        |             |                 ; with xt
3181:000 | DONE ins | na 16 16 | 00692c | b2 16       |                 lda.di 000216        LDA (TMP1) - get status byte of word
3182:000 | DONE ins | na 16 16 | 00692e | eb          |                 xba                  flags are MSB
3183:000 | DONE ins | na 16 16 | 00692f | 29 02 00    |                 and.# IM             mask everything but Immediate bit
3184:000 | DONE ins | na 16 16 | 006932 | f0 03       |                 beq 006937           
3185:000 | DONE wsp | na 16 16 |        |             |
3186:000 | DONE cmt | na 16 16 |        |             |                 ; The word is immediate, so instead of executing it right now,
3187:000 | DONE cmt | na 16 16 |        |             |                 ; we compile it. xt is on the stack, so this is simple. The RTS
3188:000 | DONE cmt | na 16 16 |        |             |                 ; of COMPILE, takes us back to the original caller
3189:000 | DONE ins | na 16 16 | 006934 | 4c 05 65    |                 jmp 006505           JSR/RTS
3190:000 | DONE wsp | na 16 16 |        |             |
3191:000 | DONE lbl | na 16 16 | 006937 |             | pp_not_immediate                     
3192:000 | DONE cmt | na 16 16 |        |             |                 ; This is not an immediate word, so we enact "deffered
3193:000 | DONE cmt | na 16 16 |        |             |                 ; compilation" by including ' <NAME> COMPILE, which we do by
3194:000 | DONE cmt | na 16 16 |        |             |                 ; compiling the run-time routine of LITERAL, the xt itself, and
3195:000 | DONE cmt | na 16 16 |        |             |                 ; a subroutine jump to COMPILE,
3196:000 | DONE ins | na 16 16 | 006937 | f4 7a 67    |                 phe.# 00677a         PEA LITERAL_RT
3197:000 | DONE ins | na 16 16 | 00693a | 20 c4 72    |                 jsr 0072c4           
3198:000 | DONE wsp | na 16 16 |        |             |
3199:000 | DONE cmt | na 16 16 |        |             |                 ; The xt is TOS. We can't use COMPILE, here because it might
3200:000 | DONE cmt | na 16 16 |        |             |                 ; decided to do something silly like compile it as a native word
3201:000 | DONE cmt | na 16 16 |        |             |                 ; and ruin everything
3202:000 | DONE ins | na 16 16 | 00693d | 20 17 62    |                 jsr 006217           
3203:000 | DONE wsp | na 16 16 |        |             |
3204:000 | DONE cmt | na 16 16 |        |             |                 ; compile COMPILE, - it's RTS takes us back to original caller
3205:000 | DONE ins | na 16 16 | 006940 | f4 05 65    |                 phe.# 006505         
3206:000 | DONE ins | na 16 16 | 006943 | 4c c4 72    |                 jmp 0072c4           JSR/RTS
3207:000 | DONE wsp | na 16 16 |        |             |
3208:000 | DONE lbl | na 16 16 | 006946 |             | z_postpone                           ; never reached
3209:000 | DONE wsp | na 16 16 |        |             |
3210:000 | DONE wsp | na 16 16 |        |             |
3211:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
3212:000 | DONE cmt | na 16 16 |        |             | ; R@ "RFETCH" ( -- n ) (R: n -- n )  X bytes / X cycles
3213:000 | DONE cmt | na 16 16 |        |             | ; Get (not pull) Top of Return Stack. We follow Gforth in that this word is not
3214:000 | DONE cmt | na 16 16 |        |             | ; compiled only, because it can be interesting to know what the top of R is in
3215:000 | DONE cmt | na 16 16 |        |             | ; an interactive setting. However, this causes all kinds of problems if we try
3216:000 | DONE cmt | na 16 16 |        |             | ; to natively compile the word, so it does not get the NC flag even though it is
3217:000 | DONE cmt | na 16 16 |        |             | ; actually short enough to make that reasonable
3218:000 | DONE cmt | na 16 16 |        |             | ; TODO consider special case in COMPILE, see there
3219:000 | DONE lbl | na 16 16 | 006946 |             | xt_rfetch                            
3220:000 | DONE cmt | na 16 16 |        |             |                 ; get return address that is on top of the return stack
3221:000 | DONE ins | na 16 16 | 006946 | 68          |                 pla                  
3222:000 | DONE wsp | na 16 16 |        |             |
3223:000 | DONE ins | na 16 16 | 006947 | ca          |                 dex                  
3224:000 | DONE ins | na 16 16 | 006948 | ca          |                 dex                  
3225:000 | DONE ins | na 16 16 | 006949 | 94 00       |                 sty.dx 00            
3226:000 | DONE wsp | na 16 16 |        |             |
3227:000 | DONE ins | na 16 16 | 00694b | 7a          |                 ply                  get top of return stack and push copy back again
3228:000 | DONE ins | na 16 16 | 00694c | 5a          |                 phy                  
3229:000 | DONE wsp | na 16 16 |        |             |
3230:000 | DONE ins | na 16 16 | 00694d | 48          |                 pha                  restore the return address
3231:000 | DONE wsp | na 16 16 |        |             |
3232:000 | DONE lbl | na 16 16 | 00694e |             | z_rfetch                             
3232:001 | DONE ins | na 16 16 | 00694e | 60          |                 rts                  
3233:000 | DONE wsp | na 16 16 |        |             |
3234:000 | DONE wsp | na 16 16 |        |             |
3235:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
3236:000 | DONE cmt | na 16 16 |        |             | ; R> "FROMR" ( -- n ) (R: n -- )  7 bytes / 23 cycles
3237:000 | DONE cmt | na 16 16 |        |             | ; Move Top of Return Stack to Top of Data Stack. Remember we have to move the
3238:000 | DONE cmt | na 16 16 |        |             | ; jump address out of the way first.
3239:000 | DONE cmt | na 16 16 |        |             | ; TODO consider stripping PHA/PLA if natively compiled (see COMPILE,)
3240:000 | DONE lbl | na 16 16 | 00694f |             | xt_fromr                             
3241:000 | DONE cmt | na 16 16 |        |             |                 ; Rescue the address of the return jump that is currently top of
3242:000 | DONE cmt | na 16 16 |        |             |                 ; the Return Stack. If this word is natively compiled, this is
3243:000 | DONE cmt | na 16 16 |        |             |                 ; a waste of nine cycles
3244:000 | DONE ins | na 16 16 | 00694f | 68          |                 pla                  
3245:000 | DONE wsp | na 16 16 |        |             |
3246:000 | DONE ins | na 16 16 | 006950 | ca          |                 dex                  
3247:000 | DONE ins | na 16 16 | 006951 | ca          |                 dex                  
3248:000 | DONE ins | na 16 16 | 006952 | 94 00       |                 sty.dx 00            
3249:000 | DONE wsp | na 16 16 |        |             |
3250:000 | DONE ins | na 16 16 | 006954 | 7a          |                 ply                  the actual work
3251:000 | DONE wsp | na 16 16 |        |             |
3252:000 | DONE ins | na 16 16 | 006955 | 48          |                 pha                  get return address back
3253:000 | DONE wsp | na 16 16 |        |             |
3254:000 | DONE lbl | na 16 16 | 006956 |             | z_fromr                              
3254:001 | DONE ins | na 16 16 | 006956 | 60          |                 rts                  
3255:000 | DONE wsp | na 16 16 |        |             |
3256:000 | DONE wsp | na 16 16 |        |             |
3257:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
3258:000 | DONE cmt | na 16 16 |        |             | ; REFILL ( -- f ) X bytes / X cycles
3259:000 | DONE cmt | na 16 16 |        |             | ; "Attempt to fill the input buffer from the input source, returning a true flag
3260:000 | DONE cmt | na 16 16 |        |             | ; if successful. When the input source is the user input device, attempt to
3261:000 | DONE cmt | na 16 16 |        |             | ; receive input into the terminal input buffer. If successful, make the result
3262:000 | DONE cmt | na 16 16 |        |             | ; the input buffer, set >IN to zero, and return true. Receipt of a line
3263:000 | DONE cmt | na 16 16 |        |             | ; containing no characters is considered successful. If there is no input
3264:000 | DONE cmt | na 16 16 |        |             | ; available from the current input source, return false. When the input source
3265:000 | DONE cmt | na 16 16 |        |             | ; is a string from EVALUATE, return false and perform no other action."
3266:000 | DONE cmt | na 16 16 |        |             | ; See https://www.complang.tuwien.ac.at/forth/gforth/Docs-html/The-Input-Stream.html
3267:000 | DONE cmt | na 16 16 |        |             | ; and Conklin & Rather p. 156
3268:000 | DONE lbl | na 16 16 | 006957 |             | xt_refill                            
3269:000 | DONE dir | na 16 16 |        |             |         .!a16                        
3270:000 | DONE dir | na 16 16 |        |             |         .!xy16                       
3271:000 | DONE cmt | na 16 16 |        |             |                 ; We handle buffer switches here so that regardless of input
3272:000 | DONE cmt | na 16 16 |        |             |                 ; source, we have access to the previous input. This is not in
3273:000 | DONE cmt | na 16 16 |        |             |                 ; the ANSI specification in any way.
3274:000 | DONE ins | na 16 16 | 006957 | a5 0c       |                 lda.d 00020c         
3275:000 | DONE ins | na 16 16 | 006959 | 49 00 01    |                 eor.# 0100           flip 07d00 / 07c00
3276:000 | DONE ins | na 16 16 | 00695c | 85 0c       |                 sta.d 00020c         
3277:000 | DONE wsp | na 16 16 |        |             |
3278:000 | DONE ins | na 16 16 | 00695e | a5 0e       |                 lda.d 00020e         current length is now previous length
3279:000 | DONE ins | na 16 16 | 006960 | 85 10       |                 sta.d 000210         
3280:000 | DONE wsp | na 16 16 |        |             |
3281:000 | DONE cmt | na 16 16 |        |             |                 ; Get input source from SOURCE-ID. We don't have blocks in this
3282:000 | DONE cmt | na 16 16 |        |             |                 ; version, or else we would have to check BLK first. This is an
3283:000 | DONE cmt | na 16 16 |        |             |                 ; optimized version of a subroutine jump to SOURCE-ID
3284:000 | DONE ins | na 16 16 | 006962 | a5 0a       |                 lda.d 00020a         
3285:000 | DONE ins | na 16 16 | 006964 | d0 14       |                 bne 00697a           
3286:000 | DONE wsp | na 16 16 |        |             |
3287:000 | DONE cmt | na 16 16 |        |             |                 ; SOURCE-ID of zero means we're getting stuff from the keyboard
3288:000 | DONE cmt | na 16 16 |        |             |                 ; with ACCEPT.
3289:000 | DONE ins | na 16 16 | 006966 | ca          |                 dex                  push Data Stack down twice
3290:000 | DONE ins | na 16 16 | 006967 | ca          |                 dex                  
3291:000 | DONE ins | na 16 16 | 006968 | 94 00       |                 sty.dx 00            
3292:000 | DONE wsp | na 16 16 |        |             |
3293:000 | DONE ins | na 16 16 | 00696a | a5 0c       |                 lda.d 00020c         address of current input buffer NOS
3294:000 | DONE ins | na 16 16 | 00696c | ca          |                 dex                  
3295:000 | DONE ins | na 16 16 | 00696d | ca          |                 dex                  
3296:000 | DONE ins | na 16 16 | 00696e | 95 00       |                 sta.dx 00            
3297:000 | DONE wsp | na 16 16 |        |             |
3298:000 | DONE ins | na 16 16 | 006970 | a0 ff 00    |                 ldy.# 0000ff         
3299:000 | DONE wsp | na 16 16 |        |             |
3300:000 | DONE ins | na 16 16 | 006973 | 20 ae 63    |                 jsr 0063ae           ( addr n1 -- n2)
3301:000 | DONE wsp | na 16 16 |        |             |
3302:000 | DONE cmt | na 16 16 |        |             |                 ; ACCEPT returns the number of characters accepted, but we don't
3303:000 | DONE cmt | na 16 16 |        |             |                 ; need them. We just overwrite TOS this with the flag
3304:000 | DONE ins | na 16 16 | 006976 | a0 ff ff    |                 ldy.# 0ffff          
3305:000 | DONE wsp | na 16 16 |        |             |
3306:000 | DONE ins | na 16 16 | 006979 | 60          |                 rts                  
3307:000 | DONE wsp | na 16 16 |        |             |
3308:000 | DONE lbl | na 16 16 | 00697a |             | refill_src_not_kbd                   
3309:000 | DONE cmt | na 16 16 |        |             |                 ; If SOURCE-ID doesn't return a zero, it must be a string in
3310:000 | DONE cmt | na 16 16 |        |             |                 ; memory or a file (remember, no blocks in this version)
3311:000 | DONE ins | na 16 16 | 00697a | 1a          |                 inc.a                
3312:000 | DONE ins | na 16 16 | 00697b | d0 06       |                 bne 006983           
3313:000 | DONE wsp | na 16 16 |        |             |
3314:000 | DONE cmt | na 16 16 |        |             |                 ; Simply return FALSE flag as per specification
3315:000 | DONE ins | na 16 16 | 00697d | ca          |                 dex                  
3316:000 | DONE ins | na 16 16 | 00697e | ca          |                 dex                  
3317:000 | DONE ins | na 16 16 | 00697f | 94 00       |                 sty.dx 00            
3318:000 | DONE ins | na 16 16 | 006981 | a8          |                 tay                  
3319:000 | DONE wsp | na 16 16 |        |             |
3320:000 | DONE ins | na 16 16 | 006982 | 60          |                 rts                  
3321:000 | DONE wsp | na 16 16 |        |             |
3322:000 | DONE lbl | na 16 16 | 006983 |             | refill_source_is_not_string          
3323:000 | DONE cmt | na 16 16 |        |             |                 ; Since we don't have blocks, this must mean that we are trying
3324:000 | DONE cmt | na 16 16 |        |             |                 ; to read from a file. However, we don't have files yet, so we
3325:000 | DONE cmt | na 16 16 |        |             |                 ; report an error and jump to ABORT.
3326:000 | DONE ins | na 16 16 | 006983 | a9 22 79    |                 lda.# 007922         
3327:000 | DONE ins | na 16 16 | 006986 | 4c e5 72    |                 jmp 0072e5           
3328:000 | DONE wsp | na 16 16 |        |             |
3329:000 | DONE lbl | na 16 16 | 006989 |             | z_refill                             
3329:001 | DONE ins | na 16 16 | 006989 | 60          |                 rts                  dummy for compiling
3330:000 | DONE wsp | na 16 16 |        |             |
3331:000 | DONE wsp | na 16 16 |        |             |
3332:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
3333:000 | DONE cmt | na 16 16 |        |             | ; ROT ( a b c -- b c a ) X bytes / X cycles
3334:000 | DONE cmt | na 16 16 |        |             | ; Rotate the top three entries downwards (third entry becomes first)
3335:000 | DONE cmt | na 16 16 |        |             | ; Remember this with the "R" for "revolution": The bottom entry becomes the top.
3336:000 | DONE lbl | na 16 16 | 00698a |             | xt_rot                               
3337:000 | DONE dir | na 16 16 |        |             |         .!a16                        
3338:000 | DONE dir | na 16 16 |        |             |         .!xy16                       
3339:000 | DONE ins | na 16 16 | 00698a | b5 00       |                 lda.dx 00            save b
3340:000 | DONE ins | na 16 16 | 00698c | 94 00       |                 sty.dx 00            move c to NOS
3341:000 | DONE ins | na 16 16 | 00698e | b4 02       |                 ldy.dx 02            move a to TOS
3342:000 | DONE ins | na 16 16 | 006990 | 95 02       |                 sta.dx 02            save b as 3OS
3343:000 | DONE wsp | na 16 16 |        |             |
3344:000 | DONE lbl | na 16 16 | 006992 |             | z_rot                                
3344:001 | DONE ins | na 16 16 | 006992 | 60          |                 rts                  
3345:000 | DONE wsp | na 16 16 |        |             |
3346:000 | DONE wsp | na 16 16 |        |             |
3347:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
3348:000 | DONE cmt | na 16 16 |        |             | ; S" "SQUOTE" ( "string" -- addr u ) X bytes / X cycles
3349:000 | DONE cmt | na 16 16 |        |             | ; Store address and length of string given, returning ( addr u ). ANSI core
3350:000 | DONE cmt | na 16 16 |        |             | ; claims this is compile-only, but the file set expands it to be interpreted, so
3351:000 | DONE cmt | na 16 16 |        |             | ; it is a state-sensitive word, which are evil. This can also be realized as
3352:000 | DONE cmt | na 16 16 |        |             | ; : S" [CHAR] " PARSE POSTPONE SLITERAL ; IMMEDIATE  but it is used so much we
3353:000 | DONE cmt | na 16 16 |        |             | ; want it in code
3354:000 | DONE lbl | na 16 16 | 006993 |             | xt_squote                            
3355:000 | DONE cmt | na 16 16 |        |             |                 ; we use PARSE to find the end of the sting. If the string is
3356:000 | DONE cmt | na 16 16 |        |             |                 ; empty, we don't complain, following Gforth's behavior
3357:000 | DONE ins | na 16 16 | 006993 | ca          |                 dex                  
3358:000 | DONE ins | na 16 16 | 006994 | ca          |                 dex                  
3359:000 | DONE ins | na 16 16 | 006995 | 94 00       |                 sty.dx 00            
3360:000 | DONE wsp | na 16 16 |        |             |
3361:000 | DONE ins | na 16 16 | 006997 | a0 22 00    |                 ldy.# 0022           ASCII for " in hex
3362:000 | DONE ins | na 16 16 | 00699a | 20 ce 68    |                 jsr 0068ce           Returns ( addr u ) of string
3363:000 | DONE wsp | na 16 16 |        |             |
3364:000 | DONE cmt | na 16 16 |        |             |                 ; What happens now depends on the state. If we are compiling, we
3365:000 | DONE cmt | na 16 16 |        |             |                 ; include a subroutine jump to SLITERAL to save the string. If
3366:000 | DONE cmt | na 16 16 |        |             |                 ; we are interpreting, we're done
3367:000 | DONE ins | na 16 16 | 00699d | a5 14       |                 lda.d 000214         
3368:000 | DONE ins | na 16 16 | 00699f | f0 03       |                 beq 0069a4           if we're interpreting, we're done
3369:000 | DONE wsp | na 16 16 |        |             |
3370:000 | DONE cmt | na 16 16 |        |             |                 ; We're compiling, so we need SLITERAL. We use it's RTS while
3371:000 | DONE cmt | na 16 16 |        |             |                 ; we're at it
3372:000 | DONE ins | na 16 16 | 0069a1 | 4c c3 69    |                 jmp 0069c3           JSR/RTS
3373:000 | DONE wsp | na 16 16 |        |             |
3374:000 | DONE lbl | na 16 16 | 0069a4 |             | z_squote                             
3374:001 | DONE ins | na 16 16 | 0069a4 | 60          |                 rts                  
3375:000 | DONE wsp | na 16 16 |        |             |
3376:000 | DONE wsp | na 16 16 |        |             |
3377:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
3378:000 | DONE cmt | na 16 16 |        |             | ; S>D ( n -- d ) 15 bytes / X cycles
3379:000 | DONE cmt | na 16 16 |        |             | ; Convert a single cell number to double cells, conserving the sign
3380:000 | DONE lbl | na 16 16 | 0069a5 |             | xt_stod                              
3381:000 | DONE ins | na 16 16 | 0069a5 | ca          |                 dex                  make room on stack
3382:000 | DONE ins | na 16 16 | 0069a6 | ca          |                 dex                  
3383:000 | DONE ins | na 16 16 | 0069a7 | 94 00       |                 sty.dx 00            
3384:000 | DONE wsp | na 16 16 |        |             |
3385:000 | DONE ins | na 16 16 | 0069a9 | 98          |                 tya                  force flag check
3386:000 | DONE ins | na 16 16 | 0069aa | 10 05       |                 bpl 0069b1           
3387:000 | DONE wsp | na 16 16 |        |             |
3388:000 | DONE cmt | na 16 16 |        |             |                 ; negative number, extend sign
3389:000 | DONE ins | na 16 16 | 0069ac | a0 ff ff    |                 ldy.# 0ffff          
3390:000 | DONE ins | na 16 16 | 0069af | 80 03       |                 bra 0069b4           
3391:000 | DONE wsp | na 16 16 |        |             |
3392:000 | DONE lbl | na 16 16 | 0069b1 |             | stod_pos                             
3393:000 | DONE cmt | na 16 16 |        |             |                 ; positive number
3394:000 | DONE ins | na 16 16 | 0069b1 | a0 00 00    |                 ldy.# 0000           fall through
3395:000 | DONE wsp | na 16 16 |        |             |
3396:000 | DONE lbl | na 16 16 | 0069b4 |             | z_stod                               
3396:001 | DONE ins | na 16 16 | 0069b4 | 60          |                 rts                  
3397:000 | DONE wsp | na 16 16 |        |             |
3398:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
3399:000 | DONE cmt | na 16 16 |        |             | ; SIGN ( n -- ) 13 bytes / X cycles
3400:000 | DONE cmt | na 16 16 |        |             | ; If TOS is negative, add a minus sign to the pictured output. Code based on
3401:000 | DONE cmt | na 16 16 |        |             | ; https://github.com/philburk/pforth/blob/master/fth/system.fth
3402:000 | DONE cmt | na 16 16 |        |             | ; Origin Forth code is  0< IF [CHAR] - HOLD THEN
3403:000 | DONE lbl | na 16 16 | 0069b5 |             | xt_sign                              
3404:000 | DONE dir | na 16 16 |        |             |         .!a16                        
3405:000 | DONE cmt | na 16 16 |        |             |                 ; See if number is negative
3406:000 | DONE ins | na 16 16 | 0069b5 | 98          |                 tya                  force flag check
3407:000 | DONE ins | na 16 16 | 0069b6 | 10 06       |                 bpl 0069be           
3408:000 | DONE wsp | na 16 16 |        |             |
3409:000 | DONE cmt | na 16 16 |        |             |                 ; We're negative, overwrite number TOS
3410:000 | DONE ins | na 16 16 | 0069b8 | a0 2d 00    |                 ldy.# 002d           ASCII for '-'
3411:000 | DONE wsp | na 16 16 |        |             |
3412:000 | DONE ins | na 16 16 | 0069bb | 4c 42 67    |                 jmp 006742           JSR/RTS, does not fall through
3413:000 | DONE wsp | na 16 16 |        |             |
3414:000 | DONE lbl | na 16 16 | 0069be |             | sign_plus                            
3415:000 | DONE ins | na 16 16 | 0069be | b4 00       |                 ldy.dx 00            get rid of number and leave
3416:000 | DONE ins | na 16 16 | 0069c0 | e8          |                 inx                  
3417:000 | DONE ins | na 16 16 | 0069c1 | e8          |                 inx                  
3418:000 | DONE wsp | na 16 16 |        |             |
3419:000 | DONE lbl | na 16 16 | 0069c2 |             | z_sign                               
3419:001 | DONE ins | na 16 16 | 0069c2 | 60          |                 rts                  
3420:000 | DONE wsp | na 16 16 |        |             |
3421:000 | DONE wsp | na 16 16 |        |             |
3422:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
3423:000 | DONE cmt | na 16 16 |        |             | ; SLITERAL ( addr u -- ) ( -- addr u ) X bytes / X cycles
3424:000 | DONE cmt | na 16 16 |        |             | ; At compile time, store string, at runtime, return address and length of string
3425:000 | DONE cmt | na 16 16 |        |             | ; on the Data Stack. Used for S" among other things. This routine uses tmp1,
3426:000 | DONE cmt | na 16 16 |        |             | ; tmp2
3427:000 | DONE lbl | na 16 16 | 0069c3 |             | xt_sliteral                          
3428:000 | DONE dir | na 16 16 |        |             |         .!a16                        
3429:000 | DONE cmt | na 16 16 |        |             |                 ; We can't assume that ( addr u ) of the current string is in
3430:000 | DONE cmt | na 16 16 |        |             |                 ; a stable area, so we first have to move them to safety. Since
3431:000 | DONE cmt | na 16 16 |        |             |                 ; CP points to where the interpreter expects to be able to
3432:000 | DONE cmt | na 16 16 |        |             |                 ; continue in the code, we have to jump over the string. We use
3433:000 | DONE cmt | na 16 16 |        |             |                 ; JMP instead of BRA so we can use longer strings
3434:000 | DONE ins | na 16 16 | 0069c3 | b5 00       |                 lda.dx 00            Address of string is NOS
3435:000 | DONE ins | na 16 16 | 0069c5 | 85 16       |                 sta.d 000216         
3436:000 | DONE ins | na 16 16 | 0069c7 | 84 18       |                 sty.d 000218         keep copy of string length
3437:000 | DONE wsp | na 16 16 |        |             |
3438:000 | DONE ins | na 16 16 | 0069c9 | e2 20       |                 sep 20               
3438:001 | DONE ctl | na  8 16 |        |             |         .!a8
3439:000 | DONE ins | na  8 16 | 0069cb | a9 4c       |                 lda.# 04c            opcode for JMP
3440:000 | DONE ins | na  8 16 | 0069cd | 92 00       |                 sta.di 000200        STA (CP)
3441:000 | DONE ins | na  8 16 | 0069cf | c2 20       |                 rep 20               
3441:001 | DONE ctl | na 16 16 |        |             |         .!a16
3442:000 | DONE ins | na 16 16 | 0069d1 | e6 00       |                 inc.d 000200         
3443:000 | DONE wsp | na 16 16 |        |             |
3444:000 | DONE cmt | na 16 16 |        |             |                 ; Our jump target is CP + 2 (for the length of the jump
3445:000 | DONE cmt | na 16 16 |        |             |                 ; instruction itself ) + the length of the string
3446:000 | DONE ins | na 16 16 | 0069d3 | a5 18       |                 lda.d 000218         string length
3447:000 | DONE ins | na 16 16 | 0069d5 | 1a          |                 inc.a                
3448:000 | DONE ins | na 16 16 | 0069d6 | 1a          |                 inc.a                
3449:000 | DONE wsp | na 16 16 |        |             |
3450:000 | DONE ins | na 16 16 | 0069d7 | 18          |                 clc                  
3451:000 | DONE ins | na 16 16 | 0069d8 | 65 00       |                 adc.d 000200         current address
3452:000 | DONE ins | na 16 16 | 0069da | 92 00       |                 sta.di 000200        store jump target
3453:000 | DONE wsp | na 16 16 |        |             |
3454:000 | DONE cmt | na 16 16 |        |             |                 ; update CP to move past JMP instruction
3455:000 | DONE ins | na 16 16 | 0069dc | e6 00       |                 inc.d 000200         
3456:000 | DONE ins | na 16 16 | 0069de | e6 00       |                 inc.d 000200         
3457:000 | DONE wsp | na 16 16 |        |             |
3458:000 | DONE cmt | na 16 16 |        |             |                 ; now we can safely copy the code
3459:000 | DONE ins | na 16 16 | 0069e0 | 88          |                 dey                  last offset is one less than length
3460:000 | DONE ins | na 16 16 | 0069e1 | e2 20       |                 sep 20               
3460:001 | DONE ctl | na  8 16 |        |             |         .!a8
3461:000 | DONE lbl | na  8 16 | 0069e3 |             | sl_loop                              
3462:000 | DONE ins | na  8 16 | 0069e3 | b1 16       |                 lda.diy 000216       LDA (TMP1),Y
3463:000 | DONE ins | na  8 16 | 0069e5 | 91 00       |                 sta.diy 000200       STA (CP),Y
3464:000 | DONE ins | na  8 16 | 0069e7 | 88          |                 dey                  
3465:000 | DONE ins | na  8 16 | 0069e8 | 10 f9       |                 bpl 0069e3           
3466:000 | DONE wsp | na  8 16 |        |             |
3467:000 | DONE ins | na  8 16 | 0069ea | c2 20       |                 rep 20               
3467:001 | DONE ctl | na 16 16 |        |             |         .!a16
3468:000 | DONE cmt | na 16 16 |        |             |                 ; keep old CP as new address of string
3469:000 | DONE ins | na 16 16 | 0069ec | a5 00       |                 lda.d 000200         
3470:000 | DONE ins | na 16 16 | 0069ee | 85 16       |                 sta.d 000216         overwrites original address
3471:000 | DONE wsp | na 16 16 |        |             |
3472:000 | DONE cmt | na 16 16 |        |             |                 ; update CP
3473:000 | DONE ins | na 16 16 | 0069f0 | 18          |                 clc                  
3474:000 | DONE ins | na 16 16 | 0069f1 | 65 18       |                 adc.d 000218         length of string
3475:000 | DONE ins | na 16 16 | 0069f3 | 85 00       |                 sta.d 000200         
3476:000 | DONE wsp | na 16 16 |        |             |
3477:000 | DONE cmt | na 16 16 |        |             |                 ; Compile a subroutine jump to the runtime of SLITERAL that
3478:000 | DONE cmt | na 16 16 |        |             |                 ; pushes the new ( addr u ) pair to the Data Stack. When we're
3479:000 | DONE cmt | na 16 16 |        |             |                 ; done, the code will look like this:
3480:000 | DONE cmt | na 16 16 |        |             |                 ;
3481:000 | DONE cmt | na 16 16 |        |             |                 ; xt -->    jmp a
3482:000 | DONE cmt | na 16 16 |        |             |                 ;           <string data bytes>
3483:000 | DONE cmt | na 16 16 |        |             |                 ;  a -->    jsr sliteral_rt
3484:000 | DONE cmt | na 16 16 |        |             |                 ;           <string address>
3485:000 | DONE cmt | na 16 16 |        |             |                 ;           <string length>
3486:000 | DONE cmt | na 16 16 |        |             |                 ; rts -->
3487:000 | DONE cmt | na 16 16 |        |             |                 ;
3488:000 | DONE cmt | na 16 16 |        |             |                 ; This means we'll have to adjust the return address for two
3489:000 | DONE cmt | na 16 16 |        |             |                 ; cells, not just one
3490:000 | DONE ins | na 16 16 | 0069f5 | f4 0e 6a    |                 phe.# 006a0e         
3491:000 | DONE ins | na 16 16 | 0069f8 | 20 c4 72    |                 jsr 0072c4           
3492:000 | DONE wsp | na 16 16 |        |             |
3493:000 | DONE cmt | na 16 16 |        |             |                 ; We want to have the addr end up as NOS and the length as TOS,
3494:000 | DONE cmt | na 16 16 |        |             |                 ; so we store the address first
3495:000 | DONE ins | na 16 16 | 0069fb | a5 16       |                 lda.d 000216         new address of string
3496:000 | DONE ins | na 16 16 | 0069fd | 48          |                 pha                  
3497:000 | DONE ins | na 16 16 | 0069fe | 20 bf 72    |                 jsr 0072bf           
3498:000 | DONE wsp | na 16 16 |        |             |
3499:000 | DONE ins | na 16 16 | 006a01 | a5 18       |                 lda.d 000218         
3500:000 | DONE ins | na 16 16 | 006a03 | 48          |                 pha                  
3501:000 | DONE ins | na 16 16 | 006a04 | 20 bf 72    |                 jsr 0072bf           
3502:000 | DONE wsp | na 16 16 |        |             |
3503:000 | DONE cmt | na 16 16 |        |             |                 ; all done, clean up and leave
3504:000 | DONE ins | na 16 16 | 006a07 | b4 02       |                 ldy.dx 02            2DROP
3505:000 | DONE ins | na 16 16 | 006a09 | e8          |                 inx                  
3506:000 | DONE ins | na 16 16 | 006a0a | e8          |                 inx                  
3507:000 | DONE ins | na 16 16 | 006a0b | e8          |                 inx                  
3508:000 | DONE ins | na 16 16 | 006a0c | e8          |                 inx                  
3509:000 | DONE wsp | na 16 16 |        |             |
3510:000 | DONE lbl | na 16 16 | 006a0d |             | z_sliteral                           
3510:001 | DONE ins | na 16 16 | 006a0d | 60          |                 rts                  
3511:000 | DONE wsp | na 16 16 |        |             |
3512:000 | DONE lbl | na 16 16 | 006a0e |             | sliteral_rt                          
3513:000 | DONE cmt | na 16 16 |        |             |                 ; Run time behaviour of SLITERAL: Push ( addr u ) of string to
3514:000 | DONE cmt | na 16 16 |        |             |                 ; the Data Stack. We arrive here with the return address as the
3515:000 | DONE cmt | na 16 16 |        |             |                 ; top of Return Stack, which points to the address of the string
3516:000 | DONE wsp | na 16 16 |        |             |
3517:000 | DONE cmt | na 16 16 |        |             |                 ; Make room on stack, which also frees Y for other use
3518:000 | DONE ins | na 16 16 | 006a0e | ca          |                 dex                  
3519:000 | DONE ins | na 16 16 | 006a0f | ca          |                 dex                  
3520:000 | DONE ins | na 16 16 | 006a10 | ca          |                 dex                  
3521:000 | DONE ins | na 16 16 | 006a11 | ca          |                 dex                  
3522:000 | DONE ins | na 16 16 | 006a12 | 94 02       |                 sty.dx 02            
3523:000 | DONE wsp | na 16 16 |        |             |
3524:000 | DONE cmt | na 16 16 |        |             |                 ; Get the address of the string address off the stack and
3525:000 | DONE cmt | na 16 16 |        |             |                 ; increase by one because of the RTS mechanics
3526:000 | DONE ins | na 16 16 | 006a14 | 7a          |                 ply                  
3527:000 | DONE ins | na 16 16 | 006a15 | c8          |                 iny                  
3528:000 | DONE wsp | na 16 16 |        |             |
3529:000 | DONE ins | na 16 16 | 006a16 | b9 00 00    |                 lda.y 0000           LDA $0000,Y
3530:000 | DONE ins | na 16 16 | 006a19 | 95 00       |                 sta.dx 00            save string address as NOS
3531:000 | DONE ins | na 16 16 | 006a1b | c8          |                 iny                  
3532:000 | DONE ins | na 16 16 | 006a1c | c8          |                 iny                  
3533:000 | DONE ins | na 16 16 | 006a1d | b9 00 00    |                 lda.y 0000           get length of string, will be TOS ...
3534:000 | DONE wsp | na 16 16 |        |             |
3535:000 | DONE ins | na 16 16 | 006a20 | c8          |                 iny                  ... first, though, repair return jump
3536:000 | DONE ins | na 16 16 | 006a21 | 5a          |                 phy                  
3537:000 | DONE wsp | na 16 16 |        |             |
3538:000 | DONE ins | na 16 16 | 006a22 | a8          |                 tay                  TOS is now length of string
3539:000 | DONE wsp | na 16 16 |        |             |
3540:000 | DONE ins | na 16 16 | 006a23 | 60          |                 rts                  
3541:000 | DONE wsp | na 16 16 |        |             |
3542:000 | DONE wsp | na 16 16 |        |             |
3543:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
3544:000 | DONE cmt | na 16 16 |        |             | ; SOURCE ( -- addr u ) 12 bytes / X cycles
3545:000 | DONE cmt | na 16 16 |        |             | ; Return the address and size of current input buffer. Replaces TIB and #TIB in
3546:000 | DONE cmt | na 16 16 |        |             | ; ANSI Forth
3547:000 | DONE wsp | na 16 16 |        |             |
3548:000 | DONE lbl | na 16 16 | 006a24 |             | xt_source                            
3549:000 | DONE ins | na 16 16 | 006a24 | ca          |                 dex                  make room on Data Stack
3550:000 | DONE ins | na 16 16 | 006a25 | ca          |                 dex                  
3551:000 | DONE ins | na 16 16 | 006a26 | ca          |                 dex                  
3552:000 | DONE ins | na 16 16 | 006a27 | ca          |                 dex                  
3553:000 | DONE ins | na 16 16 | 006a28 | 94 02       |                 sty.dx 02            
3554:000 | DONE wsp | na 16 16 |        |             |
3555:000 | DONE ins | na 16 16 | 006a2a | a5 0c       |                 lda.d 00020c         address of current input buffer as NOS
3556:000 | DONE ins | na 16 16 | 006a2c | 95 00       |                 sta.dx 00            
3557:000 | DONE wsp | na 16 16 |        |             |
3558:000 | DONE ins | na 16 16 | 006a2e | a4 0e       |                 ldy.d 00020e         length of current input buffer as TOS
3559:000 | DONE wsp | na 16 16 |        |             |
3560:000 | DONE lbl | na 16 16 | 006a30 |             | z_source                             
3560:001 | DONE ins | na 16 16 | 006a30 | 60          |                 rts                  
3561:000 | DONE wsp | na 16 16 |        |             |
3562:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
3563:000 | DONE cmt | na 16 16 |        |             | ; SOURCE-ID ( -- n ) 6 bytes / 13 cycles
3564:000 | DONE cmt | na 16 16 |        |             | ; Identify the input source unless it is a block (s. Conklin & Rather p. 156).
3565:000 | DONE cmt | na 16 16 |        |             | ; Since we don't have blocks (yet), this will give the input source: 0 is
3566:000 | DONE cmt | na 16 16 |        |             | ; keyboard, -1 (0ffff) is character string, and a text file gives the fileid.
3567:000 | DONE lbl | na 16 16 | 006a31 |             | xt_source-id                         
3568:000 | DONE dir | na 16 16 |        |             |         .!xy16                       
3569:000 | DONE ins | na 16 16 | 006a31 | ca          |                 dex                  
3570:000 | DONE ins | na 16 16 | 006a32 | ca          |                 dex                  
3571:000 | DONE ins | na 16 16 | 006a33 | 94 00       |                 sty.dx 00            
3572:000 | DONE ins | na 16 16 | 006a35 | a4 0a       |                 ldy.d 00020a         
3573:000 | DONE wsp | na 16 16 |        |             |
3574:000 | DONE lbl | na 16 16 | 006a37 |             | z_source-id                          
3574:001 | DONE ins | na 16 16 | 006a37 | 60          |                 rts                  
3575:000 | DONE wsp | na 16 16 |        |             |
3576:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
3577:000 | DONE cmt | na 16 16 |        |             | ; SPACE ( -- ) X bytes / X cycles
3578:000 | DONE cmt | na 16 16 |        |             | ; Print one ASCII space character
3579:000 | DONE cmt | na 16 16 |        |             | ; TODO change to call EMIT
3580:000 | DONE lbl | na 16 16 | 006a38 |             | xt_space                             
3581:000 | DONE ins | na 16 16 | 006a38 | a9 20 00    |                 lda.# AscSP          
3582:000 | DONE ins | na 16 16 | 006a3b | 20 36 60    |                 jsr 006036           
3583:000 | DONE dir | na 16 16 |        |             |         .!a16                        
3584:000 | DONE wsp | na 16 16 |        |             |
3585:000 | DONE lbl | na 16 16 | 006a3e |             | z_space                              
3585:001 | DONE ins | na 16 16 | 006a3e | 60          |                 rts                  
3586:000 | DONE wsp | na 16 16 |        |             |
3587:000 | DONE wsp | na 16 16 |        |             |
3588:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
3589:000 | DONE cmt | na 16 16 |        |             | ; SPACES ( u -- ) 12 bytes / X cycles
3590:000 | DONE cmt | na 16 16 |        |             | ; Print u spaces. Calls SPACE, because this is probably interactive and humans
3591:000 | DONE cmt | na 16 16 |        |             | ; are slow enough we don't have to care about speed.
3592:000 | DONE lbl | na 16 16 | 006a3f |             | xt_spaces                            
3593:000 | DONE dir | na 16 16 |        |             |         .!a16                        
3594:000 | DONE dir | na 16 16 |        |             |         .!xy16                       
3595:000 | DONE lbl | na 16 16 | 006a3f |             | @                                    
3596:000 | DONE ins | na 16 16 | 006a3f | 88          |                 dey                  this also handles case u=0
3597:000 | DONE ins | na 16 16 | 006a40 | 30 05       |                 bmi 006a47           
3598:000 | DONE wsp | na 16 16 |        |             |
3599:000 | DONE ins | na 16 16 | 006a42 | 20 38 6a    |                 jsr 006a38           
3600:000 | DONE ins | na 16 16 | 006a45 | 80 f8       |                 bra 006a3f           
3601:000 | DONE wsp | na 16 16 |        |             |
3602:000 | DONE lbl | na 16 16 | 006a47 |             | spaces_done                          
3603:000 | DONE ins | na 16 16 | 006a47 | b4 00       |                 ldy.dx 00            DROP
3604:000 | DONE ins | na 16 16 | 006a49 | e8          |                 inx                  
3605:000 | DONE ins | na 16 16 | 006a4a | e8          |                 inx                  
3606:000 | DONE wsp | na 16 16 |        |             |
3607:000 | DONE lbl | na 16 16 | 006a4b |             | z_spaces                             
3607:001 | DONE ins | na 16 16 | 006a4b | 60          |                 rts                  
3608:000 | DONE wsp | na 16 16 |        |             |
3609:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
3610:000 | DONE cmt | na 16 16 |        |             | ; STAR ( n n -- n ) 16*16 -> 16  X bytes / X cycles
3611:000 | DONE cmt | na 16 16 |        |             | ; Multiply two signed 16 bit numbers, returning a 16 bit result. This is nothing
3612:000 | DONE cmt | na 16 16 |        |             | ; more than UM* DROP
3613:000 | DONE lbl | na 16 16 | 006a4c |             | xt_star                              
3614:000 | DONE ins | na 16 16 | 006a4c | 20 af 6a    |                 jsr 006aaf           
3615:000 | DONE ins | na 16 16 | 006a4f | b4 00       |                 ldy.dx 00            DROP
3616:000 | DONE ins | na 16 16 | 006a51 | e8          |                 inx                  
3617:000 | DONE ins | na 16 16 | 006a52 | e8          |                 inx                  
3618:000 | DONE wsp | na 16 16 |        |             |
3619:000 | DONE lbl | na 16 16 | 006a53 |             | z_star                               
3619:001 | DONE ins | na 16 16 | 006a53 | 60          |                 rts                  
3620:000 | DONE wsp | na 16 16 |        |             |
3621:000 | DONE wsp | na 16 16 |        |             |
3622:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
3623:000 | DONE cmt | na 16 16 |        |             | ; STATE ( -- addr ) 7 bytes / 12 cycles
3624:000 | DONE cmt | na 16 16 |        |             | ; Return the address of a cell containing the compilation-state flag. STATE
3625:000 | DONE cmt | na 16 16 |        |             | ; is true when in compilation state, false otherwise. STATE should not be
3626:000 | DONE cmt | na 16 16 |        |             | ; changed directly by the user; see
3627:000 | DONE cmt | na 16 16 |        |             | ; http://forth.sourceforge.net/standard/dpans/dpans6.htm#6.1.2250
3628:000 | DONE lbl | na 16 16 | 006a54 |             | xt_state                             
3629:000 | DONE dir | na 16 16 |        |             |         .!xy16                       
3630:000 | DONE ins | na 16 16 | 006a54 | ca          |                 dex                  
3631:000 | DONE ins | na 16 16 | 006a55 | ca          |                 dex                  
3632:000 | DONE ins | na 16 16 | 006a56 | 94 00       |                 sty.dx 00            
3633:000 | DONE ins | na 16 16 | 006a58 | a0 14 02    |                 ldy.# 000214         
3634:000 | DONE wsp | na 16 16 |        |             |
3635:000 | DONE lbl | na 16 16 | 006a5b |             | z_state                              
3635:001 | DONE ins | na 16 16 | 006a5b | 60          |                 rts                  
3636:000 | DONE wsp | na 16 16 |        |             |
3637:000 | DONE wsp | na 16 16 |        |             |
3638:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
3639:000 | DONE cmt | na 16 16 |        |             | ; SWAP ( n m -- m n ) 5 bytes / 12 cycles
3640:000 | DONE cmt | na 16 16 |        |             | ; Exchange TOS with NOS. We don't check if there are enough elements on the Data
3641:000 | DONE cmt | na 16 16 |        |             | ; Stack; underflow errors will go undetected and return garbage.
3642:000 | DONE lbl | na 16 16 | 006a5c |             | xt_swap                              
3643:000 | DONE dir | na 16 16 |        |             |         .!a16                        
3644:000 | DONE dir | na 16 16 |        |             |         .!xy16                       
3645:000 | DONE ins | na 16 16 | 006a5c | b5 00       |                 lda.dx 00            
3646:000 | DONE ins | na 16 16 | 006a5e | 94 00       |                 sty.dx 00            
3647:000 | DONE ins | na 16 16 | 006a60 | a8          |                 tay                  
3648:000 | DONE wsp | na 16 16 |        |             |
3649:000 | DONE lbl | na 16 16 | 006a61 |             | z_swap                               
3649:001 | DONE ins | na 16 16 | 006a61 | 60          |                 rts                  
3650:000 | DONE wsp | na 16 16 |        |             |
3651:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
3652:000 | DONE cmt | na 16 16 |        |             | ; TRUE ( -- f ) 7 bytes / 12 cycles
3653:000 | DONE cmt | na 16 16 |        |             | ; Pushes value $FFFF for Forth true on Data Stack
3654:000 | DONE lbl | na 16 16 | 006a62 |             | xt_true                              
3655:000 | DONE dir | na 16 16 |        |             |         .!a16                        
3656:000 | DONE dir | na 16 16 |        |             |         .!xy16                       
3657:000 | DONE ins | na 16 16 | 006a62 | ca          |                 dex                  
3658:000 | DONE ins | na 16 16 | 006a63 | ca          |                 dex                  
3659:000 | DONE ins | na 16 16 | 006a64 | 94 00       |                 sty.dx 00            
3660:000 | DONE ins | na 16 16 | 006a66 | a0 ff ff    |                 ldy.# 0ffff          
3661:000 | DONE wsp | na 16 16 |        |             |
3662:000 | DONE lbl | na 16 16 | 006a69 |             | z_true                               
3662:001 | DONE ins | na 16 16 | 006a69 | 60          |                 rts                  
3663:000 | DONE wsp | na 16 16 |        |             |
3664:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
3665:000 | DONE cmt | na 16 16 |        |             | ; TUCK ( n m -- m n m ) 8 bytes / 19 cycles
3666:000 | DONE cmt | na 16 16 |        |             | ; Insert TOS below NOS. We do not check if there are enough elements on the Data
3667:000 | DONE cmt | na 16 16 |        |             | ; Stack, underflow will go undetected and return garbage.
3668:000 | DONE lbl | na 16 16 | 006a6a |             | xt_tuck                              
3669:000 | DONE dir | na 16 16 |        |             |         .!a16                        
3670:000 | DONE dir | na 16 16 |        |             |         .!xy16                       
3671:000 | DONE ins | na 16 16 | 006a6a | ca          |                 dex                  
3672:000 | DONE ins | na 16 16 | 006a6b | ca          |                 dex                  
3673:000 | DONE ins | na 16 16 | 006a6c | b5 02       |                 lda.dx 2             
3674:000 | DONE ins | na 16 16 | 006a6e | 95 00       |                 sta.dx 0             
3675:000 | DONE ins | na 16 16 | 006a70 | 94 02       |                 sty.dx 2             
3676:000 | DONE wsp | na 16 16 |        |             |
3677:000 | DONE lbl | na 16 16 | 006a72 |             | z_tuck                               
3677:001 | DONE ins | na 16 16 | 006a72 | 60          |                 rts                  
3678:000 | DONE wsp | na 16 16 |        |             |
3679:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
3680:000 | DONE cmt | na 16 16 |        |             | ; TYPE ( addr u -- ) 23+ bytes / X cycles
3681:000 | DONE cmt | na 16 16 |        |             | ; Print character string if u is not 0. We restrict all calls to put_chr and
3682:000 | DONE cmt | na 16 16 |        |             | ; get_chr to make porting easier.  We call put_chr here directly instead of
3683:000 | DONE cmt | na 16 16 |        |             | ; going through EMIT because EMIT will later have a PAUSE statement for
3684:000 | DONE cmt | na 16 16 |        |             | ; multitasking and we probably don't want to PAUSE after every character.
3685:000 | DONE cmt | na 16 16 |        |             | ; However, we'll make a final decision about that when multitasking is up and
3686:000 | DONE cmt | na 16 16 |        |             | ; running.
3687:000 | DONE lbl | na 16 16 | 006a73 |             | xt_type                              
3688:000 | DONE dir | na 16 16 |        |             |         .!a16                        
3689:000 | DONE dir | na 16 16 |        |             |         .!xy16                       
3690:000 | DONE cmt | na 16 16 |        |             |                 ; just leave if u is zero (empty string)
3691:000 | DONE ins | na 16 16 | 006a73 | 98          |                 tya                  force flag check of TOS
3692:000 | DONE ins | na 16 16 | 006a74 | f0 17       |                 beq 006a8d           
3693:000 | DONE wsp | na 16 16 |        |             |
3694:000 | DONE ins | na 16 16 | 006a76 | b5 00       |                 lda.dx 00            get address from NOS
3695:000 | DONE ins | na 16 16 | 006a78 | 85 16       |                 sta.d 000216         
3696:000 | DONE ins | na 16 16 | 006a7a | 84 18       |                 sty.d 000218         number of chars is TOS
3697:000 | DONE ins | na 16 16 | 006a7c | a0 00 00    |                 ldy.# 0000           
3698:000 | DONE ins | na 16 16 | 006a7f | e2 20       |                 sep 20               
3698:001 | DONE ctl | na  8 16 |        |             |         .!a8
3699:000 | DONE lbl | na  8 16 | 006a81 |             | type_loop                            
3700:000 | DONE ins | na  8 16 | 006a81 | b1 16       |                 lda.diy 000216       LDA (TMP1),Y
3701:000 | DONE ins | na  8 16 | 006a83 | 20 36 60    |                 jsr 006036           
3702:000 | DONE ins | na  8 16 | 006a86 | c8          |                 iny                  
3703:000 | DONE ins | na  8 16 | 006a87 | c4 18       |                 cpy.d 000218         
3704:000 | DONE ins | na  8 16 | 006a89 | d0 f6       |                 bne 006a81           
3705:000 | DONE wsp | na  8 16 |        |             |
3706:000 | DONE ins | na  8 16 | 006a8b | c2 20       |                 rep 20               
3706:001 | DONE ctl | na 16 16 |        |             |         .!a16
3707:000 | DONE lbl | na 16 16 | 006a8d |             | type_done                            
3708:000 | DONE cmt | na 16 16 |        |             |                 ; clear stack
3709:000 | DONE ins | na 16 16 | 006a8d | b4 02       |                 ldy.dx 02            
3710:000 | DONE ins | na 16 16 | 006a8f | e8          |                 inx                  
3711:000 | DONE ins | na 16 16 | 006a90 | e8          |                 inx                  
3712:000 | DONE ins | na 16 16 | 006a91 | e8          |                 inx                  
3713:000 | DONE ins | na 16 16 | 006a92 | e8          |                 inx                  
3714:000 | DONE wsp | na 16 16 |        |             |
3715:000 | DONE cmt | na 16 16 |        |             |                 ; TODO LATER add PAUSE here for multitasking
3716:000 | DONE wsp | na 16 16 |        |             |
3717:000 | DONE lbl | na 16 16 | 006a93 |             | z_type                               
3717:001 | DONE ins | na 16 16 | 006a93 | 60          |                 rts                  
3718:000 | DONE wsp | na 16 16 |        |             |
3719:000 | DONE wsp | na 16 16 |        |             |
3720:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
3721:000 | DONE cmt | na 16 16 |        |             | ; UDMOD ( ud u -- u ud ) 32/16 --> 32  X bytes / X cycles
3722:000 | DONE cmt | na 16 16 |        |             | ; Devide double-cell number by single-cell number, producing a double-cell
3723:000 | DONE cmt | na 16 16 |        |             | ; result and a single-cell remainder. Based on
3724:000 | DONE cmt | na 16 16 |        |             | ; Gforth  : UD/MOD  >R 0 R@ UM/MOD R> SWAP >R UM/MOD R> ;
3725:000 | DONE cmt | na 16 16 |        |             | ; pForth  : UD/MOD  >R 0 R@ UM/MOD ROT ROT R> UM/MOD ROT ;
3726:000 | DONE cmt | na 16 16 |        |             | ; This doesn't seem to be used anywhere else but for # (HASH) in coverting
3727:000 | DONE cmt | na 16 16 |        |             | ; pictured numerical output, though pForth claims it uses UM/MOD for that
3728:000 | DONE cmt | na 16 16 |        |             | ; At some point, we need to get back to UM/MOD because it's optimized
3729:000 | DONE lbl | na 16 16 | 006a94 |             | xt_udmod                             
3730:000 | DONE ins | na 16 16 | 006a94 | 20 86 61    |                 jsr 006186           
3731:000 | DONE ins | na 16 16 | 006a97 | 20 ec 62    |                 jsr 0062ec           
3732:000 | DONE ins | na 16 16 | 006a9a | 20 46 69    |                 jsr 006946           
3733:000 | DONE ins | na 16 16 | 006a9d | 20 0e 6b    |                 jsr 006b0e           
3734:000 | DONE ins | na 16 16 | 006aa0 | 20 8a 69    |                 jsr 00698a           
3735:000 | DONE ins | na 16 16 | 006aa3 | 20 8a 69    |                 jsr 00698a           
3736:000 | DONE ins | na 16 16 | 006aa6 | 20 4f 69    |                 jsr 00694f           
3737:000 | DONE ins | na 16 16 | 006aa9 | 20 0e 6b    |                 jsr 006b0e           
3738:000 | DONE ins | na 16 16 | 006aac | 4c 8a 69    |                 jmp 00698a           JSR/RTS
3739:000 | DONE lbl | na 16 16 | 006aaf |             | z_udmod                              
3740:000 | DONE wsp | na 16 16 |        |             |
3741:000 | DONE wsp | na 16 16 |        |             |
3742:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
3743:000 | DONE cmt | na 16 16 |        |             | ; UM* "UMSTAR" ( u u -- ud ) 16*16 -> 32  X bytes / X cycles
3744:000 | DONE cmt | na 16 16 |        |             | ; Multiply two unsigned 16 bit numbers, producing a 32 bit result.This is based
3745:000 | DONE cmt | na 16 16 |        |             | ; on modified FIG Forth code by Dr. Jefyll, see
3746:000 | DONE cmt | na 16 16 |        |             | ; http://forum.6502.org/viewtopic.php?f=9&t=689 for a detailed discussion. We
3747:000 | DONE cmt | na 16 16 |        |             | ; use the system scratch pad (SYSPAD) for temp storage (N in the original code)
3748:000 | DONE cmt | na 16 16 |        |             | ; FIG Forth is in the public domain. Note old Forth versions such as FIG Forth
3749:000 | DONE cmt | na 16 16 |        |             | ; call this "U*"
3750:000 | DONE wsp | na 16 16 |        |             |
3751:000 | DONE cmt | na 16 16 |        |             | ; This is currently a brute-force loop based on the 8-bit variant in "6502
3752:000 | DONE cmt | na 16 16 |        |             | ; Assembly Language Programming" by Leventhal. Once everything is working,
3753:000 | DONE cmt | na 16 16 |        |             | ; consider switching to a table-supported version based on
3754:000 | DONE cmt | na 16 16 |        |             | ; http://codebase64.org/doku.php?id=base:seriously_fast_multiplication
3755:000 | DONE cmt | na 16 16 |        |             | ; http://codebase64.org/doku.php?id=magazines:chacking16#d_graphics_for_the_masseslib3d_and_cool_world
3756:000 | DONE cmt | na 16 16 |        |             | ; http://forum.6502.org/viewtopic.php?p=205#p205
3757:000 | DONE cmt | na 16 16 |        |             | ; http://forum.6502.org/viewtopic.php?f=9&t=689 We use tmp1, tmp2, tmp3 for
3758:000 | DONE cmt | na 16 16 |        |             | ; this, with the assumption that tmp3 immediately follows tmp2
3759:000 | DONE lbl | na 16 16 | 006aaf |             | xt_umstar                            
3760:000 | DONE dir | na 16 16 |        |             |         .!a16                        
3761:000 | DONE cmt | na 16 16 |        |             |                 ; SPECIAL CASE 1: multiplication by zero
3762:000 | DONE ins | na 16 16 | 006aaf | 98          |                 tya                  
3763:000 | DONE ins | na 16 16 | 006ab0 | f0 3d       |                 beq 006aef           
3764:000 | DONE ins | na 16 16 | 006ab2 | b5 00       |                 lda.dx 00            
3765:000 | DONE ins | na 16 16 | 006ab4 | f0 39       |                 beq 006aef           
3766:000 | DONE wsp | na 16 16 |        |             |
3767:000 | DONE cmt | na 16 16 |        |             |                 ; SPECIAL CASE 2: multiplication by one
3768:000 | DONE cmt | na 16 16 |        |             |                 ; This is a different routine than 2* because that instruction
3769:000 | DONE cmt | na 16 16 |        |             |                 ; stays inside one cell, whereas UM* produces a Double Cell
3770:000 | DONE cmt | na 16 16 |        |             |                 ; answer
3771:000 | DONE ins | na 16 16 | 006ab6 | c0 01 00    |                 cpy.# 0001           non-distructively
3772:000 | DONE ins | na 16 16 | 006ab9 | f0 3b       |                 beq 006af6           
3773:000 | DONE ins | na 16 16 | 006abb | b5 00       |                 lda.dx 00            
3774:000 | DONE ins | na 16 16 | 006abd | 3a          |                 dec.a                don't care about distruction
3775:000 | DONE ins | na 16 16 | 006abe | f0 39       |                 beq 006af9           
3776:000 | DONE wsp | na 16 16 |        |             |
3777:000 | DONE cmt | na 16 16 |        |             |                 ; SPECIAL CASE 3: multiplication by two
3778:000 | DONE ins | na 16 16 | 006ac0 | c0 02 00    |                 cpy.# 0002           
3779:000 | DONE ins | na 16 16 | 006ac3 | f0 3b       |                 beq 006b00           
3780:000 | DONE wsp | na 16 16 |        |             |
3781:000 | DONE ins | na 16 16 | 006ac5 | b5 00       |                 lda.dx 00            
3782:000 | DONE ins | na 16 16 | 006ac7 | c9 02 00    |                 cmp.# 0002           
3783:000 | DONE ins | na 16 16 | 006aca | f0 38       |                 beq 006b04           
3784:000 | DONE wsp | na 16 16 |        |             |
3785:000 | DONE cmt | na 16 16 |        |             |                 ; NO SPECIAL CASE ("The Hard Way")
3786:000 | DONE ins | na 16 16 | 006acc | 84 16       |                 sty.d 000216         TOS number  "40"
3787:000 | DONE ins | na 16 16 | 006ace | 85 18       |                 sta.d 000218         NOS number  "41"
3788:000 | DONE ins | na 16 16 | 006ad0 | a0 10 00    |                 ldy.# &16            loop counter
3789:000 | DONE wsp | na 16 16 |        |             |
3790:000 | DONE ins | na 16 16 | 006ad3 | a9 00 00    |                 lda.# 0000           
3791:000 | DONE ins | na 16 16 | 006ad6 | 85 1a       |                 sta.d 00021a         Most Significat Word (MSW) of result
3792:000 | DONE wsp | na 16 16 |        |             |
3793:000 | DONE lbl | na 16 16 | 006ad8 |             | umstar_loop                          
3794:000 | DONE ins | na 16 16 | 006ad8 | 0a          |                 asl.a                useless for first iteration
3795:000 | DONE ins | na 16 16 | 006ad9 | 26 1a       |                 rol.d 00021a         move carry into MSB, useless first iteration
3796:000 | DONE ins | na 16 16 | 006adb | 06 18       |                 asl.d 000218         move bit of NOS number into carry
3797:000 | DONE wsp | na 16 16 |        |             |
3798:000 | DONE cmt | na 16 16 |        |             |                 ; if there is no carry bit, we don't have to add and can go to
3799:000 | DONE cmt | na 16 16 |        |             |                 ; the next bit
3800:000 | DONE ins | na 16 16 | 006add | 90 07       |                 bcc 006ae6           
3801:000 | DONE wsp | na 16 16 |        |             |
3802:000 | DONE ins | na 16 16 | 006adf | 18          |                 clc                  
3803:000 | DONE ins | na 16 16 | 006ae0 | 65 16       |                 adc.d 000216         we have a set bit, so add TOS
3804:000 | DONE wsp | na 16 16 |        |             |
3805:000 | DONE cmt | na 16 16 |        |             |                 ; if we have a carry, increase the MSW of result
3806:000 | DONE ins | na 16 16 | 006ae2 | 90 02       |                 bcc 006ae6           
3807:000 | DONE ins | na 16 16 | 006ae4 | e6 1a       |                 inc.d 00021a         
3808:000 | DONE wsp | na 16 16 |        |             |
3809:000 | DONE lbl | na 16 16 | 006ae6 |             | umstar_counter                       
3810:000 | DONE ins | na 16 16 | 006ae6 | 88          |                 dey                  
3811:000 | DONE ins | na 16 16 | 006ae7 | d0 ef       |                 bne 006ad8           
3812:000 | DONE wsp | na 16 16 |        |             |
3813:000 | DONE cmt | na 16 16 |        |             |                 ; We're all done, clean up and leave
3814:000 | DONE ins | na 16 16 | 006ae9 | 95 00       |                 sta.dx 00            store lower cell of number in NOS
3815:000 | DONE ins | na 16 16 | 006aeb | a4 1a       |                 ldy.d 00021a         store MSB in TOS as double cell
3816:000 | DONE wsp | na 16 16 |        |             |
3817:000 | DONE ins | na 16 16 | 006aed | 80 1e       |                 bra 006b0d           don't use RTS so we can natively compile
3818:000 | DONE wsp | na 16 16 |        |             |
3819:000 | DONE lbl | na 16 16 | 006aef |             | umstar_zero                          
3820:000 | DONE cmt | na 16 16 |        |             |                 ; one or both of the numbers is zero, so we got off light
3821:000 | DONE ins | na 16 16 | 006aef | a0 00 00    |                 ldy.# 0000           
3822:000 | DONE ins | na 16 16 | 006af2 | 94 00       |                 sty.dx 00            
3823:000 | DONE ins | na 16 16 | 006af4 | 80 17       |                 bra 006b0d           
3824:000 | DONE wsp | na 16 16 |        |             |
3825:000 | DONE lbl | na 16 16 | 006af6 |             | umstar_one_tos                       
3826:000 | DONE cmt | na 16 16 |        |             |                 ; TOS is one, life is easy
3827:000 | DONE ins | na 16 16 | 006af6 | 88          |                 dey                  NOS is LSW, TOS becomes zero
3828:000 | DONE ins | na 16 16 | 006af7 | 80 14       |                 bra 006b0d           
3829:000 | DONE lbl | na 16 16 | 006af9 |             | umstar_one_nos                       
3830:000 | DONE cmt | na 16 16 |        |             |                 ; NOS is one, life is easy
3831:000 | DONE ins | na 16 16 | 006af9 | 94 00       |                 sty.dx 00            
3832:000 | DONE ins | na 16 16 | 006afb | a0 00 00    |                 ldy.# 0000           
3833:000 | DONE ins | na 16 16 | 006afe | 80 0d       |                 bra 006b0d           
3834:000 | DONE wsp | na 16 16 |        |             |
3835:000 | DONE lbl | na 16 16 | 006b00 |             | umstar_two_tos                       
3836:000 | DONE cmt | na 16 16 |        |             |                 ; TOS is two, life is easy
3837:000 | DONE ins | na 16 16 | 006b00 | b5 00       |                 lda.dx 00            
3838:000 | DONE ins | na 16 16 | 006b02 | 80 01       |                 bra 006b05           
3839:000 | DONE lbl | na 16 16 | 006b04 |             | umstar_two_nos                       
3840:000 | DONE cmt | na 16 16 |        |             |                 ; NOS is two, life is still easy
3841:000 | DONE ins | na 16 16 | 006b04 | 98          |                 tya                  
3842:000 | DONE lbl | na 16 16 | 006b05 |             | umstar_two_common                    
3843:000 | DONE ins | na 16 16 | 006b05 | 0a          |                 asl.a                multiply by two, top bit in Carry Flag
3844:000 | DONE ins | na 16 16 | 006b06 | 95 00       |                 sta.dx 00            Double Cell LSW is NOS
3845:000 | DONE wsp | na 16 16 |        |             |
3846:000 | DONE ins | na 16 16 | 006b08 | a9 00 00    |                 lda.# 0000           
3847:000 | DONE ins | na 16 16 | 006b0b | 2a          |                 rol.a                Rotate any Carry Flag into MSW
3848:000 | DONE ins | na 16 16 | 006b0c | a8          |                 tay                  
3849:000 | DONE wsp | na 16 16 |        |             |
3850:000 | DONE lbl | na 16 16 | 006b0d |             | z_umstar                             
3850:001 | DONE ins | na 16 16 | 006b0d | 60          |                 rts                  
3851:000 | DONE wsp | na 16 16 |        |             |
3852:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
3853:000 | DONE cmt | na 16 16 |        |             | ; UM/MOD ( ud u -- u u ) 32/16 -> 16  X bytes / X cycles
3854:000 | DONE cmt | na 16 16 |        |             | ; Divide double cell number by single cell number, returning the quotient as TOS
3855:000 | DONE cmt | na 16 16 |        |             | ; and any remainder as NOS. All numbers are unsigned. This is the basic division
3856:000 | DONE cmt | na 16 16 |        |             | ; operation all others use. Based on Garth Wilson's code at
3857:000 | DONE cmt | na 16 16 |        |             | ; http://6502.org/source/integers/ummodfix/ummodfix.htm We use "scratch" for N
3858:000 | DONE cmt | na 16 16 |        |             | ; and include a separate detection of division by zero to force an error code
3859:000 | DONE lbl | na 16 16 | 006b0e |             | xt_ummod                             
3860:000 | DONE dir | na 16 16 |        |             |         .!a16                        
3861:000 | DONE dir | na 16 16 |        |             |         .!xy16                       
3862:000 | DONE cmt | na 16 16 |        |             |                 ; Move the inputs to the scratchpad to avoid having to fool
3863:000 | DONE cmt | na 16 16 |        |             |                 ; around with the Data Stack and for speed. Garth's original
3864:000 | DONE cmt | na 16 16 |        |             |                 ; code uses the MVN instruction for this, but our TOS is Y which
3865:000 | DONE cmt | na 16 16 |        |             |                 ; makes that harder. When we're done, the setup will look likes
3866:000 | DONE cmt | na 16 16 |        |             |                 ; this: (S is start of the scratchpad in Direct Page)
3867:000 | DONE cmt | na 16 16 |        |             |                 ;
3868:000 | DONE cmt | na 16 16 |        |             |                 ;     +-----+-----+-----+-----+-----+-----+-----+-----+
3869:000 | DONE cmt | na 16 16 |        |             |                 ;     |  DIVISOR  |        DIVIDEND       | TEMP AREA |
3870:000 | DONE cmt | na 16 16 |        |             |                 ;     |           |  hi cell     lo cell  | carry bit |
3871:000 | DONE cmt | na 16 16 |        |             |                 ;     |  S    S+1 | S+2   S+3 | S+4   S+5 | S+6   S+7 |
3872:000 | DONE cmt | na 16 16 |        |             |                 ;     +-----+-----+-----+-----+-----+-----+-----+-----+
3873:000 | DONE cmt | na 16 16 |        |             |                 ;
3874:000 | DONE cmt | na 16 16 |        |             |                 ; The divisor is TOS (in Y), high cell of the dividend in NOS,
3875:000 | DONE cmt | na 16 16 |        |             |                 ; and low cell in 3OS
3876:000 | DONE wsp | na 16 16 |        |             |
3877:000 | DONE cmt | na 16 16 |        |             |                 ; Catch division by zero. We could include this in the code as
3878:000 | DONE cmt | na 16 16 |        |             |                 ; part of overflow detection (see below), but we want an error
3879:000 | DONE cmt | na 16 16 |        |             |                 ; to appear like in Gforth
3880:000 | DONE ins | na 16 16 | 006b0e | 98          |                 tya                  force flag test
3881:000 | DONE ins | na 16 16 | 006b0f | d0 06       |                 bne 006b17           
3882:000 | DONE wsp | na 16 16 |        |             |
3883:000 | DONE ins | na 16 16 | 006b11 | a9 9a 78    |                 lda.# 00789a         
3884:000 | DONE ins | na 16 16 | 006b14 | 4c e5 72    |                 jmp 0072e5           
3885:000 | DONE wsp | na 16 16 |        |             |
3886:000 | DONE lbl | na 16 16 | 006b17 |             | ummod_notzero                        
3887:000 | DONE ins | na 16 16 | 006b17 | 84 20       |                 sty.d 000220         Y is now free
3888:000 | DONE ins | na 16 16 | 006b19 | b5 00       |                 lda.dx 00            high cell of dividend
3889:000 | DONE ins | na 16 16 | 006b1b | 85 22       |                 sta.d 000222         
3890:000 | DONE ins | na 16 16 | 006b1d | b5 02       |                 lda.dx 02            low cell of dividend
3891:000 | DONE ins | na 16 16 | 006b1f | 85 24       |                 sta.d 000224         
3892:000 | DONE wsp | na 16 16 |        |             |
3893:000 | DONE cmt | na 16 16 |        |             |                 ; Drop one entry off of the stack and save the new Data Stack
3894:000 | DONE cmt | na 16 16 |        |             |                 ; Pointer, freeing X for index duty
3895:000 | DONE ins | na 16 16 | 006b21 | e8          |                 inx                  
3896:000 | DONE ins | na 16 16 | 006b22 | e8          |                 inx                  
3897:000 | DONE ins | na 16 16 | 006b23 | 86 04       |                 stx.d 000204         
3898:000 | DONE wsp | na 16 16 |        |             |
3899:000 | DONE cmt | na 16 16 |        |             |                 ; Detect overflow. Subtract divisor from high cell of dividend.
3900:000 | DONE cmt | na 16 16 |        |             |                 ; If carry flag remains set, divisor was not large enough to
3901:000 | DONE cmt | na 16 16 |        |             |                 ; avoid overflow. This also would detect division by zero, but
3902:000 | DONE cmt | na 16 16 |        |             |                 ; we did that already in a separate step
3903:000 | DONE ins | na 16 16 | 006b25 | 38          |                 sec                  
3904:000 | DONE ins | na 16 16 | 006b26 | a5 22       |                 lda.d 000222         
3905:000 | DONE ins | na 16 16 | 006b28 | e5 20       |                 sbc.d 000220         
3906:000 | DONE ins | na 16 16 | 006b2a | b0 21       |                 bcs 006b4d           
3907:000 | DONE wsp | na 16 16 |        |             |
3908:000 | DONE cmt | na 16 16 |        |             |                 ; If there is no overflow, the carry flag remains clear for
3909:000 | DONE cmt | na 16 16 |        |             |                 ; first roll. We loop 16 times, but since we shift the dividend
3910:000 | DONE cmt | na 16 16 |        |             |                 ; over at the same time as shifting the answer in, the operation
3911:000 | DONE cmt | na 16 16 |        |             |                 ; must start and (!) finish with a shift of the low cell of the
3912:000 | DONE cmt | na 16 16 |        |             |                 ; dividend (which ends up holding the quotient), so we start
3913:000 | DONE cmt | na 16 16 |        |             |                 ; with 17 times in X. Y is used for temporary storage
3914:000 | DONE ins | na 16 16 | 006b2c | a2 11 00    |                 ldx.# &17            
3915:000 | DONE wsp | na 16 16 |        |             |
3916:000 | DONE lbl | na 16 16 | 006b2f |             | ummod_shift                          
3917:000 | DONE cmt | na 16 16 |        |             |                 ; Move low cell of dividend left one bit, also shifting answer
3918:000 | DONE cmt | na 16 16 |        |             |                 ; in. The first rotation brings in a zero, which later gets
3919:000 | DONE cmt | na 16 16 |        |             |                 ; pushed off the other end in the last rotation
3920:000 | DONE ins | na 16 16 | 006b2f | 26 24       |                 rol.d 000224         
3921:000 | DONE wsp | na 16 16 |        |             |
3922:000 | DONE cmt | na 16 16 |        |             |                 ; loop control
3923:000 | DONE ins | na 16 16 | 006b31 | ca          |                 dex                  
3924:000 | DONE ins | na 16 16 | 006b32 | f0 22       |                 beq 006b56           
3925:000 | DONE wsp | na 16 16 |        |             |
3926:000 | DONE cmt | na 16 16 |        |             |                 ; Shift high cell of divident left one bit, also shifting the
3927:000 | DONE cmt | na 16 16 |        |             |                 ; next bit in from high bit of low cell
3928:000 | DONE ins | na 16 16 | 006b34 | 26 22       |                 rol.d 000222         
3929:000 | DONE ins | na 16 16 | 006b36 | a9 00 00    |                 lda.# 0000           
3930:000 | DONE ins | na 16 16 | 006b39 | 2a          |                 rol.a                
3931:000 | DONE ins | na 16 16 | 006b3a | 85 26       |                 sta.d 000226         store old high bit of dividend
3932:000 | DONE wsp | na 16 16 |        |             |
3933:000 | DONE cmt | na 16 16 |        |             |                 ; See if divisor will fit into high 17 bits of dividend by
3934:000 | DONE cmt | na 16 16 |        |             |                 ; subtracting and then looking at the carry flag. If carry was
3935:000 | DONE cmt | na 16 16 |        |             |                 ; cleared, divisor did not fit
3936:000 | DONE ins | na 16 16 | 006b3c | 38          |                 sec                  
3937:000 | DONE ins | na 16 16 | 006b3d | a5 22       |                 lda.d 000222         
3938:000 | DONE ins | na 16 16 | 006b3f | e5 20       |                 sbc.d 000220         
3939:000 | DONE ins | na 16 16 | 006b41 | a8          |                 tay                  save difference in Y until we know if we need it
3940:000 | DONE wsp | na 16 16 |        |             |
3941:000 | DONE cmt | na 16 16 |        |             |                 ; Bit 0 of S+6 serves as the 17th bit. Complete the subtraction
3942:000 | DONE cmt | na 16 16 |        |             |                 ; by doing the 17th bit before determining if the divisor fits
3943:000 | DONE cmt | na 16 16 |        |             |                 ; into the high 17 bits of the dividend. If so, the carry flag
3944:000 | DONE cmt | na 16 16 |        |             |                 ; remains set
3945:000 | DONE ins | na 16 16 | 006b42 | a5 26       |                 lda.d 000226         
3946:000 | DONE ins | na 16 16 | 006b44 | e9 00 00    |                 sbc.# 0000           
3947:000 | DONE ins | na 16 16 | 006b47 | 90 e6       |                 bcc 006b2f           
3948:000 | DONE wsp | na 16 16 |        |             |
3949:000 | DONE cmt | na 16 16 |        |             |                 ; Since the divisor fit into high 17 bits, update dividend high
3950:000 | DONE cmt | na 16 16 |        |             |                 ; cell to what it would be after subtraction
3951:000 | DONE ins | na 16 16 | 006b49 | 84 22       |                 sty.d 000222         
3952:000 | DONE ins | na 16 16 | 006b4b | 80 e2       |                 bra 006b2f           
3953:000 | DONE wsp | na 16 16 |        |             |
3954:000 | DONE lbl | na 16 16 | 006b4d |             | ummod_overflow                       
3955:000 | DONE cmt | na 16 16 |        |             |                 ; If an overflow condition occurs, put 0ffff
3956:000 | DONE cmt | na 16 16 |        |             |                 ; in both the quotient and remainder
3957:000 | DONE ins | na 16 16 | 006b4d | a6 04       |                 ldx.d 000204         restore DSP
3958:000 | DONE ins | na 16 16 | 006b4f | a0 ff ff    |                 ldy.# 0ffff          
3959:000 | DONE ins | na 16 16 | 006b52 | 94 00       |                 sty.dx 00            
3960:000 | DONE ins | na 16 16 | 006b54 | 80 08       |                 bra 006b5e           go to end to enable native coding
3961:000 | DONE wsp | na 16 16 |        |             |
3962:000 | DONE lbl | na 16 16 | 006b56 |             | ummod_complete                       
3963:000 | DONE ins | na 16 16 | 006b56 | a6 04       |                 ldx.d 000204         restore DSP
3964:000 | DONE ins | na 16 16 | 006b58 | a4 24       |                 ldy.d 000224         quotient is TOS
3965:000 | DONE ins | na 16 16 | 006b5a | a5 22       |                 lda.d 000222         remainder is NOS
3966:000 | DONE ins | na 16 16 | 006b5c | 95 00       |                 sta.dx 00            
3967:000 | DONE wsp | na 16 16 |        |             |
3968:000 | DONE lbl | na 16 16 | 006b5e |             | z_ummod                              
3968:001 | DONE ins | na 16 16 | 006b5e | 60          |                 rts                  
3969:000 | DONE wsp | na 16 16 |        |             |
3970:000 | DONE wsp | na 16 16 |        |             |
3971:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
3972:000 | DONE cmt | na 16 16 |        |             | ; UNUSED ( -- u ) 11 bytes / X cycles
3973:000 | DONE cmt | na 16 16 |        |             | ; Return amount of memory available for the Dictionary. Does not include
3974:000 | DONE cmt | na 16 16 |        |             | ; memory for buffers, stacks etc. Does not exclude the space used by PAD
3975:000 | DONE cmt | na 16 16 |        |             | ; TODO rewrite for multitasking
3976:000 | DONE lbl | na 16 16 | 006b5f |             | xt_unused                            
3977:000 | DONE dir | na 16 16 |        |             |         .!a16                        
3978:000 | DONE ins | na 16 16 | 006b5f | a9 ff 7b    |                 lda.# 007bff         
3979:000 | DONE ins | na 16 16 | 006b62 | 38          |                 sec                  
3980:000 | DONE ins | na 16 16 | 006b63 | e5 00       |                 sbc.d 000200         current compile pointer
3981:000 | DONE wsp | na 16 16 |        |             |
3982:000 | DONE ins | na 16 16 | 006b65 | ca          |                 dex                  
3983:000 | DONE ins | na 16 16 | 006b66 | ca          |                 dex                  
3984:000 | DONE ins | na 16 16 | 006b67 | 94 00       |                 sty.dx 00            
3985:000 | DONE wsp | na 16 16 |        |             |
3986:000 | DONE ins | na 16 16 | 006b69 | a8          |                 tay                  
3987:000 | DONE wsp | na 16 16 |        |             |
3988:000 | DONE lbl | na 16 16 | 006b6a |             | z_unused                             
3988:001 | DONE ins | na 16 16 | 006b6a | 60          |                 rts                  
3989:000 | DONE wsp | na 16 16 |        |             |
3990:000 | DONE wsp | na 16 16 |        |             |
3991:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
3992:000 | DONE cmt | na 16 16 |        |             | ; VARIABLE ( "name" -- ) X bytes / X cycles
3993:000 | DONE cmt | na 16 16 |        |             | ; Define a word that returns the address for a variable. There are various Forth
3994:000 | DONE cmt | na 16 16 |        |             | ; definitions for this word, such as  CREATE 1 CELLS ALLOT  or CREATE 0 ,
3995:000 | DONE cmt | na 16 16 |        |             | ; We use a variant of the second one so the variable is initialized to zero
3996:000 | DONE lbl | na 16 16 | 006b6b |             | xt_variable                          
3997:000 | DONE cmt | na 16 16 |        |             |                 ; We let CREATE do the heavy lifting
3998:000 | DONE ins | na 16 16 | 006b6b | 20 48 65    |                 jsr 006548           
3999:000 | DONE wsp | na 16 16 |        |             |
4000:000 | DONE cmt | na 16 16 |        |             |                 ; There is no "stz.di cp" so we have to do this the
4001:000 | DONE cmt | na 16 16 |        |             |                 ; old way, which is still faster than a subroutine jump to ZERO
4002:000 | DONE ins | na 16 16 | 006b6e | a9 00 00    |                 lda.# 0000           
4003:000 | DONE ins | na 16 16 | 006b71 | 92 00       |                 sta.di 000200        STA (CP)
4004:000 | DONE wsp | na 16 16 |        |             |
4005:000 | DONE ins | na 16 16 | 006b73 | e6 00       |                 inc.d 000200         direct COMMA
4006:000 | DONE ins | na 16 16 | 006b75 | e6 00       |                 inc.d 000200         
4007:000 | DONE wsp | na 16 16 |        |             |
4008:000 | DONE lbl | na 16 16 | 006b77 |             | z_variable                           
4008:001 | DONE ins | na 16 16 | 006b77 | 60          |                 rts                  
4009:000 | DONE wsp | na 16 16 |        |             |
4010:000 | DONE wsp | na 16 16 |        |             |
4011:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
4012:000 | DONE cmt | na 16 16 |        |             | ; WORDS&SIZES ( -- ) X bytes / X cycles
4013:000 | DONE cmt | na 16 16 |        |             | ; Prints all words in the dictionary with the sizes of their code as returned by
4014:000 | DONE cmt | na 16 16 |        |             | ; WORDSIZE. Used to test different optimizations of the compiling routines,
4015:000 | DONE cmt | na 16 16 |        |             | ; specific to Liara Forth. Uses tmp3
4016:000 | DONE lbl | na 16 16 | 006b78 |             | xt_wordsnsizes                       
4017:000 | DONE dir | na 16 16 |        |             |         .!a16                        
4018:000 | DONE ins | na 16 16 | 006b78 | a9 ff ff    |                 lda.# 0ffff          
4019:000 | DONE ins | na 16 16 | 006b7b | 85 1a       |                 sta.d 00021a         set flag that we want sizes, too
4020:000 | DONE wsp | na 16 16 |        |             |
4021:000 | DONE cmt | na 16 16 |        |             |                 ; continue with WORDS
4022:000 | DONE ins | na 16 16 | 006b7d | 80 02       |                 bra 006b81           
4023:000 | DONE wsp | na 16 16 |        |             |
4024:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
4025:000 | DONE cmt | na 16 16 |        |             | ; WORDS ( -- ) X bytes / X cycles
4026:000 | DONE cmt | na 16 16 |        |             | ; Print list of all Forth words available. This only really makes sense in an
4027:000 | DONE cmt | na 16 16 |        |             | ; interactive setting, so we don't have to worry about speed. WORDS&SIZES falls
4028:000 | DONE cmt | na 16 16 |        |             | ; through to here. Uses tmp3. Both WORDS and WORDS&SIZES might be better off as
4029:000 | DONE cmt | na 16 16 |        |             | ; high-level Forth words, but these routines are left over from early testing
4030:000 | DONE lbl | na 16 16 | 006b7f |             | xt_words                             
4031:000 | DONE ins | na 16 16 | 006b7f | 64 1a       |                 stz.d 00021a         store flag that we don't want to print sizes
4032:000 | DONE wsp | na 16 16 |        |             |
4033:000 | DONE lbl | na 16 16 | 006b81 |             | words_common                         
4034:000 | DONE cmt | na 16 16 |        |             |                 ; common routine for WORDS and WORDS&SIZES
4035:000 | DONE ins | na 16 16 | 006b81 | 20 41 65    |                 jsr 006541           start on next line, this is a style choice
4036:000 | DONE wsp | na 16 16 |        |             |
4037:000 | DONE ins | na 16 16 | 006b84 | a5 02       |                 lda.d 000202         nt of first entry in Dictionary (last added)
4038:000 | DONE ins | na 16 16 | 006b86 | 48          |                 pha                  
4039:000 | DONE wsp | na 16 16 |        |             |
4040:000 | DONE ins | na 16 16 | 006b87 | ca          |                 dex                  create room on TOS
4041:000 | DONE ins | na 16 16 | 006b88 | ca          |                 dex                  
4042:000 | DONE ins | na 16 16 | 006b89 | 94 00       |                 sty.dx 00            
4043:000 | DONE wsp | na 16 16 |        |             |
4044:000 | DONE lbl | na 16 16 | 006b8b |             | words_loop                           
4045:000 | DONE ins | na 16 16 | 006b8b | a8          |                 tay                  ( nt )
4046:000 | DONE ins | na 16 16 | 006b8c | 20 d6 67    |                 jsr 0067d6           ( nt -- addr u )
4047:000 | DONE ins | na 16 16 | 006b8f | 20 73 6a    |                 jsr 006a73           ( addr u -- )
4048:000 | DONE ins | na 16 16 | 006b92 | 20 38 6a    |                 jsr 006a38           
4049:000 | DONE wsp | na 16 16 |        |             |
4050:000 | DONE cmt | na 16 16 |        |             |                 ; If the user wants sizes as well, print them
4051:000 | DONE ins | na 16 16 | 006b95 | a5 1a       |                 lda.d 00021a         
4052:000 | DONE ins | na 16 16 | 006b97 | f0 0f       |                 beq 006ba8           
4053:000 | DONE wsp | na 16 16 |        |             |
4054:000 | DONE cmt | na 16 16 |        |             |                 ; For the moment, just print the size in bytes after the word's
4055:000 | DONE cmt | na 16 16 |        |             |                 ; name string. We can decide if we want to get all fancy later
4056:000 | DONE ins | na 16 16 | 006b99 | ca          |                 dex                  
4057:000 | DONE ins | na 16 16 | 006b9a | ca          |                 dex                  
4058:000 | DONE ins | na 16 16 | 006b9b | 94 00       |                 sty.dx 00            
4059:000 | DONE wsp | na 16 16 |        |             |
4060:000 | DONE ins | na 16 16 | 006b9d | 7a          |                 ply                  get nt back again
4061:000 | DONE ins | na 16 16 | 006b9e | 5a          |                 phy                  
4062:000 | DONE ins | na 16 16 | 006b9f | 20 bc 6b    |                 jsr 006bbc           ( u )
4063:000 | DONE ins | na 16 16 | 006ba2 | 20 8e 61    |                 jsr 00618e           
4064:000 | DONE ins | na 16 16 | 006ba5 | 20 38 6a    |                 jsr 006a38           
4065:000 | DONE wsp | na 16 16 |        |             |
4066:000 | DONE lbl | na 16 16 | 006ba8 |             | words_nosizes                        
4067:000 | DONE ins | na 16 16 | 006ba8 | 68          |                 pla                  get back first entry in Dictionary
4068:000 | DONE wsp | na 16 16 |        |             |
4069:000 | DONE cmt | na 16 16 |        |             |                 ; The next nt is two bytes below the nt of the current one in
4070:000 | DONE cmt | na 16 16 |        |             |                 ; the Dictionary header
4071:000 | DONE ins | na 16 16 | 006ba9 | 1a          |                 inc.a                
4072:000 | DONE ins | na 16 16 | 006baa | 1a          |                 inc.a                
4073:000 | DONE wsp | na 16 16 |        |             |
4074:000 | DONE ins | na 16 16 | 006bab | ca          |                 dex                  
4075:000 | DONE ins | na 16 16 | 006bac | ca          |                 dex                  
4076:000 | DONE ins | na 16 16 | 006bad | 94 00       |                 sty.dx 00            
4077:000 | DONE wsp | na 16 16 |        |             |
4078:000 | DONE ins | na 16 16 | 006baf | a8          |                 tay                  
4079:000 | DONE ins | na 16 16 | 006bb0 | b9 00 00    |                 lda.y 0000           LDA $0000,Y
4080:000 | DONE ins | na 16 16 | 006bb3 | 48          |                 pha                  
4081:000 | DONE ins | na 16 16 | 006bb4 | d0 d5       |                 bne 006b8b           zero entry signals end of Dictionary
4082:000 | DONE wsp | na 16 16 |        |             |
4083:000 | DONE cmt | na 16 16 |        |             |                 ; all done, clean up
4084:000 | DONE ins | na 16 16 | 006bb6 | 68          |                 pla                  balance MPU stack, value discarded
4085:000 | DONE wsp | na 16 16 |        |             |
4086:000 | DONE ins | na 16 16 | 006bb7 | b4 00       |                 ldy.dx 00            
4087:000 | DONE ins | na 16 16 | 006bb9 | e8          |                 inx                  
4088:000 | DONE ins | na 16 16 | 006bba | e8          |                 inx                  
4089:000 | DONE wsp | na 16 16 |        |             |
4090:000 | DONE lbl | na 16 16 | 006bbb |             | z_words                              
4091:000 | DONE lbl | na 16 16 | 006bbb |             | z_wordsnsizes                        
4091:001 | DONE ins | na 16 16 | 006bbb | 60          |                 rts                  
4092:000 | DONE wsp | na 16 16 |        |             |
4093:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
4094:000 | DONE cmt | na 16 16 |        |             | ; WORDSIZE ( nt -- u ) X bytes / X cycles
4095:000 | DONE cmt | na 16 16 |        |             | ; Given an word's name token (nt), return the size of the word's payload (CFA
4096:000 | DONE cmt | na 16 16 |        |             | ; plus PFA) in bytes. Does not count the final RTS. Specific to Liara Forth.
4097:000 | DONE cmt | na 16 16 |        |             | ; Uses tmp2, note WORDS and WORDS&SIZES use tmp3
4098:000 | DONE lbl | na 16 16 | 006bbc |             | xt_wordsize                          
4099:000 | DONE cmt | na 16 16 |        |             |                 ; We get the beginning address of the code from the word's
4100:000 | DONE cmt | na 16 16 |        |             |                 ; header entry for the execution token (xt, 4 bytes down) and
4101:000 | DONE cmt | na 16 16 |        |             |                 ; the pointer to the end of the code (z_word, six bytes down).
4102:000 | DONE ins | na 16 16 | 006bbc | c8          |                 iny                  
4103:000 | DONE ins | na 16 16 | 006bbd | c8          |                 iny                  
4104:000 | DONE ins | na 16 16 | 006bbe | c8          |                 iny                  
4105:000 | DONE ins | na 16 16 | 006bbf | c8          |                 iny                  nt+4, location of xt
4106:000 | DONE ins | na 16 16 | 006bc0 | b9 00 00    |                 lda.y 0000           get xt
4107:000 | DONE ins | na 16 16 | 006bc3 | 85 18       |                 sta.d 000218         
4108:000 | DONE wsp | na 16 16 |        |             |
4109:000 | DONE ins | na 16 16 | 006bc5 | c8          |                 iny                  
4110:000 | DONE ins | na 16 16 | 006bc6 | c8          |                 iny                  nt+6, location of z_word
4111:000 | DONE ins | na 16 16 | 006bc7 | b9 00 00    |                 lda.y 0000           
4112:000 | DONE wsp | na 16 16 |        |             |
4113:000 | DONE ins | na 16 16 | 006bca | 38          |                 sec                  (z_word - xt_word)
4114:000 | DONE ins | na 16 16 | 006bcb | e5 18       |                 sbc.d 000218         
4115:000 | DONE ins | na 16 16 | 006bcd | a8          |                 tay                  
4116:000 | DONE wsp | na 16 16 |        |             |
4117:000 | DONE lbl | na 16 16 | 006bce |             | z_wordsize                           
4117:001 | DONE ins | na 16 16 | 006bce | 60          |                 rts                  
4118:000 | DONE wsp | na 16 16 |        |             |
4119:000 | DONE wsp | na 16 16 |        |             |
4120:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
4121:000 | DONE cmt | na 16 16 |        |             | ; XOR ( n m -- n ) 6 bytes / X cycles
4122:000 | DONE cmt | na 16 16 |        |             | ; Logical XOR
4123:000 | DONE lbl | na 16 16 | 006bcf |             | xt_xor                               
4124:000 | DONE ins | na 16 16 | 006bcf | 98          |                 tya                  
4125:000 | DONE ins | na 16 16 | 006bd0 | 55 00       |                 eor.dx 00            
4126:000 | DONE ins | na 16 16 | 006bd2 | a8          |                 tay                  
4127:000 | DONE wsp | na 16 16 |        |             |
4128:000 | DONE ins | na 16 16 | 006bd3 | e8          |                 inx                  
4129:000 | DONE ins | na 16 16 | 006bd4 | e8          |                 inx                  
4130:000 | DONE wsp | na 16 16 |        |             |
4131:000 | DONE lbl | na 16 16 | 006bd5 |             | z_xor                                
4131:001 | DONE ins | na 16 16 | 006bd5 | 60          |                 rts                  
4132:000 | DONE wsp | na 16 16 |        |             |
4133:000 | DONE wsp | na 16 16 |        |             |
4134:000 | DONE cmt | na 16 16 |        |             | ; ===================================================================
4135:000 | DONE cmt | na 16 16 |        |             | ; MIDDLE INCLUDES
4136:000 | DONE wsp | na 16 16 |        |             |
4137:000 | DONE cmt | na 16 16 |        |             | ; Dictionary Headers for Liara Forth for the W65C265SXB
4137:001 | DONE cmt | na 16 16 |        |             | ; Scot W. Stevenson <scot.stevenson@gmail.com>
4137:002 | DONE cmt | na 16 16 |        |             | ; First version: 05. Dec 2016
4137:003 | DONE cmt | na 16 16 |        |             | ; This version: 26. Feb 2017
4137:004 | DONE wsp | na 16 16 |        |             |
4137:005 | DONE cmt | na 16 16 |        |             | ; Dictionary headers are kept separately from the code, which allows various
4137:006 | DONE cmt | na 16 16 |        |             | ; tricks in the code. We roughly follow the Gforth terminology: The Execution
4137:007 | DONE cmt | na 16 16 |        |             | ; Token (xt) is the address of the first byte of a word's code that can be,
4137:008 | DONE cmt | na 16 16 |        |             | ; well, executed; the Name Token (nt) is a pointer to the beginning of the
4137:009 | DONE cmt | na 16 16 |        |             | ; word's header in the Dictionary. There, the link to the next word in the
4137:010 | DONE cmt | na 16 16 |        |             | ; Dictionary is always one cell down from the current word's own nt. In the code
4137:011 | DONE cmt | na 16 16 |        |             | ; itself, we use "nt_<WORD>" ("header") for the nt and "xt_<WORD>" ("A" as the
4137:012 | DONE cmt | na 16 16 |        |             | ; beginning) for the xt.
4137:013 | DONE cmt | na 16 16 |        |             | ;
4137:014 | DONE cmt | na 16 16 |        |             | ; This gives us the following header structure:
4137:015 | DONE cmt | na 16 16 |        |             | ;
4137:016 | DONE cmt | na 16 16 |        |             | ;              8 bit     8 bit
4137:017 | DONE cmt | na 16 16 |        |             | ;               LSB       MSB
4137:018 | DONE cmt | na 16 16 |        |             | ; nt_word ->  +--------+--------+
4137:019 | DONE cmt | na 16 16 |        |             | ;             | Length | Status |
4137:020 | DONE cmt | na 16 16 |        |             | ;          +2 +--------+--------+
4137:021 | DONE cmt | na 16 16 |        |             | ;             | Next Header     | -> nt_next_word
4137:022 | DONE cmt | na 16 16 |        |             | ;          +4 +-----------------+
4137:023 | DONE cmt | na 16 16 |        |             | ;             | Start of Code   | -> xt_word
4137:024 | DONE cmt | na 16 16 |        |             | ;          +6 +-----------------+
4137:025 | DONE cmt | na 16 16 |        |             | ;             | End of Code     | -> z_word
4137:026 | DONE cmt | na 16 16 |        |             | ;          +8 +--------+--------+
4137:027 | DONE cmt | na 16 16 |        |             | ;             | Name   |        |
4137:028 | DONE cmt | na 16 16 |        |             | ;             +--------+--------+
4137:029 | DONE cmt | na 16 16 |        |             | ;             |        |        |
4137:030 | DONE cmt | na 16 16 |        |             | ;             +--------+--------+
4137:031 | DONE cmt | na 16 16 |        |             | ;             |        |  ...   | (name string does not end with a zero)
4137:032 | DONE cmt | na 16 16 |        |             | ;          +n +--------+--------+
4137:033 | DONE cmt | na 16 16 |        |             | ;
4137:034 | DONE cmt | na 16 16 |        |             | ; The Status Byte is created by adding the flags defined in
4137:035 | DONE cmt | na 16 16 |        |             | ; definitions.tasm:
4137:036 | DONE cmt | na 16 16 |        |             | ;
4137:037 | DONE cmt | na 16 16 |        |             | ;       CO - Compile Only
4137:038 | DONE cmt | na 16 16 |        |             | ;       IM - Immediate Word
4137:039 | DONE cmt | na 16 16 |        |             | ;       NC - Native Compile allowed (inline compile)
4137:040 | DONE wsp | na 16 16 |        |             |
4137:041 | DONE cmt | na 16 16 |        |             | ; Note there are currently five bits unused. The last word (top word in code)
4137:042 | DONE cmt | na 16 16 |        |             | ; is always BYE. It is marked as the last word by its value of 0000 in its Next
4137:043 | DONE cmt | na 16 16 |        |             | ; Header field. The words are sorted with the more common ones first (further
4137:044 | DONE cmt | na 16 16 |        |             | ; down in code) so they are found earlier.  Anythiing to do with output comes
4137:045 | DONE cmt | na 16 16 |        |             | ; later (further up) because things will always be slow if there is a human
4137:046 | DONE cmt | na 16 16 |        |             | ; involved.
4137:047 | DONE wsp | na 16 16 |        |             |
4137:048 | DONE lbl | na 16 16 | 006bd6 |             | nt_bye                               
4137:049 | DONE dir | na 16 16 | 006bd6 | (1 bytes)   |         .byte 03                     length of word string
4137:049 | DONE dir | na 16 16 |        |             |                 03                       --  .
4137:050 | DONE dir | na 16 16 | 006bd7 | (1 bytes)   |         .byte { NC }                 status byte
4137:050 | DONE dir | na 16 16 |        |             |                 01                       --  .
4137:051 | DONE dir | na 16 16 | 006bd8 | (2 bytes)   |         .word 0000                   next word in dictionary, 0000 signals end
4137:051 | DONE dir | na 16 16 |        |             |                 00 00                    --  . .
4137:052 | DONE dir | na 16 16 | 006bda | (2 bytes)   |         .word 0064b6                 start of code, the xt of this word
4137:052 | DONE dir | na 16 16 |        |             |                 b6 64                    --  . d
4137:053 | DONE dir | na 16 16 | 006bdc | (2 bytes)   |         .word 0064b9                 end of code (points to RTS)
4137:053 | DONE dir | na 16 16 |        |             |                 b9 64                    --  . d
4137:054 | DONE dir | na 16 16 | 006bde | (3 bytes)   |         .byte 62, 79, 65             word name, always lower case
4137:054 | DONE dir | na 16 16 |        |             |                 62 79 65                 --  b y e
4137:055 | DONE wsp | na 16 16 |        |             |
4137:056 | DONE lbl | na 16 16 | 006be1 |             | nt_cold                              
4137:057 | DONE dir | na 16 16 | 006be1 | (2 bytes)   |         .byte 4, 00                  
4137:057 | DONE dir | na 16 16 |        |             |                 04 00                    --  . .
4137:058 | DONE dir | na 16 16 | 006be3 | (6 bytes)   |         .word nt_bye, xt_cold, 0060de 
4137:058 | DONE dir | na 16 16 |        |             |                 d6 6b 63 60 de 60        --  . k c ` . `
4137:059 | DONE dir | na 16 16 | 006be9 | (4 bytes)   |         .byte 63, 6f, 6c, 64         
4137:059 | DONE dir | na 16 16 |        |             |                 63 6f 6c 64              --  c o l d
4137:060 | DONE wsp | na 16 16 |        |             |
4137:061 | DONE lbl | na 16 16 | 006bed |             | nt_wordsnsizes                       
4137:062 | DONE dir | na 16 16 | 006bed | (2 bytes)   |         .byte 0b, { NC }             
4137:062 | DONE dir | na 16 16 |        |             |                 0b 01                    --   .
4137:063 | DONE dir | na 16 16 | 006bef | (6 bytes)   |         .word nt_cold, xt_wordsnsizes, 006bbb 
4137:063 | DONE dir | na 16 16 |        |             |                 e1 6b 78 6b bb 6b        --  . k x k . k
4137:064 | DONE dir | na 16 16 | 006bf5 | (11 bytes)  |         .byte 77, 6f, 72, 64, 73, 26, 73, 69, 7a, 65, 73 
4137:064 | DONE dir | na 16 16 |        |             |                 77 6f 72 64 73 26 73 69  --  w o r d s & s i
4137:064 | DONE dir | na 16 16 |        |             |                 7a 65 73                 --  z e s
4137:065 | DONE wsp | na 16 16 |        |             |
4137:066 | DONE lbl | na 16 16 | 006c00 |             | nt_words                             
4137:067 | DONE dir | na 16 16 | 006c00 | (2 bytes)   |         .byte 5, { NC }              
4137:067 | DONE dir | na 16 16 |        |             |                 05 01                    --  . .
4137:068 | DONE dir | na 16 16 | 006c02 | (6 bytes)   |         .word nt_wordsnsizes, xt_words, 006bbb 
4137:068 | DONE dir | na 16 16 |        |             |                 ed 6b 7f 6b bb 6b        --  . k . k . k
4137:069 | DONE dir | na 16 16 | 006c08 | (5 bytes)   |         .byte 77, 6f, 72, 64, 73     
4137:069 | DONE dir | na 16 16 |        |             |                 77 6f 72 64 73           --  w o r d s
4137:070 | DONE wsp | na 16 16 |        |             |
4137:071 | DONE lbl | na 16 16 | 006c0d |             | nt_dump                              
4137:072 | DONE dir | na 16 16 | 006c0d | (2 bytes)   |         .byte 4, { NC }              
4137:072 | DONE dir | na 16 16 |        |             |                 04 01                    --  . .
4137:073 | DONE dir | na 16 16 | 006c0f | (6 bytes)   |         .word nt_words, xt_dump, 00668c 
4137:073 | DONE dir | na 16 16 |        |             |                 00 6c 66 66 8c 66        --  . l f f . f
4137:074 | DONE dir | na 16 16 | 006c15 | (4 bytes)   |         .byte 64, 75, 6d, 70         
4137:074 | DONE dir | na 16 16 |        |             |                 64 75 6d 70              --  d u m p
4137:075 | DONE wsp | na 16 16 |        |             |
4137:076 | DONE lbl | na 16 16 | 006c19 |             | nt_wordsize                          
4137:077 | DONE dir | na 16 16 | 006c19 | (2 bytes)   |         .byte 8, { NC }              
4137:077 | DONE dir | na 16 16 |        |             |                 08 01                    --  . .
4137:078 | DONE dir | na 16 16 | 006c1b | (6 bytes)   |         .word nt_dump, xt_wordsize, 006bce 
4137:078 | DONE dir | na 16 16 |        |             |                 0d 6c bc 6b ce 6b        --   l . k . k
4137:079 | DONE dir | na 16 16 | 006c21 | (8 bytes)   |         .byte 77, 6f, 72, 64, 73, 69, 7a, 65 
4137:079 | DONE dir | na 16 16 |        |             |                 77 6f 72 64 73 69 7a 65  --  w o r d s i z e
4137:079 | DONE dir | na 16 16 |        |             |                                          -- 
4137:080 | DONE wsp | na 16 16 |        |             |
4137:081 | DONE lbl | na 16 16 | 006c29 |             | nt_bell                              
4137:082 | DONE dir | na 16 16 | 006c29 | (2 bytes)   |         .byte 4, { NC }              
4137:082 | DONE dir | na 16 16 |        |             |                 04 01                    --  . .
4137:083 | DONE dir | na 16 16 | 006c2b | (6 bytes)   |         .word nt_wordsize, xt_bell, 006486 
4137:083 | DONE dir | na 16 16 |        |             |                 19 6c 80 64 86 64        --  . l . d . d
4137:084 | DONE dir | na 16 16 | 006c31 | (4 bytes)   |         .byte 62, 65, 6c, 6c         
4137:084 | DONE dir | na 16 16 |        |             |                 62 65 6c 6c              --  b e l l
4137:085 | DONE wsp | na 16 16 |        |             |
4137:086 | DONE lbl | na 16 16 | 006c35 |             | nt_decimal                           
4137:087 | DONE dir | na 16 16 | 006c35 | (2 bytes)   |         .byte 7, { NC }              
4137:087 | DONE dir | na 16 16 |        |             |                 07 01                    --  . .
4137:088 | DONE dir | na 16 16 | 006c37 | (6 bytes)   |         .word nt_bell, xt_decimal, 00661a 
4137:088 | DONE dir | na 16 16 |        |             |                 29 6c 15 66 1a 66        --  ) l . f . f
4137:089 | DONE dir | na 16 16 | 006c3d | (7 bytes)   |         .byte 64, 65, 63, 69, 6d, 61, 6c 
4137:089 | DONE dir | na 16 16 |        |             |                 64 65 63 69 6d 61 6c     --  d e c i m a l
4137:090 | DONE wsp | na 16 16 |        |             |
4137:091 | DONE lbl | na 16 16 | 006c44 |             | nt_hex                               
4137:092 | DONE dir | na 16 16 | 006c44 | (2 bytes)   |         .byte 3, { NC }              
4137:092 | DONE dir | na 16 16 |        |             |                 03 01                    --  . .
4137:093 | DONE dir | na 16 16 | 006c46 | (6 bytes)   |         .word nt_decimal, xt_hex, 006741 
4137:093 | DONE dir | na 16 16 |        |             |                 35 6c 3c 67 41 67        --  5 l < g A g
4137:094 | DONE dir | na 16 16 | 006c4c | (3 bytes)   |         .byte 68, 65, 78             
4137:094 | DONE dir | na 16 16 |        |             |                 68 65 78                 --  h e x
4137:095 | DONE wsp | na 16 16 |        |             |
4137:096 | DONE lbl | na 16 16 | 006c4f |             | nt_unused                            
4137:097 | DONE dir | na 16 16 | 006c4f | (2 bytes)   |         .byte 6, { NC }              
4137:097 | DONE dir | na 16 16 |        |             |                 06 01                    --  . .
4137:098 | DONE dir | na 16 16 | 006c51 | (6 bytes)   |         .word nt_hex, xt_unused, 006b6a 
4137:098 | DONE dir | na 16 16 |        |             |                 44 6c 5f 6b 6a 6b        --  D l _ k j k
4137:099 | DONE dir | na 16 16 | 006c57 | (6 bytes)   |         .byte 75, 6e, 75, 73, 65, 64 
4137:099 | DONE dir | na 16 16 |        |             |                 75 6e 75 73 65 64        --  u n u s e d
4137:100 | DONE wsp | na 16 16 |        |             |
4137:101 | DONE lbl | na 16 16 | 006c5d |             | nt_page                              
4137:102 | DONE dir | na 16 16 | 006c5d | (2 bytes)   |         .byte 4, { NC }              
4137:102 | DONE dir | na 16 16 |        |             |                 04 01                    --  . .
4137:103 | DONE dir | na 16 16 | 006c5f | (6 bytes)   |         .word nt_unused, xt_page, 00689b 
4137:103 | DONE dir | na 16 16 |        |             |                 4f 6c 8f 68 9b 68        --  O l . h . h
4137:104 | DONE dir | na 16 16 | 006c65 | (4 bytes)   |         .byte 70, 61, 67, 65         
4137:104 | DONE dir | na 16 16 |        |             |                 70 61 67 65              --  p a g e
4137:105 | DONE wsp | na 16 16 |        |             |
4137:106 | DONE lbl | na 16 16 | 006c69 |             | nt_dabs                              
4137:107 | DONE dir | na 16 16 | 006c69 | (2 bytes)   |         .byte 4, { NC }              
4137:107 | DONE dir | na 16 16 |        |             |                 04 01                    --  . .
4137:108 | DONE dir | na 16 16 | 006c6b | (6 bytes)   |         .word nt_page, xt_dabs, 006614 
4137:108 | DONE dir | na 16 16 |        |             |                 5d 6c 0e 66 14 66        --  ] l . f . f
4137:109 | DONE dir | na 16 16 | 006c71 | (4 bytes)   |         .byte 64, 61, 62, 73         
4137:109 | DONE dir | na 16 16 |        |             |                 64 61 62 73              --  d a b s
4137:110 | DONE wsp | na 16 16 |        |             |
4137:111 | DONE lbl | na 16 16 | 006c75 |             | nt_dnegate                           
4137:112 | DONE dir | na 16 16 | 006c75 | (2 bytes)   |         .byte 7, { NC }              
4137:112 | DONE dir | na 16 16 |        |             |                 07 01                    --  . .
4137:113 | DONE dir | na 16 16 | 006c77 | (6 bytes)   |         .word nt_dabs, xt_dnegate, 00663d 
4137:113 | DONE dir | na 16 16 |        |             |                 69 6c 2a 66 3d 66        --  i l * f = f
4137:114 | DONE dir | na 16 16 | 006c7d | (7 bytes)   |         .byte 64, 6e, 65, 67, 61, 74, 65 
4137:114 | DONE dir | na 16 16 |        |             |                 64 6e 65 67 61 74 65     --  d n e g a t e
4137:115 | DONE wsp | na 16 16 |        |             |
4137:116 | DONE lbl | na 16 16 | 006c84 |             | nt_dtos                              
4137:117 | DONE dir | na 16 16 | 006c84 | (2 bytes)   |         .byte 3, { NC }              
4137:117 | DONE dir | na 16 16 |        |             |                 03 01                    --  . .
4137:118 | DONE dir | na 16 16 | 006c86 | (6 bytes)   |         .word nt_dnegate, xt_dtos, 00660d 
4137:118 | DONE dir | na 16 16 |        |             |                 75 6c 09 66 0d 66        --  u l 	 f  f
4137:119 | DONE dir | na 16 16 | 006c8c | (3 bytes)   |         .byte 64, 3e, 73             
4137:119 | DONE dir | na 16 16 |        |             |                 64 3e 73                 --  d > s
4137:120 | DONE wsp | na 16 16 |        |             |
4137:121 | DONE lbl | na 16 16 | 006c8f |             | nt_stod                              
4137:122 | DONE dir | na 16 16 | 006c8f | (2 bytes)   |         .byte 3, { NC }              
4137:122 | DONE dir | na 16 16 |        |             |                 03 01                    --  . .
4137:123 | DONE dir | na 16 16 | 006c91 | (6 bytes)   |         .word nt_dtos, xt_stod, 0069b4 
4137:123 | DONE dir | na 16 16 |        |             |                 84 6c a5 69 b4 69        --  . l . i . i
4137:124 | DONE dir | na 16 16 | 006c97 | (3 bytes)   |         .byte 73, 3e, 64             
4137:124 | DONE dir | na 16 16 |        |             |                 73 3e 64                 --  s > d
4137:125 | DONE wsp | na 16 16 |        |             |
4137:126 | DONE lbl | na 16 16 | 006c9a |             | nt_dplus                             
4137:127 | DONE dir | na 16 16 | 006c9a | (2 bytes)   |         .byte 2, { NC }              
4137:127 | DONE dir | na 16 16 |        |             |                 02 01                    --  . .
4137:128 | DONE dir | na 16 16 | 006c9c | (6 bytes)   |         .word nt_stod, xt_dplus, 006608 
4137:128 | DONE dir | na 16 16 |        |             |                 8f 6c f7 65 08 66        --  . l . e . f
4137:129 | DONE dir | na 16 16 | 006ca2 | (2 bytes)   |         .byte 64, 2b                 
4137:129 | DONE dir | na 16 16 |        |             |                 64 2b                    --  d +
4137:130 | DONE wsp | na 16 16 |        |             |
4137:131 | DONE lbl | na 16 16 | 006ca4 |             | nt_udmod                             
4137:132 | DONE dir | na 16 16 | 006ca4 | (2 bytes)   |         .byte 6, { NC }              
4137:132 | DONE dir | na 16 16 |        |             |                 06 01                    --  . .
4137:133 | DONE dir | na 16 16 | 006ca6 | (6 bytes)   |         .word nt_dplus, xt_udmod, 006aaf 
4137:133 | DONE dir | na 16 16 |        |             |                 9a 6c 94 6a af 6a        --  . l . j . j
4137:134 | DONE dir | na 16 16 | 006cac | (6 bytes)   |         .byte 75, 64, 2f, 6d, 6f, 64 
4137:134 | DONE dir | na 16 16 |        |             |                 75 64 2f 6d 6f 64        --  u d / m o d
4137:135 | DONE wsp | na 16 16 |        |             |
4137:136 | DONE lbl | na 16 16 | 006cb2 |             | nt_ummod                             
4137:137 | DONE dir | na 16 16 | 006cb2 | (2 bytes)   |         .byte 6, { NC }              
4137:137 | DONE dir | na 16 16 |        |             |                 06 01                    --  . .
4137:138 | DONE dir | na 16 16 | 006cb4 | (6 bytes)   |         .word nt_udmod, xt_ummod, 006b5e 
4137:138 | DONE dir | na 16 16 |        |             |                 a4 6c 0e 6b 5e 6b        --  . l . k ^ k
4137:139 | DONE dir | na 16 16 | 006cba | (6 bytes)   |         .byte 75, 6d, 2f, 6d, 6f, 64 
4137:139 | DONE dir | na 16 16 |        |             |                 75 6d 2f 6d 6f 64        --  u m / m o d
4137:140 | DONE wsp | na 16 16 |        |             |
4137:141 | DONE lbl | na 16 16 | 006cc0 |             | nt_star                              
4137:142 | DONE dir | na 16 16 | 006cc0 | (2 bytes)   |         .byte 1, { NC }              
4137:142 | DONE dir | na 16 16 |        |             |                 01 01                    --  . .
4137:143 | DONE dir | na 16 16 | 006cc2 | (6 bytes)   |         .word nt_ummod, xt_star, 006a53 
4137:143 | DONE dir | na 16 16 |        |             |                 b2 6c 4c 6a 53 6a        --  . l L j S j
4137:144 | DONE dir | na 16 16 | 006cc8 | (1 bytes)   |         .byte 2a                     
4137:144 | DONE dir | na 16 16 |        |             |                 2a                       --  *
4137:145 | DONE wsp | na 16 16 |        |             |
4137:146 | DONE lbl | na 16 16 | 006cc9 |             | nt_mstar                             
4137:147 | DONE dir | na 16 16 | 006cc9 | (2 bytes)   |         .byte 2, { NC }              
4137:147 | DONE dir | na 16 16 |        |             |                 02 01                    --  . .
4137:148 | DONE dir | na 16 16 | 006ccb | (6 bytes)   |         .word nt_star, xt_mstar, 0067a6 
4137:148 | DONE dir | na 16 16 |        |             |                 c0 6c 87 67 a6 67        --  . l . g . g
4137:149 | DONE dir | na 16 16 | 006cd1 | (2 bytes)   |         .byte 6d, 2a                 
4137:149 | DONE dir | na 16 16 |        |             |                 6d 2a                    --  m *
4137:150 | DONE wsp | na 16 16 |        |             |
4137:151 | DONE lbl | na 16 16 | 006cd3 |             | nt_umstar                            
4137:152 | DONE dir | na 16 16 | 006cd3 | (2 bytes)   |         .byte 3, { NC }              
4137:152 | DONE dir | na 16 16 |        |             |                 03 01                    --  . .
4137:153 | DONE dir | na 16 16 | 006cd5 | (6 bytes)   |         .word nt_mstar, xt_umstar, 006b0d 
4137:153 | DONE dir | na 16 16 |        |             |                 c9 6c af 6a 0d 6b        --  . l . j  k
4137:154 | DONE dir | na 16 16 | 006cdb | (3 bytes)   |         .byte 75, 6d, 2a             
4137:154 | DONE dir | na 16 16 |        |             |                 75 6d 2a                 --  u m *
4137:155 | DONE wsp | na 16 16 |        |             |
4137:156 | DONE lbl | na 16 16 | 006cde |             | nt_count                             
4137:157 | DONE dir | na 16 16 | 006cde | (2 bytes)   |         .byte 5, { NC }              
4137:157 | DONE dir | na 16 16 |        |             |                 05 01                    --  . .
4137:158 | DONE dir | na 16 16 | 006ce0 | (6 bytes)   |         .word nt_umstar, xt_count, 006540 
4137:158 | DONE dir | na 16 16 |        |             |                 d3 6c 32 65 40 65        --  . l 2 e @ e
4137:159 | DONE dir | na 16 16 | 006ce6 | (5 bytes)   |         .byte 63, 6f, 75, 6e, 74     
4137:159 | DONE dir | na 16 16 |        |             |                 63 6f 75 6e 74           --  c o u n t
4137:160 | DONE wsp | na 16 16 |        |             |
4137:161 | DONE lbl | na 16 16 | 006ceb |             | nt_abortq                            
4137:162 | DONE dir | na 16 16 | 006ceb | (2 bytes)   |         .byte 6, { CO + IM }         
4137:162 | DONE dir | na 16 16 |        |             |                 06 06                    --  . .
4137:163 | DONE dir | na 16 16 | 006ced | (6 bytes)   |         .word nt_count, xt_abortq, 0063a4 
4137:163 | DONE dir | na 16 16 |        |             |                 de 6c 88 63 a4 63        --  . l . c . c
4137:164 | DONE dir | na 16 16 | 006cf3 | (6 bytes)   |         .byte 61, 62, 6f, 72, 74, &34 ABORT"
4137:164 | DONE dir | na 16 16 |        |             |                 61 62 6f 72 74 22        --  a b o r t "
4137:165 | DONE wsp | na 16 16 |        |             |
4137:166 | DONE lbl | na 16 16 | 006cf9 |             | nt_abort                             
4137:167 | DONE dir | na 16 16 | 006cf9 | (2 bytes)   |         .byte 5, 00                  TODO check flags - NC possible?
4137:167 | DONE dir | na 16 16 |        |             |                 05 00                    --  . .
4137:168 | DONE dir | na 16 16 | 006cfb | (6 bytes)   |         .word nt_abortq, xt_abort, 0060de 
4137:168 | DONE dir | na 16 16 |        |             |                 eb 6c 97 60 de 60        --  . l . ` . `
4137:169 | DONE dir | na 16 16 | 006d01 | (5 bytes)   |         .byte 61, 62, 6f, 72, 74     
4137:169 | DONE dir | na 16 16 |        |             |                 61 62 6f 72 74           --  a b o r t
4137:170 | DONE wsp | na 16 16 |        |             |
4137:171 | DONE lbl | na 16 16 | 006d06 |             | nt_parse                             
4137:172 | DONE dir | na 16 16 | 006d06 | (2 bytes)   |         .byte 5, 00                  
4137:172 | DONE dir | na 16 16 |        |             |                 05 00                    --  . .
4137:173 | DONE dir | na 16 16 | 006d08 | (6 bytes)   |         .word nt_abort, xt_parse, 006900 
4137:173 | DONE dir | na 16 16 |        |             |                 f9 6c ce 68 00 69        --  . l . h . i
4137:174 | DONE dir | na 16 16 | 006d0e | (5 bytes)   |         .byte 70, 61, 72, 73, 65     
4137:174 | DONE dir | na 16 16 |        |             |                 70 61 72 73 65           --  p a r s e
4137:175 | DONE wsp | na 16 16 |        |             |
4137:176 | DONE lbl | na 16 16 | 006d13 |             | nt_quit                              
4137:177 | DONE dir | na 16 16 | 006d13 | (2 bytes)   |         .byte 4, 00                  
4137:177 | DONE dir | na 16 16 |        |             |                 04 00                    --  . .
4137:178 | DONE dir | na 16 16 | 006d15 | (6 bytes)   |         .word nt_parse, xt_quit, 0060de 
4137:178 | DONE dir | na 16 16 |        |             |                 06 6d 9f 60 de 60        --  . m . ` . `
4137:179 | DONE dir | na 16 16 | 006d1b | (4 bytes)   |         .byte 71, 75, 69, 74         
4137:179 | DONE dir | na 16 16 |        |             |                 71 75 69 74              --  q u i t
4137:180 | DONE wsp | na 16 16 |        |             |
4137:181 | DONE lbl | na 16 16 | 006d1f |             | nt_question                          
4137:182 | DONE dir | na 16 16 | 006d1f | (2 bytes)   |         .byte 1, { NC }              
4137:182 | DONE dir | na 16 16 |        |             |                 01 01                    --  . .
4137:183 | DONE dir | na 16 16 | 006d21 | (6 bytes)   |         .word nt_quit, xt_question, 006297 
4137:183 | DONE dir | na 16 16 |        |             |                 13 6d 91 62 97 62        --  . m . b . b
4137:184 | DONE dir | na 16 16 | 006d27 | (1 bytes)   |         .byte 3f                     
4137:184 | DONE dir | na 16 16 |        |             |                 3f                       --  ?
4137:185 | DONE wsp | na 16 16 |        |             |
4137:186 | DONE lbl | na 16 16 | 006d28 |             | nt_name-int                          
4137:187 | DONE dir | na 16 16 | 006d28 | (2 bytes)   |         .byte 8, { NC }              
4137:187 | DONE dir | na 16 16 |        |             |                 08 01                    --  . .
4137:188 | DONE dir | na 16 16 | 006d2a | (6 bytes)   |         .word nt_question, xt_name-int, 0067d5 
4137:188 | DONE dir | na 16 16 |        |             |                 1f 6d cd 67 d5 67        --  . m . g . g
4137:189 | DONE dir | na 16 16 | 006d30 | (8 bytes)   |         .byte 6e, 61, 6d, 65, 3e, 69, 6e, 74 
4137:189 | DONE dir | na 16 16 |        |             |                 6e 61 6d 65 3e 69 6e 74  --  n a m e > i n t
4137:189 | DONE dir | na 16 16 |        |             |                                          -- 
4137:190 | DONE wsp | na 16 16 |        |             |
4137:191 | DONE lbl | na 16 16 | 006d38 |             | nt_cr                                
4137:192 | DONE dir | na 16 16 | 006d38 | (2 bytes)   |         .byte 2, { NC }              
4137:192 | DONE dir | na 16 16 |        |             |                 02 01                    --  . .
4137:193 | DONE dir | na 16 16 | 006d3a | (6 bytes)   |         .word nt_name-int, xt_cr, 006547 
4137:193 | DONE dir | na 16 16 |        |             |                 28 6d 41 65 47 65        --  ( m A e G e
4137:194 | DONE dir | na 16 16 | 006d40 | (2 bytes)   |         .byte 63, 72                 
4137:194 | DONE dir | na 16 16 |        |             |                 63 72                    --  c r
4137:195 | DONE wsp | na 16 16 |        |             |
4137:196 | DONE lbl | na 16 16 | 006d42 |             | nt_numbermore                        
4137:197 | DONE dir | na 16 16 | 006d42 | (2 bytes)   |         .byte 2, { NC }              "quoth the rumben"
4137:197 | DONE dir | na 16 16 |        |             |                 02 01                    --  . .
4137:198 | DONE dir | na 16 16 | 006d44 | (6 bytes)   |         .word nt_cr, xt_numbermore, 006287 
4137:198 | DONE dir | na 16 16 |        |             |                 38 6d 79 62 87 62        --  8 m y b . b
4137:199 | DONE dir | na 16 16 | 006d4a | (2 bytes)   |         .byte 23, 3e                 
4137:199 | DONE dir | na 16 16 |        |             |                 23 3e                    --  # >
4137:200 | DONE wsp | na 16 16 |        |             |
4137:201 | DONE lbl | na 16 16 | 006d4c |             | nt_hold                              
4137:202 | DONE dir | na 16 16 | 006d4c | (2 bytes)   |         .byte 4, { NC }              
4137:202 | DONE dir | na 16 16 |        |             |                 04 01                    --  . .
4137:203 | DONE dir | na 16 16 | 006d4e | (6 bytes)   |         .word nt_numbermore, xt_hold, 00674f 
4137:203 | DONE dir | na 16 16 |        |             |                 42 6d 42 67 4f 67        --  B m B g O g
4137:204 | DONE dir | na 16 16 | 006d54 | (4 bytes)   |         .byte 68, 6f, 6c, 64         
4137:204 | DONE dir | na 16 16 |        |             |                 68 6f 6c 64              --  h o l d
4137:205 | DONE wsp | na 16 16 |        |             |
4137:206 | DONE lbl | na 16 16 | 006d58 |             | nt_hashs                             
4137:207 | DONE dir | na 16 16 | 006d58 | (2 bytes)   |         .byte 2, { NC }              also known as "number-s"
4137:207 | DONE dir | na 16 16 |        |             |                 02 01                    --  . .
4137:208 | DONE dir | na 16 16 | 006d5a | (6 bytes)   |         .word nt_hold, xt_hashs, 006290 
4137:208 | DONE dir | na 16 16 |        |             |                 4c 6d 88 62 90 62        --  L m . b . b
4137:209 | DONE dir | na 16 16 | 006d60 | (2 bytes)   |         .byte 23, 73                 
4137:209 | DONE dir | na 16 16 |        |             |                 23 73                    --  # s
4137:210 | DONE wsp | na 16 16 |        |             |
4137:211 | DONE lbl | na 16 16 | 006d62 |             | nt_sign                              
4137:212 | DONE dir | na 16 16 | 006d62 | (2 bytes)   |         .byte 4, { NC }              
4137:212 | DONE dir | na 16 16 |        |             |                 04 01                    --  . .
4137:213 | DONE dir | na 16 16 | 006d64 | (6 bytes)   |         .word nt_hashs, xt_sign, 0069c2 
4137:213 | DONE dir | na 16 16 |        |             |                 58 6d b5 69 c2 69        --  X m . i . i
4137:214 | DONE dir | na 16 16 | 006d6a | (4 bytes)   |         .byte 73, 69, 67, 6e         
4137:214 | DONE dir | na 16 16 |        |             |                 73 69 67 6e              --  s i g n
4137:215 | DONE wsp | na 16 16 |        |             |
4137:216 | DONE lbl | na 16 16 | 006d6e |             | nt_hash                              
4137:217 | DONE dir | na 16 16 | 006d6e | (2 bytes)   |         .byte 1, { NC }              also known as "number-sign"
4137:217 | DONE dir | na 16 16 |        |             |                 01 01                    --  . .
4137:218 | DONE dir | na 16 16 | 006d70 | (6 bytes)   |         .word nt_sign, xt_hash, 006278 
4137:218 | DONE dir | na 16 16 |        |             |                 62 6d 5e 62 78 62        --  b m ^ b x b
4137:219 | DONE dir | na 16 16 | 006d76 | (1 bytes)   |         .byte 23                     
4137:219 | DONE dir | na 16 16 |        |             |                 23                       --  #
4137:220 | DONE wsp | na 16 16 |        |             |
4137:221 | DONE lbl | na 16 16 | 006d77 |             | nt_lessnumber                        
4137:222 | DONE dir | na 16 16 | 006d77 | (2 bytes)   |         .byte 2, { NC }              
4137:222 | DONE dir | na 16 16 |        |             |                 02 01                    --  . .
4137:223 | DONE dir | na 16 16 | 006d79 | (6 bytes)   |         .word nt_hash, xt_lessnumber, 006108 
4137:223 | DONE dir | na 16 16 |        |             |                 6e 6d ff 60 08 61        --  n m . ` . a
4137:224 | DONE dir | na 16 16 | 006d7f | (2 bytes)   |         .byte 3c, 23                 
4137:224 | DONE dir | na 16 16 |        |             |                 3c 23                    --  < #
4137:225 | DONE wsp | na 16 16 |        |             |
4137:226 | DONE lbl | na 16 16 | 006d81 |             | nt_bl                                
4137:227 | DONE dir | na 16 16 | 006d81 | (2 bytes)   |         .byte 2, { NC }              
4137:227 | DONE dir | na 16 16 |        |             |                 02 01                    --  . .
4137:228 | DONE dir | na 16 16 | 006d83 | (6 bytes)   |         .word nt_lessnumber, xt_bl, 006495 
4137:228 | DONE dir | na 16 16 |        |             |                 77 6d 8e 64 95 64        --  w m . d . d
4137:229 | DONE dir | na 16 16 | 006d89 | (2 bytes)   |         .byte 62, 6c                 
4137:229 | DONE dir | na 16 16 |        |             |                 62 6c                    --  b l
4137:230 | DONE wsp | na 16 16 |        |             |
4137:231 | DONE lbl | na 16 16 | 006d8b |             | nt_spaces                            
4137:232 | DONE dir | na 16 16 | 006d8b | (2 bytes)   |         .byte 6, { NC }              
4137:232 | DONE dir | na 16 16 |        |             |                 06 01                    --  . .
4137:233 | DONE dir | na 16 16 | 006d8d | (6 bytes)   |         .word nt_bl, xt_spaces, 006a4b 
4137:233 | DONE dir | na 16 16 |        |             |                 81 6d 3f 6a 4b 6a        --  . m ? j K j
4137:234 | DONE dir | na 16 16 | 006d93 | (6 bytes)   |         .byte 73, 70, 61, 63, 65, 73 
4137:234 | DONE dir | na 16 16 |        |             |                 73 70 61 63 65 73        --  s p a c e s
4137:235 | DONE wsp | na 16 16 |        |             |
4137:236 | DONE lbl | na 16 16 | 006d99 |             | nt_space                             
4137:237 | DONE dir | na 16 16 | 006d99 | (2 bytes)   |         .byte 5, { NC }              
4137:237 | DONE dir | na 16 16 |        |             |                 05 01                    --  . .
4137:238 | DONE dir | na 16 16 | 006d9b | (6 bytes)   |         .word nt_spaces, xt_space, 006a3e 
4137:238 | DONE dir | na 16 16 |        |             |                 8b 6d 38 6a 3e 6a        --  . m 8 j > j
4137:239 | DONE dir | na 16 16 | 006da1 | (5 bytes)   |         .byte 73, 70, 61, 63, 65     
4137:239 | DONE dir | na 16 16 |        |             |                 73 70 61 63 65           --  s p a c e
4137:240 | DONE wsp | na 16 16 |        |             |
4137:241 | DONE lbl | na 16 16 | 006da6 |             | nt_dots                              
4137:242 | DONE dir | na 16 16 | 006da6 | (2 bytes)   |         .byte 2, { NC }              
4137:242 | DONE dir | na 16 16 |        |             |                 02 01                    --  . .
4137:243 | DONE dir | na 16 16 | 006da8 | (6 bytes)   |         .word nt_space, xt_dots, 006216 
4137:243 | DONE dir | na 16 16 |        |             |                 99 6d cf 61 16 62        --  . m . a . b
4137:244 | DONE dir | na 16 16 | 006dae | (2 bytes)   |         .byte 2e, 73                 
4137:244 | DONE dir | na 16 16 |        |             |                 2e 73                    --  . s
4137:245 | DONE wsp | na 16 16 |        |             |
4137:246 | DONE lbl | na 16 16 | 006db0 |             | nt_type                              
4137:247 | DONE dir | na 16 16 | 006db0 | (2 bytes)   |         .byte 4, 0                   
4137:247 | DONE dir | na 16 16 |        |             |                 04 00                    --  . .
4137:248 | DONE dir | na 16 16 | 006db2 | (6 bytes)   |         .word nt_dots, xt_type, 006a93 
4137:248 | DONE dir | na 16 16 |        |             |                 a6 6d 73 6a 93 6a        --  . m s j . j
4137:249 | DONE dir | na 16 16 | 006db8 | (4 bytes)   |         .byte 74, 79, 70, 65         
4137:249 | DONE dir | na 16 16 |        |             |                 74 79 70 65              --  t y p e
4137:250 | DONE wsp | na 16 16 |        |             |
4137:251 | DONE lbl | na 16 16 | 006dbc |             | nt_dot                               
4137:252 | DONE dir | na 16 16 | 006dbc | (2 bytes)   |         .byte 1, { NC }              
4137:252 | DONE dir | na 16 16 |        |             |                 01 01                    --  . .
4137:253 | DONE dir | na 16 16 | 006dbe | (6 bytes)   |         .word nt_type, xt_dot, 0061ac 
4137:253 | DONE dir | na 16 16 |        |             |                 b0 6d 8e 61 ac 61        --  . m . a . a
4137:254 | DONE dir | na 16 16 | 006dc4 | (1 bytes)   |         .byte 2e                     
4137:254 | DONE dir | na 16 16 |        |             |                 2e                       --  .
4137:255 | DONE wsp | na 16 16 |        |             |
4137:256 | DONE lbl | na 16 16 | 006dc5 |             | nt_pad                               
4137:257 | DONE dir | na 16 16 | 006dc5 | (2 bytes)   |         .byte 3, { NC }              
4137:257 | DONE dir | na 16 16 |        |             |                 03 01                    --  . .
4137:258 | DONE dir | na 16 16 | 006dc7 | (6 bytes)   |         .word nt_dot, xt_pad, 00688e 
4137:258 | DONE dir | na 16 16 |        |             |                 bc 6d 83 68 8e 68        --  . m . h . h
4137:259 | DONE dir | na 16 16 | 006dcd | (3 bytes)   |         .byte 70, 61, 64             
4137:259 | DONE dir | na 16 16 |        |             |                 70 61 64                 --  p a d
4137:260 | DONE wsp | na 16 16 |        |             |
4137:261 | DONE lbl | na 16 16 | 006dd0 |             | nt_base                              
4137:262 | DONE dir | na 16 16 | 006dd0 | (2 bytes)   |         .byte 4, { NC }              
4137:262 | DONE dir | na 16 16 |        |             |                 04 01                    --  . .
4137:263 | DONE dir | na 16 16 | 006dd2 | (6 bytes)   |         .word nt_pad, xt_base, 00647f 
4137:263 | DONE dir | na 16 16 |        |             |                 c5 6d 78 64 7f 64        --  . m x d . d
4137:264 | DONE dir | na 16 16 | 006dd8 | (4 bytes)   |         .byte 62, 61, 73, 65         
4137:264 | DONE dir | na 16 16 |        |             |                 62 61 73 65              --  b a s e
4137:265 | DONE wsp | na 16 16 |        |             |
4137:266 | DONE lbl | na 16 16 | 006ddc |             | nt_evaluate                          
4137:267 | DONE dir | na 16 16 | 006ddc | (2 bytes)   |         .byte 8, { NC }              
4137:267 | DONE dir | na 16 16 |        |             |                 08 01                    --  . .
4137:268 | DONE dir | na 16 16 | 006dde | (6 bytes)   |         .word nt_base, xt_evaluate, 0066c0 
4137:268 | DONE dir | na 16 16 |        |             |                 d0 6d 92 66 c0 66        --  . m . f . f
4137:269 | DONE dir | na 16 16 | 006de4 | (8 bytes)   |         .byte 65, 76, 61, 6c, 75, 61, 74, 65 
4137:269 | DONE dir | na 16 16 |        |             |                 65 76 61 6c 75 61 74 65  --  e v a l u a t e
4137:269 | DONE dir | na 16 16 |        |             |                                          -- 
4137:270 | DONE wsp | na 16 16 |        |             |
4137:271 | DONE lbl | na 16 16 | 006dec |             | nt_cells                             
4137:272 | DONE dir | na 16 16 | 006dec | (2 bytes)   |         .byte 5, { NC }              2* because we have 16 bit stack
4137:272 | DONE dir | na 16 16 |        |             |                 05 01                    --  . .
4137:273 | DONE dir | na 16 16 | 006dee | (6 bytes)   |         .word nt_evaluate, xt_two-star, 006359 
4137:273 | DONE dir | na 16 16 |        |             |                 dc 6d 56 63 59 63        --  . m V c Y c
4137:274 | DONE dir | na 16 16 | 006df4 | (5 bytes)   |         .byte 63, 65, 6c, 6c, 73     
4137:274 | DONE dir | na 16 16 |        |             |                 63 65 6c 6c 73           --  c e l l s
4137:275 | DONE wsp | na 16 16 |        |             |
4137:276 | DONE lbl | na 16 16 | 006df9 |             | nt_dotquote                          
4137:277 | DONE dir | na 16 16 | 006df9 | (2 bytes)   |         .byte 2, { CO + NC + IM }    
4137:277 | DONE dir | na 16 16 |        |             |                 02 07                    --  . .
4137:278 | DONE dir | na 16 16 | 006dfb | (6 bytes)   |         .word nt_cells, xt_dotquote, 0061cf 
4137:278 | DONE dir | na 16 16 |        |             |                 ec 6d bb 61 cf 61        --  . m . a . a
4137:279 | DONE dir | na 16 16 | 006e01 | (2 bytes)   |         .byte 2e, &34                
4137:279 | DONE dir | na 16 16 |        |             |                 2e 22                    --  . "
4137:280 | DONE wsp | na 16 16 |        |             |
4137:281 | DONE lbl | na 16 16 | 006e03 |             | nt_squote                            
4137:282 | DONE dir | na 16 16 | 006e03 | (2 bytes)   |         .byte 2, { IM + NC }         not CO, see source code
4137:282 | DONE dir | na 16 16 |        |             |                 02 03                    --  . .
4137:283 | DONE dir | na 16 16 | 006e05 | (6 bytes)   |         .word nt_dotquote, xt_squote, 0069a4 
4137:283 | DONE dir | na 16 16 |        |             |                 f9 6d 93 69 a4 69        --  . m . i . i
4137:284 | DONE dir | na 16 16 | 006e0b | (2 bytes)   |         .byte 73, &34                
4137:284 | DONE dir | na 16 16 |        |             |                 73 22                    --  s "
4137:285 | DONE wsp | na 16 16 |        |             |
4137:286 | DONE lbl | na 16 16 | 006e0d |             | nt_sliteral                          
4137:287 | DONE dir | na 16 16 | 006e0d | (2 bytes)   |         .byte 8, { IM + CO }         
4137:287 | DONE dir | na 16 16 |        |             |                 08 06                    --  . .
4137:288 | DONE dir | na 16 16 | 006e0f | (6 bytes)   |         .word nt_squote, xt_sliteral, 006a0d 
4137:288 | DONE dir | na 16 16 |        |             |                 03 6e c3 69 0d 6a        --  . n . i  j
4137:289 | DONE dir | na 16 16 | 006e15 | (8 bytes)   |         .byte 73, 6c, 69, 74, 65, 72, 61, 6c 
4137:289 | DONE dir | na 16 16 |        |             |                 73 6c 69 74 65 72 61 6c  --  s l i t e r a l
4137:289 | DONE dir | na 16 16 |        |             |                                          -- 
4137:290 | DONE wsp | na 16 16 |        |             |
4137:291 | DONE lbl | na 16 16 | 006e1d |             | nt_brackettick                       
4137:292 | DONE dir | na 16 16 | 006e1d | (2 bytes)   |         .byte 3, { IM + CO }         
4137:292 | DONE dir | na 16 16 |        |             |                 03 06                    --  . .
4137:293 | DONE dir | na 16 16 | 006e1f | (6 bytes)   |         .word nt_sliteral, xt_brackettick, 0062af 
4137:293 | DONE dir | na 16 16 |        |             |                 0d 6e a9 62 af 62        --   n . b . b
4137:294 | DONE dir | na 16 16 | 006e25 | (3 bytes)   |         .byte 5b, 27, 5d             
4137:294 | DONE dir | na 16 16 |        |             |                 5b 27 5d                 --  [ ' ]
4137:295 | DONE wsp | na 16 16 |        |             |
4137:296 | DONE lbl | na 16 16 | 006e28 |             | nt_bracketchar                       
4137:297 | DONE dir | na 16 16 | 006e28 | (2 bytes)   |         .byte 6, { IM + CO }         
4137:297 | DONE dir | na 16 16 |        |             |                 06 06                    --  . .
4137:298 | DONE dir | na 16 16 | 006e2a | (6 bytes)   |         .word nt_brackettick, xt_bracketchar, 0062be 
4137:298 | DONE dir | na 16 16 |        |             |                 1d 6e b8 62 be 62        --  . n . b . b
4137:299 | DONE dir | na 16 16 | 006e30 | (6 bytes)   |         .byte 5b, 63, 68, 61, 72, 5d 
4137:299 | DONE dir | na 16 16 |        |             |                 5b 63 68 61 72 5d        --  [ c h a r ]
4137:300 | DONE wsp | na 16 16 |        |             |
4137:301 | DONE lbl | na 16 16 | 006e36 |             | nt_literal                           
4137:302 | DONE dir | na 16 16 | 006e36 | (2 bytes)   |         .byte 7, { IM + CO }         
4137:302 | DONE dir | na 16 16 |        |             |                 07 06                    --  . .
4137:303 | DONE dir | na 16 16 | 006e38 | (6 bytes)   |         .word nt_bracketchar, xt_literal, 006779 
4137:303 | DONE dir | na 16 16 |        |             |                 28 6e 68 67 79 67        --  ( n h g y g
4137:304 | DONE dir | na 16 16 | 006e3e | (7 bytes)   |         .byte 6c, 69, 74, 65, 72, 61, 6c 
4137:304 | DONE dir | na 16 16 |        |             |                 6c 69 74 65 72 61 6c     --  l i t e r a l
4137:305 | DONE wsp | na 16 16 |        |             |
4137:306 | DONE lbl | na 16 16 | 006e45 |             | nt_compile-only                      
4137:307 | DONE dir | na 16 16 | 006e45 | (2 bytes)   |         .byte 0c, { NC }             
4137:307 | DONE dir | na 16 16 |        |             |                 0c 01                    --   .
4137:308 | DONE dir | na 16 16 | 006e47 | (6 bytes)   |         .word nt_literal, xt_compile-only, 006504 
4137:308 | DONE dir | na 16 16 |        |             |                 36 6e fc 64 04 65        --  6 n . d . e
4137:309 | DONE dir | na 16 16 | 006e4d | (12 bytes)  |         .byte 63, 6f, 6d, 70, 69, 6c, 65, 2d, 6f, 6e, 6c, 79 
4137:309 | DONE dir | na 16 16 |        |             |                 63 6f 6d 70 69 6c 65 2d  --  c o m p i l e -
4137:309 | DONE dir | na 16 16 |        |             |                 6f 6e 6c 79              --  o n l y
4137:310 | DONE wsp | na 16 16 |        |             |
4137:311 | DONE lbl | na 16 16 | 006e59 |             | nt_immediate                         
4137:312 | DONE dir | na 16 16 | 006e59 | (2 bytes)   |         .byte 9, { NC }              
4137:312 | DONE dir | na 16 16 |        |             |                 09 01                    --  	 .
4137:313 | DONE dir | na 16 16 | 006e5b | (6 bytes)   |         .word nt_compile-only, xt_immediate, 00672e 
4137:313 | DONE dir | na 16 16 |        |             |                 45 6e 26 67 2e 67        --  E n & g . g
4137:314 | DONE dir | na 16 16 | 006e61 | (9 bytes)   |         .byte 69, 6d, 6d, 65, 64, 69, 61, 74, 65 
4137:314 | DONE dir | na 16 16 |        |             |                 69 6d 6d 65 64 69 61 74  --  i m m e d i a t
4137:314 | DONE dir | na 16 16 |        |             |                 65                       --  e
4137:315 | DONE wsp | na 16 16 |        |             |
4137:316 | DONE lbl | na 16 16 | 006e6a |             | nt_postpone                          
4137:317 | DONE dir | na 16 16 | 006e6a | (2 bytes)   |         .byte 8, { IM + CO }         
4137:317 | DONE dir | na 16 16 |        |             |                 08 06                    --  . .
4137:318 | DONE dir | na 16 16 | 006e6c | (6 bytes)   |         .word nt_immediate, xt_postpone, 006946 
4137:318 | DONE dir | na 16 16 |        |             |                 59 6e 11 69 46 69        --  Y n . i F i
4137:319 | DONE dir | na 16 16 | 006e72 | (8 bytes)   |         .byte 70, 6f, 73, 74, 70, 6f, 6e, 65 
4137:319 | DONE dir | na 16 16 |        |             |                 70 6f 73 74 70 6f 6e 65  --  p o s t p o n e
4137:319 | DONE dir | na 16 16 |        |             |                                          -- 
4137:320 | DONE wsp | na 16 16 |        |             |
4137:321 | DONE lbl | na 16 16 | 006e7a |             | nt_rightbracket                      
4137:322 | DONE dir | na 16 16 | 006e7a | (2 bytes)   |         .byte 1, { NC }              
4137:322 | DONE dir | na 16 16 |        |             |                 01 01                    --  . .
4137:323 | DONE dir | na 16 16 | 006e7c | (6 bytes)   |         .word nt_postpone, xt_rightbracket, 0062b7 
4137:323 | DONE dir | na 16 16 |        |             |                 6a 6e b2 62 b7 62        --  j n . b . b
4137:324 | DONE dir | na 16 16 | 006e82 | (1 bytes)   |         .byte 5d                     
4137:324 | DONE dir | na 16 16 |        |             |                 5d                       --  ]
4137:325 | DONE wsp | na 16 16 |        |             |
4137:326 | DONE lbl | na 16 16 | 006e83 |             | nt_leftbracket                       
4137:327 | DONE dir | na 16 16 | 006e83 | (2 bytes)   |         .byte 1, { IM + CO }         
4137:327 | DONE dir | na 16 16 |        |             |                 01 06                    --  . .
4137:328 | DONE dir | na 16 16 | 006e85 | (6 bytes)   |         .word nt_rightbracket, xt_leftbracket, 0062b1 
4137:328 | DONE dir | na 16 16 |        |             |                 7a 6e af 62 b1 62        --  z n . b . b
4137:329 | DONE dir | na 16 16 | 006e8b | (1 bytes)   |         .byte 5b                     
4137:329 | DONE dir | na 16 16 |        |             |                 5b                       --  [
4137:330 | DONE wsp | na 16 16 |        |             |
4137:331 | DONE lbl | na 16 16 | 006e8c |             | nt_latestnt                          
4137:332 | DONE dir | na 16 16 | 006e8c | (2 bytes)   |         .byte 8, { NC }              
4137:332 | DONE dir | na 16 16 |        |             |                 08 01                    --  . .
4137:333 | DONE dir | na 16 16 | 006e8e | (6 bytes)   |         .word nt_leftbracket, xt_latestnt, 006757 
4137:333 | DONE dir | na 16 16 |        |             |                 83 6e 50 67 57 67        --  . n P g W g
4137:334 | DONE dir | na 16 16 | 006e94 | (8 bytes)   |         .byte 6c, 61, 74, 65, 73, 74, 6e, 74 
4137:334 | DONE dir | na 16 16 |        |             |                 6c 61 74 65 73 74 6e 74  --  l a t e s t n t
4137:334 | DONE dir | na 16 16 |        |             |                                          -- 
4137:335 | DONE wsp | na 16 16 |        |             |
4137:336 | DONE lbl | na 16 16 | 006e9c |             | nt_latestxt                          
4137:337 | DONE dir | na 16 16 | 006e9c | (2 bytes)   |         .byte 8, { NC }              
4137:337 | DONE dir | na 16 16 |        |             |                 08 01                    --  . .
4137:338 | DONE dir | na 16 16 | 006e9e | (6 bytes)   |         .word nt_latestnt, xt_latestxt, 006767 
4137:338 | DONE dir | na 16 16 |        |             |                 8c 6e 58 67 67 67        --  . n X g g g
4137:339 | DONE dir | na 16 16 | 006ea4 | (8 bytes)   |         .byte 6c, 61, 74, 65, 73, 74, 78, 74 
4137:339 | DONE dir | na 16 16 |        |             |                 6c 61 74 65 73 74 78 74  --  l a t e s t x t
4137:339 | DONE dir | na 16 16 |        |             |                                          -- 
4137:340 | DONE wsp | na 16 16 |        |             |
4137:341 | DONE lbl | na 16 16 | 006eac |             | nt_zbranch                           
4137:342 | DONE dir | na 16 16 | 006eac | (2 bytes)   |         .byte 7, { IM + CO }         
4137:342 | DONE dir | na 16 16 |        |             |                 07 06                    --  . .
4137:343 | DONE dir | na 16 16 | 006eae | (6 bytes)   |         .word nt_latestxt, xt_zbranch, 006329 
4137:343 | DONE dir | na 16 16 |        |             |                 9c 6e 23 63 29 63        --  . n # c ) c
4137:344 | DONE dir | na 16 16 | 006eb4 | (7 bytes)   |         .byte 30, 62, 72, 61, 6e, 63, 68 
4137:344 | DONE dir | na 16 16 |        |             |                 30 62 72 61 6e 63 68     --  0 b r a n c h
4137:345 | DONE wsp | na 16 16 |        |             |
4137:346 | DONE lbl | na 16 16 | 006ebb |             | nt_branch                            
4137:347 | DONE dir | na 16 16 | 006ebb | (2 bytes)   |         .byte 6, { IM + CO }         
4137:347 | DONE dir | na 16 16 |        |             |                 06 06                    --  . .
4137:348 | DONE dir | na 16 16 | 006ebd | (6 bytes)   |         .word nt_zbranch, xt_branch, 0064a6 
4137:348 | DONE dir | na 16 16 |        |             |                 ac 6e a0 64 a6 64        --  . n . d . d
4137:349 | DONE dir | na 16 16 | 006ec3 | (6 bytes)   |         .byte 62, 72, 61, 6e, 63, 68 
4137:349 | DONE dir | na 16 16 |        |             |                 62 72 61 6e 63 68        --  b r a n c h
4137:350 | DONE wsp | na 16 16 |        |             |
4137:351 | DONE lbl | na 16 16 | 006ec9 |             | nt_again                             
4137:352 | DONE dir | na 16 16 | 006ec9 | (2 bytes)   |         .byte 5, { IM + NC + CO }    
4137:352 | DONE dir | na 16 16 |        |             |                 05 07                    --  . .
4137:353 | DONE dir | na 16 16 | 006ecb | (6 bytes)   |         .word nt_branch, xt_again, 006447 
4137:353 | DONE dir | na 16 16 |        |             |                 bb 6e 32 64 47 64        --  . n 2 d G d
4137:354 | DONE dir | na 16 16 | 006ed1 | (5 bytes)   |         .byte 61, 67, 61, 69, 6e     
4137:354 | DONE dir | na 16 16 |        |             |                 61 67 61 69 6e           --  a g a i n
4137:355 | DONE wsp | na 16 16 |        |             |
4137:356 | DONE lbl | na 16 16 | 006ed6 |             | nt_begin                             
4137:357 | DONE dir | na 16 16 | 006ed6 | (2 bytes)   |         .byte 5, { IM + NC + CO }    
4137:357 | DONE dir | na 16 16 |        |             |                 05 07                    --  . .
4137:358 | DONE dir | na 16 16 | 006ed8 | (6 bytes)   |         .word nt_again, xt_begin, 00648d 
4137:358 | DONE dir | na 16 16 |        |             |                 c9 6e 87 64 8d 64        --  . n . d . d
4137:359 | DONE dir | na 16 16 | 006ede | (5 bytes)   |         .byte 62, 65, 67, 69, 6e     
4137:359 | DONE dir | na 16 16 |        |             |                 62 65 67 69 6e           --  b e g i n
4137:360 | DONE wsp | na 16 16 |        |             |
4137:361 | DONE lbl | na 16 16 | 006ee3 |             | nt_compilecomma                      
4137:362 | DONE dir | na 16 16 | 006ee3 | (2 bytes)   |         .byte 08, { CO }             
4137:362 | DONE dir | na 16 16 |        |             |                 08 04                    --  . .
4137:363 | DONE dir | na 16 16 | 006ee5 | (6 bytes)   |         .word nt_begin, xt_compilecomma, 006517 
4137:363 | DONE dir | na 16 16 |        |             |                 d6 6e 05 65 17 65        --  . n . e . e
4137:364 | DONE dir | na 16 16 | 006eeb | (8 bytes)   |         .byte 63, 6f, 6d, 70, 69, 6c, 65, 2c 
4137:364 | DONE dir | na 16 16 |        |             |                 63 6f 6d 70 69 6c 65 2c  --  c o m p i l e ,
4137:364 | DONE dir | na 16 16 |        |             |                                          -- 
4137:365 | DONE wsp | na 16 16 |        |             |
4137:366 | DONE lbl | na 16 16 | 006ef3 |             | nt_semicolon                         
4137:367 | DONE dir | na 16 16 | 006ef3 | (2 bytes)   |         .byte 1, { CO + IM }         
4137:367 | DONE dir | na 16 16 |        |             |                 01 06                    --  . .
4137:368 | DONE dir | na 16 16 | 006ef5 | (6 bytes)   |         .word nt_compilecomma, xt_semicolon, 00625d 
4137:368 | DONE dir | na 16 16 |        |             |                 e3 6e 45 62 5d 62        --  . n E b ] b
4137:369 | DONE dir | na 16 16 | 006efb | (1 bytes)   |         .byte 3b                     
4137:369 | DONE dir | na 16 16 |        |             |                 3b                       --  ;
4137:370 | DONE wsp | na 16 16 |        |             |
4137:371 | DONE lbl | na 16 16 | 006efc |             | nt_colon                             
4137:372 | DONE dir | na 16 16 | 006efc | (2 bytes)   |         .byte 1, { NC }              
4137:372 | DONE dir | na 16 16 |        |             |                 01 01                    --  . .
4137:373 | DONE dir | na 16 16 | 006efe | (6 bytes)   |         .word nt_semicolon, xt_colon, 006244 
4137:373 | DONE dir | na 16 16 |        |             |                 f3 6e 23 62 44 62        --  . n # b D b
4137:374 | DONE dir | na 16 16 | 006f04 | (1 bytes)   |         .byte 3a                     
4137:374 | DONE dir | na 16 16 |        |             |                 3a                       --  :
4137:375 | DONE wsp | na 16 16 |        |             |
4137:376 | DONE lbl | na 16 16 | 006f05 |             | nt_allot                             
4137:377 | DONE dir | na 16 16 | 006f05 | (2 bytes)   |         .byte 5, { NC }              
4137:377 | DONE dir | na 16 16 |        |             |                 05 01                    --  . .
4137:378 | DONE dir | na 16 16 | 006f07 | (6 bytes)   |         .word nt_colon, xt_allot, 006470 
4137:378 | DONE dir | na 16 16 |        |             |                 fc 6e 48 64 70 64        --  . n H d p d
4137:379 | DONE dir | na 16 16 | 006f0d | (5 bytes)   |         .byte 61, 6c, 6c, 6f, 74     
4137:379 | DONE dir | na 16 16 |        |             |                 61 6c 6c 6f 74           --  a l l o t
4137:380 | DONE wsp | na 16 16 |        |             |
4137:381 | DONE lbl | na 16 16 | 006f12 |             | nt_tobody                            
4137:382 | DONE dir | na 16 16 | 006f12 | (2 bytes)   |         .byte 5, { NC }              
4137:382 | DONE dir | na 16 16 |        |             |                 05 01                    --  . .
4137:383 | DONE dir | na 16 16 | 006f14 | (6 bytes)   |         .word nt_allot, xt_tobody, 006120 
4137:383 | DONE dir | na 16 16 |        |             |                 05 6f 1d 61 20 61        --  . o . a   a
4137:384 | DONE dir | na 16 16 | 006f1a | (5 bytes)   |         .byte 3e, 62, 6f, 64, 79     
4137:384 | DONE dir | na 16 16 |        |             |                 3e 62 6f 64 79           --  > b o d y
4137:385 | DONE wsp | na 16 16 |        |             |
4137:386 | DONE lbl | na 16 16 | 006f1f |             | nt_does                              
4137:387 | DONE dir | na 16 16 | 006f1f | (2 bytes)   |         .byte 5, { IM + CO }         
4137:387 | DONE dir | na 16 16 |        |             |                 05 06                    --  . .
4137:388 | DONE dir | na 16 16 | 006f21 | (6 bytes)   |         .word nt_tobody, xt_does, 00664a 
4137:388 | DONE dir | na 16 16 |        |             |                 12 6f 3e 66 4a 66        --  . o > f J f
4137:389 | DONE dir | na 16 16 | 006f27 | (5 bytes)   |         .byte 64, 6f, 65, 73, 3e     
4137:389 | DONE dir | na 16 16 |        |             |                 64 6f 65 73 3e           --  d o e s >
4137:390 | DONE wsp | na 16 16 |        |             |
4137:391 | DONE lbl | na 16 16 | 006f2c |             | nt_create                            
4137:392 | DONE dir | na 16 16 | 006f2c | (2 bytes)   |         .byte 6, { NC }              
4137:392 | DONE dir | na 16 16 |        |             |                 06 01                    --  . .
4137:393 | DONE dir | na 16 16 | 006f2e | (6 bytes)   |         .word nt_does, xt_create, 0065ba 
4137:393 | DONE dir | na 16 16 |        |             |                 1f 6f 48 65 ba 65        --  . o H e . e
4137:394 | DONE dir | na 16 16 | 006f34 | (6 bytes)   |         .byte 63, 72, 65, 61, 74, 65 
4137:394 | DONE dir | na 16 16 |        |             |                 63 72 65 61 74 65        --  c r e a t e
4137:395 | DONE wsp | na 16 16 |        |             |
4137:396 | DONE lbl | na 16 16 | 006f3a |             | nt_name-string                       
4137:397 | DONE dir | na 16 16 | 006f3a | (2 bytes)   |         .byte 0b, { NC }             
4137:397 | DONE dir | na 16 16 |        |             |                 0b 01                    --   .
4137:398 | DONE dir | na 16 16 | 006f3c | (6 bytes)   |         .word nt_create, xt_name-string, 0067e6 
4137:398 | DONE dir | na 16 16 |        |             |                 2c 6f d6 67 e6 67        --  , o . g . g
4137:399 | DONE dir | na 16 16 | 006f42 | (11 bytes)  |         .byte 6e, 61, 6d, 65, 3e, 73, 74, 72, 69, 6e, 67 
4137:399 | DONE dir | na 16 16 |        |             |                 6e 61 6d 65 3e 73 74 72  --  n a m e > s t r
4137:399 | DONE dir | na 16 16 |        |             |                 69 6e 67                 --  i n g
4137:400 | DONE wsp | na 16 16 |        |             |
4137:401 | DONE lbl | na 16 16 | 006f4d |             | nt_2dup                              
4137:402 | DONE dir | na 16 16 | 006f4d | (2 bytes)   |         .byte 4, { NC }              
4137:402 | DONE dir | na 16 16 |        |             |                 04 01                    --  . .
4137:403 | DONE dir | na 16 16 | 006f4f | (6 bytes)   |         .word nt_name-string, xt_2dup, 00636b 
4137:403 | DONE dir | na 16 16 |        |             |                 3a 6f 61 63 6b 63        --  : o a c k c
4137:404 | DONE dir | na 16 16 | 006f55 | (4 bytes)   |         .byte 32, 64, 75, 70         
4137:404 | DONE dir | na 16 16 |        |             |                 32 64 75 70              --  2 d u p
4137:405 | DONE wsp | na 16 16 |        |             |
4137:406 | DONE lbl | na 16 16 | 006f59 |             | nt_abs                               
4137:407 | DONE dir | na 16 16 | 006f59 | (2 bytes)   |         .byte 3, { NC }              
4137:407 | DONE dir | na 16 16 |        |             |                 03 01                    --  . .
4137:408 | DONE dir | na 16 16 | 006f5b | (6 bytes)   |         .word nt_2dup, xt_abs, 0063ad 
4137:408 | DONE dir | na 16 16 |        |             |                 4d 6f a5 63 ad 63        --  M o . c . c
4137:409 | DONE dir | na 16 16 | 006f61 | (3 bytes)   |         .byte 61, 62, 73             
4137:409 | DONE dir | na 16 16 |        |             |                 61 62 73                 --  a b s
4137:410 | DONE wsp | na 16 16 |        |             |
4137:411 | DONE lbl | na 16 16 | 006f64 |             | nt_state                             
4137:412 | DONE dir | na 16 16 | 006f64 | (2 bytes)   |         .byte 5, { NC }              
4137:412 | DONE dir | na 16 16 |        |             |                 05 01                    --  . .
4137:413 | DONE dir | na 16 16 | 006f66 | (6 bytes)   |         .word nt_abs, xt_state, 006a5b 
4137:413 | DONE dir | na 16 16 |        |             |                 59 6f 54 6a 5b 6a        --  Y o T j [ j
4137:414 | DONE dir | na 16 16 | 006f6c | (5 bytes)   |         .byte 73, 74, 61, 74, 65     
4137:414 | DONE dir | na 16 16 |        |             |                 73 74 61 74 65           --  s t a t e
4137:415 | DONE wsp | na 16 16 |        |             |
4137:416 | DONE lbl | na 16 16 | 006f71 |             | nt_to-in                             
4137:417 | DONE dir | na 16 16 | 006f71 | (2 bytes)   |         .byte 3, { NC }              
4137:417 | DONE dir | na 16 16 |        |             |                 03 01                    --  . .
4137:418 | DONE dir | na 16 16 | 006f73 | (6 bytes)   |         .word nt_state, xt_to-in, 006128 
4137:418 | DONE dir | na 16 16 |        |             |                 64 6f 21 61 28 61        --  d o ! a ( a
4137:419 | DONE dir | na 16 16 | 006f79 | (3 bytes)   |         .byte 3e, 69, 6e             
4137:419 | DONE dir | na 16 16 |        |             |                 3e 69 6e                 --  > i n
4137:420 | DONE wsp | na 16 16 |        |             |
4137:421 | DONE lbl | na 16 16 | 006f7c |             | nt_source                            
4137:422 | DONE dir | na 16 16 | 006f7c | (2 bytes)   |         .byte 6, { NC }              
4137:422 | DONE dir | na 16 16 |        |             |                 06 01                    --  . .
4137:423 | DONE dir | na 16 16 | 006f7e | (6 bytes)   |         .word nt_to-in, xt_source, 006a30 
4137:423 | DONE dir | na 16 16 |        |             |                 71 6f 24 6a 30 6a        --  q o $ j 0 j
4137:424 | DONE dir | na 16 16 | 006f84 | (6 bytes)   |         .byte 73, 6f, 75, 72, 63, 65 
4137:424 | DONE dir | na 16 16 |        |             |                 73 6f 75 72 63 65        --  s o u r c e
4137:425 | DONE wsp | na 16 16 |        |             |
4137:426 | DONE lbl | na 16 16 | 006f8a |             | nt_depth                             
4137:427 | DONE dir | na 16 16 | 006f8a | (2 bytes)   |         .byte 5, { NC }              
4137:427 | DONE dir | na 16 16 |        |             |                 05 01                    --  . .
4137:428 | DONE dir | na 16 16 | 006f8c | (6 bytes)   |         .word nt_source, xt_depth, 006629 
4137:428 | DONE dir | na 16 16 |        |             |                 7c 6f 1b 66 29 66        --  | o . f ) f
4137:429 | DONE dir | na 16 16 | 006f92 | (5 bytes)   |         .byte 64, 65, 70, 74, 68     
4137:429 | DONE dir | na 16 16 |        |             |                 64 65 70 74 68           --  d e p t h
4137:430 | DONE wsp | na 16 16 |        |             |
4137:431 | DONE lbl | na 16 16 | 006f97 |             | nt_constant                          
4137:432 | DONE dir | na 16 16 | 006f97 | (2 bytes)   |         .byte 8, { NC }              
4137:432 | DONE dir | na 16 16 |        |             |                 08 01                    --  . .
4137:433 | DONE dir | na 16 16 | 006f99 | (6 bytes)   |         .word nt_depth, xt_constant, 006531 
4137:433 | DONE dir | na 16 16 |        |             |                 8a 6f 18 65 31 65        --  . o . e 1 e
4137:434 | DONE dir | na 16 16 | 006f9f | (8 bytes)   |         .byte 63, 6f, 6e, 73, 74, 61, 6e, 74 
4137:434 | DONE dir | na 16 16 |        |             |                 63 6f 6e 73 74 61 6e 74  --  c o n s t a n t
4137:434 | DONE dir | na 16 16 |        |             |                                          -- 
4137:435 | DONE wsp | na 16 16 |        |             |
4137:436 | DONE lbl | na 16 16 | 006fa7 |             | nt_variable                          
4137:437 | DONE dir | na 16 16 | 006fa7 | (2 bytes)   |         .byte 8, { NC }              
4137:437 | DONE dir | na 16 16 |        |             |                 08 01                    --  . .
4137:438 | DONE dir | na 16 16 | 006fa9 | (6 bytes)   |         .word nt_constant, xt_variable, 006b77 
4137:438 | DONE dir | na 16 16 |        |             |                 97 6f 6b 6b 77 6b        --  . o k k w k
4137:439 | DONE dir | na 16 16 | 006faf | (8 bytes)   |         .byte 76, 61, 72, 69, 61, 62, 6c, 65 
4137:439 | DONE dir | na 16 16 |        |             |                 76 61 72 69 61 62 6c 65  --  v a r i a b l e
4137:439 | DONE dir | na 16 16 |        |             |                                          -- 
4137:440 | DONE wsp | na 16 16 |        |             |
4137:441 | DONE lbl | na 16 16 | 006fb7 |             | nt_tick                              
4137:442 | DONE dir | na 16 16 | 006fb7 | (2 bytes)   |         .byte 1, { NC }              
4137:442 | DONE dir | na 16 16 |        |             |                 01 01                    --  . .
4137:443 | DONE dir | na 16 16 | 006fb9 | (6 bytes)   |         .word nt_variable, xt_tick, 006387 
4137:443 | DONE dir | na 16 16 |        |             |                 a7 6f 6c 63 87 63        --  . o l c . c
4137:444 | DONE dir | na 16 16 | 006fbf | (1 bytes)   |         .byte 27                     hex for "'"
4137:444 | DONE dir | na 16 16 |        |             |                 27                       --  '
4137:445 | DONE wsp | na 16 16 |        |             |
4137:446 | DONE lbl | na 16 16 | 006fc0 |             | nt_min                               
4137:447 | DONE dir | na 16 16 | 006fc0 | (2 bytes)   |         .byte 3, { NC }              
4137:447 | DONE dir | na 16 16 |        |             |                 03 01                    --  . .
4137:448 | DONE dir | na 16 16 | 006fc2 | (6 bytes)   |         .word nt_tick, xt_min, 0067cc 
4137:448 | DONE dir | na 16 16 |        |             |                 b7 6f ba 67 cc 67        --  . o . g . g
4137:449 | DONE dir | na 16 16 | 006fc8 | (3 bytes)   |         .byte 6d, 69, 6e             
4137:449 | DONE dir | na 16 16 |        |             |                 6d 69 6e                 --  m i n
4137:450 | DONE wsp | na 16 16 |        |             |
4137:451 | DONE lbl | na 16 16 | 006fcb |             | nt_max                               
4137:452 | DONE dir | na 16 16 | 006fcb | (2 bytes)   |         .byte 3, { NC }              
4137:452 | DONE dir | na 16 16 |        |             |                 03 01                    --  . .
4137:453 | DONE dir | na 16 16 | 006fcd | (6 bytes)   |         .word nt_min, xt_max, 0067b9 
4137:453 | DONE dir | na 16 16 |        |             |                 c0 6f a7 67 b9 67        --  . o . g . g
4137:454 | DONE dir | na 16 16 | 006fd3 | (3 bytes)   |         .byte 6d, 61, 78             
4137:454 | DONE dir | na 16 16 |        |             |                 6d 61 78                 --  m a x
4137:455 | DONE wsp | na 16 16 |        |             |
4137:456 | DONE lbl | na 16 16 | 006fd6 |             | nt_negate                            
4137:457 | DONE dir | na 16 16 | 006fd6 | (2 bytes)   |         .byte 6, { NC }              
4137:457 | DONE dir | na 16 16 |        |             |                 06 01                    --  . .
4137:458 | DONE dir | na 16 16 | 006fd8 | (6 bytes)   |         .word nt_max, xt_negate, 0067ed 
4137:458 | DONE dir | na 16 16 |        |             |                 cb 6f e7 67 ed 67        --  . o . g . g
4137:459 | DONE dir | na 16 16 | 006fde | (6 bytes)   |         .byte 6e, 65, 67, 61, 74, 65 
4137:459 | DONE dir | na 16 16 |        |             |                 6e 65 67 61 74 65        --  n e g a t e
4137:460 | DONE wsp | na 16 16 |        |             |
4137:461 | DONE lbl | na 16 16 | 006fe4 |             | nt_invert                            
4137:462 | DONE dir | na 16 16 | 006fe4 | (2 bytes)   |         .byte 6, { NC }              
4137:462 | DONE dir | na 16 16 |        |             |                 06 01                    --  . .
4137:463 | DONE dir | na 16 16 | 006fe6 | (6 bytes)   |         .word nt_negate, xt_invert, 006734 
4137:463 | DONE dir | na 16 16 |        |             |                 d6 6f 2f 67 34 67        --  . o / g 4 g
4137:464 | DONE dir | na 16 16 | 006fec | (6 bytes)   |         .byte 69, 6e, 76, 65, 72, 74 
4137:464 | DONE dir | na 16 16 |        |             |                 69 6e 76 65 72 74        --  i n v e r t
4137:465 | DONE wsp | na 16 16 |        |             |
4137:466 | DONE lbl | na 16 16 | 006ff2 |             | nt_char                              
4137:467 | DONE dir | na 16 16 | 006ff2 | (2 bytes)   |         .byte 4, { NC }              
4137:467 | DONE dir | na 16 16 |        |             |                 04 01                    --  . .
4137:468 | DONE dir | na 16 16 | 006ff4 | (6 bytes)   |         .word nt_invert, xt_char, 0064fb 
4137:468 | DONE dir | na 16 16 |        |             |                 e4 6f e4 64 fb 64        --  . o . d . d
4137:469 | DONE dir | na 16 16 | 006ffa | (4 bytes)   |         .byte 63, 68, 61, 72         
4137:469 | DONE dir | na 16 16 |        |             |                 63 68 61 72              --  c h a r
4137:470 | DONE wsp | na 16 16 |        |             |
4137:471 | DONE lbl | na 16 16 | 006ffe |             | nt_xor                               
4137:472 | DONE dir | na 16 16 | 006ffe | (2 bytes)   |         .byte 3, { NC }              
4137:472 | DONE dir | na 16 16 |        |             |                 03 01                    --  . .
4137:473 | DONE dir | na 16 16 | 007000 | (6 bytes)   |         .word nt_char, xt_xor, 006bd5 
4137:473 | DONE dir | na 16 16 |        |             |                 f2 6f cf 6b d5 6b        --  . o . k . k
4137:474 | DONE dir | na 16 16 | 007006 | (3 bytes)   |         .byte 78, 6f, 72             
4137:474 | DONE dir | na 16 16 |        |             |                 78 6f 72                 --  x o r
4137:475 | DONE wsp | na 16 16 |        |             |
4137:476 | DONE lbl | na 16 16 | 007009 |             | nt_or                                
4137:477 | DONE dir | na 16 16 | 007009 | (2 bytes)   |         .byte 2, { NC }              
4137:477 | DONE dir | na 16 16 |        |             |                 02 01                    --  . .
4137:478 | DONE dir | na 16 16 | 00700b | (6 bytes)   |         .word nt_xor, xt_or, 00687b  
4137:478 | DONE dir | na 16 16 |        |             |                 fe 6f 75 68 7b 68        --  . o u h { h
4137:479 | DONE dir | na 16 16 | 007011 | (2 bytes)   |         .byte 6f, 72                 
4137:479 | DONE dir | na 16 16 |        |             |                 6f 72                    --  o r
4137:480 | DONE wsp | na 16 16 |        |             |
4137:481 | DONE lbl | na 16 16 | 007013 |             | nt_and                               
4137:482 | DONE dir | na 16 16 | 007013 | (2 bytes)   |         .byte 3, { NC }              
4137:482 | DONE dir | na 16 16 |        |             |                 03 01                    --  . .
4137:483 | DONE dir | na 16 16 | 007015 | (6 bytes)   |         .word nt_or, xt_and, 006477  
4137:483 | DONE dir | na 16 16 |        |             |                 09 70 71 64 77 64        --  	 p q d w d
4137:484 | DONE dir | na 16 16 | 00701b | (3 bytes)   |         .byte 61, 6e, 64             
4137:484 | DONE dir | na 16 16 |        |             |                 61 6e 64                 --  a n d
4137:485 | DONE wsp | na 16 16 |        |             |
4137:486 | DONE lbl | na 16 16 | 00701e |             | nt_plusstore                         
4137:487 | DONE dir | na 16 16 | 00701e | (2 bytes)   |         .byte 2, { NC }              
4137:487 | DONE dir | na 16 16 |        |             |                 02 01                    --  . .
4137:488 | DONE dir | na 16 16 | 007020 | (6 bytes)   |         .word nt_and, xt_plusstore, 006910 
4137:488 | DONE dir | na 16 16 |        |             |                 13 70 01 69 10 69        --  . p . i . i
4137:489 | DONE dir | na 16 16 | 007026 | (2 bytes)   |         .byte 2b, 21                 
4137:489 | DONE dir | na 16 16 |        |             |                 2b 21                    --  + !
4137:490 | DONE wsp | na 16 16 |        |             |
4137:491 | DONE lbl | na 16 16 | 007028 |             | nt_c-comma                           
4137:492 | DONE dir | na 16 16 | 007028 | (2 bytes)   |         .byte 2, { NC }              
4137:492 | DONE dir | na 16 16 |        |             |                 02 01                    --  . .
4137:493 | DONE dir | na 16 16 | 00702a | (6 bytes)   |         .word nt_plusstore, xt_c-comma, 0064c7 
4137:493 | DONE dir | na 16 16 |        |             |                 1e 70 ba 64 c7 64        --  . p . d . d
4137:494 | DONE dir | na 16 16 | 007030 | (2 bytes)   |         .byte 63, 2c                 
4137:494 | DONE dir | na 16 16 |        |             |                 63 2c                    --  c ,
4137:495 | DONE wsp | na 16 16 |        |             |
4137:496 | DONE lbl | na 16 16 | 007032 |             | nt_c-fetch                           
4137:497 | DONE dir | na 16 16 | 007032 | (2 bytes)   |         .byte 2, { NC }              
4137:497 | DONE dir | na 16 16 |        |             |                 02 01                    --  . .
4137:498 | DONE dir | na 16 16 | 007034 | (6 bytes)   |         .word nt_c-comma, xt_c-fetch, 0064d3 
4137:498 | DONE dir | na 16 16 |        |             |                 28 70 c8 64 d3 64        --  ( p . d . d
4137:499 | DONE dir | na 16 16 | 00703a | (2 bytes)   |         .byte 63, 40                 
4137:499 | DONE dir | na 16 16 |        |             |                 63 40                    --  c @
4137:500 | DONE wsp | na 16 16 |        |             |
4137:501 | DONE lbl | na 16 16 | 00703c |             | nt_c-store                           
4137:502 | DONE dir | na 16 16 | 00703c | (2 bytes)   |         .byte 2, { NC }              
4137:502 | DONE dir | na 16 16 |        |             |                 02 01                    --  . .
4137:503 | DONE dir | na 16 16 | 00703e | (6 bytes)   |         .word nt_c-fetch, xt_c-store, 0064e3 
4137:503 | DONE dir | na 16 16 |        |             |                 32 70 d4 64 e3 64        --  2 p . d . d
4137:504 | DONE dir | na 16 16 | 007044 | (2 bytes)   |         .byte 63, 21                 
4137:504 | DONE dir | na 16 16 |        |             |                 63 21                    --  c !
4137:505 | DONE wsp | na 16 16 |        |             |
4137:506 | DONE lbl | na 16 16 | 007046 |             | nt_two-star                          
4137:507 | DONE dir | na 16 16 | 007046 | (2 bytes)   |         .byte 2, { NC }              
4137:507 | DONE dir | na 16 16 |        |             |                 02 01                    --  . .
4137:508 | DONE dir | na 16 16 | 007048 | (6 bytes)   |         .word nt_c-store, xt_two-star, 006359 
4137:508 | DONE dir | na 16 16 |        |             |                 3c 70 56 63 59 63        --  < p V c Y c
4137:509 | DONE dir | na 16 16 | 00704e | (2 bytes)   |         .byte 32, 2a                 
4137:509 | DONE dir | na 16 16 |        |             |                 32 2a                    --  2 *
4137:510 | DONE wsp | na 16 16 |        |             |
4137:511 | DONE lbl | na 16 16 | 007050 |             | nt_minus                             
4137:512 | DONE dir | na 16 16 | 007050 | (2 bytes)   |         .byte 1, { NC }              
4137:512 | DONE dir | na 16 16 |        |             |                 01 01                    --  . .
4137:513 | DONE dir | na 16 16 | 007052 | (6 bytes)   |         .word nt_two-star, xt_minus, 0062d6 
4137:513 | DONE dir | na 16 16 |        |             |                 46 70 cc 62 d6 62        --  F p . b . b
4137:514 | DONE dir | na 16 16 | 007058 | (1 bytes)   |         .byte 2d                     
4137:514 | DONE dir | na 16 16 |        |             |                 2d                       --  -
4137:515 | DONE wsp | na 16 16 |        |             |
4137:516 | DONE lbl | na 16 16 | 007059 |             | nt_plus                              
4137:517 | DONE dir | na 16 16 | 007059 | (2 bytes)   |         .byte 1, { NC }              
4137:517 | DONE dir | na 16 16 |        |             |                 01 01                    --  . .
4137:518 | DONE dir | na 16 16 | 00705b | (6 bytes)   |         .word nt_minus, xt_plus, 0062cb 
4137:518 | DONE dir | na 16 16 |        |             |                 50 70 c4 62 cb 62        --  P p . b . b
4137:519 | DONE dir | na 16 16 | 007061 | (1 bytes)   |         .byte 2b                     
4137:519 | DONE dir | na 16 16 |        |             |                 2b                       --  +
4137:520 | DONE wsp | na 16 16 |        |             |
4137:521 | DONE lbl | na 16 16 | 007062 |             | nt_one-minus                         
4137:522 | DONE dir | na 16 16 | 007062 | (2 bytes)   |         .byte 2, { NC }              
4137:522 | DONE dir | na 16 16 |        |             |                 02 01                    --  . .
4137:523 | DONE dir | na 16 16 | 007064 | (6 bytes)   |         .word nt_plus, xt_one-minus, 00634b 
4137:523 | DONE dir | na 16 16 |        |             |                 59 70 4a 63 4b 63        --  Y p J c K c
4137:524 | DONE dir | na 16 16 | 00706a | (2 bytes)   |         .byte 31, 2d                 
4137:524 | DONE dir | na 16 16 |        |             |                 31 2d                    --  1 -
4137:525 | DONE wsp | na 16 16 |        |             |
4137:526 | DONE lbl | na 16 16 | 00706c |             | nt_one-plus                          
4137:527 | DONE dir | na 16 16 | 00706c | (2 bytes)   |         .byte 2, { NC }              
4137:527 | DONE dir | na 16 16 |        |             |                 02 01                    --  . .
4137:528 | DONE dir | na 16 16 | 00706e | (6 bytes)   |         .word nt_one-minus, xt_one-plus, 00634d 
4137:528 | DONE dir | na 16 16 |        |             |                 62 70 4c 63 4d 63        --  b p L c M c
4137:529 | DONE dir | na 16 16 | 007074 | (2 bytes)   |         .byte 31, 2b                 
4137:529 | DONE dir | na 16 16 |        |             |                 31 2b                    --  1 +
4137:530 | DONE wsp | na 16 16 |        |             |
4137:531 | DONE lbl | na 16 16 | 007076 |             | nt_zero-notequal                     
4137:532 | DONE dir | na 16 16 | 007076 | (2 bytes)   |         .byte 3, { NC }              
4137:532 | DONE dir | na 16 16 |        |             |                 03 01                    --  . .
4137:533 | DONE dir | na 16 16 | 007078 | (6 bytes)   |         .word nt_one-plus, xt_zero-notequal, 006317 
4137:533 | DONE dir | na 16 16 |        |             |                 6c 70 0c 63 17 63        --  l p  c . c
4137:534 | DONE dir | na 16 16 | 00707e | (3 bytes)   |         .byte 30, 3c, 3e             
4137:534 | DONE dir | na 16 16 |        |             |                 30 3c 3e                 --  0 < >
4137:535 | DONE wsp | na 16 16 |        |             |
4137:536 | DONE lbl | na 16 16 | 007081 |             | nt_zero-more                         
4137:537 | DONE dir | na 16 16 | 007081 | (2 bytes)   |         .byte 2, { NC }              
4137:537 | DONE dir | na 16 16 |        |             |                 02 01                    --  . .
4137:538 | DONE dir | na 16 16 | 007083 | (6 bytes)   |         .word nt_zero-notequal, xt_zero-more, 006322 
4137:538 | DONE dir | na 16 16 |        |             |                 76 70 18 63 22 63        --  v p . c " c
4137:539 | DONE dir | na 16 16 | 007089 | (2 bytes)   |         .byte 30, 3e                 
4137:539 | DONE dir | na 16 16 |        |             |                 30 3e                    --  0 >
4137:540 | DONE wsp | na 16 16 |        |             |
4137:541 | DONE lbl | na 16 16 | 00708b |             | nt_zero-less                         
4137:542 | DONE dir | na 16 16 | 00708b | (2 bytes)   |         .byte 2, { NC }              
4137:542 | DONE dir | na 16 16 |        |             |                 02 01                    --  . .
4137:543 | DONE dir | na 16 16 | 00708d | (6 bytes)   |         .word nt_zero-more, xt_zero-less, 00630b 
4137:543 | DONE dir | na 16 16 |        |             |                 81 70 00 63 0b 63        --  . p . c  c
4137:544 | DONE dir | na 16 16 | 007093 | (2 bytes)   |         .byte 30, 3c                 
4137:544 | DONE dir | na 16 16 |        |             |                 30 3c                    --  0 <
4137:545 | DONE wsp | na 16 16 |        |             |
4137:546 | DONE lbl | na 16 16 | 007095 |             | nt_greater                           
4137:547 | DONE dir | na 16 16 | 007095 | (2 bytes)   |         .byte 1, { NC }              
4137:547 | DONE dir | na 16 16 |        |             |                 01 01                    --  . .
4137:548 | DONE dir | na 16 16 | 007097 | (6 bytes)   |         .word nt_zero-less, xt_greater, 00611c 
4137:548 | DONE dir | na 16 16 |        |             |                 8b 70 09 61 1c 61        --  . p 	 a . a
4137:549 | DONE dir | na 16 16 | 00709d | (1 bytes)   |         .byte 3e                     
4137:549 | DONE dir | na 16 16 |        |             |                 3e                       --  >
4137:550 | DONE wsp | na 16 16 |        |             |
4137:551 | DONE lbl | na 16 16 | 00709e |             | nt_less                              
4137:552 | DONE dir | na 16 16 | 00709e | (2 bytes)   |         .byte 1, { NC }              
4137:552 | DONE dir | na 16 16 |        |             |                 01 01                    --  . .
4137:553 | DONE dir | na 16 16 | 0070a0 | (6 bytes)   |         .word nt_greater, xt_less, 0060f2 
4137:553 | DONE dir | na 16 16 |        |             |                 95 70 df 60 f2 60        --  . p . ` . `
4137:554 | DONE dir | na 16 16 | 0070a6 | (1 bytes)   |         .byte 3c                     
4137:554 | DONE dir | na 16 16 |        |             |                 3c                       --  <
4137:555 | DONE wsp | na 16 16 |        |             |
4137:556 | DONE lbl | na 16 16 | 0070a7 |             | nt_zero-equal                        
4137:557 | DONE dir | na 16 16 | 0070a7 | (2 bytes)   |         .byte 2, { NC }              
4137:557 | DONE dir | na 16 16 |        |             |                 02 01                    --  . .
4137:558 | DONE dir | na 16 16 | 0070a9 | (6 bytes)   |         .word nt_less, xt_zero-equal, 0062ff 
4137:558 | DONE dir | na 16 16 |        |             |                 9e 70 f4 62 ff 62        --  . p . b . b
4137:559 | DONE dir | na 16 16 | 0070af | (2 bytes)   |         .byte 30, 3d                 
4137:559 | DONE dir | na 16 16 |        |             |                 30 3d                    --  0 =
4137:560 | DONE wsp | na 16 16 |        |             |
4137:561 | DONE lbl | na 16 16 | 0070b1 |             | nt_not-equal                         
4137:562 | DONE dir | na 16 16 | 0070b1 | (2 bytes)   |         .byte 2, { NC }              
4137:562 | DONE dir | na 16 16 |        |             |                 02 01                    --  . .
4137:563 | DONE dir | na 16 16 | 0070b3 | (6 bytes)   |         .word nt_zero-equal, xt_not-equal, 0060fe 
4137:563 | DONE dir | na 16 16 |        |             |                 a7 70 f3 60 fe 60        --  . p . ` . `
4137:564 | DONE dir | na 16 16 | 0070b9 | (2 bytes)   |         .byte 3c, 3e                 
4137:564 | DONE dir | na 16 16 |        |             |                 3c 3e                    --  < >
4137:565 | DONE wsp | na 16 16 |        |             |
4137:566 | DONE lbl | na 16 16 | 0070bb |             | nt_equal                             
4137:567 | DONE dir | na 16 16 | 0070bb | (2 bytes)   |         .byte 1, { NC }              
4137:567 | DONE dir | na 16 16 |        |             |                 01 01                    --  . .
4137:568 | DONE dir | na 16 16 | 0070bd | (6 bytes)   |         .word nt_not-equal, xt_equal, 0062eb 
4137:568 | DONE dir | na 16 16 |        |             |                 b1 70 e0 62 eb 62        --  . p . b . b
4137:569 | DONE dir | na 16 16 | 0070c3 | (1 bytes)   |         .byte 3d                     
4137:569 | DONE dir | na 16 16 |        |             |                 3d                       --  =
4137:570 | DONE wsp | na 16 16 |        |             |
4137:571 | DONE lbl | na 16 16 | 0070c4 |             | nt_false                             
4137:572 | DONE dir | na 16 16 | 0070c4 | (2 bytes)   |         .byte 5, { NC }              
4137:572 | DONE dir | na 16 16 |        |             |                 05 01                    --  . .
4137:573 | DONE dir | na 16 16 | 0070c6 | (6 bytes)   |         .word nt_equal, xt_zero, 0062f3 
4137:573 | DONE dir | na 16 16 |        |             |                 bb 70 ec 62 f3 62        --  . p . b . b
4137:574 | DONE dir | na 16 16 | 0070cc | (5 bytes)   |         .byte 66, 61, 6c, 73, 65     
4137:574 | DONE dir | na 16 16 |        |             |                 66 61 6c 73 65           --  f a l s e
4137:575 | DONE wsp | na 16 16 |        |             |
4137:576 | DONE lbl | na 16 16 | 0070d1 |             | nt_true                              
4137:577 | DONE dir | na 16 16 | 0070d1 | (2 bytes)   |         .byte 4, { NC }              
4137:577 | DONE dir | na 16 16 |        |             |                 04 01                    --  . .
4137:578 | DONE dir | na 16 16 | 0070d3 | (6 bytes)   |         .word nt_false, xt_true, 006a69 
4137:578 | DONE dir | na 16 16 |        |             |                 c4 70 62 6a 69 6a        --  . p b j i j
4137:579 | DONE dir | na 16 16 | 0070d9 | (4 bytes)   |         .byte 74, 72, 75, 65         
4137:579 | DONE dir | na 16 16 |        |             |                 74 72 75 65              --  t r u e
4137:580 | DONE wsp | na 16 16 |        |             |
4137:581 | DONE lbl | na 16 16 | 0070dd |             | nt_tonumber                          
4137:582 | DONE dir | na 16 16 | 0070dd | (2 bytes)   |         .byte 7, { NC }              see if actually NC
4137:582 | DONE dir | na 16 16 |        |             |                 07 01                    --  . .
4137:583 | DONE dir | na 16 16 | 0070df | (6 bytes)   |         .word nt_true, xt_tonumber, 006185 
4137:583 | DONE dir | na 16 16 |        |             |                 d1 70 29 61 85 61        --  . p ) a . a
4137:584 | DONE dir | na 16 16 | 0070e5 | (7 bytes)   |         .byte 3e, 6e, 75, 6d, 62, 65, 72 
4137:584 | DONE dir | na 16 16 |        |             |                 3e 6e 75 6d 62 65 72     --  > n u m b e r
4137:585 | DONE wsp | na 16 16 |        |             |
4137:586 | DONE lbl | na 16 16 | 0070ec |             | nt_number                            
4137:587 | DONE dir | na 16 16 | 0070ec | (2 bytes)   |         .byte 6, { NC }              see if actually NC
4137:587 | DONE dir | na 16 16 |        |             |                 06 01                    --  . .
4137:588 | DONE dir | na 16 16 | 0070ee | (6 bytes)   |         .word nt_tonumber, xt_number, 006874 
4137:588 | DONE dir | na 16 16 |        |             |                 dd 70 f1 67 74 68        --  . p . g t h
4137:589 | DONE dir | na 16 16 | 0070f4 | (6 bytes)   |         .byte 6e, 75, 6d, 62, 65, 72 
4137:589 | DONE dir | na 16 16 |        |             |                 6e 75 6d 62 65 72        --  n u m b e r
4137:590 | DONE wsp | na 16 16 |        |             |
4137:591 | DONE lbl | na 16 16 | 0070fa |             | nt_two                               
4137:592 | DONE dir | na 16 16 | 0070fa | (2 bytes)   |         .byte 1, { NC }              
4137:592 | DONE dir | na 16 16 |        |             |                 01 01                    --  . .
4137:593 | DONE dir | na 16 16 | 0070fc | (6 bytes)   |         .word nt_number, xt_two, 006355 
4137:593 | DONE dir | na 16 16 |        |             |                 ec 70 4e 63 55 63        --  . p N c U c
4137:594 | DONE dir | na 16 16 | 007102 | (1 bytes)   |         .byte 32                     
4137:594 | DONE dir | na 16 16 |        |             |                 32                       --  2
4137:595 | DONE wsp | na 16 16 |        |             |
4137:596 | DONE lbl | na 16 16 | 007103 |             | nt_one                               
4137:597 | DONE dir | na 16 16 | 007103 | (2 bytes)   |         .byte 1, { NC }              
4137:597 | DONE dir | na 16 16 |        |             |                 01 01                    --  . .
4137:598 | DONE dir | na 16 16 | 007105 | (6 bytes)   |         .word nt_two, xt_one, 006349 
4137:598 | DONE dir | na 16 16 |        |             |                 fa 70 42 63 49 63        --  . p B c I c
4137:599 | DONE dir | na 16 16 | 00710b | (1 bytes)   |         .byte 31                     
4137:599 | DONE dir | na 16 16 |        |             |                 31                       --  1
4137:600 | DONE wsp | na 16 16 |        |             |
4137:601 | DONE lbl | na 16 16 | 00710c |             | nt_zero                              
4137:602 | DONE dir | na 16 16 | 00710c | (2 bytes)   |         .byte 1, { NC }              
4137:602 | DONE dir | na 16 16 |        |             |                 01 01                    --  . .
4137:603 | DONE dir | na 16 16 | 00710e | (6 bytes)   |         .word nt_one, xt_zero, 0062f3 
4137:603 | DONE dir | na 16 16 |        |             |                 03 71 ec 62 f3 62        --  . q . b . b
4137:604 | DONE dir | na 16 16 | 007114 | (1 bytes)   |         .byte 30                     
4137:604 | DONE dir | na 16 16 |        |             |                 30                       --  0
4137:605 | DONE wsp | na 16 16 |        |             |
4137:606 | DONE lbl | na 16 16 | 007115 |             | nt_find-name                         
4137:607 | DONE dir | na 16 16 | 007115 | (2 bytes)   |         .byte 9, 0                   
4137:607 | DONE dir | na 16 16 |        |             |                 09 00                    --  	 .
4137:608 | DONE dir | na 16 16 | 007117 | (6 bytes)   |         .word nt_zero, xt_find-name, 006725 
4137:608 | DONE dir | na 16 16 |        |             |                 0c 71 cf 66 25 67        --   q . f % g
4137:609 | DONE dir | na 16 16 | 00711d | (9 bytes)   |         .byte 66, 69, 6e, 64, 2d, 6e, 61, 6d, 65 
4137:609 | DONE dir | na 16 16 |        |             |                 66 69 6e 64 2d 6e 61 6d  --  f i n d - n a m
4137:609 | DONE dir | na 16 16 |        |             |                 65                       --  e
4137:610 | DONE wsp | na 16 16 |        |             |
4137:611 | DONE lbl | na 16 16 | 007126 |             | nt_refill                            
4137:612 | DONE dir | na 16 16 | 007126 | (2 bytes)   |         .byte 6, 0                   TODO check flags
4137:612 | DONE dir | na 16 16 |        |             |                 06 00                    --  . .
4137:613 | DONE dir | na 16 16 | 007128 | (6 bytes)   |         .word nt_find-name, xt_refill, 006989 
4137:613 | DONE dir | na 16 16 |        |             |                 15 71 57 69 89 69        --  . q W i . i
4137:614 | DONE dir | na 16 16 | 00712e | (6 bytes)   |         .byte 72, 65, 66, 69, 6c, 6c 
4137:614 | DONE dir | na 16 16 |        |             |                 72 65 66 69 6c 6c        --  r e f i l l
4137:615 | DONE wsp | na 16 16 |        |             |
4137:616 | DONE lbl | na 16 16 | 007134 |             | nt_parse-name                        
4137:617 | DONE dir | na 16 16 | 007134 | (2 bytes)   |         .byte &10, 0                 
4137:617 | DONE dir | na 16 16 |        |             |                 0a 00                    --  
 .
4137:618 | DONE dir | na 16 16 | 007136 | (6 bytes)   |         .word nt_refill, xt_parse-name, 006900 
4137:618 | DONE dir | na 16 16 |        |             |                 26 71 9c 68 00 69        --  & q . h . i
4137:619 | DONE dir | na 16 16 | 00713c | (10 bytes)  |         .byte 70, 61, 72, 73, 65, 2d, 6e, 61, 6d, 65 
4137:619 | DONE dir | na 16 16 |        |             |                 70 61 72 73 65 2d 6e 61  --  p a r s e - n a
4137:619 | DONE dir | na 16 16 |        |             |                 6d 65                    --  m e
4137:620 | DONE wsp | na 16 16 |        |             |
4137:621 | DONE lbl | na 16 16 | 007146 |             | nt_source-id                         
4137:622 | DONE dir | na 16 16 | 007146 | (2 bytes)   |         .byte 9, { NC }              
4137:622 | DONE dir | na 16 16 |        |             |                 09 01                    --  	 .
4137:623 | DONE dir | na 16 16 | 007148 | (6 bytes)   |         .word nt_parse-name, xt_source-id, 006a37 
4137:623 | DONE dir | na 16 16 |        |             |                 34 71 31 6a 37 6a        --  4 q 1 j 7 j
4137:624 | DONE dir | na 16 16 | 00714e | (9 bytes)   |         .byte 73, 6f, 75, 72, 63, 65, 2d, 69, 64 
4137:624 | DONE dir | na 16 16 |        |             |                 73 6f 75 72 63 65 2d 69  --  s o u r c e - i
4137:624 | DONE dir | na 16 16 |        |             |                 64                       --  d
4137:625 | DONE wsp | na 16 16 |        |             |
4137:626 | DONE lbl | na 16 16 | 007157 |             | nt_comma                             
4137:627 | DONE dir | na 16 16 | 007157 | (2 bytes)   |         .byte 1, { NC }              
4137:627 | DONE dir | na 16 16 |        |             |                 01 01                    --  . .
4137:628 | DONE dir | na 16 16 | 007159 | (6 bytes)   |         .word nt_source-id, xt_comma, 006222 
4137:628 | DONE dir | na 16 16 |        |             |                 46 71 17 62 22 62        --  F q . b " b
4137:629 | DONE dir | na 16 16 | 00715f | (1 bytes)   |         .byte 2c                     
4137:629 | DONE dir | na 16 16 |        |             |                 2c                       --  ,
4137:630 | DONE wsp | na 16 16 |        |             |
4137:631 | DONE lbl | na 16 16 | 007160 |             | nt_accept                            
4137:632 | DONE dir | na 16 16 | 007160 | (2 bytes)   |         .byte 6, 00                  TODO check flags
4137:632 | DONE dir | na 16 16 |        |             |                 06 00                    --  . .
4137:633 | DONE dir | na 16 16 | 007162 | (6 bytes)   |         .word nt_comma, xt_accept, 006431 
4137:633 | DONE dir | na 16 16 |        |             |                 57 71 ae 63 31 64        --  W q . c 1 d
4137:634 | DONE dir | na 16 16 | 007168 | (6 bytes)   |         .byte 61, 63, 63, 65, 70, 74 
4137:634 | DONE dir | na 16 16 |        |             |                 61 63 63 65 70 74        --  a c c e p t
4137:635 | DONE wsp | na 16 16 |        |             |
4137:636 | DONE lbl | na 16 16 | 00716e |             | nt_backslash                         
4137:637 | DONE dir | na 16 16 | 00716e | (2 bytes)   |         .byte 1, { NC }              
4137:637 | DONE dir | na 16 16 |        |             |                 01 01                    --  . .
4137:638 | DONE dir | na 16 16 | 007170 | (6 bytes)   |         .word nt_accept, xt_backslash, 0062c3 
4137:638 | DONE dir | na 16 16 |        |             |                 60 71 bf 62 c3 62        --  ` q . b . b
4137:639 | DONE dir | na 16 16 | 007176 | (1 bytes)   |         .byte 5c                     
4137:639 | DONE dir | na 16 16 |        |             |                 5c                       --  \
4137:640 | DONE wsp | na 16 16 |        |             |
4137:641 | DONE lbl | na 16 16 | 007177 |             | nt_tuck                              
4137:642 | DONE dir | na 16 16 | 007177 | (2 bytes)   |         .byte 4, { NC }              
4137:642 | DONE dir | na 16 16 |        |             |                 04 01                    --  . .
4137:643 | DONE dir | na 16 16 | 007179 | (6 bytes)   |         .word nt_backslash, xt_tuck, 006a72 
4137:643 | DONE dir | na 16 16 |        |             |                 6e 71 6a 6a 72 6a        --  n q j j r j
4137:644 | DONE dir | na 16 16 | 00717f | (4 bytes)   |         .byte 74, 75, 63, 6b         
4137:644 | DONE dir | na 16 16 |        |             |                 74 75 63 6b              --  t u c k
4137:645 | DONE wsp | na 16 16 |        |             |
4137:646 | DONE lbl | na 16 16 | 007183 |             | nt_nip                               
4137:647 | DONE dir | na 16 16 | 007183 | (2 bytes)   |         .byte 3, { NC }              
4137:647 | DONE dir | na 16 16 |        |             |                 03 01                    --  . .
4137:648 | DONE dir | na 16 16 | 007185 | (6 bytes)   |         .word nt_tuck, xt_nip, 0067f0 
4137:648 | DONE dir | na 16 16 |        |             |                 77 71 ee 67 f0 67        --  w q . g . g
4137:649 | DONE dir | na 16 16 | 00718b | (3 bytes)   |         .byte 6e, 69, 70             
4137:649 | DONE dir | na 16 16 |        |             |                 6e 69 70                 --  n i p
4137:650 | DONE wsp | na 16 16 |        |             |
4137:651 | DONE lbl | na 16 16 | 00718e |             | nt_mrot                              
4137:652 | DONE dir | na 16 16 | 00718e | (2 bytes)   |         .byte 4, { NC }              
4137:652 | DONE dir | na 16 16 |        |             |                 04 01                    --  . .
4137:653 | DONE dir | na 16 16 | 007190 | (6 bytes)   |         .word nt_nip, xt_mrot, 0062df 
4137:653 | DONE dir | na 16 16 |        |             |                 83 71 d7 62 df 62        --  . q . b . b
4137:654 | DONE dir | na 16 16 | 007196 | (4 bytes)   |         .byte 2d, 72, 6f, 74         
4137:654 | DONE dir | na 16 16 |        |             |                 2d 72 6f 74              --  - r o t
4137:655 | DONE wsp | na 16 16 |        |             |
4137:656 | DONE lbl | na 16 16 | 00719a |             | nt_rot                               
4137:657 | DONE dir | na 16 16 | 00719a | (2 bytes)   |         .byte 3, { NC }              
4137:657 | DONE dir | na 16 16 |        |             |                 03 01                    --  . .
4137:658 | DONE dir | na 16 16 | 00719c | (6 bytes)   |         .word nt_mrot, xt_rot, 006992 
4137:658 | DONE dir | na 16 16 |        |             |                 8e 71 8a 69 92 69        --  . q . i . i
4137:659 | DONE dir | na 16 16 | 0071a2 | (3 bytes)   |         .byte 72, 6f, 74             
4137:659 | DONE dir | na 16 16 |        |             |                 72 6f 74                 --  r o t
4137:660 | DONE wsp | na 16 16 |        |             |
4137:661 | DONE lbl | na 16 16 | 0071a5 |             | nt_execute                           
4137:662 | DONE dir | na 16 16 | 0071a5 | (2 bytes)   |         .byte 7, { NC }              
4137:662 | DONE dir | na 16 16 |        |             |                 07 01                    --  . .
4137:663 | DONE dir | na 16 16 | 0071a7 | (6 bytes)   |         .word nt_rot, xt_execute, 0066ce 
4137:663 | DONE dir | na 16 16 |        |             |                 9a 71 c4 66 ce 66        --  . q . f . f
4137:664 | DONE dir | na 16 16 | 0071ad | (7 bytes)   |         .byte 65, 78, 65, 63, 75, 74, 65 
4137:664 | DONE dir | na 16 16 |        |             |                 65 78 65 63 75 74 65     --  e x e c u t e
4137:665 | DONE wsp | na 16 16 |        |             |
4137:666 | DONE lbl | na 16 16 | 0071b4 |             | nt_here                              
4137:667 | DONE dir | na 16 16 | 0071b4 | (2 bytes)   |         .byte 4, { NC }              
4137:667 | DONE dir | na 16 16 |        |             |                 04 01                    --  . .
4137:668 | DONE dir | na 16 16 | 0071b6 | (6 bytes)   |         .word nt_execute, xt_here, 00673b 
4137:668 | DONE dir | na 16 16 |        |             |                 a5 71 35 67 3b 67        --  . q 5 g ; g
4137:669 | DONE dir | na 16 16 | 0071bc | (4 bytes)   |         .byte 68, 65, 72, 65         
4137:669 | DONE dir | na 16 16 |        |             |                 68 65 72 65              --  h e r e
4137:670 | DONE wsp | na 16 16 |        |             |
4137:671 | DONE lbl | na 16 16 | 0071c0 |             | nt_2drop                             
4137:672 | DONE dir | na 16 16 | 0071c0 | (2 bytes)   |         .byte 5, { NC }              
4137:672 | DONE dir | na 16 16 |        |             |                 05 01                    --  . .
4137:673 | DONE dir | na 16 16 | 0071c2 | (6 bytes)   |         .word nt_here, xt_2drop, 006360 
4137:673 | DONE dir | na 16 16 |        |             |                 b4 71 5a 63 60 63        --  . q Z c ` c
4137:674 | DONE dir | na 16 16 | 0071c8 | (5 bytes)   |         .byte 32, 64, 72, 6f, 70     
4137:674 | DONE dir | na 16 16 |        |             |                 32 64 72 6f 70           --  2 d r o p
4137:675 | DONE wsp | na 16 16 |        |             |
4137:676 | DONE lbl | na 16 16 | 0071cd |             | nt_rfetch                            
4137:677 | DONE dir | na 16 16 | 0071cd | (2 bytes)   |         .byte 2, 0                   we follow Gforth in making this not CO
4137:677 | DONE dir | na 16 16 |        |             |                 02 00                    --  . .
4137:678 | DONE dir | na 16 16 | 0071cf | (6 bytes)   |         .word nt_2drop, xt_rfetch, 00694e 
4137:678 | DONE dir | na 16 16 |        |             |                 c0 71 46 69 4e 69        --  . q F i N i
4137:679 | DONE dir | na 16 16 | 0071d5 | (2 bytes)   |         .byte 72, 40                 
4137:679 | DONE dir | na 16 16 |        |             |                 72 40                    --  r @
4137:680 | DONE wsp | na 16 16 |        |             |
4137:681 | DONE lbl | na 16 16 | 0071d7 |             | nt_fromr                             
4137:682 | DONE dir | na 16 16 | 0071d7 | (2 bytes)   |         .byte 2, { CO }              
4137:682 | DONE dir | na 16 16 |        |             |                 02 04                    --  . .
4137:683 | DONE dir | na 16 16 | 0071d9 | (6 bytes)   |         .word nt_rfetch, xt_fromr, 006956 
4137:683 | DONE dir | na 16 16 |        |             |                 cd 71 4f 69 56 69        --  . q O i V i
4137:684 | DONE dir | na 16 16 | 0071df | (2 bytes)   |         .byte 72, 3e                 
4137:684 | DONE dir | na 16 16 |        |             |                 72 3e                    --  r >
4137:685 | DONE wsp | na 16 16 |        |             |
4137:686 | DONE lbl | na 16 16 | 0071e1 |             | nt_tor                               
4137:687 | DONE dir | na 16 16 | 0071e1 | (2 bytes)   |         .byte 2, { CO }              
4137:687 | DONE dir | na 16 16 |        |             |                 02 04                    --  . .
4137:688 | DONE dir | na 16 16 | 0071e3 | (6 bytes)   |         .word nt_fromr, xt_tor, 00618d 
4137:688 | DONE dir | na 16 16 |        |             |                 d7 71 86 61 8d 61        --  . q . a . a
4137:689 | DONE dir | na 16 16 | 0071e9 | (2 bytes)   |         .byte 3e, 72                 
4137:689 | DONE dir | na 16 16 |        |             |                 3e 72                    --  > r
4137:690 | DONE wsp | na 16 16 |        |             |
4137:691 | DONE lbl | na 16 16 | 0071eb |             | nt_digitq                            
4137:692 | DONE dir | na 16 16 | 0071eb | (2 bytes)   |         .byte 6, { NC }              
4137:692 | DONE dir | na 16 16 |        |             |                 06 01                    --  . .
4137:693 | DONE dir | na 16 16 | 0071ed | (6 bytes)   |         .word nt_tor, xt_digitq, 0065f6 
4137:693 | DONE dir | na 16 16 |        |             |                 e1 71 bb 65 f6 65        --  . q . e . e
4137:694 | DONE dir | na 16 16 | 0071f3 | (6 bytes)   |         .byte 64, 69, 67, 69, 74, 3f 
4137:694 | DONE dir | na 16 16 |        |             |                 64 69 67 69 74 3f        --  d i g i t ?
4137:695 | DONE wsp | na 16 16 |        |             |
4137:696 | DONE lbl | na 16 16 | 0071f9 |             | nt_bounds                            
4137:697 | DONE dir | na 16 16 | 0071f9 | (2 bytes)   |         .byte 6, { NC }              
4137:697 | DONE dir | na 16 16 |        |             |                 06 01                    --  . .
4137:698 | DONE dir | na 16 16 | 0071fb | (6 bytes)   |         .word nt_digitq, xt_bounds, 00649f 
4137:698 | DONE dir | na 16 16 |        |             |                 eb 71 96 64 9f 64        --  . q . d . d
4137:699 | DONE dir | na 16 16 | 007201 | (6 bytes)   |         .byte 62, 6f, 75, 6e, 64, 73 
4137:699 | DONE dir | na 16 16 |        |             |                 62 6f 75 6e 64 73        --  b o u n d s
4137:700 | DONE wsp | na 16 16 |        |             |
4137:701 | DONE lbl | na 16 16 | 007207 |             | nt_over                              
4137:702 | DONE dir | na 16 16 | 007207 | (2 bytes)   |         .byte 4, { NC }              
4137:702 | DONE dir | na 16 16 |        |             |                 04 01                    --  . .
4137:703 | DONE dir | na 16 16 | 007209 | (6 bytes)   |         .word nt_bounds, xt_over, 006882 
4137:703 | DONE dir | na 16 16 |        |             |                 f9 71 7c 68 82 68        --  . q | h . h
4137:704 | DONE dir | na 16 16 | 00720f | (4 bytes)   |         .byte 6f, 76, 65, 72         
4137:704 | DONE dir | na 16 16 |        |             |                 6f 76 65 72              --  o v e r
4137:705 | DONE wsp | na 16 16 |        |             |
4137:706 | DONE lbl | na 16 16 | 007213 |             | nt_fetch                             
4137:707 | DONE dir | na 16 16 | 007213 | (2 bytes)   |         .byte 1, { NC }              
4137:707 | DONE dir | na 16 16 |        |             |                 01 01                    --  . .
4137:708 | DONE dir | na 16 16 | 007215 | (6 bytes)   |         .word nt_over, xt_fetch, 0062a8 
4137:708 | DONE dir | na 16 16 |        |             |                 07 72 a4 62 a8 62        --  . r . b . b
4137:709 | DONE dir | na 16 16 | 00721b | (1 bytes)   |         .byte 40                     
4137:709 | DONE dir | na 16 16 |        |             |                 40                       --  @
4137:710 | DONE wsp | na 16 16 |        |             |
4137:711 | DONE lbl | na 16 16 | 00721c |             | nt_store                             
4137:712 | DONE dir | na 16 16 | 00721c | (2 bytes)   |         .byte 1, { NC }              
4137:712 | DONE dir | na 16 16 |        |             |                 01 01                    --  . .
4137:713 | DONE dir | na 16 16 | 00721e | (6 bytes)   |         .word nt_fetch, xt_store, 0062a3 
4137:713 | DONE dir | na 16 16 |        |             |                 13 72 98 62 a3 62        --  . r . b . b
4137:714 | DONE dir | na 16 16 | 007224 | (1 bytes)   |         .byte 21                     
4137:714 | DONE dir | na 16 16 |        |             |                 21                       --  !
4137:715 | DONE wsp | na 16 16 |        |             |
4137:716 | DONE lbl | na 16 16 | 007225 |             | nt_swap                              
4137:717 | DONE dir | na 16 16 | 007225 | (2 bytes)   |         .byte 4, { NC }              
4137:717 | DONE dir | na 16 16 |        |             |                 04 01                    --  . .
4137:718 | DONE dir | na 16 16 | 007227 | (6 bytes)   |         .word nt_store, xt_swap, 006a61 
4137:718 | DONE dir | na 16 16 |        |             |                 1c 72 5c 6a 61 6a        --  . r \ j a j
4137:719 | DONE dir | na 16 16 | 00722d | (4 bytes)   |         .byte 73, 77, 61, 70         
4137:719 | DONE dir | na 16 16 |        |             |                 73 77 61 70              --  s w a p
4137:720 | DONE wsp | na 16 16 |        |             |
4137:721 | DONE lbl | na 16 16 | 007231 |             | nt_dup                               
4137:722 | DONE dir | na 16 16 | 007231 | (2 bytes)   |         .byte 3, { NC }              
4137:722 | DONE dir | na 16 16 |        |             |                 03 01                    --  . .
4137:723 | DONE dir | na 16 16 | 007233 | (6 bytes)   |         .word nt_swap, xt_dup, 006691 
4137:723 | DONE dir | na 16 16 |        |             |                 25 72 8d 66 91 66        --  % r . f . f
4137:724 | DONE dir | na 16 16 | 007239 | (3 bytes)   |         .byte 64, 75, 70             
4137:724 | DONE dir | na 16 16 |        |             |                 64 75 70                 --  d u p
4137:725 | DONE wsp | na 16 16 |        |             |
4137:726 | DONE cmt | na 16 16 |        |             | ; DROP is always the first entry in dictionary
4137:727 | DONE lbl | na 16 16 | 00723c |             | nt_drop                              
4137:728 | DONE dir | na 16 16 | 00723c | (2 bytes)   |         .byte 4, { NC }              
4137:728 | DONE dir | na 16 16 |        |             |                 04 01                    --  . .
4137:729 | DONE dir | na 16 16 | 00723e | (6 bytes)   |         .word nt_dup, xt_drop, 006665 
4137:729 | DONE dir | na 16 16 |        |             |                 31 72 61 66 65 66        --  1 r a f e f
4137:730 | DONE dir | na 16 16 | 007244 | (4 bytes)   |         .byte 64, 72, 6f, 70         
4137:730 | DONE dir | na 16 16 |        |             |                 64 72 6f 70              --  d r o p
4137:731 | DONE wsp | na 16 16 |        |             |
4137:732 | DONE cmt | na 16 16 |        |             | ; END
4138:000 | DONE wsp | na 16 16 |        |             |
4139:000 | DONE cmt | na 16 16 |        |             | ; ===================================================================
4140:000 | DONE cmt | na 16 16 |        |             | ; CODE FIELD ROUTINES
4141:000 | DONE wsp | na 16 16 |        |             |
4142:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
4143:000 | DONE cmt | na 16 16 |        |             | ; DOCONST
4144:000 | DONE cmt | na 16 16 |        |             | ; Execute a constant: Push the data in the first two byte of the Data Field onto
4145:000 | DONE cmt | na 16 16 |        |             | ; the stack
4146:000 | DONE lbl | na 16 16 | 007248 |             | doconst                              
4147:000 | DONE dir | na 16 16 |        |             |         .!a16                        
4148:000 | DONE dir | na 16 16 |        |             |         .!xy16                       
4149:000 | DONE ins | na 16 16 | 007248 | ca          |                 dex                  make room on Data Stack
4150:000 | DONE ins | na 16 16 | 007249 | ca          |                 dex                  
4151:000 | DONE ins | na 16 16 | 00724a | 94 00       |                 sty.dx 00            
4152:000 | DONE wsp | na 16 16 |        |             |
4153:000 | DONE cmt | na 16 16 |        |             |                 ; The value we need is stored two bytes after the JSR return
4154:000 | DONE cmt | na 16 16 |        |             |                 ; address, which in turn is what is on top of the Return Stack
4155:000 | DONE ins | na 16 16 | 00724c | 68          |                 pla                  get the return address
4156:000 | DONE ins | na 16 16 | 00724d | 85 16       |                 sta.d 000216         
4157:000 | DONE wsp | na 16 16 |        |             |
4158:000 | DONE cmt | na 16 16 |        |             |                 ; start Y as index off with 1 instead of zero because of 65816's
4159:000 | DONE cmt | na 16 16 |        |             |                 ; address handling
4160:000 | DONE ins | na 16 16 | 00724f | a0 01 00    |                 ldy.# 0001           
4161:000 | DONE ins | na 16 16 | 007252 | b1 16       |                 lda.diy 000216       LDA (TMP1),Y
4162:000 | DONE ins | na 16 16 | 007254 | a8          |                 tay                  
4163:000 | DONE wsp | na 16 16 |        |             |
4164:000 | DONE ins | na 16 16 | 007255 | 60          |                 rts                  takes us to original caller
4165:000 | DONE wsp | na 16 16 |        |             |
4166:000 | DONE wsp | na 16 16 |        |             |
4167:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
4168:000 | DONE cmt | na 16 16 |        |             | ; DODOES
4169:000 | DONE cmt | na 16 16 |        |             | ; Used in combination with DOES>'s runtime portion to actually do the work of
4170:000 | DONE cmt | na 16 16 |        |             | ; the new word. See DOES> and docs/create-does.txt for details. Uses tmp3
4171:000 | DONE lbl | na 16 16 | 007256 |             | dodoes                               
4172:000 | DONE cmt | na 16 16 |        |             |                 ; Assumes the address of the CFA of the original defining word
4173:000 | DONE cmt | na 16 16 |        |             |                 ; (say, CONSTANT) is on the top of the Return Stack. Save it for
4174:000 | DONE cmt | na 16 16 |        |             |                 ; a later jump, adding one byte because of the way the 65816
4175:000 | DONE cmt | na 16 16 |        |             |                 ; works
4176:000 | DONE ins | na 16 16 | 007256 | 68          |                 pla                  
4177:000 | DONE ins | na 16 16 | 007257 | 1a          |                 inc.a                
4178:000 | DONE ins | na 16 16 | 007258 | 85 1a       |                 sta.d 00021a         
4179:000 | DONE wsp | na 16 16 |        |             |
4180:000 | DONE cmt | na 16 16 |        |             |                 ; Next on the Return Stack should be the address of the PFA of
4181:000 | DONE cmt | na 16 16 |        |             |                 ; the calling defined word (say, the name of whatever constant we
4182:000 | DONE cmt | na 16 16 |        |             |                 ; just defined). Move this to the Data Stack, again adding one.
4183:000 | DONE ins | na 16 16 | 00725a | ca          |                 dex                  
4184:000 | DONE ins | na 16 16 | 00725b | ca          |                 dex                  
4185:000 | DONE ins | na 16 16 | 00725c | 94 00       |                 sty.dx 00            
4186:000 | DONE wsp | na 16 16 |        |             |
4187:000 | DONE ins | na 16 16 | 00725e | 7a          |                 ply                  
4188:000 | DONE ins | na 16 16 | 00725f | c8          |                 iny                  
4189:000 | DONE wsp | na 16 16 |        |             |
4190:000 | DONE cmt | na 16 16 |        |             |                 ; This leaves the return address from the original main routine
4191:000 | DONE cmt | na 16 16 |        |             |                 ; on top of the Return Stack. We leave that untouched and jump
4192:000 | DONE cmt | na 16 16 |        |             |                 ; to the special code of the defining word. It's RTS instruction
4193:000 | DONE cmt | na 16 16 |        |             |                 ; will take us back to the main routine
4194:000 | DONE ins | na 16 16 | 007260 | 6c 1a 02    |                 jmp.i 00021a         JMP (TMP3)
4195:000 | DONE wsp | na 16 16 |        |             |
4196:000 | DONE wsp | na 16 16 |        |             |
4197:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
4198:000 | DONE cmt | na 16 16 |        |             | ; DOVAR
4199:000 | DONE cmt | na 16 16 |        |             | ; Execute a variable: Push the address of the first bytes of the Data Field onto
4200:000 | DONE cmt | na 16 16 |        |             | ; the stack. This is called with JSR so we can pick up the address of the
4201:000 | DONE cmt | na 16 16 |        |             | ; calling variable off the 65816's Return Stack. The final RTS takes us to the
4202:000 | DONE cmt | na 16 16 |        |             | ; original caller of the routine that in turn called DOVAR. This is the default
4203:000 | DONE cmt | na 16 16 |        |             | ; routine installed with CREATE
4204:000 | DONE lbl | na 16 16 | 007263 |             | dovar                                
4205:000 | DONE dir | na 16 16 |        |             |         .!a16                        
4206:000 | DONE dir | na 16 16 |        |             |         .!xy16                       
4207:000 | DONE ins | na 16 16 | 007263 | ca          |                 dex                  make room on Data Stack
4208:000 | DONE ins | na 16 16 | 007264 | ca          |                 dex                  
4209:000 | DONE ins | na 16 16 | 007265 | 94 00       |                 sty.dx 00            
4210:000 | DONE wsp | na 16 16 |        |             |
4211:000 | DONE cmt | na 16 16 |        |             |                 ; The address we need is stored in the two bytes after the JSR
4212:000 | DONE cmt | na 16 16 |        |             |                 ; return address, which in turn is what is on top of the Return
4213:000 | DONE cmt | na 16 16 |        |             |                 ; Stack
4214:000 | DONE ins | na 16 16 | 007267 | 7a          |                 ply                  value is now TOS
4215:000 | DONE ins | na 16 16 | 007268 | c8          |                 iny                  add one because of 65816's address handling
4216:000 | DONE wsp | na 16 16 |        |             |
4217:000 | DONE ins | na 16 16 | 007269 | 60          |                 rts                  takes us to original caller
4218:000 | DONE wsp | na 16 16 |        |             |
4219:000 | DONE wsp | na 16 16 |        |             |
4220:000 | DONE cmt | na 16 16 |        |             | ; ===================================================================
4221:000 | DONE cmt | na 16 16 |        |             | ; LOW LEVEL HELPER FUNCTIONS
4222:000 | DONE wsp | na 16 16 |        |             |
4223:000 | DONE wsp | na 16 16 |        |             |
4224:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
4225:000 | DONE cmt | na 16 16 |        |             | ; INTERPRET
4226:000 | DONE cmt | na 16 16 |        |             | ; Core routine for interpreter called by EVALUATE and QUIT. We process one line
4227:000 | DONE cmt | na 16 16 |        |             | ; only. Assumes that address of name is in cib and length of whole input
4228:000 | DONE cmt | na 16 16 |        |             | ; string is in ciblen
4229:000 | DONE lbl | na 16 16 | 00726a |             | interpret                            
4230:000 | DONE lbl | na 16 16 | 00726a |             | interpret_loop                       
4231:000 | DONE dir | na 16 16 |        |             |         .!a16                        
4232:000 | DONE dir | na 16 16 |        |             |         .!xy16                       
4233:000 | DONE cmt | na 16 16 |        |             |                 ; Normally we would use PARSE here with the SPACE character as
4234:000 | DONE cmt | na 16 16 |        |             |                 ; a parameter (PARSE replaces WORD in modern Forths). However,
4235:000 | DONE cmt | na 16 16 |        |             |                 ; Gforth's PARSE-NAME makes more sense as it uses spaces as
4236:000 | DONE cmt | na 16 16 |        |             |                 ; delimiters per default and skips any leading spaces, which
4237:000 | DONE cmt | na 16 16 |        |             |                 ; PARSE doesn't
4238:000 | DONE ins | na 16 16 | 00726a | 20 9c 68    |                 jsr 00689c           ( "string" -- addr u )
4239:000 | DONE wsp | na 16 16 |        |             |
4240:000 | DONE cmt | na 16 16 |        |             |                 ; If PARSE-NAME returns 0 (empty line), no characters were left
4241:000 | DONE cmt | na 16 16 |        |             |                 ; in the line and we need to go get a new line
4242:000 | DONE ins | na 16 16 | 00726d | 98          |                 tya                  force flag check
4243:000 | DONE ins | na 16 16 | 00726e | f0 48       |                 beq 0072b8           
4244:000 | DONE wsp | na 16 16 |        |             |
4245:000 | DONE cmt | na 16 16 |        |             |                 ; We let the user input words in any case, but use lower case
4246:000 | DONE cmt | na 16 16 |        |             |                 ; internally (sorry, Garth).
4247:000 | DONE ins | na 16 16 | 007270 | 20 1e 73    |                 jsr 00731e           
4248:000 | DONE wsp | na 16 16 |        |             |
4249:000 | DONE cmt | na 16 16 |        |             |                 ; Go to FIND-NAME to see if this is a word we know. We have to
4250:000 | DONE cmt | na 16 16 |        |             |                 ; make a copy of the address in case it isn't a word we know and
4251:000 | DONE cmt | na 16 16 |        |             |                 ; we have to go see if it is a number
4252:000 | DONE ins | na 16 16 | 007273 | 20 61 63    |                 jsr 006361           TODO convert this to assembler
4253:000 | DONE ins | na 16 16 | 007276 | 20 cf 66    |                 jsr 0066cf           ( addr u -- nt | 0 )
4254:000 | DONE wsp | na 16 16 |        |             |
4255:000 | DONE cmt | na 16 16 |        |             |                 ; a zero signals that we didn't find a word in the Dictionary
4256:000 | DONE ins | na 16 16 | 007279 | 98          |                 tya                  
4257:000 | DONE ins | na 16 16 | 00727a | d0 08       |                 bne 007284           
4258:000 | DONE wsp | na 16 16 |        |             |
4259:000 | DONE cmt | na 16 16 |        |             |                 ; We didn't get any nt we know of, so let's see if this is
4260:000 | DONE cmt | na 16 16 |        |             |                 ; a number.
4261:000 | DONE ins | na 16 16 | 00727c | 20 61 66    |                 jsr 006661           TODO convert this to assembler
4262:000 | DONE wsp | na 16 16 |        |             |
4263:000 | DONE wsp | na 16 16 |        |             |
4264:000 | DONE cmt | na 16 16 |        |             |                 ; If the number conversion doesn't work, NUMBER will do the
4265:000 | DONE cmt | na 16 16 |        |             |                 ; complaining for us
4266:000 | DONE ins | na 16 16 | 00727f | 20 f1 67    |                 jsr 0067f1           ( addr u -- u | d )
4267:000 | DONE wsp | na 16 16 |        |             |
4268:000 | DONE cmt | na 16 16 |        |             |                 ; That was so much fun we should do it again!
4269:000 | DONE ins | na 16 16 | 007282 | 80 e6       |                 bra 00726a           
4270:000 | DONE wsp | na 16 16 |        |             |
4271:000 | DONE lbl | na 16 16 | 007284 |             | interpret_got_name_token             
4272:000 | DONE cmt | na 16 16 |        |             |                 ; We have a known word's nt as TOS. We're going to need its xt
4273:000 | DONE cmt | na 16 16 |        |             |                 ; though, which is four byte father down.
4274:000 | DONE wsp | na 16 16 |        |             |
4275:000 | DONE cmt | na 16 16 |        |             |                 ; Arrive here with ( addr u nt ), so we NIP twice, which is
4276:000 | DONE cmt | na 16 16 |        |             |                 ; really fast if Y is TOS
4277:000 | DONE ins | na 16 16 | 007284 | e8          |                 inx                  
4278:000 | DONE ins | na 16 16 | 007285 | e8          |                 inx                  
4279:000 | DONE ins | na 16 16 | 007286 | e8          |                 inx                  
4280:000 | DONE ins | na 16 16 | 007287 | e8          |                 inx                  
4281:000 | DONE wsp | na 16 16 |        |             |
4282:000 | DONE cmt | na 16 16 |        |             |                 ; This is a quicker
4283:000 | DONE cmt | na 16 16 |        |             |                 ; version of NAME>INT. But first, save a version of nt for
4284:000 | DONE cmt | na 16 16 |        |             |                 ; error handling and compilation stuff.
4285:000 | DONE ins | na 16 16 | 007288 | 84 16       |                 sty.d 000216         
4286:000 | DONE ins | na 16 16 | 00728a | c8          |                 iny                  
4287:000 | DONE ins | na 16 16 | 00728b | c8          |                 iny                  
4288:000 | DONE ins | na 16 16 | 00728c | c8          |                 iny                  
4289:000 | DONE ins | na 16 16 | 00728d | c8          |                 iny                  
4290:000 | DONE ins | na 16 16 | 00728e | b9 00 00    |                 lda.y 0000           LDA $0000,Y
4291:000 | DONE ins | na 16 16 | 007291 | a8          |                 tay                  xt is TOS
4292:000 | DONE wsp | na 16 16 |        |             |
4293:000 | DONE cmt | na 16 16 |        |             |                 ; See if we are in interpret or compile mode
4294:000 | DONE ins | na 16 16 | 007292 | a5 14       |                 lda.d 000214         
4295:000 | DONE ins | na 16 16 | 007294 | d0 14       |                 bne 0072aa           
4296:000 | DONE wsp | na 16 16 |        |             |
4297:000 | DONE cmt | na 16 16 |        |             |                 ; We are interpreting, so EXECUTE the xt that is TOS. First,
4298:000 | DONE cmt | na 16 16 |        |             |                 ; though, see if this isn't a compile-only word, which would be
4299:000 | DONE cmt | na 16 16 |        |             |                 ; illegal.
4300:000 | DONE ins | na 16 16 | 007296 | b2 16       |                 lda.di 000216        
4301:000 | DONE ins | na 16 16 | 007298 | eb          |                 xba                  flags are MSB
4302:000 | DONE ins | na 16 16 | 007299 | 29 04 00    |                 and.# CO             mask everything but Compile Only bit
4303:000 | DONE ins | na 16 16 | 00729c | f0 06       |                 beq 0072a4           
4304:000 | DONE wsp | na 16 16 |        |             |
4305:000 | DONE cmt | na 16 16 |        |             |                 ; TODO see if we can print offending word first
4306:000 | DONE ins | na 16 16 | 00729e | a9 5c 78    |                 lda.# 00785c         
4307:000 | DONE ins | na 16 16 | 0072a1 | 4c e5 72    |                 jmp 0072e5           
4308:000 | DONE wsp | na 16 16 |        |             |
4309:000 | DONE lbl | na 16 16 | 0072a4 |             | interpret_interpret                  
4310:000 | DONE cmt | na 16 16 |        |             |                 ; We JSR to EXECUTE instead of calling the xt directly because
4311:000 | DONE cmt | na 16 16 |        |             |                 ; the RTS of the word we're executing will bring us back here,
4312:000 | DONE cmt | na 16 16 |        |             |                 ; skipping EXECUTE completely during RTS. If we were to execute
4313:000 | DONE cmt | na 16 16 |        |             |                 ; xt directly, we have to fool around with the Return Stack
4314:000 | DONE cmt | na 16 16 |        |             |                 ; instead, which is actually slightly slower
4315:000 | DONE ins | na 16 16 | 0072a4 | 20 c4 66    |                 jsr 0066c4           
4316:000 | DONE wsp | na 16 16 |        |             |
4317:000 | DONE cmt | na 16 16 |        |             |                 ; That's quite enough for this word, let's get the next one
4318:000 | DONE ins | na 16 16 | 0072a7 | 4c 6a 72    |                 jmp 00726a           
4319:000 | DONE wsp | na 16 16 |        |             |
4320:000 | DONE lbl | na 16 16 | 0072aa |             | interpret_compile                    
4321:000 | DONE cmt | na 16 16 |        |             |                 ; We're compiling. However, we need to see if this is an
4322:000 | DONE cmt | na 16 16 |        |             |                 ; IMMEDIATE word, which would mean we execute it right now even
4323:000 | DONE cmt | na 16 16 |        |             |                 ; during compilation mode. Fortunately, we saved the nt so life
4324:000 | DONE cmt | na 16 16 |        |             |                 ; is easier
4325:000 | DONE ins | na 16 16 | 0072aa | b2 16       |                 lda.di 000216        
4326:000 | DONE ins | na 16 16 | 0072ac | eb          |                 xba                  flags are MSB
4327:000 | DONE ins | na 16 16 | 0072ad | 29 02 00    |                 and.# IM             Mask all but IM bit
4328:000 | DONE ins | na 16 16 | 0072b0 | d0 f2       |                 bne 0072a4           IMMEDIATE word, execute right now
4329:000 | DONE wsp | na 16 16 |        |             |
4330:000 | DONE cmt | na 16 16 |        |             |                 ; Compile the xt into the Dictionary with COMPILE,
4331:000 | DONE ins | na 16 16 | 0072b2 | 20 05 65    |                 jsr 006505           
4332:000 | DONE wsp | na 16 16 |        |             |
4333:000 | DONE ins | na 16 16 | 0072b5 | 4c 6a 72    |                 jmp 00726a           
4334:000 | DONE wsp | na 16 16 |        |             |
4335:000 | DONE lbl | na 16 16 | 0072b8 |             | interpret_line_done                  
4336:000 | DONE cmt | na 16 16 |        |             |                 ; drop stuff from PARSE_NAME
4337:000 | DONE ins | na 16 16 | 0072b8 | b4 02       |                 ldy.dx 02            
4338:000 | DONE ins | na 16 16 | 0072ba | e8          |                 inx                  
4339:000 | DONE ins | na 16 16 | 0072bb | e8          |                 inx                  
4340:000 | DONE ins | na 16 16 | 0072bc | e8          |                 inx                  
4341:000 | DONE ins | na 16 16 | 0072bd | e8          |                 inx                  
4342:000 | DONE wsp | na 16 16 |        |             |
4343:000 | DONE ins | na 16 16 | 0072be | 60          |                 rts                  
4344:000 | DONE wsp | na 16 16 |        |             |
4345:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
4346:000 | DONE cmt | na 16 16 |        |             | ; COMPILE WORDS, JUMPS AND SUBROUTINE JUMPS INTO CODE
4347:000 | DONE cmt | na 16 16 |        |             | ; These three routines compile instructions such as "jsr xt_words" into a word
4348:000 | DONE cmt | na 16 16 |        |             | ; at compile time so they are available at run time. Use by pushing the word or
4349:000 | DONE cmt | na 16 16 |        |             | ; address to be compiled on the Return Stack with
4350:000 | DONE cmt | na 16 16 |        |             | ;
4351:000 | DONE cmt | na 16 16 |        |             | ;       phe.# <WORD>    ; PEA <WORD>
4352:000 | DONE cmt | na 16 16 |        |             | ;
4353:000 | DONE cmt | na 16 16 |        |             | ; Followed by a jump to which ever versions we need. Words that use this routine
4354:000 | DONE cmt | na 16 16 |        |             | ; may not be natively compiled. We use "cmpl" as not to confuse these routines
4355:000 | DONE cmt | na 16 16 |        |             | ; with the COMPILE, word. This routine uses tmptos. Always call this with
4356:000 | DONE cmt | na 16 16 |        |             | ; a subroutine jump, which means no combining JSR/RTS to JMP.
4357:000 | DONE cmt | na 16 16 |        |             | ; TODO see if we need to add a JSR.L variant at some point
4358:000 | DONE wsp | na 16 16 |        |             |
4359:000 | DONE dir | na 16 16 |        |             |         .!a16                        paranoid
4360:000 | DONE lbl | na 16 16 | 0072bf |             | cmpl_word                            
4361:000 | DONE ins | na 16 16 | 0072bf | a9 00 00    |                 lda.# 0000           zero value as a flag, compile word only
4362:000 | DONE ins | na 16 16 | 0072c2 | 80 08       |                 bra 0072cc           
4363:000 | DONE lbl | na 16 16 | 0072c4 |             | cmpl_subroutine                      
4364:000 | DONE ins | na 16 16 | 0072c4 | a9 20 00    |                 lda.# 0020           compile "JSR" opcode first
4365:000 | DONE ins | na 16 16 | 0072c7 | 80 03       |                 bra 0072cc           
4366:000 | DONE lbl | na 16 16 | 0072c9 |             | cmpl_jump                            
4367:000 | DONE ins | na 16 16 | 0072c9 | a9 4c 00    |                 lda.# 004c           compile "JMP", fall through to cmpl_common
4368:000 | DONE lbl | na 16 16 | 0072cc |             | cmpl_common                          
4369:000 | DONE cmt | na 16 16 |        |             |                 ; we're going to need the Y register to get anything done
4370:000 | DONE ins | na 16 16 | 0072cc | 84 06       |                 sty.d 000206         
4371:000 | DONE wsp | na 16 16 |        |             |
4372:000 | DONE ins | na 16 16 | 0072ce | a8          |                 tay                  force flag check
4373:000 | DONE ins | na 16 16 | 0072cf | f0 08       |                 beq 0072d9           came in through cmpl_word, just compile body
4374:000 | DONE wsp | na 16 16 |        |             |
4375:000 | DONE cmt | na 16 16 |        |             |                 ; A contains an opcode that must be compiled first. This is an
4376:000 | DONE cmt | na 16 16 |        |             |                 ; optimized version of C, ("c-comma")
4377:000 | DONE ins | na 16 16 | 0072d1 | e2 20       |                 sep 20               
4377:001 | DONE ctl | na  8 16 |        |             |         .!a8
4378:000 | DONE ins | na  8 16 | 0072d3 | 92 00       |                 sta.di 000200        STA (CP)
4379:000 | DONE ins | na  8 16 | 0072d5 | c2 20       |                 rep 20               
4379:001 | DONE ctl | na 16 16 |        |             |         .!a16
4380:000 | DONE ins | na 16 16 | 0072d7 | e6 00       |                 inc.d 000200         fall through to cmpl_body
4381:000 | DONE lbl | na 16 16 | 0072d9 |             | cmpl_body                            
4382:000 | DONE ins | na 16 16 | 0072d9 | 7a          |                 ply                  the return address we'll need later
4383:000 | DONE wsp | na 16 16 |        |             |
4384:000 | DONE ins | na 16 16 | 0072da | 68          |                 pla                  next value on stack is the word to compile
4385:000 | DONE ins | na 16 16 | 0072db | 92 00       |                 sta.di 000200        this is a quicker version of , ("comma")
4386:000 | DONE ins | na 16 16 | 0072dd | e6 00       |                 inc.d 000200         
4387:000 | DONE ins | na 16 16 | 0072df | e6 00       |                 inc.d 000200         
4388:000 | DONE wsp | na 16 16 |        |             |
4389:000 | DONE ins | na 16 16 | 0072e1 | 5a          |                 phy                  make sure we can get back home
4390:000 | DONE wsp | na 16 16 |        |             |
4391:000 | DONE ins | na 16 16 | 0072e2 | a4 06       |                 ldy.d 000206         restore Data Stack
4392:000 | DONE wsp | na 16 16 |        |             |
4393:000 | DONE ins | na 16 16 | 0072e4 | 60          |                 rts                  
4394:000 | DONE wsp | na 16 16 |        |             |
4395:000 | DONE wsp | na 16 16 |        |             |
4396:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
4397:000 | DONE cmt | na 16 16 |        |             | ; FATAL ERROR
4398:000 | DONE cmt | na 16 16 |        |             | ; Take address of error string from A, print it and then call abort
4399:000 | DONE lbl | na 16 16 | 0072e5 |             | error                                
4400:000 | DONE ins | na 16 16 | 0072e5 | 20 eb 72    |                 jsr 0072eb           
4401:000 | DONE ins | na 16 16 | 0072e8 | 4c 97 60    |                 jmp 006097           
4402:000 | DONE wsp | na 16 16 |        |             |
4403:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
4404:000 | DONE cmt | na 16 16 |        |             | ; Print a zero terminated string to the console, adding a CR character. Takes
4405:000 | DONE cmt | na 16 16 |        |             | ; the address of the string in 16-bit A register, calls put_chr.  A is
4406:000 | DONE cmt | na 16 16 |        |             | ; destroyed. We could probably figure out some way to use TYPE instead, but zero
4407:000 | DONE cmt | na 16 16 |        |             | ; terminated strings are easier for the 65816 to use.
4408:000 | DONE cmt | na 16 16 |        |             | ; TODO add version without final line feed
4409:000 | DONE lbl | na 16 16 | 0072eb |             | print_string                         
4410:000 | DONE dir | na 16 16 |        |             |         .!a16                        
4411:000 | DONE dir | na 16 16 |        |             |         .!xy16                       
4412:000 | DONE cmt | na 16 16 |        |             |                 ; don't use tmpdsp for X because we don't know if the user has
4413:000 | DONE cmt | na 16 16 |        |             |                 ; used it for something already
4414:000 | DONE ins | na 16 16 | 0072eb | da          |                 phx                  
4415:000 | DONE ins | na 16 16 | 0072ec | aa          |                 tax                  x16 contains address of string
4416:000 | DONE lbl | na 16 16 | 0072ed |             | @                                    
4417:000 | DONE ins | na 16 16 | 0072ed | e2 20       |                 sep 20               
4417:001 | DONE ctl | na  8 16 |        |             |         .!a8
4418:000 | DONE ins | na  8 16 | 0072ef | bd 00 00    |                 lda.x 0000           LDA $0000,X
4419:000 | DONE ins | na  8 16 | 0072f2 | f0 06       |                 beq 0072fa           
4420:000 | DONE ins | na  8 16 | 0072f4 | 20 36 60    |                 jsr 006036           
4421:000 | DONE ins | na  8 16 | 0072f7 | e8          |                 inx                  
4422:000 | DONE ins | na  8 16 | 0072f8 | 80 f3       |                 bra 0072ed           
4423:000 | DONE wsp | na  8 16 |        |             |
4424:000 | DONE lbl | na  8 16 | 0072fa |             | print_string_done                    
4425:000 | DONE ins | na  8 16 | 0072fa | a9 0a       |                 lda.# AscLF          should be CR on some systems
4426:000 | DONE ins | na  8 16 | 0072fc | 20 36 60    |                 jsr 006036           
4427:000 | DONE ins | na  8 16 | 0072ff | c2 20       |                 rep 20               
4427:001 | DONE ctl | na 16 16 |        |             |         .!a16
4428:000 | DONE ins | na 16 16 | 007301 | fa          |                 plx                  
4429:000 | DONE ins | na 16 16 | 007302 | 60          |                 rts                  
4430:000 | DONE wsp | na 16 16 |        |             |
4431:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
4432:000 | DONE cmt | na 16 16 |        |             | ; CONVERT BYTE TO ASCII
4433:000 | DONE cmt | na 16 16 |        |             | ; Convert byte in A to two ASCII hex digits and print them. Calls
4434:000 | DONE cmt | na 16 16 |        |             | ; nibble_to_ascii. Assumes A is 8 bit.
4435:000 | DONE lbl | na 16 16 | 007303 |             | byte_to_ascii                        
4436:000 | DONE ins | na 16 16 | 007303 | 48          |                 pha                  
4437:000 | DONE cmt | na 16 16 |        |             |                 ; convert high nibble first
4438:000 | DONE ins | na 16 16 | 007304 | 4a          |                 lsr.a                
4439:000 | DONE ins | na 16 16 | 007305 | 4a          |                 lsr.a                
4440:000 | DONE ins | na 16 16 | 007306 | 4a          |                 lsr.a                
4441:000 | DONE ins | na 16 16 | 007307 | 4a          |                 lsr.a                
4442:000 | DONE ins | na 16 16 | 007308 | 20 0c 73    |                 jsr 00730c           
4443:000 | DONE wsp | na 16 16 |        |             |
4444:000 | DONE ins | na 16 16 | 00730b | 68          |                 pla                  
4445:000 | DONE wsp | na 16 16 |        |             |
4446:000 | DONE cmt | na 16 16 |        |             |                 ; fall thru to nibble_to_ascii
4447:000 | DONE wsp | na 16 16 |        |             |
4448:000 | DONE wsp | na 16 16 |        |             |
4449:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
4450:000 | DONE cmt | na 16 16 |        |             | ; CONVERT NIBBLE TO ASCII
4451:000 | DONE cmt | na 16 16 |        |             | ; Converts the lower nibble of a number in A and returns the ASCII character
4452:000 | DONE cmt | na 16 16 |        |             | ; number, then prints it. Assumes A is 8 bit
4453:000 | DONE lbl | na 16 16 | 00730c |             | nibble_to_ascii                      
4454:000 | DONE ins | na 16 16 | 00730c | 29 0f 00    |                 and.# 000f           
4455:000 | DONE ins | na 16 16 | 00730f | 09 30 00    |                 ora.# 30             
4456:000 | DONE ins | na 16 16 | 007312 | c9 3a 00    |                 cmp.# 003a           '9' + 1
4457:000 | DONE ins | na 16 16 | 007315 | 90 03       |                 bcc 00731a           
4458:000 | DONE ins | na 16 16 | 007317 | 69 06 00    |                 adc.# 0006           
4459:000 | DONE lbl | na 16 16 | 00731a |             | @                                    
4460:000 | DONE ins | na 16 16 | 00731a | 20 36 60    |                 jsr 006036           
4461:000 | DONE dir | na 16 16 |        |             |         .!a16                        
4462:000 | DONE ins | na 16 16 | 00731d | 60          |                 rts                  
4463:000 | DONE wsp | na 16 16 |        |             |
4464:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
4465:000 | DONE cmt | na 16 16 |        |             | ; Convert a string given by ( addr u ) to lowercase in place. Since we have to
4466:000 | DONE cmt | na 16 16 |        |             | ; treat the input buffer as read-only by ANS rules, we have to put the converted
4467:000 | DONE cmt | na 16 16 |        |             | ; string somewhere and then return the new address and length
4468:000 | DONE lbl | na 16 16 | 00731e |             | string_to_lowercase                  
4469:000 | DONE cmt | na 16 16 |        |             |                 ; TODO CODE THIS
4470:000 | DONE ins | na 16 16 | 00731e | 60          |                 rts                  
4471:000 | DONE wsp | na 16 16 |        |             |
4472:000 | DONE wsp | na 16 16 |        |             |
4473:000 | DONE cmt | na 16 16 |        |             | ; ===================================================================
4474:000 | DONE cmt | na 16 16 |        |             | ; HIGH-LEVEL WORDS
4475:000 | DONE wsp | na 16 16 |        |             |
4476:000 | DONE cmt | na 16 16 |        |             | ; These are executed during start up. Remember that we have to put a space at
4477:000 | DONE cmt | na 16 16 |        |             | ; the end of the line if there is another line with code following it. No zero
4478:000 | DONE cmt | na 16 16 |        |             | ; or CR/LF is required
4479:000 | DONE lbl | na 16 16 | 00731f |             | hi-start                             
4480:000 | DONE cmt | na 16 16 |        |             |         ; High level definitions. Many of these are still defined with BRANCH
4481:000 | DONE cmt | na 16 16 |        |             |         ; and 0BRANCH from Tali Forth, which will be replaced by the ANSI
4482:000 | DONE cmt | na 16 16 |        |             |         ; standard CS-PICK and CS-ROLL words at a later date
4483:000 | DONE dir | na 16 16 | 00731f | (37 bytes)  |         .byte 3a, 20, 28, 20, 5b, 63, 68, 61, 72, 5d, 20, 29, 20, (...) ( "parens"
4483:000 | DONE dir | na 16 16 |        |             |                 3a 20 28 20 5b 63 68 61  --  :   (   [ c h a
4483:000 | DONE dir | na 16 16 |        |             |                 72 5d 20 29 20 70 61 72  --  r ]   )   p a r
4483:000 | DONE dir | na 16 16 |        |             |                 73 65 20 32 64 72 6f 70  --  s e   2 d r o p
4483:000 | DONE dir | na 16 16 |        |             |                 20 3b 20 69 6d 6d 65 64  --    ;   i m m e d
4483:000 | DONE dir | na 16 16 |        |             |                 69 61 74 65 20           --  i a t e  
4484:000 | DONE dir | na 16 16 | 007344 | (37 bytes)  |         .byte 3a, 20, 2e, 28, 20, 5b, 63, 68, 61, 72, 5d, 20, 29, (...) .( "dotparens"
4484:000 | DONE dir | na 16 16 |        |             |                 3a 20 2e 28 20 5b 63 68  --  :   . (   [ c h
4484:000 | DONE dir | na 16 16 |        |             |                 61 72 5d 20 29 20 70 61  --  a r ]   )   p a
4484:000 | DONE dir | na 16 16 |        |             |                 72 73 65 20 74 79 70 65  --  r s e   t y p e
4484:000 | DONE dir | na 16 16 |        |             |                 20 3b 20 69 6d 6d 65 64  --    ;   i m m e d
4484:000 | DONE dir | na 16 16 |        |             |                 69 61 74 65 20           --  i a t e  
4485:000 | DONE dir | na 16 16 | 007369 | (56 bytes)  |         .byte 3a, 20, 69, 66, 20, 70, 6f, 73, 74, 70, 6f, 6e, 65, (...) IF
4485:000 | DONE dir | na 16 16 |        |             |                 3a 20 69 66 20 70 6f 73  --  :   i f   p o s
4485:000 | DONE dir | na 16 16 |        |             |                 74 70 6f 6e 65 20 30 62  --  t p o n e   0 b
4485:000 | DONE dir | na 16 16 |        |             |                 72 61 6e 63 68 20 68 65  --  r a n c h   h e
4485:000 | DONE dir | na 16 16 |        |             |                 72 65 20 30 20 2c 20 3b  --  r e   0   ,   ;
4485:000 | DONE dir | na 16 16 |        |             |                 20 69 6d 6d 65 64 69 61  --    i m m e d i a
4485:000 | DONE dir | na 16 16 |        |             |                 74 65 20 63 6f 6d 70 69  --  t e   c o m p i
4485:000 | DONE dir | na 16 16 |        |             |                 6c 65 2d 6f 6e 6c 79 20  --  l e - o n l y  
4485:000 | DONE dir | na 16 16 |        |             |                                          -- 
4486:000 | DONE dir | na 16 16 | 0073a1 | (44 bytes)  |         .byte 3a, 20, 74, 68, 65, 6e, 20, 68, 65, 72, 65, 20, 73, (...) THEN
4486:000 | DONE dir | na 16 16 |        |             |                 3a 20 74 68 65 6e 20 68  --  :   t h e n   h
4486:000 | DONE dir | na 16 16 |        |             |                 65 72 65 20 73 77 61 70  --  e r e   s w a p
4486:000 | DONE dir | na 16 16 |        |             |                 20 21 20 3b 20 69 6d 6d  --    !   ;   i m m
4486:000 | DONE dir | na 16 16 |        |             |                 65 64 69 61 74 65 20 63  --  e d i a t e   c
4486:000 | DONE dir | na 16 16 |        |             |                 6f 6d 70 69 6c 65 2d 6f  --  o m p i l e - o
4486:000 | DONE dir | na 16 16 |        |             |                 6e 6c 79 20              --  n l y  
4487:000 | DONE dir | na 16 16 | 0073cd | (68 bytes)  |         .byte 3a, 20, 65, 6c, 73, 65, 20, 70, 6f, 73, 74, 70, 6f, (...) ELSE
4487:000 | DONE dir | na 16 16 |        |             |                 3a 20 65 6c 73 65 20 70  --  :   e l s e   p
4487:000 | DONE dir | na 16 16 |        |             |                 6f 73 74 70 6f 6e 65 20  --  o s t p o n e  
4487:000 | DONE dir | na 16 16 |        |             |                 62 72 61 6e 63 68 20 68  --  b r a n c h   h
4487:000 | DONE dir | na 16 16 |        |             |                 65 72 65 20 30 20 2c 20  --  e r e   0   ,  
4487:000 | DONE dir | na 16 16 |        |             |                 68 65 72 65 20 72 6f 74  --  h e r e   r o t
4487:000 | DONE dir | na 16 16 |        |             |                 20 21 20 3b 20 69 6d 6d  --    !   ;   i m m
4487:000 | DONE dir | na 16 16 |        |             |                 65 64 69 61 74 65 20 63  --  e d i a t e   c
4487:000 | DONE dir | na 16 16 |        |             |                 6f 6d 70 69 6c 65 2d 6f  --  o m p i l e - o
4487:000 | DONE dir | na 16 16 |        |             |                 6e 6c 79 20              --  n l y  
4488:000 | DONE dir | na 16 16 | 007411 | (61 bytes)  |         .byte 3a, 20, 72, 65, 70, 65, 61, 74, 20, 70, 6f, 73, 74, (...) REPEAT
4488:000 | DONE dir | na 16 16 |        |             |                 3a 20 72 65 70 65 61 74  --  :   r e p e a t
4488:000 | DONE dir | na 16 16 |        |             |                 20 70 6f 73 74 70 6f 6e  --    p o s t p o n
4488:000 | DONE dir | na 16 16 |        |             |                 65 20 61 67 61 69 6e 20  --  e   a g a i n  
4488:000 | DONE dir | na 16 16 |        |             |                 68 65 72 65 20 73 77 61  --  h e r e   s w a
4488:000 | DONE dir | na 16 16 |        |             |                 70 20 21 20 3b 20 69 6d  --  p   !   ;   i m
4488:000 | DONE dir | na 16 16 |        |             |                 6d 65 64 69 61 74 65 20  --  m e d i a t e  
4488:000 | DONE dir | na 16 16 |        |             |                 63 6f 6d 70 69 6c 65 2d  --  c o m p i l e -
4488:000 | DONE dir | na 16 16 |        |             |                 6f 6e 6c 79 20           --  o n l y  
4489:000 | DONE dir | na 16 16 | 00744e | (52 bytes)  |         .byte 3a, 20, 75, 6e, 74, 69, 6c, 20, 70, 6f, 73, 74, 70, (...) UNTIL
4489:000 | DONE dir | na 16 16 |        |             |                 3a 20 75 6e 74 69 6c 20  --  :   u n t i l  
4489:000 | DONE dir | na 16 16 |        |             |                 70 6f 73 74 70 6f 6e 65  --  p o s t p o n e
4489:000 | DONE dir | na 16 16 |        |             |                 20 30 62 72 61 6e 63 68  --    0 b r a n c h
4489:000 | DONE dir | na 16 16 |        |             |                 20 2c 20 3b 20 69 6d 6d  --    ,   ;   i m m
4489:000 | DONE dir | na 16 16 |        |             |                 65 64 69 61 74 65 20 63  --  e d i a t e   c
4489:000 | DONE dir | na 16 16 |        |             |                 6f 6d 70 69 6c 65 2d 6f  --  o m p i l e - o
4489:000 | DONE dir | na 16 16 |        |             |                 6e 6c 79 20              --  n l y  
4490:000 | DONE dir | na 16 16 | 007482 | (64 bytes)  |         .byte 3a, 20, 77, 68, 69, 6c, 65, 20, 70, 6f, 73, 74, 70, (...) WHILE
4490:000 | DONE dir | na 16 16 |        |             |                 3a 20 77 68 69 6c 65 20  --  :   w h i l e  
4490:000 | DONE dir | na 16 16 |        |             |                 70 6f 73 74 70 6f 6e 65  --  p o s t p o n e
4490:000 | DONE dir | na 16 16 |        |             |                 20 30 62 72 61 6e 63 68  --    0 b r a n c h
4490:000 | DONE dir | na 16 16 |        |             |                 20 68 65 72 65 20 30 20  --    h e r e   0  
4490:000 | DONE dir | na 16 16 |        |             |                 2c 20 73 77 61 70 20 3b  --  ,   s w a p   ;
4490:000 | DONE dir | na 16 16 |        |             |                 20 69 6d 6d 65 64 69 61  --    i m m e d i a
4490:000 | DONE dir | na 16 16 |        |             |                 74 65 20 63 6f 6d 70 69  --  t e   c o m p i
4490:000 | DONE dir | na 16 16 |        |             |                 6c 65 2d 6f 6e 6c 79 20  --  l e - o n l y  
4490:000 | DONE dir | na 16 16 |        |             |                                          -- 
4491:000 | DONE wsp | na 16 16 |        |             |
4492:000 | DONE cmt | na 16 16 |        |             |         ; DEFER and friends. Code taken from ANSI Forth specifications. Many of
4493:000 | DONE cmt | na 16 16 |        |             |         ; these will be moved to assembler code in due course
4494:000 | DONE cmt | na 16 16 |        |             |         ; .byte ": defer create ['] abort , does> @ execute ; "
4495:000 | DONE cmt | na 16 16 |        |             |         ; .byte ": defer! >body ! ; "     ; TODO rewrite in assembler
4496:000 | DONE cmt | na 16 16 |        |             |         ; .byte ": defer@ >body @ ; "     ; TODO rewrite in assembler
4497:000 | DONE cmt | na 16 16 |        |             |         ; .byte ": is state @ if postpone ['] postpone defer! else "
4498:000 | DONE cmt | na 16 16 |        |             |         ; .byte "defer! then ; immediate "
4499:000 | DONE cmt | na 16 16 |        |             |         ; .byte ": action-of state @ if postpone ['] postpone defer@ else "
4500:000 | DONE cmt | na 16 16 |        |             |         ; .byte "defer@ then ; immediate "
4501:000 | DONE wsp | na 16 16 |        |             |
4502:000 | DONE cmt | na 16 16 |        |             |         ; High level math definitions. The should be moved to actual 65816 code
4503:000 | DONE cmt | na 16 16 |        |             |         ; for speed at some point. Note we use SM/REM instead of FM/MOD for most
4504:000 | DONE cmt | na 16 16 |        |             |         ; stuff. Definitions for SM/REM and FM/MOD taken von Gforth
4505:000 | DONE cmt | na 16 16 |        |             |         ; sources, see
4506:000 | DONE cmt | na 16 16 |        |             |         ; https://groups.google.com/forum/#!topic/comp.lang.forth/_bx4dJFb9R0
4507:000 | DONE dir | na 16 16 | 0074c2 | (59 bytes)  |         .byte 3a, 20, 73, 6d, 2f, 72, 65, 6d, 20, 6f, 76, 65, 72, (...) 
4507:000 | DONE dir | na 16 16 |        |             |                 3a 20 73 6d 2f 72 65 6d  --  :   s m / r e m
4507:000 | DONE dir | na 16 16 |        |             |                 20 6f 76 65 72 20 3e 72  --    o v e r   > r
4507:000 | DONE dir | na 16 16 |        |             |                 20 64 75 70 20 3e 72 20  --    d u p   > r  
4507:000 | DONE dir | na 16 16 |        |             |                 61 62 73 20 2d 72 6f 74  --  a b s   - r o t
4507:000 | DONE dir | na 16 16 |        |             |                 20 64 61 62 73 20 72 6f  --    d a b s   r o
4507:000 | DONE dir | na 16 16 |        |             |                 74 20 75 6d 2f 6d 6f 64  --  t   u m / m o d
4507:000 | DONE dir | na 16 16 |        |             |                 20 72 3e 20 72 40 20 78  --    r >   r @   x
4507:000 | DONE dir | na 16 16 |        |             |                 6f 72 20                 --  o r  
4508:000 | DONE dir | na 16 16 | 0074fd | (51 bytes)  |         .byte 30, 3c, 20, 69, 66, 20, 6e, 65, 67, 61, 74, 65, 20, (...) 
4508:000 | DONE dir | na 16 16 |        |             |                 30 3c 20 69 66 20 6e 65  --  0 <   i f   n e
4508:000 | DONE dir | na 16 16 |        |             |                 67 61 74 65 20 74 68 65  --  g a t e   t h e
4508:000 | DONE dir | na 16 16 |        |             |                 6e 20 72 3e 20 30 3c 20  --  n   r >   0 <  
4508:000 | DONE dir | na 16 16 |        |             |                 69 66 20 73 77 61 70 20  --  i f   s w a p  
4508:000 | DONE dir | na 16 16 |        |             |                 6e 65 67 61 74 65 20 73  --  n e g a t e   s
4508:000 | DONE dir | na 16 16 |        |             |                 77 61 70 20 74 68 65 6e  --  w a p   t h e n
4508:000 | DONE dir | na 16 16 |        |             |                 20 3b 20                 --    ;  
4509:000 | DONE dir | na 16 16 | 007530 | (57 bytes)  |         .byte 3a, 20, 66, 6d, 2f, 6d, 6f, 64, 20, 64, 75, 70, 20, (...) 
4509:000 | DONE dir | na 16 16 |        |             |                 3a 20 66 6d 2f 6d 6f 64  --  :   f m / m o d
4509:000 | DONE dir | na 16 16 |        |             |                 20 64 75 70 20 3e 72 20  --    d u p   > r  
4509:000 | DONE dir | na 16 16 |        |             |                 64 75 70 20 30 3c 20 69  --  d u p   0 <   i
4509:000 | DONE dir | na 16 16 |        |             |                 66 20 6e 65 67 61 74 65  --  f   n e g a t e
4509:000 | DONE dir | na 16 16 |        |             |                 20 3e 72 20 64 6e 65 67  --    > r   d n e g
4509:000 | DONE dir | na 16 16 |        |             |                 61 74 65 20 72 3e 20 74  --  a t e   r >   t
4509:000 | DONE dir | na 16 16 |        |             |                 68 65 6e 20 6f 76 65 72  --  h e n   o v e r
4509:000 | DONE dir | na 16 16 |        |             |                 20                       --   
4510:000 | DONE dir | na 16 16 | 007569 | (63 bytes)  |         .byte 30, 3c, 20, 69, 66, 20, 74, 75, 63, 6b, 20, 2b, 20, (...) 
4510:000 | DONE dir | na 16 16 |        |             |                 30 3c 20 69 66 20 74 75  --  0 <   i f   t u
4510:000 | DONE dir | na 16 16 |        |             |                 63 6b 20 2b 20 73 77 61  --  c k   +   s w a
4510:000 | DONE dir | na 16 16 |        |             |                 70 20 74 68 65 6e 20 75  --  p   t h e n   u
4510:000 | DONE dir | na 16 16 |        |             |                 6d 2f 6d 6f 64 20 72 3e  --  m / m o d   r >
4510:000 | DONE dir | na 16 16 |        |             |                 20 30 3c 20 69 66 20 73  --    0 <   i f   s
4510:000 | DONE dir | na 16 16 |        |             |                 77 61 70 20 6e 65 67 61  --  w a p   n e g a
4510:000 | DONE dir | na 16 16 |        |             |                 74 65 20 73 77 61 70 20  --  t e   s w a p  
4510:000 | DONE dir | na 16 16 |        |             |                 74 68 65 6e 20 3b 20     --  t h e n   ;  
4511:000 | DONE dir | na 16 16 | 0075a8 | (33 bytes)  |         .byte 3a, 20, 2f, 20, 3e, 72, 20, 73, 3e, 64, 20, 72, 3e, (...) 
4511:000 | DONE dir | na 16 16 |        |             |                 3a 20 2f 20 3e 72 20 73  --  :   /   > r   s
4511:000 | DONE dir | na 16 16 |        |             |                 3e 64 20 72 3e 20 73 6d  --  > d   r >   s m
4511:000 | DONE dir | na 16 16 |        |             |                 2f 72 65 6d 20 73 77 61  --  / r e m   s w a
4511:000 | DONE dir | na 16 16 |        |             |                 70 20 64 72 6f 70 20 3b  --  p   d r o p   ;
4511:000 | DONE dir | na 16 16 |        |             |                 20                       --   
4512:000 | DONE dir | na 16 16 | 0075c9 | (26 bytes)  |         .byte 3a, 20, 2f, 6d, 6f, 64, 20, 3e, 72, 20, 73, 3e, 64, (...) 
4512:000 | DONE dir | na 16 16 |        |             |                 3a 20 2f 6d 6f 64 20 3e  --  :   / m o d   >
4512:000 | DONE dir | na 16 16 |        |             |                 72 20 73 3e 64 20 72 3e  --  r   s > d   r >
4512:000 | DONE dir | na 16 16 |        |             |                 20 73 6d 2f 72 65 6d 20  --    s m / r e m  
4512:000 | DONE dir | na 16 16 |        |             |                 3b 20                    --  ;  
4513:000 | DONE dir | na 16 16 | 0075e3 | (33 bytes)  |         .byte 3a, 20, 2a, 2f, 20, 3e, 72, 20, 6d, 2a, 20, 72, 3e, (...) 
4513:000 | DONE dir | na 16 16 |        |             |                 3a 20 2a 2f 20 3e 72 20  --  :   * /   > r  
4513:000 | DONE dir | na 16 16 |        |             |                 6d 2a 20 72 3e 20 73 6d  --  m *   r >   s m
4513:000 | DONE dir | na 16 16 |        |             |                 2f 72 65 6d 20 73 77 61  --  / r e m   s w a
4513:000 | DONE dir | na 16 16 |        |             |                 70 20 64 72 6f 70 20 3b  --  p   d r o p   ;
4513:000 | DONE dir | na 16 16 |        |             |                 20                       --   
4514:000 | DONE dir | na 16 16 | 007604 | (26 bytes)  |         .byte 3a, 20, 2a, 2f, 6d, 6f, 64, 20, 3e, 72, 20, 6d, 2a, (...) 
4514:000 | DONE dir | na 16 16 |        |             |                 3a 20 2a 2f 6d 6f 64 20  --  :   * / m o d  
4514:000 | DONE dir | na 16 16 |        |             |                 3e 72 20 6d 2a 20 72 3e  --  > r   m *   r >
4514:000 | DONE dir | na 16 16 |        |             |                 20 73 6d 2f 72 65 6d 20  --    s m / r e m  
4514:000 | DONE dir | na 16 16 |        |             |                 3b 20                    --  ;  
4515:000 | DONE wsp | na 16 16 |        |             |
4516:000 | DONE cmt | na 16 16 |        |             |         ; Output definitions. Since these usually involve the user, and humans
4517:000 | DONE cmt | na 16 16 |        |             |         ; are slow, these can stay high-level for the moment. Based on
4518:000 | DONE cmt | na 16 16 |        |             |         ; https://github.com/philburk/pforth/blob/master/fth/numberio.fth
4519:000 | DONE dir | na 16 16 | 00761e | (29 bytes)  |         .byte 3a, 20, 75, 2e, 20, 30, 20, 3c, 23, 20, 23, 73, 20, (...) TODO rewrite in assembler
4519:000 | DONE dir | na 16 16 |        |             |                 3a 20 75 2e 20 30 20 3c  --  :   u .   0   <
4519:000 | DONE dir | na 16 16 |        |             |                 23 20 23 73 20 23 3e 20  --  #   # s   # >  
4519:000 | DONE dir | na 16 16 |        |             |                 74 79 70 65 20 73 70 61  --  t y p e   s p a
4519:000 | DONE dir | na 16 16 |        |             |                 63 65 20 3b 20           --  c e   ;  
4520:000 | DONE dir | na 16 16 | 00763b | (44 bytes)  |         .byte 3a, 20, 75, 2e, 72, 20, 3e, 72, 20, 30, 20, 3c, 23, (...) 
4520:000 | DONE dir | na 16 16 |        |             |                 3a 20 75 2e 72 20 3e 72  --  :   u . r   > r
4520:000 | DONE dir | na 16 16 |        |             |                 20 30 20 3c 23 20 23 73  --    0   < #   # s
4520:000 | DONE dir | na 16 16 |        |             |                 20 23 3e 20 72 3e 20 6f  --    # >   r >   o
4520:000 | DONE dir | na 16 16 |        |             |                 76 65 72 20 2d 20 73 70  --  v e r   -   s p
4520:000 | DONE dir | na 16 16 |        |             |                 61 63 65 73 20 74 79 70  --  a c e s   t y p
4520:000 | DONE dir | na 16 16 |        |             |                 65 20 3b 20              --  e   ;  
4521:000 | DONE dir | na 16 16 | 007667 | (60 bytes)  |         .byte 3a, 20, 2e, 72, 20, 3e, 72, 20, 64, 75, 70, 20, 61, (...) 
4521:000 | DONE dir | na 16 16 |        |             |                 3a 20 2e 72 20 3e 72 20  --  :   . r   > r  
4521:000 | DONE dir | na 16 16 |        |             |                 64 75 70 20 61 62 73 20  --  d u p   a b s  
4521:000 | DONE dir | na 16 16 |        |             |                 30 20 3c 23 20 23 73 20  --  0   < #   # s  
4521:000 | DONE dir | na 16 16 |        |             |                 72 6f 74 20 73 69 67 6e  --  r o t   s i g n
4521:000 | DONE dir | na 16 16 |        |             |                 20 23 3e 20 72 3e 20 6f  --    # >   r >   o
4521:000 | DONE dir | na 16 16 |        |             |                 76 65 72 20 2d 20 73 70  --  v e r   -   s p
4521:000 | DONE dir | na 16 16 |        |             |                 61 63 65 73 20 74 79 70  --  a c e s   t y p
4521:000 | DONE dir | na 16 16 |        |             |                 65 20 3b 20              --  e   ;  
4522:000 | DONE dir | na 16 16 | 0076a3 | (28 bytes)  |         .byte 3a, 20, 75, 64, 2e, 20, 3c, 23, 20, 23, 73, 20, 23, (...) 
4522:000 | DONE dir | na 16 16 |        |             |                 3a 20 75 64 2e 20 3c 23  --  :   u d .   < #
4522:000 | DONE dir | na 16 16 |        |             |                 20 23 73 20 23 3e 20 74  --    # s   # >   t
4522:000 | DONE dir | na 16 16 |        |             |                 79 70 65 20 73 70 61 63  --  y p e   s p a c
4522:000 | DONE dir | na 16 16 |        |             |                 65 20 3b 20              --  e   ;  
4523:000 | DONE dir | na 16 16 | 0076bf | (43 bytes)  |         .byte 3a, 20, 75, 64, 2e, 72, 20, 3e, 72, 20, 3c, 23, 20, (...) 
4523:000 | DONE dir | na 16 16 |        |             |                 3a 20 75 64 2e 72 20 3e  --  :   u d . r   >
4523:000 | DONE dir | na 16 16 |        |             |                 72 20 3c 23 20 23 73 20  --  r   < #   # s  
4523:000 | DONE dir | na 16 16 |        |             |                 23 3e 20 72 3e 20 6f 76  --  # >   r >   o v
4523:000 | DONE dir | na 16 16 |        |             |                 65 72 20 2d 20 73 70 61  --  e r   -   s p a
4523:000 | DONE dir | na 16 16 |        |             |                 63 65 73 20 74 79 70 65  --  c e s   t y p e
4523:000 | DONE dir | na 16 16 |        |             |                 20 3b 20                 --    ;  
4524:000 | DONE dir | na 16 16 | 0076ea | (46 bytes)  |         .byte 3a, 20, 64, 2e, 20, 74, 75, 63, 6b, 20, 64, 61, 62, (...) 
4524:000 | DONE dir | na 16 16 |        |             |                 3a 20 64 2e 20 74 75 63  --  :   d .   t u c
4524:000 | DONE dir | na 16 16 |        |             |                 6b 20 64 61 62 73 20 3c  --  k   d a b s   <
4524:000 | DONE dir | na 16 16 |        |             |                 23 20 23 73 20 72 6f 74  --  #   # s   r o t
4524:000 | DONE dir | na 16 16 |        |             |                 20 73 69 67 6e 20 23 3e  --    s i g n   # >
4524:000 | DONE dir | na 16 16 |        |             |                 20 74 79 70 65 20 73 70  --    t y p e   s p
4524:000 | DONE dir | na 16 16 |        |             |                 61 63 65 20 3b 20        --  a c e   ;  
4525:000 | DONE dir | na 16 16 | 007718 | (61 bytes)  |         .byte 3a, 20, 64, 2e, 72, 20, 3e, 72, 20, 74, 75, 63, 6b, (...) 
4525:000 | DONE dir | na 16 16 |        |             |                 3a 20 64 2e 72 20 3e 72  --  :   d . r   > r
4525:000 | DONE dir | na 16 16 |        |             |                 20 74 75 63 6b 20 64 61  --    t u c k   d a
4525:000 | DONE dir | na 16 16 |        |             |                 62 73 20 3c 23 20 23 73  --  b s   < #   # s
4525:000 | DONE dir | na 16 16 |        |             |                 20 72 6f 74 20 73 69 67  --    r o t   s i g
4525:000 | DONE dir | na 16 16 |        |             |                 6e 20 23 3e 20 72 3e 20  --  n   # >   r >  
4525:000 | DONE dir | na 16 16 |        |             |                 6f 76 65 72 20 2d 20 73  --  o v e r   -   s
4525:000 | DONE dir | na 16 16 |        |             |                 70 61 63 65 73 20 74 79  --  p a c e s   t y
4525:000 | DONE dir | na 16 16 |        |             |                 70 65 20 3b 20           --  p e   ;  
4526:000 | DONE cmt | na 16 16 |        |             | ;       .byte ": . dup abs 0 <# #s rot sign #> type space ; "
4527:000 | DONE wsp | na 16 16 |        |             |
4528:000 | DONE cmt | na 16 16 |        |             |         ; Splash strings. We leave these as high-level words because they are
4529:000 | DONE cmt | na 16 16 |        |             |         ; generated at the end of the boot process and signal that the other
4530:000 | DONE cmt | na 16 16 |        |             |         ; high-level definitions worked (or at least didn't crash)
4531:000 | DONE dir | na 16 16 | 007755 | (35 bytes)  |         .byte 2e, 28, 20, 4c, 69, 61, 72, 61, 20, 46, 6f, 72, 74, (...) 
4531:000 | DONE dir | na 16 16 |        |             |                 2e 28 20 4c 69 61 72 61  --  . (   L i a r a
4531:000 | DONE dir | na 16 16 |        |             |                 20 46 6f 72 74 68 20 66  --    F o r t h   f
4531:000 | DONE dir | na 16 16 |        |             |                 6f 72 20 74 68 65 20 57  --  o r   t h e   W
4531:000 | DONE dir | na 16 16 |        |             |                 36 35 43 32 36 35 53 58  --  6 5 C 2 6 5 S X
4531:000 | DONE dir | na 16 16 |        |             |                 42 20 29                 --  B   )
4532:000 | DONE dir | na 16 16 | 007778 | (37 bytes)  |         .byte 63, 72, 20, 2e, 28, 20, 56, 65, 72, 73, 69, 6f, 6e, (...) 
4532:000 | DONE dir | na 16 16 |        |             |                 63 72 20 2e 28 20 56 65  --  c r   . (   V e
4532:000 | DONE dir | na 16 16 |        |             |                 72 73 69 6f 6e 20 50 52  --  r s i o n   P R
4532:000 | DONE dir | na 16 16 |        |             |                 45 2d 41 4c 50 48 41 20  --  E - A L P H A  
4532:000 | DONE dir | na 16 16 |        |             |                 32 36 2e 20 46 65 62 20  --  2 6 .   F e b  
4532:000 | DONE dir | na 16 16 |        |             |                 32 30 31 37 29           --  2 0 1 7 )
4533:000 | DONE dir | na 16 16 | 00779d | (51 bytes)  |         .byte 63, 72, 20, 2e, 28, 20, 53, 63, 6f, 74, 20, 57, 2e, (...) 
4533:000 | DONE dir | na 16 16 |        |             |                 63 72 20 2e 28 20 53 63  --  c r   . (   S c
4533:000 | DONE dir | na 16 16 |        |             |                 6f 74 20 57 2e 20 53 74  --  o t   W .   S t
4533:000 | DONE dir | na 16 16 |        |             |                 65 76 65 6e 73 6f 6e 20  --  e v e n s o n  
4533:000 | DONE dir | na 16 16 |        |             |                 3c 73 63 6f 74 2e 73 74  --  < s c o t . s t
4533:000 | DONE dir | na 16 16 |        |             |                 65 76 65 6e 73 6f 6e 40  --  e v e n s o n @
4533:000 | DONE dir | na 16 16 |        |             |                 67 6d 61 69 6c 2e 63 6f  --  g m a i l . c o
4533:000 | DONE dir | na 16 16 |        |             |                 6d 3e 29                 --  m > )
4534:000 | DONE dir | na 16 16 | 0077d0 | (52 bytes)  |         .byte 63, 72, 20, 2e, 28, 20, 4c, 69, 61, 72, 61, 20, 46, (...) 
4534:000 | DONE dir | na 16 16 |        |             |                 63 72 20 2e 28 20 4c 69  --  c r   . (   L i
4534:000 | DONE dir | na 16 16 |        |             |                 61 72 61 20 46 6f 72 74  --  a r a   F o r t
4534:000 | DONE dir | na 16 16 |        |             |                 68 20 63 6f 6d 65 73 20  --  h   c o m e s  
4534:000 | DONE dir | na 16 16 |        |             |                 77 69 74 68 20 61 62 73  --  w i t h   a b s
4534:000 | DONE dir | na 16 16 |        |             |                 6f 6c 75 74 65 6c 79 20  --  o l u t e l y  
4534:000 | DONE dir | na 16 16 |        |             |                 4e 4f 20 57 41 52 52 41  --  N O   W A R R A
4534:000 | DONE dir | na 16 16 |        |             |                 4e 54 59 29              --  N T Y )
4535:000 | DONE dir | na 16 16 | 007804 | (28 bytes)  |         .byte 63, 72, 20, 2e, 28, 20, 54, 79, 70, 65, 20, 27, 62, (...) 
4535:000 | DONE dir | na 16 16 |        |             |                 63 72 20 2e 28 20 54 79  --  c r   . (   T y
4535:000 | DONE dir | na 16 16 |        |             |                 70 65 20 27 62 79 65 27  --  p e   ' b y e '
4535:000 | DONE dir | na 16 16 |        |             |                 20 74 6f 20 65 78 69 74  --    t o   e x i t
4535:000 | DONE dir | na 16 16 |        |             |                 29 20 63 72              --  )   c r
4536:000 | DONE lbl | na 16 16 | 007820 |             | hi-end                               
4537:000 | DONE wsp | na 16 16 |        |             |
4538:000 | DONE wsp | na 16 16 |        |             |
4539:000 | DONE cmt | na 16 16 |        |             | ; ===================================================================
4540:000 | DONE cmt | na 16 16 |        |             | ; BOTTOM INCLUDES
4541:000 | DONE wsp | na 16 16 |        |             |
4542:000 | DONE cmt | na 16 16 |        |             | ; List of Strings for Liara Forth for the W65C265SXB
4542:001 | DONE cmt | na 16 16 |        |             | ; Scot W. Stevenson <scot.stevenson@gmail.com>
4542:002 | DONE cmt | na 16 16 |        |             | ; First version: 01. Apr 2016
4542:003 | DONE cmt | na 16 16 |        |             | ; This version:  21. Feb 2017
4542:004 | DONE wsp | na 16 16 |        |             |
4542:005 | DONE cmt | na 16 16 |        |             | ; This file is included by liaraforth.tasm
4542:006 | DONE wsp | na 16 16 |        |             |
4542:007 | DONE cmt | na 16 16 |        |             | ; ===================================================================
4542:008 | DONE cmt | na 16 16 |        |             | ; GENERAL
4542:009 | DONE wsp | na 16 16 |        |             |
4542:010 | DONE cmt | na 16 16 |        |             | ; All general strings must be zero-terminated, names start with "s_"
4542:011 | DONE cmt | na 16 16 |        |             | ; TODO see if "ok" needs trailing space. The printstring routine adds the EOL
4542:012 | DONE cmt | na 16 16 |        |             | ; character
4542:013 | DONE wsp | na 16 16 |        |             |
4542:014 | DONE lbl | na 16 16 | 007820 |             | s_ok                                 
4542:015 | DONE dir | na 16 16 | 007820 | (4 bytes)   |         .byte 20, 6f, 6b, 0          note space at beginning
4542:015 | DONE dir | na 16 16 |        |             |                 20 6f 6b 00              --    o k .
4542:016 | DONE lbl | na 16 16 | 007824 |             | s_compiled                           
4542:017 | DONE dir | na 16 16 | 007824 | (10 bytes)  |         .byte 20, 63, 6f, 6d, 70, 69, 6c, 65, 64, 0 
4542:017 | DONE dir | na 16 16 |        |             |                 20 63 6f 6d 70 69 6c 65  --    c o m p i l e
4542:017 | DONE dir | na 16 16 |        |             |                 64 00                    --  d .
4542:018 | DONE wsp | na 16 16 |        |             |
4542:019 | DONE wsp | na 16 16 |        |             |
4542:020 | DONE cmt | na 16 16 |        |             | ; ===================================================================
4542:021 | DONE cmt | na 16 16 |        |             | ; ERROR STRINGS
4542:022 | DONE wsp | na 16 16 |        |             |
4542:023 | DONE cmt | na 16 16 |        |             | ; All error strings must be zero-terminated, names start with "es_"
4542:024 | DONE wsp | na 16 16 |        |             |
4542:025 | DONE lbl | na 16 16 | 00782e |             | es_allot                             
4542:026 | DONE dir | na 16 16 | 00782e | (20 bytes)  |         .byte 41, 4c, 4c, 4f, 54, 20, 6f, 75, 74, 20, 6f, 66, 20, (...) 
4542:026 | DONE dir | na 16 16 |        |             |                 41 4c 4c 4f 54 20 6f 75  --  A L L O T   o u
4542:026 | DONE dir | na 16 16 |        |             |                 74 20 6f 66 20 62 6f 75  --  t   o f   b o u
4542:026 | DONE dir | na 16 16 |        |             |                 6e 64 73 00              --  n d s .
4542:027 | DONE lbl | na 16 16 | 007842 |             | es_channel                           
4542:028 | DONE dir | na 16 16 | 007842 | (26 bytes)  |         .byte 41, 63, 63, 65, 73, 73, 69, 6e, 67, 20, 75, 6e, 6b, (...) 
4542:028 | DONE dir | na 16 16 |        |             |                 41 63 63 65 73 73 69 6e  --  A c c e s s i n
4542:028 | DONE dir | na 16 16 |        |             |                 67 20 75 6e 6b 6e 6f 77  --  g   u n k n o w
4542:028 | DONE dir | na 16 16 |        |             |                 6e 20 63 68 61 6e 6e 65  --  n   c h a n n e
4542:028 | DONE dir | na 16 16 |        |             |                 6c 00                    --  l .
4542:029 | DONE lbl | na 16 16 | 00785c |             | es_componly                          
4542:030 | DONE dir | na 16 16 | 00785c | (33 bytes)  |         .byte 49, 6e, 74, 65, 72, 70, 72, 65, 74, 69, 6e, 67, 20, (...) 
4542:030 | DONE dir | na 16 16 |        |             |                 49 6e 74 65 72 70 72 65  --  I n t e r p r e
4542:030 | DONE dir | na 16 16 |        |             |                 74 69 6e 67 20 61 20 63  --  t i n g   a   c
4542:030 | DONE dir | na 16 16 |        |             |                 6f 6d 70 69 6c 65 2d 6f  --  o m p i l e - o
4542:030 | DONE dir | na 16 16 |        |             |                 6e 6c 79 20 77 6f 72 64  --  n l y   w o r d
4542:030 | DONE dir | na 16 16 |        |             |                 00                       --  .
4542:031 | DONE lbl | na 16 16 | 00787d |             | es_defer                             
4542:032 | DONE dir | na 16 16 | 00787d | (29 bytes)  |         .byte 44, 45, 46, 45, 52, 65, 64, 20, 77, 6f, 72, 64, 20, (...) 
4542:032 | DONE dir | na 16 16 |        |             |                 44 45 46 45 52 65 64 20  --  D E F E R e d  
4542:032 | DONE dir | na 16 16 |        |             |                 77 6f 72 64 20 6e 6f 74  --  w o r d   n o t
4542:032 | DONE dir | na 16 16 |        |             |                 20 64 65 66 69 6e 65 64  --    d e f i n e d
4542:032 | DONE dir | na 16 16 |        |             |                 20 79 65 74 00           --    y e t .
4542:033 | DONE lbl | na 16 16 | 00789a |             | es_divzero                           
4542:034 | DONE dir | na 16 16 | 00789a | (17 bytes)  |         .byte 44, 69, 76, 69, 73, 69, 6f, 6e, 20, 62, 79, 20, 7a, (...) 
4542:034 | DONE dir | na 16 16 |        |             |                 44 69 76 69 73 69 6f 6e  --  D i v i s i o n
4542:034 | DONE dir | na 16 16 |        |             |                 20 62 79 20 7a 65 72 6f  --    b y   z e r o
4542:034 | DONE dir | na 16 16 |        |             |                 00                       --  .
4542:035 | DONE lbl | na 16 16 | 0078ab |             | es_error                             
4542:036 | DONE dir | na 16 16 | 0078ab | (12 bytes)  |         .byte 3e, 3e, 3e, 45, 72, 72, 6f, 72, 3c, 3c, 3c, 0 
4542:036 | DONE dir | na 16 16 |        |             |                 3e 3e 3e 45 72 72 6f 72  --  > > > E r r o r
4542:036 | DONE dir | na 16 16 |        |             |                 3c 3c 3c 00              --  < < < .
4542:037 | DONE lbl | na 16 16 | 0078b7 |             | es_intonly                           
4542:038 | DONE dir | na 16 16 | 0078b7 | (22 bytes)  |         .byte 4e, 6f, 74, 20, 69, 6e, 20, 69, 6e, 74, 65, 72, 70, (...) 
4542:038 | DONE dir | na 16 16 |        |             |                 4e 6f 74 20 69 6e 20 69  --  N o t   i n   i
4542:038 | DONE dir | na 16 16 |        |             |                 6e 74 65 72 70 72 65 74  --  n t e r p r e t
4542:038 | DONE dir | na 16 16 |        |             |                 20 6d 6f 64 65 00        --    m o d e .
4542:039 | DONE lbl | na 16 16 | 0078cd |             | es_noname                            
4542:040 | DONE dir | na 16 16 | 0078cd | (16 bytes)  |         .byte 50, 61, 72, 73, 69, 6e, 67, 20, 66, 61, 69, 6c, 75, (...) 
4542:040 | DONE dir | na 16 16 |        |             |                 50 61 72 73 69 6e 67 20  --  P a r s i n g  
4542:040 | DONE dir | na 16 16 |        |             |                 66 61 69 6c 75 72 65 00  --  f a i l u r e .
4542:040 | DONE dir | na 16 16 |        |             |                                          -- 
4542:041 | DONE lbl | na 16 16 | 0078dd |             | es_radix                             
4542:042 | DONE dir | na 16 16 | 0078dd | (23 bytes)  |         .byte 44, 69, 67, 69, 74, 20, 6c, 61, 72, 67, 65, 72, 20, (...) 
4542:042 | DONE dir | na 16 16 |        |             |                 44 69 67 69 74 20 6c 61  --  D i g i t   l a
4542:042 | DONE dir | na 16 16 |        |             |                 72 67 65 72 20 74 68 61  --  r g e r   t h a
4542:042 | DONE dir | na 16 16 |        |             |                 6e 20 62 61 73 65 00     --  n   b a s e .
4542:043 | DONE lbl | na 16 16 | 0078f4 |             | es_refill1                           
4542:044 | DONE dir | na 16 16 | 0078f4 | (46 bytes)  |         .byte 51, 55, 49, 54, 20, 63, 6f, 75, 6c, 64, 20, 6e, 6f, (...) 
4542:044 | DONE dir | na 16 16 |        |             |                 51 55 49 54 20 63 6f 75  --  Q U I T   c o u
4542:044 | DONE dir | na 16 16 |        |             |                 6c 64 20 6e 6f 74 20 67  --  l d   n o t   g
4542:044 | DONE dir | na 16 16 |        |             |                 65 74 20 69 6e 70 75 74  --  e t   i n p u t
4542:044 | DONE dir | na 16 16 |        |             |                 20 28 52 45 46 49 4c 4c  --    ( R E F I L L
4542:044 | DONE dir | na 16 16 |        |             |                 20 72 65 74 75 72 6e 65  --    r e t u r n e
4542:044 | DONE dir | na 16 16 |        |             |                 64 20 2d 31 29 00        --  d   - 1 ) .
4542:045 | DONE lbl | na 16 16 | 007922 |             | es_refill2                           
4542:046 | DONE dir | na 16 16 | 007922 | (32 bytes)  |         .byte 49, 6c, 6c, 65, 67, 61, 6c, 20, 53, 4f, 55, 52, 43, (...) 
4542:046 | DONE dir | na 16 16 |        |             |                 49 6c 6c 65 67 61 6c 20  --  I l l e g a l  
4542:046 | DONE dir | na 16 16 |        |             |                 53 4f 55 52 43 45 2d 49  --  S O U R C E - I
4542:046 | DONE dir | na 16 16 |        |             |                 44 20 64 75 72 69 6e 67  --  D   d u r i n g
4542:046 | DONE dir | na 16 16 |        |             |                 20 52 45 46 49 4c 4c 00  --    R E F I L L .
4542:046 | DONE dir | na 16 16 |        |             |                                          -- 
4542:047 | DONE lbl | na 16 16 | 007942 |             | es_state                             
4542:048 | DONE dir | na 16 16 | 007942 | (24 bytes)  |         .byte 41, 6c, 72, 65, 61, 64, 79, 20, 69, 6e, 20, 63, 6f, (...) 
4542:048 | DONE dir | na 16 16 |        |             |                 41 6c 72 65 61 64 79 20  --  A l r e a d y  
4542:048 | DONE dir | na 16 16 |        |             |                 69 6e 20 63 6f 6d 70 69  --  i n   c o m p i
4542:048 | DONE dir | na 16 16 |        |             |                 6c 65 20 6d 6f 64 65 00  --  l e   m o d e .
4542:048 | DONE dir | na 16 16 |        |             |                                          -- 
4542:049 | DONE lbl | na 16 16 | 00795a |             | es_underflow                         
4542:050 | DONE dir | na 16 16 | 00795a | (16 bytes)  |         .byte 53, 74, 61, 63, 6b, 20, 75, 6e, 64, 65, 72, 66, 6c, (...) 
4542:050 | DONE dir | na 16 16 |        |             |                 53 74 61 63 6b 20 75 6e  --  S t a c k   u n
4542:050 | DONE dir | na 16 16 |        |             |                 64 65 72 66 6c 6f 77 00  --  d e r f l o w .
4542:050 | DONE dir | na 16 16 |        |             |                                          -- 
4542:051 | DONE lbl | na 16 16 | 00796a |             | es_syntax                            
4542:052 | DONE dir | na 16 16 | 00796a | (15 bytes)  |         .byte 55, 6e, 64, 65, 66, 69, 6e, 65, 64, 20, 77, 6f, 72, (...) 
4542:052 | DONE dir | na 16 16 |        |             |                 55 6e 64 65 66 69 6e 65  --  U n d e f i n e
4542:052 | DONE dir | na 16 16 |        |             |                 64 20 77 6f 72 64 00     --  d   w o r d .
4542:053 | DONE wsp | na 16 16 |        |             |
4542:054 | DONE wsp | na 16 16 |        |             |
4542:055 | DONE cmt | na 16 16 |        |             | ; ===================================================================
4542:056 | DONE cmt | na 16 16 |        |             | ; ANSI VT-100 SEQUENCES
4542:057 | DONE wsp | na 16 16 |        |             |
4542:058 | DONE lbl | na 16 16 | 007979 |             | vt100_page                           
4542:059 | DONE dir | na 16 16 | 007979 | (5 bytes)   |         .byte AscESC, 5b, 32, 4a, 0  clear screen
4542:059 | DONE dir | na 16 16 |        |             |                 1b 5b 32 4a 00           --  . [ 2 J .
4542:060 | DONE lbl | na 16 16 | 00797e |             | vt100_home                           
4542:061 | DONE dir | na 16 16 | 00797e | (4 bytes)   |         .byte AscESC, 5b, 48, 0      cursor home
4542:061 | DONE dir | na 16 16 |        |             |                 1b 5b 48 00              --  . [ H .
4542:062 | DONE wsp | na 16 16 |        |             |
4542:063 | DONE wsp | na 16 16 |        |             |
4542:064 | DONE cmt | na 16 16 |        |             | ; ===================================================================
4542:065 | DONE cmt | na 16 16 |        |             | ; TESTING STRINGS
4542:066 | DONE wsp | na 16 16 |        |             |
4542:067 | DONE cmt | na 16 16 |        |             | ; These strings are only used during testing and are removed as Liara Forth is
4542:068 | DONE cmt | na 16 16 |        |             | ; developed. All start with "tests_"
4542:069 | DONE wsp | na 16 16 |        |             |
4542:070 | DONE lbl | na 16 16 | 007982 |             | tests_prev_cmd                       
4542:071 | DONE dir | na 16 16 | 007982 | (19 bytes)  |         .byte 28, 70, 72, 65, 76, 69, 6f, 75, 73, 20, 63, 6f, 6d, (...) 
4542:071 | DONE dir | na 16 16 |        |             |                 28 70 72 65 76 69 6f 75  --  ( p r e v i o u
4542:071 | DONE dir | na 16 16 |        |             |                 73 20 63 6f 6d 6d 61 6e  --  s   c o m m a n
4542:071 | DONE dir | na 16 16 |        |             |                 64 29 00                 --  d ) .
4542:072 | DONE lbl | na 16 16 | 007995 |             | tests_next_cmd                       
4542:073 | DONE dir | na 16 16 | 007995 | (15 bytes)  |         .byte 28, 6e, 65, 78, 74, 20, 63, 6f, 6d, 6d, 61, 6e, 64, (...) 
4542:073 | DONE dir | na 16 16 |        |             |                 28 6e 65 78 74 20 63 6f  --  ( n e x t   c o
4542:073 | DONE dir | na 16 16 |        |             |                 6d 6d 61 6e 64 29 00     --  m m a n d ) .
4542:074 | DONE wsp | na 16 16 |        |             |
4542:075 | DONE wsp | na 16 16 |        |             |
4542:076 | DONE cmt | na 16 16 |        |             | ; ===================================================================
4542:077 | DONE cmt | na 16 16 |        |             | ; ALPHABET STRINGS
4542:078 | DONE wsp | na 16 16 |        |             |
4542:079 | DONE cmt | na 16 16 |        |             | ; Leave alphastr as the last entry in the source code to make it easier to
4542:080 | DONE cmt | na 16 16 |        |             | ; see where this section ends. This cannot be a zero-terminated string
4542:081 | DONE wsp | na 16 16 |        |             |
4542:082 | DONE lbl | na 16 16 | 0079a4 |             | alphastring                          
4542:083 | DONE dir | na 16 16 | 0079a4 | (35 bytes)  |         .byte 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 61, 62, 63, (...) 
4542:083 | DONE dir | na 16 16 |        |             |                 30 31 32 33 34 35 36 37  --  0 1 2 3 4 5 6 7
4542:083 | DONE dir | na 16 16 |        |             |                 38 39 61 62 63 64 65 66  --  8 9 a b c d e f
4542:083 | DONE dir | na 16 16 |        |             |                 67 68 69 6a 6b 6c 6d 6e  --  g h i j k l m n
4542:083 | DONE dir | na 16 16 |        |             |                 6f 70 71 72 73 74 75 76  --  o p q r s t u v
4542:083 | DONE dir | na 16 16 |        |             |                 77 79 7a                 --  w y z
4543:000 | DONE wsp | na 16 16 |        |             |
4544:000 | DONE cmt | na 16 16 |        |             | ; ===================================================================
4545:000 | DONE cmt | na 16 16 |        |             | ; TESTING ROUTINES (UNCOMMENT FOR USE)
4546:000 | DONE wsp | na 16 16 |        |             |
4547:000 | DONE cmt | na 16 16 |        |             |                 ; --- TODO TESTING (PRINT ONE "A") ---
4548:000 | DONE cmt | na 16 16 |        |             |                 ; lda.# 61
4549:000 | DONE cmt | na 16 16 |        |             |                 ; jsr put_chr
4550:000 | DONE cmt | na 16 16 |        |             |                 ; .!a16
4551:000 | DONE cmt | na 16 16 |        |             |                 ; brk 00
4552:000 | DONE cmt | na 16 16 |        |             |                 ; --- TODO TESTING ---
4553:000 | DONE wsp | na 16 16 |        |             |
4554:000 | DONE cmt | na 16 16 |        |             |                 ; --- TESTING SHOW WHAT IS TOS ---
4555:000 | DONE cmt | na 16 16 |        |             |                 ; tya
4556:000 | DONE cmt | na 16 16 |        |             |                 ; and.# 0ff00
4557:000 | DONE cmt | na 16 16 |        |             |                 ; xba
4558:000 | DONE cmt | na 16 16 |        |             |                 ; jsr byte_to_ascii
4559:000 | DONE cmt | na 16 16 |        |             |                 ; tya
4560:000 | DONE cmt | na 16 16 |        |             |                 ; and.# 00ff
4561:000 | DONE cmt | na 16 16 |        |             |                 ; jsr byte_to_ascii
4562:000 | DONE cmt | na 16 16 |        |             |                 ; jsr xt_cr
4563:000 | DONE cmt | na 16 16 |        |             |                 ; --------------------------------
4564:000 | DONE wsp | na 16 16 |        |             |
4565:000 | DONE cmt | na 16 16 |        |             |                 ; --- TODO TESTING (HALT CPU) ---
4566:000 | DONE cmt | na 16 16 |        |             |                 ; brk 00 ; BRK for 265sxb tests (drops back to Mensch Monitor)
4567:000 | DONE cmt | na 16 16 |        |             |                 ; stp    ; STP for crude65816 emulator tests
4568:000 | DONE cmt | na 16 16 |        |             |                 ; --- TODO TESTING ---
4569:000 | DONE wsp | na 16 16 |        |             |
4570:000 | DONE wsp | na 16 16 |        |             |
4571:000 | DONE cmt | na 16 16 |        |             | ; ===================================================================
4572:000 | DONE cmt | na 16 16 |        |             | ; END
4573:000 | DONE dir | na 16 16 |        |             |         .end                         

MACROS:
        (none)

SYMBOL TABLE:
- abortq_done                 : 00639c
- abortq_rt                   : 006392
- accept_bs                   : 006414
- accept_eol                  : 00640c
- accept_loop                 : 0063c1
- accept_nonzero              : 0063b4
- allot_done                  : 00646a
- allot_error                 : 006459
- allot_minus                 : 00645f
- allot_real_gone             : 00646c
- alphastring                 : 0079a4
- ascbell                     : 000007
- ascbs                       : 000008
- asccc                       : 000003
- asccn                       : 00000e
- asccp                       : 000010
- asccr                       : 00000d
- ascdel                      : 00007f
- ascesc                      : 00001b
- asclf                       : 00000a
- ascsp                       : 000020
- base                        : 00021c
- branch_rt                   : 0064a7
- brg_value                   : 00000b
- buffers                     : 007c00
- buffersize                  : 0000ff
- byte_to_ascii               : 007303
- char_got_char               : 0064f0
- cib                         : 00020c
- ciblen                      : 00020e
- cmpl_body                   : 0072d9
- cmpl_common                 : 0072cc
- cmpl_jump                   : 0072c9
- cmpl_subroutine             : 0072c4
- cmpl_word                   : 0072bf
- co                          : 000004
- compile_as_code             : 006505
- compile_as_jump             : 006505
- cp                          : 000200
- cp0                         : 000300
- create_got_name             : 006553
- directpage                  : 000200
- directpage-multiple         : 007400
- doconst                     : 007248
- dodoes                      : 007256
- does_rt                     : 00664b
- dots_done                   : 006213
- dots_loop                   : 0061f9
- dots_not_empty              : 0061f3
- dovar                       : 007263
- dp                          : 000202
- dq_case_done                : 0065d8
- dq_checkbase                : 0065db
- dq_notdigit                 : 0065e2
- dq_success                  : 0065ed
- dsp0                        : 0002f8
- dump_byte_loop              : 00666e
- dump_done                   : 006683
- dump_line_loop              : 006668
- equal_not                   : 0062e9
- error                       : 0072e5
- es_allot                    : 00782e
- es_channel                  : 007842
- es_componly                 : 00785c
- es_defer                    : 00787d
- es_divzero                  : 00789a
- es_error                    : 0078ab
- es_intonly                  : 0078b7
- es_noname                   : 0078cd
- es_radix                    : 0078dd
- es_refill1                  : 0078f4
- es_refill2                  : 007922
- es_state                    : 007942
- es_syntax                   : 00796a
- es_underflow                : 00795a
- execute_ip                  : 0066c1
- find-name_all_chars         : 0066fd
- find-name_char_nomatcnt_8   : 0066f9
- find-name_chars             : 0066ee
- find-name_done              : 006723
- find-name_failure_16        : 006720
- find-name_loop              : 0066d9
- find-name_next_entry        : 0066e2
- find-name_success           : 00671a
- get_chr                     : 006047
- get_chr_wait                : 00604c
- hashs_loop                  : 006288
- have_chr?                   : 006056
- hi-end                      : 007820
- hi-start                    : 00731f
- hw_acsr0                    : 00df70
- hw_acsr1                    : 00df72
- hw_acsr2                    : 00df74
- hw_acsr3                    : 00df76
- hw_artd0                    : 00df71
- hw_artd1                    : 00df73
- hw_artd2                    : 00df75
- hw_artd3                    : 00df77
- hw_bcr                      : 00df40
- hw_eier                     : 00df47
- hw_eifr                     : 00df45
- hw_pcs7                     : 00df27
- hw_pd0                      : 00df00
- hw_pd1                      : 00df01
- hw_pd2                      : 00df02
- hw_pd3                      : 00df03
- hw_pd4                      : 00df20
- hw_pd5                      : 00df21
- hw_pd6                      : 00df22
- hw_pd7                      : 00df23
- hw_pdd0                     : 00df04
- hw_pdd1                     : 00df05
- hw_pdd2                     : 00df06
- hw_pdd3                     : 00df07
- hw_pdd4                     : 00df24
- hw_pdd5                     : 00df25
- hw_pdd6                     : 00df26
- hw_sscr                     : 00df41
- hw_t0ch                     : 00df61
- hw_t0cl                     : 00df60
- hw_t1ch                     : 00df63
- hw_t1cl                     : 00df62
- hw_t2ch                     : 00df65
- hw_t2cl                     : 00df64
- hw_t3ch                     : 00df67
- hw_t3cl                     : 00df66
- hw_t4ch                     : 00df69
- hw_t4cl                     : 00df68
- hw_t5ch                     : 00df6b
- hw_t5cl                     : 00df6a
- hw_t6ch                     : 00df6d
- hw_t6cl                     : 00df6c
- hw_t7ch                     : 00df6f
- hw_t7cl                     : 00df6e
- hw_tcr                      : 00df42
- hw_ter                      : 00df43
- hw_tier                     : 00df46
- hw_tifr                     : 00df44
- hw_uier                     : 00df49
- hw_uifr                     : 00df48
- ibuffer1                    : 007c00
- ibuffer2                    : 007d00
- im                          : 000002
- insrc                       : 00020a
- interpret                   : 00726a
- interpret_compile           : 0072aa
- interpret_got_name_token    : 007284
- interpret_interpret         : 0072a4
- interpret_line_done         : 0072b8
- interpret_loop              : 00726a
- literal_rt                  : 00677a
- max_drop                    : 0067b5
- max_nip                     : 0067b7
- max_no_ov                   : 0067b3
- maxram-multiple             : 006fff
- maxram-single               : 007bff
- min_drop                    : 0067c8
- min_nip                     : 0067ca
- min_no_ov                   : 0067c6
- mstar_abs_nos               : 006793
- mstar_umstar                : 00679d
- nc                          : 000001
- nc_limit                    : 000000
- nibble_to_ascii             : 00730c
- not-equal_equal             : 0060fc
- nt_2drop                    : 0071c0
- nt_2dup                     : 006f4d
- nt_abort                    : 006cf9
- nt_abortq                   : 006ceb
- nt_abs                      : 006f59
- nt_accept                   : 007160
- nt_again                    : 006ec9
- nt_allot                    : 006f05
- nt_and                      : 007013
- nt_backslash                : 00716e
- nt_base                     : 006dd0
- nt_begin                    : 006ed6
- nt_bell                     : 006c29
- nt_bl                       : 006d81
- nt_bounds                   : 0071f9
- nt_bracketchar              : 006e28
- nt_brackettick              : 006e1d
- nt_branch                   : 006ebb
- nt_bye                      : 006bd6
- nt_c-comma                  : 007028
- nt_c-fetch                  : 007032
- nt_c-store                  : 00703c
- nt_cells                    : 006dec
- nt_char                     : 006ff2
- nt_cold                     : 006be1
- nt_colon                    : 006efc
- nt_comma                    : 007157
- nt_compile-only             : 006e45
- nt_compilecomma             : 006ee3
- nt_constant                 : 006f97
- nt_count                    : 006cde
- nt_cr                       : 006d38
- nt_create                   : 006f2c
- nt_dabs                     : 006c69
- nt_decimal                  : 006c35
- nt_depth                    : 006f8a
- nt_digitq                   : 0071eb
- nt_dnegate                  : 006c75
- nt_does                     : 006f1f
- nt_dot                      : 006dbc
- nt_dotquote                 : 006df9
- nt_dots                     : 006da6
- nt_dplus                    : 006c9a
- nt_drop                     : 00723c
- nt_dtos                     : 006c84
- nt_dump                     : 006c0d
- nt_dup                      : 007231
- nt_equal                    : 0070bb
- nt_evaluate                 : 006ddc
- nt_execute                  : 0071a5
- nt_false                    : 0070c4
- nt_fetch                    : 007213
- nt_find-name                : 007115
- nt_fromr                    : 0071d7
- nt_greater                  : 007095
- nt_hash                     : 006d6e
- nt_hashs                    : 006d58
- nt_here                     : 0071b4
- nt_hex                      : 006c44
- nt_hold                     : 006d4c
- nt_immediate                : 006e59
- nt_invert                   : 006fe4
- nt_latestnt                 : 006e8c
- nt_latestxt                 : 006e9c
- nt_leftbracket              : 006e83
- nt_less                     : 00709e
- nt_lessnumber               : 006d77
- nt_literal                  : 006e36
- nt_max                      : 006fcb
- nt_min                      : 006fc0
- nt_minus                    : 007050
- nt_mrot                     : 00718e
- nt_mstar                    : 006cc9
- nt_name-int                 : 006d28
- nt_name-string              : 006f3a
- nt_negate                   : 006fd6
- nt_nip                      : 007183
- nt_not-equal                : 0070b1
- nt_number                   : 0070ec
- nt_numbermore               : 006d42
- nt_one                      : 007103
- nt_one-minus                : 007062
- nt_one-plus                 : 00706c
- nt_or                       : 007009
- nt_over                     : 007207
- nt_pad                      : 006dc5
- nt_page                     : 006c5d
- nt_parse                    : 006d06
- nt_parse-name               : 007134
- nt_plus                     : 007059
- nt_plusstore                : 00701e
- nt_postpone                 : 006e6a
- nt_question                 : 006d1f
- nt_quit                     : 006d13
- nt_refill                   : 007126
- nt_rfetch                   : 0071cd
- nt_rightbracket             : 006e7a
- nt_rot                      : 00719a
- nt_semicolon                : 006ef3
- nt_sign                     : 006d62
- nt_sliteral                 : 006e0d
- nt_source                   : 006f7c
- nt_source-id                : 007146
- nt_space                    : 006d99
- nt_spaces                   : 006d8b
- nt_squote                   : 006e03
- nt_star                     : 006cc0
- nt_state                    : 006f64
- nt_stod                     : 006c8f
- nt_store                    : 00721c
- nt_swap                     : 007225
- nt_tick                     : 006fb7
- nt_to-in                    : 006f71
- nt_tobody                   : 006f12
- nt_tonumber                 : 0070dd
- nt_tor                      : 0071e1
- nt_true                     : 0070d1
- nt_tuck                     : 007177
- nt_two                      : 0070fa
- nt_two-star                 : 007046
- nt_type                     : 006db0
- nt_udmod                    : 006ca4
- nt_ummod                    : 006cb2
- nt_umstar                   : 006cd3
- nt_unused                   : 006c4f
- nt_variable                 : 006fa7
- nt_words                    : 006c00
- nt_wordsize                 : 006c19
- nt_wordsnsizes              : 006bed
- nt_xor                      : 006ffe
- nt_zbranch                  : 006eac
- nt_zero                     : 00710c
- nt_zero-equal               : 0070a7
- nt_zero-less                : 00708b
- nt_zero-more                : 007081
- nt_zero-notequal            : 007076
- number_dot                  : 006809
- number_loop                 : 006830
- number_main                 : 006822
- number_ok                   : 00683c
- number_single               : 006864
- output                      : 000208
- padoffset                   : 00007f
- padsize                     : 0000ff
- parse-name_empty_line       : 0068ae
- parse-name_found            : 0068c2
- parse-name_loop             : 0068a1
- parse_found_delimiter       : 0068ee
- parse_loop                  : 0068e1
- parse_reached_eol           : 0068f2
- physicalram                 : 007fff
- piblen                      : 000210
- pp_got_nt                   : 006927
- pp_got_word                 : 00691c
- pp_not_immediate            : 006937
- print_string                : 0072eb
- print_string_done           : 0072fa
- put_chr                     : 006036
- put_chr_wait                : 00603c
- quit_compiled               : 0060d5
- quit_get_line               : 0060aa
- quit_ok                     : 0060cc
- quit_print                  : 0060d8
- quit_refill_successful      : 0060b8
- refill_source_is_not_string : 006983
- refill_src_not_kbd          : 00697a
- reset_hardware              : 006000
- s_compiled                  : 007824
- s_ok                        : 007820
- scratch                     : 000220
- sign_plus                   : 0069be
- sl_loop                     : 0069e3
- sliteral_rt                 : 006a0e
- spaces_done                 : 006a47
- stack-multiple              : 007000
- stack0                      : 007fff
- start                       : 006066
- state                       : 000214
- stod_pos                    : 0069b1
- string_to_lowercase         : 00731e
- tests_next_cmd              : 007995
- tests_prev_cmd              : 007982
- tick_have_nt                : 006384
- tick_have_word              : 006378
- tmp1                        : 000216
- tmp2                        : 000218
- tmp3                        : 00021a
- tmpdsp                      : 000204
- tmptos                      : 000206
- tohold                      : 000228
- toin                        : 000212
- tonumber_done               : 006179
- tonumber_loop               : 006135
- tonumber_ok                 : 006144
- type_done                   : 006a8d
- type_loop                   : 006a81
- ummod_complete              : 006b56
- ummod_notzero               : 006b17
- ummod_overflow              : 006b4d
- ummod_shift                 : 006b2f
- umstar_counter              : 006ae6
- umstar_loop                 : 006ad8
- umstar_one_nos              : 006af9
- umstar_one_tos              : 006af6
- umstar_two_common           : 006b05
- umstar_two_nos              : 006b04
- umstar_two_tos              : 006b00
- umstar_zero                 : 006aef
- vt100_home                  : 00797e
- vt100_page                  : 007979
- words_common                : 006b81
- words_loop                  : 006b8b
- words_nosizes               : 006ba8
- workword                    : 00021e
- xt_2drop                    : 00635a
- xt_2dup                     : 006361
- xt_abort                    : 006097
- xt_abortq                   : 006388
- xt_abs                      : 0063a5
- xt_accept                   : 0063ae
- xt_again                    : 006432
- xt_allot                    : 006448
- xt_and                      : 006471
- xt_backslash                : 0062bf
- xt_base                     : 006478
- xt_begin                    : 006487
- xt_bell                     : 006480
- xt_bl                       : 00648e
- xt_bounds                   : 006496
- xt_bracketchar              : 0062b8
- xt_brackettick              : 0062a9
- xt_branch                   : 0064a0
- xt_bye                      : 0064b6
- xt_c-comma                  : 0064ba
- xt_c-fetch                  : 0064c8
- xt_c-store                  : 0064d4
- xt_char                     : 0064e4
- xt_cold                     : 006063
- xt_colon                    : 006223
- xt_comma                    : 006217
- xt_compile-only             : 0064fc
- xt_compilecomma             : 006505
- xt_constant                 : 006518
- xt_count                    : 006532
- xt_cr                       : 006541
- xt_create                   : 006548
- xt_dabs                     : 00660e
- xt_decimal                  : 006615
- xt_depth                    : 00661b
- xt_digitq                   : 0065bb
- xt_dnegate                  : 00662a
- xt_does                     : 00663e
- xt_dot                      : 00618e
- xt_dotparen                 : 0061ad
- xt_dotquote                 : 0061bb
- xt_dots                     : 0061cf
- xt_dplus                    : 0065f7
- xt_drop                     : 006661
- xt_dtos                     : 006609
- xt_dump                     : 006666
- xt_dup                      : 00668d
- xt_equal                    : 0062e0
- xt_evaluate                 : 006692
- xt_execute                  : 0066c4
- xt_fetch                    : 0062a4
- xt_find-name                : 0066cf
- xt_fromr                    : 00694f
- xt_greater                  : 006109
- xt_greater_nip              : 00611a
- xt_greater_no_ov            : 006117
- xt_hash                     : 00625e
- xt_hashs                    : 006288
- xt_here                     : 006735
- xt_hex                      : 00673c
- xt_hold                     : 006742
- xt_immediate                : 006726
- xt_invert                   : 00672f
- xt_latestnt                 : 006750
- xt_latestxt                 : 006758
- xt_leftbracket              : 0062af
- xt_less                     : 0060df
- xt_less_nip                 : 0060f0
- xt_less_no_ov               : 0060ed
- xt_lessnumber               : 0060ff
- xt_literal                  : 006768
- xt_max                      : 0067a7
- xt_min                      : 0067ba
- xt_minus                    : 0062cc
- xt_mrot                     : 0062d7
- xt_mstar                    : 006787
- xt_name-int                 : 0067cd
- xt_name-string              : 0067d6
- xt_negate                   : 0067e7
- xt_nip                      : 0067ee
- xt_not-equal                : 0060f3
- xt_number                   : 0067f1
- xt_numbermore               : 006279
- xt_one                      : 006342
- xt_one-minus                : 00634a
- xt_one-plus                 : 00634c
- xt_or                       : 006875
- xt_over                     : 00687c
- xt_pad                      : 006883
- xt_page                     : 00688f
- xt_parse                    : 0068ce
- xt_parse-name               : 00689c
- xt_plus                     : 0062c4
- xt_plusstore                : 006901
- xt_postpone                 : 006911
- xt_question                 : 006291
- xt_quit                     : 00609f
- xt_refill                   : 006957
- xt_rfetch                   : 006946
- xt_rightbracket             : 0062b2
- xt_rot                      : 00698a
- xt_semicolon                : 006245
- xt_sign                     : 0069b5
- xt_sliteral                 : 0069c3
- xt_source                   : 006a24
- xt_source-id                : 006a31
- xt_space                    : 006a38
- xt_spaces                   : 006a3f
- xt_squote                   : 006993
- xt_star                     : 006a4c
- xt_state                    : 006a54
- xt_stod                     : 0069a5
- xt_store                    : 006298
- xt_swap                     : 006a5c
- xt_tick                     : 00636c
- xt_to-in                    : 006121
- xt_tobody                   : 00611d
- xt_tonumber                 : 006129
- xt_tor                      : 006186
- xt_true                     : 006a62
- xt_tuck                     : 006a6a
- xt_two                      : 00634e
- xt_two-star                 : 006356
- xt_type                     : 006a73
- xt_udmod                    : 006a94
- xt_ummod                    : 006b0e
- xt_umstar                   : 006aaf
- xt_unused                   : 006b5f
- xt_variable                 : 006b6b
- xt_words                    : 006b7f
- xt_wordsize                 : 006bbc
- xt_wordsnsizes              : 006b78
- xt_xor                      : 006bcf
- xt_zbranch                  : 006323
- xt_zero                     : 0062ec
- xt_zero-equal               : 0062f4
- xt_zero-less                : 006300
- xt_zero-more                : 006318
- xt_zero-notequal            : 00630c
- z_2drop                     : 006360
- z_2dup                      : 00636b
- z_abort                     : 0060de
- z_abortq                    : 0063a4
- z_abs                       : 0063ad
- z_accept                    : 006431
- z_again                     : 006447
- z_allot                     : 006470
- z_and                       : 006477
- z_backslash                 : 0062c3
- z_base                      : 00647f
- z_begin                     : 00648d
- z_bell                      : 006486
- z_bl                        : 006495
- z_bounds                    : 00649f
- z_bracketchar               : 0062be
- z_brackettick               : 0062af
- z_branch                    : 0064a6
- z_bye                       : 0064b9
- z_c-comma                   : 0064c7
- z_c-fetch                   : 0064d3
- z_c-store                   : 0064e3
- z_char                      : 0064fb
- z_cold                      : 0060de
- z_colon                     : 006244
- z_comma                     : 006222
- z_compile-only              : 006504
- z_compilecomma              : 006517
- z_constant                  : 006531
- z_count                     : 006540
- z_cr                        : 006547
- z_create                    : 0065ba
- z_dabs                      : 006614
- z_decimal                   : 00661a
- z_depth                     : 006629
- z_digitq                    : 0065f6
- z_dnegate                   : 00663d
- z_does                      : 00664a
- z_dot                       : 0061ac
- z_dotparen                  : 0061ba
- z_dotquote                  : 0061cf
- z_dots                      : 006216
- z_dplus                     : 006608
- z_drop                      : 006665
- z_dtos                      : 00660d
- z_dump                      : 00668c
- z_dup                       : 006691
- z_equal                     : 0062eb
- z_evaluate                  : 0066c0
- z_execute                   : 0066ce
- z_fetch                     : 0062a8
- z_find-name                 : 006725
- z_fromr                     : 006956
- z_greater                   : 00611c
- z_hash                      : 006278
- z_hashs                     : 006290
- z_here                      : 00673b
- z_hex                       : 006741
- z_hold                      : 00674f
- z_immediate                 : 00672e
- z_invert                    : 006734
- z_latestnt                  : 006757
- z_latestxt                  : 006767
- z_leftbracket               : 0062b1
- z_less                      : 0060f2
- z_lessnumber                : 006108
- z_literal                   : 006779
- z_max                       : 0067b9
- z_min                       : 0067cc
- z_minus                     : 0062d6
- z_mrot                      : 0062df
- z_mstar                     : 0067a6
- z_name-int                  : 0067d5
- z_name-string               : 0067e6
- z_negate                    : 0067ed
- z_nip                       : 0067f0
- z_not-equal                 : 0060fe
- z_number                    : 006874
- z_numbermore                : 006287
- z_one                       : 006349
- z_one-minus                 : 00634b
- z_one-plus                  : 00634d
- z_or                        : 00687b
- z_over                      : 006882
- z_pad                       : 00688e
- z_page                      : 00689b
- z_parse                     : 006900
- z_parse-name                : 006900
- z_plus                      : 0062cb
- z_plusstore                 : 006910
- z_postpone                  : 006946
- z_question                  : 006297
- z_quit                      : 0060de
- z_refill                    : 006989
- z_rfetch                    : 00694e
- z_rightbracket              : 0062b7
- z_rot                       : 006992
- z_semicolon                 : 00625d
- z_sign                      : 0069c2
- z_sliteral                  : 006a0d
- z_source                    : 006a30
- z_source-id                 : 006a37
- z_space                     : 006a3e
- z_spaces                    : 006a4b
- z_squote                    : 0069a4
- z_star                      : 006a53
- z_state                     : 006a5b
- z_stod                      : 0069b4
- z_store                     : 0062a3
- z_swap                      : 006a61
- z_tick                      : 006387
- z_to-in                     : 006128
- z_tobody                    : 006120
- z_tonumber                  : 006185
- z_tor                       : 00618d
- z_true                      : 006a69
- z_tuck                      : 006a72
- z_two                       : 006355
- z_two-star                  : 006359
- z_type                      : 006a93
- z_udmod                     : 006aaf
- z_ummod                     : 006b5e
- z_umstar                    : 006b0d
- z_unused                    : 006b6a
- z_variable                  : 006b77
- z_words                     : 006bbb
- z_wordsize                  : 006bce
- z_wordsnsizes               : 006bbb
- z_xor                       : 006bd5
- z_zbranch                   : 006329
- z_zero                      : 0062f3
- z_zero-equal                : 0062ff
- z_zero-less                 : 00630b
- z_zero-more                 : 006322
- z_zero-notequal             : 006317
- zb_done                     : 00633c
- zb_zero                     : 006336
- zbranch_rt                  : 00632a
- ze_not_zero                 : 0062fc
- zero-less-is-less           : 006308
- zero-more_done              : 006321
- zero-more_true              : 006320
- zne_is_zero                 : 006314
