A Tinkerer's Assembler for the 6502/65c02/65816
Version BETA 24. January 2017
Copyright 2015-2017 Scot W. Stevenson <scot.stevenson@gmail.com>
This program comes with ABSOLUTELY NO WARRANTY

Code listing for file liaraforth.tasm
Generated on Sun Jan 29 17:00:24 2017
Target MPU: 65816
External files loaded: 4
Number of passes executed: 35
Number of steps executed: 10
Assembly time: 0.03604 seconds
Code origin: 006000
Bytes of machine code: 1994

LISTING:
   Line  Status/Type State/Width Address     Bytes     Instruction
   1:000 | DONE cmt | em  8  8 |        |             | ; Liara Forth for the W65C265SXB
   2:000 | DONE cmt | em  8  8 |        |             | ; Scot W. Stevenson <scot.stevenson@gmail.com>
   3:000 | DONE cmt | em  8  8 |        |             | ; First version: 01. Apr 2016
   4:000 | DONE cmt | em  8  8 |        |             | ; This version: 29. Jan 2017
   5:000 | DONE wsp | em  8  8 |        |             |
   6:000 | DONE cmt | em  8  8 |        |             | ; This code is written in Typist's Assembler Notation for the 65c02/65816
   7:000 | DONE cmt | em  8  8 |        |             | ; See docs/MANUAL.md for more information
   8:000 | DONE wsp | em  8  8 |        |             |
   9:000 | DONE dir | em  8  8 |        |             |         .mpu 65816                   
  10:000 | DONE cmt | em  8  8 |        |             | ;       .origin 8000    ; start of code to save to Flash memory
  11:000 | DONE dir | em  8  8 |        |             |         .origin 6000                 ; start of code to save to built-in RAM
  12:000 | DONE wsp | em  8  8 |        |             |
  13:000 | DONE cmt | em  8  8 |        |             | ; ===================================================================
  14:000 | DONE cmt | em  8  8 |        |             | ; TOP INCLUDES
  15:000 | DONE wsp | em  8  8 |        |             |
  16:000 | DONE cmt | em  8  8 |        |             | ; Definitions for Liara Forth for the W65C265SXB
  16:001 | DONE cmt | em  8  8 |        |             | ; Scot W. Stevenson <scot.stevenson@gmail.com>
  16:002 | DONE cmt | em  8  8 |        |             | ; First version: 01. Apr 2016
  16:003 | DONE cmt | em  8  8 |        |             | ; This version: 29. Jan 2017
  16:004 | DONE wsp | em  8  8 |        |             |
  16:005 | DONE cmt | em  8  8 |        |             | ; This file is included by liaraforth.tasm
  16:006 | DONE wsp | em  8  8 |        |             |
  16:007 | DONE cmt | em  8  8 |        |             | ; Note that Typist's Assembler Notation does not distinguish between
  16:008 | DONE cmt | em  8  8 |        |             | ; upper andlower case. Variations in case are for human readers only.
  16:009 | DONE wsp | em  8  8 |        |             |
  16:010 | DONE cmt | em  8  8 |        |             | ; I/O facilities are handled in the separate file kernel.tasm with symbols
  16:011 | DONE cmt | em  8  8 |        |             | ; prefixed with hw_ . No symbol with this prefix may be defined or used outside
  16:012 | DONE cmt | em  8  8 |        |             | ; of that file.
  16:013 | DONE wsp | em  8  8 |        |             |
  16:014 | DONE cmt | em  8  8 |        |             | ; The definitions for multitasking are preliminary and will probably
  16:015 | DONE cmt | em  8  8 |        |             | ; change
  16:016 | DONE wsp | em  8  8 |        |             |
  16:017 | DONE cmt | em  8  8 |        |             | ; ===================================================================
  16:018 | DONE cmt | em  8  8 |        |             | ; MEMORY MAP (consider moving parts of these to kernel.tasm)
  16:019 | DONE wsp | em  8  8 |        |             |
  16:020 | DONE dir | em  8  8 |        |             |         .equ ram0            0200    ; start of available RAM
  16:021 | DONE dir | em  8  8 |        |             |         .equ physicalram     07fff   ; end of installed RAM
  16:022 | DONE dir | em  8  8 |        |             |         .equ maxram-single   07bff   ; end of available RAM (single task mode)
  16:023 | DONE dir | em  8  8 |        |             |         .equ maxram-multiple 06fff   ; end of available RAM (multitask mode)
  16:024 | DONE dir | em  8  8 |        |             |         .equ buffers  7c00           ; buffer area start
  16:025 | DONE wsp | em  8  8 |        |             |
  16:026 | DONE cmt | em  8  8 |        |             | ; The two input buffers are currently switched in REFILL by bit flipping. If you
  16:027 | DONE cmt | em  8  8 |        |             | ; change their addresses, you'll probably have to rewrite the code there
  16:028 | DONE wsp | em  8  8 |        |             |
  16:029 | DONE dir | em  8  8 |        |             |         .equ buffersize 00ff         ; maximum size for input buffers
  16:030 | DONE dir | em  8  8 |        |             |         .equ ibuffer1   7c00         ; start of 256 byte input buffer 1
  16:031 | DONE dir | em  8  8 |        |             |         .equ ibuffer2   7d00         ; start of 256 byte input buffer 2
  16:032 | DONE wsp | em  8  8 |        |             |
  16:033 | DONE cmt | em  8  8 |        |             | ; RAM from 0000 to 01ff is left for the Mensch Monitor to use
  16:034 | DONE wsp | em  8  8 |        |             |
  16:035 | DONE dir | em  8  8 |        |             |         .equ directpage          0200 ; single task Direct Page (DP) start
  16:036 | DONE dir | em  8  8 |        |             |         .equ stack-multiple      7000 ; multitask Stack (S) area start
  16:037 | DONE dir | em  8  8 |        |             |         .equ directpage-multiple 7400 ; multitask Direct Page (DP) area start
  16:038 | DONE wsp | em  8  8 |        |             |
  16:039 | DONE cmt | em  8  8 |        |             | ; Initial values
  16:040 | DONE wsp | em  8  8 |        |             |
  16:041 | DONE dir | em  8  8 |        |             |         .equ stack0 7fff             ; single task Stack (S) start (bottom)
  16:042 | DONE dir | em  8  8 |        |             |         .equ dsp0   02f0             ; initial Data Stack Pointer (X)
  16:043 | DONE wsp | em  8  8 |        |             |
  16:044 | DONE cmt | em  8  8 |        |             | ; ===================================================================
  16:045 | DONE cmt | em  8  8 |        |             | ; DIRECT PAGE ADDRESSES
  16:046 | DONE wsp | em  8  8 |        |             |
  16:047 | DONE cmt | em  8  8 |        |             | ; All are one cell (two bytes) long to prevent weird errors
  16:048 | DONE cmt | em  8  8 |        |             | ; TODO move these to USER variables for multitasking
  16:049 | DONE wsp | em  8  8 |        |             |
  16:050 | DONE dir | em  8  8 |        |             |         .equ cp { 000200 + &0 }      ; Compiler Pointer, 2 bytes
  16:051 | DONE dir | em  8  8 |        |             |         .equ dp { 000200 + &2 }      ; Dictionary Pointer, 2 bytes
  16:052 | DONE dir | em  8  8 |        |             |         .equ tmpdsp { 000200 + &4 }  ; Temporary DSP (X) storage, 2 bytes
  16:053 | DONE dir | em  8  8 |        |             |         .equ tmptos { 000200 + &6 }  ; Temporary TOS (Y) storage, 2 bytes
  16:054 | DONE cmt | em  8  8 |        |             | ;       .equ         { directpage + &8 }  ; UNUSED
  16:055 | DONE dir | em  8  8 |        |             |         .equ insrc { 000200 + &10 }  ; Input Source for SOURCE-ID
  16:056 | DONE dir | em  8  8 |        |             |         .equ cib { 000200 + &12 }    ; Current Input Buffer, 7c00 or 7d00
  16:057 | DONE dir | em  8  8 |        |             |         .equ ciblen { 000200 + &14 } ; Length of current input buffer
  16:058 | DONE dir | em  8  8 |        |             |         .equ piblen { 000200 + &16 } ; Length of previous input buffer
  16:059 | DONE dir | em  8  8 |        |             |         .equ toin { 000200 + &18 }   ; Pointer to CIB (>IN in Forth)
  16:060 | DONE dir | em  8  8 |        |             |         .equ state { 000200 + &20 }  ; STATE: 1 compile, 0 interpret
  16:061 | DONE dir | em  8  8 |        |             |         .equ tmp1 { 000200 + &22 }   ; Temporary storage, usually address
  16:062 | DONE dir | em  8  8 |        |             |         .equ tmp2 { 000200 + &24 }   ; Temporary storage, usually counter
  16:063 | DONE dir | em  8  8 |        |             |         .equ tmp3 { 000200 + &26 }   ; Temporary storage
  16:064 | DONE wsp | em  8  8 |        |             |
  16:065 | DONE cmt | em  8  8 |        |             | ; ===================================================================
  16:066 | DONE cmt | em  8  8 |        |             | ; HELPER DEFINITIONS
  16:067 | DONE wsp | em  8  8 |        |             |
  16:068 | DONE cmt | em  8  8 |        |             | ; ASCII character set
  16:069 | DONE wsp | em  8  8 |        |             |
  16:070 | DONE dir | em  8  8 |        |             |         .equ AscCC   03              ; break (Control-C) ASCII character
  16:071 | DONE dir | em  8  8 |        |             |         .equ AscBELL 07              ; ACSCII bell sound
  16:072 | DONE dir | em  8  8 |        |             |         .equ AscBS   08              ; backspace ASCII character
  16:073 | DONE dir | em  8  8 |        |             |         .equ AscLF   0a              ; line feed ASCII character
  16:074 | DONE dir | em  8  8 |        |             |         .equ AscCR   0d              ; carriage return ASCII character
  16:075 | DONE dir | em  8  8 |        |             |         .equ AscCN   0e              ; ASCII CNTR-n (for next command)
  16:076 | DONE dir | em  8  8 |        |             |         .equ AscCP   10              ; ASCII CNTR-p (for previous command)
  16:077 | DONE dir | em  8  8 |        |             |         .equ AscESC  1b              ; Escape ASCII character
  16:078 | DONE dir | em  8  8 |        |             |         .equ AscSP   20              ; space ASCII character
  16:079 | DONE dir | em  8  8 |        |             |         .equ AscDEL  7f              ; DEL ASCII character
  16:080 | DONE wsp | em  8  8 |        |             |
  16:081 | DONE cmt | em  8  8 |        |             | ; Dictionary flags
  16:082 | DONE wsp | em  8  8 |        |             |
  16:083 | DONE dir | em  8  8 |        |             |         .equ PW %10000000            ; Primitive (Native) Word
  16:084 | DONE dir | em  8  8 |        |             |         .equ CO %01000000            ; Compile Only
  16:085 | DONE dir | em  8  8 |        |             |         .equ IM %00100000            ; Immediate Word
  16:086 | DONE dir | em  8  8 |        |             |         .equ NC %00010000            ; Native (inline) Compile
  17:000 | DONE wsp | em  8  8 |        |             |
  18:000 | DONE cmt | em  8  8 |        |             | ; Hardware dependencies are isolated to a large degree in kernel files. Liara
  19:000 | DONE cmt | em  8  8 |        |             | ; Forth ships with two such files: One for the crude65816 emulator, and one for
  20:000 | DONE cmt | em  8  8 |        |             | ; the 265sxb board. Only use one.
  21:000 | DONE wsp | em  8  8 |        |             |
  22:000 | DONE cmt | em  8  8 |        |             | ;       .include kernel_emu.tasm        ; routines for crude65815 emulator
  23:000 | DONE cmt | em  8  8 |        |             | ; Basic hardware routines for Liara Forth: 265SXB version
  23:001 | DONE cmt | em  8  8 |        |             | ; Scot W. Stevenson <scot.stevenson@gmail.com>
  23:002 | DONE cmt | em  8  8 |        |             | ; First version: 04. Jan 2017
  23:003 | DONE cmt | em  8  8 |        |             | ; This version: 29. Jan 2017
  23:004 | DONE wsp | em  8  8 |        |             |
  23:005 | DONE cmt | em  8  8 |        |             | ; This section provides basic hardware interface to the 265SXB, providing the
  23:006 | DONE cmt | em  8  8 |        |             | ; PUT_CHR and GET_CHR routines that Liara Forth uses. It is in its own section
  23:007 | DONE cmt | em  8  8 |        |             | ; to make porting Forth to other machines easier.
  23:008 | DONE wsp | em  8  8 |        |             |
  23:009 | DONE cmt | em  8  8 |        |             | ; The code here is based on Andrew Jacobs' Basic Vector Handling for the
  23:010 | DONE cmt | em  8  8 |        |             | ; W65C265SXB Development Board as part of the w65c265sxb-hacker project
  23:011 | DONE cmt | em  8  8 |        |             | ; (https://github.com/andrew-jacobs/w65c265sxb-hacker). It is released under the
  23:012 | DONE cmt | em  8  8 |        |             | ; following license:
  23:013 | DONE cmt | em  8  8 |        |             | ;
  23:014 | DONE cmt | em  8  8 |        |             | ; This work is made available under the terms of the Creative Commons
  23:015 | DONE cmt | em  8  8 |        |             | ; Attribution-NonCommercial-ShareAlike 4.0 International license. Open the
  23:016 | DONE cmt | em  8  8 |        |             | ; following URL to see the details.
  23:017 | DONE cmt | em  8  8 |        |             | ;
  23:018 | DONE cmt | em  8  8 |        |             | ; http://creativecommons.org/licenses/by-nc-sa/4.0/
  23:019 | DONE wsp | em  8  8 |        |             |
  23:020 | DONE cmt | em  8  8 |        |             | ; Original variable names from w65c256.inc are included in comments to make
  23:021 | DONE cmt | em  8  8 |        |             | ; updates and changes easier
  23:022 | DONE wsp | em  8  8 |        |             |
  23:023 | DONE cmt | em  8  8 |        |             | ; ===================================================================
  23:024 | DONE cmt | em  8  8 |        |             | ; HARDWARE DEFINITIONS
  23:025 | DONE cmt | em  8  8 |        |             | ; These follow Andrew Jacobs' names, but lower case and with "hw_" prefixed.
  23:026 | DONE cmt | em  8  8 |        |             | ; This is the only file where symbols with the hw_ prefix may be defined or used
  23:027 | DONE wsp | em  8  8 |        |             |
  23:028 | DONE cmt | em  8  8 |        |             | ; Baud rates are calculated by the formula { osc_freq/(16*baud_rate)-1 } which we
  23:029 | DONE cmt | em  8  8 |        |             | ; can do on the fly at every assembly with the following parameters, or just calculate
  23:030 | DONE cmt | em  8  8 |        |             | ; once and then define brg_value with:
  23:031 | DONE cmt | em  8  8 |        |             | ;
  23:032 | DONE cmt | em  8  8 |        |             | ; - For  9600 baud, use &23
  23:033 | DONE cmt | em  8  8 |        |             | ; - For 19200 baud, use &11
  23:034 | DONE wsp | em  8  8 |        |             |
  23:035 | DONE cmt | em  8  8 |        |             | ;       .equ osc_freq  3686400          ; SXB runs at 3.6864MHz
  23:036 | DONE cmt | em  8  8 |        |             | ;       .equ baud_rate 19200            ; ACIA baud rate
  23:037 | DONE cmt | em  8  8 |        |             | ;	.equ baud_rate 9600             ; ACIA baud rate
  23:038 | DONE wsp | em  8  8 |        |             |
  23:039 | DONE dir | em  8  8 |        |             |         .equ brg_value &11           ; 19200 baud
  23:040 | DONE cmt | em  8  8 |        |             | ;       .equ brg_value &23              ; 9600 baud
  23:041 | DONE wsp | em  8  8 |        |             |
  23:042 | DONE dir | em  8  8 |        |             |         .equ hw_pd0  0df00           ; Port 0 Data Register
  23:043 | DONE dir | em  8  8 |        |             |         .equ hw_pd1  0df01           ; Port 1 Data Register
  23:044 | DONE dir | em  8  8 |        |             |         .equ hw_pd2  0df02           ; Port 2 Data Register
  23:045 | DONE dir | em  8  8 |        |             |         .equ hw_pd3  0df03           ; Port 3 Data Register
  23:046 | DONE dir | em  8  8 |        |             |         .equ hw_pdd0 0df04           ; Port 0 Data Direction Register
  23:047 | DONE dir | em  8  8 |        |             |         .equ hw_pdd1 0df05           ; Port 1 Data Direction Register
  23:048 | DONE dir | em  8  8 |        |             |         .equ hw_pdd2 0df06           ; Port 2 Data Direction Register
  23:049 | DONE dir | em  8  8 |        |             |         .equ hw_pdd3 0df07           ; Port 3 Data Direction Register
  23:050 | DONE wsp | em  8  8 |        |             |
  23:051 | DONE dir | em  8  8 |        |             |         .equ hw_pd4  0df20           ; Port 4 Data Register
  23:052 | DONE dir | em  8  8 |        |             |         .equ hw_pd5  0df21           ; Port 5 Data Register
  23:053 | DONE dir | em  8  8 |        |             |         .equ hw_pd6  0df22           ; Port 6 Data Register
  23:054 | DONE dir | em  8  8 |        |             |         .equ hw_pd7  0df23           ; Port 7 Data Register
  23:055 | DONE dir | em  8  8 |        |             |         .equ hw_pdd4 0df24           ; Port 4 Data Direction Register
  23:056 | DONE dir | em  8  8 |        |             |         .equ hw_pdd5 0df25           ; Port 5 Data Direction Register
  23:057 | DONE dir | em  8  8 |        |             |         .equ hw_pdd6 0df26           ; Port 6 Data Direction Register
  23:058 | DONE dir | em  8  8 |        |             |         .equ hw_pcs7 0df27           ; Port 7 Chip Select
  23:059 | DONE wsp | em  8  8 |        |             |
  23:060 | DONE dir | em  8  8 |        |             |         .equ hw_bcr  0df40           ; Bus Control Register
  23:061 | DONE dir | em  8  8 |        |             |         .equ hw_sscr 0df41           ; System Speed Control Register
  23:062 | DONE dir | em  8  8 |        |             |         .equ hw_tcr  0df42           ; Timer Control Register
  23:063 | DONE dir | em  8  8 |        |             |         .equ hw_ter  0df43           ; Timer Enable Register
  23:064 | DONE dir | em  8  8 |        |             |         .equ hw_tifr 0df44           ; Timer Interrupt Flag Register
  23:065 | DONE dir | em  8  8 |        |             |         .equ hw_eifr 0df45           ; Edge Interrupt Flag Register
  23:066 | DONE dir | em  8  8 |        |             |         .equ hw_tier 0df46           ; Timer Interrupt Enable Register
  23:067 | DONE dir | em  8  8 |        |             |         .equ hw_eier 0df47           ; Edge Interrupt Enable Register
  23:068 | DONE dir | em  8  8 |        |             |         .equ hw_uifr 0df48           ; UART Interrupt Flag Register
  23:069 | DONE dir | em  8  8 |        |             |         .equ hw_uier 0df49           ; UART Interrupt Enable Register
  23:070 | DONE wsp | em  8  8 |        |             |
  23:071 | DONE dir | em  8  8 |        |             |         .equ hw_t0cl 0df60           ; Timer 0 Counter Low
  23:072 | DONE dir | em  8  8 |        |             |         .equ hw_t0ch 0df61           ; Timer 0 Counter High
  23:073 | DONE dir | em  8  8 |        |             |         .equ hw_t1cl 0df62           ; Timer 1 Counter Low
  23:074 | DONE dir | em  8  8 |        |             |         .equ hw_t1ch 0df63           ; Timer 1 Counter High
  23:075 | DONE dir | em  8  8 |        |             |         .equ hw_t2cl 0df64           ; Timer 2 Counter Low
  23:076 | DONE dir | em  8  8 |        |             |         .equ hw_t2ch 0df65           ; Timer 2 Counter High
  23:077 | DONE dir | em  8  8 |        |             |         .equ hw_t3cl 0df66           ; Timer 3 Counter Low
  23:078 | DONE dir | em  8  8 |        |             |         .equ hw_t3ch 0df67           ; Timer 3 Counter High
  23:079 | DONE dir | em  8  8 |        |             |         .equ hw_t4cl 0df68           ; Timer 4 Counter Low
  23:080 | DONE dir | em  8  8 |        |             |         .equ hw_t4ch 0df69           ; Timer 4 Counter High
  23:081 | DONE dir | em  8  8 |        |             |         .equ hw_t5cl 0df6a           ; Timer 5 Counter Low
  23:082 | DONE dir | em  8  8 |        |             |         .equ hw_t5ch 0df6b           ; Timer 5 Counter High
  23:083 | DONE dir | em  8  8 |        |             |         .equ hw_t6cl 0df6c           ; Timer 6 Counter Low
  23:084 | DONE dir | em  8  8 |        |             |         .equ hw_t6ch 0df6d           ; Timer 6 Counter High
  23:085 | DONE dir | em  8  8 |        |             |         .equ hw_t7cl 0df6e           ; Timer 7 Counter Low
  23:086 | DONE dir | em  8  8 |        |             |         .equ hw_t7ch 0df6f           ; Timer 7 Counter High
  23:087 | DONE wsp | em  8  8 |        |             |
  23:088 | DONE dir | em  8  8 |        |             |         .equ hw_acsr0 0df70          ; UART 0 Control/Status Register
  23:089 | DONE dir | em  8  8 |        |             |         .equ hw_artd0 0df71          ; UART 0 Data Register
  23:090 | DONE dir | em  8  8 |        |             |         .equ hw_acsr1 0df72          ; UART 1 Control/Status Register
  23:091 | DONE dir | em  8  8 |        |             |         .equ hw_artd1 0df73          ; UART 1 Data Register
  23:092 | DONE dir | em  8  8 |        |             |         .equ hw_acsr2 0df74          ; UART 2 Control/Status Register
  23:093 | DONE dir | em  8  8 |        |             |         .equ hw_artd2 0df75          ; UART 2 Data Register
  23:094 | DONE dir | em  8  8 |        |             |         .equ hw_acsr3 0df76          ; UART 3 Control/Status Register
  23:095 | DONE dir | em  8  8 |        |             |         .equ hw_artd3 0df77          ; UART 3 Data Register
  23:096 | DONE wsp | em  8  8 |        |             |
  23:097 | DONE wsp | em  8  8 |        |             |
  23:098 | DONE cmt | em  8  8 |        |             | ; ===================================================================
  23:099 | DONE cmt | em  8  8 |        |             | ; RESET HARDWARE
  23:100 | DONE cmt | em  8  8 |        |             | ; Call this during boot. Uses Port 0 for communication in the default setting
  23:101 | DONE lbl | em  8  8 | 006000 |             | reset_hardware                       
  23:102 | DONE ins | em  8  8 | 006000 | 78          |                 sei                  
  23:103 | DONE ins | em  8  8 | 006001 | 18          |                 clc                  
  23:104 | DONE ins | em  8  8 | 006002 | fb          |                 xce                  
  23:105 | DONE ctl | na  8  8 |        |             |         .!native
  23:106 | DONE ins | na  8  8 | 006003 | c2 10       |                 rep 10               
  23:107 | DONE ctl | na  8 16 |        |             |         .!xy16
  23:108 | DONE cmt | na  8 16 |        |             |                 ; temporarily reset the stack
  23:109 | DONE ins | na  8 16 | 006005 | a2 ff 01    |                 ldx.# 01ff           
  23:110 | DONE ins | na  8 16 | 006008 | 9a          |                 txs                  
  23:111 | DONE wsp | na  8 16 |        |             |
  23:112 | DONE ins | na  8 16 | 006009 | 9c 49 df    |                 stz 00df49           ; UART Interrupt Enable Register (UIER)
  23:113 | DONE wsp | na  8 16 |        |             |
  23:114 | DONE ins | na  8 16 | 00600c | a9 c0       |                 lda.# 0c0            ; Ensure A15/AMS are output
  23:115 | DONE ins | na  8 16 | 00600e | 8d 24 df    |                 sta 00df24           ; Port 4 Data Direction Register (PDD4)
  23:116 | DONE ins | na  8 16 | 006011 | 9c 20 df    |                 stz 00df20           ; Select bank 0 (Port 4 Data Register, PD4)
  23:117 | DONE wsp | na  8 16 |        |             |
  23:118 | DONE ins | na  8 16 | 006014 | a9 10       |                 lda.# %00010000      ; Set UART0 to use timer 3
  23:119 | DONE ins | na  8 16 | 006016 | 1c 42 df    |                 trb 00df42           ; Timer Control Register (TCR)
  23:120 | DONE ins | na  8 16 | 006019 | a9 0b       |                 lda.# .lsb 00000b    ; And set baud rate
  23:121 | DONE ins | na  8 16 | 00601b | 8d 66 df    |                 sta 00df66           ; Timer 3 Counter Low (T3CL)
  23:122 | DONE ins | na  8 16 | 00601e | a9 00       |                 lda.# .msb 00000b    
  23:123 | DONE ins | na  8 16 | 006020 | 8d 67 df    |                 sta 00df67           ; Timer 3 Counter High (T3CH)
  23:124 | DONE ins | na  8 16 | 006023 | a9 08       |                 lda.# 08             ; Enable timer 3 (1<<3)
  23:125 | DONE ins | na  8 16 | 006025 | 0c 43 df    |                 tsb 00df43           ; Timer Enable Register (TER)
  23:126 | DONE wsp | na  8 16 |        |             |
  23:127 | DONE ins | na  8 16 | 006028 | a9 25       |                 lda.# %00100101      ; Set UART0 for 8-N-1
  23:128 | DONE ins | na  8 16 | 00602a | 8d 70 df    |                 sta 00df70           ; UART 0 Control/Status Register (ACSR0)
  23:129 | DONE wsp | na  8 16 |        |             |
  23:130 | DONE ins | na  8 16 | 00602d | 4c 60 60    |                 jmp 006060           ; we return with A as 8 bits
  23:131 | DONE wsp | na  8 16 |        |             |
  23:132 | DONE wsp | na  8 16 |        |             |
  23:133 | DONE cmt | na  8 16 |        |             | ; ===================================================================
  23:134 | DONE cmt | na  8 16 |        |             | ; PUT_CHR
  23:135 | DONE cmt | na  8 16 |        |             | ; Wait until the last transmission has been completed then send the character
  23:136 | DONE cmt | na  8 16 |        |             | ; in A. Destroys A.
  23:137 | DONE lbl | na  8 16 | 006030 |             | put_chr                              
  23:138 | DONE ins | na  8 16 | 006030 | 08          |                 php                  ; save register sizes
  23:139 | DONE ins | na  8 16 | 006031 | e2 20       |                 sep 20               
  23:140 | DONE ctl | na  8 16 |        |             |         .!a8
  23:141 | DONE ins | na  8 16 | 006033 | 48          |                 pha                  
  23:142 | DONE ins | na  8 16 | 006034 | a9 02       |                 lda.# 02             ; (1<<1)
  23:143 | DONE wsp | na  8 16 |        |             |
  23:144 | DONE lbl | na  8 16 | 006036 |             | put_chr_wait                         
  23:145 | DONE ins | na  8 16 | 006036 | 2c 48 df    |                 bit 00df48           ; timer finished?
  23:146 | DONE ins | na  8 16 | 006039 | f0 fb       |                 beq 006036           
  23:147 | DONE wsp | na  8 16 |        |             |
  23:148 | DONE ins | na  8 16 | 00603b | 68          |                 pla                  
  23:149 | DONE ins | na  8 16 | 00603c | 8d 71 df    |                 sta 00df71           ; transmit char
  23:150 | DONE ins | na  8 16 | 00603f | 28          |                 plp                  
  23:151 | DONE wsp | na  8 16 |        |             |
  23:152 | DONE ins | na  8 16 | 006040 | 60          |                 rts                  
  23:153 | DONE wsp | na  8 16 |        |             |
  23:154 | DONE cmt | na  8 16 |        |             | ; ===================================================================
  23:155 | DONE cmt | na  8 16 |        |             | ; GET_CHR
  23:156 | DONE cmt | na  8 16 |        |             | ; Fetch the next character from the receive buffer waiting for some to arrive
  23:157 | DONE cmt | na  8 16 |        |             | ; if the buffer is empty.
  23:158 | DONE lbl | na  8 16 | 006041 |             | get_chr                              
  23:159 | DONE ins | na  8 16 | 006041 | 08          |                 php                  ; Save register sizes
  23:160 | DONE ins | na  8 16 | 006042 | e2 20       |                 sep 20               
  23:161 | DONE ctl | na  8 16 |        |             |         .!a8
  23:162 | DONE ins | na  8 16 | 006044 | a9 01       |                 lda.# 01             ; (1<<0)
  23:163 | DONE wsp | na  8 16 |        |             |
  23:164 | DONE lbl | na  8 16 | 006046 |             | get_chr_wait                         
  23:165 | DONE ins | na  8 16 | 006046 | 2c 48 df    |                 bit 00df48           ; Any data in RX buffer?
  23:166 | DONE ins | na  8 16 | 006049 | f0 fb       |                 beq 006046           ; No, keep waiting
  23:167 | DONE ins | na  8 16 | 00604b | ad 71 df    |                 lda 00df71           ; Yes, read it
  23:168 | DONE ins | na  8 16 | 00604e | 28          |                 plp                  
  23:169 | DONE wsp | na  8 16 |        |             |
  23:170 | DONE ins | na  8 16 | 00604f | 60          |                 rts                  
  23:171 | DONE wsp | na  8 16 |        |             |
  23:172 | DONE cmt | na  8 16 |        |             | ; ===================================================================
  23:173 | DONE cmt | na  8 16 |        |             | ; HAVE_CHR?
  23:174 | DONE cmt | na  8 16 |        |             | ; Check if the receive buffer contains any data and return C=1 if there is
  23:175 | DONE cmt | na  8 16 |        |             | ; some.
  23:176 | DONE cmt | na  8 16 |        |             | ; TODO Test this
  23:177 | DONE wsp | na  8 16 |        |             |
  23:178 | DONE lbl | na  8 16 | 006050 |             | have_chr?                            
  23:179 | DONE ins | na  8 16 | 006050 | 48          |                 pha                  ; save caller's A
  23:180 | DONE ins | na  8 16 | 006051 | 08          |                 php                  
  23:181 | DONE ins | na  8 16 | 006052 | e2 20       |                 sep 20               
  23:182 | DONE ctl | na  8 16 |        |             |         .!a8
  23:183 | DONE ins | na  8 16 | 006054 | ad 48 df    |                 lda 00df48           ; read the status register
  23:184 | DONE ins | na  8 16 | 006057 | 28          |                 plp                  
  23:185 | DONE ins | na  8 16 | 006058 | 6a          |                 ror.a                ; shift hw_uart0r bit into carry
  23:186 | DONE ins | na  8 16 | 006059 | c2 20       |                 rep 20               
  23:187 | DONE ctl | na 16 16 |        |             |         .!a16
  23:188 | DONE ins | na 16 16 | 00605b | 68          |                 pla                  ; restore A
  23:189 | DONE ins | na 16 16 | 00605c | 60          |                 rts                  
  23:190 | DONE wsp | na 16 16 |        |             |
  23:191 | DONE cmt | na 16 16 |        |             | ; END
  24:000 | DONE wsp | na 16 16 |        |             |
  25:000 | DONE wsp | na 16 16 |        |             |
  26:000 | DONE cmt | na 16 16 |        |             | ; ===================================================================
  27:000 | DONE cmt | na 16 16 |        |             | ; DICTIONARY ROUTINES
  28:000 | DONE wsp | na 16 16 |        |             |
  29:000 | DONE cmt | na 16 16 |        |             | ; Word code routines are sorted alphabetically, except for the first three
  30:000 | DONE cmt | na 16 16 |        |             | ; - COLD, ABORT, and QUIT - and a few others that flow into each other. The
  31:000 | DONE cmt | na 16 16 |        |             | ; byte and cycle values are calculated without the RTS instruction.
  32:000 | DONE wsp | na 16 16 |        |             |
  33:000 | DONE wsp | na 16 16 |        |             |
  34:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
  35:000 | DONE cmt | na 16 16 |        |             | ; COLD ( -- ) X bytes / X Cycles
  36:000 | DONE cmt | na 16 16 |        |             | ; Reboot the system. TODO determine how to compile this word
  37:000 | DONE wsp | na 16 16 |        |             |
  38:000 | DONE lbl | na 16 16 | 00605d |             | a_cold                               
  39:000 | DONE wsp | na 16 16 |        |             |
  40:000 | DONE ins | na 16 16 | 00605d | 4c 00 60    |                 jmp 006000           ; don't use JSR, jump back to start
  41:000 | DONE lbl | na 16 16 | 006060 |             | start                                
  42:000 | DONE wsp | na 16 16 |        |             |
  43:000 | DONE ins | na 16 16 | 006060 | 18          |                 clc                  
  43:001 | DONE ins | na 16 16 | 006061 | fb          |                 xce                  
  43:002 | DONE ctl | na 16 16 |        |             |         .!native
  44:000 | DONE ins | na 16 16 | 006062 | c2 20       |                 rep 20               
  44:001 | DONE ctl | na 16 16 |        |             |         .!a16
  45:000 | DONE ins | na 16 16 | 006064 | c2 10       |                 rep 10               
  45:001 | DONE ctl | na 16 16 |        |             |         .!xy16
  46:000 | DONE ins | na 16 16 | 006066 | 78          |                 sei                  
  47:000 | DONE wsp | na 16 16 |        |             |
  48:000 | DONE cmt | na 16 16 |        |             |                 ; TODO switch to Single Task mode
  49:000 | DONE cmt | na 16 16 |        |             |                 ; TODO set up Direct Page stuff
  50:000 | DONE cmt | na 16 16 |        |             |                 ; TODO set up CP
  51:000 | DONE cmt | na 16 16 |        |             |                 ; TODO initiate PAD
  52:000 | DONE cmt | na 16 16 |        |             |                 ; TODO initiate User variables
  53:000 | DONE cmt | na 16 16 |        |             |                 ; TODO initiate high-level words
  54:000 | DONE wsp | na 16 16 |        |             |
  55:000 | DONE cmt | na 16 16 |        |             |                 ; The name token (nt) of DROP is always the first one in the
  56:000 | DONE cmt | na 16 16 |        |             |                 ; clean Dictionary, so we start off the Dictionary Pointer (DP)
  57:000 | DONE cmt | na 16 16 |        |             |                 ; there. Adding high-level words will change this before the
  58:000 | DONE cmt | na 16 16 |        |             |                 ; user has a chance to call WORDS
  59:000 | DONE ins | na 16 16 | 006067 | a9 35 65    |                 lda.# 006535         
  60:000 | DONE ins | na 16 16 | 00606a | 85 02       |                 sta.d 000202         
  61:000 | DONE wsp | na 16 16 |        |             |
  62:000 | DONE cmt | na 16 16 |        |             |                 ; Prepare input buffers
  63:000 | DONE ins | na 16 16 | 00606c | a9 00 7c    |                 lda.# 007c00         ; start with first input buffer
  64:000 | DONE ins | na 16 16 | 00606f | 85 0c       |                 sta.d 00020c         
  65:000 | DONE ins | na 16 16 | 006071 | 64 0e       |                 stz.d 00020e         ; current input buffer is empty
  66:000 | DONE ins | na 16 16 | 006073 | 64 10       |                 stz.d 000210         ; previous input buffer is empty
  67:000 | DONE wsp | na 16 16 |        |             |
  68:000 | DONE cmt | na 16 16 |        |             |                 ; print boot strings
  69:000 | DONE ins | na 16 16 | 006075 | a9 a5 65    |                 lda.# 0065a5         
  70:000 | DONE ins | na 16 16 | 006078 | 20 71 65    |                 jsr 006571           
  71:000 | DONE ins | na 16 16 | 00607b | a9 c5 65    |                 lda.# 0065c5         
  72:000 | DONE ins | na 16 16 | 00607e | 20 71 65    |                 jsr 006571           
  73:000 | DONE ins | na 16 16 | 006081 | a9 e4 65    |                 lda.# 0065e4         
  74:000 | DONE ins | na 16 16 | 006084 | 20 71 65    |                 jsr 006571           
  75:000 | DONE ins | na 16 16 | 006087 | a9 11 66    |                 lda.# 006611         
  76:000 | DONE ins | na 16 16 | 00608a | 20 71 65    |                 jsr 006571           
  77:000 | DONE ins | na 16 16 | 00608d | a9 3f 66    |                 lda.# 00663f         
  78:000 | DONE ins | na 16 16 | 006090 | 20 71 65    |                 jsr 006571           
  79:000 | DONE wsp | na 16 16 |        |             |
  80:000 | DONE cmt | na 16 16 |        |             |                 ; drop through to QUIT
  81:000 | DONE wsp | na 16 16 |        |             |
  82:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
  83:000 | DONE cmt | na 16 16 |        |             | ; ABORT ( -- ) 6+ bytes / 6+ cycles
  84:000 | DONE cmt | na 16 16 |        |             | ; Reset the parameter (data) stack pointer and continue as QUIT
  85:000 | DONE cmt | na 16 16 |        |             | ; We can jump here via subroutine because we reset the stack pointer
  86:000 | DONE cmt | na 16 16 |        |             | ; anyway. Flows into QUIT.
  87:000 | DONE cmt | na 16 16 |        |             | ; TODO see which parts of COLD we should integrate here
  88:000 | DONE wsp | na 16 16 |        |             |
  89:000 | DONE lbl | na 16 16 | 006093 |             | a_abort                              
  90:000 | DONE ins | na 16 16 | 006093 | c2 20       |                 rep 20               
  90:001 | DONE ctl | na 16 16 |        |             |         .!a16
  91:000 | DONE cmt | na 16 16 |        |             |                 ; clear Data Stack
  92:000 | DONE ins | na 16 16 | 006095 | a0 00 00    |                 ldy.# 0000           
  93:000 | DONE ins | na 16 16 | 006098 | a2 f0 02    |                 ldx.# 0002f0         
  94:000 | DONE wsp | na 16 16 |        |             |
  95:000 | DONE cmt | na 16 16 |        |             | ; drops through to QUIT, z_abort is the same as z_quit.
  96:000 | DONE wsp | na 16 16 |        |             |
  97:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
  98:000 | DONE cmt | na 16 16 |        |             | ; QUIT ( -- ) X bytes / X cycles
  99:000 | DONE cmt | na 16 16 |        |             | ; Reset the input, clearning Return Stack. Jumps to QUIT do not have to be
 100:000 | DONE cmt | na 16 16 |        |             | ; subroutine jumps as the Return Stack is cleared anyway. Liara Forth follows
 101:000 | DONE cmt | na 16 16 |        |             | ; the ANSI Forth recommendation to use REFILL. Note we don't display the "ok"
 102:000 | DONE cmt | na 16 16 |        |             | ; system prompt until after the first output.
 103:000 | DONE wsp | na 16 16 |        |             |
 104:000 | DONE lbl | na 16 16 | 00609b |             | a_quit                               ; clear Return Stack
 105:000 | DONE ins | na 16 16 | 00609b | a9 ff 7f    |                 lda.# 007fff         
 106:000 | DONE ins | na 16 16 | 00609e | 1b          |                 tcs                  
 107:000 | DONE wsp | na 16 16 |        |             |
 108:000 | DONE cmt | na 16 16 |        |             |                 ; make sure Instruction Pointer is empty
 109:000 | DONE ins | na 16 16 | 00609f | 64 bd       |                 stz.d 0061bd         
 110:000 | DONE wsp | na 16 16 |        |             |
 111:000 | DONE cmt | na 16 16 |        |             |                 ; switch SOURCE-ID to zero (keyboard input)
 112:000 | DONE ins | na 16 16 | 0060a1 | 64 0a       |                 stz.d 00020a         
 113:000 | DONE wsp | na 16 16 |        |             |
 114:000 | DONE cmt | na 16 16 |        |             |                 ; switch to interpret state (STATE is zero)
 115:000 | DONE ins | na 16 16 | 0060a3 | 64 14       |                 stz.d 000214         
 116:000 | DONE wsp | na 16 16 |        |             |
 117:000 | DONE lbl | na 16 16 | 0060a5 |             | quit_get_line                        
 118:000 | DONE cmt | na 16 16 |        |             |                 ; empty current input buffer. Note the previous input line is
 119:000 | DONE cmt | na 16 16 |        |             |                 ; conserved even if we came here from an abort
 120:000 | DONE ins | na 16 16 | 0060a5 | 64 0e       |                 stz.d 00020e         
 121:000 | DONE wsp | na 16 16 |        |             |
 122:000 | DONE cmt | na 16 16 |        |             |                 ; accept a line from the current input source
 123:000 | DONE ins | na 16 16 | 0060a7 | 20 b0 62    |                 jsr 0062b0           
 124:000 | DONE wsp | na 16 16 |        |             |
 125:000 | DONE ins | na 16 16 | 0060aa | 98          |                 tya                  ; force flag test of TOS
 126:000 | DONE ins | na 16 16 | 0060ab | d0 06       |                 bne 0060b3           
 127:000 | DONE wsp | na 16 16 |        |             |
 128:000 | DONE cmt | na 16 16 |        |             |                 ; If REFILL returned a FALSE flag, something went wrong and we
 129:000 | DONE cmt | na 16 16 |        |             |                 ; need to print an error message and reset the machine. We don't
 130:000 | DONE cmt | na 16 16 |        |             |                 ; need to save A because we're going to clober it anyway when we
 131:000 | DONE cmt | na 16 16 |        |             |                 ; go back to ABORT.
 132:000 | DONE ins | na 16 16 | 0060ad | a9 11 67    |                 lda.# 006711         
 133:000 | DONE ins | na 16 16 | 0060b0 | 4c 6b 65    |                 jmp 00656b           
 134:000 | DONE wsp | na 16 16 |        |             |
 135:000 | DONE wsp | na 16 16 |        |             |
 136:000 | DONE lbl | na 16 16 | 0060b3 |             | quit_refill_successful               
 137:000 | DONE cmt | na 16 16 |        |             |                 ; Assume we have successfully accepted a string of input from
 138:000 | DONE cmt | na 16 16 |        |             |                 ; a source, with address of buffer in cib and length of input in
 139:000 | DONE cmt | na 16 16 |        |             |                 ; ciblen. We arrive here still with the TRUE flag from REFILL as
 140:000 | DONE cmt | na 16 16 |        |             |                 ; TOS (in Y)
 141:000 | DONE ins | na 16 16 | 0060b3 | b4 00       |                 ldy.dx 00            ; drop TOS
 142:000 | DONE ins | na 16 16 | 0060b5 | e8          |                 inx                  
 143:000 | DONE ins | na 16 16 | 0060b6 | e8          |                 inx                  
 144:000 | DONE wsp | na 16 16 |        |             |
 145:000 | DONE cmt | na 16 16 |        |             |                 ; make >IN point to begining of buffer
 146:000 | DONE ins | na 16 16 | 0060b7 | 64 12       |                 stz.d 000212         
 147:000 | DONE wsp | na 16 16 |        |             |
 148:000 | DONE cmt | na 16 16 |        |             |                 ; TESTING TALI FORTH F_COMPEXE BEGINS HERE
 149:000 | DONE ins | na 16 16 | 0060b9 | 20 41 65    |                 jsr 006541           
 150:000 | DONE wsp | na 16 16 |        |             |
 151:000 | DONE cmt | na 16 16 |        |             |                 ; TODO testing
 152:000 | DONE cmt | na 16 16 |        |             |                 ; Display system prompt if all went well
 153:000 | DONE ins | na 16 16 | 0060bc | a9 52 66    |                 lda.# 006652         
 154:000 | DONE ins | na 16 16 | 0060bf | 20 71 65    |                 jsr 006571           
 155:000 | DONE wsp | na 16 16 |        |             |
 156:000 | DONE cmt | na 16 16 |        |             |                 ; get next line
 157:000 | DONE ins | na 16 16 | 0060c2 | 4c a5 60    |                 jmp 0060a5           
 158:000 | DONE wsp | na 16 16 |        |             |
 159:000 | DONE lbl | na 16 16 | 0060c5 |             | z_cold                               
 160:000 | DONE lbl | na 16 16 | 0060c5 |             | z_abort                              
 161:000 | DONE lbl | na 16 16 | 0060c5 |             | z_quit                               
 161:001 | DONE ins | na 16 16 | 0060c5 | ea          |                 nop                  ; dummy for compilation, TODO test if required
 162:000 | DONE wsp | na 16 16 |        |             |
 163:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 164:000 | DONE cmt | na 16 16 |        |             | ; >IN "TO-IN" ( -- addr ) 6 bytes / X cycles
 165:000 | DONE cmt | na 16 16 |        |             | ; Return address where pointer to current char in input buffer lives (>IN)
 166:000 | DONE wsp | na 16 16 |        |             |
 167:000 | DONE lbl | na 16 16 | 0060c6 |             | a_to-in                              
 167:001 | DONE ins | na 16 16 | 0060c6 | ca          |                 dex                  
 168:000 | DONE ins | na 16 16 | 0060c7 | ca          |                 dex                  
 169:000 | DONE ins | na 16 16 | 0060c8 | 94 00       |                 sty.dx 00            
 170:000 | DONE wsp | na 16 16 |        |             |
 171:000 | DONE ins | na 16 16 | 0060ca | a0 12 02    |                 ldy.# 000212         ; >IN
 172:000 | DONE lbl | na 16 16 | 0060cd |             | z_to-in                              
 172:001 | DONE ins | na 16 16 | 0060cd | 60          |                 rts                  
 173:000 | DONE wsp | na 16 16 |        |             |
 174:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 175:000 | DONE cmt | na 16 16 |        |             | ; + "PLUS" ( n m -- n+m ) 7 bytes / X cycles
 176:000 | DONE cmt | na 16 16 |        |             | ; Add TOS and NOS
 177:000 | DONE wsp | na 16 16 |        |             |
 178:000 | DONE lbl | na 16 16 | 0060ce |             | a_plus                               
 178:001 | DONE ins | na 16 16 | 0060ce | 98          |                 tya                  
 179:000 | DONE ins | na 16 16 | 0060cf | 18          |                 clc                  
 180:000 | DONE ins | na 16 16 | 0060d0 | 75 00       |                 adc.dx 00            
 181:000 | DONE ins | na 16 16 | 0060d2 | a8          |                 tay                  
 182:000 | DONE ins | na 16 16 | 0060d3 | e8          |                 inx                  
 183:000 | DONE ins | na 16 16 | 0060d4 | e8          |                 inx                  
 184:000 | DONE wsp | na 16 16 |        |             |
 185:000 | DONE lbl | na 16 16 | 0060d5 |             | z_plus                               
 185:001 | DONE ins | na 16 16 | 0060d5 | 60          |                 rts                  
 186:000 | DONE wsp | na 16 16 |        |             |
 187:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 188:000 | DONE cmt | na 16 16 |        |             | ; 0 "ZERO" ( -- 0 ) 7 bytes / 12 cycles
 189:000 | DONE cmt | na 16 16 |        |             | ; Pushes the number 0000 on the Data Stack
 190:000 | DONE wsp | na 16 16 |        |             |
 191:000 | DONE lbl | na 16 16 | 0060d6 |             | a_zero                               
 192:000 | DONE dir | na 16 16 |        |             |         .!xy16                       
 193:000 | DONE ins | na 16 16 | 0060d6 | ca          |                 dex                  
 194:000 | DONE ins | na 16 16 | 0060d7 | ca          |                 dex                  
 195:000 | DONE ins | na 16 16 | 0060d8 | 94 00       |                 sty.dx 00            
 196:000 | DONE ins | na 16 16 | 0060da | a0 00 00    |                 ldy.# 0000           
 197:000 | DONE wsp | na 16 16 |        |             |
 198:000 | DONE lbl | na 16 16 | 0060dd |             | z_zero                               
 198:001 | DONE ins | na 16 16 | 0060dd | 60          |                 rts                  
 199:000 | DONE wsp | na 16 16 |        |             |
 200:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 201:000 | DONE cmt | na 16 16 |        |             | ; 1 "ONE" ( -- 1 ) 7 bytes / 12 cycles
 202:000 | DONE cmt | na 16 16 |        |             | ; Pushes the number 1 on the Data Stack
 203:000 | DONE wsp | na 16 16 |        |             |
 204:000 | DONE lbl | na 16 16 | 0060de |             | a_one                                
 205:000 | DONE dir | na 16 16 |        |             |         .!xy16                       
 206:000 | DONE ins | na 16 16 | 0060de | ca          |                 dex                  
 207:000 | DONE ins | na 16 16 | 0060df | ca          |                 dex                  
 208:000 | DONE ins | na 16 16 | 0060e0 | 94 00       |                 sty.dx 00            
 209:000 | DONE ins | na 16 16 | 0060e2 | a0 01 00    |                 ldy.# 0001           
 210:000 | DONE wsp | na 16 16 |        |             |
 211:000 | DONE lbl | na 16 16 | 0060e5 |             | z_one                                
 211:001 | DONE ins | na 16 16 | 0060e5 | 60          |                 rts                  
 212:000 | DONE wsp | na 16 16 |        |             |
 213:000 | DONE wsp | na 16 16 |        |             |
 214:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 215:000 | DONE cmt | na 16 16 |        |             | ; 1+ "ONE-PLUS" ( n -- n+1 ) 1 bytes / 2 cycles
 216:000 | DONE cmt | na 16 16 |        |             | ; Add 1 to TOS. Because there is no checking if there is actually anything on
 217:000 | DONE cmt | na 16 16 |        |             | ; the Data Stack, this routine will fail silently if the stack is empty.
 218:000 | DONE wsp | na 16 16 |        |             |
 219:000 | DONE lbl | na 16 16 | 0060e6 |             | a_one-plus                           
 219:001 | DONE ins | na 16 16 | 0060e6 | c8          |                 iny                  
 220:000 | DONE lbl | na 16 16 | 0060e7 |             | z_one-plus                           
 220:001 | DONE ins | na 16 16 | 0060e7 | 60          |                 rts                  
 221:000 | DONE wsp | na 16 16 |        |             |
 222:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 223:000 | DONE cmt | na 16 16 |        |             | ; 2 "TWO" ( -- 2 ) 7 bytes / 12 cycles
 224:000 | DONE cmt | na 16 16 |        |             | ; Pushes the number 2 on the Data Stack
 225:000 | DONE wsp | na 16 16 |        |             |
 226:000 | DONE lbl | na 16 16 | 0060e8 |             | a_two                                
 227:000 | DONE dir | na 16 16 |        |             |         .!xy16                       
 228:000 | DONE ins | na 16 16 | 0060e8 | ca          |                 dex                  
 229:000 | DONE ins | na 16 16 | 0060e9 | ca          |                 dex                  
 230:000 | DONE ins | na 16 16 | 0060ea | 94 00       |                 sty.dx 00            
 231:000 | DONE ins | na 16 16 | 0060ec | a0 02 00    |                 ldy.# 0002           
 232:000 | DONE wsp | na 16 16 |        |             |
 233:000 | DONE lbl | na 16 16 | 0060ef |             | z_two                                
 233:001 | DONE ins | na 16 16 | 0060ef | 60          |                 rts                  
 234:000 | DONE wsp | na 16 16 |        |             |
 235:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 236:000 | DONE cmt | na 16 16 |        |             | ; 2DUP ( n m -- n m n m ) 10 bytes / 23 cycles
 237:000 | DONE cmt | na 16 16 |        |             | ; Duplicated the top two data stack entries
 238:000 | DONE wsp | na 16 16 |        |             |
 239:000 | DONE lbl | na 16 16 | 0060f0 |             | a_2dup                               
 240:000 | DONE ins | na 16 16 | 0060f0 | ca          |                 dex                  
 241:000 | DONE ins | na 16 16 | 0060f1 | ca          |                 dex                  
 242:000 | DONE ins | na 16 16 | 0060f2 | ca          |                 dex                  
 243:000 | DONE ins | na 16 16 | 0060f3 | ca          |                 dex                  
 244:000 | DONE ins | na 16 16 | 0060f4 | 94 02       |                 sty.dx 02            
 245:000 | DONE ins | na 16 16 | 0060f6 | b5 04       |                 lda.dx 04            
 246:000 | DONE ins | na 16 16 | 0060f8 | 95 00       |                 sta.dx 00            
 247:000 | DONE wsp | na 16 16 |        |             |
 248:000 | DONE lbl | na 16 16 | 0060fa |             | z_2dup                               
 248:001 | DONE ins | na 16 16 | 0060fa | 60          |                 rts                  
 249:000 | DONE wsp | na 16 16 |        |             |
 250:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 251:000 | DONE cmt | na 16 16 |        |             | ; ACCEPT ( addr n1 -- n2 ) X bytes / X cycles
 252:000 | DONE cmt | na 16 16 |        |             | ; Receive a string of at most n1 characters, placing them at addr. Return the
 253:000 | DONE cmt | na 16 16 |        |             | ; actual number of characters as n2. Characters are echoed as they are received.
 254:000 | DONE cmt | na 16 16 |        |             | ; ACCEPT is normally called by REFILL these days.
 255:000 | DONE wsp | na 16 16 |        |             |
 256:000 | DONE lbl | na 16 16 | 0060fb |             | a_accept                             
 257:000 | DONE cmt | na 16 16 |        |             |                 ; Set up loop
 258:000 | DONE ins | na 16 16 | 0060fb | b5 00       |                 lda.dx 00            ; max number of chars to accept is NOS
 259:000 | DONE ins | na 16 16 | 0060fd | d0 04       |                 bne 006103           
 260:000 | DONE wsp | na 16 16 |        |             |
 261:000 | DONE ins | na 16 16 | 0060ff | a8          |                 tay                  ; if we were told to get zero chars, just quit TODO TEST
 262:000 | DONE ins | na 16 16 | 006100 | e8          |                 inx                  
 263:000 | DONE ins | na 16 16 | 006101 | e8          |                 inx                  
 264:000 | DONE ins | na 16 16 | 006102 | 60          |                 rts                  
 265:000 | DONE wsp | na 16 16 |        |             |
 266:000 | DONE lbl | na 16 16 | 006103 |             | accept_nonzero                       
 267:000 | DONE ins | na 16 16 | 006103 | 85 18       |                 sta.d 000218         ; non-zero number of chars requested, save in tmp2
 268:000 | DONE ins | na 16 16 | 006105 | 84 16       |                 sty.d 000216         ; address of buffer to use in tmp1
 269:000 | DONE ins | na 16 16 | 006107 | a0 00 00    |                 ldy.# 0000           ; TOS is dropped anyway, so don't save Y
 270:000 | DONE ins | na 16 16 | 00610a | e2 20       |                 sep 20               
 270:001 | DONE ctl | na  8 16 |        |             |         .!a8
 271:000 | DONE wsp | na  8 16 |        |             |
 272:000 | DONE lbl | na  8 16 | 00610c |             | accept_loop                          
 273:000 | DONE cmt | na  8 16 |        |             |                 ; TODO rewrite with KEY so we can revector it
 274:000 | DONE cmt | na  8 16 |        |             |                 ; We don't need to check for CTRL-l, because vt100 terminal
 275:000 | DONE cmt | na  8 16 |        |             |                 ; clears the screen automatically
 276:000 | DONE ins | na  8 16 | 00610c | 20 41 60    |                 jsr 006041           
 277:000 | DONE dir | na  8 16 |        |             |         .!a8                         
 278:000 | DONE ins | na  8 16 | 00610f | c9 0a       |                 cmp.# AscLF          ; we quit on both line feed and carriage return
 279:000 | DONE ins | na  8 16 | 006111 | f0 44       |                 beq 006157           
 280:000 | DONE ins | na  8 16 | 006113 | c9 0d       |                 cmp.# AscCR          
 281:000 | DONE ins | na  8 16 | 006115 | f0 40       |                 beq 006157           
 282:000 | DONE wsp | na  8 16 |        |             |
 283:000 | DONE ins | na  8 16 | 006117 | c9 08       |                 cmp.# AscBS          ; BS and DEL do the same thing for the moment
 284:000 | DONE ins | na  8 16 | 006119 | f0 43       |                 beq 00615e           
 285:000 | DONE ins | na  8 16 | 00611b | c9 7f       |                 cmp.# AscDEL         
 286:000 | DONE ins | na  8 16 | 00611d | f0 3f       |                 beq 00615e           
 287:000 | DONE wsp | na  8 16 |        |             |
 288:000 | DONE ins | na  8 16 | 00611f | c9 03       |                 cmp.# AscCC          ; CTRL-c aborts (see if this is too harsh)
 289:000 | DONE ins | na  8 16 | 006121 | d0 03       |                 bne 006126           
 290:000 | DONE ins | na  8 16 | 006123 | 4c 93 60    |                 jmp 006093           ; ABORT switches back to 16-bit A
 291:000 | DONE lbl | na  8 16 | 006126 |             | @                                    
 292:000 | DONE ins | na  8 16 | 006126 | c9 1b       |                 cmp.# AscESC         ; ESC aborts (in this version)
 293:000 | DONE ins | na  8 16 | 006128 | d0 03       |                 bne 00612d           
 294:000 | DONE ins | na  8 16 | 00612a | 4c 93 60    |                 jmp 006093           ; ABORT switches back to 16-bit A
 295:000 | DONE lbl | na  8 16 | 00612d |             | @                                    
 296:000 | DONE cmt | na  8 16 |        |             |                 ; CTRL-p, will be used for "previous cmd", TODO
 297:000 | DONE ins | na  8 16 | 00612d | c9 10       |                 cmp.# AscCP          
 298:000 | DONE ins | na  8 16 | 00612f | d0 0c       |                 bne 00613d           
 299:000 | DONE ins | na  8 16 | 006131 | c2 20       |                 rep 20               
 299:001 | DONE ctl | na 16 16 |        |             |         .!a16
 300:000 | DONE ins | na 16 16 | 006133 | a9 85 67    |                 lda.# 006785         
 301:000 | DONE ins | na 16 16 | 006136 | 20 71 65    |                 jsr 006571           
 302:000 | DONE ins | na 16 16 | 006139 | e2 20       |                 sep 20               
 302:001 | DONE ctl | na  8 16 |        |             |         .!a8
 303:000 | DONE ins | na  8 16 | 00613b | 80 cf       |                 bra 00610c           
 304:000 | DONE wsp | na  8 16 |        |             |
 305:000 | DONE lbl | na  8 16 | 00613d |             | @                                    
 306:000 | DONE cmt | na  8 16 |        |             |                 ; CTRL-n, will be used for "next cmd", TODO
 307:000 | DONE ins | na  8 16 | 00613d | c9 0e       |                 cmp.# AscCN          
 308:000 | DONE ins | na  8 16 | 00613f | d0 0c       |                 bne 00614d           
 309:000 | DONE ins | na  8 16 | 006141 | c2 20       |                 rep 20               
 309:001 | DONE ctl | na 16 16 |        |             |         .!a16
 310:000 | DONE ins | na 16 16 | 006143 | a9 98 67    |                 lda.# 006798         
 311:000 | DONE ins | na 16 16 | 006146 | 20 71 65    |                 jsr 006571           
 312:000 | DONE ins | na 16 16 | 006149 | e2 20       |                 sep 20               
 312:001 | DONE ctl | na  8 16 |        |             |         .!a8
 313:000 | DONE ins | na  8 16 | 00614b | 80 bf       |                 bra 00610c           
 314:000 | DONE wsp | na  8 16 |        |             |
 315:000 | DONE lbl | na  8 16 | 00614d |             | @                                    
 316:000 | DONE cmt | na  8 16 |        |             |                 ; That's enough, echo character (TODO change to EMIT)
 317:000 | DONE ins | na  8 16 | 00614d | 20 30 60    |                 jsr 006030           ; echo character
 318:000 | DONE dir | na  8 16 |        |             |         .!a8                         
 319:000 | DONE cmt | na  8 16 |        |             |                 ; TODO multitasking: Add PAUSE here (or in EMIT)
 320:000 | DONE wsp | na  8 16 |        |             |
 321:000 | DONE ins | na  8 16 | 006150 | 91 0c       |                 sta.diy 00020c       ; STA (CIB),Y
 322:000 | DONE ins | na  8 16 | 006152 | c8          |                 iny                  
 323:000 | DONE ins | na  8 16 | 006153 | c4 18       |                 cpy.d 000218         ; reached character limit?
 324:000 | DONE ins | na  8 16 | 006155 | d0 b5       |                 bne 00610c           ; fall thru if buffer limit reached
 325:000 | DONE wsp | na  8 16 |        |             |
 326:000 | DONE lbl | na  8 16 | 006157 |             | accept_eol                           
 327:000 | DONE ins | na  8 16 | 006157 | 84 0e       |                 sty.d 00020e         ; Y contains number of chars accepted already
 328:000 | DONE ins | na  8 16 | 006159 | e8          |                 inx                  
 329:000 | DONE ins | na  8 16 | 00615a | e8          |                 inx                  
 330:000 | DONE ins | na  8 16 | 00615b | c2 20       |                 rep 20               
 330:001 | DONE ctl | na 16 16 |        |             |         .!a16
 331:000 | DONE ins | na 16 16 | 00615d | 60          |                 rts                  ; this is the actual return of the routine
 332:000 | DONE wsp | na 16 16 |        |             |
 333:000 | DONE lbl | na 16 16 | 00615e |             | accept_bs                            
 334:000 | DONE dir | na  8 16 |        |             |         .!a8                         
 335:000 | DONE ins | na  8 16 | 00615e | c0 00 00    |                 cpy.# 00             ; buffer empty?
 336:000 | DONE ins | na  8 16 | 006161 | d0 06       |                 bne 006169           
 337:000 | DONE wsp | na  8 16 |        |             |
 338:000 | DONE ins | na  8 16 | 006163 | a9 07       |                 lda.# AscBELL        ; complain and don't delete beyond the start of line
 339:000 | DONE ins | na  8 16 | 006165 | 20 30 60    |                 jsr 006030           
 340:000 | DONE ins | na  8 16 | 006168 | c8          |                 iny                  
 341:000 | DONE lbl | na  8 16 | 006169 |             | @                                    
 342:000 | DONE ins | na  8 16 | 006169 | 88          |                 dey                  
 343:000 | DONE ins | na  8 16 | 00616a | a9 08       |                 lda.# AscBS          ; move back one
 344:000 | DONE ins | na  8 16 | 00616c | 20 30 60    |                 jsr 006030           
 345:000 | DONE ins | na  8 16 | 00616f | a9 20       |                 lda.# AscSP          ; print a space
 346:000 | DONE ins | na  8 16 | 006171 | 20 30 60    |                 jsr 006030           
 347:000 | DONE ins | na  8 16 | 006174 | a9 08       |                 lda.# AscBS          ; move back over space
 348:000 | DONE ins | na  8 16 | 006176 | 20 30 60    |                 jsr 006030           
 349:000 | DONE wsp | na  8 16 |        |             |
 350:000 | DONE ins | na  8 16 | 006179 | 80 91       |                 bra 00610c           
 351:000 | DONE wsp | na  8 16 |        |             |
 352:000 | DONE lbl | na  8 16 | 00617b |             | z_accept                             
 352:001 | DONE ins | na  8 16 | 00617b | 60          |                 rts                  
 353:000 | DONE wsp | na  8 16 |        |             |
 354:000 | DONE wsp | na  8 16 |        |             |
 355:000 | DONE cmt | na  8 16 |        |             | ; -------------------------------------------------------------------
 356:000 | DONE cmt | na  8 16 |        |             | ; BELL ( -- ) X bytes / X cycles
 357:000 | DONE cmt | na  8 16 |        |             | ; Trigger terminal bell
 358:000 | DONE wsp | na  8 16 |        |             |
 359:000 | DONE lbl | na  8 16 | 00617c |             | a_bell                               
 360:000 | DONE dir | na 16 16 |        |             |         .!a16                        
 361:000 | DONE ins | na 16 16 | 00617c | a9 07 00    |                 lda.# AscBELL        
 362:000 | DONE ins | na 16 16 | 00617f | 20 30 60    |                 jsr 006030           
 363:000 | DONE wsp | na 16 16 |        |             |
 364:000 | DONE lbl | na 16 16 | 006182 |             | z_bell                               
 364:001 | DONE ins | na 16 16 | 006182 | 60          |                 rts                  
 365:000 | DONE wsp | na 16 16 |        |             |
 366:000 | DONE wsp | na 16 16 |        |             |
 367:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 368:000 | DONE cmt | na 16 16 |        |             | ; BL ( -- u ) 7 bytes / 12 cycles
 369:000 | DONE cmt | na 16 16 |        |             | ; Put ASCII char for SPACE on Data Stack
 370:000 | DONE wsp | na 16 16 |        |             |
 371:000 | DONE lbl | na 16 16 | 006183 |             | a_bl                                 
 372:000 | DONE dir | na 16 16 |        |             |         .!xy16                       
 373:000 | DONE dir | na 16 16 |        |             |         .!a16                        
 374:000 | DONE ins | na 16 16 | 006183 | ca          |                 dex                  
 375:000 | DONE ins | na 16 16 | 006184 | ca          |                 dex                  
 376:000 | DONE ins | na 16 16 | 006185 | 94 00       |                 sty.dx 00            
 377:000 | DONE ins | na 16 16 | 006187 | a0 20 00    |                 ldy.# AscSP          
 378:000 | DONE wsp | na 16 16 |        |             |
 379:000 | DONE lbl | na 16 16 | 00618a |             | z_bl                                 
 379:001 | DONE ins | na 16 16 | 00618a | 60          |                 rts                  
 380:000 | DONE wsp | na 16 16 |        |             |
 381:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 382:000 | DONE cmt | na 16 16 |        |             | ; BYE ( -- ) 2 bytes / 7-8 cycles
 383:000 | DONE cmt | na 16 16 |        |             | ; Leave Liara Forth, returning to Mensch Monitor
 384:000 | DONE wsp | na 16 16 |        |             |
 385:000 | DONE lbl | na 16 16 | 00618b |             | a_bye                                
 385:001 | DONE ins | na 16 16 | 00618b | 00 00       |                 brk 00               ; status byte 00 required for assembler
 386:000 | DONE lbl | na 16 16 | 00618d |             | z_bye                                
 386:001 | DONE ins | na 16 16 | 00618d | 60          |                 rts                  ; dummy for compiling, never reached
 387:000 | DONE wsp | na 16 16 |        |             |
 388:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 389:000 | DONE cmt | na 16 16 |        |             | ; COMMA "," ( n -- ) 11 bytes / 29 cycles
 390:000 | DONE cmt | na 16 16 |        |             | ; Allot one cell and store TOS in memory. We ignore alignment issues, though
 391:000 | DONE cmt | na 16 16 |        |             | ; satisfy the ANSI requirement that an aligned compiler pointer will remain
 392:000 | DONE cmt | na 16 16 |        |             | ; aligned
 393:000 | DONE cmt | na 16 16 |        |             | ; There is another variant possible:
 394:000 | DONE cmt | na 16 16 |        |             | ;               tya
 395:000 | DONE cmt | na 16 16 |        |             | ;               ldy.d cp
 396:000 | DONE cmt | na 16 16 |        |             | ;               sta.y 0000
 397:000 | DONE cmt | na 16 16 |        |             | ;               iny
 398:000 | DONE cmt | na 16 16 |        |             | ;               iny
 399:000 | DONE cmt | na 16 16 |        |             | ;               sty.d cp
 400:000 | DONE cmt | na 16 16 |        |             | ;               ldy.dx 00
 401:000 | DONE cmt | na 16 16 |        |             | ;               inx
 402:000 | DONE cmt | na 16 16 |        |             | ;               inx
 403:000 | DONE cmt | na 16 16 |        |             | ; This is as fast as the variant below, but three bytes longer
 404:000 | DONE wsp | na 16 16 |        |             |
 405:000 | DONE lbl | na 16 16 | 00618e |             | a_comma                              
 405:001 | DONE ins | na 16 16 | 00618e | 98          |                 tya                  
 406:000 | DONE ins | na 16 16 | 00618f | 92 00       |                 sta.di 000200        ; STA (CP)
 407:000 | DONE ins | na 16 16 | 006191 | e6 00       |                 inc.d 000200         
 408:000 | DONE ins | na 16 16 | 006193 | e6 00       |                 inc.d 000200         
 409:000 | DONE wsp | na 16 16 |        |             |
 410:000 | DONE ins | na 16 16 | 006195 | b4 00       |                 ldy.dx 00            
 411:000 | DONE ins | na 16 16 | 006197 | e8          |                 inx                  
 412:000 | DONE ins | na 16 16 | 006198 | e8          |                 inx                  
 413:000 | DONE wsp | na 16 16 |        |             |
 414:000 | DONE lbl | na 16 16 | 006199 |             | z_comma                              
 414:001 | DONE ins | na 16 16 | 006199 | 60          |                 rts                  
 415:000 | DONE wsp | na 16 16 |        |             |
 416:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 417:000 | DONE cmt | na 16 16 |        |             | ; COUNT ( c-addr -- addr u ) 14 bytes / X cycles
 418:000 | DONE cmt | na 16 16 |        |             | ; Convert old-style character string to address-length pair. Note that the
 419:000 | DONE cmt | na 16 16 |        |             | ; length of the string c-addr ist stored in character length (8 bit), not cell
 420:000 | DONE cmt | na 16 16 |        |             | ; length (16 bit). This is rarely used these days, though COUNT can also be used
 421:000 | DONE cmt | na 16 16 |        |             | ; to step through a string character by character.
 422:000 | DONE wsp | na 16 16 |        |             |
 423:000 | DONE lbl | na 16 16 | 00619a |             | a_count                              
 424:000 | DONE dir | na 16 16 |        |             |         .!a16                        
 425:000 | DONE dir | na 16 16 |        |             |         .!xy16                       
 426:000 | DONE ins | na 16 16 | 00619a | 98          |                 tya                  
 427:000 | DONE ins | na 16 16 | 00619b | 1a          |                 inc.a                ; String address starts one char later
 428:000 | DONE ins | na 16 16 | 00619c | ca          |                 dex                  
 429:000 | DONE ins | na 16 16 | 00619d | ca          |                 dex                  
 430:000 | DONE ins | na 16 16 | 00619e | 95 00       |                 sta.dx 00            ; NOS
 431:000 | DONE wsp | na 16 16 |        |             |
 432:000 | DONE ins | na 16 16 | 0061a0 | b9 00 00    |                 lda.y 0000           ; LDA $0000,Y  first byte is length
 433:000 | DONE ins | na 16 16 | 0061a3 | eb          |                 xba                  ; move length to LSB
 434:000 | DONE ins | na 16 16 | 0061a4 | 29 ff 00    |                 and.# 00ff           ; get rid of whatever was MSB
 435:000 | DONE ins | na 16 16 | 0061a7 | a8          |                 tay                  ; TOS
 436:000 | DONE wsp | na 16 16 |        |             |
 437:000 | DONE lbl | na 16 16 | 0061a8 |             | z_count                              
 437:001 | DONE ins | na 16 16 | 0061a8 | 60          |                 rts                  
 438:000 | DONE wsp | na 16 16 |        |             |
 439:000 | DONE wsp | na 16 16 |        |             |
 440:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 441:000 | DONE cmt | na 16 16 |        |             | ; CR ( -- ) X bytes / X cycles
 442:000 | DONE cmt | na 16 16 |        |             | ; Cause following output to appear at beginning of next line
 443:000 | DONE wsp | na 16 16 |        |             |
 444:000 | DONE lbl | na 16 16 | 0061a9 |             | a_cr                                 
 445:000 | DONE ins | na 16 16 | 0061a9 | e2 20       |                 sep 20               
 445:001 | DONE ctl | na  8 16 |        |             |         .!a8
 446:000 | DONE ins | na  8 16 | 0061ab | a9 0a       |                 lda.# AscLF          ; test with AscCR for emulators
 447:000 | DONE ins | na  8 16 | 0061ad | 20 30 60    |                 jsr 006030           
 448:000 | DONE ins | na  8 16 | 0061b0 | c2 20       |                 rep 20               
 448:001 | DONE ctl | na 16 16 |        |             |         .!a16
 449:000 | DONE wsp | na 16 16 |        |             |
 450:000 | DONE lbl | na 16 16 | 0061b2 |             | z_cr                                 
 450:001 | DONE ins | na 16 16 | 0061b2 | 60          |                 rts                  
 451:000 | DONE wsp | na 16 16 |        |             |
 452:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 453:000 | DONE cmt | na 16 16 |        |             | ; DROP ( n -- ) 4 bytes / 9 cycles
 454:000 | DONE cmt | na 16 16 |        |             | ; Drop first entry on Data Stack
 455:000 | DONE wsp | na 16 16 |        |             |
 456:000 | DONE lbl | na 16 16 | 0061b3 |             | a_drop                               
 457:000 | DONE dir | na 16 16 |        |             |         .!xy16                       
 458:000 | DONE ins | na 16 16 | 0061b3 | b4 00       |                 ldy.dx 00            
 459:000 | DONE ins | na 16 16 | 0061b5 | e8          |                 inx                  
 460:000 | DONE ins | na 16 16 | 0061b6 | e8          |                 inx                  
 461:000 | DONE wsp | na 16 16 |        |             |
 462:000 | DONE lbl | na 16 16 | 0061b7 |             | z_drop                               
 462:001 | DONE ins | na 16 16 | 0061b7 | 60          |                 rts                  
 463:000 | DONE wsp | na 16 16 |        |             |
 464:000 | DONE wsp | na 16 16 |        |             |
 465:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 466:000 | DONE cmt | na 16 16 |        |             | ; DUP  ( n -- n n ) 4 bytes / 9 cycles
 467:000 | DONE cmt | na 16 16 |        |             | ; Duplicate first entry on Data Stack
 468:000 | DONE wsp | na 16 16 |        |             |
 469:000 | DONE lbl | na 16 16 | 0061b8 |             | a_dup                                
 470:000 | DONE dir | na 16 16 |        |             |         .!xy16                       
 471:000 | DONE ins | na 16 16 | 0061b8 | ca          |                 dex                  
 472:000 | DONE ins | na 16 16 | 0061b9 | ca          |                 dex                  
 473:000 | DONE ins | na 16 16 | 0061ba | 94 00       |                 sty.dx 00            
 474:000 | DONE wsp | na 16 16 |        |             |
 475:000 | DONE lbl | na 16 16 | 0061bc |             | z_dup                                
 475:001 | DONE ins | na 16 16 | 0061bc | 60          |                 rts                  
 476:000 | DONE wsp | na 16 16 |        |             |
 477:000 | DONE wsp | na 16 16 |        |             |
 478:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 479:000 | DONE cmt | na 16 16 |        |             | ; EXECUTE ( xt -- ) X bytes / X cycles
 480:000 | DONE cmt | na 16 16 |        |             | ; Run a word with help of its xt on the TOS
 481:000 | DONE wsp | na 16 16 |        |             |
 482:000 | DONE cmt | na 16 16 |        |             | ; Reserve three bytes for the jump - three in case we want to expand to the full
 483:000 | DONE cmt | na 16 16 |        |             | ; range
 484:000 | DONE lbl | na 16 16 | 0061bd |             | execute_ip                           
 484:001 | DONE dir | na 16 16 | 0061bd | (3 bytes)   |         .byte 00, 00, 00             
 484:001 | DONE dir | na 16 16 |        |             |                 00 00 00                 --  . . .
 485:000 | DONE wsp | na 16 16 |        |             |
 486:000 | DONE lbl | na 16 16 | 0061c0 |             | a_execute                            
 487:000 | DONE dir | na 16 16 |        |             |         .!xy16                       
 488:000 | DONE cmt | na 16 16 |        |             | 		; Store the xt for later use and then drop it off the stack
 489:000 | DONE ins | na 16 16 | 0061c0 | 8c bd 61    |                 sty 0061bd           
 490:000 | DONE ins | na 16 16 | 0061c3 | b4 00       |                 ldy.dx 00            
 491:000 | DONE ins | na 16 16 | 0061c5 | e8          |                 inx                  
 492:000 | DONE ins | na 16 16 | 0061c6 | e8          |                 inx                  
 493:000 | DONE wsp | na 16 16 |        |             |
 494:000 | DONE cmt | na 16 16 |        |             |                 ; Only JMP has the addressing mode we need, and all the
 495:000 | DONE cmt | na 16 16 |        |             |                 ; Forth commands end with a RTS instruction. We fake the address
 496:000 | DONE cmt | na 16 16 |        |             |                 ; by saving it by hand to the stack
 497:000 | DONE dir | na 16 16 |        |             |         .!a16                        
 498:000 | DONE ins | na 16 16 | 0061c7 | a9 ce 61    |                 lda.# 0061ce         
 499:000 | DONE ins | na 16 16 | 0061ca | 48          |                 pha                  
 500:000 | DONE ins | na 16 16 | 0061cb | 6c bd 61    |                 jmp.i 0061bd         ; JMP (EXECUTE_IP)
 501:000 | DONE wsp | na 16 16 |        |             |
 502:000 | DONE lbl | na 16 16 | 0061ce |             | execute_done                         ; keep the NOP here as the landing site for the indirect
 503:000 | DONE cmt | na 16 16 |        |             |                 ; subroutine jump (easier and quicker than adjusting the
 504:000 | DONE cmt | na 16 16 |        |             |                 ; return address on the stack)
 505:000 | DONE ins | na 16 16 | 0061ce | ea          |                 nop                  
 506:000 | DONE wsp | na 16 16 |        |             |
 507:000 | DONE lbl | na 16 16 | 0061cf |             | z_execute                            
 507:001 | DONE ins | na 16 16 | 0061cf | 60          |                 rts                  
 508:000 | DONE wsp | na 16 16 |        |             |
 509:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 510:000 | DONE cmt | na 16 16 |        |             | ; FALSE ( -- f ) 7 bytes / 12 cycles
 511:000 | DONE cmt | na 16 16 |        |             | ; Pushes value $0000 for Forth true on Data Stack. This is the same code as for
 512:000 | DONE cmt | na 16 16 |        |             | ; ZERO, see there. Dictionary entry should have a_zero/z_zero instead of
 513:000 | DONE cmt | na 16 16 |        |             | ; a_false/z_false
 514:000 | DONE wsp | na 16 16 |        |             |
 515:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 516:000 | DONE cmt | na 16 16 |        |             | ; FIND-NAME ( addr u -- nt | 0 ) 91 bytes / X cycles
 517:000 | DONE cmt | na 16 16 |        |             | ; Given a string, find the Name Token (nt) of a word or return zero if the word
 518:000 | DONE cmt | na 16 16 |        |             | ; is not in the dictionary. We use this instead of ancient FIND to look up words
 519:000 | DONE cmt | na 16 16 |        |             | ; in the Dictionary passed by PARSE-NAME. Note this returns the nt, not the xt
 520:000 | DONE cmt | na 16 16 |        |             | ; of a word like FIND. To convert, use NAME>INT. This is a Gforth word. See
 521:000 | DONE cmt | na 16 16 |        |             | ; https://www.complang.tuwien.ac.at/forth/gforth/Docs-html/Name-token.html
 522:000 | DONE cmt | na 16 16 |        |             | ; FIND calls this word for the hard word
 523:000 | DONE lbl | na 16 16 | 0061d0 |             | a_find-name                          
 524:000 | DONE cmt | na 16 16 |        |             |                 ; We abort when we get an empty string, that is, one with
 525:000 | DONE cmt | na 16 16 |        |             |                 ; a length of zero TOS. We could test for this, but it will
 526:000 | DONE cmt | na 16 16 |        |             |                 ; happen so rarely that the speed penalty is higher if we run
 527:000 | DONE cmt | na 16 16 |        |             |                 ; the test for every single call. Looking for an empty string
 528:000 | DONE cmt | na 16 16 |        |             |                 ; does force us to check the whole dictionary, though. The test
 529:000 | DONE cmt | na 16 16 |        |             |                 ; would be 3 bytes and 4 to 6 cycles longer:
 530:000 | DONE cmt | na 16 16 |        |             |                 ;       tya                     ; force flag check
 531:000 | DONE cmt | na 16 16 |        |             |                 ;       beq find-name_failure
 532:000 | DONE dir | na 16 16 |        |             |         .!a16                        
 533:000 | DONE dir | na 16 16 |        |             |         .!xy16                       
 534:000 | DONE cmt | na 16 16 |        |             |                 ; set up loop for the first time
 535:000 | DONE ins | na 16 16 | 0061d0 | 84 06       |                 sty.d 000206         ; length of mystery string in tmptos, Y now free
 536:000 | DONE ins | na 16 16 | 0061d2 | a4 02       |                 ldy.d 000202         
 537:000 | DONE ins | na 16 16 | 0061d4 | 84 16       |                 sty.d 000216         ; nt of first Dictionary word
 538:000 | DONE ins | na 16 16 | 0061d6 | b4 00       |                 ldy.dx 00            
 539:000 | DONE ins | na 16 16 | 0061d8 | 84 18       |                 sty.d 000218         ; address of mystery string, was NOS
 540:000 | DONE wsp | na 16 16 |        |             |
 541:000 | DONE lbl | na 16 16 | 0061da |             | find-name_loop                       
 542:000 | DONE cmt | na 16 16 |        |             |                 ; First quick test: Are strings the same length?
 543:000 | DONE ins | na 16 16 | 0061da | b2 16       |                 lda.di 000216        ; LSB in first header word is length
 544:000 | DONE ins | na 16 16 | 0061dc | 29 ff 00    |                 and.# 00ff           
 545:000 | DONE ins | na 16 16 | 0061df | c5 06       |                 cmp.d 000206         ; we test LSB
 546:000 | DONE cmt | na 16 16 |        |             |                 ; Most of the time, it will not be the same, so we save one
 547:000 | DONE cmt | na 16 16 |        |             |                 ; cycle pro loop if we only take the branch when they are the
 548:000 | DONE cmt | na 16 16 |        |             |                 ; same
 549:000 | DONE ins | na 16 16 | 0061e1 | f0 0c       |                 beq 0061ef           
 550:000 | DONE wsp | na 16 16 |        |             |
 551:000 | DONE lbl | na 16 16 | 0061e3 |             | find-name_next_entry                 
 552:000 | DONE cmt | na 16 16 |        |             |                 ; next header address is two bytes down
 553:000 | DONE ins | na 16 16 | 0061e3 | e6 16       |                 inc.d 000216         
 554:000 | DONE ins | na 16 16 | 0061e5 | e6 16       |                 inc.d 000216         
 555:000 | DONE ins | na 16 16 | 0061e7 | b2 16       |                 lda.di 000216        ; LDA (TMP1)
 556:000 | DONE wsp | na 16 16 |        |             |
 557:000 | DONE cmt | na 16 16 |        |             |                 ; a zero entry marks the end of the Dictionary
 558:000 | DONE ins | na 16 16 | 0061e9 | f0 36       |                 beq 006221           
 559:000 | DONE wsp | na 16 16 |        |             |
 560:000 | DONE ins | na 16 16 | 0061eb | 85 16       |                 sta.d 000216         ; new header
 561:000 | DONE ins | na 16 16 | 0061ed | 80 eb       |                 bra 0061da           
 562:000 | DONE wsp | na 16 16 |        |             |
 563:000 | DONE lbl | na 16 16 | 0061ef |             | find-name_chars                      
 564:000 | DONE cmt | na 16 16 |        |             |                 ; Yes, same length, so we compare characters
 565:000 | DONE wsp | na 16 16 |        |             |
 566:000 | DONE cmt | na 16 16 |        |             |                 ; Switch A to 8 bit for this
 567:000 | DONE ins | na 16 16 | 0061ef | e2 20       |                 sep 20               
 567:001 | DONE ctl | na  8 16 |        |             |         .!a8
 568:000 | DONE cmt | na  8 16 |        |             |                 ; Second quick test: Check first char, which is 8 bytes into the
 569:000 | DONE cmt | na  8 16 |        |             |                 ; header
 570:000 | DONE ins | na  8 16 | 0061f1 | a0 08 00    |                 ldy.# 0008           
 571:000 | DONE ins | na  8 16 | 0061f4 | b1 16       |                 lda.diy 000216       ; LDA (TMP1),Y - first char of entry
 572:000 | DONE ins | na  8 16 | 0061f6 | d2 18       |                 cmp.di 000218        ; CMP (TMP2) - first char of mystery string
 573:000 | DONE ins | na  8 16 | 0061f8 | f0 04       |                 beq 0061fe           
 574:000 | DONE wsp | na  8 16 |        |             |
 575:000 | DONE lbl | na  8 16 | 0061fa |             | find-name_char_nomatch_8             
 576:000 | DONE cmt | na  8 16 |        |             |                 ; First char is not the same, next entry
 577:000 | DONE ins | na  8 16 | 0061fa | c2 20       |                 rep 20               
 577:001 | DONE ctl | na 16 16 |        |             |         .!a16
 578:000 | DONE ins | na 16 16 | 0061fc | 80 e5       |                 bra 0061e3           
 579:000 | DONE wsp | na 16 16 |        |             |
 580:000 | DONE lbl | na 16 16 | 0061fe |             | find-name_all_chars                  
 581:000 | DONE dir | na  8 16 |        |             |         .!a8                         
 582:000 | DONE cmt | na  8 16 |        |             |                 ; String length is the same, and the first character is the
 583:000 | DONE cmt | na  8 16 |        |             |                 ; same. If the word is only one character long, we're done
 584:000 | DONE ins | na  8 16 | 0061fe | a4 06       |                 ldy.d 000206         
 585:000 | DONE ins | na  8 16 | 006200 | 88          |                 dey                  ; faster and shorter than CPY.# 01
 586:000 | DONE ins | na  8 16 | 006201 | f0 18       |                 beq 00621b           
 587:000 | DONE wsp | na  8 16 |        |             |
 588:000 | DONE cmt | na  8 16 |        |             |                 ; No such luck: The strings are the same length and the first
 589:000 | DONE cmt | na  8 16 |        |             |                 ; char is the same, but the word is more than one char long. So
 590:000 | DONE cmt | na  8 16 |        |             |                 ; we suck it up and compare every single character. We go from
 591:000 | DONE cmt | na  8 16 |        |             |                 ; back to front, because words like CELLS and CELL+ would take
 592:000 | DONE cmt | na  8 16 |        |             |                 ; longer otherwise. We can also shorten the loop by one because
 593:000 | DONE cmt | na  8 16 |        |             |                 ; we've already compared the first char.
 594:000 | DONE wsp | na  8 16 |        |             |
 595:000 | DONE cmt | na  8 16 |        |             |                 ; Even worse, we have to add 8 bytes to address of Dictionary
 596:000 | DONE cmt | na  8 16 |        |             |                 ; string to allow testing with one loop. We need this like
 597:000 | DONE cmt | na  8 16 |        |             |                 ; a hole in the head because we just switched A to 8 bit.
 598:000 | DONE cmt | na  8 16 |        |             |                 ; However, staying with an 8-bit A is even slower.
 599:000 | DONE ins | na  8 16 | 006203 | c2 20       |                 rep 20               
 599:001 | DONE ctl | na 16 16 |        |             |         .!a16
 600:000 | DONE ins | na 16 16 | 006205 | a5 16       |                 lda.d 000216         ; address of Dictionary string
 601:000 | DONE ins | na 16 16 | 006207 | 18          |                 clc                  
 602:000 | DONE ins | na 16 16 | 006208 | 69 08 00    |                 adc.# 0008           
 603:000 | DONE ins | na 16 16 | 00620b | 85 1a       |                 sta.d 00021a         
 604:000 | DONE ins | na 16 16 | 00620d | e2 20       |                 sep 20               
 604:001 | DONE ctl | na  8 16 |        |             |         .!a8
 605:000 | DONE ins | na  8 16 | 00620f | a4 06       |                 ldy.d 000206         ; get length of strings as loop index
 606:000 | DONE ins | na  8 16 | 006211 | 88          |                 dey                  ; first index is length minus 1
 607:000 | DONE wsp | na  8 16 |        |             |
 608:000 | DONE lbl | na  8 16 | 006212 |             | @                                    
 609:000 | DONE ins | na  8 16 | 006212 | b1 18       |                 lda.diy 000218       ; LDA (TMP2),Y - last char of mystery string
 610:000 | DONE ins | na  8 16 | 006214 | d1 1a       |                 cmp.diy 00021a       ; CMP (TMP1),Y - last char of DP string
 611:000 | DONE ins | na  8 16 | 006216 | d0 e2       |                 bne 0061fa           
 612:000 | DONE ins | na  8 16 | 006218 | 88          |                 dey                  ; start of string (Y=0) was already tested
 613:000 | DONE ins | na  8 16 | 006219 | d0 f7       |                 bne 006212           
 614:000 | DONE wsp | na  8 16 |        |             |
 615:000 | DONE lbl | na  8 16 | 00621b |             | find-name_success                    
 616:000 | DONE cmt | na  8 16 |        |             |                 ; If we reach here, the strings are the same and we have a match
 617:000 | DONE cmt | na  8 16 |        |             |                 ; We get here with an 8 bit A
 618:000 | DONE ins | na  8 16 | 00621b | c2 20       |                 rep 20               
 618:001 | DONE ctl | na 16 16 |        |             |         .!a16
 619:000 | DONE ins | na 16 16 | 00621d | a4 16       |                 ldy.d 000216         ; get the correct DP
 620:000 | DONE ins | na 16 16 | 00621f | 80 03       |                 bra 006224           
 621:000 | DONE wsp | na 16 16 |        |             |
 622:000 | DONE wsp | na 16 16 |        |             |
 623:000 | DONE lbl | na 16 16 | 006221 |             | find-name_failure_16                 
 624:000 | DONE cmt | na 16 16 |        |             |                 ; Word not found in Dictionary, return zero. Assumes A is 16
 625:000 | DONE cmt | na 16 16 |        |             |                 ; bit
 626:000 | DONE ins | na 16 16 | 006221 | a0 00 00    |                 ldy.# 0000           ; fall thru
 627:000 | DONE wsp | na 16 16 |        |             |
 628:000 | DONE lbl | na 16 16 | 006224 |             | find-name_done                       
 629:000 | DONE ins | na 16 16 | 006224 | e8          |                 inx                  ; drop old address (NIP)
 630:000 | DONE ins | na 16 16 | 006225 | e8          |                 inx                  
 631:000 | DONE wsp | na 16 16 |        |             |
 632:000 | DONE lbl | na 16 16 | 006226 |             | z_find-name                          
 632:001 | DONE ins | na 16 16 | 006226 | 60          |                 rts                  
 633:000 | DONE wsp | na 16 16 |        |             |
 634:000 | DONE wsp | na 16 16 |        |             |
 635:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 636:000 | DONE cmt | na 16 16 |        |             | ; HERE ( -- u ) 6 bytes / 13 cycles
 637:000 | DONE cmt | na 16 16 |        |             | ; Push Compiler Pointer address on the Data Stack
 638:000 | DONE wsp | na 16 16 |        |             |
 639:000 | DONE lbl | na 16 16 | 006227 |             | a_here                               
 640:000 | DONE dir | na 16 16 |        |             |         .!a16                        ; paranoid
 641:000 | DONE dir | na 16 16 |        |             |         .!xy16                       
 642:000 | DONE ins | na 16 16 | 006227 | ca          |                 dex                  
 643:000 | DONE ins | na 16 16 | 006228 | ca          |                 dex                  
 644:000 | DONE ins | na 16 16 | 006229 | 94 00       |                 sty.dx 00            
 645:000 | DONE wsp | na 16 16 |        |             |
 646:000 | DONE ins | na 16 16 | 00622b | a4 00       |                 ldy.d 000200         
 647:000 | DONE wsp | na 16 16 |        |             |
 648:000 | DONE lbl | na 16 16 | 00622d |             | z_here                               
 648:001 | DONE ins | na 16 16 | 00622d | 60          |                 rts                  
 649:000 | DONE wsp | na 16 16 |        |             |
 650:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 651:000 | DONE cmt | na 16 16 |        |             | ; NAME>INT ( nt -- xt ) 4 bytes / 8 cycles
 652:000 | DONE cmt | na 16 16 |        |             | ; Given the Name Token (nt) of a word, return its Execute Token (xt)
 653:000 | DONE wsp | na 16 16 |        |             |
 654:000 | DONE lbl | na 16 16 | 00622e |             | a_name>int                           
 655:000 | DONE dir | na 16 16 |        |             |         .!a16                        
 656:000 | DONE dir | na 16 16 |        |             |         .!xy16                       
 657:000 | DONE cmt | na 16 16 |        |             | 		; The xt of a word beginns four bytes down from its nt
 658:000 | DONE ins | na 16 16 | 00622e | c8          |                 iny                  
 659:000 | DONE ins | na 16 16 | 00622f | c8          |                 iny                  
 660:000 | DONE ins | na 16 16 | 006230 | c8          |                 iny                  
 661:000 | DONE ins | na 16 16 | 006231 | c8          |                 iny                  
 662:000 | DONE ins | na 16 16 | 006232 | b9 00 00    |                 lda.y 0000           
 663:000 | DONE ins | na 16 16 | 006235 | a8          |                 tay                  
 664:000 | DONE wsp | na 16 16 |        |             |
 665:000 | DONE lbl | na 16 16 | 006236 |             | z_name>int                           
 665:001 | DONE ins | na 16 16 | 006236 | 60          |                 rts                  
 666:000 | DONE wsp | na 16 16 |        |             |
 667:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 668:000 | DONE cmt | na 16 16 |        |             | ; NAME>STRING ( nt -- addr u ) 16 bytes / X cycles
 669:000 | DONE cmt | na 16 16 |        |             | ; Given a name token (nt) of a word, return its string. This is a Gforth word
 670:000 | DONE cmt | na 16 16 |        |             | ; that works with the Dictionary header entries. It is not checked if nt is
 671:000 | DONE cmt | na 16 16 |        |             | ; a valid name token.
 672:000 | DONE lbl | na 16 16 | 006237 |             | a_name>string                        
 673:000 | DONE dir | na 16 16 |        |             |         .!a16                        
 674:000 | DONE dir | na 16 16 |        |             |         .!xy16                       
 675:000 | DONE ins | na 16 16 | 006237 | ca          |                 dex                  ; move NOS down one
 676:000 | DONE ins | na 16 16 | 006238 | ca          |                 dex                  
 677:000 | DONE wsp | na 16 16 |        |             |
 678:000 | DONE cmt | na 16 16 |        |             |                 ; the name string of a word begins 8 bytes down from its nt,
 679:000 | DONE cmt | na 16 16 |        |             |                 ; which we have as TOS
 680:000 | DONE ins | na 16 16 | 006239 | 98          |                 tya                  
 681:000 | DONE ins | na 16 16 | 00623a | 18          |                 clc                  
 682:000 | DONE ins | na 16 16 | 00623b | 69 08 00    |                 adc.# 0008           
 683:000 | DONE ins | na 16 16 | 00623e | 95 00       |                 sta.dx 00            ; NOS
 684:000 | DONE wsp | na 16 16 |        |             |
 685:000 | DONE cmt | na 16 16 |        |             |                 ; the length of the name string is in the LSB of the first word
 686:000 | DONE cmt | na 16 16 |        |             |                 ; of the dictionary entry header (the name token)
 687:000 | DONE ins | na 16 16 | 006240 | b9 00 00    |                 lda.y 0000           ; LDA $0000,Y
 688:000 | DONE ins | na 16 16 | 006243 | 29 ff 00    |                 and.# 00ff           ; mask all but length byte
 689:000 | DONE ins | na 16 16 | 006246 | a8          |                 tay                  
 690:000 | DONE wsp | na 16 16 |        |             |
 691:000 | DONE lbl | na 16 16 | 006247 |             | z_name>string                        
 691:001 | DONE ins | na 16 16 | 006247 | 60          |                 rts                  
 692:000 | DONE wsp | na 16 16 |        |             |
 693:000 | DONE wsp | na 16 16 |        |             |
 694:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 695:000 | DONE cmt | na 16 16 |        |             | ; NIP ( n m -- m ) 2 bytes / 4 cycles
 696:000 | DONE cmt | na 16 16 |        |             | ; Delete entry that is NOS
 697:000 | DONE wsp | na 16 16 |        |             |
 698:000 | DONE lbl | na 16 16 | 006248 |             | a_nip                                
 699:000 | DONE dir | na 16 16 |        |             |         .!xy16                       
 700:000 | DONE ins | na 16 16 | 006248 | e8          |                 inx                  
 701:000 | DONE ins | na 16 16 | 006249 | e8          |                 inx                  
 702:000 | DONE lbl | na 16 16 | 00624a |             | z_nip                                
 702:001 | DONE ins | na 16 16 | 00624a | 60          |                 rts                  
 703:000 | DONE wsp | na 16 16 |        |             |
 704:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 705:000 | DONE cmt | na 16 16 |        |             | ; PARSE-NAME ( "name" -- addr u ) 41+ bytes / X cycles
 706:000 | DONE cmt | na 16 16 |        |             | ; Find next word in input string, skipping leading spaces. This is a special
 707:000 | DONE cmt | na 16 16 |        |             | ; form of PARSE and drops through to that word. See PARSE for more detail. We
 708:000 | DONE cmt | na 16 16 |        |             | ; use this word internally for the interpreter because it is a lot easier to use
 709:000 | DONE cmt | na 16 16 |        |             | ; http://forth-standard.org/standard/core/PARSE-NAME has a Forth implementation
 710:000 | DONE lbl | na 16 16 | 00624b |             | a_parse-name                         
 711:000 | DONE dir | na 16 16 |        |             |         .!a16                        
 712:000 | DONE dir | na 16 16 |        |             |         .!xy16                       
 713:000 | DONE cmt | na 16 16 |        |             |                 ; skip leading spaces, changing >IN, then place SPACE
 714:000 | DONE cmt | na 16 16 |        |             |                 ; character on data stack for PARSE
 715:000 | DONE ins | na 16 16 | 00624b | 5a          |                 phy                  ; save TOS for later use
 716:000 | DONE ins | na 16 16 | 00624c | a4 12       |                 ldy.d 000212         ; >IN
 717:000 | DONE ins | na 16 16 | 00624e | e2 20       |                 sep 20               
 717:001 | DONE ctl | na  8 16 |        |             |         .!a8
 718:000 | DONE lbl | na  8 16 | 006250 |             | parse-name_loop                      
 719:000 | DONE ins | na  8 16 | 006250 | c4 0e       |                 cpy.d 00020e         ; end of line?
 720:000 | DONE ins | na  8 16 | 006252 | f0 09       |                 beq 00625d           
 721:000 | DONE wsp | na  8 16 |        |             |
 722:000 | DONE ins | na  8 16 | 006254 | b1 0c       |                 lda.diy 00020c       ; LDA (CIB),Y
 723:000 | DONE ins | na  8 16 | 006256 | c9 20       |                 cmp.# AscSP          
 724:000 | DONE ins | na  8 16 | 006258 | d0 17       |                 bne 006271           
 725:000 | DONE ins | na  8 16 | 00625a | c8          |                 iny                  
 726:000 | DONE ins | na  8 16 | 00625b | 80 f3       |                 bra 006250           
 727:000 | DONE wsp | na  8 16 |        |             |
 728:000 | DONE lbl | na  8 16 | 00625d |             | parse-name_empty_line                
 729:000 | DONE ins | na  8 16 | 00625d | c2 20       |                 rep 20               
 729:001 | DONE ctl | na 16 16 |        |             |         .!a16
 730:000 | DONE cmt | na 16 16 |        |             |                 ; The Gforth documentation does not say what address is returned
 731:000 | DONE cmt | na 16 16 |        |             |                 ; if a string with only spaces is returned. Experiments with
 732:000 | DONE cmt | na 16 16 |        |             |                 ; the word  : PNT ( "name" -- ) PARSE-NAME SWAP U. U. TYPE ;
 733:000 | DONE cmt | na 16 16 |        |             |                 ; show that it returns the address of the last space in the
 734:000 | DONE cmt | na 16 16 |        |             |                 ; input, which is cib+ciblen. So we do that as well.
 735:000 | DONE ins | na 16 16 | 00625f | ca          |                 dex                  
 736:000 | DONE ins | na 16 16 | 006260 | ca          |                 dex                  
 737:000 | DONE ins | na 16 16 | 006261 | ca          |                 dex                  
 738:000 | DONE ins | na 16 16 | 006262 | ca          |                 dex                  
 739:000 | DONE ins | na 16 16 | 006263 | 7a          |                 ply                  
 740:000 | DONE ins | na 16 16 | 006264 | 94 00       |                 sty.dx 00            
 741:000 | DONE wsp | na 16 16 |        |             |
 742:000 | DONE ins | na 16 16 | 006266 | a5 0c       |                 lda.d 00020c         
 743:000 | DONE ins | na 16 16 | 006268 | 18          |                 clc                  
 744:000 | DONE ins | na 16 16 | 006269 | 65 0e       |                 adc.d 00020e         
 745:000 | DONE ins | na 16 16 | 00626b | 95 00       |                 sta.dx 00            ; NOS address
 746:000 | DONE wsp | na 16 16 |        |             |
 747:000 | DONE ins | na 16 16 | 00626d | a0 00 00    |                 ldy.# 0000           ; TOS
 748:000 | DONE wsp | na 16 16 |        |             |
 749:000 | DONE ins | na 16 16 | 006270 | 60          |                 rts                  ; don't have to go through PARSE
 750:000 | DONE wsp | na 16 16 |        |             |
 751:000 | DONE lbl | na 16 16 | 006271 |             | parse-name_found                     
 752:000 | DONE dir | na 16 16 |        |             |         .!xy16                       
 753:000 | DONE ins | na 16 16 | 006271 | c2 20       |                 rep 20               
 753:001 | DONE ctl | na 16 16 |        |             |         .!a16
 754:000 | DONE ins | na 16 16 | 006273 | 84 12       |                 sty.d 000212         ; new >IN
 755:000 | DONE wsp | na 16 16 |        |             |
 756:000 | DONE ins | na 16 16 | 006275 | 7a          |                 ply                  ; recover TOS
 757:000 | DONE ins | na 16 16 | 006276 | ca          |                 dex                  
 758:000 | DONE ins | na 16 16 | 006277 | ca          |                 dex                  
 759:000 | DONE ins | na 16 16 | 006278 | 84 00       |                 sty.d 00             
 760:000 | DONE wsp | na 16 16 |        |             |
 761:000 | DONE ins | na 16 16 | 00627a | a0 20 00    |                 ldy.# AscSP          ; put space on TOS for PARSE
 762:000 | DONE wsp | na 16 16 |        |             |
 763:000 | DONE cmt | na 16 16 |        |             |                 ; fall thru to PARSE
 764:000 | DONE wsp | na 16 16 |        |             |
 765:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 766:000 | DONE cmt | na 16 16 |        |             | ; PARSE ( c "name" -- addr u ) 45 bytes / X+ cycles
 767:000 | DONE cmt | na 16 16 |        |             | ; Find word in input string delimited by character given Do not skip leading
 768:000 | DONE cmt | na 16 16 |        |             | ; delimiters, this is an important difference to PARSE-NAME. PARSE and
 769:000 | DONE cmt | na 16 16 |        |             | ; PARSE-NAME replace WORD in modern systems. See the ANSI documentation at
 770:000 | DONE cmt | na 16 16 |        |             | ; http://www.forth200x.org/documents/html3/rationale.html#rat:core:PARSE
 771:000 | DONE cmt | na 16 16 |        |             | ; PARSE-NAME drops through to here
 772:000 | DONE cmt | na 16 16 |        |             | ;
 773:000 | DONE cmt | na 16 16 |        |             | ;    cib   cib+toin    cib+ciblen
 774:000 | DONE cmt | na 16 16 |        |             | ;     v       v             v
 775:000 | DONE cmt | na 16 16 |        |             | ;     |#####################|              Length of found string:
 776:000 | DONE cmt | na 16 16 |        |             | ;                                          ciblen - toin
 777:000 | DONE cmt | na 16 16 |        |             | ;     +------>|  toin (>IN)
 778:000 | DONE cmt | na 16 16 |        |             | ;     +-------------------->|  ciblen
 779:000 | DONE cmt | na 16 16 |        |             | ;
 780:000 | DONE cmt | na 16 16 |        |             | ; The input string is stored starting at the address in the Current Input Buffer
 781:000 | DONE cmt | na 16 16 |        |             | ; (CIB), the length of which is in CIBLEN. While searching for the delimiter,
 782:000 | DONE cmt | na 16 16 |        |             | ; TOIN (>IN) points to the where we currently are. Since PARSE does not skip
 783:000 | DONE cmt | na 16 16 |        |             | ; leading delimiters, we assume we are on a useful string.
 784:000 | DONE lbl | na 16 16 | 00627d |             | a_parse                              
 785:000 | DONE ins | na 16 16 | 00627d | 84 16       |                 sty.d 000216         ; save delimiter, char is LSB
 786:000 | DONE wsp | na 16 16 |        |             |
 787:000 | DONE cmt | na 16 16 |        |             |                 ; save beginning of new word (cib+toin) to NOS. Don't need to
 788:000 | DONE cmt | na 16 16 |        |             |                 ; worry about TOS because Y gets clobbered anyway before we
 789:000 | DONE cmt | na 16 16 |        |             |                 ; return
 790:000 | DONE ins | na 16 16 | 00627f | a5 12       |                 lda.d 000212         
 791:000 | DONE ins | na 16 16 | 006281 | 85 1a       |                 sta.d 00021a         ; save >IN for later length calculation
 792:000 | DONE ins | na 16 16 | 006283 | 18          |                 clc                  
 793:000 | DONE ins | na 16 16 | 006284 | 65 0c       |                 adc.d 00020c         
 794:000 | DONE wsp | na 16 16 |        |             |
 795:000 | DONE ins | na 16 16 | 006286 | ca          |                 dex                  
 796:000 | DONE ins | na 16 16 | 006287 | ca          |                 dex                  
 797:000 | DONE ins | na 16 16 | 006288 | 95 00       |                 sta.dx 00            
 798:000 | DONE wsp | na 16 16 |        |             |
 799:000 | DONE ins | na 16 16 | 00628a | 64 18       |                 stz.d 000218         ; offset for EOL/char found adjustment of >IN
 800:000 | DONE wsp | na 16 16 |        |             |
 801:000 | DONE cmt | na 16 16 |        |             |                 ; prepare loop using Y as index
 802:000 | DONE ins | na 16 16 | 00628c | a4 12       |                 ldy.d 000212         
 803:000 | DONE ins | na 16 16 | 00628e | e2 20       |                 sep 20               
 803:001 | DONE ctl | na  8 16 |        |             |         .!a8
 804:000 | DONE wsp | na  8 16 |        |             |
 805:000 | DONE lbl | na  8 16 | 006290 |             | parse_loop                           
 806:000 | DONE ins | na  8 16 | 006290 | c4 0e       |                 cpy.d 00020e         ; check for EOL first
 807:000 | DONE ins | na  8 16 | 006292 | f0 0d       |                 beq 0062a1           
 808:000 | DONE wsp | na  8 16 |        |             |
 809:000 | DONE ins | na  8 16 | 006294 | b1 0c       |                 lda.diy 00020c       ; LDA (CIB),Y
 810:000 | DONE ins | na  8 16 | 006296 | c5 16       |                 cmp.d 000216         ; found delimiter?
 811:000 | DONE ins | na  8 16 | 006298 | f0 03       |                 beq 00629d           
 812:000 | DONE ins | na  8 16 | 00629a | c8          |                 iny                  
 813:000 | DONE ins | na  8 16 | 00629b | 80 f3       |                 bra 006290           
 814:000 | DONE wsp | na  8 16 |        |             |
 815:000 | DONE lbl | na  8 16 | 00629d |             | parse_found_delimiter                
 816:000 | DONE cmt | na  8 16 |        |             |                 ; If we haven't reached the end of the line, but found
 817:000 | DONE cmt | na  8 16 |        |             |                 ; a delimiter, we want >IN to point to the next character after
 818:000 | DONE cmt | na  8 16 |        |             |                 ; the delimiter, not the delimiter itself. This is what the
 819:000 | DONE cmt | na  8 16 |        |             |                 ; offset is for
 820:000 | DONE ins | na  8 16 | 00629d | c2 20       |                 rep 20               
 820:001 | DONE ctl | na 16 16 |        |             |         .!a16
 821:000 | DONE ins | na 16 16 | 00629f | e6 18       |                 inc.d 000218         
 822:000 | DONE wsp | na 16 16 |        |             |
 823:000 | DONE lbl | na 16 16 | 0062a1 |             | parse_reached_eol                    
 824:000 | DONE cmt | na 16 16 |        |             |                 ; calculate length of string found (see ascii drawing)
 825:000 | DONE ins | na 16 16 | 0062a1 | c2 20       |                 rep 20               
 825:001 | DONE ctl | na 16 16 |        |             |         .!a16
 826:000 | DONE ins | na 16 16 | 0062a3 | 98          |                 tya                  
 827:000 | DONE ins | na 16 16 | 0062a4 | 38          |                 sec                  
 828:000 | DONE ins | na 16 16 | 0062a5 | e5 1a       |                 sbc.d 00021a         ; original value for >IN / index of first char
 829:000 | DONE ins | na 16 16 | 0062a7 | 48          |                 pha                  ; save so we can manipulate Y
 830:000 | DONE wsp | na 16 16 |        |             |
 831:000 | DONE cmt | na 16 16 |        |             |                 ; calculate new >IN
 832:000 | DONE ins | na 16 16 | 0062a8 | 98          |                 tya                  
 833:000 | DONE ins | na 16 16 | 0062a9 | 18          |                 clc                  
 834:000 | DONE ins | na 16 16 | 0062aa | 65 18       |                 adc.d 000218         ; offset for EOL vs found delimiter
 835:000 | DONE ins | na 16 16 | 0062ac | 85 12       |                 sta.d 000212         
 836:000 | DONE wsp | na 16 16 |        |             |
 837:000 | DONE ins | na 16 16 | 0062ae | 7a          |                 ply                  ; length of string in TOS
 838:000 | DONE wsp | na 16 16 |        |             |
 839:000 | DONE lbl | na 16 16 | 0062af |             | z_parse-name                         
 840:000 | DONE lbl | na 16 16 | 0062af |             | z_parse                              
 840:001 | DONE ins | na 16 16 | 0062af | 60          |                 rts                  
 841:000 | DONE wsp | na 16 16 |        |             |
 842:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 843:000 | DONE cmt | na 16 16 |        |             | ; REFILL ( -- f ) X bytes / X cycles
 844:000 | DONE cmt | na 16 16 |        |             | ; "Attempt to fill the input buffer from the input source, returning a true flag
 845:000 | DONE cmt | na 16 16 |        |             | ; if successful. When the input source is the user input device, attempt to
 846:000 | DONE cmt | na 16 16 |        |             | ; receive input into the terminal input buffer. If successful, make the result
 847:000 | DONE cmt | na 16 16 |        |             | ; the input buffer, set >IN to zero, and return true. Receipt of a line
 848:000 | DONE cmt | na 16 16 |        |             | ; containing no characters is considered successful. If there is no input
 849:000 | DONE cmt | na 16 16 |        |             | ; available from the current input source, return false. When the input source
 850:000 | DONE cmt | na 16 16 |        |             | ; is a string from EVALUATE, return false and perform no other action."
 851:000 | DONE cmt | na 16 16 |        |             | ; See https://www.complang.tuwien.ac.at/forth/gforth/Docs-html/The-Input-Stream.html
 852:000 | DONE cmt | na 16 16 |        |             | ; and Conklin & Rather p. 156
 853:000 | DONE lbl | na 16 16 | 0062b0 |             | a_refill                             
 854:000 | DONE dir | na 16 16 |        |             |         .!a16                        
 855:000 | DONE dir | na 16 16 |        |             |         .!xy16                       
 856:000 | DONE cmt | na 16 16 |        |             |                 ; We handle buffer switches here so that regardless of input
 857:000 | DONE cmt | na 16 16 |        |             |                 ; source, we have access to the previous input. This is not in
 858:000 | DONE cmt | na 16 16 |        |             |                 ; the ANSI specification in any way.
 859:000 | DONE ins | na 16 16 | 0062b0 | a5 0c       |                 lda.d 00020c         
 860:000 | DONE ins | na 16 16 | 0062b2 | 49 00 01    |                 eor.# 0100           ; flip 07d00 / 07c00
 861:000 | DONE ins | na 16 16 | 0062b5 | 85 0c       |                 sta.d 00020c         
 862:000 | DONE wsp | na 16 16 |        |             |
 863:000 | DONE ins | na 16 16 | 0062b7 | a5 0e       |                 lda.d 00020e         ; current length is now previous length
 864:000 | DONE ins | na 16 16 | 0062b9 | 85 10       |                 sta.d 000210         
 865:000 | DONE wsp | na 16 16 |        |             |
 866:000 | DONE cmt | na 16 16 |        |             |                 ; Get input source from SOURCE-ID. We don't have blocks in this
 867:000 | DONE cmt | na 16 16 |        |             |                 ; version, or else we would have to check BLK first. This is an
 868:000 | DONE cmt | na 16 16 |        |             |                 ; optimized version of a subroutine jump to SOURCE-ID
 869:000 | DONE ins | na 16 16 | 0062bb | a5 0a       |                 lda.d 00020a         
 870:000 | DONE ins | na 16 16 | 0062bd | d0 18       |                 bne 0062d7           
 871:000 | DONE wsp | na 16 16 |        |             |
 872:000 | DONE cmt | na 16 16 |        |             |                 ; SOURCE-ID of zero means we're getting stuff from the keyboard
 873:000 | DONE cmt | na 16 16 |        |             |                 ; with ACCEPT.
 874:000 | DONE ins | na 16 16 | 0062bf | ca          |                 dex                  ; push Data Stack down twice
 875:000 | DONE ins | na 16 16 | 0062c0 | ca          |                 dex                  
 876:000 | DONE ins | na 16 16 | 0062c1 | ca          |                 dex                  
 877:000 | DONE ins | na 16 16 | 0062c2 | ca          |                 dex                  
 878:000 | DONE ins | na 16 16 | 0062c3 | 94 02       |                 sty.dx 02            
 879:000 | DONE wsp | na 16 16 |        |             |
 880:000 | DONE ins | na 16 16 | 0062c5 | a9 ff 00    |                 lda.# 0000ff         ; 256 chars, ANSI demands at least 80 as NOS
 881:000 | DONE ins | na 16 16 | 0062c8 | 95 00       |                 sta.dx 00            
 882:000 | DONE ins | na 16 16 | 0062ca | a4 0c       |                 ldy.d 00020c         ; address of current input buffer TOS
 883:000 | DONE wsp | na 16 16 |        |             |
 884:000 | DONE ins | na 16 16 | 0062cc | 20 fb 60    |                 jsr 0060fb           
 885:000 | DONE wsp | na 16 16 |        |             |
 886:000 | DONE dir | na 16 16 |        |             |         .!a16                        ; paranoid
 887:000 | DONE cmt | na 16 16 |        |             |                 ; Add success flag TRUE
 888:000 | DONE ins | na 16 16 | 0062cf | ca          |                 dex                  
 889:000 | DONE ins | na 16 16 | 0062d0 | ca          |                 dex                  
 890:000 | DONE ins | na 16 16 | 0062d1 | 94 00       |                 sty.dx 00            
 891:000 | DONE ins | na 16 16 | 0062d3 | a0 ff ff    |                 ldy.# 0ffff          
 892:000 | DONE wsp | na 16 16 |        |             |
 893:000 | DONE ins | na 16 16 | 0062d6 | 60          |                 rts                  
 894:000 | DONE wsp | na 16 16 |        |             |
 895:000 | DONE lbl | na 16 16 | 0062d7 |             | refill_src_not_kbd                   
 896:000 | DONE cmt | na 16 16 |        |             |                 ; If SOURCE-ID doesn't return a zero, it must be a string in
 897:000 | DONE cmt | na 16 16 |        |             |                 ; memory or a file (remember, no blocks in this version)
 898:000 | DONE ins | na 16 16 | 0062d7 | c9 ff ff    |                 cmp.# 0ffff          
 899:000 | DONE ins | na 16 16 | 0062da | d0 08       |                 bne 0062e4           
 900:000 | DONE wsp | na 16 16 |        |             |
 901:000 | DONE cmt | na 16 16 |        |             |                 ; Simply return FALSE flag as per specification
 902:000 | DONE ins | na 16 16 | 0062dc | ca          |                 dex                  
 903:000 | DONE ins | na 16 16 | 0062dd | ca          |                 dex                  
 904:000 | DONE ins | na 16 16 | 0062de | 94 00       |                 sty.dx 00            
 905:000 | DONE ins | na 16 16 | 0062e0 | a0 00 00    |                 ldy.# 0000           
 906:000 | DONE ins | na 16 16 | 0062e3 | 60          |                 rts                  
 907:000 | DONE wsp | na 16 16 |        |             |
 908:000 | DONE lbl | na 16 16 | 0062e4 |             | refill_source_is_not_string          
 909:000 | DONE cmt | na 16 16 |        |             |                 ; Since we don't have blocks, this must mean that we are trying
 910:000 | DONE cmt | na 16 16 |        |             |                 ; to read from a file. However, we don't have files yet, so we
 911:000 | DONE cmt | na 16 16 |        |             |                 ; report an error and jump to ABORT.
 912:000 | DONE ins | na 16 16 | 0062e4 | a9 3f 67    |                 lda.# 00673f         
 913:000 | DONE ins | na 16 16 | 0062e7 | 4c 6b 65    |                 jmp 00656b           
 914:000 | DONE wsp | na 16 16 |        |             |
 915:000 | DONE lbl | na 16 16 | 0062ea |             | z_refill                             
 915:001 | DONE ins | na 16 16 | 0062ea | 60          |                 rts                  ; dummy for compiling
 916:000 | DONE wsp | na 16 16 |        |             |
 917:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 918:000 | DONE cmt | na 16 16 |        |             | ; SOURCE ( -- addr u ) 12 bytes / X cycles
 919:000 | DONE cmt | na 16 16 |        |             | ; Return the address and size of current input buffer. Replaces TIB and #TIB in
 920:000 | DONE cmt | na 16 16 |        |             | ; ANSI Forth
 921:000 | DONE wsp | na 16 16 |        |             |
 922:000 | DONE lbl | na 16 16 | 0062eb |             | a_source                             
 922:001 | DONE ins | na 16 16 | 0062eb | ca          |                 dex                  ; make room on Data Stack
 923:000 | DONE ins | na 16 16 | 0062ec | ca          |                 dex                  
 924:000 | DONE ins | na 16 16 | 0062ed | ca          |                 dex                  
 925:000 | DONE ins | na 16 16 | 0062ee | ca          |                 dex                  
 926:000 | DONE ins | na 16 16 | 0062ef | 94 02       |                 sty.dx 02            
 927:000 | DONE wsp | na 16 16 |        |             |
 928:000 | DONE ins | na 16 16 | 0062f1 | a5 0c       |                 lda.d 00020c         ; address of current input buffer as NOS
 929:000 | DONE ins | na 16 16 | 0062f3 | 95 00       |                 sta.dx 00            
 930:000 | DONE wsp | na 16 16 |        |             |
 931:000 | DONE ins | na 16 16 | 0062f5 | a4 0e       |                 ldy.d 00020e         ; length of current input buffer as TOS
 932:000 | DONE wsp | na 16 16 |        |             |
 933:000 | DONE lbl | na 16 16 | 0062f7 |             | z_source                             
 933:001 | DONE ins | na 16 16 | 0062f7 | 60          |                 rts                  
 934:000 | DONE wsp | na 16 16 |        |             |
 935:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 936:000 | DONE cmt | na 16 16 |        |             | ; SOURCE-ID ( -- n ) 6 bytes / 13 cycles
 937:000 | DONE cmt | na 16 16 |        |             | ; Identify the input source unless it is a block (s. Conklin & Rather p. 156).
 938:000 | DONE cmt | na 16 16 |        |             | ; Since we don't have blocks (yet), this will give the input source: 0 is
 939:000 | DONE cmt | na 16 16 |        |             | ; keyboard, -1 (0ffff) is character string, and a text file gives the fileid.
 940:000 | DONE wsp | na 16 16 |        |             |
 941:000 | DONE lbl | na 16 16 | 0062f8 |             | a_source-id                          
 942:000 | DONE dir | na 16 16 |        |             |         .!xy16                       
 943:000 | DONE ins | na 16 16 | 0062f8 | ca          |                 dex                  
 944:000 | DONE ins | na 16 16 | 0062f9 | ca          |                 dex                  
 945:000 | DONE ins | na 16 16 | 0062fa | 94 00       |                 sty.dx 00            
 946:000 | DONE ins | na 16 16 | 0062fc | a4 0a       |                 ldy.d 00020a         
 947:000 | DONE wsp | na 16 16 |        |             |
 948:000 | DONE lbl | na 16 16 | 0062fe |             | z_source-id                          
 948:001 | DONE ins | na 16 16 | 0062fe | 60          |                 rts                  
 949:000 | DONE wsp | na 16 16 |        |             |
 950:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 951:000 | DONE cmt | na 16 16 |        |             | ; SPACE ( -- ) X bytes / X cycles
 952:000 | DONE cmt | na 16 16 |        |             | ; Print one ASCII space character; change to EMIT
 953:000 | DONE wsp | na 16 16 |        |             |
 954:000 | DONE lbl | na 16 16 | 0062ff |             | a_space                              
 955:000 | DONE ins | na 16 16 | 0062ff | a9 20 00    |                 lda.# AscSP          
 956:000 | DONE ins | na 16 16 | 006302 | 20 30 60    |                 jsr 006030           
 957:000 | DONE wsp | na 16 16 |        |             |
 958:000 | DONE lbl | na 16 16 | 006305 |             | z_space                              
 958:001 | DONE ins | na 16 16 | 006305 | 60          |                 rts                  
 959:000 | DONE wsp | na 16 16 |        |             |
 960:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 961:000 | DONE cmt | na 16 16 |        |             | ; STATE ( -- addr ) 7 bytes / 12 cycles
 962:000 | DONE cmt | na 16 16 |        |             | ; Return the address of a cell containing the compilation-state flag. STATE
 963:000 | DONE cmt | na 16 16 |        |             | ; is true when in compilation state, false otherwise. STATE should be changed
 964:000 | DONE cmt | na 16 16 |        |             | ; directly by the user; see
 965:000 | DONE cmt | na 16 16 |        |             | ; http://forth.sourceforge.net/standard/dpans/dpans6.htm#6.1.2250
 966:000 | DONE wsp | na 16 16 |        |             |
 967:000 | DONE lbl | na 16 16 | 006306 |             | a_state                              
 968:000 | DONE dir | na 16 16 |        |             |         .!xy16                       
 969:000 | DONE ins | na 16 16 | 006306 | ca          |                 dex                  
 970:000 | DONE ins | na 16 16 | 006307 | ca          |                 dex                  
 971:000 | DONE ins | na 16 16 | 006308 | 94 00       |                 sty.dx 00            
 972:000 | DONE ins | na 16 16 | 00630a | a0 14 02    |                 ldy.# 000214         
 973:000 | DONE wsp | na 16 16 |        |             |
 974:000 | DONE lbl | na 16 16 | 00630d |             | z_state                              
 974:001 | DONE ins | na 16 16 | 00630d | 60          |                 rts                  
 975:000 | DONE wsp | na 16 16 |        |             |
 976:000 | DONE wsp | na 16 16 |        |             |
 977:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 978:000 | DONE cmt | na 16 16 |        |             | ; SWAP ( n m -- m n ) 5 bytes / 12 cycles
 979:000 | DONE cmt | na 16 16 |        |             | ; Exchange TOS with NOS, destroys Y
 980:000 | DONE wsp | na 16 16 |        |             |
 981:000 | DONE lbl | na 16 16 | 00630e |             | a_swap                               
 982:000 | DONE dir | na 16 16 |        |             |         .!a16                        
 983:000 | DONE dir | na 16 16 |        |             |         .!xy16                       
 984:000 | DONE ins | na 16 16 | 00630e | b5 00       |                 lda.dx 00            
 985:000 | DONE ins | na 16 16 | 006310 | 94 00       |                 sty.dx 00            
 986:000 | DONE ins | na 16 16 | 006312 | a8          |                 tay                  
 987:000 | DONE wsp | na 16 16 |        |             |
 988:000 | DONE lbl | na 16 16 | 006313 |             | z_swap                               
 988:001 | DONE ins | na 16 16 | 006313 | 60          |                 rts                  
 989:000 | DONE wsp | na 16 16 |        |             |
 990:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 991:000 | DONE cmt | na 16 16 |        |             | ; TRUE ( -- f ) 7 bytes / 12 cycles
 992:000 | DONE cmt | na 16 16 |        |             | ; Pushes value $FFFF for Forth true on Data Stack
 993:000 | DONE wsp | na 16 16 |        |             |
 994:000 | DONE lbl | na 16 16 | 006314 |             | a_true                               
 995:000 | DONE dir | na 16 16 |        |             |         .!a16                        
 996:000 | DONE dir | na 16 16 |        |             |         .!xy16                       
 997:000 | DONE ins | na 16 16 | 006314 | ca          |                 dex                  
 998:000 | DONE ins | na 16 16 | 006315 | ca          |                 dex                  
 999:000 | DONE ins | na 16 16 | 006316 | 94 00       |                 sty.dx 00            
1000:000 | DONE ins | na 16 16 | 006318 | a0 ff ff    |                 ldy.# 0ffff          
1001:000 | DONE wsp | na 16 16 |        |             |
1002:000 | DONE lbl | na 16 16 | 00631b |             | z_true                               
1002:001 | DONE ins | na 16 16 | 00631b | 60          |                 rts                  
1003:000 | DONE wsp | na 16 16 |        |             |
1004:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1005:000 | DONE cmt | na 16 16 |        |             | ; TUCK ( n m -- m n m ) 8 bytes / 19 cycles
1006:000 | DONE cmt | na 16 16 |        |             | ; Insert TOS below NOS
1007:000 | DONE wsp | na 16 16 |        |             |
1008:000 | DONE lbl | na 16 16 | 00631c |             | a_tuck                               
1009:000 | DONE dir | na 16 16 |        |             |         .!a16                        
1010:000 | DONE dir | na 16 16 |        |             |         .!xy16                       
1011:000 | DONE ins | na 16 16 | 00631c | ca          |                 dex                  
1012:000 | DONE ins | na 16 16 | 00631d | ca          |                 dex                  
1013:000 | DONE ins | na 16 16 | 00631e | b5 02       |                 lda.dx 2             
1014:000 | DONE ins | na 16 16 | 006320 | 95 00       |                 sta.dx 0             
1015:000 | DONE ins | na 16 16 | 006322 | 94 02       |                 sty.dx 2             
1016:000 | DONE wsp | na 16 16 |        |             |
1017:000 | DONE lbl | na 16 16 | 006324 |             | z_tuck                               
1017:001 | DONE ins | na 16 16 | 006324 | 60          |                 rts                  
1018:000 | DONE wsp | na 16 16 |        |             |
1019:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1020:000 | DONE cmt | na 16 16 |        |             | ; TYPE ( addr u -- ) 23+ bytes / X cycles
1021:000 | DONE cmt | na 16 16 |        |             | ; Print character string if u is not 0. We restrict all calls to put_chr and
1022:000 | DONE cmt | na 16 16 |        |             | ; get-chr to make porting easier.  We call put_chr here directly instead of
1023:000 | DONE cmt | na 16 16 |        |             | ; going through EMIT because EMIT will later have a PAUSE statement for
1024:000 | DONE cmt | na 16 16 |        |             | ; multitasking and we probably don't want to PAUSE after every character.
1025:000 | DONE cmt | na 16 16 |        |             | ; However, we'll make a final decision about that when multitasking is up and
1026:000 | DONE cmt | na 16 16 |        |             | ; running.
1027:000 | DONE lbl | na 16 16 | 006325 |             | a_type                               
1028:000 | DONE dir | na 16 16 |        |             |         .!a16                        
1029:000 | DONE dir | na 16 16 |        |             |         .!xy16                       
1030:000 | DONE cmt | na 16 16 |        |             |                 ; just leave if u is zero (empty string)
1031:000 | DONE ins | na 16 16 | 006325 | 98          |                 tya                  ; force flag check of TOS
1032:000 | DONE ins | na 16 16 | 006326 | f0 17       |                 beq 00633f           
1033:000 | DONE wsp | na 16 16 |        |             |
1034:000 | DONE ins | na 16 16 | 006328 | b5 00       |                 lda.dx 00            ; get address from NOS
1035:000 | DONE ins | na 16 16 | 00632a | 85 16       |                 sta.d 000216         
1036:000 | DONE ins | na 16 16 | 00632c | 84 18       |                 sty.d 000218         ; number of chars is TOS
1037:000 | DONE ins | na 16 16 | 00632e | a0 00 00    |                 ldy.# 0000           
1038:000 | DONE ins | na 16 16 | 006331 | e2 20       |                 sep 20               
1038:001 | DONE ctl | na  8 16 |        |             |         .!a8
1039:000 | DONE lbl | na  8 16 | 006333 |             | type_loop                            
1040:000 | DONE ins | na  8 16 | 006333 | b1 16       |                 lda.diy 000216       ; LDA (TMP1),Y
1041:000 | DONE ins | na  8 16 | 006335 | 20 30 60    |                 jsr 006030           
1042:000 | DONE ins | na  8 16 | 006338 | c8          |                 iny                  
1043:000 | DONE ins | na  8 16 | 006339 | c4 18       |                 cpy.d 000218         
1044:000 | DONE ins | na  8 16 | 00633b | d0 f6       |                 bne 006333           
1045:000 | DONE wsp | na  8 16 |        |             |
1046:000 | DONE ins | na  8 16 | 00633d | c2 20       |                 rep 20               
1046:001 | DONE ctl | na 16 16 |        |             |         .!a16
1047:000 | DONE lbl | na 16 16 | 00633f |             | type_done                            
1048:000 | DONE cmt | na 16 16 |        |             |                 ; clear stack
1049:000 | DONE ins | na 16 16 | 00633f | b4 02       |                 ldy.dx 02            
1050:000 | DONE ins | na 16 16 | 006341 | e8          |                 inx                  
1051:000 | DONE ins | na 16 16 | 006342 | e8          |                 inx                  
1052:000 | DONE ins | na 16 16 | 006343 | e8          |                 inx                  
1053:000 | DONE ins | na 16 16 | 006344 | e8          |                 inx                  
1054:000 | DONE wsp | na 16 16 |        |             |
1055:000 | DONE cmt | na 16 16 |        |             |                 ; TODO LATER add PAUSE here for multitasking
1056:000 | DONE wsp | na 16 16 |        |             |
1057:000 | DONE lbl | na 16 16 | 006345 |             | z_type                               
1057:001 | DONE ins | na 16 16 | 006345 | 60          |                 rts                  
1058:000 | DONE wsp | na 16 16 |        |             |
1059:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1060:000 | DONE cmt | na 16 16 |        |             | ; WORDS ( -- ) X bytes / X cycles
1061:000 | DONE cmt | na 16 16 |        |             | ; Print list of all Forth words available
1062:000 | DONE cmt | na 16 16 |        |             | ;
1063:000 | DONE lbl | na 16 16 | 006346 |             | a_words                              
1064:000 | DONE ins | na 16 16 | 006346 | a5 02       |                 lda.d 000202         ; nt first entry in Dictionary (last added)
1065:000 | DONE ins | na 16 16 | 006348 | 48          |                 pha                  
1066:000 | DONE wsp | na 16 16 |        |             |
1067:000 | DONE ins | na 16 16 | 006349 | ca          |                 dex                  
1068:000 | DONE ins | na 16 16 | 00634a | ca          |                 dex                  
1069:000 | DONE ins | na 16 16 | 00634b | 94 00       |                 sty.dx 00            
1070:000 | DONE wsp | na 16 16 |        |             |
1071:000 | DONE lbl | na 16 16 | 00634d |             | words_loop                           
1072:000 | DONE ins | na 16 16 | 00634d | a8          |                 tay                  
1073:000 | DONE wsp | na 16 16 |        |             |
1074:000 | DONE ins | na 16 16 | 00634e | 20 37 62    |                 jsr 006237           ; ( nt -- addr u )
1075:000 | DONE ins | na 16 16 | 006351 | 20 25 63    |                 jsr 006325           ; ( addr u -- )
1076:000 | DONE ins | na 16 16 | 006354 | 20 ff 62    |                 jsr 0062ff           
1077:000 | DONE dir | na 16 16 |        |             |         .!a16                        
1078:000 | DONE dir | na 16 16 |        |             |         .!xy16                       
1079:000 | DONE ins | na 16 16 | 006357 | 68          |                 pla                  
1080:000 | DONE wsp | na 16 16 |        |             |
1081:000 | DONE cmt | na 16 16 |        |             |                 ; the next nt is two bytes below the nt of the current one in
1082:000 | DONE cmt | na 16 16 |        |             |                 ; the Dictionary header
1083:000 | DONE cmt | na 16 16 |        |             |                 ;
1084:000 | DONE ins | na 16 16 | 006358 | 1a          |                 inc.a                
1085:000 | DONE ins | na 16 16 | 006359 | 1a          |                 inc.a                
1086:000 | DONE wsp | na 16 16 |        |             |
1087:000 | DONE ins | na 16 16 | 00635a | ca          |                 dex                  
1088:000 | DONE ins | na 16 16 | 00635b | ca          |                 dex                  
1089:000 | DONE ins | na 16 16 | 00635c | 94 00       |                 sty.dx 00            
1090:000 | DONE wsp | na 16 16 |        |             |
1091:000 | DONE ins | na 16 16 | 00635e | a8          |                 tay                  
1092:000 | DONE ins | na 16 16 | 00635f | b9 00 00    |                 lda.y 0000           ; LDA $0000,Y
1093:000 | DONE ins | na 16 16 | 006362 | 48          |                 pha                  
1094:000 | DONE ins | na 16 16 | 006363 | d0 e8       |                 bne 00634d           
1095:000 | DONE wsp | na 16 16 |        |             |
1096:000 | DONE ins | na 16 16 | 006365 | 68          |                 pla                  
1097:000 | DONE wsp | na 16 16 |        |             |
1098:000 | DONE wsp | na 16 16 |        |             |
1099:000 | DONE lbl | na 16 16 | 006366 |             | z_words                              
1099:001 | DONE ins | na 16 16 | 006366 | 60          |                 rts                  
1100:000 | DONE wsp | na 16 16 |        |             |
1101:000 | DONE wsp | na 16 16 |        |             |
1102:000 | DONE wsp | na 16 16 |        |             |
1103:000 | DONE cmt | na 16 16 |        |             | ; ===================================================================
1104:000 | DONE cmt | na 16 16 |        |             | ; MIDDLE INCLUDES
1105:000 | DONE wsp | na 16 16 |        |             |
1106:000 | DONE cmt | na 16 16 |        |             | ; Dictionary Headers for Liara Forth for the W65C265SXB
1106:001 | DONE cmt | na 16 16 |        |             | ; Scot W. Stevenson <scot.stevenson@gmail.com>
1106:002 | DONE cmt | na 16 16 |        |             | ; First version: 05. Dec 2016
1106:003 | DONE cmt | na 16 16 |        |             | ; This version: 04. Jan 2017
1106:004 | DONE wsp | na 16 16 |        |             |
1106:005 | DONE cmt | na 16 16 |        |             | ; Dictionary headers are kept separately from the code, which allows various
1106:006 | DONE cmt | na 16 16 |        |             | ; tricks in the code. We roughly follow the Gforth terminology: The Execution
1106:007 | DONE cmt | na 16 16 |        |             | ; Token (xt) is the address of the first byte of a word's code that can be,
1106:008 | DONE cmt | na 16 16 |        |             | ; well, executed; the Name Token (nt) is a pointer to the beginning of the
1106:009 | DONE cmt | na 16 16 |        |             | ; word's header in the Dictionary. There, the link to the next word in the
1106:010 | DONE cmt | na 16 16 |        |             | ; Dictionary is always one cell down from the current word's own nt. In the code
1106:011 | DONE cmt | na 16 16 |        |             | ; itself, we use "h_<WORD>" ("header") for the nt and "a_<WORD>" ("A" as the
1106:012 | DONE cmt | na 16 16 |        |             | ; beginning) for the xt.
1106:013 | DONE cmt | na 16 16 |        |             | ;
1106:014 | DONE cmt | na 16 16 |        |             | ; This gives us the following header structure for each header:
1106:015 | DONE wsp | na 16 16 |        |             |
1106:016 | DONE cmt | na 16 16 |        |             | ;              8 bit     8 bit
1106:017 | DONE cmt | na 16 16 |        |             | ;               LSB       MSB
1106:018 | DONE cmt | na 16 16 |        |             | ; h_word ->  +--------+--------+
1106:019 | DONE cmt | na 16 16 |        |             | ;            | Length | Status |
1106:020 | DONE cmt | na 16 16 |        |             | ;         +2 +--------+--------+
1106:021 | DONE cmt | na 16 16 |        |             | ;            | Next Header     | -> h_next (nt of next word)
1106:022 | DONE cmt | na 16 16 |        |             | ;         +4 +-----------------+
1106:023 | DONE cmt | na 16 16 |        |             | ;            | Start of Code   | -> a_word (xt of this word)
1106:024 | DONE cmt | na 16 16 |        |             | ;         +6 +-----------------+
1106:025 | DONE cmt | na 16 16 |        |             | ;            | End of Code     | -> z_word
1106:026 | DONE cmt | na 16 16 |        |             | ;         +8 +--------+--------+
1106:027 | DONE cmt | na 16 16 |        |             | ;            | Name   |        |
1106:028 | DONE cmt | na 16 16 |        |             | ;            +--------+--------+
1106:029 | DONE cmt | na 16 16 |        |             | ;            |        |        |
1106:030 | DONE cmt | na 16 16 |        |             | ;            +--------+--------+
1106:031 | DONE cmt | na 16 16 |        |             | ;            |        |  ...   | (name string does not end with a zero)
1106:032 | DONE cmt | na 16 16 |        |             | ;         +n +--------+--------+
1106:033 | DONE wsp | na 16 16 |        |             |
1106:034 | DONE cmt | na 16 16 |        |             | ; Status bytes are created by adding dictionary flags defined in
1106:035 | DONE cmt | na 16 16 |        |             | ; definitions.tasm:
1106:036 | DONE cmt | na 16 16 |        |             | ;
1106:037 | DONE cmt | na 16 16 |        |             | ;       PW - Primitive Word (natively coded)
1106:038 | DONE cmt | na 16 16 |        |             | ;       CO - Compile Only
1106:039 | DONE cmt | na 16 16 |        |             | ;       IM - Immediate Word
1106:040 | DONE cmt | na 16 16 |        |             | ;       NC - Native Compile (inline compile)
1106:041 | DONE wsp | na 16 16 |        |             |
1106:042 | DONE cmt | na 16 16 |        |             | ; The last word (top word in code) is always BYE, signaled to FIND by a 0000 in
1106:043 | DONE cmt | na 16 16 |        |             | ; the link to the Next Word field. The words are sorted with the more common
1106:044 | DONE cmt | na 16 16 |        |             | ; ones first (further down in code) and the output words later (further up)
1106:045 | DONE cmt | na 16 16 |        |             | ; because things will always be slow if there is a human involved.
1106:046 | DONE wsp | na 16 16 |        |             |
1106:047 | DONE lbl | na 16 16 | 006367 |             | h_bye                                
1106:048 | DONE dir | na 16 16 | 006367 | (1 bytes)   |         .byte 03                     ; length of word string
1106:048 | DONE dir | na 16 16 |        |             |                 03                       --  .
1106:049 | DONE dir | na 16 16 | 006368 | (1 bytes)   |         .byte { PW + NC }            ; status byte
1106:049 | DONE dir | na 16 16 |        |             |                 90                       --  .
1106:050 | DONE dir | na 16 16 | 006369 | (2 bytes)   |         .word 0000                   ; next word in dictionary, 0000 signals end
1106:050 | DONE dir | na 16 16 |        |             |                 00 00                    --  . .
1106:051 | DONE dir | na 16 16 | 00636b | (2 bytes)   |         .word 00618b                 ; start of code, the xt of this word
1106:051 | DONE dir | na 16 16 |        |             |                 8b 61                    --  . a
1106:052 | DONE dir | na 16 16 | 00636d | (2 bytes)   |         .word 00618d                 ; end of code (points to RTS)
1106:052 | DONE dir | na 16 16 |        |             |                 8d 61                    --  . a
1106:053 | DONE dir | na 16 16 | 00636f | (3 bytes)   |         .byte 62, 79, 65             ; lowercase word name
1106:053 | DONE dir | na 16 16 |        |             |                 62 79 65                 --  b y e
1106:054 | DONE wsp | na 16 16 |        |             |
1106:055 | DONE lbl | na 16 16 | 006372 |             | h_cold                               
1106:056 | DONE dir | na 16 16 | 006372 | (2 bytes)   |         .byte 4, 00                  
1106:056 | DONE dir | na 16 16 |        |             |                 04 00                    --  . .
1106:057 | DONE dir | na 16 16 | 006374 | (6 bytes)   |         .word h_bye, a_cold, 0060c5  
1106:057 | DONE dir | na 16 16 |        |             |                 67 63 5d 60 c5 60        --  g c ] ` . `
1106:058 | DONE dir | na 16 16 | 00637a | (4 bytes)   |         .byte 63, 6f, 6c, 64         
1106:058 | DONE dir | na 16 16 |        |             |                 63 6f 6c 64              --  c o l d
1106:059 | DONE wsp | na 16 16 |        |             |
1106:060 | DONE lbl | na 16 16 | 00637e |             | h_words                              
1106:061 | DONE dir | na 16 16 | 00637e | (2 bytes)   |         .byte 5, { PW + NC }         
1106:061 | DONE dir | na 16 16 |        |             |                 05 90                    --  . .
1106:062 | DONE dir | na 16 16 | 006380 | (6 bytes)   |         .word h_cold, a_words, 006366 
1106:062 | DONE dir | na 16 16 |        |             |                 72 63 46 63 66 63        --  r c F c f c
1106:063 | DONE dir | na 16 16 | 006386 | (5 bytes)   |         .byte 77, 6f, 72, 64, 73     
1106:063 | DONE dir | na 16 16 |        |             |                 77 6f 72 64 73           --  w o r d s
1106:064 | DONE wsp | na 16 16 |        |             |
1106:065 | DONE lbl | na 16 16 | 00638b |             | h_bell                               
1106:066 | DONE dir | na 16 16 | 00638b | (2 bytes)   |         .byte 4, { PW + NC }         
1106:066 | DONE dir | na 16 16 |        |             |                 04 90                    --  . .
1106:067 | DONE dir | na 16 16 | 00638d | (6 bytes)   |         .word h_words, a_bell, 006182 
1106:067 | DONE dir | na 16 16 |        |             |                 7e 63 7c 61 82 61        --  ~ c | a . a
1106:068 | DONE dir | na 16 16 | 006393 | (4 bytes)   |         .byte 62, 65, 6c, 6c         
1106:068 | DONE dir | na 16 16 |        |             |                 62 65 6c 6c              --  b e l l
1106:069 | DONE wsp | na 16 16 |        |             |
1106:070 | DONE lbl | na 16 16 | 006397 |             | h_count                              
1106:071 | DONE dir | na 16 16 | 006397 | (2 bytes)   |         .byte 5, {NC + PW }          
1106:071 | DONE dir | na 16 16 |        |             |                 05 90                    --  . .
1106:072 | DONE dir | na 16 16 | 006399 | (6 bytes)   |         .word h_bell, a_count, 0061a8 
1106:072 | DONE dir | na 16 16 |        |             |                 8b 63 9a 61 a8 61        --  . c . a . a
1106:073 | DONE dir | na 16 16 | 00639f | (5 bytes)   |         .byte 63, 6f, 75, 6e, 74     
1106:073 | DONE dir | na 16 16 |        |             |                 63 6f 75 6e 74           --  c o u n t
1106:074 | DONE wsp | na 16 16 |        |             |
1106:075 | DONE lbl | na 16 16 | 0063a4 |             | h_abort                              
1106:076 | DONE dir | na 16 16 | 0063a4 | (2 bytes)   |         .byte 5, 00                  ; TODO check flags
1106:076 | DONE dir | na 16 16 |        |             |                 05 00                    --  . .
1106:077 | DONE dir | na 16 16 | 0063a6 | (6 bytes)   |         .word h_count, a_abort, 0060c5 
1106:077 | DONE dir | na 16 16 |        |             |                 97 63 93 60 c5 60        --  . c . ` . `
1106:078 | DONE dir | na 16 16 | 0063ac | (5 bytes)   |         .byte 61, 62, 6f, 72, 74     
1106:078 | DONE dir | na 16 16 |        |             |                 61 62 6f 72 74           --  a b o r t
1106:079 | DONE wsp | na 16 16 |        |             |
1106:080 | DONE lbl | na 16 16 | 0063b1 |             | h_parse                              
1106:081 | DONE dir | na 16 16 | 0063b1 | (2 bytes)   |         .byte 5, 00                  
1106:081 | DONE dir | na 16 16 |        |             |                 05 00                    --  . .
1106:082 | DONE dir | na 16 16 | 0063b3 | (6 bytes)   |         .word h_abort, a_parse, 0062af 
1106:082 | DONE dir | na 16 16 |        |             |                 a4 63 7d 62 af 62        --  . c } b . b
1106:083 | DONE dir | na 16 16 | 0063b9 | (5 bytes)   |         .byte 70, 61, 72, 73, 65     
1106:083 | DONE dir | na 16 16 |        |             |                 70 61 72 73 65           --  p a r s e
1106:084 | DONE wsp | na 16 16 |        |             |
1106:085 | DONE lbl | na 16 16 | 0063be |             | h_quit                               
1106:086 | DONE dir | na 16 16 | 0063be | (2 bytes)   |         .byte 4, 00                  
1106:086 | DONE dir | na 16 16 |        |             |                 04 00                    --  . .
1106:087 | DONE dir | na 16 16 | 0063c0 | (6 bytes)   |         .word h_parse, a_quit, 0060c5 
1106:087 | DONE dir | na 16 16 |        |             |                 b1 63 9b 60 c5 60        --  . c . ` . `
1106:088 | DONE dir | na 16 16 | 0063c6 | (4 bytes)   |         .byte 71, 75, 69, 74         
1106:088 | DONE dir | na 16 16 |        |             |                 71 75 69 74              --  q u i t
1106:089 | DONE wsp | na 16 16 |        |             |
1106:090 | DONE lbl | na 16 16 | 0063ca |             | h_name>int                           
1106:091 | DONE dir | na 16 16 | 0063ca | (2 bytes)   |         .byte 8, { PW + NC }         
1106:091 | DONE dir | na 16 16 |        |             |                 08 90                    --  . .
1106:092 | DONE dir | na 16 16 | 0063cc | (6 bytes)   |         .word h_quit, a_name>int, 006236 
1106:092 | DONE dir | na 16 16 |        |             |                 be 63 2e 62 36 62        --  . c . b 6 b
1106:093 | DONE dir | na 16 16 | 0063d2 | (8 bytes)   |         .byte 6e, 61, 6d, 65, 3e, 69, 6e, 74 
1106:093 | DONE dir | na 16 16 |        |             |                 6e 61 6d 65 3e 69 6e 74  --  n a m e > i n t
1106:093 | DONE dir | na 16 16 |        |             |                                          -- 
1106:094 | DONE wsp | na 16 16 |        |             |
1106:095 | DONE lbl | na 16 16 | 0063da |             | h_cr                                 
1106:096 | DONE dir | na 16 16 | 0063da | (2 bytes)   |         .byte 2, { PW + NC }         
1106:096 | DONE dir | na 16 16 |        |             |                 02 90                    --  . .
1106:097 | DONE dir | na 16 16 | 0063dc | (6 bytes)   |         .word h_name>int, a_cr, 0061b2 
1106:097 | DONE dir | na 16 16 |        |             |                 ca 63 a9 61 b2 61        --  . c . a . a
1106:098 | DONE dir | na 16 16 | 0063e2 | (2 bytes)   |         .byte 63, 72                 
1106:098 | DONE dir | na 16 16 |        |             |                 63 72                    --  c r
1106:099 | DONE wsp | na 16 16 |        |             |
1106:100 | DONE lbl | na 16 16 | 0063e4 |             | h_bl                                 
1106:101 | DONE dir | na 16 16 | 0063e4 | (2 bytes)   |         .byte 2, { PW + NC }         
1106:101 | DONE dir | na 16 16 |        |             |                 02 90                    --  . .
1106:102 | DONE dir | na 16 16 | 0063e6 | (6 bytes)   |         .word h_cr, a_bl, 00618a     
1106:102 | DONE dir | na 16 16 |        |             |                 da 63 83 61 8a 61        --  . c . a . a
1106:103 | DONE dir | na 16 16 | 0063ec | (2 bytes)   |         .byte 62, 6c                 
1106:103 | DONE dir | na 16 16 |        |             |                 62 6c                    --  b l
1106:104 | DONE wsp | na 16 16 |        |             |
1106:105 | DONE lbl | na 16 16 | 0063ee |             | h_space                              
1106:106 | DONE dir | na 16 16 | 0063ee | (2 bytes)   |         .byte 5, { PW + NC }         
1106:106 | DONE dir | na 16 16 |        |             |                 05 90                    --  . .
1106:107 | DONE dir | na 16 16 | 0063f0 | (6 bytes)   |         .word h_bl, a_space, 006305  
1106:107 | DONE dir | na 16 16 |        |             |                 e4 63 ff 62 05 63        --  . c . b . c
1106:108 | DONE dir | na 16 16 | 0063f6 | (5 bytes)   |         .byte 73, 70, 61, 63, 65     
1106:108 | DONE dir | na 16 16 |        |             |                 73 70 61 63 65           --  s p a c e
1106:109 | DONE wsp | na 16 16 |        |             |
1106:110 | DONE lbl | na 16 16 | 0063fb |             | h_type                               
1106:111 | DONE dir | na 16 16 | 0063fb | (2 bytes)   |         .byte 4, 0                   
1106:111 | DONE dir | na 16 16 |        |             |                 04 00                    --  . .
1106:112 | DONE dir | na 16 16 | 0063fd | (6 bytes)   |         .word h_space, a_type, 006345 
1106:112 | DONE dir | na 16 16 |        |             |                 ee 63 25 63 45 63        --  . c % c E c
1106:113 | DONE dir | na 16 16 | 006403 | (4 bytes)   |         .byte 74, 79, 70, 65         
1106:113 | DONE dir | na 16 16 |        |             |                 74 79 70 65              --  t y p e
1106:114 | DONE wsp | na 16 16 |        |             |
1106:115 | DONE lbl | na 16 16 | 006407 |             | h_name>string                        
1106:116 | DONE dir | na 16 16 | 006407 | (2 bytes)   |         .byte 0b, { PW + NC }        
1106:116 | DONE dir | na 16 16 |        |             |                 0b 90                    --   .
1106:117 | DONE dir | na 16 16 | 006409 | (6 bytes)   |         .word h_type, a_name>string, 006247 
1106:117 | DONE dir | na 16 16 |        |             |                 fb 63 37 62 47 62        --  . c 7 b G b
1106:118 | DONE dir | na 16 16 | 00640f | (11 bytes)  |         .byte 6e, 61, 6d, 65, 3e, 73, 74, 72, 69, 6e, 67 
1106:118 | DONE dir | na 16 16 |        |             |                 6e 61 6d 65 3e 73 74 72  --  n a m e > s t r
1106:118 | DONE dir | na 16 16 |        |             |                 69 6e 67                 --  i n g
1106:119 | DONE wsp | na 16 16 |        |             |
1106:120 | DONE lbl | na 16 16 | 00641a |             | h_2dup                               
1106:121 | DONE dir | na 16 16 | 00641a | (2 bytes)   |         .byte 4, { PW + NC }         
1106:121 | DONE dir | na 16 16 |        |             |                 04 90                    --  . .
1106:122 | DONE dir | na 16 16 | 00641c | (6 bytes)   |         .word h_name>string, a_2dup, 0060fa 
1106:122 | DONE dir | na 16 16 |        |             |                 07 64 f0 60 fa 60        --  . d . ` . `
1106:123 | DONE dir | na 16 16 | 006422 | (4 bytes)   |         .byte 32, 64, 75, 70         
1106:123 | DONE dir | na 16 16 |        |             |                 32 64 75 70              --  2 d u p
1106:124 | DONE wsp | na 16 16 |        |             |
1106:125 | DONE lbl | na 16 16 | 006426 |             | h_state                              
1106:126 | DONE dir | na 16 16 | 006426 | (2 bytes)   |         .byte 5, { PW + NC }         
1106:126 | DONE dir | na 16 16 |        |             |                 05 90                    --  . .
1106:127 | DONE dir | na 16 16 | 006428 | (6 bytes)   |         .word h_2dup, a_state, 00630d 
1106:127 | DONE dir | na 16 16 |        |             |                 1a 64 06 63 0d 63        --  . d . c  c
1106:128 | DONE dir | na 16 16 | 00642e | (5 bytes)   |         .byte 73, 74, 61, 74, 65     
1106:128 | DONE dir | na 16 16 |        |             |                 73 74 61 74 65           --  s t a t e
1106:129 | DONE wsp | na 16 16 |        |             |
1106:130 | DONE lbl | na 16 16 | 006433 |             | h_to-in                              
1106:131 | DONE dir | na 16 16 | 006433 | (2 bytes)   |         .byte 3, { PW + NC }         
1106:131 | DONE dir | na 16 16 |        |             |                 03 90                    --  . .
1106:132 | DONE dir | na 16 16 | 006435 | (6 bytes)   |         .word h_state, a_to-in, 0060cd 
1106:132 | DONE dir | na 16 16 |        |             |                 26 64 c6 60 cd 60        --  & d . ` . `
1106:133 | DONE dir | na 16 16 | 00643b | (3 bytes)   |         .byte 3e, 69, 6e             
1106:133 | DONE dir | na 16 16 |        |             |                 3e 69 6e                 --  > i n
1106:134 | DONE wsp | na 16 16 |        |             |
1106:135 | DONE lbl | na 16 16 | 00643e |             | h_source                             
1106:136 | DONE dir | na 16 16 | 00643e | (2 bytes)   |         .byte 6, { PW + NC }         
1106:136 | DONE dir | na 16 16 |        |             |                 06 90                    --  . .
1106:137 | DONE dir | na 16 16 | 006440 | (6 bytes)   |         .word h_to-in, a_source, 0062f7 
1106:137 | DONE dir | na 16 16 |        |             |                 33 64 eb 62 f7 62        --  3 d . b . b
1106:138 | DONE dir | na 16 16 | 006446 | (6 bytes)   |         .byte 73, 6f, 75, 72, 63, 65 
1106:138 | DONE dir | na 16 16 |        |             |                 73 6f 75 72 63 65        --  s o u r c e
1106:139 | DONE wsp | na 16 16 |        |             |
1106:140 | DONE lbl | na 16 16 | 00644c |             | h_plus                               
1106:141 | DONE dir | na 16 16 | 00644c | (2 bytes)   |         .byte 1, { PW + NC }         
1106:141 | DONE dir | na 16 16 |        |             |                 01 90                    --  . .
1106:142 | DONE dir | na 16 16 | 00644e | (6 bytes)   |         .word h_source, a_plus, 0060d5 
1106:142 | DONE dir | na 16 16 |        |             |                 3e 64 ce 60 d5 60        --  > d . ` . `
1106:143 | DONE dir | na 16 16 | 006454 | (1 bytes)   |         .byte 2b                     
1106:143 | DONE dir | na 16 16 |        |             |                 2b                       --  +
1106:144 | DONE wsp | na 16 16 |        |             |
1106:145 | DONE lbl | na 16 16 | 006455 |             | h_one-plus                           
1106:146 | DONE dir | na 16 16 | 006455 | (2 bytes)   |         .byte 2, { PW + NC }         
1106:146 | DONE dir | na 16 16 |        |             |                 02 90                    --  . .
1106:147 | DONE dir | na 16 16 | 006457 | (6 bytes)   |         .word h_plus, a_one-plus, 0060e7 
1106:147 | DONE dir | na 16 16 |        |             |                 4c 64 e6 60 e7 60        --  L d . ` . `
1106:148 | DONE dir | na 16 16 | 00645d | (2 bytes)   |         .byte 31, 2b                 
1106:148 | DONE dir | na 16 16 |        |             |                 31 2b                    --  1 +
1106:149 | DONE wsp | na 16 16 |        |             |
1106:150 | DONE lbl | na 16 16 | 00645f |             | h_false                              
1106:151 | DONE dir | na 16 16 | 00645f | (2 bytes)   |         .byte 5, { PW + NC }         
1106:151 | DONE dir | na 16 16 |        |             |                 05 90                    --  . .
1106:152 | DONE dir | na 16 16 | 006461 | (6 bytes)   |         .word h_one-plus, a_zero, 0060dd 
1106:152 | DONE dir | na 16 16 |        |             |                 55 64 d6 60 dd 60        --  U d . ` . `
1106:153 | DONE dir | na 16 16 | 006467 | (5 bytes)   |         .byte 66, 61, 6c, 73, 65     
1106:153 | DONE dir | na 16 16 |        |             |                 66 61 6c 73 65           --  f a l s e
1106:154 | DONE wsp | na 16 16 |        |             |
1106:155 | DONE lbl | na 16 16 | 00646c |             | h_true                               
1106:156 | DONE dir | na 16 16 | 00646c | (2 bytes)   |         .byte 4, { PW + NC }         
1106:156 | DONE dir | na 16 16 |        |             |                 04 90                    --  . .
1106:157 | DONE dir | na 16 16 | 00646e | (6 bytes)   |         .word h_false, a_true, 00631b 
1106:157 | DONE dir | na 16 16 |        |             |                 5f 64 14 63 1b 63        --  _ d . c . c
1106:158 | DONE dir | na 16 16 | 006474 | (4 bytes)   |         .byte 74, 72, 75, 65         
1106:158 | DONE dir | na 16 16 |        |             |                 74 72 75 65              --  t r u e
1106:159 | DONE wsp | na 16 16 |        |             |
1106:160 | DONE lbl | na 16 16 | 006478 |             | h_two                                
1106:161 | DONE dir | na 16 16 | 006478 | (2 bytes)   |         .byte 1, { PW + NC }         
1106:161 | DONE dir | na 16 16 |        |             |                 01 90                    --  . .
1106:162 | DONE dir | na 16 16 | 00647a | (6 bytes)   |         .word h_true, a_two, 0060ef  
1106:162 | DONE dir | na 16 16 |        |             |                 6c 64 e8 60 ef 60        --  l d . ` . `
1106:163 | DONE dir | na 16 16 | 006480 | (1 bytes)   |         .byte 32                     
1106:163 | DONE dir | na 16 16 |        |             |                 32                       --  2
1106:164 | DONE wsp | na 16 16 |        |             |
1106:165 | DONE lbl | na 16 16 | 006481 |             | h_one                                
1106:166 | DONE dir | na 16 16 | 006481 | (2 bytes)   |         .byte 1, { PW + NC }         
1106:166 | DONE dir | na 16 16 |        |             |                 01 90                    --  . .
1106:167 | DONE dir | na 16 16 | 006483 | (6 bytes)   |         .word h_two, a_one, 0060e5   
1106:167 | DONE dir | na 16 16 |        |             |                 78 64 de 60 e5 60        --  x d . ` . `
1106:168 | DONE dir | na 16 16 | 006489 | (1 bytes)   |         .byte 31                     
1106:168 | DONE dir | na 16 16 |        |             |                 31                       --  1
1106:169 | DONE wsp | na 16 16 |        |             |
1106:170 | DONE lbl | na 16 16 | 00648a |             | h_zero                               
1106:171 | DONE dir | na 16 16 | 00648a | (2 bytes)   |         .byte 1, { PW + NC }         
1106:171 | DONE dir | na 16 16 |        |             |                 01 90                    --  . .
1106:172 | DONE dir | na 16 16 | 00648c | (6 bytes)   |         .word h_one, a_zero, 0060dd  
1106:172 | DONE dir | na 16 16 |        |             |                 81 64 d6 60 dd 60        --  . d . ` . `
1106:173 | DONE dir | na 16 16 | 006492 | (1 bytes)   |         .byte 30                     
1106:173 | DONE dir | na 16 16 |        |             |                 30                       --  0
1106:174 | DONE wsp | na 16 16 |        |             |
1106:175 | DONE lbl | na 16 16 | 006493 |             | h_find-name                          
1106:176 | DONE dir | na 16 16 | 006493 | (2 bytes)   |         .byte 9, 0                   
1106:176 | DONE dir | na 16 16 |        |             |                 09 00                    --  	 .
1106:177 | DONE dir | na 16 16 | 006495 | (6 bytes)   |         .word h_zero, a_find-name, 006226 
1106:177 | DONE dir | na 16 16 |        |             |                 8a 64 d0 61 26 62        --  . d . a & b
1106:178 | DONE dir | na 16 16 | 00649b | (9 bytes)   |         .byte 66, 69, 6e, 64, 2d, 6e, 61, 6d, 65 
1106:178 | DONE dir | na 16 16 |        |             |                 66 69 6e 64 2d 6e 61 6d  --  f i n d - n a m
1106:178 | DONE dir | na 16 16 |        |             |                 65                       --  e
1106:179 | DONE wsp | na 16 16 |        |             |
1106:180 | DONE lbl | na 16 16 | 0064a4 |             | h_refill                             
1106:181 | DONE dir | na 16 16 | 0064a4 | (2 bytes)   |         .byte 6, { PW }              ; TODO check flags
1106:181 | DONE dir | na 16 16 |        |             |                 06 80                    --  . .
1106:182 | DONE dir | na 16 16 | 0064a6 | (6 bytes)   |         .word h_find-name, a_refill, 0062ea 
1106:182 | DONE dir | na 16 16 |        |             |                 93 64 b0 62 ea 62        --  . d . b . b
1106:183 | DONE dir | na 16 16 | 0064ac | (6 bytes)   |         .byte 72, 65, 66, 69, 6c, 6c 
1106:183 | DONE dir | na 16 16 |        |             |                 72 65 66 69 6c 6c        --  r e f i l l
1106:184 | DONE wsp | na 16 16 |        |             |
1106:185 | DONE lbl | na 16 16 | 0064b2 |             | h_parse-name                         
1106:186 | DONE dir | na 16 16 | 0064b2 | (2 bytes)   |         .byte &10, 0                 
1106:186 | DONE dir | na 16 16 |        |             |                 0a 00                    --  
 .
1106:187 | DONE dir | na 16 16 | 0064b4 | (6 bytes)   |         .word h_refill, a_parse-name, 0062af 
1106:187 | DONE dir | na 16 16 |        |             |                 a4 64 4b 62 af 62        --  . d K b . b
1106:188 | DONE dir | na 16 16 | 0064ba | (10 bytes)  |         .byte 70, 61, 72, 73, 65, 2d, 6e, 61, 6d, 65 
1106:188 | DONE dir | na 16 16 |        |             |                 70 61 72 73 65 2d 6e 61  --  p a r s e - n a
1106:188 | DONE dir | na 16 16 |        |             |                 6d 65                    --  m e
1106:189 | DONE wsp | na 16 16 |        |             |
1106:190 | DONE lbl | na 16 16 | 0064c4 |             | h_source-id                          
1106:191 | DONE dir | na 16 16 | 0064c4 | (2 bytes)   |         .byte 9, { PW + NC }         
1106:191 | DONE dir | na 16 16 |        |             |                 09 90                    --  	 .
1106:192 | DONE dir | na 16 16 | 0064c6 | (6 bytes)   |         .word h_parse-name, a_source-id, 0062fe 
1106:192 | DONE dir | na 16 16 |        |             |                 b2 64 f8 62 fe 62        --  . d . b . b
1106:193 | DONE dir | na 16 16 | 0064cc | (9 bytes)   |         .byte 73, 6f, 75, 72, 63, 65, 2d, 69, 64 
1106:193 | DONE dir | na 16 16 |        |             |                 73 6f 75 72 63 65 2d 69  --  s o u r c e - i
1106:193 | DONE dir | na 16 16 |        |             |                 64                       --  d
1106:194 | DONE wsp | na 16 16 |        |             |
1106:195 | DONE lbl | na 16 16 | 0064d5 |             | h_comma                              
1106:196 | DONE dir | na 16 16 | 0064d5 | (2 bytes)   |         .byte 1, { PW + NC }         
1106:196 | DONE dir | na 16 16 |        |             |                 01 90                    --  . .
1106:197 | DONE dir | na 16 16 | 0064d7 | (6 bytes)   |         .word h_source-id, a_comma, 006199 
1106:197 | DONE dir | na 16 16 |        |             |                 c4 64 8e 61 99 61        --  . d . a . a
1106:198 | DONE dir | na 16 16 | 0064dd | (1 bytes)   |         .byte 2c                     
1106:198 | DONE dir | na 16 16 |        |             |                 2c                       --  ,
1106:199 | DONE wsp | na 16 16 |        |             |
1106:200 | DONE lbl | na 16 16 | 0064de |             | h_accept                             
1106:201 | DONE dir | na 16 16 | 0064de | (2 bytes)   |         .byte 6, 00                  ; TODO check flags
1106:201 | DONE dir | na 16 16 |        |             |                 06 00                    --  . .
1106:202 | DONE dir | na 16 16 | 0064e0 | (6 bytes)   |         .word h_comma, a_accept, 00617b 
1106:202 | DONE dir | na 16 16 |        |             |                 d5 64 fb 60 7b 61        --  . d . ` { a
1106:203 | DONE dir | na 16 16 | 0064e6 | (6 bytes)   |         .byte 61, 63, 63, 65, 70, 74 
1106:203 | DONE dir | na 16 16 |        |             |                 61 63 63 65 70 74        --  a c c e p t
1106:204 | DONE wsp | na 16 16 |        |             |
1106:205 | DONE lbl | na 16 16 | 0064ec |             | h_tuck                               
1106:206 | DONE dir | na 16 16 | 0064ec | (2 bytes)   |         .byte 4, { PW + NC }         
1106:206 | DONE dir | na 16 16 |        |             |                 04 90                    --  . .
1106:207 | DONE dir | na 16 16 | 0064ee | (6 bytes)   |         .word h_accept, a_tuck, 006324 
1106:207 | DONE dir | na 16 16 |        |             |                 de 64 1c 63 24 63        --  . d . c $ c
1106:208 | DONE dir | na 16 16 | 0064f4 | (4 bytes)   |         .byte 74, 75, 63, 6b         
1106:208 | DONE dir | na 16 16 |        |             |                 74 75 63 6b              --  t u c k
1106:209 | DONE wsp | na 16 16 |        |             |
1106:210 | DONE lbl | na 16 16 | 0064f8 |             | h_nip                                
1106:211 | DONE dir | na 16 16 | 0064f8 | (2 bytes)   |         .byte 3, { PW + NC }         
1106:211 | DONE dir | na 16 16 |        |             |                 03 90                    --  . .
1106:212 | DONE dir | na 16 16 | 0064fa | (6 bytes)   |         .word h_tuck, a_nip, 00624a  
1106:212 | DONE dir | na 16 16 |        |             |                 ec 64 48 62 4a 62        --  . d H b J b
1106:213 | DONE dir | na 16 16 | 006500 | (3 bytes)   |         .byte 6e, 69, 70             
1106:213 | DONE dir | na 16 16 |        |             |                 6e 69 70                 --  n i p
1106:214 | DONE wsp | na 16 16 |        |             |
1106:215 | DONE lbl | na 16 16 | 006503 |             | h_execute                            
1106:216 | DONE dir | na 16 16 | 006503 | (2 bytes)   |         .byte 7, { PW + NC }         
1106:216 | DONE dir | na 16 16 |        |             |                 07 90                    --  . .
1106:217 | DONE dir | na 16 16 | 006505 | (6 bytes)   |         .word h_nip, a_execute, 0061cf 
1106:217 | DONE dir | na 16 16 |        |             |                 f8 64 c0 61 cf 61        --  . d . a . a
1106:218 | DONE dir | na 16 16 | 00650b | (7 bytes)   |         .byte 65, 78, 65, 63, 75, 74, 65 
1106:218 | DONE dir | na 16 16 |        |             |                 65 78 65 63 75 74 65     --  e x e c u t e
1106:219 | DONE wsp | na 16 16 |        |             |
1106:220 | DONE lbl | na 16 16 | 006512 |             | h_here                               
1106:221 | DONE dir | na 16 16 | 006512 | (2 bytes)   |         .byte 4, { PW + NC }         
1106:221 | DONE dir | na 16 16 |        |             |                 04 90                    --  . .
1106:222 | DONE dir | na 16 16 | 006514 | (6 bytes)   |         .word h_execute, a_here, 00622d 
1106:222 | DONE dir | na 16 16 |        |             |                 03 65 27 62 2d 62        --  . e ' b - b
1106:223 | DONE dir | na 16 16 | 00651a | (4 bytes)   |         .byte 68, 65, 72, 65         
1106:223 | DONE dir | na 16 16 |        |             |                 68 65 72 65              --  h e r e
1106:224 | DONE wsp | na 16 16 |        |             |
1106:225 | DONE lbl | na 16 16 | 00651e |             | h_swap                               
1106:226 | DONE dir | na 16 16 | 00651e | (2 bytes)   |         .byte 4, { PW + NC }         
1106:226 | DONE dir | na 16 16 |        |             |                 04 90                    --  . .
1106:227 | DONE dir | na 16 16 | 006520 | (6 bytes)   |         .word h_here, a_swap, 006313 
1106:227 | DONE dir | na 16 16 |        |             |                 12 65 0e 63 13 63        --  . e . c . c
1106:228 | DONE dir | na 16 16 | 006526 | (4 bytes)   |         .byte 73, 77, 61, 70         
1106:228 | DONE dir | na 16 16 |        |             |                 73 77 61 70              --  s w a p
1106:229 | DONE wsp | na 16 16 |        |             |
1106:230 | DONE lbl | na 16 16 | 00652a |             | h_dup                                
1106:231 | DONE dir | na 16 16 | 00652a | (2 bytes)   |         .byte 3, { PW + NC }         
1106:231 | DONE dir | na 16 16 |        |             |                 03 90                    --  . .
1106:232 | DONE dir | na 16 16 | 00652c | (6 bytes)   |         .word h_swap, a_dup, 0061bc  
1106:232 | DONE dir | na 16 16 |        |             |                 1e 65 b8 61 bc 61        --  . e . a . a
1106:233 | DONE dir | na 16 16 | 006532 | (3 bytes)   |         .byte 64, 75, 70             
1106:233 | DONE dir | na 16 16 |        |             |                 64 75 70                 --  d u p
1106:234 | DONE wsp | na 16 16 |        |             |
1106:235 | DONE cmt | na 16 16 |        |             | ; DROP is always the first entry in dictionary
1106:236 | DONE lbl | na 16 16 | 006535 |             | h_drop                               
1106:237 | DONE dir | na 16 16 | 006535 | (2 bytes)   |         .byte 4, { PW + NC }         
1106:237 | DONE dir | na 16 16 |        |             |                 04 90                    --  . .
1106:238 | DONE dir | na 16 16 | 006537 | (6 bytes)   |         .word h_dup, a_drop, 0061b7  
1106:238 | DONE dir | na 16 16 |        |             |                 2a 65 b3 61 b7 61        --  * e . a . a
1106:239 | DONE dir | na 16 16 | 00653d | (4 bytes)   |         .byte 64, 72, 6f, 70         
1106:239 | DONE dir | na 16 16 |        |             |                 64 72 6f 70              --  d r o p
1106:240 | DONE wsp | na 16 16 |        |             |
1106:241 | DONE cmt | na 16 16 |        |             | ; END
1107:000 | DONE wsp | na 16 16 |        |             |
1108:000 | DONE cmt | na 16 16 |        |             | ; ===================================================================
1109:000 | DONE cmt | na 16 16 |        |             | ; LOW LEVEL HELPER FUNCTIONS
1110:000 | DONE wsp | na 16 16 |        |             |
1111:000 | DONE wsp | na 16 16 |        |             |
1112:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1113:000 | DONE cmt | na 16 16 |        |             | ; COMPILE OR EXECUTE
1114:000 | DONE cmt | na 16 16 |        |             | ; Core routine for interpreter called by EVALUATE and QUIT. We process one line
1115:000 | DONE cmt | na 16 16 |        |             | ; only. Assumes that address of name is in cib and length of whole input
1116:000 | DONE cmt | na 16 16 |        |             | ; string is in ciblen
1117:000 | DONE lbl | na 16 16 | 006541 |             | compex                               
1118:000 | DONE lbl | na 16 16 | 006541 |             | compex_loop                          
1119:000 | DONE cmt | na 16 16 |        |             |                 ; Normally we would use PARSE here with the SPACE character as
1120:000 | DONE cmt | na 16 16 |        |             |                 ; a parameter (PARSE replaces WORD in modern Forths). However,
1121:000 | DONE cmt | na 16 16 |        |             |                 ; Gforth's PARSE-NAME makes more sense as it uses spaces as
1122:000 | DONE cmt | na 16 16 |        |             |                 ; delimiters per default and skips any leading spaces, which
1123:000 | DONE cmt | na 16 16 |        |             |                 ; PARSE does not do.
1124:000 | DONE ins | na 16 16 | 006541 | 20 4b 62    |                 jsr 00624b           ; ( addr u )
1125:000 | DONE dir | na 16 16 |        |             |         .!a16                        
1126:000 | DONE cmt | na 16 16 |        |             |                 ; if PARSE-NAME returns 0 (empty line), no characters were left
1127:000 | DONE cmt | na 16 16 |        |             |                 ; in the line and we need to go get a new line
1128:000 | DONE ins | na 16 16 | 006544 | 98          |                 tya                  ; force flag check
1129:000 | DONE ins | na 16 16 | 006545 | f0 1d       |                 beq 006564           
1130:000 | DONE wsp | na 16 16 |        |             |
1131:000 | DONE cmt | na 16 16 |        |             |                 ; We let the user input words in any case, but use lower case
1132:000 | DONE cmt | na 16 16 |        |             |                 ; internally (sorry, Garth).
1133:000 | DONE ins | na 16 16 | 006547 | 20 a4 65    |                 jsr 0065a4           ; returns ( addr u )
1134:000 | DONE wsp | na 16 16 |        |             |
1135:000 | DONE cmt | na 16 16 |        |             |                 ; If we got something that is not a zero, we go to FIND-NAME to
1136:000 | DONE cmt | na 16 16 |        |             |                 ; get the nt. Returns ( nt | 0 )
1137:000 | DONE ins | na 16 16 | 00654a | 20 d0 61    |                 jsr 0061d0           
1138:000 | DONE dir | na 16 16 |        |             |         .!a16                        
1139:000 | DONE cmt | na 16 16 |        |             |                 ; a zero signals that we didn't find a word in the Dictionary
1140:000 | DONE ins | na 16 16 | 00654d | 98          |                 tya                  ; force flag check of TOS
1141:000 | DONE ins | na 16 16 | 00654e | d0 06       |                 bne 006556           
1142:000 | DONE wsp | na 16 16 |        |             |
1143:000 | DONE cmt | na 16 16 |        |             |                 ; TODO No name token, try NUMBER CONVERSION
1144:000 | DONE wsp | na 16 16 |        |             |
1145:000 | DONE cmt | na 16 16 |        |             |                 ; Woe is us, all has failed
1146:000 | DONE ins | na 16 16 | 006550 | a9 78 67    |                 lda.# 006778         ; "Unknown word"
1147:000 | DONE ins | na 16 16 | 006553 | 4c 6b 65    |                 jmp 00656b           
1148:000 | DONE wsp | na 16 16 |        |             |
1149:000 | DONE lbl | na 16 16 | 006556 |             | compex_got_name_token                
1150:000 | DONE cmt | na 16 16 |        |             |                 ; TODO see if INTERPRETED OR COMPILED
1151:000 | DONE wsp | na 16 16 |        |             |
1152:000 | DONE cmt | na 16 16 |        |             |                 ; INTERPRET WORD
1153:000 | DONE cmt | na 16 16 |        |             |                 ; We arrive here with the nt as TOS (in Y). The xt of a word is
1154:000 | DONE cmt | na 16 16 |        |             |                 ; four bytes farther on, so this is a quick version of NAME>INT
1155:000 | DONE wsp | na 16 16 |        |             |
1156:000 | DONE dir | na 16 16 |        |             |         .!xy16                       
1157:000 | DONE ins | na 16 16 | 006556 | c8          |                 iny                  
1158:000 | DONE ins | na 16 16 | 006557 | c8          |                 iny                  
1159:000 | DONE ins | na 16 16 | 006558 | c8          |                 iny                  
1160:000 | DONE ins | na 16 16 | 006559 | c8          |                 iny                  
1161:000 | DONE ins | na 16 16 | 00655a | b9 00 00    |                 lda.y 0000           
1162:000 | DONE ins | na 16 16 | 00655d | a8          |                 tay                  
1163:000 | DONE wsp | na 16 16 |        |             |
1164:000 | DONE ins | na 16 16 | 00655e | 20 c0 61    |                 jsr 0061c0           
1165:000 | DONE wsp | na 16 16 |        |             |
1166:000 | DONE cmt | na 16 16 |        |             |                 ; that's quite enough for this word, let's get the next one
1167:000 | DONE ins | na 16 16 | 006561 | 4c 41 65    |                 jmp 006541           
1168:000 | DONE wsp | na 16 16 |        |             |
1169:000 | DONE lbl | na 16 16 | 006564 |             | compex_line_done                     
1170:000 | DONE cmt | na 16 16 |        |             |                 ; drop stuff from PARSE_NAME
1171:000 | DONE ins | na 16 16 | 006564 | b4 02       |                 ldy.dx 02            
1172:000 | DONE ins | na 16 16 | 006566 | e8          |                 inx                  
1173:000 | DONE ins | na 16 16 | 006567 | e8          |                 inx                  
1174:000 | DONE ins | na 16 16 | 006568 | e8          |                 inx                  
1175:000 | DONE ins | na 16 16 | 006569 | e8          |                 inx                  
1176:000 | DONE wsp | na 16 16 |        |             |
1177:000 | DONE ins | na 16 16 | 00656a | 60          |                 rts                  
1178:000 | DONE wsp | na 16 16 |        |             |
1179:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1180:000 | DONE cmt | na 16 16 |        |             | ; Fatal error encountered: Take address of error string from A, print it and
1181:000 | DONE cmt | na 16 16 |        |             | ; then call abort
1182:000 | DONE lbl | na 16 16 | 00656b |             | error                                
1183:000 | DONE ins | na 16 16 | 00656b | 20 71 65    |                 jsr 006571           
1184:000 | DONE ins | na 16 16 | 00656e | 4c 93 60    |                 jmp 006093           
1185:000 | DONE wsp | na 16 16 |        |             |
1186:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1187:000 | DONE cmt | na 16 16 |        |             | ; Print a zero terminated string to the console, adding a CR character. Takes
1188:000 | DONE cmt | na 16 16 |        |             | ; the address of the string in 16-bit A register, calls put_chr.  A is
1189:000 | DONE cmt | na 16 16 |        |             | ; destroyed. We could probably figure out some way to use TYPE instead, but zero
1190:000 | DONE cmt | na 16 16 |        |             | ; terminated strings are easier for the 65816 to use.
1191:000 | DONE cmt | na 16 16 |        |             | ; TODO add version without final line feed
1192:000 | DONE wsp | na 16 16 |        |             |
1193:000 | DONE lbl | na 16 16 | 006571 |             | print_string                         
1194:000 | DONE cmt | na 16 16 |        |             |                 ; don't use tmpdsp for X because we don't know if the user has
1195:000 | DONE cmt | na 16 16 |        |             |                 ; used it for something already
1196:000 | DONE ins | na 16 16 | 006571 | da          |                 phx                  
1197:000 | DONE ins | na 16 16 | 006572 | aa          |                 tax                  ; x16 contains address of string
1198:000 | DONE lbl | na 16 16 | 006573 |             | @                                    
1199:000 | DONE ins | na 16 16 | 006573 | e2 20       |                 sep 20               
1199:001 | DONE ctl | na  8 16 |        |             |         .!a8
1200:000 | DONE ins | na  8 16 | 006575 | bd 00 00    |                 lda.x 0000           ; LDA $0000,X
1201:000 | DONE ins | na  8 16 | 006578 | f0 06       |                 beq 006580           
1202:000 | DONE ins | na  8 16 | 00657a | 20 30 60    |                 jsr 006030           
1203:000 | DONE ins | na  8 16 | 00657d | e8          |                 inx                  
1204:000 | DONE ins | na  8 16 | 00657e | 80 f3       |                 bra 006573           
1205:000 | DONE wsp | na  8 16 |        |             |
1206:000 | DONE lbl | na  8 16 | 006580 |             | print_string_done                    
1207:000 | DONE ins | na  8 16 | 006580 | a9 0a       |                 lda.# AscLF          ; should be CR on some systems
1208:000 | DONE ins | na  8 16 | 006582 | 20 30 60    |                 jsr 006030           
1209:000 | DONE ins | na  8 16 | 006585 | c2 20       |                 rep 20               
1209:001 | DONE ctl | na 16 16 |        |             |         .!a16
1210:000 | DONE ins | na 16 16 | 006587 | fa          |                 plx                  
1211:000 | DONE ins | na 16 16 | 006588 | 60          |                 rts                  
1212:000 | DONE wsp | na 16 16 |        |             |
1213:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1214:000 | DONE cmt | na 16 16 |        |             | ; CONVERT BYTE TO ASCII
1215:000 | DONE cmt | na 16 16 |        |             | ; Convert byte in A to two ASCII hex digits and print them. Calls
1216:000 | DONE cmt | na 16 16 |        |             | ; nibble_to_ascii. Assumes A is 8 bit.
1217:000 | DONE lbl | na 16 16 | 006589 |             | byte_to_ascii                        
1218:000 | DONE dir | na  8 16 |        |             |         .!a8                         
1219:000 | DONE ins | na  8 16 | 006589 | 48          |                 pha                  
1220:000 | DONE cmt | na  8 16 |        |             |                 ; convert high nibble first
1221:000 | DONE ins | na  8 16 | 00658a | 4a          |                 lsr.a                
1222:000 | DONE ins | na  8 16 | 00658b | 4a          |                 lsr.a                
1223:000 | DONE ins | na  8 16 | 00658c | 4a          |                 lsr.a                
1224:000 | DONE ins | na  8 16 | 00658d | 4a          |                 lsr.a                
1225:000 | DONE ins | na  8 16 | 00658e | 20 96 65    |                 jsr 006596           
1226:000 | DONE wsp | na  8 16 |        |             |
1227:000 | DONE ins | na  8 16 | 006591 | 68          |                 pla                  
1228:000 | DONE ins | na  8 16 | 006592 | 20 96 65    |                 jsr 006596           
1229:000 | DONE wsp | na  8 16 |        |             |
1230:000 | DONE ins | na  8 16 | 006595 | 60          |                 rts                  
1231:000 | DONE wsp | na  8 16 |        |             |
1232:000 | DONE wsp | na  8 16 |        |             |
1233:000 | DONE cmt | na  8 16 |        |             | ; -------------------------------------------------------------------
1234:000 | DONE cmt | na  8 16 |        |             | ; CONVERT NIBBLE TO ASCII
1235:000 | DONE cmt | na  8 16 |        |             | ; Converts the lower nibble of a number in A and returns the ASCII character
1236:000 | DONE cmt | na  8 16 |        |             | ; number, then prints it. Assumes A is 8 bit
1237:000 | DONE lbl | na  8 16 | 006596 |             | nibble_to_ascii                      
1238:000 | DONE dir | na  8 16 |        |             |         .!a8                         
1239:000 | DONE ins | na  8 16 | 006596 | 29 0f       |                 and.# 0f             
1240:000 | DONE ins | na  8 16 | 006598 | 09 30       |                 ora.# 30             
1241:000 | DONE ins | na  8 16 | 00659a | c9 3a       |                 cmp.# 3a             ; '9' + 1
1242:000 | DONE ins | na  8 16 | 00659c | 90 02       |                 bcc 0065a0           
1243:000 | DONE ins | na  8 16 | 00659e | 69 06       |                 adc.# 06             
1244:000 | DONE lbl | na  8 16 | 0065a0 |             | @                                    
1245:000 | DONE ins | na  8 16 | 0065a0 | 20 30 60    |                 jsr 006030           
1246:000 | DONE wsp | na  8 16 |        |             |
1247:000 | DONE ins | na  8 16 | 0065a3 | 60          |                 rts                  
1248:000 | DONE wsp | na  8 16 |        |             |
1249:000 | DONE cmt | na  8 16 |        |             | ; -------------------------------------------------------------------
1250:000 | DONE cmt | na  8 16 |        |             | ; Convert a string given by ( addr u ) to upper case in place. Since we have to
1251:000 | DONE cmt | na  8 16 |        |             | ; treat the input buffer as read-only by ANS rules, we have to put the converted
1252:000 | DONE cmt | na  8 16 |        |             | ; string somewhere and then return the new address and length
1253:000 | DONE lbl | na  8 16 | 0065a4 |             | string_to_uppercase                  
1254:000 | DONE cmt | na  8 16 |        |             |                 ; TODO CODE THIS
1255:000 | DONE ins | na  8 16 | 0065a4 | 60          |                 rts                  
1256:000 | DONE wsp | na  8 16 |        |             |
1257:000 | DONE cmt | na  8 16 |        |             | ; ===================================================================
1258:000 | DONE cmt | na  8 16 |        |             | ; BOTTOM INCLUDES
1259:000 | DONE wsp | na  8 16 |        |             |
1260:000 | DONE cmt | na  8 16 |        |             | ; List of Strings for Liara Forth for the W65C265SXB
1260:001 | DONE cmt | na  8 16 |        |             | ; Scot W. Stevenson <scot.stevenson@gmail.com>
1260:002 | DONE cmt | na  8 16 |        |             | ; First version: 01. Apr 2016
1260:003 | DONE cmt | na  8 16 |        |             | ; This version:  29. Jan 2017
1260:004 | DONE wsp | na  8 16 |        |             |
1260:005 | DONE cmt | na  8 16 |        |             | ; This file is included by liaraforth.tasm
1260:006 | DONE wsp | na  8 16 |        |             |
1260:007 | DONE cmt | na  8 16 |        |             | ; ===================================================================
1260:008 | DONE cmt | na  8 16 |        |             | ; GENERAL
1260:009 | DONE wsp | na  8 16 |        |             |
1260:010 | DONE cmt | na  8 16 |        |             | ; All general strings must be zero-terminated, names start with "s_"
1260:011 | DONE cmt | na  8 16 |        |             | ; TODO see if "ok" needs trailing space. The printstring routine adds the EOL
1260:012 | DONE cmt | na  8 16 |        |             | ; character
1260:013 | DONE wsp | na  8 16 |        |             |
1260:014 | DONE lbl | na  8 16 | 0065a5 |             | s_title                              
1260:015 | DONE dir | na  8 16 | 0065a5 | (32 bytes)  |         .byte AscLF, 4c, 69, 61, 72, 61, 20, 46, 6f, 72, 74, 68,  (...) 
1260:015 | DONE dir | na  8 16 |        |             |                 0a 4c 69 61 72 61 20 46  --  
 L i a r a   F
1260:015 | DONE dir | na  8 16 |        |             |                 6f 72 74 68 20 66 6f 72  --  o r t h   f o r
1260:015 | DONE dir | na  8 16 |        |             |                 20 74 68 65 20 57 36 35  --    t h e   W 6 5
1260:015 | DONE dir | na  8 16 |        |             |                 43 32 36 35 53 58 42 00  --  C 2 6 5 S X B .
1260:015 | DONE dir | na  8 16 |        |             |                                          -- 
1260:016 | DONE lbl | na  8 16 | 0065c5 |             | s_version                            
1260:017 | DONE dir | na  8 16 | 0065c5 | (31 bytes)  |         .byte 56, 65, 72, 73, 69, 6f, 6e, 20, 50, 52, 45, 2d, 41, (...) 
1260:017 | DONE dir | na  8 16 |        |             |                 56 65 72 73 69 6f 6e 20  --  V e r s i o n  
1260:017 | DONE dir | na  8 16 |        |             |                 50 52 45 2d 41 4c 50 48  --  P R E - A L P H
1260:017 | DONE dir | na  8 16 |        |             |                 41 20 32 39 2e 20 4a 61  --  A   2 9 .   J a
1260:017 | DONE dir | na  8 16 |        |             |                 6e 20 32 30 31 37 00     --  n   2 0 1 7 .
1260:018 | DONE lbl | na  8 16 | 0065e4 |             | s_author                             
1260:019 | DONE dir | na  8 16 | 0065e4 | (45 bytes)  |         .byte 53, 63, 6f, 74, 20, 57, 2e, 20, 53, 74, 65, 76, 65, (...) 
1260:019 | DONE dir | na  8 16 |        |             |                 53 63 6f 74 20 57 2e 20  --  S c o t   W .  
1260:019 | DONE dir | na  8 16 |        |             |                 53 74 65 76 65 6e 73 6f  --  S t e v e n s o
1260:019 | DONE dir | na  8 16 |        |             |                 6e 20 3c 73 63 6f 74 2e  --  n   < s c o t .
1260:019 | DONE dir | na  8 16 |        |             |                 73 74 65 76 65 6e 73 6f  --  s t e v e n s o
1260:019 | DONE dir | na  8 16 |        |             |                 6e 40 67 6d 61 69 6c 2e  --  n @ g m a i l .
1260:019 | DONE dir | na  8 16 |        |             |                 63 6f 6d 3e 00           --  c o m > .
1260:020 | DONE lbl | na  8 16 | 006611 |             | s_disclaimer                         
1260:021 | DONE dir | na  8 16 | 006611 | (46 bytes)  |         .byte 4c, 69, 61, 72, 61, 20, 46, 6f, 72, 74, 68, 20, 63, (...) 
1260:021 | DONE dir | na  8 16 |        |             |                 4c 69 61 72 61 20 46 6f  --  L i a r a   F o
1260:021 | DONE dir | na  8 16 |        |             |                 72 74 68 20 63 6f 6d 65  --  r t h   c o m e
1260:021 | DONE dir | na  8 16 |        |             |                 73 20 77 69 74 68 20 61  --  s   w i t h   a
1260:021 | DONE dir | na  8 16 |        |             |                 62 73 6f 6c 75 74 65 6c  --  b s o l u t e l
1260:021 | DONE dir | na  8 16 |        |             |                 79 20 4e 4f 20 57 41 52  --  y   N O   W A R
1260:021 | DONE dir | na  8 16 |        |             |                 52 41 4e 54 59 00        --  R A N T Y .
1260:022 | DONE lbl | na  8 16 | 00663f |             | s_typebye                            
1260:023 | DONE dir | na  8 16 | 00663f | (19 bytes)  |         .byte 54, 79, 70, 65, 20, 27, 62, 79, 65, 27, 20, 74, 6f, (...) 
1260:023 | DONE dir | na  8 16 |        |             |                 54 79 70 65 20 27 62 79  --  T y p e   ' b y
1260:023 | DONE dir | na  8 16 |        |             |                 65 27 20 74 6f 20 65 78  --  e '   t o   e x
1260:023 | DONE dir | na  8 16 |        |             |                 69 74 00                 --  i t .
1260:024 | DONE lbl | na  8 16 | 006652 |             | s_ok                                 
1260:025 | DONE dir | na  8 16 | 006652 | (4 bytes)   |         .byte 20, 6f, 6b, 0          ; note empty space at beginning
1260:025 | DONE dir | na  8 16 |        |             |                 20 6f 6b 00              --    o k .
1260:026 | DONE wsp | na  8 16 |        |             |
1260:027 | DONE wsp | na  8 16 |        |             |
1260:028 | DONE cmt | na  8 16 |        |             | ; ===================================================================
1260:029 | DONE cmt | na  8 16 |        |             | ; ERROR STRINGS
1260:030 | DONE wsp | na  8 16 |        |             |
1260:031 | DONE cmt | na  8 16 |        |             | ; All error strings must be zero-terminated, names start with "es_"
1260:032 | DONE cmt | na  8 16 |        |             | ; These are currently the same error strings as in Tali Forth
1260:033 | DONE wsp | na  8 16 |        |             |
1260:034 | DONE lbl | na  8 16 | 006656 |             | es_channel                           
1260:035 | DONE dir | na  8 16 | 006656 | (26 bytes)  |         .byte 41, 63, 63, 65, 73, 73, 69, 6e, 67, 20, 75, 6e, 6b, (...) 
1260:035 | DONE dir | na  8 16 |        |             |                 41 63 63 65 73 73 69 6e  --  A c c e s s i n
1260:035 | DONE dir | na  8 16 |        |             |                 67 20 75 6e 6b 6e 6f 77  --  g   u n k n o w
1260:035 | DONE dir | na  8 16 |        |             |                 6e 20 63 68 61 6e 6e 65  --  n   c h a n n e
1260:035 | DONE dir | na  8 16 |        |             |                 6c 00                    --  l .
1260:036 | DONE lbl | na  8 16 | 006670 |             | es_componly                          
1260:037 | DONE dir | na  8 16 | 006670 | (33 bytes)  |         .byte 49, 6e, 74, 65, 72, 70, 72, 65, 74, 69, 6e, 67, 20, (...) 
1260:037 | DONE dir | na  8 16 |        |             |                 49 6e 74 65 72 70 72 65  --  I n t e r p r e
1260:037 | DONE dir | na  8 16 |        |             |                 74 69 6e 67 20 61 20 63  --  t i n g   a   c
1260:037 | DONE dir | na  8 16 |        |             |                 6f 6d 70 69 6c 65 2d 6f  --  o m p i l e - o
1260:037 | DONE dir | na  8 16 |        |             |                 6e 6c 79 20 77 6f 72 64  --  n l y   w o r d
1260:037 | DONE dir | na  8 16 |        |             |                 00                       --  .
1260:038 | DONE lbl | na  8 16 | 006691 |             | es_defer                             
1260:039 | DONE dir | na  8 16 | 006691 | (29 bytes)  |         .byte 44, 45, 46, 45, 52, 65, 64, 20, 77, 6f, 72, 64, 20, (...) 
1260:039 | DONE dir | na  8 16 |        |             |                 44 45 46 45 52 65 64 20  --  D E F E R e d  
1260:039 | DONE dir | na  8 16 |        |             |                 77 6f 72 64 20 6e 6f 74  --  w o r d   n o t
1260:039 | DONE dir | na  8 16 |        |             |                 20 64 65 66 69 6e 65 64  --    d e f i n e d
1260:039 | DONE dir | na  8 16 |        |             |                 20 79 65 74 00           --    y e t .
1260:040 | DONE lbl | na  8 16 | 0066ae |             | es_divzero                           
1260:041 | DONE dir | na  8 16 | 0066ae | (17 bytes)  |         .byte 44, 69, 76, 69, 73, 69, 6f, 6e, 20, 62, 79, 20, 7a, (...) 
1260:041 | DONE dir | na  8 16 |        |             |                 44 69 76 69 73 69 6f 6e  --  D i v i s i o n
1260:041 | DONE dir | na  8 16 |        |             |                 20 62 79 20 7a 65 72 6f  --    b y   z e r o
1260:041 | DONE dir | na  8 16 |        |             |                 00                       --  .
1260:042 | DONE lbl | na  8 16 | 0066bf |             | es_empty                             
1260:043 | DONE dir | na  8 16 | 0066bf | (9 bytes)   |         .byte 20, 28, 65, 6d, 70, 74, 79, 29, 0 
1260:043 | DONE dir | na  8 16 |        |             |                 20 28 65 6d 70 74 79 29  --    ( e m p t y )
1260:043 | DONE dir | na  8 16 |        |             |                 00                       --  .
1260:044 | DONE lbl | na  8 16 | 0066c8 |             | es_error                             
1260:045 | DONE dir | na  8 16 | 0066c8 | (12 bytes)  |         .byte 3e, 3e, 3e, 45, 72, 72, 6f, 72, 3c, 3c, 3c, 0 
1260:045 | DONE dir | na  8 16 |        |             |                 3e 3e 3e 45 72 72 6f 72  --  > > > E r r o r
1260:045 | DONE dir | na  8 16 |        |             |                 3c 3c 3c 00              --  < < < .
1260:046 | DONE lbl | na  8 16 | 0066d4 |             | es_intonly                           
1260:047 | DONE dir | na  8 16 | 0066d4 | (22 bytes)  |         .byte 4e, 6f, 74, 20, 69, 6e, 20, 69, 6e, 74, 65, 72, 70, (...) 
1260:047 | DONE dir | na  8 16 |        |             |                 4e 6f 74 20 69 6e 20 69  --  N o t   i n   i
1260:047 | DONE dir | na  8 16 |        |             |                 6e 74 65 72 70 72 65 74  --  n t e r p r e t
1260:047 | DONE dir | na  8 16 |        |             |                 20 6d 6f 64 65 00        --    m o d e .
1260:048 | DONE lbl | na  8 16 | 0066ea |             | es_noname                            
1260:049 | DONE dir | na  8 16 | 0066ea | (16 bytes)  |         .byte 50, 61, 72, 73, 69, 6e, 67, 20, 66, 61, 69, 6c, 75, (...) 
1260:049 | DONE dir | na  8 16 |        |             |                 50 61 72 73 69 6e 67 20  --  P a r s i n g  
1260:049 | DONE dir | na  8 16 |        |             |                 66 61 69 6c 75 72 65 00  --  f a i l u r e .
1260:049 | DONE dir | na  8 16 |        |             |                                          -- 
1260:050 | DONE lbl | na  8 16 | 0066fa |             | es_radix                             
1260:051 | DONE dir | na  8 16 | 0066fa | (23 bytes)  |         .byte 44, 69, 67, 69, 74, 20, 6c, 61, 72, 67, 65, 72, 20, (...) 
1260:051 | DONE dir | na  8 16 |        |             |                 44 69 67 69 74 20 6c 61  --  D i g i t   l a
1260:051 | DONE dir | na  8 16 |        |             |                 72 67 65 72 20 74 68 61  --  r g e r   t h a
1260:051 | DONE dir | na  8 16 |        |             |                 6e 20 62 61 73 65 00     --  n   b a s e .
1260:052 | DONE lbl | na  8 16 | 006711 |             | es_refill1                           
1260:053 | DONE dir | na  8 16 | 006711 | (46 bytes)  |         .byte 51, 55, 49, 54, 20, 63, 6f, 75, 6c, 64, 20, 6e, 6f, (...) 
1260:053 | DONE dir | na  8 16 |        |             |                 51 55 49 54 20 63 6f 75  --  Q U I T   c o u
1260:053 | DONE dir | na  8 16 |        |             |                 6c 64 20 6e 6f 74 20 67  --  l d   n o t   g
1260:053 | DONE dir | na  8 16 |        |             |                 65 74 20 69 6e 70 75 74  --  e t   i n p u t
1260:053 | DONE dir | na  8 16 |        |             |                 20 28 52 45 46 49 4c 4c  --    ( R E F I L L
1260:053 | DONE dir | na  8 16 |        |             |                 20 72 65 74 75 72 6e 65  --    r e t u r n e
1260:053 | DONE dir | na  8 16 |        |             |                 64 20 2d 31 29 00        --  d   - 1 ) .
1260:054 | DONE lbl | na  8 16 | 00673f |             | es_refill2                           
1260:055 | DONE dir | na  8 16 | 00673f | (32 bytes)  |         .byte 49, 6c, 6c, 65, 67, 61, 6c, 20, 53, 4f, 55, 52, 43, (...) 
1260:055 | DONE dir | na  8 16 |        |             |                 49 6c 6c 65 67 61 6c 20  --  I l l e g a l  
1260:055 | DONE dir | na  8 16 |        |             |                 53 4f 55 52 43 45 2d 49  --  S O U R C E - I
1260:055 | DONE dir | na  8 16 |        |             |                 44 20 64 75 72 69 6e 67  --  D   d u r i n g
1260:055 | DONE dir | na  8 16 |        |             |                 20 52 45 46 49 4c 4c 00  --    R E F I L L .
1260:055 | DONE dir | na  8 16 |        |             |                                          -- 
1260:056 | DONE lbl | na  8 16 | 00675f |             | es_stack                             
1260:057 | DONE dir | na  8 16 | 00675f | (25 bytes)  |         .byte 53, 74, 61, 63, 6b, 20, 6f, 76, 65, 72, 2d, 20, 6f, (...) 
1260:057 | DONE dir | na  8 16 |        |             |                 53 74 61 63 6b 20 6f 76  --  S t a c k   o v
1260:057 | DONE dir | na  8 16 |        |             |                 65 72 2d 20 6f 72 20 75  --  e r -   o r   u
1260:057 | DONE dir | na  8 16 |        |             |                 6e 64 65 72 66 6c 6f 77  --  n d e r f l o w
1260:057 | DONE dir | na  8 16 |        |             |                 00                       --  .
1260:058 | DONE lbl | na  8 16 | 006778 |             | es_syntax                            
1260:059 | DONE dir | na  8 16 | 006778 | (13 bytes)  |         .byte 55, 6e, 6b, 6e, 6f, 77, 6e, 20, 77, 6f, 72, 64, 0 
1260:059 | DONE dir | na  8 16 |        |             |                 55 6e 6b 6e 6f 77 6e 20  --  U n k n o w n  
1260:059 | DONE dir | na  8 16 |        |             |                 77 6f 72 64 00           --  w o r d .
1260:060 | DONE wsp | na  8 16 |        |             |
1260:061 | DONE cmt | na  8 16 |        |             | ; ===================================================================
1260:062 | DONE cmt | na  8 16 |        |             | ; TESTING STRINGS
1260:063 | DONE wsp | na  8 16 |        |             |
1260:064 | DONE cmt | na  8 16 |        |             | ; These strings are only used during testing and are removed as Liara Forth is
1260:065 | DONE cmt | na  8 16 |        |             | ; developed. All start with "tests_"
1260:066 | DONE wsp | na  8 16 |        |             |
1260:067 | DONE lbl | na  8 16 | 006785 |             | tests_prev_cmd                       
1260:068 | DONE dir | na  8 16 | 006785 | (19 bytes)  |         .byte 28, 70, 72, 65, 76, 69, 6f, 75, 73, 20, 63, 6f, 6d, (...) 
1260:068 | DONE dir | na  8 16 |        |             |                 28 70 72 65 76 69 6f 75  --  ( p r e v i o u
1260:068 | DONE dir | na  8 16 |        |             |                 73 20 63 6f 6d 6d 61 6e  --  s   c o m m a n
1260:068 | DONE dir | na  8 16 |        |             |                 64 29 00                 --  d ) .
1260:069 | DONE lbl | na  8 16 | 006798 |             | tests_next_cmd                       
1260:070 | DONE dir | na  8 16 | 006798 | (15 bytes)  |         .byte 28, 6e, 65, 78, 74, 20, 63, 6f, 6d, 6d, 61, 6e, 64, (...) 
1260:070 | DONE dir | na  8 16 |        |             |                 28 6e 65 78 74 20 63 6f  --  ( n e x t   c o
1260:070 | DONE dir | na  8 16 |        |             |                 6d 6d 61 6e 64 29 00     --  m m a n d ) .
1260:071 | DONE wsp | na  8 16 |        |             |
1260:072 | DONE cmt | na  8 16 |        |             | ; ===================================================================
1260:073 | DONE cmt | na  8 16 |        |             | ; ALPHABET STRINGS
1260:074 | DONE wsp | na  8 16 |        |             |
1260:075 | DONE cmt | na  8 16 |        |             | ; Leave alphastr as the last entry in the source code to make it easier to
1260:076 | DONE cmt | na  8 16 |        |             | ; see where this section ends. This cannot be a zero-terminated string
1260:077 | DONE wsp | na  8 16 |        |             |
1260:078 | DONE lbl | na  8 16 | 0067a7 |             | alphastr                             
1260:079 | DONE dir | na  8 16 | 0067a7 | (35 bytes)  |         .byte 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 61, 62, 63, (...) 
1260:079 | DONE dir | na  8 16 |        |             |                 30 31 32 33 34 35 36 37  --  0 1 2 3 4 5 6 7
1260:079 | DONE dir | na  8 16 |        |             |                 38 39 61 62 63 64 65 66  --  8 9 a b c d e f
1260:079 | DONE dir | na  8 16 |        |             |                 67 68 69 6a 6b 6c 6d 6e  --  g h i j k l m n
1260:079 | DONE dir | na  8 16 |        |             |                 6f 70 71 72 73 74 75 76  --  o p q r s t u v
1260:079 | DONE dir | na  8 16 |        |             |                 77 79 7a                 --  w y z
1261:000 | DONE wsp | na  8 16 |        |             |
1262:000 | DONE cmt | na  8 16 |        |             | ; ===================================================================
1263:000 | DONE cmt | na  8 16 |        |             | ; TESTING ROUTINES (UNCOMMENT FOR USE)
1264:000 | DONE wsp | na  8 16 |        |             |
1265:000 | DONE cmt | na  8 16 |        |             |                 ; --- TODO TESTING (PRINT ONE "A") ---
1266:000 | DONE cmt | na  8 16 |        |             |                 ; lda.# 61
1267:000 | DONE cmt | na  8 16 |        |             |                 ; jsr put_chr
1268:000 | DONE cmt | na  8 16 |        |             |                 ; .!a16
1269:000 | DONE cmt | na  8 16 |        |             |                 ; brk 00
1270:000 | DONE cmt | na  8 16 |        |             |                 ; --- TODO TESTING ---
1271:000 | DONE wsp | na  8 16 |        |             |
1272:000 | DONE cmt | na  8 16 |        |             |                 ; --- TODO TESTING (HALT CPU) ---
1273:000 | DONE cmt | na  8 16 |        |             |                 ; brk 00 ; BRK for 265sxb tests (drops back to Mensch Monitor)
1274:000 | DONE cmt | na  8 16 |        |             |                 ; stp    ; STP for crude65816 emulator tests
1275:000 | DONE cmt | na  8 16 |        |             |                 ; --- TODO TESTING ---
1276:000 | DONE wsp | na  8 16 |        |             |
1277:000 | DONE cmt | na  8 16 |        |             | ; ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
1278:000 | DONE wsp | na  8 16 |        |             |
1279:000 | DONE wsp | na  8 16 |        |             |
1280:000 | DONE cmt | na  8 16 |        |             | ; ===================================================================
1281:000 | DONE cmt | na  8 16 |        |             | ; END
1282:000 | DONE wsp | na  8 16 |        |             |
1283:000 | DONE dir | na  8 16 |        |             |         .end                         

MACROS:
        (none)

SYMBOL TABLE:
- a_2dup                      : 0060f0
- a_abort                     : 006093
- a_accept                    : 0060fb
- a_bell                      : 00617c
- a_bl                        : 006183
- a_bye                       : 00618b
- a_cold                      : 00605d
- a_comma                     : 00618e
- a_count                     : 00619a
- a_cr                        : 0061a9
- a_drop                      : 0061b3
- a_dup                       : 0061b8
- a_execute                   : 0061c0
- a_find-name                 : 0061d0
- a_here                      : 006227
- a_name>int                  : 00622e
- a_name>string               : 006237
- a_nip                       : 006248
- a_one                       : 0060de
- a_one-plus                  : 0060e6
- a_parse                     : 00627d
- a_parse-name                : 00624b
- a_plus                      : 0060ce
- a_quit                      : 00609b
- a_refill                    : 0062b0
- a_source                    : 0062eb
- a_source-id                 : 0062f8
- a_space                     : 0062ff
- a_state                     : 006306
- a_swap                      : 00630e
- a_to-in                     : 0060c6
- a_true                      : 006314
- a_tuck                      : 00631c
- a_two                       : 0060e8
- a_type                      : 006325
- a_words                     : 006346
- a_zero                      : 0060d6
- accept_bs                   : 00615e
- accept_eol                  : 006157
- accept_loop                 : 00610c
- accept_nonzero              : 006103
- alphastr                    : 0067a7
- ascbell                     : 000007
- ascbs                       : 000008
- asccc                       : 000003
- asccn                       : 00000e
- asccp                       : 000010
- asccr                       : 00000d
- ascdel                      : 00007f
- ascesc                      : 00001b
- asclf                       : 00000a
- ascsp                       : 000020
- brg_value                   : 00000b
- buffers                     : 007c00
- buffersize                  : 0000ff
- byte_to_ascii               : 006589
- cib                         : 00020c
- ciblen                      : 00020e
- co                          : 000040
- compex                      : 006541
- compex_got_name_token       : 006556
- compex_line_done            : 006564
- compex_loop                 : 006541
- cp                          : 000200
- directpage                  : 000200
- directpage-multiple         : 007400
- dp                          : 000202
- dsp0                        : 0002f0
- error                       : 00656b
- es_channel                  : 006656
- es_componly                 : 006670
- es_defer                    : 006691
- es_divzero                  : 0066ae
- es_empty                    : 0066bf
- es_error                    : 0066c8
- es_intonly                  : 0066d4
- es_noname                   : 0066ea
- es_radix                    : 0066fa
- es_refill1                  : 006711
- es_refill2                  : 00673f
- es_stack                    : 00675f
- es_syntax                   : 006778
- execute_done                : 0061ce
- execute_ip                  : 0061bd
- find-name_all_chars         : 0061fe
- find-name_char_nomatch_8    : 0061fa
- find-name_chars             : 0061ef
- find-name_done              : 006224
- find-name_failure_16        : 006221
- find-name_loop              : 0061da
- find-name_next_entry        : 0061e3
- find-name_success           : 00621b
- get_chr                     : 006041
- get_chr_wait                : 006046
- h_2dup                      : 00641a
- h_abort                     : 0063a4
- h_accept                    : 0064de
- h_bell                      : 00638b
- h_bl                        : 0063e4
- h_bye                       : 006367
- h_cold                      : 006372
- h_comma                     : 0064d5
- h_count                     : 006397
- h_cr                        : 0063da
- h_drop                      : 006535
- h_dup                       : 00652a
- h_execute                   : 006503
- h_false                     : 00645f
- h_find-name                 : 006493
- h_here                      : 006512
- h_name>int                  : 0063ca
- h_name>string               : 006407
- h_nip                       : 0064f8
- h_one                       : 006481
- h_one-plus                  : 006455
- h_parse                     : 0063b1
- h_parse-name                : 0064b2
- h_plus                      : 00644c
- h_quit                      : 0063be
- h_refill                    : 0064a4
- h_source                    : 00643e
- h_source-id                 : 0064c4
- h_space                     : 0063ee
- h_state                     : 006426
- h_swap                      : 00651e
- h_to-in                     : 006433
- h_true                      : 00646c
- h_tuck                      : 0064ec
- h_two                       : 006478
- h_type                      : 0063fb
- h_words                     : 00637e
- h_zero                      : 00648a
- have_chr?                   : 006050
- hw_acsr0                    : 00df70
- hw_acsr1                    : 00df72
- hw_acsr2                    : 00df74
- hw_acsr3                    : 00df76
- hw_artd0                    : 00df71
- hw_artd1                    : 00df73
- hw_artd2                    : 00df75
- hw_artd3                    : 00df77
- hw_bcr                      : 00df40
- hw_eier                     : 00df47
- hw_eifr                     : 00df45
- hw_pcs7                     : 00df27
- hw_pd0                      : 00df00
- hw_pd1                      : 00df01
- hw_pd2                      : 00df02
- hw_pd3                      : 00df03
- hw_pd4                      : 00df20
- hw_pd5                      : 00df21
- hw_pd6                      : 00df22
- hw_pd7                      : 00df23
- hw_pdd0                     : 00df04
- hw_pdd1                     : 00df05
- hw_pdd2                     : 00df06
- hw_pdd3                     : 00df07
- hw_pdd4                     : 00df24
- hw_pdd5                     : 00df25
- hw_pdd6                     : 00df26
- hw_sscr                     : 00df41
- hw_t0ch                     : 00df61
- hw_t0cl                     : 00df60
- hw_t1ch                     : 00df63
- hw_t1cl                     : 00df62
- hw_t2ch                     : 00df65
- hw_t2cl                     : 00df64
- hw_t3ch                     : 00df67
- hw_t3cl                     : 00df66
- hw_t4ch                     : 00df69
- hw_t4cl                     : 00df68
- hw_t5ch                     : 00df6b
- hw_t5cl                     : 00df6a
- hw_t6ch                     : 00df6d
- hw_t6cl                     : 00df6c
- hw_t7ch                     : 00df6f
- hw_t7cl                     : 00df6e
- hw_tcr                      : 00df42
- hw_ter                      : 00df43
- hw_tier                     : 00df46
- hw_tifr                     : 00df44
- hw_uier                     : 00df49
- hw_uifr                     : 00df48
- ibuffer1                    : 007c00
- ibuffer2                    : 007d00
- im                          : 000020
- insrc                       : 00020a
- maxram-multiple             : 006fff
- maxram-single               : 007bff
- nc                          : 000010
- nibble_to_ascii             : 006596
- parse-name_empty_line       : 00625d
- parse-name_found            : 006271
- parse-name_loop             : 006250
- parse_found_delimiter       : 00629d
- parse_loop                  : 006290
- parse_reached_eol           : 0062a1
- physicalram                 : 007fff
- piblen                      : 000210
- print_string                : 006571
- print_string_done           : 006580
- put_chr                     : 006030
- put_chr_wait                : 006036
- pw                          : 000080
- quit_get_line               : 0060a5
- quit_refill_successful      : 0060b3
- ram0                        : 000200
- refill_source_is_not_string : 0062e4
- refill_src_not_kbd          : 0062d7
- reset_hardware              : 006000
- s_author                    : 0065e4
- s_disclaimer                : 006611
- s_ok                        : 006652
- s_title                     : 0065a5
- s_typebye                   : 00663f
- s_version                   : 0065c5
- stack-multiple              : 007000
- stack0                      : 007fff
- start                       : 006060
- state                       : 000214
- string_to_uppercase         : 0065a4
- tests_next_cmd              : 006798
- tests_prev_cmd              : 006785
- tmp1                        : 000216
- tmp2                        : 000218
- tmp3                        : 00021a
- tmpdsp                      : 000204
- tmptos                      : 000206
- toin                        : 000212
- type_done                   : 00633f
- type_loop                   : 006333
- words_loop                  : 00634d
- z_2dup                      : 0060fa
- z_abort                     : 0060c5
- z_accept                    : 00617b
- z_bell                      : 006182
- z_bl                        : 00618a
- z_bye                       : 00618d
- z_cold                      : 0060c5
- z_comma                     : 006199
- z_count                     : 0061a8
- z_cr                        : 0061b2
- z_drop                      : 0061b7
- z_dup                       : 0061bc
- z_execute                   : 0061cf
- z_find-name                 : 006226
- z_here                      : 00622d
- z_name>int                  : 006236
- z_name>string               : 006247
- z_nip                       : 00624a
- z_one                       : 0060e5
- z_one-plus                  : 0060e7
- z_parse                     : 0062af
- z_parse-name                : 0062af
- z_plus                      : 0060d5
- z_quit                      : 0060c5
- z_refill                    : 0062ea
- z_source                    : 0062f7
- z_source-id                 : 0062fe
- z_space                     : 006305
- z_state                     : 00630d
- z_swap                      : 006313
- z_to-in                     : 0060cd
- z_true                      : 00631b
- z_tuck                      : 006324
- z_two                       : 0060ef
- z_type                      : 006345
- z_words                     : 006366
- z_zero                      : 0060dd
