A Tinkerer's Assembler for the 6502/65c02/65816
Version BETA 17. Feb 2017
Copyright 2015-2017 Scot W. Stevenson <scot.stevenson@gmail.com>
This program comes with ABSOLUTELY NO WARRANTY

Code listing for file liaraforth.tasm
Generated on Thu Mar  2 12:06:12 2017
Target MPU: 65816
External files loaded: 4
Number of passes executed: 35
Number of steps executed: 10
Assembly time: 0.19664 seconds
Code origin: 006000
Bytes of machine code: 7405

LISTING:
   Line  Status/Type State/Width Address     Bytes     Instruction
   1:000 | DONE cmt | em  8  8 |        |             | ; Liara Forth for the W65C265SXB
   2:000 | DONE cmt | em  8  8 |        |             | ; Scot W. Stevenson <scot.stevenson@gmail.com>
   3:000 | DONE cmt | em  8  8 |        |             | ; First version: 01. Apr 2016
   4:000 | DONE cmt | em  8  8 |        |             | ; This version: 01. Mar 2017
   5:000 | DONE wsp | em  8  8 |        |             |
   6:000 | DONE cmt | em  8  8 |        |             | ; This code is written in Typist's Assembler Notation for the 65c02/65816
   7:000 | DONE cmt | em  8  8 |        |             | ; See docs/MANUAL.md for more information
   8:000 | DONE wsp | em  8  8 |        |             |
   9:000 | DONE dir | em  8  8 |        |             |         .mpu 65816                   
  10:000 | DONE cmt | em  8  8 |        |             | ;       .origin 8000    ; start of code to save to Flash memory
  11:000 | DONE dir | em  8  8 |        |             |         .origin 6000                 start of code to save to built-in RAM
  12:000 | DONE wsp | em  8  8 |        |             |
  13:000 | DONE cmt | em  8  8 |        |             | ; ===================================================================
  14:000 | DONE cmt | em  8  8 |        |             | ; TOP INCLUDES
  15:000 | DONE wsp | em  8  8 |        |             |
  16:000 | DONE cmt | em  8  8 |        |             | ; Definitions for Liara Forth for the W65C265SXB
  16:001 | DONE cmt | em  8  8 |        |             | ; Scot W. Stevenson <scot.stevenson@gmail.com>
  16:002 | DONE cmt | em  8  8 |        |             | ; First version: 01. Apr 2016
  16:003 | DONE cmt | em  8  8 |        |             | ; This version: 02. Mar 2017
  16:004 | DONE wsp | em  8  8 |        |             |
  16:005 | DONE cmt | em  8  8 |        |             | ; This file is included by liaraforth.tasm
  16:006 | DONE wsp | em  8  8 |        |             |
  16:007 | DONE cmt | em  8  8 |        |             | ; Note that Typist's Assembler Notation does not distinguish between
  16:008 | DONE cmt | em  8  8 |        |             | ; upper andlower case. Variations in case are for human readers only.
  16:009 | DONE wsp | em  8  8 |        |             |
  16:010 | DONE cmt | em  8  8 |        |             | ; I/O facilities are handled in the separate kernel files. The definitions for
  16:011 | DONE cmt | em  8  8 |        |             | ; multitasking are preliminary and will probably change
  16:012 | DONE wsp | em  8  8 |        |             |
  16:013 | DONE cmt | em  8  8 |        |             | ; ===================================================================
  16:014 | DONE cmt | em  8  8 |        |             | ; CONTROL VALUES
  16:015 | DONE wsp | em  8  8 |        |             |
  16:016 | DONE cmt | em  8  8 |        |             |         ; NC_LIMIT gives the number of maximum bytes the code of a word may be
  16:017 | DONE cmt | em  8  8 |        |             |         ; long and still be compiled natively - see COMPILE, for details.
  16:018 | DONE cmt | em  8  8 |        |             |         ; A value of zero means a word is always compiled as a subroutine.
  16:019 | DONE cmt | em  8  8 |        |             |         ; TODO Decide if we want to expose this value to the user
  16:020 | DONE dir | em  8  8 |        |             |         .equ nc_limit 0              
  16:021 | DONE wsp | em  8  8 |        |             |
  16:022 | DONE cmt | em  8  8 |        |             | ; ===================================================================
  16:023 | DONE cmt | em  8  8 |        |             | ; MEMORY MAP (consider moving parts of these to kernel.tasm)
  16:024 | DONE wsp | em  8  8 |        |             |
  16:025 | DONE dir | em  8  8 |        |             |         .equ cp0              0300   start of available RAM for Dictionary
  16:026 | DONE dir | em  8  8 |        |             |         .equ physicalram     07fff   end of installed RAM
  16:027 | DONE dir | em  8  8 |        |             |         .equ maxram-single   07bff   end of available RAM (single task mode)
  16:028 | DONE dir | em  8  8 |        |             |         .equ maxram-multiple 06fff   end of available RAM (multitask mode)
  16:029 | DONE dir | em  8  8 |        |             |         .equ buffers  7c00           buffer area start
  16:030 | DONE wsp | em  8  8 |        |             |
  16:031 | DONE cmt | em  8  8 |        |             | ; The two input buffers are currently switched in REFILL by bit flipping. If you
  16:032 | DONE cmt | em  8  8 |        |             | ; change their addresses, you'll probably have to rewrite the code there
  16:033 | DONE wsp | em  8  8 |        |             |
  16:034 | DONE dir | em  8  8 |        |             |         .equ buffersize  0ff         maximum size for input buffers
  16:035 | DONE dir | em  8  8 |        |             |         .equ ibuffer1   7c00         start of 256 byte input buffer 1
  16:036 | DONE dir | em  8  8 |        |             |         .equ ibuffer2   7d00         start of 256 byte input buffer 2
  16:037 | DONE dir | em  8  8 |        |             |         .equ padsize     0ff         size of PAD, must be > &84
  16:038 | DONE dir | em  8  8 |        |             |         .equ padoffset   07f         distance from CP to PAD (holds number strings)
  16:039 | DONE wsp | em  8  8 |        |             |
  16:040 | DONE cmt | em  8  8 |        |             | ; RAM from 0000 to 01ff is left for the Mensch Monitor to use
  16:041 | DONE wsp | em  8  8 |        |             |
  16:042 | DONE dir | em  8  8 |        |             |         .equ directpage          0200 single task Direct Page (DP) start
  16:043 | DONE dir | em  8  8 |        |             |         .equ stack-multiple      7000 multitask Stack (S) area start
  16:044 | DONE dir | em  8  8 |        |             |         .equ directpage-multiple 7400 multitask Direct Page (DP) area start
  16:045 | DONE wsp | em  8  8 |        |             |
  16:046 | DONE cmt | em  8  8 |        |             | ; Initial values
  16:047 | DONE wsp | em  8  8 |        |             |
  16:048 | DONE dir | em  8  8 |        |             |         .equ stack0 7fff             single task Stack (S) start (bottom)
  16:049 | DONE dir | em  8  8 |        |             |         .equ dsp0   02f0             initial Data Stack Pointer (X)
  16:050 | DONE wsp | em  8  8 |        |             |
  16:051 | DONE cmt | em  8  8 |        |             | ; ===================================================================
  16:052 | DONE cmt | em  8  8 |        |             | ; DIRECT PAGE ADDRESSES
  16:053 | DONE wsp | em  8  8 |        |             |
  16:054 | DONE cmt | em  8  8 |        |             | ; All are one cell (two bytes) long to prevent weird errors. We keep CP and DP
  16:055 | DONE cmt | em  8  8 |        |             | ; high in this list and put the most expendable values first in case the Data
  16:056 | DONE cmt | em  8  8 |        |             | ; Stack underflows hard and wraps. The DP is most important because it will let
  16:057 | DONE cmt | em  8  8 |        |             | ; us do a COLD if all else fails as long as we can access it
  16:058 | DONE cmt | em  8  8 |        |             | ; TODO rewrite with USER variables
  16:059 | DONE wsp | em  8  8 |        |             |
  16:060 | DONE dir | em  8  8 |        |             |         .equ scratch { 000200 + &00 } 8 byte scratchpad (see UM/MOD)
  16:061 | DONE dir | em  8  8 |        |             |         .equ tmpbranch { 000200 + &08 } temp storage for 0BRANCH, BRANCH only
  16:062 | DONE dir | em  8  8 |        |             |         .equ tmp1 { 000200 + &10 }   Temporary storage
  16:063 | DONE dir | em  8  8 |        |             |         .equ tmp2 { 000200 + &12 }   Temporary storage
  16:064 | DONE dir | em  8  8 |        |             |         .equ tmp3 { 000200 + &14 }   Temporary storage
  16:065 | DONE dir | em  8  8 |        |             |         .equ tmpdsp { 000200 + &16 } Temporary DSP (X) storage, 2 bytes
  16:066 | DONE dir | em  8  8 |        |             |         .equ tmptos { 000200 + &18 } Temporary TOS (Y) storage, 2 bytes
  16:067 | DONE dir | em  8  8 |        |             |         .equ workword { 000200 + &20 } Currently compiliing word
  16:068 | DONE dir | em  8  8 |        |             |         .equ output { 000200 + &22 } Address where output is constructed
  16:069 | DONE dir | em  8  8 |        |             |         .equ insrc { 000200 + &24 }  Input Source for SOURCE-ID
  16:070 | DONE dir | em  8  8 |        |             |         .equ cib { 000200 + &26 }    Current Input Buffer, 7c00 or 7d00
  16:071 | DONE dir | em  8  8 |        |             |         .equ ciblen { 000200 + &28 } Length of current input buffer
  16:072 | DONE dir | em  8  8 |        |             |         .equ piblen { 000200 + &30 } Length of previous input buffer
  16:073 | DONE dir | em  8  8 |        |             |         .equ toin { 000200 + &32 }   Pointer to CIB (>IN in Forth)
  16:074 | DONE dir | em  8  8 |        |             |         .equ state { 000200 + &34 }  STATE: -1 compile, 0 interpret
  16:075 | DONE dir | em  8  8 |        |             |         .equ base { 000200 + &36 }   Radix for number conversion
  16:076 | DONE dir | em  8  8 |        |             |         .equ tohold { 000200 + &38 } Pointer for formatted output
  16:077 | DONE dir | em  8  8 |        |             |         .equ cp { 000200 + &40 }     Compiler Pointer, 2 bytes
  16:078 | DONE dir | em  8  8 |        |             |         .equ dp { 000200 + &42 }     Dictionary Pointer, 2 bytes
  16:079 | DONE wsp | em  8  8 |        |             |
  16:080 | DONE wsp | em  8  8 |        |             |
  16:081 | DONE cmt | em  8  8 |        |             | ; ===================================================================
  16:082 | DONE cmt | em  8  8 |        |             | ; HELPER DEFINITIONS
  16:083 | DONE wsp | em  8  8 |        |             |
  16:084 | DONE cmt | em  8  8 |        |             | ; ASCII characters
  16:085 | DONE dir | em  8  8 |        |             |         .equ AscCC   03              break (Control-C) ASCII character
  16:086 | DONE dir | em  8  8 |        |             |         .equ AscBELL 07              ACSCII bell sound
  16:087 | DONE dir | em  8  8 |        |             |         .equ AscBS   08              backspace ASCII character
  16:088 | DONE dir | em  8  8 |        |             |         .equ AscLF   0a              line feed ASCII character
  16:089 | DONE dir | em  8  8 |        |             |         .equ AscCR   0d              carriage return ASCII character
  16:090 | DONE dir | em  8  8 |        |             |         .equ AscCN   0e              ASCII CNTR-n (for next command)
  16:091 | DONE dir | em  8  8 |        |             |         .equ AscCP   10              ASCII CNTR-p (for previous command)
  16:092 | DONE dir | em  8  8 |        |             |         .equ AscESC  1b              Escape ASCII character
  16:093 | DONE dir | em  8  8 |        |             |         .equ AscSP   20              space ASCII character
  16:094 | DONE dir | em  8  8 |        |             |         .equ AscDEL  7f              DEL ASCII character
  16:095 | DONE wsp | em  8  8 |        |             |
  16:096 | DONE cmt | em  8  8 |        |             | ; Dictionary flags. The first four are currently unused
  16:097 | DONE dir | em  8  8 |        |             |         .equ CO 0004                 Compile Only
  16:098 | DONE dir | em  8  8 |        |             |         .equ IM 0002                 Immediate Word
  16:099 | DONE dir | em  8  8 |        |             |         .equ NC 0001                 Native Compile allowed
  16:100 | DONE wsp | em  8  8 |        |             |
  17:000 | DONE wsp | em  8  8 |        |             |
  18:000 | DONE cmt | em  8  8 |        |             | ; Hardware dependencies are isolated to a large degree in kernel files. Liara
  19:000 | DONE cmt | em  8  8 |        |             | ; Forth ships with two such files: One for the crude65816 emulator, and one for
  20:000 | DONE cmt | em  8  8 |        |             | ; the 265sxb board. Only use one.
  21:000 | DONE wsp | em  8  8 |        |             |
  22:000 | DONE cmt | em  8  8 |        |             | ;       .include kernel_emu.tasm        ; routines for crude65815 emulator
  23:000 | DONE cmt | em  8  8 |        |             | ; Basic hardware routines for Liara Forth: 265SXB version
  23:001 | DONE cmt | em  8  8 |        |             | ; Scot W. Stevenson <scot.stevenson@gmail.com>
  23:002 | DONE cmt | em  8  8 |        |             | ; First version: 04. Jan 2017
  23:003 | DONE cmt | em  8  8 |        |             | ; This version: 15. Feb 2017
  23:004 | DONE wsp | em  8  8 |        |             |
  23:005 | DONE cmt | em  8  8 |        |             | ; This section provides basic hardware interface to the 265SXB, providing the
  23:006 | DONE cmt | em  8  8 |        |             | ; PUT_CHR and GET_CHR routines that Liara Forth uses. It is in its own section
  23:007 | DONE cmt | em  8  8 |        |             | ; to make porting Forth to other machines easier.
  23:008 | DONE wsp | em  8  8 |        |             |
  23:009 | DONE cmt | em  8  8 |        |             | ; The code here is based on Andrew Jacobs' Basic Vector Handling for the
  23:010 | DONE cmt | em  8  8 |        |             | ; W65C265SXB Development Board as part of the w65c265sxb-hacker project
  23:011 | DONE cmt | em  8  8 |        |             | ; (https://github.com/andrew-jacobs/w65c265sxb-hacker). It is released under the
  23:012 | DONE cmt | em  8  8 |        |             | ; following license:
  23:013 | DONE cmt | em  8  8 |        |             | ;
  23:014 | DONE cmt | em  8  8 |        |             | ; This work is made available under the terms of the Creative Commons
  23:015 | DONE cmt | em  8  8 |        |             | ; Attribution-NonCommercial-ShareAlike 4.0 International license. Open the
  23:016 | DONE cmt | em  8  8 |        |             | ; following URL to see the details.
  23:017 | DONE cmt | em  8  8 |        |             | ;
  23:018 | DONE cmt | em  8  8 |        |             | ; http://creativecommons.org/licenses/by-nc-sa/4.0/
  23:019 | DONE wsp | em  8  8 |        |             |
  23:020 | DONE cmt | em  8  8 |        |             | ; Original variable names from w65c256.inc are included in comments to make
  23:021 | DONE cmt | em  8  8 |        |             | ; updates and changes easier
  23:022 | DONE wsp | em  8  8 |        |             |
  23:023 | DONE cmt | em  8  8 |        |             | ; ===================================================================
  23:024 | DONE cmt | em  8  8 |        |             | ; HARDWARE DEFINITIONS
  23:025 | DONE cmt | em  8  8 |        |             | ; These follow Andrew Jacobs' names, but lower case and with "hw_" prefixed.
  23:026 | DONE cmt | em  8  8 |        |             | ; This is the only file where symbols with the hw_ prefix may be defined or used
  23:027 | DONE wsp | em  8  8 |        |             |
  23:028 | DONE cmt | em  8  8 |        |             | ; Baud rates are calculated by the formula { osc_freq/(16*baud_rate)-1 } which we
  23:029 | DONE cmt | em  8  8 |        |             | ; can do on the fly at every assembly with the following parameters, or just calculate
  23:030 | DONE cmt | em  8  8 |        |             | ; once and then define brg_value with:
  23:031 | DONE cmt | em  8  8 |        |             | ;
  23:032 | DONE cmt | em  8  8 |        |             | ; - For  9600 baud, use &23
  23:033 | DONE cmt | em  8  8 |        |             | ; - For 19200 baud, use &11
  23:034 | DONE wsp | em  8  8 |        |             |
  23:035 | DONE cmt | em  8  8 |        |             | ;       .equ osc_freq  3686400          ; SXB runs at 3.6864MHz
  23:036 | DONE cmt | em  8  8 |        |             | ;       .equ baud_rate 19200            ; ACIA baud rate
  23:037 | DONE cmt | em  8  8 |        |             | ;	.equ baud_rate 9600             ; ACIA baud rate
  23:038 | DONE wsp | em  8  8 |        |             |
  23:039 | DONE dir | em  8  8 |        |             |         .equ brg_value &11           19200 baud
  23:040 | DONE cmt | em  8  8 |        |             | ;       .equ brg_value &23              ; 9600 baud
  23:041 | DONE wsp | em  8  8 |        |             |
  23:042 | DONE dir | em  8  8 |        |             |         .equ hw_pd0  0df00           Port 0 Data Register
  23:043 | DONE dir | em  8  8 |        |             |         .equ hw_pd1  0df01           Port 1 Data Register
  23:044 | DONE dir | em  8  8 |        |             |         .equ hw_pd2  0df02           Port 2 Data Register
  23:045 | DONE dir | em  8  8 |        |             |         .equ hw_pd3  0df03           Port 3 Data Register
  23:046 | DONE dir | em  8  8 |        |             |         .equ hw_pdd0 0df04           Port 0 Data Direction Register
  23:047 | DONE dir | em  8  8 |        |             |         .equ hw_pdd1 0df05           Port 1 Data Direction Register
  23:048 | DONE dir | em  8  8 |        |             |         .equ hw_pdd2 0df06           Port 2 Data Direction Register
  23:049 | DONE dir | em  8  8 |        |             |         .equ hw_pdd3 0df07           Port 3 Data Direction Register
  23:050 | DONE wsp | em  8  8 |        |             |
  23:051 | DONE dir | em  8  8 |        |             |         .equ hw_pd4  0df20           Port 4 Data Register
  23:052 | DONE dir | em  8  8 |        |             |         .equ hw_pd5  0df21           Port 5 Data Register
  23:053 | DONE dir | em  8  8 |        |             |         .equ hw_pd6  0df22           Port 6 Data Register
  23:054 | DONE dir | em  8  8 |        |             |         .equ hw_pd7  0df23           Port 7 Data Register
  23:055 | DONE dir | em  8  8 |        |             |         .equ hw_pdd4 0df24           Port 4 Data Direction Register
  23:056 | DONE dir | em  8  8 |        |             |         .equ hw_pdd5 0df25           Port 5 Data Direction Register
  23:057 | DONE dir | em  8  8 |        |             |         .equ hw_pdd6 0df26           Port 6 Data Direction Register
  23:058 | DONE dir | em  8  8 |        |             |         .equ hw_pcs7 0df27           Port 7 Chip Select
  23:059 | DONE wsp | em  8  8 |        |             |
  23:060 | DONE dir | em  8  8 |        |             |         .equ hw_bcr  0df40           Bus Control Register
  23:061 | DONE dir | em  8  8 |        |             |         .equ hw_sscr 0df41           System Speed Control Register
  23:062 | DONE dir | em  8  8 |        |             |         .equ hw_tcr  0df42           Timer Control Register
  23:063 | DONE dir | em  8  8 |        |             |         .equ hw_ter  0df43           Timer Enable Register
  23:064 | DONE dir | em  8  8 |        |             |         .equ hw_tifr 0df44           Timer Interrupt Flag Register
  23:065 | DONE dir | em  8  8 |        |             |         .equ hw_eifr 0df45           Edge Interrupt Flag Register
  23:066 | DONE dir | em  8  8 |        |             |         .equ hw_tier 0df46           Timer Interrupt Enable Register
  23:067 | DONE dir | em  8  8 |        |             |         .equ hw_eier 0df47           Edge Interrupt Enable Register
  23:068 | DONE dir | em  8  8 |        |             |         .equ hw_uifr 0df48           UART Interrupt Flag Register
  23:069 | DONE dir | em  8  8 |        |             |         .equ hw_uier 0df49           UART Interrupt Enable Register
  23:070 | DONE wsp | em  8  8 |        |             |
  23:071 | DONE dir | em  8  8 |        |             |         .equ hw_t0cl 0df60           Timer 0 Counter Low
  23:072 | DONE dir | em  8  8 |        |             |         .equ hw_t0ch 0df61           Timer 0 Counter High
  23:073 | DONE dir | em  8  8 |        |             |         .equ hw_t1cl 0df62           Timer 1 Counter Low
  23:074 | DONE dir | em  8  8 |        |             |         .equ hw_t1ch 0df63           Timer 1 Counter High
  23:075 | DONE dir | em  8  8 |        |             |         .equ hw_t2cl 0df64           Timer 2 Counter Low
  23:076 | DONE dir | em  8  8 |        |             |         .equ hw_t2ch 0df65           Timer 2 Counter High
  23:077 | DONE dir | em  8  8 |        |             |         .equ hw_t3cl 0df66           Timer 3 Counter Low
  23:078 | DONE dir | em  8  8 |        |             |         .equ hw_t3ch 0df67           Timer 3 Counter High
  23:079 | DONE dir | em  8  8 |        |             |         .equ hw_t4cl 0df68           Timer 4 Counter Low
  23:080 | DONE dir | em  8  8 |        |             |         .equ hw_t4ch 0df69           Timer 4 Counter High
  23:081 | DONE dir | em  8  8 |        |             |         .equ hw_t5cl 0df6a           Timer 5 Counter Low
  23:082 | DONE dir | em  8  8 |        |             |         .equ hw_t5ch 0df6b           Timer 5 Counter High
  23:083 | DONE dir | em  8  8 |        |             |         .equ hw_t6cl 0df6c           Timer 6 Counter Low
  23:084 | DONE dir | em  8  8 |        |             |         .equ hw_t6ch 0df6d           Timer 6 Counter High
  23:085 | DONE dir | em  8  8 |        |             |         .equ hw_t7cl 0df6e           Timer 7 Counter Low
  23:086 | DONE dir | em  8  8 |        |             |         .equ hw_t7ch 0df6f           Timer 7 Counter High
  23:087 | DONE wsp | em  8  8 |        |             |
  23:088 | DONE dir | em  8  8 |        |             |         .equ hw_acsr0 0df70          UART 0 Control/Status Register
  23:089 | DONE dir | em  8  8 |        |             |         .equ hw_artd0 0df71          UART 0 Data Register
  23:090 | DONE dir | em  8  8 |        |             |         .equ hw_acsr1 0df72          UART 1 Control/Status Register
  23:091 | DONE dir | em  8  8 |        |             |         .equ hw_artd1 0df73          UART 1 Data Register
  23:092 | DONE dir | em  8  8 |        |             |         .equ hw_acsr2 0df74          UART 2 Control/Status Register
  23:093 | DONE dir | em  8  8 |        |             |         .equ hw_artd2 0df75          UART 2 Data Register
  23:094 | DONE dir | em  8  8 |        |             |         .equ hw_acsr3 0df76          UART 3 Control/Status Register
  23:095 | DONE dir | em  8  8 |        |             |         .equ hw_artd3 0df77          UART 3 Data Register
  23:096 | DONE wsp | em  8  8 |        |             |
  23:097 | DONE wsp | em  8  8 |        |             |
  23:098 | DONE cmt | em  8  8 |        |             | ; ===================================================================
  23:099 | DONE cmt | em  8  8 |        |             | ; RESET HARDWARE
  23:100 | DONE cmt | em  8  8 |        |             | ; Call this during boot. Uses Port 0 for communication in the default setting
  23:101 | DONE lbl | em  8  8 | 006000 |             | reset_hardware                       
  23:102 | DONE ins | em  8  8 | 006000 | 78          |                 sei                  
  23:103 | DONE ins | em  8  8 | 006001 | 18          |                 clc                  
  23:104 | DONE ins | em  8  8 | 006002 | fb          |                 xce                  
  23:105 | DONE ctl | na  8  8 |        |             |         .!native
  23:106 | DONE ins | na  8  8 | 006003 | c2 10       |                 rep 10               
  23:107 | DONE ctl | na  8 16 |        |             |         .!xy16
  23:108 | DONE dir | na  8 16 |        |             |         .!a8                         
  23:109 | DONE cmt | na  8 16 |        |             |                 ; temporarily reset the stack
  23:110 | DONE ins | na  8 16 | 006005 | a2 ff 01    |                 ldx.# 01ff           
  23:111 | DONE ins | na  8 16 | 006008 | 9a          |                 txs                  
  23:112 | DONE wsp | na  8 16 |        |             |
  23:113 | DONE ins | na  8 16 | 006009 | 9c 49 df    |                 stz 00df49           UART Interrupt Enable Register (UIER)
  23:114 | DONE wsp | na  8 16 |        |             |
  23:115 | DONE ins | na  8 16 | 00600c | a9 c0       |                 lda.# 0c0            Ensure A15/AMS are output
  23:116 | DONE ins | na  8 16 | 00600e | 8d 24 df    |                 sta 00df24           Port 4 Data Direction Register (PDD4)
  23:117 | DONE ins | na  8 16 | 006011 | 9c 20 df    |                 stz 00df20           Select bank 0 (Port 4 Data Register, PD4)
  23:118 | DONE wsp | na  8 16 |        |             |
  23:119 | DONE ins | na  8 16 | 006014 | a9 10       |                 lda.# %00010000      Set UART0 to use timer 3
  23:120 | DONE ins | na  8 16 | 006016 | 1c 42 df    |                 trb 00df42           Timer Control Register (TCR)
  23:121 | DONE ins | na  8 16 | 006019 | a9 0b       |                 lda.# .lsb 00000b    And set baud rate
  23:122 | DONE ins | na  8 16 | 00601b | 8d 66 df    |                 sta 00df66           Timer 3 Counter Low (T3CL)
  23:123 | DONE ins | na  8 16 | 00601e | a9 00       |                 lda.# .msb 00000b    
  23:124 | DONE ins | na  8 16 | 006020 | 8d 67 df    |                 sta 00df67           Timer 3 Counter High (T3CH)
  23:125 | DONE ins | na  8 16 | 006023 | a9 08       |                 lda.# 08             Enable timer 3 (1<<3)
  23:126 | DONE ins | na  8 16 | 006025 | 0c 43 df    |                 tsb 00df43           Timer Enable Register (TER)
  23:127 | DONE wsp | na  8 16 |        |             |
  23:128 | DONE ins | na  8 16 | 006028 | a9 25       |                 lda.# %00100101      Set UART0 for 8-N-1
  23:129 | DONE ins | na  8 16 | 00602a | 8d 70 df    |                 sta 00df70           UART 0 Control/Status Register (ACSR0)
  23:130 | DONE wsp | na  8 16 |        |             |
  23:131 | DONE cmt | na  8 16 |        |             |                 ; set up direct page
  23:132 | DONE ins | na  8 16 | 00602d | c2 20       |                 rep 20               
  23:133 | DONE ctl | na 16 16 |        |             |         .!a16
  23:134 | DONE ins | na 16 16 | 00602f | a9 00 02    |                 lda.# 000200         
  23:135 | DONE ins | na 16 16 | 006032 | 5b          |                 tcd                  
  23:136 | DONE wsp | na 16 16 |        |             |
  23:137 | DONE ins | na 16 16 | 006033 | 4c 66 60    |                 jmp 006066           we return with A as 8 bits
  23:138 | DONE wsp | na 16 16 |        |             |
  23:139 | DONE wsp | na 16 16 |        |             |
  23:140 | DONE cmt | na 16 16 |        |             | ; ===================================================================
  23:141 | DONE cmt | na 16 16 |        |             | ; PUT_CHR
  23:142 | DONE cmt | na 16 16 |        |             | ; Wait until the last transmission has been completed then send the character
  23:143 | DONE cmt | na 16 16 |        |             | ; in A. Destroys A. Does not have to be called with A8.
  23:144 | DONE lbl | na 16 16 | 006036 |             | put_chr                              
  23:145 | DONE ins | na 16 16 | 006036 | 08          |                 php                  save register sizes
  23:146 | DONE ins | na 16 16 | 006037 | e2 20       |                 sep 20               
  23:147 | DONE ctl | na  8 16 |        |             |         .!a8
  23:148 | DONE ins | na  8 16 | 006039 | 48          |                 pha                  
  23:149 | DONE ins | na  8 16 | 00603a | a9 02       |                 lda.# 02             (1<<1)
  23:150 | DONE wsp | na  8 16 |        |             |
  23:151 | DONE lbl | na  8 16 | 00603c |             | put_chr_wait                         
  23:152 | DONE ins | na  8 16 | 00603c | 2c 48 df    |                 bit 00df48           timer finished?
  23:153 | DONE ins | na  8 16 | 00603f | f0 fb       |                 beq 00603c           
  23:154 | DONE wsp | na  8 16 |        |             |
  23:155 | DONE ins | na  8 16 | 006041 | 68          |                 pla                  
  23:156 | DONE ins | na  8 16 | 006042 | 8d 71 df    |                 sta 00df71           transmit char
  23:157 | DONE ins | na  8 16 | 006045 | 28          |                 plp                  
  23:158 | DONE wsp | na  8 16 |        |             |
  23:159 | DONE ins | na  8 16 | 006046 | 60          |                 rts                  
  23:160 | DONE wsp | na  8 16 |        |             |
  23:161 | DONE cmt | na  8 16 |        |             | ; ===================================================================
  23:162 | DONE cmt | na  8 16 |        |             | ; GET_CHR
  23:163 | DONE cmt | na  8 16 |        |             | ; Fetch the next character from the receive buffer waiting for some to arrive
  23:164 | DONE cmt | na  8 16 |        |             | ; if the buffer is empty.
  23:165 | DONE lbl | na  8 16 | 006047 |             | get_chr                              
  23:166 | DONE ins | na  8 16 | 006047 | 08          |                 php                  Save register sizes
  23:167 | DONE ins | na  8 16 | 006048 | e2 20       |                 sep 20               
  23:168 | DONE ctl | na  8 16 |        |             |         .!a8
  23:169 | DONE ins | na  8 16 | 00604a | a9 01       |                 lda.# 01             (1<<0)
  23:170 | DONE wsp | na  8 16 |        |             |
  23:171 | DONE lbl | na  8 16 | 00604c |             | get_chr_wait                         
  23:172 | DONE ins | na  8 16 | 00604c | 2c 48 df    |                 bit 00df48           Any data in RX buffer?
  23:173 | DONE ins | na  8 16 | 00604f | f0 fb       |                 beq 00604c           No, keep waiting
  23:174 | DONE ins | na  8 16 | 006051 | ad 71 df    |                 lda 00df71           Yes, read it
  23:175 | DONE ins | na  8 16 | 006054 | 28          |                 plp                  
  23:176 | DONE wsp | na  8 16 |        |             |
  23:177 | DONE ins | na  8 16 | 006055 | 60          |                 rts                  
  23:178 | DONE wsp | na  8 16 |        |             |
  23:179 | DONE cmt | na  8 16 |        |             | ; ===================================================================
  23:180 | DONE cmt | na  8 16 |        |             | ; HAVE_CHR?
  23:181 | DONE cmt | na  8 16 |        |             | ; Check if the receive buffer contains any data and return C=1 if there is
  23:182 | DONE cmt | na  8 16 |        |             | ; some.
  23:183 | DONE cmt | na  8 16 |        |             | ; TODO Test this
  23:184 | DONE wsp | na  8 16 |        |             |
  23:185 | DONE lbl | na  8 16 | 006056 |             | have_chr?                            
  23:186 | DONE ins | na  8 16 | 006056 | 48          |                 pha                  save caller's A
  23:187 | DONE ins | na  8 16 | 006057 | 08          |                 php                  
  23:188 | DONE ins | na  8 16 | 006058 | e2 20       |                 sep 20               
  23:189 | DONE ctl | na  8 16 |        |             |         .!a8
  23:190 | DONE ins | na  8 16 | 00605a | ad 48 df    |                 lda 00df48           read the status register
  23:191 | DONE ins | na  8 16 | 00605d | 28          |                 plp                  
  23:192 | DONE ins | na  8 16 | 00605e | 6a          |                 ror.a                shift hw_uart0r bit into carry
  23:193 | DONE ins | na  8 16 | 00605f | c2 20       |                 rep 20               
  23:194 | DONE ctl | na 16 16 |        |             |         .!a16
  23:195 | DONE ins | na 16 16 | 006061 | 68          |                 pla                  restore A
  23:196 | DONE ins | na 16 16 | 006062 | 60          |                 rts                  
  23:197 | DONE wsp | na 16 16 |        |             |
  23:198 | DONE cmt | na 16 16 |        |             | ; END
  24:000 | DONE wsp | na 16 16 |        |             |
  25:000 | DONE wsp | na 16 16 |        |             |
  26:000 | DONE cmt | na 16 16 |        |             | ; ===================================================================
  27:000 | DONE cmt | na 16 16 |        |             | ; DICTIONARY ROUTINES
  28:000 | DONE wsp | na 16 16 |        |             |
  29:000 | DONE cmt | na 16 16 |        |             | ; Word code routines are sorted alphabetically, except for the first three
  30:000 | DONE cmt | na 16 16 |        |             | ; - COLD, ABORT, and QUIT - and a few others that flow into each other. The
  31:000 | DONE cmt | na 16 16 |        |             | ; byte and cycle values are calculated without the RTS instruction.
  32:000 | DONE wsp | na 16 16 |        |             |
  33:000 | DONE wsp | na 16 16 |        |             |
  34:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
  35:000 | DONE cmt | na 16 16 |        |             | ; COLD ( -- ) X bytes / X Cycles
  36:000 | DONE cmt | na 16 16 |        |             | ; Reboot the system
  37:000 | DONE lbl | na 16 16 | 006063 |             | xt_cold                              
  38:000 | DONE wsp | na 16 16 |        |             |
  39:000 | DONE ins | na 16 16 | 006063 | 4c 00 60    |                 jmp 006000           don't use JSR, jump back to start
  40:000 | DONE lbl | na 16 16 | 006066 |             | start                                
  41:000 | DONE dir | na 16 16 |        |             |         .!native                     these should be handled by hardware reset
  42:000 | DONE dir | na 16 16 |        |             |         .!a16                        
  43:000 | DONE dir | na 16 16 |        |             |         .!xy16                       
  44:000 | DONE ins | na 16 16 | 006066 | 78          |                 sei                  
  45:000 | DONE wsp | na 16 16 |        |             |
  46:000 | DONE cmt | na 16 16 |        |             |                 ; TODO switch to Single Task mode
  47:000 | DONE cmt | na 16 16 |        |             |                 ; TODO set up Direct Page stuff
  48:000 | DONE cmt | na 16 16 |        |             |                 ; TODO initiate User variables
  49:000 | DONE wsp | na 16 16 |        |             |
  50:000 | DONE wsp | na 16 16 |        |             |
  51:000 | DONE cmt | na 16 16 |        |             |                 ; We start out in decimal mode
  52:000 | DONE ins | na 16 16 | 006067 | 20 9f 66    |                 jsr 00669f           
  53:000 | DONE wsp | na 16 16 |        |             |
  54:000 | DONE cmt | na 16 16 |        |             |                 ; The name token (nt) of DROP is always the first one in the
  55:000 | DONE cmt | na 16 16 |        |             |                 ; virgin Dictionary, so we start off the Dictionary Pointer (DP)
  56:000 | DONE cmt | na 16 16 |        |             |                 ; there. Anything that comes after that (with WORDS, before
  57:000 | DONE cmt | na 16 16 |        |             |                 ; that) is high-level
  58:000 | DONE ins | na 16 16 | 00606a | a9 54 75    |                 lda.# 007554         
  59:000 | DONE ins | na 16 16 | 00606d | 85 2a       |                 sta.d 00022a         
  60:000 | DONE wsp | na 16 16 |        |             |
  61:000 | DONE cmt | na 16 16 |        |             |                 ; The compiler pointer (CP) points to the first free cell
  62:000 | DONE cmt | na 16 16 |        |             |                 ; in RAM
  63:000 | DONE ins | na 16 16 | 00606f | a9 00 03    |                 lda.# 000300         
  64:000 | DONE ins | na 16 16 | 006072 | 85 28       |                 sta.d 000228         
  65:000 | DONE wsp | na 16 16 |        |             |
  66:000 | DONE cmt | na 16 16 |        |             |                 ; Prepare input buffers
  67:000 | DONE ins | na 16 16 | 006074 | a9 00 7c    |                 lda.# 007c00         start with first input buffer
  68:000 | DONE ins | na 16 16 | 006077 | 85 1a       |                 sta.d 00021a         
  69:000 | DONE ins | na 16 16 | 006079 | 64 1e       |                 stz.d 00021e         previous input buffer is empty
  70:000 | DONE ins | na 16 16 | 00607b | 64 18       |                 stz.d 000218         SOURCE-ID is zero
  71:000 | DONE ins | na 16 16 | 00607d | 64 22       |                 stz.d 000222         STATE is zero (interpret)
  72:000 | DONE wsp | na 16 16 |        |             |
  73:000 | DONE cmt | na 16 16 |        |             |                 ; Clear Data Stack
  74:000 | DONE ins | na 16 16 | 00607f | a0 00 00    |                 ldy.# 0000           
  75:000 | DONE ins | na 16 16 | 006082 | a2 f0 02    |                 ldx.# 0002f0         
  76:000 | DONE wsp | na 16 16 |        |             |
  77:000 | DONE cmt | na 16 16 |        |             |                 ; Clean the screen, assumes vt100 terminal
  78:000 | DONE ins | na 16 16 | 006085 | 20 dd 69    |                 jsr 0069dd           
  79:000 | DONE wsp | na 16 16 |        |             |
  80:000 | DONE cmt | na 16 16 |        |             |                 ; Define high-level words via EVALUATE. At this point, whatever
  81:000 | DONE cmt | na 16 16 |        |             |                 ; is in Y (TOS) is garbage, so we don't have to push it to the
  82:000 | DONE cmt | na 16 16 |        |             |                 ; stack first
  83:000 | DONE ins | na 16 16 | 006088 | ca          |                 dex                  
  84:000 | DONE ins | na 16 16 | 006089 | ca          |                 dex                  
  85:000 | DONE ins | na 16 16 | 00608a | ca          |                 dex                  
  86:000 | DONE ins | na 16 16 | 00608b | ca          |                 dex                  
  87:000 | DONE ins | na 16 16 | 00608c | a9 37 76    |                 lda.# 007637         
  88:000 | DONE ins | na 16 16 | 00608f | 95 00       |                 sta.dx 00            Start address goes in NOS
  89:000 | DONE ins | na 16 16 | 006091 | a0 0f 05    |                 ldy.# 00050f         length goes in TOS
  90:000 | DONE wsp | na 16 16 |        |             |
  91:000 | DONE ins | na 16 16 | 006094 | 20 3e 67    |                 jsr 00673e           
  92:000 | DONE wsp | na 16 16 |        |             |
  93:000 | DONE cmt | na 16 16 |        |             |                 ; fall through to ABORT
  94:000 | DONE wsp | na 16 16 |        |             |
  95:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
  96:000 | DONE cmt | na 16 16 |        |             | ; ABORT ( -- ) 8+ bytes / X cycles
  97:000 | DONE cmt | na 16 16 |        |             | ; Reset the parameter (data) stack pointer and continue as QUIT
  98:000 | DONE cmt | na 16 16 |        |             | ; We can jump here via subroutine because we reset the stack pointer
  99:000 | DONE cmt | na 16 16 |        |             | ; anyway. Flows into QUIT.
 100:000 | DONE cmt | na 16 16 |        |             | ; TODO see which parts of COLD we should integrate here
 101:000 | DONE lbl | na 16 16 | 006097 |             | xt_abort                             
 102:000 | DONE ins | na 16 16 | 006097 | c2 20       |                 rep 20               
 102:001 | DONE ctl | na 16 16 |        |             |         .!a16
 103:000 | DONE cmt | na 16 16 |        |             |                 ; clear Data Stack
 104:000 | DONE ins | na 16 16 | 006099 | a0 00 00    |                 ldy.# 0000           
 105:000 | DONE ins | na 16 16 | 00609c | a2 f0 02    |                 ldx.# 0002f0         
 106:000 | DONE wsp | na 16 16 |        |             |
 107:000 | DONE wsp | na 16 16 |        |             |
 108:000 | DONE cmt | na 16 16 |        |             | ; drops through to QUIT, z_abort is the same as z_quit.
 109:000 | DONE wsp | na 16 16 |        |             |
 110:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 111:000 | DONE cmt | na 16 16 |        |             | ; QUIT ( -- ) X bytes / X cycles
 112:000 | DONE cmt | na 16 16 |        |             | ; Reset the input, clearning Return Stack. Jumps to QUIT do not have to be
 113:000 | DONE cmt | na 16 16 |        |             | ; subroutine jumps as the Return Stack is cleared anyway. Liara Forth follows
 114:000 | DONE cmt | na 16 16 |        |             | ; the ANSI Forth recommendation to use REFILL. Note we don't display the "ok"
 115:000 | DONE cmt | na 16 16 |        |             | ; system prompt until after the first output. This follows Gforth.
 116:000 | DONE lbl | na 16 16 | 00609f |             | xt_quit                              
 117:000 | DONE cmt | na 16 16 |        |             |                 ; clear Return Stack
 118:000 | DONE ins | na 16 16 | 00609f | a9 ff 7f    |                 lda.# 007fff         
 119:000 | DONE ins | na 16 16 | 0060a2 | 1b          |                 tcs                  
 120:000 | DONE wsp | na 16 16 |        |             |
 121:000 | DONE cmt | na 16 16 |        |             |                 ; make sure Instruction Pointer is empty
 122:000 | DONE cmt | na 16 16 |        |             |                 ; TODO move this someplace else or else it will end up in ROM
 123:000 | DONE ins | na 16 16 | 0060a3 | 9c 6d 67    |                 stz 00676d           
 124:000 | DONE wsp | na 16 16 |        |             |
 125:000 | DONE cmt | na 16 16 |        |             |                 ; switch SOURCE-ID to zero (keyboard input)
 126:000 | DONE ins | na 16 16 | 0060a6 | 64 18       |                 stz.d 000218         
 127:000 | DONE wsp | na 16 16 |        |             |
 128:000 | DONE cmt | na 16 16 |        |             |                 ; switch to interpret state (STATE is zero)
 129:000 | DONE ins | na 16 16 | 0060a8 | 64 22       |                 stz.d 000222         
 130:000 | DONE wsp | na 16 16 |        |             |
 131:000 | DONE lbl | na 16 16 | 0060aa |             | quit_get_line                        
 132:000 | DONE cmt | na 16 16 |        |             |                 ; Empty current input buffer. Note the previous input line is
 133:000 | DONE cmt | na 16 16 |        |             |                 ; conserved even if we came here from an abort
 134:000 | DONE ins | na 16 16 | 0060aa | 64 1c       |                 stz.d 00021c         
 135:000 | DONE wsp | na 16 16 |        |             |
 136:000 | DONE cmt | na 16 16 |        |             |                 ; Accept a line from the current input source
 137:000 | DONE ins | na 16 16 | 0060ac | 20 b4 6a    |                 jsr 006ab4           ( -- f )
 138:000 | DONE wsp | na 16 16 |        |             |
 139:000 | DONE ins | na 16 16 | 0060af | 98          |                 tya                  force flag test
 140:000 | DONE ins | na 16 16 | 0060b0 | d0 06       |                 bne 0060b8           
 141:000 | DONE wsp | na 16 16 |        |             |
 142:000 | DONE cmt | na 16 16 |        |             |                 ; If REFILL returned a FALSE flag, something went wrong and we
 143:000 | DONE cmt | na 16 16 |        |             |                 ; need to print an error message and reset the machine. We don't
 144:000 | DONE cmt | na 16 16 |        |             |                 ; need to save TOS because we're going to clobber it anyway when we
 145:000 | DONE cmt | na 16 16 |        |             |                 ; go back to ABORT.
 146:000 | DONE ins | na 16 16 | 0060b2 | a9 1a 7c    |                 lda.# 007c1a         
 147:000 | DONE ins | na 16 16 | 0060b5 | 4c fd 75    |                 jmp 0075fd           
 148:000 | DONE wsp | na 16 16 |        |             |
 149:000 | DONE wsp | na 16 16 |        |             |
 150:000 | DONE lbl | na 16 16 | 0060b8 |             | quit_refill_successful               
 151:000 | DONE cmt | na 16 16 |        |             |                 ; Assume we have successfully accepted a string of input from
 152:000 | DONE cmt | na 16 16 |        |             |                 ; a source, with address of buffer in cib and length of input in
 153:000 | DONE cmt | na 16 16 |        |             |                 ; ciblen. We arrive here still with the TRUE flag from REFILL as
 154:000 | DONE cmt | na 16 16 |        |             |                 ; TOS (in Y)
 155:000 | DONE ins | na 16 16 | 0060b8 | b4 00       |                 ldy.dx 00            drop TOS
 156:000 | DONE ins | na 16 16 | 0060ba | e8          |                 inx                  
 157:000 | DONE ins | na 16 16 | 0060bb | e8          |                 inx                  
 158:000 | DONE wsp | na 16 16 |        |             |
 159:000 | DONE cmt | na 16 16 |        |             |                 ; make >IN point to begining of buffer
 160:000 | DONE ins | na 16 16 | 0060bc | 64 20       |                 stz.d 000220         
 161:000 | DONE wsp | na 16 16 |        |             |
 162:000 | DONE cmt | na 16 16 |        |             |                 ; Main compile/execute routine. Consider moving this inside QUIT
 163:000 | DONE cmt | na 16 16 |        |             |                 ; once we know everything works
 164:000 | DONE ins | na 16 16 | 0060be | 20 82 75    |                 jsr 007582           
 165:000 | DONE wsp | na 16 16 |        |             |
 166:000 | DONE cmt | na 16 16 |        |             |                 ; Test for Data Stack underflow. Our stack is so large in single
 167:000 | DONE cmt | na 16 16 |        |             |                 ; user mode that we don't bother checking for overflow - if that
 168:000 | DONE cmt | na 16 16 |        |             |                 ; happens, we're screwed anyway
 169:000 | DONE ins | na 16 16 | 0060c1 | e0 f1 02    |                 cpx.# 0002f1         
 170:000 | DONE ins | na 16 16 | 0060c4 | 90 06       |                 bcc 0060cc           DSP must always be smaller (!) than DSP0
 171:000 | DONE wsp | na 16 16 |        |             |
 172:000 | DONE ins | na 16 16 | 0060c6 | a9 80 7c    |                 lda.# 007c80         
 173:000 | DONE ins | na 16 16 | 0060c9 | 4c fd 75    |                 jmp 0075fd           
 174:000 | DONE wsp | na 16 16 |        |             |
 175:000 | DONE lbl | na 16 16 | 0060cc |             | quit_ok                              
 176:000 | DONE cmt | na 16 16 |        |             |                 ; Display system prompt if all went well. If we're interpreting,
 177:000 | DONE cmt | na 16 16 |        |             |                 ; this is " ok", if we're compiling, it's " compiled"
 178:000 | DONE ins | na 16 16 | 0060cc | a5 22       |                 lda.d 000222         
 179:000 | DONE ins | na 16 16 | 0060ce | d0 05       |                 bne 0060d5           
 180:000 | DONE wsp | na 16 16 |        |             |
 181:000 | DONE ins | na 16 16 | 0060d0 | a9 46 7b    |                 lda.# 007b46         
 182:000 | DONE ins | na 16 16 | 0060d3 | 80 03       |                 bra 0060d8           
 183:000 | DONE lbl | na 16 16 | 0060d5 |             | quit_compiled                        
 184:000 | DONE ins | na 16 16 | 0060d5 | a9 4a 7b    |                 lda.# 007b4a         fall through to quit_print
 185:000 | DONE lbl | na 16 16 | 0060d8 |             | quit_print                           
 186:000 | DONE ins | na 16 16 | 0060d8 | 20 03 76    |                 jsr 007603           
 187:000 | DONE wsp | na 16 16 |        |             |
 188:000 | DONE cmt | na 16 16 |        |             |                 ; Awesome line, everybody. Now get the next one
 189:000 | DONE ins | na 16 16 | 0060db | 4c aa 60    |                 jmp 0060aa           
 190:000 | DONE wsp | na 16 16 |        |             |
 191:000 | DONE lbl | na 16 16 | 0060de |             | z_cold                               
 192:000 | DONE lbl | na 16 16 | 0060de |             | z_abort                              
 193:000 | DONE lbl | na 16 16 | 0060de |             | z_quit                               
 193:001 | DONE ins | na 16 16 | 0060de | ea          |                 nop                  dummy for compilation, TODO test if required
 194:000 | DONE wsp | na 16 16 |        |             |
 195:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 196:000 | DONE cmt | na 16 16 |        |             | ; < "LESS" ( n m -- f ) X bytes / X cycles
 197:000 | DONE cmt | na 16 16 |        |             | ; Return true flag if NOS < TOS. See
 198:000 | DONE cmt | na 16 16 |        |             | ; http://www.6502.org/tutorials/compare_beyond.html for details on the
 199:000 | DONE cmt | na 16 16 |        |             | ; comparisons
 200:000 | DONE lbl | na 16 16 | 0060df |             | xt_less                              
 201:000 | DONE ins | na 16 16 | 0060df | 98          |                 tya                  
 202:000 | DONE ins | na 16 16 | 0060e0 | a0 00 00    |                 ldy.# 0000           default is false
 203:000 | DONE wsp | na 16 16 |        |             |
 204:000 | DONE ins | na 16 16 | 0060e3 | 38          |                 sec                  
 205:000 | DONE ins | na 16 16 | 0060e4 | f5 00       |                 sbc.dx 00            
 206:000 | DONE ins | na 16 16 | 0060e6 | f0 08       |                 beq 0060f0           the same is not greater
 207:000 | DONE ins | na 16 16 | 0060e8 | 50 03       |                 bvc 0060ed           no overflow, skip ahead
 208:000 | DONE wsp | na 16 16 |        |             |
 209:000 | DONE cmt | na 16 16 |        |             |                 ; Deal with oveflow because we use signed numbers
 210:000 | DONE ins | na 16 16 | 0060ea | 49 00 80    |                 eor.# 8000           compliment negative flag
 211:000 | DONE wsp | na 16 16 |        |             |
 212:000 | DONE lbl | na 16 16 | 0060ed |             | xt_less_no_ov                        
 213:000 | DONE cmt | na 16 16 |        |             |                 ; if we're negative TOS > NOS
 214:000 | DONE ins | na 16 16 | 0060ed | 30 01       |                 bmi 0060f0           
 215:000 | DONE ins | na 16 16 | 0060ef | 88          |                 dey                  
 216:000 | DONE lbl | na 16 16 | 0060f0 |             | xt_less_nip                          
 217:000 | DONE ins | na 16 16 | 0060f0 | e8          |                 inx                  
 218:000 | DONE ins | na 16 16 | 0060f1 | e8          |                 inx                  
 219:000 | DONE wsp | na 16 16 |        |             |
 220:000 | DONE lbl | na 16 16 | 0060f2 |             | z_less                               
 220:001 | DONE ins | na 16 16 | 0060f2 | 60          |                 rts                  
 221:000 | DONE wsp | na 16 16 |        |             |
 222:000 | DONE wsp | na 16 16 |        |             |
 223:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 224:000 | DONE cmt | na 16 16 |        |             | ; <> "NOT-EQUAL" ( n m -- f ) X bytes / X cycles
 225:000 | DONE cmt | na 16 16 |        |             | ; Return true flag if TOS and NOS are not the same. This is just a different
 226:000 | DONE cmt | na 16 16 |        |             | ; version of EQUAL, we repeat the code for speed reasons
 227:000 | DONE lbl | na 16 16 | 0060f3 |             | xt_not-equal                         
 228:000 | DONE ins | na 16 16 | 0060f3 | 98          |                 tya                  
 229:000 | DONE ins | na 16 16 | 0060f4 | a0 00 00    |                 ldy.# 0000           default value is false
 230:000 | DONE wsp | na 16 16 |        |             |
 231:000 | DONE ins | na 16 16 | 0060f7 | d5 00       |                 cmp.dx 00            
 232:000 | DONE ins | na 16 16 | 0060f9 | f0 01       |                 beq 0060fc           
 233:000 | DONE ins | na 16 16 | 0060fb | 88          |                 dey                  wraps to 0FFFF (true)
 234:000 | DONE wsp | na 16 16 |        |             |
 235:000 | DONE lbl | na 16 16 | 0060fc |             | not-equal_equal                      ; yes, this is a silly name
 236:000 | DONE ins | na 16 16 | 0060fc | e8          |                 inx                  
 237:000 | DONE ins | na 16 16 | 0060fd | e8          |                 inx                  
 238:000 | DONE wsp | na 16 16 |        |             |
 239:000 | DONE lbl | na 16 16 | 0060fe |             | z_not-equal                          
 239:001 | DONE ins | na 16 16 | 0060fe | 60          |                 rts                  
 240:000 | DONE wsp | na 16 16 |        |             |
 241:000 | DONE wsp | na 16 16 |        |             |
 242:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 243:000 | DONE cmt | na 16 16 |        |             | ; <# "LESSNUMBER" ( -- ) 8 bytes / X cycles
 244:000 | DONE cmt | na 16 16 |        |             | ; Start the process to create pictured numeric output. The new string is
 245:000 | DONE cmt | na 16 16 |        |             | ; constructed from back to front, saving the new character at the beginning of
 246:000 | DONE cmt | na 16 16 |        |             | ; the output string. Since we use PAD as a starting address and work backward
 247:000 | DONE cmt | na 16 16 |        |             | ; (!), the string is constructed in the space between the end of the dictionary
 248:000 | DONE cmt | na 16 16 |        |             | ; (as defined by CP) and the PAD. This allows us to satisfy the ANS Forth
 249:000 | DONE cmt | na 16 16 |        |             | ; condition that programs don't fool around with the PAD but still use its
 250:000 | DONE cmt | na 16 16 |        |             | ; address. Code based on pForth, see
 251:000 | DONE cmt | na 16 16 |        |             | ; http://pforth.googlecode.com/svn/trunk/fth/numberio.fth pForth is in the pubic
 252:000 | DONE cmt | na 16 16 |        |             | ; domain. Forth is : <# PAD HLD ! ; we use the internal variable tohold instead
 253:000 | DONE cmt | na 16 16 |        |             | ; of HLD.
 254:000 | DONE lbl | na 16 16 | 0060ff |             | xt_lessnumber                        
 255:000 | DONE ins | na 16 16 | 0060ff | 20 d1 69    |                 jsr 0069d1           
 256:000 | DONE ins | na 16 16 | 006102 | 84 26       |                 sty.d 000226         
 257:000 | DONE ins | na 16 16 | 006104 | b4 00       |                 ldy.dx 00            
 258:000 | DONE ins | na 16 16 | 006106 | e8          |                 inx                  
 259:000 | DONE ins | na 16 16 | 006107 | e8          |                 inx                  
 260:000 | DONE wsp | na 16 16 |        |             |
 261:000 | DONE lbl | na 16 16 | 006108 |             | z_lessnumber                         
 261:001 | DONE ins | na 16 16 | 006108 | 60          |                 rts                  
 262:000 | DONE wsp | na 16 16 |        |             |
 263:000 | DONE wsp | na 16 16 |        |             |
 264:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 265:000 | DONE cmt | na 16 16 |        |             | ; > "GREATER" ( n m -- f ) X bytes / X cycles
 266:000 | DONE cmt | na 16 16 |        |             | ; Return true flag if NOS > TOS. See
 267:000 | DONE cmt | na 16 16 |        |             | ; http://www.6502.org/tutorials/compare_beyond.html for details on the
 268:000 | DONE cmt | na 16 16 |        |             | ; comparisons
 269:000 | DONE lbl | na 16 16 | 006109 |             | xt_greater                           
 270:000 | DONE ins | na 16 16 | 006109 | 98          |                 tya                  
 271:000 | DONE ins | na 16 16 | 00610a | a0 00 00    |                 ldy.# 0000           default is false
 272:000 | DONE wsp | na 16 16 |        |             |
 273:000 | DONE ins | na 16 16 | 00610d | 38          |                 sec                  
 274:000 | DONE ins | na 16 16 | 00610e | f5 00       |                 sbc.dx 00            
 275:000 | DONE ins | na 16 16 | 006110 | f0 08       |                 beq 00611a           the same is not greater
 276:000 | DONE ins | na 16 16 | 006112 | 50 03       |                 bvc 006117           no overflow, skip ahead
 277:000 | DONE wsp | na 16 16 |        |             |
 278:000 | DONE cmt | na 16 16 |        |             |                 ; Deal with oveflow because we use signed numbers
 279:000 | DONE ins | na 16 16 | 006114 | 49 00 80    |                 eor.# 8000           compliment negative flag
 280:000 | DONE wsp | na 16 16 |        |             |
 281:000 | DONE lbl | na 16 16 | 006117 |             | xt_greater_no_ov                     
 282:000 | DONE cmt | na 16 16 |        |             |                 ; if we're still positiv, TOS < NOS
 283:000 | DONE ins | na 16 16 | 006117 | 10 01       |                 bpl 00611a           
 284:000 | DONE ins | na 16 16 | 006119 | 88          |                 dey                  
 285:000 | DONE lbl | na 16 16 | 00611a |             | xt_greater_nip                       
 286:000 | DONE ins | na 16 16 | 00611a | e8          |                 inx                  
 287:000 | DONE ins | na 16 16 | 00611b | e8          |                 inx                  
 288:000 | DONE wsp | na 16 16 |        |             |
 289:000 | DONE lbl | na 16 16 | 00611c |             | z_greater                            
 289:001 | DONE ins | na 16 16 | 00611c | 60          |                 rts                  
 290:000 | DONE wsp | na 16 16 |        |             |
 291:000 | DONE wsp | na 16 16 |        |             |
 292:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 293:000 | DONE cmt | na 16 16 |        |             | ; >BODY "TOBODY" ( xt -- addr ) 3 bytes / 6 cycles
 294:000 | DONE cmt | na 16 16 |        |             | ; Given a word's execution token (xt), return the address of the start of that
 295:000 | DONE cmt | na 16 16 |        |             | ; word's parameter field (PFA). This is the address that HERE would return right
 296:000 | DONE cmt | na 16 16 |        |             | ; after CREATE
 297:000 | DONE lbl | na 16 16 | 00611d |             | xt_tobody                            
 298:000 | DONE cmt | na 16 16 |        |             |                 ; In the header, xt already points to the CFA, which CREATE by
 299:000 | DONE cmt | na 16 16 |        |             |                 ; default fills with a JSR to DOVAR. We just need to move xt
 300:000 | DONE cmt | na 16 16 |        |             |                 ; down by three bytes
 301:000 | DONE ins | na 16 16 | 00611d | c8          |                 iny                  
 302:000 | DONE ins | na 16 16 | 00611e | c8          |                 iny                  
 303:000 | DONE ins | na 16 16 | 00611f | c8          |                 iny                  
 304:000 | DONE wsp | na 16 16 |        |             |
 305:000 | DONE lbl | na 16 16 | 006120 |             | z_tobody                             
 305:001 | DONE ins | na 16 16 | 006120 | 60          |                 rts                  
 306:000 | DONE wsp | na 16 16 |        |             |
 307:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 308:000 | DONE cmt | na 16 16 |        |             | ; >IN "TOIN" ( -- addr ) 6 bytes / 12 cycles
 309:000 | DONE cmt | na 16 16 |        |             | ; Return address where pointer to current char in input buffer lives (>IN)
 310:000 | DONE lbl | na 16 16 | 006121 |             | xt_to-in                             
 311:000 | DONE ins | na 16 16 | 006121 | ca          |                 dex                  
 312:000 | DONE ins | na 16 16 | 006122 | ca          |                 dex                  
 313:000 | DONE ins | na 16 16 | 006123 | 94 00       |                 sty.dx 00            
 314:000 | DONE wsp | na 16 16 |        |             |
 315:000 | DONE ins | na 16 16 | 006125 | a0 20 02    |                 ldy.# 000220         >IN
 316:000 | DONE lbl | na 16 16 | 006128 |             | z_to-in                              
 316:001 | DONE ins | na 16 16 | 006128 | 60          |                 rts                  
 317:000 | DONE wsp | na 16 16 |        |             |
 318:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 319:000 | DONE cmt | na 16 16 |        |             | ; >NUMBER ( ud addr u -- ud addr u ) X bytes / X cycles
 320:000 | DONE cmt | na 16 16 |        |             | ; Convert a string to a double number. Logic here is based on the routine by
 321:000 | DONE cmt | na 16 16 |        |             | ; Phil Burk of the same name in pForth; see
 322:000 | DONE cmt | na 16 16 |        |             | ; https://github.com/philburk/pforth/blob/master/fth/numberio.fth the origional
 323:000 | DONE cmt | na 16 16 |        |             | ; Forth code. We arrive here from NUMBER which has made sure that we don't have
 324:000 | DONE cmt | na 16 16 |        |             | ; to deal with a sign and we don't have to deal with a dot as a last character
 325:000 | DONE cmt | na 16 16 |        |             | ; that signalizes double - this should be a pure number string.
 326:000 | DONE cmt | na 16 16 |        |             | ; This routine calles UM*, which uses tmp1, tmp2 and tmp3, so we cannot access
 327:000 | DONE cmt | na 16 16 |        |             | ; any of those.
 328:000 | DONE lbl | na 16 16 | 006129 |             | xt_tonumber                          
 329:000 | DONE dir | na 16 16 |        |             |         .!a16                        
 330:000 | DONE cmt | na 16 16 |        |             |                 ; For the math routine, we move the inputs to the scratchpad to
 331:000 | DONE cmt | na 16 16 |        |             |                 ; avoid having to fool around with the Data Stack.
 332:000 | DONE cmt | na 16 16 |        |             |                 ;
 333:000 | DONE cmt | na 16 16 |        |             |                 ;     +-----+-----+-----+-----+-----+-----+-----+-----+
 334:000 | DONE cmt | na 16 16 |        |             |                 ;     |   UD-LO   |   UD-HI   |     N     | UD-HI-LO  |
 335:000 | DONE cmt | na 16 16 |        |             |                 ;     |           |           |           |           |
 336:000 | DONE cmt | na 16 16 |        |             |                 ;     |  S    S+1 | S+2   S+3 | S+4   S+5 | S+6   S+7 |
 337:000 | DONE cmt | na 16 16 |        |             |                 ;     +-----+-----+-----+-----+-----+-----+-----+-----+
 338:000 | DONE wsp | na 16 16 |        |             |
 339:000 | DONE cmt | na 16 16 |        |             |                 ; The math routine works by converting one character to its
 340:000 | DONE cmt | na 16 16 |        |             |                 ; numerical value (N) via DIGIT? and storing it in S+4 for
 341:000 | DONE cmt | na 16 16 |        |             |                 ; the moment. We then multiply the UD-HI value with the radix
 342:000 | DONE cmt | na 16 16 |        |             |                 ; (from BASE) using UM*, which returns a double-cell result. We
 343:000 | DONE cmt | na 16 16 |        |             |                 ; discard the high cell of that result (UD-HI-HI) and store the
 344:000 | DONE cmt | na 16 16 |        |             |                 ; low cell (UD-HI-LO) in S+6 for now. -- The second part is
 345:000 | DONE cmt | na 16 16 |        |             |                 ; multiplying UD-LO with the radix. The high cell (UD-LO-HI)
 346:000 | DONE cmt | na 16 16 |        |             |                 ; gets put in S+2, the low cell (HD-LO-LO) in S. We then use
 347:000 | DONE cmt | na 16 16 |        |             |                 ; a version of D+ to add ( S S+2 ) and ( S+4 S+6) together,
 348:000 | DONE cmt | na 16 16 |        |             |                 ; storing the result back in S and S+2, before we start another
 349:000 | DONE cmt | na 16 16 |        |             |                 ; round with it as the new UD-LO and UD-HI.
 350:000 | DONE wsp | na 16 16 |        |             |
 351:000 | DONE cmt | na 16 16 |        |             |                 ; Fill the scratchpad. We arrive with ( ud-lo ud-hi addr u ).
 352:000 | DONE cmt | na 16 16 |        |             |                 ; After this step, the original ud-lo and ud-hi will still be on
 353:000 | DONE cmt | na 16 16 |        |             |                 ; the Data Stack, but will be ignored and later overwritten
 354:000 | DONE ins | na 16 16 | 006129 | b5 04       |                 lda.dx 04            ud-lo
 355:000 | DONE ins | na 16 16 | 00612b | 85 00       |                 sta.d 000200         
 356:000 | DONE ins | na 16 16 | 00612d | b5 02       |                 lda.dx 02            ud-hi
 357:000 | DONE ins | na 16 16 | 00612f | 85 02       |                 sta.d 000202         
 358:000 | DONE wsp | na 16 16 |        |             |
 359:000 | DONE cmt | na 16 16 |        |             |                 ; We push down one on the Data Stack to use TOS for character
 360:000 | DONE cmt | na 16 16 |        |             |                 ; conversion - now ( ud-lo ud-hi addr u u )
 361:000 | DONE ins | na 16 16 | 006131 | ca          |                 dex                  
 362:000 | DONE ins | na 16 16 | 006132 | ca          |                 dex                  
 363:000 | DONE ins | na 16 16 | 006133 | 94 00       |                 sty.dx 00            
 364:000 | DONE wsp | na 16 16 |        |             |
 365:000 | DONE lbl | na 16 16 | 006135 |             | tonumber_loop                        
 366:000 | DONE cmt | na 16 16 |        |             |                 ; Get one character
 367:000 | DONE ins | na 16 16 | 006135 | a1 02       |                 lda.dxi 02           
 368:000 | DONE ins | na 16 16 | 006137 | a8          |                 tay                  ( ud-lo ud-hi addr u char )
 369:000 | DONE wsp | na 16 16 |        |             |
 370:000 | DONE cmt | na 16 16 |        |             |                 ; Convert one character. DIGIT? takes care of the correct
 371:000 | DONE cmt | na 16 16 |        |             |                 ; register size for A and does a paranoid AND to make sure that
 372:000 | DONE cmt | na 16 16 |        |             |                 ; B is zero, so we don't have to do any of that here.
 373:000 | DONE ins | na 16 16 | 006138 | 20 30 66    |                 jsr 006630           ( char -- n -1 | char 0 )
 374:000 | DONE wsp | na 16 16 |        |             |
 375:000 | DONE cmt | na 16 16 |        |             |                 ; This gives us (ud-lo ud-hi addr u char f | n f ), so check the
 376:000 | DONE cmt | na 16 16 |        |             |                 ; flag. If it is zero, we return what we have and let the caller
 377:000 | DONE cmt | na 16 16 |        |             |                 ; (usually NUMBER) complain to the user
 378:000 | DONE ins | na 16 16 | 00613b | 98          |                 tya                  
 379:000 | DONE ins | na 16 16 | 00613c | d0 06       |                 bne 006144           
 380:000 | DONE wsp | na 16 16 |        |             |
 381:000 | DONE ins | na 16 16 | 00613e | b4 00       |                 ldy.dx 00            
 382:000 | DONE ins | na 16 16 | 006140 | e8          |                 inx                  
 383:000 | DONE ins | na 16 16 | 006141 | e8          |                 inx                  
 384:000 | DONE ins | na 16 16 | 006142 | 80 35       |                 bra 006179           
 385:000 | DONE wsp | na 16 16 |        |             |
 386:000 | DONE lbl | na 16 16 | 006144 |             | tonumber_ok                          
 387:000 | DONE cmt | na 16 16 |        |             |                 ; Conversion was successful, so we're here with
 388:000 | DONE cmt | na 16 16 |        |             |                 ; ( ud-lo ud-hi addr u n -1 ) and can start the math routine.
 389:000 | DONE wsp | na 16 16 |        |             |
 390:000 | DONE cmt | na 16 16 |        |             |                 ; Save N so we don't have to fool around with the Data Stack
 391:000 | DONE ins | na 16 16 | 006144 | b5 00       |                 lda.dx 00            
 392:000 | DONE ins | na 16 16 | 006146 | 85 04       |                 sta.d 000204         
 393:000 | DONE wsp | na 16 16 |        |             |
 394:000 | DONE cmt | na 16 16 |        |             |                 ; Now multiply ud-hi (the one in the scratchpad, not the
 395:000 | DONE cmt | na 16 16 |        |             |                 ; original one in the Data Stack) by the radix from BASE. We can
 396:000 | DONE cmt | na 16 16 |        |             |                 ; clobber TOS and NOS
 397:000 | DONE ins | na 16 16 | 006148 | a5 02       |                 lda.d 000202         
 398:000 | DONE ins | na 16 16 | 00614a | 95 00       |                 sta.dx 00            
 399:000 | DONE ins | na 16 16 | 00614c | a4 24       |                 ldy.d 000224         ( ud-lo ud-hi addr u ud-hi base )
 400:000 | DONE wsp | na 16 16 |        |             |
 401:000 | DONE cmt | na 16 16 |        |             |                 ; UM* returns a double celled number
 402:000 | DONE ins | na 16 16 | 00614e | 20 9e 6c    |                 jsr 006c9e           ( ud-lo ud-hi addr u ud-hi-lo ud-hi-hi )
 403:000 | DONE wsp | na 16 16 |        |             |
 404:000 | DONE cmt | na 16 16 |        |             |                 ; Move ud-hi-lo to safety
 405:000 | DONE ins | na 16 16 | 006151 | b5 00       |                 lda.dx 00            ud-hi-lo
 406:000 | DONE ins | na 16 16 | 006153 | 85 06       |                 sta.d 000206         
 407:000 | DONE wsp | na 16 16 |        |             |
 408:000 | DONE cmt | na 16 16 |        |             |                 ; Now we multiply ud-lo, overwriting the stack entries
 409:000 | DONE ins | na 16 16 | 006155 | a5 00       |                 lda.d 000200         
 410:000 | DONE ins | na 16 16 | 006157 | 95 00       |                 sta.dx 00            ( ud-lo ud-hi addr u ud-lo ud-hi-hi )
 411:000 | DONE ins | na 16 16 | 006159 | a4 24       |                 ldy.d 000224         ( ud-lo ud-hi addr u ud-lo base )
 412:000 | DONE wsp | na 16 16 |        |             |
 413:000 | DONE ins | na 16 16 | 00615b | 20 9e 6c    |                 jsr 006c9e           ( ud-lo ud-hi addr u ud-lo-lo ud-lo-hi )
 414:000 | DONE ins | na 16 16 | 00615e | 84 02       |                 sty.d 000202         
 415:000 | DONE ins | na 16 16 | 006160 | b5 00       |                 lda.dx 00            
 416:000 | DONE ins | na 16 16 | 006162 | 85 00       |                 sta.d 000200         
 417:000 | DONE wsp | na 16 16 |        |             |
 418:000 | DONE cmt | na 16 16 |        |             |                 ; This is a faster version of D+
 419:000 | DONE ins | na 16 16 | 006164 | a5 00       |                 lda.d 000200         
 420:000 | DONE ins | na 16 16 | 006166 | 18          |                 clc                  
 421:000 | DONE ins | na 16 16 | 006167 | 65 04       |                 adc.d 000204         
 422:000 | DONE ins | na 16 16 | 006169 | 85 00       |                 sta.d 000200         this is the new ud-lo
 423:000 | DONE ins | na 16 16 | 00616b | a5 02       |                 lda.d 000202         
 424:000 | DONE ins | na 16 16 | 00616d | 65 06       |                 adc.d 000206         
 425:000 | DONE ins | na 16 16 | 00616f | 85 02       |                 sta.d 000202         this is the new ud-hi
 426:000 | DONE wsp | na 16 16 |        |             |
 427:000 | DONE cmt | na 16 16 |        |             |                 ; Clean up: Get rid of one of the two top elements on the Data
 428:000 | DONE cmt | na 16 16 |        |             |                 ; Stack. NIP is faster if Y is TOS
 429:000 | DONE ins | na 16 16 | 006171 | e8          |                 inx                  
 430:000 | DONE ins | na 16 16 | 006172 | e8          |                 inx                  ( ud-lo ud-hi addr u ud-lo-hi )
 431:000 | DONE wsp | na 16 16 |        |             |
 432:000 | DONE cmt | na 16 16 |        |             |                 ; One character down
 433:000 | DONE ins | na 16 16 | 006173 | f6 02       |                 inc.dx 02            increase address
 434:000 | DONE ins | na 16 16 | 006175 | d6 00       |                 dec.dx 00            decrease length
 435:000 | DONE wsp | na 16 16 |        |             |
 436:000 | DONE ins | na 16 16 | 006177 | d0 bc       |                 bne 006135           
 437:000 | DONE wsp | na 16 16 |        |             |
 438:000 | DONE lbl | na 16 16 | 006179 |             | tonumber_done                        
 439:000 | DONE cmt | na 16 16 |        |             |                 ; Counter has reached zero or we have an error. In both cases,
 440:000 | DONE cmt | na 16 16 |        |             |                 ; we clean up the Data Stack and return. We arrive here with
 441:000 | DONE cmt | na 16 16 |        |             |                 ; ( ud-lo ud-hi addr u char ) if there was an error
 442:000 | DONE cmt | na 16 16 |        |             |                 ; and ( ud-lo ud-hi addr u ud-lo ) if not
 443:000 | DONE ins | na 16 16 | 006179 | b4 00       |                 ldy.dx 00            
 444:000 | DONE ins | na 16 16 | 00617b | e8          |                 inx                  
 445:000 | DONE ins | na 16 16 | 00617c | e8          |                 inx                  ( ud-lo ud-hi addr u )
 446:000 | DONE wsp | na 16 16 |        |             |
 447:000 | DONE cmt | na 16 16 |        |             |                 ; The new ud-lo and ud-hi are still on the scratch pad
 448:000 | DONE ins | na 16 16 | 00617d | a5 00       |                 lda.d 000200         new ud-lo
 449:000 | DONE ins | na 16 16 | 00617f | 95 04       |                 sta.dx 04            
 450:000 | DONE ins | na 16 16 | 006181 | a5 02       |                 lda.d 000202         
 451:000 | DONE ins | na 16 16 | 006183 | 95 02       |                 sta.dx 02            new ud-hi
 452:000 | DONE wsp | na 16 16 |        |             |
 453:000 | DONE lbl | na 16 16 | 006185 |             | z_tonumber                           
 453:001 | DONE ins | na 16 16 | 006185 | 60          |                 rts                  
 454:000 | DONE wsp | na 16 16 |        |             |
 455:000 | DONE wsp | na 16 16 |        |             |
 456:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 457:000 | DONE cmt | na 16 16 |        |             | ; >R "TOR" ( n -- ) (R: -- n )  7 bytes / 22 cycles
 458:000 | DONE cmt | na 16 16 |        |             | ; Move Top of Data Stack to Top of Return Stack
 459:000 | DONE cmt | na 16 16 |        |             | ; TODO consider stripping PHA/PLA if natively compiled (see COMPILE,)
 460:000 | DONE lbl | na 16 16 | 006186 |             | xt_tor                               
 461:000 | DONE dir | na 16 16 |        |             |         .!a16                        
 462:000 | DONE cmt | na 16 16 |        |             |                 ; Save the return address. If this word is natively coded, this
 463:000 | DONE cmt | na 16 16 |        |             |                 ; is a complete waste of nine cycles, but required for
 464:000 | DONE cmt | na 16 16 |        |             |                 ; subroutine coding
 465:000 | DONE ins | na 16 16 | 006186 | 68          |                 pla                  
 466:000 | DONE wsp | na 16 16 |        |             |
 467:000 | DONE ins | na 16 16 | 006187 | 5a          |                 phy                  the actual work
 468:000 | DONE wsp | na 16 16 |        |             |
 469:000 | DONE ins | na 16 16 | 006188 | b4 00       |                 ldy.dx 00            DROP
 470:000 | DONE ins | na 16 16 | 00618a | e8          |                 inx                  
 471:000 | DONE ins | na 16 16 | 00618b | e8          |                 inx                  
 472:000 | DONE wsp | na 16 16 |        |             |
 473:000 | DONE ins | na 16 16 | 00618c | 48          |                 pha                  put return address back in place
 474:000 | DONE wsp | na 16 16 |        |             |
 475:000 | DONE lbl | na 16 16 | 00618d |             | z_tor                                
 475:001 | DONE ins | na 16 16 | 00618d | 60          |                 rts                  
 476:000 | DONE wsp | na 16 16 |        |             |
 477:000 | DONE wsp | na 16 16 |        |             |
 478:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 479:000 | DONE cmt | na 16 16 |        |             | ; /STRING ( addr u n -- ) X bytes / X cycles
 480:000 | DONE cmt | na 16 16 |        |             | ; Remove characters from front of string. Uses tmp1
 481:000 | DONE cmt | na 16 16 |        |             | ; Forth version: ROT OVER + ROT ROT - ;
 482:000 | DONE cmt | na 16 16 |        |             | ; TODO check for negative strings so 1 /STRING TYPE won't try to print the whole
 483:000 | DONE cmt | na 16 16 |        |             | ; address space; follow Gforth in failing gracefully
 484:000 | DONE lbl | na 16 16 | 00618e |             | xt_slashstring                       
 485:000 | DONE ins | na 16 16 | 00618e | 84 0a       |                 sty.d 00020a         
 486:000 | DONE wsp | na 16 16 |        |             |
 487:000 | DONE ins | na 16 16 | 006190 | b5 00       |                 lda.dx 00            length
 488:000 | DONE ins | na 16 16 | 006192 | 38          |                 sec                  
 489:000 | DONE ins | na 16 16 | 006193 | e5 0a       |                 sbc.d 00020a         
 490:000 | DONE ins | na 16 16 | 006195 | a8          |                 tay                  
 491:000 | DONE wsp | na 16 16 |        |             |
 492:000 | DONE ins | na 16 16 | 006196 | b5 02       |                 lda.dx 02            address
 493:000 | DONE ins | na 16 16 | 006198 | 18          |                 clc                  
 494:000 | DONE ins | na 16 16 | 006199 | 65 0a       |                 adc.d 00020a         
 495:000 | DONE ins | na 16 16 | 00619b | 95 02       |                 sta.dx 02            
 496:000 | DONE wsp | na 16 16 |        |             |
 497:000 | DONE ins | na 16 16 | 00619d | e8          |                 inx                  
 498:000 | DONE ins | na 16 16 | 00619e | e8          |                 inx                  
 499:000 | DONE wsp | na 16 16 |        |             |
 500:000 | DONE lbl | na 16 16 | 00619f |             | z_slashstring                        
 500:001 | DONE ins | na 16 16 | 00619f | 60          |                 rts                  
 501:000 | DONE wsp | na 16 16 |        |             |
 502:000 | DONE wsp | na 16 16 |        |             |
 503:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 504:000 | DONE cmt | na 16 16 |        |             | ; . "DOT" ( n -- ) X bytes / X cycles
 505:000 | DONE cmt | na 16 16 |        |             | ; Print value that is TOS followed by a single space. Forth code is
 506:000 | DONE cmt | na 16 16 |        |             | ; DUP ABS 0 <# #S ROT SIGN #> TYPE SPACE  Based on
 507:000 | DONE cmt | na 16 16 |        |             | ; https://github.com/philburk/pforth/blob/master/fth/numberio.fth
 508:000 | DONE cmt | na 16 16 |        |             | ; Since this is used interactively, and humans are slow (just ask GlaDOS), we
 509:000 | DONE cmt | na 16 16 |        |             | ; focus on size.
 510:000 | DONE cmt | na 16 16 |        |             | ; TODO Once we know this works, move to assembler
 511:000 | DONE lbl | na 16 16 | 0061a0 |             | xt_dot                               
 512:000 | DONE ins | na 16 16 | 0061a0 | 20 17 67    |                 jsr 006717           ( n n )
 513:000 | DONE ins | na 16 16 | 0061a3 | 20 14 64    |                 jsr 006414           ( n n )
 514:000 | DONE ins | na 16 16 | 0061a6 | 20 1d 63    |                 jsr 00631d           ( n n 0 )
 515:000 | DONE ins | na 16 16 | 0061a9 | 20 ff 60    |                 jsr 0060ff           ( n n 0 )
 516:000 | DONE ins | na 16 16 | 0061ac | 20 9a 62    |                 jsr 00629a           ( n ud )
 517:000 | DONE ins | na 16 16 | 0061af | 20 e7 6a    |                 jsr 006ae7           ( ud n )
 518:000 | DONE ins | na 16 16 | 0061b2 | 20 40 6b    |                 jsr 006b40           ( ud )
 519:000 | DONE ins | na 16 16 | 0061b5 | 20 8b 62    |                 jsr 00628b           
 520:000 | DONE ins | na 16 16 | 0061b8 | 20 62 6c    |                 jsr 006c62           
 521:000 | DONE ins | na 16 16 | 0061bb | 20 1d 6c    |                 jsr 006c1d           
 522:000 | DONE wsp | na 16 16 |        |             |
 523:000 | DONE lbl | na 16 16 | 0061be |             | z_dot                                
 523:001 | DONE ins | na 16 16 | 0061be | 60          |                 rts                  
 524:000 | DONE wsp | na 16 16 |        |             |
 525:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 526:000 | DONE cmt | na 16 16 |        |             | ; .( "DOTPAREN" ( "string" -- ) 13 bytes / X cycles
 527:000 | DONE cmt | na 16 16 |        |             | ; Display string delimited by ")" immediately, regardless if word is compiled or
 528:000 | DONE cmt | na 16 16 |        |             | ; interpreted. Forth definition is  .( [CHAR] ) PARSE TYPE ; IMMEDIATE
 529:000 | DONE cmt | na 16 16 |        |             | ; TODO Decide if this should be a high-level word
 530:000 | DONE lbl | na 16 16 | 0061bf |             | xt_dotparen                          
 531:000 | DONE cmt | na 16 16 |        |             |                ; use PARSE to find the end of the string
 532:000 | DONE ins | na 16 16 | 0061bf | ca          |                 dex                  
 533:000 | DONE ins | na 16 16 | 0061c0 | ca          |                 dex                  
 534:000 | DONE ins | na 16 16 | 0061c1 | 94 00       |                 sty.dx 00            
 535:000 | DONE ins | na 16 16 | 0061c3 | a0 29 00    |                 ldy.# 29             
 536:000 | DONE wsp | na 16 16 |        |             |
 537:000 | DONE ins | na 16 16 | 0061c6 | 20 1c 6a    |                 jsr 006a1c           ( -- addr u)
 538:000 | DONE ins | na 16 16 | 0061c9 | 20 62 6c    |                 jsr 006c62           
 539:000 | DONE wsp | na 16 16 |        |             |
 540:000 | DONE lbl | na 16 16 | 0061cc |             | z_dotparen                           
 540:001 | DONE ins | na 16 16 | 0061cc | 60          |                 rts                  
 541:000 | DONE wsp | na 16 16 |        |             |
 542:000 | DONE wsp | na 16 16 |        |             |
 543:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 544:000 | DONE cmt | na 16 16 |        |             | ; ." "DOTQUOTE" ( -- ) X bytes / X cycles
 545:000 | DONE cmt | na 16 16 |        |             | ; Compile string that is printed during run time. ANSI Forth wants this to be
 546:000 | DONE cmt | na 16 16 |        |             | ; compile-only, even though everybody and their friend uses it for everything.
 547:000 | DONE cmt | na 16 16 |        |             | ; We follow the book here, and recommend .( for general printing.
 548:000 | DONE lbl | na 16 16 | 0061cd |             | xt_dotquote                          
 549:000 | DONE ins | na 16 16 | 0061cd | ca          |                 dex                  
 550:000 | DONE ins | na 16 16 | 0061ce | ca          |                 dex                  
 551:000 | DONE ins | na 16 16 | 0061cf | 94 00       |                 sty.dx 00            
 552:000 | DONE ins | na 16 16 | 0061d1 | a0 22 00    |                 ldy.# 0022           ASCII for "
 553:000 | DONE wsp | na 16 16 |        |             |
 554:000 | DONE ins | na 16 16 | 0061d4 | 20 1c 6a    |                 jsr 006a1c           
 555:000 | DONE ins | na 16 16 | 0061d7 | 20 4e 6b    |                 jsr 006b4e           
 556:000 | DONE wsp | na 16 16 |        |             |
 557:000 | DONE ins | na 16 16 | 0061da | f4 62 6c    |                 phe.# 006c62         
 558:000 | DONE ins | na 16 16 | 0061dd | 20 dc 75    |                 jsr 0075dc           
 559:000 | DONE wsp | na 16 16 |        |             |
 560:000 | DONE ins | na 16 16 | 0061e0 | 60          |                 rts                  
 561:000 | DONE lbl | na 16 16 | 0061e1 |             | z_dotquote                           
 562:000 | DONE wsp | na 16 16 |        |             |
 563:000 | DONE wsp | na 16 16 |        |             |
 564:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 565:000 | DONE cmt | na 16 16 |        |             | ; .S "DOTS" ( -- ) X bytes / X cycles
 566:000 | DONE cmt | na 16 16 |        |             | ; Print content of Data Stack non-distructively. Since this is for humans, we
 567:000 | DONE cmt | na 16 16 |        |             | ; don't have to worry about speed. We follow the format of Gforth
 568:000 | DONE cmt | na 16 16 |        |             | ; and print the number of elements first in brackets, followed by the Data Stack
 569:000 | DONE cmt | na 16 16 |        |             | ; content (if present).
 570:000 | DONE lbl | na 16 16 | 0061e1 |             | xt_dots                              
 571:000 | DONE dir | na 16 16 |        |             |         .!a16                        
 572:000 | DONE dir | na 16 16 |        |             |         .!xy16                       
 573:000 | DONE ins | na 16 16 | 0061e1 | 20 a5 66    |                 jsr 0066a5           ( -- u)
 574:000 | DONE wsp | na 16 16 |        |             |
 575:000 | DONE cmt | na 16 16 |        |             |                 ; Print stack depth in brackets
 576:000 | DONE cmt | na 16 16 |        |             |                 ; TODO rewrite this to use EMIT
 577:000 | DONE ins | na 16 16 | 0061e4 | a9 3c 00    |                 lda.# 3c             
 578:000 | DONE ins | na 16 16 | 0061e7 | 20 36 60    |                 jsr 006036           
 579:000 | DONE wsp | na 16 16 |        |             |
 580:000 | DONE cmt | na 16 16 |        |             |                 ; --- TEMP print routine ---
 581:000 | DONE ins | na 16 16 | 0061ea | 98          |                 tya                  
 582:000 | DONE ins | na 16 16 | 0061eb | 29 00 ff    |                 and.# 0ff00          
 583:000 | DONE ins | na 16 16 | 0061ee | eb          |                 xba                  
 584:000 | DONE ins | na 16 16 | 0061ef | 20 1b 76    |                 jsr 00761b           
 585:000 | DONE ins | na 16 16 | 0061f2 | 98          |                 tya                  
 586:000 | DONE ins | na 16 16 | 0061f3 | 29 ff 00    |                 and.# 00ff           
 587:000 | DONE ins | na 16 16 | 0061f6 | 20 1b 76    |                 jsr 00761b           
 588:000 | DONE cmt | na 16 16 |        |             |                 ; --- TEMP print routine ---
 589:000 | DONE wsp | na 16 16 |        |             |
 590:000 | DONE cmt | na 16 16 |        |             |                 ; TODO rewrite this to use EMIT
 591:000 | DONE ins | na 16 16 | 0061f9 | a9 3e 00    |                 lda.# 3e             
 592:000 | DONE ins | na 16 16 | 0061fc | 20 36 60    |                 jsr 006036           
 593:000 | DONE ins | na 16 16 | 0061ff | 20 1d 6c    |                 jsr 006c1d           
 594:000 | DONE wsp | na 16 16 |        |             |
 595:000 | DONE wsp | na 16 16 |        |             |
 596:000 | DONE cmt | na 16 16 |        |             |                 ; There will be a lot of cases where .S is used when the stack
 597:000 | DONE cmt | na 16 16 |        |             |                 ; is empty. Get them first and exit quickly
 598:000 | DONE ins | na 16 16 | 006202 | 98          |                 tya                  force flag test
 599:000 | DONE ins | na 16 16 | 006203 | f0 20       |                 beq 006225           
 600:000 | DONE wsp | na 16 16 |        |             |
 601:000 | DONE lbl | na 16 16 | 006205 |             | dots_not_empty                       
 602:000 | DONE cmt | na 16 16 |        |             |                 ; We have at least one element on the stack, which used to be in
 603:000 | DONE cmt | na 16 16 |        |             |                 ; Y as TOS, but is now NOS and therefore accessable by X. Also,
 604:000 | DONE cmt | na 16 16 |        |             |                 ; the depth of the Data Stack is already in Y waiting to be used
 605:000 | DONE cmt | na 16 16 |        |             |                 ; as a counter. We use this to our advantage.
 606:000 | DONE wsp | na 16 16 |        |             |
 607:000 | DONE cmt | na 16 16 |        |             |                 ; Normally we would go with STX.D tmptos / LDX.D tmptos with
 608:000 | DONE cmt | na 16 16 |        |             |                 ; 4 bytes and 8 cycles because we value speed over size.
 609:000 | DONE cmt | na 16 16 |        |             |                 ; However, .S is used interactively, and humans
 610:000 | DONE cmt | na 16 16 |        |             |                 ; won't notice the one cycle more of PHX/PLX (2 bytes,
 611:000 | DONE cmt | na 16 16 |        |             |                 ; 9 cycles), and we save the two bytes.
 612:000 | DONE ins | na 16 16 | 006205 | da          |                 phx                  
 613:000 | DONE wsp | na 16 16 |        |             |
 614:000 | DONE cmt | na 16 16 |        |             |                 ; We print from the bottom up. Note that the Data Stack locations
 615:000 | DONE cmt | na 16 16 |        |             |                 ; dsp0 and dsp0+2 always contain garbage so they can be skipped.
 616:000 | DONE cmt | na 16 16 |        |             |                 ; See docs/INTERNALS.md for details
 617:000 | DONE ins | na 16 16 | 006206 | a2 f0 02    |                 ldx.# 0002f0         points to dsp0, which is garbage
 618:000 | DONE ins | na 16 16 | 006209 | ca          |                 dex                  
 619:000 | DONE ins | na 16 16 | 00620a | ca          |                 dex                  points to dsp0-2, which is also garbage
 620:000 | DONE wsp | na 16 16 |        |             |
 621:000 | DONE lbl | na 16 16 | 00620b |             | dots_loop                            
 622:000 | DONE ins | na 16 16 | 00620b | ca          |                 dex                  get next element on DS, initially dsp0-4
 623:000 | DONE ins | na 16 16 | 00620c | ca          |                 dex                  
 624:000 | DONE wsp | na 16 16 |        |             |
 625:000 | DONE cmt | na 16 16 |        |             |                 ; --- TEMP print routine ---
 626:000 | DONE cmt | na 16 16 |        |             |                 ; TODO call EMIT
 627:000 | DONE ins | na 16 16 | 00620d | b5 00       |                 lda.dx 00            
 628:000 | DONE ins | na 16 16 | 00620f | 29 00 ff    |                 and.# 0ff00          
 629:000 | DONE ins | na 16 16 | 006212 | eb          |                 xba                  
 630:000 | DONE ins | na 16 16 | 006213 | 20 1b 76    |                 jsr 00761b           
 631:000 | DONE ins | na 16 16 | 006216 | b5 00       |                 lda.dx 00            
 632:000 | DONE ins | na 16 16 | 006218 | 29 ff 00    |                 and.# 00ff           
 633:000 | DONE ins | na 16 16 | 00621b | 20 1b 76    |                 jsr 00761b           
 634:000 | DONE ins | na 16 16 | 00621e | 20 1d 6c    |                 jsr 006c1d           
 635:000 | DONE cmt | na 16 16 |        |             |                 ; --- TEMP print routine ---
 636:000 | DONE wsp | na 16 16 |        |             |
 637:000 | DONE ins | na 16 16 | 006221 | 88          |                 dey                  
 638:000 | DONE ins | na 16 16 | 006222 | d0 e7       |                 bne 00620b           
 639:000 | DONE wsp | na 16 16 |        |             |
 640:000 | DONE ins | na 16 16 | 006224 | fa          |                 plx                  restore original DSP
 641:000 | DONE wsp | na 16 16 |        |             |
 642:000 | DONE lbl | na 16 16 | 006225 |             | dots_done                            
 643:000 | DONE cmt | na 16 16 |        |             |                 ; Clean up. Again, we don't care about speed in this
 644:000 | DONE cmt | na 16 16 |        |             |                 ; word so we save one byte by doing DROP the slow way
 645:000 | DONE ins | na 16 16 | 006225 | 20 eb 66    |                 jsr 0066eb           
 646:000 | DONE wsp | na 16 16 |        |             |
 647:000 | DONE lbl | na 16 16 | 006228 |             | z_dots                               
 647:001 | DONE ins | na 16 16 | 006228 | 60          |                 rts                  
 648:000 | DONE wsp | na 16 16 |        |             |
 649:000 | DONE wsp | na 16 16 |        |             |
 650:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 651:000 | DONE cmt | na 16 16 |        |             | ; , "COMMA" ( n -- ) 11 bytes / 29 cycles
 652:000 | DONE cmt | na 16 16 |        |             | ; Allot one cell and store TOS in memory. We ignore alignment issues, though
 653:000 | DONE cmt | na 16 16 |        |             | ; satisfy the ANSI requirement that an aligned compiler pointer will remain
 654:000 | DONE cmt | na 16 16 |        |             | ; aligned
 655:000 | DONE cmt | na 16 16 |        |             | ; There is another variant possible:
 656:000 | DONE cmt | na 16 16 |        |             | ;               tya
 657:000 | DONE cmt | na 16 16 |        |             | ;               ldy.d cp
 658:000 | DONE cmt | na 16 16 |        |             | ;               sta.y 0000
 659:000 | DONE cmt | na 16 16 |        |             | ;               iny
 660:000 | DONE cmt | na 16 16 |        |             | ;               iny
 661:000 | DONE cmt | na 16 16 |        |             | ;               sty.d cp
 662:000 | DONE cmt | na 16 16 |        |             | ;               ldy.dx 00
 663:000 | DONE cmt | na 16 16 |        |             | ;               inx
 664:000 | DONE cmt | na 16 16 |        |             | ;               inx
 665:000 | DONE cmt | na 16 16 |        |             | ; This is as fast as the variant below, but three bytes longer
 666:000 | DONE lbl | na 16 16 | 006229 |             | xt_comma                             
 667:000 | DONE dir | na 16 16 |        |             |         .!a16                        
 668:000 | DONE ins | na 16 16 | 006229 | 98          |                 tya                  
 669:000 | DONE ins | na 16 16 | 00622a | 92 28       |                 sta.di 000228        STA (CP)
 670:000 | DONE ins | na 16 16 | 00622c | e6 28       |                 inc.d 000228         
 671:000 | DONE ins | na 16 16 | 00622e | e6 28       |                 inc.d 000228         
 672:000 | DONE wsp | na 16 16 |        |             |
 673:000 | DONE ins | na 16 16 | 006230 | b4 00       |                 ldy.dx 00            
 674:000 | DONE ins | na 16 16 | 006232 | e8          |                 inx                  
 675:000 | DONE ins | na 16 16 | 006233 | e8          |                 inx                  
 676:000 | DONE wsp | na 16 16 |        |             |
 677:000 | DONE lbl | na 16 16 | 006234 |             | z_comma                              
 677:001 | DONE ins | na 16 16 | 006234 | 60          |                 rts                  
 678:000 | DONE wsp | na 16 16 |        |             |
 679:000 | DONE wsp | na 16 16 |        |             |
 680:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 681:000 | DONE cmt | na 16 16 |        |             | ; : "COLON" ( "name" -- ) X bytes / X cycles
 682:000 | DONE cmt | na 16 16 |        |             | ; Start compilation of new word into the Dictionary. Use the CREATE routine
 683:000 | DONE cmt | na 16 16 |        |             | ; and fill in the rest by hand.
 684:000 | DONE lbl | na 16 16 | 006235 |             | xt_colon                             
 685:000 | DONE dir | na 16 16 |        |             |         .!a16                        
 686:000 | DONE cmt | na 16 16 |        |             |                 ; if we are already in compile mode, complain and abort
 687:000 | DONE ins | na 16 16 | 006235 | a5 22       |                 lda.d 000222         
 688:000 | DONE ins | na 16 16 | 006237 | f0 06       |                 beq 00623f           
 689:000 | DONE wsp | na 16 16 |        |             |
 690:000 | DONE ins | na 16 16 | 006239 | a9 68 7c    |                 lda.# 007c68         
 691:000 | DONE ins | na 16 16 | 00623c | 4c fd 75    |                 jmp 0075fd           
 692:000 | DONE lbl | na 16 16 | 00623f |             | @                                    
 693:000 | DONE cmt | na 16 16 |        |             |                 ; Switch to compile state. From now on, everything goes in the
 694:000 | DONE cmt | na 16 16 |        |             |                 ; Dictionary
 695:000 | DONE ins | na 16 16 | 00623f | e6 22       |                 inc.d 000222         
 696:000 | DONE wsp | na 16 16 |        |             |
 697:000 | DONE cmt | na 16 16 |        |             |                 ; CREATE is going to change DP to point to the new word's
 698:000 | DONE cmt | na 16 16 |        |             |                 ; header. While this is fine for (say) variables, it would mean
 699:000 | DONE cmt | na 16 16 |        |             |                 ; that FIND-NAME etc would find a half-finished word when
 700:000 | DONE cmt | na 16 16 |        |             |                 ; looking in the Dictionary. To prevent this, we save the old
 701:000 | DONE cmt | na 16 16 |        |             |                 ; version of DP and restore it later. The new DP is placed in
 702:000 | DONE cmt | na 16 16 |        |             |                 ; the variable WORKWORD until we're finished with a SEMICOLON.
 703:000 | DONE ins | na 16 16 | 006241 | a5 2a       |                 lda.d 00022a         
 704:000 | DONE ins | na 16 16 | 006243 | 48          |                 pha                  CREATE uses tmp1, tmp2 and tmp3
 705:000 | DONE wsp | na 16 16 |        |             |
 706:000 | DONE ins | na 16 16 | 006244 | 20 bd 65    |                 jsr 0065bd           
 707:000 | DONE wsp | na 16 16 |        |             |
 708:000 | DONE cmt | na 16 16 |        |             |                 ; Get the nt of the new word as described above. Only COLON,
 709:000 | DONE cmt | na 16 16 |        |             |                 ; SEMICOLON and RECURSE access WORKWORD
 710:000 | DONE ins | na 16 16 | 006247 | a5 2a       |                 lda.d 00022a         
 711:000 | DONE ins | na 16 16 | 006249 | 85 14       |                 sta.d 000214         
 712:000 | DONE ins | na 16 16 | 00624b | 68          |                 pla                  
 713:000 | DONE ins | na 16 16 | 00624c | 85 2a       |                 sta.d 00022a         
 714:000 | DONE wsp | na 16 16 |        |             |
 715:000 | DONE cmt | na 16 16 |        |             |                 ; CREATE includes a subroutine jump to DOVAR by default. We back
 716:000 | DONE cmt | na 16 16 |        |             |                 ; up three bytes and overwrite that. Note that 3 x DEC.D would
 717:000 | DONE cmt | na 16 16 |        |             |                 ; use 3 bytes and 18 cycles; this version uses 8 bytes but
 718:000 | DONE cmt | na 16 16 |        |             |                 ; only 13 cycles
 719:000 | DONE ins | na 16 16 | 00624e | a5 28       |                 lda.d 000228         
 720:000 | DONE ins | na 16 16 | 006250 | 38          |                 sec                  
 721:000 | DONE ins | na 16 16 | 006251 | e9 03 00    |                 sbc.# 0003           
 722:000 | DONE ins | na 16 16 | 006254 | 85 28       |                 sta.d 000228         
 723:000 | DONE wsp | na 16 16 |        |             |
 724:000 | DONE lbl | na 16 16 | 006256 |             | z_colon                              
 724:001 | DONE ins | na 16 16 | 006256 | 60          |                 rts                  
 725:000 | DONE wsp | na 16 16 |        |             |
 726:000 | DONE wsp | na 16 16 |        |             |
 727:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 728:000 | DONE cmt | na 16 16 |        |             | ; ; "SEMICOLON" ( -- ) X bytes / X cycles
 729:000 | DONE cmt | na 16 16 |        |             | ; End the compilation of a new word into the Dictionary. When we enter this,
 730:000 | DONE cmt | na 16 16 |        |             | ; WORKWORD is pointing to the nt_ of this word in the Dictionary, DP to the
 731:000 | DONE cmt | na 16 16 |        |             | ; previous word, and CP to the next free byte.  A Forth definition would be
 732:000 | DONE cmt | na 16 16 |        |             | ; (see "Starting Forth"):
 733:000 | DONE cmt | na 16 16 |        |             | ;  : ;  POSTPONE EXIT  REVEAL POSTPONE ; [ ; IMMEDIATE
 734:000 | DONE lbl | na 16 16 | 006257 |             | xt_semicolon                         
 735:000 | DONE dir | na 16 16 |        |             |         .!a16                        
 736:000 | DONE ins | na 16 16 | 006257 | 84 12       |                 sty.d 000212         
 737:000 | DONE wsp | na 16 16 |        |             |
 738:000 | DONE cmt | na 16 16 |        |             |                 ; CP is the byte that will be the address we use in the header for
 739:000 | DONE cmt | na 16 16 |        |             |                 ; the end-of-compile address (z_word). This is six bytes down in
 740:000 | DONE cmt | na 16 16 |        |             |                 ; the header
 741:000 | DONE ins | na 16 16 | 006259 | a0 06 00    |                 ldy.# 0006           
 742:000 | DONE ins | na 16 16 | 00625c | a5 28       |                 lda.d 000228         
 743:000 | DONE ins | na 16 16 | 00625e | 91 14       |                 sta.diy 000214       STA (WORKWORD),Y
 744:000 | DONE wsp | na 16 16 |        |             |
 745:000 | DONE cmt | na 16 16 |        |             |                 ; Add the RTS instruction to the end of the current word. We
 746:000 | DONE cmt | na 16 16 |        |             |                 ; don't have to switch the size of the A register because we
 747:000 | DONE cmt | na 16 16 |        |             |                 ; only move up the CP by one and the MSB will be overwritten.
 748:000 | DONE cmt | na 16 16 |        |             |                 ; Little endian MPUs for the win!
 749:000 | DONE ins | na 16 16 | 006260 | a9 60 00    |                 lda.# 60             opcode for RTS
 750:000 | DONE ins | na 16 16 | 006263 | 92 28       |                 sta.di 000228        STA (CP)
 751:000 | DONE ins | na 16 16 | 006265 | e6 28       |                 inc.d 000228         MSB will be overwritten
 752:000 | DONE wsp | na 16 16 |        |             |
 753:000 | DONE cmt | na 16 16 |        |             |                 ; Word definition is complete. Make the new word the last one in
 754:000 | DONE cmt | na 16 16 |        |             |                 ; the Dictionary
 755:000 | DONE ins | na 16 16 | 006267 | a5 14       |                 lda.d 000214         
 756:000 | DONE ins | na 16 16 | 006269 | 85 2a       |                 sta.d 00022a         
 757:000 | DONE wsp | na 16 16 |        |             |
 758:000 | DONE cmt | na 16 16 |        |             |                 ; Get our TOS back
 759:000 | DONE ins | na 16 16 | 00626b | a4 12       |                 ldy.d 000212         
 760:000 | DONE wsp | na 16 16 |        |             |
 761:000 | DONE cmt | na 16 16 |        |             |                 ; Set compile flag back to zero so we're back in interpret mode
 762:000 | DONE ins | na 16 16 | 00626d | 64 22       |                 stz.d 000222         
 763:000 | DONE wsp | na 16 16 |        |             |
 764:000 | DONE lbl | na 16 16 | 00626f |             | z_semicolon                          
 764:001 | DONE ins | na 16 16 | 00626f | 60          |                 rts                  
 765:000 | DONE wsp | na 16 16 |        |             |
 766:000 | DONE wsp | na 16 16 |        |             |
 767:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 768:000 | DONE cmt | na 16 16 |        |             | ; # "HASH" / "NUMBER-SIGN" ( ud -- ud )  X bytes / X cycles
 769:000 | DONE cmt | na 16 16 |        |             | ; Add one character to the beginning of the pictured output string.
 770:000 | DONE cmt | na 16 16 |        |             | ; Code based on https://github.com/philburk/pforth/blob/master/fth/numberio.fth
 771:000 | DONE cmt | na 16 16 |        |             | ; Forth code is  BASE @ UD/MOD ROT 9 OVER < IF 7 + THEN [CHAR] 0 + HOLD ;
 772:000 | DONE cmt | na 16 16 |        |             | ; TODO convert more parts to assembler
 773:000 | DONE lbl | na 16 16 | 006270 |             | xt_hash                              
 774:000 | DONE dir | na 16 16 |        |             |         .!a16                        
 775:000 | DONE ins | na 16 16 | 006270 | 20 e7 64    |                 jsr 0064e7           ( ud addr )
 776:000 | DONE ins | na 16 16 | 006273 | 20 be 62    |                 jsr 0062be           ( ud u )
 777:000 | DONE ins | na 16 16 | 006276 | 20 83 6c    |                 jsr 006c83           ( rem ud )
 778:000 | DONE ins | na 16 16 | 006279 | 20 e7 6a    |                 jsr 006ae7           ( ud rem )
 779:000 | DONE wsp | na 16 16 |        |             |
 780:000 | DONE cmt | na 16 16 |        |             |                 ; Convert the number that is left over to an ASCII character. We
 781:000 | DONE cmt | na 16 16 |        |             |                 ; use a string lookup for speed
 782:000 | DONE ins | na 16 16 | 00627c | e2 20       |                 sep 20               
 782:001 | DONE ctl | na  8 16 |        |             |         .!a8
 783:000 | DONE ins | na  8 16 | 00627e | b9 ca 7c    |                 lda.y 007cca         
 784:000 | DONE ins | na  8 16 | 006281 | c2 20       |                 rep 20               
 784:001 | DONE ctl | na 16 16 |        |             |         .!a16
 785:000 | DONE cmt | na 16 16 |        |             |                 ; overwrite remainder with ASCII value
 786:000 | DONE ins | na 16 16 | 006283 | 29 ff 00    |                 and.# 00ff           
 787:000 | DONE ins | na 16 16 | 006286 | a8          |                 tay                  ( ud char )
 788:000 | DONE wsp | na 16 16 |        |             |
 789:000 | DONE ins | na 16 16 | 006287 | 20 42 68    |                 jsr 006842           JSR/RTS
 790:000 | DONE wsp | na 16 16 |        |             |
 791:000 | DONE lbl | na 16 16 | 00628a |             | z_hash                               
 791:001 | DONE ins | na 16 16 | 00628a | 60          |                 rts                  
 792:000 | DONE wsp | na 16 16 |        |             |
 793:000 | DONE wsp | na 16 16 |        |             |
 794:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 795:000 | DONE cmt | na 16 16 |        |             | ; #> "NUMBERMORE" / "NUMBER-GREATER" ( d -- addr u ) X bytes / X cycles
 796:000 | DONE cmt | na 16 16 |        |             | ; Finish conversion of pictured number string, putting address and length on the
 797:000 | DONE cmt | na 16 16 |        |             | ; Data Stack. Original Fort is  2DROP HLD @ PAD OVER -  Based on
 798:000 | DONE cmt | na 16 16 |        |             | ; https://github.com/philburk/pforth/blob/master/fth/numberio.fth
 799:000 | DONE lbl | na 16 16 | 00628b |             | xt_numbermore                        
 800:000 | DONE dir | na 16 16 |        |             |         .!a16                        
 801:000 | DONE cmt | na 16 16 |        |             |                 ; We simply overwrite the double cell number, saving us a lot of
 802:000 | DONE cmt | na 16 16 |        |             |                 ; stack thrashing. First, put the address of the string's head in
 803:000 | DONE cmt | na 16 16 |        |             |                 ; TOS and NOS
 804:000 | DONE ins | na 16 16 | 00628b | a4 26       |                 ldy.d 000226         
 805:000 | DONE ins | na 16 16 | 00628d | 94 00       |                 sty.dx 00            ( addr addr )
 806:000 | DONE wsp | na 16 16 |        |             |
 807:000 | DONE cmt | na 16 16 |        |             |                 ; add the address of the string's end, which is PAD
 808:000 | DONE ins | na 16 16 | 00628f | 20 d1 69    |                 jsr 0069d1           ( addr addr pad )
 809:000 | DONE wsp | na 16 16 |        |             |
 810:000 | DONE ins | na 16 16 | 006292 | 38          |                 sec                  
 811:000 | DONE ins | na 16 16 | 006293 | 98          |                 tya                  
 812:000 | DONE ins | na 16 16 | 006294 | f5 00       |                 sbc.dx 00            pad - addr is the length of the string
 813:000 | DONE ins | na 16 16 | 006296 | a8          |                 tay                  ( addr addr n )
 814:000 | DONE wsp | na 16 16 |        |             |
 815:000 | DONE ins | na 16 16 | 006297 | e8          |                 inx                  NIP
 816:000 | DONE ins | na 16 16 | 006298 | e8          |                 inx                  
 817:000 | DONE wsp | na 16 16 |        |             |
 818:000 | DONE lbl | na 16 16 | 006299 |             | z_numbermore                         
 818:001 | DONE ins | na 16 16 | 006299 | 60          |                 rts                  
 819:000 | DONE wsp | na 16 16 |        |             |
 820:000 | DONE wsp | na 16 16 |        |             |
 821:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 822:000 | DONE cmt | na 16 16 |        |             | ; #S "HASHS" / "NUMBER SIGN" ( ud -- ud ) X bytes / X cycles
 823:000 | DONE cmt | na 16 16 |        |             | ; Completely convert number for pictured numerical output. Based on
 824:000 | DONE cmt | na 16 16 |        |             | ; https://github.com/philburk/pforth/blob/master/fth/system.fth
 825:000 | DONE cmt | na 16 16 |        |             | ; Original Forth code  BEGIN # 2DUP OR 0= UNTIL
 826:000 | DONE lbl | na 16 16 | 00629a |             | xt_hashs                             
 827:000 | DONE dir | na 16 16 |        |             |         .!a16                        
 828:000 | DONE lbl | na 16 16 | 00629a |             | hashs_loop                           
 829:000 | DONE cmt | na 16 16 |        |             |                 ; covert a single number ("#")
 830:000 | DONE ins | na 16 16 | 00629a | 20 70 62    |                 jsr 006270           ( ud -- ud )
 831:000 | DONE wsp | na 16 16 |        |             |
 832:000 | DONE cmt | na 16 16 |        |             |                 ; stop when the double-celled number on the TOS is zero
 833:000 | DONE ins | na 16 16 | 00629d | 98          |                 tya                  
 834:000 | DONE ins | na 16 16 | 00629e | 15 00       |                 ora.dx 00            
 835:000 | DONE ins | na 16 16 | 0062a0 | d0 f8       |                 bne 00629a           
 836:000 | DONE wsp | na 16 16 |        |             |
 837:000 | DONE lbl | na 16 16 | 0062a2 |             | z_hashs                              
 837:001 | DONE ins | na 16 16 | 0062a2 | 60          |                 rts                  
 838:000 | DONE wsp | na 16 16 |        |             |
 839:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 840:000 | DONE cmt | na 16 16 |        |             | ; ? "QUESTION" ( addr -- ) X bytes / X cycles
 841:000 | DONE cmt | na 16 16 |        |             | ; Print content of a variable. This is used interactively and humans are
 842:000 | DONE cmt | na 16 16 |        |             | ; slow, so we just go for the subroutine jumps to keep it short
 843:000 | DONE lbl | na 16 16 | 0062a3 |             | xt_question                          
 844:000 | DONE ins | na 16 16 | 0062a3 | 20 be 62    |                 jsr 0062be           
 845:000 | DONE ins | na 16 16 | 0062a6 | 20 a0 61    |                 jsr 0061a0           
 846:000 | DONE wsp | na 16 16 |        |             |
 847:000 | DONE lbl | na 16 16 | 0062a9 |             | z_question                           
 847:001 | DONE ins | na 16 16 | 0062a9 | 60          |                 rts                  
 848:000 | DONE wsp | na 16 16 |        |             |
 849:000 | DONE wsp | na 16 16 |        |             |
 850:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 851:000 | DONE cmt | na 16 16 |        |             | ; QDUP ( n -- 0 | n n ) X bytes / X cycles
 852:000 | DONE cmt | na 16 16 |        |             | ; If top element on Data Stack is not zero, duplicate it
 853:000 | DONE lbl | na 16 16 | 0062aa |             | xt_qdup                              
 854:000 | DONE ins | na 16 16 | 0062aa | 98          |                 tya                  
 855:000 | DONE ins | na 16 16 | 0062ab | f0 04       |                 beq 0062b1           
 856:000 | DONE wsp | na 16 16 |        |             |
 857:000 | DONE ins | na 16 16 | 0062ad | ca          |                 dex                  
 858:000 | DONE ins | na 16 16 | 0062ae | ca          |                 dex                  
 859:000 | DONE ins | na 16 16 | 0062af | 94 00       |                 sty.dx 00            
 860:000 | DONE wsp | na 16 16 |        |             |
 861:000 | DONE lbl | na 16 16 | 0062b1 |             | z_qdup                               
 861:001 | DONE ins | na 16 16 | 0062b1 | 60          |                 rts                  
 862:000 | DONE wsp | na 16 16 |        |             |
 863:000 | DONE wsp | na 16 16 |        |             |
 864:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 865:000 | DONE cmt | na 16 16 |        |             | ; ! "STORE" ( n addr -- ) 9 bytes / X cycles
 866:000 | DONE cmt | na 16 16 |        |             | ; Save value at designated memory location
 867:000 | DONE lbl | na 16 16 | 0062b2 |             | xt_store                             
 868:000 | DONE dir | na 16 16 |        |             |         .!a16                        
 869:000 | DONE ins | na 16 16 | 0062b2 | b5 00       |                 lda.dx 00            NOS has value
 870:000 | DONE ins | na 16 16 | 0062b4 | 99 00 00    |                 sta.y 0000           
 871:000 | DONE wsp | na 16 16 |        |             |
 872:000 | DONE ins | na 16 16 | 0062b7 | b4 02       |                 ldy.dx 02            
 873:000 | DONE ins | na 16 16 | 0062b9 | e8          |                 inx                  
 874:000 | DONE ins | na 16 16 | 0062ba | e8          |                 inx                  
 875:000 | DONE ins | na 16 16 | 0062bb | e8          |                 inx                  
 876:000 | DONE ins | na 16 16 | 0062bc | e8          |                 inx                  
 877:000 | DONE wsp | na 16 16 |        |             |
 878:000 | DONE lbl | na 16 16 | 0062bd |             | z_store                              
 878:001 | DONE ins | na 16 16 | 0062bd | 60          |                 rts                  
 879:000 | DONE wsp | na 16 16 |        |             |
 880:000 | DONE wsp | na 16 16 |        |             |
 881:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 882:000 | DONE cmt | na 16 16 |        |             | ; @ "FETCH" ( addr -- n ) 4 bytes / 7-8 cycles
 883:000 | DONE cmt | na 16 16 |        |             | ; Get one cell (16 bit) value from given address
 884:000 | DONE lbl | na 16 16 | 0062be |             | xt_fetch                             
 885:000 | DONE ins | na 16 16 | 0062be | b9 00 00    |                 lda.y 0000           
 886:000 | DONE ins | na 16 16 | 0062c1 | a8          |                 tay                  
 887:000 | DONE wsp | na 16 16 |        |             |
 888:000 | DONE lbl | na 16 16 | 0062c2 |             | z_fetch                              
 888:001 | DONE ins | na 16 16 | 0062c2 | 60          |                 rts                  
 889:000 | DONE wsp | na 16 16 |        |             |
 890:000 | DONE wsp | na 16 16 |        |             |
 891:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 892:000 | DONE cmt | na 16 16 |        |             | ; ['] "BRACKET-TICK" ( -- ) X bytes / X cycles
 893:000 | DONE cmt | na 16 16 |        |             | ; Store xt of following word during compilation
 894:000 | DONE lbl | na 16 16 | 0062c3 |             | xt_brackettick                       
 895:000 | DONE ins | na 16 16 | 0062c3 | 20 db 63    |                 jsr 0063db           
 896:000 | DONE ins | na 16 16 | 0062c6 | 4c 68 68    |                 jmp 006868           JSR/RTS
 897:000 | DONE lbl | na 16 16 | 0062c9 |             | z_brackettick                        
 898:000 | DONE wsp | na 16 16 |        |             |
 899:000 | DONE wsp | na 16 16 |        |             |
 900:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 901:000 | DONE cmt | na 16 16 |        |             | ; [ "LEFTBRACKET" ( -- ) X bytes / X cycles
 902:000 | DONE cmt | na 16 16 |        |             | ; Enter the interpretation state. This is an immediate, compile-only word
 903:000 | DONE lbl | na 16 16 | 0062c9 |             | xt_leftbracket                       
 904:000 | DONE ins | na 16 16 | 0062c9 | 64 22       |                 stz.d 000222         
 905:000 | DONE lbl | na 16 16 | 0062cb |             | z_leftbracket                        
 905:001 | DONE ins | na 16 16 | 0062cb | 60          |                 rts                  
 906:000 | DONE wsp | na 16 16 |        |             |
 907:000 | DONE wsp | na 16 16 |        |             |
 908:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 909:000 | DONE cmt | na 16 16 |        |             | ; ] "RIGHTBRACKET" ( -- ) X bytes / X cycles
 910:000 | DONE cmt | na 16 16 |        |             | ; Enter the compile state. In theory, we should be able to get away with
 911:000 | DONE cmt | na 16 16 |        |             | ; a simple INC.A, but this is more error tolerant. For obvious reasons, this
 912:000 | DONE cmt | na 16 16 |        |             | ; cannot be COMPILE-ONLY, and native compile doesn't make much sense either
 913:000 | DONE lbl | na 16 16 | 0062cc |             | xt_rightbracket                      
 914:000 | DONE ins | na 16 16 | 0062cc | a9 01 00    |                 lda.# 0001           
 915:000 | DONE ins | na 16 16 | 0062cf | 85 22       |                 sta.d 000222         
 916:000 | DONE wsp | na 16 16 |        |             |
 917:000 | DONE lbl | na 16 16 | 0062d1 |             | z_rightbracket                       
 917:001 | DONE ins | na 16 16 | 0062d1 | 60          |                 rts                  
 918:000 | DONE wsp | na 16 16 |        |             |
 919:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 920:000 | DONE cmt | na 16 16 |        |             | ; [CHAR] "BRACKET-CHAR" ( "c" -- ) X bytes / X cycles
 921:000 | DONE cmt | na 16 16 |        |             | ; At compile time, compile the ASCII value of a character as a literal
 922:000 | DONE cmt | na 16 16 |        |             | ; This is an immediate, compile-only word. A definition given in
 923:000 | DONE cmt | na 16 16 |        |             | ; http://forth-standard.org/standard/implement is
 924:000 | DONE cmt | na 16 16 |        |             | ; : [CHAR] CHAR POSTPONE LITERAL ; IMMEDIATE
 925:000 | DONE cmt | na 16 16 |        |             | ; TODO decide if this is worth unrolling
 926:000 | DONE lbl | na 16 16 | 0062d2 |             | xt_bracketchar                       
 927:000 | DONE ins | na 16 16 | 0062d2 | 20 54 65    |                 jsr 006554           
 928:000 | DONE ins | na 16 16 | 0062d5 | 20 68 68    |                 jsr 006868           
 929:000 | DONE wsp | na 16 16 |        |             |
 930:000 | DONE lbl | na 16 16 | 0062d8 |             | z_bracketchar                        
 930:001 | DONE ins | na 16 16 | 0062d8 | 60          |                 rts                  
 931:000 | DONE wsp | na 16 16 |        |             |
 932:000 | DONE wsp | na 16 16 |        |             |
 933:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 934:000 | DONE cmt | na 16 16 |        |             | ; \ "BACKSLASH" ( -- ) 4 bytes / X cycles
 935:000 | DONE cmt | na 16 16 |        |             | ; Ignore rest of line as comment
 936:000 | DONE lbl | na 16 16 | 0062d9 |             | xt_backslash                         
 937:000 | DONE dir | na 16 16 |        |             |         .!a16                        
 938:000 | DONE cmt | na 16 16 |        |             |                 ; Advance >IN to end of the line
 939:000 | DONE ins | na 16 16 | 0062d9 | a5 1c       |                 lda.d 00021c         
 940:000 | DONE ins | na 16 16 | 0062db | 85 20       |                 sta.d 000220         
 941:000 | DONE wsp | na 16 16 |        |             |
 942:000 | DONE lbl | na 16 16 | 0062dd |             | z_backslash                          
 942:001 | DONE ins | na 16 16 | 0062dd | 60          |                 rts                  
 943:000 | DONE wsp | na 16 16 |        |             |
 944:000 | DONE wsp | na 16 16 |        |             |
 945:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 946:000 | DONE cmt | na 16 16 |        |             | ; + "PLUS" ( n m -- n+m ) 7 bytes / X cycles
 947:000 | DONE cmt | na 16 16 |        |             | ; Add TOS and NOS
 948:000 | DONE lbl | na 16 16 | 0062de |             | xt_plus                              
 949:000 | DONE dir | na 16 16 |        |             |         .!a16                        
 950:000 | DONE ins | na 16 16 | 0062de | 98          |                 tya                  
 951:000 | DONE ins | na 16 16 | 0062df | 18          |                 clc                  
 952:000 | DONE ins | na 16 16 | 0062e0 | 75 00       |                 adc.dx 00            
 953:000 | DONE ins | na 16 16 | 0062e2 | a8          |                 tay                  
 954:000 | DONE ins | na 16 16 | 0062e3 | e8          |                 inx                  
 955:000 | DONE ins | na 16 16 | 0062e4 | e8          |                 inx                  
 956:000 | DONE wsp | na 16 16 |        |             |
 957:000 | DONE lbl | na 16 16 | 0062e5 |             | z_plus                               
 957:001 | DONE ins | na 16 16 | 0062e5 | 60          |                 rts                  
 958:000 | DONE wsp | na 16 16 |        |             |
 959:000 | DONE wsp | na 16 16 |        |             |
 960:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 961:000 | DONE cmt | na 16 16 |        |             | ; - "MINUS" ( n m -- n-m ) 10 bytes / X cycles
 962:000 | DONE cmt | na 16 16 |        |             | ; Subtract NOS from TOS
 963:000 | DONE lbl | na 16 16 | 0062e6 |             | xt_minus                             
 964:000 | DONE dir | na 16 16 |        |             |         .!a16                        
 965:000 | DONE ins | na 16 16 | 0062e6 | 98          |                 tya                  
 966:000 | DONE ins | na 16 16 | 0062e7 | 49 ff ff    |                 eor.# 0ffff          
 967:000 | DONE wsp | na 16 16 |        |             |
 968:000 | DONE ins | na 16 16 | 0062ea | 38          |                 sec                  not CLC
 969:000 | DONE ins | na 16 16 | 0062eb | 75 00       |                 adc.dx 00            
 970:000 | DONE wsp | na 16 16 |        |             |
 971:000 | DONE ins | na 16 16 | 0062ed | a8          |                 tay                  
 972:000 | DONE ins | na 16 16 | 0062ee | e8          |                 inx                  
 973:000 | DONE ins | na 16 16 | 0062ef | e8          |                 inx                  
 974:000 | DONE wsp | na 16 16 |        |             |
 975:000 | DONE lbl | na 16 16 | 0062f0 |             | z_minus                              
 975:001 | DONE ins | na 16 16 | 0062f0 | 60          |                 rts                  
 976:000 | DONE wsp | na 16 16 |        |             |
 977:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 978:000 | DONE cmt | na 16 16 |        |             | ; -ROT ( a b c -- c a b )  X bytes / X cycles
 979:000 | DONE cmt | na 16 16 |        |             | ; Rotate top three entries of Data Stack upwards
 980:000 | DONE lbl | na 16 16 | 0062f1 |             | xt_mrot                              
 981:000 | DONE dir | na 16 16 |        |             |         .!a16                        
 982:000 | DONE dir | na 16 16 |        |             |         .!xy16                       
 983:000 | DONE ins | na 16 16 | 0062f1 | b5 02       |                 lda.dx 02            save a
 984:000 | DONE ins | na 16 16 | 0062f3 | 94 02       |                 sty.dx 02            move c to 3OS
 985:000 | DONE ins | na 16 16 | 0062f5 | b4 00       |                 ldy.dx 00            move b to TOS
 986:000 | DONE ins | na 16 16 | 0062f7 | 95 00       |                 sta.dx 00            save a as NOS
 987:000 | DONE wsp | na 16 16 |        |             |
 988:000 | DONE lbl | na 16 16 | 0062f9 |             | z_mrot                               
 988:001 | DONE ins | na 16 16 | 0062f9 | 60          |                 rts                  
 989:000 | DONE wsp | na 16 16 |        |             |
 990:000 | DONE wsp | na 16 16 |        |             |
 991:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 992:000 | DONE cmt | na 16 16 |        |             | ; -TRAILING ( addr u -- addr u ) X bytes / X cycles
 993:000 | DONE cmt | na 16 16 |        |             | ; Remove any trailing blanks. Uses tmp3
 994:000 | DONE lbl | na 16 16 | 0062fa |             | xt_dtrailing                         
 995:000 | DONE cmt | na 16 16 |        |             |                 ; if u is zero, just return string
 996:000 | DONE ins | na 16 16 | 0062fa | 98          |                 tya                  force flag check
 997:000 | DONE ins | na 16 16 | 0062fb | f0 13       |                 beq 006310           
 998:000 | DONE wsp | na 16 16 |        |             |
 999:000 | DONE ins | na 16 16 | 0062fd | b5 00       |                 lda.dx 00            
1000:000 | DONE ins | na 16 16 | 0062ff | 85 0e       |                 sta.d 00020e         
1001:000 | DONE ins | na 16 16 | 006301 | 88          |                 dey                  convert length to index
1002:000 | DONE ins | na 16 16 | 006302 | e2 20       |                 sep 20               
1002:001 | DONE ctl | na  8 16 |        |             |         .!a8
1003:000 | DONE wsp | na  8 16 |        |             |
1004:000 | DONE lbl | na  8 16 | 006304 |             | dtrailing_loop                       
1005:000 | DONE ins | na  8 16 | 006304 | b1 0e       |                 lda.diy 00020e       
1006:000 | DONE ins | na  8 16 | 006306 | c9 20       |                 cmp.# 20             
1007:000 | DONE ins | na  8 16 | 006308 | d0 03       |                 bne 00630d           
1008:000 | DONE ins | na  8 16 | 00630a | 88          |                 dey                  
1009:000 | DONE ins | na  8 16 | 00630b | 10 f7       |                 bpl 006304           fall through when done
1010:000 | DONE wsp | na  8 16 |        |             |
1011:000 | DONE lbl | na  8 16 | 00630d |             | dtrailing_done                       
1012:000 | DONE ins | na  8 16 | 00630d | c2 20       |                 rep 20               
1012:001 | DONE ctl | na 16 16 |        |             |         .!a16
1013:000 | DONE ins | na 16 16 | 00630f | c8          |                 iny                  convert index to length
1014:000 | DONE wsp | na 16 16 |        |             |
1015:000 | DONE lbl | na 16 16 | 006310 |             | z_dtrailing                          
1015:001 | DONE ins | na 16 16 | 006310 | 60          |                 rts                  
1016:000 | DONE wsp | na 16 16 |        |             |
1017:000 | DONE wsp | na 16 16 |        |             |
1018:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1019:000 | DONE cmt | na 16 16 |        |             | ; = "EQUAL" ( n m -- f ) 11 bytes / 18-20 cycles
1020:000 | DONE cmt | na 16 16 |        |             | ; See if TOS and NOS are the same
1021:000 | DONE lbl | na 16 16 | 006311 |             | xt_equal                             
1022:000 | DONE ins | na 16 16 | 006311 | 98          |                 tya                  
1023:000 | DONE ins | na 16 16 | 006312 | a0 00 00    |                 ldy.# 0000           default value is false
1024:000 | DONE wsp | na 16 16 |        |             |
1025:000 | DONE ins | na 16 16 | 006315 | d5 00       |                 cmp.dx 00            
1026:000 | DONE ins | na 16 16 | 006317 | d0 01       |                 bne 00631a           
1027:000 | DONE ins | na 16 16 | 006319 | 88          |                 dey                  wraps to 0FFFF (true)
1028:000 | DONE wsp | na 16 16 |        |             |
1029:000 | DONE lbl | na 16 16 | 00631a |             | equal_not                            
1030:000 | DONE ins | na 16 16 | 00631a | e8          |                 inx                  
1031:000 | DONE ins | na 16 16 | 00631b | e8          |                 inx                  
1032:000 | DONE wsp | na 16 16 |        |             |
1033:000 | DONE lbl | na 16 16 | 00631c |             | z_equal                              
1033:001 | DONE ins | na 16 16 | 00631c | 60          |                 rts                  
1034:000 | DONE wsp | na 16 16 |        |             |
1035:000 | DONE wsp | na 16 16 |        |             |
1036:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1037:000 | DONE cmt | na 16 16 |        |             | ; 0 "ZERO" ( -- 0 ) 7 bytes / 12 cycles
1038:000 | DONE cmt | na 16 16 |        |             | ; Pushes the number 0000 on the Data Stack
1039:000 | DONE lbl | na 16 16 | 00631d |             | xt_zero                              
1040:000 | DONE dir | na 16 16 |        |             |         .!xy16                       
1041:000 | DONE ins | na 16 16 | 00631d | ca          |                 dex                  
1042:000 | DONE ins | na 16 16 | 00631e | ca          |                 dex                  
1043:000 | DONE ins | na 16 16 | 00631f | 94 00       |                 sty.dx 00            
1044:000 | DONE ins | na 16 16 | 006321 | a0 00 00    |                 ldy.# 0000           
1045:000 | DONE wsp | na 16 16 |        |             |
1046:000 | DONE lbl | na 16 16 | 006324 |             | z_zero                               
1046:001 | DONE ins | na 16 16 | 006324 | 60          |                 rts                  
1047:000 | DONE wsp | na 16 16 |        |             |
1048:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1049:000 | DONE cmt | na 16 16 |        |             | ; 0= "ZERO-EQUAL" ( n -- f ) X bytes / X cycles
1050:000 | DONE cmt | na 16 16 |        |             | ; Return the true flag if TOS is zero
1051:000 | DONE lbl | na 16 16 | 006325 |             | xt_zero-equal                        
1052:000 | DONE dir | na 16 16 |        |             |         .!a16                        
1053:000 | DONE ins | na 16 16 | 006325 | 98          |                 tya                  force flag check
1054:000 | DONE ins | na 16 16 | 006326 | d0 05       |                 bne 00632d           
1055:000 | DONE wsp | na 16 16 |        |             |
1056:000 | DONE ins | na 16 16 | 006328 | a0 ff ff    |                 ldy.# 0ffff          
1057:000 | DONE ins | na 16 16 | 00632b | 80 03       |                 bra 006330           
1058:000 | DONE lbl | na 16 16 | 00632d |             | ze_not_zero                          
1059:000 | DONE ins | na 16 16 | 00632d | a0 00 00    |                 ldy.# 0000           
1060:000 | DONE wsp | na 16 16 |        |             |
1061:000 | DONE lbl | na 16 16 | 006330 |             | z_zero-equal                         
1061:001 | DONE ins | na 16 16 | 006330 | 60          |                 rts                  
1062:000 | DONE wsp | na 16 16 |        |             |
1063:000 | DONE wsp | na 16 16 |        |             |
1064:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1065:000 | DONE cmt | na 16 16 |        |             | ; 0< "ZERO-LESS" ( n -- f ) 11 bytes / X cycles
1066:000 | DONE cmt | na 16 16 |        |             | ; Return the true flag if TOS is less than zero
1067:000 | DONE lbl | na 16 16 | 006331 |             | xt_zero-less                         
1068:000 | DONE dir | na 16 16 |        |             |         .!a16                        
1069:000 | DONE ins | na 16 16 | 006331 | 98          |                 tya                  force flag check
1070:000 | DONE ins | na 16 16 | 006332 | 30 05       |                 bmi 006339           
1071:000 | DONE wsp | na 16 16 |        |             |
1072:000 | DONE ins | na 16 16 | 006334 | a0 00 00    |                 ldy.# 0000           
1073:000 | DONE ins | na 16 16 | 006337 | 80 03       |                 bra 00633c           
1074:000 | DONE wsp | na 16 16 |        |             |
1075:000 | DONE lbl | na 16 16 | 006339 |             | zero-less-is-less                    
1076:000 | DONE ins | na 16 16 | 006339 | a0 ff ff    |                 ldy.# 0ffff          
1077:000 | DONE wsp | na 16 16 |        |             |
1078:000 | DONE lbl | na 16 16 | 00633c |             | z_zero-less                          
1078:001 | DONE ins | na 16 16 | 00633c | 60          |                 rts                  
1079:000 | DONE wsp | na 16 16 |        |             |
1080:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1081:000 | DONE cmt | na 16 16 |        |             | ; 0<> "ZERO-NOTEQUAL" ( n -- f ) 11 bytes / X cycles
1082:000 | DONE cmt | na 16 16 |        |             | ; Return the true flag if TOS is not zero
1083:000 | DONE lbl | na 16 16 | 00633d |             | xt_zero-notequal                     
1084:000 | DONE dir | na 16 16 |        |             |         .!a16                        
1085:000 | DONE ins | na 16 16 | 00633d | 98          |                 tya                  force flag check
1086:000 | DONE ins | na 16 16 | 00633e | f0 05       |                 beq 006345           
1087:000 | DONE ins | na 16 16 | 006340 | a0 ff ff    |                 ldy.# 0ffff          
1088:000 | DONE ins | na 16 16 | 006343 | 80 03       |                 bra 006348           
1089:000 | DONE lbl | na 16 16 | 006345 |             | zne_is_zero                          
1090:000 | DONE ins | na 16 16 | 006345 | a0 00 00    |                 ldy.# 0000           
1091:000 | DONE lbl | na 16 16 | 006348 |             | z_zero-notequal                      
1092:000 | DONE ins | na 16 16 | 006348 | 60          |                 rts                  
1093:000 | DONE wsp | na 16 16 |        |             |
1094:000 | DONE wsp | na 16 16 |        |             |
1095:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1096:000 | DONE cmt | na 16 16 |        |             | ; 0> "ZERO-MORE" ( n -- f ) X bytes / X cycles
1097:000 | DONE cmt | na 16 16 |        |             | ; Return the true flag if TOS is more than zero
1098:000 | DONE lbl | na 16 16 | 006349 |             | xt_zero-more                         
1099:000 | DONE dir | na 16 16 |        |             |         .!a16                        
1100:000 | DONE ins | na 16 16 | 006349 | a9 00 00    |                 lda.# 0000           default is false
1101:000 | DONE wsp | na 16 16 |        |             |
1102:000 | DONE ins | na 16 16 | 00634c | 88          |                 dey                  
1103:000 | DONE ins | na 16 16 | 00634d | 10 02       |                 bpl 006351           was at least 1
1104:000 | DONE wsp | na 16 16 |        |             |
1105:000 | DONE ins | na 16 16 | 00634f | 80 01       |                 bra 006352           nope, stays false
1106:000 | DONE wsp | na 16 16 |        |             |
1107:000 | DONE lbl | na 16 16 | 006351 |             | zero-more_true                       
1108:000 | DONE ins | na 16 16 | 006351 | 3a          |                 dec.a                wraps to 0ffff, true
1109:000 | DONE lbl | na 16 16 | 006352 |             | zero-more_done                       
1110:000 | DONE ins | na 16 16 | 006352 | a8          |                 tay                  
1111:000 | DONE wsp | na 16 16 |        |             |
1112:000 | DONE lbl | na 16 16 | 006353 |             | z_zero-more                          
1112:001 | DONE ins | na 16 16 | 006353 | 60          |                 rts                  
1113:000 | DONE wsp | na 16 16 |        |             |
1114:000 | DONE wsp | na 16 16 |        |             |
1115:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1116:000 | DONE cmt | na 16 16 |        |             | ; 0BRANCH ( 0 | f -- ) X bytes / X cycles
1117:000 | DONE cmt | na 16 16 |        |             | ; Branch if TOS is zero. This exects the next two bytes to be the address of
1118:000 | DONE cmt | na 16 16 |        |             | ; where to branch to if the test fails. The code may not be natively compiled
1119:000 | DONE cmt | na 16 16 |        |             | ; because we need the return address provided by JSR's push to the Return Stack
1120:000 | DONE cmt | na 16 16 |        |             | ; This routine uses tmpbranch
1121:000 | DONE lbl | na 16 16 | 006354 |             | xt_zbranch                           
1122:000 | DONE dir | na 16 16 |        |             |         .!a16                        
1123:000 | DONE cmt | na 16 16 |        |             |                 ; encode subroutine jump to run time code
1124:000 | DONE ins | na 16 16 | 006354 | f4 5b 63    |                 phe.# 00635b         
1125:000 | DONE ins | na 16 16 | 006357 | 20 dc 75    |                 jsr 0075dc           
1126:000 | DONE wsp | na 16 16 |        |             |
1127:000 | DONE lbl | na 16 16 | 00635a |             | z_zbranch                            
1127:001 | DONE ins | na 16 16 | 00635a | 60          |                 rts                  
1128:000 | DONE wsp | na 16 16 |        |             |
1129:000 | DONE lbl | na 16 16 | 00635b |             | zbranch_rt                           
1130:000 | DONE cmt | na 16 16 |        |             |                 ; See if the flag is zero, which is the whole purpose of this
1131:000 | DONE cmt | na 16 16 |        |             |                 ; operation after all
1132:000 | DONE ins | na 16 16 | 00635b | 98          |                 tya                  force flag check
1133:000 | DONE ins | na 16 16 | 00635c | f0 05       |                 beq 006363           flag is false (zero), so we branch
1134:000 | DONE wsp | na 16 16 |        |             |
1135:000 | DONE cmt | na 16 16 |        |             |                 ; Flag is TRUE, so we skip over the next two bytes. Put
1136:000 | DONE cmt | na 16 16 |        |             |                 ; differently, this is the part between IF and THEN
1137:000 | DONE ins | na 16 16 | 00635e | 68          |                 pla                  
1138:000 | DONE ins | na 16 16 | 00635f | 1a          |                 inc.a                
1139:000 | DONE ins | na 16 16 | 006360 | 1a          |                 inc.a                
1140:000 | DONE wsp | na 16 16 |        |             |
1141:000 | DONE ins | na 16 16 | 006361 | 80 09       |                 bra 00636c           
1142:000 | DONE wsp | na 16 16 |        |             |
1143:000 | DONE lbl | na 16 16 | 006363 |             | zb_zero                              
1144:000 | DONE cmt | na 16 16 |        |             |                 ; Flag is FALSE, so we take the dump to the address given in the
1145:000 | DONE cmt | na 16 16 |        |             |                 ; next two bytes. We don't need Y anymore, so we can use it for
1146:000 | DONE cmt | na 16 16 |        |             |                 ; indexing
1147:000 | DONE ins | na 16 16 | 006363 | 68          |                 pla                  
1148:000 | DONE ins | na 16 16 | 006364 | 85 08       |                 sta.d 000208         
1149:000 | DONE ins | na 16 16 | 006366 | a0 01 00    |                 ldy.# 0001           
1150:000 | DONE ins | na 16 16 | 006369 | b1 08       |                 lda.diy 000208       
1151:000 | DONE wsp | na 16 16 |        |             |
1152:000 | DONE cmt | na 16 16 |        |             |                 ; Subtract one from the address given becasue of the RTS
1153:000 | DONE cmt | na 16 16 |        |             |                 ; mechanics
1154:000 | DONE ins | na 16 16 | 00636b | 3a          |                 dec.a                
1155:000 | DONE wsp | na 16 16 |        |             |
1156:000 | DONE lbl | na 16 16 | 00636c |             | zb_done                              
1157:000 | DONE cmt | na 16 16 |        |             |                 ; One we or another, this is where we're going to jump to
1158:000 | DONE ins | na 16 16 | 00636c | 48          |                 pha                  
1159:000 | DONE wsp | na 16 16 |        |             |
1160:000 | DONE cmt | na 16 16 |        |             |                 ; Clean up the Data Stack and jump
1161:000 | DONE ins | na 16 16 | 00636d | b4 00       |                 ldy.dx 00            
1162:000 | DONE ins | na 16 16 | 00636f | e8          |                 inx                  
1163:000 | DONE ins | na 16 16 | 006370 | e8          |                 inx                  
1164:000 | DONE wsp | na 16 16 |        |             |
1165:000 | DONE ins | na 16 16 | 006371 | 60          |                 rts                  
1166:000 | DONE wsp | na 16 16 |        |             |
1167:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1168:000 | DONE cmt | na 16 16 |        |             | ; 1 "ONE" ( -- 1 ) 7 bytes / 12 cycles
1169:000 | DONE cmt | na 16 16 |        |             | ; Pushes the number 1 on the Data Stack
1170:000 | DONE lbl | na 16 16 | 006372 |             | xt_one                               
1171:000 | DONE dir | na 16 16 |        |             |         .!xy16                       
1172:000 | DONE ins | na 16 16 | 006372 | ca          |                 dex                  
1173:000 | DONE ins | na 16 16 | 006373 | ca          |                 dex                  
1174:000 | DONE ins | na 16 16 | 006374 | 94 00       |                 sty.dx 00            
1175:000 | DONE ins | na 16 16 | 006376 | a0 01 00    |                 ldy.# 0001           
1176:000 | DONE wsp | na 16 16 |        |             |
1177:000 | DONE lbl | na 16 16 | 006379 |             | z_one                                
1177:001 | DONE ins | na 16 16 | 006379 | 60          |                 rts                  
1178:000 | DONE wsp | na 16 16 |        |             |
1179:000 | DONE wsp | na 16 16 |        |             |
1180:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1181:000 | DONE cmt | na 16 16 |        |             | ; 1- "ONE-MINUS" ( n -- n-1 ) 1 byte / 2 cycles
1182:000 | DONE cmt | na 16 16 |        |             | ; Subtract 1 from Top of Stack (TOS). Because there is no checking if there is
1183:000 | DONE cmt | na 16 16 |        |             | ; actually anything on the Data Stack, this routine will fail silently if the
1184:000 | DONE cmt | na 16 16 |        |             | ; stack is empty
1185:000 | DONE lbl | na 16 16 | 00637a |             | xt_one-minus                         
1186:000 | DONE dir | na 16 16 |        |             |         .!xy16                       
1187:000 | DONE ins | na 16 16 | 00637a | 88          |                 dey                  
1188:000 | DONE lbl | na 16 16 | 00637b |             | z_one-minus                          
1188:001 | DONE ins | na 16 16 | 00637b | 60          |                 rts                  
1189:000 | DONE wsp | na 16 16 |        |             |
1190:000 | DONE wsp | na 16 16 |        |             |
1191:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1192:000 | DONE cmt | na 16 16 |        |             | ; 1+ "ONE-PLUS" ( n -- n+1 ) 1 byte / 2 cycles
1193:000 | DONE cmt | na 16 16 |        |             | ; Add 1 to TOS. Because there is no checking if there is actually anything on
1194:000 | DONE cmt | na 16 16 |        |             | ; the Data Stack, this routine will fail silently if the stack is empty
1195:000 | DONE lbl | na 16 16 | 00637c |             | xt_one-plus                          
1196:000 | DONE dir | na 16 16 |        |             |         .!xy16                       
1197:000 | DONE ins | na 16 16 | 00637c | c8          |                 iny                  
1198:000 | DONE lbl | na 16 16 | 00637d |             | z_one-plus                           
1198:001 | DONE ins | na 16 16 | 00637d | 60          |                 rts                  
1199:000 | DONE wsp | na 16 16 |        |             |
1200:000 | DONE wsp | na 16 16 |        |             |
1201:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1202:000 | DONE cmt | na 16 16 |        |             | ; 2 "TWO" ( -- 2 ) 7 bytes / 12 cycles
1203:000 | DONE cmt | na 16 16 |        |             | ; Pushes the number 2 on the Data Stack
1204:000 | DONE lbl | na 16 16 | 00637e |             | xt_two                               
1205:000 | DONE dir | na 16 16 |        |             |         .!xy16                       
1206:000 | DONE ins | na 16 16 | 00637e | ca          |                 dex                  
1207:000 | DONE ins | na 16 16 | 00637f | ca          |                 dex                  
1208:000 | DONE ins | na 16 16 | 006380 | 94 00       |                 sty.dx 00            
1209:000 | DONE ins | na 16 16 | 006382 | a0 02 00    |                 ldy.# 0002           
1210:000 | DONE wsp | na 16 16 |        |             |
1211:000 | DONE lbl | na 16 16 | 006385 |             | z_two                                
1211:001 | DONE ins | na 16 16 | 006385 | 60          |                 rts                  
1212:000 | DONE wsp | na 16 16 |        |             |
1213:000 | DONE wsp | na 16 16 |        |             |
1214:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1215:000 | DONE cmt | na 16 16 |        |             | ; 2* "TWO-STAR" ( n -- 2*n ) 3 bytes / 6 cycles
1216:000 | DONE cmt | na 16 16 |        |             | ; Multiply Top of Stack (TOS) by 2. This is also used by CELLS
1217:000 | DONE lbl | na 16 16 | 006386 |             | xt_two-star                          
1218:000 | DONE dir | na 16 16 |        |             |         .!a16                        
1219:000 | DONE dir | na 16 16 |        |             |         .!xy16                       
1220:000 | DONE ins | na 16 16 | 006386 | 98          |                 tya                  
1221:000 | DONE ins | na 16 16 | 006387 | 0a          |                 asl.a                
1222:000 | DONE ins | na 16 16 | 006388 | a8          |                 tay                  
1223:000 | DONE wsp | na 16 16 |        |             |
1224:000 | DONE lbl | na 16 16 | 006389 |             | z_two-star                           
1224:001 | DONE ins | na 16 16 | 006389 | 60          |                 rts                  
1225:000 | DONE wsp | na 16 16 |        |             |
1226:000 | DONE wsp | na 16 16 |        |             |
1227:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1228:000 | DONE cmt | na 16 16 |        |             | ; 2DROP ( n m -- ) 6 bytes / 13 cycles
1229:000 | DONE cmt | na 16 16 |        |             | ; Drop first two entries of Data Stack
1230:000 | DONE lbl | na 16 16 | 00638a |             | xt_2drop                             
1231:000 | DONE ins | na 16 16 | 00638a | b4 02       |                 ldy.dx 02            
1232:000 | DONE ins | na 16 16 | 00638c | e8          |                 inx                  
1233:000 | DONE ins | na 16 16 | 00638d | e8          |                 inx                  
1234:000 | DONE ins | na 16 16 | 00638e | e8          |                 inx                  
1235:000 | DONE ins | na 16 16 | 00638f | e8          |                 inx                  
1236:000 | DONE wsp | na 16 16 |        |             |
1237:000 | DONE lbl | na 16 16 | 006390 |             | z_2drop                              
1237:001 | DONE ins | na 16 16 | 006390 | 60          |                 rts                  
1238:000 | DONE wsp | na 16 16 |        |             |
1239:000 | DONE wsp | na 16 16 |        |             |
1240:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1241:000 | DONE cmt | na 16 16 |        |             | ; 2DUP ( n m -- n m n m ) 10 bytes / 23 cycles
1242:000 | DONE cmt | na 16 16 |        |             | ; Duplicated the top two data stack entries
1243:000 | DONE wsp | na 16 16 |        |             |
1244:000 | DONE lbl | na 16 16 | 006391 |             | xt_2dup                              
1245:000 | DONE dir | na 16 16 |        |             |         .!xy16                       
1246:000 | DONE ins | na 16 16 | 006391 | ca          |                 dex                  
1247:000 | DONE ins | na 16 16 | 006392 | ca          |                 dex                  
1248:000 | DONE ins | na 16 16 | 006393 | ca          |                 dex                  
1249:000 | DONE ins | na 16 16 | 006394 | ca          |                 dex                  
1250:000 | DONE ins | na 16 16 | 006395 | 94 02       |                 sty.dx 02            
1251:000 | DONE ins | na 16 16 | 006397 | b5 04       |                 lda.dx 04            
1252:000 | DONE ins | na 16 16 | 006399 | 95 00       |                 sta.dx 00            
1253:000 | DONE wsp | na 16 16 |        |             |
1254:000 | DONE lbl | na 16 16 | 00639b |             | z_2dup                               
1254:001 | DONE ins | na 16 16 | 00639b | 60          |                 rts                  
1255:000 | DONE wsp | na 16 16 |        |             |
1256:000 | DONE wsp | na 16 16 |        |             |
1257:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1258:000 | DONE cmt | na 16 16 |        |             | ; 2OVER ( d1 d2 -- d1 d2 d1 ) X bytes / X cycles
1259:000 | DONE cmt | na 16 16 |        |             | ; Copy cell pair that is NOS to TOS
1260:000 | DONE lbl | na 16 16 | 00639c |             | xt_2over                             
1261:000 | DONE ins | na 16 16 | 00639c | ca          |                 dex                  
1262:000 | DONE ins | na 16 16 | 00639d | ca          |                 dex                  
1263:000 | DONE ins | na 16 16 | 00639e | ca          |                 dex                  
1264:000 | DONE ins | na 16 16 | 00639f | ca          |                 dex                  
1265:000 | DONE ins | na 16 16 | 0063a0 | 94 02       |                 sty.dx 02            
1266:000 | DONE ins | na 16 16 | 0063a2 | b4 06       |                 ldy.dx 06            
1267:000 | DONE ins | na 16 16 | 0063a4 | b5 08       |                 lda.dx 08            
1268:000 | DONE ins | na 16 16 | 0063a6 | 95 00       |                 sta.dx 00            
1269:000 | DONE wsp | na 16 16 |        |             |
1270:000 | DONE lbl | na 16 16 | 0063a8 |             | z_2over                              
1270:001 | DONE ins | na 16 16 | 0063a8 | 60          |                 rts                  
1271:000 | DONE wsp | na 16 16 |        |             |
1272:000 | DONE wsp | na 16 16 |        |             |
1273:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1274:000 | DONE cmt | na 16 16 |        |             | ; 2R@ ( -- n1 n2 )(R: n1 n2 -- n1 n2 )  X bytes / X cycles
1275:000 | DONE cmt | na 16 16 |        |             | ; Copy two words off the Return Stack.  This is R> R> 2DUP >R >R SWAP but we
1276:000 | DONE cmt | na 16 16 |        |             | ; can do this a lot faster in assembler This routine may not be natively
1277:000 | DONE cmt | na 16 16 |        |             | ; compiled; because it accessed by a JSR, the first element on the Return Stack
1278:000 | DONE cmt | na 16 16 |        |             | ; (LDA.S 01) is the return address.
1279:000 | DONE lbl | na 16 16 | 0063a9 |             | xt_tworfetch                         
1280:000 | DONE cmt | na 16 16 |        |             |                 ; make room on the Data Stack
1281:000 | DONE ins | na 16 16 | 0063a9 | ca          |                 dex                  
1282:000 | DONE ins | na 16 16 | 0063aa | ca          |                 dex                  
1283:000 | DONE ins | na 16 16 | 0063ab | ca          |                 dex                  
1284:000 | DONE ins | na 16 16 | 0063ac | ca          |                 dex                  
1285:000 | DONE ins | na 16 16 | 0063ad | 94 02       |                 sty.dx 02            
1286:000 | DONE wsp | na 16 16 |        |             |
1287:000 | DONE ins | na 16 16 | 0063af | a3 03       |                 lda.s 03             get top of Return Stack
1288:000 | DONE ins | na 16 16 | 0063b1 | a8          |                 tay                  
1289:000 | DONE ins | na 16 16 | 0063b2 | a3 05       |                 lda.s 05             get next on Return Stack
1290:000 | DONE ins | na 16 16 | 0063b4 | 95 00       |                 sta.dx 00            
1291:000 | DONE wsp | na 16 16 |        |             |
1292:000 | DONE lbl | na 16 16 | 0063b6 |             | z_tworfetch                          
1292:001 | DONE ins | na 16 16 | 0063b6 | 60          |                 rts                  
1293:000 | DONE wsp | na 16 16 |        |             |
1294:000 | DONE wsp | na 16 16 |        |             |
1295:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1296:000 | DONE cmt | na 16 16 |        |             | ; 2SWAP ( d1 d2 -- d2 d1 ) X bytes / X cycles
1297:000 | DONE cmt | na 16 16 |        |             | ; Swap two double cell numbers on the Data Stack.
1298:000 | DONE lbl | na 16 16 | 0063b7 |             | xt_2swap                             
1299:000 | DONE ins | na 16 16 | 0063b7 | 5a          |                 phy                  hi word of TOS
1300:000 | DONE ins | na 16 16 | 0063b8 | b4 02       |                 ldy.dx 02            hi word of NOS
1301:000 | DONE ins | na 16 16 | 0063ba | 68          |                 pla                  
1302:000 | DONE ins | na 16 16 | 0063bb | 95 02       |                 sta.dx 02            
1303:000 | DONE wsp | na 16 16 |        |             |
1304:000 | DONE ins | na 16 16 | 0063bd | b5 00       |                 lda.dx 00            lo word of TOS
1305:000 | DONE ins | na 16 16 | 0063bf | 48          |                 pha                  
1306:000 | DONE ins | na 16 16 | 0063c0 | b5 04       |                 lda.dx 04            lo word of NOS
1307:000 | DONE ins | na 16 16 | 0063c2 | 95 00       |                 sta.dx 00            
1308:000 | DONE ins | na 16 16 | 0063c4 | 68          |                 pla                  
1309:000 | DONE ins | na 16 16 | 0063c5 | 95 04       |                 sta.dx 04            
1310:000 | DONE wsp | na 16 16 |        |             |
1311:000 | DONE lbl | na 16 16 | 0063c7 |             | z_2swap                              
1311:001 | DONE ins | na 16 16 | 0063c7 | 60          |                 rts                  
1312:000 | DONE wsp | na 16 16 |        |             |
1313:000 | DONE wsp | na 16 16 |        |             |
1314:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1315:000 | DONE cmt | na 16 16 |        |             | ; 2VARIABLE ( "name" -- ) X bytes / X cycles
1316:000 | DONE cmt | na 16 16 |        |             | ; Create a variable with space for a double celled word. This can be realized in
1317:000 | DONE cmt | na 16 16 |        |             | ; Forth as either CREATE 2 CELLS ALLOT or just CREATE 0 , 0 ,
1318:000 | DONE cmt | na 16 16 |        |             | ; We use the second variant, letting CREATE do the hard work
1319:000 | DONE cmt | na 16 16 |        |             | ; TODO see if it is faster to use Y as an index and increase by four
1320:000 | DONE lbl | na 16 16 | 0063c8 |             | xt_2variable                         
1321:000 | DONE dir | na 16 16 |        |             |         .!a16                        
1322:000 | DONE ins | na 16 16 | 0063c8 | 20 bd 65    |                 jsr 0065bd           
1323:000 | DONE wsp | na 16 16 |        |             |
1324:000 | DONE ins | na 16 16 | 0063cb | a9 00 00    |                 lda.# 0000           
1325:000 | DONE ins | na 16 16 | 0063ce | 92 28       |                 sta.di 000228        
1326:000 | DONE ins | na 16 16 | 0063d0 | e6 28       |                 inc.d 000228         
1327:000 | DONE ins | na 16 16 | 0063d2 | e6 28       |                 inc.d 000228         
1328:000 | DONE ins | na 16 16 | 0063d4 | 92 28       |                 sta.di 000228        
1329:000 | DONE ins | na 16 16 | 0063d6 | e6 28       |                 inc.d 000228         
1330:000 | DONE ins | na 16 16 | 0063d8 | e6 28       |                 inc.d 000228         
1331:000 | DONE wsp | na 16 16 |        |             |
1332:000 | DONE lbl | na 16 16 | 0063da |             | z_2variable                          
1332:001 | DONE ins | na 16 16 | 0063da | 60          |                 rts                  
1333:000 | DONE wsp | na 16 16 |        |             |
1334:000 | DONE wsp | na 16 16 |        |             |
1335:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1336:000 | DONE cmt | na 16 16 |        |             | ; ' "TICK" ( "string" -- xt ) X bytes / X cycles
1337:000 | DONE cmt | na 16 16 |        |             | ; Given a string with the name of a word, return the word's execution token (xt)
1338:000 | DONE cmt | na 16 16 |        |             | ; Abort if not found
1339:000 | DONE lbl | na 16 16 | 0063db |             | xt_tick                              
1340:000 | DONE ins | na 16 16 | 0063db | 20 ea 69    |                 jsr 0069ea           ( -- addr u )
1341:000 | DONE wsp | na 16 16 |        |             |
1342:000 | DONE cmt | na 16 16 |        |             |                 ; if we got a zero, complain and abort
1343:000 | DONE ins | na 16 16 | 0063de | 98          |                 tya                  force flag check
1344:000 | DONE ins | na 16 16 | 0063df | d0 06       |                 bne 0063e7           
1345:000 | DONE wsp | na 16 16 |        |             |
1346:000 | DONE ins | na 16 16 | 0063e1 | a9 f3 7b    |                 lda.# 007bf3         
1347:000 | DONE ins | na 16 16 | 0063e4 | 4c fd 75    |                 jmp 0075fd           
1348:000 | DONE wsp | na 16 16 |        |             |
1349:000 | DONE lbl | na 16 16 | 0063e7 |             | tick_have_word                       
1350:000 | DONE ins | na 16 16 | 0063e7 | 20 7b 67    |                 jsr 00677b           ( addr u -- nt)
1351:000 | DONE ins | na 16 16 | 0063ea | 98          |                 tya                  force flag check
1352:000 | DONE wsp | na 16 16 |        |             |
1353:000 | DONE cmt | na 16 16 |        |             |                 ; if we didn't find string in the dictionary, complain and abort
1354:000 | DONE ins | na 16 16 | 0063eb | d0 06       |                 bne 0063f3           
1355:000 | DONE wsp | na 16 16 |        |             |
1356:000 | DONE ins | na 16 16 | 0063ed | a9 90 7c    |                 lda.# 007c90         
1357:000 | DONE ins | na 16 16 | 0063f0 | 4c fd 75    |                 jmp 0075fd           
1358:000 | DONE wsp | na 16 16 |        |             |
1359:000 | DONE lbl | na 16 16 | 0063f3 |             | tick_have_nt                         
1360:000 | DONE ins | na 16 16 | 0063f3 | 20 12 69    |                 jsr 006912           ( nt -- xt )
1361:000 | DONE wsp | na 16 16 |        |             |
1362:000 | DONE lbl | na 16 16 | 0063f6 |             | z_tick                               
1362:001 | DONE ins | na 16 16 | 0063f6 | 60          |                 rts                  
1363:000 | DONE wsp | na 16 16 |        |             |
1364:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1365:000 | DONE cmt | na 16 16 |        |             | ; ABORT" "ABORTQ" ( "string" -- ) X bytes / X cycles
1366:000 | DONE cmt | na 16 16 |        |             | ; If flag on TOS is not false, print error message and abort. This a compile-only word
1367:000 | DONE lbl | na 16 16 | 0063f7 |             | xt_abortq                            
1368:000 | DONE dir | na 16 16 |        |             |         .!a16                        
1369:000 | DONE ins | na 16 16 | 0063f7 | 20 04 6b    |                 jsr 006b04           save string
1370:000 | DONE wsp | na 16 16 |        |             |
1371:000 | DONE ins | na 16 16 | 0063fa | f4 01 64    |                 phe.# 006401         compile run-time aspect
1372:000 | DONE ins | na 16 16 | 0063fd | 20 dc 75    |                 jsr 0075dc           
1373:000 | DONE wsp | na 16 16 |        |             |
1374:000 | DONE ins | na 16 16 | 006400 | 60          |                 rts                  
1375:000 | DONE wsp | na 16 16 |        |             |
1376:000 | DONE lbl | na 16 16 | 006401 |             | abortq_rt                            
1377:000 | DONE cmt | na 16 16 |        |             |                 ; we land here with ( f addr u )
1378:000 | DONE ins | na 16 16 | 006401 | b5 02       |                 lda.dx 02            get flag as 3OS
1379:000 | DONE ins | na 16 16 | 006403 | f0 06       |                 beq 00640b           if FALSE, we're done
1380:000 | DONE wsp | na 16 16 |        |             |
1381:000 | DONE cmt | na 16 16 |        |             |                 ; if TRUE, we print string and ABORT
1382:000 | DONE cmt | na 16 16 |        |             |                 ; TODO see if we want to inform user we're aborting
1383:000 | DONE ins | na 16 16 | 006405 | 20 62 6c    |                 jsr 006c62           
1384:000 | DONE ins | na 16 16 | 006408 | 4c 97 60    |                 jmp 006097           not JSR because we never come back
1385:000 | DONE wsp | na 16 16 |        |             |
1386:000 | DONE lbl | na 16 16 | 00640b |             | abortq_done                          
1387:000 | DONE cmt | na 16 16 |        |             |                 ; drop the three entries from the Data Stack
1388:000 | DONE ins | na 16 16 | 00640b | b4 04       |                 ldy.dx 04            fourth on the stack
1389:000 | DONE wsp | na 16 16 |        |             |
1390:000 | DONE cmt | na 16 16 |        |             |                 ; this is the same size, but three cycles faster than six INX
1391:000 | DONE cmt | na 16 16 |        |             |                 ; instructions
1392:000 | DONE ins | na 16 16 | 00640d | 8a          |                 txa                  
1393:000 | DONE ins | na 16 16 | 00640e | 18          |                 clc                  
1394:000 | DONE ins | na 16 16 | 00640f | 69 06 00    |                 adc.# 0006           
1395:000 | DONE ins | na 16 16 | 006412 | aa          |                 tax                  
1396:000 | DONE wsp | na 16 16 |        |             |
1397:000 | DONE lbl | na 16 16 | 006413 |             | z_abortq                             
1397:001 | DONE ins | na 16 16 | 006413 | 60          |                 rts                  
1398:000 | DONE wsp | na 16 16 |        |             |
1399:000 | DONE wsp | na 16 16 |        |             |
1400:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1401:000 | DONE cmt | na 16 16 |        |             | ; ABS ( n -- u ) 8 bytes / X cycles
1402:000 | DONE cmt | na 16 16 |        |             | ; Return the absolute value of a single number
1403:000 | DONE lbl | na 16 16 | 006414 |             | xt_abs                               
1404:000 | DONE dir | na 16 16 |        |             |         .!a16                        
1405:000 | DONE dir | na 16 16 |        |             |         .!xy16                       
1406:000 | DONE ins | na 16 16 | 006414 | 98          |                 tya                  force flag test
1407:000 | DONE ins | na 16 16 | 006415 | 10 05       |                 bpl 00641c           positive number is easy
1408:000 | DONE wsp | na 16 16 |        |             |
1409:000 | DONE cmt | na 16 16 |        |             |                 ; negative: Calculate 0-n
1410:000 | DONE ins | na 16 16 | 006417 | 49 ff ff    |                 eor.# 0ffff          
1411:000 | DONE ins | na 16 16 | 00641a | 1a          |                 inc.a                
1412:000 | DONE ins | na 16 16 | 00641b | a8          |                 tay                  
1413:000 | DONE wsp | na 16 16 |        |             |
1414:000 | DONE lbl | na 16 16 | 00641c |             | z_abs                                
1414:001 | DONE ins | na 16 16 | 00641c | 60          |                 rts                  
1415:000 | DONE wsp | na 16 16 |        |             |
1416:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1417:000 | DONE cmt | na 16 16 |        |             | ; ACCEPT ( addr n1 -- n2 ) X bytes / X cycles
1418:000 | DONE cmt | na 16 16 |        |             | ; Receive a string of at most n1 characters, placing them at addr. Return the
1419:000 | DONE cmt | na 16 16 |        |             | ; actual number of characters as n2. Characters are echoed as they are received.
1420:000 | DONE cmt | na 16 16 |        |             | ; ACCEPT is called by REFILL these days.
1421:000 | DONE lbl | na 16 16 | 00641d |             | xt_accept                            
1422:000 | DONE cmt | na 16 16 |        |             |                 ; Set up loop
1423:000 | DONE ins | na 16 16 | 00641d | 98          |                 tya                  force flag test
1424:000 | DONE ins | na 16 16 | 00641e | d0 03       |                 bne 006423           
1425:000 | DONE wsp | na 16 16 |        |             |
1426:000 | DONE cmt | na 16 16 |        |             |                 ; if we were told to get zero chars, just quit
1427:000 | DONE ins | na 16 16 | 006420 | e8          |                 inx                  NIP, TOS is zero which is also FALSE
1428:000 | DONE ins | na 16 16 | 006421 | e8          |                 inx                  
1429:000 | DONE wsp | na 16 16 |        |             |
1430:000 | DONE ins | na 16 16 | 006422 | 60          |                 rts                  
1431:000 | DONE wsp | na 16 16 |        |             |
1432:000 | DONE lbl | na 16 16 | 006423 |             | accept_nonzero                       
1433:000 | DONE ins | na 16 16 | 006423 | b5 00       |                 lda.dx 00            address of buffer is NOS
1434:000 | DONE ins | na 16 16 | 006425 | 85 0a       |                 sta.d 00020a         
1435:000 | DONE ins | na 16 16 | 006427 | e8          |                 inx                  NIP
1436:000 | DONE ins | na 16 16 | 006428 | e8          |                 inx                  
1437:000 | DONE wsp | na 16 16 |        |             |
1438:000 | DONE ins | na 16 16 | 006429 | 84 0c       |                 sty.d 00020c         Save max number of chars in tmp2
1439:000 | DONE ins | na 16 16 | 00642b | a0 00 00    |                 ldy.# 0000           Use Y as counter
1440:000 | DONE ins | na 16 16 | 00642e | e2 20       |                 sep 20               
1440:001 | DONE ctl | na  8 16 |        |             |         .!a8
1441:000 | DONE wsp | na  8 16 |        |             |
1442:000 | DONE lbl | na  8 16 | 006430 |             | accept_loop                          
1443:000 | DONE cmt | na  8 16 |        |             |                 ; TODO rewrite with KEY so we can revector it
1444:000 | DONE cmt | na  8 16 |        |             |                 ; We don't need to check for CTRL-l, because a vt100 terminal
1445:000 | DONE cmt | na  8 16 |        |             |                 ; clears the screen automatically
1446:000 | DONE ins | na  8 16 | 006430 | 20 47 60    |                 jsr 006047           
1447:000 | DONE dir | na  8 16 |        |             |         .!a8                         
1448:000 | DONE cmt | na  8 16 |        |             |                 ; we quit on both line feed and carriage return
1449:000 | DONE ins | na  8 16 | 006433 | c9 0a       |                 cmp.# AscLF          
1450:000 | DONE ins | na  8 16 | 006435 | f0 44       |                 beq 00647b           
1451:000 | DONE ins | na  8 16 | 006437 | c9 0d       |                 cmp.# AscCR          
1452:000 | DONE ins | na  8 16 | 006439 | f0 40       |                 beq 00647b           
1453:000 | DONE wsp | na  8 16 |        |             |
1454:000 | DONE cmt | na  8 16 |        |             |                 ; BS and DEL do the same thing for the moment
1455:000 | DONE ins | na  8 16 | 00643b | c9 08       |                 cmp.# AscBS          
1456:000 | DONE ins | na  8 16 | 00643d | f0 44       |                 beq 006483           
1457:000 | DONE ins | na  8 16 | 00643f | c9 7f       |                 cmp.# AscDEL         
1458:000 | DONE ins | na  8 16 | 006441 | f0 40       |                 beq 006483           
1459:000 | DONE wsp | na  8 16 |        |             |
1460:000 | DONE cmt | na  8 16 |        |             |                 ; CTRL-c and ESC abort (see if this is too harsh)
1461:000 | DONE ins | na  8 16 | 006443 | c9 03       |                 cmp.# AscCC          
1462:000 | DONE ins | na  8 16 | 006445 | d0 03       |                 bne 00644a           
1463:000 | DONE ins | na  8 16 | 006447 | 4c 97 60    |                 jmp 006097           
1464:000 | DONE lbl | na  8 16 | 00644a |             | @                                    
1465:000 | DONE ins | na  8 16 | 00644a | c9 1b       |                 cmp.# AscESC         
1466:000 | DONE ins | na  8 16 | 00644c | d0 03       |                 bne 006451           
1467:000 | DONE ins | na  8 16 | 00644e | 4c 97 60    |                 jmp 006097           
1468:000 | DONE lbl | na  8 16 | 006451 |             | @                                    
1469:000 | DONE cmt | na  8 16 |        |             |                 ; CTRL-p will be used for "previous cmd", TODO
1470:000 | DONE ins | na  8 16 | 006451 | c9 10       |                 cmp.# AscCP          
1471:000 | DONE ins | na  8 16 | 006453 | d0 0c       |                 bne 006461           
1472:000 | DONE ins | na  8 16 | 006455 | c2 20       |                 rep 20               
1472:001 | DONE ctl | na 16 16 |        |             |         .!a16
1473:000 | DONE ins | na 16 16 | 006457 | a9 a8 7c    |                 lda.# 007ca8         
1474:000 | DONE ins | na 16 16 | 00645a | 20 03 76    |                 jsr 007603           
1475:000 | DONE ins | na 16 16 | 00645d | e2 20       |                 sep 20               
1475:001 | DONE ctl | na  8 16 |        |             |         .!a8
1476:000 | DONE ins | na  8 16 | 00645f | 80 cf       |                 bra 006430           
1477:000 | DONE lbl | na  8 16 | 006461 |             | @                                    
1478:000 | DONE cmt | na  8 16 |        |             |                 ; CTRL-n will be used for "next cmd", TODO
1479:000 | DONE ins | na  8 16 | 006461 | c9 0e       |                 cmp.# AscCN          
1480:000 | DONE ins | na  8 16 | 006463 | d0 0c       |                 bne 006471           
1481:000 | DONE ins | na  8 16 | 006465 | c2 20       |                 rep 20               
1481:001 | DONE ctl | na 16 16 |        |             |         .!a16
1482:000 | DONE ins | na 16 16 | 006467 | a9 bb 7c    |                 lda.# 007cbb         
1483:000 | DONE ins | na 16 16 | 00646a | 20 03 76    |                 jsr 007603           
1484:000 | DONE ins | na 16 16 | 00646d | e2 20       |                 sep 20               
1484:001 | DONE ctl | na  8 16 |        |             |         .!a8
1485:000 | DONE ins | na  8 16 | 00646f | 80 bf       |                 bra 006430           
1486:000 | DONE wsp | na  8 16 |        |             |
1487:000 | DONE lbl | na  8 16 | 006471 |             | @                                    
1488:000 | DONE cmt | na  8 16 |        |             |                 ; That's quite enough, echo character
1489:000 | DONE cmt | na  8 16 |        |             |                 ; TODO change to EMIT
1490:000 | DONE ins | na  8 16 | 006471 | 20 36 60    |                 jsr 006036           echo character
1491:000 | DONE dir | na  8 16 |        |             |         .!a8                         
1492:000 | DONE cmt | na  8 16 |        |             |                 ; TODO multitasking: Add PAUSE here (or in EMIT)
1493:000 | DONE wsp | na  8 16 |        |             |
1494:000 | DONE ins | na  8 16 | 006474 | 91 1a       |                 sta.diy 00021a       STA (CIB),Y
1495:000 | DONE ins | na  8 16 | 006476 | c8          |                 iny                  
1496:000 | DONE ins | na  8 16 | 006477 | c4 0c       |                 cpy.d 00020c         reached character limit?
1497:000 | DONE ins | na  8 16 | 006479 | d0 b5       |                 bne 006430           fall thru if buffer limit reached
1498:000 | DONE wsp | na  8 16 |        |             |
1499:000 | DONE lbl | na  8 16 | 00647b |             | accept_eol                           
1500:000 | DONE ins | na  8 16 | 00647b | 84 1c       |                 sty.d 00021c         Y contains number of chars accepted already
1501:000 | DONE ins | na  8 16 | 00647d | c2 20       |                 rep 20               
1501:001 | DONE ctl | na 16 16 |        |             |         .!a16
1502:000 | DONE ins | na 16 16 | 00647f | 20 1d 6c    |                 jsr 006c1d           print final space
1503:000 | DONE ins | na 16 16 | 006482 | 60          |                 rts                  this is the actual return of the routine
1504:000 | DONE wsp | na 16 16 |        |             |
1505:000 | DONE lbl | na 16 16 | 006483 |             | accept_bs                            
1506:000 | DONE dir | na  8 16 |        |             |         .!a8                         
1507:000 | DONE ins | na  8 16 | 006483 | c0 00 00    |                 cpy.# 0000           buffer empty?
1508:000 | DONE ins | na  8 16 | 006486 | d0 06       |                 bne 00648e           
1509:000 | DONE wsp | na  8 16 |        |             |
1510:000 | DONE ins | na  8 16 | 006488 | a9 07       |                 lda.# AscBELL        complain and don't delete beyond the start of line
1511:000 | DONE ins | na  8 16 | 00648a | 20 36 60    |                 jsr 006036           
1512:000 | DONE ins | na  8 16 | 00648d | c8          |                 iny                  
1513:000 | DONE lbl | na  8 16 | 00648e |             | @                                    
1514:000 | DONE ins | na  8 16 | 00648e | 88          |                 dey                  
1515:000 | DONE ins | na  8 16 | 00648f | a9 08       |                 lda.# AscBS          move back one
1516:000 | DONE ins | na  8 16 | 006491 | 20 36 60    |                 jsr 006036           
1517:000 | DONE ins | na  8 16 | 006494 | a9 20       |                 lda.# AscSP          print a space (rubout)
1518:000 | DONE ins | na  8 16 | 006496 | 20 36 60    |                 jsr 006036           
1519:000 | DONE ins | na  8 16 | 006499 | a9 08       |                 lda.# AscBS          move back over space
1520:000 | DONE ins | na  8 16 | 00649b | 20 36 60    |                 jsr 006036           
1521:000 | DONE wsp | na  8 16 |        |             |
1522:000 | DONE ins | na  8 16 | 00649e | 80 90       |                 bra 006430           
1523:000 | DONE wsp | na  8 16 |        |             |
1524:000 | DONE lbl | na  8 16 | 0064a0 |             | z_accept                             
1524:001 | DONE ins | na  8 16 | 0064a0 | 60          |                 rts                  
1525:000 | DONE wsp | na  8 16 |        |             |
1526:000 | DONE cmt | na  8 16 |        |             | ; -------------------------------------------------------------------
1527:000 | DONE cmt | na  8 16 |        |             | ; AGAIN ( addr -- ) 22 bytes / 50 cycles
1528:000 | DONE cmt | na  8 16 |        |             | ; Code a backwards branch to an address usually left by BEGIN. We use JMP
1529:000 | DONE cmt | na  8 16 |        |             | ; instead of BRA to make sure we have the range.
1530:000 | DONE cmt | na  8 16 |        |             | ; TODO see if we should insert a KEY? to make sure we can abort and/or a PAUSE
1531:000 | DONE lbl | na  8 16 | 0064a1 |             | xt_again                             
1532:000 | DONE wsp | na  8 16 |        |             |
1533:000 | DONE cmt | na  8 16 |        |             |                 ; Add the opcode for a JMP
1534:000 | DONE ins | na  8 16 | 0064a1 | e2 20       |                 sep 20               
1534:001 | DONE ctl | na  8 16 |        |             |         .!a8
1535:000 | DONE ins | na  8 16 | 0064a3 | a9 4c       |                 lda.# 4c             
1536:000 | DONE ins | na  8 16 | 0064a5 | 92 28       |                 sta.di 000228        STA (CP)
1537:000 | DONE ins | na  8 16 | 0064a7 | c2 20       |                 rep 20               
1537:001 | DONE ctl | na 16 16 |        |             |         .!a16
1538:000 | DONE ins | na 16 16 | 0064a9 | e6 28       |                 inc.d 000228         
1539:000 | DONE wsp | na 16 16 |        |             |
1540:000 | DONE cmt | na 16 16 |        |             |                 ; Add the address which should be TOS
1541:000 | DONE ins | na 16 16 | 0064ab | 98          |                 tya                  
1542:000 | DONE ins | na 16 16 | 0064ac | 92 28       |                 sta.di 000228        
1543:000 | DONE ins | na 16 16 | 0064ae | e6 28       |                 inc.d 000228         
1544:000 | DONE ins | na 16 16 | 0064b0 | e6 28       |                 inc.d 000228         
1545:000 | DONE wsp | na 16 16 |        |             |
1546:000 | DONE cmt | na 16 16 |        |             |                 ; drop the address
1547:000 | DONE ins | na 16 16 | 0064b2 | b4 00       |                 ldy.dx 00            
1548:000 | DONE ins | na 16 16 | 0064b4 | e8          |                 inx                  
1549:000 | DONE ins | na 16 16 | 0064b5 | e8          |                 inx                  
1550:000 | DONE wsp | na 16 16 |        |             |
1551:000 | DONE lbl | na 16 16 | 0064b6 |             | z_again                              
1551:001 | DONE ins | na 16 16 | 0064b6 | 60          |                 rts                  
1552:000 | DONE wsp | na 16 16 |        |             |
1553:000 | DONE wsp | na 16 16 |        |             |
1554:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1555:000 | DONE cmt | na 16 16 |        |             | ; ALLOT ( n -- ) X bytes / X cycles
1556:000 | DONE cmt | na 16 16 |        |             | ; Reserve a certain number of bytes (not cells) or release them. If n = 0, do
1557:000 | DONE cmt | na 16 16 |        |             | ; nothing. If n is negative, release n bytes, but only to the beginning of the
1558:000 | DONE cmt | na 16 16 |        |             | ; Dictionary. If n is positive (the most common case), reserve n bytes, but not
1559:000 | DONE cmt | na 16 16 |        |             | ; past the Dictionary.
1560:000 | DONE cmt | na 16 16 |        |             | ; See http://forth-standard.org/standard/core/ALLOT
1561:000 | DONE cmt | na 16 16 |        |             | ; TODO test negative values
1562:000 | DONE lbl | na 16 16 | 0064b7 |             | xt_allot                             
1563:000 | DONE dir | na 16 16 |        |             |         .!a16                        
1564:000 | DONE ins | na 16 16 | 0064b7 | 98          |                 tya                  force flag check
1565:000 | DONE ins | na 16 16 | 0064b8 | f0 21       |                 beq 0064db           zero bytes, don't do anything
1566:000 | DONE ins | na 16 16 | 0064ba | 30 12       |                 bmi 0064ce           free memory instead of reserving it
1567:000 | DONE wsp | na 16 16 |        |             |
1568:000 | DONE cmt | na 16 16 |        |             |                 ; most common case: reserve n bytes. We've already transfered
1569:000 | DONE cmt | na 16 16 |        |             |                 ; TOS to A, so we just have to add the current compile pointer
1570:000 | DONE ins | na 16 16 | 0064bc | 18          |                 clc                  
1571:000 | DONE ins | na 16 16 | 0064bd | 65 28       |                 adc.d 000228         create new CP
1572:000 | DONE ins | na 16 16 | 0064bf | b0 07       |                 bcs 0064c8           oops, we've wrapped
1573:000 | DONE wsp | na 16 16 |        |             |
1574:000 | DONE ins | na 16 16 | 0064c1 | a8          |                 tay                  save copy of new CP
1575:000 | DONE wsp | na 16 16 |        |             |
1576:000 | DONE ins | na 16 16 | 0064c2 | 38          |                 sec                  
1577:000 | DONE ins | na 16 16 | 0064c3 | e9 ff 7b    |                 sbc.# 007bff         
1578:000 | DONE ins | na 16 16 | 0064c6 | 30 11       |                 bmi 0064d9           oops, fall thru if beyond max RAM
1579:000 | DONE wsp | na 16 16 |        |             |
1580:000 | DONE lbl | na 16 16 | 0064c8 |             | allot_error                          
1581:000 | DONE ins | na 16 16 | 0064c8 | a9 54 7b    |                 lda.# 007b54         
1582:000 | DONE ins | na 16 16 | 0064cb | 4c fd 75    |                 jmp 0075fd           
1583:000 | DONE wsp | na 16 16 |        |             |
1584:000 | DONE lbl | na 16 16 | 0064ce |             | allot_minus                          
1585:000 | DONE cmt | na 16 16 |        |             |                 ; negative value means we're freeing memory
1586:000 | DONE ins | na 16 16 | 0064ce | 38          |                 sec                  
1587:000 | DONE ins | na 16 16 | 0064cf | e5 28       |                 sbc.d 000228         
1588:000 | DONE ins | na 16 16 | 0064d1 | 90 f5       |                 bcc 0064c8           oops, we've wrapped
1589:000 | DONE wsp | na 16 16 |        |             |
1590:000 | DONE ins | na 16 16 | 0064d3 | a8          |                 tay                  
1591:000 | DONE wsp | na 16 16 |        |             |
1592:000 | DONE ins | na 16 16 | 0064d4 | e9 00 03    |                 sbc.# 000300         Carry Flag must still be set
1593:000 | DONE ins | na 16 16 | 0064d7 | 30 ef       |                 bmi 0064c8           oops, gone too far back
1594:000 | DONE wsp | na 16 16 |        |             |
1595:000 | DONE cmt | na 16 16 |        |             |                 ; fall through to allot_done
1596:000 | DONE lbl | na 16 16 | 0064d9 |             | allot_done                           
1597:000 | DONE ins | na 16 16 | 0064d9 | 84 28       |                 sty.d 000228         new compiler pointer
1598:000 | DONE lbl | na 16 16 | 0064db |             | allot_real_gone                      
1599:000 | DONE ins | na 16 16 | 0064db | b4 00       |                 ldy.dx 00            DROP
1600:000 | DONE ins | na 16 16 | 0064dd | e8          |                 inx                  
1601:000 | DONE ins | na 16 16 | 0064de | e8          |                 inx                  
1602:000 | DONE wsp | na 16 16 |        |             |
1603:000 | DONE lbl | na 16 16 | 0064df |             | z_allot                              
1603:001 | DONE ins | na 16 16 | 0064df | 60          |                 rts                  
1604:000 | DONE wsp | na 16 16 |        |             |
1605:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1606:000 | DONE cmt | na 16 16 |        |             | ; AND ( n m -- n ) 6 bytes / X cycles
1607:000 | DONE cmt | na 16 16 |        |             | ; Logical AND
1608:000 | DONE lbl | na 16 16 | 0064e0 |             | xt_and                               
1609:000 | DONE ins | na 16 16 | 0064e0 | 98          |                 tya                  
1610:000 | DONE ins | na 16 16 | 0064e1 | 35 00       |                 and.dx 00            
1611:000 | DONE ins | na 16 16 | 0064e3 | a8          |                 tay                  
1612:000 | DONE wsp | na 16 16 |        |             |
1613:000 | DONE ins | na 16 16 | 0064e4 | e8          |                 inx                  NIP
1614:000 | DONE ins | na 16 16 | 0064e5 | e8          |                 inx                  
1615:000 | DONE wsp | na 16 16 |        |             |
1616:000 | DONE lbl | na 16 16 | 0064e6 |             | z_and                                
1616:001 | DONE ins | na 16 16 | 0064e6 | 60          |                 rts                  
1617:000 | DONE wsp | na 16 16 |        |             |
1618:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1619:000 | DONE cmt | na 16 16 |        |             | ; BASE ( -- addr ) X bytes / X cycles
1620:000 | DONE cmt | na 16 16 |        |             | ; Get the address of where the radix for number conversion is stored
1621:000 | DONE lbl | na 16 16 | 0064e7 |             | xt_base                              
1622:000 | DONE ins | na 16 16 | 0064e7 | ca          |                 dex                  
1623:000 | DONE ins | na 16 16 | 0064e8 | ca          |                 dex                  
1624:000 | DONE ins | na 16 16 | 0064e9 | 94 00       |                 sty.dx 00            
1625:000 | DONE wsp | na 16 16 |        |             |
1626:000 | DONE ins | na 16 16 | 0064eb | a0 24 02    |                 ldy.# 000224         
1627:000 | DONE wsp | na 16 16 |        |             |
1628:000 | DONE lbl | na 16 16 | 0064ee |             | z_base                               
1628:001 | DONE ins | na 16 16 | 0064ee | 60          |                 rts                  
1629:000 | DONE wsp | na 16 16 |        |             |
1630:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1631:000 | DONE cmt | na 16 16 |        |             | ; BELL ( -- ) X bytes / X cycles
1632:000 | DONE cmt | na 16 16 |        |             | ; Trigger terminal bell on vt100 terminals
1633:000 | DONE cmt | na 16 16 |        |             | ; TODO replace with EMIT
1634:000 | DONE lbl | na 16 16 | 0064ef |             | xt_bell                              
1635:000 | DONE dir | na 16 16 |        |             |         .!a16                        
1636:000 | DONE ins | na 16 16 | 0064ef | a9 07 00    |                 lda.# AscBELL        
1637:000 | DONE ins | na 16 16 | 0064f2 | 20 36 60    |                 jsr 006036           
1638:000 | DONE wsp | na 16 16 |        |             |
1639:000 | DONE lbl | na 16 16 | 0064f5 |             | z_bell                               
1639:001 | DONE ins | na 16 16 | 0064f5 | 60          |                 rts                  
1640:000 | DONE wsp | na 16 16 |        |             |
1641:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1642:000 | DONE cmt | na 16 16 |        |             | ; BEGIN ( -- addr ) 6 bytes / 13 cycles
1643:000 | DONE cmt | na 16 16 |        |             | ; Mark entry point for a loop. This is just an immediate version of here which
1644:000 | DONE cmt | na 16 16 |        |             | ; could just as welle be coded as  : BEGIN HERE ; IMMEDIATE  but we code it here
1645:000 | DONE cmt | na 16 16 |        |             | ; differently for speed
1646:000 | DONE lbl | na 16 16 | 0064f6 |             | xt_begin                             
1647:000 | DONE cmt | na 16 16 |        |             |                 ; really just the same code as HERE
1648:000 | DONE ins | na 16 16 | 0064f6 | ca          |                 dex                  
1649:000 | DONE ins | na 16 16 | 0064f7 | ca          |                 dex                  
1650:000 | DONE ins | na 16 16 | 0064f8 | 94 00       |                 sty.dx 00            
1651:000 | DONE wsp | na 16 16 |        |             |
1652:000 | DONE ins | na 16 16 | 0064fa | a4 28       |                 ldy.d 000228         
1653:000 | DONE wsp | na 16 16 |        |             |
1654:000 | DONE lbl | na 16 16 | 0064fc |             | z_begin                              
1654:001 | DONE ins | na 16 16 | 0064fc | 60          |                 rts                  
1655:000 | DONE wsp | na 16 16 |        |             |
1656:000 | DONE wsp | na 16 16 |        |             |
1657:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1658:000 | DONE cmt | na 16 16 |        |             | ; BL ( -- u ) 7 bytes / 12 cycles
1659:000 | DONE cmt | na 16 16 |        |             | ; Put ASCII char for SPACE on Data Stack
1660:000 | DONE lbl | na 16 16 | 0064fd |             | xt_bl                                
1661:000 | DONE dir | na 16 16 |        |             |         .!xy16                       
1662:000 | DONE ins | na 16 16 | 0064fd | ca          |                 dex                  
1663:000 | DONE ins | na 16 16 | 0064fe | ca          |                 dex                  
1664:000 | DONE ins | na 16 16 | 0064ff | 94 00       |                 sty.dx 00            
1665:000 | DONE ins | na 16 16 | 006501 | a0 20 00    |                 ldy.# AscSP          
1666:000 | DONE wsp | na 16 16 |        |             |
1667:000 | DONE lbl | na 16 16 | 006504 |             | z_bl                                 
1667:001 | DONE ins | na 16 16 | 006504 | 60          |                 rts                  
1668:000 | DONE wsp | na 16 16 |        |             |
1669:000 | DONE wsp | na 16 16 |        |             |
1670:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1671:000 | DONE cmt | na 16 16 |        |             | ; BOUNDS ( addr u -- addr+u addr ) 9 bytes / X cycles
1672:000 | DONE cmt | na 16 16 |        |             | ; Given a string, return the correct Data Stack parameters for a DO/LOOP loop
1673:000 | DONE cmt | na 16 16 |        |             | ; over its characters. This is realized as OVER + SWAP in Forth, but we do it
1674:000 | DONE cmt | na 16 16 |        |             | ; a lot faster in assembler. Uses tmptos
1675:000 | DONE lbl | na 16 16 | 006505 |             | xt_bounds                            
1676:000 | DONE dir | na 16 16 |        |             |         .!a16                        
1677:000 | DONE ins | na 16 16 | 006505 | 84 12       |                 sty.d 000212         
1678:000 | DONE ins | na 16 16 | 006507 | b4 00       |                 ldy.dx 00            addr now TOS
1679:000 | DONE wsp | na 16 16 |        |             |
1680:000 | DONE ins | na 16 16 | 006509 | 18          |                 clc                  
1681:000 | DONE ins | na 16 16 | 00650a | 65 12       |                 adc.d 000212         
1682:000 | DONE ins | na 16 16 | 00650c | 95 00       |                 sta.dx 00            addr+u now NOS
1683:000 | DONE wsp | na 16 16 |        |             |
1684:000 | DONE lbl | na 16 16 | 00650e |             | z_bounds                             
1684:001 | DONE ins | na 16 16 | 00650e | 60          |                 rts                  
1685:000 | DONE wsp | na 16 16 |        |             |
1686:000 | DONE wsp | na 16 16 |        |             |
1687:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1688:000 | DONE cmt | na 16 16 |        |             | ; BRANCH ( -- ) X bytes / X cycles
1689:000 | DONE cmt | na 16 16 |        |             | ; Transfer control to given address. This word was adapted from Tali Forth. It
1690:000 | DONE cmt | na 16 16 |        |             | ; uses tmpbranch
1691:000 | DONE lbl | na 16 16 | 00650f |             | xt_branch                            
1692:000 | DONE dir | na 16 16 |        |             |         .!a16                        
1693:000 | DONE cmt | na 16 16 |        |             |                 ; encode subroutine branch to runtime portion
1694:000 | DONE ins | na 16 16 | 00650f | f4 16 65    |                 phe.# 006516         
1695:000 | DONE ins | na 16 16 | 006512 | 20 dc 75    |                 jsr 0075dc           
1696:000 | DONE wsp | na 16 16 |        |             |
1697:000 | DONE lbl | na 16 16 | 006515 |             | z_branch                             
1697:001 | DONE ins | na 16 16 | 006515 | 60          |                 rts                  
1698:000 | DONE wsp | na 16 16 |        |             |
1699:000 | DONE lbl | na 16 16 | 006516 |             | branch_rt                            
1700:000 | DONE cmt | na 16 16 |        |             |                 ; The value on the Return Stack determines where we go to
1701:000 | DONE ins | na 16 16 | 006516 | 68          |                 pla                  
1702:000 | DONE ins | na 16 16 | 006517 | 85 08       |                 sta.d 000208         
1703:000 | DONE wsp | na 16 16 |        |             |
1704:000 | DONE ins | na 16 16 | 006519 | 5a          |                 phy                  avoid using temp variables
1705:000 | DONE ins | na 16 16 | 00651a | a0 01 00    |                 ldy.# 0001           
1706:000 | DONE ins | na 16 16 | 00651d | b1 08       |                 lda.diy 000208       LDA (TMPBRANCH),Y
1707:000 | DONE ins | na 16 16 | 00651f | 7a          |                 ply                  
1708:000 | DONE wsp | na 16 16 |        |             |
1709:000 | DONE ins | na 16 16 | 006520 | 3a          |                 dec.a                
1710:000 | DONE ins | na 16 16 | 006521 | 48          |                 pha                  put target address back on Return Stack
1711:000 | DONE wsp | na 16 16 |        |             |
1712:000 | DONE ins | na 16 16 | 006522 | 60          |                 rts                  
1713:000 | DONE wsp | na 16 16 |        |             |
1714:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1715:000 | DONE cmt | na 16 16 |        |             | ; BYE ( -- ) 2 bytes / 7-8 cycles
1716:000 | DONE cmt | na 16 16 |        |             | ; Leave Liara Forth, returning to Mensch Monitor
1717:000 | DONE cmt | na 16 16 |        |             | ; TODO make sure this actually calls the MM
1718:000 | DONE lbl | na 16 16 | 006523 |             | xt_bye                               
1719:000 | DONE ins | na 16 16 | 006523 | 58          |                 cli                  
1720:000 | DONE ins | na 16 16 | 006524 | 00 00       |                 brk 00               status byte 00 required for assembler
1721:000 | DONE wsp | na 16 16 |        |             |
1722:000 | DONE lbl | na 16 16 | 006526 |             | z_bye                                
1722:001 | DONE ins | na 16 16 | 006526 | 60          |                 rts                  dummy for compiling, never reached
1723:000 | DONE wsp | na 16 16 |        |             |
1724:000 | DONE wsp | na 16 16 |        |             |
1725:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1726:000 | DONE cmt | na 16 16 |        |             | ; C, "C-COMMA" ( char -- ) 13 bytes / 28 cycles
1727:000 | DONE cmt | na 16 16 |        |             | ; Store one character in the Dictionary
1728:000 | DONE lbl | na 16 16 | 006527 |             | xt_c-comma                           
1729:000 | DONE ins | na 16 16 | 006527 | 98          |                 tya                  
1730:000 | DONE ins | na 16 16 | 006528 | e2 20       |                 sep 20               
1730:001 | DONE ctl | na  8 16 |        |             |         .!a8
1731:000 | DONE ins | na  8 16 | 00652a | 92 28       |                 sta.di 000228        STA (CP)
1732:000 | DONE ins | na  8 16 | 00652c | c2 20       |                 rep 20               
1732:001 | DONE ctl | na 16 16 |        |             |         .!a16
1733:000 | DONE ins | na 16 16 | 00652e | e6 28       |                 inc.d 000228         quick version of 1 ALLOT
1734:000 | DONE wsp | na 16 16 |        |             |
1735:000 | DONE ins | na 16 16 | 006530 | b4 00       |                 ldy.dx 00            
1736:000 | DONE ins | na 16 16 | 006532 | e8          |                 inx                  
1737:000 | DONE ins | na 16 16 | 006533 | e8          |                 inx                  
1738:000 | DONE wsp | na 16 16 |        |             |
1739:000 | DONE lbl | na 16 16 | 006534 |             | z_c-comma                            
1739:001 | DONE ins | na 16 16 | 006534 | 60          |                 rts                  
1740:000 | DONE wsp | na 16 16 |        |             |
1741:000 | DONE wsp | na 16 16 |        |             |
1742:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1743:000 | DONE cmt | na 16 16 |        |             | ; C@ "C-FETCH" ( addr -- n ) 11 bytes / 16 cycles
1744:000 | DONE cmt | na 16 16 |        |             | ; Get a single byte from the given address
1745:000 | DONE lbl | na 16 16 | 006535 |             | xt_c-fetch                           
1746:000 | DONE ins | na 16 16 | 006535 | e2 20       |                 sep 20               
1746:001 | DONE ctl | na  8 16 |        |             |         .!a8
1747:000 | DONE ins | na  8 16 | 006537 | b9 00 00    |                 lda.y 0000           
1748:000 | DONE ins | na  8 16 | 00653a | c2 20       |                 rep 20               
1748:001 | DONE ctl | na 16 16 |        |             |         .!a16
1749:000 | DONE ins | na 16 16 | 00653c | 29 ff 00    |                 and.# 00ff           
1750:000 | DONE ins | na 16 16 | 00653f | a8          |                 tay                  
1751:000 | DONE wsp | na 16 16 |        |             |
1752:000 | DONE lbl | na 16 16 | 006540 |             | z_c-fetch                            
1752:001 | DONE ins | na 16 16 | 006540 | 60          |                 rts                  
1753:000 | DONE wsp | na 16 16 |        |             |
1754:000 | DONE wsp | na 16 16 |        |             |
1755:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1756:000 | DONE cmt | na 16 16 |        |             | ; C! "C-STORE" ( n addr -- ) 15 bytes / 29 cycles
1757:000 | DONE cmt | na 16 16 |        |             | ; Store LSB of NOS at location given as TOS
1758:000 | DONE lbl | na 16 16 | 006541 |             | xt_c-store                           
1759:000 | DONE ins | na 16 16 | 006541 | b5 00       |                 lda.dx 00            
1760:000 | DONE ins | na 16 16 | 006543 | e2 20       |                 sep 20               
1760:001 | DONE ctl | na  8 16 |        |             |         .!a8
1761:000 | DONE ins | na  8 16 | 006545 | 99 00 00    |                 sta.y 0000           
1762:000 | DONE ins | na  8 16 | 006548 | c2 20       |                 rep 20               
1762:001 | DONE ctl | na 16 16 |        |             |         .!a16
1763:000 | DONE ins | na 16 16 | 00654a | b4 02       |                 ldy.dx 02            
1764:000 | DONE ins | na 16 16 | 00654c | e8          |                 inx                  
1765:000 | DONE ins | na 16 16 | 00654d | e8          |                 inx                  
1766:000 | DONE ins | na 16 16 | 00654e | e8          |                 inx                  
1767:000 | DONE ins | na 16 16 | 00654f | e8          |                 inx                  
1768:000 | DONE wsp | na 16 16 |        |             |
1769:000 | DONE lbl | na 16 16 | 006550 |             | z_c-store                            
1769:001 | DONE ins | na 16 16 | 006550 | 60          |                 rts                  
1770:000 | DONE wsp | na 16 16 |        |             |
1771:000 | DONE wsp | na 16 16 |        |             |
1772:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1773:000 | DONE cmt | na 16 16 |        |             | ; CELL+ ( u -- u+2 ) X bytes / X cycles
1774:000 | DONE cmt | na 16 16 |        |             | ; Add the size of one cell to the value on top of the stack. Since this is
1775:000 | DONE cmt | na 16 16 |        |             | ; a 16-bit cell size, we add two
1776:000 | DONE lbl | na 16 16 | 006551 |             | xt_cellplus                          
1777:000 | DONE ins | na 16 16 | 006551 | c8          |                 iny                  
1778:000 | DONE ins | na 16 16 | 006552 | c8          |                 iny                  
1779:000 | DONE lbl | na 16 16 | 006553 |             | z_cellplus                           
1779:001 | DONE ins | na 16 16 | 006553 | 60          |                 rts                  
1780:000 | DONE wsp | na 16 16 |        |             |
1781:000 | DONE wsp | na 16 16 |        |             |
1782:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1783:000 | DONE cmt | na 16 16 |        |             | ; CELLS ( n -- n ) X bytes / X cycles
1784:000 | DONE cmt | na 16 16 |        |             | ; Given a number of cells, return the number of bytes that they will require.
1785:000 | DONE cmt | na 16 16 |        |             | ; This is 16 bit cell Forth, so the value returned by this word is the same as
1786:000 | DONE cmt | na 16 16 |        |             | ; returned by 2*, see there.
1787:000 | DONE wsp | na 16 16 |        |             |
1788:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1789:000 | DONE cmt | na 16 16 |        |             | ; CHAR ( "c" -- u ) 23 bytes / X cycles
1790:000 | DONE cmt | na 16 16 |        |             | ; Convert a character to its ASCII value
1791:000 | DONE lbl | na 16 16 | 006554 |             | xt_char                              
1792:000 | DONE dir | na 16 16 |        |             |         .!a16                        
1793:000 | DONE ins | na 16 16 | 006554 | 20 ea 69    |                 jsr 0069ea           ( -- addr u )
1794:000 | DONE wsp | na 16 16 |        |             |
1795:000 | DONE cmt | na 16 16 |        |             |                 ; if we got back a zero, we have a problem
1796:000 | DONE ins | na 16 16 | 006557 | 98          |                 tya                  force flag check
1797:000 | DONE ins | na 16 16 | 006558 | d0 06       |                 bne 006560           
1798:000 | DONE wsp | na 16 16 |        |             |
1799:000 | DONE ins | na 16 16 | 00655a | a9 f3 7b    |                 lda.# 007bf3         
1800:000 | DONE ins | na 16 16 | 00655d | 4c fd 75    |                 jmp 0075fd           
1801:000 | DONE wsp | na 16 16 |        |             |
1802:000 | DONE lbl | na 16 16 | 006560 |             | char_got_char                        
1803:000 | DONE ins | na 16 16 | 006560 | b4 00       |                 ldy.dx 00            get addr from NOS
1804:000 | DONE ins | na 16 16 | 006562 | b9 00 00    |                 lda.y 0000           LDA 0000,Y - could be C@
1805:000 | DONE ins | na 16 16 | 006565 | 29 ff 00    |                 and.# 00ff           
1806:000 | DONE ins | na 16 16 | 006568 | a8          |                 tay                  
1807:000 | DONE wsp | na 16 16 |        |             |
1808:000 | DONE ins | na 16 16 | 006569 | e8          |                 inx                  
1809:000 | DONE ins | na 16 16 | 00656a | e8          |                 inx                  
1810:000 | DONE wsp | na 16 16 |        |             |
1811:000 | DONE lbl | na 16 16 | 00656b |             | z_char                               
1811:001 | DONE ins | na 16 16 | 00656b | 60          |                 rts                  
1812:000 | DONE wsp | na 16 16 |        |             |
1813:000 | DONE wsp | na 16 16 |        |             |
1814:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1815:000 | DONE cmt | na 16 16 |        |             | ; CHARPLUS ( u -- u+1 ) X bytes / X cycles
1816:000 | DONE cmt | na 16 16 |        |             | ; Adds the size of a character to the value on top of the stack. Since our
1817:000 | DONE cmt | na 16 16 |        |             | ; character size is one, this is the same code as 1+, see there
1818:000 | DONE wsp | na 16 16 |        |             |
1819:000 | DONE wsp | na 16 16 |        |             |
1820:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1821:000 | DONE cmt | na 16 16 |        |             | ; CHARS ( u -- u ) X bytes / X cycles
1822:000 | DONE cmt | na 16 16 |        |             | ; Return the size in bytes of the number of characters on the top of the stack.
1823:000 | DONE cmt | na 16 16 |        |             | ; In this case, does nothing
1824:000 | DONE lbl | na 16 16 | 00656c |             | xt_chars                             
1825:000 | DONE wsp | na 16 16 |        |             |
1826:000 | DONE ins | na 16 16 | 00656c | ea          |                 nop                  
1827:000 | DONE lbl | na 16 16 | 00656d |             | z_chars                              
1827:001 | DONE ins | na 16 16 | 00656d | 60          |                 rts                  
1828:000 | DONE wsp | na 16 16 |        |             |
1829:000 | DONE wsp | na 16 16 |        |             |
1830:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1831:000 | DONE cmt | na 16 16 |        |             | ; COMPILE-ONLY ( -- ) 8 bytes / X cycles
1832:000 | DONE cmt | na 16 16 |        |             | ; Mark the most recently defined word as COMPILE-ONLY. The alternative (and
1833:000 | DONE cmt | na 16 16 |        |             | ; traditional) way to do this is to include a word ?COMPILE that makes sure
1834:000 | DONE cmt | na 16 16 |        |             | ; we're in compile mode
1835:000 | DONE lbl | na 16 16 | 00656e |             | xt_compile-only                      
1836:000 | DONE dir | na 16 16 |        |             |         .!a16                        
1837:000 | DONE ins | na 16 16 | 00656e | a9 04 00    |                 lda.# CO             
1838:000 | DONE ins | na 16 16 | 006571 | eb          |                 xba                  flags are MSB
1839:000 | DONE ins | na 16 16 | 006572 | 12 2a       |                 ora.di 00022a        ORA (DP)
1840:000 | DONE ins | na 16 16 | 006574 | 92 2a       |                 sta.di 00022a        
1841:000 | DONE wsp | na 16 16 |        |             |
1842:000 | DONE lbl | na 16 16 | 006576 |             | z_compile-only                       
1842:001 | DONE ins | na 16 16 | 006576 | 60          |                 rts                  
1843:000 | DONE wsp | na 16 16 |        |             |
1844:000 | DONE wsp | na 16 16 |        |             |
1845:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1846:000 | DONE cmt | na 16 16 |        |             | ; COMPILE, ( xt -- ) X bytes / X cycles
1847:000 | DONE cmt | na 16 16 |        |             | ; Compile a given xt in the current word definition. It is an error if we are
1848:000 | DONE cmt | na 16 16 |        |             | ; not in the compile state. Because we are using subroutine threading, we can't
1849:000 | DONE cmt | na 16 16 |        |             | ; use , (COMMA) to compile new words the traditional way. We use the NC (Native
1850:000 | DONE cmt | na 16 16 |        |             | ; Compile) flag to decide if native compilation is allowed. If yes, we use the
1851:000 | DONE cmt | na 16 16 |        |             | ; value NC_LIMIT (in definitions.tasm) to decide if the code is too large to be
1852:000 | DONE cmt | na 16 16 |        |             | ; natively coded: If the size is smaller than NC_LIMIT, we silently use
1853:000 | DONE cmt | na 16 16 |        |             | ; subroutine coding.
1854:000 | DONE cmt | na 16 16 |        |             | ; TODO currently just compiles subroutine jumps
1855:000 | DONE lbl | na 16 16 | 006577 |             | xt_compilecomma                      
1856:000 | DONE dir | na 16 16 |        |             |         .!a16                        
1857:000 | DONE wsp | na 16 16 |        |             |
1858:000 | DONE lbl | na 16 16 | 006577 |             | compile_as_code                      
1859:000 | DONE cmt | na 16 16 |        |             |                 ; Compile xt as native code
1860:000 | DONE cmt | na 16 16 |        |             |                 ; use nc_limit to decide if we want native compile
1861:000 | DONE cmt | na 16 16 |        |             |                 ; TODO consider special cases:
1862:000 | DONE cmt | na 16 16 |        |             |                 ;  - >R R> R@ should strip PLA/PHA if native compiled
1863:000 | DONE cmt | na 16 16 |        |             |                 ;  - Don't compile comments
1864:000 | DONE wsp | na 16 16 |        |             |
1865:000 | DONE lbl | na 16 16 | 006577 |             | compile_as_jump                      
1866:000 | DONE cmt | na 16 16 |        |             |                 ; Compile xt as a subroutine jump.
1867:000 | DONE ins | na 16 16 | 006577 | e2 20       |                 sep 20               
1867:001 | DONE ctl | na  8 16 |        |             |         .!a8
1868:000 | DONE ins | na  8 16 | 006579 | a9 20       |                 lda.# 20             opcode for JSR
1869:000 | DONE ins | na  8 16 | 00657b | 92 28       |                 sta.di 000228        STA (CP)
1870:000 | DONE ins | na  8 16 | 00657d | c2 20       |                 rep 20               
1870:001 | DONE ctl | na 16 16 |        |             |         .!a16
1871:000 | DONE ins | na 16 16 | 00657f | e6 28       |                 inc.d 000228         
1872:000 | DONE wsp | na 16 16 |        |             |
1873:000 | DONE cmt | na 16 16 |        |             |                 ; There is no "sty.di" instruction, so we have to do this the
1874:000 | DONE cmt | na 16 16 |        |             |                 ; hard way
1875:000 | DONE ins | na 16 16 | 006581 | 98          |                 tya                  
1876:000 | DONE ins | na 16 16 | 006582 | 92 28       |                 sta.di 000228        
1877:000 | DONE ins | na 16 16 | 006584 | e6 28       |                 inc.d 000228         
1878:000 | DONE ins | na 16 16 | 006586 | e6 28       |                 inc.d 000228         
1879:000 | DONE wsp | na 16 16 |        |             |
1880:000 | DONE ins | na 16 16 | 006588 | b4 00       |                 ldy.dx 00            
1881:000 | DONE ins | na 16 16 | 00658a | e8          |                 inx                  
1882:000 | DONE ins | na 16 16 | 00658b | e8          |                 inx                  
1883:000 | DONE wsp | na 16 16 |        |             |
1884:000 | DONE lbl | na 16 16 | 00658c |             | z_compilecomma                       
1884:001 | DONE ins | na 16 16 | 00658c | 60          |                 rts                  
1885:000 | DONE wsp | na 16 16 |        |             |
1886:000 | DONE wsp | na 16 16 |        |             |
1887:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1888:000 | DONE cmt | na 16 16 |        |             | ; CONSTANT ( "name" n -- ) X bytes / X cycles
1889:000 | DONE cmt | na 16 16 |        |             | ; Associate a fixed value with a word. This could be realized as
1890:000 | DONE cmt | na 16 16 |        |             | ; CREATE , DOES> @  as well. We do more in assembler but let CREATE do the heavy
1891:000 | DONE cmt | na 16 16 |        |             | ; lifting.
1892:000 | DONE cmt | na 16 16 |        |             | ; See http://www.bradrodriguez.com/papers/moving3.htm for a primer on how
1893:000 | DONE cmt | na 16 16 |        |             | ; this works in various Forths.
1894:000 | DONE lbl | na 16 16 | 00658d |             | xt_constant                          
1895:000 | DONE ins | na 16 16 | 00658d | 20 bd 65    |                 jsr 0065bd           
1896:000 | DONE wsp | na 16 16 |        |             |
1897:000 | DONE cmt | na 16 16 |        |             |                 ; CREATE by default installs a subroutine jump to DOVAR, but we
1898:000 | DONE cmt | na 16 16 |        |             |                 ; actually want DOCONST this time. Go back two bytes and repace
1899:000 | DONE cmt | na 16 16 |        |             |                 ; the subroutine jump target
1900:000 | DONE ins | na 16 16 | 006590 | a5 28       |                 lda.d 000228         
1901:000 | DONE ins | na 16 16 | 006592 | 3a          |                 dec.a                
1902:000 | DONE ins | na 16 16 | 006593 | 3a          |                 dec.a                
1903:000 | DONE ins | na 16 16 | 006594 | 85 0a       |                 sta.d 00020a         
1904:000 | DONE wsp | na 16 16 |        |             |
1905:000 | DONE ins | na 16 16 | 006596 | a9 60 75    |                 lda.# 007560         
1906:000 | DONE ins | na 16 16 | 006599 | 92 0a       |                 sta.di 00020a        STA (TMP1)
1907:000 | DONE wsp | na 16 16 |        |             |
1908:000 | DONE cmt | na 16 16 |        |             |                 ; Save TOS in next cell. This is a direct version of COMMA
1909:000 | DONE ins | na 16 16 | 00659b | 98          |                 tya                  there is no "sty.di cp"
1910:000 | DONE ins | na 16 16 | 00659c | 92 28       |                 sta.di 000228        
1911:000 | DONE ins | na 16 16 | 00659e | e6 28       |                 inc.d 000228         
1912:000 | DONE ins | na 16 16 | 0065a0 | e6 28       |                 inc.d 000228         
1913:000 | DONE wsp | na 16 16 |        |             |
1914:000 | DONE ins | na 16 16 | 0065a2 | b4 00       |                 ldy.dx 00            DROP
1915:000 | DONE ins | na 16 16 | 0065a4 | e8          |                 inx                  
1916:000 | DONE ins | na 16 16 | 0065a5 | e8          |                 inx                  
1917:000 | DONE wsp | na 16 16 |        |             |
1918:000 | DONE lbl | na 16 16 | 0065a6 |             | z_constant                           
1918:001 | DONE ins | na 16 16 | 0065a6 | 60          |                 rts                  
1919:000 | DONE wsp | na 16 16 |        |             |
1920:000 | DONE wsp | na 16 16 |        |             |
1921:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1922:000 | DONE cmt | na 16 16 |        |             | ; COUNT ( c-addr -- addr u ) 14 bytes / X cycles
1923:000 | DONE cmt | na 16 16 |        |             | ; Convert old-style character string to address-length pair. Note that the
1924:000 | DONE cmt | na 16 16 |        |             | ; length of the string c-addr ist stored in character length (8 bit), not cell
1925:000 | DONE cmt | na 16 16 |        |             | ; length (16 bit). This is rarely used these days, though COUNT can also be used
1926:000 | DONE cmt | na 16 16 |        |             | ; to step through a string character by character.
1927:000 | DONE lbl | na 16 16 | 0065a7 |             | xt_count                             
1928:000 | DONE dir | na 16 16 |        |             |         .!a16                        
1929:000 | DONE dir | na 16 16 |        |             |         .!xy16                       
1930:000 | DONE ins | na 16 16 | 0065a7 | 98          |                 tya                  
1931:000 | DONE ins | na 16 16 | 0065a8 | 1a          |                 inc.a                String address starts one char later
1932:000 | DONE wsp | na 16 16 |        |             |
1933:000 | DONE ins | na 16 16 | 0065a9 | ca          |                 dex                  
1934:000 | DONE ins | na 16 16 | 0065aa | ca          |                 dex                  
1935:000 | DONE ins | na 16 16 | 0065ab | 95 00       |                 sta.dx 00            NOS
1936:000 | DONE wsp | na 16 16 |        |             |
1937:000 | DONE ins | na 16 16 | 0065ad | b9 00 00    |                 lda.y 0000           LDA $0000,Y  first byte is length
1938:000 | DONE ins | na 16 16 | 0065b0 | eb          |                 xba                  move length to LSB
1939:000 | DONE ins | na 16 16 | 0065b1 | 29 ff 00    |                 and.# 00ff           get rid of whatever was MSB
1940:000 | DONE ins | na 16 16 | 0065b4 | a8          |                 tay                  TOS
1941:000 | DONE wsp | na 16 16 |        |             |
1942:000 | DONE lbl | na 16 16 | 0065b5 |             | z_count                              
1942:001 | DONE ins | na 16 16 | 0065b5 | 60          |                 rts                  
1943:000 | DONE wsp | na 16 16 |        |             |
1944:000 | DONE wsp | na 16 16 |        |             |
1945:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1946:000 | DONE cmt | na 16 16 |        |             | ; CR ( -- ) X bytes / X cycles
1947:000 | DONE cmt | na 16 16 |        |             | ; Cause following output to appear at beginning of next line
1948:000 | DONE cmt | na 16 16 |        |             | ; TODO replace with EMIT
1949:000 | DONE lbl | na 16 16 | 0065b6 |             | xt_cr                                
1950:000 | DONE ins | na 16 16 | 0065b6 | a9 0a 00    |                 lda.# AscLF          test with AscCR for emulators
1951:000 | DONE ins | na 16 16 | 0065b9 | 20 36 60    |                 jsr 006036           
1952:000 | DONE wsp | na 16 16 |        |             |
1953:000 | DONE lbl | na 16 16 | 0065bc |             | z_cr                                 
1953:001 | DONE ins | na 16 16 | 0065bc | 60          |                 rts                  
1954:000 | DONE wsp | na 16 16 |        |             |
1955:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1956:000 | DONE cmt | na 16 16 |        |             | ; CREATE ( "name" -- ) X bytes / X cycles
1957:000 | DONE cmt | na 16 16 |        |             | ; Create a Dictionary entry associated with "name", used for various words,
1958:000 | DONE cmt | na 16 16 |        |             | ; especially for VARIABLE. When called, this new word will return the associated
1959:000 | DONE cmt | na 16 16 |        |             | ; address.
1960:000 | DONE lbl | na 16 16 | 0065bd |             | xt_create                            
1961:000 | DONE dir | na 16 16 |        |             |         .!a16                        
1962:000 | DONE ins | na 16 16 | 0065bd | 20 ea 69    |                 jsr 0069ea           ( -- addr u )
1963:000 | DONE ins | na 16 16 | 0065c0 | d0 06       |                 bne 0065c8           
1964:000 | DONE wsp | na 16 16 |        |             |
1965:000 | DONE cmt | na 16 16 |        |             |                 ; if we got a zero-length name string, complain and abort
1966:000 | DONE ins | na 16 16 | 0065c2 | a9 f3 7b    |                 lda.# 007bf3         
1967:000 | DONE ins | na 16 16 | 0065c5 | 4c fd 75    |                 jmp 0075fd           
1968:000 | DONE wsp | na 16 16 |        |             |
1969:000 | DONE lbl | na 16 16 | 0065c8 |             | create_got_name                      
1970:000 | DONE cmt | na 16 16 |        |             |                 ; all Dictionary entries are lowercase
1971:000 | DONE ins | na 16 16 | 0065c8 | 20 36 76    |                 jsr 007636           
1972:000 | DONE wsp | na 16 16 |        |             |
1973:000 | DONE cmt | na 16 16 |        |             |                 ; Remember the first free byte of memory as the start of the new
1974:000 | DONE cmt | na 16 16 |        |             |                 ; word
1975:000 | DONE ins | na 16 16 | 0065cb | a5 28       |                 lda.d 000228         
1976:000 | DONE ins | na 16 16 | 0065cd | 85 0a       |                 sta.d 00020a         save start of new word
1977:000 | DONE wsp | na 16 16 |        |             |
1978:000 | DONE cmt | na 16 16 |        |             |                 ; Enforce limit on 255 char length names by masking the MSB
1979:000 | DONE cmt | na 16 16 |        |             |                 ; of the length of the given string. We arrive here with
1980:000 | DONE cmt | na 16 16 |        |             |                 ; ( addr u )
1981:000 | DONE ins | na 16 16 | 0065cf | 98          |                 tya                  
1982:000 | DONE ins | na 16 16 | 0065d0 | 29 ff 00    |                 and.# 00ff           
1983:000 | DONE ins | na 16 16 | 0065d3 | 85 0c       |                 sta.d 00020c         save length of name string
1984:000 | DONE wsp | na 16 16 |        |             |
1985:000 | DONE cmt | na 16 16 |        |             |                 ; We need 8 bytes + the length of the name string for our new
1986:000 | DONE cmt | na 16 16 |        |             |                 ; header. This is also the offset for the start of the code
1987:000 | DONE cmt | na 16 16 |        |             |                 ; field (the xt_ label) so we need to remember it. Otherwise, we
1988:000 | DONE cmt | na 16 16 |        |             |                 ; could just allot the space afterwards.
1989:000 | DONE ins | na 16 16 | 0065d5 | 18          |                 clc                  
1990:000 | DONE ins | na 16 16 | 0065d6 | 69 08 00    |                 adc.# 0008           
1991:000 | DONE ins | na 16 16 | 0065d9 | 85 0e       |                 sta.d 00020e         total bytes required for header
1992:000 | DONE wsp | na 16 16 |        |             |
1993:000 | DONE cmt | na 16 16 |        |             |                 ; We need to allocate three more bytes for the hardcoded
1994:000 | DONE cmt | na 16 16 |        |             |                 ; code field area (CFA), the "payload" of the word which by
1995:000 | DONE cmt | na 16 16 |        |             |                 ; default will be a subroutine jump to DOVAR
1996:000 | DONE ins | na 16 16 | 0065db | 1a          |                 inc.a                
1997:000 | DONE ins | na 16 16 | 0065dc | 1a          |                 inc.a                
1998:000 | DONE ins | na 16 16 | 0065dd | 1a          |                 inc.a                
1999:000 | DONE wsp | na 16 16 |        |             |
2000:000 | DONE cmt | na 16 16 |        |             |                 ; Instead of jumping to ALLOT, we do things by hand for speed
2001:000 | DONE cmt | na 16 16 |        |             |                 ; and so we don't have to fool around with the stack
2002:000 | DONE ins | na 16 16 | 0065de | 18          |                 clc                  
2003:000 | DONE ins | na 16 16 | 0065df | 65 28       |                 adc.d 000228         
2004:000 | DONE ins | na 16 16 | 0065e1 | 85 28       |                 sta.d 000228         
2005:000 | DONE wsp | na 16 16 |        |             |
2006:000 | DONE cmt | na 16 16 |        |             |                 ; Now we walk through the header, using Y as the index. See
2007:000 | DONE cmt | na 16 16 |        |             |                 ; drawing of header in headers.tasm file for reference. We
2008:000 | DONE cmt | na 16 16 |        |             |                 ; arrive here with ( addr u ) still from PARSE-NAME. We need
2009:000 | DONE cmt | na 16 16 |        |             |                 ; that addr later for the name string, so we push it to the
2010:000 | DONE cmt | na 16 16 |        |             |                 ; Return Stack. We'll clean up the Data Stack later
2011:000 | DONE ins | na 16 16 | 0065e3 | b5 00       |                 lda.dx 00            
2012:000 | DONE ins | na 16 16 | 0065e5 | 48          |                 pha                  
2013:000 | DONE wsp | na 16 16 |        |             |
2014:000 | DONE cmt | na 16 16 |        |             |                 ; HEADER BYTES 0,1: Length byte and flags
2015:000 | DONE ins | na 16 16 | 0065e6 | a0 00 00    |                 ldy.# 0000           Y is now an index, not TOS
2016:000 | DONE ins | na 16 16 | 0065e9 | a5 0c       |                 lda.d 00020c         get length byte
2017:000 | DONE ins | na 16 16 | 0065eb | 91 0a       |                 sta.diy 00020a       STA (TMP1),Y
2018:000 | DONE ins | na 16 16 | 0065ed | c8          |                 iny                  
2019:000 | DONE ins | na 16 16 | 0065ee | c8          |                 iny                  
2020:000 | DONE wsp | na 16 16 |        |             |
2021:000 | DONE cmt | na 16 16 |        |             |                 ; BYTES 2,3: Next word in the dictionary (its nt). This is the
2022:000 | DONE cmt | na 16 16 |        |             |                 ; current Dictionary Pointer
2023:000 | DONE ins | na 16 16 | 0065ef | a5 2a       |                 lda.d 00022a         
2024:000 | DONE ins | na 16 16 | 0065f1 | 91 0a       |                 sta.diy 00020a       
2025:000 | DONE ins | na 16 16 | 0065f3 | c8          |                 iny                  
2026:000 | DONE ins | na 16 16 | 0065f4 | c8          |                 iny                  
2027:000 | DONE wsp | na 16 16 |        |             |
2028:000 | DONE cmt | na 16 16 |        |             |                 ; BYTES 4,5: Start of code field (xt of this word, "xt_" link)
2029:000 | DONE cmt | na 16 16 |        |             |                 ; This begins after the header, so we take the length of the
2030:000 | DONE cmt | na 16 16 |        |             |                 ; header, which we saved in tmp3, and use it as an offset to
2031:000 | DONE cmt | na 16 16 |        |             |                 ; the address of the start of the word
2032:000 | DONE ins | na 16 16 | 0065f5 | a5 0a       |                 lda.d 00020a         can't use CP, because we've allotted space
2033:000 | DONE ins | na 16 16 | 0065f7 | 85 2a       |                 sta.d 00022a         while we've got it, make old CP the new DP
2034:000 | DONE wsp | na 16 16 |        |             |
2035:000 | DONE ins | na 16 16 | 0065f9 | 18          |                 clc                  
2036:000 | DONE ins | na 16 16 | 0065fa | 65 0e       |                 adc.d 00020e         total header length
2037:000 | DONE ins | na 16 16 | 0065fc | 91 0a       |                 sta.diy 00020a       
2038:000 | DONE ins | na 16 16 | 0065fe | c8          |                 iny                  
2039:000 | DONE ins | na 16 16 | 0065ff | c8          |                 iny                  
2040:000 | DONE wsp | na 16 16 |        |             |
2041:000 | DONE cmt | na 16 16 |        |             |                 ; BYTES 6,7: End of code ("z_" link)
2042:000 | DONE cmt | na 16 16 |        |             |                 ; By default, we execute a jump to the DOVAR routine, so we need
2043:000 | DONE cmt | na 16 16 |        |             |                 ; to move three bytes down, and then one more byte so the z_
2044:000 | DONE cmt | na 16 16 |        |             |                 ; label points to the (fictional) RTS instruction for correct
2045:000 | DONE cmt | na 16 16 |        |             |                 ; compilation. The start of the code field is still in A
2046:000 | DONE ins | na 16 16 | 006600 | 1a          |                 inc.a                
2047:000 | DONE ins | na 16 16 | 006601 | 1a          |                 inc.a                
2048:000 | DONE ins | na 16 16 | 006602 | 1a          |                 inc.a                
2049:000 | DONE ins | na 16 16 | 006603 | 91 0a       |                 sta.diy 00020a       
2050:000 | DONE ins | na 16 16 | 006605 | c8          |                 iny                  
2051:000 | DONE ins | na 16 16 | 006606 | c8          |                 iny                  
2052:000 | DONE wsp | na 16 16 |        |             |
2053:000 | DONE cmt | na 16 16 |        |             |                 ; BYTE 8: Start of name string
2054:000 | DONE cmt | na 16 16 |        |             |                 ; The addr of the string is on the Return Stack, the length of
2055:000 | DONE cmt | na 16 16 |        |             |                 ; the name string is in tmp2. We subtract eight from the address
2056:000 | DONE cmt | na 16 16 |        |             |                 ; so we can use the same loop index
2057:000 | DONE ins | na 16 16 | 006607 | 68          |                 pla                  get back string address
2058:000 | DONE ins | na 16 16 | 006608 | 38          |                 sec                  
2059:000 | DONE ins | na 16 16 | 006609 | e9 08 00    |                 sbc.# 0008           
2060:000 | DONE ins | na 16 16 | 00660c | 85 0e       |                 sta.d 00020e         
2061:000 | DONE ins | na 16 16 | 00660e | e2 20       |                 sep 20               
2061:001 | DONE ctl | na  8 16 |        |             |         .!a8
2062:000 | DONE lbl | na  8 16 | 006610 |             | @                                    
2063:000 | DONE ins | na  8 16 | 006610 | b1 0e       |                 lda.diy 00020e       
2064:000 | DONE ins | na  8 16 | 006612 | 91 0a       |                 sta.diy 00020a       
2065:000 | DONE ins | na  8 16 | 006614 | c8          |                 iny                  
2066:000 | DONE ins | na  8 16 | 006615 | c6 0c       |                 dec.d 00020c         
2067:000 | DONE ins | na  8 16 | 006617 | d0 f7       |                 bne 006610           
2068:000 | DONE wsp | na  8 16 |        |             |
2069:000 | DONE cmt | na  8 16 |        |             |                 ; After the name string, comes the Code Field (start at xt, that
2070:000 | DONE cmt | na  8 16 |        |             |                 ; is, the xt_ label of the word) which is initially a jump to the
2071:000 | DONE cmt | na  8 16 |        |             |                 ; subroutine to DOVAR. We're still in 8-bit A-register, which is
2072:000 | DONE cmt | na  8 16 |        |             |                 ; good
2073:000 | DONE ins | na  8 16 | 006619 | a9 20       |                 lda.# 20             opcode of JSR
2074:000 | DONE ins | na  8 16 | 00661b | 91 0a       |                 sta.diy 00020a       
2075:000 | DONE ins | na  8 16 | 00661d | c8          |                 iny                  single increase only because we have 8-bit A
2076:000 | DONE wsp | na  8 16 |        |             |
2077:000 | DONE ins | na  8 16 | 00661e | a9 7b       |                 lda.# .lsb 00757b    
2078:000 | DONE ins | na  8 16 | 006620 | 91 0a       |                 sta.diy 00020a       
2079:000 | DONE ins | na  8 16 | 006622 | c8          |                 iny                  
2080:000 | DONE wsp | na  8 16 |        |             |
2081:000 | DONE ins | na  8 16 | 006623 | a9 75       |                 lda.# .msb 00757b    
2082:000 | DONE ins | na  8 16 | 006625 | 91 0a       |                 sta.diy 00020a       
2083:000 | DONE wsp | na  8 16 |        |             |
2084:000 | DONE ins | na  8 16 | 006627 | c2 20       |                 rep 20               
2084:001 | DONE ctl | na 16 16 |        |             |         .!a16
2085:000 | DONE cmt | na 16 16 |        |             |                 ; We're done. Restore Data Stack (2DROP)
2086:000 | DONE ins | na 16 16 | 006629 | b4 02       |                 ldy.dx 02            
2087:000 | DONE ins | na 16 16 | 00662b | e8          |                 inx                  
2088:000 | DONE ins | na 16 16 | 00662c | e8          |                 inx                  
2089:000 | DONE ins | na 16 16 | 00662d | e8          |                 inx                  
2090:000 | DONE ins | na 16 16 | 00662e | e8          |                 inx                  
2091:000 | DONE wsp | na 16 16 |        |             |
2092:000 | DONE lbl | na 16 16 | 00662f |             | z_create                             
2092:001 | DONE ins | na 16 16 | 00662f | 60          |                 rts                  
2093:000 | DONE wsp | na 16 16 |        |             |
2094:000 | DONE wsp | na 16 16 |        |             |
2095:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
2096:000 | DONE cmt | na 16 16 |        |             | ; DIGIT? ( char -- u f | char f )  X bytes / X cycles
2097:000 | DONE cmt | na 16 16 |        |             | ; Convert a single ASCII character to a number in the current radix. Inspired by
2098:000 | DONE cmt | na 16 16 |        |             | ; the pForth instruction DIGIT in pForth, see
2099:000 | DONE cmt | na 16 16 |        |             | ; https://github.com/philburk/pforth/blob/master/fth/numberio.fth
2100:000 | DONE cmt | na 16 16 |        |             | ; Rewritten from DIGIT>NUMBER in Tali Forth. Note in contrast to pForth, we get
2101:000 | DONE cmt | na 16 16 |        |             | ; the base (radix) ourselves instead of having the user provide it. There is no
2102:000 | DONE cmt | na 16 16 |        |             | ; standard name for this routine, which itself is not ANSI; we use DIGIT?
2103:000 | DONE cmt | na 16 16 |        |             | ; following pForth and Gforth.
2104:000 | DONE lbl | na 16 16 | 006630 |             | xt_digitq                            
2105:000 | DONE dir | na 16 16 |        |             |         .!a16                        
2106:000 | DONE ins | na 16 16 | 006630 | 98          |                 tya                  
2107:000 | DONE ins | na 16 16 | 006631 | 29 ff 00    |                 and.# 00ff           paranoid
2108:000 | DONE wsp | na 16 16 |        |             |
2109:000 | DONE ins | na 16 16 | 006634 | e2 20       |                 sep 20               
2109:001 | DONE ctl | na  8 16 |        |             |         .!a8
2110:000 | DONE cmt | na  8 16 |        |             |                 ; Make sure we're not below the ASCII code for '0'
2111:000 | DONE ins | na  8 16 | 006636 | c9 30       |                 cmp.# 30             
2112:000 | DONE ins | na  8 16 | 006638 | 90 1d       |                 bcc 006657           
2113:000 | DONE wsp | na  8 16 |        |             |
2114:000 | DONE cmt | na  8 16 |        |             |                 ; Then see if we are below '9', because that would make this
2115:000 | DONE cmt | na  8 16 |        |             |                 ; a normal number
2116:000 | DONE ins | na  8 16 | 00663a | c9 3a       |                 cmp.# 00003a         This is ':'
2117:000 | DONE ins | na  8 16 | 00663c | 90 12       |                 bcc 006650           
2118:000 | DONE wsp | na  8 16 |        |             |
2119:000 | DONE cmt | na  8 16 |        |             |                 ; Well, then let's see if this is the gap between '9' and 'A' so
2120:000 | DONE cmt | na  8 16 |        |             |                 ; we can treat the whole range as a number
2121:000 | DONE ins | na  8 16 | 00663e | c9 40       |                 cmp.# 000040         This is '@'
2122:000 | DONE ins | na  8 16 | 006640 | 90 15       |                 bcc 006657           
2123:000 | DONE wsp | na  8 16 |        |             |
2124:000 | DONE cmt | na  8 16 |        |             |                 ; Probably a letter, so we make sure it is uppercase
2125:000 | DONE ins | na  8 16 | 006642 | c9 61       |                 cmp.# 61             
2126:000 | DONE ins | na  8 16 | 006644 | 90 07       |                 bcc 00664d           not lower case, too low
2127:000 | DONE ins | na  8 16 | 006646 | c9 7b       |                 cmp.# 00007b         
2128:000 | DONE ins | na  8 16 | 006648 | b0 03       |                 bcs 00664d           not lower case, too high
2129:000 | DONE wsp | na  8 16 |        |             |
2130:000 | DONE ins | na  8 16 | 00664a | 18          |                 clc                  just right
2131:000 | DONE ins | na  8 16 | 00664b | 69 e0       |                 adc.# e0             offset to uppercase (wraps)
2132:000 | DONE wsp | na  8 16 |        |             |
2133:000 | DONE lbl | na  8 16 | 00664d |             | dq_case_done                         
2134:000 | DONE cmt | na  8 16 |        |             |                 ; Get rid of the gap between '9' and 'A' so we can treat the
2135:000 | DONE cmt | na  8 16 |        |             |                 ; whole range as one number
2136:000 | DONE ins | na  8 16 | 00664d | 38          |                 sec                  
2137:000 | DONE ins | na  8 16 | 00664e | e9 07       |                 sbc.# 07             fall through to dq_checkbase
2138:000 | DONE wsp | na  8 16 |        |             |
2139:000 | DONE lbl | na  8 16 | 006650 |             | dq_checkbase                         
2140:000 | DONE cmt | na  8 16 |        |             |                 ; We have a number, now see if it inside the range given by BASE
2141:000 | DONE ins | na  8 16 | 006650 | 38          |                 sec                  
2142:000 | DONE ins | na  8 16 | 006651 | e9 30       |                 sbc.# 30             This is also the actual conversion step
2143:000 | DONE ins | na  8 16 | 006653 | c5 24       |                 cmp.d 000224         
2144:000 | DONE ins | na  8 16 | 006655 | 90 0b       |                 bcc 006662           
2145:000 | DONE wsp | na  8 16 |        |             |
2146:000 | DONE lbl | na  8 16 | 006657 |             | dq_notdigit                          
2147:000 | DONE cmt | na  8 16 |        |             |                 ; not a digit, add a false flag
2148:000 | DONE ins | na  8 16 | 006657 | ca          |                 dex                  
2149:000 | DONE ins | na  8 16 | 006658 | ca          |                 dex                  
2150:000 | DONE ins | na  8 16 | 006659 | 94 00       |                 sty.dx 00            keep the offending character in NOS
2151:000 | DONE ins | na  8 16 | 00665b | a0 00 00    |                 ldy.# 0000           
2152:000 | DONE ins | na  8 16 | 00665e | c2 20       |                 rep 20               
2152:001 | DONE ctl | na 16 16 |        |             |         .!a16
2153:000 | DONE ins | na 16 16 | 006660 | 80 09       |                 bra 00666b           
2154:000 | DONE wsp | na 16 16 |        |             |
2155:000 | DONE lbl | na 16 16 | 006662 |             | dq_success                           
2156:000 | DONE ins | na 16 16 | 006662 | ca          |                 dex                  
2157:000 | DONE ins | na 16 16 | 006663 | ca          |                 dex                  
2158:000 | DONE ins | na 16 16 | 006664 | c2 20       |                 rep 20               
2158:001 | DONE ctl | na 16 16 |        |             |         .!a16
2159:000 | DONE ins | na 16 16 | 006666 | 95 00       |                 sta.dx 00            put the number in NOS
2160:000 | DONE ins | na 16 16 | 006668 | a0 ff ff    |                 ldy.# 0ffff          
2161:000 | DONE wsp | na 16 16 |        |             |
2162:000 | DONE lbl | na 16 16 | 00666b |             | z_digitq                             
2162:001 | DONE ins | na 16 16 | 00666b | 60          |                 rts                  
2163:000 | DONE wsp | na 16 16 |        |             |
2164:000 | DONE wsp | na 16 16 |        |             |
2165:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
2166:000 | DONE cmt | na 16 16 |        |             | ; DPLUS ( d d -- d ) X bytes / X cycles
2167:000 | DONE cmt | na 16 16 |        |             | ; Add two double cell numbers
2168:000 | DONE lbl | na 16 16 | 00666c |             | xt_dplus                             
2169:000 | DONE dir | na 16 16 |        |             |         .!a16                        
2170:000 | DONE ins | na 16 16 | 00666c | 5a          |                 phy                  save hi word of first number, frees Y
2171:000 | DONE ins | na 16 16 | 00666d | b5 00       |                 lda.dx 00            lo word of first number
2172:000 | DONE ins | na 16 16 | 00666f | 18          |                 clc                  
2173:000 | DONE ins | na 16 16 | 006670 | 75 04       |                 adc.dx 04            add lo word of second number
2174:000 | DONE ins | na 16 16 | 006672 | a8          |                 tay                  
2175:000 | DONE wsp | na 16 16 |        |             |
2176:000 | DONE ins | na 16 16 | 006673 | 68          |                 pla                  get hi word of first number
2177:000 | DONE ins | na 16 16 | 006674 | 75 02       |                 adc.dx 02            add hi word of second number
2178:000 | DONE wsp | na 16 16 |        |             |
2179:000 | DONE ins | na 16 16 | 006676 | e8          |                 inx                  
2180:000 | DONE ins | na 16 16 | 006677 | e8          |                 inx                  
2181:000 | DONE ins | na 16 16 | 006678 | e8          |                 inx                  
2182:000 | DONE ins | na 16 16 | 006679 | e8          |                 inx                  
2183:000 | DONE wsp | na 16 16 |        |             |
2184:000 | DONE ins | na 16 16 | 00667a | 94 00       |                 sty.dx 00            lo result goes NOS
2185:000 | DONE ins | na 16 16 | 00667c | a8          |                 tay                  to result goes TOS
2186:000 | DONE wsp | na 16 16 |        |             |
2187:000 | DONE lbl | na 16 16 | 00667d |             | z_dplus                              
2187:001 | DONE ins | na 16 16 | 00667d | 60          |                 rts                  
2188:000 | DONE wsp | na 16 16 |        |             |
2189:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
2190:000 | DONE cmt | na 16 16 |        |             | ; DMINUS ( d d -- d ) X bytes / X cycles
2191:000 | DONE cmt | na 16 16 |        |             | ; Subtract two double cell numbers
2192:000 | DONE lbl | na 16 16 | 00667e |             | xt_dminus                            
2193:000 | DONE dir | na 16 16 |        |             |         .!a16                        
2194:000 | DONE ins | na 16 16 | 00667e | b5 04       |                 lda.dx 04            lo word NOS
2195:000 | DONE ins | na 16 16 | 006680 | 38          |                 sec                  
2196:000 | DONE ins | na 16 16 | 006681 | f5 00       |                 sbc.dx 00            lo word TOS
2197:000 | DONE ins | na 16 16 | 006683 | 48          |                 pha                  
2198:000 | DONE wsp | na 16 16 |        |             |
2199:000 | DONE ins | na 16 16 | 006684 | 94 00       |                 sty.dx 00            use as temp storage for hi word TOS
2200:000 | DONE ins | na 16 16 | 006686 | b5 02       |                 lda.dx 02            hi word, NOS
2201:000 | DONE ins | na 16 16 | 006688 | f5 00       |                 sbc.dx 00            hi word, TOS
2202:000 | DONE ins | na 16 16 | 00668a | a8          |                 tay                  result hi word now TOS
2203:000 | DONE wsp | na 16 16 |        |             |
2204:000 | DONE ins | na 16 16 | 00668b | e8          |                 inx                  
2205:000 | DONE ins | na 16 16 | 00668c | e8          |                 inx                  
2206:000 | DONE ins | na 16 16 | 00668d | e8          |                 inx                  
2207:000 | DONE ins | na 16 16 | 00668e | e8          |                 inx                  
2208:000 | DONE wsp | na 16 16 |        |             |
2209:000 | DONE ins | na 16 16 | 00668f | 68          |                 pla                  
2210:000 | DONE ins | na 16 16 | 006690 | 95 00       |                 sta.dx 00            result lo word now NOS
2211:000 | DONE wsp | na 16 16 |        |             |
2212:000 | DONE lbl | na 16 16 | 006692 |             | z_dminus                             
2212:001 | DONE ins | na 16 16 | 006692 | 60          |                 rts                  
2213:000 | DONE wsp | na 16 16 |        |             |
2214:000 | DONE wsp | na 16 16 |        |             |
2215:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
2216:000 | DONE cmt | na 16 16 |        |             | ; D>S ( ud -- u ) X bytes / X cycles
2217:000 | DONE cmt | na 16 16 |        |             | ; Convert double cell number to single cell. Note this currently does not
2218:000 | DONE cmt | na 16 16 |        |             | ; respect the sign, in constrast to Gforth - this is simply DROP
2219:000 | DONE cmt | na 16 16 |        |             | ; TODO make this work the way Gforth's does
2220:000 | DONE lbl | na 16 16 | 006693 |             | xt_dtos                              
2221:000 | DONE dir | na 16 16 |        |             |         .!a16                        
2222:000 | DONE ins | na 16 16 | 006693 | b4 00       |                 ldy.dx 00            
2223:000 | DONE ins | na 16 16 | 006695 | e8          |                 inx                  
2224:000 | DONE ins | na 16 16 | 006696 | e8          |                 inx                  
2225:000 | DONE wsp | na 16 16 |        |             |
2226:000 | DONE lbl | na 16 16 | 006697 |             | z_dtos                               
2226:001 | DONE ins | na 16 16 | 006697 | 60          |                 rts                  
2227:000 | DONE wsp | na 16 16 |        |             |
2228:000 | DONE wsp | na 16 16 |        |             |
2229:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
2230:000 | DONE cmt | na 16 16 |        |             | ; DABS ( d -- ud ) X bytes / X cycles
2231:000 | DONE cmt | na 16 16 |        |             | ; Return the absolute value of a double number
2232:000 | DONE cmt | na 16 16 |        |             | ; TODO recode in assembler
2233:000 | DONE lbl | na 16 16 | 006698 |             | xt_dabs                              
2234:000 | DONE cmt | na 16 16 |        |             |                 ; double cell is TOS
2235:000 | DONE ins | na 16 16 | 006698 | 98          |                 tya                  force flag test
2236:000 | DONE ins | na 16 16 | 006699 | f0 03       |                 beq 00669e           already positive, life is good
2237:000 | DONE wsp | na 16 16 |        |             |
2238:000 | DONE ins | na 16 16 | 00669b | 20 b4 66    |                 jsr 0066b4           
2239:000 | DONE wsp | na 16 16 |        |             |
2240:000 | DONE lbl | na 16 16 | 00669e |             | z_dabs                               
2240:001 | DONE ins | na 16 16 | 00669e | 60          |                 rts                  
2241:000 | DONE wsp | na 16 16 |        |             |
2242:000 | DONE wsp | na 16 16 |        |             |
2243:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
2244:000 | DONE cmt | na 16 16 |        |             | ; DECIMAL ( -- ) 7 bytes / X cycles
2245:000 | DONE cmt | na 16 16 |        |             | ; Change radix for number conversion to 10
2246:000 | DONE lbl | na 16 16 | 00669f |             | xt_decimal                           
2247:000 | DONE dir | na 16 16 |        |             |         .!a16                        
2248:000 | DONE ins | na 16 16 | 00669f | a9 0a 00    |                 lda.# 000a           
2249:000 | DONE ins | na 16 16 | 0066a2 | 85 24       |                 sta.d 000224         
2250:000 | DONE wsp | na 16 16 |        |             |
2251:000 | DONE lbl | na 16 16 | 0066a4 |             | z_decimal                            
2251:001 | DONE ins | na 16 16 | 0066a4 | 60          |                 rts                  
2252:000 | DONE wsp | na 16 16 |        |             |
2253:000 | DONE wsp | na 16 16 |        |             |
2254:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
2255:000 | DONE cmt | na 16 16 |        |             | ; DEPTH ( -- u ) 14 bytes / X cycles
2256:000 | DONE cmt | na 16 16 |        |             | ; Push the number of entries in cells (not bytes) on the parameter stack.
2257:000 | DONE cmt | na 16 16 |        |             | ; Assumes X is valid as the DSP.
2258:000 | DONE lbl | na 16 16 | 0066a5 |             | xt_depth                             
2259:000 | DONE dir | na 16 16 |        |             |         .!a16                        
2260:000 | DONE cmt | na 16 16 |        |             |                 ; We've got zero entries when X is dsp0
2261:000 | DONE ins | na 16 16 | 0066a5 | 86 10       |                 stx.d 000210         
2262:000 | DONE ins | na 16 16 | 0066a7 | a9 f0 02    |                 lda.# 0002f0         
2263:000 | DONE ins | na 16 16 | 0066aa | 38          |                 sec                  
2264:000 | DONE ins | na 16 16 | 0066ab | e5 10       |                 sbc.d 000210         
2265:000 | DONE wsp | na 16 16 |        |             |
2266:000 | DONE cmt | na 16 16 |        |             |                 ; now divide by two because each cells is to bytes long
2267:000 | DONE ins | na 16 16 | 0066ad | 4a          |                 lsr.a                
2268:000 | DONE wsp | na 16 16 |        |             |
2269:000 | DONE ins | na 16 16 | 0066ae | ca          |                 dex                  
2270:000 | DONE ins | na 16 16 | 0066af | ca          |                 dex                  
2271:000 | DONE ins | na 16 16 | 0066b0 | 94 00       |                 sty.dx 00            
2272:000 | DONE wsp | na 16 16 |        |             |
2273:000 | DONE cmt | na 16 16 |        |             |                 ; push result to stack
2274:000 | DONE ins | na 16 16 | 0066b2 | a8          |                 tay                  
2275:000 | DONE wsp | na 16 16 |        |             |
2276:000 | DONE lbl | na 16 16 | 0066b3 |             | z_depth                              
2276:001 | DONE ins | na 16 16 | 0066b3 | 60          |                 rts                  
2277:000 | DONE wsp | na 16 16 |        |             |
2278:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
2279:000 | DONE cmt | na 16 16 |        |             | ; DNEGATE ( d -- d ) 19 bytes / X cycles
2280:000 | DONE cmt | na 16 16 |        |             | ; Change the sign of a double number. This is the double equivalent of NEGATE
2281:000 | DONE lbl | na 16 16 | 0066b4 |             | xt_dnegate                           
2282:000 | DONE dir | na 16 16 |        |             |         .!a16                        
2283:000 | DONE cmt | na 16 16 |        |             |                 ; start off with LSW (in NOS)
2284:000 | DONE ins | na 16 16 | 0066b4 | b5 00       |                 lda.dx 00            
2285:000 | DONE ins | na 16 16 | 0066b6 | 49 ff ff    |                 eor.# 0ffff          
2286:000 | DONE wsp | na 16 16 |        |             |
2287:000 | DONE cmt | na 16 16 |        |             |                 ; INC doesn't affect the carry flag, so we have to do this the
2288:000 | DONE cmt | na 16 16 |        |             |                 ; hard way
2289:000 | DONE ins | na 16 16 | 0066b9 | 18          |                 clc                  
2290:000 | DONE ins | na 16 16 | 0066ba | 69 01 00    |                 adc.# 0001           
2291:000 | DONE ins | na 16 16 | 0066bd | 95 00       |                 sta.dx 00            
2292:000 | DONE wsp | na 16 16 |        |             |
2293:000 | DONE cmt | na 16 16 |        |             |                 ; now MSW (in TOS)
2294:000 | DONE ins | na 16 16 | 0066bf | 98          |                 tya                  
2295:000 | DONE ins | na 16 16 | 0066c0 | 49 ff ff    |                 eor.# 0ffff          
2296:000 | DONE ins | na 16 16 | 0066c3 | 69 00 00    |                 adc.# 0000           we are only interested in the carry
2297:000 | DONE ins | na 16 16 | 0066c6 | a8          |                 tay                  
2298:000 | DONE wsp | na 16 16 |        |             |
2299:000 | DONE lbl | na 16 16 | 0066c7 |             | z_dnegate                            
2299:001 | DONE ins | na 16 16 | 0066c7 | 60          |                 rts                  
2300:000 | DONE wsp | na 16 16 |        |             |
2301:000 | DONE wsp | na 16 16 |        |             |
2302:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
2303:000 | DONE cmt | na 16 16 |        |             | ; DOES> ( -- ) X bytes / X cycles
2304:000 | DONE cmt | na 16 16 |        |             | ; Create the payload for defining new defining words. See the file
2305:000 | DONE cmt | na 16 16 |        |             | ; docs/create-does.txt and
2306:000 | DONE cmt | na 16 16 |        |             | ; http://www.bradrodriguez.com/papers/moving3.htm for a discussion of
2307:000 | DONE cmt | na 16 16 |        |             | ; DOES>'s internal workings. This uses tmp1 and tmp2
2308:000 | DONE lbl | na 16 16 | 0066c8 |             | xt_does                              
2309:000 | DONE cmt | na 16 16 |        |             |                 ; compile a subroutine jump to the runtime of DOES>
2310:000 | DONE ins | na 16 16 | 0066c8 | f4 d5 66    |                 phe.# 0066d5         
2311:000 | DONE ins | na 16 16 | 0066cb | 20 dc 75    |                 jsr 0075dc           
2312:000 | DONE wsp | na 16 16 |        |             |
2313:000 | DONE cmt | na 16 16 |        |             |                 ; compile a subroutine jump to DODOES. In traditional terms,
2314:000 | DONE cmt | na 16 16 |        |             |                 ; this is the Code Field Area (CFA) of the new word
2315:000 | DONE ins | na 16 16 | 0066ce | f4 6e 75    |                 phe.# 00756e         
2316:000 | DONE ins | na 16 16 | 0066d1 | 20 dc 75    |                 jsr 0075dc           
2317:000 | DONE wsp | na 16 16 |        |             |
2318:000 | DONE lbl | na 16 16 | 0066d4 |             | z_does                               
2318:001 | DONE ins | na 16 16 | 0066d4 | 60          |                 rts                  
2319:000 | DONE wsp | na 16 16 |        |             |
2320:000 | DONE lbl | na 16 16 | 0066d5 |             | does_rt                              
2321:000 | DONE cmt | na 16 16 |        |             |                 ; Runtime portion of DOES>. This replaces the subroutine jump to
2322:000 | DONE cmt | na 16 16 |        |             |                 ; DOVAR that CREATE automatically encodes by a jump to the
2323:000 | DONE cmt | na 16 16 |        |             |                 ; address that contains a subroutine jump to DODOES. We don't
2324:000 | DONE cmt | na 16 16 |        |             |                 ; jump to DODOES directly because we need to work our magic with
2325:000 | DONE cmt | na 16 16 |        |             |                 ; the return addresses
2326:000 | DONE ins | na 16 16 | 0066d5 | 68          |                 pla                  
2327:000 | DONE ins | na 16 16 | 0066d6 | 1a          |                 inc.a                increase by one because of RTS mechanics
2328:000 | DONE ins | na 16 16 | 0066d7 | 85 0a       |                 sta.d 00020a         
2329:000 | DONE wsp | na 16 16 |        |             |
2330:000 | DONE cmt | na 16 16 |        |             |                 ; CREATE has also already modified the DP to point to the new
2331:000 | DONE cmt | na 16 16 |        |             |                 ; word. We have no idea which instructions followed the CREATE
2332:000 | DONE cmt | na 16 16 |        |             |                 ; command if there is a DOES> so the CP could point anywhere by
2333:000 | DONE cmt | na 16 16 |        |             |                 ; now.
2334:000 | DONE ins | na 16 16 | 0066d9 | a5 2a       |                 lda.d 00022a         
2335:000 | DONE wsp | na 16 16 |        |             |
2336:000 | DONE cmt | na 16 16 |        |             |                 ; The address of the word's xt is four bytes down (see
2337:000 | DONE cmt | na 16 16 |        |             |                 ; header.tasm for details).
2338:000 | DONE ins | na 16 16 | 0066db | 18          |                 clc                  
2339:000 | DONE ins | na 16 16 | 0066dc | 69 04 00    |                 adc.# 0004           
2340:000 | DONE ins | na 16 16 | 0066df | 85 0c       |                 sta.d 00020c         
2341:000 | DONE wsp | na 16 16 |        |             |
2342:000 | DONE cmt | na 16 16 |        |             |                 ; Now we get that address and add one byte to skip over the JSR
2343:000 | DONE cmt | na 16 16 |        |             |                 ; opcode
2344:000 | DONE ins | na 16 16 | 0066e1 | b2 0c       |                 lda.di 00020c        LDA (TMP2)
2345:000 | DONE ins | na 16 16 | 0066e3 | 1a          |                 inc.a                
2346:000 | DONE ins | na 16 16 | 0066e4 | 85 0c       |                 sta.d 00020c         Points to address to be replaced
2347:000 | DONE wsp | na 16 16 |        |             |
2348:000 | DONE cmt | na 16 16 |        |             |                 ; Replace the DOVAR address
2349:000 | DONE ins | na 16 16 | 0066e6 | a5 0a       |                 lda.d 00020a         
2350:000 | DONE ins | na 16 16 | 0066e8 | 92 0c       |                 sta.di 00020c        STA (TMP2)
2351:000 | DONE wsp | na 16 16 |        |             |
2352:000 | DONE cmt | na 16 16 |        |             |                 ; Since we removed the return address that brought us here, we
2353:000 | DONE cmt | na 16 16 |        |             |                 ; go back to whatever the main routine was. Otherwise, we we
2354:000 | DONE cmt | na 16 16 |        |             |                 ; smash into the subroutine jump to DODOES.
2355:000 | DONE ins | na 16 16 | 0066ea | 60          |                 rts                  
2356:000 | DONE wsp | na 16 16 |        |             |
2357:000 | DONE wsp | na 16 16 |        |             |
2358:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
2359:000 | DONE cmt | na 16 16 |        |             | ; DROP ( n -- ) 4 bytes / 9 cycles
2360:000 | DONE cmt | na 16 16 |        |             | ; Drop first entry on Data Stack
2361:000 | DONE wsp | na 16 16 |        |             |
2362:000 | DONE lbl | na 16 16 | 0066eb |             | xt_drop                              
2363:000 | DONE dir | na 16 16 |        |             |         .!xy16                       
2364:000 | DONE ins | na 16 16 | 0066eb | b4 00       |                 ldy.dx 00            
2365:000 | DONE ins | na 16 16 | 0066ed | e8          |                 inx                  
2366:000 | DONE ins | na 16 16 | 0066ee | e8          |                 inx                  
2367:000 | DONE wsp | na 16 16 |        |             |
2368:000 | DONE lbl | na 16 16 | 0066ef |             | z_drop                               
2368:001 | DONE ins | na 16 16 | 0066ef | 60          |                 rts                  
2369:000 | DONE wsp | na 16 16 |        |             |
2370:000 | DONE wsp | na 16 16 |        |             |
2371:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
2372:000 | DONE cmt | na 16 16 |        |             | ; DUMP ( addr u -- ) X bytes / X cycles
2373:000 | DONE cmt | na 16 16 |        |             | ; Print region of memory in a pretty way.
2374:000 | DONE cmt | na 16 16 |        |             | ; TODO This is a crude, temporary version for testing. Rewrite ASAP
2375:000 | DONE lbl | na 16 16 | 0066f0 |             | xt_dump                              
2376:000 | DONE cmt | na 16 16 |        |             |                 ; we use tmp1 as a counter because we need Y for other
2377:000 | DONE cmt | na 16 16 |        |             |                 ; stuff
2378:000 | DONE ins | na 16 16 | 0066f0 | 84 0a       |                 sty.d 00020a         
2379:000 | DONE wsp | na 16 16 |        |             |
2380:000 | DONE lbl | na 16 16 | 0066f2 |             | dump_line_loop                       
2381:000 | DONE ins | na 16 16 | 0066f2 | 20 b6 65    |                 jsr 0065b6           
2382:000 | DONE wsp | na 16 16 |        |             |
2383:000 | DONE cmt | na 16 16 |        |             |                 ; start internal counter for 16 numbers per row
2384:000 | DONE ins | na 16 16 | 0066f5 | a0 10 00    |                 ldy.# 0010           
2385:000 | DONE lbl | na 16 16 | 0066f8 |             | dump_byte_loop                       
2386:000 | DONE cmt | na 16 16 |        |             |                 ; if there are zero bytes left to display, we're done
2387:000 | DONE ins | na 16 16 | 0066f8 | a5 0a       |                 lda.d 00020a         
2388:000 | DONE ins | na 16 16 | 0066fa | f0 11       |                 beq 00670d           
2389:000 | DONE wsp | na 16 16 |        |             |
2390:000 | DONE cmt | na 16 16 |        |             |                 ; otherwise, print contents pointed to by address in NOS
2391:000 | DONE ins | na 16 16 | 0066fc | a1 00       |                 lda.dxi 00           
2392:000 | DONE ins | na 16 16 | 0066fe | 20 1b 76    |                 jsr 00761b           TODO replace by EMIT
2393:000 | DONE ins | na 16 16 | 006701 | 20 1d 6c    |                 jsr 006c1d           
2394:000 | DONE wsp | na 16 16 |        |             |
2395:000 | DONE cmt | na 16 16 |        |             |                 ; next character
2396:000 | DONE ins | na 16 16 | 006704 | f6 00       |                 inc.dx 00            
2397:000 | DONE wsp | na 16 16 |        |             |
2398:000 | DONE cmt | na 16 16 |        |             |                 ; loop counter
2399:000 | DONE ins | na 16 16 | 006706 | c6 0a       |                 dec.d 00020a         
2400:000 | DONE ins | na 16 16 | 006708 | 88          |                 dey                  
2401:000 | DONE ins | na 16 16 | 006709 | d0 ed       |                 bne 0066f8           
2402:000 | DONE ins | na 16 16 | 00670b | 80 e5       |                 bra 0066f2           
2403:000 | DONE wsp | na 16 16 |        |             |
2404:000 | DONE lbl | na 16 16 | 00670d |             | dump_done                            
2405:000 | DONE ins | na 16 16 | 00670d | 20 b6 65    |                 jsr 0065b6           
2406:000 | DONE wsp | na 16 16 |        |             |
2407:000 | DONE cmt | na 16 16 |        |             |                 ; drop everything and return
2408:000 | DONE cmt | na 16 16 |        |             |                 ; TODO replace by call of 2DROP
2409:000 | DONE ins | na 16 16 | 006710 | b4 02       |                 ldy.dx 02            
2410:000 | DONE ins | na 16 16 | 006712 | e8          |                 inx                  
2411:000 | DONE ins | na 16 16 | 006713 | e8          |                 inx                  
2412:000 | DONE ins | na 16 16 | 006714 | e8          |                 inx                  
2413:000 | DONE ins | na 16 16 | 006715 | e8          |                 inx                  
2414:000 | DONE wsp | na 16 16 |        |             |
2415:000 | DONE lbl | na 16 16 | 006716 |             | z_dump                               
2415:001 | DONE ins | na 16 16 | 006716 | 60          |                 rts                  
2416:000 | DONE wsp | na 16 16 |        |             |
2417:000 | DONE wsp | na 16 16 |        |             |
2418:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
2419:000 | DONE cmt | na 16 16 |        |             | ; DUP  ( n -- n n ) 4 bytes / 9 cycles
2420:000 | DONE cmt | na 16 16 |        |             | ; Duplicate first entry on Data Stack
2421:000 | DONE lbl | na 16 16 | 006717 |             | xt_dup                               
2422:000 | DONE dir | na 16 16 |        |             |         .!xy16                       
2423:000 | DONE ins | na 16 16 | 006717 | ca          |                 dex                  
2424:000 | DONE ins | na 16 16 | 006718 | ca          |                 dex                  
2425:000 | DONE ins | na 16 16 | 006719 | 94 00       |                 sty.dx 00            
2426:000 | DONE wsp | na 16 16 |        |             |
2427:000 | DONE lbl | na 16 16 | 00671b |             | z_dup                                
2427:001 | DONE ins | na 16 16 | 00671b | 60          |                 rts                  
2428:000 | DONE wsp | na 16 16 |        |             |
2429:000 | DONE wsp | na 16 16 |        |             |
2430:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
2431:000 | DONE cmt | na 16 16 |        |             | ; ERASE ( addr u -- ) X bytes / X cycles
2432:000 | DONE cmt | na 16 16 |        |             | ; Set a region of memory to zero. Uses tmp2
2433:000 | DONE lbl | na 16 16 | 00671c |             | xt_erase                             
2434:000 | DONE dir | na 16 16 |        |             |         .!a16                        
2435:000 | DONE ins | na 16 16 | 00671c | ca          |                 dex                  
2436:000 | DONE ins | na 16 16 | 00671d | ca          |                 dex                  
2437:000 | DONE ins | na 16 16 | 00671e | 94 00       |                 sty.dx 00            
2438:000 | DONE wsp | na 16 16 |        |             |
2439:000 | DONE ins | na 16 16 | 006720 | a0 00 00    |                 ldy.# 0000           falls through to FILL
2440:000 | DONE wsp | na 16 16 |        |             |
2441:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
2442:000 | DONE cmt | na 16 16 |        |             | ; FILL ( addr u b -- ) X bytes / X cycles
2443:000 | DONE cmt | na 16 16 |        |             | ; Fill the given region of memory with the LSB of the TOS. Shares code with
2444:000 | DONE cmt | na 16 16 |        |             | ; ERASE
2445:000 | DONE lbl | na 16 16 | 006723 |             | xt_fill                              
2446:000 | DONE ins | na 16 16 | 006723 | b5 02       |                 lda.dx 02            address is 3OS
2447:000 | DONE ins | na 16 16 | 006725 | 85 0c       |                 sta.d 00020c         
2448:000 | DONE wsp | na 16 16 |        |             |
2449:000 | DONE ins | na 16 16 | 006727 | 98          |                 tya                  
2450:000 | DONE ins | na 16 16 | 006728 | b4 00       |                 ldy.dx 00            don't bother with drop, to it later
2451:000 | DONE ins | na 16 16 | 00672a | e2 20       |                 sep 20               
2451:001 | DONE ctl | na  8 16 |        |             |         .!a8
2452:000 | DONE lbl | na  8 16 | 00672c |             | erase_loop                           
2453:000 | DONE ins | na  8 16 | 00672c | 88          |                 dey                  
2454:000 | DONE ins | na  8 16 | 00672d | 30 04       |                 bmi 006733           
2455:000 | DONE wsp | na  8 16 |        |             |
2456:000 | DONE ins | na  8 16 | 00672f | 91 0c       |                 sta.diy 00020c       
2457:000 | DONE ins | na  8 16 | 006731 | 80 f9       |                 bra 00672c           
2458:000 | DONE wsp | na  8 16 |        |             |
2459:000 | DONE lbl | na  8 16 | 006733 |             | erase_done                           
2460:000 | DONE ins | na  8 16 | 006733 | c2 20       |                 rep 20               
2460:001 | DONE ctl | na 16 16 |        |             |         .!a16
2461:000 | DONE ins | na 16 16 | 006735 | b4 02       |                 ldy.dx 02            dump three elements off the sack
2462:000 | DONE ins | na 16 16 | 006737 | 8a          |                 txa                  
2463:000 | DONE ins | na 16 16 | 006738 | 18          |                 clc                  
2464:000 | DONE ins | na 16 16 | 006739 | 69 06 00    |                 adc.# 0006           
2465:000 | DONE ins | na 16 16 | 00673c | aa          |                 tax                  
2466:000 | DONE lbl | na 16 16 | 00673d |             | z_fill                               
2467:000 | DONE lbl | na 16 16 | 00673d |             | z_erase                              
2467:001 | DONE ins | na 16 16 | 00673d | 60          |                 rts                  
2468:000 | DONE wsp | na 16 16 |        |             |
2469:000 | DONE wsp | na 16 16 |        |             |
2470:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
2471:000 | DONE cmt | na 16 16 |        |             | ; EVALUATE ( addr u -- ) X bytes / X cycles
2472:000 | DONE cmt | na 16 16 |        |             | ; Execute string. Set SOURCE-ID to -1, make addr u the input source,
2473:000 | DONE cmt | na 16 16 |        |             | ; set >IN to zero. After processing the line, revert to old input source.
2474:000 | DONE lbl | na 16 16 | 00673e |             | xt_evaluate                          
2475:000 | DONE cmt | na 16 16 |        |             |                 ; We follow pforth's procedure of pushing SOURCE, SOURCE-ID, and
2476:000 | DONE cmt | na 16 16 |        |             |                 ; >IN to the Return Stack
2477:000 | DONE ins | na 16 16 | 00673e | a5 20       |                 lda.d 000220         >IN
2478:000 | DONE ins | na 16 16 | 006740 | 48          |                 pha                  
2479:000 | DONE ins | na 16 16 | 006741 | a5 18       |                 lda.d 000218         Input Source (SOURCE-ID)
2480:000 | DONE ins | na 16 16 | 006743 | 48          |                 pha                  
2481:000 | DONE ins | na 16 16 | 006744 | a5 1a       |                 lda.d 00021a         
2482:000 | DONE ins | na 16 16 | 006746 | 48          |                 pha                  
2483:000 | DONE ins | na 16 16 | 006747 | a5 1c       |                 lda.d 00021c         
2484:000 | DONE ins | na 16 16 | 006749 | 48          |                 pha                  
2485:000 | DONE wsp | na 16 16 |        |             |
2486:000 | DONE cmt | na 16 16 |        |             |                 ; set SOURCE-ID to -1
2487:000 | DONE ins | na 16 16 | 00674a | a9 ff ff    |                 lda.# 0ffff          
2488:000 | DONE ins | na 16 16 | 00674d | 85 18       |                 sta.d 000218         
2489:000 | DONE wsp | na 16 16 |        |             |
2490:000 | DONE cmt | na 16 16 |        |             |                 ; set >IN to zero
2491:000 | DONE ins | na 16 16 | 00674f | 64 20       |                 stz.d 000220         
2492:000 | DONE wsp | na 16 16 |        |             |
2493:000 | DONE cmt | na 16 16 |        |             |                 ; move TOS and NOS to input buffers
2494:000 | DONE ins | na 16 16 | 006751 | 84 1c       |                 sty.d 00021c         
2495:000 | DONE ins | na 16 16 | 006753 | b5 00       |                 lda.dx 00            
2496:000 | DONE ins | na 16 16 | 006755 | 85 1a       |                 sta.d 00021a         
2497:000 | DONE wsp | na 16 16 |        |             |
2498:000 | DONE cmt | na 16 16 |        |             |                 ; dump address string from stack
2499:000 | DONE ins | na 16 16 | 006757 | b4 02       |                 ldy.dx 02            
2500:000 | DONE ins | na 16 16 | 006759 | e8          |                 inx                  
2501:000 | DONE ins | na 16 16 | 00675a | e8          |                 inx                  
2502:000 | DONE ins | na 16 16 | 00675b | e8          |                 inx                  
2503:000 | DONE ins | na 16 16 | 00675c | e8          |                 inx                  
2504:000 | DONE wsp | na 16 16 |        |             |
2505:000 | DONE ins | na 16 16 | 00675d | 20 82 75    |                 jsr 007582           
2506:000 | DONE wsp | na 16 16 |        |             |
2507:000 | DONE cmt | na 16 16 |        |             |                 ; restore state from before evaluate
2508:000 | DONE ins | na 16 16 | 006760 | 68          |                 pla                  
2509:000 | DONE ins | na 16 16 | 006761 | 85 1c       |                 sta.d 00021c         
2510:000 | DONE ins | na 16 16 | 006763 | 68          |                 pla                  
2511:000 | DONE ins | na 16 16 | 006764 | 85 1a       |                 sta.d 00021a         
2512:000 | DONE ins | na 16 16 | 006766 | 68          |                 pla                  
2513:000 | DONE ins | na 16 16 | 006767 | 85 18       |                 sta.d 000218         
2514:000 | DONE ins | na 16 16 | 006769 | 68          |                 pla                  
2515:000 | DONE ins | na 16 16 | 00676a | 85 20       |                 sta.d 000220         
2516:000 | DONE wsp | na 16 16 |        |             |
2517:000 | DONE lbl | na 16 16 | 00676c |             | z_evaluate                           
2517:001 | DONE ins | na 16 16 | 00676c | 60          |                 rts                  
2518:000 | DONE wsp | na 16 16 |        |             |
2519:000 | DONE wsp | na 16 16 |        |             |
2520:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
2521:000 | DONE cmt | na 16 16 |        |             | ; EXECUTE ( xt -- ) X bytes / X cycles
2522:000 | DONE cmt | na 16 16 |        |             | ; Run a word with help of its xt on the TOS
2523:000 | DONE wsp | na 16 16 |        |             |
2524:000 | DONE cmt | na 16 16 |        |             | ; Reserve three bytes for the jump - three in case we want to expand to the full
2525:000 | DONE cmt | na 16 16 |        |             | ; range
2526:000 | DONE cmt | na 16 16 |        |             | ; TODO move this to someplace that is assured to be RAM, not possibly ROM
2527:000 | DONE lbl | na 16 16 | 00676d |             | execute_ip                           
2527:001 | DONE dir | na 16 16 | 00676d | (3 bytes)   |         .byte 00, 00, 00             
2527:001 | DONE dir | na 16 16 |        |             |                 00 00 00                 --  . . .
2528:000 | DONE wsp | na 16 16 |        |             |
2529:000 | DONE lbl | na 16 16 | 006770 |             | xt_execute                           
2530:000 | DONE dir | na 16 16 |        |             |         .!a16                        
2531:000 | DONE dir | na 16 16 |        |             |         .!xy16                       
2532:000 | DONE cmt | na 16 16 |        |             |                 ; Store the xt for later use and then drop it off the stack
2533:000 | DONE ins | na 16 16 | 006770 | 8c 6d 67    |                 sty 00676d           
2534:000 | DONE ins | na 16 16 | 006773 | b4 00       |                 ldy.dx 00            
2535:000 | DONE ins | na 16 16 | 006775 | e8          |                 inx                  
2536:000 | DONE ins | na 16 16 | 006776 | e8          |                 inx                  
2537:000 | DONE wsp | na 16 16 |        |             |
2538:000 | DONE cmt | na 16 16 |        |             |                 ; Only JMP has the addressing mode we need. All our Forth
2539:000 | DONE cmt | na 16 16 |        |             |                 ; words end with a RTS instruction, so they will take us back to
2540:000 | DONE cmt | na 16 16 |        |             |                 ; the original caller of this routine without us having to muck
2541:000 | DONE cmt | na 16 16 |        |             |                 ; about with the Return Stack.
2542:000 | DONE ins | na 16 16 | 006777 | 6c 6d 67    |                 jmp.i 00676d         JMP (EXECUTE_IP)
2543:000 | DONE wsp | na 16 16 |        |             |
2544:000 | DONE lbl | na 16 16 | 00677a |             | z_execute                            
2544:001 | DONE ins | na 16 16 | 00677a | ea          |                 nop                  Never reached, see if we need the NOP
2545:000 | DONE wsp | na 16 16 |        |             |
2546:000 | DONE wsp | na 16 16 |        |             |
2547:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
2548:000 | DONE cmt | na 16 16 |        |             | ; FALSE ( -- f ) 7 bytes / 12 cycles
2549:000 | DONE cmt | na 16 16 |        |             | ; Pushes value $0000 for Forth true on Data Stack. This is the same code as for
2550:000 | DONE cmt | na 16 16 |        |             | ; ZERO, see there. Dictionary entry should have xt_zero/z_zero instead of
2551:000 | DONE cmt | na 16 16 |        |             | ; xt_false/z_false
2552:000 | DONE wsp | na 16 16 |        |             |
2553:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
2554:000 | DONE cmt | na 16 16 |        |             | ; FIND-NAME ( addr u -- nt | 0 ) 91 bytes / X cycles
2555:000 | DONE cmt | na 16 16 |        |             | ; Given a string, find the Name Token (nt) of a word or return zero if the word
2556:000 | DONE cmt | na 16 16 |        |             | ; is not in the dictionary. We use this instead of ancient FIND to look up words
2557:000 | DONE cmt | na 16 16 |        |             | ; in the Dictionary passed by PARSE-NAME. Note this returns the nt, not the xt
2558:000 | DONE cmt | na 16 16 |        |             | ; of a word like FIND. To convert, use NAME>INT. This is a Gforth word. See
2559:000 | DONE cmt | na 16 16 |        |             | ; https://www.complang.tuwien.ac.at/forth/gforth/Docs-html/Name-token.html
2560:000 | DONE cmt | na 16 16 |        |             | ; FIND calls this word for the hard word
2561:000 | DONE lbl | na 16 16 | 00677b |             | xt_find-name                         
2562:000 | DONE cmt | na 16 16 |        |             |                 ; We abort when we get an empty string, that is, one with
2563:000 | DONE cmt | na 16 16 |        |             |                 ; a length of zero TOS. We could test for this, but it will
2564:000 | DONE cmt | na 16 16 |        |             |                 ; happen so rarely that the speed penalty is higher if we run
2565:000 | DONE cmt | na 16 16 |        |             |                 ; the test for every single call. Looking for an empty string
2566:000 | DONE cmt | na 16 16 |        |             |                 ; does force us to check the whole dictionary, though. The test
2567:000 | DONE cmt | na 16 16 |        |             |                 ; would be 3 bytes and 4 to 6 cycles longer:
2568:000 | DONE cmt | na 16 16 |        |             |                 ;       tya                     ; force flag check
2569:000 | DONE cmt | na 16 16 |        |             |                 ;       beq find-name_failure
2570:000 | DONE dir | na 16 16 |        |             |         .!a16                        
2571:000 | DONE dir | na 16 16 |        |             |         .!xy16                       
2572:000 | DONE cmt | na 16 16 |        |             |                 ; set up loop for the first time
2573:000 | DONE ins | na 16 16 | 00677b | 84 12       |                 sty.d 000212         length of mystery string in tmptos, Y now free
2574:000 | DONE wsp | na 16 16 |        |             |
2575:000 | DONE ins | na 16 16 | 00677d | a4 2a       |                 ldy.d 00022a         
2576:000 | DONE ins | na 16 16 | 00677f | 84 0a       |                 sty.d 00020a         nt of first Dictionary word
2577:000 | DONE wsp | na 16 16 |        |             |
2578:000 | DONE ins | na 16 16 | 006781 | b4 00       |                 ldy.dx 00            
2579:000 | DONE ins | na 16 16 | 006783 | 84 0c       |                 sty.d 00020c         address of mystery string, was NOS
2580:000 | DONE wsp | na 16 16 |        |             |
2581:000 | DONE lbl | na 16 16 | 006785 |             | find-name_loop                       
2582:000 | DONE cmt | na 16 16 |        |             |                 ; First quick test: Are strings the same length?
2583:000 | DONE ins | na 16 16 | 006785 | b2 0a       |                 lda.di 00020a        LSB in first header word is length
2584:000 | DONE ins | na 16 16 | 006787 | 29 ff 00    |                 and.# 00ff           
2585:000 | DONE ins | na 16 16 | 00678a | c5 12       |                 cmp.d 000212         we test LSB
2586:000 | DONE cmt | na 16 16 |        |             |                 ; Most of the time, it will not be the same, so we save one
2587:000 | DONE cmt | na 16 16 |        |             |                 ; cycle pro loop if we only take the branch when they are the
2588:000 | DONE cmt | na 16 16 |        |             |                 ; same
2589:000 | DONE ins | na 16 16 | 00678c | f0 0c       |                 beq 00679a           
2590:000 | DONE wsp | na 16 16 |        |             |
2591:000 | DONE lbl | na 16 16 | 00678e |             | find-name_next_entry                 
2592:000 | DONE cmt | na 16 16 |        |             |                 ; next header address is two bytes down
2593:000 | DONE ins | na 16 16 | 00678e | e6 0a       |                 inc.d 00020a         
2594:000 | DONE ins | na 16 16 | 006790 | e6 0a       |                 inc.d 00020a         
2595:000 | DONE ins | na 16 16 | 006792 | b2 0a       |                 lda.di 00020a        LDA (TMP1)
2596:000 | DONE wsp | na 16 16 |        |             |
2597:000 | DONE cmt | na 16 16 |        |             |                 ; a zero entry marks the end of the Dictionary
2598:000 | DONE ins | na 16 16 | 006794 | f0 36       |                 beq 0067cc           
2599:000 | DONE wsp | na 16 16 |        |             |
2600:000 | DONE ins | na 16 16 | 006796 | 85 0a       |                 sta.d 00020a         new header
2601:000 | DONE ins | na 16 16 | 006798 | 80 eb       |                 bra 006785           
2602:000 | DONE wsp | na 16 16 |        |             |
2603:000 | DONE lbl | na 16 16 | 00679a |             | find-name_chars                      
2604:000 | DONE cmt | na 16 16 |        |             |                 ; Yes, same length, so we compare characters
2605:000 | DONE wsp | na 16 16 |        |             |
2606:000 | DONE cmt | na 16 16 |        |             |                 ; Switch A to 8 bit for this
2607:000 | DONE ins | na 16 16 | 00679a | e2 20       |                 sep 20               
2607:001 | DONE ctl | na  8 16 |        |             |         .!a8
2608:000 | DONE cmt | na  8 16 |        |             |                 ; Second quick test: Check first char, which is 8 bytes into the
2609:000 | DONE cmt | na  8 16 |        |             |                 ; header
2610:000 | DONE ins | na  8 16 | 00679c | a0 08 00    |                 ldy.# 0008           
2611:000 | DONE ins | na  8 16 | 00679f | b1 0a       |                 lda.diy 00020a       LDA (TMP1),Y - first char of entry
2612:000 | DONE ins | na  8 16 | 0067a1 | d2 0c       |                 cmp.di 00020c        CMP (TMP2) - first char of mystery string
2613:000 | DONE ins | na  8 16 | 0067a3 | f0 04       |                 beq 0067a9           
2614:000 | DONE wsp | na  8 16 |        |             |
2615:000 | DONE lbl | na  8 16 | 0067a5 |             | find-name_char_nomatcnt_8            
2616:000 | DONE cmt | na  8 16 |        |             |                 ; First char is not the same, next entry
2617:000 | DONE ins | na  8 16 | 0067a5 | c2 20       |                 rep 20               
2617:001 | DONE ctl | na 16 16 |        |             |         .!a16
2618:000 | DONE ins | na 16 16 | 0067a7 | 80 e5       |                 bra 00678e           
2619:000 | DONE wsp | na 16 16 |        |             |
2620:000 | DONE lbl | na 16 16 | 0067a9 |             | find-name_all_chars                  
2621:000 | DONE dir | na  8 16 |        |             |         .!a8                         
2622:000 | DONE cmt | na  8 16 |        |             |                 ; String length is the same, and the first character is the
2623:000 | DONE cmt | na  8 16 |        |             |                 ; same. If the word is only one character long, we're done
2624:000 | DONE ins | na  8 16 | 0067a9 | a4 12       |                 ldy.d 000212         
2625:000 | DONE ins | na  8 16 | 0067ab | 88          |                 dey                  faster and shorter than CPY.# 01
2626:000 | DONE ins | na  8 16 | 0067ac | f0 18       |                 beq 0067c6           
2627:000 | DONE wsp | na  8 16 |        |             |
2628:000 | DONE cmt | na  8 16 |        |             |                 ; No such luck: The strings are the same length and the first
2629:000 | DONE cmt | na  8 16 |        |             |                 ; char is the same, but the word is more than one char long. So
2630:000 | DONE cmt | na  8 16 |        |             |                 ; we suck it up and compare every single character. We go from
2631:000 | DONE cmt | na  8 16 |        |             |                 ; back to front, because words like CELLS and CELL+ would take
2632:000 | DONE cmt | na  8 16 |        |             |                 ; longer otherwise. We can also shorten the loop by one because
2633:000 | DONE cmt | na  8 16 |        |             |                 ; we've already compared the first char.
2634:000 | DONE wsp | na  8 16 |        |             |
2635:000 | DONE cmt | na  8 16 |        |             |                 ; Even worse, we have to add 8 bytes to address of Dictionary
2636:000 | DONE cmt | na  8 16 |        |             |                 ; string to allow testing with one loop. We need this like
2637:000 | DONE cmt | na  8 16 |        |             |                 ; a hole in the head because we just switched A to 8 bit.
2638:000 | DONE cmt | na  8 16 |        |             |                 ; However, staying with an 8-bit A is even slower.
2639:000 | DONE ins | na  8 16 | 0067ae | c2 20       |                 rep 20               
2639:001 | DONE ctl | na 16 16 |        |             |         .!a16
2640:000 | DONE ins | na 16 16 | 0067b0 | a5 0a       |                 lda.d 00020a         address of Dictionary string
2641:000 | DONE ins | na 16 16 | 0067b2 | 18          |                 clc                  
2642:000 | DONE ins | na 16 16 | 0067b3 | 69 08 00    |                 adc.# 0008           
2643:000 | DONE ins | na 16 16 | 0067b6 | 85 0e       |                 sta.d 00020e         
2644:000 | DONE ins | na 16 16 | 0067b8 | e2 20       |                 sep 20               
2644:001 | DONE ctl | na  8 16 |        |             |         .!a8
2645:000 | DONE ins | na  8 16 | 0067ba | a4 12       |                 ldy.d 000212         get length of strings as loop index
2646:000 | DONE ins | na  8 16 | 0067bc | 88          |                 dey                  first index is length minus 1
2647:000 | DONE wsp | na  8 16 |        |             |
2648:000 | DONE lbl | na  8 16 | 0067bd |             | @                                    
2649:000 | DONE ins | na  8 16 | 0067bd | b1 0c       |                 lda.diy 00020c       LDA (TMP2),Y - last char of mystery string
2650:000 | DONE ins | na  8 16 | 0067bf | d1 0e       |                 cmp.diy 00020e       CMP (TMP1),Y - last char of DP string
2651:000 | DONE ins | na  8 16 | 0067c1 | d0 e2       |                 bne 0067a5           
2652:000 | DONE ins | na  8 16 | 0067c3 | 88          |                 dey                  start of string (Y=0) was already tested
2653:000 | DONE ins | na  8 16 | 0067c4 | d0 f7       |                 bne 0067bd           
2654:000 | DONE wsp | na  8 16 |        |             |
2655:000 | DONE lbl | na  8 16 | 0067c6 |             | find-name_success                    
2656:000 | DONE cmt | na  8 16 |        |             |                 ; If we reach here, the strings are the same and we have a match
2657:000 | DONE cmt | na  8 16 |        |             |                 ; We get here with an 8 bit A
2658:000 | DONE ins | na  8 16 | 0067c6 | c2 20       |                 rep 20               
2658:001 | DONE ctl | na 16 16 |        |             |         .!a16
2659:000 | DONE ins | na 16 16 | 0067c8 | a4 0a       |                 ldy.d 00020a         get the correct DP
2660:000 | DONE ins | na 16 16 | 0067ca | 80 03       |                 bra 0067cf           
2661:000 | DONE wsp | na 16 16 |        |             |
2662:000 | DONE wsp | na 16 16 |        |             |
2663:000 | DONE lbl | na 16 16 | 0067cc |             | find-name_failure_16                 
2664:000 | DONE cmt | na 16 16 |        |             |                 ; Word not found in Dictionary, return zero. Assumes A is 16
2665:000 | DONE cmt | na 16 16 |        |             |                 ; bit
2666:000 | DONE ins | na 16 16 | 0067cc | a0 00 00    |                 ldy.# 0000           fall thru
2667:000 | DONE wsp | na 16 16 |        |             |
2668:000 | DONE lbl | na 16 16 | 0067cf |             | find-name_done                       
2669:000 | DONE ins | na 16 16 | 0067cf | e8          |                 inx                  drop old address (NIP)
2670:000 | DONE ins | na 16 16 | 0067d0 | e8          |                 inx                  
2671:000 | DONE wsp | na 16 16 |        |             |
2672:000 | DONE lbl | na 16 16 | 0067d1 |             | z_find-name                          
2672:001 | DONE ins | na 16 16 | 0067d1 | 60          |                 rts                  
2673:000 | DONE wsp | na 16 16 |        |             |
2674:000 | DONE wsp | na 16 16 |        |             |
2675:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
2676:000 | DONE cmt | na 16 16 |        |             | ; FM/MOD ( d n1 -- n2 n3 ) X bytes / X cycles
2677:000 | DONE cmt | na 16 16 |        |             | ; Floored division, compare with SM/REM. We define FM/MOD in terms of UM/MOD,
2678:000 | DONE cmt | na 16 16 |        |             | ; see http://git.savannah.gnu.org/cgit/gforth.git/tree/prim We prefer to use
2679:000 | DONE cmt | na 16 16 |        |             | ; SM/REM for further words. You could also define FM/MOD in Terms of SM/REM,
2680:000 | DONE cmt | na 16 16 |        |             | ; see http://www.figuk.plus.com/build/arith.htm
2681:000 | DONE cmt | na 16 16 |        |             | ; Original Forth: DUP >R DUP 0< IF NEGATE >R DNEGATE R> THEN >R DUP 0< R@ AND +
2682:000 | DONE cmt | na 16 16 |        |             | ; R> UM/MOD R> 0< IF SWAP NEGATE SWAP THEN ;
2683:000 | DONE cmt | na 16 16 |        |             | ; TODO this is just a 1:1 list of jumps, optimize once it is working
2684:000 | DONE lbl | na 16 16 | 0067d2 |             | xt_fmmod                             
2685:000 | DONE ins | na 16 16 | 0067d2 | 20 17 67    |                 jsr 006717           
2686:000 | DONE ins | na 16 16 | 0067d5 | 20 86 61    |                 jsr 006186           
2687:000 | DONE ins | na 16 16 | 0067d8 | 20 17 67    |                 jsr 006717           
2688:000 | DONE wsp | na 16 16 |        |             |
2689:000 | DONE ins | na 16 16 | 0067db | 98          |                 tya                  0< IF
2690:000 | DONE ins | na 16 16 | 0067dc | 10 12       |                 bpl 0067f0           
2691:000 | DONE wsp | na 16 16 |        |             |
2692:000 | DONE ins | na 16 16 | 0067de | b4 00       |                 ldy.dx 00            
2693:000 | DONE ins | na 16 16 | 0067e0 | e8          |                 inx                  
2694:000 | DONE ins | na 16 16 | 0067e1 | e8          |                 inx                  
2695:000 | DONE wsp | na 16 16 |        |             |
2696:000 | DONE ins | na 16 16 | 0067e2 | 20 35 69    |                 jsr 006935           
2697:000 | DONE ins | na 16 16 | 0067e5 | 20 86 61    |                 jsr 006186           
2698:000 | DONE ins | na 16 16 | 0067e8 | 20 b4 66    |                 jsr 0066b4           
2699:000 | DONE ins | na 16 16 | 0067eb | 20 ac 6a    |                 jsr 006aac           
2700:000 | DONE wsp | na 16 16 |        |             |
2701:000 | DONE ins | na 16 16 | 0067ee | 80 04       |                 bra 0067f4           
2702:000 | DONE lbl | na 16 16 | 0067f0 |             | fmmod_1                              
2703:000 | DONE ins | na 16 16 | 0067f0 | b4 00       |                 ldy.dx 00            
2704:000 | DONE ins | na 16 16 | 0067f2 | e8          |                 inx                  
2705:000 | DONE ins | na 16 16 | 0067f3 | e8          |                 inx                  
2706:000 | DONE lbl | na 16 16 | 0067f4 |             | fmmod_1_1                            
2707:000 | DONE ins | na 16 16 | 0067f4 | 20 86 61    |                 jsr 006186           
2708:000 | DONE ins | na 16 16 | 0067f7 | 20 17 67    |                 jsr 006717           
2709:000 | DONE ins | na 16 16 | 0067fa | 20 31 63    |                 jsr 006331           
2710:000 | DONE ins | na 16 16 | 0067fd | 20 a3 6a    |                 jsr 006aa3           
2711:000 | DONE ins | na 16 16 | 006800 | 20 e0 64    |                 jsr 0064e0           
2712:000 | DONE ins | na 16 16 | 006803 | 20 de 62    |                 jsr 0062de           
2713:000 | DONE ins | na 16 16 | 006806 | 20 ac 6a    |                 jsr 006aac           
2714:000 | DONE ins | na 16 16 | 006809 | 20 fd 6c    |                 jsr 006cfd           
2715:000 | DONE ins | na 16 16 | 00680c | 20 ac 6a    |                 jsr 006aac           
2716:000 | DONE wsp | na 16 16 |        |             |
2717:000 | DONE ins | na 16 16 | 00680f | 98          |                 tya                  
2718:000 | DONE ins | na 16 16 | 006810 | 10 0f       |                 bpl 006821           
2719:000 | DONE wsp | na 16 16 |        |             |
2720:000 | DONE ins | na 16 16 | 006812 | b4 00       |                 ldy.dx 00            
2721:000 | DONE ins | na 16 16 | 006814 | e8          |                 inx                  
2722:000 | DONE ins | na 16 16 | 006815 | e8          |                 inx                  
2723:000 | DONE wsp | na 16 16 |        |             |
2724:000 | DONE ins | na 16 16 | 006816 | 20 41 6c    |                 jsr 006c41           
2725:000 | DONE ins | na 16 16 | 006819 | 20 35 69    |                 jsr 006935           
2726:000 | DONE ins | na 16 16 | 00681c | 20 41 6c    |                 jsr 006c41           
2727:000 | DONE wsp | na 16 16 |        |             |
2728:000 | DONE ins | na 16 16 | 00681f | 80 04       |                 bra 006825           
2729:000 | DONE lbl | na 16 16 | 006821 |             | fmmod_2                              
2730:000 | DONE wsp | na 16 16 |        |             |
2731:000 | DONE ins | na 16 16 | 006821 | b4 00       |                 ldy.dx 00            
2732:000 | DONE ins | na 16 16 | 006823 | e8          |                 inx                  
2733:000 | DONE ins | na 16 16 | 006824 | e8          |                 inx                  
2734:000 | DONE wsp | na 16 16 |        |             |
2735:000 | DONE lbl | na 16 16 | 006825 |             | fmmod_2_1                            
2736:000 | DONE wsp | na 16 16 |        |             |
2737:000 | DONE lbl | na 16 16 | 006825 |             | z_fmmod                              
2737:001 | DONE ins | na 16 16 | 006825 | 60          |                 rts                  
2738:000 | DONE wsp | na 16 16 |        |             |
2739:000 | DONE wsp | na 16 16 |        |             |
2740:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
2741:000 | DONE cmt | na 16 16 |        |             | ; IMMEDIATE ( -- ) X bytes / X cycles
2742:000 | DONE cmt | na 16 16 |        |             | ; Mark the most recently defined word as IMMEDIATE. Will only affect the last
2743:000 | DONE cmt | na 16 16 |        |             | ; word in the Dictionary. If the words is still in ROM for some reason, this
2744:000 | DONE cmt | na 16 16 |        |             | ; will have no effect and will fail without an error message
2745:000 | DONE lbl | na 16 16 | 006826 |             | xt_immediate                         
2746:000 | DONE dir | na 16 16 |        |             |         .!a16                        
2747:000 | DONE ins | na 16 16 | 006826 | a9 02 00    |                 lda.# IM             Immediate flag
2748:000 | DONE ins | na 16 16 | 006829 | eb          |                 xba                  flags are MSB
2749:000 | DONE ins | na 16 16 | 00682a | 12 2a       |                 ora.di 00022a        ORA (DP)
2750:000 | DONE ins | na 16 16 | 00682c | 92 2a       |                 sta.di 00022a        
2751:000 | DONE wsp | na 16 16 |        |             |
2752:000 | DONE lbl | na 16 16 | 00682e |             | z_immediate                          
2752:001 | DONE ins | na 16 16 | 00682e | 60          |                 rts                  
2753:000 | DONE wsp | na 16 16 |        |             |
2754:000 | DONE wsp | na 16 16 |        |             |
2755:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
2756:000 | DONE cmt | na 16 16 |        |             | ; INVERT ( n -- n ) 5 bytes / X cycles
2757:000 | DONE cmt | na 16 16 |        |             | ; Complement of TOS
2758:000 | DONE lbl | na 16 16 | 00682f |             | xt_invert                            
2759:000 | DONE dir | na 16 16 |        |             |         .!a16                        
2760:000 | DONE ins | na 16 16 | 00682f | 98          |                 tya                  
2761:000 | DONE ins | na 16 16 | 006830 | 49 ff ff    |                 eor.# 0ffff          
2762:000 | DONE ins | na 16 16 | 006833 | a8          |                 tay                  
2763:000 | DONE wsp | na 16 16 |        |             |
2764:000 | DONE lbl | na 16 16 | 006834 |             | z_invert                             
2764:001 | DONE ins | na 16 16 | 006834 | 60          |                 rts                  
2765:000 | DONE wsp | na 16 16 |        |             |
2766:000 | DONE wsp | na 16 16 |        |             |
2767:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
2768:000 | DONE cmt | na 16 16 |        |             | ; HERE ( -- u ) 6 bytes / 13 cycles
2769:000 | DONE cmt | na 16 16 |        |             | ; Push Compiler Pointer address on the Data Stack
2770:000 | DONE lbl | na 16 16 | 006835 |             | xt_here                              
2771:000 | DONE dir | na 16 16 |        |             |         .!xy16                       
2772:000 | DONE ins | na 16 16 | 006835 | ca          |                 dex                  
2773:000 | DONE ins | na 16 16 | 006836 | ca          |                 dex                  
2774:000 | DONE ins | na 16 16 | 006837 | 94 00       |                 sty.dx 00            
2775:000 | DONE wsp | na 16 16 |        |             |
2776:000 | DONE ins | na 16 16 | 006839 | a4 28       |                 ldy.d 000228         
2777:000 | DONE wsp | na 16 16 |        |             |
2778:000 | DONE lbl | na 16 16 | 00683b |             | z_here                               
2778:001 | DONE ins | na 16 16 | 00683b | 60          |                 rts                  
2779:000 | DONE wsp | na 16 16 |        |             |
2780:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
2781:000 | DONE cmt | na 16 16 |        |             | ; HEX ( -- ) X bytes / X cycles
2782:000 | DONE cmt | na 16 16 |        |             | ; Change radix for number conversion to 16
2783:000 | DONE lbl | na 16 16 | 00683c |             | xt_hex                               
2784:000 | DONE dir | na 16 16 |        |             |         .!a16                        
2785:000 | DONE ins | na 16 16 | 00683c | a9 10 00    |                 lda.# 0010           
2786:000 | DONE ins | na 16 16 | 00683f | 85 24       |                 sta.d 000224         
2787:000 | DONE wsp | na 16 16 |        |             |
2788:000 | DONE lbl | na 16 16 | 006841 |             | z_hex                                
2788:001 | DONE ins | na 16 16 | 006841 | 60          |                 rts                  
2789:000 | DONE wsp | na 16 16 |        |             |
2790:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
2791:000 | DONE cmt | na 16 16 |        |             | ; HOLD ( char -- ) X bytes / X cycles
2792:000 | DONE cmt | na 16 16 |        |             | ; Insert a character at the current position of a pictured numeric output string
2793:000 | DONE cmt | na 16 16 |        |             | ; Code based on https://github.com/philburk/pforth/blob/master/fth/numberio.fth
2794:000 | DONE cmt | na 16 16 |        |             | ; Forth code is : HOLD  -1 HLD +!  HLD @ C! ;  We use the the internal variable
2795:000 | DONE cmt | na 16 16 |        |             | ; tohold instead of HLD.
2796:000 | DONE lbl | na 16 16 | 006842 |             | xt_hold                              
2797:000 | DONE dir | na 16 16 |        |             |         .!a16                        
2798:000 | DONE ins | na 16 16 | 006842 | c6 26       |                 dec.d 000226         -1 HLD +!
2799:000 | DONE wsp | na 16 16 |        |             |
2800:000 | DONE ins | na 16 16 | 006844 | 98          |                 tya                  
2801:000 | DONE ins | na 16 16 | 006845 | e2 20       |                 sep 20               
2801:001 | DONE ctl | na  8 16 |        |             |         .!a8
2802:000 | DONE ins | na  8 16 | 006847 | 92 26       |                 sta.di 000226        STA (TOHOLD)
2803:000 | DONE ins | na  8 16 | 006849 | c2 20       |                 rep 20               
2803:001 | DONE ctl | na 16 16 |        |             |         .!a16
2804:000 | DONE ins | na 16 16 | 00684b | b4 00       |                 ldy.dx 00            
2805:000 | DONE ins | na 16 16 | 00684d | e8          |                 inx                  
2806:000 | DONE ins | na 16 16 | 00684e | e8          |                 inx                  
2807:000 | DONE wsp | na 16 16 |        |             |
2808:000 | DONE lbl | na 16 16 | 00684f |             | z_hold                               
2808:001 | DONE ins | na 16 16 | 00684f | 60          |                 rts                  
2809:000 | DONE wsp | na 16 16 |        |             |
2810:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
2811:000 | DONE cmt | na 16 16 |        |             | ; LATESTNT ( -- nt ) 7 bytes / X cycles
2812:000 | DONE cmt | na 16 16 |        |             | ; Return the name token (nt) of the last word in the Dictionary. The Gforth
2813:000 | DONE cmt | na 16 16 |        |             | ; version of this word is called LATEST.
2814:000 | DONE lbl | na 16 16 | 006850 |             | xt_latestnt                          
2815:000 | DONE dir | na 16 16 |        |             |         .!a16                        
2816:000 | DONE ins | na 16 16 | 006850 | ca          |                 dex                  make room on Data Stack
2817:000 | DONE ins | na 16 16 | 006851 | ca          |                 dex                  
2818:000 | DONE ins | na 16 16 | 006852 | 94 00       |                 sty.dx 00            
2819:000 | DONE wsp | na 16 16 |        |             |
2820:000 | DONE ins | na 16 16 | 006854 | a5 2a       |                 lda.d 00022a         
2821:000 | DONE ins | na 16 16 | 006856 | a8          |                 tay                  
2822:000 | DONE wsp | na 16 16 |        |             |
2823:000 | DONE lbl | na 16 16 | 006857 |             | z_latestnt                           
2823:001 | DONE ins | na 16 16 | 006857 | 60          |                 rts                  
2824:000 | DONE wsp | na 16 16 |        |             |
2825:000 | DONE wsp | na 16 16 |        |             |
2826:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
2827:000 | DONE cmt | na 16 16 |        |             | ; LATESTXT ( -- xt ) 11 bytes / X cycles
2828:000 | DONE cmt | na 16 16 |        |             | ; Return the name token (xt) of the last word in the Dictionary. This is simply
2829:000 | DONE cmt | na 16 16 |        |             | ; LATESTNT but four bytes down and with a FETCH
2830:000 | DONE lbl | na 16 16 | 006858 |             | xt_latestxt                          
2831:000 | DONE dir | na 16 16 |        |             |         .!a16                        
2832:000 | DONE ins | na 16 16 | 006858 | ca          |                 dex                  make room on Data Stack
2833:000 | DONE ins | na 16 16 | 006859 | ca          |                 dex                  
2834:000 | DONE ins | na 16 16 | 00685a | 94 00       |                 sty.dx 00            
2835:000 | DONE wsp | na 16 16 |        |             |
2836:000 | DONE ins | na 16 16 | 00685c | a5 2a       |                 lda.d 00022a         
2837:000 | DONE wsp | na 16 16 |        |             |
2838:000 | DONE ins | na 16 16 | 00685e | 18          |                 clc                  xt is stored four bytes below nt in header
2839:000 | DONE ins | na 16 16 | 00685f | 69 04 00    |                 adc.# 0004           
2840:000 | DONE ins | na 16 16 | 006862 | a8          |                 tay                  
2841:000 | DONE wsp | na 16 16 |        |             |
2842:000 | DONE ins | na 16 16 | 006863 | b9 00 00    |                 lda.y 0000           FETCH
2843:000 | DONE ins | na 16 16 | 006866 | a8          |                 tay                  
2844:000 | DONE wsp | na 16 16 |        |             |
2845:000 | DONE lbl | na 16 16 | 006867 |             | z_latestxt                           
2845:001 | DONE ins | na 16 16 | 006867 | 60          |                 rts                  
2846:000 | DONE wsp | na 16 16 |        |             |
2847:000 | DONE wsp | na 16 16 |        |             |
2848:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
2849:000 | DONE cmt | na 16 16 |        |             | ; LITERAL ( n -- ) X bytes / X cycles
2850:000 | DONE cmt | na 16 16 |        |             | ; Compile-only word to store TOS so that it is pushed on stack during runtime.
2851:000 | DONE cmt | na 16 16 |        |             | ; This is a immediate, compile-only word. Test it with  : AAA [ 1 ] LITERAL ;
2852:000 | DONE cmt | na 16 16 |        |             | ; for instance
2853:000 | DONE lbl | na 16 16 | 006868 |             | xt_literal                           
2854:000 | DONE cmt | na 16 16 |        |             |                 ; During runtime, we call the routine at the bottom by compiling
2855:000 | DONE cmt | na 16 16 |        |             |                 ; JSR LITERAL_RT. Note the cmpl_ routines use tmptos
2856:000 | DONE ins | na 16 16 | 006868 | f4 7a 68    |                 phe.# 00687a         PEA LITERAL_RT
2857:000 | DONE ins | na 16 16 | 00686b | 20 dc 75    |                 jsr 0075dc           
2858:000 | DONE wsp | na 16 16 |        |             |
2859:000 | DONE cmt | na 16 16 |        |             |                 ; compile the value that is to be pushed to the Data Stack at
2860:000 | DONE cmt | na 16 16 |        |             |                 ; runtime. There is no "sty.di", so we have to do this the hard
2861:000 | DONE cmt | na 16 16 |        |             |                 ; way. This is basically , ("comma")
2862:000 | DONE ins | na 16 16 | 00686e | 98          |                 tya                  
2863:000 | DONE ins | na 16 16 | 00686f | 92 28       |                 sta.di 000228        
2864:000 | DONE ins | na 16 16 | 006871 | e6 28       |                 inc.d 000228         
2865:000 | DONE ins | na 16 16 | 006873 | e6 28       |                 inc.d 000228         
2866:000 | DONE wsp | na 16 16 |        |             |
2867:000 | DONE ins | na 16 16 | 006875 | b4 00       |                 ldy.dx 00            DROP
2868:000 | DONE ins | na 16 16 | 006877 | e8          |                 inx                  
2869:000 | DONE ins | na 16 16 | 006878 | e8          |                 inx                  
2870:000 | DONE wsp | na 16 16 |        |             |
2871:000 | DONE lbl | na 16 16 | 006879 |             | z_literal                            
2871:001 | DONE ins | na 16 16 | 006879 | 60          |                 rts                  
2872:000 | DONE wsp | na 16 16 |        |             |
2873:000 | DONE lbl | na 16 16 | 00687a |             | literal_rt                           
2874:000 | DONE cmt | na 16 16 |        |             |                 ; During runtime, we push the value following this word
2875:000 | DONE cmt | na 16 16 |        |             |                 ; back on the Data Stack. The subroutine jump that brought us
2876:000 | DONE cmt | na 16 16 |        |             |                 ; here put the address to return to on the Return Stack - this
2877:000 | DONE cmt | na 16 16 |        |             |                 ; points to the data we need to get
2878:000 | DONE wsp | na 16 16 |        |             |
2879:000 | DONE cmt | na 16 16 |        |             |                 ; Make room on Data Stack, Y now free to use
2880:000 | DONE ins | na 16 16 | 00687a | ca          |                 dex                  
2881:000 | DONE ins | na 16 16 | 00687b | ca          |                 dex                  
2882:000 | DONE ins | na 16 16 | 00687c | 94 00       |                 sty.dx 00            
2883:000 | DONE wsp | na 16 16 |        |             |
2884:000 | DONE cmt | na 16 16 |        |             |                 ; The 65816 stores (<RETURN-ADDRESS> - 1) on the Return Stack
2885:000 | DONE cmt | na 16 16 |        |             |                 ; so we have to manipulate the address
2886:000 | DONE ins | na 16 16 | 00687e | 7a          |                 ply                  
2887:000 | DONE ins | na 16 16 | 00687f | c8          |                 iny                  
2888:000 | DONE ins | na 16 16 | 006880 | b9 00 00    |                 lda.y 0000           LDA $0000,Y - get value after jump
2889:000 | DONE wsp | na 16 16 |        |             |
2890:000 | DONE ins | na 16 16 | 006883 | c8          |                 iny                  move return address past data and restore
2891:000 | DONE ins | na 16 16 | 006884 | 5a          |                 phy                  so we can get back home
2892:000 | DONE wsp | na 16 16 |        |             |
2893:000 | DONE ins | na 16 16 | 006885 | a8          |                 tay                  Value is now on the Data Stack ( -- n )
2894:000 | DONE wsp | na 16 16 |        |             |
2895:000 | DONE ins | na 16 16 | 006886 | 60          |                 rts                  
2896:000 | DONE wsp | na 16 16 |        |             |
2897:000 | DONE wsp | na 16 16 |        |             |
2898:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
2899:000 | DONE cmt | na 16 16 |        |             | ; LSHIFT ( n u -- n ) X bytes / X cycles
2900:000 | DONE cmt | na 16 16 |        |             | ; Logically shift TOS u times to the left, adding zeros to the right
2901:000 | DONE lbl | na 16 16 | 006887 |             | xt_lshift                            
2902:000 | DONE cmt | na 16 16 |        |             |                 ; We shift at most 16 bits, because anything above that will be
2903:000 | DONE cmt | na 16 16 |        |             |                 ; zeros anyway
2904:000 | DONE ins | na 16 16 | 006887 | 98          |                 tya                  
2905:000 | DONE ins | na 16 16 | 006888 | 29 0f 00    |                 and.# 000f           
2906:000 | DONE ins | na 16 16 | 00688b | f0 09       |                 beq 006896           if zero shifts, we're done
2907:000 | DONE wsp | na 16 16 |        |             |
2908:000 | DONE ins | na 16 16 | 00688d | a8          |                 tay                  number of shifts is TOS
2909:000 | DONE ins | na 16 16 | 00688e | b5 00       |                 lda.dx 00            number is in NOS
2910:000 | DONE lbl | na 16 16 | 006890 |             | lshift_loop                          
2911:000 | DONE ins | na 16 16 | 006890 | 0a          |                 asl.a                
2912:000 | DONE ins | na 16 16 | 006891 | 88          |                 dey                  
2913:000 | DONE ins | na 16 16 | 006892 | d0 fc       |                 bne 006890           
2914:000 | DONE wsp | na 16 16 |        |             |
2915:000 | DONE ins | na 16 16 | 006894 | 95 00       |                 sta.dx 00            put NOS, which last step will pull up
2916:000 | DONE wsp | na 16 16 |        |             |
2917:000 | DONE lbl | na 16 16 | 006896 |             | lshift_done                          
2918:000 | DONE ins | na 16 16 | 006896 | b4 00       |                 ldy.dx 00            
2919:000 | DONE ins | na 16 16 | 006898 | e8          |                 inx                  
2920:000 | DONE ins | na 16 16 | 006899 | e8          |                 inx                  
2921:000 | DONE wsp | na 16 16 |        |             |
2922:000 | DONE lbl | na 16 16 | 00689a |             | z_lshift                             
2922:001 | DONE ins | na 16 16 | 00689a | 60          |                 rts                  
2923:000 | DONE wsp | na 16 16 |        |             |
2924:000 | DONE wsp | na 16 16 |        |             |
2925:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
2926:000 | DONE cmt | na 16 16 |        |             | ; M* "MSTAR" ( n n -- d ) 16*16 -> 32  X bytes / X cycles
2927:000 | DONE cmt | na 16 16 |        |             | ; Multiply two 16 bit numbers, producing a 32 bit result. All values are signed.
2928:000 | DONE cmt | na 16 16 |        |             | ; This was originally adapted from FIG Forth for Tali Forth. The original Forth
2929:000 | DONE cmt | na 16 16 |        |             | ; code is : M* OVER OVER XOR >R ABS SWAP ABS UM* R> D+- ;  with
2930:000 | DONE cmt | na 16 16 |        |             | ; : D+- O< IF DNEGATE THEN ;
2931:000 | DONE cmt | na 16 16 |        |             | ; TODO Test this more once we have the Double words etc all working
2932:000 | DONE lbl | na 16 16 | 00689b |             | xt_mstar                             
2933:000 | DONE dir | na 16 16 |        |             |         .!a16                        
2934:000 | DONE cmt | na 16 16 |        |             |                 ; figure out the sign
2935:000 | DONE ins | na 16 16 | 00689b | 98          |                 tya                  
2936:000 | DONE ins | na 16 16 | 00689c | 55 00       |                 eor.dx 00            
2937:000 | DONE wsp | na 16 16 |        |             |
2938:000 | DONE cmt | na 16 16 |        |             |                 ; um* uses all kinds of tmp stuff so we don't risk a conflict
2939:000 | DONE cmt | na 16 16 |        |             |                 ; and just take the cycle hit by pushing this to the stack
2940:000 | DONE ins | na 16 16 | 00689e | 48          |                 pha                  
2941:000 | DONE wsp | na 16 16 |        |             |
2942:000 | DONE cmt | na 16 16 |        |             |                 ; get the absolute value of both numbers so we can feed them to
2943:000 | DONE cmt | na 16 16 |        |             |                 ; UM*, which does the real work
2944:000 | DONE ins | na 16 16 | 00689f | 98          |                 tya                  
2945:000 | DONE ins | na 16 16 | 0068a0 | 10 05       |                 bpl 0068a7           
2946:000 | DONE wsp | na 16 16 |        |             |
2947:000 | DONE cmt | na 16 16 |        |             |                 ; TOS is negative so we have to ABS it
2948:000 | DONE ins | na 16 16 | 0068a2 | 49 ff ff    |                 eor.# 0ffff          
2949:000 | DONE ins | na 16 16 | 0068a5 | 1a          |                 inc.a                
2950:000 | DONE ins | na 16 16 | 0068a6 | a8          |                 tay                  
2951:000 | DONE wsp | na 16 16 |        |             |
2952:000 | DONE lbl | na 16 16 | 0068a7 |             | mstar_abs_nos                        
2953:000 | DONE ins | na 16 16 | 0068a7 | b5 00       |                 lda.dx 00            
2954:000 | DONE ins | na 16 16 | 0068a9 | 10 06       |                 bpl 0068b1           
2955:000 | DONE wsp | na 16 16 |        |             |
2956:000 | DONE cmt | na 16 16 |        |             |                 ; NOS is negative so we have to ABS it
2957:000 | DONE ins | na 16 16 | 0068ab | 49 ff ff    |                 eor.# 0ffff          
2958:000 | DONE ins | na 16 16 | 0068ae | 1a          |                 inc.a                
2959:000 | DONE ins | na 16 16 | 0068af | 95 00       |                 sta.dx 00            
2960:000 | DONE wsp | na 16 16 |        |             |
2961:000 | DONE lbl | na 16 16 | 0068b1 |             | mstar_umstar                         
2962:000 | DONE ins | na 16 16 | 0068b1 | 20 9e 6c    |                 jsr 006c9e           now ( d ) on stack
2963:000 | DONE wsp | na 16 16 |        |             |
2964:000 | DONE cmt | na 16 16 |        |             |                 ; handle the sign
2965:000 | DONE ins | na 16 16 | 0068b4 | 68          |                 pla                  
2966:000 | DONE wsp | na 16 16 |        |             |
2967:000 | DONE cmt | na 16 16 |        |             |                 ; postive, we don't have to care
2968:000 | DONE ins | na 16 16 | 0068b5 | 10 03       |                 bpl 0068ba           
2969:000 | DONE wsp | na 16 16 |        |             |
2970:000 | DONE ins | na 16 16 | 0068b7 | 20 b4 66    |                 jsr 0066b4           
2971:000 | DONE wsp | na 16 16 |        |             |
2972:000 | DONE lbl | na 16 16 | 0068ba |             | z_mstar                              
2972:001 | DONE ins | na 16 16 | 0068ba | 60          |                 rts                  
2973:000 | DONE wsp | na 16 16 |        |             |
2974:000 | DONE wsp | na 16 16 |        |             |
2975:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
2976:000 | DONE cmt | na 16 16 |        |             | ; MAX ( n m -- n ) 18 bytes / X cycles
2977:000 | DONE cmt | na 16 16 |        |             | ; Compare TOS and NOS and keep which one is larger. Adapted from Lance A.
2978:000 | DONE cmt | na 16 16 |        |             | ; Leventhal "6502 Assembly Language Subroutines". Negative Flag indicates which
2979:000 | DONE cmt | na 16 16 |        |             | ; number is larger. See also http://6502.org/tutorials/compare_instructions.html
2980:000 | DONE cmt | na 16 16 |        |             | ; and http://www.righto.com/2012/12/the-6502-overflow-flag-explained.html
2981:000 | DONE lbl | na 16 16 | 0068bb |             | xt_max                               
2982:000 | DONE ins | na 16 16 | 0068bb | 98          |                 tya                  
2983:000 | DONE ins | na 16 16 | 0068bc | d5 00       |                 cmp.dx 00            
2984:000 | DONE wsp | na 16 16 |        |             |
2985:000 | DONE cmt | na 16 16 |        |             |                 ; If they are the same, life is good. This step also sets the
2986:000 | DONE cmt | na 16 16 |        |             |                 ; Carry flag
2987:000 | DONE ins | na 16 16 | 0068be | f0 0b       |                 beq 0068cb           Faster than DROP because TOS is in Y
2988:000 | DONE wsp | na 16 16 |        |             |
2989:000 | DONE ins | na 16 16 | 0068c0 | f5 00       |                 sbc.dx 00            
2990:000 | DONE ins | na 16 16 | 0068c2 | 50 03       |                 bvc 0068c7           no overflow, skip ahead
2991:000 | DONE wsp | na 16 16 |        |             |
2992:000 | DONE cmt | na 16 16 |        |             |                 ; Deal with oveflow because we use signed numbers
2993:000 | DONE ins | na 16 16 | 0068c4 | 49 00 80    |                 eor.# 8000           compliment negative flag
2994:000 | DONE wsp | na 16 16 |        |             |
2995:000 | DONE lbl | na 16 16 | 0068c7 |             | max_no_ov                            
2996:000 | DONE ins | na 16 16 | 0068c7 | 10 02       |                 bpl 0068cb           keep TOS
2997:000 | DONE lbl | na 16 16 | 0068c9 |             | max_drop                             
2998:000 | DONE ins | na 16 16 | 0068c9 | b4 00       |                 ldy.dx 00            DROP so NOS is result
2999:000 | DONE lbl | na 16 16 | 0068cb |             | max_nip                              
3000:000 | DONE ins | na 16 16 | 0068cb | e8          |                 inx                  
3001:000 | DONE ins | na 16 16 | 0068cc | e8          |                 inx                  
3002:000 | DONE wsp | na 16 16 |        |             |
3003:000 | DONE lbl | na 16 16 | 0068cd |             | z_max                                
3003:001 | DONE ins | na 16 16 | 0068cd | 60          |                 rts                  
3004:000 | DONE wsp | na 16 16 |        |             |
3005:000 | DONE wsp | na 16 16 |        |             |
3006:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
3007:000 | DONE cmt | na 16 16 |        |             | ; MIN ( n m -- n ) 18 bytes / X cycles
3008:000 | DONE cmt | na 16 16 |        |             | ; Compare TOS and NOS and keep which one is smaller Adapted from Lance A.
3009:000 | DONE cmt | na 16 16 |        |             | ; Leventhal "6502 Assembly Language Subroutines". Negative Flag indicates which
3010:000 | DONE cmt | na 16 16 |        |             | ; number is larger. See also http://6502.org/tutorials/compare_instructions.html
3011:000 | DONE cmt | na 16 16 |        |             | ; and http://www.righto.com/2012/12/the-6502-overflow-flag-explained.html
3012:000 | DONE lbl | na 16 16 | 0068ce |             | xt_min                               
3013:000 | DONE ins | na 16 16 | 0068ce | 98          |                 tya                  
3014:000 | DONE ins | na 16 16 | 0068cf | d5 00       |                 cmp.dx 00            
3015:000 | DONE wsp | na 16 16 |        |             |
3016:000 | DONE cmt | na 16 16 |        |             |                 ; If they are the same, life is good. This step also sets the
3017:000 | DONE cmt | na 16 16 |        |             |                 ; Carry flag
3018:000 | DONE ins | na 16 16 | 0068d1 | f0 0b       |                 beq 0068de           Faster than DROP because TOS is in Y
3019:000 | DONE wsp | na 16 16 |        |             |
3020:000 | DONE ins | na 16 16 | 0068d3 | f5 00       |                 sbc.dx 00            
3021:000 | DONE ins | na 16 16 | 0068d5 | 50 03       |                 bvc 0068da           no overflow, skip ahead
3022:000 | DONE wsp | na 16 16 |        |             |
3023:000 | DONE cmt | na 16 16 |        |             |                 ; Deal with oveflow because we use signed numbers
3024:000 | DONE ins | na 16 16 | 0068d7 | 49 00 80    |                 eor.# 8000           compliment negative flag
3025:000 | DONE wsp | na 16 16 |        |             |
3026:000 | DONE lbl | na 16 16 | 0068da |             | min_no_ov                            
3027:000 | DONE ins | na 16 16 | 0068da | 30 02       |                 bmi 0068de           keep TOS
3028:000 | DONE lbl | na 16 16 | 0068dc |             | min_drop                             
3029:000 | DONE ins | na 16 16 | 0068dc | b4 00       |                 ldy.dx 00            DROP so NOS is result
3030:000 | DONE lbl | na 16 16 | 0068de |             | min_nip                              
3031:000 | DONE ins | na 16 16 | 0068de | e8          |                 inx                  
3032:000 | DONE ins | na 16 16 | 0068df | e8          |                 inx                  
3033:000 | DONE wsp | na 16 16 |        |             |
3034:000 | DONE lbl | na 16 16 | 0068e0 |             | z_min                                
3034:001 | DONE ins | na 16 16 | 0068e0 | 60          |                 rts                  
3035:000 | DONE wsp | na 16 16 |        |             |
3036:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
3037:000 | DONE cmt | na 16 16 |        |             | ; MOVE ( addr1 addr2 u -- ) X bytes / X cycles
3038:000 | DONE cmt | na 16 16 |        |             | ; Move u bytes from addr1 to addr2, so that in the end, addr2 contains exactly
3039:000 | DONE cmt | na 16 16 |        |             | ; what was in addr1. This routine calls CMOVE or CMOVE>. Forth verison is
3040:000 | DONE cmt | na 16 16 |        |             | ; >R 2DUP U< IF R> CMOVE> ELSE  R> CMOVE THEN ; see
3041:000 | DONE cmt | na 16 16 |        |             | ; https://groups.google.com/forum/#!topic/comp.lang.forth/-l2WlE7pEE0
3042:000 | DONE cmt | na 16 16 |        |             | ; We use the fast MVP/MVN instructions for MOVE and go byte-by-byte for CMOVE
3043:000 | DONE cmt | na 16 16 |        |             | ; and CMOVE> as required by ANSI. Uses tmp2.
3044:000 | DONE lbl | na 16 16 | 0068e1 |             | xt_move                              
3045:000 | DONE dir | na 16 16 |        |             |         .!a16                        
3046:000 | DONE cmt | na 16 16 |        |             |                 ; if u is zero, we just skip all of this
3047:000 | DONE ins | na 16 16 | 0068e1 | 98          |                 tya                  
3048:000 | DONE ins | na 16 16 | 0068e2 | f0 25       |                 beq 006909           
3049:000 | DONE wsp | na 16 16 |        |             |
3050:000 | DONE cmt | na 16 16 |        |             |                 ; if source and destination are the same, that would be silly as
3051:000 | DONE cmt | na 16 16 |        |             |                 ; well
3052:000 | DONE ins | na 16 16 | 0068e4 | b5 00       |                 lda.dx 00            addr2 (destination)
3053:000 | DONE ins | na 16 16 | 0068e6 | d5 04       |                 cmp.dx 04            addr1 (source)
3054:000 | DONE ins | na 16 16 | 0068e8 | f0 1f       |                 beq 006909           
3055:000 | DONE wsp | na 16 16 |        |             |
3056:000 | DONE cmt | na 16 16 |        |             |                 ; So this is happening. Use tmp2 as a flag to see if source or
3057:000 | DONE cmt | na 16 16 |        |             |                 ; destination is larger. STZ does not affect any flag, so we can
3058:000 | DONE cmt | na 16 16 |        |             |                 ; reuse the comparison above later
3059:000 | DONE ins | na 16 16 | 0068ea | 64 0c       |                 stz.d 00020c         
3060:000 | DONE wsp | na 16 16 |        |             |
3061:000 | DONE cmt | na 16 16 |        |             |                 ; If the source is larger, we set a flag (default: Source is
3062:000 | DONE cmt | na 16 16 |        |             |                 ; smaller, that is, closer to 00:0000, use MVP)
3063:000 | DONE ins | na 16 16 | 0068ec | 10 02       |                 bpl 0068f0           
3064:000 | DONE wsp | na 16 16 |        |             |
3065:000 | DONE cmt | na 16 16 |        |             |                 ; The source is larger (higher up in memory), use MVN
3066:000 | DONE ins | na 16 16 | 0068ee | e6 0a       |                 inc.d 00020a         
3067:000 | DONE lbl | na 16 16 | 0068f0 |             | @                                    
3068:000 | DONE cmt | na 16 16 |        |             |                 ; Both MVN and MVP require the source address in X, the
3069:000 | DONE cmt | na 16 16 |        |             |                 ; destination address in Y and the number of bytes to transfer
3070:000 | DONE cmt | na 16 16 |        |             |                 ; minus 1 in A. The work is worth it, for the math see
3071:000 | DONE cmt | na 16 16 |        |             |                 ; http://forum.6502.org/viewtopic.php?f=2&t=1685
3072:000 | DONE ins | na 16 16 | 0068f0 | 88          |                 dey                  
3073:000 | DONE ins | na 16 16 | 0068f1 | 5a          |                 phy                  save number of bytes to transfer
3074:000 | DONE ins | na 16 16 | 0068f2 | b4 00       |                 ldy.dx 00            get destination address
3075:000 | DONE ins | na 16 16 | 0068f4 | 86 10       |                 stx.d 000210         keep DSP safe
3076:000 | DONE ins | na 16 16 | 0068f6 | b5 02       |                 lda.dx 02            get source address
3077:000 | DONE ins | na 16 16 | 0068f8 | aa          |                 tax                  
3078:000 | DONE wsp | na 16 16 |        |             |
3079:000 | DONE ins | na 16 16 | 0068f9 | a5 0a       |                 lda.d 00020a         check flag
3080:000 | DONE ins | na 16 16 | 0068fb | f0 06       |                 beq 006903           
3081:000 | DONE wsp | na 16 16 |        |             |
3082:000 | DONE cmt | na 16 16 |        |             |                 ; source is larger, use MVN
3083:000 | DONE ins | na 16 16 | 0068fd | 68          |                 pla                  retrieve number of bytes to transfer
3084:000 | DONE ins | na 16 16 | 0068fe | 54 00 00    |                 mvn 0                
3084:001 | DONE ctl | na 16 16 |        |             |            
3085:000 | DONE ins | na 16 16 | 006901 | 80 04       |                 bra 006907           
3086:000 | DONE wsp | na 16 16 |        |             |
3087:000 | DONE lbl | na 16 16 | 006903 |             | move_src_smaller                     
3088:000 | DONE cmt | na 16 16 |        |             |                 ; source is smaller, use MVP
3089:000 | DONE ins | na 16 16 | 006903 | 68          |                 pla                  
3090:000 | DONE ins | na 16 16 | 006904 | 44 00 00    |                 mvp 0                fall through to move_retore
3090:001 | DONE ctl | na 16 16 |        |             |            
3091:000 | DONE wsp | na 16 16 |        |             |
3092:000 | DONE lbl | na 16 16 | 006907 |             | move_restore                         
3093:000 | DONE ins | na 16 16 | 006907 | a6 10       |                 ldx.d 000210         
3094:000 | DONE wsp | na 16 16 |        |             |
3095:000 | DONE lbl | na 16 16 | 006909 |             | move_done                            
3096:000 | DONE cmt | na 16 16 |        |             |                 ; adjust stack pointer
3097:000 | DONE ins | na 16 16 | 006909 | b4 04       |                 ldy.dx 04            
3098:000 | DONE wsp | na 16 16 |        |             |
3099:000 | DONE ins | na 16 16 | 00690b | 8a          |                 txa                  
3100:000 | DONE ins | na 16 16 | 00690c | 18          |                 clc                  
3101:000 | DONE ins | na 16 16 | 00690d | 69 06 00    |                 adc.# 0006           
3102:000 | DONE ins | na 16 16 | 006910 | aa          |                 tax                  
3103:000 | DONE wsp | na 16 16 |        |             |
3104:000 | DONE lbl | na 16 16 | 006911 |             | z_move                               
3104:001 | DONE ins | na 16 16 | 006911 | 60          |                 rts                  
3105:000 | DONE wsp | na 16 16 |        |             |
3106:000 | DONE wsp | na 16 16 |        |             |
3107:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
3108:000 | DONE cmt | na 16 16 |        |             | ; NAME>INT ( nt -- xt ) 4 bytes / 8 cycles
3109:000 | DONE cmt | na 16 16 |        |             | ; Given the Name Token (nt) of a word, return its Execute Token (xt)
3110:000 | DONE lbl | na 16 16 | 006912 |             | xt_name-int                          
3111:000 | DONE dir | na 16 16 |        |             |         .!a16                        
3112:000 | DONE dir | na 16 16 |        |             |         .!xy16                       
3113:000 | DONE cmt | na 16 16 |        |             |                 ; The xt of a word beginns four bytes down from its nt
3114:000 | DONE ins | na 16 16 | 006912 | c8          |                 iny                  
3115:000 | DONE ins | na 16 16 | 006913 | c8          |                 iny                  
3116:000 | DONE ins | na 16 16 | 006914 | c8          |                 iny                  
3117:000 | DONE ins | na 16 16 | 006915 | c8          |                 iny                  
3118:000 | DONE ins | na 16 16 | 006916 | b9 00 00    |                 lda.y 0000           
3119:000 | DONE ins | na 16 16 | 006919 | a8          |                 tay                  
3120:000 | DONE wsp | na 16 16 |        |             |
3121:000 | DONE lbl | na 16 16 | 00691a |             | z_name-int                           
3121:001 | DONE ins | na 16 16 | 00691a | 60          |                 rts                  
3122:000 | DONE wsp | na 16 16 |        |             |
3123:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
3124:000 | DONE cmt | na 16 16 |        |             | ; NAME>STRING ( nt -- addr u ) 16 bytes / X cycles
3125:000 | DONE cmt | na 16 16 |        |             | ; Given a name token (nt) of a word, return its string. This is a Gforth word
3126:000 | DONE cmt | na 16 16 |        |             | ; that works with the Dictionary header entries. It is not checked if nt is
3127:000 | DONE cmt | na 16 16 |        |             | ; a valid name token.
3128:000 | DONE lbl | na 16 16 | 00691b |             | xt_name-string                       
3129:000 | DONE dir | na 16 16 |        |             |         .!a16                        
3130:000 | DONE dir | na 16 16 |        |             |         .!xy16                       
3131:000 | DONE ins | na 16 16 | 00691b | ca          |                 dex                  move NOS down one
3132:000 | DONE ins | na 16 16 | 00691c | ca          |                 dex                  
3133:000 | DONE wsp | na 16 16 |        |             |
3134:000 | DONE cmt | na 16 16 |        |             |                 ; the name string of a word begins 8 bytes down from its nt,
3135:000 | DONE cmt | na 16 16 |        |             |                 ; which we have as TOS
3136:000 | DONE ins | na 16 16 | 00691d | 98          |                 tya                  
3137:000 | DONE ins | na 16 16 | 00691e | 18          |                 clc                  
3138:000 | DONE ins | na 16 16 | 00691f | 69 08 00    |                 adc.# 0008           
3139:000 | DONE ins | na 16 16 | 006922 | 95 00       |                 sta.dx 00            NOS
3140:000 | DONE wsp | na 16 16 |        |             |
3141:000 | DONE cmt | na 16 16 |        |             |                 ; the length of the name string is in the LSB of the first word
3142:000 | DONE cmt | na 16 16 |        |             |                 ; of the dictionary entry header (the name token)
3143:000 | DONE ins | na 16 16 | 006924 | b9 00 00    |                 lda.y 0000           LDA $0000,Y
3144:000 | DONE ins | na 16 16 | 006927 | 29 ff 00    |                 and.# 00ff           mask all but length byte
3145:000 | DONE ins | na 16 16 | 00692a | a8          |                 tay                  
3146:000 | DONE wsp | na 16 16 |        |             |
3147:000 | DONE lbl | na 16 16 | 00692b |             | z_name-string                        
3147:001 | DONE ins | na 16 16 | 00692b | 60          |                 rts                  
3148:000 | DONE wsp | na 16 16 |        |             |
3149:000 | DONE wsp | na 16 16 |        |             |
3150:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
3151:000 | DONE cmt | na 16 16 |        |             | ; NATIVE-COMPILE ( -- ) X bytes / X cycles
3152:000 | DONE cmt | na 16 16 |        |             | ; Enable native compilation for last word in Dictionary
3153:000 | DONE lbl | na 16 16 | 00692c |             | xt_native-compile                    
3154:000 | DONE dir | na 16 16 |        |             |         .!a16                        
3155:000 | DONE ins | na 16 16 | 00692c | a9 01 00    |                 lda.# NC             
3156:000 | DONE ins | na 16 16 | 00692f | eb          |                 xba                  flags are MSB
3157:000 | DONE ins | na 16 16 | 006930 | 12 2a       |                 ora.di 00022a        ORA (DP)
3158:000 | DONE ins | na 16 16 | 006932 | 92 2a       |                 sta.di 00022a        
3159:000 | DONE wsp | na 16 16 |        |             |
3160:000 | DONE lbl | na 16 16 | 006934 |             | z_native-compile                     
3161:000 | DONE ins | na 16 16 | 006934 | 60          |                 rts                  
3162:000 | DONE wsp | na 16 16 |        |             |
3163:000 | DONE wsp | na 16 16 |        |             |
3164:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
3165:000 | DONE cmt | na 16 16 |        |             | ; NEGATE ( n -- n ) 6 bytes / X cycles
3166:000 | DONE cmt | na 16 16 |        |             | ; Two's complement of TOS
3167:000 | DONE lbl | na 16 16 | 006935 |             | xt_negate                            
3168:000 | DONE ins | na 16 16 | 006935 | 98          |                 tya                  
3169:000 | DONE ins | na 16 16 | 006936 | 49 ff ff    |                 eor.# 0ffff          
3170:000 | DONE ins | na 16 16 | 006939 | 1a          |                 inc.a                
3171:000 | DONE ins | na 16 16 | 00693a | a8          |                 tay                  
3172:000 | DONE wsp | na 16 16 |        |             |
3173:000 | DONE lbl | na 16 16 | 00693b |             | z_negate                             
3173:001 | DONE ins | na 16 16 | 00693b | 60          |                 rts                  
3174:000 | DONE wsp | na 16 16 |        |             |
3175:000 | DONE wsp | na 16 16 |        |             |
3176:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
3177:000 | DONE cmt | na 16 16 |        |             | ; NIP ( n m -- m ) 2 bytes / 4 cycles
3178:000 | DONE cmt | na 16 16 |        |             | ; Delete entry that is NOS
3179:000 | DONE lbl | na 16 16 | 00693c |             | xt_nip                               
3180:000 | DONE dir | na 16 16 |        |             |         .!xy16                       
3181:000 | DONE ins | na 16 16 | 00693c | e8          |                 inx                  
3182:000 | DONE ins | na 16 16 | 00693d | e8          |                 inx                  
3183:000 | DONE lbl | na 16 16 | 00693e |             | z_nip                                
3183:001 | DONE ins | na 16 16 | 00693e | 60          |                 rts                  
3184:000 | DONE wsp | na 16 16 |        |             |
3185:000 | DONE wsp | na 16 16 |        |             |
3186:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
3187:000 | DONE cmt | na 16 16 |        |             | ; NUMBER ( addr u -- u | d ) X bytes / X cycles
3188:000 | DONE cmt | na 16 16 |        |             | ; Convert a number string to a double or single cell number. This is a wrapper
3189:000 | DONE cmt | na 16 16 |        |             | ; for >NUMBER and follows the convention set out in the "Forth Programmer's
3190:000 | DONE cmt | na 16 16 |        |             | ; Handbook" (Conklin & Rather) 3rd edition p. 87. Based in part on the "Starting
3191:000 | DONE cmt | na 16 16 |        |             | ; Forth" code https://www.forth.com/starting-forth/10-input-output-operators/
3192:000 | DONE cmt | na 16 16 |        |             | ; Gforth uses S>NUMBER? and S>UNUMBER? which return the numbers and a flag, see
3193:000 | DONE cmt | na 16 16 |        |             | ; https://www.complang.tuwien.ac.at/forth/gforth/Docs-html/Number-Conversion.html
3194:000 | DONE cmt | na 16 16 |        |             | ; Another difference to Gforth is that we follow ANSI Forth that the dot to
3195:000 | DONE cmt | na 16 16 |        |             | ; signal a double cell number is required to be the last character of the
3196:000 | DONE cmt | na 16 16 |        |             | ; string. Number calls >NUMBER which in turn calls UM*, which uses tmp1, tmp2,
3197:000 | DONE cmt | na 16 16 |        |             | ; and tmp3, so we can't use them here, which is pain.
3198:000 | DONE lbl | na 16 16 | 00693f |             | xt_number                            
3199:000 | DONE dir | na 16 16 |        |             |         .!a16                        
3200:000 | DONE cmt | na 16 16 |        |             |                 ; The flags for sign and double are kept on the stack because
3201:000 | DONE cmt | na 16 16 |        |             |                 ; we've run out of temporary variables. MSB is for minus, LSB is
3202:000 | DONE cmt | na 16 16 |        |             |                 ; for double
3203:000 | DONE ins | na 16 16 | 00693f | f4 00 00    |                 phe.# 0000           
3204:000 | DONE wsp | na 16 16 |        |             |
3205:000 | DONE ins | na 16 16 | 006942 | 84 12       |                 sty.d 000212         save length of string, freeing Y
3206:000 | DONE wsp | na 16 16 |        |             |
3207:000 | DONE cmt | na 16 16 |        |             |                 ; if the first character is a minus, strip it off and set
3208:000 | DONE cmt | na 16 16 |        |             |                 ; a flag
3209:000 | DONE ins | na 16 16 | 006944 | e2 20       |                 sep 20               
3209:001 | DONE ctl | na  8 16 |        |             |         .!a8
3210:000 | DONE ins | na  8 16 | 006946 | a1 00       |                 lda.dxi 00           get first character
3211:000 | DONE ins | na  8 16 | 006948 | c9 2d       |                 cmp.# 2d             
3212:000 | DONE ins | na  8 16 | 00694a | c2 20       |                 rep 20               
3212:001 | DONE ctl | na 16 16 |        |             |         .!a16
3213:000 | DONE ins | na 16 16 | 00694c | d0 09       |                 bne 006957           
3214:000 | DONE wsp | na 16 16 |        |             |
3215:000 | DONE cmt | na 16 16 |        |             |                 ; We have a minus.
3216:000 | DONE ins | na 16 16 | 00694e | 68          |                 pla                  
3217:000 | DONE ins | na 16 16 | 00694f | 09 00 ff    |                 ora.# 0ff00          MSB is minus
3218:000 | DONE ins | na 16 16 | 006952 | 48          |                 pha                  
3219:000 | DONE wsp | na 16 16 |        |             |
3220:000 | DONE ins | na 16 16 | 006953 | f6 00       |                 inc.dx 00            start one character later
3221:000 | DONE ins | na 16 16 | 006955 | c6 12       |                 dec.d 000212         reduce string length by one
3222:000 | DONE wsp | na 16 16 |        |             |
3223:000 | DONE lbl | na 16 16 | 006957 |             | number_dot                           
3224:000 | DONE cmt | na 16 16 |        |             |                 ; if the last character is a dot, strip it off and set a flag
3225:000 | DONE ins | na 16 16 | 006957 | a5 12       |                 lda.d 000212         get the string length
3226:000 | DONE ins | na 16 16 | 006959 | 3a          |                 dec.a                subtract one to convert length to index
3227:000 | DONE ins | na 16 16 | 00695a | 18          |                 clc                  
3228:000 | DONE ins | na 16 16 | 00695b | 75 00       |                 adc.dx 00            add length of string
3229:000 | DONE ins | na 16 16 | 00695d | a8          |                 tay                  
3230:000 | DONE ins | na 16 16 | 00695e | e2 20       |                 sep 20               
3230:001 | DONE ctl | na  8 16 |        |             |         .!a8
3231:000 | DONE ins | na  8 16 | 006960 | b9 00 00    |                 lda.y 0000           get last character
3232:000 | DONE ins | na  8 16 | 006963 | c9 2e       |                 cmp.# 2e             
3233:000 | DONE ins | na  8 16 | 006965 | c2 20       |                 rep 20               
3233:001 | DONE ctl | na 16 16 |        |             |         .!a16
3234:000 | DONE ins | na 16 16 | 006967 | d0 07       |                 bne 006970           
3235:000 | DONE wsp | na 16 16 |        |             |
3236:000 | DONE cmt | na 16 16 |        |             |                 ; we have a dot
3237:000 | DONE ins | na 16 16 | 006969 | 68          |                 pla                  get the flag back
3238:000 | DONE ins | na 16 16 | 00696a | 09 ff 00    |                 ora.# 00ff           LSB is double
3239:000 | DONE ins | na 16 16 | 00696d | 48          |                 pha                  
3240:000 | DONE wsp | na 16 16 |        |             |
3241:000 | DONE ins | na 16 16 | 00696e | c6 12       |                 dec.d 000212         reduce string length by one
3242:000 | DONE wsp | na 16 16 |        |             |
3243:000 | DONE lbl | na 16 16 | 006970 |             | number_main                          
3244:000 | DONE cmt | na 16 16 |        |             |                 ; set up stack for subroutine jump to >NUMBER
3245:000 | DONE ins | na 16 16 | 006970 | b5 00       |                 lda.dx 00            get the string address to safety
3246:000 | DONE ins | na 16 16 | 006972 | 74 00       |                 stz.dx 00            NOS is now zero
3247:000 | DONE ins | na 16 16 | 006974 | ca          |                 dex                  
3248:000 | DONE ins | na 16 16 | 006975 | ca          |                 dex                  
3249:000 | DONE ins | na 16 16 | 006976 | 74 00       |                 stz.dx 00            3OS and NOS are now zero
3250:000 | DONE ins | na 16 16 | 006978 | ca          |                 dex                  
3251:000 | DONE ins | na 16 16 | 006979 | ca          |                 dex                  
3252:000 | DONE wsp | na 16 16 |        |             |
3253:000 | DONE ins | na 16 16 | 00697a | 95 00       |                 sta.dx 00            address is back as NOS
3254:000 | DONE ins | na 16 16 | 00697c | a4 12       |                 ldy.d 000212         length is back as TOS
3255:000 | DONE wsp | na 16 16 |        |             |
3256:000 | DONE lbl | na 16 16 | 00697e |             | number_loop                          
3257:000 | DONE ins | na 16 16 | 00697e | 20 29 61    |                 jsr 006129           ( ud addr u -- ud addr u )
3258:000 | DONE wsp | na 16 16 |        |             |
3259:000 | DONE ins | na 16 16 | 006981 | 98          |                 tya                  test length of returned string, should be 0
3260:000 | DONE ins | na 16 16 | 006982 | f0 06       |                 beq 00698a           
3261:000 | DONE wsp | na 16 16 |        |             |
3262:000 | DONE cmt | na 16 16 |        |             |                 ; Something went wrong during conversion, we still have stuff
3263:000 | DONE cmt | na 16 16 |        |             |                 ; left over. Print error string and abort. If number was called
3264:000 | DONE cmt | na 16 16 |        |             |                 ; by INTERPRET, we've already checked for words, so we're in
3265:000 | DONE cmt | na 16 16 |        |             |                 ; trouble one way or another
3266:000 | DONE cmt | na 16 16 |        |             |                 ; TODO print offending string
3267:000 | DONE ins | na 16 16 | 006984 | a9 90 7c    |                 lda.# 007c90         
3268:000 | DONE ins | na 16 16 | 006987 | 4c fd 75    |                 jmp 0075fd           
3269:000 | DONE wsp | na 16 16 |        |             |
3270:000 | DONE lbl | na 16 16 | 00698a |             | number_ok                            
3271:000 | DONE cmt | na 16 16 |        |             |                 ; All characters successfully converted. Drop the string info
3272:000 | DONE ins | na 16 16 | 00698a | b4 02       |                 ldy.dx 02            
3273:000 | DONE ins | na 16 16 | 00698c | e8          |                 inx                  
3274:000 | DONE ins | na 16 16 | 00698d | e8          |                 inx                  
3275:000 | DONE ins | na 16 16 | 00698e | e8          |                 inx                  
3276:000 | DONE ins | na 16 16 | 00698f | e8          |                 inx                  
3277:000 | DONE wsp | na 16 16 |        |             |
3278:000 | DONE cmt | na 16 16 |        |             |                 ; We have a double-cell number on the Data Stack that might have
3279:000 | DONE cmt | na 16 16 |        |             |                 ; a minus and might actually be single-cell
3280:000 | DONE ins | na 16 16 | 006990 | 68          |                 pla                  get copy of the flags
3281:000 | DONE ins | na 16 16 | 006991 | 48          |                 pha                  
3282:000 | DONE ins | na 16 16 | 006992 | 29 ff 00    |                 and.# 00ff           only keep the part with the number size (LSB)
3283:000 | DONE ins | na 16 16 | 006995 | f0 1b       |                 beq 0069b2           
3284:000 | DONE wsp | na 16 16 |        |             |
3285:000 | DONE cmt | na 16 16 |        |             |                 ; This is a double-cell number. If it had a minus, we'll have to
3286:000 | DONE cmt | na 16 16 |        |             |                 ; negate it
3287:000 | DONE ins | na 16 16 | 006997 | 68          |                 pla                  
3288:000 | DONE ins | na 16 16 | 006998 | 29 00 ff    |                 and.# 0ff00          only keep part with the sing (MSB)
3289:000 | DONE ins | na 16 16 | 00699b | f0 25       |                 beq 0069c2           no minus, all done
3290:000 | DONE wsp | na 16 16 |        |             |
3291:000 | DONE ins | na 16 16 | 00699d | b5 00       |                 lda.dx 00            DNEGATE, starts with LSW
3292:000 | DONE ins | na 16 16 | 00699f | 49 ff ff    |                 eor.# 0ffff          
3293:000 | DONE wsp | na 16 16 |        |             |
3294:000 | DONE cmt | na 16 16 |        |             |                 ; INC won't affect the carry flag, so we have to do this the
3295:000 | DONE cmt | na 16 16 |        |             |                 ; hard way
3296:000 | DONE ins | na 16 16 | 0069a2 | 18          |                 clc                  
3297:000 | DONE ins | na 16 16 | 0069a3 | 69 01 00    |                 adc.# 0001           
3298:000 | DONE ins | na 16 16 | 0069a6 | 95 00       |                 sta.dx 00            
3299:000 | DONE wsp | na 16 16 |        |             |
3300:000 | DONE cmt | na 16 16 |        |             |                 ; now MSW (in TOS)
3301:000 | DONE ins | na 16 16 | 0069a8 | 98          |                 tya                  
3302:000 | DONE ins | na 16 16 | 0069a9 | 49 ff ff    |                 eor.# 0ffff          
3303:000 | DONE ins | na 16 16 | 0069ac | 69 00 00    |                 adc.# 0000           we are only interested in the carry
3304:000 | DONE ins | na 16 16 | 0069af | a8          |                 tay                  
3305:000 | DONE wsp | na 16 16 |        |             |
3306:000 | DONE ins | na 16 16 | 0069b0 | 80 10       |                 bra 0069c2           
3307:000 | DONE wsp | na 16 16 |        |             |
3308:000 | DONE lbl | na 16 16 | 0069b2 |             | number_single                        
3309:000 | DONE cmt | na 16 16 |        |             |                 ; This is a single cell number, so we just drop the top cell
3310:000 | DONE ins | na 16 16 | 0069b2 | b4 00       |                 ldy.dx 00            
3311:000 | DONE ins | na 16 16 | 0069b4 | e8          |                 inx                  
3312:000 | DONE ins | na 16 16 | 0069b5 | e8          |                 inx                  
3313:000 | DONE wsp | na 16 16 |        |             |
3314:000 | DONE cmt | na 16 16 |        |             |                 ; If we have a minus, we'll have to negate it. Note this code is
3315:000 | DONE cmt | na 16 16 |        |             |                 ; doubled for speed
3316:000 | DONE ins | na 16 16 | 0069b6 | 68          |                 pla                  
3317:000 | DONE ins | na 16 16 | 0069b7 | 29 00 ff    |                 and.# 0ff00          
3318:000 | DONE ins | na 16 16 | 0069ba | f0 06       |                 beq 0069c2           no minus, all done
3319:000 | DONE wsp | na 16 16 |        |             |
3320:000 | DONE ins | na 16 16 | 0069bc | 98          |                 tya                  NEGATE
3321:000 | DONE ins | na 16 16 | 0069bd | 49 ff ff    |                 eor.# 0ffff          
3322:000 | DONE ins | na 16 16 | 0069c0 | 1a          |                 inc.a                
3323:000 | DONE ins | na 16 16 | 0069c1 | a8          |                 tay                  fall through to end
3324:000 | DONE wsp | na 16 16 |        |             |
3325:000 | DONE lbl | na 16 16 | 0069c2 |             | z_number                             
3325:001 | DONE ins | na 16 16 | 0069c2 | 60          |                 rts                  
3326:000 | DONE wsp | na 16 16 |        |             |
3327:000 | DONE wsp | na 16 16 |        |             |
3328:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
3329:000 | DONE cmt | na 16 16 |        |             | ; OR ( n m -- n ) 6 bytes / X cycles
3330:000 | DONE cmt | na 16 16 |        |             | ; Logical OR
3331:000 | DONE lbl | na 16 16 | 0069c3 |             | xt_or                                
3332:000 | DONE ins | na 16 16 | 0069c3 | 98          |                 tya                  
3333:000 | DONE ins | na 16 16 | 0069c4 | 15 00       |                 ora.dx 00            
3334:000 | DONE ins | na 16 16 | 0069c6 | a8          |                 tay                  
3335:000 | DONE wsp | na 16 16 |        |             |
3336:000 | DONE ins | na 16 16 | 0069c7 | e8          |                 inx                  
3337:000 | DONE ins | na 16 16 | 0069c8 | e8          |                 inx                  
3338:000 | DONE wsp | na 16 16 |        |             |
3339:000 | DONE lbl | na 16 16 | 0069c9 |             | z_or                                 
3339:001 | DONE ins | na 16 16 | 0069c9 | 60          |                 rts                  
3340:000 | DONE wsp | na 16 16 |        |             |
3341:000 | DONE wsp | na 16 16 |        |             |
3342:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
3343:000 | DONE cmt | na 16 16 |        |             | ; OVER ( n m -- n m n )  6 bytes / 14 cycles
3344:000 | DONE cmt | na 16 16 |        |             | ; Push NOS on Data Stack
3345:000 | DONE lbl | na 16 16 | 0069ca |             | xt_over                              
3346:000 | DONE ins | na 16 16 | 0069ca | ca          |                 dex                  
3347:000 | DONE ins | na 16 16 | 0069cb | ca          |                 dex                  
3348:000 | DONE ins | na 16 16 | 0069cc | 94 00       |                 sty.dx 00            
3349:000 | DONE ins | na 16 16 | 0069ce | b4 02       |                 ldy.dx 02            
3350:000 | DONE wsp | na 16 16 |        |             |
3351:000 | DONE lbl | na 16 16 | 0069d0 |             | z_over                               
3351:001 | DONE ins | na 16 16 | 0069d0 | 60          |                 rts                  
3352:000 | DONE wsp | na 16 16 |        |             |
3353:000 | DONE wsp | na 16 16 |        |             |
3354:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
3355:000 | DONE cmt | na 16 16 |        |             | ; PAD ( -- addr ) 11 bytes / X cycles
3356:000 | DONE cmt | na 16 16 |        |             | ; Return address to a temporary area in free memory for user. Must be at least
3357:000 | DONE cmt | na 16 16 |        |             | ; 84 bytes in size (says ANSI). It is located relative to the compile area
3358:000 | DONE cmt | na 16 16 |        |             | ; pointer (CP) and therefore varies in position. This area is reserved for the
3359:000 | DONE cmt | na 16 16 |        |             | ; user and not used by the system
3360:000 | DONE lbl | na 16 16 | 0069d1 |             | xt_pad                               
3361:000 | DONE dir | na 16 16 |        |             |         .!a16                        
3362:000 | DONE ins | na 16 16 | 0069d1 | ca          |                 dex                  
3363:000 | DONE ins | na 16 16 | 0069d2 | ca          |                 dex                  
3364:000 | DONE ins | na 16 16 | 0069d3 | 94 00       |                 sty.dx 00            
3365:000 | DONE wsp | na 16 16 |        |             |
3366:000 | DONE ins | na 16 16 | 0069d5 | a5 28       |                 lda.d 000228         
3367:000 | DONE ins | na 16 16 | 0069d7 | 18          |                 clc                  
3368:000 | DONE ins | na 16 16 | 0069d8 | 69 7f 00    |                 adc.# 00007f         
3369:000 | DONE ins | na 16 16 | 0069db | a8          |                 tay                  
3370:000 | DONE wsp | na 16 16 |        |             |
3371:000 | DONE lbl | na 16 16 | 0069dc |             | z_pad                                
3371:001 | DONE ins | na 16 16 | 0069dc | 60          |                 rts                  
3372:000 | DONE wsp | na 16 16 |        |             |
3373:000 | DONE wsp | na 16 16 |        |             |
3374:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
3375:000 | DONE cmt | na 16 16 |        |             | ; PAGE ( -- ) X bytes / X cycles
3376:000 | DONE cmt | na 16 16 |        |             | ; Clear the screen on vt-100 terminals by sending the code "ESC[2J". This is
3377:000 | DONE cmt | na 16 16 |        |             | ; only useful in interactive scenarios so we don't worry about speed
3378:000 | DONE cmt | na 16 16 |        |             | ; TODO rewrite with EMIT
3379:000 | DONE lbl | na 16 16 | 0069dd |             | xt_page                              
3380:000 | DONE ins | na 16 16 | 0069dd | a9 9f 7c    |                 lda.# 007c9f         
3381:000 | DONE ins | na 16 16 | 0069e0 | 20 03 76    |                 jsr 007603           
3382:000 | DONE wsp | na 16 16 |        |             |
3383:000 | DONE cmt | na 16 16 |        |             |                 ; In theory, this should have moved the cursor to the top left
3384:000 | DONE cmt | na 16 16 |        |             |                 ; corner ("home"), but this doesn't seem to work in practice.
3385:000 | DONE cmt | na 16 16 |        |             |                 ; So we send "ESC[H" as well.
3386:000 | DONE ins | na 16 16 | 0069e3 | a9 a4 7c    |                 lda.# 007ca4         
3387:000 | DONE ins | na 16 16 | 0069e6 | 20 03 76    |                 jsr 007603           
3388:000 | DONE wsp | na 16 16 |        |             |
3389:000 | DONE lbl | na 16 16 | 0069e9 |             | z_page                               
3389:001 | DONE ins | na 16 16 | 0069e9 | 60          |                 rts                  
3390:000 | DONE wsp | na 16 16 |        |             |
3391:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
3392:000 | DONE cmt | na 16 16 |        |             | ; PARSE-NAME ( "name" -- addr u ) 41+ bytes / X cycles
3393:000 | DONE cmt | na 16 16 |        |             | ; Find next word in input string, skipping leading spaces. This is a special
3394:000 | DONE cmt | na 16 16 |        |             | ; form of PARSE and drops through to that word. See PARSE for more detail. We
3395:000 | DONE cmt | na 16 16 |        |             | ; use this word internally for the interpreter because it is a lot easier to use
3396:000 | DONE cmt | na 16 16 |        |             | ; http://forth-standard.org/standard/core/PARSE-NAME has a Forth implementation
3397:000 | DONE cmt | na 16 16 |        |             | ; Roughly, the word is comparable to  BL WORD COUNT in old terms.
3398:000 | DONE lbl | na 16 16 | 0069ea |             | xt_parse-name                        
3399:000 | DONE dir | na 16 16 |        |             |         .!a16                        
3400:000 | DONE dir | na 16 16 |        |             |         .!xy16                       
3401:000 | DONE cmt | na 16 16 |        |             |                 ; skip leading spaces, changing >IN, then place SPACE
3402:000 | DONE cmt | na 16 16 |        |             |                 ; character on data stack for PARSE
3403:000 | DONE ins | na 16 16 | 0069ea | 5a          |                 phy                  save TOS for later use
3404:000 | DONE ins | na 16 16 | 0069eb | a4 20       |                 ldy.d 000220         >IN
3405:000 | DONE ins | na 16 16 | 0069ed | e2 20       |                 sep 20               
3405:001 | DONE ctl | na  8 16 |        |             |         .!a8
3406:000 | DONE lbl | na  8 16 | 0069ef |             | parse-name_loop                      
3407:000 | DONE ins | na  8 16 | 0069ef | c4 1c       |                 cpy.d 00021c         end of line?
3408:000 | DONE ins | na  8 16 | 0069f1 | f0 09       |                 beq 0069fc           
3409:000 | DONE wsp | na  8 16 |        |             |
3410:000 | DONE ins | na  8 16 | 0069f3 | b1 1a       |                 lda.diy 00021a       LDA (CIB),Y
3411:000 | DONE ins | na  8 16 | 0069f5 | c9 20       |                 cmp.# AscSP          
3412:000 | DONE ins | na  8 16 | 0069f7 | d0 17       |                 bne 006a10           
3413:000 | DONE ins | na  8 16 | 0069f9 | c8          |                 iny                  
3414:000 | DONE ins | na  8 16 | 0069fa | 80 f3       |                 bra 0069ef           
3415:000 | DONE wsp | na  8 16 |        |             |
3416:000 | DONE lbl | na  8 16 | 0069fc |             | parse-name_empty_line                
3417:000 | DONE ins | na  8 16 | 0069fc | c2 20       |                 rep 20               
3417:001 | DONE ctl | na 16 16 |        |             |         .!a16
3418:000 | DONE cmt | na 16 16 |        |             |                 ; The Gforth documentation does not say what address is returned
3419:000 | DONE cmt | na 16 16 |        |             |                 ; if a string with only spaces is returned. Experiments with
3420:000 | DONE cmt | na 16 16 |        |             |                 ; the word  : PNT ( "name" -- ) PARSE-NAME SWAP U. U. TYPE ;
3421:000 | DONE cmt | na 16 16 |        |             |                 ; show that it returns the address of the last space in the
3422:000 | DONE cmt | na 16 16 |        |             |                 ; input, which is cib+ciblen. So we do that as well.
3423:000 | DONE ins | na 16 16 | 0069fe | ca          |                 dex                  
3424:000 | DONE ins | na 16 16 | 0069ff | ca          |                 dex                  
3425:000 | DONE ins | na 16 16 | 006a00 | ca          |                 dex                  
3426:000 | DONE ins | na 16 16 | 006a01 | ca          |                 dex                  
3427:000 | DONE wsp | na 16 16 |        |             |
3428:000 | DONE ins | na 16 16 | 006a02 | 7a          |                 ply                  restore old TOS as 3OS
3429:000 | DONE ins | na 16 16 | 006a03 | 94 02       |                 sty.dx 02            
3430:000 | DONE wsp | na 16 16 |        |             |
3431:000 | DONE ins | na 16 16 | 006a05 | a5 1a       |                 lda.d 00021a         
3432:000 | DONE ins | na 16 16 | 006a07 | 18          |                 clc                  
3433:000 | DONE ins | na 16 16 | 006a08 | 65 1c       |                 adc.d 00021c         
3434:000 | DONE ins | na 16 16 | 006a0a | 95 00       |                 sta.dx 00            Address as NOS
3435:000 | DONE wsp | na 16 16 |        |             |
3436:000 | DONE ins | na 16 16 | 006a0c | a0 00 00    |                 ldy.# 0000           TOS
3437:000 | DONE wsp | na 16 16 |        |             |
3438:000 | DONE ins | na 16 16 | 006a0f | 60          |                 rts                  don't have to go through PARSE
3439:000 | DONE wsp | na 16 16 |        |             |
3440:000 | DONE lbl | na 16 16 | 006a10 |             | parse-name_found                     
3441:000 | DONE dir | na 16 16 |        |             |         .!xy16                       
3442:000 | DONE ins | na 16 16 | 006a10 | c2 20       |                 rep 20               
3442:001 | DONE ctl | na 16 16 |        |             |         .!a16
3443:000 | DONE ins | na 16 16 | 006a12 | 84 20       |                 sty.d 000220         new >IN
3444:000 | DONE wsp | na 16 16 |        |             |
3445:000 | DONE ins | na 16 16 | 006a14 | 7a          |                 ply                  recover TOS
3446:000 | DONE ins | na 16 16 | 006a15 | ca          |                 dex                  
3447:000 | DONE ins | na 16 16 | 006a16 | ca          |                 dex                  
3448:000 | DONE ins | na 16 16 | 006a17 | 94 00       |                 sty.dx 00            
3449:000 | DONE wsp | na 16 16 |        |             |
3450:000 | DONE ins | na 16 16 | 006a19 | a0 20 00    |                 ldy.# AscSP          put space on TOS for PARSE
3451:000 | DONE wsp | na 16 16 |        |             |
3452:000 | DONE cmt | na 16 16 |        |             |                 ; fall thru to PARSE
3453:000 | DONE wsp | na 16 16 |        |             |
3454:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
3455:000 | DONE cmt | na 16 16 |        |             | ; PARSE ( c "name" -- addr u ) 45 bytes / X+ cycles
3456:000 | DONE cmt | na 16 16 |        |             | ; Find word in input string delimited by character given Do not skip leading
3457:000 | DONE cmt | na 16 16 |        |             | ; delimiters, this is an important difference to PARSE-NAME. PARSE and
3458:000 | DONE cmt | na 16 16 |        |             | ; PARSE-NAME replace WORD in modern systems. See the ANSI documentation at
3459:000 | DONE cmt | na 16 16 |        |             | ; http://www.forth200x.org/documents/html3/rationale.html#rat:core:PARSE
3460:000 | DONE cmt | na 16 16 |        |             | ; PARSE-NAME drops through to here
3461:000 | DONE cmt | na 16 16 |        |             | ;
3462:000 | DONE cmt | na 16 16 |        |             | ;    cib   cib+toin    cib+ciblen
3463:000 | DONE cmt | na 16 16 |        |             | ;     v       v             v
3464:000 | DONE cmt | na 16 16 |        |             | ;     |#####################|              Length of found string:
3465:000 | DONE cmt | na 16 16 |        |             | ;                                          ciblen - toin
3466:000 | DONE cmt | na 16 16 |        |             | ;     +------>|  toin (>IN)
3467:000 | DONE cmt | na 16 16 |        |             | ;     +-------------------->|  ciblen
3468:000 | DONE cmt | na 16 16 |        |             | ;
3469:000 | DONE cmt | na 16 16 |        |             | ; The input string is stored starting at the address in the Current Input Buffer
3470:000 | DONE cmt | na 16 16 |        |             | ; (CIB), the length of which is in CIBLEN. While searching for the delimiter,
3471:000 | DONE cmt | na 16 16 |        |             | ; TOIN (>IN) points to the where we currently are. Since PARSE does not skip
3472:000 | DONE cmt | na 16 16 |        |             | ; leading delimiters, we assume we are on a useful string.
3473:000 | DONE lbl | na 16 16 | 006a1c |             | xt_parse                             
3474:000 | DONE dir | na 16 16 |        |             |         .!a16                        
3475:000 | DONE dir | na 16 16 |        |             |         .!xy16                       
3476:000 | DONE ins | na 16 16 | 006a1c | 84 0a       |                 sty.d 00020a         save delimiter, char is LSB
3477:000 | DONE wsp | na 16 16 |        |             |
3478:000 | DONE cmt | na 16 16 |        |             |                 ; save beginning of new word (cib+toin) to NOS. Don't need to
3479:000 | DONE cmt | na 16 16 |        |             |                 ; worry about TOS because Y gets clobbered anyway before we
3480:000 | DONE cmt | na 16 16 |        |             |                 ; return
3481:000 | DONE ins | na 16 16 | 006a1e | a5 20       |                 lda.d 000220         
3482:000 | DONE ins | na 16 16 | 006a20 | 85 0e       |                 sta.d 00020e         save >IN for later length calculation
3483:000 | DONE ins | na 16 16 | 006a22 | 18          |                 clc                  
3484:000 | DONE ins | na 16 16 | 006a23 | 65 1a       |                 adc.d 00021a         
3485:000 | DONE wsp | na 16 16 |        |             |
3486:000 | DONE ins | na 16 16 | 006a25 | ca          |                 dex                  save addr as NOS
3487:000 | DONE ins | na 16 16 | 006a26 | ca          |                 dex                  
3488:000 | DONE ins | na 16 16 | 006a27 | 95 00       |                 sta.dx 00            
3489:000 | DONE wsp | na 16 16 |        |             |
3490:000 | DONE ins | na 16 16 | 006a29 | 64 0c       |                 stz.d 00020c         offset for EOL/char found adjustment of >IN
3491:000 | DONE wsp | na 16 16 |        |             |
3492:000 | DONE cmt | na 16 16 |        |             |                 ; prepare loop using Y as index
3493:000 | DONE ins | na 16 16 | 006a2b | a4 20       |                 ldy.d 000220         
3494:000 | DONE ins | na 16 16 | 006a2d | e2 20       |                 sep 20               
3494:001 | DONE ctl | na  8 16 |        |             |         .!a8
3495:000 | DONE wsp | na  8 16 |        |             |
3496:000 | DONE lbl | na  8 16 | 006a2f |             | parse_loop                           
3497:000 | DONE ins | na  8 16 | 006a2f | c4 1c       |                 cpy.d 00021c         check for EOL first
3498:000 | DONE ins | na  8 16 | 006a31 | f0 0d       |                 beq 006a40           
3499:000 | DONE wsp | na  8 16 |        |             |
3500:000 | DONE ins | na  8 16 | 006a33 | b1 1a       |                 lda.diy 00021a       LDA (CIB),Y
3501:000 | DONE ins | na  8 16 | 006a35 | c5 0a       |                 cmp.d 00020a         found delimiter?
3502:000 | DONE ins | na  8 16 | 006a37 | f0 03       |                 beq 006a3c           
3503:000 | DONE ins | na  8 16 | 006a39 | c8          |                 iny                  
3504:000 | DONE ins | na  8 16 | 006a3a | 80 f3       |                 bra 006a2f           
3505:000 | DONE wsp | na  8 16 |        |             |
3506:000 | DONE lbl | na  8 16 | 006a3c |             | parse_found_delimiter                
3507:000 | DONE cmt | na  8 16 |        |             |                 ; If we haven't reached the end of the line, but found
3508:000 | DONE cmt | na  8 16 |        |             |                 ; a delimiter, we want >IN to point to the next character after
3509:000 | DONE cmt | na  8 16 |        |             |                 ; the delimiter, not the delimiter itself. This is what the
3510:000 | DONE cmt | na  8 16 |        |             |                 ; offset is for
3511:000 | DONE ins | na  8 16 | 006a3c | c2 20       |                 rep 20               
3511:001 | DONE ctl | na 16 16 |        |             |         .!a16
3512:000 | DONE ins | na 16 16 | 006a3e | e6 0c       |                 inc.d 00020c         
3513:000 | DONE wsp | na 16 16 |        |             |
3514:000 | DONE lbl | na 16 16 | 006a40 |             | parse_reached_eol                    
3515:000 | DONE cmt | na 16 16 |        |             |                 ; calculate length of string found (see ascii drawing)
3516:000 | DONE dir | na 16 16 |        |             |         .!xy16                       
3517:000 | DONE ins | na 16 16 | 006a40 | c2 20       |                 rep 20               
3517:001 | DONE ctl | na 16 16 |        |             |         .!a16
3518:000 | DONE ins | na 16 16 | 006a42 | 98          |                 tya                  
3519:000 | DONE ins | na 16 16 | 006a43 | 38          |                 sec                  
3520:000 | DONE ins | na 16 16 | 006a44 | e5 0e       |                 sbc.d 00020e         original value for >IN / index of first char
3521:000 | DONE ins | na 16 16 | 006a46 | 48          |                 pha                  save so we can manipulate Y
3522:000 | DONE wsp | na 16 16 |        |             |
3523:000 | DONE cmt | na 16 16 |        |             |                 ; calculate new >IN
3524:000 | DONE ins | na 16 16 | 006a47 | 98          |                 tya                  
3525:000 | DONE ins | na 16 16 | 006a48 | 18          |                 clc                  
3526:000 | DONE ins | na 16 16 | 006a49 | 65 0c       |                 adc.d 00020c         offset for EOL vs found delimiter
3527:000 | DONE ins | na 16 16 | 006a4b | 85 20       |                 sta.d 000220         
3528:000 | DONE wsp | na 16 16 |        |             |
3529:000 | DONE ins | na 16 16 | 006a4d | 7a          |                 ply                  length of string in TOS
3530:000 | DONE wsp | na 16 16 |        |             |
3531:000 | DONE lbl | na 16 16 | 006a4e |             | z_parse-name                         
3532:000 | DONE lbl | na 16 16 | 006a4e |             | z_parse                              
3532:001 | DONE ins | na 16 16 | 006a4e | 60          |                 rts                  
3533:000 | DONE wsp | na 16 16 |        |             |
3534:000 | DONE wsp | na 16 16 |        |             |
3535:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
3536:000 | DONE cmt | na 16 16 |        |             | ; PICK ( n n u -- n n n ) X bytes / X cycles
3537:000 | DONE cmt | na 16 16 |        |             | ; Take the u-th element out of the stack and put it on TOS, overwriting the
3538:000 | DONE cmt | na 16 16 |        |             | ; current TOS. 0 PICK is equivalent to DUP, 1 PICK to OVER. Note that using PICK
3539:000 | DONE cmt | na 16 16 |        |             | ; is considered poor coding form. Also note that FIG Forth has a different
3540:000 | DONE cmt | na 16 16 |        |             | ; behavior for PICK than ANS Forth.
3541:000 | DONE cmt | na 16 16 |        |             | ; TODO use DEPTH to check for underflow
3542:000 | DONE lbl | na 16 16 | 006a4f |             | xt_pick                              
3543:000 | DONE ins | na 16 16 | 006a4f | 86 10       |                 stx.d 000210         
3544:000 | DONE wsp | na 16 16 |        |             |
3545:000 | DONE ins | na 16 16 | 006a51 | 98          |                 tya                  Y is just an offset to the DSP
3546:000 | DONE ins | na 16 16 | 006a52 | 0a          |                 asl.a                double because of cell size two bytes
3547:000 | DONE wsp | na 16 16 |        |             |
3548:000 | DONE ins | na 16 16 | 006a53 | 18          |                 clc                  
3549:000 | DONE ins | na 16 16 | 006a54 | 65 10       |                 adc.d 000210         
3550:000 | DONE wsp | na 16 16 |        |             |
3551:000 | DONE ins | na 16 16 | 006a56 | aa          |                 tax                  
3552:000 | DONE ins | na 16 16 | 006a57 | b5 00       |                 lda.dx 00            LDA $00,X
3553:000 | DONE ins | na 16 16 | 006a59 | a8          |                 tay                  Is now TOS
3554:000 | DONE wsp | na 16 16 |        |             |
3555:000 | DONE ins | na 16 16 | 006a5a | a6 10       |                 ldx.d 000210         
3556:000 | DONE wsp | na 16 16 |        |             |
3557:000 | DONE lbl | na 16 16 | 006a5c |             | z_pick                               
3557:001 | DONE ins | na 16 16 | 006a5c | 60          |                 rts                  
3558:000 | DONE wsp | na 16 16 |        |             |
3559:000 | DONE wsp | na 16 16 |        |             |
3560:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
3561:000 | DONE cmt | na 16 16 |        |             | ; +! "PLUSSTORE" ( n addr -- ) 15 bytes / X cycles
3562:000 | DONE cmt | na 16 16 |        |             | ; Add NOS to address in TOS
3563:000 | DONE lbl | na 16 16 | 006a5d |             | xt_plusstore                         
3564:000 | DONE dir | na 16 16 |        |             |         .!a16                        
3565:000 | DONE ins | na 16 16 | 006a5d | b9 00 00    |                 lda.y 0000           
3566:000 | DONE ins | na 16 16 | 006a60 | 18          |                 clc                  
3567:000 | DONE ins | na 16 16 | 006a61 | 75 00       |                 adc.dx 00            
3568:000 | DONE ins | na 16 16 | 006a63 | 99 00 00    |                 sta.y 0000           
3569:000 | DONE wsp | na 16 16 |        |             |
3570:000 | DONE ins | na 16 16 | 006a66 | b4 02       |                 ldy.dx 02            
3571:000 | DONE ins | na 16 16 | 006a68 | e8          |                 inx                  
3572:000 | DONE ins | na 16 16 | 006a69 | e8          |                 inx                  
3573:000 | DONE ins | na 16 16 | 006a6a | e8          |                 inx                  
3574:000 | DONE ins | na 16 16 | 006a6b | e8          |                 inx                  
3575:000 | DONE wsp | na 16 16 |        |             |
3576:000 | DONE lbl | na 16 16 | 006a6c |             | z_plusstore                          
3576:001 | DONE ins | na 16 16 | 006a6c | 60          |                 rts                  
3577:000 | DONE wsp | na 16 16 |        |             |
3578:000 | DONE wsp | na 16 16 |        |             |
3579:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
3580:000 | DONE cmt | na 16 16 |        |             | ; POSTPONE ( -- ) X bytes / X cycles
3581:000 | DONE cmt | na 16 16 |        |             | ; Add the compilation behavior of a word to a new word at compile time. If the
3582:000 | DONE cmt | na 16 16 |        |             | ; word that follows it is immediate, include it so that it will be compiled when
3583:000 | DONE cmt | na 16 16 |        |             | ; the word being defined is itself used for a new word. Tricky, but very useful.
3584:000 | DONE cmt | na 16 16 |        |             | ; Because POSTPONE expects a word (not an xt) in the input stream (not on the
3585:000 | DONE cmt | na 16 16 |        |             | ; Data Stack). This means we cannot build words with "jsr xt_postpone, jsr
3586:000 | DONE cmt | na 16 16 |        |             | ; <word>" directly. This word uses tmp1
3587:000 | DONE lbl | na 16 16 | 006a6d |             | xt_postpone                          
3588:000 | DONE cmt | na 16 16 |        |             |                 ; get name from string
3589:000 | DONE ins | na 16 16 | 006a6d | 20 ea 69    |                 jsr 0069ea           ( addr n )
3590:000 | DONE wsp | na 16 16 |        |             |
3591:000 | DONE cmt | na 16 16 |        |             |                 ; if there is no word in stream, complain and abort
3592:000 | DONE ins | na 16 16 | 006a70 | d0 06       |                 bne 006a78           
3593:000 | DONE ins | na 16 16 | 006a72 | a9 f3 7b    |                 lda.# 007bf3         
3594:000 | DONE ins | na 16 16 | 006a75 | 4c fd 75    |                 jmp 0075fd           
3595:000 | DONE wsp | na 16 16 |        |             |
3596:000 | DONE lbl | na 16 16 | 006a78 |             | pp_got_word                          
3597:000 | DONE cmt | na 16 16 |        |             |                 ; convert to lower
3598:000 | DONE cmt | na 16 16 |        |             |                 ; TODO move this to FIND-NAME
3599:000 | DONE ins | na 16 16 | 006a78 | 20 36 76    |                 jsr 007636           
3600:000 | DONE wsp | na 16 16 |        |             |
3601:000 | DONE ins | na 16 16 | 006a7b | 20 7b 67    |                 jsr 00677b           ( nt | 0 )
3602:000 | DONE wsp | na 16 16 |        |             |
3603:000 | DONE cmt | na 16 16 |        |             |                 ; if word is not in Dictionary, complain and abort
3604:000 | DONE ins | na 16 16 | 006a7e | d0 03       |                 bne 006a83           
3605:000 | DONE ins | na 16 16 | 006a80 | a9 90 7c    |                 lda.# 007c90         
3606:000 | DONE wsp | na 16 16 |        |             |
3607:000 | DONE lbl | na 16 16 | 006a83 |             | pp_got_nt                            
3608:000 | DONE cmt | na 16 16 |        |             |                 ; Keep nt safe for later use
3609:000 | DONE ins | na 16 16 | 006a83 | 84 0a       |                 sty.d 00020a         
3610:000 | DONE wsp | na 16 16 |        |             |
3611:000 | DONE cmt | na 16 16 |        |             |                 ; We need the xt instead of the nt for the actual compiling
3612:000 | DONE ins | na 16 16 | 006a85 | 20 12 69    |                 jsr 006912           NAME>INT ( nt -- xt )
3613:000 | DONE wsp | na 16 16 |        |             |
3614:000 | DONE cmt | na 16 16 |        |             |                 ; See if this is an immediate word. This is easier with nt than
3615:000 | DONE cmt | na 16 16 |        |             |                 ; with xt
3616:000 | DONE ins | na 16 16 | 006a88 | b2 0a       |                 lda.di 00020a        LDA (TMP1) - get status byte of word
3617:000 | DONE ins | na 16 16 | 006a8a | eb          |                 xba                  flags are MSB
3618:000 | DONE ins | na 16 16 | 006a8b | 29 02 00    |                 and.# IM             mask everything but Immediate bit
3619:000 | DONE ins | na 16 16 | 006a8e | f0 03       |                 beq 006a93           
3620:000 | DONE wsp | na 16 16 |        |             |
3621:000 | DONE cmt | na 16 16 |        |             |                 ; The word is immediate, so instead of executing it right now,
3622:000 | DONE cmt | na 16 16 |        |             |                 ; we compile it. xt is on the stack, so this is simple. The RTS
3623:000 | DONE cmt | na 16 16 |        |             |                 ; of COMPILE, takes us back to the original caller
3624:000 | DONE ins | na 16 16 | 006a90 | 4c 77 65    |                 jmp 006577           JSR/RTS
3625:000 | DONE wsp | na 16 16 |        |             |
3626:000 | DONE lbl | na 16 16 | 006a93 |             | pp_not_immediate                     
3627:000 | DONE cmt | na 16 16 |        |             |                 ; This is not an immediate word, so we enact "deferred
3628:000 | DONE cmt | na 16 16 |        |             |                 ; compilation" by including ' <NAME> COMPILE, which we do by
3629:000 | DONE cmt | na 16 16 |        |             |                 ; compiling the run-time routine of LITERAL, the xt itself, and
3630:000 | DONE cmt | na 16 16 |        |             |                 ; a subroutine jump to COMPILE,
3631:000 | DONE ins | na 16 16 | 006a93 | f4 7a 68    |                 phe.# 00687a         PEA LITERAL_RT
3632:000 | DONE ins | na 16 16 | 006a96 | 20 dc 75    |                 jsr 0075dc           
3633:000 | DONE wsp | na 16 16 |        |             |
3634:000 | DONE cmt | na 16 16 |        |             |                 ; The xt is TOS. We can't use COMPILE, here because it might
3635:000 | DONE cmt | na 16 16 |        |             |                 ; decided to do something silly like compile it as a native word
3636:000 | DONE cmt | na 16 16 |        |             |                 ; and ruin everything
3637:000 | DONE ins | na 16 16 | 006a99 | 20 29 62    |                 jsr 006229           
3638:000 | DONE wsp | na 16 16 |        |             |
3639:000 | DONE cmt | na 16 16 |        |             |                 ; compile COMPILE, - it's RTS takes us back to original caller
3640:000 | DONE ins | na 16 16 | 006a9c | f4 77 65    |                 phe.# 006577         
3641:000 | DONE ins | na 16 16 | 006a9f | 20 dc 75    |                 jsr 0075dc           JSR/RTS
3642:000 | DONE wsp | na 16 16 |        |             |
3643:000 | DONE lbl | na 16 16 | 006aa2 |             | z_postpone                           
3643:001 | DONE ins | na 16 16 | 006aa2 | 60          |                 rts                  
3644:000 | DONE wsp | na 16 16 |        |             |
3645:000 | DONE wsp | na 16 16 |        |             |
3646:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
3647:000 | DONE cmt | na 16 16 |        |             | ; R@ "RFETCH" ( -- n ) (R: n -- n )  X bytes / X cycles
3648:000 | DONE cmt | na 16 16 |        |             | ; Get (not pull) Top of Return Stack. We follow Gforth in that this word is not
3649:000 | DONE cmt | na 16 16 |        |             | ; compiled only, because it can be interesting to know what the top of R is in
3650:000 | DONE cmt | na 16 16 |        |             | ; an interactive setting. However, this causes all kinds of problems if we try
3651:000 | DONE cmt | na 16 16 |        |             | ; to natively compile the word, so it does not get the NC flag even though it is
3652:000 | DONE cmt | na 16 16 |        |             | ; actually short enough to make that reasonable
3653:000 | DONE cmt | na 16 16 |        |             | ; TODO consider special case in COMPILE, see there
3654:000 | DONE lbl | na 16 16 | 006aa3 |             | xt_rfetch                            
3655:000 | DONE cmt | na 16 16 |        |             |                 ; get return address that is on top of the return stack
3656:000 | DONE ins | na 16 16 | 006aa3 | 68          |                 pla                  
3657:000 | DONE wsp | na 16 16 |        |             |
3658:000 | DONE ins | na 16 16 | 006aa4 | ca          |                 dex                  
3659:000 | DONE ins | na 16 16 | 006aa5 | ca          |                 dex                  
3660:000 | DONE ins | na 16 16 | 006aa6 | 94 00       |                 sty.dx 00            
3661:000 | DONE wsp | na 16 16 |        |             |
3662:000 | DONE ins | na 16 16 | 006aa8 | 7a          |                 ply                  get top of return stack and push copy back again
3663:000 | DONE ins | na 16 16 | 006aa9 | 5a          |                 phy                  
3664:000 | DONE wsp | na 16 16 |        |             |
3665:000 | DONE ins | na 16 16 | 006aaa | 48          |                 pha                  restore the return address
3666:000 | DONE wsp | na 16 16 |        |             |
3667:000 | DONE lbl | na 16 16 | 006aab |             | z_rfetch                             
3667:001 | DONE ins | na 16 16 | 006aab | 60          |                 rts                  
3668:000 | DONE wsp | na 16 16 |        |             |
3669:000 | DONE wsp | na 16 16 |        |             |
3670:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
3671:000 | DONE cmt | na 16 16 |        |             | ; R> "FROMR" ( -- n ) (R: n -- )  7 bytes / 23 cycles
3672:000 | DONE cmt | na 16 16 |        |             | ; Move Top of Return Stack to Top of Data Stack. Remember we have to move the
3673:000 | DONE cmt | na 16 16 |        |             | ; jump address out of the way first.
3674:000 | DONE cmt | na 16 16 |        |             | ; TODO consider stripping PHA/PLA if natively compiled (see COMPILE,)
3675:000 | DONE lbl | na 16 16 | 006aac |             | xt_fromr                             
3676:000 | DONE cmt | na 16 16 |        |             |                 ; Rescue the address of the return jump that is currently top of
3677:000 | DONE cmt | na 16 16 |        |             |                 ; the Return Stack. If this word is natively compiled, this is
3678:000 | DONE cmt | na 16 16 |        |             |                 ; a waste of nine cycles
3679:000 | DONE ins | na 16 16 | 006aac | 68          |                 pla                  
3680:000 | DONE wsp | na 16 16 |        |             |
3681:000 | DONE ins | na 16 16 | 006aad | ca          |                 dex                  
3682:000 | DONE ins | na 16 16 | 006aae | ca          |                 dex                  
3683:000 | DONE ins | na 16 16 | 006aaf | 94 00       |                 sty.dx 00            
3684:000 | DONE wsp | na 16 16 |        |             |
3685:000 | DONE ins | na 16 16 | 006ab1 | 7a          |                 ply                  the actual work
3686:000 | DONE wsp | na 16 16 |        |             |
3687:000 | DONE ins | na 16 16 | 006ab2 | 48          |                 pha                  get return address back
3688:000 | DONE wsp | na 16 16 |        |             |
3689:000 | DONE lbl | na 16 16 | 006ab3 |             | z_fromr                              
3689:001 | DONE ins | na 16 16 | 006ab3 | 60          |                 rts                  
3690:000 | DONE wsp | na 16 16 |        |             |
3691:000 | DONE wsp | na 16 16 |        |             |
3692:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
3693:000 | DONE cmt | na 16 16 |        |             | ; REFILL ( -- f ) X bytes / X cycles
3694:000 | DONE cmt | na 16 16 |        |             | ; "Attempt to fill the input buffer from the input source, returning a true flag
3695:000 | DONE cmt | na 16 16 |        |             | ; if successful. When the input source is the user input device, attempt to
3696:000 | DONE cmt | na 16 16 |        |             | ; receive input into the terminal input buffer. If successful, make the result
3697:000 | DONE cmt | na 16 16 |        |             | ; the input buffer, set >IN to zero, and return true. Receipt of a line
3698:000 | DONE cmt | na 16 16 |        |             | ; containing no characters is considered successful. If there is no input
3699:000 | DONE cmt | na 16 16 |        |             | ; available from the current input source, return false. When the input source
3700:000 | DONE cmt | na 16 16 |        |             | ; is a string from EVALUATE, return false and perform no other action."
3701:000 | DONE cmt | na 16 16 |        |             | ; See https://www.complang.tuwien.ac.at/forth/gforth/Docs-html/The-Input-Stream.html
3702:000 | DONE cmt | na 16 16 |        |             | ; and Conklin & Rather p. 156
3703:000 | DONE lbl | na 16 16 | 006ab4 |             | xt_refill                            
3704:000 | DONE dir | na 16 16 |        |             |         .!a16                        
3705:000 | DONE dir | na 16 16 |        |             |         .!xy16                       
3706:000 | DONE cmt | na 16 16 |        |             |                 ; We handle buffer switches here so that regardless of input
3707:000 | DONE cmt | na 16 16 |        |             |                 ; source, we have access to the previous input. This is not in
3708:000 | DONE cmt | na 16 16 |        |             |                 ; the ANSI specification in any way.
3709:000 | DONE ins | na 16 16 | 006ab4 | a5 1a       |                 lda.d 00021a         
3710:000 | DONE ins | na 16 16 | 006ab6 | 49 00 01    |                 eor.# 0100           flip 07d00 / 07c00
3711:000 | DONE ins | na 16 16 | 006ab9 | 85 1a       |                 sta.d 00021a         
3712:000 | DONE wsp | na 16 16 |        |             |
3713:000 | DONE ins | na 16 16 | 006abb | a5 1c       |                 lda.d 00021c         current length is now previous length
3714:000 | DONE ins | na 16 16 | 006abd | 85 1e       |                 sta.d 00021e         
3715:000 | DONE wsp | na 16 16 |        |             |
3716:000 | DONE cmt | na 16 16 |        |             |                 ; Get input source from SOURCE-ID. We don't have blocks in this
3717:000 | DONE cmt | na 16 16 |        |             |                 ; version, or else we would have to check BLK first. This is an
3718:000 | DONE cmt | na 16 16 |        |             |                 ; optimized version of a subroutine jump to SOURCE-ID
3719:000 | DONE ins | na 16 16 | 006abf | a5 18       |                 lda.d 000218         
3720:000 | DONE ins | na 16 16 | 006ac1 | d0 14       |                 bne 006ad7           
3721:000 | DONE wsp | na 16 16 |        |             |
3722:000 | DONE cmt | na 16 16 |        |             |                 ; SOURCE-ID of zero means we're getting stuff from the keyboard
3723:000 | DONE cmt | na 16 16 |        |             |                 ; with ACCEPT.
3724:000 | DONE ins | na 16 16 | 006ac3 | ca          |                 dex                  push Data Stack down twice
3725:000 | DONE ins | na 16 16 | 006ac4 | ca          |                 dex                  
3726:000 | DONE ins | na 16 16 | 006ac5 | 94 00       |                 sty.dx 00            
3727:000 | DONE wsp | na 16 16 |        |             |
3728:000 | DONE ins | na 16 16 | 006ac7 | a5 1a       |                 lda.d 00021a         address of current input buffer NOS
3729:000 | DONE ins | na 16 16 | 006ac9 | ca          |                 dex                  
3730:000 | DONE ins | na 16 16 | 006aca | ca          |                 dex                  
3731:000 | DONE ins | na 16 16 | 006acb | 95 00       |                 sta.dx 00            
3732:000 | DONE wsp | na 16 16 |        |             |
3733:000 | DONE ins | na 16 16 | 006acd | a0 ff 00    |                 ldy.# 0000ff         
3734:000 | DONE wsp | na 16 16 |        |             |
3735:000 | DONE ins | na 16 16 | 006ad0 | 20 1d 64    |                 jsr 00641d           ( addr n1 -- n2)
3736:000 | DONE wsp | na 16 16 |        |             |
3737:000 | DONE cmt | na 16 16 |        |             |                 ; ACCEPT returns the number of characters accepted, but we don't
3738:000 | DONE cmt | na 16 16 |        |             |                 ; need them. We just overwrite TOS this with the flag
3739:000 | DONE ins | na 16 16 | 006ad3 | a0 ff ff    |                 ldy.# 0ffff          
3740:000 | DONE wsp | na 16 16 |        |             |
3741:000 | DONE ins | na 16 16 | 006ad6 | 60          |                 rts                  
3742:000 | DONE wsp | na 16 16 |        |             |
3743:000 | DONE lbl | na 16 16 | 006ad7 |             | refill_src_not_kbd                   
3744:000 | DONE cmt | na 16 16 |        |             |                 ; If SOURCE-ID doesn't return a zero, it must be a string in
3745:000 | DONE cmt | na 16 16 |        |             |                 ; memory or a file (remember, no blocks in this version)
3746:000 | DONE ins | na 16 16 | 006ad7 | 1a          |                 inc.a                
3747:000 | DONE ins | na 16 16 | 006ad8 | d0 06       |                 bne 006ae0           
3748:000 | DONE wsp | na 16 16 |        |             |
3749:000 | DONE cmt | na 16 16 |        |             |                 ; Simply return FALSE flag as per specification
3750:000 | DONE ins | na 16 16 | 006ada | ca          |                 dex                  
3751:000 | DONE ins | na 16 16 | 006adb | ca          |                 dex                  
3752:000 | DONE ins | na 16 16 | 006adc | 94 00       |                 sty.dx 00            
3753:000 | DONE ins | na 16 16 | 006ade | a8          |                 tay                  
3754:000 | DONE wsp | na 16 16 |        |             |
3755:000 | DONE ins | na 16 16 | 006adf | 60          |                 rts                  
3756:000 | DONE wsp | na 16 16 |        |             |
3757:000 | DONE lbl | na 16 16 | 006ae0 |             | refill_source_is_not_string          
3758:000 | DONE cmt | na 16 16 |        |             |                 ; Since we don't have blocks, this must mean that we are trying
3759:000 | DONE cmt | na 16 16 |        |             |                 ; to read from a file. However, we don't have files yet, so we
3760:000 | DONE cmt | na 16 16 |        |             |                 ; report an error and jump to ABORT.
3761:000 | DONE ins | na 16 16 | 006ae0 | a9 48 7c    |                 lda.# 007c48         
3762:000 | DONE ins | na 16 16 | 006ae3 | 4c fd 75    |                 jmp 0075fd           
3763:000 | DONE wsp | na 16 16 |        |             |
3764:000 | DONE lbl | na 16 16 | 006ae6 |             | z_refill                             
3764:001 | DONE ins | na 16 16 | 006ae6 | 60          |                 rts                  dummy for compiling
3765:000 | DONE wsp | na 16 16 |        |             |
3766:000 | DONE wsp | na 16 16 |        |             |
3767:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
3768:000 | DONE cmt | na 16 16 |        |             | ; ROT ( a b c -- b c a ) X bytes / X cycles
3769:000 | DONE cmt | na 16 16 |        |             | ; Rotate the top three entries downwards (third entry becomes first)
3770:000 | DONE cmt | na 16 16 |        |             | ; Remember this with the "R" for "revolution": The bottom entry becomes the top.
3771:000 | DONE lbl | na 16 16 | 006ae7 |             | xt_rot                               
3772:000 | DONE dir | na 16 16 |        |             |         .!a16                        
3773:000 | DONE dir | na 16 16 |        |             |         .!xy16                       
3774:000 | DONE ins | na 16 16 | 006ae7 | b5 00       |                 lda.dx 00            save b
3775:000 | DONE ins | na 16 16 | 006ae9 | 94 00       |                 sty.dx 00            move c to NOS
3776:000 | DONE ins | na 16 16 | 006aeb | b4 02       |                 ldy.dx 02            move a to TOS
3777:000 | DONE ins | na 16 16 | 006aed | 95 02       |                 sta.dx 02            save b as 3OS
3778:000 | DONE wsp | na 16 16 |        |             |
3779:000 | DONE lbl | na 16 16 | 006aef |             | z_rot                                
3779:001 | DONE ins | na 16 16 | 006aef | 60          |                 rts                  
3780:000 | DONE wsp | na 16 16 |        |             |
3781:000 | DONE wsp | na 16 16 |        |             |
3782:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
3783:000 | DONE cmt | na 16 16 |        |             | ; RSHIFT ( n u -- u ) X bytes / X cycles
3784:000 | DONE cmt | na 16 16 |        |             | ; Shift TOS right, filling vacant bits with zero
3785:000 | DONE lbl | na 16 16 | 006af0 |             | xt_rshift                            
3786:000 | DONE cmt | na 16 16 |        |             |                 ; We shift at most 16 bits, because anything above that will be
3787:000 | DONE cmt | na 16 16 |        |             |                 ; zeros anyway
3788:000 | DONE ins | na 16 16 | 006af0 | 98          |                 tya                  
3789:000 | DONE ins | na 16 16 | 006af1 | 29 0f 00    |                 and.# 000f           
3790:000 | DONE ins | na 16 16 | 006af4 | f0 09       |                 beq 006aff           if zero shifts, we're done
3791:000 | DONE wsp | na 16 16 |        |             |
3792:000 | DONE ins | na 16 16 | 006af6 | a8          |                 tay                  number of shifts is TOS
3793:000 | DONE ins | na 16 16 | 006af7 | b5 00       |                 lda.dx 00            number is in NOS
3794:000 | DONE lbl | na 16 16 | 006af9 |             | rshift_loop                          
3795:000 | DONE ins | na 16 16 | 006af9 | 4a          |                 lsr.a                
3796:000 | DONE ins | na 16 16 | 006afa | 88          |                 dey                  
3797:000 | DONE ins | na 16 16 | 006afb | d0 fc       |                 bne 006af9           
3798:000 | DONE wsp | na 16 16 |        |             |
3799:000 | DONE ins | na 16 16 | 006afd | 95 00       |                 sta.dx 00            put NOS, which last step will pull up
3800:000 | DONE wsp | na 16 16 |        |             |
3801:000 | DONE lbl | na 16 16 | 006aff |             | rshift_done                          
3802:000 | DONE ins | na 16 16 | 006aff | b4 00       |                 ldy.dx 00            
3803:000 | DONE ins | na 16 16 | 006b01 | e8          |                 inx                  
3804:000 | DONE ins | na 16 16 | 006b02 | e8          |                 inx                  
3805:000 | DONE wsp | na 16 16 |        |             |
3806:000 | DONE lbl | na 16 16 | 006b03 |             | z_rshift                             
3806:001 | DONE ins | na 16 16 | 006b03 | 60          |                 rts                  
3807:000 | DONE wsp | na 16 16 |        |             |
3808:000 | DONE wsp | na 16 16 |        |             |
3809:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
3810:000 | DONE cmt | na 16 16 |        |             | ; S" "SQUOTE" ( "string" -- addr u ) X bytes / X cycles
3811:000 | DONE cmt | na 16 16 |        |             | ; Store address and length of string given, returning ( addr u ). ANSI core
3812:000 | DONE cmt | na 16 16 |        |             | ; claims this is compile-only, but the file set expands it to be interpreted, so
3813:000 | DONE cmt | na 16 16 |        |             | ; it is a state-sensitive word, which are evil. This can also be realized as
3814:000 | DONE cmt | na 16 16 |        |             | ; : S" [CHAR] " PARSE POSTPONE SLITERAL ; IMMEDIATE  but it is used so much we
3815:000 | DONE cmt | na 16 16 |        |             | ; want it in code
3816:000 | DONE lbl | na 16 16 | 006b04 |             | xt_squote                            
3817:000 | DONE cmt | na 16 16 |        |             |                 ; we use PARSE to find the end of the sting. If the string is
3818:000 | DONE cmt | na 16 16 |        |             |                 ; empty, we don't complain, following Gforth's behavior
3819:000 | DONE ins | na 16 16 | 006b04 | ca          |                 dex                  
3820:000 | DONE ins | na 16 16 | 006b05 | ca          |                 dex                  
3821:000 | DONE ins | na 16 16 | 006b06 | 94 00       |                 sty.dx 00            
3822:000 | DONE wsp | na 16 16 |        |             |
3823:000 | DONE ins | na 16 16 | 006b08 | a0 22 00    |                 ldy.# 0022           ASCII for " in hex
3824:000 | DONE ins | na 16 16 | 006b0b | 20 1c 6a    |                 jsr 006a1c           Returns ( addr u ) of string
3825:000 | DONE wsp | na 16 16 |        |             |
3826:000 | DONE cmt | na 16 16 |        |             |                 ; What happens now depends on the state. If we are compiling, we
3827:000 | DONE cmt | na 16 16 |        |             |                 ; include a subroutine jump to SLITERAL to save the string. If
3828:000 | DONE cmt | na 16 16 |        |             |                 ; we are interpreting, we're done
3829:000 | DONE ins | na 16 16 | 006b0e | a5 22       |                 lda.d 000222         
3830:000 | DONE ins | na 16 16 | 006b10 | d0 1a       |                 bne 006b2c           
3831:000 | DONE wsp | na 16 16 |        |             |
3832:000 | DONE cmt | na 16 16 |        |             | 		; We copy our string to someplace safe because it lives
3833:000 | DONE cmt | na 16 16 |        |             |                 ; dangerously if we leave it in the input buffer. This might
3834:000 | DONE cmt | na 16 16 |        |             |                 ; seem like a lot of effort for a few bytes, but MVN is so fast
3835:000 | DONE cmt | na 16 16 |        |             |                 ; - 7 cycles per byte - that it is worth it. See
3836:000 | DONE cmt | na 16 16 |        |             |                 ; http://forum.6502.org/viewtopic.php?f=2&t=1685&p=50975#p50975
3837:000 | DONE cmt | na 16 16 |        |             |                 ; and http://6502.org/tutorials/65c816opcodes.html#6.6
3838:000 | DONE ins | na 16 16 | 006b12 | 98          |                 tya                  A gets the number of bytes to move minus 1
3839:000 | DONE ins | na 16 16 | 006b13 | 3a          |                 dec.a                
3840:000 | DONE ins | na 16 16 | 006b14 | da          |                 phx                  save DSP
3841:000 | DONE ins | na 16 16 | 006b15 | 5a          |                 phy                  save TOS
3842:000 | DONE wsp | na 16 16 |        |             |
3843:000 | DONE ins | na 16 16 | 006b16 | b4 00       |                 ldy.dx 00            get source address
3844:000 | DONE ins | na 16 16 | 006b18 | bb          |                 tyx                  
3845:000 | DONE ins | na 16 16 | 006b19 | a4 28       |                 ldy.d 000228         get destination address
3846:000 | DONE wsp | na 16 16 |        |             |
3847:000 | DONE ins | na 16 16 | 006b1b | 54 00 00    |                 mvn 00               do the actual work
3847:001 | DONE ctl | na 16 16 |        |             |            
3848:000 | DONE wsp | na 16 16 |        |             |
3849:000 | DONE ins | na 16 16 | 006b1e | 7a          |                 ply                  get length back
3850:000 | DONE ins | na 16 16 | 006b1f | fa          |                 plx                  get DSP back
3851:000 | DONE wsp | na 16 16 |        |             |
3852:000 | DONE cmt | na 16 16 |        |             |                 ; change address
3853:000 | DONE ins | na 16 16 | 006b20 | a5 28       |                 lda.d 000228         
3854:000 | DONE ins | na 16 16 | 006b22 | 95 00       |                 sta.dx 00            
3855:000 | DONE wsp | na 16 16 |        |             |
3856:000 | DONE cmt | na 16 16 |        |             |                 ; update CP
3857:000 | DONE ins | na 16 16 | 006b24 | 98          |                 tya                  
3858:000 | DONE ins | na 16 16 | 006b25 | 18          |                 clc                  
3859:000 | DONE ins | na 16 16 | 006b26 | 65 28       |                 adc.d 000228         
3860:000 | DONE ins | na 16 16 | 006b28 | 85 28       |                 sta.d 000228         
3861:000 | DONE wsp | na 16 16 |        |             |
3862:000 | DONE ins | na 16 16 | 006b2a | 80 03       |                 bra 006b2f           
3863:000 | DONE wsp | na 16 16 |        |             |
3864:000 | DONE lbl | na 16 16 | 006b2c |             | squote_compile                       
3865:000 | DONE cmt | na 16 16 |        |             |                 ; We're compiling, so we need SLITERAL. We use it's RTS while
3866:000 | DONE cmt | na 16 16 |        |             |                 ; we're at it
3867:000 | DONE ins | na 16 16 | 006b2c | 4c 4e 6b    |                 jmp 006b4e           JSR/RTS
3868:000 | DONE wsp | na 16 16 |        |             |
3869:000 | DONE lbl | na 16 16 | 006b2f |             | z_squote                             
3869:001 | DONE ins | na 16 16 | 006b2f | 60          |                 rts                  
3870:000 | DONE wsp | na 16 16 |        |             |
3871:000 | DONE wsp | na 16 16 |        |             |
3872:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
3873:000 | DONE cmt | na 16 16 |        |             | ; S>D ( n -- d ) 15 bytes / X cycles
3874:000 | DONE cmt | na 16 16 |        |             | ; Convert a single cell number to double cells, conserving the sign
3875:000 | DONE lbl | na 16 16 | 006b30 |             | xt_stod                              
3876:000 | DONE ins | na 16 16 | 006b30 | ca          |                 dex                  make room on stack
3877:000 | DONE ins | na 16 16 | 006b31 | ca          |                 dex                  
3878:000 | DONE ins | na 16 16 | 006b32 | 94 00       |                 sty.dx 00            
3879:000 | DONE wsp | na 16 16 |        |             |
3880:000 | DONE ins | na 16 16 | 006b34 | 98          |                 tya                  force flag check
3881:000 | DONE ins | na 16 16 | 006b35 | 10 05       |                 bpl 006b3c           
3882:000 | DONE wsp | na 16 16 |        |             |
3883:000 | DONE cmt | na 16 16 |        |             |                 ; negative number, extend sign
3884:000 | DONE ins | na 16 16 | 006b37 | a0 ff ff    |                 ldy.# 0ffff          
3885:000 | DONE ins | na 16 16 | 006b3a | 80 03       |                 bra 006b3f           
3886:000 | DONE wsp | na 16 16 |        |             |
3887:000 | DONE lbl | na 16 16 | 006b3c |             | stod_pos                             
3888:000 | DONE cmt | na 16 16 |        |             |                 ; positive number
3889:000 | DONE ins | na 16 16 | 006b3c | a0 00 00    |                 ldy.# 0000           fall through
3890:000 | DONE wsp | na 16 16 |        |             |
3891:000 | DONE lbl | na 16 16 | 006b3f |             | z_stod                               
3891:001 | DONE ins | na 16 16 | 006b3f | 60          |                 rts                  
3892:000 | DONE wsp | na 16 16 |        |             |
3893:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
3894:000 | DONE cmt | na 16 16 |        |             | ; SIGN ( n -- ) 13 bytes / X cycles
3895:000 | DONE cmt | na 16 16 |        |             | ; If TOS is negative, add a minus sign to the pictured output. Code based on
3896:000 | DONE cmt | na 16 16 |        |             | ; https://github.com/philburk/pforth/blob/master/fth/system.fth
3897:000 | DONE cmt | na 16 16 |        |             | ; Origin Forth code is  0< IF [CHAR] - HOLD THEN
3898:000 | DONE lbl | na 16 16 | 006b40 |             | xt_sign                              
3899:000 | DONE dir | na 16 16 |        |             |         .!a16                        
3900:000 | DONE cmt | na 16 16 |        |             |                 ; See if number is negative
3901:000 | DONE ins | na 16 16 | 006b40 | 98          |                 tya                  force flag check
3902:000 | DONE ins | na 16 16 | 006b41 | 10 06       |                 bpl 006b49           
3903:000 | DONE wsp | na 16 16 |        |             |
3904:000 | DONE cmt | na 16 16 |        |             |                 ; We're negative, overwrite number TOS
3905:000 | DONE ins | na 16 16 | 006b43 | a0 2d 00    |                 ldy.# 002d           ASCII for '-'
3906:000 | DONE wsp | na 16 16 |        |             |
3907:000 | DONE ins | na 16 16 | 006b46 | 4c 42 68    |                 jmp 006842           JSR/RTS, does not fall through
3908:000 | DONE wsp | na 16 16 |        |             |
3909:000 | DONE lbl | na 16 16 | 006b49 |             | sign_plus                            
3910:000 | DONE ins | na 16 16 | 006b49 | b4 00       |                 ldy.dx 00            get rid of number and leave
3911:000 | DONE ins | na 16 16 | 006b4b | e8          |                 inx                  
3912:000 | DONE ins | na 16 16 | 006b4c | e8          |                 inx                  
3913:000 | DONE wsp | na 16 16 |        |             |
3914:000 | DONE lbl | na 16 16 | 006b4d |             | z_sign                               
3914:001 | DONE ins | na 16 16 | 006b4d | 60          |                 rts                  
3915:000 | DONE wsp | na 16 16 |        |             |
3916:000 | DONE wsp | na 16 16 |        |             |
3917:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
3918:000 | DONE cmt | na 16 16 |        |             | ; SLITERAL ( addr u -- ) ( -- addr u ) X bytes / X cycles
3919:000 | DONE cmt | na 16 16 |        |             | ; At compile time, store string, at runtime, return address and length of string
3920:000 | DONE cmt | na 16 16 |        |             | ; on the Data Stack. Used for S" among other things. This routine uses tmp1,
3921:000 | DONE cmt | na 16 16 |        |             | ; tmp2
3922:000 | DONE lbl | na 16 16 | 006b4e |             | xt_sliteral                          
3923:000 | DONE dir | na 16 16 |        |             |         .!a16                        
3924:000 | DONE cmt | na 16 16 |        |             |                 ; We can't assume that ( addr u ) of the current string is in
3925:000 | DONE cmt | na 16 16 |        |             |                 ; a stable area, so we first have to move them to safety. Since
3926:000 | DONE cmt | na 16 16 |        |             |                 ; CP points to where the interpreter expects to be able to
3927:000 | DONE cmt | na 16 16 |        |             |                 ; continue in the code, we have to jump over the string. We use
3928:000 | DONE cmt | na 16 16 |        |             |                 ; JMP instead of BRA so we can use longer strings
3929:000 | DONE ins | na 16 16 | 006b4e | b5 00       |                 lda.dx 00            Address of string is NOS
3930:000 | DONE ins | na 16 16 | 006b50 | 85 0a       |                 sta.d 00020a         
3931:000 | DONE ins | na 16 16 | 006b52 | 84 0c       |                 sty.d 00020c         keep copy of string length
3932:000 | DONE wsp | na 16 16 |        |             |
3933:000 | DONE ins | na 16 16 | 006b54 | e2 20       |                 sep 20               
3933:001 | DONE ctl | na  8 16 |        |             |         .!a8
3934:000 | DONE ins | na  8 16 | 006b56 | a9 4c       |                 lda.# 04c            opcode for JMP
3935:000 | DONE ins | na  8 16 | 006b58 | 92 28       |                 sta.di 000228        STA (CP)
3936:000 | DONE ins | na  8 16 | 006b5a | c2 20       |                 rep 20               
3936:001 | DONE ctl | na 16 16 |        |             |         .!a16
3937:000 | DONE ins | na 16 16 | 006b5c | e6 28       |                 inc.d 000228         
3938:000 | DONE wsp | na 16 16 |        |             |
3939:000 | DONE cmt | na 16 16 |        |             |                 ; Our jump target is CP + 2 (for the length of the jump
3940:000 | DONE cmt | na 16 16 |        |             |                 ; instruction itself ) + the length of the string
3941:000 | DONE ins | na 16 16 | 006b5e | a5 0c       |                 lda.d 00020c         string length
3942:000 | DONE ins | na 16 16 | 006b60 | 1a          |                 inc.a                
3943:000 | DONE ins | na 16 16 | 006b61 | 1a          |                 inc.a                
3944:000 | DONE wsp | na 16 16 |        |             |
3945:000 | DONE ins | na 16 16 | 006b62 | 18          |                 clc                  
3946:000 | DONE ins | na 16 16 | 006b63 | 65 28       |                 adc.d 000228         current address
3947:000 | DONE ins | na 16 16 | 006b65 | 92 28       |                 sta.di 000228        store jump target
3948:000 | DONE wsp | na 16 16 |        |             |
3949:000 | DONE cmt | na 16 16 |        |             |                 ; update CP to move past JMP instruction
3950:000 | DONE ins | na 16 16 | 006b67 | e6 28       |                 inc.d 000228         
3951:000 | DONE ins | na 16 16 | 006b69 | e6 28       |                 inc.d 000228         
3952:000 | DONE wsp | na 16 16 |        |             |
3953:000 | DONE cmt | na 16 16 |        |             |                 ; now we can safely copy the code
3954:000 | DONE ins | na 16 16 | 006b6b | 88          |                 dey                  last offset is one less than length
3955:000 | DONE ins | na 16 16 | 006b6c | e2 20       |                 sep 20               
3955:001 | DONE ctl | na  8 16 |        |             |         .!a8
3956:000 | DONE lbl | na  8 16 | 006b6e |             | sl_loop                              
3957:000 | DONE ins | na  8 16 | 006b6e | b1 0a       |                 lda.diy 00020a       LDA (TMP1),Y
3958:000 | DONE ins | na  8 16 | 006b70 | 91 28       |                 sta.diy 000228       STA (CP),Y
3959:000 | DONE ins | na  8 16 | 006b72 | 88          |                 dey                  
3960:000 | DONE ins | na  8 16 | 006b73 | 10 f9       |                 bpl 006b6e           
3961:000 | DONE wsp | na  8 16 |        |             |
3962:000 | DONE ins | na  8 16 | 006b75 | c2 20       |                 rep 20               
3962:001 | DONE ctl | na 16 16 |        |             |         .!a16
3963:000 | DONE cmt | na 16 16 |        |             |                 ; keep old CP as new address of string
3964:000 | DONE ins | na 16 16 | 006b77 | a5 28       |                 lda.d 000228         
3965:000 | DONE ins | na 16 16 | 006b79 | 85 0a       |                 sta.d 00020a         overwrites original address
3966:000 | DONE wsp | na 16 16 |        |             |
3967:000 | DONE cmt | na 16 16 |        |             |                 ; update CP
3968:000 | DONE ins | na 16 16 | 006b7b | 18          |                 clc                  
3969:000 | DONE ins | na 16 16 | 006b7c | 65 0c       |                 adc.d 00020c         length of string
3970:000 | DONE ins | na 16 16 | 006b7e | 85 28       |                 sta.d 000228         
3971:000 | DONE wsp | na 16 16 |        |             |
3972:000 | DONE cmt | na 16 16 |        |             |                 ; Compile a subroutine jump to the runtime of SLITERAL that
3973:000 | DONE cmt | na 16 16 |        |             |                 ; pushes the new ( addr u ) pair to the Data Stack. When we're
3974:000 | DONE cmt | na 16 16 |        |             |                 ; done, the code will look like this:
3975:000 | DONE cmt | na 16 16 |        |             |                 ;
3976:000 | DONE cmt | na 16 16 |        |             |                 ; xt -->    jmp a
3977:000 | DONE cmt | na 16 16 |        |             |                 ;           <string data bytes>
3978:000 | DONE cmt | na 16 16 |        |             |                 ;  a -->    jsr sliteral_rt
3979:000 | DONE cmt | na 16 16 |        |             |                 ;           <string address>
3980:000 | DONE cmt | na 16 16 |        |             |                 ;           <string length>
3981:000 | DONE cmt | na 16 16 |        |             |                 ; rts -->
3982:000 | DONE cmt | na 16 16 |        |             |                 ;
3983:000 | DONE cmt | na 16 16 |        |             |                 ; This means we'll have to adjust the return address for two
3984:000 | DONE cmt | na 16 16 |        |             |                 ; cells, not just one
3985:000 | DONE ins | na 16 16 | 006b80 | f4 99 6b    |                 phe.# 006b99         
3986:000 | DONE ins | na 16 16 | 006b83 | 20 dc 75    |                 jsr 0075dc           
3987:000 | DONE wsp | na 16 16 |        |             |
3988:000 | DONE cmt | na 16 16 |        |             |                 ; We want to have the addr end up as NOS and the length as TOS,
3989:000 | DONE cmt | na 16 16 |        |             |                 ; so we store the address first
3990:000 | DONE ins | na 16 16 | 006b86 | a5 0a       |                 lda.d 00020a         new address of string
3991:000 | DONE ins | na 16 16 | 006b88 | 48          |                 pha                  
3992:000 | DONE ins | na 16 16 | 006b89 | 20 d7 75    |                 jsr 0075d7           
3993:000 | DONE wsp | na 16 16 |        |             |
3994:000 | DONE ins | na 16 16 | 006b8c | a5 0c       |                 lda.d 00020c         
3995:000 | DONE ins | na 16 16 | 006b8e | 48          |                 pha                  
3996:000 | DONE ins | na 16 16 | 006b8f | 20 d7 75    |                 jsr 0075d7           
3997:000 | DONE wsp | na 16 16 |        |             |
3998:000 | DONE cmt | na 16 16 |        |             |                 ; all done, clean up and leave
3999:000 | DONE ins | na 16 16 | 006b92 | b4 02       |                 ldy.dx 02            2DROP
4000:000 | DONE ins | na 16 16 | 006b94 | e8          |                 inx                  
4001:000 | DONE ins | na 16 16 | 006b95 | e8          |                 inx                  
4002:000 | DONE ins | na 16 16 | 006b96 | e8          |                 inx                  
4003:000 | DONE ins | na 16 16 | 006b97 | e8          |                 inx                  
4004:000 | DONE wsp | na 16 16 |        |             |
4005:000 | DONE lbl | na 16 16 | 006b98 |             | z_sliteral                           
4005:001 | DONE ins | na 16 16 | 006b98 | 60          |                 rts                  
4006:000 | DONE wsp | na 16 16 |        |             |
4007:000 | DONE lbl | na 16 16 | 006b99 |             | sliteral_rt                          
4008:000 | DONE cmt | na 16 16 |        |             |                 ; Run time behaviour of SLITERAL: Push ( addr u ) of string to
4009:000 | DONE cmt | na 16 16 |        |             |                 ; the Data Stack. We arrive here with the return address as the
4010:000 | DONE cmt | na 16 16 |        |             |                 ; top of Return Stack, which points to the address of the string
4011:000 | DONE wsp | na 16 16 |        |             |
4012:000 | DONE cmt | na 16 16 |        |             |                 ; Make room on stack, which also frees Y for other use
4013:000 | DONE ins | na 16 16 | 006b99 | ca          |                 dex                  
4014:000 | DONE ins | na 16 16 | 006b9a | ca          |                 dex                  
4015:000 | DONE ins | na 16 16 | 006b9b | ca          |                 dex                  
4016:000 | DONE ins | na 16 16 | 006b9c | ca          |                 dex                  
4017:000 | DONE ins | na 16 16 | 006b9d | 94 02       |                 sty.dx 02            
4018:000 | DONE wsp | na 16 16 |        |             |
4019:000 | DONE cmt | na 16 16 |        |             |                 ; Get the address of the string address off the stack and
4020:000 | DONE cmt | na 16 16 |        |             |                 ; increase by one because of the RTS mechanics
4021:000 | DONE ins | na 16 16 | 006b9f | 7a          |                 ply                  
4022:000 | DONE ins | na 16 16 | 006ba0 | c8          |                 iny                  
4023:000 | DONE wsp | na 16 16 |        |             |
4024:000 | DONE ins | na 16 16 | 006ba1 | b9 00 00    |                 lda.y 0000           LDA $0000,Y
4025:000 | DONE ins | na 16 16 | 006ba4 | 95 00       |                 sta.dx 00            save string address as NOS
4026:000 | DONE ins | na 16 16 | 006ba6 | c8          |                 iny                  
4027:000 | DONE ins | na 16 16 | 006ba7 | c8          |                 iny                  
4028:000 | DONE ins | na 16 16 | 006ba8 | b9 00 00    |                 lda.y 0000           get length of string, will be TOS ...
4029:000 | DONE wsp | na 16 16 |        |             |
4030:000 | DONE ins | na 16 16 | 006bab | c8          |                 iny                  ... first, though, repair return jump
4031:000 | DONE ins | na 16 16 | 006bac | 5a          |                 phy                  
4032:000 | DONE wsp | na 16 16 |        |             |
4033:000 | DONE ins | na 16 16 | 006bad | a8          |                 tay                  TOS is now length of string
4034:000 | DONE wsp | na 16 16 |        |             |
4035:000 | DONE ins | na 16 16 | 006bae | 60          |                 rts                  
4036:000 | DONE wsp | na 16 16 |        |             |
4037:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
4038:000 | DONE cmt | na 16 16 |        |             | ; SM/REM ( d n1 -- n2 n3) X bytes / X cycles
4039:000 | DONE cmt | na 16 16 |        |             | ; Symmetic signed division. Compare FM/MOD. Code from Gforth, see
4040:000 | DONE cmt | na 16 16 |        |             | ; https://groups.google.com/forum/#!topic/comp.lang.forth/_bx4dJFb9R0
4041:000 | DONE cmt | na 16 16 |        |             | ; and http://git.savannah.gnu.org/cgit/gforth.git/tree/prim ; see
4042:000 | DONE cmt | na 16 16 |        |             | ; http://www.figuk.plus.com/build/arith.htm for variants. Forth is
4043:000 | DONE cmt | na 16 16 |        |             | ; SM/REM OVER >R DUP >R ABS -ROT DABS ROT UM/MOD R>
4044:000 | DONE cmt | na 16 16 |        |             | ; R@ XOR 0< IF NEGATE THEN R> 0< IF SWAP NEGATE SWAP THEN ;
4045:000 | DONE cmt | na 16 16 |        |             | ; TODO optimize in assembler
4046:000 | DONE lbl | na 16 16 | 006baf |             | xt_smrem                             
4047:000 | DONE dir | na 16 16 |        |             |         .!a16                        
4048:000 | DONE ins | na 16 16 | 006baf | 20 ca 69    |                 jsr 0069ca           
4049:000 | DONE wsp | na 16 16 |        |             |
4050:000 | DONE ins | na 16 16 | 006bb2 | 5a          |                 phy                  >R
4051:000 | DONE ins | na 16 16 | 006bb3 | b4 00       |                 ldy.dx 00            
4052:000 | DONE ins | na 16 16 | 006bb5 | e8          |                 inx                  
4053:000 | DONE ins | na 16 16 | 006bb6 | e8          |                 inx                  
4054:000 | DONE wsp | na 16 16 |        |             |
4055:000 | DONE ins | na 16 16 | 006bb7 | ca          |                 dex                  DUP
4056:000 | DONE ins | na 16 16 | 006bb8 | ca          |                 dex                  
4057:000 | DONE ins | na 16 16 | 006bb9 | 94 00       |                 sty.dx 00            
4058:000 | DONE wsp | na 16 16 |        |             |
4059:000 | DONE ins | na 16 16 | 006bbb | 5a          |                 phy                  >R
4060:000 | DONE ins | na 16 16 | 006bbc | b4 00       |                 ldy.dx 00            
4061:000 | DONE ins | na 16 16 | 006bbe | e8          |                 inx                  
4062:000 | DONE ins | na 16 16 | 006bbf | e8          |                 inx                  
4063:000 | DONE wsp | na 16 16 |        |             |
4064:000 | DONE ins | na 16 16 | 006bc0 | 20 14 64    |                 jsr 006414           ABS
4065:000 | DONE ins | na 16 16 | 006bc3 | 20 f1 62    |                 jsr 0062f1           -ROT
4066:000 | DONE ins | na 16 16 | 006bc6 | 20 98 66    |                 jsr 006698           DABS
4067:000 | DONE ins | na 16 16 | 006bc9 | 20 e7 6a    |                 jsr 006ae7           ROT
4068:000 | DONE ins | na 16 16 | 006bcc | 20 fd 6c    |                 jsr 006cfd           UM/MOD
4069:000 | DONE wsp | na 16 16 |        |             |
4070:000 | DONE ins | na 16 16 | 006bcf | ca          |                 dex                  R>
4071:000 | DONE ins | na 16 16 | 006bd0 | ca          |                 dex                  
4072:000 | DONE ins | na 16 16 | 006bd1 | 94 00       |                 sty.dx 00            
4073:000 | DONE ins | na 16 16 | 006bd3 | 7a          |                 ply                  
4074:000 | DONE wsp | na 16 16 |        |             |
4075:000 | DONE ins | na 16 16 | 006bd4 | ca          |                 dex                  R@
4076:000 | DONE ins | na 16 16 | 006bd5 | ca          |                 dex                  
4077:000 | DONE ins | na 16 16 | 006bd6 | 94 00       |                 sty.dx 00            
4078:000 | DONE ins | na 16 16 | 006bd8 | 7a          |                 ply                  
4079:000 | DONE ins | na 16 16 | 006bd9 | 5a          |                 phy                  
4080:000 | DONE wsp | na 16 16 |        |             |
4081:000 | DONE ins | na 16 16 | 006bda | 20 be 6d    |                 jsr 006dbe           XOR
4082:000 | DONE wsp | na 16 16 |        |             |
4083:000 | DONE ins | na 16 16 | 006bdd | 98          |                 tya                  0< IF
4084:000 | DONE ins | na 16 16 | 006bde | 10 09       |                 bpl 006be9           
4085:000 | DONE wsp | na 16 16 |        |             |
4086:000 | DONE ins | na 16 16 | 006be0 | b4 00       |                 ldy.dx 00            from IF
4087:000 | DONE ins | na 16 16 | 006be2 | e8          |                 inx                  
4088:000 | DONE ins | na 16 16 | 006be3 | e8          |                 inx                  
4089:000 | DONE wsp | na 16 16 |        |             |
4090:000 | DONE ins | na 16 16 | 006be4 | 20 35 69    |                 jsr 006935           NEGATE
4091:000 | DONE ins | na 16 16 | 006be7 | 80 04       |                 bra 006bed           
4092:000 | DONE lbl | na 16 16 | 006be9 |             | smrem_1                              
4093:000 | DONE ins | na 16 16 | 006be9 | b4 00       |                 ldy.dx 00            from IF
4094:000 | DONE ins | na 16 16 | 006beb | e8          |                 inx                  
4095:000 | DONE ins | na 16 16 | 006bec | e8          |                 inx                  
4096:000 | DONE wsp | na 16 16 |        |             |
4097:000 | DONE lbl | na 16 16 | 006bed |             | smrem_1_1                            
4098:000 | DONE ins | na 16 16 | 006bed | ca          |                 dex                  R>
4099:000 | DONE ins | na 16 16 | 006bee | ca          |                 dex                  
4100:000 | DONE ins | na 16 16 | 006bef | 94 00       |                 sty.dx 00            
4101:000 | DONE ins | na 16 16 | 006bf1 | 7a          |                 ply                  
4102:000 | DONE wsp | na 16 16 |        |             |
4103:000 | DONE ins | na 16 16 | 006bf2 | 98          |                 tya                  0< IF
4104:000 | DONE ins | na 16 16 | 006bf3 | 10 0f       |                 bpl 006c04           
4105:000 | DONE wsp | na 16 16 |        |             |
4106:000 | DONE ins | na 16 16 | 006bf5 | b4 00       |                 ldy.dx 00            from IF
4107:000 | DONE ins | na 16 16 | 006bf7 | e8          |                 inx                  
4108:000 | DONE ins | na 16 16 | 006bf8 | e8          |                 inx                  
4109:000 | DONE wsp | na 16 16 |        |             |
4110:000 | DONE ins | na 16 16 | 006bf9 | 20 41 6c    |                 jsr 006c41           
4111:000 | DONE ins | na 16 16 | 006bfc | 20 35 69    |                 jsr 006935           
4112:000 | DONE ins | na 16 16 | 006bff | 20 41 6c    |                 jsr 006c41           
4113:000 | DONE ins | na 16 16 | 006c02 | 80 04       |                 bra 006c08           
4114:000 | DONE wsp | na 16 16 |        |             |
4115:000 | DONE lbl | na 16 16 | 006c04 |             | smrem_2                              
4116:000 | DONE ins | na 16 16 | 006c04 | b4 00       |                 ldy.dx 00            
4117:000 | DONE ins | na 16 16 | 006c06 | e8          |                 inx                  
4118:000 | DONE ins | na 16 16 | 006c07 | e8          |                 inx                  
4119:000 | DONE wsp | na 16 16 |        |             |
4120:000 | DONE wsp | na 16 16 |        |             |
4121:000 | DONE lbl | na 16 16 | 006c08 |             | smrem_2_1                            
4122:000 | DONE wsp | na 16 16 |        |             |
4123:000 | DONE lbl | na 16 16 | 006c08 |             | z_smrem                              
4123:001 | DONE ins | na 16 16 | 006c08 | 60          |                 rts                  
4124:000 | DONE wsp | na 16 16 |        |             |
4125:000 | DONE wsp | na 16 16 |        |             |
4126:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
4127:000 | DONE cmt | na 16 16 |        |             | ; SOURCE ( -- addr u ) 12 bytes / X cycles
4128:000 | DONE cmt | na 16 16 |        |             | ; Return the address and size of current input buffer. Replaces TIB and #TIB in
4129:000 | DONE cmt | na 16 16 |        |             | ; ANSI Forth
4130:000 | DONE wsp | na 16 16 |        |             |
4131:000 | DONE lbl | na 16 16 | 006c09 |             | xt_source                            
4132:000 | DONE ins | na 16 16 | 006c09 | ca          |                 dex                  make room on Data Stack
4133:000 | DONE ins | na 16 16 | 006c0a | ca          |                 dex                  
4134:000 | DONE ins | na 16 16 | 006c0b | ca          |                 dex                  
4135:000 | DONE ins | na 16 16 | 006c0c | ca          |                 dex                  
4136:000 | DONE ins | na 16 16 | 006c0d | 94 02       |                 sty.dx 02            
4137:000 | DONE wsp | na 16 16 |        |             |
4138:000 | DONE ins | na 16 16 | 006c0f | a5 1a       |                 lda.d 00021a         address of current input buffer as NOS
4139:000 | DONE ins | na 16 16 | 006c11 | 95 00       |                 sta.dx 00            
4140:000 | DONE wsp | na 16 16 |        |             |
4141:000 | DONE ins | na 16 16 | 006c13 | a4 1c       |                 ldy.d 00021c         length of current input buffer as TOS
4142:000 | DONE wsp | na 16 16 |        |             |
4143:000 | DONE lbl | na 16 16 | 006c15 |             | z_source                             
4143:001 | DONE ins | na 16 16 | 006c15 | 60          |                 rts                  
4144:000 | DONE wsp | na 16 16 |        |             |
4145:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
4146:000 | DONE cmt | na 16 16 |        |             | ; SOURCE-ID ( -- n ) 6 bytes / 13 cycles
4147:000 | DONE cmt | na 16 16 |        |             | ; Identify the input source unless it is a block (s. Conklin & Rather p. 156).
4148:000 | DONE cmt | na 16 16 |        |             | ; Since we don't have blocks (yet), this will give the input source: 0 is
4149:000 | DONE cmt | na 16 16 |        |             | ; keyboard, -1 (0ffff) is character string, and a text file gives the fileid.
4150:000 | DONE lbl | na 16 16 | 006c16 |             | xt_source-id                         
4151:000 | DONE dir | na 16 16 |        |             |         .!xy16                       
4152:000 | DONE ins | na 16 16 | 006c16 | ca          |                 dex                  
4153:000 | DONE ins | na 16 16 | 006c17 | ca          |                 dex                  
4154:000 | DONE ins | na 16 16 | 006c18 | 94 00       |                 sty.dx 00            
4155:000 | DONE ins | na 16 16 | 006c1a | a4 18       |                 ldy.d 000218         
4156:000 | DONE wsp | na 16 16 |        |             |
4157:000 | DONE lbl | na 16 16 | 006c1c |             | z_source-id                          
4157:001 | DONE ins | na 16 16 | 006c1c | 60          |                 rts                  
4158:000 | DONE wsp | na 16 16 |        |             |
4159:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
4160:000 | DONE cmt | na 16 16 |        |             | ; SPACE ( -- ) X bytes / X cycles
4161:000 | DONE cmt | na 16 16 |        |             | ; Print one ASCII space character
4162:000 | DONE cmt | na 16 16 |        |             | ; TODO change to call EMIT
4163:000 | DONE lbl | na 16 16 | 006c1d |             | xt_space                             
4164:000 | DONE ins | na 16 16 | 006c1d | a9 20 00    |                 lda.# AscSP          
4165:000 | DONE ins | na 16 16 | 006c20 | 20 36 60    |                 jsr 006036           
4166:000 | DONE dir | na 16 16 |        |             |         .!a16                        
4167:000 | DONE wsp | na 16 16 |        |             |
4168:000 | DONE lbl | na 16 16 | 006c23 |             | z_space                              
4168:001 | DONE ins | na 16 16 | 006c23 | 60          |                 rts                  
4169:000 | DONE wsp | na 16 16 |        |             |
4170:000 | DONE wsp | na 16 16 |        |             |
4171:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
4172:000 | DONE cmt | na 16 16 |        |             | ; SPACES ( u -- ) 12 bytes / X cycles
4173:000 | DONE cmt | na 16 16 |        |             | ; Print u spaces. Calls SPACE, because this is probably interactive and humans
4174:000 | DONE cmt | na 16 16 |        |             | ; are slow enough we don't have to care about speed.
4175:000 | DONE lbl | na 16 16 | 006c24 |             | xt_spaces                            
4176:000 | DONE dir | na 16 16 |        |             |         .!a16                        
4177:000 | DONE dir | na 16 16 |        |             |         .!xy16                       
4178:000 | DONE lbl | na 16 16 | 006c24 |             | @                                    
4179:000 | DONE ins | na 16 16 | 006c24 | 88          |                 dey                  this also handles case u=0
4180:000 | DONE ins | na 16 16 | 006c25 | 30 05       |                 bmi 006c2c           
4181:000 | DONE wsp | na 16 16 |        |             |
4182:000 | DONE ins | na 16 16 | 006c27 | 20 1d 6c    |                 jsr 006c1d           
4183:000 | DONE ins | na 16 16 | 006c2a | 80 f8       |                 bra 006c24           
4184:000 | DONE wsp | na 16 16 |        |             |
4185:000 | DONE lbl | na 16 16 | 006c2c |             | spaces_done                          
4186:000 | DONE ins | na 16 16 | 006c2c | b4 00       |                 ldy.dx 00            DROP
4187:000 | DONE ins | na 16 16 | 006c2e | e8          |                 inx                  
4188:000 | DONE ins | na 16 16 | 006c2f | e8          |                 inx                  
4189:000 | DONE wsp | na 16 16 |        |             |
4190:000 | DONE lbl | na 16 16 | 006c30 |             | z_spaces                             
4190:001 | DONE ins | na 16 16 | 006c30 | 60          |                 rts                  
4191:000 | DONE wsp | na 16 16 |        |             |
4192:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
4193:000 | DONE cmt | na 16 16 |        |             | ; STAR ( n n -- n ) 16*16 -> 16  X bytes / X cycles
4194:000 | DONE cmt | na 16 16 |        |             | ; Multiply two signed 16 bit numbers, returning a 16 bit result. This is nothing
4195:000 | DONE cmt | na 16 16 |        |             | ; more than UM* DROP
4196:000 | DONE lbl | na 16 16 | 006c31 |             | xt_star                              
4197:000 | DONE ins | na 16 16 | 006c31 | 20 9e 6c    |                 jsr 006c9e           
4198:000 | DONE ins | na 16 16 | 006c34 | b4 00       |                 ldy.dx 00            DROP
4199:000 | DONE ins | na 16 16 | 006c36 | e8          |                 inx                  
4200:000 | DONE ins | na 16 16 | 006c37 | e8          |                 inx                  
4201:000 | DONE wsp | na 16 16 |        |             |
4202:000 | DONE lbl | na 16 16 | 006c38 |             | z_star                               
4202:001 | DONE ins | na 16 16 | 006c38 | 60          |                 rts                  
4203:000 | DONE wsp | na 16 16 |        |             |
4204:000 | DONE wsp | na 16 16 |        |             |
4205:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
4206:000 | DONE cmt | na 16 16 |        |             | ; STATE ( -- addr ) 7 bytes / 12 cycles
4207:000 | DONE cmt | na 16 16 |        |             | ; Return the address of a cell containing the compilation-state flag. STATE
4208:000 | DONE cmt | na 16 16 |        |             | ; is true when in compilation state, false otherwise. STATE should not be
4209:000 | DONE cmt | na 16 16 |        |             | ; changed directly by the user; see
4210:000 | DONE cmt | na 16 16 |        |             | ; http://forth.sourceforge.net/standard/dpans/dpans6.htm#6.1.2250
4211:000 | DONE lbl | na 16 16 | 006c39 |             | xt_state                             
4212:000 | DONE dir | na 16 16 |        |             |         .!xy16                       
4213:000 | DONE ins | na 16 16 | 006c39 | ca          |                 dex                  
4214:000 | DONE ins | na 16 16 | 006c3a | ca          |                 dex                  
4215:000 | DONE ins | na 16 16 | 006c3b | 94 00       |                 sty.dx 00            
4216:000 | DONE ins | na 16 16 | 006c3d | a0 22 02    |                 ldy.# 000222         
4217:000 | DONE wsp | na 16 16 |        |             |
4218:000 | DONE lbl | na 16 16 | 006c40 |             | z_state                              
4218:001 | DONE ins | na 16 16 | 006c40 | 60          |                 rts                  
4219:000 | DONE wsp | na 16 16 |        |             |
4220:000 | DONE wsp | na 16 16 |        |             |
4221:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
4222:000 | DONE cmt | na 16 16 |        |             | ; SWAP ( n m -- m n ) 5 bytes / 12 cycles
4223:000 | DONE cmt | na 16 16 |        |             | ; Exchange TOS with NOS. We don't check if there are enough elements on the Data
4224:000 | DONE cmt | na 16 16 |        |             | ; Stack; underflow errors will go undetected and return garbage.
4225:000 | DONE lbl | na 16 16 | 006c41 |             | xt_swap                              
4226:000 | DONE dir | na 16 16 |        |             |         .!a16                        
4227:000 | DONE dir | na 16 16 |        |             |         .!xy16                       
4228:000 | DONE ins | na 16 16 | 006c41 | b5 00       |                 lda.dx 00            
4229:000 | DONE ins | na 16 16 | 006c43 | 94 00       |                 sty.dx 00            
4230:000 | DONE ins | na 16 16 | 006c45 | a8          |                 tay                  
4231:000 | DONE wsp | na 16 16 |        |             |
4232:000 | DONE lbl | na 16 16 | 006c46 |             | z_swap                               
4232:001 | DONE ins | na 16 16 | 006c46 | 60          |                 rts                  
4233:000 | DONE wsp | na 16 16 |        |             |
4234:000 | DONE wsp | na 16 16 |        |             |
4235:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
4236:000 | DONE cmt | na 16 16 |        |             | ; TO ( n "name" -- ) X bytes / X cycles
4237:000 | DONE cmt | na 16 16 |        |             | ; Change the value of a VALUE. Note that in theory this would work with CONSTANT
4238:000 | DONE cmt | na 16 16 |        |             | ; as well, but we frown on this behavior. Note that while it is in violation of
4239:000 | DONE cmt | na 16 16 |        |             | ; ANS Forth, we can change the number in a VALUE with <number> ' <value> >BODY
4240:000 | DONE cmt | na 16 16 |        |             | ; +!  just as you can with Gforth
4241:000 | DONE cmt | na 16 16 |        |             | ; TODO unroll this to assembler
4242:000 | DONE lbl | na 16 16 | 006c47 |             | xt_to                                
4243:000 | DONE ins | na 16 16 | 006c47 | 20 db 63    |                 jsr 0063db           '
4244:000 | DONE ins | na 16 16 | 006c4a | 20 1d 61    |                 jsr 00611d           >BODY
4245:000 | DONE ins | na 16 16 | 006c4d | 20 b2 62    |                 jsr 0062b2           !
4246:000 | DONE wsp | na 16 16 |        |             |
4247:000 | DONE lbl | na 16 16 | 006c50 |             | z_to                                 
4247:001 | DONE ins | na 16 16 | 006c50 | 60          |                 rts                  
4248:000 | DONE wsp | na 16 16 |        |             |
4249:000 | DONE wsp | na 16 16 |        |             |
4250:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
4251:000 | DONE cmt | na 16 16 |        |             | ; TRUE ( -- f ) 7 bytes / 12 cycles
4252:000 | DONE cmt | na 16 16 |        |             | ; Pushes value $FFFF for Forth true on Data Stack
4253:000 | DONE lbl | na 16 16 | 006c51 |             | xt_true                              
4254:000 | DONE dir | na 16 16 |        |             |         .!a16                        
4255:000 | DONE dir | na 16 16 |        |             |         .!xy16                       
4256:000 | DONE ins | na 16 16 | 006c51 | ca          |                 dex                  
4257:000 | DONE ins | na 16 16 | 006c52 | ca          |                 dex                  
4258:000 | DONE ins | na 16 16 | 006c53 | 94 00       |                 sty.dx 00            
4259:000 | DONE ins | na 16 16 | 006c55 | a0 ff ff    |                 ldy.# 0ffff          
4260:000 | DONE wsp | na 16 16 |        |             |
4261:000 | DONE lbl | na 16 16 | 006c58 |             | z_true                               
4261:001 | DONE ins | na 16 16 | 006c58 | 60          |                 rts                  
4262:000 | DONE wsp | na 16 16 |        |             |
4263:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
4264:000 | DONE cmt | na 16 16 |        |             | ; TUCK ( n m -- m n m ) 8 bytes / 19 cycles
4265:000 | DONE cmt | na 16 16 |        |             | ; Insert TOS below NOS. We do not check if there are enough elements on the Data
4266:000 | DONE cmt | na 16 16 |        |             | ; Stack, underflow will go undetected and return garbage.
4267:000 | DONE lbl | na 16 16 | 006c59 |             | xt_tuck                              
4268:000 | DONE dir | na 16 16 |        |             |         .!a16                        
4269:000 | DONE dir | na 16 16 |        |             |         .!xy16                       
4270:000 | DONE ins | na 16 16 | 006c59 | ca          |                 dex                  
4271:000 | DONE ins | na 16 16 | 006c5a | ca          |                 dex                  
4272:000 | DONE ins | na 16 16 | 006c5b | b5 02       |                 lda.dx 2             
4273:000 | DONE ins | na 16 16 | 006c5d | 95 00       |                 sta.dx 0             
4274:000 | DONE ins | na 16 16 | 006c5f | 94 02       |                 sty.dx 2             
4275:000 | DONE wsp | na 16 16 |        |             |
4276:000 | DONE lbl | na 16 16 | 006c61 |             | z_tuck                               
4276:001 | DONE ins | na 16 16 | 006c61 | 60          |                 rts                  
4277:000 | DONE wsp | na 16 16 |        |             |
4278:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
4279:000 | DONE cmt | na 16 16 |        |             | ; TYPE ( addr u -- ) 23+ bytes / X cycles
4280:000 | DONE cmt | na 16 16 |        |             | ; Print character string if u is not 0. We restrict all calls to put_chr and
4281:000 | DONE cmt | na 16 16 |        |             | ; get_chr to make porting easier.  We call put_chr here directly instead of
4282:000 | DONE cmt | na 16 16 |        |             | ; going through EMIT because EMIT will later have a PAUSE statement for
4283:000 | DONE cmt | na 16 16 |        |             | ; multitasking and we probably don't want to PAUSE after every character.
4284:000 | DONE cmt | na 16 16 |        |             | ; However, we'll make a final decision about that when multitasking is up and
4285:000 | DONE cmt | na 16 16 |        |             | ; running.
4286:000 | DONE lbl | na 16 16 | 006c62 |             | xt_type                              
4287:000 | DONE dir | na 16 16 |        |             |         .!a16                        
4288:000 | DONE dir | na 16 16 |        |             |         .!xy16                       
4289:000 | DONE cmt | na 16 16 |        |             |                 ; just leave if u is zero (empty string)
4290:000 | DONE ins | na 16 16 | 006c62 | 98          |                 tya                  force flag check of TOS
4291:000 | DONE ins | na 16 16 | 006c63 | f0 17       |                 beq 006c7c           
4292:000 | DONE wsp | na 16 16 |        |             |
4293:000 | DONE ins | na 16 16 | 006c65 | b5 00       |                 lda.dx 00            get address from NOS
4294:000 | DONE ins | na 16 16 | 006c67 | 85 0a       |                 sta.d 00020a         
4295:000 | DONE ins | na 16 16 | 006c69 | 84 0c       |                 sty.d 00020c         number of chars is TOS
4296:000 | DONE ins | na 16 16 | 006c6b | a0 00 00    |                 ldy.# 0000           
4297:000 | DONE ins | na 16 16 | 006c6e | e2 20       |                 sep 20               
4297:001 | DONE ctl | na  8 16 |        |             |         .!a8
4298:000 | DONE lbl | na  8 16 | 006c70 |             | type_loop                            
4299:000 | DONE ins | na  8 16 | 006c70 | b1 0a       |                 lda.diy 00020a       LDA (TMP1),Y
4300:000 | DONE ins | na  8 16 | 006c72 | 20 36 60    |                 jsr 006036           
4301:000 | DONE ins | na  8 16 | 006c75 | c8          |                 iny                  
4302:000 | DONE ins | na  8 16 | 006c76 | c4 0c       |                 cpy.d 00020c         
4303:000 | DONE ins | na  8 16 | 006c78 | d0 f6       |                 bne 006c70           
4304:000 | DONE wsp | na  8 16 |        |             |
4305:000 | DONE ins | na  8 16 | 006c7a | c2 20       |                 rep 20               
4305:001 | DONE ctl | na 16 16 |        |             |         .!a16
4306:000 | DONE lbl | na 16 16 | 006c7c |             | type_done                            
4307:000 | DONE cmt | na 16 16 |        |             |                 ; clear stack
4308:000 | DONE ins | na 16 16 | 006c7c | b4 02       |                 ldy.dx 02            
4309:000 | DONE ins | na 16 16 | 006c7e | e8          |                 inx                  
4310:000 | DONE ins | na 16 16 | 006c7f | e8          |                 inx                  
4311:000 | DONE ins | na 16 16 | 006c80 | e8          |                 inx                  
4312:000 | DONE ins | na 16 16 | 006c81 | e8          |                 inx                  
4313:000 | DONE wsp | na 16 16 |        |             |
4314:000 | DONE cmt | na 16 16 |        |             |                 ; TODO LATER add PAUSE here for multitasking
4315:000 | DONE wsp | na 16 16 |        |             |
4316:000 | DONE lbl | na 16 16 | 006c82 |             | z_type                               
4316:001 | DONE ins | na 16 16 | 006c82 | 60          |                 rts                  
4317:000 | DONE wsp | na 16 16 |        |             |
4318:000 | DONE wsp | na 16 16 |        |             |
4319:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
4320:000 | DONE cmt | na 16 16 |        |             | ; UDMOD ( ud u -- u ud ) 32/16 --> 32  X bytes / X cycles
4321:000 | DONE cmt | na 16 16 |        |             | ; Devide double-cell number by single-cell number, producing a double-cell
4322:000 | DONE cmt | na 16 16 |        |             | ; result and a single-cell remainder. Based on
4323:000 | DONE cmt | na 16 16 |        |             | ; Gforth  : UD/MOD  >R 0 R@ UM/MOD R> SWAP >R UM/MOD R> ;
4324:000 | DONE cmt | na 16 16 |        |             | ; pForth  : UD/MOD  >R 0 R@ UM/MOD ROT ROT R> UM/MOD ROT ;
4325:000 | DONE cmt | na 16 16 |        |             | ; This doesn't seem to be used anywhere else but for # (HASH) in coverting
4326:000 | DONE cmt | na 16 16 |        |             | ; pictured numerical output, though pForth claims it uses UM/MOD for that
4327:000 | DONE cmt | na 16 16 |        |             | ; At some point, we need to get back to UM/MOD because it's optimized
4328:000 | DONE lbl | na 16 16 | 006c83 |             | xt_udmod                             
4329:000 | DONE ins | na 16 16 | 006c83 | 20 86 61    |                 jsr 006186           
4330:000 | DONE ins | na 16 16 | 006c86 | 20 1d 63    |                 jsr 00631d           
4331:000 | DONE ins | na 16 16 | 006c89 | 20 a3 6a    |                 jsr 006aa3           
4332:000 | DONE ins | na 16 16 | 006c8c | 20 fd 6c    |                 jsr 006cfd           
4333:000 | DONE ins | na 16 16 | 006c8f | 20 e7 6a    |                 jsr 006ae7           
4334:000 | DONE ins | na 16 16 | 006c92 | 20 e7 6a    |                 jsr 006ae7           
4335:000 | DONE ins | na 16 16 | 006c95 | 20 ac 6a    |                 jsr 006aac           
4336:000 | DONE ins | na 16 16 | 006c98 | 20 fd 6c    |                 jsr 006cfd           
4337:000 | DONE ins | na 16 16 | 006c9b | 4c e7 6a    |                 jmp 006ae7           JSR/RTS
4338:000 | DONE lbl | na 16 16 | 006c9e |             | z_udmod                              
4339:000 | DONE wsp | na 16 16 |        |             |
4340:000 | DONE wsp | na 16 16 |        |             |
4341:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
4342:000 | DONE cmt | na 16 16 |        |             | ; UM* "UMSTAR" ( u u -- ud ) 16*16 -> 32  X bytes / X cycles
4343:000 | DONE cmt | na 16 16 |        |             | ; Multiply two unsigned 16 bit numbers, producing a 32 bit result.This is based
4344:000 | DONE cmt | na 16 16 |        |             | ; on modified FIG Forth code by Dr. Jefyll, see
4345:000 | DONE cmt | na 16 16 |        |             | ; http://forum.6502.org/viewtopic.php?f=9&t=689 for a detailed discussion. We
4346:000 | DONE cmt | na 16 16 |        |             | ; use the system scratch pad (SYSPAD) for temp storage (N in the original code)
4347:000 | DONE cmt | na 16 16 |        |             | ; FIG Forth is in the public domain. Note old Forth versions such as FIG Forth
4348:000 | DONE cmt | na 16 16 |        |             | ; call this "U*"
4349:000 | DONE wsp | na 16 16 |        |             |
4350:000 | DONE cmt | na 16 16 |        |             | ; This is currently a brute-force loop based on the 8-bit variant in "6502
4351:000 | DONE cmt | na 16 16 |        |             | ; Assembly Language Programming" by Leventhal. Once everything is working,
4352:000 | DONE cmt | na 16 16 |        |             | ; consider switching to a table-supported version based on
4353:000 | DONE cmt | na 16 16 |        |             | ; http://codebase64.org/doku.php?id=base:seriously_fast_multiplication
4354:000 | DONE cmt | na 16 16 |        |             | ; http://codebase64.org/doku.php?id=magazines:chacking16#d_graphics_for_the_masseslib3d_and_cool_world
4355:000 | DONE cmt | na 16 16 |        |             | ; http://forum.6502.org/viewtopic.php?p=205#p205
4356:000 | DONE cmt | na 16 16 |        |             | ; http://forum.6502.org/viewtopic.php?f=9&t=689 We use tmp1, tmp2, tmp3 for
4357:000 | DONE cmt | na 16 16 |        |             | ; this, with the assumption that tmp3 immediately follows tmp2
4358:000 | DONE lbl | na 16 16 | 006c9e |             | xt_umstar                            
4359:000 | DONE dir | na 16 16 |        |             |         .!a16                        
4360:000 | DONE cmt | na 16 16 |        |             |                 ; SPECIAL CASE 1: multiplication by zero
4361:000 | DONE ins | na 16 16 | 006c9e | 98          |                 tya                  
4362:000 | DONE ins | na 16 16 | 006c9f | f0 3d       |                 beq 006cde           
4363:000 | DONE ins | na 16 16 | 006ca1 | b5 00       |                 lda.dx 00            
4364:000 | DONE ins | na 16 16 | 006ca3 | f0 39       |                 beq 006cde           
4365:000 | DONE wsp | na 16 16 |        |             |
4366:000 | DONE cmt | na 16 16 |        |             |                 ; SPECIAL CASE 2: multiplication by one
4367:000 | DONE cmt | na 16 16 |        |             |                 ; This is a different routine than 2* because that instruction
4368:000 | DONE cmt | na 16 16 |        |             |                 ; stays inside one cell, whereas UM* produces a Double Cell
4369:000 | DONE cmt | na 16 16 |        |             |                 ; answer
4370:000 | DONE ins | na 16 16 | 006ca5 | c0 01 00    |                 cpy.# 0001           non-distructively
4371:000 | DONE ins | na 16 16 | 006ca8 | f0 3b       |                 beq 006ce5           
4372:000 | DONE ins | na 16 16 | 006caa | b5 00       |                 lda.dx 00            
4373:000 | DONE ins | na 16 16 | 006cac | 3a          |                 dec.a                don't care about distruction
4374:000 | DONE ins | na 16 16 | 006cad | f0 39       |                 beq 006ce8           
4375:000 | DONE wsp | na 16 16 |        |             |
4376:000 | DONE cmt | na 16 16 |        |             |                 ; SPECIAL CASE 3: multiplication by two
4377:000 | DONE ins | na 16 16 | 006caf | c0 02 00    |                 cpy.# 0002           
4378:000 | DONE ins | na 16 16 | 006cb2 | f0 3b       |                 beq 006cef           
4379:000 | DONE wsp | na 16 16 |        |             |
4380:000 | DONE ins | na 16 16 | 006cb4 | b5 00       |                 lda.dx 00            
4381:000 | DONE ins | na 16 16 | 006cb6 | c9 02 00    |                 cmp.# 0002           
4382:000 | DONE ins | na 16 16 | 006cb9 | f0 38       |                 beq 006cf3           
4383:000 | DONE wsp | na 16 16 |        |             |
4384:000 | DONE cmt | na 16 16 |        |             |                 ; NO SPECIAL CASE ("The Hard Way")
4385:000 | DONE ins | na 16 16 | 006cbb | 84 0a       |                 sty.d 00020a         TOS number  "40"
4386:000 | DONE ins | na 16 16 | 006cbd | 85 0c       |                 sta.d 00020c         NOS number  "41"
4387:000 | DONE ins | na 16 16 | 006cbf | a0 10 00    |                 ldy.# &16            loop counter
4388:000 | DONE wsp | na 16 16 |        |             |
4389:000 | DONE ins | na 16 16 | 006cc2 | a9 00 00    |                 lda.# 0000           
4390:000 | DONE ins | na 16 16 | 006cc5 | 85 0e       |                 sta.d 00020e         Most Significat Word (MSW) of result
4391:000 | DONE wsp | na 16 16 |        |             |
4392:000 | DONE lbl | na 16 16 | 006cc7 |             | umstar_loop                          
4393:000 | DONE ins | na 16 16 | 006cc7 | 0a          |                 asl.a                useless for first iteration
4394:000 | DONE ins | na 16 16 | 006cc8 | 26 0e       |                 rol.d 00020e         move carry into MSB, useless first iteration
4395:000 | DONE ins | na 16 16 | 006cca | 06 0c       |                 asl.d 00020c         move bit of NOS number into carry
4396:000 | DONE wsp | na 16 16 |        |             |
4397:000 | DONE cmt | na 16 16 |        |             |                 ; if there is no carry bit, we don't have to add and can go to
4398:000 | DONE cmt | na 16 16 |        |             |                 ; the next bit
4399:000 | DONE ins | na 16 16 | 006ccc | 90 07       |                 bcc 006cd5           
4400:000 | DONE wsp | na 16 16 |        |             |
4401:000 | DONE ins | na 16 16 | 006cce | 18          |                 clc                  
4402:000 | DONE ins | na 16 16 | 006ccf | 65 0a       |                 adc.d 00020a         we have a set bit, so add TOS
4403:000 | DONE wsp | na 16 16 |        |             |
4404:000 | DONE cmt | na 16 16 |        |             |                 ; if we have a carry, increase the MSW of result
4405:000 | DONE ins | na 16 16 | 006cd1 | 90 02       |                 bcc 006cd5           
4406:000 | DONE ins | na 16 16 | 006cd3 | e6 0e       |                 inc.d 00020e         
4407:000 | DONE wsp | na 16 16 |        |             |
4408:000 | DONE lbl | na 16 16 | 006cd5 |             | umstar_counter                       
4409:000 | DONE ins | na 16 16 | 006cd5 | 88          |                 dey                  
4410:000 | DONE ins | na 16 16 | 006cd6 | d0 ef       |                 bne 006cc7           
4411:000 | DONE wsp | na 16 16 |        |             |
4412:000 | DONE cmt | na 16 16 |        |             |                 ; We're all done, clean up and leave
4413:000 | DONE ins | na 16 16 | 006cd8 | 95 00       |                 sta.dx 00            store lower cell of number in NOS
4414:000 | DONE ins | na 16 16 | 006cda | a4 0e       |                 ldy.d 00020e         store MSB in TOS as double cell
4415:000 | DONE wsp | na 16 16 |        |             |
4416:000 | DONE ins | na 16 16 | 006cdc | 80 1e       |                 bra 006cfc           don't use RTS so we can natively compile
4417:000 | DONE wsp | na 16 16 |        |             |
4418:000 | DONE lbl | na 16 16 | 006cde |             | umstar_zero                          
4419:000 | DONE cmt | na 16 16 |        |             |                 ; one or both of the numbers is zero, so we got off light
4420:000 | DONE ins | na 16 16 | 006cde | a0 00 00    |                 ldy.# 0000           
4421:000 | DONE ins | na 16 16 | 006ce1 | 94 00       |                 sty.dx 00            
4422:000 | DONE ins | na 16 16 | 006ce3 | 80 17       |                 bra 006cfc           
4423:000 | DONE wsp | na 16 16 |        |             |
4424:000 | DONE lbl | na 16 16 | 006ce5 |             | umstar_one_tos                       
4425:000 | DONE cmt | na 16 16 |        |             |                 ; TOS is one, life is easy
4426:000 | DONE ins | na 16 16 | 006ce5 | 88          |                 dey                  NOS is LSW, TOS becomes zero
4427:000 | DONE ins | na 16 16 | 006ce6 | 80 14       |                 bra 006cfc           
4428:000 | DONE lbl | na 16 16 | 006ce8 |             | umstar_one_nos                       
4429:000 | DONE cmt | na 16 16 |        |             |                 ; NOS is one, life is easy
4430:000 | DONE ins | na 16 16 | 006ce8 | 94 00       |                 sty.dx 00            
4431:000 | DONE ins | na 16 16 | 006cea | a0 00 00    |                 ldy.# 0000           
4432:000 | DONE ins | na 16 16 | 006ced | 80 0d       |                 bra 006cfc           
4433:000 | DONE wsp | na 16 16 |        |             |
4434:000 | DONE lbl | na 16 16 | 006cef |             | umstar_two_tos                       
4435:000 | DONE cmt | na 16 16 |        |             |                 ; TOS is two, life is easy
4436:000 | DONE ins | na 16 16 | 006cef | b5 00       |                 lda.dx 00            
4437:000 | DONE ins | na 16 16 | 006cf1 | 80 01       |                 bra 006cf4           
4438:000 | DONE lbl | na 16 16 | 006cf3 |             | umstar_two_nos                       
4439:000 | DONE cmt | na 16 16 |        |             |                 ; NOS is two, life is still easy
4440:000 | DONE ins | na 16 16 | 006cf3 | 98          |                 tya                  
4441:000 | DONE lbl | na 16 16 | 006cf4 |             | umstar_two_common                    
4442:000 | DONE ins | na 16 16 | 006cf4 | 0a          |                 asl.a                multiply by two, top bit in Carry Flag
4443:000 | DONE ins | na 16 16 | 006cf5 | 95 00       |                 sta.dx 00            Double Cell LSW is NOS
4444:000 | DONE wsp | na 16 16 |        |             |
4445:000 | DONE ins | na 16 16 | 006cf7 | a9 00 00    |                 lda.# 0000           
4446:000 | DONE ins | na 16 16 | 006cfa | 2a          |                 rol.a                Rotate any Carry Flag into MSW
4447:000 | DONE ins | na 16 16 | 006cfb | a8          |                 tay                  
4448:000 | DONE wsp | na 16 16 |        |             |
4449:000 | DONE lbl | na 16 16 | 006cfc |             | z_umstar                             
4449:001 | DONE ins | na 16 16 | 006cfc | 60          |                 rts                  
4450:000 | DONE wsp | na 16 16 |        |             |
4451:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
4452:000 | DONE cmt | na 16 16 |        |             | ; UM/MOD ( ud u -- u u ) 32/16 -> 16  X bytes / X cycles
4453:000 | DONE cmt | na 16 16 |        |             | ; Divide double cell number by single cell number, returning the quotient as TOS
4454:000 | DONE cmt | na 16 16 |        |             | ; and any remainder as NOS. All numbers are unsigned. This is the basic division
4455:000 | DONE cmt | na 16 16 |        |             | ; operation all others use. Based on Garth Wilson's code at
4456:000 | DONE cmt | na 16 16 |        |             | ; http://6502.org/source/integers/ummodfix/ummodfix.htm We use "scratch" for N
4457:000 | DONE cmt | na 16 16 |        |             | ; and include a separate detection of division by zero to force an error code
4458:000 | DONE lbl | na 16 16 | 006cfd |             | xt_ummod                             
4459:000 | DONE dir | na 16 16 |        |             |         .!a16                        
4460:000 | DONE dir | na 16 16 |        |             |         .!xy16                       
4461:000 | DONE cmt | na 16 16 |        |             |                 ; Move the inputs to the scratchpad to avoid having to fool
4462:000 | DONE cmt | na 16 16 |        |             |                 ; around with the Data Stack and for speed. Garth's original
4463:000 | DONE cmt | na 16 16 |        |             |                 ; code uses the MVN instruction for this, but our TOS is Y which
4464:000 | DONE cmt | na 16 16 |        |             |                 ; makes that harder. When we're done, the setup will look likes
4465:000 | DONE cmt | na 16 16 |        |             |                 ; this: (S is start of the scratchpad in Direct Page)
4466:000 | DONE cmt | na 16 16 |        |             |                 ;
4467:000 | DONE cmt | na 16 16 |        |             |                 ;     +-----+-----+-----+-----+-----+-----+-----+-----+
4468:000 | DONE cmt | na 16 16 |        |             |                 ;     |  DIVISOR  |        DIVIDEND       | TEMP AREA |
4469:000 | DONE cmt | na 16 16 |        |             |                 ;     |           |  hi cell     lo cell  | carry bit |
4470:000 | DONE cmt | na 16 16 |        |             |                 ;     |  S    S+1 | S+2   S+3 | S+4   S+5 | S+6   S+7 |
4471:000 | DONE cmt | na 16 16 |        |             |                 ;     +-----+-----+-----+-----+-----+-----+-----+-----+
4472:000 | DONE cmt | na 16 16 |        |             |                 ;
4473:000 | DONE cmt | na 16 16 |        |             |                 ; The divisor is TOS (in Y), high cell of the dividend in NOS,
4474:000 | DONE cmt | na 16 16 |        |             |                 ; and low cell in 3OS
4475:000 | DONE wsp | na 16 16 |        |             |
4476:000 | DONE cmt | na 16 16 |        |             |                 ; Catch division by zero. We could include this in the code as
4477:000 | DONE cmt | na 16 16 |        |             |                 ; part of overflow detection (see below), but we want an error
4478:000 | DONE cmt | na 16 16 |        |             |                 ; to appear like in Gforth
4479:000 | DONE ins | na 16 16 | 006cfd | 98          |                 tya                  force flag test
4480:000 | DONE ins | na 16 16 | 006cfe | d0 06       |                 bne 006d06           
4481:000 | DONE wsp | na 16 16 |        |             |
4482:000 | DONE ins | na 16 16 | 006d00 | a9 c0 7b    |                 lda.# 007bc0         
4483:000 | DONE ins | na 16 16 | 006d03 | 4c fd 75    |                 jmp 0075fd           
4484:000 | DONE wsp | na 16 16 |        |             |
4485:000 | DONE lbl | na 16 16 | 006d06 |             | ummod_notzero                        
4486:000 | DONE ins | na 16 16 | 006d06 | 84 00       |                 sty.d 000200         Y is now free
4487:000 | DONE ins | na 16 16 | 006d08 | b5 00       |                 lda.dx 00            high cell of dividend
4488:000 | DONE ins | na 16 16 | 006d0a | 85 02       |                 sta.d 000202         
4489:000 | DONE ins | na 16 16 | 006d0c | b5 02       |                 lda.dx 02            low cell of dividend
4490:000 | DONE ins | na 16 16 | 006d0e | 85 04       |                 sta.d 000204         
4491:000 | DONE wsp | na 16 16 |        |             |
4492:000 | DONE cmt | na 16 16 |        |             |                 ; Drop one entry off of the stack and save the new Data Stack
4493:000 | DONE cmt | na 16 16 |        |             |                 ; Pointer, freeing X for index duty
4494:000 | DONE ins | na 16 16 | 006d10 | e8          |                 inx                  
4495:000 | DONE ins | na 16 16 | 006d11 | e8          |                 inx                  
4496:000 | DONE ins | na 16 16 | 006d12 | 86 10       |                 stx.d 000210         
4497:000 | DONE wsp | na 16 16 |        |             |
4498:000 | DONE cmt | na 16 16 |        |             |                 ; Detect overflow. Subtract divisor from high cell of dividend.
4499:000 | DONE cmt | na 16 16 |        |             |                 ; If carry flag remains set, divisor was not large enough to
4500:000 | DONE cmt | na 16 16 |        |             |                 ; avoid overflow. This also would detect division by zero, but
4501:000 | DONE cmt | na 16 16 |        |             |                 ; we did that already in a separate step
4502:000 | DONE ins | na 16 16 | 006d14 | 38          |                 sec                  
4503:000 | DONE ins | na 16 16 | 006d15 | a5 02       |                 lda.d 000202         
4504:000 | DONE ins | na 16 16 | 006d17 | e5 00       |                 sbc.d 000200         
4505:000 | DONE ins | na 16 16 | 006d19 | b0 21       |                 bcs 006d3c           
4506:000 | DONE wsp | na 16 16 |        |             |
4507:000 | DONE cmt | na 16 16 |        |             |                 ; If there is no overflow, the carry flag remains clear for
4508:000 | DONE cmt | na 16 16 |        |             |                 ; first roll. We loop 16 times, but since we shift the dividend
4509:000 | DONE cmt | na 16 16 |        |             |                 ; over at the same time as shifting the answer in, the operation
4510:000 | DONE cmt | na 16 16 |        |             |                 ; must start and (!) finish with a shift of the low cell of the
4511:000 | DONE cmt | na 16 16 |        |             |                 ; dividend (which ends up holding the quotient), so we start
4512:000 | DONE cmt | na 16 16 |        |             |                 ; with 17 times in X. Y is used for temporary storage
4513:000 | DONE ins | na 16 16 | 006d1b | a2 11 00    |                 ldx.# &17            
4514:000 | DONE wsp | na 16 16 |        |             |
4515:000 | DONE lbl | na 16 16 | 006d1e |             | ummod_shift                          
4516:000 | DONE cmt | na 16 16 |        |             |                 ; Move low cell of dividend left one bit, also shifting answer
4517:000 | DONE cmt | na 16 16 |        |             |                 ; in. The first rotation brings in a zero, which later gets
4518:000 | DONE cmt | na 16 16 |        |             |                 ; pushed off the other end in the last rotation
4519:000 | DONE ins | na 16 16 | 006d1e | 26 04       |                 rol.d 000204         
4520:000 | DONE wsp | na 16 16 |        |             |
4521:000 | DONE cmt | na 16 16 |        |             |                 ; loop control
4522:000 | DONE ins | na 16 16 | 006d20 | ca          |                 dex                  
4523:000 | DONE ins | na 16 16 | 006d21 | f0 22       |                 beq 006d45           
4524:000 | DONE wsp | na 16 16 |        |             |
4525:000 | DONE cmt | na 16 16 |        |             |                 ; Shift high cell of divident left one bit, also shifting the
4526:000 | DONE cmt | na 16 16 |        |             |                 ; next bit in from high bit of low cell
4527:000 | DONE ins | na 16 16 | 006d23 | 26 02       |                 rol.d 000202         
4528:000 | DONE ins | na 16 16 | 006d25 | a9 00 00    |                 lda.# 0000           
4529:000 | DONE ins | na 16 16 | 006d28 | 2a          |                 rol.a                
4530:000 | DONE ins | na 16 16 | 006d29 | 85 06       |                 sta.d 000206         store old high bit of dividend
4531:000 | DONE wsp | na 16 16 |        |             |
4532:000 | DONE cmt | na 16 16 |        |             |                 ; See if divisor will fit into high 17 bits of dividend by
4533:000 | DONE cmt | na 16 16 |        |             |                 ; subtracting and then looking at the carry flag. If carry was
4534:000 | DONE cmt | na 16 16 |        |             |                 ; cleared, divisor did not fit
4535:000 | DONE ins | na 16 16 | 006d2b | 38          |                 sec                  
4536:000 | DONE ins | na 16 16 | 006d2c | a5 02       |                 lda.d 000202         
4537:000 | DONE ins | na 16 16 | 006d2e | e5 00       |                 sbc.d 000200         
4538:000 | DONE ins | na 16 16 | 006d30 | a8          |                 tay                  save difference in Y until we know if we need it
4539:000 | DONE wsp | na 16 16 |        |             |
4540:000 | DONE cmt | na 16 16 |        |             |                 ; Bit 0 of S+6 serves as the 17th bit. Complete the subtraction
4541:000 | DONE cmt | na 16 16 |        |             |                 ; by doing the 17th bit before determining if the divisor fits
4542:000 | DONE cmt | na 16 16 |        |             |                 ; into the high 17 bits of the dividend. If so, the carry flag
4543:000 | DONE cmt | na 16 16 |        |             |                 ; remains set
4544:000 | DONE ins | na 16 16 | 006d31 | a5 06       |                 lda.d 000206         
4545:000 | DONE ins | na 16 16 | 006d33 | e9 00 00    |                 sbc.# 0000           
4546:000 | DONE ins | na 16 16 | 006d36 | 90 e6       |                 bcc 006d1e           
4547:000 | DONE wsp | na 16 16 |        |             |
4548:000 | DONE cmt | na 16 16 |        |             |                 ; Since the divisor fit into high 17 bits, update dividend high
4549:000 | DONE cmt | na 16 16 |        |             |                 ; cell to what it would be after subtraction
4550:000 | DONE ins | na 16 16 | 006d38 | 84 02       |                 sty.d 000202         
4551:000 | DONE ins | na 16 16 | 006d3a | 80 e2       |                 bra 006d1e           
4552:000 | DONE wsp | na 16 16 |        |             |
4553:000 | DONE lbl | na 16 16 | 006d3c |             | ummod_overflow                       
4554:000 | DONE cmt | na 16 16 |        |             |                 ; If an overflow condition occurs, put 0ffff
4555:000 | DONE cmt | na 16 16 |        |             |                 ; in both the quotient and remainder
4556:000 | DONE ins | na 16 16 | 006d3c | a6 10       |                 ldx.d 000210         restore DSP
4557:000 | DONE ins | na 16 16 | 006d3e | a0 ff ff    |                 ldy.# 0ffff          
4558:000 | DONE ins | na 16 16 | 006d41 | 94 00       |                 sty.dx 00            
4559:000 | DONE ins | na 16 16 | 006d43 | 80 08       |                 bra 006d4d           go to end to enable native coding
4560:000 | DONE wsp | na 16 16 |        |             |
4561:000 | DONE lbl | na 16 16 | 006d45 |             | ummod_complete                       
4562:000 | DONE ins | na 16 16 | 006d45 | a6 10       |                 ldx.d 000210         restore DSP
4563:000 | DONE ins | na 16 16 | 006d47 | a4 04       |                 ldy.d 000204         quotient is TOS
4564:000 | DONE ins | na 16 16 | 006d49 | a5 02       |                 lda.d 000202         remainder is NOS
4565:000 | DONE ins | na 16 16 | 006d4b | 95 00       |                 sta.dx 00            
4566:000 | DONE wsp | na 16 16 |        |             |
4567:000 | DONE lbl | na 16 16 | 006d4d |             | z_ummod                              
4567:001 | DONE ins | na 16 16 | 006d4d | 60          |                 rts                  
4568:000 | DONE wsp | na 16 16 |        |             |
4569:000 | DONE wsp | na 16 16 |        |             |
4570:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
4571:000 | DONE cmt | na 16 16 |        |             | ; UNUSED ( -- u ) 11 bytes / X cycles
4572:000 | DONE cmt | na 16 16 |        |             | ; Return amount of memory available for the Dictionary. Does not include
4573:000 | DONE cmt | na 16 16 |        |             | ; memory for buffers, stacks etc. Does not exclude the space used by PAD
4574:000 | DONE cmt | na 16 16 |        |             | ; TODO rewrite for multitasking
4575:000 | DONE lbl | na 16 16 | 006d4e |             | xt_unused                            
4576:000 | DONE dir | na 16 16 |        |             |         .!a16                        
4577:000 | DONE ins | na 16 16 | 006d4e | a9 ff 7b    |                 lda.# 007bff         
4578:000 | DONE ins | na 16 16 | 006d51 | 38          |                 sec                  
4579:000 | DONE ins | na 16 16 | 006d52 | e5 28       |                 sbc.d 000228         current compile pointer
4580:000 | DONE wsp | na 16 16 |        |             |
4581:000 | DONE ins | na 16 16 | 006d54 | ca          |                 dex                  
4582:000 | DONE ins | na 16 16 | 006d55 | ca          |                 dex                  
4583:000 | DONE ins | na 16 16 | 006d56 | 94 00       |                 sty.dx 00            
4584:000 | DONE wsp | na 16 16 |        |             |
4585:000 | DONE ins | na 16 16 | 006d58 | a8          |                 tay                  
4586:000 | DONE wsp | na 16 16 |        |             |
4587:000 | DONE lbl | na 16 16 | 006d59 |             | z_unused                             
4587:001 | DONE ins | na 16 16 | 006d59 | 60          |                 rts                  
4588:000 | DONE wsp | na 16 16 |        |             |
4589:000 | DONE wsp | na 16 16 |        |             |
4590:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
4591:000 | DONE cmt | na 16 16 |        |             | ; VALUE ( n "name" -- ) X bytes / X cycles
4592:000 | DONE cmt | na 16 16 |        |             | ; Associate a name with a value (like a constant) that can be changed (like
4593:000 | DONE cmt | na 16 16 |        |             | ; a variable) with TO. We use the routines as CONSTANT, see there.
4594:000 | DONE wsp | na 16 16 |        |             |
4595:000 | DONE wsp | na 16 16 |        |             |
4596:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
4597:000 | DONE cmt | na 16 16 |        |             | ; VARIABLE ( "name" -- ) X bytes / X cycles
4598:000 | DONE cmt | na 16 16 |        |             | ; Define a word that returns the address for a variable. There are various Forth
4599:000 | DONE cmt | na 16 16 |        |             | ; definitions for this word, such as  CREATE 1 CELLS ALLOT  or CREATE 0 ,
4600:000 | DONE cmt | na 16 16 |        |             | ; We use a variant of the second one so the variable is initialized to zero
4601:000 | DONE lbl | na 16 16 | 006d5a |             | xt_variable                          
4602:000 | DONE cmt | na 16 16 |        |             |                 ; We let CREATE do the heavy lifting
4603:000 | DONE ins | na 16 16 | 006d5a | 20 bd 65    |                 jsr 0065bd           
4604:000 | DONE wsp | na 16 16 |        |             |
4605:000 | DONE cmt | na 16 16 |        |             |                 ; There is no "stz.di cp" so we have to do this the
4606:000 | DONE cmt | na 16 16 |        |             |                 ; old way, which is still faster than a subroutine jump to ZERO
4607:000 | DONE ins | na 16 16 | 006d5d | a9 00 00    |                 lda.# 0000           
4608:000 | DONE ins | na 16 16 | 006d60 | 92 28       |                 sta.di 000228        STA (CP)
4609:000 | DONE wsp | na 16 16 |        |             |
4610:000 | DONE ins | na 16 16 | 006d62 | e6 28       |                 inc.d 000228         direct COMMA
4611:000 | DONE ins | na 16 16 | 006d64 | e6 28       |                 inc.d 000228         
4612:000 | DONE wsp | na 16 16 |        |             |
4613:000 | DONE lbl | na 16 16 | 006d66 |             | z_variable                           
4613:001 | DONE ins | na 16 16 | 006d66 | 60          |                 rts                  
4614:000 | DONE wsp | na 16 16 |        |             |
4615:000 | DONE wsp | na 16 16 |        |             |
4616:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
4617:000 | DONE cmt | na 16 16 |        |             | ; WORDS&SIZES ( -- ) X bytes / X cycles
4618:000 | DONE cmt | na 16 16 |        |             | ; Prints all words in the dictionary with the sizes of their code as returned by
4619:000 | DONE cmt | na 16 16 |        |             | ; WORDSIZE. Used to test different optimizations of the compiling routines,
4620:000 | DONE cmt | na 16 16 |        |             | ; specific to Liara Forth. Uses tmp3
4621:000 | DONE lbl | na 16 16 | 006d67 |             | xt_wordsnsizes                       
4622:000 | DONE dir | na 16 16 |        |             |         .!a16                        
4623:000 | DONE ins | na 16 16 | 006d67 | a9 ff ff    |                 lda.# 0ffff          
4624:000 | DONE ins | na 16 16 | 006d6a | 85 0e       |                 sta.d 00020e         set flag that we want sizes, too
4625:000 | DONE wsp | na 16 16 |        |             |
4626:000 | DONE cmt | na 16 16 |        |             |                 ; continue with WORDS
4627:000 | DONE ins | na 16 16 | 006d6c | 80 02       |                 bra 006d70           
4628:000 | DONE wsp | na 16 16 |        |             |
4629:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
4630:000 | DONE cmt | na 16 16 |        |             | ; WORDS ( -- ) X bytes / X cycles
4631:000 | DONE cmt | na 16 16 |        |             | ; Print list of all Forth words available. This only really makes sense in an
4632:000 | DONE cmt | na 16 16 |        |             | ; interactive setting, so we don't have to worry about speed. WORDS&SIZES falls
4633:000 | DONE cmt | na 16 16 |        |             | ; through to here. Uses tmp3. Both WORDS and WORDS&SIZES might be better off as
4634:000 | DONE cmt | na 16 16 |        |             | ; high-level Forth words, but these routines are left over from early testing
4635:000 | DONE lbl | na 16 16 | 006d6e |             | xt_words                             
4636:000 | DONE ins | na 16 16 | 006d6e | 64 0e       |                 stz.d 00020e         store flag that we don't want to print sizes
4637:000 | DONE wsp | na 16 16 |        |             |
4638:000 | DONE lbl | na 16 16 | 006d70 |             | words_common                         
4639:000 | DONE cmt | na 16 16 |        |             |                 ; common routine for WORDS and WORDS&SIZES
4640:000 | DONE ins | na 16 16 | 006d70 | 20 b6 65    |                 jsr 0065b6           start on next line, this is a style choice
4641:000 | DONE wsp | na 16 16 |        |             |
4642:000 | DONE ins | na 16 16 | 006d73 | a5 2a       |                 lda.d 00022a         nt of first entry in Dictionary (last added)
4643:000 | DONE ins | na 16 16 | 006d75 | 48          |                 pha                  
4644:000 | DONE wsp | na 16 16 |        |             |
4645:000 | DONE ins | na 16 16 | 006d76 | ca          |                 dex                  create room on TOS
4646:000 | DONE ins | na 16 16 | 006d77 | ca          |                 dex                  
4647:000 | DONE ins | na 16 16 | 006d78 | 94 00       |                 sty.dx 00            
4648:000 | DONE wsp | na 16 16 |        |             |
4649:000 | DONE lbl | na 16 16 | 006d7a |             | words_loop                           
4650:000 | DONE ins | na 16 16 | 006d7a | a8          |                 tay                  ( nt )
4651:000 | DONE ins | na 16 16 | 006d7b | 20 1b 69    |                 jsr 00691b           ( nt -- addr u )
4652:000 | DONE ins | na 16 16 | 006d7e | 20 62 6c    |                 jsr 006c62           ( addr u -- )
4653:000 | DONE ins | na 16 16 | 006d81 | 20 1d 6c    |                 jsr 006c1d           
4654:000 | DONE wsp | na 16 16 |        |             |
4655:000 | DONE cmt | na 16 16 |        |             |                 ; If the user wants sizes as well, print them
4656:000 | DONE ins | na 16 16 | 006d84 | a5 0e       |                 lda.d 00020e         
4657:000 | DONE ins | na 16 16 | 006d86 | f0 0f       |                 beq 006d97           
4658:000 | DONE wsp | na 16 16 |        |             |
4659:000 | DONE cmt | na 16 16 |        |             |                 ; For the moment, just print the size in bytes after the word's
4660:000 | DONE cmt | na 16 16 |        |             |                 ; name string. We can decide if we want to get all fancy later
4661:000 | DONE ins | na 16 16 | 006d88 | ca          |                 dex                  
4662:000 | DONE ins | na 16 16 | 006d89 | ca          |                 dex                  
4663:000 | DONE ins | na 16 16 | 006d8a | 94 00       |                 sty.dx 00            
4664:000 | DONE wsp | na 16 16 |        |             |
4665:000 | DONE ins | na 16 16 | 006d8c | 7a          |                 ply                  get nt back again
4666:000 | DONE ins | na 16 16 | 006d8d | 5a          |                 phy                  
4667:000 | DONE ins | na 16 16 | 006d8e | 20 ab 6d    |                 jsr 006dab           ( u )
4668:000 | DONE ins | na 16 16 | 006d91 | 20 a0 61    |                 jsr 0061a0           
4669:000 | DONE ins | na 16 16 | 006d94 | 20 1d 6c    |                 jsr 006c1d           
4670:000 | DONE wsp | na 16 16 |        |             |
4671:000 | DONE lbl | na 16 16 | 006d97 |             | words_nosizes                        
4672:000 | DONE ins | na 16 16 | 006d97 | 68          |                 pla                  get back first entry in Dictionary
4673:000 | DONE wsp | na 16 16 |        |             |
4674:000 | DONE cmt | na 16 16 |        |             |                 ; The next nt is two bytes below the nt of the current one in
4675:000 | DONE cmt | na 16 16 |        |             |                 ; the Dictionary header
4676:000 | DONE ins | na 16 16 | 006d98 | 1a          |                 inc.a                
4677:000 | DONE ins | na 16 16 | 006d99 | 1a          |                 inc.a                
4678:000 | DONE wsp | na 16 16 |        |             |
4679:000 | DONE ins | na 16 16 | 006d9a | ca          |                 dex                  
4680:000 | DONE ins | na 16 16 | 006d9b | ca          |                 dex                  
4681:000 | DONE ins | na 16 16 | 006d9c | 94 00       |                 sty.dx 00            
4682:000 | DONE wsp | na 16 16 |        |             |
4683:000 | DONE ins | na 16 16 | 006d9e | a8          |                 tay                  
4684:000 | DONE ins | na 16 16 | 006d9f | b9 00 00    |                 lda.y 0000           LDA $0000,Y
4685:000 | DONE ins | na 16 16 | 006da2 | 48          |                 pha                  
4686:000 | DONE ins | na 16 16 | 006da3 | d0 d5       |                 bne 006d7a           zero entry signals end of Dictionary
4687:000 | DONE wsp | na 16 16 |        |             |
4688:000 | DONE cmt | na 16 16 |        |             |                 ; all done, clean up
4689:000 | DONE ins | na 16 16 | 006da5 | 68          |                 pla                  balance MPU stack, value discarded
4690:000 | DONE wsp | na 16 16 |        |             |
4691:000 | DONE ins | na 16 16 | 006da6 | b4 00       |                 ldy.dx 00            
4692:000 | DONE ins | na 16 16 | 006da8 | e8          |                 inx                  
4693:000 | DONE ins | na 16 16 | 006da9 | e8          |                 inx                  
4694:000 | DONE wsp | na 16 16 |        |             |
4695:000 | DONE lbl | na 16 16 | 006daa |             | z_words                              
4696:000 | DONE lbl | na 16 16 | 006daa |             | z_wordsnsizes                        
4696:001 | DONE ins | na 16 16 | 006daa | 60          |                 rts                  
4697:000 | DONE wsp | na 16 16 |        |             |
4698:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
4699:000 | DONE cmt | na 16 16 |        |             | ; WORDSIZE ( nt -- u ) X bytes / X cycles
4700:000 | DONE cmt | na 16 16 |        |             | ; Given an word's name token (nt), return the size of the word's payload (CFA
4701:000 | DONE cmt | na 16 16 |        |             | ; plus PFA) in bytes. Does not count the final RTS. Specific to Liara Forth.
4702:000 | DONE cmt | na 16 16 |        |             | ; Uses tmp2, note WORDS and WORDS&SIZES use tmp3
4703:000 | DONE lbl | na 16 16 | 006dab |             | xt_wordsize                          
4704:000 | DONE cmt | na 16 16 |        |             |                 ; We get the beginning address of the code from the word's
4705:000 | DONE cmt | na 16 16 |        |             |                 ; header entry for the execution token (xt, 4 bytes down) and
4706:000 | DONE cmt | na 16 16 |        |             |                 ; the pointer to the end of the code (z_word, six bytes down).
4707:000 | DONE ins | na 16 16 | 006dab | c8          |                 iny                  
4708:000 | DONE ins | na 16 16 | 006dac | c8          |                 iny                  
4709:000 | DONE ins | na 16 16 | 006dad | c8          |                 iny                  
4710:000 | DONE ins | na 16 16 | 006dae | c8          |                 iny                  nt+4, location of xt
4711:000 | DONE ins | na 16 16 | 006daf | b9 00 00    |                 lda.y 0000           get xt
4712:000 | DONE ins | na 16 16 | 006db2 | 85 0c       |                 sta.d 00020c         
4713:000 | DONE wsp | na 16 16 |        |             |
4714:000 | DONE ins | na 16 16 | 006db4 | c8          |                 iny                  
4715:000 | DONE ins | na 16 16 | 006db5 | c8          |                 iny                  nt+6, location of z_word
4716:000 | DONE ins | na 16 16 | 006db6 | b9 00 00    |                 lda.y 0000           
4717:000 | DONE wsp | na 16 16 |        |             |
4718:000 | DONE ins | na 16 16 | 006db9 | 38          |                 sec                  (z_word - xt_word)
4719:000 | DONE ins | na 16 16 | 006dba | e5 0c       |                 sbc.d 00020c         
4720:000 | DONE ins | na 16 16 | 006dbc | a8          |                 tay                  
4721:000 | DONE wsp | na 16 16 |        |             |
4722:000 | DONE lbl | na 16 16 | 006dbd |             | z_wordsize                           
4722:001 | DONE ins | na 16 16 | 006dbd | 60          |                 rts                  
4723:000 | DONE wsp | na 16 16 |        |             |
4724:000 | DONE wsp | na 16 16 |        |             |
4725:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
4726:000 | DONE cmt | na 16 16 |        |             | ; XOR ( n m -- n ) 6 bytes / X cycles
4727:000 | DONE cmt | na 16 16 |        |             | ; Logical XOR
4728:000 | DONE lbl | na 16 16 | 006dbe |             | xt_xor                               
4729:000 | DONE ins | na 16 16 | 006dbe | 98          |                 tya                  
4730:000 | DONE ins | na 16 16 | 006dbf | 55 00       |                 eor.dx 00            
4731:000 | DONE ins | na 16 16 | 006dc1 | a8          |                 tay                  
4732:000 | DONE wsp | na 16 16 |        |             |
4733:000 | DONE ins | na 16 16 | 006dc2 | e8          |                 inx                  
4734:000 | DONE ins | na 16 16 | 006dc3 | e8          |                 inx                  
4735:000 | DONE wsp | na 16 16 |        |             |
4736:000 | DONE lbl | na 16 16 | 006dc4 |             | z_xor                                
4736:001 | DONE ins | na 16 16 | 006dc4 | 60          |                 rts                  
4737:000 | DONE wsp | na 16 16 |        |             |
4738:000 | DONE wsp | na 16 16 |        |             |
4739:000 | DONE cmt | na 16 16 |        |             | ; ===================================================================
4740:000 | DONE cmt | na 16 16 |        |             | ; MIDDLE INCLUDES
4741:000 | DONE wsp | na 16 16 |        |             |
4742:000 | DONE cmt | na 16 16 |        |             | ; Dictionary Headers for Liara Forth for the W65C265SXB
4742:001 | DONE cmt | na 16 16 |        |             | ; Scot W. Stevenson <scot.stevenson@gmail.com>
4742:002 | DONE cmt | na 16 16 |        |             | ; First version: 05. Dec 2016
4742:003 | DONE cmt | na 16 16 |        |             | ; This version: 01. Mar 2017
4742:004 | DONE wsp | na 16 16 |        |             |
4742:005 | DONE cmt | na 16 16 |        |             | ; Dictionary headers are kept separately from the code, which allows various
4742:006 | DONE cmt | na 16 16 |        |             | ; tricks in the code. We roughly follow the Gforth terminology: The Execution
4742:007 | DONE cmt | na 16 16 |        |             | ; Token (xt) is the address of the first byte of a word's code that can be,
4742:008 | DONE cmt | na 16 16 |        |             | ; well, executed; the Name Token (nt) is a pointer to the beginning of the
4742:009 | DONE cmt | na 16 16 |        |             | ; word's header in the Dictionary. There, the link to the next word in the
4742:010 | DONE cmt | na 16 16 |        |             | ; Dictionary is always one cell down from the current word's own nt. In the code
4742:011 | DONE cmt | na 16 16 |        |             | ; itself, we use "nt_<WORD>" ("header") for the nt and "xt_<WORD>" ("A" as the
4742:012 | DONE cmt | na 16 16 |        |             | ; beginning) for the xt.
4742:013 | DONE cmt | na 16 16 |        |             | ;
4742:014 | DONE cmt | na 16 16 |        |             | ; This gives us the following header structure:
4742:015 | DONE cmt | na 16 16 |        |             | ;
4742:016 | DONE cmt | na 16 16 |        |             | ;              8 bit     8 bit
4742:017 | DONE cmt | na 16 16 |        |             | ;               LSB       MSB
4742:018 | DONE cmt | na 16 16 |        |             | ; nt_word ->  +--------+--------+
4742:019 | DONE cmt | na 16 16 |        |             | ;             | Length | Status |
4742:020 | DONE cmt | na 16 16 |        |             | ;          +2 +--------+--------+
4742:021 | DONE cmt | na 16 16 |        |             | ;             | Next Header     | -> nt_next_word
4742:022 | DONE cmt | na 16 16 |        |             | ;          +4 +-----------------+
4742:023 | DONE cmt | na 16 16 |        |             | ;             | Start of Code   | -> xt_word
4742:024 | DONE cmt | na 16 16 |        |             | ;          +6 +-----------------+
4742:025 | DONE cmt | na 16 16 |        |             | ;             | End of Code     | -> z_word
4742:026 | DONE cmt | na 16 16 |        |             | ;          +8 +--------+--------+
4742:027 | DONE cmt | na 16 16 |        |             | ;             | Name   |        |
4742:028 | DONE cmt | na 16 16 |        |             | ;             +--------+--------+
4742:029 | DONE cmt | na 16 16 |        |             | ;             |        |        |
4742:030 | DONE cmt | na 16 16 |        |             | ;             +--------+--------+
4742:031 | DONE cmt | na 16 16 |        |             | ;             |        |  ...   | (name string does not end with a zero)
4742:032 | DONE cmt | na 16 16 |        |             | ;          +n +--------+--------+
4742:033 | DONE cmt | na 16 16 |        |             | ;
4742:034 | DONE cmt | na 16 16 |        |             | ; The Status Byte is created by adding the flags defined in
4742:035 | DONE cmt | na 16 16 |        |             | ; definitions.tasm:
4742:036 | DONE cmt | na 16 16 |        |             | ;
4742:037 | DONE cmt | na 16 16 |        |             | ;       CO - Compile Only
4742:038 | DONE cmt | na 16 16 |        |             | ;       IM - Immediate Word
4742:039 | DONE cmt | na 16 16 |        |             | ;       NC - Native Compile allowed (inline compile)
4742:040 | DONE wsp | na 16 16 |        |             |
4742:041 | DONE cmt | na 16 16 |        |             | ; Note there are currently five bits unused. The last word (top word in code)
4742:042 | DONE cmt | na 16 16 |        |             | ; is always BYE. It is marked as the last word by its value of 0000 in its Next
4742:043 | DONE cmt | na 16 16 |        |             | ; Header field. The words are sorted with the more common ones first (further
4742:044 | DONE cmt | na 16 16 |        |             | ; down in code) so they are found earlier.  Anythiing to do with output comes
4742:045 | DONE cmt | na 16 16 |        |             | ; later (further up) because things will always be slow if there is a human
4742:046 | DONE cmt | na 16 16 |        |             | ; involved.
4742:047 | DONE wsp | na 16 16 |        |             |
4742:048 | DONE lbl | na 16 16 | 006dc5 |             | nt_bye                               
4742:049 | DONE dir | na 16 16 | 006dc5 | (1 bytes)   |         .byte 03                     length of word string
4742:049 | DONE dir | na 16 16 |        |             |                 03                       --  .
4742:050 | DONE dir | na 16 16 | 006dc6 | (1 bytes)   |         .byte { NC }                 status byte
4742:050 | DONE dir | na 16 16 |        |             |                 01                       --  .
4742:051 | DONE dir | na 16 16 | 006dc7 | (2 bytes)   |         .word 0000                   next word in dictionary, 0000 signals end
4742:051 | DONE dir | na 16 16 |        |             |                 00 00                    --  . .
4742:052 | DONE dir | na 16 16 | 006dc9 | (2 bytes)   |         .word 006523                 start of code, the xt of this word
4742:052 | DONE dir | na 16 16 |        |             |                 23 65                    --  # e
4742:053 | DONE dir | na 16 16 | 006dcb | (2 bytes)   |         .word 006526                 end of code (points to RTS)
4742:053 | DONE dir | na 16 16 |        |             |                 26 65                    --  & e
4742:054 | DONE dir | na 16 16 | 006dcd | (3 bytes)   |         .byte 62, 79, 65             word name, always lower case
4742:054 | DONE dir | na 16 16 |        |             |                 62 79 65                 --  b y e
4742:055 | DONE wsp | na 16 16 |        |             |
4742:056 | DONE lbl | na 16 16 | 006dd0 |             | nt_cold                              
4742:057 | DONE dir | na 16 16 | 006dd0 | (2 bytes)   |         .byte 4, 00                  
4742:057 | DONE dir | na 16 16 |        |             |                 04 00                    --  . .
4742:058 | DONE dir | na 16 16 | 006dd2 | (6 bytes)   |         .word nt_bye, xt_cold, 0060de 
4742:058 | DONE dir | na 16 16 |        |             |                 c5 6d 63 60 de 60        --  . m c ` . `
4742:059 | DONE dir | na 16 16 | 006dd8 | (4 bytes)   |         .byte 63, 6f, 6c, 64         
4742:059 | DONE dir | na 16 16 |        |             |                 63 6f 6c 64              --  c o l d
4742:060 | DONE wsp | na 16 16 |        |             |
4742:061 | DONE lbl | na 16 16 | 006ddc |             | nt_wordsnsizes                       
4742:062 | DONE dir | na 16 16 | 006ddc | (2 bytes)   |         .byte 0b, { NC }             
4742:062 | DONE dir | na 16 16 |        |             |                 0b 01                    --   .
4742:063 | DONE dir | na 16 16 | 006dde | (6 bytes)   |         .word nt_cold, xt_wordsnsizes, 006daa 
4742:063 | DONE dir | na 16 16 |        |             |                 d0 6d 67 6d aa 6d        --  . m g m . m
4742:064 | DONE dir | na 16 16 | 006de4 | (11 bytes)  |         .byte 77, 6f, 72, 64, 73, 26, 73, 69, 7a, 65, 73 
4742:064 | DONE dir | na 16 16 |        |             |                 77 6f 72 64 73 26 73 69  --  w o r d s & s i
4742:064 | DONE dir | na 16 16 |        |             |                 7a 65 73                 --  z e s
4742:065 | DONE wsp | na 16 16 |        |             |
4742:066 | DONE lbl | na 16 16 | 006def |             | nt_words                             
4742:067 | DONE dir | na 16 16 | 006def | (2 bytes)   |         .byte 5, { NC }              
4742:067 | DONE dir | na 16 16 |        |             |                 05 01                    --  . .
4742:068 | DONE dir | na 16 16 | 006df1 | (6 bytes)   |         .word nt_wordsnsizes, xt_words, 006daa 
4742:068 | DONE dir | na 16 16 |        |             |                 dc 6d 6e 6d aa 6d        --  . m n m . m
4742:069 | DONE dir | na 16 16 | 006df7 | (5 bytes)   |         .byte 77, 6f, 72, 64, 73     
4742:069 | DONE dir | na 16 16 |        |             |                 77 6f 72 64 73           --  w o r d s
4742:070 | DONE wsp | na 16 16 |        |             |
4742:071 | DONE lbl | na 16 16 | 006dfc |             | nt_dump                              
4742:072 | DONE dir | na 16 16 | 006dfc | (2 bytes)   |         .byte 4, { NC }              
4742:072 | DONE dir | na 16 16 |        |             |                 04 01                    --  . .
4742:073 | DONE dir | na 16 16 | 006dfe | (6 bytes)   |         .word nt_words, xt_dump, 006716 
4742:073 | DONE dir | na 16 16 |        |             |                 ef 6d f0 66 16 67        --  . m . f . g
4742:074 | DONE dir | na 16 16 | 006e04 | (4 bytes)   |         .byte 64, 75, 6d, 70         
4742:074 | DONE dir | na 16 16 |        |             |                 64 75 6d 70              --  d u m p
4742:075 | DONE wsp | na 16 16 |        |             |
4742:076 | DONE lbl | na 16 16 | 006e08 |             | nt_wordsize                          
4742:077 | DONE dir | na 16 16 | 006e08 | (2 bytes)   |         .byte 8, { NC }              
4742:077 | DONE dir | na 16 16 |        |             |                 08 01                    --  . .
4742:078 | DONE dir | na 16 16 | 006e0a | (6 bytes)   |         .word nt_dump, xt_wordsize, 006dbd 
4742:078 | DONE dir | na 16 16 |        |             |                 fc 6d ab 6d bd 6d        --  . m . m . m
4742:079 | DONE dir | na 16 16 | 006e10 | (8 bytes)   |         .byte 77, 6f, 72, 64, 73, 69, 7a, 65 
4742:079 | DONE dir | na 16 16 |        |             |                 77 6f 72 64 73 69 7a 65  --  w o r d s i z e
4742:079 | DONE dir | na 16 16 |        |             |                                          -- 
4742:080 | DONE wsp | na 16 16 |        |             |
4742:081 | DONE lbl | na 16 16 | 006e18 |             | nt_pick                              
4742:082 | DONE dir | na 16 16 | 006e18 | (2 bytes)   |         .byte 4, { NC }              
4742:082 | DONE dir | na 16 16 |        |             |                 04 01                    --  . .
4742:083 | DONE dir | na 16 16 | 006e1a | (6 bytes)   |         .word nt_wordsize, xt_pick, 006a5c 
4742:083 | DONE dir | na 16 16 |        |             |                 08 6e 4f 6a 5c 6a        --  . n O j \ j
4742:084 | DONE dir | na 16 16 | 006e20 | (4 bytes)   |         .byte 70, 69, 63, 6b         
4742:084 | DONE dir | na 16 16 |        |             |                 70 69 63 6b              --  p i c k
4742:085 | DONE wsp | na 16 16 |        |             |
4742:086 | DONE lbl | na 16 16 | 006e24 |             | nt_bell                              
4742:087 | DONE dir | na 16 16 | 006e24 | (2 bytes)   |         .byte 4, { NC }              
4742:087 | DONE dir | na 16 16 |        |             |                 04 01                    --  . .
4742:088 | DONE dir | na 16 16 | 006e26 | (6 bytes)   |         .word nt_pick, xt_bell, 0064f5 
4742:088 | DONE dir | na 16 16 |        |             |                 18 6e ef 64 f5 64        --  . n . d . d
4742:089 | DONE dir | na 16 16 | 006e2c | (4 bytes)   |         .byte 62, 65, 6c, 6c         
4742:089 | DONE dir | na 16 16 |        |             |                 62 65 6c 6c              --  b e l l
4742:090 | DONE wsp | na 16 16 |        |             |
4742:091 | DONE lbl | na 16 16 | 006e30 |             | nt_chars                             
4742:092 | DONE dir | na 16 16 | 006e30 | (2 bytes)   |         .byte 5, { NC }              
4742:092 | DONE dir | na 16 16 |        |             |                 05 01                    --  . .
4742:093 | DONE dir | na 16 16 | 006e32 | (6 bytes)   |         .word nt_bell, xt_chars, 00656d 
4742:093 | DONE dir | na 16 16 |        |             |                 24 6e 6c 65 6d 65        --  $ n l e m e
4742:094 | DONE dir | na 16 16 | 006e38 | (5 bytes)   |         .byte 63, 68, 61, 72, 73     
4742:094 | DONE dir | na 16 16 |        |             |                 63 68 61 72 73           --  c h a r s
4742:095 | DONE wsp | na 16 16 |        |             |
4742:096 | DONE lbl | na 16 16 | 006e3d |             | nt_cellplus                          
4742:097 | DONE dir | na 16 16 | 006e3d | (2 bytes)   |         .byte 5, { NC }              
4742:097 | DONE dir | na 16 16 |        |             |                 05 01                    --  . .
4742:098 | DONE dir | na 16 16 | 006e3f | (6 bytes)   |         .word nt_chars, xt_cellplus, 006553 
4742:098 | DONE dir | na 16 16 |        |             |                 30 6e 51 65 53 65        --  0 n Q e S e
4742:099 | DONE dir | na 16 16 | 006e45 | (5 bytes)   |         .byte 63, 65, 6c, 6c, 2b     
4742:099 | DONE dir | na 16 16 |        |             |                 63 65 6c 6c 2b           --  c e l l +
4742:100 | DONE wsp | na 16 16 |        |             |
4742:101 | DONE lbl | na 16 16 | 006e4a |             | nt_charplus                          
4742:102 | DONE dir | na 16 16 | 006e4a | (2 bytes)   |         .byte 5, { NC }              uses code of 1+
4742:102 | DONE dir | na 16 16 |        |             |                 05 01                    --  . .
4742:103 | DONE dir | na 16 16 | 006e4c | (6 bytes)   |         .word nt_cellplus, xt_one-plus, 00637d 
4742:103 | DONE dir | na 16 16 |        |             |                 3d 6e 7c 63 7d 63        --  = n | c } c
4742:104 | DONE dir | na 16 16 | 006e52 | (5 bytes)   |         .byte 63, 68, 61, 72, 2b     
4742:104 | DONE dir | na 16 16 |        |             |                 63 68 61 72 2b           --  c h a r +
4742:105 | DONE wsp | na 16 16 |        |             |
4742:106 | DONE lbl | na 16 16 | 006e57 |             | nt_decimal                           
4742:107 | DONE dir | na 16 16 | 006e57 | (2 bytes)   |         .byte 7, { NC }              
4742:107 | DONE dir | na 16 16 |        |             |                 07 01                    --  . .
4742:108 | DONE dir | na 16 16 | 006e59 | (6 bytes)   |         .word nt_charplus, xt_decimal, 0066a4 
4742:108 | DONE dir | na 16 16 |        |             |                 4a 6e 9f 66 a4 66        --  J n . f . f
4742:109 | DONE dir | na 16 16 | 006e5f | (7 bytes)   |         .byte 64, 65, 63, 69, 6d, 61, 6c 
4742:109 | DONE dir | na 16 16 |        |             |                 64 65 63 69 6d 61 6c     --  d e c i m a l
4742:110 | DONE wsp | na 16 16 |        |             |
4742:111 | DONE lbl | na 16 16 | 006e66 |             | nt_hex                               
4742:112 | DONE dir | na 16 16 | 006e66 | (2 bytes)   |         .byte 3, { NC }              
4742:112 | DONE dir | na 16 16 |        |             |                 03 01                    --  . .
4742:113 | DONE dir | na 16 16 | 006e68 | (6 bytes)   |         .word nt_decimal, xt_hex, 006841 
4742:113 | DONE dir | na 16 16 |        |             |                 57 6e 3c 68 41 68        --  W n < h A h
4742:114 | DONE dir | na 16 16 | 006e6e | (3 bytes)   |         .byte 68, 65, 78             
4742:114 | DONE dir | na 16 16 |        |             |                 68 65 78                 --  h e x
4742:115 | DONE wsp | na 16 16 |        |             |
4742:116 | DONE lbl | na 16 16 | 006e71 |             | nt_unused                            
4742:117 | DONE dir | na 16 16 | 006e71 | (2 bytes)   |         .byte 6, { NC }              
4742:117 | DONE dir | na 16 16 |        |             |                 06 01                    --  . .
4742:118 | DONE dir | na 16 16 | 006e73 | (6 bytes)   |         .word nt_hex, xt_unused, 006d59 
4742:118 | DONE dir | na 16 16 |        |             |                 66 6e 4e 6d 59 6d        --  f n N m Y m
4742:119 | DONE dir | na 16 16 | 006e79 | (6 bytes)   |         .byte 75, 6e, 75, 73, 65, 64 
4742:119 | DONE dir | na 16 16 |        |             |                 75 6e 75 73 65 64        --  u n u s e d
4742:120 | DONE wsp | na 16 16 |        |             |
4742:121 | DONE lbl | na 16 16 | 006e7f |             | nt_page                              
4742:122 | DONE dir | na 16 16 | 006e7f | (2 bytes)   |         .byte 4, { NC }              
4742:122 | DONE dir | na 16 16 |        |             |                 04 01                    --  . .
4742:123 | DONE dir | na 16 16 | 006e81 | (6 bytes)   |         .word nt_unused, xt_page, 0069e9 
4742:123 | DONE dir | na 16 16 |        |             |                 71 6e dd 69 e9 69        --  q n . i . i
4742:124 | DONE dir | na 16 16 | 006e87 | (4 bytes)   |         .byte 70, 61, 67, 65         
4742:124 | DONE dir | na 16 16 |        |             |                 70 61 67 65              --  p a g e
4742:125 | DONE wsp | na 16 16 |        |             |
4742:126 | DONE lbl | na 16 16 | 006e8b |             | nt_tworfetch                         
4742:127 | DONE dir | na 16 16 | 006e8b | (2 bytes)   |         .byte 3, 00                  not natively compiled
4742:127 | DONE dir | na 16 16 |        |             |                 03 00                    --  . .
4742:128 | DONE dir | na 16 16 | 006e8d | (6 bytes)   |         .word nt_page, xt_tworfetch, 0063b6 
4742:128 | DONE dir | na 16 16 |        |             |                 7f 6e a9 63 b6 63        --  . n . c . c
4742:129 | DONE dir | na 16 16 | 006e93 | (3 bytes)   |         .byte 32, 72, 40             
4742:129 | DONE dir | na 16 16 |        |             |                 32 72 40                 --  2 r @
4742:130 | DONE wsp | na 16 16 |        |             |
4742:131 | DONE lbl | na 16 16 | 006e96 |             | nt_2variable                         
4742:132 | DONE dir | na 16 16 | 006e96 | (2 bytes)   |         .byte 9, { NC }              
4742:132 | DONE dir | na 16 16 |        |             |                 09 01                    --  	 .
4742:133 | DONE dir | na 16 16 | 006e98 | (6 bytes)   |         .word nt_tworfetch, xt_2variable, 0063da 
4742:133 | DONE dir | na 16 16 |        |             |                 8b 6e c8 63 da 63        --  . n . c . c
4742:134 | DONE dir | na 16 16 | 006e9e | (9 bytes)   |         .byte 32, 76, 61, 72, 69, 61, 62, 6c, 65 
4742:134 | DONE dir | na 16 16 |        |             |                 32 76 61 72 69 61 62 6c  --  2 v a r i a b l
4742:134 | DONE dir | na 16 16 |        |             |                 65                       --  e
4742:135 | DONE wsp | na 16 16 |        |             |
4742:136 | DONE lbl | na 16 16 | 006ea7 |             | nt_dabs                              
4742:137 | DONE dir | na 16 16 | 006ea7 | (2 bytes)   |         .byte 4, { NC }              
4742:137 | DONE dir | na 16 16 |        |             |                 04 01                    --  . .
4742:138 | DONE dir | na 16 16 | 006ea9 | (6 bytes)   |         .word nt_2variable, xt_dabs, 00669e 
4742:138 | DONE dir | na 16 16 |        |             |                 96 6e 98 66 9e 66        --  . n . f . f
4742:139 | DONE dir | na 16 16 | 006eaf | (4 bytes)   |         .byte 64, 61, 62, 73         
4742:139 | DONE dir | na 16 16 |        |             |                 64 61 62 73              --  d a b s
4742:140 | DONE wsp | na 16 16 |        |             |
4742:141 | DONE lbl | na 16 16 | 006eb3 |             | nt_dnegate                           
4742:142 | DONE dir | na 16 16 | 006eb3 | (2 bytes)   |         .byte 7, { NC }              
4742:142 | DONE dir | na 16 16 |        |             |                 07 01                    --  . .
4742:143 | DONE dir | na 16 16 | 006eb5 | (6 bytes)   |         .word nt_dabs, xt_dnegate, 0066c7 
4742:143 | DONE dir | na 16 16 |        |             |                 a7 6e b4 66 c7 66        --  . n . f . f
4742:144 | DONE dir | na 16 16 | 006ebb | (7 bytes)   |         .byte 64, 6e, 65, 67, 61, 74, 65 
4742:144 | DONE dir | na 16 16 |        |             |                 64 6e 65 67 61 74 65     --  d n e g a t e
4742:145 | DONE wsp | na 16 16 |        |             |
4742:146 | DONE lbl | na 16 16 | 006ec2 |             | nt_dtos                              
4742:147 | DONE dir | na 16 16 | 006ec2 | (2 bytes)   |         .byte 3, { NC }              
4742:147 | DONE dir | na 16 16 |        |             |                 03 01                    --  . .
4742:148 | DONE dir | na 16 16 | 006ec4 | (6 bytes)   |         .word nt_dnegate, xt_dtos, 006697 
4742:148 | DONE dir | na 16 16 |        |             |                 b3 6e 93 66 97 66        --  . n . f . f
4742:149 | DONE dir | na 16 16 | 006eca | (3 bytes)   |         .byte 64, 3e, 73             
4742:149 | DONE dir | na 16 16 |        |             |                 64 3e 73                 --  d > s
4742:150 | DONE wsp | na 16 16 |        |             |
4742:151 | DONE lbl | na 16 16 | 006ecd |             | nt_stod                              
4742:152 | DONE dir | na 16 16 | 006ecd | (2 bytes)   |         .byte 3, { NC }              
4742:152 | DONE dir | na 16 16 |        |             |                 03 01                    --  . .
4742:153 | DONE dir | na 16 16 | 006ecf | (6 bytes)   |         .word nt_dtos, xt_stod, 006b3f 
4742:153 | DONE dir | na 16 16 |        |             |                 c2 6e 30 6b 3f 6b        --  . n 0 k ? k
4742:154 | DONE dir | na 16 16 | 006ed5 | (3 bytes)   |         .byte 73, 3e, 64             
4742:154 | DONE dir | na 16 16 |        |             |                 73 3e 64                 --  s > d
4742:155 | DONE wsp | na 16 16 |        |             |
4742:156 | DONE lbl | na 16 16 | 006ed8 |             | nt_dminus                            
4742:157 | DONE dir | na 16 16 | 006ed8 | (2 bytes)   |         .byte 2, { NC }              
4742:157 | DONE dir | na 16 16 |        |             |                 02 01                    --  . .
4742:158 | DONE dir | na 16 16 | 006eda | (6 bytes)   |         .word nt_stod, xt_dminus, 006692 
4742:158 | DONE dir | na 16 16 |        |             |                 cd 6e 7e 66 92 66        --  . n ~ f . f
4742:159 | DONE dir | na 16 16 | 006ee0 | (2 bytes)   |         .byte 64, 2d                 
4742:159 | DONE dir | na 16 16 |        |             |                 64 2d                    --  d -
4742:160 | DONE wsp | na 16 16 |        |             |
4742:161 | DONE lbl | na 16 16 | 006ee2 |             | nt_dplus                             
4742:162 | DONE dir | na 16 16 | 006ee2 | (2 bytes)   |         .byte 2, { NC }              
4742:162 | DONE dir | na 16 16 |        |             |                 02 01                    --  . .
4742:163 | DONE dir | na 16 16 | 006ee4 | (6 bytes)   |         .word nt_dminus, xt_dplus, 00667d 
4742:163 | DONE dir | na 16 16 |        |             |                 d8 6e 6c 66 7d 66        --  . n l f } f
4742:164 | DONE dir | na 16 16 | 006eea | (2 bytes)   |         .byte 64, 2b                 
4742:164 | DONE dir | na 16 16 |        |             |                 64 2b                    --  d +
4742:165 | DONE wsp | na 16 16 |        |             |
4742:166 | DONE lbl | na 16 16 | 006eec |             | nt_fmmod                             
4742:167 | DONE dir | na 16 16 | 006eec | (2 bytes)   |         .byte 6, { NC }              
4742:167 | DONE dir | na 16 16 |        |             |                 06 01                    --  . .
4742:168 | DONE dir | na 16 16 | 006eee | (6 bytes)   |         .word nt_dplus, xt_fmmod, 006825 
4742:168 | DONE dir | na 16 16 |        |             |                 e2 6e d2 67 25 68        --  . n . g % h
4742:169 | DONE dir | na 16 16 | 006ef4 | (6 bytes)   |         .byte 66, 6d, 2f, 6d, 6f, 64 
4742:169 | DONE dir | na 16 16 |        |             |                 66 6d 2f 6d 6f 64        --  f m / m o d
4742:170 | DONE wsp | na 16 16 |        |             |
4742:171 | DONE lbl | na 16 16 | 006efa |             | nt_smrem                             
4742:172 | DONE dir | na 16 16 | 006efa | (2 bytes)   |         .byte 6, { NC }              
4742:172 | DONE dir | na 16 16 |        |             |                 06 01                    --  . .
4742:173 | DONE dir | na 16 16 | 006efc | (6 bytes)   |         .word nt_fmmod, xt_smrem, 006c08 
4742:173 | DONE dir | na 16 16 |        |             |                 ec 6e af 6b 08 6c        --  . n . k . l
4742:174 | DONE dir | na 16 16 | 006f02 | (6 bytes)   |         .byte 73, 6d, 2f, 72, 65, 6d 
4742:174 | DONE dir | na 16 16 |        |             |                 73 6d 2f 72 65 6d        --  s m / r e m
4742:175 | DONE wsp | na 16 16 |        |             |
4742:176 | DONE lbl | na 16 16 | 006f08 |             | nt_udmod                             
4742:177 | DONE dir | na 16 16 | 006f08 | (2 bytes)   |         .byte 6, { NC }              
4742:177 | DONE dir | na 16 16 |        |             |                 06 01                    --  . .
4742:178 | DONE dir | na 16 16 | 006f0a | (6 bytes)   |         .word nt_smrem, xt_udmod, 006c9e 
4742:178 | DONE dir | na 16 16 |        |             |                 fa 6e 83 6c 9e 6c        --  . n . l . l
4742:179 | DONE dir | na 16 16 | 006f10 | (6 bytes)   |         .byte 75, 64, 2f, 6d, 6f, 64 
4742:179 | DONE dir | na 16 16 |        |             |                 75 64 2f 6d 6f 64        --  u d / m o d
4742:180 | DONE wsp | na 16 16 |        |             |
4742:181 | DONE lbl | na 16 16 | 006f16 |             | nt_ummod                             
4742:182 | DONE dir | na 16 16 | 006f16 | (2 bytes)   |         .byte 6, { NC }              
4742:182 | DONE dir | na 16 16 |        |             |                 06 01                    --  . .
4742:183 | DONE dir | na 16 16 | 006f18 | (6 bytes)   |         .word nt_udmod, xt_ummod, 006d4d 
4742:183 | DONE dir | na 16 16 |        |             |                 08 6f fd 6c 4d 6d        --  . o . l M m
4742:184 | DONE dir | na 16 16 | 006f1e | (6 bytes)   |         .byte 75, 6d, 2f, 6d, 6f, 64 
4742:184 | DONE dir | na 16 16 |        |             |                 75 6d 2f 6d 6f 64        --  u m / m o d
4742:185 | DONE wsp | na 16 16 |        |             |
4742:186 | DONE lbl | na 16 16 | 006f24 |             | nt_star                              
4742:187 | DONE dir | na 16 16 | 006f24 | (2 bytes)   |         .byte 1, { NC }              
4742:187 | DONE dir | na 16 16 |        |             |                 01 01                    --  . .
4742:188 | DONE dir | na 16 16 | 006f26 | (6 bytes)   |         .word nt_ummod, xt_star, 006c38 
4742:188 | DONE dir | na 16 16 |        |             |                 16 6f 31 6c 38 6c        --  . o 1 l 8 l
4742:189 | DONE dir | na 16 16 | 006f2c | (1 bytes)   |         .byte 2a                     
4742:189 | DONE dir | na 16 16 |        |             |                 2a                       --  *
4742:190 | DONE wsp | na 16 16 |        |             |
4742:191 | DONE lbl | na 16 16 | 006f2d |             | nt_mstar                             
4742:192 | DONE dir | na 16 16 | 006f2d | (2 bytes)   |         .byte 2, { NC }              
4742:192 | DONE dir | na 16 16 |        |             |                 02 01                    --  . .
4742:193 | DONE dir | na 16 16 | 006f2f | (6 bytes)   |         .word nt_star, xt_mstar, 0068ba 
4742:193 | DONE dir | na 16 16 |        |             |                 24 6f 9b 68 ba 68        --  $ o . h . h
4742:194 | DONE dir | na 16 16 | 006f35 | (2 bytes)   |         .byte 6d, 2a                 
4742:194 | DONE dir | na 16 16 |        |             |                 6d 2a                    --  m *
4742:195 | DONE wsp | na 16 16 |        |             |
4742:196 | DONE lbl | na 16 16 | 006f37 |             | nt_umstar                            
4742:197 | DONE dir | na 16 16 | 006f37 | (2 bytes)   |         .byte 3, { NC }              
4742:197 | DONE dir | na 16 16 |        |             |                 03 01                    --  . .
4742:198 | DONE dir | na 16 16 | 006f39 | (6 bytes)   |         .word nt_mstar, xt_umstar, 006cfc 
4742:198 | DONE dir | na 16 16 |        |             |                 2d 6f 9e 6c fc 6c        --  - o . l . l
4742:199 | DONE dir | na 16 16 | 006f3f | (3 bytes)   |         .byte 75, 6d, 2a             
4742:199 | DONE dir | na 16 16 |        |             |                 75 6d 2a                 --  u m *
4742:200 | DONE wsp | na 16 16 |        |             |
4742:201 | DONE lbl | na 16 16 | 006f42 |             | nt_count                             
4742:202 | DONE dir | na 16 16 | 006f42 | (2 bytes)   |         .byte 5, { NC }              
4742:202 | DONE dir | na 16 16 |        |             |                 05 01                    --  . .
4742:203 | DONE dir | na 16 16 | 006f44 | (6 bytes)   |         .word nt_umstar, xt_count, 0065b5 
4742:203 | DONE dir | na 16 16 |        |             |                 37 6f a7 65 b5 65        --  7 o . e . e
4742:204 | DONE dir | na 16 16 | 006f4a | (5 bytes)   |         .byte 63, 6f, 75, 6e, 74     
4742:204 | DONE dir | na 16 16 |        |             |                 63 6f 75 6e 74           --  c o u n t
4742:205 | DONE wsp | na 16 16 |        |             |
4742:206 | DONE lbl | na 16 16 | 006f4f |             | nt_abortq                            
4742:207 | DONE dir | na 16 16 | 006f4f | (2 bytes)   |         .byte 6, { CO + IM }         
4742:207 | DONE dir | na 16 16 |        |             |                 06 06                    --  . .
4742:208 | DONE dir | na 16 16 | 006f51 | (6 bytes)   |         .word nt_count, xt_abortq, 006413 
4742:208 | DONE dir | na 16 16 |        |             |                 42 6f f7 63 13 64        --  B o . c . d
4742:209 | DONE dir | na 16 16 | 006f57 | (6 bytes)   |         .byte 61, 62, 6f, 72, 74, &34 ABORT"
4742:209 | DONE dir | na 16 16 |        |             |                 61 62 6f 72 74 22        --  a b o r t "
4742:210 | DONE wsp | na 16 16 |        |             |
4742:211 | DONE lbl | na 16 16 | 006f5d |             | nt_abort                             
4742:212 | DONE dir | na 16 16 | 006f5d | (2 bytes)   |         .byte 5, 00                  TODO check flags - NC possible?
4742:212 | DONE dir | na 16 16 |        |             |                 05 00                    --  . .
4742:213 | DONE dir | na 16 16 | 006f5f | (6 bytes)   |         .word nt_abortq, xt_abort, 0060de 
4742:213 | DONE dir | na 16 16 |        |             |                 4f 6f 97 60 de 60        --  O o . ` . `
4742:214 | DONE dir | na 16 16 | 006f65 | (5 bytes)   |         .byte 61, 62, 6f, 72, 74     
4742:214 | DONE dir | na 16 16 |        |             |                 61 62 6f 72 74           --  a b o r t
4742:215 | DONE wsp | na 16 16 |        |             |
4742:216 | DONE lbl | na 16 16 | 006f6a |             | nt_parse                             
4742:217 | DONE dir | na 16 16 | 006f6a | (2 bytes)   |         .byte 5, 00                  
4742:217 | DONE dir | na 16 16 |        |             |                 05 00                    --  . .
4742:218 | DONE dir | na 16 16 | 006f6c | (6 bytes)   |         .word nt_abort, xt_parse, 006a4e 
4742:218 | DONE dir | na 16 16 |        |             |                 5d 6f 1c 6a 4e 6a        --  ] o . j N j
4742:219 | DONE dir | na 16 16 | 006f72 | (5 bytes)   |         .byte 70, 61, 72, 73, 65     
4742:219 | DONE dir | na 16 16 |        |             |                 70 61 72 73 65           --  p a r s e
4742:220 | DONE wsp | na 16 16 |        |             |
4742:221 | DONE lbl | na 16 16 | 006f77 |             | nt_quit                              
4742:222 | DONE dir | na 16 16 | 006f77 | (2 bytes)   |         .byte 4, 00                  
4742:222 | DONE dir | na 16 16 |        |             |                 04 00                    --  . .
4742:223 | DONE dir | na 16 16 | 006f79 | (6 bytes)   |         .word nt_parse, xt_quit, 0060de 
4742:223 | DONE dir | na 16 16 |        |             |                 6a 6f 9f 60 de 60        --  j o . ` . `
4742:224 | DONE dir | na 16 16 | 006f7f | (4 bytes)   |         .byte 71, 75, 69, 74         
4742:224 | DONE dir | na 16 16 |        |             |                 71 75 69 74              --  q u i t
4742:225 | DONE wsp | na 16 16 |        |             |
4742:226 | DONE lbl | na 16 16 | 006f83 |             | nt_question                          
4742:227 | DONE dir | na 16 16 | 006f83 | (2 bytes)   |         .byte 1, { NC }              
4742:227 | DONE dir | na 16 16 |        |             |                 01 01                    --  . .
4742:228 | DONE dir | na 16 16 | 006f85 | (6 bytes)   |         .word nt_quit, xt_question, 0062a9 
4742:228 | DONE dir | na 16 16 |        |             |                 77 6f a3 62 a9 62        --  w o . b . b
4742:229 | DONE dir | na 16 16 | 006f8b | (1 bytes)   |         .byte 3f                     
4742:229 | DONE dir | na 16 16 |        |             |                 3f                       --  ?
4742:230 | DONE wsp | na 16 16 |        |             |
4742:231 | DONE lbl | na 16 16 | 006f8c |             | nt_name-int                          
4742:232 | DONE dir | na 16 16 | 006f8c | (2 bytes)   |         .byte 8, { NC }              
4742:232 | DONE dir | na 16 16 |        |             |                 08 01                    --  . .
4742:233 | DONE dir | na 16 16 | 006f8e | (6 bytes)   |         .word nt_question, xt_name-int, 00691a 
4742:233 | DONE dir | na 16 16 |        |             |                 83 6f 12 69 1a 69        --  . o . i . i
4742:234 | DONE dir | na 16 16 | 006f94 | (8 bytes)   |         .byte 6e, 61, 6d, 65, 3e, 69, 6e, 74 
4742:234 | DONE dir | na 16 16 |        |             |                 6e 61 6d 65 3e 69 6e 74  --  n a m e > i n t
4742:234 | DONE dir | na 16 16 |        |             |                                          -- 
4742:235 | DONE wsp | na 16 16 |        |             |
4742:236 | DONE lbl | na 16 16 | 006f9c |             | nt_cr                                
4742:237 | DONE dir | na 16 16 | 006f9c | (2 bytes)   |         .byte 2, { NC }              
4742:237 | DONE dir | na 16 16 |        |             |                 02 01                    --  . .
4742:238 | DONE dir | na 16 16 | 006f9e | (6 bytes)   |         .word nt_name-int, xt_cr, 0065bc 
4742:238 | DONE dir | na 16 16 |        |             |                 8c 6f b6 65 bc 65        --  . o . e . e
4742:239 | DONE dir | na 16 16 | 006fa4 | (2 bytes)   |         .byte 63, 72                 
4742:239 | DONE dir | na 16 16 |        |             |                 63 72                    --  c r
4742:240 | DONE wsp | na 16 16 |        |             |
4742:241 | DONE lbl | na 16 16 | 006fa6 |             | nt_fill                              
4742:242 | DONE dir | na 16 16 | 006fa6 | (2 bytes)   |         .byte 4, { NC }              
4742:242 | DONE dir | na 16 16 |        |             |                 04 01                    --  . .
4742:243 | DONE dir | na 16 16 | 006fa8 | (6 bytes)   |         .word nt_cr, xt_fill, 00673d 
4742:243 | DONE dir | na 16 16 |        |             |                 9c 6f 23 67 3d 67        --  . o # g = g
4742:244 | DONE dir | na 16 16 | 006fae | (4 bytes)   |         .byte 66, 69, 6c, 6c         
4742:244 | DONE dir | na 16 16 |        |             |                 66 69 6c 6c              --  f i l l
4742:245 | DONE wsp | na 16 16 |        |             |
4742:246 | DONE lbl | na 16 16 | 006fb2 |             | nt_erase                             
4742:247 | DONE dir | na 16 16 | 006fb2 | (2 bytes)   |         .byte 5, { NC }              
4742:247 | DONE dir | na 16 16 |        |             |                 05 01                    --  . .
4742:248 | DONE dir | na 16 16 | 006fb4 | (6 bytes)   |         .word nt_fill, xt_erase, 00673d 
4742:248 | DONE dir | na 16 16 |        |             |                 a6 6f 1c 67 3d 67        --  . o . g = g
4742:249 | DONE dir | na 16 16 | 006fba | (5 bytes)   |         .byte 65, 72, 61, 73, 65     
4742:249 | DONE dir | na 16 16 |        |             |                 65 72 61 73 65           --  e r a s e
4742:250 | DONE wsp | na 16 16 |        |             |
4742:251 | DONE lbl | na 16 16 | 006fbf |             | nt_numbermore                        
4742:252 | DONE dir | na 16 16 | 006fbf | (2 bytes)   |         .byte 2, { NC }              "quoth the rumben"
4742:252 | DONE dir | na 16 16 |        |             |                 02 01                    --  . .
4742:253 | DONE dir | na 16 16 | 006fc1 | (6 bytes)   |         .word nt_erase, xt_numbermore, 006299 
4742:253 | DONE dir | na 16 16 |        |             |                 b2 6f 8b 62 99 62        --  . o . b . b
4742:254 | DONE dir | na 16 16 | 006fc7 | (2 bytes)   |         .byte 23, 3e                 
4742:254 | DONE dir | na 16 16 |        |             |                 23 3e                    --  # >
4742:255 | DONE wsp | na 16 16 |        |             |
4742:256 | DONE lbl | na 16 16 | 006fc9 |             | nt_hold                              
4742:257 | DONE dir | na 16 16 | 006fc9 | (2 bytes)   |         .byte 4, { NC }              
4742:257 | DONE dir | na 16 16 |        |             |                 04 01                    --  . .
4742:258 | DONE dir | na 16 16 | 006fcb | (6 bytes)   |         .word nt_numbermore, xt_hold, 00684f 
4742:258 | DONE dir | na 16 16 |        |             |                 bf 6f 42 68 4f 68        --  . o B h O h
4742:259 | DONE dir | na 16 16 | 006fd1 | (4 bytes)   |         .byte 68, 6f, 6c, 64         
4742:259 | DONE dir | na 16 16 |        |             |                 68 6f 6c 64              --  h o l d
4742:260 | DONE wsp | na 16 16 |        |             |
4742:261 | DONE lbl | na 16 16 | 006fd5 |             | nt_hashs                             
4742:262 | DONE dir | na 16 16 | 006fd5 | (2 bytes)   |         .byte 2, { NC }              also known as "number-s"
4742:262 | DONE dir | na 16 16 |        |             |                 02 01                    --  . .
4742:263 | DONE dir | na 16 16 | 006fd7 | (6 bytes)   |         .word nt_hold, xt_hashs, 0062a2 
4742:263 | DONE dir | na 16 16 |        |             |                 c9 6f 9a 62 a2 62        --  . o . b . b
4742:264 | DONE dir | na 16 16 | 006fdd | (2 bytes)   |         .byte 23, 73                 
4742:264 | DONE dir | na 16 16 |        |             |                 23 73                    --  # s
4742:265 | DONE wsp | na 16 16 |        |             |
4742:266 | DONE lbl | na 16 16 | 006fdf |             | nt_sign                              
4742:267 | DONE dir | na 16 16 | 006fdf | (2 bytes)   |         .byte 4, { NC }              
4742:267 | DONE dir | na 16 16 |        |             |                 04 01                    --  . .
4742:268 | DONE dir | na 16 16 | 006fe1 | (6 bytes)   |         .word nt_hashs, xt_sign, 006b4d 
4742:268 | DONE dir | na 16 16 |        |             |                 d5 6f 40 6b 4d 6b        --  . o @ k M k
4742:269 | DONE dir | na 16 16 | 006fe7 | (4 bytes)   |         .byte 73, 69, 67, 6e         
4742:269 | DONE dir | na 16 16 |        |             |                 73 69 67 6e              --  s i g n
4742:270 | DONE wsp | na 16 16 |        |             |
4742:271 | DONE lbl | na 16 16 | 006feb |             | nt_hash                              
4742:272 | DONE dir | na 16 16 | 006feb | (2 bytes)   |         .byte 1, { NC }              also known as "number-sign"
4742:272 | DONE dir | na 16 16 |        |             |                 01 01                    --  . .
4742:273 | DONE dir | na 16 16 | 006fed | (6 bytes)   |         .word nt_sign, xt_hash, 00628a 
4742:273 | DONE dir | na 16 16 |        |             |                 df 6f 70 62 8a 62        --  . o p b . b
4742:274 | DONE dir | na 16 16 | 006ff3 | (1 bytes)   |         .byte 23                     
4742:274 | DONE dir | na 16 16 |        |             |                 23                       --  #
4742:275 | DONE wsp | na 16 16 |        |             |
4742:276 | DONE lbl | na 16 16 | 006ff4 |             | nt_lessnumber                        
4742:277 | DONE dir | na 16 16 | 006ff4 | (2 bytes)   |         .byte 2, { NC }              
4742:277 | DONE dir | na 16 16 |        |             |                 02 01                    --  . .
4742:278 | DONE dir | na 16 16 | 006ff6 | (6 bytes)   |         .word nt_hash, xt_lessnumber, 006108 
4742:278 | DONE dir | na 16 16 |        |             |                 eb 6f ff 60 08 61        --  . o . ` . a
4742:279 | DONE dir | na 16 16 | 006ffc | (2 bytes)   |         .byte 3c, 23                 
4742:279 | DONE dir | na 16 16 |        |             |                 3c 23                    --  < #
4742:280 | DONE wsp | na 16 16 |        |             |
4742:281 | DONE lbl | na 16 16 | 006ffe |             | nt_bl                                
4742:282 | DONE dir | na 16 16 | 006ffe | (2 bytes)   |         .byte 2, { NC }              
4742:282 | DONE dir | na 16 16 |        |             |                 02 01                    --  . .
4742:283 | DONE dir | na 16 16 | 007000 | (6 bytes)   |         .word nt_lessnumber, xt_bl, 006504 
4742:283 | DONE dir | na 16 16 |        |             |                 f4 6f fd 64 04 65        --  . o . d . e
4742:284 | DONE dir | na 16 16 | 007006 | (2 bytes)   |         .byte 62, 6c                 
4742:284 | DONE dir | na 16 16 |        |             |                 62 6c                    --  b l
4742:285 | DONE wsp | na 16 16 |        |             |
4742:286 | DONE lbl | na 16 16 | 007008 |             | nt_spaces                            
4742:287 | DONE dir | na 16 16 | 007008 | (2 bytes)   |         .byte 6, { NC }              
4742:287 | DONE dir | na 16 16 |        |             |                 06 01                    --  . .
4742:288 | DONE dir | na 16 16 | 00700a | (6 bytes)   |         .word nt_bl, xt_spaces, 006c30 
4742:288 | DONE dir | na 16 16 |        |             |                 fe 6f 24 6c 30 6c        --  . o $ l 0 l
4742:289 | DONE dir | na 16 16 | 007010 | (6 bytes)   |         .byte 73, 70, 61, 63, 65, 73 
4742:289 | DONE dir | na 16 16 |        |             |                 73 70 61 63 65 73        --  s p a c e s
4742:290 | DONE wsp | na 16 16 |        |             |
4742:291 | DONE lbl | na 16 16 | 007016 |             | nt_space                             
4742:292 | DONE dir | na 16 16 | 007016 | (2 bytes)   |         .byte 5, { NC }              
4742:292 | DONE dir | na 16 16 |        |             |                 05 01                    --  . .
4742:293 | DONE dir | na 16 16 | 007018 | (6 bytes)   |         .word nt_spaces, xt_space, 006c23 
4742:293 | DONE dir | na 16 16 |        |             |                 08 70 1d 6c 23 6c        --  . p . l # l
4742:294 | DONE dir | na 16 16 | 00701e | (5 bytes)   |         .byte 73, 70, 61, 63, 65     
4742:294 | DONE dir | na 16 16 |        |             |                 73 70 61 63 65           --  s p a c e
4742:295 | DONE wsp | na 16 16 |        |             |
4742:296 | DONE lbl | na 16 16 | 007023 |             | nt_dots                              
4742:297 | DONE dir | na 16 16 | 007023 | (2 bytes)   |         .byte 2, { NC }              
4742:297 | DONE dir | na 16 16 |        |             |                 02 01                    --  . .
4742:298 | DONE dir | na 16 16 | 007025 | (6 bytes)   |         .word nt_space, xt_dots, 006228 
4742:298 | DONE dir | na 16 16 |        |             |                 16 70 e1 61 28 62        --  . p . a ( b
4742:299 | DONE dir | na 16 16 | 00702b | (2 bytes)   |         .byte 2e, 73                 
4742:299 | DONE dir | na 16 16 |        |             |                 2e 73                    --  . s
4742:300 | DONE wsp | na 16 16 |        |             |
4742:301 | DONE lbl | na 16 16 | 00702d |             | nt_type                              
4742:302 | DONE dir | na 16 16 | 00702d | (2 bytes)   |         .byte 4, 0                   
4742:302 | DONE dir | na 16 16 |        |             |                 04 00                    --  . .
4742:303 | DONE dir | na 16 16 | 00702f | (6 bytes)   |         .word nt_dots, xt_type, 006c82 
4742:303 | DONE dir | na 16 16 |        |             |                 23 70 62 6c 82 6c        --  # p b l . l
4742:304 | DONE dir | na 16 16 | 007035 | (4 bytes)   |         .byte 74, 79, 70, 65         
4742:304 | DONE dir | na 16 16 |        |             |                 74 79 70 65              --  t y p e
4742:305 | DONE wsp | na 16 16 |        |             |
4742:306 | DONE lbl | na 16 16 | 007039 |             | nt_dot                               
4742:307 | DONE dir | na 16 16 | 007039 | (2 bytes)   |         .byte 1, { NC }              
4742:307 | DONE dir | na 16 16 |        |             |                 01 01                    --  . .
4742:308 | DONE dir | na 16 16 | 00703b | (6 bytes)   |         .word nt_type, xt_dot, 0061be 
4742:308 | DONE dir | na 16 16 |        |             |                 2d 70 a0 61 be 61        --  - p . a . a
4742:309 | DONE dir | na 16 16 | 007041 | (1 bytes)   |         .byte 2e                     
4742:309 | DONE dir | na 16 16 |        |             |                 2e                       --  .
4742:310 | DONE wsp | na 16 16 |        |             |
4742:311 | DONE lbl | na 16 16 | 007042 |             | nt_pad                               
4742:312 | DONE dir | na 16 16 | 007042 | (2 bytes)   |         .byte 3, { NC }              
4742:312 | DONE dir | na 16 16 |        |             |                 03 01                    --  . .
4742:313 | DONE dir | na 16 16 | 007044 | (6 bytes)   |         .word nt_dot, xt_pad, 0069dc 
4742:313 | DONE dir | na 16 16 |        |             |                 39 70 d1 69 dc 69        --  9 p . i . i
4742:314 | DONE dir | na 16 16 | 00704a | (3 bytes)   |         .byte 70, 61, 64             
4742:314 | DONE dir | na 16 16 |        |             |                 70 61 64                 --  p a d
4742:315 | DONE wsp | na 16 16 |        |             |
4742:316 | DONE lbl | na 16 16 | 00704d |             | nt_base                              
4742:317 | DONE dir | na 16 16 | 00704d | (2 bytes)   |         .byte 4, { NC }              
4742:317 | DONE dir | na 16 16 |        |             |                 04 01                    --  . .
4742:318 | DONE dir | na 16 16 | 00704f | (6 bytes)   |         .word nt_pad, xt_base, 0064ee 
4742:318 | DONE dir | na 16 16 |        |             |                 42 70 e7 64 ee 64        --  B p . d . d
4742:319 | DONE dir | na 16 16 | 007055 | (4 bytes)   |         .byte 62, 61, 73, 65         
4742:319 | DONE dir | na 16 16 |        |             |                 62 61 73 65              --  b a s e
4742:320 | DONE wsp | na 16 16 |        |             |
4742:321 | DONE lbl | na 16 16 | 007059 |             | nt_evaluate                          
4742:322 | DONE dir | na 16 16 | 007059 | (2 bytes)   |         .byte 8, { NC }              
4742:322 | DONE dir | na 16 16 |        |             |                 08 01                    --  . .
4742:323 | DONE dir | na 16 16 | 00705b | (6 bytes)   |         .word nt_base, xt_evaluate, 00676c 
4742:323 | DONE dir | na 16 16 |        |             |                 4d 70 3e 67 6c 67        --  M p > g l g
4742:324 | DONE dir | na 16 16 | 007061 | (8 bytes)   |         .byte 65, 76, 61, 6c, 75, 61, 74, 65 
4742:324 | DONE dir | na 16 16 |        |             |                 65 76 61 6c 75 61 74 65  --  e v a l u a t e
4742:324 | DONE dir | na 16 16 |        |             |                                          -- 
4742:325 | DONE wsp | na 16 16 |        |             |
4742:326 | DONE lbl | na 16 16 | 007069 |             | nt_cells                             
4742:327 | DONE dir | na 16 16 | 007069 | (2 bytes)   |         .byte 5, { NC }              2* because we have 16 bit stack
4742:327 | DONE dir | na 16 16 |        |             |                 05 01                    --  . .
4742:328 | DONE dir | na 16 16 | 00706b | (6 bytes)   |         .word nt_evaluate, xt_two-star, 006389 
4742:328 | DONE dir | na 16 16 |        |             |                 59 70 86 63 89 63        --  Y p . c . c
4742:329 | DONE dir | na 16 16 | 007071 | (5 bytes)   |         .byte 63, 65, 6c, 6c, 73     
4742:329 | DONE dir | na 16 16 |        |             |                 63 65 6c 6c 73           --  c e l l s
4742:330 | DONE wsp | na 16 16 |        |             |
4742:331 | DONE lbl | na 16 16 | 007076 |             | nt_dotquote                          
4742:332 | DONE dir | na 16 16 | 007076 | (2 bytes)   |         .byte 2, { CO + NC + IM }    
4742:332 | DONE dir | na 16 16 |        |             |                 02 07                    --  . .
4742:333 | DONE dir | na 16 16 | 007078 | (6 bytes)   |         .word nt_cells, xt_dotquote, 0061e1 
4742:333 | DONE dir | na 16 16 |        |             |                 69 70 cd 61 e1 61        --  i p . a . a
4742:334 | DONE dir | na 16 16 | 00707e | (2 bytes)   |         .byte 2e, &34                
4742:334 | DONE dir | na 16 16 |        |             |                 2e 22                    --  . "
4742:335 | DONE wsp | na 16 16 |        |             |
4742:336 | DONE lbl | na 16 16 | 007080 |             | nt_squote                            
4742:337 | DONE dir | na 16 16 | 007080 | (2 bytes)   |         .byte 2, { IM + NC }         not CO, see source code
4742:337 | DONE dir | na 16 16 |        |             |                 02 03                    --  . .
4742:338 | DONE dir | na 16 16 | 007082 | (6 bytes)   |         .word nt_dotquote, xt_squote, 006b2f 
4742:338 | DONE dir | na 16 16 |        |             |                 76 70 04 6b 2f 6b        --  v p . k / k
4742:339 | DONE dir | na 16 16 | 007088 | (2 bytes)   |         .byte 73, &34                
4742:339 | DONE dir | na 16 16 |        |             |                 73 22                    --  s "
4742:340 | DONE wsp | na 16 16 |        |             |
4742:341 | DONE lbl | na 16 16 | 00708a |             | nt_sliteral                          
4742:342 | DONE dir | na 16 16 | 00708a | (2 bytes)   |         .byte 8, { IM + CO }         
4742:342 | DONE dir | na 16 16 |        |             |                 08 06                    --  . .
4742:343 | DONE dir | na 16 16 | 00708c | (6 bytes)   |         .word nt_squote, xt_sliteral, 006b98 
4742:343 | DONE dir | na 16 16 |        |             |                 80 70 4e 6b 98 6b        --  . p N k . k
4742:344 | DONE dir | na 16 16 | 007092 | (8 bytes)   |         .byte 73, 6c, 69, 74, 65, 72, 61, 6c 
4742:344 | DONE dir | na 16 16 |        |             |                 73 6c 69 74 65 72 61 6c  --  s l i t e r a l
4742:344 | DONE dir | na 16 16 |        |             |                                          -- 
4742:345 | DONE wsp | na 16 16 |        |             |
4742:346 | DONE lbl | na 16 16 | 00709a |             | nt_brackettick                       
4742:347 | DONE dir | na 16 16 | 00709a | (2 bytes)   |         .byte 3, { IM + CO }         
4742:347 | DONE dir | na 16 16 |        |             |                 03 06                    --  . .
4742:348 | DONE dir | na 16 16 | 00709c | (6 bytes)   |         .word nt_sliteral, xt_brackettick, 0062c9 
4742:348 | DONE dir | na 16 16 |        |             |                 8a 70 c3 62 c9 62        --  . p . b . b
4742:349 | DONE dir | na 16 16 | 0070a2 | (3 bytes)   |         .byte 5b, 27, 5d             
4742:349 | DONE dir | na 16 16 |        |             |                 5b 27 5d                 --  [ ' ]
4742:350 | DONE wsp | na 16 16 |        |             |
4742:351 | DONE lbl | na 16 16 | 0070a5 |             | nt_bracketchar                       
4742:352 | DONE dir | na 16 16 | 0070a5 | (2 bytes)   |         .byte 6, { IM + CO }         
4742:352 | DONE dir | na 16 16 |        |             |                 06 06                    --  . .
4742:353 | DONE dir | na 16 16 | 0070a7 | (6 bytes)   |         .word nt_brackettick, xt_bracketchar, 0062d8 
4742:353 | DONE dir | na 16 16 |        |             |                 9a 70 d2 62 d8 62        --  . p . b . b
4742:354 | DONE dir | na 16 16 | 0070ad | (6 bytes)   |         .byte 5b, 63, 68, 61, 72, 5d 
4742:354 | DONE dir | na 16 16 |        |             |                 5b 63 68 61 72 5d        --  [ c h a r ]
4742:355 | DONE wsp | na 16 16 |        |             |
4742:356 | DONE lbl | na 16 16 | 0070b3 |             | nt_literal                           
4742:357 | DONE dir | na 16 16 | 0070b3 | (2 bytes)   |         .byte 7, { IM + CO }         
4742:357 | DONE dir | na 16 16 |        |             |                 07 06                    --  . .
4742:358 | DONE dir | na 16 16 | 0070b5 | (6 bytes)   |         .word nt_bracketchar, xt_literal, 006879 
4742:358 | DONE dir | na 16 16 |        |             |                 a5 70 68 68 79 68        --  . p h h y h
4742:359 | DONE dir | na 16 16 | 0070bb | (7 bytes)   |         .byte 6c, 69, 74, 65, 72, 61, 6c 
4742:359 | DONE dir | na 16 16 |        |             |                 6c 69 74 65 72 61 6c     --  l i t e r a l
4742:360 | DONE wsp | na 16 16 |        |             |
4742:361 | DONE lbl | na 16 16 | 0070c2 |             | nt_native-compile                    
4742:362 | DONE dir | na 16 16 | 0070c2 | (2 bytes)   |         .byte 0e, { NC }             
4742:362 | DONE dir | na 16 16 |        |             |                 0e 01                    --  . .
4742:363 | DONE dir | na 16 16 | 0070c4 | (6 bytes)   |         .word nt_literal, xt_native-compile, 006934 
4742:363 | DONE dir | na 16 16 |        |             |                 b3 70 2c 69 34 69        --  . p , i 4 i
4742:364 | DONE dir | na 16 16 | 0070ca | (14 bytes)  |         .byte 6e, 61, 74, 69, 76, 65, 2d, 63, 6f, 6d, 70, 69, 6c, 65 
4742:364 | DONE dir | na 16 16 |        |             |                 6e 61 74 69 76 65 2d 63  --  n a t i v e - c
4742:364 | DONE dir | na 16 16 |        |             |                 6f 6d 70 69 6c 65        --  o m p i l e
4742:365 | DONE wsp | na 16 16 |        |             |
4742:366 | DONE lbl | na 16 16 | 0070d8 |             | nt_compile-only                      
4742:367 | DONE dir | na 16 16 | 0070d8 | (2 bytes)   |         .byte 0c, { NC }             
4742:367 | DONE dir | na 16 16 |        |             |                 0c 01                    --   .
4742:368 | DONE dir | na 16 16 | 0070da | (6 bytes)   |         .word nt_native-compile, xt_compile-only, 006576 
4742:368 | DONE dir | na 16 16 |        |             |                 c2 70 6e 65 76 65        --  . p n e v e
4742:369 | DONE dir | na 16 16 | 0070e0 | (12 bytes)  |         .byte 63, 6f, 6d, 70, 69, 6c, 65, 2d, 6f, 6e, 6c, 79 
4742:369 | DONE dir | na 16 16 |        |             |                 63 6f 6d 70 69 6c 65 2d  --  c o m p i l e -
4742:369 | DONE dir | na 16 16 |        |             |                 6f 6e 6c 79              --  o n l y
4742:370 | DONE wsp | na 16 16 |        |             |
4742:371 | DONE lbl | na 16 16 | 0070ec |             | nt_immediate                         
4742:372 | DONE dir | na 16 16 | 0070ec | (2 bytes)   |         .byte 9, { NC }              
4742:372 | DONE dir | na 16 16 |        |             |                 09 01                    --  	 .
4742:373 | DONE dir | na 16 16 | 0070ee | (6 bytes)   |         .word nt_compile-only, xt_immediate, 00682e 
4742:373 | DONE dir | na 16 16 |        |             |                 d8 70 26 68 2e 68        --  . p & h . h
4742:374 | DONE dir | na 16 16 | 0070f4 | (9 bytes)   |         .byte 69, 6d, 6d, 65, 64, 69, 61, 74, 65 
4742:374 | DONE dir | na 16 16 |        |             |                 69 6d 6d 65 64 69 61 74  --  i m m e d i a t
4742:374 | DONE dir | na 16 16 |        |             |                 65                       --  e
4742:375 | DONE wsp | na 16 16 |        |             |
4742:376 | DONE lbl | na 16 16 | 0070fd |             | nt_postpone                          
4742:377 | DONE dir | na 16 16 | 0070fd | (2 bytes)   |         .byte 8, { IM + CO }         
4742:377 | DONE dir | na 16 16 |        |             |                 08 06                    --  . .
4742:378 | DONE dir | na 16 16 | 0070ff | (6 bytes)   |         .word nt_immediate, xt_postpone, 006aa2 
4742:378 | DONE dir | na 16 16 |        |             |                 ec 70 6d 6a a2 6a        --  . p m j . j
4742:379 | DONE dir | na 16 16 | 007105 | (8 bytes)   |         .byte 70, 6f, 73, 74, 70, 6f, 6e, 65 
4742:379 | DONE dir | na 16 16 |        |             |                 70 6f 73 74 70 6f 6e 65  --  p o s t p o n e
4742:379 | DONE dir | na 16 16 |        |             |                                          -- 
4742:380 | DONE wsp | na 16 16 |        |             |
4742:381 | DONE lbl | na 16 16 | 00710d |             | nt_rightbracket                      
4742:382 | DONE dir | na 16 16 | 00710d | (2 bytes)   |         .byte 1, { NC }              
4742:382 | DONE dir | na 16 16 |        |             |                 01 01                    --  . .
4742:383 | DONE dir | na 16 16 | 00710f | (6 bytes)   |         .word nt_postpone, xt_rightbracket, 0062d1 
4742:383 | DONE dir | na 16 16 |        |             |                 fd 70 cc 62 d1 62        --  . p . b . b
4742:384 | DONE dir | na 16 16 | 007115 | (1 bytes)   |         .byte 5d                     
4742:384 | DONE dir | na 16 16 |        |             |                 5d                       --  ]
4742:385 | DONE wsp | na 16 16 |        |             |
4742:386 | DONE lbl | na 16 16 | 007116 |             | nt_leftbracket                       
4742:387 | DONE dir | na 16 16 | 007116 | (2 bytes)   |         .byte 1, { IM + CO }         
4742:387 | DONE dir | na 16 16 |        |             |                 01 06                    --  . .
4742:388 | DONE dir | na 16 16 | 007118 | (6 bytes)   |         .word nt_rightbracket, xt_leftbracket, 0062cb 
4742:388 | DONE dir | na 16 16 |        |             |                 0d 71 c9 62 cb 62        --   q . b . b
4742:389 | DONE dir | na 16 16 | 00711e | (1 bytes)   |         .byte 5b                     
4742:389 | DONE dir | na 16 16 |        |             |                 5b                       --  [
4742:390 | DONE wsp | na 16 16 |        |             |
4742:391 | DONE lbl | na 16 16 | 00711f |             | nt_latestnt                          
4742:392 | DONE dir | na 16 16 | 00711f | (2 bytes)   |         .byte 8, { NC }              
4742:392 | DONE dir | na 16 16 |        |             |                 08 01                    --  . .
4742:393 | DONE dir | na 16 16 | 007121 | (6 bytes)   |         .word nt_leftbracket, xt_latestnt, 006857 
4742:393 | DONE dir | na 16 16 |        |             |                 16 71 50 68 57 68        --  . q P h W h
4742:394 | DONE dir | na 16 16 | 007127 | (8 bytes)   |         .byte 6c, 61, 74, 65, 73, 74, 6e, 74 
4742:394 | DONE dir | na 16 16 |        |             |                 6c 61 74 65 73 74 6e 74  --  l a t e s t n t
4742:394 | DONE dir | na 16 16 |        |             |                                          -- 
4742:395 | DONE wsp | na 16 16 |        |             |
4742:396 | DONE lbl | na 16 16 | 00712f |             | nt_latestxt                          
4742:397 | DONE dir | na 16 16 | 00712f | (2 bytes)   |         .byte 8, { NC }              
4742:397 | DONE dir | na 16 16 |        |             |                 08 01                    --  . .
4742:398 | DONE dir | na 16 16 | 007131 | (6 bytes)   |         .word nt_latestnt, xt_latestxt, 006867 
4742:398 | DONE dir | na 16 16 |        |             |                 1f 71 58 68 67 68        --  . q X h g h
4742:399 | DONE dir | na 16 16 | 007137 | (8 bytes)   |         .byte 6c, 61, 74, 65, 73, 74, 78, 74 
4742:399 | DONE dir | na 16 16 |        |             |                 6c 61 74 65 73 74 78 74  --  l a t e s t x t
4742:399 | DONE dir | na 16 16 |        |             |                                          -- 
4742:400 | DONE wsp | na 16 16 |        |             |
4742:401 | DONE lbl | na 16 16 | 00713f |             | nt_dtrailing                         
4742:402 | DONE dir | na 16 16 | 00713f | (2 bytes)   |         .byte 9, { NC }              
4742:402 | DONE dir | na 16 16 |        |             |                 09 01                    --  	 .
4742:403 | DONE dir | na 16 16 | 007141 | (6 bytes)   |         .word nt_latestxt, xt_dtrailing, 006310 
4742:403 | DONE dir | na 16 16 |        |             |                 2f 71 fa 62 10 63        --  / q . b . c
4742:404 | DONE dir | na 16 16 | 007147 | (9 bytes)   |         .byte 2d, 74, 72, 61, 69, 6c, 69, 6e, 67 
4742:404 | DONE dir | na 16 16 |        |             |                 2d 74 72 61 69 6c 69 6e  --  - t r a i l i n
4742:404 | DONE dir | na 16 16 |        |             |                 67                       --  g
4742:405 | DONE wsp | na 16 16 |        |             |
4742:406 | DONE lbl | na 16 16 | 007150 |             | nt_slashstring                       
4742:407 | DONE dir | na 16 16 | 007150 | (2 bytes)   |         .byte 7, { NC }              
4742:407 | DONE dir | na 16 16 |        |             |                 07 01                    --  . .
4742:408 | DONE dir | na 16 16 | 007152 | (6 bytes)   |         .word nt_dtrailing, xt_slashstring, 00619f 
4742:408 | DONE dir | na 16 16 |        |             |                 3f 71 8e 61 9f 61        --  ? q . a . a
4742:409 | DONE dir | na 16 16 | 007158 | (7 bytes)   |         .byte 2f, 73, 74, 72, 69, 6e, 67 
4742:409 | DONE dir | na 16 16 |        |             |                 2f 73 74 72 69 6e 67     --  / s t r i n g
4742:410 | DONE wsp | na 16 16 |        |             |
4742:411 | DONE lbl | na 16 16 | 00715f |             | nt_zbranch                           
4742:412 | DONE dir | na 16 16 | 00715f | (2 bytes)   |         .byte 7, { IM + CO }         
4742:412 | DONE dir | na 16 16 |        |             |                 07 06                    --  . .
4742:413 | DONE dir | na 16 16 | 007161 | (6 bytes)   |         .word nt_slashstring, xt_zbranch, 00635a 
4742:413 | DONE dir | na 16 16 |        |             |                 50 71 54 63 5a 63        --  P q T c Z c
4742:414 | DONE dir | na 16 16 | 007167 | (7 bytes)   |         .byte 30, 62, 72, 61, 6e, 63, 68 
4742:414 | DONE dir | na 16 16 |        |             |                 30 62 72 61 6e 63 68     --  0 b r a n c h
4742:415 | DONE wsp | na 16 16 |        |             |
4742:416 | DONE lbl | na 16 16 | 00716e |             | nt_branch                            
4742:417 | DONE dir | na 16 16 | 00716e | (2 bytes)   |         .byte 6, { IM + CO }         
4742:417 | DONE dir | na 16 16 |        |             |                 06 06                    --  . .
4742:418 | DONE dir | na 16 16 | 007170 | (6 bytes)   |         .word nt_zbranch, xt_branch, 006515 
4742:418 | DONE dir | na 16 16 |        |             |                 5f 71 0f 65 15 65        --  _ q . e . e
4742:419 | DONE dir | na 16 16 | 007176 | (6 bytes)   |         .byte 62, 72, 61, 6e, 63, 68 
4742:419 | DONE dir | na 16 16 |        |             |                 62 72 61 6e 63 68        --  b r a n c h
4742:420 | DONE wsp | na 16 16 |        |             |
4742:421 | DONE lbl | na 16 16 | 00717c |             | nt_again                             
4742:422 | DONE dir | na 16 16 | 00717c | (2 bytes)   |         .byte 5, { IM + NC + CO }    
4742:422 | DONE dir | na 16 16 |        |             |                 05 07                    --  . .
4742:423 | DONE dir | na 16 16 | 00717e | (6 bytes)   |         .word nt_branch, xt_again, 0064b6 
4742:423 | DONE dir | na 16 16 |        |             |                 6e 71 a1 64 b6 64        --  n q . d . d
4742:424 | DONE dir | na 16 16 | 007184 | (5 bytes)   |         .byte 61, 67, 61, 69, 6e     
4742:424 | DONE dir | na 16 16 |        |             |                 61 67 61 69 6e           --  a g a i n
4742:425 | DONE wsp | na 16 16 |        |             |
4742:426 | DONE lbl | na 16 16 | 007189 |             | nt_begin                             
4742:427 | DONE dir | na 16 16 | 007189 | (2 bytes)   |         .byte 5, { IM + NC + CO }    
4742:427 | DONE dir | na 16 16 |        |             |                 05 07                    --  . .
4742:428 | DONE dir | na 16 16 | 00718b | (6 bytes)   |         .word nt_again, xt_begin, 0064fc 
4742:428 | DONE dir | na 16 16 |        |             |                 7c 71 f6 64 fc 64        --  | q . d . d
4742:429 | DONE dir | na 16 16 | 007191 | (5 bytes)   |         .byte 62, 65, 67, 69, 6e     
4742:429 | DONE dir | na 16 16 |        |             |                 62 65 67 69 6e           --  b e g i n
4742:430 | DONE wsp | na 16 16 |        |             |
4742:431 | DONE lbl | na 16 16 | 007196 |             | nt_compilecomma                      
4742:432 | DONE dir | na 16 16 | 007196 | (2 bytes)   |         .byte 08, { CO }             
4742:432 | DONE dir | na 16 16 |        |             |                 08 04                    --  . .
4742:433 | DONE dir | na 16 16 | 007198 | (6 bytes)   |         .word nt_begin, xt_compilecomma, 00658c 
4742:433 | DONE dir | na 16 16 |        |             |                 89 71 77 65 8c 65        --  . q w e . e
4742:434 | DONE dir | na 16 16 | 00719e | (8 bytes)   |         .byte 63, 6f, 6d, 70, 69, 6c, 65, 2c 
4742:434 | DONE dir | na 16 16 |        |             |                 63 6f 6d 70 69 6c 65 2c  --  c o m p i l e ,
4742:434 | DONE dir | na 16 16 |        |             |                                          -- 
4742:435 | DONE wsp | na 16 16 |        |             |
4742:436 | DONE lbl | na 16 16 | 0071a6 |             | nt_semicolon                         
4742:437 | DONE dir | na 16 16 | 0071a6 | (2 bytes)   |         .byte 1, { CO + IM }         
4742:437 | DONE dir | na 16 16 |        |             |                 01 06                    --  . .
4742:438 | DONE dir | na 16 16 | 0071a8 | (6 bytes)   |         .word nt_compilecomma, xt_semicolon, 00626f 
4742:438 | DONE dir | na 16 16 |        |             |                 96 71 57 62 6f 62        --  . q W b o b
4742:439 | DONE dir | na 16 16 | 0071ae | (1 bytes)   |         .byte 3b                     
4742:439 | DONE dir | na 16 16 |        |             |                 3b                       --  ;
4742:440 | DONE wsp | na 16 16 |        |             |
4742:441 | DONE lbl | na 16 16 | 0071af |             | nt_colon                             
4742:442 | DONE dir | na 16 16 | 0071af | (2 bytes)   |         .byte 1, { NC }              
4742:442 | DONE dir | na 16 16 |        |             |                 01 01                    --  . .
4742:443 | DONE dir | na 16 16 | 0071b1 | (6 bytes)   |         .word nt_semicolon, xt_colon, 006256 
4742:443 | DONE dir | na 16 16 |        |             |                 a6 71 35 62 56 62        --  . q 5 b V b
4742:444 | DONE dir | na 16 16 | 0071b7 | (1 bytes)   |         .byte 3a                     
4742:444 | DONE dir | na 16 16 |        |             |                 3a                       --  :
4742:445 | DONE wsp | na 16 16 |        |             |
4742:446 | DONE lbl | na 16 16 | 0071b8 |             | nt_allot                             
4742:447 | DONE dir | na 16 16 | 0071b8 | (2 bytes)   |         .byte 5, { NC }              
4742:447 | DONE dir | na 16 16 |        |             |                 05 01                    --  . .
4742:448 | DONE dir | na 16 16 | 0071ba | (6 bytes)   |         .word nt_colon, xt_allot, 0064df 
4742:448 | DONE dir | na 16 16 |        |             |                 af 71 b7 64 df 64        --  . q . d . d
4742:449 | DONE dir | na 16 16 | 0071c0 | (5 bytes)   |         .byte 61, 6c, 6c, 6f, 74     
4742:449 | DONE dir | na 16 16 |        |             |                 61 6c 6c 6f 74           --  a l l o t
4742:450 | DONE wsp | na 16 16 |        |             |
4742:451 | DONE lbl | na 16 16 | 0071c5 |             | nt_tobody                            
4742:452 | DONE dir | na 16 16 | 0071c5 | (2 bytes)   |         .byte 5, { NC }              
4742:452 | DONE dir | na 16 16 |        |             |                 05 01                    --  . .
4742:453 | DONE dir | na 16 16 | 0071c7 | (6 bytes)   |         .word nt_allot, xt_tobody, 006120 
4742:453 | DONE dir | na 16 16 |        |             |                 b8 71 1d 61 20 61        --  . q . a   a
4742:454 | DONE dir | na 16 16 | 0071cd | (5 bytes)   |         .byte 3e, 62, 6f, 64, 79     
4742:454 | DONE dir | na 16 16 |        |             |                 3e 62 6f 64 79           --  > b o d y
4742:455 | DONE wsp | na 16 16 |        |             |
4742:456 | DONE lbl | na 16 16 | 0071d2 |             | nt_does                              
4742:457 | DONE dir | na 16 16 | 0071d2 | (2 bytes)   |         .byte 5, { IM + CO }         
4742:457 | DONE dir | na 16 16 |        |             |                 05 06                    --  . .
4742:458 | DONE dir | na 16 16 | 0071d4 | (6 bytes)   |         .word nt_tobody, xt_does, 0066d4 
4742:458 | DONE dir | na 16 16 |        |             |                 c5 71 c8 66 d4 66        --  . q . f . f
4742:459 | DONE dir | na 16 16 | 0071da | (5 bytes)   |         .byte 64, 6f, 65, 73, 3e     
4742:459 | DONE dir | na 16 16 |        |             |                 64 6f 65 73 3e           --  d o e s >
4742:460 | DONE wsp | na 16 16 |        |             |
4742:461 | DONE lbl | na 16 16 | 0071df |             | nt_create                            
4742:462 | DONE dir | na 16 16 | 0071df | (2 bytes)   |         .byte 6, { NC }              
4742:462 | DONE dir | na 16 16 |        |             |                 06 01                    --  . .
4742:463 | DONE dir | na 16 16 | 0071e1 | (6 bytes)   |         .word nt_does, xt_create, 00662f 
4742:463 | DONE dir | na 16 16 |        |             |                 d2 71 bd 65 2f 66        --  . q . e / f
4742:464 | DONE dir | na 16 16 | 0071e7 | (6 bytes)   |         .byte 63, 72, 65, 61, 74, 65 
4742:464 | DONE dir | na 16 16 |        |             |                 63 72 65 61 74 65        --  c r e a t e
4742:465 | DONE wsp | na 16 16 |        |             |
4742:466 | DONE lbl | na 16 16 | 0071ed |             | nt_name-string                       
4742:467 | DONE dir | na 16 16 | 0071ed | (2 bytes)   |         .byte 0b, { NC }             
4742:467 | DONE dir | na 16 16 |        |             |                 0b 01                    --   .
4742:468 | DONE dir | na 16 16 | 0071ef | (6 bytes)   |         .word nt_create, xt_name-string, 00692b 
4742:468 | DONE dir | na 16 16 |        |             |                 df 71 1b 69 2b 69        --  . q . i + i
4742:469 | DONE dir | na 16 16 | 0071f5 | (11 bytes)  |         .byte 6e, 61, 6d, 65, 3e, 73, 74, 72, 69, 6e, 67 
4742:469 | DONE dir | na 16 16 |        |             |                 6e 61 6d 65 3e 73 74 72  --  n a m e > s t r
4742:469 | DONE dir | na 16 16 |        |             |                 69 6e 67                 --  i n g
4742:470 | DONE wsp | na 16 16 |        |             |
4742:471 | DONE lbl | na 16 16 | 007200 |             | nt_2dup                              
4742:472 | DONE dir | na 16 16 | 007200 | (2 bytes)   |         .byte 4, { NC }              
4742:472 | DONE dir | na 16 16 |        |             |                 04 01                    --  . .
4742:473 | DONE dir | na 16 16 | 007202 | (6 bytes)   |         .word nt_name-string, xt_2dup, 00639b 
4742:473 | DONE dir | na 16 16 |        |             |                 ed 71 91 63 9b 63        --  . q . c . c
4742:474 | DONE dir | na 16 16 | 007208 | (4 bytes)   |         .byte 32, 64, 75, 70         
4742:474 | DONE dir | na 16 16 |        |             |                 32 64 75 70              --  2 d u p
4742:475 | DONE wsp | na 16 16 |        |             |
4742:476 | DONE lbl | na 16 16 | 00720c |             | nt_abs                               
4742:477 | DONE dir | na 16 16 | 00720c | (2 bytes)   |         .byte 3, { NC }              
4742:477 | DONE dir | na 16 16 |        |             |                 03 01                    --  . .
4742:478 | DONE dir | na 16 16 | 00720e | (6 bytes)   |         .word nt_2dup, xt_abs, 00641c 
4742:478 | DONE dir | na 16 16 |        |             |                 00 72 14 64 1c 64        --  . r . d . d
4742:479 | DONE dir | na 16 16 | 007214 | (3 bytes)   |         .byte 61, 62, 73             
4742:479 | DONE dir | na 16 16 |        |             |                 61 62 73                 --  a b s
4742:480 | DONE wsp | na 16 16 |        |             |
4742:481 | DONE lbl | na 16 16 | 007217 |             | nt_state                             
4742:482 | DONE dir | na 16 16 | 007217 | (2 bytes)   |         .byte 5, { NC }              
4742:482 | DONE dir | na 16 16 |        |             |                 05 01                    --  . .
4742:483 | DONE dir | na 16 16 | 007219 | (6 bytes)   |         .word nt_abs, xt_state, 006c40 
4742:483 | DONE dir | na 16 16 |        |             |                 0c 72 39 6c 40 6c        --   r 9 l @ l
4742:484 | DONE dir | na 16 16 | 00721f | (5 bytes)   |         .byte 73, 74, 61, 74, 65     
4742:484 | DONE dir | na 16 16 |        |             |                 73 74 61 74 65           --  s t a t e
4742:485 | DONE wsp | na 16 16 |        |             |
4742:486 | DONE lbl | na 16 16 | 007224 |             | nt_to-in                             
4742:487 | DONE dir | na 16 16 | 007224 | (2 bytes)   |         .byte 3, { NC }              
4742:487 | DONE dir | na 16 16 |        |             |                 03 01                    --  . .
4742:488 | DONE dir | na 16 16 | 007226 | (6 bytes)   |         .word nt_state, xt_to-in, 006128 
4742:488 | DONE dir | na 16 16 |        |             |                 17 72 21 61 28 61        --  . r ! a ( a
4742:489 | DONE dir | na 16 16 | 00722c | (3 bytes)   |         .byte 3e, 69, 6e             
4742:489 | DONE dir | na 16 16 |        |             |                 3e 69 6e                 --  > i n
4742:490 | DONE wsp | na 16 16 |        |             |
4742:491 | DONE lbl | na 16 16 | 00722f |             | nt_source                            
4742:492 | DONE dir | na 16 16 | 00722f | (2 bytes)   |         .byte 6, { NC }              
4742:492 | DONE dir | na 16 16 |        |             |                 06 01                    --  . .
4742:493 | DONE dir | na 16 16 | 007231 | (6 bytes)   |         .word nt_to-in, xt_source, 006c15 
4742:493 | DONE dir | na 16 16 |        |             |                 24 72 09 6c 15 6c        --  $ r 	 l . l
4742:494 | DONE dir | na 16 16 | 007237 | (6 bytes)   |         .byte 73, 6f, 75, 72, 63, 65 
4742:494 | DONE dir | na 16 16 |        |             |                 73 6f 75 72 63 65        --  s o u r c e
4742:495 | DONE wsp | na 16 16 |        |             |
4742:496 | DONE lbl | na 16 16 | 00723d |             | nt_depth                             
4742:497 | DONE dir | na 16 16 | 00723d | (2 bytes)   |         .byte 5, { NC }              
4742:497 | DONE dir | na 16 16 |        |             |                 05 01                    --  . .
4742:498 | DONE dir | na 16 16 | 00723f | (6 bytes)   |         .word nt_source, xt_depth, 0066b3 
4742:498 | DONE dir | na 16 16 |        |             |                 2f 72 a5 66 b3 66        --  / r . f . f
4742:499 | DONE dir | na 16 16 | 007245 | (5 bytes)   |         .byte 64, 65, 70, 74, 68     
4742:499 | DONE dir | na 16 16 |        |             |                 64 65 70 74 68           --  d e p t h
4742:500 | DONE wsp | na 16 16 |        |             |
4742:501 | DONE lbl | na 16 16 | 00724a |             | nt_to                                
4742:502 | DONE dir | na 16 16 | 00724a | (2 bytes)   |         .byte 2, { NC }              
4742:502 | DONE dir | na 16 16 |        |             |                 02 01                    --  . .
4742:503 | DONE dir | na 16 16 | 00724c | (6 bytes)   |         .word nt_depth, xt_to, 006c50 
4742:503 | DONE dir | na 16 16 |        |             |                 3d 72 47 6c 50 6c        --  = r G l P l
4742:504 | DONE dir | na 16 16 | 007252 | (2 bytes)   |         .byte 74, 6f                 
4742:504 | DONE dir | na 16 16 |        |             |                 74 6f                    --  t o
4742:505 | DONE wsp | na 16 16 |        |             |
4742:506 | DONE lbl | na 16 16 | 007254 |             | nt_value                             
4742:507 | DONE dir | na 16 16 | 007254 | (2 bytes)   |         .byte 5, { NC }              uses routines of CONSTANT
4742:507 | DONE dir | na 16 16 |        |             |                 05 01                    --  . .
4742:508 | DONE dir | na 16 16 | 007256 | (6 bytes)   |         .word nt_to, xt_constant, 0065a6 
4742:508 | DONE dir | na 16 16 |        |             |                 4a 72 8d 65 a6 65        --  J r . e . e
4742:509 | DONE dir | na 16 16 | 00725c | (5 bytes)   |         .byte 76, 61, 6c, 75, 65     
4742:509 | DONE dir | na 16 16 |        |             |                 76 61 6c 75 65           --  v a l u e
4742:510 | DONE wsp | na 16 16 |        |             |
4742:511 | DONE lbl | na 16 16 | 007261 |             | nt_constant                          
4742:512 | DONE dir | na 16 16 | 007261 | (2 bytes)   |         .byte 8, { NC }              
4742:512 | DONE dir | na 16 16 |        |             |                 08 01                    --  . .
4742:513 | DONE dir | na 16 16 | 007263 | (6 bytes)   |         .word nt_value, xt_constant, 0065a6 
4742:513 | DONE dir | na 16 16 |        |             |                 54 72 8d 65 a6 65        --  T r . e . e
4742:514 | DONE dir | na 16 16 | 007269 | (8 bytes)   |         .byte 63, 6f, 6e, 73, 74, 61, 6e, 74 
4742:514 | DONE dir | na 16 16 |        |             |                 63 6f 6e 73 74 61 6e 74  --  c o n s t a n t
4742:514 | DONE dir | na 16 16 |        |             |                                          -- 
4742:515 | DONE wsp | na 16 16 |        |             |
4742:516 | DONE lbl | na 16 16 | 007271 |             | nt_variable                          
4742:517 | DONE dir | na 16 16 | 007271 | (2 bytes)   |         .byte 8, { NC }              
4742:517 | DONE dir | na 16 16 |        |             |                 08 01                    --  . .
4742:518 | DONE dir | na 16 16 | 007273 | (6 bytes)   |         .word nt_constant, xt_variable, 006d66 
4742:518 | DONE dir | na 16 16 |        |             |                 61 72 5a 6d 66 6d        --  a r Z m f m
4742:519 | DONE dir | na 16 16 | 007279 | (8 bytes)   |         .byte 76, 61, 72, 69, 61, 62, 6c, 65 
4742:519 | DONE dir | na 16 16 |        |             |                 76 61 72 69 61 62 6c 65  --  v a r i a b l e
4742:519 | DONE dir | na 16 16 |        |             |                                          -- 
4742:520 | DONE wsp | na 16 16 |        |             |
4742:521 | DONE lbl | na 16 16 | 007281 |             | nt_tick                              
4742:522 | DONE dir | na 16 16 | 007281 | (2 bytes)   |         .byte 1, { NC }              
4742:522 | DONE dir | na 16 16 |        |             |                 01 01                    --  . .
4742:523 | DONE dir | na 16 16 | 007283 | (6 bytes)   |         .word nt_variable, xt_tick, 0063f6 
4742:523 | DONE dir | na 16 16 |        |             |                 71 72 db 63 f6 63        --  q r . c . c
4742:524 | DONE dir | na 16 16 | 007289 | (1 bytes)   |         .byte 27                     hex for "'"
4742:524 | DONE dir | na 16 16 |        |             |                 27                       --  '
4742:525 | DONE wsp | na 16 16 |        |             |
4742:526 | DONE lbl | na 16 16 | 00728a |             | nt_move                              
4742:527 | DONE dir | na 16 16 | 00728a | (2 bytes)   |         .byte 4, { NC }              
4742:527 | DONE dir | na 16 16 |        |             |                 04 01                    --  . .
4742:528 | DONE dir | na 16 16 | 00728c | (6 bytes)   |         .word nt_tick, xt_move, 006911 
4742:528 | DONE dir | na 16 16 |        |             |                 81 72 e1 68 11 69        --  . r . h . i
4742:529 | DONE dir | na 16 16 | 007292 | (4 bytes)   |         .byte 6d, 6f, 76, 65         
4742:529 | DONE dir | na 16 16 |        |             |                 6d 6f 76 65              --  m o v e
4742:530 | DONE wsp | na 16 16 |        |             |
4742:531 | DONE lbl | na 16 16 | 007296 |             | nt_min                               
4742:532 | DONE dir | na 16 16 | 007296 | (2 bytes)   |         .byte 3, { NC }              
4742:532 | DONE dir | na 16 16 |        |             |                 03 01                    --  . .
4742:533 | DONE dir | na 16 16 | 007298 | (6 bytes)   |         .word nt_move, xt_min, 0068e0 
4742:533 | DONE dir | na 16 16 |        |             |                 8a 72 ce 68 e0 68        --  . r . h . h
4742:534 | DONE dir | na 16 16 | 00729e | (3 bytes)   |         .byte 6d, 69, 6e             
4742:534 | DONE dir | na 16 16 |        |             |                 6d 69 6e                 --  m i n
4742:535 | DONE wsp | na 16 16 |        |             |
4742:536 | DONE lbl | na 16 16 | 0072a1 |             | nt_max                               
4742:537 | DONE dir | na 16 16 | 0072a1 | (2 bytes)   |         .byte 3, { NC }              
4742:537 | DONE dir | na 16 16 |        |             |                 03 01                    --  . .
4742:538 | DONE dir | na 16 16 | 0072a3 | (6 bytes)   |         .word nt_min, xt_max, 0068cd 
4742:538 | DONE dir | na 16 16 |        |             |                 96 72 bb 68 cd 68        --  . r . h . h
4742:539 | DONE dir | na 16 16 | 0072a9 | (3 bytes)   |         .byte 6d, 61, 78             
4742:539 | DONE dir | na 16 16 |        |             |                 6d 61 78                 --  m a x
4742:540 | DONE wsp | na 16 16 |        |             |
4742:541 | DONE lbl | na 16 16 | 0072ac |             | nt_negate                            
4742:542 | DONE dir | na 16 16 | 0072ac | (2 bytes)   |         .byte 6, { NC }              
4742:542 | DONE dir | na 16 16 |        |             |                 06 01                    --  . .
4742:543 | DONE dir | na 16 16 | 0072ae | (6 bytes)   |         .word nt_max, xt_negate, 00693b 
4742:543 | DONE dir | na 16 16 |        |             |                 a1 72 35 69 3b 69        --  . r 5 i ; i
4742:544 | DONE dir | na 16 16 | 0072b4 | (6 bytes)   |         .byte 6e, 65, 67, 61, 74, 65 
4742:544 | DONE dir | na 16 16 |        |             |                 6e 65 67 61 74 65        --  n e g a t e
4742:545 | DONE wsp | na 16 16 |        |             |
4742:546 | DONE lbl | na 16 16 | 0072ba |             | nt_invert                            
4742:547 | DONE dir | na 16 16 | 0072ba | (2 bytes)   |         .byte 6, { NC }              
4742:547 | DONE dir | na 16 16 |        |             |                 06 01                    --  . .
4742:548 | DONE dir | na 16 16 | 0072bc | (6 bytes)   |         .word nt_negate, xt_invert, 006834 
4742:548 | DONE dir | na 16 16 |        |             |                 ac 72 2f 68 34 68        --  . r / h 4 h
4742:549 | DONE dir | na 16 16 | 0072c2 | (6 bytes)   |         .byte 69, 6e, 76, 65, 72, 74 
4742:549 | DONE dir | na 16 16 |        |             |                 69 6e 76 65 72 74        --  i n v e r t
4742:550 | DONE wsp | na 16 16 |        |             |
4742:551 | DONE lbl | na 16 16 | 0072c8 |             | nt_char                              
4742:552 | DONE dir | na 16 16 | 0072c8 | (2 bytes)   |         .byte 4, { NC }              
4742:552 | DONE dir | na 16 16 |        |             |                 04 01                    --  . .
4742:553 | DONE dir | na 16 16 | 0072ca | (6 bytes)   |         .word nt_invert, xt_char, 00656b 
4742:553 | DONE dir | na 16 16 |        |             |                 ba 72 54 65 6b 65        --  . r T e k e
4742:554 | DONE dir | na 16 16 | 0072d0 | (4 bytes)   |         .byte 63, 68, 61, 72         
4742:554 | DONE dir | na 16 16 |        |             |                 63 68 61 72              --  c h a r
4742:555 | DONE wsp | na 16 16 |        |             |
4742:556 | DONE lbl | na 16 16 | 0072d4 |             | nt_rshift                            
4742:557 | DONE dir | na 16 16 | 0072d4 | (2 bytes)   |         .byte 6, { NC }              
4742:557 | DONE dir | na 16 16 |        |             |                 06 01                    --  . .
4742:558 | DONE dir | na 16 16 | 0072d6 | (6 bytes)   |         .word nt_char, xt_rshift, 006b03 
4742:558 | DONE dir | na 16 16 |        |             |                 c8 72 f0 6a 03 6b        --  . r . j . k
4742:559 | DONE dir | na 16 16 | 0072dc | (6 bytes)   |         .byte 72, 73, 68, 69, 66, 74 
4742:559 | DONE dir | na 16 16 |        |             |                 72 73 68 69 66 74        --  r s h i f t
4742:560 | DONE wsp | na 16 16 |        |             |
4742:561 | DONE lbl | na 16 16 | 0072e2 |             | nt_xor                               
4742:562 | DONE dir | na 16 16 | 0072e2 | (2 bytes)   |         .byte 3, { NC }              
4742:562 | DONE dir | na 16 16 |        |             |                 03 01                    --  . .
4742:563 | DONE dir | na 16 16 | 0072e4 | (6 bytes)   |         .word nt_rshift, xt_xor, 006dc4 
4742:563 | DONE dir | na 16 16 |        |             |                 d4 72 be 6d c4 6d        --  . r . m . m
4742:564 | DONE dir | na 16 16 | 0072ea | (3 bytes)   |         .byte 78, 6f, 72             
4742:564 | DONE dir | na 16 16 |        |             |                 78 6f 72                 --  x o r
4742:565 | DONE wsp | na 16 16 |        |             |
4742:566 | DONE lbl | na 16 16 | 0072ed |             | nt_or                                
4742:567 | DONE dir | na 16 16 | 0072ed | (2 bytes)   |         .byte 2, { NC }              
4742:567 | DONE dir | na 16 16 |        |             |                 02 01                    --  . .
4742:568 | DONE dir | na 16 16 | 0072ef | (6 bytes)   |         .word nt_xor, xt_or, 0069c9  
4742:568 | DONE dir | na 16 16 |        |             |                 e2 72 c3 69 c9 69        --  . r . i . i
4742:569 | DONE dir | na 16 16 | 0072f5 | (2 bytes)   |         .byte 6f, 72                 
4742:569 | DONE dir | na 16 16 |        |             |                 6f 72                    --  o r
4742:570 | DONE wsp | na 16 16 |        |             |
4742:571 | DONE lbl | na 16 16 | 0072f7 |             | nt_and                               
4742:572 | DONE dir | na 16 16 | 0072f7 | (2 bytes)   |         .byte 3, { NC }              
4742:572 | DONE dir | na 16 16 |        |             |                 03 01                    --  . .
4742:573 | DONE dir | na 16 16 | 0072f9 | (6 bytes)   |         .word nt_or, xt_and, 0064e6  
4742:573 | DONE dir | na 16 16 |        |             |                 ed 72 e0 64 e6 64        --  . r . d . d
4742:574 | DONE dir | na 16 16 | 0072ff | (3 bytes)   |         .byte 61, 6e, 64             
4742:574 | DONE dir | na 16 16 |        |             |                 61 6e 64                 --  a n d
4742:575 | DONE wsp | na 16 16 |        |             |
4742:576 | DONE lbl | na 16 16 | 007302 |             | nt_lshift                            
4742:577 | DONE dir | na 16 16 | 007302 | (2 bytes)   |         .byte 6, { NC }              
4742:577 | DONE dir | na 16 16 |        |             |                 06 01                    --  . .
4742:578 | DONE dir | na 16 16 | 007304 | (6 bytes)   |         .word nt_and, xt_lshift, 00689a 
4742:578 | DONE dir | na 16 16 |        |             |                 f7 72 87 68 9a 68        --  . r . h . h
4742:579 | DONE dir | na 16 16 | 00730a | (6 bytes)   |         .byte 6c, 73, 68, 69, 66, 74 
4742:579 | DONE dir | na 16 16 |        |             |                 6c 73 68 69 66 74        --  l s h i f t
4742:580 | DONE wsp | na 16 16 |        |             |
4742:581 | DONE lbl | na 16 16 | 007310 |             | nt_plusstore                         
4742:582 | DONE dir | na 16 16 | 007310 | (2 bytes)   |         .byte 2, { NC }              
4742:582 | DONE dir | na 16 16 |        |             |                 02 01                    --  . .
4742:583 | DONE dir | na 16 16 | 007312 | (6 bytes)   |         .word nt_lshift, xt_plusstore, 006a6c 
4742:583 | DONE dir | na 16 16 |        |             |                 02 73 5d 6a 6c 6a        --  . s ] j l j
4742:584 | DONE dir | na 16 16 | 007318 | (2 bytes)   |         .byte 2b, 21                 
4742:584 | DONE dir | na 16 16 |        |             |                 2b 21                    --  + !
4742:585 | DONE wsp | na 16 16 |        |             |
4742:586 | DONE lbl | na 16 16 | 00731a |             | nt_c-comma                           
4742:587 | DONE dir | na 16 16 | 00731a | (2 bytes)   |         .byte 2, { NC }              
4742:587 | DONE dir | na 16 16 |        |             |                 02 01                    --  . .
4742:588 | DONE dir | na 16 16 | 00731c | (6 bytes)   |         .word nt_plusstore, xt_c-comma, 006534 
4742:588 | DONE dir | na 16 16 |        |             |                 10 73 27 65 34 65        --  . s ' e 4 e
4742:589 | DONE dir | na 16 16 | 007322 | (2 bytes)   |         .byte 63, 2c                 
4742:589 | DONE dir | na 16 16 |        |             |                 63 2c                    --  c ,
4742:590 | DONE wsp | na 16 16 |        |             |
4742:591 | DONE lbl | na 16 16 | 007324 |             | nt_c-fetch                           
4742:592 | DONE dir | na 16 16 | 007324 | (2 bytes)   |         .byte 2, { NC }              
4742:592 | DONE dir | na 16 16 |        |             |                 02 01                    --  . .
4742:593 | DONE dir | na 16 16 | 007326 | (6 bytes)   |         .word nt_c-comma, xt_c-fetch, 006540 
4742:593 | DONE dir | na 16 16 |        |             |                 1a 73 35 65 40 65        --  . s 5 e @ e
4742:594 | DONE dir | na 16 16 | 00732c | (2 bytes)   |         .byte 63, 40                 
4742:594 | DONE dir | na 16 16 |        |             |                 63 40                    --  c @
4742:595 | DONE wsp | na 16 16 |        |             |
4742:596 | DONE lbl | na 16 16 | 00732e |             | nt_c-store                           
4742:597 | DONE dir | na 16 16 | 00732e | (2 bytes)   |         .byte 2, { NC }              
4742:597 | DONE dir | na 16 16 |        |             |                 02 01                    --  . .
4742:598 | DONE dir | na 16 16 | 007330 | (6 bytes)   |         .word nt_c-fetch, xt_c-store, 006550 
4742:598 | DONE dir | na 16 16 |        |             |                 24 73 41 65 50 65        --  $ s A e P e
4742:599 | DONE dir | na 16 16 | 007336 | (2 bytes)   |         .byte 63, 21                 
4742:599 | DONE dir | na 16 16 |        |             |                 63 21                    --  c !
4742:600 | DONE wsp | na 16 16 |        |             |
4742:601 | DONE lbl | na 16 16 | 007338 |             | nt_two-star                          
4742:602 | DONE dir | na 16 16 | 007338 | (2 bytes)   |         .byte 2, { NC }              
4742:602 | DONE dir | na 16 16 |        |             |                 02 01                    --  . .
4742:603 | DONE dir | na 16 16 | 00733a | (6 bytes)   |         .word nt_c-store, xt_two-star, 006389 
4742:603 | DONE dir | na 16 16 |        |             |                 2e 73 86 63 89 63        --  . s . c . c
4742:604 | DONE dir | na 16 16 | 007340 | (2 bytes)   |         .byte 32, 2a                 
4742:604 | DONE dir | na 16 16 |        |             |                 32 2a                    --  2 *
4742:605 | DONE wsp | na 16 16 |        |             |
4742:606 | DONE lbl | na 16 16 | 007342 |             | nt_minus                             
4742:607 | DONE dir | na 16 16 | 007342 | (2 bytes)   |         .byte 1, { NC }              
4742:607 | DONE dir | na 16 16 |        |             |                 01 01                    --  . .
4742:608 | DONE dir | na 16 16 | 007344 | (6 bytes)   |         .word nt_two-star, xt_minus, 0062f0 
4742:608 | DONE dir | na 16 16 |        |             |                 38 73 e6 62 f0 62        --  8 s . b . b
4742:609 | DONE dir | na 16 16 | 00734a | (1 bytes)   |         .byte 2d                     
4742:609 | DONE dir | na 16 16 |        |             |                 2d                       --  -
4742:610 | DONE wsp | na 16 16 |        |             |
4742:611 | DONE lbl | na 16 16 | 00734b |             | nt_plus                              
4742:612 | DONE dir | na 16 16 | 00734b | (2 bytes)   |         .byte 1, { NC }              
4742:612 | DONE dir | na 16 16 |        |             |                 01 01                    --  . .
4742:613 | DONE dir | na 16 16 | 00734d | (6 bytes)   |         .word nt_minus, xt_plus, 0062e5 
4742:613 | DONE dir | na 16 16 |        |             |                 42 73 de 62 e5 62        --  B s . b . b
4742:614 | DONE dir | na 16 16 | 007353 | (1 bytes)   |         .byte 2b                     
4742:614 | DONE dir | na 16 16 |        |             |                 2b                       --  +
4742:615 | DONE wsp | na 16 16 |        |             |
4742:616 | DONE lbl | na 16 16 | 007354 |             | nt_one-minus                         
4742:617 | DONE dir | na 16 16 | 007354 | (2 bytes)   |         .byte 2, { NC }              
4742:617 | DONE dir | na 16 16 |        |             |                 02 01                    --  . .
4742:618 | DONE dir | na 16 16 | 007356 | (6 bytes)   |         .word nt_plus, xt_one-minus, 00637b 
4742:618 | DONE dir | na 16 16 |        |             |                 4b 73 7a 63 7b 63        --  K s z c { c
4742:619 | DONE dir | na 16 16 | 00735c | (2 bytes)   |         .byte 31, 2d                 
4742:619 | DONE dir | na 16 16 |        |             |                 31 2d                    --  1 -
4742:620 | DONE wsp | na 16 16 |        |             |
4742:621 | DONE lbl | na 16 16 | 00735e |             | nt_one-plus                          
4742:622 | DONE dir | na 16 16 | 00735e | (2 bytes)   |         .byte 2, { NC }              
4742:622 | DONE dir | na 16 16 |        |             |                 02 01                    --  . .
4742:623 | DONE dir | na 16 16 | 007360 | (6 bytes)   |         .word nt_one-minus, xt_one-plus, 00637d 
4742:623 | DONE dir | na 16 16 |        |             |                 54 73 7c 63 7d 63        --  T s | c } c
4742:624 | DONE dir | na 16 16 | 007366 | (2 bytes)   |         .byte 31, 2b                 
4742:624 | DONE dir | na 16 16 |        |             |                 31 2b                    --  1 +
4742:625 | DONE wsp | na 16 16 |        |             |
4742:626 | DONE lbl | na 16 16 | 007368 |             | nt_zero-notequal                     
4742:627 | DONE dir | na 16 16 | 007368 | (2 bytes)   |         .byte 3, { NC }              
4742:627 | DONE dir | na 16 16 |        |             |                 03 01                    --  . .
4742:628 | DONE dir | na 16 16 | 00736a | (6 bytes)   |         .word nt_one-plus, xt_zero-notequal, 006348 
4742:628 | DONE dir | na 16 16 |        |             |                 5e 73 3d 63 48 63        --  ^ s = c H c
4742:629 | DONE dir | na 16 16 | 007370 | (3 bytes)   |         .byte 30, 3c, 3e             
4742:629 | DONE dir | na 16 16 |        |             |                 30 3c 3e                 --  0 < >
4742:630 | DONE wsp | na 16 16 |        |             |
4742:631 | DONE lbl | na 16 16 | 007373 |             | nt_zero-more                         
4742:632 | DONE dir | na 16 16 | 007373 | (2 bytes)   |         .byte 2, { NC }              
4742:632 | DONE dir | na 16 16 |        |             |                 02 01                    --  . .
4742:633 | DONE dir | na 16 16 | 007375 | (6 bytes)   |         .word nt_zero-notequal, xt_zero-more, 006353 
4742:633 | DONE dir | na 16 16 |        |             |                 68 73 49 63 53 63        --  h s I c S c
4742:634 | DONE dir | na 16 16 | 00737b | (2 bytes)   |         .byte 30, 3e                 
4742:634 | DONE dir | na 16 16 |        |             |                 30 3e                    --  0 >
4742:635 | DONE wsp | na 16 16 |        |             |
4742:636 | DONE lbl | na 16 16 | 00737d |             | nt_zero-less                         
4742:637 | DONE dir | na 16 16 | 00737d | (2 bytes)   |         .byte 2, { NC }              
4742:637 | DONE dir | na 16 16 |        |             |                 02 01                    --  . .
4742:638 | DONE dir | na 16 16 | 00737f | (6 bytes)   |         .word nt_zero-more, xt_zero-less, 00633c 
4742:638 | DONE dir | na 16 16 |        |             |                 73 73 31 63 3c 63        --  s s 1 c < c
4742:639 | DONE dir | na 16 16 | 007385 | (2 bytes)   |         .byte 30, 3c                 
4742:639 | DONE dir | na 16 16 |        |             |                 30 3c                    --  0 <
4742:640 | DONE wsp | na 16 16 |        |             |
4742:641 | DONE lbl | na 16 16 | 007387 |             | nt_greater                           
4742:642 | DONE dir | na 16 16 | 007387 | (2 bytes)   |         .byte 1, { NC }              
4742:642 | DONE dir | na 16 16 |        |             |                 01 01                    --  . .
4742:643 | DONE dir | na 16 16 | 007389 | (6 bytes)   |         .word nt_zero-less, xt_greater, 00611c 
4742:643 | DONE dir | na 16 16 |        |             |                 7d 73 09 61 1c 61        --  } s 	 a . a
4742:644 | DONE dir | na 16 16 | 00738f | (1 bytes)   |         .byte 3e                     
4742:644 | DONE dir | na 16 16 |        |             |                 3e                       --  >
4742:645 | DONE wsp | na 16 16 |        |             |
4742:646 | DONE lbl | na 16 16 | 007390 |             | nt_less                              
4742:647 | DONE dir | na 16 16 | 007390 | (2 bytes)   |         .byte 1, { NC }              
4742:647 | DONE dir | na 16 16 |        |             |                 01 01                    --  . .
4742:648 | DONE dir | na 16 16 | 007392 | (6 bytes)   |         .word nt_greater, xt_less, 0060f2 
4742:648 | DONE dir | na 16 16 |        |             |                 87 73 df 60 f2 60        --  . s . ` . `
4742:649 | DONE dir | na 16 16 | 007398 | (1 bytes)   |         .byte 3c                     
4742:649 | DONE dir | na 16 16 |        |             |                 3c                       --  <
4742:650 | DONE wsp | na 16 16 |        |             |
4742:651 | DONE lbl | na 16 16 | 007399 |             | nt_zero-equal                        
4742:652 | DONE dir | na 16 16 | 007399 | (2 bytes)   |         .byte 2, { NC }              
4742:652 | DONE dir | na 16 16 |        |             |                 02 01                    --  . .
4742:653 | DONE dir | na 16 16 | 00739b | (6 bytes)   |         .word nt_less, xt_zero-equal, 006330 
4742:653 | DONE dir | na 16 16 |        |             |                 90 73 25 63 30 63        --  . s % c 0 c
4742:654 | DONE dir | na 16 16 | 0073a1 | (2 bytes)   |         .byte 30, 3d                 
4742:654 | DONE dir | na 16 16 |        |             |                 30 3d                    --  0 =
4742:655 | DONE wsp | na 16 16 |        |             |
4742:656 | DONE lbl | na 16 16 | 0073a3 |             | nt_not-equal                         
4742:657 | DONE dir | na 16 16 | 0073a3 | (2 bytes)   |         .byte 2, { NC }              
4742:657 | DONE dir | na 16 16 |        |             |                 02 01                    --  . .
4742:658 | DONE dir | na 16 16 | 0073a5 | (6 bytes)   |         .word nt_zero-equal, xt_not-equal, 0060fe 
4742:658 | DONE dir | na 16 16 |        |             |                 99 73 f3 60 fe 60        --  . s . ` . `
4742:659 | DONE dir | na 16 16 | 0073ab | (2 bytes)   |         .byte 3c, 3e                 
4742:659 | DONE dir | na 16 16 |        |             |                 3c 3e                    --  < >
4742:660 | DONE wsp | na 16 16 |        |             |
4742:661 | DONE lbl | na 16 16 | 0073ad |             | nt_equal                             
4742:662 | DONE dir | na 16 16 | 0073ad | (2 bytes)   |         .byte 1, { NC }              
4742:662 | DONE dir | na 16 16 |        |             |                 01 01                    --  . .
4742:663 | DONE dir | na 16 16 | 0073af | (6 bytes)   |         .word nt_not-equal, xt_equal, 00631c 
4742:663 | DONE dir | na 16 16 |        |             |                 a3 73 11 63 1c 63        --  . s . c . c
4742:664 | DONE dir | na 16 16 | 0073b5 | (1 bytes)   |         .byte 3d                     
4742:664 | DONE dir | na 16 16 |        |             |                 3d                       --  =
4742:665 | DONE wsp | na 16 16 |        |             |
4742:666 | DONE lbl | na 16 16 | 0073b6 |             | nt_false                             
4742:667 | DONE dir | na 16 16 | 0073b6 | (2 bytes)   |         .byte 5, { NC }              
4742:667 | DONE dir | na 16 16 |        |             |                 05 01                    --  . .
4742:668 | DONE dir | na 16 16 | 0073b8 | (6 bytes)   |         .word nt_equal, xt_zero, 006324 
4742:668 | DONE dir | na 16 16 |        |             |                 ad 73 1d 63 24 63        --  . s . c $ c
4742:669 | DONE dir | na 16 16 | 0073be | (5 bytes)   |         .byte 66, 61, 6c, 73, 65     
4742:669 | DONE dir | na 16 16 |        |             |                 66 61 6c 73 65           --  f a l s e
4742:670 | DONE wsp | na 16 16 |        |             |
4742:671 | DONE lbl | na 16 16 | 0073c3 |             | nt_true                              
4742:672 | DONE dir | na 16 16 | 0073c3 | (2 bytes)   |         .byte 4, { NC }              
4742:672 | DONE dir | na 16 16 |        |             |                 04 01                    --  . .
4742:673 | DONE dir | na 16 16 | 0073c5 | (6 bytes)   |         .word nt_false, xt_true, 006c58 
4742:673 | DONE dir | na 16 16 |        |             |                 b6 73 51 6c 58 6c        --  . s Q l X l
4742:674 | DONE dir | na 16 16 | 0073cb | (4 bytes)   |         .byte 74, 72, 75, 65         
4742:674 | DONE dir | na 16 16 |        |             |                 74 72 75 65              --  t r u e
4742:675 | DONE wsp | na 16 16 |        |             |
4742:676 | DONE lbl | na 16 16 | 0073cf |             | nt_tonumber                          
4742:677 | DONE dir | na 16 16 | 0073cf | (2 bytes)   |         .byte 7, { NC }              see if actually NC
4742:677 | DONE dir | na 16 16 |        |             |                 07 01                    --  . .
4742:678 | DONE dir | na 16 16 | 0073d1 | (6 bytes)   |         .word nt_true, xt_tonumber, 006185 
4742:678 | DONE dir | na 16 16 |        |             |                 c3 73 29 61 85 61        --  . s ) a . a
4742:679 | DONE dir | na 16 16 | 0073d7 | (7 bytes)   |         .byte 3e, 6e, 75, 6d, 62, 65, 72 
4742:679 | DONE dir | na 16 16 |        |             |                 3e 6e 75 6d 62 65 72     --  > n u m b e r
4742:680 | DONE wsp | na 16 16 |        |             |
4742:681 | DONE lbl | na 16 16 | 0073de |             | nt_number                            
4742:682 | DONE dir | na 16 16 | 0073de | (2 bytes)   |         .byte 6, { NC }              see if actually NC
4742:682 | DONE dir | na 16 16 |        |             |                 06 01                    --  . .
4742:683 | DONE dir | na 16 16 | 0073e0 | (6 bytes)   |         .word nt_tonumber, xt_number, 0069c2 
4742:683 | DONE dir | na 16 16 |        |             |                 cf 73 3f 69 c2 69        --  . s ? i . i
4742:684 | DONE dir | na 16 16 | 0073e6 | (6 bytes)   |         .byte 6e, 75, 6d, 62, 65, 72 
4742:684 | DONE dir | na 16 16 |        |             |                 6e 75 6d 62 65 72        --  n u m b e r
4742:685 | DONE wsp | na 16 16 |        |             |
4742:686 | DONE lbl | na 16 16 | 0073ec |             | nt_two                               
4742:687 | DONE dir | na 16 16 | 0073ec | (2 bytes)   |         .byte 1, { NC }              
4742:687 | DONE dir | na 16 16 |        |             |                 01 01                    --  . .
4742:688 | DONE dir | na 16 16 | 0073ee | (6 bytes)   |         .word nt_number, xt_two, 006385 
4742:688 | DONE dir | na 16 16 |        |             |                 de 73 7e 63 85 63        --  . s ~ c . c
4742:689 | DONE dir | na 16 16 | 0073f4 | (1 bytes)   |         .byte 32                     
4742:689 | DONE dir | na 16 16 |        |             |                 32                       --  2
4742:690 | DONE wsp | na 16 16 |        |             |
4742:691 | DONE lbl | na 16 16 | 0073f5 |             | nt_one                               
4742:692 | DONE dir | na 16 16 | 0073f5 | (2 bytes)   |         .byte 1, { NC }              
4742:692 | DONE dir | na 16 16 |        |             |                 01 01                    --  . .
4742:693 | DONE dir | na 16 16 | 0073f7 | (6 bytes)   |         .word nt_two, xt_one, 006379 
4742:693 | DONE dir | na 16 16 |        |             |                 ec 73 72 63 79 63        --  . s r c y c
4742:694 | DONE dir | na 16 16 | 0073fd | (1 bytes)   |         .byte 31                     
4742:694 | DONE dir | na 16 16 |        |             |                 31                       --  1
4742:695 | DONE wsp | na 16 16 |        |             |
4742:696 | DONE lbl | na 16 16 | 0073fe |             | nt_zero                              
4742:697 | DONE dir | na 16 16 | 0073fe | (2 bytes)   |         .byte 1, { NC }              
4742:697 | DONE dir | na 16 16 |        |             |                 01 01                    --  . .
4742:698 | DONE dir | na 16 16 | 007400 | (6 bytes)   |         .word nt_one, xt_zero, 006324 
4742:698 | DONE dir | na 16 16 |        |             |                 f5 73 1d 63 24 63        --  . s . c $ c
4742:699 | DONE dir | na 16 16 | 007406 | (1 bytes)   |         .byte 30                     
4742:699 | DONE dir | na 16 16 |        |             |                 30                       --  0
4742:700 | DONE wsp | na 16 16 |        |             |
4742:701 | DONE lbl | na 16 16 | 007407 |             | nt_find-name                         
4742:702 | DONE dir | na 16 16 | 007407 | (2 bytes)   |         .byte 9, 0                   
4742:702 | DONE dir | na 16 16 |        |             |                 09 00                    --  	 .
4742:703 | DONE dir | na 16 16 | 007409 | (6 bytes)   |         .word nt_zero, xt_find-name, 0067d1 
4742:703 | DONE dir | na 16 16 |        |             |                 fe 73 7b 67 d1 67        --  . s { g . g
4742:704 | DONE dir | na 16 16 | 00740f | (9 bytes)   |         .byte 66, 69, 6e, 64, 2d, 6e, 61, 6d, 65 
4742:704 | DONE dir | na 16 16 |        |             |                 66 69 6e 64 2d 6e 61 6d  --  f i n d - n a m
4742:704 | DONE dir | na 16 16 |        |             |                 65                       --  e
4742:705 | DONE wsp | na 16 16 |        |             |
4742:706 | DONE lbl | na 16 16 | 007418 |             | nt_refill                            
4742:707 | DONE dir | na 16 16 | 007418 | (2 bytes)   |         .byte 6, 0                   TODO check flags
4742:707 | DONE dir | na 16 16 |        |             |                 06 00                    --  . .
4742:708 | DONE dir | na 16 16 | 00741a | (6 bytes)   |         .word nt_find-name, xt_refill, 006ae6 
4742:708 | DONE dir | na 16 16 |        |             |                 07 74 b4 6a e6 6a        --  . t . j . j
4742:709 | DONE dir | na 16 16 | 007420 | (6 bytes)   |         .byte 72, 65, 66, 69, 6c, 6c 
4742:709 | DONE dir | na 16 16 |        |             |                 72 65 66 69 6c 6c        --  r e f i l l
4742:710 | DONE wsp | na 16 16 |        |             |
4742:711 | DONE lbl | na 16 16 | 007426 |             | nt_parse-name                        
4742:712 | DONE dir | na 16 16 | 007426 | (2 bytes)   |         .byte &10, 0                 
4742:712 | DONE dir | na 16 16 |        |             |                 0a 00                    --  
 .
4742:713 | DONE dir | na 16 16 | 007428 | (6 bytes)   |         .word nt_refill, xt_parse-name, 006a4e 
4742:713 | DONE dir | na 16 16 |        |             |                 18 74 ea 69 4e 6a        --  . t . i N j
4742:714 | DONE dir | na 16 16 | 00742e | (10 bytes)  |         .byte 70, 61, 72, 73, 65, 2d, 6e, 61, 6d, 65 
4742:714 | DONE dir | na 16 16 |        |             |                 70 61 72 73 65 2d 6e 61  --  p a r s e - n a
4742:714 | DONE dir | na 16 16 |        |             |                 6d 65                    --  m e
4742:715 | DONE wsp | na 16 16 |        |             |
4742:716 | DONE lbl | na 16 16 | 007438 |             | nt_source-id                         
4742:717 | DONE dir | na 16 16 | 007438 | (2 bytes)   |         .byte 9, { NC }              
4742:717 | DONE dir | na 16 16 |        |             |                 09 01                    --  	 .
4742:718 | DONE dir | na 16 16 | 00743a | (6 bytes)   |         .word nt_parse-name, xt_source-id, 006c1c 
4742:718 | DONE dir | na 16 16 |        |             |                 26 74 16 6c 1c 6c        --  & t . l . l
4742:719 | DONE dir | na 16 16 | 007440 | (9 bytes)   |         .byte 73, 6f, 75, 72, 63, 65, 2d, 69, 64 
4742:719 | DONE dir | na 16 16 |        |             |                 73 6f 75 72 63 65 2d 69  --  s o u r c e - i
4742:719 | DONE dir | na 16 16 |        |             |                 64                       --  d
4742:720 | DONE wsp | na 16 16 |        |             |
4742:721 | DONE lbl | na 16 16 | 007449 |             | nt_comma                             
4742:722 | DONE dir | na 16 16 | 007449 | (2 bytes)   |         .byte 1, { NC }              
4742:722 | DONE dir | na 16 16 |        |             |                 01 01                    --  . .
4742:723 | DONE dir | na 16 16 | 00744b | (6 bytes)   |         .word nt_source-id, xt_comma, 006234 
4742:723 | DONE dir | na 16 16 |        |             |                 38 74 29 62 34 62        --  8 t ) b 4 b
4742:724 | DONE dir | na 16 16 | 007451 | (1 bytes)   |         .byte 2c                     
4742:724 | DONE dir | na 16 16 |        |             |                 2c                       --  ,
4742:725 | DONE wsp | na 16 16 |        |             |
4742:726 | DONE lbl | na 16 16 | 007452 |             | nt_accept                            
4742:727 | DONE dir | na 16 16 | 007452 | (2 bytes)   |         .byte 6, 00                  TODO check flags
4742:727 | DONE dir | na 16 16 |        |             |                 06 00                    --  . .
4742:728 | DONE dir | na 16 16 | 007454 | (6 bytes)   |         .word nt_comma, xt_accept, 0064a0 
4742:728 | DONE dir | na 16 16 |        |             |                 49 74 1d 64 a0 64        --  I t . d . d
4742:729 | DONE dir | na 16 16 | 00745a | (6 bytes)   |         .byte 61, 63, 63, 65, 70, 74 
4742:729 | DONE dir | na 16 16 |        |             |                 61 63 63 65 70 74        --  a c c e p t
4742:730 | DONE wsp | na 16 16 |        |             |
4742:731 | DONE lbl | na 16 16 | 007460 |             | nt_backslash                         
4742:732 | DONE dir | na 16 16 | 007460 | (2 bytes)   |         .byte 1, { NC }              
4742:732 | DONE dir | na 16 16 |        |             |                 01 01                    --  . .
4742:733 | DONE dir | na 16 16 | 007462 | (6 bytes)   |         .word nt_accept, xt_backslash, 0062dd 
4742:733 | DONE dir | na 16 16 |        |             |                 52 74 d9 62 dd 62        --  R t . b . b
4742:734 | DONE dir | na 16 16 | 007468 | (1 bytes)   |         .byte 5c                     
4742:734 | DONE dir | na 16 16 |        |             |                 5c                       --  \
4742:735 | DONE wsp | na 16 16 |        |             |
4742:736 | DONE lbl | na 16 16 | 007469 |             | nt_qdup                              
4742:737 | DONE dir | na 16 16 | 007469 | (2 bytes)   |         .byte 4, { NC }              
4742:737 | DONE dir | na 16 16 |        |             |                 04 01                    --  . .
4742:738 | DONE dir | na 16 16 | 00746b | (6 bytes)   |         .word nt_backslash, xt_qdup, 0062b1 
4742:738 | DONE dir | na 16 16 |        |             |                 60 74 aa 62 b1 62        --  ` t . b . b
4742:739 | DONE dir | na 16 16 | 007471 | (4 bytes)   |         .byte 3f, 64, 75, 70         
4742:739 | DONE dir | na 16 16 |        |             |                 3f 64 75 70              --  ? d u p
4742:740 | DONE wsp | na 16 16 |        |             |
4742:741 | DONE lbl | na 16 16 | 007475 |             | nt_tuck                              
4742:742 | DONE dir | na 16 16 | 007475 | (2 bytes)   |         .byte 4, { NC }              
4742:742 | DONE dir | na 16 16 |        |             |                 04 01                    --  . .
4742:743 | DONE dir | na 16 16 | 007477 | (6 bytes)   |         .word nt_qdup, xt_tuck, 006c61 
4742:743 | DONE dir | na 16 16 |        |             |                 69 74 59 6c 61 6c        --  i t Y l a l
4742:744 | DONE dir | na 16 16 | 00747d | (4 bytes)   |         .byte 74, 75, 63, 6b         
4742:744 | DONE dir | na 16 16 |        |             |                 74 75 63 6b              --  t u c k
4742:745 | DONE wsp | na 16 16 |        |             |
4742:746 | DONE lbl | na 16 16 | 007481 |             | nt_nip                               
4742:747 | DONE dir | na 16 16 | 007481 | (2 bytes)   |         .byte 3, { NC }              
4742:747 | DONE dir | na 16 16 |        |             |                 03 01                    --  . .
4742:748 | DONE dir | na 16 16 | 007483 | (6 bytes)   |         .word nt_tuck, xt_nip, 00693e 
4742:748 | DONE dir | na 16 16 |        |             |                 75 74 3c 69 3e 69        --  u t < i > i
4742:749 | DONE dir | na 16 16 | 007489 | (3 bytes)   |         .byte 6e, 69, 70             
4742:749 | DONE dir | na 16 16 |        |             |                 6e 69 70                 --  n i p
4742:750 | DONE wsp | na 16 16 |        |             |
4742:751 | DONE lbl | na 16 16 | 00748c |             | nt_mrot                              
4742:752 | DONE dir | na 16 16 | 00748c | (2 bytes)   |         .byte 4, { NC }              
4742:752 | DONE dir | na 16 16 |        |             |                 04 01                    --  . .
4742:753 | DONE dir | na 16 16 | 00748e | (6 bytes)   |         .word nt_nip, xt_mrot, 0062f9 
4742:753 | DONE dir | na 16 16 |        |             |                 81 74 f1 62 f9 62        --  . t . b . b
4742:754 | DONE dir | na 16 16 | 007494 | (4 bytes)   |         .byte 2d, 72, 6f, 74         
4742:754 | DONE dir | na 16 16 |        |             |                 2d 72 6f 74              --  - r o t
4742:755 | DONE wsp | na 16 16 |        |             |
4742:756 | DONE lbl | na 16 16 | 007498 |             | nt_rot                               
4742:757 | DONE dir | na 16 16 | 007498 | (2 bytes)   |         .byte 3, { NC }              
4742:757 | DONE dir | na 16 16 |        |             |                 03 01                    --  . .
4742:758 | DONE dir | na 16 16 | 00749a | (6 bytes)   |         .word nt_mrot, xt_rot, 006aef 
4742:758 | DONE dir | na 16 16 |        |             |                 8c 74 e7 6a ef 6a        --  . t . j . j
4742:759 | DONE dir | na 16 16 | 0074a0 | (3 bytes)   |         .byte 72, 6f, 74             
4742:759 | DONE dir | na 16 16 |        |             |                 72 6f 74                 --  r o t
4742:760 | DONE wsp | na 16 16 |        |             |
4742:761 | DONE lbl | na 16 16 | 0074a3 |             | nt_2over                             
4742:762 | DONE dir | na 16 16 | 0074a3 | (2 bytes)   |         .byte 5, { NC }              
4742:762 | DONE dir | na 16 16 |        |             |                 05 01                    --  . .
4742:763 | DONE dir | na 16 16 | 0074a5 | (6 bytes)   |         .word nt_rot, xt_2over, 0063a8 
4742:763 | DONE dir | na 16 16 |        |             |                 98 74 9c 63 a8 63        --  . t . c . c
4742:764 | DONE dir | na 16 16 | 0074ab | (5 bytes)   |         .byte 32, 6f, 76, 65, 72     
4742:764 | DONE dir | na 16 16 |        |             |                 32 6f 76 65 72           --  2 o v e r
4742:765 | DONE wsp | na 16 16 |        |             |
4742:766 | DONE lbl | na 16 16 | 0074b0 |             | nt_2swap                             
4742:767 | DONE dir | na 16 16 | 0074b0 | (2 bytes)   |         .byte 5, { NC }              
4742:767 | DONE dir | na 16 16 |        |             |                 05 01                    --  . .
4742:768 | DONE dir | na 16 16 | 0074b2 | (6 bytes)   |         .word nt_2over, xt_2swap, 0063c7 
4742:768 | DONE dir | na 16 16 |        |             |                 a3 74 b7 63 c7 63        --  . t . c . c
4742:769 | DONE dir | na 16 16 | 0074b8 | (5 bytes)   |         .byte 32, 73, 77, 61, 70     
4742:769 | DONE dir | na 16 16 |        |             |                 32 73 77 61 70           --  2 s w a p
4742:770 | DONE wsp | na 16 16 |        |             |
4742:771 | DONE lbl | na 16 16 | 0074bd |             | nt_execute                           
4742:772 | DONE dir | na 16 16 | 0074bd | (2 bytes)   |         .byte 7, { NC }              
4742:772 | DONE dir | na 16 16 |        |             |                 07 01                    --  . .
4742:773 | DONE dir | na 16 16 | 0074bf | (6 bytes)   |         .word nt_2swap, xt_execute, 00677a 
4742:773 | DONE dir | na 16 16 |        |             |                 b0 74 70 67 7a 67        --  . t p g z g
4742:774 | DONE dir | na 16 16 | 0074c5 | (7 bytes)   |         .byte 65, 78, 65, 63, 75, 74, 65 
4742:774 | DONE dir | na 16 16 |        |             |                 65 78 65 63 75 74 65     --  e x e c u t e
4742:775 | DONE wsp | na 16 16 |        |             |
4742:776 | DONE lbl | na 16 16 | 0074cc |             | nt_here                              
4742:777 | DONE dir | na 16 16 | 0074cc | (2 bytes)   |         .byte 4, { NC }              
4742:777 | DONE dir | na 16 16 |        |             |                 04 01                    --  . .
4742:778 | DONE dir | na 16 16 | 0074ce | (6 bytes)   |         .word nt_execute, xt_here, 00683b 
4742:778 | DONE dir | na 16 16 |        |             |                 bd 74 35 68 3b 68        --  . t 5 h ; h
4742:779 | DONE dir | na 16 16 | 0074d4 | (4 bytes)   |         .byte 68, 65, 72, 65         
4742:779 | DONE dir | na 16 16 |        |             |                 68 65 72 65              --  h e r e
4742:780 | DONE wsp | na 16 16 |        |             |
4742:781 | DONE lbl | na 16 16 | 0074d8 |             | nt_2drop                             
4742:782 | DONE dir | na 16 16 | 0074d8 | (2 bytes)   |         .byte 5, { NC }              
4742:782 | DONE dir | na 16 16 |        |             |                 05 01                    --  . .
4742:783 | DONE dir | na 16 16 | 0074da | (6 bytes)   |         .word nt_here, xt_2drop, 006390 
4742:783 | DONE dir | na 16 16 |        |             |                 cc 74 8a 63 90 63        --  . t . c . c
4742:784 | DONE dir | na 16 16 | 0074e0 | (5 bytes)   |         .byte 32, 64, 72, 6f, 70     
4742:784 | DONE dir | na 16 16 |        |             |                 32 64 72 6f 70           --  2 d r o p
4742:785 | DONE wsp | na 16 16 |        |             |
4742:786 | DONE lbl | na 16 16 | 0074e5 |             | nt_rfetch                            
4742:787 | DONE dir | na 16 16 | 0074e5 | (2 bytes)   |         .byte 2, 0                   we follow Gforth in making this not CO
4742:787 | DONE dir | na 16 16 |        |             |                 02 00                    --  . .
4742:788 | DONE dir | na 16 16 | 0074e7 | (6 bytes)   |         .word nt_2drop, xt_rfetch, 006aab 
4742:788 | DONE dir | na 16 16 |        |             |                 d8 74 a3 6a ab 6a        --  . t . j . j
4742:789 | DONE dir | na 16 16 | 0074ed | (2 bytes)   |         .byte 72, 40                 
4742:789 | DONE dir | na 16 16 |        |             |                 72 40                    --  r @
4742:790 | DONE wsp | na 16 16 |        |             |
4742:791 | DONE lbl | na 16 16 | 0074ef |             | nt_fromr                             
4742:792 | DONE dir | na 16 16 | 0074ef | (2 bytes)   |         .byte 2, { CO }              
4742:792 | DONE dir | na 16 16 |        |             |                 02 04                    --  . .
4742:793 | DONE dir | na 16 16 | 0074f1 | (6 bytes)   |         .word nt_rfetch, xt_fromr, 006ab3 
4742:793 | DONE dir | na 16 16 |        |             |                 e5 74 ac 6a b3 6a        --  . t . j . j
4742:794 | DONE dir | na 16 16 | 0074f7 | (2 bytes)   |         .byte 72, 3e                 
4742:794 | DONE dir | na 16 16 |        |             |                 72 3e                    --  r >
4742:795 | DONE wsp | na 16 16 |        |             |
4742:796 | DONE lbl | na 16 16 | 0074f9 |             | nt_tor                               
4742:797 | DONE dir | na 16 16 | 0074f9 | (2 bytes)   |         .byte 2, { CO }              
4742:797 | DONE dir | na 16 16 |        |             |                 02 04                    --  . .
4742:798 | DONE dir | na 16 16 | 0074fb | (6 bytes)   |         .word nt_fromr, xt_tor, 00618d 
4742:798 | DONE dir | na 16 16 |        |             |                 ef 74 86 61 8d 61        --  . t . a . a
4742:799 | DONE dir | na 16 16 | 007501 | (2 bytes)   |         .byte 3e, 72                 
4742:799 | DONE dir | na 16 16 |        |             |                 3e 72                    --  > r
4742:800 | DONE wsp | na 16 16 |        |             |
4742:801 | DONE lbl | na 16 16 | 007503 |             | nt_digitq                            
4742:802 | DONE dir | na 16 16 | 007503 | (2 bytes)   |         .byte 6, { NC }              
4742:802 | DONE dir | na 16 16 |        |             |                 06 01                    --  . .
4742:803 | DONE dir | na 16 16 | 007505 | (6 bytes)   |         .word nt_tor, xt_digitq, 00666b 
4742:803 | DONE dir | na 16 16 |        |             |                 f9 74 30 66 6b 66        --  . t 0 f k f
4742:804 | DONE dir | na 16 16 | 00750b | (6 bytes)   |         .byte 64, 69, 67, 69, 74, 3f 
4742:804 | DONE dir | na 16 16 |        |             |                 64 69 67 69 74 3f        --  d i g i t ?
4742:805 | DONE wsp | na 16 16 |        |             |
4742:806 | DONE lbl | na 16 16 | 007511 |             | nt_bounds                            
4742:807 | DONE dir | na 16 16 | 007511 | (2 bytes)   |         .byte 6, { NC }              
4742:807 | DONE dir | na 16 16 |        |             |                 06 01                    --  . .
4742:808 | DONE dir | na 16 16 | 007513 | (6 bytes)   |         .word nt_digitq, xt_bounds, 00650e 
4742:808 | DONE dir | na 16 16 |        |             |                 03 75 05 65 0e 65        --  . u . e . e
4742:809 | DONE dir | na 16 16 | 007519 | (6 bytes)   |         .byte 62, 6f, 75, 6e, 64, 73 
4742:809 | DONE dir | na 16 16 |        |             |                 62 6f 75 6e 64 73        --  b o u n d s
4742:810 | DONE wsp | na 16 16 |        |             |
4742:811 | DONE lbl | na 16 16 | 00751f |             | nt_over                              
4742:812 | DONE dir | na 16 16 | 00751f | (2 bytes)   |         .byte 4, { NC }              
4742:812 | DONE dir | na 16 16 |        |             |                 04 01                    --  . .
4742:813 | DONE dir | na 16 16 | 007521 | (6 bytes)   |         .word nt_bounds, xt_over, 0069d0 
4742:813 | DONE dir | na 16 16 |        |             |                 11 75 ca 69 d0 69        --  . u . i . i
4742:814 | DONE dir | na 16 16 | 007527 | (4 bytes)   |         .byte 6f, 76, 65, 72         
4742:814 | DONE dir | na 16 16 |        |             |                 6f 76 65 72              --  o v e r
4742:815 | DONE wsp | na 16 16 |        |             |
4742:816 | DONE lbl | na 16 16 | 00752b |             | nt_fetch                             
4742:817 | DONE dir | na 16 16 | 00752b | (2 bytes)   |         .byte 1, { NC }              
4742:817 | DONE dir | na 16 16 |        |             |                 01 01                    --  . .
4742:818 | DONE dir | na 16 16 | 00752d | (6 bytes)   |         .word nt_over, xt_fetch, 0062c2 
4742:818 | DONE dir | na 16 16 |        |             |                 1f 75 be 62 c2 62        --  . u . b . b
4742:819 | DONE dir | na 16 16 | 007533 | (1 bytes)   |         .byte 40                     
4742:819 | DONE dir | na 16 16 |        |             |                 40                       --  @
4742:820 | DONE wsp | na 16 16 |        |             |
4742:821 | DONE lbl | na 16 16 | 007534 |             | nt_store                             
4742:822 | DONE dir | na 16 16 | 007534 | (2 bytes)   |         .byte 1, { NC }              
4742:822 | DONE dir | na 16 16 |        |             |                 01 01                    --  . .
4742:823 | DONE dir | na 16 16 | 007536 | (6 bytes)   |         .word nt_fetch, xt_store, 0062bd 
4742:823 | DONE dir | na 16 16 |        |             |                 2b 75 b2 62 bd 62        --  + u . b . b
4742:824 | DONE dir | na 16 16 | 00753c | (1 bytes)   |         .byte 21                     
4742:824 | DONE dir | na 16 16 |        |             |                 21                       --  !
4742:825 | DONE wsp | na 16 16 |        |             |
4742:826 | DONE lbl | na 16 16 | 00753d |             | nt_swap                              
4742:827 | DONE dir | na 16 16 | 00753d | (2 bytes)   |         .byte 4, { NC }              
4742:827 | DONE dir | na 16 16 |        |             |                 04 01                    --  . .
4742:828 | DONE dir | na 16 16 | 00753f | (6 bytes)   |         .word nt_store, xt_swap, 006c46 
4742:828 | DONE dir | na 16 16 |        |             |                 34 75 41 6c 46 6c        --  4 u A l F l
4742:829 | DONE dir | na 16 16 | 007545 | (4 bytes)   |         .byte 73, 77, 61, 70         
4742:829 | DONE dir | na 16 16 |        |             |                 73 77 61 70              --  s w a p
4742:830 | DONE wsp | na 16 16 |        |             |
4742:831 | DONE lbl | na 16 16 | 007549 |             | nt_dup                               
4742:832 | DONE dir | na 16 16 | 007549 | (2 bytes)   |         .byte 3, { NC }              
4742:832 | DONE dir | na 16 16 |        |             |                 03 01                    --  . .
4742:833 | DONE dir | na 16 16 | 00754b | (6 bytes)   |         .word nt_swap, xt_dup, 00671b 
4742:833 | DONE dir | na 16 16 |        |             |                 3d 75 17 67 1b 67        --  = u . g . g
4742:834 | DONE dir | na 16 16 | 007551 | (3 bytes)   |         .byte 64, 75, 70             
4742:834 | DONE dir | na 16 16 |        |             |                 64 75 70                 --  d u p
4742:835 | DONE wsp | na 16 16 |        |             |
4742:836 | DONE cmt | na 16 16 |        |             | ; DROP is always the first entry in dictionary
4742:837 | DONE lbl | na 16 16 | 007554 |             | nt_drop                              
4742:838 | DONE dir | na 16 16 | 007554 | (2 bytes)   |         .byte 4, { NC }              
4742:838 | DONE dir | na 16 16 |        |             |                 04 01                    --  . .
4742:839 | DONE dir | na 16 16 | 007556 | (6 bytes)   |         .word nt_dup, xt_drop, 0066ef 
4742:839 | DONE dir | na 16 16 |        |             |                 49 75 eb 66 ef 66        --  I u . f . f
4742:840 | DONE dir | na 16 16 | 00755c | (4 bytes)   |         .byte 64, 72, 6f, 70         
4742:840 | DONE dir | na 16 16 |        |             |                 64 72 6f 70              --  d r o p
4742:841 | DONE wsp | na 16 16 |        |             |
4742:842 | DONE cmt | na 16 16 |        |             | ; END
4743:000 | DONE wsp | na 16 16 |        |             |
4744:000 | DONE cmt | na 16 16 |        |             | ; ===================================================================
4745:000 | DONE cmt | na 16 16 |        |             | ; CODE FIELD ROUTINES
4746:000 | DONE wsp | na 16 16 |        |             |
4747:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
4748:000 | DONE cmt | na 16 16 |        |             | ; DOCONST
4749:000 | DONE cmt | na 16 16 |        |             | ; Execute a constant: Push the data in the first two byte of the Data Field onto
4750:000 | DONE cmt | na 16 16 |        |             | ; the stack
4751:000 | DONE lbl | na 16 16 | 007560 |             | doconst                              
4752:000 | DONE dir | na 16 16 |        |             |         .!a16                        
4753:000 | DONE dir | na 16 16 |        |             |         .!xy16                       
4754:000 | DONE ins | na 16 16 | 007560 | ca          |                 dex                  make room on Data Stack
4755:000 | DONE ins | na 16 16 | 007561 | ca          |                 dex                  
4756:000 | DONE ins | na 16 16 | 007562 | 94 00       |                 sty.dx 00            
4757:000 | DONE wsp | na 16 16 |        |             |
4758:000 | DONE cmt | na 16 16 |        |             |                 ; The value we need is stored two bytes after the JSR return
4759:000 | DONE cmt | na 16 16 |        |             |                 ; address, which in turn is what is on top of the Return Stack
4760:000 | DONE ins | na 16 16 | 007564 | 68          |                 pla                  get the return address
4761:000 | DONE ins | na 16 16 | 007565 | 85 0a       |                 sta.d 00020a         
4762:000 | DONE wsp | na 16 16 |        |             |
4763:000 | DONE cmt | na 16 16 |        |             |                 ; start Y as index off with 1 instead of zero because of 65816's
4764:000 | DONE cmt | na 16 16 |        |             |                 ; address handling
4765:000 | DONE ins | na 16 16 | 007567 | a0 01 00    |                 ldy.# 0001           
4766:000 | DONE ins | na 16 16 | 00756a | b1 0a       |                 lda.diy 00020a       LDA (TMP1),Y
4767:000 | DONE ins | na 16 16 | 00756c | a8          |                 tay                  
4768:000 | DONE wsp | na 16 16 |        |             |
4769:000 | DONE ins | na 16 16 | 00756d | 60          |                 rts                  takes us to original caller
4770:000 | DONE wsp | na 16 16 |        |             |
4771:000 | DONE wsp | na 16 16 |        |             |
4772:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
4773:000 | DONE cmt | na 16 16 |        |             | ; DODOES
4774:000 | DONE cmt | na 16 16 |        |             | ; Used in combination with DOES>'s runtime portion to actually do the work of
4775:000 | DONE cmt | na 16 16 |        |             | ; the new word. See DOES> and docs/create-does.txt for details. Uses tmp3
4776:000 | DONE lbl | na 16 16 | 00756e |             | dodoes                               
4777:000 | DONE cmt | na 16 16 |        |             |                 ; Assumes the address of the CFA of the original defining word
4778:000 | DONE cmt | na 16 16 |        |             |                 ; (say, CONSTANT) is on the top of the Return Stack. Save it for
4779:000 | DONE cmt | na 16 16 |        |             |                 ; a later jump, adding one byte because of the way the 65816
4780:000 | DONE cmt | na 16 16 |        |             |                 ; works
4781:000 | DONE ins | na 16 16 | 00756e | 68          |                 pla                  
4782:000 | DONE ins | na 16 16 | 00756f | 1a          |                 inc.a                
4783:000 | DONE ins | na 16 16 | 007570 | 85 0e       |                 sta.d 00020e         
4784:000 | DONE wsp | na 16 16 |        |             |
4785:000 | DONE cmt | na 16 16 |        |             |                 ; Next on the Return Stack should be the address of the PFA of
4786:000 | DONE cmt | na 16 16 |        |             |                 ; the calling defined word (say, the name of whatever constant we
4787:000 | DONE cmt | na 16 16 |        |             |                 ; just defined). Move this to the Data Stack, again adding one.
4788:000 | DONE ins | na 16 16 | 007572 | ca          |                 dex                  
4789:000 | DONE ins | na 16 16 | 007573 | ca          |                 dex                  
4790:000 | DONE ins | na 16 16 | 007574 | 94 00       |                 sty.dx 00            
4791:000 | DONE wsp | na 16 16 |        |             |
4792:000 | DONE ins | na 16 16 | 007576 | 7a          |                 ply                  
4793:000 | DONE ins | na 16 16 | 007577 | c8          |                 iny                  
4794:000 | DONE wsp | na 16 16 |        |             |
4795:000 | DONE cmt | na 16 16 |        |             |                 ; This leaves the return address from the original main routine
4796:000 | DONE cmt | na 16 16 |        |             |                 ; on top of the Return Stack. We leave that untouched and jump
4797:000 | DONE cmt | na 16 16 |        |             |                 ; to the special code of the defining word. It's RTS instruction
4798:000 | DONE cmt | na 16 16 |        |             |                 ; will take us back to the main routine
4799:000 | DONE ins | na 16 16 | 007578 | 6c 0e 02    |                 jmp.i 00020e         JMP (TMP3)
4800:000 | DONE wsp | na 16 16 |        |             |
4801:000 | DONE wsp | na 16 16 |        |             |
4802:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
4803:000 | DONE cmt | na 16 16 |        |             | ; DOVAR
4804:000 | DONE cmt | na 16 16 |        |             | ; Execute a variable: Push the address of the first bytes of the Data Field onto
4805:000 | DONE cmt | na 16 16 |        |             | ; the stack. This is called with JSR so we can pick up the address of the
4806:000 | DONE cmt | na 16 16 |        |             | ; calling variable off the 65816's Return Stack. The final RTS takes us to the
4807:000 | DONE cmt | na 16 16 |        |             | ; original caller of the routine that in turn called DOVAR. This is the default
4808:000 | DONE cmt | na 16 16 |        |             | ; routine installed with CREATE
4809:000 | DONE lbl | na 16 16 | 00757b |             | dovar                                
4810:000 | DONE dir | na 16 16 |        |             |         .!a16                        
4811:000 | DONE dir | na 16 16 |        |             |         .!xy16                       
4812:000 | DONE ins | na 16 16 | 00757b | ca          |                 dex                  make room on Data Stack
4813:000 | DONE ins | na 16 16 | 00757c | ca          |                 dex                  
4814:000 | DONE ins | na 16 16 | 00757d | 94 00       |                 sty.dx 00            
4815:000 | DONE wsp | na 16 16 |        |             |
4816:000 | DONE cmt | na 16 16 |        |             |                 ; The address we need is stored in the two bytes after the JSR
4817:000 | DONE cmt | na 16 16 |        |             |                 ; return address, which in turn is what is on top of the Return
4818:000 | DONE cmt | na 16 16 |        |             |                 ; Stack
4819:000 | DONE ins | na 16 16 | 00757f | 7a          |                 ply                  value is now TOS
4820:000 | DONE ins | na 16 16 | 007580 | c8          |                 iny                  add one because of 65816's address handling
4821:000 | DONE wsp | na 16 16 |        |             |
4822:000 | DONE ins | na 16 16 | 007581 | 60          |                 rts                  takes us to original caller
4823:000 | DONE wsp | na 16 16 |        |             |
4824:000 | DONE wsp | na 16 16 |        |             |
4825:000 | DONE cmt | na 16 16 |        |             | ; ===================================================================
4826:000 | DONE cmt | na 16 16 |        |             | ; LOW LEVEL HELPER FUNCTIONS
4827:000 | DONE wsp | na 16 16 |        |             |
4828:000 | DONE wsp | na 16 16 |        |             |
4829:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
4830:000 | DONE cmt | na 16 16 |        |             | ; INTERPRET
4831:000 | DONE cmt | na 16 16 |        |             | ; Core routine for interpreter called by EVALUATE and QUIT. We process one line
4832:000 | DONE cmt | na 16 16 |        |             | ; only. Assumes that address of name is in cib and length of whole input
4833:000 | DONE cmt | na 16 16 |        |             | ; string is in ciblen
4834:000 | DONE lbl | na 16 16 | 007582 |             | interpret                            
4835:000 | DONE lbl | na 16 16 | 007582 |             | interpret_loop                       
4836:000 | DONE dir | na 16 16 |        |             |         .!a16                        
4837:000 | DONE dir | na 16 16 |        |             |         .!xy16                       
4838:000 | DONE cmt | na 16 16 |        |             |                 ; Normally we would use PARSE here with the SPACE character as
4839:000 | DONE cmt | na 16 16 |        |             |                 ; a parameter (PARSE replaces WORD in modern Forths). However,
4840:000 | DONE cmt | na 16 16 |        |             |                 ; Gforth's PARSE-NAME makes more sense as it uses spaces as
4841:000 | DONE cmt | na 16 16 |        |             |                 ; delimiters per default and skips any leading spaces, which
4842:000 | DONE cmt | na 16 16 |        |             |                 ; PARSE doesn't
4843:000 | DONE ins | na 16 16 | 007582 | 20 ea 69    |                 jsr 0069ea           ( "string" -- addr u )
4844:000 | DONE wsp | na 16 16 |        |             |
4845:000 | DONE cmt | na 16 16 |        |             |                 ; If PARSE-NAME returns 0 (empty line), no characters were left
4846:000 | DONE cmt | na 16 16 |        |             |                 ; in the line and we need to go get a new line
4847:000 | DONE ins | na 16 16 | 007585 | 98          |                 tya                  force flag check
4848:000 | DONE ins | na 16 16 | 007586 | f0 48       |                 beq 0075d0           
4849:000 | DONE wsp | na 16 16 |        |             |
4850:000 | DONE cmt | na 16 16 |        |             |                 ; We let the user input words in any case, but use lower case
4851:000 | DONE cmt | na 16 16 |        |             |                 ; internally (sorry, Garth).
4852:000 | DONE ins | na 16 16 | 007588 | 20 36 76    |                 jsr 007636           
4853:000 | DONE wsp | na 16 16 |        |             |
4854:000 | DONE cmt | na 16 16 |        |             |                 ; Go to FIND-NAME to see if this is a word we know. We have to
4855:000 | DONE cmt | na 16 16 |        |             |                 ; make a copy of the address in case it isn't a word we know and
4856:000 | DONE cmt | na 16 16 |        |             |                 ; we have to go see if it is a number
4857:000 | DONE ins | na 16 16 | 00758b | 20 91 63    |                 jsr 006391           TODO convert this to assembler
4858:000 | DONE ins | na 16 16 | 00758e | 20 7b 67    |                 jsr 00677b           ( addr u -- nt | 0 )
4859:000 | DONE wsp | na 16 16 |        |             |
4860:000 | DONE cmt | na 16 16 |        |             |                 ; a zero signals that we didn't find a word in the Dictionary
4861:000 | DONE ins | na 16 16 | 007591 | 98          |                 tya                  
4862:000 | DONE ins | na 16 16 | 007592 | d0 08       |                 bne 00759c           
4863:000 | DONE wsp | na 16 16 |        |             |
4864:000 | DONE cmt | na 16 16 |        |             |                 ; We didn't get any nt we know of, so let's see if this is
4865:000 | DONE cmt | na 16 16 |        |             |                 ; a number.
4866:000 | DONE ins | na 16 16 | 007594 | 20 eb 66    |                 jsr 0066eb           TODO convert this to assembler
4867:000 | DONE wsp | na 16 16 |        |             |
4868:000 | DONE wsp | na 16 16 |        |             |
4869:000 | DONE cmt | na 16 16 |        |             |                 ; If the number conversion doesn't work, NUMBER will do the
4870:000 | DONE cmt | na 16 16 |        |             |                 ; complaining for us
4871:000 | DONE ins | na 16 16 | 007597 | 20 3f 69    |                 jsr 00693f           ( addr u -- u | d )
4872:000 | DONE wsp | na 16 16 |        |             |
4873:000 | DONE cmt | na 16 16 |        |             |                 ; That was so much fun we should do it again!
4874:000 | DONE ins | na 16 16 | 00759a | 80 e6       |                 bra 007582           
4875:000 | DONE wsp | na 16 16 |        |             |
4876:000 | DONE lbl | na 16 16 | 00759c |             | interpret_got_name_token             
4877:000 | DONE cmt | na 16 16 |        |             |                 ; We have a known word's nt as TOS. We're going to need its xt
4878:000 | DONE cmt | na 16 16 |        |             |                 ; though, which is four bytes father down.
4879:000 | DONE wsp | na 16 16 |        |             |
4880:000 | DONE cmt | na 16 16 |        |             |                 ; Arrive here with ( addr u nt ), so we NIP twice, which is
4881:000 | DONE cmt | na 16 16 |        |             |                 ; really fast if Y is TOS
4882:000 | DONE ins | na 16 16 | 00759c | e8          |                 inx                  
4883:000 | DONE ins | na 16 16 | 00759d | e8          |                 inx                  
4884:000 | DONE ins | na 16 16 | 00759e | e8          |                 inx                  
4885:000 | DONE ins | na 16 16 | 00759f | e8          |                 inx                  
4886:000 | DONE wsp | na 16 16 |        |             |
4887:000 | DONE cmt | na 16 16 |        |             |                 ; This is a quicker
4888:000 | DONE cmt | na 16 16 |        |             |                 ; version of NAME>INT. But first, save a version of nt for
4889:000 | DONE cmt | na 16 16 |        |             |                 ; error handling and compilation stuff.
4890:000 | DONE ins | na 16 16 | 0075a0 | 84 08       |                 sty.d 000208         
4891:000 | DONE ins | na 16 16 | 0075a2 | c8          |                 iny                  
4892:000 | DONE ins | na 16 16 | 0075a3 | c8          |                 iny                  
4893:000 | DONE ins | na 16 16 | 0075a4 | c8          |                 iny                  
4894:000 | DONE ins | na 16 16 | 0075a5 | c8          |                 iny                  
4895:000 | DONE ins | na 16 16 | 0075a6 | b9 00 00    |                 lda.y 0000           LDA $0000,Y
4896:000 | DONE ins | na 16 16 | 0075a9 | a8          |                 tay                  xt is TOS
4897:000 | DONE wsp | na 16 16 |        |             |
4898:000 | DONE cmt | na 16 16 |        |             |                 ; See if we are in interpret or compile mode
4899:000 | DONE ins | na 16 16 | 0075aa | a5 22       |                 lda.d 000222         
4900:000 | DONE ins | na 16 16 | 0075ac | d0 14       |                 bne 0075c2           
4901:000 | DONE wsp | na 16 16 |        |             |
4902:000 | DONE cmt | na 16 16 |        |             |                 ; We are interpreting, so EXECUTE the xt that is TOS. First,
4903:000 | DONE cmt | na 16 16 |        |             |                 ; though, see if this isn't a compile-only word, which would be
4904:000 | DONE cmt | na 16 16 |        |             |                 ; illegal.
4905:000 | DONE ins | na 16 16 | 0075ae | b2 08       |                 lda.di 000208        
4906:000 | DONE ins | na 16 16 | 0075b0 | eb          |                 xba                  flags are MSB
4907:000 | DONE ins | na 16 16 | 0075b1 | 29 04 00    |                 and.# CO             mask everything but Compile Only bit
4908:000 | DONE ins | na 16 16 | 0075b4 | f0 06       |                 beq 0075bc           
4909:000 | DONE wsp | na 16 16 |        |             |
4910:000 | DONE cmt | na 16 16 |        |             |                 ; TODO see if we can print offending word first
4911:000 | DONE ins | na 16 16 | 0075b6 | a9 82 7b    |                 lda.# 007b82         
4912:000 | DONE ins | na 16 16 | 0075b9 | 4c fd 75    |                 jmp 0075fd           
4913:000 | DONE wsp | na 16 16 |        |             |
4914:000 | DONE lbl | na 16 16 | 0075bc |             | interpret_interpret                  
4915:000 | DONE cmt | na 16 16 |        |             |                 ; We JSR to EXECUTE instead of calling the xt directly because
4916:000 | DONE cmt | na 16 16 |        |             |                 ; the RTS of the word we're executing will bring us back here,
4917:000 | DONE cmt | na 16 16 |        |             |                 ; skipping EXECUTE completely during RTS. If we were to execute
4918:000 | DONE cmt | na 16 16 |        |             |                 ; xt directly, we have to fool around with the Return Stack
4919:000 | DONE cmt | na 16 16 |        |             |                 ; instead, which is actually slightly slower
4920:000 | DONE ins | na 16 16 | 0075bc | 20 70 67    |                 jsr 006770           
4921:000 | DONE wsp | na 16 16 |        |             |
4922:000 | DONE cmt | na 16 16 |        |             |                 ; That's quite enough for this word, let's get the next one
4923:000 | DONE ins | na 16 16 | 0075bf | 4c 82 75    |                 jmp 007582           
4924:000 | DONE wsp | na 16 16 |        |             |
4925:000 | DONE lbl | na 16 16 | 0075c2 |             | interpret_compile                    
4926:000 | DONE cmt | na 16 16 |        |             |                 ; We're compiling. However, we need to see if this is an
4927:000 | DONE cmt | na 16 16 |        |             |                 ; IMMEDIATE word, which would mean we execute it right now even
4928:000 | DONE cmt | na 16 16 |        |             |                 ; during compilation mode. Fortunately, we saved the nt so life
4929:000 | DONE cmt | na 16 16 |        |             |                 ; is easier
4930:000 | DONE ins | na 16 16 | 0075c2 | b2 08       |                 lda.di 000208        
4931:000 | DONE ins | na 16 16 | 0075c4 | eb          |                 xba                  flags are MSB
4932:000 | DONE ins | na 16 16 | 0075c5 | 29 02 00    |                 and.# IM             Mask all but IM bit
4933:000 | DONE ins | na 16 16 | 0075c8 | d0 f2       |                 bne 0075bc           IMMEDIATE word, execute right now
4934:000 | DONE wsp | na 16 16 |        |             |
4935:000 | DONE cmt | na 16 16 |        |             |                 ; Compile the xt into the Dictionary with COMPILE,
4936:000 | DONE ins | na 16 16 | 0075ca | 20 77 65    |                 jsr 006577           
4937:000 | DONE ins | na 16 16 | 0075cd | 4c 82 75    |                 jmp 007582           
4938:000 | DONE wsp | na 16 16 |        |             |
4939:000 | DONE lbl | na 16 16 | 0075d0 |             | interpret_line_done                  
4940:000 | DONE cmt | na 16 16 |        |             |                 ; drop stuff from PARSE_NAME
4941:000 | DONE ins | na 16 16 | 0075d0 | b4 02       |                 ldy.dx 02            
4942:000 | DONE ins | na 16 16 | 0075d2 | e8          |                 inx                  
4943:000 | DONE ins | na 16 16 | 0075d3 | e8          |                 inx                  
4944:000 | DONE ins | na 16 16 | 0075d4 | e8          |                 inx                  
4945:000 | DONE ins | na 16 16 | 0075d5 | e8          |                 inx                  
4946:000 | DONE wsp | na 16 16 |        |             |
4947:000 | DONE ins | na 16 16 | 0075d6 | 60          |                 rts                  
4948:000 | DONE wsp | na 16 16 |        |             |
4949:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
4950:000 | DONE cmt | na 16 16 |        |             | ; COMPILE WORDS, JUMPS AND SUBROUTINE JUMPS INTO CODE
4951:000 | DONE cmt | na 16 16 |        |             | ; These three routines compile instructions such as "jsr xt_words" into a word
4952:000 | DONE cmt | na 16 16 |        |             | ; at compile time so they are available at run time. Use by pushing the word or
4953:000 | DONE cmt | na 16 16 |        |             | ; address to be compiled on the Return Stack with
4954:000 | DONE cmt | na 16 16 |        |             | ;
4955:000 | DONE cmt | na 16 16 |        |             | ;       phe.# <WORD>    ; PEA <WORD>
4956:000 | DONE cmt | na 16 16 |        |             | ;
4957:000 | DONE cmt | na 16 16 |        |             | ; Followed by a jump to which ever versions we need. Words that use this routine
4958:000 | DONE cmt | na 16 16 |        |             | ; may not be natively compiled. We use "cmpl" as not to confuse these routines
4959:000 | DONE cmt | na 16 16 |        |             | ; with the COMPILE, word. This routine uses tmptos. Always call this with
4960:000 | DONE cmt | na 16 16 |        |             | ; a subroutine jump, which means no combining JSR/RTS to JMP.
4961:000 | DONE cmt | na 16 16 |        |             | ; TODO see if we need to add a JSR.L variant at some point
4962:000 | DONE wsp | na 16 16 |        |             |
4963:000 | DONE dir | na 16 16 |        |             |         .!a16                        paranoid
4964:000 | DONE lbl | na 16 16 | 0075d7 |             | cmpl_word                            
4965:000 | DONE ins | na 16 16 | 0075d7 | a9 00 00    |                 lda.# 0000           zero value as a flag, compile word only
4966:000 | DONE ins | na 16 16 | 0075da | 80 08       |                 bra 0075e4           
4967:000 | DONE lbl | na 16 16 | 0075dc |             | cmpl_subroutine                      
4968:000 | DONE ins | na 16 16 | 0075dc | a9 20 00    |                 lda.# 0020           compile "JSR" opcode first
4969:000 | DONE ins | na 16 16 | 0075df | 80 03       |                 bra 0075e4           
4970:000 | DONE lbl | na 16 16 | 0075e1 |             | cmpl_jump                            
4971:000 | DONE ins | na 16 16 | 0075e1 | a9 4c 00    |                 lda.# 004c           compile "JMP", fall through to cmpl_common
4972:000 | DONE lbl | na 16 16 | 0075e4 |             | cmpl_common                          
4973:000 | DONE cmt | na 16 16 |        |             |                 ; we're going to need the Y register to get anything done
4974:000 | DONE ins | na 16 16 | 0075e4 | 84 12       |                 sty.d 000212         
4975:000 | DONE wsp | na 16 16 |        |             |
4976:000 | DONE ins | na 16 16 | 0075e6 | a8          |                 tay                  force flag check
4977:000 | DONE ins | na 16 16 | 0075e7 | f0 08       |                 beq 0075f1           came in through cmpl_word, just compile body
4978:000 | DONE wsp | na 16 16 |        |             |
4979:000 | DONE cmt | na 16 16 |        |             |                 ; A contains an opcode that must be compiled first. This is an
4980:000 | DONE cmt | na 16 16 |        |             |                 ; optimized version of C, ("c-comma")
4981:000 | DONE ins | na 16 16 | 0075e9 | e2 20       |                 sep 20               
4981:001 | DONE ctl | na  8 16 |        |             |         .!a8
4982:000 | DONE ins | na  8 16 | 0075eb | 92 28       |                 sta.di 000228        STA (CP)
4983:000 | DONE ins | na  8 16 | 0075ed | c2 20       |                 rep 20               
4983:001 | DONE ctl | na 16 16 |        |             |         .!a16
4984:000 | DONE ins | na 16 16 | 0075ef | e6 28       |                 inc.d 000228         fall through to cmpl_body
4985:000 | DONE lbl | na 16 16 | 0075f1 |             | cmpl_body                            
4986:000 | DONE ins | na 16 16 | 0075f1 | 7a          |                 ply                  the return address we'll need later
4987:000 | DONE wsp | na 16 16 |        |             |
4988:000 | DONE ins | na 16 16 | 0075f2 | 68          |                 pla                  next value on stack is the word to compile
4989:000 | DONE ins | na 16 16 | 0075f3 | 92 28       |                 sta.di 000228        this is a quicker version of , ("comma")
4990:000 | DONE ins | na 16 16 | 0075f5 | e6 28       |                 inc.d 000228         
4991:000 | DONE ins | na 16 16 | 0075f7 | e6 28       |                 inc.d 000228         
4992:000 | DONE wsp | na 16 16 |        |             |
4993:000 | DONE ins | na 16 16 | 0075f9 | 5a          |                 phy                  make sure we can get back home
4994:000 | DONE wsp | na 16 16 |        |             |
4995:000 | DONE ins | na 16 16 | 0075fa | a4 12       |                 ldy.d 000212         restore Data Stack
4996:000 | DONE wsp | na 16 16 |        |             |
4997:000 | DONE ins | na 16 16 | 0075fc | 60          |                 rts                  
4998:000 | DONE wsp | na 16 16 |        |             |
4999:000 | DONE wsp | na 16 16 |        |             |
5000:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
5001:000 | DONE cmt | na 16 16 |        |             | ; FATAL ERROR
5002:000 | DONE cmt | na 16 16 |        |             | ; Take address of error string from A, print it and then call abort
5003:000 | DONE lbl | na 16 16 | 0075fd |             | error                                
5004:000 | DONE ins | na 16 16 | 0075fd | 20 03 76    |                 jsr 007603           
5005:000 | DONE ins | na 16 16 | 007600 | 4c 97 60    |                 jmp 006097           
5006:000 | DONE wsp | na 16 16 |        |             |
5007:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
5008:000 | DONE cmt | na 16 16 |        |             | ; Print a zero terminated string to the console, adding a CR character. Takes
5009:000 | DONE cmt | na 16 16 |        |             | ; the address of the string in 16-bit A register, calls put_chr.  A is
5010:000 | DONE cmt | na 16 16 |        |             | ; destroyed. We could probably figure out some way to use TYPE instead, but zero
5011:000 | DONE cmt | na 16 16 |        |             | ; terminated strings are easier for the 65816 to use.
5012:000 | DONE cmt | na 16 16 |        |             | ; TODO add version without final line feed
5013:000 | DONE lbl | na 16 16 | 007603 |             | print_string                         
5014:000 | DONE dir | na 16 16 |        |             |         .!a16                        
5015:000 | DONE dir | na 16 16 |        |             |         .!xy16                       
5016:000 | DONE cmt | na 16 16 |        |             |                 ; don't use tmpdsp for X because we don't know if the user has
5017:000 | DONE cmt | na 16 16 |        |             |                 ; used it for something already
5018:000 | DONE ins | na 16 16 | 007603 | da          |                 phx                  
5019:000 | DONE ins | na 16 16 | 007604 | aa          |                 tax                  x16 contains address of string
5020:000 | DONE lbl | na 16 16 | 007605 |             | @                                    
5021:000 | DONE ins | na 16 16 | 007605 | e2 20       |                 sep 20               
5021:001 | DONE ctl | na  8 16 |        |             |         .!a8
5022:000 | DONE ins | na  8 16 | 007607 | bd 00 00    |                 lda.x 0000           LDA $0000,X
5023:000 | DONE ins | na  8 16 | 00760a | f0 06       |                 beq 007612           
5024:000 | DONE ins | na  8 16 | 00760c | 20 36 60    |                 jsr 006036           
5025:000 | DONE ins | na  8 16 | 00760f | e8          |                 inx                  
5026:000 | DONE ins | na  8 16 | 007610 | 80 f3       |                 bra 007605           
5027:000 | DONE wsp | na  8 16 |        |             |
5028:000 | DONE lbl | na  8 16 | 007612 |             | print_string_done                    
5029:000 | DONE ins | na  8 16 | 007612 | a9 0a       |                 lda.# AscLF          should be CR on some systems
5030:000 | DONE ins | na  8 16 | 007614 | 20 36 60    |                 jsr 006036           
5031:000 | DONE ins | na  8 16 | 007617 | c2 20       |                 rep 20               
5031:001 | DONE ctl | na 16 16 |        |             |         .!a16
5032:000 | DONE ins | na 16 16 | 007619 | fa          |                 plx                  
5033:000 | DONE ins | na 16 16 | 00761a | 60          |                 rts                  
5034:000 | DONE wsp | na 16 16 |        |             |
5035:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
5036:000 | DONE cmt | na 16 16 |        |             | ; CONVERT BYTE TO ASCII
5037:000 | DONE cmt | na 16 16 |        |             | ; Convert byte in A to two ASCII hex digits and print them. Calls
5038:000 | DONE cmt | na 16 16 |        |             | ; nibble_to_ascii. Assumes A is 8 bit.
5039:000 | DONE lbl | na 16 16 | 00761b |             | byte_to_ascii                        
5040:000 | DONE ins | na 16 16 | 00761b | 48          |                 pha                  
5041:000 | DONE cmt | na 16 16 |        |             |                 ; convert high nibble first
5042:000 | DONE ins | na 16 16 | 00761c | 4a          |                 lsr.a                
5043:000 | DONE ins | na 16 16 | 00761d | 4a          |                 lsr.a                
5044:000 | DONE ins | na 16 16 | 00761e | 4a          |                 lsr.a                
5045:000 | DONE ins | na 16 16 | 00761f | 4a          |                 lsr.a                
5046:000 | DONE ins | na 16 16 | 007620 | 20 24 76    |                 jsr 007624           
5047:000 | DONE wsp | na 16 16 |        |             |
5048:000 | DONE ins | na 16 16 | 007623 | 68          |                 pla                  
5049:000 | DONE wsp | na 16 16 |        |             |
5050:000 | DONE cmt | na 16 16 |        |             |                 ; fall thru to nibble_to_ascii
5051:000 | DONE wsp | na 16 16 |        |             |
5052:000 | DONE wsp | na 16 16 |        |             |
5053:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
5054:000 | DONE cmt | na 16 16 |        |             | ; CONVERT NIBBLE TO ASCII
5055:000 | DONE cmt | na 16 16 |        |             | ; Converts the lower nibble of a number in A and returns the ASCII character
5056:000 | DONE cmt | na 16 16 |        |             | ; number, then prints it. Assumes A is 8 bit
5057:000 | DONE lbl | na 16 16 | 007624 |             | nibble_to_ascii                      
5058:000 | DONE ins | na 16 16 | 007624 | 29 0f 00    |                 and.# 000f           
5059:000 | DONE ins | na 16 16 | 007627 | 09 30 00    |                 ora.# 30             
5060:000 | DONE ins | na 16 16 | 00762a | c9 3a 00    |                 cmp.# 003a           '9' + 1
5061:000 | DONE ins | na 16 16 | 00762d | 90 03       |                 bcc 007632           
5062:000 | DONE ins | na 16 16 | 00762f | 69 06 00    |                 adc.# 0006           
5063:000 | DONE lbl | na 16 16 | 007632 |             | @                                    
5064:000 | DONE ins | na 16 16 | 007632 | 20 36 60    |                 jsr 006036           
5065:000 | DONE dir | na 16 16 |        |             |         .!a16                        
5066:000 | DONE ins | na 16 16 | 007635 | 60          |                 rts                  
5067:000 | DONE wsp | na 16 16 |        |             |
5068:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
5069:000 | DONE cmt | na 16 16 |        |             | ; Convert a string given by ( addr u ) to lowercase in place. Since we have to
5070:000 | DONE cmt | na 16 16 |        |             | ; treat the input buffer as read-only by ANS rules, we have to put the converted
5071:000 | DONE cmt | na 16 16 |        |             | ; string somewhere and then return the new address and length
5072:000 | DONE lbl | na 16 16 | 007636 |             | string_to_lowercase                  
5073:000 | DONE cmt | na 16 16 |        |             |                 ; TODO CODE THIS
5074:000 | DONE ins | na 16 16 | 007636 | 60          |                 rts                  
5075:000 | DONE wsp | na 16 16 |        |             |
5076:000 | DONE wsp | na 16 16 |        |             |
5077:000 | DONE cmt | na 16 16 |        |             | ; ===================================================================
5078:000 | DONE cmt | na 16 16 |        |             | ; HIGH-LEVEL WORDS
5079:000 | DONE wsp | na 16 16 |        |             |
5080:000 | DONE cmt | na 16 16 |        |             | ; These are executed during start up. Remember that we have to put a space at
5081:000 | DONE cmt | na 16 16 |        |             | ; the end of the line if there is another line with code following it. No zero
5082:000 | DONE cmt | na 16 16 |        |             | ; or CR/LF is required
5083:000 | DONE lbl | na 16 16 | 007637 |             | hi-start                             
5084:000 | DONE dir | na 16 16 | 007637 | (37 bytes)  |         .byte 3a, 20, 28, 20, 5b, 63, 68, 61, 72, 5d, 20, 29, 20, (...) 
5084:000 | DONE dir | na 16 16 |        |             |                 3a 20 28 20 5b 63 68 61  --  :   (   [ c h a
5084:000 | DONE dir | na 16 16 |        |             |                 72 5d 20 29 20 70 61 72  --  r ]   )   p a r
5084:000 | DONE dir | na 16 16 |        |             |                 73 65 20 32 64 72 6f 70  --  s e   2 d r o p
5084:000 | DONE dir | na 16 16 |        |             |                 20 3b 20 69 6d 6d 65 64  --    ;   i m m e d
5084:000 | DONE dir | na 16 16 |        |             |                 69 61 74 65 20           --  i a t e  
5085:000 | DONE dir | na 16 16 | 00765c | (37 bytes)  |         .byte 3a, 20, 2e, 28, 20, 5b, 63, 68, 61, 72, 5d, 20, 29, (...) 
5085:000 | DONE dir | na 16 16 |        |             |                 3a 20 2e 28 20 5b 63 68  --  :   . (   [ c h
5085:000 | DONE dir | na 16 16 |        |             |                 61 72 5d 20 29 20 70 61  --  a r ]   )   p a
5085:000 | DONE dir | na 16 16 |        |             |                 72 73 65 20 74 79 70 65  --  r s e   t y p e
5085:000 | DONE dir | na 16 16 |        |             |                 20 3b 20 69 6d 6d 65 64  --    ;   i m m e d
5085:000 | DONE dir | na 16 16 |        |             |                 69 61 74 65 20           --  i a t e  
5086:000 | DONE wsp | na 16 16 |        |             |
5087:000 | DONE cmt | na 16 16 |        |             |         ; High flow control. Some of these could be realized with CS-ROLL and
5088:000 | DONE cmt | na 16 16 |        |             |         ; CS-PICK instead
5089:000 | DONE dir | na 16 16 | 007681 | (56 bytes)  |         .byte 3a, 20, 69, 66, 20, 70, 6f, 73, 74, 70, 6f, 6e, 65, (...) 
5089:000 | DONE dir | na 16 16 |        |             |                 3a 20 69 66 20 70 6f 73  --  :   i f   p o s
5089:000 | DONE dir | na 16 16 |        |             |                 74 70 6f 6e 65 20 30 62  --  t p o n e   0 b
5089:000 | DONE dir | na 16 16 |        |             |                 72 61 6e 63 68 20 68 65  --  r a n c h   h e
5089:000 | DONE dir | na 16 16 |        |             |                 72 65 20 30 20 2c 20 3b  --  r e   0   ,   ;
5089:000 | DONE dir | na 16 16 |        |             |                 20 69 6d 6d 65 64 69 61  --    i m m e d i a
5089:000 | DONE dir | na 16 16 |        |             |                 74 65 20 63 6f 6d 70 69  --  t e   c o m p i
5089:000 | DONE dir | na 16 16 |        |             |                 6c 65 2d 6f 6e 6c 79 20  --  l e - o n l y  
5089:000 | DONE dir | na 16 16 |        |             |                                          -- 
5090:000 | DONE dir | na 16 16 | 0076b9 | (44 bytes)  |         .byte 3a, 20, 74, 68, 65, 6e, 20, 68, 65, 72, 65, 20, 73, (...) 
5090:000 | DONE dir | na 16 16 |        |             |                 3a 20 74 68 65 6e 20 68  --  :   t h e n   h
5090:000 | DONE dir | na 16 16 |        |             |                 65 72 65 20 73 77 61 70  --  e r e   s w a p
5090:000 | DONE dir | na 16 16 |        |             |                 20 21 20 3b 20 69 6d 6d  --    !   ;   i m m
5090:000 | DONE dir | na 16 16 |        |             |                 65 64 69 61 74 65 20 63  --  e d i a t e   c
5090:000 | DONE dir | na 16 16 |        |             |                 6f 6d 70 69 6c 65 2d 6f  --  o m p i l e - o
5090:000 | DONE dir | na 16 16 |        |             |                 6e 6c 79 20              --  n l y  
5091:000 | DONE dir | na 16 16 | 0076e5 | (68 bytes)  |         .byte 3a, 20, 65, 6c, 73, 65, 20, 70, 6f, 73, 74, 70, 6f, (...) 
5091:000 | DONE dir | na 16 16 |        |             |                 3a 20 65 6c 73 65 20 70  --  :   e l s e   p
5091:000 | DONE dir | na 16 16 |        |             |                 6f 73 74 70 6f 6e 65 20  --  o s t p o n e  
5091:000 | DONE dir | na 16 16 |        |             |                 62 72 61 6e 63 68 20 68  --  b r a n c h   h
5091:000 | DONE dir | na 16 16 |        |             |                 65 72 65 20 30 20 2c 20  --  e r e   0   ,  
5091:000 | DONE dir | na 16 16 |        |             |                 68 65 72 65 20 72 6f 74  --  h e r e   r o t
5091:000 | DONE dir | na 16 16 |        |             |                 20 21 20 3b 20 69 6d 6d  --    !   ;   i m m
5091:000 | DONE dir | na 16 16 |        |             |                 65 64 69 61 74 65 20 63  --  e d i a t e   c
5091:000 | DONE dir | na 16 16 |        |             |                 6f 6d 70 69 6c 65 2d 6f  --  o m p i l e - o
5091:000 | DONE dir | na 16 16 |        |             |                 6e 6c 79 20              --  n l y  
5092:000 | DONE dir | na 16 16 | 007729 | (61 bytes)  |         .byte 3a, 20, 72, 65, 70, 65, 61, 74, 20, 70, 6f, 73, 74, (...) 
5092:000 | DONE dir | na 16 16 |        |             |                 3a 20 72 65 70 65 61 74  --  :   r e p e a t
5092:000 | DONE dir | na 16 16 |        |             |                 20 70 6f 73 74 70 6f 6e  --    p o s t p o n
5092:000 | DONE dir | na 16 16 |        |             |                 65 20 61 67 61 69 6e 20  --  e   a g a i n  
5092:000 | DONE dir | na 16 16 |        |             |                 68 65 72 65 20 73 77 61  --  h e r e   s w a
5092:000 | DONE dir | na 16 16 |        |             |                 70 20 21 20 3b 20 69 6d  --  p   !   ;   i m
5092:000 | DONE dir | na 16 16 |        |             |                 6d 65 64 69 61 74 65 20  --  m e d i a t e  
5092:000 | DONE dir | na 16 16 |        |             |                 63 6f 6d 70 69 6c 65 2d  --  c o m p i l e -
5092:000 | DONE dir | na 16 16 |        |             |                 6f 6e 6c 79 20           --  o n l y  
5093:000 | DONE dir | na 16 16 | 007766 | (52 bytes)  |         .byte 3a, 20, 75, 6e, 74, 69, 6c, 20, 70, 6f, 73, 74, 70, (...) 
5093:000 | DONE dir | na 16 16 |        |             |                 3a 20 75 6e 74 69 6c 20  --  :   u n t i l  
5093:000 | DONE dir | na 16 16 |        |             |                 70 6f 73 74 70 6f 6e 65  --  p o s t p o n e
5093:000 | DONE dir | na 16 16 |        |             |                 20 30 62 72 61 6e 63 68  --    0 b r a n c h
5093:000 | DONE dir | na 16 16 |        |             |                 20 2c 20 3b 20 69 6d 6d  --    ,   ;   i m m
5093:000 | DONE dir | na 16 16 |        |             |                 65 64 69 61 74 65 20 63  --  e d i a t e   c
5093:000 | DONE dir | na 16 16 |        |             |                 6f 6d 70 69 6c 65 2d 6f  --  o m p i l e - o
5093:000 | DONE dir | na 16 16 |        |             |                 6e 6c 79 20              --  n l y  
5094:000 | DONE dir | na 16 16 | 00779a | (64 bytes)  |         .byte 3a, 20, 77, 68, 69, 6c, 65, 20, 70, 6f, 73, 74, 70, (...) 
5094:000 | DONE dir | na 16 16 |        |             |                 3a 20 77 68 69 6c 65 20  --  :   w h i l e  
5094:000 | DONE dir | na 16 16 |        |             |                 70 6f 73 74 70 6f 6e 65  --  p o s t p o n e
5094:000 | DONE dir | na 16 16 |        |             |                 20 30 62 72 61 6e 63 68  --    0 b r a n c h
5094:000 | DONE dir | na 16 16 |        |             |                 20 68 65 72 65 20 30 20  --    h e r e   0  
5094:000 | DONE dir | na 16 16 |        |             |                 2c 20 73 77 61 70 20 3b  --  ,   s w a p   ;
5094:000 | DONE dir | na 16 16 |        |             |                 20 69 6d 6d 65 64 69 61  --    i m m e d i a
5094:000 | DONE dir | na 16 16 |        |             |                 74 65 20 63 6f 6d 70 69  --  t e   c o m p i
5094:000 | DONE dir | na 16 16 |        |             |                 6c 65 2d 6f 6e 6c 79 20  --  l e - o n l y  
5094:000 | DONE dir | na 16 16 |        |             |                                          -- 
5095:000 | DONE wsp | na 16 16 |        |             |
5096:000 | DONE cmt | na 16 16 |        |             |         ; DEFER and friends. Code taken from ANSI Forth specifications. Many of
5097:000 | DONE cmt | na 16 16 |        |             |         ; these will be moved to assembler code in due course
5098:000 | DONE dir | na 16 16 | 0077da | (45 bytes)  |         .byte 3a, 20, 64, 65, 66, 65, 72, 20, 63, 72, 65, 61, 74, (...) 
5098:000 | DONE dir | na 16 16 |        |             |                 3a 20 64 65 66 65 72 20  --  :   d e f e r  
5098:000 | DONE dir | na 16 16 |        |             |                 63 72 65 61 74 65 20 5b  --  c r e a t e   [
5098:000 | DONE dir | na 16 16 |        |             |                 27 5d 20 61 62 6f 72 74  --  ' ]   a b o r t
5098:000 | DONE dir | na 16 16 |        |             |                 20 2c 20 64 6f 65 73 3e  --    ,   d o e s >
5098:000 | DONE dir | na 16 16 |        |             |                 20 40 20 65 78 65 63 75  --    @   e x e c u
5098:000 | DONE dir | na 16 16 |        |             |                 74 65 20 3b 20           --  t e   ;  
5099:000 | DONE dir | na 16 16 | 007807 | (19 bytes)  |         .byte 3a, 20, 64, 65, 66, 65, 72, 21, 20, 3e, 62, 6f, 64, (...) 
5099:000 | DONE dir | na 16 16 |        |             |                 3a 20 64 65 66 65 72 21  --  :   d e f e r !
5099:000 | DONE dir | na 16 16 |        |             |                 20 3e 62 6f 64 79 20 21  --    > b o d y   !
5099:000 | DONE dir | na 16 16 |        |             |                 20 3b 20                 --    ;  
5100:000 | DONE dir | na 16 16 | 00781a | (19 bytes)  |         .byte 3a, 20, 64, 65, 66, 65, 72, 40, 20, 3e, 62, 6f, 64, (...) 
5100:000 | DONE dir | na 16 16 |        |             |                 3a 20 64 65 66 65 72 40  --  :   d e f e r @
5100:000 | DONE dir | na 16 16 |        |             |                 20 3e 62 6f 64 79 20 40  --    > b o d y   @
5100:000 | DONE dir | na 16 16 |        |             |                 20 3b 20                 --    ;  
5101:000 | DONE dir | na 16 16 | 00782d | (76 bytes)  |         .byte 3a, 20, 69, 73, 20, 73, 74, 61, 74, 65, 20, 40, 20, (...) 
5101:000 | DONE dir | na 16 16 |        |             |                 3a 20 69 73 20 73 74 61  --  :   i s   s t a
5101:000 | DONE dir | na 16 16 |        |             |                 74 65 20 40 20 69 66 20  --  t e   @   i f  
5101:000 | DONE dir | na 16 16 |        |             |                 70 6f 73 74 70 6f 6e 65  --  p o s t p o n e
5101:000 | DONE dir | na 16 16 |        |             |                 20 5b 27 5d 20 70 6f 73  --    [ ' ]   p o s
5101:000 | DONE dir | na 16 16 |        |             |                 74 70 6f 6e 65 20 64 65  --  t p o n e   d e
5101:000 | DONE dir | na 16 16 |        |             |                 66 65 72 21 20 65 6c 73  --  f e r !   e l s
5101:000 | DONE dir | na 16 16 |        |             |                 65 20 27 20 64 65 66 65  --  e   '   d e f e
5101:000 | DONE dir | na 16 16 |        |             |                 72 21 20 74 68 65 6e 20  --  r !   t h e n  
5101:000 | DONE dir | na 16 16 |        |             |                 3b 20 69 6d 6d 65 64 69  --  ;   i m m e d i
5101:000 | DONE dir | na 16 16 |        |             |                 61 74 65 20              --  a t e  
5102:000 | DONE dir | na 16 16 | 007879 | (83 bytes)  |         .byte 3a, 20, 61, 63, 74, 69, 6f, 6e, 2d, 6f, 66, 20, 73, (...) 
5102:000 | DONE dir | na 16 16 |        |             |                 3a 20 61 63 74 69 6f 6e  --  :   a c t i o n
5102:000 | DONE dir | na 16 16 |        |             |                 2d 6f 66 20 73 74 61 74  --  - o f   s t a t
5102:000 | DONE dir | na 16 16 |        |             |                 65 20 40 20 69 66 20 70  --  e   @   i f   p
5102:000 | DONE dir | na 16 16 |        |             |                 6f 73 74 70 6f 6e 65 20  --  o s t p o n e  
5102:000 | DONE dir | na 16 16 |        |             |                 5b 27 5d 20 70 6f 73 74  --  [ ' ]   p o s t
5102:000 | DONE dir | na 16 16 |        |             |                 70 6f 6e 65 20 64 65 66  --  p o n e   d e f
5102:000 | DONE dir | na 16 16 |        |             |                 65 72 40 20 65 6c 73 65  --  e r @   e l s e
5102:000 | DONE dir | na 16 16 |        |             |                 20 27 20 64 65 66 65 72  --    '   d e f e r
5102:000 | DONE dir | na 16 16 |        |             |                 40 20 74 68 65 6e 20 3b  --  @   t h e n   ;
5102:000 | DONE dir | na 16 16 |        |             |                 20 69 6d 6d 65 64 69 61  --    i m m e d i a
5102:000 | DONE dir | na 16 16 |        |             |                 74 65 20                 --  t e  
5103:000 | DONE wsp | na 16 16 |        |             |
5104:000 | DONE cmt | na 16 16 |        |             |         ; High level math definitions. The should be moved to actual 65816 code
5105:000 | DONE cmt | na 16 16 |        |             |         ; for speed at some point. Note we use SM/REM instead of FM/MOD for most
5106:000 | DONE cmt | na 16 16 |        |             |         ; stuff
5107:000 | DONE dir | na 16 16 | 0078cc | (33 bytes)  |         .byte 3a, 20, 2f, 20, 3e, 72, 20, 73, 3e, 64, 20, 72, 3e, (...) 
5107:000 | DONE dir | na 16 16 |        |             |                 3a 20 2f 20 3e 72 20 73  --  :   /   > r   s
5107:000 | DONE dir | na 16 16 |        |             |                 3e 64 20 72 3e 20 73 6d  --  > d   r >   s m
5107:000 | DONE dir | na 16 16 |        |             |                 2f 72 65 6d 20 73 77 61  --  / r e m   s w a
5107:000 | DONE dir | na 16 16 |        |             |                 70 20 64 72 6f 70 20 3b  --  p   d r o p   ;
5107:000 | DONE dir | na 16 16 |        |             |                 20                       --   
5108:000 | DONE dir | na 16 16 | 0078ed | (26 bytes)  |         .byte 3a, 20, 2f, 6d, 6f, 64, 20, 3e, 72, 20, 73, 3e, 64, (...) 
5108:000 | DONE dir | na 16 16 |        |             |                 3a 20 2f 6d 6f 64 20 3e  --  :   / m o d   >
5108:000 | DONE dir | na 16 16 |        |             |                 72 20 73 3e 64 20 72 3e  --  r   s > d   r >
5108:000 | DONE dir | na 16 16 |        |             |                 20 73 6d 2f 72 65 6d 20  --    s m / r e m  
5108:000 | DONE dir | na 16 16 |        |             |                 3b 20                    --  ;  
5109:000 | DONE dir | na 16 16 | 007907 | (33 bytes)  |         .byte 3a, 20, 2a, 2f, 20, 3e, 72, 20, 6d, 2a, 20, 72, 3e, (...) 
5109:000 | DONE dir | na 16 16 |        |             |                 3a 20 2a 2f 20 3e 72 20  --  :   * /   > r  
5109:000 | DONE dir | na 16 16 |        |             |                 6d 2a 20 72 3e 20 73 6d  --  m *   r >   s m
5109:000 | DONE dir | na 16 16 |        |             |                 2f 72 65 6d 20 73 77 61  --  / r e m   s w a
5109:000 | DONE dir | na 16 16 |        |             |                 70 20 64 72 6f 70 20 3b  --  p   d r o p   ;
5109:000 | DONE dir | na 16 16 |        |             |                 20                       --   
5110:000 | DONE dir | na 16 16 | 007928 | (26 bytes)  |         .byte 3a, 20, 2a, 2f, 6d, 6f, 64, 20, 3e, 72, 20, 6d, 2a, (...) 
5110:000 | DONE dir | na 16 16 |        |             |                 3a 20 2a 2f 6d 6f 64 20  --  :   * / m o d  
5110:000 | DONE dir | na 16 16 |        |             |                 3e 72 20 6d 2a 20 72 3e  --  > r   m *   r >
5110:000 | DONE dir | na 16 16 |        |             |                 20 73 6d 2f 72 65 6d 20  --    s m / r e m  
5110:000 | DONE dir | na 16 16 |        |             |                 3b 20                    --  ;  
5111:000 | DONE wsp | na 16 16 |        |             |
5112:000 | DONE cmt | na 16 16 |        |             |         ; Output definitions. Since these usually involve the user, and humans
5113:000 | DONE cmt | na 16 16 |        |             |         ; are slow, these can stay high-level for the moment. Based on
5114:000 | DONE cmt | na 16 16 |        |             |         ; https://github.com/philburk/pforth/blob/master/fth/numberio.fth
5115:000 | DONE dir | na 16 16 | 007942 | (29 bytes)  |         .byte 3a, 20, 75, 2e, 20, 30, 20, 3c, 23, 20, 23, 73, 20, (...) 
5115:000 | DONE dir | na 16 16 |        |             |                 3a 20 75 2e 20 30 20 3c  --  :   u .   0   <
5115:000 | DONE dir | na 16 16 |        |             |                 23 20 23 73 20 23 3e 20  --  #   # s   # >  
5115:000 | DONE dir | na 16 16 |        |             |                 74 79 70 65 20 73 70 61  --  t y p e   s p a
5115:000 | DONE dir | na 16 16 |        |             |                 63 65 20 3b 20           --  c e   ;  
5116:000 | DONE dir | na 16 16 | 00795f | (44 bytes)  |         .byte 3a, 20, 75, 2e, 72, 20, 3e, 72, 20, 30, 20, 3c, 23, (...) 
5116:000 | DONE dir | na 16 16 |        |             |                 3a 20 75 2e 72 20 3e 72  --  :   u . r   > r
5116:000 | DONE dir | na 16 16 |        |             |                 20 30 20 3c 23 20 23 73  --    0   < #   # s
5116:000 | DONE dir | na 16 16 |        |             |                 20 23 3e 20 72 3e 20 6f  --    # >   r >   o
5116:000 | DONE dir | na 16 16 |        |             |                 76 65 72 20 2d 20 73 70  --  v e r   -   s p
5116:000 | DONE dir | na 16 16 |        |             |                 61 63 65 73 20 74 79 70  --  a c e s   t y p
5116:000 | DONE dir | na 16 16 |        |             |                 65 20 3b 20              --  e   ;  
5117:000 | DONE dir | na 16 16 | 00798b | (60 bytes)  |         .byte 3a, 20, 2e, 72, 20, 3e, 72, 20, 64, 75, 70, 20, 61, (...) 
5117:000 | DONE dir | na 16 16 |        |             |                 3a 20 2e 72 20 3e 72 20  --  :   . r   > r  
5117:000 | DONE dir | na 16 16 |        |             |                 64 75 70 20 61 62 73 20  --  d u p   a b s  
5117:000 | DONE dir | na 16 16 |        |             |                 30 20 3c 23 20 23 73 20  --  0   < #   # s  
5117:000 | DONE dir | na 16 16 |        |             |                 72 6f 74 20 73 69 67 6e  --  r o t   s i g n
5117:000 | DONE dir | na 16 16 |        |             |                 20 23 3e 20 72 3e 20 6f  --    # >   r >   o
5117:000 | DONE dir | na 16 16 |        |             |                 76 65 72 20 2d 20 73 70  --  v e r   -   s p
5117:000 | DONE dir | na 16 16 |        |             |                 61 63 65 73 20 74 79 70  --  a c e s   t y p
5117:000 | DONE dir | na 16 16 |        |             |                 65 20 3b 20              --  e   ;  
5118:000 | DONE dir | na 16 16 | 0079c7 | (28 bytes)  |         .byte 3a, 20, 75, 64, 2e, 20, 3c, 23, 20, 23, 73, 20, 23, (...) 
5118:000 | DONE dir | na 16 16 |        |             |                 3a 20 75 64 2e 20 3c 23  --  :   u d .   < #
5118:000 | DONE dir | na 16 16 |        |             |                 20 23 73 20 23 3e 20 74  --    # s   # >   t
5118:000 | DONE dir | na 16 16 |        |             |                 79 70 65 20 73 70 61 63  --  y p e   s p a c
5118:000 | DONE dir | na 16 16 |        |             |                 65 20 3b 20              --  e   ;  
5119:000 | DONE dir | na 16 16 | 0079e3 | (43 bytes)  |         .byte 3a, 20, 75, 64, 2e, 72, 20, 3e, 72, 20, 3c, 23, 20, (...) 
5119:000 | DONE dir | na 16 16 |        |             |                 3a 20 75 64 2e 72 20 3e  --  :   u d . r   >
5119:000 | DONE dir | na 16 16 |        |             |                 72 20 3c 23 20 23 73 20  --  r   < #   # s  
5119:000 | DONE dir | na 16 16 |        |             |                 23 3e 20 72 3e 20 6f 76  --  # >   r >   o v
5119:000 | DONE dir | na 16 16 |        |             |                 65 72 20 2d 20 73 70 61  --  e r   -   s p a
5119:000 | DONE dir | na 16 16 |        |             |                 63 65 73 20 74 79 70 65  --  c e s   t y p e
5119:000 | DONE dir | na 16 16 |        |             |                 20 3b 20                 --    ;  
5120:000 | DONE dir | na 16 16 | 007a0e | (46 bytes)  |         .byte 3a, 20, 64, 2e, 20, 74, 75, 63, 6b, 20, 64, 61, 62, (...) 
5120:000 | DONE dir | na 16 16 |        |             |                 3a 20 64 2e 20 74 75 63  --  :   d .   t u c
5120:000 | DONE dir | na 16 16 |        |             |                 6b 20 64 61 62 73 20 3c  --  k   d a b s   <
5120:000 | DONE dir | na 16 16 |        |             |                 23 20 23 73 20 72 6f 74  --  #   # s   r o t
5120:000 | DONE dir | na 16 16 |        |             |                 20 73 69 67 6e 20 23 3e  --    s i g n   # >
5120:000 | DONE dir | na 16 16 |        |             |                 20 74 79 70 65 20 73 70  --    t y p e   s p
5120:000 | DONE dir | na 16 16 |        |             |                 61 63 65 20 3b 20        --  a c e   ;  
5121:000 | DONE dir | na 16 16 | 007a3c | (61 bytes)  |         .byte 3a, 20, 64, 2e, 72, 20, 3e, 72, 20, 74, 75, 63, 6b, (...) 
5121:000 | DONE dir | na 16 16 |        |             |                 3a 20 64 2e 72 20 3e 72  --  :   d . r   > r
5121:000 | DONE dir | na 16 16 |        |             |                 20 74 75 63 6b 20 64 61  --    t u c k   d a
5121:000 | DONE dir | na 16 16 |        |             |                 62 73 20 3c 23 20 23 73  --  b s   < #   # s
5121:000 | DONE dir | na 16 16 |        |             |                 20 72 6f 74 20 73 69 67  --    r o t   s i g
5121:000 | DONE dir | na 16 16 |        |             |                 6e 20 23 3e 20 72 3e 20  --  n   # >   r >  
5121:000 | DONE dir | na 16 16 |        |             |                 6f 76 65 72 20 2d 20 73  --  o v e r   -   s
5121:000 | DONE dir | na 16 16 |        |             |                 70 61 63 65 73 20 74 79  --  p a c e s   t y
5121:000 | DONE dir | na 16 16 |        |             |                 70 65 20 3b 20           --  p e   ;  
5122:000 | DONE cmt | na 16 16 |        |             | ;       .byte ": . dup abs 0 <# #s rot sign #> type space ; "
5123:000 | DONE wsp | na 16 16 |        |             |
5124:000 | DONE cmt | na 16 16 |        |             |         ; Splash strings. We leave these as high-level words because they are
5125:000 | DONE cmt | na 16 16 |        |             |         ; generated at the end of the boot process and signal that the other
5126:000 | DONE cmt | na 16 16 |        |             |         ; high-level definitions worked (or at least didn't crash)
5127:000 | DONE dir | na 16 16 | 007a79 | (35 bytes)  |         .byte 2e, 28, 20, 4c, 69, 61, 72, 61, 20, 46, 6f, 72, 74, (...) 
5127:000 | DONE dir | na 16 16 |        |             |                 2e 28 20 4c 69 61 72 61  --  . (   L i a r a
5127:000 | DONE dir | na 16 16 |        |             |                 20 46 6f 72 74 68 20 66  --    F o r t h   f
5127:000 | DONE dir | na 16 16 |        |             |                 6f 72 20 74 68 65 20 57  --  o r   t h e   W
5127:000 | DONE dir | na 16 16 |        |             |                 36 35 43 32 36 35 53 58  --  6 5 C 2 6 5 S X
5127:000 | DONE dir | na 16 16 |        |             |                 42 20 29                 --  B   )
5128:000 | DONE dir | na 16 16 | 007a9c | (39 bytes)  |         .byte 63, 72, 20, 2e, 28, 20, 56, 65, 72, 73, 69, 6f, 6e, (...) 
5128:000 | DONE dir | na 16 16 |        |             |                 63 72 20 2e 28 20 56 65  --  c r   . (   V e
5128:000 | DONE dir | na 16 16 |        |             |                 72 73 69 6f 6e 20 50 52  --  r s i o n   P R
5128:000 | DONE dir | na 16 16 |        |             |                 45 2d 41 4c 50 48 41 20  --  E - A L P H A  
5128:000 | DONE dir | na 16 16 |        |             |                 30 31 2e 20 4d 61 72 63  --  0 1 .   M a r c
5128:000 | DONE dir | na 16 16 |        |             |                 68 20 32 30 31 37 29     --  h   2 0 1 7 )
5129:000 | DONE dir | na 16 16 | 007ac3 | (51 bytes)  |         .byte 63, 72, 20, 2e, 28, 20, 53, 63, 6f, 74, 20, 57, 2e, (...) 
5129:000 | DONE dir | na 16 16 |        |             |                 63 72 20 2e 28 20 53 63  --  c r   . (   S c
5129:000 | DONE dir | na 16 16 |        |             |                 6f 74 20 57 2e 20 53 74  --  o t   W .   S t
5129:000 | DONE dir | na 16 16 |        |             |                 65 76 65 6e 73 6f 6e 20  --  e v e n s o n  
5129:000 | DONE dir | na 16 16 |        |             |                 3c 73 63 6f 74 2e 73 74  --  < s c o t . s t
5129:000 | DONE dir | na 16 16 |        |             |                 65 76 65 6e 73 6f 6e 40  --  e v e n s o n @
5129:000 | DONE dir | na 16 16 |        |             |                 67 6d 61 69 6c 2e 63 6f  --  g m a i l . c o
5129:000 | DONE dir | na 16 16 |        |             |                 6d 3e 29                 --  m > )
5130:000 | DONE dir | na 16 16 | 007af6 | (52 bytes)  |         .byte 63, 72, 20, 2e, 28, 20, 4c, 69, 61, 72, 61, 20, 46, (...) 
5130:000 | DONE dir | na 16 16 |        |             |                 63 72 20 2e 28 20 4c 69  --  c r   . (   L i
5130:000 | DONE dir | na 16 16 |        |             |                 61 72 61 20 46 6f 72 74  --  a r a   F o r t
5130:000 | DONE dir | na 16 16 |        |             |                 68 20 63 6f 6d 65 73 20  --  h   c o m e s  
5130:000 | DONE dir | na 16 16 |        |             |                 77 69 74 68 20 61 62 73  --  w i t h   a b s
5130:000 | DONE dir | na 16 16 |        |             |                 6f 6c 75 74 65 6c 79 20  --  o l u t e l y  
5130:000 | DONE dir | na 16 16 |        |             |                 4e 4f 20 57 41 52 52 41  --  N O   W A R R A
5130:000 | DONE dir | na 16 16 |        |             |                 4e 54 59 29              --  N T Y )
5131:000 | DONE dir | na 16 16 | 007b2a | (28 bytes)  |         .byte 63, 72, 20, 2e, 28, 20, 54, 79, 70, 65, 20, 27, 62, (...) 
5131:000 | DONE dir | na 16 16 |        |             |                 63 72 20 2e 28 20 54 79  --  c r   . (   T y
5131:000 | DONE dir | na 16 16 |        |             |                 70 65 20 27 62 79 65 27  --  p e   ' b y e '
5131:000 | DONE dir | na 16 16 |        |             |                 20 74 6f 20 65 78 69 74  --    t o   e x i t
5131:000 | DONE dir | na 16 16 |        |             |                 29 20 63 72              --  )   c r
5132:000 | DONE lbl | na 16 16 | 007b46 |             | hi-end                               
5133:000 | DONE wsp | na 16 16 |        |             |
5134:000 | DONE wsp | na 16 16 |        |             |
5135:000 | DONE cmt | na 16 16 |        |             | ; ===================================================================
5136:000 | DONE cmt | na 16 16 |        |             | ; BOTTOM INCLUDES
5137:000 | DONE wsp | na 16 16 |        |             |
5138:000 | DONE cmt | na 16 16 |        |             | ; List of Strings for Liara Forth for the W65C265SXB
5138:001 | DONE cmt | na 16 16 |        |             | ; Scot W. Stevenson <scot.stevenson@gmail.com>
5138:002 | DONE cmt | na 16 16 |        |             | ; First version: 01. Apr 2016
5138:003 | DONE cmt | na 16 16 |        |             | ; This version:  21. Feb 2017
5138:004 | DONE wsp | na 16 16 |        |             |
5138:005 | DONE cmt | na 16 16 |        |             | ; This file is included by liaraforth.tasm
5138:006 | DONE wsp | na 16 16 |        |             |
5138:007 | DONE cmt | na 16 16 |        |             | ; ===================================================================
5138:008 | DONE cmt | na 16 16 |        |             | ; GENERAL
5138:009 | DONE wsp | na 16 16 |        |             |
5138:010 | DONE cmt | na 16 16 |        |             | ; All general strings must be zero-terminated, names start with "s_"
5138:011 | DONE cmt | na 16 16 |        |             | ; TODO see if "ok" needs trailing space. The printstring routine adds the EOL
5138:012 | DONE cmt | na 16 16 |        |             | ; character
5138:013 | DONE wsp | na 16 16 |        |             |
5138:014 | DONE lbl | na 16 16 | 007b46 |             | s_ok                                 
5138:015 | DONE dir | na 16 16 | 007b46 | (4 bytes)   |         .byte 20, 6f, 6b, 0          note space at beginning
5138:015 | DONE dir | na 16 16 |        |             |                 20 6f 6b 00              --    o k .
5138:016 | DONE lbl | na 16 16 | 007b4a |             | s_compiled                           
5138:017 | DONE dir | na 16 16 | 007b4a | (10 bytes)  |         .byte 20, 63, 6f, 6d, 70, 69, 6c, 65, 64, 0 
5138:017 | DONE dir | na 16 16 |        |             |                 20 63 6f 6d 70 69 6c 65  --    c o m p i l e
5138:017 | DONE dir | na 16 16 |        |             |                 64 00                    --  d .
5138:018 | DONE wsp | na 16 16 |        |             |
5138:019 | DONE wsp | na 16 16 |        |             |
5138:020 | DONE cmt | na 16 16 |        |             | ; ===================================================================
5138:021 | DONE cmt | na 16 16 |        |             | ; ERROR STRINGS
5138:022 | DONE wsp | na 16 16 |        |             |
5138:023 | DONE cmt | na 16 16 |        |             | ; All error strings must be zero-terminated, names start with "es_"
5138:024 | DONE wsp | na 16 16 |        |             |
5138:025 | DONE lbl | na 16 16 | 007b54 |             | es_allot                             
5138:026 | DONE dir | na 16 16 | 007b54 | (20 bytes)  |         .byte 41, 4c, 4c, 4f, 54, 20, 6f, 75, 74, 20, 6f, 66, 20, (...) 
5138:026 | DONE dir | na 16 16 |        |             |                 41 4c 4c 4f 54 20 6f 75  --  A L L O T   o u
5138:026 | DONE dir | na 16 16 |        |             |                 74 20 6f 66 20 62 6f 75  --  t   o f   b o u
5138:026 | DONE dir | na 16 16 |        |             |                 6e 64 73 00              --  n d s .
5138:027 | DONE lbl | na 16 16 | 007b68 |             | es_channel                           
5138:028 | DONE dir | na 16 16 | 007b68 | (26 bytes)  |         .byte 41, 63, 63, 65, 73, 73, 69, 6e, 67, 20, 75, 6e, 6b, (...) 
5138:028 | DONE dir | na 16 16 |        |             |                 41 63 63 65 73 73 69 6e  --  A c c e s s i n
5138:028 | DONE dir | na 16 16 |        |             |                 67 20 75 6e 6b 6e 6f 77  --  g   u n k n o w
5138:028 | DONE dir | na 16 16 |        |             |                 6e 20 63 68 61 6e 6e 65  --  n   c h a n n e
5138:028 | DONE dir | na 16 16 |        |             |                 6c 00                    --  l .
5138:029 | DONE lbl | na 16 16 | 007b82 |             | es_componly                          
5138:030 | DONE dir | na 16 16 | 007b82 | (33 bytes)  |         .byte 49, 6e, 74, 65, 72, 70, 72, 65, 74, 69, 6e, 67, 20, (...) 
5138:030 | DONE dir | na 16 16 |        |             |                 49 6e 74 65 72 70 72 65  --  I n t e r p r e
5138:030 | DONE dir | na 16 16 |        |             |                 74 69 6e 67 20 61 20 63  --  t i n g   a   c
5138:030 | DONE dir | na 16 16 |        |             |                 6f 6d 70 69 6c 65 2d 6f  --  o m p i l e - o
5138:030 | DONE dir | na 16 16 |        |             |                 6e 6c 79 20 77 6f 72 64  --  n l y   w o r d
5138:030 | DONE dir | na 16 16 |        |             |                 00                       --  .
5138:031 | DONE lbl | na 16 16 | 007ba3 |             | es_defer                             
5138:032 | DONE dir | na 16 16 | 007ba3 | (29 bytes)  |         .byte 44, 45, 46, 45, 52, 65, 64, 20, 77, 6f, 72, 64, 20, (...) 
5138:032 | DONE dir | na 16 16 |        |             |                 44 45 46 45 52 65 64 20  --  D E F E R e d  
5138:032 | DONE dir | na 16 16 |        |             |                 77 6f 72 64 20 6e 6f 74  --  w o r d   n o t
5138:032 | DONE dir | na 16 16 |        |             |                 20 64 65 66 69 6e 65 64  --    d e f i n e d
5138:032 | DONE dir | na 16 16 |        |             |                 20 79 65 74 00           --    y e t .
5138:033 | DONE lbl | na 16 16 | 007bc0 |             | es_divzero                           
5138:034 | DONE dir | na 16 16 | 007bc0 | (17 bytes)  |         .byte 44, 69, 76, 69, 73, 69, 6f, 6e, 20, 62, 79, 20, 7a, (...) 
5138:034 | DONE dir | na 16 16 |        |             |                 44 69 76 69 73 69 6f 6e  --  D i v i s i o n
5138:034 | DONE dir | na 16 16 |        |             |                 20 62 79 20 7a 65 72 6f  --    b y   z e r o
5138:034 | DONE dir | na 16 16 |        |             |                 00                       --  .
5138:035 | DONE lbl | na 16 16 | 007bd1 |             | es_error                             
5138:036 | DONE dir | na 16 16 | 007bd1 | (12 bytes)  |         .byte 3e, 3e, 3e, 45, 72, 72, 6f, 72, 3c, 3c, 3c, 0 
5138:036 | DONE dir | na 16 16 |        |             |                 3e 3e 3e 45 72 72 6f 72  --  > > > E r r o r
5138:036 | DONE dir | na 16 16 |        |             |                 3c 3c 3c 00              --  < < < .
5138:037 | DONE lbl | na 16 16 | 007bdd |             | es_intonly                           
5138:038 | DONE dir | na 16 16 | 007bdd | (22 bytes)  |         .byte 4e, 6f, 74, 20, 69, 6e, 20, 69, 6e, 74, 65, 72, 70, (...) 
5138:038 | DONE dir | na 16 16 |        |             |                 4e 6f 74 20 69 6e 20 69  --  N o t   i n   i
5138:038 | DONE dir | na 16 16 |        |             |                 6e 74 65 72 70 72 65 74  --  n t e r p r e t
5138:038 | DONE dir | na 16 16 |        |             |                 20 6d 6f 64 65 00        --    m o d e .
5138:039 | DONE lbl | na 16 16 | 007bf3 |             | es_noname                            
5138:040 | DONE dir | na 16 16 | 007bf3 | (16 bytes)  |         .byte 50, 61, 72, 73, 69, 6e, 67, 20, 66, 61, 69, 6c, 75, (...) 
5138:040 | DONE dir | na 16 16 |        |             |                 50 61 72 73 69 6e 67 20  --  P a r s i n g  
5138:040 | DONE dir | na 16 16 |        |             |                 66 61 69 6c 75 72 65 00  --  f a i l u r e .
5138:040 | DONE dir | na 16 16 |        |             |                                          -- 
5138:041 | DONE lbl | na 16 16 | 007c03 |             | es_radix                             
5138:042 | DONE dir | na 16 16 | 007c03 | (23 bytes)  |         .byte 44, 69, 67, 69, 74, 20, 6c, 61, 72, 67, 65, 72, 20, (...) 
5138:042 | DONE dir | na 16 16 |        |             |                 44 69 67 69 74 20 6c 61  --  D i g i t   l a
5138:042 | DONE dir | na 16 16 |        |             |                 72 67 65 72 20 74 68 61  --  r g e r   t h a
5138:042 | DONE dir | na 16 16 |        |             |                 6e 20 62 61 73 65 00     --  n   b a s e .
5138:043 | DONE lbl | na 16 16 | 007c1a |             | es_refill1                           
5138:044 | DONE dir | na 16 16 | 007c1a | (46 bytes)  |         .byte 51, 55, 49, 54, 20, 63, 6f, 75, 6c, 64, 20, 6e, 6f, (...) 
5138:044 | DONE dir | na 16 16 |        |             |                 51 55 49 54 20 63 6f 75  --  Q U I T   c o u
5138:044 | DONE dir | na 16 16 |        |             |                 6c 64 20 6e 6f 74 20 67  --  l d   n o t   g
5138:044 | DONE dir | na 16 16 |        |             |                 65 74 20 69 6e 70 75 74  --  e t   i n p u t
5138:044 | DONE dir | na 16 16 |        |             |                 20 28 52 45 46 49 4c 4c  --    ( R E F I L L
5138:044 | DONE dir | na 16 16 |        |             |                 20 72 65 74 75 72 6e 65  --    r e t u r n e
5138:044 | DONE dir | na 16 16 |        |             |                 64 20 2d 31 29 00        --  d   - 1 ) .
5138:045 | DONE lbl | na 16 16 | 007c48 |             | es_refill2                           
5138:046 | DONE dir | na 16 16 | 007c48 | (32 bytes)  |         .byte 49, 6c, 6c, 65, 67, 61, 6c, 20, 53, 4f, 55, 52, 43, (...) 
5138:046 | DONE dir | na 16 16 |        |             |                 49 6c 6c 65 67 61 6c 20  --  I l l e g a l  
5138:046 | DONE dir | na 16 16 |        |             |                 53 4f 55 52 43 45 2d 49  --  S O U R C E - I
5138:046 | DONE dir | na 16 16 |        |             |                 44 20 64 75 72 69 6e 67  --  D   d u r i n g
5138:046 | DONE dir | na 16 16 |        |             |                 20 52 45 46 49 4c 4c 00  --    R E F I L L .
5138:046 | DONE dir | na 16 16 |        |             |                                          -- 
5138:047 | DONE lbl | na 16 16 | 007c68 |             | es_state                             
5138:048 | DONE dir | na 16 16 | 007c68 | (24 bytes)  |         .byte 41, 6c, 72, 65, 61, 64, 79, 20, 69, 6e, 20, 63, 6f, (...) 
5138:048 | DONE dir | na 16 16 |        |             |                 41 6c 72 65 61 64 79 20  --  A l r e a d y  
5138:048 | DONE dir | na 16 16 |        |             |                 69 6e 20 63 6f 6d 70 69  --  i n   c o m p i
5138:048 | DONE dir | na 16 16 |        |             |                 6c 65 20 6d 6f 64 65 00  --  l e   m o d e .
5138:048 | DONE dir | na 16 16 |        |             |                                          -- 
5138:049 | DONE lbl | na 16 16 | 007c80 |             | es_underflow                         
5138:050 | DONE dir | na 16 16 | 007c80 | (16 bytes)  |         .byte 53, 74, 61, 63, 6b, 20, 75, 6e, 64, 65, 72, 66, 6c, (...) 
5138:050 | DONE dir | na 16 16 |        |             |                 53 74 61 63 6b 20 75 6e  --  S t a c k   u n
5138:050 | DONE dir | na 16 16 |        |             |                 64 65 72 66 6c 6f 77 00  --  d e r f l o w .
5138:050 | DONE dir | na 16 16 |        |             |                                          -- 
5138:051 | DONE lbl | na 16 16 | 007c90 |             | es_syntax                            
5138:052 | DONE dir | na 16 16 | 007c90 | (15 bytes)  |         .byte 55, 6e, 64, 65, 66, 69, 6e, 65, 64, 20, 77, 6f, 72, (...) 
5138:052 | DONE dir | na 16 16 |        |             |                 55 6e 64 65 66 69 6e 65  --  U n d e f i n e
5138:052 | DONE dir | na 16 16 |        |             |                 64 20 77 6f 72 64 00     --  d   w o r d .
5138:053 | DONE wsp | na 16 16 |        |             |
5138:054 | DONE wsp | na 16 16 |        |             |
5138:055 | DONE cmt | na 16 16 |        |             | ; ===================================================================
5138:056 | DONE cmt | na 16 16 |        |             | ; ANSI VT-100 SEQUENCES
5138:057 | DONE wsp | na 16 16 |        |             |
5138:058 | DONE lbl | na 16 16 | 007c9f |             | vt100_page                           
5138:059 | DONE dir | na 16 16 | 007c9f | (5 bytes)   |         .byte AscESC, 5b, 32, 4a, 0  clear screen
5138:059 | DONE dir | na 16 16 |        |             |                 1b 5b 32 4a 00           --  . [ 2 J .
5138:060 | DONE lbl | na 16 16 | 007ca4 |             | vt100_home                           
5138:061 | DONE dir | na 16 16 | 007ca4 | (4 bytes)   |         .byte AscESC, 5b, 48, 0      cursor home
5138:061 | DONE dir | na 16 16 |        |             |                 1b 5b 48 00              --  . [ H .
5138:062 | DONE wsp | na 16 16 |        |             |
5138:063 | DONE wsp | na 16 16 |        |             |
5138:064 | DONE cmt | na 16 16 |        |             | ; ===================================================================
5138:065 | DONE cmt | na 16 16 |        |             | ; TESTING STRINGS
5138:066 | DONE wsp | na 16 16 |        |             |
5138:067 | DONE cmt | na 16 16 |        |             | ; These strings are only used during testing and are removed as Liara Forth is
5138:068 | DONE cmt | na 16 16 |        |             | ; developed. All start with "tests_"
5138:069 | DONE wsp | na 16 16 |        |             |
5138:070 | DONE lbl | na 16 16 | 007ca8 |             | tests_prev_cmd                       
5138:071 | DONE dir | na 16 16 | 007ca8 | (19 bytes)  |         .byte 28, 70, 72, 65, 76, 69, 6f, 75, 73, 20, 63, 6f, 6d, (...) 
5138:071 | DONE dir | na 16 16 |        |             |                 28 70 72 65 76 69 6f 75  --  ( p r e v i o u
5138:071 | DONE dir | na 16 16 |        |             |                 73 20 63 6f 6d 6d 61 6e  --  s   c o m m a n
5138:071 | DONE dir | na 16 16 |        |             |                 64 29 00                 --  d ) .
5138:072 | DONE lbl | na 16 16 | 007cbb |             | tests_next_cmd                       
5138:073 | DONE dir | na 16 16 | 007cbb | (15 bytes)  |         .byte 28, 6e, 65, 78, 74, 20, 63, 6f, 6d, 6d, 61, 6e, 64, (...) 
5138:073 | DONE dir | na 16 16 |        |             |                 28 6e 65 78 74 20 63 6f  --  ( n e x t   c o
5138:073 | DONE dir | na 16 16 |        |             |                 6d 6d 61 6e 64 29 00     --  m m a n d ) .
5138:074 | DONE wsp | na 16 16 |        |             |
5138:075 | DONE wsp | na 16 16 |        |             |
5138:076 | DONE cmt | na 16 16 |        |             | ; ===================================================================
5138:077 | DONE cmt | na 16 16 |        |             | ; ALPHABET STRINGS
5138:078 | DONE wsp | na 16 16 |        |             |
5138:079 | DONE cmt | na 16 16 |        |             | ; Leave alphastr as the last entry in the source code to make it easier to
5138:080 | DONE cmt | na 16 16 |        |             | ; see where this section ends. This cannot be a zero-terminated string
5138:081 | DONE wsp | na 16 16 |        |             |
5138:082 | DONE lbl | na 16 16 | 007cca |             | alphastring                          
5138:083 | DONE dir | na 16 16 | 007cca | (35 bytes)  |         .byte 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 61, 62, 63, (...) 
5138:083 | DONE dir | na 16 16 |        |             |                 30 31 32 33 34 35 36 37  --  0 1 2 3 4 5 6 7
5138:083 | DONE dir | na 16 16 |        |             |                 38 39 61 62 63 64 65 66  --  8 9 a b c d e f
5138:083 | DONE dir | na 16 16 |        |             |                 67 68 69 6a 6b 6c 6d 6e  --  g h i j k l m n
5138:083 | DONE dir | na 16 16 |        |             |                 6f 70 71 72 73 74 75 76  --  o p q r s t u v
5138:083 | DONE dir | na 16 16 |        |             |                 77 79 7a                 --  w y z
5139:000 | DONE wsp | na 16 16 |        |             |
5140:000 | DONE cmt | na 16 16 |        |             | ; ===================================================================
5141:000 | DONE cmt | na 16 16 |        |             | ; TESTING ROUTINES (UNCOMMENT FOR USE)
5142:000 | DONE wsp | na 16 16 |        |             |
5143:000 | DONE cmt | na 16 16 |        |             |                 ; --- TODO TESTING (PRINT ONE "A") ---
5144:000 | DONE cmt | na 16 16 |        |             |                 ; lda.# 61
5145:000 | DONE cmt | na 16 16 |        |             |                 ; jsr put_chr
5146:000 | DONE cmt | na 16 16 |        |             |                 ; .!a16
5147:000 | DONE cmt | na 16 16 |        |             |                 ; brk 00
5148:000 | DONE cmt | na 16 16 |        |             |                 ; --- TODO TESTING ---
5149:000 | DONE wsp | na 16 16 |        |             |
5150:000 | DONE cmt | na 16 16 |        |             |                 ; --- TESTING SHOW WHAT IS TOS ---
5151:000 | DONE cmt | na 16 16 |        |             |                 ; tya
5152:000 | DONE cmt | na 16 16 |        |             |                 ; and.# 0ff00
5153:000 | DONE cmt | na 16 16 |        |             |                 ; xba
5154:000 | DONE cmt | na 16 16 |        |             |                 ; jsr byte_to_ascii
5155:000 | DONE cmt | na 16 16 |        |             |                 ; tya
5156:000 | DONE cmt | na 16 16 |        |             |                 ; and.# 00ff
5157:000 | DONE cmt | na 16 16 |        |             |                 ; jsr byte_to_ascii
5158:000 | DONE cmt | na 16 16 |        |             |                 ; jsr xt_cr
5159:000 | DONE cmt | na 16 16 |        |             |                 ; --------------------------------
5160:000 | DONE wsp | na 16 16 |        |             |
5161:000 | DONE cmt | na 16 16 |        |             |                 ; --- TODO TESTING (HALT CPU) ---
5162:000 | DONE cmt | na 16 16 |        |             |                 ; brk 00 ; BRK for 265sxb tests (drops back to Mensch Monitor)
5163:000 | DONE cmt | na 16 16 |        |             |                 ; stp    ; STP for crude65816 emulator tests
5164:000 | DONE cmt | na 16 16 |        |             |                 ; --- TODO TESTING ---
5165:000 | DONE wsp | na 16 16 |        |             |
5166:000 | DONE wsp | na 16 16 |        |             |
5167:000 | DONE cmt | na 16 16 |        |             | ; ===================================================================
5168:000 | DONE cmt | na 16 16 |        |             | ; END
5169:000 | DONE dir | na 16 16 |        |             |         .end                         

MACROS:
        (none)

SYMBOL TABLE:
- abortq_done                 : 00640b
- abortq_rt                   : 006401
- accept_bs                   : 006483
- accept_eol                  : 00647b
- accept_loop                 : 006430
- accept_nonzero              : 006423
- allot_done                  : 0064d9
- allot_error                 : 0064c8
- allot_minus                 : 0064ce
- allot_real_gone             : 0064db
- alphastring                 : 007cca
- ascbell                     : 000007
- ascbs                       : 000008
- asccc                       : 000003
- asccn                       : 00000e
- asccp                       : 000010
- asccr                       : 00000d
- ascdel                      : 00007f
- ascesc                      : 00001b
- asclf                       : 00000a
- ascsp                       : 000020
- base                        : 000224
- branch_rt                   : 006516
- brg_value                   : 00000b
- buffers                     : 007c00
- buffersize                  : 0000ff
- byte_to_ascii               : 00761b
- char_got_char               : 006560
- cib                         : 00021a
- ciblen                      : 00021c
- cmpl_body                   : 0075f1
- cmpl_common                 : 0075e4
- cmpl_jump                   : 0075e1
- cmpl_subroutine             : 0075dc
- cmpl_word                   : 0075d7
- co                          : 000004
- compile_as_code             : 006577
- compile_as_jump             : 006577
- cp                          : 000228
- cp0                         : 000300
- create_got_name             : 0065c8
- directpage                  : 000200
- directpage-multiple         : 007400
- doconst                     : 007560
- dodoes                      : 00756e
- does_rt                     : 0066d5
- dots_done                   : 006225
- dots_loop                   : 00620b
- dots_not_empty              : 006205
- dovar                       : 00757b
- dp                          : 00022a
- dq_case_done                : 00664d
- dq_checkbase                : 006650
- dq_notdigit                 : 006657
- dq_success                  : 006662
- dsp0                        : 0002f0
- dtrailing_done              : 00630d
- dtrailing_loop              : 006304
- dump_byte_loop              : 0066f8
- dump_done                   : 00670d
- dump_line_loop              : 0066f2
- equal_not                   : 00631a
- erase_done                  : 006733
- erase_loop                  : 00672c
- error                       : 0075fd
- es_allot                    : 007b54
- es_channel                  : 007b68
- es_componly                 : 007b82
- es_defer                    : 007ba3
- es_divzero                  : 007bc0
- es_error                    : 007bd1
- es_intonly                  : 007bdd
- es_noname                   : 007bf3
- es_radix                    : 007c03
- es_refill1                  : 007c1a
- es_refill2                  : 007c48
- es_state                    : 007c68
- es_syntax                   : 007c90
- es_underflow                : 007c80
- execute_ip                  : 00676d
- find-name_all_chars         : 0067a9
- find-name_char_nomatcnt_8   : 0067a5
- find-name_chars             : 00679a
- find-name_done              : 0067cf
- find-name_failure_16        : 0067cc
- find-name_loop              : 006785
- find-name_next_entry        : 00678e
- find-name_success           : 0067c6
- fmmod_1                     : 0067f0
- fmmod_1_1                   : 0067f4
- fmmod_2                     : 006821
- fmmod_2_1                   : 006825
- get_chr                     : 006047
- get_chr_wait                : 00604c
- hashs_loop                  : 00629a
- have_chr?                   : 006056
- hi-end                      : 007b46
- hi-start                    : 007637
- hw_acsr0                    : 00df70
- hw_acsr1                    : 00df72
- hw_acsr2                    : 00df74
- hw_acsr3                    : 00df76
- hw_artd0                    : 00df71
- hw_artd1                    : 00df73
- hw_artd2                    : 00df75
- hw_artd3                    : 00df77
- hw_bcr                      : 00df40
- hw_eier                     : 00df47
- hw_eifr                     : 00df45
- hw_pcs7                     : 00df27
- hw_pd0                      : 00df00
- hw_pd1                      : 00df01
- hw_pd2                      : 00df02
- hw_pd3                      : 00df03
- hw_pd4                      : 00df20
- hw_pd5                      : 00df21
- hw_pd6                      : 00df22
- hw_pd7                      : 00df23
- hw_pdd0                     : 00df04
- hw_pdd1                     : 00df05
- hw_pdd2                     : 00df06
- hw_pdd3                     : 00df07
- hw_pdd4                     : 00df24
- hw_pdd5                     : 00df25
- hw_pdd6                     : 00df26
- hw_sscr                     : 00df41
- hw_t0ch                     : 00df61
- hw_t0cl                     : 00df60
- hw_t1ch                     : 00df63
- hw_t1cl                     : 00df62
- hw_t2ch                     : 00df65
- hw_t2cl                     : 00df64
- hw_t3ch                     : 00df67
- hw_t3cl                     : 00df66
- hw_t4ch                     : 00df69
- hw_t4cl                     : 00df68
- hw_t5ch                     : 00df6b
- hw_t5cl                     : 00df6a
- hw_t6ch                     : 00df6d
- hw_t6cl                     : 00df6c
- hw_t7ch                     : 00df6f
- hw_t7cl                     : 00df6e
- hw_tcr                      : 00df42
- hw_ter                      : 00df43
- hw_tier                     : 00df46
- hw_tifr                     : 00df44
- hw_uier                     : 00df49
- hw_uifr                     : 00df48
- ibuffer1                    : 007c00
- ibuffer2                    : 007d00
- im                          : 000002
- insrc                       : 000218
- interpret                   : 007582
- interpret_compile           : 0075c2
- interpret_got_name_token    : 00759c
- interpret_interpret         : 0075bc
- interpret_line_done         : 0075d0
- interpret_loop              : 007582
- literal_rt                  : 00687a
- lshift_done                 : 006896
- lshift_loop                 : 006890
- max_drop                    : 0068c9
- max_nip                     : 0068cb
- max_no_ov                   : 0068c7
- maxram-multiple             : 006fff
- maxram-single               : 007bff
- min_drop                    : 0068dc
- min_nip                     : 0068de
- min_no_ov                   : 0068da
- move_done                   : 006909
- move_restore                : 006907
- move_src_smaller            : 006903
- mstar_abs_nos               : 0068a7
- mstar_umstar                : 0068b1
- nc                          : 000001
- nc_limit                    : 000000
- nibble_to_ascii             : 007624
- not-equal_equal             : 0060fc
- nt_2drop                    : 0074d8
- nt_2dup                     : 007200
- nt_2over                    : 0074a3
- nt_2swap                    : 0074b0
- nt_2variable                : 006e96
- nt_abort                    : 006f5d
- nt_abortq                   : 006f4f
- nt_abs                      : 00720c
- nt_accept                   : 007452
- nt_again                    : 00717c
- nt_allot                    : 0071b8
- nt_and                      : 0072f7
- nt_backslash                : 007460
- nt_base                     : 00704d
- nt_begin                    : 007189
- nt_bell                     : 006e24
- nt_bl                       : 006ffe
- nt_bounds                   : 007511
- nt_bracketchar              : 0070a5
- nt_brackettick              : 00709a
- nt_branch                   : 00716e
- nt_bye                      : 006dc5
- nt_c-comma                  : 00731a
- nt_c-fetch                  : 007324
- nt_c-store                  : 00732e
- nt_cellplus                 : 006e3d
- nt_cells                    : 007069
- nt_char                     : 0072c8
- nt_charplus                 : 006e4a
- nt_chars                    : 006e30
- nt_cold                     : 006dd0
- nt_colon                    : 0071af
- nt_comma                    : 007449
- nt_compile-only             : 0070d8
- nt_compilecomma             : 007196
- nt_constant                 : 007261
- nt_count                    : 006f42
- nt_cr                       : 006f9c
- nt_create                   : 0071df
- nt_dabs                     : 006ea7
- nt_decimal                  : 006e57
- nt_depth                    : 00723d
- nt_digitq                   : 007503
- nt_dminus                   : 006ed8
- nt_dnegate                  : 006eb3
- nt_does                     : 0071d2
- nt_dot                      : 007039
- nt_dotquote                 : 007076
- nt_dots                     : 007023
- nt_dplus                    : 006ee2
- nt_drop                     : 007554
- nt_dtos                     : 006ec2
- nt_dtrailing                : 00713f
- nt_dump                     : 006dfc
- nt_dup                      : 007549
- nt_equal                    : 0073ad
- nt_erase                    : 006fb2
- nt_evaluate                 : 007059
- nt_execute                  : 0074bd
- nt_false                    : 0073b6
- nt_fetch                    : 00752b
- nt_fill                     : 006fa6
- nt_find-name                : 007407
- nt_fmmod                    : 006eec
- nt_fromr                    : 0074ef
- nt_greater                  : 007387
- nt_hash                     : 006feb
- nt_hashs                    : 006fd5
- nt_here                     : 0074cc
- nt_hex                      : 006e66
- nt_hold                     : 006fc9
- nt_immediate                : 0070ec
- nt_invert                   : 0072ba
- nt_latestnt                 : 00711f
- nt_latestxt                 : 00712f
- nt_leftbracket              : 007116
- nt_less                     : 007390
- nt_lessnumber               : 006ff4
- nt_literal                  : 0070b3
- nt_lshift                   : 007302
- nt_max                      : 0072a1
- nt_min                      : 007296
- nt_minus                    : 007342
- nt_move                     : 00728a
- nt_mrot                     : 00748c
- nt_mstar                    : 006f2d
- nt_name-int                 : 006f8c
- nt_name-string              : 0071ed
- nt_native-compile           : 0070c2
- nt_negate                   : 0072ac
- nt_nip                      : 007481
- nt_not-equal                : 0073a3
- nt_number                   : 0073de
- nt_numbermore               : 006fbf
- nt_one                      : 0073f5
- nt_one-minus                : 007354
- nt_one-plus                 : 00735e
- nt_or                       : 0072ed
- nt_over                     : 00751f
- nt_pad                      : 007042
- nt_page                     : 006e7f
- nt_parse                    : 006f6a
- nt_parse-name               : 007426
- nt_pick                     : 006e18
- nt_plus                     : 00734b
- nt_plusstore                : 007310
- nt_postpone                 : 0070fd
- nt_qdup                     : 007469
- nt_question                 : 006f83
- nt_quit                     : 006f77
- nt_refill                   : 007418
- nt_rfetch                   : 0074e5
- nt_rightbracket             : 00710d
- nt_rot                      : 007498
- nt_rshift                   : 0072d4
- nt_semicolon                : 0071a6
- nt_sign                     : 006fdf
- nt_slashstring              : 007150
- nt_sliteral                 : 00708a
- nt_smrem                    : 006efa
- nt_source                   : 00722f
- nt_source-id                : 007438
- nt_space                    : 007016
- nt_spaces                   : 007008
- nt_squote                   : 007080
- nt_star                     : 006f24
- nt_state                    : 007217
- nt_stod                     : 006ecd
- nt_store                    : 007534
- nt_swap                     : 00753d
- nt_tick                     : 007281
- nt_to                       : 00724a
- nt_to-in                    : 007224
- nt_tobody                   : 0071c5
- nt_tonumber                 : 0073cf
- nt_tor                      : 0074f9
- nt_true                     : 0073c3
- nt_tuck                     : 007475
- nt_two                      : 0073ec
- nt_two-star                 : 007338
- nt_tworfetch                : 006e8b
- nt_type                     : 00702d
- nt_udmod                    : 006f08
- nt_ummod                    : 006f16
- nt_umstar                   : 006f37
- nt_unused                   : 006e71
- nt_value                    : 007254
- nt_variable                 : 007271
- nt_words                    : 006def
- nt_wordsize                 : 006e08
- nt_wordsnsizes              : 006ddc
- nt_xor                      : 0072e2
- nt_zbranch                  : 00715f
- nt_zero                     : 0073fe
- nt_zero-equal               : 007399
- nt_zero-less                : 00737d
- nt_zero-more                : 007373
- nt_zero-notequal            : 007368
- number_dot                  : 006957
- number_loop                 : 00697e
- number_main                 : 006970
- number_ok                   : 00698a
- number_single               : 0069b2
- output                      : 000216
- padoffset                   : 00007f
- padsize                     : 0000ff
- parse-name_empty_line       : 0069fc
- parse-name_found            : 006a10
- parse-name_loop             : 0069ef
- parse_found_delimiter       : 006a3c
- parse_loop                  : 006a2f
- parse_reached_eol           : 006a40
- physicalram                 : 007fff
- piblen                      : 00021e
- pp_got_nt                   : 006a83
- pp_got_word                 : 006a78
- pp_not_immediate            : 006a93
- print_string                : 007603
- print_string_done           : 007612
- put_chr                     : 006036
- put_chr_wait                : 00603c
- quit_compiled               : 0060d5
- quit_get_line               : 0060aa
- quit_ok                     : 0060cc
- quit_print                  : 0060d8
- quit_refill_successful      : 0060b8
- refill_source_is_not_string : 006ae0
- refill_src_not_kbd          : 006ad7
- reset_hardware              : 006000
- rshift_done                 : 006aff
- rshift_loop                 : 006af9
- s_compiled                  : 007b4a
- s_ok                        : 007b46
- scratch                     : 000200
- sign_plus                   : 006b49
- sl_loop                     : 006b6e
- sliteral_rt                 : 006b99
- smrem_1                     : 006be9
- smrem_1_1                   : 006bed
- smrem_2                     : 006c04
- smrem_2_1                   : 006c08
- spaces_done                 : 006c2c
- squote_compile              : 006b2c
- stack-multiple              : 007000
- stack0                      : 007fff
- start                       : 006066
- state                       : 000222
- stod_pos                    : 006b3c
- string_to_lowercase         : 007636
- tests_next_cmd              : 007cbb
- tests_prev_cmd              : 007ca8
- tick_have_nt                : 0063f3
- tick_have_word              : 0063e7
- tmp1                        : 00020a
- tmp2                        : 00020c
- tmp3                        : 00020e
- tmpbranch                   : 000208
- tmpdsp                      : 000210
- tmptos                      : 000212
- tohold                      : 000226
- toin                        : 000220
- tonumber_done               : 006179
- tonumber_loop               : 006135
- tonumber_ok                 : 006144
- type_done                   : 006c7c
- type_loop                   : 006c70
- ummod_complete              : 006d45
- ummod_notzero               : 006d06
- ummod_overflow              : 006d3c
- ummod_shift                 : 006d1e
- umstar_counter              : 006cd5
- umstar_loop                 : 006cc7
- umstar_one_nos              : 006ce8
- umstar_one_tos              : 006ce5
- umstar_two_common           : 006cf4
- umstar_two_nos              : 006cf3
- umstar_two_tos              : 006cef
- umstar_zero                 : 006cde
- vt100_home                  : 007ca4
- vt100_page                  : 007c9f
- words_common                : 006d70
- words_loop                  : 006d7a
- words_nosizes               : 006d97
- workword                    : 000214
- xt_2drop                    : 00638a
- xt_2dup                     : 006391
- xt_2over                    : 00639c
- xt_2swap                    : 0063b7
- xt_2variable                : 0063c8
- xt_abort                    : 006097
- xt_abortq                   : 0063f7
- xt_abs                      : 006414
- xt_accept                   : 00641d
- xt_again                    : 0064a1
- xt_allot                    : 0064b7
- xt_and                      : 0064e0
- xt_backslash                : 0062d9
- xt_base                     : 0064e7
- xt_begin                    : 0064f6
- xt_bell                     : 0064ef
- xt_bl                       : 0064fd
- xt_bounds                   : 006505
- xt_bracketchar              : 0062d2
- xt_brackettick              : 0062c3
- xt_branch                   : 00650f
- xt_bye                      : 006523
- xt_c-comma                  : 006527
- xt_c-fetch                  : 006535
- xt_c-store                  : 006541
- xt_cellplus                 : 006551
- xt_char                     : 006554
- xt_chars                    : 00656c
- xt_cold                     : 006063
- xt_colon                    : 006235
- xt_comma                    : 006229
- xt_compile-only             : 00656e
- xt_compilecomma             : 006577
- xt_constant                 : 00658d
- xt_count                    : 0065a7
- xt_cr                       : 0065b6
- xt_create                   : 0065bd
- xt_dabs                     : 006698
- xt_decimal                  : 00669f
- xt_depth                    : 0066a5
- xt_digitq                   : 006630
- xt_dminus                   : 00667e
- xt_dnegate                  : 0066b4
- xt_does                     : 0066c8
- xt_dot                      : 0061a0
- xt_dotparen                 : 0061bf
- xt_dotquote                 : 0061cd
- xt_dots                     : 0061e1
- xt_dplus                    : 00666c
- xt_drop                     : 0066eb
- xt_dtos                     : 006693
- xt_dtrailing                : 0062fa
- xt_dump                     : 0066f0
- xt_dup                      : 006717
- xt_equal                    : 006311
- xt_erase                    : 00671c
- xt_evaluate                 : 00673e
- xt_execute                  : 006770
- xt_fetch                    : 0062be
- xt_fill                     : 006723
- xt_find-name                : 00677b
- xt_fmmod                    : 0067d2
- xt_fromr                    : 006aac
- xt_greater                  : 006109
- xt_greater_nip              : 00611a
- xt_greater_no_ov            : 006117
- xt_hash                     : 006270
- xt_hashs                    : 00629a
- xt_here                     : 006835
- xt_hex                      : 00683c
- xt_hold                     : 006842
- xt_immediate                : 006826
- xt_invert                   : 00682f
- xt_latestnt                 : 006850
- xt_latestxt                 : 006858
- xt_leftbracket              : 0062c9
- xt_less                     : 0060df
- xt_less_nip                 : 0060f0
- xt_less_no_ov               : 0060ed
- xt_lessnumber               : 0060ff
- xt_literal                  : 006868
- xt_lshift                   : 006887
- xt_max                      : 0068bb
- xt_min                      : 0068ce
- xt_minus                    : 0062e6
- xt_move                     : 0068e1
- xt_mrot                     : 0062f1
- xt_mstar                    : 00689b
- xt_name-int                 : 006912
- xt_name-string              : 00691b
- xt_native-compile           : 00692c
- xt_negate                   : 006935
- xt_nip                      : 00693c
- xt_not-equal                : 0060f3
- xt_number                   : 00693f
- xt_numbermore               : 00628b
- xt_one                      : 006372
- xt_one-minus                : 00637a
- xt_one-plus                 : 00637c
- xt_or                       : 0069c3
- xt_over                     : 0069ca
- xt_pad                      : 0069d1
- xt_page                     : 0069dd
- xt_parse                    : 006a1c
- xt_parse-name               : 0069ea
- xt_pick                     : 006a4f
- xt_plus                     : 0062de
- xt_plusstore                : 006a5d
- xt_postpone                 : 006a6d
- xt_qdup                     : 0062aa
- xt_question                 : 0062a3
- xt_quit                     : 00609f
- xt_refill                   : 006ab4
- xt_rfetch                   : 006aa3
- xt_rightbracket             : 0062cc
- xt_rot                      : 006ae7
- xt_rshift                   : 006af0
- xt_semicolon                : 006257
- xt_sign                     : 006b40
- xt_slashstring              : 00618e
- xt_sliteral                 : 006b4e
- xt_smrem                    : 006baf
- xt_source                   : 006c09
- xt_source-id                : 006c16
- xt_space                    : 006c1d
- xt_spaces                   : 006c24
- xt_squote                   : 006b04
- xt_star                     : 006c31
- xt_state                    : 006c39
- xt_stod                     : 006b30
- xt_store                    : 0062b2
- xt_swap                     : 006c41
- xt_tick                     : 0063db
- xt_to                       : 006c47
- xt_to-in                    : 006121
- xt_tobody                   : 00611d
- xt_tonumber                 : 006129
- xt_tor                      : 006186
- xt_true                     : 006c51
- xt_tuck                     : 006c59
- xt_two                      : 00637e
- xt_two-star                 : 006386
- xt_tworfetch                : 0063a9
- xt_type                     : 006c62
- xt_udmod                    : 006c83
- xt_ummod                    : 006cfd
- xt_umstar                   : 006c9e
- xt_unused                   : 006d4e
- xt_variable                 : 006d5a
- xt_words                    : 006d6e
- xt_wordsize                 : 006dab
- xt_wordsnsizes              : 006d67
- xt_xor                      : 006dbe
- xt_zbranch                  : 006354
- xt_zero                     : 00631d
- xt_zero-equal               : 006325
- xt_zero-less                : 006331
- xt_zero-more                : 006349
- xt_zero-notequal            : 00633d
- z_2drop                     : 006390
- z_2dup                      : 00639b
- z_2over                     : 0063a8
- z_2swap                     : 0063c7
- z_2variable                 : 0063da
- z_abort                     : 0060de
- z_abortq                    : 006413
- z_abs                       : 00641c
- z_accept                    : 0064a0
- z_again                     : 0064b6
- z_allot                     : 0064df
- z_and                       : 0064e6
- z_backslash                 : 0062dd
- z_base                      : 0064ee
- z_begin                     : 0064fc
- z_bell                      : 0064f5
- z_bl                        : 006504
- z_bounds                    : 00650e
- z_bracketchar               : 0062d8
- z_brackettick               : 0062c9
- z_branch                    : 006515
- z_bye                       : 006526
- z_c-comma                   : 006534
- z_c-fetch                   : 006540
- z_c-store                   : 006550
- z_cellplus                  : 006553
- z_char                      : 00656b
- z_chars                     : 00656d
- z_cold                      : 0060de
- z_colon                     : 006256
- z_comma                     : 006234
- z_compile-only              : 006576
- z_compilecomma              : 00658c
- z_constant                  : 0065a6
- z_count                     : 0065b5
- z_cr                        : 0065bc
- z_create                    : 00662f
- z_dabs                      : 00669e
- z_decimal                   : 0066a4
- z_depth                     : 0066b3
- z_digitq                    : 00666b
- z_dminus                    : 006692
- z_dnegate                   : 0066c7
- z_does                      : 0066d4
- z_dot                       : 0061be
- z_dotparen                  : 0061cc
- z_dotquote                  : 0061e1
- z_dots                      : 006228
- z_dplus                     : 00667d
- z_drop                      : 0066ef
- z_dtos                      : 006697
- z_dtrailing                 : 006310
- z_dump                      : 006716
- z_dup                       : 00671b
- z_equal                     : 00631c
- z_erase                     : 00673d
- z_evaluate                  : 00676c
- z_execute                   : 00677a
- z_fetch                     : 0062c2
- z_fill                      : 00673d
- z_find-name                 : 0067d1
- z_fmmod                     : 006825
- z_fromr                     : 006ab3
- z_greater                   : 00611c
- z_hash                      : 00628a
- z_hashs                     : 0062a2
- z_here                      : 00683b
- z_hex                       : 006841
- z_hold                      : 00684f
- z_immediate                 : 00682e
- z_invert                    : 006834
- z_latestnt                  : 006857
- z_latestxt                  : 006867
- z_leftbracket               : 0062cb
- z_less                      : 0060f2
- z_lessnumber                : 006108
- z_literal                   : 006879
- z_lshift                    : 00689a
- z_max                       : 0068cd
- z_min                       : 0068e0
- z_minus                     : 0062f0
- z_move                      : 006911
- z_mrot                      : 0062f9
- z_mstar                     : 0068ba
- z_name-int                  : 00691a
- z_name-string               : 00692b
- z_native-compile            : 006934
- z_negate                    : 00693b
- z_nip                       : 00693e
- z_not-equal                 : 0060fe
- z_number                    : 0069c2
- z_numbermore                : 006299
- z_one                       : 006379
- z_one-minus                 : 00637b
- z_one-plus                  : 00637d
- z_or                        : 0069c9
- z_over                      : 0069d0
- z_pad                       : 0069dc
- z_page                      : 0069e9
- z_parse                     : 006a4e
- z_parse-name                : 006a4e
- z_pick                      : 006a5c
- z_plus                      : 0062e5
- z_plusstore                 : 006a6c
- z_postpone                  : 006aa2
- z_qdup                      : 0062b1
- z_question                  : 0062a9
- z_quit                      : 0060de
- z_refill                    : 006ae6
- z_rfetch                    : 006aab
- z_rightbracket              : 0062d1
- z_rot                       : 006aef
- z_rshift                    : 006b03
- z_semicolon                 : 00626f
- z_sign                      : 006b4d
- z_slashstring               : 00619f
- z_sliteral                  : 006b98
- z_smrem                     : 006c08
- z_source                    : 006c15
- z_source-id                 : 006c1c
- z_space                     : 006c23
- z_spaces                    : 006c30
- z_squote                    : 006b2f
- z_star                      : 006c38
- z_state                     : 006c40
- z_stod                      : 006b3f
- z_store                     : 0062bd
- z_swap                      : 006c46
- z_tick                      : 0063f6
- z_to                        : 006c50
- z_to-in                     : 006128
- z_tobody                    : 006120
- z_tonumber                  : 006185
- z_tor                       : 00618d
- z_true                      : 006c58
- z_tuck                      : 006c61
- z_two                       : 006385
- z_two-star                  : 006389
- z_tworfetch                 : 0063b6
- z_type                      : 006c82
- z_udmod                     : 006c9e
- z_ummod                     : 006d4d
- z_umstar                    : 006cfc
- z_unused                    : 006d59
- z_variable                  : 006d66
- z_words                     : 006daa
- z_wordsize                  : 006dbd
- z_wordsnsizes               : 006daa
- z_xor                       : 006dc4
- z_zbranch                   : 00635a
- z_zero                      : 006324
- z_zero-equal                : 006330
- z_zero-less                 : 00633c
- z_zero-more                 : 006353
- z_zero-notequal             : 006348
- zb_done                     : 00636c
- zb_zero                     : 006363
- zbranch_rt                  : 00635b
- ze_not_zero                 : 00632d
- zero-less-is-less           : 006339
- zero-more_done              : 006352
- zero-more_true              : 006351
- zne_is_zero                 : 006345
