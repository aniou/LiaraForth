A Tinkerer's Assembler for the 6502/65c02/65816
Version BETA 17. Feb 2017
Copyright 2015-2017 Scot W. Stevenson <scot.stevenson@gmail.com>
This program comes with ABSOLUTELY NO WARRANTY

Code listing for file liaraforth.tasm
Generated on Sun Mar 12 13:22:20 2017
Target MPU: 65816
External files loaded: 5
Number of passes executed: 35
Number of steps executed: 10
Assembly time: 0.20979 seconds
Code origin: 005000
Bytes of machine code: 8595

LISTING:
   Line  Status/Type State/Width Address     Bytes     Instruction
   1:000 | DONE cmt | em  8  8 |        |             | ; Liara Forth for the W65C265SXB
   2:000 | DONE cmt | em  8  8 |        |             | ; Scot W. Stevenson <scot.stevenson@gmail.com>
   3:000 | DONE cmt | em  8  8 |        |             | ; First version: 01. Apr 2016
   4:000 | DONE cmt | em  8  8 |        |             | ; This version: 12. Mar 2017
   5:000 | DONE wsp | em  8  8 |        |             |
   6:000 | DONE cmt | em  8  8 |        |             | ; This code is written in Typist's Assembler Notation for the 65c02/65816
   7:000 | DONE cmt | em  8  8 |        |             | ; See docs/MANUAL.md for more information
   8:000 | DONE wsp | em  8  8 |        |             |
   9:000 | DONE dir | em  8  8 |        |             |         .mpu 65816                   
  10:000 | DONE dir | em  8  8 |        |             |         .origin 5000                 start of code to save to built-in RAM
  11:000 | DONE cmt | em  8  8 |        |             | ;       .origin 8000    ; start of code to save to Flash memory
  12:000 | DONE lbl | em  8  8 | 005000 |             | code0                                ; used to calculate UNUSED
  13:000 | DONE wsp | em  8  8 |        |             |
  14:000 | DONE cmt | em  8  8 |        |             | ; ===================================================================
  15:000 | DONE cmt | em  8  8 |        |             | ; TOP INCLUDES
  16:000 | DONE wsp | em  8  8 |        |             |
  17:000 | DONE cmt | em  8  8 |        |             | ; Definitions for Liara Forth for the W65C265SXB
  17:001 | DONE cmt | em  8  8 |        |             | ; Scot W. Stevenson <scot.stevenson@gmail.com>
  17:002 | DONE cmt | em  8  8 |        |             | ; First version: 01. Apr 2016
  17:003 | DONE cmt | em  8  8 |        |             | ; This version: 11. Mar 2017
  17:004 | DONE wsp | em  8  8 |        |             |
  17:005 | DONE cmt | em  8  8 |        |             | ; This file is included by liaraforth.tasm
  17:006 | DONE wsp | em  8  8 |        |             |
  17:007 | DONE cmt | em  8  8 |        |             | ; Note that Typist's Assembler Notation does not distinguish between
  17:008 | DONE cmt | em  8  8 |        |             | ; upper andlower case. Variations in case are for human readers only.
  17:009 | DONE wsp | em  8  8 |        |             |
  17:010 | DONE cmt | em  8  8 |        |             | ; I/O facilities are handled in the separate kernel files. The definitions for
  17:011 | DONE cmt | em  8  8 |        |             | ; multitasking are preliminary and will probably change
  17:012 | DONE wsp | em  8  8 |        |             |
  17:013 | DONE wsp | em  8  8 |        |             |
  17:014 | DONE cmt | em  8  8 |        |             | ; ===================================================================
  17:015 | DONE cmt | em  8  8 |        |             | ; MEMORY MAP
  17:016 | DONE cmt | em  8  8 |        |             | ; We reuse the memory that the Mensch Monitor had been using
  17:017 | DONE wsp | em  8  8 |        |             |
  17:018 | DONE cmt | em  8  8 |        |             |         ; TODO add any extra RAM in other banks
  17:019 | DONE cmt | em  8  8 |        |             |         ; TODO add stuff for multitasking
  17:020 | DONE wsp | em  8  8 |        |             |
  17:021 | DONE cmt | em  8  8 |        |             |         ;  00:0000  +-------------------+  ram-start, dpage, user0
  17:022 | DONE cmt | em  8  8 |        |             |         ;           |                   |
  17:023 | DONE cmt | em  8  8 |        |             |         ;           |  ^  Data Stack    |  <-- dsp
  17:024 | DONE cmt | em  8  8 |        |             |         ;           |  |                |
  17:025 | DONE cmt | em  8  8 |        |             |         ;  00:0100  +-------------------+  dsp0, stack
  17:026 | DONE cmt | em  8  8 |        |             |         ;           |                   |
  17:027 | DONE cmt | em  8  8 |        |             |         ;           |  ^  Return Stack  |  <-- rsp
  17:028 | DONE cmt | em  8  8 |        |             |         ;           |  |                |
  17:029 | DONE cmt | em  8  8 |        |             |         ;  00:0200  +-------------------+  rsp0, buffer, buffer0
  17:030 | DONE cmt | em  8  8 |        |             |         ;           |  |                |
  17:031 | DONE cmt | em  8  8 |        |             |         ;           |  v  Input Buffer  |
  17:032 | DONE cmt | em  8  8 |        |             |         ;           |                   |
  17:033 | DONE cmt | em  8  8 |        |             |         ;  00:0300  +-------------------+  cp0
  17:034 | DONE cmt | em  8  8 |        |             |         ;           |  |                |
  17:035 | DONE cmt | em  8  8 |        |             |         ;           |  v  Dictionary    |  <-- cp
  17:036 | DONE cmt | em  8  8 |        |             |         ;           |                   |
  17:037 | DONE cmt | em  8  8 |        |             |         ;   (...)   ~~~~~~~~~~~~~~~~~~~~~
  17:038 | DONE cmt | em  8  8 |        |             |         ;           |                   |
  17:039 | DONE cmt | em  8  8 |        |             |         ;           |                   |
  17:040 | DONE cmt | em  8  8 |        |             |         ;  00:7fff  +-------------------+  ram-end
  17:041 | DONE wsp | em  8  8 |        |             |
  17:042 | DONE cmt | em  8  8 |        |             |         ; Hard physical addresses
  17:043 | DONE dir | em  8  8 |        |             |         .equ ram-start  0000         start of installed RAM
  17:044 | DONE dir | em  8  8 |        |             |         .equ ram-end { 8000 - 1 }    end of 32k installed RAM
  17:045 | DONE wsp | em  8  8 |        |             |
  17:046 | DONE cmt | em  8  8 |        |             |         ; Soft physical addresses
  17:047 | DONE dir | em  8  8 |        |             |         .equ dpage      ram-start    direct page:       0000 - 00ff
  17:048 | DONE dir | em  8  8 |        |             |         .equ stack { 000000 + 0100 } return stack area: 0100 - 01ff
  17:049 | DONE dir | em  8  8 |        |             |         .equ buffer0 { stack + 0100 } buffer areas:      0200 - 02ff
  17:050 | DONE wsp | em  8  8 |        |             |
  17:051 | DONE cmt | em  8  8 |        |             |         ; Defined locations
  17:052 | DONE dir | em  8  8 |        |             |         .equ user0      dpage        user and system variables
  17:053 | DONE dir | em  8  8 |        |             |         .equ dsp0 { stack - 1 }      initial Data Stack Pointer:   00ff
  17:054 | DONE dir | em  8  8 |        |             |         .equ stack0 { buffer0 - 1 }  initial Return Stack Pointer: 01ff
  17:055 | DONE wsp | em  8  8 |        |             |
  17:056 | DONE cmt | em  8  8 |        |             |         ; Buffers
  17:057 | DONE dir | em  8  8 |        |             |         .equ bsize      0080         size of input/output buffers
  17:058 | DONE dir | em  8  8 |        |             |         .equ buffer1 { buffer0 + 000080 } output buffer 0280 (UNUSED)
  17:059 | DONE wsp | em  8  8 |        |             |
  17:060 | DONE cmt | em  8  8 |        |             |         ; Dictionary RAM
  17:061 | DONE dir | em  8  8 |        |             |         .equ cp0 { buffer1 + 000080 } Dictionary starts after last buffer
  17:062 | DONE dir | em  8  8 |        |             |         .equ cp-end { code0 - 1 }    Last RAM byte available
  17:063 | DONE wsp | em  8  8 |        |             |
  17:064 | DONE cmt | em  8  8 |        |             |         ; Other locations
  17:065 | DONE dir | em  8  8 |        |             |         .equ padoffset  0ff          offset from CP to PAD (holds number strings)
  17:066 | DONE wsp | em  8  8 |        |             |
  17:067 | DONE wsp | em  8  8 |        |             |
  17:068 | DONE cmt | em  8  8 |        |             | ; ===================================================================
  17:069 | DONE cmt | em  8  8 |        |             | ; DIRECT PAGE ADDRESSES
  17:070 | DONE wsp | em  8  8 |        |             |
  17:071 | DONE cmt | em  8  8 |        |             | ; All are one cell (two bytes) long to prevent weird errors
  17:072 | DONE cmt | em  8  8 |        |             | ; TODO rewrite with USER variables
  17:073 | DONE dir | em  8  8 |        |             |         .equ cp { 000000 + &00 }     Compiler Pointer, 2 bytes
  17:074 | DONE dir | em  8  8 |        |             |         .equ dp { 000000 + &02 }     Dictionary Pointer, 2 bytes
  17:075 | DONE dir | em  8  8 |        |             |         .equ workword { 000000 + &04 } Currently compiliing word
  17:076 | DONE dir | em  8  8 |        |             |         .equ insrc { 000000 + &06 }  Input Source for SOURCE-ID
  17:077 | DONE dir | em  8  8 |        |             |         .equ cib { 000000 + &08 }    Address of current input buffer
  17:078 | DONE dir | em  8  8 |        |             |         .equ ciblen { 000000 + &10 } Length of current input buffer
  17:079 | DONE dir | em  8  8 |        |             |         .equ toin { 000000 + &12 }   Pointer to CIB (>IN in Forth)
  17:080 | DONE dir | em  8  8 |        |             |         .equ output { 000000 + &14 } Jump target for EMIT
  17:081 | DONE dir | em  8  8 |        |             |         .equ input { 000000 + &16 }  Jump target for KEY
  17:082 | DONE dir | em  8  8 |        |             |         .equ havekey { 000000 + &18 } Jump target for KEY?
  17:083 | DONE dir | em  8  8 |        |             |         .equ state { 000000 + &20 }  STATE: -1 compile, 0 interpret
  17:084 | DONE dir | em  8  8 |        |             |         .equ base { 000000 + &22 }   Radix for number conversion
  17:085 | DONE dir | em  8  8 |        |             |         .equ tohold { 000000 + &24 } Pointer for formatted output
  17:086 | DONE dir | em  8  8 |        |             |         .equ tmpbranch { 000000 + &26 } temp storage for 0BRANCH, BRANCH only
  17:087 | DONE dir | em  8  8 |        |             |         .equ tmp1 { 000000 + &28 }   Temporary storage
  17:088 | DONE dir | em  8  8 |        |             |         .equ tmp2 { 000000 + &30 }   Temporary storage
  17:089 | DONE dir | em  8  8 |        |             |         .equ tmp3 { 000000 + &32 }   Temporary storage
  17:090 | DONE dir | em  8  8 |        |             |         .equ tmpdsp { 000000 + &34 } Temporary DSP (X) storage, 2 bytes
  17:091 | DONE dir | em  8  8 |        |             |         .equ tmptos { 000000 + &36 } Temporary TOS (Y) storage, 2 bytes
  17:092 | DONE dir | em  8  8 |        |             |         .equ nc_limit { 000000 + &38 } Holds limit for Native Compile size
  17:093 | DONE dir | em  8  8 |        |             |         .equ scratch { 000000 + &40 } 8 byte scratchpad (see UM/MOD)
  17:094 | DONE wsp | em  8  8 |        |             |
  17:095 | DONE wsp | em  8  8 |        |             |
  17:096 | DONE cmt | em  8  8 |        |             | ; ===================================================================
  17:097 | DONE cmt | em  8  8 |        |             | ; HELPER DEFINITIONS
  17:098 | DONE wsp | em  8  8 |        |             |
  17:099 | DONE cmt | em  8  8 |        |             | ; ASCII characters
  17:100 | DONE dir | em  8  8 |        |             |         .equ AscCC   03              break (Control-C) ASCII character
  17:101 | DONE dir | em  8  8 |        |             |         .equ AscBELL 07              ACSCII bell sound
  17:102 | DONE dir | em  8  8 |        |             |         .equ AscBS   08              backspace ASCII character
  17:103 | DONE dir | em  8  8 |        |             |         .equ AscLF   0a              line feed ASCII character
  17:104 | DONE dir | em  8  8 |        |             |         .equ AscCR   0d              carriage return ASCII character
  17:105 | DONE dir | em  8  8 |        |             |         .equ AscCN   0e              ASCII CNTR-n (for next command)
  17:106 | DONE dir | em  8  8 |        |             |         .equ AscCP   10              ASCII CNTR-p (for previous command)
  17:107 | DONE dir | em  8  8 |        |             |         .equ AscESC  1b              Escape ASCII character
  17:108 | DONE dir | em  8  8 |        |             |         .equ AscSP   20              space ASCII character
  17:109 | DONE dir | em  8  8 |        |             |         .equ AscDEL  7f              DEL ASCII character
  17:110 | DONE wsp | em  8  8 |        |             |
  17:111 | DONE cmt | em  8  8 |        |             | ; Dictionary flags. The first four bits are currently unused
  17:112 | DONE dir | em  8  8 |        |             |         .equ FN 0008                 Force Native compile
  17:113 | DONE dir | em  8  8 |        |             |         .equ CO 0004                 Compile Only
  17:114 | DONE dir | em  8  8 |        |             |         .equ IM 0002                 Immediate Word
  17:115 | DONE dir | em  8  8 |        |             |         .equ NC 0001                 Native Compile allowed
  17:116 | DONE wsp | em  8  8 |        |             |
  18:000 | DONE wsp | em  8  8 |        |             |
  19:000 | DONE cmt | em  8  8 |        |             | ; Hardware dependencies are isolated to a large degree in kernel files. Liara
  20:000 | DONE cmt | em  8  8 |        |             | ; Forth ships with two such files: One (very ALPHA) for the crude65816 emulator,
  21:000 | DONE cmt | em  8  8 |        |             | ; and one for the 265sxb board. Only use one. Which ever kernel file is used, it
  22:000 | DONE cmt | em  8  8 |        |             | ; must contain at least the routines put_chr, get_chr and have_chr, which work
  23:000 | DONE cmt | em  8  8 |        |             | ; on the A register
  24:000 | DONE wsp | em  8  8 |        |             |
  25:000 | DONE cmt | em  8  8 |        |             | ; Basic hardware routines for Liara Forth: 265SXB version
  25:001 | DONE cmt | em  8  8 |        |             | ; Scot W. Stevenson <scot.stevenson@gmail.com>
  25:002 | DONE cmt | em  8  8 |        |             | ; First version: 04. Jan 2017
  25:003 | DONE cmt | em  8  8 |        |             | ; This version: 05. Mar 2017
  25:004 | DONE wsp | em  8  8 |        |             |
  25:005 | DONE cmt | em  8  8 |        |             | ; This section provides basic hardware interface to the 265SXB, providing at the
  25:006 | DONE cmt | em  8  8 |        |             | ; very least the the PUT_CHR, GET_CHR and HAVE_CHR routines that Liara Forth
  25:007 | DONE cmt | em  8  8 |        |             | ; uses. These MUST BE PRESENT. It is in its own section to make porting Forth
  25:008 | DONE cmt | em  8  8 |        |             | ; to other machines easier.
  25:009 | DONE wsp | em  8  8 |        |             |
  25:010 | DONE cmt | em  8  8 |        |             | ; The code here is based on Andrew Jacobs' Basic Vector Handling for the
  25:011 | DONE cmt | em  8  8 |        |             | ; W65C265SXB Development Board as part of the w65c265sxb-hacker project
  25:012 | DONE cmt | em  8  8 |        |             | ; (https://github.com/andrew-jacobs/w65c265sxb-hacker). It is released under the
  25:013 | DONE cmt | em  8  8 |        |             | ; following license:
  25:014 | DONE cmt | em  8  8 |        |             | ;
  25:015 | DONE cmt | em  8  8 |        |             | ;     This work is made available under the terms of the Creative Commons
  25:016 | DONE cmt | em  8  8 |        |             | ;     Attribution-NonCommercial-ShareAlike 4.0 International license. Open the
  25:017 | DONE cmt | em  8  8 |        |             | ;     following URL to see the details.
  25:018 | DONE cmt | em  8  8 |        |             | ;     http://creativecommons.org/licenses/by-nc-sa/4.0/
  25:019 | DONE wsp | em  8  8 |        |             |
  25:020 | DONE cmt | em  8  8 |        |             | ; Original variable names from w65c256.inc are included in comments to make
  25:021 | DONE cmt | em  8  8 |        |             | ; updates and changes easier
  25:022 | DONE wsp | em  8  8 |        |             |
  25:023 | DONE cmt | em  8  8 |        |             | ; ===================================================================
  25:024 | DONE cmt | em  8  8 |        |             | ; HARDWARE DEFINITIONS
  25:025 | DONE cmt | em  8  8 |        |             | ; These follow Andrew Jacobs' names, but lower case and with "hw_" prefixed.
  25:026 | DONE cmt | em  8  8 |        |             | ; This is the only file where symbols with the hw_ prefix may be defined or used
  25:027 | DONE wsp | em  8  8 |        |             |
  25:028 | DONE cmt | em  8  8 |        |             | ; Baud rates are calculated by the formula { osc_freq/(16*baud_rate)-1 } which we
  25:029 | DONE cmt | em  8  8 |        |             | ; can do on the fly at every assembly with the following parameters, or just calculate
  25:030 | DONE cmt | em  8  8 |        |             | ; once and then define brg_value with:
  25:031 | DONE cmt | em  8  8 |        |             | ;
  25:032 | DONE cmt | em  8  8 |        |             | ; - For  9600 baud, use &23
  25:033 | DONE cmt | em  8  8 |        |             | ; - For 19200 baud, use &11
  25:034 | DONE wsp | em  8  8 |        |             |
  25:035 | DONE cmt | em  8  8 |        |             | ;       .equ osc_freq  3686400          ; SXB runs at 3.6864MHz
  25:036 | DONE cmt | em  8  8 |        |             | ;       .equ baud_rate 19200            ; ACIA baud rate
  25:037 | DONE cmt | em  8  8 |        |             | ;	.equ baud_rate 9600             ; ACIA baud rate
  25:038 | DONE wsp | em  8  8 |        |             |
  25:039 | DONE dir | em  8  8 |        |             |         .equ brg_value &11           19200 baud
  25:040 | DONE cmt | em  8  8 |        |             | ;       .equ brg_value &23              ; 9600 baud
  25:041 | DONE wsp | em  8  8 |        |             |
  25:042 | DONE dir | em  8  8 |        |             |         .equ hw_pd0  0df00           Port 0 Data Register
  25:043 | DONE dir | em  8  8 |        |             |         .equ hw_pd1  0df01           Port 1 Data Register
  25:044 | DONE dir | em  8  8 |        |             |         .equ hw_pd2  0df02           Port 2 Data Register
  25:045 | DONE dir | em  8  8 |        |             |         .equ hw_pd3  0df03           Port 3 Data Register
  25:046 | DONE dir | em  8  8 |        |             |         .equ hw_pdd0 0df04           Port 0 Data Direction Register
  25:047 | DONE dir | em  8  8 |        |             |         .equ hw_pdd1 0df05           Port 1 Data Direction Register
  25:048 | DONE dir | em  8  8 |        |             |         .equ hw_pdd2 0df06           Port 2 Data Direction Register
  25:049 | DONE dir | em  8  8 |        |             |         .equ hw_pdd3 0df07           Port 3 Data Direction Register
  25:050 | DONE wsp | em  8  8 |        |             |
  25:051 | DONE dir | em  8  8 |        |             |         .equ hw_pd4  0df20           Port 4 Data Register
  25:052 | DONE dir | em  8  8 |        |             |         .equ hw_pd5  0df21           Port 5 Data Register
  25:053 | DONE dir | em  8  8 |        |             |         .equ hw_pd6  0df22           Port 6 Data Register
  25:054 | DONE dir | em  8  8 |        |             |         .equ hw_pd7  0df23           Port 7 Data Register
  25:055 | DONE dir | em  8  8 |        |             |         .equ hw_pdd4 0df24           Port 4 Data Direction Register
  25:056 | DONE dir | em  8  8 |        |             |         .equ hw_pdd5 0df25           Port 5 Data Direction Register
  25:057 | DONE dir | em  8  8 |        |             |         .equ hw_pdd6 0df26           Port 6 Data Direction Register
  25:058 | DONE dir | em  8  8 |        |             |         .equ hw_pcs7 0df27           Port 7 Chip Select
  25:059 | DONE wsp | em  8  8 |        |             |
  25:060 | DONE dir | em  8  8 |        |             |         .equ hw_bcr  0df40           Bus Control Register
  25:061 | DONE dir | em  8  8 |        |             |         .equ hw_sscr 0df41           System Speed Control Register
  25:062 | DONE dir | em  8  8 |        |             |         .equ hw_tcr  0df42           Timer Control Register
  25:063 | DONE dir | em  8  8 |        |             |         .equ hw_ter  0df43           Timer Enable Register
  25:064 | DONE dir | em  8  8 |        |             |         .equ hw_tifr 0df44           Timer Interrupt Flag Register
  25:065 | DONE dir | em  8  8 |        |             |         .equ hw_eifr 0df45           Edge Interrupt Flag Register
  25:066 | DONE dir | em  8  8 |        |             |         .equ hw_tier 0df46           Timer Interrupt Enable Register
  25:067 | DONE dir | em  8  8 |        |             |         .equ hw_eier 0df47           Edge Interrupt Enable Register
  25:068 | DONE dir | em  8  8 |        |             |         .equ hw_uifr 0df48           UART Interrupt Flag Register
  25:069 | DONE dir | em  8  8 |        |             |         .equ hw_uier 0df49           UART Interrupt Enable Register
  25:070 | DONE wsp | em  8  8 |        |             |
  25:071 | DONE dir | em  8  8 |        |             |         .equ hw_t0cl 0df60           Timer 0 Counter Low
  25:072 | DONE dir | em  8  8 |        |             |         .equ hw_t0ch 0df61           Timer 0 Counter High
  25:073 | DONE dir | em  8  8 |        |             |         .equ hw_t1cl 0df62           Timer 1 Counter Low
  25:074 | DONE dir | em  8  8 |        |             |         .equ hw_t1ch 0df63           Timer 1 Counter High
  25:075 | DONE dir | em  8  8 |        |             |         .equ hw_t2cl 0df64           Timer 2 Counter Low
  25:076 | DONE dir | em  8  8 |        |             |         .equ hw_t2ch 0df65           Timer 2 Counter High
  25:077 | DONE dir | em  8  8 |        |             |         .equ hw_t3cl 0df66           Timer 3 Counter Low
  25:078 | DONE dir | em  8  8 |        |             |         .equ hw_t3ch 0df67           Timer 3 Counter High
  25:079 | DONE dir | em  8  8 |        |             |         .equ hw_t4cl 0df68           Timer 4 Counter Low
  25:080 | DONE dir | em  8  8 |        |             |         .equ hw_t4ch 0df69           Timer 4 Counter High
  25:081 | DONE dir | em  8  8 |        |             |         .equ hw_t5cl 0df6a           Timer 5 Counter Low
  25:082 | DONE dir | em  8  8 |        |             |         .equ hw_t5ch 0df6b           Timer 5 Counter High
  25:083 | DONE dir | em  8  8 |        |             |         .equ hw_t6cl 0df6c           Timer 6 Counter Low
  25:084 | DONE dir | em  8  8 |        |             |         .equ hw_t6ch 0df6d           Timer 6 Counter High
  25:085 | DONE dir | em  8  8 |        |             |         .equ hw_t7cl 0df6e           Timer 7 Counter Low
  25:086 | DONE dir | em  8  8 |        |             |         .equ hw_t7ch 0df6f           Timer 7 Counter High
  25:087 | DONE wsp | em  8  8 |        |             |
  25:088 | DONE dir | em  8  8 |        |             |         .equ hw_acsr0 0df70          UART 0 Control/Status Register
  25:089 | DONE dir | em  8  8 |        |             |         .equ hw_artd0 0df71          UART 0 Data Register
  25:090 | DONE dir | em  8  8 |        |             |         .equ hw_acsr1 0df72          UART 1 Control/Status Register
  25:091 | DONE dir | em  8  8 |        |             |         .equ hw_artd1 0df73          UART 1 Data Register
  25:092 | DONE dir | em  8  8 |        |             |         .equ hw_acsr2 0df74          UART 2 Control/Status Register
  25:093 | DONE dir | em  8  8 |        |             |         .equ hw_artd2 0df75          UART 2 Data Register
  25:094 | DONE dir | em  8  8 |        |             |         .equ hw_acsr3 0df76          UART 3 Control/Status Register
  25:095 | DONE dir | em  8  8 |        |             |         .equ hw_artd3 0df77          UART 3 Data Register
  25:096 | DONE wsp | em  8  8 |        |             |
  25:097 | DONE wsp | em  8  8 |        |             |
  25:098 | DONE cmt | em  8  8 |        |             | ; ===================================================================
  25:099 | DONE cmt | em  8  8 |        |             | ; RESET HARDWARE
  25:100 | DONE cmt | em  8  8 |        |             | ; Call this during boot. Uses Port 0 for communication in the default setting.
  25:101 | DONE cmt | em  8  8 |        |             | ; Note this does not reset the MPU, which is done by the main Forth code
  25:102 | DONE lbl | em  8  8 | 005000 |             | reset_hardware                       
  25:103 | DONE ins | em  8  8 | 005000 | 78          |                 sei                  
  25:104 | DONE ins | em  8  8 | 005001 | 18          |                 clc                  
  25:105 | DONE ins | em  8  8 | 005002 | fb          |                 xce                  
  25:106 | DONE ctl | na  8  8 |        |             |         .!native
  25:107 | DONE ins | na  8  8 | 005003 | c2 10       |                 rep 10               
  25:108 | DONE ctl | na  8 16 |        |             |         .!xy16
  25:109 | DONE ins | na  8 16 | 005005 | e2 20       |                 sep 20               
  25:110 | DONE ctl | na  8 16 |        |             |         .!a8
  25:111 | DONE cmt | na  8 16 |        |             |                 ; temporarily reset the stack
  25:112 | DONE ins | na  8 16 | 005007 | a2 ff 01    |                 ldx.# 01ff           
  25:113 | DONE ins | na  8 16 | 00500a | 9a          |                 txs                  
  25:114 | DONE wsp | na  8 16 |        |             |
  25:115 | DONE ins | na  8 16 | 00500b | 9c 49 df    |                 stz 00df49           UART Interrupt Enable Register (UIER)
  25:116 | DONE wsp | na  8 16 |        |             |
  25:117 | DONE ins | na  8 16 | 00500e | a9 c0       |                 lda.# 0c0            Ensure A15/AMS are output
  25:118 | DONE ins | na  8 16 | 005010 | 8d 24 df    |                 sta 00df24           Port 4 Data Direction Register (PDD4)
  25:119 | DONE ins | na  8 16 | 005013 | 9c 20 df    |                 stz 00df20           Select bank 0 (Port 4 Data Register, PD4)
  25:120 | DONE wsp | na  8 16 |        |             |
  25:121 | DONE ins | na  8 16 | 005016 | a9 10       |                 lda.# %00010000      Set UART0 to use timer 3
  25:122 | DONE ins | na  8 16 | 005018 | 1c 42 df    |                 trb 00df42           Timer Control Register (TCR)
  25:123 | DONE ins | na  8 16 | 00501b | a9 0b       |                 lda.# .lsb 00000b    And set baud rate
  25:124 | DONE ins | na  8 16 | 00501d | 8d 66 df    |                 sta 00df66           Timer 3 Counter Low (T3CL)
  25:125 | DONE ins | na  8 16 | 005020 | a9 00       |                 lda.# .msb 00000b    
  25:126 | DONE ins | na  8 16 | 005022 | 8d 67 df    |                 sta 00df67           Timer 3 Counter High (T3CH)
  25:127 | DONE ins | na  8 16 | 005025 | a9 08       |                 lda.# 08             Enable timer 3 (1<<3)
  25:128 | DONE ins | na  8 16 | 005027 | 0c 43 df    |                 tsb 00df43           Timer Enable Register (TER)
  25:129 | DONE wsp | na  8 16 |        |             |
  25:130 | DONE ins | na  8 16 | 00502a | a9 25       |                 lda.# %00100101      Set UART0 for 8-N-1
  25:131 | DONE ins | na  8 16 | 00502c | 8d 70 df    |                 sta 00df70           UART 0 Control/Status Register (ACSR0)
  25:132 | DONE wsp | na  8 16 |        |             |
  25:133 | DONE ins | na  8 16 | 00502f | c2 20       |                 rep 20               
  25:134 | DONE ctl | na 16 16 |        |             |         .!a16
  25:135 | DONE ins | na 16 16 | 005031 | 4c 67 50    |                 jmp 005067           we return with A as 8 bits
  25:136 | DONE wsp | na 16 16 |        |             |
  25:137 | DONE wsp | na 16 16 |        |             |
  25:138 | DONE cmt | na 16 16 |        |             | ; ===================================================================
  25:139 | DONE cmt | na 16 16 |        |             | ; PUT_CHR
  25:140 | DONE cmt | na 16 16 |        |             | ; Wait until the last transmission has been completed then send the character
  25:141 | DONE cmt | na 16 16 |        |             | ; in A. Destroys A. This handles all the register size stuff, and does not need to be
  25:142 | DONE cmt | na 16 16 |        |             | ; called with a 8-bit Y register as TOS. This is only called directly by EMIT
  25:143 | DONE cmt | na 16 16 |        |             | ; through the OUTPUT variable. In Forth, this is refered to as UART0
  25:144 | DONE lbl | na 16 16 | 005034 |             | put_chr                              
  25:145 | DONE ins | na 16 16 | 005034 | e2 20       |                 sep 20               
  25:146 | DONE ctl | na  8 16 |        |             |         .!a8
  25:147 | DONE ins | na  8 16 | 005036 | 48          |                 pha                  
  25:148 | DONE ins | na  8 16 | 005037 | a9 02       |                 lda.# 02             (1<<1)
  25:149 | DONE wsp | na  8 16 |        |             |
  25:150 | DONE lbl | na  8 16 | 005039 |             | put_chr_wait                         
  25:151 | DONE ins | na  8 16 | 005039 | 2c 48 df    |                 bit 00df48           timer finished?
  25:152 | DONE ins | na  8 16 | 00503c | f0 fb       |                 beq 005039           
  25:153 | DONE wsp | na  8 16 |        |             |
  25:154 | DONE ins | na  8 16 | 00503e | 68          |                 pla                  
  25:155 | DONE ins | na  8 16 | 00503f | 8d 71 df    |                 sta 00df71           transmit char
  25:156 | DONE ins | na  8 16 | 005042 | c2 20       |                 rep 20               
  25:157 | DONE ctl | na 16 16 |        |             |         .!a16
  25:158 | DONE wsp | na 16 16 |        |             |
  25:159 | DONE ins | na 16 16 | 005044 | 60          |                 rts                  
  25:160 | DONE wsp | na 16 16 |        |             |
  25:161 | DONE cmt | na 16 16 |        |             | ; ===================================================================
  25:162 | DONE cmt | na 16 16 |        |             | ; GET_CHR
  25:163 | DONE cmt | na 16 16 |        |             | ; Fetch the next character from the receive buffer waiting for some to arrive
  25:164 | DONE cmt | na 16 16 |        |             | ; if the buffer is empty. This is handled by KEY through the INPUT variable
  25:165 | DONE cmt | na 16 16 |        |             | ; Note the routine returns its value through A - getting it TOS is the caller's
  25:166 | DONE cmt | na 16 16 |        |             | ; problem
  25:167 | DONE lbl | na 16 16 | 005045 |             | get_chr                              
  25:168 | DONE ins | na 16 16 | 005045 | e2 20       |                 sep 20               
  25:169 | DONE ctl | na  8 16 |        |             |         .!a8
  25:170 | DONE ins | na  8 16 | 005047 | a9 01       |                 lda.# 01             (1<<0)
  25:171 | DONE wsp | na  8 16 |        |             |
  25:172 | DONE lbl | na  8 16 | 005049 |             | get_chr_wait                         
  25:173 | DONE ins | na  8 16 | 005049 | 2c 48 df    |                 bit 00df48           Any data in RX buffer?
  25:174 | DONE ins | na  8 16 | 00504c | f0 fb       |                 beq 005049           No, keep waiting
  25:175 | DONE ins | na  8 16 | 00504e | ad 71 df    |                 lda 00df71           Yes, read it
  25:176 | DONE ins | na  8 16 | 005051 | c2 20       |                 rep 20               
  25:177 | DONE ctl | na 16 16 |        |             |         .!a16
  25:178 | DONE ins | na 16 16 | 005053 | 29 ff 00    |                 and.# 00ff           paranoid
  25:179 | DONE wsp | na 16 16 |        |             |
  25:180 | DONE ins | na 16 16 | 005056 | 60          |                 rts                  
  25:181 | DONE wsp | na 16 16 |        |             |
  25:182 | DONE cmt | na 16 16 |        |             | ; ===================================================================
  25:183 | DONE cmt | na 16 16 |        |             | ; HAVE_CHR
  25:184 | DONE cmt | na 16 16 |        |             | ; Check if the receive buffer contains any data and return C=1 if there is
  25:185 | DONE cmt | na 16 16 |        |             | ; some. This should be handled by KEY? through the HAVEKEY variable
  25:186 | DONE cmt | na 16 16 |        |             | ; TODO Test this
  25:187 | DONE wsp | na 16 16 |        |             |
  25:188 | DONE lbl | na 16 16 | 005057 |             | have_chr                             
  25:189 | DONE ins | na 16 16 | 005057 | 48          |                 pha                  save caller's A
  25:190 | DONE ins | na 16 16 | 005058 | 08          |                 php                  
  25:191 | DONE ins | na 16 16 | 005059 | e2 20       |                 sep 20               
  25:192 | DONE ctl | na  8 16 |        |             |         .!a8
  25:193 | DONE ins | na  8 16 | 00505b | ad 48 df    |                 lda 00df48           read the status register
  25:194 | DONE ins | na  8 16 | 00505e | 28          |                 plp                  
  25:195 | DONE ins | na  8 16 | 00505f | 6a          |                 ror.a                shift hw_uart0r bit into carry
  25:196 | DONE ins | na  8 16 | 005060 | c2 20       |                 rep 20               
  25:197 | DONE ctl | na 16 16 |        |             |         .!a16
  25:198 | DONE ins | na 16 16 | 005062 | 68          |                 pla                  restore A
  25:199 | DONE ins | na 16 16 | 005063 | 60          |                 rts                  
  25:200 | DONE wsp | na 16 16 |        |             |
  25:201 | DONE cmt | na 16 16 |        |             | ; END
  26:000 | DONE cmt | na 16 16 |        |             | ;       .include kernel_emu.tasm        ; routines for crude65815 emulator
  27:000 | DONE wsp | na 16 16 |        |             |
  28:000 | DONE wsp | na 16 16 |        |             |
  29:000 | DONE cmt | na 16 16 |        |             | ; ===================================================================
  30:000 | DONE cmt | na 16 16 |        |             | ; DICTIONARY ROUTINES
  31:000 | DONE wsp | na 16 16 |        |             |
  32:000 | DONE cmt | na 16 16 |        |             | ; Word code routines are sorted alphabetically, except for the first three
  33:000 | DONE cmt | na 16 16 |        |             | ; - COLD, ABORT, and QUIT - and a few others that flow into each other. The
  34:000 | DONE cmt | na 16 16 |        |             | ; byte and cycle values are calculated without the RTS instruction.
  35:000 | DONE wsp | na 16 16 |        |             |
  36:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
  37:000 | DONE cmt | na 16 16 |        |             | ; COLD ( -- ) X bytes / X Cycles
  38:000 | DONE cmt | na 16 16 |        |             | ; Reset the Forth system. Use BYE to return to the Mensch Monitor.
  39:000 | DONE lbl | na 16 16 | 005064 |             | xt_cold                              
  40:000 | DONE wsp | na 16 16 |        |             |
  41:000 | DONE ins | na 16 16 | 005064 | 4c 00 50    |                 jmp 005000           don't use JSR, jump back to start
  42:000 | DONE lbl | na 16 16 | 005067 |             | start                                
  43:000 | DONE dir | na 16 16 |        |             |         .!native                     these should have been handled by hardware reset
  44:000 | DONE dir | na 16 16 |        |             |         .!a16                        
  45:000 | DONE dir | na 16 16 |        |             |         .!xy16                       
  46:000 | DONE ins | na 16 16 | 005067 | 78          |                 sei                  
  47:000 | DONE wsp | na 16 16 |        |             |
  48:000 | DONE cmt | na 16 16 |        |             |                 ; Initialize the Return Stack (65816 stack)
  49:000 | DONE ins | na 16 16 | 005068 | a2 ff 01    |                 ldx.# 0001ff         01ff
  50:000 | DONE ins | na 16 16 | 00506b | 9a          |                 txs                  
  51:000 | DONE wsp | na 16 16 |        |             |
  52:000 | DONE cmt | na 16 16 |        |             |                 ; Clear Data Stack. This is repeated in ABORT, but we have no
  53:000 | DONE cmt | na 16 16 |        |             |                 ; choice if we want to load high-level words via EVALUATE
  54:000 | DONE ins | na 16 16 | 00506c | a0 00 00    |                 ldy.# 0000           
  55:000 | DONE ins | na 16 16 | 00506f | a2 ff 00    |                 ldx.# 0000ff         
  56:000 | DONE wsp | na 16 16 |        |             |
  57:000 | DONE cmt | na 16 16 |        |             |                 ; We start out in decimal mode
  58:000 | DONE ins | na 16 16 | 005072 | a9 0a 00    |                 lda.# 000a           
  59:000 | DONE ins | na 16 16 | 005075 | 85 16       |                 sta.d 000016         
  60:000 | DONE wsp | na 16 16 |        |             |
  61:000 | DONE cmt | na 16 16 |        |             |                 ; We start out with smaller words with less than 20 bytes being
  62:000 | DONE cmt | na 16 16 |        |             |                 ; natively compiled, because this includes words like LSHIFT and MAX.
  63:000 | DONE ins | na 16 16 | 005077 | a9 14 00    |                 lda.# &0020          
  64:000 | DONE ins | na 16 16 | 00507a | 85 26       |                 sta.d 000026         
  65:000 | DONE wsp | na 16 16 |        |             |
  66:000 | DONE cmt | na 16 16 |        |             |                 ; set the OUTPUT vector to the default, which is always put_chr,
  67:000 | DONE cmt | na 16 16 |        |             |                 ; but may have synonyms such as uart0
  68:000 | DONE ins | na 16 16 | 00507c | a9 34 50    |                 lda.# 005034         
  69:000 | DONE ins | na 16 16 | 00507f | 85 0e       |                 sta.d 00000e         
  70:000 | DONE wsp | na 16 16 |        |             |
  71:000 | DONE cmt | na 16 16 |        |             |                 ; set the INPUT vector to the default, which is always get_chr,
  72:000 | DONE cmt | na 16 16 |        |             |                 ; but may have synonyms such as uart0
  73:000 | DONE ins | na 16 16 | 005081 | a9 45 50    |                 lda.# 005045         
  74:000 | DONE ins | na 16 16 | 005084 | 85 10       |                 sta.d 000010         
  75:000 | DONE wsp | na 16 16 |        |             |
  76:000 | DONE cmt | na 16 16 |        |             |                 ; set the HAVE_KEY vector to the default, which is always
  77:000 | DONE cmt | na 16 16 |        |             |                 ; have_chr, but may have synonyms such as uart0
  78:000 | DONE ins | na 16 16 | 005086 | a9 57 50    |                 lda.# 005057         
  79:000 | DONE ins | na 16 16 | 005089 | 85 12       |                 sta.d 000012         
  80:000 | DONE wsp | na 16 16 |        |             |
  81:000 | DONE cmt | na 16 16 |        |             |                 ; The compiler pointer (CP) points to the first free byte
  82:000 | DONE cmt | na 16 16 |        |             |                 ; in the Dictionary
  83:000 | DONE ins | na 16 16 | 00508b | a9 00 03    |                 lda.# 000300         
  84:000 | DONE ins | na 16 16 | 00508e | 85 00       |                 sta.d 000000         
  85:000 | DONE wsp | na 16 16 |        |             |
  86:000 | DONE ins | na 16 16 | 005090 | a9 00 02    |                 lda.# 000200         
  87:000 | DONE ins | na 16 16 | 005093 | 85 08       |                 sta.d 000008         input buffer
  88:000 | DONE ins | na 16 16 | 005095 | 64 0a       |                 stz.d 00000a         input buffer starts empty
  89:000 | DONE ins | na 16 16 | 005097 | 64 06       |                 stz.d 000006         SOURCE-ID is zero
  90:000 | DONE ins | na 16 16 | 005099 | 64 14       |                 stz.d 000014         STATE is zero (interpret)
  91:000 | DONE wsp | na 16 16 |        |             |
  92:000 | DONE cmt | na 16 16 |        |             |                 ; The name token (nt) of DROP is always the first one in the
  93:000 | DONE cmt | na 16 16 |        |             |                 ; new Dictionary, so we start off the Dictionary Pointer (DP)
  94:000 | DONE cmt | na 16 16 |        |             |                 ; there. Anything that comes after that (with WORDS, before
  95:000 | DONE cmt | na 16 16 |        |             |                 ; that) is high-level
  96:000 | DONE ins | na 16 16 | 00509b | a9 b8 68    |                 lda.# 0068b8         
  97:000 | DONE ins | na 16 16 | 00509e | 85 02       |                 sta.d 000002         
  98:000 | DONE wsp | na 16 16 |        |             |
  99:000 | DONE cmt | na 16 16 |        |             |                 ; Clean the screen, assumes vt100 terminal
 100:000 | DONE ins | na 16 16 | 0050a0 | 20 ee 5b    |                 jsr 005bee           
 101:000 | DONE wsp | na 16 16 |        |             |
 102:000 | DONE cmt | na 16 16 |        |             |                 ; Define high-level words via EVALUATE. At this point, whatever
 103:000 | DONE cmt | na 16 16 |        |             |                 ; is in Y (TOS) is garbage, so we don't have to push it to the
 104:000 | DONE cmt | na 16 16 |        |             |                 ; stack first
 105:000 | DONE ins | na 16 16 | 0050a3 | ca          |                 dex                  
 106:000 | DONE ins | na 16 16 | 0050a4 | ca          |                 dex                  
 107:000 | DONE ins | na 16 16 | 0050a5 | ca          |                 dex                  
 108:000 | DONE ins | na 16 16 | 0050a6 | ca          |                 dex                  
 109:000 | DONE ins | na 16 16 | 0050a7 | a9 cd 69    |                 lda.# 0069cd         
 110:000 | DONE ins | na 16 16 | 0050aa | 95 00       |                 sta.dx 00            Start address goes in NOS
 111:000 | DONE ins | na 16 16 | 0050ac | a0 16 06    |                 ldy.# 000616         length goes in TOS
 112:000 | DONE wsp | na 16 16 |        |             |
 113:000 | DONE ins | na 16 16 | 0050af | 20 c6 58    |                 jsr 0058c6           
 114:000 | DONE wsp | na 16 16 |        |             |
 115:000 | DONE cmt | na 16 16 |        |             |                 ; fall through to ABORT
 116:000 | DONE wsp | na 16 16 |        |             |
 117:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 118:000 | DONE cmt | na 16 16 |        |             | ; ABORT ( -- ) 8+ bytes / X cycles
 119:000 | DONE cmt | na 16 16 |        |             | ; Reset the parameter (data) stack pointer and continue as QUIT
 120:000 | DONE cmt | na 16 16 |        |             | ; We can jump here via subroutine because we reset the stack pointer
 121:000 | DONE cmt | na 16 16 |        |             | ; anyway. Flows into QUIT.
 122:000 | DONE lbl | na 16 16 | 0050b2 |             | xt_abort                             
 123:000 | DONE ins | na 16 16 | 0050b2 | c2 20       |                 rep 20               
 123:001 | DONE ctl | na 16 16 |        |             |         .!a16
 124:000 | DONE cmt | na 16 16 |        |             |                 ; clear Data Stack
 125:000 | DONE ins | na 16 16 | 0050b4 | a0 00 00    |                 ldy.# 0000           
 126:000 | DONE ins | na 16 16 | 0050b7 | a2 ff 00    |                 ldx.# 0000ff         
 127:000 | DONE wsp | na 16 16 |        |             |
 128:000 | DONE wsp | na 16 16 |        |             |
 129:000 | DONE cmt | na 16 16 |        |             | ; drops through to QUIT, z_abort is the same as z_quit.
 130:000 | DONE wsp | na 16 16 |        |             |
 131:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 132:000 | DONE cmt | na 16 16 |        |             | ; QUIT ( -- ) X bytes / X cycles
 133:000 | DONE cmt | na 16 16 |        |             | ; Reset the input, clearning Return Stack. Jumps to QUIT do not have to be
 134:000 | DONE cmt | na 16 16 |        |             | ; subroutine jumps as the Return Stack is cleared anyway. Liara Forth follows
 135:000 | DONE cmt | na 16 16 |        |             | ; the ANSI Forth recommendation to use REFILL. Note we don't display the "ok"
 136:000 | DONE cmt | na 16 16 |        |             | ; system prompt until after the first output. This follows Gforth.
 137:000 | DONE lbl | na 16 16 | 0050ba |             | xt_quit                              
 138:000 | DONE cmt | na 16 16 |        |             |                 ; clear Return Stack
 139:000 | DONE ins | na 16 16 | 0050ba | a9 ff 01    |                 lda.# 0001ff         
 140:000 | DONE ins | na 16 16 | 0050bd | 1b          |                 tcs                  
 141:000 | DONE wsp | na 16 16 |        |             |
 142:000 | DONE cmt | na 16 16 |        |             |                 ; make sure Instruction Pointer is empty
 143:000 | DONE cmt | na 16 16 |        |             |                 ; TODO move this someplace else or else it will end up in ROM
 144:000 | DONE ins | na 16 16 | 0050be | 9c f5 58    |                 stz 0058f5           
 145:000 | DONE wsp | na 16 16 |        |             |
 146:000 | DONE cmt | na 16 16 |        |             |                 ; switch SOURCE-ID to zero (keyboard input)
 147:000 | DONE ins | na 16 16 | 0050c1 | 64 06       |                 stz.d 000006         
 148:000 | DONE wsp | na 16 16 |        |             |
 149:000 | DONE cmt | na 16 16 |        |             |                 ; switch to interpret state (STATE is zero)
 150:000 | DONE ins | na 16 16 | 0050c3 | 64 14       |                 stz.d 000014         
 151:000 | DONE wsp | na 16 16 |        |             |
 152:000 | DONE lbl | na 16 16 | 0050c5 |             | quit_get_line                        
 153:000 | DONE cmt | na 16 16 |        |             |                 ; Empty current input buffer
 154:000 | DONE ins | na 16 16 | 0050c5 | 64 0a       |                 stz.d 00000a         
 155:000 | DONE wsp | na 16 16 |        |             |
 156:000 | DONE cmt | na 16 16 |        |             |                 ; Accept a line from the current input source
 157:000 | DONE ins | na 16 16 | 0050c7 | 20 c5 5c    |                 jsr 005cc5           ( -- f )
 158:000 | DONE wsp | na 16 16 |        |             |
 159:000 | DONE ins | na 16 16 | 0050ca | 98          |                 tya                  force flag test
 160:000 | DONE ins | na 16 16 | 0050cb | d0 06       |                 bne 0050d3           
 161:000 | DONE wsp | na 16 16 |        |             |
 162:000 | DONE cmt | na 16 16 |        |             |                 ; If REFILL returned a FALSE flag, something went wrong and we
 163:000 | DONE cmt | na 16 16 |        |             |                 ; need to print an error message and reset the machine. We don't
 164:000 | DONE cmt | na 16 16 |        |             |                 ; need to save TOS because we're going to clobber it anyway when we
 165:000 | DONE cmt | na 16 16 |        |             |                 ; go back to ABORT.
 166:000 | DONE ins | na 16 16 | 0050cd | a9 9d 70    |                 lda.# 00709d         
 167:000 | DONE ins | na 16 16 | 0050d0 | 4c 7a 69    |                 jmp 00697a           
 168:000 | DONE wsp | na 16 16 |        |             |
 169:000 | DONE wsp | na 16 16 |        |             |
 170:000 | DONE lbl | na 16 16 | 0050d3 |             | quit_refill_successful               
 171:000 | DONE cmt | na 16 16 |        |             |                 ; Assume we have successfully accepted a string of input from
 172:000 | DONE cmt | na 16 16 |        |             |                 ; a source, with address cib and length of input in ciblen. We
 173:000 | DONE cmt | na 16 16 |        |             |                 ; arrive here still with the TRUE flag from REFILL as TOS (in Y)
 174:000 | DONE ins | na 16 16 | 0050d3 | b4 00       |                 ldy.dx 00            drop TOS
 175:000 | DONE ins | na 16 16 | 0050d5 | e8          |                 inx                  
 176:000 | DONE ins | na 16 16 | 0050d6 | e8          |                 inx                  
 177:000 | DONE wsp | na 16 16 |        |             |
 178:000 | DONE cmt | na 16 16 |        |             |                 ; make >IN point to begining of buffer
 179:000 | DONE ins | na 16 16 | 0050d7 | 64 0c       |                 stz.d 00000c         
 180:000 | DONE wsp | na 16 16 |        |             |
 181:000 | DONE cmt | na 16 16 |        |             |                 ; Main compile/execute routine. Consider moving this inside QUIT
 182:000 | DONE cmt | na 16 16 |        |             |                 ; once we know everything works
 183:000 | DONE ins | na 16 16 | 0050d9 | 20 f5 68    |                 jsr 0068f5           
 184:000 | DONE wsp | na 16 16 |        |             |
 185:000 | DONE cmt | na 16 16 |        |             |                 ; Test for Data Stack underflow. Our stack is so large in single
 186:000 | DONE cmt | na 16 16 |        |             |                 ; user mode that we don't bother checking for overflow - if that
 187:000 | DONE cmt | na 16 16 |        |             |                 ; happens, we're screwed anyway
 188:000 | DONE ins | na 16 16 | 0050dc | e0 00 01    |                 cpx.# 000100         
 189:000 | DONE ins | na 16 16 | 0050df | 90 06       |                 bcc 0050e7           DSP must always be smaller (!) than DSP0
 190:000 | DONE wsp | na 16 16 |        |             |
 191:000 | DONE ins | na 16 16 | 0050e1 | a9 03 71    |                 lda.# 007103         
 192:000 | DONE ins | na 16 16 | 0050e4 | 4c 7a 69    |                 jmp 00697a           
 193:000 | DONE wsp | na 16 16 |        |             |
 194:000 | DONE lbl | na 16 16 | 0050e7 |             | quit_ok                              
 195:000 | DONE cmt | na 16 16 |        |             |                 ; Display system prompt if all went well. If we're interpreting,
 196:000 | DONE cmt | na 16 16 |        |             |                 ; this is " ok", if we're compiling, it's " compiled"
 197:000 | DONE ins | na 16 16 | 0050e7 | a5 14       |                 lda.d 000014         
 198:000 | DONE ins | na 16 16 | 0050e9 | d0 05       |                 bne 0050f0           
 199:000 | DONE wsp | na 16 16 |        |             |
 200:000 | DONE ins | na 16 16 | 0050eb | a9 e3 6f    |                 lda.# 006fe3         
 201:000 | DONE ins | na 16 16 | 0050ee | 80 03       |                 bra 0050f3           
 202:000 | DONE lbl | na 16 16 | 0050f0 |             | quit_compiled                        
 203:000 | DONE ins | na 16 16 | 0050f0 | a9 e7 6f    |                 lda.# 006fe7         fall through to quit_print
 204:000 | DONE lbl | na 16 16 | 0050f3 |             | quit_print                           
 205:000 | DONE ins | na 16 16 | 0050f3 | 20 80 69    |                 jsr 006980           
 206:000 | DONE wsp | na 16 16 |        |             |
 207:000 | DONE cmt | na 16 16 |        |             |                 ; Awesome line, everybody. Now get the next one
 208:000 | DONE ins | na 16 16 | 0050f6 | 4c c5 50    |                 jmp 0050c5           
 209:000 | DONE wsp | na 16 16 |        |             |
 210:000 | DONE lbl | na 16 16 | 0050f9 |             | z_cold                               
 211:000 | DONE lbl | na 16 16 | 0050f9 |             | z_abort                              
 212:000 | DONE lbl | na 16 16 | 0050f9 |             | z_quit                               ; empty, no RTS required
 213:000 | DONE wsp | na 16 16 |        |             |
 214:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 215:000 | DONE cmt | na 16 16 |        |             | ; < "LESS" ( n m -- f ) X bytes / X cycles
 216:000 | DONE cmt | na 16 16 |        |             | ; Return true flag if NOS < TOS. See
 217:000 | DONE cmt | na 16 16 |        |             | ; http://www.6502.org/tutorials/compare_beyond.html for details on the
 218:000 | DONE cmt | na 16 16 |        |             | ; comparisons
 219:000 | DONE lbl | na 16 16 | 0050f9 |             | xt_less                              
 220:000 | DONE ins | na 16 16 | 0050f9 | 98          |                 tya                  
 221:000 | DONE ins | na 16 16 | 0050fa | a0 00 00    |                 ldy.# 0000           default is false
 222:000 | DONE wsp | na 16 16 |        |             |
 223:000 | DONE ins | na 16 16 | 0050fd | 38          |                 sec                  
 224:000 | DONE ins | na 16 16 | 0050fe | f5 00       |                 sbc.dx 00            
 225:000 | DONE ins | na 16 16 | 005100 | f0 08       |                 beq 00510a           the same is not greater
 226:000 | DONE ins | na 16 16 | 005102 | 50 03       |                 bvc 005107           no overflow, skip ahead
 227:000 | DONE wsp | na 16 16 |        |             |
 228:000 | DONE cmt | na 16 16 |        |             |                 ; Deal with oveflow because we use signed numbers
 229:000 | DONE ins | na 16 16 | 005104 | 49 00 80    |                 eor.# 8000           compliment negative flag
 230:000 | DONE wsp | na 16 16 |        |             |
 231:000 | DONE lbl | na 16 16 | 005107 |             | less_no_ov                           
 232:000 | DONE cmt | na 16 16 |        |             |                 ; if we're negative TOS > NOS
 233:000 | DONE ins | na 16 16 | 005107 | 30 01       |                 bmi 00510a           
 234:000 | DONE ins | na 16 16 | 005109 | 88          |                 dey                  
 235:000 | DONE lbl | na 16 16 | 00510a |             | less_nip                             
 236:000 | DONE ins | na 16 16 | 00510a | e8          |                 inx                  
 237:000 | DONE ins | na 16 16 | 00510b | e8          |                 inx                  
 238:000 | DONE wsp | na 16 16 |        |             |
 239:000 | DONE lbl | na 16 16 | 00510c |             | z_less                               
 239:001 | DONE ins | na 16 16 | 00510c | 60          |                 rts                  
 240:000 | DONE wsp | na 16 16 |        |             |
 241:000 | DONE wsp | na 16 16 |        |             |
 242:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 243:000 | DONE cmt | na 16 16 |        |             | ; <> "NOT-EQUAL" ( n m -- f ) X bytes / X cycles
 244:000 | DONE cmt | na 16 16 |        |             | ; Return true flag if TOS and NOS are not the same. This is just a different
 245:000 | DONE cmt | na 16 16 |        |             | ; version of EQUAL, we repeat the code for speed reasons
 246:000 | DONE lbl | na 16 16 | 00510d |             | xt_not-equal                         
 247:000 | DONE ins | na 16 16 | 00510d | 98          |                 tya                  
 248:000 | DONE ins | na 16 16 | 00510e | a0 00 00    |                 ldy.# 0000           default value is false
 249:000 | DONE wsp | na 16 16 |        |             |
 250:000 | DONE ins | na 16 16 | 005111 | d5 00       |                 cmp.dx 00            
 251:000 | DONE ins | na 16 16 | 005113 | f0 01       |                 beq 005116           
 252:000 | DONE ins | na 16 16 | 005115 | 88          |                 dey                  wraps to 0FFFF (true)
 253:000 | DONE wsp | na 16 16 |        |             |
 254:000 | DONE lbl | na 16 16 | 005116 |             | not-equal_equal                      ; yes, this is a silly name
 255:000 | DONE ins | na 16 16 | 005116 | e8          |                 inx                  
 256:000 | DONE ins | na 16 16 | 005117 | e8          |                 inx                  
 257:000 | DONE wsp | na 16 16 |        |             |
 258:000 | DONE lbl | na 16 16 | 005118 |             | z_not-equal                          
 258:001 | DONE ins | na 16 16 | 005118 | 60          |                 rts                  
 259:000 | DONE wsp | na 16 16 |        |             |
 260:000 | DONE wsp | na 16 16 |        |             |
 261:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 262:000 | DONE cmt | na 16 16 |        |             | ; <# "LESSNUMBER" ( -- ) 8 bytes / X cycles
 263:000 | DONE cmt | na 16 16 |        |             | ; Start the process to create pictured numeric output. The new string is
 264:000 | DONE cmt | na 16 16 |        |             | ; constructed from back to front, saving the new character at the beginning of
 265:000 | DONE cmt | na 16 16 |        |             | ; the output string. Since we use PAD as a starting address and work backward
 266:000 | DONE cmt | na 16 16 |        |             | ; (!), the string is constructed in the space between the end of the dictionary
 267:000 | DONE cmt | na 16 16 |        |             | ; (as defined by CP) and the PAD. This allows us to satisfy the ANS Forth
 268:000 | DONE cmt | na 16 16 |        |             | ; condition that programs don't fool around with the PAD but still use its
 269:000 | DONE cmt | na 16 16 |        |             | ; address. Code based on pForth, see
 270:000 | DONE cmt | na 16 16 |        |             | ; http://pforth.googlecode.com/svn/trunk/fth/numberio.fth pForth is in the pubic
 271:000 | DONE cmt | na 16 16 |        |             | ; domain. Forth is : <# PAD HLD ! ; we use the internal variable tohold instead
 272:000 | DONE cmt | na 16 16 |        |             | ; of HLD.
 273:000 | DONE cmt | na 16 16 |        |             | ; TODO consider using OUTPUT buffer as a location instead
 274:000 | DONE lbl | na 16 16 | 005119 |             | xt_lessnumber                        
 275:000 | DONE ins | na 16 16 | 005119 | 20 e2 5b    |                 jsr 005be2           
 276:000 | DONE ins | na 16 16 | 00511c | 84 18       |                 sty.d 000018         
 277:000 | DONE wsp | na 16 16 |        |             |
 278:000 | DONE ins | na 16 16 | 00511e | b4 00       |                 ldy.dx 00            
 279:000 | DONE ins | na 16 16 | 005120 | e8          |                 inx                  
 280:000 | DONE ins | na 16 16 | 005121 | e8          |                 inx                  
 281:000 | DONE wsp | na 16 16 |        |             |
 282:000 | DONE lbl | na 16 16 | 005122 |             | z_lessnumber                         
 282:001 | DONE ins | na 16 16 | 005122 | 60          |                 rts                  
 283:000 | DONE wsp | na 16 16 |        |             |
 284:000 | DONE wsp | na 16 16 |        |             |
 285:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 286:000 | DONE cmt | na 16 16 |        |             | ; > "GREATER" ( n m -- f ) X bytes / X cycles
 287:000 | DONE cmt | na 16 16 |        |             | ; Return true flag if NOS > TOS. See
 288:000 | DONE cmt | na 16 16 |        |             | ; http://www.6502.org/tutorials/compare_beyond.html for details on the
 289:000 | DONE cmt | na 16 16 |        |             | ; comparisons
 290:000 | DONE lbl | na 16 16 | 005123 |             | xt_greater                           
 291:000 | DONE ins | na 16 16 | 005123 | 98          |                 tya                  
 292:000 | DONE ins | na 16 16 | 005124 | a0 00 00    |                 ldy.# 0000           default is false
 293:000 | DONE wsp | na 16 16 |        |             |
 294:000 | DONE ins | na 16 16 | 005127 | 38          |                 sec                  
 295:000 | DONE ins | na 16 16 | 005128 | f5 00       |                 sbc.dx 00            
 296:000 | DONE ins | na 16 16 | 00512a | f0 08       |                 beq 005134           the same is not greater
 297:000 | DONE ins | na 16 16 | 00512c | 50 03       |                 bvc 005131           no overflow, skip ahead
 298:000 | DONE wsp | na 16 16 |        |             |
 299:000 | DONE cmt | na 16 16 |        |             |                 ; Deal with oveflow because we use signed numbers
 300:000 | DONE ins | na 16 16 | 00512e | 49 00 80    |                 eor.# 8000           compliment negative flag
 301:000 | DONE wsp | na 16 16 |        |             |
 302:000 | DONE lbl | na 16 16 | 005131 |             | greater_no_ov                        
 303:000 | DONE cmt | na 16 16 |        |             |                 ; if we're still positiv, TOS < NOS
 304:000 | DONE ins | na 16 16 | 005131 | 10 01       |                 bpl 005134           
 305:000 | DONE ins | na 16 16 | 005133 | 88          |                 dey                  
 306:000 | DONE lbl | na 16 16 | 005134 |             | greater_nip                          
 307:000 | DONE ins | na 16 16 | 005134 | e8          |                 inx                  
 308:000 | DONE ins | na 16 16 | 005135 | e8          |                 inx                  
 309:000 | DONE wsp | na 16 16 |        |             |
 310:000 | DONE lbl | na 16 16 | 005136 |             | z_greater                            
 310:001 | DONE ins | na 16 16 | 005136 | 60          |                 rts                  
 311:000 | DONE wsp | na 16 16 |        |             |
 312:000 | DONE wsp | na 16 16 |        |             |
 313:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 314:000 | DONE cmt | na 16 16 |        |             | ; >BODY "TOBODY" ( xt -- addr ) 3 bytes / 6 cycles
 315:000 | DONE cmt | na 16 16 |        |             | ; Given a word's execution token (xt), return the address of the start of that
 316:000 | DONE cmt | na 16 16 |        |             | ; word's parameter field (PFA). This is the address that HERE would return right
 317:000 | DONE cmt | na 16 16 |        |             | ; after CREATE. This is a difficult word for STC Forths, because most words
 318:000 | DONE cmt | na 16 16 |        |             | ; don't have a Code Field Area (CFA) to skip. We solve this by testing if the
 319:000 | DONE cmt | na 16 16 |        |             | ; first three bytes of the body (that starts at xt) are subroutine jumps to
 320:000 | DONE cmt | na 16 16 |        |             | ; DOVAR, DOCONST or DODOES
 321:000 | DONE lbl | na 16 16 | 005137 |             | xt_tobody                            
 322:000 | DONE cmt | na 16 16 |        |             |                 ; In the header, xt already points to the CFA, which CREATE by
 323:000 | DONE cmt | na 16 16 |        |             |                 ; default fills with a JSR to DOVAR
 324:000 | DONE ins | na 16 16 | 005137 | e2 20       |                 sep 20               
 324:001 | DONE ctl | na  8 16 |        |             |         .!a8
 325:000 | DONE ins | na  8 16 | 005139 | b9 00 00    |                 lda.y 0000           see if we have a JSR instruction
 326:000 | DONE ins | na  8 16 | 00513c | c9 20       |                 cmp.# 20             
 327:000 | DONE ins | na  8 16 | 00513e | c2 20       |                 rep 20               
 327:001 | DONE ctl | na 16 16 |        |             |         .!a16
 328:000 | DONE ins | na 16 16 | 005140 | d0 18       |                 bne 00515a           
 329:000 | DONE wsp | na 16 16 |        |             |
 330:000 | DONE cmt | na 16 16 |        |             |                 ; Okay, so we found a JSR instruction. But is it one of the
 331:000 | DONE cmt | na 16 16 |        |             |                 ; right ones?
 332:000 | DONE ins | na 16 16 | 005142 | c8          |                 iny                  
 333:000 | DONE ins | na 16 16 | 005143 | b9 00 00    |                 lda.y 0000           
 334:000 | DONE wsp | na 16 16 |        |             |
 335:000 | DONE ins | na 16 16 | 005146 | c9 ee 68    |                 cmp.# 0068ee         
 336:000 | DONE ins | na 16 16 | 005149 | f0 0d       |                 beq 005158           
 337:000 | DONE ins | na 16 16 | 00514b | c9 c4 68    |                 cmp.# 0068c4         
 338:000 | DONE ins | na 16 16 | 00514e | f0 08       |                 beq 005158           
 339:000 | DONE ins | na 16 16 | 005150 | c9 e1 68    |                 cmp.# 0068e1         
 340:000 | DONE ins | na 16 16 | 005153 | f0 03       |                 beq 005158           
 341:000 | DONE wsp | na 16 16 |        |             |
 342:000 | DONE cmt | na 16 16 |        |             |                 ; This is some other jump, so we go back to beginning of word
 343:000 | DONE ins | na 16 16 | 005155 | 88          |                 dey                  restor original xt
 344:000 | DONE ins | na 16 16 | 005156 | 80 02       |                 bra 00515a           
 345:000 | DONE wsp | na 16 16 |        |             |
 346:000 | DONE lbl | na 16 16 | 005158 |             | tobody_have_cfa                      
 347:000 | DONE cmt | na 16 16 |        |             |                 ; Got the right kind of jump. We've already increased the index
 348:000 | DONE cmt | na 16 16 |        |             |                 ; by one, so we just have to add two
 349:000 | DONE ins | na 16 16 | 005158 | c8          |                 iny                  
 350:000 | DONE ins | na 16 16 | 005159 | c8          |                 iny                  drops through to end
 351:000 | DONE wsp | na 16 16 |        |             |
 352:000 | DONE lbl | na 16 16 | 00515a |             | tobody_nojsr                         
 353:000 | DONE cmt | na 16 16 |        |             |                 ; If we don't have a jump instruction, the xt already points to
 354:000 | DONE cmt | na 16 16 |        |             |                 ; the PFA, because there is no CFA
 355:000 | DONE cmt | na 16 16 |        |             |                 ; body
 356:000 | DONE wsp | na 16 16 |        |             |
 357:000 | DONE lbl | na 16 16 | 00515a |             | z_tobody                             
 357:001 | DONE ins | na 16 16 | 00515a | 60          |                 rts                  
 358:000 | DONE wsp | na 16 16 |        |             |
 359:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 360:000 | DONE cmt | na 16 16 |        |             | ; >IN "TOIN" ( -- addr ) 6 bytes / 12 cycles
 361:000 | DONE cmt | na 16 16 |        |             | ; Return address where pointer to current char in input buffer lives (>IN)
 362:000 | DONE lbl | na 16 16 | 00515b |             | xt_to-in                             
 363:000 | DONE ins | na 16 16 | 00515b | ca          |                 dex                  
 364:000 | DONE ins | na 16 16 | 00515c | ca          |                 dex                  
 365:000 | DONE ins | na 16 16 | 00515d | 94 00       |                 sty.dx 00            
 366:000 | DONE wsp | na 16 16 |        |             |
 367:000 | DONE ins | na 16 16 | 00515f | a0 0c 00    |                 ldy.# 00000c         >IN
 368:000 | DONE lbl | na 16 16 | 005162 |             | z_to-in                              
 368:001 | DONE ins | na 16 16 | 005162 | 60          |                 rts                  
 369:000 | DONE wsp | na 16 16 |        |             |
 370:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 371:000 | DONE cmt | na 16 16 |        |             | ; >NUMBER ( ud addr u -- ud addr u ) X bytes / X cycles
 372:000 | DONE cmt | na 16 16 |        |             | ; Convert a string to a double number. Logic here is based on the routine by
 373:000 | DONE cmt | na 16 16 |        |             | ; Phil Burk of the same name in pForth; see
 374:000 | DONE cmt | na 16 16 |        |             | ; https://github.com/philburk/pforth/blob/master/fth/numberio.fth the original
 375:000 | DONE cmt | na 16 16 |        |             | ; Forth code. We arrive here from NUMBER which has made sure that we don't have
 376:000 | DONE cmt | na 16 16 |        |             | ; to deal with a sign and we don't have to deal with a dot as a last character
 377:000 | DONE cmt | na 16 16 |        |             | ; that signalizes double - this should be a pure number string.
 378:000 | DONE cmt | na 16 16 |        |             | ; This routine calles UM*, which uses tmp1, tmp2 and tmp3, so we cannot access
 379:000 | DONE cmt | na 16 16 |        |             | ; any of those.
 380:000 | DONE lbl | na 16 16 | 005163 |             | xt_tonumber                          
 381:000 | DONE dir | na 16 16 |        |             |         .!a16                        
 382:000 | DONE cmt | na 16 16 |        |             |                 ; For the math routine, we move the inputs to the scratchpad to
 383:000 | DONE cmt | na 16 16 |        |             |                 ; avoid having to fool around with the Data Stack.
 384:000 | DONE cmt | na 16 16 |        |             |                 ;
 385:000 | DONE cmt | na 16 16 |        |             |                 ;     +-----+-----+-----+-----+-----+-----+-----+-----+
 386:000 | DONE cmt | na 16 16 |        |             |                 ;     |   UD-LO   |   UD-HI   |     N     | UD-HI-LO  |
 387:000 | DONE cmt | na 16 16 |        |             |                 ;     |           |           |           |           |
 388:000 | DONE cmt | na 16 16 |        |             |                 ;     |  S    S+1 | S+2   S+3 | S+4   S+5 | S+6   S+7 |
 389:000 | DONE cmt | na 16 16 |        |             |                 ;     +-----+-----+-----+-----+-----+-----+-----+-----+
 390:000 | DONE wsp | na 16 16 |        |             |
 391:000 | DONE cmt | na 16 16 |        |             |                 ; The math routine works by converting one character to its
 392:000 | DONE cmt | na 16 16 |        |             |                 ; numerical value (N) via DIGIT? and storing it in S+4 for
 393:000 | DONE cmt | na 16 16 |        |             |                 ; the moment. We then multiply the UD-HI value with the radix
 394:000 | DONE cmt | na 16 16 |        |             |                 ; (from BASE) using UM*, which returns a double-cell result. We
 395:000 | DONE cmt | na 16 16 |        |             |                 ; discard the high cell of that result (UD-HI-HI) and store the
 396:000 | DONE cmt | na 16 16 |        |             |                 ; low cell (UD-HI-LO) in S+6 for now. -- The second part is
 397:000 | DONE cmt | na 16 16 |        |             |                 ; multiplying UD-LO with the radix. The high cell (UD-LO-HI)
 398:000 | DONE cmt | na 16 16 |        |             |                 ; gets put in S+2, the low cell (HD-LO-LO) in S. We then use
 399:000 | DONE cmt | na 16 16 |        |             |                 ; a version of D+ to add ( S S+2 ) and ( S+4 S+6) together,
 400:000 | DONE cmt | na 16 16 |        |             |                 ; storing the result back in S and S+2, before we start another
 401:000 | DONE cmt | na 16 16 |        |             |                 ; round with it as the new UD-LO and UD-HI.
 402:000 | DONE wsp | na 16 16 |        |             |
 403:000 | DONE cmt | na 16 16 |        |             |                 ; Fill the scratchpad. We arrive with ( ud-lo ud-hi addr u ).
 404:000 | DONE cmt | na 16 16 |        |             |                 ; After this step, the original ud-lo and ud-hi will still be on
 405:000 | DONE cmt | na 16 16 |        |             |                 ; the Data Stack, but will be ignored and later overwritten
 406:000 | DONE ins | na 16 16 | 005163 | b5 04       |                 lda.dx 04            ud-lo
 407:000 | DONE ins | na 16 16 | 005165 | 85 28       |                 sta.d 000028         
 408:000 | DONE ins | na 16 16 | 005167 | b5 02       |                 lda.dx 02            ud-hi
 409:000 | DONE ins | na 16 16 | 005169 | 85 2a       |                 sta.d 00002a         
 410:000 | DONE wsp | na 16 16 |        |             |
 411:000 | DONE cmt | na 16 16 |        |             |                 ; We push down one on the Data Stack to use TOS for character
 412:000 | DONE cmt | na 16 16 |        |             |                 ; conversion - now ( ud-lo ud-hi addr u u )
 413:000 | DONE ins | na 16 16 | 00516b | ca          |                 dex                  
 414:000 | DONE ins | na 16 16 | 00516c | ca          |                 dex                  
 415:000 | DONE ins | na 16 16 | 00516d | 94 00       |                 sty.dx 00            
 416:000 | DONE wsp | na 16 16 |        |             |
 417:000 | DONE lbl | na 16 16 | 00516f |             | tonumber_loop                        
 418:000 | DONE cmt | na 16 16 |        |             |                 ; Get one character
 419:000 | DONE ins | na 16 16 | 00516f | a1 02       |                 lda.dxi 02           
 420:000 | DONE ins | na 16 16 | 005171 | a8          |                 tay                  ( ud-lo ud-hi addr u char )
 421:000 | DONE wsp | na 16 16 |        |             |
 422:000 | DONE cmt | na 16 16 |        |             |                 ; Convert one character. DIGIT? takes care of the correct
 423:000 | DONE cmt | na 16 16 |        |             |                 ; register size for A and does a paranoid AND to make sure that
 424:000 | DONE cmt | na 16 16 |        |             |                 ; B is zero, so we don't have to do any of that here.
 425:000 | DONE ins | na 16 16 | 005172 | 20 b9 57    |                 jsr 0057b9           ( char -- n -1 | char 0 )
 426:000 | DONE wsp | na 16 16 |        |             |
 427:000 | DONE cmt | na 16 16 |        |             |                 ; This gives us (ud-lo ud-hi addr u char f | n f ), so check the
 428:000 | DONE cmt | na 16 16 |        |             |                 ; flag. If it is zero, we return what we have and let the caller
 429:000 | DONE cmt | na 16 16 |        |             |                 ; (usually NUMBER) complain to the user
 430:000 | DONE ins | na 16 16 | 005175 | 98          |                 tya                  
 431:000 | DONE ins | na 16 16 | 005176 | d0 06       |                 bne 00517e           
 432:000 | DONE wsp | na 16 16 |        |             |
 433:000 | DONE ins | na 16 16 | 005178 | b4 00       |                 ldy.dx 00            
 434:000 | DONE ins | na 16 16 | 00517a | e8          |                 inx                  
 435:000 | DONE ins | na 16 16 | 00517b | e8          |                 inx                  
 436:000 | DONE ins | na 16 16 | 00517c | 80 35       |                 bra 0051b3           
 437:000 | DONE wsp | na 16 16 |        |             |
 438:000 | DONE lbl | na 16 16 | 00517e |             | tonumber_ok                          
 439:000 | DONE cmt | na 16 16 |        |             |                 ; Conversion was successful, so we're here with
 440:000 | DONE cmt | na 16 16 |        |             |                 ; ( ud-lo ud-hi addr u n -1 ) and can start the math routine.
 441:000 | DONE wsp | na 16 16 |        |             |
 442:000 | DONE cmt | na 16 16 |        |             |                 ; Save N so we don't have to fool around with the Data Stack
 443:000 | DONE ins | na 16 16 | 00517e | b5 00       |                 lda.dx 00            
 444:000 | DONE ins | na 16 16 | 005180 | 85 2c       |                 sta.d 00002c         
 445:000 | DONE wsp | na 16 16 |        |             |
 446:000 | DONE cmt | na 16 16 |        |             |                 ; Now multiply ud-hi (the one in the scratchpad, not the
 447:000 | DONE cmt | na 16 16 |        |             |                 ; original one in the Data Stack) by the radix from BASE. We can
 448:000 | DONE cmt | na 16 16 |        |             |                 ; clobber TOS and NOS
 449:000 | DONE ins | na 16 16 | 005182 | a5 2a       |                 lda.d 00002a         
 450:000 | DONE ins | na 16 16 | 005184 | 95 00       |                 sta.dx 00            
 451:000 | DONE ins | na 16 16 | 005186 | a4 16       |                 ldy.d 000016         ( ud-lo ud-hi addr u ud-hi base )
 452:000 | DONE wsp | na 16 16 |        |             |
 453:000 | DONE cmt | na 16 16 |        |             |                 ; UM* returns a double celled number
 454:000 | DONE ins | na 16 16 | 005188 | 20 c0 5e    |                 jsr 005ec0           ( ud-lo ud-hi addr u ud-hi-lo ud-hi-hi )
 455:000 | DONE wsp | na 16 16 |        |             |
 456:000 | DONE cmt | na 16 16 |        |             |                 ; Move ud-hi-lo to safety
 457:000 | DONE ins | na 16 16 | 00518b | b5 00       |                 lda.dx 00            ud-hi-lo
 458:000 | DONE ins | na 16 16 | 00518d | 85 2e       |                 sta.d 00002e         
 459:000 | DONE wsp | na 16 16 |        |             |
 460:000 | DONE cmt | na 16 16 |        |             |                 ; Now we multiply ud-lo, overwriting the stack entries
 461:000 | DONE ins | na 16 16 | 00518f | a5 28       |                 lda.d 000028         
 462:000 | DONE ins | na 16 16 | 005191 | 95 00       |                 sta.dx 00            ( ud-lo ud-hi addr u ud-lo ud-hi-hi )
 463:000 | DONE ins | na 16 16 | 005193 | a4 16       |                 ldy.d 000016         ( ud-lo ud-hi addr u ud-lo base )
 464:000 | DONE wsp | na 16 16 |        |             |
 465:000 | DONE ins | na 16 16 | 005195 | 20 c0 5e    |                 jsr 005ec0           ( ud-lo ud-hi addr u ud-lo-lo ud-lo-hi )
 466:000 | DONE ins | na 16 16 | 005198 | 84 2a       |                 sty.d 00002a         
 467:000 | DONE ins | na 16 16 | 00519a | b5 00       |                 lda.dx 00            
 468:000 | DONE ins | na 16 16 | 00519c | 85 28       |                 sta.d 000028         
 469:000 | DONE wsp | na 16 16 |        |             |
 470:000 | DONE cmt | na 16 16 |        |             |                 ; This is a faster version of D+
 471:000 | DONE ins | na 16 16 | 00519e | a5 28       |                 lda.d 000028         
 472:000 | DONE ins | na 16 16 | 0051a0 | 18          |                 clc                  
 473:000 | DONE ins | na 16 16 | 0051a1 | 65 2c       |                 adc.d 00002c         
 474:000 | DONE ins | na 16 16 | 0051a3 | 85 28       |                 sta.d 000028         this is the new ud-lo
 475:000 | DONE ins | na 16 16 | 0051a5 | a5 2a       |                 lda.d 00002a         
 476:000 | DONE ins | na 16 16 | 0051a7 | 65 2e       |                 adc.d 00002e         
 477:000 | DONE ins | na 16 16 | 0051a9 | 85 2a       |                 sta.d 00002a         this is the new ud-hi
 478:000 | DONE wsp | na 16 16 |        |             |
 479:000 | DONE cmt | na 16 16 |        |             |                 ; Clean up: Get rid of one of the two top elements on the Data
 480:000 | DONE cmt | na 16 16 |        |             |                 ; Stack. NIP is faster if Y is TOS
 481:000 | DONE ins | na 16 16 | 0051ab | e8          |                 inx                  
 482:000 | DONE ins | na 16 16 | 0051ac | e8          |                 inx                  ( ud-lo ud-hi addr u ud-lo-hi )
 483:000 | DONE wsp | na 16 16 |        |             |
 484:000 | DONE cmt | na 16 16 |        |             |                 ; One character down
 485:000 | DONE ins | na 16 16 | 0051ad | f6 02       |                 inc.dx 02            increase address
 486:000 | DONE ins | na 16 16 | 0051af | d6 00       |                 dec.dx 00            decrease length
 487:000 | DONE wsp | na 16 16 |        |             |
 488:000 | DONE ins | na 16 16 | 0051b1 | d0 bc       |                 bne 00516f           
 489:000 | DONE wsp | na 16 16 |        |             |
 490:000 | DONE lbl | na 16 16 | 0051b3 |             | tonumber_done                        
 491:000 | DONE cmt | na 16 16 |        |             |                 ; Counter has reached zero or we have an error. In both cases,
 492:000 | DONE cmt | na 16 16 |        |             |                 ; we clean up the Data Stack and return. We arrive here with
 493:000 | DONE cmt | na 16 16 |        |             |                 ; ( ud-lo ud-hi addr u char ) if there was an error
 494:000 | DONE cmt | na 16 16 |        |             |                 ; and ( ud-lo ud-hi addr u ud-lo ) if not
 495:000 | DONE ins | na 16 16 | 0051b3 | b4 00       |                 ldy.dx 00            
 496:000 | DONE ins | na 16 16 | 0051b5 | e8          |                 inx                  
 497:000 | DONE ins | na 16 16 | 0051b6 | e8          |                 inx                  ( ud-lo ud-hi addr u )
 498:000 | DONE wsp | na 16 16 |        |             |
 499:000 | DONE cmt | na 16 16 |        |             |                 ; The new ud-lo and ud-hi are still on the scratch pad
 500:000 | DONE ins | na 16 16 | 0051b7 | a5 28       |                 lda.d 000028         new ud-lo
 501:000 | DONE ins | na 16 16 | 0051b9 | 95 04       |                 sta.dx 04            
 502:000 | DONE ins | na 16 16 | 0051bb | a5 2a       |                 lda.d 00002a         
 503:000 | DONE ins | na 16 16 | 0051bd | 95 02       |                 sta.dx 02            new ud-hi
 504:000 | DONE wsp | na 16 16 |        |             |
 505:000 | DONE lbl | na 16 16 | 0051bf |             | z_tonumber                           
 505:001 | DONE ins | na 16 16 | 0051bf | 60          |                 rts                  
 506:000 | DONE wsp | na 16 16 |        |             |
 507:000 | DONE wsp | na 16 16 |        |             |
 508:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 509:000 | DONE cmt | na 16 16 |        |             | ; >R "TOR" ( n -- ) (R: -- n )  7 bytes / 22 cycles
 510:000 | DONE cmt | na 16 16 |        |             | ; Move Top of Data Stack to Top of Return Stack
 511:000 | DONE cmt | na 16 16 |        |             | ; TODO consider stripping PHA/PLA if natively compiled (see COMPILE,)
 512:000 | DONE lbl | na 16 16 | 0051c0 |             | xt_tor                               
 513:000 | DONE dir | na 16 16 |        |             |         .!a16                        
 514:000 | DONE cmt | na 16 16 |        |             |                 ; Save the return address. If this word is natively coded, this
 515:000 | DONE cmt | na 16 16 |        |             |                 ; is a complete waste of nine cycles, but required for
 516:000 | DONE cmt | na 16 16 |        |             |                 ; subroutine coding
 517:000 | DONE ins | na 16 16 | 0051c0 | 68          |                 pla                  
 518:000 | DONE cmt | na 16 16 |        |             |                 ; --- cut for native coding ---
 519:000 | DONE wsp | na 16 16 |        |             |
 520:000 | DONE ins | na 16 16 | 0051c1 | 5a          |                 phy                  the actual work
 521:000 | DONE wsp | na 16 16 |        |             |
 522:000 | DONE ins | na 16 16 | 0051c2 | b4 00       |                 ldy.dx 00            DROP
 523:000 | DONE ins | na 16 16 | 0051c4 | e8          |                 inx                  
 524:000 | DONE ins | na 16 16 | 0051c5 | e8          |                 inx                  
 525:000 | DONE wsp | na 16 16 |        |             |
 526:000 | DONE cmt | na 16 16 |        |             |                 ; --- cut for native coding ---
 527:000 | DONE ins | na 16 16 | 0051c6 | 48          |                 pha                  put return address back in place
 528:000 | DONE wsp | na 16 16 |        |             |
 529:000 | DONE lbl | na 16 16 | 0051c7 |             | z_tor                                
 529:001 | DONE ins | na 16 16 | 0051c7 | 60          |                 rts                  
 530:000 | DONE wsp | na 16 16 |        |             |
 531:000 | DONE wsp | na 16 16 |        |             |
 532:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 533:000 | DONE cmt | na 16 16 |        |             | ; /STRING ( addr u n -- ) X bytes / X cycles
 534:000 | DONE cmt | na 16 16 |        |             | ; Remove characters from front of string. Uses tmp1
 535:000 | DONE cmt | na 16 16 |        |             | ; Forth version: ROT OVER + ROT ROT - ;
 536:000 | DONE cmt | na 16 16 |        |             | ; TODO check for negative strings so 1 /STRING TYPE won't try to print the whole
 537:000 | DONE cmt | na 16 16 |        |             | ; address space; follow Gforth in failing gracefully
 538:000 | DONE lbl | na 16 16 | 0051c8 |             | xt_slashstring                       
 539:000 | DONE ins | na 16 16 | 0051c8 | 84 1c       |                 sty.d 00001c         
 540:000 | DONE wsp | na 16 16 |        |             |
 541:000 | DONE ins | na 16 16 | 0051ca | b5 00       |                 lda.dx 00            length
 542:000 | DONE ins | na 16 16 | 0051cc | 38          |                 sec                  
 543:000 | DONE ins | na 16 16 | 0051cd | e5 1c       |                 sbc.d 00001c         
 544:000 | DONE ins | na 16 16 | 0051cf | a8          |                 tay                  
 545:000 | DONE wsp | na 16 16 |        |             |
 546:000 | DONE ins | na 16 16 | 0051d0 | b5 02       |                 lda.dx 02            address
 547:000 | DONE ins | na 16 16 | 0051d2 | 18          |                 clc                  
 548:000 | DONE ins | na 16 16 | 0051d3 | 65 1c       |                 adc.d 00001c         
 549:000 | DONE ins | na 16 16 | 0051d5 | 95 02       |                 sta.dx 02            
 550:000 | DONE wsp | na 16 16 |        |             |
 551:000 | DONE ins | na 16 16 | 0051d7 | e8          |                 inx                  
 552:000 | DONE ins | na 16 16 | 0051d8 | e8          |                 inx                  
 553:000 | DONE wsp | na 16 16 |        |             |
 554:000 | DONE lbl | na 16 16 | 0051d9 |             | z_slashstring                        
 554:001 | DONE ins | na 16 16 | 0051d9 | 60          |                 rts                  
 555:000 | DONE wsp | na 16 16 |        |             |
 556:000 | DONE wsp | na 16 16 |        |             |
 557:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 558:000 | DONE cmt | na 16 16 |        |             | ; . "DOT" ( n -- ) X bytes / X cycles
 559:000 | DONE cmt | na 16 16 |        |             | ; Print value that is TOS followed by a single space. Forth code is
 560:000 | DONE cmt | na 16 16 |        |             | ; DUP ABS 0 <# #S ROT SIGN #> TYPE SPACE   Based on
 561:000 | DONE cmt | na 16 16 |        |             | ; https://github.com/philburk/pforth/blob/master/fth/numberio.fth Since this is
 562:000 | DONE cmt | na 16 16 |        |             | ; used interactively, and humans are slow (just ask GlaDOS), we focus on size.
 563:000 | DONE lbl | na 16 16 | 0051da |             | xt_dot                               
 564:000 | DONE ins | na 16 16 | 0051da | 20 97 58    |                 jsr 005897           ( n n )
 565:000 | DONE ins | na 16 16 | 0051dd | 20 82 54    |                 jsr 005482           ( n n )
 566:000 | DONE ins | na 16 16 | 0051e0 | 20 69 53    |                 jsr 005369           ( n n 0 )
 567:000 | DONE ins | na 16 16 | 0051e3 | 20 19 51    |                 jsr 005119           ( n n 0 )
 568:000 | DONE ins | na 16 16 | 0051e6 | 20 b6 52    |                 jsr 0052b6           ( n ud )
 569:000 | DONE ins | na 16 16 | 0051e9 | 20 ef 5c    |                 jsr 005cef           ( ud n )
 570:000 | DONE ins | na 16 16 | 0051ec | 20 52 5d    |                 jsr 005d52           ( ud )
 571:000 | DONE ins | na 16 16 | 0051ef | 20 a7 52    |                 jsr 0052a7           
 572:000 | DONE ins | na 16 16 | 0051f2 | 20 79 5e    |                 jsr 005e79           
 573:000 | DONE ins | na 16 16 | 0051f5 | 20 31 5e    |                 jsr 005e31           
 574:000 | DONE wsp | na 16 16 |        |             |
 575:000 | DONE lbl | na 16 16 | 0051f8 |             | z_dot                                
 575:001 | DONE ins | na 16 16 | 0051f8 | 60          |                 rts                  
 576:000 | DONE wsp | na 16 16 |        |             |
 577:000 | DONE wsp | na 16 16 |        |             |
 578:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 579:000 | DONE cmt | na 16 16 |        |             | ; ." "DOTQUOTE" ( -- ) X bytes / X cycles
 580:000 | DONE cmt | na 16 16 |        |             | ; Compile string that is printed during run time. ANSI Forth wants this to be
 581:000 | DONE cmt | na 16 16 |        |             | ; compile-only, even though everybody and their friend uses it for everything.
 582:000 | DONE cmt | na 16 16 |        |             | ; We follow the book here, and recommend .( for general printing.
 583:000 | DONE lbl | na 16 16 | 0051f9 |             | xt_dotquote                          
 584:000 | DONE ins | na 16 16 | 0051f9 | ca          |                 dex                  
 585:000 | DONE ins | na 16 16 | 0051fa | ca          |                 dex                  
 586:000 | DONE ins | na 16 16 | 0051fb | 94 00       |                 sty.dx 00            
 587:000 | DONE ins | na 16 16 | 0051fd | a0 22 00    |                 ldy.# 0022           ASCII for "
 588:000 | DONE wsp | na 16 16 |        |             |
 589:000 | DONE ins | na 16 16 | 005200 | 20 2f 5c    |                 jsr 005c2f           
 590:000 | DONE ins | na 16 16 | 005203 | 20 62 5d    |                 jsr 005d62           
 591:000 | DONE wsp | na 16 16 |        |             |
 592:000 | DONE ins | na 16 16 | 005206 | f4 79 5e    |                 phe.# 005e79         
 593:000 | DONE ins | na 16 16 | 005209 | 20 59 69    |                 jsr 006959           don't JSR/RTS
 594:000 | DONE wsp | na 16 16 |        |             |
 595:000 | DONE lbl | na 16 16 | 00520c |             | z_dotquote                           
 595:001 | DONE ins | na 16 16 | 00520c | 60          |                 rts                  
 596:000 | DONE wsp | na 16 16 |        |             |
 597:000 | DONE wsp | na 16 16 |        |             |
 598:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 599:000 | DONE cmt | na 16 16 |        |             | ; .S "DOTS" ( -- ) X bytes / X cycles
 600:000 | DONE cmt | na 16 16 |        |             | ; Print content of Data Stack non-distructively. Since this is for humans, we
 601:000 | DONE cmt | na 16 16 |        |             | ; don't have to worry about speed. We follow the format of Gforth
 602:000 | DONE cmt | na 16 16 |        |             | ; and print the number of elements first in brackets, followed by the Data Stack
 603:000 | DONE cmt | na 16 16 |        |             | ; content (if present). Uses tmp3
 604:000 | DONE lbl | na 16 16 | 00520d |             | xt_dots                              
 605:000 | DONE dir | na 16 16 |        |             |         .!a16                        
 606:000 | DONE dir | na 16 16 |        |             |         .!xy16                       
 607:000 | DONE ins | na 16 16 | 00520d | 20 2e 58    |                 jsr 00582e           ( -- u)
 608:000 | DONE wsp | na 16 16 |        |             |
 609:000 | DONE cmt | na 16 16 |        |             |                 ; Print stack depth in brackets
 610:000 | DONE ins | na 16 16 | 005210 | a9 3c 00    |                 lda.# 3c             
 611:000 | DONE ins | na 16 16 | 005213 | 20 a1 58    |                 jsr 0058a1           
 612:000 | DONE wsp | na 16 16 |        |             |
 613:000 | DONE cmt | na 16 16 |        |             |                 ; We keep a copy of the number of things on the stack to use as
 614:000 | DONE cmt | na 16 16 |        |             |                 ; a counter further down
 615:000 | DONE ins | na 16 16 | 005216 | ca          |                 dex                  DUP
 616:000 | DONE ins | na 16 16 | 005217 | ca          |                 dex                  
 617:000 | DONE ins | na 16 16 | 005218 | 94 00       |                 sty.dx 00            
 618:000 | DONE wsp | na 16 16 |        |             |
 619:000 | DONE ins | na 16 16 | 00521a | 20 98 69    |                 jsr 006998           print unsigned number
 620:000 | DONE wsp | na 16 16 |        |             |
 621:000 | DONE ins | na 16 16 | 00521d | a9 3e 00    |                 lda.# 3e             
 622:000 | DONE ins | na 16 16 | 005220 | 20 a1 58    |                 jsr 0058a1           
 623:000 | DONE ins | na 16 16 | 005223 | 20 31 5e    |                 jsr 005e31           
 624:000 | DONE wsp | na 16 16 |        |             |
 625:000 | DONE cmt | na 16 16 |        |             |                 ; There will be a lot of cases where .S is used when the stack
 626:000 | DONE cmt | na 16 16 |        |             |                 ; is empty. Get them first and exit quickly
 627:000 | DONE ins | na 16 16 | 005226 | 98          |                 tya                  force flag test
 628:000 | DONE ins | na 16 16 | 005227 | f0 18       |                 beq 005241           
 629:000 | DONE wsp | na 16 16 |        |             |
 630:000 | DONE lbl | na 16 16 | 005229 |             | dots_not_empty                       
 631:000 | DONE cmt | na 16 16 |        |             |                 ; We have at least one element on the stack, which used to be in
 632:000 | DONE cmt | na 16 16 |        |             |                 ; Y as TOS, but is now NOS and therefore accessable by X. The
 633:000 | DONE cmt | na 16 16 |        |             |                 ; depth of the Data Stack is in Y waiting to be used as
 634:000 | DONE cmt | na 16 16 |        |             |                 ; a counter. We use this to our advantage.
 635:000 | DONE ins | na 16 16 | 005229 | a9 fb 00    |                 lda.# 0000fb         skip two garbage entries on stack
 636:000 | DONE ins | na 16 16 | 00522c | 85 20       |                 sta.d 000020         use as pointer
 637:000 | DONE wsp | na 16 16 |        |             |
 638:000 | DONE lbl | na 16 16 | 00522e |             | dots_loop                            
 639:000 | DONE ins | na 16 16 | 00522e | b2 20       |                 lda.di 000020        LDA (TMP1)
 640:000 | DONE ins | na 16 16 | 005230 | 5a          |                 phy                  save our counter
 641:000 | DONE ins | na 16 16 | 005231 | a8          |                 tay                  
 642:000 | DONE ins | na 16 16 | 005232 | 20 da 51    |                 jsr 0051da           print one number, drops TOS
 643:000 | DONE wsp | na 16 16 |        |             |
 644:000 | DONE ins | na 16 16 | 005235 | ca          |                 dex                  restore counter
 645:000 | DONE ins | na 16 16 | 005236 | ca          |                 dex                  
 646:000 | DONE ins | na 16 16 | 005237 | 94 00       |                 sty.dx 00            
 647:000 | DONE ins | na 16 16 | 005239 | 7a          |                 ply                  
 648:000 | DONE wsp | na 16 16 |        |             |
 649:000 | DONE ins | na 16 16 | 00523a | c6 20       |                 dec.d 000020         next stack entry
 650:000 | DONE ins | na 16 16 | 00523c | c6 20       |                 dec.d 000020         
 651:000 | DONE wsp | na 16 16 |        |             |
 652:000 | DONE ins | na 16 16 | 00523e | 88          |                 dey                  
 653:000 | DONE ins | na 16 16 | 00523f | d0 ed       |                 bne 00522e           
 654:000 | DONE wsp | na 16 16 |        |             |
 655:000 | DONE lbl | na 16 16 | 005241 |             | dots_done                            
 656:000 | DONE cmt | na 16 16 |        |             |                 ; word so we save one byte by doing DROP the slow way
 657:000 | DONE ins | na 16 16 | 005241 | 20 74 58    |                 jsr 005874           
 658:000 | DONE wsp | na 16 16 |        |             |
 659:000 | DONE lbl | na 16 16 | 005244 |             | z_dots                               
 659:001 | DONE ins | na 16 16 | 005244 | 60          |                 rts                  
 660:000 | DONE wsp | na 16 16 |        |             |
 661:000 | DONE wsp | na 16 16 |        |             |
 662:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 663:000 | DONE cmt | na 16 16 |        |             | ; , "COMMA" ( n -- ) 11 bytes / 29 cycles
 664:000 | DONE cmt | na 16 16 |        |             | ; Allot one cell and store TOS in memory. We ignore alignment issues, though
 665:000 | DONE cmt | na 16 16 |        |             | ; satisfy the ANSI requirement that an aligned compiler pointer will remain
 666:000 | DONE cmt | na 16 16 |        |             | ; aligned
 667:000 | DONE cmt | na 16 16 |        |             | ; There is another variant possible:
 668:000 | DONE cmt | na 16 16 |        |             | ;               tya
 669:000 | DONE cmt | na 16 16 |        |             | ;               ldy.d cp
 670:000 | DONE cmt | na 16 16 |        |             | ;               sta.y 0000
 671:000 | DONE cmt | na 16 16 |        |             | ;               iny
 672:000 | DONE cmt | na 16 16 |        |             | ;               iny
 673:000 | DONE cmt | na 16 16 |        |             | ;               sty.d cp
 674:000 | DONE cmt | na 16 16 |        |             | ;               ldy.dx 00
 675:000 | DONE cmt | na 16 16 |        |             | ;               inx
 676:000 | DONE cmt | na 16 16 |        |             | ;               inx
 677:000 | DONE cmt | na 16 16 |        |             | ; This is as fast as the variant below, but three bytes longer
 678:000 | DONE lbl | na 16 16 | 005245 |             | xt_comma                             
 679:000 | DONE dir | na 16 16 |        |             |         .!a16                        
 680:000 | DONE ins | na 16 16 | 005245 | 98          |                 tya                  
 681:000 | DONE ins | na 16 16 | 005246 | 92 00       |                 sta.di 000000        STA (CP)
 682:000 | DONE ins | na 16 16 | 005248 | e6 00       |                 inc.d 000000         
 683:000 | DONE ins | na 16 16 | 00524a | e6 00       |                 inc.d 000000         
 684:000 | DONE wsp | na 16 16 |        |             |
 685:000 | DONE ins | na 16 16 | 00524c | b4 00       |                 ldy.dx 00            
 686:000 | DONE ins | na 16 16 | 00524e | e8          |                 inx                  
 687:000 | DONE ins | na 16 16 | 00524f | e8          |                 inx                  
 688:000 | DONE wsp | na 16 16 |        |             |
 689:000 | DONE lbl | na 16 16 | 005250 |             | z_comma                              
 689:001 | DONE ins | na 16 16 | 005250 | 60          |                 rts                  
 690:000 | DONE wsp | na 16 16 |        |             |
 691:000 | DONE wsp | na 16 16 |        |             |
 692:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 693:000 | DONE cmt | na 16 16 |        |             | ; : "COLON" ( "name" -- ) X bytes / X cycles
 694:000 | DONE cmt | na 16 16 |        |             | ; Start compilation of new word into the Dictionary. Use the CREATE routine
 695:000 | DONE cmt | na 16 16 |        |             | ; and fill in the rest by hand.
 696:000 | DONE lbl | na 16 16 | 005251 |             | xt_colon                             
 697:000 | DONE dir | na 16 16 |        |             |         .!a16                        
 698:000 | DONE cmt | na 16 16 |        |             |                 ; if we are already in compile mode, complain and abort
 699:000 | DONE ins | na 16 16 | 005251 | a5 14       |                 lda.d 000014         
 700:000 | DONE ins | na 16 16 | 005253 | f0 06       |                 beq 00525b           
 701:000 | DONE wsp | na 16 16 |        |             |
 702:000 | DONE ins | na 16 16 | 005255 | a9 eb 70    |                 lda.# 0070eb         
 703:000 | DONE ins | na 16 16 | 005258 | 4c 7a 69    |                 jmp 00697a           
 704:000 | DONE lbl | na 16 16 | 00525b |             | @                                    
 705:000 | DONE cmt | na 16 16 |        |             |                 ; Switch to compile state. From now on, everything goes in the
 706:000 | DONE cmt | na 16 16 |        |             |                 ; Dictionary
 707:000 | DONE ins | na 16 16 | 00525b | e6 14       |                 inc.d 000014         
 708:000 | DONE wsp | na 16 16 |        |             |
 709:000 | DONE cmt | na 16 16 |        |             |                 ; CREATE is going to change DP to point to the new word's
 710:000 | DONE cmt | na 16 16 |        |             |                 ; header. While this is fine for (say) variables, it would mean
 711:000 | DONE cmt | na 16 16 |        |             |                 ; that FIND-NAME etc would find a half-finished word when
 712:000 | DONE cmt | na 16 16 |        |             |                 ; looking in the Dictionary. To prevent this, we save the old
 713:000 | DONE cmt | na 16 16 |        |             |                 ; version of DP and restore it later. The new DP is placed in
 714:000 | DONE cmt | na 16 16 |        |             |                 ; the variable WORKWORD until we're finished with a SEMICOLON.
 715:000 | DONE ins | na 16 16 | 00525d | a5 02       |                 lda.d 000002         
 716:000 | DONE ins | na 16 16 | 00525f | 48          |                 pha                  CREATE uses tmp1, tmp2 and tmp3
 717:000 | DONE wsp | na 16 16 |        |             |
 718:000 | DONE ins | na 16 16 | 005260 | 20 2e 57    |                 jsr 00572e           
 719:000 | DONE wsp | na 16 16 |        |             |
 720:000 | DONE cmt | na 16 16 |        |             |                 ; Get the nt of the new word as described above. Only COLON,
 721:000 | DONE cmt | na 16 16 |        |             |                 ; SEMICOLON and RECURSE access WORKWORD
 722:000 | DONE ins | na 16 16 | 005263 | a5 02       |                 lda.d 000002         
 723:000 | DONE ins | na 16 16 | 005265 | 85 04       |                 sta.d 000004         
 724:000 | DONE ins | na 16 16 | 005267 | 68          |                 pla                  
 725:000 | DONE ins | na 16 16 | 005268 | 85 02       |                 sta.d 000002         
 726:000 | DONE wsp | na 16 16 |        |             |
 727:000 | DONE cmt | na 16 16 |        |             |                 ; CREATE includes a subroutine jump to DOVAR by default. We back
 728:000 | DONE cmt | na 16 16 |        |             |                 ; up three bytes and overwrite that. Note that 3 x DEC.D would
 729:000 | DONE cmt | na 16 16 |        |             |                 ; use 3 bytes and 18 cycles; this version uses 8 bytes but
 730:000 | DONE cmt | na 16 16 |        |             |                 ; only 13 cycles
 731:000 | DONE ins | na 16 16 | 00526a | a5 00       |                 lda.d 000000         
 732:000 | DONE ins | na 16 16 | 00526c | 38          |                 sec                  
 733:000 | DONE ins | na 16 16 | 00526d | e9 03 00    |                 sbc.# 0003           
 734:000 | DONE ins | na 16 16 | 005270 | 85 00       |                 sta.d 000000         
 735:000 | DONE wsp | na 16 16 |        |             |
 736:000 | DONE lbl | na 16 16 | 005272 |             | z_colon                              
 736:001 | DONE ins | na 16 16 | 005272 | 60          |                 rts                  
 737:000 | DONE wsp | na 16 16 |        |             |
 738:000 | DONE wsp | na 16 16 |        |             |
 739:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 740:000 | DONE cmt | na 16 16 |        |             | ; ; "SEMICOLON" ( -- ) X bytes / X cycles
 741:000 | DONE cmt | na 16 16 |        |             | ; End the compilation of a new word into the Dictionary. When we enter this,
 742:000 | DONE cmt | na 16 16 |        |             | ; WORKWORD is pointing to the nt_ of this word in the Dictionary, DP to the
 743:000 | DONE cmt | na 16 16 |        |             | ; previous word, and CP to the next free byte.  A Forth definition would be
 744:000 | DONE cmt | na 16 16 |        |             | ; (see "Starting Forth"):
 745:000 | DONE cmt | na 16 16 |        |             | ;  : ;  POSTPONE EXIT  REVEAL POSTPONE ; [ ; IMMEDIATE
 746:000 | DONE lbl | na 16 16 | 005273 |             | xt_semicolon                         
 747:000 | DONE dir | na 16 16 |        |             |         .!a16                        
 748:000 | DONE ins | na 16 16 | 005273 | 84 24       |                 sty.d 000024         
 749:000 | DONE wsp | na 16 16 |        |             |
 750:000 | DONE cmt | na 16 16 |        |             |                 ; CP is the byte that will be the address we use in the header for
 751:000 | DONE cmt | na 16 16 |        |             |                 ; the end-of-compile address (z_word). This is six bytes down in
 752:000 | DONE cmt | na 16 16 |        |             |                 ; the header
 753:000 | DONE ins | na 16 16 | 005275 | a0 06 00    |                 ldy.# 0006           
 754:000 | DONE ins | na 16 16 | 005278 | a5 00       |                 lda.d 000000         
 755:000 | DONE ins | na 16 16 | 00527a | 91 04       |                 sta.diy 000004       STA (WORKWORD),Y
 756:000 | DONE wsp | na 16 16 |        |             |
 757:000 | DONE cmt | na 16 16 |        |             |                 ; Add the RTS instruction to the end of the current word. We
 758:000 | DONE cmt | na 16 16 |        |             |                 ; don't have to switch the size of the A register because we
 759:000 | DONE cmt | na 16 16 |        |             |                 ; only move up the CP by one and the MSB will be overwritten.
 760:000 | DONE cmt | na 16 16 |        |             |                 ; Little endian MPUs for the win!
 761:000 | DONE ins | na 16 16 | 00527c | a9 60 00    |                 lda.# 60             opcode for RTS
 762:000 | DONE ins | na 16 16 | 00527f | 92 00       |                 sta.di 000000        STA (CP)
 763:000 | DONE ins | na 16 16 | 005281 | e6 00       |                 inc.d 000000         MSB will be overwritten
 764:000 | DONE wsp | na 16 16 |        |             |
 765:000 | DONE cmt | na 16 16 |        |             |                 ; Word definition is complete. Make the new word the last one in
 766:000 | DONE cmt | na 16 16 |        |             |                 ; the Dictionary
 767:000 | DONE ins | na 16 16 | 005283 | a5 04       |                 lda.d 000004         
 768:000 | DONE ins | na 16 16 | 005285 | 85 02       |                 sta.d 000002         
 769:000 | DONE wsp | na 16 16 |        |             |
 770:000 | DONE cmt | na 16 16 |        |             |                 ; Get our TOS back
 771:000 | DONE ins | na 16 16 | 005287 | a4 24       |                 ldy.d 000024         
 772:000 | DONE wsp | na 16 16 |        |             |
 773:000 | DONE cmt | na 16 16 |        |             |                 ; Set compile flag back to zero so we're back in interpret mode
 774:000 | DONE ins | na 16 16 | 005289 | 64 14       |                 stz.d 000014         
 775:000 | DONE wsp | na 16 16 |        |             |
 776:000 | DONE lbl | na 16 16 | 00528b |             | z_semicolon                          
 776:001 | DONE ins | na 16 16 | 00528b | 60          |                 rts                  
 777:000 | DONE wsp | na 16 16 |        |             |
 778:000 | DONE wsp | na 16 16 |        |             |
 779:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 780:000 | DONE cmt | na 16 16 |        |             | ; # "HASH" / "NUMBER-SIGN" ( ud -- ud )  X bytes / X cycles
 781:000 | DONE cmt | na 16 16 |        |             | ; Add one character to the beginning of the pictured output string.
 782:000 | DONE cmt | na 16 16 |        |             | ; Code based on https://github.com/philburk/pforth/blob/master/fth/numberio.fth
 783:000 | DONE cmt | na 16 16 |        |             | ; Forth code is  BASE @ UD/MOD ROT 9 OVER < IF 7 + THEN [CHAR] 0 + HOLD ;
 784:000 | DONE cmt | na 16 16 |        |             | ; TODO convert more parts to assembler
 785:000 | DONE lbl | na 16 16 | 00528c |             | xt_hash                              
 786:000 | DONE dir | na 16 16 |        |             |         .!a16                        
 787:000 | DONE ins | na 16 16 | 00528c | 20 8c 55    |                 jsr 00558c           ( ud addr )
 788:000 | DONE ins | na 16 16 | 00528f | 20 da 52    |                 jsr 0052da           ( ud u )
 789:000 | DONE ins | na 16 16 | 005292 | 20 a4 5e    |                 jsr 005ea4           ( rem ud )
 790:000 | DONE ins | na 16 16 | 005295 | 20 ef 5c    |                 jsr 005cef           ( ud rem )
 791:000 | DONE wsp | na 16 16 |        |             |
 792:000 | DONE cmt | na 16 16 |        |             |                 ; Convert the number that is left over to an ASCII character. We
 793:000 | DONE cmt | na 16 16 |        |             |                 ; use a string lookup for speed. Use either abc_str_lower for
 794:000 | DONE cmt | na 16 16 |        |             |                 ; lower case or abc_str_upper for upper case (prefered)
 795:000 | DONE ins | na 16 16 | 005298 | e2 20       |                 sep 20               
 795:001 | DONE ctl | na  8 16 |        |             |         .!a8
 796:000 | DONE ins | na  8 16 | 00529a | b9 70 71    |                 lda.y 007170         
 797:000 | DONE ins | na  8 16 | 00529d | c2 20       |                 rep 20               
 797:001 | DONE ctl | na 16 16 |        |             |         .!a16
 798:000 | DONE cmt | na 16 16 |        |             |                 ; overwrite remainder with ASCII value
 799:000 | DONE ins | na 16 16 | 00529f | 29 ff 00    |                 and.# 00ff           
 800:000 | DONE ins | na 16 16 | 0052a2 | a8          |                 tay                  ( ud char )
 801:000 | DONE wsp | na 16 16 |        |             |
 802:000 | DONE ins | na 16 16 | 0052a3 | 20 36 5a    |                 jsr 005a36           
 803:000 | DONE wsp | na 16 16 |        |             |
 804:000 | DONE lbl | na 16 16 | 0052a6 |             | z_hash                               
 804:001 | DONE ins | na 16 16 | 0052a6 | 60          |                 rts                  
 805:000 | DONE wsp | na 16 16 |        |             |
 806:000 | DONE wsp | na 16 16 |        |             |
 807:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 808:000 | DONE cmt | na 16 16 |        |             | ; #> "NUMBERMORE" / "NUMBER-GREATER" ( d -- addr u ) X bytes / X cycles
 809:000 | DONE cmt | na 16 16 |        |             | ; Finish conversion of pictured number string, putting address and length on the
 810:000 | DONE cmt | na 16 16 |        |             | ; Data Stack. Original Fort is  2DROP HLD @ PAD OVER -  Based on
 811:000 | DONE cmt | na 16 16 |        |             | ; https://github.com/philburk/pforth/blob/master/fth/numberio.fth
 812:000 | DONE lbl | na 16 16 | 0052a7 |             | xt_numbermore                        
 813:000 | DONE dir | na 16 16 |        |             |         .!a16                        
 814:000 | DONE cmt | na 16 16 |        |             |                 ; We simply overwrite the double cell number, saving us a lot of
 815:000 | DONE cmt | na 16 16 |        |             |                 ; stack thrashing. First, put the address of the string's head in
 816:000 | DONE cmt | na 16 16 |        |             |                 ; TOS and NOS
 817:000 | DONE ins | na 16 16 | 0052a7 | a4 18       |                 ldy.d 000018         
 818:000 | DONE ins | na 16 16 | 0052a9 | 94 00       |                 sty.dx 00            ( addr addr )
 819:000 | DONE wsp | na 16 16 |        |             |
 820:000 | DONE cmt | na 16 16 |        |             |                 ; add the address of the string's end, which is PAD
 821:000 | DONE ins | na 16 16 | 0052ab | 20 e2 5b    |                 jsr 005be2           ( addr addr pad )
 822:000 | DONE wsp | na 16 16 |        |             |
 823:000 | DONE ins | na 16 16 | 0052ae | 38          |                 sec                  
 824:000 | DONE ins | na 16 16 | 0052af | 98          |                 tya                  
 825:000 | DONE ins | na 16 16 | 0052b0 | f5 00       |                 sbc.dx 00            pad - addr is the length of the string
 826:000 | DONE ins | na 16 16 | 0052b2 | a8          |                 tay                  ( addr addr n )
 827:000 | DONE wsp | na 16 16 |        |             |
 828:000 | DONE ins | na 16 16 | 0052b3 | e8          |                 inx                  NIP
 829:000 | DONE ins | na 16 16 | 0052b4 | e8          |                 inx                  
 830:000 | DONE wsp | na 16 16 |        |             |
 831:000 | DONE lbl | na 16 16 | 0052b5 |             | z_numbermore                         
 831:001 | DONE ins | na 16 16 | 0052b5 | 60          |                 rts                  
 832:000 | DONE wsp | na 16 16 |        |             |
 833:000 | DONE wsp | na 16 16 |        |             |
 834:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 835:000 | DONE cmt | na 16 16 |        |             | ; #S "HASHS" / "NUMBER SIGN" ( ud -- ud ) X bytes / X cycles
 836:000 | DONE cmt | na 16 16 |        |             | ; Completely convert number for pictured numerical output. Based on
 837:000 | DONE cmt | na 16 16 |        |             | ; https://github.com/philburk/pforth/blob/master/fth/system.fth
 838:000 | DONE cmt | na 16 16 |        |             | ; Original Forth code  BEGIN # 2DUP OR 0= UNTIL
 839:000 | DONE lbl | na 16 16 | 0052b6 |             | xt_hashs                             
 840:000 | DONE dir | na 16 16 |        |             |         .!a16                        
 841:000 | DONE lbl | na 16 16 | 0052b6 |             | hashs_loop                           
 842:000 | DONE cmt | na 16 16 |        |             |                 ; covert a single number ("#")
 843:000 | DONE ins | na 16 16 | 0052b6 | 20 8c 52    |                 jsr 00528c           ( ud -- ud )
 844:000 | DONE wsp | na 16 16 |        |             |
 845:000 | DONE cmt | na 16 16 |        |             |                 ; stop when the double-celled number on the TOS is zero
 846:000 | DONE ins | na 16 16 | 0052b9 | 98          |                 tya                  
 847:000 | DONE ins | na 16 16 | 0052ba | 15 00       |                 ora.dx 00            
 848:000 | DONE ins | na 16 16 | 0052bc | d0 f8       |                 bne 0052b6           
 849:000 | DONE wsp | na 16 16 |        |             |
 850:000 | DONE lbl | na 16 16 | 0052be |             | z_hashs                              
 850:001 | DONE ins | na 16 16 | 0052be | 60          |                 rts                  
 851:000 | DONE wsp | na 16 16 |        |             |
 852:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 853:000 | DONE cmt | na 16 16 |        |             | ; ? "QUESTION" ( addr -- ) X bytes / X cycles
 854:000 | DONE cmt | na 16 16 |        |             | ; Print content of a variable. This is used interactively and humans are
 855:000 | DONE cmt | na 16 16 |        |             | ; slow, so we just go for the subroutine jumps to keep it short
 856:000 | DONE lbl | na 16 16 | 0052bf |             | xt_question                          
 857:000 | DONE ins | na 16 16 | 0052bf | 20 da 52    |                 jsr 0052da           
 858:000 | DONE ins | na 16 16 | 0052c2 | 20 da 51    |                 jsr 0051da           
 859:000 | DONE wsp | na 16 16 |        |             |
 860:000 | DONE lbl | na 16 16 | 0052c5 |             | z_question                           
 860:001 | DONE ins | na 16 16 | 0052c5 | 60          |                 rts                  
 861:000 | DONE wsp | na 16 16 |        |             |
 862:000 | DONE wsp | na 16 16 |        |             |
 863:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 864:000 | DONE cmt | na 16 16 |        |             | ; QDUP ( n -- 0 | n n ) X bytes / X cycles
 865:000 | DONE cmt | na 16 16 |        |             | ; If top element on Data Stack is not zero, duplicate it
 866:000 | DONE lbl | na 16 16 | 0052c6 |             | xt_qdup                              
 867:000 | DONE ins | na 16 16 | 0052c6 | 98          |                 tya                  
 868:000 | DONE ins | na 16 16 | 0052c7 | f0 04       |                 beq 0052cd           
 869:000 | DONE wsp | na 16 16 |        |             |
 870:000 | DONE ins | na 16 16 | 0052c9 | ca          |                 dex                  
 871:000 | DONE ins | na 16 16 | 0052ca | ca          |                 dex                  
 872:000 | DONE ins | na 16 16 | 0052cb | 94 00       |                 sty.dx 00            
 873:000 | DONE wsp | na 16 16 |        |             |
 874:000 | DONE lbl | na 16 16 | 0052cd |             | z_qdup                               
 874:001 | DONE ins | na 16 16 | 0052cd | 60          |                 rts                  
 875:000 | DONE wsp | na 16 16 |        |             |
 876:000 | DONE wsp | na 16 16 |        |             |
 877:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 878:000 | DONE cmt | na 16 16 |        |             | ; ! "STORE" ( n addr -- ) 9 bytes / X cycles
 879:000 | DONE cmt | na 16 16 |        |             | ; Save value at designated memory location
 880:000 | DONE lbl | na 16 16 | 0052ce |             | xt_store                             
 881:000 | DONE dir | na 16 16 |        |             |         .!a16                        
 882:000 | DONE ins | na 16 16 | 0052ce | b5 00       |                 lda.dx 00            NOS has value
 883:000 | DONE ins | na 16 16 | 0052d0 | 99 00 00    |                 sta.y 0000           
 884:000 | DONE wsp | na 16 16 |        |             |
 885:000 | DONE ins | na 16 16 | 0052d3 | b4 02       |                 ldy.dx 02            
 886:000 | DONE ins | na 16 16 | 0052d5 | e8          |                 inx                  
 887:000 | DONE ins | na 16 16 | 0052d6 | e8          |                 inx                  
 888:000 | DONE ins | na 16 16 | 0052d7 | e8          |                 inx                  
 889:000 | DONE ins | na 16 16 | 0052d8 | e8          |                 inx                  
 890:000 | DONE wsp | na 16 16 |        |             |
 891:000 | DONE lbl | na 16 16 | 0052d9 |             | z_store                              
 891:001 | DONE ins | na 16 16 | 0052d9 | 60          |                 rts                  
 892:000 | DONE wsp | na 16 16 |        |             |
 893:000 | DONE wsp | na 16 16 |        |             |
 894:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 895:000 | DONE cmt | na 16 16 |        |             | ; @ "FETCH" ( addr -- n ) 4 bytes / 7-8 cycles
 896:000 | DONE cmt | na 16 16 |        |             | ; Get one cell (16 bit) value from given address
 897:000 | DONE lbl | na 16 16 | 0052da |             | xt_fetch                             
 898:000 | DONE ins | na 16 16 | 0052da | b9 00 00    |                 lda.y 0000           
 899:000 | DONE ins | na 16 16 | 0052dd | a8          |                 tay                  
 900:000 | DONE wsp | na 16 16 |        |             |
 901:000 | DONE lbl | na 16 16 | 0052de |             | z_fetch                              
 901:001 | DONE ins | na 16 16 | 0052de | 60          |                 rts                  
 902:000 | DONE wsp | na 16 16 |        |             |
 903:000 | DONE wsp | na 16 16 |        |             |
 904:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 905:000 | DONE cmt | na 16 16 |        |             | ; (+LOOP) "PARENS-PLUSLOOP" ( n -- ) X bytes / X cycles
 906:000 | DONE cmt | na 16 16 |        |             | ; Runtime compile for counted loop control. This is used for both +LOOP and
 907:000 | DONE cmt | na 16 16 |        |             | ; LOOP which are defined at high level. Note we use a fudge factor for loop
 908:000 | DONE cmt | na 16 16 |        |             | ; control so we can test with the Overflow Flag. See (DO) for details. This is
 909:000 | DONE cmt | na 16 16 |        |             | ; Native Compile. The step value is TOS in the loop
 910:000 | DONE lbl | na 16 16 | 0052df |             | xt_pploop                            
 911:000 | DONE dir | na 16 16 |        |             |         .!a16                        
 912:000 | DONE cmt | na 16 16 |        |             |                 ; add step to index
 913:000 | DONE ins | na 16 16 | 0052df | 98          |                 tya                  step
 914:000 | DONE ins | na 16 16 | 0052e0 | b8          |                 clv                  this is used for loop control
 915:000 | DONE ins | na 16 16 | 0052e1 | 18          |                 clc                  
 916:000 | DONE ins | na 16 16 | 0052e2 | 63 01       |                 adc.s 01             add index from top of R
 917:000 | DONE ins | na 16 16 | 0052e4 | 83 01       |                 sta.s 01             store it back on top of R
 918:000 | DONE wsp | na 16 16 |        |             |
 919:000 | DONE cmt | na 16 16 |        |             |                 ; dump step from TOS
 920:000 | DONE ins | na 16 16 | 0052e6 | b4 00       |                 ldy.dx 00            
 921:000 | DONE ins | na 16 16 | 0052e8 | e8          |                 inx                  
 922:000 | DONE ins | na 16 16 | 0052e9 | e8          |                 inx                  
 923:000 | DONE wsp | na 16 16 |        |             |
 924:000 | DONE cmt | na 16 16 |        |             |                 ; if the V flag is set, we're done looping and continue after
 925:000 | DONE cmt | na 16 16 |        |             |                 ; the +LOOP instruction
 926:000 | DONE ins | na 16 16 | 0052ea | 70 03       |                 bvs 0052ef           
 927:000 | DONE wsp | na 16 16 |        |             |
 928:000 | DONE lbl | na 16 16 | 0052ec |             | pploop_jmp                           
 929:000 | DONE cmt | na 16 16 |        |             |                 ; This is why this routine must be natively compiled: We compile
 930:000 | DONE cmt | na 16 16 |        |             |                 ; the opcode for jump here without an address to go to, which is
 931:000 | DONE cmt | na 16 16 |        |             |                 ; added by the next instruction of LOOP (or +LOOP) during
 932:000 | DONE cmt | na 16 16 |        |             |                 ; compile time
 933:000 | DONE dir | na 16 16 | 0052ec | (1 bytes)   |         .byte 20                     
 933:000 | DONE dir | na 16 16 |        |             |                 20                       --   
 934:000 | DONE wsp | na 16 16 |        |             |
 935:000 | DONE lbl | na 16 16 | 0052ed |             | z_pploop                             
 935:001 | DONE ins | na 16 16 | 0052ed | 60          |                 rts                  
 936:000 | DONE wsp | na 16 16 |        |             |
 937:000 | DONE wsp | na 16 16 |        |             |
 938:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 939:000 | DONE cmt | na 16 16 |        |             | ; (?DO) "PARENS-QUESTION-DO" ( -- ) X bytes / X cycles
 940:000 | DONE cmt | na 16 16 |        |             | ; Runtime routine for ?DO. This contains the parts required for the question
 941:000 | DONE cmt | na 16 16 |        |             | ; mark and then drops through to (DO). This must be native compile
 942:000 | DONE lbl | na 16 16 | 0052ee |             | xt_pqdo                              
 943:000 | DONE cmt | na 16 16 |        |             |                 ; See if TOS and NOS are equal
 944:000 | DONE cmt | na 16 16 |        |             |                 ; TODO move this to assembler for speed
 945:000 | DONE ins | na 16 16 | 0052ee | 20 ee 53    |                 jsr 0053ee           
 946:000 | DONE ins | na 16 16 | 0052f1 | 20 5d 53    |                 jsr 00535d           now ( n1 n2 f )
 947:000 | DONE wsp | na 16 16 |        |             |
 948:000 | DONE ins | na 16 16 | 0052f4 | a8          |                 tay                  force flag check
 949:000 | DONE ins | na 16 16 | 0052f5 | f0 00       |                 beq 0052f7           
 950:000 | DONE wsp | na 16 16 |        |             |
 951:000 | DONE lbl | na 16 16 | 0052f7 |             | pqdo_done                            
 952:000 | DONE cmt | na 16 16 |        |             |                 ; get ready to drop to (DO)
 953:000 | DONE ins | na 16 16 | 0052f7 | b4 00       |                 ldy.dx 00            drop flag from EQUAL
 954:000 | DONE ins | na 16 16 | 0052f9 | e8          |                 inx                  
 955:000 | DONE ins | na 16 16 | 0052fa | e8          |                 inx                  drop through to (DO)
 956:000 | DONE wsp | na 16 16 |        |             |
 957:000 | DONE wsp | na 16 16 |        |             |
 958:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 959:000 | DONE cmt | na 16 16 |        |             | ; (DO) "PARENS-DO" ( limit start -- ; R: -- limit start ) X bytes / X cycles
 960:000 | DONE cmt | na 16 16 |        |             | ; Runtime routine for DO loop. Note that ANSI loops quit when the boundry of
 961:000 | DONE cmt | na 16 16 |        |             | ; limit-1 and limit is reached, a different mechanism than the FIG Forth loop
 962:000 | DONE cmt | na 16 16 |        |             | ; (you can see which version you have by running a loop with start and limit as
 963:000 | DONE cmt | na 16 16 |        |             | ; the same value, for instance 0 0 DO -- these will walk through the complete
 964:000 | DONE cmt | na 16 16 |        |             | ; number space). This is why there is ?DO, which you should use. We use a "fudge
 965:000 | DONE cmt | na 16 16 |        |             | ; factor" for the limit that makes the Overflow Flag trip when it is reached;
 966:000 | DONE cmt | na 16 16 |        |             | ; see http://forum.6502.org/viewtopic.php?f=9&t=2> for further discussion of
 967:000 | DONE cmt | na 16 16 |        |             | ; this. The source given there for this idea is Laxen & Perry F83. This routine
 968:000 | DONE cmt | na 16 16 |        |             | ; must be native compile (and should be anyway for speed).
 969:000 | DONE lbl | na 16 16 | 0052fb |             | xt_pdo                               
 970:000 | DONE dir | na 16 16 |        |             |         .!a16                        
 971:000 | DONE cmt | na 16 16 |        |             |                 ; Create fudge factor (fufa) by subtracting the limit from
 972:000 | DONE cmt | na 16 16 |        |             |                 ; $8000, the number that will trip the overflow flag
 973:000 | DONE ins | na 16 16 | 0052fb | 38          |                 sec                  
 974:000 | DONE ins | na 16 16 | 0052fc | a9 00 80    |                 lda.# 8000           
 975:000 | DONE ins | na 16 16 | 0052ff | f5 00       |                 sbc.dx 00            limit is NOS
 976:000 | DONE ins | na 16 16 | 005301 | 95 00       |                 sta.dx 00            save fufa for later use as NOS
 977:000 | DONE ins | na 16 16 | 005303 | 48          |                 pha                  we use fufa instead of limit on R
 978:000 | DONE wsp | na 16 16 |        |             |
 979:000 | DONE cmt | na 16 16 |        |             |                 ; Index is fufa plus original index
 980:000 | DONE ins | na 16 16 | 005304 | 18          |                 clc                  
 981:000 | DONE ins | na 16 16 | 005305 | 98          |                 tya                  index is TOS
 982:000 | DONE ins | na 16 16 | 005306 | 75 00       |                 adc.dx 00            add fufa
 983:000 | DONE ins | na 16 16 | 005308 | 48          |                 pha                  
 984:000 | DONE wsp | na 16 16 |        |             |
 985:000 | DONE cmt | na 16 16 |        |             |                 ; clean up
 986:000 | DONE ins | na 16 16 | 005309 | e8          |                 inx                  
 987:000 | DONE ins | na 16 16 | 00530a | e8          |                 inx                  
 988:000 | DONE ins | na 16 16 | 00530b | e8          |                 inx                  
 989:000 | DONE ins | na 16 16 | 00530c | e8          |                 inx                  
 990:000 | DONE wsp | na 16 16 |        |             |
 991:000 | DONE lbl | na 16 16 | 00530d |             | z_pqdo                               
 992:000 | DONE lbl | na 16 16 | 00530d |             | z_pdo                                
 992:001 | DONE ins | na 16 16 | 00530d | 60          |                 rts                  
 993:000 | DONE wsp | na 16 16 |        |             |
 994:000 | DONE wsp | na 16 16 |        |             |
 995:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 996:000 | DONE cmt | na 16 16 |        |             | ; ['] "BRACKET-TICK" ( -- ) X bytes / X cycles
 997:000 | DONE cmt | na 16 16 |        |             | ; Store xt of following word during compilation
 998:000 | DONE lbl | na 16 16 | 00530e |             | xt_brackettick                       
 999:000 | DONE ins | na 16 16 | 00530e | 20 49 54    |                 jsr 005449           
1000:000 | DONE ins | na 16 16 | 005311 | 20 5c 5a    |                 jsr 005a5c           
1001:000 | DONE wsp | na 16 16 |        |             |
1002:000 | DONE lbl | na 16 16 | 005314 |             | z_brackettick                        
1002:001 | DONE ins | na 16 16 | 005314 | 60          |                 rts                  
1003:000 | DONE wsp | na 16 16 |        |             |
1004:000 | DONE wsp | na 16 16 |        |             |
1005:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1006:000 | DONE cmt | na 16 16 |        |             | ; [ "LEFTBRACKET" ( -- ) X bytes / X cycles
1007:000 | DONE cmt | na 16 16 |        |             | ; Enter the interpretation state. This is an immediate, compile-only word
1008:000 | DONE lbl | na 16 16 | 005315 |             | xt_leftbracket                       
1009:000 | DONE ins | na 16 16 | 005315 | 64 14       |                 stz.d 000014         
1010:000 | DONE lbl | na 16 16 | 005317 |             | z_leftbracket                        
1010:001 | DONE ins | na 16 16 | 005317 | 60          |                 rts                  
1011:000 | DONE wsp | na 16 16 |        |             |
1012:000 | DONE wsp | na 16 16 |        |             |
1013:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1014:000 | DONE cmt | na 16 16 |        |             | ; ] "RIGHTBRACKET" ( -- ) X bytes / X cycles
1015:000 | DONE cmt | na 16 16 |        |             | ; Enter the compile state. In theory, we should be able to get away with
1016:000 | DONE cmt | na 16 16 |        |             | ; a simple INC.A, but this is more error tolerant. For obvious reasons, this
1017:000 | DONE cmt | na 16 16 |        |             | ; cannot be COMPILE-ONLY, and native compile doesn't make much sense either
1018:000 | DONE lbl | na 16 16 | 005318 |             | xt_rightbracket                      
1019:000 | DONE ins | na 16 16 | 005318 | a9 01 00    |                 lda.# 0001           
1020:000 | DONE ins | na 16 16 | 00531b | 85 14       |                 sta.d 000014         
1021:000 | DONE wsp | na 16 16 |        |             |
1022:000 | DONE lbl | na 16 16 | 00531d |             | z_rightbracket                       
1022:001 | DONE ins | na 16 16 | 00531d | 60          |                 rts                  
1023:000 | DONE wsp | na 16 16 |        |             |
1024:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1025:000 | DONE cmt | na 16 16 |        |             | ; [CHAR] "BRACKET-CHAR" ( "c" -- ) X bytes / X cycles
1026:000 | DONE cmt | na 16 16 |        |             | ; At compile time, compile the ASCII value of a character as a literal
1027:000 | DONE cmt | na 16 16 |        |             | ; This is an immediate, compile-only word. A definition given in
1028:000 | DONE cmt | na 16 16 |        |             | ; http://forth-standard.org/standard/implement is
1029:000 | DONE cmt | na 16 16 |        |             | ; : [CHAR] CHAR POSTPONE LITERAL ; IMMEDIATE
1030:000 | DONE cmt | na 16 16 |        |             | ; TODO decide if this is worth unrolling
1031:000 | DONE lbl | na 16 16 | 00531e |             | xt_bracketchar                       
1032:000 | DONE ins | na 16 16 | 00531e | 20 fc 55    |                 jsr 0055fc           
1033:000 | DONE ins | na 16 16 | 005321 | 20 5c 5a    |                 jsr 005a5c           
1034:000 | DONE wsp | na 16 16 |        |             |
1035:000 | DONE lbl | na 16 16 | 005324 |             | z_bracketchar                        
1035:001 | DONE ins | na 16 16 | 005324 | 60          |                 rts                  
1036:000 | DONE wsp | na 16 16 |        |             |
1037:000 | DONE wsp | na 16 16 |        |             |
1038:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1039:000 | DONE cmt | na 16 16 |        |             | ; \ "BACKSLASH" ( -- ) 4 bytes / X cycles
1040:000 | DONE cmt | na 16 16 |        |             | ; Ignore rest of line as comment
1041:000 | DONE lbl | na 16 16 | 005325 |             | xt_backslash                         
1042:000 | DONE dir | na 16 16 |        |             |         .!a16                        
1043:000 | DONE cmt | na 16 16 |        |             |                 ; Advance >IN to end of the line
1044:000 | DONE ins | na 16 16 | 005325 | a5 0a       |                 lda.d 00000a         
1045:000 | DONE ins | na 16 16 | 005327 | 85 0c       |                 sta.d 00000c         
1046:000 | DONE wsp | na 16 16 |        |             |
1047:000 | DONE lbl | na 16 16 | 005329 |             | z_backslash                          
1047:001 | DONE ins | na 16 16 | 005329 | 60          |                 rts                  
1048:000 | DONE wsp | na 16 16 |        |             |
1049:000 | DONE wsp | na 16 16 |        |             |
1050:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1051:000 | DONE cmt | na 16 16 |        |             | ; + "PLUS" ( n m -- n+m ) 7 bytes / X cycles
1052:000 | DONE cmt | na 16 16 |        |             | ; Add TOS and NOS
1053:000 | DONE lbl | na 16 16 | 00532a |             | xt_plus                              
1054:000 | DONE dir | na 16 16 |        |             |         .!a16                        
1055:000 | DONE ins | na 16 16 | 00532a | 98          |                 tya                  
1056:000 | DONE ins | na 16 16 | 00532b | 18          |                 clc                  
1057:000 | DONE ins | na 16 16 | 00532c | 75 00       |                 adc.dx 00            
1058:000 | DONE ins | na 16 16 | 00532e | a8          |                 tay                  
1059:000 | DONE ins | na 16 16 | 00532f | e8          |                 inx                  
1060:000 | DONE ins | na 16 16 | 005330 | e8          |                 inx                  
1061:000 | DONE wsp | na 16 16 |        |             |
1062:000 | DONE lbl | na 16 16 | 005331 |             | z_plus                               
1062:001 | DONE ins | na 16 16 | 005331 | 60          |                 rts                  
1063:000 | DONE wsp | na 16 16 |        |             |
1064:000 | DONE wsp | na 16 16 |        |             |
1065:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1066:000 | DONE cmt | na 16 16 |        |             | ; - "MINUS" ( n m -- n-m ) 10 bytes / X cycles
1067:000 | DONE cmt | na 16 16 |        |             | ; Subtract NOS from TOS
1068:000 | DONE lbl | na 16 16 | 005332 |             | xt_minus                             
1069:000 | DONE dir | na 16 16 |        |             |         .!a16                        
1070:000 | DONE ins | na 16 16 | 005332 | 98          |                 tya                  
1071:000 | DONE ins | na 16 16 | 005333 | 49 ff ff    |                 eor.# 0ffff          
1072:000 | DONE wsp | na 16 16 |        |             |
1073:000 | DONE ins | na 16 16 | 005336 | 38          |                 sec                  not CLC
1074:000 | DONE ins | na 16 16 | 005337 | 75 00       |                 adc.dx 00            
1075:000 | DONE wsp | na 16 16 |        |             |
1076:000 | DONE ins | na 16 16 | 005339 | a8          |                 tay                  
1077:000 | DONE ins | na 16 16 | 00533a | e8          |                 inx                  
1078:000 | DONE ins | na 16 16 | 00533b | e8          |                 inx                  
1079:000 | DONE wsp | na 16 16 |        |             |
1080:000 | DONE lbl | na 16 16 | 00533c |             | z_minus                              
1080:001 | DONE ins | na 16 16 | 00533c | 60          |                 rts                  
1081:000 | DONE wsp | na 16 16 |        |             |
1082:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1083:000 | DONE cmt | na 16 16 |        |             | ; -ROT ( a b c -- c a b )  X bytes / X cycles
1084:000 | DONE cmt | na 16 16 |        |             | ; Rotate top three entries of Data Stack upwards
1085:000 | DONE lbl | na 16 16 | 00533d |             | xt_mrot                              
1086:000 | DONE dir | na 16 16 |        |             |         .!a16                        
1087:000 | DONE dir | na 16 16 |        |             |         .!xy16                       
1088:000 | DONE ins | na 16 16 | 00533d | b5 02       |                 lda.dx 02            save a
1089:000 | DONE ins | na 16 16 | 00533f | 94 02       |                 sty.dx 02            move c to 3OS
1090:000 | DONE ins | na 16 16 | 005341 | b4 00       |                 ldy.dx 00            move b to TOS
1091:000 | DONE ins | na 16 16 | 005343 | 95 00       |                 sta.dx 00            save a as NOS
1092:000 | DONE wsp | na 16 16 |        |             |
1093:000 | DONE lbl | na 16 16 | 005345 |             | z_mrot                               
1093:001 | DONE ins | na 16 16 | 005345 | 60          |                 rts                  
1094:000 | DONE wsp | na 16 16 |        |             |
1095:000 | DONE wsp | na 16 16 |        |             |
1096:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1097:000 | DONE cmt | na 16 16 |        |             | ; -TRAILING ( addr u -- addr u ) X bytes / X cycles
1098:000 | DONE cmt | na 16 16 |        |             | ; Remove any trailing blanks. Uses tmp3
1099:000 | DONE lbl | na 16 16 | 005346 |             | xt_dtrailing                         
1100:000 | DONE cmt | na 16 16 |        |             |                 ; if u is zero, just return string
1101:000 | DONE ins | na 16 16 | 005346 | 98          |                 tya                  force flag check
1102:000 | DONE ins | na 16 16 | 005347 | f0 13       |                 beq 00535c           
1103:000 | DONE wsp | na 16 16 |        |             |
1104:000 | DONE ins | na 16 16 | 005349 | b5 00       |                 lda.dx 00            
1105:000 | DONE ins | na 16 16 | 00534b | 85 20       |                 sta.d 000020         
1106:000 | DONE ins | na 16 16 | 00534d | 88          |                 dey                  convert length to index
1107:000 | DONE ins | na 16 16 | 00534e | e2 20       |                 sep 20               
1107:001 | DONE ctl | na  8 16 |        |             |         .!a8
1108:000 | DONE wsp | na  8 16 |        |             |
1109:000 | DONE lbl | na  8 16 | 005350 |             | dtrailing_loop                       
1110:000 | DONE ins | na  8 16 | 005350 | b1 20       |                 lda.diy 000020       
1111:000 | DONE ins | na  8 16 | 005352 | c9 20       |                 cmp.# 20             
1112:000 | DONE ins | na  8 16 | 005354 | d0 03       |                 bne 005359           
1113:000 | DONE ins | na  8 16 | 005356 | 88          |                 dey                  
1114:000 | DONE ins | na  8 16 | 005357 | 10 f7       |                 bpl 005350           fall through when done
1115:000 | DONE wsp | na  8 16 |        |             |
1116:000 | DONE lbl | na  8 16 | 005359 |             | dtrailing_done                       
1117:000 | DONE ins | na  8 16 | 005359 | c2 20       |                 rep 20               
1117:001 | DONE ctl | na 16 16 |        |             |         .!a16
1118:000 | DONE ins | na 16 16 | 00535b | c8          |                 iny                  convert index to length
1119:000 | DONE wsp | na 16 16 |        |             |
1120:000 | DONE lbl | na 16 16 | 00535c |             | z_dtrailing                          
1120:001 | DONE ins | na 16 16 | 00535c | 60          |                 rts                  
1121:000 | DONE wsp | na 16 16 |        |             |
1122:000 | DONE wsp | na 16 16 |        |             |
1123:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1124:000 | DONE cmt | na 16 16 |        |             | ; = "EQUAL" ( n m -- f ) 11 bytes / 18-20 cycles
1125:000 | DONE cmt | na 16 16 |        |             | ; See if TOS and NOS are the same
1126:000 | DONE lbl | na 16 16 | 00535d |             | xt_equal                             
1127:000 | DONE ins | na 16 16 | 00535d | 98          |                 tya                  
1128:000 | DONE ins | na 16 16 | 00535e | a0 00 00    |                 ldy.# 0000           default value is false
1129:000 | DONE wsp | na 16 16 |        |             |
1130:000 | DONE ins | na 16 16 | 005361 | d5 00       |                 cmp.dx 00            
1131:000 | DONE ins | na 16 16 | 005363 | d0 01       |                 bne 005366           
1132:000 | DONE ins | na 16 16 | 005365 | 88          |                 dey                  wraps to 0FFFF (true)
1133:000 | DONE wsp | na 16 16 |        |             |
1134:000 | DONE lbl | na 16 16 | 005366 |             | equal_not                            
1135:000 | DONE ins | na 16 16 | 005366 | e8          |                 inx                  
1136:000 | DONE ins | na 16 16 | 005367 | e8          |                 inx                  
1137:000 | DONE wsp | na 16 16 |        |             |
1138:000 | DONE lbl | na 16 16 | 005368 |             | z_equal                              
1138:001 | DONE ins | na 16 16 | 005368 | 60          |                 rts                  
1139:000 | DONE wsp | na 16 16 |        |             |
1140:000 | DONE wsp | na 16 16 |        |             |
1141:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1142:000 | DONE cmt | na 16 16 |        |             | ; 0 "ZERO" ( -- 0 ) 7 bytes / 12 cycles
1143:000 | DONE cmt | na 16 16 |        |             | ; Pushes the number 0000 on the Data Stack
1144:000 | DONE lbl | na 16 16 | 005369 |             | xt_zero                              
1145:000 | DONE dir | na 16 16 |        |             |         .!xy16                       
1146:000 | DONE ins | na 16 16 | 005369 | ca          |                 dex                  
1147:000 | DONE ins | na 16 16 | 00536a | ca          |                 dex                  
1148:000 | DONE ins | na 16 16 | 00536b | 94 00       |                 sty.dx 00            
1149:000 | DONE ins | na 16 16 | 00536d | a0 00 00    |                 ldy.# 0000           
1150:000 | DONE wsp | na 16 16 |        |             |
1151:000 | DONE lbl | na 16 16 | 005370 |             | z_zero                               
1151:001 | DONE ins | na 16 16 | 005370 | 60          |                 rts                  
1152:000 | DONE wsp | na 16 16 |        |             |
1153:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1154:000 | DONE cmt | na 16 16 |        |             | ; 0= "ZERO-EQUAL" ( n -- f ) X bytes / X cycles
1155:000 | DONE cmt | na 16 16 |        |             | ; Return the true flag if TOS is zero
1156:000 | DONE lbl | na 16 16 | 005371 |             | xt_zero-equal                        
1157:000 | DONE dir | na 16 16 |        |             |         .!a16                        
1158:000 | DONE ins | na 16 16 | 005371 | 98          |                 tya                  force flag check
1159:000 | DONE ins | na 16 16 | 005372 | d0 05       |                 bne 005379           
1160:000 | DONE wsp | na 16 16 |        |             |
1161:000 | DONE ins | na 16 16 | 005374 | a0 ff ff    |                 ldy.# 0ffff          
1162:000 | DONE ins | na 16 16 | 005377 | 80 03       |                 bra 00537c           
1163:000 | DONE lbl | na 16 16 | 005379 |             | ze_not_zero                          
1164:000 | DONE ins | na 16 16 | 005379 | a0 00 00    |                 ldy.# 0000           
1165:000 | DONE wsp | na 16 16 |        |             |
1166:000 | DONE lbl | na 16 16 | 00537c |             | z_zero-equal                         
1166:001 | DONE ins | na 16 16 | 00537c | 60          |                 rts                  
1167:000 | DONE wsp | na 16 16 |        |             |
1168:000 | DONE wsp | na 16 16 |        |             |
1169:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1170:000 | DONE cmt | na 16 16 |        |             | ; 0< "ZERO-LESS" ( n -- f ) 11 bytes / X cycles
1171:000 | DONE cmt | na 16 16 |        |             | ; Return the true flag if TOS is less than zero
1172:000 | DONE lbl | na 16 16 | 00537d |             | xt_zero-less                         
1173:000 | DONE dir | na 16 16 |        |             |         .!a16                        
1174:000 | DONE ins | na 16 16 | 00537d | 98          |                 tya                  force flag check
1175:000 | DONE ins | na 16 16 | 00537e | 30 05       |                 bmi 005385           
1176:000 | DONE wsp | na 16 16 |        |             |
1177:000 | DONE ins | na 16 16 | 005380 | a0 00 00    |                 ldy.# 0000           
1178:000 | DONE ins | na 16 16 | 005383 | 80 03       |                 bra 005388           
1179:000 | DONE wsp | na 16 16 |        |             |
1180:000 | DONE lbl | na 16 16 | 005385 |             | zero-less-is-less                    
1181:000 | DONE ins | na 16 16 | 005385 | a0 ff ff    |                 ldy.# 0ffff          
1182:000 | DONE wsp | na 16 16 |        |             |
1183:000 | DONE lbl | na 16 16 | 005388 |             | z_zero-less                          
1183:001 | DONE ins | na 16 16 | 005388 | 60          |                 rts                  
1184:000 | DONE wsp | na 16 16 |        |             |
1185:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1186:000 | DONE cmt | na 16 16 |        |             | ; 0<> "ZERO-NOTEQUAL" ( n -- f ) 11 bytes / X cycles
1187:000 | DONE cmt | na 16 16 |        |             | ; Return the true flag if TOS is not zero
1188:000 | DONE lbl | na 16 16 | 005389 |             | xt_zero-notequal                     
1189:000 | DONE dir | na 16 16 |        |             |         .!a16                        
1190:000 | DONE ins | na 16 16 | 005389 | 98          |                 tya                  force flag check
1191:000 | DONE ins | na 16 16 | 00538a | f0 05       |                 beq 005391           
1192:000 | DONE ins | na 16 16 | 00538c | a0 ff ff    |                 ldy.# 0ffff          
1193:000 | DONE ins | na 16 16 | 00538f | 80 03       |                 bra 005394           
1194:000 | DONE lbl | na 16 16 | 005391 |             | zne_is_zero                          
1195:000 | DONE ins | na 16 16 | 005391 | a0 00 00    |                 ldy.# 0000           
1196:000 | DONE lbl | na 16 16 | 005394 |             | z_zero-notequal                      
1197:000 | DONE ins | na 16 16 | 005394 | 60          |                 rts                  
1198:000 | DONE wsp | na 16 16 |        |             |
1199:000 | DONE wsp | na 16 16 |        |             |
1200:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1201:000 | DONE cmt | na 16 16 |        |             | ; 0> "ZERO-MORE" ( n -- f ) X bytes / X cycles
1202:000 | DONE cmt | na 16 16 |        |             | ; Return the true flag if TOS is more than zero
1203:000 | DONE lbl | na 16 16 | 005395 |             | xt_zero-more                         
1204:000 | DONE dir | na 16 16 |        |             |         .!a16                        
1205:000 | DONE ins | na 16 16 | 005395 | a9 00 00    |                 lda.# 0000           default is false
1206:000 | DONE wsp | na 16 16 |        |             |
1207:000 | DONE ins | na 16 16 | 005398 | 88          |                 dey                  
1208:000 | DONE ins | na 16 16 | 005399 | 10 02       |                 bpl 00539d           was at least 1
1209:000 | DONE wsp | na 16 16 |        |             |
1210:000 | DONE ins | na 16 16 | 00539b | 80 01       |                 bra 00539e           nope, stays false
1211:000 | DONE wsp | na 16 16 |        |             |
1212:000 | DONE lbl | na 16 16 | 00539d |             | zero-more_true                       
1213:000 | DONE ins | na 16 16 | 00539d | 3a          |                 dec.a                wraps to 0ffff, true
1214:000 | DONE lbl | na 16 16 | 00539e |             | zero-more_done                       
1215:000 | DONE ins | na 16 16 | 00539e | a8          |                 tay                  
1216:000 | DONE wsp | na 16 16 |        |             |
1217:000 | DONE lbl | na 16 16 | 00539f |             | z_zero-more                          
1217:001 | DONE ins | na 16 16 | 00539f | 60          |                 rts                  
1218:000 | DONE wsp | na 16 16 |        |             |
1219:000 | DONE wsp | na 16 16 |        |             |
1220:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1221:000 | DONE cmt | na 16 16 |        |             | ; 0BRANCH ( 0 | f -- ) X bytes / X cycles
1222:000 | DONE cmt | na 16 16 |        |             | ; Branch if TOS is zero. This exects the next two bytes to be the address of
1223:000 | DONE cmt | na 16 16 |        |             | ; where to branch to if the test fails. The code may not be natively compiled
1224:000 | DONE cmt | na 16 16 |        |             | ; because we need the return address provided by JSR's push to the Return Stack
1225:000 | DONE cmt | na 16 16 |        |             | ; This routine uses tmpbranch
1226:000 | DONE lbl | na 16 16 | 0053a0 |             | xt_zbranch                           
1227:000 | DONE dir | na 16 16 |        |             |         .!a16                        
1228:000 | DONE cmt | na 16 16 |        |             |                 ; encode subroutine jump to run time code
1229:000 | DONE ins | na 16 16 | 0053a0 | f4 a7 53    |                 phe.# 0053a7         
1230:000 | DONE ins | na 16 16 | 0053a3 | 20 59 69    |                 jsr 006959           
1231:000 | DONE wsp | na 16 16 |        |             |
1232:000 | DONE lbl | na 16 16 | 0053a6 |             | z_zbranch                            
1232:001 | DONE ins | na 16 16 | 0053a6 | 60          |                 rts                  
1233:000 | DONE wsp | na 16 16 |        |             |
1234:000 | DONE lbl | na 16 16 | 0053a7 |             | zbranch_rt                           
1235:000 | DONE cmt | na 16 16 |        |             |                 ; See if the flag is zero, which is the whole purpose of this
1236:000 | DONE cmt | na 16 16 |        |             |                 ; operation after all
1237:000 | DONE ins | na 16 16 | 0053a7 | 98          |                 tya                  force flag check
1238:000 | DONE ins | na 16 16 | 0053a8 | f0 05       |                 beq 0053af           flag is false (zero), so we branch
1239:000 | DONE wsp | na 16 16 |        |             |
1240:000 | DONE cmt | na 16 16 |        |             |                 ; Flag is TRUE, so we skip over the next two bytes. Put
1241:000 | DONE cmt | na 16 16 |        |             |                 ; differently, this is the part between IF and THEN
1242:000 | DONE ins | na 16 16 | 0053aa | 68          |                 pla                  
1243:000 | DONE ins | na 16 16 | 0053ab | 1a          |                 inc.a                
1244:000 | DONE ins | na 16 16 | 0053ac | 1a          |                 inc.a                
1245:000 | DONE wsp | na 16 16 |        |             |
1246:000 | DONE ins | na 16 16 | 0053ad | 80 09       |                 bra 0053b8           
1247:000 | DONE wsp | na 16 16 |        |             |
1248:000 | DONE lbl | na 16 16 | 0053af |             | zb_zero                              
1249:000 | DONE cmt | na 16 16 |        |             |                 ; Flag is FALSE, so we take the dump to the address given in the
1250:000 | DONE cmt | na 16 16 |        |             |                 ; next two bytes. We don't need Y anymore, so we can use it for
1251:000 | DONE cmt | na 16 16 |        |             |                 ; indexing
1252:000 | DONE ins | na 16 16 | 0053af | 68          |                 pla                  
1253:000 | DONE ins | na 16 16 | 0053b0 | 85 1a       |                 sta.d 00001a         
1254:000 | DONE ins | na 16 16 | 0053b2 | a0 01 00    |                 ldy.# 0001           
1255:000 | DONE ins | na 16 16 | 0053b5 | b1 1a       |                 lda.diy 00001a       
1256:000 | DONE wsp | na 16 16 |        |             |
1257:000 | DONE cmt | na 16 16 |        |             |                 ; Subtract one from the address given becasue of the RTS
1258:000 | DONE cmt | na 16 16 |        |             |                 ; mechanics
1259:000 | DONE ins | na 16 16 | 0053b7 | 3a          |                 dec.a                
1260:000 | DONE wsp | na 16 16 |        |             |
1261:000 | DONE lbl | na 16 16 | 0053b8 |             | zb_done                              
1262:000 | DONE cmt | na 16 16 |        |             |                 ; One we or another, this is where we're going to jump to
1263:000 | DONE ins | na 16 16 | 0053b8 | 48          |                 pha                  
1264:000 | DONE wsp | na 16 16 |        |             |
1265:000 | DONE cmt | na 16 16 |        |             |                 ; Clean up the Data Stack and jump
1266:000 | DONE ins | na 16 16 | 0053b9 | b4 00       |                 ldy.dx 00            
1267:000 | DONE ins | na 16 16 | 0053bb | e8          |                 inx                  
1268:000 | DONE ins | na 16 16 | 0053bc | e8          |                 inx                  
1269:000 | DONE wsp | na 16 16 |        |             |
1270:000 | DONE ins | na 16 16 | 0053bd | 60          |                 rts                  
1271:000 | DONE wsp | na 16 16 |        |             |
1272:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1273:000 | DONE cmt | na 16 16 |        |             | ; 1 "ONE" ( -- 1 ) 7 bytes / 12 cycles
1274:000 | DONE cmt | na 16 16 |        |             | ; Pushes the number 1 on the Data Stack
1275:000 | DONE lbl | na 16 16 | 0053be |             | xt_one                               
1276:000 | DONE dir | na 16 16 |        |             |         .!xy16                       
1277:000 | DONE ins | na 16 16 | 0053be | ca          |                 dex                  
1278:000 | DONE ins | na 16 16 | 0053bf | ca          |                 dex                  
1279:000 | DONE ins | na 16 16 | 0053c0 | 94 00       |                 sty.dx 00            
1280:000 | DONE ins | na 16 16 | 0053c2 | a0 01 00    |                 ldy.# 0001           
1281:000 | DONE wsp | na 16 16 |        |             |
1282:000 | DONE lbl | na 16 16 | 0053c5 |             | z_one                                
1282:001 | DONE ins | na 16 16 | 0053c5 | 60          |                 rts                  
1283:000 | DONE wsp | na 16 16 |        |             |
1284:000 | DONE wsp | na 16 16 |        |             |
1285:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1286:000 | DONE cmt | na 16 16 |        |             | ; 1- "ONE-MINUS" ( n -- n-1 ) 1 byte / 2 cycles
1287:000 | DONE cmt | na 16 16 |        |             | ; Subtract 1 from Top of Stack (TOS). Because there is no checking if there is
1288:000 | DONE cmt | na 16 16 |        |             | ; actually anything on the Data Stack, this routine will fail silently if the
1289:000 | DONE cmt | na 16 16 |        |             | ; stack is empty
1290:000 | DONE lbl | na 16 16 | 0053c6 |             | xt_one-minus                         
1291:000 | DONE dir | na 16 16 |        |             |         .!xy16                       
1292:000 | DONE ins | na 16 16 | 0053c6 | 88          |                 dey                  
1293:000 | DONE lbl | na 16 16 | 0053c7 |             | z_one-minus                          
1293:001 | DONE ins | na 16 16 | 0053c7 | 60          |                 rts                  
1294:000 | DONE wsp | na 16 16 |        |             |
1295:000 | DONE wsp | na 16 16 |        |             |
1296:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1297:000 | DONE cmt | na 16 16 |        |             | ; 1+ "ONE-PLUS" ( n -- n+1 ) 1 byte / 2 cycles
1298:000 | DONE cmt | na 16 16 |        |             | ; Add 1 to TOS. Because there is no checking if there is actually anything on
1299:000 | DONE cmt | na 16 16 |        |             | ; the Data Stack, this routine will fail silently if the stack is empty
1300:000 | DONE lbl | na 16 16 | 0053c8 |             | xt_one-plus                          
1301:000 | DONE dir | na 16 16 |        |             |         .!xy16                       
1302:000 | DONE ins | na 16 16 | 0053c8 | c8          |                 iny                  
1303:000 | DONE lbl | na 16 16 | 0053c9 |             | z_one-plus                           
1303:001 | DONE ins | na 16 16 | 0053c9 | 60          |                 rts                  
1304:000 | DONE wsp | na 16 16 |        |             |
1305:000 | DONE wsp | na 16 16 |        |             |
1306:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1307:000 | DONE cmt | na 16 16 |        |             | ; 2 "TWO" ( -- 2 ) 7 bytes / 12 cycles
1308:000 | DONE cmt | na 16 16 |        |             | ; Pushes the number 2 on the Data Stack
1309:000 | DONE lbl | na 16 16 | 0053ca |             | xt_two                               
1310:000 | DONE dir | na 16 16 |        |             |         .!xy16                       
1311:000 | DONE ins | na 16 16 | 0053ca | ca          |                 dex                  
1312:000 | DONE ins | na 16 16 | 0053cb | ca          |                 dex                  
1313:000 | DONE ins | na 16 16 | 0053cc | 94 00       |                 sty.dx 00            
1314:000 | DONE ins | na 16 16 | 0053ce | a0 02 00    |                 ldy.# 0002           
1315:000 | DONE wsp | na 16 16 |        |             |
1316:000 | DONE lbl | na 16 16 | 0053d1 |             | z_two                                
1316:001 | DONE ins | na 16 16 | 0053d1 | 60          |                 rts                  
1317:000 | DONE wsp | na 16 16 |        |             |
1318:000 | DONE wsp | na 16 16 |        |             |
1319:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1320:000 | DONE cmt | na 16 16 |        |             | ; 2* "TWO-STAR" ( n -- 2*n ) 3 bytes / 6 cycles
1321:000 | DONE cmt | na 16 16 |        |             | ; Multiply Top of Stack (TOS) by 2. This is also used by CELLS
1322:000 | DONE lbl | na 16 16 | 0053d2 |             | xt_two-star                          
1323:000 | DONE dir | na 16 16 |        |             |         .!a16                        
1324:000 | DONE dir | na 16 16 |        |             |         .!xy16                       
1325:000 | DONE ins | na 16 16 | 0053d2 | 98          |                 tya                  
1326:000 | DONE ins | na 16 16 | 0053d3 | 0a          |                 asl.a                
1327:000 | DONE ins | na 16 16 | 0053d4 | a8          |                 tay                  
1328:000 | DONE wsp | na 16 16 |        |             |
1329:000 | DONE lbl | na 16 16 | 0053d5 |             | z_two-star                           
1329:001 | DONE ins | na 16 16 | 0053d5 | 60          |                 rts                  
1330:000 | DONE wsp | na 16 16 |        |             |
1331:000 | DONE wsp | na 16 16 |        |             |
1332:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1333:000 | DONE cmt | na 16 16 |        |             | ; 2>R "TWOTOR" ( n1 n2 -- )(R: -- n1 n2)  X bytes / X cycles
1334:000 | DONE cmt | na 16 16 |        |             | ; Push top two entries to Return Stack. The same as SWAP >R >R except that if we
1335:000 | DONE cmt | na 16 16 |        |             | ; jumped here, the return address will be in the way. May not be natively
1336:000 | DONE cmt | na 16 16 |        |             | ; compiled
1337:000 | DONE cmt | na 16 16 |        |             | ; TODO not coded
1338:000 | DONE lbl | na 16 16 | 0053d6 |             | xt_twotor                            
1339:000 | DONE cmt | na 16 16 |        |             |                 ; get the return address out of the way
1340:000 | DONE ins | na 16 16 | 0053d6 | 68          |                 pla                  
1341:000 | DONE ins | na 16 16 | 0053d7 | 85 20       |                 sta.d 000020         
1342:000 | DONE cmt | na 16 16 |        |             |                 ; --- CUT HERE for native compile ---
1343:000 | DONE wsp | na 16 16 |        |             |
1344:000 | DONE ins | na 16 16 | 0053d9 | b5 00       |                 lda.dx 00            NOS stays next on Return Stack
1345:000 | DONE ins | na 16 16 | 0053db | 48          |                 pha                  
1346:000 | DONE ins | na 16 16 | 0053dc | 5a          |                 phy                  TOS stays on top
1347:000 | DONE wsp | na 16 16 |        |             |
1348:000 | DONE ins | na 16 16 | 0053dd | b4 02       |                 ldy.dx 02            clean up data stack
1349:000 | DONE ins | na 16 16 | 0053df | e8          |                 inx                  
1350:000 | DONE ins | na 16 16 | 0053e0 | e8          |                 inx                  
1351:000 | DONE ins | na 16 16 | 0053e1 | e8          |                 inx                  
1352:000 | DONE ins | na 16 16 | 0053e2 | e8          |                 inx                  
1353:000 | DONE wsp | na 16 16 |        |             |
1354:000 | DONE cmt | na 16 16 |        |             |                 ; --- CUT HERE for native compile ---
1355:000 | DONE ins | na 16 16 | 0053e3 | a5 20       |                 lda.d 000020         
1356:000 | DONE ins | na 16 16 | 0053e5 | 48          |                 pha                  
1357:000 | DONE wsp | na 16 16 |        |             |
1358:000 | DONE lbl | na 16 16 | 0053e6 |             | z_twotor                             
1358:001 | DONE ins | na 16 16 | 0053e6 | 60          |                 rts                  
1359:000 | DONE wsp | na 16 16 |        |             |
1360:000 | DONE wsp | na 16 16 |        |             |
1361:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1362:000 | DONE cmt | na 16 16 |        |             | ; 2DROP ( n m -- ) 6 bytes / 13 cycles
1363:000 | DONE cmt | na 16 16 |        |             | ; Drop first two entries of Data Stack
1364:000 | DONE lbl | na 16 16 | 0053e7 |             | xt_2drop                             
1365:000 | DONE ins | na 16 16 | 0053e7 | b4 02       |                 ldy.dx 02            
1366:000 | DONE ins | na 16 16 | 0053e9 | e8          |                 inx                  
1367:000 | DONE ins | na 16 16 | 0053ea | e8          |                 inx                  
1368:000 | DONE ins | na 16 16 | 0053eb | e8          |                 inx                  
1369:000 | DONE ins | na 16 16 | 0053ec | e8          |                 inx                  
1370:000 | DONE wsp | na 16 16 |        |             |
1371:000 | DONE lbl | na 16 16 | 0053ed |             | z_2drop                              
1371:001 | DONE ins | na 16 16 | 0053ed | 60          |                 rts                  
1372:000 | DONE wsp | na 16 16 |        |             |
1373:000 | DONE wsp | na 16 16 |        |             |
1374:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1375:000 | DONE cmt | na 16 16 |        |             | ; 2DUP ( n m -- n m n m ) 10 bytes / 23 cycles
1376:000 | DONE cmt | na 16 16 |        |             | ; Duplicated the top two data stack entries
1377:000 | DONE wsp | na 16 16 |        |             |
1378:000 | DONE lbl | na 16 16 | 0053ee |             | xt_2dup                              
1379:000 | DONE dir | na 16 16 |        |             |         .!xy16                       
1380:000 | DONE ins | na 16 16 | 0053ee | ca          |                 dex                  
1381:000 | DONE ins | na 16 16 | 0053ef | ca          |                 dex                  
1382:000 | DONE ins | na 16 16 | 0053f0 | ca          |                 dex                  
1383:000 | DONE ins | na 16 16 | 0053f1 | ca          |                 dex                  
1384:000 | DONE ins | na 16 16 | 0053f2 | 94 02       |                 sty.dx 02            
1385:000 | DONE ins | na 16 16 | 0053f4 | b5 04       |                 lda.dx 04            
1386:000 | DONE ins | na 16 16 | 0053f6 | 95 00       |                 sta.dx 00            
1387:000 | DONE wsp | na 16 16 |        |             |
1388:000 | DONE lbl | na 16 16 | 0053f8 |             | z_2dup                               
1388:001 | DONE ins | na 16 16 | 0053f8 | 60          |                 rts                  
1389:000 | DONE wsp | na 16 16 |        |             |
1390:000 | DONE wsp | na 16 16 |        |             |
1391:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1392:000 | DONE cmt | na 16 16 |        |             | ; 2OVER ( d1 d2 -- d1 d2 d1 ) X bytes / X cycles
1393:000 | DONE cmt | na 16 16 |        |             | ; Copy cell pair that is NOS to TOS
1394:000 | DONE lbl | na 16 16 | 0053f9 |             | xt_2over                             
1395:000 | DONE ins | na 16 16 | 0053f9 | ca          |                 dex                  
1396:000 | DONE ins | na 16 16 | 0053fa | ca          |                 dex                  
1397:000 | DONE ins | na 16 16 | 0053fb | ca          |                 dex                  
1398:000 | DONE ins | na 16 16 | 0053fc | ca          |                 dex                  
1399:000 | DONE ins | na 16 16 | 0053fd | 94 02       |                 sty.dx 02            
1400:000 | DONE ins | na 16 16 | 0053ff | b4 06       |                 ldy.dx 06            
1401:000 | DONE ins | na 16 16 | 005401 | b5 08       |                 lda.dx 08            
1402:000 | DONE ins | na 16 16 | 005403 | 95 00       |                 sta.dx 00            
1403:000 | DONE wsp | na 16 16 |        |             |
1404:000 | DONE lbl | na 16 16 | 005405 |             | z_2over                              
1404:001 | DONE ins | na 16 16 | 005405 | 60          |                 rts                  
1405:000 | DONE wsp | na 16 16 |        |             |
1406:000 | DONE wsp | na 16 16 |        |             |
1407:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1408:000 | DONE cmt | na 16 16 |        |             | ; 2R> "TWOFROMR" ( -- n1 n2 ) ( R: n1 n2 ) X bytes / X cycles
1409:000 | DONE cmt | na 16 16 |        |             | ; Pull top two entries from Return Stack. Is the same as R> R> SWAP
1410:000 | DONE cmt | na 16 16 |        |             | ; As with R>, the problem with the is word is that the top value on the Return
1411:000 | DONE cmt | na 16 16 |        |             | ; Stack for a STC Forth is the return address, which we need to get out of the
1412:000 | DONE cmt | na 16 16 |        |             | ; way first. Uses tmp3
1413:000 | DONE lbl | na 16 16 | 005406 |             | xt_twofromr                          
1414:000 | DONE cmt | na 16 16 |        |             |                 ; get the return address out of the way
1415:000 | DONE ins | na 16 16 | 005406 | 68          |                 pla                  
1416:000 | DONE ins | na 16 16 | 005407 | 85 20       |                 sta.d 000020         
1417:000 | DONE cmt | na 16 16 |        |             |                 ; --- CUT HERE for native compile ---
1418:000 | DONE wsp | na 16 16 |        |             |
1419:000 | DONE ins | na 16 16 | 005409 | ca          |                 dex                  make room on Data Stack
1420:000 | DONE ins | na 16 16 | 00540a | ca          |                 dex                  
1421:000 | DONE ins | na 16 16 | 00540b | ca          |                 dex                  
1422:000 | DONE ins | na 16 16 | 00540c | ca          |                 dex                  
1423:000 | DONE ins | na 16 16 | 00540d | 94 02       |                 sty.dx 02            
1424:000 | DONE wsp | na 16 16 |        |             |
1425:000 | DONE ins | na 16 16 | 00540f | 7a          |                 ply                  top element stays on top
1426:000 | DONE ins | na 16 16 | 005410 | 68          |                 pla                  next element stays below
1427:000 | DONE ins | na 16 16 | 005411 | 95 00       |                 sta.dx 00            
1428:000 | DONE wsp | na 16 16 |        |             |
1429:000 | DONE cmt | na 16 16 |        |             |                 ; --- CUT HERE for native compile ---
1430:000 | DONE cmt | na 16 16 |        |             |                 ; restore return address
1431:000 | DONE ins | na 16 16 | 005413 | a5 20       |                 lda.d 000020         
1432:000 | DONE ins | na 16 16 | 005415 | 48          |                 pha                  
1433:000 | DONE wsp | na 16 16 |        |             |
1434:000 | DONE lbl | na 16 16 | 005416 |             | z_twofromr                           
1434:001 | DONE ins | na 16 16 | 005416 | 60          |                 rts                  
1435:000 | DONE wsp | na 16 16 |        |             |
1436:000 | DONE wsp | na 16 16 |        |             |
1437:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1438:000 | DONE cmt | na 16 16 |        |             | ; 2R@ ( -- n1 n2 )(R: n1 n2 -- n1 n2 )  X bytes / X cycles
1439:000 | DONE cmt | na 16 16 |        |             | ; Copy two words off the Return Stack.  This is R> R> 2DUP >R >R SWAP but we
1440:000 | DONE cmt | na 16 16 |        |             | ; can do this a lot faster in assembler This routine may not be natively
1441:000 | DONE cmt | na 16 16 |        |             | ; compiled; because it accessed by a JSR, the first element on the Return Stack
1442:000 | DONE cmt | na 16 16 |        |             | ; (LDA.S 01) is the return address.
1443:000 | DONE lbl | na 16 16 | 005417 |             | xt_tworfetch                         
1444:000 | DONE cmt | na 16 16 |        |             |                 ; make room on the Data Stack
1445:000 | DONE ins | na 16 16 | 005417 | ca          |                 dex                  
1446:000 | DONE ins | na 16 16 | 005418 | ca          |                 dex                  
1447:000 | DONE ins | na 16 16 | 005419 | ca          |                 dex                  
1448:000 | DONE ins | na 16 16 | 00541a | ca          |                 dex                  
1449:000 | DONE ins | na 16 16 | 00541b | 94 02       |                 sty.dx 02            
1450:000 | DONE wsp | na 16 16 |        |             |
1451:000 | DONE ins | na 16 16 | 00541d | a3 03       |                 lda.s 03             get second element of Return Stack
1452:000 | DONE ins | na 16 16 | 00541f | a8          |                 tay                  
1453:000 | DONE ins | na 16 16 | 005420 | a3 05       |                 lda.s 05             get third element on Return Stack
1454:000 | DONE ins | na 16 16 | 005422 | 95 00       |                 sta.dx 00            
1455:000 | DONE wsp | na 16 16 |        |             |
1456:000 | DONE lbl | na 16 16 | 005424 |             | z_tworfetch                          
1456:001 | DONE ins | na 16 16 | 005424 | 60          |                 rts                  
1457:000 | DONE wsp | na 16 16 |        |             |
1458:000 | DONE wsp | na 16 16 |        |             |
1459:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1460:000 | DONE cmt | na 16 16 |        |             | ; 2SWAP ( d1 d2 -- d2 d1 ) X bytes / X cycles
1461:000 | DONE cmt | na 16 16 |        |             | ; Swap two double cell numbers on the Data Stack.
1462:000 | DONE lbl | na 16 16 | 005425 |             | xt_2swap                             
1463:000 | DONE ins | na 16 16 | 005425 | 5a          |                 phy                  hi word of TOS
1464:000 | DONE ins | na 16 16 | 005426 | b4 02       |                 ldy.dx 02            hi word of NOS
1465:000 | DONE ins | na 16 16 | 005428 | 68          |                 pla                  
1466:000 | DONE ins | na 16 16 | 005429 | 95 02       |                 sta.dx 02            
1467:000 | DONE wsp | na 16 16 |        |             |
1468:000 | DONE ins | na 16 16 | 00542b | b5 00       |                 lda.dx 00            lo word of TOS
1469:000 | DONE ins | na 16 16 | 00542d | 48          |                 pha                  
1470:000 | DONE ins | na 16 16 | 00542e | b5 04       |                 lda.dx 04            lo word of NOS
1471:000 | DONE ins | na 16 16 | 005430 | 95 00       |                 sta.dx 00            
1472:000 | DONE ins | na 16 16 | 005432 | 68          |                 pla                  
1473:000 | DONE ins | na 16 16 | 005433 | 95 04       |                 sta.dx 04            
1474:000 | DONE wsp | na 16 16 |        |             |
1475:000 | DONE lbl | na 16 16 | 005435 |             | z_2swap                              
1475:001 | DONE ins | na 16 16 | 005435 | 60          |                 rts                  
1476:000 | DONE wsp | na 16 16 |        |             |
1477:000 | DONE wsp | na 16 16 |        |             |
1478:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1479:000 | DONE cmt | na 16 16 |        |             | ; 2VARIABLE ( "name" -- ) X bytes / X cycles
1480:000 | DONE cmt | na 16 16 |        |             | ; Create a variable with space for a double celled word. This can be realized in
1481:000 | DONE cmt | na 16 16 |        |             | ; Forth as either CREATE 2 CELLS ALLOT or just CREATE 0 , 0 ,
1482:000 | DONE cmt | na 16 16 |        |             | ; We use the second variant, letting CREATE do the hard work
1483:000 | DONE cmt | na 16 16 |        |             | ; TODO see if it is faster to use Y as an index and increase by four
1484:000 | DONE lbl | na 16 16 | 005436 |             | xt_2variable                         
1485:000 | DONE dir | na 16 16 |        |             |         .!a16                        
1486:000 | DONE ins | na 16 16 | 005436 | 20 2e 57    |                 jsr 00572e           
1487:000 | DONE wsp | na 16 16 |        |             |
1488:000 | DONE ins | na 16 16 | 005439 | a9 00 00    |                 lda.# 0000           
1489:000 | DONE ins | na 16 16 | 00543c | 92 00       |                 sta.di 000000        
1490:000 | DONE ins | na 16 16 | 00543e | e6 00       |                 inc.d 000000         
1491:000 | DONE ins | na 16 16 | 005440 | e6 00       |                 inc.d 000000         
1492:000 | DONE ins | na 16 16 | 005442 | 92 00       |                 sta.di 000000        
1493:000 | DONE ins | na 16 16 | 005444 | e6 00       |                 inc.d 000000         
1494:000 | DONE ins | na 16 16 | 005446 | e6 00       |                 inc.d 000000         
1495:000 | DONE wsp | na 16 16 |        |             |
1496:000 | DONE lbl | na 16 16 | 005448 |             | z_2variable                          
1496:001 | DONE ins | na 16 16 | 005448 | 60          |                 rts                  
1497:000 | DONE wsp | na 16 16 |        |             |
1498:000 | DONE wsp | na 16 16 |        |             |
1499:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1500:000 | DONE cmt | na 16 16 |        |             | ; ' "TICK" ( "string" -- xt ) X bytes / X cycles
1501:000 | DONE cmt | na 16 16 |        |             | ; Given a string with the name of a word, return the word's execution token (xt)
1502:000 | DONE cmt | na 16 16 |        |             | ; Abort if not found
1503:000 | DONE lbl | na 16 16 | 005449 |             | xt_tick                              
1504:000 | DONE ins | na 16 16 | 005449 | 20 fb 5b    |                 jsr 005bfb           ( -- addr u )
1505:000 | DONE wsp | na 16 16 |        |             |
1506:000 | DONE cmt | na 16 16 |        |             |                 ; if we got a zero, complain and abort
1507:000 | DONE ins | na 16 16 | 00544c | 98          |                 tya                  force flag check
1508:000 | DONE ins | na 16 16 | 00544d | d0 06       |                 bne 005455           
1509:000 | DONE wsp | na 16 16 |        |             |
1510:000 | DONE ins | na 16 16 | 00544f | a9 76 70    |                 lda.# 007076         
1511:000 | DONE ins | na 16 16 | 005452 | 4c 7a 69    |                 jmp 00697a           
1512:000 | DONE wsp | na 16 16 |        |             |
1513:000 | DONE lbl | na 16 16 | 005455 |             | tick_have_word                       
1514:000 | DONE ins | na 16 16 | 005455 | 20 33 59    |                 jsr 005933           ( addr u -- nt)
1515:000 | DONE ins | na 16 16 | 005458 | 98          |                 tya                  force flag check
1516:000 | DONE wsp | na 16 16 |        |             |
1517:000 | DONE cmt | na 16 16 |        |             |                 ; if we didn't find string in the dictionary, complain and abort
1518:000 | DONE ins | na 16 16 | 005459 | d0 06       |                 bne 005461           
1519:000 | DONE wsp | na 16 16 |        |             |
1520:000 | DONE ins | na 16 16 | 00545b | a9 13 71    |                 lda.# 007113         
1521:000 | DONE ins | na 16 16 | 00545e | 4c 7a 69    |                 jmp 00697a           
1522:000 | DONE wsp | na 16 16 |        |             |
1523:000 | DONE lbl | na 16 16 | 005461 |             | tick_have_nt                         
1524:000 | DONE ins | na 16 16 | 005461 | 20 13 5b    |                 jsr 005b13           ( nt -- xt )
1525:000 | DONE wsp | na 16 16 |        |             |
1526:000 | DONE lbl | na 16 16 | 005464 |             | z_tick                               
1526:001 | DONE ins | na 16 16 | 005464 | 60          |                 rts                  
1527:000 | DONE wsp | na 16 16 |        |             |
1528:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1529:000 | DONE cmt | na 16 16 |        |             | ; ABORT" "ABORTQ" ( "string" -- ) X bytes / X cycles
1530:000 | DONE cmt | na 16 16 |        |             | ; If flag on TOS is not false, print error message and abort. This a compile-only word
1531:000 | DONE lbl | na 16 16 | 005465 |             | xt_abortq                            
1532:000 | DONE dir | na 16 16 |        |             |         .!a16                        
1533:000 | DONE ins | na 16 16 | 005465 | 20 0c 5d    |                 jsr 005d0c           save string
1534:000 | DONE wsp | na 16 16 |        |             |
1535:000 | DONE ins | na 16 16 | 005468 | f4 6f 54    |                 phe.# 00546f         compile run-time aspect
1536:000 | DONE ins | na 16 16 | 00546b | 20 59 69    |                 jsr 006959           
1537:000 | DONE wsp | na 16 16 |        |             |
1538:000 | DONE ins | na 16 16 | 00546e | 60          |                 rts                  
1539:000 | DONE wsp | na 16 16 |        |             |
1540:000 | DONE lbl | na 16 16 | 00546f |             | abortq_rt                            
1541:000 | DONE cmt | na 16 16 |        |             |                 ; we land here with ( f addr u )
1542:000 | DONE ins | na 16 16 | 00546f | b5 02       |                 lda.dx 02            get flag as 3OS
1543:000 | DONE ins | na 16 16 | 005471 | f0 06       |                 beq 005479           if FALSE, we're done
1544:000 | DONE wsp | na 16 16 |        |             |
1545:000 | DONE cmt | na 16 16 |        |             |                 ; if TRUE, we print string and ABORT
1546:000 | DONE cmt | na 16 16 |        |             |                 ; TODO see if we want to inform user we're aborting
1547:000 | DONE ins | na 16 16 | 005473 | 20 79 5e    |                 jsr 005e79           
1548:000 | DONE ins | na 16 16 | 005476 | 4c b2 50    |                 jmp 0050b2           not JSR because we never come back
1549:000 | DONE wsp | na 16 16 |        |             |
1550:000 | DONE lbl | na 16 16 | 005479 |             | abortq_done                          
1551:000 | DONE cmt | na 16 16 |        |             |                 ; drop the three entries from the Data Stack
1552:000 | DONE ins | na 16 16 | 005479 | b4 04       |                 ldy.dx 04            fourth on the stack
1553:000 | DONE wsp | na 16 16 |        |             |
1554:000 | DONE cmt | na 16 16 |        |             |                 ; this is the same size, but three cycles faster than six INX
1555:000 | DONE cmt | na 16 16 |        |             |                 ; instructions
1556:000 | DONE ins | na 16 16 | 00547b | 8a          |                 txa                  
1557:000 | DONE ins | na 16 16 | 00547c | 18          |                 clc                  
1558:000 | DONE ins | na 16 16 | 00547d | 69 06 00    |                 adc.# 0006           
1559:000 | DONE ins | na 16 16 | 005480 | aa          |                 tax                  
1560:000 | DONE wsp | na 16 16 |        |             |
1561:000 | DONE lbl | na 16 16 | 005481 |             | z_abortq                             
1561:001 | DONE ins | na 16 16 | 005481 | 60          |                 rts                  
1562:000 | DONE wsp | na 16 16 |        |             |
1563:000 | DONE wsp | na 16 16 |        |             |
1564:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1565:000 | DONE cmt | na 16 16 |        |             | ; ABS ( n -- u ) 8 bytes / X cycles
1566:000 | DONE cmt | na 16 16 |        |             | ; Return the absolute value of a single number
1567:000 | DONE lbl | na 16 16 | 005482 |             | xt_abs                               
1568:000 | DONE dir | na 16 16 |        |             |         .!a16                        
1569:000 | DONE dir | na 16 16 |        |             |         .!xy16                       
1570:000 | DONE ins | na 16 16 | 005482 | 98          |                 tya                  force flag test
1571:000 | DONE ins | na 16 16 | 005483 | 10 05       |                 bpl 00548a           positive number is easy
1572:000 | DONE wsp | na 16 16 |        |             |
1573:000 | DONE cmt | na 16 16 |        |             |                 ; negative: Calculate 0-n
1574:000 | DONE ins | na 16 16 | 005485 | 49 ff ff    |                 eor.# 0ffff          
1575:000 | DONE ins | na 16 16 | 005488 | 1a          |                 inc.a                
1576:000 | DONE ins | na 16 16 | 005489 | a8          |                 tay                  
1577:000 | DONE wsp | na 16 16 |        |             |
1578:000 | DONE lbl | na 16 16 | 00548a |             | z_abs                                
1578:001 | DONE ins | na 16 16 | 00548a | 60          |                 rts                  
1579:000 | DONE wsp | na 16 16 |        |             |
1580:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1581:000 | DONE cmt | na 16 16 |        |             | ; ACCEPT ( addr n1 -- n2 ) X bytes / X cycles
1582:000 | DONE cmt | na 16 16 |        |             | ; Receive a string of at most n1 characters, placing them at addr. Return the
1583:000 | DONE cmt | na 16 16 |        |             | ; actual number of characters as n2. Characters are echoed as they are received.
1584:000 | DONE cmt | na 16 16 |        |             | ; ACCEPT is called by REFILL these days.
1585:000 | DONE wsp | na 16 16 |        |             |
1586:000 | DONE cmt | na 16 16 |        |             | ; Though we're dealing with individual characters, all these actions are
1587:000 | DONE cmt | na 16 16 |        |             | ; performed with a 16 bit A register. The only place we switch is in the kernel
1588:000 | DONE cmt | na 16 16 |        |             | ; routines themselves
1589:000 | DONE lbl | na 16 16 | 00548b |             | xt_accept                            
1590:000 | DONE dir | na 16 16 |        |             |         .!a16                        
1591:000 | DONE cmt | na 16 16 |        |             |                 ; Set up loop
1592:000 | DONE ins | na 16 16 | 00548b | 98          |                 tya                  force flag test
1593:000 | DONE ins | na 16 16 | 00548c | d0 05       |                 bne 005493           
1594:000 | DONE wsp | na 16 16 |        |             |
1595:000 | DONE cmt | na 16 16 |        |             |                 ; if we were told to get zero chars, just quit
1596:000 | DONE ins | na 16 16 | 00548e | e8          |                 inx                  NIP, TOS is zero which is also FALSE
1597:000 | DONE ins | na 16 16 | 00548f | e8          |                 inx                  
1598:000 | DONE wsp | na 16 16 |        |             |
1599:000 | DONE ins | na 16 16 | 005490 | 4c 19 55    |                 jmp 005519           no RTS so we can native compile
1600:000 | DONE wsp | na 16 16 |        |             |
1601:000 | DONE lbl | na 16 16 | 005493 |             | accept_nonzero                       
1602:000 | DONE ins | na 16 16 | 005493 | b5 00       |                 lda.dx 00            address of buffer is NOS
1603:000 | DONE ins | na 16 16 | 005495 | 85 1c       |                 sta.d 00001c         
1604:000 | DONE ins | na 16 16 | 005497 | e8          |                 inx                  NIP
1605:000 | DONE ins | na 16 16 | 005498 | e8          |                 inx                  
1606:000 | DONE wsp | na 16 16 |        |             |
1607:000 | DONE ins | na 16 16 | 005499 | 84 1e       |                 sty.d 00001e         Save max number of chars in tmp2
1608:000 | DONE ins | na 16 16 | 00549b | a0 00 00    |                 ldy.# 0000           Use Y as counter
1609:000 | DONE wsp | na 16 16 |        |             |
1610:000 | DONE lbl | na 16 16 | 00549e |             | accept_loop                          
1611:000 | DONE cmt | na 16 16 |        |             |                 ; We don't need to check for CTRL-l, because a vt100 terminal
1612:000 | DONE cmt | na 16 16 |        |             |                 ; clears the screen automatically
1613:000 | DONE wsp | na 16 16 |        |             |
1614:000 | DONE cmt | na 16 16 |        |             |                 ; This is a rolled-out version of KEY so we don't spend time
1615:000 | DONE cmt | na 16 16 |        |             |                 ; fooling around wit the stack
1616:000 | DONE ins | na 16 16 | 00549e | 8e 22 00    |                 stx 000022           
1617:000 | DONE ins | na 16 16 | 0054a1 | a2 00 00    |                 ldx.# 0000           
1618:000 | DONE ins | na 16 16 | 0054a4 | fc 10 00    |                 jsr.xi 000010        JSR (INPUT,X)
1619:000 | DONE ins | na 16 16 | 0054a7 | a6 22       |                 ldx.d 000022         
1620:000 | DONE wsp | na 16 16 |        |             |
1621:000 | DONE cmt | na 16 16 |        |             |                 ; we quit on both line feed and carriage return
1622:000 | DONE ins | na 16 16 | 0054a9 | c9 0a 00    |                 cmp.# AscLF          
1623:000 | DONE ins | na 16 16 | 0054ac | f0 43       |                 beq 0054f1           
1624:000 | DONE ins | na 16 16 | 0054ae | c9 0d 00    |                 cmp.# AscCR          
1625:000 | DONE ins | na 16 16 | 0054b1 | f0 3e       |                 beq 0054f1           
1626:000 | DONE wsp | na 16 16 |        |             |
1627:000 | DONE cmt | na 16 16 |        |             |                 ; BS and DEL do the same thing for the moment
1628:000 | DONE ins | na 16 16 | 0054b3 | c9 08 00    |                 cmp.# AscBS          
1629:000 | DONE ins | na 16 16 | 0054b6 | f0 40       |                 beq 0054f8           
1630:000 | DONE ins | na 16 16 | 0054b8 | c9 7f 00    |                 cmp.# AscDEL         
1631:000 | DONE ins | na 16 16 | 0054bb | f0 3b       |                 beq 0054f8           
1632:000 | DONE wsp | na 16 16 |        |             |
1633:000 | DONE cmt | na 16 16 |        |             |                 ; CTRL-c and ESC abort (see if this is too harsh)
1634:000 | DONE ins | na 16 16 | 0054bd | c9 03 00    |                 cmp.# AscCC          
1635:000 | DONE ins | na 16 16 | 0054c0 | d0 03       |                 bne 0054c5           
1636:000 | DONE ins | na 16 16 | 0054c2 | 4c b2 50    |                 jmp 0050b2           
1637:000 | DONE lbl | na 16 16 | 0054c5 |             | @                                    
1638:000 | DONE ins | na 16 16 | 0054c5 | c9 1b 00    |                 cmp.# AscESC         
1639:000 | DONE ins | na 16 16 | 0054c8 | d0 03       |                 bne 0054cd           
1640:000 | DONE ins | na 16 16 | 0054ca | 4c b2 50    |                 jmp 0050b2           
1641:000 | DONE lbl | na 16 16 | 0054cd |             | @                                    
1642:000 | DONE cmt | na 16 16 |        |             |                 ; CTRL-p will be used for "previous cmd", TODO
1643:000 | DONE ins | na 16 16 | 0054cd | c9 10 00    |                 cmp.# AscCP          
1644:000 | DONE ins | na 16 16 | 0054d0 | d0 08       |                 bne 0054da           
1645:000 | DONE wsp | na 16 16 |        |             |
1646:000 | DONE ins | na 16 16 | 0054d2 | a9 2b 71    |                 lda.# 00712b         
1647:000 | DONE ins | na 16 16 | 0054d5 | 20 80 69    |                 jsr 006980           
1648:000 | DONE wsp | na 16 16 |        |             |
1649:000 | DONE ins | na 16 16 | 0054d8 | 80 c4       |                 bra 00549e           
1650:000 | DONE lbl | na 16 16 | 0054da |             | @                                    
1651:000 | DONE cmt | na 16 16 |        |             |                 ; CTRL-n will be used for "next cmd", TODO
1652:000 | DONE ins | na 16 16 | 0054da | c9 0e 00    |                 cmp.# AscCN          
1653:000 | DONE ins | na 16 16 | 0054dd | d0 08       |                 bne 0054e7           
1654:000 | DONE wsp | na 16 16 |        |             |
1655:000 | DONE ins | na 16 16 | 0054df | a9 3e 71    |                 lda.# 00713e         
1656:000 | DONE ins | na 16 16 | 0054e2 | 20 80 69    |                 jsr 006980           
1657:000 | DONE wsp | na 16 16 |        |             |
1658:000 | DONE ins | na 16 16 | 0054e5 | 80 b7       |                 bra 00549e           
1659:000 | DONE wsp | na 16 16 |        |             |
1660:000 | DONE lbl | na 16 16 | 0054e7 |             | @                                    
1661:000 | DONE cmt | na 16 16 |        |             |                 ; That's quite enough, echo character. EMIT_A sidesteps all the
1662:000 | DONE cmt | na 16 16 |        |             |                 ; fooling around with the Data Stack
1663:000 | DONE ins | na 16 16 | 0054e7 | 20 a1 58    |                 jsr 0058a1           
1664:000 | DONE wsp | na 16 16 |        |             |
1665:000 | DONE ins | na 16 16 | 0054ea | 91 08       |                 sta.diy 000008       STA (CIB),Y
1666:000 | DONE wsp | na 16 16 |        |             |
1667:000 | DONE ins | na 16 16 | 0054ec | c8          |                 iny                  
1668:000 | DONE ins | na 16 16 | 0054ed | c4 1e       |                 cpy.d 00001e         reached character limit?
1669:000 | DONE ins | na 16 16 | 0054ef | d0 ad       |                 bne 00549e           fall thru if buffer limit reached
1670:000 | DONE wsp | na 16 16 |        |             |
1671:000 | DONE lbl | na 16 16 | 0054f1 |             | accept_eol                           
1672:000 | DONE ins | na 16 16 | 0054f1 | 84 0a       |                 sty.d 00000a         Y contains number of chars accepted already
1673:000 | DONE wsp | na 16 16 |        |             |
1674:000 | DONE ins | na 16 16 | 0054f3 | 20 31 5e    |                 jsr 005e31           print final space
1675:000 | DONE ins | na 16 16 | 0054f6 | 80 21       |                 bra 005519           
1676:000 | DONE wsp | na 16 16 |        |             |
1677:000 | DONE lbl | na 16 16 | 0054f8 |             | accept_bs                            
1678:000 | DONE ins | na 16 16 | 0054f8 | c0 00 00    |                 cpy.# 0000           buffer empty?
1679:000 | DONE ins | na 16 16 | 0054fb | d0 07       |                 bne 005504           
1680:000 | DONE wsp | na 16 16 |        |             |
1681:000 | DONE ins | na 16 16 | 0054fd | a9 07 00    |                 lda.# AscBELL        complain and don't delete beyond the start of line
1682:000 | DONE ins | na 16 16 | 005500 | 20 a1 58    |                 jsr 0058a1           
1683:000 | DONE ins | na 16 16 | 005503 | c8          |                 iny                  
1684:000 | DONE lbl | na 16 16 | 005504 |             | @                                    
1685:000 | DONE ins | na 16 16 | 005504 | 88          |                 dey                  
1686:000 | DONE ins | na 16 16 | 005505 | a9 08 00    |                 lda.# AscBS          move back one
1687:000 | DONE ins | na 16 16 | 005508 | 20 a1 58    |                 jsr 0058a1           
1688:000 | DONE ins | na 16 16 | 00550b | a9 20 00    |                 lda.# AscSP          print a space (rubout)
1689:000 | DONE ins | na 16 16 | 00550e | 20 a1 58    |                 jsr 0058a1           
1690:000 | DONE ins | na 16 16 | 005511 | a9 08 00    |                 lda.# AscBS          move back over space
1691:000 | DONE ins | na 16 16 | 005514 | 20 a1 58    |                 jsr 0058a1           
1692:000 | DONE wsp | na 16 16 |        |             |
1693:000 | DONE ins | na 16 16 | 005517 | 80 85       |                 bra 00549e           
1694:000 | DONE wsp | na 16 16 |        |             |
1695:000 | DONE lbl | na 16 16 | 005519 |             | z_accept                             
1695:001 | DONE ins | na 16 16 | 005519 | 60          |                 rts                  
1696:000 | DONE wsp | na 16 16 |        |             |
1697:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1698:000 | DONE cmt | na 16 16 |        |             | ; AGAIN ( addr -- ) 22 bytes / 50 cycles
1699:000 | DONE cmt | na 16 16 |        |             | ; Code a backwards branch to an address usually left by BEGIN. We use JMP
1700:000 | DONE cmt | na 16 16 |        |             | ; instead of BRA to make sure we have the range.
1701:000 | DONE cmt | na 16 16 |        |             | ; TODO see if we should insert a KEY? to make sure we can abort and/or a PAUSE
1702:000 | DONE lbl | na 16 16 | 00551a |             | xt_again                             
1703:000 | DONE wsp | na 16 16 |        |             |
1704:000 | DONE cmt | na 16 16 |        |             |                 ; Add the opcode for a JMP
1705:000 | DONE ins | na 16 16 | 00551a | e2 20       |                 sep 20               
1705:001 | DONE ctl | na  8 16 |        |             |         .!a8
1706:000 | DONE ins | na  8 16 | 00551c | a9 4c       |                 lda.# 4c             
1707:000 | DONE ins | na  8 16 | 00551e | 92 00       |                 sta.di 000000        STA (CP)
1708:000 | DONE ins | na  8 16 | 005520 | c2 20       |                 rep 20               
1708:001 | DONE ctl | na 16 16 |        |             |         .!a16
1709:000 | DONE ins | na 16 16 | 005522 | e6 00       |                 inc.d 000000         
1710:000 | DONE wsp | na 16 16 |        |             |
1711:000 | DONE cmt | na 16 16 |        |             |                 ; Add the address which should be TOS
1712:000 | DONE ins | na 16 16 | 005524 | 98          |                 tya                  
1713:000 | DONE ins | na 16 16 | 005525 | 92 00       |                 sta.di 000000        
1714:000 | DONE ins | na 16 16 | 005527 | e6 00       |                 inc.d 000000         
1715:000 | DONE ins | na 16 16 | 005529 | e6 00       |                 inc.d 000000         
1716:000 | DONE wsp | na 16 16 |        |             |
1717:000 | DONE cmt | na 16 16 |        |             |                 ; drop the address
1718:000 | DONE ins | na 16 16 | 00552b | b4 00       |                 ldy.dx 00            
1719:000 | DONE ins | na 16 16 | 00552d | e8          |                 inx                  
1720:000 | DONE ins | na 16 16 | 00552e | e8          |                 inx                  
1721:000 | DONE wsp | na 16 16 |        |             |
1722:000 | DONE lbl | na 16 16 | 00552f |             | z_again                              
1722:001 | DONE ins | na 16 16 | 00552f | 60          |                 rts                  
1723:000 | DONE wsp | na 16 16 |        |             |
1724:000 | DONE wsp | na 16 16 |        |             |
1725:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1726:000 | DONE cmt | na 16 16 |        |             | ; ALIGN ( -- ) 1 bytes / X cycles
1727:000 | DONE cmt | na 16 16 |        |             | ; Make sure CP is aligned. This does nothing on the 65816
1728:000 | DONE lbl | na 16 16 | 005530 |             | xt_align                             
1729:000 | DONE ins | na 16 16 | 005530 | ea          |                 nop                  removed during native compile
1730:000 | DONE lbl | na 16 16 | 005531 |             | z_align                              
1730:001 | DONE ins | na 16 16 | 005531 | 60          |                 rts                  
1731:000 | DONE wsp | na 16 16 |        |             |
1732:000 | DONE wsp | na 16 16 |        |             |
1733:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1734:000 | DONE cmt | na 16 16 |        |             | ; ALIGNED ( addr -- a-addr ) X bytes / X cycles
1735:000 | DONE cmt | na 16 16 |        |             | ; Return the next aligned address. With the 65816, this does nothing
1736:000 | DONE lbl | na 16 16 | 005532 |             | xt_aligned                           
1737:000 | DONE ins | na 16 16 | 005532 | ea          |                 nop                  removed during native compile
1738:000 | DONE lbl | na 16 16 | 005533 |             | z_aligned                            
1738:001 | DONE ins | na 16 16 | 005533 | 60          |                 rts                  
1739:000 | DONE wsp | na 16 16 |        |             |
1740:000 | DONE wsp | na 16 16 |        |             |
1741:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1742:000 | DONE cmt | na 16 16 |        |             | ; ALLOT ( n -- ) X bytes / X cycles
1743:000 | DONE cmt | na 16 16 |        |             | ; Reserve a certain number of bytes (not cells) or release them. If n = 0, do
1744:000 | DONE cmt | na 16 16 |        |             | ; nothing. If n is negative, release n bytes, but only to the beginning of the
1745:000 | DONE cmt | na 16 16 |        |             | ; Dictionary. If n is positive (the most common case), reserve n bytes, but not
1746:000 | DONE cmt | na 16 16 |        |             | ; past the Dictionary.
1747:000 | DONE cmt | na 16 16 |        |             | ; See http://forth-standard.org/standard/core/ALLOT
1748:000 | DONE cmt | na 16 16 |        |             | ; TODO test negative values
1749:000 | DONE lbl | na 16 16 | 005534 |             | xt_allot                             
1750:000 | DONE dir | na 16 16 |        |             |         .!a16                        
1751:000 | DONE ins | na 16 16 | 005534 | 98          |                 tya                  force flag check
1752:000 | DONE ins | na 16 16 | 005535 | f0 21       |                 beq 005558           zero bytes, don't do anything
1753:000 | DONE ins | na 16 16 | 005537 | 30 12       |                 bmi 00554b           free memory instead of reserving it
1754:000 | DONE wsp | na 16 16 |        |             |
1755:000 | DONE cmt | na 16 16 |        |             |                 ; most common case: reserve n bytes. We've already transfered
1756:000 | DONE cmt | na 16 16 |        |             |                 ; TOS to A, so we just have to add the current compile pointer
1757:000 | DONE ins | na 16 16 | 005539 | 18          |                 clc                  
1758:000 | DONE ins | na 16 16 | 00553a | 65 00       |                 adc.d 000000         create new CP
1759:000 | DONE ins | na 16 16 | 00553c | b0 07       |                 bcs 005545           oops, we've wrapped
1760:000 | DONE wsp | na 16 16 |        |             |
1761:000 | DONE ins | na 16 16 | 00553e | a8          |                 tay                  save copy of new CP
1762:000 | DONE wsp | na 16 16 |        |             |
1763:000 | DONE ins | na 16 16 | 00553f | 38          |                 sec                  
1764:000 | DONE ins | na 16 16 | 005540 | e9 ff 4f    |                 sbc.# 004fff         
1765:000 | DONE ins | na 16 16 | 005543 | 30 11       |                 bmi 005556           oops, fall thru if beyond max RAM
1766:000 | DONE wsp | na 16 16 |        |             |
1767:000 | DONE lbl | na 16 16 | 005545 |             | allot_error                          
1768:000 | DONE ins | na 16 16 | 005545 | a9 f1 6f    |                 lda.# 006ff1         
1769:000 | DONE ins | na 16 16 | 005548 | 4c 7a 69    |                 jmp 00697a           
1770:000 | DONE wsp | na 16 16 |        |             |
1771:000 | DONE lbl | na 16 16 | 00554b |             | allot_minus                          
1772:000 | DONE cmt | na 16 16 |        |             |                 ; negative value means we're freeing memory
1773:000 | DONE ins | na 16 16 | 00554b | 38          |                 sec                  
1774:000 | DONE ins | na 16 16 | 00554c | e5 00       |                 sbc.d 000000         
1775:000 | DONE ins | na 16 16 | 00554e | 90 f5       |                 bcc 005545           oops, we've wrapped
1776:000 | DONE wsp | na 16 16 |        |             |
1777:000 | DONE ins | na 16 16 | 005550 | a8          |                 tay                  
1778:000 | DONE wsp | na 16 16 |        |             |
1779:000 | DONE ins | na 16 16 | 005551 | e9 00 03    |                 sbc.# 000300         Carry Flag must still be set
1780:000 | DONE ins | na 16 16 | 005554 | 30 ef       |                 bmi 005545           oops, gone too far back
1781:000 | DONE wsp | na 16 16 |        |             |
1782:000 | DONE cmt | na 16 16 |        |             |                 ; fall through to allot_done
1783:000 | DONE lbl | na 16 16 | 005556 |             | allot_done                           
1784:000 | DONE ins | na 16 16 | 005556 | 84 00       |                 sty.d 000000         new compiler pointer
1785:000 | DONE lbl | na 16 16 | 005558 |             | allot_real_gone                      
1786:000 | DONE ins | na 16 16 | 005558 | b4 00       |                 ldy.dx 00            DROP
1787:000 | DONE ins | na 16 16 | 00555a | e8          |                 inx                  
1788:000 | DONE ins | na 16 16 | 00555b | e8          |                 inx                  
1789:000 | DONE wsp | na 16 16 |        |             |
1790:000 | DONE lbl | na 16 16 | 00555c |             | z_allot                              
1790:001 | DONE ins | na 16 16 | 00555c | 60          |                 rts                  
1791:000 | DONE wsp | na 16 16 |        |             |
1792:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1793:000 | DONE cmt | na 16 16 |        |             | ; AND ( n m -- n ) 6 bytes / X cycles
1794:000 | DONE cmt | na 16 16 |        |             | ; Logical AND
1795:000 | DONE lbl | na 16 16 | 00555d |             | xt_and                               
1796:000 | DONE ins | na 16 16 | 00555d | 98          |                 tya                  
1797:000 | DONE ins | na 16 16 | 00555e | 35 00       |                 and.dx 00            
1798:000 | DONE ins | na 16 16 | 005560 | a8          |                 tay                  
1799:000 | DONE wsp | na 16 16 |        |             |
1800:000 | DONE ins | na 16 16 | 005561 | e8          |                 inx                  NIP
1801:000 | DONE ins | na 16 16 | 005562 | e8          |                 inx                  
1802:000 | DONE wsp | na 16 16 |        |             |
1803:000 | DONE lbl | na 16 16 | 005563 |             | z_and                                
1803:001 | DONE ins | na 16 16 | 005563 | 60          |                 rts                  
1804:000 | DONE wsp | na 16 16 |        |             |
1805:000 | DONE wsp | na 16 16 |        |             |
1806:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1807:000 | DONE cmt | na 16 16 |        |             | ; AT-XY ( nx ny -- ) X bytes / X cycles
1808:000 | DONE cmt | na 16 16 |        |             | ; Move cursor to coordinates given. ESC[<n>;<m>H Do not use U. to print the
1809:000 | DONE cmt | na 16 16 |        |             | ; numbers because the trailing space will not work with xterm (works fine with
1810:000 | DONE cmt | na 16 16 |        |             | ; Mac OS X Terminals, though)
1811:000 | DONE cmt | na 16 16 |        |             | ; TODO doesn't like hex values, need to get rid of byte_to_ascii
1812:000 | DONE cmt | na 16 16 |        |             | ; or call as word with 0 u.r and decimal
1813:000 | DONE lbl | na 16 16 | 005564 |             | xt_at-xy                             
1814:000 | DONE dir | na 16 16 |        |             |         .!a16                        
1815:000 | DONE ins | na 16 16 | 005564 | a9 1b 00    |                 lda.# AscESC         ESC
1816:000 | DONE ins | na 16 16 | 005567 | 20 a1 58    |                 jsr 0058a1           
1817:000 | DONE ins | na 16 16 | 00556a | a9 5b 00    |                 lda.# 5b             [
1818:000 | DONE ins | na 16 16 | 00556d | 20 a1 58    |                 jsr 0058a1           
1819:000 | DONE ins | na 16 16 | 005570 | b5 00       |                 lda.dx 00            x
1820:000 | DONE ins | na 16 16 | 005572 | 20 b2 69    |                 jsr 0069b2           
1821:000 | DONE ins | na 16 16 | 005575 | a9 3b 00    |                 lda.# 3b             semicolon
1822:000 | DONE ins | na 16 16 | 005578 | 20 a1 58    |                 jsr 0058a1           
1823:000 | DONE ins | na 16 16 | 00557b | 98          |                 tya                  y
1824:000 | DONE ins | na 16 16 | 00557c | 20 b2 69    |                 jsr 0069b2           
1825:000 | DONE ins | na 16 16 | 00557f | a9 48 00    |                 lda.# 48             H
1826:000 | DONE ins | na 16 16 | 005582 | 20 a1 58    |                 jsr 0058a1           
1827:000 | DONE wsp | na 16 16 |        |             |
1828:000 | DONE ins | na 16 16 | 005585 | b4 02       |                 ldy.dx 02            
1829:000 | DONE ins | na 16 16 | 005587 | e8          |                 inx                  
1830:000 | DONE ins | na 16 16 | 005588 | e8          |                 inx                  
1831:000 | DONE ins | na 16 16 | 005589 | e8          |                 inx                  
1832:000 | DONE ins | na 16 16 | 00558a | e8          |                 inx                  
1833:000 | DONE wsp | na 16 16 |        |             |
1834:000 | DONE lbl | na 16 16 | 00558b |             | z_at-xy                              
1834:001 | DONE ins | na 16 16 | 00558b | 60          |                 rts                  
1835:000 | DONE wsp | na 16 16 |        |             |
1836:000 | DONE wsp | na 16 16 |        |             |
1837:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1838:000 | DONE cmt | na 16 16 |        |             | ; BASE ( -- addr ) X bytes / X cycles
1839:000 | DONE cmt | na 16 16 |        |             | ; Get the address of where the radix for number conversion is stored
1840:000 | DONE lbl | na 16 16 | 00558c |             | xt_base                              
1841:000 | DONE ins | na 16 16 | 00558c | ca          |                 dex                  
1842:000 | DONE ins | na 16 16 | 00558d | ca          |                 dex                  
1843:000 | DONE ins | na 16 16 | 00558e | 94 00       |                 sty.dx 00            
1844:000 | DONE wsp | na 16 16 |        |             |
1845:000 | DONE ins | na 16 16 | 005590 | a0 16 00    |                 ldy.# 000016         
1846:000 | DONE wsp | na 16 16 |        |             |
1847:000 | DONE lbl | na 16 16 | 005593 |             | z_base                               
1847:001 | DONE ins | na 16 16 | 005593 | 60          |                 rts                  
1848:000 | DONE wsp | na 16 16 |        |             |
1849:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1850:000 | DONE cmt | na 16 16 |        |             | ; BELL ( -- ) X bytes / X cycles
1851:000 | DONE cmt | na 16 16 |        |             | ; Trigger terminal bell on vt100 terminals
1852:000 | DONE lbl | na 16 16 | 005594 |             | xt_bell                              
1853:000 | DONE dir | na 16 16 |        |             |         .!a16                        
1854:000 | DONE ins | na 16 16 | 005594 | a9 07 00    |                 lda.# AscBELL        
1855:000 | DONE ins | na 16 16 | 005597 | 20 a1 58    |                 jsr 0058a1           
1856:000 | DONE wsp | na 16 16 |        |             |
1857:000 | DONE lbl | na 16 16 | 00559a |             | z_bell                               
1857:001 | DONE ins | na 16 16 | 00559a | 60          |                 rts                  
1858:000 | DONE wsp | na 16 16 |        |             |
1859:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1860:000 | DONE cmt | na 16 16 |        |             | ; BEGIN ( -- addr ) 6 bytes / 13 cycles
1861:000 | DONE cmt | na 16 16 |        |             | ; Mark entry point for a loop. This is just an immediate version of here which
1862:000 | DONE cmt | na 16 16 |        |             | ; could just as welle be coded as  : BEGIN HERE ; IMMEDIATE COMPILE-ONLY
1863:000 | DONE cmt | na 16 16 |        |             | ; but we code it here for speed
1864:000 | DONE lbl | na 16 16 | 00559b |             | xt_begin                             
1865:000 | DONE cmt | na 16 16 |        |             |                 ; really just the same code as HERE
1866:000 | DONE ins | na 16 16 | 00559b | ca          |                 dex                  
1867:000 | DONE ins | na 16 16 | 00559c | ca          |                 dex                  
1868:000 | DONE ins | na 16 16 | 00559d | 94 00       |                 sty.dx 00            
1869:000 | DONE wsp | na 16 16 |        |             |
1870:000 | DONE ins | na 16 16 | 00559f | a4 00       |                 ldy.d 000000         
1871:000 | DONE wsp | na 16 16 |        |             |
1872:000 | DONE lbl | na 16 16 | 0055a1 |             | z_begin                              
1872:001 | DONE ins | na 16 16 | 0055a1 | 60          |                 rts                  
1873:000 | DONE wsp | na 16 16 |        |             |
1874:000 | DONE wsp | na 16 16 |        |             |
1875:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1876:000 | DONE cmt | na 16 16 |        |             | ; BL ( -- u ) 7 bytes / 12 cycles
1877:000 | DONE cmt | na 16 16 |        |             | ; Put ASCII char for SPACE on Data Stack
1878:000 | DONE lbl | na 16 16 | 0055a2 |             | xt_bl                                
1879:000 | DONE dir | na 16 16 |        |             |         .!xy16                       
1880:000 | DONE ins | na 16 16 | 0055a2 | ca          |                 dex                  
1881:000 | DONE ins | na 16 16 | 0055a3 | ca          |                 dex                  
1882:000 | DONE ins | na 16 16 | 0055a4 | 94 00       |                 sty.dx 00            
1883:000 | DONE ins | na 16 16 | 0055a6 | a0 20 00    |                 ldy.# AscSP          
1884:000 | DONE wsp | na 16 16 |        |             |
1885:000 | DONE lbl | na 16 16 | 0055a9 |             | z_bl                                 
1885:001 | DONE ins | na 16 16 | 0055a9 | 60          |                 rts                  
1886:000 | DONE wsp | na 16 16 |        |             |
1887:000 | DONE wsp | na 16 16 |        |             |
1888:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1889:000 | DONE cmt | na 16 16 |        |             | ; BOUNDS ( addr u -- addr+u addr ) 9 bytes / X cycles
1890:000 | DONE cmt | na 16 16 |        |             | ; Given a string, return the correct Data Stack parameters for a DO/LOOP loop
1891:000 | DONE cmt | na 16 16 |        |             | ; over its characters. This is realized as OVER + SWAP in Forth, but we do it
1892:000 | DONE cmt | na 16 16 |        |             | ; a lot faster in assembler. Uses tmptos
1893:000 | DONE lbl | na 16 16 | 0055aa |             | xt_bounds                            
1894:000 | DONE dir | na 16 16 |        |             |         .!a16                        
1895:000 | DONE ins | na 16 16 | 0055aa | 84 24       |                 sty.d 000024         
1896:000 | DONE ins | na 16 16 | 0055ac | b4 00       |                 ldy.dx 00            addr now TOS
1897:000 | DONE wsp | na 16 16 |        |             |
1898:000 | DONE ins | na 16 16 | 0055ae | 18          |                 clc                  
1899:000 | DONE ins | na 16 16 | 0055af | 65 24       |                 adc.d 000024         
1900:000 | DONE ins | na 16 16 | 0055b1 | 95 00       |                 sta.dx 00            addr+u now NOS
1901:000 | DONE wsp | na 16 16 |        |             |
1902:000 | DONE lbl | na 16 16 | 0055b3 |             | z_bounds                             
1902:001 | DONE ins | na 16 16 | 0055b3 | 60          |                 rts                  
1903:000 | DONE wsp | na 16 16 |        |             |
1904:000 | DONE wsp | na 16 16 |        |             |
1905:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1906:000 | DONE cmt | na 16 16 |        |             | ; BRANCH ( -- ) X bytes / X cycles
1907:000 | DONE cmt | na 16 16 |        |             | ; Transfer control to given address. This word was adapted from Tali Forth. It
1908:000 | DONE cmt | na 16 16 |        |             | ; uses tmpbranch
1909:000 | DONE lbl | na 16 16 | 0055b4 |             | xt_branch                            
1910:000 | DONE dir | na 16 16 |        |             |         .!a16                        
1911:000 | DONE cmt | na 16 16 |        |             |                 ; encode subroutine branch to runtime portion
1912:000 | DONE ins | na 16 16 | 0055b4 | f4 bb 55    |                 phe.# 0055bb         
1913:000 | DONE ins | na 16 16 | 0055b7 | 20 59 69    |                 jsr 006959           
1914:000 | DONE wsp | na 16 16 |        |             |
1915:000 | DONE lbl | na 16 16 | 0055ba |             | z_branch                             
1915:001 | DONE ins | na 16 16 | 0055ba | 60          |                 rts                  
1916:000 | DONE wsp | na 16 16 |        |             |
1917:000 | DONE lbl | na 16 16 | 0055bb |             | branch_rt                            
1918:000 | DONE cmt | na 16 16 |        |             |                 ; The value on the Return Stack determines where we go to
1919:000 | DONE ins | na 16 16 | 0055bb | 68          |                 pla                  
1920:000 | DONE ins | na 16 16 | 0055bc | 85 1a       |                 sta.d 00001a         
1921:000 | DONE wsp | na 16 16 |        |             |
1922:000 | DONE ins | na 16 16 | 0055be | 5a          |                 phy                  avoid using temp variables
1923:000 | DONE ins | na 16 16 | 0055bf | a0 01 00    |                 ldy.# 0001           
1924:000 | DONE ins | na 16 16 | 0055c2 | b1 1a       |                 lda.diy 00001a       LDA (TMPBRANCH),Y
1925:000 | DONE ins | na 16 16 | 0055c4 | 7a          |                 ply                  
1926:000 | DONE wsp | na 16 16 |        |             |
1927:000 | DONE ins | na 16 16 | 0055c5 | 3a          |                 dec.a                
1928:000 | DONE ins | na 16 16 | 0055c6 | 48          |                 pha                  put target address back on Return Stack
1929:000 | DONE wsp | na 16 16 |        |             |
1930:000 | DONE ins | na 16 16 | 0055c7 | 60          |                 rts                  
1931:000 | DONE wsp | na 16 16 |        |             |
1932:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1933:000 | DONE cmt | na 16 16 |        |             | ; BYE ( -- ) 2 bytes / 7-8 cycles
1934:000 | DONE cmt | na 16 16 |        |             | ; Leave Liara Forth, returning to Mensch Monitor
1935:000 | DONE lbl | na 16 16 | 0055c8 |             | xt_bye                               
1936:000 | DONE ins | na 16 16 | 0055c8 | 78          |                 sei                  
1937:000 | DONE ins | na 16 16 | 0055c9 | d8          |                 cld                  
1938:000 | DONE ins | na 16 16 | 0055ca | 38          |                 sec                  
1938:001 | DONE ins | na 16 16 | 0055cb | fb          |                 xce                  
1938:002 | DONE ctl | em  8  8 |        |             |         .!emulated
1938:003 | DONE ctl | em  8  8 |        |             |         .!a8
1938:004 | DONE ctl | em  8  8 |        |             |         .!xy8
1939:000 | DONE ins | em  8  8 | 0055cc | 6c fc ff    |                 jmp.i 0fffc          
1940:000 | DONE wsp | em  8  8 |        |             |
1941:000 | DONE lbl | em  8  8 | 0055cf |             | z_bye                                ; never reached
1942:000 | DONE wsp | em  8  8 |        |             |
1943:000 | DONE wsp | em  8  8 |        |             |
1944:000 | DONE cmt | em  8  8 |        |             | ; -------------------------------------------------------------------
1945:000 | DONE cmt | em  8  8 |        |             | ; C, "C-COMMA" ( char -- ) 13 bytes / 28 cycles
1946:000 | DONE cmt | em  8  8 |        |             | ; Store one character in the Dictionary
1947:000 | DONE lbl | em  8  8 | 0055cf |             | xt_c-comma                           
1948:000 | DONE ins | em  8  8 | 0055cf | 98          |                 tya                  
1949:000 | DONE ins | em  8  8 | 0055d0 | e2 20       |                 sep 20               
1949:001 | DONE ctl | em  8  8 |        |             |         .!a8
1950:000 | DONE ins | em  8  8 | 0055d2 | 92 00       |                 sta.di 000000        STA (CP)
1951:000 | DONE ins | em  8  8 | 0055d4 | c2 20       |                 rep 20               
1951:001 | DONE ctl | em 16  8 |        |             |         .!a16
1952:000 | DONE ins | em 16  8 | 0055d6 | e6 00       |                 inc.d 000000         quick version of 1 ALLOT
1953:000 | DONE wsp | em 16  8 |        |             |
1954:000 | DONE ins | em 16  8 | 0055d8 | b4 00       |                 ldy.dx 00            
1955:000 | DONE ins | em 16  8 | 0055da | e8          |                 inx                  
1956:000 | DONE ins | em 16  8 | 0055db | e8          |                 inx                  
1957:000 | DONE wsp | em 16  8 |        |             |
1958:000 | DONE lbl | em 16  8 | 0055dc |             | z_c-comma                            
1958:001 | DONE ins | em 16  8 | 0055dc | 60          |                 rts                  
1959:000 | DONE wsp | em 16  8 |        |             |
1960:000 | DONE wsp | em 16  8 |        |             |
1961:000 | DONE cmt | em 16  8 |        |             | ; -------------------------------------------------------------------
1962:000 | DONE cmt | em 16  8 |        |             | ; C@ "C-FETCH" ( addr -- n ) 11 bytes / 16 cycles
1963:000 | DONE cmt | em 16  8 |        |             | ; Get a single byte from the given address
1964:000 | DONE lbl | em 16  8 | 0055dd |             | xt_c-fetch                           
1965:000 | DONE ins | em 16  8 | 0055dd | e2 20       |                 sep 20               
1965:001 | DONE ctl | em  8  8 |        |             |         .!a8
1966:000 | DONE ins | em  8  8 | 0055df | b9 00 00    |                 lda.y 0000           
1967:000 | DONE ins | em  8  8 | 0055e2 | c2 20       |                 rep 20               
1967:001 | DONE ctl | em 16  8 |        |             |         .!a16
1968:000 | DONE ins | em 16  8 | 0055e4 | 29 ff 00    |                 and.# 00ff           
1969:000 | DONE ins | em 16  8 | 0055e7 | a8          |                 tay                  
1970:000 | DONE wsp | em 16  8 |        |             |
1971:000 | DONE lbl | em 16  8 | 0055e8 |             | z_c-fetch                            
1971:001 | DONE ins | em 16  8 | 0055e8 | 60          |                 rts                  
1972:000 | DONE wsp | em 16  8 |        |             |
1973:000 | DONE wsp | em 16  8 |        |             |
1974:000 | DONE cmt | em 16  8 |        |             | ; -------------------------------------------------------------------
1975:000 | DONE cmt | em 16  8 |        |             | ; C! "C-STORE" ( n addr -- ) 15 bytes / 29 cycles
1976:000 | DONE cmt | em 16  8 |        |             | ; Store LSB of NOS at location given as TOS
1977:000 | DONE lbl | em 16  8 | 0055e9 |             | xt_c-store                           
1978:000 | DONE ins | em 16  8 | 0055e9 | b5 00       |                 lda.dx 00            
1979:000 | DONE ins | em 16  8 | 0055eb | e2 20       |                 sep 20               
1979:001 | DONE ctl | em  8  8 |        |             |         .!a8
1980:000 | DONE ins | em  8  8 | 0055ed | 99 00 00    |                 sta.y 0000           
1981:000 | DONE ins | em  8  8 | 0055f0 | c2 20       |                 rep 20               
1981:001 | DONE ctl | em 16  8 |        |             |         .!a16
1982:000 | DONE ins | em 16  8 | 0055f2 | b4 02       |                 ldy.dx 02            
1983:000 | DONE ins | em 16  8 | 0055f4 | e8          |                 inx                  
1984:000 | DONE ins | em 16  8 | 0055f5 | e8          |                 inx                  
1985:000 | DONE ins | em 16  8 | 0055f6 | e8          |                 inx                  
1986:000 | DONE ins | em 16  8 | 0055f7 | e8          |                 inx                  
1987:000 | DONE wsp | em 16  8 |        |             |
1988:000 | DONE lbl | em 16  8 | 0055f8 |             | z_c-store                            
1988:001 | DONE ins | em 16  8 | 0055f8 | 60          |                 rts                  
1989:000 | DONE wsp | em 16  8 |        |             |
1990:000 | DONE wsp | em 16  8 |        |             |
1991:000 | DONE cmt | em 16  8 |        |             | ; -------------------------------------------------------------------
1992:000 | DONE cmt | em 16  8 |        |             | ; CELL+ ( u -- u+2 ) X bytes / X cycles
1993:000 | DONE cmt | em 16  8 |        |             | ; Add the size of one cell to the value on top of the stack. Since this is
1994:000 | DONE cmt | em 16  8 |        |             | ; a 16-bit cell size, we add two
1995:000 | DONE lbl | em 16  8 | 0055f9 |             | xt_cellplus                          
1996:000 | DONE ins | em 16  8 | 0055f9 | c8          |                 iny                  
1997:000 | DONE ins | em 16  8 | 0055fa | c8          |                 iny                  
1998:000 | DONE wsp | em 16  8 |        |             |
1999:000 | DONE lbl | em 16  8 | 0055fb |             | z_cellplus                           
1999:001 | DONE ins | em 16  8 | 0055fb | 60          |                 rts                  
2000:000 | DONE wsp | em 16  8 |        |             |
2001:000 | DONE wsp | em 16  8 |        |             |
2002:000 | DONE cmt | em 16  8 |        |             | ; -------------------------------------------------------------------
2003:000 | DONE cmt | em 16  8 |        |             | ; CELLS ( n -- n ) X bytes / X cycles
2004:000 | DONE cmt | em 16  8 |        |             | ; Given a number of cells, return the number of bytes that they will require.
2005:000 | DONE cmt | em 16  8 |        |             | ; This is 16 bit cell Forth, so the value returned by this word is the same as
2006:000 | DONE cmt | em 16  8 |        |             | ; returned by 2*, see there.
2007:000 | DONE wsp | em 16  8 |        |             |
2008:000 | DONE cmt | em 16  8 |        |             | ; -------------------------------------------------------------------
2009:000 | DONE cmt | em 16  8 |        |             | ; CHAR ( "c" -- u ) 23 bytes / X cycles
2010:000 | DONE cmt | em 16  8 |        |             | ; Convert a character to its ASCII value
2011:000 | DONE lbl | em 16  8 | 0055fc |             | xt_char                              
2012:000 | DONE dir | em 16  8 |        |             |         .!a16                        
2013:000 | DONE ins | em 16  8 | 0055fc | 20 fb 5b    |                 jsr 005bfb           ( -- addr u )
2014:000 | DONE wsp | em 16  8 |        |             |
2015:000 | DONE cmt | em 16  8 |        |             |                 ; if we got back a zero, we have a problem
2016:000 | DONE ins | em 16  8 | 0055ff | 98          |                 tya                  force flag check
2017:000 | DONE ins | em 16  8 | 005600 | d0 06       |                 bne 005608           
2018:000 | DONE wsp | em 16  8 |        |             |
2019:000 | DONE ins | em 16  8 | 005602 | a9 76 70    |                 lda.# 007076         
2020:000 | DONE ins | em 16  8 | 005605 | 4c 7a 69    |                 jmp 00697a           
2021:000 | DONE wsp | em 16  8 |        |             |
2022:000 | DONE lbl | em 16  8 | 005608 |             | char_got_char                        
2023:000 | DONE ins | em 16  8 | 005608 | b4 00       |                 ldy.dx 00            get addr from NOS
2024:000 | DONE ins | em 16  8 | 00560a | b9 00 00    |                 lda.y 0000           LDA 0000,Y - could be C@
2025:000 | DONE ins | em 16  8 | 00560d | 29 ff 00    |                 and.# 00ff           
2026:000 | DONE ins | em 16  8 | 005610 | a8          |                 tay                  
2027:000 | DONE wsp | em 16  8 |        |             |
2028:000 | DONE ins | em 16  8 | 005611 | e8          |                 inx                  
2029:000 | DONE ins | em 16  8 | 005612 | e8          |                 inx                  
2030:000 | DONE wsp | em 16  8 |        |             |
2031:000 | DONE lbl | em 16  8 | 005613 |             | z_char                               
2031:001 | DONE ins | em 16  8 | 005613 | 60          |                 rts                  
2032:000 | DONE wsp | em 16  8 |        |             |
2033:000 | DONE wsp | em 16  8 |        |             |
2034:000 | DONE cmt | em 16  8 |        |             | ; -------------------------------------------------------------------
2035:000 | DONE cmt | em 16  8 |        |             | ; CHARPLUS ( u -- u+1 ) X bytes / X cycles
2036:000 | DONE cmt | em 16  8 |        |             | ; Adds the size of a character to the value on top of the stack. Since our
2037:000 | DONE cmt | em 16  8 |        |             | ; character size is one, this is the same code as 1+, see there
2038:000 | DONE wsp | em 16  8 |        |             |
2039:000 | DONE wsp | em 16  8 |        |             |
2040:000 | DONE cmt | em 16  8 |        |             | ; -------------------------------------------------------------------
2041:000 | DONE cmt | em 16  8 |        |             | ; CHARS ( u -- u ) X bytes / X cycles
2042:000 | DONE cmt | em 16  8 |        |             | ; Return the size in bytes of the number of characters on the top of the stack.
2043:000 | DONE cmt | em 16  8 |        |             | ; In this case, does nothing
2044:000 | DONE lbl | em 16  8 | 005614 |             | xt_chars                             
2045:000 | DONE wsp | em 16  8 |        |             |
2046:000 | DONE ins | em 16  8 | 005614 | ea          |                 nop                  will be removed during native compile
2047:000 | DONE lbl | em 16  8 | 005615 |             | z_chars                              
2047:001 | DONE ins | em 16  8 | 005615 | 60          |                 rts                  
2048:000 | DONE wsp | em 16  8 |        |             |
2049:000 | DONE cmt | em 16  8 |        |             | ; -------------------------------------------------------------------
2050:000 | DONE cmt | em 16  8 |        |             | ; CMOVE ( addr1 addr2 u -- ) X bytes / X cycles
2051:000 | DONE cmt | em 16  8 |        |             | ; Move characters from a lower to a higher address. Because of the danger of
2052:000 | DONE cmt | em 16  8 |        |             | ; overlap, we must start at the end of the source string (addr1+u) and copy
2053:000 | DONE cmt | em 16  8 |        |             | ; byte-by-byte to the end of the destination address (addr2+u). This is what the
2054:000 | DONE cmt | em 16  8 |        |             | ; MVP instruction is for. Use MOVE if you are not sure what to do.
2055:000 | DONE cmt | em 16  8 |        |             | ;       =====* source
2056:000 | DONE cmt | em 16  8 |        |             | ;          ====* destination
2057:000 | DONE lbl | em 16  8 | 005616 |             | xt_cmove                             
2058:000 | DONE cmt | em 16  8 |        |             |                 ; We start at the end of the blocks, so we have to increase both
2059:000 | DONE cmt | em 16  8 |        |             |                 ; addr1 and addr2 by u
2060:000 | DONE ins | em 16  8 | 005616 | 98          |                 tya                  
2061:000 | DONE ins | em 16  8 | 005617 | 18          |                 clc                  
2062:000 | DONE ins | em 16  8 | 005618 | 75 02       |                 adc.dx 02            source, goes in X
2063:000 | DONE ins | em 16  8 | 00561a | 3a          |                 dec.a                convert length to index
2064:000 | DONE ins | em 16  8 | 00561b | 95 02       |                 sta.dx 02            
2065:000 | DONE wsp | em 16  8 |        |             |
2066:000 | DONE ins | em 16  8 | 00561d | 98          |                 tya                  
2067:000 | DONE ins | em 16  8 | 00561e | 18          |                 clc                  
2068:000 | DONE ins | em 16  8 | 00561f | 75 00       |                 adc.dx 00            destination, goes in Y
2069:000 | DONE ins | em 16  8 | 005621 | 3a          |                 dec.a                convert length to index
2070:000 | DONE wsp | em 16  8 |        |             |
2071:000 | DONE ins | em 16  8 | 005622 | 86 22       |                 stx.d 000022         keep DSP safe
2072:000 | DONE wsp | em 16  8 |        |             |
2073:000 | DONE ins | em 16  8 | 005624 | 88          |                 dey                  
2074:000 | DONE ins | em 16  8 | 005625 | 5a          |                 phy                  save number of bytes to transfer
2075:000 | DONE wsp | em 16  8 |        |             |
2076:000 | DONE ins | em 16  8 | 005626 | a8          |                 tay                  destination now in Y
2077:000 | DONE wsp | em 16  8 |        |             |
2078:000 | DONE ins | em 16  8 | 005627 | b5 02       |                 lda.dx 02            get source address
2079:000 | DONE ins | em 16  8 | 005629 | aa          |                 tax                  
2080:000 | DONE wsp | em 16  8 |        |             |
2081:000 | DONE ins | em 16  8 | 00562a | 68          |                 pla                  retrieve number of bytes to transfer
2082:000 | DONE ins | em 16  8 | 00562b | 44 00 00    |                 mvp 0                
2082:001 | DONE ctl | em 16  8 |        |             |            
2083:000 | DONE wsp | em 16  8 |        |             |
2084:000 | DONE ins | em 16  8 | 00562e | a6 22       |                 ldx.d 000022         
2085:000 | DONE ins | em 16  8 | 005630 | b4 04       |                 ldy.dx 04            
2086:000 | DONE wsp | em 16  8 |        |             |
2087:000 | DONE ins | em 16  8 | 005632 | 8a          |                 txa                  It's worth addition for three cells dropped
2088:000 | DONE ins | em 16  8 | 005633 | 18          |                 clc                  
2089:000 | DONE ins | em 16  8 | 005634 | 69 06 00    |                 adc.# 0006           
2090:000 | DONE ins | em 16  8 | 005637 | aa          |                 tax                  
2091:000 | DONE wsp | em 16  8 |        |             |
2092:000 | DONE lbl | em 16  8 | 005638 |             | z_cmove                              
2092:001 | DONE ins | em 16  8 | 005638 | 60          |                 rts                  
2093:000 | DONE wsp | em 16  8 |        |             |
2094:000 | DONE cmt | em 16  8 |        |             | ; -------------------------------------------------------------------
2095:000 | DONE cmt | em 16  8 |        |             | ; CMOVE> ( addr1 addr 2 u -- ) X bytes / X cycles
2096:000 | DONE cmt | em 16  8 |        |             | ; Move characters from a higher to a lower address. Because of the danger of
2097:000 | DONE cmt | em 16  8 |        |             | ; overlap, we must start at the beginning of the source (addr1) to copy it
2098:000 | DONE cmt | em 16  8 |        |             | ; byte-by-byte to the beginning of the destination (addr2). This is what the MVN
2099:000 | DONE cmt | em 16  8 |        |             | ; instruction is for. Use MOVE if you are not sure what to do.
2100:000 | DONE cmt | em 16  8 |        |             | ;          *==== source
2101:000 | DONE cmt | em 16  8 |        |             | ;       *===== destination
2102:000 | DONE lbl | em 16  8 | 005639 |             | xt_cmoveup                           
2103:000 | DONE ins | em 16  8 | 005639 | 86 22       |                 stx.d 000022         keep DSP safe
2104:000 | DONE wsp | em 16  8 |        |             |
2105:000 | DONE ins | em 16  8 | 00563b | 88          |                 dey                  
2106:000 | DONE ins | em 16  8 | 00563c | 5a          |                 phy                  save number of bytes to transfer
2107:000 | DONE wsp | em 16  8 |        |             |
2108:000 | DONE ins | em 16  8 | 00563d | b5 00       |                 lda.dx 00            get destination address
2109:000 | DONE ins | em 16  8 | 00563f | a8          |                 tay                  
2110:000 | DONE wsp | em 16  8 |        |             |
2111:000 | DONE ins | em 16  8 | 005640 | b5 02       |                 lda.dx 02            get source address
2112:000 | DONE ins | em 16  8 | 005642 | aa          |                 tax                  
2113:000 | DONE wsp | em 16  8 |        |             |
2114:000 | DONE ins | em 16  8 | 005643 | 68          |                 pla                  retrieve number of bytes to transfer
2115:000 | DONE ins | em 16  8 | 005644 | 54 00 00    |                 mvn 0                
2115:001 | DONE ctl | em 16  8 |        |             |            
2116:000 | DONE wsp | em 16  8 |        |             |
2117:000 | DONE ins | em 16  8 | 005647 | a6 22       |                 ldx.d 000022         
2118:000 | DONE ins | em 16  8 | 005649 | b4 04       |                 ldy.dx 04            
2119:000 | DONE wsp | em 16  8 |        |             |
2120:000 | DONE ins | em 16  8 | 00564b | 8a          |                 txa                  It's worth addition for three cells dropped
2121:000 | DONE ins | em 16  8 | 00564c | 18          |                 clc                  
2122:000 | DONE ins | em 16  8 | 00564d | 69 06 00    |                 adc.# 0006           
2123:000 | DONE ins | em 16  8 | 005650 | aa          |                 tax                  
2124:000 | DONE wsp | em 16  8 |        |             |
2125:000 | DONE lbl | em 16  8 | 005651 |             | z_cmoveup                            
2125:001 | DONE ins | em 16  8 | 005651 | 60          |                 rts                  
2126:000 | DONE wsp | em 16  8 |        |             |
2127:000 | DONE wsp | em 16  8 |        |             |
2128:000 | DONE cmt | em 16  8 |        |             | ; -------------------------------------------------------------------
2129:000 | DONE cmt | em 16  8 |        |             | ; COMPILE-ONLY ( -- ) 8 bytes / X cycles
2130:000 | DONE cmt | em 16  8 |        |             | ; Mark the most recently defined word as COMPILE-ONLY. The alternative (and
2131:000 | DONE cmt | em 16  8 |        |             | ; traditional) way to do this is to include a word ?COMPILE that makes sure
2132:000 | DONE cmt | em 16  8 |        |             | ; we're in compile mode
2133:000 | DONE lbl | em 16  8 | 005652 |             | xt_compile-only                      
2134:000 | DONE dir | em 16  8 |        |             |         .!a16                        
2135:000 | DONE ins | em 16  8 | 005652 | a9 04 00    |                 lda.# CO             
2136:000 | DONE ins | em 16  8 | 005655 | eb          |                 xba                  flags are MSB
2137:000 | DONE ins | em 16  8 | 005656 | 12 02       |                 ora.di 000002        ORA (DP)
2138:000 | DONE ins | em 16  8 | 005658 | 92 02       |                 sta.di 000002        
2139:000 | DONE wsp | em 16  8 |        |             |
2140:000 | DONE lbl | em 16  8 | 00565a |             | z_compile-only                       
2140:001 | DONE ins | em 16  8 | 00565a | 60          |                 rts                  
2141:000 | DONE wsp | em 16  8 |        |             |
2142:000 | DONE wsp | em 16  8 |        |             |
2143:000 | DONE cmt | em 16  8 |        |             | ; -------------------------------------------------------------------
2144:000 | DONE cmt | em 16  8 |        |             | ; COMPILE, ( xt -- ) X bytes / X cycles
2145:000 | DONE wsp | em 16  8 |        |             |
2146:000 | DONE cmt | em 16  8 |        |             | ; Compile a given xt in the current word definition. It is an error if we are
2147:000 | DONE cmt | em 16  8 |        |             | ; not in the compile state. Because we are using subroutine threading, we can't
2148:000 | DONE cmt | em 16  8 |        |             | ; use , (COMMA) to compile new words the traditional way. We use the NC (Native
2149:000 | DONE cmt | em 16  8 |        |             | ; Compile) flag to decide if native compilation is allowed. If yes, we use the
2150:000 | DONE cmt | em 16  8 |        |             | ; value NC_LIMIT (in definitions.tasm) to decide if the code is too large to be
2151:000 | DONE cmt | em 16  8 |        |             | ; natively coded: If the size is larger than NC_LIMIT, we silently use
2152:000 | DONE cmt | em 16  8 |        |             | ; subroutine coding. If the FN (Force Native) flag is set, the word is always
2153:000 | DONE cmt | em 16  8 |        |             | ; natively compiled
2154:000 | DONE cmt | em 16  8 |        |             | ; TODO currently just compiles subroutine jumps
2155:000 | DONE lbl | em 16  8 | 00565b |             | xt_compilecomma                      
2156:000 | DONE dir | em 16  8 |        |             |         .!a16                        
2157:000 | DONE cmt | em 16  8 |        |             |                 ; First, see if this is Force Native compile word by checking
2158:000 | DONE cmt | em 16  8 |        |             |                 ; the FN flag. We need the nt for this
2159:000 | DONE ins | em 16  8 | 00565b | 5a          |                 phy                  save copy of xt
2160:000 | DONE wsp | em 16  8 |        |             |
2161:000 | DONE ins | em 16  8 | 00565c | 20 ff 59    |                 jsr 0059ff           ( xt -- nt )
2162:000 | DONE wsp | em 16  8 |        |             |
2163:000 | DONE ins | em 16  8 | 00565f | b9 00 00    |                 lda.y 0000           Get content of nt
2164:000 | DONE ins | em 16  8 | 005662 | eb          |                 xba                  flags are MSB
2165:000 | DONE ins | em 16  8 | 005663 | 29 08 00    |                 and.# FN             mask everything but Compile Only bit
2166:000 | DONE ins | em 16  8 | 005666 | d0 12       |                 bne 00567a           
2167:000 | DONE wsp | em 16  8 |        |             |
2168:000 | DONE cmt | em 16  8 |        |             |                 ; Now see if native compile is even allowed by checking the NC
2169:000 | DONE cmt | em 16  8 |        |             |                 ; flag
2170:000 | DONE ins | em 16  8 | 005668 | b9 00 00    |                 lda.y 0000           
2171:000 | DONE ins | em 16  8 | 00566b | eb          |                 xba                  
2172:000 | DONE ins | em 16  8 | 00566c | 29 01 00    |                 and.# NC             
2173:000 | DONE ins | em 16  8 | 00566f | f0 62       |                 beq 0056d3           
2174:000 | DONE wsp | em 16  8 |        |             |
2175:000 | DONE cmt | em 16  8 |        |             |                 ; Native compile is legal, but we have to see what limit the
2176:000 | DONE cmt | em 16  8 |        |             |                 ; user set. WORDSIZE takes nt
2177:000 | DONE ins | em 16  8 | 005671 | 20 f0 5f    |                 jsr 005ff0           ( nt -- u )
2178:000 | DONE ins | em 16  8 | 005674 | 98          |                 tya                  
2179:000 | DONE ins | em 16  8 | 005675 | 18          |                 clc                  
2180:000 | DONE ins | em 16  8 | 005676 | c5 26       |                 cmp.d 000026         
2181:000 | DONE ins | em 16  8 | 005678 | b0 59       |                 bcs 0056d3           if too large, compile as a jump
2182:000 | DONE wsp | em 16  8 |        |             |
2183:000 | DONE lbl | em 16  8 | 00567a |             | compile_as_code                      
2184:000 | DONE cmt | em 16  8 |        |             |                 ; We arrive here with the length of the word TOS ( u ) and xt on
2185:000 | DONE cmt | em 16  8 |        |             |                 ; top of the return stack. MOVE will need ( xt cp u ) on the
2186:000 | DONE cmt | em 16  8 |        |             |                 ; Data Stack
2187:000 | DONE ins | em 16  8 | 00567a | ca          |                 dex                  
2188:000 | DONE ins | em 16  8 | 00567b | ca          |                 dex                  
2189:000 | DONE ins | em 16  8 | 00567c | 68          |                 pla                  
2190:000 | DONE ins | em 16  8 | 00567d | 95 00       |                 sta.dx 00            ( xt u )
2191:000 | DONE wsp | em 16  8 |        |             |
2192:000 | DONE ins | em 16  8 | 00567f | ca          |                 dex                  
2193:000 | DONE ins | em 16  8 | 005680 | ca          |                 dex                  
2194:000 | DONE ins | em 16  8 | 005681 | a5 00       |                 lda.d 000000         
2195:000 | DONE ins | em 16  8 | 005683 | 95 00       |                 sta.dx 00            ( xt cp u )
2196:000 | DONE wsp | em 16  8 |        |             |
2197:000 | DONE wsp | em 16  8 |        |             |
2198:000 | DONE cmt | em 16  8 |        |             |                 ; --- SPECIAL CASES ---
2199:000 | DONE wsp | em 16  8 |        |             |
2200:000 | DONE cmt | em 16  8 |        |             |                 ; 1. Don't compile NOP instructions: Length of code is 1, and
2201:000 | DONE cmt | em 16  8 |        |             |                 ; the instruction is $EA
2202:000 | DONE ins | em 16  8 | 005685 | 98          |                 tya                  
2203:000 | DONE ins | em 16  8 | 005686 | 3a          |                 dec.a                
2204:000 | DONE ins | em 16  8 | 005687 | d0 14       |                 bne 00569d           
2205:000 | DONE wsp | em 16  8 |        |             |
2206:000 | DONE ins | em 16  8 | 005689 | a1 02       |                 lda.dxi 02           
2207:000 | DONE ins | em 16  8 | 00568b | 29 ff 00    |                 and.# 00ff           
2208:000 | DONE ins | em 16  8 | 00568e | c9 ea 00    |                 cmp.# 00ea           opcode for NOP
2209:000 | DONE ins | em 16  8 | 005691 | d0 0a       |                 bne 00569d           
2210:000 | DONE wsp | em 16  8 |        |             |
2211:000 | DONE cmt | em 16  8 |        |             |                 ; It's a single NOP. Clear the data stack and return
2212:000 | DONE ins | em 16  8 | 005693 | b4 04       |                 ldy.dx 04            
2213:000 | DONE ins | em 16  8 | 005695 | 8a          |                 txa                  
2214:000 | DONE ins | em 16  8 | 005696 | 18          |                 clc                  
2215:000 | DONE ins | em 16  8 | 005697 | 69 06 00    |                 adc.# 0006           
2216:000 | DONE ins | em 16  8 | 00569a | aa          |                 tax                  
2217:000 | DONE wsp | em 16  8 |        |             |
2218:000 | DONE ins | em 16  8 | 00569b | 80 4c       |                 bra 0056e9           
2219:000 | DONE wsp | em 16  8 |        |             |
2220:000 | DONE lbl | em 16  8 | 00569d |             | compile_not_nop                      
2221:000 | DONE wsp | em 16  8 |        |             |
2222:000 | DONE cmt | em 16  8 |        |             |                 ; 2. Strip PLA/PHA off >R and R>
2223:000 | DONE ins | em 16  8 | 00569d | b5 02       |                 lda.dx 02            get xt
2224:000 | DONE ins | em 16  8 | 00569f | c9 c0 51    |                 cmp.# 0051c0         
2225:000 | DONE ins | em 16  8 | 0056a2 | f0 11       |                 beq 0056b5           
2226:000 | DONE ins | em 16  8 | 0056a4 | c9 bd 5c    |                 cmp.# 005cbd         
2227:000 | DONE ins | em 16  8 | 0056a7 | f0 0c       |                 beq 0056b5           
2228:000 | DONE wsp | em 16  8 |        |             |
2229:000 | DONE cmt | em 16  8 |        |             |                 ; 3. Strip off stuff from 2>R and 2R>
2230:000 | DONE ins | em 16  8 | 0056a9 | c9 d6 53    |                 cmp.# 0053d6         
2231:000 | DONE ins | em 16  8 | 0056ac | f0 0d       |                 beq 0056bb           
2232:000 | DONE ins | em 16  8 | 0056ae | c9 06 54    |                 cmp.# 005406         
2233:000 | DONE ins | em 16  8 | 0056b1 | f0 08       |                 beq 0056bb           
2234:000 | DONE wsp | em 16  8 |        |             |
2235:000 | DONE ins | em 16  8 | 0056b3 | 80 12       |                 bra 0056c7           not a special case
2236:000 | DONE wsp | em 16  8 |        |             |
2237:000 | DONE lbl | em 16  8 | 0056b5 |             | compile_r                            
2238:000 | DONE cmt | em 16  8 |        |             |                 ; We have either >R or R>. To simplify, drop the first and last
2239:000 | DONE cmt | em 16  8 |        |             |                 ; instruction (one byte).
2240:000 | DONE ins | em 16  8 | 0056b5 | f6 02       |                 inc.dx 02            start one byte later
2241:000 | DONE ins | em 16  8 | 0056b7 | 88          |                 dey                  transfer two bytes less
2242:000 | DONE ins | em 16  8 | 0056b8 | 88          |                 dey                  
2243:000 | DONE ins | em 16  8 | 0056b9 | 80 0c       |                 bra 0056c7           
2244:000 | DONE wsp | em 16  8 |        |             |
2245:000 | DONE lbl | em 16  8 | 0056bb |             | compile_2r                           
2246:000 | DONE cmt | em 16  8 |        |             |                 ; We have either 2>R or 2R>. To simplify, drop the first and
2247:000 | DONE cmt | em 16  8 |        |             |                 ; last three bytes
2248:000 | DONE ins | em 16  8 | 0056bb | f6 02       |                 inc.dx 02            
2249:000 | DONE ins | em 16  8 | 0056bd | f6 02       |                 inc.dx 02            
2250:000 | DONE ins | em 16  8 | 0056bf | f6 02       |                 inc.dx 02            
2251:000 | DONE ins | em 16  8 | 0056c1 | 98          |                 tya                  
2252:000 | DONE ins | em 16  8 | 0056c2 | 38          |                 sec                  
2253:000 | DONE ins | em 16  8 | 0056c3 | e9 06 00    |                 sbc.# 0006           
2254:000 | DONE ins | em 16  8 | 0056c6 | a8          |                 tay                  fall through to compile_move
2255:000 | DONE wsp | em 16  8 |        |             |
2256:000 | DONE lbl | em 16  8 | 0056c7 |             | compile_move                         
2257:000 | DONE cmt | em 16  8 |        |             |                 ; Enough of this, compile the word already
2258:000 | DONE wsp | em 16  8 |        |             |
2259:000 | DONE ins | em 16  8 | 0056c7 | 5a          |                 phy                  we need a copy of length for the CP
2260:000 | DONE wsp | em 16  8 |        |             |
2261:000 | DONE ins | em 16  8 | 0056c8 | 20 ff 5a    |                 jsr 005aff           ( xt cp u -- )
2262:000 | DONE wsp | em 16  8 |        |             |
2263:000 | DONE ins | em 16  8 | 0056cb | 68          |                 pla                  
2264:000 | DONE ins | em 16  8 | 0056cc | 18          |                 clc                  update CP
2265:000 | DONE ins | em 16  8 | 0056cd | 65 00       |                 adc.d 000000         
2266:000 | DONE ins | em 16  8 | 0056cf | 85 00       |                 sta.d 000000         
2267:000 | DONE wsp | em 16  8 |        |             |
2268:000 | DONE ins | em 16  8 | 0056d1 | 80 16       |                 bra 0056e9           
2269:000 | DONE wsp | em 16  8 |        |             |
2270:000 | DONE lbl | em 16  8 | 0056d3 |             | compile_as_jump                      
2271:000 | DONE cmt | em 16  8 |        |             |                 ; Compile xt as a subroutine jump.
2272:000 | DONE ins | em 16  8 | 0056d3 | 7a          |                 ply                  get xt back
2273:000 | DONE ins | em 16  8 | 0056d4 | e2 20       |                 sep 20               
2273:001 | DONE ctl | em  8  8 |        |             |         .!a8
2274:000 | DONE ins | em  8  8 | 0056d6 | a9 20       |                 lda.# 20             opcode for JSR
2275:000 | DONE ins | em  8  8 | 0056d8 | 92 00       |                 sta.di 000000        STA (CP)
2276:000 | DONE ins | em  8  8 | 0056da | c2 20       |                 rep 20               
2276:001 | DONE ctl | em 16  8 |        |             |         .!a16
2277:000 | DONE ins | em 16  8 | 0056dc | e6 00       |                 inc.d 000000         
2278:000 | DONE wsp | em 16  8 |        |             |
2279:000 | DONE cmt | em 16  8 |        |             |                 ; There is no "sty.di" instruction, so we have to do this the
2280:000 | DONE cmt | em 16  8 |        |             |                 ; hard way
2281:000 | DONE ins | em 16  8 | 0056de | 98          |                 tya                  
2282:000 | DONE ins | em 16  8 | 0056df | 92 00       |                 sta.di 000000        
2283:000 | DONE ins | em 16  8 | 0056e1 | e6 00       |                 inc.d 000000         
2284:000 | DONE ins | em 16  8 | 0056e3 | e6 00       |                 inc.d 000000         
2285:000 | DONE wsp | em 16  8 |        |             |
2286:000 | DONE ins | em 16  8 | 0056e5 | b4 00       |                 ldy.dx 00            
2287:000 | DONE ins | em 16  8 | 0056e7 | e8          |                 inx                  
2288:000 | DONE ins | em 16  8 | 0056e8 | e8          |                 inx                  
2289:000 | DONE wsp | em 16  8 |        |             |
2290:000 | DONE lbl | em 16  8 | 0056e9 |             | z_compilecomma                       
2290:001 | DONE ins | em 16  8 | 0056e9 | 60          |                 rts                  
2291:000 | DONE wsp | em 16  8 |        |             |
2292:000 | DONE wsp | em 16  8 |        |             |
2293:000 | DONE cmt | em 16  8 |        |             | ; -------------------------------------------------------------------
2294:000 | DONE cmt | em 16  8 |        |             | ; CONSTANT ( "name" n -- ) X bytes / X cycles
2295:000 | DONE cmt | em 16  8 |        |             | ; Associate a fixed value with a word. This could be realized as
2296:000 | DONE cmt | em 16  8 |        |             | ; CREATE , DOES> @  as well. We do more in assembler but let CREATE do the heavy
2297:000 | DONE cmt | em 16  8 |        |             | ; lifting.
2298:000 | DONE cmt | em 16  8 |        |             | ; See http://www.bradrodriguez.com/papers/moving3.htm for a primer on how
2299:000 | DONE cmt | em 16  8 |        |             | ; this works in various Forths.
2300:000 | DONE lbl | em 16  8 | 0056ea |             | xt_constant                          
2301:000 | DONE ins | em 16  8 | 0056ea | 20 2e 57    |                 jsr 00572e           
2302:000 | DONE wsp | em 16  8 |        |             |
2303:000 | DONE cmt | em 16  8 |        |             |                 ; CREATE by default installs a subroutine jump to DOVAR, but we
2304:000 | DONE cmt | em 16  8 |        |             |                 ; actually want DOCONST this time. Go back two bytes and repace
2305:000 | DONE cmt | em 16  8 |        |             |                 ; the subroutine jump target
2306:000 | DONE ins | em 16  8 | 0056ed | a5 00       |                 lda.d 000000         
2307:000 | DONE ins | em 16  8 | 0056ef | 3a          |                 dec.a                
2308:000 | DONE ins | em 16  8 | 0056f0 | 3a          |                 dec.a                
2309:000 | DONE ins | em 16  8 | 0056f1 | 85 1c       |                 sta.d 00001c         
2310:000 | DONE wsp | em 16  8 |        |             |
2311:000 | DONE ins | em 16  8 | 0056f3 | a9 c4 68    |                 lda.# 0068c4         
2312:000 | DONE ins | em 16  8 | 0056f6 | 92 1c       |                 sta.di 00001c        STA (TMP1)
2313:000 | DONE wsp | em 16  8 |        |             |
2314:000 | DONE cmt | em 16  8 |        |             |                 ; Save TOS in next cell. This is a direct version of COMMA
2315:000 | DONE ins | em 16  8 | 0056f8 | 98          |                 tya                  there is no "sty.di cp"
2316:000 | DONE ins | em 16  8 | 0056f9 | 92 00       |                 sta.di 000000        
2317:000 | DONE ins | em 16  8 | 0056fb | e6 00       |                 inc.d 000000         
2318:000 | DONE ins | em 16  8 | 0056fd | e6 00       |                 inc.d 000000         
2319:000 | DONE wsp | em 16  8 |        |             |
2320:000 | DONE ins | em 16  8 | 0056ff | b4 00       |                 ldy.dx 00            DROP
2321:000 | DONE ins | em 16  8 | 005701 | e8          |                 inx                  
2322:000 | DONE ins | em 16  8 | 005702 | e8          |                 inx                  drop through to adjust_z
2323:000 | DONE wsp | em 16  8 |        |             |
2324:000 | DONE cmt | em 16  8 |        |             |                 ; Now the length of the complete word (z_word) has increased by
2325:000 | DONE cmt | em 16  8 |        |             |                 ; two. We need to update that number or else words such as SEE
2326:000 | DONE cmt | em 16  8 |        |             |                 ; will ignore the PFA. We use this same routine for VARIABLE,
2327:000 | DONE cmt | em 16  8 |        |             |                 ; VALUE and DEFER
2328:000 | DONE lbl | em 16  8 | 005703 |             | adjust_z                             
2329:000 | DONE ins | em 16  8 | 005703 | 20 44 5a    |                 jsr 005a44           gives us ( nt )
2330:000 | DONE wsp | em 16  8 |        |             |
2331:000 | DONE cmt | em 16  8 |        |             |                 ; z_word is kept six bytes further down
2332:000 | DONE ins | em 16  8 | 005706 | 98          |                 tya                  
2333:000 | DONE ins | em 16  8 | 005707 | 18          |                 clc                  
2334:000 | DONE ins | em 16  8 | 005708 | 69 06 00    |                 adc.# 0006           
2335:000 | DONE ins | em 16  8 | 00570b | a8          |                 tay                  
2336:000 | DONE wsp | em 16  8 |        |             |
2337:000 | DONE ins | em 16  8 | 00570c | b9 00 00    |                 lda.y 0000           LDA 0000,Y
2338:000 | DONE ins | em 16  8 | 00570f | 1a          |                 inc.a                
2339:000 | DONE ins | em 16  8 | 005710 | 1a          |                 inc.a                
2340:000 | DONE ins | em 16  8 | 005711 | 99 00 00    |                 sta.y 0000           
2341:000 | DONE wsp | em 16  8 |        |             |
2342:000 | DONE ins | em 16  8 | 005714 | b4 00       |                 ldy.dx 00            get rid of nt
2343:000 | DONE ins | em 16  8 | 005716 | e8          |                 inx                  
2344:000 | DONE ins | em 16  8 | 005717 | e8          |                 inx                  
2345:000 | DONE wsp | em 16  8 |        |             |
2346:000 | DONE lbl | em 16  8 | 005718 |             | z_constant                           
2346:001 | DONE ins | em 16  8 | 005718 | 60          |                 rts                  
2347:000 | DONE wsp | em 16  8 |        |             |
2348:000 | DONE wsp | em 16  8 |        |             |
2349:000 | DONE cmt | em 16  8 |        |             | ; -------------------------------------------------------------------
2350:000 | DONE cmt | em 16  8 |        |             | ; COUNT ( c-addr -- addr u ) 14 bytes / X cycles
2351:000 | DONE cmt | em 16  8 |        |             | ; Convert old-style character string to address-length pair. Note that the
2352:000 | DONE cmt | em 16  8 |        |             | ; length of the string c-addr ist stored in character length (8 bit), not cell
2353:000 | DONE cmt | em 16  8 |        |             | ; length (16 bit). This is rarely used these days, though COUNT can also be used
2354:000 | DONE cmt | em 16  8 |        |             | ; to step through a string character by character.
2355:000 | DONE lbl | em 16  8 | 005719 |             | xt_count                             
2356:000 | DONE dir | em 16  8 |        |             |         .!a16                        
2357:000 | DONE dir | em 16 16 |        |             |         .!xy16                       
2358:000 | DONE ins | em 16 16 | 005719 | 98          |                 tya                  
2359:000 | DONE ins | em 16 16 | 00571a | 1a          |                 inc.a                String address starts one char later
2360:000 | DONE wsp | em 16 16 |        |             |
2361:000 | DONE ins | em 16 16 | 00571b | ca          |                 dex                  
2362:000 | DONE ins | em 16 16 | 00571c | ca          |                 dex                  
2363:000 | DONE ins | em 16 16 | 00571d | 95 00       |                 sta.dx 00            NOS
2364:000 | DONE wsp | em 16 16 |        |             |
2365:000 | DONE ins | em 16 16 | 00571f | b9 00 00    |                 lda.y 0000           LDA $0000,Y  first byte is length
2366:000 | DONE ins | em 16 16 | 005722 | 29 ff 00    |                 and.# 00ff           get rid of whatever was MSB
2367:000 | DONE ins | em 16 16 | 005725 | a8          |                 tay                  TOS
2368:000 | DONE wsp | em 16 16 |        |             |
2369:000 | DONE lbl | em 16 16 | 005726 |             | z_count                              
2369:001 | DONE ins | em 16 16 | 005726 | 60          |                 rts                  
2370:000 | DONE wsp | em 16 16 |        |             |
2371:000 | DONE wsp | em 16 16 |        |             |
2372:000 | DONE cmt | em 16 16 |        |             | ; -------------------------------------------------------------------
2373:000 | DONE cmt | em 16 16 |        |             | ; CR ( -- ) X bytes / X cycles
2374:000 | DONE cmt | em 16 16 |        |             | ; Cause following output to appear at beginning of next line
2375:000 | DONE lbl | em 16 16 | 005727 |             | xt_cr                                
2376:000 | DONE ins | em 16 16 | 005727 | a9 0a 00    |                 lda.# AscLF          test with AscCR for emulators
2377:000 | DONE ins | em 16 16 | 00572a | 20 a1 58    |                 jsr 0058a1           
2378:000 | DONE wsp | em 16 16 |        |             |
2379:000 | DONE lbl | em 16 16 | 00572d |             | z_cr                                 
2379:001 | DONE ins | em 16 16 | 00572d | 60          |                 rts                  
2380:000 | DONE wsp | em 16 16 |        |             |
2381:000 | DONE cmt | em 16 16 |        |             | ; -------------------------------------------------------------------
2382:000 | DONE cmt | em 16 16 |        |             | ; CREATE ( "name" -- ) X bytes / X cycles
2383:000 | DONE cmt | em 16 16 |        |             | ; Create a Dictionary entry associated with "name", used for various words,
2384:000 | DONE cmt | em 16 16 |        |             | ; especially for VARIABLE. When called, this new word will return the associated
2385:000 | DONE cmt | em 16 16 |        |             | ; address.
2386:000 | DONE lbl | em 16 16 | 00572e |             | xt_create                            
2387:000 | DONE dir | em 16 16 |        |             |         .!a16                        
2388:000 | DONE ins | em 16 16 | 00572e | 20 fb 5b    |                 jsr 005bfb           ( -- addr u )
2389:000 | DONE ins | em 16 16 | 005731 | d0 06       |                 bne 005739           
2390:000 | DONE wsp | em 16 16 |        |             |
2391:000 | DONE cmt | em 16 16 |        |             |                 ; if we got a zero-length name string, complain and abort
2392:000 | DONE ins | em 16 16 | 005733 | a9 76 70    |                 lda.# 007076         
2393:000 | DONE ins | em 16 16 | 005736 | 4c 7a 69    |                 jmp 00697a           
2394:000 | DONE wsp | em 16 16 |        |             |
2395:000 | DONE lbl | em 16 16 | 005739 |             | create_got_name                      
2396:000 | DONE cmt | em 16 16 |        |             |                 ; Remember the first free byte of memory as the start of the new
2397:000 | DONE cmt | em 16 16 |        |             |                 ; word
2398:000 | DONE ins | em 16 16 | 005739 | a5 00       |                 lda.d 000000         
2399:000 | DONE ins | em 16 16 | 00573b | 85 1c       |                 sta.d 00001c         save start of new word
2400:000 | DONE wsp | em 16 16 |        |             |
2401:000 | DONE cmt | em 16 16 |        |             |                 ; Enforce limit on 255 char length names by masking the MSB
2402:000 | DONE cmt | em 16 16 |        |             |                 ; of the length of the given string. We arrive here with
2403:000 | DONE cmt | em 16 16 |        |             |                 ; ( addr u )
2404:000 | DONE ins | em 16 16 | 00573d | 98          |                 tya                  
2405:000 | DONE ins | em 16 16 | 00573e | 29 ff 00    |                 and.# 00ff           
2406:000 | DONE ins | em 16 16 | 005741 | 85 1e       |                 sta.d 00001e         save length of name string
2407:000 | DONE wsp | em 16 16 |        |             |
2408:000 | DONE cmt | em 16 16 |        |             |                 ; We need 8 bytes + the length of the name string for our new
2409:000 | DONE cmt | em 16 16 |        |             |                 ; header. This is also the offset for the start of the code
2410:000 | DONE cmt | em 16 16 |        |             |                 ; field (the xt_ label) so we need to remember it. Otherwise, we
2411:000 | DONE cmt | em 16 16 |        |             |                 ; could just allot the space afterwards.
2412:000 | DONE ins | em 16 16 | 005743 | 18          |                 clc                  
2413:000 | DONE ins | em 16 16 | 005744 | 69 08 00    |                 adc.# 0008           
2414:000 | DONE ins | em 16 16 | 005747 | 85 20       |                 sta.d 000020         total bytes required for header
2415:000 | DONE wsp | em 16 16 |        |             |
2416:000 | DONE cmt | em 16 16 |        |             |                 ; We need to allocate three more bytes for the hardcoded
2417:000 | DONE cmt | em 16 16 |        |             |                 ; code field area (CFA), the "payload" of the word which by
2418:000 | DONE cmt | em 16 16 |        |             |                 ; default will be a subroutine jump to DOVAR
2419:000 | DONE ins | em 16 16 | 005749 | 1a          |                 inc.a                
2420:000 | DONE ins | em 16 16 | 00574a | 1a          |                 inc.a                
2421:000 | DONE ins | em 16 16 | 00574b | 1a          |                 inc.a                
2422:000 | DONE wsp | em 16 16 |        |             |
2423:000 | DONE cmt | em 16 16 |        |             |                 ; Instead of jumping to ALLOT, we do things by hand for speed
2424:000 | DONE cmt | em 16 16 |        |             |                 ; and so we don't have to fool around with the stack
2425:000 | DONE ins | em 16 16 | 00574c | 18          |                 clc                  
2426:000 | DONE ins | em 16 16 | 00574d | 65 00       |                 adc.d 000000         
2427:000 | DONE ins | em 16 16 | 00574f | 85 00       |                 sta.d 000000         
2428:000 | DONE wsp | em 16 16 |        |             |
2429:000 | DONE cmt | em 16 16 |        |             |                 ; Now we walk through the header, using Y as the index. See
2430:000 | DONE cmt | em 16 16 |        |             |                 ; drawing of header in headers.tasm file for reference. We
2431:000 | DONE cmt | em 16 16 |        |             |                 ; arrive here with ( addr u ) still from PARSE-NAME. We need
2432:000 | DONE cmt | em 16 16 |        |             |                 ; that addr later for the name string, so we push it to the
2433:000 | DONE cmt | em 16 16 |        |             |                 ; Return Stack. We'll clean up the Data Stack later
2434:000 | DONE ins | em 16 16 | 005751 | b5 00       |                 lda.dx 00            
2435:000 | DONE ins | em 16 16 | 005753 | 48          |                 pha                  
2436:000 | DONE wsp | em 16 16 |        |             |
2437:000 | DONE cmt | em 16 16 |        |             |                 ; HEADER BYTES 0,1: Length byte and flags
2438:000 | DONE ins | em 16 16 | 005754 | a0 00 00    |                 ldy.# 0000           Y is now an index, not TOS
2439:000 | DONE ins | em 16 16 | 005757 | a5 1e       |                 lda.d 00001e         get length byte
2440:000 | DONE ins | em 16 16 | 005759 | 91 1c       |                 sta.diy 00001c       STA (TMP1),Y
2441:000 | DONE ins | em 16 16 | 00575b | c8          |                 iny                  
2442:000 | DONE ins | em 16 16 | 00575c | c8          |                 iny                  
2443:000 | DONE wsp | em 16 16 |        |             |
2444:000 | DONE cmt | em 16 16 |        |             |                 ; BYTES 2,3: Next word in the dictionary (its nt). This is the
2445:000 | DONE cmt | em 16 16 |        |             |                 ; current Dictionary Pointer
2446:000 | DONE ins | em 16 16 | 00575d | a5 02       |                 lda.d 000002         
2447:000 | DONE ins | em 16 16 | 00575f | 91 1c       |                 sta.diy 00001c       
2448:000 | DONE ins | em 16 16 | 005761 | c8          |                 iny                  
2449:000 | DONE ins | em 16 16 | 005762 | c8          |                 iny                  
2450:000 | DONE wsp | em 16 16 |        |             |
2451:000 | DONE cmt | em 16 16 |        |             |                 ; BYTES 4,5: Start of code field (xt of this word, "xt_" link)
2452:000 | DONE cmt | em 16 16 |        |             |                 ; This begins after the header, so we take the length of the
2453:000 | DONE cmt | em 16 16 |        |             |                 ; header, which we saved in tmp3, and use it as an offset to
2454:000 | DONE cmt | em 16 16 |        |             |                 ; the address of the start of the word
2455:000 | DONE ins | em 16 16 | 005763 | a5 1c       |                 lda.d 00001c         can't use CP, because we've allotted space
2456:000 | DONE ins | em 16 16 | 005765 | 85 02       |                 sta.d 000002         while we've got it, make old CP the new DP
2457:000 | DONE wsp | em 16 16 |        |             |
2458:000 | DONE ins | em 16 16 | 005767 | 18          |                 clc                  
2459:000 | DONE ins | em 16 16 | 005768 | 65 20       |                 adc.d 000020         total header length
2460:000 | DONE ins | em 16 16 | 00576a | 91 1c       |                 sta.diy 00001c       
2461:000 | DONE ins | em 16 16 | 00576c | c8          |                 iny                  
2462:000 | DONE ins | em 16 16 | 00576d | c8          |                 iny                  
2463:000 | DONE wsp | em 16 16 |        |             |
2464:000 | DONE cmt | em 16 16 |        |             |                 ; BYTES 6,7: End of code ("z_" link)
2465:000 | DONE cmt | em 16 16 |        |             |                 ; By default, we execute a jump to the DOVAR routine, so we need
2466:000 | DONE cmt | em 16 16 |        |             |                 ; to move three bytes down, and then one more byte so the z_
2467:000 | DONE cmt | em 16 16 |        |             |                 ; label points to the (fictional) RTS instruction for correct
2468:000 | DONE cmt | em 16 16 |        |             |                 ; compilation. The start of the code field is still in A
2469:000 | DONE ins | em 16 16 | 00576e | 1a          |                 inc.a                
2470:000 | DONE ins | em 16 16 | 00576f | 1a          |                 inc.a                
2471:000 | DONE ins | em 16 16 | 005770 | 1a          |                 inc.a                
2472:000 | DONE ins | em 16 16 | 005771 | 91 1c       |                 sta.diy 00001c       
2473:000 | DONE ins | em 16 16 | 005773 | c8          |                 iny                  
2474:000 | DONE ins | em 16 16 | 005774 | c8          |                 iny                  
2475:000 | DONE wsp | em 16 16 |        |             |
2476:000 | DONE cmt | em 16 16 |        |             |                 ; BYTE 8: Start of name string
2477:000 | DONE cmt | em 16 16 |        |             |                 ; The addr of the string is on the Return Stack, the length of
2478:000 | DONE cmt | em 16 16 |        |             |                 ; the name string is in tmp2. We subtract eight from the address
2479:000 | DONE cmt | em 16 16 |        |             |                 ; so we can use the same loop index
2480:000 | DONE ins | em 16 16 | 005775 | 68          |                 pla                  get back string address
2481:000 | DONE ins | em 16 16 | 005776 | 38          |                 sec                  
2482:000 | DONE ins | em 16 16 | 005777 | e9 08 00    |                 sbc.# 0008           
2483:000 | DONE ins | em 16 16 | 00577a | 85 20       |                 sta.d 000020         
2484:000 | DONE ins | em 16 16 | 00577c | e2 20       |                 sep 20               
2484:001 | DONE ctl | em  8 16 |        |             |         .!a8
2485:000 | DONE lbl | em  8 16 | 00577e |             | @                                    
2486:000 | DONE ins | em  8 16 | 00577e | b1 20       |                 lda.diy 000020       
2487:000 | DONE ins | em  8 16 | 005780 | 91 1c       |                 sta.diy 00001c       
2488:000 | DONE ins | em  8 16 | 005782 | c8          |                 iny                  
2489:000 | DONE ins | em  8 16 | 005783 | c6 1e       |                 dec.d 00001e         
2490:000 | DONE ins | em  8 16 | 005785 | d0 f7       |                 bne 00577e           
2491:000 | DONE wsp | em  8 16 |        |             |
2492:000 | DONE cmt | em  8 16 |        |             |                 ; After the name string, comes the Code Field (start at xt, that
2493:000 | DONE cmt | em  8 16 |        |             |                 ; is, the xt_ label of the word) which is initially a jump to the
2494:000 | DONE cmt | em  8 16 |        |             |                 ; subroutine to DOVAR. We're still in 8-bit A-register, which is
2495:000 | DONE cmt | em  8 16 |        |             |                 ; good
2496:000 | DONE ins | em  8 16 | 005787 | a9 20       |                 lda.# 20             opcode of JSR
2497:000 | DONE ins | em  8 16 | 005789 | 91 1c       |                 sta.diy 00001c       
2498:000 | DONE ins | em  8 16 | 00578b | c8          |                 iny                  single increase only because we have 8-bit A
2499:000 | DONE wsp | em  8 16 |        |             |
2500:000 | DONE ins | em  8 16 | 00578c | a9 ee       |                 lda.# .lsb 0068ee    
2501:000 | DONE ins | em  8 16 | 00578e | 91 1c       |                 sta.diy 00001c       
2502:000 | DONE ins | em  8 16 | 005790 | c8          |                 iny                  
2503:000 | DONE wsp | em  8 16 |        |             |
2504:000 | DONE ins | em  8 16 | 005791 | a9 68       |                 lda.# .msb 0068ee    
2505:000 | DONE ins | em  8 16 | 005793 | 91 1c       |                 sta.diy 00001c       
2506:000 | DONE wsp | em  8 16 |        |             |
2507:000 | DONE ins | em  8 16 | 005795 | c2 20       |                 rep 20               
2507:001 | DONE ctl | em 16 16 |        |             |         .!a16
2508:000 | DONE cmt | em 16 16 |        |             |                 ; We're done. Restore Data Stack (2DROP)
2509:000 | DONE ins | em 16 16 | 005797 | b4 02       |                 ldy.dx 02            
2510:000 | DONE ins | em 16 16 | 005799 | e8          |                 inx                  
2511:000 | DONE ins | em 16 16 | 00579a | e8          |                 inx                  
2512:000 | DONE ins | em 16 16 | 00579b | e8          |                 inx                  
2513:000 | DONE ins | em 16 16 | 00579c | e8          |                 inx                  
2514:000 | DONE wsp | em 16 16 |        |             |
2515:000 | DONE lbl | em 16 16 | 00579d |             | z_create                             
2515:001 | DONE ins | em 16 16 | 00579d | 60          |                 rts                  
2516:000 | DONE wsp | em 16 16 |        |             |
2517:000 | DONE wsp | em 16 16 |        |             |
2518:000 | DONE cmt | em 16 16 |        |             | ; -------------------------------------------------------------------
2519:000 | DONE cmt | em 16 16 |        |             | ; DEFER ( "name" -- ) X bytes / X cycles
2520:000 | DONE cmt | em 16 16 |        |             | ; Reserve an name that can be linked to various xt by IS. The ANSI reference
2521:000 | DONE cmt | em 16 16 |        |             | ; implementation is CREATE ['] ABORT , DOES> @ EXECUTE ; but we use this as
2522:000 | DONE cmt | em 16 16 |        |             | ; a low-level word so we can set stuff up earlier and faster
2523:000 | DONE lbl | em 16 16 | 00579e |             | xt_defer                             
2524:000 | DONE ins | em 16 16 | 00579e | 20 2e 57    |                 jsr 00572e           
2525:000 | DONE wsp | em 16 16 |        |             |
2526:000 | DONE cmt | em 16 16 |        |             |                 ; CREATE by default installs a subroutine jump to DOVAR, but we
2527:000 | DONE cmt | em 16 16 |        |             |                 ; actually want DODEFER this time. Go back two bytes and repace
2528:000 | DONE cmt | em 16 16 |        |             |                 ; the subroutine jump target
2529:000 | DONE ins | em 16 16 | 0057a1 | a5 00       |                 lda.d 000000         
2530:000 | DONE ins | em 16 16 | 0057a3 | 3a          |                 dec.a                
2531:000 | DONE ins | em 16 16 | 0057a4 | 3a          |                 dec.a                
2532:000 | DONE ins | em 16 16 | 0057a5 | 85 1c       |                 sta.d 00001c         
2533:000 | DONE wsp | em 16 16 |        |             |
2534:000 | DONE ins | em 16 16 | 0057a7 | a9 d2 68    |                 lda.# 0068d2         
2535:000 | DONE ins | em 16 16 | 0057aa | 92 1c       |                 sta.di 00001c        STA (TMP1)
2536:000 | DONE wsp | em 16 16 |        |             |
2537:000 | DONE cmt | em 16 16 |        |             |                 ; DODEFER executes the next address it finds after its call. As
2538:000 | DONE cmt | em 16 16 |        |             |                 ; a default, we include the error "Defer not defined"
2539:000 | DONE ins | em 16 16 | 0057ac | a9 db 68    |                 lda.# 0068db         
2540:000 | DONE ins | em 16 16 | 0057af | 92 00       |                 sta.di 000000        
2541:000 | DONE ins | em 16 16 | 0057b1 | e6 00       |                 inc.d 000000         
2542:000 | DONE ins | em 16 16 | 0057b3 | e6 00       |                 inc.d 000000         
2543:000 | DONE wsp | em 16 16 |        |             |
2544:000 | DONE ins | em 16 16 | 0057b5 | 20 03 57    |                 jsr 005703           adjust the header to the correct length
2545:000 | DONE wsp | em 16 16 |        |             |
2546:000 | DONE lbl | em 16 16 | 0057b8 |             | z_defer                              
2546:001 | DONE ins | em 16 16 | 0057b8 | 60          |                 rts                  
2547:000 | DONE wsp | em 16 16 |        |             |
2548:000 | DONE wsp | em 16 16 |        |             |
2549:000 | DONE cmt | em 16 16 |        |             | ; -------------------------------------------------------------------
2550:000 | DONE cmt | em 16 16 |        |             | ; DIGIT? ( char -- u f | char f )  X bytes / X cycles
2551:000 | DONE cmt | em 16 16 |        |             | ; Convert a single ASCII character to a number in the current radix. Inspired by
2552:000 | DONE cmt | em 16 16 |        |             | ; the pForth instruction DIGIT in pForth, see
2553:000 | DONE cmt | em 16 16 |        |             | ; https://github.com/philburk/pforth/blob/master/fth/numberio.fth
2554:000 | DONE cmt | em 16 16 |        |             | ; Rewritten from DIGIT>NUMBER in Tali Forth. Note in contrast to pForth, we get
2555:000 | DONE cmt | em 16 16 |        |             | ; the base (radix) ourselves instead of having the user provide it. There is no
2556:000 | DONE cmt | em 16 16 |        |             | ; standard name for this routine, which itself is not ANSI; we use DIGIT?
2557:000 | DONE cmt | em 16 16 |        |             | ; following pForth and Gforth.
2558:000 | DONE lbl | em 16 16 | 0057b9 |             | xt_digitq                            
2559:000 | DONE dir | em 16 16 |        |             |         .!a16                        
2560:000 | DONE ins | em 16 16 | 0057b9 | 98          |                 tya                  
2561:000 | DONE ins | em 16 16 | 0057ba | 29 ff 00    |                 and.# 00ff           paranoid
2562:000 | DONE wsp | em 16 16 |        |             |
2563:000 | DONE ins | em 16 16 | 0057bd | e2 20       |                 sep 20               
2563:001 | DONE ctl | em  8 16 |        |             |         .!a8
2564:000 | DONE cmt | em  8 16 |        |             |                 ; Make sure we're not below the ASCII code for '0'
2565:000 | DONE ins | em  8 16 | 0057bf | c9 30       |                 cmp.# 30             
2566:000 | DONE ins | em  8 16 | 0057c1 | 90 1d       |                 bcc 0057e0           
2567:000 | DONE wsp | em  8 16 |        |             |
2568:000 | DONE cmt | em  8 16 |        |             |                 ; Then see if we are below '9', because that would make this
2569:000 | DONE cmt | em  8 16 |        |             |                 ; a normal number
2570:000 | DONE ins | em  8 16 | 0057c3 | c9 3a       |                 cmp.# 00003a         This is ':'
2571:000 | DONE ins | em  8 16 | 0057c5 | 90 12       |                 bcc 0057d9           
2572:000 | DONE wsp | em  8 16 |        |             |
2573:000 | DONE cmt | em  8 16 |        |             |                 ; Well, then let's see if this is the gap between '9' and 'A' so
2574:000 | DONE cmt | em  8 16 |        |             |                 ; we can treat the whole range as a number
2575:000 | DONE ins | em  8 16 | 0057c7 | c9 40       |                 cmp.# 000040         This is '@'
2576:000 | DONE ins | em  8 16 | 0057c9 | 90 15       |                 bcc 0057e0           
2577:000 | DONE wsp | em  8 16 |        |             |
2578:000 | DONE cmt | em  8 16 |        |             |                 ; Probably a letter, so we make sure it is uppercase
2579:000 | DONE ins | em  8 16 | 0057cb | c9 61       |                 cmp.# 61             
2580:000 | DONE ins | em  8 16 | 0057cd | 90 07       |                 bcc 0057d6           not lower case, too low
2581:000 | DONE ins | em  8 16 | 0057cf | c9 7b       |                 cmp.# 00007b         
2582:000 | DONE ins | em  8 16 | 0057d1 | b0 03       |                 bcs 0057d6           not lower case, too high
2583:000 | DONE wsp | em  8 16 |        |             |
2584:000 | DONE ins | em  8 16 | 0057d3 | 18          |                 clc                  just right
2585:000 | DONE ins | em  8 16 | 0057d4 | 69 e0       |                 adc.# e0             offset to uppercase (wraps)
2586:000 | DONE wsp | em  8 16 |        |             |
2587:000 | DONE lbl | em  8 16 | 0057d6 |             | dq_case_done                         
2588:000 | DONE cmt | em  8 16 |        |             |                 ; Get rid of the gap between '9' and 'A' so we can treat the
2589:000 | DONE cmt | em  8 16 |        |             |                 ; whole range as one number
2590:000 | DONE ins | em  8 16 | 0057d6 | 38          |                 sec                  
2591:000 | DONE ins | em  8 16 | 0057d7 | e9 07       |                 sbc.# 07             fall through to dq_checkbase
2592:000 | DONE wsp | em  8 16 |        |             |
2593:000 | DONE lbl | em  8 16 | 0057d9 |             | dq_checkbase                         
2594:000 | DONE cmt | em  8 16 |        |             |                 ; We have a number, now see if it inside the range given by BASE
2595:000 | DONE ins | em  8 16 | 0057d9 | 38          |                 sec                  
2596:000 | DONE ins | em  8 16 | 0057da | e9 30       |                 sbc.# 30             This is also the actual conversion step
2597:000 | DONE ins | em  8 16 | 0057dc | c5 16       |                 cmp.d 000016         
2598:000 | DONE ins | em  8 16 | 0057de | 90 0b       |                 bcc 0057eb           
2599:000 | DONE wsp | em  8 16 |        |             |
2600:000 | DONE lbl | em  8 16 | 0057e0 |             | dq_notdigit                          
2601:000 | DONE cmt | em  8 16 |        |             |                 ; not a digit, add a false flag
2602:000 | DONE ins | em  8 16 | 0057e0 | ca          |                 dex                  
2603:000 | DONE ins | em  8 16 | 0057e1 | ca          |                 dex                  
2604:000 | DONE ins | em  8 16 | 0057e2 | 94 00       |                 sty.dx 00            keep the offending character in NOS
2605:000 | DONE ins | em  8 16 | 0057e4 | a0 00 00    |                 ldy.# 0000           
2606:000 | DONE ins | em  8 16 | 0057e7 | c2 20       |                 rep 20               
2606:001 | DONE ctl | em 16 16 |        |             |         .!a16
2607:000 | DONE ins | em 16 16 | 0057e9 | 80 09       |                 bra 0057f4           
2608:000 | DONE wsp | em 16 16 |        |             |
2609:000 | DONE lbl | em 16 16 | 0057eb |             | dq_success                           
2610:000 | DONE ins | em 16 16 | 0057eb | ca          |                 dex                  
2611:000 | DONE ins | em 16 16 | 0057ec | ca          |                 dex                  
2612:000 | DONE ins | em 16 16 | 0057ed | c2 20       |                 rep 20               
2612:001 | DONE ctl | em 16 16 |        |             |         .!a16
2613:000 | DONE ins | em 16 16 | 0057ef | 95 00       |                 sta.dx 00            put the number in NOS
2614:000 | DONE ins | em 16 16 | 0057f1 | a0 ff ff    |                 ldy.# 0ffff          
2615:000 | DONE wsp | em 16 16 |        |             |
2616:000 | DONE lbl | em 16 16 | 0057f4 |             | z_digitq                             
2616:001 | DONE ins | em 16 16 | 0057f4 | 60          |                 rts                  
2617:000 | DONE wsp | em 16 16 |        |             |
2618:000 | DONE wsp | em 16 16 |        |             |
2619:000 | DONE cmt | em 16 16 |        |             | ; -------------------------------------------------------------------
2620:000 | DONE cmt | em 16 16 |        |             | ; DPLUS ( d d -- d ) X bytes / X cycles
2621:000 | DONE cmt | em 16 16 |        |             | ; Add two double cell numbers
2622:000 | DONE lbl | em 16 16 | 0057f5 |             | xt_dplus                             
2623:000 | DONE dir | em 16 16 |        |             |         .!a16                        
2624:000 | DONE ins | em 16 16 | 0057f5 | 5a          |                 phy                  save hi word of first number, frees Y
2625:000 | DONE ins | em 16 16 | 0057f6 | b5 00       |                 lda.dx 00            lo word of first number
2626:000 | DONE ins | em 16 16 | 0057f8 | 18          |                 clc                  
2627:000 | DONE ins | em 16 16 | 0057f9 | 75 04       |                 adc.dx 04            add lo word of second number
2628:000 | DONE ins | em 16 16 | 0057fb | a8          |                 tay                  
2629:000 | DONE wsp | em 16 16 |        |             |
2630:000 | DONE ins | em 16 16 | 0057fc | 68          |                 pla                  get hi word of first number
2631:000 | DONE ins | em 16 16 | 0057fd | 75 02       |                 adc.dx 02            add hi word of second number
2632:000 | DONE wsp | em 16 16 |        |             |
2633:000 | DONE ins | em 16 16 | 0057ff | e8          |                 inx                  
2634:000 | DONE ins | em 16 16 | 005800 | e8          |                 inx                  
2635:000 | DONE ins | em 16 16 | 005801 | e8          |                 inx                  
2636:000 | DONE ins | em 16 16 | 005802 | e8          |                 inx                  
2637:000 | DONE wsp | em 16 16 |        |             |
2638:000 | DONE ins | em 16 16 | 005803 | 94 00       |                 sty.dx 00            lo result goes NOS
2639:000 | DONE ins | em 16 16 | 005805 | a8          |                 tay                  to result goes TOS
2640:000 | DONE wsp | em 16 16 |        |             |
2641:000 | DONE lbl | em 16 16 | 005806 |             | z_dplus                              
2641:001 | DONE ins | em 16 16 | 005806 | 60          |                 rts                  
2642:000 | DONE wsp | em 16 16 |        |             |
2643:000 | DONE cmt | em 16 16 |        |             | ; -------------------------------------------------------------------
2644:000 | DONE cmt | em 16 16 |        |             | ; DMINUS ( d d -- d ) X bytes / X cycles
2645:000 | DONE cmt | em 16 16 |        |             | ; Subtract two double cell numbers
2646:000 | DONE lbl | em 16 16 | 005807 |             | xt_dminus                            
2647:000 | DONE dir | em 16 16 |        |             |         .!a16                        
2648:000 | DONE ins | em 16 16 | 005807 | b5 04       |                 lda.dx 04            lo word NOS
2649:000 | DONE ins | em 16 16 | 005809 | 38          |                 sec                  
2650:000 | DONE ins | em 16 16 | 00580a | f5 00       |                 sbc.dx 00            lo word TOS
2651:000 | DONE ins | em 16 16 | 00580c | 48          |                 pha                  
2652:000 | DONE wsp | em 16 16 |        |             |
2653:000 | DONE ins | em 16 16 | 00580d | 94 00       |                 sty.dx 00            use as temp storage for hi word TOS
2654:000 | DONE ins | em 16 16 | 00580f | b5 02       |                 lda.dx 02            hi word, NOS
2655:000 | DONE ins | em 16 16 | 005811 | f5 00       |                 sbc.dx 00            hi word, TOS
2656:000 | DONE ins | em 16 16 | 005813 | a8          |                 tay                  result hi word now TOS
2657:000 | DONE wsp | em 16 16 |        |             |
2658:000 | DONE ins | em 16 16 | 005814 | e8          |                 inx                  
2659:000 | DONE ins | em 16 16 | 005815 | e8          |                 inx                  
2660:000 | DONE ins | em 16 16 | 005816 | e8          |                 inx                  
2661:000 | DONE ins | em 16 16 | 005817 | e8          |                 inx                  
2662:000 | DONE wsp | em 16 16 |        |             |
2663:000 | DONE ins | em 16 16 | 005818 | 68          |                 pla                  
2664:000 | DONE ins | em 16 16 | 005819 | 95 00       |                 sta.dx 00            result lo word now NOS
2665:000 | DONE wsp | em 16 16 |        |             |
2666:000 | DONE lbl | em 16 16 | 00581b |             | z_dminus                             
2666:001 | DONE ins | em 16 16 | 00581b | 60          |                 rts                  
2667:000 | DONE wsp | em 16 16 |        |             |
2668:000 | DONE wsp | em 16 16 |        |             |
2669:000 | DONE cmt | em 16 16 |        |             | ; -------------------------------------------------------------------
2670:000 | DONE cmt | em 16 16 |        |             | ; D>S ( ud -- u ) X bytes / X cycles
2671:000 | DONE cmt | em 16 16 |        |             | ; Convert double cell number to single cell. Note this currently does not
2672:000 | DONE cmt | em 16 16 |        |             | ; respect the sign, in constrast to Gforth - this is simply DROP
2673:000 | DONE cmt | em 16 16 |        |             | ; TODO make this work the way Gforth's does
2674:000 | DONE lbl | em 16 16 | 00581c |             | xt_dtos                              
2675:000 | DONE dir | em 16 16 |        |             |         .!a16                        
2676:000 | DONE ins | em 16 16 | 00581c | b4 00       |                 ldy.dx 00            
2677:000 | DONE ins | em 16 16 | 00581e | e8          |                 inx                  
2678:000 | DONE ins | em 16 16 | 00581f | e8          |                 inx                  
2679:000 | DONE wsp | em 16 16 |        |             |
2680:000 | DONE lbl | em 16 16 | 005820 |             | z_dtos                               
2680:001 | DONE ins | em 16 16 | 005820 | 60          |                 rts                  
2681:000 | DONE wsp | em 16 16 |        |             |
2682:000 | DONE wsp | em 16 16 |        |             |
2683:000 | DONE cmt | em 16 16 |        |             | ; -------------------------------------------------------------------
2684:000 | DONE cmt | em 16 16 |        |             | ; DABS ( d -- ud ) X bytes / X cycles
2685:000 | DONE cmt | em 16 16 |        |             | ; Return the absolute value of a double number
2686:000 | DONE cmt | em 16 16 |        |             | ; TODO recode in assembler
2687:000 | DONE lbl | em 16 16 | 005821 |             | xt_dabs                              
2688:000 | DONE cmt | em 16 16 |        |             |                 ; double cell is TOS
2689:000 | DONE ins | em 16 16 | 005821 | 98          |                 tya                  force flag test
2690:000 | DONE ins | em 16 16 | 005822 | f0 03       |                 beq 005827           already positive, life is good
2691:000 | DONE wsp | em 16 16 |        |             |
2692:000 | DONE ins | em 16 16 | 005824 | 20 3d 58    |                 jsr 00583d           
2693:000 | DONE wsp | em 16 16 |        |             |
2694:000 | DONE lbl | em 16 16 | 005827 |             | z_dabs                               
2694:001 | DONE ins | em 16 16 | 005827 | 60          |                 rts                  
2695:000 | DONE wsp | em 16 16 |        |             |
2696:000 | DONE wsp | em 16 16 |        |             |
2697:000 | DONE cmt | em 16 16 |        |             | ; -------------------------------------------------------------------
2698:000 | DONE cmt | em 16 16 |        |             | ; DECIMAL ( -- ) 7 bytes / X cycles
2699:000 | DONE cmt | em 16 16 |        |             | ; Change radix for number conversion to 10
2700:000 | DONE lbl | em 16 16 | 005828 |             | xt_decimal                           
2701:000 | DONE dir | em 16 16 |        |             |         .!a16                        
2702:000 | DONE ins | em 16 16 | 005828 | a9 0a 00    |                 lda.# 000a           
2703:000 | DONE ins | em 16 16 | 00582b | 85 16       |                 sta.d 000016         
2704:000 | DONE wsp | em 16 16 |        |             |
2705:000 | DONE lbl | em 16 16 | 00582d |             | z_decimal                            
2705:001 | DONE ins | em 16 16 | 00582d | 60          |                 rts                  
2706:000 | DONE wsp | em 16 16 |        |             |
2707:000 | DONE wsp | em 16 16 |        |             |
2708:000 | DONE cmt | em 16 16 |        |             | ; -------------------------------------------------------------------
2709:000 | DONE cmt | em 16 16 |        |             | ; DEPTH ( -- u ) 14 bytes / X cycles
2710:000 | DONE cmt | em 16 16 |        |             | ; Push the number of entries in cells (not bytes) on the parameter stack.
2711:000 | DONE cmt | em 16 16 |        |             | ; Assumes X is valid as the DSP.
2712:000 | DONE lbl | em 16 16 | 00582e |             | xt_depth                             
2713:000 | DONE dir | em 16 16 |        |             |         .!a16                        
2714:000 | DONE cmt | em 16 16 |        |             |                 ; We've got zero entries when X is dsp0
2715:000 | DONE ins | em 16 16 | 00582e | 86 22       |                 stx.d 000022         
2716:000 | DONE ins | em 16 16 | 005830 | a9 ff 00    |                 lda.# 0000ff         
2717:000 | DONE ins | em 16 16 | 005833 | 38          |                 sec                  
2718:000 | DONE ins | em 16 16 | 005834 | e5 22       |                 sbc.d 000022         
2719:000 | DONE wsp | em 16 16 |        |             |
2720:000 | DONE cmt | em 16 16 |        |             |                 ; now divide by two because each cells is to bytes long
2721:000 | DONE ins | em 16 16 | 005836 | 4a          |                 lsr.a                
2722:000 | DONE wsp | em 16 16 |        |             |
2723:000 | DONE ins | em 16 16 | 005837 | ca          |                 dex                  
2724:000 | DONE ins | em 16 16 | 005838 | ca          |                 dex                  
2725:000 | DONE ins | em 16 16 | 005839 | 94 00       |                 sty.dx 00            
2726:000 | DONE wsp | em 16 16 |        |             |
2727:000 | DONE cmt | em 16 16 |        |             |                 ; push result to stack
2728:000 | DONE ins | em 16 16 | 00583b | a8          |                 tay                  
2729:000 | DONE wsp | em 16 16 |        |             |
2730:000 | DONE lbl | em 16 16 | 00583c |             | z_depth                              
2730:001 | DONE ins | em 16 16 | 00583c | 60          |                 rts                  
2731:000 | DONE wsp | em 16 16 |        |             |
2732:000 | DONE cmt | em 16 16 |        |             | ; -------------------------------------------------------------------
2733:000 | DONE cmt | em 16 16 |        |             | ; DNEGATE ( d -- d ) 19 bytes / X cycles
2734:000 | DONE cmt | em 16 16 |        |             | ; Change the sign of a double number. This is the double equivalent of NEGATE
2735:000 | DONE lbl | em 16 16 | 00583d |             | xt_dnegate                           
2736:000 | DONE dir | em 16 16 |        |             |         .!a16                        
2737:000 | DONE cmt | em 16 16 |        |             |                 ; start off with LSW (in NOS)
2738:000 | DONE ins | em 16 16 | 00583d | b5 00       |                 lda.dx 00            
2739:000 | DONE ins | em 16 16 | 00583f | 49 ff ff    |                 eor.# 0ffff          
2740:000 | DONE wsp | em 16 16 |        |             |
2741:000 | DONE cmt | em 16 16 |        |             |                 ; INC doesn't affect the carry flag, so we have to do this the
2742:000 | DONE cmt | em 16 16 |        |             |                 ; hard way
2743:000 | DONE ins | em 16 16 | 005842 | 18          |                 clc                  
2744:000 | DONE ins | em 16 16 | 005843 | 69 01 00    |                 adc.# 0001           
2745:000 | DONE ins | em 16 16 | 005846 | 95 00       |                 sta.dx 00            
2746:000 | DONE wsp | em 16 16 |        |             |
2747:000 | DONE cmt | em 16 16 |        |             |                 ; now MSW (in TOS)
2748:000 | DONE ins | em 16 16 | 005848 | 98          |                 tya                  
2749:000 | DONE ins | em 16 16 | 005849 | 49 ff ff    |                 eor.# 0ffff          
2750:000 | DONE ins | em 16 16 | 00584c | 69 00 00    |                 adc.# 0000           we are only interested in the carry
2751:000 | DONE ins | em 16 16 | 00584f | a8          |                 tay                  
2752:000 | DONE wsp | em 16 16 |        |             |
2753:000 | DONE lbl | em 16 16 | 005850 |             | z_dnegate                            
2753:001 | DONE ins | em 16 16 | 005850 | 60          |                 rts                  
2754:000 | DONE wsp | em 16 16 |        |             |
2755:000 | DONE wsp | em 16 16 |        |             |
2756:000 | DONE cmt | em 16 16 |        |             | ; -------------------------------------------------------------------
2757:000 | DONE cmt | em 16 16 |        |             | ; DOES> ( -- ) X bytes / X cycles
2758:000 | DONE cmt | em 16 16 |        |             | ; Create the payload for defining new defining words. See the file
2759:000 | DONE cmt | em 16 16 |        |             | ; docs/create-does.txt and
2760:000 | DONE cmt | em 16 16 |        |             | ; http://www.bradrodriguez.com/papers/moving3.htm for a discussion of
2761:000 | DONE cmt | em 16 16 |        |             | ; DOES>'s internal workings. This uses tmp1 and tmp2
2762:000 | DONE cmt | em 16 16 |        |             | ; TODO see if this creates a correct z_word address
2763:000 | DONE lbl | em 16 16 | 005851 |             | xt_does                              
2764:000 | DONE cmt | em 16 16 |        |             |                 ; compile a subroutine jump to the runtime of DOES>
2765:000 | DONE ins | em 16 16 | 005851 | f4 5e 58    |                 phe.# 00585e         
2766:000 | DONE ins | em 16 16 | 005854 | 20 59 69    |                 jsr 006959           
2767:000 | DONE wsp | em 16 16 |        |             |
2768:000 | DONE cmt | em 16 16 |        |             |                 ; compile a subroutine jump to DODOES. In traditional terms,
2769:000 | DONE cmt | em 16 16 |        |             |                 ; this is the Code Field Area (CFA) of the new word
2770:000 | DONE ins | em 16 16 | 005857 | f4 e1 68    |                 phe.# 0068e1         
2771:000 | DONE ins | em 16 16 | 00585a | 20 59 69    |                 jsr 006959           
2772:000 | DONE wsp | em 16 16 |        |             |
2773:000 | DONE lbl | em 16 16 | 00585d |             | z_does                               
2773:001 | DONE ins | em 16 16 | 00585d | 60          |                 rts                  
2774:000 | DONE wsp | em 16 16 |        |             |
2775:000 | DONE lbl | em 16 16 | 00585e |             | does_rt                              
2776:000 | DONE cmt | em 16 16 |        |             |                 ; Runtime portion of DOES>. This replaces the subroutine jump to
2777:000 | DONE cmt | em 16 16 |        |             |                 ; DOVAR that CREATE automatically encodes by a jump to the
2778:000 | DONE cmt | em 16 16 |        |             |                 ; address that contains a subroutine jump to DODOES. We don't
2779:000 | DONE cmt | em 16 16 |        |             |                 ; jump to DODOES directly because we need to work our magic with
2780:000 | DONE cmt | em 16 16 |        |             |                 ; the return addresses
2781:000 | DONE ins | em 16 16 | 00585e | 68          |                 pla                  
2782:000 | DONE ins | em 16 16 | 00585f | 1a          |                 inc.a                increase by one because of RTS mechanics
2783:000 | DONE ins | em 16 16 | 005860 | 85 1c       |                 sta.d 00001c         
2784:000 | DONE wsp | em 16 16 |        |             |
2785:000 | DONE cmt | em 16 16 |        |             |                 ; CREATE has also already modified the DP to point to the new
2786:000 | DONE cmt | em 16 16 |        |             |                 ; word. We have no idea which instructions followed the CREATE
2787:000 | DONE cmt | em 16 16 |        |             |                 ; command if there is a DOES> so the CP could point anywhere by
2788:000 | DONE cmt | em 16 16 |        |             |                 ; now.
2789:000 | DONE ins | em 16 16 | 005862 | a5 02       |                 lda.d 000002         
2790:000 | DONE wsp | em 16 16 |        |             |
2791:000 | DONE cmt | em 16 16 |        |             |                 ; The address of the word's xt is four bytes down (see
2792:000 | DONE cmt | em 16 16 |        |             |                 ; header.tasm for details).
2793:000 | DONE ins | em 16 16 | 005864 | 18          |                 clc                  
2794:000 | DONE ins | em 16 16 | 005865 | 69 04 00    |                 adc.# 0004           
2795:000 | DONE ins | em 16 16 | 005868 | 85 1e       |                 sta.d 00001e         
2796:000 | DONE wsp | em 16 16 |        |             |
2797:000 | DONE cmt | em 16 16 |        |             |                 ; Now we get that address and add one byte to skip over the JSR
2798:000 | DONE cmt | em 16 16 |        |             |                 ; opcode
2799:000 | DONE ins | em 16 16 | 00586a | b2 1e       |                 lda.di 00001e        LDA (TMP2)
2800:000 | DONE ins | em 16 16 | 00586c | 1a          |                 inc.a                
2801:000 | DONE ins | em 16 16 | 00586d | 85 1e       |                 sta.d 00001e         Points to address to be replaced
2802:000 | DONE wsp | em 16 16 |        |             |
2803:000 | DONE cmt | em 16 16 |        |             |                 ; Replace the DOVAR address
2804:000 | DONE ins | em 16 16 | 00586f | a5 1c       |                 lda.d 00001c         
2805:000 | DONE ins | em 16 16 | 005871 | 92 1e       |                 sta.di 00001e        STA (TMP2)
2806:000 | DONE wsp | em 16 16 |        |             |
2807:000 | DONE cmt | em 16 16 |        |             |                 ; Since we removed the return address that brought us here, we
2808:000 | DONE cmt | em 16 16 |        |             |                 ; go back to whatever the main routine was. Otherwise, we we
2809:000 | DONE cmt | em 16 16 |        |             |                 ; smash into the subroutine jump to DODOES.
2810:000 | DONE ins | em 16 16 | 005873 | 60          |                 rts                  
2811:000 | DONE wsp | em 16 16 |        |             |
2812:000 | DONE wsp | em 16 16 |        |             |
2813:000 | DONE cmt | em 16 16 |        |             | ; -------------------------------------------------------------------
2814:000 | DONE cmt | em 16 16 |        |             | ; DROP ( n -- ) 4 bytes / 9 cycles
2815:000 | DONE cmt | em 16 16 |        |             | ; Drop first entry on Data Stack
2816:000 | DONE wsp | em 16 16 |        |             |
2817:000 | DONE lbl | em 16 16 | 005874 |             | xt_drop                              
2818:000 | DONE ins | em 16 16 | 005874 | b4 00       |                 ldy.dx 00            
2819:000 | DONE ins | em 16 16 | 005876 | e8          |                 inx                  
2820:000 | DONE ins | em 16 16 | 005877 | e8          |                 inx                  
2821:000 | DONE wsp | em 16 16 |        |             |
2822:000 | DONE lbl | em 16 16 | 005878 |             | z_drop                               
2822:001 | DONE ins | em 16 16 | 005878 | 60          |                 rts                  
2823:000 | DONE wsp | em 16 16 |        |             |
2824:000 | DONE wsp | em 16 16 |        |             |
2825:000 | DONE cmt | em 16 16 |        |             | ; -------------------------------------------------------------------
2826:000 | DONE cmt | em 16 16 |        |             | ; DUMP ( addr u -- ) X bytes / X cycles
2827:000 | DONE cmt | em 16 16 |        |             | ; Print a region of memory in a pretty way. This is used interactively, so we
2828:000 | DONE cmt | em 16 16 |        |             | ; don't care about speed (humans are slow) and concentrate on size instead,
2829:000 | DONE cmt | em 16 16 |        |             | ; using JSR where we can. This is a primtive version until we get loops ready
2830:000 | DONE lbl | em 16 16 | 005879 |             | xt_dump                              
2831:000 | DONE ins | em 16 16 | 005879 | 98          |                 tya                  force flag test
2832:000 | DONE lbl | em 16 16 | 00587a |             | dump_loop                            
2833:000 | DONE ins | em 16 16 | 00587a | f0 14       |                 beq 005890           
2834:000 | DONE wsp | em 16 16 |        |             |
2835:000 | DONE ins | em 16 16 | 00587c | 5a          |                 phy                  save counter
2836:000 | DONE ins | em 16 16 | 00587d | a1 00       |                 lda.dxi 00           get byte from address
2837:000 | DONE ins | em 16 16 | 00587f | 29 ff 00    |                 and.# 00ff           
2838:000 | DONE ins | em 16 16 | 005882 | a8          |                 tay                  
2839:000 | DONE ins | em 16 16 | 005883 | f6 00       |                 inc.dx 00            address modified in place
2840:000 | DONE wsp | em 16 16 |        |             |
2841:000 | DONE ins | em 16 16 | 005885 | 20 9a 5e    |                 jsr 005e9a           U.
2842:000 | DONE wsp | em 16 16 |        |             |
2843:000 | DONE ins | em 16 16 | 005888 | ca          |                 dex                  
2844:000 | DONE ins | em 16 16 | 005889 | ca          |                 dex                  
2845:000 | DONE ins | em 16 16 | 00588a | 94 00       |                 sty.dx 00            
2846:000 | DONE ins | em 16 16 | 00588c | 7a          |                 ply                  get counter back
2847:000 | DONE wsp | em 16 16 |        |             |
2848:000 | DONE ins | em 16 16 | 00588d | 88          |                 dey                  
2849:000 | DONE ins | em 16 16 | 00588e | 80 ea       |                 bra 00587a           
2850:000 | DONE wsp | em 16 16 |        |             |
2851:000 | DONE lbl | em 16 16 | 005890 |             | dump_done                            
2852:000 | DONE ins | em 16 16 | 005890 | 20 27 57    |                 jsr 005727           
2853:000 | DONE ins | em 16 16 | 005893 | 20 e7 53    |                 jsr 0053e7           
2854:000 | DONE wsp | em 16 16 |        |             |
2855:000 | DONE lbl | em 16 16 | 005896 |             | z_dump                               
2855:001 | DONE ins | em 16 16 | 005896 | 60          |                 rts                  
2856:000 | DONE wsp | em 16 16 |        |             |
2857:000 | DONE wsp | em 16 16 |        |             |
2858:000 | DONE cmt | em 16 16 |        |             | ; -------------------------------------------------------------------
2859:000 | DONE cmt | em 16 16 |        |             | ; DUP  ( n -- n n ) 4 bytes / 9 cycles
2860:000 | DONE cmt | em 16 16 |        |             | ; Duplicate first entry on Data Stack
2861:000 | DONE lbl | em 16 16 | 005897 |             | xt_dup                               
2862:000 | DONE ins | em 16 16 | 005897 | ca          |                 dex                  
2863:000 | DONE ins | em 16 16 | 005898 | ca          |                 dex                  
2864:000 | DONE ins | em 16 16 | 005899 | 94 00       |                 sty.dx 00            
2865:000 | DONE wsp | em 16 16 |        |             |
2866:000 | DONE lbl | em 16 16 | 00589b |             | z_dup                                
2866:001 | DONE ins | em 16 16 | 00589b | 60          |                 rts                  
2867:000 | DONE wsp | em 16 16 |        |             |
2868:000 | DONE cmt | em 16 16 |        |             | ; -------------------------------------------------------------------
2869:000 | DONE cmt | em 16 16 |        |             | ; EMIT ( char -- ) X bytes / X cycles
2870:000 | DONE cmt | em 16 16 |        |             | ; Run-time default for EMIT. The user can revector this by changing the value of
2871:000 | DONE cmt | em 16 16 |        |             | ; the OUTPUT variable. We ignore the MSB completely, and do not check to see if
2872:000 | DONE cmt | em 16 16 |        |             | ; we have been given a valid ASCII character. Note that we keep the A register
2873:000 | DONE cmt | em 16 16 |        |             | ; in 16 bit mode all the time - it is up to the kernel routine stored at OUTPUT
2874:000 | DONE cmt | em 16 16 |        |             | ; to deal with that. Don't make this native compile
2875:000 | DONE lbl | em 16 16 | 00589c |             | xt_emit                              
2876:000 | DONE dir | em 16 16 |        |             |         .!a16                        
2877:000 | DONE cmt | em 16 16 |        |             |                 ; we put the value in A so we don't have to switch the XY
2878:000 | DONE cmt | em 16 16 |        |             |                 ; register size
2879:000 | DONE ins | em 16 16 | 00589c | 98          |                 tya                  
2880:000 | DONE wsp | em 16 16 |        |             |
2881:000 | DONE cmt | em 16 16 |        |             |                 ; we DROP immediately so we can JMP.I to the output routine and
2882:000 | DONE cmt | em 16 16 |        |             |                 ; can use its RTS to take us back to the caller
2883:000 | DONE ins | em 16 16 | 00589d | b4 00       |                 ldy.dx 00            
2884:000 | DONE ins | em 16 16 | 00589f | e8          |                 inx                  
2885:000 | DONE ins | em 16 16 | 0058a0 | e8          |                 inx                  
2886:000 | DONE lbl | em 16 16 | 0058a1 |             | emit_a                               
2887:000 | DONE cmt | em 16 16 |        |             |                 ; Lots of times we want to print the character in A without
2888:000 | DONE cmt | em 16 16 |        |             |                 ; fooling around with the Data Stack. EMIT_A assumes a 16 bit
2889:000 | DONE cmt | em 16 16 |        |             |                 ; wide A register with the character in LSB and does not touch
2890:000 | DONE cmt | em 16 16 |        |             |                 ; the Data Stack, but can still be vectored via OUTPUT. Call it
2891:000 | DONE cmt | em 16 16 |        |             |                 ; with JSR as you would XT_EMIT
2892:000 | DONE ins | em 16 16 | 0058a1 | 6c 0e 00    |                 jmp.i 00000e         call to kernel, JSR/RTS
2893:000 | DONE wsp | em 16 16 |        |             |
2894:000 | DONE lbl | em 16 16 | 0058a4 |             | z_emit                               ; never reached
2895:000 | DONE wsp | em 16 16 |        |             |
2896:000 | DONE wsp | em 16 16 |        |             |
2897:000 | DONE cmt | em 16 16 |        |             | ; -------------------------------------------------------------------
2898:000 | DONE cmt | em 16 16 |        |             | ; ERASE ( addr u -- ) X bytes / X cycles
2899:000 | DONE cmt | em 16 16 |        |             | ; Set a region of memory to zero. Uses tmp2
2900:000 | DONE lbl | em 16 16 | 0058a4 |             | xt_erase                             
2901:000 | DONE dir | em 16 16 |        |             |         .!a16                        
2902:000 | DONE ins | em 16 16 | 0058a4 | ca          |                 dex                  
2903:000 | DONE ins | em 16 16 | 0058a5 | ca          |                 dex                  
2904:000 | DONE ins | em 16 16 | 0058a6 | 94 00       |                 sty.dx 00            
2905:000 | DONE wsp | em 16 16 |        |             |
2906:000 | DONE ins | em 16 16 | 0058a8 | a0 00 00    |                 ldy.# 0000           falls through to FILL
2907:000 | DONE wsp | em 16 16 |        |             |
2908:000 | DONE cmt | em 16 16 |        |             | ; -------------------------------------------------------------------
2909:000 | DONE cmt | em 16 16 |        |             | ; FILL ( addr u b -- ) X bytes / X cycles
2910:000 | DONE cmt | em 16 16 |        |             | ; Fill the given region of memory with the LSB of the TOS. Shares code with
2911:000 | DONE cmt | em 16 16 |        |             | ; ERASE
2912:000 | DONE lbl | em 16 16 | 0058ab |             | xt_fill                              
2913:000 | DONE ins | em 16 16 | 0058ab | b5 02       |                 lda.dx 02            address is 3OS
2914:000 | DONE ins | em 16 16 | 0058ad | 85 1e       |                 sta.d 00001e         
2915:000 | DONE wsp | em 16 16 |        |             |
2916:000 | DONE ins | em 16 16 | 0058af | 98          |                 tya                  
2917:000 | DONE ins | em 16 16 | 0058b0 | b4 00       |                 ldy.dx 00            don't bother with drop, to it later
2918:000 | DONE ins | em 16 16 | 0058b2 | e2 20       |                 sep 20               
2918:001 | DONE ctl | em  8 16 |        |             |         .!a8
2919:000 | DONE lbl | em  8 16 | 0058b4 |             | erase_loop                           
2920:000 | DONE ins | em  8 16 | 0058b4 | 88          |                 dey                  
2921:000 | DONE ins | em  8 16 | 0058b5 | 30 04       |                 bmi 0058bb           
2922:000 | DONE wsp | em  8 16 |        |             |
2923:000 | DONE ins | em  8 16 | 0058b7 | 91 1e       |                 sta.diy 00001e       
2924:000 | DONE ins | em  8 16 | 0058b9 | 80 f9       |                 bra 0058b4           
2925:000 | DONE wsp | em  8 16 |        |             |
2926:000 | DONE lbl | em  8 16 | 0058bb |             | erase_done                           
2927:000 | DONE ins | em  8 16 | 0058bb | c2 20       |                 rep 20               
2927:001 | DONE ctl | em 16 16 |        |             |         .!a16
2928:000 | DONE ins | em 16 16 | 0058bd | b4 02       |                 ldy.dx 02            dump three elements off the sack
2929:000 | DONE ins | em 16 16 | 0058bf | 8a          |                 txa                  
2930:000 | DONE ins | em 16 16 | 0058c0 | 18          |                 clc                  
2931:000 | DONE ins | em 16 16 | 0058c1 | 69 06 00    |                 adc.# 0006           
2932:000 | DONE ins | em 16 16 | 0058c4 | aa          |                 tax                  
2933:000 | DONE lbl | em 16 16 | 0058c5 |             | z_fill                               
2934:000 | DONE lbl | em 16 16 | 0058c5 |             | z_erase                              
2934:001 | DONE ins | em 16 16 | 0058c5 | 60          |                 rts                  
2935:000 | DONE wsp | em 16 16 |        |             |
2936:000 | DONE wsp | em 16 16 |        |             |
2937:000 | DONE cmt | em 16 16 |        |             | ; -------------------------------------------------------------------
2938:000 | DONE cmt | em 16 16 |        |             | ; EVALUATE ( addr u -- ) X bytes / X cycles
2939:000 | DONE cmt | em 16 16 |        |             | ; Execute string. Set SOURCE-ID to -1, make addr u the input source,
2940:000 | DONE cmt | em 16 16 |        |             | ; set >IN to zero. After processing the line, revert to old input source.
2941:000 | DONE lbl | em 16 16 | 0058c6 |             | xt_evaluate                          
2942:000 | DONE cmt | em 16 16 |        |             |                 ; We follow pforth's procedure of pushing SOURCE, SOURCE-ID, and
2943:000 | DONE cmt | em 16 16 |        |             |                 ; >IN to the Return Stack
2944:000 | DONE ins | em 16 16 | 0058c6 | a5 0c       |                 lda.d 00000c         >IN
2945:000 | DONE ins | em 16 16 | 0058c8 | 48          |                 pha                  
2946:000 | DONE ins | em 16 16 | 0058c9 | a5 06       |                 lda.d 000006         Input Source (SOURCE-ID)
2947:000 | DONE ins | em 16 16 | 0058cb | 48          |                 pha                  
2948:000 | DONE ins | em 16 16 | 0058cc | a5 08       |                 lda.d 000008         
2949:000 | DONE ins | em 16 16 | 0058ce | 48          |                 pha                  
2950:000 | DONE ins | em 16 16 | 0058cf | a5 0a       |                 lda.d 00000a         
2951:000 | DONE ins | em 16 16 | 0058d1 | 48          |                 pha                  
2952:000 | DONE wsp | em 16 16 |        |             |
2953:000 | DONE cmt | em 16 16 |        |             |                 ; set SOURCE-ID to -1
2954:000 | DONE ins | em 16 16 | 0058d2 | a9 ff ff    |                 lda.# 0ffff          
2955:000 | DONE ins | em 16 16 | 0058d5 | 85 06       |                 sta.d 000006         
2956:000 | DONE wsp | em 16 16 |        |             |
2957:000 | DONE cmt | em 16 16 |        |             |                 ; set >IN to zero
2958:000 | DONE ins | em 16 16 | 0058d7 | 64 0c       |                 stz.d 00000c         
2959:000 | DONE wsp | em 16 16 |        |             |
2960:000 | DONE cmt | em 16 16 |        |             |                 ; move TOS and NOS to input buffers
2961:000 | DONE ins | em 16 16 | 0058d9 | 84 0a       |                 sty.d 00000a         
2962:000 | DONE ins | em 16 16 | 0058db | b5 00       |                 lda.dx 00            
2963:000 | DONE ins | em 16 16 | 0058dd | 85 08       |                 sta.d 000008         
2964:000 | DONE wsp | em 16 16 |        |             |
2965:000 | DONE cmt | em 16 16 |        |             |                 ; dump address string from stack
2966:000 | DONE ins | em 16 16 | 0058df | b4 02       |                 ldy.dx 02            
2967:000 | DONE ins | em 16 16 | 0058e1 | e8          |                 inx                  
2968:000 | DONE ins | em 16 16 | 0058e2 | e8          |                 inx                  
2969:000 | DONE ins | em 16 16 | 0058e3 | e8          |                 inx                  
2970:000 | DONE ins | em 16 16 | 0058e4 | e8          |                 inx                  
2971:000 | DONE wsp | em 16 16 |        |             |
2972:000 | DONE ins | em 16 16 | 0058e5 | 20 f5 68    |                 jsr 0068f5           
2973:000 | DONE wsp | em 16 16 |        |             |
2974:000 | DONE cmt | em 16 16 |        |             |                 ; restore state from before evaluate
2975:000 | DONE ins | em 16 16 | 0058e8 | 68          |                 pla                  
2976:000 | DONE ins | em 16 16 | 0058e9 | 85 0a       |                 sta.d 00000a         
2977:000 | DONE ins | em 16 16 | 0058eb | 68          |                 pla                  
2978:000 | DONE ins | em 16 16 | 0058ec | 85 08       |                 sta.d 000008         
2979:000 | DONE ins | em 16 16 | 0058ee | 68          |                 pla                  
2980:000 | DONE ins | em 16 16 | 0058ef | 85 06       |                 sta.d 000006         
2981:000 | DONE ins | em 16 16 | 0058f1 | 68          |                 pla                  
2982:000 | DONE ins | em 16 16 | 0058f2 | 85 0c       |                 sta.d 00000c         
2983:000 | DONE wsp | em 16 16 |        |             |
2984:000 | DONE lbl | em 16 16 | 0058f4 |             | z_evaluate                           
2984:001 | DONE ins | em 16 16 | 0058f4 | 60          |                 rts                  
2985:000 | DONE wsp | em 16 16 |        |             |
2986:000 | DONE wsp | em 16 16 |        |             |
2987:000 | DONE cmt | em 16 16 |        |             | ; -------------------------------------------------------------------
2988:000 | DONE cmt | em 16 16 |        |             | ; EXECUTE ( xt -- ) X bytes / X cycles
2989:000 | DONE cmt | em 16 16 |        |             | ; Run a word with help of its xt on the TOS
2990:000 | DONE wsp | em 16 16 |        |             |
2991:000 | DONE cmt | em 16 16 |        |             | ; Reserve three bytes for the jump - three in case we want to expand to the full
2992:000 | DONE cmt | em 16 16 |        |             | ; range
2993:000 | DONE cmt | em 16 16 |        |             | ; TODO move this to someplace that is assured to be RAM, not possibly ROM
2994:000 | DONE lbl | em 16 16 | 0058f5 |             | execute_ip                           
2994:001 | DONE dir | em 16 16 | 0058f5 | (3 bytes)   |         .byte 00, 00, 00             
2994:001 | DONE dir | em 16 16 |        |             |                 00 00 00                 --  . . .
2995:000 | DONE wsp | em 16 16 |        |             |
2996:000 | DONE lbl | em 16 16 | 0058f8 |             | xt_execute                           
2997:000 | DONE dir | em 16 16 |        |             |         .!a16                        
2998:000 | DONE dir | em 16 16 |        |             |         .!xy16                       
2999:000 | DONE cmt | em 16 16 |        |             |                 ; Store the xt for later use and then drop it off the stack
3000:000 | DONE ins | em 16 16 | 0058f8 | 8c f5 58    |                 sty 0058f5           
3001:000 | DONE ins | em 16 16 | 0058fb | b4 00       |                 ldy.dx 00            
3002:000 | DONE ins | em 16 16 | 0058fd | e8          |                 inx                  
3003:000 | DONE ins | em 16 16 | 0058fe | e8          |                 inx                  
3004:000 | DONE wsp | em 16 16 |        |             |
3005:000 | DONE cmt | em 16 16 |        |             |                 ; Only JMP has the addressing mode we need. All our Forth
3006:000 | DONE cmt | em 16 16 |        |             |                 ; words end with a RTS instruction, so they will take us back to
3007:000 | DONE cmt | em 16 16 |        |             |                 ; the original caller of this routine without us having to muck
3008:000 | DONE cmt | em 16 16 |        |             |                 ; about with the Return Stack.
3009:000 | DONE ins | em 16 16 | 0058ff | 6c f5 58    |                 jmp.i 0058f5         JMP (EXECUTE_IP)
3010:000 | DONE wsp | em 16 16 |        |             |
3011:000 | DONE lbl | em 16 16 | 005902 |             | z_execute                            ; empty, no RTS required
3012:000 | DONE wsp | em 16 16 |        |             |
3013:000 | DONE wsp | em 16 16 |        |             |
3014:000 | DONE cmt | em 16 16 |        |             | ; -------------------------------------------------------------------
3015:000 | DONE cmt | em 16 16 |        |             | ; FALSE ( -- f ) 7 bytes / 12 cycles
3016:000 | DONE cmt | em 16 16 |        |             | ; Pushes value $0000 for Forth true on Data Stack. This is the same code as for
3017:000 | DONE cmt | em 16 16 |        |             | ; ZERO, see there. Dictionary entry should have xt_zero/z_zero instead of
3018:000 | DONE cmt | em 16 16 |        |             | ; xt_false/z_false
3019:000 | DONE wsp | em 16 16 |        |             |
3020:000 | DONE wsp | em 16 16 |        |             |
3021:000 | DONE cmt | em 16 16 |        |             | ; -------------------------------------------------------------------
3022:000 | DONE cmt | em 16 16 |        |             | ; FIND ( cs-addr -- addr 0 | xt 1 | xt -1 ) X bytes / X cycles
3023:000 | DONE cmt | em 16 16 |        |             | ; Find word in Dictionary. Included for backwards compatibility, Liara Forth
3024:000 | DONE cmt | em 16 16 |        |             | ; follows Gforth by replacing this with FIND-NAME. Counted string either returns
3025:000 | DONE cmt | em 16 16 |        |             | ; address with a fail flag if not found in the Dictionary, or the xt with a flag
3026:000 | DONE cmt | em 16 16 |        |             | ; to indicate if this is immediate or not. FIND is a wrapper around FIND-NAME.
3027:000 | DONE cmt | em 16 16 |        |             | ; See https://www.complang.tuwien.ac.at/forth/gforth/Docs-html/Word-Lists.html
3028:000 | DONE cmt | em 16 16 |        |             | ; and https://www.complang.tuwien.ac.at/forth/gforth/Docs-html/Name-token.html
3029:000 | DONE cmt | em 16 16 |        |             | ; for better solutions.
3030:000 | DONE lbl | em 16 16 | 005902 |             | xt_find                              
3031:000 | DONE cmt | em 16 16 |        |             |                 ; Convert counted string address to modern format
3032:000 | DONE ins | em 16 16 | 005902 | 20 19 57    |                 jsr 005719           ( addr u )
3033:000 | DONE wsp | em 16 16 |        |             |
3034:000 | DONE cmt | em 16 16 |        |             |                 ; Save address in case the conversion fails
3035:000 | DONE ins | em 16 16 | 005905 | b5 00       |                 lda.dx 00            
3036:000 | DONE ins | em 16 16 | 005907 | 48          |                 pha                  
3037:000 | DONE wsp | em 16 16 |        |             |
3038:000 | DONE ins | em 16 16 | 005908 | 20 33 59    |                 jsr 005933           ( nt | 0 )
3039:000 | DONE wsp | em 16 16 |        |             |
3040:000 | DONE ins | em 16 16 | 00590b | 98          |                 tya                  force flag check
3041:000 | DONE ins | em 16 16 | 00590c | d0 0a       |                 bne 005918           
3042:000 | DONE wsp | em 16 16 |        |             |
3043:000 | DONE cmt | em 16 16 |        |             |                 ; No word found. Return the address of the string, leaving 0 as
3044:000 | DONE cmt | em 16 16 |        |             |                 ; a false flag TOS
3045:000 | DONE ins | em 16 16 | 00590e | ca          |                 dex                  ( <?> 0 )
3046:000 | DONE ins | em 16 16 | 00590f | ca          |                 dex                  
3047:000 | DONE ins | em 16 16 | 005910 | a0 00 00    |                 ldy.# 0000           
3048:000 | DONE ins | em 16 16 | 005913 | 68          |                 pla                  
3049:000 | DONE ins | em 16 16 | 005914 | 95 00       |                 sta.dx 00            ( addr 0 )
3050:000 | DONE ins | em 16 16 | 005916 | 80 1a       |                 bra 005932           
3051:000 | DONE wsp | em 16 16 |        |             |
3052:000 | DONE lbl | em 16 16 | 005918 |             | find_found                           
3053:000 | DONE cmt | em 16 16 |        |             |                 ; We have a nt. Now we have to convert it to the format that
3054:000 | DONE cmt | em 16 16 |        |             |                 ; FIND wants to return Arrive here with ( nt )
3055:000 | DONE ins | em 16 16 | 005918 | 68          |                 pla                  we won't need the address after all
3056:000 | DONE wsp | em 16 16 |        |             |
3057:000 | DONE cmt | em 16 16 |        |             |                 ; We will need the nt later
3058:000 | DONE ins | em 16 16 | 005919 | 5a          |                 phy                  
3059:000 | DONE wsp | em 16 16 |        |             |
3060:000 | DONE ins | em 16 16 | 00591a | 20 13 5b    |                 jsr 005b13           ( nt -- xt )
3061:000 | DONE ins | em 16 16 | 00591d | ca          |                 dex                  
3062:000 | DONE ins | em 16 16 | 00591e | ca          |                 dex                  
3063:000 | DONE ins | em 16 16 | 00591f | 94 00       |                 sty.dx 00            ( xt <?> )
3064:000 | DONE wsp | em 16 16 |        |             |
3065:000 | DONE cmt | em 16 16 |        |             |                 ; If immediate, return 1 (not: zero), else return -1
3066:000 | DONE ins | em 16 16 | 005921 | 7a          |                 ply                  get nt back
3067:000 | DONE ins | em 16 16 | 005922 | b9 00 00    |                 lda.y 0000           
3068:000 | DONE ins | em 16 16 | 005925 | a0 00 00    |                 ldy.# 0000           prepare flag
3069:000 | DONE wsp | em 16 16 |        |             |
3070:000 | DONE ins | em 16 16 | 005928 | eb          |                 xba                  flags are MSB
3071:000 | DONE ins | em 16 16 | 005929 | 29 02 00    |                 and.# IM             Mask all but IM bit
3072:000 | DONE wsp | em 16 16 |        |             |
3073:000 | DONE ins | em 16 16 | 00592c | d0 03       |                 bne 005931           IMMEDIATE word, return 1
3074:000 | DONE ins | em 16 16 | 00592e | 88          |                 dey                  not emmediate, return -1
3075:000 | DONE ins | em 16 16 | 00592f | 80 01       |                 bra 005932           
3076:000 | DONE wsp | em 16 16 |        |             |
3077:000 | DONE lbl | em 16 16 | 005931 |             | find_imm                             
3078:000 | DONE ins | em 16 16 | 005931 | c8          |                 iny                  
3079:000 | DONE wsp | em 16 16 |        |             |
3080:000 | DONE lbl | em 16 16 | 005932 |             | z_find                               
3080:001 | DONE ins | em 16 16 | 005932 | 60          |                 rts                  
3081:000 | DONE wsp | em 16 16 |        |             |
3082:000 | DONE cmt | em 16 16 |        |             | ; -------------------------------------------------------------------
3083:000 | DONE cmt | em 16 16 |        |             | ; FIND-NAME ( addr u -- nt | 0 ) 91 bytes / X cycles
3084:000 | DONE cmt | em 16 16 |        |             | ; Given a string, find the Name Token (nt) of a word or return zero if the word
3085:000 | DONE cmt | em 16 16 |        |             | ; is not in the dictionary. We use this instead of ancient FIND to look up words
3086:000 | DONE cmt | em 16 16 |        |             | ; in the Dictionary passed by PARSE-NAME. Note this returns the nt, not the xt
3087:000 | DONE cmt | em 16 16 |        |             | ; of a word like FIND. To convert, use NAME>INT. This is a Gforth word. See
3088:000 | DONE cmt | em 16 16 |        |             | ; https://www.complang.tuwien.ac.at/forth/gforth/Docs-html/Name-token.html
3089:000 | DONE cmt | em 16 16 |        |             | ; FIND calls this word for the hard word
3090:000 | DONE lbl | em 16 16 | 005933 |             | xt_find-name                         
3091:000 | DONE cmt | em 16 16 |        |             |                 ; We abort when we get an empty string, that is, one with
3092:000 | DONE cmt | em 16 16 |        |             |                 ; a length of zero TOS. We could test for this, but it will
3093:000 | DONE cmt | em 16 16 |        |             |                 ; happen so rarely that the speed penalty is higher if we run
3094:000 | DONE cmt | em 16 16 |        |             |                 ; the test for every single call. Looking for an empty string
3095:000 | DONE cmt | em 16 16 |        |             |                 ; does force us to check the whole dictionary, though. The test
3096:000 | DONE cmt | em 16 16 |        |             |                 ; would be 3 bytes and 4 to 6 cycles longer:
3097:000 | DONE cmt | em 16 16 |        |             |                 ;       tya                     ; force flag check
3098:000 | DONE cmt | em 16 16 |        |             |                 ;       beq find-name_failure
3099:000 | DONE dir | em 16 16 |        |             |         .!a16                        
3100:000 | DONE dir | em 16 16 |        |             |         .!xy16                       
3101:000 | DONE cmt | em 16 16 |        |             |                 ; set up loop for the first time
3102:000 | DONE ins | em 16 16 | 005933 | 84 24       |                 sty.d 000024         length of mystery string in tmptos, Y now free
3103:000 | DONE wsp | em 16 16 |        |             |
3104:000 | DONE ins | em 16 16 | 005935 | a4 02       |                 ldy.d 000002         
3105:000 | DONE ins | em 16 16 | 005937 | 84 1c       |                 sty.d 00001c         nt of first Dictionary word
3106:000 | DONE wsp | em 16 16 |        |             |
3107:000 | DONE ins | em 16 16 | 005939 | b4 00       |                 ldy.dx 00            
3108:000 | DONE ins | em 16 16 | 00593b | 84 1e       |                 sty.d 00001e         address of mystery string, was NOS
3109:000 | DONE wsp | em 16 16 |        |             |
3110:000 | DONE lbl | em 16 16 | 00593d |             | find-name_loop                       
3111:000 | DONE cmt | em 16 16 |        |             |                 ; First quick test: Are strings the same length?
3112:000 | DONE ins | em 16 16 | 00593d | b2 1c       |                 lda.di 00001c        LSB in first header word is length
3113:000 | DONE ins | em 16 16 | 00593f | 29 ff 00    |                 and.# 00ff           
3114:000 | DONE ins | em 16 16 | 005942 | c5 24       |                 cmp.d 000024         we test LSB
3115:000 | DONE cmt | em 16 16 |        |             |                 ; Most of the time, it will not be the same, so we save one
3116:000 | DONE cmt | em 16 16 |        |             |                 ; cycle pro loop if we only take the branch when they are the
3117:000 | DONE cmt | em 16 16 |        |             |                 ; same
3118:000 | DONE ins | em 16 16 | 005944 | f0 0c       |                 beq 005952           
3119:000 | DONE wsp | em 16 16 |        |             |
3120:000 | DONE lbl | em 16 16 | 005946 |             | find-name_next_entry                 
3121:000 | DONE cmt | em 16 16 |        |             |                 ; next header address is two bytes down
3122:000 | DONE ins | em 16 16 | 005946 | e6 1c       |                 inc.d 00001c         
3123:000 | DONE ins | em 16 16 | 005948 | e6 1c       |                 inc.d 00001c         
3124:000 | DONE ins | em 16 16 | 00594a | b2 1c       |                 lda.di 00001c        LDA (TMP1)
3125:000 | DONE wsp | em 16 16 |        |             |
3126:000 | DONE cmt | em 16 16 |        |             |                 ; a zero entry marks the end of the Dictionary
3127:000 | DONE ins | em 16 16 | 00594c | f0 36       |                 beq 005984           
3128:000 | DONE wsp | em 16 16 |        |             |
3129:000 | DONE ins | em 16 16 | 00594e | 85 1c       |                 sta.d 00001c         new header
3130:000 | DONE ins | em 16 16 | 005950 | 80 eb       |                 bra 00593d           
3131:000 | DONE wsp | em 16 16 |        |             |
3132:000 | DONE lbl | em 16 16 | 005952 |             | find-name_chars                      
3133:000 | DONE cmt | em 16 16 |        |             |                 ; Yes, same length, so we compare characters
3134:000 | DONE wsp | em 16 16 |        |             |
3135:000 | DONE cmt | em 16 16 |        |             |                 ; Switch A to 8 bit for this
3136:000 | DONE ins | em 16 16 | 005952 | e2 20       |                 sep 20               
3136:001 | DONE ctl | em  8 16 |        |             |         .!a8
3137:000 | DONE cmt | em  8 16 |        |             |                 ; Second quick test: Check first char, which is 8 bytes into the
3138:000 | DONE cmt | em  8 16 |        |             |                 ; header
3139:000 | DONE ins | em  8 16 | 005954 | a0 08 00    |                 ldy.# 0008           
3140:000 | DONE ins | em  8 16 | 005957 | b1 1c       |                 lda.diy 00001c       LDA (TMP1),Y - first char of entry
3141:000 | DONE ins | em  8 16 | 005959 | d2 1e       |                 cmp.di 00001e        CMP (TMP2) - first char of mystery string
3142:000 | DONE ins | em  8 16 | 00595b | f0 04       |                 beq 005961           
3143:000 | DONE wsp | em  8 16 |        |             |
3144:000 | DONE lbl | em  8 16 | 00595d |             | find-name_char_nomatcnt_8            
3145:000 | DONE cmt | em  8 16 |        |             |                 ; First char is not the same, next entry
3146:000 | DONE ins | em  8 16 | 00595d | c2 20       |                 rep 20               
3146:001 | DONE ctl | em 16 16 |        |             |         .!a16
3147:000 | DONE ins | em 16 16 | 00595f | 80 e5       |                 bra 005946           
3148:000 | DONE wsp | em 16 16 |        |             |
3149:000 | DONE lbl | em 16 16 | 005961 |             | find-name_all_chars                  
3150:000 | DONE dir | em  8 16 |        |             |         .!a8                         
3151:000 | DONE cmt | em  8 16 |        |             |                 ; String length is the same, and the first character is the
3152:000 | DONE cmt | em  8 16 |        |             |                 ; same. If the word is only one character long, we're done
3153:000 | DONE ins | em  8 16 | 005961 | a4 24       |                 ldy.d 000024         
3154:000 | DONE ins | em  8 16 | 005963 | 88          |                 dey                  faster and shorter than CPY.# 01
3155:000 | DONE ins | em  8 16 | 005964 | f0 18       |                 beq 00597e           
3156:000 | DONE wsp | em  8 16 |        |             |
3157:000 | DONE cmt | em  8 16 |        |             |                 ; No such luck: The strings are the same length and the first
3158:000 | DONE cmt | em  8 16 |        |             |                 ; char is the same, but the word is more than one char long. So
3159:000 | DONE cmt | em  8 16 |        |             |                 ; we suck it up and compare every single character. We go from
3160:000 | DONE cmt | em  8 16 |        |             |                 ; back to front, because words like CELLS and CELL+ would take
3161:000 | DONE cmt | em  8 16 |        |             |                 ; longer otherwise. We can also shorten the loop by one because
3162:000 | DONE cmt | em  8 16 |        |             |                 ; we've already compared the first char.
3163:000 | DONE wsp | em  8 16 |        |             |
3164:000 | DONE cmt | em  8 16 |        |             |                 ; Even worse, we have to add 8 bytes to address of Dictionary
3165:000 | DONE cmt | em  8 16 |        |             |                 ; string to allow testing with one loop. We need this like
3166:000 | DONE cmt | em  8 16 |        |             |                 ; a hole in the head because we just switched A to 8 bit.
3167:000 | DONE cmt | em  8 16 |        |             |                 ; However, staying with an 8-bit A is even slower.
3168:000 | DONE ins | em  8 16 | 005966 | c2 20       |                 rep 20               
3168:001 | DONE ctl | em 16 16 |        |             |         .!a16
3169:000 | DONE ins | em 16 16 | 005968 | a5 1c       |                 lda.d 00001c         address of Dictionary string
3170:000 | DONE ins | em 16 16 | 00596a | 18          |                 clc                  
3171:000 | DONE ins | em 16 16 | 00596b | 69 08 00    |                 adc.# 0008           
3172:000 | DONE ins | em 16 16 | 00596e | 85 20       |                 sta.d 000020         
3173:000 | DONE ins | em 16 16 | 005970 | e2 20       |                 sep 20               
3173:001 | DONE ctl | em  8 16 |        |             |         .!a8
3174:000 | DONE ins | em  8 16 | 005972 | a4 24       |                 ldy.d 000024         get length of strings as loop index
3175:000 | DONE ins | em  8 16 | 005974 | 88          |                 dey                  first index is length minus 1
3176:000 | DONE wsp | em  8 16 |        |             |
3177:000 | DONE lbl | em  8 16 | 005975 |             | @                                    
3178:000 | DONE ins | em  8 16 | 005975 | b1 1e       |                 lda.diy 00001e       LDA (TMP2),Y - last char of mystery string
3179:000 | DONE ins | em  8 16 | 005977 | d1 20       |                 cmp.diy 000020       CMP (TMP1),Y - last char of DP string
3180:000 | DONE ins | em  8 16 | 005979 | d0 e2       |                 bne 00595d           
3181:000 | DONE ins | em  8 16 | 00597b | 88          |                 dey                  start of string (Y=0) was already tested
3182:000 | DONE ins | em  8 16 | 00597c | d0 f7       |                 bne 005975           
3183:000 | DONE wsp | em  8 16 |        |             |
3184:000 | DONE lbl | em  8 16 | 00597e |             | find-name_success                    
3185:000 | DONE cmt | em  8 16 |        |             |                 ; If we reach here, the strings are the same and we have a match
3186:000 | DONE cmt | em  8 16 |        |             |                 ; We get here with an 8 bit A
3187:000 | DONE ins | em  8 16 | 00597e | c2 20       |                 rep 20               
3187:001 | DONE ctl | em 16 16 |        |             |         .!a16
3188:000 | DONE ins | em 16 16 | 005980 | a4 1c       |                 ldy.d 00001c         get the correct DP
3189:000 | DONE ins | em 16 16 | 005982 | 80 03       |                 bra 005987           
3190:000 | DONE wsp | em 16 16 |        |             |
3191:000 | DONE wsp | em 16 16 |        |             |
3192:000 | DONE lbl | em 16 16 | 005984 |             | find-name_failure_16                 
3193:000 | DONE cmt | em 16 16 |        |             |                 ; Word not found in Dictionary, return zero. Assumes A is 16
3194:000 | DONE cmt | em 16 16 |        |             |                 ; bit
3195:000 | DONE ins | em 16 16 | 005984 | a0 00 00    |                 ldy.# 0000           fall thru
3196:000 | DONE wsp | em 16 16 |        |             |
3197:000 | DONE lbl | em 16 16 | 005987 |             | find-name_done                       
3198:000 | DONE ins | em 16 16 | 005987 | e8          |                 inx                  drop old address (NIP)
3199:000 | DONE ins | em 16 16 | 005988 | e8          |                 inx                  
3200:000 | DONE wsp | em 16 16 |        |             |
3201:000 | DONE lbl | em 16 16 | 005989 |             | z_find-name                          
3201:001 | DONE ins | em 16 16 | 005989 | 60          |                 rts                  
3202:000 | DONE wsp | em 16 16 |        |             |
3203:000 | DONE wsp | em 16 16 |        |             |
3204:000 | DONE cmt | em 16 16 |        |             | ; -------------------------------------------------------------------
3205:000 | DONE cmt | em 16 16 |        |             | ; FM/MOD ( d n1 -- n2 n3 ) X bytes / X cycles
3206:000 | DONE cmt | em 16 16 |        |             | ; Floored division, compare with SM/REM. We define FM/MOD in terms of UM/MOD,
3207:000 | DONE cmt | em 16 16 |        |             | ; see http://git.savannah.gnu.org/cgit/gforth.git/tree/prim We prefer to use
3208:000 | DONE cmt | em 16 16 |        |             | ; SM/REM for further words. You could also define FM/MOD in Terms of SM/REM,
3209:000 | DONE cmt | em 16 16 |        |             | ; see http://www.figuk.plus.com/build/arith.htm
3210:000 | DONE cmt | em 16 16 |        |             | ; Original Forth: DUP >R DUP 0< IF NEGATE >R DNEGATE R> THEN >R DUP 0< R@ AND +
3211:000 | DONE cmt | em 16 16 |        |             | ; R> UM/MOD R> 0< IF SWAP NEGATE SWAP THEN ;
3212:000 | DONE cmt | em 16 16 |        |             | ; TODO this is just a 1:1 list of jumps, optimize once it is working
3213:000 | DONE lbl | em 16 16 | 00598a |             | xt_fmmod                             
3214:000 | DONE ins | em 16 16 | 00598a | 20 97 58    |                 jsr 005897           
3215:000 | DONE ins | em 16 16 | 00598d | 20 c0 51    |                 jsr 0051c0           
3216:000 | DONE ins | em 16 16 | 005990 | 20 97 58    |                 jsr 005897           
3217:000 | DONE wsp | em 16 16 |        |             |
3218:000 | DONE ins | em 16 16 | 005993 | 98          |                 tya                  0< IF
3219:000 | DONE ins | em 16 16 | 005994 | 10 12       |                 bpl 0059a8           
3220:000 | DONE wsp | em 16 16 |        |             |
3221:000 | DONE ins | em 16 16 | 005996 | b4 00       |                 ldy.dx 00            
3222:000 | DONE ins | em 16 16 | 005998 | e8          |                 inx                  
3223:000 | DONE ins | em 16 16 | 005999 | e8          |                 inx                  
3224:000 | DONE wsp | em 16 16 |        |             |
3225:000 | DONE ins | em 16 16 | 00599a | 20 3e 5b    |                 jsr 005b3e           
3226:000 | DONE ins | em 16 16 | 00599d | 20 c0 51    |                 jsr 0051c0           
3227:000 | DONE ins | em 16 16 | 0059a0 | 20 3d 58    |                 jsr 00583d           
3228:000 | DONE ins | em 16 16 | 0059a3 | 20 bd 5c    |                 jsr 005cbd           
3229:000 | DONE wsp | em 16 16 |        |             |
3230:000 | DONE ins | em 16 16 | 0059a6 | 80 04       |                 bra 0059ac           
3231:000 | DONE lbl | em 16 16 | 0059a8 |             | fmmod_1                              
3232:000 | DONE ins | em 16 16 | 0059a8 | b4 00       |                 ldy.dx 00            
3233:000 | DONE ins | em 16 16 | 0059aa | e8          |                 inx                  
3234:000 | DONE ins | em 16 16 | 0059ab | e8          |                 inx                  
3235:000 | DONE lbl | em 16 16 | 0059ac |             | fmmod_1_1                            
3236:000 | DONE ins | em 16 16 | 0059ac | 20 c0 51    |                 jsr 0051c0           
3237:000 | DONE ins | em 16 16 | 0059af | 20 97 58    |                 jsr 005897           
3238:000 | DONE ins | em 16 16 | 0059b2 | 20 7d 53    |                 jsr 00537d           
3239:000 | DONE ins | em 16 16 | 0059b5 | 20 b4 5c    |                 jsr 005cb4           
3240:000 | DONE ins | em 16 16 | 0059b8 | 20 5d 55    |                 jsr 00555d           
3241:000 | DONE ins | em 16 16 | 0059bb | 20 2a 53    |                 jsr 00532a           
3242:000 | DONE ins | em 16 16 | 0059be | 20 bd 5c    |                 jsr 005cbd           
3243:000 | DONE ins | em 16 16 | 0059c1 | 20 1f 5f    |                 jsr 005f1f           
3244:000 | DONE ins | em 16 16 | 0059c4 | 20 bd 5c    |                 jsr 005cbd           
3245:000 | DONE wsp | em 16 16 |        |             |
3246:000 | DONE ins | em 16 16 | 0059c7 | 98          |                 tya                  
3247:000 | DONE ins | em 16 16 | 0059c8 | 10 0f       |                 bpl 0059d9           
3248:000 | DONE wsp | em 16 16 |        |             |
3249:000 | DONE ins | em 16 16 | 0059ca | b4 00       |                 ldy.dx 00            
3250:000 | DONE ins | em 16 16 | 0059cc | e8          |                 inx                  
3251:000 | DONE ins | em 16 16 | 0059cd | e8          |                 inx                  
3252:000 | DONE wsp | em 16 16 |        |             |
3253:000 | DONE ins | em 16 16 | 0059ce | 20 58 5e    |                 jsr 005e58           
3254:000 | DONE ins | em 16 16 | 0059d1 | 20 3e 5b    |                 jsr 005b3e           
3255:000 | DONE ins | em 16 16 | 0059d4 | 20 58 5e    |                 jsr 005e58           
3256:000 | DONE wsp | em 16 16 |        |             |
3257:000 | DONE ins | em 16 16 | 0059d7 | 80 04       |                 bra 0059dd           
3258:000 | DONE lbl | em 16 16 | 0059d9 |             | fmmod_2                              
3259:000 | DONE wsp | em 16 16 |        |             |
3260:000 | DONE ins | em 16 16 | 0059d9 | b4 00       |                 ldy.dx 00            
3261:000 | DONE ins | em 16 16 | 0059db | e8          |                 inx                  
3262:000 | DONE ins | em 16 16 | 0059dc | e8          |                 inx                  
3263:000 | DONE wsp | em 16 16 |        |             |
3264:000 | DONE lbl | em 16 16 | 0059dd |             | fmmod_2_1                            
3265:000 | DONE wsp | em 16 16 |        |             |
3266:000 | DONE lbl | em 16 16 | 0059dd |             | z_fmmod                              
3266:001 | DONE ins | em 16 16 | 0059dd | 60          |                 rts                  
3267:000 | DONE wsp | em 16 16 |        |             |
3268:000 | DONE wsp | em 16 16 |        |             |
3269:000 | DONE cmt | em 16 16 |        |             | ; -------------------------------------------------------------------
3270:000 | DONE cmt | em 16 16 |        |             | ; KEY ( -- char ) X bytes / X cycles
3271:000 | DONE cmt | em 16 16 |        |             | ; Get one character from the input, without echoing.
3272:000 | DONE lbl | em 16 16 | 0059de |             | xt_key                               
3273:000 | DONE dir | em 16 16 |        |             |         .!a16                        
3274:000 | DONE wsp | em 16 16 |        |             |
3275:000 | DONE ins | em 16 16 | 0059de | ca          |                 dex                  make room on Data Stack
3276:000 | DONE ins | em 16 16 | 0059df | ca          |                 dex                  
3277:000 | DONE ins | em 16 16 | 0059e0 | b4 00       |                 ldy.dx 00            
3278:000 | DONE wsp | em 16 16 |        |             |
3279:000 | DONE cmt | em 16 16 |        |             |                 ; There is no "jsr.i" instruction, so we have to do this the
3280:000 | DONE cmt | em 16 16 |        |             |                 ; hard way
3281:000 | DONE ins | em 16 16 | 0059e2 | 86 22       |                 stx.d 000022         
3282:000 | DONE ins | em 16 16 | 0059e4 | a2 00 00    |                 ldx.# 0000           
3283:000 | DONE ins | em 16 16 | 0059e7 | fc 10 00    |                 jsr.xi 000010        JSR (INPUT,X) - returns char in A
3284:000 | DONE ins | em 16 16 | 0059ea | a6 22       |                 ldx.d 000022         
3285:000 | DONE wsp | em 16 16 |        |             |
3286:000 | DONE ins | em 16 16 | 0059ec | a8          |                 tay                  
3287:000 | DONE wsp | em 16 16 |        |             |
3288:000 | DONE lbl | em 16 16 | 0059ed |             | z_key                                
3288:001 | DONE ins | em 16 16 | 0059ed | 60          |                 rts                  
3289:000 | DONE wsp | em 16 16 |        |             |
3290:000 | DONE wsp | em 16 16 |        |             |
3291:000 | DONE cmt | em 16 16 |        |             | ; -------------------------------------------------------------------
3292:000 | DONE cmt | em 16 16 |        |             | ; IMMEDIATE ( -- ) X bytes / X cycles
3293:000 | DONE cmt | em 16 16 |        |             | ; Mark the most recently defined word as IMMEDIATE. Will only affect the last
3294:000 | DONE cmt | em 16 16 |        |             | ; word in the Dictionary. If the words is still in ROM for some reason, this
3295:000 | DONE cmt | em 16 16 |        |             | ; will have no effect and will fail without an error message
3296:000 | DONE lbl | em 16 16 | 0059ee |             | xt_immediate                         
3297:000 | DONE dir | em 16 16 |        |             |         .!a16                        
3298:000 | DONE ins | em 16 16 | 0059ee | a9 02 00    |                 lda.# IM             Immediate flag
3299:000 | DONE ins | em 16 16 | 0059f1 | eb          |                 xba                  flags are MSB
3300:000 | DONE ins | em 16 16 | 0059f2 | 12 02       |                 ora.di 000002        ORA (DP)
3301:000 | DONE ins | em 16 16 | 0059f4 | 92 02       |                 sta.di 000002        
3302:000 | DONE wsp | em 16 16 |        |             |
3303:000 | DONE lbl | em 16 16 | 0059f6 |             | z_immediate                          
3303:001 | DONE ins | em 16 16 | 0059f6 | 60          |                 rts                  
3304:000 | DONE wsp | em 16 16 |        |             |
3305:000 | DONE wsp | em 16 16 |        |             |
3306:000 | DONE cmt | em 16 16 |        |             | ; -------------------------------------------------------------------
3307:000 | DONE cmt | em 16 16 |        |             | ; INPUT ( -- addr ) X bytes / X cycles
3308:000 | DONE cmt | em 16 16 |        |             | ; Return the address where the jump targeet for KEY is stored
3309:000 | DONE lbl | em 16 16 | 0059f7 |             | xt_input                             
3310:000 | DONE ins | em 16 16 | 0059f7 | ca          |                 dex                  
3311:000 | DONE ins | em 16 16 | 0059f8 | ca          |                 dex                  
3312:000 | DONE ins | em 16 16 | 0059f9 | 94 00       |                 sty.dx 00            
3313:000 | DONE wsp | em 16 16 |        |             |
3314:000 | DONE ins | em 16 16 | 0059fb | a0 10 00    |                 ldy.# 000010         
3315:000 | DONE wsp | em 16 16 |        |             |
3316:000 | DONE lbl | em 16 16 | 0059fe |             | z_input                              
3316:001 | DONE ins | em 16 16 | 0059fe | 60          |                 rts                  
3317:000 | DONE wsp | em 16 16 |        |             |
3318:000 | DONE wsp | em 16 16 |        |             |
3319:000 | DONE cmt | em 16 16 |        |             | ; -------------------------------------------------------------------
3320:000 | DONE cmt | em 16 16 |        |             | ; INT>NAME ( xt -- nt ) X bytes / X cycles
3321:000 | DONE cmt | em 16 16 |        |             | ; Given an execution token (xt), return the name token (nt). This is called
3322:000 | DONE cmt | em 16 16 |        |             | ; >NAME in Gforth, but changed to INT>NAME for Liara to fit better with
3323:000 | DONE cmt | em 16 16 |        |             | ; NAME>INT.
3324:000 | DONE lbl | em 16 16 | 0059ff |             | xt_int-name                          
3325:000 | DONE cmt | em 16 16 |        |             |                 ; Unfortunately, to find the header, we have to walk through the
3326:000 | DONE cmt | em 16 16 |        |             |                 ; dictionary
3327:000 | DONE ins | em 16 16 | 0059ff | a5 02       |                 lda.d 000002         nt of first Dictionary word
3328:000 | DONE ins | em 16 16 | 005a01 | 85 1c       |                 sta.d 00001c         
3329:000 | DONE wsp | em 16 16 |        |             |
3330:000 | DONE ins | em 16 16 | 005a03 | 84 24       |                 sty.d 000024         xt of mystery word
3331:000 | DONE ins | em 16 16 | 005a05 | a0 04 00    |                 ldy.# 0004           xt in header is two bytes down
3332:000 | DONE wsp | em 16 16 |        |             |
3333:000 | DONE lbl | em 16 16 | 005a08 |             | in_loop                              
3334:000 | DONE ins | em 16 16 | 005a08 | b1 1c       |                 lda.diy 00001c       LDA (TMP1),Y - get xt of current nt
3335:000 | DONE ins | em 16 16 | 005a0a | c5 24       |                 cmp.d 000024         
3336:000 | DONE ins | em 16 16 | 005a0c | f0 12       |                 beq 005a20           
3337:000 | DONE wsp | em 16 16 |        |             |
3338:000 | DONE cmt | em 16 16 |        |             |                 ; no joy, next header address is two bytes down
3339:000 | DONE ins | em 16 16 | 005a0e | e6 1c       |                 inc.d 00001c         
3340:000 | DONE ins | em 16 16 | 005a10 | e6 1c       |                 inc.d 00001c         
3341:000 | DONE ins | em 16 16 | 005a12 | b2 1c       |                 lda.di 00001c        LDA (TMP1)
3342:000 | DONE wsp | em 16 16 |        |             |
3343:000 | DONE cmt | em 16 16 |        |             |                 ; a zero entry marks the end of the Dictionary
3344:000 | DONE ins | em 16 16 | 005a14 | f0 04       |                 beq 005a1a           
3345:000 | DONE wsp | em 16 16 |        |             |
3346:000 | DONE ins | em 16 16 | 005a16 | 85 1c       |                 sta.d 00001c         new header
3347:000 | DONE ins | em 16 16 | 005a18 | 80 ee       |                 bra 005a08           
3348:000 | DONE wsp | em 16 16 |        |             |
3349:000 | DONE lbl | em 16 16 | 005a1a |             | in_notfound                          
3350:000 | DONE ins | em 16 16 | 005a1a | a9 13 71    |                 lda.# 007113         
3351:000 | DONE ins | em 16 16 | 005a1d | 4c 7a 69    |                 jmp 00697a           
3352:000 | DONE wsp | em 16 16 |        |             |
3353:000 | DONE lbl | em 16 16 | 005a20 |             | in_found                             
3354:000 | DONE ins | em 16 16 | 005a20 | a4 1c       |                 ldy.d 00001c         replace xt by nt
3355:000 | DONE wsp | em 16 16 |        |             |
3356:000 | DONE lbl | em 16 16 | 005a22 |             | z_int-name                           
3356:001 | DONE ins | em 16 16 | 005a22 | 60          |                 rts                  
3357:000 | DONE wsp | em 16 16 |        |             |
3358:000 | DONE wsp | em 16 16 |        |             |
3359:000 | DONE cmt | em 16 16 |        |             | ; -------------------------------------------------------------------
3360:000 | DONE cmt | em 16 16 |        |             | ; INVERT ( n -- n ) 5 bytes / X cycles
3361:000 | DONE cmt | em 16 16 |        |             | ; Complement of TOS
3362:000 | DONE lbl | em 16 16 | 005a23 |             | xt_invert                            
3363:000 | DONE dir | em 16 16 |        |             |         .!a16                        
3364:000 | DONE ins | em 16 16 | 005a23 | 98          |                 tya                  
3365:000 | DONE ins | em 16 16 | 005a24 | 49 ff ff    |                 eor.# 0ffff          
3366:000 | DONE ins | em 16 16 | 005a27 | a8          |                 tay                  
3367:000 | DONE wsp | em 16 16 |        |             |
3368:000 | DONE lbl | em 16 16 | 005a28 |             | z_invert                             
3368:001 | DONE ins | em 16 16 | 005a28 | 60          |                 rts                  
3369:000 | DONE wsp | em 16 16 |        |             |
3370:000 | DONE wsp | em 16 16 |        |             |
3371:000 | DONE cmt | em 16 16 |        |             | ; -------------------------------------------------------------------
3372:000 | DONE cmt | em 16 16 |        |             | ; HERE ( -- u ) 6 bytes / 13 cycles
3373:000 | DONE cmt | em 16 16 |        |             | ; Push Compiler Pointer address on the Data Stack
3374:000 | DONE lbl | em 16 16 | 005a29 |             | xt_here                              
3375:000 | DONE dir | em 16 16 |        |             |         .!xy16                       
3376:000 | DONE ins | em 16 16 | 005a29 | ca          |                 dex                  
3377:000 | DONE ins | em 16 16 | 005a2a | ca          |                 dex                  
3378:000 | DONE ins | em 16 16 | 005a2b | 94 00       |                 sty.dx 00            
3379:000 | DONE wsp | em 16 16 |        |             |
3380:000 | DONE ins | em 16 16 | 005a2d | a4 00       |                 ldy.d 000000         
3381:000 | DONE wsp | em 16 16 |        |             |
3382:000 | DONE lbl | em 16 16 | 005a2f |             | z_here                               
3382:001 | DONE ins | em 16 16 | 005a2f | 60          |                 rts                  
3383:000 | DONE wsp | em 16 16 |        |             |
3384:000 | DONE cmt | em 16 16 |        |             | ; -------------------------------------------------------------------
3385:000 | DONE cmt | em 16 16 |        |             | ; HEX ( -- ) X bytes / X cycles
3386:000 | DONE cmt | em 16 16 |        |             | ; Change radix for number conversion to 16
3387:000 | DONE lbl | em 16 16 | 005a30 |             | xt_hex                               
3388:000 | DONE dir | em 16 16 |        |             |         .!a16                        
3389:000 | DONE ins | em 16 16 | 005a30 | a9 10 00    |                 lda.# 0010           
3390:000 | DONE ins | em 16 16 | 005a33 | 85 16       |                 sta.d 000016         
3391:000 | DONE wsp | em 16 16 |        |             |
3392:000 | DONE lbl | em 16 16 | 005a35 |             | z_hex                                
3392:001 | DONE ins | em 16 16 | 005a35 | 60          |                 rts                  
3393:000 | DONE wsp | em 16 16 |        |             |
3394:000 | DONE cmt | em 16 16 |        |             | ; -------------------------------------------------------------------
3395:000 | DONE cmt | em 16 16 |        |             | ; HOLD ( char -- ) X bytes / X cycles
3396:000 | DONE cmt | em 16 16 |        |             | ; Insert a character at the current position of a pictured numeric output string
3397:000 | DONE cmt | em 16 16 |        |             | ; Code based on https://github.com/philburk/pforth/blob/master/fth/numberio.fth
3398:000 | DONE cmt | em 16 16 |        |             | ; Forth code is : HOLD  -1 HLD +!  HLD @ C! ;  We use the the internal variable
3399:000 | DONE cmt | em 16 16 |        |             | ; tohold instead of HLD.
3400:000 | DONE lbl | em 16 16 | 005a36 |             | xt_hold                              
3401:000 | DONE dir | em 16 16 |        |             |         .!a16                        
3402:000 | DONE ins | em 16 16 | 005a36 | c6 18       |                 dec.d 000018         -1 HLD +!
3403:000 | DONE wsp | em 16 16 |        |             |
3404:000 | DONE ins | em 16 16 | 005a38 | 98          |                 tya                  
3405:000 | DONE ins | em 16 16 | 005a39 | e2 20       |                 sep 20               
3405:001 | DONE ctl | em  8 16 |        |             |         .!a8
3406:000 | DONE ins | em  8 16 | 005a3b | 92 18       |                 sta.di 000018        STA (TOHOLD)
3407:000 | DONE ins | em  8 16 | 005a3d | c2 20       |                 rep 20               
3407:001 | DONE ctl | em 16 16 |        |             |         .!a16
3408:000 | DONE ins | em 16 16 | 005a3f | b4 00       |                 ldy.dx 00            
3409:000 | DONE ins | em 16 16 | 005a41 | e8          |                 inx                  
3410:000 | DONE ins | em 16 16 | 005a42 | e8          |                 inx                  
3411:000 | DONE wsp | em 16 16 |        |             |
3412:000 | DONE lbl | em 16 16 | 005a43 |             | z_hold                               
3412:001 | DONE ins | em 16 16 | 005a43 | 60          |                 rts                  
3413:000 | DONE wsp | em 16 16 |        |             |
3414:000 | DONE cmt | em 16 16 |        |             | ; -------------------------------------------------------------------
3415:000 | DONE cmt | em 16 16 |        |             | ; LATESTNT ( -- nt ) 7 bytes / X cycles
3416:000 | DONE cmt | em 16 16 |        |             | ; Return the name token (nt) of the last word in the Dictionary. The Gforth
3417:000 | DONE cmt | em 16 16 |        |             | ; version of this word is called LATEST.
3418:000 | DONE lbl | em 16 16 | 005a44 |             | xt_latestnt                          
3419:000 | DONE dir | em 16 16 |        |             |         .!a16                        
3420:000 | DONE ins | em 16 16 | 005a44 | ca          |                 dex                  make room on Data Stack
3421:000 | DONE ins | em 16 16 | 005a45 | ca          |                 dex                  
3422:000 | DONE ins | em 16 16 | 005a46 | 94 00       |                 sty.dx 00            
3423:000 | DONE wsp | em 16 16 |        |             |
3424:000 | DONE ins | em 16 16 | 005a48 | a5 02       |                 lda.d 000002         
3425:000 | DONE ins | em 16 16 | 005a4a | a8          |                 tay                  
3426:000 | DONE wsp | em 16 16 |        |             |
3427:000 | DONE lbl | em 16 16 | 005a4b |             | z_latestnt                           
3427:001 | DONE ins | em 16 16 | 005a4b | 60          |                 rts                  
3428:000 | DONE wsp | em 16 16 |        |             |
3429:000 | DONE wsp | em 16 16 |        |             |
3430:000 | DONE cmt | em 16 16 |        |             | ; -------------------------------------------------------------------
3431:000 | DONE cmt | em 16 16 |        |             | ; LATESTXT ( -- xt ) 11 bytes / X cycles
3432:000 | DONE cmt | em 16 16 |        |             | ; Return the name token (xt) of the last word in the Dictionary. This is simply
3433:000 | DONE cmt | em 16 16 |        |             | ; LATESTNT but four bytes down and with a FETCH
3434:000 | DONE lbl | em 16 16 | 005a4c |             | xt_latestxt                          
3435:000 | DONE dir | em 16 16 |        |             |         .!a16                        
3436:000 | DONE ins | em 16 16 | 005a4c | ca          |                 dex                  make room on Data Stack
3437:000 | DONE ins | em 16 16 | 005a4d | ca          |                 dex                  
3438:000 | DONE ins | em 16 16 | 005a4e | 94 00       |                 sty.dx 00            
3439:000 | DONE wsp | em 16 16 |        |             |
3440:000 | DONE ins | em 16 16 | 005a50 | a5 02       |                 lda.d 000002         
3441:000 | DONE wsp | em 16 16 |        |             |
3442:000 | DONE ins | em 16 16 | 005a52 | 18          |                 clc                  xt is stored four bytes below nt in header
3443:000 | DONE ins | em 16 16 | 005a53 | 69 04 00    |                 adc.# 0004           
3444:000 | DONE ins | em 16 16 | 005a56 | a8          |                 tay                  
3445:000 | DONE wsp | em 16 16 |        |             |
3446:000 | DONE ins | em 16 16 | 005a57 | b9 00 00    |                 lda.y 0000           FETCH
3447:000 | DONE ins | em 16 16 | 005a5a | a8          |                 tay                  
3448:000 | DONE wsp | em 16 16 |        |             |
3449:000 | DONE lbl | em 16 16 | 005a5b |             | z_latestxt                           
3449:001 | DONE ins | em 16 16 | 005a5b | 60          |                 rts                  
3450:000 | DONE wsp | em 16 16 |        |             |
3451:000 | DONE wsp | em 16 16 |        |             |
3452:000 | DONE cmt | em 16 16 |        |             | ; -------------------------------------------------------------------
3453:000 | DONE cmt | em 16 16 |        |             | ; LITERAL ( n -- ) X bytes / X cycles
3454:000 | DONE cmt | em 16 16 |        |             | ; Compile-only word to store TOS so that it is pushed on stack during runtime.
3455:000 | DONE cmt | em 16 16 |        |             | ; This is a immediate, compile-only word. Test it with  : AAA [ 1 ] LITERAL ;
3456:000 | DONE cmt | em 16 16 |        |             | ; for instance
3457:000 | DONE lbl | em 16 16 | 005a5c |             | xt_literal                           
3458:000 | DONE cmt | em 16 16 |        |             |                 ; During runtime, we call the routine at the bottom by compiling
3459:000 | DONE cmt | em 16 16 |        |             |                 ; JSR LITERAL_RT. Note the cmpl_ routines use tmptos
3460:000 | DONE ins | em 16 16 | 005a5c | f4 6e 5a    |                 phe.# 005a6e         PEA LITERAL_RT
3461:000 | DONE ins | em 16 16 | 005a5f | 20 59 69    |                 jsr 006959           
3462:000 | DONE wsp | em 16 16 |        |             |
3463:000 | DONE cmt | em 16 16 |        |             |                 ; compile the value that is to be pushed to the Data Stack at
3464:000 | DONE cmt | em 16 16 |        |             |                 ; runtime. There is no "sty.di", so we have to do this the hard
3465:000 | DONE cmt | em 16 16 |        |             |                 ; way. This is basically , ("comma")
3466:000 | DONE ins | em 16 16 | 005a62 | 98          |                 tya                  
3467:000 | DONE ins | em 16 16 | 005a63 | 92 00       |                 sta.di 000000        
3468:000 | DONE ins | em 16 16 | 005a65 | e6 00       |                 inc.d 000000         
3469:000 | DONE ins | em 16 16 | 005a67 | e6 00       |                 inc.d 000000         
3470:000 | DONE wsp | em 16 16 |        |             |
3471:000 | DONE ins | em 16 16 | 005a69 | b4 00       |                 ldy.dx 00            DROP
3472:000 | DONE ins | em 16 16 | 005a6b | e8          |                 inx                  
3473:000 | DONE ins | em 16 16 | 005a6c | e8          |                 inx                  
3474:000 | DONE wsp | em 16 16 |        |             |
3475:000 | DONE lbl | em 16 16 | 005a6d |             | z_literal                            
3475:001 | DONE ins | em 16 16 | 005a6d | 60          |                 rts                  
3476:000 | DONE wsp | em 16 16 |        |             |
3477:000 | DONE lbl | em 16 16 | 005a6e |             | literal_rt                           
3478:000 | DONE cmt | em 16 16 |        |             |                 ; During runtime, we push the value following this word
3479:000 | DONE cmt | em 16 16 |        |             |                 ; back on the Data Stack. The subroutine jump that brought us
3480:000 | DONE cmt | em 16 16 |        |             |                 ; here put the address to return to on the Return Stack - this
3481:000 | DONE cmt | em 16 16 |        |             |                 ; points to the data we need to get
3482:000 | DONE wsp | em 16 16 |        |             |
3483:000 | DONE cmt | em 16 16 |        |             |                 ; Make room on Data Stack, Y now free to use
3484:000 | DONE ins | em 16 16 | 005a6e | ca          |                 dex                  
3485:000 | DONE ins | em 16 16 | 005a6f | ca          |                 dex                  
3486:000 | DONE ins | em 16 16 | 005a70 | 94 00       |                 sty.dx 00            
3487:000 | DONE wsp | em 16 16 |        |             |
3488:000 | DONE cmt | em 16 16 |        |             |                 ; The 65816 stores (<RETURN-ADDRESS> - 1) on the Return Stack
3489:000 | DONE cmt | em 16 16 |        |             |                 ; so we have to manipulate the address
3490:000 | DONE ins | em 16 16 | 005a72 | 7a          |                 ply                  
3491:000 | DONE ins | em 16 16 | 005a73 | c8          |                 iny                  
3492:000 | DONE ins | em 16 16 | 005a74 | b9 00 00    |                 lda.y 0000           LDA $0000,Y - get value after jump
3493:000 | DONE wsp | em 16 16 |        |             |
3494:000 | DONE ins | em 16 16 | 005a77 | c8          |                 iny                  move return address past data and restore
3495:000 | DONE ins | em 16 16 | 005a78 | 5a          |                 phy                  so we can get back home
3496:000 | DONE wsp | em 16 16 |        |             |
3497:000 | DONE ins | em 16 16 | 005a79 | a8          |                 tay                  Value is now on the Data Stack ( -- n )
3498:000 | DONE wsp | em 16 16 |        |             |
3499:000 | DONE ins | em 16 16 | 005a7a | 60          |                 rts                  
3500:000 | DONE wsp | em 16 16 |        |             |
3501:000 | DONE wsp | em 16 16 |        |             |
3502:000 | DONE cmt | em 16 16 |        |             | ; -------------------------------------------------------------------
3503:000 | DONE cmt | em 16 16 |        |             | ; LSHIFT ( n u -- n ) X bytes / X cycles
3504:000 | DONE cmt | em 16 16 |        |             | ; Logically shift TOS u times to the left, adding zeros to the right
3505:000 | DONE lbl | em 16 16 | 005a7b |             | xt_lshift                            
3506:000 | DONE cmt | em 16 16 |        |             |                 ; We shift at most 16 bits, because anything above that will be
3507:000 | DONE cmt | em 16 16 |        |             |                 ; zeros anyway
3508:000 | DONE ins | em 16 16 | 005a7b | 98          |                 tya                  
3509:000 | DONE ins | em 16 16 | 005a7c | 29 0f 00    |                 and.# 000f           
3510:000 | DONE ins | em 16 16 | 005a7f | f0 09       |                 beq 005a8a           if zero shifts, we're done
3511:000 | DONE wsp | em 16 16 |        |             |
3512:000 | DONE ins | em 16 16 | 005a81 | a8          |                 tay                  number of shifts is TOS
3513:000 | DONE ins | em 16 16 | 005a82 | b5 00       |                 lda.dx 00            number is in NOS
3514:000 | DONE lbl | em 16 16 | 005a84 |             | lshift_loop                          
3515:000 | DONE ins | em 16 16 | 005a84 | 0a          |                 asl.a                
3516:000 | DONE ins | em 16 16 | 005a85 | 88          |                 dey                  
3517:000 | DONE ins | em 16 16 | 005a86 | d0 fc       |                 bne 005a84           
3518:000 | DONE wsp | em 16 16 |        |             |
3519:000 | DONE ins | em 16 16 | 005a88 | 95 00       |                 sta.dx 00            put NOS, which last step will pull up
3520:000 | DONE wsp | em 16 16 |        |             |
3521:000 | DONE lbl | em 16 16 | 005a8a |             | lshift_done                          
3522:000 | DONE ins | em 16 16 | 005a8a | b4 00       |                 ldy.dx 00            
3523:000 | DONE ins | em 16 16 | 005a8c | e8          |                 inx                  
3524:000 | DONE ins | em 16 16 | 005a8d | e8          |                 inx                  
3525:000 | DONE wsp | em 16 16 |        |             |
3526:000 | DONE lbl | em 16 16 | 005a8e |             | z_lshift                             
3526:001 | DONE ins | em 16 16 | 005a8e | 60          |                 rts                  
3527:000 | DONE wsp | em 16 16 |        |             |
3528:000 | DONE wsp | em 16 16 |        |             |
3529:000 | DONE cmt | em 16 16 |        |             | ; -------------------------------------------------------------------
3530:000 | DONE cmt | em 16 16 |        |             | ; M* "MSTAR" ( n n -- d ) 16*16 -> 32  X bytes / X cycles
3531:000 | DONE cmt | em 16 16 |        |             | ; Multiply two 16 bit numbers, producing a 32 bit result. All values are signed.
3532:000 | DONE cmt | em 16 16 |        |             | ; This was originally adapted from FIG Forth for Tali Forth. The original Forth
3533:000 | DONE cmt | em 16 16 |        |             | ; code is : M* OVER OVER XOR >R ABS SWAP ABS UM* R> D+- ;  with
3534:000 | DONE cmt | em 16 16 |        |             | ; : D+- O< IF DNEGATE THEN ;
3535:000 | DONE cmt | em 16 16 |        |             | ; TODO Test this more once we have the Double words etc all working
3536:000 | DONE lbl | em 16 16 | 005a8f |             | xt_mstar                             
3537:000 | DONE dir | em 16 16 |        |             |         .!a16                        
3538:000 | DONE cmt | em 16 16 |        |             |                 ; figure out the sign
3539:000 | DONE ins | em 16 16 | 005a8f | 98          |                 tya                  
3540:000 | DONE ins | em 16 16 | 005a90 | 55 00       |                 eor.dx 00            
3541:000 | DONE wsp | em 16 16 |        |             |
3542:000 | DONE cmt | em 16 16 |        |             |                 ; um* uses all kinds of tmp stuff so we don't risk a conflict
3543:000 | DONE cmt | em 16 16 |        |             |                 ; and just take the cycle hit by pushing this to the stack
3544:000 | DONE ins | em 16 16 | 005a92 | 48          |                 pha                  
3545:000 | DONE wsp | em 16 16 |        |             |
3546:000 | DONE cmt | em 16 16 |        |             |                 ; get the absolute value of both numbers so we can feed them to
3547:000 | DONE cmt | em 16 16 |        |             |                 ; UM*, which does the real work
3548:000 | DONE ins | em 16 16 | 005a93 | 98          |                 tya                  
3549:000 | DONE ins | em 16 16 | 005a94 | 10 05       |                 bpl 005a9b           
3550:000 | DONE wsp | em 16 16 |        |             |
3551:000 | DONE cmt | em 16 16 |        |             |                 ; TOS is negative so we have to ABS it
3552:000 | DONE ins | em 16 16 | 005a96 | 49 ff ff    |                 eor.# 0ffff          
3553:000 | DONE ins | em 16 16 | 005a99 | 1a          |                 inc.a                
3554:000 | DONE ins | em 16 16 | 005a9a | a8          |                 tay                  
3555:000 | DONE wsp | em 16 16 |        |             |
3556:000 | DONE lbl | em 16 16 | 005a9b |             | mstar_abs_nos                        
3557:000 | DONE ins | em 16 16 | 005a9b | b5 00       |                 lda.dx 00            
3558:000 | DONE ins | em 16 16 | 005a9d | 10 06       |                 bpl 005aa5           
3559:000 | DONE wsp | em 16 16 |        |             |
3560:000 | DONE cmt | em 16 16 |        |             |                 ; NOS is negative so we have to ABS it
3561:000 | DONE ins | em 16 16 | 005a9f | 49 ff ff    |                 eor.# 0ffff          
3562:000 | DONE ins | em 16 16 | 005aa2 | 1a          |                 inc.a                
3563:000 | DONE ins | em 16 16 | 005aa3 | 95 00       |                 sta.dx 00            
3564:000 | DONE wsp | em 16 16 |        |             |
3565:000 | DONE lbl | em 16 16 | 005aa5 |             | mstar_umstar                         
3566:000 | DONE ins | em 16 16 | 005aa5 | 20 c0 5e    |                 jsr 005ec0           now ( d ) on stack
3567:000 | DONE wsp | em 16 16 |        |             |
3568:000 | DONE cmt | em 16 16 |        |             |                 ; handle the sign
3569:000 | DONE ins | em 16 16 | 005aa8 | 68          |                 pla                  
3570:000 | DONE wsp | em 16 16 |        |             |
3571:000 | DONE cmt | em 16 16 |        |             |                 ; postive, we don't have to care
3572:000 | DONE ins | em 16 16 | 005aa9 | 10 03       |                 bpl 005aae           
3573:000 | DONE wsp | em 16 16 |        |             |
3574:000 | DONE ins | em 16 16 | 005aab | 20 3d 58    |                 jsr 00583d           
3575:000 | DONE wsp | em 16 16 |        |             |
3576:000 | DONE lbl | em 16 16 | 005aae |             | z_mstar                              
3576:001 | DONE ins | em 16 16 | 005aae | 60          |                 rts                  
3577:000 | DONE wsp | em 16 16 |        |             |
3578:000 | DONE wsp | em 16 16 |        |             |
3579:000 | DONE cmt | em 16 16 |        |             | ; -------------------------------------------------------------------
3580:000 | DONE cmt | em 16 16 |        |             | ; MARKER ( "name" -- ) X bytes / X cycles
3581:000 | DONE cmt | em 16 16 |        |             | ; Create a deletion boundry, restoring the Dictionary to an earlier state. This
3582:000 | DONE cmt | em 16 16 |        |             | ; replaces FORGET in earlier Forths. Old entries are not actually deleted, but
3583:000 | DONE cmt | em 16 16 |        |             | ; merely overwritten by restoring CP and DP.
3584:000 | DONE lbl | em 16 16 | 005aaf |             | xt_marker                            
3585:000 | DONE cmt | em 16 16 |        |             |                 ; This is a defining word
3586:000 | DONE ins | em 16 16 | 005aaf | 20 2e 57    |                 jsr 00572e           
3587:000 | DONE wsp | em 16 16 |        |             |
3588:000 | DONE cmt | em 16 16 |        |             |                 ; Add the current DP as a payload - the DP of the marker itself
3589:000 | DONE cmt | em 16 16 |        |             |                 ; TODO see if it doesn't make more sense to add nt_ of the previous
3590:000 | DONE cmt | em 16 16 |        |             |                 ; word
3591:000 | DONE ins | em 16 16 | 005ab2 | a5 02       |                 lda.d 000002         
3592:000 | DONE ins | em 16 16 | 005ab4 | 92 00       |                 sta.di 000000        STA (CP)
3593:000 | DONE ins | em 16 16 | 005ab6 | e6 00       |                 inc.d 000000         
3594:000 | DONE ins | em 16 16 | 005ab8 | e6 00       |                 inc.d 000000         
3595:000 | DONE wsp | em 16 16 |        |             |
3596:000 | DONE cmt | em 16 16 |        |             |                 ; DOES> by hand: Add runtime behavior and DODOES routine
3597:000 | DONE ins | em 16 16 | 005aba | 20 5e 58    |                 jsr 00585e           
3598:000 | DONE ins | em 16 16 | 005abd | 20 e1 68    |                 jsr 0068e1           
3599:000 | DONE wsp | em 16 16 |        |             |
3600:000 | DONE cmt | em 16 16 |        |             |                 ; DOES> payload
3601:000 | DONE ins | em 16 16 | 005ac0 | 20 da 52    |                 jsr 0052da           ( nt )
3602:000 | DONE wsp | em 16 16 |        |             |
3603:000 | DONE cmt | em 16 16 |        |             |                 ; We now have the DP of the marker itself on the stack, but we
3604:000 | DONE cmt | em 16 16 |        |             |                 ; need the DP of the previous word. That is two bytes down
3605:000 | DONE ins | em 16 16 | 005ac3 | 84 20       |                 sty.d 000020         
3606:000 | DONE ins | em 16 16 | 005ac5 | a0 02 00    |                 ldy.# 0002           overwrite TOS, won't be needing it
3607:000 | DONE ins | em 16 16 | 005ac8 | b1 20       |                 lda.diy 000020       LDA (TMP3),Y
3608:000 | DONE ins | em 16 16 | 005aca | 85 02       |                 sta.d 000002         
3609:000 | DONE wsp | em 16 16 |        |             |
3610:000 | DONE cmt | em 16 16 |        |             |                 ; Adjust the CP, which is one byte after the z_ address of the
3611:000 | DONE cmt | em 16 16 |        |             |                 ; word we just restored. That address is six bytes down
3612:000 | DONE ins | em 16 16 | 005acc | a0 06 00    |                 ldy.# 0006           
3613:000 | DONE ins | em 16 16 | 005acf | b1 02       |                 lda.diy 000002       LDA (DP),Y
3614:000 | DONE ins | em 16 16 | 005ad1 | 1a          |                 inc.a                first free byte is one byte further down
3615:000 | DONE ins | em 16 16 | 005ad2 | 85 00       |                 sta.d 000000         
3616:000 | DONE wsp | em 16 16 |        |             |
3617:000 | DONE cmt | em 16 16 |        |             |                 ; clean up stack
3618:000 | DONE ins | em 16 16 | 005ad4 | b4 00       |                 ldy.dx 00            
3619:000 | DONE ins | em 16 16 | 005ad6 | e8          |                 inx                  
3620:000 | DONE ins | em 16 16 | 005ad7 | e8          |                 inx                  
3621:000 | DONE wsp | em 16 16 |        |             |
3622:000 | DONE lbl | em 16 16 | 005ad8 |             | z_marker                             
3622:001 | DONE ins | em 16 16 | 005ad8 | 60          |                 rts                  
3623:000 | DONE wsp | em 16 16 |        |             |
3624:000 | DONE wsp | em 16 16 |        |             |
3625:000 | DONE cmt | em 16 16 |        |             | ; -------------------------------------------------------------------
3626:000 | DONE cmt | em 16 16 |        |             | ; MAX ( n m -- n ) 18 bytes / X cycles
3627:000 | DONE cmt | em 16 16 |        |             | ; Compare TOS and NOS and keep which one is larger. Adapted from Lance A.
3628:000 | DONE cmt | em 16 16 |        |             | ; Leventhal "6502 Assembly Language Subroutines". Negative Flag indicates which
3629:000 | DONE cmt | em 16 16 |        |             | ; number is larger. See also http://6502.org/tutorials/compare_instructions.html
3630:000 | DONE cmt | em 16 16 |        |             | ; and http://www.righto.com/2012/12/the-6502-overflow-flag-explained.html
3631:000 | DONE lbl | em 16 16 | 005ad9 |             | xt_max                               
3632:000 | DONE ins | em 16 16 | 005ad9 | 98          |                 tya                  
3633:000 | DONE ins | em 16 16 | 005ada | d5 00       |                 cmp.dx 00            
3634:000 | DONE wsp | em 16 16 |        |             |
3635:000 | DONE cmt | em 16 16 |        |             |                 ; If they are the same, life is good. This step also sets the
3636:000 | DONE cmt | em 16 16 |        |             |                 ; Carry flag
3637:000 | DONE ins | em 16 16 | 005adc | f0 0b       |                 beq 005ae9           Faster than DROP because TOS is in Y
3638:000 | DONE wsp | em 16 16 |        |             |
3639:000 | DONE ins | em 16 16 | 005ade | f5 00       |                 sbc.dx 00            
3640:000 | DONE ins | em 16 16 | 005ae0 | 50 03       |                 bvc 005ae5           no overflow, skip ahead
3641:000 | DONE wsp | em 16 16 |        |             |
3642:000 | DONE cmt | em 16 16 |        |             |                 ; Deal with oveflow because we use signed numbers
3643:000 | DONE ins | em 16 16 | 005ae2 | 49 00 80    |                 eor.# 8000           compliment negative flag
3644:000 | DONE wsp | em 16 16 |        |             |
3645:000 | DONE lbl | em 16 16 | 005ae5 |             | max_no_ov                            
3646:000 | DONE ins | em 16 16 | 005ae5 | 10 02       |                 bpl 005ae9           keep TOS
3647:000 | DONE lbl | em 16 16 | 005ae7 |             | max_drop                             
3648:000 | DONE ins | em 16 16 | 005ae7 | b4 00       |                 ldy.dx 00            DROP so NOS is result
3649:000 | DONE lbl | em 16 16 | 005ae9 |             | max_nip                              
3650:000 | DONE ins | em 16 16 | 005ae9 | e8          |                 inx                  
3651:000 | DONE ins | em 16 16 | 005aea | e8          |                 inx                  
3652:000 | DONE wsp | em 16 16 |        |             |
3653:000 | DONE lbl | em 16 16 | 005aeb |             | z_max                                
3653:001 | DONE ins | em 16 16 | 005aeb | 60          |                 rts                  
3654:000 | DONE wsp | em 16 16 |        |             |
3655:000 | DONE wsp | em 16 16 |        |             |
3656:000 | DONE cmt | em 16 16 |        |             | ; -------------------------------------------------------------------
3657:000 | DONE cmt | em 16 16 |        |             | ; MIN ( n m -- n ) 18 bytes / X cycles
3658:000 | DONE cmt | em 16 16 |        |             | ; Compare TOS and NOS and keep which one is smaller Adapted from Lance A.
3659:000 | DONE cmt | em 16 16 |        |             | ; Leventhal "6502 Assembly Language Subroutines". Negative Flag indicates which
3660:000 | DONE cmt | em 16 16 |        |             | ; number is larger. See also http://6502.org/tutorials/compare_instructions.html
3661:000 | DONE cmt | em 16 16 |        |             | ; and http://www.righto.com/2012/12/the-6502-overflow-flag-explained.html
3662:000 | DONE lbl | em 16 16 | 005aec |             | xt_min                               
3663:000 | DONE ins | em 16 16 | 005aec | 98          |                 tya                  
3664:000 | DONE ins | em 16 16 | 005aed | d5 00       |                 cmp.dx 00            
3665:000 | DONE wsp | em 16 16 |        |             |
3666:000 | DONE cmt | em 16 16 |        |             |                 ; If they are the same, life is good. This step also sets the
3667:000 | DONE cmt | em 16 16 |        |             |                 ; Carry flag
3668:000 | DONE ins | em 16 16 | 005aef | f0 0b       |                 beq 005afc           Faster than DROP because TOS is in Y
3669:000 | DONE wsp | em 16 16 |        |             |
3670:000 | DONE ins | em 16 16 | 005af1 | f5 00       |                 sbc.dx 00            
3671:000 | DONE ins | em 16 16 | 005af3 | 50 03       |                 bvc 005af8           no overflow, skip ahead
3672:000 | DONE wsp | em 16 16 |        |             |
3673:000 | DONE cmt | em 16 16 |        |             |                 ; Deal with oveflow because we use signed numbers
3674:000 | DONE ins | em 16 16 | 005af5 | 49 00 80    |                 eor.# 8000           compliment negative flag
3675:000 | DONE wsp | em 16 16 |        |             |
3676:000 | DONE lbl | em 16 16 | 005af8 |             | min_no_ov                            
3677:000 | DONE ins | em 16 16 | 005af8 | 30 02       |                 bmi 005afc           keep TOS
3678:000 | DONE lbl | em 16 16 | 005afa |             | min_drop                             
3679:000 | DONE ins | em 16 16 | 005afa | b4 00       |                 ldy.dx 00            DROP so NOS is result
3680:000 | DONE lbl | em 16 16 | 005afc |             | min_nip                              
3681:000 | DONE ins | em 16 16 | 005afc | e8          |                 inx                  
3682:000 | DONE ins | em 16 16 | 005afd | e8          |                 inx                  
3683:000 | DONE wsp | em 16 16 |        |             |
3684:000 | DONE lbl | em 16 16 | 005afe |             | z_min                                
3684:001 | DONE ins | em 16 16 | 005afe | 60          |                 rts                  
3685:000 | DONE wsp | em 16 16 |        |             |
3686:000 | DONE cmt | em 16 16 |        |             | ; -------------------------------------------------------------------
3687:000 | DONE cmt | em 16 16 |        |             | ; MOVE ( addr1 addr2 u -- ) X bytes / X cycles
3688:000 | DONE cmt | em 16 16 |        |             | ; Move u bytes from addr1 to addr2, so that in the end, addr2 contains exactly
3689:000 | DONE cmt | em 16 16 |        |             | ; what was in addr1. This routine calls CMOVE or CMOVE>. Forth verison is
3690:000 | DONE cmt | em 16 16 |        |             | ; >R 2DUP U< IF R> CMOVE> ELSE  R> CMOVE THEN ; see
3691:000 | DONE cmt | em 16 16 |        |             | ; https://groups.google.com/forum/#!topic/comp.lang.forth/-l2WlE7pEE0
3692:000 | DONE cmt | em 16 16 |        |             | ; Also see CMOVE> and CMOVE and http://forum.6502.org/viewtopic.php?f=2&t=1685
3693:000 | DONE lbl | em 16 16 | 005aff |             | xt_move                              
3694:000 | DONE dir | em 16 16 |        |             |         .!a16                        
3695:000 | DONE cmt | em 16 16 |        |             |                 ; if u is zero, we just skip all of this
3696:000 | DONE ins | em 16 16 | 005aff | 98          |                 tya                  
3697:000 | DONE ins | em 16 16 | 005b00 | f0 10       |                 beq 005b12           
3698:000 | DONE wsp | em 16 16 |        |             |
3699:000 | DONE cmt | em 16 16 |        |             |                 ; if source and destination are the same, that would be silly as
3700:000 | DONE cmt | em 16 16 |        |             |                 ; well
3701:000 | DONE ins | em 16 16 | 005b02 | b5 00       |                 lda.dx 00            addr2 (destination)
3702:000 | DONE ins | em 16 16 | 005b04 | d5 02       |                 cmp.dx 02            addr1 (source)
3703:000 | DONE ins | em 16 16 | 005b06 | f0 0a       |                 beq 005b12           
3704:000 | DONE wsp | em 16 16 |        |             |
3705:000 | DONE cmt | em 16 16 |        |             |                 ; The destination is higher than the source, so use CMOVE, which
3706:000 | DONE cmt | em 16 16 |        |             |                 ; calls MVP
3707:000 | DONE ins | em 16 16 | 005b08 | 10 05       |                 bpl 005b0f           
3708:000 | DONE wsp | em 16 16 |        |             |
3709:000 | DONE ins | em 16 16 | 005b0a | 20 16 56    |                 jsr 005616           
3710:000 | DONE ins | em 16 16 | 005b0d | 80 03       |                 bra 005b12           don't RTS because we might be natively compiling
3711:000 | DONE wsp | em 16 16 |        |             |
3712:000 | DONE cmt | em 16 16 |        |             |                 ; The source is higher than the destination, use CMOVE>,
3713:000 | DONE cmt | em 16 16 |        |             |                 ; which calls MVN
3714:000 | DONE lbl | em 16 16 | 005b0f |             | move_cmoveup                         
3715:000 | DONE ins | em 16 16 | 005b0f | 20 39 56    |                 jsr 005639           
3716:000 | DONE wsp | em 16 16 |        |             |
3717:000 | DONE lbl | em 16 16 | 005b12 |             | z_move                               
3717:001 | DONE ins | em 16 16 | 005b12 | 60          |                 rts                  
3718:000 | DONE wsp | em 16 16 |        |             |
3719:000 | DONE wsp | em 16 16 |        |             |
3720:000 | DONE cmt | em 16 16 |        |             | ; -------------------------------------------------------------------
3721:000 | DONE cmt | em 16 16 |        |             | ; NAME>INT ( nt -- xt ) 4 bytes / 8 cycles
3722:000 | DONE cmt | em 16 16 |        |             | ; Given the Name Token (nt) of a word, return its Execute Token (xt)
3723:000 | DONE cmt | em 16 16 |        |             | ; TODO deal with compile-only words, see
3724:000 | DONE cmt | em 16 16 |        |             | ; https://www.complang.tuwien.ac.at/forth/gforth/Docs-html/Name-token.html
3725:000 | DONE lbl | em 16 16 | 005b13 |             | xt_name-int                          
3726:000 | DONE dir | em 16 16 |        |             |         .!a16                        
3727:000 | DONE dir | em 16 16 |        |             |         .!xy16                       
3728:000 | DONE cmt | em 16 16 |        |             |                 ; The xt of a word beginns four bytes down from its nt
3729:000 | DONE ins | em 16 16 | 005b13 | c8          |                 iny                  
3730:000 | DONE ins | em 16 16 | 005b14 | c8          |                 iny                  
3731:000 | DONE ins | em 16 16 | 005b15 | c8          |                 iny                  
3732:000 | DONE ins | em 16 16 | 005b16 | c8          |                 iny                  
3733:000 | DONE ins | em 16 16 | 005b17 | b9 00 00    |                 lda.y 0000           
3734:000 | DONE ins | em 16 16 | 005b1a | a8          |                 tay                  
3735:000 | DONE wsp | em 16 16 |        |             |
3736:000 | DONE lbl | em 16 16 | 005b1b |             | z_name-int                           
3736:001 | DONE ins | em 16 16 | 005b1b | 60          |                 rts                  
3737:000 | DONE wsp | em 16 16 |        |             |
3738:000 | DONE cmt | em 16 16 |        |             | ; -------------------------------------------------------------------
3739:000 | DONE cmt | em 16 16 |        |             | ; NAME>STRING ( nt -- addr u ) 16 bytes / X cycles
3740:000 | DONE cmt | em 16 16 |        |             | ; Given a name token (nt) of a word, return its string. This is a Gforth word
3741:000 | DONE cmt | em 16 16 |        |             | ; that works with the Dictionary header entries. It is not checked if nt is
3742:000 | DONE cmt | em 16 16 |        |             | ; a valid name token. There is no "STRING>NAME" - this is handled by the
3743:000 | DONE cmt | em 16 16 |        |             | ; combination of PARSE-NAME and FIND-NAME
3744:000 | DONE lbl | em 16 16 | 005b1c |             | xt_name-string                       
3745:000 | DONE dir | em 16 16 |        |             |         .!a16                        
3746:000 | DONE dir | em 16 16 |        |             |         .!xy16                       
3747:000 | DONE ins | em 16 16 | 005b1c | ca          |                 dex                  move NOS down one
3748:000 | DONE ins | em 16 16 | 005b1d | ca          |                 dex                  
3749:000 | DONE wsp | em 16 16 |        |             |
3750:000 | DONE cmt | em 16 16 |        |             |                 ; the name string of a word begins 8 bytes down from its nt,
3751:000 | DONE cmt | em 16 16 |        |             |                 ; which we have as TOS
3752:000 | DONE ins | em 16 16 | 005b1e | 98          |                 tya                  
3753:000 | DONE ins | em 16 16 | 005b1f | 18          |                 clc                  
3754:000 | DONE ins | em 16 16 | 005b20 | 69 08 00    |                 adc.# 0008           
3755:000 | DONE ins | em 16 16 | 005b23 | 95 00       |                 sta.dx 00            NOS
3756:000 | DONE wsp | em 16 16 |        |             |
3757:000 | DONE cmt | em 16 16 |        |             |                 ; the length of the name string is in the LSB of the first word
3758:000 | DONE cmt | em 16 16 |        |             |                 ; of the dictionary entry header (the name token)
3759:000 | DONE ins | em 16 16 | 005b25 | b9 00 00    |                 lda.y 0000           LDA $0000,Y
3760:000 | DONE ins | em 16 16 | 005b28 | 29 ff 00    |                 and.# 00ff           mask all but length byte
3761:000 | DONE ins | em 16 16 | 005b2b | a8          |                 tay                  
3762:000 | DONE wsp | em 16 16 |        |             |
3763:000 | DONE lbl | em 16 16 | 005b2c |             | z_name-string                        
3763:001 | DONE ins | em 16 16 | 005b2c | 60          |                 rts                  
3764:000 | DONE wsp | em 16 16 |        |             |
3765:000 | DONE wsp | em 16 16 |        |             |
3766:000 | DONE cmt | em 16 16 |        |             | ; -------------------------------------------------------------------
3767:000 | DONE cmt | em 16 16 |        |             | ; NATIVE-COMPILE ( -- ) X bytes / X cycles
3768:000 | DONE cmt | em 16 16 |        |             | ; Enable native compilation for last word in Dictionary
3769:000 | DONE lbl | em 16 16 | 005b2d |             | xt_native-compile                    
3770:000 | DONE dir | em 16 16 |        |             |         .!a16                        
3771:000 | DONE ins | em 16 16 | 005b2d | a9 01 00    |                 lda.# NC             
3772:000 | DONE ins | em 16 16 | 005b30 | eb          |                 xba                  flags are MSB
3773:000 | DONE ins | em 16 16 | 005b31 | 12 02       |                 ora.di 000002        ORA (DP)
3774:000 | DONE ins | em 16 16 | 005b33 | 92 02       |                 sta.di 000002        
3775:000 | DONE wsp | em 16 16 |        |             |
3776:000 | DONE lbl | em 16 16 | 005b35 |             | z_native-compile                     
3777:000 | DONE ins | em 16 16 | 005b35 | 60          |                 rts                  
3778:000 | DONE wsp | em 16 16 |        |             |
3779:000 | DONE cmt | em 16 16 |        |             | ; -------------------------------------------------------------------
3780:000 | DONE cmt | em 16 16 |        |             | ; NC-LIMIT ( -- addr ) X bytes / X cycles
3781:000 | DONE cmt | em 16 16 |        |             | ; Address where the value of the Native Compile size limit is kept
3782:000 | DONE lbl | em 16 16 | 005b36 |             | xt_nc-limit                          
3783:000 | DONE ins | em 16 16 | 005b36 | ca          |                 dex                  
3784:000 | DONE ins | em 16 16 | 005b37 | ca          |                 dex                  
3785:000 | DONE ins | em 16 16 | 005b38 | 94 00       |                 sty.dx 00            
3786:000 | DONE ins | em 16 16 | 005b3a | a0 26 00    |                 ldy.# 000026         
3787:000 | DONE wsp | em 16 16 |        |             |
3788:000 | DONE lbl | em 16 16 | 005b3d |             | z_nc-limit                           
3788:001 | DONE ins | em 16 16 | 005b3d | 60          |                 rts                  
3789:000 | DONE wsp | em 16 16 |        |             |
3790:000 | DONE wsp | em 16 16 |        |             |
3791:000 | DONE cmt | em 16 16 |        |             | ; -------------------------------------------------------------------
3792:000 | DONE cmt | em 16 16 |        |             | ; NEGATE ( n -- n ) 6 bytes / X cycles
3793:000 | DONE cmt | em 16 16 |        |             | ; Two's complement of TOS
3794:000 | DONE lbl | em 16 16 | 005b3e |             | xt_negate                            
3795:000 | DONE ins | em 16 16 | 005b3e | 98          |                 tya                  
3796:000 | DONE ins | em 16 16 | 005b3f | 49 ff ff    |                 eor.# 0ffff          
3797:000 | DONE ins | em 16 16 | 005b42 | 1a          |                 inc.a                
3798:000 | DONE ins | em 16 16 | 005b43 | a8          |                 tay                  
3799:000 | DONE wsp | em 16 16 |        |             |
3800:000 | DONE lbl | em 16 16 | 005b44 |             | z_negate                             
3800:001 | DONE ins | em 16 16 | 005b44 | 60          |                 rts                  
3801:000 | DONE wsp | em 16 16 |        |             |
3802:000 | DONE wsp | em 16 16 |        |             |
3803:000 | DONE cmt | em 16 16 |        |             | ; -------------------------------------------------------------------
3804:000 | DONE cmt | em 16 16 |        |             | ; NIP ( n m -- m ) 2 bytes / 4 cycles
3805:000 | DONE cmt | em 16 16 |        |             | ; Delete entry that is NOS
3806:000 | DONE lbl | em 16 16 | 005b45 |             | xt_nip                               
3807:000 | DONE ins | em 16 16 | 005b45 | e8          |                 inx                  
3808:000 | DONE ins | em 16 16 | 005b46 | e8          |                 inx                  
3809:000 | DONE wsp | em 16 16 |        |             |
3810:000 | DONE lbl | em 16 16 | 005b47 |             | z_nip                                
3810:001 | DONE ins | em 16 16 | 005b47 | 60          |                 rts                  
3811:000 | DONE wsp | em 16 16 |        |             |
3812:000 | DONE wsp | em 16 16 |        |             |
3813:000 | DONE cmt | em 16 16 |        |             | ; -------------------------------------------------------------------
3814:000 | DONE cmt | em 16 16 |        |             | ; NUMBER ( addr u -- u | d ) X bytes / X cycles
3815:000 | DONE cmt | em 16 16 |        |             | ; Convert a number string to a double or single cell number. This is a wrapper
3816:000 | DONE cmt | em 16 16 |        |             | ; for >NUMBER and follows the convention set out in the "Forth Programmer's
3817:000 | DONE cmt | em 16 16 |        |             | ; Handbook" (Conklin & Rather) 3rd edition p. 87. Based in part on the "Starting
3818:000 | DONE cmt | em 16 16 |        |             | ; Forth" code https://www.forth.com/starting-forth/10-input-output-operators/
3819:000 | DONE cmt | em 16 16 |        |             | ; Gforth uses S>NUMBER? and S>UNUMBER? which return the numbers and a flag, see
3820:000 | DONE cmt | em 16 16 |        |             | ; https://www.complang.tuwien.ac.at/forth/gforth/Docs-html/Number-Conversion.html
3821:000 | DONE cmt | em 16 16 |        |             | ; Another difference to Gforth is that we follow ANSI Forth that the dot to
3822:000 | DONE cmt | em 16 16 |        |             | ; signal a double cell number is required to be the last character of the
3823:000 | DONE cmt | em 16 16 |        |             | ; string. Number calls >NUMBER which in turn calls UM*, which uses tmp1, tmp2,
3824:000 | DONE cmt | em 16 16 |        |             | ; and tmp3, so we can't use them here, which is pain.
3825:000 | DONE lbl | em 16 16 | 005b48 |             | xt_number                            
3826:000 | DONE dir | em 16 16 |        |             |         .!a16                        
3827:000 | DONE cmt | em 16 16 |        |             |                 ; The flags for sign and double are kept on the stack because
3828:000 | DONE cmt | em 16 16 |        |             |                 ; we've run out of temporary variables. MSB is for minus, LSB is
3829:000 | DONE cmt | em 16 16 |        |             |                 ; for double
3830:000 | DONE ins | em 16 16 | 005b48 | f4 00 00    |                 phe.# 0000           
3831:000 | DONE wsp | em 16 16 |        |             |
3832:000 | DONE ins | em 16 16 | 005b4b | 84 24       |                 sty.d 000024         save length of string, freeing Y
3833:000 | DONE wsp | em 16 16 |        |             |
3834:000 | DONE cmt | em 16 16 |        |             |                 ; if the first character is a minus, strip it off and set
3835:000 | DONE cmt | em 16 16 |        |             |                 ; a flag
3836:000 | DONE ins | em 16 16 | 005b4d | e2 20       |                 sep 20               
3836:001 | DONE ctl | em  8 16 |        |             |         .!a8
3837:000 | DONE ins | em  8 16 | 005b4f | a1 00       |                 lda.dxi 00           get first character
3838:000 | DONE ins | em  8 16 | 005b51 | c9 2d       |                 cmp.# 2d             
3839:000 | DONE ins | em  8 16 | 005b53 | c2 20       |                 rep 20               
3839:001 | DONE ctl | em 16 16 |        |             |         .!a16
3840:000 | DONE ins | em 16 16 | 005b55 | d0 09       |                 bne 005b60           
3841:000 | DONE wsp | em 16 16 |        |             |
3842:000 | DONE cmt | em 16 16 |        |             |                 ; We have a minus.
3843:000 | DONE ins | em 16 16 | 005b57 | 68          |                 pla                  
3844:000 | DONE ins | em 16 16 | 005b58 | 09 00 ff    |                 ora.# 0ff00          MSB is minus
3845:000 | DONE ins | em 16 16 | 005b5b | 48          |                 pha                  
3846:000 | DONE wsp | em 16 16 |        |             |
3847:000 | DONE ins | em 16 16 | 005b5c | f6 00       |                 inc.dx 00            start one character later
3848:000 | DONE ins | em 16 16 | 005b5e | c6 24       |                 dec.d 000024         reduce string length by one
3849:000 | DONE wsp | em 16 16 |        |             |
3850:000 | DONE lbl | em 16 16 | 005b60 |             | number_dot                           
3851:000 | DONE cmt | em 16 16 |        |             |                 ; if the last character is a dot, strip it off and set a flag
3852:000 | DONE ins | em 16 16 | 005b60 | a5 24       |                 lda.d 000024         get the string length
3853:000 | DONE ins | em 16 16 | 005b62 | 3a          |                 dec.a                subtract one to convert length to index
3854:000 | DONE ins | em 16 16 | 005b63 | 18          |                 clc                  
3855:000 | DONE ins | em 16 16 | 005b64 | 75 00       |                 adc.dx 00            add length of string
3856:000 | DONE ins | em 16 16 | 005b66 | a8          |                 tay                  
3857:000 | DONE ins | em 16 16 | 005b67 | e2 20       |                 sep 20               
3857:001 | DONE ctl | em  8 16 |        |             |         .!a8
3858:000 | DONE ins | em  8 16 | 005b69 | b9 00 00    |                 lda.y 0000           get last character
3859:000 | DONE ins | em  8 16 | 005b6c | c9 2e       |                 cmp.# 2e             
3860:000 | DONE ins | em  8 16 | 005b6e | c2 20       |                 rep 20               
3860:001 | DONE ctl | em 16 16 |        |             |         .!a16
3861:000 | DONE ins | em 16 16 | 005b70 | d0 07       |                 bne 005b79           
3862:000 | DONE wsp | em 16 16 |        |             |
3863:000 | DONE cmt | em 16 16 |        |             |                 ; we have a dot
3864:000 | DONE ins | em 16 16 | 005b72 | 68          |                 pla                  get the flag back
3865:000 | DONE ins | em 16 16 | 005b73 | 09 ff 00    |                 ora.# 00ff           LSB is double
3866:000 | DONE ins | em 16 16 | 005b76 | 48          |                 pha                  
3867:000 | DONE wsp | em 16 16 |        |             |
3868:000 | DONE ins | em 16 16 | 005b77 | c6 24       |                 dec.d 000024         reduce string length by one
3869:000 | DONE wsp | em 16 16 |        |             |
3870:000 | DONE lbl | em 16 16 | 005b79 |             | number_main                          
3871:000 | DONE cmt | em 16 16 |        |             |                 ; set up stack for subroutine jump to >NUMBER
3872:000 | DONE ins | em 16 16 | 005b79 | b5 00       |                 lda.dx 00            get the string address to safety
3873:000 | DONE ins | em 16 16 | 005b7b | 74 00       |                 stz.dx 00            NOS is now zero
3874:000 | DONE ins | em 16 16 | 005b7d | ca          |                 dex                  
3875:000 | DONE ins | em 16 16 | 005b7e | ca          |                 dex                  
3876:000 | DONE ins | em 16 16 | 005b7f | 74 00       |                 stz.dx 00            3OS and NOS are now zero
3877:000 | DONE ins | em 16 16 | 005b81 | ca          |                 dex                  
3878:000 | DONE ins | em 16 16 | 005b82 | ca          |                 dex                  
3879:000 | DONE wsp | em 16 16 |        |             |
3880:000 | DONE ins | em 16 16 | 005b83 | 95 00       |                 sta.dx 00            address is back as NOS
3881:000 | DONE ins | em 16 16 | 005b85 | a4 24       |                 ldy.d 000024         length is back as TOS
3882:000 | DONE wsp | em 16 16 |        |             |
3883:000 | DONE lbl | em 16 16 | 005b87 |             | number_loop                          
3884:000 | DONE ins | em 16 16 | 005b87 | 20 63 51    |                 jsr 005163           ( ud addr u -- ud addr u )
3885:000 | DONE wsp | em 16 16 |        |             |
3886:000 | DONE ins | em 16 16 | 005b8a | 98          |                 tya                  test length of returned string, should be 0
3887:000 | DONE ins | em 16 16 | 005b8b | f0 06       |                 beq 005b93           
3888:000 | DONE wsp | em 16 16 |        |             |
3889:000 | DONE cmt | em 16 16 |        |             |                 ; Something went wrong during conversion, we still have stuff
3890:000 | DONE cmt | em 16 16 |        |             |                 ; left over. Print error string and abort. If number was called
3891:000 | DONE cmt | em 16 16 |        |             |                 ; by INTERPRET, we've already checked for words, so we're in
3892:000 | DONE cmt | em 16 16 |        |             |                 ; trouble one way or another
3893:000 | DONE cmt | em 16 16 |        |             |                 ; TODO print offending string
3894:000 | DONE ins | em 16 16 | 005b8d | a9 13 71    |                 lda.# 007113         
3895:000 | DONE ins | em 16 16 | 005b90 | 4c 7a 69    |                 jmp 00697a           
3896:000 | DONE wsp | em 16 16 |        |             |
3897:000 | DONE lbl | em 16 16 | 005b93 |             | number_ok                            
3898:000 | DONE cmt | em 16 16 |        |             |                 ; All characters successfully converted. Drop the string info
3899:000 | DONE ins | em 16 16 | 005b93 | b4 02       |                 ldy.dx 02            
3900:000 | DONE ins | em 16 16 | 005b95 | e8          |                 inx                  
3901:000 | DONE ins | em 16 16 | 005b96 | e8          |                 inx                  
3902:000 | DONE ins | em 16 16 | 005b97 | e8          |                 inx                  
3903:000 | DONE ins | em 16 16 | 005b98 | e8          |                 inx                  
3904:000 | DONE wsp | em 16 16 |        |             |
3905:000 | DONE cmt | em 16 16 |        |             |                 ; We have a double-cell number on the Data Stack that might have
3906:000 | DONE cmt | em 16 16 |        |             |                 ; a minus and might actually be single-cell
3907:000 | DONE ins | em 16 16 | 005b99 | 68          |                 pla                  get copy of the flags
3908:000 | DONE ins | em 16 16 | 005b9a | 48          |                 pha                  
3909:000 | DONE ins | em 16 16 | 005b9b | 29 ff 00    |                 and.# 00ff           only keep the part with the number size (LSB)
3910:000 | DONE ins | em 16 16 | 005b9e | f0 1b       |                 beq 005bbb           
3911:000 | DONE wsp | em 16 16 |        |             |
3912:000 | DONE cmt | em 16 16 |        |             |                 ; This is a double-cell number. If it had a minus, we'll have to
3913:000 | DONE cmt | em 16 16 |        |             |                 ; negate it
3914:000 | DONE ins | em 16 16 | 005ba0 | 68          |                 pla                  
3915:000 | DONE ins | em 16 16 | 005ba1 | 29 00 ff    |                 and.# 0ff00          only keep part with the sing (MSB)
3916:000 | DONE ins | em 16 16 | 005ba4 | f0 25       |                 beq 005bcb           no minus, all done
3917:000 | DONE wsp | em 16 16 |        |             |
3918:000 | DONE ins | em 16 16 | 005ba6 | b5 00       |                 lda.dx 00            DNEGATE, starts with LSW
3919:000 | DONE ins | em 16 16 | 005ba8 | 49 ff ff    |                 eor.# 0ffff          
3920:000 | DONE wsp | em 16 16 |        |             |
3921:000 | DONE cmt | em 16 16 |        |             |                 ; INC won't affect the carry flag, so we have to do this the
3922:000 | DONE cmt | em 16 16 |        |             |                 ; hard way
3923:000 | DONE ins | em 16 16 | 005bab | 18          |                 clc                  
3924:000 | DONE ins | em 16 16 | 005bac | 69 01 00    |                 adc.# 0001           
3925:000 | DONE ins | em 16 16 | 005baf | 95 00       |                 sta.dx 00            
3926:000 | DONE wsp | em 16 16 |        |             |
3927:000 | DONE cmt | em 16 16 |        |             |                 ; now MSW (in TOS)
3928:000 | DONE ins | em 16 16 | 005bb1 | 98          |                 tya                  
3929:000 | DONE ins | em 16 16 | 005bb2 | 49 ff ff    |                 eor.# 0ffff          
3930:000 | DONE ins | em 16 16 | 005bb5 | 69 00 00    |                 adc.# 0000           we are only interested in the carry
3931:000 | DONE ins | em 16 16 | 005bb8 | a8          |                 tay                  
3932:000 | DONE wsp | em 16 16 |        |             |
3933:000 | DONE ins | em 16 16 | 005bb9 | 80 10       |                 bra 005bcb           
3934:000 | DONE wsp | em 16 16 |        |             |
3935:000 | DONE lbl | em 16 16 | 005bbb |             | number_single                        
3936:000 | DONE cmt | em 16 16 |        |             |                 ; This is a single cell number, so we just drop the top cell
3937:000 | DONE ins | em 16 16 | 005bbb | b4 00       |                 ldy.dx 00            
3938:000 | DONE ins | em 16 16 | 005bbd | e8          |                 inx                  
3939:000 | DONE ins | em 16 16 | 005bbe | e8          |                 inx                  
3940:000 | DONE wsp | em 16 16 |        |             |
3941:000 | DONE cmt | em 16 16 |        |             |                 ; If we have a minus, we'll have to negate it. Note this code is
3942:000 | DONE cmt | em 16 16 |        |             |                 ; doubled for speed
3943:000 | DONE ins | em 16 16 | 005bbf | 68          |                 pla                  
3944:000 | DONE ins | em 16 16 | 005bc0 | 29 00 ff    |                 and.# 0ff00          
3945:000 | DONE ins | em 16 16 | 005bc3 | f0 06       |                 beq 005bcb           no minus, all done
3946:000 | DONE wsp | em 16 16 |        |             |
3947:000 | DONE ins | em 16 16 | 005bc5 | 98          |                 tya                  NEGATE
3948:000 | DONE ins | em 16 16 | 005bc6 | 49 ff ff    |                 eor.# 0ffff          
3949:000 | DONE ins | em 16 16 | 005bc9 | 1a          |                 inc.a                
3950:000 | DONE ins | em 16 16 | 005bca | a8          |                 tay                  fall through to end
3951:000 | DONE wsp | em 16 16 |        |             |
3952:000 | DONE lbl | em 16 16 | 005bcb |             | z_number                             
3952:001 | DONE ins | em 16 16 | 005bcb | 60          |                 rts                  
3953:000 | DONE wsp | em 16 16 |        |             |
3954:000 | DONE wsp | em 16 16 |        |             |
3955:000 | DONE cmt | em 16 16 |        |             | ; -------------------------------------------------------------------
3956:000 | DONE cmt | em 16 16 |        |             | ; OR ( n m -- n ) 6 bytes / X cycles
3957:000 | DONE cmt | em 16 16 |        |             | ; Logical OR
3958:000 | DONE lbl | em 16 16 | 005bcc |             | xt_or                                
3959:000 | DONE ins | em 16 16 | 005bcc | 98          |                 tya                  
3960:000 | DONE ins | em 16 16 | 005bcd | 15 00       |                 ora.dx 00            
3961:000 | DONE ins | em 16 16 | 005bcf | a8          |                 tay                  
3962:000 | DONE wsp | em 16 16 |        |             |
3963:000 | DONE ins | em 16 16 | 005bd0 | e8          |                 inx                  
3964:000 | DONE ins | em 16 16 | 005bd1 | e8          |                 inx                  
3965:000 | DONE wsp | em 16 16 |        |             |
3966:000 | DONE lbl | em 16 16 | 005bd2 |             | z_or                                 
3966:001 | DONE ins | em 16 16 | 005bd2 | 60          |                 rts                  
3967:000 | DONE wsp | em 16 16 |        |             |
3968:000 | DONE wsp | em 16 16 |        |             |
3969:000 | DONE cmt | em 16 16 |        |             | ; -------------------------------------------------------------------
3970:000 | DONE cmt | em 16 16 |        |             | ; OUTPUT ( -- addr ) X bytes / X cycles
3971:000 | DONE cmt | em 16 16 |        |             | ; Return the address where the jump target for EMIT is stored. By default, this
3972:000 | DONE cmt | em 16 16 |        |             | ; will hold the value of put_chr from the kernel routine, but this can be
3973:000 | DONE cmt | em 16 16 |        |             | ; changed by the user
3974:000 | DONE lbl | em 16 16 | 005bd3 |             | xt_output                            
3975:000 | DONE ins | em 16 16 | 005bd3 | ca          |                 dex                  
3976:000 | DONE ins | em 16 16 | 005bd4 | ca          |                 dex                  
3977:000 | DONE ins | em 16 16 | 005bd5 | 94 00       |                 sty.dx 00            
3978:000 | DONE wsp | em 16 16 |        |             |
3979:000 | DONE ins | em 16 16 | 005bd7 | a0 0e 00    |                 ldy.# 00000e         
3980:000 | DONE wsp | em 16 16 |        |             |
3981:000 | DONE lbl | em 16 16 | 005bda |             | z_output                             
3981:001 | DONE ins | em 16 16 | 005bda | 60          |                 rts                  
3982:000 | DONE wsp | em 16 16 |        |             |
3983:000 | DONE wsp | em 16 16 |        |             |
3984:000 | DONE cmt | em 16 16 |        |             | ; -------------------------------------------------------------------
3985:000 | DONE cmt | em 16 16 |        |             | ; OVER ( n m -- n m n )  6 bytes / 14 cycles
3986:000 | DONE cmt | em 16 16 |        |             | ; Push NOS on Data Stack
3987:000 | DONE lbl | em 16 16 | 005bdb |             | xt_over                              
3988:000 | DONE ins | em 16 16 | 005bdb | ca          |                 dex                  
3989:000 | DONE ins | em 16 16 | 005bdc | ca          |                 dex                  
3990:000 | DONE ins | em 16 16 | 005bdd | 94 00       |                 sty.dx 00            
3991:000 | DONE ins | em 16 16 | 005bdf | b4 02       |                 ldy.dx 02            
3992:000 | DONE wsp | em 16 16 |        |             |
3993:000 | DONE lbl | em 16 16 | 005be1 |             | z_over                               
3993:001 | DONE ins | em 16 16 | 005be1 | 60          |                 rts                  
3994:000 | DONE wsp | em 16 16 |        |             |
3995:000 | DONE wsp | em 16 16 |        |             |
3996:000 | DONE cmt | em 16 16 |        |             | ; -------------------------------------------------------------------
3997:000 | DONE cmt | em 16 16 |        |             | ; PAD ( -- addr ) 11 bytes / X cycles
3998:000 | DONE cmt | em 16 16 |        |             | ; Return address to a temporary area in free memory for user. Must be at least
3999:000 | DONE cmt | em 16 16 |        |             | ; 84 bytes in size (says ANSI). It is located relative to the compile area
4000:000 | DONE cmt | em 16 16 |        |             | ; pointer (CP) and therefore varies in position. This area is reserved for the
4001:000 | DONE cmt | em 16 16 |        |             | ; user and not used by the system
4002:000 | DONE lbl | em 16 16 | 005be2 |             | xt_pad                               
4003:000 | DONE dir | em 16 16 |        |             |         .!a16                        
4004:000 | DONE ins | em 16 16 | 005be2 | ca          |                 dex                  
4005:000 | DONE ins | em 16 16 | 005be3 | ca          |                 dex                  
4006:000 | DONE ins | em 16 16 | 005be4 | 94 00       |                 sty.dx 00            
4007:000 | DONE wsp | em 16 16 |        |             |
4008:000 | DONE ins | em 16 16 | 005be6 | a5 00       |                 lda.d 000000         
4009:000 | DONE ins | em 16 16 | 005be8 | 18          |                 clc                  
4010:000 | DONE ins | em 16 16 | 005be9 | 69 ff 00    |                 adc.# 0000ff         
4011:000 | DONE ins | em 16 16 | 005bec | a8          |                 tay                  
4012:000 | DONE wsp | em 16 16 |        |             |
4013:000 | DONE lbl | em 16 16 | 005bed |             | z_pad                                
4013:001 | DONE ins | em 16 16 | 005bed | 60          |                 rts                  
4014:000 | DONE wsp | em 16 16 |        |             |
4015:000 | DONE wsp | em 16 16 |        |             |
4016:000 | DONE cmt | em 16 16 |        |             | ; -------------------------------------------------------------------
4017:000 | DONE cmt | em 16 16 |        |             | ; PAGE ( -- ) X bytes / X cycles
4018:000 | DONE cmt | em 16 16 |        |             | ; Clear the screen on vt-100 terminals by sending the code "ESC[2J". This is
4019:000 | DONE cmt | em 16 16 |        |             | ; only useful in interactive scenarios so we don't worry about speed
4020:000 | DONE cmt | em 16 16 |        |             | ; TODO rewrite with EMIT
4021:000 | DONE lbl | em 16 16 | 005bee |             | xt_page                              
4022:000 | DONE ins | em 16 16 | 005bee | a9 22 71    |                 lda.# 007122         
4023:000 | DONE ins | em 16 16 | 005bf1 | 20 80 69    |                 jsr 006980           
4024:000 | DONE wsp | em 16 16 |        |             |
4025:000 | DONE cmt | em 16 16 |        |             |                 ; In theory, this should have moved the cursor to the top left
4026:000 | DONE cmt | em 16 16 |        |             |                 ; corner ("home"), but this doesn't seem to work in practice.
4027:000 | DONE cmt | em 16 16 |        |             |                 ; So we send "ESC[H" as well.
4028:000 | DONE ins | em 16 16 | 005bf4 | a9 27 71    |                 lda.# 007127         
4029:000 | DONE ins | em 16 16 | 005bf7 | 20 80 69    |                 jsr 006980           
4030:000 | DONE wsp | em 16 16 |        |             |
4031:000 | DONE lbl | em 16 16 | 005bfa |             | z_page                               
4031:001 | DONE ins | em 16 16 | 005bfa | 60          |                 rts                  
4032:000 | DONE wsp | em 16 16 |        |             |
4033:000 | DONE cmt | em 16 16 |        |             | ; -------------------------------------------------------------------
4034:000 | DONE cmt | em 16 16 |        |             | ; PARSE-NAME ( "name" -- addr u ) 41+ bytes / X cycles
4035:000 | DONE cmt | em 16 16 |        |             | ; Find next word in input string, skipping leading spaces. This is a special
4036:000 | DONE cmt | em 16 16 |        |             | ; form of PARSE and drops through to that word. See PARSE for more detail. We
4037:000 | DONE cmt | em 16 16 |        |             | ; use this word internally for the interpreter because it is a lot easier to use
4038:000 | DONE cmt | em 16 16 |        |             | ; http://forth-standard.org/standard/core/PARSE-NAME has a Forth implementation
4039:000 | DONE cmt | em 16 16 |        |             | ; Roughly, the word is comparable to  BL WORD COUNT in old terms.
4040:000 | DONE lbl | em 16 16 | 005bfb |             | xt_parse-name                        
4041:000 | DONE dir | em 16 16 |        |             |         .!a16                        
4042:000 | DONE dir | em 16 16 |        |             |         .!xy16                       
4043:000 | DONE cmt | em 16 16 |        |             |                 ; skip leading spaces, changing >IN, then place SPACE
4044:000 | DONE cmt | em 16 16 |        |             |                 ; character on data stack for PARSE
4045:000 | DONE ins | em 16 16 | 005bfb | 5a          |                 phy                  save TOS for later use
4046:000 | DONE ins | em 16 16 | 005bfc | a4 0c       |                 ldy.d 00000c         >IN
4047:000 | DONE ins | em 16 16 | 005bfe | e2 20       |                 sep 20               
4047:001 | DONE ctl | em  8 16 |        |             |         .!a8
4048:000 | DONE lbl | em  8 16 | 005c00 |             | parse-name_loop                      
4049:000 | DONE ins | em  8 16 | 005c00 | c4 0a       |                 cpy.d 00000a         end of line?
4050:000 | DONE ins | em  8 16 | 005c02 | f0 09       |                 beq 005c0d           
4051:000 | DONE wsp | em  8 16 |        |             |
4052:000 | DONE ins | em  8 16 | 005c04 | b1 08       |                 lda.diy 000008       LDA (CIB),Y
4053:000 | DONE ins | em  8 16 | 005c06 | c9 20       |                 cmp.# AscSP          
4054:000 | DONE ins | em  8 16 | 005c08 | d0 19       |                 bne 005c23           
4055:000 | DONE ins | em  8 16 | 005c0a | c8          |                 iny                  
4056:000 | DONE ins | em  8 16 | 005c0b | 80 f3       |                 bra 005c00           
4057:000 | DONE wsp | em  8 16 |        |             |
4058:000 | DONE lbl | em  8 16 | 005c0d |             | parse-name_empty_line                
4059:000 | DONE ins | em  8 16 | 005c0d | c2 20       |                 rep 20               
4059:001 | DONE ctl | em 16 16 |        |             |         .!a16
4060:000 | DONE cmt | em 16 16 |        |             |                 ; The Gforth documentation does not say what address is returned
4061:000 | DONE cmt | em 16 16 |        |             |                 ; if a string with only spaces is returned. Experiments with
4062:000 | DONE cmt | em 16 16 |        |             |                 ; the word  : PNT ( "name" -- ) PARSE-NAME SWAP U. U. TYPE ;
4063:000 | DONE cmt | em 16 16 |        |             |                 ; show that it returns the address of the last space in the
4064:000 | DONE cmt | em 16 16 |        |             |                 ; input, which is cib+ciblen. So we do that as well.
4065:000 | DONE ins | em 16 16 | 005c0f | ca          |                 dex                  
4066:000 | DONE ins | em 16 16 | 005c10 | ca          |                 dex                  
4067:000 | DONE ins | em 16 16 | 005c11 | ca          |                 dex                  
4068:000 | DONE ins | em 16 16 | 005c12 | ca          |                 dex                  
4069:000 | DONE wsp | em 16 16 |        |             |
4070:000 | DONE ins | em 16 16 | 005c13 | 7a          |                 ply                  restore old TOS as 3OS
4071:000 | DONE ins | em 16 16 | 005c14 | 94 02       |                 sty.dx 02            
4072:000 | DONE wsp | em 16 16 |        |             |
4073:000 | DONE ins | em 16 16 | 005c16 | a5 08       |                 lda.d 000008         
4074:000 | DONE ins | em 16 16 | 005c18 | 18          |                 clc                  
4075:000 | DONE ins | em 16 16 | 005c19 | 65 0a       |                 adc.d 00000a         
4076:000 | DONE ins | em 16 16 | 005c1b | 95 00       |                 sta.dx 00            Address as NOS
4077:000 | DONE wsp | em 16 16 |        |             |
4078:000 | DONE ins | em 16 16 | 005c1d | a0 00 00    |                 ldy.# 0000           TOS
4079:000 | DONE wsp | em 16 16 |        |             |
4080:000 | DONE ins | em 16 16 | 005c20 | 4c 61 5c    |                 jmp 005c61           don't have to go through PARSE
4081:000 | DONE wsp | em 16 16 |        |             |
4082:000 | DONE lbl | em 16 16 | 005c23 |             | parse-name_found                     
4083:000 | DONE dir | em 16 16 |        |             |         .!xy16                       
4084:000 | DONE ins | em 16 16 | 005c23 | c2 20       |                 rep 20               
4084:001 | DONE ctl | em 16 16 |        |             |         .!a16
4085:000 | DONE ins | em 16 16 | 005c25 | 84 0c       |                 sty.d 00000c         new >IN
4086:000 | DONE wsp | em 16 16 |        |             |
4087:000 | DONE ins | em 16 16 | 005c27 | 7a          |                 ply                  recover TOS
4088:000 | DONE ins | em 16 16 | 005c28 | ca          |                 dex                  
4089:000 | DONE ins | em 16 16 | 005c29 | ca          |                 dex                  
4090:000 | DONE ins | em 16 16 | 005c2a | 94 00       |                 sty.dx 00            
4091:000 | DONE wsp | em 16 16 |        |             |
4092:000 | DONE ins | em 16 16 | 005c2c | a0 20 00    |                 ldy.# AscSP          put space on TOS for PARSE
4093:000 | DONE wsp | em 16 16 |        |             |
4094:000 | DONE cmt | em 16 16 |        |             |                 ; fall thru to PARSE
4095:000 | DONE wsp | em 16 16 |        |             |
4096:000 | DONE cmt | em 16 16 |        |             | ; -------------------------------------------------------------------
4097:000 | DONE cmt | em 16 16 |        |             | ; PARSE ( c "name" -- addr u ) 45 bytes / X+ cycles
4098:000 | DONE cmt | em 16 16 |        |             | ; Find word in input string delimited by character given Do not skip leading
4099:000 | DONE cmt | em 16 16 |        |             | ; delimiters, this is an important difference to PARSE-NAME. PARSE and
4100:000 | DONE cmt | em 16 16 |        |             | ; PARSE-NAME replace WORD in modern systems. See the ANSI documentation at
4101:000 | DONE cmt | em 16 16 |        |             | ; http://www.forth200x.org/documents/html3/rationale.html#rat:core:PARSE
4102:000 | DONE cmt | em 16 16 |        |             | ; PARSE-NAME drops through to here
4103:000 | DONE cmt | em 16 16 |        |             | ;
4104:000 | DONE cmt | em 16 16 |        |             | ;    cib   cib+toin    cib+ciblen
4105:000 | DONE cmt | em 16 16 |        |             | ;     v       v             v
4106:000 | DONE cmt | em 16 16 |        |             | ;     |#####################|              Length of found string:
4107:000 | DONE cmt | em 16 16 |        |             | ;                                          ciblen - toin
4108:000 | DONE cmt | em 16 16 |        |             | ;     +------>|  toin (>IN)
4109:000 | DONE cmt | em 16 16 |        |             | ;     +-------------------->|  ciblen
4110:000 | DONE cmt | em 16 16 |        |             | ;
4111:000 | DONE cmt | em 16 16 |        |             | ; The input string is stored starting at the address in the Current Input Buffer
4112:000 | DONE cmt | em 16 16 |        |             | ; (CIB), the length of which is in CIBLEN. While searching for the delimiter,
4113:000 | DONE cmt | em 16 16 |        |             | ; TOIN (>IN) points to the where we currently are. Since PARSE does not skip
4114:000 | DONE cmt | em 16 16 |        |             | ; leading delimiters, we assume we are on a useful string.
4115:000 | DONE lbl | em 16 16 | 005c2f |             | xt_parse                             
4116:000 | DONE dir | em 16 16 |        |             |         .!a16                        
4117:000 | DONE dir | em 16 16 |        |             |         .!xy16                       
4118:000 | DONE ins | em 16 16 | 005c2f | 84 1c       |                 sty.d 00001c         save delimiter, char is LSB
4119:000 | DONE wsp | em 16 16 |        |             |
4120:000 | DONE cmt | em 16 16 |        |             |                 ; save beginning of new word (cib+toin) to NOS. Don't need to
4121:000 | DONE cmt | em 16 16 |        |             |                 ; worry about TOS because Y gets clobbered anyway before we
4122:000 | DONE cmt | em 16 16 |        |             |                 ; return
4123:000 | DONE ins | em 16 16 | 005c31 | a5 0c       |                 lda.d 00000c         
4124:000 | DONE ins | em 16 16 | 005c33 | 85 20       |                 sta.d 000020         save >IN for later length calculation
4125:000 | DONE ins | em 16 16 | 005c35 | 18          |                 clc                  
4126:000 | DONE ins | em 16 16 | 005c36 | 65 08       |                 adc.d 000008         
4127:000 | DONE wsp | em 16 16 |        |             |
4128:000 | DONE ins | em 16 16 | 005c38 | ca          |                 dex                  save addr as NOS
4129:000 | DONE ins | em 16 16 | 005c39 | ca          |                 dex                  
4130:000 | DONE ins | em 16 16 | 005c3a | 95 00       |                 sta.dx 00            
4131:000 | DONE wsp | em 16 16 |        |             |
4132:000 | DONE ins | em 16 16 | 005c3c | 64 1e       |                 stz.d 00001e         offset for EOL/char found adjustment of >IN
4133:000 | DONE wsp | em 16 16 |        |             |
4134:000 | DONE cmt | em 16 16 |        |             |                 ; prepare loop using Y as index
4135:000 | DONE ins | em 16 16 | 005c3e | a4 0c       |                 ldy.d 00000c         
4136:000 | DONE ins | em 16 16 | 005c40 | e2 20       |                 sep 20               
4136:001 | DONE ctl | em  8 16 |        |             |         .!a8
4137:000 | DONE wsp | em  8 16 |        |             |
4138:000 | DONE lbl | em  8 16 | 005c42 |             | parse_loop                           
4139:000 | DONE ins | em  8 16 | 005c42 | c4 0a       |                 cpy.d 00000a         check for EOL first
4140:000 | DONE ins | em  8 16 | 005c44 | f0 0d       |                 beq 005c53           
4141:000 | DONE wsp | em  8 16 |        |             |
4142:000 | DONE ins | em  8 16 | 005c46 | b1 08       |                 lda.diy 000008       LDA (CIB),Y
4143:000 | DONE ins | em  8 16 | 005c48 | c5 1c       |                 cmp.d 00001c         found delimiter?
4144:000 | DONE ins | em  8 16 | 005c4a | f0 03       |                 beq 005c4f           
4145:000 | DONE ins | em  8 16 | 005c4c | c8          |                 iny                  
4146:000 | DONE ins | em  8 16 | 005c4d | 80 f3       |                 bra 005c42           
4147:000 | DONE wsp | em  8 16 |        |             |
4148:000 | DONE lbl | em  8 16 | 005c4f |             | parse_found_delimiter                
4149:000 | DONE cmt | em  8 16 |        |             |                 ; If we haven't reached the end of the line, but found
4150:000 | DONE cmt | em  8 16 |        |             |                 ; a delimiter, we want >IN to point to the next character after
4151:000 | DONE cmt | em  8 16 |        |             |                 ; the delimiter, not the delimiter itself. This is what the
4152:000 | DONE cmt | em  8 16 |        |             |                 ; offset is for
4153:000 | DONE ins | em  8 16 | 005c4f | c2 20       |                 rep 20               
4153:001 | DONE ctl | em 16 16 |        |             |         .!a16
4154:000 | DONE ins | em 16 16 | 005c51 | e6 1e       |                 inc.d 00001e         
4155:000 | DONE wsp | em 16 16 |        |             |
4156:000 | DONE lbl | em 16 16 | 005c53 |             | parse_reached_eol                    
4157:000 | DONE cmt | em 16 16 |        |             |                 ; calculate length of string found (see ascii drawing)
4158:000 | DONE dir | em 16 16 |        |             |         .!xy16                       
4159:000 | DONE ins | em 16 16 | 005c53 | c2 20       |                 rep 20               
4159:001 | DONE ctl | em 16 16 |        |             |         .!a16
4160:000 | DONE ins | em 16 16 | 005c55 | 98          |                 tya                  
4161:000 | DONE ins | em 16 16 | 005c56 | 38          |                 sec                  
4162:000 | DONE ins | em 16 16 | 005c57 | e5 20       |                 sbc.d 000020         original value for >IN / index of first char
4163:000 | DONE ins | em 16 16 | 005c59 | 48          |                 pha                  save so we can manipulate Y
4164:000 | DONE wsp | em 16 16 |        |             |
4165:000 | DONE cmt | em 16 16 |        |             |                 ; calculate new >IN
4166:000 | DONE ins | em 16 16 | 005c5a | 98          |                 tya                  
4167:000 | DONE ins | em 16 16 | 005c5b | 18          |                 clc                  
4168:000 | DONE ins | em 16 16 | 005c5c | 65 1e       |                 adc.d 00001e         offset for EOL vs found delimiter
4169:000 | DONE ins | em 16 16 | 005c5e | 85 0c       |                 sta.d 00000c         
4170:000 | DONE wsp | em 16 16 |        |             |
4171:000 | DONE ins | em 16 16 | 005c60 | 7a          |                 ply                  length of string in TOS
4172:000 | DONE wsp | em 16 16 |        |             |
4173:000 | DONE lbl | em 16 16 | 005c61 |             | z_parse-name                         
4174:000 | DONE lbl | em 16 16 | 005c61 |             | z_parse                              
4174:001 | DONE ins | em 16 16 | 005c61 | 60          |                 rts                  
4175:000 | DONE wsp | em 16 16 |        |             |
4176:000 | DONE wsp | em 16 16 |        |             |
4177:000 | DONE cmt | em 16 16 |        |             | ; -------------------------------------------------------------------
4178:000 | DONE cmt | em 16 16 |        |             | ; PICK ( n n u -- n n n ) X bytes / X cycles
4179:000 | DONE cmt | em 16 16 |        |             | ; Take the u-th element out of the stack and put it on TOS, overwriting the
4180:000 | DONE cmt | em 16 16 |        |             | ; current TOS. 0 PICK is equivalent to DUP, 1 PICK to OVER. Note that using PICK
4181:000 | DONE cmt | em 16 16 |        |             | ; is considered poor coding form. Also note that FIG Forth has a different
4182:000 | DONE cmt | em 16 16 |        |             | ; behavior for PICK than ANS Forth.
4183:000 | DONE cmt | em 16 16 |        |             | ; TODO use DEPTH to check for underflow
4184:000 | DONE lbl | em 16 16 | 005c62 |             | xt_pick                              
4185:000 | DONE ins | em 16 16 | 005c62 | 86 22       |                 stx.d 000022         
4186:000 | DONE wsp | em 16 16 |        |             |
4187:000 | DONE ins | em 16 16 | 005c64 | 98          |                 tya                  Y is just an offset to the DSP
4188:000 | DONE ins | em 16 16 | 005c65 | 0a          |                 asl.a                double because of cell size two bytes
4189:000 | DONE wsp | em 16 16 |        |             |
4190:000 | DONE ins | em 16 16 | 005c66 | 18          |                 clc                  
4191:000 | DONE ins | em 16 16 | 005c67 | 65 22       |                 adc.d 000022         
4192:000 | DONE wsp | em 16 16 |        |             |
4193:000 | DONE ins | em 16 16 | 005c69 | aa          |                 tax                  
4194:000 | DONE ins | em 16 16 | 005c6a | b5 00       |                 lda.dx 00            LDA $00,X
4195:000 | DONE ins | em 16 16 | 005c6c | a8          |                 tay                  Is now TOS
4196:000 | DONE wsp | em 16 16 |        |             |
4197:000 | DONE ins | em 16 16 | 005c6d | a6 22       |                 ldx.d 000022         
4198:000 | DONE wsp | em 16 16 |        |             |
4199:000 | DONE lbl | em 16 16 | 005c6f |             | z_pick                               
4199:001 | DONE ins | em 16 16 | 005c6f | 60          |                 rts                  
4200:000 | DONE wsp | em 16 16 |        |             |
4201:000 | DONE wsp | em 16 16 |        |             |
4202:000 | DONE cmt | em 16 16 |        |             | ; -------------------------------------------------------------------
4203:000 | DONE cmt | em 16 16 |        |             | ; +! "PLUSSTORE" ( n addr -- ) 15 bytes / X cycles
4204:000 | DONE cmt | em 16 16 |        |             | ; Add NOS to address in TOS
4205:000 | DONE lbl | em 16 16 | 005c70 |             | xt_plusstore                         
4206:000 | DONE dir | em 16 16 |        |             |         .!a16                        
4207:000 | DONE ins | em 16 16 | 005c70 | b9 00 00    |                 lda.y 0000           
4208:000 | DONE ins | em 16 16 | 005c73 | 18          |                 clc                  
4209:000 | DONE ins | em 16 16 | 005c74 | 75 00       |                 adc.dx 00            
4210:000 | DONE ins | em 16 16 | 005c76 | 99 00 00    |                 sta.y 0000           
4211:000 | DONE wsp | em 16 16 |        |             |
4212:000 | DONE ins | em 16 16 | 005c79 | b4 02       |                 ldy.dx 02            
4213:000 | DONE ins | em 16 16 | 005c7b | e8          |                 inx                  
4214:000 | DONE ins | em 16 16 | 005c7c | e8          |                 inx                  
4215:000 | DONE ins | em 16 16 | 005c7d | e8          |                 inx                  
4216:000 | DONE ins | em 16 16 | 005c7e | e8          |                 inx                  
4217:000 | DONE wsp | em 16 16 |        |             |
4218:000 | DONE lbl | em 16 16 | 005c7f |             | z_plusstore                          
4218:001 | DONE ins | em 16 16 | 005c7f | 60          |                 rts                  
4219:000 | DONE wsp | em 16 16 |        |             |
4220:000 | DONE wsp | em 16 16 |        |             |
4221:000 | DONE cmt | em 16 16 |        |             | ; -------------------------------------------------------------------
4222:000 | DONE cmt | em 16 16 |        |             | ; POSTPONE ( -- ) X bytes / X cycles
4223:000 | DONE cmt | em 16 16 |        |             | ; Add the compilation behavior of a word to a new word at compile time. If the
4224:000 | DONE cmt | em 16 16 |        |             | ; word that follows it is immediate, include it so that it will be compiled when
4225:000 | DONE cmt | em 16 16 |        |             | ; the word being defined is itself used for a new word. Tricky, but very useful.
4226:000 | DONE cmt | em 16 16 |        |             | ; Because POSTPONE expects a word (not an xt) in the input stream (not on the
4227:000 | DONE cmt | em 16 16 |        |             | ; Data Stack). This means we cannot build words with "jsr xt_postpone, jsr
4228:000 | DONE cmt | em 16 16 |        |             | ; <word>" directly. This word uses tmp1
4229:000 | DONE lbl | em 16 16 | 005c80 |             | xt_postpone                          
4230:000 | DONE cmt | em 16 16 |        |             |                 ; get name from string
4231:000 | DONE ins | em 16 16 | 005c80 | 20 fb 5b    |                 jsr 005bfb           ( addr n )
4232:000 | DONE wsp | em 16 16 |        |             |
4233:000 | DONE cmt | em 16 16 |        |             |                 ; if there is no word in stream, complain and abort
4234:000 | DONE ins | em 16 16 | 005c83 | d0 06       |                 bne 005c8b           
4235:000 | DONE ins | em 16 16 | 005c85 | a9 76 70    |                 lda.# 007076         
4236:000 | DONE ins | em 16 16 | 005c88 | 4c 7a 69    |                 jmp 00697a           
4237:000 | DONE wsp | em 16 16 |        |             |
4238:000 | DONE lbl | em 16 16 | 005c8b |             | pp_got_word                          
4239:000 | DONE ins | em 16 16 | 005c8b | 20 33 59    |                 jsr 005933           ( nt | 0 )
4240:000 | DONE wsp | em 16 16 |        |             |
4241:000 | DONE cmt | em 16 16 |        |             |                 ; if word is not in Dictionary, complain and abort
4242:000 | DONE ins | em 16 16 | 005c8e | d0 03       |                 bne 005c93           
4243:000 | DONE ins | em 16 16 | 005c90 | a9 13 71    |                 lda.# 007113         
4244:000 | DONE wsp | em 16 16 |        |             |
4245:000 | DONE lbl | em 16 16 | 005c93 |             | pp_got_nt                            
4246:000 | DONE cmt | em 16 16 |        |             |                 ; Keep nt safe for later use
4247:000 | DONE ins | em 16 16 | 005c93 | 84 1c       |                 sty.d 00001c         
4248:000 | DONE wsp | em 16 16 |        |             |
4249:000 | DONE cmt | em 16 16 |        |             |                 ; We need the xt instead of the nt for the actual compiling
4250:000 | DONE ins | em 16 16 | 005c95 | 20 13 5b    |                 jsr 005b13           NAME>INT ( nt -- xt )
4251:000 | DONE wsp | em 16 16 |        |             |
4252:000 | DONE cmt | em 16 16 |        |             |                 ; See if this is an immediate word. This is easier with nt than
4253:000 | DONE cmt | em 16 16 |        |             |                 ; with xt
4254:000 | DONE ins | em 16 16 | 005c98 | b2 1c       |                 lda.di 00001c        LDA (TMP1) - get status byte of word
4255:000 | DONE ins | em 16 16 | 005c9a | eb          |                 xba                  flags are MSB
4256:000 | DONE ins | em 16 16 | 005c9b | 29 02 00    |                 and.# IM             mask everything but Immediate bit
4257:000 | DONE ins | em 16 16 | 005c9e | f0 04       |                 beq 005ca4           
4258:000 | DONE wsp | em 16 16 |        |             |
4259:000 | DONE cmt | em 16 16 |        |             |                 ; The word is immediate, so instead of executing it right now,
4260:000 | DONE cmt | em 16 16 |        |             |                 ; we compile it. xt is on the stack, so this is simple. The RTS
4261:000 | DONE cmt | em 16 16 |        |             |                 ; of COMPILE, takes us back to the original caller
4262:000 | DONE ins | em 16 16 | 005ca0 | 20 5b 56    |                 jsr 00565b           
4263:000 | DONE ins | em 16 16 | 005ca3 | 60          |                 rts                  
4264:000 | DONE wsp | em 16 16 |        |             |
4265:000 | DONE lbl | em 16 16 | 005ca4 |             | pp_not_immediate                     
4266:000 | DONE cmt | em 16 16 |        |             |                 ; This is not an immediate word, so we enact "deferred
4267:000 | DONE cmt | em 16 16 |        |             |                 ; compilation" by including ' <NAME> COMPILE, which we do by
4268:000 | DONE cmt | em 16 16 |        |             |                 ; compiling the run-time routine of LITERAL, the xt itself, and
4269:000 | DONE cmt | em 16 16 |        |             |                 ; a subroutine jump to COMPILE,
4270:000 | DONE ins | em 16 16 | 005ca4 | f4 6e 5a    |                 phe.# 005a6e         PEA LITERAL_RT
4271:000 | DONE ins | em 16 16 | 005ca7 | 20 59 69    |                 jsr 006959           
4272:000 | DONE wsp | em 16 16 |        |             |
4273:000 | DONE cmt | em 16 16 |        |             |                 ; The xt is TOS. We can't use COMPILE, here because it might
4274:000 | DONE cmt | em 16 16 |        |             |                 ; decided to do something silly like compile it as a native word
4275:000 | DONE cmt | em 16 16 |        |             |                 ; and ruin everything
4276:000 | DONE ins | em 16 16 | 005caa | 20 45 52    |                 jsr 005245           
4277:000 | DONE wsp | em 16 16 |        |             |
4278:000 | DONE cmt | em 16 16 |        |             |                 ; compile COMPILE,
4279:000 | DONE ins | em 16 16 | 005cad | f4 5b 56    |                 phe.# 00565b         
4280:000 | DONE ins | em 16 16 | 005cb0 | 20 59 69    |                 jsr 006959           
4281:000 | DONE wsp | em 16 16 |        |             |
4282:000 | DONE lbl | em 16 16 | 005cb3 |             | z_postpone                           
4282:001 | DONE ins | em 16 16 | 005cb3 | 60          |                 rts                  
4283:000 | DONE wsp | em 16 16 |        |             |
4284:000 | DONE wsp | em 16 16 |        |             |
4285:000 | DONE cmt | em 16 16 |        |             | ; -------------------------------------------------------------------
4286:000 | DONE cmt | em 16 16 |        |             | ; R@ "RFETCH" ( -- n ) (R: n -- n )  X bytes / X cycles
4287:000 | DONE cmt | em 16 16 |        |             | ; Get (not pull) Top of Return Stack. We follow Gforth in that this word is not
4288:000 | DONE cmt | em 16 16 |        |             | ; compiled only, because it can be interesting to know what the top of R is in
4289:000 | DONE cmt | em 16 16 |        |             | ; an interactive setting. However, this causes all kinds of problems if we try
4290:000 | DONE cmt | em 16 16 |        |             | ; to natively compile the word, so it does not get the NC flag even though it is
4291:000 | DONE cmt | em 16 16 |        |             | ; actually short enough to make that reasonable
4292:000 | DONE cmt | em 16 16 |        |             | ; TODO consider special case in COMPILE, see there
4293:000 | DONE lbl | em 16 16 | 005cb4 |             | xt_rfetch                            
4294:000 | DONE cmt | em 16 16 |        |             |                 ; get return address that is on top of the return stack
4295:000 | DONE ins | em 16 16 | 005cb4 | 68          |                 pla                  
4296:000 | DONE wsp | em 16 16 |        |             |
4297:000 | DONE ins | em 16 16 | 005cb5 | ca          |                 dex                  
4298:000 | DONE ins | em 16 16 | 005cb6 | ca          |                 dex                  
4299:000 | DONE ins | em 16 16 | 005cb7 | 94 00       |                 sty.dx 00            
4300:000 | DONE wsp | em 16 16 |        |             |
4301:000 | DONE ins | em 16 16 | 005cb9 | 7a          |                 ply                  get top of return stack and push copy back again
4302:000 | DONE ins | em 16 16 | 005cba | 5a          |                 phy                  
4303:000 | DONE wsp | em 16 16 |        |             |
4304:000 | DONE ins | em 16 16 | 005cbb | 48          |                 pha                  restore the return address
4305:000 | DONE wsp | em 16 16 |        |             |
4306:000 | DONE lbl | em 16 16 | 005cbc |             | z_rfetch                             
4306:001 | DONE ins | em 16 16 | 005cbc | 60          |                 rts                  
4307:000 | DONE wsp | em 16 16 |        |             |
4308:000 | DONE wsp | em 16 16 |        |             |
4309:000 | DONE cmt | em 16 16 |        |             | ; -------------------------------------------------------------------
4310:000 | DONE cmt | em 16 16 |        |             | ; R> "FROMR" ( -- n ) (R: n -- )  7 bytes / 23 cycles
4311:000 | DONE cmt | em 16 16 |        |             | ; Move Top of Return Stack to Top of Data Stack. Remember we have to move the
4312:000 | DONE cmt | em 16 16 |        |             | ; jump address out of the way first.
4313:000 | DONE cmt | em 16 16 |        |             | ; TODO consider stripping PHA/PLA if natively compiled (see COMPILE,)
4314:000 | DONE lbl | em 16 16 | 005cbd |             | xt_fromr                             
4315:000 | DONE cmt | em 16 16 |        |             |                 ; Rescue the address of the return jump that is currently top of
4316:000 | DONE cmt | em 16 16 |        |             |                 ; the Return Stack. If this word is natively compiled, this is
4317:000 | DONE cmt | em 16 16 |        |             |                 ; a waste of nine cycles
4318:000 | DONE ins | em 16 16 | 005cbd | 68          |                 pla                  
4319:000 | DONE cmt | em 16 16 |        |             |                 ; --- cut for native coding ---
4320:000 | DONE wsp | em 16 16 |        |             |
4321:000 | DONE ins | em 16 16 | 005cbe | ca          |                 dex                  
4322:000 | DONE ins | em 16 16 | 005cbf | ca          |                 dex                  
4323:000 | DONE ins | em 16 16 | 005cc0 | 94 00       |                 sty.dx 00            
4324:000 | DONE wsp | em 16 16 |        |             |
4325:000 | DONE ins | em 16 16 | 005cc2 | 7a          |                 ply                  the actual work
4326:000 | DONE wsp | em 16 16 |        |             |
4327:000 | DONE cmt | em 16 16 |        |             |                 ; --- cut for native coding ---
4328:000 | DONE ins | em 16 16 | 005cc3 | 48          |                 pha                  get return address back
4329:000 | DONE wsp | em 16 16 |        |             |
4330:000 | DONE lbl | em 16 16 | 005cc4 |             | z_fromr                              
4330:001 | DONE ins | em 16 16 | 005cc4 | 60          |                 rts                  
4331:000 | DONE wsp | em 16 16 |        |             |
4332:000 | DONE wsp | em 16 16 |        |             |
4333:000 | DONE cmt | em 16 16 |        |             | ; -------------------------------------------------------------------
4334:000 | DONE cmt | em 16 16 |        |             | ; REFILL ( -- f ) X bytes / X cycles
4335:000 | DONE cmt | em 16 16 |        |             | ; "Attempt to fill the input buffer from the input source, returning a true flag
4336:000 | DONE cmt | em 16 16 |        |             | ; if successful. When the input source is the user input device, attempt to
4337:000 | DONE cmt | em 16 16 |        |             | ; receive input into the terminal input buffer. If successful, make the result
4338:000 | DONE cmt | em 16 16 |        |             | ; the input buffer, set >IN to zero, and return true. Receipt of a line
4339:000 | DONE cmt | em 16 16 |        |             | ; containing no characters is considered successful. If there is no input
4340:000 | DONE cmt | em 16 16 |        |             | ; available from the current input source, return false. When the input source
4341:000 | DONE cmt | em 16 16 |        |             | ; is a string from EVALUATE, return false and perform no other action."
4342:000 | DONE cmt | em 16 16 |        |             | ; See https://www.complang.tuwien.ac.at/forth/gforth/Docs-html/The-Input-Stream.html
4343:000 | DONE cmt | em 16 16 |        |             | ; and Conklin & Rather p. 156
4344:000 | DONE lbl | em 16 16 | 005cc5 |             | xt_refill                            
4345:000 | DONE dir | em 16 16 |        |             |         .!a16                        
4346:000 | DONE dir | em 16 16 |        |             |         .!xy16                       
4347:000 | DONE cmt | em 16 16 |        |             |                 ; Get input source from SOURCE-ID. We don't have blocks in this
4348:000 | DONE cmt | em 16 16 |        |             |                 ; version, or else we would have to check BLK first. This is an
4349:000 | DONE cmt | em 16 16 |        |             |                 ; optimized version of a subroutine jump to SOURCE-ID
4350:000 | DONE ins | em 16 16 | 005cc5 | a5 06       |                 lda.d 000006         
4351:000 | DONE ins | em 16 16 | 005cc7 | d0 15       |                 bne 005cde           
4352:000 | DONE wsp | em 16 16 |        |             |
4353:000 | DONE cmt | em 16 16 |        |             |                 ; SOURCE-ID of zero means we're getting stuff from the keyboard
4354:000 | DONE cmt | em 16 16 |        |             |                 ; with ACCEPT.
4355:000 | DONE ins | em 16 16 | 005cc9 | ca          |                 dex                  
4356:000 | DONE ins | em 16 16 | 005cca | ca          |                 dex                  
4357:000 | DONE ins | em 16 16 | 005ccb | ca          |                 dex                  
4358:000 | DONE ins | em 16 16 | 005ccc | ca          |                 dex                  
4359:000 | DONE ins | em 16 16 | 005ccd | 94 02       |                 sty.dx 02            
4360:000 | DONE wsp | em 16 16 |        |             |
4361:000 | DONE ins | em 16 16 | 005ccf | a5 08       |                 lda.d 000008         address of current input buffer NOS
4362:000 | DONE ins | em 16 16 | 005cd1 | 95 00       |                 sta.dx 00            
4363:000 | DONE ins | em 16 16 | 005cd3 | a0 80 00    |                 ldy.# 000080         max number of chars to accept TOS
4364:000 | DONE wsp | em 16 16 |        |             |
4365:000 | DONE ins | em 16 16 | 005cd6 | 20 8b 54    |                 jsr 00548b           ( addr n1 -- n2)
4366:000 | DONE wsp | em 16 16 |        |             |
4367:000 | DONE cmt | em 16 16 |        |             |                 ; ACCEPT returns the number of characters accepted, but we don't
4368:000 | DONE cmt | em 16 16 |        |             |                 ; need them. We just overwrite TOS this with the flag
4369:000 | DONE ins | em 16 16 | 005cd9 | a0 ff ff    |                 ldy.# 0ffff          
4370:000 | DONE wsp | em 16 16 |        |             |
4371:000 | DONE ins | em 16 16 | 005cdc | 80 10       |                 bra 005cee           
4372:000 | DONE wsp | em 16 16 |        |             |
4373:000 | DONE lbl | em 16 16 | 005cde |             | refill_src_not_kbd                   
4374:000 | DONE cmt | em 16 16 |        |             |                 ; If SOURCE-ID doesn't return a zero, it must be a string in
4375:000 | DONE cmt | em 16 16 |        |             |                 ; memory or a file (remember, no blocks in this version)
4376:000 | DONE ins | em 16 16 | 005cde | 1a          |                 inc.a                
4377:000 | DONE ins | em 16 16 | 005cdf | d0 07       |                 bne 005ce8           
4378:000 | DONE wsp | em 16 16 |        |             |
4379:000 | DONE cmt | em 16 16 |        |             |                 ; Simply return FALSE flag as per specification
4380:000 | DONE ins | em 16 16 | 005ce1 | ca          |                 dex                  
4381:000 | DONE ins | em 16 16 | 005ce2 | ca          |                 dex                  
4382:000 | DONE ins | em 16 16 | 005ce3 | 94 00       |                 sty.dx 00            
4383:000 | DONE ins | em 16 16 | 005ce5 | a8          |                 tay                  
4384:000 | DONE wsp | em 16 16 |        |             |
4385:000 | DONE ins | em 16 16 | 005ce6 | 80 06       |                 bra 005cee           
4386:000 | DONE wsp | em 16 16 |        |             |
4387:000 | DONE lbl | em 16 16 | 005ce8 |             | refill_source_is_not_string          
4388:000 | DONE cmt | em 16 16 |        |             |                 ; Since we don't have blocks, this must mean that we are trying
4389:000 | DONE cmt | em 16 16 |        |             |                 ; to read from a file. However, we don't have files yet, so we
4390:000 | DONE cmt | em 16 16 |        |             |                 ; report an error and jump to ABORT.
4391:000 | DONE ins | em 16 16 | 005ce8 | a9 cb 70    |                 lda.# 0070cb         
4392:000 | DONE ins | em 16 16 | 005ceb | 4c 7a 69    |                 jmp 00697a           
4393:000 | DONE wsp | em 16 16 |        |             |
4394:000 | DONE lbl | em 16 16 | 005cee |             | z_refill                             
4394:001 | DONE ins | em 16 16 | 005cee | 60          |                 rts                  dummy for compiling
4395:000 | DONE wsp | em 16 16 |        |             |
4396:000 | DONE wsp | em 16 16 |        |             |
4397:000 | DONE cmt | em 16 16 |        |             | ; -------------------------------------------------------------------
4398:000 | DONE cmt | em 16 16 |        |             | ; ROT ( a b c -- b c a ) X bytes / X cycles
4399:000 | DONE cmt | em 16 16 |        |             | ; Rotate the top three entries downwards (third entry becomes first)
4400:000 | DONE cmt | em 16 16 |        |             | ; Remember this with the "R" for "revolution": The bottom entry becomes the top.
4401:000 | DONE lbl | em 16 16 | 005cef |             | xt_rot                               
4402:000 | DONE dir | em 16 16 |        |             |         .!a16                        
4403:000 | DONE ins | em 16 16 | 005cef | b5 00       |                 lda.dx 00            save b
4404:000 | DONE ins | em 16 16 | 005cf1 | 94 00       |                 sty.dx 00            move c to NOS
4405:000 | DONE ins | em 16 16 | 005cf3 | b4 02       |                 ldy.dx 02            move a to TOS
4406:000 | DONE ins | em 16 16 | 005cf5 | 95 02       |                 sta.dx 02            save b as 3OS
4407:000 | DONE wsp | em 16 16 |        |             |
4408:000 | DONE lbl | em 16 16 | 005cf7 |             | z_rot                                
4408:001 | DONE ins | em 16 16 | 005cf7 | 60          |                 rts                  
4409:000 | DONE wsp | em 16 16 |        |             |
4410:000 | DONE wsp | em 16 16 |        |             |
4411:000 | DONE cmt | em 16 16 |        |             | ; -------------------------------------------------------------------
4412:000 | DONE cmt | em 16 16 |        |             | ; RSHIFT ( n u -- u ) X bytes / X cycles
4413:000 | DONE cmt | em 16 16 |        |             | ; Shift TOS right, filling vacant bits with zero
4414:000 | DONE lbl | em 16 16 | 005cf8 |             | xt_rshift                            
4415:000 | DONE cmt | em 16 16 |        |             |                 ; We shift at most 16 bits, because anything above that will be
4416:000 | DONE cmt | em 16 16 |        |             |                 ; zeros anyway
4417:000 | DONE ins | em 16 16 | 005cf8 | 98          |                 tya                  
4418:000 | DONE ins | em 16 16 | 005cf9 | 29 0f 00    |                 and.# 000f           
4419:000 | DONE ins | em 16 16 | 005cfc | f0 09       |                 beq 005d07           if zero shifts, we're done
4420:000 | DONE wsp | em 16 16 |        |             |
4421:000 | DONE ins | em 16 16 | 005cfe | a8          |                 tay                  number of shifts is TOS
4422:000 | DONE ins | em 16 16 | 005cff | b5 00       |                 lda.dx 00            number is in NOS
4423:000 | DONE lbl | em 16 16 | 005d01 |             | rshift_loop                          
4424:000 | DONE ins | em 16 16 | 005d01 | 4a          |                 lsr.a                
4425:000 | DONE ins | em 16 16 | 005d02 | 88          |                 dey                  
4426:000 | DONE ins | em 16 16 | 005d03 | d0 fc       |                 bne 005d01           
4427:000 | DONE wsp | em 16 16 |        |             |
4428:000 | DONE ins | em 16 16 | 005d05 | 95 00       |                 sta.dx 00            put NOS, which last step will pull up
4429:000 | DONE wsp | em 16 16 |        |             |
4430:000 | DONE lbl | em 16 16 | 005d07 |             | rshift_done                          
4431:000 | DONE ins | em 16 16 | 005d07 | b4 00       |                 ldy.dx 00            
4432:000 | DONE ins | em 16 16 | 005d09 | e8          |                 inx                  
4433:000 | DONE ins | em 16 16 | 005d0a | e8          |                 inx                  
4434:000 | DONE wsp | em 16 16 |        |             |
4435:000 | DONE lbl | em 16 16 | 005d0b |             | z_rshift                             
4435:001 | DONE ins | em 16 16 | 005d0b | 60          |                 rts                  
4436:000 | DONE wsp | em 16 16 |        |             |
4437:000 | DONE wsp | em 16 16 |        |             |
4438:000 | DONE cmt | em 16 16 |        |             | ; -------------------------------------------------------------------
4439:000 | DONE cmt | em 16 16 |        |             | ; S" "SQUOTE" ( "string" -- addr u ) X bytes / X cycles
4440:000 | DONE cmt | em 16 16 |        |             | ; Store address and length of string given, returning ( addr u ). ANSI core
4441:000 | DONE cmt | em 16 16 |        |             | ; claims this is compile-only, but the file set expands it to be interpreted, so
4442:000 | DONE cmt | em 16 16 |        |             | ; it is a state-sensitive word, which are evil. This can also be realized as
4443:000 | DONE cmt | em 16 16 |        |             | ; : S" [CHAR] " PARSE POSTPONE SLITERAL ; IMMEDIATE  but it is used so much we
4444:000 | DONE cmt | em 16 16 |        |             | ; want it in code
4445:000 | DONE lbl | em 16 16 | 005d0c |             | xt_squote                            
4446:000 | DONE cmt | em 16 16 |        |             |                 ; we use PARSE to find the end of the sting. If the string is
4447:000 | DONE cmt | em 16 16 |        |             |                 ; empty, we don't complain, following Gforth's behavior
4448:000 | DONE ins | em 16 16 | 005d0c | ca          |                 dex                  
4449:000 | DONE ins | em 16 16 | 005d0d | ca          |                 dex                  
4450:000 | DONE ins | em 16 16 | 005d0e | 94 00       |                 sty.dx 00            
4451:000 | DONE wsp | em 16 16 |        |             |
4452:000 | DONE ins | em 16 16 | 005d10 | a0 22 00    |                 ldy.# 0022           ASCII for " in hex
4453:000 | DONE ins | em 16 16 | 005d13 | 20 2f 5c    |                 jsr 005c2f           Returns ( addr u ) of string
4454:000 | DONE wsp | em 16 16 |        |             |
4455:000 | DONE cmt | em 16 16 |        |             |                 ; What happens now depends on the state. If we are compiling, we
4456:000 | DONE cmt | em 16 16 |        |             |                 ; include a subroutine jump to SLITERAL to save the string. If
4457:000 | DONE cmt | em 16 16 |        |             |                 ; we are interpreting, we're done
4458:000 | DONE ins | em 16 16 | 005d16 | a5 14       |                 lda.d 000014         
4459:000 | DONE ins | em 16 16 | 005d18 | d0 24       |                 bne 005d3e           
4460:000 | DONE wsp | em 16 16 |        |             |
4461:000 | DONE cmt | em 16 16 |        |             | 		; We copy our string to someplace safe because it lives
4462:000 | DONE cmt | em 16 16 |        |             |                 ; dangerously if we leave it in the input buffer. This might
4463:000 | DONE cmt | em 16 16 |        |             |                 ; seem like a lot of effort for a few bytes, but MVN is so fast
4464:000 | DONE cmt | em 16 16 |        |             |                 ; - 7 cycles per byte - that it is worth it. See
4465:000 | DONE cmt | em 16 16 |        |             |                 ; http://forum.6502.org/viewtopic.php?f=2&t=1685&p=50975#p50975
4466:000 | DONE cmt | em 16 16 |        |             |                 ; and http://6502.org/tutorials/65c816opcodes.html#6.6
4467:000 | DONE ins | em 16 16 | 005d1a | ca          |                 dex                  
4468:000 | DONE ins | em 16 16 | 005d1b | ca          |                 dex                  
4469:000 | DONE ins | em 16 16 | 005d1c | 94 00       |                 sty.dx 00            
4470:000 | DONE ins | em 16 16 | 005d1e | a4 00       |                 ldy.d 000000         HERE  ( addr-s u addr-d )
4471:000 | DONE wsp | em 16 16 |        |             |
4472:000 | DONE ins | em 16 16 | 005d20 | b5 00       |                 lda.dx 00            SWAP ( addr-s addr-d u )
4473:000 | DONE ins | em 16 16 | 005d22 | 94 00       |                 sty.dx 00            
4474:000 | DONE ins | em 16 16 | 005d24 | a8          |                 tay                  
4475:000 | DONE wsp | em 16 16 |        |             |
4476:000 | DONE ins | em 16 16 | 005d25 | 5a          |                 phy                  save copy of u
4477:000 | DONE ins | em 16 16 | 005d26 | b5 00       |                 lda.dx 00            save copy of addr-d
4478:000 | DONE ins | em 16 16 | 005d28 | 48          |                 pha                  
4479:000 | DONE wsp | em 16 16 |        |             |
4480:000 | DONE ins | em 16 16 | 005d29 | 20 ff 5a    |                 jsr 005aff           
4481:000 | DONE wsp | em 16 16 |        |             |
4482:000 | DONE ins | em 16 16 | 005d2c | ca          |                 dex                  
4483:000 | DONE ins | em 16 16 | 005d2d | ca          |                 dex                  
4484:000 | DONE ins | em 16 16 | 005d2e | ca          |                 dex                  
4485:000 | DONE ins | em 16 16 | 005d2f | ca          |                 dex                  
4486:000 | DONE ins | em 16 16 | 005d30 | 94 02       |                 sty.dx 02            
4487:000 | DONE wsp | em 16 16 |        |             |
4488:000 | DONE ins | em 16 16 | 005d32 | 68          |                 pla                  get addr-d back
4489:000 | DONE ins | em 16 16 | 005d33 | 95 00       |                 sta.dx 00            put NOS
4490:000 | DONE ins | em 16 16 | 005d35 | 68          |                 pla                  get u back, put TOS
4491:000 | DONE ins | em 16 16 | 005d36 | a8          |                 tay                  
4492:000 | DONE wsp | em 16 16 |        |             |
4493:000 | DONE cmt | em 16 16 |        |             |                 ; update CP
4494:000 | DONE ins | em 16 16 | 005d37 | 18          |                 clc                  
4495:000 | DONE ins | em 16 16 | 005d38 | 65 00       |                 adc.d 000000         
4496:000 | DONE ins | em 16 16 | 005d3a | 85 00       |                 sta.d 000000         
4497:000 | DONE wsp | em 16 16 |        |             |
4498:000 | DONE ins | em 16 16 | 005d3c | 80 03       |                 bra 005d41           
4499:000 | DONE wsp | em 16 16 |        |             |
4500:000 | DONE lbl | em 16 16 | 005d3e |             | squote_compile                       
4501:000 | DONE cmt | em 16 16 |        |             |                 ; We're compiling, so we need SLITERAL
4502:000 | DONE ins | em 16 16 | 005d3e | 20 62 5d    |                 jsr 005d62           
4503:000 | DONE wsp | em 16 16 |        |             |
4504:000 | DONE lbl | em 16 16 | 005d41 |             | z_squote                             
4504:001 | DONE ins | em 16 16 | 005d41 | 60          |                 rts                  
4505:000 | DONE wsp | em 16 16 |        |             |
4506:000 | DONE wsp | em 16 16 |        |             |
4507:000 | DONE cmt | em 16 16 |        |             | ; -------------------------------------------------------------------
4508:000 | DONE cmt | em 16 16 |        |             | ; S>D ( n -- d ) 15 bytes / X cycles
4509:000 | DONE cmt | em 16 16 |        |             | ; Convert a single cell number to double cells, conserving the sign
4510:000 | DONE lbl | em 16 16 | 005d42 |             | xt_stod                              
4511:000 | DONE ins | em 16 16 | 005d42 | ca          |                 dex                  make room on stack
4512:000 | DONE ins | em 16 16 | 005d43 | ca          |                 dex                  
4513:000 | DONE ins | em 16 16 | 005d44 | 94 00       |                 sty.dx 00            
4514:000 | DONE wsp | em 16 16 |        |             |
4515:000 | DONE ins | em 16 16 | 005d46 | 98          |                 tya                  force flag check
4516:000 | DONE ins | em 16 16 | 005d47 | 10 05       |                 bpl 005d4e           
4517:000 | DONE wsp | em 16 16 |        |             |
4518:000 | DONE cmt | em 16 16 |        |             |                 ; negative number, extend sign
4519:000 | DONE ins | em 16 16 | 005d49 | a0 ff ff    |                 ldy.# 0ffff          
4520:000 | DONE ins | em 16 16 | 005d4c | 80 03       |                 bra 005d51           
4521:000 | DONE wsp | em 16 16 |        |             |
4522:000 | DONE lbl | em 16 16 | 005d4e |             | stod_pos                             
4523:000 | DONE cmt | em 16 16 |        |             |                 ; positive number
4524:000 | DONE ins | em 16 16 | 005d4e | a0 00 00    |                 ldy.# 0000           fall through
4525:000 | DONE wsp | em 16 16 |        |             |
4526:000 | DONE lbl | em 16 16 | 005d51 |             | z_stod                               
4526:001 | DONE ins | em 16 16 | 005d51 | 60          |                 rts                  
4527:000 | DONE wsp | em 16 16 |        |             |
4528:000 | DONE cmt | em 16 16 |        |             | ; -------------------------------------------------------------------
4529:000 | DONE cmt | em 16 16 |        |             | ; SIGN ( n -- ) 13 bytes / X cycles
4530:000 | DONE cmt | em 16 16 |        |             | ; If TOS is negative, add a minus sign to the pictured output. Code based on
4531:000 | DONE cmt | em 16 16 |        |             | ; https://github.com/philburk/pforth/blob/master/fth/system.fth
4532:000 | DONE cmt | em 16 16 |        |             | ; Origin Forth code is  0< IF [CHAR] - HOLD THEN
4533:000 | DONE lbl | em 16 16 | 005d52 |             | xt_sign                              
4534:000 | DONE dir | em 16 16 |        |             |         .!a16                        
4535:000 | DONE cmt | em 16 16 |        |             |                 ; See if number is negative
4536:000 | DONE ins | em 16 16 | 005d52 | 98          |                 tya                  force flag check
4537:000 | DONE ins | em 16 16 | 005d53 | 10 08       |                 bpl 005d5d           
4538:000 | DONE wsp | em 16 16 |        |             |
4539:000 | DONE cmt | em 16 16 |        |             |                 ; We're negative, overwrite number TOS
4540:000 | DONE ins | em 16 16 | 005d55 | a0 2d 00    |                 ldy.# 002d           ASCII for '-'
4541:000 | DONE wsp | em 16 16 |        |             |
4542:000 | DONE ins | em 16 16 | 005d58 | 20 36 5a    |                 jsr 005a36           
4543:000 | DONE ins | em 16 16 | 005d5b | 80 04       |                 bra 005d61           
4544:000 | DONE wsp | em 16 16 |        |             |
4545:000 | DONE lbl | em 16 16 | 005d5d |             | sign_plus                            
4546:000 | DONE ins | em 16 16 | 005d5d | b4 00       |                 ldy.dx 00            get rid of number and leave
4547:000 | DONE ins | em 16 16 | 005d5f | e8          |                 inx                  
4548:000 | DONE ins | em 16 16 | 005d60 | e8          |                 inx                  
4549:000 | DONE wsp | em 16 16 |        |             |
4550:000 | DONE lbl | em 16 16 | 005d61 |             | z_sign                               
4550:001 | DONE ins | em 16 16 | 005d61 | 60          |                 rts                  
4551:000 | DONE wsp | em 16 16 |        |             |
4552:000 | DONE wsp | em 16 16 |        |             |
4553:000 | DONE cmt | em 16 16 |        |             | ; -------------------------------------------------------------------
4554:000 | DONE cmt | em 16 16 |        |             | ; SLITERAL ( addr u -- ) ( -- addr u ) X bytes / X cycles
4555:000 | DONE cmt | em 16 16 |        |             | ; At compile time, store string, at runtime, return address and length of string
4556:000 | DONE cmt | em 16 16 |        |             | ; on the Data Stack. Used for S" among other things. This routine uses tmp1,
4557:000 | DONE cmt | em 16 16 |        |             | ; tmp2
4558:000 | DONE lbl | em 16 16 | 005d62 |             | xt_sliteral                          
4559:000 | DONE dir | em 16 16 |        |             |         .!a16                        
4560:000 | DONE cmt | em 16 16 |        |             |                 ; We can't assume that ( addr u ) of the current string is in
4561:000 | DONE cmt | em 16 16 |        |             |                 ; a stable area, so we first have to move them to safety. Since
4562:000 | DONE cmt | em 16 16 |        |             |                 ; CP points to where the interpreter expects to be able to
4563:000 | DONE cmt | em 16 16 |        |             |                 ; continue in the code, we have to jump over the string. We use
4564:000 | DONE cmt | em 16 16 |        |             |                 ; JMP instead of BRA so we can use longer strings
4565:000 | DONE ins | em 16 16 | 005d62 | b5 00       |                 lda.dx 00            Address of string is NOS
4566:000 | DONE ins | em 16 16 | 005d64 | 85 1c       |                 sta.d 00001c         
4567:000 | DONE ins | em 16 16 | 005d66 | 84 1e       |                 sty.d 00001e         keep copy of string length
4568:000 | DONE wsp | em 16 16 |        |             |
4569:000 | DONE ins | em 16 16 | 005d68 | e2 20       |                 sep 20               
4569:001 | DONE ctl | em  8 16 |        |             |         .!a8
4570:000 | DONE ins | em  8 16 | 005d6a | a9 4c       |                 lda.# 04c            opcode for JMP
4571:000 | DONE ins | em  8 16 | 005d6c | 92 00       |                 sta.di 000000        STA (CP)
4572:000 | DONE ins | em  8 16 | 005d6e | c2 20       |                 rep 20               
4572:001 | DONE ctl | em 16 16 |        |             |         .!a16
4573:000 | DONE ins | em 16 16 | 005d70 | e6 00       |                 inc.d 000000         
4574:000 | DONE wsp | em 16 16 |        |             |
4575:000 | DONE cmt | em 16 16 |        |             |                 ; Our jump target is CP + 2 (for the length of the jump
4576:000 | DONE cmt | em 16 16 |        |             |                 ; instruction itself ) + the length of the string
4577:000 | DONE ins | em 16 16 | 005d72 | a5 1e       |                 lda.d 00001e         string length
4578:000 | DONE ins | em 16 16 | 005d74 | 1a          |                 inc.a                
4579:000 | DONE ins | em 16 16 | 005d75 | 1a          |                 inc.a                
4580:000 | DONE wsp | em 16 16 |        |             |
4581:000 | DONE ins | em 16 16 | 005d76 | 18          |                 clc                  
4582:000 | DONE ins | em 16 16 | 005d77 | 65 00       |                 adc.d 000000         current address
4583:000 | DONE ins | em 16 16 | 005d79 | 92 00       |                 sta.di 000000        store jump target
4584:000 | DONE wsp | em 16 16 |        |             |
4585:000 | DONE cmt | em 16 16 |        |             |                 ; update CP to move past JMP instruction
4586:000 | DONE ins | em 16 16 | 005d7b | e6 00       |                 inc.d 000000         
4587:000 | DONE ins | em 16 16 | 005d7d | e6 00       |                 inc.d 000000         
4588:000 | DONE wsp | em 16 16 |        |             |
4589:000 | DONE cmt | em 16 16 |        |             |                 ; now we can safely copy the code
4590:000 | DONE ins | em 16 16 | 005d7f | 88          |                 dey                  last offset is one less than length
4591:000 | DONE ins | em 16 16 | 005d80 | e2 20       |                 sep 20               
4591:001 | DONE ctl | em  8 16 |        |             |         .!a8
4592:000 | DONE lbl | em  8 16 | 005d82 |             | sl_loop                              
4593:000 | DONE ins | em  8 16 | 005d82 | b1 1c       |                 lda.diy 00001c       LDA (TMP1),Y
4594:000 | DONE ins | em  8 16 | 005d84 | 91 00       |                 sta.diy 000000       STA (CP),Y
4595:000 | DONE ins | em  8 16 | 005d86 | 88          |                 dey                  
4596:000 | DONE ins | em  8 16 | 005d87 | 10 f9       |                 bpl 005d82           
4597:000 | DONE wsp | em  8 16 |        |             |
4598:000 | DONE ins | em  8 16 | 005d89 | c2 20       |                 rep 20               
4598:001 | DONE ctl | em 16 16 |        |             |         .!a16
4599:000 | DONE cmt | em 16 16 |        |             |                 ; keep old CP as new address of string
4600:000 | DONE ins | em 16 16 | 005d8b | a5 00       |                 lda.d 000000         
4601:000 | DONE ins | em 16 16 | 005d8d | 85 1c       |                 sta.d 00001c         overwrites original address
4602:000 | DONE wsp | em 16 16 |        |             |
4603:000 | DONE cmt | em 16 16 |        |             |                 ; update CP
4604:000 | DONE ins | em 16 16 | 005d8f | 18          |                 clc                  
4605:000 | DONE ins | em 16 16 | 005d90 | 65 1e       |                 adc.d 00001e         length of string
4606:000 | DONE ins | em 16 16 | 005d92 | 85 00       |                 sta.d 000000         
4607:000 | DONE wsp | em 16 16 |        |             |
4608:000 | DONE cmt | em 16 16 |        |             |                 ; Compile a subroutine jump to the runtime of SLITERAL that
4609:000 | DONE cmt | em 16 16 |        |             |                 ; pushes the new ( addr u ) pair to the Data Stack. When we're
4610:000 | DONE cmt | em 16 16 |        |             |                 ; done, the code will look like this:
4611:000 | DONE cmt | em 16 16 |        |             |                 ;
4612:000 | DONE cmt | em 16 16 |        |             |                 ; xt -->    jmp a
4613:000 | DONE cmt | em 16 16 |        |             |                 ;           <string data bytes>
4614:000 | DONE cmt | em 16 16 |        |             |                 ;  a -->    jsr sliteral_rt
4615:000 | DONE cmt | em 16 16 |        |             |                 ;           <string address>
4616:000 | DONE cmt | em 16 16 |        |             |                 ;           <string length>
4617:000 | DONE cmt | em 16 16 |        |             |                 ; rts -->
4618:000 | DONE cmt | em 16 16 |        |             |                 ;
4619:000 | DONE cmt | em 16 16 |        |             |                 ; This means we'll have to adjust the return address for two
4620:000 | DONE cmt | em 16 16 |        |             |                 ; cells, not just one
4621:000 | DONE ins | em 16 16 | 005d94 | f4 ad 5d    |                 phe.# 005dad         
4622:000 | DONE ins | em 16 16 | 005d97 | 20 59 69    |                 jsr 006959           
4623:000 | DONE wsp | em 16 16 |        |             |
4624:000 | DONE cmt | em 16 16 |        |             |                 ; We want to have the addr end up as NOS and the length as TOS,
4625:000 | DONE cmt | em 16 16 |        |             |                 ; so we store the address first
4626:000 | DONE ins | em 16 16 | 005d9a | a5 1c       |                 lda.d 00001c         new address of string
4627:000 | DONE ins | em 16 16 | 005d9c | 48          |                 pha                  
4628:000 | DONE ins | em 16 16 | 005d9d | 20 54 69    |                 jsr 006954           
4629:000 | DONE wsp | em 16 16 |        |             |
4630:000 | DONE ins | em 16 16 | 005da0 | a5 1e       |                 lda.d 00001e         
4631:000 | DONE ins | em 16 16 | 005da2 | 48          |                 pha                  
4632:000 | DONE ins | em 16 16 | 005da3 | 20 54 69    |                 jsr 006954           
4633:000 | DONE wsp | em 16 16 |        |             |
4634:000 | DONE cmt | em 16 16 |        |             |                 ; all done, clean up and leave
4635:000 | DONE ins | em 16 16 | 005da6 | b4 02       |                 ldy.dx 02            2DROP
4636:000 | DONE ins | em 16 16 | 005da8 | e8          |                 inx                  
4637:000 | DONE ins | em 16 16 | 005da9 | e8          |                 inx                  
4638:000 | DONE ins | em 16 16 | 005daa | e8          |                 inx                  
4639:000 | DONE ins | em 16 16 | 005dab | e8          |                 inx                  
4640:000 | DONE wsp | em 16 16 |        |             |
4641:000 | DONE lbl | em 16 16 | 005dac |             | z_sliteral                           
4641:001 | DONE ins | em 16 16 | 005dac | 60          |                 rts                  
4642:000 | DONE wsp | em 16 16 |        |             |
4643:000 | DONE lbl | em 16 16 | 005dad |             | sliteral_rt                          
4644:000 | DONE cmt | em 16 16 |        |             |                 ; Run time behaviour of SLITERAL: Push ( addr u ) of string to
4645:000 | DONE cmt | em 16 16 |        |             |                 ; the Data Stack. We arrive here with the return address as the
4646:000 | DONE cmt | em 16 16 |        |             |                 ; top of Return Stack, which points to the address of the string
4647:000 | DONE wsp | em 16 16 |        |             |
4648:000 | DONE cmt | em 16 16 |        |             |                 ; Make room on stack, which also frees Y for other use
4649:000 | DONE ins | em 16 16 | 005dad | ca          |                 dex                  
4650:000 | DONE ins | em 16 16 | 005dae | ca          |                 dex                  
4651:000 | DONE ins | em 16 16 | 005daf | ca          |                 dex                  
4652:000 | DONE ins | em 16 16 | 005db0 | ca          |                 dex                  
4653:000 | DONE ins | em 16 16 | 005db1 | 94 02       |                 sty.dx 02            
4654:000 | DONE wsp | em 16 16 |        |             |
4655:000 | DONE cmt | em 16 16 |        |             |                 ; Get the address of the string address off the stack and
4656:000 | DONE cmt | em 16 16 |        |             |                 ; increase by one because of the RTS mechanics
4657:000 | DONE ins | em 16 16 | 005db3 | 7a          |                 ply                  
4658:000 | DONE ins | em 16 16 | 005db4 | c8          |                 iny                  
4659:000 | DONE wsp | em 16 16 |        |             |
4660:000 | DONE ins | em 16 16 | 005db5 | b9 00 00    |                 lda.y 0000           LDA $0000,Y
4661:000 | DONE ins | em 16 16 | 005db8 | 95 00       |                 sta.dx 00            save string address as NOS
4662:000 | DONE ins | em 16 16 | 005dba | c8          |                 iny                  
4663:000 | DONE ins | em 16 16 | 005dbb | c8          |                 iny                  
4664:000 | DONE ins | em 16 16 | 005dbc | b9 00 00    |                 lda.y 0000           get length of string, will be TOS ...
4665:000 | DONE wsp | em 16 16 |        |             |
4666:000 | DONE ins | em 16 16 | 005dbf | c8          |                 iny                  ... first, though, repair return jump
4667:000 | DONE ins | em 16 16 | 005dc0 | 5a          |                 phy                  
4668:000 | DONE wsp | em 16 16 |        |             |
4669:000 | DONE ins | em 16 16 | 005dc1 | a8          |                 tay                  TOS is now length of string
4670:000 | DONE wsp | em 16 16 |        |             |
4671:000 | DONE ins | em 16 16 | 005dc2 | 60          |                 rts                  
4672:000 | DONE wsp | em 16 16 |        |             |
4673:000 | DONE cmt | em 16 16 |        |             | ; -------------------------------------------------------------------
4674:000 | DONE cmt | em 16 16 |        |             | ; SM/REM ( d n1 -- n2 n3) X bytes / X cycles
4675:000 | DONE cmt | em 16 16 |        |             | ; Symmetic signed division. Compare FM/MOD. Code from Gforth, see
4676:000 | DONE cmt | em 16 16 |        |             | ; https://groups.google.com/forum/#!topic/comp.lang.forth/_bx4dJFb9R0
4677:000 | DONE cmt | em 16 16 |        |             | ; and http://git.savannah.gnu.org/cgit/gforth.git/tree/prim ; see
4678:000 | DONE cmt | em 16 16 |        |             | ; http://www.figuk.plus.com/build/arith.htm for variants. Forth is
4679:000 | DONE cmt | em 16 16 |        |             | ; SM/REM OVER >R DUP >R ABS -ROT DABS ROT UM/MOD R>
4680:000 | DONE cmt | em 16 16 |        |             | ; R@ XOR 0< IF NEGATE THEN R> 0< IF SWAP NEGATE SWAP THEN ;
4681:000 | DONE cmt | em 16 16 |        |             | ; TODO optimize in assembler
4682:000 | DONE lbl | em 16 16 | 005dc3 |             | xt_smrem                             
4683:000 | DONE dir | em 16 16 |        |             |         .!a16                        
4684:000 | DONE ins | em 16 16 | 005dc3 | 20 db 5b    |                 jsr 005bdb           
4685:000 | DONE wsp | em 16 16 |        |             |
4686:000 | DONE ins | em 16 16 | 005dc6 | 5a          |                 phy                  >R
4687:000 | DONE ins | em 16 16 | 005dc7 | b4 00       |                 ldy.dx 00            
4688:000 | DONE ins | em 16 16 | 005dc9 | e8          |                 inx                  
4689:000 | DONE ins | em 16 16 | 005dca | e8          |                 inx                  
4690:000 | DONE wsp | em 16 16 |        |             |
4691:000 | DONE ins | em 16 16 | 005dcb | ca          |                 dex                  DUP
4692:000 | DONE ins | em 16 16 | 005dcc | ca          |                 dex                  
4693:000 | DONE ins | em 16 16 | 005dcd | 94 00       |                 sty.dx 00            
4694:000 | DONE wsp | em 16 16 |        |             |
4695:000 | DONE ins | em 16 16 | 005dcf | 5a          |                 phy                  >R
4696:000 | DONE ins | em 16 16 | 005dd0 | b4 00       |                 ldy.dx 00            
4697:000 | DONE ins | em 16 16 | 005dd2 | e8          |                 inx                  
4698:000 | DONE ins | em 16 16 | 005dd3 | e8          |                 inx                  
4699:000 | DONE wsp | em 16 16 |        |             |
4700:000 | DONE ins | em 16 16 | 005dd4 | 20 82 54    |                 jsr 005482           ABS
4701:000 | DONE ins | em 16 16 | 005dd7 | 20 3d 53    |                 jsr 00533d           -ROT
4702:000 | DONE ins | em 16 16 | 005dda | 20 21 58    |                 jsr 005821           DABS
4703:000 | DONE ins | em 16 16 | 005ddd | 20 ef 5c    |                 jsr 005cef           ROT
4704:000 | DONE ins | em 16 16 | 005de0 | 20 1f 5f    |                 jsr 005f1f           UM/MOD
4705:000 | DONE wsp | em 16 16 |        |             |
4706:000 | DONE ins | em 16 16 | 005de3 | ca          |                 dex                  R>
4707:000 | DONE ins | em 16 16 | 005de4 | ca          |                 dex                  
4708:000 | DONE ins | em 16 16 | 005de5 | 94 00       |                 sty.dx 00            
4709:000 | DONE ins | em 16 16 | 005de7 | 7a          |                 ply                  
4710:000 | DONE wsp | em 16 16 |        |             |
4711:000 | DONE ins | em 16 16 | 005de8 | ca          |                 dex                  R@
4712:000 | DONE ins | em 16 16 | 005de9 | ca          |                 dex                  
4713:000 | DONE ins | em 16 16 | 005dea | 94 00       |                 sty.dx 00            
4714:000 | DONE ins | em 16 16 | 005dec | 7a          |                 ply                  
4715:000 | DONE ins | em 16 16 | 005ded | 5a          |                 phy                  
4716:000 | DONE wsp | em 16 16 |        |             |
4717:000 | DONE ins | em 16 16 | 005dee | 20 03 60    |                 jsr 006003           XOR
4718:000 | DONE wsp | em 16 16 |        |             |
4719:000 | DONE ins | em 16 16 | 005df1 | 98          |                 tya                  0< IF
4720:000 | DONE ins | em 16 16 | 005df2 | 10 09       |                 bpl 005dfd           
4721:000 | DONE wsp | em 16 16 |        |             |
4722:000 | DONE ins | em 16 16 | 005df4 | b4 00       |                 ldy.dx 00            from IF
4723:000 | DONE ins | em 16 16 | 005df6 | e8          |                 inx                  
4724:000 | DONE ins | em 16 16 | 005df7 | e8          |                 inx                  
4725:000 | DONE wsp | em 16 16 |        |             |
4726:000 | DONE ins | em 16 16 | 005df8 | 20 3e 5b    |                 jsr 005b3e           NEGATE
4727:000 | DONE ins | em 16 16 | 005dfb | 80 04       |                 bra 005e01           
4728:000 | DONE lbl | em 16 16 | 005dfd |             | smrem_1                              
4729:000 | DONE ins | em 16 16 | 005dfd | b4 00       |                 ldy.dx 00            from IF
4730:000 | DONE ins | em 16 16 | 005dff | e8          |                 inx                  
4731:000 | DONE ins | em 16 16 | 005e00 | e8          |                 inx                  
4732:000 | DONE wsp | em 16 16 |        |             |
4733:000 | DONE lbl | em 16 16 | 005e01 |             | smrem_1_1                            
4734:000 | DONE ins | em 16 16 | 005e01 | ca          |                 dex                  R>
4735:000 | DONE ins | em 16 16 | 005e02 | ca          |                 dex                  
4736:000 | DONE ins | em 16 16 | 005e03 | 94 00       |                 sty.dx 00            
4737:000 | DONE ins | em 16 16 | 005e05 | 7a          |                 ply                  
4738:000 | DONE wsp | em 16 16 |        |             |
4739:000 | DONE ins | em 16 16 | 005e06 | 98          |                 tya                  0< IF
4740:000 | DONE ins | em 16 16 | 005e07 | 10 0f       |                 bpl 005e18           
4741:000 | DONE wsp | em 16 16 |        |             |
4742:000 | DONE ins | em 16 16 | 005e09 | b4 00       |                 ldy.dx 00            from IF
4743:000 | DONE ins | em 16 16 | 005e0b | e8          |                 inx                  
4744:000 | DONE ins | em 16 16 | 005e0c | e8          |                 inx                  
4745:000 | DONE wsp | em 16 16 |        |             |
4746:000 | DONE ins | em 16 16 | 005e0d | 20 58 5e    |                 jsr 005e58           
4747:000 | DONE ins | em 16 16 | 005e10 | 20 3e 5b    |                 jsr 005b3e           
4748:000 | DONE ins | em 16 16 | 005e13 | 20 58 5e    |                 jsr 005e58           
4749:000 | DONE ins | em 16 16 | 005e16 | 80 04       |                 bra 005e1c           
4750:000 | DONE wsp | em 16 16 |        |             |
4751:000 | DONE lbl | em 16 16 | 005e18 |             | smrem_2                              
4752:000 | DONE ins | em 16 16 | 005e18 | b4 00       |                 ldy.dx 00            
4753:000 | DONE ins | em 16 16 | 005e1a | e8          |                 inx                  
4754:000 | DONE ins | em 16 16 | 005e1b | e8          |                 inx                  
4755:000 | DONE wsp | em 16 16 |        |             |
4756:000 | DONE wsp | em 16 16 |        |             |
4757:000 | DONE lbl | em 16 16 | 005e1c |             | smrem_2_1                            
4758:000 | DONE wsp | em 16 16 |        |             |
4759:000 | DONE lbl | em 16 16 | 005e1c |             | z_smrem                              
4759:001 | DONE ins | em 16 16 | 005e1c | 60          |                 rts                  
4760:000 | DONE wsp | em 16 16 |        |             |
4761:000 | DONE wsp | em 16 16 |        |             |
4762:000 | DONE cmt | em 16 16 |        |             | ; -------------------------------------------------------------------
4763:000 | DONE cmt | em 16 16 |        |             | ; SOURCE ( -- addr u ) 12 bytes / X cycles
4764:000 | DONE cmt | em 16 16 |        |             | ; Return the address and size of current input buffer. Replaces TIB and #TIB in
4765:000 | DONE cmt | em 16 16 |        |             | ; ANSI Forth
4766:000 | DONE wsp | em 16 16 |        |             |
4767:000 | DONE lbl | em 16 16 | 005e1d |             | xt_source                            
4768:000 | DONE ins | em 16 16 | 005e1d | ca          |                 dex                  make room on Data Stack
4769:000 | DONE ins | em 16 16 | 005e1e | ca          |                 dex                  
4770:000 | DONE ins | em 16 16 | 005e1f | ca          |                 dex                  
4771:000 | DONE ins | em 16 16 | 005e20 | ca          |                 dex                  
4772:000 | DONE ins | em 16 16 | 005e21 | 94 02       |                 sty.dx 02            
4773:000 | DONE wsp | em 16 16 |        |             |
4774:000 | DONE ins | em 16 16 | 005e23 | a5 08       |                 lda.d 000008         address of current input buffer as NOS
4775:000 | DONE ins | em 16 16 | 005e25 | 95 00       |                 sta.dx 00            
4776:000 | DONE wsp | em 16 16 |        |             |
4777:000 | DONE ins | em 16 16 | 005e27 | a4 0a       |                 ldy.d 00000a         length of current input buffer as TOS
4778:000 | DONE wsp | em 16 16 |        |             |
4779:000 | DONE lbl | em 16 16 | 005e29 |             | z_source                             
4779:001 | DONE ins | em 16 16 | 005e29 | 60          |                 rts                  
4780:000 | DONE wsp | em 16 16 |        |             |
4781:000 | DONE cmt | em 16 16 |        |             | ; -------------------------------------------------------------------
4782:000 | DONE cmt | em 16 16 |        |             | ; SOURCE-ID ( -- n ) 6 bytes / 13 cycles
4783:000 | DONE cmt | em 16 16 |        |             | ; Identify the input source unless it is a block (s. Conklin & Rather p. 156).
4784:000 | DONE cmt | em 16 16 |        |             | ; Since we don't have blocks (yet), this will give the input source: 0 is
4785:000 | DONE cmt | em 16 16 |        |             | ; keyboard, -1 (0ffff) is character string, and a text file gives the fileid.
4786:000 | DONE lbl | em 16 16 | 005e2a |             | xt_source-id                         
4787:000 | DONE dir | em 16 16 |        |             |         .!xy16                       
4788:000 | DONE ins | em 16 16 | 005e2a | ca          |                 dex                  
4789:000 | DONE ins | em 16 16 | 005e2b | ca          |                 dex                  
4790:000 | DONE ins | em 16 16 | 005e2c | 94 00       |                 sty.dx 00            
4791:000 | DONE ins | em 16 16 | 005e2e | a4 06       |                 ldy.d 000006         
4792:000 | DONE wsp | em 16 16 |        |             |
4793:000 | DONE lbl | em 16 16 | 005e30 |             | z_source-id                          
4793:001 | DONE ins | em 16 16 | 005e30 | 60          |                 rts                  
4794:000 | DONE wsp | em 16 16 |        |             |
4795:000 | DONE cmt | em 16 16 |        |             | ; -------------------------------------------------------------------
4796:000 | DONE cmt | em 16 16 |        |             | ; SPACE ( -- ) X bytes / X cycles
4797:000 | DONE cmt | em 16 16 |        |             | ; Print one ASCII space character. We need to leave JSR EMIT_A as a subroutine
4798:000 | DONE cmt | em 16 16 |        |             | ; instead of JSR/RTS it to JMP to allow native compile
4799:000 | DONE lbl | em 16 16 | 005e31 |             | xt_space                             
4800:000 | DONE ins | em 16 16 | 005e31 | a9 20 00    |                 lda.# AscSP          
4801:000 | DONE ins | em 16 16 | 005e34 | 20 a1 58    |                 jsr 0058a1           
4802:000 | DONE wsp | em 16 16 |        |             |
4803:000 | DONE lbl | em 16 16 | 005e37 |             | z_space                              
4803:001 | DONE ins | em 16 16 | 005e37 | 60          |                 rts                  
4804:000 | DONE wsp | em 16 16 |        |             |
4805:000 | DONE wsp | em 16 16 |        |             |
4806:000 | DONE cmt | em 16 16 |        |             | ; -------------------------------------------------------------------
4807:000 | DONE cmt | em 16 16 |        |             | ; SPACES ( u -- ) 12 bytes / X cycles
4808:000 | DONE cmt | em 16 16 |        |             | ; Print u spaces
4809:000 | DONE lbl | em 16 16 | 005e38 |             | xt_spaces                            
4810:000 | DONE dir | em 16 16 |        |             |         .!a16                        
4811:000 | DONE wsp | em 16 16 |        |             |
4812:000 | DONE lbl | em 16 16 | 005e38 |             | spaces_loop                          
4813:000 | DONE ins | em 16 16 | 005e38 | 88          |                 dey                  this also handles case u=0
4814:000 | DONE ins | em 16 16 | 005e39 | 30 08       |                 bmi 005e43           
4815:000 | DONE wsp | em 16 16 |        |             |
4816:000 | DONE ins | em 16 16 | 005e3b | a9 20 00    |                 lda.# 0020           
4817:000 | DONE ins | em 16 16 | 005e3e | 20 a1 58    |                 jsr 0058a1           
4818:000 | DONE wsp | em 16 16 |        |             |
4819:000 | DONE ins | em 16 16 | 005e41 | 80 f5       |                 bra 005e38           
4820:000 | DONE wsp | em 16 16 |        |             |
4821:000 | DONE lbl | em 16 16 | 005e43 |             | spaces_done                          
4822:000 | DONE ins | em 16 16 | 005e43 | b4 00       |                 ldy.dx 00            DROP
4823:000 | DONE ins | em 16 16 | 005e45 | e8          |                 inx                  
4824:000 | DONE ins | em 16 16 | 005e46 | e8          |                 inx                  
4825:000 | DONE wsp | em 16 16 |        |             |
4826:000 | DONE lbl | em 16 16 | 005e47 |             | z_spaces                             
4826:001 | DONE ins | em 16 16 | 005e47 | 60          |                 rts                  
4827:000 | DONE wsp | em 16 16 |        |             |
4828:000 | DONE cmt | em 16 16 |        |             | ; -------------------------------------------------------------------
4829:000 | DONE cmt | em 16 16 |        |             | ; STAR ( n n -- n ) 16*16 -> 16  X bytes / X cycles
4830:000 | DONE cmt | em 16 16 |        |             | ; Multiply two signed 16 bit numbers, returning a 16 bit result. This is nothing
4831:000 | DONE cmt | em 16 16 |        |             | ; more than UM* DROP
4832:000 | DONE lbl | em 16 16 | 005e48 |             | xt_star                              
4833:000 | DONE ins | em 16 16 | 005e48 | 20 c0 5e    |                 jsr 005ec0           
4834:000 | DONE wsp | em 16 16 |        |             |
4835:000 | DONE ins | em 16 16 | 005e4b | b4 00       |                 ldy.dx 00            DROP
4836:000 | DONE ins | em 16 16 | 005e4d | e8          |                 inx                  
4837:000 | DONE ins | em 16 16 | 005e4e | e8          |                 inx                  
4838:000 | DONE wsp | em 16 16 |        |             |
4839:000 | DONE lbl | em 16 16 | 005e4f |             | z_star                               
4839:001 | DONE ins | em 16 16 | 005e4f | 60          |                 rts                  
4840:000 | DONE wsp | em 16 16 |        |             |
4841:000 | DONE wsp | em 16 16 |        |             |
4842:000 | DONE cmt | em 16 16 |        |             | ; -------------------------------------------------------------------
4843:000 | DONE cmt | em 16 16 |        |             | ; STATE ( -- addr ) 7 bytes / 12 cycles
4844:000 | DONE cmt | em 16 16 |        |             | ; Return the address of a cell containing the compilation-state flag. STATE
4845:000 | DONE cmt | em 16 16 |        |             | ; is true when in compilation state, false otherwise. STATE should not be
4846:000 | DONE cmt | em 16 16 |        |             | ; changed directly by the user; see
4847:000 | DONE cmt | em 16 16 |        |             | ; http://forth.sourceforge.net/standard/dpans/dpans6.htm#6.1.2250
4848:000 | DONE lbl | em 16 16 | 005e50 |             | xt_state                             
4849:000 | DONE dir | em 16 16 |        |             |         .!xy16                       
4850:000 | DONE ins | em 16 16 | 005e50 | ca          |                 dex                  
4851:000 | DONE ins | em 16 16 | 005e51 | ca          |                 dex                  
4852:000 | DONE ins | em 16 16 | 005e52 | 94 00       |                 sty.dx 00            
4853:000 | DONE ins | em 16 16 | 005e54 | a0 14 00    |                 ldy.# 000014         
4854:000 | DONE wsp | em 16 16 |        |             |
4855:000 | DONE lbl | em 16 16 | 005e57 |             | z_state                              
4855:001 | DONE ins | em 16 16 | 005e57 | 60          |                 rts                  
4856:000 | DONE wsp | em 16 16 |        |             |
4857:000 | DONE wsp | em 16 16 |        |             |
4858:000 | DONE cmt | em 16 16 |        |             | ; -------------------------------------------------------------------
4859:000 | DONE cmt | em 16 16 |        |             | ; SWAP ( n m -- m n ) 5 bytes / 12 cycles
4860:000 | DONE cmt | em 16 16 |        |             | ; Exchange TOS with NOS. We don't check if there are enough elements on the Data
4861:000 | DONE cmt | em 16 16 |        |             | ; Stack; underflow errors will go undetected and return garbage.
4862:000 | DONE lbl | em 16 16 | 005e58 |             | xt_swap                              
4863:000 | DONE dir | em 16 16 |        |             |         .!a16                        
4864:000 | DONE dir | em 16 16 |        |             |         .!xy16                       
4865:000 | DONE ins | em 16 16 | 005e58 | b5 00       |                 lda.dx 00            
4866:000 | DONE ins | em 16 16 | 005e5a | 94 00       |                 sty.dx 00            
4867:000 | DONE ins | em 16 16 | 005e5c | a8          |                 tay                  
4868:000 | DONE wsp | em 16 16 |        |             |
4869:000 | DONE lbl | em 16 16 | 005e5d |             | z_swap                               
4869:001 | DONE ins | em 16 16 | 005e5d | 60          |                 rts                  
4870:000 | DONE wsp | em 16 16 |        |             |
4871:000 | DONE wsp | em 16 16 |        |             |
4872:000 | DONE cmt | em 16 16 |        |             | ; -------------------------------------------------------------------
4873:000 | DONE cmt | em 16 16 |        |             | ; TO ( n "name" -- ) X bytes / X cycles
4874:000 | DONE cmt | em 16 16 |        |             | ; Change the value of a VALUE. Note that in theory this would work with CONSTANT
4875:000 | DONE cmt | em 16 16 |        |             | ; as well, but we frown on this behavior. Note that while it is in violation of
4876:000 | DONE cmt | em 16 16 |        |             | ; ANS Forth, we can change the number in a VALUE with <number> ' <value> >BODY
4877:000 | DONE cmt | em 16 16 |        |             | ; +!  just as you can with Gforth
4878:000 | DONE cmt | em 16 16 |        |             | ; TODO unroll this to assembler
4879:000 | DONE lbl | em 16 16 | 005e5e |             | xt_to                                
4880:000 | DONE ins | em 16 16 | 005e5e | 20 49 54    |                 jsr 005449           '
4881:000 | DONE ins | em 16 16 | 005e61 | 20 37 51    |                 jsr 005137           >BODY
4882:000 | DONE ins | em 16 16 | 005e64 | 20 ce 52    |                 jsr 0052ce           !
4883:000 | DONE wsp | em 16 16 |        |             |
4884:000 | DONE lbl | em 16 16 | 005e67 |             | z_to                                 
4884:001 | DONE ins | em 16 16 | 005e67 | 60          |                 rts                  
4885:000 | DONE wsp | em 16 16 |        |             |
4886:000 | DONE wsp | em 16 16 |        |             |
4887:000 | DONE cmt | em 16 16 |        |             | ; -------------------------------------------------------------------
4888:000 | DONE cmt | em 16 16 |        |             | ; TRUE ( -- f ) 7 bytes / 12 cycles
4889:000 | DONE cmt | em 16 16 |        |             | ; Pushes value $FFFF for Forth true on Data Stack
4890:000 | DONE lbl | em 16 16 | 005e68 |             | xt_true                              
4891:000 | DONE dir | em 16 16 |        |             |         .!a16                        
4892:000 | DONE dir | em 16 16 |        |             |         .!xy16                       
4893:000 | DONE ins | em 16 16 | 005e68 | ca          |                 dex                  
4894:000 | DONE ins | em 16 16 | 005e69 | ca          |                 dex                  
4895:000 | DONE ins | em 16 16 | 005e6a | 94 00       |                 sty.dx 00            
4896:000 | DONE ins | em 16 16 | 005e6c | a0 ff ff    |                 ldy.# 0ffff          
4897:000 | DONE wsp | em 16 16 |        |             |
4898:000 | DONE lbl | em 16 16 | 005e6f |             | z_true                               
4898:001 | DONE ins | em 16 16 | 005e6f | 60          |                 rts                  
4899:000 | DONE wsp | em 16 16 |        |             |
4900:000 | DONE cmt | em 16 16 |        |             | ; -------------------------------------------------------------------
4901:000 | DONE cmt | em 16 16 |        |             | ; TUCK ( n m -- m n m ) 8 bytes / 19 cycles
4902:000 | DONE cmt | em 16 16 |        |             | ; Insert TOS below NOS. We do not check if there are enough elements on the Data
4903:000 | DONE cmt | em 16 16 |        |             | ; Stack, underflow will go undetected and return garbage.
4904:000 | DONE lbl | em 16 16 | 005e70 |             | xt_tuck                              
4905:000 | DONE dir | em 16 16 |        |             |         .!a16                        
4906:000 | DONE dir | em 16 16 |        |             |         .!xy16                       
4907:000 | DONE ins | em 16 16 | 005e70 | ca          |                 dex                  
4908:000 | DONE ins | em 16 16 | 005e71 | ca          |                 dex                  
4909:000 | DONE ins | em 16 16 | 005e72 | b5 02       |                 lda.dx 2             
4910:000 | DONE ins | em 16 16 | 005e74 | 95 00       |                 sta.dx 0             
4911:000 | DONE ins | em 16 16 | 005e76 | 94 02       |                 sty.dx 2             
4912:000 | DONE wsp | em 16 16 |        |             |
4913:000 | DONE lbl | em 16 16 | 005e78 |             | z_tuck                               
4913:001 | DONE ins | em 16 16 | 005e78 | 60          |                 rts                  
4914:000 | DONE wsp | em 16 16 |        |             |
4915:000 | DONE cmt | em 16 16 |        |             | ; -------------------------------------------------------------------
4916:000 | DONE cmt | em 16 16 |        |             | ; TYPE  ( addr u -- ) 23+ bytes / X cycles
4917:000 | DONE cmt | em 16 16 |        |             | ; Print character string if u is not 0. Works though EMIT and is affect by the
4918:000 | DONE cmt | em 16 16 |        |             | ; OUTPUT revectoring
4919:000 | DONE cmt | em 16 16 |        |             | ; TODO LATER add PAUSE here for multitasking
4920:000 | DONE lbl | em 16 16 | 005e79 |             | xt_type                              
4921:000 | DONE dir | em 16 16 |        |             |         .!a16                        
4922:000 | DONE dir | em 16 16 |        |             |         .!xy16                       
4923:000 | DONE cmt | em 16 16 |        |             |                 ; just leave if u is zero (empty string)
4924:000 | DONE ins | em 16 16 | 005e79 | 98          |                 tya                  force flag check of TOS
4925:000 | DONE ins | em 16 16 | 005e7a | f0 17       |                 beq 005e93           
4926:000 | DONE wsp | em 16 16 |        |             |
4927:000 | DONE ins | em 16 16 | 005e7c | b5 00       |                 lda.dx 00            get address from NOS
4928:000 | DONE ins | em 16 16 | 005e7e | 85 1c       |                 sta.d 00001c         
4929:000 | DONE ins | em 16 16 | 005e80 | 84 1e       |                 sty.d 00001e         number of chars is TOS
4930:000 | DONE ins | em 16 16 | 005e82 | a0 00 00    |                 ldy.# 0000           
4931:000 | DONE ins | em 16 16 | 005e85 | e2 20       |                 sep 20               
4931:001 | DONE ctl | em  8 16 |        |             |         .!a8
4932:000 | DONE lbl | em  8 16 | 005e87 |             | type_loop                            
4933:000 | DONE ins | em  8 16 | 005e87 | b1 1c       |                 lda.diy 00001c       LDA (TMP1),Y
4934:000 | DONE ins | em  8 16 | 005e89 | 20 a1 58    |                 jsr 0058a1           
4935:000 | DONE ins | em  8 16 | 005e8c | c8          |                 iny                  
4936:000 | DONE ins | em  8 16 | 005e8d | c4 1e       |                 cpy.d 00001e         
4937:000 | DONE ins | em  8 16 | 005e8f | d0 f6       |                 bne 005e87           
4938:000 | DONE wsp | em  8 16 |        |             |
4939:000 | DONE ins | em  8 16 | 005e91 | c2 20       |                 rep 20               
4939:001 | DONE ctl | em 16 16 |        |             |         .!a16
4940:000 | DONE lbl | em 16 16 | 005e93 |             | type_done                            
4941:000 | DONE cmt | em 16 16 |        |             |                 ; clear stack
4942:000 | DONE ins | em 16 16 | 005e93 | b4 02       |                 ldy.dx 02            
4943:000 | DONE ins | em 16 16 | 005e95 | e8          |                 inx                  
4944:000 | DONE ins | em 16 16 | 005e96 | e8          |                 inx                  
4945:000 | DONE ins | em 16 16 | 005e97 | e8          |                 inx                  
4946:000 | DONE ins | em 16 16 | 005e98 | e8          |                 inx                  
4947:000 | DONE wsp | em 16 16 |        |             |
4948:000 | DONE lbl | em 16 16 | 005e99 |             | z_type                               
4948:001 | DONE ins | em 16 16 | 005e99 | 60          |                 rts                  
4949:000 | DONE wsp | em 16 16 |        |             |
4950:000 | DONE wsp | em 16 16 |        |             |
4951:000 | DONE cmt | em 16 16 |        |             | ; -------------------------------------------------------------------
4952:000 | DONE cmt | em 16 16 |        |             | ; UDOT ( n -- ) X bytes / X cycles
4953:000 | DONE cmt | em 16 16 |        |             | ; Print unsigned number. This is based on the Forth word
4954:000 | DONE cmt | em 16 16 |        |             | ; 0 <# #S #> TYPE SPACE but uses the general print_u routine
4955:000 | DONE cmt | em 16 16 |        |             | ; that .S and DUMP use as well. We need to keep JSR EMIT_A instead of JSR/RTS it
4956:000 | DONE cmt | em 16 16 |        |             | ; to JMP to allow native compile
4957:000 | DONE lbl | em 16 16 | 005e9a |             | xt_udot                              
4958:000 | DONE ins | em 16 16 | 005e9a | 20 98 69    |                 jsr 006998           ( n -- )
4959:000 | DONE wsp | em 16 16 |        |             |
4960:000 | DONE ins | em 16 16 | 005e9d | a9 20 00    |                 lda.# 0020           SPACE
4961:000 | DONE ins | em 16 16 | 005ea0 | 20 a1 58    |                 jsr 0058a1           
4962:000 | DONE wsp | em 16 16 |        |             |
4963:000 | DONE lbl | em 16 16 | 005ea3 |             | z_udot                               
4963:001 | DONE ins | em 16 16 | 005ea3 | 60          |                 rts                  
4964:000 | DONE wsp | em 16 16 |        |             |
4965:000 | DONE wsp | em 16 16 |        |             |
4966:000 | DONE wsp | em 16 16 |        |             |
4967:000 | DONE cmt | em 16 16 |        |             | ; -------------------------------------------------------------------
4968:000 | DONE cmt | em 16 16 |        |             | ; UDMOD ( ud u -- u ud ) 32/16 --> 32  X bytes / X cycles
4969:000 | DONE cmt | em 16 16 |        |             | ; Devide double-cell number by single-cell number, producing a double-cell
4970:000 | DONE cmt | em 16 16 |        |             | ; result and a single-cell remainder. Based on
4971:000 | DONE cmt | em 16 16 |        |             | ; Gforth  : UD/MOD  >R 0 R@ UM/MOD R> SWAP >R UM/MOD R> ;
4972:000 | DONE cmt | em 16 16 |        |             | ; pForth  : UD/MOD  >R 0 R@ UM/MOD ROT ROT R> UM/MOD ROT ;
4973:000 | DONE cmt | em 16 16 |        |             | ; This doesn't seem to be used anywhere else but for # (HASH) in coverting
4974:000 | DONE cmt | em 16 16 |        |             | ; pictured numerical output, though pForth claims it uses UM/MOD for that
4975:000 | DONE cmt | em 16 16 |        |             | ; At some point, we need to get back to UM/MOD because it's optimized
4976:000 | DONE lbl | em 16 16 | 005ea4 |             | xt_udmod                             
4977:000 | DONE ins | em 16 16 | 005ea4 | 20 c0 51    |                 jsr 0051c0           
4978:000 | DONE ins | em 16 16 | 005ea7 | 20 69 53    |                 jsr 005369           
4979:000 | DONE ins | em 16 16 | 005eaa | 20 b4 5c    |                 jsr 005cb4           
4980:000 | DONE ins | em 16 16 | 005ead | 20 1f 5f    |                 jsr 005f1f           
4981:000 | DONE ins | em 16 16 | 005eb0 | 20 ef 5c    |                 jsr 005cef           
4982:000 | DONE ins | em 16 16 | 005eb3 | 20 ef 5c    |                 jsr 005cef           
4983:000 | DONE ins | em 16 16 | 005eb6 | 20 bd 5c    |                 jsr 005cbd           
4984:000 | DONE ins | em 16 16 | 005eb9 | 20 1f 5f    |                 jsr 005f1f           
4985:000 | DONE ins | em 16 16 | 005ebc | 20 ef 5c    |                 jsr 005cef           
4986:000 | DONE lbl | em 16 16 | 005ebf |             | z_udmod                              
4986:001 | DONE ins | em 16 16 | 005ebf | 60          |                 rts                  
4987:000 | DONE wsp | em 16 16 |        |             |
4988:000 | DONE wsp | em 16 16 |        |             |
4989:000 | DONE cmt | em 16 16 |        |             | ; -------------------------------------------------------------------
4990:000 | DONE cmt | em 16 16 |        |             | ; UM* "UMSTAR" ( u u -- ud ) 16*16 -> 32  X bytes / X cycles
4991:000 | DONE cmt | em 16 16 |        |             | ; Multiply two unsigned 16 bit numbers, producing a 32 bit result.This is based
4992:000 | DONE cmt | em 16 16 |        |             | ; on modified FIG Forth code by Dr. Jefyll, see
4993:000 | DONE cmt | em 16 16 |        |             | ; http://forum.6502.org/viewtopic.php?f=9&t=689 for a detailed discussion. We
4994:000 | DONE cmt | em 16 16 |        |             | ; use the system scratch pad (SYSPAD) for temp storage (N in the original code)
4995:000 | DONE cmt | em 16 16 |        |             | ; FIG Forth is in the public domain. Note old Forth versions such as FIG Forth
4996:000 | DONE cmt | em 16 16 |        |             | ; call this "U*"
4997:000 | DONE wsp | em 16 16 |        |             |
4998:000 | DONE cmt | em 16 16 |        |             | ; This is currently a brute-force loop based on the 8-bit variant in "6502
4999:000 | DONE cmt | em 16 16 |        |             | ; Assembly Language Programming" by Leventhal. Once everything is working,
5000:000 | DONE cmt | em 16 16 |        |             | ; consider switching to a table-supported version based on
5001:000 | DONE cmt | em 16 16 |        |             | ; http://codebase64.org/doku.php?id=base:seriously_fast_multiplication
5002:000 | DONE cmt | em 16 16 |        |             | ; http://codebase64.org/doku.php?id=magazines:chacking16#d_graphics_for_the_masseslib3d_and_cool_world
5003:000 | DONE cmt | em 16 16 |        |             | ; http://forum.6502.org/viewtopic.php?p=205#p205
5004:000 | DONE cmt | em 16 16 |        |             | ; http://forum.6502.org/viewtopic.php?f=9&t=689 We use tmp1, tmp2, tmp3 for
5005:000 | DONE cmt | em 16 16 |        |             | ; this, with the assumption that tmp3 immediately follows tmp2
5006:000 | DONE lbl | em 16 16 | 005ec0 |             | xt_umstar                            
5007:000 | DONE dir | em 16 16 |        |             |         .!a16                        
5008:000 | DONE cmt | em 16 16 |        |             |                 ; SPECIAL CASE 1: multiplication by zero
5009:000 | DONE ins | em 16 16 | 005ec0 | 98          |                 tya                  
5010:000 | DONE ins | em 16 16 | 005ec1 | f0 3d       |                 beq 005f00           
5011:000 | DONE ins | em 16 16 | 005ec3 | b5 00       |                 lda.dx 00            
5012:000 | DONE ins | em 16 16 | 005ec5 | f0 39       |                 beq 005f00           
5013:000 | DONE wsp | em 16 16 |        |             |
5014:000 | DONE cmt | em 16 16 |        |             |                 ; SPECIAL CASE 2: multiplication by one
5015:000 | DONE cmt | em 16 16 |        |             |                 ; This is a different routine than 2* because that instruction
5016:000 | DONE cmt | em 16 16 |        |             |                 ; stays inside one cell, whereas UM* produces a Double Cell
5017:000 | DONE cmt | em 16 16 |        |             |                 ; answer
5018:000 | DONE ins | em 16 16 | 005ec7 | c0 01 00    |                 cpy.# 0001           non-distructively
5019:000 | DONE ins | em 16 16 | 005eca | f0 3b       |                 beq 005f07           
5020:000 | DONE ins | em 16 16 | 005ecc | b5 00       |                 lda.dx 00            
5021:000 | DONE ins | em 16 16 | 005ece | 3a          |                 dec.a                don't care about distruction
5022:000 | DONE ins | em 16 16 | 005ecf | f0 39       |                 beq 005f0a           
5023:000 | DONE wsp | em 16 16 |        |             |
5024:000 | DONE cmt | em 16 16 |        |             |                 ; SPECIAL CASE 3: multiplication by two
5025:000 | DONE ins | em 16 16 | 005ed1 | c0 02 00    |                 cpy.# 0002           
5026:000 | DONE ins | em 16 16 | 005ed4 | f0 3b       |                 beq 005f11           
5027:000 | DONE wsp | em 16 16 |        |             |
5028:000 | DONE ins | em 16 16 | 005ed6 | b5 00       |                 lda.dx 00            
5029:000 | DONE ins | em 16 16 | 005ed8 | c9 02 00    |                 cmp.# 0002           
5030:000 | DONE ins | em 16 16 | 005edb | f0 38       |                 beq 005f15           
5031:000 | DONE wsp | em 16 16 |        |             |
5032:000 | DONE cmt | em 16 16 |        |             |                 ; NO SPECIAL CASE ("The Hard Way")
5033:000 | DONE ins | em 16 16 | 005edd | 84 1c       |                 sty.d 00001c         TOS number  "40"
5034:000 | DONE ins | em 16 16 | 005edf | 85 1e       |                 sta.d 00001e         NOS number  "41"
5035:000 | DONE ins | em 16 16 | 005ee1 | a0 10 00    |                 ldy.# &16            loop counter
5036:000 | DONE wsp | em 16 16 |        |             |
5037:000 | DONE ins | em 16 16 | 005ee4 | a9 00 00    |                 lda.# 0000           
5038:000 | DONE ins | em 16 16 | 005ee7 | 85 20       |                 sta.d 000020         Most Significat Word (MSW) of result
5039:000 | DONE wsp | em 16 16 |        |             |
5040:000 | DONE lbl | em 16 16 | 005ee9 |             | umstar_loop                          
5041:000 | DONE ins | em 16 16 | 005ee9 | 0a          |                 asl.a                useless for first iteration
5042:000 | DONE ins | em 16 16 | 005eea | 26 20       |                 rol.d 000020         move carry into MSB, useless first iteration
5043:000 | DONE ins | em 16 16 | 005eec | 06 1e       |                 asl.d 00001e         move bit of NOS number into carry
5044:000 | DONE wsp | em 16 16 |        |             |
5045:000 | DONE cmt | em 16 16 |        |             |                 ; if there is no carry bit, we don't have to add and can go to
5046:000 | DONE cmt | em 16 16 |        |             |                 ; the next bit
5047:000 | DONE ins | em 16 16 | 005eee | 90 07       |                 bcc 005ef7           
5048:000 | DONE wsp | em 16 16 |        |             |
5049:000 | DONE ins | em 16 16 | 005ef0 | 18          |                 clc                  
5050:000 | DONE ins | em 16 16 | 005ef1 | 65 1c       |                 adc.d 00001c         we have a set bit, so add TOS
5051:000 | DONE wsp | em 16 16 |        |             |
5052:000 | DONE cmt | em 16 16 |        |             |                 ; if we have a carry, increase the MSW of result
5053:000 | DONE ins | em 16 16 | 005ef3 | 90 02       |                 bcc 005ef7           
5054:000 | DONE ins | em 16 16 | 005ef5 | e6 20       |                 inc.d 000020         
5055:000 | DONE wsp | em 16 16 |        |             |
5056:000 | DONE lbl | em 16 16 | 005ef7 |             | umstar_counter                       
5057:000 | DONE ins | em 16 16 | 005ef7 | 88          |                 dey                  
5058:000 | DONE ins | em 16 16 | 005ef8 | d0 ef       |                 bne 005ee9           
5059:000 | DONE wsp | em 16 16 |        |             |
5060:000 | DONE cmt | em 16 16 |        |             |                 ; We're all done, clean up and leave
5061:000 | DONE ins | em 16 16 | 005efa | 95 00       |                 sta.dx 00            store lower cell of number in NOS
5062:000 | DONE ins | em 16 16 | 005efc | a4 20       |                 ldy.d 000020         store MSB in TOS as double cell
5063:000 | DONE wsp | em 16 16 |        |             |
5064:000 | DONE ins | em 16 16 | 005efe | 80 1e       |                 bra 005f1e           don't use RTS so we can natively compile
5065:000 | DONE wsp | em 16 16 |        |             |
5066:000 | DONE lbl | em 16 16 | 005f00 |             | umstar_zero                          
5067:000 | DONE cmt | em 16 16 |        |             |                 ; one or both of the numbers is zero, so we got off light
5068:000 | DONE ins | em 16 16 | 005f00 | a0 00 00    |                 ldy.# 0000           
5069:000 | DONE ins | em 16 16 | 005f03 | 94 00       |                 sty.dx 00            
5070:000 | DONE ins | em 16 16 | 005f05 | 80 17       |                 bra 005f1e           
5071:000 | DONE wsp | em 16 16 |        |             |
5072:000 | DONE lbl | em 16 16 | 005f07 |             | umstar_one_tos                       
5073:000 | DONE cmt | em 16 16 |        |             |                 ; TOS is one, life is easy
5074:000 | DONE ins | em 16 16 | 005f07 | 88          |                 dey                  NOS is LSW, TOS becomes zero
5075:000 | DONE ins | em 16 16 | 005f08 | 80 14       |                 bra 005f1e           
5076:000 | DONE lbl | em 16 16 | 005f0a |             | umstar_one_nos                       
5077:000 | DONE cmt | em 16 16 |        |             |                 ; NOS is one, life is easy
5078:000 | DONE ins | em 16 16 | 005f0a | 94 00       |                 sty.dx 00            
5079:000 | DONE ins | em 16 16 | 005f0c | a0 00 00    |                 ldy.# 0000           
5080:000 | DONE ins | em 16 16 | 005f0f | 80 0d       |                 bra 005f1e           
5081:000 | DONE wsp | em 16 16 |        |             |
5082:000 | DONE lbl | em 16 16 | 005f11 |             | umstar_two_tos                       
5083:000 | DONE cmt | em 16 16 |        |             |                 ; TOS is two, life is easy
5084:000 | DONE ins | em 16 16 | 005f11 | b5 00       |                 lda.dx 00            
5085:000 | DONE ins | em 16 16 | 005f13 | 80 01       |                 bra 005f16           
5086:000 | DONE lbl | em 16 16 | 005f15 |             | umstar_two_nos                       
5087:000 | DONE cmt | em 16 16 |        |             |                 ; NOS is two, life is still easy
5088:000 | DONE ins | em 16 16 | 005f15 | 98          |                 tya                  
5089:000 | DONE lbl | em 16 16 | 005f16 |             | umstar_two_common                    
5090:000 | DONE ins | em 16 16 | 005f16 | 0a          |                 asl.a                multiply by two, top bit in Carry Flag
5091:000 | DONE ins | em 16 16 | 005f17 | 95 00       |                 sta.dx 00            Double Cell LSW is NOS
5092:000 | DONE wsp | em 16 16 |        |             |
5093:000 | DONE ins | em 16 16 | 005f19 | a9 00 00    |                 lda.# 0000           
5094:000 | DONE ins | em 16 16 | 005f1c | 2a          |                 rol.a                Rotate any Carry Flag into MSW
5095:000 | DONE ins | em 16 16 | 005f1d | a8          |                 tay                  
5096:000 | DONE wsp | em 16 16 |        |             |
5097:000 | DONE lbl | em 16 16 | 005f1e |             | z_umstar                             
5097:001 | DONE ins | em 16 16 | 005f1e | 60          |                 rts                  
5098:000 | DONE wsp | em 16 16 |        |             |
5099:000 | DONE cmt | em 16 16 |        |             | ; -------------------------------------------------------------------
5100:000 | DONE cmt | em 16 16 |        |             | ; UM/MOD ( ud u -- u u ) 32/16 -> 16  X bytes / X cycles
5101:000 | DONE cmt | em 16 16 |        |             | ; Divide double cell number by single cell number, returning the quotient as TOS
5102:000 | DONE cmt | em 16 16 |        |             | ; and any remainder as NOS. All numbers are unsigned. This is the basic division
5103:000 | DONE cmt | em 16 16 |        |             | ; operation all others use. Based on Garth Wilson's code at
5104:000 | DONE cmt | em 16 16 |        |             | ; http://6502.org/source/integers/ummodfix/ummodfix.htm We use "scratch" for N
5105:000 | DONE cmt | em 16 16 |        |             | ; and include a separate detection of division by zero to force an error code
5106:000 | DONE lbl | em 16 16 | 005f1f |             | xt_ummod                             
5107:000 | DONE dir | em 16 16 |        |             |         .!a16                        
5108:000 | DONE dir | em 16 16 |        |             |         .!xy16                       
5109:000 | DONE cmt | em 16 16 |        |             |                 ; Move the inputs to the scratchpad to avoid having to fool
5110:000 | DONE cmt | em 16 16 |        |             |                 ; around with the Data Stack and for speed. Garth's original
5111:000 | DONE cmt | em 16 16 |        |             |                 ; code uses the MVN instruction for this, but our TOS is Y which
5112:000 | DONE cmt | em 16 16 |        |             |                 ; makes that harder. When we're done, the setup will look likes
5113:000 | DONE cmt | em 16 16 |        |             |                 ; this: (S is start of the scratchpad in Direct Page)
5114:000 | DONE cmt | em 16 16 |        |             |                 ;
5115:000 | DONE cmt | em 16 16 |        |             |                 ;     +-----+-----+-----+-----+-----+-----+-----+-----+
5116:000 | DONE cmt | em 16 16 |        |             |                 ;     |  DIVISOR  |        DIVIDEND       | TEMP AREA |
5117:000 | DONE cmt | em 16 16 |        |             |                 ;     |           |  hi cell     lo cell  | carry bit |
5118:000 | DONE cmt | em 16 16 |        |             |                 ;     |  S    S+1 | S+2   S+3 | S+4   S+5 | S+6   S+7 |
5119:000 | DONE cmt | em 16 16 |        |             |                 ;     +-----+-----+-----+-----+-----+-----+-----+-----+
5120:000 | DONE cmt | em 16 16 |        |             |                 ;
5121:000 | DONE cmt | em 16 16 |        |             |                 ; The divisor is TOS (in Y), high cell of the dividend in NOS,
5122:000 | DONE cmt | em 16 16 |        |             |                 ; and low cell in 3OS
5123:000 | DONE wsp | em 16 16 |        |             |
5124:000 | DONE cmt | em 16 16 |        |             |                 ; Catch division by zero. We could include this in the code as
5125:000 | DONE cmt | em 16 16 |        |             |                 ; part of overflow detection (see below), but we want an error
5126:000 | DONE cmt | em 16 16 |        |             |                 ; to appear like in Gforth
5127:000 | DONE ins | em 16 16 | 005f1f | 98          |                 tya                  force flag test
5128:000 | DONE ins | em 16 16 | 005f20 | d0 06       |                 bne 005f28           
5129:000 | DONE wsp | em 16 16 |        |             |
5130:000 | DONE ins | em 16 16 | 005f22 | a9 43 70    |                 lda.# 007043         
5131:000 | DONE ins | em 16 16 | 005f25 | 4c 7a 69    |                 jmp 00697a           
5132:000 | DONE wsp | em 16 16 |        |             |
5133:000 | DONE lbl | em 16 16 | 005f28 |             | ummod_notzero                        
5134:000 | DONE ins | em 16 16 | 005f28 | 84 28       |                 sty.d 000028         Y is now free
5135:000 | DONE ins | em 16 16 | 005f2a | b5 00       |                 lda.dx 00            high cell of dividend
5136:000 | DONE ins | em 16 16 | 005f2c | 85 2a       |                 sta.d 00002a         
5137:000 | DONE ins | em 16 16 | 005f2e | b5 02       |                 lda.dx 02            low cell of dividend
5138:000 | DONE ins | em 16 16 | 005f30 | 85 2c       |                 sta.d 00002c         
5139:000 | DONE wsp | em 16 16 |        |             |
5140:000 | DONE cmt | em 16 16 |        |             |                 ; Drop one entry off of the stack and save the new Data Stack
5141:000 | DONE cmt | em 16 16 |        |             |                 ; Pointer, freeing X for index duty
5142:000 | DONE ins | em 16 16 | 005f32 | e8          |                 inx                  
5143:000 | DONE ins | em 16 16 | 005f33 | e8          |                 inx                  
5144:000 | DONE ins | em 16 16 | 005f34 | 86 22       |                 stx.d 000022         
5145:000 | DONE wsp | em 16 16 |        |             |
5146:000 | DONE cmt | em 16 16 |        |             |                 ; Detect overflow. Subtract divisor from high cell of dividend.
5147:000 | DONE cmt | em 16 16 |        |             |                 ; If carry flag remains set, divisor was not large enough to
5148:000 | DONE cmt | em 16 16 |        |             |                 ; avoid overflow. This also would detect division by zero, but
5149:000 | DONE cmt | em 16 16 |        |             |                 ; we did that already in a separate step
5150:000 | DONE ins | em 16 16 | 005f36 | 38          |                 sec                  
5151:000 | DONE ins | em 16 16 | 005f37 | a5 2a       |                 lda.d 00002a         
5152:000 | DONE ins | em 16 16 | 005f39 | e5 28       |                 sbc.d 000028         
5153:000 | DONE ins | em 16 16 | 005f3b | b0 21       |                 bcs 005f5e           
5154:000 | DONE wsp | em 16 16 |        |             |
5155:000 | DONE cmt | em 16 16 |        |             |                 ; If there is no overflow, the carry flag remains clear for
5156:000 | DONE cmt | em 16 16 |        |             |                 ; first roll. We loop 16 times, but since we shift the dividend
5157:000 | DONE cmt | em 16 16 |        |             |                 ; over at the same time as shifting the answer in, the operation
5158:000 | DONE cmt | em 16 16 |        |             |                 ; must start and (!) finish with a shift of the low cell of the
5159:000 | DONE cmt | em 16 16 |        |             |                 ; dividend (which ends up holding the quotient), so we start
5160:000 | DONE cmt | em 16 16 |        |             |                 ; with 17 times in X. Y is used for temporary storage
5161:000 | DONE ins | em 16 16 | 005f3d | a2 11 00    |                 ldx.# &17            
5162:000 | DONE wsp | em 16 16 |        |             |
5163:000 | DONE lbl | em 16 16 | 005f40 |             | ummod_shift                          
5164:000 | DONE cmt | em 16 16 |        |             |                 ; Move low cell of dividend left one bit, also shifting answer
5165:000 | DONE cmt | em 16 16 |        |             |                 ; in. The first rotation brings in a zero, which later gets
5166:000 | DONE cmt | em 16 16 |        |             |                 ; pushed off the other end in the last rotation
5167:000 | DONE ins | em 16 16 | 005f40 | 26 2c       |                 rol.d 00002c         
5168:000 | DONE wsp | em 16 16 |        |             |
5169:000 | DONE cmt | em 16 16 |        |             |                 ; loop control
5170:000 | DONE ins | em 16 16 | 005f42 | ca          |                 dex                  
5171:000 | DONE ins | em 16 16 | 005f43 | f0 22       |                 beq 005f67           
5172:000 | DONE wsp | em 16 16 |        |             |
5173:000 | DONE cmt | em 16 16 |        |             |                 ; Shift high cell of divident left one bit, also shifting the
5174:000 | DONE cmt | em 16 16 |        |             |                 ; next bit in from high bit of low cell
5175:000 | DONE ins | em 16 16 | 005f45 | 26 2a       |                 rol.d 00002a         
5176:000 | DONE ins | em 16 16 | 005f47 | a9 00 00    |                 lda.# 0000           
5177:000 | DONE ins | em 16 16 | 005f4a | 2a          |                 rol.a                
5178:000 | DONE ins | em 16 16 | 005f4b | 85 2e       |                 sta.d 00002e         store old high bit of dividend
5179:000 | DONE wsp | em 16 16 |        |             |
5180:000 | DONE cmt | em 16 16 |        |             |                 ; See if divisor will fit into high 17 bits of dividend by
5181:000 | DONE cmt | em 16 16 |        |             |                 ; subtracting and then looking at the carry flag. If carry was
5182:000 | DONE cmt | em 16 16 |        |             |                 ; cleared, divisor did not fit
5183:000 | DONE ins | em 16 16 | 005f4d | 38          |                 sec                  
5184:000 | DONE ins | em 16 16 | 005f4e | a5 2a       |                 lda.d 00002a         
5185:000 | DONE ins | em 16 16 | 005f50 | e5 28       |                 sbc.d 000028         
5186:000 | DONE ins | em 16 16 | 005f52 | a8          |                 tay                  save difference in Y until we know if we need it
5187:000 | DONE wsp | em 16 16 |        |             |
5188:000 | DONE cmt | em 16 16 |        |             |                 ; Bit 0 of S+6 serves as the 17th bit. Complete the subtraction
5189:000 | DONE cmt | em 16 16 |        |             |                 ; by doing the 17th bit before determining if the divisor fits
5190:000 | DONE cmt | em 16 16 |        |             |                 ; into the high 17 bits of the dividend. If so, the carry flag
5191:000 | DONE cmt | em 16 16 |        |             |                 ; remains set
5192:000 | DONE ins | em 16 16 | 005f53 | a5 2e       |                 lda.d 00002e         
5193:000 | DONE ins | em 16 16 | 005f55 | e9 00 00    |                 sbc.# 0000           
5194:000 | DONE ins | em 16 16 | 005f58 | 90 e6       |                 bcc 005f40           
5195:000 | DONE wsp | em 16 16 |        |             |
5196:000 | DONE cmt | em 16 16 |        |             |                 ; Since the divisor fit into high 17 bits, update dividend high
5197:000 | DONE cmt | em 16 16 |        |             |                 ; cell to what it would be after subtraction
5198:000 | DONE ins | em 16 16 | 005f5a | 84 2a       |                 sty.d 00002a         
5199:000 | DONE ins | em 16 16 | 005f5c | 80 e2       |                 bra 005f40           
5200:000 | DONE wsp | em 16 16 |        |             |
5201:000 | DONE lbl | em 16 16 | 005f5e |             | ummod_overflow                       
5202:000 | DONE cmt | em 16 16 |        |             |                 ; If an overflow condition occurs, put 0ffff
5203:000 | DONE cmt | em 16 16 |        |             |                 ; in both the quotient and remainder
5204:000 | DONE ins | em 16 16 | 005f5e | a6 22       |                 ldx.d 000022         restore DSP
5205:000 | DONE ins | em 16 16 | 005f60 | a0 ff ff    |                 ldy.# 0ffff          
5206:000 | DONE ins | em 16 16 | 005f63 | 94 00       |                 sty.dx 00            
5207:000 | DONE ins | em 16 16 | 005f65 | 80 08       |                 bra 005f6f           go to end to enable native coding
5208:000 | DONE wsp | em 16 16 |        |             |
5209:000 | DONE lbl | em 16 16 | 005f67 |             | ummod_complete                       
5210:000 | DONE ins | em 16 16 | 005f67 | a6 22       |                 ldx.d 000022         restore DSP
5211:000 | DONE ins | em 16 16 | 005f69 | a4 2c       |                 ldy.d 00002c         quotient is TOS
5212:000 | DONE ins | em 16 16 | 005f6b | a5 2a       |                 lda.d 00002a         remainder is NOS
5213:000 | DONE ins | em 16 16 | 005f6d | 95 00       |                 sta.dx 00            
5214:000 | DONE wsp | em 16 16 |        |             |
5215:000 | DONE lbl | em 16 16 | 005f6f |             | z_ummod                              
5215:001 | DONE ins | em 16 16 | 005f6f | 60          |                 rts                  
5216:000 | DONE wsp | em 16 16 |        |             |
5217:000 | DONE wsp | em 16 16 |        |             |
5218:000 | DONE cmt | em 16 16 |        |             | ; -------------------------------------------------------------------
5219:000 | DONE cmt | em 16 16 |        |             | ; UNLOOP ( -- ; R: n n n -- ) X bytes / X cycles
5220:000 | DONE cmt | em 16 16 |        |             | ; Drop loop control stuff from Return Stack.
5221:000 | DONE cmt | em 16 16 |        |             | ; TODO make this faster
5222:000 | DONE lbl | em 16 16 | 005f70 |             | xt_unloop                            
5223:000 | DONE cmt | em 16 16 |        |             |                 ; drop fudge number (limit/start) from DO/?DO off the Return
5224:000 | DONE cmt | em 16 16 |        |             |                 ; Stack
5225:000 | DONE ins | em 16 16 | 005f70 | 68          |                 pla                  
5226:000 | DONE ins | em 16 16 | 005f71 | 68          |                 pla                  
5227:000 | DONE ins | em 16 16 | 005f72 | 68          |                 pla                  
5228:000 | DONE ins | em 16 16 | 005f73 | 68          |                 pla                  
5229:000 | DONE wsp | em 16 16 |        |             |
5230:000 | DONE cmt | em 16 16 |        |             |                 ; Drop the LEAVE address that was below them as well
5231:000 | DONE ins | em 16 16 | 005f74 | 68          |                 pla                  
5232:000 | DONE ins | em 16 16 | 005f75 | 68          |                 pla                  
5233:000 | DONE wsp | em 16 16 |        |             |
5234:000 | DONE lbl | em 16 16 | 005f76 |             | z_unloop                             
5234:001 | DONE ins | em 16 16 | 005f76 | 60          |                 rts                  
5235:000 | DONE wsp | em 16 16 |        |             |
5236:000 | DONE wsp | em 16 16 |        |             |
5237:000 | DONE cmt | em 16 16 |        |             | ; -------------------------------------------------------------------
5238:000 | DONE cmt | em 16 16 |        |             | ; UNUSED ( -- u ) 11 bytes / X cycles
5239:000 | DONE cmt | em 16 16 |        |             | ; Return amount of memory available for the Dictionary. Does not exclude the
5240:000 | DONE cmt | em 16 16 |        |             | ; space for PAD.
5241:000 | DONE lbl | em 16 16 | 005f77 |             | xt_unused                            
5242:000 | DONE dir | em 16 16 |        |             |         .!a16                        
5243:000 | DONE ins | em 16 16 | 005f77 | a9 ff 4f    |                 lda.# 004fff         
5244:000 | DONE ins | em 16 16 | 005f7a | 38          |                 sec                  
5245:000 | DONE ins | em 16 16 | 005f7b | e5 00       |                 sbc.d 000000         current compile pointer
5246:000 | DONE wsp | em 16 16 |        |             |
5247:000 | DONE ins | em 16 16 | 005f7d | ca          |                 dex                  
5248:000 | DONE ins | em 16 16 | 005f7e | ca          |                 dex                  
5249:000 | DONE ins | em 16 16 | 005f7f | 94 00       |                 sty.dx 00            
5250:000 | DONE wsp | em 16 16 |        |             |
5251:000 | DONE ins | em 16 16 | 005f81 | a8          |                 tay                  
5252:000 | DONE wsp | em 16 16 |        |             |
5253:000 | DONE lbl | em 16 16 | 005f82 |             | z_unused                             
5253:001 | DONE ins | em 16 16 | 005f82 | 60          |                 rts                  
5254:000 | DONE wsp | em 16 16 |        |             |
5255:000 | DONE wsp | em 16 16 |        |             |
5256:000 | DONE cmt | em 16 16 |        |             | ; -------------------------------------------------------------------
5257:000 | DONE cmt | em 16 16 |        |             | ; VALUE ( n "name" -- ) X bytes / X cycles
5258:000 | DONE cmt | em 16 16 |        |             | ; Associate a name with a value (like a constant) that can be changed (like
5259:000 | DONE cmt | em 16 16 |        |             | ; a variable) with TO. We use the routines as CONSTANT, see there.
5260:000 | DONE wsp | em 16 16 |        |             |
5261:000 | DONE wsp | em 16 16 |        |             |
5262:000 | DONE cmt | em 16 16 |        |             | ; -------------------------------------------------------------------
5263:000 | DONE cmt | em 16 16 |        |             | ; VARIABLE ( "name" -- ) X bytes / X cycles
5264:000 | DONE cmt | em 16 16 |        |             | ; Define a word that returns the address for a variable. There are various Forth
5265:000 | DONE cmt | em 16 16 |        |             | ; definitions for this word, such as  CREATE 1 CELLS ALLOT  or CREATE 0 ,
5266:000 | DONE cmt | em 16 16 |        |             | ; We use a variant of the second one so the variable is initialized to zero
5267:000 | DONE lbl | em 16 16 | 005f83 |             | xt_variable                          
5268:000 | DONE cmt | em 16 16 |        |             |                 ; We let CREATE do the heavy lifting
5269:000 | DONE ins | em 16 16 | 005f83 | 20 2e 57    |                 jsr 00572e           
5270:000 | DONE wsp | em 16 16 |        |             |
5271:000 | DONE cmt | em 16 16 |        |             |                 ; There is no "stz.di cp" so we have to do this the
5272:000 | DONE cmt | em 16 16 |        |             |                 ; old way, which is still faster than a subroutine jump to ZERO
5273:000 | DONE ins | em 16 16 | 005f86 | a9 00 00    |                 lda.# 0000           
5274:000 | DONE ins | em 16 16 | 005f89 | 92 00       |                 sta.di 000000        STA (CP)
5275:000 | DONE wsp | em 16 16 |        |             |
5276:000 | DONE ins | em 16 16 | 005f8b | e6 00       |                 inc.d 000000         direct COMMA
5277:000 | DONE ins | em 16 16 | 005f8d | e6 00       |                 inc.d 000000         
5278:000 | DONE wsp | em 16 16 |        |             |
5279:000 | DONE ins | em 16 16 | 005f8f | 20 03 57    |                 jsr 005703           adjust the z_ value by adding 2 bytes
5280:000 | DONE wsp | em 16 16 |        |             |
5281:000 | DONE lbl | em 16 16 | 005f92 |             | z_variable                           
5281:001 | DONE ins | em 16 16 | 005f92 | 60          |                 rts                  
5282:000 | DONE wsp | em 16 16 |        |             |
5283:000 | DONE wsp | em 16 16 |        |             |
5284:000 | DONE cmt | em 16 16 |        |             | ; -------------------------------------------------------------------
5285:000 | DONE cmt | em 16 16 |        |             | ; WORD ( char "name" -- c-addr ) X bytes / X cycles
5286:000 | DONE cmt | em 16 16 |        |             | ; Obsolete parsing word included for backwards compatibility. Do note use this,
5287:000 | DONE cmt | em 16 16 |        |             | ; use PARSE or PARSE-NAME. Skips leading delimiters and copies word to storage
5288:000 | DONE cmt | em 16 16 |        |             | ; area for a maximum size of 255 bytes. Returns the result as a counted string
5289:000 | DONE cmt | em 16 16 |        |             | ; (requires COUNT to convert to modern format), and inserts a space after the
5290:000 | DONE cmt | em 16 16 |        |             | ; string. See "Forth Programmer's Handbook" 3rd edition p.159 and
5291:000 | DONE cmt | em 16 16 |        |             | ; http://www.forth200x.org/documents/html/rationale.html#rat:core:PARSE
5292:000 | DONE cmt | em 16 16 |        |             | ; for discussions of why you shouldn't be using WORD anymore. Forth would be
5293:000 | DONE cmt | em 16 16 |        |             | ; PARSE DUP BUFFER1 C! OUTPUT 1+ SWAP MOVE BUFFER1
5294:000 | DONE cmt | em 16 16 |        |             | ; TODO What about the space?
5295:000 | DONE lbl | em 16 16 | 005f93 |             | xt_word                              
5296:000 | DONE cmt | em 16 16 |        |             |                 ; The real work is done by PARSE
5297:000 | DONE ins | em 16 16 | 005f93 | 20 2f 5c    |                 jsr 005c2f           ( addr u )
5298:000 | DONE wsp | em 16 16 |        |             |
5299:000 | DONE cmt | em 16 16 |        |             |                 ; Now we have to convert the modern address to the old form
5300:000 | DONE ins | em 16 16 | 005f96 | 8c 80 02    |                 sty 000280           overwrite MSB
5301:000 | DONE wsp | em 16 16 |        |             |
5302:000 | DONE ins | em 16 16 | 005f99 | ca          |                 dex                  
5303:000 | DONE ins | em 16 16 | 005f9a | ca          |                 dex                  ( addr <?> u )
5304:000 | DONE ins | em 16 16 | 005f9b | a9 80 02    |                 lda.# 000280         
5305:000 | DONE ins | em 16 16 | 005f9e | 1a          |                 inc.a                
5306:000 | DONE ins | em 16 16 | 005f9f | 95 00       |                 sta.dx 00            ( addr buffer1+1 u )
5307:000 | DONE wsp | em 16 16 |        |             |
5308:000 | DONE ins | em 16 16 | 005fa1 | 20 ff 5a    |                 jsr 005aff           
5309:000 | DONE wsp | em 16 16 |        |             |
5310:000 | DONE ins | em 16 16 | 005fa4 | ca          |                 dex                  
5311:000 | DONE ins | em 16 16 | 005fa5 | ca          |                 dex                  
5312:000 | DONE ins | em 16 16 | 005fa6 | 94 00       |                 sty.dx 00            
5313:000 | DONE wsp | em 16 16 |        |             |
5314:000 | DONE ins | em 16 16 | 005fa8 | a0 80 02    |                 ldy.# 000280         
5315:000 | DONE wsp | em 16 16 |        |             |
5316:000 | DONE lbl | em 16 16 | 005fab |             | z_word                               
5316:001 | DONE ins | em 16 16 | 005fab | 60          |                 rts                  
5317:000 | DONE wsp | em 16 16 |        |             |
5318:000 | DONE wsp | em 16 16 |        |             |
5319:000 | DONE cmt | em 16 16 |        |             | ; -------------------------------------------------------------------
5320:000 | DONE cmt | em 16 16 |        |             | ; WORDS&SIZES ( -- ) X bytes / X cycles
5321:000 | DONE cmt | em 16 16 |        |             | ; Prints all words in the dictionary with the sizes of their code as returned by
5322:000 | DONE cmt | em 16 16 |        |             | ; WORDSIZE. Used to test different optimizations of the compiling routines,
5323:000 | DONE cmt | em 16 16 |        |             | ; specific to Liara Forth. Uses tmp3
5324:000 | DONE lbl | em 16 16 | 005fac |             | xt_wordsnsizes                       
5325:000 | DONE dir | em 16 16 |        |             |         .!a16                        
5326:000 | DONE ins | em 16 16 | 005fac | a9 ff ff    |                 lda.# 0ffff          
5327:000 | DONE ins | em 16 16 | 005faf | 85 20       |                 sta.d 000020         set flag that we want sizes, too
5328:000 | DONE wsp | em 16 16 |        |             |
5329:000 | DONE cmt | em 16 16 |        |             |                 ; continue with WORDS
5330:000 | DONE ins | em 16 16 | 005fb1 | 80 02       |                 bra 005fb5           
5331:000 | DONE wsp | em 16 16 |        |             |
5332:000 | DONE cmt | em 16 16 |        |             | ; -------------------------------------------------------------------
5333:000 | DONE cmt | em 16 16 |        |             | ; WORDS ( -- ) X bytes / X cycles
5334:000 | DONE cmt | em 16 16 |        |             | ; Print list of all Forth words available. This only really makes sense in an
5335:000 | DONE cmt | em 16 16 |        |             | ; interactive setting, so we don't have to worry about speed. WORDS&SIZES falls
5336:000 | DONE cmt | em 16 16 |        |             | ; through to here. Uses tmp3. Both WORDS and WORDS&SIZES might be better off as
5337:000 | DONE cmt | em 16 16 |        |             | ; high-level Forth words, but these routines are left over from early testing
5338:000 | DONE lbl | em 16 16 | 005fb3 |             | xt_words                             
5339:000 | DONE ins | em 16 16 | 005fb3 | 64 20       |                 stz.d 000020         store flag that we don't want to print sizes
5340:000 | DONE wsp | em 16 16 |        |             |
5341:000 | DONE lbl | em 16 16 | 005fb5 |             | words_common                         
5342:000 | DONE cmt | em 16 16 |        |             |                 ; common routine for WORDS and WORDS&SIZES
5343:000 | DONE ins | em 16 16 | 005fb5 | 20 27 57    |                 jsr 005727           start on next line, this is a style choice
5344:000 | DONE wsp | em 16 16 |        |             |
5345:000 | DONE ins | em 16 16 | 005fb8 | a5 02       |                 lda.d 000002         nt of first entry in Dictionary (last added)
5346:000 | DONE ins | em 16 16 | 005fba | 48          |                 pha                  
5347:000 | DONE wsp | em 16 16 |        |             |
5348:000 | DONE ins | em 16 16 | 005fbb | ca          |                 dex                  create room on TOS
5349:000 | DONE ins | em 16 16 | 005fbc | ca          |                 dex                  
5350:000 | DONE ins | em 16 16 | 005fbd | 94 00       |                 sty.dx 00            
5351:000 | DONE wsp | em 16 16 |        |             |
5352:000 | DONE lbl | em 16 16 | 005fbf |             | words_loop                           
5353:000 | DONE ins | em 16 16 | 005fbf | a8          |                 tay                  ( nt )
5354:000 | DONE ins | em 16 16 | 005fc0 | 20 1c 5b    |                 jsr 005b1c           ( nt -- addr u )
5355:000 | DONE ins | em 16 16 | 005fc3 | 20 79 5e    |                 jsr 005e79           
5356:000 | DONE ins | em 16 16 | 005fc6 | 20 31 5e    |                 jsr 005e31           
5357:000 | DONE wsp | em 16 16 |        |             |
5358:000 | DONE cmt | em 16 16 |        |             |                 ; If the user wants sizes as well, print them
5359:000 | DONE ins | em 16 16 | 005fc9 | a5 20       |                 lda.d 000020         
5360:000 | DONE ins | em 16 16 | 005fcb | f0 0f       |                 beq 005fdc           
5361:000 | DONE wsp | em 16 16 |        |             |
5362:000 | DONE cmt | em 16 16 |        |             |                 ; For the moment, just print the size in bytes after the word's
5363:000 | DONE cmt | em 16 16 |        |             |                 ; name string. We can decide if we want to get all fancy later
5364:000 | DONE ins | em 16 16 | 005fcd | ca          |                 dex                  
5365:000 | DONE ins | em 16 16 | 005fce | ca          |                 dex                  
5366:000 | DONE ins | em 16 16 | 005fcf | 94 00       |                 sty.dx 00            
5367:000 | DONE wsp | em 16 16 |        |             |
5368:000 | DONE ins | em 16 16 | 005fd1 | 7a          |                 ply                  get nt back again
5369:000 | DONE ins | em 16 16 | 005fd2 | 5a          |                 phy                  
5370:000 | DONE ins | em 16 16 | 005fd3 | 20 f0 5f    |                 jsr 005ff0           ( u )
5371:000 | DONE ins | em 16 16 | 005fd6 | 20 da 51    |                 jsr 0051da           
5372:000 | DONE ins | em 16 16 | 005fd9 | 20 31 5e    |                 jsr 005e31           
5373:000 | DONE wsp | em 16 16 |        |             |
5374:000 | DONE lbl | em 16 16 | 005fdc |             | words_nosizes                        
5375:000 | DONE ins | em 16 16 | 005fdc | 68          |                 pla                  get back first entry in Dictionary
5376:000 | DONE wsp | em 16 16 |        |             |
5377:000 | DONE cmt | em 16 16 |        |             |                 ; The next nt is two bytes below the nt of the current one in
5378:000 | DONE cmt | em 16 16 |        |             |                 ; the Dictionary header
5379:000 | DONE ins | em 16 16 | 005fdd | 1a          |                 inc.a                
5380:000 | DONE ins | em 16 16 | 005fde | 1a          |                 inc.a                
5381:000 | DONE wsp | em 16 16 |        |             |
5382:000 | DONE ins | em 16 16 | 005fdf | ca          |                 dex                  
5383:000 | DONE ins | em 16 16 | 005fe0 | ca          |                 dex                  
5384:000 | DONE ins | em 16 16 | 005fe1 | 94 00       |                 sty.dx 00            
5385:000 | DONE wsp | em 16 16 |        |             |
5386:000 | DONE ins | em 16 16 | 005fe3 | a8          |                 tay                  
5387:000 | DONE ins | em 16 16 | 005fe4 | b9 00 00    |                 lda.y 0000           LDA $0000,Y
5388:000 | DONE ins | em 16 16 | 005fe7 | 48          |                 pha                  
5389:000 | DONE ins | em 16 16 | 005fe8 | d0 d5       |                 bne 005fbf           zero entry signals end of Dictionary
5390:000 | DONE wsp | em 16 16 |        |             |
5391:000 | DONE cmt | em 16 16 |        |             |                 ; all done, clean up
5392:000 | DONE ins | em 16 16 | 005fea | 68          |                 pla                  balance MPU stack, value discarded
5393:000 | DONE wsp | em 16 16 |        |             |
5394:000 | DONE ins | em 16 16 | 005feb | b4 00       |                 ldy.dx 00            
5395:000 | DONE ins | em 16 16 | 005fed | e8          |                 inx                  
5396:000 | DONE ins | em 16 16 | 005fee | e8          |                 inx                  
5397:000 | DONE wsp | em 16 16 |        |             |
5398:000 | DONE lbl | em 16 16 | 005fef |             | z_words                              
5399:000 | DONE lbl | em 16 16 | 005fef |             | z_wordsnsizes                        
5399:001 | DONE ins | em 16 16 | 005fef | 60          |                 rts                  
5400:000 | DONE wsp | em 16 16 |        |             |
5401:000 | DONE cmt | em 16 16 |        |             | ; -------------------------------------------------------------------
5402:000 | DONE cmt | em 16 16 |        |             | ; WORDSIZE ( nt -- u ) X bytes / X cycles
5403:000 | DONE cmt | em 16 16 |        |             | ; Given an word's name token (nt), return the size of the word's payload (CFA
5404:000 | DONE cmt | em 16 16 |        |             | ; plus PFA) in bytes. Does not count the final RTS. Specific to Liara Forth.
5405:000 | DONE cmt | em 16 16 |        |             | ; Uses tmp2, note WORDS and WORDS&SIZES use tmp3
5406:000 | DONE cmt | em 16 16 |        |             | ; TODO rewrite so it takes xt and not nt
5407:000 | DONE lbl | em 16 16 | 005ff0 |             | xt_wordsize                          
5408:000 | DONE cmt | em 16 16 |        |             |                 ; We get the beginning address of the code from the word's
5409:000 | DONE cmt | em 16 16 |        |             |                 ; header entry for the execution token (xt, 4 bytes down) and
5410:000 | DONE cmt | em 16 16 |        |             |                 ; the pointer to the end of the code (z_word, six bytes down).
5411:000 | DONE ins | em 16 16 | 005ff0 | c8          |                 iny                  
5412:000 | DONE ins | em 16 16 | 005ff1 | c8          |                 iny                  
5413:000 | DONE ins | em 16 16 | 005ff2 | c8          |                 iny                  
5414:000 | DONE ins | em 16 16 | 005ff3 | c8          |                 iny                  nt+4, location of xt
5415:000 | DONE ins | em 16 16 | 005ff4 | b9 00 00    |                 lda.y 0000           get xt
5416:000 | DONE ins | em 16 16 | 005ff7 | 85 1e       |                 sta.d 00001e         
5417:000 | DONE wsp | em 16 16 |        |             |
5418:000 | DONE ins | em 16 16 | 005ff9 | c8          |                 iny                  
5419:000 | DONE ins | em 16 16 | 005ffa | c8          |                 iny                  nt+6, location of z_word
5420:000 | DONE ins | em 16 16 | 005ffb | b9 00 00    |                 lda.y 0000           
5421:000 | DONE wsp | em 16 16 |        |             |
5422:000 | DONE ins | em 16 16 | 005ffe | 38          |                 sec                  (z_word - xt_word)
5423:000 | DONE ins | em 16 16 | 005fff | e5 1e       |                 sbc.d 00001e         
5424:000 | DONE ins | em 16 16 | 006001 | a8          |                 tay                  
5425:000 | DONE wsp | em 16 16 |        |             |
5426:000 | DONE lbl | em 16 16 | 006002 |             | z_wordsize                           
5426:001 | DONE ins | em 16 16 | 006002 | 60          |                 rts                  
5427:000 | DONE wsp | em 16 16 |        |             |
5428:000 | DONE wsp | em 16 16 |        |             |
5429:000 | DONE cmt | em 16 16 |        |             | ; -------------------------------------------------------------------
5430:000 | DONE cmt | em 16 16 |        |             | ; XOR ( n m -- n ) 6 bytes / X cycles
5431:000 | DONE cmt | em 16 16 |        |             | ; Logical XOR
5432:000 | DONE lbl | em 16 16 | 006003 |             | xt_xor                               
5433:000 | DONE ins | em 16 16 | 006003 | 98          |                 tya                  
5434:000 | DONE ins | em 16 16 | 006004 | 55 00       |                 eor.dx 00            
5435:000 | DONE ins | em 16 16 | 006006 | a8          |                 tay                  
5436:000 | DONE wsp | em 16 16 |        |             |
5437:000 | DONE ins | em 16 16 | 006007 | e8          |                 inx                  
5438:000 | DONE ins | em 16 16 | 006008 | e8          |                 inx                  
5439:000 | DONE wsp | em 16 16 |        |             |
5440:000 | DONE lbl | em 16 16 | 006009 |             | z_xor                                
5440:001 | DONE ins | em 16 16 | 006009 | 60          |                 rts                  
5441:000 | DONE wsp | em 16 16 |        |             |
5442:000 | DONE wsp | em 16 16 |        |             |
5443:000 | DONE cmt | em 16 16 |        |             | ; ===================================================================
5444:000 | DONE cmt | em 16 16 |        |             | ; MIDDLE INCLUDES
5445:000 | DONE wsp | em 16 16 |        |             |
5446:000 | DONE cmt | em 16 16 |        |             | ; Dictionary Headers for Liara Forth for the W65C265SXB
5446:001 | DONE cmt | em 16 16 |        |             | ; Scot W. Stevenson <scot.stevenson@gmail.com>
5446:002 | DONE cmt | em 16 16 |        |             | ; First version: 05. Dec 2016
5446:003 | DONE cmt | em 16 16 |        |             | ; This version: 12. Mar 2017
5446:004 | DONE wsp | em 16 16 |        |             |
5446:005 | DONE cmt | em 16 16 |        |             | ; Dictionary headers are kept separately from the code, which allows various
5446:006 | DONE cmt | em 16 16 |        |             | ; tricks in the code. We roughly follow the Gforth terminology: The Execution
5446:007 | DONE cmt | em 16 16 |        |             | ; Token (xt) is the address of the first byte of a word's code that can be,
5446:008 | DONE cmt | em 16 16 |        |             | ; well, executed; the Name Token (nt) is a pointer to the beginning of the
5446:009 | DONE cmt | em 16 16 |        |             | ; word's header in the Dictionary. There, the link to the next word in the
5446:010 | DONE cmt | em 16 16 |        |             | ; Dictionary is always one cell down from the current word's own nt. In the code
5446:011 | DONE cmt | em 16 16 |        |             | ; itself, we use "nt_<WORD>" ("header") for the nt and "xt_<WORD>" ("A" as the
5446:012 | DONE cmt | em 16 16 |        |             | ; beginning) for the xt.
5446:013 | DONE cmt | em 16 16 |        |             | ;
5446:014 | DONE cmt | em 16 16 |        |             | ; This gives us the following header structure:
5446:015 | DONE cmt | em 16 16 |        |             | ;
5446:016 | DONE cmt | em 16 16 |        |             | ;              8 bit     8 bit
5446:017 | DONE cmt | em 16 16 |        |             | ;               LSB       MSB
5446:018 | DONE cmt | em 16 16 |        |             | ; nt_word ->  +--------+--------+
5446:019 | DONE cmt | em 16 16 |        |             | ;             | Length | Status |
5446:020 | DONE cmt | em 16 16 |        |             | ;          +2 +--------+--------+
5446:021 | DONE cmt | em 16 16 |        |             | ;             | Next Header     | -> nt_next_word
5446:022 | DONE cmt | em 16 16 |        |             | ;          +4 +-----------------+
5446:023 | DONE cmt | em 16 16 |        |             | ;             | Start of Code   | -> xt_word
5446:024 | DONE cmt | em 16 16 |        |             | ;          +6 +-----------------+
5446:025 | DONE cmt | em 16 16 |        |             | ;             | End of Code     | -> z_word
5446:026 | DONE cmt | em 16 16 |        |             | ;          +8 +--------+--------+
5446:027 | DONE cmt | em 16 16 |        |             | ;             | Name   |        |
5446:028 | DONE cmt | em 16 16 |        |             | ;             +--------+--------+
5446:029 | DONE cmt | em 16 16 |        |             | ;             |        |        |
5446:030 | DONE cmt | em 16 16 |        |             | ;             +--------+--------+
5446:031 | DONE cmt | em 16 16 |        |             | ;             |        |  ...   | (name string does not end with a zero)
5446:032 | DONE cmt | em 16 16 |        |             | ;          +n +--------+--------+
5446:033 | DONE cmt | em 16 16 |        |             | ;
5446:034 | DONE cmt | em 16 16 |        |             | ; The Status Byte is created by adding the flags defined in
5446:035 | DONE cmt | em 16 16 |        |             | ; definitions.tasm:
5446:036 | DONE cmt | em 16 16 |        |             | ;
5446:037 | DONE cmt | em 16 16 |        |             | ;       CO - Compile Only
5446:038 | DONE cmt | em 16 16 |        |             | ;       IM - Immediate Word
5446:039 | DONE cmt | em 16 16 |        |             | ;       NC - Native Compile allowed (inline compile)
5446:040 | DONE cmt | em 16 16 |        |             | ;       FN - Force Native Compile (may not be called by JSR)
5446:041 | DONE wsp | em 16 16 |        |             |
5446:042 | DONE cmt | em 16 16 |        |             | ; Note there are currently five bits unused. The last word (top word in code)
5446:043 | DONE cmt | em 16 16 |        |             | ; is always BYE. It is marked as the last word by its value of 0000 in its Next
5446:044 | DONE cmt | em 16 16 |        |             | ; Header field. The words are sorted with the more common ones first (further
5446:045 | DONE cmt | em 16 16 |        |             | ; down in code) so they are found earlier.  Anythiing to do with output comes
5446:046 | DONE cmt | em 16 16 |        |             | ; later (further up) because things will always be slow if there is a human
5446:047 | DONE cmt | em 16 16 |        |             | ; involved.
5446:048 | DONE wsp | em 16 16 |        |             |
5446:049 | DONE lbl | em 16 16 | 00600a |             | nt_bye                               
5446:050 | DONE dir | em 16 16 | 00600a | (1 bytes)   |         .byte 03                     length of word string
5446:050 | DONE dir | em 16 16 |        |             |                 03                       --  .
5446:051 | DONE dir | em 16 16 | 00600b | (1 bytes)   |         .byte { NC }                 status byte
5446:051 | DONE dir | em 16 16 |        |             |                 01                       --  .
5446:052 | DONE dir | em 16 16 | 00600c | (2 bytes)   |         .word 0000                   next word in dictionary, 0000 signals end
5446:052 | DONE dir | em 16 16 |        |             |                 00 00                    --  . .
5446:053 | DONE dir | em 16 16 | 00600e | (2 bytes)   |         .word 0055c8                 start of code, the xt of this word
5446:053 | DONE dir | em 16 16 |        |             |                 c8 55                    --  . U
5446:054 | DONE dir | em 16 16 | 006010 | (2 bytes)   |         .word 0055cf                 end of code (points to RTS)
5446:054 | DONE dir | em 16 16 |        |             |                 cf 55                    --  . U
5446:055 | DONE dir | em 16 16 | 006012 | (3 bytes)   |         .byte 62, 79, 65             word name, always lower case
5446:055 | DONE dir | em 16 16 |        |             |                 62 79 65                 --  b y e
5446:056 | DONE wsp | em 16 16 |        |             |
5446:057 | DONE lbl | em 16 16 | 006015 |             | nt_cold                              
5446:058 | DONE dir | em 16 16 | 006015 | (2 bytes)   |         .byte 4, 00                  
5446:058 | DONE dir | em 16 16 |        |             |                 04 00                    --  . .
5446:059 | DONE dir | em 16 16 | 006017 | (6 bytes)   |         .word nt_bye, xt_cold, 0050f9 
5446:059 | DONE dir | em 16 16 |        |             |                 0a 60 64 50 f9 50        --  
 ` d P . P
5446:060 | DONE dir | em 16 16 | 00601d | (4 bytes)   |         .byte 63, 6f, 6c, 64         
5446:060 | DONE dir | em 16 16 |        |             |                 63 6f 6c 64              --  c o l d
5446:061 | DONE wsp | em 16 16 |        |             |
5446:062 | DONE lbl | em 16 16 | 006021 |             | nt_word                              
5446:063 | DONE dir | em 16 16 | 006021 | (2 bytes)   |         .byte 4, { NC }              
5446:063 | DONE dir | em 16 16 |        |             |                 04 01                    --  . .
5446:064 | DONE dir | em 16 16 | 006023 | (6 bytes)   |         .word nt_cold, xt_word, 005fab 
5446:064 | DONE dir | em 16 16 |        |             |                 15 60 93 5f ab 5f        --  . ` . _ . _
5446:065 | DONE dir | em 16 16 | 006029 | (4 bytes)   |         .byte 77, 6f, 72, 64         
5446:065 | DONE dir | em 16 16 |        |             |                 77 6f 72 64              --  w o r d
5446:066 | DONE wsp | em 16 16 |        |             |
5446:067 | DONE lbl | em 16 16 | 00602d |             | nt_find                              
5446:068 | DONE dir | em 16 16 | 00602d | (2 bytes)   |         .byte 4, { NC }              
5446:068 | DONE dir | em 16 16 |        |             |                 04 01                    --  . .
5446:069 | DONE dir | em 16 16 | 00602f | (6 bytes)   |         .word nt_word, xt_find, 005932 
5446:069 | DONE dir | em 16 16 |        |             |                 21 60 02 59 32 59        --  ! ` . Y 2 Y
5446:070 | DONE dir | em 16 16 | 006035 | (4 bytes)   |         .byte 66, 69, 6e, 64         
5446:070 | DONE dir | em 16 16 |        |             |                 66 69 6e 64              --  f i n d
5446:071 | DONE wsp | em 16 16 |        |             |
5446:072 | DONE lbl | em 16 16 | 006039 |             | nt_aligned                           
5446:073 | DONE dir | em 16 16 | 006039 | (2 bytes)   |         .byte 7, { NC }              
5446:073 | DONE dir | em 16 16 |        |             |                 07 01                    --  . .
5446:074 | DONE dir | em 16 16 | 00603b | (6 bytes)   |         .word nt_find, xt_aligned, 005533 
5446:074 | DONE dir | em 16 16 |        |             |                 2d 60 32 55 33 55        --  - ` 2 U 3 U
5446:075 | DONE dir | em 16 16 | 006041 | (7 bytes)   |         .byte 61, 6c, 69, 67, 6e, 65, 64 
5446:075 | DONE dir | em 16 16 |        |             |                 61 6c 69 67 6e 65 64     --  a l i g n e d
5446:076 | DONE wsp | em 16 16 |        |             |
5446:077 | DONE lbl | em 16 16 | 006048 |             | nt_align                             
5446:078 | DONE dir | em 16 16 | 006048 | (2 bytes)   |         .byte 5, { NC }              
5446:078 | DONE dir | em 16 16 |        |             |                 05 01                    --  . .
5446:079 | DONE dir | em 16 16 | 00604a | (6 bytes)   |         .word nt_aligned, xt_align, 005531 
5446:079 | DONE dir | em 16 16 |        |             |                 39 60 30 55 31 55        --  9 ` 0 U 1 U
5446:080 | DONE dir | em 16 16 | 006050 | (5 bytes)   |         .byte 61, 6c, 69, 67, 6e     
5446:080 | DONE dir | em 16 16 |        |             |                 61 6c 69 67 6e           --  a l i g n
5446:081 | DONE wsp | em 16 16 |        |             |
5446:082 | DONE lbl | em 16 16 | 006055 |             | nt_wordsnsizes                       
5446:083 | DONE dir | em 16 16 | 006055 | (2 bytes)   |         .byte 0b, { NC }             
5446:083 | DONE dir | em 16 16 |        |             |                 0b 01                    --   .
5446:084 | DONE dir | em 16 16 | 006057 | (6 bytes)   |         .word nt_align, xt_wordsnsizes, 005fef 
5446:084 | DONE dir | em 16 16 |        |             |                 48 60 ac 5f ef 5f        --  H ` . _ . _
5446:085 | DONE dir | em 16 16 | 00605d | (11 bytes)  |         .byte 77, 6f, 72, 64, 73, 26, 73, 69, 7a, 65, 73 
5446:085 | DONE dir | em 16 16 |        |             |                 77 6f 72 64 73 26 73 69  --  w o r d s & s i
5446:085 | DONE dir | em 16 16 |        |             |                 7a 65 73                 --  z e s
5446:086 | DONE wsp | em 16 16 |        |             |
5446:087 | DONE lbl | em 16 16 | 006068 |             | nt_words                             
5446:088 | DONE dir | em 16 16 | 006068 | (2 bytes)   |         .byte 5, { NC }              
5446:088 | DONE dir | em 16 16 |        |             |                 05 01                    --  . .
5446:089 | DONE dir | em 16 16 | 00606a | (6 bytes)   |         .word nt_wordsnsizes, xt_words, 005fef 
5446:089 | DONE dir | em 16 16 |        |             |                 55 60 b3 5f ef 5f        --  U ` . _ . _
5446:090 | DONE dir | em 16 16 | 006070 | (5 bytes)   |         .byte 77, 6f, 72, 64, 73     
5446:090 | DONE dir | em 16 16 |        |             |                 77 6f 72 64 73           --  w o r d s
5446:091 | DONE wsp | em 16 16 |        |             |
5446:092 | DONE lbl | em 16 16 | 006075 |             | nt_dump                              
5446:093 | DONE dir | em 16 16 | 006075 | (2 bytes)   |         .byte 4, { NC }              
5446:093 | DONE dir | em 16 16 |        |             |                 04 01                    --  . .
5446:094 | DONE dir | em 16 16 | 006077 | (6 bytes)   |         .word nt_words, xt_dump, 005896 
5446:094 | DONE dir | em 16 16 |        |             |                 68 60 79 58 96 58        --  h ` y X . X
5446:095 | DONE dir | em 16 16 | 00607d | (4 bytes)   |         .byte 64, 75, 6d, 70         
5446:095 | DONE dir | em 16 16 |        |             |                 64 75 6d 70              --  d u m p
5446:096 | DONE wsp | em 16 16 |        |             |
5446:097 | DONE lbl | em 16 16 | 006081 |             | nt_unloop                            
5446:098 | DONE dir | em 16 16 | 006081 | (2 bytes)   |         .byte 6, { NC + CO }         
5446:098 | DONE dir | em 16 16 |        |             |                 06 05                    --  . .
5446:099 | DONE dir | em 16 16 | 006083 | (6 bytes)   |         .word nt_dump, xt_unloop, 005f76 
5446:099 | DONE dir | em 16 16 |        |             |                 75 60 70 5f 76 5f        --  u ` p _ v _
5446:100 | DONE dir | em 16 16 | 006089 | (6 bytes)   |         .byte 75, 6e, 6c, 6f, 6f, 70 
5446:100 | DONE dir | em 16 16 |        |             |                 75 6e 6c 6f 6f 70        --  u n l o o p
5446:101 | DONE wsp | em 16 16 |        |             |
5446:102 | DONE lbl | em 16 16 | 00608f |             | nt_pploop                            
5446:103 | DONE dir | em 16 16 | 00608f | (2 bytes)   |         .byte 7, { NC + CO }         
5446:103 | DONE dir | em 16 16 |        |             |                 07 05                    --  . .
5446:104 | DONE dir | em 16 16 | 006091 | (6 bytes)   |         .word nt_unloop, xt_pploop, 0052ed 
5446:104 | DONE dir | em 16 16 |        |             |                 81 60 df 52 ed 52        --  . ` . R . R
5446:105 | DONE dir | em 16 16 | 006097 | (7 bytes)   |         .byte 28, 2b, 6c, 6f, 6f, 70, 29 
5446:105 | DONE dir | em 16 16 |        |             |                 28 2b 6c 6f 6f 70 29     --  ( + l o o p )
5446:106 | DONE wsp | em 16 16 |        |             |
5446:107 | DONE lbl | em 16 16 | 00609e |             | nt_pqdo                              
5446:108 | DONE dir | em 16 16 | 00609e | (2 bytes)   |         .byte 5, { NC + CO }         
5446:108 | DONE dir | em 16 16 |        |             |                 05 05                    --  . .
5446:109 | DONE dir | em 16 16 | 0060a0 | (6 bytes)   |         .word nt_pploop, xt_pqdo, 00530d 
5446:109 | DONE dir | em 16 16 |        |             |                 8f 60 ee 52 0d 53        --  . ` . R  S
5446:110 | DONE dir | em 16 16 | 0060a6 | (5 bytes)   |         .byte 28, 3f, 64, 6f, 29     
5446:110 | DONE dir | em 16 16 |        |             |                 28 3f 64 6f 29           --  ( ? d o )
5446:111 | DONE wsp | em 16 16 |        |             |
5446:112 | DONE lbl | em 16 16 | 0060ab |             | nt_pdo                               
5446:113 | DONE dir | em 16 16 | 0060ab | (2 bytes)   |         .byte 4, { NC + CO }         
5446:113 | DONE dir | em 16 16 |        |             |                 04 05                    --  . .
5446:114 | DONE dir | em 16 16 | 0060ad | (6 bytes)   |         .word nt_pqdo, xt_pdo, 00530d 
5446:114 | DONE dir | em 16 16 |        |             |                 9e 60 fb 52 0d 53        --  . ` . R  S
5446:115 | DONE dir | em 16 16 | 0060b3 | (4 bytes)   |         .byte 28, 64, 6f, 29         
5446:115 | DONE dir | em 16 16 |        |             |                 28 64 6f 29              --  ( d o )
5446:116 | DONE wsp | em 16 16 |        |             |
5446:117 | DONE lbl | em 16 16 | 0060b7 |             | nt_marker                            
5446:118 | DONE dir | em 16 16 | 0060b7 | (2 bytes)   |         .byte 6, { IM + NC }         
5446:118 | DONE dir | em 16 16 |        |             |                 06 03                    --  . .
5446:119 | DONE dir | em 16 16 | 0060b9 | (6 bytes)   |         .word nt_pdo, xt_marker, 005ad8 
5446:119 | DONE dir | em 16 16 |        |             |                 ab 60 af 5a d8 5a        --  . ` . Z . Z
5446:120 | DONE dir | em 16 16 | 0060bf | (6 bytes)   |         .byte 6d, 61, 72, 6b, 65, 72 
5446:120 | DONE dir | em 16 16 |        |             |                 6d 61 72 6b 65 72        --  m a r k e r
5446:121 | DONE wsp | em 16 16 |        |             |
5446:122 | DONE lbl | em 16 16 | 0060c5 |             | nt_wordsize                          
5446:123 | DONE dir | em 16 16 | 0060c5 | (2 bytes)   |         .byte 8, { NC }              
5446:123 | DONE dir | em 16 16 |        |             |                 08 01                    --  . .
5446:124 | DONE dir | em 16 16 | 0060c7 | (6 bytes)   |         .word nt_marker, xt_wordsize, 006002 
5446:124 | DONE dir | em 16 16 |        |             |                 b7 60 f0 5f 02 60        --  . ` . _ . `
5446:125 | DONE dir | em 16 16 | 0060cd | (8 bytes)   |         .byte 77, 6f, 72, 64, 73, 69, 7a, 65 
5446:125 | DONE dir | em 16 16 |        |             |                 77 6f 72 64 73 69 7a 65  --  w o r d s i z e
5446:125 | DONE dir | em 16 16 |        |             |                                          -- 
5446:126 | DONE wsp | em 16 16 |        |             |
5446:127 | DONE lbl | em 16 16 | 0060d5 |             | nt_pick                              
5446:128 | DONE dir | em 16 16 | 0060d5 | (2 bytes)   |         .byte 4, { NC }              
5446:128 | DONE dir | em 16 16 |        |             |                 04 01                    --  . .
5446:129 | DONE dir | em 16 16 | 0060d7 | (6 bytes)   |         .word nt_wordsize, xt_pick, 005c6f 
5446:129 | DONE dir | em 16 16 |        |             |                 c5 60 62 5c 6f 5c        --  . ` b \ o \
5446:130 | DONE dir | em 16 16 | 0060dd | (4 bytes)   |         .byte 70, 69, 63, 6b         
5446:130 | DONE dir | em 16 16 |        |             |                 70 69 63 6b              --  p i c k
5446:131 | DONE wsp | em 16 16 |        |             |
5446:132 | DONE lbl | em 16 16 | 0060e1 |             | nt_bell                              
5446:133 | DONE dir | em 16 16 | 0060e1 | (2 bytes)   |         .byte 4, { NC }              
5446:133 | DONE dir | em 16 16 |        |             |                 04 01                    --  . .
5446:134 | DONE dir | em 16 16 | 0060e3 | (6 bytes)   |         .word nt_pick, xt_bell, 00559a 
5446:134 | DONE dir | em 16 16 |        |             |                 d5 60 94 55 9a 55        --  . ` . U . U
5446:135 | DONE dir | em 16 16 | 0060e9 | (4 bytes)   |         .byte 62, 65, 6c, 6c         
5446:135 | DONE dir | em 16 16 |        |             |                 62 65 6c 6c              --  b e l l
5446:136 | DONE wsp | em 16 16 |        |             |
5446:137 | DONE lbl | em 16 16 | 0060ed |             | nt_chars                             
5446:138 | DONE dir | em 16 16 | 0060ed | (2 bytes)   |         .byte 5, { NC }              
5446:138 | DONE dir | em 16 16 |        |             |                 05 01                    --  . .
5446:139 | DONE dir | em 16 16 | 0060ef | (6 bytes)   |         .word nt_bell, xt_chars, 005615 
5446:139 | DONE dir | em 16 16 |        |             |                 e1 60 14 56 15 56        --  . ` . V . V
5446:140 | DONE dir | em 16 16 | 0060f5 | (5 bytes)   |         .byte 63, 68, 61, 72, 73     
5446:140 | DONE dir | em 16 16 |        |             |                 63 68 61 72 73           --  c h a r s
5446:141 | DONE wsp | em 16 16 |        |             |
5446:142 | DONE lbl | em 16 16 | 0060fa |             | nt_cellplus                          
5446:143 | DONE dir | em 16 16 | 0060fa | (2 bytes)   |         .byte 5, { NC }              
5446:143 | DONE dir | em 16 16 |        |             |                 05 01                    --  . .
5446:144 | DONE dir | em 16 16 | 0060fc | (6 bytes)   |         .word nt_chars, xt_cellplus, 0055fb 
5446:144 | DONE dir | em 16 16 |        |             |                 ed 60 f9 55 fb 55        --  . ` . U . U
5446:145 | DONE dir | em 16 16 | 006102 | (5 bytes)   |         .byte 63, 65, 6c, 6c, 2b     
5446:145 | DONE dir | em 16 16 |        |             |                 63 65 6c 6c 2b           --  c e l l +
5446:146 | DONE wsp | em 16 16 |        |             |
5446:147 | DONE lbl | em 16 16 | 006107 |             | nt_charplus                          
5446:148 | DONE dir | em 16 16 | 006107 | (2 bytes)   |         .byte 5, { NC }              uses code of 1+
5446:148 | DONE dir | em 16 16 |        |             |                 05 01                    --  . .
5446:149 | DONE dir | em 16 16 | 006109 | (6 bytes)   |         .word nt_cellplus, xt_one-plus, 0053c9 
5446:149 | DONE dir | em 16 16 |        |             |                 fa 60 c8 53 c9 53        --  . ` . S . S
5446:150 | DONE dir | em 16 16 | 00610f | (5 bytes)   |         .byte 63, 68, 61, 72, 2b     
5446:150 | DONE dir | em 16 16 |        |             |                 63 68 61 72 2b           --  c h a r +
5446:151 | DONE wsp | em 16 16 |        |             |
5446:152 | DONE lbl | em 16 16 | 006114 |             | nt_decimal                           
5446:153 | DONE dir | em 16 16 | 006114 | (2 bytes)   |         .byte 7, { NC }              
5446:153 | DONE dir | em 16 16 |        |             |                 07 01                    --  . .
5446:154 | DONE dir | em 16 16 | 006116 | (6 bytes)   |         .word nt_charplus, xt_decimal, 00582d 
5446:154 | DONE dir | em 16 16 |        |             |                 07 61 28 58 2d 58        --  . a ( X - X
5446:155 | DONE dir | em 16 16 | 00611c | (7 bytes)   |         .byte 64, 65, 63, 69, 6d, 61, 6c 
5446:155 | DONE dir | em 16 16 |        |             |                 64 65 63 69 6d 61 6c     --  d e c i m a l
5446:156 | DONE wsp | em 16 16 |        |             |
5446:157 | DONE lbl | em 16 16 | 006123 |             | nt_hex                               
5446:158 | DONE dir | em 16 16 | 006123 | (2 bytes)   |         .byte 3, { NC }              
5446:158 | DONE dir | em 16 16 |        |             |                 03 01                    --  . .
5446:159 | DONE dir | em 16 16 | 006125 | (6 bytes)   |         .word nt_decimal, xt_hex, 005a35 
5446:159 | DONE dir | em 16 16 |        |             |                 14 61 30 5a 35 5a        --  . a 0 Z 5 Z
5446:160 | DONE dir | em 16 16 | 00612b | (3 bytes)   |         .byte 68, 65, 78             
5446:160 | DONE dir | em 16 16 |        |             |                 68 65 78                 --  h e x
5446:161 | DONE wsp | em 16 16 |        |             |
5446:162 | DONE lbl | em 16 16 | 00612e |             | nt_unused                            
5446:163 | DONE dir | em 16 16 | 00612e | (2 bytes)   |         .byte 6, { NC }              
5446:163 | DONE dir | em 16 16 |        |             |                 06 01                    --  . .
5446:164 | DONE dir | em 16 16 | 006130 | (6 bytes)   |         .word nt_hex, xt_unused, 005f82 
5446:164 | DONE dir | em 16 16 |        |             |                 23 61 77 5f 82 5f        --  # a w _ . _
5446:165 | DONE dir | em 16 16 | 006136 | (6 bytes)   |         .byte 75, 6e, 75, 73, 65, 64 
5446:165 | DONE dir | em 16 16 |        |             |                 75 6e 75 73 65 64        --  u n u s e d
5446:166 | DONE wsp | em 16 16 |        |             |
5446:167 | DONE lbl | em 16 16 | 00613c |             | nt_page                              
5446:168 | DONE dir | em 16 16 | 00613c | (2 bytes)   |         .byte 4, { NC }              
5446:168 | DONE dir | em 16 16 |        |             |                 04 01                    --  . .
5446:169 | DONE dir | em 16 16 | 00613e | (6 bytes)   |         .word nt_unused, xt_page, 005bfa 
5446:169 | DONE dir | em 16 16 |        |             |                 2e 61 ee 5b fa 5b        --  . a . [ . [
5446:170 | DONE dir | em 16 16 | 006144 | (4 bytes)   |         .byte 70, 61, 67, 65         
5446:170 | DONE dir | em 16 16 |        |             |                 70 61 67 65              --  p a g e
5446:171 | DONE wsp | em 16 16 |        |             |
5446:172 | DONE lbl | em 16 16 | 006148 |             | nt_at-xy                             
5446:173 | DONE dir | em 16 16 | 006148 | (2 bytes)   |         .byte 5, { NC }              
5446:173 | DONE dir | em 16 16 |        |             |                 05 01                    --  . .
5446:174 | DONE dir | em 16 16 | 00614a | (6 bytes)   |         .word nt_page, xt_at-xy, 00558b 
5446:174 | DONE dir | em 16 16 |        |             |                 3c 61 64 55 8b 55        --  < a d U . U
5446:175 | DONE dir | em 16 16 | 006150 | (5 bytes)   |         .byte 61, 74, 2d, 78, 79     
5446:175 | DONE dir | em 16 16 |        |             |                 61 74 2d 78 79           --  a t - x y
5446:176 | DONE wsp | em 16 16 |        |             |
5446:177 | DONE lbl | em 16 16 | 006155 |             | nt_tworfetch                         
5446:178 | DONE dir | em 16 16 | 006155 | (2 bytes)   |         .byte 3, 00                  not natively compiled (yet)
5446:178 | DONE dir | em 16 16 |        |             |                 03 00                    --  . .
5446:179 | DONE dir | em 16 16 | 006157 | (6 bytes)   |         .word nt_at-xy, xt_tworfetch, 005424 
5446:179 | DONE dir | em 16 16 |        |             |                 48 61 17 54 24 54        --  H a . T $ T
5446:180 | DONE dir | em 16 16 | 00615d | (3 bytes)   |         .byte 32, 72, 40             
5446:180 | DONE dir | em 16 16 |        |             |                 32 72 40                 --  2 r @
5446:181 | DONE wsp | em 16 16 |        |             |
5446:182 | DONE lbl | em 16 16 | 006160 |             | nt_2variable                         
5446:183 | DONE dir | em 16 16 | 006160 | (2 bytes)   |         .byte 9, { NC }              
5446:183 | DONE dir | em 16 16 |        |             |                 09 01                    --  	 .
5446:184 | DONE dir | em 16 16 | 006162 | (6 bytes)   |         .word nt_tworfetch, xt_2variable, 005448 
5446:184 | DONE dir | em 16 16 |        |             |                 55 61 36 54 48 54        --  U a 6 T H T
5446:185 | DONE dir | em 16 16 | 006168 | (9 bytes)   |         .byte 32, 76, 61, 72, 69, 61, 62, 6c, 65 
5446:185 | DONE dir | em 16 16 |        |             |                 32 76 61 72 69 61 62 6c  --  2 v a r i a b l
5446:185 | DONE dir | em 16 16 |        |             |                 65                       --  e
5446:186 | DONE wsp | em 16 16 |        |             |
5446:187 | DONE lbl | em 16 16 | 006171 |             | nt_dabs                              
5446:188 | DONE dir | em 16 16 | 006171 | (2 bytes)   |         .byte 4, { NC }              
5446:188 | DONE dir | em 16 16 |        |             |                 04 01                    --  . .
5446:189 | DONE dir | em 16 16 | 006173 | (6 bytes)   |         .word nt_2variable, xt_dabs, 005827 
5446:189 | DONE dir | em 16 16 |        |             |                 60 61 21 58 27 58        --  ` a ! X ' X
5446:190 | DONE dir | em 16 16 | 006179 | (4 bytes)   |         .byte 64, 61, 62, 73         
5446:190 | DONE dir | em 16 16 |        |             |                 64 61 62 73              --  d a b s
5446:191 | DONE wsp | em 16 16 |        |             |
5446:192 | DONE lbl | em 16 16 | 00617d |             | nt_dnegate                           
5446:193 | DONE dir | em 16 16 | 00617d | (2 bytes)   |         .byte 7, { NC }              
5446:193 | DONE dir | em 16 16 |        |             |                 07 01                    --  . .
5446:194 | DONE dir | em 16 16 | 00617f | (6 bytes)   |         .word nt_dabs, xt_dnegate, 005850 
5446:194 | DONE dir | em 16 16 |        |             |                 71 61 3d 58 50 58        --  q a = X P X
5446:195 | DONE dir | em 16 16 | 006185 | (7 bytes)   |         .byte 64, 6e, 65, 67, 61, 74, 65 
5446:195 | DONE dir | em 16 16 |        |             |                 64 6e 65 67 61 74 65     --  d n e g a t e
5446:196 | DONE wsp | em 16 16 |        |             |
5446:197 | DONE lbl | em 16 16 | 00618c |             | nt_dtos                              
5446:198 | DONE dir | em 16 16 | 00618c | (2 bytes)   |         .byte 3, { NC }              
5446:198 | DONE dir | em 16 16 |        |             |                 03 01                    --  . .
5446:199 | DONE dir | em 16 16 | 00618e | (6 bytes)   |         .word nt_dnegate, xt_dtos, 005820 
5446:199 | DONE dir | em 16 16 |        |             |                 7d 61 1c 58 20 58        --  } a . X   X
5446:200 | DONE dir | em 16 16 | 006194 | (3 bytes)   |         .byte 64, 3e, 73             
5446:200 | DONE dir | em 16 16 |        |             |                 64 3e 73                 --  d > s
5446:201 | DONE wsp | em 16 16 |        |             |
5446:202 | DONE lbl | em 16 16 | 006197 |             | nt_stod                              
5446:203 | DONE dir | em 16 16 | 006197 | (2 bytes)   |         .byte 3, { NC }              
5446:203 | DONE dir | em 16 16 |        |             |                 03 01                    --  . .
5446:204 | DONE dir | em 16 16 | 006199 | (6 bytes)   |         .word nt_dtos, xt_stod, 005d51 
5446:204 | DONE dir | em 16 16 |        |             |                 8c 61 42 5d 51 5d        --  . a B ] Q ]
5446:205 | DONE dir | em 16 16 | 00619f | (3 bytes)   |         .byte 73, 3e, 64             
5446:205 | DONE dir | em 16 16 |        |             |                 73 3e 64                 --  s > d
5446:206 | DONE wsp | em 16 16 |        |             |
5446:207 | DONE lbl | em 16 16 | 0061a2 |             | nt_twofromr                          
5446:208 | DONE dir | em 16 16 | 0061a2 | (2 bytes)   |         .byte 3, { CO + NC }         NC is special case
5446:208 | DONE dir | em 16 16 |        |             |                 03 05                    --  . .
5446:209 | DONE dir | em 16 16 | 0061a4 | (6 bytes)   |         .word nt_stod, xt_twofromr, 005416 
5446:209 | DONE dir | em 16 16 |        |             |                 97 61 06 54 16 54        --  . a . T . T
5446:210 | DONE dir | em 16 16 | 0061aa | (3 bytes)   |         .byte 32, 72, 3e             
5446:210 | DONE dir | em 16 16 |        |             |                 32 72 3e                 --  2 r >
5446:211 | DONE wsp | em 16 16 |        |             |
5446:212 | DONE lbl | em 16 16 | 0061ad |             | nt_twotor                            
5446:213 | DONE dir | em 16 16 | 0061ad | (2 bytes)   |         .byte 3, { CO + NC }         NC is special case
5446:213 | DONE dir | em 16 16 |        |             |                 03 05                    --  . .
5446:214 | DONE dir | em 16 16 | 0061af | (6 bytes)   |         .word nt_twofromr, xt_twotor, 0053e6 
5446:214 | DONE dir | em 16 16 |        |             |                 a2 61 d6 53 e6 53        --  . a . S . S
5446:215 | DONE dir | em 16 16 | 0061b5 | (3 bytes)   |         .byte 32, 3e, 72             
5446:215 | DONE dir | em 16 16 |        |             |                 32 3e 72                 --  2 > r
5446:216 | DONE wsp | em 16 16 |        |             |
5446:217 | DONE lbl | em 16 16 | 0061b8 |             | nt_dminus                            
5446:218 | DONE dir | em 16 16 | 0061b8 | (2 bytes)   |         .byte 2, { NC }              
5446:218 | DONE dir | em 16 16 |        |             |                 02 01                    --  . .
5446:219 | DONE dir | em 16 16 | 0061ba | (6 bytes)   |         .word nt_twotor, xt_dminus, 00581b 
5446:219 | DONE dir | em 16 16 |        |             |                 ad 61 07 58 1b 58        --  . a . X . X
5446:220 | DONE dir | em 16 16 | 0061c0 | (2 bytes)   |         .byte 64, 2d                 
5446:220 | DONE dir | em 16 16 |        |             |                 64 2d                    --  d -
5446:221 | DONE wsp | em 16 16 |        |             |
5446:222 | DONE lbl | em 16 16 | 0061c2 |             | nt_dplus                             
5446:223 | DONE dir | em 16 16 | 0061c2 | (2 bytes)   |         .byte 2, { NC }              
5446:223 | DONE dir | em 16 16 |        |             |                 02 01                    --  . .
5446:224 | DONE dir | em 16 16 | 0061c4 | (6 bytes)   |         .word nt_dminus, xt_dplus, 005806 
5446:224 | DONE dir | em 16 16 |        |             |                 b8 61 f5 57 06 58        --  . a . W . X
5446:225 | DONE dir | em 16 16 | 0061ca | (2 bytes)   |         .byte 64, 2b                 
5446:225 | DONE dir | em 16 16 |        |             |                 64 2b                    --  d +
5446:226 | DONE wsp | em 16 16 |        |             |
5446:227 | DONE lbl | em 16 16 | 0061cc |             | nt_fmmod                             
5446:228 | DONE dir | em 16 16 | 0061cc | (2 bytes)   |         .byte 6, { NC }              
5446:228 | DONE dir | em 16 16 |        |             |                 06 01                    --  . .
5446:229 | DONE dir | em 16 16 | 0061ce | (6 bytes)   |         .word nt_dplus, xt_fmmod, 0059dd 
5446:229 | DONE dir | em 16 16 |        |             |                 c2 61 8a 59 dd 59        --  . a . Y . Y
5446:230 | DONE dir | em 16 16 | 0061d4 | (6 bytes)   |         .byte 66, 6d, 2f, 6d, 6f, 64 
5446:230 | DONE dir | em 16 16 |        |             |                 66 6d 2f 6d 6f 64        --  f m / m o d
5446:231 | DONE wsp | em 16 16 |        |             |
5446:232 | DONE lbl | em 16 16 | 0061da |             | nt_smrem                             
5446:233 | DONE dir | em 16 16 | 0061da | (2 bytes)   |         .byte 6, { NC }              
5446:233 | DONE dir | em 16 16 |        |             |                 06 01                    --  . .
5446:234 | DONE dir | em 16 16 | 0061dc | (6 bytes)   |         .word nt_fmmod, xt_smrem, 005e1c 
5446:234 | DONE dir | em 16 16 |        |             |                 cc 61 c3 5d 1c 5e        --  . a . ] . ^
5446:235 | DONE dir | em 16 16 | 0061e2 | (6 bytes)   |         .byte 73, 6d, 2f, 72, 65, 6d 
5446:235 | DONE dir | em 16 16 |        |             |                 73 6d 2f 72 65 6d        --  s m / r e m
5446:236 | DONE wsp | em 16 16 |        |             |
5446:237 | DONE lbl | em 16 16 | 0061e8 |             | nt_udmod                             
5446:238 | DONE dir | em 16 16 | 0061e8 | (2 bytes)   |         .byte 6, { NC }              
5446:238 | DONE dir | em 16 16 |        |             |                 06 01                    --  . .
5446:239 | DONE dir | em 16 16 | 0061ea | (6 bytes)   |         .word nt_smrem, xt_udmod, 005ebf 
5446:239 | DONE dir | em 16 16 |        |             |                 da 61 a4 5e bf 5e        --  . a . ^ . ^
5446:240 | DONE dir | em 16 16 | 0061f0 | (6 bytes)   |         .byte 75, 64, 2f, 6d, 6f, 64 
5446:240 | DONE dir | em 16 16 |        |             |                 75 64 2f 6d 6f 64        --  u d / m o d
5446:241 | DONE wsp | em 16 16 |        |             |
5446:242 | DONE lbl | em 16 16 | 0061f6 |             | nt_ummod                             
5446:243 | DONE dir | em 16 16 | 0061f6 | (2 bytes)   |         .byte 6, { NC }              
5446:243 | DONE dir | em 16 16 |        |             |                 06 01                    --  . .
5446:244 | DONE dir | em 16 16 | 0061f8 | (6 bytes)   |         .word nt_udmod, xt_ummod, 005f6f 
5446:244 | DONE dir | em 16 16 |        |             |                 e8 61 1f 5f 6f 5f        --  . a . _ o _
5446:245 | DONE dir | em 16 16 | 0061fe | (6 bytes)   |         .byte 75, 6d, 2f, 6d, 6f, 64 
5446:245 | DONE dir | em 16 16 |        |             |                 75 6d 2f 6d 6f 64        --  u m / m o d
5446:246 | DONE wsp | em 16 16 |        |             |
5446:247 | DONE lbl | em 16 16 | 006204 |             | nt_star                              
5446:248 | DONE dir | em 16 16 | 006204 | (2 bytes)   |         .byte 1, { NC }              
5446:248 | DONE dir | em 16 16 |        |             |                 01 01                    --  . .
5446:249 | DONE dir | em 16 16 | 006206 | (6 bytes)   |         .word nt_ummod, xt_star, 005e4f 
5446:249 | DONE dir | em 16 16 |        |             |                 f6 61 48 5e 4f 5e        --  . a H ^ O ^
5446:250 | DONE dir | em 16 16 | 00620c | (1 bytes)   |         .byte 2a                     
5446:250 | DONE dir | em 16 16 |        |             |                 2a                       --  *
5446:251 | DONE wsp | em 16 16 |        |             |
5446:252 | DONE lbl | em 16 16 | 00620d |             | nt_mstar                             
5446:253 | DONE dir | em 16 16 | 00620d | (2 bytes)   |         .byte 2, { NC }              
5446:253 | DONE dir | em 16 16 |        |             |                 02 01                    --  . .
5446:254 | DONE dir | em 16 16 | 00620f | (6 bytes)   |         .word nt_star, xt_mstar, 005aae 
5446:254 | DONE dir | em 16 16 |        |             |                 04 62 8f 5a ae 5a        --  . b . Z . Z
5446:255 | DONE dir | em 16 16 | 006215 | (2 bytes)   |         .byte 6d, 2a                 
5446:255 | DONE dir | em 16 16 |        |             |                 6d 2a                    --  m *
5446:256 | DONE wsp | em 16 16 |        |             |
5446:257 | DONE lbl | em 16 16 | 006217 |             | nt_umstar                            
5446:258 | DONE dir | em 16 16 | 006217 | (2 bytes)   |         .byte 3, { NC }              
5446:258 | DONE dir | em 16 16 |        |             |                 03 01                    --  . .
5446:259 | DONE dir | em 16 16 | 006219 | (6 bytes)   |         .word nt_mstar, xt_umstar, 005f1e 
5446:259 | DONE dir | em 16 16 |        |             |                 0d 62 c0 5e 1e 5f        --   b . ^ . _
5446:260 | DONE dir | em 16 16 | 00621f | (3 bytes)   |         .byte 75, 6d, 2a             
5446:260 | DONE dir | em 16 16 |        |             |                 75 6d 2a                 --  u m *
5446:261 | DONE wsp | em 16 16 |        |             |
5446:262 | DONE lbl | em 16 16 | 006222 |             | nt_cmoveup                           
5446:263 | DONE dir | em 16 16 | 006222 | (2 bytes)   |         .byte 6, { NC }              
5446:263 | DONE dir | em 16 16 |        |             |                 06 01                    --  . .
5446:264 | DONE dir | em 16 16 | 006224 | (6 bytes)   |         .word nt_umstar, xt_cmoveup, 005651 
5446:264 | DONE dir | em 16 16 |        |             |                 17 62 39 56 51 56        --  . b 9 V Q V
5446:265 | DONE dir | em 16 16 | 00622a | (6 bytes)   |         .byte 63, 6d, 6f, 76, 65, 3e 
5446:265 | DONE dir | em 16 16 |        |             |                 63 6d 6f 76 65 3e        --  c m o v e >
5446:266 | DONE wsp | em 16 16 |        |             |
5446:267 | DONE lbl | em 16 16 | 006230 |             | nt_cmove                             
5446:268 | DONE dir | em 16 16 | 006230 | (2 bytes)   |         .byte 5, { NC }              
5446:268 | DONE dir | em 16 16 |        |             |                 05 01                    --  . .
5446:269 | DONE dir | em 16 16 | 006232 | (6 bytes)   |         .word nt_cmoveup, xt_cmove, 005638 
5446:269 | DONE dir | em 16 16 |        |             |                 22 62 16 56 38 56        --  " b . V 8 V
5446:270 | DONE dir | em 16 16 | 006238 | (5 bytes)   |         .byte 63, 6d, 6f, 76, 65     
5446:270 | DONE dir | em 16 16 |        |             |                 63 6d 6f 76 65           --  c m o v e
5446:271 | DONE wsp | em 16 16 |        |             |
5446:272 | DONE lbl | em 16 16 | 00623d |             | nt_count                             
5446:273 | DONE dir | em 16 16 | 00623d | (2 bytes)   |         .byte 5, { NC }              
5446:273 | DONE dir | em 16 16 |        |             |                 05 01                    --  . .
5446:274 | DONE dir | em 16 16 | 00623f | (6 bytes)   |         .word nt_cmove, xt_count, 005726 
5446:274 | DONE dir | em 16 16 |        |             |                 30 62 19 57 26 57        --  0 b . W & W
5446:275 | DONE dir | em 16 16 | 006245 | (5 bytes)   |         .byte 63, 6f, 75, 6e, 74     
5446:275 | DONE dir | em 16 16 |        |             |                 63 6f 75 6e 74           --  c o u n t
5446:276 | DONE wsp | em 16 16 |        |             |
5446:277 | DONE lbl | em 16 16 | 00624a |             | nt_abortq                            
5446:278 | DONE dir | em 16 16 | 00624a | (2 bytes)   |         .byte 6, { CO + IM }         
5446:278 | DONE dir | em 16 16 |        |             |                 06 06                    --  . .
5446:279 | DONE dir | em 16 16 | 00624c | (6 bytes)   |         .word nt_count, xt_abortq, 005481 
5446:279 | DONE dir | em 16 16 |        |             |                 3d 62 65 54 81 54        --  = b e T . T
5446:280 | DONE dir | em 16 16 | 006252 | (6 bytes)   |         .byte 61, 62, 6f, 72, 74, &34 ABORT"
5446:280 | DONE dir | em 16 16 |        |             |                 61 62 6f 72 74 22        --  a b o r t "
5446:281 | DONE wsp | em 16 16 |        |             |
5446:282 | DONE lbl | em 16 16 | 006258 |             | nt_abort                             
5446:283 | DONE dir | em 16 16 | 006258 | (2 bytes)   |         .byte 5, 00                  TODO check flags - NC possible?
5446:283 | DONE dir | em 16 16 |        |             |                 05 00                    --  . .
5446:284 | DONE dir | em 16 16 | 00625a | (6 bytes)   |         .word nt_abortq, xt_abort, 0050f9 
5446:284 | DONE dir | em 16 16 |        |             |                 4a 62 b2 50 f9 50        --  J b . P . P
5446:285 | DONE dir | em 16 16 | 006260 | (5 bytes)   |         .byte 61, 62, 6f, 72, 74     
5446:285 | DONE dir | em 16 16 |        |             |                 61 62 6f 72 74           --  a b o r t
5446:286 | DONE wsp | em 16 16 |        |             |
5446:287 | DONE lbl | em 16 16 | 006265 |             | nt_parse                             
5446:288 | DONE dir | em 16 16 | 006265 | (2 bytes)   |         .byte 5, 00                  
5446:288 | DONE dir | em 16 16 |        |             |                 05 00                    --  . .
5446:289 | DONE dir | em 16 16 | 006267 | (6 bytes)   |         .word nt_abort, xt_parse, 005c61 
5446:289 | DONE dir | em 16 16 |        |             |                 58 62 2f 5c 61 5c        --  X b / \ a \
5446:290 | DONE dir | em 16 16 | 00626d | (5 bytes)   |         .byte 70, 61, 72, 73, 65     
5446:290 | DONE dir | em 16 16 |        |             |                 70 61 72 73 65           --  p a r s e
5446:291 | DONE wsp | em 16 16 |        |             |
5446:292 | DONE lbl | em 16 16 | 006272 |             | nt_quit                              
5446:293 | DONE dir | em 16 16 | 006272 | (2 bytes)   |         .byte 4, 00                  
5446:293 | DONE dir | em 16 16 |        |             |                 04 00                    --  . .
5446:294 | DONE dir | em 16 16 | 006274 | (6 bytes)   |         .word nt_parse, xt_quit, 0050f9 
5446:294 | DONE dir | em 16 16 |        |             |                 65 62 ba 50 f9 50        --  e b . P . P
5446:295 | DONE dir | em 16 16 | 00627a | (4 bytes)   |         .byte 71, 75, 69, 74         
5446:295 | DONE dir | em 16 16 |        |             |                 71 75 69 74              --  q u i t
5446:296 | DONE wsp | em 16 16 |        |             |
5446:297 | DONE lbl | em 16 16 | 00627e |             | nt_question                          
5446:298 | DONE dir | em 16 16 | 00627e | (2 bytes)   |         .byte 1, { NC }              
5446:298 | DONE dir | em 16 16 |        |             |                 01 01                    --  . .
5446:299 | DONE dir | em 16 16 | 006280 | (6 bytes)   |         .word nt_quit, xt_question, 0052c5 
5446:299 | DONE dir | em 16 16 |        |             |                 72 62 bf 52 c5 52        --  r b . R . R
5446:300 | DONE dir | em 16 16 | 006286 | (1 bytes)   |         .byte 3f                     
5446:300 | DONE dir | em 16 16 |        |             |                 3f                       --  ?
5446:301 | DONE wsp | em 16 16 |        |             |
5446:302 | DONE lbl | em 16 16 | 006287 |             | nt_int-name                          
5446:303 | DONE dir | em 16 16 | 006287 | (2 bytes)   |         .byte 8, { NC }              
5446:303 | DONE dir | em 16 16 |        |             |                 08 01                    --  . .
5446:304 | DONE dir | em 16 16 | 006289 | (6 bytes)   |         .word nt_question, xt_int-name, 005a22 
5446:304 | DONE dir | em 16 16 |        |             |                 7e 62 ff 59 22 5a        --  ~ b . Y " Z
5446:305 | DONE dir | em 16 16 | 00628f | (8 bytes)   |         .byte 69, 6e, 74, 3e, 6e, 61, 6d, 65 
5446:305 | DONE dir | em 16 16 |        |             |                 69 6e 74 3e 6e 61 6d 65  --  i n t > n a m e
5446:305 | DONE dir | em 16 16 |        |             |                                          -- 
5446:306 | DONE wsp | em 16 16 |        |             |
5446:307 | DONE lbl | em 16 16 | 006297 |             | nt_name-int                          
5446:308 | DONE dir | em 16 16 | 006297 | (2 bytes)   |         .byte 8, { NC }              
5446:308 | DONE dir | em 16 16 |        |             |                 08 01                    --  . .
5446:309 | DONE dir | em 16 16 | 006299 | (6 bytes)   |         .word nt_int-name, xt_name-int, 005b1b 
5446:309 | DONE dir | em 16 16 |        |             |                 87 62 13 5b 1b 5b        --  . b . [ . [
5446:310 | DONE dir | em 16 16 | 00629f | (8 bytes)   |         .byte 6e, 61, 6d, 65, 3e, 69, 6e, 74 
5446:310 | DONE dir | em 16 16 |        |             |                 6e 61 6d 65 3e 69 6e 74  --  n a m e > i n t
5446:310 | DONE dir | em 16 16 |        |             |                                          -- 
5446:311 | DONE wsp | em 16 16 |        |             |
5446:312 | DONE lbl | em 16 16 | 0062a7 |             | nt_cr                                
5446:313 | DONE dir | em 16 16 | 0062a7 | (2 bytes)   |         .byte 2, { NC }              
5446:313 | DONE dir | em 16 16 |        |             |                 02 01                    --  . .
5446:314 | DONE dir | em 16 16 | 0062a9 | (6 bytes)   |         .word nt_name-int, xt_cr, 00572d 
5446:314 | DONE dir | em 16 16 |        |             |                 97 62 27 57 2d 57        --  . b ' W - W
5446:315 | DONE dir | em 16 16 | 0062af | (2 bytes)   |         .byte 63, 72                 
5446:315 | DONE dir | em 16 16 |        |             |                 63 72                    --  c r
5446:316 | DONE wsp | em 16 16 |        |             |
5446:317 | DONE lbl | em 16 16 | 0062b1 |             | nt_fill                              
5446:318 | DONE dir | em 16 16 | 0062b1 | (2 bytes)   |         .byte 4, { NC }              
5446:318 | DONE dir | em 16 16 |        |             |                 04 01                    --  . .
5446:319 | DONE dir | em 16 16 | 0062b3 | (6 bytes)   |         .word nt_cr, xt_fill, 0058c5 
5446:319 | DONE dir | em 16 16 |        |             |                 a7 62 ab 58 c5 58        --  . b . X . X
5446:320 | DONE dir | em 16 16 | 0062b9 | (4 bytes)   |         .byte 66, 69, 6c, 6c         
5446:320 | DONE dir | em 16 16 |        |             |                 66 69 6c 6c              --  f i l l
5446:321 | DONE wsp | em 16 16 |        |             |
5446:322 | DONE lbl | em 16 16 | 0062bd |             | nt_erase                             
5446:323 | DONE dir | em 16 16 | 0062bd | (2 bytes)   |         .byte 5, { NC }              
5446:323 | DONE dir | em 16 16 |        |             |                 05 01                    --  . .
5446:324 | DONE dir | em 16 16 | 0062bf | (6 bytes)   |         .word nt_fill, xt_erase, 0058c5 
5446:324 | DONE dir | em 16 16 |        |             |                 b1 62 a4 58 c5 58        --  . b . X . X
5446:325 | DONE dir | em 16 16 | 0062c5 | (5 bytes)   |         .byte 65, 72, 61, 73, 65     
5446:325 | DONE dir | em 16 16 |        |             |                 65 72 61 73 65           --  e r a s e
5446:326 | DONE wsp | em 16 16 |        |             |
5446:327 | DONE lbl | em 16 16 | 0062ca |             | nt_numbermore                        
5446:328 | DONE dir | em 16 16 | 0062ca | (2 bytes)   |         .byte 2, { NC }              "quoth the rumben"
5446:328 | DONE dir | em 16 16 |        |             |                 02 01                    --  . .
5446:329 | DONE dir | em 16 16 | 0062cc | (6 bytes)   |         .word nt_erase, xt_numbermore, 0052b5 
5446:329 | DONE dir | em 16 16 |        |             |                 bd 62 a7 52 b5 52        --  . b . R . R
5446:330 | DONE dir | em 16 16 | 0062d2 | (2 bytes)   |         .byte 23, 3e                 
5446:330 | DONE dir | em 16 16 |        |             |                 23 3e                    --  # >
5446:331 | DONE wsp | em 16 16 |        |             |
5446:332 | DONE lbl | em 16 16 | 0062d4 |             | nt_hold                              
5446:333 | DONE dir | em 16 16 | 0062d4 | (2 bytes)   |         .byte 4, { NC }              
5446:333 | DONE dir | em 16 16 |        |             |                 04 01                    --  . .
5446:334 | DONE dir | em 16 16 | 0062d6 | (6 bytes)   |         .word nt_numbermore, xt_hold, 005a43 
5446:334 | DONE dir | em 16 16 |        |             |                 ca 62 36 5a 43 5a        --  . b 6 Z C Z
5446:335 | DONE dir | em 16 16 | 0062dc | (4 bytes)   |         .byte 68, 6f, 6c, 64         
5446:335 | DONE dir | em 16 16 |        |             |                 68 6f 6c 64              --  h o l d
5446:336 | DONE wsp | em 16 16 |        |             |
5446:337 | DONE lbl | em 16 16 | 0062e0 |             | nt_hashs                             
5446:338 | DONE dir | em 16 16 | 0062e0 | (2 bytes)   |         .byte 2, { NC }              also known as "number-s"
5446:338 | DONE dir | em 16 16 |        |             |                 02 01                    --  . .
5446:339 | DONE dir | em 16 16 | 0062e2 | (6 bytes)   |         .word nt_hold, xt_hashs, 0052be 
5446:339 | DONE dir | em 16 16 |        |             |                 d4 62 b6 52 be 52        --  . b . R . R
5446:340 | DONE dir | em 16 16 | 0062e8 | (2 bytes)   |         .byte 23, 73                 
5446:340 | DONE dir | em 16 16 |        |             |                 23 73                    --  # s
5446:341 | DONE wsp | em 16 16 |        |             |
5446:342 | DONE lbl | em 16 16 | 0062ea |             | nt_sign                              
5446:343 | DONE dir | em 16 16 | 0062ea | (2 bytes)   |         .byte 4, { NC }              
5446:343 | DONE dir | em 16 16 |        |             |                 04 01                    --  . .
5446:344 | DONE dir | em 16 16 | 0062ec | (6 bytes)   |         .word nt_hashs, xt_sign, 005d61 
5446:344 | DONE dir | em 16 16 |        |             |                 e0 62 52 5d 61 5d        --  . b R ] a ]
5446:345 | DONE dir | em 16 16 | 0062f2 | (4 bytes)   |         .byte 73, 69, 67, 6e         
5446:345 | DONE dir | em 16 16 |        |             |                 73 69 67 6e              --  s i g n
5446:346 | DONE wsp | em 16 16 |        |             |
5446:347 | DONE lbl | em 16 16 | 0062f6 |             | nt_hash                              
5446:348 | DONE dir | em 16 16 | 0062f6 | (2 bytes)   |         .byte 1, { NC }              also known as "number-sign"
5446:348 | DONE dir | em 16 16 |        |             |                 01 01                    --  . .
5446:349 | DONE dir | em 16 16 | 0062f8 | (6 bytes)   |         .word nt_sign, xt_hash, 0052a6 
5446:349 | DONE dir | em 16 16 |        |             |                 ea 62 8c 52 a6 52        --  . b . R . R
5446:350 | DONE dir | em 16 16 | 0062fe | (1 bytes)   |         .byte 23                     
5446:350 | DONE dir | em 16 16 |        |             |                 23                       --  #
5446:351 | DONE wsp | em 16 16 |        |             |
5446:352 | DONE lbl | em 16 16 | 0062ff |             | nt_lessnumber                        
5446:353 | DONE dir | em 16 16 | 0062ff | (2 bytes)   |         .byte 2, { NC }              
5446:353 | DONE dir | em 16 16 |        |             |                 02 01                    --  . .
5446:354 | DONE dir | em 16 16 | 006301 | (6 bytes)   |         .word nt_hash, xt_lessnumber, 005122 
5446:354 | DONE dir | em 16 16 |        |             |                 f6 62 19 51 22 51        --  . b . Q " Q
5446:355 | DONE dir | em 16 16 | 006307 | (2 bytes)   |         .byte 3c, 23                 
5446:355 | DONE dir | em 16 16 |        |             |                 3c 23                    --  < #
5446:356 | DONE wsp | em 16 16 |        |             |
5446:357 | DONE lbl | em 16 16 | 006309 |             | nt_bl                                
5446:358 | DONE dir | em 16 16 | 006309 | (2 bytes)   |         .byte 2, { NC }              
5446:358 | DONE dir | em 16 16 |        |             |                 02 01                    --  . .
5446:359 | DONE dir | em 16 16 | 00630b | (6 bytes)   |         .word nt_lessnumber, xt_bl, 0055a9 
5446:359 | DONE dir | em 16 16 |        |             |                 ff 62 a2 55 a9 55        --  . b . U . U
5446:360 | DONE dir | em 16 16 | 006311 | (2 bytes)   |         .byte 62, 6c                 
5446:360 | DONE dir | em 16 16 |        |             |                 62 6c                    --  b l
5446:361 | DONE wsp | em 16 16 |        |             |
5446:362 | DONE lbl | em 16 16 | 006313 |             | nt_spaces                            
5446:363 | DONE dir | em 16 16 | 006313 | (2 bytes)   |         .byte 6, { NC }              
5446:363 | DONE dir | em 16 16 |        |             |                 06 01                    --  . .
5446:364 | DONE dir | em 16 16 | 006315 | (6 bytes)   |         .word nt_bl, xt_spaces, 005e47 
5446:364 | DONE dir | em 16 16 |        |             |                 09 63 38 5e 47 5e        --  	 c 8 ^ G ^
5446:365 | DONE dir | em 16 16 | 00631b | (6 bytes)   |         .byte 73, 70, 61, 63, 65, 73 
5446:365 | DONE dir | em 16 16 |        |             |                 73 70 61 63 65 73        --  s p a c e s
5446:366 | DONE wsp | em 16 16 |        |             |
5446:367 | DONE lbl | em 16 16 | 006321 |             | nt_space                             
5446:368 | DONE dir | em 16 16 | 006321 | (2 bytes)   |         .byte 5, { NC }              
5446:368 | DONE dir | em 16 16 |        |             |                 05 01                    --  . .
5446:369 | DONE dir | em 16 16 | 006323 | (6 bytes)   |         .word nt_spaces, xt_space, 005e37 
5446:369 | DONE dir | em 16 16 |        |             |                 13 63 31 5e 37 5e        --  . c 1 ^ 7 ^
5446:370 | DONE dir | em 16 16 | 006329 | (5 bytes)   |         .byte 73, 70, 61, 63, 65     
5446:370 | DONE dir | em 16 16 |        |             |                 73 70 61 63 65           --  s p a c e
5446:371 | DONE wsp | em 16 16 |        |             |
5446:372 | DONE lbl | em 16 16 | 00632e |             | nt_dots                              
5446:373 | DONE dir | em 16 16 | 00632e | (2 bytes)   |         .byte 2, { NC }              
5446:373 | DONE dir | em 16 16 |        |             |                 02 01                    --  . .
5446:374 | DONE dir | em 16 16 | 006330 | (6 bytes)   |         .word nt_space, xt_dots, 005244 
5446:374 | DONE dir | em 16 16 |        |             |                 21 63 0d 52 44 52        --  ! c  R D R
5446:375 | DONE dir | em 16 16 | 006336 | (2 bytes)   |         .byte 2e, 73                 
5446:375 | DONE dir | em 16 16 |        |             |                 2e 73                    --  . s
5446:376 | DONE wsp | em 16 16 |        |             |
5446:377 | DONE lbl | em 16 16 | 006338 |             | nt_type                              
5446:378 | DONE dir | em 16 16 | 006338 | (2 bytes)   |         .byte 4, { NC }              
5446:378 | DONE dir | em 16 16 |        |             |                 04 01                    --  . .
5446:379 | DONE dir | em 16 16 | 00633a | (6 bytes)   |         .word nt_dots, xt_type, 005e99 
5446:379 | DONE dir | em 16 16 |        |             |                 2e 63 79 5e 99 5e        --  . c y ^ . ^
5446:380 | DONE dir | em 16 16 | 006340 | (4 bytes)   |         .byte 74, 79, 70, 65         
5446:380 | DONE dir | em 16 16 |        |             |                 74 79 70 65              --  t y p e
5446:381 | DONE wsp | em 16 16 |        |             |
5446:382 | DONE lbl | em 16 16 | 006344 |             | nt_udot                              
5446:383 | DONE dir | em 16 16 | 006344 | (2 bytes)   |         .byte 2, { NC }              
5446:383 | DONE dir | em 16 16 |        |             |                 02 01                    --  . .
5446:384 | DONE dir | em 16 16 | 006346 | (6 bytes)   |         .word nt_type, xt_udot, 005ea3 
5446:384 | DONE dir | em 16 16 |        |             |                 38 63 9a 5e a3 5e        --  8 c . ^ . ^
5446:385 | DONE dir | em 16 16 | 00634c | (2 bytes)   |         .byte 75, 2e                 
5446:385 | DONE dir | em 16 16 |        |             |                 75 2e                    --  u .
5446:386 | DONE wsp | em 16 16 |        |             |
5446:387 | DONE lbl | em 16 16 | 00634e |             | nt_emit                              
5446:388 | DONE dir | em 16 16 | 00634e | (2 bytes)   |         .byte 4, 0                   not native compile
5446:388 | DONE dir | em 16 16 |        |             |                 04 00                    --  . .
5446:389 | DONE dir | em 16 16 | 006350 | (6 bytes)   |         .word nt_udot, xt_emit, 0058a4 
5446:389 | DONE dir | em 16 16 |        |             |                 44 63 9c 58 a4 58        --  D c . X . X
5446:390 | DONE dir | em 16 16 | 006356 | (4 bytes)   |         .byte 65, 6d, 69, 74         
5446:390 | DONE dir | em 16 16 |        |             |                 65 6d 69 74              --  e m i t
5446:391 | DONE wsp | em 16 16 |        |             |
5446:392 | DONE lbl | em 16 16 | 00635a |             | nt_dot                               
5446:393 | DONE dir | em 16 16 | 00635a | (2 bytes)   |         .byte 1, { NC }              
5446:393 | DONE dir | em 16 16 |        |             |                 01 01                    --  . .
5446:394 | DONE dir | em 16 16 | 00635c | (6 bytes)   |         .word nt_emit, xt_dot, 0051f8 
5446:394 | DONE dir | em 16 16 |        |             |                 4e 63 da 51 f8 51        --  N c . Q . Q
5446:395 | DONE dir | em 16 16 | 006362 | (1 bytes)   |         .byte 2e                     
5446:395 | DONE dir | em 16 16 |        |             |                 2e                       --  .
5446:396 | DONE wsp | em 16 16 |        |             |
5446:397 | DONE lbl | em 16 16 | 006363 |             | nt_pad                               
5446:398 | DONE dir | em 16 16 | 006363 | (2 bytes)   |         .byte 3, { NC }              
5446:398 | DONE dir | em 16 16 |        |             |                 03 01                    --  . .
5446:399 | DONE dir | em 16 16 | 006365 | (6 bytes)   |         .word nt_dot, xt_pad, 005bed 
5446:399 | DONE dir | em 16 16 |        |             |                 5a 63 e2 5b ed 5b        --  Z c . [ . [
5446:400 | DONE dir | em 16 16 | 00636b | (3 bytes)   |         .byte 70, 61, 64             
5446:400 | DONE dir | em 16 16 |        |             |                 70 61 64                 --  p a d
5446:401 | DONE wsp | em 16 16 |        |             |
5446:402 | DONE lbl | em 16 16 | 00636e |             | nt_base                              
5446:403 | DONE dir | em 16 16 | 00636e | (2 bytes)   |         .byte 4, { NC }              
5446:403 | DONE dir | em 16 16 |        |             |                 04 01                    --  . .
5446:404 | DONE dir | em 16 16 | 006370 | (6 bytes)   |         .word nt_pad, xt_base, 005593 
5446:404 | DONE dir | em 16 16 |        |             |                 63 63 8c 55 93 55        --  c c . U . U
5446:405 | DONE dir | em 16 16 | 006376 | (4 bytes)   |         .byte 62, 61, 73, 65         
5446:405 | DONE dir | em 16 16 |        |             |                 62 61 73 65              --  b a s e
5446:406 | DONE wsp | em 16 16 |        |             |
5446:407 | DONE lbl | em 16 16 | 00637a |             | nt_nc-limit                          
5446:408 | DONE dir | em 16 16 | 00637a | (2 bytes)   |         .byte 8, { NC }              
5446:408 | DONE dir | em 16 16 |        |             |                 08 01                    --  . .
5446:409 | DONE dir | em 16 16 | 00637c | (6 bytes)   |         .word nt_base, xt_nc-limit, 005b3d 
5446:409 | DONE dir | em 16 16 |        |             |                 6e 63 36 5b 3d 5b        --  n c 6 [ = [
5446:410 | DONE dir | em 16 16 | 006382 | (8 bytes)   |         .byte 6e, 63, 2d, 6c, 69, 6d, 69, 74 
5446:410 | DONE dir | em 16 16 |        |             |                 6e 63 2d 6c 69 6d 69 74  --  n c - l i m i t
5446:410 | DONE dir | em 16 16 |        |             |                                          -- 
5446:411 | DONE wsp | em 16 16 |        |             |
5446:412 | DONE lbl | em 16 16 | 00638a |             | nt_input                             
5446:413 | DONE dir | em 16 16 | 00638a | (2 bytes)   |         .byte 5, { NC }              
5446:413 | DONE dir | em 16 16 |        |             |                 05 01                    --  . .
5446:414 | DONE dir | em 16 16 | 00638c | (6 bytes)   |         .word nt_nc-limit, xt_input, 0059fe 
5446:414 | DONE dir | em 16 16 |        |             |                 7a 63 f7 59 fe 59        --  z c . Y . Y
5446:415 | DONE dir | em 16 16 | 006392 | (5 bytes)   |         .byte 69, 6e, 70, 75, 74     
5446:415 | DONE dir | em 16 16 |        |             |                 69 6e 70 75 74           --  i n p u t
5446:416 | DONE wsp | em 16 16 |        |             |
5446:417 | DONE lbl | em 16 16 | 006397 |             | nt_output                            
5446:418 | DONE dir | em 16 16 | 006397 | (2 bytes)   |         .byte 6, { NC }              
5446:418 | DONE dir | em 16 16 |        |             |                 06 01                    --  . .
5446:419 | DONE dir | em 16 16 | 006399 | (6 bytes)   |         .word nt_input, xt_output, 005bda 
5446:419 | DONE dir | em 16 16 |        |             |                 8a 63 d3 5b da 5b        --  . c . [ . [
5446:420 | DONE dir | em 16 16 | 00639f | (6 bytes)   |         .byte 6f, 75, 74, 70, 75, 74 
5446:420 | DONE dir | em 16 16 |        |             |                 6f 75 74 70 75 74        --  o u t p u t
5446:421 | DONE wsp | em 16 16 |        |             |
5446:422 | DONE lbl | em 16 16 | 0063a5 |             | nt_evaluate                          
5446:423 | DONE dir | em 16 16 | 0063a5 | (2 bytes)   |         .byte 8, { NC }              
5446:423 | DONE dir | em 16 16 |        |             |                 08 01                    --  . .
5446:424 | DONE dir | em 16 16 | 0063a7 | (6 bytes)   |         .word nt_output, xt_evaluate, 0058f4 
5446:424 | DONE dir | em 16 16 |        |             |                 97 63 c6 58 f4 58        --  . c . X . X
5446:425 | DONE dir | em 16 16 | 0063ad | (8 bytes)   |         .byte 65, 76, 61, 6c, 75, 61, 74, 65 
5446:425 | DONE dir | em 16 16 |        |             |                 65 76 61 6c 75 61 74 65  --  e v a l u a t e
5446:425 | DONE dir | em 16 16 |        |             |                                          -- 
5446:426 | DONE wsp | em 16 16 |        |             |
5446:427 | DONE lbl | em 16 16 | 0063b5 |             | nt_cells                             
5446:428 | DONE dir | em 16 16 | 0063b5 | (2 bytes)   |         .byte 5, { NC }              2* because we have 16 bit stack
5446:428 | DONE dir | em 16 16 |        |             |                 05 01                    --  . .
5446:429 | DONE dir | em 16 16 | 0063b7 | (6 bytes)   |         .word nt_evaluate, xt_two-star, 0053d5 
5446:429 | DONE dir | em 16 16 |        |             |                 a5 63 d2 53 d5 53        --  . c . S . S
5446:430 | DONE dir | em 16 16 | 0063bd | (5 bytes)   |         .byte 63, 65, 6c, 6c, 73     
5446:430 | DONE dir | em 16 16 |        |             |                 63 65 6c 6c 73           --  c e l l s
5446:431 | DONE wsp | em 16 16 |        |             |
5446:432 | DONE lbl | em 16 16 | 0063c2 |             | nt_dotquote                          
5446:433 | DONE dir | em 16 16 | 0063c2 | (2 bytes)   |         .byte 2, { CO + IM }         
5446:433 | DONE dir | em 16 16 |        |             |                 02 06                    --  . .
5446:434 | DONE dir | em 16 16 | 0063c4 | (6 bytes)   |         .word nt_cells, xt_dotquote, 00520c 
5446:434 | DONE dir | em 16 16 |        |             |                 b5 63 f9 51 0c 52        --  . c . Q  R
5446:435 | DONE dir | em 16 16 | 0063ca | (2 bytes)   |         .byte 2e, &34                
5446:435 | DONE dir | em 16 16 |        |             |                 2e 22                    --  . "
5446:436 | DONE wsp | em 16 16 |        |             |
5446:437 | DONE lbl | em 16 16 | 0063cc |             | nt_squote                            
5446:438 | DONE dir | em 16 16 | 0063cc | (2 bytes)   |         .byte 2, { IM + NC }         not CO, see source code
5446:438 | DONE dir | em 16 16 |        |             |                 02 03                    --  . .
5446:439 | DONE dir | em 16 16 | 0063ce | (6 bytes)   |         .word nt_dotquote, xt_squote, 005d41 
5446:439 | DONE dir | em 16 16 |        |             |                 c2 63 0c 5d 41 5d        --  . c  ] A ]
5446:440 | DONE dir | em 16 16 | 0063d4 | (2 bytes)   |         .byte 73, &34                
5446:440 | DONE dir | em 16 16 |        |             |                 73 22                    --  s "
5446:441 | DONE wsp | em 16 16 |        |             |
5446:442 | DONE lbl | em 16 16 | 0063d6 |             | nt_sliteral                          
5446:443 | DONE dir | em 16 16 | 0063d6 | (2 bytes)   |         .byte 8, { IM + CO }         
5446:443 | DONE dir | em 16 16 |        |             |                 08 06                    --  . .
5446:444 | DONE dir | em 16 16 | 0063d8 | (6 bytes)   |         .word nt_squote, xt_sliteral, 005dac 
5446:444 | DONE dir | em 16 16 |        |             |                 cc 63 62 5d ac 5d        --  . c b ] . ]
5446:445 | DONE dir | em 16 16 | 0063de | (8 bytes)   |         .byte 73, 6c, 69, 74, 65, 72, 61, 6c 
5446:445 | DONE dir | em 16 16 |        |             |                 73 6c 69 74 65 72 61 6c  --  s l i t e r a l
5446:445 | DONE dir | em 16 16 |        |             |                                          -- 
5446:446 | DONE wsp | em 16 16 |        |             |
5446:447 | DONE lbl | em 16 16 | 0063e6 |             | nt_brackettick                       
5446:448 | DONE dir | em 16 16 | 0063e6 | (2 bytes)   |         .byte 3, { IM + CO }         
5446:448 | DONE dir | em 16 16 |        |             |                 03 06                    --  . .
5446:449 | DONE dir | em 16 16 | 0063e8 | (6 bytes)   |         .word nt_sliteral, xt_brackettick, 005314 
5446:449 | DONE dir | em 16 16 |        |             |                 d6 63 0e 53 14 53        --  . c . S . S
5446:450 | DONE dir | em 16 16 | 0063ee | (3 bytes)   |         .byte 5b, 27, 5d             
5446:450 | DONE dir | em 16 16 |        |             |                 5b 27 5d                 --  [ ' ]
5446:451 | DONE wsp | em 16 16 |        |             |
5446:452 | DONE lbl | em 16 16 | 0063f1 |             | nt_bracketchar                       
5446:453 | DONE dir | em 16 16 | 0063f1 | (2 bytes)   |         .byte 6, { IM + CO }         
5446:453 | DONE dir | em 16 16 |        |             |                 06 06                    --  . .
5446:454 | DONE dir | em 16 16 | 0063f3 | (6 bytes)   |         .word nt_brackettick, xt_bracketchar, 005324 
5446:454 | DONE dir | em 16 16 |        |             |                 e6 63 1e 53 24 53        --  . c . S $ S
5446:455 | DONE dir | em 16 16 | 0063f9 | (6 bytes)   |         .byte 5b, 63, 68, 61, 72, 5d 
5446:455 | DONE dir | em 16 16 |        |             |                 5b 63 68 61 72 5d        --  [ c h a r ]
5446:456 | DONE wsp | em 16 16 |        |             |
5446:457 | DONE lbl | em 16 16 | 0063ff |             | nt_literal                           
5446:458 | DONE dir | em 16 16 | 0063ff | (2 bytes)   |         .byte 7, { IM + CO }         
5446:458 | DONE dir | em 16 16 |        |             |                 07 06                    --  . .
5446:459 | DONE dir | em 16 16 | 006401 | (6 bytes)   |         .word nt_bracketchar, xt_literal, 005a6d 
5446:459 | DONE dir | em 16 16 |        |             |                 f1 63 5c 5a 6d 5a        --  . c \ Z m Z
5446:460 | DONE dir | em 16 16 | 006407 | (7 bytes)   |         .byte 6c, 69, 74, 65, 72, 61, 6c 
5446:460 | DONE dir | em 16 16 |        |             |                 6c 69 74 65 72 61 6c     --  l i t e r a l
5446:461 | DONE wsp | em 16 16 |        |             |
5446:462 | DONE lbl | em 16 16 | 00640e |             | nt_native-compile                    
5446:463 | DONE dir | em 16 16 | 00640e | (2 bytes)   |         .byte 0e, { NC }             
5446:463 | DONE dir | em 16 16 |        |             |                 0e 01                    --  . .
5446:464 | DONE dir | em 16 16 | 006410 | (6 bytes)   |         .word nt_literal, xt_native-compile, 005b35 
5446:464 | DONE dir | em 16 16 |        |             |                 ff 63 2d 5b 35 5b        --  . c - [ 5 [
5446:465 | DONE dir | em 16 16 | 006416 | (14 bytes)  |         .byte 6e, 61, 74, 69, 76, 65, 2d, 63, 6f, 6d, 70, 69, 6c, 65 
5446:465 | DONE dir | em 16 16 |        |             |                 6e 61 74 69 76 65 2d 63  --  n a t i v e - c
5446:465 | DONE dir | em 16 16 |        |             |                 6f 6d 70 69 6c 65        --  o m p i l e
5446:466 | DONE wsp | em 16 16 |        |             |
5446:467 | DONE lbl | em 16 16 | 006424 |             | nt_compile-only                      
5446:468 | DONE dir | em 16 16 | 006424 | (2 bytes)   |         .byte 0c, { NC }             
5446:468 | DONE dir | em 16 16 |        |             |                 0c 01                    --   .
5446:469 | DONE dir | em 16 16 | 006426 | (6 bytes)   |         .word nt_native-compile, xt_compile-only, 00565a 
5446:469 | DONE dir | em 16 16 |        |             |                 0e 64 52 56 5a 56        --  . d R V Z V
5446:470 | DONE dir | em 16 16 | 00642c | (12 bytes)  |         .byte 63, 6f, 6d, 70, 69, 6c, 65, 2d, 6f, 6e, 6c, 79 
5446:470 | DONE dir | em 16 16 |        |             |                 63 6f 6d 70 69 6c 65 2d  --  c o m p i l e -
5446:470 | DONE dir | em 16 16 |        |             |                 6f 6e 6c 79              --  o n l y
5446:471 | DONE wsp | em 16 16 |        |             |
5446:472 | DONE lbl | em 16 16 | 006438 |             | nt_immediate                         
5446:473 | DONE dir | em 16 16 | 006438 | (2 bytes)   |         .byte 9, { NC }              
5446:473 | DONE dir | em 16 16 |        |             |                 09 01                    --  	 .
5446:474 | DONE dir | em 16 16 | 00643a | (6 bytes)   |         .word nt_compile-only, xt_immediate, 0059f6 
5446:474 | DONE dir | em 16 16 |        |             |                 24 64 ee 59 f6 59        --  $ d . Y . Y
5446:475 | DONE dir | em 16 16 | 006440 | (9 bytes)   |         .byte 69, 6d, 6d, 65, 64, 69, 61, 74, 65 
5446:475 | DONE dir | em 16 16 |        |             |                 69 6d 6d 65 64 69 61 74  --  i m m e d i a t
5446:475 | DONE dir | em 16 16 |        |             |                 65                       --  e
5446:476 | DONE wsp | em 16 16 |        |             |
5446:477 | DONE lbl | em 16 16 | 006449 |             | nt_postpone                          
5446:478 | DONE dir | em 16 16 | 006449 | (2 bytes)   |         .byte 8, { IM + CO }         
5446:478 | DONE dir | em 16 16 |        |             |                 08 06                    --  . .
5446:479 | DONE dir | em 16 16 | 00644b | (6 bytes)   |         .word nt_immediate, xt_postpone, 005cb3 
5446:479 | DONE dir | em 16 16 |        |             |                 38 64 80 5c b3 5c        --  8 d . \ . \
5446:480 | DONE dir | em 16 16 | 006451 | (8 bytes)   |         .byte 70, 6f, 73, 74, 70, 6f, 6e, 65 
5446:480 | DONE dir | em 16 16 |        |             |                 70 6f 73 74 70 6f 6e 65  --  p o s t p o n e
5446:480 | DONE dir | em 16 16 |        |             |                                          -- 
5446:481 | DONE wsp | em 16 16 |        |             |
5446:482 | DONE lbl | em 16 16 | 006459 |             | nt_rightbracket                      
5446:483 | DONE dir | em 16 16 | 006459 | (2 bytes)   |         .byte 1, { NC }              
5446:483 | DONE dir | em 16 16 |        |             |                 01 01                    --  . .
5446:484 | DONE dir | em 16 16 | 00645b | (6 bytes)   |         .word nt_postpone, xt_rightbracket, 00531d 
5446:484 | DONE dir | em 16 16 |        |             |                 49 64 18 53 1d 53        --  I d . S . S
5446:485 | DONE dir | em 16 16 | 006461 | (1 bytes)   |         .byte 5d                     
5446:485 | DONE dir | em 16 16 |        |             |                 5d                       --  ]
5446:486 | DONE wsp | em 16 16 |        |             |
5446:487 | DONE lbl | em 16 16 | 006462 |             | nt_leftbracket                       
5446:488 | DONE dir | em 16 16 | 006462 | (2 bytes)   |         .byte 1, { IM + CO }         
5446:488 | DONE dir | em 16 16 |        |             |                 01 06                    --  . .
5446:489 | DONE dir | em 16 16 | 006464 | (6 bytes)   |         .word nt_rightbracket, xt_leftbracket, 005317 
5446:489 | DONE dir | em 16 16 |        |             |                 59 64 15 53 17 53        --  Y d . S . S
5446:490 | DONE dir | em 16 16 | 00646a | (1 bytes)   |         .byte 5b                     
5446:490 | DONE dir | em 16 16 |        |             |                 5b                       --  [
5446:491 | DONE wsp | em 16 16 |        |             |
5446:492 | DONE lbl | em 16 16 | 00646b |             | nt_latestnt                          
5446:493 | DONE dir | em 16 16 | 00646b | (2 bytes)   |         .byte 8, { NC }              
5446:493 | DONE dir | em 16 16 |        |             |                 08 01                    --  . .
5446:494 | DONE dir | em 16 16 | 00646d | (6 bytes)   |         .word nt_leftbracket, xt_latestnt, 005a4b 
5446:494 | DONE dir | em 16 16 |        |             |                 62 64 44 5a 4b 5a        --  b d D Z K Z
5446:495 | DONE dir | em 16 16 | 006473 | (8 bytes)   |         .byte 6c, 61, 74, 65, 73, 74, 6e, 74 
5446:495 | DONE dir | em 16 16 |        |             |                 6c 61 74 65 73 74 6e 74  --  l a t e s t n t
5446:495 | DONE dir | em 16 16 |        |             |                                          -- 
5446:496 | DONE wsp | em 16 16 |        |             |
5446:497 | DONE lbl | em 16 16 | 00647b |             | nt_latestxt                          
5446:498 | DONE dir | em 16 16 | 00647b | (2 bytes)   |         .byte 8, { NC }              
5446:498 | DONE dir | em 16 16 |        |             |                 08 01                    --  . .
5446:499 | DONE dir | em 16 16 | 00647d | (6 bytes)   |         .word nt_latestnt, xt_latestxt, 005a5b 
5446:499 | DONE dir | em 16 16 |        |             |                 6b 64 4c 5a 5b 5a        --  k d L Z [ Z
5446:500 | DONE dir | em 16 16 | 006483 | (8 bytes)   |         .byte 6c, 61, 74, 65, 73, 74, 78, 74 
5446:500 | DONE dir | em 16 16 |        |             |                 6c 61 74 65 73 74 78 74  --  l a t e s t x t
5446:500 | DONE dir | em 16 16 |        |             |                                          -- 
5446:501 | DONE wsp | em 16 16 |        |             |
5446:502 | DONE lbl | em 16 16 | 00648b |             | nt_dtrailing                         
5446:503 | DONE dir | em 16 16 | 00648b | (2 bytes)   |         .byte 9, { NC }              
5446:503 | DONE dir | em 16 16 |        |             |                 09 01                    --  	 .
5446:504 | DONE dir | em 16 16 | 00648d | (6 bytes)   |         .word nt_latestxt, xt_dtrailing, 00535c 
5446:504 | DONE dir | em 16 16 |        |             |                 7b 64 46 53 5c 53        --  { d F S \ S
5446:505 | DONE dir | em 16 16 | 006493 | (9 bytes)   |         .byte 2d, 74, 72, 61, 69, 6c, 69, 6e, 67 
5446:505 | DONE dir | em 16 16 |        |             |                 2d 74 72 61 69 6c 69 6e  --  - t r a i l i n
5446:505 | DONE dir | em 16 16 |        |             |                 67                       --  g
5446:506 | DONE wsp | em 16 16 |        |             |
5446:507 | DONE lbl | em 16 16 | 00649c |             | nt_slashstring                       
5446:508 | DONE dir | em 16 16 | 00649c | (2 bytes)   |         .byte 7, { NC }              
5446:508 | DONE dir | em 16 16 |        |             |                 07 01                    --  . .
5446:509 | DONE dir | em 16 16 | 00649e | (6 bytes)   |         .word nt_dtrailing, xt_slashstring, 0051d9 
5446:509 | DONE dir | em 16 16 |        |             |                 8b 64 c8 51 d9 51        --  . d . Q . Q
5446:510 | DONE dir | em 16 16 | 0064a4 | (7 bytes)   |         .byte 2f, 73, 74, 72, 69, 6e, 67 
5446:510 | DONE dir | em 16 16 |        |             |                 2f 73 74 72 69 6e 67     --  / s t r i n g
5446:511 | DONE wsp | em 16 16 |        |             |
5446:512 | DONE lbl | em 16 16 | 0064ab |             | nt_zbranch                           
5446:513 | DONE dir | em 16 16 | 0064ab | (2 bytes)   |         .byte 7, { IM + CO }         
5446:513 | DONE dir | em 16 16 |        |             |                 07 06                    --  . .
5446:514 | DONE dir | em 16 16 | 0064ad | (6 bytes)   |         .word nt_slashstring, xt_zbranch, 0053a6 
5446:514 | DONE dir | em 16 16 |        |             |                 9c 64 a0 53 a6 53        --  . d . S . S
5446:515 | DONE dir | em 16 16 | 0064b3 | (7 bytes)   |         .byte 30, 62, 72, 61, 6e, 63, 68 
5446:515 | DONE dir | em 16 16 |        |             |                 30 62 72 61 6e 63 68     --  0 b r a n c h
5446:516 | DONE wsp | em 16 16 |        |             |
5446:517 | DONE lbl | em 16 16 | 0064ba |             | nt_branch                            
5446:518 | DONE dir | em 16 16 | 0064ba | (2 bytes)   |         .byte 6, { IM + CO }         
5446:518 | DONE dir | em 16 16 |        |             |                 06 06                    --  . .
5446:519 | DONE dir | em 16 16 | 0064bc | (6 bytes)   |         .word nt_zbranch, xt_branch, 0055ba 
5446:519 | DONE dir | em 16 16 |        |             |                 ab 64 b4 55 ba 55        --  . d . U . U
5446:520 | DONE dir | em 16 16 | 0064c2 | (6 bytes)   |         .byte 62, 72, 61, 6e, 63, 68 
5446:520 | DONE dir | em 16 16 |        |             |                 62 72 61 6e 63 68        --  b r a n c h
5446:521 | DONE wsp | em 16 16 |        |             |
5446:522 | DONE lbl | em 16 16 | 0064c8 |             | nt_again                             
5446:523 | DONE dir | em 16 16 | 0064c8 | (2 bytes)   |         .byte 5, { IM + NC + CO }    
5446:523 | DONE dir | em 16 16 |        |             |                 05 07                    --  . .
5446:524 | DONE dir | em 16 16 | 0064ca | (6 bytes)   |         .word nt_branch, xt_again, 00552f 
5446:524 | DONE dir | em 16 16 |        |             |                 ba 64 1a 55 2f 55        --  . d . U / U
5446:525 | DONE dir | em 16 16 | 0064d0 | (5 bytes)   |         .byte 61, 67, 61, 69, 6e     
5446:525 | DONE dir | em 16 16 |        |             |                 61 67 61 69 6e           --  a g a i n
5446:526 | DONE wsp | em 16 16 |        |             |
5446:527 | DONE lbl | em 16 16 | 0064d5 |             | nt_begin                             
5446:528 | DONE dir | em 16 16 | 0064d5 | (2 bytes)   |         .byte 5, { IM + NC + CO }    
5446:528 | DONE dir | em 16 16 |        |             |                 05 07                    --  . .
5446:529 | DONE dir | em 16 16 | 0064d7 | (6 bytes)   |         .word nt_again, xt_begin, 0055a1 
5446:529 | DONE dir | em 16 16 |        |             |                 c8 64 9b 55 a1 55        --  . d . U . U
5446:530 | DONE dir | em 16 16 | 0064dd | (5 bytes)   |         .byte 62, 65, 67, 69, 6e     
5446:530 | DONE dir | em 16 16 |        |             |                 62 65 67 69 6e           --  b e g i n
5446:531 | DONE wsp | em 16 16 |        |             |
5446:532 | DONE lbl | em 16 16 | 0064e2 |             | nt_compilecomma                      
5446:533 | DONE dir | em 16 16 | 0064e2 | (2 bytes)   |         .byte 08, { CO }             
5446:533 | DONE dir | em 16 16 |        |             |                 08 04                    --  . .
5446:534 | DONE dir | em 16 16 | 0064e4 | (6 bytes)   |         .word nt_begin, xt_compilecomma, 0056e9 
5446:534 | DONE dir | em 16 16 |        |             |                 d5 64 5b 56 e9 56        --  . d [ V . V
5446:535 | DONE dir | em 16 16 | 0064ea | (8 bytes)   |         .byte 63, 6f, 6d, 70, 69, 6c, 65, 2c 
5446:535 | DONE dir | em 16 16 |        |             |                 63 6f 6d 70 69 6c 65 2c  --  c o m p i l e ,
5446:535 | DONE dir | em 16 16 |        |             |                                          -- 
5446:536 | DONE wsp | em 16 16 |        |             |
5446:537 | DONE lbl | em 16 16 | 0064f2 |             | nt_semicolon                         
5446:538 | DONE dir | em 16 16 | 0064f2 | (2 bytes)   |         .byte 1, { CO + IM }         
5446:538 | DONE dir | em 16 16 |        |             |                 01 06                    --  . .
5446:539 | DONE dir | em 16 16 | 0064f4 | (6 bytes)   |         .word nt_compilecomma, xt_semicolon, 00528b 
5446:539 | DONE dir | em 16 16 |        |             |                 e2 64 73 52 8b 52        --  . d s R . R
5446:540 | DONE dir | em 16 16 | 0064fa | (1 bytes)   |         .byte 3b                     
5446:540 | DONE dir | em 16 16 |        |             |                 3b                       --  ;
5446:541 | DONE wsp | em 16 16 |        |             |
5446:542 | DONE lbl | em 16 16 | 0064fb |             | nt_colon                             
5446:543 | DONE dir | em 16 16 | 0064fb | (2 bytes)   |         .byte 1, 0                   
5446:543 | DONE dir | em 16 16 |        |             |                 01 00                    --  . .
5446:544 | DONE dir | em 16 16 | 0064fd | (6 bytes)   |         .word nt_semicolon, xt_colon, 005272 
5446:544 | DONE dir | em 16 16 |        |             |                 f2 64 51 52 72 52        --  . d Q R r R
5446:545 | DONE dir | em 16 16 | 006503 | (1 bytes)   |         .byte 3a                     
5446:545 | DONE dir | em 16 16 |        |             |                 3a                       --  :
5446:546 | DONE wsp | em 16 16 |        |             |
5446:547 | DONE lbl | em 16 16 | 006504 |             | nt_allot                             
5446:548 | DONE dir | em 16 16 | 006504 | (2 bytes)   |         .byte 5, { NC }              
5446:548 | DONE dir | em 16 16 |        |             |                 05 01                    --  . .
5446:549 | DONE dir | em 16 16 | 006506 | (6 bytes)   |         .word nt_colon, xt_allot, 00555c 
5446:549 | DONE dir | em 16 16 |        |             |                 fb 64 34 55 5c 55        --  . d 4 U \ U
5446:550 | DONE dir | em 16 16 | 00650c | (5 bytes)   |         .byte 61, 6c, 6c, 6f, 74     
5446:550 | DONE dir | em 16 16 |        |             |                 61 6c 6c 6f 74           --  a l l o t
5446:551 | DONE wsp | em 16 16 |        |             |
5446:552 | DONE lbl | em 16 16 | 006511 |             | nt_defer                             
5446:553 | DONE dir | em 16 16 | 006511 | (2 bytes)   |         .byte 5, { NC }              
5446:553 | DONE dir | em 16 16 |        |             |                 05 01                    --  . .
5446:554 | DONE dir | em 16 16 | 006513 | (6 bytes)   |         .word nt_allot, xt_defer, 0057b8 
5446:554 | DONE dir | em 16 16 |        |             |                 04 65 9e 57 b8 57        --  . e . W . W
5446:555 | DONE dir | em 16 16 | 006519 | (5 bytes)   |         .byte 64, 65, 66, 65, 72     
5446:555 | DONE dir | em 16 16 |        |             |                 64 65 66 65 72           --  d e f e r
5446:556 | DONE wsp | em 16 16 |        |             |
5446:557 | DONE lbl | em 16 16 | 00651e |             | nt_tobody                            
5446:558 | DONE dir | em 16 16 | 00651e | (2 bytes)   |         .byte 5, { NC }              
5446:558 | DONE dir | em 16 16 |        |             |                 05 01                    --  . .
5446:559 | DONE dir | em 16 16 | 006520 | (6 bytes)   |         .word nt_defer, xt_tobody, 00515a 
5446:559 | DONE dir | em 16 16 |        |             |                 11 65 37 51 5a 51        --  . e 7 Q Z Q
5446:560 | DONE dir | em 16 16 | 006526 | (5 bytes)   |         .byte 3e, 62, 6f, 64, 79     
5446:560 | DONE dir | em 16 16 |        |             |                 3e 62 6f 64 79           --  > b o d y
5446:561 | DONE wsp | em 16 16 |        |             |
5446:562 | DONE lbl | em 16 16 | 00652b |             | nt_does                              
5446:563 | DONE dir | em 16 16 | 00652b | (2 bytes)   |         .byte 5, { IM + CO }         
5446:563 | DONE dir | em 16 16 |        |             |                 05 06                    --  . .
5446:564 | DONE dir | em 16 16 | 00652d | (6 bytes)   |         .word nt_tobody, xt_does, 00585d 
5446:564 | DONE dir | em 16 16 |        |             |                 1e 65 51 58 5d 58        --  . e Q X ] X
5446:565 | DONE dir | em 16 16 | 006533 | (5 bytes)   |         .byte 64, 6f, 65, 73, 3e     
5446:565 | DONE dir | em 16 16 |        |             |                 64 6f 65 73 3e           --  d o e s >
5446:566 | DONE wsp | em 16 16 |        |             |
5446:567 | DONE lbl | em 16 16 | 006538 |             | nt_create                            
5446:568 | DONE dir | em 16 16 | 006538 | (2 bytes)   |         .byte 6, 0                   
5446:568 | DONE dir | em 16 16 |        |             |                 06 00                    --  . .
5446:569 | DONE dir | em 16 16 | 00653a | (6 bytes)   |         .word nt_does, xt_create, 00579d 
5446:569 | DONE dir | em 16 16 |        |             |                 2b 65 2e 57 9d 57        --  + e . W . W
5446:570 | DONE dir | em 16 16 | 006540 | (6 bytes)   |         .byte 63, 72, 65, 61, 74, 65 
5446:570 | DONE dir | em 16 16 |        |             |                 63 72 65 61 74 65        --  c r e a t e
5446:571 | DONE wsp | em 16 16 |        |             |
5446:572 | DONE lbl | em 16 16 | 006546 |             | nt_name-string                       
5446:573 | DONE dir | em 16 16 | 006546 | (2 bytes)   |         .byte 0b, { NC }             
5446:573 | DONE dir | em 16 16 |        |             |                 0b 01                    --   .
5446:574 | DONE dir | em 16 16 | 006548 | (6 bytes)   |         .word nt_create, xt_name-string, 005b2c 
5446:574 | DONE dir | em 16 16 |        |             |                 38 65 1c 5b 2c 5b        --  8 e . [ , [
5446:575 | DONE dir | em 16 16 | 00654e | (11 bytes)  |         .byte 6e, 61, 6d, 65, 3e, 73, 74, 72, 69, 6e, 67 
5446:575 | DONE dir | em 16 16 |        |             |                 6e 61 6d 65 3e 73 74 72  --  n a m e > s t r
5446:575 | DONE dir | em 16 16 |        |             |                 69 6e 67                 --  i n g
5446:576 | DONE wsp | em 16 16 |        |             |
5446:577 | DONE lbl | em 16 16 | 006559 |             | nt_2dup                              
5446:578 | DONE dir | em 16 16 | 006559 | (2 bytes)   |         .byte 4, { NC }              
5446:578 | DONE dir | em 16 16 |        |             |                 04 01                    --  . .
5446:579 | DONE dir | em 16 16 | 00655b | (6 bytes)   |         .word nt_name-string, xt_2dup, 0053f8 
5446:579 | DONE dir | em 16 16 |        |             |                 46 65 ee 53 f8 53        --  F e . S . S
5446:580 | DONE dir | em 16 16 | 006561 | (4 bytes)   |         .byte 32, 64, 75, 70         
5446:580 | DONE dir | em 16 16 |        |             |                 32 64 75 70              --  2 d u p
5446:581 | DONE wsp | em 16 16 |        |             |
5446:582 | DONE lbl | em 16 16 | 006565 |             | nt_abs                               
5446:583 | DONE dir | em 16 16 | 006565 | (2 bytes)   |         .byte 3, { NC }              
5446:583 | DONE dir | em 16 16 |        |             |                 03 01                    --  . .
5446:584 | DONE dir | em 16 16 | 006567 | (6 bytes)   |         .word nt_2dup, xt_abs, 00548a 
5446:584 | DONE dir | em 16 16 |        |             |                 59 65 82 54 8a 54        --  Y e . T . T
5446:585 | DONE dir | em 16 16 | 00656d | (3 bytes)   |         .byte 61, 62, 73             
5446:585 | DONE dir | em 16 16 |        |             |                 61 62 73                 --  a b s
5446:586 | DONE wsp | em 16 16 |        |             |
5446:587 | DONE lbl | em 16 16 | 006570 |             | nt_state                             
5446:588 | DONE dir | em 16 16 | 006570 | (2 bytes)   |         .byte 5, { NC }              
5446:588 | DONE dir | em 16 16 |        |             |                 05 01                    --  . .
5446:589 | DONE dir | em 16 16 | 006572 | (6 bytes)   |         .word nt_abs, xt_state, 005e57 
5446:589 | DONE dir | em 16 16 |        |             |                 65 65 50 5e 57 5e        --  e e P ^ W ^
5446:590 | DONE dir | em 16 16 | 006578 | (5 bytes)   |         .byte 73, 74, 61, 74, 65     
5446:590 | DONE dir | em 16 16 |        |             |                 73 74 61 74 65           --  s t a t e
5446:591 | DONE wsp | em 16 16 |        |             |
5446:592 | DONE lbl | em 16 16 | 00657d |             | nt_to-in                             
5446:593 | DONE dir | em 16 16 | 00657d | (2 bytes)   |         .byte 3, { NC }              
5446:593 | DONE dir | em 16 16 |        |             |                 03 01                    --  . .
5446:594 | DONE dir | em 16 16 | 00657f | (6 bytes)   |         .word nt_state, xt_to-in, 005162 
5446:594 | DONE dir | em 16 16 |        |             |                 70 65 5b 51 62 51        --  p e [ Q b Q
5446:595 | DONE dir | em 16 16 | 006585 | (3 bytes)   |         .byte 3e, 69, 6e             
5446:595 | DONE dir | em 16 16 |        |             |                 3e 69 6e                 --  > i n
5446:596 | DONE wsp | em 16 16 |        |             |
5446:597 | DONE lbl | em 16 16 | 006588 |             | nt_source                            
5446:598 | DONE dir | em 16 16 | 006588 | (2 bytes)   |         .byte 6, { NC }              
5446:598 | DONE dir | em 16 16 |        |             |                 06 01                    --  . .
5446:599 | DONE dir | em 16 16 | 00658a | (6 bytes)   |         .word nt_to-in, xt_source, 005e29 
5446:599 | DONE dir | em 16 16 |        |             |                 7d 65 1d 5e 29 5e        --  } e . ^ ) ^
5446:600 | DONE dir | em 16 16 | 006590 | (6 bytes)   |         .byte 73, 6f, 75, 72, 63, 65 
5446:600 | DONE dir | em 16 16 |        |             |                 73 6f 75 72 63 65        --  s o u r c e
5446:601 | DONE wsp | em 16 16 |        |             |
5446:602 | DONE lbl | em 16 16 | 006596 |             | nt_depth                             
5446:603 | DONE dir | em 16 16 | 006596 | (2 bytes)   |         .byte 5, { NC }              
5446:603 | DONE dir | em 16 16 |        |             |                 05 01                    --  . .
5446:604 | DONE dir | em 16 16 | 006598 | (6 bytes)   |         .word nt_source, xt_depth, 00583c 
5446:604 | DONE dir | em 16 16 |        |             |                 88 65 2e 58 3c 58        --  . e . X < X
5446:605 | DONE dir | em 16 16 | 00659e | (5 bytes)   |         .byte 64, 65, 70, 74, 68     
5446:605 | DONE dir | em 16 16 |        |             |                 64 65 70 74 68           --  d e p t h
5446:606 | DONE wsp | em 16 16 |        |             |
5446:607 | DONE lbl | em 16 16 | 0065a3 |             | nt_to                                
5446:608 | DONE dir | em 16 16 | 0065a3 | (2 bytes)   |         .byte 2, { NC }              
5446:608 | DONE dir | em 16 16 |        |             |                 02 01                    --  . .
5446:609 | DONE dir | em 16 16 | 0065a5 | (6 bytes)   |         .word nt_depth, xt_to, 005e67 
5446:609 | DONE dir | em 16 16 |        |             |                 96 65 5e 5e 67 5e        --  . e ^ ^ g ^
5446:610 | DONE dir | em 16 16 | 0065ab | (2 bytes)   |         .byte 74, 6f                 
5446:610 | DONE dir | em 16 16 |        |             |                 74 6f                    --  t o
5446:611 | DONE wsp | em 16 16 |        |             |
5446:612 | DONE lbl | em 16 16 | 0065ad |             | nt_value                             
5446:613 | DONE dir | em 16 16 | 0065ad | (2 bytes)   |         .byte 5, { NC }              uses routines of CONSTANT
5446:613 | DONE dir | em 16 16 |        |             |                 05 01                    --  . .
5446:614 | DONE dir | em 16 16 | 0065af | (6 bytes)   |         .word nt_to, xt_constant, 005718 
5446:614 | DONE dir | em 16 16 |        |             |                 a3 65 ea 56 18 57        --  . e . V . W
5446:615 | DONE dir | em 16 16 | 0065b5 | (5 bytes)   |         .byte 76, 61, 6c, 75, 65     
5446:615 | DONE dir | em 16 16 |        |             |                 76 61 6c 75 65           --  v a l u e
5446:616 | DONE wsp | em 16 16 |        |             |
5446:617 | DONE lbl | em 16 16 | 0065ba |             | nt_constant                          
5446:618 | DONE dir | em 16 16 | 0065ba | (2 bytes)   |         .byte 8, { NC }              
5446:618 | DONE dir | em 16 16 |        |             |                 08 01                    --  . .
5446:619 | DONE dir | em 16 16 | 0065bc | (6 bytes)   |         .word nt_value, xt_constant, 005718 
5446:619 | DONE dir | em 16 16 |        |             |                 ad 65 ea 56 18 57        --  . e . V . W
5446:620 | DONE dir | em 16 16 | 0065c2 | (8 bytes)   |         .byte 63, 6f, 6e, 73, 74, 61, 6e, 74 
5446:620 | DONE dir | em 16 16 |        |             |                 63 6f 6e 73 74 61 6e 74  --  c o n s t a n t
5446:620 | DONE dir | em 16 16 |        |             |                                          -- 
5446:621 | DONE wsp | em 16 16 |        |             |
5446:622 | DONE lbl | em 16 16 | 0065ca |             | nt_variable                          
5446:623 | DONE dir | em 16 16 | 0065ca | (2 bytes)   |         .byte 8, { NC }              
5446:623 | DONE dir | em 16 16 |        |             |                 08 01                    --  . .
5446:624 | DONE dir | em 16 16 | 0065cc | (6 bytes)   |         .word nt_constant, xt_variable, 005f92 
5446:624 | DONE dir | em 16 16 |        |             |                 ba 65 83 5f 92 5f        --  . e . _ . _
5446:625 | DONE dir | em 16 16 | 0065d2 | (8 bytes)   |         .byte 76, 61, 72, 69, 61, 62, 6c, 65 
5446:625 | DONE dir | em 16 16 |        |             |                 76 61 72 69 61 62 6c 65  --  v a r i a b l e
5446:625 | DONE dir | em 16 16 |        |             |                                          -- 
5446:626 | DONE wsp | em 16 16 |        |             |
5446:627 | DONE lbl | em 16 16 | 0065da |             | nt_tick                              
5446:628 | DONE dir | em 16 16 | 0065da | (2 bytes)   |         .byte 1, { NC }              
5446:628 | DONE dir | em 16 16 |        |             |                 01 01                    --  . .
5446:629 | DONE dir | em 16 16 | 0065dc | (6 bytes)   |         .word nt_variable, xt_tick, 005464 
5446:629 | DONE dir | em 16 16 |        |             |                 ca 65 49 54 64 54        --  . e I T d T
5446:630 | DONE dir | em 16 16 | 0065e2 | (1 bytes)   |         .byte 27                     hex for "'"
5446:630 | DONE dir | em 16 16 |        |             |                 27                       --  '
5446:631 | DONE wsp | em 16 16 |        |             |
5446:632 | DONE lbl | em 16 16 | 0065e3 |             | nt_move                              
5446:633 | DONE dir | em 16 16 | 0065e3 | (2 bytes)   |         .byte 4, { NC }              
5446:633 | DONE dir | em 16 16 |        |             |                 04 01                    --  . .
5446:634 | DONE dir | em 16 16 | 0065e5 | (6 bytes)   |         .word nt_tick, xt_move, 005b12 
5446:634 | DONE dir | em 16 16 |        |             |                 da 65 ff 5a 12 5b        --  . e . Z . [
5446:635 | DONE dir | em 16 16 | 0065eb | (4 bytes)   |         .byte 6d, 6f, 76, 65         
5446:635 | DONE dir | em 16 16 |        |             |                 6d 6f 76 65              --  m o v e
5446:636 | DONE wsp | em 16 16 |        |             |
5446:637 | DONE lbl | em 16 16 | 0065ef |             | nt_min                               
5446:638 | DONE dir | em 16 16 | 0065ef | (2 bytes)   |         .byte 3, { NC }              
5446:638 | DONE dir | em 16 16 |        |             |                 03 01                    --  . .
5446:639 | DONE dir | em 16 16 | 0065f1 | (6 bytes)   |         .word nt_move, xt_min, 005afe 
5446:639 | DONE dir | em 16 16 |        |             |                 e3 65 ec 5a fe 5a        --  . e . Z . Z
5446:640 | DONE dir | em 16 16 | 0065f7 | (3 bytes)   |         .byte 6d, 69, 6e             
5446:640 | DONE dir | em 16 16 |        |             |                 6d 69 6e                 --  m i n
5446:641 | DONE wsp | em 16 16 |        |             |
5446:642 | DONE lbl | em 16 16 | 0065fa |             | nt_max                               
5446:643 | DONE dir | em 16 16 | 0065fa | (2 bytes)   |         .byte 3, { NC }              
5446:643 | DONE dir | em 16 16 |        |             |                 03 01                    --  . .
5446:644 | DONE dir | em 16 16 | 0065fc | (6 bytes)   |         .word nt_min, xt_max, 005aeb 
5446:644 | DONE dir | em 16 16 |        |             |                 ef 65 d9 5a eb 5a        --  . e . Z . Z
5446:645 | DONE dir | em 16 16 | 006602 | (3 bytes)   |         .byte 6d, 61, 78             
5446:645 | DONE dir | em 16 16 |        |             |                 6d 61 78                 --  m a x
5446:646 | DONE wsp | em 16 16 |        |             |
5446:647 | DONE lbl | em 16 16 | 006605 |             | nt_negate                            
5446:648 | DONE dir | em 16 16 | 006605 | (2 bytes)   |         .byte 6, { NC }              
5446:648 | DONE dir | em 16 16 |        |             |                 06 01                    --  . .
5446:649 | DONE dir | em 16 16 | 006607 | (6 bytes)   |         .word nt_max, xt_negate, 005b44 
5446:649 | DONE dir | em 16 16 |        |             |                 fa 65 3e 5b 44 5b        --  . e > [ D [
5446:650 | DONE dir | em 16 16 | 00660d | (6 bytes)   |         .byte 6e, 65, 67, 61, 74, 65 
5446:650 | DONE dir | em 16 16 |        |             |                 6e 65 67 61 74 65        --  n e g a t e
5446:651 | DONE wsp | em 16 16 |        |             |
5446:652 | DONE lbl | em 16 16 | 006613 |             | nt_invert                            
5446:653 | DONE dir | em 16 16 | 006613 | (2 bytes)   |         .byte 6, { NC }              
5446:653 | DONE dir | em 16 16 |        |             |                 06 01                    --  . .
5446:654 | DONE dir | em 16 16 | 006615 | (6 bytes)   |         .word nt_negate, xt_invert, 005a28 
5446:654 | DONE dir | em 16 16 |        |             |                 05 66 23 5a 28 5a        --  . f # Z ( Z
5446:655 | DONE dir | em 16 16 | 00661b | (6 bytes)   |         .byte 69, 6e, 76, 65, 72, 74 
5446:655 | DONE dir | em 16 16 |        |             |                 69 6e 76 65 72 74        --  i n v e r t
5446:656 | DONE wsp | em 16 16 |        |             |
5446:657 | DONE lbl | em 16 16 | 006621 |             | nt_char                              
5446:658 | DONE dir | em 16 16 | 006621 | (2 bytes)   |         .byte 4, { NC }              
5446:658 | DONE dir | em 16 16 |        |             |                 04 01                    --  . .
5446:659 | DONE dir | em 16 16 | 006623 | (6 bytes)   |         .word nt_invert, xt_char, 005613 
5446:659 | DONE dir | em 16 16 |        |             |                 13 66 fc 55 13 56        --  . f . U . V
5446:660 | DONE dir | em 16 16 | 006629 | (4 bytes)   |         .byte 63, 68, 61, 72         
5446:660 | DONE dir | em 16 16 |        |             |                 63 68 61 72              --  c h a r
5446:661 | DONE wsp | em 16 16 |        |             |
5446:662 | DONE lbl | em 16 16 | 00662d |             | nt_rshift                            
5446:663 | DONE dir | em 16 16 | 00662d | (2 bytes)   |         .byte 6, { NC }              
5446:663 | DONE dir | em 16 16 |        |             |                 06 01                    --  . .
5446:664 | DONE dir | em 16 16 | 00662f | (6 bytes)   |         .word nt_char, xt_rshift, 005d0b 
5446:664 | DONE dir | em 16 16 |        |             |                 21 66 f8 5c 0b 5d        --  ! f . \  ]
5446:665 | DONE dir | em 16 16 | 006635 | (6 bytes)   |         .byte 72, 73, 68, 69, 66, 74 
5446:665 | DONE dir | em 16 16 |        |             |                 72 73 68 69 66 74        --  r s h i f t
5446:666 | DONE wsp | em 16 16 |        |             |
5446:667 | DONE lbl | em 16 16 | 00663b |             | nt_xor                               
5446:668 | DONE dir | em 16 16 | 00663b | (2 bytes)   |         .byte 3, { NC }              
5446:668 | DONE dir | em 16 16 |        |             |                 03 01                    --  . .
5446:669 | DONE dir | em 16 16 | 00663d | (6 bytes)   |         .word nt_rshift, xt_xor, 006009 
5446:669 | DONE dir | em 16 16 |        |             |                 2d 66 03 60 09 60        --  - f . ` 	 `
5446:670 | DONE dir | em 16 16 | 006643 | (3 bytes)   |         .byte 78, 6f, 72             
5446:670 | DONE dir | em 16 16 |        |             |                 78 6f 72                 --  x o r
5446:671 | DONE wsp | em 16 16 |        |             |
5446:672 | DONE lbl | em 16 16 | 006646 |             | nt_or                                
5446:673 | DONE dir | em 16 16 | 006646 | (2 bytes)   |         .byte 2, { NC }              
5446:673 | DONE dir | em 16 16 |        |             |                 02 01                    --  . .
5446:674 | DONE dir | em 16 16 | 006648 | (6 bytes)   |         .word nt_xor, xt_or, 005bd2  
5446:674 | DONE dir | em 16 16 |        |             |                 3b 66 cc 5b d2 5b        --  ; f . [ . [
5446:675 | DONE dir | em 16 16 | 00664e | (2 bytes)   |         .byte 6f, 72                 
5446:675 | DONE dir | em 16 16 |        |             |                 6f 72                    --  o r
5446:676 | DONE wsp | em 16 16 |        |             |
5446:677 | DONE lbl | em 16 16 | 006650 |             | nt_and                               
5446:678 | DONE dir | em 16 16 | 006650 | (2 bytes)   |         .byte 3, { NC }              
5446:678 | DONE dir | em 16 16 |        |             |                 03 01                    --  . .
5446:679 | DONE dir | em 16 16 | 006652 | (6 bytes)   |         .word nt_or, xt_and, 005563  
5446:679 | DONE dir | em 16 16 |        |             |                 46 66 5d 55 63 55        --  F f ] U c U
5446:680 | DONE dir | em 16 16 | 006658 | (3 bytes)   |         .byte 61, 6e, 64             
5446:680 | DONE dir | em 16 16 |        |             |                 61 6e 64                 --  a n d
5446:681 | DONE wsp | em 16 16 |        |             |
5446:682 | DONE lbl | em 16 16 | 00665b |             | nt_lshift                            
5446:683 | DONE dir | em 16 16 | 00665b | (2 bytes)   |         .byte 6, { NC }              
5446:683 | DONE dir | em 16 16 |        |             |                 06 01                    --  . .
5446:684 | DONE dir | em 16 16 | 00665d | (6 bytes)   |         .word nt_and, xt_lshift, 005a8e 
5446:684 | DONE dir | em 16 16 |        |             |                 50 66 7b 5a 8e 5a        --  P f { Z . Z
5446:685 | DONE dir | em 16 16 | 006663 | (6 bytes)   |         .byte 6c, 73, 68, 69, 66, 74 
5446:685 | DONE dir | em 16 16 |        |             |                 6c 73 68 69 66 74        --  l s h i f t
5446:686 | DONE wsp | em 16 16 |        |             |
5446:687 | DONE lbl | em 16 16 | 006669 |             | nt_plusstore                         
5446:688 | DONE dir | em 16 16 | 006669 | (2 bytes)   |         .byte 2, { NC }              
5446:688 | DONE dir | em 16 16 |        |             |                 02 01                    --  . .
5446:689 | DONE dir | em 16 16 | 00666b | (6 bytes)   |         .word nt_lshift, xt_plusstore, 005c7f 
5446:689 | DONE dir | em 16 16 |        |             |                 5b 66 70 5c 7f 5c        --  [ f p \ . \
5446:690 | DONE dir | em 16 16 | 006671 | (2 bytes)   |         .byte 2b, 21                 
5446:690 | DONE dir | em 16 16 |        |             |                 2b 21                    --  + !
5446:691 | DONE wsp | em 16 16 |        |             |
5446:692 | DONE lbl | em 16 16 | 006673 |             | nt_c-comma                           
5446:693 | DONE dir | em 16 16 | 006673 | (2 bytes)   |         .byte 2, { NC }              
5446:693 | DONE dir | em 16 16 |        |             |                 02 01                    --  . .
5446:694 | DONE dir | em 16 16 | 006675 | (6 bytes)   |         .word nt_plusstore, xt_c-comma, 0055dc 
5446:694 | DONE dir | em 16 16 |        |             |                 69 66 cf 55 dc 55        --  i f . U . U
5446:695 | DONE dir | em 16 16 | 00667b | (2 bytes)   |         .byte 63, 2c                 
5446:695 | DONE dir | em 16 16 |        |             |                 63 2c                    --  c ,
5446:696 | DONE wsp | em 16 16 |        |             |
5446:697 | DONE lbl | em 16 16 | 00667d |             | nt_c-fetch                           
5446:698 | DONE dir | em 16 16 | 00667d | (2 bytes)   |         .byte 2, { NC }              
5446:698 | DONE dir | em 16 16 |        |             |                 02 01                    --  . .
5446:699 | DONE dir | em 16 16 | 00667f | (6 bytes)   |         .word nt_c-comma, xt_c-fetch, 0055e8 
5446:699 | DONE dir | em 16 16 |        |             |                 73 66 dd 55 e8 55        --  s f . U . U
5446:700 | DONE dir | em 16 16 | 006685 | (2 bytes)   |         .byte 63, 40                 
5446:700 | DONE dir | em 16 16 |        |             |                 63 40                    --  c @
5446:701 | DONE wsp | em 16 16 |        |             |
5446:702 | DONE lbl | em 16 16 | 006687 |             | nt_c-store                           
5446:703 | DONE dir | em 16 16 | 006687 | (2 bytes)   |         .byte 2, { NC }              
5446:703 | DONE dir | em 16 16 |        |             |                 02 01                    --  . .
5446:704 | DONE dir | em 16 16 | 006689 | (6 bytes)   |         .word nt_c-fetch, xt_c-store, 0055f8 
5446:704 | DONE dir | em 16 16 |        |             |                 7d 66 e9 55 f8 55        --  } f . U . U
5446:705 | DONE dir | em 16 16 | 00668f | (2 bytes)   |         .byte 63, 21                 
5446:705 | DONE dir | em 16 16 |        |             |                 63 21                    --  c !
5446:706 | DONE wsp | em 16 16 |        |             |
5446:707 | DONE lbl | em 16 16 | 006691 |             | nt_two-star                          
5446:708 | DONE dir | em 16 16 | 006691 | (2 bytes)   |         .byte 2, { NC }              
5446:708 | DONE dir | em 16 16 |        |             |                 02 01                    --  . .
5446:709 | DONE dir | em 16 16 | 006693 | (6 bytes)   |         .word nt_c-store, xt_two-star, 0053d5 
5446:709 | DONE dir | em 16 16 |        |             |                 87 66 d2 53 d5 53        --  . f . S . S
5446:710 | DONE dir | em 16 16 | 006699 | (2 bytes)   |         .byte 32, 2a                 
5446:710 | DONE dir | em 16 16 |        |             |                 32 2a                    --  2 *
5446:711 | DONE wsp | em 16 16 |        |             |
5446:712 | DONE lbl | em 16 16 | 00669b |             | nt_minus                             
5446:713 | DONE dir | em 16 16 | 00669b | (2 bytes)   |         .byte 1, { NC }              
5446:713 | DONE dir | em 16 16 |        |             |                 01 01                    --  . .
5446:714 | DONE dir | em 16 16 | 00669d | (6 bytes)   |         .word nt_two-star, xt_minus, 00533c 
5446:714 | DONE dir | em 16 16 |        |             |                 91 66 32 53 3c 53        --  . f 2 S < S
5446:715 | DONE dir | em 16 16 | 0066a3 | (1 bytes)   |         .byte 2d                     
5446:715 | DONE dir | em 16 16 |        |             |                 2d                       --  -
5446:716 | DONE wsp | em 16 16 |        |             |
5446:717 | DONE lbl | em 16 16 | 0066a4 |             | nt_plus                              
5446:718 | DONE dir | em 16 16 | 0066a4 | (2 bytes)   |         .byte 1, { NC }              
5446:718 | DONE dir | em 16 16 |        |             |                 01 01                    --  . .
5446:719 | DONE dir | em 16 16 | 0066a6 | (6 bytes)   |         .word nt_minus, xt_plus, 005331 
5446:719 | DONE dir | em 16 16 |        |             |                 9b 66 2a 53 31 53        --  . f * S 1 S
5446:720 | DONE dir | em 16 16 | 0066ac | (1 bytes)   |         .byte 2b                     
5446:720 | DONE dir | em 16 16 |        |             |                 2b                       --  +
5446:721 | DONE wsp | em 16 16 |        |             |
5446:722 | DONE lbl | em 16 16 | 0066ad |             | nt_one-minus                         
5446:723 | DONE dir | em 16 16 | 0066ad | (2 bytes)   |         .byte 2, { NC }              
5446:723 | DONE dir | em 16 16 |        |             |                 02 01                    --  . .
5446:724 | DONE dir | em 16 16 | 0066af | (6 bytes)   |         .word nt_plus, xt_one-minus, 0053c7 
5446:724 | DONE dir | em 16 16 |        |             |                 a4 66 c6 53 c7 53        --  . f . S . S
5446:725 | DONE dir | em 16 16 | 0066b5 | (2 bytes)   |         .byte 31, 2d                 
5446:725 | DONE dir | em 16 16 |        |             |                 31 2d                    --  1 -
5446:726 | DONE wsp | em 16 16 |        |             |
5446:727 | DONE lbl | em 16 16 | 0066b7 |             | nt_one-plus                          
5446:728 | DONE dir | em 16 16 | 0066b7 | (2 bytes)   |         .byte 2, { NC }              
5446:728 | DONE dir | em 16 16 |        |             |                 02 01                    --  . .
5446:729 | DONE dir | em 16 16 | 0066b9 | (6 bytes)   |         .word nt_one-minus, xt_one-plus, 0053c9 
5446:729 | DONE dir | em 16 16 |        |             |                 ad 66 c8 53 c9 53        --  . f . S . S
5446:730 | DONE dir | em 16 16 | 0066bf | (2 bytes)   |         .byte 31, 2b                 
5446:730 | DONE dir | em 16 16 |        |             |                 31 2b                    --  1 +
5446:731 | DONE wsp | em 16 16 |        |             |
5446:732 | DONE lbl | em 16 16 | 0066c1 |             | nt_zero-notequal                     
5446:733 | DONE dir | em 16 16 | 0066c1 | (2 bytes)   |         .byte 3, { NC }              
5446:733 | DONE dir | em 16 16 |        |             |                 03 01                    --  . .
5446:734 | DONE dir | em 16 16 | 0066c3 | (6 bytes)   |         .word nt_one-plus, xt_zero-notequal, 005394 
5446:734 | DONE dir | em 16 16 |        |             |                 b7 66 89 53 94 53        --  . f . S . S
5446:735 | DONE dir | em 16 16 | 0066c9 | (3 bytes)   |         .byte 30, 3c, 3e             
5446:735 | DONE dir | em 16 16 |        |             |                 30 3c 3e                 --  0 < >
5446:736 | DONE wsp | em 16 16 |        |             |
5446:737 | DONE lbl | em 16 16 | 0066cc |             | nt_zero-more                         
5446:738 | DONE dir | em 16 16 | 0066cc | (2 bytes)   |         .byte 2, { NC }              
5446:738 | DONE dir | em 16 16 |        |             |                 02 01                    --  . .
5446:739 | DONE dir | em 16 16 | 0066ce | (6 bytes)   |         .word nt_zero-notequal, xt_zero-more, 00539f 
5446:739 | DONE dir | em 16 16 |        |             |                 c1 66 95 53 9f 53        --  . f . S . S
5446:740 | DONE dir | em 16 16 | 0066d4 | (2 bytes)   |         .byte 30, 3e                 
5446:740 | DONE dir | em 16 16 |        |             |                 30 3e                    --  0 >
5446:741 | DONE wsp | em 16 16 |        |             |
5446:742 | DONE lbl | em 16 16 | 0066d6 |             | nt_zero-less                         
5446:743 | DONE dir | em 16 16 | 0066d6 | (2 bytes)   |         .byte 2, { NC }              
5446:743 | DONE dir | em 16 16 |        |             |                 02 01                    --  . .
5446:744 | DONE dir | em 16 16 | 0066d8 | (6 bytes)   |         .word nt_zero-more, xt_zero-less, 005388 
5446:744 | DONE dir | em 16 16 |        |             |                 cc 66 7d 53 88 53        --  . f } S . S
5446:745 | DONE dir | em 16 16 | 0066de | (2 bytes)   |         .byte 30, 3c                 
5446:745 | DONE dir | em 16 16 |        |             |                 30 3c                    --  0 <
5446:746 | DONE wsp | em 16 16 |        |             |
5446:747 | DONE lbl | em 16 16 | 0066e0 |             | nt_greater                           
5446:748 | DONE dir | em 16 16 | 0066e0 | (2 bytes)   |         .byte 1, { NC }              
5446:748 | DONE dir | em 16 16 |        |             |                 01 01                    --  . .
5446:749 | DONE dir | em 16 16 | 0066e2 | (6 bytes)   |         .word nt_zero-less, xt_greater, 005136 
5446:749 | DONE dir | em 16 16 |        |             |                 d6 66 23 51 36 51        --  . f # Q 6 Q
5446:750 | DONE dir | em 16 16 | 0066e8 | (1 bytes)   |         .byte 3e                     
5446:750 | DONE dir | em 16 16 |        |             |                 3e                       --  >
5446:751 | DONE wsp | em 16 16 |        |             |
5446:752 | DONE lbl | em 16 16 | 0066e9 |             | nt_less                              
5446:753 | DONE dir | em 16 16 | 0066e9 | (2 bytes)   |         .byte 1, { NC }              
5446:753 | DONE dir | em 16 16 |        |             |                 01 01                    --  . .
5446:754 | DONE dir | em 16 16 | 0066eb | (6 bytes)   |         .word nt_greater, xt_less, 00510c 
5446:754 | DONE dir | em 16 16 |        |             |                 e0 66 f9 50 0c 51        --  . f . P  Q
5446:755 | DONE dir | em 16 16 | 0066f1 | (1 bytes)   |         .byte 3c                     
5446:755 | DONE dir | em 16 16 |        |             |                 3c                       --  <
5446:756 | DONE wsp | em 16 16 |        |             |
5446:757 | DONE lbl | em 16 16 | 0066f2 |             | nt_zero-equal                        
5446:758 | DONE dir | em 16 16 | 0066f2 | (2 bytes)   |         .byte 2, { NC }              
5446:758 | DONE dir | em 16 16 |        |             |                 02 01                    --  . .
5446:759 | DONE dir | em 16 16 | 0066f4 | (6 bytes)   |         .word nt_less, xt_zero-equal, 00537c 
5446:759 | DONE dir | em 16 16 |        |             |                 e9 66 71 53 7c 53        --  . f q S | S
5446:760 | DONE dir | em 16 16 | 0066fa | (2 bytes)   |         .byte 30, 3d                 
5446:760 | DONE dir | em 16 16 |        |             |                 30 3d                    --  0 =
5446:761 | DONE wsp | em 16 16 |        |             |
5446:762 | DONE lbl | em 16 16 | 0066fc |             | nt_not-equal                         
5446:763 | DONE dir | em 16 16 | 0066fc | (2 bytes)   |         .byte 2, { NC }              
5446:763 | DONE dir | em 16 16 |        |             |                 02 01                    --  . .
5446:764 | DONE dir | em 16 16 | 0066fe | (6 bytes)   |         .word nt_zero-equal, xt_not-equal, 005118 
5446:764 | DONE dir | em 16 16 |        |             |                 f2 66 0d 51 18 51        --  . f  Q . Q
5446:765 | DONE dir | em 16 16 | 006704 | (2 bytes)   |         .byte 3c, 3e                 
5446:765 | DONE dir | em 16 16 |        |             |                 3c 3e                    --  < >
5446:766 | DONE wsp | em 16 16 |        |             |
5446:767 | DONE lbl | em 16 16 | 006706 |             | nt_equal                             
5446:768 | DONE dir | em 16 16 | 006706 | (2 bytes)   |         .byte 1, { NC }              
5446:768 | DONE dir | em 16 16 |        |             |                 01 01                    --  . .
5446:769 | DONE dir | em 16 16 | 006708 | (6 bytes)   |         .word nt_not-equal, xt_equal, 005368 
5446:769 | DONE dir | em 16 16 |        |             |                 fc 66 5d 53 68 53        --  . f ] S h S
5446:770 | DONE dir | em 16 16 | 00670e | (1 bytes)   |         .byte 3d                     
5446:770 | DONE dir | em 16 16 |        |             |                 3d                       --  =
5446:771 | DONE wsp | em 16 16 |        |             |
5446:772 | DONE lbl | em 16 16 | 00670f |             | nt_false                             
5446:773 | DONE dir | em 16 16 | 00670f | (2 bytes)   |         .byte 5, { NC }              
5446:773 | DONE dir | em 16 16 |        |             |                 05 01                    --  . .
5446:774 | DONE dir | em 16 16 | 006711 | (6 bytes)   |         .word nt_equal, xt_zero, 005370 
5446:774 | DONE dir | em 16 16 |        |             |                 06 67 69 53 70 53        --  . g i S p S
5446:775 | DONE dir | em 16 16 | 006717 | (5 bytes)   |         .byte 66, 61, 6c, 73, 65     
5446:775 | DONE dir | em 16 16 |        |             |                 66 61 6c 73 65           --  f a l s e
5446:776 | DONE wsp | em 16 16 |        |             |
5446:777 | DONE lbl | em 16 16 | 00671c |             | nt_true                              
5446:778 | DONE dir | em 16 16 | 00671c | (2 bytes)   |         .byte 4, { NC }              
5446:778 | DONE dir | em 16 16 |        |             |                 04 01                    --  . .
5446:779 | DONE dir | em 16 16 | 00671e | (6 bytes)   |         .word nt_false, xt_true, 005e6f 
5446:779 | DONE dir | em 16 16 |        |             |                 0f 67 68 5e 6f 5e        --  . g h ^ o ^
5446:780 | DONE dir | em 16 16 | 006724 | (4 bytes)   |         .byte 74, 72, 75, 65         
5446:780 | DONE dir | em 16 16 |        |             |                 74 72 75 65              --  t r u e
5446:781 | DONE wsp | em 16 16 |        |             |
5446:782 | DONE lbl | em 16 16 | 006728 |             | nt_tonumber                          
5446:783 | DONE dir | em 16 16 | 006728 | (2 bytes)   |         .byte 7, { NC }              see if actually NC
5446:783 | DONE dir | em 16 16 |        |             |                 07 01                    --  . .
5446:784 | DONE dir | em 16 16 | 00672a | (6 bytes)   |         .word nt_true, xt_tonumber, 0051bf 
5446:784 | DONE dir | em 16 16 |        |             |                 1c 67 63 51 bf 51        --  . g c Q . Q
5446:785 | DONE dir | em 16 16 | 006730 | (7 bytes)   |         .byte 3e, 6e, 75, 6d, 62, 65, 72 
5446:785 | DONE dir | em 16 16 |        |             |                 3e 6e 75 6d 62 65 72     --  > n u m b e r
5446:786 | DONE wsp | em 16 16 |        |             |
5446:787 | DONE lbl | em 16 16 | 006737 |             | nt_number                            
5446:788 | DONE dir | em 16 16 | 006737 | (2 bytes)   |         .byte 6, { NC }              see if actually NC
5446:788 | DONE dir | em 16 16 |        |             |                 06 01                    --  . .
5446:789 | DONE dir | em 16 16 | 006739 | (6 bytes)   |         .word nt_tonumber, xt_number, 005bcb 
5446:789 | DONE dir | em 16 16 |        |             |                 28 67 48 5b cb 5b        --  ( g H [ . [
5446:790 | DONE dir | em 16 16 | 00673f | (6 bytes)   |         .byte 6e, 75, 6d, 62, 65, 72 
5446:790 | DONE dir | em 16 16 |        |             |                 6e 75 6d 62 65 72        --  n u m b e r
5446:791 | DONE wsp | em 16 16 |        |             |
5446:792 | DONE lbl | em 16 16 | 006745 |             | nt_two                               
5446:793 | DONE dir | em 16 16 | 006745 | (2 bytes)   |         .byte 1, { NC }              
5446:793 | DONE dir | em 16 16 |        |             |                 01 01                    --  . .
5446:794 | DONE dir | em 16 16 | 006747 | (6 bytes)   |         .word nt_number, xt_two, 0053d1 
5446:794 | DONE dir | em 16 16 |        |             |                 37 67 ca 53 d1 53        --  7 g . S . S
5446:795 | DONE dir | em 16 16 | 00674d | (1 bytes)   |         .byte 32                     
5446:795 | DONE dir | em 16 16 |        |             |                 32                       --  2
5446:796 | DONE wsp | em 16 16 |        |             |
5446:797 | DONE lbl | em 16 16 | 00674e |             | nt_one                               
5446:798 | DONE dir | em 16 16 | 00674e | (2 bytes)   |         .byte 1, { NC }              
5446:798 | DONE dir | em 16 16 |        |             |                 01 01                    --  . .
5446:799 | DONE dir | em 16 16 | 006750 | (6 bytes)   |         .word nt_two, xt_one, 0053c5 
5446:799 | DONE dir | em 16 16 |        |             |                 45 67 be 53 c5 53        --  E g . S . S
5446:800 | DONE dir | em 16 16 | 006756 | (1 bytes)   |         .byte 31                     
5446:800 | DONE dir | em 16 16 |        |             |                 31                       --  1
5446:801 | DONE wsp | em 16 16 |        |             |
5446:802 | DONE lbl | em 16 16 | 006757 |             | nt_zero                              
5446:803 | DONE dir | em 16 16 | 006757 | (2 bytes)   |         .byte 1, { NC }              
5446:803 | DONE dir | em 16 16 |        |             |                 01 01                    --  . .
5446:804 | DONE dir | em 16 16 | 006759 | (6 bytes)   |         .word nt_one, xt_zero, 005370 
5446:804 | DONE dir | em 16 16 |        |             |                 4e 67 69 53 70 53        --  N g i S p S
5446:805 | DONE dir | em 16 16 | 00675f | (1 bytes)   |         .byte 30                     
5446:805 | DONE dir | em 16 16 |        |             |                 30                       --  0
5446:806 | DONE wsp | em 16 16 |        |             |
5446:807 | DONE lbl | em 16 16 | 006760 |             | nt_find-name                         
5446:808 | DONE dir | em 16 16 | 006760 | (2 bytes)   |         .byte 9, 0                   
5446:808 | DONE dir | em 16 16 |        |             |                 09 00                    --  	 .
5446:809 | DONE dir | em 16 16 | 006762 | (6 bytes)   |         .word nt_zero, xt_find-name, 005989 
5446:809 | DONE dir | em 16 16 |        |             |                 57 67 33 59 89 59        --  W g 3 Y . Y
5446:810 | DONE dir | em 16 16 | 006768 | (9 bytes)   |         .byte 66, 69, 6e, 64, 2d, 6e, 61, 6d, 65 
5446:810 | DONE dir | em 16 16 |        |             |                 66 69 6e 64 2d 6e 61 6d  --  f i n d - n a m
5446:810 | DONE dir | em 16 16 |        |             |                 65                       --  e
5446:811 | DONE wsp | em 16 16 |        |             |
5446:812 | DONE lbl | em 16 16 | 006771 |             | nt_refill                            
5446:813 | DONE dir | em 16 16 | 006771 | (2 bytes)   |         .byte 6, 0                   TODO check flags
5446:813 | DONE dir | em 16 16 |        |             |                 06 00                    --  . .
5446:814 | DONE dir | em 16 16 | 006773 | (6 bytes)   |         .word nt_find-name, xt_refill, 005cee 
5446:814 | DONE dir | em 16 16 |        |             |                 60 67 c5 5c ee 5c        --  ` g . \ . \
5446:815 | DONE dir | em 16 16 | 006779 | (6 bytes)   |         .byte 72, 65, 66, 69, 6c, 6c 
5446:815 | DONE dir | em 16 16 |        |             |                 72 65 66 69 6c 6c        --  r e f i l l
5446:816 | DONE wsp | em 16 16 |        |             |
5446:817 | DONE lbl | em 16 16 | 00677f |             | nt_parse-name                        
5446:818 | DONE dir | em 16 16 | 00677f | (2 bytes)   |         .byte &10, 0                 
5446:818 | DONE dir | em 16 16 |        |             |                 0a 00                    --  
 .
5446:819 | DONE dir | em 16 16 | 006781 | (6 bytes)   |         .word nt_refill, xt_parse-name, 005c61 
5446:819 | DONE dir | em 16 16 |        |             |                 71 67 fb 5b 61 5c        --  q g . [ a \
5446:820 | DONE dir | em 16 16 | 006787 | (10 bytes)  |         .byte 70, 61, 72, 73, 65, 2d, 6e, 61, 6d, 65 
5446:820 | DONE dir | em 16 16 |        |             |                 70 61 72 73 65 2d 6e 61  --  p a r s e - n a
5446:820 | DONE dir | em 16 16 |        |             |                 6d 65                    --  m e
5446:821 | DONE wsp | em 16 16 |        |             |
5446:822 | DONE lbl | em 16 16 | 006791 |             | nt_source-id                         
5446:823 | DONE dir | em 16 16 | 006791 | (2 bytes)   |         .byte 9, { NC }              
5446:823 | DONE dir | em 16 16 |        |             |                 09 01                    --  	 .
5446:824 | DONE dir | em 16 16 | 006793 | (6 bytes)   |         .word nt_parse-name, xt_source-id, 005e30 
5446:824 | DONE dir | em 16 16 |        |             |                 7f 67 2a 5e 30 5e        --  . g * ^ 0 ^
5446:825 | DONE dir | em 16 16 | 006799 | (9 bytes)   |         .byte 73, 6f, 75, 72, 63, 65, 2d, 69, 64 
5446:825 | DONE dir | em 16 16 |        |             |                 73 6f 75 72 63 65 2d 69  --  s o u r c e - i
5446:825 | DONE dir | em 16 16 |        |             |                 64                       --  d
5446:826 | DONE wsp | em 16 16 |        |             |
5446:827 | DONE lbl | em 16 16 | 0067a2 |             | nt_comma                             
5446:828 | DONE dir | em 16 16 | 0067a2 | (2 bytes)   |         .byte 1, { NC }              
5446:828 | DONE dir | em 16 16 |        |             |                 01 01                    --  . .
5446:829 | DONE dir | em 16 16 | 0067a4 | (6 bytes)   |         .word nt_source-id, xt_comma, 005250 
5446:829 | DONE dir | em 16 16 |        |             |                 91 67 45 52 50 52        --  . g E R P R
5446:830 | DONE dir | em 16 16 | 0067aa | (1 bytes)   |         .byte 2c                     
5446:830 | DONE dir | em 16 16 |        |             |                 2c                       --  ,
5446:831 | DONE wsp | em 16 16 |        |             |
5446:832 | DONE lbl | em 16 16 | 0067ab |             | nt_accept                            
5446:833 | DONE dir | em 16 16 | 0067ab | (2 bytes)   |         .byte 6, 00                  TODO check flags
5446:833 | DONE dir | em 16 16 |        |             |                 06 00                    --  . .
5446:834 | DONE dir | em 16 16 | 0067ad | (6 bytes)   |         .word nt_comma, xt_accept, 005519 
5446:834 | DONE dir | em 16 16 |        |             |                 a2 67 8b 54 19 55        --  . g . T . U
5446:835 | DONE dir | em 16 16 | 0067b3 | (6 bytes)   |         .byte 61, 63, 63, 65, 70, 74 
5446:835 | DONE dir | em 16 16 |        |             |                 61 63 63 65 70 74        --  a c c e p t
5446:836 | DONE wsp | em 16 16 |        |             |
5446:837 | DONE lbl | em 16 16 | 0067b9 |             | nt_key                               
5446:838 | DONE dir | em 16 16 | 0067b9 | (2 bytes)   |         .byte 3, { NC }              
5446:838 | DONE dir | em 16 16 |        |             |                 03 01                    --  . .
5446:839 | DONE dir | em 16 16 | 0067bb | (6 bytes)   |         .word nt_accept, xt_key, 0059ed 
5446:839 | DONE dir | em 16 16 |        |             |                 ab 67 de 59 ed 59        --  . g . Y . Y
5446:840 | DONE dir | em 16 16 | 0067c1 | (3 bytes)   |         .byte 6b, 65, 79             
5446:840 | DONE dir | em 16 16 |        |             |                 6b 65 79                 --  k e y
5446:841 | DONE wsp | em 16 16 |        |             |
5446:842 | DONE lbl | em 16 16 | 0067c4 |             | nt_backslash                         
5446:843 | DONE dir | em 16 16 | 0067c4 | (2 bytes)   |         .byte 1, { NC }              
5446:843 | DONE dir | em 16 16 |        |             |                 01 01                    --  . .
5446:844 | DONE dir | em 16 16 | 0067c6 | (6 bytes)   |         .word nt_key, xt_backslash, 005329 
5446:844 | DONE dir | em 16 16 |        |             |                 b9 67 25 53 29 53        --  . g % S ) S
5446:845 | DONE dir | em 16 16 | 0067cc | (1 bytes)   |         .byte 5c                     
5446:845 | DONE dir | em 16 16 |        |             |                 5c                       --  \
5446:846 | DONE wsp | em 16 16 |        |             |
5446:847 | DONE lbl | em 16 16 | 0067cd |             | nt_qdup                              
5446:848 | DONE dir | em 16 16 | 0067cd | (2 bytes)   |         .byte 4, { NC }              
5446:848 | DONE dir | em 16 16 |        |             |                 04 01                    --  . .
5446:849 | DONE dir | em 16 16 | 0067cf | (6 bytes)   |         .word nt_backslash, xt_qdup, 0052cd 
5446:849 | DONE dir | em 16 16 |        |             |                 c4 67 c6 52 cd 52        --  . g . R . R
5446:850 | DONE dir | em 16 16 | 0067d5 | (4 bytes)   |         .byte 3f, 64, 75, 70         
5446:850 | DONE dir | em 16 16 |        |             |                 3f 64 75 70              --  ? d u p
5446:851 | DONE wsp | em 16 16 |        |             |
5446:852 | DONE lbl | em 16 16 | 0067d9 |             | nt_tuck                              
5446:853 | DONE dir | em 16 16 | 0067d9 | (2 bytes)   |         .byte 4, { NC }              
5446:853 | DONE dir | em 16 16 |        |             |                 04 01                    --  . .
5446:854 | DONE dir | em 16 16 | 0067db | (6 bytes)   |         .word nt_qdup, xt_tuck, 005e78 
5446:854 | DONE dir | em 16 16 |        |             |                 cd 67 70 5e 78 5e        --  . g p ^ x ^
5446:855 | DONE dir | em 16 16 | 0067e1 | (4 bytes)   |         .byte 74, 75, 63, 6b         
5446:855 | DONE dir | em 16 16 |        |             |                 74 75 63 6b              --  t u c k
5446:856 | DONE wsp | em 16 16 |        |             |
5446:857 | DONE lbl | em 16 16 | 0067e5 |             | nt_nip                               
5446:858 | DONE dir | em 16 16 | 0067e5 | (2 bytes)   |         .byte 3, { NC }              
5446:858 | DONE dir | em 16 16 |        |             |                 03 01                    --  . .
5446:859 | DONE dir | em 16 16 | 0067e7 | (6 bytes)   |         .word nt_tuck, xt_nip, 005b47 
5446:859 | DONE dir | em 16 16 |        |             |                 d9 67 45 5b 47 5b        --  . g E [ G [
5446:860 | DONE dir | em 16 16 | 0067ed | (3 bytes)   |         .byte 6e, 69, 70             
5446:860 | DONE dir | em 16 16 |        |             |                 6e 69 70                 --  n i p
5446:861 | DONE wsp | em 16 16 |        |             |
5446:862 | DONE lbl | em 16 16 | 0067f0 |             | nt_mrot                              
5446:863 | DONE dir | em 16 16 | 0067f0 | (2 bytes)   |         .byte 4, { NC }              
5446:863 | DONE dir | em 16 16 |        |             |                 04 01                    --  . .
5446:864 | DONE dir | em 16 16 | 0067f2 | (6 bytes)   |         .word nt_nip, xt_mrot, 005345 
5446:864 | DONE dir | em 16 16 |        |             |                 e5 67 3d 53 45 53        --  . g = S E S
5446:865 | DONE dir | em 16 16 | 0067f8 | (4 bytes)   |         .byte 2d, 72, 6f, 74         
5446:865 | DONE dir | em 16 16 |        |             |                 2d 72 6f 74              --  - r o t
5446:866 | DONE wsp | em 16 16 |        |             |
5446:867 | DONE lbl | em 16 16 | 0067fc |             | nt_rot                               
5446:868 | DONE dir | em 16 16 | 0067fc | (2 bytes)   |         .byte 3, { NC }              
5446:868 | DONE dir | em 16 16 |        |             |                 03 01                    --  . .
5446:869 | DONE dir | em 16 16 | 0067fe | (6 bytes)   |         .word nt_mrot, xt_rot, 005cf7 
5446:869 | DONE dir | em 16 16 |        |             |                 f0 67 ef 5c f7 5c        --  . g . \ . \
5446:870 | DONE dir | em 16 16 | 006804 | (3 bytes)   |         .byte 72, 6f, 74             
5446:870 | DONE dir | em 16 16 |        |             |                 72 6f 74                 --  r o t
5446:871 | DONE wsp | em 16 16 |        |             |
5446:872 | DONE lbl | em 16 16 | 006807 |             | nt_2over                             
5446:873 | DONE dir | em 16 16 | 006807 | (2 bytes)   |         .byte 5, { NC }              
5446:873 | DONE dir | em 16 16 |        |             |                 05 01                    --  . .
5446:874 | DONE dir | em 16 16 | 006809 | (6 bytes)   |         .word nt_rot, xt_2over, 005405 
5446:874 | DONE dir | em 16 16 |        |             |                 fc 67 f9 53 05 54        --  . g . S . T
5446:875 | DONE dir | em 16 16 | 00680f | (5 bytes)   |         .byte 32, 6f, 76, 65, 72     
5446:875 | DONE dir | em 16 16 |        |             |                 32 6f 76 65 72           --  2 o v e r
5446:876 | DONE wsp | em 16 16 |        |             |
5446:877 | DONE lbl | em 16 16 | 006814 |             | nt_2swap                             
5446:878 | DONE dir | em 16 16 | 006814 | (2 bytes)   |         .byte 5, { NC }              
5446:878 | DONE dir | em 16 16 |        |             |                 05 01                    --  . .
5446:879 | DONE dir | em 16 16 | 006816 | (6 bytes)   |         .word nt_2over, xt_2swap, 005435 
5446:879 | DONE dir | em 16 16 |        |             |                 07 68 25 54 35 54        --  . h % T 5 T
5446:880 | DONE dir | em 16 16 | 00681c | (5 bytes)   |         .byte 32, 73, 77, 61, 70     
5446:880 | DONE dir | em 16 16 |        |             |                 32 73 77 61 70           --  2 s w a p
5446:881 | DONE wsp | em 16 16 |        |             |
5446:882 | DONE lbl | em 16 16 | 006821 |             | nt_execute                           
5446:883 | DONE dir | em 16 16 | 006821 | (2 bytes)   |         .byte 7, { NC }              
5446:883 | DONE dir | em 16 16 |        |             |                 07 01                    --  . .
5446:884 | DONE dir | em 16 16 | 006823 | (6 bytes)   |         .word nt_2swap, xt_execute, 005902 
5446:884 | DONE dir | em 16 16 |        |             |                 14 68 f8 58 02 59        --  . h . X . Y
5446:885 | DONE dir | em 16 16 | 006829 | (7 bytes)   |         .byte 65, 78, 65, 63, 75, 74, 65 
5446:885 | DONE dir | em 16 16 |        |             |                 65 78 65 63 75 74 65     --  e x e c u t e
5446:886 | DONE wsp | em 16 16 |        |             |
5446:887 | DONE lbl | em 16 16 | 006830 |             | nt_here                              
5446:888 | DONE dir | em 16 16 | 006830 | (2 bytes)   |         .byte 4, { NC }              
5446:888 | DONE dir | em 16 16 |        |             |                 04 01                    --  . .
5446:889 | DONE dir | em 16 16 | 006832 | (6 bytes)   |         .word nt_execute, xt_here, 005a2f 
5446:889 | DONE dir | em 16 16 |        |             |                 21 68 29 5a 2f 5a        --  ! h ) Z / Z
5446:890 | DONE dir | em 16 16 | 006838 | (4 bytes)   |         .byte 68, 65, 72, 65         
5446:890 | DONE dir | em 16 16 |        |             |                 68 65 72 65              --  h e r e
5446:891 | DONE wsp | em 16 16 |        |             |
5446:892 | DONE lbl | em 16 16 | 00683c |             | nt_2drop                             
5446:893 | DONE dir | em 16 16 | 00683c | (2 bytes)   |         .byte 5, { NC }              
5446:893 | DONE dir | em 16 16 |        |             |                 05 01                    --  . .
5446:894 | DONE dir | em 16 16 | 00683e | (6 bytes)   |         .word nt_here, xt_2drop, 0053ed 
5446:894 | DONE dir | em 16 16 |        |             |                 30 68 e7 53 ed 53        --  0 h . S . S
5446:895 | DONE dir | em 16 16 | 006844 | (5 bytes)   |         .byte 32, 64, 72, 6f, 70     
5446:895 | DONE dir | em 16 16 |        |             |                 32 64 72 6f 70           --  2 d r o p
5446:896 | DONE wsp | em 16 16 |        |             |
5446:897 | DONE lbl | em 16 16 | 006849 |             | nt_rfetch                            
5446:898 | DONE dir | em 16 16 | 006849 | (2 bytes)   |         .byte 2, 0                   we follow Gforth in making this not CO
5446:898 | DONE dir | em 16 16 |        |             |                 02 00                    --  . .
5446:899 | DONE dir | em 16 16 | 00684b | (6 bytes)   |         .word nt_2drop, xt_rfetch, 005cbc 
5446:899 | DONE dir | em 16 16 |        |             |                 3c 68 b4 5c bc 5c        --  < h . \ . \
5446:900 | DONE dir | em 16 16 | 006851 | (2 bytes)   |         .byte 72, 40                 
5446:900 | DONE dir | em 16 16 |        |             |                 72 40                    --  r @
5446:901 | DONE wsp | em 16 16 |        |             |
5446:902 | DONE lbl | em 16 16 | 006853 |             | nt_fromr                             
5446:903 | DONE dir | em 16 16 | 006853 | (2 bytes)   |         .byte 2, { CO + NC }         NC is special case
5446:903 | DONE dir | em 16 16 |        |             |                 02 05                    --  . .
5446:904 | DONE dir | em 16 16 | 006855 | (6 bytes)   |         .word nt_rfetch, xt_fromr, 005cc4 
5446:904 | DONE dir | em 16 16 |        |             |                 49 68 bd 5c c4 5c        --  I h . \ . \
5446:905 | DONE dir | em 16 16 | 00685b | (2 bytes)   |         .byte 72, 3e                 
5446:905 | DONE dir | em 16 16 |        |             |                 72 3e                    --  r >
5446:906 | DONE wsp | em 16 16 |        |             |
5446:907 | DONE lbl | em 16 16 | 00685d |             | nt_tor                               
5446:908 | DONE dir | em 16 16 | 00685d | (2 bytes)   |         .byte 2, { CO + NC }         NC is special case
5446:908 | DONE dir | em 16 16 |        |             |                 02 05                    --  . .
5446:909 | DONE dir | em 16 16 | 00685f | (6 bytes)   |         .word nt_fromr, xt_tor, 0051c7 
5446:909 | DONE dir | em 16 16 |        |             |                 53 68 c0 51 c7 51        --  S h . Q . Q
5446:910 | DONE dir | em 16 16 | 006865 | (2 bytes)   |         .byte 3e, 72                 
5446:910 | DONE dir | em 16 16 |        |             |                 3e 72                    --  > r
5446:911 | DONE wsp | em 16 16 |        |             |
5446:912 | DONE lbl | em 16 16 | 006867 |             | nt_digitq                            
5446:913 | DONE dir | em 16 16 | 006867 | (2 bytes)   |         .byte 6, { NC }              
5446:913 | DONE dir | em 16 16 |        |             |                 06 01                    --  . .
5446:914 | DONE dir | em 16 16 | 006869 | (6 bytes)   |         .word nt_tor, xt_digitq, 0057f4 
5446:914 | DONE dir | em 16 16 |        |             |                 5d 68 b9 57 f4 57        --  ] h . W . W
5446:915 | DONE dir | em 16 16 | 00686f | (6 bytes)   |         .byte 64, 69, 67, 69, 74, 3f 
5446:915 | DONE dir | em 16 16 |        |             |                 64 69 67 69 74 3f        --  d i g i t ?
5446:916 | DONE wsp | em 16 16 |        |             |
5446:917 | DONE lbl | em 16 16 | 006875 |             | nt_bounds                            
5446:918 | DONE dir | em 16 16 | 006875 | (2 bytes)   |         .byte 6, { NC }              
5446:918 | DONE dir | em 16 16 |        |             |                 06 01                    --  . .
5446:919 | DONE dir | em 16 16 | 006877 | (6 bytes)   |         .word nt_digitq, xt_bounds, 0055b3 
5446:919 | DONE dir | em 16 16 |        |             |                 67 68 aa 55 b3 55        --  g h . U . U
5446:920 | DONE dir | em 16 16 | 00687d | (6 bytes)   |         .byte 62, 6f, 75, 6e, 64, 73 
5446:920 | DONE dir | em 16 16 |        |             |                 62 6f 75 6e 64 73        --  b o u n d s
5446:921 | DONE wsp | em 16 16 |        |             |
5446:922 | DONE lbl | em 16 16 | 006883 |             | nt_over                              
5446:923 | DONE dir | em 16 16 | 006883 | (2 bytes)   |         .byte 4, { NC }              
5446:923 | DONE dir | em 16 16 |        |             |                 04 01                    --  . .
5446:924 | DONE dir | em 16 16 | 006885 | (6 bytes)   |         .word nt_bounds, xt_over, 005be1 
5446:924 | DONE dir | em 16 16 |        |             |                 75 68 db 5b e1 5b        --  u h . [ . [
5446:925 | DONE dir | em 16 16 | 00688b | (4 bytes)   |         .byte 6f, 76, 65, 72         
5446:925 | DONE dir | em 16 16 |        |             |                 6f 76 65 72              --  o v e r
5446:926 | DONE wsp | em 16 16 |        |             |
5446:927 | DONE lbl | em 16 16 | 00688f |             | nt_fetch                             
5446:928 | DONE dir | em 16 16 | 00688f | (2 bytes)   |         .byte 1, { NC }              
5446:928 | DONE dir | em 16 16 |        |             |                 01 01                    --  . .
5446:929 | DONE dir | em 16 16 | 006891 | (6 bytes)   |         .word nt_over, xt_fetch, 0052de 
5446:929 | DONE dir | em 16 16 |        |             |                 83 68 da 52 de 52        --  . h . R . R
5446:930 | DONE dir | em 16 16 | 006897 | (1 bytes)   |         .byte 40                     
5446:930 | DONE dir | em 16 16 |        |             |                 40                       --  @
5446:931 | DONE wsp | em 16 16 |        |             |
5446:932 | DONE lbl | em 16 16 | 006898 |             | nt_store                             
5446:933 | DONE dir | em 16 16 | 006898 | (2 bytes)   |         .byte 1, { NC }              
5446:933 | DONE dir | em 16 16 |        |             |                 01 01                    --  . .
5446:934 | DONE dir | em 16 16 | 00689a | (6 bytes)   |         .word nt_fetch, xt_store, 0052d9 
5446:934 | DONE dir | em 16 16 |        |             |                 8f 68 ce 52 d9 52        --  . h . R . R
5446:935 | DONE dir | em 16 16 | 0068a0 | (1 bytes)   |         .byte 21                     
5446:935 | DONE dir | em 16 16 |        |             |                 21                       --  !
5446:936 | DONE wsp | em 16 16 |        |             |
5446:937 | DONE lbl | em 16 16 | 0068a1 |             | nt_swap                              
5446:938 | DONE dir | em 16 16 | 0068a1 | (2 bytes)   |         .byte 4, { NC }              
5446:938 | DONE dir | em 16 16 |        |             |                 04 01                    --  . .
5446:939 | DONE dir | em 16 16 | 0068a3 | (6 bytes)   |         .word nt_store, xt_swap, 005e5d 
5446:939 | DONE dir | em 16 16 |        |             |                 98 68 58 5e 5d 5e        --  . h X ^ ] ^
5446:940 | DONE dir | em 16 16 | 0068a9 | (4 bytes)   |         .byte 73, 77, 61, 70         
5446:940 | DONE dir | em 16 16 |        |             |                 73 77 61 70              --  s w a p
5446:941 | DONE wsp | em 16 16 |        |             |
5446:942 | DONE lbl | em 16 16 | 0068ad |             | nt_dup                               
5446:943 | DONE dir | em 16 16 | 0068ad | (2 bytes)   |         .byte 3, { NC }              
5446:943 | DONE dir | em 16 16 |        |             |                 03 01                    --  . .
5446:944 | DONE dir | em 16 16 | 0068af | (6 bytes)   |         .word nt_swap, xt_dup, 00589b 
5446:944 | DONE dir | em 16 16 |        |             |                 a1 68 97 58 9b 58        --  . h . X . X
5446:945 | DONE dir | em 16 16 | 0068b5 | (3 bytes)   |         .byte 64, 75, 70             
5446:945 | DONE dir | em 16 16 |        |             |                 64 75 70                 --  d u p
5446:946 | DONE wsp | em 16 16 |        |             |
5446:947 | DONE cmt | em 16 16 |        |             | ; DROP is always the first entry in dictionary
5446:948 | DONE lbl | em 16 16 | 0068b8 |             | nt_drop                              
5446:949 | DONE dir | em 16 16 | 0068b8 | (2 bytes)   |         .byte 4, { NC }              
5446:949 | DONE dir | em 16 16 |        |             |                 04 01                    --  . .
5446:950 | DONE dir | em 16 16 | 0068ba | (6 bytes)   |         .word nt_dup, xt_drop, 005878 
5446:950 | DONE dir | em 16 16 |        |             |                 ad 68 74 58 78 58        --  . h t X x X
5446:951 | DONE dir | em 16 16 | 0068c0 | (4 bytes)   |         .byte 64, 72, 6f, 70         
5446:951 | DONE dir | em 16 16 |        |             |                 64 72 6f 70              --  d r o p
5446:952 | DONE wsp | em 16 16 |        |             |
5446:953 | DONE cmt | em 16 16 |        |             | ; END
5447:000 | DONE wsp | em 16 16 |        |             |
5448:000 | DONE cmt | em 16 16 |        |             | ; ===================================================================
5449:000 | DONE cmt | em 16 16 |        |             | ; CODE FIELD ROUTINES
5450:000 | DONE wsp | em 16 16 |        |             |
5451:000 | DONE cmt | em 16 16 |        |             | ; -------------------------------------------------------------------
5452:000 | DONE cmt | em 16 16 |        |             | ; DOCONST
5453:000 | DONE cmt | em 16 16 |        |             | ; Execute a constant: Push the data in the first two byte of the Data Field onto
5454:000 | DONE cmt | em 16 16 |        |             | ; the stack
5455:000 | DONE lbl | em 16 16 | 0068c4 |             | doconst                              
5456:000 | DONE dir | em 16 16 |        |             |         .!a16                        
5457:000 | DONE dir | em 16 16 |        |             |         .!xy16                       
5458:000 | DONE ins | em 16 16 | 0068c4 | ca          |                 dex                  make room on Data Stack
5459:000 | DONE ins | em 16 16 | 0068c5 | ca          |                 dex                  
5460:000 | DONE ins | em 16 16 | 0068c6 | 94 00       |                 sty.dx 00            
5461:000 | DONE wsp | em 16 16 |        |             |
5462:000 | DONE cmt | em 16 16 |        |             |                 ; The value we need is stored two bytes after the JSR return
5463:000 | DONE cmt | em 16 16 |        |             |                 ; address, which in turn is what is on top of the Return Stack
5464:000 | DONE ins | em 16 16 | 0068c8 | 68          |                 pla                  get the return address
5465:000 | DONE ins | em 16 16 | 0068c9 | 85 1c       |                 sta.d 00001c         
5466:000 | DONE wsp | em 16 16 |        |             |
5467:000 | DONE cmt | em 16 16 |        |             |                 ; start Y as index off with 1 instead of zero because of 65816's
5468:000 | DONE cmt | em 16 16 |        |             |                 ; address handling
5469:000 | DONE ins | em 16 16 | 0068cb | a0 01 00    |                 ldy.# 0001           
5470:000 | DONE ins | em 16 16 | 0068ce | b1 1c       |                 lda.diy 00001c       LDA (TMP1),Y
5471:000 | DONE ins | em 16 16 | 0068d0 | a8          |                 tay                  
5472:000 | DONE wsp | em 16 16 |        |             |
5473:000 | DONE ins | em 16 16 | 0068d1 | 60          |                 rts                  takes us to original caller
5474:000 | DONE wsp | em 16 16 |        |             |
5475:000 | DONE wsp | em 16 16 |        |             |
5476:000 | DONE cmt | em 16 16 |        |             | ; -------------------------------------------------------------------
5477:000 | DONE cmt | em 16 16 |        |             | ; DODEFER
5478:000 | DONE cmt | em 16 16 |        |             | ; Execute a DEFER statement at runtime: Execute the address we find after the
5479:000 | DONE cmt | em 16 16 |        |             | ; caller in the Data Field
5480:000 | DONE lbl | em 16 16 | 0068d2 |             | dodefer                              
5481:000 | DONE cmt | em 16 16 |        |             |                 ; the xt we need is stored in the two bytes after the JSR return
5482:000 | DONE cmt | em 16 16 |        |             |                 ; address, which is what is on top of the Retun Stack. So all we
5483:000 | DONE cmt | em 16 16 |        |             |                 ; have to do is replace our return jump with what we find there
5484:000 | DONE ins | em 16 16 | 0068d2 | 68          |                 pla                  this is the address where we find the xt ...
5485:000 | DONE ins | em 16 16 | 0068d3 | 1a          |                 inc.a                ... except one byte later
5486:000 | DONE ins | em 16 16 | 0068d4 | 85 1c       |                 sta.d 00001c         
5487:000 | DONE ins | em 16 16 | 0068d6 | b2 1c       |                 lda.di 00001c        LDA (TMP1)
5488:000 | DONE ins | em 16 16 | 0068d8 | 3a          |                 dec.a                Now we need to move one byte back
5489:000 | DONE ins | em 16 16 | 0068d9 | 48          |                 pha                  Return new address
5490:000 | DONE wsp | em 16 16 |        |             |
5491:000 | DONE ins | em 16 16 | 0068da | 60          |                 rts                  This is actually a jump to the new target
5492:000 | DONE wsp | em 16 16 |        |             |
5493:000 | DONE lbl | em 16 16 | 0068db |             | defer_error                          
5494:000 | DONE cmt | em 16 16 |        |             |                 ; if the defer has not been defined with an IS word, we land
5495:000 | DONE cmt | em 16 16 |        |             |                 ; here by default
5496:000 | DONE ins | em 16 16 | 0068db | a9 26 70    |                 lda.# 007026         
5497:000 | DONE ins | em 16 16 | 0068de | 4c 7a 69    |                 jmp 00697a           
5498:000 | DONE wsp | em 16 16 |        |             |
5499:000 | DONE wsp | em 16 16 |        |             |
5500:000 | DONE cmt | em 16 16 |        |             | ; -------------------------------------------------------------------
5501:000 | DONE cmt | em 16 16 |        |             | ; DODOES
5502:000 | DONE cmt | em 16 16 |        |             | ; Used in combination with DOES>'s runtime portion to actually do the work of
5503:000 | DONE cmt | em 16 16 |        |             | ; the new word. See DOES> and docs/create-does.txt for details. Uses tmp3
5504:000 | DONE lbl | em 16 16 | 0068e1 |             | dodoes                               
5505:000 | DONE cmt | em 16 16 |        |             |                 ; Assumes the address of the CFA of the original defining word
5506:000 | DONE cmt | em 16 16 |        |             |                 ; (say, CONSTANT) is on the top of the Return Stack. Save it for
5507:000 | DONE cmt | em 16 16 |        |             |                 ; a later jump, adding one byte because of the way the 65816
5508:000 | DONE cmt | em 16 16 |        |             |                 ; works
5509:000 | DONE ins | em 16 16 | 0068e1 | 68          |                 pla                  
5510:000 | DONE ins | em 16 16 | 0068e2 | 1a          |                 inc.a                
5511:000 | DONE ins | em 16 16 | 0068e3 | 85 20       |                 sta.d 000020         
5512:000 | DONE wsp | em 16 16 |        |             |
5513:000 | DONE cmt | em 16 16 |        |             |                 ; Next on the Return Stack should be the address of the PFA of
5514:000 | DONE cmt | em 16 16 |        |             |                 ; the calling defined word (say, the name of whatever constant we
5515:000 | DONE cmt | em 16 16 |        |             |                 ; just defined). Move this to the Data Stack, again adding one.
5516:000 | DONE ins | em 16 16 | 0068e5 | ca          |                 dex                  
5517:000 | DONE ins | em 16 16 | 0068e6 | ca          |                 dex                  
5518:000 | DONE ins | em 16 16 | 0068e7 | 94 00       |                 sty.dx 00            
5519:000 | DONE wsp | em 16 16 |        |             |
5520:000 | DONE ins | em 16 16 | 0068e9 | 7a          |                 ply                  
5521:000 | DONE ins | em 16 16 | 0068ea | c8          |                 iny                  
5522:000 | DONE wsp | em 16 16 |        |             |
5523:000 | DONE cmt | em 16 16 |        |             |                 ; This leaves the return address from the original main routine
5524:000 | DONE cmt | em 16 16 |        |             |                 ; on top of the Return Stack. We leave that untouched and jump
5525:000 | DONE cmt | em 16 16 |        |             |                 ; to the special code of the defining word. It's RTS instruction
5526:000 | DONE cmt | em 16 16 |        |             |                 ; will take us back to the main routine
5527:000 | DONE ins | em 16 16 | 0068eb | 6c 20 00    |                 jmp.i 000020         JMP (TMP3)
5528:000 | DONE wsp | em 16 16 |        |             |
5529:000 | DONE wsp | em 16 16 |        |             |
5530:000 | DONE cmt | em 16 16 |        |             | ; -------------------------------------------------------------------
5531:000 | DONE cmt | em 16 16 |        |             | ; DOVAR
5532:000 | DONE cmt | em 16 16 |        |             | ; Execute a variable: Push the address of the first bytes of the Data Field onto
5533:000 | DONE cmt | em 16 16 |        |             | ; the stack. This is called with JSR so we can pick up the address of the
5534:000 | DONE cmt | em 16 16 |        |             | ; calling variable off the 65816's Return Stack. The final RTS takes us to the
5535:000 | DONE cmt | em 16 16 |        |             | ; original caller of the routine that in turn called DOVAR. This is the default
5536:000 | DONE cmt | em 16 16 |        |             | ; routine installed with CREATE
5537:000 | DONE lbl | em 16 16 | 0068ee |             | dovar                                
5538:000 | DONE dir | em 16 16 |        |             |         .!a16                        
5539:000 | DONE dir | em 16 16 |        |             |         .!xy16                       
5540:000 | DONE ins | em 16 16 | 0068ee | ca          |                 dex                  make room on Data Stack
5541:000 | DONE ins | em 16 16 | 0068ef | ca          |                 dex                  
5542:000 | DONE ins | em 16 16 | 0068f0 | 94 00       |                 sty.dx 00            
5543:000 | DONE wsp | em 16 16 |        |             |
5544:000 | DONE cmt | em 16 16 |        |             |                 ; The address we need is stored in the two bytes after the JSR
5545:000 | DONE cmt | em 16 16 |        |             |                 ; return address, which in turn is what is on top of the Return
5546:000 | DONE cmt | em 16 16 |        |             |                 ; Stack
5547:000 | DONE ins | em 16 16 | 0068f2 | 7a          |                 ply                  value is now TOS
5548:000 | DONE ins | em 16 16 | 0068f3 | c8          |                 iny                  add one because of 65816's address handling
5549:000 | DONE wsp | em 16 16 |        |             |
5550:000 | DONE ins | em 16 16 | 0068f4 | 60          |                 rts                  takes us to original caller
5551:000 | DONE wsp | em 16 16 |        |             |
5552:000 | DONE wsp | em 16 16 |        |             |
5553:000 | DONE cmt | em 16 16 |        |             | ; ===================================================================
5554:000 | DONE cmt | em 16 16 |        |             | ; LOW LEVEL HELPER FUNCTIONS
5555:000 | DONE wsp | em 16 16 |        |             |
5556:000 | DONE wsp | em 16 16 |        |             |
5557:000 | DONE cmt | em 16 16 |        |             | ; -------------------------------------------------------------------
5558:000 | DONE cmt | em 16 16 |        |             | ; INTERPRET
5559:000 | DONE cmt | em 16 16 |        |             | ; Core routine for interpreter called by EVALUATE and QUIT. We process one line
5560:000 | DONE cmt | em 16 16 |        |             | ; only. Assumes that address of name is in cib and length of whole input
5561:000 | DONE cmt | em 16 16 |        |             | ; string is in ciblen
5562:000 | DONE lbl | em 16 16 | 0068f5 |             | interpret                            
5563:000 | DONE lbl | em 16 16 | 0068f5 |             | interpret_loop                       
5564:000 | DONE dir | em 16 16 |        |             |         .!a16                        
5565:000 | DONE dir | em 16 16 |        |             |         .!xy16                       
5566:000 | DONE cmt | em 16 16 |        |             |                 ; Normally we would use PARSE here with the SPACE character as
5567:000 | DONE cmt | em 16 16 |        |             |                 ; a parameter (PARSE replaces WORD in modern Forths). However,
5568:000 | DONE cmt | em 16 16 |        |             |                 ; Gforth's PARSE-NAME makes more sense as it uses spaces as
5569:000 | DONE cmt | em 16 16 |        |             |                 ; delimiters per default and skips any leading spaces, which
5570:000 | DONE cmt | em 16 16 |        |             |                 ; PARSE doesn't
5571:000 | DONE ins | em 16 16 | 0068f5 | 20 fb 5b    |                 jsr 005bfb           ( "string" -- addr u )
5572:000 | DONE wsp | em 16 16 |        |             |
5573:000 | DONE cmt | em 16 16 |        |             |                 ; If PARSE-NAME returns 0 (empty line), no characters were left
5574:000 | DONE cmt | em 16 16 |        |             |                 ; in the line and we need to go get a new line
5575:000 | DONE ins | em 16 16 | 0068f8 | 98          |                 tya                  force flag check
5576:000 | DONE ins | em 16 16 | 0068f9 | f0 52       |                 beq 00694d           
5577:000 | DONE wsp | em 16 16 |        |             |
5578:000 | DONE cmt | em 16 16 |        |             |                 ; Go to FIND-NAME to see if this is a word we know. We have to
5579:000 | DONE cmt | em 16 16 |        |             |                 ; make a copy of the address in case it isn't a word we know and
5580:000 | DONE cmt | em 16 16 |        |             |                 ; we have to go see if it is a number
5581:000 | DONE ins | em 16 16 | 0068fb | 20 ee 53    |                 jsr 0053ee           TODO convert this to assembler
5582:000 | DONE ins | em 16 16 | 0068fe | 20 33 59    |                 jsr 005933           ( addr u -- nt | 0 )
5583:000 | DONE wsp | em 16 16 |        |             |
5584:000 | DONE cmt | em 16 16 |        |             |                 ; a zero signals that we didn't find a word in the Dictionary
5585:000 | DONE ins | em 16 16 | 006901 | 98          |                 tya                  
5586:000 | DONE ins | em 16 16 | 006902 | d0 15       |                 bne 006919           
5587:000 | DONE wsp | em 16 16 |        |             |
5588:000 | DONE cmt | em 16 16 |        |             |                 ; We didn't get any nt we know of, so let's see if this is
5589:000 | DONE cmt | em 16 16 |        |             |                 ; a number.
5590:000 | DONE ins | em 16 16 | 006904 | 20 74 58    |                 jsr 005874           TODO convert this to assembler
5591:000 | DONE wsp | em 16 16 |        |             |
5592:000 | DONE cmt | em 16 16 |        |             |                 ; If the number conversion doesn't work, NUMBER will do the
5593:000 | DONE cmt | em 16 16 |        |             |                 ; complaining for us
5594:000 | DONE ins | em 16 16 | 006907 | 20 48 5b    |                 jsr 005b48           ( addr u -- u | d )
5595:000 | DONE wsp | em 16 16 |        |             |
5596:000 | DONE cmt | em 16 16 |        |             |                 ; If we're interpreting, we're done
5597:000 | DONE ins | em 16 16 | 00690a | a5 14       |                 lda.d 000014         
5598:000 | DONE ins | em 16 16 | 00690c | f0 e7       |                 beq 0068f5           
5599:000 | DONE wsp | em 16 16 |        |             |
5600:000 | DONE cmt | em 16 16 |        |             |                 ; We're compiling, so there is a bit more work. Note this
5601:000 | DONE cmt | em 16 16 |        |             |                 ; doesn't work with double-cell numbers, only single-cell
5602:000 | DONE ins | em 16 16 | 00690e | f4 6e 5a    |                 phe.# 005a6e         LITERAL runtime
5603:000 | DONE ins | em 16 16 | 006911 | 20 59 69    |                 jsr 006959           
5604:000 | DONE wsp | em 16 16 |        |             |
5605:000 | DONE cmt | em 16 16 |        |             |                 ; compile our number
5606:000 | DONE cmt | em 16 16 |        |             |                 ; TODO convert this to assembler
5607:000 | DONE ins | em 16 16 | 006914 | 20 45 52    |                 jsr 005245           
5608:000 | DONE wsp | em 16 16 |        |             |
5609:000 | DONE cmt | em 16 16 |        |             |                 ; That was so much fun, let's do it again!
5610:000 | DONE ins | em 16 16 | 006917 | 80 dc       |                 bra 0068f5           
5611:000 | DONE wsp | em 16 16 |        |             |
5612:000 | DONE lbl | em 16 16 | 006919 |             | interpret_got_name_token             
5613:000 | DONE cmt | em 16 16 |        |             |                 ; We have a known word's nt as TOS. We're going to need its xt
5614:000 | DONE cmt | em 16 16 |        |             |                 ; though, which is four bytes father down.
5615:000 | DONE wsp | em 16 16 |        |             |
5616:000 | DONE cmt | em 16 16 |        |             |                 ; Arrive here with ( addr u nt ), so we NIP twice, which is
5617:000 | DONE cmt | em 16 16 |        |             |                 ; really fast if Y is TOS
5618:000 | DONE ins | em 16 16 | 006919 | e8          |                 inx                  
5619:000 | DONE ins | em 16 16 | 00691a | e8          |                 inx                  
5620:000 | DONE ins | em 16 16 | 00691b | e8          |                 inx                  
5621:000 | DONE ins | em 16 16 | 00691c | e8          |                 inx                  
5622:000 | DONE wsp | em 16 16 |        |             |
5623:000 | DONE cmt | em 16 16 |        |             |                 ; This is a quicker
5624:000 | DONE cmt | em 16 16 |        |             |                 ; version of NAME>INT. But first, save a version of nt for
5625:000 | DONE cmt | em 16 16 |        |             |                 ; error handling and compilation stuff.
5626:000 | DONE ins | em 16 16 | 00691d | 84 1a       |                 sty.d 00001a         
5627:000 | DONE ins | em 16 16 | 00691f | c8          |                 iny                  
5628:000 | DONE ins | em 16 16 | 006920 | c8          |                 iny                  
5629:000 | DONE ins | em 16 16 | 006921 | c8          |                 iny                  
5630:000 | DONE ins | em 16 16 | 006922 | c8          |                 iny                  
5631:000 | DONE ins | em 16 16 | 006923 | b9 00 00    |                 lda.y 0000           LDA $0000,Y
5632:000 | DONE ins | em 16 16 | 006926 | a8          |                 tay                  xt is TOS
5633:000 | DONE wsp | em 16 16 |        |             |
5634:000 | DONE cmt | em 16 16 |        |             |                 ; See if we are in interpret or compile mode
5635:000 | DONE ins | em 16 16 | 006927 | a5 14       |                 lda.d 000014         
5636:000 | DONE ins | em 16 16 | 006929 | d0 14       |                 bne 00693f           
5637:000 | DONE wsp | em 16 16 |        |             |
5638:000 | DONE cmt | em 16 16 |        |             |                 ; We are interpreting, so EXECUTE the xt that is TOS. First,
5639:000 | DONE cmt | em 16 16 |        |             |                 ; though, see if this isn't a compile-only word, which would be
5640:000 | DONE cmt | em 16 16 |        |             |                 ; illegal.
5641:000 | DONE ins | em 16 16 | 00692b | b2 1a       |                 lda.di 00001a        
5642:000 | DONE ins | em 16 16 | 00692d | eb          |                 xba                  flags are MSB
5643:000 | DONE ins | em 16 16 | 00692e | 29 04 00    |                 and.# CO             mask everything but Compile Only bit
5644:000 | DONE ins | em 16 16 | 006931 | f0 06       |                 beq 006939           
5645:000 | DONE wsp | em 16 16 |        |             |
5646:000 | DONE cmt | em 16 16 |        |             |                 ; TODO see if we can print offending word first
5647:000 | DONE ins | em 16 16 | 006933 | a9 05 70    |                 lda.# 007005         
5648:000 | DONE ins | em 16 16 | 006936 | 4c 7a 69    |                 jmp 00697a           
5649:000 | DONE wsp | em 16 16 |        |             |
5650:000 | DONE lbl | em 16 16 | 006939 |             | interpret_interpret                  
5651:000 | DONE cmt | em 16 16 |        |             |                 ; We JSR to EXECUTE instead of calling the xt directly because
5652:000 | DONE cmt | em 16 16 |        |             |                 ; the RTS of the word we're executing will bring us back here,
5653:000 | DONE cmt | em 16 16 |        |             |                 ; skipping EXECUTE completely during RTS. If we were to execute
5654:000 | DONE cmt | em 16 16 |        |             |                 ; xt directly, we have to fool around with the Return Stack
5655:000 | DONE cmt | em 16 16 |        |             |                 ; instead, which is actually slightly slower
5656:000 | DONE ins | em 16 16 | 006939 | 20 f8 58    |                 jsr 0058f8           
5657:000 | DONE wsp | em 16 16 |        |             |
5658:000 | DONE cmt | em 16 16 |        |             |                 ; That's quite enough for this word, let's get the next one
5659:000 | DONE ins | em 16 16 | 00693c | 4c f5 68    |                 jmp 0068f5           
5660:000 | DONE wsp | em 16 16 |        |             |
5661:000 | DONE lbl | em 16 16 | 00693f |             | interpret_compile                    
5662:000 | DONE cmt | em 16 16 |        |             |                 ; We're compiling. However, we need to see if this is an
5663:000 | DONE cmt | em 16 16 |        |             |                 ; IMMEDIATE word, which would mean we execute it right now even
5664:000 | DONE cmt | em 16 16 |        |             |                 ; during compilation mode. Fortunately, we saved the nt so life
5665:000 | DONE cmt | em 16 16 |        |             |                 ; is easier
5666:000 | DONE ins | em 16 16 | 00693f | b2 1a       |                 lda.di 00001a        
5667:000 | DONE ins | em 16 16 | 006941 | eb          |                 xba                  flags are MSB
5668:000 | DONE ins | em 16 16 | 006942 | 29 02 00    |                 and.# IM             Mask all but IM bit
5669:000 | DONE ins | em 16 16 | 006945 | d0 f2       |                 bne 006939           IMMEDIATE word, execute right now
5670:000 | DONE wsp | em 16 16 |        |             |
5671:000 | DONE cmt | em 16 16 |        |             |                 ; Compile the xt into the Dictionary with COMPILE,
5672:000 | DONE ins | em 16 16 | 006947 | 20 5b 56    |                 jsr 00565b           
5673:000 | DONE ins | em 16 16 | 00694a | 4c f5 68    |                 jmp 0068f5           
5674:000 | DONE wsp | em 16 16 |        |             |
5675:000 | DONE lbl | em 16 16 | 00694d |             | interpret_line_done                  
5676:000 | DONE cmt | em 16 16 |        |             |                 ; drop stuff from PARSE_NAME
5677:000 | DONE ins | em 16 16 | 00694d | b4 02       |                 ldy.dx 02            
5678:000 | DONE ins | em 16 16 | 00694f | e8          |                 inx                  
5679:000 | DONE ins | em 16 16 | 006950 | e8          |                 inx                  
5680:000 | DONE ins | em 16 16 | 006951 | e8          |                 inx                  
5681:000 | DONE ins | em 16 16 | 006952 | e8          |                 inx                  
5682:000 | DONE wsp | em 16 16 |        |             |
5683:000 | DONE ins | em 16 16 | 006953 | 60          |                 rts                  
5684:000 | DONE wsp | em 16 16 |        |             |
5685:000 | DONE cmt | em 16 16 |        |             | ; -------------------------------------------------------------------
5686:000 | DONE cmt | em 16 16 |        |             | ; COMPILE WORDS, JUMPS AND SUBROUTINE JUMPS INTO CODE
5687:000 | DONE cmt | em 16 16 |        |             | ; These three routines compile instructions such as "jsr xt_words" into a word
5688:000 | DONE cmt | em 16 16 |        |             | ; at compile time so they are available at run time. Use by pushing the word or
5689:000 | DONE cmt | em 16 16 |        |             | ; address to be compiled on the Return Stack with
5690:000 | DONE cmt | em 16 16 |        |             | ;
5691:000 | DONE cmt | em 16 16 |        |             | ;       phe.# <WORD>    ; PEA <WORD>
5692:000 | DONE cmt | em 16 16 |        |             | ;
5693:000 | DONE cmt | em 16 16 |        |             | ; Followed by a jump to which ever versions we need. Words that use this routine
5694:000 | DONE cmt | em 16 16 |        |             | ; may not be natively compiled. We use "cmpl" as not to confuse these routines
5695:000 | DONE cmt | em 16 16 |        |             | ; with the COMPILE, word. This routine uses tmptos. Always call this with
5696:000 | DONE cmt | em 16 16 |        |             | ; a subroutine jump, which means no combining JSR/RTS to JMP.
5697:000 | DONE cmt | em 16 16 |        |             | ; TODO see if we need to add a JSR.L variant at some point
5698:000 | DONE wsp | em 16 16 |        |             |
5699:000 | DONE dir | em 16 16 |        |             |         .!a16                        paranoid
5700:000 | DONE lbl | em 16 16 | 006954 |             | cmpl_word                            
5701:000 | DONE ins | em 16 16 | 006954 | a9 00 00    |                 lda.# 0000           zero value as a flag, compile word only
5702:000 | DONE ins | em 16 16 | 006957 | 80 08       |                 bra 006961           
5703:000 | DONE lbl | em 16 16 | 006959 |             | cmpl_subroutine                      
5704:000 | DONE ins | em 16 16 | 006959 | a9 20 00    |                 lda.# 0020           compile "JSR" opcode first
5705:000 | DONE ins | em 16 16 | 00695c | 80 03       |                 bra 006961           
5706:000 | DONE lbl | em 16 16 | 00695e |             | cmpl_jump                            
5707:000 | DONE ins | em 16 16 | 00695e | a9 4c 00    |                 lda.# 004c           compile "JMP", fall through to cmpl_common
5708:000 | DONE lbl | em 16 16 | 006961 |             | cmpl_common                          
5709:000 | DONE cmt | em 16 16 |        |             |                 ; we're going to need the Y register to get anything done
5710:000 | DONE ins | em 16 16 | 006961 | 84 24       |                 sty.d 000024         
5711:000 | DONE wsp | em 16 16 |        |             |
5712:000 | DONE ins | em 16 16 | 006963 | a8          |                 tay                  force flag check
5713:000 | DONE ins | em 16 16 | 006964 | f0 08       |                 beq 00696e           came in through cmpl_word, just compile body
5714:000 | DONE wsp | em 16 16 |        |             |
5715:000 | DONE cmt | em 16 16 |        |             |                 ; A contains an opcode that must be compiled first. This is an
5716:000 | DONE cmt | em 16 16 |        |             |                 ; optimized version of C, ("c-comma")
5717:000 | DONE ins | em 16 16 | 006966 | e2 20       |                 sep 20               
5717:001 | DONE ctl | em  8 16 |        |             |         .!a8
5718:000 | DONE ins | em  8 16 | 006968 | 92 00       |                 sta.di 000000        STA (CP)
5719:000 | DONE ins | em  8 16 | 00696a | c2 20       |                 rep 20               
5719:001 | DONE ctl | em 16 16 |        |             |         .!a16
5720:000 | DONE ins | em 16 16 | 00696c | e6 00       |                 inc.d 000000         fall through to cmpl_body
5721:000 | DONE lbl | em 16 16 | 00696e |             | cmpl_body                            
5722:000 | DONE ins | em 16 16 | 00696e | 7a          |                 ply                  the return address we'll need later
5723:000 | DONE wsp | em 16 16 |        |             |
5724:000 | DONE ins | em 16 16 | 00696f | 68          |                 pla                  next value on stack is the word to compile
5725:000 | DONE ins | em 16 16 | 006970 | 92 00       |                 sta.di 000000        this is a quicker version of , ("comma")
5726:000 | DONE ins | em 16 16 | 006972 | e6 00       |                 inc.d 000000         
5727:000 | DONE ins | em 16 16 | 006974 | e6 00       |                 inc.d 000000         
5728:000 | DONE wsp | em 16 16 |        |             |
5729:000 | DONE ins | em 16 16 | 006976 | 5a          |                 phy                  make sure we can get back home
5730:000 | DONE wsp | em 16 16 |        |             |
5731:000 | DONE ins | em 16 16 | 006977 | a4 24       |                 ldy.d 000024         restore Data Stack
5732:000 | DONE wsp | em 16 16 |        |             |
5733:000 | DONE ins | em 16 16 | 006979 | 60          |                 rts                  
5734:000 | DONE wsp | em 16 16 |        |             |
5735:000 | DONE wsp | em 16 16 |        |             |
5736:000 | DONE cmt | em 16 16 |        |             | ; -------------------------------------------------------------------
5737:000 | DONE cmt | em 16 16 |        |             | ; FATAL ERROR
5738:000 | DONE cmt | em 16 16 |        |             | ; Take address of error string from A, print it and then call abort
5739:000 | DONE lbl | em 16 16 | 00697a |             | error                                
5740:000 | DONE ins | em 16 16 | 00697a | 20 80 69    |                 jsr 006980           
5741:000 | DONE ins | em 16 16 | 00697d | 4c b2 50    |                 jmp 0050b2           
5742:000 | DONE wsp | em 16 16 |        |             |
5743:000 | DONE cmt | em 16 16 |        |             | ; -------------------------------------------------------------------
5744:000 | DONE cmt | em 16 16 |        |             | ; Print a zero terminated string to the console, adding a CR character. Takes
5745:000 | DONE cmt | em 16 16 |        |             | ; the address of the string in 16-bit A register, calls put_chr.  A is
5746:000 | DONE cmt | em 16 16 |        |             | ; destroyed. We could probably figure out some way to use TYPE instead, but zero
5747:000 | DONE cmt | em 16 16 |        |             | ; terminated strings are easier for the 65816 to use.
5748:000 | DONE lbl | em 16 16 | 006980 |             | print_string                         
5749:000 | DONE dir | em 16 16 |        |             |         .!a16                        
5750:000 | DONE dir | em 16 16 |        |             |         .!xy16                       
5751:000 | DONE cmt | em 16 16 |        |             |                 ; don't use tmpdsp for X because we don't know if the user has
5752:000 | DONE cmt | em 16 16 |        |             |                 ; used it for something already
5753:000 | DONE ins | em 16 16 | 006980 | da          |                 phx                  
5754:000 | DONE ins | em 16 16 | 006981 | aa          |                 tax                  x16 contains address of string
5755:000 | DONE lbl | em 16 16 | 006982 |             | @                                    
5756:000 | DONE ins | em 16 16 | 006982 | e2 20       |                 sep 20               
5756:001 | DONE ctl | em  8 16 |        |             |         .!a8
5757:000 | DONE ins | em  8 16 | 006984 | bd 00 00    |                 lda.x 0000           LDA $0000,X
5758:000 | DONE ins | em  8 16 | 006987 | f0 06       |                 beq 00698f           
5759:000 | DONE ins | em  8 16 | 006989 | 20 a1 58    |                 jsr 0058a1           
5760:000 | DONE ins | em  8 16 | 00698c | e8          |                 inx                  
5761:000 | DONE ins | em  8 16 | 00698d | 80 f3       |                 bra 006982           
5762:000 | DONE wsp | em  8 16 |        |             |
5763:000 | DONE lbl | em  8 16 | 00698f |             | print_string_done                    
5764:000 | DONE ins | em  8 16 | 00698f | a9 0a       |                 lda.# AscLF          should be CR on some systems
5765:000 | DONE ins | em  8 16 | 006991 | 20 a1 58    |                 jsr 0058a1           
5766:000 | DONE ins | em  8 16 | 006994 | c2 20       |                 rep 20               
5766:001 | DONE ctl | em 16 16 |        |             |         .!a16
5767:000 | DONE ins | em 16 16 | 006996 | fa          |                 plx                  
5768:000 | DONE wsp | em 16 16 |        |             |
5769:000 | DONE ins | em 16 16 | 006997 | 60          |                 rts                  
5770:000 | DONE wsp | em 16 16 |        |             |
5771:000 | DONE wsp | em 16 16 |        |             |
5772:000 | DONE cmt | em 16 16 |        |             | ; -------------------------------------------------------------------
5773:000 | DONE cmt | em 16 16 |        |             | ; PRINT UNSIGNED NUMBER
5774:000 | DONE cmt | em 16 16 |        |             | ; Is the equivalent to Forth's 0 <# S# #> TYPE or U. without the SPACE at the
5775:000 | DONE cmt | em 16 16 |        |             | ; end. TODO convert this to more assembler for speed
5776:000 | DONE lbl | em 16 16 | 006998 |             | print_u                              
5777:000 | DONE ins | em 16 16 | 006998 | ca          |                 dex                  0
5778:000 | DONE ins | em 16 16 | 006999 | ca          |                 dex                  
5779:000 | DONE ins | em 16 16 | 00699a | 94 00       |                 sty.dx 00            
5780:000 | DONE ins | em 16 16 | 00699c | a0 00 00    |                 ldy.# 0000           
5781:000 | DONE wsp | em 16 16 |        |             |
5782:000 | DONE ins | em 16 16 | 00699f | 20 e2 5b    |                 jsr 005be2           <#
5783:000 | DONE ins | em 16 16 | 0069a2 | 84 18       |                 sty.d 000018         
5784:000 | DONE ins | em 16 16 | 0069a4 | b4 00       |                 ldy.dx 00            
5785:000 | DONE ins | em 16 16 | 0069a6 | e8          |                 inx                  
5786:000 | DONE ins | em 16 16 | 0069a7 | e8          |                 inx                  
5787:000 | DONE wsp | em 16 16 |        |             |
5788:000 | DONE ins | em 16 16 | 0069a8 | 20 b6 52    |                 jsr 0052b6           #S
5789:000 | DONE ins | em 16 16 | 0069ab | 20 a7 52    |                 jsr 0052a7           #>
5790:000 | DONE ins | em 16 16 | 0069ae | 20 79 5e    |                 jsr 005e79           
5791:000 | DONE wsp | em 16 16 |        |             |
5792:000 | DONE ins | em 16 16 | 0069b1 | 60          |                 rts                  
5793:000 | DONE wsp | em 16 16 |        |             |
5794:000 | DONE wsp | em 16 16 |        |             |
5795:000 | DONE cmt | em 16 16 |        |             | ; -------------------------------------------------------------------
5796:000 | DONE cmt | em 16 16 |        |             | ; CONVERT BYTE TO ASCII
5797:000 | DONE cmt | em 16 16 |        |             | ; Convert byte in A to two ASCII hex digits and print them. Calls
5798:000 | DONE cmt | em 16 16 |        |             | ; nibble_to_ascii. Assumes A is 8 bit.
5799:000 | DONE lbl | em 16 16 | 0069b2 |             | byte_to_ascii                        
5800:000 | DONE dir | em 16 16 |        |             |         .!a16                        
5801:000 | DONE ins | em 16 16 | 0069b2 | 48          |                 pha                  
5802:000 | DONE cmt | em 16 16 |        |             |                 ; convert high nibble first
5803:000 | DONE ins | em 16 16 | 0069b3 | 4a          |                 lsr.a                
5804:000 | DONE ins | em 16 16 | 0069b4 | 4a          |                 lsr.a                
5805:000 | DONE ins | em 16 16 | 0069b5 | 4a          |                 lsr.a                
5806:000 | DONE ins | em 16 16 | 0069b6 | 4a          |                 lsr.a                
5807:000 | DONE ins | em 16 16 | 0069b7 | 20 bb 69    |                 jsr 0069bb           
5808:000 | DONE wsp | em 16 16 |        |             |
5809:000 | DONE ins | em 16 16 | 0069ba | 68          |                 pla                  
5810:000 | DONE wsp | em 16 16 |        |             |
5811:000 | DONE cmt | em 16 16 |        |             |                 ; fall thru to nibble_to_ascii
5812:000 | DONE wsp | em 16 16 |        |             |
5813:000 | DONE wsp | em 16 16 |        |             |
5814:000 | DONE cmt | em 16 16 |        |             | ; -------------------------------------------------------------------
5815:000 | DONE cmt | em 16 16 |        |             | ; CONVERT NIBBLE TO ASCII
5816:000 | DONE cmt | em 16 16 |        |             | ; Converts the lower nibble of a number in A and returns the ASCII character
5817:000 | DONE cmt | em 16 16 |        |             | ; number, then prints it. Assumes A is 8 bit
5818:000 | DONE lbl | em 16 16 | 0069bb |             | nibble_to_ascii                      
5819:000 | DONE dir | em 16 16 |        |             |         .!a16                        
5820:000 | DONE ins | em 16 16 | 0069bb | 29 0f 00    |                 and.# 000f           
5821:000 | DONE ins | em 16 16 | 0069be | 09 30 00    |                 ora.# 30             
5822:000 | DONE ins | em 16 16 | 0069c1 | c9 3a 00    |                 cmp.# 003a           '9' + 1
5823:000 | DONE ins | em 16 16 | 0069c4 | 90 03       |                 bcc 0069c9           
5824:000 | DONE ins | em 16 16 | 0069c6 | 69 06 00    |                 adc.# 0006           
5825:000 | DONE lbl | em 16 16 | 0069c9 |             | @                                    
5826:000 | DONE ins | em 16 16 | 0069c9 | 20 a1 58    |                 jsr 0058a1           
5827:000 | DONE wsp | em 16 16 |        |             |
5828:000 | DONE ins | em 16 16 | 0069cc | 60          |                 rts                  
5829:000 | DONE wsp | em 16 16 |        |             |
5830:000 | DONE cmt | em 16 16 |        |             | ; ===================================================================
5831:000 | DONE cmt | em 16 16 |        |             | ; HIGH-LEVEL WORDS
5832:000 | DONE wsp | em 16 16 |        |             |
5833:000 | DONE cmt | em 16 16 |        |             | ; These are executed during start up. Remember that we have to put a space at
5834:000 | DONE cmt | em 16 16 |        |             | ; the end of the line if there is another line with code following it. No zero
5835:000 | DONE cmt | em 16 16 |        |             | ; or CR/LF is required
5836:000 | DONE lbl | em 16 16 | 0069cd |             | hi-start                             
5837:000 | DONE cmt | em 16 16 |        |             |         ; Output and comment words
5838:000 | DONE dir | em 16 16 | 0069cd | (37 bytes)  |         .byte 3a, 20, 28, 20, 5b, 63, 68, 61, 72, 5d, 20, 29, 20, (...) 
5838:000 | DONE dir | em 16 16 |        |             |                 3a 20 28 20 5b 63 68 61  --  :   (   [ c h a
5838:000 | DONE dir | em 16 16 |        |             |                 72 5d 20 29 20 70 61 72  --  r ]   )   p a r
5838:000 | DONE dir | em 16 16 |        |             |                 73 65 20 32 64 72 6f 70  --  s e   2 d r o p
5838:000 | DONE dir | em 16 16 |        |             |                 20 3b 20 69 6d 6d 65 64  --    ;   i m m e d
5838:000 | DONE dir | em 16 16 |        |             |                 69 61 74 65 20           --  i a t e  
5839:000 | DONE dir | em 16 16 | 0069f2 | (37 bytes)  |         .byte 3a, 20, 2e, 28, 20, 5b, 63, 68, 61, 72, 5d, 20, 29, (...) 
5839:000 | DONE dir | em 16 16 |        |             |                 3a 20 2e 28 20 5b 63 68  --  :   . (   [ c h
5839:000 | DONE dir | em 16 16 |        |             |                 61 72 5d 20 29 20 70 61  --  a r ]   )   p a
5839:000 | DONE dir | em 16 16 |        |             |                 72 73 65 20 74 79 70 65  --  r s e   t y p e
5839:000 | DONE dir | em 16 16 |        |             |                 20 3b 20 69 6d 6d 65 64  --    ;   i m m e d
5839:000 | DONE dir | em 16 16 |        |             |                 69 61 74 65 20           --  i a t e  
5840:000 | DONE wsp | em 16 16 |        |             |
5841:000 | DONE cmt | em 16 16 |        |             |         ; High flow control. Some of these could be realized with CS-ROLL and
5842:000 | DONE cmt | em 16 16 |        |             |         ; CS-PICK instead
5843:000 | DONE dir | em 16 16 | 006a17 | (56 bytes)  |         .byte 3a, 20, 69, 66, 20, 70, 6f, 73, 74, 70, 6f, 6e, 65, (...) 
5843:000 | DONE dir | em 16 16 |        |             |                 3a 20 69 66 20 70 6f 73  --  :   i f   p o s
5843:000 | DONE dir | em 16 16 |        |             |                 74 70 6f 6e 65 20 30 62  --  t p o n e   0 b
5843:000 | DONE dir | em 16 16 |        |             |                 72 61 6e 63 68 20 68 65  --  r a n c h   h e
5843:000 | DONE dir | em 16 16 |        |             |                 72 65 20 30 20 2c 20 3b  --  r e   0   ,   ;
5843:000 | DONE dir | em 16 16 |        |             |                 20 69 6d 6d 65 64 69 61  --    i m m e d i a
5843:000 | DONE dir | em 16 16 |        |             |                 74 65 20 63 6f 6d 70 69  --  t e   c o m p i
5843:000 | DONE dir | em 16 16 |        |             |                 6c 65 2d 6f 6e 6c 79 20  --  l e - o n l y  
5843:000 | DONE dir | em 16 16 |        |             |                                          -- 
5844:000 | DONE dir | em 16 16 | 006a4f | (44 bytes)  |         .byte 3a, 20, 74, 68, 65, 6e, 20, 68, 65, 72, 65, 20, 73, (...) 
5844:000 | DONE dir | em 16 16 |        |             |                 3a 20 74 68 65 6e 20 68  --  :   t h e n   h
5844:000 | DONE dir | em 16 16 |        |             |                 65 72 65 20 73 77 61 70  --  e r e   s w a p
5844:000 | DONE dir | em 16 16 |        |             |                 20 21 20 3b 20 69 6d 6d  --    !   ;   i m m
5844:000 | DONE dir | em 16 16 |        |             |                 65 64 69 61 74 65 20 63  --  e d i a t e   c
5844:000 | DONE dir | em 16 16 |        |             |                 6f 6d 70 69 6c 65 2d 6f  --  o m p i l e - o
5844:000 | DONE dir | em 16 16 |        |             |                 6e 6c 79 20              --  n l y  
5845:000 | DONE dir | em 16 16 | 006a7b | (68 bytes)  |         .byte 3a, 20, 65, 6c, 73, 65, 20, 70, 6f, 73, 74, 70, 6f, (...) 
5845:000 | DONE dir | em 16 16 |        |             |                 3a 20 65 6c 73 65 20 70  --  :   e l s e   p
5845:000 | DONE dir | em 16 16 |        |             |                 6f 73 74 70 6f 6e 65 20  --  o s t p o n e  
5845:000 | DONE dir | em 16 16 |        |             |                 62 72 61 6e 63 68 20 68  --  b r a n c h   h
5845:000 | DONE dir | em 16 16 |        |             |                 65 72 65 20 30 20 2c 20  --  e r e   0   ,  
5845:000 | DONE dir | em 16 16 |        |             |                 68 65 72 65 20 72 6f 74  --  h e r e   r o t
5845:000 | DONE dir | em 16 16 |        |             |                 20 21 20 3b 20 69 6d 6d  --    !   ;   i m m
5845:000 | DONE dir | em 16 16 |        |             |                 65 64 69 61 74 65 20 63  --  e d i a t e   c
5845:000 | DONE dir | em 16 16 |        |             |                 6f 6d 70 69 6c 65 2d 6f  --  o m p i l e - o
5845:000 | DONE dir | em 16 16 |        |             |                 6e 6c 79 20              --  n l y  
5846:000 | DONE dir | em 16 16 | 006abf | (61 bytes)  |         .byte 3a, 20, 72, 65, 70, 65, 61, 74, 20, 70, 6f, 73, 74, (...) 
5846:000 | DONE dir | em 16 16 |        |             |                 3a 20 72 65 70 65 61 74  --  :   r e p e a t
5846:000 | DONE dir | em 16 16 |        |             |                 20 70 6f 73 74 70 6f 6e  --    p o s t p o n
5846:000 | DONE dir | em 16 16 |        |             |                 65 20 61 67 61 69 6e 20  --  e   a g a i n  
5846:000 | DONE dir | em 16 16 |        |             |                 68 65 72 65 20 73 77 61  --  h e r e   s w a
5846:000 | DONE dir | em 16 16 |        |             |                 70 20 21 20 3b 20 69 6d  --  p   !   ;   i m
5846:000 | DONE dir | em 16 16 |        |             |                 6d 65 64 69 61 74 65 20  --  m e d i a t e  
5846:000 | DONE dir | em 16 16 |        |             |                 63 6f 6d 70 69 6c 65 2d  --  c o m p i l e -
5846:000 | DONE dir | em 16 16 |        |             |                 6f 6e 6c 79 20           --  o n l y  
5847:000 | DONE dir | em 16 16 | 006afc | (52 bytes)  |         .byte 3a, 20, 75, 6e, 74, 69, 6c, 20, 70, 6f, 73, 74, 70, (...) 
5847:000 | DONE dir | em 16 16 |        |             |                 3a 20 75 6e 74 69 6c 20  --  :   u n t i l  
5847:000 | DONE dir | em 16 16 |        |             |                 70 6f 73 74 70 6f 6e 65  --  p o s t p o n e
5847:000 | DONE dir | em 16 16 |        |             |                 20 30 62 72 61 6e 63 68  --    0 b r a n c h
5847:000 | DONE dir | em 16 16 |        |             |                 20 2c 20 3b 20 69 6d 6d  --    ,   ;   i m m
5847:000 | DONE dir | em 16 16 |        |             |                 65 64 69 61 74 65 20 63  --  e d i a t e   c
5847:000 | DONE dir | em 16 16 |        |             |                 6f 6d 70 69 6c 65 2d 6f  --  o m p i l e - o
5847:000 | DONE dir | em 16 16 |        |             |                 6e 6c 79 20              --  n l y  
5848:000 | DONE dir | em 16 16 | 006b30 | (64 bytes)  |         .byte 3a, 20, 77, 68, 69, 6c, 65, 20, 70, 6f, 73, 74, 70, (...) 
5848:000 | DONE dir | em 16 16 |        |             |                 3a 20 77 68 69 6c 65 20  --  :   w h i l e  
5848:000 | DONE dir | em 16 16 |        |             |                 70 6f 73 74 70 6f 6e 65  --  p o s t p o n e
5848:000 | DONE dir | em 16 16 |        |             |                 20 30 62 72 61 6e 63 68  --    0 b r a n c h
5848:000 | DONE dir | em 16 16 |        |             |                 20 68 65 72 65 20 30 20  --    h e r e   0  
5848:000 | DONE dir | em 16 16 |        |             |                 2c 20 73 77 61 70 20 3b  --  ,   s w a p   ;
5848:000 | DONE dir | em 16 16 |        |             |                 20 69 6d 6d 65 64 69 61  --    i m m e d i a
5848:000 | DONE dir | em 16 16 |        |             |                 74 65 20 63 6f 6d 70 69  --  t e   c o m p i
5848:000 | DONE dir | em 16 16 |        |             |                 6c 65 2d 6f 6e 6c 79 20  --  l e - o n l y  
5848:000 | DONE dir | em 16 16 |        |             |                                          -- 
5849:000 | DONE wsp | em 16 16 |        |             |
5850:000 | DONE cmt | em 16 16 |        |             |         ; DEFER's friends. Code taken from ANSI Forth specifications. Many of
5851:000 | DONE cmt | em 16 16 |        |             |         ; these will be moved to assembler code in due course
5852:000 | DONE dir | em 16 16 | 006b70 | (19 bytes)  |         .byte 3a, 20, 64, 65, 66, 65, 72, 21, 20, 3e, 62, 6f, 64, (...) 
5852:000 | DONE dir | em 16 16 |        |             |                 3a 20 64 65 66 65 72 21  --  :   d e f e r !
5852:000 | DONE dir | em 16 16 |        |             |                 20 3e 62 6f 64 79 20 21  --    > b o d y   !
5852:000 | DONE dir | em 16 16 |        |             |                 20 3b 20                 --    ;  
5853:000 | DONE dir | em 16 16 | 006b83 | (19 bytes)  |         .byte 3a, 20, 64, 65, 66, 65, 72, 40, 20, 3e, 62, 6f, 64, (...) 
5853:000 | DONE dir | em 16 16 |        |             |                 3a 20 64 65 66 65 72 40  --  :   d e f e r @
5853:000 | DONE dir | em 16 16 |        |             |                 20 3e 62 6f 64 79 20 40  --    > b o d y   @
5853:000 | DONE dir | em 16 16 |        |             |                 20 3b 20                 --    ;  
5854:000 | DONE dir | em 16 16 | 006b96 | (76 bytes)  |         .byte 3a, 20, 69, 73, 20, 73, 74, 61, 74, 65, 20, 40, 20, (...) 
5854:000 | DONE dir | em 16 16 |        |             |                 3a 20 69 73 20 73 74 61  --  :   i s   s t a
5854:000 | DONE dir | em 16 16 |        |             |                 74 65 20 40 20 69 66 20  --  t e   @   i f  
5854:000 | DONE dir | em 16 16 |        |             |                 70 6f 73 74 70 6f 6e 65  --  p o s t p o n e
5854:000 | DONE dir | em 16 16 |        |             |                 20 5b 27 5d 20 70 6f 73  --    [ ' ]   p o s
5854:000 | DONE dir | em 16 16 |        |             |                 74 70 6f 6e 65 20 64 65  --  t p o n e   d e
5854:000 | DONE dir | em 16 16 |        |             |                 66 65 72 21 20 65 6c 73  --  f e r !   e l s
5854:000 | DONE dir | em 16 16 |        |             |                 65 20 27 20 64 65 66 65  --  e   '   d e f e
5854:000 | DONE dir | em 16 16 |        |             |                 72 21 20 74 68 65 6e 20  --  r !   t h e n  
5854:000 | DONE dir | em 16 16 |        |             |                 3b 20 69 6d 6d 65 64 69  --  ;   i m m e d i
5854:000 | DONE dir | em 16 16 |        |             |                 61 74 65 20              --  a t e  
5855:000 | DONE dir | em 16 16 | 006be2 | (83 bytes)  |         .byte 3a, 20, 61, 63, 74, 69, 6f, 6e, 2d, 6f, 66, 20, 73, (...) 
5855:000 | DONE dir | em 16 16 |        |             |                 3a 20 61 63 74 69 6f 6e  --  :   a c t i o n
5855:000 | DONE dir | em 16 16 |        |             |                 2d 6f 66 20 73 74 61 74  --  - o f   s t a t
5855:000 | DONE dir | em 16 16 |        |             |                 65 20 40 20 69 66 20 70  --  e   @   i f   p
5855:000 | DONE dir | em 16 16 |        |             |                 6f 73 74 70 6f 6e 65 20  --  o s t p o n e  
5855:000 | DONE dir | em 16 16 |        |             |                 5b 27 5d 20 70 6f 73 74  --  [ ' ]   p o s t
5855:000 | DONE dir | em 16 16 |        |             |                 70 6f 6e 65 20 64 65 66  --  p o n e   d e f
5855:000 | DONE dir | em 16 16 |        |             |                 65 72 40 20 65 6c 73 65  --  e r @   e l s e
5855:000 | DONE dir | em 16 16 |        |             |                 20 27 20 64 65 66 65 72  --    '   d e f e r
5855:000 | DONE dir | em 16 16 |        |             |                 40 20 74 68 65 6e 20 3b  --  @   t h e n   ;
5855:000 | DONE dir | em 16 16 |        |             |                 20 69 6d 6d 65 64 69 61  --    i m m e d i a
5855:000 | DONE dir | em 16 16 |        |             |                 74 65 20                 --  t e  
5856:000 | DONE wsp | em 16 16 |        |             |
5857:000 | DONE cmt | em 16 16 |        |             |         ; High level math definitions. The should be moved to actual 65816 code
5858:000 | DONE cmt | em 16 16 |        |             |         ; for speed at some point. Note we use SM/REM instead of FM/MOD for most
5859:000 | DONE cmt | em 16 16 |        |             |         ; stuff
5860:000 | DONE dir | em 16 16 | 006c35 | (33 bytes)  |         .byte 3a, 20, 2f, 20, 3e, 72, 20, 73, 3e, 64, 20, 72, 3e, (...) 
5860:000 | DONE dir | em 16 16 |        |             |                 3a 20 2f 20 3e 72 20 73  --  :   /   > r   s
5860:000 | DONE dir | em 16 16 |        |             |                 3e 64 20 72 3e 20 73 6d  --  > d   r >   s m
5860:000 | DONE dir | em 16 16 |        |             |                 2f 72 65 6d 20 73 77 61  --  / r e m   s w a
5860:000 | DONE dir | em 16 16 |        |             |                 70 20 64 72 6f 70 20 3b  --  p   d r o p   ;
5860:000 | DONE dir | em 16 16 |        |             |                 20                       --   
5861:000 | DONE dir | em 16 16 | 006c56 | (26 bytes)  |         .byte 3a, 20, 2f, 6d, 6f, 64, 20, 3e, 72, 20, 73, 3e, 64, (...) 
5861:000 | DONE dir | em 16 16 |        |             |                 3a 20 2f 6d 6f 64 20 3e  --  :   / m o d   >
5861:000 | DONE dir | em 16 16 |        |             |                 72 20 73 3e 64 20 72 3e  --  r   s > d   r >
5861:000 | DONE dir | em 16 16 |        |             |                 20 73 6d 2f 72 65 6d 20  --    s m / r e m  
5861:000 | DONE dir | em 16 16 |        |             |                 3b 20                    --  ;  
5862:000 | DONE dir | em 16 16 | 006c70 | (33 bytes)  |         .byte 3a, 20, 2a, 2f, 20, 3e, 72, 20, 6d, 2a, 20, 72, 3e, (...) 
5862:000 | DONE dir | em 16 16 |        |             |                 3a 20 2a 2f 20 3e 72 20  --  :   * /   > r  
5862:000 | DONE dir | em 16 16 |        |             |                 6d 2a 20 72 3e 20 73 6d  --  m *   r >   s m
5862:000 | DONE dir | em 16 16 |        |             |                 2f 72 65 6d 20 73 77 61  --  / r e m   s w a
5862:000 | DONE dir | em 16 16 |        |             |                 70 20 64 72 6f 70 20 3b  --  p   d r o p   ;
5862:000 | DONE dir | em 16 16 |        |             |                 20                       --   
5863:000 | DONE dir | em 16 16 | 006c91 | (26 bytes)  |         .byte 3a, 20, 2a, 2f, 6d, 6f, 64, 20, 3e, 72, 20, 6d, 2a, (...) 
5863:000 | DONE dir | em 16 16 |        |             |                 3a 20 2a 2f 6d 6f 64 20  --  :   * / m o d  
5863:000 | DONE dir | em 16 16 |        |             |                 3e 72 20 6d 2a 20 72 3e  --  > r   m *   r >
5863:000 | DONE dir | em 16 16 |        |             |                 20 73 6d 2f 72 65 6d 20  --    s m / r e m  
5863:000 | DONE dir | em 16 16 |        |             |                 3b 20                    --  ;  
5864:000 | DONE wsp | em 16 16 |        |             |
5865:000 | DONE cmt | em 16 16 |        |             |         ; Output definitions. Since these usually involve the user, and humans
5866:000 | DONE cmt | em 16 16 |        |             |         ; are slow, these can stay high-level for the moment. Based on
5867:000 | DONE cmt | em 16 16 |        |             |         ; https://github.com/philburk/pforth/blob/master/fth/numberio.fth
5868:000 | DONE cmt | em 16 16 |        |             |         ; . (DOT) and U. are hard-coded because there are used by other words
5869:000 | DONE dir | em 16 16 | 006cab | (44 bytes)  |         .byte 3a, 20, 75, 2e, 72, 20, 3e, 72, 20, 30, 20, 3c, 23, (...) 
5869:000 | DONE dir | em 16 16 |        |             |                 3a 20 75 2e 72 20 3e 72  --  :   u . r   > r
5869:000 | DONE dir | em 16 16 |        |             |                 20 30 20 3c 23 20 23 73  --    0   < #   # s
5869:000 | DONE dir | em 16 16 |        |             |                 20 23 3e 20 72 3e 20 6f  --    # >   r >   o
5869:000 | DONE dir | em 16 16 |        |             |                 76 65 72 20 2d 20 73 70  --  v e r   -   s p
5869:000 | DONE dir | em 16 16 |        |             |                 61 63 65 73 20 74 79 70  --  a c e s   t y p
5869:000 | DONE dir | em 16 16 |        |             |                 65 20 3b 20              --  e   ;  
5870:000 | DONE dir | em 16 16 | 006cd7 | (60 bytes)  |         .byte 3a, 20, 2e, 72, 20, 3e, 72, 20, 64, 75, 70, 20, 61, (...) 
5870:000 | DONE dir | em 16 16 |        |             |                 3a 20 2e 72 20 3e 72 20  --  :   . r   > r  
5870:000 | DONE dir | em 16 16 |        |             |                 64 75 70 20 61 62 73 20  --  d u p   a b s  
5870:000 | DONE dir | em 16 16 |        |             |                 30 20 3c 23 20 23 73 20  --  0   < #   # s  
5870:000 | DONE dir | em 16 16 |        |             |                 72 6f 74 20 73 69 67 6e  --  r o t   s i g n
5870:000 | DONE dir | em 16 16 |        |             |                 20 23 3e 20 72 3e 20 6f  --    # >   r >   o
5870:000 | DONE dir | em 16 16 |        |             |                 76 65 72 20 2d 20 73 70  --  v e r   -   s p
5870:000 | DONE dir | em 16 16 |        |             |                 61 63 65 73 20 74 79 70  --  a c e s   t y p
5870:000 | DONE dir | em 16 16 |        |             |                 65 20 3b 20              --  e   ;  
5871:000 | DONE dir | em 16 16 | 006d13 | (28 bytes)  |         .byte 3a, 20, 75, 64, 2e, 20, 3c, 23, 20, 23, 73, 20, 23, (...) 
5871:000 | DONE dir | em 16 16 |        |             |                 3a 20 75 64 2e 20 3c 23  --  :   u d .   < #
5871:000 | DONE dir | em 16 16 |        |             |                 20 23 73 20 23 3e 20 74  --    # s   # >   t
5871:000 | DONE dir | em 16 16 |        |             |                 79 70 65 20 73 70 61 63  --  y p e   s p a c
5871:000 | DONE dir | em 16 16 |        |             |                 65 20 3b 20              --  e   ;  
5872:000 | DONE dir | em 16 16 | 006d2f | (43 bytes)  |         .byte 3a, 20, 75, 64, 2e, 72, 20, 3e, 72, 20, 3c, 23, 20, (...) 
5872:000 | DONE dir | em 16 16 |        |             |                 3a 20 75 64 2e 72 20 3e  --  :   u d . r   >
5872:000 | DONE dir | em 16 16 |        |             |                 72 20 3c 23 20 23 73 20  --  r   < #   # s  
5872:000 | DONE dir | em 16 16 |        |             |                 23 3e 20 72 3e 20 6f 76  --  # >   r >   o v
5872:000 | DONE dir | em 16 16 |        |             |                 65 72 20 2d 20 73 70 61  --  e r   -   s p a
5872:000 | DONE dir | em 16 16 |        |             |                 63 65 73 20 74 79 70 65  --  c e s   t y p e
5872:000 | DONE dir | em 16 16 |        |             |                 20 3b 20                 --    ;  
5873:000 | DONE dir | em 16 16 | 006d5a | (46 bytes)  |         .byte 3a, 20, 64, 2e, 20, 74, 75, 63, 6b, 20, 64, 61, 62, (...) 
5873:000 | DONE dir | em 16 16 |        |             |                 3a 20 64 2e 20 74 75 63  --  :   d .   t u c
5873:000 | DONE dir | em 16 16 |        |             |                 6b 20 64 61 62 73 20 3c  --  k   d a b s   <
5873:000 | DONE dir | em 16 16 |        |             |                 23 20 23 73 20 72 6f 74  --  #   # s   r o t
5873:000 | DONE dir | em 16 16 |        |             |                 20 73 69 67 6e 20 23 3e  --    s i g n   # >
5873:000 | DONE dir | em 16 16 |        |             |                 20 74 79 70 65 20 73 70  --    t y p e   s p
5873:000 | DONE dir | em 16 16 |        |             |                 61 63 65 20 3b 20        --  a c e   ;  
5874:000 | DONE dir | em 16 16 | 006d88 | (61 bytes)  |         .byte 3a, 20, 64, 2e, 72, 20, 3e, 72, 20, 74, 75, 63, 6b, (...) 
5874:000 | DONE dir | em 16 16 |        |             |                 3a 20 64 2e 72 20 3e 72  --  :   d . r   > r
5874:000 | DONE dir | em 16 16 |        |             |                 20 74 75 63 6b 20 64 61  --    t u c k   d a
5874:000 | DONE dir | em 16 16 |        |             |                 62 73 20 3c 23 20 23 73  --  b s   < #   # s
5874:000 | DONE dir | em 16 16 |        |             |                 20 72 6f 74 20 73 69 67  --    r o t   s i g
5874:000 | DONE dir | em 16 16 |        |             |                 6e 20 23 3e 20 72 3e 20  --  n   # >   r >  
5874:000 | DONE dir | em 16 16 |        |             |                 6f 76 65 72 20 2d 20 73  --  o v e r   -   s
5874:000 | DONE dir | em 16 16 |        |             |                 70 61 63 65 73 20 74 79  --  p a c e s   t y
5874:000 | DONE dir | em 16 16 |        |             |                 70 65 20 3b 20           --  p e   ;  
5875:000 | DONE wsp | em 16 16 |        |             |
5876:000 | DONE cmt | em 16 16 |        |             |         ; LOOP constructs. See discussion at
5877:000 | DONE cmt | em 16 16 |        |             | 	; https://blogs.msdn.microsoft.com/ashleyf/2011/02/06/loopty-do-i-loop/
5878:000 | DONE cmt | em 16 16 |        |             | 	; .byte ": do postpone (do) here ; immediate compile-only "
5879:000 | DONE cmt | em 16 16 |        |             | 	; .byte ": +loop postpone (+loop) , postpone unloop ; immediate compile-only "
5880:000 | DONE cmt | em 16 16 |        |             | 	; .byte ": loop postpone 1 postpone (+loop) , postpone unloop ; immediate compile-only "
5881:000 | DONE cmt | em 16 16 |        |             |         ; .byte ": leave postpone branch here swap 0 , ; immediate compile-only "
5882:000 | DONE wsp | em 16 16 |        |             |
5883:000 | DONE cmt | em 16 16 |        |             |         ; DUMP is a longish word we'll want to modify for a while until we are
5884:000 | DONE cmt | em 16 16 |        |             |         ; happy with the format
5885:000 | DONE cmt | em 16 16 |        |             |         ; .byte ": dump bounds ?do cr i 4 u.r space"
5886:000 | DONE cmt | em 16 16 |        |             | 	; .byte "16 0 do i j + c@ 0 <# # #s #> type space loop 16 +loop ;"
5887:000 | DONE wsp | em 16 16 |        |             |
5888:000 | DONE cmt | em 16 16 |        |             |         ; SEE is a longish word we'll want to modify for a while until we are
5889:000 | DONE cmt | em 16 16 |        |             |         ; happy with the format
5890:000 | DONE dir | em 16 16 | 006dc5 | (55 bytes)  |         .byte 3a, 20, 73, 65, 65, 20, 70, 61, 72, 73, 65, 2d, 6e, (...) 
5890:000 | DONE dir | em 16 16 |        |             |                 3a 20 73 65 65 20 70 61  --  :   s e e   p a
5890:000 | DONE dir | em 16 16 |        |             |                 72 73 65 2d 6e 61 6d 65  --  r s e - n a m e
5890:000 | DONE dir | em 16 16 |        |             |                 20 66 69 6e 64 2d 6e 61  --    f i n d - n a
5890:000 | DONE dir | em 16 16 |        |             |                 6d 65 20 64 75 70 20 30  --  m e   d u p   0
5890:000 | DONE dir | em 16 16 |        |             |                 3d 20 61 62 6f 72 74 22  --  =   a b o r t "
5890:000 | DONE dir | em 16 16 |        |             |                 20 4e 6f 20 73 75 63 68  --    N o   s u c h
5890:000 | DONE dir | em 16 16 |        |             |                 20 6e 61 6d 65 22 20     --    n a m e "  
5891:000 | DONE dir | em 16 16 | 006dfc | (38 bytes)  |         .byte 62, 61, 73, 65, 20, 40, 20, 3e, 72, 20, 68, 65, 78, (...) 
5891:000 | DONE dir | em 16 16 |        |             |                 62 61 73 65 20 40 20 3e  --  b a s e   @   >
5891:000 | DONE dir | em 16 16 |        |             |                 72 20 68 65 78 20 64 75  --  r   h e x   d u
5891:000 | DONE dir | em 16 16 |        |             |                 70 20 63 72 20 73 70 61  --  p   c r   s p a
5891:000 | DONE dir | em 16 16 |        |             |                 63 65 20 2e 22 20 6e 74  --  c e   . "   n t
5891:000 | DONE dir | em 16 16 |        |             |                 3a 20 22 20 2e 20        --  :   "   .  
5892:000 | DONE dir | em 16 16 | 006e22 | (27 bytes)  |         .byte 64, 75, 70, 20, 34, 20, 2b, 20, 40, 20, 73, 70, 61, (...) 
5892:000 | DONE dir | em 16 16 |        |             |                 64 75 70 20 34 20 2b 20  --  d u p   4   +  
5892:000 | DONE dir | em 16 16 |        |             |                 40 20 73 70 61 63 65 20  --  @   s p a c e  
5892:000 | DONE dir | em 16 16 |        |             |                 2e 22 20 78 74 3a 20 22  --  . "   x t :   "
5892:000 | DONE dir | em 16 16 |        |             |                 20 2e 20                 --    .  
5893:000 | DONE dir | em 16 16 | 006e3d | (37 bytes)  |         .byte 64, 75, 70, 20, 31, 2b, 20, 63, 40, 20, 31, 20, 61, (...) 
5893:000 | DONE dir | em 16 16 |        |             |                 64 75 70 20 31 2b 20 63  --  d u p   1 +   c
5893:000 | DONE dir | em 16 16 |        |             |                 40 20 31 20 61 6e 64 20  --  @   1   a n d  
5893:000 | DONE dir | em 16 16 |        |             |                 69 66 20 73 70 61 63 65  --  i f   s p a c e
5893:000 | DONE dir | em 16 16 |        |             |                 20 2e 22 20 4e 43 22 20  --    . "   N C "  
5893:000 | DONE dir | em 16 16 |        |             |                 74 68 65 6e 20           --  t h e n  
5894:000 | DONE dir | em 16 16 | 006e62 | (37 bytes)  |         .byte 64, 75, 70, 20, 31, 2b, 20, 63, 40, 20, 32, 20, 61, (...) 
5894:000 | DONE dir | em 16 16 |        |             |                 64 75 70 20 31 2b 20 63  --  d u p   1 +   c
5894:000 | DONE dir | em 16 16 |        |             |                 40 20 32 20 61 6e 64 20  --  @   2   a n d  
5894:000 | DONE dir | em 16 16 |        |             |                 69 66 20 73 70 61 63 65  --  i f   s p a c e
5894:000 | DONE dir | em 16 16 |        |             |                 20 2e 22 20 49 4d 22 20  --    . "   I M "  
5894:000 | DONE dir | em 16 16 |        |             |                 74 68 65 6e 20           --  t h e n  
5895:000 | DONE dir | em 16 16 | 006e87 | (37 bytes)  |         .byte 64, 75, 70, 20, 31, 2b, 20, 63, 40, 20, 34, 20, 61, (...) 
5895:000 | DONE dir | em 16 16 |        |             |                 64 75 70 20 31 2b 20 63  --  d u p   1 +   c
5895:000 | DONE dir | em 16 16 |        |             |                 40 20 34 20 61 6e 64 20  --  @   4   a n d  
5895:000 | DONE dir | em 16 16 |        |             |                 69 66 20 73 70 61 63 65  --  i f   s p a c e
5895:000 | DONE dir | em 16 16 |        |             |                 20 2e 22 20 43 4f 22 20  --    . "   C O "  
5895:000 | DONE dir | em 16 16 |        |             |                 74 68 65 6e 20           --  t h e n  
5896:000 | DONE dir | em 16 16 | 006eac | (57 bytes)  |         .byte 64, 75, 70, 20, 63, 72, 20, 73, 70, 61, 63, 65, 20, (...) 
5896:000 | DONE dir | em 16 16 |        |             |                 64 75 70 20 63 72 20 73  --  d u p   c r   s
5896:000 | DONE dir | em 16 16 |        |             |                 70 61 63 65 20 2e 22 20  --  p a c e   . "  
5896:000 | DONE dir | em 16 16 |        |             |                 73 69 7a 65 20 28 64 65  --  s i z e   ( d e
5896:000 | DONE dir | em 16 16 |        |             |                 63 69 6d 61 6c 29 3a 20  --  c i m a l ) :  
5896:000 | DONE dir | em 16 16 |        |             |                 22 20 64 65 63 69 6d 61  --  "   d e c i m a
5896:000 | DONE dir | em 16 16 |        |             |                 6c 20 77 6f 72 64 73 69  --  l   w o r d s i
5896:000 | DONE dir | em 16 16 |        |             |                 7a 65 20 64 75 70 20 2e  --  z e   d u p   .
5896:000 | DONE dir | em 16 16 |        |             |                 20                       --   
5897:000 | DONE dir | em 16 16 | 006ee5 | (49 bytes)  |         .byte 73, 77, 61, 70, 20, 6e, 61, 6d, 65, 3e, 69, 6e, 74, (...) 
5897:000 | DONE dir | em 16 16 |        |             |                 73 77 61 70 20 6e 61 6d  --  s w a p   n a m
5897:000 | DONE dir | em 16 16 |        |             |                 65 3e 69 6e 74 20 73 77  --  e > i n t   s w
5897:000 | DONE dir | em 16 16 |        |             |                 61 70 20 68 65 78 20 63  --  a p   h e x   c
5897:000 | DONE dir | em 16 16 |        |             |                 72 20 73 70 61 63 65 20  --  r   s p a c e  
5897:000 | DONE dir | em 16 16 |        |             |                 64 75 6d 70 20 72 3e 20  --  d u m p   r >  
5897:000 | DONE dir | em 16 16 |        |             |                 62 61 73 65 20 21 20 3b  --  b a s e   !   ;
5897:000 | DONE dir | em 16 16 |        |             |                 20                       --   
5898:000 | DONE wsp | em 16 16 |        |             |
5899:000 | DONE cmt | em 16 16 |        |             | ; ===================================================================
5900:000 | DONE cmt | em 16 16 |        |             | ; USER INCLUDES
5901:000 | DONE wsp | em 16 16 |        |             |
5902:000 | DONE cmt | em 16 16 |        |             | ; Include any Forth words defined by the user in USER.TASM
5903:000 | DONE wsp | em 16 16 |        |             |
5905:000 | DONE wsp | em 16 16 |        |             |
5906:000 | DONE cmt | em 16 16 |        |             | ; ===================================================================
5907:000 | DONE wsp | em 16 16 |        |             |
5908:000 | DONE cmt | em 16 16 |        |             |         ; Splash strings. We leave these as high-level words because they are
5909:000 | DONE cmt | em 16 16 |        |             |         ; generated at the end of the boot process and signal that the other
5910:000 | DONE cmt | em 16 16 |        |             |         ; high-level definitions worked (or at least didn't crash)
5911:000 | DONE dir | em 16 16 | 006f16 | (35 bytes)  |         .byte 2e, 28, 20, 4c, 69, 61, 72, 61, 20, 46, 6f, 72, 74, (...) 
5911:000 | DONE dir | em 16 16 |        |             |                 2e 28 20 4c 69 61 72 61  --  . (   L i a r a
5911:000 | DONE dir | em 16 16 |        |             |                 20 46 6f 72 74 68 20 66  --    F o r t h   f
5911:000 | DONE dir | em 16 16 |        |             |                 6f 72 20 74 68 65 20 57  --  o r   t h e   W
5911:000 | DONE dir | em 16 16 |        |             |                 36 35 43 32 36 35 53 58  --  6 5 C 2 6 5 S X
5911:000 | DONE dir | em 16 16 |        |             |                 42 20 29                 --  B   )
5912:000 | DONE dir | em 16 16 | 006f39 | (39 bytes)  |         .byte 63, 72, 20, 2e, 28, 20, 56, 65, 72, 73, 69, 6f, 6e, (...) 
5912:000 | DONE dir | em 16 16 |        |             |                 63 72 20 2e 28 20 56 65  --  c r   . (   V e
5912:000 | DONE dir | em 16 16 |        |             |                 72 73 69 6f 6e 20 50 52  --  r s i o n   P R
5912:000 | DONE dir | em 16 16 |        |             |                 45 2d 41 4c 50 48 41 20  --  E - A L P H A  
5912:000 | DONE dir | em 16 16 |        |             |                 31 32 2e 20 4d 61 72 63  --  1 2 .   M a r c
5912:000 | DONE dir | em 16 16 |        |             |                 68 20 32 30 31 37 29     --  h   2 0 1 7 )
5913:000 | DONE dir | em 16 16 | 006f60 | (51 bytes)  |         .byte 63, 72, 20, 2e, 28, 20, 53, 63, 6f, 74, 20, 57, 2e, (...) 
5913:000 | DONE dir | em 16 16 |        |             |                 63 72 20 2e 28 20 53 63  --  c r   . (   S c
5913:000 | DONE dir | em 16 16 |        |             |                 6f 74 20 57 2e 20 53 74  --  o t   W .   S t
5913:000 | DONE dir | em 16 16 |        |             |                 65 76 65 6e 73 6f 6e 20  --  e v e n s o n  
5913:000 | DONE dir | em 16 16 |        |             |                 3c 73 63 6f 74 2e 73 74  --  < s c o t . s t
5913:000 | DONE dir | em 16 16 |        |             |                 65 76 65 6e 73 6f 6e 40  --  e v e n s o n @
5913:000 | DONE dir | em 16 16 |        |             |                 67 6d 61 69 6c 2e 63 6f  --  g m a i l . c o
5913:000 | DONE dir | em 16 16 |        |             |                 6d 3e 29                 --  m > )
5914:000 | DONE dir | em 16 16 | 006f93 | (52 bytes)  |         .byte 63, 72, 20, 2e, 28, 20, 4c, 69, 61, 72, 61, 20, 46, (...) 
5914:000 | DONE dir | em 16 16 |        |             |                 63 72 20 2e 28 20 4c 69  --  c r   . (   L i
5914:000 | DONE dir | em 16 16 |        |             |                 61 72 61 20 46 6f 72 74  --  a r a   F o r t
5914:000 | DONE dir | em 16 16 |        |             |                 68 20 63 6f 6d 65 73 20  --  h   c o m e s  
5914:000 | DONE dir | em 16 16 |        |             |                 77 69 74 68 20 61 62 73  --  w i t h   a b s
5914:000 | DONE dir | em 16 16 |        |             |                 6f 6c 75 74 65 6c 79 20  --  o l u t e l y  
5914:000 | DONE dir | em 16 16 |        |             |                 4e 4f 20 57 41 52 52 41  --  N O   W A R R A
5914:000 | DONE dir | em 16 16 |        |             |                 4e 54 59 29              --  N T Y )
5915:000 | DONE dir | em 16 16 | 006fc7 | (28 bytes)  |         .byte 63, 72, 20, 2e, 28, 20, 54, 79, 70, 65, 20, 27, 62, (...) 
5915:000 | DONE dir | em 16 16 |        |             |                 63 72 20 2e 28 20 54 79  --  c r   . (   T y
5915:000 | DONE dir | em 16 16 |        |             |                 70 65 20 27 62 79 65 27  --  p e   ' b y e '
5915:000 | DONE dir | em 16 16 |        |             |                 20 74 6f 20 65 78 69 74  --    t o   e x i t
5915:000 | DONE dir | em 16 16 |        |             |                 29 20 63 72              --  )   c r
5916:000 | DONE lbl | em 16 16 | 006fe3 |             | hi-end                               
5917:000 | DONE wsp | em 16 16 |        |             |
5918:000 | DONE wsp | em 16 16 |        |             |
5919:000 | DONE cmt | em 16 16 |        |             | ; ===================================================================
5920:000 | DONE cmt | em 16 16 |        |             | ; BOTTOM INCLUDES
5921:000 | DONE wsp | em 16 16 |        |             |
5922:000 | DONE cmt | em 16 16 |        |             | ; List of Strings for Liara Forth for the W65C265SXB
5922:001 | DONE cmt | em 16 16 |        |             | ; Scot W. Stevenson <scot.stevenson@gmail.com>
5922:002 | DONE cmt | em 16 16 |        |             | ; First version: 01. Apr 2016
5922:003 | DONE cmt | em 16 16 |        |             | ; This version:  11. Mar 2017
5922:004 | DONE wsp | em 16 16 |        |             |
5922:005 | DONE cmt | em 16 16 |        |             | ; This file is included by liaraforth.tasm
5922:006 | DONE wsp | em 16 16 |        |             |
5922:007 | DONE cmt | em 16 16 |        |             | ; ===================================================================
5922:008 | DONE cmt | em 16 16 |        |             | ; GENERAL
5922:009 | DONE wsp | em 16 16 |        |             |
5922:010 | DONE cmt | em 16 16 |        |             | ; All general strings must be zero-terminated, names start with "s_"
5922:011 | DONE wsp | em 16 16 |        |             |
5922:012 | DONE lbl | em 16 16 | 006fe3 |             | s_ok                                 
5922:013 | DONE dir | em 16 16 | 006fe3 | (4 bytes)   |         .byte 20, 6f, 6b, 0          note space at beginning
5922:013 | DONE dir | em 16 16 |        |             |                 20 6f 6b 00              --    o k .
5922:014 | DONE lbl | em 16 16 | 006fe7 |             | s_compiled                           
5922:015 | DONE dir | em 16 16 | 006fe7 | (10 bytes)  |         .byte 20, 63, 6f, 6d, 70, 69, 6c, 65, 64, 0 
5922:015 | DONE dir | em 16 16 |        |             |                 20 63 6f 6d 70 69 6c 65  --    c o m p i l e
5922:015 | DONE dir | em 16 16 |        |             |                 64 00                    --  d .
5922:016 | DONE wsp | em 16 16 |        |             |
5922:017 | DONE wsp | em 16 16 |        |             |
5922:018 | DONE cmt | em 16 16 |        |             | ; ===================================================================
5922:019 | DONE cmt | em 16 16 |        |             | ; ERROR STRINGS
5922:020 | DONE wsp | em 16 16 |        |             |
5922:021 | DONE cmt | em 16 16 |        |             | ; All error strings must be zero-terminated, names start with "es_"
5922:022 | DONE wsp | em 16 16 |        |             |
5922:023 | DONE lbl | em 16 16 | 006ff1 |             | es_allot                             
5922:024 | DONE dir | em 16 16 | 006ff1 | (20 bytes)  |         .byte 41, 4c, 4c, 4f, 54, 20, 6f, 75, 74, 20, 6f, 66, 20, (...) 
5922:024 | DONE dir | em 16 16 |        |             |                 41 4c 4c 4f 54 20 6f 75  --  A L L O T   o u
5922:024 | DONE dir | em 16 16 |        |             |                 74 20 6f 66 20 62 6f 75  --  t   o f   b o u
5922:024 | DONE dir | em 16 16 |        |             |                 6e 64 73 00              --  n d s .
5922:025 | DONE lbl | em 16 16 | 007005 |             | es_componly                          
5922:026 | DONE dir | em 16 16 | 007005 | (33 bytes)  |         .byte 49, 6e, 74, 65, 72, 70, 72, 65, 74, 69, 6e, 67, 20, (...) 
5922:026 | DONE dir | em 16 16 |        |             |                 49 6e 74 65 72 70 72 65  --  I n t e r p r e
5922:026 | DONE dir | em 16 16 |        |             |                 74 69 6e 67 20 61 20 63  --  t i n g   a   c
5922:026 | DONE dir | em 16 16 |        |             |                 6f 6d 70 69 6c 65 2d 6f  --  o m p i l e - o
5922:026 | DONE dir | em 16 16 |        |             |                 6e 6c 79 20 77 6f 72 64  --  n l y   w o r d
5922:026 | DONE dir | em 16 16 |        |             |                 00                       --  .
5922:027 | DONE lbl | em 16 16 | 007026 |             | es_defer                             
5922:028 | DONE dir | em 16 16 | 007026 | (29 bytes)  |         .byte 44, 45, 46, 45, 52, 65, 64, 20, 77, 6f, 72, 64, 20, (...) 
5922:028 | DONE dir | em 16 16 |        |             |                 44 45 46 45 52 65 64 20  --  D E F E R e d  
5922:028 | DONE dir | em 16 16 |        |             |                 77 6f 72 64 20 6e 6f 74  --  w o r d   n o t
5922:028 | DONE dir | em 16 16 |        |             |                 20 64 65 66 69 6e 65 64  --    d e f i n e d
5922:028 | DONE dir | em 16 16 |        |             |                 20 79 65 74 00           --    y e t .
5922:029 | DONE lbl | em 16 16 | 007043 |             | es_divzero                           
5922:030 | DONE dir | em 16 16 | 007043 | (17 bytes)  |         .byte 44, 69, 76, 69, 73, 69, 6f, 6e, 20, 62, 79, 20, 7a, (...) 
5922:030 | DONE dir | em 16 16 |        |             |                 44 69 76 69 73 69 6f 6e  --  D i v i s i o n
5922:030 | DONE dir | em 16 16 |        |             |                 20 62 79 20 7a 65 72 6f  --    b y   z e r o
5922:030 | DONE dir | em 16 16 |        |             |                 00                       --  .
5922:031 | DONE lbl | em 16 16 | 007054 |             | es_error                             
5922:032 | DONE dir | em 16 16 | 007054 | (12 bytes)  |         .byte 3e, 3e, 3e, 45, 72, 72, 6f, 72, 3c, 3c, 3c, 0 
5922:032 | DONE dir | em 16 16 |        |             |                 3e 3e 3e 45 72 72 6f 72  --  > > > E r r o r
5922:032 | DONE dir | em 16 16 |        |             |                 3c 3c 3c 00              --  < < < .
5922:033 | DONE lbl | em 16 16 | 007060 |             | es_intonly                           
5922:034 | DONE dir | em 16 16 | 007060 | (22 bytes)  |         .byte 4e, 6f, 74, 20, 69, 6e, 20, 69, 6e, 74, 65, 72, 70, (...) 
5922:034 | DONE dir | em 16 16 |        |             |                 4e 6f 74 20 69 6e 20 69  --  N o t   i n   i
5922:034 | DONE dir | em 16 16 |        |             |                 6e 74 65 72 70 72 65 74  --  n t e r p r e t
5922:034 | DONE dir | em 16 16 |        |             |                 20 6d 6f 64 65 00        --    m o d e .
5922:035 | DONE lbl | em 16 16 | 007076 |             | es_noname                            
5922:036 | DONE dir | em 16 16 | 007076 | (16 bytes)  |         .byte 50, 61, 72, 73, 69, 6e, 67, 20, 66, 61, 69, 6c, 75, (...) 
5922:036 | DONE dir | em 16 16 |        |             |                 50 61 72 73 69 6e 67 20  --  P a r s i n g  
5922:036 | DONE dir | em 16 16 |        |             |                 66 61 69 6c 75 72 65 00  --  f a i l u r e .
5922:036 | DONE dir | em 16 16 |        |             |                                          -- 
5922:037 | DONE lbl | em 16 16 | 007086 |             | es_radix                             
5922:038 | DONE dir | em 16 16 | 007086 | (23 bytes)  |         .byte 44, 69, 67, 69, 74, 20, 6c, 61, 72, 67, 65, 72, 20, (...) 
5922:038 | DONE dir | em 16 16 |        |             |                 44 69 67 69 74 20 6c 61  --  D i g i t   l a
5922:038 | DONE dir | em 16 16 |        |             |                 72 67 65 72 20 74 68 61  --  r g e r   t h a
5922:038 | DONE dir | em 16 16 |        |             |                 6e 20 62 61 73 65 00     --  n   b a s e .
5922:039 | DONE lbl | em 16 16 | 00709d |             | es_refill1                           
5922:040 | DONE dir | em 16 16 | 00709d | (46 bytes)  |         .byte 51, 55, 49, 54, 20, 63, 6f, 75, 6c, 64, 20, 6e, 6f, (...) 
5922:040 | DONE dir | em 16 16 |        |             |                 51 55 49 54 20 63 6f 75  --  Q U I T   c o u
5922:040 | DONE dir | em 16 16 |        |             |                 6c 64 20 6e 6f 74 20 67  --  l d   n o t   g
5922:040 | DONE dir | em 16 16 |        |             |                 65 74 20 69 6e 70 75 74  --  e t   i n p u t
5922:040 | DONE dir | em 16 16 |        |             |                 20 28 52 45 46 49 4c 4c  --    ( R E F I L L
5922:040 | DONE dir | em 16 16 |        |             |                 20 72 65 74 75 72 6e 65  --    r e t u r n e
5922:040 | DONE dir | em 16 16 |        |             |                 64 20 2d 31 29 00        --  d   - 1 ) .
5922:041 | DONE lbl | em 16 16 | 0070cb |             | es_refill2                           
5922:042 | DONE dir | em 16 16 | 0070cb | (32 bytes)  |         .byte 49, 6c, 6c, 65, 67, 61, 6c, 20, 53, 4f, 55, 52, 43, (...) 
5922:042 | DONE dir | em 16 16 |        |             |                 49 6c 6c 65 67 61 6c 20  --  I l l e g a l  
5922:042 | DONE dir | em 16 16 |        |             |                 53 4f 55 52 43 45 2d 49  --  S O U R C E - I
5922:042 | DONE dir | em 16 16 |        |             |                 44 20 64 75 72 69 6e 67  --  D   d u r i n g
5922:042 | DONE dir | em 16 16 |        |             |                 20 52 45 46 49 4c 4c 00  --    R E F I L L .
5922:042 | DONE dir | em 16 16 |        |             |                                          -- 
5922:043 | DONE lbl | em 16 16 | 0070eb |             | es_state                             
5922:044 | DONE dir | em 16 16 | 0070eb | (24 bytes)  |         .byte 41, 6c, 72, 65, 61, 64, 79, 20, 69, 6e, 20, 63, 6f, (...) 
5922:044 | DONE dir | em 16 16 |        |             |                 41 6c 72 65 61 64 79 20  --  A l r e a d y  
5922:044 | DONE dir | em 16 16 |        |             |                 69 6e 20 63 6f 6d 70 69  --  i n   c o m p i
5922:044 | DONE dir | em 16 16 |        |             |                 6c 65 20 6d 6f 64 65 00  --  l e   m o d e .
5922:044 | DONE dir | em 16 16 |        |             |                                          -- 
5922:045 | DONE lbl | em 16 16 | 007103 |             | es_underflow                         
5922:046 | DONE dir | em 16 16 | 007103 | (16 bytes)  |         .byte 53, 74, 61, 63, 6b, 20, 75, 6e, 64, 65, 72, 66, 6c, (...) 
5922:046 | DONE dir | em 16 16 |        |             |                 53 74 61 63 6b 20 75 6e  --  S t a c k   u n
5922:046 | DONE dir | em 16 16 |        |             |                 64 65 72 66 6c 6f 77 00  --  d e r f l o w .
5922:046 | DONE dir | em 16 16 |        |             |                                          -- 
5922:047 | DONE lbl | em 16 16 | 007113 |             | es_syntax                            
5922:048 | DONE dir | em 16 16 | 007113 | (15 bytes)  |         .byte 55, 6e, 64, 65, 66, 69, 6e, 65, 64, 20, 77, 6f, 72, (...) 
5922:048 | DONE dir | em 16 16 |        |             |                 55 6e 64 65 66 69 6e 65  --  U n d e f i n e
5922:048 | DONE dir | em 16 16 |        |             |                 64 20 77 6f 72 64 00     --  d   w o r d .
5922:049 | DONE wsp | em 16 16 |        |             |
5922:050 | DONE wsp | em 16 16 |        |             |
5922:051 | DONE cmt | em 16 16 |        |             | ; ===================================================================
5922:052 | DONE cmt | em 16 16 |        |             | ; ANSI VT-100 SEQUENCES
5922:053 | DONE wsp | em 16 16 |        |             |
5922:054 | DONE lbl | em 16 16 | 007122 |             | vt100_page                           
5922:055 | DONE dir | em 16 16 | 007122 | (5 bytes)   |         .byte AscESC, 5b, 32, 4a, 0  clear screen
5922:055 | DONE dir | em 16 16 |        |             |                 1b 5b 32 4a 00           --  . [ 2 J .
5922:056 | DONE lbl | em 16 16 | 007127 |             | vt100_home                           
5922:057 | DONE dir | em 16 16 | 007127 | (4 bytes)   |         .byte AscESC, 5b, 48, 0      cursor home
5922:057 | DONE dir | em 16 16 |        |             |                 1b 5b 48 00              --  . [ H .
5922:058 | DONE wsp | em 16 16 |        |             |
5922:059 | DONE wsp | em 16 16 |        |             |
5922:060 | DONE cmt | em 16 16 |        |             | ; ===================================================================
5922:061 | DONE cmt | em 16 16 |        |             | ; TESTING STRINGS
5922:062 | DONE wsp | em 16 16 |        |             |
5922:063 | DONE cmt | em 16 16 |        |             | ; These strings are only used during testing and are removed as Liara Forth is
5922:064 | DONE cmt | em 16 16 |        |             | ; developed. All start with "tests_"
5922:065 | DONE wsp | em 16 16 |        |             |
5922:066 | DONE lbl | em 16 16 | 00712b |             | tests_prev_cmd                       
5922:067 | DONE dir | em 16 16 | 00712b | (19 bytes)  |         .byte 28, 70, 72, 65, 76, 69, 6f, 75, 73, 20, 63, 6f, 6d, (...) 
5922:067 | DONE dir | em 16 16 |        |             |                 28 70 72 65 76 69 6f 75  --  ( p r e v i o u
5922:067 | DONE dir | em 16 16 |        |             |                 73 20 63 6f 6d 6d 61 6e  --  s   c o m m a n
5922:067 | DONE dir | em 16 16 |        |             |                 64 29 00                 --  d ) .
5922:068 | DONE lbl | em 16 16 | 00713e |             | tests_next_cmd                       
5922:069 | DONE dir | em 16 16 | 00713e | (15 bytes)  |         .byte 28, 6e, 65, 78, 74, 20, 63, 6f, 6d, 6d, 61, 6e, 64, (...) 
5922:069 | DONE dir | em 16 16 |        |             |                 28 6e 65 78 74 20 63 6f  --  ( n e x t   c o
5922:069 | DONE dir | em 16 16 |        |             |                 6d 6d 61 6e 64 29 00     --  m m a n d ) .
5922:070 | DONE wsp | em 16 16 |        |             |
5922:071 | DONE wsp | em 16 16 |        |             |
5922:072 | DONE cmt | em 16 16 |        |             | ; ===================================================================
5922:073 | DONE cmt | em 16 16 |        |             | ; ALPHABET STRINGS
5922:074 | DONE wsp | em 16 16 |        |             |
5922:075 | DONE cmt | em 16 16 |        |             | ; Leave alphastr as the last entry in the source code to make it easier to
5922:076 | DONE cmt | em 16 16 |        |             | ; see where this section ends. This cannot be a zero-terminated string
5922:077 | DONE cmt | em 16 16 |        |             | ; TODO see if we need lower
5922:078 | DONE wsp | em 16 16 |        |             |
5922:079 | DONE lbl | em 16 16 | 00714d |             | abc_str_lower                        
5922:080 | DONE dir | em 16 16 | 00714d | (35 bytes)  |         .byte 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 61, 62, 63, (...) 
5922:080 | DONE dir | em 16 16 |        |             |                 30 31 32 33 34 35 36 37  --  0 1 2 3 4 5 6 7
5922:080 | DONE dir | em 16 16 |        |             |                 38 39 61 62 63 64 65 66  --  8 9 a b c d e f
5922:080 | DONE dir | em 16 16 |        |             |                 67 68 69 6a 6b 6c 6d 6e  --  g h i j k l m n
5922:080 | DONE dir | em 16 16 |        |             |                 6f 70 71 72 73 74 75 76  --  o p q r s t u v
5922:080 | DONE dir | em 16 16 |        |             |                 77 79 7a                 --  w y z
5922:081 | DONE lbl | em 16 16 | 007170 |             | abc_str_upper                        
5922:082 | DONE dir | em 16 16 | 007170 | (35 bytes)  |         .byte 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 41, 42, 43, (...) 
5922:082 | DONE dir | em 16 16 |        |             |                 30 31 32 33 34 35 36 37  --  0 1 2 3 4 5 6 7
5922:082 | DONE dir | em 16 16 |        |             |                 38 39 41 42 43 44 45 46  --  8 9 A B C D E F
5922:082 | DONE dir | em 16 16 |        |             |                 47 48 49 4a 4b 4c 4d 4e  --  G H I J K L M N
5922:082 | DONE dir | em 16 16 |        |             |                 4f 50 51 52 53 54 55 56  --  O P Q R S T U V
5922:082 | DONE dir | em 16 16 |        |             |                 57 59 5a                 --  W Y Z
5922:083 | DONE wsp | em 16 16 |        |             |
5923:000 | DONE wsp | em 16 16 |        |             |
5924:000 | DONE wsp | em 16 16 |        |             |
5925:000 | DONE cmt | em 16 16 |        |             | ; ===================================================================
5926:000 | DONE cmt | em 16 16 |        |             | ; END
5927:000 | DONE dir | em 16 16 |        |             |         .end                         

MACROS:
        (none)

SYMBOL TABLE:
- abc_str_lower               : 00714d
- abc_str_upper               : 007170
- abortq_done                 : 005479
- abortq_rt                   : 00546f
- accept_bs                   : 0054f8
- accept_eol                  : 0054f1
- accept_loop                 : 00549e
- accept_nonzero              : 005493
- adjust_z                    : 005703
- allot_done                  : 005556
- allot_error                 : 005545
- allot_minus                 : 00554b
- allot_real_gone             : 005558
- ascbell                     : 000007
- ascbs                       : 000008
- asccc                       : 000003
- asccn                       : 00000e
- asccp                       : 000010
- asccr                       : 00000d
- ascdel                      : 00007f
- ascesc                      : 00001b
- asclf                       : 00000a
- ascsp                       : 000020
- base                        : 000016
- branch_rt                   : 0055bb
- brg_value                   : 00000b
- bsize                       : 000080
- buffer0                     : 000200
- buffer1                     : 000280
- byte_to_ascii               : 0069b2
- char_got_char               : 005608
- cib                         : 000008
- ciblen                      : 00000a
- cmpl_body                   : 00696e
- cmpl_common                 : 006961
- cmpl_jump                   : 00695e
- cmpl_subroutine             : 006959
- cmpl_word                   : 006954
- co                          : 000004
- code0                       : 005000
- compile_2r                  : 0056bb
- compile_as_code             : 00567a
- compile_as_jump             : 0056d3
- compile_move                : 0056c7
- compile_not_nop             : 00569d
- compile_r                   : 0056b5
- cp                          : 000000
- cp-end                      : 004fff
- cp0                         : 000300
- create_got_name             : 005739
- defer_error                 : 0068db
- doconst                     : 0068c4
- dodefer                     : 0068d2
- dodoes                      : 0068e1
- does_rt                     : 00585e
- dots_done                   : 005241
- dots_loop                   : 00522e
- dots_not_empty              : 005229
- dovar                       : 0068ee
- dp                          : 000002
- dpage                       : 000000
- dq_case_done                : 0057d6
- dq_checkbase                : 0057d9
- dq_notdigit                 : 0057e0
- dq_success                  : 0057eb
- dsp0                        : 0000ff
- dtrailing_done              : 005359
- dtrailing_loop              : 005350
- dump_done                   : 005890
- dump_loop                   : 00587a
- emit_a                      : 0058a1
- equal_not                   : 005366
- erase_done                  : 0058bb
- erase_loop                  : 0058b4
- error                       : 00697a
- es_allot                    : 006ff1
- es_componly                 : 007005
- es_defer                    : 007026
- es_divzero                  : 007043
- es_error                    : 007054
- es_intonly                  : 007060
- es_noname                   : 007076
- es_radix                    : 007086
- es_refill1                  : 00709d
- es_refill2                  : 0070cb
- es_state                    : 0070eb
- es_syntax                   : 007113
- es_underflow                : 007103
- execute_ip                  : 0058f5
- find-name_all_chars         : 005961
- find-name_char_nomatcnt_8   : 00595d
- find-name_chars             : 005952
- find-name_done              : 005987
- find-name_failure_16        : 005984
- find-name_loop              : 00593d
- find-name_next_entry        : 005946
- find-name_success           : 00597e
- find_found                  : 005918
- find_imm                    : 005931
- fmmod_1                     : 0059a8
- fmmod_1_1                   : 0059ac
- fmmod_2                     : 0059d9
- fmmod_2_1                   : 0059dd
- fn                          : 000008
- get_chr                     : 005045
- get_chr_wait                : 005049
- greater_nip                 : 005134
- greater_no_ov               : 005131
- hashs_loop                  : 0052b6
- have_chr                    : 005057
- havekey                     : 000012
- hi-end                      : 006fe3
- hi-start                    : 0069cd
- hw_acsr0                    : 00df70
- hw_acsr1                    : 00df72
- hw_acsr2                    : 00df74
- hw_acsr3                    : 00df76
- hw_artd0                    : 00df71
- hw_artd1                    : 00df73
- hw_artd2                    : 00df75
- hw_artd3                    : 00df77
- hw_bcr                      : 00df40
- hw_eier                     : 00df47
- hw_eifr                     : 00df45
- hw_pcs7                     : 00df27
- hw_pd0                      : 00df00
- hw_pd1                      : 00df01
- hw_pd2                      : 00df02
- hw_pd3                      : 00df03
- hw_pd4                      : 00df20
- hw_pd5                      : 00df21
- hw_pd6                      : 00df22
- hw_pd7                      : 00df23
- hw_pdd0                     : 00df04
- hw_pdd1                     : 00df05
- hw_pdd2                     : 00df06
- hw_pdd3                     : 00df07
- hw_pdd4                     : 00df24
- hw_pdd5                     : 00df25
- hw_pdd6                     : 00df26
- hw_sscr                     : 00df41
- hw_t0ch                     : 00df61
- hw_t0cl                     : 00df60
- hw_t1ch                     : 00df63
- hw_t1cl                     : 00df62
- hw_t2ch                     : 00df65
- hw_t2cl                     : 00df64
- hw_t3ch                     : 00df67
- hw_t3cl                     : 00df66
- hw_t4ch                     : 00df69
- hw_t4cl                     : 00df68
- hw_t5ch                     : 00df6b
- hw_t5cl                     : 00df6a
- hw_t6ch                     : 00df6d
- hw_t6cl                     : 00df6c
- hw_t7ch                     : 00df6f
- hw_t7cl                     : 00df6e
- hw_tcr                      : 00df42
- hw_ter                      : 00df43
- hw_tier                     : 00df46
- hw_tifr                     : 00df44
- hw_uier                     : 00df49
- hw_uifr                     : 00df48
- im                          : 000002
- in_found                    : 005a20
- in_loop                     : 005a08
- in_notfound                 : 005a1a
- input                       : 000010
- insrc                       : 000006
- interpret                   : 0068f5
- interpret_compile           : 00693f
- interpret_got_name_token    : 006919
- interpret_interpret         : 006939
- interpret_line_done         : 00694d
- interpret_loop              : 0068f5
- less_nip                    : 00510a
- less_no_ov                  : 005107
- literal_rt                  : 005a6e
- lshift_done                 : 005a8a
- lshift_loop                 : 005a84
- max_drop                    : 005ae7
- max_nip                     : 005ae9
- max_no_ov                   : 005ae5
- min_drop                    : 005afa
- min_nip                     : 005afc
- min_no_ov                   : 005af8
- move_cmoveup                : 005b0f
- mstar_abs_nos               : 005a9b
- mstar_umstar                : 005aa5
- nc                          : 000001
- nc_limit                    : 000026
- nibble_to_ascii             : 0069bb
- not-equal_equal             : 005116
- nt_2drop                    : 00683c
- nt_2dup                     : 006559
- nt_2over                    : 006807
- nt_2swap                    : 006814
- nt_2variable                : 006160
- nt_abort                    : 006258
- nt_abortq                   : 00624a
- nt_abs                      : 006565
- nt_accept                   : 0067ab
- nt_again                    : 0064c8
- nt_align                    : 006048
- nt_aligned                  : 006039
- nt_allot                    : 006504
- nt_and                      : 006650
- nt_at-xy                    : 006148
- nt_backslash                : 0067c4
- nt_base                     : 00636e
- nt_begin                    : 0064d5
- nt_bell                     : 0060e1
- nt_bl                       : 006309
- nt_bounds                   : 006875
- nt_bracketchar              : 0063f1
- nt_brackettick              : 0063e6
- nt_branch                   : 0064ba
- nt_bye                      : 00600a
- nt_c-comma                  : 006673
- nt_c-fetch                  : 00667d
- nt_c-store                  : 006687
- nt_cellplus                 : 0060fa
- nt_cells                    : 0063b5
- nt_char                     : 006621
- nt_charplus                 : 006107
- nt_chars                    : 0060ed
- nt_cmove                    : 006230
- nt_cmoveup                  : 006222
- nt_cold                     : 006015
- nt_colon                    : 0064fb
- nt_comma                    : 0067a2
- nt_compile-only             : 006424
- nt_compilecomma             : 0064e2
- nt_constant                 : 0065ba
- nt_count                    : 00623d
- nt_cr                       : 0062a7
- nt_create                   : 006538
- nt_dabs                     : 006171
- nt_decimal                  : 006114
- nt_defer                    : 006511
- nt_depth                    : 006596
- nt_digitq                   : 006867
- nt_dminus                   : 0061b8
- nt_dnegate                  : 00617d
- nt_does                     : 00652b
- nt_dot                      : 00635a
- nt_dotquote                 : 0063c2
- nt_dots                     : 00632e
- nt_dplus                    : 0061c2
- nt_drop                     : 0068b8
- nt_dtos                     : 00618c
- nt_dtrailing                : 00648b
- nt_dump                     : 006075
- nt_dup                      : 0068ad
- nt_emit                     : 00634e
- nt_equal                    : 006706
- nt_erase                    : 0062bd
- nt_evaluate                 : 0063a5
- nt_execute                  : 006821
- nt_false                    : 00670f
- nt_fetch                    : 00688f
- nt_fill                     : 0062b1
- nt_find                     : 00602d
- nt_find-name                : 006760
- nt_fmmod                    : 0061cc
- nt_fromr                    : 006853
- nt_greater                  : 0066e0
- nt_hash                     : 0062f6
- nt_hashs                    : 0062e0
- nt_here                     : 006830
- nt_hex                      : 006123
- nt_hold                     : 0062d4
- nt_immediate                : 006438
- nt_input                    : 00638a
- nt_int-name                 : 006287
- nt_invert                   : 006613
- nt_key                      : 0067b9
- nt_latestnt                 : 00646b
- nt_latestxt                 : 00647b
- nt_leftbracket              : 006462
- nt_less                     : 0066e9
- nt_lessnumber               : 0062ff
- nt_literal                  : 0063ff
- nt_lshift                   : 00665b
- nt_marker                   : 0060b7
- nt_max                      : 0065fa
- nt_min                      : 0065ef
- nt_minus                    : 00669b
- nt_move                     : 0065e3
- nt_mrot                     : 0067f0
- nt_mstar                    : 00620d
- nt_name-int                 : 006297
- nt_name-string              : 006546
- nt_native-compile           : 00640e
- nt_nc-limit                 : 00637a
- nt_negate                   : 006605
- nt_nip                      : 0067e5
- nt_not-equal                : 0066fc
- nt_number                   : 006737
- nt_numbermore               : 0062ca
- nt_one                      : 00674e
- nt_one-minus                : 0066ad
- nt_one-plus                 : 0066b7
- nt_or                       : 006646
- nt_output                   : 006397
- nt_over                     : 006883
- nt_pad                      : 006363
- nt_page                     : 00613c
- nt_parse                    : 006265
- nt_parse-name               : 00677f
- nt_pdo                      : 0060ab
- nt_pick                     : 0060d5
- nt_plus                     : 0066a4
- nt_plusstore                : 006669
- nt_postpone                 : 006449
- nt_pploop                   : 00608f
- nt_pqdo                     : 00609e
- nt_qdup                     : 0067cd
- nt_question                 : 00627e
- nt_quit                     : 006272
- nt_refill                   : 006771
- nt_rfetch                   : 006849
- nt_rightbracket             : 006459
- nt_rot                      : 0067fc
- nt_rshift                   : 00662d
- nt_semicolon                : 0064f2
- nt_sign                     : 0062ea
- nt_slashstring              : 00649c
- nt_sliteral                 : 0063d6
- nt_smrem                    : 0061da
- nt_source                   : 006588
- nt_source-id                : 006791
- nt_space                    : 006321
- nt_spaces                   : 006313
- nt_squote                   : 0063cc
- nt_star                     : 006204
- nt_state                    : 006570
- nt_stod                     : 006197
- nt_store                    : 006898
- nt_swap                     : 0068a1
- nt_tick                     : 0065da
- nt_to                       : 0065a3
- nt_to-in                    : 00657d
- nt_tobody                   : 00651e
- nt_tonumber                 : 006728
- nt_tor                      : 00685d
- nt_true                     : 00671c
- nt_tuck                     : 0067d9
- nt_two                      : 006745
- nt_two-star                 : 006691
- nt_twofromr                 : 0061a2
- nt_tworfetch                : 006155
- nt_twotor                   : 0061ad
- nt_type                     : 006338
- nt_udmod                    : 0061e8
- nt_udot                     : 006344
- nt_ummod                    : 0061f6
- nt_umstar                   : 006217
- nt_unloop                   : 006081
- nt_unused                   : 00612e
- nt_value                    : 0065ad
- nt_variable                 : 0065ca
- nt_word                     : 006021
- nt_words                    : 006068
- nt_wordsize                 : 0060c5
- nt_wordsnsizes              : 006055
- nt_xor                      : 00663b
- nt_zbranch                  : 0064ab
- nt_zero                     : 006757
- nt_zero-equal               : 0066f2
- nt_zero-less                : 0066d6
- nt_zero-more                : 0066cc
- nt_zero-notequal            : 0066c1
- number_dot                  : 005b60
- number_loop                 : 005b87
- number_main                 : 005b79
- number_ok                   : 005b93
- number_single               : 005bbb
- output                      : 00000e
- padoffset                   : 0000ff
- parse-name_empty_line       : 005c0d
- parse-name_found            : 005c23
- parse-name_loop             : 005c00
- parse_found_delimiter       : 005c4f
- parse_loop                  : 005c42
- parse_reached_eol           : 005c53
- pp_got_nt                   : 005c93
- pp_got_word                 : 005c8b
- pp_not_immediate            : 005ca4
- pploop_jmp                  : 0052ec
- pqdo_done                   : 0052f7
- print_string                : 006980
- print_string_done           : 00698f
- print_u                     : 006998
- put_chr                     : 005034
- put_chr_wait                : 005039
- quit_compiled               : 0050f0
- quit_get_line               : 0050c5
- quit_ok                     : 0050e7
- quit_print                  : 0050f3
- quit_refill_successful      : 0050d3
- ram-end                     : 007fff
- ram-start                   : 000000
- refill_source_is_not_string : 005ce8
- refill_src_not_kbd          : 005cde
- reset_hardware              : 005000
- rshift_done                 : 005d07
- rshift_loop                 : 005d01
- s_compiled                  : 006fe7
- s_ok                        : 006fe3
- scratch                     : 000028
- sign_plus                   : 005d5d
- sl_loop                     : 005d82
- sliteral_rt                 : 005dad
- smrem_1                     : 005dfd
- smrem_1_1                   : 005e01
- smrem_2                     : 005e18
- smrem_2_1                   : 005e1c
- spaces_done                 : 005e43
- spaces_loop                 : 005e38
- squote_compile              : 005d3e
- stack                       : 000100
- stack0                      : 0001ff
- start                       : 005067
- state                       : 000014
- stod_pos                    : 005d4e
- tests_next_cmd              : 00713e
- tests_prev_cmd              : 00712b
- tick_have_nt                : 005461
- tick_have_word              : 005455
- tmp1                        : 00001c
- tmp2                        : 00001e
- tmp3                        : 000020
- tmpbranch                   : 00001a
- tmpdsp                      : 000022
- tmptos                      : 000024
- tobody_have_cfa             : 005158
- tobody_nojsr                : 00515a
- tohold                      : 000018
- toin                        : 00000c
- tonumber_done               : 0051b3
- tonumber_loop               : 00516f
- tonumber_ok                 : 00517e
- type_done                   : 005e93
- type_loop                   : 005e87
- ummod_complete              : 005f67
- ummod_notzero               : 005f28
- ummod_overflow              : 005f5e
- ummod_shift                 : 005f40
- umstar_counter              : 005ef7
- umstar_loop                 : 005ee9
- umstar_one_nos              : 005f0a
- umstar_one_tos              : 005f07
- umstar_two_common           : 005f16
- umstar_two_nos              : 005f15
- umstar_two_tos              : 005f11
- umstar_zero                 : 005f00
- user0                       : 000000
- vt100_home                  : 007127
- vt100_page                  : 007122
- words_common                : 005fb5
- words_loop                  : 005fbf
- words_nosizes               : 005fdc
- workword                    : 000004
- xt_2drop                    : 0053e7
- xt_2dup                     : 0053ee
- xt_2over                    : 0053f9
- xt_2swap                    : 005425
- xt_2variable                : 005436
- xt_abort                    : 0050b2
- xt_abortq                   : 005465
- xt_abs                      : 005482
- xt_accept                   : 00548b
- xt_again                    : 00551a
- xt_align                    : 005530
- xt_aligned                  : 005532
- xt_allot                    : 005534
- xt_and                      : 00555d
- xt_at-xy                    : 005564
- xt_backslash                : 005325
- xt_base                     : 00558c
- xt_begin                    : 00559b
- xt_bell                     : 005594
- xt_bl                       : 0055a2
- xt_bounds                   : 0055aa
- xt_bracketchar              : 00531e
- xt_brackettick              : 00530e
- xt_branch                   : 0055b4
- xt_bye                      : 0055c8
- xt_c-comma                  : 0055cf
- xt_c-fetch                  : 0055dd
- xt_c-store                  : 0055e9
- xt_cellplus                 : 0055f9
- xt_char                     : 0055fc
- xt_chars                    : 005614
- xt_cmove                    : 005616
- xt_cmoveup                  : 005639
- xt_cold                     : 005064
- xt_colon                    : 005251
- xt_comma                    : 005245
- xt_compile-only             : 005652
- xt_compilecomma             : 00565b
- xt_constant                 : 0056ea
- xt_count                    : 005719
- xt_cr                       : 005727
- xt_create                   : 00572e
- xt_dabs                     : 005821
- xt_decimal                  : 005828
- xt_defer                    : 00579e
- xt_depth                    : 00582e
- xt_digitq                   : 0057b9
- xt_dminus                   : 005807
- xt_dnegate                  : 00583d
- xt_does                     : 005851
- xt_dot                      : 0051da
- xt_dotquote                 : 0051f9
- xt_dots                     : 00520d
- xt_dplus                    : 0057f5
- xt_drop                     : 005874
- xt_dtos                     : 00581c
- xt_dtrailing                : 005346
- xt_dump                     : 005879
- xt_dup                      : 005897
- xt_emit                     : 00589c
- xt_equal                    : 00535d
- xt_erase                    : 0058a4
- xt_evaluate                 : 0058c6
- xt_execute                  : 0058f8
- xt_fetch                    : 0052da
- xt_fill                     : 0058ab
- xt_find                     : 005902
- xt_find-name                : 005933
- xt_fmmod                    : 00598a
- xt_fromr                    : 005cbd
- xt_greater                  : 005123
- xt_hash                     : 00528c
- xt_hashs                    : 0052b6
- xt_here                     : 005a29
- xt_hex                      : 005a30
- xt_hold                     : 005a36
- xt_immediate                : 0059ee
- xt_input                    : 0059f7
- xt_int-name                 : 0059ff
- xt_invert                   : 005a23
- xt_key                      : 0059de
- xt_latestnt                 : 005a44
- xt_latestxt                 : 005a4c
- xt_leftbracket              : 005315
- xt_less                     : 0050f9
- xt_lessnumber               : 005119
- xt_literal                  : 005a5c
- xt_lshift                   : 005a7b
- xt_marker                   : 005aaf
- xt_max                      : 005ad9
- xt_min                      : 005aec
- xt_minus                    : 005332
- xt_move                     : 005aff
- xt_mrot                     : 00533d
- xt_mstar                    : 005a8f
- xt_name-int                 : 005b13
- xt_name-string              : 005b1c
- xt_native-compile           : 005b2d
- xt_nc-limit                 : 005b36
- xt_negate                   : 005b3e
- xt_nip                      : 005b45
- xt_not-equal                : 00510d
- xt_number                   : 005b48
- xt_numbermore               : 0052a7
- xt_one                      : 0053be
- xt_one-minus                : 0053c6
- xt_one-plus                 : 0053c8
- xt_or                       : 005bcc
- xt_output                   : 005bd3
- xt_over                     : 005bdb
- xt_pad                      : 005be2
- xt_page                     : 005bee
- xt_parse                    : 005c2f
- xt_parse-name               : 005bfb
- xt_pdo                      : 0052fb
- xt_pick                     : 005c62
- xt_plus                     : 00532a
- xt_plusstore                : 005c70
- xt_postpone                 : 005c80
- xt_pploop                   : 0052df
- xt_pqdo                     : 0052ee
- xt_qdup                     : 0052c6
- xt_question                 : 0052bf
- xt_quit                     : 0050ba
- xt_refill                   : 005cc5
- xt_rfetch                   : 005cb4
- xt_rightbracket             : 005318
- xt_rot                      : 005cef
- xt_rshift                   : 005cf8
- xt_semicolon                : 005273
- xt_sign                     : 005d52
- xt_slashstring              : 0051c8
- xt_sliteral                 : 005d62
- xt_smrem                    : 005dc3
- xt_source                   : 005e1d
- xt_source-id                : 005e2a
- xt_space                    : 005e31
- xt_spaces                   : 005e38
- xt_squote                   : 005d0c
- xt_star                     : 005e48
- xt_state                    : 005e50
- xt_stod                     : 005d42
- xt_store                    : 0052ce
- xt_swap                     : 005e58
- xt_tick                     : 005449
- xt_to                       : 005e5e
- xt_to-in                    : 00515b
- xt_tobody                   : 005137
- xt_tonumber                 : 005163
- xt_tor                      : 0051c0
- xt_true                     : 005e68
- xt_tuck                     : 005e70
- xt_two                      : 0053ca
- xt_two-star                 : 0053d2
- xt_twofromr                 : 005406
- xt_tworfetch                : 005417
- xt_twotor                   : 0053d6
- xt_type                     : 005e79
- xt_udmod                    : 005ea4
- xt_udot                     : 005e9a
- xt_ummod                    : 005f1f
- xt_umstar                   : 005ec0
- xt_unloop                   : 005f70
- xt_unused                   : 005f77
- xt_variable                 : 005f83
- xt_word                     : 005f93
- xt_words                    : 005fb3
- xt_wordsize                 : 005ff0
- xt_wordsnsizes              : 005fac
- xt_xor                      : 006003
- xt_zbranch                  : 0053a0
- xt_zero                     : 005369
- xt_zero-equal               : 005371
- xt_zero-less                : 00537d
- xt_zero-more                : 005395
- xt_zero-notequal            : 005389
- z_2drop                     : 0053ed
- z_2dup                      : 0053f8
- z_2over                     : 005405
- z_2swap                     : 005435
- z_2variable                 : 005448
- z_abort                     : 0050f9
- z_abortq                    : 005481
- z_abs                       : 00548a
- z_accept                    : 005519
- z_again                     : 00552f
- z_align                     : 005531
- z_aligned                   : 005533
- z_allot                     : 00555c
- z_and                       : 005563
- z_at-xy                     : 00558b
- z_backslash                 : 005329
- z_base                      : 005593
- z_begin                     : 0055a1
- z_bell                      : 00559a
- z_bl                        : 0055a9
- z_bounds                    : 0055b3
- z_bracketchar               : 005324
- z_brackettick               : 005314
- z_branch                    : 0055ba
- z_bye                       : 0055cf
- z_c-comma                   : 0055dc
- z_c-fetch                   : 0055e8
- z_c-store                   : 0055f8
- z_cellplus                  : 0055fb
- z_char                      : 005613
- z_chars                     : 005615
- z_cmove                     : 005638
- z_cmoveup                   : 005651
- z_cold                      : 0050f9
- z_colon                     : 005272
- z_comma                     : 005250
- z_compile-only              : 00565a
- z_compilecomma              : 0056e9
- z_constant                  : 005718
- z_count                     : 005726
- z_cr                        : 00572d
- z_create                    : 00579d
- z_dabs                      : 005827
- z_decimal                   : 00582d
- z_defer                     : 0057b8
- z_depth                     : 00583c
- z_digitq                    : 0057f4
- z_dminus                    : 00581b
- z_dnegate                   : 005850
- z_does                      : 00585d
- z_dot                       : 0051f8
- z_dotquote                  : 00520c
- z_dots                      : 005244
- z_dplus                     : 005806
- z_drop                      : 005878
- z_dtos                      : 005820
- z_dtrailing                 : 00535c
- z_dump                      : 005896
- z_dup                       : 00589b
- z_emit                      : 0058a4
- z_equal                     : 005368
- z_erase                     : 0058c5
- z_evaluate                  : 0058f4
- z_execute                   : 005902
- z_fetch                     : 0052de
- z_fill                      : 0058c5
- z_find                      : 005932
- z_find-name                 : 005989
- z_fmmod                     : 0059dd
- z_fromr                     : 005cc4
- z_greater                   : 005136
- z_hash                      : 0052a6
- z_hashs                     : 0052be
- z_here                      : 005a2f
- z_hex                       : 005a35
- z_hold                      : 005a43
- z_immediate                 : 0059f6
- z_input                     : 0059fe
- z_int-name                  : 005a22
- z_invert                    : 005a28
- z_key                       : 0059ed
- z_latestnt                  : 005a4b
- z_latestxt                  : 005a5b
- z_leftbracket               : 005317
- z_less                      : 00510c
- z_lessnumber                : 005122
- z_literal                   : 005a6d
- z_lshift                    : 005a8e
- z_marker                    : 005ad8
- z_max                       : 005aeb
- z_min                       : 005afe
- z_minus                     : 00533c
- z_move                      : 005b12
- z_mrot                      : 005345
- z_mstar                     : 005aae
- z_name-int                  : 005b1b
- z_name-string               : 005b2c
- z_native-compile            : 005b35
- z_nc-limit                  : 005b3d
- z_negate                    : 005b44
- z_nip                       : 005b47
- z_not-equal                 : 005118
- z_number                    : 005bcb
- z_numbermore                : 0052b5
- z_one                       : 0053c5
- z_one-minus                 : 0053c7
- z_one-plus                  : 0053c9
- z_or                        : 005bd2
- z_output                    : 005bda
- z_over                      : 005be1
- z_pad                       : 005bed
- z_page                      : 005bfa
- z_parse                     : 005c61
- z_parse-name                : 005c61
- z_pdo                       : 00530d
- z_pick                      : 005c6f
- z_plus                      : 005331
- z_plusstore                 : 005c7f
- z_postpone                  : 005cb3
- z_pploop                    : 0052ed
- z_pqdo                      : 00530d
- z_qdup                      : 0052cd
- z_question                  : 0052c5
- z_quit                      : 0050f9
- z_refill                    : 005cee
- z_rfetch                    : 005cbc
- z_rightbracket              : 00531d
- z_rot                       : 005cf7
- z_rshift                    : 005d0b
- z_semicolon                 : 00528b
- z_sign                      : 005d61
- z_slashstring               : 0051d9
- z_sliteral                  : 005dac
- z_smrem                     : 005e1c
- z_source                    : 005e29
- z_source-id                 : 005e30
- z_space                     : 005e37
- z_spaces                    : 005e47
- z_squote                    : 005d41
- z_star                      : 005e4f
- z_state                     : 005e57
- z_stod                      : 005d51
- z_store                     : 0052d9
- z_swap                      : 005e5d
- z_tick                      : 005464
- z_to                        : 005e67
- z_to-in                     : 005162
- z_tobody                    : 00515a
- z_tonumber                  : 0051bf
- z_tor                       : 0051c7
- z_true                      : 005e6f
- z_tuck                      : 005e78
- z_two                       : 0053d1
- z_two-star                  : 0053d5
- z_twofromr                  : 005416
- z_tworfetch                 : 005424
- z_twotor                    : 0053e6
- z_type                      : 005e99
- z_udmod                     : 005ebf
- z_udot                      : 005ea3
- z_ummod                     : 005f6f
- z_umstar                    : 005f1e
- z_unloop                    : 005f76
- z_unused                    : 005f82
- z_variable                  : 005f92
- z_word                      : 005fab
- z_words                     : 005fef
- z_wordsize                  : 006002
- z_wordsnsizes               : 005fef
- z_xor                       : 006009
- z_zbranch                   : 0053a6
- z_zero                      : 005370
- z_zero-equal                : 00537c
- z_zero-less                 : 005388
- z_zero-more                 : 00539f
- z_zero-notequal             : 005394
- zb_done                     : 0053b8
- zb_zero                     : 0053af
- zbranch_rt                  : 0053a7
- ze_not_zero                 : 005379
- zero-less-is-less           : 005385
- zero-more_done              : 00539e
- zero-more_true              : 00539d
- zne_is_zero                 : 005391
