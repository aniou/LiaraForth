A Tinkerer's Assembler for the 6502/65c02/65816
Version BETA 24. January 2017
Copyright 2015-2017 Scot W. Stevenson <scot.stevenson@gmail.com>
This program comes with ABSOLUTELY NO WARRANTY

Code listing for file liaraforth.tasm
Generated on Sun Jan 29 14:55:35 2017
Target MPU: 65816
External files loaded: 4
Number of passes executed: 35
Number of steps executed: 10
Assembly time: 0.04524 seconds
Code origin: 006000
Bytes of machine code: 2000

LISTING:
   Line  Status/Type State/Width Address     Bytes     Instruction
   1:000 | DONE cmt | em  8  8 |        |             | ; Liara Forth for the W65C265SXB
   2:000 | DONE cmt | em  8  8 |        |             | ; Scot W. Stevenson <scot.stevenson@gmail.com>
   3:000 | DONE cmt | em  8  8 |        |             | ; First version: 01. Apr 2016
   4:000 | DONE cmt | em  8  8 |        |             | ; This version: 29. Jan 2017
   5:000 | DONE wsp | em  8  8 |        |             |
   6:000 | DONE cmt | em  8  8 |        |             | ; This code is written in Typist's Assembler Notation for the 65c02/65816
   7:000 | DONE cmt | em  8  8 |        |             | ; See docs/MANUAL.md for more information
   8:000 | DONE wsp | em  8  8 |        |             |
   9:000 | DONE dir | em  8  8 |        |             |         .mpu 65816                   
  10:000 | DONE cmt | em  8  8 |        |             | ;       .origin 8000    ; start of code to save to Flash memory
  11:000 | DONE dir | em  8  8 |        |             |         .origin 6000                 ; start of code to save to built-in RAM
  12:000 | DONE wsp | em  8  8 |        |             |
  13:000 | DONE cmt | em  8  8 |        |             | ; ===================================================================
  14:000 | DONE cmt | em  8  8 |        |             | ; TOP INCLUDES
  15:000 | DONE wsp | em  8  8 |        |             |
  16:000 | DONE cmt | em  8  8 |        |             | ; Definitions for Liara Forth for the W65C265SXB
  16:001 | DONE cmt | em  8  8 |        |             | ; Scot W. Stevenson <scot.stevenson@gmail.com>
  16:002 | DONE cmt | em  8  8 |        |             | ; First version: 01. Apr 2016
  16:003 | DONE cmt | em  8  8 |        |             | ; This version: 29. Jan 2017
  16:004 | DONE wsp | em  8  8 |        |             |
  16:005 | DONE cmt | em  8  8 |        |             | ; This file is included by liaraforth.tasm
  16:006 | DONE wsp | em  8  8 |        |             |
  16:007 | DONE cmt | em  8  8 |        |             | ; Note that Typist's Assembler Notation does not distinguish between
  16:008 | DONE cmt | em  8  8 |        |             | ; upper andlower case. Variations in case are for human readers only.
  16:009 | DONE wsp | em  8  8 |        |             |
  16:010 | DONE cmt | em  8  8 |        |             | ; I/O facilities are handled in the separate file kernel.tasm with symbols
  16:011 | DONE cmt | em  8  8 |        |             | ; prefixed with hw_ . No symbol with this prefix may be defined or used outside
  16:012 | DONE cmt | em  8  8 |        |             | ; of that file.
  16:013 | DONE wsp | em  8  8 |        |             |
  16:014 | DONE cmt | em  8  8 |        |             | ; The definitions for multitasking are preliminary and will probably
  16:015 | DONE cmt | em  8  8 |        |             | ; change
  16:016 | DONE wsp | em  8  8 |        |             |
  16:017 | DONE cmt | em  8  8 |        |             | ; ===================================================================
  16:018 | DONE cmt | em  8  8 |        |             | ; MEMORY MAP (consider moving parts of these to kernel.tasm)
  16:019 | DONE wsp | em  8  8 |        |             |
  16:020 | DONE dir | em  8  8 |        |             |         .equ ram0            0200    ; start of available RAM
  16:021 | DONE dir | em  8  8 |        |             |         .equ physicalram     07fff   ; end of installed RAM
  16:022 | DONE dir | em  8  8 |        |             |         .equ maxram-single   07bff   ; end of available RAM (single task mode)
  16:023 | DONE dir | em  8  8 |        |             |         .equ maxram-multiple 06fff   ; end of available RAM (multitask mode)
  16:024 | DONE dir | em  8  8 |        |             |         .equ buffers  7c00           ; buffer area start
  16:025 | DONE wsp | em  8  8 |        |             |
  16:026 | DONE cmt | em  8  8 |        |             | ; The two input buffers are currently switched in REFILL by bit flipping. If you
  16:027 | DONE cmt | em  8  8 |        |             | ; change their addresses, you'll probably have to rewrite the code there
  16:028 | DONE wsp | em  8  8 |        |             |
  16:029 | DONE dir | em  8  8 |        |             |         .equ buffersize 00ff         ; maximum size for input buffers
  16:030 | DONE dir | em  8  8 |        |             |         .equ ibuffer1   7c00         ; start of 256 byte input buffer 1
  16:031 | DONE dir | em  8  8 |        |             |         .equ ibuffer2   7d00         ; start of 256 byte input buffer 2
  16:032 | DONE wsp | em  8  8 |        |             |
  16:033 | DONE cmt | em  8  8 |        |             | ; RAM from 0000 to 01ff is left for the Mensch Monitor to use
  16:034 | DONE wsp | em  8  8 |        |             |
  16:035 | DONE dir | em  8  8 |        |             |         .equ directpage          0200 ; single task Direct Page (DP) start
  16:036 | DONE dir | em  8  8 |        |             |         .equ stack-multiple      7000 ; multitask Stack (S) area start
  16:037 | DONE dir | em  8  8 |        |             |         .equ directpage-multiple 7400 ; multitask Direct Page (DP) area start
  16:038 | DONE wsp | em  8  8 |        |             |
  16:039 | DONE cmt | em  8  8 |        |             | ; Initial values
  16:040 | DONE wsp | em  8  8 |        |             |
  16:041 | DONE dir | em  8  8 |        |             |         .equ stack0 7fff             ; single task Stack (S) start (bottom)
  16:042 | DONE dir | em  8  8 |        |             |         .equ dsp0   02f0             ; initial Data Stack Pointer (X)
  16:043 | DONE wsp | em  8  8 |        |             |
  16:044 | DONE cmt | em  8  8 |        |             | ; ===================================================================
  16:045 | DONE cmt | em  8  8 |        |             | ; DIRECT PAGE ADDRESSES
  16:046 | DONE wsp | em  8  8 |        |             |
  16:047 | DONE cmt | em  8  8 |        |             | ; All are one cell (two bytes) long to prevent weird errors
  16:048 | DONE cmt | em  8  8 |        |             | ; TODO move these to USER variables for multitasking
  16:049 | DONE wsp | em  8  8 |        |             |
  16:050 | DONE dir | em  8  8 |        |             |         .equ cp { 000200 + &0 }      ; Compiler Pointer, 2 bytes
  16:051 | DONE dir | em  8  8 |        |             |         .equ dp { 000200 + &2 }      ; Dictionary Pointer, 2 bytes
  16:052 | DONE dir | em  8  8 |        |             |         .equ tmpdsp { 000200 + &4 }  ; Temporary DSP (X) storage, 2 bytes
  16:053 | DONE dir | em  8  8 |        |             |         .equ tmptos { 000200 + &6 }  ; Temporary TOS (Y) storage, 2 bytes
  16:054 | DONE cmt | em  8  8 |        |             | ;       .equ         { directpage + &8 }  ; UNUSED
  16:055 | DONE dir | em  8  8 |        |             |         .equ insrc { 000200 + &10 }  ; Input Source for SOURCE-ID
  16:056 | DONE dir | em  8  8 |        |             |         .equ cib { 000200 + &12 }    ; Current Input Buffer, 7c00 or 7d00
  16:057 | DONE dir | em  8  8 |        |             |         .equ ciblen { 000200 + &14 } ; Length of current input buffer
  16:058 | DONE dir | em  8  8 |        |             |         .equ piblen { 000200 + &16 } ; Length of previous input buffer
  16:059 | DONE dir | em  8  8 |        |             |         .equ toin { 000200 + &18 }   ; Pointer to CIB (>IN in Forth)
  16:060 | DONE dir | em  8  8 |        |             |         .equ state { 000200 + &20 }  ; STATE: 1 compile, 0 interpret
  16:061 | DONE dir | em  8  8 |        |             |         .equ tmp1 { 000200 + &22 }   ; Temporary storage, usually address
  16:062 | DONE dir | em  8  8 |        |             |         .equ tmp2 { 000200 + &24 }   ; Temporary storage, usually counter
  16:063 | DONE dir | em  8  8 |        |             |         .equ tmp3 { 000200 + &26 }   ; Temporary storage
  16:064 | DONE wsp | em  8  8 |        |             |
  16:065 | DONE cmt | em  8  8 |        |             | ; ===================================================================
  16:066 | DONE cmt | em  8  8 |        |             | ; HELPER DEFINITIONS
  16:067 | DONE wsp | em  8  8 |        |             |
  16:068 | DONE cmt | em  8  8 |        |             | ; ASCII character set
  16:069 | DONE wsp | em  8  8 |        |             |
  16:070 | DONE dir | em  8  8 |        |             |         .equ AscCC   03              ; break (Control-C) ASCII character
  16:071 | DONE dir | em  8  8 |        |             |         .equ AscBELL 07              ; ACSCII bell sound
  16:072 | DONE dir | em  8  8 |        |             |         .equ AscBS   08              ; backspace ASCII character
  16:073 | DONE dir | em  8  8 |        |             |         .equ AscLF   0a              ; line feed ASCII character
  16:074 | DONE dir | em  8  8 |        |             |         .equ AscCR   0d              ; carriage return ASCII character
  16:075 | DONE dir | em  8  8 |        |             |         .equ AscCN   0e              ; ASCII CNTR-n (for next command)
  16:076 | DONE dir | em  8  8 |        |             |         .equ AscCP   10              ; ASCII CNTR-p (for previous command)
  16:077 | DONE dir | em  8  8 |        |             |         .equ AscESC  1b              ; Escape ASCII character
  16:078 | DONE dir | em  8  8 |        |             |         .equ AscSP   20              ; space ASCII character
  16:079 | DONE dir | em  8  8 |        |             |         .equ AscDEL  7f              ; DEL ASCII character
  16:080 | DONE wsp | em  8  8 |        |             |
  16:081 | DONE cmt | em  8  8 |        |             | ; Dictionary flags
  16:082 | DONE wsp | em  8  8 |        |             |
  16:083 | DONE dir | em  8  8 |        |             |         .equ PW %10000000            ; Primitive (Native) Word
  16:084 | DONE dir | em  8  8 |        |             |         .equ CO %01000000            ; Compile Only
  16:085 | DONE dir | em  8  8 |        |             |         .equ IM %00100000            ; Immediate Word
  16:086 | DONE dir | em  8  8 |        |             |         .equ NC %00010000            ; Native (inline) Compile
  17:000 | DONE cmt | em  8  8 |        |             | ; Basic hardware routines for Liara Forth
  17:001 | DONE cmt | em  8  8 |        |             | ; Scot W. Stevenson <scot.stevenson@gmail.com>
  17:002 | DONE cmt | em  8  8 |        |             | ; First version: 04. Jan 2017
  17:003 | DONE cmt | em  8  8 |        |             | ; This version: 04. Jan 2017
  17:004 | DONE wsp | em  8  8 |        |             |
  17:005 | DONE cmt | em  8  8 |        |             | ; This section provides basic hardware interface to the 265SXB, providing the
  17:006 | DONE cmt | em  8  8 |        |             | ; PUT_CHR and GET_CHR routines that Liara Forth uses. It is in its own section
  17:007 | DONE cmt | em  8  8 |        |             | ; to make porting Forth to other machines easier.
  17:008 | DONE wsp | em  8  8 |        |             |
  17:009 | DONE cmt | em  8  8 |        |             | ; The code here is based on Andrew Jacobs' Basic Vector Handling for the
  17:010 | DONE cmt | em  8  8 |        |             | ; W65C265SXB Development Board as part of the w65c265sxb-hacker project
  17:011 | DONE cmt | em  8  8 |        |             | ; (https://github.com/andrew-jacobs/w65c265sxb-hacker). It is released under the
  17:012 | DONE cmt | em  8  8 |        |             | ; following license:
  17:013 | DONE cmt | em  8  8 |        |             | ;
  17:014 | DONE cmt | em  8  8 |        |             | ; This work is made available under the terms of the Creative Commons
  17:015 | DONE cmt | em  8  8 |        |             | ; Attribution-NonCommercial-ShareAlike 4.0 International license. Open the
  17:016 | DONE cmt | em  8  8 |        |             | ; following URL to see the details.
  17:017 | DONE cmt | em  8  8 |        |             | ;
  17:018 | DONE cmt | em  8  8 |        |             | ; http://creativecommons.org/licenses/by-nc-sa/4.0/
  17:019 | DONE wsp | em  8  8 |        |             |
  17:020 | DONE cmt | em  8  8 |        |             | ; Original variable names from w65c256.inc are included in comments to make
  17:021 | DONE cmt | em  8  8 |        |             | ; updates and changes easier
  17:022 | DONE wsp | em  8  8 |        |             |
  17:023 | DONE cmt | em  8  8 |        |             | ; ===================================================================
  17:024 | DONE cmt | em  8  8 |        |             | ; EMULATOR HOOKS
  17:025 | DONE cmt | em  8  8 |        |             | ; Liara Forth only uses two hardware routines to make porting the code to
  17:026 | DONE cmt | em  8  8 |        |             | ; other systems easier: put_chr and get_chr. The system is currently set up
  17:027 | DONE cmt | em  8  8 |        |             | ; to directly access the hardware. For emulators, uncomment the following lines
  17:028 | DONE cmt | em  8  8 |        |             | ; and comment out the routines below.
  17:029 | DONE wsp | em  8  8 |        |             |
  17:030 | DONE cmt | em  8  8 |        |             | ;       .equ get_chr 0e036  ; Get character: Returns ASCII in A8. Blocks.
  17:031 | DONE cmt | em  8  8 |        |             | ;       .equ put_chr 0e04b  ; Put character: ASCII of character -> A8
  17:032 | DONE wsp | em  8  8 |        |             |
  17:033 | DONE wsp | em  8  8 |        |             |
  17:034 | DONE cmt | em  8  8 |        |             | ; ===================================================================
  17:035 | DONE cmt | em  8  8 |        |             | ; HARDWARE DEFINITIONS
  17:036 | DONE cmt | em  8  8 |        |             | ; These follow Andrew Jacobs' names, but lower case and with "hw_" prefixed.
  17:037 | DONE cmt | em  8  8 |        |             | ; This is the only file where symbols with the hw_ prefix may be defined or used
  17:038 | DONE wsp | em  8  8 |        |             |
  17:039 | DONE cmt | em  8  8 |        |             | ; Baud rates are calculated by the formula { osc_freq/(16*baud_rate)-1 } which we
  17:040 | DONE cmt | em  8  8 |        |             | ; can do on the fly at every assembly with the following parameters, or just calculate
  17:041 | DONE cmt | em  8  8 |        |             | ; once and then define brg_value with:
  17:042 | DONE cmt | em  8  8 |        |             | ;
  17:043 | DONE cmt | em  8  8 |        |             | ; - For  9600 baud, use &23
  17:044 | DONE cmt | em  8  8 |        |             | ; - For 19200 baud, use &11
  17:045 | DONE wsp | em  8  8 |        |             |
  17:046 | DONE cmt | em  8  8 |        |             | ;       .equ osc_freq  3686400          ; SXB runs at 3.6864MHz
  17:047 | DONE cmt | em  8  8 |        |             | ;       .equ baud_rate 19200            ; ACIA baud rate
  17:048 | DONE cmt | em  8  8 |        |             | ;	.equ baud_rate 9600             ; ACIA baud rate
  17:049 | DONE wsp | em  8  8 |        |             |
  17:050 | DONE dir | em  8  8 |        |             |         .equ brg_value &11           ; 19200 baud
  17:051 | DONE cmt | em  8  8 |        |             | ;       .equ brg_value &23              ; 9600 baud
  17:052 | DONE wsp | em  8  8 |        |             |
  17:053 | DONE dir | em  8  8 |        |             |         .equ hw_pd0  0df00           ; Port 0 Data Register
  17:054 | DONE dir | em  8  8 |        |             |         .equ hw_pd1  0df01           ; Port 1 Data Register
  17:055 | DONE dir | em  8  8 |        |             |         .equ hw_pd2  0df02           ; Port 2 Data Register
  17:056 | DONE dir | em  8  8 |        |             |         .equ hw_pd3  0df03           ; Port 3 Data Register
  17:057 | DONE dir | em  8  8 |        |             |         .equ hw_pdd0 0df04           ; Port 0 Data Direction Register
  17:058 | DONE dir | em  8  8 |        |             |         .equ hw_pdd1 0df05           ; Port 1 Data Direction Register
  17:059 | DONE dir | em  8  8 |        |             |         .equ hw_pdd2 0df06           ; Port 2 Data Direction Register
  17:060 | DONE dir | em  8  8 |        |             |         .equ hw_pdd3 0df07           ; Port 3 Data Direction Register
  17:061 | DONE wsp | em  8  8 |        |             |
  17:062 | DONE dir | em  8  8 |        |             |         .equ hw_pd4  0df20           ; Port 4 Data Register
  17:063 | DONE dir | em  8  8 |        |             |         .equ hw_pd5  0df21           ; Port 5 Data Register
  17:064 | DONE dir | em  8  8 |        |             |         .equ hw_pd6  0df22           ; Port 6 Data Register
  17:065 | DONE dir | em  8  8 |        |             |         .equ hw_pd7  0df23           ; Port 7 Data Register
  17:066 | DONE dir | em  8  8 |        |             |         .equ hw_pdd4 0df24           ; Port 4 Data Direction Register
  17:067 | DONE dir | em  8  8 |        |             |         .equ hw_pdd5 0df25           ; Port 5 Data Direction Register
  17:068 | DONE dir | em  8  8 |        |             |         .equ hw_pdd6 0df26           ; Port 6 Data Direction Register
  17:069 | DONE dir | em  8  8 |        |             |         .equ hw_pcs7 0df27           ; Port 7 Chip Select
  17:070 | DONE wsp | em  8  8 |        |             |
  17:071 | DONE dir | em  8  8 |        |             |         .equ hw_bcr  0df40           ; Bus Control Register
  17:072 | DONE dir | em  8  8 |        |             |         .equ hw_sscr 0df41           ; System Speed Control Register
  17:073 | DONE dir | em  8  8 |        |             |         .equ hw_tcr  0df42           ; Timer Control Register
  17:074 | DONE dir | em  8  8 |        |             |         .equ hw_ter  0df43           ; Timer Enable Register
  17:075 | DONE dir | em  8  8 |        |             |         .equ hw_tifr 0df44           ; Timer Interrupt Flag Register
  17:076 | DONE dir | em  8  8 |        |             |         .equ hw_eifr 0df45           ; Edge Interrupt Flag Register
  17:077 | DONE dir | em  8  8 |        |             |         .equ hw_tier 0df46           ; Timer Interrupt Enable Register
  17:078 | DONE dir | em  8  8 |        |             |         .equ hw_eier 0df47           ; Edge Interrupt Enable Register
  17:079 | DONE dir | em  8  8 |        |             |         .equ hw_uifr 0df48           ; UART Interrupt Flag Register
  17:080 | DONE dir | em  8  8 |        |             |         .equ hw_uier 0df49           ; UART Interrupt Enable Register
  17:081 | DONE wsp | em  8  8 |        |             |
  17:082 | DONE dir | em  8  8 |        |             |         .equ hw_t0cl 0df60           ; Timer 0 Counter Low
  17:083 | DONE dir | em  8  8 |        |             |         .equ hw_t0ch 0df61           ; Timer 0 Counter High
  17:084 | DONE dir | em  8  8 |        |             |         .equ hw_t1cl 0df62           ; Timer 1 Counter Low
  17:085 | DONE dir | em  8  8 |        |             |         .equ hw_t1ch 0df63           ; Timer 1 Counter High
  17:086 | DONE dir | em  8  8 |        |             |         .equ hw_t2cl 0df64           ; Timer 2 Counter Low
  17:087 | DONE dir | em  8  8 |        |             |         .equ hw_t2ch 0df65           ; Timer 2 Counter High
  17:088 | DONE dir | em  8  8 |        |             |         .equ hw_t3cl 0df66           ; Timer 3 Counter Low
  17:089 | DONE dir | em  8  8 |        |             |         .equ hw_t3ch 0df67           ; Timer 3 Counter High
  17:090 | DONE dir | em  8  8 |        |             |         .equ hw_t4cl 0df68           ; Timer 4 Counter Low
  17:091 | DONE dir | em  8  8 |        |             |         .equ hw_t4ch 0df69           ; Timer 4 Counter High
  17:092 | DONE dir | em  8  8 |        |             |         .equ hw_t5cl 0df6a           ; Timer 5 Counter Low
  17:093 | DONE dir | em  8  8 |        |             |         .equ hw_t5ch 0df6b           ; Timer 5 Counter High
  17:094 | DONE dir | em  8  8 |        |             |         .equ hw_t6cl 0df6c           ; Timer 6 Counter Low
  17:095 | DONE dir | em  8  8 |        |             |         .equ hw_t6ch 0df6d           ; Timer 6 Counter High
  17:096 | DONE dir | em  8  8 |        |             |         .equ hw_t7cl 0df6e           ; Timer 7 Counter Low
  17:097 | DONE dir | em  8  8 |        |             |         .equ hw_t7ch 0df6f           ; Timer 7 Counter High
  17:098 | DONE wsp | em  8  8 |        |             |
  17:099 | DONE dir | em  8  8 |        |             |         .equ hw_acsr0 0df70          ; UART 0 Control/Status Register
  17:100 | DONE dir | em  8  8 |        |             |         .equ hw_artd0 0df71          ; UART 0 Data Register
  17:101 | DONE dir | em  8  8 |        |             |         .equ hw_acsr1 0df72          ; UART 1 Control/Status Register
  17:102 | DONE dir | em  8  8 |        |             |         .equ hw_artd1 0df73          ; UART 1 Data Register
  17:103 | DONE dir | em  8  8 |        |             |         .equ hw_acsr2 0df74          ; UART 2 Control/Status Register
  17:104 | DONE dir | em  8  8 |        |             |         .equ hw_artd2 0df75          ; UART 2 Data Register
  17:105 | DONE dir | em  8  8 |        |             |         .equ hw_acsr3 0df76          ; UART 3 Control/Status Register
  17:106 | DONE dir | em  8  8 |        |             |         .equ hw_artd3 0df77          ; UART 3 Data Register
  17:107 | DONE wsp | em  8  8 |        |             |
  17:108 | DONE wsp | em  8  8 |        |             |
  17:109 | DONE cmt | em  8  8 |        |             | ; ===================================================================
  17:110 | DONE cmt | em  8  8 |        |             | ; RESET HARDWARE
  17:111 | DONE cmt | em  8  8 |        |             | ; Call this during boot. Uses Port 0 for communication in the default setting
  17:112 | DONE lbl | em  8  8 | 006000 |             | reset_hardware                       
  17:113 | DONE ins | em  8  8 | 006000 | 78          |                 sei                  
  17:114 | DONE ins | em  8  8 | 006001 | 18          |                 clc                  
  17:115 | DONE ins | em  8  8 | 006002 | fb          |                 xce                  
  17:116 | DONE ctl | na  8  8 |        |             |         .!native
  17:117 | DONE ins | na  8  8 | 006003 | c2 10       |                 rep 10               
  17:118 | DONE ctl | na  8 16 |        |             |         .!xy16
  17:119 | DONE cmt | na  8 16 |        |             |                 ; temporarily reset the stack
  17:120 | DONE ins | na  8 16 | 006005 | a2 ff 01    |                 ldx.# 01ff           
  17:121 | DONE ins | na  8 16 | 006008 | 9a          |                 txs                  
  17:122 | DONE wsp | na  8 16 |        |             |
  17:123 | DONE ins | na  8 16 | 006009 | 9c 49 df    |                 stz 00df49           ; UART Interrupt Enable Register (UIER)
  17:124 | DONE wsp | na  8 16 |        |             |
  17:125 | DONE ins | na  8 16 | 00600c | a9 c0       |                 lda.# 0c0            ; Ensure A15/AMS are output
  17:126 | DONE ins | na  8 16 | 00600e | 8d 24 df    |                 sta 00df24           ; Port 4 Data Direction Register (PDD4)
  17:127 | DONE ins | na  8 16 | 006011 | 9c 20 df    |                 stz 00df20           ; Select bank 0 (Port 4 Data Register, PD4)
  17:128 | DONE wsp | na  8 16 |        |             |
  17:129 | DONE ins | na  8 16 | 006014 | a9 10       |                 lda.# %00010000      ; Set UART0 to use timer 3
  17:130 | DONE ins | na  8 16 | 006016 | 1c 42 df    |                 trb 00df42           ; Timer Control Register (TCR)
  17:131 | DONE ins | na  8 16 | 006019 | a9 0b       |                 lda.# .lsb 00000b    ; And set baud rate
  17:132 | DONE ins | na  8 16 | 00601b | 8d 66 df    |                 sta 00df66           ; Timer 3 Counter Low (T3CL)
  17:133 | DONE ins | na  8 16 | 00601e | a9 00       |                 lda.# .msb 00000b    
  17:134 | DONE ins | na  8 16 | 006020 | 8d 67 df    |                 sta 00df67           ; Timer 3 Counter High (T3CH)
  17:135 | DONE ins | na  8 16 | 006023 | a9 08       |                 lda.# 08             ; Enable timer 3 (1<<3)
  17:136 | DONE ins | na  8 16 | 006025 | 0c 43 df    |                 tsb 00df43           ; Timer Enable Register (TER)
  17:137 | DONE wsp | na  8 16 |        |             |
  17:138 | DONE ins | na  8 16 | 006028 | a9 25       |                 lda.# %00100101      ; Set UART0 for 8-N-1
  17:139 | DONE ins | na  8 16 | 00602a | 8d 70 df    |                 sta 00df70           ; UART 0 Control/Status Register (ACSR0)
  17:140 | DONE wsp | na  8 16 |        |             |
  17:141 | DONE ins | na  8 16 | 00602d | 4c 60 60    |                 jmp 006060           ; we return with A as 8 bits
  17:142 | DONE wsp | na  8 16 |        |             |
  17:143 | DONE wsp | na  8 16 |        |             |
  17:144 | DONE cmt | na  8 16 |        |             | ; ===================================================================
  17:145 | DONE cmt | na  8 16 |        |             | ; PUT_CHR
  17:146 | DONE cmt | na  8 16 |        |             | ; Wait until the last transmission has been completed then send the character
  17:147 | DONE cmt | na  8 16 |        |             | ; in A. Destroys A.
  17:148 | DONE lbl | na  8 16 | 006030 |             | put_chr                              
  17:149 | DONE ins | na  8 16 | 006030 | 08          |                 php                  ; save register sizes
  17:150 | DONE ins | na  8 16 | 006031 | e2 20       |                 sep 20               
  17:151 | DONE ctl | na  8 16 |        |             |         .!a8
  17:152 | DONE ins | na  8 16 | 006033 | 48          |                 pha                  
  17:153 | DONE ins | na  8 16 | 006034 | a9 02       |                 lda.# 02             ; (1<<1)
  17:154 | DONE wsp | na  8 16 |        |             |
  17:155 | DONE lbl | na  8 16 | 006036 |             | put_chr_wait                         
  17:156 | DONE ins | na  8 16 | 006036 | 2c 48 df    |                 bit 00df48           ; timer finished?
  17:157 | DONE ins | na  8 16 | 006039 | f0 fb       |                 beq 006036           
  17:158 | DONE wsp | na  8 16 |        |             |
  17:159 | DONE ins | na  8 16 | 00603b | 68          |                 pla                  
  17:160 | DONE ins | na  8 16 | 00603c | 8d 71 df    |                 sta 00df71           ; transmit char
  17:161 | DONE ins | na  8 16 | 00603f | 28          |                 plp                  
  17:162 | DONE wsp | na  8 16 |        |             |
  17:163 | DONE ins | na  8 16 | 006040 | 60          |                 rts                  
  17:164 | DONE wsp | na  8 16 |        |             |
  17:165 | DONE cmt | na  8 16 |        |             | ; ===================================================================
  17:166 | DONE cmt | na  8 16 |        |             | ; GET_CHR
  17:167 | DONE cmt | na  8 16 |        |             | ; Fetch the next character from the receive buffer waiting for some to arrive
  17:168 | DONE cmt | na  8 16 |        |             | ; if the buffer is empty.
  17:169 | DONE lbl | na  8 16 | 006041 |             | get_chr                              
  17:170 | DONE ins | na  8 16 | 006041 | 08          |                 php                  ; Save register sizes
  17:171 | DONE ins | na  8 16 | 006042 | e2 20       |                 sep 20               
  17:172 | DONE ctl | na  8 16 |        |             |         .!a8
  17:173 | DONE ins | na  8 16 | 006044 | a9 01       |                 lda.# 01             ; (1<<0)
  17:174 | DONE wsp | na  8 16 |        |             |
  17:175 | DONE lbl | na  8 16 | 006046 |             | get_chr_wait                         
  17:176 | DONE ins | na  8 16 | 006046 | 2c 48 df    |                 bit 00df48           ; Any data in RX buffer?
  17:177 | DONE ins | na  8 16 | 006049 | f0 fb       |                 beq 006046           ; No, keep waiting
  17:178 | DONE ins | na  8 16 | 00604b | ad 71 df    |                 lda 00df71           ; Yes, read it
  17:179 | DONE ins | na  8 16 | 00604e | 28          |                 plp                  
  17:180 | DONE wsp | na  8 16 |        |             |
  17:181 | DONE ins | na  8 16 | 00604f | 60          |                 rts                  
  17:182 | DONE wsp | na  8 16 |        |             |
  17:183 | DONE cmt | na  8 16 |        |             | ; ===================================================================
  17:184 | DONE cmt | na  8 16 |        |             | ; HAVE_CHR?
  17:185 | DONE cmt | na  8 16 |        |             | ; Check if the receive buffer contains any data and return C=1 if there is
  17:186 | DONE cmt | na  8 16 |        |             | ; some.
  17:187 | DONE cmt | na  8 16 |        |             | ; TODO Test this
  17:188 | DONE wsp | na  8 16 |        |             |
  17:189 | DONE lbl | na  8 16 | 006050 |             | have_chr?                            
  17:190 | DONE ins | na  8 16 | 006050 | 48          |                 pha                  ; save caller's A
  17:191 | DONE ins | na  8 16 | 006051 | 08          |                 php                  
  17:192 | DONE ins | na  8 16 | 006052 | e2 20       |                 sep 20               
  17:193 | DONE ctl | na  8 16 |        |             |         .!a8
  17:194 | DONE ins | na  8 16 | 006054 | ad 48 df    |                 lda 00df48           ; read the status register
  17:195 | DONE ins | na  8 16 | 006057 | 28          |                 plp                  
  17:196 | DONE ins | na  8 16 | 006058 | 6a          |                 ror.a                ; shift hw_uart0r bit into carry
  17:197 | DONE ins | na  8 16 | 006059 | c2 20       |                 rep 20               
  17:198 | DONE ctl | na 16 16 |        |             |         .!a16
  17:199 | DONE ins | na 16 16 | 00605b | 68          |                 pla                  ; restore A
  17:200 | DONE ins | na 16 16 | 00605c | 60          |                 rts                  
  17:201 | DONE wsp | na 16 16 |        |             |
  17:202 | DONE cmt | na 16 16 |        |             | ; END
  18:000 | DONE wsp | na 16 16 |        |             |
  19:000 | DONE wsp | na 16 16 |        |             |
  20:000 | DONE cmt | na 16 16 |        |             | ; ===================================================================
  21:000 | DONE cmt | na 16 16 |        |             | ; DICTIONARY ROUTINES
  22:000 | DONE wsp | na 16 16 |        |             |
  23:000 | DONE cmt | na 16 16 |        |             | ; Word code routines are sorted alphabetically, except for the first three
  24:000 | DONE cmt | na 16 16 |        |             | ; - COLD, ABORT, and QUIT - and a few others that flow into each other. The
  25:000 | DONE cmt | na 16 16 |        |             | ; byte and cycle values are calculated without the RTS instruction.
  26:000 | DONE wsp | na 16 16 |        |             |
  27:000 | DONE wsp | na 16 16 |        |             |
  28:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
  29:000 | DONE cmt | na 16 16 |        |             | ; COLD ( -- ) X bytes / X Cycles
  30:000 | DONE cmt | na 16 16 |        |             | ; Reboot the system. TODO determine how to compile this word
  31:000 | DONE wsp | na 16 16 |        |             |
  32:000 | DONE lbl | na 16 16 | 00605d |             | a_cold                               
  33:000 | DONE wsp | na 16 16 |        |             |
  34:000 | DONE ins | na 16 16 | 00605d | 4c 00 60    |                 jmp 006000           ; don't use JSR, jump back to start
  35:000 | DONE lbl | na 16 16 | 006060 |             | start                                
  36:000 | DONE wsp | na 16 16 |        |             |
  37:000 | DONE ins | na 16 16 | 006060 | 18          |                 clc                  
  37:001 | DONE ins | na 16 16 | 006061 | fb          |                 xce                  
  37:002 | DONE ctl | na 16 16 |        |             |         .!native
  38:000 | DONE ins | na 16 16 | 006062 | c2 30       |                 rep 30               
  38:001 | DONE ctl | na 16 16 |        |             |         .!a16
  38:002 | DONE ctl | na 16 16 |        |             |         .!xy16
  39:000 | DONE ins | na 16 16 | 006064 | 78          |                 sei                  
  40:000 | DONE wsp | na 16 16 |        |             |
  41:000 | DONE cmt | na 16 16 |        |             |                 ; TODO switch to Single Task mode
  42:000 | DONE cmt | na 16 16 |        |             |                 ; TODO set up Direct Page stuff
  43:000 | DONE cmt | na 16 16 |        |             |                 ; TODO set up CP
  44:000 | DONE cmt | na 16 16 |        |             |                 ; TODO initiate PAD
  45:000 | DONE cmt | na 16 16 |        |             |                 ; TODO initiate User variables
  46:000 | DONE cmt | na 16 16 |        |             |                 ; TODO initiate high-level words
  47:000 | DONE wsp | na 16 16 |        |             |
  48:000 | DONE cmt | na 16 16 |        |             |                 ; The name token (nt) of DROP is always the first one in the
  49:000 | DONE cmt | na 16 16 |        |             |                 ; clean Dictionary, so we start off the Dictionary Pointer (DP)
  50:000 | DONE cmt | na 16 16 |        |             |                 ; there. Adding high-level words will change this before the
  51:000 | DONE cmt | na 16 16 |        |             |                 ; user has a chance to call WORDS
  52:000 | DONE ins | na 16 16 | 006065 | a9 3b 65    |                 lda.# 00653b         
  53:000 | DONE ins | na 16 16 | 006068 | 85 02       |                 sta.d 000202         
  54:000 | DONE wsp | na 16 16 |        |             |
  55:000 | DONE cmt | na 16 16 |        |             |                 ; Prepare input buffers
  56:000 | DONE ins | na 16 16 | 00606a | a9 00 7c    |                 lda.# 007c00         ; start with first input buffer
  57:000 | DONE ins | na 16 16 | 00606d | 85 0c       |                 sta.d 00020c         
  58:000 | DONE ins | na 16 16 | 00606f | 64 0e       |                 stz.d 00020e         ; current input buffer is empty
  59:000 | DONE ins | na 16 16 | 006071 | 64 10       |                 stz.d 000210         ; previous input buffer is empty
  60:000 | DONE wsp | na 16 16 |        |             |
  61:000 | DONE cmt | na 16 16 |        |             |                 ; print boot strings
  62:000 | DONE ins | na 16 16 | 006073 | a9 ab 65    |                 lda.# 0065ab         
  63:000 | DONE ins | na 16 16 | 006076 | 20 77 65    |                 jsr 006577           
  64:000 | DONE ins | na 16 16 | 006079 | a9 cb 65    |                 lda.# 0065cb         
  65:000 | DONE ins | na 16 16 | 00607c | 20 77 65    |                 jsr 006577           
  66:000 | DONE ins | na 16 16 | 00607f | a9 ea 65    |                 lda.# 0065ea         
  67:000 | DONE ins | na 16 16 | 006082 | 20 77 65    |                 jsr 006577           
  68:000 | DONE ins | na 16 16 | 006085 | a9 17 66    |                 lda.# 006617         
  69:000 | DONE ins | na 16 16 | 006088 | 20 77 65    |                 jsr 006577           
  70:000 | DONE ins | na 16 16 | 00608b | a9 45 66    |                 lda.# 006645         
  71:000 | DONE ins | na 16 16 | 00608e | 20 77 65    |                 jsr 006577           
  72:000 | DONE wsp | na 16 16 |        |             |
  73:000 | DONE cmt | na 16 16 |        |             |                 ; drop through to QUIT
  74:000 | DONE wsp | na 16 16 |        |             |
  75:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
  76:000 | DONE cmt | na 16 16 |        |             | ; ABORT ( -- ) 6+ bytes / 6+ cycles
  77:000 | DONE cmt | na 16 16 |        |             | ; Reset the parameter (data) stack pointer and continue as QUIT
  78:000 | DONE cmt | na 16 16 |        |             | ; We can jump here via subroutine because we reset the stack pointer
  79:000 | DONE cmt | na 16 16 |        |             | ; anyway. Flows into QUIT.
  80:000 | DONE cmt | na 16 16 |        |             | ; TODO see which parts of COLD we should integrate here
  81:000 | DONE wsp | na 16 16 |        |             |
  82:000 | DONE lbl | na 16 16 | 006091 |             | a_abort                              
  83:000 | DONE ins | na 16 16 | 006091 | 18          |                 clc                  
  83:001 | DONE ins | na 16 16 | 006092 | fb          |                 xce                  
  83:002 | DONE ctl | na 16 16 |        |             |         .!native
  84:000 | DONE ins | na 16 16 | 006093 | c2 20       |                 rep 20               
  84:001 | DONE ctl | na 16 16 |        |             |         .!a16
  85:000 | DONE cmt | na 16 16 |        |             |                 ; clear Data Stack
  86:000 | DONE ins | na 16 16 | 006095 | a0 00 00    |                 ldy.# 0000           
  87:000 | DONE ins | na 16 16 | 006098 | a2 f0 02    |                 ldx.# 0002f0         
  88:000 | DONE wsp | na 16 16 |        |             |
  89:000 | DONE cmt | na 16 16 |        |             | ; drops through to QUIT, z_abort is the same as z_quit.
  90:000 | DONE wsp | na 16 16 |        |             |
  91:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
  92:000 | DONE cmt | na 16 16 |        |             | ; QUIT ( -- ) X bytes / X cycles
  93:000 | DONE cmt | na 16 16 |        |             | ; Reset the input, clearning Return Stack. Jumps to QUIT do not have to be
  94:000 | DONE cmt | na 16 16 |        |             | ; subroutine jumps as the Return Stack is cleared anyway. Liara Forth follows
  95:000 | DONE cmt | na 16 16 |        |             | ; the ANSI Forth recommendation to use REFILL. Note we don't display the "ok"
  96:000 | DONE cmt | na 16 16 |        |             | ; system prompt until after the first output.
  97:000 | DONE wsp | na 16 16 |        |             |
  98:000 | DONE lbl | na 16 16 | 00609b |             | a_quit                               ; clear Return Stack
  99:000 | DONE ins | na 16 16 | 00609b | a9 ff 7f    |                 lda.# 007fff         
 100:000 | DONE ins | na 16 16 | 00609e | 1b          |                 tcs                  
 101:000 | DONE wsp | na 16 16 |        |             |
 102:000 | DONE cmt | na 16 16 |        |             |                 ; make sure Instruction Pointer is empty
 103:000 | DONE ins | na 16 16 | 00609f | 64 bd       |                 stz.d 0061bd         
 104:000 | DONE wsp | na 16 16 |        |             |
 105:000 | DONE cmt | na 16 16 |        |             |                 ; switch SOURCE-ID to zero (keyboard input)
 106:000 | DONE ins | na 16 16 | 0060a1 | 64 0a       |                 stz.d 00020a         
 107:000 | DONE wsp | na 16 16 |        |             |
 108:000 | DONE cmt | na 16 16 |        |             |                 ; switch to interpret state (STATE is zero)
 109:000 | DONE ins | na 16 16 | 0060a3 | 64 14       |                 stz.d 000214         
 110:000 | DONE wsp | na 16 16 |        |             |
 111:000 | DONE lbl | na 16 16 | 0060a5 |             | quit_get_line                        
 112:000 | DONE cmt | na 16 16 |        |             |                 ; empty current input buffer. Note the previous input line is
 113:000 | DONE cmt | na 16 16 |        |             |                 ; conserved even if we came here from an abort
 114:000 | DONE ins | na 16 16 | 0060a5 | 64 0e       |                 stz.d 00020e         
 115:000 | DONE wsp | na 16 16 |        |             |
 116:000 | DONE cmt | na 16 16 |        |             |                 ; accept a line from the current input source
 117:000 | DONE ins | na 16 16 | 0060a7 | 20 b6 62    |                 jsr 0062b6           
 118:000 | DONE wsp | na 16 16 |        |             |
 119:000 | DONE ins | na 16 16 | 0060aa | 98          |                 tya                  ; force flag test of TOS
 120:000 | DONE ins | na 16 16 | 0060ab | d0 06       |                 bne 0060b3           
 121:000 | DONE wsp | na 16 16 |        |             |
 122:000 | DONE cmt | na 16 16 |        |             |                 ; If REFILL returned a FALSE flag, something went wrong and we
 123:000 | DONE cmt | na 16 16 |        |             |                 ; need to print an error message and reset the machine. We don't
 124:000 | DONE cmt | na 16 16 |        |             |                 ; need to save A because we're going to clober it anyway when we
 125:000 | DONE cmt | na 16 16 |        |             |                 ; go back to ABORT.
 126:000 | DONE ins | na 16 16 | 0060ad | a9 17 67    |                 lda.# 006717         
 127:000 | DONE ins | na 16 16 | 0060b0 | 4c 71 65    |                 jmp 006571           
 128:000 | DONE wsp | na 16 16 |        |             |
 129:000 | DONE wsp | na 16 16 |        |             |
 130:000 | DONE lbl | na 16 16 | 0060b3 |             | quit_refill_successful               
 131:000 | DONE cmt | na 16 16 |        |             |                 ; Assume we have successfully accepted a string of input from
 132:000 | DONE cmt | na 16 16 |        |             |                 ; a source, with address of buffer in cib and length of input in
 133:000 | DONE cmt | na 16 16 |        |             |                 ; ciblen. We arrive here still with the TRUE flag from REFILL as
 134:000 | DONE cmt | na 16 16 |        |             |                 ; TOS (in Y)
 135:000 | DONE ins | na 16 16 | 0060b3 | b4 00       |                 ldy.dx 00            ; drop TOS
 136:000 | DONE ins | na 16 16 | 0060b5 | e8          |                 inx                  
 137:000 | DONE ins | na 16 16 | 0060b6 | e8          |                 inx                  
 138:000 | DONE wsp | na 16 16 |        |             |
 139:000 | DONE cmt | na 16 16 |        |             |                 ; make >IN point to begining of buffer
 140:000 | DONE ins | na 16 16 | 0060b7 | 64 12       |                 stz.d 000212         
 141:000 | DONE wsp | na 16 16 |        |             |
 142:000 | DONE cmt | na 16 16 |        |             |                 ; TESTING TALI FORTH F_COMPEXE BEGINS HERE
 143:000 | DONE ins | na 16 16 | 0060b9 | 20 47 65    |                 jsr 006547           
 144:000 | DONE wsp | na 16 16 |        |             |
 145:000 | DONE cmt | na 16 16 |        |             |                 ; TODO testing
 146:000 | DONE cmt | na 16 16 |        |             |                 ; Display system prompt if all went well
 147:000 | DONE ins | na 16 16 | 0060bc | a9 58 66    |                 lda.# 006658         
 148:000 | DONE ins | na 16 16 | 0060bf | 20 77 65    |                 jsr 006577           
 149:000 | DONE wsp | na 16 16 |        |             |
 150:000 | DONE cmt | na 16 16 |        |             |                 ; get next line
 151:000 | DONE ins | na 16 16 | 0060c2 | 4c a5 60    |                 jmp 0060a5           
 152:000 | DONE wsp | na 16 16 |        |             |
 153:000 | DONE lbl | na 16 16 | 0060c5 |             | z_cold                               
 154:000 | DONE lbl | na 16 16 | 0060c5 |             | z_abort                              
 155:000 | DONE lbl | na 16 16 | 0060c5 |             | z_quit                               
 155:001 | DONE ins | na 16 16 | 0060c5 | ea          |                 nop                  ; dummy for compilation, TODO test if required
 156:000 | DONE wsp | na 16 16 |        |             |
 157:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 158:000 | DONE cmt | na 16 16 |        |             | ; >IN "TO-IN" ( -- addr ) 6 bytes / X cycles
 159:000 | DONE cmt | na 16 16 |        |             | ; Return address where pointer to current char in input buffer lives (>IN)
 160:000 | DONE wsp | na 16 16 |        |             |
 161:000 | DONE lbl | na 16 16 | 0060c6 |             | a_to-in                              
 161:001 | DONE ins | na 16 16 | 0060c6 | ca          |                 dex                  
 162:000 | DONE ins | na 16 16 | 0060c7 | ca          |                 dex                  
 163:000 | DONE ins | na 16 16 | 0060c8 | 94 00       |                 sty.dx 00            
 164:000 | DONE wsp | na 16 16 |        |             |
 165:000 | DONE ins | na 16 16 | 0060ca | a0 12 02    |                 ldy.# 000212         ; >IN
 166:000 | DONE lbl | na 16 16 | 0060cd |             | z_to-in                              
 166:001 | DONE ins | na 16 16 | 0060cd | 60          |                 rts                  
 167:000 | DONE wsp | na 16 16 |        |             |
 168:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 169:000 | DONE cmt | na 16 16 |        |             | ; + "PLUS" ( n m -- n+m ) 7 bytes / X cycles
 170:000 | DONE cmt | na 16 16 |        |             | ; Add TOS and NOS
 171:000 | DONE wsp | na 16 16 |        |             |
 172:000 | DONE lbl | na 16 16 | 0060ce |             | a_plus                               
 172:001 | DONE ins | na 16 16 | 0060ce | 98          |                 tya                  
 173:000 | DONE ins | na 16 16 | 0060cf | 18          |                 clc                  
 174:000 | DONE ins | na 16 16 | 0060d0 | 75 00       |                 adc.dx 00            
 175:000 | DONE ins | na 16 16 | 0060d2 | a8          |                 tay                  
 176:000 | DONE ins | na 16 16 | 0060d3 | e8          |                 inx                  
 177:000 | DONE ins | na 16 16 | 0060d4 | e8          |                 inx                  
 178:000 | DONE wsp | na 16 16 |        |             |
 179:000 | DONE lbl | na 16 16 | 0060d5 |             | z_plus                               
 179:001 | DONE ins | na 16 16 | 0060d5 | 60          |                 rts                  
 180:000 | DONE wsp | na 16 16 |        |             |
 181:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 182:000 | DONE cmt | na 16 16 |        |             | ; 0 "ZERO" ( -- 0 ) 7 bytes / 12 cycles
 183:000 | DONE cmt | na 16 16 |        |             | ; Pushes the number 0000 on the Data Stack
 184:000 | DONE wsp | na 16 16 |        |             |
 185:000 | DONE lbl | na 16 16 | 0060d6 |             | a_zero                               
 186:000 | DONE dir | na 16 16 |        |             |         .!xy16                       
 187:000 | DONE ins | na 16 16 | 0060d6 | ca          |                 dex                  
 188:000 | DONE ins | na 16 16 | 0060d7 | ca          |                 dex                  
 189:000 | DONE ins | na 16 16 | 0060d8 | 94 00       |                 sty.dx 00            
 190:000 | DONE ins | na 16 16 | 0060da | a0 00 00    |                 ldy.# 0000           
 191:000 | DONE wsp | na 16 16 |        |             |
 192:000 | DONE lbl | na 16 16 | 0060dd |             | z_zero                               
 192:001 | DONE ins | na 16 16 | 0060dd | 60          |                 rts                  
 193:000 | DONE wsp | na 16 16 |        |             |
 194:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 195:000 | DONE cmt | na 16 16 |        |             | ; 1 "ONE" ( -- 1 ) 7 bytes / 12 cycles
 196:000 | DONE cmt | na 16 16 |        |             | ; Pushes the number 1 on the Data Stack
 197:000 | DONE wsp | na 16 16 |        |             |
 198:000 | DONE lbl | na 16 16 | 0060de |             | a_one                                
 199:000 | DONE dir | na 16 16 |        |             |         .!xy16                       
 200:000 | DONE ins | na 16 16 | 0060de | ca          |                 dex                  
 201:000 | DONE ins | na 16 16 | 0060df | ca          |                 dex                  
 202:000 | DONE ins | na 16 16 | 0060e0 | 94 00       |                 sty.dx 00            
 203:000 | DONE ins | na 16 16 | 0060e2 | a0 01 00    |                 ldy.# 0001           
 204:000 | DONE wsp | na 16 16 |        |             |
 205:000 | DONE lbl | na 16 16 | 0060e5 |             | z_one                                
 205:001 | DONE ins | na 16 16 | 0060e5 | 60          |                 rts                  
 206:000 | DONE wsp | na 16 16 |        |             |
 207:000 | DONE wsp | na 16 16 |        |             |
 208:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 209:000 | DONE cmt | na 16 16 |        |             | ; 1+ "ONE-PLUS" ( n -- n+1 ) 1 bytes / 2 cycles
 210:000 | DONE cmt | na 16 16 |        |             | ; Add 1 to TOS. Because there is no checking if there is actually anything on
 211:000 | DONE cmt | na 16 16 |        |             | ; the Data Stack, this routine will fail silently if the stack is empty.
 212:000 | DONE wsp | na 16 16 |        |             |
 213:000 | DONE lbl | na 16 16 | 0060e6 |             | a_one-plus                           
 213:001 | DONE ins | na 16 16 | 0060e6 | c8          |                 iny                  
 214:000 | DONE lbl | na 16 16 | 0060e7 |             | z_one-plus                           
 214:001 | DONE ins | na 16 16 | 0060e7 | 60          |                 rts                  
 215:000 | DONE wsp | na 16 16 |        |             |
 216:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 217:000 | DONE cmt | na 16 16 |        |             | ; 2 "TWO" ( -- 2 ) 7 bytes / 12 cycles
 218:000 | DONE cmt | na 16 16 |        |             | ; Pushes the number 2 on the Data Stack
 219:000 | DONE wsp | na 16 16 |        |             |
 220:000 | DONE lbl | na 16 16 | 0060e8 |             | a_two                                
 221:000 | DONE dir | na 16 16 |        |             |         .!xy16                       
 222:000 | DONE ins | na 16 16 | 0060e8 | ca          |                 dex                  
 223:000 | DONE ins | na 16 16 | 0060e9 | ca          |                 dex                  
 224:000 | DONE ins | na 16 16 | 0060ea | 94 00       |                 sty.dx 00            
 225:000 | DONE ins | na 16 16 | 0060ec | a0 02 00    |                 ldy.# 0002           
 226:000 | DONE wsp | na 16 16 |        |             |
 227:000 | DONE lbl | na 16 16 | 0060ef |             | z_two                                
 227:001 | DONE ins | na 16 16 | 0060ef | 60          |                 rts                  
 228:000 | DONE wsp | na 16 16 |        |             |
 229:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 230:000 | DONE cmt | na 16 16 |        |             | ; 2DUP ( n m -- n m n m ) 10 bytes / 23 cycles
 231:000 | DONE cmt | na 16 16 |        |             | ; Duplicated the top two data stack entries
 232:000 | DONE wsp | na 16 16 |        |             |
 233:000 | DONE lbl | na 16 16 | 0060f0 |             | a_2dup                               
 234:000 | DONE ins | na 16 16 | 0060f0 | ca          |                 dex                  
 235:000 | DONE ins | na 16 16 | 0060f1 | ca          |                 dex                  
 236:000 | DONE ins | na 16 16 | 0060f2 | ca          |                 dex                  
 237:000 | DONE ins | na 16 16 | 0060f3 | ca          |                 dex                  
 238:000 | DONE ins | na 16 16 | 0060f4 | 94 02       |                 sty.dx 02            
 239:000 | DONE ins | na 16 16 | 0060f6 | b5 04       |                 lda.dx 04            
 240:000 | DONE ins | na 16 16 | 0060f8 | 95 00       |                 sta.dx 00            
 241:000 | DONE wsp | na 16 16 |        |             |
 242:000 | DONE lbl | na 16 16 | 0060fa |             | z_2dup                               
 242:001 | DONE ins | na 16 16 | 0060fa | 60          |                 rts                  
 243:000 | DONE wsp | na 16 16 |        |             |
 244:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 245:000 | DONE cmt | na 16 16 |        |             | ; ACCEPT ( addr n1 -- n2 ) X bytes / X cycles
 246:000 | DONE cmt | na 16 16 |        |             | ; Receive a string of at most n1 characters, placing them at addr. Return the
 247:000 | DONE cmt | na 16 16 |        |             | ; actual number of characters as n2. Characters are echoed as they are received.
 248:000 | DONE cmt | na 16 16 |        |             | ; ACCEPT is normally called by REFILL these days.
 249:000 | DONE wsp | na 16 16 |        |             |
 250:000 | DONE lbl | na 16 16 | 0060fb |             | a_accept                             
 251:000 | DONE cmt | na 16 16 |        |             |                 ; Set up loop
 252:000 | DONE ins | na 16 16 | 0060fb | b5 00       |                 lda.dx 00            ; max number of chars to accept is NOS
 253:000 | DONE ins | na 16 16 | 0060fd | d0 04       |                 bne 006103           
 254:000 | DONE wsp | na 16 16 |        |             |
 255:000 | DONE ins | na 16 16 | 0060ff | a8          |                 tay                  ; if we were told to get zero chars, just quit TODO TEST
 256:000 | DONE ins | na 16 16 | 006100 | e8          |                 inx                  
 257:000 | DONE ins | na 16 16 | 006101 | e8          |                 inx                  
 258:000 | DONE ins | na 16 16 | 006102 | 60          |                 rts                  
 259:000 | DONE wsp | na 16 16 |        |             |
 260:000 | DONE lbl | na 16 16 | 006103 |             | accept_nonzero                       
 261:000 | DONE ins | na 16 16 | 006103 | 85 18       |                 sta.d 000218         ; non-zero number of chars requested, save in tmp2
 262:000 | DONE ins | na 16 16 | 006105 | 84 16       |                 sty.d 000216         ; address of buffer to use in tmp1
 263:000 | DONE ins | na 16 16 | 006107 | a0 00 00    |                 ldy.# 0000           ; TOS is dropped anyway, so don't save Y
 264:000 | DONE ins | na 16 16 | 00610a | e2 20       |                 sep 20               
 264:001 | DONE ctl | na  8 16 |        |             |         .!a8
 265:000 | DONE wsp | na  8 16 |        |             |
 266:000 | DONE lbl | na  8 16 | 00610c |             | accept_loop                          
 267:000 | DONE cmt | na  8 16 |        |             |                 ; TODO rewrite with KEY so we can revector it
 268:000 | DONE cmt | na  8 16 |        |             |                 ; We don't need to check for CTRL-l, because vt100 terminal
 269:000 | DONE cmt | na  8 16 |        |             |                 ; clears the screen automatically
 270:000 | DONE ins | na  8 16 | 00610c | 20 41 60    |                 jsr 006041           
 271:000 | DONE dir | na  8 16 |        |             |         .!a8                         
 272:000 | DONE ins | na  8 16 | 00610f | c9 0a       |                 cmp.# AscLF          ; we quit on both line feed and carriage return
 273:000 | DONE ins | na  8 16 | 006111 | f0 44       |                 beq 006157           
 274:000 | DONE ins | na  8 16 | 006113 | c9 0d       |                 cmp.# AscCR          
 275:000 | DONE ins | na  8 16 | 006115 | f0 40       |                 beq 006157           
 276:000 | DONE wsp | na  8 16 |        |             |
 277:000 | DONE ins | na  8 16 | 006117 | c9 08       |                 cmp.# AscBS          ; BS and DEL do the same thing for the moment
 278:000 | DONE ins | na  8 16 | 006119 | f0 43       |                 beq 00615e           
 279:000 | DONE ins | na  8 16 | 00611b | c9 7f       |                 cmp.# AscDEL         
 280:000 | DONE ins | na  8 16 | 00611d | f0 3f       |                 beq 00615e           
 281:000 | DONE wsp | na  8 16 |        |             |
 282:000 | DONE ins | na  8 16 | 00611f | c9 03       |                 cmp.# AscCC          ; CTRL-c aborts (see if this is too harsh)
 283:000 | DONE ins | na  8 16 | 006121 | d0 03       |                 bne 006126           
 284:000 | DONE ins | na  8 16 | 006123 | 4c 91 60    |                 jmp 006091           ; ABORT switches back to 16-bit A
 285:000 | DONE lbl | na  8 16 | 006126 |             | @                                    
 286:000 | DONE ins | na  8 16 | 006126 | c9 1b       |                 cmp.# AscESC         ; ESC aborts (in this version)
 287:000 | DONE ins | na  8 16 | 006128 | d0 03       |                 bne 00612d           
 288:000 | DONE ins | na  8 16 | 00612a | 4c 91 60    |                 jmp 006091           ; ABORT switches back to 16-bit A
 289:000 | DONE lbl | na  8 16 | 00612d |             | @                                    
 290:000 | DONE cmt | na  8 16 |        |             |                 ; CTRL-p, will be used for "previous cmd", TODO
 291:000 | DONE ins | na  8 16 | 00612d | c9 10       |                 cmp.# AscCP          
 292:000 | DONE ins | na  8 16 | 00612f | d0 0c       |                 bne 00613d           
 293:000 | DONE ins | na  8 16 | 006131 | c2 20       |                 rep 20               
 293:001 | DONE ctl | na 16 16 |        |             |         .!a16
 294:000 | DONE ins | na 16 16 | 006133 | a9 8b 67    |                 lda.# 00678b         
 295:000 | DONE ins | na 16 16 | 006136 | 20 77 65    |                 jsr 006577           
 296:000 | DONE ins | na 16 16 | 006139 | e2 20       |                 sep 20               
 296:001 | DONE ctl | na  8 16 |        |             |         .!a8
 297:000 | DONE ins | na  8 16 | 00613b | 80 cf       |                 bra 00610c           
 298:000 | DONE wsp | na  8 16 |        |             |
 299:000 | DONE lbl | na  8 16 | 00613d |             | @                                    
 300:000 | DONE cmt | na  8 16 |        |             |                 ; CTRL-n, will be used for "next cmd", TODO
 301:000 | DONE ins | na  8 16 | 00613d | c9 0e       |                 cmp.# AscCN          
 302:000 | DONE ins | na  8 16 | 00613f | d0 0c       |                 bne 00614d           
 303:000 | DONE ins | na  8 16 | 006141 | c2 20       |                 rep 20               
 303:001 | DONE ctl | na 16 16 |        |             |         .!a16
 304:000 | DONE ins | na 16 16 | 006143 | a9 9e 67    |                 lda.# 00679e         
 305:000 | DONE ins | na 16 16 | 006146 | 20 77 65    |                 jsr 006577           
 306:000 | DONE ins | na 16 16 | 006149 | e2 20       |                 sep 20               
 306:001 | DONE ctl | na  8 16 |        |             |         .!a8
 307:000 | DONE ins | na  8 16 | 00614b | 80 bf       |                 bra 00610c           
 308:000 | DONE wsp | na  8 16 |        |             |
 309:000 | DONE lbl | na  8 16 | 00614d |             | @                                    
 310:000 | DONE cmt | na  8 16 |        |             |                 ; That's enough, echo character (TODO change to EMIT)
 311:000 | DONE ins | na  8 16 | 00614d | 20 30 60    |                 jsr 006030           ; echo character
 312:000 | DONE dir | na  8 16 |        |             |         .!a8                         
 313:000 | DONE cmt | na  8 16 |        |             |                 ; TODO multitasking: Add PAUSE here (or in EMIT)
 314:000 | DONE wsp | na  8 16 |        |             |
 315:000 | DONE ins | na  8 16 | 006150 | 91 0c       |                 sta.diy 00020c       ; STA (CIB),Y
 316:000 | DONE ins | na  8 16 | 006152 | c8          |                 iny                  
 317:000 | DONE ins | na  8 16 | 006153 | c4 18       |                 cpy.d 000218         ; reached character limit?
 318:000 | DONE ins | na  8 16 | 006155 | d0 b5       |                 bne 00610c           ; fall thru if buffer limit reached
 319:000 | DONE wsp | na  8 16 |        |             |
 320:000 | DONE lbl | na  8 16 | 006157 |             | accept_eol                           
 321:000 | DONE ins | na  8 16 | 006157 | 84 0e       |                 sty.d 00020e         ; Y contains number of chars accepted already
 322:000 | DONE ins | na  8 16 | 006159 | e8          |                 inx                  
 323:000 | DONE ins | na  8 16 | 00615a | e8          |                 inx                  
 324:000 | DONE ins | na  8 16 | 00615b | c2 20       |                 rep 20               
 324:001 | DONE ctl | na 16 16 |        |             |         .!a16
 325:000 | DONE ins | na 16 16 | 00615d | 60          |                 rts                  ; this is the actual return of the routine
 326:000 | DONE wsp | na 16 16 |        |             |
 327:000 | DONE lbl | na 16 16 | 00615e |             | accept_bs                            
 328:000 | DONE dir | na  8 16 |        |             |         .!a8                         
 329:000 | DONE ins | na  8 16 | 00615e | c0 00 00    |                 cpy.# 00             ; buffer empty?
 330:000 | DONE ins | na  8 16 | 006161 | d0 06       |                 bne 006169           
 331:000 | DONE wsp | na  8 16 |        |             |
 332:000 | DONE ins | na  8 16 | 006163 | a9 07       |                 lda.# AscBELL        ; complain and don't delete beyond the start of line
 333:000 | DONE ins | na  8 16 | 006165 | 20 30 60    |                 jsr 006030           
 334:000 | DONE ins | na  8 16 | 006168 | c8          |                 iny                  
 335:000 | DONE lbl | na  8 16 | 006169 |             | @                                    
 336:000 | DONE ins | na  8 16 | 006169 | 88          |                 dey                  
 337:000 | DONE ins | na  8 16 | 00616a | a9 08       |                 lda.# AscBS          ; move back one
 338:000 | DONE ins | na  8 16 | 00616c | 20 30 60    |                 jsr 006030           
 339:000 | DONE ins | na  8 16 | 00616f | a9 20       |                 lda.# AscSP          ; print a space
 340:000 | DONE ins | na  8 16 | 006171 | 20 30 60    |                 jsr 006030           
 341:000 | DONE ins | na  8 16 | 006174 | a9 08       |                 lda.# AscBS          ; move back over space
 342:000 | DONE ins | na  8 16 | 006176 | 20 30 60    |                 jsr 006030           
 343:000 | DONE wsp | na  8 16 |        |             |
 344:000 | DONE ins | na  8 16 | 006179 | 80 91       |                 bra 00610c           
 345:000 | DONE wsp | na  8 16 |        |             |
 346:000 | DONE lbl | na  8 16 | 00617b |             | z_accept                             
 346:001 | DONE ins | na  8 16 | 00617b | 60          |                 rts                  
 347:000 | DONE wsp | na  8 16 |        |             |
 348:000 | DONE wsp | na  8 16 |        |             |
 349:000 | DONE cmt | na  8 16 |        |             | ; -------------------------------------------------------------------
 350:000 | DONE cmt | na  8 16 |        |             | ; BELL ( -- ) X bytes / X cycles
 351:000 | DONE cmt | na  8 16 |        |             | ; Trigger terminal bell
 352:000 | DONE wsp | na  8 16 |        |             |
 353:000 | DONE lbl | na  8 16 | 00617c |             | a_bell                               
 354:000 | DONE dir | na 16 16 |        |             |         .!a16                        
 355:000 | DONE ins | na 16 16 | 00617c | a9 07 00    |                 lda.# AscBELL        
 356:000 | DONE ins | na 16 16 | 00617f | 20 30 60    |                 jsr 006030           
 357:000 | DONE wsp | na 16 16 |        |             |
 358:000 | DONE lbl | na 16 16 | 006182 |             | z_bell                               
 358:001 | DONE ins | na 16 16 | 006182 | 60          |                 rts                  
 359:000 | DONE wsp | na 16 16 |        |             |
 360:000 | DONE wsp | na 16 16 |        |             |
 361:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 362:000 | DONE cmt | na 16 16 |        |             | ; BL ( -- u ) 7 bytes / 12 cycles
 363:000 | DONE cmt | na 16 16 |        |             | ; Put ASCII char for SPACE on Data Stack
 364:000 | DONE wsp | na 16 16 |        |             |
 365:000 | DONE lbl | na 16 16 | 006183 |             | a_bl                                 
 366:000 | DONE dir | na 16 16 |        |             |         .!xy16                       
 367:000 | DONE dir | na 16 16 |        |             |         .!a16                        
 368:000 | DONE ins | na 16 16 | 006183 | ca          |                 dex                  
 369:000 | DONE ins | na 16 16 | 006184 | ca          |                 dex                  
 370:000 | DONE ins | na 16 16 | 006185 | 94 00       |                 sty.dx 00            
 371:000 | DONE ins | na 16 16 | 006187 | a0 20 00    |                 ldy.# AscSP          
 372:000 | DONE wsp | na 16 16 |        |             |
 373:000 | DONE lbl | na 16 16 | 00618a |             | z_bl                                 
 373:001 | DONE ins | na 16 16 | 00618a | 60          |                 rts                  
 374:000 | DONE wsp | na 16 16 |        |             |
 375:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 376:000 | DONE cmt | na 16 16 |        |             | ; BYE ( -- ) 2 bytes / 7-8 cycles
 377:000 | DONE cmt | na 16 16 |        |             | ; Leave Liara Forth, returning to Mensch Monitor
 378:000 | DONE wsp | na 16 16 |        |             |
 379:000 | DONE lbl | na 16 16 | 00618b |             | a_bye                                
 379:001 | DONE ins | na 16 16 | 00618b | 00 00       |                 brk 00               ; status byte 00 required for assembler
 380:000 | DONE lbl | na 16 16 | 00618d |             | z_bye                                
 380:001 | DONE ins | na 16 16 | 00618d | 60          |                 rts                  ; dummy for compiling, never reached
 381:000 | DONE wsp | na 16 16 |        |             |
 382:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 383:000 | DONE cmt | na 16 16 |        |             | ; COMMA "," ( n -- ) 11 bytes / 29 cycles
 384:000 | DONE cmt | na 16 16 |        |             | ; Allot one cell and store TOS in memory. We ignore alignment issues, though
 385:000 | DONE cmt | na 16 16 |        |             | ; satisfy the ANSI requirement that an aligned compiler pointer will remain
 386:000 | DONE cmt | na 16 16 |        |             | ; aligned
 387:000 | DONE cmt | na 16 16 |        |             | ; There is another variant possible:
 388:000 | DONE cmt | na 16 16 |        |             | ;               tya
 389:000 | DONE cmt | na 16 16 |        |             | ;               ldy.d cp
 390:000 | DONE cmt | na 16 16 |        |             | ;               sta.y 0000
 391:000 | DONE cmt | na 16 16 |        |             | ;               iny
 392:000 | DONE cmt | na 16 16 |        |             | ;               iny
 393:000 | DONE cmt | na 16 16 |        |             | ;               sty.d cp
 394:000 | DONE cmt | na 16 16 |        |             | ;               ldy.dx 00
 395:000 | DONE cmt | na 16 16 |        |             | ;               inx
 396:000 | DONE cmt | na 16 16 |        |             | ;               inx
 397:000 | DONE cmt | na 16 16 |        |             | ; This is as fast as the variant below, but three bytes longer
 398:000 | DONE wsp | na 16 16 |        |             |
 399:000 | DONE lbl | na 16 16 | 00618e |             | a_comma                              
 399:001 | DONE ins | na 16 16 | 00618e | 98          |                 tya                  
 400:000 | DONE ins | na 16 16 | 00618f | 92 00       |                 sta.di 000200        ; STA (CP)
 401:000 | DONE ins | na 16 16 | 006191 | e6 00       |                 inc.d 000200         
 402:000 | DONE ins | na 16 16 | 006193 | e6 00       |                 inc.d 000200         
 403:000 | DONE wsp | na 16 16 |        |             |
 404:000 | DONE ins | na 16 16 | 006195 | b4 00       |                 ldy.dx 00            
 405:000 | DONE ins | na 16 16 | 006197 | e8          |                 inx                  
 406:000 | DONE ins | na 16 16 | 006198 | e8          |                 inx                  
 407:000 | DONE wsp | na 16 16 |        |             |
 408:000 | DONE lbl | na 16 16 | 006199 |             | z_comma                              
 408:001 | DONE ins | na 16 16 | 006199 | 60          |                 rts                  
 409:000 | DONE wsp | na 16 16 |        |             |
 410:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 411:000 | DONE cmt | na 16 16 |        |             | ; COUNT ( c-addr -- addr u ) 14 bytes / X cycles
 412:000 | DONE cmt | na 16 16 |        |             | ; Convert old-style character string to address-length pair. Note that the
 413:000 | DONE cmt | na 16 16 |        |             | ; length of the string c-addr ist stored in character length (8 bit), not cell
 414:000 | DONE cmt | na 16 16 |        |             | ; length (16 bit). This is rarely used these days, though COUNT can also be used
 415:000 | DONE cmt | na 16 16 |        |             | ; to step through a string character by character.
 416:000 | DONE wsp | na 16 16 |        |             |
 417:000 | DONE lbl | na 16 16 | 00619a |             | a_count                              
 418:000 | DONE dir | na 16 16 |        |             |         .!a16                        
 419:000 | DONE dir | na 16 16 |        |             |         .!xy16                       
 420:000 | DONE ins | na 16 16 | 00619a | 98          |                 tya                  
 421:000 | DONE ins | na 16 16 | 00619b | 1a          |                 inc.a                ; String address starts one char later
 422:000 | DONE ins | na 16 16 | 00619c | ca          |                 dex                  
 423:000 | DONE ins | na 16 16 | 00619d | ca          |                 dex                  
 424:000 | DONE ins | na 16 16 | 00619e | 95 00       |                 sta.dx 00            ; NOS
 425:000 | DONE wsp | na 16 16 |        |             |
 426:000 | DONE ins | na 16 16 | 0061a0 | b9 00 00    |                 lda.y 0000           ; LDA $0000,Y  first byte is length
 427:000 | DONE ins | na 16 16 | 0061a3 | eb          |                 xba                  ; move length to LSB
 428:000 | DONE ins | na 16 16 | 0061a4 | 29 ff 00    |                 and.# 00ff           ; get rid of whatever was MSB
 429:000 | DONE ins | na 16 16 | 0061a7 | a8          |                 tay                  ; TOS
 430:000 | DONE wsp | na 16 16 |        |             |
 431:000 | DONE lbl | na 16 16 | 0061a8 |             | z_count                              
 431:001 | DONE ins | na 16 16 | 0061a8 | 60          |                 rts                  
 432:000 | DONE wsp | na 16 16 |        |             |
 433:000 | DONE wsp | na 16 16 |        |             |
 434:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 435:000 | DONE cmt | na 16 16 |        |             | ; CR ( -- ) X bytes / X cycles
 436:000 | DONE cmt | na 16 16 |        |             | ; Cause following output to appear at beginning of next line
 437:000 | DONE wsp | na 16 16 |        |             |
 438:000 | DONE lbl | na 16 16 | 0061a9 |             | a_cr                                 
 439:000 | DONE ins | na 16 16 | 0061a9 | e2 20       |                 sep 20               
 439:001 | DONE ctl | na  8 16 |        |             |         .!a8
 440:000 | DONE ins | na  8 16 | 0061ab | a9 0a       |                 lda.# AscLF          ; test with AscCR for emulators
 441:000 | DONE ins | na  8 16 | 0061ad | 20 30 60    |                 jsr 006030           
 442:000 | DONE ins | na  8 16 | 0061b0 | c2 20       |                 rep 20               
 442:001 | DONE ctl | na 16 16 |        |             |         .!a16
 443:000 | DONE wsp | na 16 16 |        |             |
 444:000 | DONE lbl | na 16 16 | 0061b2 |             | z_cr                                 
 444:001 | DONE ins | na 16 16 | 0061b2 | 60          |                 rts                  
 445:000 | DONE wsp | na 16 16 |        |             |
 446:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 447:000 | DONE cmt | na 16 16 |        |             | ; DROP ( n -- ) 4 bytes / 9 cycles
 448:000 | DONE cmt | na 16 16 |        |             | ; Drop first entry on Data Stack
 449:000 | DONE wsp | na 16 16 |        |             |
 450:000 | DONE lbl | na 16 16 | 0061b3 |             | a_drop                               
 451:000 | DONE dir | na 16 16 |        |             |         .!xy16                       
 452:000 | DONE ins | na 16 16 | 0061b3 | b4 00       |                 ldy.dx 00            
 453:000 | DONE ins | na 16 16 | 0061b5 | e8          |                 inx                  
 454:000 | DONE ins | na 16 16 | 0061b6 | e8          |                 inx                  
 455:000 | DONE wsp | na 16 16 |        |             |
 456:000 | DONE lbl | na 16 16 | 0061b7 |             | z_drop                               
 456:001 | DONE ins | na 16 16 | 0061b7 | 60          |                 rts                  
 457:000 | DONE wsp | na 16 16 |        |             |
 458:000 | DONE wsp | na 16 16 |        |             |
 459:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 460:000 | DONE cmt | na 16 16 |        |             | ; DUP  ( n -- n n ) 4 bytes / 9 cycles
 461:000 | DONE cmt | na 16 16 |        |             | ; Duplicate first entry on Data Stack
 462:000 | DONE wsp | na 16 16 |        |             |
 463:000 | DONE lbl | na 16 16 | 0061b8 |             | a_dup                                
 464:000 | DONE dir | na 16 16 |        |             |         .!xy16                       
 465:000 | DONE ins | na 16 16 | 0061b8 | ca          |                 dex                  
 466:000 | DONE ins | na 16 16 | 0061b9 | ca          |                 dex                  
 467:000 | DONE ins | na 16 16 | 0061ba | 94 00       |                 sty.dx 00            
 468:000 | DONE wsp | na 16 16 |        |             |
 469:000 | DONE lbl | na 16 16 | 0061bc |             | z_dup                                
 469:001 | DONE ins | na 16 16 | 0061bc | 60          |                 rts                  
 470:000 | DONE wsp | na 16 16 |        |             |
 471:000 | DONE wsp | na 16 16 |        |             |
 472:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 473:000 | DONE cmt | na 16 16 |        |             | ; EXECUTE ( xt -- ) X bytes / X cycles
 474:000 | DONE cmt | na 16 16 |        |             | ; Run a word with help of its xt on the TOS
 475:000 | DONE wsp | na 16 16 |        |             |
 476:000 | DONE cmt | na 16 16 |        |             | ; Reserve three bytes for the jump - three in case we want to expand to the full
 477:000 | DONE cmt | na 16 16 |        |             | ; range
 478:000 | DONE lbl | na 16 16 | 0061bd |             | execute_ip                           
 478:001 | DONE dir | na 16 16 | 0061bd | (3 bytes)   |         .byte 00, 00, 00             
 478:001 | DONE dir | na 16 16 |        |             |                 00 00 00                 --  . . .
 479:000 | DONE wsp | na 16 16 |        |             |
 480:000 | DONE lbl | na 16 16 | 0061c0 |             | a_execute                            
 481:000 | DONE dir | na 16 16 |        |             |         .!xy16                       
 482:000 | DONE cmt | na 16 16 |        |             | 		; Store the xt for later use and then drop it off the stack
 483:000 | DONE ins | na 16 16 | 0061c0 | 8c bd 61    |                 sty 0061bd           
 484:000 | DONE ins | na 16 16 | 0061c3 | b4 00       |                 ldy.dx 00            
 485:000 | DONE ins | na 16 16 | 0061c5 | e8          |                 inx                  
 486:000 | DONE ins | na 16 16 | 0061c6 | e8          |                 inx                  
 487:000 | DONE wsp | na 16 16 |        |             |
 488:000 | DONE cmt | na 16 16 |        |             |                 ; Only JMP has the addressing mode we need, and all the
 489:000 | DONE cmt | na 16 16 |        |             |                 ; Forth commands end with a RTS instruction. We fake the address
 490:000 | DONE cmt | na 16 16 |        |             |                 ; by saving it by hand to the stack
 491:000 | DONE dir | na 16 16 |        |             |         .!a16                        
 492:000 | DONE ins | na 16 16 | 0061c7 | a9 ce 61    |                 lda.# 0061ce         
 493:000 | DONE ins | na 16 16 | 0061ca | 48          |                 pha                  
 494:000 | DONE ins | na 16 16 | 0061cb | 6c bd 61    |                 jmp.i 0061bd         ; JMP (EXECUTE_IP)
 495:000 | DONE wsp | na 16 16 |        |             |
 496:000 | DONE lbl | na 16 16 | 0061ce |             | execute_done                         ; keep the NOP here as the landing site for the indirect
 497:000 | DONE cmt | na 16 16 |        |             |                 ; subroutine jump (easier and quicker than adjusting the
 498:000 | DONE cmt | na 16 16 |        |             |                 ; return address on the stack)
 499:000 | DONE ins | na 16 16 | 0061ce | ea          |                 nop                  
 500:000 | DONE wsp | na 16 16 |        |             |
 501:000 | DONE lbl | na 16 16 | 0061cf |             | z_execute                            
 501:001 | DONE ins | na 16 16 | 0061cf | 60          |                 rts                  
 502:000 | DONE wsp | na 16 16 |        |             |
 503:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 504:000 | DONE cmt | na 16 16 |        |             | ; FALSE ( -- f ) 7 bytes / 12 cycles
 505:000 | DONE cmt | na 16 16 |        |             | ; Pushes value $0000 for Forth true on Data Stack. This is the same code as for
 506:000 | DONE cmt | na 16 16 |        |             | ; ZERO, see there. Dictionary entry should have a_zero/z_zero instead of
 507:000 | DONE cmt | na 16 16 |        |             | ; a_false/z_false
 508:000 | DONE wsp | na 16 16 |        |             |
 509:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 510:000 | DONE cmt | na 16 16 |        |             | ; FIND-NAME ( addr u -- nt | 0 ) 91 bytes / X cycles
 511:000 | DONE cmt | na 16 16 |        |             | ; Given a string, find the Name Token (nt) of a word or return zero if the word
 512:000 | DONE cmt | na 16 16 |        |             | ; is not in the dictionary. We use this instead of ancient FIND to look up words
 513:000 | DONE cmt | na 16 16 |        |             | ; in the Dictionary passed by PARSE-NAME. Note this returns the nt, not the xt
 514:000 | DONE cmt | na 16 16 |        |             | ; of a word like FIND. To convert, use NAME>INT. This is a Gforth word. See
 515:000 | DONE cmt | na 16 16 |        |             | ; https://www.complang.tuwien.ac.at/forth/gforth/Docs-html/Name-token.html
 516:000 | DONE cmt | na 16 16 |        |             | ; FIND calls this word for the hard word
 517:000 | DONE lbl | na 16 16 | 0061d0 |             | a_find-name                          
 518:000 | DONE cmt | na 16 16 |        |             |                 ; We abort when we get an empty string, that is, one with
 519:000 | DONE cmt | na 16 16 |        |             |                 ; a length of zero TOS. We could test for this, but it will
 520:000 | DONE cmt | na 16 16 |        |             |                 ; happen so rarely that the speed penalty is higher if we run
 521:000 | DONE cmt | na 16 16 |        |             |                 ; the test for every single call. Looking for an empty string
 522:000 | DONE cmt | na 16 16 |        |             |                 ; does force us to check the whole dictionary, though. The test
 523:000 | DONE cmt | na 16 16 |        |             |                 ; would be 3 bytes and 4 to 6 cycles longer:
 524:000 | DONE cmt | na 16 16 |        |             |                 ;       tya                     ; force flag check
 525:000 | DONE cmt | na 16 16 |        |             |                 ;       beq find-name_failure
 526:000 | DONE dir | na 16 16 |        |             |         .!a16                        
 527:000 | DONE dir | na 16 16 |        |             |         .!xy16                       
 528:000 | DONE cmt | na 16 16 |        |             |                 ; set up loop for the first time
 529:000 | DONE ins | na 16 16 | 0061d0 | 84 06       |                 sty.d 000206         ; length of mystery string in tmptos, Y now free
 530:000 | DONE ins | na 16 16 | 0061d2 | a4 02       |                 ldy.d 000202         
 531:000 | DONE ins | na 16 16 | 0061d4 | 84 16       |                 sty.d 000216         ; nt of first Dictionary word
 532:000 | DONE ins | na 16 16 | 0061d6 | b4 00       |                 ldy.dx 00            
 533:000 | DONE ins | na 16 16 | 0061d8 | 84 18       |                 sty.d 000218         ; address of mystery string, was NOS
 534:000 | DONE wsp | na 16 16 |        |             |
 535:000 | DONE lbl | na 16 16 | 0061da |             | find-name_loop                       
 536:000 | DONE cmt | na 16 16 |        |             |                 ; First quick test: Are strings the same length?
 537:000 | DONE ins | na 16 16 | 0061da | b2 16       |                 lda.di 000216        ; LSB in first header word is length
 538:000 | DONE ins | na 16 16 | 0061dc | 29 ff 00    |                 and.# 00ff           
 539:000 | DONE ins | na 16 16 | 0061df | c5 06       |                 cmp.d 000206         ; we test LSB
 540:000 | DONE cmt | na 16 16 |        |             |                 ; Most of the time, it will not be the same, so we save one
 541:000 | DONE cmt | na 16 16 |        |             |                 ; cycle pro loop if we only take the branch when they are the
 542:000 | DONE cmt | na 16 16 |        |             |                 ; same
 543:000 | DONE ins | na 16 16 | 0061e1 | f0 0c       |                 beq 0061ef           
 544:000 | DONE wsp | na 16 16 |        |             |
 545:000 | DONE lbl | na 16 16 | 0061e3 |             | find-name_next_entry                 
 546:000 | DONE cmt | na 16 16 |        |             |                 ; next header address is two bytes down
 547:000 | DONE ins | na 16 16 | 0061e3 | e6 16       |                 inc.d 000216         
 548:000 | DONE ins | na 16 16 | 0061e5 | e6 16       |                 inc.d 000216         
 549:000 | DONE ins | na 16 16 | 0061e7 | b2 16       |                 lda.di 000216        ; LDA (TMP1)
 550:000 | DONE wsp | na 16 16 |        |             |
 551:000 | DONE cmt | na 16 16 |        |             |                 ; a zero entry marks the end of the Dictionary
 552:000 | DONE ins | na 16 16 | 0061e9 | f0 3c       |                 beq 006227           
 553:000 | DONE wsp | na 16 16 |        |             |
 554:000 | DONE ins | na 16 16 | 0061eb | 85 16       |                 sta.d 000216         ; new header
 555:000 | DONE ins | na 16 16 | 0061ed | 80 eb       |                 bra 0061da           
 556:000 | DONE wsp | na 16 16 |        |             |
 557:000 | DONE lbl | na 16 16 | 0061ef |             | find-name_chars                      
 558:000 | DONE cmt | na 16 16 |        |             |                 ; Yes, same length, so we compare characters. Switch A to 8 bit
 559:000 | DONE cmt | na 16 16 |        |             |                 ; for this
 560:000 | DONE ins | na 16 16 | 0061ef | e2 20       |                 sep 20               
 560:001 | DONE ctl | na  8 16 |        |             |         .!a8
 561:000 | DONE cmt | na  8 16 |        |             |                 ; Second quick test: Check first char, which is 8 bytes into the
 562:000 | DONE cmt | na  8 16 |        |             |                 ; header
 563:000 | DONE ins | na  8 16 | 0061f1 | a0 08 00    |                 ldy.# 0008           
 564:000 | DONE ins | na  8 16 | 0061f4 | b1 16       |                 lda.diy 000216       ; LDA (TMP1),Y - first char of entry
 565:000 | DONE ins | na  8 16 | 0061f6 | d2 18       |                 cmp.di 000218        ; CMP (TMP2) - first char of mystery string
 566:000 | DONE ins | na  8 16 | 0061f8 | f0 04       |                 beq 0061fe           
 567:000 | DONE wsp | na  8 16 |        |             |
 568:000 | DONE lbl | na  8 16 | 0061fa |             | find-name_char_nomatch_8             
 569:000 | DONE cmt | na  8 16 |        |             |                 ; First char is not the same, next entry
 570:000 | DONE ins | na  8 16 | 0061fa | c2 20       |                 rep 20               
 570:001 | DONE ctl | na 16 16 |        |             |         .!a16
 571:000 | DONE ins | na 16 16 | 0061fc | 80 e5       |                 bra 0061e3           
 572:000 | DONE wsp | na 16 16 |        |             |
 573:000 | DONE lbl | na 16 16 | 0061fe |             | find-name_all_chars                  
 574:000 | DONE dir | na  8 16 |        |             |         .!a8                         
 575:000 | DONE cmt | na  8 16 |        |             |                 ; String length is the same, and the first character is the
 576:000 | DONE cmt | na  8 16 |        |             |                 ; same. If the word is only one character long, we're done
 577:000 | DONE ins | na  8 16 | 0061fe | a4 06       |                 ldy.d 000206         
 578:000 | DONE ins | na  8 16 | 006200 | c0 01 00    |                 cpy.# 0001           
 579:000 | DONE cmt | na  8 16 |        |             |   ;             dey             ; faster and shorter than CPY.# 01
 580:000 | DONE ins | na  8 16 | 006203 | f0 1c       |                 beq 006221           
 581:000 | DONE wsp | na  8 16 |        |             |
 582:000 | DONE cmt | na  8 16 |        |             |                 ; No such luck: The strings are the same length and the first
 583:000 | DONE cmt | na  8 16 |        |             |                 ; char is the same, but the word is more than one char long. So
 584:000 | DONE cmt | na  8 16 |        |             |                 ; we suck it up and compare every single character. We go from
 585:000 | DONE cmt | na  8 16 |        |             |                 ; back to front, because words like CELLS and CELL+ would take
 586:000 | DONE cmt | na  8 16 |        |             |                 ; longer otherwise. We can also shorten the loop by one because
 587:000 | DONE cmt | na  8 16 |        |             |                 ; we've already compared the first char.
 588:000 | DONE wsp | na  8 16 |        |             |
 589:000 | DONE cmt | na  8 16 |        |             |                 ; Even worse, we have to add 8 bytes to address of Dictionary
 590:000 | DONE cmt | na  8 16 |        |             |                 ; string to allow testing with one loop. We need this like
 591:000 | DONE cmt | na  8 16 |        |             |                 ; a hole in the head because we just switched A to 8 bit.
 592:000 | DONE cmt | na  8 16 |        |             |                 ; However, staying with an 8-bit A is even slower.
 593:000 | DONE ins | na  8 16 | 006205 | c2 20       |                 rep 20               
 593:001 | DONE ctl | na 16 16 |        |             |         .!a16
 594:000 | DONE ins | na 16 16 | 006207 | a5 16       |                 lda.d 000216         ; save copy of Dictionary header (nt)
 595:000 | DONE ins | na 16 16 | 006209 | 85 1a       |                 sta.d 00021a         
 596:000 | DONE wsp | na 16 16 |        |             |
 597:000 | DONE ins | na 16 16 | 00620b | a5 16       |                 lda.d 000216         ; address of Dictionary string
 598:000 | DONE ins | na 16 16 | 00620d | 18          |                 clc                  
 599:000 | DONE ins | na 16 16 | 00620e | 69 08 00    |                 adc.# 0008           
 600:000 | DONE ins | na 16 16 | 006211 | 85 16       |                 sta.d 000216         
 601:000 | DONE ins | na 16 16 | 006213 | e2 20       |                 sep 20               
 601:001 | DONE ctl | na  8 16 |        |             |         .!a8
 602:000 | DONE ins | na  8 16 | 006215 | a4 06       |                 ldy.d 000206         ; get length of strings as loop index
 603:000 | DONE ins | na  8 16 | 006217 | 88          |                 dey                  ; first index is length minus 1
 604:000 | DONE wsp | na  8 16 |        |             |
 605:000 | DONE lbl | na  8 16 | 006218 |             | @                                    
 606:000 | DONE ins | na  8 16 | 006218 | b1 18       |                 lda.diy 000218       ; LDA (TMP2),Y - last char of mystery string
 607:000 | DONE ins | na  8 16 | 00621a | d1 16       |                 cmp.diy 000216       ; CMP (TMP1),Y - last char of DP string
 608:000 | DONE ins | na  8 16 | 00621c | d0 dc       |                 bne 0061fa           
 609:000 | DONE ins | na  8 16 | 00621e | 88          |                 dey                  ; start of string (Y=0) was already tested
 610:000 | DONE ins | na  8 16 | 00621f | d0 f7       |                 bne 006218           
 611:000 | DONE wsp | na  8 16 |        |             |
 612:000 | DONE lbl | na  8 16 | 006221 |             | find-name_success                    
 613:000 | DONE cmt | na  8 16 |        |             |                 ; If we reach here, the strings are the same and we have a match
 614:000 | DONE cmt | na  8 16 |        |             |                 ; We can only get here with an 8 bit A
 615:000 | DONE ins | na  8 16 | 006221 | c2 20       |                 rep 20               
 615:001 | DONE ctl | na 16 16 |        |             |         .!a16
 616:000 | DONE ins | na 16 16 | 006223 | a4 1a       |                 ldy.d 00021a         ; get the correct DP
 617:000 | DONE ins | na 16 16 | 006225 | 80 03       |                 bra 00622a           
 618:000 | DONE wsp | na 16 16 |        |             |
 619:000 | DONE wsp | na 16 16 |        |             |
 620:000 | DONE lbl | na 16 16 | 006227 |             | find-name_failure_16                 
 621:000 | DONE cmt | na 16 16 |        |             |                 ; Word not found in Dictionary, return zero. Assumes A is 16
 622:000 | DONE cmt | na 16 16 |        |             |                 ; bit
 623:000 | DONE ins | na 16 16 | 006227 | a0 00 00    |                 ldy.# 0000           ; fall thru
 624:000 | DONE wsp | na 16 16 |        |             |
 625:000 | DONE lbl | na 16 16 | 00622a |             | find-name_done                       
 626:000 | DONE ins | na 16 16 | 00622a | e8          |                 inx                  ; drop old address (NIP)
 627:000 | DONE ins | na 16 16 | 00622b | e8          |                 inx                  
 628:000 | DONE wsp | na 16 16 |        |             |
 629:000 | DONE lbl | na 16 16 | 00622c |             | z_find-name                          
 629:001 | DONE ins | na 16 16 | 00622c | 60          |                 rts                  
 630:000 | DONE wsp | na 16 16 |        |             |
 631:000 | DONE wsp | na 16 16 |        |             |
 632:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 633:000 | DONE cmt | na 16 16 |        |             | ; HERE ( -- u ) 6 bytes / 13 cycles
 634:000 | DONE cmt | na 16 16 |        |             | ; Push Compiler Pointer address on the Data Stack
 635:000 | DONE wsp | na 16 16 |        |             |
 636:000 | DONE lbl | na 16 16 | 00622d |             | a_here                               
 637:000 | DONE dir | na 16 16 |        |             |         .!a16                        ; paranoid
 638:000 | DONE dir | na 16 16 |        |             |         .!xy16                       
 639:000 | DONE ins | na 16 16 | 00622d | ca          |                 dex                  
 640:000 | DONE ins | na 16 16 | 00622e | ca          |                 dex                  
 641:000 | DONE ins | na 16 16 | 00622f | 94 00       |                 sty.dx 00            
 642:000 | DONE wsp | na 16 16 |        |             |
 643:000 | DONE ins | na 16 16 | 006231 | a4 00       |                 ldy.d 000200         
 644:000 | DONE wsp | na 16 16 |        |             |
 645:000 | DONE lbl | na 16 16 | 006233 |             | z_here                               
 645:001 | DONE ins | na 16 16 | 006233 | 60          |                 rts                  
 646:000 | DONE wsp | na 16 16 |        |             |
 647:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 648:000 | DONE cmt | na 16 16 |        |             | ; NAME>INT ( nt -- xt ) 4 bytes / 8 cycles
 649:000 | DONE cmt | na 16 16 |        |             | ; Given the Name Token (nt) of a word, return its Execute Token (xt)
 650:000 | DONE wsp | na 16 16 |        |             |
 651:000 | DONE lbl | na 16 16 | 006234 |             | a_name>int                           
 652:000 | DONE dir | na 16 16 |        |             |         .!a16                        
 653:000 | DONE dir | na 16 16 |        |             |         .!xy16                       
 654:000 | DONE cmt | na 16 16 |        |             | 		; The xt of a word beginns four bytes down from its nt
 655:000 | DONE ins | na 16 16 | 006234 | c8          |                 iny                  
 656:000 | DONE ins | na 16 16 | 006235 | c8          |                 iny                  
 657:000 | DONE ins | na 16 16 | 006236 | c8          |                 iny                  
 658:000 | DONE ins | na 16 16 | 006237 | c8          |                 iny                  
 659:000 | DONE ins | na 16 16 | 006238 | b9 00 00    |                 lda.y 0000           
 660:000 | DONE ins | na 16 16 | 00623b | a8          |                 tay                  
 661:000 | DONE wsp | na 16 16 |        |             |
 662:000 | DONE lbl | na 16 16 | 00623c |             | z_name>int                           
 662:001 | DONE ins | na 16 16 | 00623c | 60          |                 rts                  
 663:000 | DONE wsp | na 16 16 |        |             |
 664:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 665:000 | DONE cmt | na 16 16 |        |             | ; NAME>STRING ( nt -- addr u ) 16 bytes / X cycles
 666:000 | DONE cmt | na 16 16 |        |             | ; Given a name token (nt) of a word, return its string. This is a Gforth word
 667:000 | DONE cmt | na 16 16 |        |             | ; that works with the Dictionary header entries. It is not checked if nt is
 668:000 | DONE cmt | na 16 16 |        |             | ; a valid name token.
 669:000 | DONE lbl | na 16 16 | 00623d |             | a_name>string                        
 670:000 | DONE dir | na 16 16 |        |             |         .!a16                        
 671:000 | DONE dir | na 16 16 |        |             |         .!xy16                       
 672:000 | DONE ins | na 16 16 | 00623d | ca          |                 dex                  ; move NOS down one
 673:000 | DONE ins | na 16 16 | 00623e | ca          |                 dex                  
 674:000 | DONE wsp | na 16 16 |        |             |
 675:000 | DONE cmt | na 16 16 |        |             |                 ; the name string of a word begins 8 bytes down from its nt,
 676:000 | DONE cmt | na 16 16 |        |             |                 ; which we have as TOS
 677:000 | DONE ins | na 16 16 | 00623f | 98          |                 tya                  
 678:000 | DONE ins | na 16 16 | 006240 | 18          |                 clc                  
 679:000 | DONE ins | na 16 16 | 006241 | 69 08 00    |                 adc.# 0008           
 680:000 | DONE ins | na 16 16 | 006244 | 95 00       |                 sta.dx 00            ; NOS
 681:000 | DONE wsp | na 16 16 |        |             |
 682:000 | DONE cmt | na 16 16 |        |             |                 ; the length of the name string is in the LSB of the first word
 683:000 | DONE cmt | na 16 16 |        |             |                 ; of the dictionary entry header (the name token)
 684:000 | DONE ins | na 16 16 | 006246 | b9 00 00    |                 lda.y 0000           ; LDA $0000,Y
 685:000 | DONE ins | na 16 16 | 006249 | 29 ff 00    |                 and.# 00ff           ; mask all but length byte
 686:000 | DONE ins | na 16 16 | 00624c | a8          |                 tay                  
 687:000 | DONE wsp | na 16 16 |        |             |
 688:000 | DONE lbl | na 16 16 | 00624d |             | z_name>string                        
 688:001 | DONE ins | na 16 16 | 00624d | 60          |                 rts                  
 689:000 | DONE wsp | na 16 16 |        |             |
 690:000 | DONE wsp | na 16 16 |        |             |
 691:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 692:000 | DONE cmt | na 16 16 |        |             | ; NIP ( n m -- m ) 2 bytes / 4 cycles
 693:000 | DONE cmt | na 16 16 |        |             | ; Delete entry that is NOS
 694:000 | DONE wsp | na 16 16 |        |             |
 695:000 | DONE lbl | na 16 16 | 00624e |             | a_nip                                
 696:000 | DONE dir | na 16 16 |        |             |         .!xy16                       
 697:000 | DONE ins | na 16 16 | 00624e | e8          |                 inx                  
 698:000 | DONE ins | na 16 16 | 00624f | e8          |                 inx                  
 699:000 | DONE lbl | na 16 16 | 006250 |             | z_nip                                
 699:001 | DONE ins | na 16 16 | 006250 | 60          |                 rts                  
 700:000 | DONE wsp | na 16 16 |        |             |
 701:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 702:000 | DONE cmt | na 16 16 |        |             | ; PARSE-NAME ( "name" -- addr u ) 41+ bytes / X cycles
 703:000 | DONE cmt | na 16 16 |        |             | ; Find next word in input string, skipping leading spaces. This is a special
 704:000 | DONE cmt | na 16 16 |        |             | ; form of PARSE and drops through to that word. See PARSE for more detail. We
 705:000 | DONE cmt | na 16 16 |        |             | ; use this word internally for the interpreter because it is a lot easier to use
 706:000 | DONE cmt | na 16 16 |        |             | ; http://forth-standard.org/standard/core/PARSE-NAME has a Forth implementation
 707:000 | DONE lbl | na 16 16 | 006251 |             | a_parse-name                         
 708:000 | DONE dir | na 16 16 |        |             |         .!a16                        
 709:000 | DONE dir | na 16 16 |        |             |         .!xy16                       
 710:000 | DONE cmt | na 16 16 |        |             |                 ; skip leading spaces, changing >IN, then place SPACE
 711:000 | DONE cmt | na 16 16 |        |             |                 ; character on data stack for PARSE
 712:000 | DONE ins | na 16 16 | 006251 | 5a          |                 phy                  ; save TOS for later use
 713:000 | DONE ins | na 16 16 | 006252 | a4 12       |                 ldy.d 000212         ; >IN
 714:000 | DONE ins | na 16 16 | 006254 | e2 20       |                 sep 20               
 714:001 | DONE ctl | na  8 16 |        |             |         .!a8
 715:000 | DONE lbl | na  8 16 | 006256 |             | parse-name_loop                      
 716:000 | DONE ins | na  8 16 | 006256 | c4 0e       |                 cpy.d 00020e         ; end of line?
 717:000 | DONE ins | na  8 16 | 006258 | f0 09       |                 beq 006263           
 718:000 | DONE wsp | na  8 16 |        |             |
 719:000 | DONE ins | na  8 16 | 00625a | b1 0c       |                 lda.diy 00020c       ; LDA (CIB),Y
 720:000 | DONE ins | na  8 16 | 00625c | c9 20       |                 cmp.# AscSP          
 721:000 | DONE ins | na  8 16 | 00625e | d0 17       |                 bne 006277           
 722:000 | DONE ins | na  8 16 | 006260 | c8          |                 iny                  
 723:000 | DONE ins | na  8 16 | 006261 | 80 f3       |                 bra 006256           
 724:000 | DONE wsp | na  8 16 |        |             |
 725:000 | DONE lbl | na  8 16 | 006263 |             | parse-name_empty_line                
 726:000 | DONE ins | na  8 16 | 006263 | c2 20       |                 rep 20               
 726:001 | DONE ctl | na 16 16 |        |             |         .!a16
 727:000 | DONE cmt | na 16 16 |        |             |                 ; The Gforth documentation does not say what address is returned
 728:000 | DONE cmt | na 16 16 |        |             |                 ; if a string with only spaces is returned. Experiments with
 729:000 | DONE cmt | na 16 16 |        |             |                 ; the word  : PNT ( "name" -- ) PARSE-NAME SWAP U. U. TYPE ;
 730:000 | DONE cmt | na 16 16 |        |             |                 ; show that it returns the address of the last space in the
 731:000 | DONE cmt | na 16 16 |        |             |                 ; input, which is cib+ciblen. So we do that as well.
 732:000 | DONE ins | na 16 16 | 006265 | ca          |                 dex                  
 733:000 | DONE ins | na 16 16 | 006266 | ca          |                 dex                  
 734:000 | DONE ins | na 16 16 | 006267 | ca          |                 dex                  
 735:000 | DONE ins | na 16 16 | 006268 | ca          |                 dex                  
 736:000 | DONE ins | na 16 16 | 006269 | 7a          |                 ply                  
 737:000 | DONE ins | na 16 16 | 00626a | 94 00       |                 sty.dx 00            
 738:000 | DONE wsp | na 16 16 |        |             |
 739:000 | DONE ins | na 16 16 | 00626c | a5 0c       |                 lda.d 00020c         
 740:000 | DONE ins | na 16 16 | 00626e | 18          |                 clc                  
 741:000 | DONE ins | na 16 16 | 00626f | 65 0e       |                 adc.d 00020e         
 742:000 | DONE ins | na 16 16 | 006271 | 95 00       |                 sta.dx 00            ; NOS address
 743:000 | DONE wsp | na 16 16 |        |             |
 744:000 | DONE ins | na 16 16 | 006273 | a0 00 00    |                 ldy.# 0000           ; TOS
 745:000 | DONE wsp | na 16 16 |        |             |
 746:000 | DONE ins | na 16 16 | 006276 | 60          |                 rts                  ; don't have to go through PARSE
 747:000 | DONE wsp | na 16 16 |        |             |
 748:000 | DONE lbl | na 16 16 | 006277 |             | parse-name_found                     
 749:000 | DONE dir | na 16 16 |        |             |         .!xy16                       
 750:000 | DONE ins | na 16 16 | 006277 | c2 20       |                 rep 20               
 750:001 | DONE ctl | na 16 16 |        |             |         .!a16
 751:000 | DONE ins | na 16 16 | 006279 | 84 12       |                 sty.d 000212         ; new >IN
 752:000 | DONE wsp | na 16 16 |        |             |
 753:000 | DONE ins | na 16 16 | 00627b | 7a          |                 ply                  ; recover TOS
 754:000 | DONE ins | na 16 16 | 00627c | ca          |                 dex                  
 755:000 | DONE ins | na 16 16 | 00627d | ca          |                 dex                  
 756:000 | DONE ins | na 16 16 | 00627e | 84 00       |                 sty.d 00             
 757:000 | DONE wsp | na 16 16 |        |             |
 758:000 | DONE ins | na 16 16 | 006280 | a0 20 00    |                 ldy.# AscSP          ; put space on TOS for PARSE
 759:000 | DONE wsp | na 16 16 |        |             |
 760:000 | DONE cmt | na 16 16 |        |             |                 ; fall thru to PARSE
 761:000 | DONE wsp | na 16 16 |        |             |
 762:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 763:000 | DONE cmt | na 16 16 |        |             | ; PARSE ( c "name" -- addr u ) 45 bytes / X+ cycles
 764:000 | DONE cmt | na 16 16 |        |             | ; Find word in input string delimited by character given Do not skip leading
 765:000 | DONE cmt | na 16 16 |        |             | ; delimiters, this is an important difference to PARSE-NAME. PARSE and
 766:000 | DONE cmt | na 16 16 |        |             | ; PARSE-NAME replace WORD in modern systems. See the ANSI documentation at
 767:000 | DONE cmt | na 16 16 |        |             | ; http://www.forth200x.org/documents/html3/rationale.html#rat:core:PARSE
 768:000 | DONE cmt | na 16 16 |        |             | ; PARSE-NAME drops through to here
 769:000 | DONE cmt | na 16 16 |        |             | ;
 770:000 | DONE cmt | na 16 16 |        |             | ;    cib   cib+toin    cib+ciblen
 771:000 | DONE cmt | na 16 16 |        |             | ;     v       v             v
 772:000 | DONE cmt | na 16 16 |        |             | ;     |#####################|              Length of found string:
 773:000 | DONE cmt | na 16 16 |        |             | ;                                          ciblen - toin
 774:000 | DONE cmt | na 16 16 |        |             | ;     +------>|  toin (>IN)
 775:000 | DONE cmt | na 16 16 |        |             | ;     +-------------------->|  ciblen
 776:000 | DONE cmt | na 16 16 |        |             | ;
 777:000 | DONE cmt | na 16 16 |        |             | ; The input string is stored starting at the address in the Current Input Buffer
 778:000 | DONE cmt | na 16 16 |        |             | ; (CIB), the length of which is in CIBLEN. While searching for the delimiter,
 779:000 | DONE cmt | na 16 16 |        |             | ; TOIN (>IN) points to the where we currently are. Since PARSE does not skip
 780:000 | DONE cmt | na 16 16 |        |             | ; leading delimiters, we assume we are on a useful string.
 781:000 | DONE lbl | na 16 16 | 006283 |             | a_parse                              
 782:000 | DONE ins | na 16 16 | 006283 | 84 16       |                 sty.d 000216         ; save delimiter, char is LSB
 783:000 | DONE wsp | na 16 16 |        |             |
 784:000 | DONE cmt | na 16 16 |        |             |                 ; save beginning of new word (cib+toin) to NOS. Don't need to
 785:000 | DONE cmt | na 16 16 |        |             |                 ; worry about TOS because Y gets clobbered anyway before we
 786:000 | DONE cmt | na 16 16 |        |             |                 ; return
 787:000 | DONE ins | na 16 16 | 006285 | a5 12       |                 lda.d 000212         
 788:000 | DONE ins | na 16 16 | 006287 | 85 1a       |                 sta.d 00021a         ; save >IN for later length calculation
 789:000 | DONE ins | na 16 16 | 006289 | 18          |                 clc                  
 790:000 | DONE ins | na 16 16 | 00628a | 65 0c       |                 adc.d 00020c         
 791:000 | DONE wsp | na 16 16 |        |             |
 792:000 | DONE ins | na 16 16 | 00628c | ca          |                 dex                  
 793:000 | DONE ins | na 16 16 | 00628d | ca          |                 dex                  
 794:000 | DONE ins | na 16 16 | 00628e | 95 00       |                 sta.dx 00            
 795:000 | DONE wsp | na 16 16 |        |             |
 796:000 | DONE ins | na 16 16 | 006290 | 64 18       |                 stz.d 000218         ; offset for EOL/char found adjustment of >IN
 797:000 | DONE wsp | na 16 16 |        |             |
 798:000 | DONE cmt | na 16 16 |        |             |                 ; prepare loop using Y as index
 799:000 | DONE ins | na 16 16 | 006292 | a4 12       |                 ldy.d 000212         
 800:000 | DONE ins | na 16 16 | 006294 | e2 20       |                 sep 20               
 800:001 | DONE ctl | na  8 16 |        |             |         .!a8
 801:000 | DONE wsp | na  8 16 |        |             |
 802:000 | DONE lbl | na  8 16 | 006296 |             | parse_loop                           
 803:000 | DONE ins | na  8 16 | 006296 | c4 0e       |                 cpy.d 00020e         ; check for EOL first
 804:000 | DONE ins | na  8 16 | 006298 | f0 0d       |                 beq 0062a7           
 805:000 | DONE wsp | na  8 16 |        |             |
 806:000 | DONE ins | na  8 16 | 00629a | b1 0c       |                 lda.diy 00020c       ; LDA (CIB),Y
 807:000 | DONE ins | na  8 16 | 00629c | c5 16       |                 cmp.d 000216         ; found delimiter?
 808:000 | DONE ins | na  8 16 | 00629e | f0 03       |                 beq 0062a3           
 809:000 | DONE ins | na  8 16 | 0062a0 | c8          |                 iny                  
 810:000 | DONE ins | na  8 16 | 0062a1 | 80 f3       |                 bra 006296           
 811:000 | DONE wsp | na  8 16 |        |             |
 812:000 | DONE lbl | na  8 16 | 0062a3 |             | parse_found_delimiter                
 813:000 | DONE cmt | na  8 16 |        |             |                 ; If we haven't reached the end of the line, but found
 814:000 | DONE cmt | na  8 16 |        |             |                 ; a delimiter, we want >IN to point to the next character after
 815:000 | DONE cmt | na  8 16 |        |             |                 ; the delimiter, not the delimiter itself. This is what the
 816:000 | DONE cmt | na  8 16 |        |             |                 ; offset is for
 817:000 | DONE ins | na  8 16 | 0062a3 | c2 20       |                 rep 20               
 817:001 | DONE ctl | na 16 16 |        |             |         .!a16
 818:000 | DONE ins | na 16 16 | 0062a5 | e6 18       |                 inc.d 000218         
 819:000 | DONE wsp | na 16 16 |        |             |
 820:000 | DONE lbl | na 16 16 | 0062a7 |             | parse_reached_eol                    
 821:000 | DONE cmt | na 16 16 |        |             |                 ; calculate length of string found (see ascii drawing)
 822:000 | DONE ins | na 16 16 | 0062a7 | c2 20       |                 rep 20               
 822:001 | DONE ctl | na 16 16 |        |             |         .!a16
 823:000 | DONE ins | na 16 16 | 0062a9 | 98          |                 tya                  
 824:000 | DONE ins | na 16 16 | 0062aa | 38          |                 sec                  
 825:000 | DONE ins | na 16 16 | 0062ab | e5 1a       |                 sbc.d 00021a         ; original value for >IN / index of first char
 826:000 | DONE ins | na 16 16 | 0062ad | 48          |                 pha                  ; save so we can manipulate Y
 827:000 | DONE wsp | na 16 16 |        |             |
 828:000 | DONE cmt | na 16 16 |        |             |                 ; calculate new >IN
 829:000 | DONE ins | na 16 16 | 0062ae | 98          |                 tya                  
 830:000 | DONE ins | na 16 16 | 0062af | 18          |                 clc                  
 831:000 | DONE ins | na 16 16 | 0062b0 | 65 18       |                 adc.d 000218         ; offset for EOL vs found delimiter
 832:000 | DONE ins | na 16 16 | 0062b2 | 85 12       |                 sta.d 000212         
 833:000 | DONE wsp | na 16 16 |        |             |
 834:000 | DONE ins | na 16 16 | 0062b4 | 7a          |                 ply                  ; length of string in TOS
 835:000 | DONE wsp | na 16 16 |        |             |
 836:000 | DONE lbl | na 16 16 | 0062b5 |             | z_parse-name                         
 837:000 | DONE lbl | na 16 16 | 0062b5 |             | z_parse                              
 837:001 | DONE ins | na 16 16 | 0062b5 | 60          |                 rts                  
 838:000 | DONE wsp | na 16 16 |        |             |
 839:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 840:000 | DONE cmt | na 16 16 |        |             | ; REFILL ( -- f ) X bytes / X cycles
 841:000 | DONE cmt | na 16 16 |        |             | ; "Attempt to fill the input buffer from the input source, returning a true flag
 842:000 | DONE cmt | na 16 16 |        |             | ; if successful. When the input source is the user input device, attempt to
 843:000 | DONE cmt | na 16 16 |        |             | ; receive input into the terminal input buffer. If successful, make the result
 844:000 | DONE cmt | na 16 16 |        |             | ; the input buffer, set >IN to zero, and return true. Receipt of a line
 845:000 | DONE cmt | na 16 16 |        |             | ; containing no characters is considered successful. If there is no input
 846:000 | DONE cmt | na 16 16 |        |             | ; available from the current input source, return false. When the input source
 847:000 | DONE cmt | na 16 16 |        |             | ; is a string from EVALUATE, return false and perform no other action."
 848:000 | DONE cmt | na 16 16 |        |             | ; See https://www.complang.tuwien.ac.at/forth/gforth/Docs-html/The-Input-Stream.html
 849:000 | DONE cmt | na 16 16 |        |             | ; and Conklin & Rather p. 156
 850:000 | DONE lbl | na 16 16 | 0062b6 |             | a_refill                             
 851:000 | DONE dir | na 16 16 |        |             |         .!a16                        
 852:000 | DONE dir | na 16 16 |        |             |         .!xy16                       
 853:000 | DONE cmt | na 16 16 |        |             |                 ; We handle buffer switches here so that regardless of input
 854:000 | DONE cmt | na 16 16 |        |             |                 ; source, we have access to the previous input. This is not in
 855:000 | DONE cmt | na 16 16 |        |             |                 ; the ANSI specification in any way.
 856:000 | DONE ins | na 16 16 | 0062b6 | a5 0c       |                 lda.d 00020c         
 857:000 | DONE ins | na 16 16 | 0062b8 | 49 00 01    |                 eor.# 0100           ; flip 07d00 / 07c00
 858:000 | DONE ins | na 16 16 | 0062bb | 85 0c       |                 sta.d 00020c         
 859:000 | DONE wsp | na 16 16 |        |             |
 860:000 | DONE ins | na 16 16 | 0062bd | a5 0e       |                 lda.d 00020e         ; current length is now previous length
 861:000 | DONE ins | na 16 16 | 0062bf | 85 10       |                 sta.d 000210         
 862:000 | DONE wsp | na 16 16 |        |             |
 863:000 | DONE cmt | na 16 16 |        |             |                 ; Get input source from SOURCE-ID. We don't have blocks in this
 864:000 | DONE cmt | na 16 16 |        |             |                 ; version, or else we would have to check BLK first. This is an
 865:000 | DONE cmt | na 16 16 |        |             |                 ; optimized version of a subroutine jump to SOURCE-ID
 866:000 | DONE ins | na 16 16 | 0062c1 | a5 0a       |                 lda.d 00020a         
 867:000 | DONE ins | na 16 16 | 0062c3 | d0 18       |                 bne 0062dd           
 868:000 | DONE wsp | na 16 16 |        |             |
 869:000 | DONE cmt | na 16 16 |        |             |                 ; SOURCE-ID of zero means we're getting stuff from the keyboard
 870:000 | DONE cmt | na 16 16 |        |             |                 ; with ACCEPT.
 871:000 | DONE ins | na 16 16 | 0062c5 | ca          |                 dex                  ; push Data Stack down twice
 872:000 | DONE ins | na 16 16 | 0062c6 | ca          |                 dex                  
 873:000 | DONE ins | na 16 16 | 0062c7 | ca          |                 dex                  
 874:000 | DONE ins | na 16 16 | 0062c8 | ca          |                 dex                  
 875:000 | DONE ins | na 16 16 | 0062c9 | 94 02       |                 sty.dx 02            
 876:000 | DONE wsp | na 16 16 |        |             |
 877:000 | DONE ins | na 16 16 | 0062cb | a9 ff 00    |                 lda.# 0000ff         ; 256 chars, ANSI demands at least 80 as NOS
 878:000 | DONE ins | na 16 16 | 0062ce | 95 00       |                 sta.dx 00            
 879:000 | DONE ins | na 16 16 | 0062d0 | a4 0c       |                 ldy.d 00020c         ; address of current input buffer TOS
 880:000 | DONE wsp | na 16 16 |        |             |
 881:000 | DONE ins | na 16 16 | 0062d2 | 20 fb 60    |                 jsr 0060fb           
 882:000 | DONE wsp | na 16 16 |        |             |
 883:000 | DONE dir | na 16 16 |        |             |         .!a16                        ; paranoid
 884:000 | DONE cmt | na 16 16 |        |             |                 ; Add success flag TRUE
 885:000 | DONE ins | na 16 16 | 0062d5 | ca          |                 dex                  
 886:000 | DONE ins | na 16 16 | 0062d6 | ca          |                 dex                  
 887:000 | DONE ins | na 16 16 | 0062d7 | 94 00       |                 sty.dx 00            
 888:000 | DONE ins | na 16 16 | 0062d9 | a0 ff ff    |                 ldy.# 0ffff          
 889:000 | DONE wsp | na 16 16 |        |             |
 890:000 | DONE ins | na 16 16 | 0062dc | 60          |                 rts                  
 891:000 | DONE wsp | na 16 16 |        |             |
 892:000 | DONE lbl | na 16 16 | 0062dd |             | refill_src_not_kbd                   
 893:000 | DONE cmt | na 16 16 |        |             |                 ; If SOURCE-ID doesn't return a zero, it must be a string in
 894:000 | DONE cmt | na 16 16 |        |             |                 ; memory or a file (remember, no blocks in this version)
 895:000 | DONE ins | na 16 16 | 0062dd | c9 ff ff    |                 cmp.# 0ffff          
 896:000 | DONE ins | na 16 16 | 0062e0 | d0 08       |                 bne 0062ea           
 897:000 | DONE wsp | na 16 16 |        |             |
 898:000 | DONE cmt | na 16 16 |        |             |                 ; Simply return FALSE flag as per specification
 899:000 | DONE ins | na 16 16 | 0062e2 | ca          |                 dex                  
 900:000 | DONE ins | na 16 16 | 0062e3 | ca          |                 dex                  
 901:000 | DONE ins | na 16 16 | 0062e4 | 94 00       |                 sty.dx 00            
 902:000 | DONE ins | na 16 16 | 0062e6 | a0 00 00    |                 ldy.# 0000           
 903:000 | DONE ins | na 16 16 | 0062e9 | 60          |                 rts                  
 904:000 | DONE wsp | na 16 16 |        |             |
 905:000 | DONE lbl | na 16 16 | 0062ea |             | refill_source_is_not_string          
 906:000 | DONE cmt | na 16 16 |        |             |                 ; Since we don't have blocks, this must mean that we are trying
 907:000 | DONE cmt | na 16 16 |        |             |                 ; to read from a file. However, we don't have files yet, so we
 908:000 | DONE cmt | na 16 16 |        |             |                 ; report an error and jump to ABORT.
 909:000 | DONE ins | na 16 16 | 0062ea | a9 45 67    |                 lda.# 006745         
 910:000 | DONE ins | na 16 16 | 0062ed | 4c 71 65    |                 jmp 006571           
 911:000 | DONE wsp | na 16 16 |        |             |
 912:000 | DONE lbl | na 16 16 | 0062f0 |             | z_refill                             
 912:001 | DONE ins | na 16 16 | 0062f0 | 60          |                 rts                  ; dummy for compiling
 913:000 | DONE wsp | na 16 16 |        |             |
 914:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 915:000 | DONE cmt | na 16 16 |        |             | ; SOURCE ( -- addr u ) 12 bytes / X cycles
 916:000 | DONE cmt | na 16 16 |        |             | ; Return the address and size of current input buffer. Replaces TIB and #TIB in
 917:000 | DONE cmt | na 16 16 |        |             | ; ANSI Forth
 918:000 | DONE wsp | na 16 16 |        |             |
 919:000 | DONE lbl | na 16 16 | 0062f1 |             | a_source                             
 919:001 | DONE ins | na 16 16 | 0062f1 | ca          |                 dex                  ; make room on Data Stack
 920:000 | DONE ins | na 16 16 | 0062f2 | ca          |                 dex                  
 921:000 | DONE ins | na 16 16 | 0062f3 | ca          |                 dex                  
 922:000 | DONE ins | na 16 16 | 0062f4 | ca          |                 dex                  
 923:000 | DONE ins | na 16 16 | 0062f5 | 94 02       |                 sty.dx 02            
 924:000 | DONE wsp | na 16 16 |        |             |
 925:000 | DONE ins | na 16 16 | 0062f7 | a5 0c       |                 lda.d 00020c         ; address of current input buffer as NOS
 926:000 | DONE ins | na 16 16 | 0062f9 | 95 00       |                 sta.dx 00            
 927:000 | DONE wsp | na 16 16 |        |             |
 928:000 | DONE ins | na 16 16 | 0062fb | a4 0e       |                 ldy.d 00020e         ; length of current input buffer as TOS
 929:000 | DONE wsp | na 16 16 |        |             |
 930:000 | DONE lbl | na 16 16 | 0062fd |             | z_source                             
 930:001 | DONE ins | na 16 16 | 0062fd | 60          |                 rts                  
 931:000 | DONE wsp | na 16 16 |        |             |
 932:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 933:000 | DONE cmt | na 16 16 |        |             | ; SOURCE-ID ( -- n ) 6 bytes / 13 cycles
 934:000 | DONE cmt | na 16 16 |        |             | ; Identify the input source unless it is a block (s. Conklin & Rather p. 156).
 935:000 | DONE cmt | na 16 16 |        |             | ; Since we don't have blocks (yet), this will give the input source: 0 is
 936:000 | DONE cmt | na 16 16 |        |             | ; keyboard, -1 (0ffff) is character string, and a text file gives the fileid.
 937:000 | DONE wsp | na 16 16 |        |             |
 938:000 | DONE lbl | na 16 16 | 0062fe |             | a_source-id                          
 939:000 | DONE dir | na 16 16 |        |             |         .!xy16                       
 940:000 | DONE ins | na 16 16 | 0062fe | ca          |                 dex                  
 941:000 | DONE ins | na 16 16 | 0062ff | ca          |                 dex                  
 942:000 | DONE ins | na 16 16 | 006300 | 94 00       |                 sty.dx 00            
 943:000 | DONE ins | na 16 16 | 006302 | a4 0a       |                 ldy.d 00020a         
 944:000 | DONE wsp | na 16 16 |        |             |
 945:000 | DONE lbl | na 16 16 | 006304 |             | z_source-id                          
 945:001 | DONE ins | na 16 16 | 006304 | 60          |                 rts                  
 946:000 | DONE wsp | na 16 16 |        |             |
 947:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 948:000 | DONE cmt | na 16 16 |        |             | ; SPACE ( -- ) X bytes / X cycles
 949:000 | DONE cmt | na 16 16 |        |             | ; Print one ASCII space character; change to EMIT
 950:000 | DONE wsp | na 16 16 |        |             |
 951:000 | DONE lbl | na 16 16 | 006305 |             | a_space                              
 952:000 | DONE ins | na 16 16 | 006305 | a9 20 00    |                 lda.# AscSP          
 953:000 | DONE ins | na 16 16 | 006308 | 20 30 60    |                 jsr 006030           
 954:000 | DONE wsp | na 16 16 |        |             |
 955:000 | DONE lbl | na 16 16 | 00630b |             | z_space                              
 955:001 | DONE ins | na 16 16 | 00630b | 60          |                 rts                  
 956:000 | DONE wsp | na 16 16 |        |             |
 957:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 958:000 | DONE cmt | na 16 16 |        |             | ; STATE ( -- addr ) 7 bytes / 12 cycles
 959:000 | DONE cmt | na 16 16 |        |             | ; Return the address of a cell containing the compilation-state flag. STATE
 960:000 | DONE cmt | na 16 16 |        |             | ; is true when in compilation state, false otherwise. STATE should be changed
 961:000 | DONE cmt | na 16 16 |        |             | ; directly by the user; see
 962:000 | DONE cmt | na 16 16 |        |             | ; http://forth.sourceforge.net/standard/dpans/dpans6.htm#6.1.2250
 963:000 | DONE wsp | na 16 16 |        |             |
 964:000 | DONE lbl | na 16 16 | 00630c |             | a_state                              
 965:000 | DONE dir | na 16 16 |        |             |         .!xy16                       
 966:000 | DONE ins | na 16 16 | 00630c | ca          |                 dex                  
 967:000 | DONE ins | na 16 16 | 00630d | ca          |                 dex                  
 968:000 | DONE ins | na 16 16 | 00630e | 94 00       |                 sty.dx 00            
 969:000 | DONE ins | na 16 16 | 006310 | a0 14 02    |                 ldy.# 000214         
 970:000 | DONE wsp | na 16 16 |        |             |
 971:000 | DONE lbl | na 16 16 | 006313 |             | z_state                              
 971:001 | DONE ins | na 16 16 | 006313 | 60          |                 rts                  
 972:000 | DONE wsp | na 16 16 |        |             |
 973:000 | DONE wsp | na 16 16 |        |             |
 974:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 975:000 | DONE cmt | na 16 16 |        |             | ; SWAP ( n m -- m n ) 5 bytes / 12 cycles
 976:000 | DONE cmt | na 16 16 |        |             | ; Exchange TOS with NOS, destroys Y
 977:000 | DONE wsp | na 16 16 |        |             |
 978:000 | DONE lbl | na 16 16 | 006314 |             | a_swap                               
 979:000 | DONE dir | na 16 16 |        |             |         .!a16                        
 980:000 | DONE dir | na 16 16 |        |             |         .!xy16                       
 981:000 | DONE ins | na 16 16 | 006314 | b5 00       |                 lda.dx 00            
 982:000 | DONE ins | na 16 16 | 006316 | 94 00       |                 sty.dx 00            
 983:000 | DONE ins | na 16 16 | 006318 | a8          |                 tay                  
 984:000 | DONE wsp | na 16 16 |        |             |
 985:000 | DONE lbl | na 16 16 | 006319 |             | z_swap                               
 985:001 | DONE ins | na 16 16 | 006319 | 60          |                 rts                  
 986:000 | DONE wsp | na 16 16 |        |             |
 987:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 988:000 | DONE cmt | na 16 16 |        |             | ; TRUE ( -- f ) 7 bytes / 12 cycles
 989:000 | DONE cmt | na 16 16 |        |             | ; Pushes value $FFFF for Forth true on Data Stack
 990:000 | DONE wsp | na 16 16 |        |             |
 991:000 | DONE lbl | na 16 16 | 00631a |             | a_true                               
 992:000 | DONE dir | na 16 16 |        |             |         .!a16                        
 993:000 | DONE dir | na 16 16 |        |             |         .!xy16                       
 994:000 | DONE ins | na 16 16 | 00631a | ca          |                 dex                  
 995:000 | DONE ins | na 16 16 | 00631b | ca          |                 dex                  
 996:000 | DONE ins | na 16 16 | 00631c | 94 00       |                 sty.dx 00            
 997:000 | DONE ins | na 16 16 | 00631e | a0 ff ff    |                 ldy.# 0ffff          
 998:000 | DONE wsp | na 16 16 |        |             |
 999:000 | DONE lbl | na 16 16 | 006321 |             | z_true                               
 999:001 | DONE ins | na 16 16 | 006321 | 60          |                 rts                  
1000:000 | DONE wsp | na 16 16 |        |             |
1001:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1002:000 | DONE cmt | na 16 16 |        |             | ; TUCK ( n m -- m n m ) 8 bytes / 19 cycles
1003:000 | DONE cmt | na 16 16 |        |             | ; Insert TOS below NOS
1004:000 | DONE wsp | na 16 16 |        |             |
1005:000 | DONE lbl | na 16 16 | 006322 |             | a_tuck                               
1006:000 | DONE dir | na 16 16 |        |             |         .!a16                        
1007:000 | DONE dir | na 16 16 |        |             |         .!xy16                       
1008:000 | DONE ins | na 16 16 | 006322 | ca          |                 dex                  
1009:000 | DONE ins | na 16 16 | 006323 | ca          |                 dex                  
1010:000 | DONE ins | na 16 16 | 006324 | b5 02       |                 lda.dx 2             
1011:000 | DONE ins | na 16 16 | 006326 | 95 00       |                 sta.dx 0             
1012:000 | DONE ins | na 16 16 | 006328 | 94 02       |                 sty.dx 2             
1013:000 | DONE wsp | na 16 16 |        |             |
1014:000 | DONE lbl | na 16 16 | 00632a |             | z_tuck                               
1014:001 | DONE ins | na 16 16 | 00632a | 60          |                 rts                  
1015:000 | DONE wsp | na 16 16 |        |             |
1016:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1017:000 | DONE cmt | na 16 16 |        |             | ; TYPE ( addr u -- ) 23+ bytes / X cycles
1018:000 | DONE cmt | na 16 16 |        |             | ; Print character string if u is not 0. We restrict all calls to put_chr and
1019:000 | DONE cmt | na 16 16 |        |             | ; get-chr to make porting easier.  We call put_chr here directly instead of
1020:000 | DONE cmt | na 16 16 |        |             | ; going through EMIT because EMIT will later have a PAUSE statement for
1021:000 | DONE cmt | na 16 16 |        |             | ; multitasking and we probably don't want to PAUSE after every character.
1022:000 | DONE cmt | na 16 16 |        |             | ; However, we'll make a final decision about that when multitasking is up and
1023:000 | DONE cmt | na 16 16 |        |             | ; running.
1024:000 | DONE wsp | na 16 16 |        |             |
1025:000 | DONE lbl | na 16 16 | 00632b |             | a_type                               
1026:000 | DONE dir | na 16 16 |        |             |         .!a16                        
1027:000 | DONE dir | na 16 16 |        |             |         .!xy16                       
1028:000 | DONE cmt | na 16 16 |        |             |                 ; just leave if u is zero (empty string)
1029:000 | DONE ins | na 16 16 | 00632b | 98          |                 tya                  ; force flag check of TOS
1030:000 | DONE ins | na 16 16 | 00632c | f0 17       |                 beq 006345           
1031:000 | DONE wsp | na 16 16 |        |             |
1032:000 | DONE ins | na 16 16 | 00632e | b5 00       |                 lda.dx 00            ; get address from NOS
1033:000 | DONE ins | na 16 16 | 006330 | 85 16       |                 sta.d 000216         
1034:000 | DONE ins | na 16 16 | 006332 | 84 18       |                 sty.d 000218         ; number of chars is TOS
1035:000 | DONE ins | na 16 16 | 006334 | a0 00 00    |                 ldy.# 0000           
1036:000 | DONE ins | na 16 16 | 006337 | e2 20       |                 sep 20               
1036:001 | DONE ctl | na  8 16 |        |             |         .!a8
1037:000 | DONE lbl | na  8 16 | 006339 |             | type_loop                            
1038:000 | DONE ins | na  8 16 | 006339 | b1 16       |                 lda.diy 000216       ; LDA (TMP1),Y
1039:000 | DONE ins | na  8 16 | 00633b | 20 30 60    |                 jsr 006030           
1040:000 | DONE ins | na  8 16 | 00633e | c8          |                 iny                  
1041:000 | DONE ins | na  8 16 | 00633f | c4 18       |                 cpy.d 000218         
1042:000 | DONE ins | na  8 16 | 006341 | d0 f6       |                 bne 006339           
1043:000 | DONE wsp | na  8 16 |        |             |
1044:000 | DONE ins | na  8 16 | 006343 | c2 20       |                 rep 20               
1044:001 | DONE ctl | na 16 16 |        |             |         .!a16
1045:000 | DONE lbl | na 16 16 | 006345 |             | type_done                            
1046:000 | DONE cmt | na 16 16 |        |             |                 ; clear stack
1047:000 | DONE ins | na 16 16 | 006345 | b4 02       |                 ldy.dx 02            
1048:000 | DONE ins | na 16 16 | 006347 | e8          |                 inx                  
1049:000 | DONE ins | na 16 16 | 006348 | e8          |                 inx                  
1050:000 | DONE ins | na 16 16 | 006349 | e8          |                 inx                  
1051:000 | DONE ins | na 16 16 | 00634a | e8          |                 inx                  
1052:000 | DONE wsp | na 16 16 |        |             |
1053:000 | DONE cmt | na 16 16 |        |             |                 ; TODO LATER add PAUSE here for multitasking
1054:000 | DONE wsp | na 16 16 |        |             |
1055:000 | DONE lbl | na 16 16 | 00634b |             | z_type                               
1055:001 | DONE ins | na 16 16 | 00634b | 60          |                 rts                  
1056:000 | DONE wsp | na 16 16 |        |             |
1057:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1058:000 | DONE cmt | na 16 16 |        |             | ; WORDS ( -- ) X bytes / X cycles
1059:000 | DONE cmt | na 16 16 |        |             | ; Print list of all Forth words available
1060:000 | DONE cmt | na 16 16 |        |             | ;
1061:000 | DONE lbl | na 16 16 | 00634c |             | a_words                              
1062:000 | DONE ins | na 16 16 | 00634c | a5 02       |                 lda.d 000202         ; nt first entry in Dictionary (last added)
1063:000 | DONE ins | na 16 16 | 00634e | 48          |                 pha                  
1064:000 | DONE wsp | na 16 16 |        |             |
1065:000 | DONE ins | na 16 16 | 00634f | ca          |                 dex                  
1066:000 | DONE ins | na 16 16 | 006350 | ca          |                 dex                  
1067:000 | DONE ins | na 16 16 | 006351 | 94 00       |                 sty.dx 00            
1068:000 | DONE wsp | na 16 16 |        |             |
1069:000 | DONE lbl | na 16 16 | 006353 |             | words_loop                           
1070:000 | DONE ins | na 16 16 | 006353 | a8          |                 tay                  
1071:000 | DONE wsp | na 16 16 |        |             |
1072:000 | DONE ins | na 16 16 | 006354 | 20 3d 62    |                 jsr 00623d           ; ( nt -- addr u )
1073:000 | DONE ins | na 16 16 | 006357 | 20 2b 63    |                 jsr 00632b           ; ( addr u -- )
1074:000 | DONE ins | na 16 16 | 00635a | 20 05 63    |                 jsr 006305           
1075:000 | DONE dir | na 16 16 |        |             |         .!a16                        
1076:000 | DONE dir | na 16 16 |        |             |         .!xy16                       
1077:000 | DONE ins | na 16 16 | 00635d | 68          |                 pla                  
1078:000 | DONE wsp | na 16 16 |        |             |
1079:000 | DONE cmt | na 16 16 |        |             |                 ; the next nt is two bytes below the nt of the current one in
1080:000 | DONE cmt | na 16 16 |        |             |                 ; the Dictionary header
1081:000 | DONE cmt | na 16 16 |        |             |                 ;
1082:000 | DONE ins | na 16 16 | 00635e | 1a          |                 inc.a                
1083:000 | DONE ins | na 16 16 | 00635f | 1a          |                 inc.a                
1084:000 | DONE wsp | na 16 16 |        |             |
1085:000 | DONE ins | na 16 16 | 006360 | ca          |                 dex                  
1086:000 | DONE ins | na 16 16 | 006361 | ca          |                 dex                  
1087:000 | DONE ins | na 16 16 | 006362 | 94 00       |                 sty.dx 00            
1088:000 | DONE wsp | na 16 16 |        |             |
1089:000 | DONE ins | na 16 16 | 006364 | a8          |                 tay                  
1090:000 | DONE ins | na 16 16 | 006365 | b9 00 00    |                 lda.y 0000           ; LDA $0000,Y
1091:000 | DONE ins | na 16 16 | 006368 | 48          |                 pha                  
1092:000 | DONE ins | na 16 16 | 006369 | d0 e8       |                 bne 006353           
1093:000 | DONE wsp | na 16 16 |        |             |
1094:000 | DONE ins | na 16 16 | 00636b | 68          |                 pla                  
1095:000 | DONE wsp | na 16 16 |        |             |
1096:000 | DONE wsp | na 16 16 |        |             |
1097:000 | DONE lbl | na 16 16 | 00636c |             | z_words                              
1097:001 | DONE ins | na 16 16 | 00636c | 60          |                 rts                  
1098:000 | DONE wsp | na 16 16 |        |             |
1099:000 | DONE wsp | na 16 16 |        |             |
1100:000 | DONE wsp | na 16 16 |        |             |
1101:000 | DONE cmt | na 16 16 |        |             | ; ===================================================================
1102:000 | DONE cmt | na 16 16 |        |             | ; MIDDLE INCLUDES
1103:000 | DONE wsp | na 16 16 |        |             |
1104:000 | DONE cmt | na 16 16 |        |             | ; Dictionary Headers for Liara Forth for the W65C265SXB
1104:001 | DONE cmt | na 16 16 |        |             | ; Scot W. Stevenson <scot.stevenson@gmail.com>
1104:002 | DONE cmt | na 16 16 |        |             | ; First version: 05. Dec 2016
1104:003 | DONE cmt | na 16 16 |        |             | ; This version: 04. Jan 2017
1104:004 | DONE wsp | na 16 16 |        |             |
1104:005 | DONE cmt | na 16 16 |        |             | ; Dictionary headers are kept separately from the code, which allows various
1104:006 | DONE cmt | na 16 16 |        |             | ; tricks in the code. We roughly follow the Gforth terminology: The Execution
1104:007 | DONE cmt | na 16 16 |        |             | ; Token (xt) is the address of the first byte of a word's code that can be,
1104:008 | DONE cmt | na 16 16 |        |             | ; well, executed; the Name Token (nt) is a pointer to the beginning of the
1104:009 | DONE cmt | na 16 16 |        |             | ; word's header in the Dictionary. There, the link to the next word in the
1104:010 | DONE cmt | na 16 16 |        |             | ; Dictionary is always one cell down from the current word's own nt. In the code
1104:011 | DONE cmt | na 16 16 |        |             | ; itself, we use "h_<WORD>" ("header") for the nt and "a_<WORD>" ("A" as the
1104:012 | DONE cmt | na 16 16 |        |             | ; beginning) for the xt.
1104:013 | DONE cmt | na 16 16 |        |             | ;
1104:014 | DONE cmt | na 16 16 |        |             | ; This gives us the following header structure for each header:
1104:015 | DONE wsp | na 16 16 |        |             |
1104:016 | DONE cmt | na 16 16 |        |             | ;              8 bit     8 bit
1104:017 | DONE cmt | na 16 16 |        |             | ;               LSB       MSB
1104:018 | DONE cmt | na 16 16 |        |             | ; h_word ->  +--------+--------+
1104:019 | DONE cmt | na 16 16 |        |             | ;            | Length | Status |
1104:020 | DONE cmt | na 16 16 |        |             | ;         +2 +--------+--------+
1104:021 | DONE cmt | na 16 16 |        |             | ;            | Next Header     | -> h_next (nt of next word)
1104:022 | DONE cmt | na 16 16 |        |             | ;         +4 +-----------------+
1104:023 | DONE cmt | na 16 16 |        |             | ;            | Start of Code   | -> a_word (xt of this word)
1104:024 | DONE cmt | na 16 16 |        |             | ;         +6 +-----------------+
1104:025 | DONE cmt | na 16 16 |        |             | ;            | End of Code     | -> z_word
1104:026 | DONE cmt | na 16 16 |        |             | ;         +8 +--------+--------+
1104:027 | DONE cmt | na 16 16 |        |             | ;            | Name   |        |
1104:028 | DONE cmt | na 16 16 |        |             | ;            +--------+--------+
1104:029 | DONE cmt | na 16 16 |        |             | ;            |        |        |
1104:030 | DONE cmt | na 16 16 |        |             | ;            +--------+--------+
1104:031 | DONE cmt | na 16 16 |        |             | ;            |        |  ...   | (name string does not end with a zero)
1104:032 | DONE cmt | na 16 16 |        |             | ;         +n +--------+--------+
1104:033 | DONE wsp | na 16 16 |        |             |
1104:034 | DONE cmt | na 16 16 |        |             | ; Status bytes are created by adding dictionary flags defined in
1104:035 | DONE cmt | na 16 16 |        |             | ; definitions.tasm:
1104:036 | DONE cmt | na 16 16 |        |             | ;
1104:037 | DONE cmt | na 16 16 |        |             | ;       PW - Primitive Word (natively coded)
1104:038 | DONE cmt | na 16 16 |        |             | ;       CO - Compile Only
1104:039 | DONE cmt | na 16 16 |        |             | ;       IM - Immediate Word
1104:040 | DONE cmt | na 16 16 |        |             | ;       NC - Native Compile (inline compile)
1104:041 | DONE wsp | na 16 16 |        |             |
1104:042 | DONE cmt | na 16 16 |        |             | ; The last word (top word in code) is always BYE, signaled to FIND by a 0000 in
1104:043 | DONE cmt | na 16 16 |        |             | ; the link to the Next Word field. The words are sorted with the more common
1104:044 | DONE cmt | na 16 16 |        |             | ; ones first (further down in code) and the output words later (further up)
1104:045 | DONE cmt | na 16 16 |        |             | ; because things will always be slow if there is a human involved.
1104:046 | DONE wsp | na 16 16 |        |             |
1104:047 | DONE lbl | na 16 16 | 00636d |             | h_bye                                
1104:048 | DONE dir | na 16 16 | 00636d | (1 bytes)   |         .byte 03                     ; length of word string
1104:048 | DONE dir | na 16 16 |        |             |                 03                       --  .
1104:049 | DONE dir | na 16 16 | 00636e | (1 bytes)   |         .byte { PW + NC }            ; status byte
1104:049 | DONE dir | na 16 16 |        |             |                 90                       --  .
1104:050 | DONE dir | na 16 16 | 00636f | (2 bytes)   |         .word 0000                   ; next word in dictionary, 0000 signals end
1104:050 | DONE dir | na 16 16 |        |             |                 00 00                    --  . .
1104:051 | DONE dir | na 16 16 | 006371 | (2 bytes)   |         .word 00618b                 ; start of code, the xt of this word
1104:051 | DONE dir | na 16 16 |        |             |                 8b 61                    --  . a
1104:052 | DONE dir | na 16 16 | 006373 | (2 bytes)   |         .word 00618d                 ; end of code (points to RTS)
1104:052 | DONE dir | na 16 16 |        |             |                 8d 61                    --  . a
1104:053 | DONE dir | na 16 16 | 006375 | (3 bytes)   |         .byte 62, 79, 65             ; lowercase word name
1104:053 | DONE dir | na 16 16 |        |             |                 62 79 65                 --  b y e
1104:054 | DONE wsp | na 16 16 |        |             |
1104:055 | DONE lbl | na 16 16 | 006378 |             | h_cold                               
1104:056 | DONE dir | na 16 16 | 006378 | (2 bytes)   |         .byte 4, 00                  
1104:056 | DONE dir | na 16 16 |        |             |                 04 00                    --  . .
1104:057 | DONE dir | na 16 16 | 00637a | (6 bytes)   |         .word h_bye, a_cold, 0060c5  
1104:057 | DONE dir | na 16 16 |        |             |                 6d 63 5d 60 c5 60        --  m c ] ` . `
1104:058 | DONE dir | na 16 16 | 006380 | (4 bytes)   |         .byte 63, 6f, 6c, 64         
1104:058 | DONE dir | na 16 16 |        |             |                 63 6f 6c 64              --  c o l d
1104:059 | DONE wsp | na 16 16 |        |             |
1104:060 | DONE lbl | na 16 16 | 006384 |             | h_words                              
1104:061 | DONE dir | na 16 16 | 006384 | (2 bytes)   |         .byte 5, { PW + NC }         
1104:061 | DONE dir | na 16 16 |        |             |                 05 90                    --  . .
1104:062 | DONE dir | na 16 16 | 006386 | (6 bytes)   |         .word h_cold, a_words, 00636c 
1104:062 | DONE dir | na 16 16 |        |             |                 78 63 4c 63 6c 63        --  x c L c l c
1104:063 | DONE dir | na 16 16 | 00638c | (5 bytes)   |         .byte 77, 6f, 72, 64, 73     
1104:063 | DONE dir | na 16 16 |        |             |                 77 6f 72 64 73           --  w o r d s
1104:064 | DONE wsp | na 16 16 |        |             |
1104:065 | DONE lbl | na 16 16 | 006391 |             | h_bell                               
1104:066 | DONE dir | na 16 16 | 006391 | (2 bytes)   |         .byte 4, { PW + NC }         
1104:066 | DONE dir | na 16 16 |        |             |                 04 90                    --  . .
1104:067 | DONE dir | na 16 16 | 006393 | (6 bytes)   |         .word h_words, a_bell, 006182 
1104:067 | DONE dir | na 16 16 |        |             |                 84 63 7c 61 82 61        --  . c | a . a
1104:068 | DONE dir | na 16 16 | 006399 | (4 bytes)   |         .byte 62, 65, 6c, 6c         
1104:068 | DONE dir | na 16 16 |        |             |                 62 65 6c 6c              --  b e l l
1104:069 | DONE wsp | na 16 16 |        |             |
1104:070 | DONE lbl | na 16 16 | 00639d |             | h_count                              
1104:071 | DONE dir | na 16 16 | 00639d | (2 bytes)   |         .byte 5, {NC + PW }          
1104:071 | DONE dir | na 16 16 |        |             |                 05 90                    --  . .
1104:072 | DONE dir | na 16 16 | 00639f | (6 bytes)   |         .word h_bell, a_count, 0061a8 
1104:072 | DONE dir | na 16 16 |        |             |                 91 63 9a 61 a8 61        --  . c . a . a
1104:073 | DONE dir | na 16 16 | 0063a5 | (5 bytes)   |         .byte 63, 6f, 75, 6e, 74     
1104:073 | DONE dir | na 16 16 |        |             |                 63 6f 75 6e 74           --  c o u n t
1104:074 | DONE wsp | na 16 16 |        |             |
1104:075 | DONE lbl | na 16 16 | 0063aa |             | h_abort                              
1104:076 | DONE dir | na 16 16 | 0063aa | (2 bytes)   |         .byte 5, 00                  ; TODO check flags
1104:076 | DONE dir | na 16 16 |        |             |                 05 00                    --  . .
1104:077 | DONE dir | na 16 16 | 0063ac | (6 bytes)   |         .word h_count, a_abort, 0060c5 
1104:077 | DONE dir | na 16 16 |        |             |                 9d 63 91 60 c5 60        --  . c . ` . `
1104:078 | DONE dir | na 16 16 | 0063b2 | (5 bytes)   |         .byte 61, 62, 6f, 72, 74     
1104:078 | DONE dir | na 16 16 |        |             |                 61 62 6f 72 74           --  a b o r t
1104:079 | DONE wsp | na 16 16 |        |             |
1104:080 | DONE lbl | na 16 16 | 0063b7 |             | h_parse                              
1104:081 | DONE dir | na 16 16 | 0063b7 | (2 bytes)   |         .byte 5, 00                  
1104:081 | DONE dir | na 16 16 |        |             |                 05 00                    --  . .
1104:082 | DONE dir | na 16 16 | 0063b9 | (6 bytes)   |         .word h_abort, a_parse, 0062b5 
1104:082 | DONE dir | na 16 16 |        |             |                 aa 63 83 62 b5 62        --  . c . b . b
1104:083 | DONE dir | na 16 16 | 0063bf | (5 bytes)   |         .byte 70, 61, 72, 73, 65     
1104:083 | DONE dir | na 16 16 |        |             |                 70 61 72 73 65           --  p a r s e
1104:084 | DONE wsp | na 16 16 |        |             |
1104:085 | DONE lbl | na 16 16 | 0063c4 |             | h_quit                               
1104:086 | DONE dir | na 16 16 | 0063c4 | (2 bytes)   |         .byte 4, 00                  
1104:086 | DONE dir | na 16 16 |        |             |                 04 00                    --  . .
1104:087 | DONE dir | na 16 16 | 0063c6 | (6 bytes)   |         .word h_parse, a_quit, 0060c5 
1104:087 | DONE dir | na 16 16 |        |             |                 b7 63 9b 60 c5 60        --  . c . ` . `
1104:088 | DONE dir | na 16 16 | 0063cc | (4 bytes)   |         .byte 71, 75, 69, 74         
1104:088 | DONE dir | na 16 16 |        |             |                 71 75 69 74              --  q u i t
1104:089 | DONE wsp | na 16 16 |        |             |
1104:090 | DONE lbl | na 16 16 | 0063d0 |             | h_name>int                           
1104:091 | DONE dir | na 16 16 | 0063d0 | (2 bytes)   |         .byte 8, { PW + NC }         
1104:091 | DONE dir | na 16 16 |        |             |                 08 90                    --  . .
1104:092 | DONE dir | na 16 16 | 0063d2 | (6 bytes)   |         .word h_quit, a_name>int, 00623c 
1104:092 | DONE dir | na 16 16 |        |             |                 c4 63 34 62 3c 62        --  . c 4 b < b
1104:093 | DONE dir | na 16 16 | 0063d8 | (8 bytes)   |         .byte 6e, 61, 6d, 65, 3e, 69, 6e, 74 
1104:093 | DONE dir | na 16 16 |        |             |                 6e 61 6d 65 3e 69 6e 74  --  n a m e > i n t
1104:093 | DONE dir | na 16 16 |        |             |                                          -- 
1104:094 | DONE wsp | na 16 16 |        |             |
1104:095 | DONE lbl | na 16 16 | 0063e0 |             | h_cr                                 
1104:096 | DONE dir | na 16 16 | 0063e0 | (2 bytes)   |         .byte 2, { PW + NC }         
1104:096 | DONE dir | na 16 16 |        |             |                 02 90                    --  . .
1104:097 | DONE dir | na 16 16 | 0063e2 | (6 bytes)   |         .word h_name>int, a_cr, 0061b2 
1104:097 | DONE dir | na 16 16 |        |             |                 d0 63 a9 61 b2 61        --  . c . a . a
1104:098 | DONE dir | na 16 16 | 0063e8 | (2 bytes)   |         .byte 63, 72                 
1104:098 | DONE dir | na 16 16 |        |             |                 63 72                    --  c r
1104:099 | DONE wsp | na 16 16 |        |             |
1104:100 | DONE lbl | na 16 16 | 0063ea |             | h_bl                                 
1104:101 | DONE dir | na 16 16 | 0063ea | (2 bytes)   |         .byte 2, { PW + NC }         
1104:101 | DONE dir | na 16 16 |        |             |                 02 90                    --  . .
1104:102 | DONE dir | na 16 16 | 0063ec | (6 bytes)   |         .word h_cr, a_bl, 00618a     
1104:102 | DONE dir | na 16 16 |        |             |                 e0 63 83 61 8a 61        --  . c . a . a
1104:103 | DONE dir | na 16 16 | 0063f2 | (2 bytes)   |         .byte 62, 6c                 
1104:103 | DONE dir | na 16 16 |        |             |                 62 6c                    --  b l
1104:104 | DONE wsp | na 16 16 |        |             |
1104:105 | DONE lbl | na 16 16 | 0063f4 |             | h_space                              
1104:106 | DONE dir | na 16 16 | 0063f4 | (2 bytes)   |         .byte 5, { PW + NC }         
1104:106 | DONE dir | na 16 16 |        |             |                 05 90                    --  . .
1104:107 | DONE dir | na 16 16 | 0063f6 | (6 bytes)   |         .word h_bl, a_space, 00630b  
1104:107 | DONE dir | na 16 16 |        |             |                 ea 63 05 63 0b 63        --  . c . c  c
1104:108 | DONE dir | na 16 16 | 0063fc | (5 bytes)   |         .byte 73, 70, 61, 63, 65     
1104:108 | DONE dir | na 16 16 |        |             |                 73 70 61 63 65           --  s p a c e
1104:109 | DONE wsp | na 16 16 |        |             |
1104:110 | DONE lbl | na 16 16 | 006401 |             | h_type                               
1104:111 | DONE dir | na 16 16 | 006401 | (2 bytes)   |         .byte 4, 0                   
1104:111 | DONE dir | na 16 16 |        |             |                 04 00                    --  . .
1104:112 | DONE dir | na 16 16 | 006403 | (6 bytes)   |         .word h_space, a_type, 00634b 
1104:112 | DONE dir | na 16 16 |        |             |                 f4 63 2b 63 4b 63        --  . c + c K c
1104:113 | DONE dir | na 16 16 | 006409 | (4 bytes)   |         .byte 74, 79, 70, 65         
1104:113 | DONE dir | na 16 16 |        |             |                 74 79 70 65              --  t y p e
1104:114 | DONE wsp | na 16 16 |        |             |
1104:115 | DONE lbl | na 16 16 | 00640d |             | h_name>string                        
1104:116 | DONE dir | na 16 16 | 00640d | (2 bytes)   |         .byte 0b, { PW + NC }        
1104:116 | DONE dir | na 16 16 |        |             |                 0b 90                    --   .
1104:117 | DONE dir | na 16 16 | 00640f | (6 bytes)   |         .word h_type, a_name>string, 00624d 
1104:117 | DONE dir | na 16 16 |        |             |                 01 64 3d 62 4d 62        --  . d = b M b
1104:118 | DONE dir | na 16 16 | 006415 | (11 bytes)  |         .byte 6e, 61, 6d, 65, 3e, 73, 74, 72, 69, 6e, 67 
1104:118 | DONE dir | na 16 16 |        |             |                 6e 61 6d 65 3e 73 74 72  --  n a m e > s t r
1104:118 | DONE dir | na 16 16 |        |             |                 69 6e 67                 --  i n g
1104:119 | DONE wsp | na 16 16 |        |             |
1104:120 | DONE lbl | na 16 16 | 006420 |             | h_2dup                               
1104:121 | DONE dir | na 16 16 | 006420 | (2 bytes)   |         .byte 4, { PW + NC }         
1104:121 | DONE dir | na 16 16 |        |             |                 04 90                    --  . .
1104:122 | DONE dir | na 16 16 | 006422 | (6 bytes)   |         .word h_name>string, a_2dup, 0060fa 
1104:122 | DONE dir | na 16 16 |        |             |                 0d 64 f0 60 fa 60        --   d . ` . `
1104:123 | DONE dir | na 16 16 | 006428 | (4 bytes)   |         .byte 32, 64, 75, 70         
1104:123 | DONE dir | na 16 16 |        |             |                 32 64 75 70              --  2 d u p
1104:124 | DONE wsp | na 16 16 |        |             |
1104:125 | DONE lbl | na 16 16 | 00642c |             | h_state                              
1104:126 | DONE dir | na 16 16 | 00642c | (2 bytes)   |         .byte 5, { PW + NC }         
1104:126 | DONE dir | na 16 16 |        |             |                 05 90                    --  . .
1104:127 | DONE dir | na 16 16 | 00642e | (6 bytes)   |         .word h_2dup, a_state, 006313 
1104:127 | DONE dir | na 16 16 |        |             |                 20 64 0c 63 13 63        --    d  c . c
1104:128 | DONE dir | na 16 16 | 006434 | (5 bytes)   |         .byte 73, 74, 61, 74, 65     
1104:128 | DONE dir | na 16 16 |        |             |                 73 74 61 74 65           --  s t a t e
1104:129 | DONE wsp | na 16 16 |        |             |
1104:130 | DONE lbl | na 16 16 | 006439 |             | h_to-in                              
1104:131 | DONE dir | na 16 16 | 006439 | (2 bytes)   |         .byte 3, { PW + NC }         
1104:131 | DONE dir | na 16 16 |        |             |                 03 90                    --  . .
1104:132 | DONE dir | na 16 16 | 00643b | (6 bytes)   |         .word h_state, a_to-in, 0060cd 
1104:132 | DONE dir | na 16 16 |        |             |                 2c 64 c6 60 cd 60        --  , d . ` . `
1104:133 | DONE dir | na 16 16 | 006441 | (3 bytes)   |         .byte 3e, 69, 6e             
1104:133 | DONE dir | na 16 16 |        |             |                 3e 69 6e                 --  > i n
1104:134 | DONE wsp | na 16 16 |        |             |
1104:135 | DONE lbl | na 16 16 | 006444 |             | h_source                             
1104:136 | DONE dir | na 16 16 | 006444 | (2 bytes)   |         .byte 6, { PW + NC }         
1104:136 | DONE dir | na 16 16 |        |             |                 06 90                    --  . .
1104:137 | DONE dir | na 16 16 | 006446 | (6 bytes)   |         .word h_to-in, a_source, 0062fd 
1104:137 | DONE dir | na 16 16 |        |             |                 39 64 f1 62 fd 62        --  9 d . b . b
1104:138 | DONE dir | na 16 16 | 00644c | (6 bytes)   |         .byte 73, 6f, 75, 72, 63, 65 
1104:138 | DONE dir | na 16 16 |        |             |                 73 6f 75 72 63 65        --  s o u r c e
1104:139 | DONE wsp | na 16 16 |        |             |
1104:140 | DONE lbl | na 16 16 | 006452 |             | h_plus                               
1104:141 | DONE dir | na 16 16 | 006452 | (2 bytes)   |         .byte 1, { PW + NC }         
1104:141 | DONE dir | na 16 16 |        |             |                 01 90                    --  . .
1104:142 | DONE dir | na 16 16 | 006454 | (6 bytes)   |         .word h_source, a_plus, 0060d5 
1104:142 | DONE dir | na 16 16 |        |             |                 44 64 ce 60 d5 60        --  D d . ` . `
1104:143 | DONE dir | na 16 16 | 00645a | (1 bytes)   |         .byte 2b                     
1104:143 | DONE dir | na 16 16 |        |             |                 2b                       --  +
1104:144 | DONE wsp | na 16 16 |        |             |
1104:145 | DONE lbl | na 16 16 | 00645b |             | h_one-plus                           
1104:146 | DONE dir | na 16 16 | 00645b | (2 bytes)   |         .byte 2, { PW + NC }         
1104:146 | DONE dir | na 16 16 |        |             |                 02 90                    --  . .
1104:147 | DONE dir | na 16 16 | 00645d | (6 bytes)   |         .word h_plus, a_one-plus, 0060e7 
1104:147 | DONE dir | na 16 16 |        |             |                 52 64 e6 60 e7 60        --  R d . ` . `
1104:148 | DONE dir | na 16 16 | 006463 | (2 bytes)   |         .byte 31, 2b                 
1104:148 | DONE dir | na 16 16 |        |             |                 31 2b                    --  1 +
1104:149 | DONE wsp | na 16 16 |        |             |
1104:150 | DONE lbl | na 16 16 | 006465 |             | h_false                              
1104:151 | DONE dir | na 16 16 | 006465 | (2 bytes)   |         .byte 5, { PW + NC }         
1104:151 | DONE dir | na 16 16 |        |             |                 05 90                    --  . .
1104:152 | DONE dir | na 16 16 | 006467 | (6 bytes)   |         .word h_one-plus, a_zero, 0060dd 
1104:152 | DONE dir | na 16 16 |        |             |                 5b 64 d6 60 dd 60        --  [ d . ` . `
1104:153 | DONE dir | na 16 16 | 00646d | (5 bytes)   |         .byte 66, 61, 6c, 73, 65     
1104:153 | DONE dir | na 16 16 |        |             |                 66 61 6c 73 65           --  f a l s e
1104:154 | DONE wsp | na 16 16 |        |             |
1104:155 | DONE lbl | na 16 16 | 006472 |             | h_true                               
1104:156 | DONE dir | na 16 16 | 006472 | (2 bytes)   |         .byte 4, { PW + NC }         
1104:156 | DONE dir | na 16 16 |        |             |                 04 90                    --  . .
1104:157 | DONE dir | na 16 16 | 006474 | (6 bytes)   |         .word h_false, a_true, 006321 
1104:157 | DONE dir | na 16 16 |        |             |                 65 64 1a 63 21 63        --  e d . c ! c
1104:158 | DONE dir | na 16 16 | 00647a | (4 bytes)   |         .byte 74, 72, 75, 65         
1104:158 | DONE dir | na 16 16 |        |             |                 74 72 75 65              --  t r u e
1104:159 | DONE wsp | na 16 16 |        |             |
1104:160 | DONE lbl | na 16 16 | 00647e |             | h_two                                
1104:161 | DONE dir | na 16 16 | 00647e | (2 bytes)   |         .byte 1, { PW + NC }         
1104:161 | DONE dir | na 16 16 |        |             |                 01 90                    --  . .
1104:162 | DONE dir | na 16 16 | 006480 | (6 bytes)   |         .word h_true, a_two, 0060ef  
1104:162 | DONE dir | na 16 16 |        |             |                 72 64 e8 60 ef 60        --  r d . ` . `
1104:163 | DONE dir | na 16 16 | 006486 | (1 bytes)   |         .byte 32                     
1104:163 | DONE dir | na 16 16 |        |             |                 32                       --  2
1104:164 | DONE wsp | na 16 16 |        |             |
1104:165 | DONE lbl | na 16 16 | 006487 |             | h_one                                
1104:166 | DONE dir | na 16 16 | 006487 | (2 bytes)   |         .byte 1, { PW + NC }         
1104:166 | DONE dir | na 16 16 |        |             |                 01 90                    --  . .
1104:167 | DONE dir | na 16 16 | 006489 | (6 bytes)   |         .word h_two, a_one, 0060e5   
1104:167 | DONE dir | na 16 16 |        |             |                 7e 64 de 60 e5 60        --  ~ d . ` . `
1104:168 | DONE dir | na 16 16 | 00648f | (1 bytes)   |         .byte 31                     
1104:168 | DONE dir | na 16 16 |        |             |                 31                       --  1
1104:169 | DONE wsp | na 16 16 |        |             |
1104:170 | DONE lbl | na 16 16 | 006490 |             | h_zero                               
1104:171 | DONE dir | na 16 16 | 006490 | (2 bytes)   |         .byte 1, { PW + NC }         
1104:171 | DONE dir | na 16 16 |        |             |                 01 90                    --  . .
1104:172 | DONE dir | na 16 16 | 006492 | (6 bytes)   |         .word h_one, a_zero, 0060dd  
1104:172 | DONE dir | na 16 16 |        |             |                 87 64 d6 60 dd 60        --  . d . ` . `
1104:173 | DONE dir | na 16 16 | 006498 | (1 bytes)   |         .byte 30                     
1104:173 | DONE dir | na 16 16 |        |             |                 30                       --  0
1104:174 | DONE wsp | na 16 16 |        |             |
1104:175 | DONE lbl | na 16 16 | 006499 |             | h_find-name                          
1104:176 | DONE dir | na 16 16 | 006499 | (2 bytes)   |         .byte 9, 0                   
1104:176 | DONE dir | na 16 16 |        |             |                 09 00                    --  	 .
1104:177 | DONE dir | na 16 16 | 00649b | (6 bytes)   |         .word h_zero, a_find-name, 00622c 
1104:177 | DONE dir | na 16 16 |        |             |                 90 64 d0 61 2c 62        --  . d . a , b
1104:178 | DONE dir | na 16 16 | 0064a1 | (9 bytes)   |         .byte 66, 69, 6e, 64, 2d, 6e, 61, 6d, 65 
1104:178 | DONE dir | na 16 16 |        |             |                 66 69 6e 64 2d 6e 61 6d  --  f i n d - n a m
1104:178 | DONE dir | na 16 16 |        |             |                 65                       --  e
1104:179 | DONE wsp | na 16 16 |        |             |
1104:180 | DONE lbl | na 16 16 | 0064aa |             | h_refill                             
1104:181 | DONE dir | na 16 16 | 0064aa | (2 bytes)   |         .byte 6, { PW }              ; TODO check flags
1104:181 | DONE dir | na 16 16 |        |             |                 06 80                    --  . .
1104:182 | DONE dir | na 16 16 | 0064ac | (6 bytes)   |         .word h_find-name, a_refill, 0062f0 
1104:182 | DONE dir | na 16 16 |        |             |                 99 64 b6 62 f0 62        --  . d . b . b
1104:183 | DONE dir | na 16 16 | 0064b2 | (6 bytes)   |         .byte 72, 65, 66, 69, 6c, 6c 
1104:183 | DONE dir | na 16 16 |        |             |                 72 65 66 69 6c 6c        --  r e f i l l
1104:184 | DONE wsp | na 16 16 |        |             |
1104:185 | DONE lbl | na 16 16 | 0064b8 |             | h_parse-name                         
1104:186 | DONE dir | na 16 16 | 0064b8 | (2 bytes)   |         .byte &10, 0                 
1104:186 | DONE dir | na 16 16 |        |             |                 0a 00                    --  
 .
1104:187 | DONE dir | na 16 16 | 0064ba | (6 bytes)   |         .word h_refill, a_parse-name, 0062b5 
1104:187 | DONE dir | na 16 16 |        |             |                 aa 64 51 62 b5 62        --  . d Q b . b
1104:188 | DONE dir | na 16 16 | 0064c0 | (10 bytes)  |         .byte 70, 61, 72, 73, 65, 2d, 6e, 61, 6d, 65 
1104:188 | DONE dir | na 16 16 |        |             |                 70 61 72 73 65 2d 6e 61  --  p a r s e - n a
1104:188 | DONE dir | na 16 16 |        |             |                 6d 65                    --  m e
1104:189 | DONE wsp | na 16 16 |        |             |
1104:190 | DONE lbl | na 16 16 | 0064ca |             | h_source-id                          
1104:191 | DONE dir | na 16 16 | 0064ca | (2 bytes)   |         .byte 9, { PW + NC }         
1104:191 | DONE dir | na 16 16 |        |             |                 09 90                    --  	 .
1104:192 | DONE dir | na 16 16 | 0064cc | (6 bytes)   |         .word h_parse-name, a_source-id, 006304 
1104:192 | DONE dir | na 16 16 |        |             |                 b8 64 fe 62 04 63        --  . d . b . c
1104:193 | DONE dir | na 16 16 | 0064d2 | (9 bytes)   |         .byte 73, 6f, 75, 72, 63, 65, 2d, 69, 64 
1104:193 | DONE dir | na 16 16 |        |             |                 73 6f 75 72 63 65 2d 69  --  s o u r c e - i
1104:193 | DONE dir | na 16 16 |        |             |                 64                       --  d
1104:194 | DONE wsp | na 16 16 |        |             |
1104:195 | DONE lbl | na 16 16 | 0064db |             | h_comma                              
1104:196 | DONE dir | na 16 16 | 0064db | (2 bytes)   |         .byte 1, { PW + NC }         
1104:196 | DONE dir | na 16 16 |        |             |                 01 90                    --  . .
1104:197 | DONE dir | na 16 16 | 0064dd | (6 bytes)   |         .word h_source-id, a_comma, 006199 
1104:197 | DONE dir | na 16 16 |        |             |                 ca 64 8e 61 99 61        --  . d . a . a
1104:198 | DONE dir | na 16 16 | 0064e3 | (1 bytes)   |         .byte 2c                     
1104:198 | DONE dir | na 16 16 |        |             |                 2c                       --  ,
1104:199 | DONE wsp | na 16 16 |        |             |
1104:200 | DONE lbl | na 16 16 | 0064e4 |             | h_accept                             
1104:201 | DONE dir | na 16 16 | 0064e4 | (2 bytes)   |         .byte 6, 00                  ; TODO check flags
1104:201 | DONE dir | na 16 16 |        |             |                 06 00                    --  . .
1104:202 | DONE dir | na 16 16 | 0064e6 | (6 bytes)   |         .word h_comma, a_accept, 00617b 
1104:202 | DONE dir | na 16 16 |        |             |                 db 64 fb 60 7b 61        --  . d . ` { a
1104:203 | DONE dir | na 16 16 | 0064ec | (6 bytes)   |         .byte 61, 63, 63, 65, 70, 74 
1104:203 | DONE dir | na 16 16 |        |             |                 61 63 63 65 70 74        --  a c c e p t
1104:204 | DONE wsp | na 16 16 |        |             |
1104:205 | DONE lbl | na 16 16 | 0064f2 |             | h_tuck                               
1104:206 | DONE dir | na 16 16 | 0064f2 | (2 bytes)   |         .byte 4, { PW + NC }         
1104:206 | DONE dir | na 16 16 |        |             |                 04 90                    --  . .
1104:207 | DONE dir | na 16 16 | 0064f4 | (6 bytes)   |         .word h_accept, a_tuck, 00632a 
1104:207 | DONE dir | na 16 16 |        |             |                 e4 64 22 63 2a 63        --  . d " c * c
1104:208 | DONE dir | na 16 16 | 0064fa | (4 bytes)   |         .byte 74, 75, 63, 6b         
1104:208 | DONE dir | na 16 16 |        |             |                 74 75 63 6b              --  t u c k
1104:209 | DONE wsp | na 16 16 |        |             |
1104:210 | DONE lbl | na 16 16 | 0064fe |             | h_nip                                
1104:211 | DONE dir | na 16 16 | 0064fe | (2 bytes)   |         .byte 3, { PW + NC }         
1104:211 | DONE dir | na 16 16 |        |             |                 03 90                    --  . .
1104:212 | DONE dir | na 16 16 | 006500 | (6 bytes)   |         .word h_tuck, a_nip, 006250  
1104:212 | DONE dir | na 16 16 |        |             |                 f2 64 4e 62 50 62        --  . d N b P b
1104:213 | DONE dir | na 16 16 | 006506 | (3 bytes)   |         .byte 6e, 69, 70             
1104:213 | DONE dir | na 16 16 |        |             |                 6e 69 70                 --  n i p
1104:214 | DONE wsp | na 16 16 |        |             |
1104:215 | DONE lbl | na 16 16 | 006509 |             | h_execute                            
1104:216 | DONE dir | na 16 16 | 006509 | (2 bytes)   |         .byte 7, { PW + NC }         
1104:216 | DONE dir | na 16 16 |        |             |                 07 90                    --  . .
1104:217 | DONE dir | na 16 16 | 00650b | (6 bytes)   |         .word h_nip, a_execute, 0061cf 
1104:217 | DONE dir | na 16 16 |        |             |                 fe 64 c0 61 cf 61        --  . d . a . a
1104:218 | DONE dir | na 16 16 | 006511 | (7 bytes)   |         .byte 65, 78, 65, 63, 75, 74, 65 
1104:218 | DONE dir | na 16 16 |        |             |                 65 78 65 63 75 74 65     --  e x e c u t e
1104:219 | DONE wsp | na 16 16 |        |             |
1104:220 | DONE lbl | na 16 16 | 006518 |             | h_here                               
1104:221 | DONE dir | na 16 16 | 006518 | (2 bytes)   |         .byte 4, { PW + NC }         
1104:221 | DONE dir | na 16 16 |        |             |                 04 90                    --  . .
1104:222 | DONE dir | na 16 16 | 00651a | (6 bytes)   |         .word h_execute, a_here, 006233 
1104:222 | DONE dir | na 16 16 |        |             |                 09 65 2d 62 33 62        --  	 e - b 3 b
1104:223 | DONE dir | na 16 16 | 006520 | (4 bytes)   |         .byte 68, 65, 72, 65         
1104:223 | DONE dir | na 16 16 |        |             |                 68 65 72 65              --  h e r e
1104:224 | DONE wsp | na 16 16 |        |             |
1104:225 | DONE lbl | na 16 16 | 006524 |             | h_swap                               
1104:226 | DONE dir | na 16 16 | 006524 | (2 bytes)   |         .byte 4, { PW + NC }         
1104:226 | DONE dir | na 16 16 |        |             |                 04 90                    --  . .
1104:227 | DONE dir | na 16 16 | 006526 | (6 bytes)   |         .word h_here, a_swap, 006319 
1104:227 | DONE dir | na 16 16 |        |             |                 18 65 14 63 19 63        --  . e . c . c
1104:228 | DONE dir | na 16 16 | 00652c | (4 bytes)   |         .byte 73, 77, 61, 70         
1104:228 | DONE dir | na 16 16 |        |             |                 73 77 61 70              --  s w a p
1104:229 | DONE wsp | na 16 16 |        |             |
1104:230 | DONE lbl | na 16 16 | 006530 |             | h_dup                                
1104:231 | DONE dir | na 16 16 | 006530 | (2 bytes)   |         .byte 3, { PW + NC }         
1104:231 | DONE dir | na 16 16 |        |             |                 03 90                    --  . .
1104:232 | DONE dir | na 16 16 | 006532 | (6 bytes)   |         .word h_swap, a_dup, 0061bc  
1104:232 | DONE dir | na 16 16 |        |             |                 24 65 b8 61 bc 61        --  $ e . a . a
1104:233 | DONE dir | na 16 16 | 006538 | (3 bytes)   |         .byte 64, 75, 70             
1104:233 | DONE dir | na 16 16 |        |             |                 64 75 70                 --  d u p
1104:234 | DONE wsp | na 16 16 |        |             |
1104:235 | DONE cmt | na 16 16 |        |             | ; DROP is always the first entry in dictionary
1104:236 | DONE lbl | na 16 16 | 00653b |             | h_drop                               
1104:237 | DONE dir | na 16 16 | 00653b | (2 bytes)   |         .byte 4, { PW + NC }         
1104:237 | DONE dir | na 16 16 |        |             |                 04 90                    --  . .
1104:238 | DONE dir | na 16 16 | 00653d | (6 bytes)   |         .word h_dup, a_drop, 0061b7  
1104:238 | DONE dir | na 16 16 |        |             |                 30 65 b3 61 b7 61        --  0 e . a . a
1104:239 | DONE dir | na 16 16 | 006543 | (4 bytes)   |         .byte 64, 72, 6f, 70         
1104:239 | DONE dir | na 16 16 |        |             |                 64 72 6f 70              --  d r o p
1104:240 | DONE wsp | na 16 16 |        |             |
1104:241 | DONE cmt | na 16 16 |        |             | ; END
1105:000 | DONE wsp | na 16 16 |        |             |
1106:000 | DONE cmt | na 16 16 |        |             | ; ===================================================================
1107:000 | DONE cmt | na 16 16 |        |             | ; LOW LEVEL HELPER FUNCTIONS
1108:000 | DONE wsp | na 16 16 |        |             |
1109:000 | DONE wsp | na 16 16 |        |             |
1110:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1111:000 | DONE cmt | na 16 16 |        |             | ; COMPILE OR EXECUTE
1112:000 | DONE cmt | na 16 16 |        |             | ; Core routine for interpreter called by EVALUATE and QUIT. We process one line
1113:000 | DONE cmt | na 16 16 |        |             | ; only. Assumes that address of name is in cib and length of whole input
1114:000 | DONE cmt | na 16 16 |        |             | ; string is in ciblen
1115:000 | DONE lbl | na 16 16 | 006547 |             | compex                               
1116:000 | DONE lbl | na 16 16 | 006547 |             | compex_loop                          
1117:000 | DONE cmt | na 16 16 |        |             |                 ; Normally we would use PARSE here with the SPACE character as
1118:000 | DONE cmt | na 16 16 |        |             |                 ; a parameter (PARSE replaces WORD in modern Forths). However,
1119:000 | DONE cmt | na 16 16 |        |             |                 ; Gforth's PARSE-NAME makes more sense as it uses spaces as
1120:000 | DONE cmt | na 16 16 |        |             |                 ; delimiters per default and skips any leading spaces, which
1121:000 | DONE cmt | na 16 16 |        |             |                 ; PARSE does not do.
1122:000 | DONE ins | na 16 16 | 006547 | 20 51 62    |                 jsr 006251           ; ( addr u )
1123:000 | DONE dir | na 16 16 |        |             |         .!a16                        
1124:000 | DONE cmt | na 16 16 |        |             |                 ; if PARSE-NAME returns 0 (empty line), no characters were left
1125:000 | DONE cmt | na 16 16 |        |             |                 ; in the line and we need to go get a new line
1126:000 | DONE ins | na 16 16 | 00654a | 98          |                 tya                  ; force flag check
1127:000 | DONE ins | na 16 16 | 00654b | f0 1d       |                 beq 00656a           
1128:000 | DONE wsp | na 16 16 |        |             |
1129:000 | DONE cmt | na 16 16 |        |             |                 ; We let the user input words in any case, but use lower case
1130:000 | DONE cmt | na 16 16 |        |             |                 ; internally (sorry, Garth).
1131:000 | DONE ins | na 16 16 | 00654d | 20 aa 65    |                 jsr 0065aa           ; returns ( addr u )
1132:000 | DONE wsp | na 16 16 |        |             |
1133:000 | DONE cmt | na 16 16 |        |             |                 ; If we got something that is not a zero, we go to FIND-NAME to
1134:000 | DONE cmt | na 16 16 |        |             |                 ; get the nt. Returns ( nt | 0 )
1135:000 | DONE ins | na 16 16 | 006550 | 20 d0 61    |                 jsr 0061d0           
1136:000 | DONE dir | na 16 16 |        |             |         .!a16                        
1137:000 | DONE cmt | na 16 16 |        |             |                 ; a zero signals that we didn't find a word in the Dictionary
1138:000 | DONE ins | na 16 16 | 006553 | 98          |                 tya                  ; force flag check of TOS
1139:000 | DONE ins | na 16 16 | 006554 | d0 06       |                 bne 00655c           
1140:000 | DONE wsp | na 16 16 |        |             |
1141:000 | DONE cmt | na 16 16 |        |             |                 ; TODO No name token, try NUMBER CONVERSION
1142:000 | DONE wsp | na 16 16 |        |             |
1143:000 | DONE cmt | na 16 16 |        |             |                 ; Woe is us, all has failed
1144:000 | DONE ins | na 16 16 | 006556 | a9 7e 67    |                 lda.# 00677e         ; "Unknown word"
1145:000 | DONE ins | na 16 16 | 006559 | 4c 71 65    |                 jmp 006571           
1146:000 | DONE wsp | na 16 16 |        |             |
1147:000 | DONE lbl | na 16 16 | 00655c |             | compex_got_name_token                
1148:000 | DONE cmt | na 16 16 |        |             |                 ; TODO see if INTERPRETED OR COMPILED
1149:000 | DONE wsp | na 16 16 |        |             |
1150:000 | DONE cmt | na 16 16 |        |             |                 ; INTERPRET WORD
1151:000 | DONE cmt | na 16 16 |        |             |                 ; We arrive here with the nt as TOS (in Y). The xt of a word is
1152:000 | DONE cmt | na 16 16 |        |             |                 ; four bytes farther on, so this is a quick version of NAME>INT
1153:000 | DONE wsp | na 16 16 |        |             |
1154:000 | DONE dir | na 16 16 |        |             |         .!xy16                       
1155:000 | DONE ins | na 16 16 | 00655c | c8          |                 iny                  
1156:000 | DONE ins | na 16 16 | 00655d | c8          |                 iny                  
1157:000 | DONE ins | na 16 16 | 00655e | c8          |                 iny                  
1158:000 | DONE ins | na 16 16 | 00655f | c8          |                 iny                  
1159:000 | DONE ins | na 16 16 | 006560 | b9 00 00    |                 lda.y 0000           
1160:000 | DONE ins | na 16 16 | 006563 | a8          |                 tay                  
1161:000 | DONE wsp | na 16 16 |        |             |
1162:000 | DONE ins | na 16 16 | 006564 | 20 c0 61    |                 jsr 0061c0           
1163:000 | DONE wsp | na 16 16 |        |             |
1164:000 | DONE cmt | na 16 16 |        |             |                 ; that's quite enough for this word, let's get the next one
1165:000 | DONE ins | na 16 16 | 006567 | 4c 47 65    |                 jmp 006547           
1166:000 | DONE wsp | na 16 16 |        |             |
1167:000 | DONE lbl | na 16 16 | 00656a |             | compex_line_done                     
1168:000 | DONE cmt | na 16 16 |        |             |                 ; drop stuff from PARSE_NAME
1169:000 | DONE ins | na 16 16 | 00656a | b4 02       |                 ldy.dx 02            
1170:000 | DONE ins | na 16 16 | 00656c | e8          |                 inx                  
1171:000 | DONE ins | na 16 16 | 00656d | e8          |                 inx                  
1172:000 | DONE ins | na 16 16 | 00656e | e8          |                 inx                  
1173:000 | DONE ins | na 16 16 | 00656f | e8          |                 inx                  
1174:000 | DONE wsp | na 16 16 |        |             |
1175:000 | DONE ins | na 16 16 | 006570 | 60          |                 rts                  
1176:000 | DONE wsp | na 16 16 |        |             |
1177:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1178:000 | DONE cmt | na 16 16 |        |             | ; Fatal error encountered: Take address of error string from A, print it and
1179:000 | DONE cmt | na 16 16 |        |             | ; then call abort
1180:000 | DONE lbl | na 16 16 | 006571 |             | error                                
1181:000 | DONE ins | na 16 16 | 006571 | 20 77 65    |                 jsr 006577           
1182:000 | DONE ins | na 16 16 | 006574 | 4c 91 60    |                 jmp 006091           
1183:000 | DONE wsp | na 16 16 |        |             |
1184:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1185:000 | DONE cmt | na 16 16 |        |             | ; Print a zero terminated string to the console, adding a CR character. Takes
1186:000 | DONE cmt | na 16 16 |        |             | ; the address of the string in 16-bit A register, calls put_chr.  A is
1187:000 | DONE cmt | na 16 16 |        |             | ; destroyed. We could probably figure out some way to use TYPE instead, but zero
1188:000 | DONE cmt | na 16 16 |        |             | ; terminated strings are easier for the 65816 to use.
1189:000 | DONE cmt | na 16 16 |        |             | ; TODO add version without final line feed
1190:000 | DONE wsp | na 16 16 |        |             |
1191:000 | DONE lbl | na 16 16 | 006577 |             | print_string                         
1192:000 | DONE cmt | na 16 16 |        |             |                 ; don't use tmpdsp for X because we don't know if the user has
1193:000 | DONE cmt | na 16 16 |        |             |                 ; used it for something already
1194:000 | DONE ins | na 16 16 | 006577 | da          |                 phx                  
1195:000 | DONE ins | na 16 16 | 006578 | aa          |                 tax                  ; x16 contains address of string
1196:000 | DONE lbl | na 16 16 | 006579 |             | @                                    
1197:000 | DONE ins | na 16 16 | 006579 | e2 20       |                 sep 20               
1197:001 | DONE ctl | na  8 16 |        |             |         .!a8
1198:000 | DONE ins | na  8 16 | 00657b | bd 00 00    |                 lda.x 0000           ; LDA $0000,X
1199:000 | DONE ins | na  8 16 | 00657e | f0 06       |                 beq 006586           
1200:000 | DONE ins | na  8 16 | 006580 | 20 30 60    |                 jsr 006030           
1201:000 | DONE ins | na  8 16 | 006583 | e8          |                 inx                  
1202:000 | DONE ins | na  8 16 | 006584 | 80 f3       |                 bra 006579           
1203:000 | DONE wsp | na  8 16 |        |             |
1204:000 | DONE lbl | na  8 16 | 006586 |             | print_string_done                    
1205:000 | DONE ins | na  8 16 | 006586 | a9 0a       |                 lda.# AscLF          ; should be CR on some systems
1206:000 | DONE ins | na  8 16 | 006588 | 20 30 60    |                 jsr 006030           
1207:000 | DONE ins | na  8 16 | 00658b | c2 20       |                 rep 20               
1207:001 | DONE ctl | na 16 16 |        |             |         .!a16
1208:000 | DONE ins | na 16 16 | 00658d | fa          |                 plx                  
1209:000 | DONE ins | na 16 16 | 00658e | 60          |                 rts                  
1210:000 | DONE wsp | na 16 16 |        |             |
1211:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1212:000 | DONE cmt | na 16 16 |        |             | ; CONVERT BYTE TO ASCII
1213:000 | DONE cmt | na 16 16 |        |             | ; Convert byte in A to two ASCII hex digits and print them. Calls
1214:000 | DONE cmt | na 16 16 |        |             | ; nibble_to_ascii. Assumes A is 8 bit.
1215:000 | DONE lbl | na 16 16 | 00658f |             | byte_to_ascii                        
1216:000 | DONE dir | na  8 16 |        |             |         .!a8                         
1217:000 | DONE ins | na  8 16 | 00658f | 48          |                 pha                  
1218:000 | DONE cmt | na  8 16 |        |             |                 ; convert high nibble first
1219:000 | DONE ins | na  8 16 | 006590 | 4a          |                 lsr.a                
1220:000 | DONE ins | na  8 16 | 006591 | 4a          |                 lsr.a                
1221:000 | DONE ins | na  8 16 | 006592 | 4a          |                 lsr.a                
1222:000 | DONE ins | na  8 16 | 006593 | 4a          |                 lsr.a                
1223:000 | DONE ins | na  8 16 | 006594 | 20 9c 65    |                 jsr 00659c           
1224:000 | DONE wsp | na  8 16 |        |             |
1225:000 | DONE ins | na  8 16 | 006597 | 68          |                 pla                  
1226:000 | DONE ins | na  8 16 | 006598 | 20 9c 65    |                 jsr 00659c           
1227:000 | DONE wsp | na  8 16 |        |             |
1228:000 | DONE ins | na  8 16 | 00659b | 60          |                 rts                  
1229:000 | DONE wsp | na  8 16 |        |             |
1230:000 | DONE wsp | na  8 16 |        |             |
1231:000 | DONE cmt | na  8 16 |        |             | ; -------------------------------------------------------------------
1232:000 | DONE cmt | na  8 16 |        |             | ; CONVERT NIBBLE TO ASCII
1233:000 | DONE cmt | na  8 16 |        |             | ; Converts the lower nibble of a number in A and returns the ASCII character
1234:000 | DONE cmt | na  8 16 |        |             | ; number, then prints it. Assumes A is 8 bit
1235:000 | DONE lbl | na  8 16 | 00659c |             | nibble_to_ascii                      
1236:000 | DONE dir | na  8 16 |        |             |         .!a8                         
1237:000 | DONE ins | na  8 16 | 00659c | 29 0f       |                 and.# 0f             
1238:000 | DONE ins | na  8 16 | 00659e | 09 30       |                 ora.# 30             
1239:000 | DONE ins | na  8 16 | 0065a0 | c9 3a       |                 cmp.# 3a             ; '9' + 1
1240:000 | DONE ins | na  8 16 | 0065a2 | 90 02       |                 bcc 0065a6           
1241:000 | DONE ins | na  8 16 | 0065a4 | 69 06       |                 adc.# 06             
1242:000 | DONE lbl | na  8 16 | 0065a6 |             | @                                    
1243:000 | DONE ins | na  8 16 | 0065a6 | 20 30 60    |                 jsr 006030           
1244:000 | DONE wsp | na  8 16 |        |             |
1245:000 | DONE ins | na  8 16 | 0065a9 | 60          |                 rts                  
1246:000 | DONE wsp | na  8 16 |        |             |
1247:000 | DONE cmt | na  8 16 |        |             | ; -------------------------------------------------------------------
1248:000 | DONE cmt | na  8 16 |        |             | ; Convert a string given by ( addr u ) to upper case in place. Since we have to
1249:000 | DONE cmt | na  8 16 |        |             | ; treat the input buffer as read-only by ANS rules, we have to put the converted
1250:000 | DONE cmt | na  8 16 |        |             | ; string somewhere and then return the new address and length
1251:000 | DONE lbl | na  8 16 | 0065aa |             | string_to_uppercase                  
1252:000 | DONE cmt | na  8 16 |        |             |                 ; TODO CODE THIS
1253:000 | DONE ins | na  8 16 | 0065aa | 60          |                 rts                  
1254:000 | DONE wsp | na  8 16 |        |             |
1255:000 | DONE cmt | na  8 16 |        |             | ; ===================================================================
1256:000 | DONE cmt | na  8 16 |        |             | ; BOTTOM INCLUDES
1257:000 | DONE wsp | na  8 16 |        |             |
1258:000 | DONE cmt | na  8 16 |        |             | ; List of Strings for Liara Forth for the W65C265SXB
1258:001 | DONE cmt | na  8 16 |        |             | ; Scot W. Stevenson <scot.stevenson@gmail.com>
1258:002 | DONE cmt | na  8 16 |        |             | ; First version: 01. Apr 2016
1258:003 | DONE cmt | na  8 16 |        |             | ; This version:  29. Jan 2017
1258:004 | DONE wsp | na  8 16 |        |             |
1258:005 | DONE cmt | na  8 16 |        |             | ; This file is included by liaraforth.tasm
1258:006 | DONE wsp | na  8 16 |        |             |
1258:007 | DONE cmt | na  8 16 |        |             | ; ===================================================================
1258:008 | DONE cmt | na  8 16 |        |             | ; GENERAL
1258:009 | DONE wsp | na  8 16 |        |             |
1258:010 | DONE cmt | na  8 16 |        |             | ; All general strings must be zero-terminated, names start with "s_"
1258:011 | DONE cmt | na  8 16 |        |             | ; TODO see if "ok" needs trailing space. The printstring routine adds the EOL
1258:012 | DONE cmt | na  8 16 |        |             | ; character
1258:013 | DONE wsp | na  8 16 |        |             |
1258:014 | DONE lbl | na  8 16 | 0065ab |             | s_title                              
1258:015 | DONE dir | na  8 16 | 0065ab | (32 bytes)  |         .byte AscLF, 4c, 69, 61, 72, 61, 20, 46, 6f, 72, 74, 68,  (...) 
1258:015 | DONE dir | na  8 16 |        |             |                 0a 4c 69 61 72 61 20 46  --  
 L i a r a   F
1258:015 | DONE dir | na  8 16 |        |             |                 6f 72 74 68 20 66 6f 72  --  o r t h   f o r
1258:015 | DONE dir | na  8 16 |        |             |                 20 74 68 65 20 57 36 35  --    t h e   W 6 5
1258:015 | DONE dir | na  8 16 |        |             |                 43 32 36 35 53 58 42 00  --  C 2 6 5 S X B .
1258:015 | DONE dir | na  8 16 |        |             |                                          -- 
1258:016 | DONE lbl | na  8 16 | 0065cb |             | s_version                            
1258:017 | DONE dir | na  8 16 | 0065cb | (31 bytes)  |         .byte 56, 65, 72, 73, 69, 6f, 6e, 20, 50, 52, 45, 2d, 41, (...) 
1258:017 | DONE dir | na  8 16 |        |             |                 56 65 72 73 69 6f 6e 20  --  V e r s i o n  
1258:017 | DONE dir | na  8 16 |        |             |                 50 52 45 2d 41 4c 50 48  --  P R E - A L P H
1258:017 | DONE dir | na  8 16 |        |             |                 41 20 32 39 2e 20 4a 61  --  A   2 9 .   J a
1258:017 | DONE dir | na  8 16 |        |             |                 6e 20 32 30 31 37 00     --  n   2 0 1 7 .
1258:018 | DONE lbl | na  8 16 | 0065ea |             | s_author                             
1258:019 | DONE dir | na  8 16 | 0065ea | (45 bytes)  |         .byte 53, 63, 6f, 74, 20, 57, 2e, 20, 53, 74, 65, 76, 65, (...) 
1258:019 | DONE dir | na  8 16 |        |             |                 53 63 6f 74 20 57 2e 20  --  S c o t   W .  
1258:019 | DONE dir | na  8 16 |        |             |                 53 74 65 76 65 6e 73 6f  --  S t e v e n s o
1258:019 | DONE dir | na  8 16 |        |             |                 6e 20 3c 73 63 6f 74 2e  --  n   < s c o t .
1258:019 | DONE dir | na  8 16 |        |             |                 73 74 65 76 65 6e 73 6f  --  s t e v e n s o
1258:019 | DONE dir | na  8 16 |        |             |                 6e 40 67 6d 61 69 6c 2e  --  n @ g m a i l .
1258:019 | DONE dir | na  8 16 |        |             |                 63 6f 6d 3e 00           --  c o m > .
1258:020 | DONE lbl | na  8 16 | 006617 |             | s_disclaimer                         
1258:021 | DONE dir | na  8 16 | 006617 | (46 bytes)  |         .byte 4c, 69, 61, 72, 61, 20, 46, 6f, 72, 74, 68, 20, 63, (...) 
1258:021 | DONE dir | na  8 16 |        |             |                 4c 69 61 72 61 20 46 6f  --  L i a r a   F o
1258:021 | DONE dir | na  8 16 |        |             |                 72 74 68 20 63 6f 6d 65  --  r t h   c o m e
1258:021 | DONE dir | na  8 16 |        |             |                 73 20 77 69 74 68 20 61  --  s   w i t h   a
1258:021 | DONE dir | na  8 16 |        |             |                 62 73 6f 6c 75 74 65 6c  --  b s o l u t e l
1258:021 | DONE dir | na  8 16 |        |             |                 79 20 4e 4f 20 57 41 52  --  y   N O   W A R
1258:021 | DONE dir | na  8 16 |        |             |                 52 41 4e 54 59 00        --  R A N T Y .
1258:022 | DONE lbl | na  8 16 | 006645 |             | s_typebye                            
1258:023 | DONE dir | na  8 16 | 006645 | (19 bytes)  |         .byte 54, 79, 70, 65, 20, 27, 62, 79, 65, 27, 20, 74, 6f, (...) 
1258:023 | DONE dir | na  8 16 |        |             |                 54 79 70 65 20 27 62 79  --  T y p e   ' b y
1258:023 | DONE dir | na  8 16 |        |             |                 65 27 20 74 6f 20 65 78  --  e '   t o   e x
1258:023 | DONE dir | na  8 16 |        |             |                 69 74 00                 --  i t .
1258:024 | DONE lbl | na  8 16 | 006658 |             | s_ok                                 
1258:025 | DONE dir | na  8 16 | 006658 | (4 bytes)   |         .byte 20, 6f, 6b, 0          ; note empty space at beginning
1258:025 | DONE dir | na  8 16 |        |             |                 20 6f 6b 00              --    o k .
1258:026 | DONE wsp | na  8 16 |        |             |
1258:027 | DONE wsp | na  8 16 |        |             |
1258:028 | DONE cmt | na  8 16 |        |             | ; ===================================================================
1258:029 | DONE cmt | na  8 16 |        |             | ; ERROR STRINGS
1258:030 | DONE wsp | na  8 16 |        |             |
1258:031 | DONE cmt | na  8 16 |        |             | ; All error strings must be zero-terminated, names start with "es_"
1258:032 | DONE cmt | na  8 16 |        |             | ; These are currently the same error strings as in Tali Forth
1258:033 | DONE wsp | na  8 16 |        |             |
1258:034 | DONE lbl | na  8 16 | 00665c |             | es_channel                           
1258:035 | DONE dir | na  8 16 | 00665c | (26 bytes)  |         .byte 41, 63, 63, 65, 73, 73, 69, 6e, 67, 20, 75, 6e, 6b, (...) 
1258:035 | DONE dir | na  8 16 |        |             |                 41 63 63 65 73 73 69 6e  --  A c c e s s i n
1258:035 | DONE dir | na  8 16 |        |             |                 67 20 75 6e 6b 6e 6f 77  --  g   u n k n o w
1258:035 | DONE dir | na  8 16 |        |             |                 6e 20 63 68 61 6e 6e 65  --  n   c h a n n e
1258:035 | DONE dir | na  8 16 |        |             |                 6c 00                    --  l .
1258:036 | DONE lbl | na  8 16 | 006676 |             | es_componly                          
1258:037 | DONE dir | na  8 16 | 006676 | (33 bytes)  |         .byte 49, 6e, 74, 65, 72, 70, 72, 65, 74, 69, 6e, 67, 20, (...) 
1258:037 | DONE dir | na  8 16 |        |             |                 49 6e 74 65 72 70 72 65  --  I n t e r p r e
1258:037 | DONE dir | na  8 16 |        |             |                 74 69 6e 67 20 61 20 63  --  t i n g   a   c
1258:037 | DONE dir | na  8 16 |        |             |                 6f 6d 70 69 6c 65 2d 6f  --  o m p i l e - o
1258:037 | DONE dir | na  8 16 |        |             |                 6e 6c 79 20 77 6f 72 64  --  n l y   w o r d
1258:037 | DONE dir | na  8 16 |        |             |                 00                       --  .
1258:038 | DONE lbl | na  8 16 | 006697 |             | es_defer                             
1258:039 | DONE dir | na  8 16 | 006697 | (29 bytes)  |         .byte 44, 45, 46, 45, 52, 65, 64, 20, 77, 6f, 72, 64, 20, (...) 
1258:039 | DONE dir | na  8 16 |        |             |                 44 45 46 45 52 65 64 20  --  D E F E R e d  
1258:039 | DONE dir | na  8 16 |        |             |                 77 6f 72 64 20 6e 6f 74  --  w o r d   n o t
1258:039 | DONE dir | na  8 16 |        |             |                 20 64 65 66 69 6e 65 64  --    d e f i n e d
1258:039 | DONE dir | na  8 16 |        |             |                 20 79 65 74 00           --    y e t .
1258:040 | DONE lbl | na  8 16 | 0066b4 |             | es_divzero                           
1258:041 | DONE dir | na  8 16 | 0066b4 | (17 bytes)  |         .byte 44, 69, 76, 69, 73, 69, 6f, 6e, 20, 62, 79, 20, 7a, (...) 
1258:041 | DONE dir | na  8 16 |        |             |                 44 69 76 69 73 69 6f 6e  --  D i v i s i o n
1258:041 | DONE dir | na  8 16 |        |             |                 20 62 79 20 7a 65 72 6f  --    b y   z e r o
1258:041 | DONE dir | na  8 16 |        |             |                 00                       --  .
1258:042 | DONE lbl | na  8 16 | 0066c5 |             | es_empty                             
1258:043 | DONE dir | na  8 16 | 0066c5 | (9 bytes)   |         .byte 20, 28, 65, 6d, 70, 74, 79, 29, 0 
1258:043 | DONE dir | na  8 16 |        |             |                 20 28 65 6d 70 74 79 29  --    ( e m p t y )
1258:043 | DONE dir | na  8 16 |        |             |                 00                       --  .
1258:044 | DONE lbl | na  8 16 | 0066ce |             | es_error                             
1258:045 | DONE dir | na  8 16 | 0066ce | (12 bytes)  |         .byte 3e, 3e, 3e, 45, 72, 72, 6f, 72, 3c, 3c, 3c, 0 
1258:045 | DONE dir | na  8 16 |        |             |                 3e 3e 3e 45 72 72 6f 72  --  > > > E r r o r
1258:045 | DONE dir | na  8 16 |        |             |                 3c 3c 3c 00              --  < < < .
1258:046 | DONE lbl | na  8 16 | 0066da |             | es_intonly                           
1258:047 | DONE dir | na  8 16 | 0066da | (22 bytes)  |         .byte 4e, 6f, 74, 20, 69, 6e, 20, 69, 6e, 74, 65, 72, 70, (...) 
1258:047 | DONE dir | na  8 16 |        |             |                 4e 6f 74 20 69 6e 20 69  --  N o t   i n   i
1258:047 | DONE dir | na  8 16 |        |             |                 6e 74 65 72 70 72 65 74  --  n t e r p r e t
1258:047 | DONE dir | na  8 16 |        |             |                 20 6d 6f 64 65 00        --    m o d e .
1258:048 | DONE lbl | na  8 16 | 0066f0 |             | es_noname                            
1258:049 | DONE dir | na  8 16 | 0066f0 | (16 bytes)  |         .byte 50, 61, 72, 73, 69, 6e, 67, 20, 66, 61, 69, 6c, 75, (...) 
1258:049 | DONE dir | na  8 16 |        |             |                 50 61 72 73 69 6e 67 20  --  P a r s i n g  
1258:049 | DONE dir | na  8 16 |        |             |                 66 61 69 6c 75 72 65 00  --  f a i l u r e .
1258:049 | DONE dir | na  8 16 |        |             |                                          -- 
1258:050 | DONE lbl | na  8 16 | 006700 |             | es_radix                             
1258:051 | DONE dir | na  8 16 | 006700 | (23 bytes)  |         .byte 44, 69, 67, 69, 74, 20, 6c, 61, 72, 67, 65, 72, 20, (...) 
1258:051 | DONE dir | na  8 16 |        |             |                 44 69 67 69 74 20 6c 61  --  D i g i t   l a
1258:051 | DONE dir | na  8 16 |        |             |                 72 67 65 72 20 74 68 61  --  r g e r   t h a
1258:051 | DONE dir | na  8 16 |        |             |                 6e 20 62 61 73 65 00     --  n   b a s e .
1258:052 | DONE lbl | na  8 16 | 006717 |             | es_refill1                           
1258:053 | DONE dir | na  8 16 | 006717 | (46 bytes)  |         .byte 51, 55, 49, 54, 20, 63, 6f, 75, 6c, 64, 20, 6e, 6f, (...) 
1258:053 | DONE dir | na  8 16 |        |             |                 51 55 49 54 20 63 6f 75  --  Q U I T   c o u
1258:053 | DONE dir | na  8 16 |        |             |                 6c 64 20 6e 6f 74 20 67  --  l d   n o t   g
1258:053 | DONE dir | na  8 16 |        |             |                 65 74 20 69 6e 70 75 74  --  e t   i n p u t
1258:053 | DONE dir | na  8 16 |        |             |                 20 28 52 45 46 49 4c 4c  --    ( R E F I L L
1258:053 | DONE dir | na  8 16 |        |             |                 20 72 65 74 75 72 6e 65  --    r e t u r n e
1258:053 | DONE dir | na  8 16 |        |             |                 64 20 2d 31 29 00        --  d   - 1 ) .
1258:054 | DONE lbl | na  8 16 | 006745 |             | es_refill2                           
1258:055 | DONE dir | na  8 16 | 006745 | (32 bytes)  |         .byte 49, 6c, 6c, 65, 67, 61, 6c, 20, 53, 4f, 55, 52, 43, (...) 
1258:055 | DONE dir | na  8 16 |        |             |                 49 6c 6c 65 67 61 6c 20  --  I l l e g a l  
1258:055 | DONE dir | na  8 16 |        |             |                 53 4f 55 52 43 45 2d 49  --  S O U R C E - I
1258:055 | DONE dir | na  8 16 |        |             |                 44 20 64 75 72 69 6e 67  --  D   d u r i n g
1258:055 | DONE dir | na  8 16 |        |             |                 20 52 45 46 49 4c 4c 00  --    R E F I L L .
1258:055 | DONE dir | na  8 16 |        |             |                                          -- 
1258:056 | DONE lbl | na  8 16 | 006765 |             | es_stack                             
1258:057 | DONE dir | na  8 16 | 006765 | (25 bytes)  |         .byte 53, 74, 61, 63, 6b, 20, 6f, 76, 65, 72, 2d, 20, 6f, (...) 
1258:057 | DONE dir | na  8 16 |        |             |                 53 74 61 63 6b 20 6f 76  --  S t a c k   o v
1258:057 | DONE dir | na  8 16 |        |             |                 65 72 2d 20 6f 72 20 75  --  e r -   o r   u
1258:057 | DONE dir | na  8 16 |        |             |                 6e 64 65 72 66 6c 6f 77  --  n d e r f l o w
1258:057 | DONE dir | na  8 16 |        |             |                 00                       --  .
1258:058 | DONE lbl | na  8 16 | 00677e |             | es_syntax                            
1258:059 | DONE dir | na  8 16 | 00677e | (13 bytes)  |         .byte 55, 6e, 6b, 6e, 6f, 77, 6e, 20, 77, 6f, 72, 64, 0 
1258:059 | DONE dir | na  8 16 |        |             |                 55 6e 6b 6e 6f 77 6e 20  --  U n k n o w n  
1258:059 | DONE dir | na  8 16 |        |             |                 77 6f 72 64 00           --  w o r d .
1258:060 | DONE wsp | na  8 16 |        |             |
1258:061 | DONE cmt | na  8 16 |        |             | ; ===================================================================
1258:062 | DONE cmt | na  8 16 |        |             | ; TESTING STRINGS
1258:063 | DONE wsp | na  8 16 |        |             |
1258:064 | DONE cmt | na  8 16 |        |             | ; These strings are only used during testing and are removed as Liara Forth is
1258:065 | DONE cmt | na  8 16 |        |             | ; developed. All start with "tests_"
1258:066 | DONE wsp | na  8 16 |        |             |
1258:067 | DONE lbl | na  8 16 | 00678b |             | tests_prev_cmd                       
1258:068 | DONE dir | na  8 16 | 00678b | (19 bytes)  |         .byte 28, 70, 72, 65, 76, 69, 6f, 75, 73, 20, 63, 6f, 6d, (...) 
1258:068 | DONE dir | na  8 16 |        |             |                 28 70 72 65 76 69 6f 75  --  ( p r e v i o u
1258:068 | DONE dir | na  8 16 |        |             |                 73 20 63 6f 6d 6d 61 6e  --  s   c o m m a n
1258:068 | DONE dir | na  8 16 |        |             |                 64 29 00                 --  d ) .
1258:069 | DONE lbl | na  8 16 | 00679e |             | tests_next_cmd                       
1258:070 | DONE dir | na  8 16 | 00679e | (15 bytes)  |         .byte 28, 6e, 65, 78, 74, 20, 63, 6f, 6d, 6d, 61, 6e, 64, (...) 
1258:070 | DONE dir | na  8 16 |        |             |                 28 6e 65 78 74 20 63 6f  --  ( n e x t   c o
1258:070 | DONE dir | na  8 16 |        |             |                 6d 6d 61 6e 64 29 00     --  m m a n d ) .
1258:071 | DONE wsp | na  8 16 |        |             |
1258:072 | DONE cmt | na  8 16 |        |             | ; ===================================================================
1258:073 | DONE cmt | na  8 16 |        |             | ; ALPHABET STRINGS
1258:074 | DONE wsp | na  8 16 |        |             |
1258:075 | DONE cmt | na  8 16 |        |             | ; Leave alphastr as the last entry in the source code to make it easier to
1258:076 | DONE cmt | na  8 16 |        |             | ; see where this section ends. This cannot be a zero-terminated string
1258:077 | DONE wsp | na  8 16 |        |             |
1258:078 | DONE lbl | na  8 16 | 0067ad |             | alphastr                             
1258:079 | DONE dir | na  8 16 | 0067ad | (35 bytes)  |         .byte 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 61, 62, 63, (...) 
1258:079 | DONE dir | na  8 16 |        |             |                 30 31 32 33 34 35 36 37  --  0 1 2 3 4 5 6 7
1258:079 | DONE dir | na  8 16 |        |             |                 38 39 61 62 63 64 65 66  --  8 9 a b c d e f
1258:079 | DONE dir | na  8 16 |        |             |                 67 68 69 6a 6b 6c 6d 6e  --  g h i j k l m n
1258:079 | DONE dir | na  8 16 |        |             |                 6f 70 71 72 73 74 75 76  --  o p q r s t u v
1258:079 | DONE dir | na  8 16 |        |             |                 77 79 7a                 --  w y z
1259:000 | DONE wsp | na  8 16 |        |             |
1260:000 | DONE cmt | na  8 16 |        |             | ; ===================================================================
1261:000 | DONE cmt | na  8 16 |        |             | ; TESTING ROUTINES (UNCOMMENT FOR USE)
1262:000 | DONE wsp | na  8 16 |        |             |
1263:000 | DONE cmt | na  8 16 |        |             |                 ; --- TODO TESTING (PRINT ONE "A") ---
1264:000 | DONE cmt | na  8 16 |        |             |                 ; lda.# 61
1265:000 | DONE cmt | na  8 16 |        |             |                 ; jsr put_chr
1266:000 | DONE cmt | na  8 16 |        |             |                 ; .!a16
1267:000 | DONE cmt | na  8 16 |        |             |                 ; brk 00
1268:000 | DONE cmt | na  8 16 |        |             |                 ; --- TODO TESTING ---
1269:000 | DONE wsp | na  8 16 |        |             |
1270:000 | DONE cmt | na  8 16 |        |             |                 ; --- TODO TESTING (HALT CPU) ---
1271:000 | DONE cmt | na  8 16 |        |             |                 ; brk 00 ; BRK for 265sxb tests (drops back to Mensch Monitor)
1272:000 | DONE cmt | na  8 16 |        |             |                 ; stp    ; STP for crude65816 emulator tests
1273:000 | DONE cmt | na  8 16 |        |             |                 ; --- TODO TESTING ---
1274:000 | DONE wsp | na  8 16 |        |             |
1275:000 | DONE cmt | na  8 16 |        |             | ; ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
1276:000 | DONE wsp | na  8 16 |        |             |
1277:000 | DONE wsp | na  8 16 |        |             |
1278:000 | DONE cmt | na  8 16 |        |             | ; ===================================================================
1279:000 | DONE cmt | na  8 16 |        |             | ; END
1280:000 | DONE wsp | na  8 16 |        |             |
1281:000 | DONE dir | na  8 16 |        |             |         .end                         

MACROS:
        (none)

SYMBOL TABLE:
- a_2dup                      : 0060f0
- a_abort                     : 006091
- a_accept                    : 0060fb
- a_bell                      : 00617c
- a_bl                        : 006183
- a_bye                       : 00618b
- a_cold                      : 00605d
- a_comma                     : 00618e
- a_count                     : 00619a
- a_cr                        : 0061a9
- a_drop                      : 0061b3
- a_dup                       : 0061b8
- a_execute                   : 0061c0
- a_find-name                 : 0061d0
- a_here                      : 00622d
- a_name>int                  : 006234
- a_name>string               : 00623d
- a_nip                       : 00624e
- a_one                       : 0060de
- a_one-plus                  : 0060e6
- a_parse                     : 006283
- a_parse-name                : 006251
- a_plus                      : 0060ce
- a_quit                      : 00609b
- a_refill                    : 0062b6
- a_source                    : 0062f1
- a_source-id                 : 0062fe
- a_space                     : 006305
- a_state                     : 00630c
- a_swap                      : 006314
- a_to-in                     : 0060c6
- a_true                      : 00631a
- a_tuck                      : 006322
- a_two                       : 0060e8
- a_type                      : 00632b
- a_words                     : 00634c
- a_zero                      : 0060d6
- accept_bs                   : 00615e
- accept_eol                  : 006157
- accept_loop                 : 00610c
- accept_nonzero              : 006103
- alphastr                    : 0067ad
- ascbell                     : 000007
- ascbs                       : 000008
- asccc                       : 000003
- asccn                       : 00000e
- asccp                       : 000010
- asccr                       : 00000d
- ascdel                      : 00007f
- ascesc                      : 00001b
- asclf                       : 00000a
- ascsp                       : 000020
- brg_value                   : 00000b
- buffers                     : 007c00
- buffersize                  : 0000ff
- byte_to_ascii               : 00658f
- cib                         : 00020c
- ciblen                      : 00020e
- co                          : 000040
- compex                      : 006547
- compex_got_name_token       : 00655c
- compex_line_done            : 00656a
- compex_loop                 : 006547
- cp                          : 000200
- directpage                  : 000200
- directpage-multiple         : 007400
- dp                          : 000202
- dsp0                        : 0002f0
- error                       : 006571
- es_channel                  : 00665c
- es_componly                 : 006676
- es_defer                    : 006697
- es_divzero                  : 0066b4
- es_empty                    : 0066c5
- es_error                    : 0066ce
- es_intonly                  : 0066da
- es_noname                   : 0066f0
- es_radix                    : 006700
- es_refill1                  : 006717
- es_refill2                  : 006745
- es_stack                    : 006765
- es_syntax                   : 00677e
- execute_done                : 0061ce
- execute_ip                  : 0061bd
- find-name_all_chars         : 0061fe
- find-name_char_nomatch_8    : 0061fa
- find-name_chars             : 0061ef
- find-name_done              : 00622a
- find-name_failure_16        : 006227
- find-name_loop              : 0061da
- find-name_next_entry        : 0061e3
- find-name_success           : 006221
- get_chr                     : 006041
- get_chr_wait                : 006046
- h_2dup                      : 006420
- h_abort                     : 0063aa
- h_accept                    : 0064e4
- h_bell                      : 006391
- h_bl                        : 0063ea
- h_bye                       : 00636d
- h_cold                      : 006378
- h_comma                     : 0064db
- h_count                     : 00639d
- h_cr                        : 0063e0
- h_drop                      : 00653b
- h_dup                       : 006530
- h_execute                   : 006509
- h_false                     : 006465
- h_find-name                 : 006499
- h_here                      : 006518
- h_name>int                  : 0063d0
- h_name>string               : 00640d
- h_nip                       : 0064fe
- h_one                       : 006487
- h_one-plus                  : 00645b
- h_parse                     : 0063b7
- h_parse-name                : 0064b8
- h_plus                      : 006452
- h_quit                      : 0063c4
- h_refill                    : 0064aa
- h_source                    : 006444
- h_source-id                 : 0064ca
- h_space                     : 0063f4
- h_state                     : 00642c
- h_swap                      : 006524
- h_to-in                     : 006439
- h_true                      : 006472
- h_tuck                      : 0064f2
- h_two                       : 00647e
- h_type                      : 006401
- h_words                     : 006384
- h_zero                      : 006490
- have_chr?                   : 006050
- hw_acsr0                    : 00df70
- hw_acsr1                    : 00df72
- hw_acsr2                    : 00df74
- hw_acsr3                    : 00df76
- hw_artd0                    : 00df71
- hw_artd1                    : 00df73
- hw_artd2                    : 00df75
- hw_artd3                    : 00df77
- hw_bcr                      : 00df40
- hw_eier                     : 00df47
- hw_eifr                     : 00df45
- hw_pcs7                     : 00df27
- hw_pd0                      : 00df00
- hw_pd1                      : 00df01
- hw_pd2                      : 00df02
- hw_pd3                      : 00df03
- hw_pd4                      : 00df20
- hw_pd5                      : 00df21
- hw_pd6                      : 00df22
- hw_pd7                      : 00df23
- hw_pdd0                     : 00df04
- hw_pdd1                     : 00df05
- hw_pdd2                     : 00df06
- hw_pdd3                     : 00df07
- hw_pdd4                     : 00df24
- hw_pdd5                     : 00df25
- hw_pdd6                     : 00df26
- hw_sscr                     : 00df41
- hw_t0ch                     : 00df61
- hw_t0cl                     : 00df60
- hw_t1ch                     : 00df63
- hw_t1cl                     : 00df62
- hw_t2ch                     : 00df65
- hw_t2cl                     : 00df64
- hw_t3ch                     : 00df67
- hw_t3cl                     : 00df66
- hw_t4ch                     : 00df69
- hw_t4cl                     : 00df68
- hw_t5ch                     : 00df6b
- hw_t5cl                     : 00df6a
- hw_t6ch                     : 00df6d
- hw_t6cl                     : 00df6c
- hw_t7ch                     : 00df6f
- hw_t7cl                     : 00df6e
- hw_tcr                      : 00df42
- hw_ter                      : 00df43
- hw_tier                     : 00df46
- hw_tifr                     : 00df44
- hw_uier                     : 00df49
- hw_uifr                     : 00df48
- ibuffer1                    : 007c00
- ibuffer2                    : 007d00
- im                          : 000020
- insrc                       : 00020a
- maxram-multiple             : 006fff
- maxram-single               : 007bff
- nc                          : 000010
- nibble_to_ascii             : 00659c
- parse-name_empty_line       : 006263
- parse-name_found            : 006277
- parse-name_loop             : 006256
- parse_found_delimiter       : 0062a3
- parse_loop                  : 006296
- parse_reached_eol           : 0062a7
- physicalram                 : 007fff
- piblen                      : 000210
- print_string                : 006577
- print_string_done           : 006586
- put_chr                     : 006030
- put_chr_wait                : 006036
- pw                          : 000080
- quit_get_line               : 0060a5
- quit_refill_successful      : 0060b3
- ram0                        : 000200
- refill_source_is_not_string : 0062ea
- refill_src_not_kbd          : 0062dd
- reset_hardware              : 006000
- s_author                    : 0065ea
- s_disclaimer                : 006617
- s_ok                        : 006658
- s_title                     : 0065ab
- s_typebye                   : 006645
- s_version                   : 0065cb
- stack-multiple              : 007000
- stack0                      : 007fff
- start                       : 006060
- state                       : 000214
- string_to_uppercase         : 0065aa
- tests_next_cmd              : 00679e
- tests_prev_cmd              : 00678b
- tmp1                        : 000216
- tmp2                        : 000218
- tmp3                        : 00021a
- tmpdsp                      : 000204
- tmptos                      : 000206
- toin                        : 000212
- type_done                   : 006345
- type_loop                   : 006339
- words_loop                  : 006353
- z_2dup                      : 0060fa
- z_abort                     : 0060c5
- z_accept                    : 00617b
- z_bell                      : 006182
- z_bl                        : 00618a
- z_bye                       : 00618d
- z_cold                      : 0060c5
- z_comma                     : 006199
- z_count                     : 0061a8
- z_cr                        : 0061b2
- z_drop                      : 0061b7
- z_dup                       : 0061bc
- z_execute                   : 0061cf
- z_find-name                 : 00622c
- z_here                      : 006233
- z_name>int                  : 00623c
- z_name>string               : 00624d
- z_nip                       : 006250
- z_one                       : 0060e5
- z_one-plus                  : 0060e7
- z_parse                     : 0062b5
- z_parse-name                : 0062b5
- z_plus                      : 0060d5
- z_quit                      : 0060c5
- z_refill                    : 0062f0
- z_source                    : 0062fd
- z_source-id                 : 006304
- z_space                     : 00630b
- z_state                     : 006313
- z_swap                      : 006319
- z_to-in                     : 0060cd
- z_true                      : 006321
- z_tuck                      : 00632a
- z_two                       : 0060ef
- z_type                      : 00634b
- z_words                     : 00636c
- z_zero                      : 0060dd
