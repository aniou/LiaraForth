A Tinkerer's Assembler for the 6502/65c02/65816
Version BETA 17. Feb 2017
Copyright 2015-2017 Scot W. Stevenson <scot.stevenson@gmail.com>
This program comes with ABSOLUTELY NO WARRANTY

Code listing for file liaraforth.tasm
Generated on Wed Mar 15 22:56:28 2017
Target MPU: 65816
External files loaded: 5
Number of passes executed: 35
Number of steps executed: 10
Assembly time: 0.23305 seconds
Code origin: 005000
Bytes of machine code: 8762

LISTING:
   Line  Status/Type State/Width Address     Bytes     Instruction
   1:000 | DONE cmt | em  8  8 |        |             | ; Liara Forth for the W65C265SXB
   2:000 | DONE cmt | em  8  8 |        |             | ; Scot W. Stevenson <scot.stevenson@gmail.com>
   3:000 | DONE cmt | em  8  8 |        |             | ; First version: 01. Apr 2016
   4:000 | DONE cmt | em  8  8 |        |             | ; This version: 14. Mar 2017
   5:000 | DONE wsp | em  8  8 |        |             |
   6:000 | DONE cmt | em  8  8 |        |             | ; This code is written in Typist's Assembler Notation for the 65c02/65816
   7:000 | DONE cmt | em  8  8 |        |             | ; See docs/MANUAL.md for more information
   8:000 | DONE wsp | em  8  8 |        |             |
   9:000 | DONE dir | em  8  8 |        |             |         .mpu 65816                   
  10:000 | DONE dir | em  8  8 |        |             |         .origin 5000                 start of code to save to built-in RAM
  11:000 | DONE cmt | em  8  8 |        |             | ;       .origin 8000    ; start of code to save to Flash memory
  12:000 | DONE lbl | em  8  8 | 005000 |             | code0                                ; used to calculate UNUSED
  13:000 | DONE wsp | em  8  8 |        |             |
  14:000 | DONE cmt | em  8  8 |        |             | ; ===================================================================
  15:000 | DONE cmt | em  8  8 |        |             | ; TOP INCLUDES
  16:000 | DONE wsp | em  8  8 |        |             |
  17:000 | DONE cmt | em  8  8 |        |             | ; Definitions for Liara Forth for the W65C265SXB
  17:001 | DONE cmt | em  8  8 |        |             | ; Scot W. Stevenson <scot.stevenson@gmail.com>
  17:002 | DONE cmt | em  8  8 |        |             | ; First version: 01. Apr 2016
  17:003 | DONE cmt | em  8  8 |        |             | ; This version: 11. Mar 2017
  17:004 | DONE wsp | em  8  8 |        |             |
  17:005 | DONE cmt | em  8  8 |        |             | ; This file is included by liaraforth.tasm
  17:006 | DONE wsp | em  8  8 |        |             |
  17:007 | DONE cmt | em  8  8 |        |             | ; Note that Typist's Assembler Notation does not distinguish between
  17:008 | DONE cmt | em  8  8 |        |             | ; upper andlower case. Variations in case are for human readers only.
  17:009 | DONE wsp | em  8  8 |        |             |
  17:010 | DONE cmt | em  8  8 |        |             | ; I/O facilities are handled in the separate kernel files. The definitions for
  17:011 | DONE cmt | em  8  8 |        |             | ; multitasking are preliminary and will probably change
  17:012 | DONE wsp | em  8  8 |        |             |
  17:013 | DONE wsp | em  8  8 |        |             |
  17:014 | DONE cmt | em  8  8 |        |             | ; ===================================================================
  17:015 | DONE cmt | em  8  8 |        |             | ; MEMORY MAP
  17:016 | DONE cmt | em  8  8 |        |             | ; We reuse the memory that the Mensch Monitor had been using
  17:017 | DONE wsp | em  8  8 |        |             |
  17:018 | DONE cmt | em  8  8 |        |             |         ; TODO add any extra RAM in other banks
  17:019 | DONE cmt | em  8  8 |        |             |         ; TODO add stuff for multitasking
  17:020 | DONE wsp | em  8  8 |        |             |
  17:021 | DONE cmt | em  8  8 |        |             |         ;  00:0000  +-------------------+  ram-start, dpage, user0
  17:022 | DONE cmt | em  8  8 |        |             |         ;           |                   |
  17:023 | DONE cmt | em  8  8 |        |             |         ;           |  ^  Data Stack    |  <-- dsp
  17:024 | DONE cmt | em  8  8 |        |             |         ;           |  |                |
  17:025 | DONE cmt | em  8  8 |        |             |         ;  00:0100  +-------------------+  dsp0, stack
  17:026 | DONE cmt | em  8  8 |        |             |         ;           |                   |
  17:027 | DONE cmt | em  8  8 |        |             |         ;           |  ^  Return Stack  |  <-- rsp
  17:028 | DONE cmt | em  8  8 |        |             |         ;           |  |                |
  17:029 | DONE cmt | em  8  8 |        |             |         ;  00:0200  +-------------------+  rsp0, buffer, buffer0
  17:030 | DONE cmt | em  8  8 |        |             |         ;           |  |                |
  17:031 | DONE cmt | em  8  8 |        |             |         ;           |  v  Input Buffer  |
  17:032 | DONE cmt | em  8  8 |        |             |         ;           |                   |
  17:033 | DONE cmt | em  8  8 |        |             |         ;  00:0300  +-------------------+  cp0
  17:034 | DONE cmt | em  8  8 |        |             |         ;           |  |                |
  17:035 | DONE cmt | em  8  8 |        |             |         ;           |  v  Dictionary    |  <-- cp
  17:036 | DONE cmt | em  8  8 |        |             |         ;           |                   |
  17:037 | DONE cmt | em  8  8 |        |             |         ;   (...)   ~~~~~~~~~~~~~~~~~~~~~
  17:038 | DONE cmt | em  8  8 |        |             |         ;           |                   |
  17:039 | DONE cmt | em  8  8 |        |             |         ;           |                   |
  17:040 | DONE cmt | em  8  8 |        |             |         ;  00:7fff  +-------------------+  ram-end
  17:041 | DONE wsp | em  8  8 |        |             |
  17:042 | DONE cmt | em  8  8 |        |             |         ; Hard physical addresses
  17:043 | DONE dir | em  8  8 |        |             |         .equ ram-start  0000         start of installed RAM
  17:044 | DONE dir | em  8  8 |        |             |         .equ ram-end { 8000 - 1 }    end of 32k installed RAM
  17:045 | DONE wsp | em  8  8 |        |             |
  17:046 | DONE cmt | em  8  8 |        |             |         ; Soft physical addresses
  17:047 | DONE dir | em  8  8 |        |             |         .equ dpage      ram-start    direct page:       0000 - 00ff
  17:048 | DONE dir | em  8  8 |        |             |         .equ stack { 000000 + 0100 } return stack area: 0100 - 01ff
  17:049 | DONE dir | em  8  8 |        |             |         .equ buffer0 { stack + 0100 } buffer areas:      0200 - 02ff
  17:050 | DONE wsp | em  8  8 |        |             |
  17:051 | DONE cmt | em  8  8 |        |             |         ; Defined locations
  17:052 | DONE dir | em  8  8 |        |             |         .equ user0      dpage        user and system variables
  17:053 | DONE dir | em  8  8 |        |             |         .equ dsp0 { stack - 1 }      initial Data Stack Pointer:   00ff
  17:054 | DONE dir | em  8  8 |        |             |         .equ stack0 { buffer0 - 1 }  initial Return Stack Pointer: 01ff
  17:055 | DONE wsp | em  8  8 |        |             |
  17:056 | DONE cmt | em  8  8 |        |             |         ; Buffers
  17:057 | DONE dir | em  8  8 |        |             |         .equ bsize      0080         size of input/output buffers
  17:058 | DONE dir | em  8  8 |        |             |         .equ buffer1 { buffer0 + 000080 } output buffer 0280 (UNUSED)
  17:059 | DONE wsp | em  8  8 |        |             |
  17:060 | DONE cmt | em  8  8 |        |             |         ; Dictionary RAM
  17:061 | DONE dir | em  8  8 |        |             |         .equ cp0 { buffer1 + 000080 } Dictionary starts after last buffer
  17:062 | DONE dir | em  8  8 |        |             |         .equ cp-end { code0 - 1 }    Last RAM byte available
  17:063 | DONE wsp | em  8  8 |        |             |
  17:064 | DONE cmt | em  8  8 |        |             |         ; Other locations
  17:065 | DONE dir | em  8  8 |        |             |         .equ padoffset  0ff          offset from CP to PAD (holds number strings)
  17:066 | DONE wsp | em  8  8 |        |             |
  17:067 | DONE wsp | em  8  8 |        |             |
  17:068 | DONE cmt | em  8  8 |        |             | ; ===================================================================
  17:069 | DONE cmt | em  8  8 |        |             | ; DIRECT PAGE ADDRESSES
  17:070 | DONE wsp | em  8  8 |        |             |
  17:071 | DONE cmt | em  8  8 |        |             | ; All are one cell (two bytes) long to prevent weird errors
  17:072 | DONE cmt | em  8  8 |        |             | ; TODO rewrite with USER variables
  17:073 | DONE dir | em  8  8 |        |             |         .equ cp { 000000 + &00 }     Compiler Pointer, 2 bytes
  17:074 | DONE dir | em  8  8 |        |             |         .equ dp { 000000 + &02 }     Dictionary Pointer, 2 bytes
  17:075 | DONE dir | em  8  8 |        |             |         .equ workword { 000000 + &04 } Currently compiliing word
  17:076 | DONE dir | em  8  8 |        |             |         .equ insrc { 000000 + &06 }  Input Source for SOURCE-ID
  17:077 | DONE dir | em  8  8 |        |             |         .equ cib { 000000 + &08 }    Address of current input buffer
  17:078 | DONE dir | em  8  8 |        |             |         .equ ciblen { 000000 + &10 } Length of current input buffer
  17:079 | DONE dir | em  8  8 |        |             |         .equ toin { 000000 + &12 }   Pointer to CIB (>IN in Forth)
  17:080 | DONE dir | em  8  8 |        |             |         .equ output { 000000 + &14 } Jump target for EMIT
  17:081 | DONE dir | em  8  8 |        |             |         .equ input { 000000 + &16 }  Jump target for KEY
  17:082 | DONE dir | em  8  8 |        |             |         .equ havekey { 000000 + &18 } Jump target for KEY?
  17:083 | DONE dir | em  8  8 |        |             |         .equ state { 000000 + &20 }  STATE: -1 compile, 0 interpret
  17:084 | DONE dir | em  8  8 |        |             |         .equ base { 000000 + &22 }   Radix for number conversion
  17:085 | DONE dir | em  8  8 |        |             |         .equ tohold { 000000 + &24 } Pointer for formatted output
  17:086 | DONE dir | em  8  8 |        |             |         .equ tmpbranch { 000000 + &26 } temp storage for 0BRANCH, BRANCH only
  17:087 | DONE dir | em  8  8 |        |             |         .equ tmp1 { 000000 + &28 }   Temporary storage
  17:088 | DONE dir | em  8  8 |        |             |         .equ tmp2 { 000000 + &30 }   Temporary storage
  17:089 | DONE dir | em  8  8 |        |             |         .equ tmp3 { 000000 + &32 }   Temporary storage
  17:090 | DONE dir | em  8  8 |        |             |         .equ tmpdsp { 000000 + &34 } Temporary DSP (X) storage, 2 bytes
  17:091 | DONE dir | em  8  8 |        |             |         .equ tmptos { 000000 + &36 } Temporary TOS (Y) storage, 2 bytes
  17:092 | DONE dir | em  8  8 |        |             |         .equ nc_limit { 000000 + &38 } Holds limit for Native Compile size
  17:093 | DONE dir | em  8  8 |        |             |         .equ scratch { 000000 + &40 } 8 byte scratchpad (see UM/MOD)
  17:094 | DONE wsp | em  8  8 |        |             |
  17:095 | DONE wsp | em  8  8 |        |             |
  17:096 | DONE cmt | em  8  8 |        |             | ; ===================================================================
  17:097 | DONE cmt | em  8  8 |        |             | ; HELPER DEFINITIONS
  17:098 | DONE wsp | em  8  8 |        |             |
  17:099 | DONE cmt | em  8  8 |        |             | ; ASCII characters
  17:100 | DONE dir | em  8  8 |        |             |         .equ AscCC   03              break (Control-C) ASCII character
  17:101 | DONE dir | em  8  8 |        |             |         .equ AscBELL 07              ACSCII bell sound
  17:102 | DONE dir | em  8  8 |        |             |         .equ AscBS   08              backspace ASCII character
  17:103 | DONE dir | em  8  8 |        |             |         .equ AscLF   0a              line feed ASCII character
  17:104 | DONE dir | em  8  8 |        |             |         .equ AscCR   0d              carriage return ASCII character
  17:105 | DONE dir | em  8  8 |        |             |         .equ AscCN   0e              ASCII CNTR-n (for next command)
  17:106 | DONE dir | em  8  8 |        |             |         .equ AscCP   10              ASCII CNTR-p (for previous command)
  17:107 | DONE dir | em  8  8 |        |             |         .equ AscESC  1b              Escape ASCII character
  17:108 | DONE dir | em  8  8 |        |             |         .equ AscSP   20              space ASCII character
  17:109 | DONE dir | em  8  8 |        |             |         .equ AscDEL  7f              DEL ASCII character
  17:110 | DONE wsp | em  8  8 |        |             |
  17:111 | DONE cmt | em  8  8 |        |             | ; Dictionary flags. The first four bits are currently unused
  17:112 | DONE dir | em  8  8 |        |             |         .equ FN 0008                 Force Native compile
  17:113 | DONE dir | em  8  8 |        |             |         .equ CO 0004                 Compile Only
  17:114 | DONE dir | em  8  8 |        |             |         .equ IM 0002                 Immediate Word
  17:115 | DONE dir | em  8  8 |        |             |         .equ NC 0001                 Native Compile allowed
  17:116 | DONE wsp | em  8  8 |        |             |
  18:000 | DONE wsp | em  8  8 |        |             |
  19:000 | DONE cmt | em  8  8 |        |             | ; Hardware dependencies are isolated to a large degree in kernel files. Liara
  20:000 | DONE cmt | em  8  8 |        |             | ; Forth ships with two such files: One (very ALPHA) for the crude65816 emulator,
  21:000 | DONE cmt | em  8  8 |        |             | ; and one for the 265sxb board. Only use one. Which ever kernel file is used, it
  22:000 | DONE cmt | em  8  8 |        |             | ; must contain at least the routines put_chr, get_chr and have_chr, which work
  23:000 | DONE cmt | em  8  8 |        |             | ; on the A register
  24:000 | DONE wsp | em  8  8 |        |             |
  25:000 | DONE cmt | em  8  8 |        |             | ; Basic hardware routines for Liara Forth: 265SXB version
  25:001 | DONE cmt | em  8  8 |        |             | ; Scot W. Stevenson <scot.stevenson@gmail.com>
  25:002 | DONE cmt | em  8  8 |        |             | ; First version: 04. Jan 2017
  25:003 | DONE cmt | em  8  8 |        |             | ; This version: 05. Mar 2017
  25:004 | DONE wsp | em  8  8 |        |             |
  25:005 | DONE cmt | em  8  8 |        |             | ; This section provides basic hardware interface to the 265SXB, providing at the
  25:006 | DONE cmt | em  8  8 |        |             | ; very least the the PUT_CHR, GET_CHR and HAVE_CHR routines that Liara Forth
  25:007 | DONE cmt | em  8  8 |        |             | ; uses. These MUST BE PRESENT. It is in its own section to make porting Forth
  25:008 | DONE cmt | em  8  8 |        |             | ; to other machines easier.
  25:009 | DONE wsp | em  8  8 |        |             |
  25:010 | DONE cmt | em  8  8 |        |             | ; The code here is based on Andrew Jacobs' Basic Vector Handling for the
  25:011 | DONE cmt | em  8  8 |        |             | ; W65C265SXB Development Board as part of the w65c265sxb-hacker project
  25:012 | DONE cmt | em  8  8 |        |             | ; (https://github.com/andrew-jacobs/w65c265sxb-hacker). It is released under the
  25:013 | DONE cmt | em  8  8 |        |             | ; following license:
  25:014 | DONE cmt | em  8  8 |        |             | ;
  25:015 | DONE cmt | em  8  8 |        |             | ;     This work is made available under the terms of the Creative Commons
  25:016 | DONE cmt | em  8  8 |        |             | ;     Attribution-NonCommercial-ShareAlike 4.0 International license. Open the
  25:017 | DONE cmt | em  8  8 |        |             | ;     following URL to see the details.
  25:018 | DONE cmt | em  8  8 |        |             | ;     http://creativecommons.org/licenses/by-nc-sa/4.0/
  25:019 | DONE wsp | em  8  8 |        |             |
  25:020 | DONE cmt | em  8  8 |        |             | ; Original variable names from w65c256.inc are included in comments to make
  25:021 | DONE cmt | em  8  8 |        |             | ; updates and changes easier
  25:022 | DONE wsp | em  8  8 |        |             |
  25:023 | DONE cmt | em  8  8 |        |             | ; ===================================================================
  25:024 | DONE cmt | em  8  8 |        |             | ; HARDWARE DEFINITIONS
  25:025 | DONE cmt | em  8  8 |        |             | ; These follow Andrew Jacobs' names, but lower case and with "hw_" prefixed.
  25:026 | DONE cmt | em  8  8 |        |             | ; This is the only file where symbols with the hw_ prefix may be defined or used
  25:027 | DONE wsp | em  8  8 |        |             |
  25:028 | DONE cmt | em  8  8 |        |             | ; Baud rates are calculated by the formula { osc_freq/(16*baud_rate)-1 } which we
  25:029 | DONE cmt | em  8  8 |        |             | ; can do on the fly at every assembly with the following parameters, or just calculate
  25:030 | DONE cmt | em  8  8 |        |             | ; once and then define brg_value with:
  25:031 | DONE cmt | em  8  8 |        |             | ;
  25:032 | DONE cmt | em  8  8 |        |             | ; - For  9600 baud, use &23
  25:033 | DONE cmt | em  8  8 |        |             | ; - For 19200 baud, use &11
  25:034 | DONE wsp | em  8  8 |        |             |
  25:035 | DONE cmt | em  8  8 |        |             | ;       .equ osc_freq  3686400          ; SXB runs at 3.6864MHz
  25:036 | DONE cmt | em  8  8 |        |             | ;       .equ baud_rate 19200            ; ACIA baud rate
  25:037 | DONE cmt | em  8  8 |        |             | ;	.equ baud_rate 9600             ; ACIA baud rate
  25:038 | DONE wsp | em  8  8 |        |             |
  25:039 | DONE dir | em  8  8 |        |             |         .equ brg_value &11           19200 baud
  25:040 | DONE cmt | em  8  8 |        |             | ;       .equ brg_value &23              ; 9600 baud
  25:041 | DONE wsp | em  8  8 |        |             |
  25:042 | DONE dir | em  8  8 |        |             |         .equ hw_pd0  0df00           Port 0 Data Register
  25:043 | DONE dir | em  8  8 |        |             |         .equ hw_pd1  0df01           Port 1 Data Register
  25:044 | DONE dir | em  8  8 |        |             |         .equ hw_pd2  0df02           Port 2 Data Register
  25:045 | DONE dir | em  8  8 |        |             |         .equ hw_pd3  0df03           Port 3 Data Register
  25:046 | DONE dir | em  8  8 |        |             |         .equ hw_pdd0 0df04           Port 0 Data Direction Register
  25:047 | DONE dir | em  8  8 |        |             |         .equ hw_pdd1 0df05           Port 1 Data Direction Register
  25:048 | DONE dir | em  8  8 |        |             |         .equ hw_pdd2 0df06           Port 2 Data Direction Register
  25:049 | DONE dir | em  8  8 |        |             |         .equ hw_pdd3 0df07           Port 3 Data Direction Register
  25:050 | DONE wsp | em  8  8 |        |             |
  25:051 | DONE dir | em  8  8 |        |             |         .equ hw_pd4  0df20           Port 4 Data Register
  25:052 | DONE dir | em  8  8 |        |             |         .equ hw_pd5  0df21           Port 5 Data Register
  25:053 | DONE dir | em  8  8 |        |             |         .equ hw_pd6  0df22           Port 6 Data Register
  25:054 | DONE dir | em  8  8 |        |             |         .equ hw_pd7  0df23           Port 7 Data Register
  25:055 | DONE dir | em  8  8 |        |             |         .equ hw_pdd4 0df24           Port 4 Data Direction Register
  25:056 | DONE dir | em  8  8 |        |             |         .equ hw_pdd5 0df25           Port 5 Data Direction Register
  25:057 | DONE dir | em  8  8 |        |             |         .equ hw_pdd6 0df26           Port 6 Data Direction Register
  25:058 | DONE dir | em  8  8 |        |             |         .equ hw_pcs7 0df27           Port 7 Chip Select
  25:059 | DONE wsp | em  8  8 |        |             |
  25:060 | DONE dir | em  8  8 |        |             |         .equ hw_bcr  0df40           Bus Control Register
  25:061 | DONE dir | em  8  8 |        |             |         .equ hw_sscr 0df41           System Speed Control Register
  25:062 | DONE dir | em  8  8 |        |             |         .equ hw_tcr  0df42           Timer Control Register
  25:063 | DONE dir | em  8  8 |        |             |         .equ hw_ter  0df43           Timer Enable Register
  25:064 | DONE dir | em  8  8 |        |             |         .equ hw_tifr 0df44           Timer Interrupt Flag Register
  25:065 | DONE dir | em  8  8 |        |             |         .equ hw_eifr 0df45           Edge Interrupt Flag Register
  25:066 | DONE dir | em  8  8 |        |             |         .equ hw_tier 0df46           Timer Interrupt Enable Register
  25:067 | DONE dir | em  8  8 |        |             |         .equ hw_eier 0df47           Edge Interrupt Enable Register
  25:068 | DONE dir | em  8  8 |        |             |         .equ hw_uifr 0df48           UART Interrupt Flag Register
  25:069 | DONE dir | em  8  8 |        |             |         .equ hw_uier 0df49           UART Interrupt Enable Register
  25:070 | DONE wsp | em  8  8 |        |             |
  25:071 | DONE dir | em  8  8 |        |             |         .equ hw_t0cl 0df60           Timer 0 Counter Low
  25:072 | DONE dir | em  8  8 |        |             |         .equ hw_t0ch 0df61           Timer 0 Counter High
  25:073 | DONE dir | em  8  8 |        |             |         .equ hw_t1cl 0df62           Timer 1 Counter Low
  25:074 | DONE dir | em  8  8 |        |             |         .equ hw_t1ch 0df63           Timer 1 Counter High
  25:075 | DONE dir | em  8  8 |        |             |         .equ hw_t2cl 0df64           Timer 2 Counter Low
  25:076 | DONE dir | em  8  8 |        |             |         .equ hw_t2ch 0df65           Timer 2 Counter High
  25:077 | DONE dir | em  8  8 |        |             |         .equ hw_t3cl 0df66           Timer 3 Counter Low
  25:078 | DONE dir | em  8  8 |        |             |         .equ hw_t3ch 0df67           Timer 3 Counter High
  25:079 | DONE dir | em  8  8 |        |             |         .equ hw_t4cl 0df68           Timer 4 Counter Low
  25:080 | DONE dir | em  8  8 |        |             |         .equ hw_t4ch 0df69           Timer 4 Counter High
  25:081 | DONE dir | em  8  8 |        |             |         .equ hw_t5cl 0df6a           Timer 5 Counter Low
  25:082 | DONE dir | em  8  8 |        |             |         .equ hw_t5ch 0df6b           Timer 5 Counter High
  25:083 | DONE dir | em  8  8 |        |             |         .equ hw_t6cl 0df6c           Timer 6 Counter Low
  25:084 | DONE dir | em  8  8 |        |             |         .equ hw_t6ch 0df6d           Timer 6 Counter High
  25:085 | DONE dir | em  8  8 |        |             |         .equ hw_t7cl 0df6e           Timer 7 Counter Low
  25:086 | DONE dir | em  8  8 |        |             |         .equ hw_t7ch 0df6f           Timer 7 Counter High
  25:087 | DONE wsp | em  8  8 |        |             |
  25:088 | DONE dir | em  8  8 |        |             |         .equ hw_acsr0 0df70          UART 0 Control/Status Register
  25:089 | DONE dir | em  8  8 |        |             |         .equ hw_artd0 0df71          UART 0 Data Register
  25:090 | DONE dir | em  8  8 |        |             |         .equ hw_acsr1 0df72          UART 1 Control/Status Register
  25:091 | DONE dir | em  8  8 |        |             |         .equ hw_artd1 0df73          UART 1 Data Register
  25:092 | DONE dir | em  8  8 |        |             |         .equ hw_acsr2 0df74          UART 2 Control/Status Register
  25:093 | DONE dir | em  8  8 |        |             |         .equ hw_artd2 0df75          UART 2 Data Register
  25:094 | DONE dir | em  8  8 |        |             |         .equ hw_acsr3 0df76          UART 3 Control/Status Register
  25:095 | DONE dir | em  8  8 |        |             |         .equ hw_artd3 0df77          UART 3 Data Register
  25:096 | DONE wsp | em  8  8 |        |             |
  25:097 | DONE wsp | em  8  8 |        |             |
  25:098 | DONE cmt | em  8  8 |        |             | ; ===================================================================
  25:099 | DONE cmt | em  8  8 |        |             | ; RESET HARDWARE
  25:100 | DONE cmt | em  8  8 |        |             | ; Call this during boot. Uses Port 0 for communication in the default setting.
  25:101 | DONE cmt | em  8  8 |        |             | ; Note this does not reset the MPU, which is done by the main Forth code
  25:102 | DONE lbl | em  8  8 | 005000 |             | reset_hardware                       
  25:103 | DONE ins | em  8  8 | 005000 | 78          |                 sei                  
  25:104 | DONE ins | em  8  8 | 005001 | 18          |                 clc                  
  25:105 | DONE ins | em  8  8 | 005002 | fb          |                 xce                  
  25:106 | DONE ctl | na  8  8 |        |             |         .!native
  25:107 | DONE ins | na  8  8 | 005003 | c2 10       |                 rep 10               
  25:108 | DONE ctl | na  8 16 |        |             |         .!xy16
  25:109 | DONE ins | na  8 16 | 005005 | e2 20       |                 sep 20               
  25:110 | DONE ctl | na  8 16 |        |             |         .!a8
  25:111 | DONE cmt | na  8 16 |        |             |                 ; temporarily reset the stack
  25:112 | DONE ins | na  8 16 | 005007 | a2 ff 01    |                 ldx.# 01ff           
  25:113 | DONE ins | na  8 16 | 00500a | 9a          |                 txs                  
  25:114 | DONE wsp | na  8 16 |        |             |
  25:115 | DONE ins | na  8 16 | 00500b | 9c 49 df    |                 stz 00df49           UART Interrupt Enable Register (UIER)
  25:116 | DONE wsp | na  8 16 |        |             |
  25:117 | DONE ins | na  8 16 | 00500e | a9 c0       |                 lda.# 0c0            Ensure A15/AMS are output
  25:118 | DONE ins | na  8 16 | 005010 | 8d 24 df    |                 sta 00df24           Port 4 Data Direction Register (PDD4)
  25:119 | DONE ins | na  8 16 | 005013 | 9c 20 df    |                 stz 00df20           Select bank 0 (Port 4 Data Register, PD4)
  25:120 | DONE wsp | na  8 16 |        |             |
  25:121 | DONE ins | na  8 16 | 005016 | a9 10       |                 lda.# %00010000      Set UART0 to use timer 3
  25:122 | DONE ins | na  8 16 | 005018 | 1c 42 df    |                 trb 00df42           Timer Control Register (TCR)
  25:123 | DONE ins | na  8 16 | 00501b | a9 0b       |                 lda.# .lsb 00000b    And set baud rate
  25:124 | DONE ins | na  8 16 | 00501d | 8d 66 df    |                 sta 00df66           Timer 3 Counter Low (T3CL)
  25:125 | DONE ins | na  8 16 | 005020 | a9 00       |                 lda.# .msb 00000b    
  25:126 | DONE ins | na  8 16 | 005022 | 8d 67 df    |                 sta 00df67           Timer 3 Counter High (T3CH)
  25:127 | DONE ins | na  8 16 | 005025 | a9 08       |                 lda.# 08             Enable timer 3 (1<<3)
  25:128 | DONE ins | na  8 16 | 005027 | 0c 43 df    |                 tsb 00df43           Timer Enable Register (TER)
  25:129 | DONE wsp | na  8 16 |        |             |
  25:130 | DONE ins | na  8 16 | 00502a | a9 25       |                 lda.# %00100101      Set UART0 for 8-N-1
  25:131 | DONE ins | na  8 16 | 00502c | 8d 70 df    |                 sta 00df70           UART 0 Control/Status Register (ACSR0)
  25:132 | DONE wsp | na  8 16 |        |             |
  25:133 | DONE ins | na  8 16 | 00502f | c2 20       |                 rep 20               
  25:134 | DONE ctl | na 16 16 |        |             |         .!a16
  25:135 | DONE ins | na 16 16 | 005031 | 4c 67 50    |                 jmp 005067           we return with A as 8 bits
  25:136 | DONE wsp | na 16 16 |        |             |
  25:137 | DONE wsp | na 16 16 |        |             |
  25:138 | DONE cmt | na 16 16 |        |             | ; ===================================================================
  25:139 | DONE cmt | na 16 16 |        |             | ; PUT_CHR
  25:140 | DONE cmt | na 16 16 |        |             | ; Wait until the last transmission has been completed then send the character
  25:141 | DONE cmt | na 16 16 |        |             | ; in A. Destroys A. This handles all the register size stuff, and does not need to be
  25:142 | DONE cmt | na 16 16 |        |             | ; called with a 8-bit Y register as TOS. This is only called directly by EMIT
  25:143 | DONE cmt | na 16 16 |        |             | ; through the OUTPUT variable. In Forth, this is refered to as UART0
  25:144 | DONE lbl | na 16 16 | 005034 |             | put_chr                              
  25:145 | DONE ins | na 16 16 | 005034 | e2 20       |                 sep 20               
  25:146 | DONE ctl | na  8 16 |        |             |         .!a8
  25:147 | DONE ins | na  8 16 | 005036 | 48          |                 pha                  
  25:148 | DONE ins | na  8 16 | 005037 | a9 02       |                 lda.# 02             (1<<1)
  25:149 | DONE wsp | na  8 16 |        |             |
  25:150 | DONE lbl | na  8 16 | 005039 |             | put_chr_wait                         
  25:151 | DONE ins | na  8 16 | 005039 | 2c 48 df    |                 bit 00df48           timer finished?
  25:152 | DONE ins | na  8 16 | 00503c | f0 fb       |                 beq 005039           
  25:153 | DONE wsp | na  8 16 |        |             |
  25:154 | DONE ins | na  8 16 | 00503e | 68          |                 pla                  
  25:155 | DONE ins | na  8 16 | 00503f | 8d 71 df    |                 sta 00df71           transmit char
  25:156 | DONE ins | na  8 16 | 005042 | c2 20       |                 rep 20               
  25:157 | DONE ctl | na 16 16 |        |             |         .!a16
  25:158 | DONE wsp | na 16 16 |        |             |
  25:159 | DONE ins | na 16 16 | 005044 | 60          |                 rts                  
  25:160 | DONE wsp | na 16 16 |        |             |
  25:161 | DONE cmt | na 16 16 |        |             | ; ===================================================================
  25:162 | DONE cmt | na 16 16 |        |             | ; GET_CHR
  25:163 | DONE cmt | na 16 16 |        |             | ; Fetch the next character from the receive buffer waiting for some to arrive
  25:164 | DONE cmt | na 16 16 |        |             | ; if the buffer is empty. This is handled by KEY through the INPUT variable
  25:165 | DONE cmt | na 16 16 |        |             | ; Note the routine returns its value through A - getting it TOS is the caller's
  25:166 | DONE cmt | na 16 16 |        |             | ; problem
  25:167 | DONE lbl | na 16 16 | 005045 |             | get_chr                              
  25:168 | DONE ins | na 16 16 | 005045 | e2 20       |                 sep 20               
  25:169 | DONE ctl | na  8 16 |        |             |         .!a8
  25:170 | DONE ins | na  8 16 | 005047 | a9 01       |                 lda.# 01             (1<<0)
  25:171 | DONE wsp | na  8 16 |        |             |
  25:172 | DONE lbl | na  8 16 | 005049 |             | get_chr_wait                         
  25:173 | DONE ins | na  8 16 | 005049 | 2c 48 df    |                 bit 00df48           Any data in RX buffer?
  25:174 | DONE ins | na  8 16 | 00504c | f0 fb       |                 beq 005049           No, keep waiting
  25:175 | DONE ins | na  8 16 | 00504e | ad 71 df    |                 lda 00df71           Yes, read it
  25:176 | DONE ins | na  8 16 | 005051 | c2 20       |                 rep 20               
  25:177 | DONE ctl | na 16 16 |        |             |         .!a16
  25:178 | DONE ins | na 16 16 | 005053 | 29 ff 00    |                 and.# 00ff           paranoid
  25:179 | DONE wsp | na 16 16 |        |             |
  25:180 | DONE ins | na 16 16 | 005056 | 60          |                 rts                  
  25:181 | DONE wsp | na 16 16 |        |             |
  25:182 | DONE cmt | na 16 16 |        |             | ; ===================================================================
  25:183 | DONE cmt | na 16 16 |        |             | ; HAVE_CHR
  25:184 | DONE cmt | na 16 16 |        |             | ; Check if the receive buffer contains any data and return C=1 if there is
  25:185 | DONE cmt | na 16 16 |        |             | ; some. This should be handled by KEY? through the HAVEKEY variable
  25:186 | DONE cmt | na 16 16 |        |             | ; TODO Test this
  25:187 | DONE wsp | na 16 16 |        |             |
  25:188 | DONE lbl | na 16 16 | 005057 |             | have_chr                             
  25:189 | DONE ins | na 16 16 | 005057 | 48          |                 pha                  save caller's A
  25:190 | DONE ins | na 16 16 | 005058 | 08          |                 php                  
  25:191 | DONE ins | na 16 16 | 005059 | e2 20       |                 sep 20               
  25:192 | DONE ctl | na  8 16 |        |             |         .!a8
  25:193 | DONE ins | na  8 16 | 00505b | ad 48 df    |                 lda 00df48           read the status register
  25:194 | DONE ins | na  8 16 | 00505e | 28          |                 plp                  
  25:195 | DONE ins | na  8 16 | 00505f | 6a          |                 ror.a                shift hw_uart0r bit into carry
  25:196 | DONE ins | na  8 16 | 005060 | c2 20       |                 rep 20               
  25:197 | DONE ctl | na 16 16 |        |             |         .!a16
  25:198 | DONE ins | na 16 16 | 005062 | 68          |                 pla                  restore A
  25:199 | DONE ins | na 16 16 | 005063 | 60          |                 rts                  
  25:200 | DONE wsp | na 16 16 |        |             |
  25:201 | DONE cmt | na 16 16 |        |             | ; END
  26:000 | DONE cmt | na 16 16 |        |             | ;       .include kernel_emu.tasm        ; routines for crude65815 emulator
  27:000 | DONE wsp | na 16 16 |        |             |
  28:000 | DONE wsp | na 16 16 |        |             |
  29:000 | DONE cmt | na 16 16 |        |             | ; ===================================================================
  30:000 | DONE cmt | na 16 16 |        |             | ; DICTIONARY ROUTINES
  31:000 | DONE wsp | na 16 16 |        |             |
  32:000 | DONE cmt | na 16 16 |        |             | ; Word code routines are sorted alphabetically, except for the first three
  33:000 | DONE cmt | na 16 16 |        |             | ; - COLD, ABORT, and QUIT - and a few others that flow into each other. The
  34:000 | DONE cmt | na 16 16 |        |             | ; byte and cycle values are calculated without the RTS instruction.
  35:000 | DONE wsp | na 16 16 |        |             |
  36:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
  37:000 | DONE cmt | na 16 16 |        |             | ; COLD ( -- ) X bytes / X Cycles
  38:000 | DONE cmt | na 16 16 |        |             | ; Reset the Forth system. Use BYE to return to the Mensch Monitor.
  39:000 | DONE lbl | na 16 16 | 005064 |             | xt_cold                              
  40:000 | DONE wsp | na 16 16 |        |             |
  41:000 | DONE ins | na 16 16 | 005064 | 4c 00 50    |                 jmp 005000           don't use JSR, jump back to start
  42:000 | DONE lbl | na 16 16 | 005067 |             | start                                
  43:000 | DONE dir | na 16 16 |        |             |         .!native                     these should have been handled by hardware reset
  44:000 | DONE dir | na 16 16 |        |             |         .!a16                        
  45:000 | DONE dir | na 16 16 |        |             |         .!xy16                       
  46:000 | DONE ins | na 16 16 | 005067 | 78          |                 sei                  
  47:000 | DONE wsp | na 16 16 |        |             |
  48:000 | DONE cmt | na 16 16 |        |             |                 ; Initialize the Return Stack (65816 stack)
  49:000 | DONE ins | na 16 16 | 005068 | a2 ff 01    |                 ldx.# 0001ff         01ff
  50:000 | DONE ins | na 16 16 | 00506b | 9a          |                 txs                  
  51:000 | DONE wsp | na 16 16 |        |             |
  52:000 | DONE cmt | na 16 16 |        |             |                 ; Clear Data Stack. This is repeated in ABORT, but we have no
  53:000 | DONE cmt | na 16 16 |        |             |                 ; choice if we want to load high-level words via EVALUATE
  54:000 | DONE ins | na 16 16 | 00506c | a0 00 00    |                 ldy.# 0000           
  55:000 | DONE ins | na 16 16 | 00506f | a2 ff 00    |                 ldx.# 0000ff         
  56:000 | DONE wsp | na 16 16 |        |             |
  57:000 | DONE cmt | na 16 16 |        |             |                 ; We start out in decimal mode
  58:000 | DONE ins | na 16 16 | 005072 | a9 0a 00    |                 lda.# 000a           
  59:000 | DONE ins | na 16 16 | 005075 | 85 16       |                 sta.d 000016         
  60:000 | DONE wsp | na 16 16 |        |             |
  61:000 | DONE cmt | na 16 16 |        |             |                 ; We start out with smaller words with less than 20 bytes being
  62:000 | DONE cmt | na 16 16 |        |             |                 ; natively compiled, because this includes words like LSHIFT and MAX.
  63:000 | DONE ins | na 16 16 | 005077 | a9 14 00    |                 lda.# &0020          
  64:000 | DONE ins | na 16 16 | 00507a | 85 26       |                 sta.d 000026         
  65:000 | DONE wsp | na 16 16 |        |             |
  66:000 | DONE cmt | na 16 16 |        |             |                 ; set the OUTPUT vector to the default, which is always put_chr,
  67:000 | DONE cmt | na 16 16 |        |             |                 ; but may have synonyms such as uart0
  68:000 | DONE ins | na 16 16 | 00507c | a9 34 50    |                 lda.# 005034         
  69:000 | DONE ins | na 16 16 | 00507f | 85 0e       |                 sta.d 00000e         
  70:000 | DONE wsp | na 16 16 |        |             |
  71:000 | DONE cmt | na 16 16 |        |             |                 ; set the INPUT vector to the default, which is always get_chr,
  72:000 | DONE cmt | na 16 16 |        |             |                 ; but may have synonyms such as uart0
  73:000 | DONE ins | na 16 16 | 005081 | a9 45 50    |                 lda.# 005045         
  74:000 | DONE ins | na 16 16 | 005084 | 85 10       |                 sta.d 000010         
  75:000 | DONE wsp | na 16 16 |        |             |
  76:000 | DONE cmt | na 16 16 |        |             |                 ; set the HAVE_KEY vector to the default, which is always
  77:000 | DONE cmt | na 16 16 |        |             |                 ; have_chr, but may have synonyms such as uart0
  78:000 | DONE ins | na 16 16 | 005086 | a9 57 50    |                 lda.# 005057         
  79:000 | DONE ins | na 16 16 | 005089 | 85 12       |                 sta.d 000012         
  80:000 | DONE wsp | na 16 16 |        |             |
  81:000 | DONE cmt | na 16 16 |        |             |                 ; The compiler pointer (CP) points to the first free byte
  82:000 | DONE cmt | na 16 16 |        |             |                 ; in the Dictionary
  83:000 | DONE ins | na 16 16 | 00508b | a9 00 03    |                 lda.# 000300         
  84:000 | DONE ins | na 16 16 | 00508e | 85 00       |                 sta.d 000000         
  85:000 | DONE wsp | na 16 16 |        |             |
  86:000 | DONE ins | na 16 16 | 005090 | a9 00 02    |                 lda.# 000200         
  87:000 | DONE ins | na 16 16 | 005093 | 85 08       |                 sta.d 000008         input buffer
  88:000 | DONE ins | na 16 16 | 005095 | 64 0a       |                 stz.d 00000a         input buffer starts empty
  89:000 | DONE ins | na 16 16 | 005097 | 64 06       |                 stz.d 000006         SOURCE-ID is zero
  90:000 | DONE ins | na 16 16 | 005099 | 64 14       |                 stz.d 000014         STATE is zero (interpret)
  91:000 | DONE wsp | na 16 16 |        |             |
  92:000 | DONE cmt | na 16 16 |        |             |                 ; The name token (nt) of DROP is always the first one in the
  93:000 | DONE cmt | na 16 16 |        |             |                 ; new Dictionary, so we start off the Dictionary Pointer (DP)
  94:000 | DONE cmt | na 16 16 |        |             |                 ; there. Anything that comes after that (with WORDS, before
  95:000 | DONE cmt | na 16 16 |        |             |                 ; that) is high-level
  96:000 | DONE ins | na 16 16 | 00509b | a9 5f 69    |                 lda.# 00695f         
  97:000 | DONE ins | na 16 16 | 00509e | 85 02       |                 sta.d 000002         
  98:000 | DONE wsp | na 16 16 |        |             |
  99:000 | DONE cmt | na 16 16 |        |             |                 ; Clean the screen, assumes vt100 terminal
 100:000 | DONE ins | na 16 16 | 0050a0 | 20 61 5c    |                 jsr 005c61           
 101:000 | DONE wsp | na 16 16 |        |             |
 102:000 | DONE cmt | na 16 16 |        |             |                 ; Define high-level words via EVALUATE. At this point, whatever
 103:000 | DONE cmt | na 16 16 |        |             |                 ; is in Y (TOS) is garbage, so we don't have to push it to the
 104:000 | DONE cmt | na 16 16 |        |             |                 ; stack first
 105:000 | DONE ins | na 16 16 | 0050a3 | ca          |                 dex                  
 106:000 | DONE ins | na 16 16 | 0050a4 | ca          |                 dex                  
 107:000 | DONE ins | na 16 16 | 0050a5 | ca          |                 dex                  
 108:000 | DONE ins | na 16 16 | 0050a6 | ca          |                 dex                  
 109:000 | DONE ins | na 16 16 | 0050a7 | a9 74 6a    |                 lda.# 006a74         
 110:000 | DONE ins | na 16 16 | 0050aa | 95 00       |                 sta.dx 00            Start address goes in NOS
 111:000 | DONE ins | na 16 16 | 0050ac | a0 16 06    |                 ldy.# 000616         length goes in TOS
 112:000 | DONE wsp | na 16 16 |        |             |
 113:000 | DONE ins | na 16 16 | 0050af | 20 2e 59    |                 jsr 00592e           
 114:000 | DONE wsp | na 16 16 |        |             |
 115:000 | DONE cmt | na 16 16 |        |             |                 ; fall through to ABORT
 116:000 | DONE wsp | na 16 16 |        |             |
 117:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 118:000 | DONE cmt | na 16 16 |        |             | ; ABORT ( -- ) 8+ bytes / X cycles
 119:000 | DONE cmt | na 16 16 |        |             | ; Reset the parameter (data) stack pointer and continue as QUIT
 120:000 | DONE cmt | na 16 16 |        |             | ; We can jump here via subroutine because we reset the stack pointer
 121:000 | DONE cmt | na 16 16 |        |             | ; anyway. Flows into QUIT.
 122:000 | DONE lbl | na 16 16 | 0050b2 |             | xt_abort                             
 123:000 | DONE ins | na 16 16 | 0050b2 | c2 20       |                 rep 20               
 123:001 | DONE ctl | na 16 16 |        |             |         .!a16
 124:000 | DONE cmt | na 16 16 |        |             |                 ; clear Data Stack
 125:000 | DONE ins | na 16 16 | 0050b4 | a0 00 00    |                 ldy.# 0000           
 126:000 | DONE ins | na 16 16 | 0050b7 | a2 ff 00    |                 ldx.# 0000ff         
 127:000 | DONE wsp | na 16 16 |        |             |
 128:000 | DONE wsp | na 16 16 |        |             |
 129:000 | DONE cmt | na 16 16 |        |             | ; drops through to QUIT, z_abort is the same as z_quit.
 130:000 | DONE wsp | na 16 16 |        |             |
 131:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 132:000 | DONE cmt | na 16 16 |        |             | ; QUIT ( -- ) X bytes / X cycles
 133:000 | DONE cmt | na 16 16 |        |             | ; Reset the input, clearning Return Stack. Jumps to QUIT do not have to be
 134:000 | DONE cmt | na 16 16 |        |             | ; subroutine jumps as the Return Stack is cleared anyway. Liara Forth follows
 135:000 | DONE cmt | na 16 16 |        |             | ; the ANSI Forth recommendation to use REFILL. Note we don't display the "ok"
 136:000 | DONE cmt | na 16 16 |        |             | ; system prompt until after the first output. This follows Gforth.
 137:000 | DONE lbl | na 16 16 | 0050ba |             | xt_quit                              
 138:000 | DONE cmt | na 16 16 |        |             |                 ; clear Return Stack
 139:000 | DONE ins | na 16 16 | 0050ba | a9 ff 01    |                 lda.# 0001ff         
 140:000 | DONE ins | na 16 16 | 0050bd | 1b          |                 tcs                  
 141:000 | DONE wsp | na 16 16 |        |             |
 142:000 | DONE cmt | na 16 16 |        |             |                 ; make sure Instruction Pointer is empty
 143:000 | DONE cmt | na 16 16 |        |             |                 ; TODO move this someplace else or else it will end up in ROM
 144:000 | DONE ins | na 16 16 | 0050be | 9c 5d 59    |                 stz 00595d           
 145:000 | DONE wsp | na 16 16 |        |             |
 146:000 | DONE cmt | na 16 16 |        |             |                 ; switch SOURCE-ID to zero (keyboard input)
 147:000 | DONE ins | na 16 16 | 0050c1 | 64 06       |                 stz.d 000006         
 148:000 | DONE wsp | na 16 16 |        |             |
 149:000 | DONE cmt | na 16 16 |        |             |                 ; switch to interpret state (STATE is zero)
 150:000 | DONE ins | na 16 16 | 0050c3 | 64 14       |                 stz.d 000014         
 151:000 | DONE wsp | na 16 16 |        |             |
 152:000 | DONE lbl | na 16 16 | 0050c5 |             | quit_get_line                        
 153:000 | DONE cmt | na 16 16 |        |             |                 ; Empty current input buffer
 154:000 | DONE ins | na 16 16 | 0050c5 | 64 0a       |                 stz.d 00000a         
 155:000 | DONE wsp | na 16 16 |        |             |
 156:000 | DONE cmt | na 16 16 |        |             |                 ; Accept a line from the current input source
 157:000 | DONE ins | na 16 16 | 0050c7 | 20 38 5d    |                 jsr 005d38           ( -- f )
 158:000 | DONE wsp | na 16 16 |        |             |
 159:000 | DONE ins | na 16 16 | 0050ca | 98          |                 tya                  force flag test
 160:000 | DONE ins | na 16 16 | 0050cb | d0 06       |                 bne 0050d3           
 161:000 | DONE wsp | na 16 16 |        |             |
 162:000 | DONE cmt | na 16 16 |        |             |                 ; If REFILL returned a FALSE flag, something went wrong and we
 163:000 | DONE cmt | na 16 16 |        |             |                 ; need to print an error message and reset the machine. We don't
 164:000 | DONE cmt | na 16 16 |        |             |                 ; need to save TOS because we're going to clobber it anyway when we
 165:000 | DONE cmt | na 16 16 |        |             |                 ; go back to ABORT.
 166:000 | DONE ins | na 16 16 | 0050cd | a9 44 71    |                 lda.# 007144         
 167:000 | DONE ins | na 16 16 | 0050d0 | 4c 21 6a    |                 jmp 006a21           
 168:000 | DONE wsp | na 16 16 |        |             |
 169:000 | DONE wsp | na 16 16 |        |             |
 170:000 | DONE lbl | na 16 16 | 0050d3 |             | quit_refill_successful               
 171:000 | DONE cmt | na 16 16 |        |             |                 ; Assume we have successfully accepted a string of input from
 172:000 | DONE cmt | na 16 16 |        |             |                 ; a source, with address cib and length of input in ciblen. We
 173:000 | DONE cmt | na 16 16 |        |             |                 ; arrive here still with the TRUE flag from REFILL as TOS (in Y)
 174:000 | DONE ins | na 16 16 | 0050d3 | b4 00       |                 ldy.dx 00            drop TOS
 175:000 | DONE ins | na 16 16 | 0050d5 | e8          |                 inx                  
 176:000 | DONE ins | na 16 16 | 0050d6 | e8          |                 inx                  
 177:000 | DONE wsp | na 16 16 |        |             |
 178:000 | DONE cmt | na 16 16 |        |             |                 ; make >IN point to begining of buffer
 179:000 | DONE ins | na 16 16 | 0050d7 | 64 0c       |                 stz.d 00000c         
 180:000 | DONE wsp | na 16 16 |        |             |
 181:000 | DONE cmt | na 16 16 |        |             |                 ; Main compile/execute routine. Consider moving this inside QUIT
 182:000 | DONE cmt | na 16 16 |        |             |                 ; once we know everything works
 183:000 | DONE ins | na 16 16 | 0050d9 | 20 9c 69    |                 jsr 00699c           
 184:000 | DONE wsp | na 16 16 |        |             |
 185:000 | DONE cmt | na 16 16 |        |             |                 ; Test for Data Stack underflow. Our stack is so large in single
 186:000 | DONE cmt | na 16 16 |        |             |                 ; user mode that we don't bother checking for overflow - if that
 187:000 | DONE cmt | na 16 16 |        |             |                 ; happens, we're screwed anyway
 188:000 | DONE ins | na 16 16 | 0050dc | e0 00 01    |                 cpx.# 000100         
 189:000 | DONE ins | na 16 16 | 0050df | 90 06       |                 bcc 0050e7           DSP must always be smaller (!) than DSP0
 190:000 | DONE wsp | na 16 16 |        |             |
 191:000 | DONE ins | na 16 16 | 0050e1 | a9 aa 71    |                 lda.# 0071aa         
 192:000 | DONE ins | na 16 16 | 0050e4 | 4c 21 6a    |                 jmp 006a21           
 193:000 | DONE wsp | na 16 16 |        |             |
 194:000 | DONE lbl | na 16 16 | 0050e7 |             | quit_ok                              
 195:000 | DONE cmt | na 16 16 |        |             |                 ; Display system prompt if all went well. If we're interpreting,
 196:000 | DONE cmt | na 16 16 |        |             |                 ; this is " ok", if we're compiling, it's " compiled"
 197:000 | DONE ins | na 16 16 | 0050e7 | a5 14       |                 lda.d 000014         
 198:000 | DONE ins | na 16 16 | 0050e9 | d0 05       |                 bne 0050f0           
 199:000 | DONE wsp | na 16 16 |        |             |
 200:000 | DONE ins | na 16 16 | 0050eb | a9 8a 70    |                 lda.# 00708a         
 201:000 | DONE ins | na 16 16 | 0050ee | 80 03       |                 bra 0050f3           
 202:000 | DONE lbl | na 16 16 | 0050f0 |             | quit_compiled                        
 203:000 | DONE ins | na 16 16 | 0050f0 | a9 8e 70    |                 lda.# 00708e         fall through to quit_print
 204:000 | DONE lbl | na 16 16 | 0050f3 |             | quit_print                           
 205:000 | DONE ins | na 16 16 | 0050f3 | 20 27 6a    |                 jsr 006a27           
 206:000 | DONE wsp | na 16 16 |        |             |
 207:000 | DONE cmt | na 16 16 |        |             |                 ; Awesome line, everybody. Now get the next one
 208:000 | DONE ins | na 16 16 | 0050f6 | 4c c5 50    |                 jmp 0050c5           
 209:000 | DONE wsp | na 16 16 |        |             |
 210:000 | DONE lbl | na 16 16 | 0050f9 |             | z_cold                               
 211:000 | DONE lbl | na 16 16 | 0050f9 |             | z_abort                              
 212:000 | DONE lbl | na 16 16 | 0050f9 |             | z_quit                               ; empty, no RTS required
 213:000 | DONE wsp | na 16 16 |        |             |
 214:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 215:000 | DONE cmt | na 16 16 |        |             | ; < "LESS" ( n m -- f ) X bytes / X cycles
 216:000 | DONE cmt | na 16 16 |        |             | ; Return true flag if NOS < TOS. See
 217:000 | DONE cmt | na 16 16 |        |             | ; http://www.6502.org/tutorials/compare_beyond.html for details on the
 218:000 | DONE cmt | na 16 16 |        |             | ; comparisons
 219:000 | DONE lbl | na 16 16 | 0050f9 |             | xt_less                              
 220:000 | DONE ins | na 16 16 | 0050f9 | 98          |                 tya                  
 221:000 | DONE ins | na 16 16 | 0050fa | a0 00 00    |                 ldy.# 0000           default is false
 222:000 | DONE wsp | na 16 16 |        |             |
 223:000 | DONE ins | na 16 16 | 0050fd | 38          |                 sec                  
 224:000 | DONE ins | na 16 16 | 0050fe | f5 00       |                 sbc.dx 00            
 225:000 | DONE ins | na 16 16 | 005100 | f0 08       |                 beq 00510a           the same is not greater
 226:000 | DONE ins | na 16 16 | 005102 | 50 03       |                 bvc 005107           no overflow, skip ahead
 227:000 | DONE wsp | na 16 16 |        |             |
 228:000 | DONE cmt | na 16 16 |        |             |                 ; Deal with oveflow because we use signed numbers
 229:000 | DONE ins | na 16 16 | 005104 | 49 00 80    |                 eor.# 8000           compliment negative flag
 230:000 | DONE wsp | na 16 16 |        |             |
 231:000 | DONE lbl | na 16 16 | 005107 |             | less_no_ov                           
 232:000 | DONE cmt | na 16 16 |        |             |                 ; if we're negative TOS > NOS
 233:000 | DONE ins | na 16 16 | 005107 | 30 01       |                 bmi 00510a           
 234:000 | DONE ins | na 16 16 | 005109 | 88          |                 dey                  
 235:000 | DONE lbl | na 16 16 | 00510a |             | less_nip                             
 236:000 | DONE ins | na 16 16 | 00510a | e8          |                 inx                  
 237:000 | DONE ins | na 16 16 | 00510b | e8          |                 inx                  
 238:000 | DONE wsp | na 16 16 |        |             |
 239:000 | DONE lbl | na 16 16 | 00510c |             | z_less                               
 239:001 | DONE ins | na 16 16 | 00510c | 60          |                 rts                  
 240:000 | DONE wsp | na 16 16 |        |             |
 241:000 | DONE wsp | na 16 16 |        |             |
 242:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 243:000 | DONE cmt | na 16 16 |        |             | ; <> "NOT-EQUAL" ( n m -- f ) X bytes / X cycles
 244:000 | DONE cmt | na 16 16 |        |             | ; Return true flag if TOS and NOS are not the same. This is just a different
 245:000 | DONE cmt | na 16 16 |        |             | ; version of EQUAL, we repeat the code for speed reasons
 246:000 | DONE lbl | na 16 16 | 00510d |             | xt_not-equal                         
 247:000 | DONE ins | na 16 16 | 00510d | 98          |                 tya                  
 248:000 | DONE ins | na 16 16 | 00510e | a0 00 00    |                 ldy.# 0000           default value is false
 249:000 | DONE wsp | na 16 16 |        |             |
 250:000 | DONE ins | na 16 16 | 005111 | d5 00       |                 cmp.dx 00            
 251:000 | DONE ins | na 16 16 | 005113 | f0 01       |                 beq 005116           
 252:000 | DONE ins | na 16 16 | 005115 | 88          |                 dey                  wraps to 0FFFF (true)
 253:000 | DONE wsp | na 16 16 |        |             |
 254:000 | DONE lbl | na 16 16 | 005116 |             | not-equal_equal                      ; yes, this is a silly name
 255:000 | DONE ins | na 16 16 | 005116 | e8          |                 inx                  
 256:000 | DONE ins | na 16 16 | 005117 | e8          |                 inx                  
 257:000 | DONE wsp | na 16 16 |        |             |
 258:000 | DONE lbl | na 16 16 | 005118 |             | z_not-equal                          
 258:001 | DONE ins | na 16 16 | 005118 | 60          |                 rts                  
 259:000 | DONE wsp | na 16 16 |        |             |
 260:000 | DONE wsp | na 16 16 |        |             |
 261:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 262:000 | DONE cmt | na 16 16 |        |             | ; <# "LESSNUMBER" ( -- ) 8 bytes / X cycles
 263:000 | DONE cmt | na 16 16 |        |             | ; Start the process to create pictured numeric output. The new string is
 264:000 | DONE cmt | na 16 16 |        |             | ; constructed from back to front, saving the new character at the beginning of
 265:000 | DONE cmt | na 16 16 |        |             | ; the output string. Since we use PAD as a starting address and work backward
 266:000 | DONE cmt | na 16 16 |        |             | ; (!), the string is constructed in the space between the end of the dictionary
 267:000 | DONE cmt | na 16 16 |        |             | ; (as defined by CP) and the PAD. This allows us to satisfy the ANS Forth
 268:000 | DONE cmt | na 16 16 |        |             | ; condition that programs don't fool around with the PAD but still use its
 269:000 | DONE cmt | na 16 16 |        |             | ; address. Code based on pForth, see
 270:000 | DONE cmt | na 16 16 |        |             | ; http://pforth.googlecode.com/svn/trunk/fth/numberio.fth pForth is in the pubic
 271:000 | DONE cmt | na 16 16 |        |             | ; domain. Forth is : <# PAD HLD ! ; we use the internal variable tohold instead
 272:000 | DONE cmt | na 16 16 |        |             | ; of HLD.
 273:000 | DONE lbl | na 16 16 | 005119 |             | xt_lessnumber                        
 274:000 | DONE ins | na 16 16 | 005119 | 20 55 5c    |                 jsr 005c55           
 275:000 | DONE ins | na 16 16 | 00511c | 84 18       |                 sty.d 000018         
 276:000 | DONE wsp | na 16 16 |        |             |
 277:000 | DONE ins | na 16 16 | 00511e | b4 00       |                 ldy.dx 00            
 278:000 | DONE ins | na 16 16 | 005120 | e8          |                 inx                  
 279:000 | DONE ins | na 16 16 | 005121 | e8          |                 inx                  
 280:000 | DONE wsp | na 16 16 |        |             |
 281:000 | DONE lbl | na 16 16 | 005122 |             | z_lessnumber                         
 281:001 | DONE ins | na 16 16 | 005122 | 60          |                 rts                  
 282:000 | DONE wsp | na 16 16 |        |             |
 283:000 | DONE wsp | na 16 16 |        |             |
 284:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 285:000 | DONE cmt | na 16 16 |        |             | ; > "GREATER" ( n m -- f ) X bytes / X cycles
 286:000 | DONE cmt | na 16 16 |        |             | ; Return true flag if NOS > TOS. See
 287:000 | DONE cmt | na 16 16 |        |             | ; http://www.6502.org/tutorials/compare_beyond.html for details on the
 288:000 | DONE cmt | na 16 16 |        |             | ; comparisons
 289:000 | DONE lbl | na 16 16 | 005123 |             | xt_greater                           
 290:000 | DONE ins | na 16 16 | 005123 | 98          |                 tya                  
 291:000 | DONE ins | na 16 16 | 005124 | a0 00 00    |                 ldy.# 0000           default is false
 292:000 | DONE wsp | na 16 16 |        |             |
 293:000 | DONE ins | na 16 16 | 005127 | 38          |                 sec                  
 294:000 | DONE ins | na 16 16 | 005128 | f5 00       |                 sbc.dx 00            
 295:000 | DONE ins | na 16 16 | 00512a | f0 08       |                 beq 005134           the same is not greater
 296:000 | DONE ins | na 16 16 | 00512c | 50 03       |                 bvc 005131           no overflow, skip ahead
 297:000 | DONE wsp | na 16 16 |        |             |
 298:000 | DONE cmt | na 16 16 |        |             |                 ; Deal with oveflow because we use signed numbers
 299:000 | DONE ins | na 16 16 | 00512e | 49 00 80    |                 eor.# 8000           compliment negative flag
 300:000 | DONE wsp | na 16 16 |        |             |
 301:000 | DONE lbl | na 16 16 | 005131 |             | greater_no_ov                        
 302:000 | DONE cmt | na 16 16 |        |             |                 ; if we're still positiv, TOS < NOS
 303:000 | DONE ins | na 16 16 | 005131 | 10 01       |                 bpl 005134           
 304:000 | DONE ins | na 16 16 | 005133 | 88          |                 dey                  
 305:000 | DONE lbl | na 16 16 | 005134 |             | greater_nip                          
 306:000 | DONE ins | na 16 16 | 005134 | e8          |                 inx                  
 307:000 | DONE ins | na 16 16 | 005135 | e8          |                 inx                  
 308:000 | DONE wsp | na 16 16 |        |             |
 309:000 | DONE lbl | na 16 16 | 005136 |             | z_greater                            
 309:001 | DONE ins | na 16 16 | 005136 | 60          |                 rts                  
 310:000 | DONE wsp | na 16 16 |        |             |
 311:000 | DONE wsp | na 16 16 |        |             |
 312:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 313:000 | DONE cmt | na 16 16 |        |             | ; >BODY "TOBODY" ( xt -- addr ) 3 bytes / 6 cycles
 314:000 | DONE cmt | na 16 16 |        |             | ; Given a word's execution token (xt), return the address of the start of that
 315:000 | DONE cmt | na 16 16 |        |             | ; word's parameter field (PFA). This is the address that HERE would return right
 316:000 | DONE cmt | na 16 16 |        |             | ; after CREATE. This is a difficult word for STC Forths, because most words
 317:000 | DONE cmt | na 16 16 |        |             | ; don't have a Code Field Area (CFA) to skip. We solve this by testing if the
 318:000 | DONE cmt | na 16 16 |        |             | ; first three bytes of the body (that starts at xt) are subroutine jumps to
 319:000 | DONE cmt | na 16 16 |        |             | ; DOVAR, DOCONST or DODOES
 320:000 | DONE lbl | na 16 16 | 005137 |             | xt_tobody                            
 321:000 | DONE cmt | na 16 16 |        |             |                 ; In the header, xt already points to the CFA, which CREATE by
 322:000 | DONE cmt | na 16 16 |        |             |                 ; default fills with a JSR to DOVAR
 323:000 | DONE ins | na 16 16 | 005137 | e2 20       |                 sep 20               
 323:001 | DONE ctl | na  8 16 |        |             |         .!a8
 324:000 | DONE ins | na  8 16 | 005139 | b9 00 00    |                 lda.y 0000           see if we have a JSR instruction
 325:000 | DONE ins | na  8 16 | 00513c | c9 20       |                 cmp.# 20             
 326:000 | DONE ins | na  8 16 | 00513e | c2 20       |                 rep 20               
 326:001 | DONE ctl | na 16 16 |        |             |         .!a16
 327:000 | DONE ins | na 16 16 | 005140 | d0 18       |                 bne 00515a           
 328:000 | DONE wsp | na 16 16 |        |             |
 329:000 | DONE cmt | na 16 16 |        |             |                 ; Okay, so we found a JSR instruction. But is it one of the
 330:000 | DONE cmt | na 16 16 |        |             |                 ; right ones?
 331:000 | DONE ins | na 16 16 | 005142 | c8          |                 iny                  
 332:000 | DONE ins | na 16 16 | 005143 | b9 00 00    |                 lda.y 0000           
 333:000 | DONE wsp | na 16 16 |        |             |
 334:000 | DONE ins | na 16 16 | 005146 | c9 95 69    |                 cmp.# 006995         
 335:000 | DONE ins | na 16 16 | 005149 | f0 0d       |                 beq 005158           
 336:000 | DONE ins | na 16 16 | 00514b | c9 6b 69    |                 cmp.# 00696b         
 337:000 | DONE ins | na 16 16 | 00514e | f0 08       |                 beq 005158           
 338:000 | DONE ins | na 16 16 | 005150 | c9 88 69    |                 cmp.# 006988         
 339:000 | DONE ins | na 16 16 | 005153 | f0 03       |                 beq 005158           
 340:000 | DONE wsp | na 16 16 |        |             |
 341:000 | DONE cmt | na 16 16 |        |             |                 ; This is some other jump, so we go back to beginning of word
 342:000 | DONE ins | na 16 16 | 005155 | 88          |                 dey                  restor original xt
 343:000 | DONE ins | na 16 16 | 005156 | 80 02       |                 bra 00515a           
 344:000 | DONE wsp | na 16 16 |        |             |
 345:000 | DONE lbl | na 16 16 | 005158 |             | tobody_have_cfa                      
 346:000 | DONE cmt | na 16 16 |        |             |                 ; Got the right kind of jump. We've already increased the index
 347:000 | DONE cmt | na 16 16 |        |             |                 ; by one, so we just have to add two
 348:000 | DONE ins | na 16 16 | 005158 | c8          |                 iny                  
 349:000 | DONE ins | na 16 16 | 005159 | c8          |                 iny                  drops through to end
 350:000 | DONE wsp | na 16 16 |        |             |
 351:000 | DONE lbl | na 16 16 | 00515a |             | tobody_nojsr                         
 352:000 | DONE cmt | na 16 16 |        |             |                 ; If we don't have a jump instruction, the xt already points to
 353:000 | DONE cmt | na 16 16 |        |             |                 ; the PFA, because there is no CFA
 354:000 | DONE cmt | na 16 16 |        |             |                 ; body
 355:000 | DONE wsp | na 16 16 |        |             |
 356:000 | DONE lbl | na 16 16 | 00515a |             | z_tobody                             
 356:001 | DONE ins | na 16 16 | 00515a | 60          |                 rts                  
 357:000 | DONE wsp | na 16 16 |        |             |
 358:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 359:000 | DONE cmt | na 16 16 |        |             | ; >IN "TOIN" ( -- addr ) 6 bytes / 12 cycles
 360:000 | DONE cmt | na 16 16 |        |             | ; Return address where pointer to current char in input buffer lives (>IN)
 361:000 | DONE lbl | na 16 16 | 00515b |             | xt_to-in                             
 362:000 | DONE ins | na 16 16 | 00515b | ca          |                 dex                  
 363:000 | DONE ins | na 16 16 | 00515c | ca          |                 dex                  
 364:000 | DONE ins | na 16 16 | 00515d | 94 00       |                 sty.dx 00            
 365:000 | DONE wsp | na 16 16 |        |             |
 366:000 | DONE ins | na 16 16 | 00515f | a0 0c 00    |                 ldy.# 00000c         >IN
 367:000 | DONE lbl | na 16 16 | 005162 |             | z_to-in                              
 367:001 | DONE ins | na 16 16 | 005162 | 60          |                 rts                  
 368:000 | DONE wsp | na 16 16 |        |             |
 369:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 370:000 | DONE cmt | na 16 16 |        |             | ; >NUMBER ( ud addr u -- ud addr u ) X bytes / X cycles
 371:000 | DONE cmt | na 16 16 |        |             | ; Convert a string to a double number. Logic here is based on the routine by
 372:000 | DONE cmt | na 16 16 |        |             | ; Phil Burk of the same name in pForth; see
 373:000 | DONE cmt | na 16 16 |        |             | ; https://github.com/philburk/pforth/blob/master/fth/numberio.fth the original
 374:000 | DONE cmt | na 16 16 |        |             | ; Forth code. We arrive here from NUMBER which has made sure that we don't have
 375:000 | DONE cmt | na 16 16 |        |             | ; to deal with a sign and we don't have to deal with a dot as a last character
 376:000 | DONE cmt | na 16 16 |        |             | ; that signalizes double - this should be a pure number string.
 377:000 | DONE cmt | na 16 16 |        |             | ; This routine calles UM*, which uses tmp1, tmp2 and tmp3, so we cannot access
 378:000 | DONE cmt | na 16 16 |        |             | ; any of those.
 379:000 | DONE lbl | na 16 16 | 005163 |             | xt_tonumber                          
 380:000 | DONE dir | na 16 16 |        |             |         .!a16                        
 381:000 | DONE cmt | na 16 16 |        |             |                 ; For the math routine, we move the inputs to the scratchpad to
 382:000 | DONE cmt | na 16 16 |        |             |                 ; avoid having to fool around with the Data Stack.
 383:000 | DONE cmt | na 16 16 |        |             |                 ;
 384:000 | DONE cmt | na 16 16 |        |             |                 ;     +-----+-----+-----+-----+-----+-----+-----+-----+
 385:000 | DONE cmt | na 16 16 |        |             |                 ;     |   UD-LO   |   UD-HI   |     N     | UD-HI-LO  |
 386:000 | DONE cmt | na 16 16 |        |             |                 ;     |           |           |           |           |
 387:000 | DONE cmt | na 16 16 |        |             |                 ;     |  S    S+1 | S+2   S+3 | S+4   S+5 | S+6   S+7 |
 388:000 | DONE cmt | na 16 16 |        |             |                 ;     +-----+-----+-----+-----+-----+-----+-----+-----+
 389:000 | DONE wsp | na 16 16 |        |             |
 390:000 | DONE cmt | na 16 16 |        |             |                 ; The math routine works by converting one character to its
 391:000 | DONE cmt | na 16 16 |        |             |                 ; numerical value (N) via DIGIT? and storing it in S+4 for
 392:000 | DONE cmt | na 16 16 |        |             |                 ; the moment. We then multiply the UD-HI value with the radix
 393:000 | DONE cmt | na 16 16 |        |             |                 ; (from BASE) using UM*, which returns a double-cell result. We
 394:000 | DONE cmt | na 16 16 |        |             |                 ; discard the high cell of that result (UD-HI-HI) and store the
 395:000 | DONE cmt | na 16 16 |        |             |                 ; low cell (UD-HI-LO) in S+6 for now. -- The second part is
 396:000 | DONE cmt | na 16 16 |        |             |                 ; multiplying UD-LO with the radix. The high cell (UD-LO-HI)
 397:000 | DONE cmt | na 16 16 |        |             |                 ; gets put in S+2, the low cell (HD-LO-LO) in S. We then use
 398:000 | DONE cmt | na 16 16 |        |             |                 ; a version of D+ to add ( S S+2 ) and ( S+4 S+6) together,
 399:000 | DONE cmt | na 16 16 |        |             |                 ; storing the result back in S and S+2, before we start another
 400:000 | DONE cmt | na 16 16 |        |             |                 ; round with it as the new UD-LO and UD-HI.
 401:000 | DONE wsp | na 16 16 |        |             |
 402:000 | DONE cmt | na 16 16 |        |             |                 ; Fill the scratchpad. We arrive with ( ud-lo ud-hi addr u ).
 403:000 | DONE cmt | na 16 16 |        |             |                 ; After this step, the original ud-lo and ud-hi will still be on
 404:000 | DONE cmt | na 16 16 |        |             |                 ; the Data Stack, but will be ignored and later overwritten
 405:000 | DONE ins | na 16 16 | 005163 | b5 04       |                 lda.dx 04            ud-lo
 406:000 | DONE ins | na 16 16 | 005165 | 85 28       |                 sta.d 000028         
 407:000 | DONE ins | na 16 16 | 005167 | b5 02       |                 lda.dx 02            ud-hi
 408:000 | DONE ins | na 16 16 | 005169 | 85 2a       |                 sta.d 00002a         
 409:000 | DONE wsp | na 16 16 |        |             |
 410:000 | DONE cmt | na 16 16 |        |             |                 ; We push down one on the Data Stack to use TOS for character
 411:000 | DONE cmt | na 16 16 |        |             |                 ; conversion - now ( ud-lo ud-hi addr u u )
 412:000 | DONE ins | na 16 16 | 00516b | ca          |                 dex                  
 413:000 | DONE ins | na 16 16 | 00516c | ca          |                 dex                  
 414:000 | DONE ins | na 16 16 | 00516d | 94 00       |                 sty.dx 00            
 415:000 | DONE wsp | na 16 16 |        |             |
 416:000 | DONE lbl | na 16 16 | 00516f |             | tonumber_loop                        
 417:000 | DONE cmt | na 16 16 |        |             |                 ; Get one character
 418:000 | DONE ins | na 16 16 | 00516f | a1 02       |                 lda.dxi 02           
 419:000 | DONE ins | na 16 16 | 005171 | a8          |                 tay                  ( ud-lo ud-hi addr u char )
 420:000 | DONE wsp | na 16 16 |        |             |
 421:000 | DONE cmt | na 16 16 |        |             |                 ; Convert one character. DIGIT? takes care of the correct
 422:000 | DONE cmt | na 16 16 |        |             |                 ; register size for A and does a paranoid AND to make sure that
 423:000 | DONE cmt | na 16 16 |        |             |                 ; B is zero, so we don't have to do any of that here.
 424:000 | DONE ins | na 16 16 | 005172 | 20 e1 57    |                 jsr 0057e1           ( char -- n -1 | char 0 )
 425:000 | DONE wsp | na 16 16 |        |             |
 426:000 | DONE cmt | na 16 16 |        |             |                 ; This gives us (ud-lo ud-hi addr u char f | n f ), so check the
 427:000 | DONE cmt | na 16 16 |        |             |                 ; flag. If it is zero, we return what we have and let the caller
 428:000 | DONE cmt | na 16 16 |        |             |                 ; (usually NUMBER) complain to the user
 429:000 | DONE ins | na 16 16 | 005175 | 98          |                 tya                  
 430:000 | DONE ins | na 16 16 | 005176 | d0 06       |                 bne 00517e           
 431:000 | DONE wsp | na 16 16 |        |             |
 432:000 | DONE ins | na 16 16 | 005178 | b4 00       |                 ldy.dx 00            
 433:000 | DONE ins | na 16 16 | 00517a | e8          |                 inx                  
 434:000 | DONE ins | na 16 16 | 00517b | e8          |                 inx                  
 435:000 | DONE ins | na 16 16 | 00517c | 80 35       |                 bra 0051b3           
 436:000 | DONE wsp | na 16 16 |        |             |
 437:000 | DONE lbl | na 16 16 | 00517e |             | tonumber_ok                          
 438:000 | DONE cmt | na 16 16 |        |             |                 ; Conversion was successful, so we're here with
 439:000 | DONE cmt | na 16 16 |        |             |                 ; ( ud-lo ud-hi addr u n -1 ) and can start the math routine.
 440:000 | DONE wsp | na 16 16 |        |             |
 441:000 | DONE cmt | na 16 16 |        |             |                 ; Save N so we don't have to fool around with the Data Stack
 442:000 | DONE ins | na 16 16 | 00517e | b5 00       |                 lda.dx 00            
 443:000 | DONE ins | na 16 16 | 005180 | 85 2c       |                 sta.d 00002c         
 444:000 | DONE wsp | na 16 16 |        |             |
 445:000 | DONE cmt | na 16 16 |        |             |                 ; Now multiply ud-hi (the one in the scratchpad, not the
 446:000 | DONE cmt | na 16 16 |        |             |                 ; original one in the Data Stack) by the radix from BASE. We can
 447:000 | DONE cmt | na 16 16 |        |             |                 ; clobber TOS and NOS
 448:000 | DONE ins | na 16 16 | 005182 | a5 2a       |                 lda.d 00002a         
 449:000 | DONE ins | na 16 16 | 005184 | 95 00       |                 sta.dx 00            
 450:000 | DONE ins | na 16 16 | 005186 | a4 16       |                 ldy.d 000016         ( ud-lo ud-hi addr u ud-hi base )
 451:000 | DONE wsp | na 16 16 |        |             |
 452:000 | DONE cmt | na 16 16 |        |             |                 ; UM* returns a double celled number
 453:000 | DONE ins | na 16 16 | 005188 | 20 33 5f    |                 jsr 005f33           ( ud-lo ud-hi addr u ud-hi-lo ud-hi-hi )
 454:000 | DONE wsp | na 16 16 |        |             |
 455:000 | DONE cmt | na 16 16 |        |             |                 ; Move ud-hi-lo to safety
 456:000 | DONE ins | na 16 16 | 00518b | b5 00       |                 lda.dx 00            ud-hi-lo
 457:000 | DONE ins | na 16 16 | 00518d | 85 2e       |                 sta.d 00002e         
 458:000 | DONE wsp | na 16 16 |        |             |
 459:000 | DONE cmt | na 16 16 |        |             |                 ; Now we multiply ud-lo, overwriting the stack entries
 460:000 | DONE ins | na 16 16 | 00518f | a5 28       |                 lda.d 000028         
 461:000 | DONE ins | na 16 16 | 005191 | 95 00       |                 sta.dx 00            ( ud-lo ud-hi addr u ud-lo ud-hi-hi )
 462:000 | DONE ins | na 16 16 | 005193 | a4 16       |                 ldy.d 000016         ( ud-lo ud-hi addr u ud-lo base )
 463:000 | DONE wsp | na 16 16 |        |             |
 464:000 | DONE ins | na 16 16 | 005195 | 20 33 5f    |                 jsr 005f33           ( ud-lo ud-hi addr u ud-lo-lo ud-lo-hi )
 465:000 | DONE ins | na 16 16 | 005198 | 84 2a       |                 sty.d 00002a         
 466:000 | DONE ins | na 16 16 | 00519a | b5 00       |                 lda.dx 00            
 467:000 | DONE ins | na 16 16 | 00519c | 85 28       |                 sta.d 000028         
 468:000 | DONE wsp | na 16 16 |        |             |
 469:000 | DONE cmt | na 16 16 |        |             |                 ; This is a faster version of D+
 470:000 | DONE ins | na 16 16 | 00519e | a5 28       |                 lda.d 000028         
 471:000 | DONE ins | na 16 16 | 0051a0 | 18          |                 clc                  
 472:000 | DONE ins | na 16 16 | 0051a1 | 65 2c       |                 adc.d 00002c         
 473:000 | DONE ins | na 16 16 | 0051a3 | 85 28       |                 sta.d 000028         this is the new ud-lo
 474:000 | DONE ins | na 16 16 | 0051a5 | a5 2a       |                 lda.d 00002a         
 475:000 | DONE ins | na 16 16 | 0051a7 | 65 2e       |                 adc.d 00002e         
 476:000 | DONE ins | na 16 16 | 0051a9 | 85 2a       |                 sta.d 00002a         this is the new ud-hi
 477:000 | DONE wsp | na 16 16 |        |             |
 478:000 | DONE cmt | na 16 16 |        |             |                 ; Clean up: Get rid of one of the two top elements on the Data
 479:000 | DONE cmt | na 16 16 |        |             |                 ; Stack. NIP is faster if Y is TOS
 480:000 | DONE ins | na 16 16 | 0051ab | e8          |                 inx                  
 481:000 | DONE ins | na 16 16 | 0051ac | e8          |                 inx                  ( ud-lo ud-hi addr u ud-lo-hi )
 482:000 | DONE wsp | na 16 16 |        |             |
 483:000 | DONE cmt | na 16 16 |        |             |                 ; One character down
 484:000 | DONE ins | na 16 16 | 0051ad | f6 02       |                 inc.dx 02            increase address
 485:000 | DONE ins | na 16 16 | 0051af | d6 00       |                 dec.dx 00            decrease length
 486:000 | DONE wsp | na 16 16 |        |             |
 487:000 | DONE ins | na 16 16 | 0051b1 | d0 bc       |                 bne 00516f           
 488:000 | DONE wsp | na 16 16 |        |             |
 489:000 | DONE lbl | na 16 16 | 0051b3 |             | tonumber_done                        
 490:000 | DONE cmt | na 16 16 |        |             |                 ; Counter has reached zero or we have an error. In both cases,
 491:000 | DONE cmt | na 16 16 |        |             |                 ; we clean up the Data Stack and return. We arrive here with
 492:000 | DONE cmt | na 16 16 |        |             |                 ; ( ud-lo ud-hi addr u char ) if there was an error
 493:000 | DONE cmt | na 16 16 |        |             |                 ; and ( ud-lo ud-hi addr u ud-lo ) if not
 494:000 | DONE ins | na 16 16 | 0051b3 | b4 00       |                 ldy.dx 00            
 495:000 | DONE ins | na 16 16 | 0051b5 | e8          |                 inx                  
 496:000 | DONE ins | na 16 16 | 0051b6 | e8          |                 inx                  ( ud-lo ud-hi addr u )
 497:000 | DONE wsp | na 16 16 |        |             |
 498:000 | DONE cmt | na 16 16 |        |             |                 ; The new ud-lo and ud-hi are still on the scratch pad
 499:000 | DONE ins | na 16 16 | 0051b7 | a5 28       |                 lda.d 000028         new ud-lo
 500:000 | DONE ins | na 16 16 | 0051b9 | 95 04       |                 sta.dx 04            
 501:000 | DONE ins | na 16 16 | 0051bb | a5 2a       |                 lda.d 00002a         
 502:000 | DONE ins | na 16 16 | 0051bd | 95 02       |                 sta.dx 02            new ud-hi
 503:000 | DONE wsp | na 16 16 |        |             |
 504:000 | DONE lbl | na 16 16 | 0051bf |             | z_tonumber                           
 504:001 | DONE ins | na 16 16 | 0051bf | 60          |                 rts                  
 505:000 | DONE wsp | na 16 16 |        |             |
 506:000 | DONE wsp | na 16 16 |        |             |
 507:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 508:000 | DONE cmt | na 16 16 |        |             | ; >R "TOR" ( n -- ) (R: -- n )  7 bytes / 22 cycles
 509:000 | DONE cmt | na 16 16 |        |             | ; Move Top of Data Stack to Top of Return Stack
 510:000 | DONE cmt | na 16 16 |        |             | ; TODO consider stripping PHA/PLA if natively compiled (see COMPILE,)
 511:000 | DONE lbl | na 16 16 | 0051c0 |             | xt_tor                               
 512:000 | DONE dir | na 16 16 |        |             |         .!a16                        
 513:000 | DONE cmt | na 16 16 |        |             |                 ; Save the return address. If this word is natively coded, this
 514:000 | DONE cmt | na 16 16 |        |             |                 ; is a complete waste of nine cycles, but required for
 515:000 | DONE cmt | na 16 16 |        |             |                 ; subroutine coding
 516:000 | DONE ins | na 16 16 | 0051c0 | 68          |                 pla                  
 517:000 | DONE cmt | na 16 16 |        |             |                 ; --- cut for native coding ---
 518:000 | DONE wsp | na 16 16 |        |             |
 519:000 | DONE ins | na 16 16 | 0051c1 | 5a          |                 phy                  the actual work
 520:000 | DONE wsp | na 16 16 |        |             |
 521:000 | DONE ins | na 16 16 | 0051c2 | b4 00       |                 ldy.dx 00            DROP
 522:000 | DONE ins | na 16 16 | 0051c4 | e8          |                 inx                  
 523:000 | DONE ins | na 16 16 | 0051c5 | e8          |                 inx                  
 524:000 | DONE wsp | na 16 16 |        |             |
 525:000 | DONE cmt | na 16 16 |        |             |                 ; --- cut for native coding ---
 526:000 | DONE ins | na 16 16 | 0051c6 | 48          |                 pha                  put return address back in place
 527:000 | DONE wsp | na 16 16 |        |             |
 528:000 | DONE lbl | na 16 16 | 0051c7 |             | z_tor                                
 528:001 | DONE ins | na 16 16 | 0051c7 | 60          |                 rts                  
 529:000 | DONE wsp | na 16 16 |        |             |
 530:000 | DONE wsp | na 16 16 |        |             |
 531:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 532:000 | DONE cmt | na 16 16 |        |             | ; /STRING ( addr u n -- ) X bytes / X cycles
 533:000 | DONE cmt | na 16 16 |        |             | ; Remove characters from front of string. Uses tmp1
 534:000 | DONE cmt | na 16 16 |        |             | ; Forth version: ROT OVER + ROT ROT - ;
 535:000 | DONE cmt | na 16 16 |        |             | ; TODO check for negative strings so 1 /STRING TYPE won't try to print the whole
 536:000 | DONE cmt | na 16 16 |        |             | ; address space; follow Gforth in failing gracefully
 537:000 | DONE lbl | na 16 16 | 0051c8 |             | xt_slashstring                       
 538:000 | DONE ins | na 16 16 | 0051c8 | 84 1c       |                 sty.d 00001c         
 539:000 | DONE wsp | na 16 16 |        |             |
 540:000 | DONE ins | na 16 16 | 0051ca | b5 00       |                 lda.dx 00            length
 541:000 | DONE ins | na 16 16 | 0051cc | 38          |                 sec                  
 542:000 | DONE ins | na 16 16 | 0051cd | e5 1c       |                 sbc.d 00001c         
 543:000 | DONE ins | na 16 16 | 0051cf | a8          |                 tay                  
 544:000 | DONE wsp | na 16 16 |        |             |
 545:000 | DONE ins | na 16 16 | 0051d0 | b5 02       |                 lda.dx 02            address
 546:000 | DONE ins | na 16 16 | 0051d2 | 18          |                 clc                  
 547:000 | DONE ins | na 16 16 | 0051d3 | 65 1c       |                 adc.d 00001c         
 548:000 | DONE ins | na 16 16 | 0051d5 | 95 02       |                 sta.dx 02            
 549:000 | DONE wsp | na 16 16 |        |             |
 550:000 | DONE ins | na 16 16 | 0051d7 | e8          |                 inx                  
 551:000 | DONE ins | na 16 16 | 0051d8 | e8          |                 inx                  
 552:000 | DONE wsp | na 16 16 |        |             |
 553:000 | DONE lbl | na 16 16 | 0051d9 |             | z_slashstring                        
 553:001 | DONE ins | na 16 16 | 0051d9 | 60          |                 rts                  
 554:000 | DONE wsp | na 16 16 |        |             |
 555:000 | DONE wsp | na 16 16 |        |             |
 556:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 557:000 | DONE cmt | na 16 16 |        |             | ; . "DOT" ( n -- ) X bytes / X cycles
 558:000 | DONE cmt | na 16 16 |        |             | ; Print value that is TOS followed by a single space. Forth code is
 559:000 | DONE cmt | na 16 16 |        |             | ; DUP ABS 0 <# #S ROT SIGN #> TYPE SPACE   Based on
 560:000 | DONE cmt | na 16 16 |        |             | ; https://github.com/philburk/pforth/blob/master/fth/numberio.fth Since this is
 561:000 | DONE cmt | na 16 16 |        |             | ; used interactively, and humans are slow (just ask GlaDOS), we focus on size.
 562:000 | DONE lbl | na 16 16 | 0051da |             | xt_dot                               
 563:000 | DONE ins | na 16 16 | 0051da | 20 ff 58    |                 jsr 0058ff           ( n n )
 564:000 | DONE ins | na 16 16 | 0051dd | 20 aa 54    |                 jsr 0054aa           ( n n )
 565:000 | DONE ins | na 16 16 | 0051e0 | 20 91 53    |                 jsr 005391           ( n n 0 )
 566:000 | DONE ins | na 16 16 | 0051e3 | 20 19 51    |                 jsr 005119           ( n n 0 )
 567:000 | DONE ins | na 16 16 | 0051e6 | 20 b6 52    |                 jsr 0052b6           ( n ud )
 568:000 | DONE ins | na 16 16 | 0051e9 | 20 62 5d    |                 jsr 005d62           ( ud n )
 569:000 | DONE ins | na 16 16 | 0051ec | 20 c5 5d    |                 jsr 005dc5           ( ud )
 570:000 | DONE ins | na 16 16 | 0051ef | 20 a7 52    |                 jsr 0052a7           
 571:000 | DONE ins | na 16 16 | 0051f2 | 20 ec 5e    |                 jsr 005eec           
 572:000 | DONE ins | na 16 16 | 0051f5 | 20 a4 5e    |                 jsr 005ea4           
 573:000 | DONE wsp | na 16 16 |        |             |
 574:000 | DONE lbl | na 16 16 | 0051f8 |             | z_dot                                
 574:001 | DONE ins | na 16 16 | 0051f8 | 60          |                 rts                  
 575:000 | DONE wsp | na 16 16 |        |             |
 576:000 | DONE wsp | na 16 16 |        |             |
 577:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 578:000 | DONE cmt | na 16 16 |        |             | ; ." "DOTQUOTE" ( -- ) X bytes / X cycles
 579:000 | DONE cmt | na 16 16 |        |             | ; Compile string that is printed during run time. ANSI Forth wants this to be
 580:000 | DONE cmt | na 16 16 |        |             | ; compile-only, even though everybody and their friend uses it for everything.
 581:000 | DONE cmt | na 16 16 |        |             | ; We follow the book here, and recommend .( for general printing.
 582:000 | DONE lbl | na 16 16 | 0051f9 |             | xt_dotquote                          
 583:000 | DONE ins | na 16 16 | 0051f9 | ca          |                 dex                  
 584:000 | DONE ins | na 16 16 | 0051fa | ca          |                 dex                  
 585:000 | DONE ins | na 16 16 | 0051fb | 94 00       |                 sty.dx 00            
 586:000 | DONE ins | na 16 16 | 0051fd | a0 22 00    |                 ldy.# 0022           ASCII for "
 587:000 | DONE wsp | na 16 16 |        |             |
 588:000 | DONE ins | na 16 16 | 005200 | 20 a2 5c    |                 jsr 005ca2           
 589:000 | DONE ins | na 16 16 | 005203 | 20 d5 5d    |                 jsr 005dd5           
 590:000 | DONE wsp | na 16 16 |        |             |
 591:000 | DONE ins | na 16 16 | 005206 | f4 ec 5e    |                 phe.# 005eec         
 592:000 | DONE ins | na 16 16 | 005209 | 20 00 6a    |                 jsr 006a00           don't JSR/RTS
 593:000 | DONE wsp | na 16 16 |        |             |
 594:000 | DONE lbl | na 16 16 | 00520c |             | z_dotquote                           
 594:001 | DONE ins | na 16 16 | 00520c | 60          |                 rts                  
 595:000 | DONE wsp | na 16 16 |        |             |
 596:000 | DONE wsp | na 16 16 |        |             |
 597:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 598:000 | DONE cmt | na 16 16 |        |             | ; .S "DOTS" ( -- ) X bytes / X cycles
 599:000 | DONE cmt | na 16 16 |        |             | ; Print content of Data Stack non-distructively. Since this is for humans, we
 600:000 | DONE cmt | na 16 16 |        |             | ; don't have to worry about speed. We follow the format of Gforth
 601:000 | DONE cmt | na 16 16 |        |             | ; and print the number of elements first in brackets, followed by the Data Stack
 602:000 | DONE cmt | na 16 16 |        |             | ; content (if present). Uses tmp3
 603:000 | DONE lbl | na 16 16 | 00520d |             | xt_dots                              
 604:000 | DONE dir | na 16 16 |        |             |         .!a16                        
 605:000 | DONE dir | na 16 16 |        |             |         .!xy16                       
 606:000 | DONE ins | na 16 16 | 00520d | 20 56 58    |                 jsr 005856           ( -- u)
 607:000 | DONE wsp | na 16 16 |        |             |
 608:000 | DONE cmt | na 16 16 |        |             |                 ; Print stack depth in brackets
 609:000 | DONE ins | na 16 16 | 005210 | a9 3c 00    |                 lda.# 3c             
 610:000 | DONE ins | na 16 16 | 005213 | 20 09 59    |                 jsr 005909           
 611:000 | DONE wsp | na 16 16 |        |             |
 612:000 | DONE cmt | na 16 16 |        |             |                 ; We keep a copy of the number of things on the stack to use as
 613:000 | DONE cmt | na 16 16 |        |             |                 ; a counter further down
 614:000 | DONE ins | na 16 16 | 005216 | ca          |                 dex                  DUP
 615:000 | DONE ins | na 16 16 | 005217 | ca          |                 dex                  
 616:000 | DONE ins | na 16 16 | 005218 | 94 00       |                 sty.dx 00            
 617:000 | DONE wsp | na 16 16 |        |             |
 618:000 | DONE ins | na 16 16 | 00521a | 20 3f 6a    |                 jsr 006a3f           print unsigned number
 619:000 | DONE wsp | na 16 16 |        |             |
 620:000 | DONE ins | na 16 16 | 00521d | a9 3e 00    |                 lda.# 3e             
 621:000 | DONE ins | na 16 16 | 005220 | 20 09 59    |                 jsr 005909           
 622:000 | DONE ins | na 16 16 | 005223 | 20 a4 5e    |                 jsr 005ea4           
 623:000 | DONE wsp | na 16 16 |        |             |
 624:000 | DONE cmt | na 16 16 |        |             |                 ; There will be a lot of cases where .S is used when the stack
 625:000 | DONE cmt | na 16 16 |        |             |                 ; is empty. Get them first and exit quickly
 626:000 | DONE ins | na 16 16 | 005226 | 98          |                 tya                  force flag test
 627:000 | DONE ins | na 16 16 | 005227 | f0 18       |                 beq 005241           
 628:000 | DONE wsp | na 16 16 |        |             |
 629:000 | DONE lbl | na 16 16 | 005229 |             | dots_not_empty                       
 630:000 | DONE cmt | na 16 16 |        |             |                 ; We have at least one element on the stack, which used to be in
 631:000 | DONE cmt | na 16 16 |        |             |                 ; Y as TOS, but is now NOS and therefore accessable by X. The
 632:000 | DONE cmt | na 16 16 |        |             |                 ; depth of the Data Stack is in Y waiting to be used as
 633:000 | DONE cmt | na 16 16 |        |             |                 ; a counter. We use this to our advantage.
 634:000 | DONE ins | na 16 16 | 005229 | a9 fb 00    |                 lda.# 0000fb         skip two garbage entries on stack
 635:000 | DONE ins | na 16 16 | 00522c | 85 20       |                 sta.d 000020         use as pointer
 636:000 | DONE wsp | na 16 16 |        |             |
 637:000 | DONE lbl | na 16 16 | 00522e |             | dots_loop                            
 638:000 | DONE ins | na 16 16 | 00522e | b2 20       |                 lda.di 000020        LDA (TMP1)
 639:000 | DONE ins | na 16 16 | 005230 | 5a          |                 phy                  save our counter
 640:000 | DONE ins | na 16 16 | 005231 | a8          |                 tay                  
 641:000 | DONE ins | na 16 16 | 005232 | 20 da 51    |                 jsr 0051da           print one number, drops TOS
 642:000 | DONE wsp | na 16 16 |        |             |
 643:000 | DONE ins | na 16 16 | 005235 | ca          |                 dex                  restore counter
 644:000 | DONE ins | na 16 16 | 005236 | ca          |                 dex                  
 645:000 | DONE ins | na 16 16 | 005237 | 94 00       |                 sty.dx 00            
 646:000 | DONE ins | na 16 16 | 005239 | 7a          |                 ply                  
 647:000 | DONE wsp | na 16 16 |        |             |
 648:000 | DONE ins | na 16 16 | 00523a | c6 20       |                 dec.d 000020         next stack entry
 649:000 | DONE ins | na 16 16 | 00523c | c6 20       |                 dec.d 000020         
 650:000 | DONE wsp | na 16 16 |        |             |
 651:000 | DONE ins | na 16 16 | 00523e | 88          |                 dey                  
 652:000 | DONE ins | na 16 16 | 00523f | d0 ed       |                 bne 00522e           
 653:000 | DONE wsp | na 16 16 |        |             |
 654:000 | DONE lbl | na 16 16 | 005241 |             | dots_done                            
 655:000 | DONE cmt | na 16 16 |        |             |                 ; word so we save one byte by doing DROP the slow way
 656:000 | DONE ins | na 16 16 | 005241 | 20 dc 58    |                 jsr 0058dc           
 657:000 | DONE wsp | na 16 16 |        |             |
 658:000 | DONE lbl | na 16 16 | 005244 |             | z_dots                               
 658:001 | DONE ins | na 16 16 | 005244 | 60          |                 rts                  
 659:000 | DONE wsp | na 16 16 |        |             |
 660:000 | DONE wsp | na 16 16 |        |             |
 661:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 662:000 | DONE cmt | na 16 16 |        |             | ; , "COMMA" ( n -- ) 11 bytes / 29 cycles
 663:000 | DONE cmt | na 16 16 |        |             | ; Allot one cell and store TOS in memory. We ignore alignment issues, though
 664:000 | DONE cmt | na 16 16 |        |             | ; satisfy the ANSI requirement that an aligned compiler pointer will remain
 665:000 | DONE cmt | na 16 16 |        |             | ; aligned
 666:000 | DONE cmt | na 16 16 |        |             | ; There is another variant possible:
 667:000 | DONE cmt | na 16 16 |        |             | ;               tya
 668:000 | DONE cmt | na 16 16 |        |             | ;               ldy.d cp
 669:000 | DONE cmt | na 16 16 |        |             | ;               sta.y 0000
 670:000 | DONE cmt | na 16 16 |        |             | ;               iny
 671:000 | DONE cmt | na 16 16 |        |             | ;               iny
 672:000 | DONE cmt | na 16 16 |        |             | ;               sty.d cp
 673:000 | DONE cmt | na 16 16 |        |             | ;               ldy.dx 00
 674:000 | DONE cmt | na 16 16 |        |             | ;               inx
 675:000 | DONE cmt | na 16 16 |        |             | ;               inx
 676:000 | DONE cmt | na 16 16 |        |             | ; This is as fast as the variant below, but three bytes longer
 677:000 | DONE lbl | na 16 16 | 005245 |             | xt_comma                             
 678:000 | DONE dir | na 16 16 |        |             |         .!a16                        
 679:000 | DONE ins | na 16 16 | 005245 | 98          |                 tya                  
 680:000 | DONE ins | na 16 16 | 005246 | 92 00       |                 sta.di 000000        STA (CP)
 681:000 | DONE ins | na 16 16 | 005248 | e6 00       |                 inc.d 000000         
 682:000 | DONE ins | na 16 16 | 00524a | e6 00       |                 inc.d 000000         
 683:000 | DONE wsp | na 16 16 |        |             |
 684:000 | DONE ins | na 16 16 | 00524c | b4 00       |                 ldy.dx 00            
 685:000 | DONE ins | na 16 16 | 00524e | e8          |                 inx                  
 686:000 | DONE ins | na 16 16 | 00524f | e8          |                 inx                  
 687:000 | DONE wsp | na 16 16 |        |             |
 688:000 | DONE lbl | na 16 16 | 005250 |             | z_comma                              
 688:001 | DONE ins | na 16 16 | 005250 | 60          |                 rts                  
 689:000 | DONE wsp | na 16 16 |        |             |
 690:000 | DONE wsp | na 16 16 |        |             |
 691:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 692:000 | DONE cmt | na 16 16 |        |             | ; : "COLON" ( "name" -- ) X bytes / X cycles
 693:000 | DONE cmt | na 16 16 |        |             | ; Start compilation of new word into the Dictionary. Use the CREATE routine
 694:000 | DONE cmt | na 16 16 |        |             | ; and fill in the rest by hand.
 695:000 | DONE lbl | na 16 16 | 005251 |             | xt_colon                             
 696:000 | DONE dir | na 16 16 |        |             |         .!a16                        
 697:000 | DONE cmt | na 16 16 |        |             |                 ; if we are already in compile mode, complain and abort
 698:000 | DONE ins | na 16 16 | 005251 | a5 14       |                 lda.d 000014         
 699:000 | DONE ins | na 16 16 | 005253 | f0 06       |                 beq 00525b           
 700:000 | DONE wsp | na 16 16 |        |             |
 701:000 | DONE ins | na 16 16 | 005255 | a9 92 71    |                 lda.# 007192         
 702:000 | DONE ins | na 16 16 | 005258 | 4c 21 6a    |                 jmp 006a21           
 703:000 | DONE lbl | na 16 16 | 00525b |             | @                                    
 704:000 | DONE cmt | na 16 16 |        |             |                 ; Switch to compile state. From now on, everything goes in the
 705:000 | DONE cmt | na 16 16 |        |             |                 ; Dictionary
 706:000 | DONE ins | na 16 16 | 00525b | e6 14       |                 inc.d 000014         
 707:000 | DONE wsp | na 16 16 |        |             |
 708:000 | DONE cmt | na 16 16 |        |             |                 ; CREATE is going to change DP to point to the new word's
 709:000 | DONE cmt | na 16 16 |        |             |                 ; header. While this is fine for (say) variables, it would mean
 710:000 | DONE cmt | na 16 16 |        |             |                 ; that FIND-NAME etc would find a half-finished word when
 711:000 | DONE cmt | na 16 16 |        |             |                 ; looking in the Dictionary. To prevent this, we save the old
 712:000 | DONE cmt | na 16 16 |        |             |                 ; version of DP and restore it later. The new DP is placed in
 713:000 | DONE cmt | na 16 16 |        |             |                 ; the variable WORKWORD until we're finished with a SEMICOLON.
 714:000 | DONE ins | na 16 16 | 00525d | a5 02       |                 lda.d 000002         
 715:000 | DONE ins | na 16 16 | 00525f | 48          |                 pha                  CREATE uses tmp1, tmp2 and tmp3
 716:000 | DONE wsp | na 16 16 |        |             |
 717:000 | DONE ins | na 16 16 | 005260 | 20 56 57    |                 jsr 005756           
 718:000 | DONE wsp | na 16 16 |        |             |
 719:000 | DONE cmt | na 16 16 |        |             |                 ; Get the nt of the new word as described above. Only COLON,
 720:000 | DONE cmt | na 16 16 |        |             |                 ; SEMICOLON and RECURSE access WORKWORD
 721:000 | DONE ins | na 16 16 | 005263 | a5 02       |                 lda.d 000002         
 722:000 | DONE ins | na 16 16 | 005265 | 85 04       |                 sta.d 000004         
 723:000 | DONE ins | na 16 16 | 005267 | 68          |                 pla                  
 724:000 | DONE ins | na 16 16 | 005268 | 85 02       |                 sta.d 000002         
 725:000 | DONE wsp | na 16 16 |        |             |
 726:000 | DONE cmt | na 16 16 |        |             |                 ; CREATE includes a subroutine jump to DOVAR by default. We back
 727:000 | DONE cmt | na 16 16 |        |             |                 ; up three bytes and overwrite that. Note that 3 x DEC.D would
 728:000 | DONE cmt | na 16 16 |        |             |                 ; use 3 bytes and 18 cycles; this version uses 8 bytes but
 729:000 | DONE cmt | na 16 16 |        |             |                 ; only 13 cycles
 730:000 | DONE ins | na 16 16 | 00526a | a5 00       |                 lda.d 000000         
 731:000 | DONE ins | na 16 16 | 00526c | 38          |                 sec                  
 732:000 | DONE ins | na 16 16 | 00526d | e9 03 00    |                 sbc.# 0003           
 733:000 | DONE ins | na 16 16 | 005270 | 85 00       |                 sta.d 000000         
 734:000 | DONE wsp | na 16 16 |        |             |
 735:000 | DONE lbl | na 16 16 | 005272 |             | z_colon                              
 735:001 | DONE ins | na 16 16 | 005272 | 60          |                 rts                  
 736:000 | DONE wsp | na 16 16 |        |             |
 737:000 | DONE wsp | na 16 16 |        |             |
 738:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 739:000 | DONE cmt | na 16 16 |        |             | ; ; "SEMICOLON" ( -- ) X bytes / X cycles
 740:000 | DONE cmt | na 16 16 |        |             | ; End the compilation of a new word into the Dictionary. When we enter this,
 741:000 | DONE cmt | na 16 16 |        |             | ; WORKWORD is pointing to the nt_ of this word in the Dictionary, DP to the
 742:000 | DONE cmt | na 16 16 |        |             | ; previous word, and CP to the next free byte.  A Forth definition would be
 743:000 | DONE cmt | na 16 16 |        |             | ; (see "Starting Forth"):
 744:000 | DONE cmt | na 16 16 |        |             | ;  : ;  POSTPONE EXIT  REVEAL POSTPONE ; [ ; IMMEDIATE
 745:000 | DONE lbl | na 16 16 | 005273 |             | xt_semicolon                         
 746:000 | DONE dir | na 16 16 |        |             |         .!a16                        
 747:000 | DONE ins | na 16 16 | 005273 | 84 24       |                 sty.d 000024         
 748:000 | DONE wsp | na 16 16 |        |             |
 749:000 | DONE cmt | na 16 16 |        |             |                 ; CP is the byte that will be the address we use in the header for
 750:000 | DONE cmt | na 16 16 |        |             |                 ; the end-of-compile address (z_word). This is six bytes down in
 751:000 | DONE cmt | na 16 16 |        |             |                 ; the header
 752:000 | DONE ins | na 16 16 | 005275 | a0 06 00    |                 ldy.# 0006           
 753:000 | DONE ins | na 16 16 | 005278 | a5 00       |                 lda.d 000000         
 754:000 | DONE ins | na 16 16 | 00527a | 91 04       |                 sta.diy 000004       STA (WORKWORD),Y
 755:000 | DONE wsp | na 16 16 |        |             |
 756:000 | DONE cmt | na 16 16 |        |             |                 ; Add the RTS instruction to the end of the current word. We
 757:000 | DONE cmt | na 16 16 |        |             |                 ; don't have to switch the size of the A register because we
 758:000 | DONE cmt | na 16 16 |        |             |                 ; only move up the CP by one and the MSB will be overwritten.
 759:000 | DONE cmt | na 16 16 |        |             |                 ; Little endian MPUs for the win!
 760:000 | DONE ins | na 16 16 | 00527c | a9 60 00    |                 lda.# 60             opcode for RTS
 761:000 | DONE ins | na 16 16 | 00527f | 92 00       |                 sta.di 000000        STA (CP)
 762:000 | DONE ins | na 16 16 | 005281 | e6 00       |                 inc.d 000000         MSB will be overwritten
 763:000 | DONE wsp | na 16 16 |        |             |
 764:000 | DONE cmt | na 16 16 |        |             |                 ; Word definition is complete. Make the new word the last one in
 765:000 | DONE cmt | na 16 16 |        |             |                 ; the Dictionary
 766:000 | DONE ins | na 16 16 | 005283 | a5 04       |                 lda.d 000004         
 767:000 | DONE ins | na 16 16 | 005285 | 85 02       |                 sta.d 000002         
 768:000 | DONE wsp | na 16 16 |        |             |
 769:000 | DONE cmt | na 16 16 |        |             |                 ; Get our TOS back
 770:000 | DONE ins | na 16 16 | 005287 | a4 24       |                 ldy.d 000024         
 771:000 | DONE wsp | na 16 16 |        |             |
 772:000 | DONE cmt | na 16 16 |        |             |                 ; Set compile flag back to zero so we're back in interpret mode
 773:000 | DONE ins | na 16 16 | 005289 | 64 14       |                 stz.d 000014         
 774:000 | DONE wsp | na 16 16 |        |             |
 775:000 | DONE lbl | na 16 16 | 00528b |             | z_semicolon                          
 775:001 | DONE ins | na 16 16 | 00528b | 60          |                 rts                  
 776:000 | DONE wsp | na 16 16 |        |             |
 777:000 | DONE wsp | na 16 16 |        |             |
 778:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 779:000 | DONE cmt | na 16 16 |        |             | ; # "HASH" / "NUMBER-SIGN" ( ud -- ud )  X bytes / X cycles
 780:000 | DONE cmt | na 16 16 |        |             | ; Add one character to the beginning of the pictured output string.
 781:000 | DONE cmt | na 16 16 |        |             | ; Code based on https://github.com/philburk/pforth/blob/master/fth/numberio.fth
 782:000 | DONE cmt | na 16 16 |        |             | ; Forth code is  BASE @ UD/MOD ROT 9 OVER < IF 7 + THEN [CHAR] 0 + HOLD ;
 783:000 | DONE cmt | na 16 16 |        |             | ; TODO convert more parts to assembler
 784:000 | DONE lbl | na 16 16 | 00528c |             | xt_hash                              
 785:000 | DONE dir | na 16 16 |        |             |         .!a16                        
 786:000 | DONE ins | na 16 16 | 00528c | 20 b4 55    |                 jsr 0055b4           ( ud addr )
 787:000 | DONE ins | na 16 16 | 00528f | 20 da 52    |                 jsr 0052da           ( ud u )
 788:000 | DONE ins | na 16 16 | 005292 | 20 17 5f    |                 jsr 005f17           ( rem ud )
 789:000 | DONE ins | na 16 16 | 005295 | 20 62 5d    |                 jsr 005d62           ( ud rem )
 790:000 | DONE wsp | na 16 16 |        |             |
 791:000 | DONE cmt | na 16 16 |        |             |                 ; Convert the number that is left over to an ASCII character. We
 792:000 | DONE cmt | na 16 16 |        |             |                 ; use a string lookup for speed. Use either abc_str_lower for
 793:000 | DONE cmt | na 16 16 |        |             |                 ; lower case or abc_str_upper for upper case (prefered)
 794:000 | DONE ins | na 16 16 | 005298 | e2 20       |                 sep 20               
 794:001 | DONE ctl | na  8 16 |        |             |         .!a8
 795:000 | DONE ins | na  8 16 | 00529a | b9 17 72    |                 lda.y 007217         
 796:000 | DONE ins | na  8 16 | 00529d | c2 20       |                 rep 20               
 796:001 | DONE ctl | na 16 16 |        |             |         .!a16
 797:000 | DONE cmt | na 16 16 |        |             |                 ; overwrite remainder with ASCII value
 798:000 | DONE ins | na 16 16 | 00529f | 29 ff 00    |                 and.# 00ff           
 799:000 | DONE ins | na 16 16 | 0052a2 | a8          |                 tay                  ( ud char )
 800:000 | DONE wsp | na 16 16 |        |             |
 801:000 | DONE ins | na 16 16 | 0052a3 | 20 a9 5a    |                 jsr 005aa9           
 802:000 | DONE wsp | na 16 16 |        |             |
 803:000 | DONE lbl | na 16 16 | 0052a6 |             | z_hash                               
 803:001 | DONE ins | na 16 16 | 0052a6 | 60          |                 rts                  
 804:000 | DONE wsp | na 16 16 |        |             |
 805:000 | DONE wsp | na 16 16 |        |             |
 806:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 807:000 | DONE cmt | na 16 16 |        |             | ; #> "NUMBERMORE" / "NUMBER-GREATER" ( d -- addr u ) X bytes / X cycles
 808:000 | DONE cmt | na 16 16 |        |             | ; Finish conversion of pictured number string, putting address and length on the
 809:000 | DONE cmt | na 16 16 |        |             | ; Data Stack. Original Fort is  2DROP HLD @ PAD OVER -  Based on
 810:000 | DONE cmt | na 16 16 |        |             | ; https://github.com/philburk/pforth/blob/master/fth/numberio.fth
 811:000 | DONE lbl | na 16 16 | 0052a7 |             | xt_numbermore                        
 812:000 | DONE dir | na 16 16 |        |             |         .!a16                        
 813:000 | DONE cmt | na 16 16 |        |             |                 ; We simply overwrite the double cell number, saving us a lot of
 814:000 | DONE cmt | na 16 16 |        |             |                 ; stack thrashing. First, put the address of the string's head in
 815:000 | DONE cmt | na 16 16 |        |             |                 ; TOS and NOS
 816:000 | DONE ins | na 16 16 | 0052a7 | a4 18       |                 ldy.d 000018         
 817:000 | DONE ins | na 16 16 | 0052a9 | 94 00       |                 sty.dx 00            ( addr addr )
 818:000 | DONE wsp | na 16 16 |        |             |
 819:000 | DONE cmt | na 16 16 |        |             |                 ; add the address of the string's end, which is PAD
 820:000 | DONE ins | na 16 16 | 0052ab | 20 55 5c    |                 jsr 005c55           ( addr addr pad )
 821:000 | DONE wsp | na 16 16 |        |             |
 822:000 | DONE ins | na 16 16 | 0052ae | 38          |                 sec                  
 823:000 | DONE ins | na 16 16 | 0052af | 98          |                 tya                  
 824:000 | DONE ins | na 16 16 | 0052b0 | f5 00       |                 sbc.dx 00            pad - addr is the length of the string
 825:000 | DONE ins | na 16 16 | 0052b2 | a8          |                 tay                  ( addr addr n )
 826:000 | DONE wsp | na 16 16 |        |             |
 827:000 | DONE ins | na 16 16 | 0052b3 | e8          |                 inx                  NIP
 828:000 | DONE ins | na 16 16 | 0052b4 | e8          |                 inx                  
 829:000 | DONE wsp | na 16 16 |        |             |
 830:000 | DONE lbl | na 16 16 | 0052b5 |             | z_numbermore                         
 830:001 | DONE ins | na 16 16 | 0052b5 | 60          |                 rts                  
 831:000 | DONE wsp | na 16 16 |        |             |
 832:000 | DONE wsp | na 16 16 |        |             |
 833:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 834:000 | DONE cmt | na 16 16 |        |             | ; #S "HASHS" / "NUMBER SIGN" ( ud -- ud ) X bytes / X cycles
 835:000 | DONE cmt | na 16 16 |        |             | ; Completely convert number for pictured numerical output. Based on
 836:000 | DONE cmt | na 16 16 |        |             | ; https://github.com/philburk/pforth/blob/master/fth/system.fth
 837:000 | DONE cmt | na 16 16 |        |             | ; Original Forth code  BEGIN # 2DUP OR 0= UNTIL
 838:000 | DONE lbl | na 16 16 | 0052b6 |             | xt_hashs                             
 839:000 | DONE dir | na 16 16 |        |             |         .!a16                        
 840:000 | DONE lbl | na 16 16 | 0052b6 |             | hashs_loop                           
 841:000 | DONE cmt | na 16 16 |        |             |                 ; covert a single number ("#")
 842:000 | DONE ins | na 16 16 | 0052b6 | 20 8c 52    |                 jsr 00528c           ( ud -- ud )
 843:000 | DONE wsp | na 16 16 |        |             |
 844:000 | DONE cmt | na 16 16 |        |             |                 ; stop when the double-celled number on the TOS is zero
 845:000 | DONE ins | na 16 16 | 0052b9 | 98          |                 tya                  
 846:000 | DONE ins | na 16 16 | 0052ba | 15 00       |                 ora.dx 00            
 847:000 | DONE ins | na 16 16 | 0052bc | d0 f8       |                 bne 0052b6           
 848:000 | DONE wsp | na 16 16 |        |             |
 849:000 | DONE lbl | na 16 16 | 0052be |             | z_hashs                              
 849:001 | DONE ins | na 16 16 | 0052be | 60          |                 rts                  
 850:000 | DONE wsp | na 16 16 |        |             |
 851:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 852:000 | DONE cmt | na 16 16 |        |             | ; ? "QUESTION" ( addr -- ) X bytes / X cycles
 853:000 | DONE cmt | na 16 16 |        |             | ; Print content of a variable. This is used interactively and humans are
 854:000 | DONE cmt | na 16 16 |        |             | ; slow, so we just go for the subroutine jumps to keep it short
 855:000 | DONE lbl | na 16 16 | 0052bf |             | xt_question                          
 856:000 | DONE ins | na 16 16 | 0052bf | 20 da 52    |                 jsr 0052da           
 857:000 | DONE ins | na 16 16 | 0052c2 | 20 da 51    |                 jsr 0051da           
 858:000 | DONE wsp | na 16 16 |        |             |
 859:000 | DONE lbl | na 16 16 | 0052c5 |             | z_question                           
 859:001 | DONE ins | na 16 16 | 0052c5 | 60          |                 rts                  
 860:000 | DONE wsp | na 16 16 |        |             |
 861:000 | DONE wsp | na 16 16 |        |             |
 862:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 863:000 | DONE cmt | na 16 16 |        |             | ; QDUP ( n -- 0 | n n ) X bytes / X cycles
 864:000 | DONE cmt | na 16 16 |        |             | ; If top element on Data Stack is not zero, duplicate it
 865:000 | DONE lbl | na 16 16 | 0052c6 |             | xt_qdup                              
 866:000 | DONE ins | na 16 16 | 0052c6 | 98          |                 tya                  
 867:000 | DONE ins | na 16 16 | 0052c7 | f0 04       |                 beq 0052cd           
 868:000 | DONE wsp | na 16 16 |        |             |
 869:000 | DONE ins | na 16 16 | 0052c9 | ca          |                 dex                  
 870:000 | DONE ins | na 16 16 | 0052ca | ca          |                 dex                  
 871:000 | DONE ins | na 16 16 | 0052cb | 94 00       |                 sty.dx 00            
 872:000 | DONE wsp | na 16 16 |        |             |
 873:000 | DONE lbl | na 16 16 | 0052cd |             | z_qdup                               
 873:001 | DONE ins | na 16 16 | 0052cd | 60          |                 rts                  
 874:000 | DONE wsp | na 16 16 |        |             |
 875:000 | DONE wsp | na 16 16 |        |             |
 876:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 877:000 | DONE cmt | na 16 16 |        |             | ; ! "STORE" ( n addr -- ) 9 bytes / X cycles
 878:000 | DONE cmt | na 16 16 |        |             | ; Save value at designated memory location
 879:000 | DONE lbl | na 16 16 | 0052ce |             | xt_store                             
 880:000 | DONE dir | na 16 16 |        |             |         .!a16                        
 881:000 | DONE ins | na 16 16 | 0052ce | b5 00       |                 lda.dx 00            NOS has value
 882:000 | DONE ins | na 16 16 | 0052d0 | 99 00 00    |                 sta.y 0000           
 883:000 | DONE wsp | na 16 16 |        |             |
 884:000 | DONE ins | na 16 16 | 0052d3 | b4 02       |                 ldy.dx 02            
 885:000 | DONE ins | na 16 16 | 0052d5 | e8          |                 inx                  
 886:000 | DONE ins | na 16 16 | 0052d6 | e8          |                 inx                  
 887:000 | DONE ins | na 16 16 | 0052d7 | e8          |                 inx                  
 888:000 | DONE ins | na 16 16 | 0052d8 | e8          |                 inx                  
 889:000 | DONE wsp | na 16 16 |        |             |
 890:000 | DONE lbl | na 16 16 | 0052d9 |             | z_store                              
 890:001 | DONE ins | na 16 16 | 0052d9 | 60          |                 rts                  
 891:000 | DONE wsp | na 16 16 |        |             |
 892:000 | DONE wsp | na 16 16 |        |             |
 893:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 894:000 | DONE cmt | na 16 16 |        |             | ; @ "FETCH" ( addr -- n ) 4 bytes / 7-8 cycles
 895:000 | DONE cmt | na 16 16 |        |             | ; Get one cell (16 bit) value from given address
 896:000 | DONE lbl | na 16 16 | 0052da |             | xt_fetch                             
 897:000 | DONE ins | na 16 16 | 0052da | b9 00 00    |                 lda.y 0000           
 898:000 | DONE ins | na 16 16 | 0052dd | a8          |                 tay                  
 899:000 | DONE wsp | na 16 16 |        |             |
 900:000 | DONE lbl | na 16 16 | 0052de |             | z_fetch                              
 900:001 | DONE ins | na 16 16 | 0052de | 60          |                 rts                  
 901:000 | DONE wsp | na 16 16 |        |             |
 902:000 | DONE wsp | na 16 16 |        |             |
 903:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 904:000 | DONE cmt | na 16 16 |        |             | ; (+LOOP) "PARENS-PLUSLOOP" ( n -- ) X bytes / X cycles
 905:000 | DONE cmt | na 16 16 |        |             | ; Runtime compile for counted loop control. This is used for both +LOOP and
 906:000 | DONE cmt | na 16 16 |        |             | ; LOOP which are defined at high level. Note we use a fudge factor for loop
 907:000 | DONE cmt | na 16 16 |        |             | ; control so we can test with the Overflow Flag. See (DO) for details. This is
 908:000 | DONE cmt | na 16 16 |        |             | ; Native Compile. The step value is TOS in the loop
 909:000 | DONE lbl | na 16 16 | 0052df |             | xt_pploop                            
 910:000 | DONE dir | na 16 16 |        |             |         .!a16                        
 911:000 | DONE cmt | na 16 16 |        |             |                 ; add step to index
 912:000 | DONE ins | na 16 16 | 0052df | 98          |                 tya                  step
 913:000 | DONE ins | na 16 16 | 0052e0 | b8          |                 clv                  this is used for loop control
 914:000 | DONE ins | na 16 16 | 0052e1 | 18          |                 clc                  
 915:000 | DONE ins | na 16 16 | 0052e2 | 63 01       |                 adc.s 01             add index from top of R
 916:000 | DONE ins | na 16 16 | 0052e4 | 83 01       |                 sta.s 01             store it back on top of R
 917:000 | DONE wsp | na 16 16 |        |             |
 918:000 | DONE cmt | na 16 16 |        |             |                 ; dump step from TOS
 919:000 | DONE ins | na 16 16 | 0052e6 | b4 00       |                 ldy.dx 00            
 920:000 | DONE ins | na 16 16 | 0052e8 | e8          |                 inx                  
 921:000 | DONE ins | na 16 16 | 0052e9 | e8          |                 inx                  
 922:000 | DONE wsp | na 16 16 |        |             |
 923:000 | DONE cmt | na 16 16 |        |             |                 ; if the V flag is set, we're done looping and continue after
 924:000 | DONE cmt | na 16 16 |        |             |                 ; the +LOOP instruction
 925:000 | DONE ins | na 16 16 | 0052ea | 70 03       |                 bvs 0052ef           
 926:000 | DONE wsp | na 16 16 |        |             |
 927:000 | DONE lbl | na 16 16 | 0052ec |             | pploop_jmp                           
 928:000 | DONE cmt | na 16 16 |        |             |                 ; This is why this routine must be natively compiled: We compile
 929:000 | DONE cmt | na 16 16 |        |             |                 ; the opcode for jump here without an address to go to, which is
 930:000 | DONE cmt | na 16 16 |        |             |                 ; added by the next instruction of LOOP (or +LOOP) during
 931:000 | DONE cmt | na 16 16 |        |             |                 ; compile time
 932:000 | DONE dir | na 16 16 | 0052ec | (1 bytes)   |         .byte 4C                     
 932:000 | DONE dir | na 16 16 |        |             |                 4c                       --  L
 933:000 | DONE wsp | na 16 16 |        |             |
 934:000 | DONE lbl | na 16 16 | 0052ed |             | z_pploop                             
 934:001 | DONE ins | na 16 16 | 0052ed | 60          |                 rts                  never reached
 935:000 | DONE wsp | na 16 16 |        |             |
 936:000 | DONE wsp | na 16 16 |        |             |
 937:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 938:000 | DONE cmt | na 16 16 |        |             | ; (?DO) "PARENS-QUESTION-DO" ( -- ) X bytes / X cycles
 939:000 | DONE cmt | na 16 16 |        |             | ; Runtime routine for ?DO. This contains the parts required for the question
 940:000 | DONE cmt | na 16 16 |        |             | ; mark and then drops through to (DO). This must be native compile
 941:000 | DONE lbl | na 16 16 | 0052ee |             | xt_pqdo                              
 942:000 | DONE cmt | na 16 16 |        |             |                 ; See if TOS and NOS are equal
 943:000 | DONE cmt | na 16 16 |        |             |                 ; TODO move this to assembler for speed
 944:000 | DONE ins | na 16 16 | 0052ee | 20 16 54    |                 jsr 005416           
 945:000 | DONE ins | na 16 16 | 0052f1 | 20 85 53    |                 jsr 005385           now ( n1 n2 f )
 946:000 | DONE wsp | na 16 16 |        |             |
 947:000 | DONE ins | na 16 16 | 0052f4 | a8          |                 tay                  force flag check
 948:000 | DONE ins | na 16 16 | 0052f5 | f0 00       |                 beq 0052f7           
 949:000 | DONE wsp | na 16 16 |        |             |
 950:000 | DONE lbl | na 16 16 | 0052f7 |             | pqdo_done                            
 951:000 | DONE cmt | na 16 16 |        |             |                 ; get ready to drop to (DO)
 952:000 | DONE ins | na 16 16 | 0052f7 | b4 00       |                 ldy.dx 00            drop flag from EQUAL
 953:000 | DONE ins | na 16 16 | 0052f9 | e8          |                 inx                  
 954:000 | DONE ins | na 16 16 | 0052fa | e8          |                 inx                  drop through to (DO)
 955:000 | DONE wsp | na 16 16 |        |             |
 956:000 | DONE wsp | na 16 16 |        |             |
 957:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 958:000 | DONE cmt | na 16 16 |        |             | ; (DO) "PARENS-DO" ( limit start -- ; R: -- limit start ) X bytes / X cycles
 959:000 | DONE cmt | na 16 16 |        |             | ; Runtime routine for DO loop. Note that ANSI loops quit when the boundry of
 960:000 | DONE cmt | na 16 16 |        |             | ; limit-1 and limit is reached, a different mechanism than the FIG Forth loop
 961:000 | DONE cmt | na 16 16 |        |             | ; (you can see which version you have by running a loop with start and limit as
 962:000 | DONE cmt | na 16 16 |        |             | ; the same value, for instance 0 0 DO -- these will walk through the complete
 963:000 | DONE cmt | na 16 16 |        |             | ; number space). This is why there is ?DO, which you should use. We use a "fudge
 964:000 | DONE cmt | na 16 16 |        |             | ; factor" for the limit that makes the Overflow Flag trip when it is reached;
 965:000 | DONE cmt | na 16 16 |        |             | ; see http://forum.6502.org/viewtopic.php?f=9&t=2> for further discussion of
 966:000 | DONE cmt | na 16 16 |        |             | ; this. The source given there for this idea is Laxen & Perry F83. This routine
 967:000 | DONE cmt | na 16 16 |        |             | ; must be native compile (and should be anyway for speed).
 968:000 | DONE lbl | na 16 16 | 0052fb |             | xt_pdo                               
 969:000 | DONE dir | na 16 16 |        |             |         .!a16                        
 970:000 | DONE cmt | na 16 16 |        |             |                 ; Create fudge factor (fufa) by subtracting the limit from
 971:000 | DONE cmt | na 16 16 |        |             |                 ; $8000, the number that will trip the overflow flag
 972:000 | DONE ins | na 16 16 | 0052fb | 38          |                 sec                  
 973:000 | DONE ins | na 16 16 | 0052fc | a9 00 80    |                 lda.# 8000           
 974:000 | DONE ins | na 16 16 | 0052ff | f5 00       |                 sbc.dx 00            limit is NOS
 975:000 | DONE ins | na 16 16 | 005301 | 95 00       |                 sta.dx 00            save fufa for later use as NOS
 976:000 | DONE ins | na 16 16 | 005303 | 48          |                 pha                  we use fufa instead of limit on R
 977:000 | DONE wsp | na 16 16 |        |             |
 978:000 | DONE cmt | na 16 16 |        |             |                 ; Index is fufa plus original index
 979:000 | DONE ins | na 16 16 | 005304 | 18          |                 clc                  
 980:000 | DONE ins | na 16 16 | 005305 | 98          |                 tya                  index is TOS
 981:000 | DONE ins | na 16 16 | 005306 | 75 00       |                 adc.dx 00            add fufa
 982:000 | DONE ins | na 16 16 | 005308 | 48          |                 pha                  
 983:000 | DONE wsp | na 16 16 |        |             |
 984:000 | DONE cmt | na 16 16 |        |             |                 ; clean up
 985:000 | DONE ins | na 16 16 | 005309 | e8          |                 inx                  
 986:000 | DONE ins | na 16 16 | 00530a | e8          |                 inx                  
 987:000 | DONE ins | na 16 16 | 00530b | e8          |                 inx                  
 988:000 | DONE ins | na 16 16 | 00530c | e8          |                 inx                  
 989:000 | DONE wsp | na 16 16 |        |             |
 990:000 | DONE lbl | na 16 16 | 00530d |             | z_pqdo                               
 991:000 | DONE lbl | na 16 16 | 00530d |             | z_pdo                                
 991:001 | DONE ins | na 16 16 | 00530d | 60          |                 rts                  
 992:000 | DONE wsp | na 16 16 |        |             |
 993:000 | DONE wsp | na 16 16 |        |             |
 994:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
 995:000 | DONE cmt | na 16 16 |        |             | ; ['] "BRACKET-TICK" ( -- ) X bytes / X cycles
 996:000 | DONE cmt | na 16 16 |        |             | ; Store xt of following word during compilation
 997:000 | DONE lbl | na 16 16 | 00530e |             | xt_brackettick                       
 998:000 | DONE ins | na 16 16 | 00530e | 20 71 54    |                 jsr 005471           
 999:000 | DONE ins | na 16 16 | 005311 | 20 cf 5a    |                 jsr 005acf           
1000:000 | DONE wsp | na 16 16 |        |             |
1001:000 | DONE lbl | na 16 16 | 005314 |             | z_brackettick                        
1001:001 | DONE ins | na 16 16 | 005314 | 60          |                 rts                  
1002:000 | DONE wsp | na 16 16 |        |             |
1003:000 | DONE wsp | na 16 16 |        |             |
1004:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1005:000 | DONE cmt | na 16 16 |        |             | ; [ "LEFTBRACKET" ( -- ) X bytes / X cycles
1006:000 | DONE cmt | na 16 16 |        |             | ; Enter the interpretation state. This is an immediate, compile-only word
1007:000 | DONE lbl | na 16 16 | 005315 |             | xt_leftbracket                       
1008:000 | DONE ins | na 16 16 | 005315 | 64 14       |                 stz.d 000014         
1009:000 | DONE lbl | na 16 16 | 005317 |             | z_leftbracket                        
1009:001 | DONE ins | na 16 16 | 005317 | 60          |                 rts                  
1010:000 | DONE wsp | na 16 16 |        |             |
1011:000 | DONE wsp | na 16 16 |        |             |
1012:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1013:000 | DONE cmt | na 16 16 |        |             | ; ] "RIGHTBRACKET" ( -- ) X bytes / X cycles
1014:000 | DONE cmt | na 16 16 |        |             | ; Enter the compile state. In theory, we should be able to get away with
1015:000 | DONE cmt | na 16 16 |        |             | ; a simple INC.A, but this is more error tolerant. For obvious reasons, this
1016:000 | DONE cmt | na 16 16 |        |             | ; cannot be COMPILE-ONLY, and native compile doesn't make much sense either
1017:000 | DONE lbl | na 16 16 | 005318 |             | xt_rightbracket                      
1018:000 | DONE ins | na 16 16 | 005318 | a9 01 00    |                 lda.# 0001           
1019:000 | DONE ins | na 16 16 | 00531b | 85 14       |                 sta.d 000014         
1020:000 | DONE wsp | na 16 16 |        |             |
1021:000 | DONE lbl | na 16 16 | 00531d |             | z_rightbracket                       
1021:001 | DONE ins | na 16 16 | 00531d | 60          |                 rts                  
1022:000 | DONE wsp | na 16 16 |        |             |
1023:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1024:000 | DONE cmt | na 16 16 |        |             | ; [CHAR] "BRACKET-CHAR" ( "c" -- ) X bytes / X cycles
1025:000 | DONE cmt | na 16 16 |        |             | ; At compile time, compile the ASCII value of a character as a literal
1026:000 | DONE cmt | na 16 16 |        |             | ; This is an immediate, compile-only word. A definition given in
1027:000 | DONE cmt | na 16 16 |        |             | ; http://forth-standard.org/standard/implement is
1028:000 | DONE cmt | na 16 16 |        |             | ; : [CHAR] CHAR POSTPONE LITERAL ; IMMEDIATE
1029:000 | DONE cmt | na 16 16 |        |             | ; TODO decide if this is worth unrolling
1030:000 | DONE lbl | na 16 16 | 00531e |             | xt_bracketchar                       
1031:000 | DONE ins | na 16 16 | 00531e | 20 24 56    |                 jsr 005624           
1032:000 | DONE ins | na 16 16 | 005321 | 20 cf 5a    |                 jsr 005acf           
1033:000 | DONE wsp | na 16 16 |        |             |
1034:000 | DONE lbl | na 16 16 | 005324 |             | z_bracketchar                        
1034:001 | DONE ins | na 16 16 | 005324 | 60          |                 rts                  
1035:000 | DONE wsp | na 16 16 |        |             |
1036:000 | DONE wsp | na 16 16 |        |             |
1037:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1038:000 | DONE cmt | na 16 16 |        |             | ; \ "BACKSLASH" ( -- ) 4 bytes / X cycles
1039:000 | DONE cmt | na 16 16 |        |             | ; Ignore rest of line as comment
1040:000 | DONE lbl | na 16 16 | 005325 |             | xt_backslash                         
1041:000 | DONE dir | na 16 16 |        |             |         .!a16                        
1042:000 | DONE cmt | na 16 16 |        |             |                 ; Advance >IN to end of the line
1043:000 | DONE ins | na 16 16 | 005325 | a5 0a       |                 lda.d 00000a         
1044:000 | DONE ins | na 16 16 | 005327 | 85 0c       |                 sta.d 00000c         
1045:000 | DONE wsp | na 16 16 |        |             |
1046:000 | DONE lbl | na 16 16 | 005329 |             | z_backslash                          
1046:001 | DONE ins | na 16 16 | 005329 | 60          |                 rts                  
1047:000 | DONE wsp | na 16 16 |        |             |
1048:000 | DONE wsp | na 16 16 |        |             |
1049:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1050:000 | DONE cmt | na 16 16 |        |             | ; + "PLUS" ( n m -- n+m ) 7 bytes / X cycles
1051:000 | DONE cmt | na 16 16 |        |             | ; Add TOS and NOS
1052:000 | DONE lbl | na 16 16 | 00532a |             | xt_plus                              
1053:000 | DONE dir | na 16 16 |        |             |         .!a16                        
1054:000 | DONE ins | na 16 16 | 00532a | 98          |                 tya                  
1055:000 | DONE ins | na 16 16 | 00532b | 18          |                 clc                  
1056:000 | DONE ins | na 16 16 | 00532c | 75 00       |                 adc.dx 00            
1057:000 | DONE ins | na 16 16 | 00532e | a8          |                 tay                  
1058:000 | DONE ins | na 16 16 | 00532f | e8          |                 inx                  
1059:000 | DONE ins | na 16 16 | 005330 | e8          |                 inx                  
1060:000 | DONE wsp | na 16 16 |        |             |
1061:000 | DONE lbl | na 16 16 | 005331 |             | z_plus                               
1061:001 | DONE ins | na 16 16 | 005331 | 60          |                 rts                  
1062:000 | DONE wsp | na 16 16 |        |             |
1063:000 | DONE wsp | na 16 16 |        |             |
1064:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1065:000 | DONE cmt | na 16 16 |        |             | ; LOOP ( -- ) X bytes / X cycles
1066:000 | DONE cmt | na 16 16 |        |             | ; Compile-time part of LOOP. This does nothing more but push
1067:000 | DONE cmt | na 16 16 |        |             | ; 01 on the stack and then call +LOOP. In Forth, this is
1068:000 | DONE cmt | na 16 16 |        |             | ; POSTPONE 1 POSTPONE (+LOOP) , POSTPONE UNLOOP ; IMMEDIATE
1069:000 | DONE cmt | na 16 16 |        |             | ; COMPILE-ONLY  Drops through to +LOOP
1070:000 | DONE lbl | na 16 16 | 005332 |             | xt_loop                              
1071:000 | DONE cmt | na 16 16 |        |             |                 ; have the finished word put 0001 on the Data Stack
1072:000 | DONE ins | na 16 16 | 005332 | f4 e6 53    |                 phe.# 0053e6         
1073:000 | DONE ins | na 16 16 | 005335 | 20 00 6a    |                 jsr 006a00           drops through to +LOOP
1074:000 | DONE wsp | na 16 16 |        |             |
1075:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1076:000 | DONE cmt | na 16 16 |        |             | ; +LOOP ( addr -- ) X bytes / X cycles
1077:000 | DONE cmt | na 16 16 |        |             | ; Compile-time part of +LOOP, also used for LOOP. is usually realized in Forth
1078:000 | DONE cmt | na 16 16 |        |             | ; as  : +LOOP POSTPONE (+LOOP) , POSTPONE UNLOOP ; IMMEDIATE COMPILE-ONLY  Note
1079:000 | DONE cmt | na 16 16 |        |             | ; that LOOP uses this routine as well. We jump here with the address for looping
1080:000 | DONE cmt | na 16 16 |        |             | ; as TOS, and the address for aborting the loop (LEAVE) as the second
1081:000 | DONE cmt | na 16 16 |        |             | ; double-byte entry on the Return Stack (see DO and loops.txt for details).
1082:000 | DONE lbl | na 16 16 | 005338 |             | xt_ploop                             
1083:000 | DONE cmt | na 16 16 |        |             |                 ; compile (+LOOP) - use COMPILE, because this has to be natively
1084:000 | DONE cmt | na 16 16 |        |             |                 ; compiled
1085:000 | DONE ins | na 16 16 | 005338 | ca          |                 dex                  
1086:000 | DONE ins | na 16 16 | 005339 | ca          |                 dex                  
1087:000 | DONE ins | na 16 16 | 00533a | 94 00       |                 sty.dx 00            
1088:000 | DONE ins | na 16 16 | 00533c | a0 df 52    |                 ldy.# 0052df         
1089:000 | DONE ins | na 16 16 | 00533f | 20 83 56    |                 jsr 005683           
1090:000 | DONE wsp | na 16 16 |        |             |
1091:000 | DONE cmt | na 16 16 |        |             |                 ; The address we need to loop back to is TOS
1092:000 | DONE ins | na 16 16 | 005342 | 20 45 52    |                 jsr 005245           
1093:000 | DONE wsp | na 16 16 |        |             |
1094:000 | DONE cmt | na 16 16 |        |             |                 ; Now compile an UNLOOP for when we're all done
1095:000 | DONE ins | na 16 16 | 005345 | ca          |                 dex                  
1096:000 | DONE ins | na 16 16 | 005346 | ca          |                 dex                  
1097:000 | DONE ins | na 16 16 | 005347 | 94 00       |                 sty.dx 00            
1098:000 | DONE ins | na 16 16 | 005349 | a0 e3 5f    |                 ldy.# 005fe3         
1099:000 | DONE ins | na 16 16 | 00534c | 20 83 56    |                 jsr 005683           
1100:000 | DONE wsp | na 16 16 |        |             |
1101:000 | DONE cmt | na 16 16 |        |             |                 ; Complete the compile of DO (or ?DO) by filling the hole they
1102:000 | DONE cmt | na 16 16 |        |             |                 ; left with the current address. This is TOS
1103:000 | DONE ins | na 16 16 | 00534f | a5 00       |                 lda.d 000000         we need CP-1 for RTS calculation
1104:000 | DONE ins | na 16 16 | 005351 | 3a          |                 dec.a                
1105:000 | DONE ins | na 16 16 | 005352 | 99 00 00    |                 sta.y 0000           
1106:000 | DONE wsp | na 16 16 |        |             |
1107:000 | DONE ins | na 16 16 | 005355 | b4 00       |                 ldy.dx 00            
1108:000 | DONE ins | na 16 16 | 005357 | e8          |                 inx                  
1109:000 | DONE ins | na 16 16 | 005358 | e8          |                 inx                  
1110:000 | DONE wsp | na 16 16 |        |             |
1111:000 | DONE lbl | na 16 16 | 005359 |             | z_loop                               
1112:000 | DONE lbl | na 16 16 | 005359 |             | z_ploop                              
1112:001 | DONE ins | na 16 16 | 005359 | 60          |                 rts                  
1113:000 | DONE wsp | na 16 16 |        |             |
1114:000 | DONE wsp | na 16 16 |        |             |
1115:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1116:000 | DONE cmt | na 16 16 |        |             | ; - "MINUS" ( n m -- n-m ) 10 bytes / X cycles
1117:000 | DONE cmt | na 16 16 |        |             | ; Subtract NOS from TOS
1118:000 | DONE lbl | na 16 16 | 00535a |             | xt_minus                             
1119:000 | DONE dir | na 16 16 |        |             |         .!a16                        
1120:000 | DONE ins | na 16 16 | 00535a | 98          |                 tya                  
1121:000 | DONE ins | na 16 16 | 00535b | 49 ff ff    |                 eor.# 0ffff          
1122:000 | DONE wsp | na 16 16 |        |             |
1123:000 | DONE ins | na 16 16 | 00535e | 38          |                 sec                  not CLC
1124:000 | DONE ins | na 16 16 | 00535f | 75 00       |                 adc.dx 00            
1125:000 | DONE wsp | na 16 16 |        |             |
1126:000 | DONE ins | na 16 16 | 005361 | a8          |                 tay                  
1127:000 | DONE ins | na 16 16 | 005362 | e8          |                 inx                  
1128:000 | DONE ins | na 16 16 | 005363 | e8          |                 inx                  
1129:000 | DONE wsp | na 16 16 |        |             |
1130:000 | DONE lbl | na 16 16 | 005364 |             | z_minus                              
1130:001 | DONE ins | na 16 16 | 005364 | 60          |                 rts                  
1131:000 | DONE wsp | na 16 16 |        |             |
1132:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1133:000 | DONE cmt | na 16 16 |        |             | ; -ROT ( a b c -- c a b )  X bytes / X cycles
1134:000 | DONE cmt | na 16 16 |        |             | ; Rotate top three entries of Data Stack upwards
1135:000 | DONE lbl | na 16 16 | 005365 |             | xt_mrot                              
1136:000 | DONE dir | na 16 16 |        |             |         .!a16                        
1137:000 | DONE dir | na 16 16 |        |             |         .!xy16                       
1138:000 | DONE ins | na 16 16 | 005365 | b5 02       |                 lda.dx 02            save a
1139:000 | DONE ins | na 16 16 | 005367 | 94 02       |                 sty.dx 02            move c to 3OS
1140:000 | DONE ins | na 16 16 | 005369 | b4 00       |                 ldy.dx 00            move b to TOS
1141:000 | DONE ins | na 16 16 | 00536b | 95 00       |                 sta.dx 00            save a as NOS
1142:000 | DONE wsp | na 16 16 |        |             |
1143:000 | DONE lbl | na 16 16 | 00536d |             | z_mrot                               
1143:001 | DONE ins | na 16 16 | 00536d | 60          |                 rts                  
1144:000 | DONE wsp | na 16 16 |        |             |
1145:000 | DONE wsp | na 16 16 |        |             |
1146:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1147:000 | DONE cmt | na 16 16 |        |             | ; -TRAILING ( addr u -- addr u ) X bytes / X cycles
1148:000 | DONE cmt | na 16 16 |        |             | ; Remove any trailing blanks. Uses tmp3
1149:000 | DONE lbl | na 16 16 | 00536e |             | xt_dtrailing                         
1150:000 | DONE cmt | na 16 16 |        |             |                 ; if u is zero, just return string
1151:000 | DONE ins | na 16 16 | 00536e | 98          |                 tya                  force flag check
1152:000 | DONE ins | na 16 16 | 00536f | f0 13       |                 beq 005384           
1153:000 | DONE wsp | na 16 16 |        |             |
1154:000 | DONE ins | na 16 16 | 005371 | b5 00       |                 lda.dx 00            
1155:000 | DONE ins | na 16 16 | 005373 | 85 20       |                 sta.d 000020         
1156:000 | DONE ins | na 16 16 | 005375 | 88          |                 dey                  convert length to index
1157:000 | DONE ins | na 16 16 | 005376 | e2 20       |                 sep 20               
1157:001 | DONE ctl | na  8 16 |        |             |         .!a8
1158:000 | DONE wsp | na  8 16 |        |             |
1159:000 | DONE lbl | na  8 16 | 005378 |             | dtrailing_loop                       
1160:000 | DONE ins | na  8 16 | 005378 | b1 20       |                 lda.diy 000020       
1161:000 | DONE ins | na  8 16 | 00537a | c9 20       |                 cmp.# 20             
1162:000 | DONE ins | na  8 16 | 00537c | d0 03       |                 bne 005381           
1163:000 | DONE ins | na  8 16 | 00537e | 88          |                 dey                  
1164:000 | DONE ins | na  8 16 | 00537f | 10 f7       |                 bpl 005378           fall through when done
1165:000 | DONE wsp | na  8 16 |        |             |
1166:000 | DONE lbl | na  8 16 | 005381 |             | dtrailing_done                       
1167:000 | DONE ins | na  8 16 | 005381 | c2 20       |                 rep 20               
1167:001 | DONE ctl | na 16 16 |        |             |         .!a16
1168:000 | DONE ins | na 16 16 | 005383 | c8          |                 iny                  convert index to length
1169:000 | DONE wsp | na 16 16 |        |             |
1170:000 | DONE lbl | na 16 16 | 005384 |             | z_dtrailing                          
1170:001 | DONE ins | na 16 16 | 005384 | 60          |                 rts                  
1171:000 | DONE wsp | na 16 16 |        |             |
1172:000 | DONE wsp | na 16 16 |        |             |
1173:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1174:000 | DONE cmt | na 16 16 |        |             | ; = "EQUAL" ( n m -- f ) 11 bytes / 18-20 cycles
1175:000 | DONE cmt | na 16 16 |        |             | ; See if TOS and NOS are the same
1176:000 | DONE lbl | na 16 16 | 005385 |             | xt_equal                             
1177:000 | DONE ins | na 16 16 | 005385 | 98          |                 tya                  
1178:000 | DONE ins | na 16 16 | 005386 | a0 00 00    |                 ldy.# 0000           default value is false
1179:000 | DONE wsp | na 16 16 |        |             |
1180:000 | DONE ins | na 16 16 | 005389 | d5 00       |                 cmp.dx 00            
1181:000 | DONE ins | na 16 16 | 00538b | d0 01       |                 bne 00538e           
1182:000 | DONE ins | na 16 16 | 00538d | 88          |                 dey                  wraps to 0FFFF (true)
1183:000 | DONE wsp | na 16 16 |        |             |
1184:000 | DONE lbl | na 16 16 | 00538e |             | equal_not                            
1185:000 | DONE ins | na 16 16 | 00538e | e8          |                 inx                  
1186:000 | DONE ins | na 16 16 | 00538f | e8          |                 inx                  
1187:000 | DONE wsp | na 16 16 |        |             |
1188:000 | DONE lbl | na 16 16 | 005390 |             | z_equal                              
1188:001 | DONE ins | na 16 16 | 005390 | 60          |                 rts                  
1189:000 | DONE wsp | na 16 16 |        |             |
1190:000 | DONE wsp | na 16 16 |        |             |
1191:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1192:000 | DONE cmt | na 16 16 |        |             | ; 0 "ZERO" ( -- 0 ) 7 bytes / 12 cycles
1193:000 | DONE cmt | na 16 16 |        |             | ; Pushes the number 0000 on the Data Stack
1194:000 | DONE lbl | na 16 16 | 005391 |             | xt_zero                              
1195:000 | DONE dir | na 16 16 |        |             |         .!xy16                       
1196:000 | DONE ins | na 16 16 | 005391 | ca          |                 dex                  
1197:000 | DONE ins | na 16 16 | 005392 | ca          |                 dex                  
1198:000 | DONE ins | na 16 16 | 005393 | 94 00       |                 sty.dx 00            
1199:000 | DONE ins | na 16 16 | 005395 | a0 00 00    |                 ldy.# 0000           
1200:000 | DONE wsp | na 16 16 |        |             |
1201:000 | DONE lbl | na 16 16 | 005398 |             | z_zero                               
1201:001 | DONE ins | na 16 16 | 005398 | 60          |                 rts                  
1202:000 | DONE wsp | na 16 16 |        |             |
1203:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1204:000 | DONE cmt | na 16 16 |        |             | ; 0= "ZERO-EQUAL" ( n -- f ) X bytes / X cycles
1205:000 | DONE cmt | na 16 16 |        |             | ; Return the true flag if TOS is zero
1206:000 | DONE lbl | na 16 16 | 005399 |             | xt_zero-equal                        
1207:000 | DONE dir | na 16 16 |        |             |         .!a16                        
1208:000 | DONE ins | na 16 16 | 005399 | 98          |                 tya                  force flag check
1209:000 | DONE ins | na 16 16 | 00539a | d0 05       |                 bne 0053a1           
1210:000 | DONE wsp | na 16 16 |        |             |
1211:000 | DONE ins | na 16 16 | 00539c | a0 ff ff    |                 ldy.# 0ffff          
1212:000 | DONE ins | na 16 16 | 00539f | 80 03       |                 bra 0053a4           
1213:000 | DONE lbl | na 16 16 | 0053a1 |             | ze_not_zero                          
1214:000 | DONE ins | na 16 16 | 0053a1 | a0 00 00    |                 ldy.# 0000           
1215:000 | DONE wsp | na 16 16 |        |             |
1216:000 | DONE lbl | na 16 16 | 0053a4 |             | z_zero-equal                         
1216:001 | DONE ins | na 16 16 | 0053a4 | 60          |                 rts                  
1217:000 | DONE wsp | na 16 16 |        |             |
1218:000 | DONE wsp | na 16 16 |        |             |
1219:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1220:000 | DONE cmt | na 16 16 |        |             | ; 0< "ZERO-LESS" ( n -- f ) 11 bytes / X cycles
1221:000 | DONE cmt | na 16 16 |        |             | ; Return the true flag if TOS is less than zero
1222:000 | DONE lbl | na 16 16 | 0053a5 |             | xt_zero-less                         
1223:000 | DONE dir | na 16 16 |        |             |         .!a16                        
1224:000 | DONE ins | na 16 16 | 0053a5 | 98          |                 tya                  force flag check
1225:000 | DONE ins | na 16 16 | 0053a6 | 30 05       |                 bmi 0053ad           
1226:000 | DONE wsp | na 16 16 |        |             |
1227:000 | DONE ins | na 16 16 | 0053a8 | a0 00 00    |                 ldy.# 0000           
1228:000 | DONE ins | na 16 16 | 0053ab | 80 03       |                 bra 0053b0           
1229:000 | DONE wsp | na 16 16 |        |             |
1230:000 | DONE lbl | na 16 16 | 0053ad |             | zero-less-is-less                    
1231:000 | DONE ins | na 16 16 | 0053ad | a0 ff ff    |                 ldy.# 0ffff          
1232:000 | DONE wsp | na 16 16 |        |             |
1233:000 | DONE lbl | na 16 16 | 0053b0 |             | z_zero-less                          
1233:001 | DONE ins | na 16 16 | 0053b0 | 60          |                 rts                  
1234:000 | DONE wsp | na 16 16 |        |             |
1235:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1236:000 | DONE cmt | na 16 16 |        |             | ; 0<> "ZERO-NOTEQUAL" ( n -- f ) 11 bytes / X cycles
1237:000 | DONE cmt | na 16 16 |        |             | ; Return the true flag if TOS is not zero
1238:000 | DONE lbl | na 16 16 | 0053b1 |             | xt_zero-notequal                     
1239:000 | DONE dir | na 16 16 |        |             |         .!a16                        
1240:000 | DONE ins | na 16 16 | 0053b1 | 98          |                 tya                  force flag check
1241:000 | DONE ins | na 16 16 | 0053b2 | f0 05       |                 beq 0053b9           
1242:000 | DONE ins | na 16 16 | 0053b4 | a0 ff ff    |                 ldy.# 0ffff          
1243:000 | DONE ins | na 16 16 | 0053b7 | 80 03       |                 bra 0053bc           
1244:000 | DONE lbl | na 16 16 | 0053b9 |             | zne_is_zero                          
1245:000 | DONE ins | na 16 16 | 0053b9 | a0 00 00    |                 ldy.# 0000           
1246:000 | DONE lbl | na 16 16 | 0053bc |             | z_zero-notequal                      
1247:000 | DONE ins | na 16 16 | 0053bc | 60          |                 rts                  
1248:000 | DONE wsp | na 16 16 |        |             |
1249:000 | DONE wsp | na 16 16 |        |             |
1250:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1251:000 | DONE cmt | na 16 16 |        |             | ; 0> "ZERO-MORE" ( n -- f ) X bytes / X cycles
1252:000 | DONE cmt | na 16 16 |        |             | ; Return the true flag if TOS is more than zero
1253:000 | DONE lbl | na 16 16 | 0053bd |             | xt_zero-more                         
1254:000 | DONE dir | na 16 16 |        |             |         .!a16                        
1255:000 | DONE ins | na 16 16 | 0053bd | a9 00 00    |                 lda.# 0000           default is false
1256:000 | DONE wsp | na 16 16 |        |             |
1257:000 | DONE ins | na 16 16 | 0053c0 | 88          |                 dey                  
1258:000 | DONE ins | na 16 16 | 0053c1 | 10 02       |                 bpl 0053c5           was at least 1
1259:000 | DONE wsp | na 16 16 |        |             |
1260:000 | DONE ins | na 16 16 | 0053c3 | 80 01       |                 bra 0053c6           nope, stays false
1261:000 | DONE wsp | na 16 16 |        |             |
1262:000 | DONE lbl | na 16 16 | 0053c5 |             | zero-more_true                       
1263:000 | DONE ins | na 16 16 | 0053c5 | 3a          |                 dec.a                wraps to 0ffff, true
1264:000 | DONE lbl | na 16 16 | 0053c6 |             | zero-more_done                       
1265:000 | DONE ins | na 16 16 | 0053c6 | a8          |                 tay                  
1266:000 | DONE wsp | na 16 16 |        |             |
1267:000 | DONE lbl | na 16 16 | 0053c7 |             | z_zero-more                          
1267:001 | DONE ins | na 16 16 | 0053c7 | 60          |                 rts                  
1268:000 | DONE wsp | na 16 16 |        |             |
1269:000 | DONE wsp | na 16 16 |        |             |
1270:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1271:000 | DONE cmt | na 16 16 |        |             | ; 0BRANCH ( 0 | f -- ) X bytes / X cycles
1272:000 | DONE cmt | na 16 16 |        |             | ; Branch if TOS is zero. This exects the next two bytes to be the address of
1273:000 | DONE cmt | na 16 16 |        |             | ; where to branch to if the test fails. The code may not be natively compiled
1274:000 | DONE cmt | na 16 16 |        |             | ; because we need the return address provided by JSR's push to the Return Stack
1275:000 | DONE cmt | na 16 16 |        |             | ; This routine uses tmpbranch
1276:000 | DONE lbl | na 16 16 | 0053c8 |             | xt_zbranch                           
1277:000 | DONE dir | na 16 16 |        |             |         .!a16                        
1278:000 | DONE cmt | na 16 16 |        |             |                 ; encode subroutine jump to run time code
1279:000 | DONE ins | na 16 16 | 0053c8 | f4 cf 53    |                 phe.# 0053cf         
1280:000 | DONE ins | na 16 16 | 0053cb | 20 00 6a    |                 jsr 006a00           
1281:000 | DONE wsp | na 16 16 |        |             |
1282:000 | DONE lbl | na 16 16 | 0053ce |             | z_zbranch                            
1282:001 | DONE ins | na 16 16 | 0053ce | 60          |                 rts                  
1283:000 | DONE wsp | na 16 16 |        |             |
1284:000 | DONE lbl | na 16 16 | 0053cf |             | zbranch_rt                           
1285:000 | DONE cmt | na 16 16 |        |             |                 ; See if the flag is zero, which is the whole purpose of this
1286:000 | DONE cmt | na 16 16 |        |             |                 ; operation after all
1287:000 | DONE ins | na 16 16 | 0053cf | 98          |                 tya                  force flag check
1288:000 | DONE ins | na 16 16 | 0053d0 | f0 05       |                 beq 0053d7           flag is false (zero), so we branch
1289:000 | DONE wsp | na 16 16 |        |             |
1290:000 | DONE cmt | na 16 16 |        |             |                 ; Flag is TRUE, so we skip over the next two bytes. Put
1291:000 | DONE cmt | na 16 16 |        |             |                 ; differently, this is the part between IF and THEN
1292:000 | DONE ins | na 16 16 | 0053d2 | 68          |                 pla                  
1293:000 | DONE ins | na 16 16 | 0053d3 | 1a          |                 inc.a                
1294:000 | DONE ins | na 16 16 | 0053d4 | 1a          |                 inc.a                
1295:000 | DONE wsp | na 16 16 |        |             |
1296:000 | DONE ins | na 16 16 | 0053d5 | 80 09       |                 bra 0053e0           
1297:000 | DONE wsp | na 16 16 |        |             |
1298:000 | DONE lbl | na 16 16 | 0053d7 |             | zb_zero                              
1299:000 | DONE cmt | na 16 16 |        |             |                 ; Flag is FALSE, so we take the dump to the address given in the
1300:000 | DONE cmt | na 16 16 |        |             |                 ; next two bytes. We don't need Y anymore, so we can use it for
1301:000 | DONE cmt | na 16 16 |        |             |                 ; indexing
1302:000 | DONE ins | na 16 16 | 0053d7 | 68          |                 pla                  
1303:000 | DONE ins | na 16 16 | 0053d8 | 85 1a       |                 sta.d 00001a         
1304:000 | DONE ins | na 16 16 | 0053da | a0 01 00    |                 ldy.# 0001           
1305:000 | DONE ins | na 16 16 | 0053dd | b1 1a       |                 lda.diy 00001a       
1306:000 | DONE wsp | na 16 16 |        |             |
1307:000 | DONE cmt | na 16 16 |        |             |                 ; Subtract one from the address given becasue of the RTS
1308:000 | DONE cmt | na 16 16 |        |             |                 ; mechanics
1309:000 | DONE ins | na 16 16 | 0053df | 3a          |                 dec.a                
1310:000 | DONE wsp | na 16 16 |        |             |
1311:000 | DONE lbl | na 16 16 | 0053e0 |             | zb_done                              
1312:000 | DONE cmt | na 16 16 |        |             |                 ; One we or another, this is where we're going to jump to
1313:000 | DONE ins | na 16 16 | 0053e0 | 48          |                 pha                  
1314:000 | DONE wsp | na 16 16 |        |             |
1315:000 | DONE cmt | na 16 16 |        |             |                 ; Clean up the Data Stack and jump
1316:000 | DONE ins | na 16 16 | 0053e1 | b4 00       |                 ldy.dx 00            
1317:000 | DONE ins | na 16 16 | 0053e3 | e8          |                 inx                  
1318:000 | DONE ins | na 16 16 | 0053e4 | e8          |                 inx                  
1319:000 | DONE wsp | na 16 16 |        |             |
1320:000 | DONE ins | na 16 16 | 0053e5 | 60          |                 rts                  
1321:000 | DONE wsp | na 16 16 |        |             |
1322:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1323:000 | DONE cmt | na 16 16 |        |             | ; 1 "ONE" ( -- 1 ) 7 bytes / 12 cycles
1324:000 | DONE cmt | na 16 16 |        |             | ; Pushes the number 1 on the Data Stack
1325:000 | DONE lbl | na 16 16 | 0053e6 |             | xt_one                               
1326:000 | DONE dir | na 16 16 |        |             |         .!xy16                       
1327:000 | DONE ins | na 16 16 | 0053e6 | ca          |                 dex                  
1328:000 | DONE ins | na 16 16 | 0053e7 | ca          |                 dex                  
1329:000 | DONE ins | na 16 16 | 0053e8 | 94 00       |                 sty.dx 00            
1330:000 | DONE ins | na 16 16 | 0053ea | a0 01 00    |                 ldy.# 0001           
1331:000 | DONE wsp | na 16 16 |        |             |
1332:000 | DONE lbl | na 16 16 | 0053ed |             | z_one                                
1332:001 | DONE ins | na 16 16 | 0053ed | 60          |                 rts                  
1333:000 | DONE wsp | na 16 16 |        |             |
1334:000 | DONE wsp | na 16 16 |        |             |
1335:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1336:000 | DONE cmt | na 16 16 |        |             | ; 1- "ONE-MINUS" ( n -- n-1 ) 1 byte / 2 cycles
1337:000 | DONE cmt | na 16 16 |        |             | ; Subtract 1 from Top of Stack (TOS). Because there is no checking if there is
1338:000 | DONE cmt | na 16 16 |        |             | ; actually anything on the Data Stack, this routine will fail silently if the
1339:000 | DONE cmt | na 16 16 |        |             | ; stack is empty
1340:000 | DONE lbl | na 16 16 | 0053ee |             | xt_one-minus                         
1341:000 | DONE dir | na 16 16 |        |             |         .!xy16                       
1342:000 | DONE ins | na 16 16 | 0053ee | 88          |                 dey                  
1343:000 | DONE lbl | na 16 16 | 0053ef |             | z_one-minus                          
1343:001 | DONE ins | na 16 16 | 0053ef | 60          |                 rts                  
1344:000 | DONE wsp | na 16 16 |        |             |
1345:000 | DONE wsp | na 16 16 |        |             |
1346:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1347:000 | DONE cmt | na 16 16 |        |             | ; 1+ "ONE-PLUS" ( n -- n+1 ) 1 byte / 2 cycles
1348:000 | DONE cmt | na 16 16 |        |             | ; Add 1 to TOS. Because there is no checking if there is actually anything on
1349:000 | DONE cmt | na 16 16 |        |             | ; the Data Stack, this routine will fail silently if the stack is empty
1350:000 | DONE lbl | na 16 16 | 0053f0 |             | xt_one-plus                          
1351:000 | DONE dir | na 16 16 |        |             |         .!xy16                       
1352:000 | DONE ins | na 16 16 | 0053f0 | c8          |                 iny                  
1353:000 | DONE lbl | na 16 16 | 0053f1 |             | z_one-plus                           
1353:001 | DONE ins | na 16 16 | 0053f1 | 60          |                 rts                  
1354:000 | DONE wsp | na 16 16 |        |             |
1355:000 | DONE wsp | na 16 16 |        |             |
1356:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1357:000 | DONE cmt | na 16 16 |        |             | ; 2 "TWO" ( -- 2 ) 7 bytes / 12 cycles
1358:000 | DONE cmt | na 16 16 |        |             | ; Pushes the number 2 on the Data Stack
1359:000 | DONE lbl | na 16 16 | 0053f2 |             | xt_two                               
1360:000 | DONE dir | na 16 16 |        |             |         .!xy16                       
1361:000 | DONE ins | na 16 16 | 0053f2 | ca          |                 dex                  
1362:000 | DONE ins | na 16 16 | 0053f3 | ca          |                 dex                  
1363:000 | DONE ins | na 16 16 | 0053f4 | 94 00       |                 sty.dx 00            
1364:000 | DONE ins | na 16 16 | 0053f6 | a0 02 00    |                 ldy.# 0002           
1365:000 | DONE wsp | na 16 16 |        |             |
1366:000 | DONE lbl | na 16 16 | 0053f9 |             | z_two                                
1366:001 | DONE ins | na 16 16 | 0053f9 | 60          |                 rts                  
1367:000 | DONE wsp | na 16 16 |        |             |
1368:000 | DONE wsp | na 16 16 |        |             |
1369:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1370:000 | DONE cmt | na 16 16 |        |             | ; 2* "TWO-STAR" ( n -- 2*n ) 3 bytes / 6 cycles
1371:000 | DONE cmt | na 16 16 |        |             | ; Multiply Top of Stack (TOS) by 2. This is also used by CELLS
1372:000 | DONE lbl | na 16 16 | 0053fa |             | xt_two-star                          
1373:000 | DONE dir | na 16 16 |        |             |         .!a16                        
1374:000 | DONE dir | na 16 16 |        |             |         .!xy16                       
1375:000 | DONE ins | na 16 16 | 0053fa | 98          |                 tya                  
1376:000 | DONE ins | na 16 16 | 0053fb | 0a          |                 asl.a                
1377:000 | DONE ins | na 16 16 | 0053fc | a8          |                 tay                  
1378:000 | DONE wsp | na 16 16 |        |             |
1379:000 | DONE lbl | na 16 16 | 0053fd |             | z_two-star                           
1379:001 | DONE ins | na 16 16 | 0053fd | 60          |                 rts                  
1380:000 | DONE wsp | na 16 16 |        |             |
1381:000 | DONE wsp | na 16 16 |        |             |
1382:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1383:000 | DONE cmt | na 16 16 |        |             | ; 2>R "TWOTOR" ( n1 n2 -- )(R: -- n1 n2)  X bytes / X cycles
1384:000 | DONE cmt | na 16 16 |        |             | ; Push top two entries to Return Stack. The same as SWAP >R >R except that if we
1385:000 | DONE cmt | na 16 16 |        |             | ; jumped here, the return address will be in the way. May not be natively
1386:000 | DONE cmt | na 16 16 |        |             | ; compiled
1387:000 | DONE cmt | na 16 16 |        |             | ; TODO not coded
1388:000 | DONE lbl | na 16 16 | 0053fe |             | xt_twotor                            
1389:000 | DONE cmt | na 16 16 |        |             |                 ; get the return address out of the way
1390:000 | DONE ins | na 16 16 | 0053fe | 68          |                 pla                  
1391:000 | DONE ins | na 16 16 | 0053ff | 85 20       |                 sta.d 000020         
1392:000 | DONE cmt | na 16 16 |        |             |                 ; --- CUT HERE for native compile ---
1393:000 | DONE wsp | na 16 16 |        |             |
1394:000 | DONE ins | na 16 16 | 005401 | b5 00       |                 lda.dx 00            NOS stays next on Return Stack
1395:000 | DONE ins | na 16 16 | 005403 | 48          |                 pha                  
1396:000 | DONE ins | na 16 16 | 005404 | 5a          |                 phy                  TOS stays on top
1397:000 | DONE wsp | na 16 16 |        |             |
1398:000 | DONE ins | na 16 16 | 005405 | b4 02       |                 ldy.dx 02            clean up data stack
1399:000 | DONE ins | na 16 16 | 005407 | e8          |                 inx                  
1400:000 | DONE ins | na 16 16 | 005408 | e8          |                 inx                  
1401:000 | DONE ins | na 16 16 | 005409 | e8          |                 inx                  
1402:000 | DONE ins | na 16 16 | 00540a | e8          |                 inx                  
1403:000 | DONE wsp | na 16 16 |        |             |
1404:000 | DONE cmt | na 16 16 |        |             |                 ; --- CUT HERE for native compile ---
1405:000 | DONE ins | na 16 16 | 00540b | a5 20       |                 lda.d 000020         
1406:000 | DONE ins | na 16 16 | 00540d | 48          |                 pha                  
1407:000 | DONE wsp | na 16 16 |        |             |
1408:000 | DONE lbl | na 16 16 | 00540e |             | z_twotor                             
1408:001 | DONE ins | na 16 16 | 00540e | 60          |                 rts                  
1409:000 | DONE wsp | na 16 16 |        |             |
1410:000 | DONE wsp | na 16 16 |        |             |
1411:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1412:000 | DONE cmt | na 16 16 |        |             | ; 2DROP ( n m -- ) 6 bytes / 13 cycles
1413:000 | DONE cmt | na 16 16 |        |             | ; Drop first two entries of Data Stack
1414:000 | DONE lbl | na 16 16 | 00540f |             | xt_2drop                             
1415:000 | DONE ins | na 16 16 | 00540f | b4 02       |                 ldy.dx 02            
1416:000 | DONE ins | na 16 16 | 005411 | e8          |                 inx                  
1417:000 | DONE ins | na 16 16 | 005412 | e8          |                 inx                  
1418:000 | DONE ins | na 16 16 | 005413 | e8          |                 inx                  
1419:000 | DONE ins | na 16 16 | 005414 | e8          |                 inx                  
1420:000 | DONE wsp | na 16 16 |        |             |
1421:000 | DONE lbl | na 16 16 | 005415 |             | z_2drop                              
1421:001 | DONE ins | na 16 16 | 005415 | 60          |                 rts                  
1422:000 | DONE wsp | na 16 16 |        |             |
1423:000 | DONE wsp | na 16 16 |        |             |
1424:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1425:000 | DONE cmt | na 16 16 |        |             | ; 2DUP ( n m -- n m n m ) 10 bytes / 23 cycles
1426:000 | DONE cmt | na 16 16 |        |             | ; Duplicated the top two data stack entries
1427:000 | DONE wsp | na 16 16 |        |             |
1428:000 | DONE lbl | na 16 16 | 005416 |             | xt_2dup                              
1429:000 | DONE dir | na 16 16 |        |             |         .!xy16                       
1430:000 | DONE ins | na 16 16 | 005416 | ca          |                 dex                  
1431:000 | DONE ins | na 16 16 | 005417 | ca          |                 dex                  
1432:000 | DONE ins | na 16 16 | 005418 | ca          |                 dex                  
1433:000 | DONE ins | na 16 16 | 005419 | ca          |                 dex                  
1434:000 | DONE ins | na 16 16 | 00541a | 94 02       |                 sty.dx 02            
1435:000 | DONE ins | na 16 16 | 00541c | b5 04       |                 lda.dx 04            
1436:000 | DONE ins | na 16 16 | 00541e | 95 00       |                 sta.dx 00            
1437:000 | DONE wsp | na 16 16 |        |             |
1438:000 | DONE lbl | na 16 16 | 005420 |             | z_2dup                               
1438:001 | DONE ins | na 16 16 | 005420 | 60          |                 rts                  
1439:000 | DONE wsp | na 16 16 |        |             |
1440:000 | DONE wsp | na 16 16 |        |             |
1441:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1442:000 | DONE cmt | na 16 16 |        |             | ; 2OVER ( d1 d2 -- d1 d2 d1 ) X bytes / X cycles
1443:000 | DONE cmt | na 16 16 |        |             | ; Copy cell pair that is NOS to TOS
1444:000 | DONE lbl | na 16 16 | 005421 |             | xt_2over                             
1445:000 | DONE ins | na 16 16 | 005421 | ca          |                 dex                  
1446:000 | DONE ins | na 16 16 | 005422 | ca          |                 dex                  
1447:000 | DONE ins | na 16 16 | 005423 | ca          |                 dex                  
1448:000 | DONE ins | na 16 16 | 005424 | ca          |                 dex                  
1449:000 | DONE ins | na 16 16 | 005425 | 94 02       |                 sty.dx 02            
1450:000 | DONE ins | na 16 16 | 005427 | b4 06       |                 ldy.dx 06            
1451:000 | DONE ins | na 16 16 | 005429 | b5 08       |                 lda.dx 08            
1452:000 | DONE ins | na 16 16 | 00542b | 95 00       |                 sta.dx 00            
1453:000 | DONE wsp | na 16 16 |        |             |
1454:000 | DONE lbl | na 16 16 | 00542d |             | z_2over                              
1454:001 | DONE ins | na 16 16 | 00542d | 60          |                 rts                  
1455:000 | DONE wsp | na 16 16 |        |             |
1456:000 | DONE wsp | na 16 16 |        |             |
1457:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1458:000 | DONE cmt | na 16 16 |        |             | ; 2R> "TWOFROMR" ( -- n1 n2 ) ( R: n1 n2 ) X bytes / X cycles
1459:000 | DONE cmt | na 16 16 |        |             | ; Pull top two entries from Return Stack. Is the same as R> R> SWAP
1460:000 | DONE cmt | na 16 16 |        |             | ; As with R>, the problem with the is word is that the top value on the Return
1461:000 | DONE cmt | na 16 16 |        |             | ; Stack for a STC Forth is the return address, which we need to get out of the
1462:000 | DONE cmt | na 16 16 |        |             | ; way first. Uses tmp3
1463:000 | DONE lbl | na 16 16 | 00542e |             | xt_twofromr                          
1464:000 | DONE cmt | na 16 16 |        |             |                 ; get the return address out of the way
1465:000 | DONE ins | na 16 16 | 00542e | 68          |                 pla                  
1466:000 | DONE ins | na 16 16 | 00542f | 85 20       |                 sta.d 000020         
1467:000 | DONE cmt | na 16 16 |        |             |                 ; --- CUT HERE for native compile ---
1468:000 | DONE wsp | na 16 16 |        |             |
1469:000 | DONE ins | na 16 16 | 005431 | ca          |                 dex                  make room on Data Stack
1470:000 | DONE ins | na 16 16 | 005432 | ca          |                 dex                  
1471:000 | DONE ins | na 16 16 | 005433 | ca          |                 dex                  
1472:000 | DONE ins | na 16 16 | 005434 | ca          |                 dex                  
1473:000 | DONE ins | na 16 16 | 005435 | 94 02       |                 sty.dx 02            
1474:000 | DONE wsp | na 16 16 |        |             |
1475:000 | DONE ins | na 16 16 | 005437 | 7a          |                 ply                  top element stays on top
1476:000 | DONE ins | na 16 16 | 005438 | 68          |                 pla                  next element stays below
1477:000 | DONE ins | na 16 16 | 005439 | 95 00       |                 sta.dx 00            
1478:000 | DONE wsp | na 16 16 |        |             |
1479:000 | DONE cmt | na 16 16 |        |             |                 ; --- CUT HERE for native compile ---
1480:000 | DONE cmt | na 16 16 |        |             |                 ; restore return address
1481:000 | DONE ins | na 16 16 | 00543b | a5 20       |                 lda.d 000020         
1482:000 | DONE ins | na 16 16 | 00543d | 48          |                 pha                  
1483:000 | DONE wsp | na 16 16 |        |             |
1484:000 | DONE lbl | na 16 16 | 00543e |             | z_twofromr                           
1484:001 | DONE ins | na 16 16 | 00543e | 60          |                 rts                  
1485:000 | DONE wsp | na 16 16 |        |             |
1486:000 | DONE wsp | na 16 16 |        |             |
1487:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1488:000 | DONE cmt | na 16 16 |        |             | ; 2R@ ( -- n1 n2 )(R: n1 n2 -- n1 n2 )  X bytes / X cycles
1489:000 | DONE cmt | na 16 16 |        |             | ; Copy two words off the Return Stack.  This is R> R> 2DUP >R >R SWAP but we
1490:000 | DONE cmt | na 16 16 |        |             | ; can do this a lot faster in assembler This routine may not be natively
1491:000 | DONE cmt | na 16 16 |        |             | ; compiled; because it accessed by a JSR, the first element on the Return Stack
1492:000 | DONE cmt | na 16 16 |        |             | ; (LDA.S 01) is the return address.
1493:000 | DONE lbl | na 16 16 | 00543f |             | xt_tworfetch                         
1494:000 | DONE cmt | na 16 16 |        |             |                 ; make room on the Data Stack
1495:000 | DONE ins | na 16 16 | 00543f | ca          |                 dex                  
1496:000 | DONE ins | na 16 16 | 005440 | ca          |                 dex                  
1497:000 | DONE ins | na 16 16 | 005441 | ca          |                 dex                  
1498:000 | DONE ins | na 16 16 | 005442 | ca          |                 dex                  
1499:000 | DONE ins | na 16 16 | 005443 | 94 02       |                 sty.dx 02            
1500:000 | DONE wsp | na 16 16 |        |             |
1501:000 | DONE ins | na 16 16 | 005445 | a3 03       |                 lda.s 03             get second element of Return Stack
1502:000 | DONE ins | na 16 16 | 005447 | a8          |                 tay                  
1503:000 | DONE ins | na 16 16 | 005448 | a3 05       |                 lda.s 05             get third element on Return Stack
1504:000 | DONE ins | na 16 16 | 00544a | 95 00       |                 sta.dx 00            
1505:000 | DONE wsp | na 16 16 |        |             |
1506:000 | DONE lbl | na 16 16 | 00544c |             | z_tworfetch                          
1506:001 | DONE ins | na 16 16 | 00544c | 60          |                 rts                  
1507:000 | DONE wsp | na 16 16 |        |             |
1508:000 | DONE wsp | na 16 16 |        |             |
1509:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1510:000 | DONE cmt | na 16 16 |        |             | ; 2SWAP ( d1 d2 -- d2 d1 ) X bytes / X cycles
1511:000 | DONE cmt | na 16 16 |        |             | ; Swap two double cell numbers on the Data Stack.
1512:000 | DONE lbl | na 16 16 | 00544d |             | xt_2swap                             
1513:000 | DONE ins | na 16 16 | 00544d | 5a          |                 phy                  hi word of TOS
1514:000 | DONE ins | na 16 16 | 00544e | b4 02       |                 ldy.dx 02            hi word of NOS
1515:000 | DONE ins | na 16 16 | 005450 | 68          |                 pla                  
1516:000 | DONE ins | na 16 16 | 005451 | 95 02       |                 sta.dx 02            
1517:000 | DONE wsp | na 16 16 |        |             |
1518:000 | DONE ins | na 16 16 | 005453 | b5 00       |                 lda.dx 00            lo word of TOS
1519:000 | DONE ins | na 16 16 | 005455 | 48          |                 pha                  
1520:000 | DONE ins | na 16 16 | 005456 | b5 04       |                 lda.dx 04            lo word of NOS
1521:000 | DONE ins | na 16 16 | 005458 | 95 00       |                 sta.dx 00            
1522:000 | DONE ins | na 16 16 | 00545a | 68          |                 pla                  
1523:000 | DONE ins | na 16 16 | 00545b | 95 04       |                 sta.dx 04            
1524:000 | DONE wsp | na 16 16 |        |             |
1525:000 | DONE lbl | na 16 16 | 00545d |             | z_2swap                              
1525:001 | DONE ins | na 16 16 | 00545d | 60          |                 rts                  
1526:000 | DONE wsp | na 16 16 |        |             |
1527:000 | DONE wsp | na 16 16 |        |             |
1528:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1529:000 | DONE cmt | na 16 16 |        |             | ; 2VARIABLE ( "name" -- ) X bytes / X cycles
1530:000 | DONE cmt | na 16 16 |        |             | ; Create a variable with space for a double celled word. This can be realized in
1531:000 | DONE cmt | na 16 16 |        |             | ; Forth as either CREATE 2 CELLS ALLOT or just CREATE 0 , 0 ,
1532:000 | DONE cmt | na 16 16 |        |             | ; We use the second variant, letting CREATE do the hard work
1533:000 | DONE cmt | na 16 16 |        |             | ; TODO see if it is faster to use Y as an index and increase by four
1534:000 | DONE lbl | na 16 16 | 00545e |             | xt_2variable                         
1535:000 | DONE dir | na 16 16 |        |             |         .!a16                        
1536:000 | DONE ins | na 16 16 | 00545e | 20 56 57    |                 jsr 005756           
1537:000 | DONE wsp | na 16 16 |        |             |
1538:000 | DONE ins | na 16 16 | 005461 | a9 00 00    |                 lda.# 0000           
1539:000 | DONE ins | na 16 16 | 005464 | 92 00       |                 sta.di 000000        
1540:000 | DONE ins | na 16 16 | 005466 | e6 00       |                 inc.d 000000         
1541:000 | DONE ins | na 16 16 | 005468 | e6 00       |                 inc.d 000000         
1542:000 | DONE ins | na 16 16 | 00546a | 92 00       |                 sta.di 000000        
1543:000 | DONE ins | na 16 16 | 00546c | e6 00       |                 inc.d 000000         
1544:000 | DONE ins | na 16 16 | 00546e | e6 00       |                 inc.d 000000         
1545:000 | DONE wsp | na 16 16 |        |             |
1546:000 | DONE lbl | na 16 16 | 005470 |             | z_2variable                          
1546:001 | DONE ins | na 16 16 | 005470 | 60          |                 rts                  
1547:000 | DONE wsp | na 16 16 |        |             |
1548:000 | DONE wsp | na 16 16 |        |             |
1549:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1550:000 | DONE cmt | na 16 16 |        |             | ; ' "TICK" ( "string" -- xt ) X bytes / X cycles
1551:000 | DONE cmt | na 16 16 |        |             | ; Given a string with the name of a word, return the word's execution token (xt)
1552:000 | DONE cmt | na 16 16 |        |             | ; Abort if not found
1553:000 | DONE lbl | na 16 16 | 005471 |             | xt_tick                              
1554:000 | DONE ins | na 16 16 | 005471 | 20 6e 5c    |                 jsr 005c6e           ( -- addr u )
1555:000 | DONE wsp | na 16 16 |        |             |
1556:000 | DONE cmt | na 16 16 |        |             |                 ; if we got a zero, complain and abort
1557:000 | DONE ins | na 16 16 | 005474 | 98          |                 tya                  force flag check
1558:000 | DONE ins | na 16 16 | 005475 | d0 06       |                 bne 00547d           
1559:000 | DONE wsp | na 16 16 |        |             |
1560:000 | DONE ins | na 16 16 | 005477 | a9 1d 71    |                 lda.# 00711d         
1561:000 | DONE ins | na 16 16 | 00547a | 4c 21 6a    |                 jmp 006a21           
1562:000 | DONE wsp | na 16 16 |        |             |
1563:000 | DONE lbl | na 16 16 | 00547d |             | tick_have_word                       
1564:000 | DONE ins | na 16 16 | 00547d | 20 9b 59    |                 jsr 00599b           ( addr u -- nt)
1565:000 | DONE ins | na 16 16 | 005480 | 98          |                 tya                  force flag check
1566:000 | DONE wsp | na 16 16 |        |             |
1567:000 | DONE cmt | na 16 16 |        |             |                 ; if we didn't find string in the dictionary, complain and abort
1568:000 | DONE ins | na 16 16 | 005481 | d0 06       |                 bne 005489           
1569:000 | DONE wsp | na 16 16 |        |             |
1570:000 | DONE ins | na 16 16 | 005483 | a9 ba 71    |                 lda.# 0071ba         
1571:000 | DONE ins | na 16 16 | 005486 | 4c 21 6a    |                 jmp 006a21           
1572:000 | DONE wsp | na 16 16 |        |             |
1573:000 | DONE lbl | na 16 16 | 005489 |             | tick_have_nt                         
1574:000 | DONE ins | na 16 16 | 005489 | 20 86 5b    |                 jsr 005b86           ( nt -- xt )
1575:000 | DONE wsp | na 16 16 |        |             |
1576:000 | DONE lbl | na 16 16 | 00548c |             | z_tick                               
1576:001 | DONE ins | na 16 16 | 00548c | 60          |                 rts                  
1577:000 | DONE wsp | na 16 16 |        |             |
1578:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1579:000 | DONE cmt | na 16 16 |        |             | ; ABORT" "ABORTQ" ( "string" -- ) X bytes / X cycles
1580:000 | DONE cmt | na 16 16 |        |             | ; If flag on TOS is not false, print error message and abort. This a compile-only word
1581:000 | DONE lbl | na 16 16 | 00548d |             | xt_abortq                            
1582:000 | DONE dir | na 16 16 |        |             |         .!a16                        
1583:000 | DONE ins | na 16 16 | 00548d | 20 7f 5d    |                 jsr 005d7f           save string
1584:000 | DONE wsp | na 16 16 |        |             |
1585:000 | DONE ins | na 16 16 | 005490 | f4 97 54    |                 phe.# 005497         compile run-time aspect
1586:000 | DONE ins | na 16 16 | 005493 | 20 00 6a    |                 jsr 006a00           
1587:000 | DONE wsp | na 16 16 |        |             |
1588:000 | DONE ins | na 16 16 | 005496 | 60          |                 rts                  
1589:000 | DONE wsp | na 16 16 |        |             |
1590:000 | DONE lbl | na 16 16 | 005497 |             | abortq_rt                            
1591:000 | DONE cmt | na 16 16 |        |             |                 ; we land here with ( f addr u )
1592:000 | DONE ins | na 16 16 | 005497 | b5 02       |                 lda.dx 02            get flag as 3OS
1593:000 | DONE ins | na 16 16 | 005499 | f0 06       |                 beq 0054a1           if FALSE, we're done
1594:000 | DONE wsp | na 16 16 |        |             |
1595:000 | DONE cmt | na 16 16 |        |             |                 ; if TRUE, we print string and ABORT
1596:000 | DONE cmt | na 16 16 |        |             |                 ; TODO see if we want to inform user we're aborting
1597:000 | DONE ins | na 16 16 | 00549b | 20 ec 5e    |                 jsr 005eec           
1598:000 | DONE ins | na 16 16 | 00549e | 4c b2 50    |                 jmp 0050b2           not JSR because we never come back
1599:000 | DONE wsp | na 16 16 |        |             |
1600:000 | DONE lbl | na 16 16 | 0054a1 |             | abortq_done                          
1601:000 | DONE cmt | na 16 16 |        |             |                 ; drop the three entries from the Data Stack
1602:000 | DONE ins | na 16 16 | 0054a1 | b4 04       |                 ldy.dx 04            fourth on the stack
1603:000 | DONE wsp | na 16 16 |        |             |
1604:000 | DONE cmt | na 16 16 |        |             |                 ; this is the same size, but three cycles faster than six INX
1605:000 | DONE cmt | na 16 16 |        |             |                 ; instructions
1606:000 | DONE ins | na 16 16 | 0054a3 | 8a          |                 txa                  
1607:000 | DONE ins | na 16 16 | 0054a4 | 18          |                 clc                  
1608:000 | DONE ins | na 16 16 | 0054a5 | 69 06 00    |                 adc.# 0006           
1609:000 | DONE ins | na 16 16 | 0054a8 | aa          |                 tax                  
1610:000 | DONE wsp | na 16 16 |        |             |
1611:000 | DONE lbl | na 16 16 | 0054a9 |             | z_abortq                             
1611:001 | DONE ins | na 16 16 | 0054a9 | 60          |                 rts                  
1612:000 | DONE wsp | na 16 16 |        |             |
1613:000 | DONE wsp | na 16 16 |        |             |
1614:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1615:000 | DONE cmt | na 16 16 |        |             | ; ABS ( n -- u ) 8 bytes / X cycles
1616:000 | DONE cmt | na 16 16 |        |             | ; Return the absolute value of a single number
1617:000 | DONE lbl | na 16 16 | 0054aa |             | xt_abs                               
1618:000 | DONE dir | na 16 16 |        |             |         .!a16                        
1619:000 | DONE dir | na 16 16 |        |             |         .!xy16                       
1620:000 | DONE ins | na 16 16 | 0054aa | 98          |                 tya                  force flag test
1621:000 | DONE ins | na 16 16 | 0054ab | 10 05       |                 bpl 0054b2           positive number is easy
1622:000 | DONE wsp | na 16 16 |        |             |
1623:000 | DONE cmt | na 16 16 |        |             |                 ; negative: Calculate 0-n
1624:000 | DONE ins | na 16 16 | 0054ad | 49 ff ff    |                 eor.# 0ffff          
1625:000 | DONE ins | na 16 16 | 0054b0 | 1a          |                 inc.a                
1626:000 | DONE ins | na 16 16 | 0054b1 | a8          |                 tay                  
1627:000 | DONE wsp | na 16 16 |        |             |
1628:000 | DONE lbl | na 16 16 | 0054b2 |             | z_abs                                
1628:001 | DONE ins | na 16 16 | 0054b2 | 60          |                 rts                  
1629:000 | DONE wsp | na 16 16 |        |             |
1630:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1631:000 | DONE cmt | na 16 16 |        |             | ; ACCEPT ( addr n1 -- n2 ) X bytes / X cycles
1632:000 | DONE cmt | na 16 16 |        |             | ; Receive a string of at most n1 characters, placing them at addr. Return the
1633:000 | DONE cmt | na 16 16 |        |             | ; actual number of characters as n2. Characters are echoed as they are received.
1634:000 | DONE cmt | na 16 16 |        |             | ; ACCEPT is called by REFILL these days.
1635:000 | DONE wsp | na 16 16 |        |             |
1636:000 | DONE cmt | na 16 16 |        |             | ; Though we're dealing with individual characters, all these actions are
1637:000 | DONE cmt | na 16 16 |        |             | ; performed with a 16 bit A register. The only place we switch is in the kernel
1638:000 | DONE cmt | na 16 16 |        |             | ; routines themselves
1639:000 | DONE lbl | na 16 16 | 0054b3 |             | xt_accept                            
1640:000 | DONE dir | na 16 16 |        |             |         .!a16                        
1641:000 | DONE cmt | na 16 16 |        |             |                 ; Set up loop
1642:000 | DONE ins | na 16 16 | 0054b3 | 98          |                 tya                  force flag test
1643:000 | DONE ins | na 16 16 | 0054b4 | d0 05       |                 bne 0054bb           
1644:000 | DONE wsp | na 16 16 |        |             |
1645:000 | DONE cmt | na 16 16 |        |             |                 ; if we were told to get zero chars, just quit
1646:000 | DONE ins | na 16 16 | 0054b6 | e8          |                 inx                  NIP, TOS is zero which is also FALSE
1647:000 | DONE ins | na 16 16 | 0054b7 | e8          |                 inx                  
1648:000 | DONE wsp | na 16 16 |        |             |
1649:000 | DONE ins | na 16 16 | 0054b8 | 4c 41 55    |                 jmp 005541           no RTS so we can native compile
1650:000 | DONE wsp | na 16 16 |        |             |
1651:000 | DONE lbl | na 16 16 | 0054bb |             | accept_nonzero                       
1652:000 | DONE ins | na 16 16 | 0054bb | b5 00       |                 lda.dx 00            address of buffer is NOS
1653:000 | DONE ins | na 16 16 | 0054bd | 85 1c       |                 sta.d 00001c         
1654:000 | DONE ins | na 16 16 | 0054bf | e8          |                 inx                  NIP
1655:000 | DONE ins | na 16 16 | 0054c0 | e8          |                 inx                  
1656:000 | DONE wsp | na 16 16 |        |             |
1657:000 | DONE ins | na 16 16 | 0054c1 | 84 1e       |                 sty.d 00001e         Save max number of chars in tmp2
1658:000 | DONE ins | na 16 16 | 0054c3 | a0 00 00    |                 ldy.# 0000           Use Y as counter
1659:000 | DONE wsp | na 16 16 |        |             |
1660:000 | DONE lbl | na 16 16 | 0054c6 |             | accept_loop                          
1661:000 | DONE cmt | na 16 16 |        |             |                 ; We don't need to check for CTRL-l, because a vt100 terminal
1662:000 | DONE cmt | na 16 16 |        |             |                 ; clears the screen automatically
1663:000 | DONE wsp | na 16 16 |        |             |
1664:000 | DONE cmt | na 16 16 |        |             |                 ; This is a rolled-out version of KEY so we don't spend time
1665:000 | DONE cmt | na 16 16 |        |             |                 ; fooling around wit the stack
1666:000 | DONE ins | na 16 16 | 0054c6 | 8e 22 00    |                 stx 000022           
1667:000 | DONE ins | na 16 16 | 0054c9 | a2 00 00    |                 ldx.# 0000           
1668:000 | DONE ins | na 16 16 | 0054cc | fc 10 00    |                 jsr.xi 000010        JSR (INPUT,X)
1669:000 | DONE ins | na 16 16 | 0054cf | a6 22       |                 ldx.d 000022         
1670:000 | DONE wsp | na 16 16 |        |             |
1671:000 | DONE cmt | na 16 16 |        |             |                 ; we quit on both line feed and carriage return
1672:000 | DONE ins | na 16 16 | 0054d1 | c9 0a 00    |                 cmp.# AscLF          
1673:000 | DONE ins | na 16 16 | 0054d4 | f0 43       |                 beq 005519           
1674:000 | DONE ins | na 16 16 | 0054d6 | c9 0d 00    |                 cmp.# AscCR          
1675:000 | DONE ins | na 16 16 | 0054d9 | f0 3e       |                 beq 005519           
1676:000 | DONE wsp | na 16 16 |        |             |
1677:000 | DONE cmt | na 16 16 |        |             |                 ; BS and DEL do the same thing for the moment
1678:000 | DONE ins | na 16 16 | 0054db | c9 08 00    |                 cmp.# AscBS          
1679:000 | DONE ins | na 16 16 | 0054de | f0 40       |                 beq 005520           
1680:000 | DONE ins | na 16 16 | 0054e0 | c9 7f 00    |                 cmp.# AscDEL         
1681:000 | DONE ins | na 16 16 | 0054e3 | f0 3b       |                 beq 005520           
1682:000 | DONE wsp | na 16 16 |        |             |
1683:000 | DONE cmt | na 16 16 |        |             |                 ; CTRL-c and ESC abort (see if this is too harsh)
1684:000 | DONE ins | na 16 16 | 0054e5 | c9 03 00    |                 cmp.# AscCC          
1685:000 | DONE ins | na 16 16 | 0054e8 | d0 03       |                 bne 0054ed           
1686:000 | DONE ins | na 16 16 | 0054ea | 4c b2 50    |                 jmp 0050b2           
1687:000 | DONE lbl | na 16 16 | 0054ed |             | @                                    
1688:000 | DONE ins | na 16 16 | 0054ed | c9 1b 00    |                 cmp.# AscESC         
1689:000 | DONE ins | na 16 16 | 0054f0 | d0 03       |                 bne 0054f5           
1690:000 | DONE ins | na 16 16 | 0054f2 | 4c b2 50    |                 jmp 0050b2           
1691:000 | DONE lbl | na 16 16 | 0054f5 |             | @                                    
1692:000 | DONE cmt | na 16 16 |        |             |                 ; CTRL-p will be used for "previous cmd", TODO
1693:000 | DONE ins | na 16 16 | 0054f5 | c9 10 00    |                 cmp.# AscCP          
1694:000 | DONE ins | na 16 16 | 0054f8 | d0 08       |                 bne 005502           
1695:000 | DONE wsp | na 16 16 |        |             |
1696:000 | DONE ins | na 16 16 | 0054fa | a9 d2 71    |                 lda.# 0071d2         
1697:000 | DONE ins | na 16 16 | 0054fd | 20 27 6a    |                 jsr 006a27           
1698:000 | DONE wsp | na 16 16 |        |             |
1699:000 | DONE ins | na 16 16 | 005500 | 80 c4       |                 bra 0054c6           
1700:000 | DONE lbl | na 16 16 | 005502 |             | @                                    
1701:000 | DONE cmt | na 16 16 |        |             |                 ; CTRL-n will be used for "next cmd", TODO
1702:000 | DONE ins | na 16 16 | 005502 | c9 0e 00    |                 cmp.# AscCN          
1703:000 | DONE ins | na 16 16 | 005505 | d0 08       |                 bne 00550f           
1704:000 | DONE wsp | na 16 16 |        |             |
1705:000 | DONE ins | na 16 16 | 005507 | a9 e5 71    |                 lda.# 0071e5         
1706:000 | DONE ins | na 16 16 | 00550a | 20 27 6a    |                 jsr 006a27           
1707:000 | DONE wsp | na 16 16 |        |             |
1708:000 | DONE ins | na 16 16 | 00550d | 80 b7       |                 bra 0054c6           
1709:000 | DONE wsp | na 16 16 |        |             |
1710:000 | DONE lbl | na 16 16 | 00550f |             | @                                    
1711:000 | DONE cmt | na 16 16 |        |             |                 ; That's quite enough, echo character. EMIT_A sidesteps all the
1712:000 | DONE cmt | na 16 16 |        |             |                 ; fooling around with the Data Stack
1713:000 | DONE ins | na 16 16 | 00550f | 20 09 59    |                 jsr 005909           
1714:000 | DONE wsp | na 16 16 |        |             |
1715:000 | DONE ins | na 16 16 | 005512 | 91 08       |                 sta.diy 000008       STA (CIB),Y
1716:000 | DONE wsp | na 16 16 |        |             |
1717:000 | DONE ins | na 16 16 | 005514 | c8          |                 iny                  
1718:000 | DONE ins | na 16 16 | 005515 | c4 1e       |                 cpy.d 00001e         reached character limit?
1719:000 | DONE ins | na 16 16 | 005517 | d0 ad       |                 bne 0054c6           fall thru if buffer limit reached
1720:000 | DONE wsp | na 16 16 |        |             |
1721:000 | DONE lbl | na 16 16 | 005519 |             | accept_eol                           
1722:000 | DONE ins | na 16 16 | 005519 | 84 0a       |                 sty.d 00000a         Y contains number of chars accepted already
1723:000 | DONE wsp | na 16 16 |        |             |
1724:000 | DONE ins | na 16 16 | 00551b | 20 a4 5e    |                 jsr 005ea4           print final space
1725:000 | DONE ins | na 16 16 | 00551e | 80 21       |                 bra 005541           
1726:000 | DONE wsp | na 16 16 |        |             |
1727:000 | DONE lbl | na 16 16 | 005520 |             | accept_bs                            
1728:000 | DONE ins | na 16 16 | 005520 | c0 00 00    |                 cpy.# 0000           buffer empty?
1729:000 | DONE ins | na 16 16 | 005523 | d0 07       |                 bne 00552c           
1730:000 | DONE wsp | na 16 16 |        |             |
1731:000 | DONE ins | na 16 16 | 005525 | a9 07 00    |                 lda.# AscBELL        complain and don't delete beyond the start of line
1732:000 | DONE ins | na 16 16 | 005528 | 20 09 59    |                 jsr 005909           
1733:000 | DONE ins | na 16 16 | 00552b | c8          |                 iny                  
1734:000 | DONE lbl | na 16 16 | 00552c |             | @                                    
1735:000 | DONE ins | na 16 16 | 00552c | 88          |                 dey                  
1736:000 | DONE ins | na 16 16 | 00552d | a9 08 00    |                 lda.# AscBS          move back one
1737:000 | DONE ins | na 16 16 | 005530 | 20 09 59    |                 jsr 005909           
1738:000 | DONE ins | na 16 16 | 005533 | a9 20 00    |                 lda.# AscSP          print a space (rubout)
1739:000 | DONE ins | na 16 16 | 005536 | 20 09 59    |                 jsr 005909           
1740:000 | DONE ins | na 16 16 | 005539 | a9 08 00    |                 lda.# AscBS          move back over space
1741:000 | DONE ins | na 16 16 | 00553c | 20 09 59    |                 jsr 005909           
1742:000 | DONE wsp | na 16 16 |        |             |
1743:000 | DONE ins | na 16 16 | 00553f | 80 85       |                 bra 0054c6           
1744:000 | DONE wsp | na 16 16 |        |             |
1745:000 | DONE lbl | na 16 16 | 005541 |             | z_accept                             
1745:001 | DONE ins | na 16 16 | 005541 | 60          |                 rts                  
1746:000 | DONE wsp | na 16 16 |        |             |
1747:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1748:000 | DONE cmt | na 16 16 |        |             | ; AGAIN ( addr -- ) 22 bytes / 50 cycles
1749:000 | DONE cmt | na 16 16 |        |             | ; Code a backwards branch to an address usually left by BEGIN. We use JMP
1750:000 | DONE cmt | na 16 16 |        |             | ; instead of BRA to make sure we have the range.
1751:000 | DONE cmt | na 16 16 |        |             | ; TODO see if we should insert a KEY? to make sure we can abort and/or a PAUSE
1752:000 | DONE lbl | na 16 16 | 005542 |             | xt_again                             
1753:000 | DONE wsp | na 16 16 |        |             |
1754:000 | DONE cmt | na 16 16 |        |             |                 ; Add the opcode for a JMP
1755:000 | DONE ins | na 16 16 | 005542 | e2 20       |                 sep 20               
1755:001 | DONE ctl | na  8 16 |        |             |         .!a8
1756:000 | DONE ins | na  8 16 | 005544 | a9 4c       |                 lda.# 4c             
1757:000 | DONE ins | na  8 16 | 005546 | 92 00       |                 sta.di 000000        STA (CP)
1758:000 | DONE ins | na  8 16 | 005548 | c2 20       |                 rep 20               
1758:001 | DONE ctl | na 16 16 |        |             |         .!a16
1759:000 | DONE ins | na 16 16 | 00554a | e6 00       |                 inc.d 000000         
1760:000 | DONE wsp | na 16 16 |        |             |
1761:000 | DONE cmt | na 16 16 |        |             |                 ; Add the address which should be TOS
1762:000 | DONE ins | na 16 16 | 00554c | 98          |                 tya                  
1763:000 | DONE ins | na 16 16 | 00554d | 92 00       |                 sta.di 000000        
1764:000 | DONE ins | na 16 16 | 00554f | e6 00       |                 inc.d 000000         
1765:000 | DONE ins | na 16 16 | 005551 | e6 00       |                 inc.d 000000         
1766:000 | DONE wsp | na 16 16 |        |             |
1767:000 | DONE cmt | na 16 16 |        |             |                 ; drop the address
1768:000 | DONE ins | na 16 16 | 005553 | b4 00       |                 ldy.dx 00            
1769:000 | DONE ins | na 16 16 | 005555 | e8          |                 inx                  
1770:000 | DONE ins | na 16 16 | 005556 | e8          |                 inx                  
1771:000 | DONE wsp | na 16 16 |        |             |
1772:000 | DONE lbl | na 16 16 | 005557 |             | z_again                              
1772:001 | DONE ins | na 16 16 | 005557 | 60          |                 rts                  
1773:000 | DONE wsp | na 16 16 |        |             |
1774:000 | DONE wsp | na 16 16 |        |             |
1775:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1776:000 | DONE cmt | na 16 16 |        |             | ; ALIGN ( -- ) 1 bytes / X cycles
1777:000 | DONE cmt | na 16 16 |        |             | ; Make sure CP is aligned. This does nothing on the 65816
1778:000 | DONE lbl | na 16 16 | 005558 |             | xt_align                             
1779:000 | DONE ins | na 16 16 | 005558 | ea          |                 nop                  removed during native compile
1780:000 | DONE lbl | na 16 16 | 005559 |             | z_align                              
1780:001 | DONE ins | na 16 16 | 005559 | 60          |                 rts                  
1781:000 | DONE wsp | na 16 16 |        |             |
1782:000 | DONE wsp | na 16 16 |        |             |
1783:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1784:000 | DONE cmt | na 16 16 |        |             | ; ALIGNED ( addr -- a-addr ) X bytes / X cycles
1785:000 | DONE cmt | na 16 16 |        |             | ; Return the next aligned address. With the 65816, this does nothing
1786:000 | DONE lbl | na 16 16 | 00555a |             | xt_aligned                           
1787:000 | DONE ins | na 16 16 | 00555a | ea          |                 nop                  removed during native compile
1788:000 | DONE lbl | na 16 16 | 00555b |             | z_aligned                            
1788:001 | DONE ins | na 16 16 | 00555b | 60          |                 rts                  
1789:000 | DONE wsp | na 16 16 |        |             |
1790:000 | DONE wsp | na 16 16 |        |             |
1791:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1792:000 | DONE cmt | na 16 16 |        |             | ; ALLOT ( n -- ) X bytes / X cycles
1793:000 | DONE cmt | na 16 16 |        |             | ; Reserve a certain number of bytes (not cells) or release them. If n = 0, do
1794:000 | DONE cmt | na 16 16 |        |             | ; nothing. If n is negative, release n bytes, but only to the beginning of the
1795:000 | DONE cmt | na 16 16 |        |             | ; Dictionary. If n is positive (the most common case), reserve n bytes, but not
1796:000 | DONE cmt | na 16 16 |        |             | ; past the Dictionary.
1797:000 | DONE cmt | na 16 16 |        |             | ; See http://forth-standard.org/standard/core/ALLOT
1798:000 | DONE cmt | na 16 16 |        |             | ; TODO test negative values
1799:000 | DONE lbl | na 16 16 | 00555c |             | xt_allot                             
1800:000 | DONE dir | na 16 16 |        |             |         .!a16                        
1801:000 | DONE ins | na 16 16 | 00555c | 98          |                 tya                  force flag check
1802:000 | DONE ins | na 16 16 | 00555d | f0 21       |                 beq 005580           zero bytes, don't do anything
1803:000 | DONE ins | na 16 16 | 00555f | 30 12       |                 bmi 005573           free memory instead of reserving it
1804:000 | DONE wsp | na 16 16 |        |             |
1805:000 | DONE cmt | na 16 16 |        |             |                 ; most common case: reserve n bytes. We've already transfered
1806:000 | DONE cmt | na 16 16 |        |             |                 ; TOS to A, so we just have to add the current compile pointer
1807:000 | DONE ins | na 16 16 | 005561 | 18          |                 clc                  
1808:000 | DONE ins | na 16 16 | 005562 | 65 00       |                 adc.d 000000         create new CP
1809:000 | DONE ins | na 16 16 | 005564 | b0 07       |                 bcs 00556d           oops, we've wrapped
1810:000 | DONE wsp | na 16 16 |        |             |
1811:000 | DONE ins | na 16 16 | 005566 | a8          |                 tay                  save copy of new CP
1812:000 | DONE wsp | na 16 16 |        |             |
1813:000 | DONE ins | na 16 16 | 005567 | 38          |                 sec                  
1814:000 | DONE ins | na 16 16 | 005568 | e9 ff 4f    |                 sbc.# 004fff         
1815:000 | DONE ins | na 16 16 | 00556b | 30 11       |                 bmi 00557e           oops, fall thru if beyond max RAM
1816:000 | DONE wsp | na 16 16 |        |             |
1817:000 | DONE lbl | na 16 16 | 00556d |             | allot_error                          
1818:000 | DONE ins | na 16 16 | 00556d | a9 98 70    |                 lda.# 007098         
1819:000 | DONE ins | na 16 16 | 005570 | 4c 21 6a    |                 jmp 006a21           
1820:000 | DONE wsp | na 16 16 |        |             |
1821:000 | DONE lbl | na 16 16 | 005573 |             | allot_minus                          
1822:000 | DONE cmt | na 16 16 |        |             |                 ; negative value means we're freeing memory
1823:000 | DONE ins | na 16 16 | 005573 | 38          |                 sec                  
1824:000 | DONE ins | na 16 16 | 005574 | e5 00       |                 sbc.d 000000         
1825:000 | DONE ins | na 16 16 | 005576 | 90 f5       |                 bcc 00556d           oops, we've wrapped
1826:000 | DONE wsp | na 16 16 |        |             |
1827:000 | DONE ins | na 16 16 | 005578 | a8          |                 tay                  
1828:000 | DONE wsp | na 16 16 |        |             |
1829:000 | DONE ins | na 16 16 | 005579 | e9 00 03    |                 sbc.# 000300         Carry Flag must still be set
1830:000 | DONE ins | na 16 16 | 00557c | 30 ef       |                 bmi 00556d           oops, gone too far back
1831:000 | DONE wsp | na 16 16 |        |             |
1832:000 | DONE cmt | na 16 16 |        |             |                 ; fall through to allot_done
1833:000 | DONE lbl | na 16 16 | 00557e |             | allot_done                           
1834:000 | DONE ins | na 16 16 | 00557e | 84 00       |                 sty.d 000000         new compiler pointer
1835:000 | DONE lbl | na 16 16 | 005580 |             | allot_real_gone                      
1836:000 | DONE ins | na 16 16 | 005580 | b4 00       |                 ldy.dx 00            DROP
1837:000 | DONE ins | na 16 16 | 005582 | e8          |                 inx                  
1838:000 | DONE ins | na 16 16 | 005583 | e8          |                 inx                  
1839:000 | DONE wsp | na 16 16 |        |             |
1840:000 | DONE lbl | na 16 16 | 005584 |             | z_allot                              
1840:001 | DONE ins | na 16 16 | 005584 | 60          |                 rts                  
1841:000 | DONE wsp | na 16 16 |        |             |
1842:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1843:000 | DONE cmt | na 16 16 |        |             | ; AND ( n m -- n ) 6 bytes / X cycles
1844:000 | DONE cmt | na 16 16 |        |             | ; Logical AND
1845:000 | DONE lbl | na 16 16 | 005585 |             | xt_and                               
1846:000 | DONE ins | na 16 16 | 005585 | 98          |                 tya                  
1847:000 | DONE ins | na 16 16 | 005586 | 35 00       |                 and.dx 00            
1848:000 | DONE ins | na 16 16 | 005588 | a8          |                 tay                  
1849:000 | DONE wsp | na 16 16 |        |             |
1850:000 | DONE ins | na 16 16 | 005589 | e8          |                 inx                  NIP
1851:000 | DONE ins | na 16 16 | 00558a | e8          |                 inx                  
1852:000 | DONE wsp | na 16 16 |        |             |
1853:000 | DONE lbl | na 16 16 | 00558b |             | z_and                                
1853:001 | DONE ins | na 16 16 | 00558b | 60          |                 rts                  
1854:000 | DONE wsp | na 16 16 |        |             |
1855:000 | DONE wsp | na 16 16 |        |             |
1856:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1857:000 | DONE cmt | na 16 16 |        |             | ; AT-XY ( nx ny -- ) X bytes / X cycles
1858:000 | DONE cmt | na 16 16 |        |             | ; Move cursor to coordinates given. ESC[<n>;<m>H Do not use U. to print the
1859:000 | DONE cmt | na 16 16 |        |             | ; numbers because the trailing space will not work with xterm (works fine with
1860:000 | DONE cmt | na 16 16 |        |             | ; Mac OS X Terminals, though)
1861:000 | DONE cmt | na 16 16 |        |             | ; TODO doesn't like hex values, need to get rid of byte_to_ascii
1862:000 | DONE cmt | na 16 16 |        |             | ; or call as word with 0 u.r and decimal
1863:000 | DONE lbl | na 16 16 | 00558c |             | xt_at-xy                             
1864:000 | DONE dir | na 16 16 |        |             |         .!a16                        
1865:000 | DONE ins | na 16 16 | 00558c | a9 1b 00    |                 lda.# AscESC         ESC
1866:000 | DONE ins | na 16 16 | 00558f | 20 09 59    |                 jsr 005909           
1867:000 | DONE ins | na 16 16 | 005592 | a9 5b 00    |                 lda.# 5b             [
1868:000 | DONE ins | na 16 16 | 005595 | 20 09 59    |                 jsr 005909           
1869:000 | DONE ins | na 16 16 | 005598 | b5 00       |                 lda.dx 00            x
1870:000 | DONE ins | na 16 16 | 00559a | 20 59 6a    |                 jsr 006a59           
1871:000 | DONE ins | na 16 16 | 00559d | a9 3b 00    |                 lda.# 3b             semicolon
1872:000 | DONE ins | na 16 16 | 0055a0 | 20 09 59    |                 jsr 005909           
1873:000 | DONE ins | na 16 16 | 0055a3 | 98          |                 tya                  y
1874:000 | DONE ins | na 16 16 | 0055a4 | 20 59 6a    |                 jsr 006a59           
1875:000 | DONE ins | na 16 16 | 0055a7 | a9 48 00    |                 lda.# 48             H
1876:000 | DONE ins | na 16 16 | 0055aa | 20 09 59    |                 jsr 005909           
1877:000 | DONE wsp | na 16 16 |        |             |
1878:000 | DONE ins | na 16 16 | 0055ad | b4 02       |                 ldy.dx 02            
1879:000 | DONE ins | na 16 16 | 0055af | e8          |                 inx                  
1880:000 | DONE ins | na 16 16 | 0055b0 | e8          |                 inx                  
1881:000 | DONE ins | na 16 16 | 0055b1 | e8          |                 inx                  
1882:000 | DONE ins | na 16 16 | 0055b2 | e8          |                 inx                  
1883:000 | DONE wsp | na 16 16 |        |             |
1884:000 | DONE lbl | na 16 16 | 0055b3 |             | z_at-xy                              
1884:001 | DONE ins | na 16 16 | 0055b3 | 60          |                 rts                  
1885:000 | DONE wsp | na 16 16 |        |             |
1886:000 | DONE wsp | na 16 16 |        |             |
1887:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1888:000 | DONE cmt | na 16 16 |        |             | ; BASE ( -- addr ) X bytes / X cycles
1889:000 | DONE cmt | na 16 16 |        |             | ; Get the address of where the radix for number conversion is stored
1890:000 | DONE lbl | na 16 16 | 0055b4 |             | xt_base                              
1891:000 | DONE ins | na 16 16 | 0055b4 | ca          |                 dex                  
1892:000 | DONE ins | na 16 16 | 0055b5 | ca          |                 dex                  
1893:000 | DONE ins | na 16 16 | 0055b6 | 94 00       |                 sty.dx 00            
1894:000 | DONE wsp | na 16 16 |        |             |
1895:000 | DONE ins | na 16 16 | 0055b8 | a0 16 00    |                 ldy.# 000016         
1896:000 | DONE wsp | na 16 16 |        |             |
1897:000 | DONE lbl | na 16 16 | 0055bb |             | z_base                               
1897:001 | DONE ins | na 16 16 | 0055bb | 60          |                 rts                  
1898:000 | DONE wsp | na 16 16 |        |             |
1899:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1900:000 | DONE cmt | na 16 16 |        |             | ; BELL ( -- ) X bytes / X cycles
1901:000 | DONE cmt | na 16 16 |        |             | ; Trigger terminal bell on vt100 terminals
1902:000 | DONE lbl | na 16 16 | 0055bc |             | xt_bell                              
1903:000 | DONE dir | na 16 16 |        |             |         .!a16                        
1904:000 | DONE ins | na 16 16 | 0055bc | a9 07 00    |                 lda.# AscBELL        
1905:000 | DONE ins | na 16 16 | 0055bf | 20 09 59    |                 jsr 005909           
1906:000 | DONE wsp | na 16 16 |        |             |
1907:000 | DONE lbl | na 16 16 | 0055c2 |             | z_bell                               
1907:001 | DONE ins | na 16 16 | 0055c2 | 60          |                 rts                  
1908:000 | DONE wsp | na 16 16 |        |             |
1909:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1910:000 | DONE cmt | na 16 16 |        |             | ; BEGIN ( -- addr ) 6 bytes / 13 cycles
1911:000 | DONE cmt | na 16 16 |        |             | ; Mark entry point for a loop. This is just an immediate version of here which
1912:000 | DONE cmt | na 16 16 |        |             | ; could just as welle be coded as  : BEGIN HERE ; IMMEDIATE COMPILE-ONLY
1913:000 | DONE cmt | na 16 16 |        |             | ; but we code it here for speed
1914:000 | DONE lbl | na 16 16 | 0055c3 |             | xt_begin                             
1915:000 | DONE cmt | na 16 16 |        |             |                 ; really just the same code as HERE
1916:000 | DONE ins | na 16 16 | 0055c3 | ca          |                 dex                  
1917:000 | DONE ins | na 16 16 | 0055c4 | ca          |                 dex                  
1918:000 | DONE ins | na 16 16 | 0055c5 | 94 00       |                 sty.dx 00            
1919:000 | DONE wsp | na 16 16 |        |             |
1920:000 | DONE ins | na 16 16 | 0055c7 | a4 00       |                 ldy.d 000000         
1921:000 | DONE wsp | na 16 16 |        |             |
1922:000 | DONE lbl | na 16 16 | 0055c9 |             | z_begin                              
1922:001 | DONE ins | na 16 16 | 0055c9 | 60          |                 rts                  
1923:000 | DONE wsp | na 16 16 |        |             |
1924:000 | DONE wsp | na 16 16 |        |             |
1925:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1926:000 | DONE cmt | na 16 16 |        |             | ; BL ( -- u ) 7 bytes / 12 cycles
1927:000 | DONE cmt | na 16 16 |        |             | ; Put ASCII char for SPACE on Data Stack
1928:000 | DONE lbl | na 16 16 | 0055ca |             | xt_bl                                
1929:000 | DONE dir | na 16 16 |        |             |         .!xy16                       
1930:000 | DONE ins | na 16 16 | 0055ca | ca          |                 dex                  
1931:000 | DONE ins | na 16 16 | 0055cb | ca          |                 dex                  
1932:000 | DONE ins | na 16 16 | 0055cc | 94 00       |                 sty.dx 00            
1933:000 | DONE ins | na 16 16 | 0055ce | a0 20 00    |                 ldy.# AscSP          
1934:000 | DONE wsp | na 16 16 |        |             |
1935:000 | DONE lbl | na 16 16 | 0055d1 |             | z_bl                                 
1935:001 | DONE ins | na 16 16 | 0055d1 | 60          |                 rts                  
1936:000 | DONE wsp | na 16 16 |        |             |
1937:000 | DONE wsp | na 16 16 |        |             |
1938:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1939:000 | DONE cmt | na 16 16 |        |             | ; BOUNDS ( addr u -- addr+u addr ) 9 bytes / X cycles
1940:000 | DONE cmt | na 16 16 |        |             | ; Given a string, return the correct Data Stack parameters for a DO/LOOP loop
1941:000 | DONE cmt | na 16 16 |        |             | ; over its characters. This is realized as OVER + SWAP in Forth, but we do it
1942:000 | DONE cmt | na 16 16 |        |             | ; a lot faster in assembler. Uses tmptos
1943:000 | DONE lbl | na 16 16 | 0055d2 |             | xt_bounds                            
1944:000 | DONE dir | na 16 16 |        |             |         .!a16                        
1945:000 | DONE ins | na 16 16 | 0055d2 | 84 24       |                 sty.d 000024         
1946:000 | DONE ins | na 16 16 | 0055d4 | b4 00       |                 ldy.dx 00            addr now TOS
1947:000 | DONE wsp | na 16 16 |        |             |
1948:000 | DONE ins | na 16 16 | 0055d6 | 18          |                 clc                  
1949:000 | DONE ins | na 16 16 | 0055d7 | 65 24       |                 adc.d 000024         
1950:000 | DONE ins | na 16 16 | 0055d9 | 95 00       |                 sta.dx 00            addr+u now NOS
1951:000 | DONE wsp | na 16 16 |        |             |
1952:000 | DONE lbl | na 16 16 | 0055db |             | z_bounds                             
1952:001 | DONE ins | na 16 16 | 0055db | 60          |                 rts                  
1953:000 | DONE wsp | na 16 16 |        |             |
1954:000 | DONE wsp | na 16 16 |        |             |
1955:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1956:000 | DONE cmt | na 16 16 |        |             | ; BRANCH ( -- ) X bytes / X cycles
1957:000 | DONE cmt | na 16 16 |        |             | ; Transfer control to given address. This word was adapted from Tali Forth. It
1958:000 | DONE cmt | na 16 16 |        |             | ; uses tmpbranch
1959:000 | DONE lbl | na 16 16 | 0055dc |             | xt_branch                            
1960:000 | DONE dir | na 16 16 |        |             |         .!a16                        
1961:000 | DONE cmt | na 16 16 |        |             |                 ; encode subroutine branch to runtime portion
1962:000 | DONE ins | na 16 16 | 0055dc | f4 e3 55    |                 phe.# 0055e3         
1963:000 | DONE ins | na 16 16 | 0055df | 20 00 6a    |                 jsr 006a00           
1964:000 | DONE wsp | na 16 16 |        |             |
1965:000 | DONE lbl | na 16 16 | 0055e2 |             | z_branch                             
1965:001 | DONE ins | na 16 16 | 0055e2 | 60          |                 rts                  
1966:000 | DONE wsp | na 16 16 |        |             |
1967:000 | DONE lbl | na 16 16 | 0055e3 |             | branch_rt                            
1968:000 | DONE cmt | na 16 16 |        |             |                 ; The value on the Return Stack determines where we go to
1969:000 | DONE ins | na 16 16 | 0055e3 | 68          |                 pla                  
1970:000 | DONE ins | na 16 16 | 0055e4 | 85 1a       |                 sta.d 00001a         
1971:000 | DONE wsp | na 16 16 |        |             |
1972:000 | DONE ins | na 16 16 | 0055e6 | 5a          |                 phy                  avoid using temp variables
1973:000 | DONE ins | na 16 16 | 0055e7 | a0 01 00    |                 ldy.# 0001           
1974:000 | DONE ins | na 16 16 | 0055ea | b1 1a       |                 lda.diy 00001a       LDA (TMPBRANCH),Y
1975:000 | DONE ins | na 16 16 | 0055ec | 7a          |                 ply                  
1976:000 | DONE wsp | na 16 16 |        |             |
1977:000 | DONE ins | na 16 16 | 0055ed | 3a          |                 dec.a                
1978:000 | DONE ins | na 16 16 | 0055ee | 48          |                 pha                  put target address back on Return Stack
1979:000 | DONE wsp | na 16 16 |        |             |
1980:000 | DONE ins | na 16 16 | 0055ef | 60          |                 rts                  
1981:000 | DONE wsp | na 16 16 |        |             |
1982:000 | DONE cmt | na 16 16 |        |             | ; -------------------------------------------------------------------
1983:000 | DONE cmt | na 16 16 |        |             | ; BYE ( -- ) 2 bytes / 7-8 cycles
1984:000 | DONE cmt | na 16 16 |        |             | ; Leave Liara Forth, returning to Mensch Monitor
1985:000 | DONE lbl | na 16 16 | 0055f0 |             | xt_bye                               
1986:000 | DONE ins | na 16 16 | 0055f0 | 78          |                 sei                  
1987:000 | DONE ins | na 16 16 | 0055f1 | d8          |                 cld                  
1988:000 | DONE ins | na 16 16 | 0055f2 | 38          |                 sec                  
1988:001 | DONE ins | na 16 16 | 0055f3 | fb          |                 xce                  
1988:002 | DONE ctl | em  8  8 |        |             |         .!emulated
1988:003 | DONE ctl | em  8  8 |        |             |         .!a8
1988:004 | DONE ctl | em  8  8 |        |             |         .!xy8
1989:000 | DONE ins | em  8  8 | 0055f4 | 6c fc ff    |                 jmp.i 0fffc          
1990:000 | DONE wsp | em  8  8 |        |             |
1991:000 | DONE lbl | em  8  8 | 0055f7 |             | z_bye                                ; never reached
1992:000 | DONE wsp | em  8  8 |        |             |
1993:000 | DONE wsp | em  8  8 |        |             |
1994:000 | DONE cmt | em  8  8 |        |             | ; -------------------------------------------------------------------
1995:000 | DONE cmt | em  8  8 |        |             | ; C, "C-COMMA" ( char -- ) 13 bytes / 28 cycles
1996:000 | DONE cmt | em  8  8 |        |             | ; Store one character in the Dictionary
1997:000 | DONE lbl | em  8  8 | 0055f7 |             | xt_c-comma                           
1998:000 | DONE ins | em  8  8 | 0055f7 | 98          |                 tya                  
1999:000 | DONE ins | em  8  8 | 0055f8 | e2 20       |                 sep 20               
1999:001 | DONE ctl | em  8  8 |        |             |         .!a8
2000:000 | DONE ins | em  8  8 | 0055fa | 92 00       |                 sta.di 000000        STA (CP)
2001:000 | DONE ins | em  8  8 | 0055fc | c2 20       |                 rep 20               
2001:001 | DONE ctl | em 16  8 |        |             |         .!a16
2002:000 | DONE ins | em 16  8 | 0055fe | e6 00       |                 inc.d 000000         quick version of 1 ALLOT
2003:000 | DONE wsp | em 16  8 |        |             |
2004:000 | DONE ins | em 16  8 | 005600 | b4 00       |                 ldy.dx 00            
2005:000 | DONE ins | em 16  8 | 005602 | e8          |                 inx                  
2006:000 | DONE ins | em 16  8 | 005603 | e8          |                 inx                  
2007:000 | DONE wsp | em 16  8 |        |             |
2008:000 | DONE lbl | em 16  8 | 005604 |             | z_c-comma                            
2008:001 | DONE ins | em 16  8 | 005604 | 60          |                 rts                  
2009:000 | DONE wsp | em 16  8 |        |             |
2010:000 | DONE wsp | em 16  8 |        |             |
2011:000 | DONE cmt | em 16  8 |        |             | ; -------------------------------------------------------------------
2012:000 | DONE cmt | em 16  8 |        |             | ; C@ "C-FETCH" ( addr -- n ) 11 bytes / 16 cycles
2013:000 | DONE cmt | em 16  8 |        |             | ; Get a single byte from the given address
2014:000 | DONE lbl | em 16  8 | 005605 |             | xt_c-fetch                           
2015:000 | DONE ins | em 16  8 | 005605 | e2 20       |                 sep 20               
2015:001 | DONE ctl | em  8  8 |        |             |         .!a8
2016:000 | DONE ins | em  8  8 | 005607 | b9 00 00    |                 lda.y 0000           
2017:000 | DONE ins | em  8  8 | 00560a | c2 20       |                 rep 20               
2017:001 | DONE ctl | em 16  8 |        |             |         .!a16
2018:000 | DONE ins | em 16  8 | 00560c | 29 ff 00    |                 and.# 00ff           
2019:000 | DONE ins | em 16  8 | 00560f | a8          |                 tay                  
2020:000 | DONE wsp | em 16  8 |        |             |
2021:000 | DONE lbl | em 16  8 | 005610 |             | z_c-fetch                            
2021:001 | DONE ins | em 16  8 | 005610 | 60          |                 rts                  
2022:000 | DONE wsp | em 16  8 |        |             |
2023:000 | DONE wsp | em 16  8 |        |             |
2024:000 | DONE cmt | em 16  8 |        |             | ; -------------------------------------------------------------------
2025:000 | DONE cmt | em 16  8 |        |             | ; C! "C-STORE" ( n addr -- ) 15 bytes / 29 cycles
2026:000 | DONE cmt | em 16  8 |        |             | ; Store LSB of NOS at location given as TOS
2027:000 | DONE lbl | em 16  8 | 005611 |             | xt_c-store                           
2028:000 | DONE ins | em 16  8 | 005611 | b5 00       |                 lda.dx 00            
2029:000 | DONE ins | em 16  8 | 005613 | e2 20       |                 sep 20               
2029:001 | DONE ctl | em  8  8 |        |             |         .!a8
2030:000 | DONE ins | em  8  8 | 005615 | 99 00 00    |                 sta.y 0000           
2031:000 | DONE ins | em  8  8 | 005618 | c2 20       |                 rep 20               
2031:001 | DONE ctl | em 16  8 |        |             |         .!a16
2032:000 | DONE ins | em 16  8 | 00561a | b4 02       |                 ldy.dx 02            
2033:000 | DONE ins | em 16  8 | 00561c | e8          |                 inx                  
2034:000 | DONE ins | em 16  8 | 00561d | e8          |                 inx                  
2035:000 | DONE ins | em 16  8 | 00561e | e8          |                 inx                  
2036:000 | DONE ins | em 16  8 | 00561f | e8          |                 inx                  
2037:000 | DONE wsp | em 16  8 |        |             |
2038:000 | DONE lbl | em 16  8 | 005620 |             | z_c-store                            
2038:001 | DONE ins | em 16  8 | 005620 | 60          |                 rts                  
2039:000 | DONE wsp | em 16  8 |        |             |
2040:000 | DONE wsp | em 16  8 |        |             |
2041:000 | DONE cmt | em 16  8 |        |             | ; -------------------------------------------------------------------
2042:000 | DONE cmt | em 16  8 |        |             | ; CELL+ ( u -- u+2 ) X bytes / X cycles
2043:000 | DONE cmt | em 16  8 |        |             | ; Add the size of one cell to the value on top of the stack. Since this is
2044:000 | DONE cmt | em 16  8 |        |             | ; a 16-bit cell size, we add two
2045:000 | DONE lbl | em 16  8 | 005621 |             | xt_cellplus                          
2046:000 | DONE ins | em 16  8 | 005621 | c8          |                 iny                  
2047:000 | DONE ins | em 16  8 | 005622 | c8          |                 iny                  
2048:000 | DONE wsp | em 16  8 |        |             |
2049:000 | DONE lbl | em 16  8 | 005623 |             | z_cellplus                           
2049:001 | DONE ins | em 16  8 | 005623 | 60          |                 rts                  
2050:000 | DONE wsp | em 16  8 |        |             |
2051:000 | DONE wsp | em 16  8 |        |             |
2052:000 | DONE cmt | em 16  8 |        |             | ; -------------------------------------------------------------------
2053:000 | DONE cmt | em 16  8 |        |             | ; CELLS ( n -- n ) X bytes / X cycles
2054:000 | DONE cmt | em 16  8 |        |             | ; Given a number of cells, return the number of bytes that they will require.
2055:000 | DONE cmt | em 16  8 |        |             | ; This is 16 bit cell Forth, so the value returned by this word is the same as
2056:000 | DONE cmt | em 16  8 |        |             | ; returned by 2*, see there.
2057:000 | DONE wsp | em 16  8 |        |             |
2058:000 | DONE cmt | em 16  8 |        |             | ; -------------------------------------------------------------------
2059:000 | DONE cmt | em 16  8 |        |             | ; CHAR ( "c" -- u ) 23 bytes / X cycles
2060:000 | DONE cmt | em 16  8 |        |             | ; Convert a character to its ASCII value
2061:000 | DONE lbl | em 16  8 | 005624 |             | xt_char                              
2062:000 | DONE dir | em 16  8 |        |             |         .!a16                        
2063:000 | DONE ins | em 16  8 | 005624 | 20 6e 5c    |                 jsr 005c6e           ( -- addr u )
2064:000 | DONE wsp | em 16  8 |        |             |
2065:000 | DONE cmt | em 16  8 |        |             |                 ; if we got back a zero, we have a problem
2066:000 | DONE ins | em 16  8 | 005627 | 98          |                 tya                  force flag check
2067:000 | DONE ins | em 16  8 | 005628 | d0 06       |                 bne 005630           
2068:000 | DONE wsp | em 16  8 |        |             |
2069:000 | DONE ins | em 16  8 | 00562a | a9 1d 71    |                 lda.# 00711d         
2070:000 | DONE ins | em 16  8 | 00562d | 4c 21 6a    |                 jmp 006a21           
2071:000 | DONE wsp | em 16  8 |        |             |
2072:000 | DONE lbl | em 16  8 | 005630 |             | char_got_char                        
2073:000 | DONE ins | em 16  8 | 005630 | b4 00       |                 ldy.dx 00            get addr from NOS
2074:000 | DONE ins | em 16  8 | 005632 | b9 00 00    |                 lda.y 0000           LDA 0000,Y - could be C@
2075:000 | DONE ins | em 16  8 | 005635 | 29 ff 00    |                 and.# 00ff           
2076:000 | DONE ins | em 16  8 | 005638 | a8          |                 tay                  
2077:000 | DONE wsp | em 16  8 |        |             |
2078:000 | DONE ins | em 16  8 | 005639 | e8          |                 inx                  
2079:000 | DONE ins | em 16  8 | 00563a | e8          |                 inx                  
2080:000 | DONE wsp | em 16  8 |        |             |
2081:000 | DONE lbl | em 16  8 | 00563b |             | z_char                               
2081:001 | DONE ins | em 16  8 | 00563b | 60          |                 rts                  
2082:000 | DONE wsp | em 16  8 |        |             |
2083:000 | DONE wsp | em 16  8 |        |             |
2084:000 | DONE cmt | em 16  8 |        |             | ; -------------------------------------------------------------------
2085:000 | DONE cmt | em 16  8 |        |             | ; CHARPLUS ( u -- u+1 ) X bytes / X cycles
2086:000 | DONE cmt | em 16  8 |        |             | ; Adds the size of a character to the value on top of the stack. Since our
2087:000 | DONE cmt | em 16  8 |        |             | ; character size is one, this is the same code as 1+, see there
2088:000 | DONE wsp | em 16  8 |        |             |
2089:000 | DONE wsp | em 16  8 |        |             |
2090:000 | DONE cmt | em 16  8 |        |             | ; -------------------------------------------------------------------
2091:000 | DONE cmt | em 16  8 |        |             | ; CHARS ( u -- u ) X bytes / X cycles
2092:000 | DONE cmt | em 16  8 |        |             | ; Return the size in bytes of the number of characters on the top of the stack.
2093:000 | DONE cmt | em 16  8 |        |             | ; In this case, does nothing
2094:000 | DONE lbl | em 16  8 | 00563c |             | xt_chars                             
2095:000 | DONE wsp | em 16  8 |        |             |
2096:000 | DONE ins | em 16  8 | 00563c | ea          |                 nop                  will be removed during native compile
2097:000 | DONE lbl | em 16  8 | 00563d |             | z_chars                              
2097:001 | DONE ins | em 16  8 | 00563d | 60          |                 rts                  
2098:000 | DONE wsp | em 16  8 |        |             |
2099:000 | DONE cmt | em 16  8 |        |             | ; -------------------------------------------------------------------
2100:000 | DONE cmt | em 16  8 |        |             | ; CMOVE ( addr1 addr2 u -- ) X bytes / X cycles
2101:000 | DONE cmt | em 16  8 |        |             | ; Move characters from a lower to a higher address. Because of the danger of
2102:000 | DONE cmt | em 16  8 |        |             | ; overlap, we must start at the end of the source string (addr1+u) and copy
2103:000 | DONE cmt | em 16  8 |        |             | ; byte-by-byte to the end of the destination address (addr2+u). This is what the
2104:000 | DONE cmt | em 16  8 |        |             | ; MVP instruction is for. Use MOVE if you are not sure what to do.
2105:000 | DONE cmt | em 16  8 |        |             | ;       =====* source
2106:000 | DONE cmt | em 16  8 |        |             | ;          ====* destination
2107:000 | DONE lbl | em 16  8 | 00563e |             | xt_cmove                             
2108:000 | DONE cmt | em 16  8 |        |             |                 ; We start at the end of the blocks, so we have to increase both
2109:000 | DONE cmt | em 16  8 |        |             |                 ; addr1 and addr2 by u
2110:000 | DONE ins | em 16  8 | 00563e | 98          |                 tya                  
2111:000 | DONE ins | em 16  8 | 00563f | 18          |                 clc                  
2112:000 | DONE ins | em 16  8 | 005640 | 75 02       |                 adc.dx 02            source, goes in X
2113:000 | DONE ins | em 16  8 | 005642 | 3a          |                 dec.a                convert length to index
2114:000 | DONE ins | em 16  8 | 005643 | 95 02       |                 sta.dx 02            
2115:000 | DONE wsp | em 16  8 |        |             |
2116:000 | DONE ins | em 16  8 | 005645 | 98          |                 tya                  
2117:000 | DONE ins | em 16  8 | 005646 | 18          |                 clc                  
2118:000 | DONE ins | em 16  8 | 005647 | 75 00       |                 adc.dx 00            destination, goes in Y
2119:000 | DONE ins | em 16  8 | 005649 | 3a          |                 dec.a                convert length to index
2120:000 | DONE wsp | em 16  8 |        |             |
2121:000 | DONE ins | em 16  8 | 00564a | 86 22       |                 stx.d 000022         keep DSP safe
2122:000 | DONE wsp | em 16  8 |        |             |
2123:000 | DONE ins | em 16  8 | 00564c | 88          |                 dey                  
2124:000 | DONE ins | em 16  8 | 00564d | 5a          |                 phy                  save number of bytes to transfer
2125:000 | DONE wsp | em 16  8 |        |             |
2126:000 | DONE ins | em 16  8 | 00564e | a8          |                 tay                  destination now in Y
2127:000 | DONE wsp | em 16  8 |        |             |
2128:000 | DONE ins | em 16  8 | 00564f | b5 02       |                 lda.dx 02            get source address
2129:000 | DONE ins | em 16  8 | 005651 | aa          |                 tax                  
2130:000 | DONE wsp | em 16  8 |        |             |
2131:000 | DONE ins | em 16  8 | 005652 | 68          |                 pla                  retrieve number of bytes to transfer
2132:000 | DONE ins | em 16  8 | 005653 | 44 00 00    |                 mvp 0                
2132:001 | DONE ctl | em 16  8 |        |             |            
2133:000 | DONE wsp | em 16  8 |        |             |
2134:000 | DONE ins | em 16  8 | 005656 | a6 22       |                 ldx.d 000022         
2135:000 | DONE ins | em 16  8 | 005658 | b4 04       |                 ldy.dx 04            
2136:000 | DONE wsp | em 16  8 |        |             |
2137:000 | DONE ins | em 16  8 | 00565a | 8a          |                 txa                  It's worth addition for three cells dropped
2138:000 | DONE ins | em 16  8 | 00565b | 18          |                 clc                  
2139:000 | DONE ins | em 16  8 | 00565c | 69 06 00    |                 adc.# 0006           
2140:000 | DONE ins | em 16  8 | 00565f | aa          |                 tax                  
2141:000 | DONE wsp | em 16  8 |        |             |
2142:000 | DONE lbl | em 16  8 | 005660 |             | z_cmove                              
2142:001 | DONE ins | em 16  8 | 005660 | 60          |                 rts                  
2143:000 | DONE wsp | em 16  8 |        |             |
2144:000 | DONE cmt | em 16  8 |        |             | ; -------------------------------------------------------------------
2145:000 | DONE cmt | em 16  8 |        |             | ; CMOVE> ( addr1 addr 2 u -- ) X bytes / X cycles
2146:000 | DONE cmt | em 16  8 |        |             | ; Move characters from a higher to a lower address. Because of the danger of
2147:000 | DONE cmt | em 16  8 |        |             | ; overlap, we must start at the beginning of the source (addr1) to copy it
2148:000 | DONE cmt | em 16  8 |        |             | ; byte-by-byte to the beginning of the destination (addr2). This is what the MVN
2149:000 | DONE cmt | em 16  8 |        |             | ; instruction is for. Use MOVE if you are not sure what to do.
2150:000 | DONE cmt | em 16  8 |        |             | ;          *==== source
2151:000 | DONE cmt | em 16  8 |        |             | ;       *===== destination
2152:000 | DONE lbl | em 16  8 | 005661 |             | xt_cmoveup                           
2153:000 | DONE ins | em 16  8 | 005661 | 86 22       |                 stx.d 000022         keep DSP safe
2154:000 | DONE wsp | em 16  8 |        |             |
2155:000 | DONE ins | em 16  8 | 005663 | 88          |                 dey                  
2156:000 | DONE ins | em 16  8 | 005664 | 5a          |                 phy                  save number of bytes to transfer
2157:000 | DONE wsp | em 16  8 |        |             |
2158:000 | DONE ins | em 16  8 | 005665 | b5 00       |                 lda.dx 00            get destination address
2159:000 | DONE ins | em 16  8 | 005667 | a8          |                 tay                  
2160:000 | DONE wsp | em 16  8 |        |             |
2161:000 | DONE ins | em 16  8 | 005668 | b5 02       |                 lda.dx 02            get source address
2162:000 | DONE ins | em 16  8 | 00566a | aa          |                 tax                  
2163:000 | DONE wsp | em 16  8 |        |             |
2164:000 | DONE ins | em 16  8 | 00566b | 68          |                 pla                  retrieve number of bytes to transfer
2165:000 | DONE ins | em 16  8 | 00566c | 54 00 00    |                 mvn 0                
2165:001 | DONE ctl | em 16  8 |        |             |            
2166:000 | DONE wsp | em 16  8 |        |             |
2167:000 | DONE ins | em 16  8 | 00566f | a6 22       |                 ldx.d 000022         
2168:000 | DONE ins | em 16  8 | 005671 | b4 04       |                 ldy.dx 04            
2169:000 | DONE wsp | em 16  8 |        |             |
2170:000 | DONE ins | em 16  8 | 005673 | 8a          |                 txa                  It's worth addition for three cells dropped
2171:000 | DONE ins | em 16  8 | 005674 | 18          |                 clc                  
2172:000 | DONE ins | em 16  8 | 005675 | 69 06 00    |                 adc.# 0006           
2173:000 | DONE ins | em 16  8 | 005678 | aa          |                 tax                  
2174:000 | DONE wsp | em 16  8 |        |             |
2175:000 | DONE lbl | em 16  8 | 005679 |             | z_cmoveup                            
2175:001 | DONE ins | em 16  8 | 005679 | 60          |                 rts                  
2176:000 | DONE wsp | em 16  8 |        |             |
2177:000 | DONE wsp | em 16  8 |        |             |
2178:000 | DONE cmt | em 16  8 |        |             | ; -------------------------------------------------------------------
2179:000 | DONE cmt | em 16  8 |        |             | ; COMPILE-ONLY ( -- ) 8 bytes / X cycles
2180:000 | DONE cmt | em 16  8 |        |             | ; Mark the most recently defined word as COMPILE-ONLY. The alternative (and
2181:000 | DONE cmt | em 16  8 |        |             | ; traditional) way to do this is to include a word ?COMPILE that makes sure
2182:000 | DONE cmt | em 16  8 |        |             | ; we're in compile mode
2183:000 | DONE lbl | em 16  8 | 00567a |             | xt_compile-only                      
2184:000 | DONE dir | em 16  8 |        |             |         .!a16                        
2185:000 | DONE ins | em 16  8 | 00567a | a9 04 00    |                 lda.# CO             
2186:000 | DONE ins | em 16  8 | 00567d | eb          |                 xba                  flags are MSB
2187:000 | DONE ins | em 16  8 | 00567e | 12 02       |                 ora.di 000002        ORA (DP)
2188:000 | DONE ins | em 16  8 | 005680 | 92 02       |                 sta.di 000002        
2189:000 | DONE wsp | em 16  8 |        |             |
2190:000 | DONE lbl | em 16  8 | 005682 |             | z_compile-only                       
2190:001 | DONE ins | em 16  8 | 005682 | 60          |                 rts                  
2191:000 | DONE wsp | em 16  8 |        |             |
2192:000 | DONE wsp | em 16  8 |        |             |
2193:000 | DONE cmt | em 16  8 |        |             | ; -------------------------------------------------------------------
2194:000 | DONE cmt | em 16  8 |        |             | ; COMPILE, ( xt -- ) X bytes / X cycles
2195:000 | DONE wsp | em 16  8 |        |             |
2196:000 | DONE cmt | em 16  8 |        |             | ; Compile a given xt in the current word definition. It is an error if we are
2197:000 | DONE cmt | em 16  8 |        |             | ; not in the compile state. Because we are using subroutine threading, we can't
2198:000 | DONE cmt | em 16  8 |        |             | ; use , (COMMA) to compile new words the traditional way. We use the NC (Native
2199:000 | DONE cmt | em 16  8 |        |             | ; Compile) flag to decide if native compilation is allowed. If yes, we use the
2200:000 | DONE cmt | em 16  8 |        |             | ; value NC_LIMIT (in definitions.tasm) to decide if the code is too large to be
2201:000 | DONE cmt | em 16  8 |        |             | ; natively coded: If the size is larger than NC_LIMIT, we silently use
2202:000 | DONE cmt | em 16  8 |        |             | ; subroutine coding. If the FN (Force Native) flag is set, the word is always
2203:000 | DONE cmt | em 16  8 |        |             | ; natively compiled
2204:000 | DONE cmt | em 16  8 |        |             | ; TODO currently just compiles subroutine jumps
2205:000 | DONE lbl | em 16  8 | 005683 |             | xt_compilecomma                      
2206:000 | DONE dir | em 16  8 |        |             |         .!a16                        
2207:000 | DONE cmt | em 16  8 |        |             |                 ; First, see if this is Force Native compile word by checking
2208:000 | DONE cmt | em 16  8 |        |             |                 ; the FN flag. We need the nt for this
2209:000 | DONE ins | em 16  8 | 005683 | 5a          |                 phy                  save copy of xt
2210:000 | DONE wsp | em 16  8 |        |             |
2211:000 | DONE ins | em 16  8 | 005684 | 20 72 5a    |                 jsr 005a72           ( xt -- nt )
2212:000 | DONE wsp | em 16  8 |        |             |
2213:000 | DONE ins | em 16  8 | 005687 | b9 00 00    |                 lda.y 0000           Get content of nt
2214:000 | DONE ins | em 16  8 | 00568a | eb          |                 xba                  flags are MSB
2215:000 | DONE ins | em 16  8 | 00568b | 29 08 00    |                 and.# FN             mask everything but Compile Only bit
2216:000 | DONE ins | em 16  8 | 00568e | d0 12       |                 bne 0056a2           
2217:000 | DONE wsp | em 16  8 |        |             |
2218:000 | DONE cmt | em 16  8 |        |             |                 ; Now see if native compile is even allowed by checking the NC
2219:000 | DONE cmt | em 16  8 |        |             |                 ; flag
2220:000 | DONE ins | em 16  8 | 005690 | b9 00 00    |                 lda.y 0000           
2221:000 | DONE ins | em 16  8 | 005693 | eb          |                 xba                  
2222:000 | DONE ins | em 16  8 | 005694 | 29 01 00    |                 and.# NC             
2223:000 | DONE ins | em 16  8 | 005697 | f0 62       |                 beq 0056fb           
2224:000 | DONE wsp | em 16  8 |        |             |
2225:000 | DONE cmt | em 16  8 |        |             |                 ; Native compile is legal, but we have to see what limit the
2226:000 | DONE cmt | em 16  8 |        |             |                 ; user set. WORDSIZE takes nt
2227:000 | DONE ins | em 16  8 | 005699 | 20 60 60    |                 jsr 006060           ( nt -- u )
2228:000 | DONE ins | em 16  8 | 00569c | 98          |                 tya                  
2229:000 | DONE ins | em 16  8 | 00569d | 18          |                 clc                  
2230:000 | DONE ins | em 16  8 | 00569e | c5 26       |                 cmp.d 000026         
2231:000 | DONE ins | em 16  8 | 0056a0 | b0 59       |                 bcs 0056fb           if too large, compile as a jump
2232:000 | DONE wsp | em 16  8 |        |             |
2233:000 | DONE lbl | em 16  8 | 0056a2 |             | compile_as_code                      
2234:000 | DONE cmt | em 16  8 |        |             |                 ; We arrive here with the length of the word TOS ( u ) and xt on
2235:000 | DONE cmt | em 16  8 |        |             |                 ; top of the return stack. MOVE will need ( xt cp u ) on the
2236:000 | DONE cmt | em 16  8 |        |             |                 ; Data Stack
2237:000 | DONE ins | em 16  8 | 0056a2 | ca          |                 dex                  
2238:000 | DONE ins | em 16  8 | 0056a3 | ca          |                 dex                  
2239:000 | DONE ins | em 16  8 | 0056a4 | 68          |                 pla                  
2240:000 | DONE ins | em 16  8 | 0056a5 | 95 00       |                 sta.dx 00            ( xt u )
2241:000 | DONE wsp | em 16  8 |        |             |
2242:000 | DONE ins | em 16  8 | 0056a7 | ca          |                 dex                  
2243:000 | DONE ins | em 16  8 | 0056a8 | ca          |                 dex                  
2244:000 | DONE ins | em 16  8 | 0056a9 | a5 00       |                 lda.d 000000         
2245:000 | DONE ins | em 16  8 | 0056ab | 95 00       |                 sta.dx 00            ( xt cp u )
2246:000 | DONE wsp | em 16  8 |        |             |
2247:000 | DONE wsp | em 16  8 |        |             |
2248:000 | DONE cmt | em 16  8 |        |             |                 ; --- SPECIAL CASES ---
2249:000 | DONE wsp | em 16  8 |        |             |
2250:000 | DONE cmt | em 16  8 |        |             |                 ; 1. Don't compile NOP instructions: Length of code is 1, and
2251:000 | DONE cmt | em 16  8 |        |             |                 ; the instruction is $EA
2252:000 | DONE ins | em 16  8 | 0056ad | 98          |                 tya                  
2253:000 | DONE ins | em 16  8 | 0056ae | 3a          |                 dec.a                
2254:000 | DONE ins | em 16  8 | 0056af | d0 14       |                 bne 0056c5           
2255:000 | DONE wsp | em 16  8 |        |             |
2256:000 | DONE ins | em 16  8 | 0056b1 | a1 02       |                 lda.dxi 02           
2257:000 | DONE ins | em 16  8 | 0056b3 | 29 ff 00    |                 and.# 00ff           
2258:000 | DONE ins | em 16  8 | 0056b6 | c9 ea 00    |                 cmp.# 00ea           opcode for NOP
2259:000 | DONE ins | em 16  8 | 0056b9 | d0 0a       |                 bne 0056c5           
2260:000 | DONE wsp | em 16  8 |        |             |
2261:000 | DONE cmt | em 16  8 |        |             |                 ; It's a single NOP. Clear the data stack and return
2262:000 | DONE ins | em 16  8 | 0056bb | b4 04       |                 ldy.dx 04            
2263:000 | DONE ins | em 16  8 | 0056bd | 8a          |                 txa                  
2264:000 | DONE ins | em 16  8 | 0056be | 18          |                 clc                  
2265:000 | DONE ins | em 16  8 | 0056bf | 69 06 00    |                 adc.# 0006           
2266:000 | DONE ins | em 16  8 | 0056c2 | aa          |                 tax                  
2267:000 | DONE wsp | em 16  8 |        |             |
2268:000 | DONE ins | em 16  8 | 0056c3 | 80 4c       |                 bra 005711           
2269:000 | DONE wsp | em 16  8 |        |             |
2270:000 | DONE lbl | em 16  8 | 0056c5 |             | compile_not_nop                      
2271:000 | DONE wsp | em 16  8 |        |             |
2272:000 | DONE cmt | em 16  8 |        |             |                 ; 2. Strip PLA/PHA off >R and R>
2273:000 | DONE ins | em 16  8 | 0056c5 | b5 02       |                 lda.dx 02            get xt
2274:000 | DONE ins | em 16  8 | 0056c7 | c9 c0 51    |                 cmp.# 0051c0         
2275:000 | DONE ins | em 16  8 | 0056ca | f0 11       |                 beq 0056dd           
2276:000 | DONE ins | em 16  8 | 0056cc | c9 30 5d    |                 cmp.# 005d30         
2277:000 | DONE ins | em 16  8 | 0056cf | f0 0c       |                 beq 0056dd           
2278:000 | DONE wsp | em 16  8 |        |             |
2279:000 | DONE cmt | em 16  8 |        |             |                 ; 3. Strip off stuff from 2>R and 2R>
2280:000 | DONE ins | em 16  8 | 0056d1 | c9 fe 53    |                 cmp.# 0053fe         
2281:000 | DONE ins | em 16  8 | 0056d4 | f0 0d       |                 beq 0056e3           
2282:000 | DONE ins | em 16  8 | 0056d6 | c9 2e 54    |                 cmp.# 00542e         
2283:000 | DONE ins | em 16  8 | 0056d9 | f0 08       |                 beq 0056e3           
2284:000 | DONE wsp | em 16  8 |        |             |
2285:000 | DONE ins | em 16  8 | 0056db | 80 12       |                 bra 0056ef           not a special case
2286:000 | DONE wsp | em 16  8 |        |             |
2287:000 | DONE lbl | em 16  8 | 0056dd |             | compile_r                            
2288:000 | DONE cmt | em 16  8 |        |             |                 ; We have either >R or R>. To simplify, drop the first and last
2289:000 | DONE cmt | em 16  8 |        |             |                 ; instruction (one byte).
2290:000 | DONE ins | em 16  8 | 0056dd | f6 02       |                 inc.dx 02            start one byte later
2291:000 | DONE ins | em 16  8 | 0056df | 88          |                 dey                  transfer two bytes less
2292:000 | DONE ins | em 16  8 | 0056e0 | 88          |                 dey                  
2293:000 | DONE ins | em 16  8 | 0056e1 | 80 0c       |                 bra 0056ef           
2294:000 | DONE wsp | em 16  8 |        |             |
2295:000 | DONE lbl | em 16  8 | 0056e3 |             | compile_2r                           
2296:000 | DONE cmt | em 16  8 |        |             |                 ; We have either 2>R or 2R>. To simplify, drop the first and
2297:000 | DONE cmt | em 16  8 |        |             |                 ; last three bytes
2298:000 | DONE ins | em 16  8 | 0056e3 | f6 02       |                 inc.dx 02            
2299:000 | DONE ins | em 16  8 | 0056e5 | f6 02       |                 inc.dx 02            
2300:000 | DONE ins | em 16  8 | 0056e7 | f6 02       |                 inc.dx 02            
2301:000 | DONE ins | em 16  8 | 0056e9 | 98          |                 tya                  
2302:000 | DONE ins | em 16  8 | 0056ea | 38          |                 sec                  
2303:000 | DONE ins | em 16  8 | 0056eb | e9 06 00    |                 sbc.# 0006           
2304:000 | DONE ins | em 16  8 | 0056ee | a8          |                 tay                  fall through to compile_move
2305:000 | DONE wsp | em 16  8 |        |             |
2306:000 | DONE lbl | em 16  8 | 0056ef |             | compile_move                         
2307:000 | DONE cmt | em 16  8 |        |             |                 ; Enough of this, compile the word already
2308:000 | DONE wsp | em 16  8 |        |             |
2309:000 | DONE ins | em 16  8 | 0056ef | 5a          |                 phy                  we need a copy of length for the CP
2310:000 | DONE wsp | em 16  8 |        |             |
2311:000 | DONE ins | em 16  8 | 0056f0 | 20 72 5b    |                 jsr 005b72           ( xt cp u -- )
2312:000 | DONE wsp | em 16  8 |        |             |
2313:000 | DONE ins | em 16  8 | 0056f3 | 68          |                 pla                  
2314:000 | DONE ins | em 16  8 | 0056f4 | 18          |                 clc                  update CP
2315:000 | DONE ins | em 16  8 | 0056f5 | 65 00       |                 adc.d 000000         
2316:000 | DONE ins | em 16  8 | 0056f7 | 85 00       |                 sta.d 000000         
2317:000 | DONE wsp | em 16  8 |        |             |
2318:000 | DONE ins | em 16  8 | 0056f9 | 80 16       |                 bra 005711           
2319:000 | DONE wsp | em 16  8 |        |             |
2320:000 | DONE lbl | em 16  8 | 0056fb |             | compile_as_jump                      
2321:000 | DONE cmt | em 16  8 |        |             |                 ; Compile xt as a subroutine jump.
2322:000 | DONE ins | em 16  8 | 0056fb | 7a          |                 ply                  get xt back
2323:000 | DONE ins | em 16  8 | 0056fc | e2 20       |                 sep 20               
2323:001 | DONE ctl | em  8  8 |        |             |         .!a8
2324:000 | DONE ins | em  8  8 | 0056fe | a9 20       |                 lda.# 20             opcode for JSR
2325:000 | DONE ins | em  8  8 | 005700 | 92 00       |                 sta.di 000000        STA (CP)
2326:000 | DONE ins | em  8  8 | 005702 | c2 20       |                 rep 20               
2326:001 | DONE ctl | em 16  8 |        |             |         .!a16
2327:000 | DONE ins | em 16  8 | 005704 | e6 00       |                 inc.d 000000         
2328:000 | DONE wsp | em 16  8 |        |             |
2329:000 | DONE cmt | em 16  8 |        |             |                 ; There is no "sty.di" instruction, so we have to do this the
2330:000 | DONE cmt | em 16  8 |        |             |                 ; hard way
2331:000 | DONE ins | em 16  8 | 005706 | 98          |                 tya                  
2332:000 | DONE ins | em 16  8 | 005707 | 92 00       |                 sta.di 000000        
2333:000 | DONE ins | em 16  8 | 005709 | e6 00       |                 inc.d 000000         
2334:000 | DONE ins | em 16  8 | 00570b | e6 00       |                 inc.d 000000         
2335:000 | DONE wsp | em 16  8 |        |             |
2336:000 | DONE ins | em 16  8 | 00570d | b4 00       |                 ldy.dx 00            
2337:000 | DONE ins | em 16  8 | 00570f | e8          |                 inx                  
2338:000 | DONE ins | em 16  8 | 005710 | e8          |                 inx                  
2339:000 | DONE wsp | em 16  8 |        |             |
2340:000 | DONE lbl | em 16  8 | 005711 |             | z_compilecomma                       
2340:001 | DONE ins | em 16  8 | 005711 | 60          |                 rts                  
2341:000 | DONE wsp | em 16  8 |        |             |
2342:000 | DONE wsp | em 16  8 |        |             |
2343:000 | DONE cmt | em 16  8 |        |             | ; -------------------------------------------------------------------
2344:000 | DONE cmt | em 16  8 |        |             | ; CONSTANT ( "name" n -- ) X bytes / X cycles
2345:000 | DONE cmt | em 16  8 |        |             | ; Associate a fixed value with a word. This could be realized as
2346:000 | DONE cmt | em 16  8 |        |             | ; CREATE , DOES> @  as well. We do more in assembler but let CREATE do the heavy
2347:000 | DONE cmt | em 16  8 |        |             | ; lifting.
2348:000 | DONE cmt | em 16  8 |        |             | ; See http://www.bradrodriguez.com/papers/moving3.htm for a primer on how
2349:000 | DONE cmt | em 16  8 |        |             | ; this works in various Forths.
2350:000 | DONE lbl | em 16  8 | 005712 |             | xt_constant                          
2351:000 | DONE ins | em 16  8 | 005712 | 20 56 57    |                 jsr 005756           
2352:000 | DONE wsp | em 16  8 |        |             |
2353:000 | DONE cmt | em 16  8 |        |             |                 ; CREATE by default installs a subroutine jump to DOVAR, but we
2354:000 | DONE cmt | em 16  8 |        |             |                 ; actually want DOCONST this time. Go back two bytes and repace
2355:000 | DONE cmt | em 16  8 |        |             |                 ; the subroutine jump target
2356:000 | DONE ins | em 16  8 | 005715 | a5 00       |                 lda.d 000000         
2357:000 | DONE ins | em 16  8 | 005717 | 3a          |                 dec.a                
2358:000 | DONE ins | em 16  8 | 005718 | 3a          |                 dec.a                
2359:000 | DONE ins | em 16  8 | 005719 | 85 1c       |                 sta.d 00001c         
2360:000 | DONE wsp | em 16  8 |        |             |
2361:000 | DONE ins | em 16  8 | 00571b | a9 6b 69    |                 lda.# 00696b         
2362:000 | DONE ins | em 16  8 | 00571e | 92 1c       |                 sta.di 00001c        STA (TMP1)
2363:000 | DONE wsp | em 16  8 |        |             |
2364:000 | DONE cmt | em 16  8 |        |             |                 ; Save TOS in next cell. This is a direct version of COMMA
2365:000 | DONE ins | em 16  8 | 005720 | 98          |                 tya                  there is no "sty.di cp"
2366:000 | DONE ins | em 16  8 | 005721 | 92 00       |                 sta.di 000000        
2367:000 | DONE ins | em 16  8 | 005723 | e6 00       |                 inc.d 000000         
2368:000 | DONE ins | em 16  8 | 005725 | e6 00       |                 inc.d 000000         
2369:000 | DONE wsp | em 16  8 |        |             |
2370:000 | DONE ins | em 16  8 | 005727 | b4 00       |                 ldy.dx 00            DROP
2371:000 | DONE ins | em 16  8 | 005729 | e8          |                 inx                  
2372:000 | DONE ins | em 16  8 | 00572a | e8          |                 inx                  drop through to adjust_z
2373:000 | DONE wsp | em 16  8 |        |             |
2374:000 | DONE cmt | em 16  8 |        |             |                 ; Now the length of the complete word (z_word) has increased by
2375:000 | DONE cmt | em 16  8 |        |             |                 ; two. We need to update that number or else words such as SEE
2376:000 | DONE cmt | em 16  8 |        |             |                 ; will ignore the PFA. We use this same routine for VARIABLE,
2377:000 | DONE cmt | em 16  8 |        |             |                 ; VALUE and DEFER
2378:000 | DONE lbl | em 16  8 | 00572b |             | adjust_z                             
2379:000 | DONE ins | em 16  8 | 00572b | 20 b7 5a    |                 jsr 005ab7           gives us ( nt )
2380:000 | DONE wsp | em 16  8 |        |             |
2381:000 | DONE cmt | em 16  8 |        |             |                 ; z_word is kept six bytes further down
2382:000 | DONE ins | em 16  8 | 00572e | 98          |                 tya                  
2383:000 | DONE ins | em 16  8 | 00572f | 18          |                 clc                  
2384:000 | DONE ins | em 16  8 | 005730 | 69 06 00    |                 adc.# 0006           
2385:000 | DONE ins | em 16  8 | 005733 | a8          |                 tay                  
2386:000 | DONE wsp | em 16  8 |        |             |
2387:000 | DONE ins | em 16  8 | 005734 | b9 00 00    |                 lda.y 0000           LDA 0000,Y
2388:000 | DONE ins | em 16  8 | 005737 | 1a          |                 inc.a                
2389:000 | DONE ins | em 16  8 | 005738 | 1a          |                 inc.a                
2390:000 | DONE ins | em 16  8 | 005739 | 99 00 00    |                 sta.y 0000           
2391:000 | DONE wsp | em 16  8 |        |             |
2392:000 | DONE ins | em 16  8 | 00573c | b4 00       |                 ldy.dx 00            get rid of nt
2393:000 | DONE ins | em 16  8 | 00573e | e8          |                 inx                  
2394:000 | DONE ins | em 16  8 | 00573f | e8          |                 inx                  
2395:000 | DONE wsp | em 16  8 |        |             |
2396:000 | DONE lbl | em 16  8 | 005740 |             | z_constant                           
2396:001 | DONE ins | em 16  8 | 005740 | 60          |                 rts                  
2397:000 | DONE wsp | em 16  8 |        |             |
2398:000 | DONE wsp | em 16  8 |        |             |
2399:000 | DONE cmt | em 16  8 |        |             | ; -------------------------------------------------------------------
2400:000 | DONE cmt | em 16  8 |        |             | ; COUNT ( c-addr -- addr u ) 14 bytes / X cycles
2401:000 | DONE cmt | em 16  8 |        |             | ; Convert old-style character string to address-length pair. Note that the
2402:000 | DONE cmt | em 16  8 |        |             | ; length of the string c-addr ist stored in character length (8 bit), not cell
2403:000 | DONE cmt | em 16  8 |        |             | ; length (16 bit). This is rarely used these days, though COUNT can also be used
2404:000 | DONE cmt | em 16  8 |        |             | ; to step through a string character by character.
2405:000 | DONE lbl | em 16  8 | 005741 |             | xt_count                             
2406:000 | DONE dir | em 16  8 |        |             |         .!a16                        
2407:000 | DONE dir | em 16 16 |        |             |         .!xy16                       
2408:000 | DONE ins | em 16 16 | 005741 | 98          |                 tya                  
2409:000 | DONE ins | em 16 16 | 005742 | 1a          |                 inc.a                String address starts one char later
2410:000 | DONE wsp | em 16 16 |        |             |
2411:000 | DONE ins | em 16 16 | 005743 | ca          |                 dex                  
2412:000 | DONE ins | em 16 16 | 005744 | ca          |                 dex                  
2413:000 | DONE ins | em 16 16 | 005745 | 95 00       |                 sta.dx 00            NOS
2414:000 | DONE wsp | em 16 16 |        |             |
2415:000 | DONE ins | em 16 16 | 005747 | b9 00 00    |                 lda.y 0000           LDA $0000,Y  first byte is length
2416:000 | DONE ins | em 16 16 | 00574a | 29 ff 00    |                 and.# 00ff           get rid of whatever was MSB
2417:000 | DONE ins | em 16 16 | 00574d | a8          |                 tay                  TOS
2418:000 | DONE wsp | em 16 16 |        |             |
2419:000 | DONE lbl | em 16 16 | 00574e |             | z_count                              
2419:001 | DONE ins | em 16 16 | 00574e | 60          |                 rts                  
2420:000 | DONE wsp | em 16 16 |        |             |
2421:000 | DONE wsp | em 16 16 |        |             |
2422:000 | DONE cmt | em 16 16 |        |             | ; -------------------------------------------------------------------
2423:000 | DONE cmt | em 16 16 |        |             | ; CR ( -- ) X bytes / X cycles
2424:000 | DONE cmt | em 16 16 |        |             | ; Cause following output to appear at beginning of next line
2425:000 | DONE lbl | em 16 16 | 00574f |             | xt_cr                                
2426:000 | DONE ins | em 16 16 | 00574f | a9 0a 00    |                 lda.# AscLF          test with AscCR for emulators
2427:000 | DONE ins | em 16 16 | 005752 | 20 09 59    |                 jsr 005909           
2428:000 | DONE wsp | em 16 16 |        |             |
2429:000 | DONE lbl | em 16 16 | 005755 |             | z_cr                                 
2429:001 | DONE ins | em 16 16 | 005755 | 60          |                 rts                  
2430:000 | DONE wsp | em 16 16 |        |             |
2431:000 | DONE cmt | em 16 16 |        |             | ; -------------------------------------------------------------------
2432:000 | DONE cmt | em 16 16 |        |             | ; CREATE ( "name" -- ) X bytes / X cycles
2433:000 | DONE cmt | em 16 16 |        |             | ; Create a Dictionary entry associated with "name", used for various words,
2434:000 | DONE cmt | em 16 16 |        |             | ; especially for VARIABLE. When called, this new word will return the associated
2435:000 | DONE cmt | em 16 16 |        |             | ; address.
2436:000 | DONE lbl | em 16 16 | 005756 |             | xt_create                            
2437:000 | DONE dir | em 16 16 |        |             |         .!a16                        
2438:000 | DONE ins | em 16 16 | 005756 | 20 6e 5c    |                 jsr 005c6e           ( -- addr u )
2439:000 | DONE ins | em 16 16 | 005759 | d0 06       |                 bne 005761           
2440:000 | DONE wsp | em 16 16 |        |             |
2441:000 | DONE cmt | em 16 16 |        |             |                 ; if we got a zero-length name string, complain and abort
2442:000 | DONE ins | em 16 16 | 00575b | a9 1d 71    |                 lda.# 00711d         
2443:000 | DONE ins | em 16 16 | 00575e | 4c 21 6a    |                 jmp 006a21           
2444:000 | DONE wsp | em 16 16 |        |             |
2445:000 | DONE lbl | em 16 16 | 005761 |             | create_got_name                      
2446:000 | DONE cmt | em 16 16 |        |             |                 ; Remember the first free byte of memory as the start of the new
2447:000 | DONE cmt | em 16 16 |        |             |                 ; word
2448:000 | DONE ins | em 16 16 | 005761 | a5 00       |                 lda.d 000000         
2449:000 | DONE ins | em 16 16 | 005763 | 85 1c       |                 sta.d 00001c         save start of new word
2450:000 | DONE wsp | em 16 16 |        |             |
2451:000 | DONE cmt | em 16 16 |        |             |                 ; Enforce limit on 255 char length names by masking the MSB
2452:000 | DONE cmt | em 16 16 |        |             |                 ; of the length of the given string. We arrive here with
2453:000 | DONE cmt | em 16 16 |        |             |                 ; ( addr u )
2454:000 | DONE ins | em 16 16 | 005765 | 98          |                 tya                  
2455:000 | DONE ins | em 16 16 | 005766 | 29 ff 00    |                 and.# 00ff           
2456:000 | DONE ins | em 16 16 | 005769 | 85 1e       |                 sta.d 00001e         save length of name string
2457:000 | DONE wsp | em 16 16 |        |             |
2458:000 | DONE cmt | em 16 16 |        |             |                 ; We need 8 bytes + the length of the name string for our new
2459:000 | DONE cmt | em 16 16 |        |             |                 ; header. This is also the offset for the start of the code
2460:000 | DONE cmt | em 16 16 |        |             |                 ; field (the xt_ label) so we need to remember it. Otherwise, we
2461:000 | DONE cmt | em 16 16 |        |             |                 ; could just allot the space afterwards.
2462:000 | DONE ins | em 16 16 | 00576b | 18          |                 clc                  
2463:000 | DONE ins | em 16 16 | 00576c | 69 08 00    |                 adc.# 0008           
2464:000 | DONE ins | em 16 16 | 00576f | 85 20       |                 sta.d 000020         total bytes required for header
2465:000 | DONE wsp | em 16 16 |        |             |
2466:000 | DONE cmt | em 16 16 |        |             |                 ; We need to allocate three more bytes for the hardcoded
2467:000 | DONE cmt | em 16 16 |        |             |                 ; code field area (CFA), the "payload" of the word which by
2468:000 | DONE cmt | em 16 16 |        |             |                 ; default will be a subroutine jump to DOVAR
2469:000 | DONE ins | em 16 16 | 005771 | 1a          |                 inc.a                
2470:000 | DONE ins | em 16 16 | 005772 | 1a          |                 inc.a                
2471:000 | DONE ins | em 16 16 | 005773 | 1a          |                 inc.a                
2472:000 | DONE wsp | em 16 16 |        |             |
2473:000 | DONE cmt | em 16 16 |        |             |                 ; Instead of jumping to ALLOT, we do things by hand for speed
2474:000 | DONE cmt | em 16 16 |        |             |                 ; and so we don't have to fool around with the stack
2475:000 | DONE ins | em 16 16 | 005774 | 18          |                 clc                  
2476:000 | DONE ins | em 16 16 | 005775 | 65 00       |                 adc.d 000000         
2477:000 | DONE ins | em 16 16 | 005777 | 85 00       |                 sta.d 000000         
2478:000 | DONE wsp | em 16 16 |        |             |
2479:000 | DONE cmt | em 16 16 |        |             |                 ; Now we walk through the header, using Y as the index. See
2480:000 | DONE cmt | em 16 16 |        |             |                 ; drawing of header in headers.tasm file for reference. We
2481:000 | DONE cmt | em 16 16 |        |             |                 ; arrive here with ( addr u ) still from PARSE-NAME. We need
2482:000 | DONE cmt | em 16 16 |        |             |                 ; that addr later for the name string, so we push it to the
2483:000 | DONE cmt | em 16 16 |        |             |                 ; Return Stack. We'll clean up the Data Stack later
2484:000 | DONE ins | em 16 16 | 005779 | b5 00       |                 lda.dx 00            
2485:000 | DONE ins | em 16 16 | 00577b | 48          |                 pha                  
2486:000 | DONE wsp | em 16 16 |        |             |
2487:000 | DONE cmt | em 16 16 |        |             |                 ; HEADER BYTES 0,1: Length byte and flags
2488:000 | DONE ins | em 16 16 | 00577c | a0 00 00    |                 ldy.# 0000           Y is now an index, not TOS
2489:000 | DONE ins | em 16 16 | 00577f | a5 1e       |                 lda.d 00001e         get length byte
2490:000 | DONE ins | em 16 16 | 005781 | 91 1c       |                 sta.diy 00001c       STA (TMP1),Y
2491:000 | DONE ins | em 16 16 | 005783 | c8          |                 iny                  
2492:000 | DONE ins | em 16 16 | 005784 | c8          |                 iny                  
2493:000 | DONE wsp | em 16 16 |        |             |
2494:000 | DONE cmt | em 16 16 |        |             |                 ; BYTES 2,3: Next word in the dictionary (its nt). This is the
2495:000 | DONE cmt | em 16 16 |        |             |                 ; current Dictionary Pointer
2496:000 | DONE ins | em 16 16 | 005785 | a5 02       |                 lda.d 000002         
2497:000 | DONE ins | em 16 16 | 005787 | 91 1c       |                 sta.diy 00001c       
2498:000 | DONE ins | em 16 16 | 005789 | c8          |                 iny                  
2499:000 | DONE ins | em 16 16 | 00578a | c8          |                 iny                  
2500:000 | DONE wsp | em 16 16 |        |             |
2501:000 | DONE cmt | em 16 16 |        |             |                 ; BYTES 4,5: Start of code field (xt of this word, "xt_" link)
2502:000 | DONE cmt | em 16 16 |        |             |                 ; This begins after the header, so we take the length of the
2503:000 | DONE cmt | em 16 16 |        |             |                 ; header, which we saved in tmp3, and use it as an offset to
2504:000 | DONE cmt | em 16 16 |        |             |                 ; the address of the start of the word
2505:000 | DONE ins | em 16 16 | 00578b | a5 1c       |                 lda.d 00001c         can't use CP, because we've allotted space
2506:000 | DONE ins | em 16 16 | 00578d | 85 02       |                 sta.d 000002         while we've got it, make old CP the new DP
2507:000 | DONE wsp | em 16 16 |        |             |
2508:000 | DONE ins | em 16 16 | 00578f | 18          |                 clc                  
2509:000 | DONE ins | em 16 16 | 005790 | 65 20       |                 adc.d 000020         total header length
2510:000 | DONE ins | em 16 16 | 005792 | 91 1c       |                 sta.diy 00001c       
2511:000 | DONE ins | em 16 16 | 005794 | c8          |                 iny                  
2512:000 | DONE ins | em 16 16 | 005795 | c8          |                 iny                  
2513:000 | DONE wsp | em 16 16 |        |             |
2514:000 | DONE cmt | em 16 16 |        |             |                 ; BYTES 6,7: End of code ("z_" link)
2515:000 | DONE cmt | em 16 16 |        |             |                 ; By default, we execute a jump to the DOVAR routine, so we need
2516:000 | DONE cmt | em 16 16 |        |             |                 ; to move three bytes down, and then one more byte so the z_
2517:000 | DONE cmt | em 16 16 |        |             |                 ; label points to the (fictional) RTS instruction for correct
2518:000 | DONE cmt | em 16 16 |        |             |                 ; compilation. The start of the code field is still in A
2519:000 | DONE ins | em 16 16 | 005796 | 1a          |                 inc.a                
2520:000 | DONE ins | em 16 16 | 005797 | 1a          |                 inc.a                
2521:000 | DONE ins | em 16 16 | 005798 | 1a          |                 inc.a                
2522:000 | DONE ins | em 16 16 | 005799 | 91 1c       |                 sta.diy 00001c       
2523:000 | DONE ins | em 16 16 | 00579b | c8          |                 iny                  
2524:000 | DONE ins | em 16 16 | 00579c | c8          |                 iny                  
2525:000 | DONE wsp | em 16 16 |        |             |
2526:000 | DONE cmt | em 16 16 |        |             |                 ; BYTE 8: Start of name string
2527:000 | DONE cmt | em 16 16 |        |             |                 ; The addr of the string is on the Return Stack, the length of
2528:000 | DONE cmt | em 16 16 |        |             |                 ; the name string is in tmp2. We subtract eight from the address
2529:000 | DONE cmt | em 16 16 |        |             |                 ; so we can use the same loop index
2530:000 | DONE ins | em 16 16 | 00579d | 68          |                 pla                  get back string address
2531:000 | DONE ins | em 16 16 | 00579e | 38          |                 sec                  
2532:000 | DONE ins | em 16 16 | 00579f | e9 08 00    |                 sbc.# 0008           
2533:000 | DONE ins | em 16 16 | 0057a2 | 85 20       |                 sta.d 000020         
2534:000 | DONE ins | em 16 16 | 0057a4 | e2 20       |                 sep 20               
2534:001 | DONE ctl | em  8 16 |        |             |         .!a8
2535:000 | DONE lbl | em  8 16 | 0057a6 |             | @                                    
2536:000 | DONE ins | em  8 16 | 0057a6 | b1 20       |                 lda.diy 000020       
2537:000 | DONE ins | em  8 16 | 0057a8 | 91 1c       |                 sta.diy 00001c       
2538:000 | DONE ins | em  8 16 | 0057aa | c8          |                 iny                  
2539:000 | DONE ins | em  8 16 | 0057ab | c6 1e       |                 dec.d 00001e         
2540:000 | DONE ins | em  8 16 | 0057ad | d0 f7       |                 bne 0057a6           
2541:000 | DONE wsp | em  8 16 |        |             |
2542:000 | DONE cmt | em  8 16 |        |             |                 ; After the name string, comes the Code Field (start at xt, that
2543:000 | DONE cmt | em  8 16 |        |             |                 ; is, the xt_ label of the word) which is initially a jump to the
2544:000 | DONE cmt | em  8 16 |        |             |                 ; subroutine to DOVAR. We're still in 8-bit A-register, which is
2545:000 | DONE cmt | em  8 16 |        |             |                 ; good
2546:000 | DONE ins | em  8 16 | 0057af | a9 20       |                 lda.# 20             opcode of JSR
2547:000 | DONE ins | em  8 16 | 0057b1 | 91 1c       |                 sta.diy 00001c       
2548:000 | DONE ins | em  8 16 | 0057b3 | c8          |                 iny                  single increase only because we have 8-bit A
2549:000 | DONE wsp | em  8 16 |        |             |
2550:000 | DONE ins | em  8 16 | 0057b4 | a9 95       |                 lda.# .lsb 006995    
2551:000 | DONE ins | em  8 16 | 0057b6 | 91 1c       |                 sta.diy 00001c       
2552:000 | DONE ins | em  8 16 | 0057b8 | c8          |                 iny                  
2553:000 | DONE wsp | em  8 16 |        |             |
2554:000 | DONE ins | em  8 16 | 0057b9 | a9 69       |                 lda.# .msb 006995    
2555:000 | DONE ins | em  8 16 | 0057bb | 91 1c       |                 sta.diy 00001c       
2556:000 | DONE wsp | em  8 16 |        |             |
2557:000 | DONE ins | em  8 16 | 0057bd | c2 20       |                 rep 20               
2557:001 | DONE ctl | em 16 16 |        |             |         .!a16
2558:000 | DONE cmt | em 16 16 |        |             |                 ; We're done. Restore Data Stack (2DROP)
2559:000 | DONE ins | em 16 16 | 0057bf | b4 02       |                 ldy.dx 02            
2560:000 | DONE ins | em 16 16 | 0057c1 | e8          |                 inx                  
2561:000 | DONE ins | em 16 16 | 0057c2 | e8          |                 inx                  
2562:000 | DONE ins | em 16 16 | 0057c3 | e8          |                 inx                  
2563:000 | DONE ins | em 16 16 | 0057c4 | e8          |                 inx                  
2564:000 | DONE wsp | em 16 16 |        |             |
2565:000 | DONE lbl | em 16 16 | 0057c5 |             | z_create                             
2565:001 | DONE ins | em 16 16 | 0057c5 | 60          |                 rts                  
2566:000 | DONE wsp | em 16 16 |        |             |
2567:000 | DONE wsp | em 16 16 |        |             |
2568:000 | DONE cmt | em 16 16 |        |             | ; -------------------------------------------------------------------
2569:000 | DONE cmt | em 16 16 |        |             | ; DEFER ( "name" -- ) X bytes / X cycles
2570:000 | DONE cmt | em 16 16 |        |             | ; Reserve an name that can be linked to various xt by IS. The ANSI reference
2571:000 | DONE cmt | em 16 16 |        |             | ; implementation is CREATE ['] ABORT , DOES> @ EXECUTE ; but we use this as
2572:000 | DONE cmt | em 16 16 |        |             | ; a low-level word so we can set stuff up earlier and faster
2573:000 | DONE lbl | em 16 16 | 0057c6 |             | xt_defer                             
2574:000 | DONE ins | em 16 16 | 0057c6 | 20 56 57    |                 jsr 005756           
2575:000 | DONE wsp | em 16 16 |        |             |
2576:000 | DONE cmt | em 16 16 |        |             |                 ; CREATE by default installs a subroutine jump to DOVAR, but we
2577:000 | DONE cmt | em 16 16 |        |             |                 ; actually want DODEFER this time. Go back two bytes and repace
2578:000 | DONE cmt | em 16 16 |        |             |                 ; the subroutine jump target
2579:000 | DONE ins | em 16 16 | 0057c9 | a5 00       |                 lda.d 000000         
2580:000 | DONE ins | em 16 16 | 0057cb | 3a          |                 dec.a                
2581:000 | DONE ins | em 16 16 | 0057cc | 3a          |                 dec.a                
2582:000 | DONE ins | em 16 16 | 0057cd | 85 1c       |                 sta.d 00001c         
2583:000 | DONE wsp | em 16 16 |        |             |
2584:000 | DONE ins | em 16 16 | 0057cf | a9 79 69    |                 lda.# 006979         
2585:000 | DONE ins | em 16 16 | 0057d2 | 92 1c       |                 sta.di 00001c        STA (TMP1)
2586:000 | DONE wsp | em 16 16 |        |             |
2587:000 | DONE cmt | em 16 16 |        |             |                 ; DODEFER executes the next address it finds after its call. As
2588:000 | DONE cmt | em 16 16 |        |             |                 ; a default, we include the error "Defer not defined"
2589:000 | DONE ins | em 16 16 | 0057d4 | a9 82 69    |                 lda.# 006982         
2590:000 | DONE ins | em 16 16 | 0057d7 | 92 00       |                 sta.di 000000        
2591:000 | DONE ins | em 16 16 | 0057d9 | e6 00       |                 inc.d 000000         
2592:000 | DONE ins | em 16 16 | 0057db | e6 00       |                 inc.d 000000         
2593:000 | DONE wsp | em 16 16 |        |             |
2594:000 | DONE ins | em 16 16 | 0057dd | 20 2b 57    |                 jsr 00572b           adjust the header to the correct length
2595:000 | DONE wsp | em 16 16 |        |             |
2596:000 | DONE lbl | em 16 16 | 0057e0 |             | z_defer                              
2596:001 | DONE ins | em 16 16 | 0057e0 | 60          |                 rts                  
2597:000 | DONE wsp | em 16 16 |        |             |
2598:000 | DONE wsp | em 16 16 |        |             |
2599:000 | DONE cmt | em 16 16 |        |             | ; -------------------------------------------------------------------
2600:000 | DONE cmt | em 16 16 |        |             | ; DIGIT? ( char -- u f | char f )  X bytes / X cycles
2601:000 | DONE cmt | em 16 16 |        |             | ; Convert a single ASCII character to a number in the current radix. Inspired by
2602:000 | DONE cmt | em 16 16 |        |             | ; the pForth instruction DIGIT in pForth, see
2603:000 | DONE cmt | em 16 16 |        |             | ; https://github.com/philburk/pforth/blob/master/fth/numberio.fth
2604:000 | DONE cmt | em 16 16 |        |             | ; Rewritten from DIGIT>NUMBER in Tali Forth. Note in contrast to pForth, we get
2605:000 | DONE cmt | em 16 16 |        |             | ; the base (radix) ourselves instead of having the user provide it. There is no
2606:000 | DONE cmt | em 16 16 |        |             | ; standard name for this routine, which itself is not ANSI; we use DIGIT?
2607:000 | DONE cmt | em 16 16 |        |             | ; following pForth and Gforth.
2608:000 | DONE lbl | em 16 16 | 0057e1 |             | xt_digitq                            
2609:000 | DONE dir | em 16 16 |        |             |         .!a16                        
2610:000 | DONE ins | em 16 16 | 0057e1 | 98          |                 tya                  
2611:000 | DONE ins | em 16 16 | 0057e2 | 29 ff 00    |                 and.# 00ff           paranoid
2612:000 | DONE wsp | em 16 16 |        |             |
2613:000 | DONE ins | em 16 16 | 0057e5 | e2 20       |                 sep 20               
2613:001 | DONE ctl | em  8 16 |        |             |         .!a8
2614:000 | DONE cmt | em  8 16 |        |             |                 ; Make sure we're not below the ASCII code for '0'
2615:000 | DONE ins | em  8 16 | 0057e7 | c9 30       |                 cmp.# 30             
2616:000 | DONE ins | em  8 16 | 0057e9 | 90 1d       |                 bcc 005808           
2617:000 | DONE wsp | em  8 16 |        |             |
2618:000 | DONE cmt | em  8 16 |        |             |                 ; Then see if we are below '9', because that would make this
2619:000 | DONE cmt | em  8 16 |        |             |                 ; a normal number
2620:000 | DONE ins | em  8 16 | 0057eb | c9 3a       |                 cmp.# 00003a         This is ':'
2621:000 | DONE ins | em  8 16 | 0057ed | 90 12       |                 bcc 005801           
2622:000 | DONE wsp | em  8 16 |        |             |
2623:000 | DONE cmt | em  8 16 |        |             |                 ; Well, then let's see if this is the gap between '9' and 'A' so
2624:000 | DONE cmt | em  8 16 |        |             |                 ; we can treat the whole range as a number
2625:000 | DONE ins | em  8 16 | 0057ef | c9 40       |                 cmp.# 000040         This is '@'
2626:000 | DONE ins | em  8 16 | 0057f1 | 90 15       |                 bcc 005808           
2627:000 | DONE wsp | em  8 16 |        |             |
2628:000 | DONE cmt | em  8 16 |        |             |                 ; Probably a letter, so we make sure it is uppercase
2629:000 | DONE ins | em  8 16 | 0057f3 | c9 61       |                 cmp.# 61             
2630:000 | DONE ins | em  8 16 | 0057f5 | 90 07       |                 bcc 0057fe           not lower case, too low
2631:000 | DONE ins | em  8 16 | 0057f7 | c9 7b       |                 cmp.# 00007b         
2632:000 | DONE ins | em  8 16 | 0057f9 | b0 03       |                 bcs 0057fe           not lower case, too high
2633:000 | DONE wsp | em  8 16 |        |             |
2634:000 | DONE ins | em  8 16 | 0057fb | 18          |                 clc                  just right
2635:000 | DONE ins | em  8 16 | 0057fc | 69 e0       |                 adc.# e0             offset to uppercase (wraps)
2636:000 | DONE wsp | em  8 16 |        |             |
2637:000 | DONE lbl | em  8 16 | 0057fe |             | dq_case_done                         
2638:000 | DONE cmt | em  8 16 |        |             |                 ; Get rid of the gap between '9' and 'A' so we can treat the
2639:000 | DONE cmt | em  8 16 |        |             |                 ; whole range as one number
2640:000 | DONE ins | em  8 16 | 0057fe | 38          |                 sec                  
2641:000 | DONE ins | em  8 16 | 0057ff | e9 07       |                 sbc.# 07             fall through to dq_checkbase
2642:000 | DONE wsp | em  8 16 |        |             |
2643:000 | DONE lbl | em  8 16 | 005801 |             | dq_checkbase                         
2644:000 | DONE cmt | em  8 16 |        |             |                 ; We have a number, now see if it inside the range given by BASE
2645:000 | DONE ins | em  8 16 | 005801 | 38          |                 sec                  
2646:000 | DONE ins | em  8 16 | 005802 | e9 30       |                 sbc.# 30             This is also the actual conversion step
2647:000 | DONE ins | em  8 16 | 005804 | c5 16       |                 cmp.d 000016         
2648:000 | DONE ins | em  8 16 | 005806 | 90 0b       |                 bcc 005813           
2649:000 | DONE wsp | em  8 16 |        |             |
2650:000 | DONE lbl | em  8 16 | 005808 |             | dq_notdigit                          
2651:000 | DONE cmt | em  8 16 |        |             |                 ; not a digit, add a false flag
2652:000 | DONE ins | em  8 16 | 005808 | ca          |                 dex                  
2653:000 | DONE ins | em  8 16 | 005809 | ca          |                 dex                  
2654:000 | DONE ins | em  8 16 | 00580a | 94 00       |                 sty.dx 00            keep the offending character in NOS
2655:000 | DONE ins | em  8 16 | 00580c | a0 00 00    |                 ldy.# 0000           
2656:000 | DONE ins | em  8 16 | 00580f | c2 20       |                 rep 20               
2656:001 | DONE ctl | em 16 16 |        |             |         .!a16
2657:000 | DONE ins | em 16 16 | 005811 | 80 09       |                 bra 00581c           
2658:000 | DONE wsp | em 16 16 |        |             |
2659:000 | DONE lbl | em 16 16 | 005813 |             | dq_success                           
2660:000 | DONE ins | em 16 16 | 005813 | ca          |                 dex                  
2661:000 | DONE ins | em 16 16 | 005814 | ca          |                 dex                  
2662:000 | DONE ins | em 16 16 | 005815 | c2 20       |                 rep 20               
2662:001 | DONE ctl | em 16 16 |        |             |         .!a16
2663:000 | DONE ins | em 16 16 | 005817 | 95 00       |                 sta.dx 00            put the number in NOS
2664:000 | DONE ins | em 16 16 | 005819 | a0 ff ff    |                 ldy.# 0ffff          
2665:000 | DONE wsp | em 16 16 |        |             |
2666:000 | DONE lbl | em 16 16 | 00581c |             | z_digitq                             
2666:001 | DONE ins | em 16 16 | 00581c | 60          |                 rts                  
2667:000 | DONE wsp | em 16 16 |        |             |
2668:000 | DONE wsp | em 16 16 |        |             |
2669:000 | DONE cmt | em 16 16 |        |             | ; -------------------------------------------------------------------
2670:000 | DONE cmt | em 16 16 |        |             | ; DPLUS ( d d -- d ) X bytes / X cycles
2671:000 | DONE cmt | em 16 16 |        |             | ; Add two double cell numbers
2672:000 | DONE lbl | em 16 16 | 00581d |             | xt_dplus                             
2673:000 | DONE dir | em 16 16 |        |             |         .!a16                        
2674:000 | DONE ins | em 16 16 | 00581d | 5a          |                 phy                  save hi word of first number, frees Y
2675:000 | DONE ins | em 16 16 | 00581e | b5 00       |                 lda.dx 00            lo word of first number
2676:000 | DONE ins | em 16 16 | 005820 | 18          |                 clc                  
2677:000 | DONE ins | em 16 16 | 005821 | 75 04       |                 adc.dx 04            add lo word of second number
2678:000 | DONE ins | em 16 16 | 005823 | a8          |                 tay                  
2679:000 | DONE wsp | em 16 16 |        |             |
2680:000 | DONE ins | em 16 16 | 005824 | 68          |                 pla                  get hi word of first number
2681:000 | DONE ins | em 16 16 | 005825 | 75 02       |                 adc.dx 02            add hi word of second number
2682:000 | DONE wsp | em 16 16 |        |             |
2683:000 | DONE ins | em 16 16 | 005827 | e8          |                 inx                  
2684:000 | DONE ins | em 16 16 | 005828 | e8          |                 inx                  
2685:000 | DONE ins | em 16 16 | 005829 | e8          |                 inx                  
2686:000 | DONE ins | em 16 16 | 00582a | e8          |                 inx                  
2687:000 | DONE wsp | em 16 16 |        |             |
2688:000 | DONE ins | em 16 16 | 00582b | 94 00       |                 sty.dx 00            lo result goes NOS
2689:000 | DONE ins | em 16 16 | 00582d | a8          |                 tay                  to result goes TOS
2690:000 | DONE wsp | em 16 16 |        |             |
2691:000 | DONE lbl | em 16 16 | 00582e |             | z_dplus                              
2691:001 | DONE ins | em 16 16 | 00582e | 60          |                 rts                  
2692:000 | DONE wsp | em 16 16 |        |             |
2693:000 | DONE cmt | em 16 16 |        |             | ; -------------------------------------------------------------------
2694:000 | DONE cmt | em 16 16 |        |             | ; DMINUS ( d d -- d ) X bytes / X cycles
2695:000 | DONE cmt | em 16 16 |        |             | ; Subtract two double cell numbers
2696:000 | DONE lbl | em 16 16 | 00582f |             | xt_dminus                            
2697:000 | DONE dir | em 16 16 |        |             |         .!a16                        
2698:000 | DONE ins | em 16 16 | 00582f | b5 04       |                 lda.dx 04            lo word NOS
2699:000 | DONE ins | em 16 16 | 005831 | 38          |                 sec                  
2700:000 | DONE ins | em 16 16 | 005832 | f5 00       |                 sbc.dx 00            lo word TOS
2701:000 | DONE ins | em 16 16 | 005834 | 48          |                 pha                  
2702:000 | DONE wsp | em 16 16 |        |             |
2703:000 | DONE ins | em 16 16 | 005835 | 94 00       |                 sty.dx 00            use as temp storage for hi word TOS
2704:000 | DONE ins | em 16 16 | 005837 | b5 02       |                 lda.dx 02            hi word, NOS
2705:000 | DONE ins | em 16 16 | 005839 | f5 00       |                 sbc.dx 00            hi word, TOS
2706:000 | DONE ins | em 16 16 | 00583b | a8          |                 tay                  result hi word now TOS
2707:000 | DONE wsp | em 16 16 |        |             |
2708:000 | DONE ins | em 16 16 | 00583c | e8          |                 inx                  
2709:000 | DONE ins | em 16 16 | 00583d | e8          |                 inx                  
2710:000 | DONE ins | em 16 16 | 00583e | e8          |                 inx                  
2711:000 | DONE ins | em 16 16 | 00583f | e8          |                 inx                  
2712:000 | DONE wsp | em 16 16 |        |             |
2713:000 | DONE ins | em 16 16 | 005840 | 68          |                 pla                  
2714:000 | DONE ins | em 16 16 | 005841 | 95 00       |                 sta.dx 00            result lo word now NOS
2715:000 | DONE wsp | em 16 16 |        |             |
2716:000 | DONE lbl | em 16 16 | 005843 |             | z_dminus                             
2716:001 | DONE ins | em 16 16 | 005843 | 60          |                 rts                  
2717:000 | DONE wsp | em 16 16 |        |             |
2718:000 | DONE wsp | em 16 16 |        |             |
2719:000 | DONE cmt | em 16 16 |        |             | ; -------------------------------------------------------------------
2720:000 | DONE cmt | em 16 16 |        |             | ; D>S ( ud -- u ) X bytes / X cycles
2721:000 | DONE cmt | em 16 16 |        |             | ; Convert double cell number to single cell. Note this currently does not
2722:000 | DONE cmt | em 16 16 |        |             | ; respect the sign, in constrast to Gforth - this is simply DROP
2723:000 | DONE cmt | em 16 16 |        |             | ; TODO make this work the way Gforth's does
2724:000 | DONE lbl | em 16 16 | 005844 |             | xt_dtos                              
2725:000 | DONE dir | em 16 16 |        |             |         .!a16                        
2726:000 | DONE ins | em 16 16 | 005844 | b4 00       |                 ldy.dx 00            
2727:000 | DONE ins | em 16 16 | 005846 | e8          |                 inx                  
2728:000 | DONE ins | em 16 16 | 005847 | e8          |                 inx                  
2729:000 | DONE wsp | em 16 16 |        |             |
2730:000 | DONE lbl | em 16 16 | 005848 |             | z_dtos                               
2730:001 | DONE ins | em 16 16 | 005848 | 60          |                 rts                  
2731:000 | DONE wsp | em 16 16 |        |             |
2732:000 | DONE wsp | em 16 16 |        |             |
2733:000 | DONE cmt | em 16 16 |        |             | ; -------------------------------------------------------------------
2734:000 | DONE cmt | em 16 16 |        |             | ; DABS ( d -- ud ) X bytes / X cycles
2735:000 | DONE cmt | em 16 16 |        |             | ; Return the absolute value of a double number
2736:000 | DONE cmt | em 16 16 |        |             | ; TODO recode in assembler
2737:000 | DONE lbl | em 16 16 | 005849 |             | xt_dabs                              
2738:000 | DONE cmt | em 16 16 |        |             |                 ; double cell is TOS
2739:000 | DONE ins | em 16 16 | 005849 | 98          |                 tya                  force flag test
2740:000 | DONE ins | em 16 16 | 00584a | f0 03       |                 beq 00584f           already positive, life is good
2741:000 | DONE wsp | em 16 16 |        |             |
2742:000 | DONE ins | em 16 16 | 00584c | 20 65 58    |                 jsr 005865           
2743:000 | DONE wsp | em 16 16 |        |             |
2744:000 | DONE lbl | em 16 16 | 00584f |             | z_dabs                               
2744:001 | DONE ins | em 16 16 | 00584f | 60          |                 rts                  
2745:000 | DONE wsp | em 16 16 |        |             |
2746:000 | DONE wsp | em 16 16 |        |             |
2747:000 | DONE cmt | em 16 16 |        |             | ; -------------------------------------------------------------------
2748:000 | DONE cmt | em 16 16 |        |             | ; DECIMAL ( -- ) 7 bytes / X cycles
2749:000 | DONE cmt | em 16 16 |        |             | ; Change radix for number conversion to 10
2750:000 | DONE lbl | em 16 16 | 005850 |             | xt_decimal                           
2751:000 | DONE dir | em 16 16 |        |             |         .!a16                        
2752:000 | DONE ins | em 16 16 | 005850 | a9 0a 00    |                 lda.# 000a           
2753:000 | DONE ins | em 16 16 | 005853 | 85 16       |                 sta.d 000016         
2754:000 | DONE wsp | em 16 16 |        |             |
2755:000 | DONE lbl | em 16 16 | 005855 |             | z_decimal                            
2755:001 | DONE ins | em 16 16 | 005855 | 60          |                 rts                  
2756:000 | DONE wsp | em 16 16 |        |             |
2757:000 | DONE wsp | em 16 16 |        |             |
2758:000 | DONE cmt | em 16 16 |        |             | ; -------------------------------------------------------------------
2759:000 | DONE cmt | em 16 16 |        |             | ; DEPTH ( -- u ) 14 bytes / X cycles
2760:000 | DONE cmt | em 16 16 |        |             | ; Push the number of entries in cells (not bytes) on the parameter stack.
2761:000 | DONE cmt | em 16 16 |        |             | ; Assumes X is valid as the DSP.
2762:000 | DONE lbl | em 16 16 | 005856 |             | xt_depth                             
2763:000 | DONE dir | em 16 16 |        |             |         .!a16                        
2764:000 | DONE cmt | em 16 16 |        |             |                 ; We've got zero entries when X is dsp0
2765:000 | DONE ins | em 16 16 | 005856 | 86 22       |                 stx.d 000022         
2766:000 | DONE ins | em 16 16 | 005858 | a9 ff 00    |                 lda.# 0000ff         
2767:000 | DONE ins | em 16 16 | 00585b | 38          |                 sec                  
2768:000 | DONE ins | em 16 16 | 00585c | e5 22       |                 sbc.d 000022         
2769:000 | DONE wsp | em 16 16 |        |             |
2770:000 | DONE cmt | em 16 16 |        |             |                 ; now divide by two because each cells is to bytes long
2771:000 | DONE ins | em 16 16 | 00585e | 4a          |                 lsr.a                
2772:000 | DONE wsp | em 16 16 |        |             |
2773:000 | DONE ins | em 16 16 | 00585f | ca          |                 dex                  
2774:000 | DONE ins | em 16 16 | 005860 | ca          |                 dex                  
2775:000 | DONE ins | em 16 16 | 005861 | 94 00       |                 sty.dx 00            
2776:000 | DONE wsp | em 16 16 |        |             |
2777:000 | DONE cmt | em 16 16 |        |             |                 ; push result to stack
2778:000 | DONE ins | em 16 16 | 005863 | a8          |                 tay                  
2779:000 | DONE wsp | em 16 16 |        |             |
2780:000 | DONE lbl | em 16 16 | 005864 |             | z_depth                              
2780:001 | DONE ins | em 16 16 | 005864 | 60          |                 rts                  
2781:000 | DONE wsp | em 16 16 |        |             |
2782:000 | DONE cmt | em 16 16 |        |             | ; -------------------------------------------------------------------
2783:000 | DONE cmt | em 16 16 |        |             | ; DNEGATE ( d -- d ) 19 bytes / X cycles
2784:000 | DONE cmt | em 16 16 |        |             | ; Change the sign of a double number. This is the double equivalent of NEGATE
2785:000 | DONE lbl | em 16 16 | 005865 |             | xt_dnegate                           
2786:000 | DONE dir | em 16 16 |        |             |         .!a16                        
2787:000 | DONE cmt | em 16 16 |        |             |                 ; start off with LSW (in NOS)
2788:000 | DONE ins | em 16 16 | 005865 | b5 00       |                 lda.dx 00            
2789:000 | DONE ins | em 16 16 | 005867 | 49 ff ff    |                 eor.# 0ffff          
2790:000 | DONE wsp | em 16 16 |        |             |
2791:000 | DONE cmt | em 16 16 |        |             |                 ; INC doesn't affect the carry flag, so we have to do this the
2792:000 | DONE cmt | em 16 16 |        |             |                 ; hard way
2793:000 | DONE ins | em 16 16 | 00586a | 18          |                 clc                  
2794:000 | DONE ins | em 16 16 | 00586b | 69 01 00    |                 adc.# 0001           
2795:000 | DONE ins | em 16 16 | 00586e | 95 00       |                 sta.dx 00            
2796:000 | DONE wsp | em 16 16 |        |             |
2797:000 | DONE cmt | em 16 16 |        |             |                 ; now MSW (in TOS)
2798:000 | DONE ins | em 16 16 | 005870 | 98          |                 tya                  
2799:000 | DONE ins | em 16 16 | 005871 | 49 ff ff    |                 eor.# 0ffff          
2800:000 | DONE ins | em 16 16 | 005874 | 69 00 00    |                 adc.# 0000           we are only interested in the carry
2801:000 | DONE ins | em 16 16 | 005877 | a8          |                 tay                  
2802:000 | DONE wsp | em 16 16 |        |             |
2803:000 | DONE lbl | em 16 16 | 005878 |             | z_dnegate                            
2803:001 | DONE ins | em 16 16 | 005878 | 60          |                 rts                  
2804:000 | DONE wsp | em 16 16 |        |             |
2805:000 | DONE wsp | em 16 16 |        |             |
2806:000 | DONE wsp | em 16 16 |        |             |
2807:000 | DONE cmt | em 16 16 |        |             | ; -------------------------------------------------------------------
2808:000 | DONE cmt | em 16 16 |        |             | ; ?DO ( limit start -- )  X bytes / X cycles
2809:000 | DONE cmt | em 16 16 |        |             | ; Compile-time part of ?DO. This may not be natively compiled.
2810:000 | DONE lbl | em 16 16 | 005879 |             | xt_qdo                               
2811:000 | DONE cmt | em 16 16 |        |             | 		; ?DO shares most of its code with DO. Use the tmp1 flag to
2812:000 | DONE cmt | em 16 16 |        |             |                 ; decide which is which
2813:000 | DONE ins | em 16 16 | 005879 | a9 ff ff    |                 lda.# 0ffff          
2814:000 | DONE ins | em 16 16 | 00587c | 85 1c       |                 sta.d 00001c         
2815:000 | DONE ins | em 16 16 | 00587e | 80 02       |                 bra 005882           continue with do_common
2816:000 | DONE wsp | em 16 16 |        |             |
2817:000 | DONE cmt | em 16 16 |        |             | ; -------------------------------------------------------------------
2818:000 | DONE cmt | em 16 16 |        |             | ; DO ( limit start -- )  X bytes / X cycles
2819:000 | DONE cmt | em 16 16 |        |             | ; Compile-time part of DO. ": DO POSTPONE (DO) HERE ; IMMEDIATE COMPILE-ONLY ;"
2820:000 | DONE cmt | em 16 16 |        |             | ; To work with LEAVE, we compile a routine that pushes the end address to the
2821:000 | DONE cmt | em 16 16 |        |             | ; Return Stack at run time. This is based on a suggestion by Garth Wilson, see
2822:000 | DONE cmt | em 16 16 |        |             | ; loops.txt for details. This may not be native compile.
2823:000 | DONE lbl | em 16 16 | 005880 |             | xt_do                                
2824:000 | DONE cmt | em 16 16 |        |             |                 ; DO and ?DO share most of their code, use tmp1 as a flag.
2825:000 | DONE ins | em 16 16 | 005880 | 64 1c       |                 stz.d 00001c         0 is DO, drop through to DO_COMMON
2826:000 | DONE wsp | em 16 16 |        |             |
2827:000 | DONE lbl | em 16 16 | 005882 |             | do_common                            
2828:000 | DONE cmt | em 16 16 |        |             |                 ; We start by compiling the opcode for LDA.# ($A9). Because
2829:000 | DONE cmt | em 16 16 |        |             |                 ; we're little endian, we don't have to switch registers sizes,
2830:000 | DONE cmt | em 16 16 |        |             |                 ; we just have to make sure the MSB will be overwritten
2831:000 | DONE ins | em 16 16 | 005882 | a9 a9 00    |                 lda.# 00a9           
2832:000 | DONE ins | em 16 16 | 005885 | 92 00       |                 sta.di 000000        
2833:000 | DONE ins | em 16 16 | 005887 | e6 00       |                 inc.d 000000         
2834:000 | DONE wsp | em 16 16 |        |             |
2835:000 | DONE cmt | em 16 16 |        |             |                 ; We push HERE to the Data Stack so LOOP/+LOOP knows where to
2836:000 | DONE cmt | em 16 16 |        |             |                 ; compile the address we need to LDA.# at runtime
2837:000 | DONE ins | em 16 16 | 005889 | ca          |                 dex                  
2838:000 | DONE ins | em 16 16 | 00588a | ca          |                 dex                  
2839:000 | DONE ins | em 16 16 | 00588b | 94 00       |                 sty.dx 00            
2840:000 | DONE ins | em 16 16 | 00588d | a4 00       |                 ldy.d 000000         
2841:000 | DONE wsp | em 16 16 |        |             |
2842:000 | DONE cmt | em 16 16 |        |             |                 ; Reserve two bytes for the address
2843:000 | DONE ins | em 16 16 | 00588f | e6 00       |                 inc.d 000000         
2844:000 | DONE ins | em 16 16 | 005891 | e6 00       |                 inc.d 000000         
2845:000 | DONE wsp | em 16 16 |        |             |
2846:000 | DONE cmt | em 16 16 |        |             |                 ; Save the opcode for PHA ($48)
2847:000 | DONE ins | em 16 16 | 005893 | a9 48 00    |                 lda.# 0048           
2848:000 | DONE ins | em 16 16 | 005896 | 92 00       |                 sta.di 000000        
2849:000 | DONE ins | em 16 16 | 005898 | e6 00       |                 inc.d 000000         
2850:000 | DONE wsp | em 16 16 |        |             |
2851:000 | DONE cmt | em 16 16 |        |             |                 ; compile (?DO) or (DO)
2852:000 | DONE ins | em 16 16 | 00589a | a5 1c       |                 lda.d 00001c         
2853:000 | DONE ins | em 16 16 | 00589c | f0 0a       |                 beq 0058a8           childish, yes
2854:000 | DONE wsp | em 16 16 |        |             |
2855:000 | DONE cmt | em 16 16 |        |             |                 ; compile (?DO) natively (Force Native)
2856:000 | DONE ins | em 16 16 | 00589e | ca          |                 dex                  
2857:000 | DONE ins | em 16 16 | 00589f | ca          |                 dex                  
2858:000 | DONE ins | em 16 16 | 0058a0 | 94 00       |                 sty.dx 00            
2859:000 | DONE ins | em 16 16 | 0058a2 | a0 ee 52    |                 ldy.# 0052ee         
2860:000 | DONE ins | em 16 16 | 0058a5 | 20 83 56    |                 jsr 005683           drops through to do_do
2861:000 | DONE wsp | em 16 16 |        |             |
2862:000 | DONE lbl | em 16 16 | 0058a8 |             | do_do                                
2863:000 | DONE cmt | em 16 16 |        |             |                 ; compile (DO) natively (Force Native)
2864:000 | DONE ins | em 16 16 | 0058a8 | ca          |                 dex                  
2865:000 | DONE ins | em 16 16 | 0058a9 | ca          |                 dex                  
2866:000 | DONE ins | em 16 16 | 0058aa | 94 00       |                 sty.dx 00            
2867:000 | DONE ins | em 16 16 | 0058ac | a0 fb 52    |                 ldy.# 0052fb         
2868:000 | DONE ins | em 16 16 | 0058af | 20 83 56    |                 jsr 005683           
2869:000 | DONE wsp | em 16 16 |        |             |
2870:000 | DONE cmt | em 16 16 |        |             |                 ; HERE. We put this on the Data Stack for LOOP/+LOOP. Note this
2871:000 | DONE cmt | em 16 16 |        |             |                 ; has nothing to do with the HERE we've saved for LEAVE
2872:000 | DONE ins | em 16 16 | 0058b2 | ca          |                 dex                  
2873:000 | DONE ins | em 16 16 | 0058b3 | ca          |                 dex                  
2874:000 | DONE ins | em 16 16 | 0058b4 | 94 00       |                 sty.dx 00            
2875:000 | DONE ins | em 16 16 | 0058b6 | a4 00       |                 ldy.d 000000         
2876:000 | DONE wsp | em 16 16 |        |             |
2877:000 | DONE lbl | em 16 16 | 0058b8 |             | z_qdo                                
2878:000 | DONE lbl | em 16 16 | 0058b8 |             | z_do                                 
2879:000 | DONE ins | em 16 16 | 0058b8 | 60          |                 rts                  
2880:000 | DONE wsp | em 16 16 |        |             |
2881:000 | DONE cmt | em 16 16 |        |             | ; -------------------------------------------------------------------
2882:000 | DONE cmt | em 16 16 |        |             | ; DOES> ( -- ) X bytes / X cycles
2883:000 | DONE cmt | em 16 16 |        |             | ; Create the payload for defining new defining words. See the file
2884:000 | DONE cmt | em 16 16 |        |             | ; docs/create-does.txt and
2885:000 | DONE cmt | em 16 16 |        |             | ; http://www.bradrodriguez.com/papers/moving3.htm for a discussion of
2886:000 | DONE cmt | em 16 16 |        |             | ; DOES>'s internal workings. This uses tmp1 and tmp2
2887:000 | DONE cmt | em 16 16 |        |             | ; TODO see if this creates a correct z_word address
2888:000 | DONE lbl | em 16 16 | 0058b9 |             | xt_does                              
2889:000 | DONE cmt | em 16 16 |        |             |                 ; compile a subroutine jump to the runtime of DOES>
2890:000 | DONE ins | em 16 16 | 0058b9 | f4 c6 58    |                 phe.# 0058c6         
2891:000 | DONE ins | em 16 16 | 0058bc | 20 00 6a    |                 jsr 006a00           
2892:000 | DONE wsp | em 16 16 |        |             |
2893:000 | DONE cmt | em 16 16 |        |             |                 ; compile a subroutine jump to DODOES. In traditional terms,
2894:000 | DONE cmt | em 16 16 |        |             |                 ; this is the Code Field Area (CFA) of the new word
2895:000 | DONE ins | em 16 16 | 0058bf | f4 88 69    |                 phe.# 006988         
2896:000 | DONE ins | em 16 16 | 0058c2 | 20 00 6a    |                 jsr 006a00           
2897:000 | DONE wsp | em 16 16 |        |             |
2898:000 | DONE lbl | em 16 16 | 0058c5 |             | z_does                               
2898:001 | DONE ins | em 16 16 | 0058c5 | 60          |                 rts                  
2899:000 | DONE wsp | em 16 16 |        |             |
2900:000 | DONE lbl | em 16 16 | 0058c6 |             | does_rt                              
2901:000 | DONE cmt | em 16 16 |        |             |                 ; Runtime portion of DOES>. This replaces the subroutine jump to
2902:000 | DONE cmt | em 16 16 |        |             |                 ; DOVAR that CREATE automatically encodes by a jump to the
2903:000 | DONE cmt | em 16 16 |        |             |                 ; address that contains a subroutine jump to DODOES. We don't
2904:000 | DONE cmt | em 16 16 |        |             |                 ; jump to DODOES directly because we need to work our magic with
2905:000 | DONE cmt | em 16 16 |        |             |                 ; the return addresses
2906:000 | DONE ins | em 16 16 | 0058c6 | 68          |                 pla                  
2907:000 | DONE ins | em 16 16 | 0058c7 | 1a          |                 inc.a                increase by one because of RTS mechanics
2908:000 | DONE ins | em 16 16 | 0058c8 | 85 1c       |                 sta.d 00001c         
2909:000 | DONE wsp | em 16 16 |        |             |
2910:000 | DONE cmt | em 16 16 |        |             |                 ; CREATE has also already modified the DP to point to the new
2911:000 | DONE cmt | em 16 16 |        |             |                 ; word. We have no idea which instructions followed the CREATE
2912:000 | DONE cmt | em 16 16 |        |             |                 ; command if there is a DOES> so the CP could point anywhere by
2913:000 | DONE cmt | em 16 16 |        |             |                 ; now.
2914:000 | DONE ins | em 16 16 | 0058ca | a5 02       |                 lda.d 000002         
2915:000 | DONE wsp | em 16 16 |        |             |
2916:000 | DONE cmt | em 16 16 |        |             |                 ; The address of the word's xt is four bytes down (see
2917:000 | DONE cmt | em 16 16 |        |             |                 ; header.tasm for details).
2918:000 | DONE ins | em 16 16 | 0058cc | 18          |                 clc                  
2919:000 | DONE ins | em 16 16 | 0058cd | 69 04 00    |                 adc.# 0004           
2920:000 | DONE ins | em 16 16 | 0058d0 | 85 1e       |                 sta.d 00001e         
2921:000 | DONE wsp | em 16 16 |        |             |
2922:000 | DONE cmt | em 16 16 |        |             |                 ; Now we get that address and add one byte to skip over the JSR
2923:000 | DONE cmt | em 16 16 |        |             |                 ; opcode
2924:000 | DONE ins | em 16 16 | 0058d2 | b2 1e       |                 lda.di 00001e        LDA (TMP2)
2925:000 | DONE ins | em 16 16 | 0058d4 | 1a          |                 inc.a                
2926:000 | DONE ins | em 16 16 | 0058d5 | 85 1e       |                 sta.d 00001e         Points to address to be replaced
2927:000 | DONE wsp | em 16 16 |        |             |
2928:000 | DONE cmt | em 16 16 |        |             |                 ; Replace the DOVAR address
2929:000 | DONE ins | em 16 16 | 0058d7 | a5 1c       |                 lda.d 00001c         
2930:000 | DONE ins | em 16 16 | 0058d9 | 92 1e       |                 sta.di 00001e        STA (TMP2)
2931:000 | DONE wsp | em 16 16 |        |             |
2932:000 | DONE cmt | em 16 16 |        |             |                 ; Since we removed the return address that brought us here, we
2933:000 | DONE cmt | em 16 16 |        |             |                 ; go back to whatever the main routine was. Otherwise, we we
2934:000 | DONE cmt | em 16 16 |        |             |                 ; smash into the subroutine jump to DODOES.
2935:000 | DONE ins | em 16 16 | 0058db | 60          |                 rts                  
2936:000 | DONE wsp | em 16 16 |        |             |
2937:000 | DONE wsp | em 16 16 |        |             |
2938:000 | DONE cmt | em 16 16 |        |             | ; -------------------------------------------------------------------
2939:000 | DONE cmt | em 16 16 |        |             | ; DROP ( n -- ) 4 bytes / 9 cycles
2940:000 | DONE cmt | em 16 16 |        |             | ; Drop first entry on Data Stack
2941:000 | DONE wsp | em 16 16 |        |             |
2942:000 | DONE lbl | em 16 16 | 0058dc |             | xt_drop                              
2943:000 | DONE ins | em 16 16 | 0058dc | b4 00       |                 ldy.dx 00            
2944:000 | DONE ins | em 16 16 | 0058de | e8          |                 inx                  
2945:000 | DONE ins | em 16 16 | 0058df | e8          |                 inx                  
2946:000 | DONE wsp | em 16 16 |        |             |
2947:000 | DONE lbl | em 16 16 | 0058e0 |             | z_drop                               
2947:001 | DONE ins | em 16 16 | 0058e0 | 60          |                 rts                  
2948:000 | DONE wsp | em 16 16 |        |             |
2949:000 | DONE wsp | em 16 16 |        |             |
2950:000 | DONE cmt | em 16 16 |        |             | ; -------------------------------------------------------------------
2951:000 | DONE cmt | em 16 16 |        |             | ; DUMP ( addr u -- ) X bytes / X cycles
2952:000 | DONE cmt | em 16 16 |        |             | ; Print a region of memory in a pretty way. This is used interactively, so we
2953:000 | DONE cmt | em 16 16 |        |             | ; don't care about speed (humans are slow) and concentrate on size instead,
2954:000 | DONE cmt | em 16 16 |        |             | ; using JSR where we can. This is a primtive version until we get loops ready
2955:000 | DONE lbl | em 16 16 | 0058e1 |             | xt_dump                              
2956:000 | DONE ins | em 16 16 | 0058e1 | 98          |                 tya                  force flag test
2957:000 | DONE lbl | em 16 16 | 0058e2 |             | dump_loop                            
2958:000 | DONE ins | em 16 16 | 0058e2 | f0 14       |                 beq 0058f8           
2959:000 | DONE wsp | em 16 16 |        |             |
2960:000 | DONE ins | em 16 16 | 0058e4 | 5a          |                 phy                  save counter
2961:000 | DONE ins | em 16 16 | 0058e5 | a1 00       |                 lda.dxi 00           get byte from address
2962:000 | DONE ins | em 16 16 | 0058e7 | 29 ff 00    |                 and.# 00ff           
2963:000 | DONE ins | em 16 16 | 0058ea | a8          |                 tay                  
2964:000 | DONE ins | em 16 16 | 0058eb | f6 00       |                 inc.dx 00            address modified in place
2965:000 | DONE wsp | em 16 16 |        |             |
2966:000 | DONE ins | em 16 16 | 0058ed | 20 0d 5f    |                 jsr 005f0d           U.
2967:000 | DONE wsp | em 16 16 |        |             |
2968:000 | DONE ins | em 16 16 | 0058f0 | ca          |                 dex                  
2969:000 | DONE ins | em 16 16 | 0058f1 | ca          |                 dex                  
2970:000 | DONE ins | em 16 16 | 0058f2 | 94 00       |                 sty.dx 00            
2971:000 | DONE ins | em 16 16 | 0058f4 | 7a          |                 ply                  get counter back
2972:000 | DONE wsp | em 16 16 |        |             |
2973:000 | DONE ins | em 16 16 | 0058f5 | 88          |                 dey                  
2974:000 | DONE ins | em 16 16 | 0058f6 | 80 ea       |                 bra 0058e2           
2975:000 | DONE wsp | em 16 16 |        |             |
2976:000 | DONE lbl | em 16 16 | 0058f8 |             | dump_done                            
2977:000 | DONE ins | em 16 16 | 0058f8 | 20 4f 57    |                 jsr 00574f           
2978:000 | DONE ins | em 16 16 | 0058fb | 20 0f 54    |                 jsr 00540f           
2979:000 | DONE wsp | em 16 16 |        |             |
2980:000 | DONE lbl | em 16 16 | 0058fe |             | z_dump                               
2980:001 | DONE ins | em 16 16 | 0058fe | 60          |                 rts                  
2981:000 | DONE wsp | em 16 16 |        |             |
2982:000 | DONE wsp | em 16 16 |        |             |
2983:000 | DONE cmt | em 16 16 |        |             | ; -------------------------------------------------------------------
2984:000 | DONE cmt | em 16 16 |        |             | ; DUP  ( n -- n n ) 4 bytes / 9 cycles
2985:000 | DONE cmt | em 16 16 |        |             | ; Duplicate first entry on Data Stack
2986:000 | DONE lbl | em 16 16 | 0058ff |             | xt_dup                               
2987:000 | DONE ins | em 16 16 | 0058ff | ca          |                 dex                  
2988:000 | DONE ins | em 16 16 | 005900 | ca          |                 dex                  
2989:000 | DONE ins | em 16 16 | 005901 | 94 00       |                 sty.dx 00            
2990:000 | DONE wsp | em 16 16 |        |             |
2991:000 | DONE lbl | em 16 16 | 005903 |             | z_dup                                
2991:001 | DONE ins | em 16 16 | 005903 | 60          |                 rts                  
2992:000 | DONE wsp | em 16 16 |        |             |
2993:000 | DONE cmt | em 16 16 |        |             | ; -------------------------------------------------------------------
2994:000 | DONE cmt | em 16 16 |        |             | ; EMIT ( char -- ) X bytes / X cycles
2995:000 | DONE cmt | em 16 16 |        |             | ; Run-time default for EMIT. The user can revector this by changing the value of
2996:000 | DONE cmt | em 16 16 |        |             | ; the OUTPUT variable. We ignore the MSB completely, and do not check to see if
2997:000 | DONE cmt | em 16 16 |        |             | ; we have been given a valid ASCII character. Note that we keep the A register
2998:000 | DONE cmt | em 16 16 |        |             | ; in 16 bit mode all the time - it is up to the kernel routine stored at OUTPUT
2999:000 | DONE cmt | em 16 16 |        |             | ; to deal with that. Don't make this native compile
3000:000 | DONE lbl | em 16 16 | 005904 |             | xt_emit                              
3001:000 | DONE dir | em 16 16 |        |             |         .!a16                        
3002:000 | DONE cmt | em 16 16 |        |             |                 ; we put the value in A so we don't have to switch the XY
3003:000 | DONE cmt | em 16 16 |        |             |                 ; register size
3004:000 | DONE ins | em 16 16 | 005904 | 98          |                 tya                  
3005:000 | DONE wsp | em 16 16 |        |             |
3006:000 | DONE cmt | em 16 16 |        |             |                 ; we DROP immediately so we can JMP.I to the output routine and
3007:000 | DONE cmt | em 16 16 |        |             |                 ; can use its RTS to take us back to the caller
3008:000 | DONE ins | em 16 16 | 005905 | b4 00       |                 ldy.dx 00            
3009:000 | DONE ins | em 16 16 | 005907 | e8          |                 inx                  
3010:000 | DONE ins | em 16 16 | 005908 | e8          |                 inx                  
3011:000 | DONE lbl | em 16 16 | 005909 |             | emit_a                               
3012:000 | DONE cmt | em 16 16 |        |             |                 ; Lots of times we want to print the character in A without
3013:000 | DONE cmt | em 16 16 |        |             |                 ; fooling around with the Data Stack. EMIT_A assumes a 16 bit
3014:000 | DONE cmt | em 16 16 |        |             |                 ; wide A register with the character in LSB and does not touch
3015:000 | DONE cmt | em 16 16 |        |             |                 ; the Data Stack, but can still be vectored via OUTPUT. Call it
3016:000 | DONE cmt | em 16 16 |        |             |                 ; with JSR as you would XT_EMIT
3017:000 | DONE ins | em 16 16 | 005909 | 6c 0e 00    |                 jmp.i 00000e         call to kernel, JSR/RTS
3018:000 | DONE wsp | em 16 16 |        |             |
3019:000 | DONE lbl | em 16 16 | 00590c |             | z_emit                               ; never reached
3020:000 | DONE wsp | em 16 16 |        |             |
3021:000 | DONE wsp | em 16 16 |        |             |
3022:000 | DONE cmt | em 16 16 |        |             | ; -------------------------------------------------------------------
3023:000 | DONE cmt | em 16 16 |        |             | ; ERASE ( addr u -- ) X bytes / X cycles
3024:000 | DONE cmt | em 16 16 |        |             | ; Set a region of memory to zero. Uses tmp2
3025:000 | DONE lbl | em 16 16 | 00590c |             | xt_erase                             
3026:000 | DONE dir | em 16 16 |        |             |         .!a16                        
3027:000 | DONE ins | em 16 16 | 00590c | ca          |                 dex                  
3028:000 | DONE ins | em 16 16 | 00590d | ca          |                 dex                  
3029:000 | DONE ins | em 16 16 | 00590e | 94 00       |                 sty.dx 00            
3030:000 | DONE wsp | em 16 16 |        |             |
3031:000 | DONE ins | em 16 16 | 005910 | a0 00 00    |                 ldy.# 0000           falls through to FILL
3032:000 | DONE wsp | em 16 16 |        |             |
3033:000 | DONE cmt | em 16 16 |        |             | ; -------------------------------------------------------------------
3034:000 | DONE cmt | em 16 16 |        |             | ; FILL ( addr u b -- ) X bytes / X cycles
3035:000 | DONE cmt | em 16 16 |        |             | ; Fill the given region of memory with the LSB of the TOS. Shares code with
3036:000 | DONE cmt | em 16 16 |        |             | ; ERASE
3037:000 | DONE lbl | em 16 16 | 005913 |             | xt_fill                              
3038:000 | DONE ins | em 16 16 | 005913 | b5 02       |                 lda.dx 02            address is 3OS
3039:000 | DONE ins | em 16 16 | 005915 | 85 1e       |                 sta.d 00001e         
3040:000 | DONE wsp | em 16 16 |        |             |
3041:000 | DONE ins | em 16 16 | 005917 | 98          |                 tya                  
3042:000 | DONE ins | em 16 16 | 005918 | b4 00       |                 ldy.dx 00            don't bother with drop, to it later
3043:000 | DONE ins | em 16 16 | 00591a | e2 20       |                 sep 20               
3043:001 | DONE ctl | em  8 16 |        |             |         .!a8
3044:000 | DONE lbl | em  8 16 | 00591c |             | erase_loop                           
3045:000 | DONE ins | em  8 16 | 00591c | 88          |                 dey                  
3046:000 | DONE ins | em  8 16 | 00591d | 30 04       |                 bmi 005923           
3047:000 | DONE wsp | em  8 16 |        |             |
3048:000 | DONE ins | em  8 16 | 00591f | 91 1e       |                 sta.diy 00001e       
3049:000 | DONE ins | em  8 16 | 005921 | 80 f9       |                 bra 00591c           
3050:000 | DONE wsp | em  8 16 |        |             |
3051:000 | DONE lbl | em  8 16 | 005923 |             | erase_done                           
3052:000 | DONE ins | em  8 16 | 005923 | c2 20       |                 rep 20               
3052:001 | DONE ctl | em 16 16 |        |             |         .!a16
3053:000 | DONE ins | em 16 16 | 005925 | b4 02       |                 ldy.dx 02            dump three elements off the sack
3054:000 | DONE ins | em 16 16 | 005927 | 8a          |                 txa                  
3055:000 | DONE ins | em 16 16 | 005928 | 18          |                 clc                  
3056:000 | DONE ins | em 16 16 | 005929 | 69 06 00    |                 adc.# 0006           
3057:000 | DONE ins | em 16 16 | 00592c | aa          |                 tax                  
3058:000 | DONE lbl | em 16 16 | 00592d |             | z_fill                               
3059:000 | DONE lbl | em 16 16 | 00592d |             | z_erase                              
3059:001 | DONE ins | em 16 16 | 00592d | 60          |                 rts                  
3060:000 | DONE wsp | em 16 16 |        |             |
3061:000 | DONE wsp | em 16 16 |        |             |
3062:000 | DONE cmt | em 16 16 |        |             | ; -------------------------------------------------------------------
3063:000 | DONE cmt | em 16 16 |        |             | ; EVALUATE ( addr u -- ) X bytes / X cycles
3064:000 | DONE cmt | em 16 16 |        |             | ; Execute string. Set SOURCE-ID to -1, make addr u the input source,
3065:000 | DONE cmt | em 16 16 |        |             | ; set >IN to zero. After processing the line, revert to old input source.
3066:000 | DONE lbl | em 16 16 | 00592e |             | xt_evaluate                          
3067:000 | DONE cmt | em 16 16 |        |             |                 ; We follow pforth's procedure of pushing SOURCE, SOURCE-ID, and
3068:000 | DONE cmt | em 16 16 |        |             |                 ; >IN to the Return Stack
3069:000 | DONE ins | em 16 16 | 00592e | a5 0c       |                 lda.d 00000c         >IN
3070:000 | DONE ins | em 16 16 | 005930 | 48          |                 pha                  
3071:000 | DONE ins | em 16 16 | 005931 | a5 06       |                 lda.d 000006         Input Source (SOURCE-ID)
3072:000 | DONE ins | em 16 16 | 005933 | 48          |                 pha                  
3073:000 | DONE ins | em 16 16 | 005934 | a5 08       |                 lda.d 000008         
3074:000 | DONE ins | em 16 16 | 005936 | 48          |                 pha                  
3075:000 | DONE ins | em 16 16 | 005937 | a5 0a       |                 lda.d 00000a         
3076:000 | DONE ins | em 16 16 | 005939 | 48          |                 pha                  
3077:000 | DONE wsp | em 16 16 |        |             |
3078:000 | DONE cmt | em 16 16 |        |             |                 ; set SOURCE-ID to -1
3079:000 | DONE ins | em 16 16 | 00593a | a9 ff ff    |                 lda.# 0ffff          
3080:000 | DONE ins | em 16 16 | 00593d | 85 06       |                 sta.d 000006         
3081:000 | DONE wsp | em 16 16 |        |             |
3082:000 | DONE cmt | em 16 16 |        |             |                 ; set >IN to zero
3083:000 | DONE ins | em 16 16 | 00593f | 64 0c       |                 stz.d 00000c         
3084:000 | DONE wsp | em 16 16 |        |             |
3085:000 | DONE cmt | em 16 16 |        |             |                 ; move TOS and NOS to input buffers
3086:000 | DONE ins | em 16 16 | 005941 | 84 0a       |                 sty.d 00000a         
3087:000 | DONE ins | em 16 16 | 005943 | b5 00       |                 lda.dx 00            
3088:000 | DONE ins | em 16 16 | 005945 | 85 08       |                 sta.d 000008         
3089:000 | DONE wsp | em 16 16 |        |             |
3090:000 | DONE cmt | em 16 16 |        |             |                 ; dump address string from stack
3091:000 | DONE ins | em 16 16 | 005947 | b4 02       |                 ldy.dx 02            
3092:000 | DONE ins | em 16 16 | 005949 | e8          |                 inx                  
3093:000 | DONE ins | em 16 16 | 00594a | e8          |                 inx                  
3094:000 | DONE ins | em 16 16 | 00594b | e8          |                 inx                  
3095:000 | DONE ins | em 16 16 | 00594c | e8          |                 inx                  
3096:000 | DONE wsp | em 16 16 |        |             |
3097:000 | DONE ins | em 16 16 | 00594d | 20 9c 69    |                 jsr 00699c           
3098:000 | DONE wsp | em 16 16 |        |             |
3099:000 | DONE cmt | em 16 16 |        |             |                 ; restore state from before evaluate
3100:000 | DONE ins | em 16 16 | 005950 | 68          |                 pla                  
3101:000 | DONE ins | em 16 16 | 005951 | 85 0a       |                 sta.d 00000a         
3102:000 | DONE ins | em 16 16 | 005953 | 68          |                 pla                  
3103:000 | DONE ins | em 16 16 | 005954 | 85 08       |                 sta.d 000008         
3104:000 | DONE ins | em 16 16 | 005956 | 68          |                 pla                  
3105:000 | DONE ins | em 16 16 | 005957 | 85 06       |                 sta.d 000006         
3106:000 | DONE ins | em 16 16 | 005959 | 68          |                 pla                  
3107:000 | DONE ins | em 16 16 | 00595a | 85 0c       |                 sta.d 00000c         
3108:000 | DONE wsp | em 16 16 |        |             |
3109:000 | DONE lbl | em 16 16 | 00595c |             | z_evaluate                           
3109:001 | DONE ins | em 16 16 | 00595c | 60          |                 rts                  
3110:000 | DONE wsp | em 16 16 |        |             |
3111:000 | DONE wsp | em 16 16 |        |             |
3112:000 | DONE cmt | em 16 16 |        |             | ; -------------------------------------------------------------------
3113:000 | DONE cmt | em 16 16 |        |             | ; EXECUTE ( xt -- ) X bytes / X cycles
3114:000 | DONE cmt | em 16 16 |        |             | ; Run a word with help of its xt on the TOS
3115:000 | DONE wsp | em 16 16 |        |             |
3116:000 | DONE cmt | em 16 16 |        |             | ; Reserve three bytes for the jump - three in case we want to expand to the full
3117:000 | DONE cmt | em 16 16 |        |             | ; range
3118:000 | DONE cmt | em 16 16 |        |             | ; TODO move this to someplace that is assured to be RAM, not possibly ROM
3119:000 | DONE lbl | em 16 16 | 00595d |             | execute_ip                           
3119:001 | DONE dir | em 16 16 | 00595d | (3 bytes)   |         .byte 00, 00, 00             
3119:001 | DONE dir | em 16 16 |        |             |                 00 00 00                 --  . . .
3120:000 | DONE wsp | em 16 16 |        |             |
3121:000 | DONE lbl | em 16 16 | 005960 |             | xt_execute                           
3122:000 | DONE dir | em 16 16 |        |             |         .!a16                        
3123:000 | DONE dir | em 16 16 |        |             |         .!xy16                       
3124:000 | DONE cmt | em 16 16 |        |             |                 ; Store the xt for later use and then drop it off the stack
3125:000 | DONE ins | em 16 16 | 005960 | 8c 5d 59    |                 sty 00595d           
3126:000 | DONE ins | em 16 16 | 005963 | b4 00       |                 ldy.dx 00            
3127:000 | DONE ins | em 16 16 | 005965 | e8          |                 inx                  
3128:000 | DONE ins | em 16 16 | 005966 | e8          |                 inx                  
3129:000 | DONE wsp | em 16 16 |        |             |
3130:000 | DONE cmt | em 16 16 |        |             |                 ; Only JMP has the addressing mode we need. All our Forth
3131:000 | DONE cmt | em 16 16 |        |             |                 ; words end with a RTS instruction, so they will take us back to
3132:000 | DONE cmt | em 16 16 |        |             |                 ; the original caller of this routine without us having to muck
3133:000 | DONE cmt | em 16 16 |        |             |                 ; about with the Return Stack.
3134:000 | DONE ins | em 16 16 | 005967 | 6c 5d 59    |                 jmp.i 00595d         JMP (EXECUTE_IP)
3135:000 | DONE wsp | em 16 16 |        |             |
3136:000 | DONE lbl | em 16 16 | 00596a |             | z_execute                            ; empty, no RTS required
3137:000 | DONE wsp | em 16 16 |        |             |
3138:000 | DONE wsp | em 16 16 |        |             |
3139:000 | DONE cmt | em 16 16 |        |             | ; -------------------------------------------------------------------
3140:000 | DONE cmt | em 16 16 |        |             | ; FALSE ( -- f ) 7 bytes / 12 cycles
3141:000 | DONE cmt | em 16 16 |        |             | ; Pushes value $0000 for Forth true on Data Stack. This is the same code as for
3142:000 | DONE cmt | em 16 16 |        |             | ; ZERO, see there. Dictionary entry should have xt_zero/z_zero instead of
3143:000 | DONE cmt | em 16 16 |        |             | ; xt_false/z_false
3144:000 | DONE wsp | em 16 16 |        |             |
3145:000 | DONE wsp | em 16 16 |        |             |
3146:000 | DONE cmt | em 16 16 |        |             | ; -------------------------------------------------------------------
3147:000 | DONE cmt | em 16 16 |        |             | ; FIND ( cs-addr -- addr 0 | xt 1 | xt -1 ) X bytes / X cycles
3148:000 | DONE cmt | em 16 16 |        |             | ; Find word in Dictionary. Included for backwards compatibility, Liara Forth
3149:000 | DONE cmt | em 16 16 |        |             | ; follows Gforth by replacing this with FIND-NAME. Counted string either returns
3150:000 | DONE cmt | em 16 16 |        |             | ; address with a fail flag if not found in the Dictionary, or the xt with a flag
3151:000 | DONE cmt | em 16 16 |        |             | ; to indicate if this is immediate or not. FIND is a wrapper around FIND-NAME.
3152:000 | DONE cmt | em 16 16 |        |             | ; See https://www.complang.tuwien.ac.at/forth/gforth/Docs-html/Word-Lists.html
3153:000 | DONE cmt | em 16 16 |        |             | ; and https://www.complang.tuwien.ac.at/forth/gforth/Docs-html/Name-token.html
3154:000 | DONE cmt | em 16 16 |        |             | ; for better solutions.
3155:000 | DONE lbl | em 16 16 | 00596a |             | xt_find                              
3156:000 | DONE cmt | em 16 16 |        |             |                 ; Convert counted string address to modern format
3157:000 | DONE ins | em 16 16 | 00596a | 20 41 57    |                 jsr 005741           ( addr u )
3158:000 | DONE wsp | em 16 16 |        |             |
3159:000 | DONE cmt | em 16 16 |        |             |                 ; Save address in case the conversion fails
3160:000 | DONE ins | em 16 16 | 00596d | b5 00       |                 lda.dx 00            
3161:000 | DONE ins | em 16 16 | 00596f | 48          |                 pha                  
3162:000 | DONE wsp | em 16 16 |        |             |
3163:000 | DONE ins | em 16 16 | 005970 | 20 9b 59    |                 jsr 00599b           ( nt | 0 )
3164:000 | DONE wsp | em 16 16 |        |             |
3165:000 | DONE ins | em 16 16 | 005973 | 98          |                 tya                  force flag check
3166:000 | DONE ins | em 16 16 | 005974 | d0 0a       |                 bne 005980           
3167:000 | DONE wsp | em 16 16 |        |             |
3168:000 | DONE cmt | em 16 16 |        |             |                 ; No word found. Return the address of the string, leaving 0 as
3169:000 | DONE cmt | em 16 16 |        |             |                 ; a false flag TOS
3170:000 | DONE ins | em 16 16 | 005976 | ca          |                 dex                  ( <?> 0 )
3171:000 | DONE ins | em 16 16 | 005977 | ca          |                 dex                  
3172:000 | DONE ins | em 16 16 | 005978 | a0 00 00    |                 ldy.# 0000           
3173:000 | DONE ins | em 16 16 | 00597b | 68          |                 pla                  
3174:000 | DONE ins | em 16 16 | 00597c | 95 00       |                 sta.dx 00            ( addr 0 )
3175:000 | DONE ins | em 16 16 | 00597e | 80 1a       |                 bra 00599a           
3176:000 | DONE wsp | em 16 16 |        |             |
3177:000 | DONE lbl | em 16 16 | 005980 |             | find_found                           
3178:000 | DONE cmt | em 16 16 |        |             |                 ; We have a nt. Now we have to convert it to the format that
3179:000 | DONE cmt | em 16 16 |        |             |                 ; FIND wants to return Arrive here with ( nt )
3180:000 | DONE ins | em 16 16 | 005980 | 68          |                 pla                  we won't need the address after all
3181:000 | DONE wsp | em 16 16 |        |             |
3182:000 | DONE cmt | em 16 16 |        |             |                 ; We will need the nt later
3183:000 | DONE ins | em 16 16 | 005981 | 5a          |                 phy                  
3184:000 | DONE wsp | em 16 16 |        |             |
3185:000 | DONE ins | em 16 16 | 005982 | 20 86 5b    |                 jsr 005b86           ( nt -- xt )
3186:000 | DONE ins | em 16 16 | 005985 | ca          |                 dex                  
3187:000 | DONE ins | em 16 16 | 005986 | ca          |                 dex                  
3188:000 | DONE ins | em 16 16 | 005987 | 94 00       |                 sty.dx 00            ( xt <?> )
3189:000 | DONE wsp | em 16 16 |        |             |
3190:000 | DONE cmt | em 16 16 |        |             |                 ; If immediate, return 1 (not: zero), else return -1
3191:000 | DONE ins | em 16 16 | 005989 | 7a          |                 ply                  get nt back
3192:000 | DONE ins | em 16 16 | 00598a | b9 00 00    |                 lda.y 0000           
3193:000 | DONE ins | em 16 16 | 00598d | a0 00 00    |                 ldy.# 0000           prepare flag
3194:000 | DONE wsp | em 16 16 |        |             |
3195:000 | DONE ins | em 16 16 | 005990 | eb          |                 xba                  flags are MSB
3196:000 | DONE ins | em 16 16 | 005991 | 29 02 00    |                 and.# IM             Mask all but IM bit
3197:000 | DONE wsp | em 16 16 |        |             |
3198:000 | DONE ins | em 16 16 | 005994 | d0 03       |                 bne 005999           IMMEDIATE word, return 1
3199:000 | DONE ins | em 16 16 | 005996 | 88          |                 dey                  not emmediate, return -1
3200:000 | DONE ins | em 16 16 | 005997 | 80 01       |                 bra 00599a           
3201:000 | DONE wsp | em 16 16 |        |             |
3202:000 | DONE lbl | em 16 16 | 005999 |             | find_imm                             
3203:000 | DONE ins | em 16 16 | 005999 | c8          |                 iny                  
3204:000 | DONE wsp | em 16 16 |        |             |
3205:000 | DONE lbl | em 16 16 | 00599a |             | z_find                               
3205:001 | DONE ins | em 16 16 | 00599a | 60          |                 rts                  
3206:000 | DONE wsp | em 16 16 |        |             |
3207:000 | DONE cmt | em 16 16 |        |             | ; -------------------------------------------------------------------
3208:000 | DONE cmt | em 16 16 |        |             | ; FIND-NAME ( addr u -- nt | 0 ) 91 bytes / X cycles
3209:000 | DONE cmt | em 16 16 |        |             | ; Given a string, find the Name Token (nt) of a word or return zero if the word
3210:000 | DONE cmt | em 16 16 |        |             | ; is not in the dictionary. We use this instead of ancient FIND to look up words
3211:000 | DONE cmt | em 16 16 |        |             | ; in the Dictionary passed by PARSE-NAME. Note this returns the nt, not the xt
3212:000 | DONE cmt | em 16 16 |        |             | ; of a word like FIND. To convert, use NAME>INT. This is a Gforth word. See
3213:000 | DONE cmt | em 16 16 |        |             | ; https://www.complang.tuwien.ac.at/forth/gforth/Docs-html/Name-token.html
3214:000 | DONE cmt | em 16 16 |        |             | ; FIND calls this word for the hard word
3215:000 | DONE lbl | em 16 16 | 00599b |             | xt_find-name                         
3216:000 | DONE cmt | em 16 16 |        |             |                 ; We abort when we get an empty string, that is, one with
3217:000 | DONE cmt | em 16 16 |        |             |                 ; a length of zero TOS. We could test for this, but it will
3218:000 | DONE cmt | em 16 16 |        |             |                 ; happen so rarely that the speed penalty is higher if we run
3219:000 | DONE cmt | em 16 16 |        |             |                 ; the test for every single call. Looking for an empty string
3220:000 | DONE cmt | em 16 16 |        |             |                 ; does force us to check the whole dictionary, though. The test
3221:000 | DONE cmt | em 16 16 |        |             |                 ; would be 3 bytes and 4 to 6 cycles longer:
3222:000 | DONE cmt | em 16 16 |        |             |                 ;       tya                     ; force flag check
3223:000 | DONE cmt | em 16 16 |        |             |                 ;       beq find-name_failure
3224:000 | DONE dir | em 16 16 |        |             |         .!a16                        
3225:000 | DONE dir | em 16 16 |        |             |         .!xy16                       
3226:000 | DONE cmt | em 16 16 |        |             |                 ; set up loop for the first time
3227:000 | DONE ins | em 16 16 | 00599b | 84 24       |                 sty.d 000024         length of mystery string in tmptos, Y now free
3228:000 | DONE wsp | em 16 16 |        |             |
3229:000 | DONE ins | em 16 16 | 00599d | a4 02       |                 ldy.d 000002         
3230:000 | DONE ins | em 16 16 | 00599f | 84 1c       |                 sty.d 00001c         nt of first Dictionary word
3231:000 | DONE wsp | em 16 16 |        |             |
3232:000 | DONE ins | em 16 16 | 0059a1 | b4 00       |                 ldy.dx 00            
3233:000 | DONE ins | em 16 16 | 0059a3 | 84 1e       |                 sty.d 00001e         address of mystery string, was NOS
3234:000 | DONE wsp | em 16 16 |        |             |
3235:000 | DONE lbl | em 16 16 | 0059a5 |             | find-name_loop                       
3236:000 | DONE cmt | em 16 16 |        |             |                 ; First quick test: Are strings the same length?
3237:000 | DONE ins | em 16 16 | 0059a5 | b2 1c       |                 lda.di 00001c        LSB in first header word is length
3238:000 | DONE ins | em 16 16 | 0059a7 | 29 ff 00    |                 and.# 00ff           
3239:000 | DONE ins | em 16 16 | 0059aa | c5 24       |                 cmp.d 000024         we test LSB
3240:000 | DONE cmt | em 16 16 |        |             |                 ; Most of the time, it will not be the same, so we save one
3241:000 | DONE cmt | em 16 16 |        |             |                 ; cycle pro loop if we only take the branch when they are the
3242:000 | DONE cmt | em 16 16 |        |             |                 ; same
3243:000 | DONE ins | em 16 16 | 0059ac | f0 0c       |                 beq 0059ba           
3244:000 | DONE wsp | em 16 16 |        |             |
3245:000 | DONE lbl | em 16 16 | 0059ae |             | find-name_next_entry                 
3246:000 | DONE cmt | em 16 16 |        |             |                 ; next header address is two bytes down
3247:000 | DONE ins | em 16 16 | 0059ae | e6 1c       |                 inc.d 00001c         
3248:000 | DONE ins | em 16 16 | 0059b0 | e6 1c       |                 inc.d 00001c         
3249:000 | DONE ins | em 16 16 | 0059b2 | b2 1c       |                 lda.di 00001c        LDA (TMP1)
3250:000 | DONE wsp | em 16 16 |        |             |
3251:000 | DONE cmt | em 16 16 |        |             |                 ; a zero entry marks the end of the Dictionary
3252:000 | DONE ins | em 16 16 | 0059b4 | f0 36       |                 beq 0059ec           
3253:000 | DONE wsp | em 16 16 |        |             |
3254:000 | DONE ins | em 16 16 | 0059b6 | 85 1c       |                 sta.d 00001c         new header
3255:000 | DONE ins | em 16 16 | 0059b8 | 80 eb       |                 bra 0059a5           
3256:000 | DONE wsp | em 16 16 |        |             |
3257:000 | DONE lbl | em 16 16 | 0059ba |             | find-name_chars                      
3258:000 | DONE cmt | em 16 16 |        |             |                 ; Yes, same length, so we compare characters
3259:000 | DONE wsp | em 16 16 |        |             |
3260:000 | DONE cmt | em 16 16 |        |             |                 ; Switch A to 8 bit for this
3261:000 | DONE ins | em 16 16 | 0059ba | e2 20       |                 sep 20               
3261:001 | DONE ctl | em  8 16 |        |             |         .!a8
3262:000 | DONE cmt | em  8 16 |        |             |                 ; Second quick test: Check first char, which is 8 bytes into the
3263:000 | DONE cmt | em  8 16 |        |             |                 ; header
3264:000 | DONE ins | em  8 16 | 0059bc | a0 08 00    |                 ldy.# 0008           
3265:000 | DONE ins | em  8 16 | 0059bf | b1 1c       |                 lda.diy 00001c       LDA (TMP1),Y - first char of entry
3266:000 | DONE ins | em  8 16 | 0059c1 | d2 1e       |                 cmp.di 00001e        CMP (TMP2) - first char of mystery string
3267:000 | DONE ins | em  8 16 | 0059c3 | f0 04       |                 beq 0059c9           
3268:000 | DONE wsp | em  8 16 |        |             |
3269:000 | DONE lbl | em  8 16 | 0059c5 |             | find-name_char_nomatcnt_8            
3270:000 | DONE cmt | em  8 16 |        |             |                 ; First char is not the same, next entry
3271:000 | DONE ins | em  8 16 | 0059c5 | c2 20       |                 rep 20               
3271:001 | DONE ctl | em 16 16 |        |             |         .!a16
3272:000 | DONE ins | em 16 16 | 0059c7 | 80 e5       |                 bra 0059ae           
3273:000 | DONE wsp | em 16 16 |        |             |
3274:000 | DONE lbl | em 16 16 | 0059c9 |             | find-name_all_chars                  
3275:000 | DONE dir | em  8 16 |        |             |         .!a8                         
3276:000 | DONE cmt | em  8 16 |        |             |                 ; String length is the same, and the first character is the
3277:000 | DONE cmt | em  8 16 |        |             |                 ; same. If the word is only one character long, we're done
3278:000 | DONE ins | em  8 16 | 0059c9 | a4 24       |                 ldy.d 000024         
3279:000 | DONE ins | em  8 16 | 0059cb | 88          |                 dey                  faster and shorter than CPY.# 01
3280:000 | DONE ins | em  8 16 | 0059cc | f0 18       |                 beq 0059e6           
3281:000 | DONE wsp | em  8 16 |        |             |
3282:000 | DONE cmt | em  8 16 |        |             |                 ; No such luck: The strings are the same length and the first
3283:000 | DONE cmt | em  8 16 |        |             |                 ; char is the same, but the word is more than one char long. So
3284:000 | DONE cmt | em  8 16 |        |             |                 ; we suck it up and compare every single character. We go from
3285:000 | DONE cmt | em  8 16 |        |             |                 ; back to front, because words like CELLS and CELL+ would take
3286:000 | DONE cmt | em  8 16 |        |             |                 ; longer otherwise. We can also shorten the loop by one because
3287:000 | DONE cmt | em  8 16 |        |             |                 ; we've already compared the first char.
3288:000 | DONE wsp | em  8 16 |        |             |
3289:000 | DONE cmt | em  8 16 |        |             |                 ; Even worse, we have to add 8 bytes to address of Dictionary
3290:000 | DONE cmt | em  8 16 |        |             |                 ; string to allow testing with one loop. We need this like
3291:000 | DONE cmt | em  8 16 |        |             |                 ; a hole in the head because we just switched A to 8 bit.
3292:000 | DONE cmt | em  8 16 |        |             |                 ; However, staying with an 8-bit A is even slower.
3293:000 | DONE ins | em  8 16 | 0059ce | c2 20       |                 rep 20               
3293:001 | DONE ctl | em 16 16 |        |             |         .!a16
3294:000 | DONE ins | em 16 16 | 0059d0 | a5 1c       |                 lda.d 00001c         address of Dictionary string
3295:000 | DONE ins | em 16 16 | 0059d2 | 18          |                 clc                  
3296:000 | DONE ins | em 16 16 | 0059d3 | 69 08 00    |                 adc.# 0008           
3297:000 | DONE ins | em 16 16 | 0059d6 | 85 20       |                 sta.d 000020         
3298:000 | DONE ins | em 16 16 | 0059d8 | e2 20       |                 sep 20               
3298:001 | DONE ctl | em  8 16 |        |             |         .!a8
3299:000 | DONE ins | em  8 16 | 0059da | a4 24       |                 ldy.d 000024         get length of strings as loop index
3300:000 | DONE ins | em  8 16 | 0059dc | 88          |                 dey                  first index is length minus 1
3301:000 | DONE wsp | em  8 16 |        |             |
3302:000 | DONE lbl | em  8 16 | 0059dd |             | @                                    
3303:000 | DONE ins | em  8 16 | 0059dd | b1 1e       |                 lda.diy 00001e       LDA (TMP2),Y - last char of mystery string
3304:000 | DONE ins | em  8 16 | 0059df | d1 20       |                 cmp.diy 000020       CMP (TMP1),Y - last char of DP string
3305:000 | DONE ins | em  8 16 | 0059e1 | d0 e2       |                 bne 0059c5           
3306:000 | DONE ins | em  8 16 | 0059e3 | 88          |                 dey                  start of string (Y=0) was already tested
3307:000 | DONE ins | em  8 16 | 0059e4 | d0 f7       |                 bne 0059dd           
3308:000 | DONE wsp | em  8 16 |        |             |
3309:000 | DONE lbl | em  8 16 | 0059e6 |             | find-name_success                    
3310:000 | DONE cmt | em  8 16 |        |             |                 ; If we reach here, the strings are the same and we have a match
3311:000 | DONE cmt | em  8 16 |        |             |                 ; We get here with an 8 bit A
3312:000 | DONE ins | em  8 16 | 0059e6 | c2 20       |                 rep 20               
3312:001 | DONE ctl | em 16 16 |        |             |         .!a16
3313:000 | DONE ins | em 16 16 | 0059e8 | a4 1c       |                 ldy.d 00001c         get the correct DP
3314:000 | DONE ins | em 16 16 | 0059ea | 80 03       |                 bra 0059ef           
3315:000 | DONE wsp | em 16 16 |        |             |
3316:000 | DONE wsp | em 16 16 |        |             |
3317:000 | DONE lbl | em 16 16 | 0059ec |             | find-name_failure_16                 
3318:000 | DONE cmt | em 16 16 |        |             |                 ; Word not found in Dictionary, return zero. Assumes A is 16
3319:000 | DONE cmt | em 16 16 |        |             |                 ; bit
3320:000 | DONE ins | em 16 16 | 0059ec | a0 00 00    |                 ldy.# 0000           fall thru
3321:000 | DONE wsp | em 16 16 |        |             |
3322:000 | DONE lbl | em 16 16 | 0059ef |             | find-name_done                       
3323:000 | DONE ins | em 16 16 | 0059ef | e8          |                 inx                  drop old address (NIP)
3324:000 | DONE ins | em 16 16 | 0059f0 | e8          |                 inx                  
3325:000 | DONE wsp | em 16 16 |        |             |
3326:000 | DONE lbl | em 16 16 | 0059f1 |             | z_find-name                          
3326:001 | DONE ins | em 16 16 | 0059f1 | 60          |                 rts                  
3327:000 | DONE wsp | em 16 16 |        |             |
3328:000 | DONE wsp | em 16 16 |        |             |
3329:000 | DONE cmt | em 16 16 |        |             | ; -------------------------------------------------------------------
3330:000 | DONE cmt | em 16 16 |        |             | ; FM/MOD ( d n1 -- n2 n3 ) X bytes / X cycles
3331:000 | DONE cmt | em 16 16 |        |             | ; Floored division, compare with SM/REM. We define FM/MOD in terms of UM/MOD,
3332:000 | DONE cmt | em 16 16 |        |             | ; see http://git.savannah.gnu.org/cgit/gforth.git/tree/prim We prefer to use
3333:000 | DONE cmt | em 16 16 |        |             | ; SM/REM for further words. You could also define FM/MOD in Terms of SM/REM,
3334:000 | DONE cmt | em 16 16 |        |             | ; see http://www.figuk.plus.com/build/arith.htm
3335:000 | DONE cmt | em 16 16 |        |             | ; Original Forth: DUP >R DUP 0< IF NEGATE >R DNEGATE R> THEN >R DUP 0< R@ AND +
3336:000 | DONE cmt | em 16 16 |        |             | ; R> UM/MOD R> 0< IF SWAP NEGATE SWAP THEN ;
3337:000 | DONE cmt | em 16 16 |        |             | ; TODO this is just a 1:1 list of jumps, optimize once it is working
3338:000 | DONE lbl | em 16 16 | 0059f2 |             | xt_fmmod                             
3339:000 | DONE ins | em 16 16 | 0059f2 | 20 ff 58    |                 jsr 0058ff           
3340:000 | DONE ins | em 16 16 | 0059f5 | 20 c0 51    |                 jsr 0051c0           
3341:000 | DONE ins | em 16 16 | 0059f8 | 20 ff 58    |                 jsr 0058ff           
3342:000 | DONE wsp | em 16 16 |        |             |
3343:000 | DONE ins | em 16 16 | 0059fb | 98          |                 tya                  0< IF
3344:000 | DONE ins | em 16 16 | 0059fc | 10 12       |                 bpl 005a10           
3345:000 | DONE wsp | em 16 16 |        |             |
3346:000 | DONE ins | em 16 16 | 0059fe | b4 00       |                 ldy.dx 00            
3347:000 | DONE ins | em 16 16 | 005a00 | e8          |                 inx                  
3348:000 | DONE ins | em 16 16 | 005a01 | e8          |                 inx                  
3349:000 | DONE wsp | em 16 16 |        |             |
3350:000 | DONE ins | em 16 16 | 005a02 | 20 b1 5b    |                 jsr 005bb1           
3351:000 | DONE ins | em 16 16 | 005a05 | 20 c0 51    |                 jsr 0051c0           
3352:000 | DONE ins | em 16 16 | 005a08 | 20 65 58    |                 jsr 005865           
3353:000 | DONE ins | em 16 16 | 005a0b | 20 30 5d    |                 jsr 005d30           
3354:000 | DONE wsp | em 16 16 |        |             |
3355:000 | DONE ins | em 16 16 | 005a0e | 80 04       |                 bra 005a14           
3356:000 | DONE lbl | em 16 16 | 005a10 |             | fmmod_1                              
3357:000 | DONE ins | em 16 16 | 005a10 | b4 00       |                 ldy.dx 00            
3358:000 | DONE ins | em 16 16 | 005a12 | e8          |                 inx                  
3359:000 | DONE ins | em 16 16 | 005a13 | e8          |                 inx                  
3360:000 | DONE lbl | em 16 16 | 005a14 |             | fmmod_1_1                            
3361:000 | DONE ins | em 16 16 | 005a14 | 20 c0 51    |                 jsr 0051c0           
3362:000 | DONE ins | em 16 16 | 005a17 | 20 ff 58    |                 jsr 0058ff           
3363:000 | DONE ins | em 16 16 | 005a1a | 20 a5 53    |                 jsr 0053a5           
3364:000 | DONE ins | em 16 16 | 005a1d | 20 27 5d    |                 jsr 005d27           
3365:000 | DONE ins | em 16 16 | 005a20 | 20 85 55    |                 jsr 005585           
3366:000 | DONE ins | em 16 16 | 005a23 | 20 2a 53    |                 jsr 00532a           
3367:000 | DONE ins | em 16 16 | 005a26 | 20 30 5d    |                 jsr 005d30           
3368:000 | DONE ins | em 16 16 | 005a29 | 20 92 5f    |                 jsr 005f92           
3369:000 | DONE ins | em 16 16 | 005a2c | 20 30 5d    |                 jsr 005d30           
3370:000 | DONE wsp | em 16 16 |        |             |
3371:000 | DONE ins | em 16 16 | 005a2f | 98          |                 tya                  
3372:000 | DONE ins | em 16 16 | 005a30 | 10 0f       |                 bpl 005a41           
3373:000 | DONE wsp | em 16 16 |        |             |
3374:000 | DONE ins | em 16 16 | 005a32 | b4 00       |                 ldy.dx 00            
3375:000 | DONE ins | em 16 16 | 005a34 | e8          |                 inx                  
3376:000 | DONE ins | em 16 16 | 005a35 | e8          |                 inx                  
3377:000 | DONE wsp | em 16 16 |        |             |
3378:000 | DONE ins | em 16 16 | 005a36 | 20 cb 5e    |                 jsr 005ecb           
3379:000 | DONE ins | em 16 16 | 005a39 | 20 b1 5b    |                 jsr 005bb1           
3380:000 | DONE ins | em 16 16 | 005a3c | 20 cb 5e    |                 jsr 005ecb           
3381:000 | DONE wsp | em 16 16 |        |             |
3382:000 | DONE ins | em 16 16 | 005a3f | 80 04       |                 bra 005a45           
3383:000 | DONE lbl | em 16 16 | 005a41 |             | fmmod_2                              
3384:000 | DONE wsp | em 16 16 |        |             |
3385:000 | DONE ins | em 16 16 | 005a41 | b4 00       |                 ldy.dx 00            
3386:000 | DONE ins | em 16 16 | 005a43 | e8          |                 inx                  
3387:000 | DONE ins | em 16 16 | 005a44 | e8          |                 inx                  
3388:000 | DONE wsp | em 16 16 |        |             |
3389:000 | DONE lbl | em 16 16 | 005a45 |             | fmmod_2_1                            
3390:000 | DONE wsp | em 16 16 |        |             |
3391:000 | DONE lbl | em 16 16 | 005a45 |             | z_fmmod                              
3391:001 | DONE ins | em 16 16 | 005a45 | 60          |                 rts                  
3392:000 | DONE wsp | em 16 16 |        |             |
3393:000 | DONE wsp | em 16 16 |        |             |
3394:000 | DONE cmt | em 16 16 |        |             | ; -------------------------------------------------------------------
3395:000 | DONE cmt | em 16 16 |        |             | ; KEY ( -- char ) X bytes / X cycles
3396:000 | DONE cmt | em 16 16 |        |             | ; Get one character from the input, without echoing.
3397:000 | DONE lbl | em 16 16 | 005a46 |             | xt_key                               
3398:000 | DONE dir | em 16 16 |        |             |         .!a16                        
3399:000 | DONE wsp | em 16 16 |        |             |
3400:000 | DONE ins | em 16 16 | 005a46 | ca          |                 dex                  make room on Data Stack
3401:000 | DONE ins | em 16 16 | 005a47 | ca          |                 dex                  
3402:000 | DONE ins | em 16 16 | 005a48 | b4 00       |                 ldy.dx 00            
3403:000 | DONE wsp | em 16 16 |        |             |
3404:000 | DONE cmt | em 16 16 |        |             |                 ; There is no "jsr.i" instruction, so we have to do this the
3405:000 | DONE cmt | em 16 16 |        |             |                 ; hard way
3406:000 | DONE ins | em 16 16 | 005a4a | 86 22       |                 stx.d 000022         
3407:000 | DONE ins | em 16 16 | 005a4c | a2 00 00    |                 ldx.# 0000           
3408:000 | DONE ins | em 16 16 | 005a4f | fc 10 00    |                 jsr.xi 000010        JSR (INPUT,X) - returns char in A
3409:000 | DONE ins | em 16 16 | 005a52 | a6 22       |                 ldx.d 000022         
3410:000 | DONE wsp | em 16 16 |        |             |
3411:000 | DONE ins | em 16 16 | 005a54 | a8          |                 tay                  
3412:000 | DONE wsp | em 16 16 |        |             |
3413:000 | DONE lbl | em 16 16 | 005a55 |             | z_key                                
3413:001 | DONE ins | em 16 16 | 005a55 | 60          |                 rts                  
3414:000 | DONE wsp | em 16 16 |        |             |
3415:000 | DONE wsp | em 16 16 |        |             |
3416:000 | DONE cmt | em 16 16 |        |             | ; -------------------------------------------------------------------
3417:000 | DONE cmt | em 16 16 |        |             | ; I ( -- n )(R: n -- n )  X bytes / X cycles
3418:000 | DONE cmt | em 16 16 |        |             | ; Copy loop counter (top of Return Stack) to Data Stack. This is not the same as
3419:000 | DONE cmt | em 16 16 |        |             | ; R@ because we use a fudge factor for loop control; see (DO) for more details.
3420:000 | DONE cmt | em 16 16 |        |             | ; Native compile for speed.
3421:000 | DONE lbl | em 16 16 | 005a56 |             | xt_i                                 
3422:000 | DONE ins | em 16 16 | 005a56 | ca          |                 dex                  
3423:000 | DONE ins | em 16 16 | 005a57 | ca          |                 dex                  
3424:000 | DONE ins | em 16 16 | 005a58 | 94 00       |                 sty.dx 00            
3425:000 | DONE wsp | em 16 16 |        |             |
3426:000 | DONE cmt | em 16 16 |        |             |                 ; get the fudged value of the Return Stack
3427:000 | DONE ins | em 16 16 | 005a5a | 38          |                 sec                  
3428:000 | DONE ins | em 16 16 | 005a5b | a3 01       |                 lda.s 01             
3429:000 | DONE ins | em 16 16 | 005a5d | e3 03       |                 sbc.s 03             
3430:000 | DONE wsp | em 16 16 |        |             |
3431:000 | DONE ins | em 16 16 | 005a5f | a8          |                 tay                  
3432:000 | DONE wsp | em 16 16 |        |             |
3433:000 | DONE lbl | em 16 16 | 005a60 |             | z_i                                  
3433:001 | DONE ins | em 16 16 | 005a60 | 60          |                 rts                  
3434:000 | DONE wsp | em 16 16 |        |             |
3435:000 | DONE wsp | em 16 16 |        |             |
3436:000 | DONE cmt | em 16 16 |        |             | ; -------------------------------------------------------------------
3437:000 | DONE cmt | em 16 16 |        |             | ; IMMEDIATE ( -- ) X bytes / X cycles
3438:000 | DONE cmt | em 16 16 |        |             | ; Mark the most recently defined word as IMMEDIATE. Will only affect the last
3439:000 | DONE cmt | em 16 16 |        |             | ; word in the Dictionary. If the words is still in ROM for some reason, this
3440:000 | DONE cmt | em 16 16 |        |             | ; will have no effect and will fail without an error message
3441:000 | DONE lbl | em 16 16 | 005a61 |             | xt_immediate                         
3442:000 | DONE dir | em 16 16 |        |             |         .!a16                        
3443:000 | DONE ins | em 16 16 | 005a61 | a9 02 00    |                 lda.# IM             Immediate flag
3444:000 | DONE ins | em 16 16 | 005a64 | eb          |                 xba                  flags are MSB
3445:000 | DONE ins | em 16 16 | 005a65 | 12 02       |                 ora.di 000002        ORA (DP)
3446:000 | DONE ins | em 16 16 | 005a67 | 92 02       |                 sta.di 000002        
3447:000 | DONE wsp | em 16 16 |        |             |
3448:000 | DONE lbl | em 16 16 | 005a69 |             | z_immediate                          
3448:001 | DONE ins | em 16 16 | 005a69 | 60          |                 rts                  
3449:000 | DONE wsp | em 16 16 |        |             |
3450:000 | DONE wsp | em 16 16 |        |             |
3451:000 | DONE cmt | em 16 16 |        |             | ; -------------------------------------------------------------------
3452:000 | DONE cmt | em 16 16 |        |             | ; INPUT ( -- addr ) X bytes / X cycles
3453:000 | DONE cmt | em 16 16 |        |             | ; Return the address where the jump targeet for KEY is stored
3454:000 | DONE lbl | em 16 16 | 005a6a |             | xt_input                             
3455:000 | DONE ins | em 16 16 | 005a6a | ca          |                 dex                  
3456:000 | DONE ins | em 16 16 | 005a6b | ca          |                 dex                  
3457:000 | DONE ins | em 16 16 | 005a6c | 94 00       |                 sty.dx 00            
3458:000 | DONE wsp | em 16 16 |        |             |
3459:000 | DONE ins | em 16 16 | 005a6e | a0 10 00    |                 ldy.# 000010         
3460:000 | DONE wsp | em 16 16 |        |             |
3461:000 | DONE lbl | em 16 16 | 005a71 |             | z_input                              
3461:001 | DONE ins | em 16 16 | 005a71 | 60          |                 rts                  
3462:000 | DONE wsp | em 16 16 |        |             |
3463:000 | DONE wsp | em 16 16 |        |             |
3464:000 | DONE cmt | em 16 16 |        |             | ; -------------------------------------------------------------------
3465:000 | DONE cmt | em 16 16 |        |             | ; INT>NAME ( xt -- nt ) X bytes / X cycles
3466:000 | DONE cmt | em 16 16 |        |             | ; Given an execution token (xt), return the name token (nt). This is called
3467:000 | DONE cmt | em 16 16 |        |             | ; >NAME in Gforth, but changed to INT>NAME for Liara to fit better with
3468:000 | DONE cmt | em 16 16 |        |             | ; NAME>INT.
3469:000 | DONE lbl | em 16 16 | 005a72 |             | xt_int-name                          
3470:000 | DONE cmt | em 16 16 |        |             |                 ; Unfortunately, to find the header, we have to walk through the
3471:000 | DONE cmt | em 16 16 |        |             |                 ; dictionary
3472:000 | DONE ins | em 16 16 | 005a72 | a5 02       |                 lda.d 000002         nt of first Dictionary word
3473:000 | DONE ins | em 16 16 | 005a74 | 85 1c       |                 sta.d 00001c         
3474:000 | DONE wsp | em 16 16 |        |             |
3475:000 | DONE ins | em 16 16 | 005a76 | 84 24       |                 sty.d 000024         xt of mystery word
3476:000 | DONE ins | em 16 16 | 005a78 | a0 04 00    |                 ldy.# 0004           xt in header is two bytes down
3477:000 | DONE wsp | em 16 16 |        |             |
3478:000 | DONE lbl | em 16 16 | 005a7b |             | in_loop                              
3479:000 | DONE ins | em 16 16 | 005a7b | b1 1c       |                 lda.diy 00001c       LDA (TMP1),Y - get xt of current nt
3480:000 | DONE ins | em 16 16 | 005a7d | c5 24       |                 cmp.d 000024         
3481:000 | DONE ins | em 16 16 | 005a7f | f0 12       |                 beq 005a93           
3482:000 | DONE wsp | em 16 16 |        |             |
3483:000 | DONE cmt | em 16 16 |        |             |                 ; no joy, next header address is two bytes down
3484:000 | DONE ins | em 16 16 | 005a81 | e6 1c       |                 inc.d 00001c         
3485:000 | DONE ins | em 16 16 | 005a83 | e6 1c       |                 inc.d 00001c         
3486:000 | DONE ins | em 16 16 | 005a85 | b2 1c       |                 lda.di 00001c        LDA (TMP1)
3487:000 | DONE wsp | em 16 16 |        |             |
3488:000 | DONE cmt | em 16 16 |        |             |                 ; a zero entry marks the end of the Dictionary
3489:000 | DONE ins | em 16 16 | 005a87 | f0 04       |                 beq 005a8d           
3490:000 | DONE wsp | em 16 16 |        |             |
3491:000 | DONE ins | em 16 16 | 005a89 | 85 1c       |                 sta.d 00001c         new header
3492:000 | DONE ins | em 16 16 | 005a8b | 80 ee       |                 bra 005a7b           
3493:000 | DONE wsp | em 16 16 |        |             |
3494:000 | DONE lbl | em 16 16 | 005a8d |             | in_notfound                          
3495:000 | DONE ins | em 16 16 | 005a8d | a9 ba 71    |                 lda.# 0071ba         
3496:000 | DONE ins | em 16 16 | 005a90 | 4c 21 6a    |                 jmp 006a21           
3497:000 | DONE wsp | em 16 16 |        |             |
3498:000 | DONE lbl | em 16 16 | 005a93 |             | in_found                             
3499:000 | DONE ins | em 16 16 | 005a93 | a4 1c       |                 ldy.d 00001c         replace xt by nt
3500:000 | DONE wsp | em 16 16 |        |             |
3501:000 | DONE lbl | em 16 16 | 005a95 |             | z_int-name                           
3501:001 | DONE ins | em 16 16 | 005a95 | 60          |                 rts                  
3502:000 | DONE wsp | em 16 16 |        |             |
3503:000 | DONE wsp | em 16 16 |        |             |
3504:000 | DONE cmt | em 16 16 |        |             | ; -------------------------------------------------------------------
3505:000 | DONE cmt | em 16 16 |        |             | ; INVERT ( n -- n ) 5 bytes / X cycles
3506:000 | DONE cmt | em 16 16 |        |             | ; Complement of TOS
3507:000 | DONE lbl | em 16 16 | 005a96 |             | xt_invert                            
3508:000 | DONE dir | em 16 16 |        |             |         .!a16                        
3509:000 | DONE ins | em 16 16 | 005a96 | 98          |                 tya                  
3510:000 | DONE ins | em 16 16 | 005a97 | 49 ff ff    |                 eor.# 0ffff          
3511:000 | DONE ins | em 16 16 | 005a9a | a8          |                 tay                  
3512:000 | DONE wsp | em 16 16 |        |             |
3513:000 | DONE lbl | em 16 16 | 005a9b |             | z_invert                             
3513:001 | DONE ins | em 16 16 | 005a9b | 60          |                 rts                  
3514:000 | DONE wsp | em 16 16 |        |             |
3515:000 | DONE wsp | em 16 16 |        |             |
3516:000 | DONE cmt | em 16 16 |        |             | ; -------------------------------------------------------------------
3517:000 | DONE cmt | em 16 16 |        |             | ; HERE ( -- u ) 6 bytes / 13 cycles
3518:000 | DONE cmt | em 16 16 |        |             | ; Push Compiler Pointer address on the Data Stack
3519:000 | DONE lbl | em 16 16 | 005a9c |             | xt_here                              
3520:000 | DONE dir | em 16 16 |        |             |         .!xy16                       
3521:000 | DONE ins | em 16 16 | 005a9c | ca          |                 dex                  
3522:000 | DONE ins | em 16 16 | 005a9d | ca          |                 dex                  
3523:000 | DONE ins | em 16 16 | 005a9e | 94 00       |                 sty.dx 00            
3524:000 | DONE wsp | em 16 16 |        |             |
3525:000 | DONE ins | em 16 16 | 005aa0 | a4 00       |                 ldy.d 000000         
3526:000 | DONE wsp | em 16 16 |        |             |
3527:000 | DONE lbl | em 16 16 | 005aa2 |             | z_here                               
3527:001 | DONE ins | em 16 16 | 005aa2 | 60          |                 rts                  
3528:000 | DONE wsp | em 16 16 |        |             |
3529:000 | DONE cmt | em 16 16 |        |             | ; -------------------------------------------------------------------
3530:000 | DONE cmt | em 16 16 |        |             | ; HEX ( -- ) X bytes / X cycles
3531:000 | DONE cmt | em 16 16 |        |             | ; Change radix for number conversion to 16
3532:000 | DONE lbl | em 16 16 | 005aa3 |             | xt_hex                               
3533:000 | DONE dir | em 16 16 |        |             |         .!a16                        
3534:000 | DONE ins | em 16 16 | 005aa3 | a9 10 00    |                 lda.# 0010           
3535:000 | DONE ins | em 16 16 | 005aa6 | 85 16       |                 sta.d 000016         
3536:000 | DONE wsp | em 16 16 |        |             |
3537:000 | DONE lbl | em 16 16 | 005aa8 |             | z_hex                                
3537:001 | DONE ins | em 16 16 | 005aa8 | 60          |                 rts                  
3538:000 | DONE wsp | em 16 16 |        |             |
3539:000 | DONE cmt | em 16 16 |        |             | ; -------------------------------------------------------------------
3540:000 | DONE cmt | em 16 16 |        |             | ; HOLD ( char -- ) X bytes / X cycles
3541:000 | DONE cmt | em 16 16 |        |             | ; Insert a character at the current position of a pictured numeric output string
3542:000 | DONE cmt | em 16 16 |        |             | ; Code based on https://github.com/philburk/pforth/blob/master/fth/numberio.fth
3543:000 | DONE cmt | em 16 16 |        |             | ; Forth code is : HOLD  -1 HLD +!  HLD @ C! ;  We use the the internal variable
3544:000 | DONE cmt | em 16 16 |        |             | ; tohold instead of HLD.
3545:000 | DONE lbl | em 16 16 | 005aa9 |             | xt_hold                              
3546:000 | DONE dir | em 16 16 |        |             |         .!a16                        
3547:000 | DONE ins | em 16 16 | 005aa9 | c6 18       |                 dec.d 000018         -1 HLD +!
3548:000 | DONE wsp | em 16 16 |        |             |
3549:000 | DONE ins | em 16 16 | 005aab | 98          |                 tya                  
3550:000 | DONE ins | em 16 16 | 005aac | e2 20       |                 sep 20               
3550:001 | DONE ctl | em  8 16 |        |             |         .!a8
3551:000 | DONE ins | em  8 16 | 005aae | 92 18       |                 sta.di 000018        STA (TOHOLD)
3552:000 | DONE ins | em  8 16 | 005ab0 | c2 20       |                 rep 20               
3552:001 | DONE ctl | em 16 16 |        |             |         .!a16
3553:000 | DONE ins | em 16 16 | 005ab2 | b4 00       |                 ldy.dx 00            
3554:000 | DONE ins | em 16 16 | 005ab4 | e8          |                 inx                  
3555:000 | DONE ins | em 16 16 | 005ab5 | e8          |                 inx                  
3556:000 | DONE wsp | em 16 16 |        |             |
3557:000 | DONE lbl | em 16 16 | 005ab6 |             | z_hold                               
3557:001 | DONE ins | em 16 16 | 005ab6 | 60          |                 rts                  
3558:000 | DONE wsp | em 16 16 |        |             |
3559:000 | DONE cmt | em 16 16 |        |             | ; -------------------------------------------------------------------
3560:000 | DONE cmt | em 16 16 |        |             | ; LATESTNT ( -- nt ) 7 bytes / X cycles
3561:000 | DONE cmt | em 16 16 |        |             | ; Return the name token (nt) of the last word in the Dictionary. The Gforth
3562:000 | DONE cmt | em 16 16 |        |             | ; version of this word is called LATEST.
3563:000 | DONE lbl | em 16 16 | 005ab7 |             | xt_latestnt                          
3564:000 | DONE dir | em 16 16 |        |             |         .!a16                        
3565:000 | DONE ins | em 16 16 | 005ab7 | ca          |                 dex                  make room on Data Stack
3566:000 | DONE ins | em 16 16 | 005ab8 | ca          |                 dex                  
3567:000 | DONE ins | em 16 16 | 005ab9 | 94 00       |                 sty.dx 00            
3568:000 | DONE wsp | em 16 16 |        |             |
3569:000 | DONE ins | em 16 16 | 005abb | a5 02       |                 lda.d 000002         
3570:000 | DONE ins | em 16 16 | 005abd | a8          |                 tay                  
3571:000 | DONE wsp | em 16 16 |        |             |
3572:000 | DONE lbl | em 16 16 | 005abe |             | z_latestnt                           
3572:001 | DONE ins | em 16 16 | 005abe | 60          |                 rts                  
3573:000 | DONE wsp | em 16 16 |        |             |
3574:000 | DONE wsp | em 16 16 |        |             |
3575:000 | DONE cmt | em 16 16 |        |             | ; -------------------------------------------------------------------
3576:000 | DONE cmt | em 16 16 |        |             | ; LATESTXT ( -- xt ) 11 bytes / X cycles
3577:000 | DONE cmt | em 16 16 |        |             | ; Return the name token (xt) of the last word in the Dictionary. This is simply
3578:000 | DONE cmt | em 16 16 |        |             | ; LATESTNT but four bytes down and with a FETCH
3579:000 | DONE lbl | em 16 16 | 005abf |             | xt_latestxt                          
3580:000 | DONE dir | em 16 16 |        |             |         .!a16                        
3581:000 | DONE ins | em 16 16 | 005abf | ca          |                 dex                  make room on Data Stack
3582:000 | DONE ins | em 16 16 | 005ac0 | ca          |                 dex                  
3583:000 | DONE ins | em 16 16 | 005ac1 | 94 00       |                 sty.dx 00            
3584:000 | DONE wsp | em 16 16 |        |             |
3585:000 | DONE ins | em 16 16 | 005ac3 | a5 02       |                 lda.d 000002         
3586:000 | DONE wsp | em 16 16 |        |             |
3587:000 | DONE ins | em 16 16 | 005ac5 | 18          |                 clc                  xt is stored four bytes below nt in header
3588:000 | DONE ins | em 16 16 | 005ac6 | 69 04 00    |                 adc.# 0004           
3589:000 | DONE ins | em 16 16 | 005ac9 | a8          |                 tay                  
3590:000 | DONE wsp | em 16 16 |        |             |
3591:000 | DONE ins | em 16 16 | 005aca | b9 00 00    |                 lda.y 0000           FETCH
3592:000 | DONE ins | em 16 16 | 005acd | a8          |                 tay                  
3593:000 | DONE wsp | em 16 16 |        |             |
3594:000 | DONE lbl | em 16 16 | 005ace |             | z_latestxt                           
3594:001 | DONE ins | em 16 16 | 005ace | 60          |                 rts                  
3595:000 | DONE wsp | em 16 16 |        |             |
3596:000 | DONE wsp | em 16 16 |        |             |
3597:000 | DONE cmt | em 16 16 |        |             | ; -------------------------------------------------------------------
3598:000 | DONE cmt | em 16 16 |        |             | ; LITERAL ( n -- ) X bytes / X cycles
3599:000 | DONE cmt | em 16 16 |        |             | ; Compile-only word to store TOS so that it is pushed on stack during runtime.
3600:000 | DONE cmt | em 16 16 |        |             | ; This is a immediate, compile-only word. Test it with  : AAA [ 1 ] LITERAL ;
3601:000 | DONE cmt | em 16 16 |        |             | ; for instance
3602:000 | DONE lbl | em 16 16 | 005acf |             | xt_literal                           
3603:000 | DONE cmt | em 16 16 |        |             |                 ; During runtime, we call the routine at the bottom by compiling
3604:000 | DONE cmt | em 16 16 |        |             |                 ; JSR LITERAL_RT. Note the cmpl_ routines use tmptos
3605:000 | DONE ins | em 16 16 | 005acf | f4 e1 5a    |                 phe.# 005ae1         PEA LITERAL_RT
3606:000 | DONE ins | em 16 16 | 005ad2 | 20 00 6a    |                 jsr 006a00           
3607:000 | DONE wsp | em 16 16 |        |             |
3608:000 | DONE cmt | em 16 16 |        |             |                 ; compile the value that is to be pushed to the Data Stack at
3609:000 | DONE cmt | em 16 16 |        |             |                 ; runtime. There is no "sty.di", so we have to do this the hard
3610:000 | DONE cmt | em 16 16 |        |             |                 ; way. This is basically , ("comma")
3611:000 | DONE ins | em 16 16 | 005ad5 | 98          |                 tya                  
3612:000 | DONE ins | em 16 16 | 005ad6 | 92 00       |                 sta.di 000000        
3613:000 | DONE ins | em 16 16 | 005ad8 | e6 00       |                 inc.d 000000         
3614:000 | DONE ins | em 16 16 | 005ada | e6 00       |                 inc.d 000000         
3615:000 | DONE wsp | em 16 16 |        |             |
3616:000 | DONE ins | em 16 16 | 005adc | b4 00       |                 ldy.dx 00            DROP
3617:000 | DONE ins | em 16 16 | 005ade | e8          |                 inx                  
3618:000 | DONE ins | em 16 16 | 005adf | e8          |                 inx                  
3619:000 | DONE wsp | em 16 16 |        |             |
3620:000 | DONE lbl | em 16 16 | 005ae0 |             | z_literal                            
3620:001 | DONE ins | em 16 16 | 005ae0 | 60          |                 rts                  
3621:000 | DONE wsp | em 16 16 |        |             |
3622:000 | DONE lbl | em 16 16 | 005ae1 |             | literal_rt                           
3623:000 | DONE cmt | em 16 16 |        |             |                 ; During runtime, we push the value following this word
3624:000 | DONE cmt | em 16 16 |        |             |                 ; back on the Data Stack. The subroutine jump that brought us
3625:000 | DONE cmt | em 16 16 |        |             |                 ; here put the address to return to on the Return Stack - this
3626:000 | DONE cmt | em 16 16 |        |             |                 ; points to the data we need to get
3627:000 | DONE wsp | em 16 16 |        |             |
3628:000 | DONE cmt | em 16 16 |        |             |                 ; Make room on Data Stack, Y now free to use
3629:000 | DONE ins | em 16 16 | 005ae1 | ca          |                 dex                  
3630:000 | DONE ins | em 16 16 | 005ae2 | ca          |                 dex                  
3631:000 | DONE ins | em 16 16 | 005ae3 | 94 00       |                 sty.dx 00            
3632:000 | DONE wsp | em 16 16 |        |             |
3633:000 | DONE cmt | em 16 16 |        |             |                 ; The 65816 stores (<RETURN-ADDRESS> - 1) on the Return Stack
3634:000 | DONE cmt | em 16 16 |        |             |                 ; so we have to manipulate the address
3635:000 | DONE ins | em 16 16 | 005ae5 | 7a          |                 ply                  
3636:000 | DONE ins | em 16 16 | 005ae6 | c8          |                 iny                  
3637:000 | DONE ins | em 16 16 | 005ae7 | b9 00 00    |                 lda.y 0000           LDA $0000,Y - get value after jump
3638:000 | DONE wsp | em 16 16 |        |             |
3639:000 | DONE ins | em 16 16 | 005aea | c8          |                 iny                  move return address past data and restore
3640:000 | DONE ins | em 16 16 | 005aeb | 5a          |                 phy                  so we can get back home
3641:000 | DONE wsp | em 16 16 |        |             |
3642:000 | DONE ins | em 16 16 | 005aec | a8          |                 tay                  Value is now on the Data Stack ( -- n )
3643:000 | DONE wsp | em 16 16 |        |             |
3644:000 | DONE ins | em 16 16 | 005aed | 60          |                 rts                  
3645:000 | DONE wsp | em 16 16 |        |             |
3646:000 | DONE wsp | em 16 16 |        |             |
3647:000 | DONE cmt | em 16 16 |        |             | ; -------------------------------------------------------------------
3648:000 | DONE cmt | em 16 16 |        |             | ; LSHIFT ( n u -- n ) X bytes / X cycles
3649:000 | DONE cmt | em 16 16 |        |             | ; Logically shift TOS u times to the left, adding zeros to the right
3650:000 | DONE lbl | em 16 16 | 005aee |             | xt_lshift                            
3651:000 | DONE cmt | em 16 16 |        |             |                 ; We shift at most 16 bits, because anything above that will be
3652:000 | DONE cmt | em 16 16 |        |             |                 ; zeros anyway
3653:000 | DONE ins | em 16 16 | 005aee | 98          |                 tya                  
3654:000 | DONE ins | em 16 16 | 005aef | 29 0f 00    |                 and.# 000f           
3655:000 | DONE ins | em 16 16 | 005af2 | f0 09       |                 beq 005afd           if zero shifts, we're done
3656:000 | DONE wsp | em 16 16 |        |             |
3657:000 | DONE ins | em 16 16 | 005af4 | a8          |                 tay                  number of shifts is TOS
3658:000 | DONE ins | em 16 16 | 005af5 | b5 00       |                 lda.dx 00            number is in NOS
3659:000 | DONE lbl | em 16 16 | 005af7 |             | lshift_loop                          
3660:000 | DONE ins | em 16 16 | 005af7 | 0a          |                 asl.a                
3661:000 | DONE ins | em 16 16 | 005af8 | 88          |                 dey                  
3662:000 | DONE ins | em 16 16 | 005af9 | d0 fc       |                 bne 005af7           
3663:000 | DONE wsp | em 16 16 |        |             |
3664:000 | DONE ins | em 16 16 | 005afb | 95 00       |                 sta.dx 00            put NOS, which last step will pull up
3665:000 | DONE wsp | em 16 16 |        |             |
3666:000 | DONE lbl | em 16 16 | 005afd |             | lshift_done                          
3667:000 | DONE ins | em 16 16 | 005afd | b4 00       |                 ldy.dx 00            
3668:000 | DONE ins | em 16 16 | 005aff | e8          |                 inx                  
3669:000 | DONE ins | em 16 16 | 005b00 | e8          |                 inx                  
3670:000 | DONE wsp | em 16 16 |        |             |
3671:000 | DONE lbl | em 16 16 | 005b01 |             | z_lshift                             
3671:001 | DONE ins | em 16 16 | 005b01 | 60          |                 rts                  
3672:000 | DONE wsp | em 16 16 |        |             |
3673:000 | DONE wsp | em 16 16 |        |             |
3674:000 | DONE cmt | em 16 16 |        |             | ; -------------------------------------------------------------------
3675:000 | DONE cmt | em 16 16 |        |             | ; M* "MSTAR" ( n n -- d ) 16*16 -> 32  X bytes / X cycles
3676:000 | DONE cmt | em 16 16 |        |             | ; Multiply two 16 bit numbers, producing a 32 bit result. All values are signed.
3677:000 | DONE cmt | em 16 16 |        |             | ; This was originally adapted from FIG Forth for Tali Forth. The original Forth
3678:000 | DONE cmt | em 16 16 |        |             | ; code is : M* OVER OVER XOR >R ABS SWAP ABS UM* R> D+- ;  with
3679:000 | DONE cmt | em 16 16 |        |             | ; : D+- O< IF DNEGATE THEN ;
3680:000 | DONE cmt | em 16 16 |        |             | ; TODO Test this more once we have the Double words etc all working
3681:000 | DONE lbl | em 16 16 | 005b02 |             | xt_mstar                             
3682:000 | DONE dir | em 16 16 |        |             |         .!a16                        
3683:000 | DONE cmt | em 16 16 |        |             |                 ; figure out the sign
3684:000 | DONE ins | em 16 16 | 005b02 | 98          |                 tya                  
3685:000 | DONE ins | em 16 16 | 005b03 | 55 00       |                 eor.dx 00            
3686:000 | DONE wsp | em 16 16 |        |             |
3687:000 | DONE cmt | em 16 16 |        |             |                 ; um* uses all kinds of tmp stuff so we don't risk a conflict
3688:000 | DONE cmt | em 16 16 |        |             |                 ; and just take the cycle hit by pushing this to the stack
3689:000 | DONE ins | em 16 16 | 005b05 | 48          |                 pha                  
3690:000 | DONE wsp | em 16 16 |        |             |
3691:000 | DONE cmt | em 16 16 |        |             |                 ; get the absolute value of both numbers so we can feed them to
3692:000 | DONE cmt | em 16 16 |        |             |                 ; UM*, which does the real work
3693:000 | DONE ins | em 16 16 | 005b06 | 98          |                 tya                  
3694:000 | DONE ins | em 16 16 | 005b07 | 10 05       |                 bpl 005b0e           
3695:000 | DONE wsp | em 16 16 |        |             |
3696:000 | DONE cmt | em 16 16 |        |             |                 ; TOS is negative so we have to ABS it
3697:000 | DONE ins | em 16 16 | 005b09 | 49 ff ff    |                 eor.# 0ffff          
3698:000 | DONE ins | em 16 16 | 005b0c | 1a          |                 inc.a                
3699:000 | DONE ins | em 16 16 | 005b0d | a8          |                 tay                  
3700:000 | DONE wsp | em 16 16 |        |             |
3701:000 | DONE lbl | em 16 16 | 005b0e |             | mstar_abs_nos                        
3702:000 | DONE ins | em 16 16 | 005b0e | b5 00       |                 lda.dx 00            
3703:000 | DONE ins | em 16 16 | 005b10 | 10 06       |                 bpl 005b18           
3704:000 | DONE wsp | em 16 16 |        |             |
3705:000 | DONE cmt | em 16 16 |        |             |                 ; NOS is negative so we have to ABS it
3706:000 | DONE ins | em 16 16 | 005b12 | 49 ff ff    |                 eor.# 0ffff          
3707:000 | DONE ins | em 16 16 | 005b15 | 1a          |                 inc.a                
3708:000 | DONE ins | em 16 16 | 005b16 | 95 00       |                 sta.dx 00            
3709:000 | DONE wsp | em 16 16 |        |             |
3710:000 | DONE lbl | em 16 16 | 005b18 |             | mstar_umstar                         
3711:000 | DONE ins | em 16 16 | 005b18 | 20 33 5f    |                 jsr 005f33           now ( d ) on stack
3712:000 | DONE wsp | em 16 16 |        |             |
3713:000 | DONE cmt | em 16 16 |        |             |                 ; handle the sign
3714:000 | DONE ins | em 16 16 | 005b1b | 68          |                 pla                  
3715:000 | DONE wsp | em 16 16 |        |             |
3716:000 | DONE cmt | em 16 16 |        |             |                 ; postive, we don't have to care
3717:000 | DONE ins | em 16 16 | 005b1c | 10 03       |                 bpl 005b21           
3718:000 | DONE wsp | em 16 16 |        |             |
3719:000 | DONE ins | em 16 16 | 005b1e | 20 65 58    |                 jsr 005865           
3720:000 | DONE wsp | em 16 16 |        |             |
3721:000 | DONE lbl | em 16 16 | 005b21 |             | z_mstar                              
3721:001 | DONE ins | em 16 16 | 005b21 | 60          |                 rts                  
3722:000 | DONE wsp | em 16 16 |        |             |
3723:000 | DONE wsp | em 16 16 |        |             |
3724:000 | DONE cmt | em 16 16 |        |             | ; -------------------------------------------------------------------
3725:000 | DONE cmt | em 16 16 |        |             | ; MARKER ( "name" -- ) X bytes / X cycles
3726:000 | DONE cmt | em 16 16 |        |             | ; Create a deletion boundry, restoring the Dictionary to an earlier state. This
3727:000 | DONE cmt | em 16 16 |        |             | ; replaces FORGET in earlier Forths. Old entries are not actually deleted, but
3728:000 | DONE cmt | em 16 16 |        |             | ; merely overwritten by restoring CP and DP.
3729:000 | DONE lbl | em 16 16 | 005b22 |             | xt_marker                            
3730:000 | DONE cmt | em 16 16 |        |             |                 ; This is a defining word
3731:000 | DONE ins | em 16 16 | 005b22 | 20 56 57    |                 jsr 005756           
3732:000 | DONE wsp | em 16 16 |        |             |
3733:000 | DONE cmt | em 16 16 |        |             |                 ; Add the current DP as a payload - the DP of the marker itself
3734:000 | DONE cmt | em 16 16 |        |             |                 ; TODO see if it doesn't make more sense to add nt_ of the previous
3735:000 | DONE cmt | em 16 16 |        |             |                 ; word
3736:000 | DONE ins | em 16 16 | 005b25 | a5 02       |                 lda.d 000002         
3737:000 | DONE ins | em 16 16 | 005b27 | 92 00       |                 sta.di 000000        STA (CP)
3738:000 | DONE ins | em 16 16 | 005b29 | e6 00       |                 inc.d 000000         
3739:000 | DONE ins | em 16 16 | 005b2b | e6 00       |                 inc.d 000000         
3740:000 | DONE wsp | em 16 16 |        |             |
3741:000 | DONE cmt | em 16 16 |        |             |                 ; DOES> by hand: Add runtime behavior and DODOES routine
3742:000 | DONE ins | em 16 16 | 005b2d | 20 c6 58    |                 jsr 0058c6           
3743:000 | DONE ins | em 16 16 | 005b30 | 20 88 69    |                 jsr 006988           
3744:000 | DONE wsp | em 16 16 |        |             |
3745:000 | DONE cmt | em 16 16 |        |             |                 ; DOES> payload
3746:000 | DONE ins | em 16 16 | 005b33 | 20 da 52    |                 jsr 0052da           ( nt )
3747:000 | DONE wsp | em 16 16 |        |             |
3748:000 | DONE cmt | em 16 16 |        |             |                 ; We now have the DP of the marker itself on the stack, but we
3749:000 | DONE cmt | em 16 16 |        |             |                 ; need the DP of the previous word. That is two bytes down
3750:000 | DONE ins | em 16 16 | 005b36 | 84 20       |                 sty.d 000020         
3751:000 | DONE ins | em 16 16 | 005b38 | a0 02 00    |                 ldy.# 0002           overwrite TOS, won't be needing it
3752:000 | DONE ins | em 16 16 | 005b3b | b1 20       |                 lda.diy 000020       LDA (TMP3),Y
3753:000 | DONE ins | em 16 16 | 005b3d | 85 02       |                 sta.d 000002         
3754:000 | DONE wsp | em 16 16 |        |             |
3755:000 | DONE cmt | em 16 16 |        |             |                 ; Adjust the CP, which is one byte after the z_ address of the
3756:000 | DONE cmt | em 16 16 |        |             |                 ; word we just restored. That address is six bytes down
3757:000 | DONE ins | em 16 16 | 005b3f | a0 06 00    |                 ldy.# 0006           
3758:000 | DONE ins | em 16 16 | 005b42 | b1 02       |                 lda.diy 000002       LDA (DP),Y
3759:000 | DONE ins | em 16 16 | 005b44 | 1a          |                 inc.a                first free byte is one byte further down
3760:000 | DONE ins | em 16 16 | 005b45 | 85 00       |                 sta.d 000000         
3761:000 | DONE wsp | em 16 16 |        |             |
3762:000 | DONE cmt | em 16 16 |        |             |                 ; clean up stack
3763:000 | DONE ins | em 16 16 | 005b47 | b4 00       |                 ldy.dx 00            
3764:000 | DONE ins | em 16 16 | 005b49 | e8          |                 inx                  
3765:000 | DONE ins | em 16 16 | 005b4a | e8          |                 inx                  
3766:000 | DONE wsp | em 16 16 |        |             |
3767:000 | DONE lbl | em 16 16 | 005b4b |             | z_marker                             
3767:001 | DONE ins | em 16 16 | 005b4b | 60          |                 rts                  
3768:000 | DONE wsp | em 16 16 |        |             |
3769:000 | DONE wsp | em 16 16 |        |             |
3770:000 | DONE cmt | em 16 16 |        |             | ; -------------------------------------------------------------------
3771:000 | DONE cmt | em 16 16 |        |             | ; MAX ( n m -- n ) 18 bytes / X cycles
3772:000 | DONE cmt | em 16 16 |        |             | ; Compare TOS and NOS and keep which one is larger. Adapted from Lance A.
3773:000 | DONE cmt | em 16 16 |        |             | ; Leventhal "6502 Assembly Language Subroutines". Negative Flag indicates which
3774:000 | DONE cmt | em 16 16 |        |             | ; number is larger. See also http://6502.org/tutorials/compare_instructions.html
3775:000 | DONE cmt | em 16 16 |        |             | ; and http://www.righto.com/2012/12/the-6502-overflow-flag-explained.html
3776:000 | DONE lbl | em 16 16 | 005b4c |             | xt_max                               
3777:000 | DONE ins | em 16 16 | 005b4c | 98          |                 tya                  
3778:000 | DONE ins | em 16 16 | 005b4d | d5 00       |                 cmp.dx 00            
3779:000 | DONE wsp | em 16 16 |        |             |
3780:000 | DONE cmt | em 16 16 |        |             |                 ; If they are the same, life is good. This step also sets the
3781:000 | DONE cmt | em 16 16 |        |             |                 ; Carry flag
3782:000 | DONE ins | em 16 16 | 005b4f | f0 0b       |                 beq 005b5c           Faster than DROP because TOS is in Y
3783:000 | DONE wsp | em 16 16 |        |             |
3784:000 | DONE ins | em 16 16 | 005b51 | f5 00       |                 sbc.dx 00            
3785:000 | DONE ins | em 16 16 | 005b53 | 50 03       |                 bvc 005b58           no overflow, skip ahead
3786:000 | DONE wsp | em 16 16 |        |             |
3787:000 | DONE cmt | em 16 16 |        |             |                 ; Deal with oveflow because we use signed numbers
3788:000 | DONE ins | em 16 16 | 005b55 | 49 00 80    |                 eor.# 8000           compliment negative flag
3789:000 | DONE wsp | em 16 16 |        |             |
3790:000 | DONE lbl | em 16 16 | 005b58 |             | max_no_ov                            
3791:000 | DONE ins | em 16 16 | 005b58 | 10 02       |                 bpl 005b5c           keep TOS
3792:000 | DONE lbl | em 16 16 | 005b5a |             | max_drop                             
3793:000 | DONE ins | em 16 16 | 005b5a | b4 00       |                 ldy.dx 00            DROP so NOS is result
3794:000 | DONE lbl | em 16 16 | 005b5c |             | max_nip                              
3795:000 | DONE ins | em 16 16 | 005b5c | e8          |                 inx                  
3796:000 | DONE ins | em 16 16 | 005b5d | e8          |                 inx                  
3797:000 | DONE wsp | em 16 16 |        |             |
3798:000 | DONE lbl | em 16 16 | 005b5e |             | z_max                                
3798:001 | DONE ins | em 16 16 | 005b5e | 60          |                 rts                  
3799:000 | DONE wsp | em 16 16 |        |             |
3800:000 | DONE wsp | em 16 16 |        |             |
3801:000 | DONE cmt | em 16 16 |        |             | ; -------------------------------------------------------------------
3802:000 | DONE cmt | em 16 16 |        |             | ; MIN ( n m -- n ) 18 bytes / X cycles
3803:000 | DONE cmt | em 16 16 |        |             | ; Compare TOS and NOS and keep which one is smaller Adapted from Lance A.
3804:000 | DONE cmt | em 16 16 |        |             | ; Leventhal "6502 Assembly Language Subroutines". Negative Flag indicates which
3805:000 | DONE cmt | em 16 16 |        |             | ; number is larger. See also http://6502.org/tutorials/compare_instructions.html
3806:000 | DONE cmt | em 16 16 |        |             | ; and http://www.righto.com/2012/12/the-6502-overflow-flag-explained.html
3807:000 | DONE lbl | em 16 16 | 005b5f |             | xt_min                               
3808:000 | DONE ins | em 16 16 | 005b5f | 98          |                 tya                  
3809:000 | DONE ins | em 16 16 | 005b60 | d5 00       |                 cmp.dx 00            
3810:000 | DONE wsp | em 16 16 |        |             |
3811:000 | DONE cmt | em 16 16 |        |             |                 ; If they are the same, life is good. This step also sets the
3812:000 | DONE cmt | em 16 16 |        |             |                 ; Carry flag
3813:000 | DONE ins | em 16 16 | 005b62 | f0 0b       |                 beq 005b6f           Faster than DROP because TOS is in Y
3814:000 | DONE wsp | em 16 16 |        |             |
3815:000 | DONE ins | em 16 16 | 005b64 | f5 00       |                 sbc.dx 00            
3816:000 | DONE ins | em 16 16 | 005b66 | 50 03       |                 bvc 005b6b           no overflow, skip ahead
3817:000 | DONE wsp | em 16 16 |        |             |
3818:000 | DONE cmt | em 16 16 |        |             |                 ; Deal with oveflow because we use signed numbers
3819:000 | DONE ins | em 16 16 | 005b68 | 49 00 80    |                 eor.# 8000           compliment negative flag
3820:000 | DONE wsp | em 16 16 |        |             |
3821:000 | DONE lbl | em 16 16 | 005b6b |             | min_no_ov                            
3822:000 | DONE ins | em 16 16 | 005b6b | 30 02       |                 bmi 005b6f           keep TOS
3823:000 | DONE lbl | em 16 16 | 005b6d |             | min_drop                             
3824:000 | DONE ins | em 16 16 | 005b6d | b4 00       |                 ldy.dx 00            DROP so NOS is result
3825:000 | DONE lbl | em 16 16 | 005b6f |             | min_nip                              
3826:000 | DONE ins | em 16 16 | 005b6f | e8          |                 inx                  
3827:000 | DONE ins | em 16 16 | 005b70 | e8          |                 inx                  
3828:000 | DONE wsp | em 16 16 |        |             |
3829:000 | DONE lbl | em 16 16 | 005b71 |             | z_min                                
3829:001 | DONE ins | em 16 16 | 005b71 | 60          |                 rts                  
3830:000 | DONE wsp | em 16 16 |        |             |
3831:000 | DONE cmt | em 16 16 |        |             | ; -------------------------------------------------------------------
3832:000 | DONE cmt | em 16 16 |        |             | ; MOVE ( addr1 addr2 u -- ) X bytes / X cycles
3833:000 | DONE cmt | em 16 16 |        |             | ; Move u bytes from addr1 to addr2, so that in the end, addr2 contains exactly
3834:000 | DONE cmt | em 16 16 |        |             | ; what was in addr1. This routine calls CMOVE or CMOVE>. Forth verison is
3835:000 | DONE cmt | em 16 16 |        |             | ; >R 2DUP U< IF R> CMOVE> ELSE  R> CMOVE THEN ; see
3836:000 | DONE cmt | em 16 16 |        |             | ; https://groups.google.com/forum/#!topic/comp.lang.forth/-l2WlE7pEE0
3837:000 | DONE cmt | em 16 16 |        |             | ; Also see CMOVE> and CMOVE and http://forum.6502.org/viewtopic.php?f=2&t=1685
3838:000 | DONE lbl | em 16 16 | 005b72 |             | xt_move                              
3839:000 | DONE dir | em 16 16 |        |             |         .!a16                        
3840:000 | DONE cmt | em 16 16 |        |             |                 ; if u is zero, we just skip all of this
3841:000 | DONE ins | em 16 16 | 005b72 | 98          |                 tya                  
3842:000 | DONE ins | em 16 16 | 005b73 | f0 10       |                 beq 005b85           
3843:000 | DONE wsp | em 16 16 |        |             |
3844:000 | DONE cmt | em 16 16 |        |             |                 ; if source and destination are the same, that would be silly as
3845:000 | DONE cmt | em 16 16 |        |             |                 ; well
3846:000 | DONE ins | em 16 16 | 005b75 | b5 00       |                 lda.dx 00            addr2 (destination)
3847:000 | DONE ins | em 16 16 | 005b77 | d5 02       |                 cmp.dx 02            addr1 (source)
3848:000 | DONE ins | em 16 16 | 005b79 | f0 0a       |                 beq 005b85           
3849:000 | DONE wsp | em 16 16 |        |             |
3850:000 | DONE cmt | em 16 16 |        |             |                 ; The destination is higher than the source, so use CMOVE, which
3851:000 | DONE cmt | em 16 16 |        |             |                 ; calls MVP
3852:000 | DONE ins | em 16 16 | 005b7b | 10 05       |                 bpl 005b82           
3853:000 | DONE wsp | em 16 16 |        |             |
3854:000 | DONE ins | em 16 16 | 005b7d | 20 3e 56    |                 jsr 00563e           
3855:000 | DONE ins | em 16 16 | 005b80 | 80 03       |                 bra 005b85           don't RTS because we might be natively compiling
3856:000 | DONE wsp | em 16 16 |        |             |
3857:000 | DONE cmt | em 16 16 |        |             |                 ; The source is higher than the destination, use CMOVE>,
3858:000 | DONE cmt | em 16 16 |        |             |                 ; which calls MVN
3859:000 | DONE lbl | em 16 16 | 005b82 |             | move_cmoveup                         
3860:000 | DONE ins | em 16 16 | 005b82 | 20 61 56    |                 jsr 005661           
3861:000 | DONE wsp | em 16 16 |        |             |
3862:000 | DONE lbl | em 16 16 | 005b85 |             | z_move                               
3862:001 | DONE ins | em 16 16 | 005b85 | 60          |                 rts                  
3863:000 | DONE wsp | em 16 16 |        |             |
3864:000 | DONE wsp | em 16 16 |        |             |
3865:000 | DONE cmt | em 16 16 |        |             | ; -------------------------------------------------------------------
3866:000 | DONE cmt | em 16 16 |        |             | ; NAME>INT ( nt -- xt ) 4 bytes / 8 cycles
3867:000 | DONE cmt | em 16 16 |        |             | ; Given the Name Token (nt) of a word, return its Execute Token (xt)
3868:000 | DONE cmt | em 16 16 |        |             | ; TODO deal with compile-only words, see
3869:000 | DONE cmt | em 16 16 |        |             | ; https://www.complang.tuwien.ac.at/forth/gforth/Docs-html/Name-token.html
3870:000 | DONE lbl | em 16 16 | 005b86 |             | xt_name-int                          
3871:000 | DONE dir | em 16 16 |        |             |         .!a16                        
3872:000 | DONE dir | em 16 16 |        |             |         .!xy16                       
3873:000 | DONE cmt | em 16 16 |        |             |                 ; The xt of a word beginns four bytes down from its nt
3874:000 | DONE ins | em 16 16 | 005b86 | c8          |                 iny                  
3875:000 | DONE ins | em 16 16 | 005b87 | c8          |                 iny                  
3876:000 | DONE ins | em 16 16 | 005b88 | c8          |                 iny                  
3877:000 | DONE ins | em 16 16 | 005b89 | c8          |                 iny                  
3878:000 | DONE ins | em 16 16 | 005b8a | b9 00 00    |                 lda.y 0000           
3879:000 | DONE ins | em 16 16 | 005b8d | a8          |                 tay                  
3880:000 | DONE wsp | em 16 16 |        |             |
3881:000 | DONE lbl | em 16 16 | 005b8e |             | z_name-int                           
3881:001 | DONE ins | em 16 16 | 005b8e | 60          |                 rts                  
3882:000 | DONE wsp | em 16 16 |        |             |
3883:000 | DONE cmt | em 16 16 |        |             | ; -------------------------------------------------------------------
3884:000 | DONE cmt | em 16 16 |        |             | ; NAME>STRING ( nt -- addr u ) 16 bytes / X cycles
3885:000 | DONE cmt | em 16 16 |        |             | ; Given a name token (nt) of a word, return its string. This is a Gforth word
3886:000 | DONE cmt | em 16 16 |        |             | ; that works with the Dictionary header entries. It is not checked if nt is
3887:000 | DONE cmt | em 16 16 |        |             | ; a valid name token. There is no "STRING>NAME" - this is handled by the
3888:000 | DONE cmt | em 16 16 |        |             | ; combination of PARSE-NAME and FIND-NAME
3889:000 | DONE lbl | em 16 16 | 005b8f |             | xt_name-string                       
3890:000 | DONE dir | em 16 16 |        |             |         .!a16                        
3891:000 | DONE dir | em 16 16 |        |             |         .!xy16                       
3892:000 | DONE ins | em 16 16 | 005b8f | ca          |                 dex                  move NOS down one
3893:000 | DONE ins | em 16 16 | 005b90 | ca          |                 dex                  
3894:000 | DONE wsp | em 16 16 |        |             |
3895:000 | DONE cmt | em 16 16 |        |             |                 ; the name string of a word begins 8 bytes down from its nt,
3896:000 | DONE cmt | em 16 16 |        |             |                 ; which we have as TOS
3897:000 | DONE ins | em 16 16 | 005b91 | 98          |                 tya                  
3898:000 | DONE ins | em 16 16 | 005b92 | 18          |                 clc                  
3899:000 | DONE ins | em 16 16 | 005b93 | 69 08 00    |                 adc.# 0008           
3900:000 | DONE ins | em 16 16 | 005b96 | 95 00       |                 sta.dx 00            NOS
3901:000 | DONE wsp | em 16 16 |        |             |
3902:000 | DONE cmt | em 16 16 |        |             |                 ; the length of the name string is in the LSB of the first word
3903:000 | DONE cmt | em 16 16 |        |             |                 ; of the dictionary entry header (the name token)
3904:000 | DONE ins | em 16 16 | 005b98 | b9 00 00    |                 lda.y 0000           LDA $0000,Y
3905:000 | DONE ins | em 16 16 | 005b9b | 29 ff 00    |                 and.# 00ff           mask all but length byte
3906:000 | DONE ins | em 16 16 | 005b9e | a8          |                 tay                  
3907:000 | DONE wsp | em 16 16 |        |             |
3908:000 | DONE lbl | em 16 16 | 005b9f |             | z_name-string                        
3908:001 | DONE ins | em 16 16 | 005b9f | 60          |                 rts                  
3909:000 | DONE wsp | em 16 16 |        |             |
3910:000 | DONE wsp | em 16 16 |        |             |
3911:000 | DONE cmt | em 16 16 |        |             | ; -------------------------------------------------------------------
3912:000 | DONE cmt | em 16 16 |        |             | ; NATIVE-COMPILE ( -- ) X bytes / X cycles
3913:000 | DONE cmt | em 16 16 |        |             | ; Enable native compilation for last word in Dictionary
3914:000 | DONE lbl | em 16 16 | 005ba0 |             | xt_native-compile                    
3915:000 | DONE dir | em 16 16 |        |             |         .!a16                        
3916:000 | DONE ins | em 16 16 | 005ba0 | a9 01 00    |                 lda.# NC             
3917:000 | DONE ins | em 16 16 | 005ba3 | eb          |                 xba                  flags are MSB
3918:000 | DONE ins | em 16 16 | 005ba4 | 12 02       |                 ora.di 000002        ORA (DP)
3919:000 | DONE ins | em 16 16 | 005ba6 | 92 02       |                 sta.di 000002        
3920:000 | DONE wsp | em 16 16 |        |             |
3921:000 | DONE lbl | em 16 16 | 005ba8 |             | z_native-compile                     
3922:000 | DONE ins | em 16 16 | 005ba8 | 60          |                 rts                  
3923:000 | DONE wsp | em 16 16 |        |             |
3924:000 | DONE cmt | em 16 16 |        |             | ; -------------------------------------------------------------------
3925:000 | DONE cmt | em 16 16 |        |             | ; NC-LIMIT ( -- addr ) X bytes / X cycles
3926:000 | DONE cmt | em 16 16 |        |             | ; Address where the value of the Native Compile size limit is kept
3927:000 | DONE lbl | em 16 16 | 005ba9 |             | xt_nc-limit                          
3928:000 | DONE ins | em 16 16 | 005ba9 | ca          |                 dex                  
3929:000 | DONE ins | em 16 16 | 005baa | ca          |                 dex                  
3930:000 | DONE ins | em 16 16 | 005bab | 94 00       |                 sty.dx 00            
3931:000 | DONE ins | em 16 16 | 005bad | a0 26 00    |                 ldy.# 000026         
3932:000 | DONE wsp | em 16 16 |        |             |
3933:000 | DONE lbl | em 16 16 | 005bb0 |             | z_nc-limit                           
3933:001 | DONE ins | em 16 16 | 005bb0 | 60          |                 rts                  
3934:000 | DONE wsp | em 16 16 |        |             |
3935:000 | DONE wsp | em 16 16 |        |             |
3936:000 | DONE cmt | em 16 16 |        |             | ; -------------------------------------------------------------------
3937:000 | DONE cmt | em 16 16 |        |             | ; NEGATE ( n -- n ) 6 bytes / X cycles
3938:000 | DONE cmt | em 16 16 |        |             | ; Two's complement of TOS
3939:000 | DONE lbl | em 16 16 | 005bb1 |             | xt_negate                            
3940:000 | DONE ins | em 16 16 | 005bb1 | 98          |                 tya                  
3941:000 | DONE ins | em 16 16 | 005bb2 | 49 ff ff    |                 eor.# 0ffff          
3942:000 | DONE ins | em 16 16 | 005bb5 | 1a          |                 inc.a                
3943:000 | DONE ins | em 16 16 | 005bb6 | a8          |                 tay                  
3944:000 | DONE wsp | em 16 16 |        |             |
3945:000 | DONE lbl | em 16 16 | 005bb7 |             | z_negate                             
3945:001 | DONE ins | em 16 16 | 005bb7 | 60          |                 rts                  
3946:000 | DONE wsp | em 16 16 |        |             |
3947:000 | DONE wsp | em 16 16 |        |             |
3948:000 | DONE cmt | em 16 16 |        |             | ; -------------------------------------------------------------------
3949:000 | DONE cmt | em 16 16 |        |             | ; NIP ( n m -- m ) 2 bytes / 4 cycles
3950:000 | DONE cmt | em 16 16 |        |             | ; Delete entry that is NOS
3951:000 | DONE lbl | em 16 16 | 005bb8 |             | xt_nip                               
3952:000 | DONE ins | em 16 16 | 005bb8 | e8          |                 inx                  
3953:000 | DONE ins | em 16 16 | 005bb9 | e8          |                 inx                  
3954:000 | DONE wsp | em 16 16 |        |             |
3955:000 | DONE lbl | em 16 16 | 005bba |             | z_nip                                
3955:001 | DONE ins | em 16 16 | 005bba | 60          |                 rts                  
3956:000 | DONE wsp | em 16 16 |        |             |
3957:000 | DONE wsp | em 16 16 |        |             |
3958:000 | DONE cmt | em 16 16 |        |             | ; -------------------------------------------------------------------
3959:000 | DONE cmt | em 16 16 |        |             | ; NUMBER ( addr u -- u | d ) X bytes / X cycles
3960:000 | DONE cmt | em 16 16 |        |             | ; Convert a number string to a double or single cell number. This is a wrapper
3961:000 | DONE cmt | em 16 16 |        |             | ; for >NUMBER and follows the convention set out in the "Forth Programmer's
3962:000 | DONE cmt | em 16 16 |        |             | ; Handbook" (Conklin & Rather) 3rd edition p. 87. Based in part on the "Starting
3963:000 | DONE cmt | em 16 16 |        |             | ; Forth" code https://www.forth.com/starting-forth/10-input-output-operators/
3964:000 | DONE cmt | em 16 16 |        |             | ; Gforth uses S>NUMBER? and S>UNUMBER? which return the numbers and a flag, see
3965:000 | DONE cmt | em 16 16 |        |             | ; https://www.complang.tuwien.ac.at/forth/gforth/Docs-html/Number-Conversion.html
3966:000 | DONE cmt | em 16 16 |        |             | ; Another difference to Gforth is that we follow ANSI Forth that the dot to
3967:000 | DONE cmt | em 16 16 |        |             | ; signal a double cell number is required to be the last character of the
3968:000 | DONE cmt | em 16 16 |        |             | ; string. Number calls >NUMBER which in turn calls UM*, which uses tmp1, tmp2,
3969:000 | DONE cmt | em 16 16 |        |             | ; and tmp3, so we can't use them here, which is pain.
3970:000 | DONE lbl | em 16 16 | 005bbb |             | xt_number                            
3971:000 | DONE dir | em 16 16 |        |             |         .!a16                        
3972:000 | DONE cmt | em 16 16 |        |             |                 ; The flags for sign and double are kept on the stack because
3973:000 | DONE cmt | em 16 16 |        |             |                 ; we've run out of temporary variables. MSB is for minus, LSB is
3974:000 | DONE cmt | em 16 16 |        |             |                 ; for double
3975:000 | DONE ins | em 16 16 | 005bbb | f4 00 00    |                 phe.# 0000           
3976:000 | DONE wsp | em 16 16 |        |             |
3977:000 | DONE ins | em 16 16 | 005bbe | 84 24       |                 sty.d 000024         save length of string, freeing Y
3978:000 | DONE wsp | em 16 16 |        |             |
3979:000 | DONE cmt | em 16 16 |        |             |                 ; if the first character is a minus, strip it off and set
3980:000 | DONE cmt | em 16 16 |        |             |                 ; a flag
3981:000 | DONE ins | em 16 16 | 005bc0 | e2 20       |                 sep 20               
3981:001 | DONE ctl | em  8 16 |        |             |         .!a8
3982:000 | DONE ins | em  8 16 | 005bc2 | a1 00       |                 lda.dxi 00           get first character
3983:000 | DONE ins | em  8 16 | 005bc4 | c9 2d       |                 cmp.# 2d             
3984:000 | DONE ins | em  8 16 | 005bc6 | c2 20       |                 rep 20               
3984:001 | DONE ctl | em 16 16 |        |             |         .!a16
3985:000 | DONE ins | em 16 16 | 005bc8 | d0 09       |                 bne 005bd3           
3986:000 | DONE wsp | em 16 16 |        |             |
3987:000 | DONE cmt | em 16 16 |        |             |                 ; We have a minus.
3988:000 | DONE ins | em 16 16 | 005bca | 68          |                 pla                  
3989:000 | DONE ins | em 16 16 | 005bcb | 09 00 ff    |                 ora.# 0ff00          MSB is minus
3990:000 | DONE ins | em 16 16 | 005bce | 48          |                 pha                  
3991:000 | DONE wsp | em 16 16 |        |             |
3992:000 | DONE ins | em 16 16 | 005bcf | f6 00       |                 inc.dx 00            start one character later
3993:000 | DONE ins | em 16 16 | 005bd1 | c6 24       |                 dec.d 000024         reduce string length by one
3994:000 | DONE wsp | em 16 16 |        |             |
3995:000 | DONE lbl | em 16 16 | 005bd3 |             | number_dot                           
3996:000 | DONE cmt | em 16 16 |        |             |                 ; if the last character is a dot, strip it off and set a flag
3997:000 | DONE ins | em 16 16 | 005bd3 | a5 24       |                 lda.d 000024         get the string length
3998:000 | DONE ins | em 16 16 | 005bd5 | 3a          |                 dec.a                subtract one to convert length to index
3999:000 | DONE ins | em 16 16 | 005bd6 | 18          |                 clc                  
4000:000 | DONE ins | em 16 16 | 005bd7 | 75 00       |                 adc.dx 00            add length of string
4001:000 | DONE ins | em 16 16 | 005bd9 | a8          |                 tay                  
4002:000 | DONE ins | em 16 16 | 005bda | e2 20       |                 sep 20               
4002:001 | DONE ctl | em  8 16 |        |             |         .!a8
4003:000 | DONE ins | em  8 16 | 005bdc | b9 00 00    |                 lda.y 0000           get last character
4004:000 | DONE ins | em  8 16 | 005bdf | c9 2e       |                 cmp.# 2e             
4005:000 | DONE ins | em  8 16 | 005be1 | c2 20       |                 rep 20               
4005:001 | DONE ctl | em 16 16 |        |             |         .!a16
4006:000 | DONE ins | em 16 16 | 005be3 | d0 07       |                 bne 005bec           
4007:000 | DONE wsp | em 16 16 |        |             |
4008:000 | DONE cmt | em 16 16 |        |             |                 ; we have a dot
4009:000 | DONE ins | em 16 16 | 005be5 | 68          |                 pla                  get the flag back
4010:000 | DONE ins | em 16 16 | 005be6 | 09 ff 00    |                 ora.# 00ff           LSB is double
4011:000 | DONE ins | em 16 16 | 005be9 | 48          |                 pha                  
4012:000 | DONE wsp | em 16 16 |        |             |
4013:000 | DONE ins | em 16 16 | 005bea | c6 24       |                 dec.d 000024         reduce string length by one
4014:000 | DONE wsp | em 16 16 |        |             |
4015:000 | DONE lbl | em 16 16 | 005bec |             | number_main                          
4016:000 | DONE cmt | em 16 16 |        |             |                 ; set up stack for subroutine jump to >NUMBER
4017:000 | DONE ins | em 16 16 | 005bec | b5 00       |                 lda.dx 00            get the string address to safety
4018:000 | DONE ins | em 16 16 | 005bee | 74 00       |                 stz.dx 00            NOS is now zero
4019:000 | DONE ins | em 16 16 | 005bf0 | ca          |                 dex                  
4020:000 | DONE ins | em 16 16 | 005bf1 | ca          |                 dex                  
4021:000 | DONE ins | em 16 16 | 005bf2 | 74 00       |                 stz.dx 00            3OS and NOS are now zero
4022:000 | DONE ins | em 16 16 | 005bf4 | ca          |                 dex                  
4023:000 | DONE ins | em 16 16 | 005bf5 | ca          |                 dex                  
4024:000 | DONE wsp | em 16 16 |        |             |
4025:000 | DONE ins | em 16 16 | 005bf6 | 95 00       |                 sta.dx 00            address is back as NOS
4026:000 | DONE ins | em 16 16 | 005bf8 | a4 24       |                 ldy.d 000024         length is back as TOS
4027:000 | DONE wsp | em 16 16 |        |             |
4028:000 | DONE lbl | em 16 16 | 005bfa |             | number_loop                          
4029:000 | DONE ins | em 16 16 | 005bfa | 20 63 51    |                 jsr 005163           ( ud addr u -- ud addr u )
4030:000 | DONE wsp | em 16 16 |        |             |
4031:000 | DONE ins | em 16 16 | 005bfd | 98          |                 tya                  test length of returned string, should be 0
4032:000 | DONE ins | em 16 16 | 005bfe | f0 06       |                 beq 005c06           
4033:000 | DONE wsp | em 16 16 |        |             |
4034:000 | DONE cmt | em 16 16 |        |             |                 ; Something went wrong during conversion, we still have stuff
4035:000 | DONE cmt | em 16 16 |        |             |                 ; left over. Print error string and abort. If number was called
4036:000 | DONE cmt | em 16 16 |        |             |                 ; by INTERPRET, we've already checked for words, so we're in
4037:000 | DONE cmt | em 16 16 |        |             |                 ; trouble one way or another
4038:000 | DONE cmt | em 16 16 |        |             |                 ; TODO print offending string
4039:000 | DONE ins | em 16 16 | 005c00 | a9 ba 71    |                 lda.# 0071ba         
4040:000 | DONE ins | em 16 16 | 005c03 | 4c 21 6a    |                 jmp 006a21           
4041:000 | DONE wsp | em 16 16 |        |             |
4042:000 | DONE lbl | em 16 16 | 005c06 |             | number_ok                            
4043:000 | DONE cmt | em 16 16 |        |             |                 ; All characters successfully converted. Drop the string info
4044:000 | DONE ins | em 16 16 | 005c06 | b4 02       |                 ldy.dx 02            
4045:000 | DONE ins | em 16 16 | 005c08 | e8          |                 inx                  
4046:000 | DONE ins | em 16 16 | 005c09 | e8          |                 inx                  
4047:000 | DONE ins | em 16 16 | 005c0a | e8          |                 inx                  
4048:000 | DONE ins | em 16 16 | 005c0b | e8          |                 inx                  
4049:000 | DONE wsp | em 16 16 |        |             |
4050:000 | DONE cmt | em 16 16 |        |             |                 ; We have a double-cell number on the Data Stack that might have
4051:000 | DONE cmt | em 16 16 |        |             |                 ; a minus and might actually be single-cell
4052:000 | DONE ins | em 16 16 | 005c0c | 68          |                 pla                  get copy of the flags
4053:000 | DONE ins | em 16 16 | 005c0d | 48          |                 pha                  
4054:000 | DONE ins | em 16 16 | 005c0e | 29 ff 00    |                 and.# 00ff           only keep the part with the number size (LSB)
4055:000 | DONE ins | em 16 16 | 005c11 | f0 1b       |                 beq 005c2e           
4056:000 | DONE wsp | em 16 16 |        |             |
4057:000 | DONE cmt | em 16 16 |        |             |                 ; This is a double-cell number. If it had a minus, we'll have to
4058:000 | DONE cmt | em 16 16 |        |             |                 ; negate it
4059:000 | DONE ins | em 16 16 | 005c13 | 68          |                 pla                  
4060:000 | DONE ins | em 16 16 | 005c14 | 29 00 ff    |                 and.# 0ff00          only keep part with the sing (MSB)
4061:000 | DONE ins | em 16 16 | 005c17 | f0 25       |                 beq 005c3e           no minus, all done
4062:000 | DONE wsp | em 16 16 |        |             |
4063:000 | DONE ins | em 16 16 | 005c19 | b5 00       |                 lda.dx 00            DNEGATE, starts with LSW
4064:000 | DONE ins | em 16 16 | 005c1b | 49 ff ff    |                 eor.# 0ffff          
4065:000 | DONE wsp | em 16 16 |        |             |
4066:000 | DONE cmt | em 16 16 |        |             |                 ; INC won't affect the carry flag, so we have to do this the
4067:000 | DONE cmt | em 16 16 |        |             |                 ; hard way
4068:000 | DONE ins | em 16 16 | 005c1e | 18          |                 clc                  
4069:000 | DONE ins | em 16 16 | 005c1f | 69 01 00    |                 adc.# 0001           
4070:000 | DONE ins | em 16 16 | 005c22 | 95 00       |                 sta.dx 00            
4071:000 | DONE wsp | em 16 16 |        |             |
4072:000 | DONE cmt | em 16 16 |        |             |                 ; now MSW (in TOS)
4073:000 | DONE ins | em 16 16 | 005c24 | 98          |                 tya                  
4074:000 | DONE ins | em 16 16 | 005c25 | 49 ff ff    |                 eor.# 0ffff          
4075:000 | DONE ins | em 16 16 | 005c28 | 69 00 00    |                 adc.# 0000           we are only interested in the carry
4076:000 | DONE ins | em 16 16 | 005c2b | a8          |                 tay                  
4077:000 | DONE wsp | em 16 16 |        |             |
4078:000 | DONE ins | em 16 16 | 005c2c | 80 10       |                 bra 005c3e           
4079:000 | DONE wsp | em 16 16 |        |             |
4080:000 | DONE lbl | em 16 16 | 005c2e |             | number_single                        
4081:000 | DONE cmt | em 16 16 |        |             |                 ; This is a single cell number, so we just drop the top cell
4082:000 | DONE ins | em 16 16 | 005c2e | b4 00       |                 ldy.dx 00            
4083:000 | DONE ins | em 16 16 | 005c30 | e8          |                 inx                  
4084:000 | DONE ins | em 16 16 | 005c31 | e8          |                 inx                  
4085:000 | DONE wsp | em 16 16 |        |             |
4086:000 | DONE cmt | em 16 16 |        |             |                 ; If we have a minus, we'll have to negate it. Note this code is
4087:000 | DONE cmt | em 16 16 |        |             |                 ; doubled for speed
4088:000 | DONE ins | em 16 16 | 005c32 | 68          |                 pla                  
4089:000 | DONE ins | em 16 16 | 005c33 | 29 00 ff    |                 and.# 0ff00          
4090:000 | DONE ins | em 16 16 | 005c36 | f0 06       |                 beq 005c3e           no minus, all done
4091:000 | DONE wsp | em 16 16 |        |             |
4092:000 | DONE ins | em 16 16 | 005c38 | 98          |                 tya                  NEGATE
4093:000 | DONE ins | em 16 16 | 005c39 | 49 ff ff    |                 eor.# 0ffff          
4094:000 | DONE ins | em 16 16 | 005c3c | 1a          |                 inc.a                
4095:000 | DONE ins | em 16 16 | 005c3d | a8          |                 tay                  fall through to end
4096:000 | DONE wsp | em 16 16 |        |             |
4097:000 | DONE lbl | em 16 16 | 005c3e |             | z_number                             
4097:001 | DONE ins | em 16 16 | 005c3e | 60          |                 rts                  
4098:000 | DONE wsp | em 16 16 |        |             |
4099:000 | DONE wsp | em 16 16 |        |             |
4100:000 | DONE cmt | em 16 16 |        |             | ; -------------------------------------------------------------------
4101:000 | DONE cmt | em 16 16 |        |             | ; OR ( n m -- n ) 6 bytes / X cycles
4102:000 | DONE cmt | em 16 16 |        |             | ; Logical OR
4103:000 | DONE lbl | em 16 16 | 005c3f |             | xt_or                                
4104:000 | DONE ins | em 16 16 | 005c3f | 98          |                 tya                  
4105:000 | DONE ins | em 16 16 | 005c40 | 15 00       |                 ora.dx 00            
4106:000 | DONE ins | em 16 16 | 005c42 | a8          |                 tay                  
4107:000 | DONE wsp | em 16 16 |        |             |
4108:000 | DONE ins | em 16 16 | 005c43 | e8          |                 inx                  
4109:000 | DONE ins | em 16 16 | 005c44 | e8          |                 inx                  
4110:000 | DONE wsp | em 16 16 |        |             |
4111:000 | DONE lbl | em 16 16 | 005c45 |             | z_or                                 
4111:001 | DONE ins | em 16 16 | 005c45 | 60          |                 rts                  
4112:000 | DONE wsp | em 16 16 |        |             |
4113:000 | DONE wsp | em 16 16 |        |             |
4114:000 | DONE cmt | em 16 16 |        |             | ; -------------------------------------------------------------------
4115:000 | DONE cmt | em 16 16 |        |             | ; OUTPUT ( -- addr ) X bytes / X cycles
4116:000 | DONE cmt | em 16 16 |        |             | ; Return the address where the jump target for EMIT is stored. By default, this
4117:000 | DONE cmt | em 16 16 |        |             | ; will hold the value of put_chr from the kernel routine, but this can be
4118:000 | DONE cmt | em 16 16 |        |             | ; changed by the user
4119:000 | DONE lbl | em 16 16 | 005c46 |             | xt_output                            
4120:000 | DONE ins | em 16 16 | 005c46 | ca          |                 dex                  
4121:000 | DONE ins | em 16 16 | 005c47 | ca          |                 dex                  
4122:000 | DONE ins | em 16 16 | 005c48 | 94 00       |                 sty.dx 00            
4123:000 | DONE wsp | em 16 16 |        |             |
4124:000 | DONE ins | em 16 16 | 005c4a | a0 0e 00    |                 ldy.# 00000e         
4125:000 | DONE wsp | em 16 16 |        |             |
4126:000 | DONE lbl | em 16 16 | 005c4d |             | z_output                             
4126:001 | DONE ins | em 16 16 | 005c4d | 60          |                 rts                  
4127:000 | DONE wsp | em 16 16 |        |             |
4128:000 | DONE wsp | em 16 16 |        |             |
4129:000 | DONE cmt | em 16 16 |        |             | ; -------------------------------------------------------------------
4130:000 | DONE cmt | em 16 16 |        |             | ; OVER ( n m -- n m n )  6 bytes / 14 cycles
4131:000 | DONE cmt | em 16 16 |        |             | ; Push NOS on Data Stack
4132:000 | DONE lbl | em 16 16 | 005c4e |             | xt_over                              
4133:000 | DONE ins | em 16 16 | 005c4e | ca          |                 dex                  
4134:000 | DONE ins | em 16 16 | 005c4f | ca          |                 dex                  
4135:000 | DONE ins | em 16 16 | 005c50 | 94 00       |                 sty.dx 00            
4136:000 | DONE ins | em 16 16 | 005c52 | b4 02       |                 ldy.dx 02            
4137:000 | DONE wsp | em 16 16 |        |             |
4138:000 | DONE lbl | em 16 16 | 005c54 |             | z_over                               
4138:001 | DONE ins | em 16 16 | 005c54 | 60          |                 rts                  
4139:000 | DONE wsp | em 16 16 |        |             |
4140:000 | DONE wsp | em 16 16 |        |             |
4141:000 | DONE cmt | em 16 16 |        |             | ; -------------------------------------------------------------------
4142:000 | DONE cmt | em 16 16 |        |             | ; PAD ( -- addr ) 11 bytes / X cycles
4143:000 | DONE cmt | em 16 16 |        |             | ; Return address to a temporary area in free memory for user. Must be at least
4144:000 | DONE cmt | em 16 16 |        |             | ; 84 bytes in size (says ANSI). It is located relative to the compile area
4145:000 | DONE cmt | em 16 16 |        |             | ; pointer (CP) and therefore varies in position. This area is reserved for the
4146:000 | DONE cmt | em 16 16 |        |             | ; user and not used by the system
4147:000 | DONE lbl | em 16 16 | 005c55 |             | xt_pad                               
4148:000 | DONE dir | em 16 16 |        |             |         .!a16                        
4149:000 | DONE ins | em 16 16 | 005c55 | ca          |                 dex                  
4150:000 | DONE ins | em 16 16 | 005c56 | ca          |                 dex                  
4151:000 | DONE ins | em 16 16 | 005c57 | 94 00       |                 sty.dx 00            
4152:000 | DONE wsp | em 16 16 |        |             |
4153:000 | DONE ins | em 16 16 | 005c59 | a5 00       |                 lda.d 000000         
4154:000 | DONE ins | em 16 16 | 005c5b | 18          |                 clc                  
4155:000 | DONE ins | em 16 16 | 005c5c | 69 ff 00    |                 adc.# 0000ff         
4156:000 | DONE ins | em 16 16 | 005c5f | a8          |                 tay                  
4157:000 | DONE wsp | em 16 16 |        |             |
4158:000 | DONE lbl | em 16 16 | 005c60 |             | z_pad                                
4158:001 | DONE ins | em 16 16 | 005c60 | 60          |                 rts                  
4159:000 | DONE wsp | em 16 16 |        |             |
4160:000 | DONE wsp | em 16 16 |        |             |
4161:000 | DONE cmt | em 16 16 |        |             | ; -------------------------------------------------------------------
4162:000 | DONE cmt | em 16 16 |        |             | ; PAGE ( -- ) X bytes / X cycles
4163:000 | DONE cmt | em 16 16 |        |             | ; Clear the screen on vt-100 terminals by sending the code "ESC[2J". This is
4164:000 | DONE cmt | em 16 16 |        |             | ; only useful in interactive scenarios so we don't worry about speed
4165:000 | DONE cmt | em 16 16 |        |             | ; TODO rewrite with EMIT
4166:000 | DONE lbl | em 16 16 | 005c61 |             | xt_page                              
4167:000 | DONE ins | em 16 16 | 005c61 | a9 c9 71    |                 lda.# 0071c9         
4168:000 | DONE ins | em 16 16 | 005c64 | 20 27 6a    |                 jsr 006a27           
4169:000 | DONE wsp | em 16 16 |        |             |
4170:000 | DONE cmt | em 16 16 |        |             |                 ; In theory, this should have moved the cursor to the top left
4171:000 | DONE cmt | em 16 16 |        |             |                 ; corner ("home"), but this doesn't seem to work in practice.
4172:000 | DONE cmt | em 16 16 |        |             |                 ; So we send "ESC[H" as well.
4173:000 | DONE ins | em 16 16 | 005c67 | a9 ce 71    |                 lda.# 0071ce         
4174:000 | DONE ins | em 16 16 | 005c6a | 20 27 6a    |                 jsr 006a27           
4175:000 | DONE wsp | em 16 16 |        |             |
4176:000 | DONE lbl | em 16 16 | 005c6d |             | z_page                               
4176:001 | DONE ins | em 16 16 | 005c6d | 60          |                 rts                  
4177:000 | DONE wsp | em 16 16 |        |             |
4178:000 | DONE cmt | em 16 16 |        |             | ; -------------------------------------------------------------------
4179:000 | DONE cmt | em 16 16 |        |             | ; PARSE-NAME ( "name" -- addr u ) 41+ bytes / X cycles
4180:000 | DONE cmt | em 16 16 |        |             | ; Find next word in input string, skipping leading spaces. This is a special
4181:000 | DONE cmt | em 16 16 |        |             | ; form of PARSE and drops through to that word. See PARSE for more detail. We
4182:000 | DONE cmt | em 16 16 |        |             | ; use this word internally for the interpreter because it is a lot easier to use
4183:000 | DONE cmt | em 16 16 |        |             | ; http://forth-standard.org/standard/core/PARSE-NAME has a Forth implementation
4184:000 | DONE cmt | em 16 16 |        |             | ; Roughly, the word is comparable to  BL WORD COUNT in old terms.
4185:000 | DONE lbl | em 16 16 | 005c6e |             | xt_parse-name                        
4186:000 | DONE dir | em 16 16 |        |             |         .!a16                        
4187:000 | DONE dir | em 16 16 |        |             |         .!xy16                       
4188:000 | DONE cmt | em 16 16 |        |             |                 ; skip leading spaces, changing >IN, then place SPACE
4189:000 | DONE cmt | em 16 16 |        |             |                 ; character on data stack for PARSE
4190:000 | DONE ins | em 16 16 | 005c6e | 5a          |                 phy                  save TOS for later use
4191:000 | DONE ins | em 16 16 | 005c6f | a4 0c       |                 ldy.d 00000c         >IN
4192:000 | DONE ins | em 16 16 | 005c71 | e2 20       |                 sep 20               
4192:001 | DONE ctl | em  8 16 |        |             |         .!a8
4193:000 | DONE lbl | em  8 16 | 005c73 |             | parse-name_loop                      
4194:000 | DONE ins | em  8 16 | 005c73 | c4 0a       |                 cpy.d 00000a         end of line?
4195:000 | DONE ins | em  8 16 | 005c75 | f0 09       |                 beq 005c80           
4196:000 | DONE wsp | em  8 16 |        |             |
4197:000 | DONE ins | em  8 16 | 005c77 | b1 08       |                 lda.diy 000008       LDA (CIB),Y
4198:000 | DONE ins | em  8 16 | 005c79 | c9 20       |                 cmp.# AscSP          
4199:000 | DONE ins | em  8 16 | 005c7b | d0 19       |                 bne 005c96           
4200:000 | DONE ins | em  8 16 | 005c7d | c8          |                 iny                  
4201:000 | DONE ins | em  8 16 | 005c7e | 80 f3       |                 bra 005c73           
4202:000 | DONE wsp | em  8 16 |        |             |
4203:000 | DONE lbl | em  8 16 | 005c80 |             | parse-name_empty_line                
4204:000 | DONE ins | em  8 16 | 005c80 | c2 20       |                 rep 20               
4204:001 | DONE ctl | em 16 16 |        |             |         .!a16
4205:000 | DONE cmt | em 16 16 |        |             |                 ; The Gforth documentation does not say what address is returned
4206:000 | DONE cmt | em 16 16 |        |             |                 ; if a string with only spaces is returned. Experiments with
4207:000 | DONE cmt | em 16 16 |        |             |                 ; the word  : PNT ( "name" -- ) PARSE-NAME SWAP U. U. TYPE ;
4208:000 | DONE cmt | em 16 16 |        |             |                 ; show that it returns the address of the last space in the
4209:000 | DONE cmt | em 16 16 |        |             |                 ; input, which is cib+ciblen. So we do that as well.
4210:000 | DONE ins | em 16 16 | 005c82 | ca          |                 dex                  
4211:000 | DONE ins | em 16 16 | 005c83 | ca          |                 dex                  
4212:000 | DONE ins | em 16 16 | 005c84 | ca          |                 dex                  
4213:000 | DONE ins | em 16 16 | 005c85 | ca          |                 dex                  
4214:000 | DONE wsp | em 16 16 |        |             |
4215:000 | DONE ins | em 16 16 | 005c86 | 7a          |                 ply                  restore old TOS as 3OS
4216:000 | DONE ins | em 16 16 | 005c87 | 94 02       |                 sty.dx 02            
4217:000 | DONE wsp | em 16 16 |        |             |
4218:000 | DONE ins | em 16 16 | 005c89 | a5 08       |                 lda.d 000008         
4219:000 | DONE ins | em 16 16 | 005c8b | 18          |                 clc                  
4220:000 | DONE ins | em 16 16 | 005c8c | 65 0a       |                 adc.d 00000a         
4221:000 | DONE ins | em 16 16 | 005c8e | 95 00       |                 sta.dx 00            Address as NOS
4222:000 | DONE wsp | em 16 16 |        |             |
4223:000 | DONE ins | em 16 16 | 005c90 | a0 00 00    |                 ldy.# 0000           TOS
4224:000 | DONE wsp | em 16 16 |        |             |
4225:000 | DONE ins | em 16 16 | 005c93 | 4c d4 5c    |                 jmp 005cd4           don't have to go through PARSE
4226:000 | DONE wsp | em 16 16 |        |             |
4227:000 | DONE lbl | em 16 16 | 005c96 |             | parse-name_found                     
4228:000 | DONE dir | em 16 16 |        |             |         .!xy16                       
4229:000 | DONE ins | em 16 16 | 005c96 | c2 20       |                 rep 20               
4229:001 | DONE ctl | em 16 16 |        |             |         .!a16
4230:000 | DONE ins | em 16 16 | 005c98 | 84 0c       |                 sty.d 00000c         new >IN
4231:000 | DONE wsp | em 16 16 |        |             |
4232:000 | DONE ins | em 16 16 | 005c9a | 7a          |                 ply                  recover TOS
4233:000 | DONE ins | em 16 16 | 005c9b | ca          |                 dex                  
4234:000 | DONE ins | em 16 16 | 005c9c | ca          |                 dex                  
4235:000 | DONE ins | em 16 16 | 005c9d | 94 00       |                 sty.dx 00            
4236:000 | DONE wsp | em 16 16 |        |             |
4237:000 | DONE ins | em 16 16 | 005c9f | a0 20 00    |                 ldy.# AscSP          put space on TOS for PARSE
4238:000 | DONE wsp | em 16 16 |        |             |
4239:000 | DONE cmt | em 16 16 |        |             |                 ; fall thru to PARSE
4240:000 | DONE wsp | em 16 16 |        |             |
4241:000 | DONE cmt | em 16 16 |        |             | ; -------------------------------------------------------------------
4242:000 | DONE cmt | em 16 16 |        |             | ; PARSE ( c "name" -- addr u ) 45 bytes / X+ cycles
4243:000 | DONE cmt | em 16 16 |        |             | ; Find word in input string delimited by character given Do not skip leading
4244:000 | DONE cmt | em 16 16 |        |             | ; delimiters, this is an important difference to PARSE-NAME. PARSE and
4245:000 | DONE cmt | em 16 16 |        |             | ; PARSE-NAME replace WORD in modern systems. See the ANSI documentation at
4246:000 | DONE cmt | em 16 16 |        |             | ; http://www.forth200x.org/documents/html3/rationale.html#rat:core:PARSE
4247:000 | DONE cmt | em 16 16 |        |             | ; PARSE-NAME drops through to here
4248:000 | DONE cmt | em 16 16 |        |             | ;
4249:000 | DONE cmt | em 16 16 |        |             | ;    cib   cib+toin    cib+ciblen
4250:000 | DONE cmt | em 16 16 |        |             | ;     v       v             v
4251:000 | DONE cmt | em 16 16 |        |             | ;     |#####################|              Length of found string:
4252:000 | DONE cmt | em 16 16 |        |             | ;                                          ciblen - toin
4253:000 | DONE cmt | em 16 16 |        |             | ;     +------>|  toin (>IN)
4254:000 | DONE cmt | em 16 16 |        |             | ;     +-------------------->|  ciblen
4255:000 | DONE cmt | em 16 16 |        |             | ;
4256:000 | DONE cmt | em 16 16 |        |             | ; The input string is stored starting at the address in the Current Input Buffer
4257:000 | DONE cmt | em 16 16 |        |             | ; (CIB), the length of which is in CIBLEN. While searching for the delimiter,
4258:000 | DONE cmt | em 16 16 |        |             | ; TOIN (>IN) points to the where we currently are. Since PARSE does not skip
4259:000 | DONE cmt | em 16 16 |        |             | ; leading delimiters, we assume we are on a useful string.
4260:000 | DONE lbl | em 16 16 | 005ca2 |             | xt_parse                             
4261:000 | DONE dir | em 16 16 |        |             |         .!a16                        
4262:000 | DONE dir | em 16 16 |        |             |         .!xy16                       
4263:000 | DONE ins | em 16 16 | 005ca2 | 84 1c       |                 sty.d 00001c         save delimiter, char is LSB
4264:000 | DONE wsp | em 16 16 |        |             |
4265:000 | DONE cmt | em 16 16 |        |             |                 ; save beginning of new word (cib+toin) to NOS. Don't need to
4266:000 | DONE cmt | em 16 16 |        |             |                 ; worry about TOS because Y gets clobbered anyway before we
4267:000 | DONE cmt | em 16 16 |        |             |                 ; return
4268:000 | DONE ins | em 16 16 | 005ca4 | a5 0c       |                 lda.d 00000c         
4269:000 | DONE ins | em 16 16 | 005ca6 | 85 20       |                 sta.d 000020         save >IN for later length calculation
4270:000 | DONE ins | em 16 16 | 005ca8 | 18          |                 clc                  
4271:000 | DONE ins | em 16 16 | 005ca9 | 65 08       |                 adc.d 000008         
4272:000 | DONE wsp | em 16 16 |        |             |
4273:000 | DONE ins | em 16 16 | 005cab | ca          |                 dex                  save addr as NOS
4274:000 | DONE ins | em 16 16 | 005cac | ca          |                 dex                  
4275:000 | DONE ins | em 16 16 | 005cad | 95 00       |                 sta.dx 00            
4276:000 | DONE wsp | em 16 16 |        |             |
4277:000 | DONE ins | em 16 16 | 005caf | 64 1e       |                 stz.d 00001e         offset for EOL/char found adjustment of >IN
4278:000 | DONE wsp | em 16 16 |        |             |
4279:000 | DONE cmt | em 16 16 |        |             |                 ; prepare loop using Y as index
4280:000 | DONE ins | em 16 16 | 005cb1 | a4 0c       |                 ldy.d 00000c         
4281:000 | DONE ins | em 16 16 | 005cb3 | e2 20       |                 sep 20               
4281:001 | DONE ctl | em  8 16 |        |             |         .!a8
4282:000 | DONE wsp | em  8 16 |        |             |
4283:000 | DONE lbl | em  8 16 | 005cb5 |             | parse_loop                           
4284:000 | DONE ins | em  8 16 | 005cb5 | c4 0a       |                 cpy.d 00000a         check for EOL first
4285:000 | DONE ins | em  8 16 | 005cb7 | f0 0d       |                 beq 005cc6           
4286:000 | DONE wsp | em  8 16 |        |             |
4287:000 | DONE ins | em  8 16 | 005cb9 | b1 08       |                 lda.diy 000008       LDA (CIB),Y
4288:000 | DONE ins | em  8 16 | 005cbb | c5 1c       |                 cmp.d 00001c         found delimiter?
4289:000 | DONE ins | em  8 16 | 005cbd | f0 03       |                 beq 005cc2           
4290:000 | DONE ins | em  8 16 | 005cbf | c8          |                 iny                  
4291:000 | DONE ins | em  8 16 | 005cc0 | 80 f3       |                 bra 005cb5           
4292:000 | DONE wsp | em  8 16 |        |             |
4293:000 | DONE lbl | em  8 16 | 005cc2 |             | parse_found_delimiter                
4294:000 | DONE cmt | em  8 16 |        |             |                 ; If we haven't reached the end of the line, but found
4295:000 | DONE cmt | em  8 16 |        |             |                 ; a delimiter, we want >IN to point to the next character after
4296:000 | DONE cmt | em  8 16 |        |             |                 ; the delimiter, not the delimiter itself. This is what the
4297:000 | DONE cmt | em  8 16 |        |             |                 ; offset is for
4298:000 | DONE ins | em  8 16 | 005cc2 | c2 20       |                 rep 20               
4298:001 | DONE ctl | em 16 16 |        |             |         .!a16
4299:000 | DONE ins | em 16 16 | 005cc4 | e6 1e       |                 inc.d 00001e         
4300:000 | DONE wsp | em 16 16 |        |             |
4301:000 | DONE lbl | em 16 16 | 005cc6 |             | parse_reached_eol                    
4302:000 | DONE cmt | em 16 16 |        |             |                 ; calculate length of string found (see ascii drawing)
4303:000 | DONE dir | em 16 16 |        |             |         .!xy16                       
4304:000 | DONE ins | em 16 16 | 005cc6 | c2 20       |                 rep 20               
4304:001 | DONE ctl | em 16 16 |        |             |         .!a16
4305:000 | DONE ins | em 16 16 | 005cc8 | 98          |                 tya                  
4306:000 | DONE ins | em 16 16 | 005cc9 | 38          |                 sec                  
4307:000 | DONE ins | em 16 16 | 005cca | e5 20       |                 sbc.d 000020         original value for >IN / index of first char
4308:000 | DONE ins | em 16 16 | 005ccc | 48          |                 pha                  save so we can manipulate Y
4309:000 | DONE wsp | em 16 16 |        |             |
4310:000 | DONE cmt | em 16 16 |        |             |                 ; calculate new >IN
4311:000 | DONE ins | em 16 16 | 005ccd | 98          |                 tya                  
4312:000 | DONE ins | em 16 16 | 005cce | 18          |                 clc                  
4313:000 | DONE ins | em 16 16 | 005ccf | 65 1e       |                 adc.d 00001e         offset for EOL vs found delimiter
4314:000 | DONE ins | em 16 16 | 005cd1 | 85 0c       |                 sta.d 00000c         
4315:000 | DONE wsp | em 16 16 |        |             |
4316:000 | DONE ins | em 16 16 | 005cd3 | 7a          |                 ply                  length of string in TOS
4317:000 | DONE wsp | em 16 16 |        |             |
4318:000 | DONE lbl | em 16 16 | 005cd4 |             | z_parse-name                         
4319:000 | DONE lbl | em 16 16 | 005cd4 |             | z_parse                              
4319:001 | DONE ins | em 16 16 | 005cd4 | 60          |                 rts                  
4320:000 | DONE wsp | em 16 16 |        |             |
4321:000 | DONE wsp | em 16 16 |        |             |
4322:000 | DONE cmt | em 16 16 |        |             | ; -------------------------------------------------------------------
4323:000 | DONE cmt | em 16 16 |        |             | ; PICK ( n n u -- n n n ) X bytes / X cycles
4324:000 | DONE cmt | em 16 16 |        |             | ; Take the u-th element out of the stack and put it on TOS, overwriting the
4325:000 | DONE cmt | em 16 16 |        |             | ; current TOS. 0 PICK is equivalent to DUP, 1 PICK to OVER. Note that using PICK
4326:000 | DONE cmt | em 16 16 |        |             | ; is considered poor coding form. Also note that FIG Forth has a different
4327:000 | DONE cmt | em 16 16 |        |             | ; behavior for PICK than ANS Forth.
4328:000 | DONE cmt | em 16 16 |        |             | ; TODO use DEPTH to check for underflow
4329:000 | DONE lbl | em 16 16 | 005cd5 |             | xt_pick                              
4330:000 | DONE ins | em 16 16 | 005cd5 | 86 22       |                 stx.d 000022         
4331:000 | DONE wsp | em 16 16 |        |             |
4332:000 | DONE ins | em 16 16 | 005cd7 | 98          |                 tya                  Y is just an offset to the DSP
4333:000 | DONE ins | em 16 16 | 005cd8 | 0a          |                 asl.a                double because of cell size two bytes
4334:000 | DONE wsp | em 16 16 |        |             |
4335:000 | DONE ins | em 16 16 | 005cd9 | 18          |                 clc                  
4336:000 | DONE ins | em 16 16 | 005cda | 65 22       |                 adc.d 000022         
4337:000 | DONE wsp | em 16 16 |        |             |
4338:000 | DONE ins | em 16 16 | 005cdc | aa          |                 tax                  
4339:000 | DONE ins | em 16 16 | 005cdd | b5 00       |                 lda.dx 00            LDA $00,X
4340:000 | DONE ins | em 16 16 | 005cdf | a8          |                 tay                  Is now TOS
4341:000 | DONE wsp | em 16 16 |        |             |
4342:000 | DONE ins | em 16 16 | 005ce0 | a6 22       |                 ldx.d 000022         
4343:000 | DONE wsp | em 16 16 |        |             |
4344:000 | DONE lbl | em 16 16 | 005ce2 |             | z_pick                               
4344:001 | DONE ins | em 16 16 | 005ce2 | 60          |                 rts                  
4345:000 | DONE wsp | em 16 16 |        |             |
4346:000 | DONE wsp | em 16 16 |        |             |
4347:000 | DONE cmt | em 16 16 |        |             | ; -------------------------------------------------------------------
4348:000 | DONE cmt | em 16 16 |        |             | ; +! "PLUSSTORE" ( n addr -- ) 15 bytes / X cycles
4349:000 | DONE cmt | em 16 16 |        |             | ; Add NOS to address in TOS
4350:000 | DONE lbl | em 16 16 | 005ce3 |             | xt_plusstore                         
4351:000 | DONE dir | em 16 16 |        |             |         .!a16                        
4352:000 | DONE ins | em 16 16 | 005ce3 | b9 00 00    |                 lda.y 0000           
4353:000 | DONE ins | em 16 16 | 005ce6 | 18          |                 clc                  
4354:000 | DONE ins | em 16 16 | 005ce7 | 75 00       |                 adc.dx 00            
4355:000 | DONE ins | em 16 16 | 005ce9 | 99 00 00    |                 sta.y 0000           
4356:000 | DONE wsp | em 16 16 |        |             |
4357:000 | DONE ins | em 16 16 | 005cec | b4 02       |                 ldy.dx 02            
4358:000 | DONE ins | em 16 16 | 005cee | e8          |                 inx                  
4359:000 | DONE ins | em 16 16 | 005cef | e8          |                 inx                  
4360:000 | DONE ins | em 16 16 | 005cf0 | e8          |                 inx                  
4361:000 | DONE ins | em 16 16 | 005cf1 | e8          |                 inx                  
4362:000 | DONE wsp | em 16 16 |        |             |
4363:000 | DONE lbl | em 16 16 | 005cf2 |             | z_plusstore                          
4363:001 | DONE ins | em 16 16 | 005cf2 | 60          |                 rts                  
4364:000 | DONE wsp | em 16 16 |        |             |
4365:000 | DONE wsp | em 16 16 |        |             |
4366:000 | DONE cmt | em 16 16 |        |             | ; -------------------------------------------------------------------
4367:000 | DONE cmt | em 16 16 |        |             | ; POSTPONE ( -- ) X bytes / X cycles
4368:000 | DONE cmt | em 16 16 |        |             | ; Add the compilation behavior of a word to a new word at compile time. If the
4369:000 | DONE cmt | em 16 16 |        |             | ; word that follows it is immediate, include it so that it will be compiled when
4370:000 | DONE cmt | em 16 16 |        |             | ; the word being defined is itself used for a new word. Tricky, but very useful.
4371:000 | DONE cmt | em 16 16 |        |             | ; Because POSTPONE expects a word (not an xt) in the input stream (not on the
4372:000 | DONE cmt | em 16 16 |        |             | ; Data Stack). This means we cannot build words with "jsr xt_postpone, jsr
4373:000 | DONE cmt | em 16 16 |        |             | ; <word>" directly. This word uses tmp1
4374:000 | DONE lbl | em 16 16 | 005cf3 |             | xt_postpone                          
4375:000 | DONE cmt | em 16 16 |        |             |                 ; get name from string
4376:000 | DONE ins | em 16 16 | 005cf3 | 20 6e 5c    |                 jsr 005c6e           ( addr n )
4377:000 | DONE wsp | em 16 16 |        |             |
4378:000 | DONE cmt | em 16 16 |        |             |                 ; if there is no word in stream, complain and abort
4379:000 | DONE ins | em 16 16 | 005cf6 | d0 06       |                 bne 005cfe           
4380:000 | DONE ins | em 16 16 | 005cf8 | a9 1d 71    |                 lda.# 00711d         
4381:000 | DONE ins | em 16 16 | 005cfb | 4c 21 6a    |                 jmp 006a21           
4382:000 | DONE wsp | em 16 16 |        |             |
4383:000 | DONE lbl | em 16 16 | 005cfe |             | pp_got_word                          
4384:000 | DONE ins | em 16 16 | 005cfe | 20 9b 59    |                 jsr 00599b           ( nt | 0 )
4385:000 | DONE wsp | em 16 16 |        |             |
4386:000 | DONE cmt | em 16 16 |        |             |                 ; if word is not in Dictionary, complain and abort
4387:000 | DONE ins | em 16 16 | 005d01 | d0 03       |                 bne 005d06           
4388:000 | DONE ins | em 16 16 | 005d03 | a9 ba 71    |                 lda.# 0071ba         
4389:000 | DONE wsp | em 16 16 |        |             |
4390:000 | DONE lbl | em 16 16 | 005d06 |             | pp_got_nt                            
4391:000 | DONE cmt | em 16 16 |        |             |                 ; Keep nt safe for later use
4392:000 | DONE ins | em 16 16 | 005d06 | 84 1c       |                 sty.d 00001c         
4393:000 | DONE wsp | em 16 16 |        |             |
4394:000 | DONE cmt | em 16 16 |        |             |                 ; We need the xt instead of the nt for the actual compiling
4395:000 | DONE ins | em 16 16 | 005d08 | 20 86 5b    |                 jsr 005b86           NAME>INT ( nt -- xt )
4396:000 | DONE wsp | em 16 16 |        |             |
4397:000 | DONE cmt | em 16 16 |        |             |                 ; See if this is an immediate word. This is easier with nt than
4398:000 | DONE cmt | em 16 16 |        |             |                 ; with xt
4399:000 | DONE ins | em 16 16 | 005d0b | b2 1c       |                 lda.di 00001c        LDA (TMP1) - get status byte of word
4400:000 | DONE ins | em 16 16 | 005d0d | eb          |                 xba                  flags are MSB
4401:000 | DONE ins | em 16 16 | 005d0e | 29 02 00    |                 and.# IM             mask everything but Immediate bit
4402:000 | DONE ins | em 16 16 | 005d11 | f0 04       |                 beq 005d17           
4403:000 | DONE wsp | em 16 16 |        |             |
4404:000 | DONE cmt | em 16 16 |        |             |                 ; The word is immediate, so instead of executing it right now,
4405:000 | DONE cmt | em 16 16 |        |             |                 ; we compile it. xt is on the stack, so this is simple. The RTS
4406:000 | DONE cmt | em 16 16 |        |             |                 ; of COMPILE, takes us back to the original caller
4407:000 | DONE ins | em 16 16 | 005d13 | 20 83 56    |                 jsr 005683           
4408:000 | DONE ins | em 16 16 | 005d16 | 60          |                 rts                  
4409:000 | DONE wsp | em 16 16 |        |             |
4410:000 | DONE lbl | em 16 16 | 005d17 |             | pp_not_immediate                     
4411:000 | DONE cmt | em 16 16 |        |             |                 ; This is not an immediate word, so we enact "deferred
4412:000 | DONE cmt | em 16 16 |        |             |                 ; compilation" by including ' <NAME> COMPILE, which we do by
4413:000 | DONE cmt | em 16 16 |        |             |                 ; compiling the run-time routine of LITERAL, the xt itself, and
4414:000 | DONE cmt | em 16 16 |        |             |                 ; a subroutine jump to COMPILE,
4415:000 | DONE ins | em 16 16 | 005d17 | f4 e1 5a    |                 phe.# 005ae1         PEA LITERAL_RT
4416:000 | DONE ins | em 16 16 | 005d1a | 20 00 6a    |                 jsr 006a00           
4417:000 | DONE wsp | em 16 16 |        |             |
4418:000 | DONE cmt | em 16 16 |        |             |                 ; The xt is TOS. We can't use COMPILE, here because it might
4419:000 | DONE cmt | em 16 16 |        |             |                 ; decided to do something silly like compile it as a native word
4420:000 | DONE cmt | em 16 16 |        |             |                 ; and ruin everything
4421:000 | DONE ins | em 16 16 | 005d1d | 20 45 52    |                 jsr 005245           
4422:000 | DONE wsp | em 16 16 |        |             |
4423:000 | DONE cmt | em 16 16 |        |             |                 ; compile COMPILE,
4424:000 | DONE ins | em 16 16 | 005d20 | f4 83 56    |                 phe.# 005683         
4425:000 | DONE ins | em 16 16 | 005d23 | 20 00 6a    |                 jsr 006a00           
4426:000 | DONE wsp | em 16 16 |        |             |
4427:000 | DONE lbl | em 16 16 | 005d26 |             | z_postpone                           
4427:001 | DONE ins | em 16 16 | 005d26 | 60          |                 rts                  
4428:000 | DONE wsp | em 16 16 |        |             |
4429:000 | DONE wsp | em 16 16 |        |             |
4430:000 | DONE cmt | em 16 16 |        |             | ; -------------------------------------------------------------------
4431:000 | DONE cmt | em 16 16 |        |             | ; R@ "RFETCH" ( -- n ) (R: n -- n )  X bytes / X cycles
4432:000 | DONE cmt | em 16 16 |        |             | ; Get (not pull) Top of Return Stack. We follow Gforth in that this word is not
4433:000 | DONE cmt | em 16 16 |        |             | ; compiled only, because it can be interesting to know what the top of R is in
4434:000 | DONE cmt | em 16 16 |        |             | ; an interactive setting. However, this causes all kinds of problems if we try
4435:000 | DONE cmt | em 16 16 |        |             | ; to natively compile the word, so it does not get the NC flag even though it is
4436:000 | DONE cmt | em 16 16 |        |             | ; actually short enough to make that reasonable
4437:000 | DONE cmt | em 16 16 |        |             | ; TODO consider special case in COMPILE, see there
4438:000 | DONE lbl | em 16 16 | 005d27 |             | xt_rfetch                            
4439:000 | DONE cmt | em 16 16 |        |             |                 ; get return address that is on top of the return stack
4440:000 | DONE ins | em 16 16 | 005d27 | 68          |                 pla                  
4441:000 | DONE wsp | em 16 16 |        |             |
4442:000 | DONE ins | em 16 16 | 005d28 | ca          |                 dex                  
4443:000 | DONE ins | em 16 16 | 005d29 | ca          |                 dex                  
4444:000 | DONE ins | em 16 16 | 005d2a | 94 00       |                 sty.dx 00            
4445:000 | DONE wsp | em 16 16 |        |             |
4446:000 | DONE ins | em 16 16 | 005d2c | 7a          |                 ply                  get top of return stack and push copy back again
4447:000 | DONE ins | em 16 16 | 005d2d | 5a          |                 phy                  
4448:000 | DONE wsp | em 16 16 |        |             |
4449:000 | DONE ins | em 16 16 | 005d2e | 48          |                 pha                  restore the return address
4450:000 | DONE wsp | em 16 16 |        |             |
4451:000 | DONE lbl | em 16 16 | 005d2f |             | z_rfetch                             
4451:001 | DONE ins | em 16 16 | 005d2f | 60          |                 rts                  
4452:000 | DONE wsp | em 16 16 |        |             |
4453:000 | DONE wsp | em 16 16 |        |             |
4454:000 | DONE cmt | em 16 16 |        |             | ; -------------------------------------------------------------------
4455:000 | DONE cmt | em 16 16 |        |             | ; R> "FROMR" ( -- n ) (R: n -- )  7 bytes / 23 cycles
4456:000 | DONE cmt | em 16 16 |        |             | ; Move Top of Return Stack to Top of Data Stack. Remember we have to move the
4457:000 | DONE cmt | em 16 16 |        |             | ; jump address out of the way first.
4458:000 | DONE cmt | em 16 16 |        |             | ; TODO consider stripping PHA/PLA if natively compiled (see COMPILE,)
4459:000 | DONE lbl | em 16 16 | 005d30 |             | xt_fromr                             
4460:000 | DONE cmt | em 16 16 |        |             |                 ; Rescue the address of the return jump that is currently top of
4461:000 | DONE cmt | em 16 16 |        |             |                 ; the Return Stack. If this word is natively compiled, this is
4462:000 | DONE cmt | em 16 16 |        |             |                 ; a waste of nine cycles
4463:000 | DONE ins | em 16 16 | 005d30 | 68          |                 pla                  
4464:000 | DONE cmt | em 16 16 |        |             |                 ; --- cut for native coding ---
4465:000 | DONE wsp | em 16 16 |        |             |
4466:000 | DONE ins | em 16 16 | 005d31 | ca          |                 dex                  
4467:000 | DONE ins | em 16 16 | 005d32 | ca          |                 dex                  
4468:000 | DONE ins | em 16 16 | 005d33 | 94 00       |                 sty.dx 00            
4469:000 | DONE wsp | em 16 16 |        |             |
4470:000 | DONE ins | em 16 16 | 005d35 | 7a          |                 ply                  the actual work
4471:000 | DONE wsp | em 16 16 |        |             |
4472:000 | DONE cmt | em 16 16 |        |             |                 ; --- cut for native coding ---
4473:000 | DONE ins | em 16 16 | 005d36 | 48          |                 pha                  get return address back
4474:000 | DONE wsp | em 16 16 |        |             |
4475:000 | DONE lbl | em 16 16 | 005d37 |             | z_fromr                              
4475:001 | DONE ins | em 16 16 | 005d37 | 60          |                 rts                  
4476:000 | DONE wsp | em 16 16 |        |             |
4477:000 | DONE wsp | em 16 16 |        |             |
4478:000 | DONE cmt | em 16 16 |        |             | ; -------------------------------------------------------------------
4479:000 | DONE cmt | em 16 16 |        |             | ; REFILL ( -- f ) X bytes / X cycles
4480:000 | DONE cmt | em 16 16 |        |             | ; "Attempt to fill the input buffer from the input source, returning a true flag
4481:000 | DONE cmt | em 16 16 |        |             | ; if successful. When the input source is the user input device, attempt to
4482:000 | DONE cmt | em 16 16 |        |             | ; receive input into the terminal input buffer. If successful, make the result
4483:000 | DONE cmt | em 16 16 |        |             | ; the input buffer, set >IN to zero, and return true. Receipt of a line
4484:000 | DONE cmt | em 16 16 |        |             | ; containing no characters is considered successful. If there is no input
4485:000 | DONE cmt | em 16 16 |        |             | ; available from the current input source, return false. When the input source
4486:000 | DONE cmt | em 16 16 |        |             | ; is a string from EVALUATE, return false and perform no other action."
4487:000 | DONE cmt | em 16 16 |        |             | ; See https://www.complang.tuwien.ac.at/forth/gforth/Docs-html/The-Input-Stream.html
4488:000 | DONE cmt | em 16 16 |        |             | ; and Conklin & Rather p. 156
4489:000 | DONE lbl | em 16 16 | 005d38 |             | xt_refill                            
4490:000 | DONE dir | em 16 16 |        |             |         .!a16                        
4491:000 | DONE dir | em 16 16 |        |             |         .!xy16                       
4492:000 | DONE cmt | em 16 16 |        |             |                 ; Get input source from SOURCE-ID. We don't have blocks in this
4493:000 | DONE cmt | em 16 16 |        |             |                 ; version, or else we would have to check BLK first. This is an
4494:000 | DONE cmt | em 16 16 |        |             |                 ; optimized version of a subroutine jump to SOURCE-ID
4495:000 | DONE ins | em 16 16 | 005d38 | a5 06       |                 lda.d 000006         
4496:000 | DONE ins | em 16 16 | 005d3a | d0 15       |                 bne 005d51           
4497:000 | DONE wsp | em 16 16 |        |             |
4498:000 | DONE cmt | em 16 16 |        |             |                 ; SOURCE-ID of zero means we're getting stuff from the keyboard
4499:000 | DONE cmt | em 16 16 |        |             |                 ; with ACCEPT.
4500:000 | DONE ins | em 16 16 | 005d3c | ca          |                 dex                  
4501:000 | DONE ins | em 16 16 | 005d3d | ca          |                 dex                  
4502:000 | DONE ins | em 16 16 | 005d3e | ca          |                 dex                  
4503:000 | DONE ins | em 16 16 | 005d3f | ca          |                 dex                  
4504:000 | DONE ins | em 16 16 | 005d40 | 94 02       |                 sty.dx 02            
4505:000 | DONE wsp | em 16 16 |        |             |
4506:000 | DONE ins | em 16 16 | 005d42 | a5 08       |                 lda.d 000008         address of current input buffer NOS
4507:000 | DONE ins | em 16 16 | 005d44 | 95 00       |                 sta.dx 00            
4508:000 | DONE ins | em 16 16 | 005d46 | a0 80 00    |                 ldy.# 000080         max number of chars to accept TOS
4509:000 | DONE wsp | em 16 16 |        |             |
4510:000 | DONE ins | em 16 16 | 005d49 | 20 b3 54    |                 jsr 0054b3           ( addr n1 -- n2)
4511:000 | DONE wsp | em 16 16 |        |             |
4512:000 | DONE cmt | em 16 16 |        |             |                 ; ACCEPT returns the number of characters accepted, but we don't
4513:000 | DONE cmt | em 16 16 |        |             |                 ; need them. We just overwrite TOS this with the flag
4514:000 | DONE ins | em 16 16 | 005d4c | a0 ff ff    |                 ldy.# 0ffff          
4515:000 | DONE wsp | em 16 16 |        |             |
4516:000 | DONE ins | em 16 16 | 005d4f | 80 10       |                 bra 005d61           
4517:000 | DONE wsp | em 16 16 |        |             |
4518:000 | DONE lbl | em 16 16 | 005d51 |             | refill_src_not_kbd                   
4519:000 | DONE cmt | em 16 16 |        |             |                 ; If SOURCE-ID doesn't return a zero, it must be a string in
4520:000 | DONE cmt | em 16 16 |        |             |                 ; memory or a file (remember, no blocks in this version)
4521:000 | DONE ins | em 16 16 | 005d51 | 1a          |                 inc.a                
4522:000 | DONE ins | em 16 16 | 005d52 | d0 07       |                 bne 005d5b           
4523:000 | DONE wsp | em 16 16 |        |             |
4524:000 | DONE cmt | em 16 16 |        |             |                 ; Simply return FALSE flag as per specification
4525:000 | DONE ins | em 16 16 | 005d54 | ca          |                 dex                  
4526:000 | DONE ins | em 16 16 | 005d55 | ca          |                 dex                  
4527:000 | DONE ins | em 16 16 | 005d56 | 94 00       |                 sty.dx 00            
4528:000 | DONE ins | em 16 16 | 005d58 | a8          |                 tay                  
4529:000 | DONE wsp | em 16 16 |        |             |
4530:000 | DONE ins | em 16 16 | 005d59 | 80 06       |                 bra 005d61           
4531:000 | DONE wsp | em 16 16 |        |             |
4532:000 | DONE lbl | em 16 16 | 005d5b |             | refill_source_is_not_string          
4533:000 | DONE cmt | em 16 16 |        |             |                 ; Since we don't have blocks, this must mean that we are trying
4534:000 | DONE cmt | em 16 16 |        |             |                 ; to read from a file. However, we don't have files yet, so we
4535:000 | DONE cmt | em 16 16 |        |             |                 ; report an error and jump to ABORT.
4536:000 | DONE ins | em 16 16 | 005d5b | a9 72 71    |                 lda.# 007172         
4537:000 | DONE ins | em 16 16 | 005d5e | 4c 21 6a    |                 jmp 006a21           
4538:000 | DONE wsp | em 16 16 |        |             |
4539:000 | DONE lbl | em 16 16 | 005d61 |             | z_refill                             
4539:001 | DONE ins | em 16 16 | 005d61 | 60          |                 rts                  dummy for compiling
4540:000 | DONE wsp | em 16 16 |        |             |
4541:000 | DONE wsp | em 16 16 |        |             |
4542:000 | DONE cmt | em 16 16 |        |             | ; -------------------------------------------------------------------
4543:000 | DONE cmt | em 16 16 |        |             | ; ROT ( a b c -- b c a ) X bytes / X cycles
4544:000 | DONE cmt | em 16 16 |        |             | ; Rotate the top three entries downwards (third entry becomes first)
4545:000 | DONE cmt | em 16 16 |        |             | ; Remember this with the "R" for "revolution": The bottom entry becomes the top.
4546:000 | DONE lbl | em 16 16 | 005d62 |             | xt_rot                               
4547:000 | DONE dir | em 16 16 |        |             |         .!a16                        
4548:000 | DONE ins | em 16 16 | 005d62 | b5 00       |                 lda.dx 00            save b
4549:000 | DONE ins | em 16 16 | 005d64 | 94 00       |                 sty.dx 00            move c to NOS
4550:000 | DONE ins | em 16 16 | 005d66 | b4 02       |                 ldy.dx 02            move a to TOS
4551:000 | DONE ins | em 16 16 | 005d68 | 95 02       |                 sta.dx 02            save b as 3OS
4552:000 | DONE wsp | em 16 16 |        |             |
4553:000 | DONE lbl | em 16 16 | 005d6a |             | z_rot                                
4553:001 | DONE ins | em 16 16 | 005d6a | 60          |                 rts                  
4554:000 | DONE wsp | em 16 16 |        |             |
4555:000 | DONE wsp | em 16 16 |        |             |
4556:000 | DONE cmt | em 16 16 |        |             | ; -------------------------------------------------------------------
4557:000 | DONE cmt | em 16 16 |        |             | ; RSHIFT ( n u -- u ) X bytes / X cycles
4558:000 | DONE cmt | em 16 16 |        |             | ; Shift TOS right, filling vacant bits with zero
4559:000 | DONE lbl | em 16 16 | 005d6b |             | xt_rshift                            
4560:000 | DONE cmt | em 16 16 |        |             |                 ; We shift at most 16 bits, because anything above that will be
4561:000 | DONE cmt | em 16 16 |        |             |                 ; zeros anyway
4562:000 | DONE ins | em 16 16 | 005d6b | 98          |                 tya                  
4563:000 | DONE ins | em 16 16 | 005d6c | 29 0f 00    |                 and.# 000f           
4564:000 | DONE ins | em 16 16 | 005d6f | f0 09       |                 beq 005d7a           if zero shifts, we're done
4565:000 | DONE wsp | em 16 16 |        |             |
4566:000 | DONE ins | em 16 16 | 005d71 | a8          |                 tay                  number of shifts is TOS
4567:000 | DONE ins | em 16 16 | 005d72 | b5 00       |                 lda.dx 00            number is in NOS
4568:000 | DONE lbl | em 16 16 | 005d74 |             | rshift_loop                          
4569:000 | DONE ins | em 16 16 | 005d74 | 4a          |                 lsr.a                
4570:000 | DONE ins | em 16 16 | 005d75 | 88          |                 dey                  
4571:000 | DONE ins | em 16 16 | 005d76 | d0 fc       |                 bne 005d74           
4572:000 | DONE wsp | em 16 16 |        |             |
4573:000 | DONE ins | em 16 16 | 005d78 | 95 00       |                 sta.dx 00            put NOS, which last step will pull up
4574:000 | DONE wsp | em 16 16 |        |             |
4575:000 | DONE lbl | em 16 16 | 005d7a |             | rshift_done                          
4576:000 | DONE ins | em 16 16 | 005d7a | b4 00       |                 ldy.dx 00            
4577:000 | DONE ins | em 16 16 | 005d7c | e8          |                 inx                  
4578:000 | DONE ins | em 16 16 | 005d7d | e8          |                 inx                  
4579:000 | DONE wsp | em 16 16 |        |             |
4580:000 | DONE lbl | em 16 16 | 005d7e |             | z_rshift                             
4580:001 | DONE ins | em 16 16 | 005d7e | 60          |                 rts                  
4581:000 | DONE wsp | em 16 16 |        |             |
4582:000 | DONE wsp | em 16 16 |        |             |
4583:000 | DONE cmt | em 16 16 |        |             | ; -------------------------------------------------------------------
4584:000 | DONE cmt | em 16 16 |        |             | ; S" "SQUOTE" ( "string" -- addr u ) X bytes / X cycles
4585:000 | DONE cmt | em 16 16 |        |             | ; Store address and length of string given, returning ( addr u ). ANSI core
4586:000 | DONE cmt | em 16 16 |        |             | ; claims this is compile-only, but the file set expands it to be interpreted, so
4587:000 | DONE cmt | em 16 16 |        |             | ; it is a state-sensitive word, which are evil. This can also be realized as
4588:000 | DONE cmt | em 16 16 |        |             | ; : S" [CHAR] " PARSE POSTPONE SLITERAL ; IMMEDIATE  but it is used so much we
4589:000 | DONE cmt | em 16 16 |        |             | ; want it in code
4590:000 | DONE lbl | em 16 16 | 005d7f |             | xt_squote                            
4591:000 | DONE cmt | em 16 16 |        |             |                 ; we use PARSE to find the end of the sting. If the string is
4592:000 | DONE cmt | em 16 16 |        |             |                 ; empty, we don't complain, following Gforth's behavior
4593:000 | DONE ins | em 16 16 | 005d7f | ca          |                 dex                  
4594:000 | DONE ins | em 16 16 | 005d80 | ca          |                 dex                  
4595:000 | DONE ins | em 16 16 | 005d81 | 94 00       |                 sty.dx 00            
4596:000 | DONE wsp | em 16 16 |        |             |
4597:000 | DONE ins | em 16 16 | 005d83 | a0 22 00    |                 ldy.# 0022           ASCII for " in hex
4598:000 | DONE ins | em 16 16 | 005d86 | 20 a2 5c    |                 jsr 005ca2           Returns ( addr u ) of string
4599:000 | DONE wsp | em 16 16 |        |             |
4600:000 | DONE cmt | em 16 16 |        |             |                 ; What happens now depends on the state. If we are compiling, we
4601:000 | DONE cmt | em 16 16 |        |             |                 ; include a subroutine jump to SLITERAL to save the string. If
4602:000 | DONE cmt | em 16 16 |        |             |                 ; we are interpreting, we're done
4603:000 | DONE ins | em 16 16 | 005d89 | a5 14       |                 lda.d 000014         
4604:000 | DONE ins | em 16 16 | 005d8b | d0 24       |                 bne 005db1           
4605:000 | DONE wsp | em 16 16 |        |             |
4606:000 | DONE cmt | em 16 16 |        |             | 		; We copy our string to someplace safe because it lives
4607:000 | DONE cmt | em 16 16 |        |             |                 ; dangerously if we leave it in the input buffer. This might
4608:000 | DONE cmt | em 16 16 |        |             |                 ; seem like a lot of effort for a few bytes, but MVN is so fast
4609:000 | DONE cmt | em 16 16 |        |             |                 ; - 7 cycles per byte - that it is worth it. See
4610:000 | DONE cmt | em 16 16 |        |             |                 ; http://forum.6502.org/viewtopic.php?f=2&t=1685&p=50975#p50975
4611:000 | DONE cmt | em 16 16 |        |             |                 ; and http://6502.org/tutorials/65c816opcodes.html#6.6
4612:000 | DONE ins | em 16 16 | 005d8d | ca          |                 dex                  
4613:000 | DONE ins | em 16 16 | 005d8e | ca          |                 dex                  
4614:000 | DONE ins | em 16 16 | 005d8f | 94 00       |                 sty.dx 00            
4615:000 | DONE ins | em 16 16 | 005d91 | a4 00       |                 ldy.d 000000         HERE  ( addr-s u addr-d )
4616:000 | DONE wsp | em 16 16 |        |             |
4617:000 | DONE ins | em 16 16 | 005d93 | b5 00       |                 lda.dx 00            SWAP ( addr-s addr-d u )
4618:000 | DONE ins | em 16 16 | 005d95 | 94 00       |                 sty.dx 00            
4619:000 | DONE ins | em 16 16 | 005d97 | a8          |                 tay                  
4620:000 | DONE wsp | em 16 16 |        |             |
4621:000 | DONE ins | em 16 16 | 005d98 | 5a          |                 phy                  save copy of u
4622:000 | DONE ins | em 16 16 | 005d99 | b5 00       |                 lda.dx 00            save copy of addr-d
4623:000 | DONE ins | em 16 16 | 005d9b | 48          |                 pha                  
4624:000 | DONE wsp | em 16 16 |        |             |
4625:000 | DONE ins | em 16 16 | 005d9c | 20 72 5b    |                 jsr 005b72           
4626:000 | DONE wsp | em 16 16 |        |             |
4627:000 | DONE ins | em 16 16 | 005d9f | ca          |                 dex                  
4628:000 | DONE ins | em 16 16 | 005da0 | ca          |                 dex                  
4629:000 | DONE ins | em 16 16 | 005da1 | ca          |                 dex                  
4630:000 | DONE ins | em 16 16 | 005da2 | ca          |                 dex                  
4631:000 | DONE ins | em 16 16 | 005da3 | 94 02       |                 sty.dx 02            
4632:000 | DONE wsp | em 16 16 |        |             |
4633:000 | DONE ins | em 16 16 | 005da5 | 68          |                 pla                  get addr-d back
4634:000 | DONE ins | em 16 16 | 005da6 | 95 00       |                 sta.dx 00            put NOS
4635:000 | DONE ins | em 16 16 | 005da8 | 68          |                 pla                  get u back, put TOS
4636:000 | DONE ins | em 16 16 | 005da9 | a8          |                 tay                  
4637:000 | DONE wsp | em 16 16 |        |             |
4638:000 | DONE cmt | em 16 16 |        |             |                 ; update CP
4639:000 | DONE ins | em 16 16 | 005daa | 18          |                 clc                  
4640:000 | DONE ins | em 16 16 | 005dab | 65 00       |                 adc.d 000000         
4641:000 | DONE ins | em 16 16 | 005dad | 85 00       |                 sta.d 000000         
4642:000 | DONE wsp | em 16 16 |        |             |
4643:000 | DONE ins | em 16 16 | 005daf | 80 03       |                 bra 005db4           
4644:000 | DONE wsp | em 16 16 |        |             |
4645:000 | DONE lbl | em 16 16 | 005db1 |             | squote_compile                       
4646:000 | DONE cmt | em 16 16 |        |             |                 ; We're compiling, so we need SLITERAL
4647:000 | DONE ins | em 16 16 | 005db1 | 20 d5 5d    |                 jsr 005dd5           
4648:000 | DONE wsp | em 16 16 |        |             |
4649:000 | DONE lbl | em 16 16 | 005db4 |             | z_squote                             
4649:001 | DONE ins | em 16 16 | 005db4 | 60          |                 rts                  
4650:000 | DONE wsp | em 16 16 |        |             |
4651:000 | DONE wsp | em 16 16 |        |             |
4652:000 | DONE cmt | em 16 16 |        |             | ; -------------------------------------------------------------------
4653:000 | DONE cmt | em 16 16 |        |             | ; S>D ( n -- d ) 15 bytes / X cycles
4654:000 | DONE cmt | em 16 16 |        |             | ; Convert a single cell number to double cells, conserving the sign
4655:000 | DONE lbl | em 16 16 | 005db5 |             | xt_stod                              
4656:000 | DONE ins | em 16 16 | 005db5 | ca          |                 dex                  make room on stack
4657:000 | DONE ins | em 16 16 | 005db6 | ca          |                 dex                  
4658:000 | DONE ins | em 16 16 | 005db7 | 94 00       |                 sty.dx 00            
4659:000 | DONE wsp | em 16 16 |        |             |
4660:000 | DONE ins | em 16 16 | 005db9 | 98          |                 tya                  force flag check
4661:000 | DONE ins | em 16 16 | 005dba | 10 05       |                 bpl 005dc1           
4662:000 | DONE wsp | em 16 16 |        |             |
4663:000 | DONE cmt | em 16 16 |        |             |                 ; negative number, extend sign
4664:000 | DONE ins | em 16 16 | 005dbc | a0 ff ff    |                 ldy.# 0ffff          
4665:000 | DONE ins | em 16 16 | 005dbf | 80 03       |                 bra 005dc4           
4666:000 | DONE wsp | em 16 16 |        |             |
4667:000 | DONE lbl | em 16 16 | 005dc1 |             | stod_pos                             
4668:000 | DONE cmt | em 16 16 |        |             |                 ; positive number
4669:000 | DONE ins | em 16 16 | 005dc1 | a0 00 00    |                 ldy.# 0000           fall through
4670:000 | DONE wsp | em 16 16 |        |             |
4671:000 | DONE lbl | em 16 16 | 005dc4 |             | z_stod                               
4671:001 | DONE ins | em 16 16 | 005dc4 | 60          |                 rts                  
4672:000 | DONE wsp | em 16 16 |        |             |
4673:000 | DONE cmt | em 16 16 |        |             | ; -------------------------------------------------------------------
4674:000 | DONE cmt | em 16 16 |        |             | ; SIGN ( n -- ) 13 bytes / X cycles
4675:000 | DONE cmt | em 16 16 |        |             | ; If TOS is negative, add a minus sign to the pictured output. Code based on
4676:000 | DONE cmt | em 16 16 |        |             | ; https://github.com/philburk/pforth/blob/master/fth/system.fth
4677:000 | DONE cmt | em 16 16 |        |             | ; Origin Forth code is  0< IF [CHAR] - HOLD THEN
4678:000 | DONE lbl | em 16 16 | 005dc5 |             | xt_sign                              
4679:000 | DONE dir | em 16 16 |        |             |         .!a16                        
4680:000 | DONE cmt | em 16 16 |        |             |                 ; See if number is negative
4681:000 | DONE ins | em 16 16 | 005dc5 | 98          |                 tya                  force flag check
4682:000 | DONE ins | em 16 16 | 005dc6 | 10 08       |                 bpl 005dd0           
4683:000 | DONE wsp | em 16 16 |        |             |
4684:000 | DONE cmt | em 16 16 |        |             |                 ; We're negative, overwrite number TOS
4685:000 | DONE ins | em 16 16 | 005dc8 | a0 2d 00    |                 ldy.# 002d           ASCII for '-'
4686:000 | DONE wsp | em 16 16 |        |             |
4687:000 | DONE ins | em 16 16 | 005dcb | 20 a9 5a    |                 jsr 005aa9           
4688:000 | DONE ins | em 16 16 | 005dce | 80 04       |                 bra 005dd4           
4689:000 | DONE wsp | em 16 16 |        |             |
4690:000 | DONE lbl | em 16 16 | 005dd0 |             | sign_plus                            
4691:000 | DONE ins | em 16 16 | 005dd0 | b4 00       |                 ldy.dx 00            get rid of number and leave
4692:000 | DONE ins | em 16 16 | 005dd2 | e8          |                 inx                  
4693:000 | DONE ins | em 16 16 | 005dd3 | e8          |                 inx                  
4694:000 | DONE wsp | em 16 16 |        |             |
4695:000 | DONE lbl | em 16 16 | 005dd4 |             | z_sign                               
4695:001 | DONE ins | em 16 16 | 005dd4 | 60          |                 rts                  
4696:000 | DONE wsp | em 16 16 |        |             |
4697:000 | DONE wsp | em 16 16 |        |             |
4698:000 | DONE cmt | em 16 16 |        |             | ; -------------------------------------------------------------------
4699:000 | DONE cmt | em 16 16 |        |             | ; SLITERAL ( addr u -- ) ( -- addr u ) X bytes / X cycles
4700:000 | DONE cmt | em 16 16 |        |             | ; At compile time, store string, at runtime, return address and length of string
4701:000 | DONE cmt | em 16 16 |        |             | ; on the Data Stack. Used for S" among other things. This routine uses tmp1,
4702:000 | DONE cmt | em 16 16 |        |             | ; tmp2
4703:000 | DONE lbl | em 16 16 | 005dd5 |             | xt_sliteral                          
4704:000 | DONE dir | em 16 16 |        |             |         .!a16                        
4705:000 | DONE cmt | em 16 16 |        |             |                 ; We can't assume that ( addr u ) of the current string is in
4706:000 | DONE cmt | em 16 16 |        |             |                 ; a stable area, so we first have to move them to safety. Since
4707:000 | DONE cmt | em 16 16 |        |             |                 ; CP points to where the interpreter expects to be able to
4708:000 | DONE cmt | em 16 16 |        |             |                 ; continue in the code, we have to jump over the string. We use
4709:000 | DONE cmt | em 16 16 |        |             |                 ; JMP instead of BRA so we can use longer strings
4710:000 | DONE ins | em 16 16 | 005dd5 | b5 00       |                 lda.dx 00            Address of string is NOS
4711:000 | DONE ins | em 16 16 | 005dd7 | 85 1c       |                 sta.d 00001c         
4712:000 | DONE ins | em 16 16 | 005dd9 | 84 1e       |                 sty.d 00001e         keep copy of string length
4713:000 | DONE wsp | em 16 16 |        |             |
4714:000 | DONE ins | em 16 16 | 005ddb | e2 20       |                 sep 20               
4714:001 | DONE ctl | em  8 16 |        |             |         .!a8
4715:000 | DONE ins | em  8 16 | 005ddd | a9 4c       |                 lda.# 04c            opcode for JMP
4716:000 | DONE ins | em  8 16 | 005ddf | 92 00       |                 sta.di 000000        STA (CP)
4717:000 | DONE ins | em  8 16 | 005de1 | c2 20       |                 rep 20               
4717:001 | DONE ctl | em 16 16 |        |             |         .!a16
4718:000 | DONE ins | em 16 16 | 005de3 | e6 00       |                 inc.d 000000         
4719:000 | DONE wsp | em 16 16 |        |             |
4720:000 | DONE cmt | em 16 16 |        |             |                 ; Our jump target is CP + 2 (for the length of the jump
4721:000 | DONE cmt | em 16 16 |        |             |                 ; instruction itself ) + the length of the string
4722:000 | DONE ins | em 16 16 | 005de5 | a5 1e       |                 lda.d 00001e         string length
4723:000 | DONE ins | em 16 16 | 005de7 | 1a          |                 inc.a                
4724:000 | DONE ins | em 16 16 | 005de8 | 1a          |                 inc.a                
4725:000 | DONE wsp | em 16 16 |        |             |
4726:000 | DONE ins | em 16 16 | 005de9 | 18          |                 clc                  
4727:000 | DONE ins | em 16 16 | 005dea | 65 00       |                 adc.d 000000         current address
4728:000 | DONE ins | em 16 16 | 005dec | 92 00       |                 sta.di 000000        store jump target
4729:000 | DONE wsp | em 16 16 |        |             |
4730:000 | DONE cmt | em 16 16 |        |             |                 ; update CP to move past JMP instruction
4731:000 | DONE ins | em 16 16 | 005dee | e6 00       |                 inc.d 000000         
4732:000 | DONE ins | em 16 16 | 005df0 | e6 00       |                 inc.d 000000         
4733:000 | DONE wsp | em 16 16 |        |             |
4734:000 | DONE cmt | em 16 16 |        |             |                 ; now we can safely copy the code
4735:000 | DONE ins | em 16 16 | 005df2 | 88          |                 dey                  last offset is one less than length
4736:000 | DONE ins | em 16 16 | 005df3 | e2 20       |                 sep 20               
4736:001 | DONE ctl | em  8 16 |        |             |         .!a8
4737:000 | DONE lbl | em  8 16 | 005df5 |             | sl_loop                              
4738:000 | DONE ins | em  8 16 | 005df5 | b1 1c       |                 lda.diy 00001c       LDA (TMP1),Y
4739:000 | DONE ins | em  8 16 | 005df7 | 91 00       |                 sta.diy 000000       STA (CP),Y
4740:000 | DONE ins | em  8 16 | 005df9 | 88          |                 dey                  
4741:000 | DONE ins | em  8 16 | 005dfa | 10 f9       |                 bpl 005df5           
4742:000 | DONE wsp | em  8 16 |        |             |
4743:000 | DONE ins | em  8 16 | 005dfc | c2 20       |                 rep 20               
4743:001 | DONE ctl | em 16 16 |        |             |         .!a16
4744:000 | DONE cmt | em 16 16 |        |             |                 ; keep old CP as new address of string
4745:000 | DONE ins | em 16 16 | 005dfe | a5 00       |                 lda.d 000000         
4746:000 | DONE ins | em 16 16 | 005e00 | 85 1c       |                 sta.d 00001c         overwrites original address
4747:000 | DONE wsp | em 16 16 |        |             |
4748:000 | DONE cmt | em 16 16 |        |             |                 ; update CP
4749:000 | DONE ins | em 16 16 | 005e02 | 18          |                 clc                  
4750:000 | DONE ins | em 16 16 | 005e03 | 65 1e       |                 adc.d 00001e         length of string
4751:000 | DONE ins | em 16 16 | 005e05 | 85 00       |                 sta.d 000000         
4752:000 | DONE wsp | em 16 16 |        |             |
4753:000 | DONE cmt | em 16 16 |        |             |                 ; Compile a subroutine jump to the runtime of SLITERAL that
4754:000 | DONE cmt | em 16 16 |        |             |                 ; pushes the new ( addr u ) pair to the Data Stack. When we're
4755:000 | DONE cmt | em 16 16 |        |             |                 ; done, the code will look like this:
4756:000 | DONE cmt | em 16 16 |        |             |                 ;
4757:000 | DONE cmt | em 16 16 |        |             |                 ; xt -->    jmp a
4758:000 | DONE cmt | em 16 16 |        |             |                 ;           <string data bytes>
4759:000 | DONE cmt | em 16 16 |        |             |                 ;  a -->    jsr sliteral_rt
4760:000 | DONE cmt | em 16 16 |        |             |                 ;           <string address>
4761:000 | DONE cmt | em 16 16 |        |             |                 ;           <string length>
4762:000 | DONE cmt | em 16 16 |        |             |                 ; rts -->
4763:000 | DONE cmt | em 16 16 |        |             |                 ;
4764:000 | DONE cmt | em 16 16 |        |             |                 ; This means we'll have to adjust the return address for two
4765:000 | DONE cmt | em 16 16 |        |             |                 ; cells, not just one
4766:000 | DONE ins | em 16 16 | 005e07 | f4 20 5e    |                 phe.# 005e20         
4767:000 | DONE ins | em 16 16 | 005e0a | 20 00 6a    |                 jsr 006a00           
4768:000 | DONE wsp | em 16 16 |        |             |
4769:000 | DONE cmt | em 16 16 |        |             |                 ; We want to have the addr end up as NOS and the length as TOS,
4770:000 | DONE cmt | em 16 16 |        |             |                 ; so we store the address first
4771:000 | DONE ins | em 16 16 | 005e0d | a5 1c       |                 lda.d 00001c         new address of string
4772:000 | DONE ins | em 16 16 | 005e0f | 48          |                 pha                  
4773:000 | DONE ins | em 16 16 | 005e10 | 20 fb 69    |                 jsr 0069fb           
4774:000 | DONE wsp | em 16 16 |        |             |
4775:000 | DONE ins | em 16 16 | 005e13 | a5 1e       |                 lda.d 00001e         
4776:000 | DONE ins | em 16 16 | 005e15 | 48          |                 pha                  
4777:000 | DONE ins | em 16 16 | 005e16 | 20 fb 69    |                 jsr 0069fb           
4778:000 | DONE wsp | em 16 16 |        |             |
4779:000 | DONE cmt | em 16 16 |        |             |                 ; all done, clean up and leave
4780:000 | DONE ins | em 16 16 | 005e19 | b4 02       |                 ldy.dx 02            2DROP
4781:000 | DONE ins | em 16 16 | 005e1b | e8          |                 inx                  
4782:000 | DONE ins | em 16 16 | 005e1c | e8          |                 inx                  
4783:000 | DONE ins | em 16 16 | 005e1d | e8          |                 inx                  
4784:000 | DONE ins | em 16 16 | 005e1e | e8          |                 inx                  
4785:000 | DONE wsp | em 16 16 |        |             |
4786:000 | DONE lbl | em 16 16 | 005e1f |             | z_sliteral                           
4786:001 | DONE ins | em 16 16 | 005e1f | 60          |                 rts                  
4787:000 | DONE wsp | em 16 16 |        |             |
4788:000 | DONE lbl | em 16 16 | 005e20 |             | sliteral_rt                          
4789:000 | DONE cmt | em 16 16 |        |             |                 ; Run time behaviour of SLITERAL: Push ( addr u ) of string to
4790:000 | DONE cmt | em 16 16 |        |             |                 ; the Data Stack. We arrive here with the return address as the
4791:000 | DONE cmt | em 16 16 |        |             |                 ; top of Return Stack, which points to the address of the string
4792:000 | DONE wsp | em 16 16 |        |             |
4793:000 | DONE cmt | em 16 16 |        |             |                 ; Make room on stack, which also frees Y for other use
4794:000 | DONE ins | em 16 16 | 005e20 | ca          |                 dex                  
4795:000 | DONE ins | em 16 16 | 005e21 | ca          |                 dex                  
4796:000 | DONE ins | em 16 16 | 005e22 | ca          |                 dex                  
4797:000 | DONE ins | em 16 16 | 005e23 | ca          |                 dex                  
4798:000 | DONE ins | em 16 16 | 005e24 | 94 02       |                 sty.dx 02            
4799:000 | DONE wsp | em 16 16 |        |             |
4800:000 | DONE cmt | em 16 16 |        |             |                 ; Get the address of the string address off the stack and
4801:000 | DONE cmt | em 16 16 |        |             |                 ; increase by one because of the RTS mechanics
4802:000 | DONE ins | em 16 16 | 005e26 | 7a          |                 ply                  
4803:000 | DONE ins | em 16 16 | 005e27 | c8          |                 iny                  
4804:000 | DONE wsp | em 16 16 |        |             |
4805:000 | DONE ins | em 16 16 | 005e28 | b9 00 00    |                 lda.y 0000           LDA $0000,Y
4806:000 | DONE ins | em 16 16 | 005e2b | 95 00       |                 sta.dx 00            save string address as NOS
4807:000 | DONE ins | em 16 16 | 005e2d | c8          |                 iny                  
4808:000 | DONE ins | em 16 16 | 005e2e | c8          |                 iny                  
4809:000 | DONE ins | em 16 16 | 005e2f | b9 00 00    |                 lda.y 0000           get length of string, will be TOS ...
4810:000 | DONE wsp | em 16 16 |        |             |
4811:000 | DONE ins | em 16 16 | 005e32 | c8          |                 iny                  ... first, though, repair return jump
4812:000 | DONE ins | em 16 16 | 005e33 | 5a          |                 phy                  
4813:000 | DONE wsp | em 16 16 |        |             |
4814:000 | DONE ins | em 16 16 | 005e34 | a8          |                 tay                  TOS is now length of string
4815:000 | DONE wsp | em 16 16 |        |             |
4816:000 | DONE ins | em 16 16 | 005e35 | 60          |                 rts                  
4817:000 | DONE wsp | em 16 16 |        |             |
4818:000 | DONE cmt | em 16 16 |        |             | ; -------------------------------------------------------------------
4819:000 | DONE cmt | em 16 16 |        |             | ; SM/REM ( d n1 -- n2 n3) X bytes / X cycles
4820:000 | DONE cmt | em 16 16 |        |             | ; Symmetic signed division. Compare FM/MOD. Code from Gforth, see
4821:000 | DONE cmt | em 16 16 |        |             | ; https://groups.google.com/forum/#!topic/comp.lang.forth/_bx4dJFb9R0
4822:000 | DONE cmt | em 16 16 |        |             | ; and http://git.savannah.gnu.org/cgit/gforth.git/tree/prim ; see
4823:000 | DONE cmt | em 16 16 |        |             | ; http://www.figuk.plus.com/build/arith.htm for variants. Forth is
4824:000 | DONE cmt | em 16 16 |        |             | ; SM/REM OVER >R DUP >R ABS -ROT DABS ROT UM/MOD R>
4825:000 | DONE cmt | em 16 16 |        |             | ; R@ XOR 0< IF NEGATE THEN R> 0< IF SWAP NEGATE SWAP THEN ;
4826:000 | DONE cmt | em 16 16 |        |             | ; TODO optimize in assembler
4827:000 | DONE lbl | em 16 16 | 005e36 |             | xt_smrem                             
4828:000 | DONE dir | em 16 16 |        |             |         .!a16                        
4829:000 | DONE ins | em 16 16 | 005e36 | 20 4e 5c    |                 jsr 005c4e           
4830:000 | DONE wsp | em 16 16 |        |             |
4831:000 | DONE ins | em 16 16 | 005e39 | 5a          |                 phy                  >R
4832:000 | DONE ins | em 16 16 | 005e3a | b4 00       |                 ldy.dx 00            
4833:000 | DONE ins | em 16 16 | 005e3c | e8          |                 inx                  
4834:000 | DONE ins | em 16 16 | 005e3d | e8          |                 inx                  
4835:000 | DONE wsp | em 16 16 |        |             |
4836:000 | DONE ins | em 16 16 | 005e3e | ca          |                 dex                  DUP
4837:000 | DONE ins | em 16 16 | 005e3f | ca          |                 dex                  
4838:000 | DONE ins | em 16 16 | 005e40 | 94 00       |                 sty.dx 00            
4839:000 | DONE wsp | em 16 16 |        |             |
4840:000 | DONE ins | em 16 16 | 005e42 | 5a          |                 phy                  >R
4841:000 | DONE ins | em 16 16 | 005e43 | b4 00       |                 ldy.dx 00            
4842:000 | DONE ins | em 16 16 | 005e45 | e8          |                 inx                  
4843:000 | DONE ins | em 16 16 | 005e46 | e8          |                 inx                  
4844:000 | DONE wsp | em 16 16 |        |             |
4845:000 | DONE ins | em 16 16 | 005e47 | 20 aa 54    |                 jsr 0054aa           ABS
4846:000 | DONE ins | em 16 16 | 005e4a | 20 65 53    |                 jsr 005365           -ROT
4847:000 | DONE ins | em 16 16 | 005e4d | 20 49 58    |                 jsr 005849           DABS
4848:000 | DONE ins | em 16 16 | 005e50 | 20 62 5d    |                 jsr 005d62           ROT
4849:000 | DONE ins | em 16 16 | 005e53 | 20 92 5f    |                 jsr 005f92           UM/MOD
4850:000 | DONE wsp | em 16 16 |        |             |
4851:000 | DONE ins | em 16 16 | 005e56 | ca          |                 dex                  R>
4852:000 | DONE ins | em 16 16 | 005e57 | ca          |                 dex                  
4853:000 | DONE ins | em 16 16 | 005e58 | 94 00       |                 sty.dx 00            
4854:000 | DONE ins | em 16 16 | 005e5a | 7a          |                 ply                  
4855:000 | DONE wsp | em 16 16 |        |             |
4856:000 | DONE ins | em 16 16 | 005e5b | ca          |                 dex                  R@
4857:000 | DONE ins | em 16 16 | 005e5c | ca          |                 dex                  
4858:000 | DONE ins | em 16 16 | 005e5d | 94 00       |                 sty.dx 00            
4859:000 | DONE ins | em 16 16 | 005e5f | 7a          |                 ply                  
4860:000 | DONE ins | em 16 16 | 005e60 | 5a          |                 phy                  
4861:000 | DONE wsp | em 16 16 |        |             |
4862:000 | DONE ins | em 16 16 | 005e61 | 20 73 60    |                 jsr 006073           XOR
4863:000 | DONE wsp | em 16 16 |        |             |
4864:000 | DONE ins | em 16 16 | 005e64 | 98          |                 tya                  0< IF
4865:000 | DONE ins | em 16 16 | 005e65 | 10 09       |                 bpl 005e70           
4866:000 | DONE wsp | em 16 16 |        |             |
4867:000 | DONE ins | em 16 16 | 005e67 | b4 00       |                 ldy.dx 00            from IF
4868:000 | DONE ins | em 16 16 | 005e69 | e8          |                 inx                  
4869:000 | DONE ins | em 16 16 | 005e6a | e8          |                 inx                  
4870:000 | DONE wsp | em 16 16 |        |             |
4871:000 | DONE ins | em 16 16 | 005e6b | 20 b1 5b    |                 jsr 005bb1           NEGATE
4872:000 | DONE ins | em 16 16 | 005e6e | 80 04       |                 bra 005e74           
4873:000 | DONE lbl | em 16 16 | 005e70 |             | smrem_1                              
4874:000 | DONE ins | em 16 16 | 005e70 | b4 00       |                 ldy.dx 00            from IF
4875:000 | DONE ins | em 16 16 | 005e72 | e8          |                 inx                  
4876:000 | DONE ins | em 16 16 | 005e73 | e8          |                 inx                  
4877:000 | DONE wsp | em 16 16 |        |             |
4878:000 | DONE lbl | em 16 16 | 005e74 |             | smrem_1_1                            
4879:000 | DONE ins | em 16 16 | 005e74 | ca          |                 dex                  R>
4880:000 | DONE ins | em 16 16 | 005e75 | ca          |                 dex                  
4881:000 | DONE ins | em 16 16 | 005e76 | 94 00       |                 sty.dx 00            
4882:000 | DONE ins | em 16 16 | 005e78 | 7a          |                 ply                  
4883:000 | DONE wsp | em 16 16 |        |             |
4884:000 | DONE ins | em 16 16 | 005e79 | 98          |                 tya                  0< IF
4885:000 | DONE ins | em 16 16 | 005e7a | 10 0f       |                 bpl 005e8b           
4886:000 | DONE wsp | em 16 16 |        |             |
4887:000 | DONE ins | em 16 16 | 005e7c | b4 00       |                 ldy.dx 00            from IF
4888:000 | DONE ins | em 16 16 | 005e7e | e8          |                 inx                  
4889:000 | DONE ins | em 16 16 | 005e7f | e8          |                 inx                  
4890:000 | DONE wsp | em 16 16 |        |             |
4891:000 | DONE ins | em 16 16 | 005e80 | 20 cb 5e    |                 jsr 005ecb           
4892:000 | DONE ins | em 16 16 | 005e83 | 20 b1 5b    |                 jsr 005bb1           
4893:000 | DONE ins | em 16 16 | 005e86 | 20 cb 5e    |                 jsr 005ecb           
4894:000 | DONE ins | em 16 16 | 005e89 | 80 04       |                 bra 005e8f           
4895:000 | DONE wsp | em 16 16 |        |             |
4896:000 | DONE lbl | em 16 16 | 005e8b |             | smrem_2                              
4897:000 | DONE ins | em 16 16 | 005e8b | b4 00       |                 ldy.dx 00            
4898:000 | DONE ins | em 16 16 | 005e8d | e8          |                 inx                  
4899:000 | DONE ins | em 16 16 | 005e8e | e8          |                 inx                  
4900:000 | DONE wsp | em 16 16 |        |             |
4901:000 | DONE wsp | em 16 16 |        |             |
4902:000 | DONE lbl | em 16 16 | 005e8f |             | smrem_2_1                            
4903:000 | DONE wsp | em 16 16 |        |             |
4904:000 | DONE lbl | em 16 16 | 005e8f |             | z_smrem                              
4904:001 | DONE ins | em 16 16 | 005e8f | 60          |                 rts                  
4905:000 | DONE wsp | em 16 16 |        |             |
4906:000 | DONE wsp | em 16 16 |        |             |
4907:000 | DONE cmt | em 16 16 |        |             | ; -------------------------------------------------------------------
4908:000 | DONE cmt | em 16 16 |        |             | ; SOURCE ( -- addr u ) 12 bytes / X cycles
4909:000 | DONE cmt | em 16 16 |        |             | ; Return the address and size of current input buffer. Replaces TIB and #TIB in
4910:000 | DONE cmt | em 16 16 |        |             | ; ANSI Forth
4911:000 | DONE wsp | em 16 16 |        |             |
4912:000 | DONE lbl | em 16 16 | 005e90 |             | xt_source                            
4913:000 | DONE ins | em 16 16 | 005e90 | ca          |                 dex                  make room on Data Stack
4914:000 | DONE ins | em 16 16 | 005e91 | ca          |                 dex                  
4915:000 | DONE ins | em 16 16 | 005e92 | ca          |                 dex                  
4916:000 | DONE ins | em 16 16 | 005e93 | ca          |                 dex                  
4917:000 | DONE ins | em 16 16 | 005e94 | 94 02       |                 sty.dx 02            
4918:000 | DONE wsp | em 16 16 |        |             |
4919:000 | DONE ins | em 16 16 | 005e96 | a5 08       |                 lda.d 000008         address of current input buffer as NOS
4920:000 | DONE ins | em 16 16 | 005e98 | 95 00       |                 sta.dx 00            
4921:000 | DONE wsp | em 16 16 |        |             |
4922:000 | DONE ins | em 16 16 | 005e9a | a4 0a       |                 ldy.d 00000a         length of current input buffer as TOS
4923:000 | DONE wsp | em 16 16 |        |             |
4924:000 | DONE lbl | em 16 16 | 005e9c |             | z_source                             
4924:001 | DONE ins | em 16 16 | 005e9c | 60          |                 rts                  
4925:000 | DONE wsp | em 16 16 |        |             |
4926:000 | DONE cmt | em 16 16 |        |             | ; -------------------------------------------------------------------
4927:000 | DONE cmt | em 16 16 |        |             | ; SOURCE-ID ( -- n ) 6 bytes / 13 cycles
4928:000 | DONE cmt | em 16 16 |        |             | ; Identify the input source unless it is a block (s. Conklin & Rather p. 156).
4929:000 | DONE cmt | em 16 16 |        |             | ; Since we don't have blocks (yet), this will give the input source: 0 is
4930:000 | DONE cmt | em 16 16 |        |             | ; keyboard, -1 (0ffff) is character string, and a text file gives the fileid.
4931:000 | DONE lbl | em 16 16 | 005e9d |             | xt_source-id                         
4932:000 | DONE dir | em 16 16 |        |             |         .!xy16                       
4933:000 | DONE ins | em 16 16 | 005e9d | ca          |                 dex                  
4934:000 | DONE ins | em 16 16 | 005e9e | ca          |                 dex                  
4935:000 | DONE ins | em 16 16 | 005e9f | 94 00       |                 sty.dx 00            
4936:000 | DONE ins | em 16 16 | 005ea1 | a4 06       |                 ldy.d 000006         
4937:000 | DONE wsp | em 16 16 |        |             |
4938:000 | DONE lbl | em 16 16 | 005ea3 |             | z_source-id                          
4938:001 | DONE ins | em 16 16 | 005ea3 | 60          |                 rts                  
4939:000 | DONE wsp | em 16 16 |        |             |
4940:000 | DONE cmt | em 16 16 |        |             | ; -------------------------------------------------------------------
4941:000 | DONE cmt | em 16 16 |        |             | ; SPACE ( -- ) X bytes / X cycles
4942:000 | DONE cmt | em 16 16 |        |             | ; Print one ASCII space character. We need to leave JSR EMIT_A as a subroutine
4943:000 | DONE cmt | em 16 16 |        |             | ; instead of JSR/RTS it to JMP to allow native compile
4944:000 | DONE lbl | em 16 16 | 005ea4 |             | xt_space                             
4945:000 | DONE ins | em 16 16 | 005ea4 | a9 20 00    |                 lda.# AscSP          
4946:000 | DONE ins | em 16 16 | 005ea7 | 20 09 59    |                 jsr 005909           
4947:000 | DONE wsp | em 16 16 |        |             |
4948:000 | DONE lbl | em 16 16 | 005eaa |             | z_space                              
4948:001 | DONE ins | em 16 16 | 005eaa | 60          |                 rts                  
4949:000 | DONE wsp | em 16 16 |        |             |
4950:000 | DONE wsp | em 16 16 |        |             |
4951:000 | DONE cmt | em 16 16 |        |             | ; -------------------------------------------------------------------
4952:000 | DONE cmt | em 16 16 |        |             | ; SPACES ( u -- ) 12 bytes / X cycles
4953:000 | DONE cmt | em 16 16 |        |             | ; Print u spaces
4954:000 | DONE lbl | em 16 16 | 005eab |             | xt_spaces                            
4955:000 | DONE dir | em 16 16 |        |             |         .!a16                        
4956:000 | DONE wsp | em 16 16 |        |             |
4957:000 | DONE lbl | em 16 16 | 005eab |             | spaces_loop                          
4958:000 | DONE ins | em 16 16 | 005eab | 88          |                 dey                  this also handles case u=0
4959:000 | DONE ins | em 16 16 | 005eac | 30 08       |                 bmi 005eb6           
4960:000 | DONE wsp | em 16 16 |        |             |
4961:000 | DONE ins | em 16 16 | 005eae | a9 20 00    |                 lda.# 0020           
4962:000 | DONE ins | em 16 16 | 005eb1 | 20 09 59    |                 jsr 005909           
4963:000 | DONE wsp | em 16 16 |        |             |
4964:000 | DONE ins | em 16 16 | 005eb4 | 80 f5       |                 bra 005eab           
4965:000 | DONE wsp | em 16 16 |        |             |
4966:000 | DONE lbl | em 16 16 | 005eb6 |             | spaces_done                          
4967:000 | DONE ins | em 16 16 | 005eb6 | b4 00       |                 ldy.dx 00            DROP
4968:000 | DONE ins | em 16 16 | 005eb8 | e8          |                 inx                  
4969:000 | DONE ins | em 16 16 | 005eb9 | e8          |                 inx                  
4970:000 | DONE wsp | em 16 16 |        |             |
4971:000 | DONE lbl | em 16 16 | 005eba |             | z_spaces                             
4971:001 | DONE ins | em 16 16 | 005eba | 60          |                 rts                  
4972:000 | DONE wsp | em 16 16 |        |             |
4973:000 | DONE cmt | em 16 16 |        |             | ; -------------------------------------------------------------------
4974:000 | DONE cmt | em 16 16 |        |             | ; STAR ( n n -- n ) 16*16 -> 16  X bytes / X cycles
4975:000 | DONE cmt | em 16 16 |        |             | ; Multiply two signed 16 bit numbers, returning a 16 bit result. This is nothing
4976:000 | DONE cmt | em 16 16 |        |             | ; more than UM* DROP
4977:000 | DONE lbl | em 16 16 | 005ebb |             | xt_star                              
4978:000 | DONE ins | em 16 16 | 005ebb | 20 33 5f    |                 jsr 005f33           
4979:000 | DONE wsp | em 16 16 |        |             |
4980:000 | DONE ins | em 16 16 | 005ebe | b4 00       |                 ldy.dx 00            DROP
4981:000 | DONE ins | em 16 16 | 005ec0 | e8          |                 inx                  
4982:000 | DONE ins | em 16 16 | 005ec1 | e8          |                 inx                  
4983:000 | DONE wsp | em 16 16 |        |             |
4984:000 | DONE lbl | em 16 16 | 005ec2 |             | z_star                               
4984:001 | DONE ins | em 16 16 | 005ec2 | 60          |                 rts                  
4985:000 | DONE wsp | em 16 16 |        |             |
4986:000 | DONE wsp | em 16 16 |        |             |
4987:000 | DONE cmt | em 16 16 |        |             | ; -------------------------------------------------------------------
4988:000 | DONE cmt | em 16 16 |        |             | ; STATE ( -- addr ) 7 bytes / 12 cycles
4989:000 | DONE cmt | em 16 16 |        |             | ; Return the address of a cell containing the compilation-state flag. STATE
4990:000 | DONE cmt | em 16 16 |        |             | ; is true when in compilation state, false otherwise. STATE should not be
4991:000 | DONE cmt | em 16 16 |        |             | ; changed directly by the user; see
4992:000 | DONE cmt | em 16 16 |        |             | ; http://forth.sourceforge.net/standard/dpans/dpans6.htm#6.1.2250
4993:000 | DONE lbl | em 16 16 | 005ec3 |             | xt_state                             
4994:000 | DONE dir | em 16 16 |        |             |         .!xy16                       
4995:000 | DONE ins | em 16 16 | 005ec3 | ca          |                 dex                  
4996:000 | DONE ins | em 16 16 | 005ec4 | ca          |                 dex                  
4997:000 | DONE ins | em 16 16 | 005ec5 | 94 00       |                 sty.dx 00            
4998:000 | DONE ins | em 16 16 | 005ec7 | a0 14 00    |                 ldy.# 000014         
4999:000 | DONE wsp | em 16 16 |        |             |
5000:000 | DONE lbl | em 16 16 | 005eca |             | z_state                              
5000:001 | DONE ins | em 16 16 | 005eca | 60          |                 rts                  
5001:000 | DONE wsp | em 16 16 |        |             |
5002:000 | DONE wsp | em 16 16 |        |             |
5003:000 | DONE cmt | em 16 16 |        |             | ; -------------------------------------------------------------------
5004:000 | DONE cmt | em 16 16 |        |             | ; SWAP ( n m -- m n ) 5 bytes / 12 cycles
5005:000 | DONE cmt | em 16 16 |        |             | ; Exchange TOS with NOS. We don't check if there are enough elements on the Data
5006:000 | DONE cmt | em 16 16 |        |             | ; Stack; underflow errors will go undetected and return garbage.
5007:000 | DONE lbl | em 16 16 | 005ecb |             | xt_swap                              
5008:000 | DONE dir | em 16 16 |        |             |         .!a16                        
5009:000 | DONE dir | em 16 16 |        |             |         .!xy16                       
5010:000 | DONE ins | em 16 16 | 005ecb | b5 00       |                 lda.dx 00            
5011:000 | DONE ins | em 16 16 | 005ecd | 94 00       |                 sty.dx 00            
5012:000 | DONE ins | em 16 16 | 005ecf | a8          |                 tay                  
5013:000 | DONE wsp | em 16 16 |        |             |
5014:000 | DONE lbl | em 16 16 | 005ed0 |             | z_swap                               
5014:001 | DONE ins | em 16 16 | 005ed0 | 60          |                 rts                  
5015:000 | DONE wsp | em 16 16 |        |             |
5016:000 | DONE wsp | em 16 16 |        |             |
5017:000 | DONE cmt | em 16 16 |        |             | ; -------------------------------------------------------------------
5018:000 | DONE cmt | em 16 16 |        |             | ; TO ( n "name" -- ) X bytes / X cycles
5019:000 | DONE cmt | em 16 16 |        |             | ; Change the value of a VALUE. Note that in theory this would work with CONSTANT
5020:000 | DONE cmt | em 16 16 |        |             | ; as well, but we frown on this behavior. Note that while it is in violation of
5021:000 | DONE cmt | em 16 16 |        |             | ; ANS Forth, we can change the number in a VALUE with <number> ' <value> >BODY
5022:000 | DONE cmt | em 16 16 |        |             | ; +!  just as you can with Gforth
5023:000 | DONE cmt | em 16 16 |        |             | ; TODO unroll this to assembler
5024:000 | DONE lbl | em 16 16 | 005ed1 |             | xt_to                                
5025:000 | DONE ins | em 16 16 | 005ed1 | 20 71 54    |                 jsr 005471           '
5026:000 | DONE ins | em 16 16 | 005ed4 | 20 37 51    |                 jsr 005137           >BODY
5027:000 | DONE ins | em 16 16 | 005ed7 | 20 ce 52    |                 jsr 0052ce           !
5028:000 | DONE wsp | em 16 16 |        |             |
5029:000 | DONE lbl | em 16 16 | 005eda |             | z_to                                 
5029:001 | DONE ins | em 16 16 | 005eda | 60          |                 rts                  
5030:000 | DONE wsp | em 16 16 |        |             |
5031:000 | DONE wsp | em 16 16 |        |             |
5032:000 | DONE cmt | em 16 16 |        |             | ; -------------------------------------------------------------------
5033:000 | DONE cmt | em 16 16 |        |             | ; TRUE ( -- f ) 7 bytes / 12 cycles
5034:000 | DONE cmt | em 16 16 |        |             | ; Pushes value $FFFF for Forth true on Data Stack
5035:000 | DONE lbl | em 16 16 | 005edb |             | xt_true                              
5036:000 | DONE dir | em 16 16 |        |             |         .!a16                        
5037:000 | DONE dir | em 16 16 |        |             |         .!xy16                       
5038:000 | DONE ins | em 16 16 | 005edb | ca          |                 dex                  
5039:000 | DONE ins | em 16 16 | 005edc | ca          |                 dex                  
5040:000 | DONE ins | em 16 16 | 005edd | 94 00       |                 sty.dx 00            
5041:000 | DONE ins | em 16 16 | 005edf | a0 ff ff    |                 ldy.# 0ffff          
5042:000 | DONE wsp | em 16 16 |        |             |
5043:000 | DONE lbl | em 16 16 | 005ee2 |             | z_true                               
5043:001 | DONE ins | em 16 16 | 005ee2 | 60          |                 rts                  
5044:000 | DONE wsp | em 16 16 |        |             |
5045:000 | DONE cmt | em 16 16 |        |             | ; -------------------------------------------------------------------
5046:000 | DONE cmt | em 16 16 |        |             | ; TUCK ( n m -- m n m ) 8 bytes / 19 cycles
5047:000 | DONE cmt | em 16 16 |        |             | ; Insert TOS below NOS. We do not check if there are enough elements on the Data
5048:000 | DONE cmt | em 16 16 |        |             | ; Stack, underflow will go undetected and return garbage.
5049:000 | DONE lbl | em 16 16 | 005ee3 |             | xt_tuck                              
5050:000 | DONE dir | em 16 16 |        |             |         .!a16                        
5051:000 | DONE dir | em 16 16 |        |             |         .!xy16                       
5052:000 | DONE ins | em 16 16 | 005ee3 | ca          |                 dex                  
5053:000 | DONE ins | em 16 16 | 005ee4 | ca          |                 dex                  
5054:000 | DONE ins | em 16 16 | 005ee5 | b5 02       |                 lda.dx 2             
5055:000 | DONE ins | em 16 16 | 005ee7 | 95 00       |                 sta.dx 0             
5056:000 | DONE ins | em 16 16 | 005ee9 | 94 02       |                 sty.dx 2             
5057:000 | DONE wsp | em 16 16 |        |             |
5058:000 | DONE lbl | em 16 16 | 005eeb |             | z_tuck                               
5058:001 | DONE ins | em 16 16 | 005eeb | 60          |                 rts                  
5059:000 | DONE wsp | em 16 16 |        |             |
5060:000 | DONE cmt | em 16 16 |        |             | ; -------------------------------------------------------------------
5061:000 | DONE cmt | em 16 16 |        |             | ; TYPE  ( addr u -- ) 23+ bytes / X cycles
5062:000 | DONE cmt | em 16 16 |        |             | ; Print character string if u is not 0. Works though EMIT and is affect by the
5063:000 | DONE cmt | em 16 16 |        |             | ; OUTPUT revectoring
5064:000 | DONE cmt | em 16 16 |        |             | ; TODO LATER add PAUSE here for multitasking
5065:000 | DONE lbl | em 16 16 | 005eec |             | xt_type                              
5066:000 | DONE dir | em 16 16 |        |             |         .!a16                        
5067:000 | DONE dir | em 16 16 |        |             |         .!xy16                       
5068:000 | DONE cmt | em 16 16 |        |             |                 ; just leave if u is zero (empty string)
5069:000 | DONE ins | em 16 16 | 005eec | 98          |                 tya                  force flag check of TOS
5070:000 | DONE ins | em 16 16 | 005eed | f0 17       |                 beq 005f06           
5071:000 | DONE wsp | em 16 16 |        |             |
5072:000 | DONE ins | em 16 16 | 005eef | b5 00       |                 lda.dx 00            get address from NOS
5073:000 | DONE ins | em 16 16 | 005ef1 | 85 1c       |                 sta.d 00001c         
5074:000 | DONE ins | em 16 16 | 005ef3 | 84 1e       |                 sty.d 00001e         number of chars is TOS
5075:000 | DONE ins | em 16 16 | 005ef5 | a0 00 00    |                 ldy.# 0000           
5076:000 | DONE ins | em 16 16 | 005ef8 | e2 20       |                 sep 20               
5076:001 | DONE ctl | em  8 16 |        |             |         .!a8
5077:000 | DONE lbl | em  8 16 | 005efa |             | type_loop                            
5078:000 | DONE ins | em  8 16 | 005efa | b1 1c       |                 lda.diy 00001c       LDA (TMP1),Y
5079:000 | DONE ins | em  8 16 | 005efc | 20 09 59    |                 jsr 005909           
5080:000 | DONE ins | em  8 16 | 005eff | c8          |                 iny                  
5081:000 | DONE ins | em  8 16 | 005f00 | c4 1e       |                 cpy.d 00001e         
5082:000 | DONE ins | em  8 16 | 005f02 | d0 f6       |                 bne 005efa           
5083:000 | DONE wsp | em  8 16 |        |             |
5084:000 | DONE ins | em  8 16 | 005f04 | c2 20       |                 rep 20               
5084:001 | DONE ctl | em 16 16 |        |             |         .!a16
5085:000 | DONE lbl | em 16 16 | 005f06 |             | type_done                            
5086:000 | DONE cmt | em 16 16 |        |             |                 ; clear stack
5087:000 | DONE ins | em 16 16 | 005f06 | b4 02       |                 ldy.dx 02            
5088:000 | DONE ins | em 16 16 | 005f08 | e8          |                 inx                  
5089:000 | DONE ins | em 16 16 | 005f09 | e8          |                 inx                  
5090:000 | DONE ins | em 16 16 | 005f0a | e8          |                 inx                  
5091:000 | DONE ins | em 16 16 | 005f0b | e8          |                 inx                  
5092:000 | DONE wsp | em 16 16 |        |             |
5093:000 | DONE lbl | em 16 16 | 005f0c |             | z_type                               
5093:001 | DONE ins | em 16 16 | 005f0c | 60          |                 rts                  
5094:000 | DONE wsp | em 16 16 |        |             |
5095:000 | DONE wsp | em 16 16 |        |             |
5096:000 | DONE cmt | em 16 16 |        |             | ; -------------------------------------------------------------------
5097:000 | DONE cmt | em 16 16 |        |             | ; UDOT ( n -- ) X bytes / X cycles
5098:000 | DONE cmt | em 16 16 |        |             | ; Print unsigned number. This is based on the Forth word
5099:000 | DONE cmt | em 16 16 |        |             | ; 0 <# #S #> TYPE SPACE but uses the general print_u routine
5100:000 | DONE cmt | em 16 16 |        |             | ; that .S and DUMP use as well. We need to keep JSR EMIT_A instead of JSR/RTS it
5101:000 | DONE cmt | em 16 16 |        |             | ; to JMP to allow native compile
5102:000 | DONE lbl | em 16 16 | 005f0d |             | xt_udot                              
5103:000 | DONE ins | em 16 16 | 005f0d | 20 3f 6a    |                 jsr 006a3f           ( n -- )
5104:000 | DONE wsp | em 16 16 |        |             |
5105:000 | DONE ins | em 16 16 | 005f10 | a9 20 00    |                 lda.# 0020           SPACE
5106:000 | DONE ins | em 16 16 | 005f13 | 20 09 59    |                 jsr 005909           
5107:000 | DONE wsp | em 16 16 |        |             |
5108:000 | DONE lbl | em 16 16 | 005f16 |             | z_udot                               
5108:001 | DONE ins | em 16 16 | 005f16 | 60          |                 rts                  
5109:000 | DONE wsp | em 16 16 |        |             |
5110:000 | DONE wsp | em 16 16 |        |             |
5111:000 | DONE wsp | em 16 16 |        |             |
5112:000 | DONE cmt | em 16 16 |        |             | ; -------------------------------------------------------------------
5113:000 | DONE cmt | em 16 16 |        |             | ; UDMOD ( ud u -- u ud ) 32/16 --> 32  X bytes / X cycles
5114:000 | DONE cmt | em 16 16 |        |             | ; Devide double-cell number by single-cell number, producing a double-cell
5115:000 | DONE cmt | em 16 16 |        |             | ; result and a single-cell remainder. Based on
5116:000 | DONE cmt | em 16 16 |        |             | ; Gforth  : UD/MOD  >R 0 R@ UM/MOD R> SWAP >R UM/MOD R> ;
5117:000 | DONE cmt | em 16 16 |        |             | ; pForth  : UD/MOD  >R 0 R@ UM/MOD ROT ROT R> UM/MOD ROT ;
5118:000 | DONE cmt | em 16 16 |        |             | ; This doesn't seem to be used anywhere else but for # (HASH) in coverting
5119:000 | DONE cmt | em 16 16 |        |             | ; pictured numerical output, though pForth claims it uses UM/MOD for that
5120:000 | DONE cmt | em 16 16 |        |             | ; At some point, we need to get back to UM/MOD because it's optimized
5121:000 | DONE lbl | em 16 16 | 005f17 |             | xt_udmod                             
5122:000 | DONE ins | em 16 16 | 005f17 | 20 c0 51    |                 jsr 0051c0           
5123:000 | DONE ins | em 16 16 | 005f1a | 20 91 53    |                 jsr 005391           
5124:000 | DONE ins | em 16 16 | 005f1d | 20 27 5d    |                 jsr 005d27           
5125:000 | DONE ins | em 16 16 | 005f20 | 20 92 5f    |                 jsr 005f92           
5126:000 | DONE ins | em 16 16 | 005f23 | 20 62 5d    |                 jsr 005d62           
5127:000 | DONE ins | em 16 16 | 005f26 | 20 62 5d    |                 jsr 005d62           
5128:000 | DONE ins | em 16 16 | 005f29 | 20 30 5d    |                 jsr 005d30           
5129:000 | DONE ins | em 16 16 | 005f2c | 20 92 5f    |                 jsr 005f92           
5130:000 | DONE ins | em 16 16 | 005f2f | 20 62 5d    |                 jsr 005d62           
5131:000 | DONE lbl | em 16 16 | 005f32 |             | z_udmod                              
5131:001 | DONE ins | em 16 16 | 005f32 | 60          |                 rts                  
5132:000 | DONE wsp | em 16 16 |        |             |
5133:000 | DONE wsp | em 16 16 |        |             |
5134:000 | DONE cmt | em 16 16 |        |             | ; -------------------------------------------------------------------
5135:000 | DONE cmt | em 16 16 |        |             | ; UM* "UMSTAR" ( u u -- ud ) 16*16 -> 32  X bytes / X cycles
5136:000 | DONE cmt | em 16 16 |        |             | ; Multiply two unsigned 16 bit numbers, producing a 32 bit result.This is based
5137:000 | DONE cmt | em 16 16 |        |             | ; on modified FIG Forth code by Dr. Jefyll, see
5138:000 | DONE cmt | em 16 16 |        |             | ; http://forum.6502.org/viewtopic.php?f=9&t=689 for a detailed discussion. We
5139:000 | DONE cmt | em 16 16 |        |             | ; use the system scratch pad (SYSPAD) for temp storage (N in the original code)
5140:000 | DONE cmt | em 16 16 |        |             | ; FIG Forth is in the public domain. Note old Forth versions such as FIG Forth
5141:000 | DONE cmt | em 16 16 |        |             | ; call this "U*"
5142:000 | DONE wsp | em 16 16 |        |             |
5143:000 | DONE cmt | em 16 16 |        |             | ; This is currently a brute-force loop based on the 8-bit variant in "6502
5144:000 | DONE cmt | em 16 16 |        |             | ; Assembly Language Programming" by Leventhal. Once everything is working,
5145:000 | DONE cmt | em 16 16 |        |             | ; consider switching to a table-supported version based on
5146:000 | DONE cmt | em 16 16 |        |             | ; http://codebase64.org/doku.php?id=base:seriously_fast_multiplication
5147:000 | DONE cmt | em 16 16 |        |             | ; http://codebase64.org/doku.php?id=magazines:chacking16#d_graphics_for_the_masseslib3d_and_cool_world
5148:000 | DONE cmt | em 16 16 |        |             | ; http://forum.6502.org/viewtopic.php?p=205#p205
5149:000 | DONE cmt | em 16 16 |        |             | ; http://forum.6502.org/viewtopic.php?f=9&t=689 We use tmp1, tmp2, tmp3 for
5150:000 | DONE cmt | em 16 16 |        |             | ; this, with the assumption that tmp3 immediately follows tmp2
5151:000 | DONE lbl | em 16 16 | 005f33 |             | xt_umstar                            
5152:000 | DONE dir | em 16 16 |        |             |         .!a16                        
5153:000 | DONE cmt | em 16 16 |        |             |                 ; SPECIAL CASE 1: multiplication by zero
5154:000 | DONE ins | em 16 16 | 005f33 | 98          |                 tya                  
5155:000 | DONE ins | em 16 16 | 005f34 | f0 3d       |                 beq 005f73           
5156:000 | DONE ins | em 16 16 | 005f36 | b5 00       |                 lda.dx 00            
5157:000 | DONE ins | em 16 16 | 005f38 | f0 39       |                 beq 005f73           
5158:000 | DONE wsp | em 16 16 |        |             |
5159:000 | DONE cmt | em 16 16 |        |             |                 ; SPECIAL CASE 2: multiplication by one
5160:000 | DONE cmt | em 16 16 |        |             |                 ; This is a different routine than 2* because that instruction
5161:000 | DONE cmt | em 16 16 |        |             |                 ; stays inside one cell, whereas UM* produces a Double Cell
5162:000 | DONE cmt | em 16 16 |        |             |                 ; answer
5163:000 | DONE ins | em 16 16 | 005f3a | c0 01 00    |                 cpy.# 0001           non-distructively
5164:000 | DONE ins | em 16 16 | 005f3d | f0 3b       |                 beq 005f7a           
5165:000 | DONE ins | em 16 16 | 005f3f | b5 00       |                 lda.dx 00            
5166:000 | DONE ins | em 16 16 | 005f41 | 3a          |                 dec.a                don't care about distruction
5167:000 | DONE ins | em 16 16 | 005f42 | f0 39       |                 beq 005f7d           
5168:000 | DONE wsp | em 16 16 |        |             |
5169:000 | DONE cmt | em 16 16 |        |             |                 ; SPECIAL CASE 3: multiplication by two
5170:000 | DONE ins | em 16 16 | 005f44 | c0 02 00    |                 cpy.# 0002           
5171:000 | DONE ins | em 16 16 | 005f47 | f0 3b       |                 beq 005f84           
5172:000 | DONE wsp | em 16 16 |        |             |
5173:000 | DONE ins | em 16 16 | 005f49 | b5 00       |                 lda.dx 00            
5174:000 | DONE ins | em 16 16 | 005f4b | c9 02 00    |                 cmp.# 0002           
5175:000 | DONE ins | em 16 16 | 005f4e | f0 38       |                 beq 005f88           
5176:000 | DONE wsp | em 16 16 |        |             |
5177:000 | DONE cmt | em 16 16 |        |             |                 ; NO SPECIAL CASE ("The Hard Way")
5178:000 | DONE ins | em 16 16 | 005f50 | 84 1c       |                 sty.d 00001c         TOS number  "40"
5179:000 | DONE ins | em 16 16 | 005f52 | 85 1e       |                 sta.d 00001e         NOS number  "41"
5180:000 | DONE ins | em 16 16 | 005f54 | a0 10 00    |                 ldy.# &16            loop counter
5181:000 | DONE wsp | em 16 16 |        |             |
5182:000 | DONE ins | em 16 16 | 005f57 | a9 00 00    |                 lda.# 0000           
5183:000 | DONE ins | em 16 16 | 005f5a | 85 20       |                 sta.d 000020         Most Significat Word (MSW) of result
5184:000 | DONE wsp | em 16 16 |        |             |
5185:000 | DONE lbl | em 16 16 | 005f5c |             | umstar_loop                          
5186:000 | DONE ins | em 16 16 | 005f5c | 0a          |                 asl.a                useless for first iteration
5187:000 | DONE ins | em 16 16 | 005f5d | 26 20       |                 rol.d 000020         move carry into MSB, useless first iteration
5188:000 | DONE ins | em 16 16 | 005f5f | 06 1e       |                 asl.d 00001e         move bit of NOS number into carry
5189:000 | DONE wsp | em 16 16 |        |             |
5190:000 | DONE cmt | em 16 16 |        |             |                 ; if there is no carry bit, we don't have to add and can go to
5191:000 | DONE cmt | em 16 16 |        |             |                 ; the next bit
5192:000 | DONE ins | em 16 16 | 005f61 | 90 07       |                 bcc 005f6a           
5193:000 | DONE wsp | em 16 16 |        |             |
5194:000 | DONE ins | em 16 16 | 005f63 | 18          |                 clc                  
5195:000 | DONE ins | em 16 16 | 005f64 | 65 1c       |                 adc.d 00001c         we have a set bit, so add TOS
5196:000 | DONE wsp | em 16 16 |        |             |
5197:000 | DONE cmt | em 16 16 |        |             |                 ; if we have a carry, increase the MSW of result
5198:000 | DONE ins | em 16 16 | 005f66 | 90 02       |                 bcc 005f6a           
5199:000 | DONE ins | em 16 16 | 005f68 | e6 20       |                 inc.d 000020         
5200:000 | DONE wsp | em 16 16 |        |             |
5201:000 | DONE lbl | em 16 16 | 005f6a |             | umstar_counter                       
5202:000 | DONE ins | em 16 16 | 005f6a | 88          |                 dey                  
5203:000 | DONE ins | em 16 16 | 005f6b | d0 ef       |                 bne 005f5c           
5204:000 | DONE wsp | em 16 16 |        |             |
5205:000 | DONE cmt | em 16 16 |        |             |                 ; We're all done, clean up and leave
5206:000 | DONE ins | em 16 16 | 005f6d | 95 00       |                 sta.dx 00            store lower cell of number in NOS
5207:000 | DONE ins | em 16 16 | 005f6f | a4 20       |                 ldy.d 000020         store MSB in TOS as double cell
5208:000 | DONE wsp | em 16 16 |        |             |
5209:000 | DONE ins | em 16 16 | 005f71 | 80 1e       |                 bra 005f91           don't use RTS so we can natively compile
5210:000 | DONE wsp | em 16 16 |        |             |
5211:000 | DONE lbl | em 16 16 | 005f73 |             | umstar_zero                          
5212:000 | DONE cmt | em 16 16 |        |             |                 ; one or both of the numbers is zero, so we got off light
5213:000 | DONE ins | em 16 16 | 005f73 | a0 00 00    |                 ldy.# 0000           
5214:000 | DONE ins | em 16 16 | 005f76 | 94 00       |                 sty.dx 00            
5215:000 | DONE ins | em 16 16 | 005f78 | 80 17       |                 bra 005f91           
5216:000 | DONE wsp | em 16 16 |        |             |
5217:000 | DONE lbl | em 16 16 | 005f7a |             | umstar_one_tos                       
5218:000 | DONE cmt | em 16 16 |        |             |                 ; TOS is one, life is easy
5219:000 | DONE ins | em 16 16 | 005f7a | 88          |                 dey                  NOS is LSW, TOS becomes zero
5220:000 | DONE ins | em 16 16 | 005f7b | 80 14       |                 bra 005f91           
5221:000 | DONE lbl | em 16 16 | 005f7d |             | umstar_one_nos                       
5222:000 | DONE cmt | em 16 16 |        |             |                 ; NOS is one, life is easy
5223:000 | DONE ins | em 16 16 | 005f7d | 94 00       |                 sty.dx 00            
5224:000 | DONE ins | em 16 16 | 005f7f | a0 00 00    |                 ldy.# 0000           
5225:000 | DONE ins | em 16 16 | 005f82 | 80 0d       |                 bra 005f91           
5226:000 | DONE wsp | em 16 16 |        |             |
5227:000 | DONE lbl | em 16 16 | 005f84 |             | umstar_two_tos                       
5228:000 | DONE cmt | em 16 16 |        |             |                 ; TOS is two, life is easy
5229:000 | DONE ins | em 16 16 | 005f84 | b5 00       |                 lda.dx 00            
5230:000 | DONE ins | em 16 16 | 005f86 | 80 01       |                 bra 005f89           
5231:000 | DONE lbl | em 16 16 | 005f88 |             | umstar_two_nos                       
5232:000 | DONE cmt | em 16 16 |        |             |                 ; NOS is two, life is still easy
5233:000 | DONE ins | em 16 16 | 005f88 | 98          |                 tya                  
5234:000 | DONE lbl | em 16 16 | 005f89 |             | umstar_two_common                    
5235:000 | DONE ins | em 16 16 | 005f89 | 0a          |                 asl.a                multiply by two, top bit in Carry Flag
5236:000 | DONE ins | em 16 16 | 005f8a | 95 00       |                 sta.dx 00            Double Cell LSW is NOS
5237:000 | DONE wsp | em 16 16 |        |             |
5238:000 | DONE ins | em 16 16 | 005f8c | a9 00 00    |                 lda.# 0000           
5239:000 | DONE ins | em 16 16 | 005f8f | 2a          |                 rol.a                Rotate any Carry Flag into MSW
5240:000 | DONE ins | em 16 16 | 005f90 | a8          |                 tay                  
5241:000 | DONE wsp | em 16 16 |        |             |
5242:000 | DONE lbl | em 16 16 | 005f91 |             | z_umstar                             
5242:001 | DONE ins | em 16 16 | 005f91 | 60          |                 rts                  
5243:000 | DONE wsp | em 16 16 |        |             |
5244:000 | DONE cmt | em 16 16 |        |             | ; -------------------------------------------------------------------
5245:000 | DONE cmt | em 16 16 |        |             | ; UM/MOD ( ud u -- u u ) 32/16 -> 16  X bytes / X cycles
5246:000 | DONE cmt | em 16 16 |        |             | ; Divide double cell number by single cell number, returning the quotient as TOS
5247:000 | DONE cmt | em 16 16 |        |             | ; and any remainder as NOS. All numbers are unsigned. This is the basic division
5248:000 | DONE cmt | em 16 16 |        |             | ; operation all others use. Based on Garth Wilson's code at
5249:000 | DONE cmt | em 16 16 |        |             | ; http://6502.org/source/integers/ummodfix/ummodfix.htm We use "scratch" for N
5250:000 | DONE cmt | em 16 16 |        |             | ; and include a separate detection of division by zero to force an error code
5251:000 | DONE lbl | em 16 16 | 005f92 |             | xt_ummod                             
5252:000 | DONE dir | em 16 16 |        |             |         .!a16                        
5253:000 | DONE dir | em 16 16 |        |             |         .!xy16                       
5254:000 | DONE cmt | em 16 16 |        |             |                 ; Move the inputs to the scratchpad to avoid having to fool
5255:000 | DONE cmt | em 16 16 |        |             |                 ; around with the Data Stack and for speed. Garth's original
5256:000 | DONE cmt | em 16 16 |        |             |                 ; code uses the MVN instruction for this, but our TOS is Y which
5257:000 | DONE cmt | em 16 16 |        |             |                 ; makes that harder. When we're done, the setup will look likes
5258:000 | DONE cmt | em 16 16 |        |             |                 ; this: (S is start of the scratchpad in Direct Page)
5259:000 | DONE cmt | em 16 16 |        |             |                 ;
5260:000 | DONE cmt | em 16 16 |        |             |                 ;     +-----+-----+-----+-----+-----+-----+-----+-----+
5261:000 | DONE cmt | em 16 16 |        |             |                 ;     |  DIVISOR  |        DIVIDEND       | TEMP AREA |
5262:000 | DONE cmt | em 16 16 |        |             |                 ;     |           |  hi cell     lo cell  | carry bit |
5263:000 | DONE cmt | em 16 16 |        |             |                 ;     |  S    S+1 | S+2   S+3 | S+4   S+5 | S+6   S+7 |
5264:000 | DONE cmt | em 16 16 |        |             |                 ;     +-----+-----+-----+-----+-----+-----+-----+-----+
5265:000 | DONE cmt | em 16 16 |        |             |                 ;
5266:000 | DONE cmt | em 16 16 |        |             |                 ; The divisor is TOS (in Y), high cell of the dividend in NOS,
5267:000 | DONE cmt | em 16 16 |        |             |                 ; and low cell in 3OS
5268:000 | DONE wsp | em 16 16 |        |             |
5269:000 | DONE cmt | em 16 16 |        |             |                 ; Catch division by zero. We could include this in the code as
5270:000 | DONE cmt | em 16 16 |        |             |                 ; part of overflow detection (see below), but we want an error
5271:000 | DONE cmt | em 16 16 |        |             |                 ; to appear like in Gforth
5272:000 | DONE ins | em 16 16 | 005f92 | 98          |                 tya                  force flag test
5273:000 | DONE ins | em 16 16 | 005f93 | d0 06       |                 bne 005f9b           
5274:000 | DONE wsp | em 16 16 |        |             |
5275:000 | DONE ins | em 16 16 | 005f95 | a9 ea 70    |                 lda.# 0070ea         
5276:000 | DONE ins | em 16 16 | 005f98 | 4c 21 6a    |                 jmp 006a21           
5277:000 | DONE wsp | em 16 16 |        |             |
5278:000 | DONE lbl | em 16 16 | 005f9b |             | ummod_notzero                        
5279:000 | DONE ins | em 16 16 | 005f9b | 84 28       |                 sty.d 000028         Y is now free
5280:000 | DONE ins | em 16 16 | 005f9d | b5 00       |                 lda.dx 00            high cell of dividend
5281:000 | DONE ins | em 16 16 | 005f9f | 85 2a       |                 sta.d 00002a         
5282:000 | DONE ins | em 16 16 | 005fa1 | b5 02       |                 lda.dx 02            low cell of dividend
5283:000 | DONE ins | em 16 16 | 005fa3 | 85 2c       |                 sta.d 00002c         
5284:000 | DONE wsp | em 16 16 |        |             |
5285:000 | DONE cmt | em 16 16 |        |             |                 ; Drop one entry off of the stack and save the new Data Stack
5286:000 | DONE cmt | em 16 16 |        |             |                 ; Pointer, freeing X for index duty
5287:000 | DONE ins | em 16 16 | 005fa5 | e8          |                 inx                  
5288:000 | DONE ins | em 16 16 | 005fa6 | e8          |                 inx                  
5289:000 | DONE ins | em 16 16 | 005fa7 | 86 22       |                 stx.d 000022         
5290:000 | DONE wsp | em 16 16 |        |             |
5291:000 | DONE cmt | em 16 16 |        |             |                 ; Detect overflow. Subtract divisor from high cell of dividend.
5292:000 | DONE cmt | em 16 16 |        |             |                 ; If carry flag remains set, divisor was not large enough to
5293:000 | DONE cmt | em 16 16 |        |             |                 ; avoid overflow. This also would detect division by zero, but
5294:000 | DONE cmt | em 16 16 |        |             |                 ; we did that already in a separate step
5295:000 | DONE ins | em 16 16 | 005fa9 | 38          |                 sec                  
5296:000 | DONE ins | em 16 16 | 005faa | a5 2a       |                 lda.d 00002a         
5297:000 | DONE ins | em 16 16 | 005fac | e5 28       |                 sbc.d 000028         
5298:000 | DONE ins | em 16 16 | 005fae | b0 21       |                 bcs 005fd1           
5299:000 | DONE wsp | em 16 16 |        |             |
5300:000 | DONE cmt | em 16 16 |        |             |                 ; If there is no overflow, the carry flag remains clear for
5301:000 | DONE cmt | em 16 16 |        |             |                 ; first roll. We loop 16 times, but since we shift the dividend
5302:000 | DONE cmt | em 16 16 |        |             |                 ; over at the same time as shifting the answer in, the operation
5303:000 | DONE cmt | em 16 16 |        |             |                 ; must start and (!) finish with a shift of the low cell of the
5304:000 | DONE cmt | em 16 16 |        |             |                 ; dividend (which ends up holding the quotient), so we start
5305:000 | DONE cmt | em 16 16 |        |             |                 ; with 17 times in X. Y is used for temporary storage
5306:000 | DONE ins | em 16 16 | 005fb0 | a2 11 00    |                 ldx.# &17            
5307:000 | DONE wsp | em 16 16 |        |             |
5308:000 | DONE lbl | em 16 16 | 005fb3 |             | ummod_shift                          
5309:000 | DONE cmt | em 16 16 |        |             |                 ; Move low cell of dividend left one bit, also shifting answer
5310:000 | DONE cmt | em 16 16 |        |             |                 ; in. The first rotation brings in a zero, which later gets
5311:000 | DONE cmt | em 16 16 |        |             |                 ; pushed off the other end in the last rotation
5312:000 | DONE ins | em 16 16 | 005fb3 | 26 2c       |                 rol.d 00002c         
5313:000 | DONE wsp | em 16 16 |        |             |
5314:000 | DONE cmt | em 16 16 |        |             |                 ; loop control
5315:000 | DONE ins | em 16 16 | 005fb5 | ca          |                 dex                  
5316:000 | DONE ins | em 16 16 | 005fb6 | f0 22       |                 beq 005fda           
5317:000 | DONE wsp | em 16 16 |        |             |
5318:000 | DONE cmt | em 16 16 |        |             |                 ; Shift high cell of divident left one bit, also shifting the
5319:000 | DONE cmt | em 16 16 |        |             |                 ; next bit in from high bit of low cell
5320:000 | DONE ins | em 16 16 | 005fb8 | 26 2a       |                 rol.d 00002a         
5321:000 | DONE ins | em 16 16 | 005fba | a9 00 00    |                 lda.# 0000           
5322:000 | DONE ins | em 16 16 | 005fbd | 2a          |                 rol.a                
5323:000 | DONE ins | em 16 16 | 005fbe | 85 2e       |                 sta.d 00002e         store old high bit of dividend
5324:000 | DONE wsp | em 16 16 |        |             |
5325:000 | DONE cmt | em 16 16 |        |             |                 ; See if divisor will fit into high 17 bits of dividend by
5326:000 | DONE cmt | em 16 16 |        |             |                 ; subtracting and then looking at the carry flag. If carry was
5327:000 | DONE cmt | em 16 16 |        |             |                 ; cleared, divisor did not fit
5328:000 | DONE ins | em 16 16 | 005fc0 | 38          |                 sec                  
5329:000 | DONE ins | em 16 16 | 005fc1 | a5 2a       |                 lda.d 00002a         
5330:000 | DONE ins | em 16 16 | 005fc3 | e5 28       |                 sbc.d 000028         
5331:000 | DONE ins | em 16 16 | 005fc5 | a8          |                 tay                  save difference in Y until we know if we need it
5332:000 | DONE wsp | em 16 16 |        |             |
5333:000 | DONE cmt | em 16 16 |        |             |                 ; Bit 0 of S+6 serves as the 17th bit. Complete the subtraction
5334:000 | DONE cmt | em 16 16 |        |             |                 ; by doing the 17th bit before determining if the divisor fits
5335:000 | DONE cmt | em 16 16 |        |             |                 ; into the high 17 bits of the dividend. If so, the carry flag
5336:000 | DONE cmt | em 16 16 |        |             |                 ; remains set
5337:000 | DONE ins | em 16 16 | 005fc6 | a5 2e       |                 lda.d 00002e         
5338:000 | DONE ins | em 16 16 | 005fc8 | e9 00 00    |                 sbc.# 0000           
5339:000 | DONE ins | em 16 16 | 005fcb | 90 e6       |                 bcc 005fb3           
5340:000 | DONE wsp | em 16 16 |        |             |
5341:000 | DONE cmt | em 16 16 |        |             |                 ; Since the divisor fit into high 17 bits, update dividend high
5342:000 | DONE cmt | em 16 16 |        |             |                 ; cell to what it would be after subtraction
5343:000 | DONE ins | em 16 16 | 005fcd | 84 2a       |                 sty.d 00002a         
5344:000 | DONE ins | em 16 16 | 005fcf | 80 e2       |                 bra 005fb3           
5345:000 | DONE wsp | em 16 16 |        |             |
5346:000 | DONE lbl | em 16 16 | 005fd1 |             | ummod_overflow                       
5347:000 | DONE cmt | em 16 16 |        |             |                 ; If an overflow condition occurs, put 0ffff
5348:000 | DONE cmt | em 16 16 |        |             |                 ; in both the quotient and remainder
5349:000 | DONE ins | em 16 16 | 005fd1 | a6 22       |                 ldx.d 000022         restore DSP
5350:000 | DONE ins | em 16 16 | 005fd3 | a0 ff ff    |                 ldy.# 0ffff          
5351:000 | DONE ins | em 16 16 | 005fd6 | 94 00       |                 sty.dx 00            
5352:000 | DONE ins | em 16 16 | 005fd8 | 80 08       |                 bra 005fe2           go to end to enable native coding
5353:000 | DONE wsp | em 16 16 |        |             |
5354:000 | DONE lbl | em 16 16 | 005fda |             | ummod_complete                       
5355:000 | DONE ins | em 16 16 | 005fda | a6 22       |                 ldx.d 000022         restore DSP
5356:000 | DONE ins | em 16 16 | 005fdc | a4 2c       |                 ldy.d 00002c         quotient is TOS
5357:000 | DONE ins | em 16 16 | 005fde | a5 2a       |                 lda.d 00002a         remainder is NOS
5358:000 | DONE ins | em 16 16 | 005fe0 | 95 00       |                 sta.dx 00            
5359:000 | DONE wsp | em 16 16 |        |             |
5360:000 | DONE lbl | em 16 16 | 005fe2 |             | z_ummod                              
5360:001 | DONE ins | em 16 16 | 005fe2 | 60          |                 rts                  
5361:000 | DONE wsp | em 16 16 |        |             |
5362:000 | DONE wsp | em 16 16 |        |             |
5363:000 | DONE cmt | em 16 16 |        |             | ; -------------------------------------------------------------------
5364:000 | DONE cmt | em 16 16 |        |             | ; UNLOOP ( -- ; R: n n n -- ) X bytes / X cycles
5365:000 | DONE cmt | em 16 16 |        |             | ; Drop loop control stuff from Return Stack.
5366:000 | DONE cmt | em 16 16 |        |             | ; TODO make this faster
5367:000 | DONE lbl | em 16 16 | 005fe3 |             | xt_unloop                            
5368:000 | DONE cmt | em 16 16 |        |             |                 ; drop fudge number (limit/start) from DO/?DO off the Return
5369:000 | DONE cmt | em 16 16 |        |             |                 ; Stack
5370:000 | DONE ins | em 16 16 | 005fe3 | 68          |                 pla                  
5371:000 | DONE ins | em 16 16 | 005fe4 | 68          |                 pla                  
5372:000 | DONE wsp | em 16 16 |        |             |
5373:000 | DONE cmt | em 16 16 |        |             |                 ; Drop the LEAVE address that was below them as well
5374:000 | DONE ins | em 16 16 | 005fe5 | 68          |                 pla                  
5375:000 | DONE wsp | em 16 16 |        |             |
5376:000 | DONE lbl | em 16 16 | 005fe6 |             | z_unloop                             
5376:001 | DONE ins | em 16 16 | 005fe6 | 60          |                 rts                  
5377:000 | DONE wsp | em 16 16 |        |             |
5378:000 | DONE wsp | em 16 16 |        |             |
5379:000 | DONE cmt | em 16 16 |        |             | ; -------------------------------------------------------------------
5380:000 | DONE cmt | em 16 16 |        |             | ; UNUSED ( -- u ) 11 bytes / X cycles
5381:000 | DONE cmt | em 16 16 |        |             | ; Return amount of memory available for the Dictionary. Does not exclude the
5382:000 | DONE cmt | em 16 16 |        |             | ; space for PAD.
5383:000 | DONE lbl | em 16 16 | 005fe7 |             | xt_unused                            
5384:000 | DONE dir | em 16 16 |        |             |         .!a16                        
5385:000 | DONE ins | em 16 16 | 005fe7 | a9 ff 4f    |                 lda.# 004fff         
5386:000 | DONE ins | em 16 16 | 005fea | 38          |                 sec                  
5387:000 | DONE ins | em 16 16 | 005feb | e5 00       |                 sbc.d 000000         current compile pointer
5388:000 | DONE wsp | em 16 16 |        |             |
5389:000 | DONE ins | em 16 16 | 005fed | ca          |                 dex                  
5390:000 | DONE ins | em 16 16 | 005fee | ca          |                 dex                  
5391:000 | DONE ins | em 16 16 | 005fef | 94 00       |                 sty.dx 00            
5392:000 | DONE wsp | em 16 16 |        |             |
5393:000 | DONE ins | em 16 16 | 005ff1 | a8          |                 tay                  
5394:000 | DONE wsp | em 16 16 |        |             |
5395:000 | DONE lbl | em 16 16 | 005ff2 |             | z_unused                             
5395:001 | DONE ins | em 16 16 | 005ff2 | 60          |                 rts                  
5396:000 | DONE wsp | em 16 16 |        |             |
5397:000 | DONE wsp | em 16 16 |        |             |
5398:000 | DONE cmt | em 16 16 |        |             | ; -------------------------------------------------------------------
5399:000 | DONE cmt | em 16 16 |        |             | ; VALUE ( n "name" -- ) X bytes / X cycles
5400:000 | DONE cmt | em 16 16 |        |             | ; Associate a name with a value (like a constant) that can be changed (like
5401:000 | DONE cmt | em 16 16 |        |             | ; a variable) with TO. We use the routines as CONSTANT, see there.
5402:000 | DONE wsp | em 16 16 |        |             |
5403:000 | DONE wsp | em 16 16 |        |             |
5404:000 | DONE cmt | em 16 16 |        |             | ; -------------------------------------------------------------------
5405:000 | DONE cmt | em 16 16 |        |             | ; VARIABLE ( "name" -- ) X bytes / X cycles
5406:000 | DONE cmt | em 16 16 |        |             | ; Define a word that returns the address for a variable. There are various Forth
5407:000 | DONE cmt | em 16 16 |        |             | ; definitions for this word, such as  CREATE 1 CELLS ALLOT  or CREATE 0 ,
5408:000 | DONE cmt | em 16 16 |        |             | ; We use a variant of the second one so the variable is initialized to zero
5409:000 | DONE lbl | em 16 16 | 005ff3 |             | xt_variable                          
5410:000 | DONE cmt | em 16 16 |        |             |                 ; We let CREATE do the heavy lifting
5411:000 | DONE ins | em 16 16 | 005ff3 | 20 56 57    |                 jsr 005756           
5412:000 | DONE wsp | em 16 16 |        |             |
5413:000 | DONE cmt | em 16 16 |        |             |                 ; There is no "stz.di cp" so we have to do this the
5414:000 | DONE cmt | em 16 16 |        |             |                 ; old way, which is still faster than a subroutine jump to ZERO
5415:000 | DONE ins | em 16 16 | 005ff6 | a9 00 00    |                 lda.# 0000           
5416:000 | DONE ins | em 16 16 | 005ff9 | 92 00       |                 sta.di 000000        STA (CP)
5417:000 | DONE wsp | em 16 16 |        |             |
5418:000 | DONE ins | em 16 16 | 005ffb | e6 00       |                 inc.d 000000         direct COMMA
5419:000 | DONE ins | em 16 16 | 005ffd | e6 00       |                 inc.d 000000         
5420:000 | DONE wsp | em 16 16 |        |             |
5421:000 | DONE ins | em 16 16 | 005fff | 20 2b 57    |                 jsr 00572b           adjust the z_ value by adding 2 bytes
5422:000 | DONE wsp | em 16 16 |        |             |
5423:000 | DONE lbl | em 16 16 | 006002 |             | z_variable                           
5423:001 | DONE ins | em 16 16 | 006002 | 60          |                 rts                  
5424:000 | DONE wsp | em 16 16 |        |             |
5425:000 | DONE wsp | em 16 16 |        |             |
5426:000 | DONE cmt | em 16 16 |        |             | ; -------------------------------------------------------------------
5427:000 | DONE cmt | em 16 16 |        |             | ; WORD ( char "name" -- c-addr ) X bytes / X cycles
5428:000 | DONE cmt | em 16 16 |        |             | ; Obsolete parsing word included for backwards compatibility. Do note use this,
5429:000 | DONE cmt | em 16 16 |        |             | ; use PARSE or PARSE-NAME. Skips leading delimiters and copies word to storage
5430:000 | DONE cmt | em 16 16 |        |             | ; area for a maximum size of 255 bytes. Returns the result as a counted string
5431:000 | DONE cmt | em 16 16 |        |             | ; (requires COUNT to convert to modern format), and inserts a space after the
5432:000 | DONE cmt | em 16 16 |        |             | ; string. See "Forth Programmer's Handbook" 3rd edition p.159 and
5433:000 | DONE cmt | em 16 16 |        |             | ; http://www.forth200x.org/documents/html/rationale.html#rat:core:PARSE
5434:000 | DONE cmt | em 16 16 |        |             | ; for discussions of why you shouldn't be using WORD anymore. Forth would be
5435:000 | DONE cmt | em 16 16 |        |             | ; PARSE DUP BUFFER1 C! OUTPUT 1+ SWAP MOVE BUFFER1
5436:000 | DONE cmt | em 16 16 |        |             | ; TODO What about the space?
5437:000 | DONE lbl | em 16 16 | 006003 |             | xt_word                              
5438:000 | DONE cmt | em 16 16 |        |             |                 ; The real work is done by PARSE
5439:000 | DONE ins | em 16 16 | 006003 | 20 a2 5c    |                 jsr 005ca2           ( addr u )
5440:000 | DONE wsp | em 16 16 |        |             |
5441:000 | DONE cmt | em 16 16 |        |             |                 ; Now we have to convert the modern address to the old form
5442:000 | DONE ins | em 16 16 | 006006 | 8c 80 02    |                 sty 000280           overwrite MSB
5443:000 | DONE wsp | em 16 16 |        |             |
5444:000 | DONE ins | em 16 16 | 006009 | ca          |                 dex                  
5445:000 | DONE ins | em 16 16 | 00600a | ca          |                 dex                  ( addr <?> u )
5446:000 | DONE ins | em 16 16 | 00600b | a9 80 02    |                 lda.# 000280         
5447:000 | DONE ins | em 16 16 | 00600e | 1a          |                 inc.a                
5448:000 | DONE ins | em 16 16 | 00600f | 95 00       |                 sta.dx 00            ( addr buffer1+1 u )
5449:000 | DONE wsp | em 16 16 |        |             |
5450:000 | DONE ins | em 16 16 | 006011 | 20 72 5b    |                 jsr 005b72           
5451:000 | DONE wsp | em 16 16 |        |             |
5452:000 | DONE ins | em 16 16 | 006014 | ca          |                 dex                  
5453:000 | DONE ins | em 16 16 | 006015 | ca          |                 dex                  
5454:000 | DONE ins | em 16 16 | 006016 | 94 00       |                 sty.dx 00            
5455:000 | DONE wsp | em 16 16 |        |             |
5456:000 | DONE ins | em 16 16 | 006018 | a0 80 02    |                 ldy.# 000280         
5457:000 | DONE wsp | em 16 16 |        |             |
5458:000 | DONE lbl | em 16 16 | 00601b |             | z_word                               
5458:001 | DONE ins | em 16 16 | 00601b | 60          |                 rts                  
5459:000 | DONE wsp | em 16 16 |        |             |
5460:000 | DONE wsp | em 16 16 |        |             |
5461:000 | DONE cmt | em 16 16 |        |             | ; -------------------------------------------------------------------
5462:000 | DONE cmt | em 16 16 |        |             | ; WORDS&SIZES ( -- ) X bytes / X cycles
5463:000 | DONE cmt | em 16 16 |        |             | ; Prints all words in the dictionary with the sizes of their code as returned by
5464:000 | DONE cmt | em 16 16 |        |             | ; WORDSIZE. Used to test different optimizations of the compiling routines,
5465:000 | DONE cmt | em 16 16 |        |             | ; specific to Liara Forth. Uses tmp3
5466:000 | DONE lbl | em 16 16 | 00601c |             | xt_wordsnsizes                       
5467:000 | DONE dir | em 16 16 |        |             |         .!a16                        
5468:000 | DONE ins | em 16 16 | 00601c | a9 ff ff    |                 lda.# 0ffff          
5469:000 | DONE ins | em 16 16 | 00601f | 85 20       |                 sta.d 000020         set flag that we want sizes, too
5470:000 | DONE wsp | em 16 16 |        |             |
5471:000 | DONE cmt | em 16 16 |        |             |                 ; continue with WORDS
5472:000 | DONE ins | em 16 16 | 006021 | 80 02       |                 bra 006025           
5473:000 | DONE wsp | em 16 16 |        |             |
5474:000 | DONE cmt | em 16 16 |        |             | ; -------------------------------------------------------------------
5475:000 | DONE cmt | em 16 16 |        |             | ; WORDS ( -- ) X bytes / X cycles
5476:000 | DONE cmt | em 16 16 |        |             | ; Print list of all Forth words available. This only really makes sense in an
5477:000 | DONE cmt | em 16 16 |        |             | ; interactive setting, so we don't have to worry about speed. WORDS&SIZES falls
5478:000 | DONE cmt | em 16 16 |        |             | ; through to here. Uses tmp3. Both WORDS and WORDS&SIZES might be better off as
5479:000 | DONE cmt | em 16 16 |        |             | ; high-level Forth words, but these routines are left over from early testing
5480:000 | DONE lbl | em 16 16 | 006023 |             | xt_words                             
5481:000 | DONE ins | em 16 16 | 006023 | 64 20       |                 stz.d 000020         store flag that we don't want to print sizes
5482:000 | DONE wsp | em 16 16 |        |             |
5483:000 | DONE lbl | em 16 16 | 006025 |             | words_common                         
5484:000 | DONE cmt | em 16 16 |        |             |                 ; common routine for WORDS and WORDS&SIZES
5485:000 | DONE ins | em 16 16 | 006025 | 20 4f 57    |                 jsr 00574f           start on next line, this is a style choice
5486:000 | DONE wsp | em 16 16 |        |             |
5487:000 | DONE ins | em 16 16 | 006028 | a5 02       |                 lda.d 000002         nt of first entry in Dictionary (last added)
5488:000 | DONE ins | em 16 16 | 00602a | 48          |                 pha                  
5489:000 | DONE wsp | em 16 16 |        |             |
5490:000 | DONE ins | em 16 16 | 00602b | ca          |                 dex                  create room on TOS
5491:000 | DONE ins | em 16 16 | 00602c | ca          |                 dex                  
5492:000 | DONE ins | em 16 16 | 00602d | 94 00       |                 sty.dx 00            
5493:000 | DONE wsp | em 16 16 |        |             |
5494:000 | DONE lbl | em 16 16 | 00602f |             | words_loop                           
5495:000 | DONE ins | em 16 16 | 00602f | a8          |                 tay                  ( nt )
5496:000 | DONE ins | em 16 16 | 006030 | 20 8f 5b    |                 jsr 005b8f           ( nt -- addr u )
5497:000 | DONE ins | em 16 16 | 006033 | 20 ec 5e    |                 jsr 005eec           
5498:000 | DONE ins | em 16 16 | 006036 | 20 a4 5e    |                 jsr 005ea4           
5499:000 | DONE wsp | em 16 16 |        |             |
5500:000 | DONE cmt | em 16 16 |        |             |                 ; If the user wants sizes as well, print them
5501:000 | DONE ins | em 16 16 | 006039 | a5 20       |                 lda.d 000020         
5502:000 | DONE ins | em 16 16 | 00603b | f0 0f       |                 beq 00604c           
5503:000 | DONE wsp | em 16 16 |        |             |
5504:000 | DONE cmt | em 16 16 |        |             |                 ; For the moment, just print the size in bytes after the word's
5505:000 | DONE cmt | em 16 16 |        |             |                 ; name string. We can decide if we want to get all fancy later
5506:000 | DONE ins | em 16 16 | 00603d | ca          |                 dex                  
5507:000 | DONE ins | em 16 16 | 00603e | ca          |                 dex                  
5508:000 | DONE ins | em 16 16 | 00603f | 94 00       |                 sty.dx 00            
5509:000 | DONE wsp | em 16 16 |        |             |
5510:000 | DONE ins | em 16 16 | 006041 | 7a          |                 ply                  get nt back again
5511:000 | DONE ins | em 16 16 | 006042 | 5a          |                 phy                  
5512:000 | DONE ins | em 16 16 | 006043 | 20 60 60    |                 jsr 006060           ( u )
5513:000 | DONE ins | em 16 16 | 006046 | 20 da 51    |                 jsr 0051da           
5514:000 | DONE ins | em 16 16 | 006049 | 20 a4 5e    |                 jsr 005ea4           
5515:000 | DONE wsp | em 16 16 |        |             |
5516:000 | DONE lbl | em 16 16 | 00604c |             | words_nosizes                        
5517:000 | DONE ins | em 16 16 | 00604c | 68          |                 pla                  get back first entry in Dictionary
5518:000 | DONE wsp | em 16 16 |        |             |
5519:000 | DONE cmt | em 16 16 |        |             |                 ; The next nt is two bytes below the nt of the current one in
5520:000 | DONE cmt | em 16 16 |        |             |                 ; the Dictionary header
5521:000 | DONE ins | em 16 16 | 00604d | 1a          |                 inc.a                
5522:000 | DONE ins | em 16 16 | 00604e | 1a          |                 inc.a                
5523:000 | DONE wsp | em 16 16 |        |             |
5524:000 | DONE ins | em 16 16 | 00604f | ca          |                 dex                  
5525:000 | DONE ins | em 16 16 | 006050 | ca          |                 dex                  
5526:000 | DONE ins | em 16 16 | 006051 | 94 00       |                 sty.dx 00            
5527:000 | DONE wsp | em 16 16 |        |             |
5528:000 | DONE ins | em 16 16 | 006053 | a8          |                 tay                  
5529:000 | DONE ins | em 16 16 | 006054 | b9 00 00    |                 lda.y 0000           LDA $0000,Y
5530:000 | DONE ins | em 16 16 | 006057 | 48          |                 pha                  
5531:000 | DONE ins | em 16 16 | 006058 | d0 d5       |                 bne 00602f           zero entry signals end of Dictionary
5532:000 | DONE wsp | em 16 16 |        |             |
5533:000 | DONE cmt | em 16 16 |        |             |                 ; all done, clean up
5534:000 | DONE ins | em 16 16 | 00605a | 68          |                 pla                  balance MPU stack, value discarded
5535:000 | DONE wsp | em 16 16 |        |             |
5536:000 | DONE ins | em 16 16 | 00605b | b4 00       |                 ldy.dx 00            
5537:000 | DONE ins | em 16 16 | 00605d | e8          |                 inx                  
5538:000 | DONE ins | em 16 16 | 00605e | e8          |                 inx                  
5539:000 | DONE wsp | em 16 16 |        |             |
5540:000 | DONE lbl | em 16 16 | 00605f |             | z_words                              
5541:000 | DONE lbl | em 16 16 | 00605f |             | z_wordsnsizes                        
5541:001 | DONE ins | em 16 16 | 00605f | 60          |                 rts                  
5542:000 | DONE wsp | em 16 16 |        |             |
5543:000 | DONE cmt | em 16 16 |        |             | ; -------------------------------------------------------------------
5544:000 | DONE cmt | em 16 16 |        |             | ; WORDSIZE ( nt -- u ) X bytes / X cycles
5545:000 | DONE cmt | em 16 16 |        |             | ; Given an word's name token (nt), return the size of the word's payload (CFA
5546:000 | DONE cmt | em 16 16 |        |             | ; plus PFA) in bytes. Does not count the final RTS. Specific to Liara Forth.
5547:000 | DONE cmt | em 16 16 |        |             | ; Uses tmp2, note WORDS and WORDS&SIZES use tmp3
5548:000 | DONE cmt | em 16 16 |        |             | ; TODO rewrite so it takes xt and not nt
5549:000 | DONE lbl | em 16 16 | 006060 |             | xt_wordsize                          
5550:000 | DONE cmt | em 16 16 |        |             |                 ; We get the beginning address of the code from the word's
5551:000 | DONE cmt | em 16 16 |        |             |                 ; header entry for the execution token (xt, 4 bytes down) and
5552:000 | DONE cmt | em 16 16 |        |             |                 ; the pointer to the end of the code (z_word, six bytes down).
5553:000 | DONE ins | em 16 16 | 006060 | c8          |                 iny                  
5554:000 | DONE ins | em 16 16 | 006061 | c8          |                 iny                  
5555:000 | DONE ins | em 16 16 | 006062 | c8          |                 iny                  
5556:000 | DONE ins | em 16 16 | 006063 | c8          |                 iny                  nt+4, location of xt
5557:000 | DONE ins | em 16 16 | 006064 | b9 00 00    |                 lda.y 0000           get xt
5558:000 | DONE ins | em 16 16 | 006067 | 85 1e       |                 sta.d 00001e         
5559:000 | DONE wsp | em 16 16 |        |             |
5560:000 | DONE ins | em 16 16 | 006069 | c8          |                 iny                  
5561:000 | DONE ins | em 16 16 | 00606a | c8          |                 iny                  nt+6, location of z_word
5562:000 | DONE ins | em 16 16 | 00606b | b9 00 00    |                 lda.y 0000           
5563:000 | DONE wsp | em 16 16 |        |             |
5564:000 | DONE ins | em 16 16 | 00606e | 38          |                 sec                  (z_word - xt_word)
5565:000 | DONE ins | em 16 16 | 00606f | e5 1e       |                 sbc.d 00001e         
5566:000 | DONE ins | em 16 16 | 006071 | a8          |                 tay                  
5567:000 | DONE wsp | em 16 16 |        |             |
5568:000 | DONE lbl | em 16 16 | 006072 |             | z_wordsize                           
5568:001 | DONE ins | em 16 16 | 006072 | 60          |                 rts                  
5569:000 | DONE wsp | em 16 16 |        |             |
5570:000 | DONE wsp | em 16 16 |        |             |
5571:000 | DONE cmt | em 16 16 |        |             | ; -------------------------------------------------------------------
5572:000 | DONE cmt | em 16 16 |        |             | ; XOR ( n m -- n ) 6 bytes / X cycles
5573:000 | DONE cmt | em 16 16 |        |             | ; Logical XOR
5574:000 | DONE lbl | em 16 16 | 006073 |             | xt_xor                               
5575:000 | DONE ins | em 16 16 | 006073 | 98          |                 tya                  
5576:000 | DONE ins | em 16 16 | 006074 | 55 00       |                 eor.dx 00            
5577:000 | DONE ins | em 16 16 | 006076 | a8          |                 tay                  
5578:000 | DONE wsp | em 16 16 |        |             |
5579:000 | DONE ins | em 16 16 | 006077 | e8          |                 inx                  
5580:000 | DONE ins | em 16 16 | 006078 | e8          |                 inx                  
5581:000 | DONE wsp | em 16 16 |        |             |
5582:000 | DONE lbl | em 16 16 | 006079 |             | z_xor                                
5582:001 | DONE ins | em 16 16 | 006079 | 60          |                 rts                  
5583:000 | DONE wsp | em 16 16 |        |             |
5584:000 | DONE wsp | em 16 16 |        |             |
5585:000 | DONE cmt | em 16 16 |        |             | ; ===================================================================
5586:000 | DONE cmt | em 16 16 |        |             | ; MIDDLE INCLUDES
5587:000 | DONE wsp | em 16 16 |        |             |
5588:000 | DONE cmt | em 16 16 |        |             | ; Dictionary Headers for Liara Forth for the W65C265SXB
5588:001 | DONE cmt | em 16 16 |        |             | ; Scot W. Stevenson <scot.stevenson@gmail.com>
5588:002 | DONE cmt | em 16 16 |        |             | ; First version: 05. Dec 2016
5588:003 | DONE cmt | em 16 16 |        |             | ; This version: 12. Mar 2017
5588:004 | DONE wsp | em 16 16 |        |             |
5588:005 | DONE cmt | em 16 16 |        |             | ; Dictionary headers are kept separately from the code, which allows various
5588:006 | DONE cmt | em 16 16 |        |             | ; tricks in the code. We roughly follow the Gforth terminology: The Execution
5588:007 | DONE cmt | em 16 16 |        |             | ; Token (xt) is the address of the first byte of a word's code that can be,
5588:008 | DONE cmt | em 16 16 |        |             | ; well, executed; the Name Token (nt) is a pointer to the beginning of the
5588:009 | DONE cmt | em 16 16 |        |             | ; word's header in the Dictionary. There, the link to the next word in the
5588:010 | DONE cmt | em 16 16 |        |             | ; Dictionary is always one cell down from the current word's own nt. In the code
5588:011 | DONE cmt | em 16 16 |        |             | ; itself, we use "nt_<WORD>" ("header") for the nt and "xt_<WORD>" ("A" as the
5588:012 | DONE cmt | em 16 16 |        |             | ; beginning) for the xt.
5588:013 | DONE cmt | em 16 16 |        |             | ;
5588:014 | DONE cmt | em 16 16 |        |             | ; This gives us the following header structure:
5588:015 | DONE cmt | em 16 16 |        |             | ;
5588:016 | DONE cmt | em 16 16 |        |             | ;              8 bit     8 bit
5588:017 | DONE cmt | em 16 16 |        |             | ;               LSB       MSB
5588:018 | DONE cmt | em 16 16 |        |             | ; nt_word ->  +--------+--------+
5588:019 | DONE cmt | em 16 16 |        |             | ;             | Length | Status |
5588:020 | DONE cmt | em 16 16 |        |             | ;          +2 +--------+--------+
5588:021 | DONE cmt | em 16 16 |        |             | ;             | Next Header     | -> nt_next_word
5588:022 | DONE cmt | em 16 16 |        |             | ;          +4 +-----------------+
5588:023 | DONE cmt | em 16 16 |        |             | ;             | Start of Code   | -> xt_word
5588:024 | DONE cmt | em 16 16 |        |             | ;          +6 +-----------------+
5588:025 | DONE cmt | em 16 16 |        |             | ;             | End of Code     | -> z_word
5588:026 | DONE cmt | em 16 16 |        |             | ;          +8 +--------+--------+
5588:027 | DONE cmt | em 16 16 |        |             | ;             | Name   |        |
5588:028 | DONE cmt | em 16 16 |        |             | ;             +--------+--------+
5588:029 | DONE cmt | em 16 16 |        |             | ;             |        |        |
5588:030 | DONE cmt | em 16 16 |        |             | ;             +--------+--------+
5588:031 | DONE cmt | em 16 16 |        |             | ;             |        |  ...   | (name string does not end with a zero)
5588:032 | DONE cmt | em 16 16 |        |             | ;          +n +--------+--------+
5588:033 | DONE cmt | em 16 16 |        |             | ;
5588:034 | DONE cmt | em 16 16 |        |             | ; The Status Byte is created by adding the flags defined in
5588:035 | DONE cmt | em 16 16 |        |             | ; definitions.tasm:
5588:036 | DONE cmt | em 16 16 |        |             | ;
5588:037 | DONE cmt | em 16 16 |        |             | ;       CO - Compile Only
5588:038 | DONE cmt | em 16 16 |        |             | ;       IM - Immediate Word
5588:039 | DONE cmt | em 16 16 |        |             | ;       NC - Native Compile allowed (inline compile)
5588:040 | DONE cmt | em 16 16 |        |             | ;       FN - Force Native Compile (may not be called by JSR)
5588:041 | DONE wsp | em 16 16 |        |             |
5588:042 | DONE cmt | em 16 16 |        |             | ; Note there are currently five bits unused. The last word (top word in code)
5588:043 | DONE cmt | em 16 16 |        |             | ; is always BYE. It is marked as the last word by its value of 0000 in its Next
5588:044 | DONE cmt | em 16 16 |        |             | ; Header field. The words are sorted with the more common ones first (further
5588:045 | DONE cmt | em 16 16 |        |             | ; down in code) so they are found earlier.  Anythiing to do with output comes
5588:046 | DONE cmt | em 16 16 |        |             | ; later (further up) because things will always be slow if there is a human
5588:047 | DONE cmt | em 16 16 |        |             | ; involved.
5588:048 | DONE wsp | em 16 16 |        |             |
5588:049 | DONE lbl | em 16 16 | 00607a |             | nt_bye                               
5588:050 | DONE dir | em 16 16 | 00607a | (1 bytes)   |         .byte 03                     length of word string
5588:050 | DONE dir | em 16 16 |        |             |                 03                       --  .
5588:051 | DONE dir | em 16 16 | 00607b | (1 bytes)   |         .byte { NC }                 status byte
5588:051 | DONE dir | em 16 16 |        |             |                 01                       --  .
5588:052 | DONE dir | em 16 16 | 00607c | (2 bytes)   |         .word 0000                   next word in dictionary, 0000 signals end
5588:052 | DONE dir | em 16 16 |        |             |                 00 00                    --  . .
5588:053 | DONE dir | em 16 16 | 00607e | (2 bytes)   |         .word 0055f0                 start of code, the xt of this word
5588:053 | DONE dir | em 16 16 |        |             |                 f0 55                    --  . U
5588:054 | DONE dir | em 16 16 | 006080 | (2 bytes)   |         .word 0055f7                 end of code (points to RTS)
5588:054 | DONE dir | em 16 16 |        |             |                 f7 55                    --  . U
5588:055 | DONE dir | em 16 16 | 006082 | (3 bytes)   |         .byte 62, 79, 65             word name, always lower case
5588:055 | DONE dir | em 16 16 |        |             |                 62 79 65                 --  b y e
5588:056 | DONE wsp | em 16 16 |        |             |
5588:057 | DONE lbl | em 16 16 | 006085 |             | nt_cold                              
5588:058 | DONE dir | em 16 16 | 006085 | (2 bytes)   |         .byte 4, 00                  
5588:058 | DONE dir | em 16 16 |        |             |                 04 00                    --  . .
5588:059 | DONE dir | em 16 16 | 006087 | (6 bytes)   |         .word nt_bye, xt_cold, 0050f9 
5588:059 | DONE dir | em 16 16 |        |             |                 7a 60 64 50 f9 50        --  z ` d P . P
5588:060 | DONE dir | em 16 16 | 00608d | (4 bytes)   |         .byte 63, 6f, 6c, 64         
5588:060 | DONE dir | em 16 16 |        |             |                 63 6f 6c 64              --  c o l d
5588:061 | DONE wsp | em 16 16 |        |             |
5588:062 | DONE lbl | em 16 16 | 006091 |             | nt_word                              
5588:063 | DONE dir | em 16 16 | 006091 | (2 bytes)   |         .byte 4, { NC }              
5588:063 | DONE dir | em 16 16 |        |             |                 04 01                    --  . .
5588:064 | DONE dir | em 16 16 | 006093 | (6 bytes)   |         .word nt_cold, xt_word, 00601b 
5588:064 | DONE dir | em 16 16 |        |             |                 85 60 03 60 1b 60        --  . ` . ` . `
5588:065 | DONE dir | em 16 16 | 006099 | (4 bytes)   |         .byte 77, 6f, 72, 64         
5588:065 | DONE dir | em 16 16 |        |             |                 77 6f 72 64              --  w o r d
5588:066 | DONE wsp | em 16 16 |        |             |
5588:067 | DONE lbl | em 16 16 | 00609d |             | nt_find                              
5588:068 | DONE dir | em 16 16 | 00609d | (2 bytes)   |         .byte 4, { NC }              
5588:068 | DONE dir | em 16 16 |        |             |                 04 01                    --  . .
5588:069 | DONE dir | em 16 16 | 00609f | (6 bytes)   |         .word nt_word, xt_find, 00599a 
5588:069 | DONE dir | em 16 16 |        |             |                 91 60 6a 59 9a 59        --  . ` j Y . Y
5588:070 | DONE dir | em 16 16 | 0060a5 | (4 bytes)   |         .byte 66, 69, 6e, 64         
5588:070 | DONE dir | em 16 16 |        |             |                 66 69 6e 64              --  f i n d
5588:071 | DONE wsp | em 16 16 |        |             |
5588:072 | DONE lbl | em 16 16 | 0060a9 |             | nt_aligned                           
5588:073 | DONE dir | em 16 16 | 0060a9 | (2 bytes)   |         .byte 7, { NC }              
5588:073 | DONE dir | em 16 16 |        |             |                 07 01                    --  . .
5588:074 | DONE dir | em 16 16 | 0060ab | (6 bytes)   |         .word nt_find, xt_aligned, 00555b 
5588:074 | DONE dir | em 16 16 |        |             |                 9d 60 5a 55 5b 55        --  . ` Z U [ U
5588:075 | DONE dir | em 16 16 | 0060b1 | (7 bytes)   |         .byte 61, 6c, 69, 67, 6e, 65, 64 
5588:075 | DONE dir | em 16 16 |        |             |                 61 6c 69 67 6e 65 64     --  a l i g n e d
5588:076 | DONE wsp | em 16 16 |        |             |
5588:077 | DONE lbl | em 16 16 | 0060b8 |             | nt_align                             
5588:078 | DONE dir | em 16 16 | 0060b8 | (2 bytes)   |         .byte 5, { NC }              
5588:078 | DONE dir | em 16 16 |        |             |                 05 01                    --  . .
5588:079 | DONE dir | em 16 16 | 0060ba | (6 bytes)   |         .word nt_aligned, xt_align, 005559 
5588:079 | DONE dir | em 16 16 |        |             |                 a9 60 58 55 59 55        --  . ` X U Y U
5588:080 | DONE dir | em 16 16 | 0060c0 | (5 bytes)   |         .byte 61, 6c, 69, 67, 6e     
5588:080 | DONE dir | em 16 16 |        |             |                 61 6c 69 67 6e           --  a l i g n
5588:081 | DONE wsp | em 16 16 |        |             |
5588:082 | DONE lbl | em 16 16 | 0060c5 |             | nt_wordsnsizes                       
5588:083 | DONE dir | em 16 16 | 0060c5 | (2 bytes)   |         .byte 0b, { NC }             
5588:083 | DONE dir | em 16 16 |        |             |                 0b 01                    --   .
5588:084 | DONE dir | em 16 16 | 0060c7 | (6 bytes)   |         .word nt_align, xt_wordsnsizes, 00605f 
5588:084 | DONE dir | em 16 16 |        |             |                 b8 60 1c 60 5f 60        --  . ` . ` _ `
5588:085 | DONE dir | em 16 16 | 0060cd | (11 bytes)  |         .byte 77, 6f, 72, 64, 73, 26, 73, 69, 7a, 65, 73 
5588:085 | DONE dir | em 16 16 |        |             |                 77 6f 72 64 73 26 73 69  --  w o r d s & s i
5588:085 | DONE dir | em 16 16 |        |             |                 7a 65 73                 --  z e s
5588:086 | DONE wsp | em 16 16 |        |             |
5588:087 | DONE lbl | em 16 16 | 0060d8 |             | nt_words                             
5588:088 | DONE dir | em 16 16 | 0060d8 | (2 bytes)   |         .byte 5, { NC }              
5588:088 | DONE dir | em 16 16 |        |             |                 05 01                    --  . .
5588:089 | DONE dir | em 16 16 | 0060da | (6 bytes)   |         .word nt_wordsnsizes, xt_words, 00605f 
5588:089 | DONE dir | em 16 16 |        |             |                 c5 60 23 60 5f 60        --  . ` # ` _ `
5588:090 | DONE dir | em 16 16 | 0060e0 | (5 bytes)   |         .byte 77, 6f, 72, 64, 73     
5588:090 | DONE dir | em 16 16 |        |             |                 77 6f 72 64 73           --  w o r d s
5588:091 | DONE wsp | em 16 16 |        |             |
5588:092 | DONE lbl | em 16 16 | 0060e5 |             | nt_dump                              
5588:093 | DONE dir | em 16 16 | 0060e5 | (2 bytes)   |         .byte 4, { NC }              
5588:093 | DONE dir | em 16 16 |        |             |                 04 01                    --  . .
5588:094 | DONE dir | em 16 16 | 0060e7 | (6 bytes)   |         .word nt_words, xt_dump, 0058fe 
5588:094 | DONE dir | em 16 16 |        |             |                 d8 60 e1 58 fe 58        --  . ` . X . X
5588:095 | DONE dir | em 16 16 | 0060ed | (4 bytes)   |         .byte 64, 75, 6d, 70         
5588:095 | DONE dir | em 16 16 |        |             |                 64 75 6d 70              --  d u m p
5588:096 | DONE wsp | em 16 16 |        |             |
5588:097 | DONE lbl | em 16 16 | 0060f1 |             | nt_unloop                            
5588:098 | DONE dir | em 16 16 | 0060f1 | (2 bytes)   |         .byte 6, { NC + CO }         
5588:098 | DONE dir | em 16 16 |        |             |                 06 05                    --  . .
5588:099 | DONE dir | em 16 16 | 0060f3 | (6 bytes)   |         .word nt_dump, xt_unloop, 005fe6 
5588:099 | DONE dir | em 16 16 |        |             |                 e5 60 e3 5f e6 5f        --  . ` . _ . _
5588:100 | DONE dir | em 16 16 | 0060f9 | (6 bytes)   |         .byte 75, 6e, 6c, 6f, 6f, 70 
5588:100 | DONE dir | em 16 16 |        |             |                 75 6e 6c 6f 6f 70        --  u n l o o p
5588:101 | DONE wsp | em 16 16 |        |             |
5588:102 | DONE lbl | em 16 16 | 0060ff |             | nt_pploop                            
5588:103 | DONE dir | em 16 16 | 0060ff | (2 bytes)   |         .byte 7, { NC + CO }         
5588:103 | DONE dir | em 16 16 |        |             |                 07 05                    --  . .
5588:104 | DONE dir | em 16 16 | 006101 | (6 bytes)   |         .word nt_unloop, xt_pploop, 0052ed 
5588:104 | DONE dir | em 16 16 |        |             |                 f1 60 df 52 ed 52        --  . ` . R . R
5588:105 | DONE dir | em 16 16 | 006107 | (7 bytes)   |         .byte 28, 2b, 6c, 6f, 6f, 70, 29 
5588:105 | DONE dir | em 16 16 |        |             |                 28 2b 6c 6f 6f 70 29     --  ( + l o o p )
5588:106 | DONE wsp | em 16 16 |        |             |
5588:107 | DONE lbl | em 16 16 | 00610e |             | nt_ploop                             
5588:108 | DONE dir | em 16 16 | 00610e | (2 bytes)   |         .byte 5, { IM + CO }         
5588:108 | DONE dir | em 16 16 |        |             |                 05 06                    --  . .
5588:109 | DONE dir | em 16 16 | 006110 | (6 bytes)   |         .word nt_pploop, xt_ploop, 005359 
5588:109 | DONE dir | em 16 16 |        |             |                 ff 60 38 53 59 53        --  . ` 8 S Y S
5588:110 | DONE dir | em 16 16 | 006116 | (5 bytes)   |         .byte 2b, 6c, 6f, 6f, 70     
5588:110 | DONE dir | em 16 16 |        |             |                 2b 6c 6f 6f 70           --  + l o o p
5588:111 | DONE wsp | em 16 16 |        |             |
5588:112 | DONE lbl | em 16 16 | 00611b |             | nt_loop                              
5588:113 | DONE dir | em 16 16 | 00611b | (2 bytes)   |         .byte 4, { IM + CO }         
5588:113 | DONE dir | em 16 16 |        |             |                 04 06                    --  . .
5588:114 | DONE dir | em 16 16 | 00611d | (6 bytes)   |         .word nt_ploop, xt_loop, 005359 
5588:114 | DONE dir | em 16 16 |        |             |                 0e 61 32 53 59 53        --  . a 2 S Y S
5588:115 | DONE dir | em 16 16 | 006123 | (4 bytes)   |         .byte 6c, 6f, 6f, 70         
5588:115 | DONE dir | em 16 16 |        |             |                 6c 6f 6f 70              --  l o o p
5588:116 | DONE wsp | em 16 16 |        |             |
5588:117 | DONE lbl | em 16 16 | 006127 |             | nt_i                                 
5588:118 | DONE dir | em 16 16 | 006127 | (2 bytes)   |         .byte 1, { NC + CO }         
5588:118 | DONE dir | em 16 16 |        |             |                 01 05                    --  . .
5588:119 | DONE dir | em 16 16 | 006129 | (6 bytes)   |         .word nt_loop, xt_i, 005a60  
5588:119 | DONE dir | em 16 16 |        |             |                 1b 61 56 5a 60 5a        --  . a V Z ` Z
5588:120 | DONE dir | em 16 16 | 00612f | (1 bytes)   |         .byte 69                     
5588:120 | DONE dir | em 16 16 |        |             |                 69                       --  i
5588:121 | DONE wsp | em 16 16 |        |             |
5588:122 | DONE lbl | em 16 16 | 006130 |             | nt_pqdo                              
5588:123 | DONE dir | em 16 16 | 006130 | (2 bytes)   |         .byte 5, { NC + CO }         
5588:123 | DONE dir | em 16 16 |        |             |                 05 05                    --  . .
5588:124 | DONE dir | em 16 16 | 006132 | (6 bytes)   |         .word nt_i, xt_pqdo, 00530d  
5588:124 | DONE dir | em 16 16 |        |             |                 27 61 ee 52 0d 53        --  ' a . R  S
5588:125 | DONE dir | em 16 16 | 006138 | (5 bytes)   |         .byte 28, 3f, 64, 6f, 29     
5588:125 | DONE dir | em 16 16 |        |             |                 28 3f 64 6f 29           --  ( ? d o )
5588:126 | DONE wsp | em 16 16 |        |             |
5588:127 | DONE lbl | em 16 16 | 00613d |             | nt_pdo                               
5588:128 | DONE dir | em 16 16 | 00613d | (2 bytes)   |         .byte 4, { NC + CO }         
5588:128 | DONE dir | em 16 16 |        |             |                 04 05                    --  . .
5588:129 | DONE dir | em 16 16 | 00613f | (6 bytes)   |         .word nt_pqdo, xt_pdo, 00530d 
5588:129 | DONE dir | em 16 16 |        |             |                 30 61 fb 52 0d 53        --  0 a . R  S
5588:130 | DONE dir | em 16 16 | 006145 | (4 bytes)   |         .byte 28, 64, 6f, 29         
5588:130 | DONE dir | em 16 16 |        |             |                 28 64 6f 29              --  ( d o )
5588:131 | DONE wsp | em 16 16 |        |             |
5588:132 | DONE lbl | em 16 16 | 006149 |             | nt_qdo                               
5588:133 | DONE dir | em 16 16 | 006149 | (2 bytes)   |         .byte 3, { IM + CO }         may not be Native Compile
5588:133 | DONE dir | em 16 16 |        |             |                 03 06                    --  . .
5588:134 | DONE dir | em 16 16 | 00614b | (6 bytes)   |         .word nt_pdo, xt_qdo, 0058b8 
5588:134 | DONE dir | em 16 16 |        |             |                 3d 61 79 58 b8 58        --  = a y X . X
5588:135 | DONE dir | em 16 16 | 006151 | (3 bytes)   |         .byte 3f, 64, 6f             
5588:135 | DONE dir | em 16 16 |        |             |                 3f 64 6f                 --  ? d o
5588:136 | DONE wsp | em 16 16 |        |             |
5588:137 | DONE lbl | em 16 16 | 006154 |             | nt_do                                
5588:138 | DONE dir | em 16 16 | 006154 | (2 bytes)   |         .byte 2, { IM + CO }         may not be Native Compile
5588:138 | DONE dir | em 16 16 |        |             |                 02 06                    --  . .
5588:139 | DONE dir | em 16 16 | 006156 | (6 bytes)   |         .word nt_qdo, xt_do, 0058b8  
5588:139 | DONE dir | em 16 16 |        |             |                 49 61 80 58 b8 58        --  I a . X . X
5588:140 | DONE dir | em 16 16 | 00615c | (2 bytes)   |         .byte 64, 6f                 
5588:140 | DONE dir | em 16 16 |        |             |                 64 6f                    --  d o
5588:141 | DONE wsp | em 16 16 |        |             |
5588:142 | DONE lbl | em 16 16 | 00615e |             | nt_marker                            
5588:143 | DONE dir | em 16 16 | 00615e | (2 bytes)   |         .byte 6, { IM + NC }         
5588:143 | DONE dir | em 16 16 |        |             |                 06 03                    --  . .
5588:144 | DONE dir | em 16 16 | 006160 | (6 bytes)   |         .word nt_do, xt_marker, 005b4b 
5588:144 | DONE dir | em 16 16 |        |             |                 54 61 22 5b 4b 5b        --  T a " [ K [
5588:145 | DONE dir | em 16 16 | 006166 | (6 bytes)   |         .byte 6d, 61, 72, 6b, 65, 72 
5588:145 | DONE dir | em 16 16 |        |             |                 6d 61 72 6b 65 72        --  m a r k e r
5588:146 | DONE wsp | em 16 16 |        |             |
5588:147 | DONE lbl | em 16 16 | 00616c |             | nt_wordsize                          
5588:148 | DONE dir | em 16 16 | 00616c | (2 bytes)   |         .byte 8, { NC }              
5588:148 | DONE dir | em 16 16 |        |             |                 08 01                    --  . .
5588:149 | DONE dir | em 16 16 | 00616e | (6 bytes)   |         .word nt_marker, xt_wordsize, 006072 
5588:149 | DONE dir | em 16 16 |        |             |                 5e 61 60 60 72 60        --  ^ a ` ` r `
5588:150 | DONE dir | em 16 16 | 006174 | (8 bytes)   |         .byte 77, 6f, 72, 64, 73, 69, 7a, 65 
5588:150 | DONE dir | em 16 16 |        |             |                 77 6f 72 64 73 69 7a 65  --  w o r d s i z e
5588:150 | DONE dir | em 16 16 |        |             |                                          -- 
5588:151 | DONE wsp | em 16 16 |        |             |
5588:152 | DONE lbl | em 16 16 | 00617c |             | nt_pick                              
5588:153 | DONE dir | em 16 16 | 00617c | (2 bytes)   |         .byte 4, { NC }              
5588:153 | DONE dir | em 16 16 |        |             |                 04 01                    --  . .
5588:154 | DONE dir | em 16 16 | 00617e | (6 bytes)   |         .word nt_wordsize, xt_pick, 005ce2 
5588:154 | DONE dir | em 16 16 |        |             |                 6c 61 d5 5c e2 5c        --  l a . \ . \
5588:155 | DONE dir | em 16 16 | 006184 | (4 bytes)   |         .byte 70, 69, 63, 6b         
5588:155 | DONE dir | em 16 16 |        |             |                 70 69 63 6b              --  p i c k
5588:156 | DONE wsp | em 16 16 |        |             |
5588:157 | DONE lbl | em 16 16 | 006188 |             | nt_bell                              
5588:158 | DONE dir | em 16 16 | 006188 | (2 bytes)   |         .byte 4, { NC }              
5588:158 | DONE dir | em 16 16 |        |             |                 04 01                    --  . .
5588:159 | DONE dir | em 16 16 | 00618a | (6 bytes)   |         .word nt_pick, xt_bell, 0055c2 
5588:159 | DONE dir | em 16 16 |        |             |                 7c 61 bc 55 c2 55        --  | a . U . U
5588:160 | DONE dir | em 16 16 | 006190 | (4 bytes)   |         .byte 62, 65, 6c, 6c         
5588:160 | DONE dir | em 16 16 |        |             |                 62 65 6c 6c              --  b e l l
5588:161 | DONE wsp | em 16 16 |        |             |
5588:162 | DONE lbl | em 16 16 | 006194 |             | nt_chars                             
5588:163 | DONE dir | em 16 16 | 006194 | (2 bytes)   |         .byte 5, { NC }              
5588:163 | DONE dir | em 16 16 |        |             |                 05 01                    --  . .
5588:164 | DONE dir | em 16 16 | 006196 | (6 bytes)   |         .word nt_bell, xt_chars, 00563d 
5588:164 | DONE dir | em 16 16 |        |             |                 88 61 3c 56 3d 56        --  . a < V = V
5588:165 | DONE dir | em 16 16 | 00619c | (5 bytes)   |         .byte 63, 68, 61, 72, 73     
5588:165 | DONE dir | em 16 16 |        |             |                 63 68 61 72 73           --  c h a r s
5588:166 | DONE wsp | em 16 16 |        |             |
5588:167 | DONE lbl | em 16 16 | 0061a1 |             | nt_cellplus                          
5588:168 | DONE dir | em 16 16 | 0061a1 | (2 bytes)   |         .byte 5, { NC }              
5588:168 | DONE dir | em 16 16 |        |             |                 05 01                    --  . .
5588:169 | DONE dir | em 16 16 | 0061a3 | (6 bytes)   |         .word nt_chars, xt_cellplus, 005623 
5588:169 | DONE dir | em 16 16 |        |             |                 94 61 21 56 23 56        --  . a ! V # V
5588:170 | DONE dir | em 16 16 | 0061a9 | (5 bytes)   |         .byte 63, 65, 6c, 6c, 2b     
5588:170 | DONE dir | em 16 16 |        |             |                 63 65 6c 6c 2b           --  c e l l +
5588:171 | DONE wsp | em 16 16 |        |             |
5588:172 | DONE lbl | em 16 16 | 0061ae |             | nt_charplus                          
5588:173 | DONE dir | em 16 16 | 0061ae | (2 bytes)   |         .byte 5, { NC }              uses code of 1+
5588:173 | DONE dir | em 16 16 |        |             |                 05 01                    --  . .
5588:174 | DONE dir | em 16 16 | 0061b0 | (6 bytes)   |         .word nt_cellplus, xt_one-plus, 0053f1 
5588:174 | DONE dir | em 16 16 |        |             |                 a1 61 f0 53 f1 53        --  . a . S . S
5588:175 | DONE dir | em 16 16 | 0061b6 | (5 bytes)   |         .byte 63, 68, 61, 72, 2b     
5588:175 | DONE dir | em 16 16 |        |             |                 63 68 61 72 2b           --  c h a r +
5588:176 | DONE wsp | em 16 16 |        |             |
5588:177 | DONE lbl | em 16 16 | 0061bb |             | nt_decimal                           
5588:178 | DONE dir | em 16 16 | 0061bb | (2 bytes)   |         .byte 7, { NC }              
5588:178 | DONE dir | em 16 16 |        |             |                 07 01                    --  . .
5588:179 | DONE dir | em 16 16 | 0061bd | (6 bytes)   |         .word nt_charplus, xt_decimal, 005855 
5588:179 | DONE dir | em 16 16 |        |             |                 ae 61 50 58 55 58        --  . a P X U X
5588:180 | DONE dir | em 16 16 | 0061c3 | (7 bytes)   |         .byte 64, 65, 63, 69, 6d, 61, 6c 
5588:180 | DONE dir | em 16 16 |        |             |                 64 65 63 69 6d 61 6c     --  d e c i m a l
5588:181 | DONE wsp | em 16 16 |        |             |
5588:182 | DONE lbl | em 16 16 | 0061ca |             | nt_hex                               
5588:183 | DONE dir | em 16 16 | 0061ca | (2 bytes)   |         .byte 3, { NC }              
5588:183 | DONE dir | em 16 16 |        |             |                 03 01                    --  . .
5588:184 | DONE dir | em 16 16 | 0061cc | (6 bytes)   |         .word nt_decimal, xt_hex, 005aa8 
5588:184 | DONE dir | em 16 16 |        |             |                 bb 61 a3 5a a8 5a        --  . a . Z . Z
5588:185 | DONE dir | em 16 16 | 0061d2 | (3 bytes)   |         .byte 68, 65, 78             
5588:185 | DONE dir | em 16 16 |        |             |                 68 65 78                 --  h e x
5588:186 | DONE wsp | em 16 16 |        |             |
5588:187 | DONE lbl | em 16 16 | 0061d5 |             | nt_unused                            
5588:188 | DONE dir | em 16 16 | 0061d5 | (2 bytes)   |         .byte 6, { NC }              
5588:188 | DONE dir | em 16 16 |        |             |                 06 01                    --  . .
5588:189 | DONE dir | em 16 16 | 0061d7 | (6 bytes)   |         .word nt_hex, xt_unused, 005ff2 
5588:189 | DONE dir | em 16 16 |        |             |                 ca 61 e7 5f f2 5f        --  . a . _ . _
5588:190 | DONE dir | em 16 16 | 0061dd | (6 bytes)   |         .byte 75, 6e, 75, 73, 65, 64 
5588:190 | DONE dir | em 16 16 |        |             |                 75 6e 75 73 65 64        --  u n u s e d
5588:191 | DONE wsp | em 16 16 |        |             |
5588:192 | DONE lbl | em 16 16 | 0061e3 |             | nt_page                              
5588:193 | DONE dir | em 16 16 | 0061e3 | (2 bytes)   |         .byte 4, { NC }              
5588:193 | DONE dir | em 16 16 |        |             |                 04 01                    --  . .
5588:194 | DONE dir | em 16 16 | 0061e5 | (6 bytes)   |         .word nt_unused, xt_page, 005c6d 
5588:194 | DONE dir | em 16 16 |        |             |                 d5 61 61 5c 6d 5c        --  . a a \ m \
5588:195 | DONE dir | em 16 16 | 0061eb | (4 bytes)   |         .byte 70, 61, 67, 65         
5588:195 | DONE dir | em 16 16 |        |             |                 70 61 67 65              --  p a g e
5588:196 | DONE wsp | em 16 16 |        |             |
5588:197 | DONE lbl | em 16 16 | 0061ef |             | nt_at-xy                             
5588:198 | DONE dir | em 16 16 | 0061ef | (2 bytes)   |         .byte 5, { NC }              
5588:198 | DONE dir | em 16 16 |        |             |                 05 01                    --  . .
5588:199 | DONE dir | em 16 16 | 0061f1 | (6 bytes)   |         .word nt_page, xt_at-xy, 0055b3 
5588:199 | DONE dir | em 16 16 |        |             |                 e3 61 8c 55 b3 55        --  . a . U . U
5588:200 | DONE dir | em 16 16 | 0061f7 | (5 bytes)   |         .byte 61, 74, 2d, 78, 79     
5588:200 | DONE dir | em 16 16 |        |             |                 61 74 2d 78 79           --  a t - x y
5588:201 | DONE wsp | em 16 16 |        |             |
5588:202 | DONE lbl | em 16 16 | 0061fc |             | nt_tworfetch                         
5588:203 | DONE dir | em 16 16 | 0061fc | (2 bytes)   |         .byte 3, 00                  not natively compiled (yet)
5588:203 | DONE dir | em 16 16 |        |             |                 03 00                    --  . .
5588:204 | DONE dir | em 16 16 | 0061fe | (6 bytes)   |         .word nt_at-xy, xt_tworfetch, 00544c 
5588:204 | DONE dir | em 16 16 |        |             |                 ef 61 3f 54 4c 54        --  . a ? T L T
5588:205 | DONE dir | em 16 16 | 006204 | (3 bytes)   |         .byte 32, 72, 40             
5588:205 | DONE dir | em 16 16 |        |             |                 32 72 40                 --  2 r @
5588:206 | DONE wsp | em 16 16 |        |             |
5588:207 | DONE lbl | em 16 16 | 006207 |             | nt_2variable                         
5588:208 | DONE dir | em 16 16 | 006207 | (2 bytes)   |         .byte 9, { NC }              
5588:208 | DONE dir | em 16 16 |        |             |                 09 01                    --  	 .
5588:209 | DONE dir | em 16 16 | 006209 | (6 bytes)   |         .word nt_tworfetch, xt_2variable, 005470 
5588:209 | DONE dir | em 16 16 |        |             |                 fc 61 5e 54 70 54        --  . a ^ T p T
5588:210 | DONE dir | em 16 16 | 00620f | (9 bytes)   |         .byte 32, 76, 61, 72, 69, 61, 62, 6c, 65 
5588:210 | DONE dir | em 16 16 |        |             |                 32 76 61 72 69 61 62 6c  --  2 v a r i a b l
5588:210 | DONE dir | em 16 16 |        |             |                 65                       --  e
5588:211 | DONE wsp | em 16 16 |        |             |
5588:212 | DONE lbl | em 16 16 | 006218 |             | nt_dabs                              
5588:213 | DONE dir | em 16 16 | 006218 | (2 bytes)   |         .byte 4, { NC }              
5588:213 | DONE dir | em 16 16 |        |             |                 04 01                    --  . .
5588:214 | DONE dir | em 16 16 | 00621a | (6 bytes)   |         .word nt_2variable, xt_dabs, 00584f 
5588:214 | DONE dir | em 16 16 |        |             |                 07 62 49 58 4f 58        --  . b I X O X
5588:215 | DONE dir | em 16 16 | 006220 | (4 bytes)   |         .byte 64, 61, 62, 73         
5588:215 | DONE dir | em 16 16 |        |             |                 64 61 62 73              --  d a b s
5588:216 | DONE wsp | em 16 16 |        |             |
5588:217 | DONE lbl | em 16 16 | 006224 |             | nt_dnegate                           
5588:218 | DONE dir | em 16 16 | 006224 | (2 bytes)   |         .byte 7, { NC }              
5588:218 | DONE dir | em 16 16 |        |             |                 07 01                    --  . .
5588:219 | DONE dir | em 16 16 | 006226 | (6 bytes)   |         .word nt_dabs, xt_dnegate, 005878 
5588:219 | DONE dir | em 16 16 |        |             |                 18 62 65 58 78 58        --  . b e X x X
5588:220 | DONE dir | em 16 16 | 00622c | (7 bytes)   |         .byte 64, 6e, 65, 67, 61, 74, 65 
5588:220 | DONE dir | em 16 16 |        |             |                 64 6e 65 67 61 74 65     --  d n e g a t e
5588:221 | DONE wsp | em 16 16 |        |             |
5588:222 | DONE lbl | em 16 16 | 006233 |             | nt_dtos                              
5588:223 | DONE dir | em 16 16 | 006233 | (2 bytes)   |         .byte 3, { NC }              
5588:223 | DONE dir | em 16 16 |        |             |                 03 01                    --  . .
5588:224 | DONE dir | em 16 16 | 006235 | (6 bytes)   |         .word nt_dnegate, xt_dtos, 005848 
5588:224 | DONE dir | em 16 16 |        |             |                 24 62 44 58 48 58        --  $ b D X H X
5588:225 | DONE dir | em 16 16 | 00623b | (3 bytes)   |         .byte 64, 3e, 73             
5588:225 | DONE dir | em 16 16 |        |             |                 64 3e 73                 --  d > s
5588:226 | DONE wsp | em 16 16 |        |             |
5588:227 | DONE lbl | em 16 16 | 00623e |             | nt_stod                              
5588:228 | DONE dir | em 16 16 | 00623e | (2 bytes)   |         .byte 3, { NC }              
5588:228 | DONE dir | em 16 16 |        |             |                 03 01                    --  . .
5588:229 | DONE dir | em 16 16 | 006240 | (6 bytes)   |         .word nt_dtos, xt_stod, 005dc4 
5588:229 | DONE dir | em 16 16 |        |             |                 33 62 b5 5d c4 5d        --  3 b . ] . ]
5588:230 | DONE dir | em 16 16 | 006246 | (3 bytes)   |         .byte 73, 3e, 64             
5588:230 | DONE dir | em 16 16 |        |             |                 73 3e 64                 --  s > d
5588:231 | DONE wsp | em 16 16 |        |             |
5588:232 | DONE lbl | em 16 16 | 006249 |             | nt_twofromr                          
5588:233 | DONE dir | em 16 16 | 006249 | (2 bytes)   |         .byte 3, { CO + NC }         NC is special case
5588:233 | DONE dir | em 16 16 |        |             |                 03 05                    --  . .
5588:234 | DONE dir | em 16 16 | 00624b | (6 bytes)   |         .word nt_stod, xt_twofromr, 00543e 
5588:234 | DONE dir | em 16 16 |        |             |                 3e 62 2e 54 3e 54        --  > b . T > T
5588:235 | DONE dir | em 16 16 | 006251 | (3 bytes)   |         .byte 32, 72, 3e             
5588:235 | DONE dir | em 16 16 |        |             |                 32 72 3e                 --  2 r >
5588:236 | DONE wsp | em 16 16 |        |             |
5588:237 | DONE lbl | em 16 16 | 006254 |             | nt_twotor                            
5588:238 | DONE dir | em 16 16 | 006254 | (2 bytes)   |         .byte 3, { CO + NC }         NC is special case
5588:238 | DONE dir | em 16 16 |        |             |                 03 05                    --  . .
5588:239 | DONE dir | em 16 16 | 006256 | (6 bytes)   |         .word nt_twofromr, xt_twotor, 00540e 
5588:239 | DONE dir | em 16 16 |        |             |                 49 62 fe 53 0e 54        --  I b . S . T
5588:240 | DONE dir | em 16 16 | 00625c | (3 bytes)   |         .byte 32, 3e, 72             
5588:240 | DONE dir | em 16 16 |        |             |                 32 3e 72                 --  2 > r
5588:241 | DONE wsp | em 16 16 |        |             |
5588:242 | DONE lbl | em 16 16 | 00625f |             | nt_dminus                            
5588:243 | DONE dir | em 16 16 | 00625f | (2 bytes)   |         .byte 2, { NC }              
5588:243 | DONE dir | em 16 16 |        |             |                 02 01                    --  . .
5588:244 | DONE dir | em 16 16 | 006261 | (6 bytes)   |         .word nt_twotor, xt_dminus, 005843 
5588:244 | DONE dir | em 16 16 |        |             |                 54 62 2f 58 43 58        --  T b / X C X
5588:245 | DONE dir | em 16 16 | 006267 | (2 bytes)   |         .byte 64, 2d                 
5588:245 | DONE dir | em 16 16 |        |             |                 64 2d                    --  d -
5588:246 | DONE wsp | em 16 16 |        |             |
5588:247 | DONE lbl | em 16 16 | 006269 |             | nt_dplus                             
5588:248 | DONE dir | em 16 16 | 006269 | (2 bytes)   |         .byte 2, { NC }              
5588:248 | DONE dir | em 16 16 |        |             |                 02 01                    --  . .
5588:249 | DONE dir | em 16 16 | 00626b | (6 bytes)   |         .word nt_dminus, xt_dplus, 00582e 
5588:249 | DONE dir | em 16 16 |        |             |                 5f 62 1d 58 2e 58        --  _ b . X . X
5588:250 | DONE dir | em 16 16 | 006271 | (2 bytes)   |         .byte 64, 2b                 
5588:250 | DONE dir | em 16 16 |        |             |                 64 2b                    --  d +
5588:251 | DONE wsp | em 16 16 |        |             |
5588:252 | DONE lbl | em 16 16 | 006273 |             | nt_fmmod                             
5588:253 | DONE dir | em 16 16 | 006273 | (2 bytes)   |         .byte 6, { NC }              
5588:253 | DONE dir | em 16 16 |        |             |                 06 01                    --  . .
5588:254 | DONE dir | em 16 16 | 006275 | (6 bytes)   |         .word nt_dplus, xt_fmmod, 005a45 
5588:254 | DONE dir | em 16 16 |        |             |                 69 62 f2 59 45 5a        --  i b . Y E Z
5588:255 | DONE dir | em 16 16 | 00627b | (6 bytes)   |         .byte 66, 6d, 2f, 6d, 6f, 64 
5588:255 | DONE dir | em 16 16 |        |             |                 66 6d 2f 6d 6f 64        --  f m / m o d
5588:256 | DONE wsp | em 16 16 |        |             |
5588:257 | DONE lbl | em 16 16 | 006281 |             | nt_smrem                             
5588:258 | DONE dir | em 16 16 | 006281 | (2 bytes)   |         .byte 6, { NC }              
5588:258 | DONE dir | em 16 16 |        |             |                 06 01                    --  . .
5588:259 | DONE dir | em 16 16 | 006283 | (6 bytes)   |         .word nt_fmmod, xt_smrem, 005e8f 
5588:259 | DONE dir | em 16 16 |        |             |                 73 62 36 5e 8f 5e        --  s b 6 ^ . ^
5588:260 | DONE dir | em 16 16 | 006289 | (6 bytes)   |         .byte 73, 6d, 2f, 72, 65, 6d 
5588:260 | DONE dir | em 16 16 |        |             |                 73 6d 2f 72 65 6d        --  s m / r e m
5588:261 | DONE wsp | em 16 16 |        |             |
5588:262 | DONE lbl | em 16 16 | 00628f |             | nt_udmod                             
5588:263 | DONE dir | em 16 16 | 00628f | (2 bytes)   |         .byte 6, { NC }              
5588:263 | DONE dir | em 16 16 |        |             |                 06 01                    --  . .
5588:264 | DONE dir | em 16 16 | 006291 | (6 bytes)   |         .word nt_smrem, xt_udmod, 005f32 
5588:264 | DONE dir | em 16 16 |        |             |                 81 62 17 5f 32 5f        --  . b . _ 2 _
5588:265 | DONE dir | em 16 16 | 006297 | (6 bytes)   |         .byte 75, 64, 2f, 6d, 6f, 64 
5588:265 | DONE dir | em 16 16 |        |             |                 75 64 2f 6d 6f 64        --  u d / m o d
5588:266 | DONE wsp | em 16 16 |        |             |
5588:267 | DONE lbl | em 16 16 | 00629d |             | nt_ummod                             
5588:268 | DONE dir | em 16 16 | 00629d | (2 bytes)   |         .byte 6, { NC }              
5588:268 | DONE dir | em 16 16 |        |             |                 06 01                    --  . .
5588:269 | DONE dir | em 16 16 | 00629f | (6 bytes)   |         .word nt_udmod, xt_ummod, 005fe2 
5588:269 | DONE dir | em 16 16 |        |             |                 8f 62 92 5f e2 5f        --  . b . _ . _
5588:270 | DONE dir | em 16 16 | 0062a5 | (6 bytes)   |         .byte 75, 6d, 2f, 6d, 6f, 64 
5588:270 | DONE dir | em 16 16 |        |             |                 75 6d 2f 6d 6f 64        --  u m / m o d
5588:271 | DONE wsp | em 16 16 |        |             |
5588:272 | DONE lbl | em 16 16 | 0062ab |             | nt_star                              
5588:273 | DONE dir | em 16 16 | 0062ab | (2 bytes)   |         .byte 1, { NC }              
5588:273 | DONE dir | em 16 16 |        |             |                 01 01                    --  . .
5588:274 | DONE dir | em 16 16 | 0062ad | (6 bytes)   |         .word nt_ummod, xt_star, 005ec2 
5588:274 | DONE dir | em 16 16 |        |             |                 9d 62 bb 5e c2 5e        --  . b . ^ . ^
5588:275 | DONE dir | em 16 16 | 0062b3 | (1 bytes)   |         .byte 2a                     
5588:275 | DONE dir | em 16 16 |        |             |                 2a                       --  *
5588:276 | DONE wsp | em 16 16 |        |             |
5588:277 | DONE lbl | em 16 16 | 0062b4 |             | nt_mstar                             
5588:278 | DONE dir | em 16 16 | 0062b4 | (2 bytes)   |         .byte 2, { NC }              
5588:278 | DONE dir | em 16 16 |        |             |                 02 01                    --  . .
5588:279 | DONE dir | em 16 16 | 0062b6 | (6 bytes)   |         .word nt_star, xt_mstar, 005b21 
5588:279 | DONE dir | em 16 16 |        |             |                 ab 62 02 5b 21 5b        --  . b . [ ! [
5588:280 | DONE dir | em 16 16 | 0062bc | (2 bytes)   |         .byte 6d, 2a                 
5588:280 | DONE dir | em 16 16 |        |             |                 6d 2a                    --  m *
5588:281 | DONE wsp | em 16 16 |        |             |
5588:282 | DONE lbl | em 16 16 | 0062be |             | nt_umstar                            
5588:283 | DONE dir | em 16 16 | 0062be | (2 bytes)   |         .byte 3, { NC }              
5588:283 | DONE dir | em 16 16 |        |             |                 03 01                    --  . .
5588:284 | DONE dir | em 16 16 | 0062c0 | (6 bytes)   |         .word nt_mstar, xt_umstar, 005f91 
5588:284 | DONE dir | em 16 16 |        |             |                 b4 62 33 5f 91 5f        --  . b 3 _ . _
5588:285 | DONE dir | em 16 16 | 0062c6 | (3 bytes)   |         .byte 75, 6d, 2a             
5588:285 | DONE dir | em 16 16 |        |             |                 75 6d 2a                 --  u m *
5588:286 | DONE wsp | em 16 16 |        |             |
5588:287 | DONE lbl | em 16 16 | 0062c9 |             | nt_cmoveup                           
5588:288 | DONE dir | em 16 16 | 0062c9 | (2 bytes)   |         .byte 6, { NC }              
5588:288 | DONE dir | em 16 16 |        |             |                 06 01                    --  . .
5588:289 | DONE dir | em 16 16 | 0062cb | (6 bytes)   |         .word nt_umstar, xt_cmoveup, 005679 
5588:289 | DONE dir | em 16 16 |        |             |                 be 62 61 56 79 56        --  . b a V y V
5588:290 | DONE dir | em 16 16 | 0062d1 | (6 bytes)   |         .byte 63, 6d, 6f, 76, 65, 3e 
5588:290 | DONE dir | em 16 16 |        |             |                 63 6d 6f 76 65 3e        --  c m o v e >
5588:291 | DONE wsp | em 16 16 |        |             |
5588:292 | DONE lbl | em 16 16 | 0062d7 |             | nt_cmove                             
5588:293 | DONE dir | em 16 16 | 0062d7 | (2 bytes)   |         .byte 5, { NC }              
5588:293 | DONE dir | em 16 16 |        |             |                 05 01                    --  . .
5588:294 | DONE dir | em 16 16 | 0062d9 | (6 bytes)   |         .word nt_cmoveup, xt_cmove, 005660 
5588:294 | DONE dir | em 16 16 |        |             |                 c9 62 3e 56 60 56        --  . b > V ` V
5588:295 | DONE dir | em 16 16 | 0062df | (5 bytes)   |         .byte 63, 6d, 6f, 76, 65     
5588:295 | DONE dir | em 16 16 |        |             |                 63 6d 6f 76 65           --  c m o v e
5588:296 | DONE wsp | em 16 16 |        |             |
5588:297 | DONE lbl | em 16 16 | 0062e4 |             | nt_count                             
5588:298 | DONE dir | em 16 16 | 0062e4 | (2 bytes)   |         .byte 5, { NC }              
5588:298 | DONE dir | em 16 16 |        |             |                 05 01                    --  . .
5588:299 | DONE dir | em 16 16 | 0062e6 | (6 bytes)   |         .word nt_cmove, xt_count, 00574e 
5588:299 | DONE dir | em 16 16 |        |             |                 d7 62 41 57 4e 57        --  . b A W N W
5588:300 | DONE dir | em 16 16 | 0062ec | (5 bytes)   |         .byte 63, 6f, 75, 6e, 74     
5588:300 | DONE dir | em 16 16 |        |             |                 63 6f 75 6e 74           --  c o u n t
5588:301 | DONE wsp | em 16 16 |        |             |
5588:302 | DONE lbl | em 16 16 | 0062f1 |             | nt_abortq                            
5588:303 | DONE dir | em 16 16 | 0062f1 | (2 bytes)   |         .byte 6, { CO + IM }         
5588:303 | DONE dir | em 16 16 |        |             |                 06 06                    --  . .
5588:304 | DONE dir | em 16 16 | 0062f3 | (6 bytes)   |         .word nt_count, xt_abortq, 0054a9 
5588:304 | DONE dir | em 16 16 |        |             |                 e4 62 8d 54 a9 54        --  . b . T . T
5588:305 | DONE dir | em 16 16 | 0062f9 | (6 bytes)   |         .byte 61, 62, 6f, 72, 74, &34 ABORT"
5588:305 | DONE dir | em 16 16 |        |             |                 61 62 6f 72 74 22        --  a b o r t "
5588:306 | DONE wsp | em 16 16 |        |             |
5588:307 | DONE lbl | em 16 16 | 0062ff |             | nt_abort                             
5588:308 | DONE dir | em 16 16 | 0062ff | (2 bytes)   |         .byte 5, 00                  TODO check flags - NC possible?
5588:308 | DONE dir | em 16 16 |        |             |                 05 00                    --  . .
5588:309 | DONE dir | em 16 16 | 006301 | (6 bytes)   |         .word nt_abortq, xt_abort, 0050f9 
5588:309 | DONE dir | em 16 16 |        |             |                 f1 62 b2 50 f9 50        --  . b . P . P
5588:310 | DONE dir | em 16 16 | 006307 | (5 bytes)   |         .byte 61, 62, 6f, 72, 74     
5588:310 | DONE dir | em 16 16 |        |             |                 61 62 6f 72 74           --  a b o r t
5588:311 | DONE wsp | em 16 16 |        |             |
5588:312 | DONE lbl | em 16 16 | 00630c |             | nt_parse                             
5588:313 | DONE dir | em 16 16 | 00630c | (2 bytes)   |         .byte 5, 00                  
5588:313 | DONE dir | em 16 16 |        |             |                 05 00                    --  . .
5588:314 | DONE dir | em 16 16 | 00630e | (6 bytes)   |         .word nt_abort, xt_parse, 005cd4 
5588:314 | DONE dir | em 16 16 |        |             |                 ff 62 a2 5c d4 5c        --  . b . \ . \
5588:315 | DONE dir | em 16 16 | 006314 | (5 bytes)   |         .byte 70, 61, 72, 73, 65     
5588:315 | DONE dir | em 16 16 |        |             |                 70 61 72 73 65           --  p a r s e
5588:316 | DONE wsp | em 16 16 |        |             |
5588:317 | DONE lbl | em 16 16 | 006319 |             | nt_quit                              
5588:318 | DONE dir | em 16 16 | 006319 | (2 bytes)   |         .byte 4, 00                  
5588:318 | DONE dir | em 16 16 |        |             |                 04 00                    --  . .
5588:319 | DONE dir | em 16 16 | 00631b | (6 bytes)   |         .word nt_parse, xt_quit, 0050f9 
5588:319 | DONE dir | em 16 16 |        |             |                 0c 63 ba 50 f9 50        --   c . P . P
5588:320 | DONE dir | em 16 16 | 006321 | (4 bytes)   |         .byte 71, 75, 69, 74         
5588:320 | DONE dir | em 16 16 |        |             |                 71 75 69 74              --  q u i t
5588:321 | DONE wsp | em 16 16 |        |             |
5588:322 | DONE lbl | em 16 16 | 006325 |             | nt_question                          
5588:323 | DONE dir | em 16 16 | 006325 | (2 bytes)   |         .byte 1, { NC }              
5588:323 | DONE dir | em 16 16 |        |             |                 01 01                    --  . .
5588:324 | DONE dir | em 16 16 | 006327 | (6 bytes)   |         .word nt_quit, xt_question, 0052c5 
5588:324 | DONE dir | em 16 16 |        |             |                 19 63 bf 52 c5 52        --  . c . R . R
5588:325 | DONE dir | em 16 16 | 00632d | (1 bytes)   |         .byte 3f                     
5588:325 | DONE dir | em 16 16 |        |             |                 3f                       --  ?
5588:326 | DONE wsp | em 16 16 |        |             |
5588:327 | DONE lbl | em 16 16 | 00632e |             | nt_int-name                          
5588:328 | DONE dir | em 16 16 | 00632e | (2 bytes)   |         .byte 8, { NC }              
5588:328 | DONE dir | em 16 16 |        |             |                 08 01                    --  . .
5588:329 | DONE dir | em 16 16 | 006330 | (6 bytes)   |         .word nt_question, xt_int-name, 005a95 
5588:329 | DONE dir | em 16 16 |        |             |                 25 63 72 5a 95 5a        --  % c r Z . Z
5588:330 | DONE dir | em 16 16 | 006336 | (8 bytes)   |         .byte 69, 6e, 74, 3e, 6e, 61, 6d, 65 
5588:330 | DONE dir | em 16 16 |        |             |                 69 6e 74 3e 6e 61 6d 65  --  i n t > n a m e
5588:330 | DONE dir | em 16 16 |        |             |                                          -- 
5588:331 | DONE wsp | em 16 16 |        |             |
5588:332 | DONE lbl | em 16 16 | 00633e |             | nt_name-int                          
5588:333 | DONE dir | em 16 16 | 00633e | (2 bytes)   |         .byte 8, { NC }              
5588:333 | DONE dir | em 16 16 |        |             |                 08 01                    --  . .
5588:334 | DONE dir | em 16 16 | 006340 | (6 bytes)   |         .word nt_int-name, xt_name-int, 005b8e 
5588:334 | DONE dir | em 16 16 |        |             |                 2e 63 86 5b 8e 5b        --  . c . [ . [
5588:335 | DONE dir | em 16 16 | 006346 | (8 bytes)   |         .byte 6e, 61, 6d, 65, 3e, 69, 6e, 74 
5588:335 | DONE dir | em 16 16 |        |             |                 6e 61 6d 65 3e 69 6e 74  --  n a m e > i n t
5588:335 | DONE dir | em 16 16 |        |             |                                          -- 
5588:336 | DONE wsp | em 16 16 |        |             |
5588:337 | DONE lbl | em 16 16 | 00634e |             | nt_cr                                
5588:338 | DONE dir | em 16 16 | 00634e | (2 bytes)   |         .byte 2, { NC }              
5588:338 | DONE dir | em 16 16 |        |             |                 02 01                    --  . .
5588:339 | DONE dir | em 16 16 | 006350 | (6 bytes)   |         .word nt_name-int, xt_cr, 005755 
5588:339 | DONE dir | em 16 16 |        |             |                 3e 63 4f 57 55 57        --  > c O W U W
5588:340 | DONE dir | em 16 16 | 006356 | (2 bytes)   |         .byte 63, 72                 
5588:340 | DONE dir | em 16 16 |        |             |                 63 72                    --  c r
5588:341 | DONE wsp | em 16 16 |        |             |
5588:342 | DONE lbl | em 16 16 | 006358 |             | nt_fill                              
5588:343 | DONE dir | em 16 16 | 006358 | (2 bytes)   |         .byte 4, { NC }              
5588:343 | DONE dir | em 16 16 |        |             |                 04 01                    --  . .
5588:344 | DONE dir | em 16 16 | 00635a | (6 bytes)   |         .word nt_cr, xt_fill, 00592d 
5588:344 | DONE dir | em 16 16 |        |             |                 4e 63 13 59 2d 59        --  N c . Y - Y
5588:345 | DONE dir | em 16 16 | 006360 | (4 bytes)   |         .byte 66, 69, 6c, 6c         
5588:345 | DONE dir | em 16 16 |        |             |                 66 69 6c 6c              --  f i l l
5588:346 | DONE wsp | em 16 16 |        |             |
5588:347 | DONE lbl | em 16 16 | 006364 |             | nt_erase                             
5588:348 | DONE dir | em 16 16 | 006364 | (2 bytes)   |         .byte 5, { NC }              
5588:348 | DONE dir | em 16 16 |        |             |                 05 01                    --  . .
5588:349 | DONE dir | em 16 16 | 006366 | (6 bytes)   |         .word nt_fill, xt_erase, 00592d 
5588:349 | DONE dir | em 16 16 |        |             |                 58 63 0c 59 2d 59        --  X c  Y - Y
5588:350 | DONE dir | em 16 16 | 00636c | (5 bytes)   |         .byte 65, 72, 61, 73, 65     
5588:350 | DONE dir | em 16 16 |        |             |                 65 72 61 73 65           --  e r a s e
5588:351 | DONE wsp | em 16 16 |        |             |
5588:352 | DONE lbl | em 16 16 | 006371 |             | nt_numbermore                        
5588:353 | DONE dir | em 16 16 | 006371 | (2 bytes)   |         .byte 2, { NC }              "quoth the rumben"
5588:353 | DONE dir | em 16 16 |        |             |                 02 01                    --  . .
5588:354 | DONE dir | em 16 16 | 006373 | (6 bytes)   |         .word nt_erase, xt_numbermore, 0052b5 
5588:354 | DONE dir | em 16 16 |        |             |                 64 63 a7 52 b5 52        --  d c . R . R
5588:355 | DONE dir | em 16 16 | 006379 | (2 bytes)   |         .byte 23, 3e                 
5588:355 | DONE dir | em 16 16 |        |             |                 23 3e                    --  # >
5588:356 | DONE wsp | em 16 16 |        |             |
5588:357 | DONE lbl | em 16 16 | 00637b |             | nt_hold                              
5588:358 | DONE dir | em 16 16 | 00637b | (2 bytes)   |         .byte 4, { NC }              
5588:358 | DONE dir | em 16 16 |        |             |                 04 01                    --  . .
5588:359 | DONE dir | em 16 16 | 00637d | (6 bytes)   |         .word nt_numbermore, xt_hold, 005ab6 
5588:359 | DONE dir | em 16 16 |        |             |                 71 63 a9 5a b6 5a        --  q c . Z . Z
5588:360 | DONE dir | em 16 16 | 006383 | (4 bytes)   |         .byte 68, 6f, 6c, 64         
5588:360 | DONE dir | em 16 16 |        |             |                 68 6f 6c 64              --  h o l d
5588:361 | DONE wsp | em 16 16 |        |             |
5588:362 | DONE lbl | em 16 16 | 006387 |             | nt_hashs                             
5588:363 | DONE dir | em 16 16 | 006387 | (2 bytes)   |         .byte 2, { NC }              also known as "number-s"
5588:363 | DONE dir | em 16 16 |        |             |                 02 01                    --  . .
5588:364 | DONE dir | em 16 16 | 006389 | (6 bytes)   |         .word nt_hold, xt_hashs, 0052be 
5588:364 | DONE dir | em 16 16 |        |             |                 7b 63 b6 52 be 52        --  { c . R . R
5588:365 | DONE dir | em 16 16 | 00638f | (2 bytes)   |         .byte 23, 73                 
5588:365 | DONE dir | em 16 16 |        |             |                 23 73                    --  # s
5588:366 | DONE wsp | em 16 16 |        |             |
5588:367 | DONE lbl | em 16 16 | 006391 |             | nt_sign                              
5588:368 | DONE dir | em 16 16 | 006391 | (2 bytes)   |         .byte 4, { NC }              
5588:368 | DONE dir | em 16 16 |        |             |                 04 01                    --  . .
5588:369 | DONE dir | em 16 16 | 006393 | (6 bytes)   |         .word nt_hashs, xt_sign, 005dd4 
5588:369 | DONE dir | em 16 16 |        |             |                 87 63 c5 5d d4 5d        --  . c . ] . ]
5588:370 | DONE dir | em 16 16 | 006399 | (4 bytes)   |         .byte 73, 69, 67, 6e         
5588:370 | DONE dir | em 16 16 |        |             |                 73 69 67 6e              --  s i g n
5588:371 | DONE wsp | em 16 16 |        |             |
5588:372 | DONE lbl | em 16 16 | 00639d |             | nt_hash                              
5588:373 | DONE dir | em 16 16 | 00639d | (2 bytes)   |         .byte 1, { NC }              also known as "number-sign"
5588:373 | DONE dir | em 16 16 |        |             |                 01 01                    --  . .
5588:374 | DONE dir | em 16 16 | 00639f | (6 bytes)   |         .word nt_sign, xt_hash, 0052a6 
5588:374 | DONE dir | em 16 16 |        |             |                 91 63 8c 52 a6 52        --  . c . R . R
5588:375 | DONE dir | em 16 16 | 0063a5 | (1 bytes)   |         .byte 23                     
5588:375 | DONE dir | em 16 16 |        |             |                 23                       --  #
5588:376 | DONE wsp | em 16 16 |        |             |
5588:377 | DONE lbl | em 16 16 | 0063a6 |             | nt_lessnumber                        
5588:378 | DONE dir | em 16 16 | 0063a6 | (2 bytes)   |         .byte 2, { NC }              
5588:378 | DONE dir | em 16 16 |        |             |                 02 01                    --  . .
5588:379 | DONE dir | em 16 16 | 0063a8 | (6 bytes)   |         .word nt_hash, xt_lessnumber, 005122 
5588:379 | DONE dir | em 16 16 |        |             |                 9d 63 19 51 22 51        --  . c . Q " Q
5588:380 | DONE dir | em 16 16 | 0063ae | (2 bytes)   |         .byte 3c, 23                 
5588:380 | DONE dir | em 16 16 |        |             |                 3c 23                    --  < #
5588:381 | DONE wsp | em 16 16 |        |             |
5588:382 | DONE lbl | em 16 16 | 0063b0 |             | nt_bl                                
5588:383 | DONE dir | em 16 16 | 0063b0 | (2 bytes)   |         .byte 2, { NC }              
5588:383 | DONE dir | em 16 16 |        |             |                 02 01                    --  . .
5588:384 | DONE dir | em 16 16 | 0063b2 | (6 bytes)   |         .word nt_lessnumber, xt_bl, 0055d1 
5588:384 | DONE dir | em 16 16 |        |             |                 a6 63 ca 55 d1 55        --  . c . U . U
5588:385 | DONE dir | em 16 16 | 0063b8 | (2 bytes)   |         .byte 62, 6c                 
5588:385 | DONE dir | em 16 16 |        |             |                 62 6c                    --  b l
5588:386 | DONE wsp | em 16 16 |        |             |
5588:387 | DONE lbl | em 16 16 | 0063ba |             | nt_spaces                            
5588:388 | DONE dir | em 16 16 | 0063ba | (2 bytes)   |         .byte 6, { NC }              
5588:388 | DONE dir | em 16 16 |        |             |                 06 01                    --  . .
5588:389 | DONE dir | em 16 16 | 0063bc | (6 bytes)   |         .word nt_bl, xt_spaces, 005eba 
5588:389 | DONE dir | em 16 16 |        |             |                 b0 63 ab 5e ba 5e        --  . c . ^ . ^
5588:390 | DONE dir | em 16 16 | 0063c2 | (6 bytes)   |         .byte 73, 70, 61, 63, 65, 73 
5588:390 | DONE dir | em 16 16 |        |             |                 73 70 61 63 65 73        --  s p a c e s
5588:391 | DONE wsp | em 16 16 |        |             |
5588:392 | DONE lbl | em 16 16 | 0063c8 |             | nt_space                             
5588:393 | DONE dir | em 16 16 | 0063c8 | (2 bytes)   |         .byte 5, { NC }              
5588:393 | DONE dir | em 16 16 |        |             |                 05 01                    --  . .
5588:394 | DONE dir | em 16 16 | 0063ca | (6 bytes)   |         .word nt_spaces, xt_space, 005eaa 
5588:394 | DONE dir | em 16 16 |        |             |                 ba 63 a4 5e aa 5e        --  . c . ^ . ^
5588:395 | DONE dir | em 16 16 | 0063d0 | (5 bytes)   |         .byte 73, 70, 61, 63, 65     
5588:395 | DONE dir | em 16 16 |        |             |                 73 70 61 63 65           --  s p a c e
5588:396 | DONE wsp | em 16 16 |        |             |
5588:397 | DONE lbl | em 16 16 | 0063d5 |             | nt_dots                              
5588:398 | DONE dir | em 16 16 | 0063d5 | (2 bytes)   |         .byte 2, { NC }              
5588:398 | DONE dir | em 16 16 |        |             |                 02 01                    --  . .
5588:399 | DONE dir | em 16 16 | 0063d7 | (6 bytes)   |         .word nt_space, xt_dots, 005244 
5588:399 | DONE dir | em 16 16 |        |             |                 c8 63 0d 52 44 52        --  . c  R D R
5588:400 | DONE dir | em 16 16 | 0063dd | (2 bytes)   |         .byte 2e, 73                 
5588:400 | DONE dir | em 16 16 |        |             |                 2e 73                    --  . s
5588:401 | DONE wsp | em 16 16 |        |             |
5588:402 | DONE lbl | em 16 16 | 0063df |             | nt_type                              
5588:403 | DONE dir | em 16 16 | 0063df | (2 bytes)   |         .byte 4, { NC }              
5588:403 | DONE dir | em 16 16 |        |             |                 04 01                    --  . .
5588:404 | DONE dir | em 16 16 | 0063e1 | (6 bytes)   |         .word nt_dots, xt_type, 005f0c 
5588:404 | DONE dir | em 16 16 |        |             |                 d5 63 ec 5e 0c 5f        --  . c . ^  _
5588:405 | DONE dir | em 16 16 | 0063e7 | (4 bytes)   |         .byte 74, 79, 70, 65         
5588:405 | DONE dir | em 16 16 |        |             |                 74 79 70 65              --  t y p e
5588:406 | DONE wsp | em 16 16 |        |             |
5588:407 | DONE lbl | em 16 16 | 0063eb |             | nt_udot                              
5588:408 | DONE dir | em 16 16 | 0063eb | (2 bytes)   |         .byte 2, { NC }              
5588:408 | DONE dir | em 16 16 |        |             |                 02 01                    --  . .
5588:409 | DONE dir | em 16 16 | 0063ed | (6 bytes)   |         .word nt_type, xt_udot, 005f16 
5588:409 | DONE dir | em 16 16 |        |             |                 df 63 0d 5f 16 5f        --  . c  _ . _
5588:410 | DONE dir | em 16 16 | 0063f3 | (2 bytes)   |         .byte 75, 2e                 
5588:410 | DONE dir | em 16 16 |        |             |                 75 2e                    --  u .
5588:411 | DONE wsp | em 16 16 |        |             |
5588:412 | DONE lbl | em 16 16 | 0063f5 |             | nt_emit                              
5588:413 | DONE dir | em 16 16 | 0063f5 | (2 bytes)   |         .byte 4, 0                   not native compile
5588:413 | DONE dir | em 16 16 |        |             |                 04 00                    --  . .
5588:414 | DONE dir | em 16 16 | 0063f7 | (6 bytes)   |         .word nt_udot, xt_emit, 00590c 
5588:414 | DONE dir | em 16 16 |        |             |                 eb 63 04 59 0c 59        --  . c . Y  Y
5588:415 | DONE dir | em 16 16 | 0063fd | (4 bytes)   |         .byte 65, 6d, 69, 74         
5588:415 | DONE dir | em 16 16 |        |             |                 65 6d 69 74              --  e m i t
5588:416 | DONE wsp | em 16 16 |        |             |
5588:417 | DONE lbl | em 16 16 | 006401 |             | nt_dot                               
5588:418 | DONE dir | em 16 16 | 006401 | (2 bytes)   |         .byte 1, { NC }              
5588:418 | DONE dir | em 16 16 |        |             |                 01 01                    --  . .
5588:419 | DONE dir | em 16 16 | 006403 | (6 bytes)   |         .word nt_emit, xt_dot, 0051f8 
5588:419 | DONE dir | em 16 16 |        |             |                 f5 63 da 51 f8 51        --  . c . Q . Q
5588:420 | DONE dir | em 16 16 | 006409 | (1 bytes)   |         .byte 2e                     
5588:420 | DONE dir | em 16 16 |        |             |                 2e                       --  .
5588:421 | DONE wsp | em 16 16 |        |             |
5588:422 | DONE lbl | em 16 16 | 00640a |             | nt_pad                               
5588:423 | DONE dir | em 16 16 | 00640a | (2 bytes)   |         .byte 3, { NC }              
5588:423 | DONE dir | em 16 16 |        |             |                 03 01                    --  . .
5588:424 | DONE dir | em 16 16 | 00640c | (6 bytes)   |         .word nt_dot, xt_pad, 005c60 
5588:424 | DONE dir | em 16 16 |        |             |                 01 64 55 5c 60 5c        --  . d U \ ` \
5588:425 | DONE dir | em 16 16 | 006412 | (3 bytes)   |         .byte 70, 61, 64             
5588:425 | DONE dir | em 16 16 |        |             |                 70 61 64                 --  p a d
5588:426 | DONE wsp | em 16 16 |        |             |
5588:427 | DONE lbl | em 16 16 | 006415 |             | nt_base                              
5588:428 | DONE dir | em 16 16 | 006415 | (2 bytes)   |         .byte 4, { NC }              
5588:428 | DONE dir | em 16 16 |        |             |                 04 01                    --  . .
5588:429 | DONE dir | em 16 16 | 006417 | (6 bytes)   |         .word nt_pad, xt_base, 0055bb 
5588:429 | DONE dir | em 16 16 |        |             |                 0a 64 b4 55 bb 55        --  
 d . U . U
5588:430 | DONE dir | em 16 16 | 00641d | (4 bytes)   |         .byte 62, 61, 73, 65         
5588:430 | DONE dir | em 16 16 |        |             |                 62 61 73 65              --  b a s e
5588:431 | DONE wsp | em 16 16 |        |             |
5588:432 | DONE lbl | em 16 16 | 006421 |             | nt_nc-limit                          
5588:433 | DONE dir | em 16 16 | 006421 | (2 bytes)   |         .byte 8, { NC }              
5588:433 | DONE dir | em 16 16 |        |             |                 08 01                    --  . .
5588:434 | DONE dir | em 16 16 | 006423 | (6 bytes)   |         .word nt_base, xt_nc-limit, 005bb0 
5588:434 | DONE dir | em 16 16 |        |             |                 15 64 a9 5b b0 5b        --  . d . [ . [
5588:435 | DONE dir | em 16 16 | 006429 | (8 bytes)   |         .byte 6e, 63, 2d, 6c, 69, 6d, 69, 74 
5588:435 | DONE dir | em 16 16 |        |             |                 6e 63 2d 6c 69 6d 69 74  --  n c - l i m i t
5588:435 | DONE dir | em 16 16 |        |             |                                          -- 
5588:436 | DONE wsp | em 16 16 |        |             |
5588:437 | DONE lbl | em 16 16 | 006431 |             | nt_input                             
5588:438 | DONE dir | em 16 16 | 006431 | (2 bytes)   |         .byte 5, { NC }              
5588:438 | DONE dir | em 16 16 |        |             |                 05 01                    --  . .
5588:439 | DONE dir | em 16 16 | 006433 | (6 bytes)   |         .word nt_nc-limit, xt_input, 005a71 
5588:439 | DONE dir | em 16 16 |        |             |                 21 64 6a 5a 71 5a        --  ! d j Z q Z
5588:440 | DONE dir | em 16 16 | 006439 | (5 bytes)   |         .byte 69, 6e, 70, 75, 74     
5588:440 | DONE dir | em 16 16 |        |             |                 69 6e 70 75 74           --  i n p u t
5588:441 | DONE wsp | em 16 16 |        |             |
5588:442 | DONE lbl | em 16 16 | 00643e |             | nt_output                            
5588:443 | DONE dir | em 16 16 | 00643e | (2 bytes)   |         .byte 6, { NC }              
5588:443 | DONE dir | em 16 16 |        |             |                 06 01                    --  . .
5588:444 | DONE dir | em 16 16 | 006440 | (6 bytes)   |         .word nt_input, xt_output, 005c4d 
5588:444 | DONE dir | em 16 16 |        |             |                 31 64 46 5c 4d 5c        --  1 d F \ M \
5588:445 | DONE dir | em 16 16 | 006446 | (6 bytes)   |         .byte 6f, 75, 74, 70, 75, 74 
5588:445 | DONE dir | em 16 16 |        |             |                 6f 75 74 70 75 74        --  o u t p u t
5588:446 | DONE wsp | em 16 16 |        |             |
5588:447 | DONE lbl | em 16 16 | 00644c |             | nt_evaluate                          
5588:448 | DONE dir | em 16 16 | 00644c | (2 bytes)   |         .byte 8, { NC }              
5588:448 | DONE dir | em 16 16 |        |             |                 08 01                    --  . .
5588:449 | DONE dir | em 16 16 | 00644e | (6 bytes)   |         .word nt_output, xt_evaluate, 00595c 
5588:449 | DONE dir | em 16 16 |        |             |                 3e 64 2e 59 5c 59        --  > d . Y \ Y
5588:450 | DONE dir | em 16 16 | 006454 | (8 bytes)   |         .byte 65, 76, 61, 6c, 75, 61, 74, 65 
5588:450 | DONE dir | em 16 16 |        |             |                 65 76 61 6c 75 61 74 65  --  e v a l u a t e
5588:450 | DONE dir | em 16 16 |        |             |                                          -- 
5588:451 | DONE wsp | em 16 16 |        |             |
5588:452 | DONE lbl | em 16 16 | 00645c |             | nt_cells                             
5588:453 | DONE dir | em 16 16 | 00645c | (2 bytes)   |         .byte 5, { NC }              2* because we have 16 bit stack
5588:453 | DONE dir | em 16 16 |        |             |                 05 01                    --  . .
5588:454 | DONE dir | em 16 16 | 00645e | (6 bytes)   |         .word nt_evaluate, xt_two-star, 0053fd 
5588:454 | DONE dir | em 16 16 |        |             |                 4c 64 fa 53 fd 53        --  L d . S . S
5588:455 | DONE dir | em 16 16 | 006464 | (5 bytes)   |         .byte 63, 65, 6c, 6c, 73     
5588:455 | DONE dir | em 16 16 |        |             |                 63 65 6c 6c 73           --  c e l l s
5588:456 | DONE wsp | em 16 16 |        |             |
5588:457 | DONE lbl | em 16 16 | 006469 |             | nt_dotquote                          
5588:458 | DONE dir | em 16 16 | 006469 | (2 bytes)   |         .byte 2, { CO + IM }         
5588:458 | DONE dir | em 16 16 |        |             |                 02 06                    --  . .
5588:459 | DONE dir | em 16 16 | 00646b | (6 bytes)   |         .word nt_cells, xt_dotquote, 00520c 
5588:459 | DONE dir | em 16 16 |        |             |                 5c 64 f9 51 0c 52        --  \ d . Q  R
5588:460 | DONE dir | em 16 16 | 006471 | (2 bytes)   |         .byte 2e, &34                
5588:460 | DONE dir | em 16 16 |        |             |                 2e 22                    --  . "
5588:461 | DONE wsp | em 16 16 |        |             |
5588:462 | DONE lbl | em 16 16 | 006473 |             | nt_squote                            
5588:463 | DONE dir | em 16 16 | 006473 | (2 bytes)   |         .byte 2, { IM + NC }         not CO, see source code
5588:463 | DONE dir | em 16 16 |        |             |                 02 03                    --  . .
5588:464 | DONE dir | em 16 16 | 006475 | (6 bytes)   |         .word nt_dotquote, xt_squote, 005db4 
5588:464 | DONE dir | em 16 16 |        |             |                 69 64 7f 5d b4 5d        --  i d . ] . ]
5588:465 | DONE dir | em 16 16 | 00647b | (2 bytes)   |         .byte 73, &34                
5588:465 | DONE dir | em 16 16 |        |             |                 73 22                    --  s "
5588:466 | DONE wsp | em 16 16 |        |             |
5588:467 | DONE lbl | em 16 16 | 00647d |             | nt_sliteral                          
5588:468 | DONE dir | em 16 16 | 00647d | (2 bytes)   |         .byte 8, { IM + CO }         
5588:468 | DONE dir | em 16 16 |        |             |                 08 06                    --  . .
5588:469 | DONE dir | em 16 16 | 00647f | (6 bytes)   |         .word nt_squote, xt_sliteral, 005e1f 
5588:469 | DONE dir | em 16 16 |        |             |                 73 64 d5 5d 1f 5e        --  s d . ] . ^
5588:470 | DONE dir | em 16 16 | 006485 | (8 bytes)   |         .byte 73, 6c, 69, 74, 65, 72, 61, 6c 
5588:470 | DONE dir | em 16 16 |        |             |                 73 6c 69 74 65 72 61 6c  --  s l i t e r a l
5588:470 | DONE dir | em 16 16 |        |             |                                          -- 
5588:471 | DONE wsp | em 16 16 |        |             |
5588:472 | DONE lbl | em 16 16 | 00648d |             | nt_brackettick                       
5588:473 | DONE dir | em 16 16 | 00648d | (2 bytes)   |         .byte 3, { IM + CO }         
5588:473 | DONE dir | em 16 16 |        |             |                 03 06                    --  . .
5588:474 | DONE dir | em 16 16 | 00648f | (6 bytes)   |         .word nt_sliteral, xt_brackettick, 005314 
5588:474 | DONE dir | em 16 16 |        |             |                 7d 64 0e 53 14 53        --  } d . S . S
5588:475 | DONE dir | em 16 16 | 006495 | (3 bytes)   |         .byte 5b, 27, 5d             
5588:475 | DONE dir | em 16 16 |        |             |                 5b 27 5d                 --  [ ' ]
5588:476 | DONE wsp | em 16 16 |        |             |
5588:477 | DONE lbl | em 16 16 | 006498 |             | nt_bracketchar                       
5588:478 | DONE dir | em 16 16 | 006498 | (2 bytes)   |         .byte 6, { IM + CO }         
5588:478 | DONE dir | em 16 16 |        |             |                 06 06                    --  . .
5588:479 | DONE dir | em 16 16 | 00649a | (6 bytes)   |         .word nt_brackettick, xt_bracketchar, 005324 
5588:479 | DONE dir | em 16 16 |        |             |                 8d 64 1e 53 24 53        --  . d . S $ S
5588:480 | DONE dir | em 16 16 | 0064a0 | (6 bytes)   |         .byte 5b, 63, 68, 61, 72, 5d 
5588:480 | DONE dir | em 16 16 |        |             |                 5b 63 68 61 72 5d        --  [ c h a r ]
5588:481 | DONE wsp | em 16 16 |        |             |
5588:482 | DONE lbl | em 16 16 | 0064a6 |             | nt_literal                           
5588:483 | DONE dir | em 16 16 | 0064a6 | (2 bytes)   |         .byte 7, { IM + CO }         
5588:483 | DONE dir | em 16 16 |        |             |                 07 06                    --  . .
5588:484 | DONE dir | em 16 16 | 0064a8 | (6 bytes)   |         .word nt_bracketchar, xt_literal, 005ae0 
5588:484 | DONE dir | em 16 16 |        |             |                 98 64 cf 5a e0 5a        --  . d . Z . Z
5588:485 | DONE dir | em 16 16 | 0064ae | (7 bytes)   |         .byte 6c, 69, 74, 65, 72, 61, 6c 
5588:485 | DONE dir | em 16 16 |        |             |                 6c 69 74 65 72 61 6c     --  l i t e r a l
5588:486 | DONE wsp | em 16 16 |        |             |
5588:487 | DONE lbl | em 16 16 | 0064b5 |             | nt_native-compile                    
5588:488 | DONE dir | em 16 16 | 0064b5 | (2 bytes)   |         .byte 0e, { NC }             
5588:488 | DONE dir | em 16 16 |        |             |                 0e 01                    --  . .
5588:489 | DONE dir | em 16 16 | 0064b7 | (6 bytes)   |         .word nt_literal, xt_native-compile, 005ba8 
5588:489 | DONE dir | em 16 16 |        |             |                 a6 64 a0 5b a8 5b        --  . d . [ . [
5588:490 | DONE dir | em 16 16 | 0064bd | (14 bytes)  |         .byte 6e, 61, 74, 69, 76, 65, 2d, 63, 6f, 6d, 70, 69, 6c, 65 
5588:490 | DONE dir | em 16 16 |        |             |                 6e 61 74 69 76 65 2d 63  --  n a t i v e - c
5588:490 | DONE dir | em 16 16 |        |             |                 6f 6d 70 69 6c 65        --  o m p i l e
5588:491 | DONE wsp | em 16 16 |        |             |
5588:492 | DONE lbl | em 16 16 | 0064cb |             | nt_compile-only                      
5588:493 | DONE dir | em 16 16 | 0064cb | (2 bytes)   |         .byte 0c, { NC }             
5588:493 | DONE dir | em 16 16 |        |             |                 0c 01                    --   .
5588:494 | DONE dir | em 16 16 | 0064cd | (6 bytes)   |         .word nt_native-compile, xt_compile-only, 005682 
5588:494 | DONE dir | em 16 16 |        |             |                 b5 64 7a 56 82 56        --  . d z V . V
5588:495 | DONE dir | em 16 16 | 0064d3 | (12 bytes)  |         .byte 63, 6f, 6d, 70, 69, 6c, 65, 2d, 6f, 6e, 6c, 79 
5588:495 | DONE dir | em 16 16 |        |             |                 63 6f 6d 70 69 6c 65 2d  --  c o m p i l e -
5588:495 | DONE dir | em 16 16 |        |             |                 6f 6e 6c 79              --  o n l y
5588:496 | DONE wsp | em 16 16 |        |             |
5588:497 | DONE lbl | em 16 16 | 0064df |             | nt_immediate                         
5588:498 | DONE dir | em 16 16 | 0064df | (2 bytes)   |         .byte 9, { NC }              
5588:498 | DONE dir | em 16 16 |        |             |                 09 01                    --  	 .
5588:499 | DONE dir | em 16 16 | 0064e1 | (6 bytes)   |         .word nt_compile-only, xt_immediate, 005a69 
5588:499 | DONE dir | em 16 16 |        |             |                 cb 64 61 5a 69 5a        --  . d a Z i Z
5588:500 | DONE dir | em 16 16 | 0064e7 | (9 bytes)   |         .byte 69, 6d, 6d, 65, 64, 69, 61, 74, 65 
5588:500 | DONE dir | em 16 16 |        |             |                 69 6d 6d 65 64 69 61 74  --  i m m e d i a t
5588:500 | DONE dir | em 16 16 |        |             |                 65                       --  e
5588:501 | DONE wsp | em 16 16 |        |             |
5588:502 | DONE lbl | em 16 16 | 0064f0 |             | nt_postpone                          
5588:503 | DONE dir | em 16 16 | 0064f0 | (2 bytes)   |         .byte 8, { IM + CO }         
5588:503 | DONE dir | em 16 16 |        |             |                 08 06                    --  . .
5588:504 | DONE dir | em 16 16 | 0064f2 | (6 bytes)   |         .word nt_immediate, xt_postpone, 005d26 
5588:504 | DONE dir | em 16 16 |        |             |                 df 64 f3 5c 26 5d        --  . d . \ & ]
5588:505 | DONE dir | em 16 16 | 0064f8 | (8 bytes)   |         .byte 70, 6f, 73, 74, 70, 6f, 6e, 65 
5588:505 | DONE dir | em 16 16 |        |             |                 70 6f 73 74 70 6f 6e 65  --  p o s t p o n e
5588:505 | DONE dir | em 16 16 |        |             |                                          -- 
5588:506 | DONE wsp | em 16 16 |        |             |
5588:507 | DONE lbl | em 16 16 | 006500 |             | nt_rightbracket                      
5588:508 | DONE dir | em 16 16 | 006500 | (2 bytes)   |         .byte 1, { NC }              
5588:508 | DONE dir | em 16 16 |        |             |                 01 01                    --  . .
5588:509 | DONE dir | em 16 16 | 006502 | (6 bytes)   |         .word nt_postpone, xt_rightbracket, 00531d 
5588:509 | DONE dir | em 16 16 |        |             |                 f0 64 18 53 1d 53        --  . d . S . S
5588:510 | DONE dir | em 16 16 | 006508 | (1 bytes)   |         .byte 5d                     
5588:510 | DONE dir | em 16 16 |        |             |                 5d                       --  ]
5588:511 | DONE wsp | em 16 16 |        |             |
5588:512 | DONE lbl | em 16 16 | 006509 |             | nt_leftbracket                       
5588:513 | DONE dir | em 16 16 | 006509 | (2 bytes)   |         .byte 1, { IM + CO }         
5588:513 | DONE dir | em 16 16 |        |             |                 01 06                    --  . .
5588:514 | DONE dir | em 16 16 | 00650b | (6 bytes)   |         .word nt_rightbracket, xt_leftbracket, 005317 
5588:514 | DONE dir | em 16 16 |        |             |                 00 65 15 53 17 53        --  . e . S . S
5588:515 | DONE dir | em 16 16 | 006511 | (1 bytes)   |         .byte 5b                     
5588:515 | DONE dir | em 16 16 |        |             |                 5b                       --  [
5588:516 | DONE wsp | em 16 16 |        |             |
5588:517 | DONE lbl | em 16 16 | 006512 |             | nt_latestnt                          
5588:518 | DONE dir | em 16 16 | 006512 | (2 bytes)   |         .byte 8, { NC }              
5588:518 | DONE dir | em 16 16 |        |             |                 08 01                    --  . .
5588:519 | DONE dir | em 16 16 | 006514 | (6 bytes)   |         .word nt_leftbracket, xt_latestnt, 005abe 
5588:519 | DONE dir | em 16 16 |        |             |                 09 65 b7 5a be 5a        --  	 e . Z . Z
5588:520 | DONE dir | em 16 16 | 00651a | (8 bytes)   |         .byte 6c, 61, 74, 65, 73, 74, 6e, 74 
5588:520 | DONE dir | em 16 16 |        |             |                 6c 61 74 65 73 74 6e 74  --  l a t e s t n t
5588:520 | DONE dir | em 16 16 |        |             |                                          -- 
5588:521 | DONE wsp | em 16 16 |        |             |
5588:522 | DONE lbl | em 16 16 | 006522 |             | nt_latestxt                          
5588:523 | DONE dir | em 16 16 | 006522 | (2 bytes)   |         .byte 8, { NC }              
5588:523 | DONE dir | em 16 16 |        |             |                 08 01                    --  . .
5588:524 | DONE dir | em 16 16 | 006524 | (6 bytes)   |         .word nt_latestnt, xt_latestxt, 005ace 
5588:524 | DONE dir | em 16 16 |        |             |                 12 65 bf 5a ce 5a        --  . e . Z . Z
5588:525 | DONE dir | em 16 16 | 00652a | (8 bytes)   |         .byte 6c, 61, 74, 65, 73, 74, 78, 74 
5588:525 | DONE dir | em 16 16 |        |             |                 6c 61 74 65 73 74 78 74  --  l a t e s t x t
5588:525 | DONE dir | em 16 16 |        |             |                                          -- 
5588:526 | DONE wsp | em 16 16 |        |             |
5588:527 | DONE lbl | em 16 16 | 006532 |             | nt_dtrailing                         
5588:528 | DONE dir | em 16 16 | 006532 | (2 bytes)   |         .byte 9, { NC }              
5588:528 | DONE dir | em 16 16 |        |             |                 09 01                    --  	 .
5588:529 | DONE dir | em 16 16 | 006534 | (6 bytes)   |         .word nt_latestxt, xt_dtrailing, 005384 
5588:529 | DONE dir | em 16 16 |        |             |                 22 65 6e 53 84 53        --  " e n S . S
5588:530 | DONE dir | em 16 16 | 00653a | (9 bytes)   |         .byte 2d, 74, 72, 61, 69, 6c, 69, 6e, 67 
5588:530 | DONE dir | em 16 16 |        |             |                 2d 74 72 61 69 6c 69 6e  --  - t r a i l i n
5588:530 | DONE dir | em 16 16 |        |             |                 67                       --  g
5588:531 | DONE wsp | em 16 16 |        |             |
5588:532 | DONE lbl | em 16 16 | 006543 |             | nt_slashstring                       
5588:533 | DONE dir | em 16 16 | 006543 | (2 bytes)   |         .byte 7, { NC }              
5588:533 | DONE dir | em 16 16 |        |             |                 07 01                    --  . .
5588:534 | DONE dir | em 16 16 | 006545 | (6 bytes)   |         .word nt_dtrailing, xt_slashstring, 0051d9 
5588:534 | DONE dir | em 16 16 |        |             |                 32 65 c8 51 d9 51        --  2 e . Q . Q
5588:535 | DONE dir | em 16 16 | 00654b | (7 bytes)   |         .byte 2f, 73, 74, 72, 69, 6e, 67 
5588:535 | DONE dir | em 16 16 |        |             |                 2f 73 74 72 69 6e 67     --  / s t r i n g
5588:536 | DONE wsp | em 16 16 |        |             |
5588:537 | DONE lbl | em 16 16 | 006552 |             | nt_zbranch                           
5588:538 | DONE dir | em 16 16 | 006552 | (2 bytes)   |         .byte 7, { IM + CO }         
5588:538 | DONE dir | em 16 16 |        |             |                 07 06                    --  . .
5588:539 | DONE dir | em 16 16 | 006554 | (6 bytes)   |         .word nt_slashstring, xt_zbranch, 0053ce 
5588:539 | DONE dir | em 16 16 |        |             |                 43 65 c8 53 ce 53        --  C e . S . S
5588:540 | DONE dir | em 16 16 | 00655a | (7 bytes)   |         .byte 30, 62, 72, 61, 6e, 63, 68 
5588:540 | DONE dir | em 16 16 |        |             |                 30 62 72 61 6e 63 68     --  0 b r a n c h
5588:541 | DONE wsp | em 16 16 |        |             |
5588:542 | DONE lbl | em 16 16 | 006561 |             | nt_branch                            
5588:543 | DONE dir | em 16 16 | 006561 | (2 bytes)   |         .byte 6, { IM + CO }         
5588:543 | DONE dir | em 16 16 |        |             |                 06 06                    --  . .
5588:544 | DONE dir | em 16 16 | 006563 | (6 bytes)   |         .word nt_zbranch, xt_branch, 0055e2 
5588:544 | DONE dir | em 16 16 |        |             |                 52 65 dc 55 e2 55        --  R e . U . U
5588:545 | DONE dir | em 16 16 | 006569 | (6 bytes)   |         .byte 62, 72, 61, 6e, 63, 68 
5588:545 | DONE dir | em 16 16 |        |             |                 62 72 61 6e 63 68        --  b r a n c h
5588:546 | DONE wsp | em 16 16 |        |             |
5588:547 | DONE lbl | em 16 16 | 00656f |             | nt_again                             
5588:548 | DONE dir | em 16 16 | 00656f | (2 bytes)   |         .byte 5, { IM + NC + CO }    
5588:548 | DONE dir | em 16 16 |        |             |                 05 07                    --  . .
5588:549 | DONE dir | em 16 16 | 006571 | (6 bytes)   |         .word nt_branch, xt_again, 005557 
5588:549 | DONE dir | em 16 16 |        |             |                 61 65 42 55 57 55        --  a e B U W U
5588:550 | DONE dir | em 16 16 | 006577 | (5 bytes)   |         .byte 61, 67, 61, 69, 6e     
5588:550 | DONE dir | em 16 16 |        |             |                 61 67 61 69 6e           --  a g a i n
5588:551 | DONE wsp | em 16 16 |        |             |
5588:552 | DONE lbl | em 16 16 | 00657c |             | nt_begin                             
5588:553 | DONE dir | em 16 16 | 00657c | (2 bytes)   |         .byte 5, { IM + NC + CO }    
5588:553 | DONE dir | em 16 16 |        |             |                 05 07                    --  . .
5588:554 | DONE dir | em 16 16 | 00657e | (6 bytes)   |         .word nt_again, xt_begin, 0055c9 
5588:554 | DONE dir | em 16 16 |        |             |                 6f 65 c3 55 c9 55        --  o e . U . U
5588:555 | DONE dir | em 16 16 | 006584 | (5 bytes)   |         .byte 62, 65, 67, 69, 6e     
5588:555 | DONE dir | em 16 16 |        |             |                 62 65 67 69 6e           --  b e g i n
5588:556 | DONE wsp | em 16 16 |        |             |
5588:557 | DONE lbl | em 16 16 | 006589 |             | nt_compilecomma                      
5588:558 | DONE dir | em 16 16 | 006589 | (2 bytes)   |         .byte 08, { CO }             
5588:558 | DONE dir | em 16 16 |        |             |                 08 04                    --  . .
5588:559 | DONE dir | em 16 16 | 00658b | (6 bytes)   |         .word nt_begin, xt_compilecomma, 005711 
5588:559 | DONE dir | em 16 16 |        |             |                 7c 65 83 56 11 57        --  | e . V . W
5588:560 | DONE dir | em 16 16 | 006591 | (8 bytes)   |         .byte 63, 6f, 6d, 70, 69, 6c, 65, 2c 
5588:560 | DONE dir | em 16 16 |        |             |                 63 6f 6d 70 69 6c 65 2c  --  c o m p i l e ,
5588:560 | DONE dir | em 16 16 |        |             |                                          -- 
5588:561 | DONE wsp | em 16 16 |        |             |
5588:562 | DONE lbl | em 16 16 | 006599 |             | nt_semicolon                         
5588:563 | DONE dir | em 16 16 | 006599 | (2 bytes)   |         .byte 1, { CO + IM }         
5588:563 | DONE dir | em 16 16 |        |             |                 01 06                    --  . .
5588:564 | DONE dir | em 16 16 | 00659b | (6 bytes)   |         .word nt_compilecomma, xt_semicolon, 00528b 
5588:564 | DONE dir | em 16 16 |        |             |                 89 65 73 52 8b 52        --  . e s R . R
5588:565 | DONE dir | em 16 16 | 0065a1 | (1 bytes)   |         .byte 3b                     
5588:565 | DONE dir | em 16 16 |        |             |                 3b                       --  ;
5588:566 | DONE wsp | em 16 16 |        |             |
5588:567 | DONE lbl | em 16 16 | 0065a2 |             | nt_colon                             
5588:568 | DONE dir | em 16 16 | 0065a2 | (2 bytes)   |         .byte 1, 0                   
5588:568 | DONE dir | em 16 16 |        |             |                 01 00                    --  . .
5588:569 | DONE dir | em 16 16 | 0065a4 | (6 bytes)   |         .word nt_semicolon, xt_colon, 005272 
5588:569 | DONE dir | em 16 16 |        |             |                 99 65 51 52 72 52        --  . e Q R r R
5588:570 | DONE dir | em 16 16 | 0065aa | (1 bytes)   |         .byte 3a                     
5588:570 | DONE dir | em 16 16 |        |             |                 3a                       --  :
5588:571 | DONE wsp | em 16 16 |        |             |
5588:572 | DONE lbl | em 16 16 | 0065ab |             | nt_allot                             
5588:573 | DONE dir | em 16 16 | 0065ab | (2 bytes)   |         .byte 5, { NC }              
5588:573 | DONE dir | em 16 16 |        |             |                 05 01                    --  . .
5588:574 | DONE dir | em 16 16 | 0065ad | (6 bytes)   |         .word nt_colon, xt_allot, 005584 
5588:574 | DONE dir | em 16 16 |        |             |                 a2 65 5c 55 84 55        --  . e \ U . U
5588:575 | DONE dir | em 16 16 | 0065b3 | (5 bytes)   |         .byte 61, 6c, 6c, 6f, 74     
5588:575 | DONE dir | em 16 16 |        |             |                 61 6c 6c 6f 74           --  a l l o t
5588:576 | DONE wsp | em 16 16 |        |             |
5588:577 | DONE lbl | em 16 16 | 0065b8 |             | nt_defer                             
5588:578 | DONE dir | em 16 16 | 0065b8 | (2 bytes)   |         .byte 5, { NC }              
5588:578 | DONE dir | em 16 16 |        |             |                 05 01                    --  . .
5588:579 | DONE dir | em 16 16 | 0065ba | (6 bytes)   |         .word nt_allot, xt_defer, 0057e0 
5588:579 | DONE dir | em 16 16 |        |             |                 ab 65 c6 57 e0 57        --  . e . W . W
5588:580 | DONE dir | em 16 16 | 0065c0 | (5 bytes)   |         .byte 64, 65, 66, 65, 72     
5588:580 | DONE dir | em 16 16 |        |             |                 64 65 66 65 72           --  d e f e r
5588:581 | DONE wsp | em 16 16 |        |             |
5588:582 | DONE lbl | em 16 16 | 0065c5 |             | nt_tobody                            
5588:583 | DONE dir | em 16 16 | 0065c5 | (2 bytes)   |         .byte 5, { NC }              
5588:583 | DONE dir | em 16 16 |        |             |                 05 01                    --  . .
5588:584 | DONE dir | em 16 16 | 0065c7 | (6 bytes)   |         .word nt_defer, xt_tobody, 00515a 
5588:584 | DONE dir | em 16 16 |        |             |                 b8 65 37 51 5a 51        --  . e 7 Q Z Q
5588:585 | DONE dir | em 16 16 | 0065cd | (5 bytes)   |         .byte 3e, 62, 6f, 64, 79     
5588:585 | DONE dir | em 16 16 |        |             |                 3e 62 6f 64 79           --  > b o d y
5588:586 | DONE wsp | em 16 16 |        |             |
5588:587 | DONE lbl | em 16 16 | 0065d2 |             | nt_does                              
5588:588 | DONE dir | em 16 16 | 0065d2 | (2 bytes)   |         .byte 5, { IM + CO }         
5588:588 | DONE dir | em 16 16 |        |             |                 05 06                    --  . .
5588:589 | DONE dir | em 16 16 | 0065d4 | (6 bytes)   |         .word nt_tobody, xt_does, 0058c5 
5588:589 | DONE dir | em 16 16 |        |             |                 c5 65 b9 58 c5 58        --  . e . X . X
5588:590 | DONE dir | em 16 16 | 0065da | (5 bytes)   |         .byte 64, 6f, 65, 73, 3e     
5588:590 | DONE dir | em 16 16 |        |             |                 64 6f 65 73 3e           --  d o e s >
5588:591 | DONE wsp | em 16 16 |        |             |
5588:592 | DONE lbl | em 16 16 | 0065df |             | nt_create                            
5588:593 | DONE dir | em 16 16 | 0065df | (2 bytes)   |         .byte 6, 0                   
5588:593 | DONE dir | em 16 16 |        |             |                 06 00                    --  . .
5588:594 | DONE dir | em 16 16 | 0065e1 | (6 bytes)   |         .word nt_does, xt_create, 0057c5 
5588:594 | DONE dir | em 16 16 |        |             |                 d2 65 56 57 c5 57        --  . e V W . W
5588:595 | DONE dir | em 16 16 | 0065e7 | (6 bytes)   |         .byte 63, 72, 65, 61, 74, 65 
5588:595 | DONE dir | em 16 16 |        |             |                 63 72 65 61 74 65        --  c r e a t e
5588:596 | DONE wsp | em 16 16 |        |             |
5588:597 | DONE lbl | em 16 16 | 0065ed |             | nt_name-string                       
5588:598 | DONE dir | em 16 16 | 0065ed | (2 bytes)   |         .byte 0b, { NC }             
5588:598 | DONE dir | em 16 16 |        |             |                 0b 01                    --   .
5588:599 | DONE dir | em 16 16 | 0065ef | (6 bytes)   |         .word nt_create, xt_name-string, 005b9f 
5588:599 | DONE dir | em 16 16 |        |             |                 df 65 8f 5b 9f 5b        --  . e . [ . [
5588:600 | DONE dir | em 16 16 | 0065f5 | (11 bytes)  |         .byte 6e, 61, 6d, 65, 3e, 73, 74, 72, 69, 6e, 67 
5588:600 | DONE dir | em 16 16 |        |             |                 6e 61 6d 65 3e 73 74 72  --  n a m e > s t r
5588:600 | DONE dir | em 16 16 |        |             |                 69 6e 67                 --  i n g
5588:601 | DONE wsp | em 16 16 |        |             |
5588:602 | DONE lbl | em 16 16 | 006600 |             | nt_2dup                              
5588:603 | DONE dir | em 16 16 | 006600 | (2 bytes)   |         .byte 4, { NC }              
5588:603 | DONE dir | em 16 16 |        |             |                 04 01                    --  . .
5588:604 | DONE dir | em 16 16 | 006602 | (6 bytes)   |         .word nt_name-string, xt_2dup, 005420 
5588:604 | DONE dir | em 16 16 |        |             |                 ed 65 16 54 20 54        --  . e . T   T
5588:605 | DONE dir | em 16 16 | 006608 | (4 bytes)   |         .byte 32, 64, 75, 70         
5588:605 | DONE dir | em 16 16 |        |             |                 32 64 75 70              --  2 d u p
5588:606 | DONE wsp | em 16 16 |        |             |
5588:607 | DONE lbl | em 16 16 | 00660c |             | nt_abs                               
5588:608 | DONE dir | em 16 16 | 00660c | (2 bytes)   |         .byte 3, { NC }              
5588:608 | DONE dir | em 16 16 |        |             |                 03 01                    --  . .
5588:609 | DONE dir | em 16 16 | 00660e | (6 bytes)   |         .word nt_2dup, xt_abs, 0054b2 
5588:609 | DONE dir | em 16 16 |        |             |                 00 66 aa 54 b2 54        --  . f . T . T
5588:610 | DONE dir | em 16 16 | 006614 | (3 bytes)   |         .byte 61, 62, 73             
5588:610 | DONE dir | em 16 16 |        |             |                 61 62 73                 --  a b s
5588:611 | DONE wsp | em 16 16 |        |             |
5588:612 | DONE lbl | em 16 16 | 006617 |             | nt_state                             
5588:613 | DONE dir | em 16 16 | 006617 | (2 bytes)   |         .byte 5, { NC }              
5588:613 | DONE dir | em 16 16 |        |             |                 05 01                    --  . .
5588:614 | DONE dir | em 16 16 | 006619 | (6 bytes)   |         .word nt_abs, xt_state, 005eca 
5588:614 | DONE dir | em 16 16 |        |             |                 0c 66 c3 5e ca 5e        --   f . ^ . ^
5588:615 | DONE dir | em 16 16 | 00661f | (5 bytes)   |         .byte 73, 74, 61, 74, 65     
5588:615 | DONE dir | em 16 16 |        |             |                 73 74 61 74 65           --  s t a t e
5588:616 | DONE wsp | em 16 16 |        |             |
5588:617 | DONE lbl | em 16 16 | 006624 |             | nt_to-in                             
5588:618 | DONE dir | em 16 16 | 006624 | (2 bytes)   |         .byte 3, { NC }              
5588:618 | DONE dir | em 16 16 |        |             |                 03 01                    --  . .
5588:619 | DONE dir | em 16 16 | 006626 | (6 bytes)   |         .word nt_state, xt_to-in, 005162 
5588:619 | DONE dir | em 16 16 |        |             |                 17 66 5b 51 62 51        --  . f [ Q b Q
5588:620 | DONE dir | em 16 16 | 00662c | (3 bytes)   |         .byte 3e, 69, 6e             
5588:620 | DONE dir | em 16 16 |        |             |                 3e 69 6e                 --  > i n
5588:621 | DONE wsp | em 16 16 |        |             |
5588:622 | DONE lbl | em 16 16 | 00662f |             | nt_source                            
5588:623 | DONE dir | em 16 16 | 00662f | (2 bytes)   |         .byte 6, { NC }              
5588:623 | DONE dir | em 16 16 |        |             |                 06 01                    --  . .
5588:624 | DONE dir | em 16 16 | 006631 | (6 bytes)   |         .word nt_to-in, xt_source, 005e9c 
5588:624 | DONE dir | em 16 16 |        |             |                 24 66 90 5e 9c 5e        --  $ f . ^ . ^
5588:625 | DONE dir | em 16 16 | 006637 | (6 bytes)   |         .byte 73, 6f, 75, 72, 63, 65 
5588:625 | DONE dir | em 16 16 |        |             |                 73 6f 75 72 63 65        --  s o u r c e
5588:626 | DONE wsp | em 16 16 |        |             |
5588:627 | DONE lbl | em 16 16 | 00663d |             | nt_depth                             
5588:628 | DONE dir | em 16 16 | 00663d | (2 bytes)   |         .byte 5, { NC }              
5588:628 | DONE dir | em 16 16 |        |             |                 05 01                    --  . .
5588:629 | DONE dir | em 16 16 | 00663f | (6 bytes)   |         .word nt_source, xt_depth, 005864 
5588:629 | DONE dir | em 16 16 |        |             |                 2f 66 56 58 64 58        --  / f V X d X
5588:630 | DONE dir | em 16 16 | 006645 | (5 bytes)   |         .byte 64, 65, 70, 74, 68     
5588:630 | DONE dir | em 16 16 |        |             |                 64 65 70 74 68           --  d e p t h
5588:631 | DONE wsp | em 16 16 |        |             |
5588:632 | DONE lbl | em 16 16 | 00664a |             | nt_to                                
5588:633 | DONE dir | em 16 16 | 00664a | (2 bytes)   |         .byte 2, { NC }              
5588:633 | DONE dir | em 16 16 |        |             |                 02 01                    --  . .
5588:634 | DONE dir | em 16 16 | 00664c | (6 bytes)   |         .word nt_depth, xt_to, 005eda 
5588:634 | DONE dir | em 16 16 |        |             |                 3d 66 d1 5e da 5e        --  = f . ^ . ^
5588:635 | DONE dir | em 16 16 | 006652 | (2 bytes)   |         .byte 74, 6f                 
5588:635 | DONE dir | em 16 16 |        |             |                 74 6f                    --  t o
5588:636 | DONE wsp | em 16 16 |        |             |
5588:637 | DONE lbl | em 16 16 | 006654 |             | nt_value                             
5588:638 | DONE dir | em 16 16 | 006654 | (2 bytes)   |         .byte 5, { NC }              uses routines of CONSTANT
5588:638 | DONE dir | em 16 16 |        |             |                 05 01                    --  . .
5588:639 | DONE dir | em 16 16 | 006656 | (6 bytes)   |         .word nt_to, xt_constant, 005740 
5588:639 | DONE dir | em 16 16 |        |             |                 4a 66 12 57 40 57        --  J f . W @ W
5588:640 | DONE dir | em 16 16 | 00665c | (5 bytes)   |         .byte 76, 61, 6c, 75, 65     
5588:640 | DONE dir | em 16 16 |        |             |                 76 61 6c 75 65           --  v a l u e
5588:641 | DONE wsp | em 16 16 |        |             |
5588:642 | DONE lbl | em 16 16 | 006661 |             | nt_constant                          
5588:643 | DONE dir | em 16 16 | 006661 | (2 bytes)   |         .byte 8, { NC }              
5588:643 | DONE dir | em 16 16 |        |             |                 08 01                    --  . .
5588:644 | DONE dir | em 16 16 | 006663 | (6 bytes)   |         .word nt_value, xt_constant, 005740 
5588:644 | DONE dir | em 16 16 |        |             |                 54 66 12 57 40 57        --  T f . W @ W
5588:645 | DONE dir | em 16 16 | 006669 | (8 bytes)   |         .byte 63, 6f, 6e, 73, 74, 61, 6e, 74 
5588:645 | DONE dir | em 16 16 |        |             |                 63 6f 6e 73 74 61 6e 74  --  c o n s t a n t
5588:645 | DONE dir | em 16 16 |        |             |                                          -- 
5588:646 | DONE wsp | em 16 16 |        |             |
5588:647 | DONE lbl | em 16 16 | 006671 |             | nt_variable                          
5588:648 | DONE dir | em 16 16 | 006671 | (2 bytes)   |         .byte 8, { NC }              
5588:648 | DONE dir | em 16 16 |        |             |                 08 01                    --  . .
5588:649 | DONE dir | em 16 16 | 006673 | (6 bytes)   |         .word nt_constant, xt_variable, 006002 
5588:649 | DONE dir | em 16 16 |        |             |                 61 66 f3 5f 02 60        --  a f . _ . `
5588:650 | DONE dir | em 16 16 | 006679 | (8 bytes)   |         .byte 76, 61, 72, 69, 61, 62, 6c, 65 
5588:650 | DONE dir | em 16 16 |        |             |                 76 61 72 69 61 62 6c 65  --  v a r i a b l e
5588:650 | DONE dir | em 16 16 |        |             |                                          -- 
5588:651 | DONE wsp | em 16 16 |        |             |
5588:652 | DONE lbl | em 16 16 | 006681 |             | nt_tick                              
5588:653 | DONE dir | em 16 16 | 006681 | (2 bytes)   |         .byte 1, { NC }              
5588:653 | DONE dir | em 16 16 |        |             |                 01 01                    --  . .
5588:654 | DONE dir | em 16 16 | 006683 | (6 bytes)   |         .word nt_variable, xt_tick, 00548c 
5588:654 | DONE dir | em 16 16 |        |             |                 71 66 71 54 8c 54        --  q f q T . T
5588:655 | DONE dir | em 16 16 | 006689 | (1 bytes)   |         .byte 27                     hex for "'"
5588:655 | DONE dir | em 16 16 |        |             |                 27                       --  '
5588:656 | DONE wsp | em 16 16 |        |             |
5588:657 | DONE lbl | em 16 16 | 00668a |             | nt_move                              
5588:658 | DONE dir | em 16 16 | 00668a | (2 bytes)   |         .byte 4, { NC }              
5588:658 | DONE dir | em 16 16 |        |             |                 04 01                    --  . .
5588:659 | DONE dir | em 16 16 | 00668c | (6 bytes)   |         .word nt_tick, xt_move, 005b85 
5588:659 | DONE dir | em 16 16 |        |             |                 81 66 72 5b 85 5b        --  . f r [ . [
5588:660 | DONE dir | em 16 16 | 006692 | (4 bytes)   |         .byte 6d, 6f, 76, 65         
5588:660 | DONE dir | em 16 16 |        |             |                 6d 6f 76 65              --  m o v e
5588:661 | DONE wsp | em 16 16 |        |             |
5588:662 | DONE lbl | em 16 16 | 006696 |             | nt_min                               
5588:663 | DONE dir | em 16 16 | 006696 | (2 bytes)   |         .byte 3, { NC }              
5588:663 | DONE dir | em 16 16 |        |             |                 03 01                    --  . .
5588:664 | DONE dir | em 16 16 | 006698 | (6 bytes)   |         .word nt_move, xt_min, 005b71 
5588:664 | DONE dir | em 16 16 |        |             |                 8a 66 5f 5b 71 5b        --  . f _ [ q [
5588:665 | DONE dir | em 16 16 | 00669e | (3 bytes)   |         .byte 6d, 69, 6e             
5588:665 | DONE dir | em 16 16 |        |             |                 6d 69 6e                 --  m i n
5588:666 | DONE wsp | em 16 16 |        |             |
5588:667 | DONE lbl | em 16 16 | 0066a1 |             | nt_max                               
5588:668 | DONE dir | em 16 16 | 0066a1 | (2 bytes)   |         .byte 3, { NC }              
5588:668 | DONE dir | em 16 16 |        |             |                 03 01                    --  . .
5588:669 | DONE dir | em 16 16 | 0066a3 | (6 bytes)   |         .word nt_min, xt_max, 005b5e 
5588:669 | DONE dir | em 16 16 |        |             |                 96 66 4c 5b 5e 5b        --  . f L [ ^ [
5588:670 | DONE dir | em 16 16 | 0066a9 | (3 bytes)   |         .byte 6d, 61, 78             
5588:670 | DONE dir | em 16 16 |        |             |                 6d 61 78                 --  m a x
5588:671 | DONE wsp | em 16 16 |        |             |
5588:672 | DONE lbl | em 16 16 | 0066ac |             | nt_negate                            
5588:673 | DONE dir | em 16 16 | 0066ac | (2 bytes)   |         .byte 6, { NC }              
5588:673 | DONE dir | em 16 16 |        |             |                 06 01                    --  . .
5588:674 | DONE dir | em 16 16 | 0066ae | (6 bytes)   |         .word nt_max, xt_negate, 005bb7 
5588:674 | DONE dir | em 16 16 |        |             |                 a1 66 b1 5b b7 5b        --  . f . [ . [
5588:675 | DONE dir | em 16 16 | 0066b4 | (6 bytes)   |         .byte 6e, 65, 67, 61, 74, 65 
5588:675 | DONE dir | em 16 16 |        |             |                 6e 65 67 61 74 65        --  n e g a t e
5588:676 | DONE wsp | em 16 16 |        |             |
5588:677 | DONE lbl | em 16 16 | 0066ba |             | nt_invert                            
5588:678 | DONE dir | em 16 16 | 0066ba | (2 bytes)   |         .byte 6, { NC }              
5588:678 | DONE dir | em 16 16 |        |             |                 06 01                    --  . .
5588:679 | DONE dir | em 16 16 | 0066bc | (6 bytes)   |         .word nt_negate, xt_invert, 005a9b 
5588:679 | DONE dir | em 16 16 |        |             |                 ac 66 96 5a 9b 5a        --  . f . Z . Z
5588:680 | DONE dir | em 16 16 | 0066c2 | (6 bytes)   |         .byte 69, 6e, 76, 65, 72, 74 
5588:680 | DONE dir | em 16 16 |        |             |                 69 6e 76 65 72 74        --  i n v e r t
5588:681 | DONE wsp | em 16 16 |        |             |
5588:682 | DONE lbl | em 16 16 | 0066c8 |             | nt_char                              
5588:683 | DONE dir | em 16 16 | 0066c8 | (2 bytes)   |         .byte 4, { NC }              
5588:683 | DONE dir | em 16 16 |        |             |                 04 01                    --  . .
5588:684 | DONE dir | em 16 16 | 0066ca | (6 bytes)   |         .word nt_invert, xt_char, 00563b 
5588:684 | DONE dir | em 16 16 |        |             |                 ba 66 24 56 3b 56        --  . f $ V ; V
5588:685 | DONE dir | em 16 16 | 0066d0 | (4 bytes)   |         .byte 63, 68, 61, 72         
5588:685 | DONE dir | em 16 16 |        |             |                 63 68 61 72              --  c h a r
5588:686 | DONE wsp | em 16 16 |        |             |
5588:687 | DONE lbl | em 16 16 | 0066d4 |             | nt_rshift                            
5588:688 | DONE dir | em 16 16 | 0066d4 | (2 bytes)   |         .byte 6, { NC }              
5588:688 | DONE dir | em 16 16 |        |             |                 06 01                    --  . .
5588:689 | DONE dir | em 16 16 | 0066d6 | (6 bytes)   |         .word nt_char, xt_rshift, 005d7e 
5588:689 | DONE dir | em 16 16 |        |             |                 c8 66 6b 5d 7e 5d        --  . f k ] ~ ]
5588:690 | DONE dir | em 16 16 | 0066dc | (6 bytes)   |         .byte 72, 73, 68, 69, 66, 74 
5588:690 | DONE dir | em 16 16 |        |             |                 72 73 68 69 66 74        --  r s h i f t
5588:691 | DONE wsp | em 16 16 |        |             |
5588:692 | DONE lbl | em 16 16 | 0066e2 |             | nt_xor                               
5588:693 | DONE dir | em 16 16 | 0066e2 | (2 bytes)   |         .byte 3, { NC }              
5588:693 | DONE dir | em 16 16 |        |             |                 03 01                    --  . .
5588:694 | DONE dir | em 16 16 | 0066e4 | (6 bytes)   |         .word nt_rshift, xt_xor, 006079 
5588:694 | DONE dir | em 16 16 |        |             |                 d4 66 73 60 79 60        --  . f s ` y `
5588:695 | DONE dir | em 16 16 | 0066ea | (3 bytes)   |         .byte 78, 6f, 72             
5588:695 | DONE dir | em 16 16 |        |             |                 78 6f 72                 --  x o r
5588:696 | DONE wsp | em 16 16 |        |             |
5588:697 | DONE lbl | em 16 16 | 0066ed |             | nt_or                                
5588:698 | DONE dir | em 16 16 | 0066ed | (2 bytes)   |         .byte 2, { NC }              
5588:698 | DONE dir | em 16 16 |        |             |                 02 01                    --  . .
5588:699 | DONE dir | em 16 16 | 0066ef | (6 bytes)   |         .word nt_xor, xt_or, 005c45  
5588:699 | DONE dir | em 16 16 |        |             |                 e2 66 3f 5c 45 5c        --  . f ? \ E \
5588:700 | DONE dir | em 16 16 | 0066f5 | (2 bytes)   |         .byte 6f, 72                 
5588:700 | DONE dir | em 16 16 |        |             |                 6f 72                    --  o r
5588:701 | DONE wsp | em 16 16 |        |             |
5588:702 | DONE lbl | em 16 16 | 0066f7 |             | nt_and                               
5588:703 | DONE dir | em 16 16 | 0066f7 | (2 bytes)   |         .byte 3, { NC }              
5588:703 | DONE dir | em 16 16 |        |             |                 03 01                    --  . .
5588:704 | DONE dir | em 16 16 | 0066f9 | (6 bytes)   |         .word nt_or, xt_and, 00558b  
5588:704 | DONE dir | em 16 16 |        |             |                 ed 66 85 55 8b 55        --  . f . U . U
5588:705 | DONE dir | em 16 16 | 0066ff | (3 bytes)   |         .byte 61, 6e, 64             
5588:705 | DONE dir | em 16 16 |        |             |                 61 6e 64                 --  a n d
5588:706 | DONE wsp | em 16 16 |        |             |
5588:707 | DONE lbl | em 16 16 | 006702 |             | nt_lshift                            
5588:708 | DONE dir | em 16 16 | 006702 | (2 bytes)   |         .byte 6, { NC }              
5588:708 | DONE dir | em 16 16 |        |             |                 06 01                    --  . .
5588:709 | DONE dir | em 16 16 | 006704 | (6 bytes)   |         .word nt_and, xt_lshift, 005b01 
5588:709 | DONE dir | em 16 16 |        |             |                 f7 66 ee 5a 01 5b        --  . f . Z . [
5588:710 | DONE dir | em 16 16 | 00670a | (6 bytes)   |         .byte 6c, 73, 68, 69, 66, 74 
5588:710 | DONE dir | em 16 16 |        |             |                 6c 73 68 69 66 74        --  l s h i f t
5588:711 | DONE wsp | em 16 16 |        |             |
5588:712 | DONE lbl | em 16 16 | 006710 |             | nt_plusstore                         
5588:713 | DONE dir | em 16 16 | 006710 | (2 bytes)   |         .byte 2, { NC }              
5588:713 | DONE dir | em 16 16 |        |             |                 02 01                    --  . .
5588:714 | DONE dir | em 16 16 | 006712 | (6 bytes)   |         .word nt_lshift, xt_plusstore, 005cf2 
5588:714 | DONE dir | em 16 16 |        |             |                 02 67 e3 5c f2 5c        --  . g . \ . \
5588:715 | DONE dir | em 16 16 | 006718 | (2 bytes)   |         .byte 2b, 21                 
5588:715 | DONE dir | em 16 16 |        |             |                 2b 21                    --  + !
5588:716 | DONE wsp | em 16 16 |        |             |
5588:717 | DONE lbl | em 16 16 | 00671a |             | nt_c-comma                           
5588:718 | DONE dir | em 16 16 | 00671a | (2 bytes)   |         .byte 2, { NC }              
5588:718 | DONE dir | em 16 16 |        |             |                 02 01                    --  . .
5588:719 | DONE dir | em 16 16 | 00671c | (6 bytes)   |         .word nt_plusstore, xt_c-comma, 005604 
5588:719 | DONE dir | em 16 16 |        |             |                 10 67 f7 55 04 56        --  . g . U . V
5588:720 | DONE dir | em 16 16 | 006722 | (2 bytes)   |         .byte 63, 2c                 
5588:720 | DONE dir | em 16 16 |        |             |                 63 2c                    --  c ,
5588:721 | DONE wsp | em 16 16 |        |             |
5588:722 | DONE lbl | em 16 16 | 006724 |             | nt_c-fetch                           
5588:723 | DONE dir | em 16 16 | 006724 | (2 bytes)   |         .byte 2, { NC }              
5588:723 | DONE dir | em 16 16 |        |             |                 02 01                    --  . .
5588:724 | DONE dir | em 16 16 | 006726 | (6 bytes)   |         .word nt_c-comma, xt_c-fetch, 005610 
5588:724 | DONE dir | em 16 16 |        |             |                 1a 67 05 56 10 56        --  . g . V . V
5588:725 | DONE dir | em 16 16 | 00672c | (2 bytes)   |         .byte 63, 40                 
5588:725 | DONE dir | em 16 16 |        |             |                 63 40                    --  c @
5588:726 | DONE wsp | em 16 16 |        |             |
5588:727 | DONE lbl | em 16 16 | 00672e |             | nt_c-store                           
5588:728 | DONE dir | em 16 16 | 00672e | (2 bytes)   |         .byte 2, { NC }              
5588:728 | DONE dir | em 16 16 |        |             |                 02 01                    --  . .
5588:729 | DONE dir | em 16 16 | 006730 | (6 bytes)   |         .word nt_c-fetch, xt_c-store, 005620 
5588:729 | DONE dir | em 16 16 |        |             |                 24 67 11 56 20 56        --  $ g . V   V
5588:730 | DONE dir | em 16 16 | 006736 | (2 bytes)   |         .byte 63, 21                 
5588:730 | DONE dir | em 16 16 |        |             |                 63 21                    --  c !
5588:731 | DONE wsp | em 16 16 |        |             |
5588:732 | DONE lbl | em 16 16 | 006738 |             | nt_two-star                          
5588:733 | DONE dir | em 16 16 | 006738 | (2 bytes)   |         .byte 2, { NC }              
5588:733 | DONE dir | em 16 16 |        |             |                 02 01                    --  . .
5588:734 | DONE dir | em 16 16 | 00673a | (6 bytes)   |         .word nt_c-store, xt_two-star, 0053fd 
5588:734 | DONE dir | em 16 16 |        |             |                 2e 67 fa 53 fd 53        --  . g . S . S
5588:735 | DONE dir | em 16 16 | 006740 | (2 bytes)   |         .byte 32, 2a                 
5588:735 | DONE dir | em 16 16 |        |             |                 32 2a                    --  2 *
5588:736 | DONE wsp | em 16 16 |        |             |
5588:737 | DONE lbl | em 16 16 | 006742 |             | nt_minus                             
5588:738 | DONE dir | em 16 16 | 006742 | (2 bytes)   |         .byte 1, { NC }              
5588:738 | DONE dir | em 16 16 |        |             |                 01 01                    --  . .
5588:739 | DONE dir | em 16 16 | 006744 | (6 bytes)   |         .word nt_two-star, xt_minus, 005364 
5588:739 | DONE dir | em 16 16 |        |             |                 38 67 5a 53 64 53        --  8 g Z S d S
5588:740 | DONE dir | em 16 16 | 00674a | (1 bytes)   |         .byte 2d                     
5588:740 | DONE dir | em 16 16 |        |             |                 2d                       --  -
5588:741 | DONE wsp | em 16 16 |        |             |
5588:742 | DONE lbl | em 16 16 | 00674b |             | nt_plus                              
5588:743 | DONE dir | em 16 16 | 00674b | (2 bytes)   |         .byte 1, { NC }              
5588:743 | DONE dir | em 16 16 |        |             |                 01 01                    --  . .
5588:744 | DONE dir | em 16 16 | 00674d | (6 bytes)   |         .word nt_minus, xt_plus, 005331 
5588:744 | DONE dir | em 16 16 |        |             |                 42 67 2a 53 31 53        --  B g * S 1 S
5588:745 | DONE dir | em 16 16 | 006753 | (1 bytes)   |         .byte 2b                     
5588:745 | DONE dir | em 16 16 |        |             |                 2b                       --  +
5588:746 | DONE wsp | em 16 16 |        |             |
5588:747 | DONE lbl | em 16 16 | 006754 |             | nt_one-minus                         
5588:748 | DONE dir | em 16 16 | 006754 | (2 bytes)   |         .byte 2, { NC }              
5588:748 | DONE dir | em 16 16 |        |             |                 02 01                    --  . .
5588:749 | DONE dir | em 16 16 | 006756 | (6 bytes)   |         .word nt_plus, xt_one-minus, 0053ef 
5588:749 | DONE dir | em 16 16 |        |             |                 4b 67 ee 53 ef 53        --  K g . S . S
5588:750 | DONE dir | em 16 16 | 00675c | (2 bytes)   |         .byte 31, 2d                 
5588:750 | DONE dir | em 16 16 |        |             |                 31 2d                    --  1 -
5588:751 | DONE wsp | em 16 16 |        |             |
5588:752 | DONE lbl | em 16 16 | 00675e |             | nt_one-plus                          
5588:753 | DONE dir | em 16 16 | 00675e | (2 bytes)   |         .byte 2, { NC }              
5588:753 | DONE dir | em 16 16 |        |             |                 02 01                    --  . .
5588:754 | DONE dir | em 16 16 | 006760 | (6 bytes)   |         .word nt_one-minus, xt_one-plus, 0053f1 
5588:754 | DONE dir | em 16 16 |        |             |                 54 67 f0 53 f1 53        --  T g . S . S
5588:755 | DONE dir | em 16 16 | 006766 | (2 bytes)   |         .byte 31, 2b                 
5588:755 | DONE dir | em 16 16 |        |             |                 31 2b                    --  1 +
5588:756 | DONE wsp | em 16 16 |        |             |
5588:757 | DONE lbl | em 16 16 | 006768 |             | nt_zero-notequal                     
5588:758 | DONE dir | em 16 16 | 006768 | (2 bytes)   |         .byte 3, { NC }              
5588:758 | DONE dir | em 16 16 |        |             |                 03 01                    --  . .
5588:759 | DONE dir | em 16 16 | 00676a | (6 bytes)   |         .word nt_one-plus, xt_zero-notequal, 0053bc 
5588:759 | DONE dir | em 16 16 |        |             |                 5e 67 b1 53 bc 53        --  ^ g . S . S
5588:760 | DONE dir | em 16 16 | 006770 | (3 bytes)   |         .byte 30, 3c, 3e             
5588:760 | DONE dir | em 16 16 |        |             |                 30 3c 3e                 --  0 < >
5588:761 | DONE wsp | em 16 16 |        |             |
5588:762 | DONE lbl | em 16 16 | 006773 |             | nt_zero-more                         
5588:763 | DONE dir | em 16 16 | 006773 | (2 bytes)   |         .byte 2, { NC }              
5588:763 | DONE dir | em 16 16 |        |             |                 02 01                    --  . .
5588:764 | DONE dir | em 16 16 | 006775 | (6 bytes)   |         .word nt_zero-notequal, xt_zero-more, 0053c7 
5588:764 | DONE dir | em 16 16 |        |             |                 68 67 bd 53 c7 53        --  h g . S . S
5588:765 | DONE dir | em 16 16 | 00677b | (2 bytes)   |         .byte 30, 3e                 
5588:765 | DONE dir | em 16 16 |        |             |                 30 3e                    --  0 >
5588:766 | DONE wsp | em 16 16 |        |             |
5588:767 | DONE lbl | em 16 16 | 00677d |             | nt_zero-less                         
5588:768 | DONE dir | em 16 16 | 00677d | (2 bytes)   |         .byte 2, { NC }              
5588:768 | DONE dir | em 16 16 |        |             |                 02 01                    --  . .
5588:769 | DONE dir | em 16 16 | 00677f | (6 bytes)   |         .word nt_zero-more, xt_zero-less, 0053b0 
5588:769 | DONE dir | em 16 16 |        |             |                 73 67 a5 53 b0 53        --  s g . S . S
5588:770 | DONE dir | em 16 16 | 006785 | (2 bytes)   |         .byte 30, 3c                 
5588:770 | DONE dir | em 16 16 |        |             |                 30 3c                    --  0 <
5588:771 | DONE wsp | em 16 16 |        |             |
5588:772 | DONE lbl | em 16 16 | 006787 |             | nt_greater                           
5588:773 | DONE dir | em 16 16 | 006787 | (2 bytes)   |         .byte 1, { NC }              
5588:773 | DONE dir | em 16 16 |        |             |                 01 01                    --  . .
5588:774 | DONE dir | em 16 16 | 006789 | (6 bytes)   |         .word nt_zero-less, xt_greater, 005136 
5588:774 | DONE dir | em 16 16 |        |             |                 7d 67 23 51 36 51        --  } g # Q 6 Q
5588:775 | DONE dir | em 16 16 | 00678f | (1 bytes)   |         .byte 3e                     
5588:775 | DONE dir | em 16 16 |        |             |                 3e                       --  >
5588:776 | DONE wsp | em 16 16 |        |             |
5588:777 | DONE lbl | em 16 16 | 006790 |             | nt_less                              
5588:778 | DONE dir | em 16 16 | 006790 | (2 bytes)   |         .byte 1, { NC }              
5588:778 | DONE dir | em 16 16 |        |             |                 01 01                    --  . .
5588:779 | DONE dir | em 16 16 | 006792 | (6 bytes)   |         .word nt_greater, xt_less, 00510c 
5588:779 | DONE dir | em 16 16 |        |             |                 87 67 f9 50 0c 51        --  . g . P  Q
5588:780 | DONE dir | em 16 16 | 006798 | (1 bytes)   |         .byte 3c                     
5588:780 | DONE dir | em 16 16 |        |             |                 3c                       --  <
5588:781 | DONE wsp | em 16 16 |        |             |
5588:782 | DONE lbl | em 16 16 | 006799 |             | nt_zero-equal                        
5588:783 | DONE dir | em 16 16 | 006799 | (2 bytes)   |         .byte 2, { NC }              
5588:783 | DONE dir | em 16 16 |        |             |                 02 01                    --  . .
5588:784 | DONE dir | em 16 16 | 00679b | (6 bytes)   |         .word nt_less, xt_zero-equal, 0053a4 
5588:784 | DONE dir | em 16 16 |        |             |                 90 67 99 53 a4 53        --  . g . S . S
5588:785 | DONE dir | em 16 16 | 0067a1 | (2 bytes)   |         .byte 30, 3d                 
5588:785 | DONE dir | em 16 16 |        |             |                 30 3d                    --  0 =
5588:786 | DONE wsp | em 16 16 |        |             |
5588:787 | DONE lbl | em 16 16 | 0067a3 |             | nt_not-equal                         
5588:788 | DONE dir | em 16 16 | 0067a3 | (2 bytes)   |         .byte 2, { NC }              
5588:788 | DONE dir | em 16 16 |        |             |                 02 01                    --  . .
5588:789 | DONE dir | em 16 16 | 0067a5 | (6 bytes)   |         .word nt_zero-equal, xt_not-equal, 005118 
5588:789 | DONE dir | em 16 16 |        |             |                 99 67 0d 51 18 51        --  . g  Q . Q
5588:790 | DONE dir | em 16 16 | 0067ab | (2 bytes)   |         .byte 3c, 3e                 
5588:790 | DONE dir | em 16 16 |        |             |                 3c 3e                    --  < >
5588:791 | DONE wsp | em 16 16 |        |             |
5588:792 | DONE lbl | em 16 16 | 0067ad |             | nt_equal                             
5588:793 | DONE dir | em 16 16 | 0067ad | (2 bytes)   |         .byte 1, { NC }              
5588:793 | DONE dir | em 16 16 |        |             |                 01 01                    --  . .
5588:794 | DONE dir | em 16 16 | 0067af | (6 bytes)   |         .word nt_not-equal, xt_equal, 005390 
5588:794 | DONE dir | em 16 16 |        |             |                 a3 67 85 53 90 53        --  . g . S . S
5588:795 | DONE dir | em 16 16 | 0067b5 | (1 bytes)   |         .byte 3d                     
5588:795 | DONE dir | em 16 16 |        |             |                 3d                       --  =
5588:796 | DONE wsp | em 16 16 |        |             |
5588:797 | DONE lbl | em 16 16 | 0067b6 |             | nt_false                             
5588:798 | DONE dir | em 16 16 | 0067b6 | (2 bytes)   |         .byte 5, { NC }              
5588:798 | DONE dir | em 16 16 |        |             |                 05 01                    --  . .
5588:799 | DONE dir | em 16 16 | 0067b8 | (6 bytes)   |         .word nt_equal, xt_zero, 005398 
5588:799 | DONE dir | em 16 16 |        |             |                 ad 67 91 53 98 53        --  . g . S . S
5588:800 | DONE dir | em 16 16 | 0067be | (5 bytes)   |         .byte 66, 61, 6c, 73, 65     
5588:800 | DONE dir | em 16 16 |        |             |                 66 61 6c 73 65           --  f a l s e
5588:801 | DONE wsp | em 16 16 |        |             |
5588:802 | DONE lbl | em 16 16 | 0067c3 |             | nt_true                              
5588:803 | DONE dir | em 16 16 | 0067c3 | (2 bytes)   |         .byte 4, { NC }              
5588:803 | DONE dir | em 16 16 |        |             |                 04 01                    --  . .
5588:804 | DONE dir | em 16 16 | 0067c5 | (6 bytes)   |         .word nt_false, xt_true, 005ee2 
5588:804 | DONE dir | em 16 16 |        |             |                 b6 67 db 5e e2 5e        --  . g . ^ . ^
5588:805 | DONE dir | em 16 16 | 0067cb | (4 bytes)   |         .byte 74, 72, 75, 65         
5588:805 | DONE dir | em 16 16 |        |             |                 74 72 75 65              --  t r u e
5588:806 | DONE wsp | em 16 16 |        |             |
5588:807 | DONE lbl | em 16 16 | 0067cf |             | nt_tonumber                          
5588:808 | DONE dir | em 16 16 | 0067cf | (2 bytes)   |         .byte 7, { NC }              see if actually NC
5588:808 | DONE dir | em 16 16 |        |             |                 07 01                    --  . .
5588:809 | DONE dir | em 16 16 | 0067d1 | (6 bytes)   |         .word nt_true, xt_tonumber, 0051bf 
5588:809 | DONE dir | em 16 16 |        |             |                 c3 67 63 51 bf 51        --  . g c Q . Q
5588:810 | DONE dir | em 16 16 | 0067d7 | (7 bytes)   |         .byte 3e, 6e, 75, 6d, 62, 65, 72 
5588:810 | DONE dir | em 16 16 |        |             |                 3e 6e 75 6d 62 65 72     --  > n u m b e r
5588:811 | DONE wsp | em 16 16 |        |             |
5588:812 | DONE lbl | em 16 16 | 0067de |             | nt_number                            
5588:813 | DONE dir | em 16 16 | 0067de | (2 bytes)   |         .byte 6, { NC }              see if actually NC
5588:813 | DONE dir | em 16 16 |        |             |                 06 01                    --  . .
5588:814 | DONE dir | em 16 16 | 0067e0 | (6 bytes)   |         .word nt_tonumber, xt_number, 005c3e 
5588:814 | DONE dir | em 16 16 |        |             |                 cf 67 bb 5b 3e 5c        --  . g . [ > \
5588:815 | DONE dir | em 16 16 | 0067e6 | (6 bytes)   |         .byte 6e, 75, 6d, 62, 65, 72 
5588:815 | DONE dir | em 16 16 |        |             |                 6e 75 6d 62 65 72        --  n u m b e r
5588:816 | DONE wsp | em 16 16 |        |             |
5588:817 | DONE lbl | em 16 16 | 0067ec |             | nt_two                               
5588:818 | DONE dir | em 16 16 | 0067ec | (2 bytes)   |         .byte 1, { NC }              
5588:818 | DONE dir | em 16 16 |        |             |                 01 01                    --  . .
5588:819 | DONE dir | em 16 16 | 0067ee | (6 bytes)   |         .word nt_number, xt_two, 0053f9 
5588:819 | DONE dir | em 16 16 |        |             |                 de 67 f2 53 f9 53        --  . g . S . S
5588:820 | DONE dir | em 16 16 | 0067f4 | (1 bytes)   |         .byte 32                     
5588:820 | DONE dir | em 16 16 |        |             |                 32                       --  2
5588:821 | DONE wsp | em 16 16 |        |             |
5588:822 | DONE lbl | em 16 16 | 0067f5 |             | nt_one                               
5588:823 | DONE dir | em 16 16 | 0067f5 | (2 bytes)   |         .byte 1, { NC }              
5588:823 | DONE dir | em 16 16 |        |             |                 01 01                    --  . .
5588:824 | DONE dir | em 16 16 | 0067f7 | (6 bytes)   |         .word nt_two, xt_one, 0053ed 
5588:824 | DONE dir | em 16 16 |        |             |                 ec 67 e6 53 ed 53        --  . g . S . S
5588:825 | DONE dir | em 16 16 | 0067fd | (1 bytes)   |         .byte 31                     
5588:825 | DONE dir | em 16 16 |        |             |                 31                       --  1
5588:826 | DONE wsp | em 16 16 |        |             |
5588:827 | DONE lbl | em 16 16 | 0067fe |             | nt_zero                              
5588:828 | DONE dir | em 16 16 | 0067fe | (2 bytes)   |         .byte 1, { NC }              
5588:828 | DONE dir | em 16 16 |        |             |                 01 01                    --  . .
5588:829 | DONE dir | em 16 16 | 006800 | (6 bytes)   |         .word nt_one, xt_zero, 005398 
5588:829 | DONE dir | em 16 16 |        |             |                 f5 67 91 53 98 53        --  . g . S . S
5588:830 | DONE dir | em 16 16 | 006806 | (1 bytes)   |         .byte 30                     
5588:830 | DONE dir | em 16 16 |        |             |                 30                       --  0
5588:831 | DONE wsp | em 16 16 |        |             |
5588:832 | DONE lbl | em 16 16 | 006807 |             | nt_find-name                         
5588:833 | DONE dir | em 16 16 | 006807 | (2 bytes)   |         .byte 9, 0                   
5588:833 | DONE dir | em 16 16 |        |             |                 09 00                    --  	 .
5588:834 | DONE dir | em 16 16 | 006809 | (6 bytes)   |         .word nt_zero, xt_find-name, 0059f1 
5588:834 | DONE dir | em 16 16 |        |             |                 fe 67 9b 59 f1 59        --  . g . Y . Y
5588:835 | DONE dir | em 16 16 | 00680f | (9 bytes)   |         .byte 66, 69, 6e, 64, 2d, 6e, 61, 6d, 65 
5588:835 | DONE dir | em 16 16 |        |             |                 66 69 6e 64 2d 6e 61 6d  --  f i n d - n a m
5588:835 | DONE dir | em 16 16 |        |             |                 65                       --  e
5588:836 | DONE wsp | em 16 16 |        |             |
5588:837 | DONE lbl | em 16 16 | 006818 |             | nt_refill                            
5588:838 | DONE dir | em 16 16 | 006818 | (2 bytes)   |         .byte 6, 0                   TODO check flags
5588:838 | DONE dir | em 16 16 |        |             |                 06 00                    --  . .
5588:839 | DONE dir | em 16 16 | 00681a | (6 bytes)   |         .word nt_find-name, xt_refill, 005d61 
5588:839 | DONE dir | em 16 16 |        |             |                 07 68 38 5d 61 5d        --  . h 8 ] a ]
5588:840 | DONE dir | em 16 16 | 006820 | (6 bytes)   |         .byte 72, 65, 66, 69, 6c, 6c 
5588:840 | DONE dir | em 16 16 |        |             |                 72 65 66 69 6c 6c        --  r e f i l l
5588:841 | DONE wsp | em 16 16 |        |             |
5588:842 | DONE lbl | em 16 16 | 006826 |             | nt_parse-name                        
5588:843 | DONE dir | em 16 16 | 006826 | (2 bytes)   |         .byte &10, 0                 
5588:843 | DONE dir | em 16 16 |        |             |                 0a 00                    --  
 .
5588:844 | DONE dir | em 16 16 | 006828 | (6 bytes)   |         .word nt_refill, xt_parse-name, 005cd4 
5588:844 | DONE dir | em 16 16 |        |             |                 18 68 6e 5c d4 5c        --  . h n \ . \
5588:845 | DONE dir | em 16 16 | 00682e | (10 bytes)  |         .byte 70, 61, 72, 73, 65, 2d, 6e, 61, 6d, 65 
5588:845 | DONE dir | em 16 16 |        |             |                 70 61 72 73 65 2d 6e 61  --  p a r s e - n a
5588:845 | DONE dir | em 16 16 |        |             |                 6d 65                    --  m e
5588:846 | DONE wsp | em 16 16 |        |             |
5588:847 | DONE lbl | em 16 16 | 006838 |             | nt_source-id                         
5588:848 | DONE dir | em 16 16 | 006838 | (2 bytes)   |         .byte 9, { NC }              
5588:848 | DONE dir | em 16 16 |        |             |                 09 01                    --  	 .
5588:849 | DONE dir | em 16 16 | 00683a | (6 bytes)   |         .word nt_parse-name, xt_source-id, 005ea3 
5588:849 | DONE dir | em 16 16 |        |             |                 26 68 9d 5e a3 5e        --  & h . ^ . ^
5588:850 | DONE dir | em 16 16 | 006840 | (9 bytes)   |         .byte 73, 6f, 75, 72, 63, 65, 2d, 69, 64 
5588:850 | DONE dir | em 16 16 |        |             |                 73 6f 75 72 63 65 2d 69  --  s o u r c e - i
5588:850 | DONE dir | em 16 16 |        |             |                 64                       --  d
5588:851 | DONE wsp | em 16 16 |        |             |
5588:852 | DONE lbl | em 16 16 | 006849 |             | nt_comma                             
5588:853 | DONE dir | em 16 16 | 006849 | (2 bytes)   |         .byte 1, { NC }              
5588:853 | DONE dir | em 16 16 |        |             |                 01 01                    --  . .
5588:854 | DONE dir | em 16 16 | 00684b | (6 bytes)   |         .word nt_source-id, xt_comma, 005250 
5588:854 | DONE dir | em 16 16 |        |             |                 38 68 45 52 50 52        --  8 h E R P R
5588:855 | DONE dir | em 16 16 | 006851 | (1 bytes)   |         .byte 2c                     
5588:855 | DONE dir | em 16 16 |        |             |                 2c                       --  ,
5588:856 | DONE wsp | em 16 16 |        |             |
5588:857 | DONE lbl | em 16 16 | 006852 |             | nt_accept                            
5588:858 | DONE dir | em 16 16 | 006852 | (2 bytes)   |         .byte 6, 00                  TODO check flags
5588:858 | DONE dir | em 16 16 |        |             |                 06 00                    --  . .
5588:859 | DONE dir | em 16 16 | 006854 | (6 bytes)   |         .word nt_comma, xt_accept, 005541 
5588:859 | DONE dir | em 16 16 |        |             |                 49 68 b3 54 41 55        --  I h . T A U
5588:860 | DONE dir | em 16 16 | 00685a | (6 bytes)   |         .byte 61, 63, 63, 65, 70, 74 
5588:860 | DONE dir | em 16 16 |        |             |                 61 63 63 65 70 74        --  a c c e p t
5588:861 | DONE wsp | em 16 16 |        |             |
5588:862 | DONE lbl | em 16 16 | 006860 |             | nt_key                               
5588:863 | DONE dir | em 16 16 | 006860 | (2 bytes)   |         .byte 3, { NC }              
5588:863 | DONE dir | em 16 16 |        |             |                 03 01                    --  . .
5588:864 | DONE dir | em 16 16 | 006862 | (6 bytes)   |         .word nt_accept, xt_key, 005a55 
5588:864 | DONE dir | em 16 16 |        |             |                 52 68 46 5a 55 5a        --  R h F Z U Z
5588:865 | DONE dir | em 16 16 | 006868 | (3 bytes)   |         .byte 6b, 65, 79             
5588:865 | DONE dir | em 16 16 |        |             |                 6b 65 79                 --  k e y
5588:866 | DONE wsp | em 16 16 |        |             |
5588:867 | DONE lbl | em 16 16 | 00686b |             | nt_backslash                         
5588:868 | DONE dir | em 16 16 | 00686b | (2 bytes)   |         .byte 1, { NC }              
5588:868 | DONE dir | em 16 16 |        |             |                 01 01                    --  . .
5588:869 | DONE dir | em 16 16 | 00686d | (6 bytes)   |         .word nt_key, xt_backslash, 005329 
5588:869 | DONE dir | em 16 16 |        |             |                 60 68 25 53 29 53        --  ` h % S ) S
5588:870 | DONE dir | em 16 16 | 006873 | (1 bytes)   |         .byte 5c                     
5588:870 | DONE dir | em 16 16 |        |             |                 5c                       --  \
5588:871 | DONE wsp | em 16 16 |        |             |
5588:872 | DONE lbl | em 16 16 | 006874 |             | nt_qdup                              
5588:873 | DONE dir | em 16 16 | 006874 | (2 bytes)   |         .byte 4, { NC }              
5588:873 | DONE dir | em 16 16 |        |             |                 04 01                    --  . .
5588:874 | DONE dir | em 16 16 | 006876 | (6 bytes)   |         .word nt_backslash, xt_qdup, 0052cd 
5588:874 | DONE dir | em 16 16 |        |             |                 6b 68 c6 52 cd 52        --  k h . R . R
5588:875 | DONE dir | em 16 16 | 00687c | (4 bytes)   |         .byte 3f, 64, 75, 70         
5588:875 | DONE dir | em 16 16 |        |             |                 3f 64 75 70              --  ? d u p
5588:876 | DONE wsp | em 16 16 |        |             |
5588:877 | DONE lbl | em 16 16 | 006880 |             | nt_tuck                              
5588:878 | DONE dir | em 16 16 | 006880 | (2 bytes)   |         .byte 4, { NC }              
5588:878 | DONE dir | em 16 16 |        |             |                 04 01                    --  . .
5588:879 | DONE dir | em 16 16 | 006882 | (6 bytes)   |         .word nt_qdup, xt_tuck, 005eeb 
5588:879 | DONE dir | em 16 16 |        |             |                 74 68 e3 5e eb 5e        --  t h . ^ . ^
5588:880 | DONE dir | em 16 16 | 006888 | (4 bytes)   |         .byte 74, 75, 63, 6b         
5588:880 | DONE dir | em 16 16 |        |             |                 74 75 63 6b              --  t u c k
5588:881 | DONE wsp | em 16 16 |        |             |
5588:882 | DONE lbl | em 16 16 | 00688c |             | nt_nip                               
5588:883 | DONE dir | em 16 16 | 00688c | (2 bytes)   |         .byte 3, { NC }              
5588:883 | DONE dir | em 16 16 |        |             |                 03 01                    --  . .
5588:884 | DONE dir | em 16 16 | 00688e | (6 bytes)   |         .word nt_tuck, xt_nip, 005bba 
5588:884 | DONE dir | em 16 16 |        |             |                 80 68 b8 5b ba 5b        --  . h . [ . [
5588:885 | DONE dir | em 16 16 | 006894 | (3 bytes)   |         .byte 6e, 69, 70             
5588:885 | DONE dir | em 16 16 |        |             |                 6e 69 70                 --  n i p
5588:886 | DONE wsp | em 16 16 |        |             |
5588:887 | DONE lbl | em 16 16 | 006897 |             | nt_mrot                              
5588:888 | DONE dir | em 16 16 | 006897 | (2 bytes)   |         .byte 4, { NC }              
5588:888 | DONE dir | em 16 16 |        |             |                 04 01                    --  . .
5588:889 | DONE dir | em 16 16 | 006899 | (6 bytes)   |         .word nt_nip, xt_mrot, 00536d 
5588:889 | DONE dir | em 16 16 |        |             |                 8c 68 65 53 6d 53        --  . h e S m S
5588:890 | DONE dir | em 16 16 | 00689f | (4 bytes)   |         .byte 2d, 72, 6f, 74         
5588:890 | DONE dir | em 16 16 |        |             |                 2d 72 6f 74              --  - r o t
5588:891 | DONE wsp | em 16 16 |        |             |
5588:892 | DONE lbl | em 16 16 | 0068a3 |             | nt_rot                               
5588:893 | DONE dir | em 16 16 | 0068a3 | (2 bytes)   |         .byte 3, { NC }              
5588:893 | DONE dir | em 16 16 |        |             |                 03 01                    --  . .
5588:894 | DONE dir | em 16 16 | 0068a5 | (6 bytes)   |         .word nt_mrot, xt_rot, 005d6a 
5588:894 | DONE dir | em 16 16 |        |             |                 97 68 62 5d 6a 5d        --  . h b ] j ]
5588:895 | DONE dir | em 16 16 | 0068ab | (3 bytes)   |         .byte 72, 6f, 74             
5588:895 | DONE dir | em 16 16 |        |             |                 72 6f 74                 --  r o t
5588:896 | DONE wsp | em 16 16 |        |             |
5588:897 | DONE lbl | em 16 16 | 0068ae |             | nt_2over                             
5588:898 | DONE dir | em 16 16 | 0068ae | (2 bytes)   |         .byte 5, { NC }              
5588:898 | DONE dir | em 16 16 |        |             |                 05 01                    --  . .
5588:899 | DONE dir | em 16 16 | 0068b0 | (6 bytes)   |         .word nt_rot, xt_2over, 00542d 
5588:899 | DONE dir | em 16 16 |        |             |                 a3 68 21 54 2d 54        --  . h ! T - T
5588:900 | DONE dir | em 16 16 | 0068b6 | (5 bytes)   |         .byte 32, 6f, 76, 65, 72     
5588:900 | DONE dir | em 16 16 |        |             |                 32 6f 76 65 72           --  2 o v e r
5588:901 | DONE wsp | em 16 16 |        |             |
5588:902 | DONE lbl | em 16 16 | 0068bb |             | nt_2swap                             
5588:903 | DONE dir | em 16 16 | 0068bb | (2 bytes)   |         .byte 5, { NC }              
5588:903 | DONE dir | em 16 16 |        |             |                 05 01                    --  . .
5588:904 | DONE dir | em 16 16 | 0068bd | (6 bytes)   |         .word nt_2over, xt_2swap, 00545d 
5588:904 | DONE dir | em 16 16 |        |             |                 ae 68 4d 54 5d 54        --  . h M T ] T
5588:905 | DONE dir | em 16 16 | 0068c3 | (5 bytes)   |         .byte 32, 73, 77, 61, 70     
5588:905 | DONE dir | em 16 16 |        |             |                 32 73 77 61 70           --  2 s w a p
5588:906 | DONE wsp | em 16 16 |        |             |
5588:907 | DONE lbl | em 16 16 | 0068c8 |             | nt_execute                           
5588:908 | DONE dir | em 16 16 | 0068c8 | (2 bytes)   |         .byte 7, { NC }              
5588:908 | DONE dir | em 16 16 |        |             |                 07 01                    --  . .
5588:909 | DONE dir | em 16 16 | 0068ca | (6 bytes)   |         .word nt_2swap, xt_execute, 00596a 
5588:909 | DONE dir | em 16 16 |        |             |                 bb 68 60 59 6a 59        --  . h ` Y j Y
5588:910 | DONE dir | em 16 16 | 0068d0 | (7 bytes)   |         .byte 65, 78, 65, 63, 75, 74, 65 
5588:910 | DONE dir | em 16 16 |        |             |                 65 78 65 63 75 74 65     --  e x e c u t e
5588:911 | DONE wsp | em 16 16 |        |             |
5588:912 | DONE lbl | em 16 16 | 0068d7 |             | nt_here                              
5588:913 | DONE dir | em 16 16 | 0068d7 | (2 bytes)   |         .byte 4, { NC }              
5588:913 | DONE dir | em 16 16 |        |             |                 04 01                    --  . .
5588:914 | DONE dir | em 16 16 | 0068d9 | (6 bytes)   |         .word nt_execute, xt_here, 005aa2 
5588:914 | DONE dir | em 16 16 |        |             |                 c8 68 9c 5a a2 5a        --  . h . Z . Z
5588:915 | DONE dir | em 16 16 | 0068df | (4 bytes)   |         .byte 68, 65, 72, 65         
5588:915 | DONE dir | em 16 16 |        |             |                 68 65 72 65              --  h e r e
5588:916 | DONE wsp | em 16 16 |        |             |
5588:917 | DONE lbl | em 16 16 | 0068e3 |             | nt_2drop                             
5588:918 | DONE dir | em 16 16 | 0068e3 | (2 bytes)   |         .byte 5, { NC }              
5588:918 | DONE dir | em 16 16 |        |             |                 05 01                    --  . .
5588:919 | DONE dir | em 16 16 | 0068e5 | (6 bytes)   |         .word nt_here, xt_2drop, 005415 
5588:919 | DONE dir | em 16 16 |        |             |                 d7 68 0f 54 15 54        --  . h . T . T
5588:920 | DONE dir | em 16 16 | 0068eb | (5 bytes)   |         .byte 32, 64, 72, 6f, 70     
5588:920 | DONE dir | em 16 16 |        |             |                 32 64 72 6f 70           --  2 d r o p
5588:921 | DONE wsp | em 16 16 |        |             |
5588:922 | DONE lbl | em 16 16 | 0068f0 |             | nt_rfetch                            
5588:923 | DONE dir | em 16 16 | 0068f0 | (2 bytes)   |         .byte 2, 0                   we follow Gforth in making this not CO
5588:923 | DONE dir | em 16 16 |        |             |                 02 00                    --  . .
5588:924 | DONE dir | em 16 16 | 0068f2 | (6 bytes)   |         .word nt_2drop, xt_rfetch, 005d2f 
5588:924 | DONE dir | em 16 16 |        |             |                 e3 68 27 5d 2f 5d        --  . h ' ] / ]
5588:925 | DONE dir | em 16 16 | 0068f8 | (2 bytes)   |         .byte 72, 40                 
5588:925 | DONE dir | em 16 16 |        |             |                 72 40                    --  r @
5588:926 | DONE wsp | em 16 16 |        |             |
5588:927 | DONE lbl | em 16 16 | 0068fa |             | nt_fromr                             
5588:928 | DONE dir | em 16 16 | 0068fa | (2 bytes)   |         .byte 2, { CO + NC }         NC is special case
5588:928 | DONE dir | em 16 16 |        |             |                 02 05                    --  . .
5588:929 | DONE dir | em 16 16 | 0068fc | (6 bytes)   |         .word nt_rfetch, xt_fromr, 005d37 
5588:929 | DONE dir | em 16 16 |        |             |                 f0 68 30 5d 37 5d        --  . h 0 ] 7 ]
5588:930 | DONE dir | em 16 16 | 006902 | (2 bytes)   |         .byte 72, 3e                 
5588:930 | DONE dir | em 16 16 |        |             |                 72 3e                    --  r >
5588:931 | DONE wsp | em 16 16 |        |             |
5588:932 | DONE lbl | em 16 16 | 006904 |             | nt_tor                               
5588:933 | DONE dir | em 16 16 | 006904 | (2 bytes)   |         .byte 2, { CO + NC }         NC is special case
5588:933 | DONE dir | em 16 16 |        |             |                 02 05                    --  . .
5588:934 | DONE dir | em 16 16 | 006906 | (6 bytes)   |         .word nt_fromr, xt_tor, 0051c7 
5588:934 | DONE dir | em 16 16 |        |             |                 fa 68 c0 51 c7 51        --  . h . Q . Q
5588:935 | DONE dir | em 16 16 | 00690c | (2 bytes)   |         .byte 3e, 72                 
5588:935 | DONE dir | em 16 16 |        |             |                 3e 72                    --  > r
5588:936 | DONE wsp | em 16 16 |        |             |
5588:937 | DONE lbl | em 16 16 | 00690e |             | nt_digitq                            
5588:938 | DONE dir | em 16 16 | 00690e | (2 bytes)   |         .byte 6, { NC }              
5588:938 | DONE dir | em 16 16 |        |             |                 06 01                    --  . .
5588:939 | DONE dir | em 16 16 | 006910 | (6 bytes)   |         .word nt_tor, xt_digitq, 00581c 
5588:939 | DONE dir | em 16 16 |        |             |                 04 69 e1 57 1c 58        --  . i . W . X
5588:940 | DONE dir | em 16 16 | 006916 | (6 bytes)   |         .byte 64, 69, 67, 69, 74, 3f 
5588:940 | DONE dir | em 16 16 |        |             |                 64 69 67 69 74 3f        --  d i g i t ?
5588:941 | DONE wsp | em 16 16 |        |             |
5588:942 | DONE lbl | em 16 16 | 00691c |             | nt_bounds                            
5588:943 | DONE dir | em 16 16 | 00691c | (2 bytes)   |         .byte 6, { NC }              
5588:943 | DONE dir | em 16 16 |        |             |                 06 01                    --  . .
5588:944 | DONE dir | em 16 16 | 00691e | (6 bytes)   |         .word nt_digitq, xt_bounds, 0055db 
5588:944 | DONE dir | em 16 16 |        |             |                 0e 69 d2 55 db 55        --  . i . U . U
5588:945 | DONE dir | em 16 16 | 006924 | (6 bytes)   |         .byte 62, 6f, 75, 6e, 64, 73 
5588:945 | DONE dir | em 16 16 |        |             |                 62 6f 75 6e 64 73        --  b o u n d s
5588:946 | DONE wsp | em 16 16 |        |             |
5588:947 | DONE lbl | em 16 16 | 00692a |             | nt_over                              
5588:948 | DONE dir | em 16 16 | 00692a | (2 bytes)   |         .byte 4, { NC }              
5588:948 | DONE dir | em 16 16 |        |             |                 04 01                    --  . .
5588:949 | DONE dir | em 16 16 | 00692c | (6 bytes)   |         .word nt_bounds, xt_over, 005c54 
5588:949 | DONE dir | em 16 16 |        |             |                 1c 69 4e 5c 54 5c        --  . i N \ T \
5588:950 | DONE dir | em 16 16 | 006932 | (4 bytes)   |         .byte 6f, 76, 65, 72         
5588:950 | DONE dir | em 16 16 |        |             |                 6f 76 65 72              --  o v e r
5588:951 | DONE wsp | em 16 16 |        |             |
5588:952 | DONE lbl | em 16 16 | 006936 |             | nt_fetch                             
5588:953 | DONE dir | em 16 16 | 006936 | (2 bytes)   |         .byte 1, { NC }              
5588:953 | DONE dir | em 16 16 |        |             |                 01 01                    --  . .
5588:954 | DONE dir | em 16 16 | 006938 | (6 bytes)   |         .word nt_over, xt_fetch, 0052de 
5588:954 | DONE dir | em 16 16 |        |             |                 2a 69 da 52 de 52        --  * i . R . R
5588:955 | DONE dir | em 16 16 | 00693e | (1 bytes)   |         .byte 40                     
5588:955 | DONE dir | em 16 16 |        |             |                 40                       --  @
5588:956 | DONE wsp | em 16 16 |        |             |
5588:957 | DONE lbl | em 16 16 | 00693f |             | nt_store                             
5588:958 | DONE dir | em 16 16 | 00693f | (2 bytes)   |         .byte 1, { NC }              
5588:958 | DONE dir | em 16 16 |        |             |                 01 01                    --  . .
5588:959 | DONE dir | em 16 16 | 006941 | (6 bytes)   |         .word nt_fetch, xt_store, 0052d9 
5588:959 | DONE dir | em 16 16 |        |             |                 36 69 ce 52 d9 52        --  6 i . R . R
5588:960 | DONE dir | em 16 16 | 006947 | (1 bytes)   |         .byte 21                     
5588:960 | DONE dir | em 16 16 |        |             |                 21                       --  !
5588:961 | DONE wsp | em 16 16 |        |             |
5588:962 | DONE lbl | em 16 16 | 006948 |             | nt_swap                              
5588:963 | DONE dir | em 16 16 | 006948 | (2 bytes)   |         .byte 4, { NC }              
5588:963 | DONE dir | em 16 16 |        |             |                 04 01                    --  . .
5588:964 | DONE dir | em 16 16 | 00694a | (6 bytes)   |         .word nt_store, xt_swap, 005ed0 
5588:964 | DONE dir | em 16 16 |        |             |                 3f 69 cb 5e d0 5e        --  ? i . ^ . ^
5588:965 | DONE dir | em 16 16 | 006950 | (4 bytes)   |         .byte 73, 77, 61, 70         
5588:965 | DONE dir | em 16 16 |        |             |                 73 77 61 70              --  s w a p
5588:966 | DONE wsp | em 16 16 |        |             |
5588:967 | DONE lbl | em 16 16 | 006954 |             | nt_dup                               
5588:968 | DONE dir | em 16 16 | 006954 | (2 bytes)   |         .byte 3, { NC }              
5588:968 | DONE dir | em 16 16 |        |             |                 03 01                    --  . .
5588:969 | DONE dir | em 16 16 | 006956 | (6 bytes)   |         .word nt_swap, xt_dup, 005903 
5588:969 | DONE dir | em 16 16 |        |             |                 48 69 ff 58 03 59        --  H i . X . Y
5588:970 | DONE dir | em 16 16 | 00695c | (3 bytes)   |         .byte 64, 75, 70             
5588:970 | DONE dir | em 16 16 |        |             |                 64 75 70                 --  d u p
5588:971 | DONE wsp | em 16 16 |        |             |
5588:972 | DONE cmt | em 16 16 |        |             | ; DROP is always the first entry in dictionary
5588:973 | DONE lbl | em 16 16 | 00695f |             | nt_drop                              
5588:974 | DONE dir | em 16 16 | 00695f | (2 bytes)   |         .byte 4, { NC }              
5588:974 | DONE dir | em 16 16 |        |             |                 04 01                    --  . .
5588:975 | DONE dir | em 16 16 | 006961 | (6 bytes)   |         .word nt_dup, xt_drop, 0058e0 
5588:975 | DONE dir | em 16 16 |        |             |                 54 69 dc 58 e0 58        --  T i . X . X
5588:976 | DONE dir | em 16 16 | 006967 | (4 bytes)   |         .byte 64, 72, 6f, 70         
5588:976 | DONE dir | em 16 16 |        |             |                 64 72 6f 70              --  d r o p
5588:977 | DONE wsp | em 16 16 |        |             |
5588:978 | DONE cmt | em 16 16 |        |             | ; END
5589:000 | DONE wsp | em 16 16 |        |             |
5590:000 | DONE cmt | em 16 16 |        |             | ; ===================================================================
5591:000 | DONE cmt | em 16 16 |        |             | ; CODE FIELD ROUTINES
5592:000 | DONE wsp | em 16 16 |        |             |
5593:000 | DONE cmt | em 16 16 |        |             | ; -------------------------------------------------------------------
5594:000 | DONE cmt | em 16 16 |        |             | ; DOCONST
5595:000 | DONE cmt | em 16 16 |        |             | ; Execute a constant: Push the data in the first two byte of the Data Field onto
5596:000 | DONE cmt | em 16 16 |        |             | ; the stack
5597:000 | DONE lbl | em 16 16 | 00696b |             | doconst                              
5598:000 | DONE dir | em 16 16 |        |             |         .!a16                        
5599:000 | DONE dir | em 16 16 |        |             |         .!xy16                       
5600:000 | DONE ins | em 16 16 | 00696b | ca          |                 dex                  make room on Data Stack
5601:000 | DONE ins | em 16 16 | 00696c | ca          |                 dex                  
5602:000 | DONE ins | em 16 16 | 00696d | 94 00       |                 sty.dx 00            
5603:000 | DONE wsp | em 16 16 |        |             |
5604:000 | DONE cmt | em 16 16 |        |             |                 ; The value we need is stored two bytes after the JSR return
5605:000 | DONE cmt | em 16 16 |        |             |                 ; address, which in turn is what is on top of the Return Stack
5606:000 | DONE ins | em 16 16 | 00696f | 68          |                 pla                  get the return address
5607:000 | DONE ins | em 16 16 | 006970 | 85 1c       |                 sta.d 00001c         
5608:000 | DONE wsp | em 16 16 |        |             |
5609:000 | DONE cmt | em 16 16 |        |             |                 ; start Y as index off with 1 instead of zero because of 65816's
5610:000 | DONE cmt | em 16 16 |        |             |                 ; address handling
5611:000 | DONE ins | em 16 16 | 006972 | a0 01 00    |                 ldy.# 0001           
5612:000 | DONE ins | em 16 16 | 006975 | b1 1c       |                 lda.diy 00001c       LDA (TMP1),Y
5613:000 | DONE ins | em 16 16 | 006977 | a8          |                 tay                  
5614:000 | DONE wsp | em 16 16 |        |             |
5615:000 | DONE ins | em 16 16 | 006978 | 60          |                 rts                  takes us to original caller
5616:000 | DONE wsp | em 16 16 |        |             |
5617:000 | DONE wsp | em 16 16 |        |             |
5618:000 | DONE cmt | em 16 16 |        |             | ; -------------------------------------------------------------------
5619:000 | DONE cmt | em 16 16 |        |             | ; DODEFER
5620:000 | DONE cmt | em 16 16 |        |             | ; Execute a DEFER statement at runtime: Execute the address we find after the
5621:000 | DONE cmt | em 16 16 |        |             | ; caller in the Data Field
5622:000 | DONE lbl | em 16 16 | 006979 |             | dodefer                              
5623:000 | DONE cmt | em 16 16 |        |             |                 ; the xt we need is stored in the two bytes after the JSR return
5624:000 | DONE cmt | em 16 16 |        |             |                 ; address, which is what is on top of the Retun Stack. So all we
5625:000 | DONE cmt | em 16 16 |        |             |                 ; have to do is replace our return jump with what we find there
5626:000 | DONE ins | em 16 16 | 006979 | 68          |                 pla                  this is the address where we find the xt ...
5627:000 | DONE ins | em 16 16 | 00697a | 1a          |                 inc.a                ... except one byte later
5628:000 | DONE ins | em 16 16 | 00697b | 85 1c       |                 sta.d 00001c         
5629:000 | DONE ins | em 16 16 | 00697d | b2 1c       |                 lda.di 00001c        LDA (TMP1)
5630:000 | DONE ins | em 16 16 | 00697f | 3a          |                 dec.a                Now we need to move one byte back
5631:000 | DONE ins | em 16 16 | 006980 | 48          |                 pha                  Return new address
5632:000 | DONE wsp | em 16 16 |        |             |
5633:000 | DONE ins | em 16 16 | 006981 | 60          |                 rts                  This is actually a jump to the new target
5634:000 | DONE wsp | em 16 16 |        |             |
5635:000 | DONE lbl | em 16 16 | 006982 |             | defer_error                          
5636:000 | DONE cmt | em 16 16 |        |             |                 ; if the defer has not been defined with an IS word, we land
5637:000 | DONE cmt | em 16 16 |        |             |                 ; here by default
5638:000 | DONE ins | em 16 16 | 006982 | a9 cd 70    |                 lda.# 0070cd         
5639:000 | DONE ins | em 16 16 | 006985 | 4c 21 6a    |                 jmp 006a21           
5640:000 | DONE wsp | em 16 16 |        |             |
5641:000 | DONE wsp | em 16 16 |        |             |
5642:000 | DONE cmt | em 16 16 |        |             | ; -------------------------------------------------------------------
5643:000 | DONE cmt | em 16 16 |        |             | ; DODOES
5644:000 | DONE cmt | em 16 16 |        |             | ; Used in combination with DOES>'s runtime portion to actually do the work of
5645:000 | DONE cmt | em 16 16 |        |             | ; the new word. See DOES> and docs/create-does.txt for details. Uses tmp3
5646:000 | DONE lbl | em 16 16 | 006988 |             | dodoes                               
5647:000 | DONE cmt | em 16 16 |        |             |                 ; Assumes the address of the CFA of the original defining word
5648:000 | DONE cmt | em 16 16 |        |             |                 ; (say, CONSTANT) is on the top of the Return Stack. Save it for
5649:000 | DONE cmt | em 16 16 |        |             |                 ; a later jump, adding one byte because of the way the 65816
5650:000 | DONE cmt | em 16 16 |        |             |                 ; works
5651:000 | DONE ins | em 16 16 | 006988 | 68          |                 pla                  
5652:000 | DONE ins | em 16 16 | 006989 | 1a          |                 inc.a                
5653:000 | DONE ins | em 16 16 | 00698a | 85 20       |                 sta.d 000020         
5654:000 | DONE wsp | em 16 16 |        |             |
5655:000 | DONE cmt | em 16 16 |        |             |                 ; Next on the Return Stack should be the address of the PFA of
5656:000 | DONE cmt | em 16 16 |        |             |                 ; the calling defined word (say, the name of whatever constant we
5657:000 | DONE cmt | em 16 16 |        |             |                 ; just defined). Move this to the Data Stack, again adding one.
5658:000 | DONE ins | em 16 16 | 00698c | ca          |                 dex                  
5659:000 | DONE ins | em 16 16 | 00698d | ca          |                 dex                  
5660:000 | DONE ins | em 16 16 | 00698e | 94 00       |                 sty.dx 00            
5661:000 | DONE wsp | em 16 16 |        |             |
5662:000 | DONE ins | em 16 16 | 006990 | 7a          |                 ply                  
5663:000 | DONE ins | em 16 16 | 006991 | c8          |                 iny                  
5664:000 | DONE wsp | em 16 16 |        |             |
5665:000 | DONE cmt | em 16 16 |        |             |                 ; This leaves the return address from the original main routine
5666:000 | DONE cmt | em 16 16 |        |             |                 ; on top of the Return Stack. We leave that untouched and jump
5667:000 | DONE cmt | em 16 16 |        |             |                 ; to the special code of the defining word. It's RTS instruction
5668:000 | DONE cmt | em 16 16 |        |             |                 ; will take us back to the main routine
5669:000 | DONE ins | em 16 16 | 006992 | 6c 20 00    |                 jmp.i 000020         JMP (TMP3)
5670:000 | DONE wsp | em 16 16 |        |             |
5671:000 | DONE wsp | em 16 16 |        |             |
5672:000 | DONE cmt | em 16 16 |        |             | ; -------------------------------------------------------------------
5673:000 | DONE cmt | em 16 16 |        |             | ; DOVAR
5674:000 | DONE cmt | em 16 16 |        |             | ; Execute a variable: Push the address of the first bytes of the Data Field onto
5675:000 | DONE cmt | em 16 16 |        |             | ; the stack. This is called with JSR so we can pick up the address of the
5676:000 | DONE cmt | em 16 16 |        |             | ; calling variable off the 65816's Return Stack. The final RTS takes us to the
5677:000 | DONE cmt | em 16 16 |        |             | ; original caller of the routine that in turn called DOVAR. This is the default
5678:000 | DONE cmt | em 16 16 |        |             | ; routine installed with CREATE
5679:000 | DONE lbl | em 16 16 | 006995 |             | dovar                                
5680:000 | DONE dir | em 16 16 |        |             |         .!a16                        
5681:000 | DONE dir | em 16 16 |        |             |         .!xy16                       
5682:000 | DONE ins | em 16 16 | 006995 | ca          |                 dex                  make room on Data Stack
5683:000 | DONE ins | em 16 16 | 006996 | ca          |                 dex                  
5684:000 | DONE ins | em 16 16 | 006997 | 94 00       |                 sty.dx 00            
5685:000 | DONE wsp | em 16 16 |        |             |
5686:000 | DONE cmt | em 16 16 |        |             |                 ; The address we need is stored in the two bytes after the JSR
5687:000 | DONE cmt | em 16 16 |        |             |                 ; return address, which in turn is what is on top of the Return
5688:000 | DONE cmt | em 16 16 |        |             |                 ; Stack
5689:000 | DONE ins | em 16 16 | 006999 | 7a          |                 ply                  value is now TOS
5690:000 | DONE ins | em 16 16 | 00699a | c8          |                 iny                  add one because of 65816's address handling
5691:000 | DONE wsp | em 16 16 |        |             |
5692:000 | DONE ins | em 16 16 | 00699b | 60          |                 rts                  takes us to original caller
5693:000 | DONE wsp | em 16 16 |        |             |
5694:000 | DONE wsp | em 16 16 |        |             |
5695:000 | DONE cmt | em 16 16 |        |             | ; ===================================================================
5696:000 | DONE cmt | em 16 16 |        |             | ; LOW LEVEL HELPER FUNCTIONS
5697:000 | DONE wsp | em 16 16 |        |             |
5698:000 | DONE wsp | em 16 16 |        |             |
5699:000 | DONE cmt | em 16 16 |        |             | ; -------------------------------------------------------------------
5700:000 | DONE cmt | em 16 16 |        |             | ; INTERPRET
5701:000 | DONE cmt | em 16 16 |        |             | ; Core routine for interpreter called by EVALUATE and QUIT. We process one line
5702:000 | DONE cmt | em 16 16 |        |             | ; only. Assumes that address of name is in cib and length of whole input
5703:000 | DONE cmt | em 16 16 |        |             | ; string is in ciblen
5704:000 | DONE lbl | em 16 16 | 00699c |             | interpret                            
5705:000 | DONE lbl | em 16 16 | 00699c |             | interpret_loop                       
5706:000 | DONE dir | em 16 16 |        |             |         .!a16                        
5707:000 | DONE dir | em 16 16 |        |             |         .!xy16                       
5708:000 | DONE cmt | em 16 16 |        |             |                 ; Normally we would use PARSE here with the SPACE character as
5709:000 | DONE cmt | em 16 16 |        |             |                 ; a parameter (PARSE replaces WORD in modern Forths). However,
5710:000 | DONE cmt | em 16 16 |        |             |                 ; Gforth's PARSE-NAME makes more sense as it uses spaces as
5711:000 | DONE cmt | em 16 16 |        |             |                 ; delimiters per default and skips any leading spaces, which
5712:000 | DONE cmt | em 16 16 |        |             |                 ; PARSE doesn't
5713:000 | DONE ins | em 16 16 | 00699c | 20 6e 5c    |                 jsr 005c6e           ( "string" -- addr u )
5714:000 | DONE wsp | em 16 16 |        |             |
5715:000 | DONE cmt | em 16 16 |        |             |                 ; If PARSE-NAME returns 0 (empty line), no characters were left
5716:000 | DONE cmt | em 16 16 |        |             |                 ; in the line and we need to go get a new line
5717:000 | DONE ins | em 16 16 | 00699f | 98          |                 tya                  force flag check
5718:000 | DONE ins | em 16 16 | 0069a0 | f0 52       |                 beq 0069f4           
5719:000 | DONE wsp | em 16 16 |        |             |
5720:000 | DONE cmt | em 16 16 |        |             |                 ; Go to FIND-NAME to see if this is a word we know. We have to
5721:000 | DONE cmt | em 16 16 |        |             |                 ; make a copy of the address in case it isn't a word we know and
5722:000 | DONE cmt | em 16 16 |        |             |                 ; we have to go see if it is a number
5723:000 | DONE ins | em 16 16 | 0069a2 | 20 16 54    |                 jsr 005416           TODO convert this to assembler
5724:000 | DONE ins | em 16 16 | 0069a5 | 20 9b 59    |                 jsr 00599b           ( addr u -- nt | 0 )
5725:000 | DONE wsp | em 16 16 |        |             |
5726:000 | DONE cmt | em 16 16 |        |             |                 ; a zero signals that we didn't find a word in the Dictionary
5727:000 | DONE ins | em 16 16 | 0069a8 | 98          |                 tya                  
5728:000 | DONE ins | em 16 16 | 0069a9 | d0 15       |                 bne 0069c0           
5729:000 | DONE wsp | em 16 16 |        |             |
5730:000 | DONE cmt | em 16 16 |        |             |                 ; We didn't get any nt we know of, so let's see if this is
5731:000 | DONE cmt | em 16 16 |        |             |                 ; a number.
5732:000 | DONE ins | em 16 16 | 0069ab | 20 dc 58    |                 jsr 0058dc           TODO convert this to assembler
5733:000 | DONE wsp | em 16 16 |        |             |
5734:000 | DONE cmt | em 16 16 |        |             |                 ; If the number conversion doesn't work, NUMBER will do the
5735:000 | DONE cmt | em 16 16 |        |             |                 ; complaining for us
5736:000 | DONE ins | em 16 16 | 0069ae | 20 bb 5b    |                 jsr 005bbb           ( addr u -- u | d )
5737:000 | DONE wsp | em 16 16 |        |             |
5738:000 | DONE cmt | em 16 16 |        |             |                 ; If we're interpreting, we're done
5739:000 | DONE ins | em 16 16 | 0069b1 | a5 14       |                 lda.d 000014         
5740:000 | DONE ins | em 16 16 | 0069b3 | f0 e7       |                 beq 00699c           
5741:000 | DONE wsp | em 16 16 |        |             |
5742:000 | DONE cmt | em 16 16 |        |             |                 ; We're compiling, so there is a bit more work. Note this
5743:000 | DONE cmt | em 16 16 |        |             |                 ; doesn't work with double-cell numbers, only single-cell
5744:000 | DONE ins | em 16 16 | 0069b5 | f4 e1 5a    |                 phe.# 005ae1         LITERAL runtime
5745:000 | DONE ins | em 16 16 | 0069b8 | 20 00 6a    |                 jsr 006a00           
5746:000 | DONE wsp | em 16 16 |        |             |
5747:000 | DONE cmt | em 16 16 |        |             |                 ; compile our number
5748:000 | DONE cmt | em 16 16 |        |             |                 ; TODO convert this to assembler
5749:000 | DONE ins | em 16 16 | 0069bb | 20 45 52    |                 jsr 005245           
5750:000 | DONE wsp | em 16 16 |        |             |
5751:000 | DONE cmt | em 16 16 |        |             |                 ; That was so much fun, let's do it again!
5752:000 | DONE ins | em 16 16 | 0069be | 80 dc       |                 bra 00699c           
5753:000 | DONE wsp | em 16 16 |        |             |
5754:000 | DONE lbl | em 16 16 | 0069c0 |             | interpret_got_name_token             
5755:000 | DONE cmt | em 16 16 |        |             |                 ; We have a known word's nt as TOS. We're going to need its xt
5756:000 | DONE cmt | em 16 16 |        |             |                 ; though, which is four bytes father down.
5757:000 | DONE wsp | em 16 16 |        |             |
5758:000 | DONE cmt | em 16 16 |        |             |                 ; Arrive here with ( addr u nt ), so we NIP twice, which is
5759:000 | DONE cmt | em 16 16 |        |             |                 ; really fast if Y is TOS
5760:000 | DONE ins | em 16 16 | 0069c0 | e8          |                 inx                  
5761:000 | DONE ins | em 16 16 | 0069c1 | e8          |                 inx                  
5762:000 | DONE ins | em 16 16 | 0069c2 | e8          |                 inx                  
5763:000 | DONE ins | em 16 16 | 0069c3 | e8          |                 inx                  
5764:000 | DONE wsp | em 16 16 |        |             |
5765:000 | DONE cmt | em 16 16 |        |             |                 ; This is a quicker
5766:000 | DONE cmt | em 16 16 |        |             |                 ; version of NAME>INT. But first, save a version of nt for
5767:000 | DONE cmt | em 16 16 |        |             |                 ; error handling and compilation stuff.
5768:000 | DONE ins | em 16 16 | 0069c4 | 84 1a       |                 sty.d 00001a         
5769:000 | DONE ins | em 16 16 | 0069c6 | c8          |                 iny                  
5770:000 | DONE ins | em 16 16 | 0069c7 | c8          |                 iny                  
5771:000 | DONE ins | em 16 16 | 0069c8 | c8          |                 iny                  
5772:000 | DONE ins | em 16 16 | 0069c9 | c8          |                 iny                  
5773:000 | DONE ins | em 16 16 | 0069ca | b9 00 00    |                 lda.y 0000           LDA $0000,Y
5774:000 | DONE ins | em 16 16 | 0069cd | a8          |                 tay                  xt is TOS
5775:000 | DONE wsp | em 16 16 |        |             |
5776:000 | DONE cmt | em 16 16 |        |             |                 ; See if we are in interpret or compile mode
5777:000 | DONE ins | em 16 16 | 0069ce | a5 14       |                 lda.d 000014         
5778:000 | DONE ins | em 16 16 | 0069d0 | d0 14       |                 bne 0069e6           
5779:000 | DONE wsp | em 16 16 |        |             |
5780:000 | DONE cmt | em 16 16 |        |             |                 ; We are interpreting, so EXECUTE the xt that is TOS. First,
5781:000 | DONE cmt | em 16 16 |        |             |                 ; though, see if this isn't a compile-only word, which would be
5782:000 | DONE cmt | em 16 16 |        |             |                 ; illegal.
5783:000 | DONE ins | em 16 16 | 0069d2 | b2 1a       |                 lda.di 00001a        
5784:000 | DONE ins | em 16 16 | 0069d4 | eb          |                 xba                  flags are MSB
5785:000 | DONE ins | em 16 16 | 0069d5 | 29 04 00    |                 and.# CO             mask everything but Compile Only bit
5786:000 | DONE ins | em 16 16 | 0069d8 | f0 06       |                 beq 0069e0           
5787:000 | DONE wsp | em 16 16 |        |             |
5788:000 | DONE cmt | em 16 16 |        |             |                 ; TODO see if we can print offending word first
5789:000 | DONE ins | em 16 16 | 0069da | a9 ac 70    |                 lda.# 0070ac         
5790:000 | DONE ins | em 16 16 | 0069dd | 4c 21 6a    |                 jmp 006a21           
5791:000 | DONE wsp | em 16 16 |        |             |
5792:000 | DONE lbl | em 16 16 | 0069e0 |             | interpret_interpret                  
5793:000 | DONE cmt | em 16 16 |        |             |                 ; We JSR to EXECUTE instead of calling the xt directly because
5794:000 | DONE cmt | em 16 16 |        |             |                 ; the RTS of the word we're executing will bring us back here,
5795:000 | DONE cmt | em 16 16 |        |             |                 ; skipping EXECUTE completely during RTS. If we were to execute
5796:000 | DONE cmt | em 16 16 |        |             |                 ; xt directly, we have to fool around with the Return Stack
5797:000 | DONE cmt | em 16 16 |        |             |                 ; instead, which is actually slightly slower
5798:000 | DONE ins | em 16 16 | 0069e0 | 20 60 59    |                 jsr 005960           
5799:000 | DONE wsp | em 16 16 |        |             |
5800:000 | DONE cmt | em 16 16 |        |             |                 ; That's quite enough for this word, let's get the next one
5801:000 | DONE ins | em 16 16 | 0069e3 | 4c 9c 69    |                 jmp 00699c           
5802:000 | DONE wsp | em 16 16 |        |             |
5803:000 | DONE lbl | em 16 16 | 0069e6 |             | interpret_compile                    
5804:000 | DONE cmt | em 16 16 |        |             |                 ; We're compiling. However, we need to see if this is an
5805:000 | DONE cmt | em 16 16 |        |             |                 ; IMMEDIATE word, which would mean we execute it right now even
5806:000 | DONE cmt | em 16 16 |        |             |                 ; during compilation mode. Fortunately, we saved the nt so life
5807:000 | DONE cmt | em 16 16 |        |             |                 ; is easier
5808:000 | DONE ins | em 16 16 | 0069e6 | b2 1a       |                 lda.di 00001a        
5809:000 | DONE ins | em 16 16 | 0069e8 | eb          |                 xba                  flags are MSB
5810:000 | DONE ins | em 16 16 | 0069e9 | 29 02 00    |                 and.# IM             Mask all but IM bit
5811:000 | DONE ins | em 16 16 | 0069ec | d0 f2       |                 bne 0069e0           IMMEDIATE word, execute right now
5812:000 | DONE wsp | em 16 16 |        |             |
5813:000 | DONE cmt | em 16 16 |        |             |                 ; Compile the xt into the Dictionary with COMPILE,
5814:000 | DONE ins | em 16 16 | 0069ee | 20 83 56    |                 jsr 005683           
5815:000 | DONE ins | em 16 16 | 0069f1 | 4c 9c 69    |                 jmp 00699c           
5816:000 | DONE wsp | em 16 16 |        |             |
5817:000 | DONE lbl | em 16 16 | 0069f4 |             | interpret_line_done                  
5818:000 | DONE cmt | em 16 16 |        |             |                 ; drop stuff from PARSE_NAME
5819:000 | DONE ins | em 16 16 | 0069f4 | b4 02       |                 ldy.dx 02            
5820:000 | DONE ins | em 16 16 | 0069f6 | e8          |                 inx                  
5821:000 | DONE ins | em 16 16 | 0069f7 | e8          |                 inx                  
5822:000 | DONE ins | em 16 16 | 0069f8 | e8          |                 inx                  
5823:000 | DONE ins | em 16 16 | 0069f9 | e8          |                 inx                  
5824:000 | DONE wsp | em 16 16 |        |             |
5825:000 | DONE ins | em 16 16 | 0069fa | 60          |                 rts                  
5826:000 | DONE wsp | em 16 16 |        |             |
5827:000 | DONE cmt | em 16 16 |        |             | ; -------------------------------------------------------------------
5828:000 | DONE cmt | em 16 16 |        |             | ; COMPILE WORDS, JUMPS AND SUBROUTINE JUMPS INTO CODE
5829:000 | DONE cmt | em 16 16 |        |             | ; These three routines compile instructions such as "jsr xt_words" into a word
5830:000 | DONE cmt | em 16 16 |        |             | ; at compile time so they are available at run time. Use by pushing the word or
5831:000 | DONE cmt | em 16 16 |        |             | ; address to be compiled on the Return Stack with
5832:000 | DONE cmt | em 16 16 |        |             | ;
5833:000 | DONE cmt | em 16 16 |        |             | ;       phe.# <WORD>    ; PEA <WORD>
5834:000 | DONE cmt | em 16 16 |        |             | ;
5835:000 | DONE cmt | em 16 16 |        |             | ; Followed by a jump to which ever versions we need. Words that use this routine
5836:000 | DONE cmt | em 16 16 |        |             | ; may not be natively compiled. We use "cmpl" as not to confuse these routines
5837:000 | DONE cmt | em 16 16 |        |             | ; with the COMPILE, word. This routine uses tmptos. Always call this with
5838:000 | DONE cmt | em 16 16 |        |             | ; a subroutine jump, which means no combining JSR/RTS to JMP.
5839:000 | DONE cmt | em 16 16 |        |             | ; TODO see if we need to add a JSR.L variant at some point
5840:000 | DONE wsp | em 16 16 |        |             |
5841:000 | DONE dir | em 16 16 |        |             |         .!a16                        paranoid
5842:000 | DONE lbl | em 16 16 | 0069fb |             | cmpl_word                            
5843:000 | DONE ins | em 16 16 | 0069fb | a9 00 00    |                 lda.# 0000           zero value as a flag, compile word only
5844:000 | DONE ins | em 16 16 | 0069fe | 80 08       |                 bra 006a08           
5845:000 | DONE lbl | em 16 16 | 006a00 |             | cmpl_subroutine                      
5846:000 | DONE ins | em 16 16 | 006a00 | a9 20 00    |                 lda.# 0020           compile "JSR" opcode first
5847:000 | DONE ins | em 16 16 | 006a03 | 80 03       |                 bra 006a08           
5848:000 | DONE lbl | em 16 16 | 006a05 |             | cmpl_jump                            
5849:000 | DONE ins | em 16 16 | 006a05 | a9 4c 00    |                 lda.# 004c           compile "JMP", fall through to cmpl_common
5850:000 | DONE lbl | em 16 16 | 006a08 |             | cmpl_common                          
5851:000 | DONE cmt | em 16 16 |        |             |                 ; we're going to need the Y register to get anything done
5852:000 | DONE ins | em 16 16 | 006a08 | 84 24       |                 sty.d 000024         
5853:000 | DONE wsp | em 16 16 |        |             |
5854:000 | DONE ins | em 16 16 | 006a0a | a8          |                 tay                  force flag check
5855:000 | DONE ins | em 16 16 | 006a0b | f0 08       |                 beq 006a15           came in through cmpl_word, just compile body
5856:000 | DONE wsp | em 16 16 |        |             |
5857:000 | DONE cmt | em 16 16 |        |             |                 ; A contains an opcode that must be compiled first. This is an
5858:000 | DONE cmt | em 16 16 |        |             |                 ; optimized version of C, ("c-comma")
5859:000 | DONE ins | em 16 16 | 006a0d | e2 20       |                 sep 20               
5859:001 | DONE ctl | em  8 16 |        |             |         .!a8
5860:000 | DONE ins | em  8 16 | 006a0f | 92 00       |                 sta.di 000000        STA (CP)
5861:000 | DONE ins | em  8 16 | 006a11 | c2 20       |                 rep 20               
5861:001 | DONE ctl | em 16 16 |        |             |         .!a16
5862:000 | DONE ins | em 16 16 | 006a13 | e6 00       |                 inc.d 000000         fall through to cmpl_body
5863:000 | DONE lbl | em 16 16 | 006a15 |             | cmpl_body                            
5864:000 | DONE ins | em 16 16 | 006a15 | 7a          |                 ply                  the return address we'll need later
5865:000 | DONE wsp | em 16 16 |        |             |
5866:000 | DONE ins | em 16 16 | 006a16 | 68          |                 pla                  next value on stack is the word to compile
5867:000 | DONE ins | em 16 16 | 006a17 | 92 00       |                 sta.di 000000        this is a quicker version of , ("comma")
5868:000 | DONE ins | em 16 16 | 006a19 | e6 00       |                 inc.d 000000         
5869:000 | DONE ins | em 16 16 | 006a1b | e6 00       |                 inc.d 000000         
5870:000 | DONE wsp | em 16 16 |        |             |
5871:000 | DONE ins | em 16 16 | 006a1d | 5a          |                 phy                  make sure we can get back home
5872:000 | DONE wsp | em 16 16 |        |             |
5873:000 | DONE ins | em 16 16 | 006a1e | a4 24       |                 ldy.d 000024         restore Data Stack
5874:000 | DONE wsp | em 16 16 |        |             |
5875:000 | DONE ins | em 16 16 | 006a20 | 60          |                 rts                  
5876:000 | DONE wsp | em 16 16 |        |             |
5877:000 | DONE wsp | em 16 16 |        |             |
5878:000 | DONE cmt | em 16 16 |        |             | ; -------------------------------------------------------------------
5879:000 | DONE cmt | em 16 16 |        |             | ; FATAL ERROR
5880:000 | DONE cmt | em 16 16 |        |             | ; Take address of error string from A, print it and then call abort
5881:000 | DONE lbl | em 16 16 | 006a21 |             | error                                
5882:000 | DONE ins | em 16 16 | 006a21 | 20 27 6a    |                 jsr 006a27           
5883:000 | DONE ins | em 16 16 | 006a24 | 4c b2 50    |                 jmp 0050b2           
5884:000 | DONE wsp | em 16 16 |        |             |
5885:000 | DONE cmt | em 16 16 |        |             | ; -------------------------------------------------------------------
5886:000 | DONE cmt | em 16 16 |        |             | ; Print a zero terminated string to the console, adding a CR character. Takes
5887:000 | DONE cmt | em 16 16 |        |             | ; the address of the string in 16-bit A register, calls put_chr.  A is
5888:000 | DONE cmt | em 16 16 |        |             | ; destroyed. We could probably figure out some way to use TYPE instead, but zero
5889:000 | DONE cmt | em 16 16 |        |             | ; terminated strings are easier for the 65816 to use.
5890:000 | DONE lbl | em 16 16 | 006a27 |             | print_string                         
5891:000 | DONE dir | em 16 16 |        |             |         .!a16                        
5892:000 | DONE dir | em 16 16 |        |             |         .!xy16                       
5893:000 | DONE cmt | em 16 16 |        |             |                 ; don't use tmpdsp for X because we don't know if the user has
5894:000 | DONE cmt | em 16 16 |        |             |                 ; used it for something already
5895:000 | DONE ins | em 16 16 | 006a27 | da          |                 phx                  
5896:000 | DONE ins | em 16 16 | 006a28 | aa          |                 tax                  x16 contains address of string
5897:000 | DONE lbl | em 16 16 | 006a29 |             | @                                    
5898:000 | DONE ins | em 16 16 | 006a29 | e2 20       |                 sep 20               
5898:001 | DONE ctl | em  8 16 |        |             |         .!a8
5899:000 | DONE ins | em  8 16 | 006a2b | bd 00 00    |                 lda.x 0000           LDA $0000,X
5900:000 | DONE ins | em  8 16 | 006a2e | f0 06       |                 beq 006a36           
5901:000 | DONE ins | em  8 16 | 006a30 | 20 09 59    |                 jsr 005909           
5902:000 | DONE ins | em  8 16 | 006a33 | e8          |                 inx                  
5903:000 | DONE ins | em  8 16 | 006a34 | 80 f3       |                 bra 006a29           
5904:000 | DONE wsp | em  8 16 |        |             |
5905:000 | DONE lbl | em  8 16 | 006a36 |             | print_string_done                    
5906:000 | DONE ins | em  8 16 | 006a36 | a9 0a       |                 lda.# AscLF          should be CR on some systems
5907:000 | DONE ins | em  8 16 | 006a38 | 20 09 59    |                 jsr 005909           
5908:000 | DONE ins | em  8 16 | 006a3b | c2 20       |                 rep 20               
5908:001 | DONE ctl | em 16 16 |        |             |         .!a16
5909:000 | DONE ins | em 16 16 | 006a3d | fa          |                 plx                  
5910:000 | DONE wsp | em 16 16 |        |             |
5911:000 | DONE ins | em 16 16 | 006a3e | 60          |                 rts                  
5912:000 | DONE wsp | em 16 16 |        |             |
5913:000 | DONE wsp | em 16 16 |        |             |
5914:000 | DONE cmt | em 16 16 |        |             | ; -------------------------------------------------------------------
5915:000 | DONE cmt | em 16 16 |        |             | ; PRINT UNSIGNED NUMBER
5916:000 | DONE cmt | em 16 16 |        |             | ; Is the equivalent to Forth's 0 <# S# #> TYPE or U. without the SPACE at the
5917:000 | DONE cmt | em 16 16 |        |             | ; end. TODO convert this to more assembler for speed
5918:000 | DONE lbl | em 16 16 | 006a3f |             | print_u                              
5919:000 | DONE ins | em 16 16 | 006a3f | ca          |                 dex                  0
5920:000 | DONE ins | em 16 16 | 006a40 | ca          |                 dex                  
5921:000 | DONE ins | em 16 16 | 006a41 | 94 00       |                 sty.dx 00            
5922:000 | DONE ins | em 16 16 | 006a43 | a0 00 00    |                 ldy.# 0000           
5923:000 | DONE wsp | em 16 16 |        |             |
5924:000 | DONE ins | em 16 16 | 006a46 | 20 55 5c    |                 jsr 005c55           <#
5925:000 | DONE ins | em 16 16 | 006a49 | 84 18       |                 sty.d 000018         
5926:000 | DONE ins | em 16 16 | 006a4b | b4 00       |                 ldy.dx 00            
5927:000 | DONE ins | em 16 16 | 006a4d | e8          |                 inx                  
5928:000 | DONE ins | em 16 16 | 006a4e | e8          |                 inx                  
5929:000 | DONE wsp | em 16 16 |        |             |
5930:000 | DONE ins | em 16 16 | 006a4f | 20 b6 52    |                 jsr 0052b6           #S
5931:000 | DONE ins | em 16 16 | 006a52 | 20 a7 52    |                 jsr 0052a7           #>
5932:000 | DONE ins | em 16 16 | 006a55 | 20 ec 5e    |                 jsr 005eec           
5933:000 | DONE wsp | em 16 16 |        |             |
5934:000 | DONE ins | em 16 16 | 006a58 | 60          |                 rts                  
5935:000 | DONE wsp | em 16 16 |        |             |
5936:000 | DONE wsp | em 16 16 |        |             |
5937:000 | DONE cmt | em 16 16 |        |             | ; -------------------------------------------------------------------
5938:000 | DONE cmt | em 16 16 |        |             | ; CONVERT BYTE TO ASCII
5939:000 | DONE cmt | em 16 16 |        |             | ; Convert byte in A to two ASCII hex digits and print them. Calls
5940:000 | DONE cmt | em 16 16 |        |             | ; nibble_to_ascii. Assumes A is 8 bit.
5941:000 | DONE lbl | em 16 16 | 006a59 |             | byte_to_ascii                        
5942:000 | DONE dir | em 16 16 |        |             |         .!a16                        
5943:000 | DONE ins | em 16 16 | 006a59 | 48          |                 pha                  
5944:000 | DONE cmt | em 16 16 |        |             |                 ; convert high nibble first
5945:000 | DONE ins | em 16 16 | 006a5a | 4a          |                 lsr.a                
5946:000 | DONE ins | em 16 16 | 006a5b | 4a          |                 lsr.a                
5947:000 | DONE ins | em 16 16 | 006a5c | 4a          |                 lsr.a                
5948:000 | DONE ins | em 16 16 | 006a5d | 4a          |                 lsr.a                
5949:000 | DONE ins | em 16 16 | 006a5e | 20 62 6a    |                 jsr 006a62           
5950:000 | DONE wsp | em 16 16 |        |             |
5951:000 | DONE ins | em 16 16 | 006a61 | 68          |                 pla                  
5952:000 | DONE wsp | em 16 16 |        |             |
5953:000 | DONE cmt | em 16 16 |        |             |                 ; fall thru to nibble_to_ascii
5954:000 | DONE wsp | em 16 16 |        |             |
5955:000 | DONE wsp | em 16 16 |        |             |
5956:000 | DONE cmt | em 16 16 |        |             | ; -------------------------------------------------------------------
5957:000 | DONE cmt | em 16 16 |        |             | ; CONVERT NIBBLE TO ASCII
5958:000 | DONE cmt | em 16 16 |        |             | ; Converts the lower nibble of a number in A and returns the ASCII character
5959:000 | DONE cmt | em 16 16 |        |             | ; number, then prints it. Assumes A is 8 bit
5960:000 | DONE lbl | em 16 16 | 006a62 |             | nibble_to_ascii                      
5961:000 | DONE dir | em 16 16 |        |             |         .!a16                        
5962:000 | DONE ins | em 16 16 | 006a62 | 29 0f 00    |                 and.# 000f           
5963:000 | DONE ins | em 16 16 | 006a65 | 09 30 00    |                 ora.# 30             
5964:000 | DONE ins | em 16 16 | 006a68 | c9 3a 00    |                 cmp.# 003a           '9' + 1
5965:000 | DONE ins | em 16 16 | 006a6b | 90 03       |                 bcc 006a70           
5966:000 | DONE ins | em 16 16 | 006a6d | 69 06 00    |                 adc.# 0006           
5967:000 | DONE lbl | em 16 16 | 006a70 |             | @                                    
5968:000 | DONE ins | em 16 16 | 006a70 | 20 09 59    |                 jsr 005909           
5969:000 | DONE wsp | em 16 16 |        |             |
5970:000 | DONE ins | em 16 16 | 006a73 | 60          |                 rts                  
5971:000 | DONE wsp | em 16 16 |        |             |
5972:000 | DONE cmt | em 16 16 |        |             | ; ===================================================================
5973:000 | DONE cmt | em 16 16 |        |             | ; HIGH-LEVEL WORDS
5974:000 | DONE wsp | em 16 16 |        |             |
5975:000 | DONE cmt | em 16 16 |        |             | ; These are executed during start up. Remember that we have to put a space at
5976:000 | DONE cmt | em 16 16 |        |             | ; the end of the line if there is another line with code following it. No zero
5977:000 | DONE cmt | em 16 16 |        |             | ; or CR/LF is required
5978:000 | DONE lbl | em 16 16 | 006a74 |             | hi-start                             
5979:000 | DONE cmt | em 16 16 |        |             |         ; Output and comment words
5980:000 | DONE dir | em 16 16 | 006a74 | (37 bytes)  |         .byte 3a, 20, 28, 20, 5b, 63, 68, 61, 72, 5d, 20, 29, 20, (...) 
5980:000 | DONE dir | em 16 16 |        |             |                 3a 20 28 20 5b 63 68 61  --  :   (   [ c h a
5980:000 | DONE dir | em 16 16 |        |             |                 72 5d 20 29 20 70 61 72  --  r ]   )   p a r
5980:000 | DONE dir | em 16 16 |        |             |                 73 65 20 32 64 72 6f 70  --  s e   2 d r o p
5980:000 | DONE dir | em 16 16 |        |             |                 20 3b 20 69 6d 6d 65 64  --    ;   i m m e d
5980:000 | DONE dir | em 16 16 |        |             |                 69 61 74 65 20           --  i a t e  
5981:000 | DONE dir | em 16 16 | 006a99 | (37 bytes)  |         .byte 3a, 20, 2e, 28, 20, 5b, 63, 68, 61, 72, 5d, 20, 29, (...) 
5981:000 | DONE dir | em 16 16 |        |             |                 3a 20 2e 28 20 5b 63 68  --  :   . (   [ c h
5981:000 | DONE dir | em 16 16 |        |             |                 61 72 5d 20 29 20 70 61  --  a r ]   )   p a
5981:000 | DONE dir | em 16 16 |        |             |                 72 73 65 20 74 79 70 65  --  r s e   t y p e
5981:000 | DONE dir | em 16 16 |        |             |                 20 3b 20 69 6d 6d 65 64  --    ;   i m m e d
5981:000 | DONE dir | em 16 16 |        |             |                 69 61 74 65 20           --  i a t e  
5982:000 | DONE wsp | em 16 16 |        |             |
5983:000 | DONE cmt | em 16 16 |        |             |         ; High flow control. Some of these could be realized with CS-ROLL and
5984:000 | DONE cmt | em 16 16 |        |             |         ; CS-PICK instead
5985:000 | DONE dir | em 16 16 | 006abe | (56 bytes)  |         .byte 3a, 20, 69, 66, 20, 70, 6f, 73, 74, 70, 6f, 6e, 65, (...) 
5985:000 | DONE dir | em 16 16 |        |             |                 3a 20 69 66 20 70 6f 73  --  :   i f   p o s
5985:000 | DONE dir | em 16 16 |        |             |                 74 70 6f 6e 65 20 30 62  --  t p o n e   0 b
5985:000 | DONE dir | em 16 16 |        |             |                 72 61 6e 63 68 20 68 65  --  r a n c h   h e
5985:000 | DONE dir | em 16 16 |        |             |                 72 65 20 30 20 2c 20 3b  --  r e   0   ,   ;
5985:000 | DONE dir | em 16 16 |        |             |                 20 69 6d 6d 65 64 69 61  --    i m m e d i a
5985:000 | DONE dir | em 16 16 |        |             |                 74 65 20 63 6f 6d 70 69  --  t e   c o m p i
5985:000 | DONE dir | em 16 16 |        |             |                 6c 65 2d 6f 6e 6c 79 20  --  l e - o n l y  
5985:000 | DONE dir | em 16 16 |        |             |                                          -- 
5986:000 | DONE dir | em 16 16 | 006af6 | (44 bytes)  |         .byte 3a, 20, 74, 68, 65, 6e, 20, 68, 65, 72, 65, 20, 73, (...) 
5986:000 | DONE dir | em 16 16 |        |             |                 3a 20 74 68 65 6e 20 68  --  :   t h e n   h
5986:000 | DONE dir | em 16 16 |        |             |                 65 72 65 20 73 77 61 70  --  e r e   s w a p
5986:000 | DONE dir | em 16 16 |        |             |                 20 21 20 3b 20 69 6d 6d  --    !   ;   i m m
5986:000 | DONE dir | em 16 16 |        |             |                 65 64 69 61 74 65 20 63  --  e d i a t e   c
5986:000 | DONE dir | em 16 16 |        |             |                 6f 6d 70 69 6c 65 2d 6f  --  o m p i l e - o
5986:000 | DONE dir | em 16 16 |        |             |                 6e 6c 79 20              --  n l y  
5987:000 | DONE dir | em 16 16 | 006b22 | (68 bytes)  |         .byte 3a, 20, 65, 6c, 73, 65, 20, 70, 6f, 73, 74, 70, 6f, (...) 
5987:000 | DONE dir | em 16 16 |        |             |                 3a 20 65 6c 73 65 20 70  --  :   e l s e   p
5987:000 | DONE dir | em 16 16 |        |             |                 6f 73 74 70 6f 6e 65 20  --  o s t p o n e  
5987:000 | DONE dir | em 16 16 |        |             |                 62 72 61 6e 63 68 20 68  --  b r a n c h   h
5987:000 | DONE dir | em 16 16 |        |             |                 65 72 65 20 30 20 2c 20  --  e r e   0   ,  
5987:000 | DONE dir | em 16 16 |        |             |                 68 65 72 65 20 72 6f 74  --  h e r e   r o t
5987:000 | DONE dir | em 16 16 |        |             |                 20 21 20 3b 20 69 6d 6d  --    !   ;   i m m
5987:000 | DONE dir | em 16 16 |        |             |                 65 64 69 61 74 65 20 63  --  e d i a t e   c
5987:000 | DONE dir | em 16 16 |        |             |                 6f 6d 70 69 6c 65 2d 6f  --  o m p i l e - o
5987:000 | DONE dir | em 16 16 |        |             |                 6e 6c 79 20              --  n l y  
5988:000 | DONE dir | em 16 16 | 006b66 | (61 bytes)  |         .byte 3a, 20, 72, 65, 70, 65, 61, 74, 20, 70, 6f, 73, 74, (...) 
5988:000 | DONE dir | em 16 16 |        |             |                 3a 20 72 65 70 65 61 74  --  :   r e p e a t
5988:000 | DONE dir | em 16 16 |        |             |                 20 70 6f 73 74 70 6f 6e  --    p o s t p o n
5988:000 | DONE dir | em 16 16 |        |             |                 65 20 61 67 61 69 6e 20  --  e   a g a i n  
5988:000 | DONE dir | em 16 16 |        |             |                 68 65 72 65 20 73 77 61  --  h e r e   s w a
5988:000 | DONE dir | em 16 16 |        |             |                 70 20 21 20 3b 20 69 6d  --  p   !   ;   i m
5988:000 | DONE dir | em 16 16 |        |             |                 6d 65 64 69 61 74 65 20  --  m e d i a t e  
5988:000 | DONE dir | em 16 16 |        |             |                 63 6f 6d 70 69 6c 65 2d  --  c o m p i l e -
5988:000 | DONE dir | em 16 16 |        |             |                 6f 6e 6c 79 20           --  o n l y  
5989:000 | DONE dir | em 16 16 | 006ba3 | (52 bytes)  |         .byte 3a, 20, 75, 6e, 74, 69, 6c, 20, 70, 6f, 73, 74, 70, (...) 
5989:000 | DONE dir | em 16 16 |        |             |                 3a 20 75 6e 74 69 6c 20  --  :   u n t i l  
5989:000 | DONE dir | em 16 16 |        |             |                 70 6f 73 74 70 6f 6e 65  --  p o s t p o n e
5989:000 | DONE dir | em 16 16 |        |             |                 20 30 62 72 61 6e 63 68  --    0 b r a n c h
5989:000 | DONE dir | em 16 16 |        |             |                 20 2c 20 3b 20 69 6d 6d  --    ,   ;   i m m
5989:000 | DONE dir | em 16 16 |        |             |                 65 64 69 61 74 65 20 63  --  e d i a t e   c
5989:000 | DONE dir | em 16 16 |        |             |                 6f 6d 70 69 6c 65 2d 6f  --  o m p i l e - o
5989:000 | DONE dir | em 16 16 |        |             |                 6e 6c 79 20              --  n l y  
5990:000 | DONE dir | em 16 16 | 006bd7 | (64 bytes)  |         .byte 3a, 20, 77, 68, 69, 6c, 65, 20, 70, 6f, 73, 74, 70, (...) 
5990:000 | DONE dir | em 16 16 |        |             |                 3a 20 77 68 69 6c 65 20  --  :   w h i l e  
5990:000 | DONE dir | em 16 16 |        |             |                 70 6f 73 74 70 6f 6e 65  --  p o s t p o n e
5990:000 | DONE dir | em 16 16 |        |             |                 20 30 62 72 61 6e 63 68  --    0 b r a n c h
5990:000 | DONE dir | em 16 16 |        |             |                 20 68 65 72 65 20 30 20  --    h e r e   0  
5990:000 | DONE dir | em 16 16 |        |             |                 2c 20 73 77 61 70 20 3b  --  ,   s w a p   ;
5990:000 | DONE dir | em 16 16 |        |             |                 20 69 6d 6d 65 64 69 61  --    i m m e d i a
5990:000 | DONE dir | em 16 16 |        |             |                 74 65 20 63 6f 6d 70 69  --  t e   c o m p i
5990:000 | DONE dir | em 16 16 |        |             |                 6c 65 2d 6f 6e 6c 79 20  --  l e - o n l y  
5990:000 | DONE dir | em 16 16 |        |             |                                          -- 
5991:000 | DONE wsp | em 16 16 |        |             |
5992:000 | DONE cmt | em 16 16 |        |             |         ; DEFER's friends. Code taken from ANSI Forth specifications. Many of
5993:000 | DONE cmt | em 16 16 |        |             |         ; these will be moved to assembler code in due course
5994:000 | DONE dir | em 16 16 | 006c17 | (19 bytes)  |         .byte 3a, 20, 64, 65, 66, 65, 72, 21, 20, 3e, 62, 6f, 64, (...) 
5994:000 | DONE dir | em 16 16 |        |             |                 3a 20 64 65 66 65 72 21  --  :   d e f e r !
5994:000 | DONE dir | em 16 16 |        |             |                 20 3e 62 6f 64 79 20 21  --    > b o d y   !
5994:000 | DONE dir | em 16 16 |        |             |                 20 3b 20                 --    ;  
5995:000 | DONE dir | em 16 16 | 006c2a | (19 bytes)  |         .byte 3a, 20, 64, 65, 66, 65, 72, 40, 20, 3e, 62, 6f, 64, (...) 
5995:000 | DONE dir | em 16 16 |        |             |                 3a 20 64 65 66 65 72 40  --  :   d e f e r @
5995:000 | DONE dir | em 16 16 |        |             |                 20 3e 62 6f 64 79 20 40  --    > b o d y   @
5995:000 | DONE dir | em 16 16 |        |             |                 20 3b 20                 --    ;  
5996:000 | DONE dir | em 16 16 | 006c3d | (76 bytes)  |         .byte 3a, 20, 69, 73, 20, 73, 74, 61, 74, 65, 20, 40, 20, (...) 
5996:000 | DONE dir | em 16 16 |        |             |                 3a 20 69 73 20 73 74 61  --  :   i s   s t a
5996:000 | DONE dir | em 16 16 |        |             |                 74 65 20 40 20 69 66 20  --  t e   @   i f  
5996:000 | DONE dir | em 16 16 |        |             |                 70 6f 73 74 70 6f 6e 65  --  p o s t p o n e
5996:000 | DONE dir | em 16 16 |        |             |                 20 5b 27 5d 20 70 6f 73  --    [ ' ]   p o s
5996:000 | DONE dir | em 16 16 |        |             |                 74 70 6f 6e 65 20 64 65  --  t p o n e   d e
5996:000 | DONE dir | em 16 16 |        |             |                 66 65 72 21 20 65 6c 73  --  f e r !   e l s
5996:000 | DONE dir | em 16 16 |        |             |                 65 20 27 20 64 65 66 65  --  e   '   d e f e
5996:000 | DONE dir | em 16 16 |        |             |                 72 21 20 74 68 65 6e 20  --  r !   t h e n  
5996:000 | DONE dir | em 16 16 |        |             |                 3b 20 69 6d 6d 65 64 69  --  ;   i m m e d i
5996:000 | DONE dir | em 16 16 |        |             |                 61 74 65 20              --  a t e  
5997:000 | DONE dir | em 16 16 | 006c89 | (83 bytes)  |         .byte 3a, 20, 61, 63, 74, 69, 6f, 6e, 2d, 6f, 66, 20, 73, (...) 
5997:000 | DONE dir | em 16 16 |        |             |                 3a 20 61 63 74 69 6f 6e  --  :   a c t i o n
5997:000 | DONE dir | em 16 16 |        |             |                 2d 6f 66 20 73 74 61 74  --  - o f   s t a t
5997:000 | DONE dir | em 16 16 |        |             |                 65 20 40 20 69 66 20 70  --  e   @   i f   p
5997:000 | DONE dir | em 16 16 |        |             |                 6f 73 74 70 6f 6e 65 20  --  o s t p o n e  
5997:000 | DONE dir | em 16 16 |        |             |                 5b 27 5d 20 70 6f 73 74  --  [ ' ]   p o s t
5997:000 | DONE dir | em 16 16 |        |             |                 70 6f 6e 65 20 64 65 66  --  p o n e   d e f
5997:000 | DONE dir | em 16 16 |        |             |                 65 72 40 20 65 6c 73 65  --  e r @   e l s e
5997:000 | DONE dir | em 16 16 |        |             |                 20 27 20 64 65 66 65 72  --    '   d e f e r
5997:000 | DONE dir | em 16 16 |        |             |                 40 20 74 68 65 6e 20 3b  --  @   t h e n   ;
5997:000 | DONE dir | em 16 16 |        |             |                 20 69 6d 6d 65 64 69 61  --    i m m e d i a
5997:000 | DONE dir | em 16 16 |        |             |                 74 65 20                 --  t e  
5998:000 | DONE wsp | em 16 16 |        |             |
5999:000 | DONE cmt | em 16 16 |        |             |         ; High level math definitions. The should be moved to actual 65816 code
6000:000 | DONE cmt | em 16 16 |        |             |         ; for speed at some point. Note we use SM/REM instead of FM/MOD for most
6001:000 | DONE cmt | em 16 16 |        |             |         ; stuff
6002:000 | DONE dir | em 16 16 | 006cdc | (33 bytes)  |         .byte 3a, 20, 2f, 20, 3e, 72, 20, 73, 3e, 64, 20, 72, 3e, (...) 
6002:000 | DONE dir | em 16 16 |        |             |                 3a 20 2f 20 3e 72 20 73  --  :   /   > r   s
6002:000 | DONE dir | em 16 16 |        |             |                 3e 64 20 72 3e 20 73 6d  --  > d   r >   s m
6002:000 | DONE dir | em 16 16 |        |             |                 2f 72 65 6d 20 73 77 61  --  / r e m   s w a
6002:000 | DONE dir | em 16 16 |        |             |                 70 20 64 72 6f 70 20 3b  --  p   d r o p   ;
6002:000 | DONE dir | em 16 16 |        |             |                 20                       --   
6003:000 | DONE dir | em 16 16 | 006cfd | (26 bytes)  |         .byte 3a, 20, 2f, 6d, 6f, 64, 20, 3e, 72, 20, 73, 3e, 64, (...) 
6003:000 | DONE dir | em 16 16 |        |             |                 3a 20 2f 6d 6f 64 20 3e  --  :   / m o d   >
6003:000 | DONE dir | em 16 16 |        |             |                 72 20 73 3e 64 20 72 3e  --  r   s > d   r >
6003:000 | DONE dir | em 16 16 |        |             |                 20 73 6d 2f 72 65 6d 20  --    s m / r e m  
6003:000 | DONE dir | em 16 16 |        |             |                 3b 20                    --  ;  
6004:000 | DONE dir | em 16 16 | 006d17 | (33 bytes)  |         .byte 3a, 20, 2a, 2f, 20, 3e, 72, 20, 6d, 2a, 20, 72, 3e, (...) 
6004:000 | DONE dir | em 16 16 |        |             |                 3a 20 2a 2f 20 3e 72 20  --  :   * /   > r  
6004:000 | DONE dir | em 16 16 |        |             |                 6d 2a 20 72 3e 20 73 6d  --  m *   r >   s m
6004:000 | DONE dir | em 16 16 |        |             |                 2f 72 65 6d 20 73 77 61  --  / r e m   s w a
6004:000 | DONE dir | em 16 16 |        |             |                 70 20 64 72 6f 70 20 3b  --  p   d r o p   ;
6004:000 | DONE dir | em 16 16 |        |             |                 20                       --   
6005:000 | DONE dir | em 16 16 | 006d38 | (26 bytes)  |         .byte 3a, 20, 2a, 2f, 6d, 6f, 64, 20, 3e, 72, 20, 6d, 2a, (...) 
6005:000 | DONE dir | em 16 16 |        |             |                 3a 20 2a 2f 6d 6f 64 20  --  :   * / m o d  
6005:000 | DONE dir | em 16 16 |        |             |                 3e 72 20 6d 2a 20 72 3e  --  > r   m *   r >
6005:000 | DONE dir | em 16 16 |        |             |                 20 73 6d 2f 72 65 6d 20  --    s m / r e m  
6005:000 | DONE dir | em 16 16 |        |             |                 3b 20                    --  ;  
6006:000 | DONE wsp | em 16 16 |        |             |
6007:000 | DONE cmt | em 16 16 |        |             |         ; Output definitions. Since these usually involve the user, and humans
6008:000 | DONE cmt | em 16 16 |        |             |         ; are slow, these can stay high-level for the moment. Based on
6009:000 | DONE cmt | em 16 16 |        |             |         ; https://github.com/philburk/pforth/blob/master/fth/numberio.fth
6010:000 | DONE cmt | em 16 16 |        |             |         ; . (DOT) and U. are hard-coded because there are used by other words
6011:000 | DONE dir | em 16 16 | 006d52 | (44 bytes)  |         .byte 3a, 20, 75, 2e, 72, 20, 3e, 72, 20, 30, 20, 3c, 23, (...) 
6011:000 | DONE dir | em 16 16 |        |             |                 3a 20 75 2e 72 20 3e 72  --  :   u . r   > r
6011:000 | DONE dir | em 16 16 |        |             |                 20 30 20 3c 23 20 23 73  --    0   < #   # s
6011:000 | DONE dir | em 16 16 |        |             |                 20 23 3e 20 72 3e 20 6f  --    # >   r >   o
6011:000 | DONE dir | em 16 16 |        |             |                 76 65 72 20 2d 20 73 70  --  v e r   -   s p
6011:000 | DONE dir | em 16 16 |        |             |                 61 63 65 73 20 74 79 70  --  a c e s   t y p
6011:000 | DONE dir | em 16 16 |        |             |                 65 20 3b 20              --  e   ;  
6012:000 | DONE dir | em 16 16 | 006d7e | (60 bytes)  |         .byte 3a, 20, 2e, 72, 20, 3e, 72, 20, 64, 75, 70, 20, 61, (...) 
6012:000 | DONE dir | em 16 16 |        |             |                 3a 20 2e 72 20 3e 72 20  --  :   . r   > r  
6012:000 | DONE dir | em 16 16 |        |             |                 64 75 70 20 61 62 73 20  --  d u p   a b s  
6012:000 | DONE dir | em 16 16 |        |             |                 30 20 3c 23 20 23 73 20  --  0   < #   # s  
6012:000 | DONE dir | em 16 16 |        |             |                 72 6f 74 20 73 69 67 6e  --  r o t   s i g n
6012:000 | DONE dir | em 16 16 |        |             |                 20 23 3e 20 72 3e 20 6f  --    # >   r >   o
6012:000 | DONE dir | em 16 16 |        |             |                 76 65 72 20 2d 20 73 70  --  v e r   -   s p
6012:000 | DONE dir | em 16 16 |        |             |                 61 63 65 73 20 74 79 70  --  a c e s   t y p
6012:000 | DONE dir | em 16 16 |        |             |                 65 20 3b 20              --  e   ;  
6013:000 | DONE dir | em 16 16 | 006dba | (28 bytes)  |         .byte 3a, 20, 75, 64, 2e, 20, 3c, 23, 20, 23, 73, 20, 23, (...) 
6013:000 | DONE dir | em 16 16 |        |             |                 3a 20 75 64 2e 20 3c 23  --  :   u d .   < #
6013:000 | DONE dir | em 16 16 |        |             |                 20 23 73 20 23 3e 20 74  --    # s   # >   t
6013:000 | DONE dir | em 16 16 |        |             |                 79 70 65 20 73 70 61 63  --  y p e   s p a c
6013:000 | DONE dir | em 16 16 |        |             |                 65 20 3b 20              --  e   ;  
6014:000 | DONE dir | em 16 16 | 006dd6 | (43 bytes)  |         .byte 3a, 20, 75, 64, 2e, 72, 20, 3e, 72, 20, 3c, 23, 20, (...) 
6014:000 | DONE dir | em 16 16 |        |             |                 3a 20 75 64 2e 72 20 3e  --  :   u d . r   >
6014:000 | DONE dir | em 16 16 |        |             |                 72 20 3c 23 20 23 73 20  --  r   < #   # s  
6014:000 | DONE dir | em 16 16 |        |             |                 23 3e 20 72 3e 20 6f 76  --  # >   r >   o v
6014:000 | DONE dir | em 16 16 |        |             |                 65 72 20 2d 20 73 70 61  --  e r   -   s p a
6014:000 | DONE dir | em 16 16 |        |             |                 63 65 73 20 74 79 70 65  --  c e s   t y p e
6014:000 | DONE dir | em 16 16 |        |             |                 20 3b 20                 --    ;  
6015:000 | DONE dir | em 16 16 | 006e01 | (46 bytes)  |         .byte 3a, 20, 64, 2e, 20, 74, 75, 63, 6b, 20, 64, 61, 62, (...) 
6015:000 | DONE dir | em 16 16 |        |             |                 3a 20 64 2e 20 74 75 63  --  :   d .   t u c
6015:000 | DONE dir | em 16 16 |        |             |                 6b 20 64 61 62 73 20 3c  --  k   d a b s   <
6015:000 | DONE dir | em 16 16 |        |             |                 23 20 23 73 20 72 6f 74  --  #   # s   r o t
6015:000 | DONE dir | em 16 16 |        |             |                 20 73 69 67 6e 20 23 3e  --    s i g n   # >
6015:000 | DONE dir | em 16 16 |        |             |                 20 74 79 70 65 20 73 70  --    t y p e   s p
6015:000 | DONE dir | em 16 16 |        |             |                 61 63 65 20 3b 20        --  a c e   ;  
6016:000 | DONE dir | em 16 16 | 006e2f | (61 bytes)  |         .byte 3a, 20, 64, 2e, 72, 20, 3e, 72, 20, 74, 75, 63, 6b, (...) 
6016:000 | DONE dir | em 16 16 |        |             |                 3a 20 64 2e 72 20 3e 72  --  :   d . r   > r
6016:000 | DONE dir | em 16 16 |        |             |                 20 74 75 63 6b 20 64 61  --    t u c k   d a
6016:000 | DONE dir | em 16 16 |        |             |                 62 73 20 3c 23 20 23 73  --  b s   < #   # s
6016:000 | DONE dir | em 16 16 |        |             |                 20 72 6f 74 20 73 69 67  --    r o t   s i g
6016:000 | DONE dir | em 16 16 |        |             |                 6e 20 23 3e 20 72 3e 20  --  n   # >   r >  
6016:000 | DONE dir | em 16 16 |        |             |                 6f 76 65 72 20 2d 20 73  --  o v e r   -   s
6016:000 | DONE dir | em 16 16 |        |             |                 70 61 63 65 73 20 74 79  --  p a c e s   t y
6016:000 | DONE dir | em 16 16 |        |             |                 70 65 20 3b 20           --  p e   ;  
6017:000 | DONE wsp | em 16 16 |        |             |
6018:000 | DONE cmt | em 16 16 |        |             |         ; DUMP is a longish word we'll want to modify for a while until we are
6019:000 | DONE cmt | em 16 16 |        |             |         ; happy with the format
6020:000 | DONE cmt | em 16 16 |        |             |         ; .byte ": dump bounds ?do cr i 4 u.r space"
6021:000 | DONE cmt | em 16 16 |        |             | 	; .byte "16 0 do i j + c@ 0 <# # #s #> type space loop 16 +loop ;"
6022:000 | DONE wsp | em 16 16 |        |             |
6023:000 | DONE cmt | em 16 16 |        |             |         ; SEE is a longish word we'll want to modify for a while until we are
6024:000 | DONE cmt | em 16 16 |        |             |         ; happy with the format
6025:000 | DONE cmt | em 16 16 |        |             |         ; TODO replace by code, this is far too long
6026:000 | DONE dir | em 16 16 | 006e6c | (55 bytes)  |         .byte 3a, 20, 73, 65, 65, 20, 70, 61, 72, 73, 65, 2d, 6e, (...) 
6026:000 | DONE dir | em 16 16 |        |             |                 3a 20 73 65 65 20 70 61  --  :   s e e   p a
6026:000 | DONE dir | em 16 16 |        |             |                 72 73 65 2d 6e 61 6d 65  --  r s e - n a m e
6026:000 | DONE dir | em 16 16 |        |             |                 20 66 69 6e 64 2d 6e 61  --    f i n d - n a
6026:000 | DONE dir | em 16 16 |        |             |                 6d 65 20 64 75 70 20 30  --  m e   d u p   0
6026:000 | DONE dir | em 16 16 |        |             |                 3d 20 61 62 6f 72 74 22  --  =   a b o r t "
6026:000 | DONE dir | em 16 16 |        |             |                 20 4e 6f 20 73 75 63 68  --    N o   s u c h
6026:000 | DONE dir | em 16 16 |        |             |                 20 6e 61 6d 65 22 20     --    n a m e "  
6027:000 | DONE dir | em 16 16 | 006ea3 | (38 bytes)  |         .byte 62, 61, 73, 65, 20, 40, 20, 3e, 72, 20, 68, 65, 78, (...) 
6027:000 | DONE dir | em 16 16 |        |             |                 62 61 73 65 20 40 20 3e  --  b a s e   @   >
6027:000 | DONE dir | em 16 16 |        |             |                 72 20 68 65 78 20 64 75  --  r   h e x   d u
6027:000 | DONE dir | em 16 16 |        |             |                 70 20 63 72 20 73 70 61  --  p   c r   s p a
6027:000 | DONE dir | em 16 16 |        |             |                 63 65 20 2e 22 20 6e 74  --  c e   . "   n t
6027:000 | DONE dir | em 16 16 |        |             |                 3a 20 22 20 2e 20        --  :   "   .  
6028:000 | DONE dir | em 16 16 | 006ec9 | (27 bytes)  |         .byte 64, 75, 70, 20, 34, 20, 2b, 20, 40, 20, 73, 70, 61, (...) 
6028:000 | DONE dir | em 16 16 |        |             |                 64 75 70 20 34 20 2b 20  --  d u p   4   +  
6028:000 | DONE dir | em 16 16 |        |             |                 40 20 73 70 61 63 65 20  --  @   s p a c e  
6028:000 | DONE dir | em 16 16 |        |             |                 2e 22 20 78 74 3a 20 22  --  . "   x t :   "
6028:000 | DONE dir | em 16 16 |        |             |                 20 2e 20                 --    .  
6029:000 | DONE dir | em 16 16 | 006ee4 | (37 bytes)  |         .byte 64, 75, 70, 20, 31, 2b, 20, 63, 40, 20, 31, 20, 61, (...) 
6029:000 | DONE dir | em 16 16 |        |             |                 64 75 70 20 31 2b 20 63  --  d u p   1 +   c
6029:000 | DONE dir | em 16 16 |        |             |                 40 20 31 20 61 6e 64 20  --  @   1   a n d  
6029:000 | DONE dir | em 16 16 |        |             |                 69 66 20 73 70 61 63 65  --  i f   s p a c e
6029:000 | DONE dir | em 16 16 |        |             |                 20 2e 22 20 4e 43 22 20  --    . "   N C "  
6029:000 | DONE dir | em 16 16 |        |             |                 74 68 65 6e 20           --  t h e n  
6030:000 | DONE dir | em 16 16 | 006f09 | (37 bytes)  |         .byte 64, 75, 70, 20, 31, 2b, 20, 63, 40, 20, 32, 20, 61, (...) 
6030:000 | DONE dir | em 16 16 |        |             |                 64 75 70 20 31 2b 20 63  --  d u p   1 +   c
6030:000 | DONE dir | em 16 16 |        |             |                 40 20 32 20 61 6e 64 20  --  @   2   a n d  
6030:000 | DONE dir | em 16 16 |        |             |                 69 66 20 73 70 61 63 65  --  i f   s p a c e
6030:000 | DONE dir | em 16 16 |        |             |                 20 2e 22 20 49 4d 22 20  --    . "   I M "  
6030:000 | DONE dir | em 16 16 |        |             |                 74 68 65 6e 20           --  t h e n  
6031:000 | DONE dir | em 16 16 | 006f2e | (37 bytes)  |         .byte 64, 75, 70, 20, 31, 2b, 20, 63, 40, 20, 34, 20, 61, (...) 
6031:000 | DONE dir | em 16 16 |        |             |                 64 75 70 20 31 2b 20 63  --  d u p   1 +   c
6031:000 | DONE dir | em 16 16 |        |             |                 40 20 34 20 61 6e 64 20  --  @   4   a n d  
6031:000 | DONE dir | em 16 16 |        |             |                 69 66 20 73 70 61 63 65  --  i f   s p a c e
6031:000 | DONE dir | em 16 16 |        |             |                 20 2e 22 20 43 4f 22 20  --    . "   C O "  
6031:000 | DONE dir | em 16 16 |        |             |                 74 68 65 6e 20           --  t h e n  
6032:000 | DONE dir | em 16 16 | 006f53 | (57 bytes)  |         .byte 64, 75, 70, 20, 63, 72, 20, 73, 70, 61, 63, 65, 20, (...) 
6032:000 | DONE dir | em 16 16 |        |             |                 64 75 70 20 63 72 20 73  --  d u p   c r   s
6032:000 | DONE dir | em 16 16 |        |             |                 70 61 63 65 20 2e 22 20  --  p a c e   . "  
6032:000 | DONE dir | em 16 16 |        |             |                 73 69 7a 65 20 28 64 65  --  s i z e   ( d e
6032:000 | DONE dir | em 16 16 |        |             |                 63 69 6d 61 6c 29 3a 20  --  c i m a l ) :  
6032:000 | DONE dir | em 16 16 |        |             |                 22 20 64 65 63 69 6d 61  --  "   d e c i m a
6032:000 | DONE dir | em 16 16 |        |             |                 6c 20 77 6f 72 64 73 69  --  l   w o r d s i
6032:000 | DONE dir | em 16 16 |        |             |                 7a 65 20 64 75 70 20 2e  --  z e   d u p   .
6032:000 | DONE dir | em 16 16 |        |             |                 20                       --   
6033:000 | DONE dir | em 16 16 | 006f8c | (49 bytes)  |         .byte 73, 77, 61, 70, 20, 6e, 61, 6d, 65, 3e, 69, 6e, 74, (...) 
6033:000 | DONE dir | em 16 16 |        |             |                 73 77 61 70 20 6e 61 6d  --  s w a p   n a m
6033:000 | DONE dir | em 16 16 |        |             |                 65 3e 69 6e 74 20 73 77  --  e > i n t   s w
6033:000 | DONE dir | em 16 16 |        |             |                 61 70 20 68 65 78 20 63  --  a p   h e x   c
6033:000 | DONE dir | em 16 16 |        |             |                 72 20 73 70 61 63 65 20  --  r   s p a c e  
6033:000 | DONE dir | em 16 16 |        |             |                 64 75 6d 70 20 72 3e 20  --  d u m p   r >  
6033:000 | DONE dir | em 16 16 |        |             |                 62 61 73 65 20 21 20 3b  --  b a s e   !   ;
6033:000 | DONE dir | em 16 16 |        |             |                 20                       --   
6034:000 | DONE wsp | em 16 16 |        |             |
6035:000 | DONE cmt | em 16 16 |        |             | ; ===================================================================
6036:000 | DONE cmt | em 16 16 |        |             | ; USER INCLUDES
6037:000 | DONE wsp | em 16 16 |        |             |
6038:000 | DONE cmt | em 16 16 |        |             | ; Include any Forth words defined by the user in USER.TASM
6039:000 | DONE wsp | em 16 16 |        |             |
6041:000 | DONE wsp | em 16 16 |        |             |
6042:000 | DONE cmt | em 16 16 |        |             | ; ===================================================================
6043:000 | DONE wsp | em 16 16 |        |             |
6044:000 | DONE cmt | em 16 16 |        |             |         ; Splash strings. We leave these as high-level words because they are
6045:000 | DONE cmt | em 16 16 |        |             |         ; generated at the end of the boot process and signal that the other
6046:000 | DONE cmt | em 16 16 |        |             |         ; high-level definitions worked (or at least didn't crash)
6047:000 | DONE dir | em 16 16 | 006fbd | (35 bytes)  |         .byte 2e, 28, 20, 4c, 69, 61, 72, 61, 20, 46, 6f, 72, 74, (...) 
6047:000 | DONE dir | em 16 16 |        |             |                 2e 28 20 4c 69 61 72 61  --  . (   L i a r a
6047:000 | DONE dir | em 16 16 |        |             |                 20 46 6f 72 74 68 20 66  --    F o r t h   f
6047:000 | DONE dir | em 16 16 |        |             |                 6f 72 20 74 68 65 20 57  --  o r   t h e   W
6047:000 | DONE dir | em 16 16 |        |             |                 36 35 43 32 36 35 53 58  --  6 5 C 2 6 5 S X
6047:000 | DONE dir | em 16 16 |        |             |                 42 20 29                 --  B   )
6048:000 | DONE dir | em 16 16 | 006fe0 | (39 bytes)  |         .byte 63, 72, 20, 2e, 28, 20, 56, 65, 72, 73, 69, 6f, 6e, (...) 
6048:000 | DONE dir | em 16 16 |        |             |                 63 72 20 2e 28 20 56 65  --  c r   . (   V e
6048:000 | DONE dir | em 16 16 |        |             |                 72 73 69 6f 6e 20 50 52  --  r s i o n   P R
6048:000 | DONE dir | em 16 16 |        |             |                 45 2d 41 4c 50 48 41 20  --  E - A L P H A  
6048:000 | DONE dir | em 16 16 |        |             |                 31 35 2e 20 4d 61 72 63  --  1 5 .   M a r c
6048:000 | DONE dir | em 16 16 |        |             |                 68 20 32 30 31 37 29     --  h   2 0 1 7 )
6049:000 | DONE dir | em 16 16 | 007007 | (51 bytes)  |         .byte 63, 72, 20, 2e, 28, 20, 53, 63, 6f, 74, 20, 57, 2e, (...) 
6049:000 | DONE dir | em 16 16 |        |             |                 63 72 20 2e 28 20 53 63  --  c r   . (   S c
6049:000 | DONE dir | em 16 16 |        |             |                 6f 74 20 57 2e 20 53 74  --  o t   W .   S t
6049:000 | DONE dir | em 16 16 |        |             |                 65 76 65 6e 73 6f 6e 20  --  e v e n s o n  
6049:000 | DONE dir | em 16 16 |        |             |                 3c 73 63 6f 74 2e 73 74  --  < s c o t . s t
6049:000 | DONE dir | em 16 16 |        |             |                 65 76 65 6e 73 6f 6e 40  --  e v e n s o n @
6049:000 | DONE dir | em 16 16 |        |             |                 67 6d 61 69 6c 2e 63 6f  --  g m a i l . c o
6049:000 | DONE dir | em 16 16 |        |             |                 6d 3e 29                 --  m > )
6050:000 | DONE dir | em 16 16 | 00703a | (52 bytes)  |         .byte 63, 72, 20, 2e, 28, 20, 4c, 69, 61, 72, 61, 20, 46, (...) 
6050:000 | DONE dir | em 16 16 |        |             |                 63 72 20 2e 28 20 4c 69  --  c r   . (   L i
6050:000 | DONE dir | em 16 16 |        |             |                 61 72 61 20 46 6f 72 74  --  a r a   F o r t
6050:000 | DONE dir | em 16 16 |        |             |                 68 20 63 6f 6d 65 73 20  --  h   c o m e s  
6050:000 | DONE dir | em 16 16 |        |             |                 77 69 74 68 20 61 62 73  --  w i t h   a b s
6050:000 | DONE dir | em 16 16 |        |             |                 6f 6c 75 74 65 6c 79 20  --  o l u t e l y  
6050:000 | DONE dir | em 16 16 |        |             |                 4e 4f 20 57 41 52 52 41  --  N O   W A R R A
6050:000 | DONE dir | em 16 16 |        |             |                 4e 54 59 29              --  N T Y )
6051:000 | DONE dir | em 16 16 | 00706e | (28 bytes)  |         .byte 63, 72, 20, 2e, 28, 20, 54, 79, 70, 65, 20, 27, 62, (...) 
6051:000 | DONE dir | em 16 16 |        |             |                 63 72 20 2e 28 20 54 79  --  c r   . (   T y
6051:000 | DONE dir | em 16 16 |        |             |                 70 65 20 27 62 79 65 27  --  p e   ' b y e '
6051:000 | DONE dir | em 16 16 |        |             |                 20 74 6f 20 65 78 69 74  --    t o   e x i t
6051:000 | DONE dir | em 16 16 |        |             |                 29 20 63 72              --  )   c r
6052:000 | DONE lbl | em 16 16 | 00708a |             | hi-end                               
6053:000 | DONE wsp | em 16 16 |        |             |
6054:000 | DONE wsp | em 16 16 |        |             |
6055:000 | DONE cmt | em 16 16 |        |             | ; ===================================================================
6056:000 | DONE cmt | em 16 16 |        |             | ; BOTTOM INCLUDES
6057:000 | DONE wsp | em 16 16 |        |             |
6058:000 | DONE cmt | em 16 16 |        |             | ; List of Strings for Liara Forth for the W65C265SXB
6058:001 | DONE cmt | em 16 16 |        |             | ; Scot W. Stevenson <scot.stevenson@gmail.com>
6058:002 | DONE cmt | em 16 16 |        |             | ; First version: 01. Apr 2016
6058:003 | DONE cmt | em 16 16 |        |             | ; This version:  11. Mar 2017
6058:004 | DONE wsp | em 16 16 |        |             |
6058:005 | DONE cmt | em 16 16 |        |             | ; This file is included by liaraforth.tasm
6058:006 | DONE wsp | em 16 16 |        |             |
6058:007 | DONE cmt | em 16 16 |        |             | ; ===================================================================
6058:008 | DONE cmt | em 16 16 |        |             | ; GENERAL
6058:009 | DONE wsp | em 16 16 |        |             |
6058:010 | DONE cmt | em 16 16 |        |             | ; All general strings must be zero-terminated, names start with "s_"
6058:011 | DONE wsp | em 16 16 |        |             |
6058:012 | DONE lbl | em 16 16 | 00708a |             | s_ok                                 
6058:013 | DONE dir | em 16 16 | 00708a | (4 bytes)   |         .byte 20, 6f, 6b, 0          note space at beginning
6058:013 | DONE dir | em 16 16 |        |             |                 20 6f 6b 00              --    o k .
6058:014 | DONE lbl | em 16 16 | 00708e |             | s_compiled                           
6058:015 | DONE dir | em 16 16 | 00708e | (10 bytes)  |         .byte 20, 63, 6f, 6d, 70, 69, 6c, 65, 64, 0 
6058:015 | DONE dir | em 16 16 |        |             |                 20 63 6f 6d 70 69 6c 65  --    c o m p i l e
6058:015 | DONE dir | em 16 16 |        |             |                 64 00                    --  d .
6058:016 | DONE wsp | em 16 16 |        |             |
6058:017 | DONE wsp | em 16 16 |        |             |
6058:018 | DONE cmt | em 16 16 |        |             | ; ===================================================================
6058:019 | DONE cmt | em 16 16 |        |             | ; ERROR STRINGS
6058:020 | DONE wsp | em 16 16 |        |             |
6058:021 | DONE cmt | em 16 16 |        |             | ; All error strings must be zero-terminated, names start with "es_"
6058:022 | DONE wsp | em 16 16 |        |             |
6058:023 | DONE lbl | em 16 16 | 007098 |             | es_allot                             
6058:024 | DONE dir | em 16 16 | 007098 | (20 bytes)  |         .byte 41, 4c, 4c, 4f, 54, 20, 6f, 75, 74, 20, 6f, 66, 20, (...) 
6058:024 | DONE dir | em 16 16 |        |             |                 41 4c 4c 4f 54 20 6f 75  --  A L L O T   o u
6058:024 | DONE dir | em 16 16 |        |             |                 74 20 6f 66 20 62 6f 75  --  t   o f   b o u
6058:024 | DONE dir | em 16 16 |        |             |                 6e 64 73 00              --  n d s .
6058:025 | DONE lbl | em 16 16 | 0070ac |             | es_componly                          
6058:026 | DONE dir | em 16 16 | 0070ac | (33 bytes)  |         .byte 49, 6e, 74, 65, 72, 70, 72, 65, 74, 69, 6e, 67, 20, (...) 
6058:026 | DONE dir | em 16 16 |        |             |                 49 6e 74 65 72 70 72 65  --  I n t e r p r e
6058:026 | DONE dir | em 16 16 |        |             |                 74 69 6e 67 20 61 20 63  --  t i n g   a   c
6058:026 | DONE dir | em 16 16 |        |             |                 6f 6d 70 69 6c 65 2d 6f  --  o m p i l e - o
6058:026 | DONE dir | em 16 16 |        |             |                 6e 6c 79 20 77 6f 72 64  --  n l y   w o r d
6058:026 | DONE dir | em 16 16 |        |             |                 00                       --  .
6058:027 | DONE lbl | em 16 16 | 0070cd |             | es_defer                             
6058:028 | DONE dir | em 16 16 | 0070cd | (29 bytes)  |         .byte 44, 45, 46, 45, 52, 65, 64, 20, 77, 6f, 72, 64, 20, (...) 
6058:028 | DONE dir | em 16 16 |        |             |                 44 45 46 45 52 65 64 20  --  D E F E R e d  
6058:028 | DONE dir | em 16 16 |        |             |                 77 6f 72 64 20 6e 6f 74  --  w o r d   n o t
6058:028 | DONE dir | em 16 16 |        |             |                 20 64 65 66 69 6e 65 64  --    d e f i n e d
6058:028 | DONE dir | em 16 16 |        |             |                 20 79 65 74 00           --    y e t .
6058:029 | DONE lbl | em 16 16 | 0070ea |             | es_divzero                           
6058:030 | DONE dir | em 16 16 | 0070ea | (17 bytes)  |         .byte 44, 69, 76, 69, 73, 69, 6f, 6e, 20, 62, 79, 20, 7a, (...) 
6058:030 | DONE dir | em 16 16 |        |             |                 44 69 76 69 73 69 6f 6e  --  D i v i s i o n
6058:030 | DONE dir | em 16 16 |        |             |                 20 62 79 20 7a 65 72 6f  --    b y   z e r o
6058:030 | DONE dir | em 16 16 |        |             |                 00                       --  .
6058:031 | DONE lbl | em 16 16 | 0070fb |             | es_error                             
6058:032 | DONE dir | em 16 16 | 0070fb | (12 bytes)  |         .byte 3e, 3e, 3e, 45, 72, 72, 6f, 72, 3c, 3c, 3c, 0 
6058:032 | DONE dir | em 16 16 |        |             |                 3e 3e 3e 45 72 72 6f 72  --  > > > E r r o r
6058:032 | DONE dir | em 16 16 |        |             |                 3c 3c 3c 00              --  < < < .
6058:033 | DONE lbl | em 16 16 | 007107 |             | es_intonly                           
6058:034 | DONE dir | em 16 16 | 007107 | (22 bytes)  |         .byte 4e, 6f, 74, 20, 69, 6e, 20, 69, 6e, 74, 65, 72, 70, (...) 
6058:034 | DONE dir | em 16 16 |        |             |                 4e 6f 74 20 69 6e 20 69  --  N o t   i n   i
6058:034 | DONE dir | em 16 16 |        |             |                 6e 74 65 72 70 72 65 74  --  n t e r p r e t
6058:034 | DONE dir | em 16 16 |        |             |                 20 6d 6f 64 65 00        --    m o d e .
6058:035 | DONE lbl | em 16 16 | 00711d |             | es_noname                            
6058:036 | DONE dir | em 16 16 | 00711d | (16 bytes)  |         .byte 50, 61, 72, 73, 69, 6e, 67, 20, 66, 61, 69, 6c, 75, (...) 
6058:036 | DONE dir | em 16 16 |        |             |                 50 61 72 73 69 6e 67 20  --  P a r s i n g  
6058:036 | DONE dir | em 16 16 |        |             |                 66 61 69 6c 75 72 65 00  --  f a i l u r e .
6058:036 | DONE dir | em 16 16 |        |             |                                          -- 
6058:037 | DONE lbl | em 16 16 | 00712d |             | es_radix                             
6058:038 | DONE dir | em 16 16 | 00712d | (23 bytes)  |         .byte 44, 69, 67, 69, 74, 20, 6c, 61, 72, 67, 65, 72, 20, (...) 
6058:038 | DONE dir | em 16 16 |        |             |                 44 69 67 69 74 20 6c 61  --  D i g i t   l a
6058:038 | DONE dir | em 16 16 |        |             |                 72 67 65 72 20 74 68 61  --  r g e r   t h a
6058:038 | DONE dir | em 16 16 |        |             |                 6e 20 62 61 73 65 00     --  n   b a s e .
6058:039 | DONE lbl | em 16 16 | 007144 |             | es_refill1                           
6058:040 | DONE dir | em 16 16 | 007144 | (46 bytes)  |         .byte 51, 55, 49, 54, 20, 63, 6f, 75, 6c, 64, 20, 6e, 6f, (...) 
6058:040 | DONE dir | em 16 16 |        |             |                 51 55 49 54 20 63 6f 75  --  Q U I T   c o u
6058:040 | DONE dir | em 16 16 |        |             |                 6c 64 20 6e 6f 74 20 67  --  l d   n o t   g
6058:040 | DONE dir | em 16 16 |        |             |                 65 74 20 69 6e 70 75 74  --  e t   i n p u t
6058:040 | DONE dir | em 16 16 |        |             |                 20 28 52 45 46 49 4c 4c  --    ( R E F I L L
6058:040 | DONE dir | em 16 16 |        |             |                 20 72 65 74 75 72 6e 65  --    r e t u r n e
6058:040 | DONE dir | em 16 16 |        |             |                 64 20 2d 31 29 00        --  d   - 1 ) .
6058:041 | DONE lbl | em 16 16 | 007172 |             | es_refill2                           
6058:042 | DONE dir | em 16 16 | 007172 | (32 bytes)  |         .byte 49, 6c, 6c, 65, 67, 61, 6c, 20, 53, 4f, 55, 52, 43, (...) 
6058:042 | DONE dir | em 16 16 |        |             |                 49 6c 6c 65 67 61 6c 20  --  I l l e g a l  
6058:042 | DONE dir | em 16 16 |        |             |                 53 4f 55 52 43 45 2d 49  --  S O U R C E - I
6058:042 | DONE dir | em 16 16 |        |             |                 44 20 64 75 72 69 6e 67  --  D   d u r i n g
6058:042 | DONE dir | em 16 16 |        |             |                 20 52 45 46 49 4c 4c 00  --    R E F I L L .
6058:042 | DONE dir | em 16 16 |        |             |                                          -- 
6058:043 | DONE lbl | em 16 16 | 007192 |             | es_state                             
6058:044 | DONE dir | em 16 16 | 007192 | (24 bytes)  |         .byte 41, 6c, 72, 65, 61, 64, 79, 20, 69, 6e, 20, 63, 6f, (...) 
6058:044 | DONE dir | em 16 16 |        |             |                 41 6c 72 65 61 64 79 20  --  A l r e a d y  
6058:044 | DONE dir | em 16 16 |        |             |                 69 6e 20 63 6f 6d 70 69  --  i n   c o m p i
6058:044 | DONE dir | em 16 16 |        |             |                 6c 65 20 6d 6f 64 65 00  --  l e   m o d e .
6058:044 | DONE dir | em 16 16 |        |             |                                          -- 
6058:045 | DONE lbl | em 16 16 | 0071aa |             | es_underflow                         
6058:046 | DONE dir | em 16 16 | 0071aa | (16 bytes)  |         .byte 53, 74, 61, 63, 6b, 20, 75, 6e, 64, 65, 72, 66, 6c, (...) 
6058:046 | DONE dir | em 16 16 |        |             |                 53 74 61 63 6b 20 75 6e  --  S t a c k   u n
6058:046 | DONE dir | em 16 16 |        |             |                 64 65 72 66 6c 6f 77 00  --  d e r f l o w .
6058:046 | DONE dir | em 16 16 |        |             |                                          -- 
6058:047 | DONE lbl | em 16 16 | 0071ba |             | es_syntax                            
6058:048 | DONE dir | em 16 16 | 0071ba | (15 bytes)  |         .byte 55, 6e, 64, 65, 66, 69, 6e, 65, 64, 20, 77, 6f, 72, (...) 
6058:048 | DONE dir | em 16 16 |        |             |                 55 6e 64 65 66 69 6e 65  --  U n d e f i n e
6058:048 | DONE dir | em 16 16 |        |             |                 64 20 77 6f 72 64 00     --  d   w o r d .
6058:049 | DONE wsp | em 16 16 |        |             |
6058:050 | DONE wsp | em 16 16 |        |             |
6058:051 | DONE cmt | em 16 16 |        |             | ; ===================================================================
6058:052 | DONE cmt | em 16 16 |        |             | ; ANSI VT-100 SEQUENCES
6058:053 | DONE wsp | em 16 16 |        |             |
6058:054 | DONE lbl | em 16 16 | 0071c9 |             | vt100_page                           
6058:055 | DONE dir | em 16 16 | 0071c9 | (5 bytes)   |         .byte AscESC, 5b, 32, 4a, 0  clear screen
6058:055 | DONE dir | em 16 16 |        |             |                 1b 5b 32 4a 00           --  . [ 2 J .
6058:056 | DONE lbl | em 16 16 | 0071ce |             | vt100_home                           
6058:057 | DONE dir | em 16 16 | 0071ce | (4 bytes)   |         .byte AscESC, 5b, 48, 0      cursor home
6058:057 | DONE dir | em 16 16 |        |             |                 1b 5b 48 00              --  . [ H .
6058:058 | DONE wsp | em 16 16 |        |             |
6058:059 | DONE wsp | em 16 16 |        |             |
6058:060 | DONE cmt | em 16 16 |        |             | ; ===================================================================
6058:061 | DONE cmt | em 16 16 |        |             | ; TESTING STRINGS
6058:062 | DONE wsp | em 16 16 |        |             |
6058:063 | DONE cmt | em 16 16 |        |             | ; These strings are only used during testing and are removed as Liara Forth is
6058:064 | DONE cmt | em 16 16 |        |             | ; developed. All start with "tests_"
6058:065 | DONE wsp | em 16 16 |        |             |
6058:066 | DONE lbl | em 16 16 | 0071d2 |             | tests_prev_cmd                       
6058:067 | DONE dir | em 16 16 | 0071d2 | (19 bytes)  |         .byte 28, 70, 72, 65, 76, 69, 6f, 75, 73, 20, 63, 6f, 6d, (...) 
6058:067 | DONE dir | em 16 16 |        |             |                 28 70 72 65 76 69 6f 75  --  ( p r e v i o u
6058:067 | DONE dir | em 16 16 |        |             |                 73 20 63 6f 6d 6d 61 6e  --  s   c o m m a n
6058:067 | DONE dir | em 16 16 |        |             |                 64 29 00                 --  d ) .
6058:068 | DONE lbl | em 16 16 | 0071e5 |             | tests_next_cmd                       
6058:069 | DONE dir | em 16 16 | 0071e5 | (15 bytes)  |         .byte 28, 6e, 65, 78, 74, 20, 63, 6f, 6d, 6d, 61, 6e, 64, (...) 
6058:069 | DONE dir | em 16 16 |        |             |                 28 6e 65 78 74 20 63 6f  --  ( n e x t   c o
6058:069 | DONE dir | em 16 16 |        |             |                 6d 6d 61 6e 64 29 00     --  m m a n d ) .
6058:070 | DONE wsp | em 16 16 |        |             |
6058:071 | DONE wsp | em 16 16 |        |             |
6058:072 | DONE cmt | em 16 16 |        |             | ; ===================================================================
6058:073 | DONE cmt | em 16 16 |        |             | ; ALPHABET STRINGS
6058:074 | DONE wsp | em 16 16 |        |             |
6058:075 | DONE cmt | em 16 16 |        |             | ; Leave alphastr as the last entry in the source code to make it easier to
6058:076 | DONE cmt | em 16 16 |        |             | ; see where this section ends. This cannot be a zero-terminated string
6058:077 | DONE cmt | em 16 16 |        |             | ; TODO see if we need lower
6058:078 | DONE wsp | em 16 16 |        |             |
6058:079 | DONE lbl | em 16 16 | 0071f4 |             | abc_str_lower                        
6058:080 | DONE dir | em 16 16 | 0071f4 | (35 bytes)  |         .byte 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 61, 62, 63, (...) 
6058:080 | DONE dir | em 16 16 |        |             |                 30 31 32 33 34 35 36 37  --  0 1 2 3 4 5 6 7
6058:080 | DONE dir | em 16 16 |        |             |                 38 39 61 62 63 64 65 66  --  8 9 a b c d e f
6058:080 | DONE dir | em 16 16 |        |             |                 67 68 69 6a 6b 6c 6d 6e  --  g h i j k l m n
6058:080 | DONE dir | em 16 16 |        |             |                 6f 70 71 72 73 74 75 76  --  o p q r s t u v
6058:080 | DONE dir | em 16 16 |        |             |                 77 79 7a                 --  w y z
6058:081 | DONE lbl | em 16 16 | 007217 |             | abc_str_upper                        
6058:082 | DONE dir | em 16 16 | 007217 | (35 bytes)  |         .byte 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 41, 42, 43, (...) 
6058:082 | DONE dir | em 16 16 |        |             |                 30 31 32 33 34 35 36 37  --  0 1 2 3 4 5 6 7
6058:082 | DONE dir | em 16 16 |        |             |                 38 39 41 42 43 44 45 46  --  8 9 A B C D E F
6058:082 | DONE dir | em 16 16 |        |             |                 47 48 49 4a 4b 4c 4d 4e  --  G H I J K L M N
6058:082 | DONE dir | em 16 16 |        |             |                 4f 50 51 52 53 54 55 56  --  O P Q R S T U V
6058:082 | DONE dir | em 16 16 |        |             |                 57 59 5a                 --  W Y Z
6058:083 | DONE wsp | em 16 16 |        |             |
6059:000 | DONE wsp | em 16 16 |        |             |
6060:000 | DONE wsp | em 16 16 |        |             |
6061:000 | DONE cmt | em 16 16 |        |             | ; ===================================================================
6062:000 | DONE cmt | em 16 16 |        |             | ; END
6063:000 | DONE dir | em 16 16 |        |             |         .end                         

MACROS:
        (none)

SYMBOL TABLE:
- abc_str_lower               : 0071f4
- abc_str_upper               : 007217
- abortq_done                 : 0054a1
- abortq_rt                   : 005497
- accept_bs                   : 005520
- accept_eol                  : 005519
- accept_loop                 : 0054c6
- accept_nonzero              : 0054bb
- adjust_z                    : 00572b
- allot_done                  : 00557e
- allot_error                 : 00556d
- allot_minus                 : 005573
- allot_real_gone             : 005580
- ascbell                     : 000007
- ascbs                       : 000008
- asccc                       : 000003
- asccn                       : 00000e
- asccp                       : 000010
- asccr                       : 00000d
- ascdel                      : 00007f
- ascesc                      : 00001b
- asclf                       : 00000a
- ascsp                       : 000020
- base                        : 000016
- branch_rt                   : 0055e3
- brg_value                   : 00000b
- bsize                       : 000080
- buffer0                     : 000200
- buffer1                     : 000280
- byte_to_ascii               : 006a59
- char_got_char               : 005630
- cib                         : 000008
- ciblen                      : 00000a
- cmpl_body                   : 006a15
- cmpl_common                 : 006a08
- cmpl_jump                   : 006a05
- cmpl_subroutine             : 006a00
- cmpl_word                   : 0069fb
- co                          : 000004
- code0                       : 005000
- compile_2r                  : 0056e3
- compile_as_code             : 0056a2
- compile_as_jump             : 0056fb
- compile_move                : 0056ef
- compile_not_nop             : 0056c5
- compile_r                   : 0056dd
- cp                          : 000000
- cp-end                      : 004fff
- cp0                         : 000300
- create_got_name             : 005761
- defer_error                 : 006982
- do_common                   : 005882
- do_do                       : 0058a8
- doconst                     : 00696b
- dodefer                     : 006979
- dodoes                      : 006988
- does_rt                     : 0058c6
- dots_done                   : 005241
- dots_loop                   : 00522e
- dots_not_empty              : 005229
- dovar                       : 006995
- dp                          : 000002
- dpage                       : 000000
- dq_case_done                : 0057fe
- dq_checkbase                : 005801
- dq_notdigit                 : 005808
- dq_success                  : 005813
- dsp0                        : 0000ff
- dtrailing_done              : 005381
- dtrailing_loop              : 005378
- dump_done                   : 0058f8
- dump_loop                   : 0058e2
- emit_a                      : 005909
- equal_not                   : 00538e
- erase_done                  : 005923
- erase_loop                  : 00591c
- error                       : 006a21
- es_allot                    : 007098
- es_componly                 : 0070ac
- es_defer                    : 0070cd
- es_divzero                  : 0070ea
- es_error                    : 0070fb
- es_intonly                  : 007107
- es_noname                   : 00711d
- es_radix                    : 00712d
- es_refill1                  : 007144
- es_refill2                  : 007172
- es_state                    : 007192
- es_syntax                   : 0071ba
- es_underflow                : 0071aa
- execute_ip                  : 00595d
- find-name_all_chars         : 0059c9
- find-name_char_nomatcnt_8   : 0059c5
- find-name_chars             : 0059ba
- find-name_done              : 0059ef
- find-name_failure_16        : 0059ec
- find-name_loop              : 0059a5
- find-name_next_entry        : 0059ae
- find-name_success           : 0059e6
- find_found                  : 005980
- find_imm                    : 005999
- fmmod_1                     : 005a10
- fmmod_1_1                   : 005a14
- fmmod_2                     : 005a41
- fmmod_2_1                   : 005a45
- fn                          : 000008
- get_chr                     : 005045
- get_chr_wait                : 005049
- greater_nip                 : 005134
- greater_no_ov               : 005131
- hashs_loop                  : 0052b6
- have_chr                    : 005057
- havekey                     : 000012
- hi-end                      : 00708a
- hi-start                    : 006a74
- hw_acsr0                    : 00df70
- hw_acsr1                    : 00df72
- hw_acsr2                    : 00df74
- hw_acsr3                    : 00df76
- hw_artd0                    : 00df71
- hw_artd1                    : 00df73
- hw_artd2                    : 00df75
- hw_artd3                    : 00df77
- hw_bcr                      : 00df40
- hw_eier                     : 00df47
- hw_eifr                     : 00df45
- hw_pcs7                     : 00df27
- hw_pd0                      : 00df00
- hw_pd1                      : 00df01
- hw_pd2                      : 00df02
- hw_pd3                      : 00df03
- hw_pd4                      : 00df20
- hw_pd5                      : 00df21
- hw_pd6                      : 00df22
- hw_pd7                      : 00df23
- hw_pdd0                     : 00df04
- hw_pdd1                     : 00df05
- hw_pdd2                     : 00df06
- hw_pdd3                     : 00df07
- hw_pdd4                     : 00df24
- hw_pdd5                     : 00df25
- hw_pdd6                     : 00df26
- hw_sscr                     : 00df41
- hw_t0ch                     : 00df61
- hw_t0cl                     : 00df60
- hw_t1ch                     : 00df63
- hw_t1cl                     : 00df62
- hw_t2ch                     : 00df65
- hw_t2cl                     : 00df64
- hw_t3ch                     : 00df67
- hw_t3cl                     : 00df66
- hw_t4ch                     : 00df69
- hw_t4cl                     : 00df68
- hw_t5ch                     : 00df6b
- hw_t5cl                     : 00df6a
- hw_t6ch                     : 00df6d
- hw_t6cl                     : 00df6c
- hw_t7ch                     : 00df6f
- hw_t7cl                     : 00df6e
- hw_tcr                      : 00df42
- hw_ter                      : 00df43
- hw_tier                     : 00df46
- hw_tifr                     : 00df44
- hw_uier                     : 00df49
- hw_uifr                     : 00df48
- im                          : 000002
- in_found                    : 005a93
- in_loop                     : 005a7b
- in_notfound                 : 005a8d
- input                       : 000010
- insrc                       : 000006
- interpret                   : 00699c
- interpret_compile           : 0069e6
- interpret_got_name_token    : 0069c0
- interpret_interpret         : 0069e0
- interpret_line_done         : 0069f4
- interpret_loop              : 00699c
- less_nip                    : 00510a
- less_no_ov                  : 005107
- literal_rt                  : 005ae1
- lshift_done                 : 005afd
- lshift_loop                 : 005af7
- max_drop                    : 005b5a
- max_nip                     : 005b5c
- max_no_ov                   : 005b58
- min_drop                    : 005b6d
- min_nip                     : 005b6f
- min_no_ov                   : 005b6b
- move_cmoveup                : 005b82
- mstar_abs_nos               : 005b0e
- mstar_umstar                : 005b18
- nc                          : 000001
- nc_limit                    : 000026
- nibble_to_ascii             : 006a62
- not-equal_equal             : 005116
- nt_2drop                    : 0068e3
- nt_2dup                     : 006600
- nt_2over                    : 0068ae
- nt_2swap                    : 0068bb
- nt_2variable                : 006207
- nt_abort                    : 0062ff
- nt_abortq                   : 0062f1
- nt_abs                      : 00660c
- nt_accept                   : 006852
- nt_again                    : 00656f
- nt_align                    : 0060b8
- nt_aligned                  : 0060a9
- nt_allot                    : 0065ab
- nt_and                      : 0066f7
- nt_at-xy                    : 0061ef
- nt_backslash                : 00686b
- nt_base                     : 006415
- nt_begin                    : 00657c
- nt_bell                     : 006188
- nt_bl                       : 0063b0
- nt_bounds                   : 00691c
- nt_bracketchar              : 006498
- nt_brackettick              : 00648d
- nt_branch                   : 006561
- nt_bye                      : 00607a
- nt_c-comma                  : 00671a
- nt_c-fetch                  : 006724
- nt_c-store                  : 00672e
- nt_cellplus                 : 0061a1
- nt_cells                    : 00645c
- nt_char                     : 0066c8
- nt_charplus                 : 0061ae
- nt_chars                    : 006194
- nt_cmove                    : 0062d7
- nt_cmoveup                  : 0062c9
- nt_cold                     : 006085
- nt_colon                    : 0065a2
- nt_comma                    : 006849
- nt_compile-only             : 0064cb
- nt_compilecomma             : 006589
- nt_constant                 : 006661
- nt_count                    : 0062e4
- nt_cr                       : 00634e
- nt_create                   : 0065df
- nt_dabs                     : 006218
- nt_decimal                  : 0061bb
- nt_defer                    : 0065b8
- nt_depth                    : 00663d
- nt_digitq                   : 00690e
- nt_dminus                   : 00625f
- nt_dnegate                  : 006224
- nt_do                       : 006154
- nt_does                     : 0065d2
- nt_dot                      : 006401
- nt_dotquote                 : 006469
- nt_dots                     : 0063d5
- nt_dplus                    : 006269
- nt_drop                     : 00695f
- nt_dtos                     : 006233
- nt_dtrailing                : 006532
- nt_dump                     : 0060e5
- nt_dup                      : 006954
- nt_emit                     : 0063f5
- nt_equal                    : 0067ad
- nt_erase                    : 006364
- nt_evaluate                 : 00644c
- nt_execute                  : 0068c8
- nt_false                    : 0067b6
- nt_fetch                    : 006936
- nt_fill                     : 006358
- nt_find                     : 00609d
- nt_find-name                : 006807
- nt_fmmod                    : 006273
- nt_fromr                    : 0068fa
- nt_greater                  : 006787
- nt_hash                     : 00639d
- nt_hashs                    : 006387
- nt_here                     : 0068d7
- nt_hex                      : 0061ca
- nt_hold                     : 00637b
- nt_i                        : 006127
- nt_immediate                : 0064df
- nt_input                    : 006431
- nt_int-name                 : 00632e
- nt_invert                   : 0066ba
- nt_key                      : 006860
- nt_latestnt                 : 006512
- nt_latestxt                 : 006522
- nt_leftbracket              : 006509
- nt_less                     : 006790
- nt_lessnumber               : 0063a6
- nt_literal                  : 0064a6
- nt_loop                     : 00611b
- nt_lshift                   : 006702
- nt_marker                   : 00615e
- nt_max                      : 0066a1
- nt_min                      : 006696
- nt_minus                    : 006742
- nt_move                     : 00668a
- nt_mrot                     : 006897
- nt_mstar                    : 0062b4
- nt_name-int                 : 00633e
- nt_name-string              : 0065ed
- nt_native-compile           : 0064b5
- nt_nc-limit                 : 006421
- nt_negate                   : 0066ac
- nt_nip                      : 00688c
- nt_not-equal                : 0067a3
- nt_number                   : 0067de
- nt_numbermore               : 006371
- nt_one                      : 0067f5
- nt_one-minus                : 006754
- nt_one-plus                 : 00675e
- nt_or                       : 0066ed
- nt_output                   : 00643e
- nt_over                     : 00692a
- nt_pad                      : 00640a
- nt_page                     : 0061e3
- nt_parse                    : 00630c
- nt_parse-name               : 006826
- nt_pdo                      : 00613d
- nt_pick                     : 00617c
- nt_ploop                    : 00610e
- nt_plus                     : 00674b
- nt_plusstore                : 006710
- nt_postpone                 : 0064f0
- nt_pploop                   : 0060ff
- nt_pqdo                     : 006130
- nt_qdo                      : 006149
- nt_qdup                     : 006874
- nt_question                 : 006325
- nt_quit                     : 006319
- nt_refill                   : 006818
- nt_rfetch                   : 0068f0
- nt_rightbracket             : 006500
- nt_rot                      : 0068a3
- nt_rshift                   : 0066d4
- nt_semicolon                : 006599
- nt_sign                     : 006391
- nt_slashstring              : 006543
- nt_sliteral                 : 00647d
- nt_smrem                    : 006281
- nt_source                   : 00662f
- nt_source-id                : 006838
- nt_space                    : 0063c8
- nt_spaces                   : 0063ba
- nt_squote                   : 006473
- nt_star                     : 0062ab
- nt_state                    : 006617
- nt_stod                     : 00623e
- nt_store                    : 00693f
- nt_swap                     : 006948
- nt_tick                     : 006681
- nt_to                       : 00664a
- nt_to-in                    : 006624
- nt_tobody                   : 0065c5
- nt_tonumber                 : 0067cf
- nt_tor                      : 006904
- nt_true                     : 0067c3
- nt_tuck                     : 006880
- nt_two                      : 0067ec
- nt_two-star                 : 006738
- nt_twofromr                 : 006249
- nt_tworfetch                : 0061fc
- nt_twotor                   : 006254
- nt_type                     : 0063df
- nt_udmod                    : 00628f
- nt_udot                     : 0063eb
- nt_ummod                    : 00629d
- nt_umstar                   : 0062be
- nt_unloop                   : 0060f1
- nt_unused                   : 0061d5
- nt_value                    : 006654
- nt_variable                 : 006671
- nt_word                     : 006091
- nt_words                    : 0060d8
- nt_wordsize                 : 00616c
- nt_wordsnsizes              : 0060c5
- nt_xor                      : 0066e2
- nt_zbranch                  : 006552
- nt_zero                     : 0067fe
- nt_zero-equal               : 006799
- nt_zero-less                : 00677d
- nt_zero-more                : 006773
- nt_zero-notequal            : 006768
- number_dot                  : 005bd3
- number_loop                 : 005bfa
- number_main                 : 005bec
- number_ok                   : 005c06
- number_single               : 005c2e
- output                      : 00000e
- padoffset                   : 0000ff
- parse-name_empty_line       : 005c80
- parse-name_found            : 005c96
- parse-name_loop             : 005c73
- parse_found_delimiter       : 005cc2
- parse_loop                  : 005cb5
- parse_reached_eol           : 005cc6
- pp_got_nt                   : 005d06
- pp_got_word                 : 005cfe
- pp_not_immediate            : 005d17
- pploop_jmp                  : 0052ec
- pqdo_done                   : 0052f7
- print_string                : 006a27
- print_string_done           : 006a36
- print_u                     : 006a3f
- put_chr                     : 005034
- put_chr_wait                : 005039
- quit_compiled               : 0050f0
- quit_get_line               : 0050c5
- quit_ok                     : 0050e7
- quit_print                  : 0050f3
- quit_refill_successful      : 0050d3
- ram-end                     : 007fff
- ram-start                   : 000000
- refill_source_is_not_string : 005d5b
- refill_src_not_kbd          : 005d51
- reset_hardware              : 005000
- rshift_done                 : 005d7a
- rshift_loop                 : 005d74
- s_compiled                  : 00708e
- s_ok                        : 00708a
- scratch                     : 000028
- sign_plus                   : 005dd0
- sl_loop                     : 005df5
- sliteral_rt                 : 005e20
- smrem_1                     : 005e70
- smrem_1_1                   : 005e74
- smrem_2                     : 005e8b
- smrem_2_1                   : 005e8f
- spaces_done                 : 005eb6
- spaces_loop                 : 005eab
- squote_compile              : 005db1
- stack                       : 000100
- stack0                      : 0001ff
- start                       : 005067
- state                       : 000014
- stod_pos                    : 005dc1
- tests_next_cmd              : 0071e5
- tests_prev_cmd              : 0071d2
- tick_have_nt                : 005489
- tick_have_word              : 00547d
- tmp1                        : 00001c
- tmp2                        : 00001e
- tmp3                        : 000020
- tmpbranch                   : 00001a
- tmpdsp                      : 000022
- tmptos                      : 000024
- tobody_have_cfa             : 005158
- tobody_nojsr                : 00515a
- tohold                      : 000018
- toin                        : 00000c
- tonumber_done               : 0051b3
- tonumber_loop               : 00516f
- tonumber_ok                 : 00517e
- type_done                   : 005f06
- type_loop                   : 005efa
- ummod_complete              : 005fda
- ummod_notzero               : 005f9b
- ummod_overflow              : 005fd1
- ummod_shift                 : 005fb3
- umstar_counter              : 005f6a
- umstar_loop                 : 005f5c
- umstar_one_nos              : 005f7d
- umstar_one_tos              : 005f7a
- umstar_two_common           : 005f89
- umstar_two_nos              : 005f88
- umstar_two_tos              : 005f84
- umstar_zero                 : 005f73
- user0                       : 000000
- vt100_home                  : 0071ce
- vt100_page                  : 0071c9
- words_common                : 006025
- words_loop                  : 00602f
- words_nosizes               : 00604c
- workword                    : 000004
- xt_2drop                    : 00540f
- xt_2dup                     : 005416
- xt_2over                    : 005421
- xt_2swap                    : 00544d
- xt_2variable                : 00545e
- xt_abort                    : 0050b2
- xt_abortq                   : 00548d
- xt_abs                      : 0054aa
- xt_accept                   : 0054b3
- xt_again                    : 005542
- xt_align                    : 005558
- xt_aligned                  : 00555a
- xt_allot                    : 00555c
- xt_and                      : 005585
- xt_at-xy                    : 00558c
- xt_backslash                : 005325
- xt_base                     : 0055b4
- xt_begin                    : 0055c3
- xt_bell                     : 0055bc
- xt_bl                       : 0055ca
- xt_bounds                   : 0055d2
- xt_bracketchar              : 00531e
- xt_brackettick              : 00530e
- xt_branch                   : 0055dc
- xt_bye                      : 0055f0
- xt_c-comma                  : 0055f7
- xt_c-fetch                  : 005605
- xt_c-store                  : 005611
- xt_cellplus                 : 005621
- xt_char                     : 005624
- xt_chars                    : 00563c
- xt_cmove                    : 00563e
- xt_cmoveup                  : 005661
- xt_cold                     : 005064
- xt_colon                    : 005251
- xt_comma                    : 005245
- xt_compile-only             : 00567a
- xt_compilecomma             : 005683
- xt_constant                 : 005712
- xt_count                    : 005741
- xt_cr                       : 00574f
- xt_create                   : 005756
- xt_dabs                     : 005849
- xt_decimal                  : 005850
- xt_defer                    : 0057c6
- xt_depth                    : 005856
- xt_digitq                   : 0057e1
- xt_dminus                   : 00582f
- xt_dnegate                  : 005865
- xt_do                       : 005880
- xt_does                     : 0058b9
- xt_dot                      : 0051da
- xt_dotquote                 : 0051f9
- xt_dots                     : 00520d
- xt_dplus                    : 00581d
- xt_drop                     : 0058dc
- xt_dtos                     : 005844
- xt_dtrailing                : 00536e
- xt_dump                     : 0058e1
- xt_dup                      : 0058ff
- xt_emit                     : 005904
- xt_equal                    : 005385
- xt_erase                    : 00590c
- xt_evaluate                 : 00592e
- xt_execute                  : 005960
- xt_fetch                    : 0052da
- xt_fill                     : 005913
- xt_find                     : 00596a
- xt_find-name                : 00599b
- xt_fmmod                    : 0059f2
- xt_fromr                    : 005d30
- xt_greater                  : 005123
- xt_hash                     : 00528c
- xt_hashs                    : 0052b6
- xt_here                     : 005a9c
- xt_hex                      : 005aa3
- xt_hold                     : 005aa9
- xt_i                        : 005a56
- xt_immediate                : 005a61
- xt_input                    : 005a6a
- xt_int-name                 : 005a72
- xt_invert                   : 005a96
- xt_key                      : 005a46
- xt_latestnt                 : 005ab7
- xt_latestxt                 : 005abf
- xt_leftbracket              : 005315
- xt_less                     : 0050f9
- xt_lessnumber               : 005119
- xt_literal                  : 005acf
- xt_loop                     : 005332
- xt_lshift                   : 005aee
- xt_marker                   : 005b22
- xt_max                      : 005b4c
- xt_min                      : 005b5f
- xt_minus                    : 00535a
- xt_move                     : 005b72
- xt_mrot                     : 005365
- xt_mstar                    : 005b02
- xt_name-int                 : 005b86
- xt_name-string              : 005b8f
- xt_native-compile           : 005ba0
- xt_nc-limit                 : 005ba9
- xt_negate                   : 005bb1
- xt_nip                      : 005bb8
- xt_not-equal                : 00510d
- xt_number                   : 005bbb
- xt_numbermore               : 0052a7
- xt_one                      : 0053e6
- xt_one-minus                : 0053ee
- xt_one-plus                 : 0053f0
- xt_or                       : 005c3f
- xt_output                   : 005c46
- xt_over                     : 005c4e
- xt_pad                      : 005c55
- xt_page                     : 005c61
- xt_parse                    : 005ca2
- xt_parse-name               : 005c6e
- xt_pdo                      : 0052fb
- xt_pick                     : 005cd5
- xt_ploop                    : 005338
- xt_plus                     : 00532a
- xt_plusstore                : 005ce3
- xt_postpone                 : 005cf3
- xt_pploop                   : 0052df
- xt_pqdo                     : 0052ee
- xt_qdo                      : 005879
- xt_qdup                     : 0052c6
- xt_question                 : 0052bf
- xt_quit                     : 0050ba
- xt_refill                   : 005d38
- xt_rfetch                   : 005d27
- xt_rightbracket             : 005318
- xt_rot                      : 005d62
- xt_rshift                   : 005d6b
- xt_semicolon                : 005273
- xt_sign                     : 005dc5
- xt_slashstring              : 0051c8
- xt_sliteral                 : 005dd5
- xt_smrem                    : 005e36
- xt_source                   : 005e90
- xt_source-id                : 005e9d
- xt_space                    : 005ea4
- xt_spaces                   : 005eab
- xt_squote                   : 005d7f
- xt_star                     : 005ebb
- xt_state                    : 005ec3
- xt_stod                     : 005db5
- xt_store                    : 0052ce
- xt_swap                     : 005ecb
- xt_tick                     : 005471
- xt_to                       : 005ed1
- xt_to-in                    : 00515b
- xt_tobody                   : 005137
- xt_tonumber                 : 005163
- xt_tor                      : 0051c0
- xt_true                     : 005edb
- xt_tuck                     : 005ee3
- xt_two                      : 0053f2
- xt_two-star                 : 0053fa
- xt_twofromr                 : 00542e
- xt_tworfetch                : 00543f
- xt_twotor                   : 0053fe
- xt_type                     : 005eec
- xt_udmod                    : 005f17
- xt_udot                     : 005f0d
- xt_ummod                    : 005f92
- xt_umstar                   : 005f33
- xt_unloop                   : 005fe3
- xt_unused                   : 005fe7
- xt_variable                 : 005ff3
- xt_word                     : 006003
- xt_words                    : 006023
- xt_wordsize                 : 006060
- xt_wordsnsizes              : 00601c
- xt_xor                      : 006073
- xt_zbranch                  : 0053c8
- xt_zero                     : 005391
- xt_zero-equal               : 005399
- xt_zero-less                : 0053a5
- xt_zero-more                : 0053bd
- xt_zero-notequal            : 0053b1
- z_2drop                     : 005415
- z_2dup                      : 005420
- z_2over                     : 00542d
- z_2swap                     : 00545d
- z_2variable                 : 005470
- z_abort                     : 0050f9
- z_abortq                    : 0054a9
- z_abs                       : 0054b2
- z_accept                    : 005541
- z_again                     : 005557
- z_align                     : 005559
- z_aligned                   : 00555b
- z_allot                     : 005584
- z_and                       : 00558b
- z_at-xy                     : 0055b3
- z_backslash                 : 005329
- z_base                      : 0055bb
- z_begin                     : 0055c9
- z_bell                      : 0055c2
- z_bl                        : 0055d1
- z_bounds                    : 0055db
- z_bracketchar               : 005324
- z_brackettick               : 005314
- z_branch                    : 0055e2
- z_bye                       : 0055f7
- z_c-comma                   : 005604
- z_c-fetch                   : 005610
- z_c-store                   : 005620
- z_cellplus                  : 005623
- z_char                      : 00563b
- z_chars                     : 00563d
- z_cmove                     : 005660
- z_cmoveup                   : 005679
- z_cold                      : 0050f9
- z_colon                     : 005272
- z_comma                     : 005250
- z_compile-only              : 005682
- z_compilecomma              : 005711
- z_constant                  : 005740
- z_count                     : 00574e
- z_cr                        : 005755
- z_create                    : 0057c5
- z_dabs                      : 00584f
- z_decimal                   : 005855
- z_defer                     : 0057e0
- z_depth                     : 005864
- z_digitq                    : 00581c
- z_dminus                    : 005843
- z_dnegate                   : 005878
- z_do                        : 0058b8
- z_does                      : 0058c5
- z_dot                       : 0051f8
- z_dotquote                  : 00520c
- z_dots                      : 005244
- z_dplus                     : 00582e
- z_drop                      : 0058e0
- z_dtos                      : 005848
- z_dtrailing                 : 005384
- z_dump                      : 0058fe
- z_dup                       : 005903
- z_emit                      : 00590c
- z_equal                     : 005390
- z_erase                     : 00592d
- z_evaluate                  : 00595c
- z_execute                   : 00596a
- z_fetch                     : 0052de
- z_fill                      : 00592d
- z_find                      : 00599a
- z_find-name                 : 0059f1
- z_fmmod                     : 005a45
- z_fromr                     : 005d37
- z_greater                   : 005136
- z_hash                      : 0052a6
- z_hashs                     : 0052be
- z_here                      : 005aa2
- z_hex                       : 005aa8
- z_hold                      : 005ab6
- z_i                         : 005a60
- z_immediate                 : 005a69
- z_input                     : 005a71
- z_int-name                  : 005a95
- z_invert                    : 005a9b
- z_key                       : 005a55
- z_latestnt                  : 005abe
- z_latestxt                  : 005ace
- z_leftbracket               : 005317
- z_less                      : 00510c
- z_lessnumber                : 005122
- z_literal                   : 005ae0
- z_loop                      : 005359
- z_lshift                    : 005b01
- z_marker                    : 005b4b
- z_max                       : 005b5e
- z_min                       : 005b71
- z_minus                     : 005364
- z_move                      : 005b85
- z_mrot                      : 00536d
- z_mstar                     : 005b21
- z_name-int                  : 005b8e
- z_name-string               : 005b9f
- z_native-compile            : 005ba8
- z_nc-limit                  : 005bb0
- z_negate                    : 005bb7
- z_nip                       : 005bba
- z_not-equal                 : 005118
- z_number                    : 005c3e
- z_numbermore                : 0052b5
- z_one                       : 0053ed
- z_one-minus                 : 0053ef
- z_one-plus                  : 0053f1
- z_or                        : 005c45
- z_output                    : 005c4d
- z_over                      : 005c54
- z_pad                       : 005c60
- z_page                      : 005c6d
- z_parse                     : 005cd4
- z_parse-name                : 005cd4
- z_pdo                       : 00530d
- z_pick                      : 005ce2
- z_ploop                     : 005359
- z_plus                      : 005331
- z_plusstore                 : 005cf2
- z_postpone                  : 005d26
- z_pploop                    : 0052ed
- z_pqdo                      : 00530d
- z_qdo                       : 0058b8
- z_qdup                      : 0052cd
- z_question                  : 0052c5
- z_quit                      : 0050f9
- z_refill                    : 005d61
- z_rfetch                    : 005d2f
- z_rightbracket              : 00531d
- z_rot                       : 005d6a
- z_rshift                    : 005d7e
- z_semicolon                 : 00528b
- z_sign                      : 005dd4
- z_slashstring               : 0051d9
- z_sliteral                  : 005e1f
- z_smrem                     : 005e8f
- z_source                    : 005e9c
- z_source-id                 : 005ea3
- z_space                     : 005eaa
- z_spaces                    : 005eba
- z_squote                    : 005db4
- z_star                      : 005ec2
- z_state                     : 005eca
- z_stod                      : 005dc4
- z_store                     : 0052d9
- z_swap                      : 005ed0
- z_tick                      : 00548c
- z_to                        : 005eda
- z_to-in                     : 005162
- z_tobody                    : 00515a
- z_tonumber                  : 0051bf
- z_tor                       : 0051c7
- z_true                      : 005ee2
- z_tuck                      : 005eeb
- z_two                       : 0053f9
- z_two-star                  : 0053fd
- z_twofromr                  : 00543e
- z_tworfetch                 : 00544c
- z_twotor                    : 00540e
- z_type                      : 005f0c
- z_udmod                     : 005f32
- z_udot                      : 005f16
- z_ummod                     : 005fe2
- z_umstar                    : 005f91
- z_unloop                    : 005fe6
- z_unused                    : 005ff2
- z_variable                  : 006002
- z_word                      : 00601b
- z_words                     : 00605f
- z_wordsize                  : 006072
- z_wordsnsizes               : 00605f
- z_xor                       : 006079
- z_zbranch                   : 0053ce
- z_zero                      : 005398
- z_zero-equal                : 0053a4
- z_zero-less                 : 0053b0
- z_zero-more                 : 0053c7
- z_zero-notequal             : 0053bc
- zb_done                     : 0053e0
- zb_zero                     : 0053d7
- zbranch_rt                  : 0053cf
- ze_not_zero                 : 0053a1
- zero-less-is-less           : 0053ad
- zero-more_done              : 0053c6
- zero-more_true              : 0053c5
- zne_is_zero                 : 0053b9
